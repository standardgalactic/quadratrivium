Hi, welcome back. In the previous four lectures, we focused on how diversity improves a group
team or even an entire society's ability to make predictions. Focused on things like
the diversity prediction theorem, and we saw how diversity and ability jointly contributed
to collective performance. We saw empirical evidence of that fact in the Netflix Prize
case study that we did and in Phil Tetlock's research that included predictions by thousands
of experts. And he showed there that it's better to be a fox, what I'm calling a many-model
thinker, than it is to be a hedgehog, someone who's tied to a particular lens or a set
of tools. So prediction is really cool, and I hope I shared some of my excitement with
the topic. And it's really important, but there's more to life than just prediction.
So in this lecture, and in the five that follow, we're going to take up problem solving,
or you might think of it as innovation. How individuals, teams, and groups find better
solutions to problems. Really just how we innovate. So in this first lecture in this
set, what I want to do is I want to introduce you to a general problem solving framework,
and we're going to use that in the next few lectures. So this framework relies on perspectives.
These are encodings of representations of problems, and heuristics. These are the techniques,
algorithms, rules of thumb that people use to make improvements or find new solutions.
What we're going to do in this lecture is walk through an example showing how perspectives
and heuristics work, and then we're going to show how they characterize this whole process
of problem solving. And before waiting into the material, I want to make two preliminary
points. First, our ability to solve problems plays the central role in our continued problems.
That's not an opinion. It's something that almost anyone who studies growth and prosperity
believes. Later, we're going to see why some models can explain why this is true, why people
believe that innovation is so important for prosperity. Think back to the opening lecture
of this course. In that lecture, I discussed some of the big challenges that we face as
a society. Reducing poverty, improving education, managing the environment, providing financial
catastrophes, understanding our genetic code. If you think of each of these challenges,
we have to solve problems. So as we're trying to meet these challenges, we need ways to
think about finding innovative new solutions. And that's why more and more people are classified
as problem solvers. Second, problem solving is different from prediction. So just because
diversity proves useful in prediction, that doesn't mean it's useful in problem solving.
It could very well be the case that diversity hurts problem solving. And in fact, we're
going to see that some forms of diversity do. So before we start unpacking the task of
problem solving, allow me a few minutes to make each of these points in a little more
detail. I'm going to start with the latter ones, distinction between problem solving
and prediction. Prediction requires figuring out some future unknown state of the world.
So for example, in Tetlock surveys, people are asked to predict what countries are going
to fall apart, what's going to happen to interest rates. In the Netflix Prize, contestants
are figuring out what movies are people going to like. Now problem solving is different.
It consists of finding better solutions to problems, building a better mousetrap, a more
efficient combustion engine, a more useful search algorithm for the world wide web, or
even developing new cheap renewable forms of energy. These are all problems. Here's
how I explain it to my students when they take my classes. When they look through their
notes and try to figure out what their strange professor is going to put on the exam, they're
predicting. But when they sit down to take the exam, they're going to be solving problems.
So because problem solving differs from prediction, the types of diversity that are relevant to
problem solving are going to differ from the types relevant in prediction. Here's why.
In prediction, we're combining diverse models. Now in problem solving, we're also combining.
We're combining ideas that's similar, but there's a difference. There's a difference
in how we combine. So in predicting, we're averaging. In problem solving with ideas,
we mash them up. So peanut butter plus chocolate isn't the average. It's a Reese's. It's awesome.
So we can choose not to combine ideas as well. So sometimes ideas can point us in opposite
directions, and we have to choose one. So we don't combine our average in any way.
So the fact that we don't have to combine means that we can include even more of our
ideas. We can do even crazier stuff. Now in prediction, a crazy prediction that's far
from the actual values is going to make the collective worse off, less accurate. And such
predictions and the people who make them hurt the crowd. They're too diverse. Now in problem
solving, since we don't average the thing in, we can toss aside an idea that doesn't
work. And sometimes we'll like chew on it for just a second, and maybe it will spark
a related idea that does make some sense. So we'll probably be more embracing of diversity
in the problem solving context. So as we proceed in thinking about problem solving, we want
to do so with a very open mind, because we might well find that even though diversity
is amazing, it can also hinder problem solving. In fact, we'll see that it does in some cases
and won't in others. My point is, we can't know for sure until we really just do the
math. And doing the math part, getting the logic correct, is what animates this entire
course. So consider for a moment the diversity of language. On the plus side, language diversity
lends richness to the human experience. But language diversity also has detrimental effects.
It slows communication and increases the likelihood of miscommunication, or more likely to not
understand one another. Tell a little story. On December 11th, 1998, the Mars climate orbiter
was launched with the goal of orbiting Mars. That's why they call it the climate orbiter.
On September 23rd, rather than orbiting Mars, it crashed into the surface. Boom. This was
a costly mistake, because the orbiter cost $94 million. What happened? What happened was
miscommunication due to diverse languages. Now, the software on the orbiter was written
using metric units of force in what are called newtons. And the crew was sending instructions
using pound force. That's an imperial measure, what we would call an English measure. Well,
a foot pound of force is 1.35 newtons. So the result was, instead of orbiting around
150 kilometers above the surface of Mars, the orbiter flew within 60 kilometers of the
surface and then, because of gravity, crashed in. Now, NASA not so lovingly calls this the
metric mixup. Now, in NASA's defense, we haven't had a metric mixup ever since. They've gotten
better at solving communications problems and better at solving problems generally. And
we will too, because that's our hope. So that's the latter point, that to understand
diversity and problem solving, we can't just wholesale import all of our results from prediction.
We've really got to start a new blank slate. So let's get started. I want to start by thinking
about problem solving as the production of new ideas. Each idea is going to have a value
associated with it. Better ideas have higher values, worse ideas have worse values. Let's
take a very specific example. So I bring together a small group of professors and we're going
to plan a two-day trip to Rome for a group of alumni. Now, to avoid complicating the model,
let's assume we have a leader of our group and upon seeing an itinerary, we'll give it
a score from 1 to 100. So she's able to evaluate what's a good itinerary and what's not. So
we might first imagine that each person in our group comes up to the meeting and we've
got some plan in mind, some itinerary. And the leader can evaluate them and choose the
one that's best. So this is a pretty primitive model of problem solving. In this case, the
value of the group equals the value of the best person in the group, or rather the best
route through Rome. There's no communication, no sharing of ideas, and no synergies. Remember
those synergies I talked about? There's no synergies from diversity or talent. So it's
not really that interesting, but it doesn't seem that way. But first, let's think about
it because I'm going to use this as a baseline, just as a benchmark. So let's suppose that
someone's ability to create a good itinerary is correlated with what we call travel planner
talent level. And suppose that the leader knew these talent levels. Well, that gives
us a way then to think about who the leader should pick. Let me show you. So what we have
is these people have different levels of ability. And if you're the leader, you don't need a
group at all. You just look at the individual people and say, well, this person has the
most talent and I should just pick this person. Now you might say, well, perhaps he doesn't
know how much talent each person has. That's a good way to think. That's great thinking.
So now what we can do is we can say, well, let's think of each person as a draw from
a distribution, a bell curve, if you will. So here's the people who have high level.
And here's the people who are low and right in here in the center are average. And so
then when I pick somebody, I might pick someone first whose average. I might pick someone
from here who's low and then pick someone from up here who's high. So as she gets more itineraries
from more people, what we're going to see is that she's more likely to find someone who's
at the right tail of the distribution. She's also more likely to find someone from the
left tail of the distribution, but she can dump that person. So in this model of problem
solving groups are going to be better than individuals. And they do so because a group
is more likely to contain someone who's got high talent, right? Because if you're just
randomly picking a bunch of people, you don't know who's good, you're more likely to get
someone who's got high talent. But this leaves out any sort of group dynamics, any interactions
between the ideas and thoughts of the participants. There's no brainstorming, nothing of the sort.
So we've sort of got a problem with our model of problem solving. So if you go to any bookstore
and pick up a book on innovation, you'll see that the book mentions synergies between ideas,
sparks, the combining of one person's chocolate and another person's peanut butter to produce
the Reese's. So innovation is all about this sort of recombining. So for example, the book,
The Idea Factory, Bell Labs and the Great Age of American Innovation, it tells how Frank
Jewett and Marvin Kelly, these are the people who ran Bell Labs, brought together this diverse
mix of people, pure scientists, physicists and chemists, and then a bunch of engineers
to produce a sequence of just incredible breakthroughs. These included things like physical devices,
transistors, photovoltaic cells, the transatlantic cable as well, right? And also more abstract
tools like computer programming languages, Unix and C++ in fact, would invent a Bell
Labs. Now these innovations arose through creative people sharing ideas and intuition.
They weren't just draws from a distribution. So if we need to model problem solving, we
need a little bit more detail. So let's go back to our problem of finding a route through
Rome. Let's keep in mind that one can't see all of Rome in two days. So these routes are
going to have to involve some tough choices. Let's suppose the best route was submitted
by a historian and that he structures the days by historical era. So on day one, he says,
let's go to the Forum, the Colosseum, the Pantheon, the Castle San Angelo and the Temple
of Hadrian and then we'll conclude with the Arch of Constantine. Now the second day would
consist of roaming, no pun intended, the Vatican, St. Peter's and the Sistine Chapel.
Let's further suppose that an operations research professor submitted the worst route, right? The
one that just seemed to make the least sense, but that she specializes in traveling salesperson
problems and sort of finding minimal routes between locations for trucking companies. So
her route basically took a list of the attractions that she thought was important and found the
route that had minimal distance. So this route, it had the shortest walking distance,
but the thing is the leader of the group, the person who evaluated these routes says,
this produces way too much cognitive dissonance because the alumni are going to be jumping from
one era to another, from Caesar to the Renaissance, back to the Republic and so on. This gets too
crazy. So I'm not going to show you how this not so good idea from the operations research
professor to minimize walking distance can improve the best idea. So we'll see the synergy.
Let's look at a map of the history professor's day one itinerary. The tour starts out near the
forum and then it heads away from the center of town to the Colosseum, which is just fabulous,
right? Then it heads up to the Pantheon, over to the Castle of St. Angelo, then crosses back
to the Temple of Hadrian and then makes a long march back to the Arch of Constantine,
which, look at the map, was only a stone's throw from the Colosseum. It's practically a death march.
Now the operations research professor, her route may not be as good, but her idea, her tools are
useful. So if you ask her to employ some of her techniques for minimizing travel distance,
she would recommend two improvements to the historian's route. First, visiting the Castle
of St. Angelo prior to the Pantheon is reducing the criss-crossing without really disturbing the
historical order very much. I mean, think about it, it was finished 14 years after the Pantheon,
so it doesn't matter that much. Second, this walk to the Arch of Constantine at the end of the day
is a half hour each way. You could just reconstruct the first day narrative by starting at the forum
the beginning, then going to the Arch of Constantine the end, and then fill in the details. And if you
do that, you're going to save an hour, and you could spend that hour visiting shops and cafes
near the Pantheon, which is a wonderful place to hang out. So what this example demonstrates
is how you can combine solutions and tools to find even better solutions, and why problem-solving
consists of a little bit more than just sort of choosing the best person, choosing the best
solution. The example also reveals two features of problem-solving that are going to be the focus
of these five lectures on problem-solving. Perspectives and heuristics.
Remember, a perspective is a representation of the set of solutions to the problem.
So the historian's perspective, it considered each attraction according to its place in history,
the time it took place. So we could think of taking a list of the most important attractions
in Rome and assigned to each a date. So this historical ordering of places by their date
is her perspective. Now the operations research professor had a very different perspective.
She listed the same attractions by their locations on a map. She didn't care a lick
for what happened when they happened historically. It's a very different perspective.
Now given a perspective, an individual needs some way of finding good solutions. These are tricks,
recipes, algorithms, rules of thumb. These are what we're going to call heuristics.
So the historian's heuristics probably involved constructing a route that produced a consistent
narrative. So attractions that involve the same historical actors or eras would be more likely
to be considered in sequence. The operations researchers' heuristics, well, they were more
algorithmic. They might be things like switch pairs of attractions and see if the route becomes
shorter. Let's now go back and see how the two together found a better solution. We took the
best solution we had, which was the historians, and we reimagined it in the operations researchers'
perspective. So when we placed the attractions on a map and then applied the operations researchers'
heuristic, which was to switch pairs of attractions, we located a better solution.
These two ideas provide the foundation for much of what's to follow. Diverse perspectives enable
people to see solutions differently. Diverse heuristics enable people to locate new and better
solutions. Each of these two frameworks, perspectives and heuristics, is going to offer up just
bucketfuls of grist for our cognitive mills. For example, let's start with the concept of ability
on a problem. Everybody talked about high ability people and low ability people. When we think of
people as having perspectives and heuristics, ability becomes contingent on who else is working on a
problem. To see why ability is so contingent, let's do an example. Let's suppose I'm starting a new
company that's going to design software application, what's called an app, and that's going to actively
inform people when someone who's like them buys a book that they might like. Sort of how Amazon
predicts whether you like a book. But this is going to limit influence to your friends. So when you
visit the app, it's going to estimate how much it thinks you might like a particular book. Now the
problem I have to solve is to come up with a good model of people having similar preferences.
That's my problem. So let's suppose I go out and get a bunch of capital from a venture capitalist
and I hire some employees. Now all these jobs are going to be in Ann Arbor where I live because
Michigan has a lot of undergraduates who'd like to stay in Ann Arbor. So I get a couple hundred
applicants and I pick let's say, you know, 10 former students. Let's think about how these 10
students would do collectively. So to make this more tangible, let's suppose I have a rough version
of the software written. It's what's called a beta version. And this beta version was the best code
I could write. And what I'm counting on is these students to help me write better code. And not
assuming these students are smarter than me, I'm assuming that they're somehow different. And we
want to figure out how much value these students add. So let's suppose that my program has data on
pairs of friends. So in effect, I've got a long list of pairs of people. But here's the issue.
My data represents each person by five letters. So what I've got is when I think of a pair of
people, I've got an entry that looks like R, F, T, S, J. That's person one. And then a comma that
says this person is friends with J, F, K, L, M. That's another person. So I've got this long list
of these, you know, pairs of long sets of letters. And this is a really complicated thing to be
passing around and takes a lot of memory. One of my new employees might tell me that, you know,
I could do better than this. And then I could store this as a binary square matrix.
That's her perspective. Now I say, I don't even know what a binary square matrix is. And she says,
what's really easy? Here's what you do. You basically create a column and a row for each person.
So now you just identify people as A, B, C, D, E. And then you put a one in the corresponding column
if the person is friends with that person. And you put a zero in the corresponding column if
they're not. So if person A is friends with person B and person D, those entries get one.
So now if I want to know someone's friends, I just have this simple matrix instead of this
giant list of columns with five numbers. So this is great. So this new perspective
saves me an enormous amount of memory in my computer. So instead of long list of numbers,
I've just got this simple square. So diverse perspectives in action.
Now once I have my data in this new perspective, there's a whole bunch of queries that used to
be really difficult to answer, take a lot of time computationally that become fast.
So for example, suppose I want to know how many friends a person has. Now in my old perspective,
how would I have to do it? I'd have to go down that long list and have to count how many pairs
contain each person. Well, now I can just look down the row and I can say person B
has three friends. I can just count up the number of ones. Or suppose I want to know the overlap
between two people's friends. Well, how would I do that? Well, now what I can do is I can just
take person A and person C and I can look at their rows of friends and I can say here are C's friends
and here are one's friends and the overlaps are on D and B. So they have an overlap of two.
So that's great. So this person by introducing this notion of this binary square matrix
has basically simplified the programming we have to do and made all of our information condensed
and our software is just going to run faster. So this first employee added value to the firm.
She improved the value of our solution because she knew matrix algebra and her knowledge of matrix
algebra gave her a perspective that I didn't have. Remember I've got 10 employees though. So let's
think about the next one. Let's call him Bill. So Bill might also be an expert in matrix algebra.
That's great. But here's the problem. If so, he may not add that much value. In fact,
he might not add any value because my first employee already told me about matrix algebra.
So Bill, in order to add value, he has to come up with new ideas. And if he comes up with the
same ideas that she had, it's not going to help. So Bill's value, anyone's value, a problem solving
context, depends on coming up with something new. And if he doesn't have anything new to add,
any new perspectives or heuristics, he's not going to improve the value of our solution.
It's not that he's not smart. He is. It's not that he doesn't have ability. He does. It's just
that we already have somebody in the house who knows what he knows. We can therefore think of
each person as a collection of tools. Now formally, these are going to be perspectives and heuristics.
But let's metaphorically think of them as just tools to make the core logic I'm trying to get
across as transparent as possible. So each of the 10 people that I hire brings with him or her
a toolbox. Now on the job, they may learn more. They could gather more tools. Let's hope they do.
But for the moment, I want to think of these toolboxes as fixed, just a fixed set of things
they know how to do. Now within this simple model, I can draw some other surprising insights.
So here's the first insight. A person's contribution is going to depend on the number of
tools they have and on the diversity of those tools relative to those of other team members.
So in this model, talent, ability, skill, intelligence, whatever we want to call it,
is going to be captured by the number of tools that a person possesses.
Someone who has more tools is going to be more likely to possess one that works on the problem.
In my case would be a tool that improves the code I'm trying to write. So all else equals,
someone with more tools is going to be more likely to find an improvement to make an innovation.
They're going to seem smarter. Now second, diversity relative to the team is also going to matter.
So let's take three problem solvers and let's suppose two of them possess lots of matrix
algebra skills and that the third knows a lot about networks. Now these networks are also
going to be relevant to our software problem. Notice the first and the second person,
they might have a lot of tools, but they have the same set. The third person, they may have fewer,
they may have the same, but they have different tools. So that means that her added value is
probably going to be higher because she knows different things than the other person.
So if we think about talent as tools, a person's contribution depends on what
different and relevant tools she brings. Now there's two ways to have different tools
and other people. One way of course is to just have more tools. Now we're talking about relevant
tools, but you know one way to have more and other ways to just have different. Now one last
point should be clear from this analysis. Someone's contribution will also be contingent
on when she works at the problem. Now we see this in stark form when two people have the same
tools because whoever goes first looks great. They might even look like a genius and whoever goes
second, well they don't add anything because anything they know, the first person has already
added that. So how contingent, how contingent is it? Well a colleague of mine, Lu Hong and I,
proved the following result. Suppose you think of people with these toolboxes, again consisting of
these perspectives and heuristics, and if we give a problem then they sort of apply their heuristics
to it. And let's suppose that each person is sort of equally good, that is they have the same talent
level. So even if I make that restriction, you can show the contribution of each person can be
any amount you want. Here's how you do it. If you want a person's value to be pretty much zero,
then you just make sure that everybody else who's gone before her has already possessed her tools.
If you want her to make a huge contribution, look like she's just really, really smart,
then what you do is you give her tools that no one else possesses. And if you want to go in
between, if you want her to make a modest contribution, then you give her just a couple of
unique tools, right? And that'll mean that she makes some contribution, but not a huge one.
So in practice, if you have more tools, you're also more likely to have unique tools,
and you'll be more likely to make a contribution, you know, to improve the existing value of what
we're doing. And if you have fewer tools, you could still add value, right? Think back to our
operations researcher. She found a lousy route through Rome on her own, but she was able to
greatly improve on what had been the best route because she basically had new tools. Now, this
technique or tool that our operations researcher had of putting things on a map and trying to find
a shorter distance, where did that come from? Remember, I said it came from something called
the traveling salesperson problem. Now, this corresponds to finding a shortest route between
cities to reduce travel time. And we applied it here to finding better routes for tourists.
Well, guess what? We can also apply it in other contexts as well,
even in contexts that have nothing to do with travel. For example, suppose you're writing
some computer code and you have a bunch of operations. So these could be operations on
matrices. You might begin by first multiplying the matrices and then adding up your answers.
Well, you could switch the order. You could use that heuristic that the operations researcher had,
and you might first add and then multiply. And it could turn out that this is faster
and save computer time. So here's what we learned. We learned that heuristics travel,
a tool that we learned for one problem may work for another. Now, it may not,
but it could, and that's the point. So we're going to see this idea of applying existing
heuristics to new problems of combining and recombining. And we're going to see that that drives
innovation, that it's a big part of economic growth. Well, what about perspectives? Do they
travel? Can we take a perspective that we learned in one place and apply it to another?
Absolutely. Look, let's go back to the binary square matrix that we learned about earlier.
Remember that? We had this matrix where we had row and column for each person,
and we put a one in the row and column if the people were friends. Well, that was a friendship
matrix. We could take that same perspective to any network. So we could create a matrix for
countries that trade with one another or businesses that compete with one another.
But we can push this even further. Once we have the idea of a matrix in our head,
we can apply it to things other than networks. So for example, I could write down a matrix of
transitions. So I could let the row represent the state of something, like the weather, and I could
let the column represent what the state's likely to be like tomorrow. And then I could put probabilities
in my matrix. So for example, if it's sunny today, and I know there's a 50% chance it'll be sunny
tomorrow, and a 30% chance it'll be cloudy, and a 20% chance it'll rain, I could put this in a
matrix. So I can have a sunny row, and then I can have columns for sun, rain, and cloudy.
And I can use the matrix to characterize all these possible transitions. Okay, but why would I do
that? Why would I put this in a different perspective? Two reasons. First, by representing the world in
a different way, I might see patterns I hadn't seen before. And second, it could be that other people
have already derived mathematical results using that structure, and I can leverage those to learn
more about the world. In fact, in the case of my transition matrix, that's true, there's an entire
field known as Markov theory that contains a bunch of really cool results, such as that any Markov
theory, any Markov system is going to converge to an equilibrium. By that I mean that it'll converge
to a fixed long-term percentage of sunny, rainy, and cloudy days. So in brief, yes, just like heuristics
can travel, perspectives can travel, and they can actually take us a long way.
Okay, let's put a nice little bow on this introductory lecture on problem solving.
In talking about problem solving, we've learned some basic lessons. We learned that problem
solving differs from prediction. We learned a model based on perspectives, how we represent
problems, and heuristics, how we go about trying to solve them, and that we're going to use that
model in subsequent lectures to see how people and teams solve problems. Using that model we also
saw how talent and diversity matter, talent in terms of the number of tools, diversity in the
differences in tools, and how a person's value to a team depends on how that person's tools
complement the tools of others. So we're off to a great start. Now we've got a lot more to learn
and understand. We need to know more about how perspectives combine. We've seen some hints.
We have much more to get to. We also need to learn about how heuristics can be recombined to
drive innovation. That's a topic we've yet to even touch. So let's keep going and let's learn
more about problem solving. All right, I'll see you next time. Thank you.
