So, first of all, the title of course should be rather enigmatic for most people.
So, my first goal is to try to explain a little bit what it means.
Sometimes I'll just read what is on the screen, because I personally find it confusing when
there are some words on the screen, and then the speaker pronounces something about the
same thing, but in different words. That makes me personally confused, so I'll read
from it. So, I'll start with a few words about the title. Neither of the two concepts that
it is composed of, a meta-series and dependent type-series, has a precise mathematical definition.
What it is supposed to mean is that the talk will be about the mathematical theory. I mean,
what ideally it is supposed to mean is that the talk will be about the mathematical theory
of mathematical objects that are called dependent type-series. Unfortunately, or maybe fortunately
to those of us who find the mathematics of dependent type-series fascinating, we don't
have a mathematical definition of a class of objects that we would agree to call dependent
type-series. So, I started learning what is known about dependent type-series around
2004-2005, and the only book about what they are that I could read at that time was by
Bart Jacob called Categorical Logic and Type Theory. So, the book has 778 pages, and the
first attempt to introduce dependent type-series is made somewhere very close to the end of the
book. So, it's basically almost all the end of the book. So, I actually read all the definitions
and constructions, not the proofs, that were needed to understand what Bart Jacob was saying in
his chapter on dependent or dependent polymorphic type-series. It took me about a year, but I was
able to understand what this guy is saying. So, then, but there were lots of other papers which
I couldn't understand at all. And then, slowly, I learned how to read the text on types here
written by computer scientists and logicians. So, there are rules, and the first and most
important rule is that you should never try to figure out how to prove this or that statement.
Once you learn to just trust your intuition, there is belief in everything that the established
leaders have stated without a proof or precise definition in their early papers, then it was
possible to understand what people in the field were talking about. I came from a field of algebraic
geometry of motives where we really prove things rather pedantically and where the standard is
the growth index SGA and EGA. And so, my first contact with papers written in this style was
just complete, I was completely confused. On the side of computer scientists, this approach
to concepts and results had a certain foundation. They actually created programming languages and
wrote programs using these results and concepts as the guiding principles and they worked.
So, computer scientists were saying, I don't want to prove this, but using this conclusion,
I can build this program and this program works. For me, it's sufficient and there is a certain
merit in such an approach. And if programs based on somebody's ideas have been working for 30
years and with many users, then these ideas must be correct. So, this is the... So, that's how the
very large mass of papers in this field is organized. And this didn't satisfy me. I had some very
beautiful ideas about how to use the dependent type theories to construct a formal system for
mathematics that would incorporate in its very structure the fundamental idea of counter
Burbaki and later the architects of higher dimensional mathematics that mathematically
meaningful statements must be invariant under bijection as a morphism and their high dimensional
extensions. So, we learned somehow as a... I wouldn't even call it as a meta principle, but just as a
principle of thinking that one should not ever consider statements which are not invariant
under the equivalence of the appropriate objects. And suddenly, there was this opening to create a
language where it will be really impossible to write a statement which is not invariant. So,
this invariance which goes back to the idea of bijections by Cantor becomes incorporated in the
logical structure of the language. And that was very exciting and very beautiful. And I really
wanted to kind of to bring it to the mathematical community and to say look what kind of beautiful
thing I have found. But, however, the ideas were unusual and went against the common wisdom in
several places. And I needed to have mathematically rigorous construction of the translation from
the new language that I was devising into the accepted formal language of Sir Mela Frankl's
theory with the axiom of choice. So, I need to have an interpretation and I need to construct it.
I had to construct it rigorously so that I can say, look, okay, it looks weird, but here is the
proof that it's right. I also needed mathematically rigorous proofs that this translation will
translate the main concept of mathematics which I was going to define the new language into the
counterparts in DFC. So, one is not just a translation, but a translation which
maps the basic concept into basic concept. So, the proofs themselves will have to be done in the
DFC so that they will be accepted by mathematical communities as being
valid. And so, first I needed a mathematically rigorous definition of this new language or better
formal deduction system because it also included the rules of how to construct proofs in it.
So, there is this gadget, this formal deduction system, and I needed to assign to it a mathematical
object of some sort. And so, this is basically what the meta theory of dependent type series is about.
So, the theory, the system which I was building in its practical manifestation that is, that is,
based on the structure of the computer programs that will have to be written to work with it
in a computer-assisted environment was clearly dependent type series. So, I was inventing a
new language but it was, it clearly could be classified as a dependent type series despite
the fact that we don't have a definition of what a dependent type series is. However, I wasn't sure
about the exact structure of the system and for so that it may take many years or maybe decades to
choose one or a few variants that will be most convenient for writing mathematics.
So, it was clear that the idea which I had allows to construct
many formal deduction systems. And I needed to be able to prove
or to construct a translation for all of them, not just one system. I couldn't take one system
and just work out the details for this one system. I needed something which would include some
abstract definition and then I would take a particular case of it. So, therefore, I needed a
ZFC rigorous definition of a dependent type series and ZFC proven theorems about the,
about interpretations of particular type series into systems such as ZFC itself.
So, what Jacob was suggesting in his book did not satisfy me. It was clear that
one of the reasons why it was at the end of the book is because he didn't know how to go any further
and indeed it was,
it was not clear how to use that.
So, in 2005 I came to the conclusion that I had to build a mathematical theory of dependent type
series. So, it was not a new subject. Now, there is an important picture to keep in mind and
depending on how one traces the history one can go at least as far as the
PhD thesis of John Cartmel in 1978 which we'll come back to later. And easily as far back as the
1847 mathematical analysis of logic by George Bull. So, it was a very established subject.
Even if we start with Cartmel and it makes a lot of sense to start with him, we are looking at a
subject that has been in developing for nearly 40 years. During this period there were many very
interesting and original ideas and a lot of hard technical work done. However, especially
where the ideas of logic and computer science had to be joined, there were also major gaps.
Not only simple gaps but places where the approaching lines from the computer science
and mathematics turned away from each other before they actually met and were getting further and
further apart. So, while they were in some sense pretending more and more that they're talking
about the same thing but in reality they were moving further and further apart.
So, in 2005 I started working on a new mathematical theory of type series
or method theory of type series if you want. Starting from the closest points that the two
lines have reached. So, that meant that very little and in the event almost none of the recent work
could be used. So, I had to discard a lot of what most of what people have done in the last 40 years
and start from the points which where the theory was 40 years ago.
That was of course a lot of trouble because it meant that I'm not citing any papers of the
people who are still alive and that was not looked at with simplicity.
So, I'm still working on this theory. So, I reached two major breakthroughs in 2009
and wrote very incomplete notes called notes on type theory. They contain the description of the
main structural features of the theory that I was aiming at and I think we'll have time
for me to draw a couple of pictures that will give some idea after I introduce
one mathematical definition. So, I'm still working on it and I'm slowly succeeding.
So, one my great success was that the paper that I was one of the most important constructions needed
for the translation of my language into ZFC, I submitted it to Publication IGS. They wrote back
to me that they don't accept papers in logic. I said that I claim it's not logic but
but algebra and category theory and so they accepted it for for refereeing and
and I received a rather sympathetic referee report. So, to me it's a recognition of the fact that what
I'm doing is actually mathematics and that's an important important for me it's kind of one of
the most important points to make that this weird stuff is really mathematics. It's just a little
unusual. On the other hand more and more people from computer science and logic
agree with me now that some of the fundamental facts that they took for granted need proofs
and and and in this
it's not that they
some of them started working on it but but I think most of them still wait for me to to do it.
But it's accepted that it's that that what I first sounded like like a crazy idea because
obviously everyone everyone knows that this is true and now today it's it's accepted by some
not by all that indeed this there is a gap and that nobody knows how to fill it up.
In fact in the particular place which I have in mind this gap was filled in 1983
in one particular case in in a very simple particular case and a very special particular
case by by a mathematician and logician Thomas Stryker and it was his PhD thesis and then he
published it and it was a book was was like I don't know how many 300 pages so the actual proof
of this of this little statement in in a very particular special case took him 300 pages and
I haven't seen any other proofs of it appearing since
it's a very strange community from my point
let me make now a small digression so that was all about the meta-series of dependent type series
and and what what what they are and and what they're not yet and and and why I'm interested in them.
So let me make a small digression in in in parallel to my work on mathematical theory of
type series I also worked on my new language for writing mathematics so it turned out almost
miraculously that I can build a working prototype of this language as a sub-language the language
proof-assistant code so there is something called proof-assistant code which has been in
development for like 30 years it's it has a very big user base it's an established proof-assistant
and I found a way to embed my language soundly as one probably should say or facefully facefully
into into the language of code um
so I decided to I didn't know how how much of of coax rather baroque language I will actually need
and I decided to try to determine what is the smallest subset the only way to determine it
was by by actually doing formalization so taking a piece of mathematics actually writing it in this
language and seeing how how much or how little I can use so I decided to choose the smallest
subset that I couldn't work with the only way to find out what I need or needed was was to start
writing a library of of mathematics in my new language using coax
so I started this work in the spring on 2010 it was fun it was it was not at all a hard it was
not at all a it was really a a pleasant way of doing mathematics um and there were surprises
one of which led to a major new line of development in the field the cubicle type theory so as a
particular surprise which I have in mind is that um for those who know um is that the
new valence axiom implies function extensionality that that's what god got a theoretical candle
board and he became very excited and and eventually um and he eventually came up with the cubicle type
theory in 2011 I had a library with all of the main structural definitions and theorems of the
kind of foundation and the application to the construction of the number systems up to the
rational numbers following the bourgeois approach so I decided that will be my test
can I construct a queue following the bourgeois approach so I would say define first define
what are monoids what are groups what are rings what are semi-rings what are what are fields
uh then I will define what is a group of um differences over
commutative monoid then I will define what is their ring of differences over over rig
it's it's rig is a kind of a semi-ring with with an additional axiom then I'll define what is a
localization of a commutative ring by by an ideal and in particular what is the ring of a field of
fractions over integral domain so I was I started doing it so that's for me that was a test that
and then I would apply to natural numbers natural numbers are internal in clock
um and I wanted to get from that rational numbers about which which will be the correct
rational numbers um so so I've done I did it and and it didn't took me very long
I in fact I did more I also introduced the notion of relations uh kind of less
or equal or greater or equal relations compatible with the algebraic structure on
each of the levels and and showed how to um how to descend it through the levels so for example
if I have an ordering on on a ring and I have an ideal with some properties then
how can I define an ordering of of the corresponding localization of the ring
so I added all these things which have which which were not in Burbank which which gave me
uh the the standard orders uh on um on rational numbers and and their compatibility with
multiplication and addition is as a consequence of uh general theorems about abstract object
uh so after that it was clear to me uh after having this experience that all of the sets
erratic mathematics can be conveniently and isomorphism invariantly written in this language
and that by that time what I was developing started to deserve the name of of of a foundation
of mathematics or of a class of foundations of mathematics
it became known as it became called univalent foundations
uf for short later the particular foundation that uses the language that I embedded into
coq which which is kind of a minimalistic version of of the language became known as unimath so
unimath is is a concrete foundation um concrete univalent foundation based on on this language
embedded into uh embedded into coq but the language of unimath can also be embedded into
different in the languages of different um proof assistance in principle
um
so this subsequent so that what what I did uh all applied only to um set level mathematics
this subsequent work by by benedictarans uh who was a member here uh twice I think uh
krista pulkin who was also a member here once and michael schulman who was also a member here once
proved that we can also conveniently formalize in the unimath category level mathematics
and when you start formalizing category level mathematics there are again some surprises
which are very um very interesting and and I I will say a couple of words
I will say a couple of words later
about about the surprises
or maybe I can say one word now the problem is that
a category as it's defined in in zfc is an algebraic object well it's same algebraic but
essentially algebra doesn't same algebraic because operations are not everywhere defined
so for such objects there is a natural notion of equivalence and and this
notion of equivalence is the notion of isomorphism
however for categories we also so so everything if I just formalize the the definition
from zfc then I'm I have a guarantee that everything that I can
say in in unimath about a category will be invariant under an isomorphism under isomorphisms of
categories but we want to to have invariance under equivalence of categories so that somehow
it shouldn't have appeared from somewhere and indeed it does appear and
in in unimath in fact there is there are kind of two classes of objects there are pre-categories
and then there are sometimes we call them either just categories or univalent categories which
form a subset of subclass of of all pre-categories and for this subclass
isomorphisms are the same as equivalences and and uh well okay this this is a little complicated
but uh so any category has a can be projected into into the class of univalent categories so you
can so this inclusion of univalent categories into all categories has a kind of a left adjoin and
this left adjoin to what's called risk completion and it's it turns any category into weekly
equivalent to it category univalent for which everything is invariant under equivalences
so so these questions about the difference between invariance under isomorphism and
invariance under equivalence we'll see that they come up very very um it's a very important
question so on the literally almost the first step of mathematical theory of type series and um
of meta theory of type series of gfc meta theory of type series and the fact that in unimath they
they they can be studied in this um internal way uh opens up
a creates a lot of a lot of new mathematics which is which actually tells us something in in in
in the form of actual theorems which in in the gfc foundations we can only talk about as as some
um philosophical principles some of the philosophical principles become become actual um theorems or or
or definitions um
so unimath contains now sufficient amount of basic mathematics for other people to start
formalizing their research work in some directions in particular a lot of work on the mathematical
theory of type series is now formalized in the unimath now here i need to to explain why why we
bother doing it because for for proving the consistency for proving the correctness of
of this new language uh we need to to do our proofs in gfc i mean it it's meaningless to do
a proofs about about a system about consistent server system inside the system itself i mean
if it's inconsistent then then of course you'll have a proof uh so um
um it looks at first as a strange exercise but um it actually isn't uh so while it is necessary
to formalize the proofs related to the translation of the unimath into the gfc in the gfc in order
to use this formalization as a certificate of correctness module with the consistency of gfc
formalizing it in the unimath is both interesting and satisfying because it requires the arguments
to be spelled out in in a lot of detail and will certainly make work on on the formalization in
the gfc much easier even despite the fact that these two systems are different
in many important points um and um so that was one digression that i wanted to to to say about
unimath and to say that uh a lot of the work which uh about the formalize about the mathematical
sewer of type sewers is now being formalized in in the unimath um and and this formalization is not
something which i do it's something which um the next generation so to speak does and uh it was
to some extent their initiative also
so i also want to make another very important uh point here um there are sometimes people start
arguments about what is better the gfc or unimath so i claim that these arguments are comparing
apples with oranges unimath should be considered in the line of foundations of constructive
mathematics then it becomes obvious what is its position and and one may start kind of productive
arguments about the questions that arise in the arises in the discussions of uh constructive
foundations so it should not be it should be included in this line of constructive mathematics
at the same time unimath is probably the first constructive foundation
where the law of excluded middle and the axiom of choice can be formulated in a non-trivial way
and this leads to the possibility to develop a foundation for classical mathematics inside the
unimath no so we uh so so far unimath is it's fully constructive we don't use either
excluded middle or axiom of choice however we know that certain theorems with which people like
the certain simplifications arise if we assume in addition excluded middle and axiom of choice
so what i'm saying is that we can i mean we or somebody else can start developing this found
this work on construct on classical mathematics inside the unimath using already everything
that has been done constructively in the unimath so we no we don't use axiom of choice
no sorry avi it's it's uh it would lead us very far
yes there is a trivial way to formulate it in type theory which leads to kind of nonsense
theory and and so that that was considered
in our approved to that that in type theory one cannot formalize classical mathematics in
in the in the unimath we have new ideas which which allow to formulate the axiom of choice
and and love excluded middle differently than they were originally formulated and
and this new form of formulations lead to a very
intuitive and and and kind of correct in quotes embedding of classical mathematics into type theory
um so at the same time unimath is probably the first constructive foundation
whereas the law of excluded middle and the axiom of choice can be formulated in a non-trivial way
so this leads to the possibility to develop a foundation for classical mathematics inside
the unimath by considering classical statements and proofs as the unimath statements that have the
that have the law of excluded middle and the axiom of choice is two additional assumptions
um
the foundation of classical mathematics that one obtains in this manner
is probably not as convenient as dfc and probably a little weaker although i i couldn't quite come up
with with an isomorphism invariant statement which would be provable in dfc and not in
in not in unimath that there is fewer statements can be proved without additional axioms however
this this this foundation is by ejection isomorphism invariant
and it is naturally a subset of foundation of constructive mathematics
that is those proofs that are essentially algorithms can be formalized without the loss of of their algorithmic structure
and uh finally it has much more convenient implementation in the form of the computer
proof assistance than the known to me implementations of dfc but that of course may change
um so we haven't explored these questions much because the unimath library is constructive
uh neither the law of excluded middle nor nor this nor the axiom of choice are used
as an assumption of any of its theorems this is the answer to
so let me now
try to describe the structure of the mathematical theory of type series
that i or or or or as now would be more correct to say we are are aiming it
and the central position there is occupied by objects called c systems
that were originally introduced and started by john cartnell in his ph diseases in 1978
under the name contextual category so that's how far back i had to um to go
so okay so here's how mathematics starts
and first it's it's rather obvious mathematics but by a pre-category we mean a pair of sets
more c and ob c with with four maps as usual um domain could the main identity and composition
which satisfies the well-known conditions of unity and associativity
i know that we're right composition of morphisms in the form f g or or f circle g
where f is from x to y and g is from y to z so this is called the diagrammatic order
and i have been using it now for many many um
in in my papers in all of my papers and i i should say that it's much more convenient
if one needs to read a diagram into the equation then this reversal of of direction of composition
is is a nightmare and especially if you start also thinking about non non non strict associativity
of composition in some cases then
then it gets even even worse so um so i i very much advertised this diagrammatic order
so this object would be usually called categories unless we want to emphasize that uh that we are
going to use this structure of this object in a way that is not invariant under equivalences
equivalences of categories in this case we will um
i don't know what's written here but in that case we will um we will call them pre-categories
pre-category category is the same thing just in a different context in dfc in in unimath this is a
different thing um so here is the definition of a c-system
so it's c-system as a pre-category cc with additional structure of the form
um so the first component is uh is a length function it's a function from from objects
not either more than classes of objects but objects of cc international number
there is um a unique object um of length zero
now there is fixed a map from objects to objects again not either more than classes
such that uh if the length of x is greater than zero then
length of the f t of x is the length of x minus one and the length and the f t of the point is the point
for each x there is fixed a morphism from x to f t x so it means that actually for any x
for any x if it if l of x is n then i have a tower
um
and here will be a f t l of x which will be equal to the point
um yes here and thank you
um
so for each x whose length is such that l of x is greater than zero and each morphism from y to f t of x
um so i need some more space so i'll um this is this this should be clear by um
well let me try so if i have an x of length greater than
than zero then i have a f t of x which is different from x because it has the length
one one less and i have this morphism px now for any f
from y to px
um there is fixed an object called f uppers the r of x and the morphism called q f x
such that the following additional conditions are satisfied so this unique object of length zero
is is the final object um this um the the p t of excuse me the f t of f star of x equals y
so that's an axon by the way it includes in quality equality of objects right so the the f t of
of this object equals this object again it equals um
so here i have p f uppers star of x because of this relation and i get a square and and the
axon says that the square is a pullback square
and now one has two are further axions about the behavior of q f x one says that q of the identity
equals identity
and another one says that
q of composition g f
is is equal to the composition of two q's
um
for a slightly different definition c four it's at the end of the slides and and the slides will
be posted so um you will be able to to follow the the links if need be um now it's it's not very
surprising probably that um this definition didn't immediately take off uh in fact i
i i think that
in fact i guess it was so bad that uh then john cartnell
uh left academia and and went into into the industry and he is now in the industry and i
i found him uh about two years ago he was very surprised that somebody found him and i invited
him to a workshop where his systems were considered and here and he came and uh it was it was interesting
so um it was it was not an immediately successful concept
however what what what turns out more and more is that
it is the right concept for for an important function in mathematical theory of type series
and one can both construct a lot of c systems and prove a lot of uh theorems about c systems
by by combining the two one can get a lot of theorems about a lot of uh a lot of things
it doesn't so far directly touch any of the it doesn't touch like algebraic geometry for example
i don't know where it would but who knows uh it certainly touches the the theory of infinity
categories so maybe i should actually spend um my last five minutes on um instead of advertising
my my papers on c systems um on seeing something uh something a little different so um my papers
can be easily found through uh through the internet um there is another direction which
which i'm not pursuing because i'm interested in the connection between c systems and actual syntax
so for me the main the main gap which i want to feel is between syntax between
i mean it is about certain categorical properties of c system constructed from syntax
kind of physical syntax satisfying uh certain properties so i'm i'm working very close to
the syntactic side uh so these guys are are much more interested in kind of to get as far away
from syntax as possible and i'm in in the so any syntax defines a c system in in a raw syntax
with variables defines are with with free and bound variables also defines a c system
uh subsystems of this c system are the the syntactic c systems of type series
actually sub quotients because they also input they also impose certain equivalence relations on
the expressions and
um now type series have also inference rules and inference rules reflect themselves as
partially defined operations on c systems so one good thing about c systems is is when you
see an inference rule written in in the into this shorthand of computer scientists you can
actually describe easily a corresponding what kind of operation on c systems corresponds to this
inference rule um so systems of inference rules where one has inference rules which depend on
each other which is typical sink in um in type theory um correspond to systems of operations
on um c systems so to purely algebraic gadgets um and um there is one
there are kind of three main systems uh of inference rules the the pi systems the sigma
systems as system and the identity type system and uh these guys they consider c systems with
these operations corresponding to these three uh sorts of uh of inference rules
and then they are they actually they consider a model structure one uh on the c system model
structure as in homotropic theory and uh no wait it's not a model structure how does it work no
they um they make a simplicial category out of a c system using this operation
and one and and uh Chris Kapook and one of the people working in that direction
in his phd c this he has proved that this um
and eventually one constructs a simplicial set out of a c system with operations so he proved that
um the simplicial sets are quasi-categories and uh moreover that they're locally
Cartesian closed quasi-categories and right now they're working in the direction of constructing a
will model structure on the category systems with these operations
and proving that the um homotropic category of that closed model structure
um is equivalent to the homotropic category of the um a locally Cartesian
of locally Cartesianally closed infinity categories so there is there is a very um
there is a lot of connection within infinity categories um crowd uh which is kind of the
idea was is to is a little bit further away from syntax and to analyze what is on the other side
so so c systems they um they're in the middle so one starts with the type theory
which is described in some terms familiar to a computer scientist it's kind of it's it's it's a
living object it's something which is actually programmed in c or or or i don't know enough camp
uh from this gadget one defines a c system
with uh additional operations
so on the other hand one starts with the category of something like i don't know
simplicial sets or some other
some other abstract mathematical objects which um which don't have any physical existence
um and from simplicial sets or from such a category with an additional with
some additional structure one also builds a c system
um
with with uh operations of this similar form
uh so this is usually rather easy um this is called constructing a model of of this
inference rules on this category that's that the meaning of the word model so the c system
is a model of the type theory and we have also another c system which is built from syntax
and there is a conjecture which says that this c system with its operations
is the initial object in the category of all such c systems with these operations
and so every time that one can construct these two things one has a homomorphic
and a homomorphism allows one to interpret the the sentences of the type theory
as as mathematical objects and so in particular one can apply it in the case of
unimass for example unimass is a particular type theory
there is a c system with operations corresponding to it syntactic one and then there is a construction
of um the c system with similar operations from counts implicit sets
with something which was one of these two major breakthroughs of 2009 which um
which i have um done and then if the initiality conjecture holds we have a homomorphism
and we know um this homomorphism in fact easy to interpret intuitively as
um it corresponds to the translation should corresponding with exist to the translation
intuitive translation of of the unimass language into the language of
gfc for example because this is uh this this part i mean this whole thing should be done in gfc
to um as a meta theory so that uh and the existence of this category of sets with with
the required properties is a consequence of of the uh consistency of gfc so so the consistency
of gfc is um is assumed here and um but anyway we have this initiality conjecture
and we don't assume that what do you mean the proof of the existence of gfc is assumed
that would be the additional action that one normally doesn't assume of course one assumes it
every time one uses gfc to prove something uh one assumes it consistency because if if it's
not your mind we don't sign it in the proof of some theorem
well but that are that is just a manner of it's of of expressing oneself
in in fact it is a um an assumption in
in uh
so but here is this initiality conjecture which for me is a central uh is a central thing and
this is what i'm working on so i'm i'm working on that on the one hand to uh to describe the
objects which appear here in the case of univalent uh found in unimass for example uh so to describe
concretely as this uh this object and and then i'm working on the initiality conjecture which
which is the main fact which was used to be assumed as being kind of obviously correct
except of course that that the guy defended the ph diseases of of like 200 pages proving it in in a
very uh simple case um but since then everybody just uh ignored it and continued to say that it's
obvious uh that it uh that it is true so uh so that that used to be assumed as an obvious thing
and in the in the field and um now it's changing and and and i'm
and i and in some other people were beginning to to to think about how to actually prove it
uh thank you
