Hi everyone, today I want to present you a concept that I find really fascinating, the
Diagonal Argument.
It refers to a sham of proof using an infinite set in a one-to-one correspondence with the
set of natural numbers.
It is in this context that it has been used the first time by Contour to demonstrate that
real numbers are uncountable, in other words that there is no one-to-one correspondence
between the real numbers and natural numbers.
It appears that Diagonal Argument is way more than a proof on infinite sets.
You will see that it is also a powerful tool to make self-reference statements that leads
to results about limitation on mathematics itself.
A lot of mathematicians have used it in this purpose, such as the Gödel incompleteness theorem,
the Turing-Halting problem, and the Tarski undefinability theorem, and others.
In this video, I will apply the Diagonal Argument to prove three theorems so that you will be
familiar with it.
Then I will show you that there is a method theorem based on Diagonal Argument for which
all these theorems are just an instance.
And finally, we will come back to our example in light of the meta-theorem, and this will
make things very clear about the essence of Diagonal Argument.
I will assume that you have an intermediate level in math, and that you are already familiar
with set theory, otherwise this will be the opportunity for you to understand it.
So let's begin with our first application of the proof, the uncontability of real numbers.
We want to prove with Diagonal Arguments that real numbers are uncountable, which means
that the set of real numbers has no objection with the set of natural numbers.
So first, we proceed by contradiction.
Let's suppose it is the case, real numbers are countable.
Then there must exist a list of all real numbers indexed by A, and each decimal is indexed
by G. The order of real numbers doesn't matter here, we can represent this list in a table
where rows are real numbers and columns are decimals.
Let's define now a Diagonal Number.
That is the real number for which i and g are equals.
Logically whatever are the decimals of D, this is a real number.
But now we define some sort of counter D, which is never equal to the decimals of D for the
same index.
And if you think about it, counter D is different from each D decimal of the number of the table.
So it can't be in the rows of this table.
But on the other hand, counter D should be a real number like any other decimal sequence.
So this is a contradiction, our assumption was wrong.
So we get back on our feats, real numbers are indeed uncountable.
This was the Diagonal Argument.
Then if you are unfamiliar with this, replace the explanation at your rhythm.
So you may think that this is very complex.
But starting from now until the end of the video, I will repeat this same shem again
and again.
I want to show you that there is a common backbone between all use of Diagonal Arguments.
Let's continue with the Halting Problem.
The theorem states that in any programming language or Turing machine, there doesn't
exist a special program that take a program and its arguments until if the program stop
or run forever.
So let's try to prove this.
We proceed again by contradiction.
So we assume there exists such a program that resolve the Halting Problem.
Let's call it H and H has two inputs, a program P and an argument M, applying on that program.
H return 1 if P applied on M is Halting and 0 if it doesn't Halting.
And we assume that programs are sequence of symbols defined on a finite alphabet.
We do not prove this here but the set of programs is countable.
So there is an enumeration of all programs.
Let's P and M be actually the index of the programs and arguments it encode.
We can then display the table of H evaluated on all programs and arguments.
So we define the diagonal term D which is the result of programs evaluated on themselves.
But we also define counter D which returns the inverse status of D.
Now what can we say about counter D evaluated on itself?
Does it halts?
It's hard to say.
Let's assume it halts.
Then by construction counter D of D is 1.
But since counter D is doing the opposite of D, counter D evaluated on itself should
halt too.
So maybe it doesn't halt.
But if it doesn't halt, D of counter D is 0.
But again counter D does the opposite of D so it should also halt.
If you are a normal human being it makes some time to get it.
So don't hesitate to pause the video.
So in any case we are in a contradiction.
So indeed we can state that no special program can resolve the halting problem.
I hope you are starting to see the backbone.
We assume the opposite.
There is always an enumeration, a diagonal term, a counter diagonal term and a contradiction.
Let's see now our last example, the undefinability theorem of Tarski.
This theorem states that no arithmetic formula can decide the truth value of any arithmetic
statement.
As usual we suppose here that such formula F exists.
We are dealing with arithmetic statements which are first-order logic formula.
So this is a sequence of finite alphabets.
It is then countable.
We can map an index to every arithmetic statement.
So F takes two inputs, S the index of the statement we want to know the truth and V the
index of the variable on which the statement S depends.
Then F returns the truth value of the statement S applied on variable V.
Again we can represent in a table the truth value of all statements applied on all variables.
Again we define the diagonal D, the truth of statements applied on themselves.
But we also define counter D, the negation of the result of D.
Now does the statement counter D is true when applied on itself?
Like for the halting problem, we end in the same situation, whatever is equal counter D.
We end in a contradiction so the assumption was false.
And we can state that no arithmetic formula can decide the truth of any statement.
Now that you have in mind the shame of a diagonal argument, let's try to understand it on another
level of abstraction.
Diagonal argument is shared between a lot of mathematical results.
But one theorem is the generalization of all diagonal arguments.
This is the lower theorem.
Before digging into this theorem, you should note that this is a result from a field called
category theory.
But since it brings a lot of complexity here, I decided to follow the approach angle of
this paper from Nozonianowski that says it's in a nice way.
It is our goal to make these amazing results, the lower theorem, available to a larger audience.
Throughout this aim, we restate the lower theorem without using the language of category theory.
Instead we use sets and functions.
So we will forget about category theory here as well and think in terms of set and functions.
So what states lower theorem?
For all y, if a function α from y to i has no fixed point, then for all sets A, no function
is subjective from A to y power A.
This is perfectly normal if you don't see a link with the previous theorem, it will come.
To prove this theorem, we will use again the diagonal argument.
But first let's rewrite it in an equivalent way to ease the proof.
We rewrite the statement by expanding the definition of non-surjectivity.
It gives for all A and F, we can always construct a function g from y to A such that for all
A in capital A, F of A is always different from the function g.
As a reminder, our function f is a function of one variable that returns a function of
another variable that returns a value of y.
And this is equivalent with a function of two variables that returns a value of y.
And it is more simple.
This is called curing.
For the proof, we will consider the later.
So let's begin the proof.
Our goal is to construct the function g.
We will define two functions for this aim.
First the diagonal function delta, which takes a variable A and returns a pair of that same
variable, then the north x-point function alpha for all y of capital Y, alpha of Y is
always different of Y.
Now we define g by composition.
G is alpha of F of delta.
For all A, let's evaluate g of A.
By construction, we can rewrite the expression as alpha of F of A and A.
But if we apply the north x-point properties, it is clear that g of A is never equal to
F of A and A.
But since it is called by alpha, it is always different.
In other words, A to Y to the power of A is not subjective.
At this point, the alpha function, the diagonal function g and F, should remind you something.
This is exactly the backbone of the diagonal argument, reduced to the essential.
But we are on another level of abstraction, so it is applicable to any set A and Y.
The shem of composition on the left is an accurate summary of what is going on during
the diagonal argument.
So now we will go back to the previous proof and look for the function fg alpha delta and
see if it is comparable.
So for the uncountability of real numbers, let's rewrite the diagram of the proof, but
with the actual sets.
And let's try to understand each function and set's equivalence.
So A is the natural numbers.
It comes from the assumption that real numbers are countable.
Why is a digit from 0 to 9?
Because we used decimal systems to represent real numbers.
F is our double indexed list L, a function that is supposed to be subjective.
G is counter D, a counter example that F will never reach.
D is a composition of F and delta, and alpha is a non-fixed point function.
From this element, we can unfold the proof of lower theorems and say that no F can be
subjective between n and 10 to the power of n.
In other words, the set of real numbers is uncountable.
Now for the halting problem, it is slightly different because instead of decimal sequence,
we worked with binary seconds.
So A is still related to the natural numbers because we admitted that programs were countable.
Y is the set 2, which contains 0 and 1, the two states that a program can return, halt
or not halt.
F is associated with our special program H, G to counter D, D is a composition of F and
delta, alpha is some sort of negation operation on binary digit, which has no fixed point.
Here again, if we unfold the proof of lower, we can say that n to 2 power n is not subjective.
In other words, the set of programs and the set of all possible states returned by programs
for each argument have no prediction.
This is very relevant for programs.
There are as many programs as natural numbers, but there are as many possible input-output
mapping configurations as there are real numbers.
This means that there are infinitely more functions that will never be computable by
a program than those who will.
And for the last case, I will be brief because this video is already too long.
This is very close to the halting problem.
Instead of programs, we have arithmetic statement, and instead of input argument, we have variable
of statements.
n to 2 power n is not subjective by lower, and in other words, it means that there are
as many arithmetic statements as there are natural numbers, but there are as many possible
mapping between a variable taken by an assertion and returned truth as there are real numbers.
This means that no single assertions from a countable set can manage to define the truth
of each assertion, depending of its variable, from an uncountable set.
Ok, so proofs are over.
It's now time to step back and think to what we have seen.
Diagonal arguments all state something different but in the same way.
It seems that the only change or the initial context on which you apply it.
I've recently read a summary in one line of diagonal argument.
I think it can make sense to you now.
It says when you apply diagonal argument on a system, you are telling him predict something
about yourself and do the opposite.
I like to think that it is like putting a malware into a computer.
Whatever reads this in its own language, arithmetic, programs, natural numbers, natural language,
there will be some kind of crash of the system.
Once more, I would like to quote a subsection of the paper from Nozon Janovski, who nicely
said about diagonal arguments.
The lawyer paradox is a 3000 year old primary example that shows that natural language should
not talk about their own truthfulness, Russelt's paradox shows that naive set theory is inherently
flawed because sets can talk about their own properties, Godel and completeness results
show that arithmetics cannot talk completely about its own provability, Turing's halting
problem shows that computers cannot completely deal with the property of results, a computer
will halt or go into an infinite loop.
All these different examples are really saying the same things, there will be trouble when
things deal with their own properties.
It's over, thank you very much for watching, I hope you enjoyed it, do not hesitate to
subscribe, it could have a side effect that makes me want to produce more content.
And see you next time!
