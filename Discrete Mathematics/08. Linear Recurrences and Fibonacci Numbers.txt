In our coverage of combinatorics, the mathematics of counting, we have encountered a number
of problems where you can immediately give the answer once you recognize its structure.
For instance, you might immediately recognize something as a permutation or as a multi-choose
problem, in which case you can just look up the answer.
Sometimes, however, you won't be able to immediately classify the problem, but often
in discrete mathematics, a problem will have a repetitive structure that you'll be able
to exploit.
Let's look at some examples.
Earlier, we asked the question, how many ways can you arrange n numbers so that no
number is in its natural position?
Or in the context we used it, how many ways could I return n homeworks so that nobody
gets their own homework?
Here's a related question.
How many ways can you arrange the numbers 1 through n so that each number is at most
one away from its original position?
We'll call this answer a sub n.
For example, when n is 1, it's not very interesting, a1 is 1, the number 1 just sits there.
When n is 2, again, there are the usual two arrangements.
We can arrange them 1, 2, or 2, 1, and again, the numbers stay close to where they started.
When n is 3, rather than having three factorial, six arrangements, we only have three arrangements
this time, 1, 2, 3, everything in its natural position, or 1, 3, 2, or 2, 1, 3.
You'll notice, for example, the sequence 3, 1, 2 is not on our list because 3 would
be too far away from its original position.
So, how do we analyze this?
Consider the last number, n, and ask, where can that number, n, be placed so that it's
no more than one away from its original position?
That means that the number, n, must either be in the last position or in the second to
last position.
Remember, we're trying to come up with the answer a sub n, the total number of ways of
arranging the numbers 1 through n, so that nothing's more than one away from its natural
position.
How many of those end with the number n in the last position?
Well, if the number n is in the last position, then I just have to arrange the previous n
minus 1 numbers, so none of them are more than one away from their original position.
But by definition, that can be done a sub n minus 1 ways.
It's just the same problem, but one smaller.
How many ways, so what about if n was in the second to last position?
Well, if n is in the second to last position, if it's in the n minus first position, then
what has to be in the nth position?
It has to be the number n minus 1 because anything else going in there would be too
far away from its original position.
If the number n is in the second to last position, the number n minus 1 is in the very last position.
And then, how many ways can you fill out the rest of the sequence?
Well, it's just using the numbers 1 through n minus 2 in such a way that none of them
are more than one away from their original position.
So how many ways can I do the problem of size n minus 2?
a sub n minus 2 ways.
Therefore, altogether, a sub n is going to equal a sub n minus 1 plus a sub n minus 2.
But wait a second, there's that Fibonacci recurrence again.
In fact, it even has the same initial conditions, right?
a1 is 1, a2 is 2.
This is going to give us the sequence little f sub n.
Here's another question.
Because a cat likes to run down the stairs, but it's a quirky kind of cat, the cat either
goes down one step or three steps in each bound, okay?
So the cat never goes down two steps, never goes down four or more steps, always goes
down either one step or three steps.
How many ways can it go down a flight of n steps?
Let's call the answer a sub n.
So a sub 1, if it's only one step, there's just one way for the cat to get down.
If for a sub 2, if it's got two steps, then there's still only one way for the cat to
go down, namely by taking one step, then one step.
I represent that as the sequence 1, 1.
If the staircase has three steps, then now there are two ways for the cat to get down,
either by taking all three in one jump or by going 1, then 1, then 1.
If n is equal to 4, we have three ways for the cat to get down.
That's why I say a4 is equal to 3, because the cat can either go down 3, then 1, or 1,
then 3, or 1, 1, 1, 1.
So I'm seeing the numbers 1, 1, 2, 3, do you think it's Fibonacci again?
No, I fooled you this time.
a5 is not equal to 5, it's equal to 4, because there are four ways of going down five steps.
You could either do 3, 1, 1, or 1, 3, 1, or 1, 1, 1, 1, 1.
So I've got 1, 2, 3, 4.
What about a6?
Perhaps it's equal to 5?
No, sorry to disappoint you again.
a6 is equal to 6, and there are the six ways that the cat could go down that way.
So what's going on here?
How many ways can the cat go down a flight of n steps?
Well, consider the cat's first step, the cat's first jump, if you will.
It is either going to be of size 1 or of size 3.
So how many of those trips down the staircase begin with a step of size 1?
Well, the problem will be this one smaller than the earlier one.
This cat would have to follow it by going down a staircase of size n minus 1.
So the number of ways of solving the n minus 1 problem is a sub n minus 1.
How many will have the cat starting at the top, at the nth step, starting with a first
step of size 3?
Well, after he makes the step of size 3, then he has a staircase of size n minus 3 to go
down, and therefore there are going to be a sub n minus 3 ways of continuing.
Therefore, for n greater than or equal to 4, we have the following recurrence.
A sub n, the total number of ways of solving the problem of size n, is equal to a sub
n minus 1 plus a sub n minus 3.
So this will generate the sequence 1, 1, 2, 3, 4, 6 like we saw, but then the next term
9 comes from the previous term 6 plus the term 3 before that number, 3 before the 9,
that would be the number 3.
Let me do another example.
13 would be 9 plus 4.
19 would be 13 plus 6, and so on.
The Fibonacci numbers that we've talked about before are defined officially by the initial
conditions f sub 0, that's capital F sub 0 equals 0.
F sub 1 is equal to 1.
And for n greater than or equal to 2, we know they satisfy the rule f sub n equals f sub
n minus 1 plus f sub n minus 2.
This kind of rule is called a recurrence, because a Fibonacci number is defined in terms
of the previous Fibonacci numbers.
So each number, after it's been created, reoccurs to generate future numbers.
So a recurrence, by the way, is also called a recursive equation, or a recursion, or sometimes
a difference equation.
Patterns that we observe with numbers generated by a recurrence are often easily proved by
induction, since the numbers can be expressed in terms of smaller versions of themselves.
And an induction, that's our strategy, is take a problem or a number and somehow represent
it in terms of a smaller problem.
So induction and recurrences naturally go hand in hand together.
Take for instance the Fibonacci recurrence fn equals fn minus 1 plus fn minus 2.
This is an example of what's called a second order recurrence, because to compute a sub
n, we need to look back two terms to a sub n minus 2, as well as a sub n minus 1.
Whereas the cat recurrence, a sub n equals a sub n minus 1 plus a sub n minus 3, even
though it only has two terms on the right side of the equation, it's actually considered
a third order recurrence, since to compute a sub n, we need to look back three terms.
The Fibonacci numbers originally appeared as an exercise in the book Liberabacci, written
by Leonardo of Pisa, sometimes known as Fibonacci, though there's no evidence that anyone ever
called him that to his face during the time he lived.
This was, Liberabacci was the first textbook to introduce Arabic numerals and modern arithmetic
to the western world that was still hung up on Roman numerals.
Some of its problems asked its readers to determine the number of pairs of rabbits starting
from a single pair of rabbits with the following birth rule.
In this population model, rabbits never die, not a very realistic assumption, but in month
n, every pair of rabbits alive in month n minus 2 gives birth to a new pair of rabbits.
Therefore, if a sub n is the number of pairs of rabbits alive in month n, then what are
these a sub n numbers?
A sub 1 is 1, because we have a pair of rabbits, a sub 2 is 1, they're still there, and a sub
3 is going to be, we still have that original pair of rabbits, but now they've produced
a new pair of rabbits.
In general, the number of rabbits alive at time n is going to be the number of rabbits
alive at time n minus 1, when I say rabbits I guess I mean pairs of rabbits, the number
of pairs of rabbits alive at time n is the number of pairs of rabbits alive at time n
minus 1, because they never die, plus a sub n minus 2, because all those pairs of rabbits
that were born in the n minus 2nd generation have produced a new pair.
That's a second order recurrence.
The problem was to determine the number of pairs of rabbits after one year, and so essentially
the problem was asked to determine a sub 13 using the recursion, and so let's say we can
almost do this one on our fingers, so a1 was 1, a2 was 1, and then 1 plus 1 is 2, 3, 5,
8, 13, 21, 34, 55, 89, 144, 233 pairs of rabbits at month 13.
Now for those trivia experts out there, in Fibonacci's original problem, the original
pair of rabbits started off pregnant, so in fact they had a head start in this process,
so you actually get the next Fibonacci number, which would be 377.
What if you want to find the number in month n without counting on your fingers?
Then would there be a formula?
Suppose I wanted to know the 100th Fibonacci number, but I didn't want to have to determine
the 99th and the 98th Fibonacci number along the way.
Is there a way I could go straight to the nth Fibonacci number?
And yes there is.
There is a formula, mathematicians call this a closed form for the nth Fibonacci number
because it's not recursive, it doesn't depend on previously defined numbers.
Here it is.
It's the nth Fibonacci number, f sub n, is equal to 1 over square root of 5 times 1 plus
root 5 over 2 to the n minus 1 minus root 5 over 2 to the n, exactly.
I don't know about you, but I find it to be pretty amazing that that thing is even an
integer much less the nth Fibonacci number.
So for example, pull out your calculator if you doubt me, take f sub 13, we're going to
calculate that as 1 over square root of 5 times 1 plus root 5 over 2, that's 1.618 dot
dot dot to the 13th power minus negative 0.618 dot dot dot, by the way it's the same dot
dot dot, it's the 1 minus root 5 over 2, gives you negative 0.618 dot dot dot, raise that
to the 13th power, divide that by the square root of 5 and you'll see you get exactly 233,
the 13th Fibonacci number.
In this lecture we will show why the Fibonacci numbers can be specified with a closed form
expression like the one given by Benet's formula.
I'll also describe a method to solve most recurrences of the form, well, most kth order
linear recurrences, that is a sub n is equal to some number times a sub n minus 1 plus
another number times a sub n minus 2 all the way down to some other number times a sub
n minus k.
Let's start by doing a first order recurrence, like let's do a very simple one, let's say
a 0 is 5 and beyond that we defined a sub n to be 3 times a sub n minus 1, all right?
That means that a 1 would be 3 times a 0 and a 0 is 5 so it's 3 times 5, a 2 is, aside
from being Julius Caesar's last words, a 2 is 3 times a 1 and a 1 is 3 times 5 so we
have 3 times 3 times 5, 3 squared times 5, a 3 would be 3 times a 2 which would be 3
times 3 squared times 5 which would be 3 cubed times 5 and you can see clearly that by the
time we get to a sub n we're going to have 3 to the n times 5, 5 times 3 to the n.
It's no surprise that every first order recurrence has a solution of the form a sub n equals some
constant times another constant to the nth power.
So with that as background our second order recurrences are going to have a similar form.
Almost every second order recurrence will have a solution of the form a sub n is equal
to some constant times r 1 to the n plus some other constant times r 2 to the n.
Let's do an example, let's look at Benet's formula for Fibonacci numbers.
So f sub n is 1 over root 5 times phi to the n minus phi bar to the n.
By the way, we use the expression phi as in phi binacci, doesn't that make sense?
So here's a proof of this by induction.
So f 0 would be 1 over root 5 times phi to the 0 minus phi bar to the 0, but anything
to the 0 power is 1.
So I have 1 over root 5 times 1 minus 1, which is 0.
So the base case works when n is 0.
Let's also verify the base case when n is 1.
So f 1 is 1 over root 5 times phi to the 1 minus phi bar to the 1, so it's being divided
by square root of 5, but phi minus phi bar is root 5.
And root 5 divided by root 5 is 1.
So our base cases work.
I gave you two base cases this time, and since I gave you two base cases, I can give an induction
hypothesis that assumes that it's not only true for the number k, but it's also true
for the number before it, k minus 1.
My goal is still to show that it will continue to work for k plus 1.
Want to show that f sub k plus 1 is 1 over root 5 times phi to the k plus 1 minus phi
bar to the k plus 1.
How are we going to do that?
Well, we'll use the recurrence.
f sub k plus 1 is, by definition, f sub k plus f sub k minus 1.
And f sub k, by our induction hypothesis, is 1 over root 5 times phi to the k minus phi
bar to the k.
And f sub k minus 1 is 1 over root 5 times phi to the k minus 1 minus phi bar to the k
minus 1.
What do we do here?
Let's put all the phi's and the phi bars together so I can rewrite it this way.
And then let's factor out a phi to the k minus 1 from that first expression and a phi bar
to the k minus 1 in that next expression.
This gives us, this gives us 1 over, that f sub k plus 1 is 1 over root 5 times phi to
the k minus 1 times phi plus 1 minus phi bar to the k minus 1 times phi bar plus 1.
Now wouldn't it be nice, I mean, look at my goal and look at what I have.
How am I going to get to my goal?
Wouldn't it be nice if that phi plus 1 turned out to be equal to phi squared?
Because then that phi to the k minus 1 times phi squared would give me my phi to the k
plus 1.
And wouldn't it be nice if phi bar plus 1 equals phi bar squared?
But how could a number plus 1 be equal to itself squared?
That only happens if x plus 1 equals x squared.
But let's see, that's the polynomial equation x squared minus x minus 1 equals 0.
And using the quadratic equation we see that there are two solutions to that and they just
happen to be 1 plus and minus square root of 5 over 2.
So we got very lucky, didn't we?
The numbers phi and phi bar do satisfy x plus 1 equals x squared.
And therefore I can replace the phi plus 1 with phi squared, the phi bar plus 1 with
phi bar squared.
And when we multiply those together we get phi to the k plus 1 minus phi bar to the k
plus 1 divided by square root of 5 as desired.
That was a pretty tricky induction, wasn't it?
So in summary, the Fibonacci numbers satisfy the recurrence fn equals fn minus 1 plus fn
minus 2.
And we saw that f sub n has the form a constant c1 times phi to the n plus another constant
c2 times phi bar to the n, where phi and phi bar were roots of the polynomial x squared
minus x minus 1.
Now take a look at that polynomial.
That comes from the same form of our recurrence, which we could write as f sub n minus f sub
n minus 1 minus f sub n minus 2 equals 0.
Don't they look alike, that polynomial and that recurrence?
Here is the polynomial method that'll work for almost any second order recurrence.
Suppose your recurrence looked like this, a sub n was p times a sub n minus 1 plus q times
a sub n minus 2.
Then I claim that it's going to have a closed form of some constant c1 times r1 to the n
plus another constant c2 times r2 to the n, and those constants r1 and r2 are the roots
of the polynomial x squared minus px minus q.
And now where do the constants c1 and c2 come from?
Those you get by comparing your closed form with the initial conditions, usually when
n is 0 and n is 1.
Suppose I have a recurrence defined by initial conditions a0 equals 1, a1 equals 2, and for
n greater than or equal to 2, I have the recurrence an equals an minus 1 plus 6 an minus 2.
Using that you can generate the next few numbers a2 equals 8, a3 equals 20, a4 equals 68 and
so on.
Great.
Now what is the polynomial that we need to factor?
We look at x, since the recurrence is an equals an minus 1 plus 6 an minus 2, I look
at the polynomial x squared minus x minus 6, which is equal to x minus 3 times x plus
2.
The roots of that polynomial are going to be r1 equals 3 and r2 equals negative 2.
Therefore for all n greater than or equal to 0, we have that an is some constant c1 times
3 to the n plus some constant c2 times negative 2 to the n.
So now how do we find c1 and c2?
Well we want to make sure that that recurrence works, that that closed form works when n
is 0 and n is 1, and if it works for them then our method shows that it's going to work
for all values of n.
So let's see, when n is 0 that closed form becomes c1 times 3 to the 0 plus c2 times
negative 2 to the 0, we want that to equal a0.
In other words we have to satisfy c1 plus c2 equals 1.
When n is equal to 1, the recurrence looks like c1 times 3 to the 1st plus c2 times negative
2 to the 1st and that has to equal a1.
In other words, 3c1 minus 2c2 has to equal 2.
Now solving these two equations and two unknowns, you get a solution of c1 equals 4 fifths and
c2 equals 1 fifth, go ahead plug them in, check it out, they work.
And therefore we have our closed form, a sub n equals 4 fifths times 3 to the n plus 1
fifth times negative 2 to the n.
You may ask, what if our polynomial has complex roots?
No problem, the polynomial method still works.
Now remember earlier I said that our method would work for almost any second order recurrence,
but the almost occurs if the polynomial has repeated roots, then we have to modify our
method a little bit.
For example, in the recurrence a sub n equals 4 a sub n minus 1 minus 4 a sub n minus 2,
then the corresponding polynomial is x squared minus 4x plus 4, which we know is x minus
2 squared.
So 2 is a double root.
In this situation a sub n will be of the form c1 times 2 to the n plus c2 times n, 2 to
the n, and as usual c1 and c2 are determined by the initial conditions.
The polynomial method can be extended to handle recurrences of order 3 or higher.
For example, how many ways can you tile a strip of length n using squares, dominoes and
triominoes, where triominoes have length 3?
These are called the tribinacci numbers and they satisfy the third order recurrence, t
sub n equals t sub n minus 1 plus t sub n minus 2 plus t sub n minus 3.
Well what if our tiles came in different colors?
Suppose a sub n was the number of ways to tile a strip of length n with squares, dominoes
and triominoes, but now our dominoes come in 10 different colors and our triominoes
have 8 different colors available.
Here the a sub 1 is equal to 1 because you can just put a square down one way.
A sub 2 is equal to 11 because you could either go square square one way or a single domino
10 ways because you have 10 choices for domino color.
A3 is 29 because you can go square square square one way, domino square 10 ways, square
domino 10 ways or a single triomino 8 ways because there are 8 choices for our triomino
color.
A sub 0 is 1 as usual.
So with the colored tiling recurrence, the problem we just described actually has this
recurrence.
We have the initial conditions a0 is 1, a1 is 1, a2 is 11, you can even put a3 equals
29 if you want, and then a sub n equals a sub n minus 1 plus 10 a sub n minus 2 plus
8 a sub n minus 3, where the 10 and the 8 are paying respect to the colors.
Now the corresponding polynomial for this would be x cubed minus x squared minus 10x minus
8.
And that can be factored as x minus 4 times x plus 2 times x plus 1.
And therefore we get roots 4, negative 2, and negative 1.
And therefore a sub n is going to be of the form c1 times 4 to the n plus c2 times negative
2 to the n plus c3 times negative 1 to the n.
And using the initial conditions like we've always done, we can get what those constants
c1, c2, and c3 are.
Here they happen to be 8 fifteenths, two-thirds, and negative one-fifth, respectively.
All right, now here let's look at the same recurrence, the same Fibonacci recurrence,
but what if we change our initial conditions, okay?
The Fibonacci numbers we know and love, the Lucan numbers are just like the Fibonacci
numbers, except instead of starting with 0, 1, they start with 2, 1.
And then they continue to grow in Fibonacci-like fashion.
2 plus 1 is 3, 1 plus 3 is 4, 3 plus 4 is 7, 4 plus 7 is 11, and so on.
In other words, the Lucan numbers satisfy the recurrence, l sub n equals l sub n minus
1 plus l sub n minus 2.
Now incidentally, the Lucan numbers were named after the French mathematician Édouard Lucan,
who discovered many beautiful properties of the Fibonacci numbers.
In fact, he actually named the sequence 1, 1, 2, 3, 5, 8 after Fibonacci himself.
Lucan discovered so many applications of the Fibonacci numbers and his own sequence, the
2, 1, 3, 4, 7, 11 sequence, that the sequence was named after him.
Lucan wrote a classic book on recreational mathematics and developed methods for prime
number testing that are still used today.
Because the Lucan numbers have the same recurrence as the Fibonacci number, then they're going
to have a very similar closed form.
We get that from our polynomial method.
So the Lucan numbers actually have a slightly simpler Benet formula.
They say l sub n equals phi to the n plus phi bar to the n, and there's no square root
of 5 in sight.
Because of this Benet formula, we can easily prove a beautiful mathematical pattern.
That is, if you take the nth Fibonacci number times the nth Lucan number, do you know what
you get?
You should check it out numerically.
You get another Fibonacci number.
In fact, you get the 2nth Fibonacci number.
Here's a quick proof of that.
If we take fn times ln, and we write fn in terms of its Benet formula, and ln as its
Benet formula, when you multiply those together, you get 1 over root 5 times phi to the 2n
minus phi bar to the 2n.
It's the difference of squares.
But that's exactly the Benet formula for the 2nth Fibonacci number.
So now since the Lucan numbers and the Fibonacci numbers have the same recurrence, they ought
to be counting similar things.
What do the Lucan numbers count?
Turns out the Lucan numbers count the number of ways to tile a circular strip of length
n using squares and dominoes.
For example, l sub 4 equals 7 because there are 7 ways to tile a bracelet of length 4.
You'll notice that 5 of these tilings can be straightened out at the clasp to obtain
a straight tiling.
The two of these tilings have a domino covering the clasp.
The fact that 5 and 2 are both Fibonacci numbers is not a coincidence.
In fact, we can write l sub n as f sub n plus f sub n minus 2.
That's another pattern you might notice while playing around with the Fibonacci and the
Lucan numbers, and that's not a coincidence either.
I mean, we can do that proof by induction, but let me show you a quick combinatorial
proof of this fact.
How many bracelets are there of length n?
On the one hand, by definition, well, combinatorially we know it's the nth Lucan numbers.
How many ways are breakable at the clasp?
Well, if I break it at the clasp, I just have a straight tiling of length n.
There are F sub n of those.
How many are not breakable at the clasp?
Well, if they're not breakable, there's a domino sitting on cells n and cell 1, and
so the rest of that bracelet can be tiled since it has length n minus 2, F sub n minus
2 ways.
So there's our combinatorial proof of this fact.
As a matter of fact, every linear recurrence can be interpreted as some sort of tiling
problem which I explain in greater depth in my book, Proofs that Really Count.
In these lectures, we've seen that there is far more to counting than meets the eye.
Mathematics answers questions of the form, how many ways can something be done, addressing
problems that appear in all branches of discrete mathematics, including number theory and graph
theory as we'll see.
Moreover, combinatorics can offer insights to problems that do not seem to say anything
about counting.
For instance, some people might look at the relationship L sub n equals F sub n plus F
sub n minus 2, which we just did, as a mere curiosity.
But when viewed combinatorially, we see that it's actually telling a story, a story that
can be recounted from two different perspectives.
This concludes our treatment of combinatorics, which should serve as a solid foundation for
counting many problems that appear in discrete mathematics.
In combinatorics, we encountered many beautiful number patterns that arose through counting
problems.
In our next major topic, number theory, we will again get to explore properties of numbers.
But this time, we will not be restricted to numbers that arise through counting applications.
Instead, we will explore numbers for their own intrinsic beauty.
