M. Weintraub 

& F.Tip

INTRODUCTION TO GIT*

*based on material that can be found at:

 https://git-scm.com/documentation/external-links
 https://www.atlassian.com/git/tutorials
 https://courses.cs.washington.edu/courses/cse403/
 Kevin Skoglund's lynda.com films

GETTING GIT

https://git-scm.com/downloads

Suggest accepting the defaults

All our work will be through the 
command line.

Windows users will use git bash.

2

GIT: TERMINOLOGY & WORKFLOW

create/modify
files

Working 
Directory

Staging 
Area

Local 
Repository

Remote 
Repository

stage changes

commit

push

3

GIT: TERMINOLOGY & WORKFLOW

Working 
Directory

pull

Remote 
Repository

4

GIT COMMANDS

 most commands are of the form

git <verb> <options> <path>

 bewildering number of options 
 many ways to achieve the same thing
 many “verbs” do not capture the intuition behind the command

git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]

[--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
[--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]
[--chmod=(+|-)x] [--] [<pathspec>…​]

Example from: https://git-scm.com/docs/git-add

5

STAGE CHANGES TO A FILE

create/modify
files

Working 
Directory

Staging 
Area

Local 
Repository

Remote 
Repository

stage changes
git add <file>

commit

push

6

OTHER COMMANDS FOR STAGING CHANGES

git add .

stage new and modified files in current directory

git add -A

stage all changes (new, added, deleted files) in entire repository

git add -u

stage modifications/deletions in already tracked files

git rm <file>

remove file from working directory & stage this change

7

COMMITTING CHANGES

create/modify
files

Working 
Directory

Staging 
Area

Local 
Repository

Remote 
Repository

stage changes

commit
git commit -m <message>

push

8

PUSHING CHANGES TO REMOTE REPOSITORY

create/modify
files

Working 
Directory

Staging 
Area

Local 
Repository

Remote 
Repository

stage changes

commit

push
git push

9

COMMAND: PULL CHANGES

Working 
Directory

pull

git pull

Remote 
Repository

10

OTHER COMMANDS

git log

show log of commits

git log —oneline

show log of commits (compact)

git status

git diff

git init

show status of 

show differences between working directory and repo 

create new repository in the current directory*

git clone <url>

create local repository that is associated with remote at <url>

git mv

rename file and stage the change

*in a subdirectory .git

11

COMMANDS FOR CONFIGURING GIT

 file .gitconfig in your home directory contains user-specific settings

 you can edit these to set your email, preferred editor, etc.

 project-specific settings are in .git/config

 view settings: git config <key>  
 e.g., git config user.name

 view settings: git config<key> <value>   
 e.g., git config user.name franktip

 view all settings

 git config —list
 git config <level> —list, where <level> is one of:  

--system (system-wide); —global (global to the user); nothing: (project level)

12

CONTROLLING WHAT SHOULD BE TRACKED

 create file .gitignore in top-level directory

 contains entries like *.log, dir/*.temp
 files matching these patterns will not be version-controlled

13

COMMITS AND BRANCHES

A branch is string of commits

 each commit identified by a 40 digit hex number
 default branch is called “master” 
 most recent commit on a branch is called HEAD

Branching lets you diverge from the main line of development:

 enables concurrent development, working per-feature, exploration of ideas

Branches are fast, cheap, and easy.  You should use branching extensively.

14

THE BASIC IDEA

commit 1

master

At some point, we want to work on 
the code as an independent activity 
– could be a new feature, could be 
a bug-fix

15

THE BASIC IDEA

Work may continue on master

commit 1

commit 2

commit 3

master

branch

commit b-1

So we create a branch

16

THE BASIC IDEA

Work may continue on master

commit 1

commit 2

commit 3

master

branch

commit b-1

commit b-2

Independently, work may continue 
on the branch

17

THE BASIC IDEA

Work may continue on master

commit 1

commit 2

commit 3

master

branch

commit b-1

commit b-2

At some point, we’ve done enough 
on the branch and want to merge it 
with master

18

THE BASIC IDEA

Work may continue on master

commit 1

commit 2

commit 3

commit 4

master

branch

merge

commit b-1

commit b-2

Now master includes work from the 
branch

19

COMMANDS: BRANCHING

git branch

git branch <name>

git checkout <name>

git diff <branch1> 

<branch2>
git merge <branch>

show list of branches

create new branch

switch to branch*

show the differences between two branches

merge <branch> into current branches

*git will only allow switching branches if there is no conflict between the
branches and the current branch’s working directory changes are staged!

20

MERGING BRANCHES

 best practices:

 start with a clean working directory
 keep commits small
 merge often

 if git detects a merge conflict, it will:

 display a warning message
 leave the conflicting information the affected file(s)

 you have two options:

1. abort the merge:  git merge —abort
2. resolve the conflict by:

(i) editing the files with conflicting changes
(ii) stage the changes
(iii) commit

21

HOW TO UNDO?

git commit --amend 

amend the last commit to reflect current working dir

git checkout <file>

restore file that is/was in working directory from repo

git reset HEAD <file> 

unstage changes to <file> 

git revert <commit>  

new commit that reverses the effects of <commit>  

22

CHANGING HEAD

$ git reset --reset-type <commit>

1. --soft

Reset Types

Points HEAD to a previous commit.  Any new 
commits will be from that point. 

The “later” commits will be lost.

BE CAREFUL USING THIS COMMAND.

Moves the repo HEAD, but leaves WORKING and 

STAGING alone (in their current states).

2. --mixed

Moves the repo HEAD and sets STAGING to 
match the REPO.  WORKING remains in its current 
state (untouched).

3. --hard

Moves the repo HEAD and aligns both WORKING 

and STAGING to match the repo.

23

WORKING WITH REMOTE REPO’S

A typical project strategy is to make a central 
host the “origin” for the project.
Team members: 

1. Clone the remote repository
2. Do work in a personal environment, 
synchronizing with the origin as 
appropriate

3. Propose updates to the origin
4. Accept or reject these updates (a role 
usually reserved for a special few or at 
least not the proposer).  Accepted 
changes are merged into the origin

 Example hosts:

 https://github.ccs.neu.edu/

(we will work here)

 https://github.com/

 https://bitbucket.org/

24

COMMANDS: SYNCHRONIZING WITH REMOTES

git pull

git fetch

git push

git push <remote> 

<branch>

fetch state of HEAD on remote and merge it locally

fetch state of HEAD on remote, but do not merge

push state of HEAD on current branch to remote

push state of HEAD on <branch> to <remote>

25

TEAM DEVELOPMENT WITH GIT

Assuming you set up git and clone'd the repo

1. git branch <your-branch>
2. git checkout <your-branch>
3.
4.
5.
6.

# your work goes here
git add .    # move your changes to staging
git commit –m “a good message”
git pull
 git merge   # if any updates, repeat (5)
git push

7.
8. Open github in a browser and go to the Pull requests tab
9.
10. The pull request will then show up 

Create a pull request and select your branch. 

a. Will kick off a continuous integration run
b.

Requires approval by another team member.
(in open source, the repo owner;
in industry, the project lead – often)

11. Two outcomes

a. Once all those tests pass: you can squash and merge.
b.

(tests don’t pass): you close the pull request without merging.

26

