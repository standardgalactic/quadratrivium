Well, enough of that abstract logic and Boolean algebra. Let's get on to electronics. Let's
make electronics go digital. For electronic circuits to be digital, they have to be able
to implement that zero and one, that abrupt transition between two possible states with
nothing in between, so it's unambiguous which state you're in. We've got to be able to make
those binary numbers. And the fundamental electronic device that is able to do that is a switch.
A switch is on or off, open or closed, high or low, yes or no, true or false, one or zero.
And so I'm going to begin with a demonstration of how you could implement the logic operations
I introduced last time using circuits with actual manual switches, and then we'll move
on in the rest of this lecture to see how it's done with electronic switches like diodes
and like transistors. But let's begin with this demonstration of three of the logic operations
I introduced last time, the first three in fact. So what I have here is a light bulb.
The light bulb represents the output of each of these three logic gates, if you will. If
the light bulb is on, we're in a one state, a true state, a yes state, a high state. If
the light bulb is off, we're in a low state, a zero state, a false state, and so on. I've
got a battery, that's my source of power. I'm just going to hook my circuit up to the
battery. And in this particular circuit I have two switches, and the switches are connected
as you can see in series from the battery. So current has to flow from the battery through
this switch and then through this switch in order to get to the light bulb. So what happens
if I turn this switch on? Now the switches represent the A and the B input. Here's A,
here's B. An open switch, an off switch represents the zero state, the false state, the off state,
the low state. A closed switch represents the high state, the one state. So for this
particular logic gate, which is what it is, I close switch A and nothing happens. I close
switch B and nothing happens, having open switch A first. I close both, and of course
with both switches open, nothing is happening. I close both switches and the light lights.
So this is a situation, a circuit in which the light bulb is lit, that is the output
is a one, a true, only when both inputs are ones, that is when both switches are closed.
Well that is clearly the operation and. A and B switches A and B, the two inputs both
have to be closed in order for this circuit to have an output that is positive, that is
one, that is the high state, that is true. So that's my first logic gate. It clearly
implements the first logic operation I introduce namely and. Let's move on to the next one.
You can probably guess what it's going to do. But here it is, it also has two switches,
so it's got two inputs. Again, an open switch represents a zero, a false, a low state. A
closed switch represents a one, a high state, and the light bulb being on represents the
high state, the light bulb being off represents the low state. So here we go. I'm going to
close switch A and the light bulb lights. And I'm going to close switch B and the light
bulb is still lit. I'm going to open switch A and the light bulb is still lit. I'm going
to open switch B also and the light bulb goes off. So this is a situation in which the light
bulb is lit, in other words the output is a one, if either A is a one or B is a one
or both. What's that? That's clearly the OR operation. So I have an AND gate and I have
an OR gate, the two most fundamental, simplest to understand, two input gates that I introduced
last time. I could very easily modify these so they would be NAND and NOR, those more
useful but a little more obscure gates. Okay, well we have one other very basic operation
and that was the invert operation, the NOT operation, the operation that takes A and
makes at its output NOT A. So let's take our battery, put it to the third of these gates.
This one has only one switch because the invert or NOT operation has only one input. And the
input is this one switch and right now the switch is open and the light is on. Hmm, why
is the light on when the switch is open? Well if you look at the way this circuit is connected,
I've got a wire coming from the battery, I've got a resistor here actually, it's getting
pretty warm too. This is not a very energy efficient circuit by any means and then current
is flowing through the light bulb also. And the light bulb is lit, you notice if you look
very carefully it's not quite as intense as the other two because of the presence of
this resistor. And the light, the switch is connected directly across in parallel with
the light bulb so when I close the switch the current has a much lower resistance path
to follow through the switch, doesn't go through the light bulb, the light bulb goes off when
the switch is closed. So this is an operation that takes an open switch, a zero state and
produces a one state at the output and it takes a closed switch, a one state and produces
an off light bulb that is a zero state at the output so this is an inverter. And again
this is an extremely inefficient implementation of that because right now lots of current
is flowing through the resistor, it's getting quite warm and I'm wasting a lot of power.
So we'll disconnect this. But I have electrical, I won't want to say electronic yet, but electrical
implementations of the logic operations that I introduced and the fundamental component
that made those work is the switch. And we want to move on now and do the same thing
with electronics. Remember the definition that I gave at the beginning of this course
for electronics is one circuit controlling another. And so right now it was my hands
controlling the switches. Now we're going to move to the situation where one circuit
provides the inputs to some switches and controls the output. And I'm going to take
you through several different ways in which we actually do implement logic circuits electronically
in the commercial electronics world. Before I do that I want to begin with a simpler example
which we don't actually use but which I'd like you to think about. So let me ask you
what this circuit is. Here's a circuit consisting of a resistor and two diodes. I've labeled
the left hand ends of the diodes, A and B. So those are the inputs to this logic gate.
And the output is labeled. There's a resistor there to five volts. And so what does this
circuit do? If you want to think about it a little bit, think about whether those A inputs
are zero volts or five volts and what happens. And if you want to pause and work that out
you can. And I'll come back and I'll work it out and we'll see what this particular fairly
simple circuit does. Okay let's have a look. Let's begin by defining logic levels. You
always have to do that in a circuit. You have to say what do I mean by what is zero? What
is false? What is low? Well it's very common and conventional to define zero volts or something
close to zero volts as logic zero. You don't have to do that. You could define zero volts
as logic level high and five volts for example as logic level low. But I'm going to define
zero volts as low and in this particular circuit five volts is high. And I've chosen five volts
because that's the voltage in one common although obsolete growing logic family that I will
be talking about. So there's my logic definitions. I have to make those definitions before I can
talk about this circuit and what it does logically. Now these are ideal diodes. Remember diodes
we've looked at them many times in this course already in analog electronic circuits. And
the ideal diode is on and has essentially zero resistance. It could be replaced with
a wire. It's like a closed switch if it's forward biased. That is if the end of the diode
coming into that little triangle is more positive than the end going out. So that's how we turn
diodes on or off. If it's off, if we put the bar end of the diode at a higher voltage
than the triangle end then it's reverse biased and it's an open circuit. Okay but if it's
on R is zero there's no voltage drop across the diode. So let's work out a truth table
for this particular circuit. So I've listed here two columns for A and B because one column
I'm listing the actual voltage and in the second column I'm interpreting what that
voltage means in terms of logic levels. So zero volts corresponds to zero logic level
by my definition. So here I have on the top row zero volts at A, zero is the logical input
at A, zero volts at B, zero is the logical input at B and I think you can see what happens.
If I have A and B both at zero both those diodes are on because the five volts can send
a current through either diode into ground into zero volts which is connected to A and
B. I'm not bothering to show you the ground or show you what's going on. I'm just saying
we connect A to zero and what happens. Current flows through the resistor and down to ground
through A or through B and that turns on one or the other of those diodes and it pulls
the output down to zero. In fact if either A is on or B is or if either A is zero or
B is zero or they're both zero you can see that we're going to get zero at the output
because one or the other or both of those diodes are going to be on. The only way we
won't get zero at the output is if we put both A and B to five volts then the diodes
are shut off. There's the same voltage as the five volts. We don't have higher voltage
at the right end of the diodes. They're turned off. They're open circuits. They're open switches
and so the output is connected to the five volts through that resistor and as long as
we aren't drawing any current the output will in fact be five volts. So this circuit has
a truth table whose output is zero volts if any one of the inputs either of the inputs
or both are at zero volts translate into logic the inputs are logic zero. Its output
is five volts translate logic one if both of those inputs are one. So this has a truth
table zero zero zero one. Its output is a one only if both inputs are a one and it's
clearly an AND gate. So this is a diode resistor implementation of an AND gate. Now we don't
actually make gates this way but I show you this because it's quite simple and straightforward
and it's quite analogous to the gates I showed you using light bulbs and batteries and switches.
So that's what that is. So here's another logic gate made from diodes. If you want to
pause and figure out what this does that's fine. If you don't bear with me I'm going
to come right back and we'll take a look at analyzing this circuit. So again we're going
to use the same logic definitions zero is a logic zero five volts is a logic one. Again
those aren't set in stone we could do the opposite but we're going to keep with that
convention these are ideal diodes they're either on they have no resistance or they're
off they have infinite resistance. Let's look at what happens again same table zero volts
at a zero volts at b what does that do? Well if a and b are both at zero volts clearly
the output has no way to be anything but zero volts because there's nothing but zero connected
anywhere in this circuit. So if a and b are both zero the output is zero. But what if
b is one that is b is five volts well if b is five volts that b diode is going to be
forward biased current is going to flow from left to right through that diode down through
the resistor the b diode is on it's a short circuit it's like a piece of wire it's connected
to five volts it's also connected to the output because the diode becomes basically a piece
of wire and so the output goes to five volts. You can see the same thing would happen if the
a diode were on the output would go to five volts if a were at five volts or if both of them were
at five volts. So this is a circuit which gives us an output of one if either a is one
or b is one or they're both one and so this is an implementation of or in diode logic.
So again we don't actually use diode logic these days but this is a very simple implementation
of the and and or operations and you can see how it would work. What we do in the modern era is
have a whole family of electronic circuits that in fact implement these logic gates and I want to
spend the rest of this lecture talking about some of those logic families I won't cover them
exhaustively I won't tell you all the details I won't go into a lot of subtleties but I want to
give you a sense of how just a few of them work. I'm going to begin with what's called transistor
transistor logic TTL logic as it's called TTL is a form of logic that was developed in the 1970s
it's still in use on occasion although it is being superseded rapidly by circuits based on
metal oxide semiconductor field effect transistors which I'll talk about in a minute but TTL is
still with us enough that I think it's useful to see how it works and it's also useful because you
know about bipolar transistors we spent a lot of time on them in the analog part of this course
and so it's useful to see how this gate works so here is a TTL gate with two inputs a and b
listed and an output and a bunch of transistors and resistors it's not a very complicated circuit
in TTL by the way the voltage for the power supply is always five volts a logic zero state is
somewhere in the range of zero to point eight volts notice it doesn't have to be
perfect that's the nice thing about TTL and the the the high state is somewhere on the order of
three to five volts as long as there's a big gap there you can distinguish it doesn't matter
whether the output is 4.5 volts or 5 volts or 3.8 volts or 4.7 volts that's a one and that's all
you care about in a digital circuit so how does this thing work and well let's imagine that a and b
are either not connected to anything or they're connected to five volts now look at a and b
they are emitters emitters this is a funny transistor the one labeled q1 it has two emitters
well let's just get used to that it's a transistor with two emitters and each of them behaves like
we know the emitter of a bipolar junction transistor behaves but if a and b are either at
five volts or open which is the same thing effectively transistor q1 is not if i make coin
a word transisting at all we're not using it as a transistor on the other hand there is a
base to collector junction we don't normally use transistors this way and we might fry them if we
did but current can flow that way through the collector through the base to collector junction
of q1 it goes on into that transistor labeled q2 and it turns on its base emitter junction
and that base emitter junction is turned on and as a result the voltage at q's to collect q2's
collector the upper electrode of q2 is low and consequently that means there can't be any base
current in that upper transistor q3 that transistor is turned off current does continue on through r3
and that builds a voltage across r3 and current can then also go through q4's base emitter junction
that turns q4 on and as a result that pulls the output down to approximately zero volts
so if either if a and b are both unconnected which is a nice thing about ttl i don't recommend
doing this but you can leave an input unconnected and it will be as if it were at a high state
the five volt state but don't do it causes some problems with your circuits what if we connect
one of these two inputs to ground well then that first funny transistor with the two emitters
does conduct it turns on as a result it tries to draw current away from q2's base emitter junction
it can't do that it turns the base emitter junction off q2 is off the collector of q2
goes high and because the collector of q2 goes to a relatively high voltage we can now drive current
through q3's base emitter junction and if there's any current to be drawn at the output that current
will flow into the output the point is that will connect the output basically to the high
five volt situation and so if we ground a connected to zero logic zero if we did the same thing with
b we would have the same argument if we did the same thing with both of them we would have the
same argument so this is a circuit where the output goes high if either of the inputs is low
well let's review that um a and b both unconnected are connected to five volts
a and b are at logic one that means the output is low if a and b are both grounded
or one or the other is grounded is connected to zero volts is at logic zero the output is high
and so the truth table looks like zero zero one zero one one one zero one and the only case where
we get an output of zero is when both inputs are high and that's a NAND gate so that's ttl NAND
and we could easily build ttl nor and we can make inverters and we can make whatever we want
basically but that's how transistor transistor logic works and you don't really need to know
those details to build digital circuits but sometimes it's helpful to understand what's
actually going on inside your gates because it helps you troubleshoot some of the weird anomalies
that can happen now there's one um sort of variant on ttl i'll just mention briefly because we're
going to use it in a circuit we'll do a little bit later and it also makes wiring some circuits
easier occasionally you can get ttl gates in which there isn't that complicated output structure
there's just a single transistor sitting there with its collector hanging and you get to connect
to that collector pin and connect whatever you want that's called an open collector output and
it's useful in some instances and one place where it's useful is it means you can connect the outputs
of two ttl gates directly you connect this thing called a pull-up resistor that goes up to the
power supply voltage the five volts it would be and or any voltage you want actually because it
doesn't have to be the five volts in that case and you can connect another gate directly to it you
get what's called a wired or situation in which the output is the output of either gate it's actually
a wired nor because it's the inversion but that's okay this is a situation you will see occasionally
and we will have one occasion in this course to use an open collector ttl gate so we'll look at
that a little bit later well let's move on because ttl as i mentioned is getting obsolete
you can still buy them some of them are really hard to find i'll tell you because i still use
them in teaching sometimes because they're obsolete what we use instead are the metal oxide semiconductor
field effect transistors and i introduced those way back in the lecture on transistors
but let me remind you what a MOSFET is here's a diagram of an n-channel MOSFET and the MOSFET
consists of two electrodes called a source and a drain and they look in these simple diagrams
pretty much symmetric there this case the source and the drain are little incursions of n-type
semiconductor in a big p-type slab and there's another electrode called the gate which is a
metal gate insulated by typically silicon dioxide from the p-type semiconductor and the way this
thing works and you might want to go back and review that lecture if you're having trouble
remembering this if you put positive charge on that gate it will draw negative electrons of which
there are a few in that p-type material not many but it will draw them into that region between
the two n-type incursions and it will make an n-channel it's called this why this is an n-channel
MOSFET and then the thing will conduct so this is a switch which you turn on by putting positive
charge on the gate and as i mentioned back in the lecture on transistors you could build a
complementary MOSFET which has an n-type slab and p-type incursions and that's going to be really
important in how we understand digital logic circuits in the modern era okay so let's move on
and talk about what's called CMOS a term you've almost certainly heard your digital camera almost
certainly has a CMOS sensor for example your computer i guarantee you uses CMOS circuitry
as most of the circuitry for the logic operations it does and there's some very good reasons CMOS
uses n and p channel transistors the complementary transistors that's why it's c the c and CMOS is
complementary metal oxide semiconductor we use the n-channel and the p-channel transistors
in series combinations and what that means is one of those transistors is always off
so the circuits that go from the power supply to ground in any CMOS device are always open circuits
because one of the two transistors is always off so they don't draw any power great they don't need
any power well not quite the only time they need power is when you're switching the state
no power when you're not switching state but when you're switching the state of the system when
you're switching from a zero to one or one to a zero when you're turning the transistor on or
turning it off current has to flow to charge that gate capacitance to dump charge onto that gate
or to pull charge off the gate and so there are little bits of current flow in these circuits
when you're changing state and the faster you choose to change state the more rapidly you have
to pull charge on and off those gates and so the more power these things use these circuits are
ubiquitous in consumer electronics and computers and the higher the speed of your computer the more
power it draws one of the things your computer will do to save battery is to slow down unless
you're doing real heavy number crunching or analyzing huge images or something else that
requires all the processing power of your computer the computer will actually throttle down the speed
at which it does its everyday operations because that will reduce the speed at which charge has
to be moved on and off the gates of the transistors and that will reduce the power consumption and
make your battery last longer so that's the idea because between CMOS here's a very simple example
of a CMOS circuit this is a CMOS inverter we have a at the input and we have an output and
here's the deal logic zero zero volts logic one v supply i'm going to call it it could be five volts
for CMOS that's compatible with TTL it could be three volts varying voltage levels are used
so i'm just going to call it vs the p channel transistor turns on if you make the gate zero
the n channel transistor turns on if you make the gate equal to the supply voltage that is a logic one
so if a is a logic one the n channel transistor turns on the p channel transistor turns off
the n channel transistor is the bottom one and therefore in that situation with a equal one
the uh the output is connected directly to ground and goes to zero so the output goes to zero if
the input is a one that's why it's an inverter a not gate what happens the other way around if v
in a zero v gate becomes zero on both gates a zero logically in that case the n channel transistor
is off the p channel transistor is on and the output is connected directly to v supply the output
becomes a one or the opposite of what the input was so a CMOS inverter is really easy to understand
and you can see that point i made that the transistor consists the the circuit consists
of two transistors complementary transistors in series so unless you're changing state
and flowing charge on and off those gates there is no power being drawn in principle
from the power supply so that's a not gate okay let me ask you what this does you want to work
this out take a pause and work it out otherwise i'll go right on to explain it so this one's a
little more complicated up at the top it has two p channel transistors in parallel down below it has
two n channel transistors and they're in series remember that the p channel transistor turns
on if the gate voltage is zero so if a is zero the left most p channel transistor is going to be on
if b is zero the right most p channel transistor is going to be on if a and b are both zero they're
both going to be on and under those conditions if a is zero the n channel transistor the upper one
will be off and i don't care what the lower one is doing because those are in series if the
upper one is off no current can flow through that system there's no connection from the output to
ground so what happens in this gate let's say a is zero if a is zero i turn on the left hand
transistor becomes a closed circuit becomes just like closing the switch on my logic devices over
there and the output is connected to the supply voltage so i get a one so if a is zero i get a
one if b is zero similarly i connect uh the right hand p channel transistor to the output
and i get a one also what if they're both one well if they're both one then i turn on the lower
two transistors both the n channel transistors come on if only one of them is one and the other
zero one transistor will come on but it won't do anything for me because there won't so won't be a
complete path to ground and one of the upper transistors will come on and the output will
still be high so the only way to get the output low is to turn on both inputs to put both inputs
to one so the output is zero only if both inputs are one so if we work out what does this do the
only way the output is zero is if both inputs are one that's the opposite of what AND would do so
this is NAND so that's a CMOS NAND gate if you want to build a CMOS NOR gate i'm going to have
you do the project for this lecture well let me wrap up by talking a little bit about logic
families we have a number of families and again i've only picked a few of them to talk about
the original TTL these are called 7400 series logic circuits they begin with the number 74
and then some other digits 7400 7402 and so on they draw about 10 milliwatts of power which is
significant in a big circuit they can run up to 35 megahertz 35 million cycles per second
they run on a fairly narrow range of supply voltages and the logic levels are about zero to
point eight as i mentioned earlier and is from as low as two to about five volts they're robust
they consume high power they are relatively slow and they're increasingly obsolete but we do talk
about them when we do use them there's a bipolar 74 LS TTL which is a much lower power version of
TTL and what you'll find is in all these logic families a 7400 and a 74 LS 00 do the same thing
and you can use them in almost the same way then there are several CMOS families in fact there are
many CMOS families but the CMOS family that i'm most interested in for this course is the CMOS
74 HCT series the T stands for TTL compatible these are CMOS circuits that are designed to run on
the same supply voltage as TTL and so you could in principle pull out a TTL circuit and plug in a
CMOS circuit there are some considerations that make that not necessarily workable all the time
but it often can work by the way increasingly you don't use these individual small logic gates
except as ways of sort of patching logical connections between what are called large scale
integrated circuits that have maybe hundreds to thousands of transistors or maybe even millions
and are designed to do specific tasks but it's still worth knowing about these things and let me
just give you a quick look at some of the basic logic gates so some of the basic logic gates here
are the 7400 or 74 LS 00 or 74 HCT 00 it's a quad that means there are four gates in it
two input NAND gate and there's a picture of how you actually connect it in the little
integrated circuit package that looks like some of the other integrated circuits we've used already
the 02 is a quad to input nor the 04 is four is six inverters a hex inverter six not operations
and a quad to input or a triple three input NAND and a dual four input NAND and so on and so forth
and there's a whole bunch of these that do all kinds of things and we'll meet some of them
in the coming lectures so those are some of the basic gates and before we go on to the project
let me just show you a quick demonstration with one of these circuits okay here I have a more
complicated board than I was using with the analog part of the electronics we'll get to the details
in a minute and ignore the mess that's on here this is all the circuits we're going to deal with
in the rest of the course but I want to focus on this one particular device right here that's a 7400
dual quad to input NAND gate and I'm only using one of the gates in it I've got it connected to its
power and ground and I have its two A and B inputs connected to two switches so what I'd like you to
pay attention to are these two switches they're supplying inputs to this gate which doesn't look
like much not much happens that you can see with these integrated circuits and I'm taking the
switch inputs and the outputs over to some lights over here so let's look at those lights
so the two lights you see down here that are green represent A and B they represent the positions
of these two switches this light the red one represents the output in this bank of lights
the output is high if it's red and low if it's green that's how we can tell the difference
between the two logic states notice that's a lot simpler than a fanciest oscilloscope all we need
with digital logic is to know is it a one or is it a zero so right now both inputs are zero
there they are zero zero A and B are both zero and the output is indeed one I turn B to one
and it goes to one and the output is still a one I turn A to one and the output is still a one
I turn them both to one and the output goes to zero so that is indeed a gate whose output is
zero only when both inputs are one and that's the inverse of AND so that is indeed a NAND gate
and all the circuits on here are built with basically NAND and NOR gates although inside
them there may be more complicated arrangements of transistors that effectively implement those
things okay let's stop there but if you want to do the project here is what I'd like you to think
about doing for this particular lecture first of all I've given you nothing really so far that
had anything to do with using metal oxide semiconductor transistors so your first thing
would be to design a CMOS NOR gate look at the NAND gate and see if you can figure out how to
make a NOR gate and then the second one is a little more obscure I'd like you these to design a
digital circuit with four inputs and one output and I want the input to represent any four bit
binary number and I want the output to be a one only when the input is the binary equivalent of
either two or six or eight and you can use any gates you want in that table of basic logic gates
so you can use the multiple input gates if you'd like why on earth would you want to
build such a circuit well it's actually a very useful one and when you look at the project you'll see
why
here we are at the project for lecture 17 a lecture in which I introduced various
electronic implementations of the logic gate and so what I'd like you to begin with is by
designing a CMOS NOR gate you haven't had much experience in this course designing with CMOS
so I urge you to look at the other CMOS logic circuits I introduced in lecture 17 and see if
you can figure out how to make a NOR gate the second thing I'd like you to do sounds a little
bit more obscure and that's to design a digital circuit that has four inputs and one output
the input represents a four bit binary number and the output is one only when the input is
the binary equivalent of the number two or six or eight and you can use any gates in the table
of basic logic gates so let's move on and see what the solutions are
so here's the CMOS NOR gate and before I show you the CMOS NOR gate solution
we want a truth table that looks like 001 so we get a one only when a and b are both zero
and the rest of the time we get a zero that's the not or operation let me remind you though
from lecture 17 where I introduced the CMOS NAND gate we had a very simple circuit that consisted
of two p channel transistors in parallel and two n channel transistors in series now NOR is in some
sense the opposite of NAND it's not the inverse of NAND because that would be n but it's kind of a
complement so let's try doing the opposite let's try and put two p channel gate p channel transistors
in series and two n channel transistors in parallel now remember the n channel transistors are on
only if the gate voltage is the supply voltage in other words if a or b is high you will turn on
one or the other or both of those bottom transistors the n channel transistors and the p channel
transistors are on only if the gate voltage is low so let's think what happens here if either gate
is low one of the two p channel transistors turns on but only if both gates are low does that do
anything for you because only under those conditions will those two transistors that are in series
allow the output to be connected to the supply so only if the two inputs are low will both p channel
transistors beyond they're in series and that will drive the output high and that's the state we want
for a NOR gate on the other hand if either a or b or both are in fact high or at one then we turn
on one or the other or both of the n channel transistors at the bottom and that immediately
connects the output to ground in other words to the low state so we have successfully implemented a
CMOS NOR gate that produces the CMOS truth table that's project solution one let's move on to two
two is a little more complicated and I have not chosen to try to optimize this solution if I were
working for a company that was building integrated circuits and designing them I probably would get
fired for this one because I simply said let me do it by brute forth it's probably not the most
efficient way to do it I'm going to use NOR gates their outputs are one when all the inputs are zero
so all I did was to take and look at each possible input state a two base 10 corresponds to 0 0 1 0
as a four bit binary six corresponds to 0 1 1 0 8 corresponds to 1 0 0 0 since NOR gates have outputs
that are one only when all the inputs are zero for each of those combinations I put some inverters
that ensured that the input to the NOR gate would be 0 0 0 0 for that particular binary
digit 2 or 6 or 8 now if you look closely you'll notice I've marked those four input gates as one
half of a 74 25 which is a dual four input NOR gate and if you look at the right hand two gates
which are OR gates they're each marked as a quarter of a 74 xx for whatever intermediate letters there
are 32 which is a quad two input OR gate so let's see what happens the NOR gates produce a one at
their outputs that's upper one if we have two is the input decimal number the bottom the middle one
if we have six and the bottom one if we have eight they're sent through basically what's a three input
OR gate which I made from two two input OR gates and so the output is one if the input
corresponds to two six or eight now why on earth would you want to make this circuit well here's why
the way we display information in the form of numbers or a one very simple way we display
information is with these seven segment displays that typically have seven LEDs arranged in a pattern
you can see all of them when you look at the digit for eight for example and you like different
segments to produce the numbers and if you look at two and six and eight they are the only numbers
that illuminate the left hand bottom vertical segment which I've highlighted in the picture here
so what we've done here is to develop a decoder for one segment of a seven segment display
if you wanted to make the whole thing work you'd have to build six more decoders for each of the
other possible segments and figure out what combinations of binary digits what decimal digits
would illuminate those so this is why we designed this circuit we're one seventh of the way to
building a decoder for a seven segment display well congratulations you've just built a fairly
sophisticated logic circuit that's part of what's a really important thing to do namely decode binary
information so we can display it as decimal digits and let's now take a look at an actual
implementation in the real world of such a thing okay well congratulations you've just designed a
rather sophisticated logic circuit that produces a one at its output if its input is the binary
equivalent of two or six or eight and the reason you did that is because only two six and eight
share the common feature that when you try to illuminate them with a seven segment display
they light the lower left vertical segment in the display and so we have correctly decoded for that
segment only now if you were trying to try to decode a binary coded decimal number the number zero
through nine coded as a four bit binary number you would have to do seven of those circuits
to decode for each of the conditions under which each of those segments must light wow well
integrated circuits can easily do that and we can cram all that on one integrated circuit and
that's what I have here there's a seven four four seven binary to decimal decoder or binary to seven
segment display decoder it takes four inputs the binary digits it produces seven outputs in fact it
has what are called as I mentioned earlier common or open collector outputs and so it actually pulls
those outputs to ground when it wants to turn on one of those segments and you connect a resistor
to each of those outputs and here I have what looks like an integrated circuit but is really a
bunch of resistors just going across and those are the resistors we need with the light emitting
diodes in the seven segment display to limit the amount of current and then they feed into the
display and right now the whole thing is connected to a counting circuit that we'll learn about in a
subsequent lecture and that counting circuit is connected to a square wave generator which I call
the clock and that clock generator is producing a rather slow square wave and it's running the
binary digits through their paces over here on these lights you can see the binary digits there
we are let's get down to zero there we are at zero one two three four five six seven eight
nine and back to zero and counts again and our decoding is taking those four bit binary those
four binary digits the four bit binary number decoding it into the right drivers for this
seven segment display and lighting the appropriate digit so that was the purpose of the assignment
in this particular lecture you could have gone away gone on and designed six more of those circuits
to determine what under what conditions the other six segments of those displays would light
