Rwy'n gnew Jim� ASOR eyw Mitch SDOed cofnig wrth g Victoria
C werden that the Llywodraeth Veal
E'n ddweud yr riv Tubo Beth dashwya wedi syniw'n rhoi,
picisego'r rhagand o w mergef y Gwyl Cymru
gan y gallón cymoedd yma
wn desp iciwydd ofn iawn,
sixty perlwyd i dyma
ac rwy'n effaith pan mae gennymаю
dda i rydyn ninyddio ar hollun hycy hyn am Allan
i'r bwyr i fyfyd ac yn gw rated
Merthyr Rydyn niwn e chweithio ma Caerfod Plannu
ac panrhyw gydag ei bwysig
Here, let's start with something that Richard Riley, who was a secretary for education in the United States a little while ago, said,
education should prepare young people for jobs that don't exist using technologies that have not been invented to solve problems we're not yet aware of.
That's a big challenge, right? How do we do that? Here's what we do at school.
We teach children about skills at immediately applicable knowledge, typically involving artefacts.
You might think sewing machines or band saws or computer programmes like Microsoft Office.
We might teach them how to use this stuff purposefully. That's immediately applicable and useful, but it dates fairly quickly.
To address Richard Riley's point, we also teach them about foundational disciplines.
You might think of this as long-term knowledge. Stuff like physics or history or mathematics.
This lasts you a whole lifetime. It doesn't take quickly.
We would use words like principles, ideas, techniques, methods, body of knowledge to describe that kind of stuff.
In my field of computing, what has happened is that the subject information and communication technology,
which, praise be, is part of our national curriculum up to now, has become focused on technology.
It's even in the very title. It's in the left-hand part of this slide, all focused around using things purposefully and thoughtfully.
That is important, but we've lost sight, or perhaps never gained sight, of an underlying subject discipline,
which is the discipline of computer science. Perhaps that's not surprising, but even as a university level,
that's a fairly young discipline, certainly compared to physics, say.
I think what we've ended up doing is, in what we tell our children about computing,
we've ended up focusing too much on technology, on things, on devices, on those seductive boxes,
and not enough on ideas.
So, I want our children not only to consume technology, but to be imaginative creators of technological artefacts.
I want them to be creative writers, as well as appreciative readers.
I want them to understand what they're doing, or how the stuff that they're using works, as well as using it.
Arthur C. Clarke once famously remarked that any sufficiently advanced technology is indistinguishable from magic.
And I think it's very damaging if our children come to believe that the computer system that you use are essentially magic,
that is, not under their control, made by somebody else, not something that they can interact with,
or indeed take part in creating with. I think that's bad.
So, if you walk up to a person on the street today and ask them what does a computer scientist look like,
they would probably say, probably male, socially challenged, geek, spotty,
probably a little bit like Simon actually, well-paid maybe, but living in a basement writing code.
I want to encourage you instead to think of computer science in the way that you might think of science.
That is, as a foundational subject, that every child should have the opportunity to learn from primary school onwards.
That's a big shift in perception, isn't it?
And so, to help you make that shift, I want to just give you some idea of what computer science is, particularly in the context of a school.
So, here are some words. So, computer science is to do with the study of information and computation,
not primarily about machines at all. It should be called computing science, really.
It's about algorithms and data structures and the way that computational processes communicate and coordinate.
It involves reusable skills, programming and coding, certainly, and you will have seen a lot in the press about why we must teach our kids the code.
But computer science is about much more than that. It's not just about coding to get the job done.
It's also about broader thinking skills like computational thinking and abstraction and modelling and design.
So, these are all abstract words. I want to show you, give you a visible sense of what computation information might look like for computer science.
So, here is a video made by the amazing Tim Bell from New Zealand showing how kids are learning to sort.
So, here they are, standing on a network drawn on the floor, and when two children walk along those lines and meet at one of the round circles,
they're each holding a number, and if the kid on the left is on the left, they swap over if one number is bigger than the other.
If they're not bigger, they don't swap. And then when they all start at the beginning and they do this together,
so this is a parallel algorithm happening, and they walk along the lines and they meet and they swap over,
and if everything goes right, will it go right? Actually, I think I was going to go right.
They end up sorted at the end. And that's, there's something rather wonderful about that, and you can do it as a competition.
It's kind of quite fun. You can see who can do it fastest, and you can even do it on a larger scale in a playground.
Tim tells me this five seconds of video took him all morning to record. Why did I show you this?
So, I showed you this because it's fun, because it involves primary school children, because it's intriguing.
There's something clever happening, and it's because there's no computers involved anyway.
This clearly is about computation and not about technology.
It encourages you to ask questions like, could we do this with more numbers?
Did the teacher put us in the right order at the beginning to end up sorted at the end?
Shall we try out with a different way around?
To get the idea, and some of those questions have quite deep answers, but I love the way that a child could ask them.
So, that's about computation. Let's do one about information.
So, my friend Jared over here, supposing I want to exchange a message with Jared.
So, you probably have the idea that I could encrypt it some way.
Jared and I shared a secret key, right?
So, like marmalade, then we could somehow encrypt our message, send it to each other,
provided none of you knew our key, you couldn't decrypt it.
But what if we didn't have a secret key between us?
Could we have a public conversation in front of you all at the end of which Jared and I shared a secret key
that we could use to encrypt our subsequent conversation, but which none of you knew?
That doesn't sound very plausible, does it?
Because if you heard everything we said, you'd know everything when you.
But it's possible. It's not only possible. It's quite easy.
A 12-year-old can understand how it's done. It's called Diffie-Hellman Key Exchange.
And like many of these lovely ideas of computer science, it's immediately applicable.
When you go on to Amazon or eBay or something and send your credit card details,
a little padlock appears on your browser, and Diffie-Hellman Key Exchange is going on with Amazon or eBay
to secure your credentials, because you don't want to take a secret key yet with your supplier.
So it's a rather clever idea. It looks superficially implausible.
That's what I mean about ideas, not technology.
So you might say, alright, so you're convincing me reasonably that computer science is kind of interesting,
and maybe some kids should do it, but should every child do it from primary school?
So let me ask you this. Why do we ask every child to learn science from primary school?
Not because they're all going to become physicists.
So why?
It's because science teaches us something about the world around us,
and that if we know nothing about the way the world around us works, we're disempowered citizens.
Even when you switch on a light, you know that the light doesn't happen by magic.
It happens by electricity that comes along wires. The wires can be dangerous.
The electricity comes from a power station. The power station burns fuel. It may cause global warming.
That is underpinned by the science knowledge that you gained at school, whether or not you're a scientist.
And so I think it's very important that every child knows something about the digital world that they inhabit,
which is so, as we heard in our previous talk, so infuses every aspect of our lives.
And it's not just the built world, the artificial world.
Computation has increasingly helped us to understand the natural world too.
If you look at a termite colony that builds these extraordinary structures that architects are still trying to figure out,
how do they get so well ventilated? Is there a giant termite brain that designs that structure?
No. Somehow, these little creatures are operating very simple programmes in their very simple brains,
which collectively do something amazing.
And computer scientists are very interested in working out how that distributed computation takes place.
Other colleagues of mine at Microsoft are working out how cells figure out whether they're going to become kidneys or backbones.
And that's a little computational process that's going on in the bodies of embryos all the time.
So increasingly, we're thinking of computation as a way to understand the natural world.
And lastly, of course, computer science gives you generic thinking skills that are useful regardless of what profession.
So analysis and design and computational thinking are useful in any profession.
Now, I know every subject likes to tell you that, but in case of computer science, it's true.
So all we have to do then is to establish an entirely new subject at school, computer science.
The amazing thing is that this is not an aspiration, this is reality.
There's been a review of the national curriculum, and as from September 2014, there really is a new subject called computing,
not information technology anymore, though it still includes the good bits of using and applying computers,
but the term covers computer science and IT.
And I want to show you, in this new curriculum, the aims.
So the whole curriculum is only three pages of A4. You can easily read it.
But here are the aims, right?
Four aims can understand and apply the fundamental principles of computer science, including logic and algorithms.
Can analyse problems in computational terms and have repeated practical experience of writing programmes to solve them.
No other country in the world has statements anything like as crisp as this from...
Remember, this applies from primary school onwards right the way up to GCSEs.
So I think this is a big breakthrough.
So it's happening right here, and everybody else is very interested in watching us.
This is where in pole position here in the world, but many other countries are struggling with these exact same issues,
and we're all fumbling our way towards finding a good solution.
We in Britain happen to be in that exciting and dangerous position of being in pole position here.
So what is the new challenge?
Well, it's no longer to change the policy, it's to encourage and support and equip our existing computing teachers
to do a fantastic job of delivering this new curriculum, and that's not easy.
They are motivated, they are hard working, they care deeply about their children,
but many of them come with not enough background in computer science,
because after all they've never been asked to do this before.
So we have to help them, and so who is going to help them?
Well, we are.
So in the past it would have been the government, right?
And the government this time is standing back, they're providing air cover in the form of the curriculum,
providing some money, but basically it's the sector, teachers, universities,
IT professionals, software developers, the people in this room, the people watching this video.
Everybody has got to get together and help our schools to make a fantastic job of this
and to deliver it with not reluctantly and grudgingly, but with confidence and enthusiasm, because I think we can.
And so it's actually a kind of big society thing.
This is the big society actually working.
There's a kind of creative wave of enthusiasm.
These are a whole bunch of little groups that have grown up in the United Kingdom,
and there are many others elsewhere in the world doing similar things in their own country,
that are trying to support schools and students to run co-clubs after school,
to support mental teachers, and just at the moment to run training courses to support teachers.
Let me tell you very briefly about one, which is the Computing at School group,
which I'm chair of and helped start a few years ago.
Computing at School has been at the epicentre of this whole exercise.
It's a volunteer grassroots organisation.
It now has 10,000 members.
But it was probably the organisation that mainly made the case for establishing computer science
as a component of our school curriculum.
And so we're now stepping up to this challenge of running a big programme of training
for our teachers across the country.
But it is a big challenge.
There are 3,500 secondary schools.
There are 17,500 primary schools, and this is England alone.
Scotland and Wales and Ireland are going through similar upheavals in their own country.
The curriculum I showed you is just for England.
So there is a lot to do, and that means that you can actually do something to help.
So if you're in the IT sector specifically yourself, you have specific things to give.
You could start a co-club, run an after-school programming club in schools.
You could go to your school and give a talk, or just be a role model.
You could speak to your computing teachers and act as a mentor for them.
But even if you're not an IT or a computing specialist, you could talk to your school
about what their response to the new curriculum is.
Is it a fearful one or a confident one?
What could we do to get them more support to make it possible?
There are a lot of schools, and so this is a boots-on-the-ground job.
This is not a sort of air war something that can be solved centrally.
All of us have to help.
So if we just all sit around and wait for somebody else to do it, nothing will happen.
It's a fantastic opportunity here.
So, just let me finish by going back to our children.
What are we hoping to gain from this?
I hope that our children, if we make a good job of establishing the new computing curriculum
in its breadth from computer science through to ICT and digital literacy,
if we make a good job of that, I think they will become more engaged and curious and playful
about the digital technology and also about the natural world that surrounds them.
I want them to become creative users of computers,
and there's nothing more creative than writing programmes, actually.
There's these enormous artefacts that people build out of pure imagination.
I want them to be informed and empowered citizens
who understand enough about the technology that surrounds them
that they can make informed choices about it.
Again, harking back to our previous talk.
I do want them to have jobs too.
I haven't emphasised that very much, but in the modern knowledge economy,
nothing equips you better for a good job than having the skills that I've spoken about.
So, I think we have a kind of once-in-a-generation opportunity to do something remarkable,
to make a qualitative improvement in the kind of education we give to our children.
So, there's everything to play for, but it's not going to happen by magic.
It's going to happen because you help to make it happen.
Thank you.
APPLAUSE
