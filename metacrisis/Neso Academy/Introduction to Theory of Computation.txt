Hello everyone, welcome to the first lecture in the course theory of computation. In this
lecture I will be giving you an introduction to the course theory of computation where
we shall see what this course is all about, what can we study from this course and what
this course has to offer. Alright, so let's get started. So what is theory of computation?
This theory of computation is one of the most fundamental courses of computer science.
This course is one of the most fundamental as well as abstract courses of computer science
which every computer scientist and engineers must know. This course is not going to help
you write programs or build a computer as such but it will help you understand how people
have thought about computer science as a science in the past 50 years. Okay, so what does this
mean and what is it really about? So this subject is mainly about what kind of things
can you really compute mechanically, how fast can you do it and how much space does it take to do
so. Okay, so we know that in computer science there are certain kind of problems that a computer
or a machine can solve and also there are certain kind of problems or things that a machine cannot
do or certain kind of things that a computer cannot solve. So we shall be seeing all these
kind of things in this subject. Okay, so we talked about how fast and how much space does it take
to do so. So let us just leave these two points for a while and let us just focus on about what
kind of things can you really compute mechanically. So to make this point clear let us take a simple
example. So let's say I want to design a machine that accepts all binary strings that end in zero.
I want to design a machine that accepts all binary strings that end in zero. So my machine that I
designed should accept all binary strings that end in zero and should reject all other strings
that does not end in zero. Okay, so let me take an example string here. Let's say 110101110.
So this is my example string that I have here. Okay, now what I want to do is I should check
whether the string is accepted by my machine. So as a human being how would I perform this task?
As a human being I would just look at the last digit and if I see that it is zero I say yes I
accept it or if I find that it is equal to one I say no I reject it. So how would a machine do
this? A machine would scan the last digit and if it finds that it is equal to zero it says yes it
is accepted or if it finds that it is equal to one it says no and it rejects it. Why? Because our
machine is supposed to accept all binary strings that end in zero. Okay, so that was fairly a very
simple example. Now let us take another example. In this example I want to design a machine that
accepts all valid Java code. It accepts all valid Java codes. Okay, so what should my machine do?
My machine should check the binary equivalent of my codes. When I write a code in Java it should
check the binary equivalent of these codes and from this binary equivalent it should tell whether
this came from a valid piece of Java code or it is invalid. Okay, so my question is is it possible
to design this kind of system? The answer to this is absolutely yes we can and the best example I can
give for this is compilers. When we write a piece of code into our compilers let's say that I am
writing a piece of Java code. So I write a piece of Java code into my compiler and when I compile
that program if I have written that program correctly without any mistakes the compiler compiles
that program and runs it because it is valid. On the other hand if you have made some mistakes in
that code or if you have written something wrongly then the compiler tells you that there is an error
and it does not run the program because it is invalid. Alright, so we can we see that it is very
much possible to design this kind of a system and from this example I think we got a slight hint
that the whole of compiler design it came from this subject theory of computation. Okay, so I hope
that was clear. Now let's take another example. Now in this example I want to design another system
that accepts all valid Java codes and never goes into infinite loop. I assume you know what is
the meaning of infinite loop. Okay, so I want a machine that accepts all valid Java codes and does
not go into infinite loop. So is it possible to design this kind of a system? So from this
previous example we have found that it is possible to design a system that accepts all valid Java
codes. This part is possible it's fine but we have one more condition here and never goes into
infinite loop. Can I design a system that never allows my code to go into an infinite loop? The
answer to this is no. I can never design a system that performs this task. Okay, so even if you
design it you would either get the wrong output or it could run forever and give you no output at
all. So this kind of a machine that performs this kind of a task cannot be designed. Okay, so this
third example has given us an idea about what kind of things can we not compute mechanically. Okay,
I hope that was clear. So what is this subject all about? In this subject what we usually do is
that we have a system or a machine. We design a machine and suppose this is a machine and then we
send an input to this machine and then the machine thinks about this input based on some formula
or based on some rules and it either says yes and it accepts the input or it rejects the input. So
this is what we are going to basically do in this subject. We are going to design systems or
machines which can take certain kind of inputs and this machine will be based on some rules and it
should either accept the input or reject the input. So this will be the thing that we will be doing.
Don't worry even if it is a little unclear right now when we take other examples and when we start
from the very basics from the following lectures it will all become very clear. Okay, now let us see
what are the layers or the levels in this subject that we have to go through. For that I will show
you a diagram over here. So here I have a small diagram showing the layers or levels in this subject.
So in the first layer we have FSM. So what is FSM? FSM stands for finite state machine. FSM stands
for finite state machine. This FSM that is finite state machine it is one of the simplest model of
computation. It is the simplest model of computation and it has a very very limited amount of memory
and it can perform very low level computations and calculations. Okay, this is the basic building block
of this subject. This is the first thing that we will be learning. So keep in mind FSM which
will be starting with it in the following lectures from the very basics. So don't worry even if you
don't understand these terms now we will make it clear as we go further. And then the next layer we
have is CFL. CFL stands for context free language. And CFL is a little more powerful than FSM and it
can perform some more higher level of computations as compared to finite state machines. Okay, and one
thing to remember here this language over here this language here does not mean a programming
language. Okay when we in computer science when we come across the term language we often think oh this
means a programming language but no in this subject here in this context free language this
language actually means a set of strings. A set of strings is what is known as language. It will
become clear when we explain it further in the following lectures so don't worry about it. And in
the next layer we have something known as Turing machine. Turing machine is a machine that can
perform high level computations and calculations. It was designed by Alan Turing in 1940 and it is
much much more powerful as compared to context free language and finite state machines. Okay and in
the next layer we have this undecidable. This is labeled as undecidable and why is that? It is
because the problems that cannot be solved mechanically those kind of problems it falls under
this undecidable layer. Like for example above sometime back we saw an example about a problem
that could not be solved mechanically. So those kind of problems that fall they fall under this
undecidable layer. Okay so these are the layers that we have to go through and we will be starting
with finite state machines FSM in the next following lectures. So we will be start with the
very basics so don't worry even if you don't understand these terms that we used here it will
become very clear as we start from the very basics from the next lecture onwards. So thank you for
