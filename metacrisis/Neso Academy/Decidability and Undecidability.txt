In the previous lectures we have been studying about Turing machines and we have seen how Turing machines work and also we have seen some examples of Turing machines and we have also seen the outcomes that we can have in a Turing machine.
Now in this lecture we will be trying to understand the terms decidability and undecidability.
So what we are going to do is we want to understand what are decidable languages and what are undecidable languages and in order to understand this we will take some of the definitions that we have already gone through and by these definitions we will try to define decidability and undecidability.
Alright so let's see what are the definitions that we need to know.
So the first two definitions that we need to know about are recursive languages and recursively enumerable languages.
So we have already come across this but let us try to define it again so that we can understand decidability and undecidability.
Alright so first let us see recursive languages.
So a language L is said to be recursive if there exists a Turing machine which will accept all the strings in L and reject all the strings that are not in L and the Turing machine will hold every time and give an answer either accepted or rejected for each and every string input.
So these recursive languages they are those languages of which if we pass a string into the Turing machine the Turing machine will accept the string if it belongs to the language and if that string does not belong to the language it will reject that string.
So what we mean by this is that the Turing machine for recursive languages will always hold that means the Turing machine will not go into a loop.
So it will either accept the language or it will reject the language.
If the string is in the language then the Turing machine will accept it and if the string is not in the language the Turing machine will reject it.
So that is recursive languages.
Now let us see what is recursively enumerable languages.
So a language L is said to be a recursively enumerable language if there exists a Turing machine which will accept and therefore hold for all the input strings which are in L but it may or may not hold for all inputs which are not in L.
So in recursively enumerable languages if you pass a string from this recursively enumerable language into a Turing machine then if that string belongs to the language then the Turing machine will accept and it will hold.
But if you pass a string which is not in this language then the Turing machine may or may not hold.
We cannot guarantee that it may not hold also sometimes.
So the difference between recursive language and recursively enumerable language is that in recursive language the Turing machine will always hold.
It will either accept and hold or reject and hold.
But in case of recursively enumerable language the Turing machine will hold only when it is accepting the string in the language in other cases it may not hold.
So that is what we mean by these two sets of languages.
Now let us see by understanding these two languages how can we define decidable languages and partially decidable languages and undecidable languages.
Alright so now since we have understood recursive languages and recursively enumerable languages we are in a position to define and understand these three terms which are decidable languages partially decidable languages and undecidable languages.
So first let us see what are decidable languages.
So it says a language L is decidable if it is a recursive language.
All decidable languages are recursive languages and vice versa.
So here it says that a language L is said to be decidable if it is a recursive language and we know what are recursive languages.
Recursive languages are those in which the Turing machine will always hold.
So if you have a language of which if you pass any string to the Turing machine and the Turing machine always hold by either accepting or rejecting then that language is said to be a decidable language.
Alright now let us see what is partially decidable language.
So a language L is partially decidable if L is a recursively enumerable language.
So we already know what is recursively enumerable language.
In recursively enumerable language the Turing machine will sometimes hold and sometimes it will not hold.
So those languages are known as partially decidable languages.
So for both these two cases we see that there is a Turing machine for these two languages.
In one case a Turing machine will always hold and in the other case it will sometimes hold and sometimes not hold.
So now I think you are getting an idea of what will be undecidable languages.
So let's see what they are.
So a language is undecidable if it is not decidable.
And what do we mean by this?
An undecidable language may sometimes be partially decidable but not decidable.
And if a language is not even partially decidable then there exists no Turing machine for that language.
So we call a language undecidable when it is not decidable and we know what is the meaning of decidable.
We already studied here.
So if it is not decidable then it could be an undecidable language.
But there is a possibility that it can also be a partially decidable language.
So when the Turing machine holds sometimes and does not hold in other times in that time we call that it is a partially decidable language.
But if a language is not even partially decidable then that language is an undecidable language.
If a language is not even partially decidable then that is an undecidable language and there is no Turing machine for that language.
We cannot design a Turing machine that will decide or that will recognize that language.
So those kind of languages are known as undecidable languages.
So I hope with that we could understand what is the meaning of decidability and undecidability.
So we have seen so many definitions here.
So instead of getting confused by reading all this I have prepared a table for you in which you can easily look at it and understand what are these definitions that we studied.
So let us look at that table.
So here is the table and with this let us have a quick recap of what we have studied.
First we have recursive languages and in short I can say that the Turing machine for recursive languages will always hold.
And then we have recursively innumerable languages and we can say that the Turing machine for this will hold sometime and may not hold sometime.
We already saw that and then we have the decidable languages.
So what are decidable languages?
They are the recursive languages for which the Turing machine will always hold.
And then we have the partially decidable languages which are the recursively innumerable languages in which the Turing machine will sometimes hold and sometimes not hold.
And then finally we have undecidable languages and for this we have no Turing machine for that language.
There exist no Turing machines for undecidable languages.
So I hope you understood the meaning of decidability and undecidability with that.
So in the next lecture onwards we will be taking more examples to understand this undecidability.
So I hope this was clear to you.
Thank you for watching and see you in the next one.
