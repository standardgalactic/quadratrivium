In the previous two lectures, we have seen two examples of minimizing DFA's and in this lecture, we will be seeing another example of
minimization of DFA when there are more than one final state involved.
So in the previous two lectures, the examples that we solved had only one final state involved.
But in this lecture, we will be seeing an example of how to minimize a DFA when there are more than one final state involved.
Okay, so let's see how we can do this.
So here we have our task that is to minimize the following DFA.
So here our DFA is given and if you look carefully, you see that this DFA has got one, two, three final states.
So this is the state transition table for the DFA and we have six states here A, B, C, D, E, F out of which C, D and E are final states
and A is the initial state.
So let's see how we can minimize this DFA to obtain an equivalent DFA working in the same manner but which has minimum number of states.
Okay, so how do we do this?
We do this by starting off by writing the equivalences.
So let's start with the zero equivalence and how do we write the zero equivalence?
For zero equivalence, you have to just put the final states in one set and non-final states in another set.
So let me first make a set of non-final states which are A, B and F, A, B and F.
These are my non-final states and what are my final states?
C, D and E, C, D and E.
So when you put the non-final states and final states in two separate sets, that is how you are done with the zero equivalence.
Now coming to the one equivalence, we find the one equivalence by using this row of zero equivalence.
So here I have two sets and I have to check if states in the same set are one equivalent to each other or not.
So let me check for A and B first.
A and B on getting input zero, they go to B and A and B and A fall in the same set, so it is fine.
And on getting input one, where do they go?
They go to C and D.
C and D also fall in the same set among themselves.
So we can say that A and B are one equivalent to each other.
So in the row of one equivalence, I can put A and B together.
Now I have to check if F is one equivalent to B and A.
So let me check F with A.
A and F on getting input zero, they go to B and F.
B and F falls in the same set, so it is fine.
And on getting input one, where do they go?
They go to C and F.
C is in this set and F is in another set.
So we find that A and F are not one equivalent to each other.
So I have to put F in a separate set over here.
Okay, so now F is separated.
Now let me check for C, D and E.
First let me check for C and D.
C and D on getting input zero, they go to E, E, same state.
So it is fine.
And on getting input one, they go to F and F.
Again same state, so it is fine.
So C and D are one equivalent to each other.
Now let me check if E is one equivalent to C and D.
So let me just check E with D.
You can check it with C also, but let me just check it with D.
So D and E on input zero, they go to E, E, same state.
On input one, they go to F, F again, same state.
So D and E are also one equivalent.
That means C, D and E are one equivalent to each other.
So let me put them in the same set.
Okay, now let us come to two equivalents.
For two equivalents, I have to use the row of one equivalents for checking.
So here now I have three sets, one, two, three.
So I have to check if elements in the same set are two equivalent to each other.
So first let me check for A and B.
A and B on input zero, they go to B, A, B and A are in same set.
It is fine.
On input one, they go to C and D.
C and D are also in the same set.
So I can say that A and B are two equivalent to each other.
So I can put A and B in the same set.
Now F is by itself, so I don't need to check.
I can just write it down as it is.
Now I have to check if C, D, E are two equivalent to each other or not.
So let me check for C and D.
C and D on getting input zero, they go to E and E.
Same state, it is fine.
And on getting input one, they go to F and F again, same state.
So it is fine.
So I can say that C and D are two equivalent to each other.
Now let me check if E is also two equivalent to both of them.
Let me check it with D.
So D and E on input zero, they go to E, E, same states, fine.
And on input one, they go to F, F again, same states.
So it is fine.
So I can say that D and E are two equivalent to each other.
That means C, D and E are two equivalent to each other.
So here I have completed the row for two equivalents.
Now if you look carefully, you find that the row of one equivalence and two equivalents
are exactly the same.
So that means it is time to end the process.
You have got your new states that you need to have in the minimized DFA.
So what will be my new states?
The first state will be AB, second state will be F and then the last state will be CDE.
So let me draw the state transition table for this new DFA that we have obtained, which
is the minimized DFA.
So what will be the elements in my set?
I will have inputs zero and one and then I will have my first state AB, AB is my first
set, which is the first state and also it is the initial state Y.
The original DFA A was the initial state.
So the state that contains A that is AB, that will be my initial state here.
And then the next one is F.
F is the next state and then the next state is CDE.
CDE, okay.
And you notice that in the original DFA, CDE were all final states.
So here this state by itself, it will be the final state.
Now let's fill up this table.
AB on getting input zero, where does it go?
I can check with either A or B in this table.
So A on zero, where does it go?
It goes to B.
So instead of B, what should I write here?
I should write the state that contains B.
What is it?
AB.
So I will write here AB.
Okay.
And on input one, where does it go?
It goes to C.
So instead of C, what should I write?
I should write the state that contains C, that is CDE.
CDE, okay.
And then F on input zero, where does it go?
It goes to F and when input one also it goes to F.
So I can write F, F, because F is F itself in this new table also.
And then CDE, I can check with either CD or E.
So let me just check it with C.
When input zero, it goes to E.
And instead of E, what should I write?
I should write the state that contains C, that is CDE.
CDE, okay.
And on input one, where does it go?
It goes to F.
F is F itself here.
F.
So here I have the minimized version of the given DFA.
So in the original DFA, we had six states, but in the minimized one, we have only one, two, three states.
And the working is exactly the same.
And then the state transition diagram for this DFA will look like this.
So here AB is my initial state, CDE is the final state, and I have another state F.
And this is the transition on getting inputs zero and one.
So this is the minimized version of the DFA that was given to us.
I hope it was clear to you.
Thank you for watching and see you in the next one.
