In the last lecture, we have been studying about the equivalence of CFG and PDA and we
have seen a theorem which says that a language is context-free if and only if some pushdown
automata recognizes it and we have also shown that there are two parts for this proof of
the theorem and we have already discussed part one of the proof in the previous lecture
where given a context-free grammar, we had to show how to construct a pushdown automata
that recognizes it. So, we have done this in the previous lecture, we have shown how
to construct a pushdown automata for a given context-free grammar and hence we have proved
part one of this theorem and in this lecture, we will be seeing part two of this theorem
where it says given a PDA, show how to construct a CFG that recognizes the same language. So,
this is just the reverse of part one. So, here we will be given a pushdown automata and from the
given pushdown automata, we have to show how to construct a context-free grammar that recognizes
the same language. That means the language that is accepted or recognized by the pushdown automata
should be the same class of language that is accepted by the context-free grammar that we
are going to design. So, if we are able to construct or build the CFG for the given PDA,
then we will be able to prove part two of this theorem and hence we can say that a language
is context-free if and only if some pushdown automata recognizes it and hence we can say that
CFG and PDA are equivalent. Alright, so let us see how we can do this. So, as I said,
what we have to do here is we will be given a pushdown automata and we have to build a context-free
grammar from it and the context-free grammar that we build should accept the same class of language
that is accepted or recognized by the given pushdown automata and for doing this we have
two steps. Step one is to simplify the pushdown automata and step two is to build the context-free
grammar. So, this is a bit lengthy that is why I have divided this lecture into two parts where
in this part which is part 2A we will be seeing step one that is how to simplify the PDA and in
the next lecture which will be part 2B we will be seeing how to build the context-free grammar.
Alright, so before we go into it here is something that you need to remember. So, let us say that we
have a PDA given here where we have the starting state as Q0 and then the final state or accepting
state as QF and then we have some other states in between like PQR and then they have many
transitions to each other and if we have a PDA like this there will be a non-terminal for every
pair of states. So, what do I mean by this is that we have this PDA and what we need to do is
we want to design the context-free grammar from it and as we know that grammar consists of rules
or productions and in converting a PDA to grammar we have to convert the states somehow
into non-terminals or in the form of productions. So, how do we do that? So, we say that there will
be a non-terminal for every pair of states. So, here we have states and we can form pairs with
each and every states and for every pair of states we will have a non-terminal representing
that pair. For example, we have here APQ. This APQ is one non-terminal which we will have in our
context-free grammar and this represents the pair PQ and also we should have another non-terminal
for the pair QP which I have not shown here but you need to have it and you can have others like
AQR. QR is for this one, this state Q and this state R. So, for these two pairs you have to have
another non-terminal which you can call AQR and then you can again have ARQ0, RQ0. So, in the same
way you can have non-terminals for every pairs of states in your pushdown automata. So, that is how
you represent the non-terminals. For every pair of states you will have a non-terminal representing
that pair because always keep in mind that we are trying to convert the PDA to context-free grammar
and in context-free grammar we know we have rules which are denoted using non-terminals and terminals
and then another thing you need to know is the starting non-terminal will be AQ0, QF. Now, we
know that in context-free grammars if you remember we always used to have a start symbol which used
to be represented by S. So, when we are designing this context-free grammar from the PDA what will
be our starting symbol? Our starting symbol will always be AQ0, QF. That means that the pair that
is used to represent this Q0 and QF. This is one pair Q0 and QF. So, the non-terminal which will be
used to denote that pair will be used as our starting symbol or the starting non-terminal for
our context-free grammar. So, this is something that you need to remember and keep in mind as
we are going to convert our PDA to context-free grammar. Alright, so now let us go to step one
which is the simplification of the PDA and let's see what are the things that we need to simplify
in our PDA. So, coming to the simplification part the first thing that you need to do is
you have to make sure that the PDA should have only one final or except state. That means the
push-on automata that we have before we convert it to the context-free grammar should have only
one final state or accepting state. Alright, so here we see that we may have a push-on automata
which can have more than one final state. Yeah, it is possible to have push-on automata with more
than one final state but when we are going to convert it to an equivalent context-free grammar
we cannot do it with more than one final state but we should have only one final state. So,
if you have more than one final state you have to modify your PDA in such a way that it will have
only one final state. So, let's see how we can do this. So, here we see that there is a push-on
automata. It has some states in the left side which I have not shown but it is having three
final states over here represented by these double circles. Now, we want to convert it in such a way
that it will have only one final state. So, what I do is I make these three final states as non-final
states in this step and then I send them all to a common final state which I call QF. So,
what this transition does? It does not do anything. It does not read any input symbol.
It does not pop anything. Nor does it push anything but they just directly go to a final
state which is QF. So, these three final states we made them non-final states and we send them to a
common final state QF by just using this epsilon which says that it does not read anything. It
does not pop anything from the stack. Nor does it push anything into the stack but they just go to
the new final state QF. So, this is how you have to modify your PDA if you have more than one
final state or accepting state and keep in mind that by doing this you are not altering the working
of your PDA. The language accepted by this PDA will still remain exactly the same even after you
do this. So, this is the first step that you need to keep in mind and this is the first thing that
you need to do when you are simplifying your pushdown automata before you convert it to the
context-free grammar. Alright, now let us see what is the second step. So, the second step says that
the PDA should empty its stack before accepting. So, when we studied about pushdown automata we
know that pushdown automata always have a stack and if you remember whenever we were working
with pushdown automata we saw that at the end when the PDA reaches the final state we always
saw that the stack which we had was always empty. So, we have to make sure that the stack is always
empty before reaching the accepting state or as it approaches or as it just enters the accepting
state. So, what we do for that is we create a new start state Q0 which pushes Z0 to the stack. Now,
why do we do this? I have always told you that we always push an element Z0 sometimes denoted by the
dollar symbol onto our stack in the very beginning in order to denote which is the bottom most element
of our stack and why do we do this? We do this because when we pop this bottom most element at
the end we know that our stack is empty. So, in order to know that we always push an element
denoted either by Z0 or the dollar symbol onto our stack in the very beginning. So, if your PDA is
not doing that you have to first create a new start state Q0 which will not read anything
and it will not pop anything but it will push the element or symbol Z0 into your stack. So,
this is the new start state Q0 that we have created in order to do this. Now, we have to make sure
that the stack is empty before accepting. So, in the previous case we saw that we were having
three states which were final states and we converted them into non-final states and we
send them to a common final state because we were not allowed to have multiple final states.
Now, we introduce another state over here in between. In the previous one if you remember
there were just these three and the final state. Now, we introduce a new state over here and the
purpose of this is to make sure that the stack is empty. We pop everything from the stack before
it reaches the final state and this one right here it is used for popping the final element
or the bottom most element Z0 from the stack. So, let's see what is this state doing. So,
here it says that epsilon then X and epsilon. So, what does it mean? It means it is not reading
anything but it is popping X and it is not pushing anything. Now, what is this X? It says for all
X belongs to tau minus Z0. Now, what do we mean by tau minus Z0? Tau if you remember is the symbol
that is used for representing the elements of the stack. The set of elements or symbols in the stack
is represented by the double tau which I have taught you in the very first lecture of pushdown
automata. So, it means that X belongs to tau minus Z0. That means you have to pop all the elements
from the stack except the bottom most element which is Z0. So, this state over here makes sure
that every other elements except Z0 is popped from the stack and this transition over here
this is used for popping the Z0 which is the bottom most element from the stack and we know
that Z0 is the bottom most element and when Z0 is popped we are sure that the stack is empty. So,
when it reaches the final states we are sure that the stack is empty. So, this is how you
create the state for popping all the elements from the stack and making sure that the stack is empty
before accepting. So, this is what you should do in the next step for modifying your or simplifying
your PDA. Now, let us see what is the third step. Now, the third step says that make sure each
transitions either pushes or pops but does not do both. So, we have to make sure that in the PDA
that we have every transition will either push something or pop something but it should not
do both pushing and popping in the same transition. So, if you are having a PDA that is doing pushing
and popping in the same transition then you have to modify it and simplify it by creating some more
states such that every transition will either push or pop but it does not do both. So, let us see
how we can do this. So, let us say that we have a PDA over here where we have two states and here we
see that when the symbol A is red X is popped from the stack and Y is pushed on to the stack.
So, here we see that pushing and popping is happening in the same transition but this is not
allowed. We have to either push or pop. So, what we do? We simplify this PDA or we modify it in
this way. So, what we do? We add one more state over here and in the first transition we read A
which is this A and then we pop X and then we do not push anything and then we come to this state
and over here we do not have to read anything anymore because A is already red over here
and we do not have to pop anything. Why? Because X is already popped which was the element that
had to be popped. Now, what is remaining? Y has to be pushed. So, Y is pushed in this transition.
So, here we see that in this transition only popping is occurring and in this transition
only pushing is occurring. So, we make sure that each transition either pushes or pops but does not
do both. So, even by doing this you are not modifying or you are not altering the way your PDA
works. It will still accept the same language. So, always keep that in mind but we are just
modifying it or simplifying it in such a way so that we can easily design the context-free grammar
from this. So, our main aim is to design the context-free grammar for our PDA. So, that is why
we are doing this simplification to make the conversion or construction of the CFG easier for
us. Now, we have another case over here. So, here again we have two states and then there is a transition
where A is the symbol that is red and then nothing is popped and nothing is pushed to the stack. So,
this also is something we cannot allow. We have to either push or pop something but we cannot just
allow nothing to be pushed and nothing to be popped into our stack. So, if you have something
like this you have to again simplify or modify your PDA like this and how is it? We add one more
state over here and then what we do is in the first transition we read this A, A is red and
nothing is popped but we push an element or symbol called ZD into the stack and now what is this ZD?
ZD is a dummy symbol that I have used. So, this is a symbol which is not used anywhere else in our
PDA that we already have and it is just a dummy symbol that I am using which I am just going to
push and pop. So, what we do is in this transition we push the dummy symbol into the stack and in
this transition what do we do? We don't read anything but we pop that dummy symbol ZD from our stack
and again we don't push anything into our stack. So, in this transition the dummy symbol was pushed
and in this transition the dummy symbol was popped. So, we just used it in order to make our transition
to either have a push or pop in them. So, basically it is still doing this same thing but we are
modifying it in such a way that every transition will either have a push or a pop in it. So,
this is the third thing that you need to remember and this is the thing that you have to do in order
to simplify your PDA. Alright, so now let's see one more rule. So, the final thing that you need
to remember in simplifying our PDA is that we have to always start with an empty stack and finish
with an empty stack. So, whenever we start doing something in our PDA we know that we have a stack
and we always start with an empty stack. In the beginning our stack is always empty and then in
the course of our execution in the PDA we may add or may push elements to our PDA and we may
remove or pop elements from our PDA. We may do many pushing and popping in our stack and then
at the end when it reaches the final stage our stack should always be empty. So, that is what we
mean by start with an empty stack and finish with an empty stack and also there is some more thing
you need to remember about stack that is you should not let the stack go into an underflow
condition. So, underflow condition is something that occurs when you try to pop elements from an
empty stack. So, here I have an example given over here. Let's say that your stack already had these
three elements z0, a and b. So, b is a topmost element. Now, I am going to perform a pop on this
stack. So, if we pop we know that the topmost element will be popped and our stack becomes like
this. b is popped. Now, we have z0 and a. Now, again if I perform a pop on this stack a which
was the topmost element will be removed and the only element that is left now is z0. Now, again
if I perform a pop on this stack z0 which is the topmost and the only element will be popped
and now my stack is empty. Now, on this empty stack if I try to perform a pop again now that
leads to a condition known as underflow or stack underflow. This is when you try to pop
something from an empty stack. There is nothing left in the stack to be popped now that is known
as underflow. If you have studied data structure you may be knowing about these terms but let me
just tell you again over here. So, this underflow should not be allowed. We should not let our stack
go into an underflow condition. All right and there is another term which we usually use in our
data structures called stack overflow. So, this means that you are trying to push elements to
the stack beyond its limit. So, this is not very relevant for this context of PDA that we have over
here but I am just giving you as an extra knowledge. So, what it means is that in some of the cases
especially in data structures you may specify a specific size for your stack. So, let's say that
we have declared a stack over here and we have said that the size of this stack will be three.
That means it can hold only three elements or three symbols. So, in the beginning I am pushing
z to the stack z0 it should be z0. I am pushing z0 to the stack. So, if I push z0 to the stack
we see that z0 is the only thing over here and now again at this step I am pushing a to the stack.
Now, if I push a, a comes on top of z0 and this is my stack now and here if I push b again this
becomes my stack a was already there and on top of that b is pushed and now if I try to push another
element called c I have already told you that we have specified that the size of our stack is three.
So, there is no more space for c now. So, that condition is known as stack overflow that is
when you try to push elements beyond the capacity of the stack. So, this is not very relevant in
case of our PDA because in the stacks that we use in PDA we don't actually put a limit on the capacity
of the stack. So, this is just for your information and you have to remember that in case of your PDA
stacks you should not let them go into underflow and you should remember that you should always
start with an empty stack and finish with an empty stack. So, these are the things that you need to
remember while simplifying your PDA. So, let us quickly recap all the steps that we learned now.
So, number three was that we have to make sure each transition either pushes or pops but does
not do both. So, we saw how we can modify our PDA so that every transition will either push or pop
but does not do both and then step two was the PDA should empty its stack before accepting.
So, we should always make sure that our stack is empty before it goes to the accept state
or the final state and we saw what we have to do and how we should simplify our PDA in order to
achieve this. And then the first step was that the PDA should have only one final or accept state.
So, we again saw what are the things that you need to do if you have multiple final states
and simplify your PDA so that it will have only one final state. And then another thing that you
have to remember is that when we build a CFG from a PDA for every pair of states that we
have in our PDA there will be a non-terminal representing that pair and those will be the
non-terminal that we will be using and then the starting non-terminal or the start symbol will be
denoted by the non-terminal which is used to represent the pair of the starting state and the
final state q0, qf. So, these are the things you need to remember and we have completed step one
that is simplifying the PDA. Now, we have simplified our PDA and now after simplifying it it is ready
to be converted to the context-free grammar. So, in the next lecture which will be part 2b we will
be seeing step 2 where we will build the CFG from this simplified PDA. So, thank you for watching
this and see you in the next one.
