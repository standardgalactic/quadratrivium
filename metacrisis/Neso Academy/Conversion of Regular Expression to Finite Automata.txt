Till now, we have studied how to design regular expressions for a given DFA and in this lecture
we will be studying about conversion of regular expressions to finite automata.
That means, given a regular expression, how do we convert it to its equivalent finite
automata?
Alright, so in this lecture we will be studying some of the important rules that we should
remember while we convert regular expressions to finite automata and from the next lecture
onwards we will be seeing some examples.
Alright, so let's get started.
So we know that in regular expressions we have expressions of many forms and let's say
that we have inputs A and B and you have an expression of the form A plus B. That means
A union B which we already know.
So if you have an expression of this form A plus B, how do we draw or design the finite
automata for this?
So if you have the expression of the form A plus B, we need to have two states, let
me call them states A and state B and I can say that A will go to the next state B when
it gets input small A and also A on getting input small B also it could go to the next
state B.
Or you could also express it in this way, you can write A and B and instead of using
two transition lines, just with one line you can represent like this A or B. So this means
that A union B, that means A or B. So the state on getting either input A or input
B it can go to the next state that is B.
So this is the same thing represented here just using one transition line A on getting
either input A or input B it can go to the next state B. So whenever you have an regular
expression of this form, this is how you will design the finite automata for that.
Alright, so let's see another expression, there another expression that we were familiar
in our regular expressions were of this form A dot B or just it used to be sometimes represented
as just AB.
So when you have expressions of this form you need to have three states A, B and C and
we can say that A will go to the next state B on getting input small A and B will go to
the next state C on getting input small B. So here unlike this where it could go to the
next state on either A or B in this case it is not like that in this case it will go to
the next state on getting the first input A and it will proceed to the next state again
when it gets the next input B. So when you have expressions of the form AB you have to
specify two different transitions for those inputs A and B unlike this one.
Alright so this is how you do it when you have this kind of expression.
Okay now we can see another expression that is A star closure of A which we have already
studied so if you have expressions of this form the way you represent it is very simple
take a state and let it go to itself on getting that input A. So this means that closure of
A means any number of A so here any number of A any number of A you can get in this kind
of state that you design. So these are three important rules which you should remember while
we will be designing the final automata from the given regular expression. So if you get
this form A union B this is how you design it and if you get A and B like this this is
the way you have to design it and if you get a closure of any input this is the way you
have to design it. So keeping these rules in mind we will be seeing examples from the
coming lectures.
