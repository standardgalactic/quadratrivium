In the last lecture, I have given you the theoretical explanation of minimization of DFA and we also learned why is minimization of DFA required.
So in this lecture, we will be trying to understand practically about minimization of DFA using an example.
Alright, so here we have an example DFA in which I have five states A, B, C, D, E.
So our task is to minimize this DFA. That is, I want to design another DFA which performs the same kind of task but I want to use the minimum number of states possible.
So here I have five states and now I want to try to design it using lesser number of states. So let's see how we can do this.
So the first step in doing this is to draw the state transition table for this DFA.
So here I have drawn the state transition table for this DFA. We have five states A, B, C, D and E and A is the starting state or the initial state and E is the final state.
And on getting inputs 0 and 1, these are where these states go to. Now we have to perform the minimization of this DFA.
So in order to do that, how we have to start is we have to start with the zero equivalence, then we will go to one equivalence, two equivalence and so on.
So the first step is to write down the zero equivalence. So how do we write the zero equivalence?
In order to write down the zero equivalence, it's very simple. You have to just write the non-final states together as one set and you have to write the final states as another set.
So here what are my non-final states? A, B, C and D. So I will make this as one set A, B, C and D.
And what are my final states? Here I have only one final state that is E. So this is the first step of writing the zero equivalence.
So it is very easy to write the zero equivalence. Just write the non-final states as one set and the final states as another set.
So that's it about zero equivalence. Now let's come to one equivalence.
Now how do we write this one equivalence? For writing the one equivalence, you have to look at this row of zero equivalence
and you see that these four states are in one set. Now you have to check if these states are one equivalent to each other.
So first we'll check for A, B, then we'll continue. So how do we do that?
Suppose you're checking for A, B. You have to check in the transition table where does A and B go on getting inputs zero and one.
And if you see that the states to which A and B goes on getting particular inputs zero and one, if they fall in the same set,
if those states fall in the same set as this in this zero equivalence row, then they are said to be one equivalent to each other.
Alright, that may seem a little difficult to understand but it will become very easy to understand when I show it here with example.
So now I'm going to check if A and B are one equivalent to each other. Let me check for A and B.
So in order to check for A and B, I come to this table and see A and B, where does it go on getting inputs zero and one.
A on getting inputs zero, it goes to B. B also on getting inputs zero, it goes to B.
So if they go to the same states, then it is okay. Alright, they are one equivalent.
But the condition is not complete, you have to check for one also.
So A on getting input one, where does it go? It goes to C. And B on getting input one, where does it go? It goes to D.
So C and D. So now you have to come to this row and check if C and D fall in the same set or not.
So we see that here C and D, they belong to this same set. So A and B are one equivalent.
So I will put them together in one set in this one equivalent row A, B.
Okay, now the next one I have to check is for C. So we know that A and B are one equivalent to each other.
We found here already that A and B are one equivalent to each other.
So you can check C with either A or B, because we know that this A and B are already one equivalent.
So you can check C with either A or B. So let me check it with A. I will check A and C.
So come to this table A and C. A and C. On getting input zero, where does A go? It goes to B.
And getting input zero, where does C go? It also goes to B. So they go to the same states.
So that is okay. Now let's check for one. A on getting input one, it goes to C.
And C also on getting input one, it goes to C. So that is also same.
So whenever it is going to the same states, you don't have to worry.
You just confirm that they are equivalent to each other.
So C is also one equivalent to both A and B.
Okay, now the next one I have to check is for D.
Now I can check D with either A, B or C, because we already found that A, B, C are one equivalent to each other.
So let me check D with C. You can check with A or B also. It's okay, but let me check with C.
So C and D. Come to this table C and D. C and D on getting input zero, where does it go? It goes to B, B.
So both are same. It's fine. Now on getting input one, where does C and D go?
It goes to C and D goes to E, C and E. Now check if C and E fall in the same set or not in here.
We see that C belongs to this set, but E belongs to another set. So C and E does not belong to the same set.
So C and D are not one equivalent to each other. So D is not one equivalent to C.
It is not one equivalent to C. It will not be equivalent to B nor to A.
So I have to close this and make a separate set for D now.
And E I write as it was before.
Okay, now we are done with one equivalence. Now the next one is two equivalence.
Two equivalence.
Now in order to check for two equivalence, you have to use this row.
For one equivalence, we used the row of zero equivalence, but for two equivalence, you will have to use the row for one equivalence.
So whenever you check for the equivalence, you have to check the row just above it.
So for this, I have to check this row. Okay, now here what are the states which we should check?
We have to check A, B and C. We don't have to check for D and E anymore because they are a separate set by themselves
and they cannot be combined with any other sets anymore.
So D and E, you don't have to check anymore. What you have to check is for A, B and C.
So first of all, let me check for A and B. A and B on getting input zero, it goes to B, B, fine.
Same set, the same state, no problem. And A and B on getting input one, where does it go?
It goes to C and D. Now check if C and D belongs to the same set or not.
C belongs to this set and D belongs to this set. Now we see that C and D does not belong to the same set.
So A and B are not too equivalent to each other.
So I have to write A here and I have to form a separate new set for B now because they are not too equivalent to each other.
Okay, now I finished for A and B. Now I have to check for C. Now here we see that A and B are separate.
So I don't know whether C will be too equivalent to A or to B. So I have to check separately.
So let me first check for A and C. A and C, whether they are too equivalent or not. A and C.
On getting input zero, where does it go? It goes to B and B, same state, no problem.
And on getting input one, A and C, where does it go? It goes to C, C. Both goes to the same state.
So A and C are too equivalent to each other. So I can put C in this set.
So B is now a separate set. D, I'll write it down as it was. And E also, I write it down as it was.
Okay, now we have finished two equivalents. Now coming to the next one that is three equivalents.
Three equivalents. Now in order to check for three equivalents, what we have to do?
We have to check this row. We have to use this row now of two equivalents because that is just above these three equivalents.
Okay, now I don't have to check for B, D and E because they are three separate sets and I cannot combine them with anything.
Now I have to only check for A and C. Let's check for A and C. A and C. On getting input zero, where does A go? It goes to B.
And C, where does it go? C also goes to B. So same states, it's okay. And on getting input one, where does A and C go?
A goes to C. B also goes to C. So again, we got the same states. So they are three equivalent to each other.
So I can write A and C together. And I'll write the rest of the things down as they are because I don't have to check for them anymore.
They form their own separate sets. Okay. Now if you observe carefully, you see that these two equivalents and three equivalents,
the result that we got for them are the same. Here we see A, C as one set then B, D, E. Here also we see A, C as one set and B, D, E.
So when you find that two rows consecutively are giving the same result, that means it is time to stop the process.
You can end the process. You don't have to continue further. Now if you continue for three, four equivalents, five equivalents or up to N equivalents,
you will always get this same answer. All right. So now you can stop the process and now you can draw the DFA.
So here we see that A and C are a single state. Now these two can be combined and they can be formed as a single state.
A, C is one state and B is another state, D is another state and E is another state. Now I have one, two, three, four states.
Before how many states we had? One, two, three, four, five. Now I minimized my DFA and I got four states.
I can design the same DFA using four states. So let me draw the state transition diagram for this.
For this, let me just bring this table down because we need to look at this table for drawing.
So the same transition table which we used above, I will draw it here.
Okay. So I have just copied down the same transition table as above. This is the same thing. I have not changed anything.
Now we will design the DFA, the minimal DFA that we have obtained over here.
So here A, C will be one single state. Okay. A, C is one single state.
And also since in the previous table, A was the initial state and so here we have A.
So this A, C will now be my initial state. Okay. And then the next state I have is B.
I have another state B over here and then D and E. So let me draw D over here and then I have E.
And E was my final state in the previous table. So here also E will be my final state. Okay.
Now let's see. A, C on getting input A, C. This A, C on getting input 0 and 1. Where does it go?
So for A, C, I have to check in this table A and C. So A on getting input 0, it goes to B.
C on getting input 0 also it goes to B. So we have designed it in such a way that this, if you check for A, C,
both A and C on getting input 0 or 1, it will go to the same states.
Okay. So it goes to state B on getting input 0. So on getting input 0, I'll send it to state B.
This is on getting input 0. Okay. And then coming to the next one, on getting input 1, where does it go?
It goes to C. Here C also goes to C. So we see that it goes to C. But where is C? C is this one itself.
So it goes to itself. Because C is here only. Right. On getting input 1. Okay.
Now we have finished for AC. Now coming to B. B on getting input 0, where does it go? It goes to B itself.
B goes to B itself on getting input 0. And B on getting input 1, where does it go? It goes to D.
B goes to D on getting input 1. Okay. Now coming to C. So we see that C is already completed.
It was combined with AC. So look at D. This D. D on getting input 0, where does it go? It goes to B.
D goes to B. On getting input 0. Okay. And where does D go on getting input 1? It goes to E. D goes to E.
On getting input 1. And D is complete. Now let's go to E. E on getting input 0, where does it go?
It goes to B. E goes to B. On getting input 0. And E goes to C. On getting input 1. And what is C? C is AC.
1. Okay. Now we have completed the DFA. And we see that we have 1, 2, 3, 4 states here.
So this is the minimal version of the DFA that was given in our example. Now if you check, both of these DFA's will perform exactly the same kind of task.
But this has 4 states. The other one had 5 states. So this is the minimal version of the DFA. I hope it was clear to you.
We will discuss more examples in the coming lectures.
Thank you.
