In the last lecture, I have taught you the rules that we need to remember for converting
regular expressions to their equivalent finite automata.
So in this lecture, we will be using those rules and using those rules, we will be trying
to convert these given regular expressions to their equivalent finite automata.
Okay, so let's get started.
So here we have three expressions and we'll start with the first one.
The first one, it says BA star B. So this means that the strings that will be accepted
in these regular expressions are strings like B, B. This means that it should have B followed
by zero or more number of A's, which is A closure, and then followed by a B again.
So here, this BB means there is no A in between, just BB, and it could also be BAB, that means
one number of A, then BAAB, and so on.
So we need to design the finite automata for this.
So I already taught you when the symbols are separated by AND.
So what we need to do, let me make the states, let me say we have one state, which is state
A, which will be my starting state, and I'll have another state here, state B, and I'll
have another state here, state C, and C will be my final state.
And I'll say that this starting state A goes to B when it gets the input small b, all right?
And then this B will go to the next state, that is state C, when it gets the next input.
So we have made for this B and this B, now what about this A, how shall we make for this
A?
I will make a self-loop to this B itself, when it gets the input small a.
So I've already taught you in the previous lecture, whenever we have AND operations,
we have to make states for each of the input.
So we have B and B here, they go to A goes to B on getting input small b, and B will
go to the next state C when it gets the next input small b.
And whenever you have a closure of any symbol, you have to make a self-loop.
So here we have made the self-loop in this state B.
So let us check if these strings are accepted by this final automata, BB.
So starting from A, with B it comes to this B, with the next B it comes to state C, which
is the final state.
So this is accepted.
Now BAB, BAB, again comes to the final state, this is also accepted.
BAAB, BAA, another A, and then B comes to the final state again, this is also accepted.
So now we have successfully designed the final automata for this regular expression B A star
B.
Okay, now let's go to the second one.
So the second one says A plus B, and then followed by a C like this.
So here we have a union or a plus operation, and here we have an AND operation.
So in this case, what shall we do?
I already taught you in the previous lecture that whenever you have a plus symbol, you
can treat it like an OR.
So let's say I have a state A, which is my starting state, and I will have the next state
which is state B, and then A can go to the state B on getting input small a, and also
A can go to the next state B, even on getting the input small b.
So whenever you have a plus symbol in between them, this is the way you make it.
So A can go to the next state B on both inputs small a and small b.
And now we have the next input C, and this should proceed to the next state, which will
be my final state C, and when does it proceed on getting the input small c.
So this is the finite automata for this regular expression.
So let's see what are the strings that are accepted by this regular expression over here.
So A plus B and C, so that means A or B followed by a C.
It could be A followed by a C, or it could be B followed by a C.
So these are the kind of strings that will be accepted by this regular expression.
So let us see if this is accepted by this automata that we have created, A C, A C comes
to the final state, this is accepted, B C, B C comes to the final state, this is accepted.
So we have successfully designed the final automata for the regular expression A plus
B and C.
All right.
So we are done with that.
Let's come to the next one over here, number 3, which is A, and in bracket I have B C star.
So before we design the final automata for this, let us see what are the kind of strings
that are accepted by this regular expression.
So this means that A and B C closure, that means A followed by any number of B C.
This group B C can be 0 or more.
So it may be like A just by itself, because I said B C could be 0 or more.
So if B C is 0, then it could be just A, or it could be like A, B C, that means 1 B C,
or let's say A, B C, B C, right, 2 B Cs, or A, B C, B C, B C, 3 number of B Cs.
So these are the kind of strings that will be accepted by this one.
So let's see how we can design the final automata for this.
So I'll start with a state which I will call state A, which will be my starting state or
initial state, and I'll make another state here B, and I'll say that A will go to the
next state B on getting input small A. Okay, so we are done with this part.
Now I need the closure of B C. So in order to make the closure of B C, I will make another
state here which I will call state C, and I will say that from state B it will go to
C on getting input small B, and from C it will go back to state B on getting input small
C. And here what will be my final state?
I will make B as my final state.
Now why did I do this?
This is because we see that whenever we reach B C, whenever C is the last symbol, that is
when the string is ending or that is the strings that will be accepted.
So here we see that when it gets input small B, it comes to C, but C is not a final state.
But when it gets the input small C, see like here, it goes to B which is a final state.
And also the string A by itself also should be accepted.
That is why it comes to this final state B when it gets input small A. So let us just
check if these strings are accepted or not.
A by itself, A by itself, it comes to the final state B, it is accepted, A, B, C. So
A, B, and C again comes to the final state accepted, A, B, C, B, C. A, B, C, again B,
C accepted, A, B, C, B, C, B, C. A, B, C, B, C, B, C.
So any number of B, Cs that you have, it will be accepted.
So now we have also designed the finite automata for this regular expression.
So this is how you convert the regular expressions to their equivalent finite automata and we
will be seeing more and bigger examples in the coming lectures.
So thank you for watching and see you in the next one.
Thank you.
