In this lecture, we will be studying about context-free languages.
So, till now we have studied about regular languages and we also studied about regular
grammars and we saw what they can be used for and we also saw their limitations.
Now we come to the next level of languages which are context-free languages.
So let's first see what are context-free languages.
In formal language theory, a context-free language is a language generated by some context-free
grammar.
So, just like regular languages were generated using regular grammar, the languages that
are generated using context-free grammar are known as context-free languages.
And the set of all context-free language is identical to the set of languages accepted
by push-down automata.
So if you remember the table of Chomsky's classification of grammars that we saw in
a couple of lectures back, you must remember that the automata that is used for designing
context-free languages are push-down automata.
Just like in our regular languages, we used finite-state automata for designing them.
So in case of context-free languages, push-down automata is used.
So we know that context-free languages are considered to be a higher level language as
compared to regular languages.
So we should also understand that push-down automata are more powerful than the finite-state
automata.
Okay, so now let us see how our context-free grammars formally defined.
So context-free grammar is defined by four tuples as g equal to v, sigma, s, and p.
So if you remember, even regular grammar was defined using four tuples as v, t, s, and
p.
And even context-free grammar are also defined using four tuples which are v, sigma, s, and
p.
And let's see what the tuples mean.
The tuples actually they mean the same as in the case of regular languages where v is
the set of variables or non-terminal symbols and sigma is the set of terminal symbols and
s is the start symbol and p is a production rule.
So what is the difference between regular grammar and context-free grammar?
The difference lies in the production rule.
So in context-free grammar, it has a production rule of the form a tends to alpha or a gives
alpha where alpha is the union of v and sigma closure.
So that means that alpha can be a non-terminal symbol or a terminal symbol.
And here we notice that it is a closure.
So that means that it could also be empty.
It could also be an empty symbol or anything from a non-terminal symbols or a terminal
symbol.
And then a, it belongs to v.
That means a belongs to the set of non-terminal symbols.
So this is how we formally define a context-free grammar.
Now let us take a simple example to understand it in a better way.
So here we have an example for generating a language that generates equal number of a's
and b's in the form a power n, b power n.
The context-free grammar will be defined as g equal to s, a, a, b.
And this is a production rule.
So if you remember, we have taken this example a few times when we discuss regular languages.
And we already saw that this language, a language that generates strings of this form a power
n, b power n, where the number of a's should be exactly equal to the number of b's is
not a regular language.
And we already saw why it is not a regular language because this cannot be designed using
a finite state machine.
Since this could not be designed using a finite state machine, we are studying about context-free
language now.
And context-free language, as I told you, is a higher level of language as compared to
regular languages.
And context-free languages will be able to generate strings of this form.
So we will see how this will be generated using context-free language.
So the grammar that will be used for generating this is defined like this, g equal to s and
a, which are the set of non-terminal symbols.
And a and b are the set of terminal symbols.
And we have a production rule of the form s gives a, a, b, and a gives a, a, b, and
also it gives epsilon over the empty symbol.
Okay, so here, actually, the start symbol is not given.
So we should know that the start symbol is s.
So even if it's not given, let's understand that the start symbol is s over here.
Okay, now let us see if this production rule is going to produce the strings of this form.
Okay, so let me start with my start symbol that is s and s gives a, a, b.
So using this production, I have written this, s gives a, a, b.
Okay, now we have another production rule which says a gives a, a, b.
So this a over here, I will replace it with a, a, b.
So this a will come down as it is, and this capital letter a will be replaced by a, a,
b.
a, a, b, and this b over here comes down as it is.
So this is by the production which says a gives a, a, b.
All right.
And now let's try to expand this further.
Here we have a, a, a, b, b.
Now this a, using the same production rule, I will expand it again.
So these two a's will come down as they are.
And instead of this a, I will write a, a, b, a, a, b.
And these two b's are remaining, they will come down as they are.
So this is also using the same production rule as above.
Okay.
Now I still have a, a which is a non-terminal symbol here.
And now what I will do is I will replace this a with epsilon, that is the empty symbol.
Because we see that the production rule says a gives a, a, b, and also it can give epsilon
or the empty symbol.
So I can write a, a, a, and instead of a, I will put epsilon.
So epsilon actually means the empty symbol, so I can just leave it blank.
And then these three b's will be b.
So this is by the production rule which says that a gives epsilon.
Okay.
So we see that we, finally we get this string a, a, a, b, b, b.
So this is of the form a power 3, b power 3.
So we see that the number of a's is equal to the number of b's.
So how much ever you expand, you will always get strings of this form where the number
of a's will be equal to the number of b's.
That means you can generalize and write that a power n, b power n.
So we see that this is generated using the context free grammar which is defined like
this and which has the production rule of this form.
So this is how some strings or languages are generated using context free grammar.
Okay.
So I hope this was helpful to you.
Thank you for watching and see you in the next one.
