Hello everyone, in this lecture we will be designing an NFA and we will convert it to
its equivalent DFA.
Alright, so here is the question we have, design an NFA for a language that accepts
all strings over 01 in which the second last symbol is always 1, then convert it to its
equivalent DFA.
So what we have to do is, we have to design an NFA for a language that accepts all strings
in which the second last symbol is always 1.
So for example, the strings that it should accept are strings like 1010, see second
last symbol is 1 or let's say 110 or let's say 1101010, see the second last symbols are
always 1, these kind of strings are the strings that should be accepted by our NFA.
So first we will design the NFA and then we will convert it to its equivalent DFA.
So let's see how we can do this.
So first of all, I will be designing the NFA.
So we will draw the state transition diagram first, first I'll start with my starting state
which I will call state A and in A whatever input I get, whether it is 0 or 1, let us
stay in A because this is the first state and I don't care what happens in the beginning.
I am concerned about the second last symbol.
So in the beginning whether it is 0 or 1, let it stay in state A and state A will go
to the next state that is state B on getting the input as 1.
That means now I assume that this is going to be my second last symbol.
So if this is going to be my second last symbol, I send it to the next state B. So I reach
the second state B and then state B goes to the next state, state C that is the final
state on getting the next input.
So here as I told you, I am only concerned about what are my second last symbols.
So second last symbol I already got as 1, so the last symbol I don't care whatever it
is, let it be 0 or 1, it goes to state C. So now my NFA is complete.
So I don't have to mention what happens in C because this is an NFA, B and A we have completed.
Now we will draw the state transition table for this.
So in this table what will be the elements I have, I will have my inputs which are 0
and 1 and then I will have my states A, A is the starting state so let me give this
arrow then B and then C. C is the final state so I will give a circle around C. Now let's
fill up this table, A on getting input 0 where does it go, A on getting input 0 it stays
in A itself, stays in A itself and A on getting input 1 where does it go, on getting input
1, A goes to A itself and also it goes to B. So it goes to 2 states namely A and B and
let's come to state B, B on getting input 0 where does it go, B on getting input 0 it
goes to C and B on getting input 1 where does it go, B on getting input 1 it goes to C.
Ok and coming to state C, C on getting input 0 where does it go, it goes nowhere and C
on getting input 1 where does it go, it again goes nowhere so we mentioned it as 5 that
means it does not go anywhere.
Ok so now we have completed the state transition table for the NFA, now we will try to design
its equivalent DFA.
For that I will convert this state transition table to the equivalent transition table for
DFA.
So let me draw the table over here, so in this table we will be doing for DFA.
So my inputs are 0 and 1 and what will be my state I will first start with the starting
state which is state A, A is my starting state and let's say where does A go, A on getting
input 0 where does it go, it goes to A itself alright and A on getting input 1 where does
it go, getting input 1, A goes to two states A and B but in NFA two states are possible
but in DFA two states are not possible we can set it to only one state so we will combine
these two states AB and make it a single state which I will call state AB, this is a single
state AB alright.
Now looking at this row we have to decide what should be the next state that we should
decide.
So here we see that the only state reachable from this row are A and AB so I have already
written for A the next thing is AB so we will talk about state AB and in order to see
where does AB go and getting input 0 or what should I do I should go to this table and
I should look at both A and B and I should perform the union operation of A and B on
getting particular inputs.
So AB on getting input 0 I should perform the union operation of this A and B on getting
input 0 so union operation of A and this C it will be AC, AC which is also a single
state and then on getting input 1 union operation of AB and C so it is ABC, ABC okay now coming
to this row let us check what are the states reachable from here AC and ABC so let us write
about state AC first AC so AC on getting input 0 where does it go I have to come to
this table and perform the union operations of A and C so on getting input 0 the union
operation of A and phi which is A itself okay and on getting input 1 union operation of
this AB and phi so it is AB okay now we have finished and from here we see that the next
states reachable are A and AB so I have already mentioned for A and AB so what was left from
this one ABC was left so let us discuss about ABC, ABC now in order to check for ABC I have
to perform union operations of this A, B and C in this table so on getting input 0 union
of AC and phi which will be AC and on getting input 1 it will be union operation of ABC and
phi that will be ABC okay so now we have made the transition table but we did not mention
which is the final state so in this table C was the final state so in this table whichever
states that contains C will be the final state so we see that AC contains C and ABC also contains
C so these two will be my final states AC and ABC okay now we have finished the transition
table now let us try to draw the transition diagram so we will start with this starting
state which is state A I start with my starting state A and A on getting input 0 it stays
in A itself on getting input is 0 A stays in A itself and on getting input 1 it goes
to AB so it will go to AB when does it go to AB on getting input 1 okay so we have finished
for state A now let us come to AB on getting input 0 where does it go it goes to state
AC so let me make state AC over here and let us remember that AC is a final state so I
have to put two circles around this AC okay and when does AB go to AC AB goes to AC on
getting input 0 alright now AB on getting input 1 where does it go it goes to state ABC
so here I will make another state called ABC and ABC also is a final state so I have to
put two circles around this ABC so I put two circles around this ABC so AB goes to ABC
on getting input 1 alright this one now let us check for state AC AC on getting input
0 it goes to state A so AC on getting input 0 will go to state A and AC on getting input
1 where does it go it goes to AB so AC on getting input 1 it goes to AB and now finished
AC now let us come to state ABC ABC on getting input 0 it goes to AC ABC goes to AC on getting
input 0 and on getting input 1 where does it go it goes to ABC itself so ABC stays in ABC
itself on getting input 1 okay so now we have finished the transition diagram for the DFA so
we have designed the DFA successfully now let us just check if these strings will be accepted
by this DFA so we know that it should be the strings that ends with 1 as the second last
symbol so here 1 0 1 0 1 0 1 0 so it comes to AC that means AC is a final state it is
accepted so this is accepted now let us check for this one 1 1 0 1 1 0 right so it comes to AC
so that is also accepted because this is the final state and let's check this 1 1 0 1 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 comes to AC which is the final state so this is also accepted so we see that all these three are accepted because it ends with 1 as the second last symbol so all strings that has 1 as the second
last symbol are accepted by this NFA and DFA so if you were to design the DFA directly without having this NFA you would have to think so much and do a lot of designing but if you design the NFA first because designing
NFA is very simple so if you design the NFA first it is very easy to convert it back to the DFA so this is how you can design the NFA and convert it back to the DFA
