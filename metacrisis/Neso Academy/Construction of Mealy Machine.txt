In this lecture, we will be studying about construction of Millie machine.
In the last lecture, we have studied about Millie machine and also we have defined Millie machines.
Now, in this lecture, we will be seeing some examples where we will be trying to construct some Millie machines.
Alright, so here is our first example.
Construct a Millie machine that produces the once complement of any binary input string.
So, we have to construct a Millie machine that gives the once complement as the output to any input binary string that we give.
Okay, so before we start, let us try to understand what is a once complement.
So, once complement is nothing but just the complement of any binary number.
So, suppose you have a number like 1 0 1 0 0. What would be the once complement of that?
Just change the ones to zeros and zeros to ones.
So, here this will be 0 1 0 1 1. So, this is the once complement.
So, we need to design a Millie machine that can perform this kind of a task.
So, how do we do this? It is very simple.
First, I start with a state which I will call a which is my starting state.
And a on getting the input 0 should give the output 1.
And a on getting input 1 should give the output 0.
So, this is very simple.
Whenever you see 0, you give the output as 1.
And whenever you see 1, you give the output as 0.
So, that will give you the once complement.
So, it is very simple and it can be achieved just by using one state.
Okay, so now let us see another example.
Okay, so here we have our second example.
That is to construct a Millie machine that prints a whenever the sequence 0 1 is encountered in any input binary strings.
So, we need to design a Millie machine that will print a that means it should give the output a whenever the sequence 0 1 is encountered in any input binary string.
So, we can have any input binary string and whenever you see this sequence 0 1, then it should print an a.
So, let's say that here our inputs could be 0's and 1's and our outputs could be a's and b's.
Okay, and then we should print a when 0 1 is encountered.
So, let's see how we can do this.
So, before we try to just make the Millie machine, let us try to do it in a simpler way
by constructing a DFA for this and then we will try to model the Millie machine out of our DFA.
So, how do we do this?
Let's try to make a DFA that accepts the string 0 1.
Okay, let's try to make a DFA that accepts any strings that end with 0 1 actually.
So, what we do is let me try to make a DFA.
I start with my starting state a.
Okay, and a will go to the next state which I will call state b.
When will it go to state b?
On getting the input 0.
Okay, a will go to b on getting input 0 and then b will go to the next state which I will call state c.
When it get the input, what will be the input?
It will be 1 because I am trying to make a DFA that ends with 0 1.
That accept all strings that end with 0 1.
Okay, this is 0 1.
So, a on getting input 0 goes to b and b on getting input 1 goes to c.
So, let's just assume that this is the final state.
But remember that there will be no final state as such in our Mealy machine.
But just assume that this is a final state if this was supposed to be our DFA.
Okay, but this DFA is not complete because we have to mention where does each state go on getting other inputs as well.
So, a if it gets the input 1 let it stay in a itself.
Okay, and b on getting input 1 we already said it goes to c.
And on getting input 0 let it stay in b.
Okay, and then let's come to c.
c on getting input 0 where should I send it?
c on getting input 0 I will send it to b.
Okay, I will send it to b.
Why is it so?
That is because after I come to c and if I get a 0 then I am having my string as a 0 and I could get a 1.
I assume that I could get a 1 and come to c again so that I get the string 0 1.
That is why I send it to b on getting input 0.
And on getting input 1 where should c go?
I will send it to state a.
I will send it to state a on getting input 1 and why do I do that?
That is because on getting input 1 if I get input 1 suppose and suppose I send it to b then what happens?
I could get another 1 and form the string 1 1 and come to c.
And I don't want that.
I want the sequence 0 1.
So if it gets input 1 I send it back to a.
Assuming that I could get a 0 and 1 after that.
Okay, so here we have designed the DFA for this.
Now let us model it and make it a mealy machine.
So we know that mealy machine should give outputs.
Now what is the condition here?
It should print a.
It should give the output a when we get the sequence 0 1.
Now when do we get the sequence 0 1?
When we reach state c.
When we come from here 0 and we could get another 0's here.
So 0 and as soon as you see a 1 it comes to c.
So it is at this point that you are going to see the sequence 0 1.
So at this point I will print the output a.
Okay.
So this is where you should print the output a.
And in all the other places I will write b.
Because I don't care what it prints there.
So here I will give b.
I will give b.
I will give b.
And then I will give b.
Because I don't care what it is printed here.
So let it be b.
My only concern is it should print a when it sees the sequence 0 1.
Okay.
Now let us just take a few examples and check if this is working.
So let us take the string 0 1 1 0.
So here we see that we have the sequence 0 1.
So when it sees a 0 1 as soon as I reach this 1 it should print a.
So let's see if it prints or not.
Starting with 0.
We start with a.
A on getting input 0 it goes to b.
And it prints b.
Okay.
And we are in b.
And b on getting input 1 it goes to c printing a.
Okay.
At this point it printed a.
And now we get 1 again and we are in c.
And c on getting input 1 it goes to a printing b.
And on a we get the input this 0.
And it goes to b printing b.
Okay.
So we see that here we encounter the string 0 1.
And when we saw this 1 a was printed.
And that is what we wanted.
Now let's check another string 1 0 0 0.
So here we see that we don't have the sequence 0 1.
And let's see what happens.
Starting with a.
A on getting input 1 it goes to a itself and prints b.
Okay.
And then the next is 0.
So a on getting input 0 it goes to b printing b.
And in now we are in b and we get the third input that is 0 again on b getting 0 it stays
in b itself printing b.
And we get another 0 here.
So b stays in b itself on getting 0 printing b.
So here we see that we did not have the sequence 0 1.
So we have no a's printed it is only b.
And here when you got the sequence 0 1 we could print a.
So we successfully constructed a mini machine that prints a whenever the sequence 0 1 is
encountered in our input string.
So this is how you can do it.
You can first try to design the DFA and try to convert it back to the mini machine.
So I hope this was clear to you.
Thank you for watching and see you in the next one.
