In this lecture, we will be seeing another example of conversion of regular expression to its equivalent finite automata.
So here we have a regular expression given and our task is to convert it to its equivalent finite automata using the rules that we have studied in the last lectures.
Alright, so let's get started and see how we can do this.
So starting with the first sequence, we have A or B and hits all closure.
So this symbol over here is same as the plus symbol that we used to use, which is used to denote OR.
So why I am using these different symbols is because I don't want you to be confused when you see these different symbols.
I want you to know that this plus and OR just means the same.
So first of all, let's try to make the finite automata for this sequence A or B hits all closure.
Okay, so let me take a state which I will call state number one and let me make this the starting state and if you see that this is a closure.
So whenever we have a closure, what we do is we make a self loop.
That is what we have studied.
Now, when will it go to this state on either A or B?
So on either A or B, it will go to this state one itself.
Okay, so now we have completed the A or B closure part.
Now, let's come to this part.
Now, if you see here, you see that after this sequence, it's like an AND and it is followed by ABB or A plus B.
And this plus is not a plus in between A and B, but this is a plus over this A and we will see what it means.
So first, let's do this part ABB.
So for that, let me make another state over here, which I will call state number two.
And we already studied that whenever we have sequence of the form ABB, that means if there is no plus in between, if it is just written together like this,
that means you just have to make separate states for them and make them keep moving forward.
So from here, this state one will go to state two on getting input A, that is this A over here.
And then I'll make another state over here, which is state three.
And I will send this state two to state three on getting input B, which is this B over here.
And there is one more B order.
I will make another state, which I will call state four.
And state four will also be a final state because this is a terminating symbol.
And this three will go to state four on getting the next input B.
Now we have completed this part ABB and followed by this, we have an OR symbol, which is followed by A plus B.
Now whenever you have an OR symbol, you have to continue from the state where you started.
Now here this is the state from where we started this ABB.
And since it is an OR, this also will be followed from this same state itself from where this was started.
Okay, so let me make another state here, which I will call state number five.
And I will send this one to five on getting input A.
Now we are going to design for this A plus.
Now what is the meaning of this A plus?
A plus, if you remember when I taught you the identities, I told you it means one or more number of S.
So it could be A, A, A, A and it would go on.
Now what is the difference between A plus and A closure?
In A closure, it can also include the empty symbol and followed by any number of S.
So the difference is that in A closure, there could be zero or more number of S,
but in case of A plus, it will be one or more number of S.
That means at least one A should be present.
So as we design for this A plus over here, what we do is in the state number five,
I give a self-loop and I put A over here.
Now if you look at the state five, which is for this A plus,
we see that it will come to state five only on getting at least one A.
It will come at least on one A and after that it could get any number of S.
So we make sure that at least one A will be present followed by any number of S if required.
So we have successfully made the automata for this A plus.
Now it is followed by a B.
So there is nothing in between, it is just written together.
So for this B, I'll just make another state which I will call state six.
And since that is also the ending symbol, so this will be a final state
and this five will go to this state six on getting the input B.
So that is for this one.
So for this A plus, we have designed this and for this B here, we have this part.
So now we have successfully made the final automata for this regular expression.
And if you look at this final automata, you may be thinking whether this is a DFA or an NFA.
So if you look carefully, we can find that it is an NFA.
So we see if you look at state one on getting input A, it has moves to one, two and five.
It is having more than one moves.
And also if you look at state number two, you see that it goes to state three on getting input B,
but it does not have any move on input A.
So all these things are properties of NFA.
So we see that these are NFAs that we have designed.
And it is obviously possible to convert this to its equivalent DFA.
So if you want to convert a regular expression to its equivalent DFA,
so first design its NFA like this using the process that we have done here.
And then after that, you can convert it to its equivalent DFA using the conversion of NFA to DFA method that we have already studied in the previous lectures.
So I hope this was clear to you.
Thank you for watching and see you in the next one with another region.
