Hello everyone. In the previous lectures we have studied about DFA's and NFA's. So in
this lecture we will be studying about how to convert NFA's to DFA's. Alright so let's
get started. Okay so we say that every DFA is an NFA but not vice versa. That means that
every DFA is an NFA but every NFA is not a DFA. Alright but there is an equivalent
DFA for every NFA. That means every NFA can be converted to an equivalent DFA. Okay so
we have two statements here but how do I justify this? In order to justify this let us do it
this way. When we studied about DFA and NFA we studied that DFA is defined using five
tuples, NFA also is defined using five tuples and all the tuples in DFA and NFA were same
except for one of the tuples and which was that? If you remember it was the transition
function del. In case of DFA, in case of DFA what was the value of del? Del was a transition
function that maps q cross sigma to q. This was the transition function for DFA and in
case of NFA what was the transition function? In case of NFA the value for del was q cross
sigma to 2 power q. So this was the only tuple that was different in DFA and NFA. All the
other tuples were same. Now let us observe these two equations and try to figure out how
can we justify this statement. So if you look carefully you can see that q cross sigma to
q this part it is contained in this part q cross sigma to 2 power q. q is also a part of 2 power
q. I hope you are getting what I am saying but 2 power q is not a part of q. So this it is already
contained in this. So we can look at these two equations and say that every DFA is an NFA but
every NFA is not a DFA. But there is an equivalent DFA for every NFA but there is a way we can
convert every NFA to a DFA. That means we can make them equivalent. There is a way to convert
every NFA to DFA and that is what we are going to see in this lecture. Alright so to demonstrate
this let us take a simple example. Okay so we have an example language here L which is the set of
all strings over zero one that starts with zero. So let us design an NFA for the language which
accepts the set of all strings over zero one that starts with zero. So here our input symbols sigma
is zero and one. So let me design the NFA for this. So in order to do that we have a starting
state which is state A and A on getting input zero. I will send it to the next state which is
state B and my condition is that it should start with zero. So A on this is the first input I get
A on getting input zero goes to B and B should be my final state or the accepting state and in B
after that whatever I get I don't care whether it is zero or one it stays in B itself. So this is
the NFA. This is the NFA for L. Alright so how do we know it is an NFA? A on getting input one I
did not mention where it goes. It goes to the dead configuration so that is not mentioned means it is
NFA. Okay now before proceeding let us just draw the state transition diagram for this.
I am trying to draw the state transition diagram for this NFA and in the state transition diagram
I will have my inputs here zero and one and here I will have my states A and B.
Okay now let us fill up this table. A on getting input zero where does it go? It goes to B
and A on getting input one where does it go? It goes nowhere. It goes to phi right phi is the
dead configuration. So remember that this dead configuration in NFA will be what will be its
equivalent in DFA. In DFA the equivalent of dead configuration will be a dead state or a
trapped state. So keep that in mind and let's come to state B. B on getting input zero where
does it go? It goes to B itself and B on getting input one where does it go? It goes to B itself.
Okay now let us try to convert this state transition diagram for this NFA to its equivalent
DFA. Okay so what we are trying to do is make the DFA. So the state transition diagram for DFA
how would it look like? I will again draw a table here. Okay and in my table what will be the things
I have? I will have zero one which are my inputs and I have my states A and B. Okay now let's see
let's look at this table and try to convert it into a DFA. So A on getting input zero where does
it go? It goes to state B and A on getting input one where does it go? It goes to phi. Phi is a dead
configuration in NFA but in case of DFA we cannot have a dead configuration. This should be replaced
by some kind of state and what is that state? I will call it state C and state C is my dead state.
It is the dead state also known as the trap state. Okay and B on getting input zero where does it go?
It goes to B itself and B on getting input one it goes to B itself. Okay now is it complete?
It is not complete. Why? This is a DFA and I should mention clearly about each and every state where
it goes on getting particular inputs. I have mentioned about A and B but here I have a new
state in this DFA and that is state C so I need to mention about state C as well and if you remember
whenever any input comes to the dead state it stays in the dead state itself and it does not go out
of that. So C on getting input zero should stay in C itself and C on getting input one it should
stay in C itself because C is my dead state or trap state. Now this is a complete state transition
diagram for my DFA. Now let me draw the diagram state diagram for this. Here I should have A
and then B. My final state should also be B right and in here I have a extra state that is state C.
Okay so A is my starting state. A on getting input zero it goes to B right and A on getting
input one it goes to C. Should go to C on getting input one. Alright and B on getting input zero
and one it stays in B itself. It stays in B itself on getting input zero or one and let's come to
state C. C on getting input zero and one it stays in C itself. Okay so here I have the complete DFA.
Let us check if it is complete. In A I have mentioned what happens when it gets zero and one.
Yeah A is complete. B also I have mentioned what happens when it gets zero and one. B is complete.
C also I have mentioned what happens when getting input zero and one. So C is also
complete. So now we have made the equivalent DFA for this above NFA and this is how you
convert the NFA to its equivalent DFA. So I hope this was clear to you and thank you for watching
and we will see more examples in the next lecture.
