In this lecture we will be seeing some examples of designing regular expressions.
So we have our question given here that is to design a regular expression for the following
languages over AB.
So here our sigma or our inputs are AB.
So we will be designing the languages over AB and then the first one is a language accepting
strings of length exactly 2 and the second one is a language accepting strings of length
at least 2 and the third one is language accepting strings of length at most 2.
Okay, so let's do the solution over here.
Let us first do the first one.
So let's say this is language L1 and this is a language that should accept the strings
of length exactly 2.
So if our alphabets are AB, what would be the strings of length exactly 2?
The possibilities are AA, AB, BA and BB.
So these are the only strings that will be accepted in this language L1.
So how do we design the regular expression for this?
It is very easy.
We can just write AA plus AB plus BA plus BB.
Let's do the union of all the strings that are possible in this set and we can further
simplify this.
We can take out A common from these two terms.
If I take out A common, I get A plus B over here and plus from here from these two terms
we can take out B as common.
So we will get A and B again, A plus B.
So this A plus this B, let me write them together.
So this will be A plus B and these two A plus B.
So this is a simplified form and this regular expression gives us the language that accepts
the strings of length exactly 2.
Now you see that when it is exactly 2, we are having A plus B and again A plus B.
Now if you want to design a language that accepts strings of length exactly 3, then
you can give one more A plus B here or if you want of length exactly 4, you can give
another A plus B again and it can be designed further in that way.
Now let's do the second one.
So the second one is a language accepting strings of length at least 2.
So what is the meaning of at least 2?
At least 2 means it could be A A, A B, B A, B B, these are the strings of length 2 and
it says at least 2, at least 2 means 2 or more than 2.
So it could be A A A and it could continue.
This will actually be an infinite set because it says at least 2, which means 2 or more
than 2.
2 is the minimum 1 and the maximum is not specified.
So it is an infinite set.
So how can we write this?
The regular expression for this can be written as R equal to A plus B and again I'll write
A plus B.
Why did I write this?
This is because we already found out from this first question that A plus B and A plus
B, this is used to represent the strings of length exactly 2.
So now I have made this for exactly 2 and then this should be at least 2.
So this is exactly 2 and here I will write A plus B star.
Now what does this mean?
This means that 2 or more than 2.
Why is that?
Here we are making sure that strings of length 2 will be there for sure.
So this term over here is used to denote anything that will be more than length 2.
So if you want it to be of length 2, you can just replace this star with 0.
So this term will be cancelled and you will have only these 2 and it will be of length
2.
If you want it to be of length 3, you can give 1 over here instead of star.
So you will have A plus B, A plus B, A plus B and if you want length 4, you can give power
2 over here.
So it can accept any strings of length 2 or more, that means at least 2.
So minimum is 2, maximum is not specified.
Okay, so now let's come to the third one.
The third one is language accepting strings of length at most 2.
Now what is the meaning of at most 2?
At most 2 means maximum it should be 2 and minimum is not specified.
So minimum we can have nothing, null that is epsilon and then you can also have strings
of length 1 like A and B and also you can have strings of length 2, A, A, B, B, A and
B, B. Now these are the only strings.
Why?
Because it is at most 2.
Maximum is 2.
So these are the ones with length 2 and we cannot have 3 or anything more after that.
So these are the only strings that will be accepted by this language.
So how do we write the regular expression for this?
You can write it in a very simple way by just putting a plus symbol doing the union of all
of them, epsilon plus A plus B plus A A plus A B plus B A plus B B.
Now you can simplify this and write it in this way.
You can write epsilon plus A plus B and you can write again epsilon plus A plus B.
Now why did I write like this?
This is because suppose you want it to be of length 0 that is epsilon.
So what you can do?
You can take epsilon and epsilon from here and you can just discard this A B and A B from
here and if you want string of length 1 let's say suppose it is A or B.
So you can choose just A from here or A from here or B from here or B from here or if you
want it to be A A and you can take A from here, A from here.
For A B you can take A and B from here and for B A you can take B from here and A from
here and for B B you can take both the B's from here.
So this regular expression is used to denote the language that accept the strings of length
at most 2.
So this is how we design the regular expressions for these given languages.
So I hope that was clear to you.
Thank you for watching and see you in the next one.
