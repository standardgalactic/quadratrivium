Hello everyone, welcome to the next lecture on theory of computation and in this lecture
we will be seeing the formal definition of NFA or non-deterministic finite automata and
we will also try to understand what it means with the help of an example.
Alright, so let's get started.
Okay, so here we have the example of NFA and what is this NFA?
It is actually a machine which accepts the set of all strings that end with 0 and how
do we know that?
If we look at this we see that on getting 0 it comes to B which is the final state represented
by double circles.
So we know that it is a set of all strings that end with 0 that is accepted by this NFA.
Alright, now let us just observe this NFA and try to figure out what is the difference
from the DFA.
So if you look carefully you can see that there is a starting state represented by this
arrow.
So A is the starting state just same like the DFA and A on getting input 0 what happens?
It could either stay in A itself or it could go to B. There are multiple next states.
This was not possible in DFA and A on getting input 1 it stays in A itself and what about
B?
We did not mention what happens to B when it gets input 0 or 1.
Is it wrong or is it incomplete?
No, it is not wrong.
In NFA you can actually leave it like this.
It is perfectly legal to leave a state like this without mentioning anything.
That actually means that this state does not go anywhere.
Alright, which was not legal in DFA but in case of NFA it is perfectly legal and this
is a complete NFA.
Alright and by looking at this you can guess that it is very easy to design NFA as compared
to DFA because in DFA we have to be very careful about sending the states to only one
next state and we should also mention clearly on getting input whatever inputs they are.
We should show what is the transition from each input but in NFA we find that even if
you leave it like this it is complete.
So it is very easy and straightforward to design a NFA.
Alright, now let us try to give the formal definition.
So just like DFA, NFA also is defined using 5 tuples which are Q, Sigma, Q0, F and there.
Using these 5 tuples we can define our NFA and what are these?
Let me write it down.
It is almost the same like DFA, Q is the set of all states and Sigma is the inputs and
Q0 is the start state or the initial state and then F is the set of final states and
Del.
So we saw that this Q, Sigma, Q0 and F it is same like the DFA that we have already studied
and what about Del?
Del is a transition function that maps Q cross Sigma to what?
We will try to find out what this is.
I will leave it blank here.
We will try to find out what does this transition function Del map.
Alright that is what we are going to find out.
So Q, Sigma, Q0 and F are the same like DFA so I hope I don't need to explain it again.
So let us just try to write down the values for this particular example.
So in this particular example what is Q?
Q is the set of all states.
So what are the set of all states here?
The only states we have are state A and state B.
So it is A and B and Sigma is the inputs.
So what are the inputs we have?
The inputs we have are zeros and ones.
The inputs are zero and one.
And Q0 is the start state or the initial state and how do we know which is the start state?
The state that is pointed by this arrow coming from nowhere shows that this is the start
state.
So the start state is A which is also known as the initial state.
And what is F?
F is the set of final states.
So here we have only one final state that is B represented by the double circle.
Now what is Dell?
How do we find out what is Dell?
This is what we are going to find out.
So when we try to find this out, let us try to do some exercise.
Let us see.
Let us check for state A.
State A on getting input zero, where does it go?
It goes to state A itself and state A on getting input zero.
It also goes to state B.
And let us see when state A gets input one what happens?
When state A gets input one it goes to state A itself and that is it for state A.
And what about state B?
State B on getting input zero where does it go?
It does not go anywhere.
So we represent it with phi.
And what about state B on getting input one where does it go?
It again goes nowhere.
So it is again represented by phi.
So we see that given a state when it gets a particular input it can either go to one
state or more than one states.
So we see that A on getting input zero it went to two states A and B.
And A on getting input one it went to just one state.
So there are many possibilities.
Let us try to figure out how many possibilities are there.
For this example A and B are there and let us see what are the possibilities that we
can get.
So let us talk for one state A. A on getting a certain input let us say zero or whatever
it may be on getting a certain input it can either go to A or it can go to B or it can
go to both A and B like here it went to both A and B.
So it can either go to A it can either go to B or it can go to both A and B or it can
also go nowhere just like we saw that B was going nowhere.
So this A on getting a certain input it has these four possibilities it could either go
to A, B, AB or phi.
So there are four possibilities.
Now let us take another example.
Let us say that we have three states.
Suppose we have three states.
We have three states which are A, B and C. Now in this example suppose in state A we
get a particular input.
So what are the possibilities to which A can go.
A can either go to A itself.
It can go to B or it can go to C or it can go to A and B or it can go to A and C or it
could go to B and C or it could go to all of them A, B and C or it could not go anywhere
it could go to phi.
So we see that when there were three states we had eight possibilities.
When we had three states there were eight possibilities 1, 2, 3, 4, 5, 6, 7, 8 and what
about this case this was for this example and in this example how many states we had
we had two states.
We had two states and how many possibilities we had 1, 2, 3, 4, 4 possibilities.
So seeing this pattern can we figure out a formula for this.
We see that when there are two states it has four possibilities and when there are three
states there are eight possibilities.
So we can say that it is 2 raised to power 2 this is 4, 2 raised to power 3 this is 8.
So we can say that this transition function it maps q cross sigma 2 can we guess it.
Yes I hope you have guessed it it is 2 power q that is 2 power the number of states.
So that is what our transition function maps to.
In case of DFA it was q cross sigma to q because every state it leads to only one next state
but in this every state can lead to multiple next states and it has two power q possibilities
to choose from where it can go on getting a particular input alright.
So that was the formal definitions that we could give to our NFA.
It is defined using five tuples q sigma q naught f and del where q sigma q naught and
f the same as DFA and the only different thing is the transition function del which maps
q cross sigma to 2 power q.
So I hope this made the formal definition of NFA clear to us.
So in the next lecture we will be explaining about this particular example in a more detailed
way which will make it more clear to us.
So thank you for watching and see you in the next one.
