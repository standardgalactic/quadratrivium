Hello everyone, in this lecture we will be converting another NFA to a DFA.
So given below is the NFA for a language L which is a set of all strings over 01 that
ends with 01.
So we have to construct its equivalent DFA.
So here we see the transition diagram for this NFA and here we have the transition table.
So we see that we have three states A, B and C and A on getting input is 0, it stays
in A and also it goes to B and on getting input 1 it stays in A itself and B on getting
input 1 it goes to C and that's it.
So this is the equivalent transition table for that.
So how do we know that this is an NFA?
We see that A on getting input 0 that is a particular input it goes to two different
states.
So this is the property of an NFA which cannot be there in DFA and also we see that B on
getting input 0 it goes nowhere it goes to 5 and also C on getting input both 0 and 1
it goes to 5 that means it does not go anywhere.
So this is the property of NFA.
So we have to convert the equivalent DFA.
So let's see how we can do this.
So first of all we will be using the subset construction method and for that we will be
making the transition table for the DFA.
So we draw a table here, in this table we will be making the transition for the DFA.
So what will be the elements I have?
I will have 0 and 1 which will be my inputs and I will look at this table.
What is the starting state?
A, I will start with the starting state A, give this arrow to indicate it is a starting
state and A on getting input 0 where does it go?
It goes to states A and B but in DFA we cannot send it to two states.
So we will convert this A, B to a single state which I will call A, B and A on getting
input 1 where does it go?
It goes to A itself.
So that is okay we can do the same thing here.
Now how do we define the next state in this DFA?
So we have to look at this state and we see that we should search what are the states
reachable from this state and the states reachable from this state are A, B and A. A is already
mentioned so the next one is A, B. So we will make the transition for A, B.
So A, B on getting input 0 where does it go and when getting input 1 where does it go?
So in order to check for A, B we have to check both A and B in this table and we have to
perform the union operations of A and B. So A, B on getting input 0 where does it go?
Perform the union operation of both A and B in this table.
So union operation of A and B will be A, B and 5.
So it will be just A, B, A, B and on getting input 1 we have to perform union operation
of this one.
So in the union operation of A and C will be A, C. A, C.
Okay now we are done with that and what will be the third state in this table?
Here we see that the states reachable from here are A, B and A, C.
So A, B is already done so the next one is A, C. We have to make a new state A, C and
let's see what happens to A, C. So for checking for A, C we have to perform the union operation
of A and C in this table.
So on getting input 0 it will be union of this A, B and this 5.
So it will be A, B, 5.
It will be A, B. A, B and then for input 1 union operation of A and 5.
So union operation of A and 5 will be just A.
Okay so now we have finished the transition table but we did not mention what is the final
state in this table.
Initial state is A but what is the final state?
In order to check what is the final state we look at this table and we see that here
C was the final state.
So since C was the final state here in this table whichever states that contains C will
be the final state.
So we see that here A, C contains C. So A, C will be the final state in this table.
Alright so now we have finished the transition table for this DFA.
Now we will try to design the transition diagram for the DFA.
Now we start with the starting state that is state A. Start with A, A is my starting
state or initial state and A on getting input 0 where does it go?
It goes to A, B. It goes to A, B on getting input 0 and A on getting input 1 where does
it go?
It goes to A itself.
It goes to A itself on getting input 1.
Okay now we have completed A. Now let us come to A, B. A, B on getting input 0 where does
it go?
It goes to A, B itself on getting input 0, A, B goes to A, B itself and A, B on getting
input 1 where does it go?
It goes to A, C. We have another state here A, C and also let us remember that A, C is
the final state.
So we will put two circles around this A, C. So A, B on getting what input does it go
to A, C on getting input 1.
So on getting input 1 it goes to A, C. Now let us come to A, C. A, C on getting input
0 it goes to A, B. It goes to A, B on getting input 0 okay and A, C on getting input 1 it
goes to A. So A, C will go to A on getting input 1.
Okay, so now we have drawn the transition diagram for this DFA and we have successfully
converted this NFA to its equivalent DFA.
So what was the task of this NFA?
It accepts the set of all strings over 0, 1 that ends with 0, 1 right?
When it ends with 0, 1 it is accepted.
Now let us see if this DFA also does the same thing.
Let us check for some strings.
Let us take some few examples.
Let us check for the string 1, 1, 0, 1.
So 1, 1, 0 and then 1 it comes to the final state.
It is accepted.
Let us check for another string let us say 1, 1, 1, 0.
So 1, 1, 1, 0 it is in A, B. So it is not accepted.
So when it ends with 0, 1 it is accepted.
When it ends with something other than 0, 1 it is not accepted.
So this is how you convert the NFA to its equivalent DFA.
I hope it was clear to you.
Thank you for watching and see you in the next one.
