Hello everyone, welcome to the next lecture in theory of computation and in this lecture
we will be seeing an example about our DFA or deterministic finite automata. We shall
be seeing how to design a particular DFA in this example. Alright, so let's get started.
Okay, so we have an example here which is a language L1 which is a set of all strings
that starts with zero. L1 is a language which is a set of all strings that starts with zero
and we need to design a deterministic finite automata or DFA for this language L1. So let's
see how we can do that. But before starting that, let us see what will be the elements in this set.
Now since this is a set of all strings that starts with zero, the elements in this set
would be like 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0 and so on. This is actually
an infinite set because any string that starts with zero is present in this language L1.
Okay, now let's see how we can design the DFA for this. So whenever you start a DFA,
you should always start with a state which is my initial state or start state. So I already
told you in the previous lecture that whenever you see an arrow coming from nowhere pointing to a
state, that shows that that is the starting state. So A is my starting state. So I am starting with
A. Now if I get input 0 in A, what will happen? And if I get input 1 in A, what will happen?
Let's see what should we do. Suppose I get input 0 in this A, I send it to another state
which I call B. Okay, and I put a double circle around this B. Now what is the meaning of this
double circle? Double circle means this is the final state. When you see a double circle,
it always means that this is the final state. Now when I give input 0 to A, it goes to B.
Now why is that? That is because I am to design a DFA that accepts all string that starts with 0.
So A is my starting state and I am getting input 0. That means 0 is the first digit.
And when 0 is the first digit, it goes to B, which is the final state. And whenever a string
reaches the final state, that means that string is accepted. And whenever a string does not reach
the final state, that means it is rejected. So whenever I am starting with 0, it should reach
the final state because it should be accepted. Why? Because I am to design a DFA for all strings
that starts with 0. Okay, now I am in state B. And after reaching state B, in B also I can either
get inputs 0 or 1. So what will happen if I get either 0 or 1? Since B is the final state,
I will give a self loop here and I will write 0 or 1. So what does this mean? This means that
after reaching this final state B, whatever input you get after that, whether it is 0 or 1,
it stays in the final state B itself. Okay, because the string started from 0 and our only
condition is that it should start with 0. So it starts with 0. And after it reaches the final
state, whether it is 0 or 1, it doesn't matter. It stays in the final state and that string will
be accepted. Okay, I hope that was clear. And now is this complete? No, this DFA is not complete.
Why? Because we already mentioned what will happen if A gets the input 0. But we did not mention
what will happen if A gets the input 1. So A is my starting state and if I get input 1,
that means 1 is the first digit. And should that be accepted or not? No, it should not be
accepted. I should accept only those strings which start with 0. So if it starts with 1,
what will happen? I'll send it to another state, which I call state C. Okay, I send it to another
state called state C. When the input is 1, when the input is 1, it goes to state C and
in state C, after reaching state C, whatever input I get in state C,
it stays in state C itself, whether it is 0 or 1. Okay, so if a string starts with 1,
this is my starting state, if it starts with 1, it goes to state C. And after reaching state C,
whether it is 0 or 1, whether you get 0 or 1, it stays in state C itself. And it cannot go back
to this final state anymore. Okay, it cannot go to this final state anymore. So this kind of state
is known as dead state, dead state, or it's also known as trap state, trap state. Why is it known
as dead state or trap state? Because once you reach here, it is trapped over here. It cannot reach
the final state anymore, which is B. Okay, and when a string cannot reach its final state,
that string will be rejected. Okay, so now my DFA is complete, because I've already mentioned in A,
if I get 0, it goes to B, it gets 1, it goes to C, it's complete. And in B, whether it is 0 or 1,
it stays in B itself. And in C, whether it is 0 or 1, it stays in C itself. Now my DFA is complete.
Now I've designed the DFA for the set of all strings that starts with 0.
Okay, now let us check if this is correct. Let us take a few
two examples to see if this is working. So in my first example, let me take an example,
I want to check the string 001. Okay, so I'm going to check for the string 001. So it always
starts from my initial state, my initial state, initial state, which is A. I start from state A.
All right, because A is my initial state, and I get input, I give input 0. On getting input 0,
what happens? A goes to B. A goes to B. And the next input is 0, again. So I am right now in
state B, right? And if I get input 0, what happens? B, it stays in B itself. It stays in B itself.
And then the next one is, the next input is 1. So what will happen? I'm in state B,
and if I get input 1, what happens? It still stays in state B.
Right? And here, I raise the end of the string. And at the end of the string, what is my position?
I'm in B. I'm in B. And B, is it the final state? Yes, it is the final state. B is the
final state. Right? So since B is the final state, this string should be accepted. Why?
It could start from the initial state, and it reached the final state. Since it could reach
the final state, this is accepted. All right, now let's take another example.
Example number two is 1, 0, 1. Again, I start from my initial state.
What is my initial state? It is A. And I get the input 1. 1 is the first input. And on getting
input 1, where does A go? It goes to state C. It goes to state C. And I'm in state C. And the next
input is 0. So on getting input 0, what happens? I'm in state C. And when state C gets input 0,
what happens? It stays in C itself. It stays in C itself. Okay? And what is the next input?
It is 1. So what happens when I get input 1? I'm in state C. Right? And when I get input 1,
what happens? It stays in state C. Still stays in state C. And now I raise the end of the string.
And where am I at the end of the string? I am in state C. I'm in state C. And is C the final state?
No, I don't see any double circle around here. That means C is not the final state. C is not
final state. So since this string started from the initial state, but could not reach the final
state, this string is not accepted. It is rejected. So we see that when the string,
when this string started with 0, it was accepted. But this string, as it started from 1, it was
not accepted. So we have successfully designed a DFA for all strings that starts with 0. And these
examples are the proof for that. So I hope that was clear. In the next lecture, we will be seeing
some more examples. So thank you for watching and see you in the next one.
