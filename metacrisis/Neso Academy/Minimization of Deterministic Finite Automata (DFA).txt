Hello everyone. In this lecture we will be studying about minimization of DFA. We have
already studied about DFA, we have also studied about NFA and we have also studied how to
convert NFA to DFA. And in this lecture we will be studying about minimization of DFA.
But what is minimization and why is it required? Minimization of DFA is required to obtain
the minimal version of any DFA which consists of the minimum number of states possible.
Alright, so what does this mean? Let us take a simple example to explain this definition.
Suppose you are given the task to design a DFA, any DFA. And then you design this DFA
using 5 states. Alright, and your friend designed the same DFA using 4 states. Both the DFS
are correct, both the DFS perform the exact same task but one of them is designed using
5 states, another is designed using 4 states. Both of them are correct. But here we see
that the same DFA can be designed using a lesser number of states. Now which one do
you think is more efficient? 5 states DFA or the 4 states DFA? Obviously it will be
the one with the lesser number of states. So we want to design the DFA using the minimum
number of states possible that is known as the minimal version of any DFA. Now if you
try to design a DFA directly in such a way to get the minimal version it may be difficult
for you. It is not impossible but it may be difficult. It is possible only after you
practice and practice. But there is a way of minimizing a given DFA. Given a DFA you
can apply some technique and minimize it and make it to the minimal version. And that
is what we are going to study in this lecture. So how can we minimize DFS? So let us say
that you use these 5 states 1, 2, 3, 4, 5. You have these 5 states and you want to minimize
this DFA. That means you want to reduce the number of states but keep the DFA performing
the same thing. So how can you do this? What you can do is you can combine 2 states. Let
us say these 2 states you combine them together and you make this a single state. And then
now you have 1, 2, 3, 4 states. So that is how you can minimize it. But how can you simply
combine 2 states? You cannot just simply combine 2 states. There is a condition when
you can combine 2 states. And what is that condition? 2 states can be combined only when
these 2 states are equivalent when they are equivalent. Now when are 2 states said to
be equivalent? What is the meaning of equivalence? 2 states a and b are said to be equivalent
if a on getting a particular input string x. Here x is any input string. So if the state
a on seeing the input string x goes to a final state. And at the same time if state b also
on getting that same input string goes to any of the final states then a and b are said
to be equivalent. Or if a on getting an input string x does not go to the final state and
also b on getting the particular input string x does not go to the any of the final states
then also a and b are said to be equivalent. And this will become more clear to you when
we take some examples. And now what we have to study is types of equivalence. There are
some different kinds of equivalences like 0 equivalence, 1 equivalence, 2 equivalence
and so on. So next we will be seeing what is that. So here we see that if modulo x equal
to 0 this means that if the length of the string x here we have taken x as any input
string if the length of that string x is 0 then a and b are said to be 0 equivalent.
And if the length of x is equal to 1 then a and b are said to be 1 equivalent. And if
the length of string x is equal to 2 then a and b are said to be 2 equivalent. So in
general we can write that if the length of the string x is equal to n then a and b are
said to be n equivalent. Alright so these are the type of equivalences that we have.
And we already studied when are two states a and b said to be equivalent it is with these
conditions when on seeing a particular input string x if both a and b either goes to the
final state or it does not go to any final state then they are said to be equivalent.
And why did we need this equivalent property? We needed in order to combine the states in
order to reduce the number of states to get the minimum number of states possible in order
to design the minimal version of any DFA. So this was the theoretical explanation and
in the next lecture we will be seeing an example which will make it very clear to you. So see
you in the next one with an example.
