Hello everyone, welcome to the next lecture in the course period of computation and in
this lecture we will be seeing one more example of how to construct a DFA.
Alright, so let's get started.
Okay, so here is the task that we have to perform.
Construct a DFA that accepts sets of all strings over 01 of length 2.
We have to construct a DFA that accepts the set of all strings over 01 of length 2.
Okay, so let's see how we can do this.
But before that, let's see what our alphabet set here is.
0 and 1.
It's already mentioned here, it's 01.
And what will be the set of strings in our language?
Our alphabet set is 01 and all the sets of strings over 01 of length 2.
So what are the set of all possible strings of length 2 over 01?
They are 0, 0, 0, 1, 1, 0 and 1, 1.
Okay, so we should construct a DFA that accepts 0, 0, 0, 1, 1, 0 and 1, 1.
These are the only four inputs that should be accepted by the DFA that we are going to
construct and it should reject all other strings.
So let's see how we can do this.
Okay, so to start off, we always need to start with the initial state or the starting state
and let me call it A. A is my initial state or starting state.
And how do I indicate that it is the initial state or starting state?
By this arrow.
This arrow which comes from nowhere pointing to state A indicates that A is the initial
state or starting state.
Okay, now we have to mention what happens if A gets the input 0 or 1.
So here it does not matter what is the starting string.
It could be either be 0 or it could either be 1.
The only condition is that it should be of length 2.
So whether I get input 0 or 1, I send this A to the next state which I will call B. Okay,
if A gets the input 0 or 1, it goes to the next state called state B. Okay, so at this
point when I reach this state B, what is the length of my string?
The length of my string is 1.
Why?
I was in state A and I just came to the next state, first state, second state.
So I just came here, so I got input either 0 or 1.
So the length of my string is 1 at this point in B. Okay, so now we have to mention what
happens if I get either input 0 or 1 in state B. Again, the order does not matter.
So I send this B to the next state which I will call state C. Whether I get input 0 or
1 in state B, I send it to the next state which I call state C. And at this point when
I reach state C, what is the length of my string?
Here when I came from A to B, the length of my string was 1.
When I go from B to C, what is the length of my string?
It is 2 because I have already got 2 inputs.
So and the DFA that we construct should accept all strings of length 2.
So if it reaches here, the length is 2.
That means that should be the accepting state or the final state.
So I have to put a double circle around this C indicating that this is the final state.
Right?
So here at this point the length of my string is 2 and that is the final state or the accepting
state.
Well and fine.
Okay, but is this DFA complete?
No, it's not complete.
Why is it not complete?
Because I have already mentioned what happens if I get 0 or 1 input for A. I have also
mentioned the same thing for B. But what about C?
C is not complete.
I did not mention what happens if I get an input again in C.
So what happens, whether I get input 0 or 1 in state C, I will send it to another state
which I will call state D. Okay, whether I get input 0 or 1, I send it to state D. And
in the state D, this also is not complete because I did not mention what will happen
to state D, whether it gets 0 or 1.
So I give a self-loop to state D saying that whether I get input 0 or 1, it stays in state
D itself.
Okay, it stays in state D itself.
Now what is the meaning of this?
So at this point when I reach state C, I already got the length of my string as 2.
Now if I get another input, the length of my string becomes 3 and that should not be accepted.
So it goes to this state D. And after reaching state D, whatever input you get, it stays
in state D. And from state D, there is no possibility of coming back to this state C
which is the final state.
So if anything goes out of this state C, it stays here and it is trapped here, not being
able to reach the final state anymore.
So any string of length more than 2, it goes to state D and it is trapped here and it will
never be accepted.
So this state D here is known as the dead state.
It is known as dead state or it's also known as trap state.
Okay, so now my DFA is complete because I have mentioned for every state what happens
when I get a particular input either 0 or 1.
Now I have successfully designed the DFA that accepts sets of all string over 0, 1 of length
2.
Alright, I hope that was clear.
Now let's take a few examples and check if this is working, if this is correct.
So here we'll take a few examples.
So for my first example, let me check the string 0, 0.
So 0, 0 should be accepted actually, right?
0, 0 is present here and it is of length 2 so it should be accepted.
So let's see if it will be accepted or not.
So we always have to start with our starting state which is state A. This is my state A,
I'm starting from here and the first input is 0.
So I get input 0 in state A and what happens when A gets the input 0, it goes to state
B. Alright, it goes to state B and what is the next input?
The next input is again 0, right, 0.
I'm in state B right now and I get input 0.
So in state B if I get input 0, where does it go?
It goes to state C. It goes to state C and now I've reached the end of the string and
at the end of the string I am in state C. Any state C, the final state, yes it has a
double circle which means it is the final state.
Now since state C is the final state, this is accepted.
Whenever a string reaches the final state, it shows that it is accepted.
So 0, 0 is accepted, right.
Now let's check another one, let's check for, alright we check for 0, 0.
Let's check for 1, 0 now, 1, 0.
Again I start from my initial state A and the first input is 1.
So when getting input 1, what happens to state A?
When getting input 1, it goes to state B, right.
And now the next input is 0.
So what happens?
I am in state B and I get input 0.
I am in state B and I get input 0.
It goes to state C, goes to state C and I have reached the end of the string and at the end
of the string where am I?
I am in state C. I am in state C and is C the final state?
Obviously it is.
It is the final state.
So this is also accepted.
Why?
Because it reached the final state.
So far so good.
Okay now let's check for a longer string which is 0, 0, 1.
Let's see if this will be accepted or not.
Again I start from my initial state A. First input is 0.
So I get 0, what happens?
In A if I get 0 it goes to B, goes to B and now I am in B and the next input I get is
again 0.
So when I get the input 0 in B it goes to state C, right.
And again I have one more input here which is 1.
So I am in state C and when I get input 1 in state C what happens?
It goes to state D. Now I have reached the end of the string and where am I right now?
I am in state D. And is D the final state?
No, there is no double circle here that means D is not the final state.
Not final state.
So 0, 0, 1 is not accepted.
Alright now let's take one more small example for the last.
Let's check for just 1, okay.
My string is 1.
I start from A which is my initial state or starting state and I get input 1.
I get input 1.
So when A gets input 1 it goes to state B and that is the end of the string and I am
at state B at the end.
And is B the final state?
No, there is no double circle around B.
So B is also not the final state.
So 1 is also not accepted.
So we see that whenever our string was of length 2 like here 1, 2, 1, 2 it was accepted
and whenever it was of length other than 2 like for example here it was 3 it was rejected.
Here it was just 1 it was rejected.
So we have successfully constructed a DFA that accepts all sets of strings over 0, 1
of length 2, okay.
So I hope that was clear.
I hope you understood.
So thank you for watching and see you in the next one.
