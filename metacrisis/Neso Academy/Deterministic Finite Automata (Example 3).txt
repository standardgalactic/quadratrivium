Hello everyone, welcome to the next lecture in the course theory of computation and in
this lecture we will be seeing one more example of deterministic finite automata.
In order to make DFA clear to us, we need a lot of practice.
We need to practice designing DFA's and that is why I am stressing more on the examples.
So in this lecture we will see how to construct one more DFA.
Alright, so let's get started.
Okay, so here is our task.
Construct a DFA that accepts any strings over AB that does not contain the string AABB in it.
So we are to construct a DFA over the alphabets AB and it should accept all strings over AB
but it should not contain the sequence AABB in it.
This sequence should not be present.
It should always reject whenever this sequence is present and it should always accept all other sequence.
So how can we do this?
So here our alphabet sets or our inputs are A and B.
Okay, A and B are our alphabet sets or our inputs.
Okay, so when we see this question we may think how can we do this?
This seems to be a very tough job. How can we do this?
Okay, it's not a very tough job.
We can simplify this problem.
Instead of doing this right away, we can simplify this problem and make this problem simpler.
So let us try to design a simpler problem.
Let us modify this question in order to make it simpler.
Now how can we do this?
Okay, so here is how we simplify this problem.
Instead of constructing a DFA that does not contain AABB in it,
let us construct a DFA that accepts all strings over AB that contains the string AABB in it.
I think that is more simple.
We can construct a DFA over AB that contains the string AABB in it.
Alright, let us first construct this.
This seems to be, this sounds to be more simple.
So let us construct this and later we will convert it to this form.
Alright, so let's see how we can do this.
So whenever we start constructing a DFA, how do we first start?
We need to have a starting state.
So here I'll have my starting state as A, I'll call it A,
and I give an arrow this way indicating that this is a starting state.
And A can either get inputs A or B, right?
So what happens when it gets input A and what happens when it gets input B?
So if A gets the input, small letter A, then what happens?
I will send it to the next state which I will call state B.
Why?
I need to get this sequence AABB, right?
It should accept everything that contains this sequence.
So when A gets the input small A, it goes to B.
Yeah, I want it to proceed. Why?
Because I am trying to get this sequence, okay?
And what about when A does not get, when A gets the input small B, right?
If A gets the input small B, I let it stay in A itself.
If it gets B, it stays in A itself because B should not be my starting letter.
It should be A.
So if it gets A, it proceeds to the next state.
But if it gets B, it stays in A itself.
Okay, now I got A and I came to state B.
Now what happens in state B?
In state B, if I get the input A, what will happen?
And if I get the input B, what will happen?
In state B, if I get input A, I send it to the next state which I call state C.
Now why do I do that?
Because I want the sequence AABB.
So I get the first A and I got the second A, right?
This is the second A.
So I proceed to the next state.
But what if B gets the input small B, then it should go back to state A.
Why?
Because after getting A over here, if I get another B, what happens?
I got A and if I get a B, then what happens?
My sequence becomes AB.
No, I don't want AB.
I want AA.
AA is what I want, not AB.
So if I get B, I send it back to state A.
So it will start again from here.
So my state B is complete.
I have already mentioned what happens if it gets A.
If it gets A, it goes to state C.
If it gets B, it goes to state A.
Okay, now coming to state C.
In state C, how should I proceed?
I got AA.
Okay, now if I get B in state C, I should proceed to the next state.
So I'll call my next state as state D and what is the sequence that I want?
AABB.
So I already got AA over here.
Now the next one is B.
So if I get B, if I get B in state C, I let it proceed to the next state.
Okay.
I let it proceed to the next state.
And what if I get input A in state C?
What will happen or what should I do?
So in state C, if I get input A, where should I send it?
Should I send it back to B or should I send it back to A or should I keep it in C itself?
What I should do is I should analyze it this way.
How did I come to state C?
I came to state C from A to B and then from B to C.
So we know that on reaching state C, we already got these two inputs.
A and A.
I already got AA.
And if I get B, I go to state D.
But what if I get A again?
If I get A again, I don't need to send it back to state B or state A.
Why?
That is because I already got 1, 2, 3.
And I could get B as my next.
Right?
In the next one, I could get B.
So that is why what I should do is I should keep it in state C itself.
Right?
Because if I am in state C itself, then I can count from here AAB.
And if I get another B, it will be accepted.
I hope you are getting my point.
So I keep this C in C itself if the input is A.
So on reaching state C, if I get input B, I proceed.
Because yes, I can proceed.
But if I get input A, that means it could mean something like this.
Right?
I get another A.
So I keep it in A in this C itself.
Because in the next input, I may get a B.
So I keep it in C itself.
So I hope that was clear.
So my C is complete.
I already mentioned what happens if I get A or B.
Now coming to D.
So on coming to D, if I get input A, what will happen?
If I get input B, what will happen?
So on reaching D, how many inputs did I get?
I got AAB.
So I am here AAB.
Now on state D, if I get the input B again, then I can proceed to the next state.
Which is state E.
Right?
And if I get B in state D, what is the condition of my input?
It is AABB.
So this string is completed.
So if I get B, it goes to state E and state E should be my final state or accepting state.
State E should be my final state or accepting state coming from D.
So I get AABB.
AABB.
And when I reach here, this should be the final state.
Right?
So that is about state D if I get input B.
Okay.
Now what will happen if I get input A in state D?
We already mentioned if it gets input B, it goes to the final state.
But if I get input A in state D, where should I send it back?
Should I keep it in itself?
Should I send it to C, B or A?
Let us check it out.
How did we reach state D?
What is the condition or state of our input when we reach state D?
We came from A and we got another A and we got B.
So we got AABB.
This is our condition AABB.
Now our question is if we get A again in this state D, what will happen?
If I get A again over here, what will happen?
I get this sequence AABB.
Now even if I get A here or B here, whatever I get here, I am not able to get this sequence anymore.
Right?
I cannot get back this sequence, whatever proceeds from here.
So I have to send it back to this position where I got my first A and then I have to try and see if it can get this AABB again.
Right?
I have to send it back to the position where I got my first A and where did I get my first A?
My first A I got over here.
So on getting first A it reached state B.
So I have to send this D back to state B.
I have to send my D back to state B if I get the input A.
Right?
So now my state D is complete.
On getting A it goes back here, on getting B it reaches final state E.
Now what is left?
Our final state is left.
We did not mention what happens if we get A or B in our final state.
So in our final state, okay so when we reach our final state we already got the sequence AABB, AABB.
Now it does not matter what we get after that.
Either we get A or B, it does not matter.
It stays in the final state.
Right?
It stays in the final state A or B.
It stays in the final state.
So that completes our DFA which accepts all string over AB.
That contains the string AABB in it.
Alright?
Okay, so is that the end of our problem?
No, that is not the end of our problem because we have now constructed the simplified problem.
We have constructed a DFA that accepts all string over AB that contains the string AABB in it.
But our main problem was to construct a DFA that accepts all strings over AB that does not contain the string AABB in it.
Now how shall we do this?
Now we have this.
We have this DFA over here which accepts all string that contains AABB.
Now we need to flip this and make it in such a way that it does not accept AABB in this.
Now how can we do this?
How can we do this?
This can be done in a very simple way that is by flipping the states.
We can achieve this by flipping the states.
What are we going to do?
We are going to flip the states.
Now what do I mean by this?
What I mean by this is make the final state into non-final state
and make the non-final states into final states.
This is what I mean to flip the states.
Flip the states means to make the final states into non-final states and make the non-final states into final states.
In that way we can make this DFA to accept all strings over AB that does not contain the string AABB in it.
Now let's see how we can do this.
This is very simple.
All these states here which are not final states like A, B, C and D make them final states.
The last state E which is a final state make it a non-final state and all the other things remains the same.
Then we can achieve a DFA which was mentioned.
So let us draw this.
A was a non-final state so I make it a final state.
How?
By putting a double circle around it and this is the starting state.
And B was also not a final state so I make it a final state.
I put a double circle around it and C was also a non-final state.
I make it a final state by putting a double circle and C then D which is also a non-final state.
I make it a final state.
I put a double circle and E was a final state.
I will make it a non-final state.
I will give it only one circle.
So all the rest of the things it remains the same just copy it down just as it was.
It is all the same.
So this is how we can do it.
Okay C stays here and C goes here and D goes to B and here D goes to E.
And E stays in itself and let us mention the inputs.
Everything same just copy it down.
B here, A here, B here, A here, B here, another A over here and B here and here it is A and B.
So this will now accept any strings over A, B that does not contain the string A, A, B, B in it.
So we knew that when it reaches this E it contains A, A, B, B right and it was accepted for this case.
But in this one whenever it contains A, A, B, B it reaches state E which is not a final state.
So that string will not be accepted and all other strings will always be accepted in these four accepting states.
So this is how we design a DFA for this kind of a problem.
So whenever you get this kind of a problem try to make it simple and then try to flip it and make it work for the main problem.
So I hope this was clear and please try to practice more of these kind of examples to make the DFA clear to you.
So I hope this lecture was useful to you. Thank you for watching and see you in the next one.
