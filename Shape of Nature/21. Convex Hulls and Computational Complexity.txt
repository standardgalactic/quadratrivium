Welcome back and thanks for joining me once again.
We have been looking at point clouds in the plane.
Now we have seen mathematical applications of point clouds.
Given a collection of points in the plane, we have connected the dots to get triangulations
and this led to the Delany triangulation, which is useful for terrain reconstruction.
We have drawn lines between the points to get Voronoi diagrams and we have also seen
how sort of the dual of these is the Delany triangulation of the Voronoi diagram at the
end of the day is really measuring closeness and so is the Delany triangulation.
Well this lecture looks at a more basic feature of a point cloud.
We want to find the smallest convex region which contains the points.
Let me say that again.
We want to find the smallest region containing the points which has to be convex.
Now while thinking about this problem, we venture a bit deeper into the mind of a computer
scientist.
As you have seen from the past few lectures, we have been thinking about the world from
a computer scientist perspective a little by little.
Now we actually jump in.
Today as the lines between mathematics and the natural sciences are being blurred, between
DNA, chemical bonds, string theory, turns out the lines between math and the computational
sciences are also being blurred.
So what are convex hulls?
What are they?
Well given a point set, its convex hull is the smallest convex set that contains the
point set.
Now recall what a convex set is.
A set is convex if the line segment between any two points in the set is contained in
the set.
So given a point cloud, let's take a look at some of the examples to see what we get
of sets containing this.
Here we see a collection of points in the plane by point cloud and here is a set that
we have outlined which contains the points.
But notice this set is not convex.
These two points have a line segment connecting them but that line segment is not in the set.
Well what about this?
Well this set right here is convex and it contains the points but we can imagine smaller
ones that also contain the point and be convex at the same time.
In fact the best way to see what a convex hull is is the following.
You take your point set in the plane and pretend they're pegs and you actually hammer
the pegs into the plane.
Now take a giant rubber band containing all the points and let it go and it snaps onto
the convex hull as you see in this picture.
So given this point set, the convex hull is the rubber band that snaps around these points
and it's the smallest convex set that contains all these points.
Thus we can see here the convex hull of a point set must be a convex polygon.
Now triangulations are useful, we talked about that, Voronoi diagrams are useful, indeed
we talked about that but why would we care about convex hulls?
Well they are extremely useful if you're interested in fast data processing.
Now consider objects in facial recognition.
Imagine that the government, imagine that security is trying to find out where a lost
child is or where a criminal is and they have data that's coming in from airports.
How can you use facial recognition software to find out where that child is?
Which airport they're going through?
Well the simplest way to do it is look at basically the outline of your face, basically
the convex hull of the information on your face.
Now once the convex hull has been computed fast, then maybe there are 50 cases left over
for the computer to look through in a more detailed format because the convex hull is
50, look close to what the person they're trying to find out is.
Now once that 50 has been narrowed down from the millions that go through an airport, then
you can use different set of data analysis to look inside the hull to see which of those
cases it is.
So a convex hull method is extremely useful for narrowing down from a huge pool of data
to get the rough boundary structure of what's going on.
Convex hull is also used for collision detection in robot motion planning.
Imagine you are the owner of a factory and you have robots that move with their arms
in order to build cars or different equipment.
As the robots move, one of the most important things you care about is that the robots don't
collide with one another and destroy each other.
One way to ensure no collision is to make sure that the convex hull of the robotic arm,
the smallest convex region containing the robotic arm, is away from another convex
hull of a different robotic arm.
Now if the convex hull is the region that contains them, don't touch each other, then
anything inside is guaranteed not to touch each other also.
So that's one way of doing it.
Also consider collision detection in computer graphics.
Imagine you have a car in a computer software program or a video game that flips over and
comes and collides with another car.
But one way of measuring quick collision detection is not to look at all the intricate
parts of the car itself, but just get the rough idea of what the car is, the convex
hull, the three-dimensional structure.
And if the convex hulls don't touch each other, there's going to be no collision.
And if the convex hulls do touch each other, then you can look inside more detail, just
like you look inside the convex hull of a face for facial recognition software, to see
what's going on, to see if there's really a collision at that point.
What does it mean to find the convex hull?
Well, amazingly, this question depends on the perspective, depends on the person asking
it.
Now, a mathematician asks, what does smallest convex set mean?
A mathematician goes to the heart of the definition of convex hull itself and says, if you want
me to find the convex hull, I need to understand what smallest means.
Well, smallest means that it is contained in every convex set that contains the cloud.
That's what the smallest convex set means.
It's so small, it sticks in, it is contained in every convex set that's out there.
Thus, from a mathematician's perspective, our answer of finding the convex hull is
the following.
The convex hull is the intersection of all convex sets containing my point set, containing
my point cloud.
That's great.
The following, from a mathematician's perspective, are all equivalent to the convex hull of a
point set, which we can actually prove.
The convex hull is a convex polygon with the least area that contains your point cloud.
The convex hull is also a convex polygon with the least perimeter that contains your point
cloud.
So, a mathematician can come at it from a theoretical perspective in terms of proving,
in terms of talking about intersections of sets.
But how does a computer scientist think of this problem?
A computer scientist asks, what does finding the convex hull mean?
A computer scientist isn't going to intersect every possible convex set out there.
There are infinitely many sets, and they're not going to go through all of them and take
the intersection.
That's silly.
From a computer scientist's perspective, finding the convex hull means actually finding
the pegs that the rubber band snaps around.
That's what's exciting, that polygon.
All the points inside of the polygon, they do nothing to the convex hull.
It's only the key vertices called the hull points, or the hull vertices.
The key vertices from the point cloud is what a computer scientist is excited about.
Now, if we can find these points from the list of all points in the cloud, we have found
the convex hull.
So, let's actually begin our adventure of actually finding the convex hull from a computer
scientist's perspective.
Now, consider this point set in the plane.
If you look at this set, why is finding the convex hull hard?
Why is finding the hull points hard?
Well, first of all, it feels quite easy to do so.
Look at this.
We already know a point there, there, there, there, there, and maybe this one right here
could be on the hull.
All the other points you feel are sort of inside there.
The problem with us doing this is that we are humans, and our brain is the computer.
In fact, our computer, our mind, has already solved the problem for us in a visual perspective.
From a computer scientist's perspective, we are only given not a visual picture where
we can use our mind to find the hull points quickly, but from a computer scientist's perspective,
we're only given a list of coordinates.
Take a look.
This exact point set looks like this from a computer's perspective.
1, 5 is a point.
2, 1 is another point.
7, 1 is another point in the plane.
Can you look at these points and say, aha, 2, 1 is on the hull, but 2, 3 is not.
And 7, 1 is on the hull, but 7, 6 is not.
Do you see how difficult the problem becomes, seeing from a computer's perspective, not
from a human's perspective, with the mind at work?
So we need a method to convert the list into just the hull list, to look at this list and
draw just the hull points.
We need a way of finding this convex polygon.
Now we care about algorithms in computer science, a blueprint of instructions to get the hull.
Now we have used algorithms to find triangulations and Voronoi diagrams, and now we are about
to build an algorithm to find the convex hull.
So consider the following point cloud here.
Let's try the incremental algorithm.
We've seen the incremental algorithm before, where you put one point at a time to find
the entire object when we came up with triangulations, and when we came up with Voronoi diagrams.
So how will the incremental algorithm work in our case?
The first thing we do is we order all our points in the plane from left to right.
And once we do this, here's the structure of finding the convex hull.
The first three points from our ordering from left to right form a triangle.
This is the convex hull for these three points.
Well, let's throw the next point on our list, point number 4.
And if we do this, we see that point number 4 must be on the hull.
Why must it be on the hull?
Because it is the extreme, it is to the right of everything.
So the rubber band is going to snap there.
So we include point 4 on the hull, and we also check to see by including this point,
have any other previous points been excluded, do we need to remove them?
So if we look at this, we throw point 4 on the hull, and we see that 1, 2, 3, 4 are on
the hull.
Fantastic.
So we put point 5 on the hull.
It's included because it's the next point in the incremental algorithm.
And notice if you snap a rubber band, all of them are on the hull.
Great.
I put 6 on the hull, and when I do this, notice that 4 now becomes in the interior.
So I remove 4.
I put 7.
Things are great.
I put 8.
Now I have to remove 6, because now 6 is also in the interior.
I throw in 9, and by doing this, I remove 5 and 7.
I put 10, and I finally put 11, which makes me remove 10.
And at the end of the day, if I keep track of all the points I've put in, and all the
points I've removed, I get the points 1, 2, 9, 11, 8, 3 to be points on the hull.
Now what does a mathematician say when you give this algorithm to them?
First, they're happy.
They're excited.
You have a solution.
They're excited that you found the points on the boundary, the hull points themselves,
and a mathematician, like myself, would say, congratulations, we're done.
Let's get a burger.
But we've found an algorithm that gives us an answer.
This works for any point cloud in the plane, and it seems like this is exactly what we're
looking for.
But from a computer scientist perspective, we ask, can we do better?
Now a mathematician struggles with this and says, what do you mean better?
You've already found exactly what you're looking for.
Well, consider the following point cloud.
If we look here, notice that as we incrementally throw these points in, you create an entire
complex convex hull structure in the middle, but right when you get to the end, when you
see these last two points in your ordering, remember we order from left to right, we throw
these last two points in, by doing that, all our work in the middle is wasted.
We don't need any of those points to be on the hull.
They're all thrown away, and we only get three points.
The first point, the last point, and the point right before the last point.
Everything else is thrown away.
So you see, our algorithm that builds the hull had to do a lot of extra work and has
nothing to show for it.
So computer scientists say, can I save time?
Can I find a better algorithm?
Well, before we say better in a gut check kind of way, we need to actually quantify as a
scientist what it means to be better.
Remember how we similarly quantified the idea of what a dimension of an object was, or an
index of a fixed point?
We need a way to bring rigor to algorithms.
Well in computational convexity theory, there's a terminology called the Big O notation, which
is exactly the tool needed to check what it means to be better.
Now this Big O measures how fast an algorithm works, but the speed is not based on actual
time.
At this time, changes with the newest computer hardware that comes out there.
But it's not based on the computer you have, but the number of steps needed to finish your
algorithm.
So we're going to explain the notation of this Big O using a simple example.
Assume that you have n points in the plane, and the number of steps to compute a certain
operation based on n points in the plane, the number of steps it takes, is 3n to the
fourth minus n squared plus 23.
So if you have n points, n3n to the fourth minus n squared plus 23 is the number of steps
it's going to take for you to perform your operation.
Now if we look at this, notice that as n increases, as you look more and more points, then the
term n to the fourth absolutely dominates all the other terms in terms of processing
speed.
For instance, if you're looking at 1,000 points, when n equals 1,000, the term 3n to the fourth
will be 3 million times as large as the term n squared.
In other words, n squared just fades away.
Although you're subtracting n squared, it doesn't matter compared to something 3 million
times bigger.
Thus, in terms of the number of steps in complexity, we can comfortably ignore terms like the negative
n squared and the plus 23, which is going to do nothing for us compared to the power
house of 3n to the fourth.
And by a similar argument, the coefficients, the 3 in front of the 3n to the fourth, really
doesn't do anything in terms of growth rate, it multiplies everything by 3.
But it's the n to the fourth that has the power of changing the number of steps in an
amazing way as you change n.
We therefore say that this algorithm has order n to the fourth, and we write big O n to the
fourth.
Here are a few classic examples of speeds of algorithms.
Let's add two numbers.
How fast in the big O notation is this?
Well, if you add two numbers, there's only one step needed to do it.
So this is big O, just one, just one, just the constant one.
Well, what about finding a number in a list of n unordered numbers?
Somebody gives you a list of n numbers, they're not ordered at all, and somebody says somewhere
in here is the number 72, go find it.
Well, how fast is this?
Well, basically you have to go through the entire list to find that number.
Your worst case scenario might be that that number you're looking for might be the last
one.
So the big O notation for this is n.
That's the speed of this find.
But what if these numbers need to be sorted?
And what if you had the job of sorting the list?
How many steps will it take for you to sort?
Well, a classical result from complexity theory from geometry, computational geometry, shows
that the sorting takes n log n time.
Now notice when I introduce this log n, the way log n, the logarithm of n, fits in in
terms of the classical polynomials that we know is as follows.
You have a constant one, then you have n, which is how fast you can do it in n steps.
And log of n turns out to be actually between one and n.
It's not as many steps as n, but it's more steps than one.
So for example, if you have an ordering, you can have an ordering of n speed and an ordering
of n times log n, which is bigger, and an ordering of n squared, which is even bigger.
So now that we have a feel for how this big O notation works in terms of looking at the
worst case scenario, let's now compute the speed for the incremental algorithm, something
we've already looked at.
What's the first thing we need to do for an incremental algorithm?
Remember how we needed to sort our points in order from the left to the right.
Well sorting points is n log n, that's how much complexity time it takes, that's how
many steps it's going to take based on n points.
Well after constructing our first triangle, what did we need to do?
We needed to check the next point and see where it fits in with the previous step.
That's the first three, excuse me, thus the first point has three points in it, needs
to check with, and the next point, the fourth one, you have to check to see how it compares
with all the other previous points to see which ones are in the hole in which ones aren't,
and the next point after that point number five, you need to check all the points before
that, to see which ones are in the hole in which ones are not.
So once we have the triangle, the next point checks the points before, next point checks
the points before, and the next point checks the points before, and we have to do all of
this till we get to the last point.
Thus, we have three steps for the next check,
four steps for the next check,
five steps for the next check, on and on and on,
and we get three plus four plus five plus all the way to n.
And if we actually simplify this,
this becomes one-half times the quantity n squared plus n minus six.
But remember what the Big O notation really gets at.
It only cares about the most powerful term here, which is n squared.
The one-half, this is a coefficient we can ignore.
So the complexity time, the speed of this, is Big O n squared.
Now, since n log n was the sorting that it took,
and n squared was actually the constructing that it took,
we did this independently.
First, we sorted, and then we constructed.
And since they're independent of one another,
we picked the fastest of these two things.
That's the worst-case scenario.
Thus, the speed of the entire incremental algorithm is n squared.
The n log n sorting step doesn't matter as much,
because you have to spend n squared time actually building the convex hull.
Now, computer scientists are always looking for ways
to make things faster from an algorithmic speed viewpoint.
And there are two key ways to do this.
One way is that they actually come up with better data structures.
In other words, better ways of storing the information in computers,
using arrays and pointers and data management.
You want to know, if you're looking at the algorithm to find the hull,
how the points are actually saved into the system
so you can go and retrieve points in an elegant way.
That's data structures.
The second way is to come up with better algorithms themselves,
creative ways to obtain results using different techniques.
And since I am in love with shapes,
and the course is focused on geometry and topology,
I'm not interested in data structures.
But I am interested in geometric algorithms that can improve speed.
Can we use geometry itself to help us build a better algorithm?
Note that this creativity of coming up with new algorithms
is a different sort than just writing a mathematical proof.
One is not better than the other,
just different ways of pushing the frontiers of knowledge.
Now, let's consider some other convex hull algorithms
that use geometric insight.
So far, we have just taken a brute force approach
where we just order these points and throw one at a time
and build the algorithm from left to right.
Now, recall that we are not interested in all points of the point set,
but just the hull points, the extreme points.
We're not interested in the points in the middle.
The dream is just to find the points on the shell.
And the incremental algorithm forced us to go through every point.
Is there a way to try to narrow in and just focus on the hull points?
Well, we know one hull point for sure.
Given a point cloud, we look at the bottom rightmost point,
an extreme point out there.
And let's start here.
Let's take a look at this algorithm called a gift wrapping algorithm.
It first appeared in the work of Chand and Kapoor in 1970.
Now, let the bottom rightmost point be our anchor point.
Now, consider the angles formed from this anchor to all the other points in the cloud.
So I look at all the points, I look at all the angles,
and I choose the point which makes the largest angle with the horizontal.
And this becomes my next anchor point.
So I go here and I've created an edge between it.
Now, going to this next anchor point, I again look at all the angles I get from this point,
and I look at the greatest angle I get based on this new hull edge I've created.
Choose that as my next point.
Repeat this process as you can see here.
Starting, going to this next point, going to this next point,
on and on until I come back to where I started from.
So we repeat this procedure until we return to our original anchor point,
and notice that we have literally gift wrapped,
walked around with a piece of string, gift wrapped,
our points are based on the geometry of angles.
Now, why is this any better than the incremental?
Well, let's compute its speed, its complexity.
Now, if we assume our point cloud has n points,
at each anchor point, the angle looks through all the points in the cloud,
which means it has to do n steps because there are n points in the cloud.
However, how many times do I need to do this?
Instead of looking at all the points in the cloud for all points,
like the incremental sort of did,
I look at all the points in the cloud only on the number of hull points.
So if I have n points on the plane and each hull points,
then I only need to look at n times h.
So we see this depends on the geometry of the configuration of points itself.
Take a look at these examples.
Here you see if all my points are on the hull,
then each time I need to look at every single point for every point on the hull.
Thus, I get n points times n searches for each point for angles
to get an n squared case, just like my incremental.
But what if I only have three points on the hull?
Then I only need to do n searches three times.
That's three times n.
But remember, a constant three doesn't really matter for us.
So this is just n, which is glorious.
So if our point cloud looks special for us,
the gift wrapping is a beautiful way to do it.
Now the question is, what if we don't know what a point cloud looks like?
You know, if we know that there are only a few points on the hull,
throw the gift wrapping on it.
Let's not worry about the incremental.
But if we don't know the configuration of points,
then the gift wrapping could be as bad as the incremental.
Can we do better?
Well, Ron Graham asked the same question in the 1960s.
He needed to compute the convex hull of about 10,000 points.
Remember, this is in the 1960s, so this is an intense calculation.
And an n squared algorithm was not fast enough.
His idea is still to use angles, exactly like we did for the gift wrapping.
But instead of calculating the angle at each point over and over again,
sweeping and finding the best angle over and over again,
he just did it once.
Except he needed a beautiful design to get away with it.
So let's take a look at the Graham scan algorithm.
Start with the bottom rightmost point.
Again, as their anchor point, because we know it's on the hull.
And just like before, we are going to scan all the points,
except this time, as we scan and look at the angles we form,
we sort the points based on the angles they form.
So we call this the last point, because the angle is very small,
and call this the most extreme one, the most extreme angle, the first point.
We sort all of them between it.
And what do we do?
We construct the hull based on this sorted list.
If a point makes a left-handed turn, we keep going, and things are convex.
Let me explain.
As you start and go to the first point, we know it's on the hull.
Now, if I go from one to two, I'm making a left turn.
That's great.
If I go from two to three, I'm making a left turn again.
Remember, I'm making it more and more convex, which is what I want.
It's great.
But when I go from three to four, I make a right-handed turn.
And now it's not convex anymore.
So what I do is I delete the previous point.
So when I went from three to four, I delete three, because that's the culprit
that's getting me in trouble.
So now I check to see how the two-four connection is.
So when I go from one to two to four, remember, three's now gone,
I still make a right-handed turn.
That's not good.
So now I delete two.
Now I go from the start to one to four, and now things are great.
So I go from four to five.
It's still making a left-handed turn.
I go from five to six.
It's making a right-handed turn, so I have to delete five.
Then I go from six to start, and I end up with exactly what I want.
One, four, six, and the starting point, my anchor point, is the hull.
So how fast is this algorithm?
Well, let's take a look.
What are the things we needed to do?
The first thing we needed to do was sort all the points based on angles,
and how much pain is involved in sorting, and log n.
That's how much it takes to sort anything of n things.
Well, we then needed to visit each point how many times?
Well, we came to one, we visited one, then we went to two.
Well, it turns out we only visited each point twice,
the first time we went to the point,
and maybe we visited it again if we needed to remove it.
Remember how we came to two first, and then we removed two,
because it made that right-hand turn that we didn't want?
So that's the construction we have.
Each point gets visited twice.
Thus, the travel speed to walk around is 2n.
Each point at worst gets visited twice, but 2n has the same speed as n.
Thus, after we did all the sorting and all this work,
it turned out that the sorting step took n log n,
but the actual work took n.
And we picked the worst-case scenario of these two things,
which is n log n.
So in terms of the incremental, it took us n squared.
In terms of gift wrapping, it took us n times h,
where h is the number of points on the whole.
And now we have n log n, something that's clearly better.
So we ask the question again, can we do even better than this?
Thus far, we have seen these three convex hull algorithms,
and we've used these geometric insights into angles.
Can we do better?
And the answer turns out to be no.
This is the best that we can do.
In 1985, Perperta and Sheamus,
two fathers of the field of computational geometry,
proved that any algorithm which finds the hull points of a point set in the plane
cannot run faster than n log n.
Gram scan is the best.
So let's close with one beautiful question,
which is still open in the field today.
How can we generalize Gram scan for points in three dimensions?
If you have points in the point cloud in 3D,
and you want to build a convex hull around this
to get a convex polyhedron,
can you use Gram scan's ideas and extend it into 3D?
We still don't know how to do it.
I truly hope this lecture was a bit different
and indeed a bit weird and unsettling to you.
Things are seen not from the eyes of a mathematician
as we've been seeing it so far, but from a computer scientist.
And the questions are different,
and thus the notion of creativity is different.
However, underlying it all are geometric machines.
And our next lecture leaves the world of point clouds behind
and moves to the world of patterns and colors.
Stay tuned.
