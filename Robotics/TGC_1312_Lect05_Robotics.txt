What turns a remotely controlled machine into an autonomous robot is self-control.
And where does that self-control come from?
Well, sensors collect information that is coordinated and used to tell the actuators
what to do next.
These sensor-guided movements depend on a controller, the part of the robot that makes
sense of the sensory information and then decides how the robot is going to react.
Now, it's important to realize that a robot controller or microcontroller gives control
to the robot.
We're talking here about the opposite of something like a remote controller for our
television or a handheld controller for a gaming system.
The point is that a robot controller is key to giving a robot autonomy.
In the vast majority of modern robots, the controller is a computer, specially designed
to take as input sensor data and communications from a human operator.
The controller is specially designed to produce output signals for actuators and communications
for a human operator.
Once the controller runs the computer code, it is programmable.
To understand the controller and how it works with the sensors and actuators, let's build
a robot.
We'll bring our tank over and show you where we're headed.
Let me show you the robot we're going to build.
It's a one-eyed Tadro and we'll keep the lights up here for a second and it is going
to flap its tail and swim very slowly and gently across the tank here.
Now, we're going to dim the lights and what happens when we dim the lights is it's got
a single photo resistor, so it's going to change the turning angle of its tail based
on the intensity of the light.
It's kind of swimming straight ahead and now let's watch what happens when we put a light
onto its eye spot.
See how it changes its behavior here.
You can see that it's starting to turn towards that light on that side.
This is a very simple kind of robot.
It's got a single sensor and a single actuator.
In fact, I contend there's no simpler kind of robot that you can build that has less
than one sensor and less than one actuator.
What it does, it responds to the light and it's just following the light around.
We'll take the light off and it's no longer coming towards me, it's going straight again.
This is a really neat example of building a robot that has a piece of embodied intelligence
here.
This behavior is based on the exact arrangement of the body, the shape of the tail, where
the sensor is, and then what the programmer has put into the controller as well.
It's getting to the end.
I'll show you one more time.
We'll do light up here onto its photoresistor.
See what happens?
Look at that.
It's turning towards the light.
Again, keep it simple, stupid, the kiss principle.
When we keep stuff simple, we can actually understand how it works.
Now to build a tad row, we can use my favorite microcontroller, Arduino.
We'll use the basic model, the Arduino Uno.
You can buy one for about $50, maybe less.
Arduino uses free software that's available at Arduino.com.
Now both the Arduino hardware and the free software I'll show you in a moment are open
source systems.
This means that you can copy, modify, and share your own software and hardware versions
for free and without violating any patents or trade secrets.
Because they encourage sharing, open source systems are a terrific way to build communities
of roboticists who collaborate.
Once you see what's going on here, you'll be able to build a tad row and get it working.
Note that a microcontroller like Arduino is more than just a microprocessor.
A microcontroller is really like an entire computer on a single chip here and it also
includes inputs and outputs and read-only memory as well as buffers.
As for the body we're going to use, it's going to be something right out of the kitchen.
It's just, let me get these screws out of here, it's really just a food storage container.
Now let's get our sensor and actuator working together by way of the Arduino.
The sensor we're going to use here for a tad row is called a light dependent photoresistor.
This is a very simple sensor that changes its resistance to electrical current depending
on how much light is falling on it.
Now let me show you how this works with a multimeter.
I'm going to clip one of the leads of the photoresistor here and then the other one and
then I'm going to turn this multimeter up so that we can read it and actually just make
turning the photoresistor, you can see getting more light on it, the needle changes here.
The resistance is changing and I'm going to put my hand over it now and look at that
drop and so we're reading about 5 or 6 times 100, about 600 ohms of the resistance we have
right now.
So that's really cool, you can see how that sensor works.
So in addition to the input that we're going to need here from the sensor, we have to think
about where we're actually going to connect that sensor to the Arduino.
So let me unclip it here and the Arduino has analog inputs here, we've got ground right
here as well as power being supplied and then we have digital outputs right in here including
some ports that we're going to use for our servo motor in just a second.
So that's what's going to happen for our Arduino.
Alright, one of the things that's great about Arduino is that the hardware and software
are open source as I mentioned.
So I'm going to go grab my computer now, bring it over and we'll put some of that open source
software onto it so we can begin to run things.
The way we communicate with the Arduino is through a USB cable, so let me open up my
computer now and in the Arduino IDE, the development environment, if you go under file and examples
you'll find the programs that I'm talking about here, knob and sweep, they will be under
the servo samples.
So I think what I'm going to do here is load up the sweep program which is going to move
our servo.
Now I haven't shown you the servo motor, but it's sitting right here and we've got
that yellow wire in addition to our power wires which is always indicative that we've
got a servo motor at hand.
Okay, so I've called up the sweep program right here and I've got it connected to Arduino.
Now Arduino is getting power through this cable and you can see that because those LEDs
are lit up.
So I'm going to click on upload on the sweep program and you can see that LED is flickering
right here which tells me that it was just uploading.
Now I have to hook up the servo motor.
I'm going to use one of these yellow jumper wires that I created and I used by the way
wires for this that are solid core and you have to distinguish between solid core and
what is called stranded wire and we use the solid core because you can actually plug it
in here.
So I have to do two things.
I'm going to connect the servo to the 5 volt power supply so I'm going to take the red
which is positive and that's the middle wire here and I'm going to hook that up.
There's a port here that says 5 volts on Arduino and I can just put that solid core
wire in here.
Then I'm going to take another solid core jumper from the black or ground port of the
servo and I'm going to plug it into one of the two ground ports so that's going to provide
the power.
Ah, and I should unplug this before I try to power up the servo.
Now it's in there and now I'm going to use one of these ports for controlling the servo
and it's port number 9 and that's going to provide the pulse width modulated signal to
run the servo motor here.
So I've compiled and loaded the SWEAP program onto Arduino.
So let me show you this in operation.
It should run again if everything goes right here.
We've got a little jerk out of the servo, perfect.
So you can see what's happening here, I've painted one of the horns on this servo dark
so you can see it sweeping back and forth here.
Very cool.
So right away using Arduino we're controlling a servo motor.
This is great.
So we have a connection to Arduino here.
The next thing we need to do is now to hook up the sensor and we need to first of all
build what's called very quickly a voltage divider.
And so a voltage divider takes two different resistors and splits the difference that they
cause in the voltage coming through.
And so in our case by putting a variable resistor in the shape of a light dependent resistor
into that circuit that's going to change the voltage output that the Arduino is going
to read.
So this is a really slick little circuit.
Now I actually have an Arduino that I've already wired up over here and I've just showed you
how this operates.
So I'm going to do this, I'm going to make sure I've got my wiring correct by looking
over here and you can keep track.
And so I need to hook up my, here's my fixed resistor right here and my light dependent
resistor here and they are going to share a yellow cable here.
So I'm just going to do this by not even pulling out the soldering iron which you could do
if you'd like.
I'm just going to twist these together like so and put a little bit of electrical tape
onto those wires to hold them together.
Now if you want your tad row to have any kind of staying power you're going to want
to use solder.
But just to make sure we've got things right we can just do it like this by twisting the
wires together.
Okay so in addition here what we're going to do is take out of the fixed resistor here
we're going to connect up to our 5 volt power supply.
So here what I'm going to do is I'm going to actually unplug that 5 volt power supply
from the servo because I need to hook it up to our fixed resistor and again I'm just
going to quickly twist these things together like so, a little bit of tape and looking
at, helpful when you color code everything and then I'm going to take another black wire
and connect that black wire to the photo resistor or light dependent resistor like so, kind of
looks crazy doesn't it?
Alright so from this voltage divider that we made you can see that we have three different
wires coming, a wire that splits the difference we talked about it and a black wire which
signifies ground and a red wire which is going to signify getting that 5 volts that we need.
Alright so I can see here that I've got that 5 volt connection and what I'm doing in this
circuit that I'm not actually going to do for us is I'm not going to put a switch in
here that's just something that we don't need to do right now and so what I can do is take
the servo, okay so here we need a connection that's going to the servo and a connection
that's going into the power supply on the Arduino so we're just going to twist those
together we're almost there hang on for a second and we're going to combine the sweep
program that we know controls our servo motor with another program called knob and will
make the combined program available to you Nick Livingston and I worked on that together
and so that program will actually hack or pull together these two examples to run this
tad row for you. Okay so we have put together our power so we're going to have our 5 volt
power coming out of here and okay and now we want one of our power going into back into
the servo like so and then we need to have that yellow from our voltage divider go into
the analog input A0 which is that analog input channel so we need that that's where the Arduino
is actually going to read what's going on here now we just have in our circuit very
simple circuit we just have one loose end here it's black and that goes into our final
ground position on the Arduino board and here we go now I'm going to call up this combination
of the sweep and the knob programs so this program is tad row one I and I've also told
the program that I'm working with an Arduino Uno microcontroller so it's still running
the last program that I loaded which was the sweep program so now I'm going to tell it
to upload it's stopping and I'm reading on the screen that it's uploaded done uploading
it's compiled it alright so we have the tad row one I program loaded up onto the Arduino
it's good we see the servo moving back and forth so that's that's the code we borrowed
from that sweep program from the knob program what we borrowed is a change in resistance
will change the offset of this servo motor so our resistor that's going to change here
is our light dependent resistor so I'm going to put my hands on it and I want you to watch
this black horn here now do you see how it's going from about six o'clock backwards to
about four o'clock watch what happens when I cover up that photo resistor see now it's
going from about five o'clock to three o'clock I'm going to take my finger off you see how
it makes that little jump and goes back down to maybe even six or seven o'clock there and
back up to five o'clock cover it up and now it's jumped up it's gone up in time so that's
super that shows me that we've got a circuit here that's taking sensor input and changing
actuator output very cool here with the Arduino now our trick is going to be to put the Arduino
in here and what are we going to do for power well I'm going to do something that's really
easy I'm going to use a USB power supply you can get these all over the place and you could
you also use batteries but that involves hooking up doing a little more wiring which we're
just going to avoid here so I've got this USB power supply here that I'm just going to put in our
little boat I'm going to start calling it our boat upon the sea and it's okay for the moment if
it's popping up and I don't want to plug it in yet because that's going to turn on the Arduino
and now we have the issue of how do we mount this servo motor and so here's my hot glue gun now
when you use hot glue you have to be very careful not to get the glue on your finger when you're
first putting it on because you will burn yourself so do take care here now what I'm going to do is
just actually literally hot glue this servo motor you know this is there are slick ways to do it
and I'll show you how I've done it on the other Ted row that I've got here but we're just trying
to get this thing working initially and in place so I'm going to hot glue it there hold it for a
second while the hot glue cools all right and I can already feel it setting up that's a great
thing about hot glue it sets up very quickly it's not particularly strong but you can set it up
very quickly and if you make a mistake you peel the hot glue off and the next thing we're going to
do after this is we're going to make a tail using this little wooden dowel dowel that I've cut we're
just going to wrap duct tape around that wooden dowel and attach it to our servo so there we go
I've just hot glued that servo into place and we're almost there next up I have cut a piece of
duct tape and that duct tape is going to act as our propeller here and now the next thing I need to
do is just glue that tail to our servo motor so I'm going to put hot glue here I should stand up
the hot glue gun and get out of my way right here and here we go I'm just going to press it like so
you can see that's kind of loose with the servo motor so it's not a great connection so I could go
in and do some more hot glue in a second okay so we have our hot glue on our tail holding it in
place and we have one final thing to think about and that is where the sensor is so the sensors up
here and I'm happy with that it's pointing forward so now I'm going to go ahead and plug this in and
again it doesn't look as slick as our other one we'll take a look at that in just a second and I
heard the servo go and we would tuck that cord inside and in just a second our tail is going to
wag check it out our tail is wagging I'm going to hold my finger over there was that big jump in the
tail okay here comes the light it's going to switch in just a second okay it's made a little turn
there and that would turn it in the water when it was swimming it just made a tad row now I told
you we can do this a little more slickly with some time here and this other tad row what I've done
here is cut out of the lid it's kind of a splash guard I put a switch in here and I've also used a
battery and then on this side you can see I've made a little mount for the servo I've actually made
a plastic mount down here use some more hot glue but once you have the basic tad row going you can
make it as pretty as you like when we think about the purposeful movement of the whole tad row we
can now put the sensory actuator circuit into its place in the functional loop of an autonomous
robot the movement of the tad row changes the amount of light that falls on the sensor and the
whole functional loop starts all over sensor reading changes actuator movement actuator
movement changes sensor reading since the conversion processes that take place on board the robot give
the robot self-control it makes sense to call this part of the system the controller one of the
very first robots that had a digital computer for a controller was shaky shaky was a mobile robot
built by researchers led by Charles Rosen at the Stanford Research Institute from 1966 to 1972 and
at the time digital computers were large and heavy the size of a bank of industrial refrigerators
filling a good-sized room now the final version of shaky used a digital equipment corporation
PDP 10 the PDP 10 by the way looms large and hacker lore because it helped the internet take baby
steps as part of the internet's precursor the ARPA net and it was very advanced for the time and
used at only a few universities but the PDP 10 could never ever fit into a robot the way an
Arduino can now so to serve as the controller of shaky it had to be in constant radio communication
in order to be shakies in shaky sensory actuator loop while shaky was revolutionary in putting
artificial intelligence into a sensor sensor actuator circuit the idea of using radio waves to
communicate with a mobile vehicle was not revolutionary the concept of remote control was
actually patented in 1898 by that genius of electricity Nikola Tesla in his patent Tesla
describes what he called tele automation what today we call radio controlled or remote
controlled vehicle and he demonstrated his idea at the Madison Square Garden with a four-foot boat
which he controlled using a telegraph signal box now Tesla did not discover radio waves or
invented devices to produce them but what Tesla did do was build actuators that could be controlled
remotely propulsion and steering were his targets and he demonstrated a remotely controlled boat to
public what we see in many different kinds of robots by contrast is neither shaky nor the Tesla
robot but something we call partial autonomy or partial remote control the robot has some autonomy
and a human operating remotely shares control with the robot now when we think about full self
control full autonomy what I'm psyched about is this we can treat sensor motor circuits as
discrete building blocks where each block is a behavior module and those modules can function
independently and those modules can function together with their coordination decided upon by
the controller this focus on behavior modules was developed and made famous by Rodney Brooks when
he was a professor at MIT and this approach goes by the name of behavior-based robotics the hallmark
of behavior-based robotics is that the controller makes decisions about which behavior module gets
to operate when now because this is an all-or-none proposition we think about this as the behavior
modules competing to have the controller decide to let it operate a winner-take-all scenario no
sharing of the actuators you either are the behavior that is operating or you are not Rodney Brooks
very quickly realized that the great value of behavior-based robotics is that you can use
very simple programming like what I've shown you on the Arduino to get robust self-control out of
your robot autonomy with this in mind let's take a quick look at one of Brooks's creations Roomba
so one of the great things about Roomba is it has many sensors on it it's got a bump sensor it's
got cliff detection sensors and it's also got the ability to find its way back to the charger I'm
just going to turn Roomba on here and we're going to do a quick experiment to see how the different
behavior modules are both connected to the sensors and organized so right away I'm going to touch
the bump sensor and you can see it goes into escape okay now I'm going to hit dock and what the
docking should do is override everything else okay let's hit dock and then Roomba's going to find
its way back to the charging station there we go Roomba so what we saw is that the escape behavior
overrode everything else including cleaning that that was more important and when I hit dock it
changed its behavior as well now we've learned something about Roomba's controller without having
to look at its code we could do similar pairwise comparisons like rock paper and scissors to see
which behavior is programmed to win in which situation we're always comparing our current
perception of the state of things with our desired goals and things like are we there yet if not we
keep going if yes then we stop so this comparison of have we achieved our desired goal to where we
actually are is at the heart of self-control and the general principle is what's called negative
feedback control negative feedback is one of the most important principles that governs the control
and regulation of mechanical or even organic systems in fact the fields of cybernetics and
engineering control theory are built around issues of feedback control we can see negative
feedback control in action using Baxter now I've taught Baxter to pick up a cup place it right over
on the other side release it and then pick up another and do the same now I'm going to be mean
here and move this other cup from where it was now this would completely discombobulate a
traditional factory robot that is moving from place to place but not Baxter what does Baxter do you
can see Baxter first of all recognizes that the cup was not there it's not trying to blindly pick
up the cup it's trying to find the cup and here's where the negative feedback comes in it's trying
to minimize the position I'm going to trick it again here between its desired position and the
actual position of the cup here we go again I'm going to put the cup in place you can see how it
made an adjustment and now it's found it it's going to move the fingers in here and you can see
how it wiggles back and forth a little just like you do when you're steering a car trying to figure
out exactly where that was it's in a search pattern here to look for more cups they aren't
available so there's nothing for it to do in terms of negative feedback but that's how it works in
Baxter putting a robot in the driver's seat is the fundamental issue in robotics and the
controller is how we do it a controller is a special kind of computer whose program modules
give autonomy to a robot the biggest questions in robotics often revolve around what combination
of autonomous self-control and remote control by humans are most appropriate for a given situation
or robot but robust autonomy that is working with self-control in complex circumstances often requires
two kinds of autonomous control a hybrid type of control architecture we've got behavior-based
processes which are quick sense and react and then we have model-based processes which
offer long-term goals sense and plan and then move how much autonomy to give a robot is the
biggest question but the answer often involves a second question what kinds of autonomy will the
robot have both in the design and the operation of a robot the controller is how any robots
autonomy is created and defined in the linking up of sensors and actuators the controller is
where a robot's autonomy is overruled by humans or extended even further
