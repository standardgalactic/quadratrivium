lecture 22 circuits so logical well now we know how to put a billion transistors
on a single chip of silicon and we understand how transistors work but how
do we connect all those billions of transistors so that they do the kinds of
things we want to do it isn't that a hopeless task to think about well it
turns out not to be a hopeless task and the reason is that fundamentally
computers don't do anything very complicated they perform very very very
simple operations on strings of binary digits zeros and ones that might
represent numbers or might represent symbolic information like text and the
operations they perform are so simple that we can understand them very easily
and see how to build them up into more complicated operations today's lecture
is going to take you from an introduction to the very simplest of those
operations that are performed on binary digits binary numbers up to a fairly
sophisticated circuit that will test two binary numbers of some length to see
whether they're in fact equal or not the kind of thing a computer would do in an
everyday way now you may or may not be a computer user you probably are but even
if you aren't a computer user there are many situations in which you in fact use
computers and don't know it slam on the brakes in your car and the anti-lock
brake system comes on as I've indicated before that's a computer that uses
information from sensors at the wheels to decide which wheels are slipping and
which wheels are truly rolling keep them all rolling so that you have the maximum
amount of friction the friction provided by static friction which occurs when a
wheel is rolling without slipping your cars fuel system is also a computerized
nowadays there are sensors that measure how much carbon monoxide and how much
oxygen are in the exhaust gases sensors that determine exactly when the spark is
firing sensors that tell me how much load the engine is under and all these
things are used to adjust through a computer that calculates in almost
instantaneous real-time what needs to be happening with that engine you go to an
anti-tell I go to an automatic teller machine the automatic teller machine is
basically a computer with a very small keyboard and only a few instructions it
can do but if it spews out your hundred dollars that's what you want and some
computer has made it do that your thermostat increasingly is a computer
your digital camera has all kinds of computing in it including computing that
takes a very complex large memory hogging image and reduces it quickly to a
much smaller size so that you can store lots of images on your camera more
about that in the next lecture when we talk about computer memory the point is
you're using computers all the time whether you know it or not and all
these computers ultimately are digital computers and they operate by the same
basic principles I'm going to describe here that is they perform very simple
logical operations on binary numbers most of us in fact do use computers and
we tend to use canned computer programs word processing programs spreadsheet
programs drawing programs photo modifying programs that modify our
digital photographs email programs that receive and send email whole host of
programs we use for the individual tasks we like to do with computers these are
sort of canned programs somebody has written a program that does all these
things for you in simple ways so you simply click on spell check and it
checks the spelling or maybe it checks the spelling automatically it's doing a
lot of of these simple operations but you don't see that going on you only see
the very high-level operation check if the word dog appears somewhere in this
document change the color of this apple from green to red remove that red eye in
this picture because I had the flash on the wrong setting or something those are
large-scale complicated operations that break down into many many of these
simple operations and all of us who use computers are executing those
instructions and doing those operations all the time there are other levels at
which one can get into computers and tell them what to do and program them some
people there aren't very many left these days actually program computers in the
fundamental language that the computer itself knows a real computer comes with
only a relatively small set of things it really knows how to do add to binary
numbers multiply two numbers move a binary number so that all its digits
shift one place to the right compare to binary numbers and see if they're equal
or not very simple things like that that last one will actually develop in the
course of this lecture there are some people who actually write programming in
this what's called machine language the fundamental language that the computer
program knows each instruction in a machine language program corresponds to
an actual electronic operation or logical operation that the computer is
actually doing and then there are intermediate languages such as scientists
like me and my colleagues frequently use languages like Java C basic Fortran
Fortran's a venerable but still use language for scientific programming and
these languages have powerful statements that combine a number of these basic
computer operations into one statement raise a number to a power for example
well that's a pretty complicated thing to do and takes a number of these
fundamental computer steps there are also programs like Mathematica or Matlab
programs like that that work at a higher level in which a single statement may do
hundreds or thousands of computations very effectively so there's a whole range
of ways in which we use computers from our using computers without even knowing
we're using computers on through what most of us do which is used word
processing programs drawing programs photo programs that kind of thing email
programs down through these more advanced computer languages like
Mathematica Matlab things like that down through the basic programming languages
like basic Fortran C Java and then on to machine language where you actually
know what the particular computer can do and you're programming in those
individual languages and I wanted to give you that overview because what I'm
about to introduce are these basic fundamental operations that the
computer can do and any computer software from the most simple machine
language program up to the most complicated piece of expensive software
you buy for your personal computer they all ultimately are built up from these
fundamental building logical building blocks so in the same way that in the
previous lecture we built complicated integrated circuits from individual
transistors here we're going to build complicated operations on binary
numbers from these simple simple logical operations that the computers
fundamentally do now I've mentioned that at the most fundamental level all any
computer ever does is simple operations on binary numbers today's computers
typically the more advanced of today's computers operate on 64 bits six a
string of 64 ones and zeros making a long binary number at once computers of
the late 1990s early 2000s typically operated on 32 bits of information and
that those computers are still around some of them or some of the earliest
personal computers when they first came out in the 1980s operated on eight bits
at once so as computers get more advanced as we can store more information on an
individual chip put more transistors on a chip there's Moore's law in action we
can process bigger and bigger and bigger strings of binary information at once
so these complicated tasks we're going to build up are ultimately combinations
of these simple tasks acting on these so-called word 64 bit or 32 bit strings
of binary numbers and I want to give you an example of a couple ways in which we
might interpret binary information so first of all binary information can be
interpreted as simply numbers representing numerical information and
computers that are doing so-called number crunching calculating climate models
analyzing astronomical data building an economic forecast whatever they are
basically processing binary digits as numbers for instance here's the binary
number one zero zero one it's a four bit binary number has four different binary
digits what is it equal to well if we want to convert it to decimal what we
recognize is that just as in a decimal number where we have the ones place the
tens place the hundreds place the thousands place in binary we have the
ones place the twos place the two squared place which would correspond to the
hundreds place two squared is four instead of ten squared is a hundred the
twos cubed place ten cubed to be a thousand two cubed is eight so that's the
eighth place and the way we interpret this binary numbers to look from the
right we've got one times or look from the left it doesn't really matter we've
got one times eight no times four no times two and one times one so that's
one times eight plus one times one that's the number nine in decimal but
it's the number one zero zero one in binary and those are both perfectly
equivalent and legitimate expressions of the same number I'll have more to say
about this in a subsequent lecture we can equally well represent text with this
number and in particular there's a code that is agreed upon standard code that's
used for representing text it's called the American standard code for
information exchange you may have something as complicated as a word
processing program and usually when you save a file it's saved in the format of
that program but it could also be saved as so-called ascii text which any
computer can understand that leaves off italicizing and all kinds of
complicated formatting features and just saves the raw text in this code for
example here's a string of three eight bit binary numbers by the way an eight
bit binary number is called a byte a bit and a bytes like you've taken a bite of
this number and that's a convenient unit for talking about processing so these
are eight bit bytes ASCII is really it was originally a seven bit code we tend
to make it eight bits these days and some of the more common letters simply
have a zero in front so each of these numbers which we could convert the same
way we did before to decimal numbers stands for a particular letter okay that
combination zero one zero zero zero one zero zero whatever that turned out to be
in decimal stands for D so if you looked up the ASCII code you might see a
listing that gave the decimal equivalent for D and it might also give the binary
equivalent for D and it might also give the equivalent in a couple of other
number schemes which I'll get to in a subsequent lecture zero one zero zero one
one one one happens to correspond to O and the last one zero one zero zero zero
one one is G so this is the word dog spelled out in ASCII code it takes a
total of 24 bits three times eight to spell out that three character word so
your word processing document your PhD thesis your letter home to mom your
description of your trip to the Grand Canyon that you're writing out in an
email that's ultimately what it is a huge long binary number where each string
of eight bits represents a letter or a blank or a comma or some other character
that you used to write text and whether it's letters or words whether it's
letters and words or numbers all computer processing boils down to simple
logical operations on again these strings of sequences of binary digits
interpreted either as letters or as numbers so let's see how that works
ultimately again remember that what we have are ones and zeros and we can think
of the one as being saying true on yes you can interpret it any one of those
ways the zero is off no false different ways of thinking about it but we have to
be able to distinguish those two if our electronic circuits can do that we can
process these things and there are only a few a handful of basic logic
operations that we need to do everything in fact there's only one we need to do
everything and we'll get to that in a little bit but I want to introduce to
you first three pretty easy logic operations and talk about how we build
them from transistors so eventually I'd link it to the material we've gone
through before so let's look at the first operation the first operation is
called logical and and any logical operation is easily described by a
truth table and in the case of logical and and one of the other operations I'm
about to introduce the logical conceptually logical structure of this
thing is there are two inputs a column a and b and there's an output and here's
the question for logical and the question is are both inputs true are both
inputs ones are both inputs yes are both inputs at a high voltage if a high
voltage means one if they both are then the output is also high if a is high and
b is high then output is high if a is one and b is one the output is one if
they aren't both one then the output is zero so I'm going to build up the truth
table for logical and we look at all the possible input combinations zero and a
zero and b are they both ones nope so the output is zero zero and a one on b
are they both ones is a one and b one that's why it's called and operation
nope so the output zero look at one zero obviously they aren't both ones so the
output is zero how about one one well yes a is one and b is one so the output
in that case is one that's logical and and we ascribe a symbol to the logical
and operation and the symbol that I put on the right hand side here is not
something that represents a particular electrical or electronic or mechanical
circuit it simply represents this logical operation however you might care
to implement it mechanically or electronically or whatever that
represents the logic operation it shows two inputs and an output and that kind
of elongated d-shaped thing tells you we're talking about the and operation
how would you actually make the and operation well I have here a model that
shows a very simple way to do it and very soon I'll show you how to do it with
transistors and we'll want to keep this model in mind so I have here a light bulb
and the light bulb being on represents one and the light bulb being off
represents zero and I have two switches and they are simply a little metal
flapper that right now is not connecting these two metal points but when I swing
it the other way it makes an electrical connection and the switch is closed these
two switches are connected in so-called series one comes right after the other so
current that flows through one switch has to flow through the next one to get
to the light bulb and I've had this thing made completely transparent so it's
totally obvious what's going on and I'm going to put a battery in here and I'm
going to hook up the battery to this circuit and I'm going to close one of
both switches are open now they're off they're zero that represents zero zero and
the light is off zero I close one switch and nothing happens because the
electricity can't come through because the other switch is open I close the
other switch and of course nothing happens so the output is still zero this
is one zero state that switch is closed that's a one the other switch is open
that's a zero no good close them both the light bulb lights that those switches
and this light bulb are implementing the and function in a simple electric
circuit with hand operated switches and if I looked at these light bulbs and
decided what other switches were going to do and flip them all with my hands I
could in principle build up an enormous human operated computer that's the logical
and operation let me show you a couple more logic operations here's logic or it
looks the same I'll hook the battery up except the switches are in parallel now
that is electricity can go through this switch or this switch right now both
switches are open both are zeros this is the zero zero state the or function says
if either a or b is a one make the output of one well neither a nor b is a one
right now so the output is zero but if I make b a one the light lights if I make
a one by closing that switch the light lights if I close them both the light
also lights this is the or in the sense that if either one or both of them are
closed if either input or both or ones that is a logical one at the output
let's look at the truth table for the or circuit okay here's the logical or
function we're going to list the inputs we're going to see what the output is
okay we saw zero zero no output zero one well one or the other is open yep one
zero one or the other is open is closed yep output one both of them yes both of
them ones both of them true output true that's the logical or operation and
there's the logic symbol for the or operation finally I have to introduce
one other simple operation which is even simpler because it has only one input
this is logical not or also called inversion because what it does here's
the switch the switch is now open and the light bulb is lit and what this
particular circuit has is a resistor coming from the battery to the switch
and the switch is placed so that if I close it it short out shorts out the
light bulb it provides a quicker path for the current an easier lower
resistance path for the current and the current all goes there and not through
the light bulb so when I close the switch make the input a one the output
becomes a zero and vice versa so this is the logical not operation there's the
truth table it has only one input zero or one it has two possible it has one
possible one output which can be either one if the input is a zero or a zero if
the input is a one so that's the not operation so I will remove the battery
so we don't keep that light bulb burning and wear out the battery now I want to
point out that this particular implementation not is not terribly
efficient because that resistor is is dissipating a lot of power it's getting
warm and we wouldn't really do it that way but that shows you how we might go
about making a not operation in practice it turns out to be more convenient not to
make and an ore but something called NAND and NOR the logic symbol for not is
this triangle with a little circle after it if I add that little circle to and or
or then that becomes the logic symbol for NAND and NOR and what they stand for is
not and and not or so logic NAND means a circuit in which the output is one if
both inputs if both inputs are not ones it's exactly the opposite of AND it's AND
with a NOT added to it so here's the truth table for a NAND circuit sometimes
called a NAND gate and at right is the logic symbol it looks just like the AND
symbol but it's got that little circuit at the circle at the end the circle means
it's being negated it's being inverted it's being knotted similarly here's
logical NOR not OR and it looks similarly it's the symbol for OR with the NOT
connected to it by the way if I took either of these logic circuits and I'll
do it here for NOR if I took either of these logic circuits and connected
their two inputs together both A and B so A and B had the same value that would
give me either the top or the bottom most row in that truth table because I have
connected them together so they can't have different values and you'll see what
happens looking at that I have 0 at each of those inputs I get a 1 at the
output if I have 1 at each of those inputs I have a 0 at the output so
connecting those two inputs together makes this a NOT gate or an inverter and
you can convince yourself that the same thing would happen for logical NAND
connected to inputs together and it becomes an inversion so we don't really
need that NOT operation we can build it from NOR or NAND in fact I'm not going
to go into how to do this we could build NOR from NAND and NAND from NOR so we
really need only one of these logic circuits implemented in order to make
all of the logic that we could possibly build in a computer happen well how do
we actually implement these things electronically I showed you circuit
or circuits actual circuits for how we implement them with light bulbs we can
replace these switches with transistors and we can replace the light bulb being
on or off with a voltage simply being high or low 0 battery voltage or 0 and
that's how we're going to make these circuits with transistors and before we
do that let me remind you I introduced last time this MOSFET transistor which
could be either on or off depending on the voltage on the gate there's its
circuit symbol it looks pretty much like the transistor the wires at the bottom
the thin lines are the wires connecting to the two little N type regions and the
wire at the top connects to the gate how would I make these logic circuits with
this transistor well there's a circuit I'll ask you to think for a minute is
NAND or NOR the question is if those if input A is high turns on the transistor
and input B is high turns on the transistor what happens what does the
output do well if you think about it those two transistors are switches and
if I leave either of them open there's an open circuit no current flows there's
no voltage across that resistor that's what ohm's law tells us and the output
voltage is the battery voltage and we've got a one state so if either of
those transistors is off the output is a one the only time the output becomes a
zero is when we turn on both transistors and that is the opposite of and so this
thing is a NAND gate there's its truth table that we know and the symbol for
that complicated circuit with two transistors and a resistor is again that
symbol the NAND symbol by the way we don't again build the circuit with
resistors because that wastes power we actually build it with complementary
transistors that have the opposite N and P to them and that makes us able to
build a circuit that draws very little power that's one of the advantages of
these MOSFET transistors we can also implement NOR with transistors and you
can convince yourself in the same way that this circuit if you turn on either
transistor the output goes to zero only when both transistors are off is the
output one and that's a NOR gate or NOR circuit so I now want to build up in the
remaining minutes a more complicated circuit to show you how we get there
there's the symbol for the NOR gate over that nor so we're not going to talk
about individual transistors anymore we're going to reduce them to just these
simple symbols here's a useful circuit which I'd like to take a minute and
analyze okay this circuit has four NAND gates and let's try to build its truth
table over there and let me remind you in the upper left of what the truth table
of a NAND gate looks like because that will help us to do the analysis so let's
consider all possible combinations of A and B at the input here okay that's
first possible combination might be zero zero so that's the first row of the
truth table so we make them both zero well if you look at the NAND truth table
at the upper left if either of the inputs is a zero the output is guaranteed to be
a one well that means we have a one at the inputs of two of those two middle
gates if you have a one at the either input and a zero at the other which we
do the output is a one so the inputs to the last gate are ones and that means the
output of the last gate is zero and we've got a zero in the output of the
whole thing let's go to the next row let's put a zero on the upper input A
and a one on input B make the same kind of analysis and I'm going to go fairly
quickly through this you can convince yourself this works from the truth table
the output of that gate still has to be a one but now we have a one and a one on
the lower gate its output has to be a zero we have a one and a zero on the
upper gate its output has to be a one we have a one and a zero going into the
final one and that gives us a one at the output the circuit is clearly
symmetric so we can make immediately the same conclusion for the next case and
finally the last case where we've got two ones at the inputs well that means
there's a zero there we have zeros and ones which produce ones at the output
and again we get a zero so what does this circuit do what is the nature of
this circuit well this circuit is could be described in several ways what is it
well one thing it is is a circuit called exclusive or either A or B is true but
not both you get a true output if either A or B is a one but they aren't both
ones you get a one at the output that's clear from the truth table another thing
you can think of it as a one bit binary addition because if you add one plus if
you add zero plus zero you get zero if you add zero plus one you get one if you
add one plus zero you get one if you add one plus one you get zero carry the one
and if you built some additional circuitry to take care of that carry you
would be on your way to building an adder and another thing I like to think
of it as it's an inequality tester its output is is one only if the inputs are
unequal so the question is are the inputs equal or unequal if they're unequal the
output is a one so it's an inequality tester so that's a very useful circuit
and it's so useful that we're going to continue this process of building up a
hierarchy of more complicated things we're going to call that exclusive or
xor and we're going to give it its own symbol which looks like the symbol for
an or gate but with this extra little bar at the front that says this is
exclusive or its output is true only if either of the inputs is true but not
both of them so that's exclusive or now we can do better than that we can
combine some exclusive or gates there are two exclusive or gates there's input
a1 and b1 to the top gate there's input a2 and b2 to the bottom gate remember
their outputs are true ones only if their inputs are unequal there's the truth
table for xor at the output of this thing I have a nor gate also and so let's
look at what happens with this equality tester the output is one of a nor gate
only if both inputs are zero what's the only time both inputs are zero well it's
if both outputs of the first two gates those exclusive or gates are zero when
are their output zero well this is an inequality tester so their outputs are
both zero only if a1 is equal to b1 and a2 is equal to b2 so these become
equality test this becomes an equality tester it tests for the equality of two
binary digits and sees if they're equal and there at the output were one only if
a1 equals b1 and a2 equals b2 a1 is the first digit of binary number a and a2 is
the second digit of binary number a so this is a two-bit equality tester it
asks is are these two-bit binary numbers which could be 0 0 0 1 1 0 1 1
anything from 0 to 3 if they're equal and if you think well that isn't much we
can very easily expand that here's an 8-bit equality tester it tests for the
equality of two bytes it works the same way we have a great big nor gate with
eight inputs how do we make that the same way we made the other nor gate with
individual transistors although we're all mounted on a single integrated
circuit in fact we mount many many many of these gates maybe millions hundreds
of millions of them on a single circuit board nowadays our single integrated
circuit so we have a lot of transistors all in parallel like we did for the
single nor gate there it is and we have all these exclusive ores at the
beginning and we feed a and b a1 and b1 into the top a8 and b8 into the bottom
the only way the output of that final gate that great big NAND gate that great
big nor gate can be a 1 is if all the inputs are 0 and because those
individual exclusive ores are equivalently thought of as inequality
testers the only way we'll get a 1 at the output of this entire circuit is if
we have equality at each of those gates so we get zeros on the output all those
zeros coming into that NAND gate give us a 1 on the output so this is an 8-bit
equality tester and that begins to be a sophisticated circuit 8 bits is one byte
one byte is one letter so when you go through your word processing program and
you want to know if the word D dog is in there the first thing that happens is
the first the letter D it's its binary symbol which I showed you already as a
string of three above of a single 8-bit binary number it tests that 8-bit
binary number against all the letters it comes to in your document and when you
get a 1 then it goes on and tests the next one and sees if it's an O and if
it is then it goes on and tests the next one and when it finally finds a
combination where the first the 3 D O G are equal to what you have in the
document it's found it that's how a complicated process like a search
function in a word processing document works and inside the computer
something like this 8-bit equality tester is going on now there are many
other circuits that execute simple instructions I mentioned binary adders
there are circuits that shift the whole binary number to the right or left and
these serve to multiply or divide by two many circuits have more complicated
mathematical functions built in like multiplying great big numbers that
include the powers of 10 to them scientific notation called floating point
numbers but basically what computers are doing are these very very simple
logical operations and ultimately these operations we can understand as being
built ultimately from N and P type semiconductors so let me end once again
with that required picture again we're going from Adam now all the way up to
this equality tester here we were at the end of the last lecture we had built up
to transistor actually two lectures ago we had built up to these MOSFET
transistors then I showed you in the previous lecture how we got the much
more complicated circuits but it didn't show you how we hook them together now
we're going to get to how we hook them together we've taken that transistor
ascribed to it a simple symbol we've built it up into gate circuits here's a
NOR gate circuit we then give that's sorry that's a NAND gate circuit we give
a logic a single symbol that now subsumes what that circuit is and all
everything that came before it we built up a more complicated circuit out of
that here was this tester for inequality basically or exclusive or we give that
its own symbol so each time we're building up a more complicated structure out
of simpler things and finally out of that we built the 8 bit equality tester so
we now have a logical progression all the way from the silicon atom to the 8 bit
equality tester that performs a really sophisticated function inside your
