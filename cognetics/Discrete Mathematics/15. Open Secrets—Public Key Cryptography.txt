The
word cryptography comes from the Greek words crypto meaning hidden and grapho meaning writing.
People have practiced the art of cryptography, hidden writing, for about as long as people
have been able to write. You might say that cryptography is the most discreet application
of discrete mathematics. Suppose I have a secret message that I want to send to you.
Let's say it says quiz today. This message is known as the plain text since it could
be read plainly by anyone. Now how could we disguise our message? One of the simplest
codes to create and break is the shift method where every letter is shifted by the same
amount. For instance, my key might be to shift every letter forward by 2, but of course when
I shift it by 2, I'm referring to that, mod 26. For instance, the Q when I shift it forward
by 2 would become AS and the U would become AW and the I would become a K and the Z when
I shift that forward by 2 would become a B. And then today, T would become a V and O
would become Q, D would be F, A would be C and Y when I add 2 to it, mod 26, I go to
Z and then to A. This message here is called our cipher text because somebody just looking
at that wouldn't be able to make sense out of it. So someone reading the cipher text
wouldn't easily determine it, but if the recipient knows the key, then they can easily determine
the plain text by shifting every letter backwards by 2. Of course there are more sophisticated
codes out there, but here's a simple code that is 100% unbreakable. It's called white
noise and it's undoubtedly used for the most sensitive communication, say between the White
House and the Kremlin. Here's how it works. At the beginning of the year, the White House
sends by trusted courier a file called the key with millions and millions and millions
of random digits. Those random digits are numbers between 1 and 26. So for instance suppose
our key begins, oh I don't know, 3, 1, 4, 1, 5, 9, 2, 6, 5, 8, whatever random digits
you want. They should be more random than that by the way. Then given the plain text
quiz today, we would shift the first letter by 3 and the second letter by 14 and so on
to get this mixed up little cipher text. So that's something that would be impossible
to decipher unless you know the key. The recipient knows the key and can decipher it easily by
shifting those letters back 3, then 14, then 15, then 9, and so on. But anyone else who
sees the cipher text really has no clue what the plain text is. The reason they have absolutely
no clue is because the key was random or it should be. Don't use digits of pi or something
popular like that. Use random digits. The plain text would have then, because with random
digits, the plain text that generated it could have been literally anything else. Like let's
say my message instead of being quizzed today was math rocks. Well that could have been generated,
that could have also have generated the cipher text, that same cipher text with the exact
same probability. By the way, for complete security, once the first message is sent,
those first 9 numbers in the key should be thrown away and not reused, because otherwise
that could be exploited. Now, white noise has its drawbacks. First of all, trusted couriers
can get expensive. Second, if the key were ever made public, then the cipher text could
be read by anyone. The idea behind public key cryptography actually sounds impossible.
Imagine that a bank wants you, or anyone in the world, to be able to communicate with
it over the internet without having to use a trusted courier. The bank posts on its
website for the world to see a public key. So the website might look like this. Here
we are at Xirith National Bank and it says, hey, hi, you want to send us a safe message?
Let's follow these three easy steps. Now, on the privacy of your computer, you convert
the plain text into cipher text using the bank's public key. We'll see examples of that
shortly. Then, you email the cipher text to the bank. That's very insecure. I've heard
it said that sending an email is about as private as mailing a postcard. Many eyes could
potentially see it. You don't want to send anything that's very confidential by email.
But despite the fact that everyone in the world knows the bank's public key, only the
bank can decipher the message. Doesn't that sound impossible? Here's you. You take your
plain text. You convert it somehow into the cipher text using the steps that the bank
tells you to do. Then once you have the cipher text, you send the cipher text across the
internet, across cyberspace, into the bank's computer. Then the bank, using just a little
bit of extra information, figures out what your plain text is. The public key cryptography
method that we're going to use is known as the RSA method, named after three mathematically
trained computer scientists, Rivas Shamir and Adelman, who discovered this method in
1977. By the way, MIT held a patent on the RSA method until 2000 when it was released
into public domain. Here's how the RSA method works. Let A, B, and N be enormous numbers.
When I say enormous, I want you to think numbers that are like 2,000 digits long. You're not
going to be doing this by hand, but your computer won't have trouble with it. What do we know
so far about computational number theory? We've learned that it's very easy for a computer
to calculate, even with 2,000 digit numbers like A, B, and N, that your computer can calculate
A raised to the B power mod N. It knows how to do that. It also knows how to calculate
the greatest common divisor of A and B. We saw that Euclid's algorithm is fast, so even
with digits, thousands digits long, it can do that in just a few thousand steps. We also
know, using Fermat's test, we can tell if the number N is a prime number, or any number
for that matter, we can tell if it's prime in a reasonable amount of time, using seed
planting and Fermat's test. That's what we can do that's easy. Here's the hard part.
If N is a composite number, let's say N is P times Q, where P and Q are 1,000 digit primes,
okay? Then it's very hard for a computer, or anyone, to factor the number N. In other
words, find those numbers P and Q that created N. That's hard. Prime testing, exponentiation,
greatest common divisors, those are easy. Factoring is hard. By the way, the simple
algorithm for factoring a number, trial division, let me just give you a sense as to how hard
it is, takes about the square root of N steps, right? You'd say, well, let's divide it by
2. Does it work? Okay, it doesn't. Try 3. Try 5. Try 7. Try 11. Try all the numbers, at
least all the prime numbers, up to the square root of N. And if you don't find any divisors
up through the square root of N, then you know your number's prime. How long will that
take? If N is about 10 to the 2,000th power, in other words, if N is a 2,000 digit number,
like 10 to the 2,000th, then the square root of N is 10 to the 1,000. So in other words,
trial division would take you about N to the 1,000 steps. The fastest known algorithms
take about N to the, instead of N to the 1 half, about N to the 1 quarter. In other words,
the square root of the square root of N steps, that's the one method called Pollard's method,
takes that. So if N was about 10 to the 2,000, it would find in about 10 to the 500 steps.
The fastest algorithms take, at the current state of the art, would take about E to the
square root of log N times the log of the log of N. Isn't that a crazy expression? That
would be for this number, it would take about E to the 197th steps, or about 10 to the 85th
steps. Just to give you an idea how big 10 to the 85th is, how long would that take? If
your computer could do a trillion calculations per second, then it would take more than a
trillion, trillion, trillion, trillion, trillion years to solve the problem. Which reminds
me of a joke. What does a drowning number theorist say? Log, log, log, log, log, log,
log, log, log. But I digress. All right, so here, here is how the RSA method works. So
first we'll learn how, then we'll learn why. All right, the bank publishes two numbers on
its website. N, the number, big number, and E, E as in encipher. Okay, that's it. N and
E are both like 2,000 digits long. Now, you write your plain text, and your plain text has
to be, let's say, under 1,000 characters. Okay, because each of those characters might take up
two digits. So you want it to be under, you want your message to be under 2,000 digits
long. So write your plain text in under 1,000 characters. So for example, if the plain text
said quiz today, then you would convert this to a number, we'll call that number M, and
that number M will be under 2,000 digits long. So, and here's how we would do it. We would
take the quiz, Q becomes 17, U becomes 21, I becomes 0, 9, Z becomes 26, and so on. So
M would be that 18 digit number, quiz today becomes this 18 digit number. By the way, if
your message was more than 1,000 characters long, then you'd just have to do this process
more than one time. Okay, so next, you take your 18 digit number, M, your message, and
you raise it to the E power, E as an encipher, mod N, and we can do that. You've got a big
number, raise to a big power, mod a big modulus, and we can do that, and we get our cipher
text, which we call C. What is C? It's just a number that's less than N. It's the
remainder when you divide M to the E by N. Okay, so it's less than 2,000 digits long. We're
going to take that number C, and we're going to email it to the bank over cyberspace. So
anyone in the world, our worst enemy, could see what C is. When the bank receives C, it
uses a magic secret number, which I'll call D, as in D cipher, and it computes C to the
D mod N, and magically, C to the D mod N is going to equal the number M, which the bank
then converts M to the plain text quiz today. Doesn't that sound like magic? Let me say
it one more time. Let's summarize what we have. So starting with your numerical message M,
you compute the cipher text C by calculating M to the E mod M. Then the bank, using its
secret number D, computes C to the D mod N, and magically out pops M. That's all it is.
That's the RSA method, but I haven't told you yet how N, D, and E are chosen. Here's how
to choose the numbers. The bank secretly chooses two random 1,000 digit prime numbers. We'll
call those numbers P and Q. So P and Q are prime numbers about 1,000 digits long. Now you may
ask, how does it find a 1,000 digit prime? Does it go on the Internet and look for popular
1,000 digit primes? No, these have to be ultra secret. So what the bank does is it randomly
generates a 1,000 digit number and then tests to see if that number is prime. And once it has a
prime, it's got a secret prime for life that nobody has probably ever seen before. There are
plenty of 1,000 digit prime numbers out there. The prime number theorem tells us how many there
are. In fact, according to the prime number theorem, which we saw in lecture 10, said that the
number of prime numbers less than or equal to N is approximately N divided by the natural
log of N or N divided by about 2.3 times the normal, the base 10 logarithm of N. And if I'm going to
choose my odd number with the restriction, so what that means is roughly 1 in every 2,300
numbers is prime when you're looking at numbers in the vicinity of 10 to the 1,000th. And if you
make sure that you always choose a number that isn't even and isn't a multiple of five just by
tweaking that last digit, then there's about a 1 in 1,000 chance that this random 100,000 digit
number that you've picked is prime. And you could test for its primeness pretty efficiently using
Fermat's test and its variations. Okay, so if it is prime, great, you're done. If it's not prime, try
again. And if that's not prime, try again. It should only take you about 1,000, maybe 2,000 attempts before
you find your own secret prime P, and then you do that process again to find another secret prime Q.
All right, so you have P and Q, they're these 1,000 digit primes. You multiply them together to get your
number N. N is going to be about 2,000 digits, and that's going to be made public so for the world to see,
but the bank keeps P and Q private, so everybody knows N, but only the bank knows P and Q.
Next, the bank computes phi of N. Phi of N was the number that we used in Euler's theorem, and we know that
if N is equal to P times Q, that phi of N, that is phi of P Q, is going to equal phi of P times phi of Q
because P and Q are relatively prime, and that's P minus 1 times Q minus 1. Bank can easily figure out what phi of N is.
The bank then secretly chooses a random 1,000 digit number D that is relatively prime to phi of N. How does it do that?
Well, it takes this 1,000 digit number D, and it does the Euclidean algorithm with phi of N, and if you get one when you're done,
then they're relatively prime. If not, try it again. Euclid's algorithm won't complain, it's very fast,
and it won't take more than a handful of tries before you find a number D that's relatively prime to phi of N.
Now, since D and phi of N are relatively prime, we know from Bezou's theorem that Euclid's algorithm will find us positive integers E and F
so that D times E minus phi of N times F give us 1. It finds an integer combination of D and phi of N that give us 1.
Let me summarize. So if N is equal to PQ, so how do we choose D, E, and N? N is equal to P times Q, where P and Q are secret 1,000 digit primes.
D is also a secret 1,000 digit number that's relatively prime to phi of N.
Euclid finds positive integers E and F so that D E minus phi of N F is equal to 1, and the bank makes E the enciphering number public so anybody can see it.
And now, the theorem of the day is that RSA, this magical process actually works.
In other words, if you take your message M and you raise it to the E power mod N and you get your ciphertext C,
then when the bank takes your ciphertext C and raises it to the D power, the deciphering exponent, mod N out pops your message M.
I'll say it again. Our theorem is that if M to the E mod N equals C, then C to the D mod N equals M. Let's prove it.
First, we'll make a few elementary observations and we'll build on these elementary observations.
Do you agree with the fact that C to the D mod N is congruent to C to the D mod N?
Almost sounds like a tautology, right? Are you saying anything at all?
Yes, I'm saying if you take the number C to the D and you look at its remainder when you divide it by N,
then that's going to have the same remainder as C to the D when you divide it by N.
It's a very quick observation.
Also, M to the E mod N is congruent to M to the E mod N. Those two numbers differ by a multiple of N.
With that as our background, let's begin the proof of the RSA theorem.
M to the E mod N equals C. I want to show that C to the D mod N equals M.
Therefore, working with modulus N, all those congruences are modulus N, we have C to the D mod N is congruent to C to the D.
I want to get M out of this.
And C to the D, I can replace C with M to the E mod N to the D.
But M to the E mod N is congruent to M to the E mod N.
So I can replace the M to the E mod N with the M to the E.
Can we really do that? Doesn't that exponent D mess things up?
No. By the power theorem, we can, if A is congruent to B, then A to the D is congruent to B to the D, so we're safe.
Now M to the E to the D, that's a number, right?
And by the law of exponents, that's M to the E times D, M to the Ed, if you will.
But what do we know about E times D?
By the relationship, by the Beizu relationship that Euclid found for us.
Remember, De minus phi of NF was equal to 1, so I can replace Ed with the number 1 plus phi of NF.
Just algebraically making that substitution.
Alright, and now by the law of exponents, that's M to the 1 times M to the phi of N times F.
Just taking little algebraic steps here.
Now M to the 1, that's just M. M to the phi of N times F, by the law of exponents again, that's M to the phi of N raised to the F.
But now Euler's theorem jumps into the game and says, wait a second, I know that M to the phi of N is congruent to 1 mod N, right?
Isn't that Euler's theorem? M to the phi of N is congruent to 1 mod N.
When I put on my mod N glasses, that M to the phi of N just looks like a measly little 1.
So M to the phi of N raised to the F, by the power law, that looks like 1 to the F.
And 1 to the F is 1, so I can ignore that to get M.
So what we've shown here is that C to the D mod N is following that chain of equal signs and congruences.
C to the D mod N is congruent to the number M mod N.
But hold on, I didn't want to say congruent, I wanted to actually get equals out of this.
But we're in luck because C to the D mod N is some number between 0 and N.
And our message M, if you remember, that had to be a number between 0 and N.
That's why we said our message had to be under 1,000 characters long, less than 2,000 digits long.
And so if two numbers are congruent mod N, but they both live between 0 and N, they have to be the same number.
Therefore, C to the D mod N is equal to M.
You may need to run through this proof once or twice before it fully sinks in, but that's it.
That is practically everything you need to know, except for the fact that I cheated, but just a little.
Remember the step where I pulled in Euler's theorem?
Where I said, wait a second, folks, I said M to the phi of N is congruent to 1 mod N. Remember that?
But you have to also remember there's a preamble to Euler's theorem.
In order to use it, you need M and N to be relatively prime.
How do I know that M and N are relatively prime?
What would happen if M and N weren't relatively prime?
Well, first of all, what can the greatest common divisor of M and N be?
What is the number N, after all?
N is P times Q.
It's the product of these prime numbers P and Q.
What are the divisors of P and Q?
What's the divisors of P times Q?
1, P, Q, and P, Q. That's it.
And M is less than P, Q.
So the greatest common divisor will either be 1 or P or Q.
Can it be P or Q?
Well, technically it's possible, but the probability that M is a multiple of P is about 1 and P.
And the probability that M is a multiple of Q is about 1 and Q.
So the probability that it's a multiple of P or a multiple of Q is about 1 and P plus 1 and Q.
And I claim that's zero.
I mean, really, P and Q are numbers like 10 to the 1,000th power.
So the probability that your number is a multiple of P or Q,
you would be more likely to be struck by lightning and win the lottery on your birthday.
OK. You probably want to see a numerical example.
So let's do a small one.
Let's say P is 71.
I'd say that's our secret prime number that nobody knows about.
P is 71 and Q is 79.
So there N is P times Q is 5,609.
OK. So everyone in the world knows 5,609, but nobody knows how to factor it.
Only we, only the bank, knows how to factor it.
And then the bank calculates P of N, which is P minus 1 times Q minus 1.
That's 70 times 78 is 5,460.
OK. So the bank says I need a secret number that's relatively prime to 5,460.
And 5,460, that's 60 times 91.
So that's divisible by 60, 2, 3, 5.
91 is 7 times 13.
So we just have to find a number that doesn't have any of those prime factors in it.
I chose the number 341 because 341 is 31 times 11.
And that doesn't have any factors in common with 5,460.
OK. So Euclid's algorithm is smart.
It calculates an integer combination of 341 and 5,460.
We get it right here.
341 times 13,61 minus 54,60 times 85 is 1.
So we found our E, namely 1,361.
So that's the enciphering number that the world is allowed to see.
OK. Then, so we have n is 5,609.
That's public.
D is 341.
That's private.
E is 1,361.
OK. So now let's say we want to send a short message to the bank, like, hi.
OK.
So what do we do with hi?
Hi, hi is the eighth letter and the ninth letter of the alphabet.
So our message m would be 0809.
Notice that number is less than n, our modulus, 5,609.
So that's a valid message.
Then, to create the ciphertext c, we raise m to the e power mod n.
So we take the number 809, raise it to the 1,361 power mod 5,609.
Since our computer knows how to do seed planting,
it can actually do that calculation easily.
OK.
So that's equal to 4,394.
The bank will decipher our message by taking 4,394, raising it to its deciphering number 341,
mod n, mod 5,609, and sure enough, out pops 809.
So the bank knows that we've sent it.
Hi.
Incidentally, if both the bank and the customer have their own public key crypto system,
then the customer actually has a way of providing digital signatures
so that the bank can trust that the message actually came from the customer.
Not only can do digital signatures work,
but the message that you send, the message that the bank receives is unforgible
so that the bank can figure out that only you were the one capable of sending the message.
And just as importantly, your signature is message specific,
so your signature can't be forged or attached to a different message,
nor can you claim that you sent a different message.
Wow.
Look at all these applications.
We've got public key cryptography.
We have digital signatures.
What would Hardy say to all this?
By the way, there's another neat connection between Euler and Fermat
that I'd like to tell you about.
In the year 1729, when Euler was 22 years old,
Christian Goldbach, you remember him from Goldbach's conjecture,
he posed another conjecture to Euler that was given by Fermat.
Fermat observed that the numbers 2 to the 2 to the 0 plus 1 is 3,
and 2 to the first plus 1 is 5,
and 2 to the 2 to the 2nd, that's 2 to the 4th plus 1, is 17,
and 2 to the 2 to the 3rd plus 1, that's 2 to the 8th plus 1, is 257,
and 2 to the 2 to the 4th plus 1, 2 to the 16th plus 1, 65,537,
and he noticed that all of those numbers were prime.
And he conjectured that 2 to the 2 to the nth power plus 1 would always be prime.
Now, at the time, Euler was not so interested in number theory.
It was somewhat unfashionable these days for mathematicians to demean themselves
with the study of numbers.
But he was intrigued by this problem, and after thinking about it,
he disproved Fermat's conjecture by exhibiting a counter-example.
He showed that 2 to the 2 to the 5th plus 1 actually was composite.
That is, it's 6,700,417 times 641.
My understanding was he did most of that in his head, too.
Now, no other Fermat primes have been found beyond those first fives.
That's kind of interesting.
Not only was Fermat wrong, he seemed to be wrong in a very big way.
But this sparked a lifelong interest in number theory by Euler.
Gauss, by the way, was also inspired by Fermat numbers.
He was the first to construct a regular 17-sided polygon using ruler and compass.
And this was an open question from Euclid, 2,000-year-old problem he solved.
He noticed that 17 was a Fermat prime,
and he stated that a regular n-gon could be constructed using ruler and compass
if n is of the form 2 to the power m, some number n,
times the product of a bunch of distinct Fermat primes.
And this sparked his interest in staying on in mathematics
instead of pursuing another subject.
Anyway, Goldbach's letter to Euler was written in 1729,
and that's also interesting, which brings the mathematician Hardy into the picture.
Now, this is a very, this is a classical story, a famous story,
that Hardy was visiting a collaborator of his, Srinivasa Ramanujan,
a self-taught Indian mathematical genius of the highest order.
And he was visiting Ramanujan in the hospital one day,
and he said, to make small talk, he said, you know,
the taxi ride was kind of dull.
The number on the taxi was 1729, the year of Goldbach's letter,
and I couldn't think of anything mathematically interesting about it.
And Ramanujan said, oh no, Hardy, it's a very interesting number.
It's the first number that can be written as the sum of two cubes,
positive numbered cubes, in two different ways.
That is, it was, it's 10 cubed plus 9 cubed,
and it's also 12 cubed plus 1 cubed.
Now, we may not all have the genius of Ramanujan,
but I hope that we've learned to appreciate numbers in a whole new light.
And that we've seen that numbers are far more interesting
and far more applicable than Hardy, Ramanujan, Gauss, Fermat, Euler,
or Euclid ever imagined.
