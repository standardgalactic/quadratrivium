Welcome to the 22nd lecture in our course on quantum mechanics.
We've been talking about quantum information.
That's the type of information that is carried by quantum particles.
And quantum information follows a different set of laws
from the familiar classical kind of information.
One example was the no-cloning theorem.
Quantum information cannot be perfectly copied.
We also talked about quantum cryptography.
We talked about the BB84 method for quantum key distribution.
We used quantum physics to keep our secret messages secret.
In the last lecture, we talked about Charles Bennett's four laws for quantum information.
These were laws about information resources, bits, qubits, e-bits, all of which are related.
And we found, for example, that if bits are freely available,
if we can have them for free without paying for them,
then a qubit is worth the same as an e-bit.
They're basically the same thing.
And a qubit, if entanglement is free, if e-bits can be had for nothing,
then a qubit is worth about the same as two bits.
Now, entanglement has some strange implications in these laws.
We saw this in dense coding and quantum teleportation.
In each of these, we are tempted to say that some of the information
actually goes backwards in time somewhere in the process.
In other words, our everyday language struggles to cope with the nature of quantum information.
In this lecture, we're going to explore the full power of quantum information.
In this lecture, we will imagine a quantum computer,
and we'll see what we can do with it.
Now, computer technology has advanced with breathtaking speed over the last few decades.
Gordon Moore, one of the inventors of the microprocessor, proposed something called Moore's Law,
which, roughly speaking, says that computer power is increasing exponentially.
Computer capabilities double about every two years.
And this has been going on since the 1960s, when Moore first made this observation.
If you double your power every two years and you do it for 40 years,
something amazing has happened.
And it's also the case that the basic circuits used in computers
are getting smaller and smaller at about the same rate.
The circuits operate faster. They use less energy in the course of the computation.
So for the future, let's suppose that Moore's Law continues to hold true.
Let's extrapolate.
Well then, in about 20 years, maybe sooner, we'll be trying to use individual quantum particles
for our basic computer components.
We will need to be designing quantum computers.
Now, quantum computers do not just do the same thing on a small scale
that an ordinary computer does on a large scale.
The microscopic realm is not just a miniature version of the macroscopic realm.
And it would not make sense to try to force quantum computers
to operate in exactly the same way as present-day computers do on the larger scale.
Furthermore, quantum mechanics may afford some other possibilities,
some novel ways of doing the computation.
So we should be on the lookout for that.
What is a quantum computer?
Well, a quantum computer is a computer in which the memory elements are qubits.
The qubits can be in basis states 0 or 1, like a regular bit,
but they can also be in superpositions of 0 and 1, unlike a regular classical bit.
Furthermore, many qubits might be entangled together.
No classical computer can do that.
The qubits could be in one of these strange, entangled quantum states.
What are the qubits?
Well, it doesn't really matter whether the qubits are represented by photons or atoms or electrons.
Whatever physical realization they have, they act as qubits.
During a computation, a quantum computer operates without any measurements of any kind,
even inadvertent measurements. We don't even make measurements by accident.
And because there are no measurements, the computer state, the state of the whole quantum computer,
evolves according to update rule number one, the rule that held when no measurements are made.
Of course, at the end of the computation, we'll need to go and do a measurement on the computer
in order to read the output. There's a measurement at the end.
But while the computer is running its computation, no measurements are made.
It's all update rule number one. No randomness involved, actually.
So this presents us with a kind of a strange way to do a computation.
The computer actually follows multiple paths, multiple computational paths at the same time,
analogous to the way that a photon could follow more than one path through an interferometer.
And as the computer operates, no physical record is actually made of which of these computations is done.
It does them all. And then at the end, it combines the results of all these different computational paths
and does a kind of interference experiment at the end.
That opens some wild possibilities.
Now, quantum computing is still, for the most part, a theoretical subject.
Later on in this lecture, I'll talk about some real experiments.
And quantum computing is studied by a really interesting interdisciplinary group of physicists,
mathematicians, computer scientists, even a few engineers.
One of my colleagues is a professor of mechanical engineering at MIT.
Presumably, he's a professor of quantum mechanical engineering.
So the question that this miscellaneous group of scientists is asking is,
if a quantum computer existed, what could be done with it?
Does quantum computing provide a shortcut for solving important problems?
And the answer is, yes.
A quantum computer can solve some math problems much more efficiently than a classical computer.
And so we're going to describe three of the most important examples of that.
The first example I want to describe, and in fact,
the first example that really proved that quantum computers might be something very special,
is the so-called Deutsch-Joseph problem, which was first analyzed in 1992.
And this was worked out by David Deutsch of Oxford University
and Richard Joseph of the University of Bristol, one of the authors of teleportation.
And this is the first problem that showed that quantum computers could be far more powerful than ordinary computers.
On the other hand, the problem's a very artificial one.
So as I described it, you may have the reaction, why would you be interested in that?
But the point is this was just the first gleam of the idea that quantum computers might be more powerful.
So it's worth taking a minute to examine the details of the Deutsch-Joseph problem.
One of the things that a computer often does is it evaluates functions.
In other words, it takes some inputs and it computes a number.
It's a very basic type of computation.
It takes a set of numbers and it calculates the sum.
It divides one number by another.
It's all evaluating functions.
And so what we're going to do is we're going to consider kind of an abstract version of that.
The function we're going to call f and the input of the function is a number n.
And the number is between 1 and some very large number m, the maximum value.
Because it could be, you know, billions.
Between 1 and capital M, the number is somewhere there.
We feed that number to the function and it gives us an output.
And for simplicity, we're just going to imagine a function whose output is either 0 or 1.
Now that sounds pretty simple.
But it might take a lot of calculation to figure out the value of the function from its input.
It might take huge numbers of computations to work it out.
It might be a really hard function to evaluate.
But in the end, we're going to say 0 or 1.
Now, what we're going to want to know is not something about this value of the function or that value of the function.
We're going to want to know something about the overall properties of the function.
That's kind of a tricky thing to get at.
So in the Deutsch-Joseph problem, we imagine that we already know that the function is one of two types.
The function is either a function that's constant.
It always gives 0 or 1 as its output.
Or the function is a balanced function.
It gives 0 or 1 equally often for its output.
So we have a function.
It's either constant or balanced.
The question is, how many times do we have to evaluate the function to tell for sure which type it is?
So imagine that we're doing this on a classical computer.
We tell the computer, start calculating the function.
Start evaluating f at 1 and f at 2 and so on.
And f of 1, we get 0.
All right, that's a piece of information.
f of 2, well, if that's something besides 0, we know that it's a balanced function instead of a constant function.
Well, let's suppose f of 2 is 0 as well.
All right, maybe it's constant.
I don't know.
f of 3, 0, maybe it looks like a constant function.
If they're always the same, we conclude that f is constant.
But how many calculations of f do we need to make to be sure?
Because it might be that the function is 0 for the first half of the numbers and then 1 for the second half of the numbers.
In that case, we'd have to evaluate all the way up to the halfway point and then 1 more to be sure.
And indeed, that's how many we have to evaluate to be sure.
We have to evaluate m over 2, m's our maximum number, plus 1 to be absolutely sure.
And that might be a huge number.
We might have to evaluate the function an enormous number of times.
That's lots of work.
It might take a really long time on our computer.
What Deutsche and Joseph said is, suppose we're calculating this function on a quantum computer.
They proved that we can answer the question of whether the function is balanced or constant
by evaluating the function, calculating the function only once.
But you calculate the function using a superposition of all possible inputs.
In this process, you learn nothing about the individual values of the function.
You don't know whether they're 0 or 1.
What you find out is a property that's a property of all of the values taken together.
It's a shortcut.
The key point is that this computer is not, this quantum computer is more powerful,
not because it does the usual stuff in a faster way.
It doesn't just calculate the function many, many times very quickly.
It somehow calculates the function all at once for all kinds of inputs.
It's powerful because it does new stuff, stuff that a classical computer could never do.
Now, something that came along a little bit later and is even more interesting than the Deutsche and Joseph problem
is the inverse phone book problem, which was discovered by Loew Grover at Bell Labs in 1996.
Now, this is actually a problem that almost everyone has in fact run into.
The phone book is an alphabetical list of names.
And then next to each name, there's a phone number.
And the fact that it's in a book doesn't really matter.
You might have an electronic database.
The whole point is that it's sorted by name.
First, there's the first name in the alphabet, then the second name and so on.
And the phone numbers aren't in any particular order.
They're just associated with the names.
Now, suppose I have a piece of paper on which I've only written the phone number.
Whose number is it?
Well, the only way to really solve that, besides calling them, is to sit down with the phone book and go through the phone book one by one
and compare my phone number with each entry in the book until I find it.
How many entries do I have to check in the book, in the phone book, in order to find out whose phone number it is?
Well, let's suppose we have a pretty thick phone book.
Let's suppose there are a million entries in the phone book.
Now, a classical computer or me would have to look up on average half of them before they ran across the right name to go with the number.
That's 500,000 entries they have to consult on average.
And the worst case is that the phone number happens to be the last one in the book,
in which case I would have to consult 999,999 before I got to the name that was the name in the book.
So that could take a long time.
Now, in point of fact, computers operate so fast that a million really doesn't take very long.
But if the phone book were actually a million times longer or if you had to do this problem 100,000 times, it would become a challenge.
So here's what Grover said.
Grover imagined that the phone book data was actually on the quantum computer.
The quantum computer could look up the phone book entry in its own memory.
And he showed that the quantum computer can find the name associated with the phone number by consulting the phone book not half a million times, but only 1,000 times.
1,000 being the square root of a million.
But the way it consults the phone book is completely bizarre.
It actually looks up a superposition of all of the phone numbers.
It consults every name in the book and it does this over and over again.
And what happens is there's a kind of constructive interference that after only 1,000 times pulls the name out of the phone book.
This is amazing.
This is amazing.
Instead of having to consult it half a million times, just 1,000 times.
And this isn't really just about phone books.
I phrased it that way because that's a problem we're all familiar with.
No, no.
The problem is really about searching for some unique target in a large set of possibilities.
There's some target I want to find.
I don't know where it is.
How can I find it?
It's looking for the needle in the haystack.
And the point is that quantum computers can look everywhere in the haystack at once.
And they can find the target.
The needle in on the target far more efficiently.
Finally, let's talk about the most exciting idea of all.
The idea of quantum factoring.
This was discovered by Peter Shore, who's now a professor at MIT, but at this time he was at Bell Labs.
This is 1994.
Shore considered the problem in which we're trying to find the factors which would multiply together form a number.
So we're given a very large number, perhaps a number with hundreds of digits.
And we know that this number is the product of two smaller numbers.
Now the two smaller numbers are themselves prime.
They don't have any smaller factors.
So we have a very large number, which is the product of two smaller numbers that are prime.
So if our large number is 100 digits long, the two factors might each be 50 digits long.
And so the problem is, given the number, the large number, can we find the factors?
This is the factoring problem.
Can we find the two numbers which, when multiplied together, gives us the original number?
Now on a classical computer, this is a hard problem.
How hard is it?
Well, a 200-digit number was recently factored.
It was a big achievement.
It took hundreds of computers working together for over a year to find the 200-digit factors of the 200-digit number.
And it's not that the problem just increases in difficulty slowly.
It increases in difficulty very quickly with the size of the number.
A 500-digit number is not just two and a half times as difficult as a 200-digit number.
It's not even two and a half million times more difficult.
A 500-digit number is so difficult that if you turn the entire observable universe into a computer
and you ran at that top speed for billions of years,
you would never find the factors of a 500-digit number at the product of two large primes.
No imaginable classical computer could do the job of factoring a 500-digit number.
What Peter Shore showed was that a quantum computer can factor numbers in a new super-efficient way,
a way that's nothing like a classical computer would try it.
And using the Shore method, a 500-digit number is actually only about 16 times more work to factor than a 200-digit number.
In fact, a 500-digit number is only a million times harder than a 5-digit number.
And a 5-digit number takes almost no time at all on a computer,
so we could factor a 500-digit number, a number that would be too hard to factor
with a classical computer of any imaginable size.
What Shore showed was that factoring large integers is exponentially faster on a quantum computer.
Now, why is everyone excited about this particular math problem?
Well, it turns out that lots of modern cryptography is based on the difficulty of factoring numbers.
Basically, it works like this.
Alice and Bob possess the factors, they use them for encryption.
The eavesdropper Eve only knows the product of the factors.
She can figure that out.
Now, in principle, if she has that product of the factors, she could find the factors.
There's only one set of factors that will work, and so she could read the message.
So this scheme looks insecure.
But in practice, you use numbers that are so big that this is too hard.
And Eve just has to give up.
Secrecy is preserved.
Why?
Because although factoring large integers is possible,
it's really, really hard as a matter of computational practice.
However, if Eve can use a quantum computer, factoring is no longer that hard a problem.
So if a quantum computer could be created,
a lot of secret data out there in the real world would no longer be secret.
Of course, we can always fall back on quantum cryptography.
Even a quantum computer can't beat the no-cloning theorem.
So quantum information theory not only proposes quantum cryptography,
it also shows you why you might need it.
Now, a quantum computer would be powerful,
not because it is really small or fast,
but because it can do its computations in a completely novel way,
in a way that no classical computer could even contemplate.
So can such a computer actually be built?
It doesn't seem to contradict any of the laws of physics,
but it also might be something that's really hard.
And many scientists are working very hard indeed to build a real quantum computer.
And the basic questions they have to answer are questions like these.
What are the physical qubits?
What physical systems are we going to use for our qubits?
And how do we control the computer operations very precisely
to make the computation progress forward?
And so here are some ideas that are being worked on.
You might imagine you have some super cool atoms suspended in a vacuum
in some laser beams.
And the operations are controlled by shooting laser beams at the atoms individually.
That could act as a quantum computer.
Or you might imagine that you had nuclear spins,
the spins of atomic nuclei,
aligned in a magnetic field controlled by radio waves.
That's another possibility.
You might imagine that you had superconducting electric circuits
near absolute zero that could interact with each other.
That's an idea.
You might imagine that you had single electrons
that you were able to move around inside the body of a semiconductor like silicon.
That's another possibility.
With all these ideas, though,
and with quite a lot of investment being made in trying to make them work,
even the best efforts so far, as I speak,
have only managed to have a few qubits working together for a few seconds
to do a quantum computation.
We're still quite a bit short of what we'll need to crack secret codes.
Well, why is it so hard to build a quantum computer?
This is kind of interesting.
The builder of a quantum computer faces a fundamental dilemma.
On the one hand, the computer must be extremely well isolated from the outside world,
because otherwise, strain molecules and photons and so on
would make little inadvertent measurements of the computer's state.
And whenever a measurement is made, even if it's not something we intended,
that interrupts Update Rule 1, the rule that preserves the superpositions in the computer.
And that's where all the quantum magic is.
And the computer has some sort of random error in it.
And so the computer has to be very well isolated from the outside world.
On the other hand, the different parts of the computer must interact really very rapidly with each other,
so that the computation gets done.
After all, we're not just trying to store information in the computer.
We're trying to manipulate it.
We're trying to have this qubit and that qubit talk to each other.
So the qubits can't talk to the outside world, but they have to talk to each other.
And the kinds of qubits that won't talk to the outside world also don't talk to each other.
And the kinds of qubits that talk to each other are also happy to talk to the outside world.
The two impulses are in direct conflict.
We don't know how to satisfy both requirements at once.
Now, there is some good news.
The good news is we don't have to be perfect.
It's been discovered that there are techniques for quantum error correction.
So our computer is going to be able to tolerate a little interference
and still manage to keep the computation going in this wonderful quantum way.
Bad news is even so, even with quantum error correction ideas,
nobody knows how to resolve the fundamental dilemma of quantum computing.
There's an interesting historical precedent here from the middle of the 19th century.
In those days, an English mathematician named Charles Babbage
designed mechanical equivalents of modern computers.
Instead of electronic circuits, he had lots of tiny little gears and rods and wheels and cams.
Babbage thought of a lot of the ideas of modern computers,
but he thought of them in terms of little mechanical devices.
Now, unfortunately, 19th century machine tool technology was not quite up to his designs.
And Babbage's efforts actually improved machine tool technology,
improved our ability to make precise machines,
but even so, he spent decades in vain trying to build his analytical engine.
His ideas about computing were right,
but they were not put into actual practice until the development of electronics in the 20th century.
Mechanical computers really were never going to work very well.
It wasn't until we had a different way of putting the ideas into practice
that we were able to actually make the computers that Babbage foresaw.
Now, present-day attempts at quantum computing using atoms in traps or nuclear spins
or superconducting loops or electrons and semiconductors may be like Babbage's wheels.
It may be that we have the right ideas, but we have the wrong technologies.
Who knows how long it will be before we have the right ones?
Okay, why should we be interested in quantum computing?
Because we want to read financial secrets on the Internet? No.
I think it's because our modern picture of the world is that the world is a huge information network.
In some sense, we think of the world as a kind of computer.
The universe is a computer.
The computer takes the present as input and it computes the future.
So the universe does this by a kind of information processing, a natural information processing based on the laws of physics.
And so I think we're interested in quantum computers because thinking about quantum computing tells us something
about how nature's own computation based on the laws of quantum physics may work.
Now, the story of quantum information and quantum computing is far from finished.
It's still a very young subject.
There are new discoveries being made all the time.
And these discoveries disclose basic features of quantum mechanics that we did not know.
I think we've learned more about the basic features of quantum mechanics in the last 10 years than we learned in the previous 30.
And so quantum information and quantum computing shed new light on the theory of quantum mechanics.
These ideas sort of help us find ways to get our minds around the puzzles and paradoxes of the quantum world.
Next time, we're going to begin the final section of the course.
We're going to turn to the deepest questions, to the philosophical questions, really.
The same questions that haunted Einstein, Bohr, and the others right from the start.
What is the meaning of quantum mechanics?
What does it tell us about the nature of the physical world?
How can the universe be like that?
We're going to ask, what's the right way to interpret the abstract theory of quantum mechanics?
And it turns out there are several quite different schools of thought.
Different schools of thought, different in their ideas about quantum probability, different in their ideas about measurement, different in their ideas about reality, different in their ideas about human experience, and so on.
Every one of these schools of thought about the interpretation of quantum mechanics share one thing in common.
Our common sense beliefs about the world must be greatly altered to accommodate the facts of quantum physics.
So next time, the interpretation of quantum mechanics.
I'll see you then.
