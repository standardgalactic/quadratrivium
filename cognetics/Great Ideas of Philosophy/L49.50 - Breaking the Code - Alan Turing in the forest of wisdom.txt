Lecture 49, Breaking the Code, Alan Turing in the Forest of Wisdom
Alan Turing is a contemporary in more ways than one. He died in 1954, so at least for some of us he certainly falls within the window of our own time frame.
His writings and theorizing are so ever present in this world of computational and computer science and computational models of the mind that one gets the impression that Alan Turing is still writing these papers or indeed guiding dissertations on these subjects.
He's a fascinating figure, a tragic figure in his own right. Born in 1912, British, a prodigious intellect evident from the very earliest times.
One of those people destined to be a mathematician and to worry about problems that almost nobody ever worries about except that small class of abstract thinkers who can only find a place and function in life by removing themselves from it.
During the Second World War, he was assigned to a secret project at Bletchley Park associated with breaking enemy codes. He was engaged in cryptographic and cryptological work.
He had a team working under him and he was instrumental in breaking what the German High Command had declared to be an unbreakable code.
He and his group were successful in breaking the so-called enigma code. They did have some help in this. They actually got hold of one of the instruments.
But it was an extraordinary achievement. This was a code that allowed the Allies to plot and shot strategic maneuvers by the enemy for a period of years.
I think I should like to say something about breaking a code and what kind of mental activity this is.
It's not like doing a crossword puzzle or a double cross-stick. You actually have to get in the mind of somebody else. This is what breaking a code is all about.
I wonder what this person would be doing as a way of signaling this, that or the other thing and signaling it in such a way that I won't be able to figure it out.
So there's a tremendous empathic faculty or power that's needed here, a great elasticity of thought, being able to think as others think while preserving the integrity of your own thought.
I think there's so much in touring that reflects just that talent. What we find in his most famous accomplishments is the question, how does anybody go about solving a problem?
This is like the Code Breaker's task. How does anybody go about solving the problem of putting together an unbreakable code?
I'm going to get back to this feature of Turing's contribution where what he's wondering about is this.
He says, look, let's take a simple problem, an arithmetic problem, and what I do to handle an arithmetic problem.
Now, might that not be something that could be done in a general or universal way?
Couldn't we achieve this in some other way? I'm doing it, and of course whatever I'm doing, I should be able to get something else to do, at least if I get clear what I'm doing.
Alan Turing was a homosexual, and he wasn't coy about it. He wasn't flagrant about it.
He was about as discreet as a fellow of Alan Turing's innocence could be. It got him in trouble.
He did enjoy great celebrity for his achievements during the war.
He was always respected, deeply admired by that small fraternity of people in mathematics, but his life soon became unbearable to him.
Some of the relationships he entered into were not of a particularly elevating sort, and Alan Turing in 1954 killed himself.
A great, great loss, I'm sure, to his friends, and of course a great loss to the intellectual world at large.
It's actually a quite successful and faithful drama based on his life, which I think is titled Enigma, which was the code that he...
Now, mathematicians are always giving themselves impossible problems.
There's probably a separate psychology that should be done on the mind of the mathematician, and it might be quite a sketch to get 15 or 20 of them in a room
and just listen to what it is they talk about.
There's a search here for a kind of truth that may have absolutely no bearing on anything at all.
And a search for great abstract principles that are universally applicable in all circumstances, no matter what.
Mathematicians at once relish and are punished by problems that can't be settled or decided.
Now, one of the bequests of the world of mathematics, bequests available to Alan Turing's generation,
was a challenge to come up with a general solution, a general statement, a general algorithm, problem-solving technique,
by which to determine whether a mathematical problem was solvable.
Do you see?
Is there some general way of establishing whether or not a problem in mathematics is solvable?
So you'd know in advance this is a decidable one, or it's not a decidable one.
Turing was one of a small army of people working on problems of that kind.
That's what he was doing when he wasn't breaking enemy codes and the like.
Well, he didn't come up with a solution to that.
He did come up with a quite general solution, however, by which he was able to establish whether a problem was a computable problem,
that is whether a problem finally could be dealt with computationally and was decidable by some computational procedure.
Now, let me give you an example of a problem of this kind, just so you can reach for something when you try to think of the domain in which Turing's thoughts operated.
A mathematical problem is decidable when, in fact, there is a problem-solving algorithm that you've found for it.
You've got a technique or a device that will handle problems of a certain kind.
Probably the most common algorithm would be arithmetic,
so that all problems of addition, multiplication, subtraction, and division can be handled by use of arithmetic, the rules and principles of arithmetic.
You'll always get a right answer to an addition problem when you use arithmetic,
so arithmetic is a slam-dunk solution to a problem, always works, you always get it right.
That's the algorithm for that task.
Now, Fermat, in the 18th century, there's a book out called Fermat's Last Theorem.
I mean, so all sorts of wonderful enlightenment issues are coming forward again.
Fermat, as his last theorem, offered this,
x to the n plus y to the n equals z to the n
has absolutely no solution in integers for any value of n larger than 2.
And Fermat claimed, and there's reason to believe that here he claimed falsely,
Fermat claimed that he had a proof of this, but nowhere could the proof be found
and he didn't quite sketch it out at the time and the like.
In fact, if I'm not mistaken, the actual proof of Fermat's theorem waited until 1994
when a Cambridge graduate at Princeton, Professor Wiles, produced a proof of it,
and I think it's a proof that runs over 200 pages.
So when I say that Turing had bequeathed to him one of these core mathematical problems,
how do you find a general universally applicable solution or answer to the question,
is a mathematical problem decidable, is it undecidable and the like?
That's the domain he's working in.
Now, to determine whether a problem is computable,
Turing asked himself, how do I compute?
That is, he actually took the domain of the mental as a model for what later will be,
famously in his work, the domain of computers and computer operations.
Well, suppose you take something like addition.
You have a large column of numbers and you go down and you add them up
and you carry the remainder over to the next column
and you carry its remainder over to the next column
and it's a step-by-step procedure you generally add one at a time.
There really is no limit to the number of these things you can do.
The only limit is your own mortality.
An arithmetic problem could contain numbers that run from here to the end of the universe.
The same algorithm will give you a correct sum just in case there finally is a last number
and you live long enough to do the arithmetic.
Well, suppose in fact you had an infinitely long tape,
a tape without limit on which you could inscribe certain symbols.
In fact, you'd need very, very few operations.
You'd need an operation for putting a symbol down or erasing the symbol
or having put the symbol down, moving the carriage or the armature in such a way
as to put a symbol next to it, just something like that.
The question is there anything in the computable realm
that couldn't be represented by an instrument of that kind,
assuming that the tape is long enough and that the symbology is,
shall we say, appropriately economical?
For example, suppose I say where there's nothing, the symbol is zero.
Where there's one, the symbol is zero-one.
Where there's two, the symbol is one-one.
Where there's three, the symbol is one-one-one.
Where there's ten, the symbol is one-zero.
Suppose I just do that.
Any positive integer could be represented then just by stringing out zeros or ones.
And presumably then any number of positive integers could be added or subtracted
or divided because division is just serial subtraction
or multiplied because multiplication is just serial addition.
So the entire domain of arithmetic certainly could be handled by so simple a device
with very, very few characters, very, very few moving parts
and just a strip of tape long enough for all theoretical purposes,
infinitely long to handle a problem of any complexity.
Of course, I can code things other than numbers.
In fact, we have mechanical devices that do this all the time.
You go to a vending machine.
If you put in 25 cents, let's say, you get a cupcake.
If you put in 50 cents, you get a can of ginger ale.
Now, there are probably children who think somebody's inside this thing.
You know, the Wittgenstein, only Smith can see the contents of his own mind.
Well, there's a sort of childish view that says,
well, if every time I put a quarter in, I get a cupcake
and every time I put 50 cents in, I get a can of ginger ale,
there must be some little person in there who catches the quarter
and says, you only get a cupcake for that and so forth.
But of course, as we know, there isn't anybody in there.
But there is something in there and there's something reading, as it were,
something reading the input.
And maybe reading the input solely in terms of the number of circular objects
of a certain dimension that interrupts a light path
and the number of times it does that per unit time.
And if it does it twice per unit time,
there's a gearing mechanism that releases ginger ale
and if it does it only once, it releases cupcakes.
This whole thing can be played out that way.
Is there any doubt in anybody's mind
but that you can put an airplane on automatic pilot
with the same reasoning, have it get from Chicago to London
without the intervention of a human navigator?
Do you see?
So the argument that begins to develop is that any problem
that indeed can be expressed in a series of steps
can be modeled by a device of this kind.
The first thing you have to do, of course,
is to determine whether the problem indeed is modelable.
Is it that kind of a problem?
And that becomes just a species of the genus computable.
Is it a computable problem?
Turing's technique for doing this was to lay out in tabular form
the number and manipulations of symbols that would work
just in case a problem is a computable problem
and wouldn't work if it were not a computable problem.
Do you see?
That layout is what is rather misleadingly referred to
as a Turing machine.
A Turing machine is, well, first of all,
it's not a machine you take out on Sundays to tour around in.
It's a Turing machine as in T-U-R-I-N-G.
And it's not a machine as in a wearing blender
or a washing machine.
It's a table of sorts.
It's a kind of logic table
or really a kind of mathematical table of proofs
that lets you know whether indeed a string of inputs
will allow the right kind of computational operation
such that outputs faithfully represent
or serve as substitutes for the input.
Well, we've made a lot of headway
because what we discover then
is not only arithmetic operations,
but indeed any number of recognition tasks
can be modeled by such a procedure.
And therefore, experience itself presumably could be modeled
by such a procedure if you take experiences
to be experiences in time and space,
experiences of things with extension.
If you've got a device that reads quarters,
you can have a device that reads dollars.
If you have a device that reads dollars,
you might have a device that reads,
whether it's Uncle Harry or Aunt Jane.
You might have some kind of pattern recognizing device
that indeed itself is based on computational operations.
If this, then that.
If that, then this.
And that's what the moving tape is doing.
If I come to a one, I go down one notch.
If I come to a zero, I go up one notch.
And depending upon whether I'm going down
or going up a notch or two notches or five notches,
I turn on the water or I turn off the fire alarm
or more oil is added to the burner, et cetera, et cetera.
Whole buildings are maintained this way,
and they're maintained by essentially computational devices
of a turing nature that are simply taking input signals
and providing the corrective or adjustive or adaptive.
Well, well, well, what's an intelligent being then?
How should we understand human intelligence?
What does it mean to say that man is a rational being as such?
Well, doesn't it mean where problems are?
Isn't that finally what's at the bottom of being intelligent?
That you give us inputs of a certain kind,
through the right kind of coding and computational procedure,
we serve our outputs.
I know, without even being reminded,
that there's more to us than that.
We, as Aristotle says in the rhetoric,
young men have strong passions,
which they tend to gratify indiscriminately.
They love too much and hate too much.
I know all about that.
But when we refer to ourselves as intelligent beings,
it's not because we love too much or hate too much.
It has nothing to do with sentiment or passion.
It's problem-solving ability.
We describe ourselves as rational beings in the history of philosophy.
This generally means we've put all the sentiments and emotions on hold.
So the question that Turing raises then is,
if to be intelligent is to be a problem-solving sort of entity,
and if, in fact, with the right computational resources,
well, almost any expressible problem, any decidable problem,
any computable problem, is going to be solved?
Well, let's re-examine what we mean by the nature of mind as such.
Turing wrote a very famous article in The Journal Mind,
a journal that had been founded by Alexander Bain,
Computing Machinery and Intelligence.
It came out in 1950, an extremely influential article.
And in Computing Machinery and Intelligence,
Turing is raising the $64,000 question.
He's raising the question of the day.
Is there anything about us that is significantly different
vis-a-vis a properly programmed computational device?
Is there anything about us as rational problem-solving beings
that is, in principle, not expressible by a properly programmed,
sufficiently powerful computational device?
Now, how do you want to set up the test
to determine what the right answer to that question is?
Well, Turing proposed this test.
In fact, it's called the Turing test.
Take a human being and something else.
We need not go into what the something else is.
What we're going to do is we're going to put both of them behind curtains
so that an interrogator doesn't really know what's behind which curtain.
And what we're going to do is we're going to address questions
to each of these entities.
Questions that require problems to be solved,
certain facts to be recognized,
certain propositions to be put together in a certain way, and the like.
Well, now, suppose it's the case.
You ask a question like this.
Are bachelors married?
No, no.
How do you get from Paris to New York?
What do you think the right temperature is for roasting potatoes?
Well, not yet can virtue be taught, but maybe can virtue be taught.
I mean, that's a higher order question.
That may not be computable, by the way,
and therefore nobody's got the answer to that.
So that will tell equally for or against what's behind either in both curtains.
Now, if it turns out that the productions from behind one curtain
match up well enough with the productions coming from the entity
you recognize to be a human being,
what are an intelligent being, an intelligent human being,
what are the grounds on which you would deny this other entity,
status as an intelligent being, other than mere rank, funky prejudice?
Now, understand what's at issue here.
What's at issue here is the definition of our humanity
as rational and intelligent beings.
If the proper definition of a rational intelligent being
is one which, who, in virtue of certain computational abilities,
a certain memory that has been read in, as it were,
by the programming functions of experience,
able to perform operations on those inputs
such that the outputs bear a coherent relationship to the input
and indeed function properly and allow the device itself
to achieve certain ends by way of problem solving, you've got it.
Human beings just happen to be biological instantiations
of something that can be instantiated nonbiologically.
It can be instantiated by galenium sulfide crystals,
by popping diodes, printed circuits,
and all sorts of things made in the Silicon Valley
and sold by Japanese companies.
So one of the questions raised by this entire venture
has to do with, I mean, when we go back to the problem of knowledge,
the problem of knowledge becomes a computational problem.
The problem of knowledge really boils down to this.
There are some things we can know, i.e. things that are
computably determined or decided,
and then there are other simple vexations of life,
you know, the questio vexata of the medieval period,
the things you're never going to have an answer to.
Well, if there are things you're never going to have an answer to,
that's true of computational devices also.
They're not answerable, they're not answerable,
and they're not answerable by anything.
If they are answerable, then presumably they're modelable.
The question that we'll admit of a solution
will have some algorithm out there.
You may not have it yet, but there'll be some algorithm out there.
Once you find it, questions like that get solved,
and 5 will get you 10, but the algorithm is finally
a computational kind of procedure.
One interesting consequence of this is that it's no longer
necessary to reserve the domain of intelligent life
to the domain of brainy life.
And so one thing I say that comes out of this
is what sometimes referred to as machine functionalism
in philosophy of mind.
The real challenge in philosophy of mind then
becomes not an understanding of how the brain works
as a biological entity,
but an understanding of the computational achievements
of an organ like this,
and the extent to which those achievements can be mimicked
or mirrored in any other kind of device,
any other kind of machine, properly programmed
and having sufficient power.
So the task for a developed philosophy of mind then
doesn't become a task in neurophysiology,
it becomes a task in computer science.
The brain then is just one kind of device
that does that sort of thing.
It can be achieved any other way.
And what makes a performance an intelligent performance then
is not that it's achieved by a brain,
but that it solves problems of a certain kind.
Thus anything that also solves problems of that kind
is performing intelligently.
So you do get this other sense of this only quasi-Jamesian,
really non-Jamesian sense of functionalism,
machine functionalism,
as a solution to the mind-body problem.
The mind now is an essentially computational instrument
which when properly programmed and having sufficient power
does it all.
Now I don't want to say that all this is attributable
to Alan Turing.
I want to say that he was an extremely influential person
in these developments
and is still widely cited for his contributions.
I present him as much as an illustration
of 20th century developments in philosophy of mind
and the linkage between philosophy of mind and computer science,
an important development that's likely to be with us for some time.
Well, let me introduce Alan Turing to Ludwig Wittgenstein
and, well, I don't know that I'd want to put it this way.
I was inclined to say,
let me mate Alan Turing and Ludwig Wittgenstein
and see if they might somehow give birth to,
with all due respect, let's say John Searle.
There's a problem in this Turing-like perspective on things
that certainly Wittgenstein would be among the first to notice.
And, of course, the problem is this.
In the interstices of this device inside this instrument
with its programming and so forth,
it's not clear what's going back and forth.
You've got these little symbols that are being recorded on a running tape.
Now what could they possibly mean?
Well, of course, they couldn't mean anything
because on the Wittgensteinian account, meaning is a social construct.
For anything to have meaning is for it to be given meaning
by a collection of beings who have a sufficiently shared form of life
to have covenantal and conventional positions
on just what linguistic utterances count for.
Now, as John Searle was ready to point out with the illustration of the Chinese Room,
I'll just do this very, very quickly.
John Searle famously has this sort of anti-computational thesis
regarding the nature of the mental, where he says,
look, suppose you had a bunch of Chinese ideograms written on cars
and then you had an instruction sheet, it might be in English,
telling somebody to go in, someone who knows absolutely nothing about Chinese
has never seen an ideogram, go in and find the one that has these shapes and patterns on it
and put it to the left, then find one that looks this way and put it to the right.
Now, if you keep this going inside what Searle famously calls the Chinese Room,
you might have these cards laid out in such a way that a native Chinese speaker
or reader of ideograms will see as telling a great story.
Of course, you have the foggiest idea of what any of this means at all.
You've simply been putting these patterns in an order based on some instructions.
So how have you functioned?
You've functioned in the manner, if you were a computer,
you'd be functioning as what is sometimes called a compiler program.
You're just taking something here and putting it there according to some instruction set.
And the fact that you constructed a meaningful sequence
does not suggest for a moment that you comprehend anything about it.
So meaning is entirely lost on you even as you go through all the procedures
capable of presenting something meaningful.
Now, to whom is this meaningful?
Well, it's meaningful to those who know the language, who share the culture,
who understand what's going on here.
From the purely computational operations of moving symbols left and right,
nothing follows as regards the existence of a genuinely mental life.
Searle thinks that what the missing ingredient is intentionality.
Intentionality here referring to meaning itself.
Searle is quite comfortable with the proposition that all of this,
which we refer to as our intelligence and like,
is achieved by the dynamics and functions of the brain.
So he's not leaving an essentially materialist account of mind.
But Searle takes it to be an essential feature
that a complex system like the brain and the brain recording
entire cultural experiences, values, and the like,
that's something like the brain is doing it
and that you are not getting intelligence properly understood.
Now, you're not getting intelligence out of a system
merely because you are getting computational solutions out of a system.
So I want to say that the world that Alan Turing did so very much to create
is a world that is not occupied by everybody in modern philosophy
and that there are indeed quite strong and principled objections to it.
Turing is like the Thagoras when I think of Turing.
Living in this realm of abstraction, a kind of pure realm,
a realm of symbols, the manipulation of symbols,
where the ultimate truths are not instantiated by physical things,
but rather by relationships, by truth relationships
and propositional relationships and the like.
It all takes place somewhere in the printed circuits, as it were.
It takes place in the spaces and times between the moving parts.
It's the way you set up the problem that generates the reality.
One of the Upanishads, which is referred to as the Forest of Wisdom,
where you have the master and his pupil sitting next to each other,
Upanishad next to the sitting next to, do you say?
And the master says, how do you see when the sun goes down?
And the pupil says, well, in that case, master, I see by the moonlight.
And how do you see when the moon is no longer present?
Ah, well, master, when the moon is no longer present, I see by candlelight.
And then when you blow out the candle, and there is no sun, and there is no moon,
and there is no candle, then how do you see?
Well, then, master, somehow I see by a light within.
Well, I think Alan Turing lived much of his life in the Forest of Wisdom
and saw by a light within.
