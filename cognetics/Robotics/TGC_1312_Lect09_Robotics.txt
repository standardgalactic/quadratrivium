How do we move from kits and hacks into designing and building more complex robots for commercial
and research purposes?
How do we scale up to build more complex robots?
First, you need people.
Complex robots like Baxter or Roomba are built by teams with different members specializing
in different aspects of design, construction, and testing.
Robot Madeleine is a complex robot that I want to tell you about to build our team at
Vassar partnered with a company called Necton Research in Durham, North Carolina.
This team included a biologist, a cognitive scientist, conceptual designer, mechanical
engineer, electrical engineer, and a systems integrator.
So in addition to your team, you also need money, at least to pay for gear and supplies,
and you may even need to pay some or all of the people on your team.
This is as true for students entering a robot competition with a school team, by the way,
as it is for researchers at the frontiers of robotics.
Now, you've got people, you've got money, third thing you need is a clear design goal
on a plan to get you there.
Complex robots are not a matter of luck or serendipity.
It's like designing and building any kind of complex electrical or mechanical system.
What's great about the process of engineering is that the proof is in the pudding.
If you can design it and build it, and it works, then you understand it.
In contrast, if something goes wrong and we cannot build the robot, then we've likely
failed to understand something fundamental about the design.
Our group had two goals in building robot Madeline.
First, I had a scientific goal.
I needed a robot that I could use to test ideas about how extinct animals with four
flippers, like plesiosaurus or chronosauruses of the Mesozoic Era, how they could swim.
I was particularly interested in why those giant ancient reptiles, who ruled the seas,
would swim with all four flippers, but the living species of vertebrates that had gone
back into the water, like sea lions and penguins, swam with only two.
Four versus two.
So I was interested in, hey, what's going on here functionally speaking?
To answer this question, we need to be able to control the flippers independently on a
robot, so we could vary the gait or pattern of flipper use.
Second, studying flippers also contributed to a performance goal.
Necton was a small company, and they wanted to create an amphibious robot, one that could
swim and maneuver in the surf zone and then crawl its way up on the beach.
Goals and a plan are crucial, but roboticists also need to keep something else in mind.
Every engineering project to create something new goes through a series of failures before
it succeeds.
This is really hard on people, right?
So the process of failing your way to success sometimes goes by the kind of neutral name
of prototyping.
It involves lots of trial and error learning as you go.
One way to get trial and error learning started is to first build the robot in computer simulation.
Copilia Robotics has created a software for doing just that called VREP, which stands
for Virtual Robotic Experimentation Platform.
It allows you to configure your robot and then program it in the same computer language
that you would do in your actual physical robot.
When you run your simulated robot in a simulated world, a simulation program like VREP lets
you model complex robotics platforms like path planning, or manipulators, or vision
sensory stimulation.
So as long as you have a good physics engine for your world and for your robot, simulations
can shorten development time of the actual physical robot by letting you try out and
compare different designs very quickly.
Now, truth be told, simulation was not something that we did when we built Robot Madeline.
The main reason that we didn't do this was that getting an accurate simulation of hydrodynamic
forces for flapping flippers is very difficult.
The math is extremely complex.
The specific problem is called, ready for some nerd speak here, closed loop hydroelastic
coupling.
And it took us about 18 months to build Robot Madeline, version 1.0, that you see here in
this clip.
During this period, we spent about four months just figuring out how to take our overall
goal and turn it into concrete specifications for building Madeline.
We knew that we wanted Maddie, as we call her, to be self-propelled, fully submersible,
and remote controlled.
And that happened through a cable coming out of the back.
Now, as you might imagine, there are a huge number of decisions that you have to make.
Every sensor, motor, part, size, and shape involves making the decision.
And it helps to have someone on your team who is the systems integrator to make sure,
for example, that the motors we select are compatible with the batteries that we choose.
You don't want to have batteries that simply can't supply the motors with enough power.
So it took another 12 months to make Maddie truly autonomous, a version that we called
2.0.
Part of the issue here was that we were applying a behavior-based controller architecture to
an underwater robot.
To our knowledge, no one at the time had ever done this before.
The big challenge is control.
You might detect an object and stop flapping your flippers, but you keep gliding towards
the object.
So we needed to figure out how to move Madeline slowly enough to avoid damaging her, but fast
enough to make progress so she could actually swim around.
The systems integrator on the project, Matthew Kemp, was the chief engineer on these issues.
Now, scientifically, robot Madeline was a smashing success.
We were able to show that four flippers were great for acceleration from a stop and for
braking.
But once Madeline got up to her top speed, the maximum speed was no different for swimming
with four flippers or two.
So here's the cool thing.
Given that it takes more energy to swim with four flippers, you might as well swim with
two if you are a cruiser.
But if you're a sit-and-wait predator, go ahead and use all four.
That was on the biology side.
Now for Necton, their commercial goal was also a smashing success with robot Madeline.
With special flippers that Necton patented, she could indeed swim in the surf and crawl
up the beach.
Robot Madeline was the first of her kind and ushered in a new era of flippered amphibious
vehicles called transphibians.
Robot Madeline was the first transphibian.
Necton's transphibian patent, by the way, was later purchased by, wait for it, iRobot,
the maker of Roomba.
And so their division of Necton became the start of an iRobot Marine robotics division.
So Robot Madeline was in a handful of television documentaries and was later on exhibit at
the Field Museum in Chicago.
Her most famous appearance was on a history channel show called Predator X.
It sounds dire, doesn't it?
On that show, she helped us to try to reconstruct the swimming and hunting behavior of one of
the largest underwater predators that ever lived back in the Mesozoic, Predator X.
So it was very cool and that got a lot of press because they were saying Predator X
could chew a giant car, this sort of thing.
So we're in the process now of building a completely new sort of robot, we're beyond
Robot Madeline.
And the name of that robot is Rabot.
And this right here that I've got on the table is actually Rabot 3.3.
I'm going to tell you about how we got to this floppy thing here on the table.
And it's not complete, by the way, it's underway.
The Rabot project is a collaboration between our Interdisciplinary Robotics Research Laboratory
at Vassar College and Farco Technologies, a small business founded and run by New York
University Professor of Engineering, Farshad Karami.
The impetus for us to build this fish-like robot came from the United States Navy's
Office of Naval Research, or ONR for short.
In 2008, they created and made a public funding solicitation that was called the following.
More NerdSpeak, you ready for this efficient, highly maneuverable, artificial fish for stealthy
surveillance?
Listen to how their goal was written for engineers.
Here's the opening.
Quote, design and build and test a new generation of low-cost, energy efficient, silent, agile,
artificial fish utilizing multiple degree of freedom, muscle-like actuators, and shape-changing
body and fins.
End quote.
Design, build, and test.
I got that part, right?
And that's how you engineer anything.
To come up with a plan for achieving their objective, we needed to get down to specifics,
specifications.
So what kind of fish?
You might be thinking, well, how about a bony fish, you know, something like a trout or
a goldfish?
But we had something different in mind.
For a shape-changing, energy efficient, silent body, we started thinking about skates and
rays.
We knew that fish that can glide would be very energy efficient, and so we called our project
Rabot thinking about rays.
Now, different question.
What kind of ray?
There are many of them out there.
Stingray, manta ray.
A critical insight came from Dr. Marianne Porter, who had the original inspiration to
use electric rays.
So electric rays, and here's a mold of one, have the scientific name, the ones we use,
Narcine Braziliansis.
So when you look at electric ray, one of the things that happens with them that's different
is they may look like kind of a big pancake here with a fish attached, like so.
And unlike manta rays, which flap their fins, or sting rays, which undulate their fins,
electric rays do something else.
What Dr. Porter pointed out was that electric rays do not flap the pancake-like body disk,
and so this is very different.
The body shape and the lack of body disk flapping are crucial.
And so how do they move, by the way, if they flap their tail?
So we realized that electric rays could use their body, since they weren't flapping it,
to glide, and that would be a very energy efficient and stealthy form of swimming, right?
So the idea would be that an electric ray would have this whole body as an underwater
wing.
Another benefit of the electric ray body plan is that they can carry a stable payload right
here.
Bony fish have to wiggle and bend their bodies in order to swim, and this is always bothered
engineers when we talk about making biomimetic robotic fish.
So electric rays make a better, easier target for engineers than regular fish, because the
electric ray's body doesn't bend up and down for propulsion.
Instead, the body disk is stable.
So we have this wing, we have a stable payload in here.
So it's called an electric ray, by the way, because the electric organs, which can zap
and stun prey, are actually modified muscles.
Those are all up in here in an electric ray, but they don't contract.
They just store and release electrical charge.
So electric rays have large elliptical compartments, which you can see in this nifty stained image
by Jenny Beltran.
In a robot built like an electric ray, those elliptical compartments are where those stable
payloads can go.
So when we started to actually build RayBot, we wanted to do something simple first.
So we built an autonomous surface robot that was modeled on the electric rays.
We did this before we went underwater, which is really very hard.
So that first version of RayBot had a body disk and a propulsive tail.
The body disk carried a payload that included a controller.
Now the controller is running a fixed priority set of instructions that operate two behaviors,
navigate and avoid objects.
It sounds like behavior-based robotics, doesn't it?
So navigation is a behavior created by linking the input from two photo resistors into steering
the tail.
So RayBot 2.0 was programmed to swim towards the light.
Object avoidance is a behavior created by linking the input from the two IR proximity
detectors located on the sides with the rapid turning of the tail.
So the tail itself flaps back and forth, generating forward thrust.
Depending on whether navigation or avoidance is the selected behavior, the tail can turn
gently or dramatically while it flaps, changing the direction of RayBot.
We confirmed that the shape-changing tail worked using a servo motor.
Then we turned to the problem of creating muscle-like actuators.
We'd already gotten to this point by the time we submitted our proposal to the Office of
Naval Research.
So we'd done a lot of important work before they chose us, thankfully, as one of four
teams in the United States to receive funding for phase one of their project.
First, we did more work to understand how electric rays glide, and what makes gliding
so energy efficient is that you can actually use gravity as your energy source and not
your muscles.
I know that seems counter-intuitive when you think about what happens underwater, but
if you're negatively buoyant, right, you get to use gravity in this way.
So let's talk a little bit more about ways to use gravity underwater.
You can either be more dense than water, what we call negatively buoyant, or less dense,
what we call positively buoyant.
And it turns out that cartilaginous fishes, sharks, skates, rays, and ratfishes are all
negatively buoyant.
When they stop swimming, they sink.
In the case of our electric rays, they didn't sink straight down, they sank along what
we call a glide path, a gentle slope that allows them to cover more ground.
So this is the actual electric rays, and we had them in our laboratory.
So another thing that the electric rays did, and we could carefully measure, was to change
their posture to switch from swimming to gliding.
And you can see that in some of the images we have of these fish swimming.
They were also able to measure that the electric rays were changing the shape of their body
disc too.
So the asymmetry in shape between the top and bottom of the body disc, or wing, is what
an aerodynamicist, who by the way is an engineer who studies flight, would call the camber
of the wing.
So we found that during swimming and gliding, the ray changed the camber of their body disc
by curling the body.
For gliding, the amount of camber correlated with how far they glided and how fast they
sank.
So they were actually changing the lift properties of that wing.
So this was really cool, right?
This was evidence that electric rays were using their body discs as we predicted as
an adjustable underwater wing.
So do you see what we're doing here?
We're understanding a system, in this case an electric ray, and that understanding helps
us meet our goal.
So understanding our performance goal so clearly is what allows us then to engineer a robot
meeting that goal.
In this case, we built a biologically inspired robot, Raybot.
Our detailed understanding of electric rays made it really clear that we needed Raybot
to change its posture and the camber of its body disc.
To get our surface Raybot working underwater, we had decided to enclose our surface Raybot
in a larger, flexible, waterproof body disc.
We also tried adding some pectoral fins behind for steering up or down, or to control roll.
That's called attitude control.
Now the first problem with going underwater is, as I hinted before, the water.
Water and electricity don't mix.
Actually, they do mix.
And then you short out your electrical circuit.
So the first step in engineering, an underwater Raybot 3.1, was to enclose the electronics
in a waterproof box, what in nautical engineering terms we should now call a hull.
The microcontroller that we used was specially built to help us do very simple underwater
work.
And what's really challenging is that while we need to keep the electronics dry, at the
same time, we need to put holes in the hull.
I know that sounds like a paradox.
Well, we need to do that because we need to have communication between the stuff that's
inside the hull and the actuators that are working outside of the hull.
So on the back end, you can see a flexible silicone tail, which functions as the propeller.
And we needed to flap that tail back and forth and control how fast it flaps.
Now let me just show you here.
This is our final Raybot body.
So here's the flexible tail.
And here's the body disk that we have right here.
So both fins and tail are controlled by servo motors, which are located inside the hull.
To transfer the force and power of the motors to the external fins and tails, we took another
chapter out of the book of nature and created tendons.
And in that earlier version, those were polystyrene cables that connected the oscillating servo
motors to the flapping fins and tail.
To pass these tendons through the hull, we made tight-fitting rubber passages that we
could load with a viscous lubricant.
And that was the trick to keeping the water out and the inside of that hull drawn.
So let me show you Raybot 3.1 in action.
Raybot uses its flapping tail to swim, and we programmed in different tailbeat frequencies
to control speed.
Out of the water, you can see the fins and tail moving and back in the tank when we got
the fins flapping.
Then Raybot holds its fins down and then up.
When it transitions, the fins from up to down, its attitude changes, and it moves vertically.
The fins control pitch.
But soon we ditched that version of 3.1.
The way we had it configured didn't work well for attitude control, so we put that part
of the problem on hold and created Raybot 3.2, which just has a tail.
Using two photocell sensors, we demonstrated that we could use sensor feedback to control
behavior autonomously.
So this allowed Raybot to navigate up a light gradient.
The biomimetic tail acted as both a propeller and a rudder.
Feedback between photocell differential and motor output we computed with an onboard microcontroller.
So Raybot 3.2 has the ability to detect a light source, navigate towards it, and hold
station around it.
This was a simple proof of concept test showing that we could build a working AUV prototype
that is self-propelled and autonomous.
AUV, by the way, is Autonomous Underwater Vehicle.
In parallel with our work on the whole robot, we also started trying to make different kinds
of those muscle-like actuators that we needed to do.
We looked at whether to make them ourselves or buy them.
Now when you say muscle-like actuators to most engineers, they immediately think of a
shape-memory alloy that goes by the commercial name of muscle wire, or in the case, for most
of the time, the case you hear is, nitinol is also a commercial name.
We tried that, building muscle wire into some of our fins.
But the way you get the muscle wire to contract is to run electrical current through it.
To get it back into shape, to get it to stretch back again, you actually have to cool it.
So this takes time.
So we found that even under water, muscle wire really slowed us down, was difficult to relax
and overheat it.
If for some applications, it just didn't work in this case.
So we tried creating our own actuator system, including a distributed electromagnetic actuator
composed of strong little rare earth magnets and tiny electrical coils.
And this system turned out to be able to bend a tail, but it was all or none kind of bending.
So there was very little control that we had with our magnetic fields and this distributed
system.
So that system really only had two stable positions bent all the way to the right or
all the way to the left.
So we couldn't easily control the amount of bending or the rate at which the bending happened.
So we also tried a commercially available linear actuator and we found a miniature system
that could push or pull.
And this was basically a rotary motor with a special rack and pinion system.
So it had more than two stable positions, right?
We had much better control, but it had high power draw, making us worry a lot about how
quickly we'd use up our energy supply.
It was also relatively big compared to servo motors we'd already been using.
And truth be told, it wasn't very muscle-like in how it worked.
So we discarded those ideas and we were failing our way to success, right?
I mean, this is just what happens with engineering.
So what we did instead was to think more about the flapping pectoral fins on Raybot.
It turns out that in real fish, the fins are composed of thin rods of skeleton that give
the fin support.
Professor George Lauder at Harvard had shown that those fin rods also do two really cool
things.
They actively flap the fin and they change the shape of the fin.
So let me show you a demonstration that George actually shared with me, which shows you this
principle in action.
And it's so beautifully simple.
You're going to love it.
I've taken a Ziploc bag and cut off the top of it.
And what I've done here, let me show you before I show you how this works, I cut the
side off so I can peel it, but you get to the end and the tips are still connected.
All right, so I'm going to zipper this together and I'm just going to hold it between my two
fingers here and now watch what happens when I move my fingers and thumb past one another.
Isn't that beautiful?
Look at that bend.
Flap, like so.
Again all I'm doing is sliding those two sides past each other.
So in technical terms, I'm shearing the two layers of the zipper and because they're connected
at one end, that bending results.
So once we better understood how fish fins work, thanks to George Lauder, we could actually
try to build them.
So we induce a shear using what's called a rack and pinion.
But unlike the commercially available rack and pinion attached to a rotary motor, ours
was driven back and forth by a servo motor connected to the pinion.
So here is a servo motor and here is the rack, you can see all the teeth in it in that rack
and here is the gear that's driving it.
So we call this actuator system the fin shear actuator or FSA, I know, it's a terribly
creative name.
This actuator is clearly though inspired by biology and we wanted that in its name.
So this also led us to ideas about how to engineer a better body.
And let me show you how this works by the way, I've got this really cool demo.
I've got this hooked up here to an Arduino Uno microcontroller and I have a USB power
supply right here, so I'm just going to plug in the Arduino microcontroller and we know
that servo motors need some kind of computer control.
I have a program loaded up in here and you can see that it moves the rack back and forth.
It's just a simple oscillation program here.
And so it's shearing, it's like what I was doing with my thumb and finger.
Now there's nothing happening out on this end with that servo motor.
What I'll do now, I'm going to turn this off by unplugging it and I'm going to plug in a
different servo motor that's actually controlling the mechanism that we actually used in Rabot
3.3.
So here is the version that went into our Rabot.
Much larger, higher torque servo motor and as we know about servos they have three wires.
They have a wire that is involved in control and that's colored yellow here.
So that's getting the pulse width modulated signal from the microcontroller which controls
the position.
It's got a red and black power.
Remember inside a servo we've got a DC motor and a potentiometer and so using negative
feedback control that's how we get a precise motion out of the servo.
So I know a servo by the way is not biologically inspired but it's the rest of the actuator
that is.
So now what we've done here and let me go ahead and get this started is we've actually
got those two pieces of side by side plastic here connected at the tip and what you're
going to see happen, there we go.
Now I've only got it oscillating one way and so we could set this up to oscillate both
ways here but this is really cool, huh?
This is the fin shear mechanism, actuator mechanism.
Now I want to do something here just to show you how this interfaces with the actual rabot.
When we molded rabot here what we did is we left a spot for this whole system to fit
in as you can see here and now it's a little more complicated than this because we have
to get that to stay in place.
This has to be waterproofed but you can see there's plenty of room for a microcontroller
in here and even a power supply and let's see if I have enough power right now.
Let's just go crazy.
Let's see if we have enough power to actually flap the tail and a little bit, a little bit
more flapping, you can kind of see it, right out there at the end.
So again we're failing our way to success and as I mentioned the rabot project is actually
underway so clearly what we need here is a little more power and I see what's happened.
Actually this is really interesting.
So what has happened here is that the reason we're not getting enough power is you can
actually see that the glue bond, the epoxy has broken between the rack and the fin shear
mechanism.
And so it's pushing but it's trying to pull and that's not happening because it's actually
pulled right out of that adhesive.
Okay, I'm going to turn this off now.
So to get all of this right, what happened?
This mold right here is actually the mold of a large electric ray, a torpedo ray with
the name torpedo nobiliana.
I mentioned narsine earlier and narsine is a smaller species that's very much like this.
So we started by making a plaster cast of the ray that we could use and we thought maybe
we could actually use this itself for the actual robot.
But the problem with making the body this way though is kind of immediately clear when
you start holding it up and looking at the various bumps and ridges, right?
What happens is, you know what, animals aren't symmetrical, we've got a little tummy bulge
here and so that makes for an asymmetric design.
And so what my colleague Josh Deleu did was to use this cast of the ray to make a series
of very detailed measurements of overall body shape and from those measurements he created
a 3D computer graphic version of the ray in a software program called Maya.
He then went through the process of making computer graphic version of the ray symmetric
and that's the version that you see here.
I'm going to take our fin shear mechanism out of here so I can hold this up.
And you can see it's a much more symmetrical version.
So we found that in order to come up with a mold that our CNC milling machine could fabricate
we need to slightly do things like alter some of the shapes here so we could actually pull
this out of a mold.
So the result of this process is what I think really is this beautiful Raybot 3.3.
It's big and floppy right now so it's hard to appreciate how different it is from the
cast of the actual ray here but you can see we haven't yet actuated the body shape, right?
And for that camber controlling the wings we could add in actuators that did this.
So Raybot we made here is symmetrical and smooth without those bumps and bulges of the
real electric ray.
So by the way when we cast the final body of Raybot 3.3 we used a flexible silicon based
polymer called dragon skin.
This is easily available, it's safe to work with, it's a lot of fun if you want to do
this kind of soft robotics.
By the way to do this it took nearly 20 pounds of dragon skin and a lot of acrobatics to
create a mold and then peel Raybot out of it.
The mold by the way was in nine pieces and that's an essential part of the engineering.
You have to carefully design the mold so that you can get the Raybot out of it without
breaking the body or breaking the mold.
So we also designed into the mold as you saw a payload that was in the belly on the bottom
of the robot and as you saw into that payload we can place then our FSA system with a controller
as you saw in order to get the tail moving back and forth.
Alright now I want you to ask yourself anytime you set out to do a robotics project can
we achieve our goals by building a simple robot?
Is there a simpler way to do this than what I'm thinking?
So this will drive you towards a really important design motto called the Kiss Principle, keep
it simple stupid.
Now the Kiss Principle emerged from World War II aeronautics team called the Skunk Works.
Run by Kelly Johnson this team of engineers at Lockheed Martin created such famous military
designs as the U2 spy plane and the P-38 lightning.
Here's the big thing about simpler systems, they're easier to build, they're easier to
understand and they're easier to repair.
Simple robots can also take advantage of their physical interactions with the world in ways
they don't have to be programmed into the system through the microcontroller.
For example, the rubber flippers of Madeline bend and flex as they interact with the water
and sand on the beach.
That bending stores elastic energy that then springs back to help propel Madeline.
So you get all of that motion for free, you don't have to program it into the controllers
to flex that motion and then power it with motors.
So by building a very simple flipper or a very simple body in the case of a robot we
simply tune the material of the flipper to let it automatically get the work of propulsion
done as it interacts with the water.
Keep it simple when you can.
Let me add that you have to have the courage to fail and that's a hard thing to do.
Design build test, it's an iterative process.
Try and try again, we fail our way to success.
