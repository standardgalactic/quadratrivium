Take out the trash. At some point in our lives we've either heard or uttered those words.
Would you like to have a robot for that job? Yeah, me too.
And as long as we're at it, I'd like a robot for a number of other everyday tasks.
Now, one robot that helps with the trash is Dustbot,
a robotics project co-funded by the European Commission
and headquartered at the Robotics Institute of Scuola Superiore Santana in Italy.
And here's how it works. You call up the Dustbot Dispatcher in a range of visit
and then you meet Dustbot just outside your door.
Now Dustbot is designed to autonomously navigate to your house, collect trash from you
and then take your trash to a central collection facility.
Built specifically with cramped urban areas in mind,
the goal is to avoid having bags of trash accumulate in alleys
and thereby improving urban hygiene.
A benefit of Dustbot is that you send the trash on its way the moment you're ready to take a bag outside.
Now, the problem with Dustbot is that it picks up the trash and that's great,
but it doesn't take the trash out.
So Dustbot works at the end of the chain of trash making events.
So let's start at the beginning, Visini.
How about your indoor trash can? Is it already a robot?
When you toss your trash into the can, could it be a robotic trash can
that moves to make sure the trash lands in the bin? How cool is that?
This trash catching robot hacks a 3D connect camera to use it to monitor your body
and sense when you're tossing an object in the general direction,
you know the classic rip the paper out of the typewriter and throw it over your back
and based on the trajectory of your body and the object,
the robot calculates the position where the object should land and moves to catch it.
That's pretty handy.
The trash bin catching robot works well in a room,
but it has to be dedicated to that room because of its reliance on a mounted camera
that doesn't move with the robot.
So a different approach here to collecting trash initially
is to get a trash can to follow you around.
Now I've done a very simple hack and that is to put a trash can on Roomba
and to try to get it to follow around.
So Roomba, why don't you get going and do your work,
bringing your dust bin around for us here.
And so hey, that's pretty good, right? Double duty.
Roomba is cleaning the floors.
If I have something to throw away, it doesn't go on the floor, it goes into the bin.
Terrific.
Now, this may sound good, but can you see the problem right away with Roomba?
It's built to go underneath furniture and things like that.
So the moment it encounters any kind of obstacle, it's going to rip that trash bin off.
So it's really not that great of an idea here for Roomba.
One example that's different than doing this with Roomba
is a fully autonomous robot called the sociable trash box robot.
It's been developed at Toyahashi University of Technology in Japan.
It has a pyroelectric heat sensor to distinguish humans
from the not as hot and non-human objects in the world.
Using a camera and an IR proximity detector,
it will then waddle over to a human and follow it.
They have pictures of this working at the mall, right?
This trash bin is following you around. It's very odd.
So when you toss your trash into the bot, you break an IR beam that tells the robot
you've helped it keep the place clean, and then it leaves you alone.
The sociable trash robot can then return home to the main trash collection depot.
Now, to design a robot to do a job, whatever the job is,
whether it's collecting trash or throwing the trash out,
the key is to first understand the nature of the job.
Most of the time, a job looks simple at first,
and then the deeper you get into it, the trickier it becomes.
Understanding the job involves understanding two parts,
the workplace and the task itself.
First, you have the workplace.
Sometimes the workplace is as specific as my bedroom at home,
or the workplace can be more general, such as any room in any home.
Second, you have the task itself.
Keep in mind that the task is done in the workplace you've just specified.
You can't have a task without a workplace.
In that context, you need to be able to break down a task then,
analyze it, and determine its subcomponents.
This is exactly analogous to what we do when we write an algorithm
for the computer in our robot's microcontroller.
We need a step-by-step understanding of what the task entails.
In the case of taking out the trash, let's start with the workplace.
Because we're standing here in my robotics laboratory,
let's use this as our workplace,
and let's think about the layout here with regards to the generation of trash.
I've got one small trash bin that we've just pointed out that's on top of Roomba.
I generate lots of little bits of trash, so that's really trash-central.
And over by the wall, I've got a large trash can
into which I dump the contents of the little trash can,
and when it's full, then I eventually empty it.
Now, I don't like having a big trash can
over by where I'm working, as you can tell, because it would be in the way.
So what else is going on in the lab in this workplace?
Well, I've got lots of robots and other things around here on the floor,
so there's clutter to go along with the bench that I'm working at here.
The floor itself is hard and smooth.
Good news here is what's not here.
There are no steps or pools or environmental hazards for a robot, right?
So when we look at a workplace, a big deal in robotics is to think about how stable it is.
A stable workplace we call a structured workplace,
and it's one in which the world doesn't change or doesn't change much.
It maintains its structure.
Most objects don't move, and those that do, do so in predictable and regular ways,
and people don't come and go willy-nilly.
A factory floor with an assembly line is a classic example of a highly structured workplace.
You can map out a structured workplace one day,
have that map still be accurate on the next.
On the other end of the spectrum, we have the unstructured workplace.
Unstructured workplaces change all the time,
and they change in ways that are often not predictable.
Most busy crowded places outside are unstructured.
People, animals, vehicles come and they go.
Rain falls, bicyclists ride by.
This laboratory really falls in between, right?
It's a structured in the sense that it has walls, tables,
and a basic configuration that doesn't change.
But it's unstructured in the sense that people and robots do come and go.
So this kind of intermediate structure is typical of most workplaces,
like your home, school, or office.
Knowing the level of structure allows you to make important decisions
about what your robot needs to be able to sense and to keep track of,
and most importantly, what it can ignore.
If you can ignore having to identify objects,
then you save a whole lot of time, energy, and computer space.
So a structured workplace allows you to build into the programming of your robot
implicit assumptions about the world.
For example, since we don't have stairs in this laboratory,
any robot we build for it does not need cliff detectors.
We assume that the robot will never encounter stairs in this workplace.
Now let's consider the task at hand, taking out the trash.
This will be a series of events.
On some regular schedule or when it starts to get full,
I want this small trash bin to be emptied.
Simple, right?
Well, in the asking, yes.
In the doing, as we've already started to discover, not so much.
Let me explain. Let's walk through this.
I empty the trash.
I pick up the bin and I take it over to the can, the big can,
where I'm going to empty it out, right over here.
So for starters, let's not worry about how big the trash can is or how that gets empty.
But back at the beginning here, when we think about the subtasks involved
in getting an as-of-yet-unspecified robot to do this job,
we can consider a number of things.
There you go, Rumba.
We need to turn on somehow our robot when the trash needs to be emptied.
We don't want a robot always worrying about when the trash is going to be there
and using a lot of energy.
We also need to navigate to the location.
If the robot is not connected to the bin,
we need to be able to navigate to the location of that small bin.
We need to grasp the can, lift the bin,
and move the bin over to the big trash bin.
Then once we get there for a little robot,
we need to be able to lift the bin higher and dump it into our bigger bin.
So we've got to empty those contents into that big bin.
Check to make sure the little bin is empty and then return that bin
to wherever we had it before, like so.
Then, depending on what we've done,
we may need to return home to our charging or standby dock
where we await the next set of instructions.
Roughly, that's around a dozen sub-tasks
and there may be more as we go further into our design.
You can see in those sub-tasks things that include navigation,
situational awareness, when is the trash needs to be empty,
and so forth.
What's very useful about task analysis
is that we can immediately start to see what we need the robot to be able to do,
and it's this idea of modules that we keep encountering here.
When we can build little sub-tasks, these are little behavioral modules,
and we can start thinking about what the robot needs to do in each of those modules
in terms of the sensors and actuators it needs
and how we build a behavior that's a sensory-guided movement.
In terms of kinds of sensory-guided movement,
the trash-portation robot,
sorry I couldn't resist,
must be able to navigate around the lab
and must be able to manipulate the trash bin.
That navigation and manipulation are required
and both of those things are a good sign in the sense
there are two fundamental kinds of behaviors that robots have to execute
in almost every job that you might want a robot to do.
At this point in a design process, it is critical to ask this question.
Now that we know what needs to be done and where it will happen,
is there a pre-existing robot that can do the job?
The practical version of this question is this.
Is there an existing robot that can do this job that's available for me to use?
If the answer to either of these questions is yes,
then you want to get that robot and have it do the job for you.
You want to stop designing a robot for this task
and put your efforts elsewhere, at least for the moment.
You don't want to reinvent the wheel or the robot
unless you have an idea for a better robot.
But for the task of emptying the trash in my lab here,
the answer to this question is actually I'm not sure.
So let's investigate and see what robots out there might already be able to do.
What we see happening in the development of robots in the home
is that they are starting to move in straight lines
with respect to particular beacons that we set up in our world.
All I'm doing here right now is actually using this remote control.
But if we had a beacon or an array, a navigation array,
it could actually guide Roomba in.
So Roomba has now gotten in range of its dock.
I'm not doing anything here.
It's actually working with its dock to navigate in back to its charging station.
So Roomba has directed navigation features already built in.
This is done with the IR beacon, which is right here on the dock,
and this is an IR receiver on the dock here.
So when we set up little beacons, we could do that around our room
to make sure that whatever robot we wanted to do to collect trash,
once it was ready to do so, it could just go from one place to the other directly.
It wouldn't have to move randomly like Roomba is set up to do.
So what we saw is that when Roomba finds the signal, it can move directly towards it.
And to help Roomba find a trash bin, for example,
we could take something called a virtual wall lighthouse and use it as a beacon.
So I've got that right over here to keep it from running outside of the laboratory.
And so, for example, we could just put our virtual lighthouse right here inside our trash bin.
And as long as it had, as long as the IR signal could get out,
as it could in this slatted trash bin, no problem.
So while Roomba could get going and navigate to a bin fulfilling the first of our two 13 subtasks,
we can see that in terms of grasping the bin, though, okay, could get there,
but what happens if it gets there and it can't hold onto it?
What's it going to do? We're in trouble.
So Roomba can't do the job, right?
We wanted to ask ourselves, was there a pre-existing robot that could?
Because it doesn't have a manipulator to transport and then empty the can.
Now, this is nothing against Roomba. I love Roomba.
Roomba is specialized, though, as most robots are, to do one job and do it well.
So perhaps instead we can find a robot that's more of a generalist
whom we might easily program to do the job.
When we think of a generalist, we humans tend to think of, well, humans,
because of the large number of different tasks that we amazing creatures can accomplish, right?
So we think of humanoid as a machine, a robot,
that could literally step right into our world and empty the trash.
Let's look at how humanoids can be generalists and perform different tasks.
Now, we have a humanoid Baxter here in the laboratory.
Baxter has one terrific advantage over Roomba.
It's built to be reprogrammed by the humans working with it.
So let's see if we can program Baxter to empty the trash.
Useful task, right?
Now, Baxter is not a mobile robot like Roomba.
It doesn't have legs or wheels to move around the lab.
So for starters, the first thing we need to do is rearrange the workplace to Baxter's advantage.
Baxter is right here by the lab bench,
and I've got the large garbage bin right next to the lab bench.
And I'll also take this bin, the small one that we usually throw the trash in,
and I'll put it on top of our lab bench here.
Now, I'm going to actually reprogram Baxter for you for us right in front of you here.
So it's so easy to reprogram.
It's amazing.
So I'm just going to select a new program here,
and then grabbing the training collar,
what Baxter does is it memorizes the way I have it moving.
So the first thing I'm going to do is come up here to a high position.
I'm going to hit a little button on the side called the action button.
Calls up on the screen something called a hold.
I don't know if you saw Baxter just nodded its head.
Good John, you're doing a good job programming me.
So I want to come up high so I can get a good approach here on grabbing the basket.
And so we come down like so,
and then I'm going to use the grippers to tell Baxter to hold on to the bin.
Now, from here, I want to move over to the side.
We're going to do another hold position.
So I want to make sure that Baxter comes back to this point.
Then we're going to change the position of Baxter's arm.
I want it to go through here.
I hit the action button again.
Click on hold.
Baxter likes it.
And here we go for the dump.
Got to get this way up like that.
So we want to be in that position and click on hold.
Baxter likes it.
So now what we can do is come back up.
Final hold position up high like so.
Baxter puts it back down and release.
And Baxter likes that too.
All right, so let's pop back out and call up that program and see how we did here.
And again, keep in mind that this is very unusual.
Robots aren't normally reprogrammable in what?
A couple of minutes.
And that's part of what gives incredible flexibility to the different kinds of tasks
that Baxter can do in a factory setting.
All right, so let's see how this program goes.
And we are ready to run.
So Baxter is coming back in that high approach.
Coming in, it grabs the end of the waste basket.
Looks good.
Over on the side.
Ta-da.
Really excellent work, Baxter.
And what's amazing to me here is that Baxter is an example of a humanoid that's built to be reprogrammed.
And I should note, and as you saw, reprogrammed easily without having to write any computer code.
You train Baxter by showing it what to do.
Baxter's ability to learn by doing makes it one of the best multi-purpose robots that's commercially available.
So let's see where we are.
Baxter is a versatile manipulator.
Roomba is an able-bodied navigator, but neither by themselves can pick up the trash and take it out.
We really need to combine the two.
Here's clawbot, which has an arm, and it can move it around as well as it's got wheels to move itself around.
So I'm going to run clawbot by remote control to see if it's sufficient to do the job.
Pull out the trash here.
Grab my remote control.
So we have clawbot, and let's have him go, first of all, to the trash and open up the claw.
Now, I have to tell you, cheating a little bit here, this is a bin that has slats in it that make it easier for clawbot to actually pick it up.
So I'm going to hold on to it here.
Let's see.
Go ahead, clawbot.
Pick it up.
I have to give it a little bit of a help here.
And we'll go over to the trash can.
Bin over here.
Okay, come on.
You can do it.
Now, we're at this crucial moment of can it actually lift up the can, which we saw it can, and dump it out.
Oh, you can do it.
Here we go.
We still have the same problem.
It's got an issue here, of course, because it doesn't have enough degrees of freedom in its wrist.
So even though clawbot is a mobile manipulator, we have some issues going on here.
Now, whenever your robot can't do something, you have two choices.
You can rebuild it, or you can change the world and the workplace.
In either case, we're talking about designing a way for the robot to be successful.
Let's think about clawbot in particular here.
In the case of it, we want to rebuild clawbot by adding at least one and probably two degrees of freedom here to the wrist.
As you can see right here, this wrist doesn't bend.
So even though it can lift up the bin, it can't then do this like we saw with Baxter.
So it's got a problem there.
Now, each simple hinge joint in my finger adds one rotational degree of freedom to my hand.
And each degree of freedom in my hand means that I can refine my movements.
Things that I can grasp and manipulate, I can do so because of all those degrees of freedom.
The claw needs some added dexterity too.
So we need that claw to be able to roll 90 degrees and then pivot so that the fingers oriented vertically and down.
Then it could not only pick up the trash can, but empty it here.
And we probably want two more joints with motors and we'd have to reprogram the software to allow this to happen.
And the additional motors would add weight.
That's one of the reasons, one of the considerations that goes into design.
And so the payload maximum in the trash bin might have to be lower.
Now, perhaps there's a better way to go than rebuilding the robot.
For either clawbot or Baxter, this is when we wish the arms could telescope if and when we needed them to.
This would be adding a kinematic degree of freedom to the arm.
Now this linear motion of telescoping, like opening a tripod leg, is called translation.
And it's a very different kind of motion than we see in our vertebrate body.
Closest we get to telescoping in translation is sticking out our tongue,
but I'm going to spare you a demonstration of that.
But to be crazy anyway, let's imagine what it might be like to overcome the shortcoming of each robot
and think about trying to get them to work.
Now together, clawbot is mobile with very rudimentary grasping capabilities,
but Baxter has great grasping capabilities, but is not very mobile.
So what about mobility and manipulation together at last?
They make a great power couple. The cluster. Could we get them to work together?
Well, clawbot is working by remote control.
So the first thing we'd want to do is to come up with a program that allows clawbot to work autonomously like Roomba.
Perhaps sit in the corner, charging, waiting until it's scheduled or turned on remotely by someone
or a trigger in the trash bin.
Then it could navigate to the trash bin, lift it, move it over to the large bin.
Then what if Baxter, we're standing by, could take the can, empty it, and hand it back to clawbot,
who would then do the return journey? That doesn't seem too crazy, right?
Navigation and manipulation, as we've just seen.
When we think about them in this specific context, are central not only to robotics,
but to something as simple as taking out the trash.
These two abilities come into play in a host of tasks that we might want robots to do.
Two of the everyday tasks that are very much like taking out the trash is getting stuff or putting stuff away.
Now those are pretty general tasks, as I've stated them, so let's make it more specific.
I've mentioned that this is a variation on a classic pick-and-place task for robotics.
Let me use Baxter to show you what I mean.
I've trained Baxter and saved the program to do the following.
Baxter can pick up this mug, come on, Baxter, here we go, and dump its contents out.
Baxter can use pick and a variation on place to do things like load or unload boxes or handle materials.
We see pick-and-place behaviors at work and tasks throughout warehouses.
Very common and very useful.
I'm a huge fan of good old-fashioned printed books, but books are a big problem because they take up tons of space.
And if you've decided to try to have a good selection of books, they also require a method
for keeping them organized so that you can find the book you want when you need it.
Very quickly, you need a library, you need shelves to hold the books,
a method for keeping them organized so you can find the one you want
and then the ability to get the book and put it back.
Humans have spent centuries designing libraries and the systems to make them work.
Historically, when books were very expensive, the idea of a university came about,
in part to centralize the books so they could be shared.
Even though we are quickly moving to a world where most of our books and printed materials exist in digital format,
the truly great universities recognize that someone needs to hold on to
and care for books in their more stable, hard-copy form.
Much of the physical work in a library involves getting a book from a shelf and returning it to the shelf.
Simple, right? Just like the trash.
Well, it's not so simple as we've seen in the details.
And if you have hundreds of thousands or even millions of volumes,
what librarians call retrieval and storage turns into an extremely labor-intensive and slow process.
The University of Chicago has taken a really interesting approach to the problem
of retrieval and storage of its 2.5 million books.
They've built the Joe and Rika Mansueto Library,
which is really a complex version of a classic pick-and-place robot.
Now, the part of the library that you visit sits on top of a 50-foot-tall underground robotic storage unit
that's built by the German company Dematic.
In that storage unit, or book vault, there are five rows with shelves that are 50 feet high in each case.
Those shelves hold 24,000 bins.
Each bin contains 100 books sorted by size.
Each book has a barcode that identifies its bin.
Each bin has an address, and notice the division of labor.
Robots transport the bins. Humans handle the books inside each bin.
So it's still a combination of functions here divvied up among different agents.
So when a book is requested, one of the five 50-foot-tall cranes,
which is really part of the robotic system,
moves on a horizontal linear track to the address of each bin.
Each crane has a manipulator that moves on a vertical track,
so combining these two translational degrees of freedom,
the manipulator can move to any position on that giant rack.
Once the bin is located, the manipulator extends two pins into the handles of the bin,
then the crane transports the bin to a lift that sends the bins upstairs to the human library.
This library is robotic in the sense that the cranes use
sensory-guided movements, you guessed it, to do the work.
Each crane has to navigate to the correct bin and then manipulate that bin, grasp and carry it.
Navigation involves several layers.
First, the correct crane has to be activated in the right row,
and based on where it is relative to the requested bin.
Based on that crane's current position, the system then has to plot a course to that bin.
The movement to the bin involves horizontal and linear tracks.
The crane has to take readings to confirm that it's in the correct location.
Once confirmed, the manipulator can get to work grasping and loading the bin
with sensory checks along the way to make sure that the pins are located in the bin's handles.
What we see in warehouses, libraries and labs, and rooms in our homes even,
is that when we break down specific tasks into their subtasks, we see similarities among them all.
For example, anytime we want to get stuff from somewhere and put stuff somewhere else,
we're dealing with a variation on a theme picking and placing.
In general, if we want a robot to perform a given task, we have choices about how to get it to do it.
We have a generalist robot, but we've found generalists aren't too many of them out there.
Choice number two, we can redesign an existing specialist robot and add to it a new capability.
Or choice number three, we can create a new specialist robot.
And in fact, it's that third choice that is what we see happening so often in robotics,
where specialists are what the robots are that are doing the new tasks that we see.
And that's really exciting because even though the functions and principles are the same,
what we're seeing is a diversification of robots in the world based on all these new tasks that we're trying to get them to do.
