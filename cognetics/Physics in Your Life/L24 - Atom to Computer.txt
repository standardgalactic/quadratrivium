Lecture 24, Adam to Computer, has almost the same title as the whole module from Adam to
Computer because here we're going to put it all together.
We now know how to build some of the basic processing circuits that go on in computers
and we can trace all the way back to a silicon atom a general understanding of how they work.
We don't yet know how we put that all together to make a complete computer that computes
and does all the things we want it to do and so the purpose of this last lecture in module
four is to tie all that together.
What does a complete computer consist of?
Well it's got a processing unit, an integrated circuit or sometimes several integrated circuits
together that are closely connected but usually in a personal computer just one integrated
circuit called the central processing unit.
It's also sometimes called the microprocessor and the word microprocessor increasingly also
means any of the tiny little specialized computers that are built into things like cell phones
or CD players or whatever else.
So there's a central processing unit and that's the real heart of the computer and it's got
circuits like the Equality Tester that we looked at last time, it's got special circuits
for adding binary numbers, circuits for comparing binary numbers, it's got special very high
speed memory built right onto the chip itself, onto that particular integrated circuit memory
called Cache whose purpose is to store instructions in the program that the computer is executing.
Maybe it stores a few instructions ahead of where you already are so that when a construction
is ready to be executed it's already right there in the central processor and the central
processor doesn't have to go out to memory to fetch it.
So when you have a computer having something like level two cache or level one cache or
how big it is, you're talking about that special memory, very high speed memory that's
built right onto the processor chip.
It's also got a number of other circuits, it's got special memory registers that keep
track of what steps are to be executed in the program, specific circuits that decode
instructions because the instructions themselves that are programmed to tell a computer what
to do.
The instruction that says add, go to memory register one and get the word in it and add
it to the word that was in memory register two and put them back in memory register three.
That instruction is itself ultimately just a binary number which is not being interpreted
as a number and not being interpreted as text but is being interpreted as an instruction
to the computer to do what it's supposed to do and so when that instruction comes in it
has to go to a special circuit that decodes it and actually makes the computer do what
that instruction says it ought to do.
By the way one of the worst things that can happen in computer programming is to have
data like your PhD thesis or grandma's picture overwrite what was supposed to be instructions
and some of the worst computer crashes you'll have are caused by that kind of thing where
data overwrites instructions and then the instructions aren't there to be executed and
the program can't do its job correctly.
Good programming avoids that but the complexities of modern computers and modern programs means
that that happens not infrequently.
One of the most important functions on the CPU central processing unit chip is the clock
and the clock is simply a very simple circuit it's very closely related actually to those
flip flop circuits I showed in the previous lecture except it's a flip flop that's never
stable in one state so it flips back and forth between two states at a steady rate and that
clock produces a series of electrical pulses again at a steady rate and they're sent throughout
the whole computer and their job is to keep all the complicated things that the computer
is doing synchronized in step with each other so the computer doesn't just randomly add
some numbers and then do this and then do that it does everything in sequence the clock
pulse comes along and that's the time information gets loaded into memory and the next clock
pulse comes along and that's when an instruction gets executed and so on and so forth and modern
computers several things may be going on at once but there is a basic underlying clock
that produces these pulses at a regular rate and that ultimately in some sense determines
what's going on what the speed of the computer is you may hear that your computer has something
like a Pentium chip here's a motherboard from a computer with a Pentium chip for example
or a G5 chip in the case of Apple's computers chip made by IBM often those chip names are
the model of a particular kind of central processing unit and after the first of such
a model is introduced there may be many variants on that same model Pentium 2 Pentium 3 G5
and then a G5 that will come out small enough for a laptop computer and so on so names like
Pentium and G5 refer to the type of microprocessor chip or central processing unit chip you have
the speed which these days is usually measured in gigahertz and a gigahertz is a billion
clock cycles per second is a measure of the speed at which that underlying clock is producing
electrical pulses click click click click if you have a one gigahertz computer it's
a billion times a second if you have a two gigahertz computer it's two billion times a
second very crudely and I want to emphasize this is crude that clock rate is ultimately
what determines the speed overall speed of the computer I remember my first computers
had clock rates of about eight megahertz eight million cycles a second now we're measuring
clock rates in gigahertz but a word of caution different models of chips have different numbers
of processes going on at once so a one gigahertz chip from one manufacturer may be the equivalent
speed to a two gigahertz chip from another manufacturer but all other things being equal
namely the basic architecture of the chip and how it's put together a faster clock rate
means a faster chip but when you're comparing among different manufacturers or other chip
types be careful about that two gigahertz isn't always twice as fast as one gigahertz but
what that means is that the clock rate ultimately sets the time scale for the very simplest
operations a computer can do for example in one clock cycle say a billionth of a second
for a one gigahertz clock or a half a billionth of a second for a two gigahertz clock that's
the time it takes to execute the simplest things like fetching a number out of memory
and loading it into the central processing unit ready to process or adding two numbers
or comparing two numbers so simple operations will typically take oh one to several clock
cycles so a two gigahertz computer can maybe do two billion operations every second that's
fast that's a personal computer some of the world's supercomputers are far faster than
that although they have a slightly different measure for how fast they're actually going
called the number of flops floating point operations per second but we won't go there
now the CPU chip is not all by itself again here's a motherboard this is from a 1990s
vintage computer mid-1990s vintage computer there's the big Pentium central processing
chip and they're mounted on a board called the mother board and the board is made of
typically fiberglass it's an insulating board I described this process before it's been
coated with copper and then the copper has been photo exposed similar to the way one
makes integrated circuits themselves but on a larger scale and the copper is then etched
away where it wasn't protected by photo resist and that makes the various interconnections
and the Pentium chip and all these other smaller chips which perform various functions
are connected among each other by wires on both sides of the board you can see the back
of the board is mostly a single piece of solid copper but on the front side of the board
there are many different little pieces of wiring little pieces of copper running among these
chips so that's what a mother board looks like and mother board has a number of things on it
that are useful to think about for example these large black structures here are connectors where
cables come in that connect to other parts of the computer over here in these white
bins are places where you would install memory chips or where memory chips would have been
installed if they hadn't been removed from this one and if you were to look inside your own
computer you might find a number of empty slots like this in which if you buy additional memory
you yourself could probably figure out how to install it and then you'd have more memory in
your computer often the mother board is built with some blank sockets in it that are designed for
expansion or modification or customization so a single mother board could be customized to
have different specifications different amounts of memory you might be able to upgrade the processor
with a faster processor and so on so there are a number of other things on this mother board
but one of the things that characterizes it most significantly is its data rate or its so-called
data bus the data bus is a description of the circuitry that carries data from the central
processing unit around the computer particularly to the memory and also to any other circuits that
are closely connected with the central processing unit and the speed of that data bus is really
important um and also the width of the data bus the data bus might be said to be 64 bits wide
or in a modern computer it's more likely to be 128 bits wide what that means is that when you send
out data 128 bits can travel down this data bus together and go from memory to computer or whatever
that would bring in 264 bit words or 432 bit words all at once obviously the wider that data
bus is the more information can be sent down at once and there's also the speed of the data bus
and a typical data bus can transfer hundreds of millions of bits of data every second so
that is a lot of data being transferred around in this computer there's also a number of specialized
circuits on the mother board and i don't know which these circuits are on this board but some of
them are responsible for things like controlling sending signals to and from the hard disk drive
for example or to external circuits like a cd or dvd drive or to the computer's monitor which
displays the information visually or to receive information from the keyboard and so on so there
are a number of other specialized circuits that work intimately with the central processing unit
to begin to make what would be a whole complete computer in fact you can think of a mother board
as basically the entire computer minus the sort of peripheral devices that are nevertheless vital
that let the computer be more useful to us and communicate with us devices like the keyboard
like the monitor like the hard disk that lets it store data permanently when it's not even on
any other peripheral devices you might choose to connect a scanner a digital camera while it's
connected uh any one of a number of things you could connect to your computer well there are
probably circuits on the mother board that allow those things to be connected and that then
allow that to be a complete computer that's useful to you
let's take a look again at what a complete computer might look like so here's a block diagram of a
computer a block diagram is an electronic circuit diagram in which you show different major pieces
of the computer basically as just rectangular blocks and you don't try to show what's inside them
so we start out at the left here with the central processing unit the cpu the heart of the computer
the pentium chip or the g5 chip or whatever that integrated circuit chip is that these days
might hold a billion transistors or something like that and be responsible for basically
all the processing that goes on inside the computer then there's the data bus and i've
represented this here as sort of an arrow uh with two heads because the arrow shows that data is
being transferred back and forth in two directions from the central processing unit to these
circuits that handle peripheral devices and from the peripheral devices back into the central
processing unit for example there's certainly random access memory the subject of the previous
lecture that's a major additional part of the computer it's usually right there on the mother
board with the cpu chip and the cpu chip needs to be able to communicate rapidly with the random
access memory by the way a comment about the sizes of computers which i should make this information
is flowing ultimately over copper wires or wires made of other conducting materials from
say the memory to the computer and the speed of electrical signals in wire is typically on the
order of but maybe about two-thirds of the speed of light so it's comparable to speed of light but
not that high it's pretty fast the speed of light is 186 000 miles in second and you say well that's
almost instantaneous but when you ask how long does it take light to go a foot the answer is about
a nanosecond about a billionth of a second so the speed of light is about a foot per nanosecond
so that means that computer signals travel maybe oh seven eight inches per nanosecond
and that begins to have some significance for the building of fast computers it means you cannot
build a fast computer that is physically large because if a computer is operating at one giga
hertz which is a modest relatively slow speed for a modern computer that means it executes
individual operations in a billionth of a second and if the memory were a foot
from the central processing unit it would take about more than a second for the central processing
unit to go out to memory send it an address and then another second or a little bit more
for the inform a second nanosecond billionth of a second for the information to come back and that
would be very long compared to the processing time of the computer so today's computers even super
computers have to be built small so that the transit time for the electrical signals becomes
insignificant compared to the basic clock rate of the computer and as those clock rates go up
that requirement set ultimately by the speed of light becomes more and more stringent
so what else is on this computer well other things are connected to the data bus for example
there's a disk controller which is the hardware that controls the hard disk and then there's the
hard disk itself and some of that disk controller is actually built onto the hard disk i showed you
a hard disk in the previous lecture and there was an electronic circuit board built right onto it
and that would connect with cables into one of these slots i've showed you on this board
so the hard disk would connect and i want to make a comment about well a couple of other
things are connected before i make that comment um there's keyboard and mice
mice talk a little bit more mice later and keyboards how they work they're connected and
there need to be devices called serial to parallel converters i'll get to those in just a minute
there's a display that's taking data off the data bus being processed to display it in
correct form on the display draw the picture show the text whatever um there's probably a usb
port universal serial bus the universal serial bus is a wonderful uh mechanism that allows you
connect any one of a broad number of devices from mice to scanners to digital cameras to whatever
to that computer universal serial and i'll get to serial in just a minute by the way you might
have noticed me in the course of these lectures kind of surreptitiously holding a little thing in
my hand and i once pointed out that it was a laser pointer but that's not its main purpose
its main purpose is it's a little remote control that advances the slides that i'm actually displaying
on the computer as i present these lectures and since we usually hide that because it's not part
of the lectures you don't see it going on but in fact since we're talking about computers i've moved
by computer a little bit and of course in a laptop computer all these things are combined in a nice
single case very neatly done with a flat screen and so on but i've got connected to my universal
serial bus here at the back a little receiver and that little receiver receives radio signals
from this little clicking device and every time i press the button the slides advance by one on
the computer screen if i press the other button they advance back and the third button turns on
the laser pointer so that's a simple little device that i've been using and the universal
serial bus is sufficiently universal that it can accept the signals from that receiver
that the computer manufacturer may not even have known existed when they designed this computer
and that universal serial bus works perfectly to make my computer do what i wanted to when i press
the button so i press the button again and down comes the optical drive controller and the that's
connected to the mechanisms of the optical drive and ultimately tells the laser when to fire if
we're burning a cd and it tells it where to move if we're reading information off a cd so that's
kind of a block diagram of a complete computer and if i put that all together the cpu the random
access memory some of the discontroller some of these other converters are probably right on the
motherboard and then they connect by cables to peripheral devices that are located perhaps in
different physical places as with the external keyboard or the external monitor of a desktop
computer or all integrated into the same case as i have with my laptop computer here but that's
what makes a complete computer now i mentioned universal serial bus and i mentioned data bus
128 bytes wide and all that what's that all about well there are really two ways of transmitting
information digital information there are serial ways of transmitting it and parallel ways of
transmitting it and i want to just give you a sense of the distinction between those two
in parallel data transmission you have a cable that can transmit lots of information simultaneously
lots of bits go out on that cable simultaneously so here's a picture that shows a computer connected
to anything a printer a scanner whatever and if it's connected by a serial a parallel cable
that cable has many many many wires and those many many wires are each simultaneously transmitting
in this case there's four wires and they're simultaneously transmitting four bits of information
each of those bits could be a one or a zero parallel communication is fast but parallel
communication requires a big ugly cable like this one look how thick it is and if you look at these
connectors and all the many many many little pins they have in there that have to be connected
and they could get bent and could go wrong big heavy awkward cable but with parallel data transmission
the data transmission is fast because the data is all sent together you could send a single word
of data all at once on a cable with 64 wires for example much of our communication with peripheral
devices these days is with serial cables and a serial cable needs only a single well it shouldn't
say single wire but a single pair of wires and with a serial cable we send first one bit
then a little while later another bit then a little while later another bit then a little
while later another bit it takes longer but it takes a smaller cable a lighter cable and examples
of serial cables are this ethernet cable that would connect the ethernet port of a computer to
a high speed network it actually has four wires in two pairs one pair is used for transmitting
information from the computer one pair is used for receiving information so those two actions
can go on simultaneously and that makes it a little faster in a sense they've made transmit and
receive in parallel with each other but the data is sent serially here's a usb cable universal
serial bus cable this end would go into my computer the other end would go into whatever device i'm
talking about i'm connecting it to like my little receiver over there and usb cables also have
two pairs four wires two wires carry the data and usb cables are capable also of providing
a modest amount of electric power to peripheral devices so that little receiver doesn't have
to be simultaneously plugged into the wall it doesn't need batteries because the other
pair of wires in the usb cable supplies a little bit of power so if you buy a usb hard drive for
example it may be small enough and use little enough power that you don't have to simultaneously
plug it into the wall you simply plug it into the usb port and the usb port supplies the power
that's needed so that's the difference between serial and parallel and if we go back to our
block diagram a minute you can see that several of these devices the keyboard and mouse or the usb
port have serial to parallel or parallel to serial conversion taking place because the data bus is
intrinsically parallel but some of these devices are communicating serially by the way i should
point out the one other very important part of the whole process that i mentioned before at the
lower left is the clock which is again what determines that fundamental speed of the computer
let's talk a little bit about some of the other devices keyboards for example mice things like
that the keyboard is simply a set of switches here's a keyboard
bunch of keys and those keys are basically switches and this picture shows sort of how
they might work here are the keys and under each set of keys there is each row of keys in each
column of keys there might be a wire and when i press a key say the f key that will join the two
wires that cross at the f key and electric current will flow in a circuit that comes out of that
middle wire at the top of the microprocessor and goes into the middle wire on the side and that
unique combination of wires carrying current is enough to signify that the f has been pressed
if i had pressed the g instead current would have been going in on that middle wire on the left
but it would have been coming out on that right hand wire on the top so the microprocessor and
the microprocessor increasingly is built into the keyboard the keyboard itself is a computer
and the microprocessor does several things one thing it does is interpret what the key is
and then it sends out the digital code that happens to be the ascii code for the letter f
another thing it does is because mechanical switches can actually bounce a few times and
send a few thousand f's in the tiny time it takes to make contact the microprocessor catches only
the first contact and then ignores the others for a while for example has a lot of other functions
like that so that's what the microprocessor is doing in some keyboards there's actually what's
called capacitive switches where there's no actual contact made and that solves some of those
problems but most involve actual physical contact computer mice are another important input device
these are two fairly modern mice because they're both wireless they don't have to connect by a
wire but they send their information to a little receiver similar to the one associated with my
remote clicking device the early mice had a ball a rubber ball that actually rolls around and there
are optical or electromechanical devices that sense the position of that ball more modern mice
actually have a essentially a tiny digital camera built into them in the bottom of the mouse there's
a an led basically which shines down on the surface and there's an array of photo detectors
very similar to but cruder than the detector in a digital camera and basically what happens is
the mouse takes a picture of the terrain it's rolling over and as it moves it's taking different
pictures and by comparing them it's figuring out where it's moving and transmitting that
information to the computer to tell where the mouse is a remarkable device
we also need to have a display well here's a modern display it's a a flat screen display using
liquid crystals how do liquid crystals work well i mentioned polarization in the last lecture in
the electromagnetic module i talked to showed you two polarizers and how you cross them no light
would get through well liquid crystals are crystal structures that are nevertheless liquid and the
orientation of the crystal can alter the polarization of light and in a typical liquid crystal
display we have an array of of a grid that sort of sets up the orientation of the crystal in a
certain way and then as you go through the display the orientation of the crystal changes
and that changes the polarization of light so you have two polarizers and the light comes through
one polarizer and if it's had its direction changed by 90 degrees it can't get through the other
polarizer but then when you apply an electric field to these crystals they line up so there's an
electric field of some positive charge on a metal plate at the top negative charge at the bottom
they all line up and in that case now that the polarization stays the same and the light can
get through and what's happening in a liquid crystal display and here's a picture showing the rather
complicated structure of a liquid crystal display what's happening ultimately is you are turning
on and off individual pixels individual little picture elements little spots on the screen
and for each different color of the three primary colors you're doing that and you're doing that by
applying little bits of electric field in most the crystals crystal displays these are thin film
transistors the little transistors are actually handling the turning on and off of the electric
field and that's letting light through or not letting light through so that's a quick look at
how a computer and some of its peripherals work in the remaining few minutes of this lecture
i'd like to give you a little bit of a sense of how computers process what they do because computers
don't just process numbers they process information pictures music text let's take a look at how some
of that works i've showed you some of these ascii codes before for coding a text information here's
a table which has some character a in decimal is 65 in binary it's 0100001 at the right i've also
listed in two other funny unit systems hexadecimal and octal and i'll tell you in a minute why those
are there here's the letter lowercase p that was capital a here's the space it's decimal 32 it's
hexadecimal 20 it's octal 40 it's binary 01 and the rest zeros there's the letter n it's 78 in
decimal it's 4e in hexadecimal it's 116 in octal and it's that long string in binary what's all that
about well let me tell you a little bit about numbers and you may have learned this sometime
way back when you learned the new math in eighth grade or something that was called the new math
in my day it's certainly not new now here are the digits to make the base 10 numbers that we
always work with 0 1 2 3 4 5 6 7 8 9 out of those we build up all the possible decimal numbers
here are the numbers in base 2 simpler 0 1 the tradeoff for them being simpler is we get longer
numbers here are the digits in base 8 they go up 0 1 2 3 4 5 6 7 and that's it so we get slightly
longer numbers in base 8 a 1 in the second place means 1 times 8 not 1 times 10 and here's hexadecimal
0 1 2 3 4 5 6 7 8 9 a b c d e f because there are 16 possible digits in hexadecimal and the
second decimal place is 16 and the third is 16 squared of 256 the reason we like octal and
hexadecimal is because those are powers of 2 8 is 2 cubed 16 is 2 to the fourth power so it's
very easy to convert from octal and hexadecimal to the true binary numbers at the heart of the
computer and that's not so easy for base 10 so to give you an example and n is 78 in base 10
that's 7 times 10 plus 8 times 1 that's 78 and n is 116 in octal that's 1 times 8 squared which
is 1 times 64 plus 1 times 8 plus 6 times 1 and that's 78 here's n in hexadecimal it's 4e 16
well that's 4 times 16 because that's the 16th place this is only a two-digit number in hexadecimal
1 times e e is well f is 15 if you look above at that row and hexadecimal e is therefore 14 so
that's 1 times 14 and that comes out also to 78 and if I convert that to binary all I need to do
with that hexadecimal number is take and convert each of the digits the first one is a 4 so that
0 0 1 0 in binary and the second is a 14 so that's 1 1 1 0 and that does that conversion so those
are the number codes for the number codes that correspond to letters what about when we're
dealing with not text but say a picture well digital cameras take an enormous amount of
information let's look at a typical picture here's a photograph of my dog fergus he's a
shetland sheepdog and he's romping in the vermont snowstorm I take a picture of him with my four
megapixel digital camera that's four million pixels each of those pixels has 24 bits which
represent the intensity of the of the light and also the color there's eight levels of intent
not eight levels of intensity but two to the eight levels of intensity that takes eight bits
for each of three colors put that all together that's about 96 million bits a bit is eight bytes so
that's about 12 megabytes so the picture file and this would be true if I downloaded it in its raw
format for my camera would occupy about 12 megabytes of space in my computer and quickly
fill up my computer's memory and hard disk with pictures and I don't need that much represent
I don't need that much information I can contain almost exactly the same information in far fewer
bits and here's how it works we have some kind of compression scheme so let's blow up this little
part of fergus where his white rough joints his gray a brown or fur and let's blow that up again
and let's blow that up once more and you see the jaggedness in that circular blow up and in this
next blow up you can actually see that we're divided into 25 little squares each of which is
identical color intensity over that square these are the individual pixels there are 25 of them
in this little tiny place how much information is there well 25 pixels there's 24 bits per pixel
that has 600 bits of information there are many schemes for compressing that information to less
and I'm just going to give you an example of one and it's related to but not the same as the so
called jpeg compression joint photographic experts group which is a common scheme for
compressing photographs it works something like this the compression scheme says okay let's start
at the left position the left side of this because the color is pretty uniform along the left side
remember this is in the region where the color is changing from white to brown pretty uniform
along the left so it takes two bits to specify where we are left side right side top side bottom
side four possible sides two bits four possible choices so takes only two bits to specify that
we're going to start at the left side the color and the intensity on that left side that takes 24
bits so we've got two bits to tell where we're starting and we've got 24 bits to describe what's
going on there then let's say move to the right gradually changing uniformly to the right edge
color well it takes 24 bit we already know since we're at the left we're going to progress to the
right that doesn't take any more information we need 24 bits to talk about the intensity and color
at the right edge that's 24 more bits added all up we have the two bits for the left edge starting
point the 24 bits for each of the colors and intensities at those two edges and we know how
to fill in all the rest because a computer can compute so we have reduced the total bits to 50
a compression of about 12 to 1 and that's actually fairly typical of the compression schemes that
are used in digital cameras there are other compression schemes used to get movies on to
DVDs they have to be very clever and they generally work well if you have gradual transitions they
tend to fail where you have very abrupt transitions so sometimes you'll see funny little graininess
jumping into a digital movie that's why it's occurring the compression scheme is not perfect
so that's how we process massive amounts of data like pictures so let's now wrap up this
entire module and see where we've come again we've started at Adams silicon atoms in the
previous module we got all the way to things like memories in the module before that we got
all the way to processing circuits now we've seen the complete computer we've put that together
we've added peripheral devices like lcd displays like with crystal displays keyboards mice that
kind of thing we've seen how we store everything in the form of binary numbers how those binary
numbers might represent particular decimal numbers they might represent letters they might represent
digitized parts of digital images and in the end we get something we're interested like a true
digital picture that's an add all the way from the atom to the computer
