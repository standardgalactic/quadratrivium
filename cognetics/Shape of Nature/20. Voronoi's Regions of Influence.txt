Welcome back and thanks for joining me again.
So far we've been looking at point clouds in the plane.
Well in this lecture we're going to see a new way of understanding these point clouds.
This new method appears in the areas of studies such as cartography,
meteorology, condensed matter physics, even biology.
So far we've considered the point clouds as coming from terrain data.
This is what motivated us to get the surface reconstruction using triangulations.
Well in this lecture we want to look at these points as places of high importance.
For example, what if these points represented hospitals in a city?
Consider this problem.
Given a collection of hospitals in a city we wish to find the hospital that is closest to us.
Well how do we do this?
These points on the plane, this point cloud represents the hospitals in the city.
And imagine you live somewhere in the city and you want to find the hospital that's closest to you.
Well the key is to look at this entire problem from the perspective of the hospital itself.
Each hospital has a region of the city which it influences.
Any point inside this region which is close to that hospital
means that you would go to that particular hospital than to something else.
So if you consider the entire problem in the perspective of the hospital's viewpoint,
you can actually solve it.
So if we know the region we live in, then we know the hospital that is closest to us.
This lecture looks at understanding these regions of influence
emanating from these 2D points on the plane called Voronoi diagrams.
Before diving into the mathematics, let's pause to consider the power of Voronoi diagrams in the real world.
As we've seen, there's a practical nature for determining areas of influence
with regards to hospitals or post offices or even where you place forest ranger stations.
But there turns out to be an also economic issue of for example where to build another supermarket or a gas station.
Imagine you're an owner of a supermarket chain and you see the city in front of you
and you see how much influence each supermarket takes.
Well if one supermarket has an enormous area of the city that it has to cover,
then that's probably a great spot to build another supermarket to get in on the competition
or to have access for people to go there.
These Voronoi diagrams also classically appear in several amazing places.
Descartes for instance drew a figure using Voronoi diagrams demonstrating
how matter is distributed throughout the solar system and you can see that image here.
It shows the gravitational influence of stars in 1644.
A beautiful use of Voronoi diagrams comes from a medical breakthrough
of stopping the cholera epidemic in England.
In the 1850s London had a serious problem with cesspools and sewers.
The government decided to dump waste into the river causing massive water contamination and the cholera outbreak.
Well in August 31st 1854 a major outbreak occurred in the Soho district
and within three days 127 people died and within 10 days 500 people had died.
And most of this was associated with a tad time air pollution
since the theory of germs was not widely accepted.
Well British doctor John Snow interviewed local residents to show that the broad street water pump
was the main cause of the epidemic. How did he do this?
Well he actually used Voronoi diagrams in a different format to show that the regions affected
were those using this water pump. Take a look at this figure.
The water pump here is located sort of in the central region of this figure marked here
and this is the region that Dr. Snow outlined.
Now the distance in terms of how much the water pump influences is not based on distance on the plane
but it's actually based on distance in terms of walking because that's what's important to get to the water pump.
Well nature also has a powerful means of defining regions of influence.
For example consider the veins in leaves and the wings on a dragonfly.
Consider even how mud cracks and forms these structures that look like partitions.
There's a natural partition of these objects into tiles and into regions
and these tiles and partitions are not regular or symmetric.
They don't have a beautiful platonic solid polyhedral structure
but yet there's an underlying relationship which we want to explore today
into this world of Voronoi regions.
We could even consider crystal lattices in condensed matter physics
and again we see the same kind of tiling and the same kind of structure
except now we see it in 3D.
It's not perfect dodecahedral or icosahedral tiles
but yet there's this three-dimensional region of influence we see.
What we are seeing are Voronoi diagrams, partitions of space based on regions of influence.
Each region kind of emanates its influence around it and is governed by a source
and as the sources influence grows it fights with surrounding sources for space and resources
and you can think of this from a biological perspective
or you can think of this as a post office
or as a supermarket competing for resources for the city.
Now the boundaries of where two sources meet
is where we see these partitions arise.
Now let's consider the Voronoi diagram from a mathematical viewpoint.
Now once again we are given a point cloud in the plane just like last time.
Last time the points represented heights of three-dimensional objects
which we projected onto the plane, looked at triangulations
and we constructed our surface
but now these points represent sources of influence
which govern the growth of our Voronoi diagrams.
Let's take a look.
Here's an example of a Voronoi diagram in the plane.
Here you see five points, one, two, three, four and the fifth point called P.
Each of these regions that these points control is the Voronoi region
based around each of the points.
Notice where these two points, one and P, meet right there in the middle
if their regions of influence colliding is the Voronoi edge.
So where three edges come together,
three of these regions of influence come together,
for example where three, four and P meet together is called a Voronoi vertex.
So you see for an edge it's when two points and their regions of influence
collide together and a Voronoi vertex is when three of these come together.
So let's consider some simple examples of these diagrams.
When we only have two points, what is its Voronoi diagram?
What does it look like if you only have two points in the entire plane?
Well, each point, point one and point two, has its own region of influence
but what does it look like?
Well, anything closer to point one is in its region.
Anything closer to point two is in its region.
So the best way to see it is this picture.
Here we see our two points, points one and two and we draw a line between it.
Then we take the perpendicular bisector,
the line that's perpendicular to this line that we drew right in the middle of it
and you can see this cuts the entire plane into two regions.
Region on the left side is the one closer to one,
the region on the right side is closer to two
and those are the two Voronoi regions
and our Voronoi diagram is simply this one line.
Well, what about for three points?
Well, then we have three distinct bisectors.
If we have three points, points one, two and three,
then there's a Voronoi edge between points one and two, the bisector that cuts there
and one between two and three, the bisector that cuts there
and one between three and one.
So we have these three edges.
Now here's a great question to think about in terms of visual understanding.
Do all of these bisectors have to meet in the same point in the middle?
Or can it look something like this?
Is this a possible explanation of what a Voronoi diagram looks like?
Well, a classical theorem of Euclid says that they must meet in one point in the center.
If we form a triangle based on the three points,
Euclid says that the perpendicular bisectors of the triangle,
of each edge of the triangle, must pass through one point.
Indeed, this center point is a Voronoi vertex.
It is the center of the unique circle which passes through the three cloud points.
So this is exactly how three points on the plane must look.
Well, before I go on, I want to pause a little bit for clarity.
We are actually dealing with two kinds of points.
Notice that we originally have the points that are given to us,
the points from the point cloud,
and these are the places where the regions that influence emanate.
These could be hospitals, these could be fire stations,
or centers of cell growth in biology.
These points are the ones that are similar to the points we had last time
when we talked about triangulations.
But once we have these points, we have an underlying,
invisible Voronoi region structure.
When you go to a city, you know where the hospitals are,
but you don't see the Voronoi region it's partitioned in.
It's an invisible mathematical construct that gets placed on it.
So you have the original points of influence,
and you have these Voronoi points, these invisible points
where three or more of these point regions of influence the Voronoi regions meet.
Well, now that we have talked about the theory behind the diagrams,
let's get a little bit more practical.
How crazy can the Voronoi regions look?
We know how they can look like when you have two points and three points,
but what about things in general?
What about when you're dealing with hundreds of points?
Can this example that you see here be a possible Voronoi diagram of some point cloud?
Is this possible to have this kind of structure
where these aren't clear convex polygons,
but they can have bumps and curves and different segments?
Well, a classical result from geometry implies that each Voronoi region,
each region of influence must be convex.
And to remind us again what convex is,
it means that given any two points in your region,
the line segment that connects those two points must remain within your region.
So this Voronoi diagram partition that we see is clearly not an official one
because several of these polygons are not convex polygons.
So, given a point cloud, how can we construct the Voronoi diagram?
We know how to do it for two points and for three points,
but what if somebody gives you a hundred points?
Is there a beautiful method to do it,
or do you just have to do it one at a time in an ad hoc way?
Well, we're going to use an incremental approach,
a beautiful way of creating the Voronoi diagram
discovered by Green and Sipson in 1977.
Remember, this is sort of equivalent to the incremental approach
how we built our triangulation based on the point set.
We gave our point cloud given on the plane
and we started building our triangulation including one point at a time.
And this is the same kind of idea,
the same kind of incremental, incrementing one at a time approach
that we're going to take to find the Voronoi diagram.
Now, today there are numerous more efficient methods of doing this,
but this method I'm going to explain to you today continues to be used
due to its clarity and simplicity.
You can blow through the dust of the complexity
and see really what's going on in terms of how this is built.
The method we use is the incremental method,
this one-at-a-time method.
And this, again, is a similar method we talked about last time.
Now, here is the way we did it before in terms of triangulations,
and here is the way we're going to do it now.
The first thing we do is we order the points in our point cloud
any way we want.
So we take any kind of structural ordering we want
and let's pretend that we already have a Voronoi diagram
constructed for, let's say, 20 points that are given to us.
Now, somebody says those are great 20 points,
but you've forgotten the 21st point.
You've forgotten this extra hospital.
Given a previously built Voronoi diagram,
how do we include this new one, throw in this extra point,
and build a Voronoi diagram with 21 points?
Do we have to start all over?
And the incremental algorithm says no.
Given an algorithm, excuse me,
given a Voronoi diagram already for 20 points,
there's a beautiful way to add another one in,
one at a time, and it can compensate for this perfectly
to give you exactly the right Voronoi diagram.
In this particular picture, we see five points,
one, two, three, four, five labeled,
and there are numerous other ones on this plane.
So I want to focus around these five points.
And the first thing we do is, given this extra point,
I'm going to call p, that's thrown into the plane.
Now, notice this point p doesn't have its own Voronoi region,
although it is a point in the point cloud.
So we need to come up with a way of including p
and creating its own Voronoi region
in this entire Voronoi structure already given to us.
So how do we do this?
The first thing we do is find the Voronoi region
that this point p lives in.
It must land somewhere in the plane,
and each of the points in the plane has been partitioned
and cut up into separate Voronoi regions.
So it must land somewhere.
In this particular case, p lands in the region of one.
So I take my point p, I consider my point one
that it's landed in,
and I draw the perpendicular bisector between p and one.
I pretend that my problem only has two points,
which I know how to do.
I draw that perpendicular bisector between it.
Great.
Now, since each of my Voronoi regions are convex
by a classical theorem,
we know that these have to be convex.
That means my perpendicular bisector,
this line that I've drawn,
intersects this convex region in two points,
one on this side and one on this side,
at the two ends of this line segment.
Well, let's pretend that I'm just going to take this line segment,
the perpendicular bisector,
and walk to one of the edges,
which means it must be a boundary between one and some other region.
In particular, in this case, it's two.
So I start at my point p,
I know which region it lands in,
I throw in the perpendicular bisector,
I cut it up,
and you know that all the points on the perpendicular bisector
closer to p isn't the p's region.
It's closer to p than it is to one.
But how is it in relation to two?
Well, now, since I've found that two is the next region
adjacent to this bisector I've thrown in,
I draw another perpendicular bisector,
from p to two,
and I draw that one,
and I know this also has two points on the boundary,
because all my regions are convex.
So I go to the other point,
one point is the one-two intersection,
the other point turns out to be the two-three intersection.
So now I know three is a point of importance.
I draw a perpendicular bisector between p and three,
then I draw one between p and four,
draw one between p and five,
and I notice I've come back to where I started from.
And if we do this,
we have literally carved out with a knife
a region around p.
And what we do,
we remove any of the interior information
that's inside this region,
and we're done.
Now, this is a beautiful algorithm.
Why?
Because it leaves everything outside in the plane alone,
except for the region right around p.
Instead of worrying about the global property
of what point 85 and point 910 have to do,
we just have to worry about the region right around p,
one through five.
And this beautiful property of local construction
tells me now what to do.
So if somebody asks me how to build a Voronoi diagram
for 30 points,
I know how to build it for two of them,
I know how to build it for three of them,
and with this method,
given three, I know how to build it for four,
and given four, I throw one in,
I know how to build it for five,
and I can incrementally build as many Voronoi diagrams
as I want.
Well, now that we know how to build these guys,
what are some properties of the Voronoi diagram?
Well, we know the regions must be convex,
but what else do we know?
Can we, for example,
count the number of Voronoi vertices and edges?
Recall that we could count the number of triangles
in any triangulation of our point cloud
if we knew how many interior and boundary points we had.
We came up with a beautiful formula to count
the number of triangles in a triangulation,
but what do we need to do to count the number
of Voronoi vertices,
these invisible vertices that tell you when three regions meet,
and what about for the number of Voronoi edges?
Are they based on position,
are they based on the angles they form with one another?
Will the fact that these regions are convex help us somehow?
Well, this is an extremely important question
for a computer scientist,
because let's pretend you have to worry about
points of interest, 30 points in your point cloud
that represent hospitals,
and you're running your incremental algorithm.
Can you possibly end up with 300 Voronoi vertices
for your 30 points?
Can you possibly end up with 3,000 Voronoi vertices
for your 30 points?
If you're given 30 points and you have to worry about
3,000 Voronoi vertices, this is frustrating
for the computer to store the information,
keep track of the information,
and compute with this information.
Well, there is good news.
We can show that if we have n points in the cloud,
then the number of Voronoi vertices equals 2n minus 5,
and the number of Voronoi edges is 3n minus 6,
which means if you're given 20 points,
then you only have to worry at most twice the number
for the number of Voronoi vertices
and about three times the number for Voronoi edges.
You don't have to, given 20 points,
have to worry about 300 or 600 Voronoi vertices and edges.
So let's take a quick look at the proof.
Here's what it would look like.
Given our Voronoi region,
given this partition and given our Voronoi points,
notice that these regions on the outside have infinite area
that just keep going on and on.
It's a little frustrating to do this,
so what I do is I throw an extra point
somewhere far outside this point cloud,
and since I'm only counting,
I don't care about the geometry of lengths and angles,
I just want to count the number of vertices and Voronoi edges.
I topologically stretch these Voronoi edges
all the way to attach to this outside point.
Now, based on this,
a counting argument yields the results that we want,
where the proof is, again, based on Euler's formula.
Here's what it would look like.
Well, given end points in the plane, what do we know?
Well, if V is the number of Voronoi vertices,
E is the number of Voronoi edges.
These are the values that I'm trying to find.
Well, what do I know?
I'm trying to find the number of vertices,
plus, remember that extra point that I added on?
So that's V plus 1, total vertices in the plane that I have.
Now, how many edges do I have?
I have E edges, that's what I called E as my definition.
Now, how many regions do I have?
Remember, I need vertices, edges, and regions.
Well, each region is the number of points
from the point cloud itself.
So I have V plus 1 vertices, E edges, and N regions.
So V plus 1 minus E plus N equals 2, Euler's formula.
Great, but I also know something else.
Look at it from the perspective of each Voronoi vertex.
You know, there are three regions, Voronoi regions,
that come in to give you that Voronoi vertex.
So thus, there are three edges that come from there.
So if I look at each vertex,
three times the number of vertices is the number of edges.
But each edge is counted from this vertex and this vertex,
so I'm double counting my edges,
and we've seen this argument before.
So I get the formula, 3 times V plus 1 equals 2, E.
Now, if I put both of these equations together,
then I get the fact that the number of Voronoi vertices
equals 2N minus 5,
and the number of edges is 3N minus 6.
Exactly what I wanted to do.
Now, that's great, that's fantastic.
Now we have an understanding in terms of the combinatorics
of counting what the Voronoi diagram is about.
Now, let's think of a new way of thinking about
what the Voronoi diagram is really describing to us.
What kind of information it's giving to us.
The Voronoi diagram gives us information about
which points in the cloud are closer to one another.
Not only does it give us these regions of influence
where we can partition them into convex polygons,
but it tells us which points are actually closer.
If you take a look at this picture,
we see that point 1 and 2 in the point cloud
are closer to one another,
they share that Voronoi edge,
whereas point 1 and 6 are not close at all
because there's no edge between them.
Point 1 is next to 2, next to region 2,
which is next to region 5,
which is then next to region 6.
So the Voronoi diagram itself that we get
talks about relationships in terms of closeness
in a new way.
Now, is there another way I can capture this data?
I can represent visually this idea of closeness,
rather than these Voronoi regions and these Voronoi edges.
Well, there is.
What if in a naive, simple, child-like way
I simply start connecting the dots?
So I can say 1 and 2 have Voronoi regions
that are next to each other,
so I'm going to draw a line between 1 and 2 because they're close.
Now, notice 1 and 3 have an edge between it
because 1 and 3 have Voronoi regions that are adjacent,
so I'm going to draw an edge between 1 and 3,
just draw a line right there.
Now, 3 and 5 are adjacent to one another, draw a line,
and if I keep doing this, I get this following picture.
Now, when we straighten out all these lines
and make them straight lines instead of just arcs,
what do we end up with?
Well, if you notice, each of these lines, as you connect it,
focus their energy and focus their information
around a Voronoi vertex.
Well, what is a Voronoi vertex about?
Well, remember, three of these Voronoi regions
come together and form a Voronoi vertex,
so thus, there must be three edges that are connected up
in my childlike way of depicting this information,
which means when I straighten all these edges
that I've connected up, I actually end up with triangles.
So, at the end of the day,
my point cloud using the Voronoi diagram
gives me a new triangulation,
and this triangulation gives me information about closeness.
So, remember, I could have connected the points one and five
and created a new triangulation,
but instead, I've created one, two, and then two, four,
and then four, five as my new edges
to give me this particular triangulation of closeness.
Now, this is one of the numerous triangulations
we talked about last time.
Remember, last time in our previous lecture,
we created the flip graph, an entire world of triangulations.
So, this is one particular triangulation.
Which one is it?
We created a whole world of them.
Which one is it?
Remember, we came up with, for example, the Delani triangulation
as a triangulation that talked about surface terrain reconstruction.
This one talks about adjacency and closeness.
But one of the foundational results of computational geometry
says that this triangulation you get from the Voronoi diagram
is the Delani triangulation.
To me, that is a stunning result.
The Delani triangulation that is used to avoid skinny angles,
which is used for terrain reconstruction,
is the same triangulation you get
that encapsulates data about proximity and closeness of points.
It's true, and it's a beautiful proof.
Moreover, historically, Delani,
the mathematician who came up with the triangulation,
and Voronoi, the mathematician who came up with this region partition,
were related to one another.
Delani was Voronoi's PhD student in Russia.
So you see, there's this mathematical genealogy
that gets played out in the mathematics itself.
Well, let's close by looking at an extremely important
and perplexing problem that remains to this day
unsolved even after 500 years.
Here is a great open problem.
Is it possible to cut a convex polyhedron
along its edges and unfold it flat?
Let me give you an example over here.
So here we have two cubes.
Is it possible for me to take a cube,
choose certain edges of the cube,
and cut it open and lay it flat?
Now, there are two conditions I must have.
The first condition is I can only cut along edges.
And the second condition is at the end of the day,
all my pieces must be connected.
And when I say unfold and lay it flat,
I don't want any of my pieces to overlap one another as I unfold it.
So let's take a look at this cube.
I can actually cut open along certain edges,
and I can lay this cube flat.
This is the Roman cross formation of this unfolding.
But I can take the same cube,
and I can unfold it in a different way
by cutting along certain edges.
There are lots of ways of doing this for the cube.
I've come up with probably several other examples of doing this.
But I know I can do it for the cube.
In fact, I've done it in two separate ways here.
But can I do this for every possible convex polyhedron?
In other words, this is a question for origami in reverse.
We're taking a sheet of paper.
We're cutting a part of the sheet of paper out.
And can I fold the sheet of paper up to get my convex polyhedron?
Can I refold it and get a 3D origami structure
of folding based on this convex polyhedron?
Now, this is an extremely useful problem for industrial packing.
Why do you want to ship a three-dimensional cube with air in it
when you can unfold it and ship the flat two-dimensional part?
And it's a far easier shipping cost.
And if you're going to cut along the edges anyway,
then that's the point of stress.
You can always reconstruct and build this 3D object along those edge cuts.
This question was first asked by Albrecht Durer in 1525,
and it remains unsolved for almost 500 years.
Every example mathematicians and computer scientists have ever tried works.
In other words, every convex polyhedron you could come up with
or computer scientists can come up with works.
We actually find the collection of edges that we can lay it flat.
But here's the problem. We don't know why it works.
We don't understand something as simple as a convex polyhedron
and cutting it along edges.
Maybe, just maybe there's a wild example out there,
like Bob Connolly's flexible polyhedra that we talked about earlier,
that actually won't work.
Maybe there is some kind of convex polyhedron that might break down the system
and actually prove us all wrong. We don't know what's going on.
But what happens if we're allowed to cut not just along the edges,
but also along the faces of the polyhedron?
I'm actually completely changing the problem
and allowing me to have more power than I should have.
But maybe if I can't solve the problem just along the edges,
what if I weaken it and give me more power to try to solve this thing?
Can I do it now? It turns out I can.
And this is where our work on Voronoi diagram comes in.
We're going to show how to unfold convex polyhedra
if we cut along cuts that go through not just edges, but also faces.
Now, of course, this is not efficient,
and it's not the ideal structure we have,
but at least we get a partial solution.
And this is called source unfolding.
We start by choosing a point, any point we want,
on the surface of the polyhedron.
This is called the source point.
So I'm going to call that point x,
and I'm going to put it here at the bottom of this rectangular box.
Now, unlike previously, when we had different sources,
different points in our point cloud fighting for control over a region,
this source will be fighting for control with itself.
This is the beautiful way that Voronoi diagrams fits in with polyhedra.
So what we want to do is we want to find all points on the polyhedron
that have two or more shortest paths to x.
So let me explain what this means.
If I look at this point x,
consider this edge on the right side of this box.
I claim that any point on this edge has two separate ways of reaching x,
both the same distance.
So if I start at x, I can walk right to the right edge of the box
and walk straight up, and I can get to this edge.
Or I can walk to the front of the box,
walk along the front side, and then walk along the right side
and get to this point again.
Both of these things will have the same distance.
There isn't Voronoi diagram about points that have equidistance,
two different ways to get to the hospital if you're along a Voronoi edge,
and three different ways to get to the hospital in different hospitals
if you're along Voronoi vertices.
Well, if you look at all points that are on this box
that have two or more equal ways of getting to x in the shortest time,
this is called the cut locus.
Let's take a look.
All of these edges you see here, colored, are the cut locus of this thing.
Now, look at the very top edge on the top of this box.
We see that I can, starting from x, walk to the front of the box,
walk all the way up in the front and walk in the top and get this point.
Or I can walk to the back all the way behind the back
and walk to the front of the top to get this thing.
Now, if I cut along all of these cut locus points,
this in some sense representing my Voronoi diagram and my polyhedra,
then you get a picture like this.
I can actually cut and open this polyhedron up and lay it flat.
And now this is only based on this point x.
You can change this point x to any other point,
and you can unfold it in beautiful different ways,
all using the power of Voronoi diagram.
We have shown the usefulness of Voronoi diagram today,
and this is not just an unfolding polyhedra, but in nature,
in city planning for businesses and numerous areas.
We have also shown not just a method of constructing Voronoi diagrams,
the incremental method, but a powerful connection
between Voronoi diagrams and Delani triangulation.
And this same set of powerful ideas can be applied to three-dimensional point clouds.
A model like this, created by Bathsheba Grossman,
an artist who created this using a 3D printer,
shows a three-dimensional version of what a Voronoi diagram looks like
for points in 3D, where these points are point clouds floating in space,
and you convex polyhedral regions that are your Voronoi regions itself.
And similar to two-dimensions, a similar duality exists
for three-dimensional Voronoi diagrams and Delani tetrahedralizations.
Well, our next lecture continues our ventures in the world of point clouds,
where we encounter convex hulls.
They're extremely useful for fast data processing,
needed for facial recognition software, collision detection and robot motion planning,
and computer graphics. So stay tuned.
