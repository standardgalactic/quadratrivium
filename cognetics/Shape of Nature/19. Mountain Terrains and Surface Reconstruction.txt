Welcome back, and thanks for joining me again.
We have seen in previous lectures how to study polygons leading to scissor cutting, origami
folding, and rigidity theory.
Well, this lecture focuses on using polygons to approximate large-scale terrains on the
earth.
In order to understand geographical terrain data, both satellites and airplanes are used
to get a sample cloud of data of height information over a region.
For example, an airplane would fly over a particular region, and you would get a laser
beam coming down, or some information gathering device coming down, and that point, at that
point of intersection, it will come back up to the airplane, and that point will have the
height at that point.
So as the airplane flies over, as the satellite scans over the data, we get a cloud of information,
a cloud of points with height values, and our job using these heights is to try to reconstruct
the terrain based on the observed values.
Well, this procedure is also used to create meshes.
These reconstructed terrains are called mesh, because we're putting a mesh on these points,
on these clouds.
We're also used to create meshes of numerous other surfaces, which is useful for medical
imaging and facial recognition software used for national security.
For example, you can imagine certain points of your face, maybe the cheekbones, or your
chin, or the tips of your ears, giving the points in which to reconstruct your facial
mesh, exactly as the points were given to reconstruct the terrain meshes on the earth.
So let's look into the details of meshes.
Once again, a subfield of this world of computational geometry.
We care about geometry, but from the world of a computer scientist who can use these
points and use the cloud of data to reconstruct facial recognition software imagery, or meshes
for the terrain data itself.
Now we now focus on triangulations motivated by terrain data in particular.
Let's start there.
Our goal is to reconstruct the terrain from this height data.
You're given a collection of points in space.
These are your point cloud of information.
The method used is to first project these three-dimensional point data into the two-dimensional
plane.
So we take these points floating in space, and as you can see here, we push them down
onto the plane, straight down, project them down, ignoring their heights.
The second thing we do is we triangulate the plane forming a mesh.
So look at the points on the floor that we've projected down from our cloud.
We just connect the points up as a kid would do in a game.
You would connect these points up on the floor into triangles.
You just form a triangulation on the plane.
Third, once we've projected it down, formed a triangulation on the plane, we lift up each
of the triangles to its appropriate height.
So if a triangle has three corners, and if one height has height 15 that it was projected
down from, the other one had height 17, and the third one had height 35, we would take
the triangle, we'd lift that triangle, first we'd hit 15, 17, and then 35, and you'd have
this triangle floating in space.
So this triangular mesh that we came up with on the plane now lifts to a terrain mesh in
three dimensions.
And what is important to note is that the terrain we get in three dimensions is heavily, heavily
influenced and linked with the triangulation we picked in two dimensions.
The triangulation we picked downstairs on the plane influences in a powerful way this three-dimensional
terrain we're getting.
Let me show you a really simple example to make this powerful point.
Here we see four points of height 40, 45 across from each other, and seven and five across
from each other.
So they form a square, and imagine the square is on the plane.
So I've projected these four points of these respective heights down onto the floor.
Now what happens if on the square I choose to triangulate the square this way, connecting
the seven and the five that are opposite each other, making a triangulation on the floor?
Then when I lift it up to the corresponding heights, notice that the 40 and the 45 go
very high, the triangles go very high, and you'd end up with this intense valley at that
seven to five line.
Great.
Based on the triangulation, I've received and constructed this valley.
Now what happens if I picked a different triangulation of the same point cloud, instead of connecting
the seven and the five, what if I connect the 40 and the 45?
Now if I lift it up to the exact same height as it was before, I'm not cheating by changing
heights at all.
If I lift it up to the same height, now I get an intense mountain range as the water falls
on either side, instead of a valley where the water would collect.
Here we see how different triangulation yields different terrains, but all we are given are
the height data.
We're not given any more.
So we can't go in and find out which one is it.
Is it the valley or the mountain?
Which one of these two should I pick?
So thus how can we tell which triangulation to pick, which is better for us?
We can't ask the plane to fly over again.
This is the best that's given to us as point cloud.
Well we first need a good understanding of triangulations from a mathematical point of
view to understand this problem.
Let us begin with a triangulation of a point cloud in the two-dimensional plane.
So given a point cloud S, a triangulation is defined as a subdivision of the plane by
a maximal set of non-crossing edges.
Let's take a look.
Here we see a collection of points on the plane and notice if I connect up certain points,
it has broken up the plane into triangles.
I count several triangles based on me drawing these lines.
But this is not a triangulation since my edges that connect from a vertex to a vertex actually
cross at this position.
So thus you see this is not a triangulation.
Well notice we also need not just non-crossing edges, but we need maximal edges.
So if you notice on the right we again see a triangulation, they are made up of triangles.
But it's not a triangulation because I can insert this extra edge connecting these two
vertices and not get a crossing.
So thus I need to put as many edges as I can into my point set, maximal set possible such
that I get no crossings.
This is a triangulation.
Now given any point cloud on the plane, is there always a triangulation we can construct?
Can we find a special set of points on the plane which we will not be able to triangulate
which as we start connecting the points up it just won't work out that at the end of
the day we won't get a triangulation at all, that it won't be broken up into triangles?
Well we can triangulate all point clouds on the plane.
And the proof that we can do this is by construction.
I'm actually going to build the triangulation for you rather than a theoretical proof, it's
going to be a concrete proof something very useful in computational geometry.
So here are my collection of points and this is how my construction works.
First I order our points in the plane from left to right, just order them.
So here I have 1, 2, 3, 4 all the way up to 11.
The first three points in my ordering 1, 2, and 3 clearly form a triangle, great.
But I need a triangulation of everything.
So here's what I do.
Once I have my first triangle I take my next point 4 and I draw a line from the next point
to all previous points it can see.
4 can see 2 and 4 can see 3, but 4 cannot see 1 because there's that 2, 3 line that's
cutting it.
So great, I draw 4 to 2 and 4 to 3.
Now I go to 5.
5 can see 2, 5 can see 4, but 5 cannot see 3, so I draw those two edges.
6 can see 3, 4, and 5, but it cannot see 2 and it cannot see 1.
So I draw only those three edges.
I continue this procedure to 7, to 8, to 9, to 10, and all the way to 11 continue until
we get to the last point in the cloud.
And notice we have formed a triangulation of my point set.
Now this is one particular construction of a triangulation.
It's called the incremental method because we are incrementing going from one to the
other building the triangulation as we go.
Now there are numerous other methods and there are numerous other triangulations.
Here's another example.
Given this collection of points the same as before, I haven't changed the underlying
point cloud at all, I have come up with a new triangulation.
So there are several other ones you could come up with just based on this point cloud
data in the plane.
Now what can we say about these different triangulations of our point cloud?
Let's count the number of triangulation, excuse me, let's count the number of triangles
in the triangulations.
Let's take a look.
In this particular triangulation, given this many points, we count 14 triangles.
Well look, let's look at the previous triangulation that we came up with.
Well there we see 1, 2, 3, yep, we see 14 triangles there.
All our triangulations have the same number of triangles, exactly 14.
So can we make an educated guess as to how many triangles we'll have in a triangulation?
Well remember these point clouds, the ones that we've been working with here, this point
cloud has exactly 11 points.
So we can make the following guess.
Given n points, we will always get the number of triangles to be n plus 3.
So if we're given 11 points, we're going to get 14 triangles.
That's a great guess.
Let's check to see how this works.
Here at this triangulation, I have exactly 11 points, but if I count, I get 9 triangles.
How about this other one?
Here I have 11 points again in a perfect circular formation, but again I get 9 triangles.
What about this?
Here I get 11 points again, but I have 16 triangles.
So we see that using 11 points in my point cloud, I get 9, 14, and 16 triangles in my
triangulation.
Just the number of points in our cloud is not enough.
What does this number of triangles depend on?
Well, the number of triangles depends on the number of points in the cloud, exactly like
we've been counting so far, and the number of these points which are also on the boundary.
So if you look, we have the following results.
The theorem which we're going to check with the previous example says that every triangulation
of a point cloud S, if it has I points in the interior and B points on the boundary,
has exactly 2I plus B minus 2 triangles.
Telling me the number of points in your point cloud isn't enough, you need to tell me more
information.
All I need is the number of points inside and the number of points on the boundary,
because I can add those two to get the number of points in my total point cloud.
So let's take a look at the examples we've been working with.
So here we see we have the interior points, there are none, there's nothing in the inside
of this triangulation.
We have all 11 points on the boundary, so 2 times 0 plus 11 minus 2 equals 9.
9 triangles exactly as we counted.
Well what about this?
Here we see we have interior again 0, we have 11 points on the boundary, 2 times 0 plus
11 minus 2 equals 9.
Perfect.
What about this third case?
Here we have interior 7 points, boundary 4 points, 2 times 7 plus 4 minus 2 equals 16,
exactly as before.
Now how can we prove such a result?
It just feels like this result just came out of the sky, a theorem says 2i plus b minus
2.
Well the proof of this is based on, surprise, Euler's formula again.
The first thing we do is we let t be the number of triangles in my triangulation.
Now I don't know what t is, this is my goal in life, is to find t.
Once I find t I am absolutely thrilled.
So let's see what we can do.
Well how many vertices do I have in my graph?
Remember a triangulation cuts up my plane into vertices, into edges, and into faces.
Each face is a triangle.
So how many vertices do I have?
I have i, the number of interior points, plus b, the number of boundary points, that's
the total number of vertices, those are the points on my cloud.
Well how many edges do I have?
Well each triangle gives me three edges, it contributes three edges, but don't forget
I have this big outside region as well, which contributes b edges.
It has b points on the boundary, and b edges connecting those points, this big outside
polygon, it's called the hull, the convex hull of this object, which we'll talk about
later in a future lecture, but given b points on the boundary, we have b edges contributing
to this outside face, each triangle gives me three, so my total number of edges is three
times t plus b, but wait this is not the total number of edges, because each edge is being
counted by a triangle on this side, and a triangle on this side, or a triangle on this
side, and the boundary region on this side.
So I'm double counting the number of edges.
So the number of edges is 2e equals 3t plus b, perfect.
Now what about the number of faces?
Well the number of faces, I have exactly t triangles in my triangulation, that's what
I'm trying to find.
So the number of faces is t plus this most outside face, this most big outside infinite
region space.
So the number of faces is t plus 1.
So according to Euler's formula, v minus e plus f equals 2, which means I can substitute
i plus b minus 1 half times 3t plus b plus the number of faces t plus 1 equals 2.
I solve for t, I use algebraic simplification, and I can solve for t and I get t equals 2i
plus b minus 2, exactly what I wanted proving this there.
Now a deeper question is not to find the number of triangles in a given triangulation, but
to find the number of possible triangulations of a given point cloud.
Let's take a look.
Given a point cloud, we can have several different triangulations.
I've already given several examples of one particular point cloud, but look at this.
Given this point cloud, I can have this triangulation, or this one, or this one, or this one, or
this one.
How many different triangulations can I get?
I know, I know by Euler's formula by this previous theorem, that any triangulation of
a given point cloud is going to have the same number of triangles.
The moment you give me a point cloud, the number of triangles is determined by this
previous formula.
But how many different triangulations can I get?
This is important because each triangulation is controlling my terrain data information.
So how many do I have to worry about?
How many is there for me to work with?
Well, a partial result in understanding the number of triangulations is given by a theorem
of Santos and Seidel in 2003.
The theorem says the number of triangulations of my point cloud s with i interior points
and b boundary points can be no larger than the following number.
This number is 59 to the i-th power times 7 to the b-th power times 6 factorial times
i plus b factorial divided by i plus b plus 6 factorial.
Remember what factorial is?
Seven factorial is 7 times 6 times 5 times 4 times 3 times 2 times 1.
So they said the number of triangulations, the number of possible candidates for your
terrain mesh, for your surface reconstruction is no larger than this.
That's the best result we have so far.
We don't know the number of triangulations.
It's not a beautiful formula coming from Euler.
We still don't have an understanding yet of this.
Now what we're going to study is a superstructure.
A structure bigger than what we're talking about, which keeps track of the world of all
triangulations of a point cloud.
Now I don't know a cool formula, an elegant snazzy formula that gives me all triangulations
of a point cloud, but let's pretend I have all my triangulations on the floor.
I'm going to build for us a superstructure that goes as follows.
We define a flip of a triangulation, excuse me, we define the flip of a diagonal according
to this diagram.
Given a quadrilateral, a convex quadrilateral, with a diagonal going through it, a flip is
simply removing that diagonal and replacing it with the opposite possible one, the other
possible example I can have.
This is a flip of a diagonal.
I flipped one into the other one.
Thus, given a triangulation of a point cloud, we can move to another triangulation by a
flip.
Let's take a look at our previous collection of triangulations.
Here we have several triangulations and notice I can go from this triangulation here to this
triangulation here by erasing that one diagonal and flipping it with this one.
And similarly, I can go from this triangulation here to this other one by doing another flip.
So we ask a beautiful question.
Can any triangulation of a point cloud be made into any other triangulation of a point
cloud just by flipping diagonals one at a time?
Can I just take a triangulation that you draw connecting the dots and take the triangulation
that I've drawn connecting the dots of my point cloud and make yours into mine just
with these small flips one at a time?
Now this is quite important to know since we can make these local changes, these one
flip at a time local changes to make drastic global changes in my triangulation.
To think of it a bit differently, we define the flip graph of a point cloud as follows.
This is the superstructure I'm talking about.
It is a graph having vertices and edges.
The vertices of my flip graph are the different triangulations of a point cloud.
Let's pause and think about that.
Each vertex of my graph corresponds to a possible triangulation.
The number of vertices corresponds to all different triangulations I can have.
So I have on my floor all the triangulations of a given point cloud, tons and tons of them.
Each one is a vertex.
Now I'm going to take two vertices and connect it by an edge to create my flip graph if this
triangulation and this triangulation are exactly the same except they're only different by
one flip.
Here are some examples.
Here I have triangulation of these four points.
Notice on the left there are only two kinds of triangulations I could have.
The left picture with the diagonal going this way or the right picture.
There's no other triangulation I could think of.
So thus the left picture is a vertex and the right picture is another vertex.
So these two vertices are related by this edge if I can go from this to this with a flip
which I can.
So the flip graph of this point cloud is an interval.
That interval somehow keeps beautiful track.
It's the superstructure.
This interval keeps beautiful track of what's going on behind the scenes in terms of my
triangulation.
Now consider this other example.
Here I have five points all on the boundary of a pentagon.
This is my point cloud and I can only have five different ways of triangulating it.
You can try this and you will get this, this, this, this and this.
So each of those five ways of triangulating it corresponds to a vertex in my flip graph.
I can go from one triangulation or one vertex to another triangulation, another vertex by
a flip.
And if I can do this I draw an edge.
And when I end up drawing the final picture I end up with this as my flip graph structure.
It has five vertices connected by five edges forming the shape of a pentagon.
That's my flip graph.
What about this?
Here I see five vertices with an extra vertex in the center as my point cloud.
It has nine possible different triangulations shown here.
And two triangulations are connected by an edge if I can go from one to another by flipping.
As you can see here or here or here.
So it has my flip graph here has nine vertices and 11 edges.
And this graph structure keeps track of the world of all possible triangulations for this
point set.
Thus our question about flipping local things to make global changes can be rephrased to
ask the following.
Whether the flip graph of any point cloud is connected.
Can you always go from any triangulation to any other triangulation can be said as is
your flip graph connected.
Can you start at any vertex, a triangulation, and go to any other vertex, another triangulation
by just flipping, going through these edges.
A beautiful theorem by Lawson in 1971 says that this is indeed true.
Again, this is a powerful theorem since we can make global changes to my triangulation
by these small local moves.
In fact, the proof of Lawson's theorem says that any triangulation can be made into the
incremental method triangulation we first came up with.
He says given any triangulation he has a way of flipping it to make it into the incremental
one.
You have a triangulation and I have a triangulation and if both of ours can be made into this
incremental one then I can take mine, go to the incremental one and go to yours so everything
is connected.
Now the flip graph is an example of a discrete configuration space.
It is an object that keeps track of all possible situations.
This is what configuration space means.
It's a space of all possible possibilities of something you can do.
And it's discrete because we have vertices and edges.
We have this discrete amount of data that a computer can understand.
Now we will see more of this when we enter the world of particle motions and collisions
in future lectures, this world of configuration spaces.
Now we focus back on terrain reconstruction from this point cloud data, something that
motivated this lecture in the beginning.
Now consider the following mountain range example.
Imagine you have the point cloud as follows.
You have on either side values of four.
In other words that's the height value of your point cloud on either side.
Now in the center you have values of 80.
So you have four on this side, a collection of point cloud data given to you of four.
On this side you have a collection of four and right in the middle you have a collection
of 80.
Now here are two possible triangulations from this point cloud data.
One as you see on the left and the other as you see on the right.
They're both valid triangulations.
They're both beautiful.
There's not one that's better than the other one.
Now what does the one on the left show?
The one on the left shows a mountain range.
According to this triangulation if you lift these triangles in three dimensions you see
that these triangles have this height of 80 right in the middle and they flow down to
four.
See these 80s go unbroken line at the tips of these mountains and on the side it flows
to valleys.
Now what is the right side show?
It shows a mountain range starting but then there's a deep rift in the middle of a mountain
range connecting the two force up a deep valley that cuts in in the middle of this mountain
range.
Now here's the question.
What is intuitively better for us?
Well if you look at the left this is more likely.
Remember we can't ask the airplane or the satellite for more information this is what
they have.
And what would you pick?
Well we want the left because it feels more intuitive that a random valley wouldn't come
in the middle of a mountain range.
Now there is a chance this valley might be there but it doesn't feel right.
Well why is it that we prefer the left one over the right one?
Geometrically what is different about one that we prefer over the other one?
Well it turns out that we want to avoid these skinny triangles.
Look at the one to the right.
See how the triangles are extremely skinny and the one to the left are fat triangles.
Now these were fat and skinny are actually mathematical words that are used to describe
these triangles.
And we want to avoid these small angles.
The skinny triangles give us these small angles whereas on the left side you have this whole
angles, whole concept that's more evened out throughout the triangle.
So how do we measure how good a triangulation is?
We want to say the one on the left, this triangulation is good.
The one on the right isn't compared to each other.
Well here's the way we measure it.
Given a triangulation of a point cloud we construct its angle sequence.
Here's what we do.
Given a particular triangulation like this with three triangles I list all the angles
of this triangulation starting with the smallest angle and going all the way in order to the
largest one.
Now this is an angle sequence of a triangulation.
Now we can compare one angle sequence of a triangulation to another angle sequence of
a triangulation.
Now why can we compare them?
Because remember both triangulations of a point cloud have the same number of triangles.
Remember our results using Euler's formula, they have the same number of triangles so
they must have the same number of angles so the angle sequences can just be listed next
to each other and we can compare one to the other one.
And we're going to order all different angle sequences based on triangulations by lexical
graphical ordering.
Here are examples of four angle sequences coming from four different triangulations.
The first one has angle sequence 15, 20, 30, 35 and so forth.
The second one has angle sequence 17, 22 and so forth.
Now notice 15 is smaller than 17 so I'm going to put 15 first and I'm going to put 17 next
because it's bigger in the order.
And compare the next two.
Notice the 17s there's a tie so you go to the next value and 22 is smaller than 23 so
23 that third one becomes the third position.
Now compare that one to the next one.
There's a tie in the 17th position, the 23rd position, all the way up till you get to 30
and 31.
Since 31 is bigger than 30 we put that next.
This is the lexical graphical ordering, this is how we order books in the library.
Now given a point cloud in the plane, consider all of its triangulations.
Now since all of them have the same number of triangles, they must all have the same
number of angles in their angle sequence.
And thus we can compare all of their angle sequences.
Here's what we do.
We define our dream triangulation, the one that avoids those skinny angles.
We define the Delaney triangulation to be the one with the largest angle sequence, the
last on our list.
Remember the very first number in our angle sequence is the one with the smallest angle.
We don't want skinny angles, we want to avoid it, we want to get nice fat ones.
So we want to keep going down on the list till we get the biggest angle in my triangulation.
So out of all the angles in this triangulation, of all these angle sequences, we pick the
last and call it Delaney.
Now how can we find this Delaney triangulation?
Well here is an extremely simple and clever method that works.
It uses the flip graph.
Pick any triangulation of a point cloud and find its angle sequence.
If flipping an edge of this triangulation increases its angle sequence, then flip it
and get a new triangulation.
Great.
Keep repeating this.
Pick an edge, flip it, if the angle sequence gets better, if you've changed the angles
and it's gotten better, keep that one and forget that old triangulation you were at.
The angle sequence gets worse, forget that one and find another edge to flip.
And keep doing this.
Note that this actually works since the angle sequence increases with each flip, we're getting
a better and better angle sequence.
Thus the same triangulation is never visited again.
We never can flip back to an old triangulation because we're only looking at better and
better ones.
And moreover, since there are only a finite number of triangulations, there's only a
finite number of vertices in my flip graph, and all of these are connected by Lawson's
Theorem, this procedure actually ends, and we can find the Delani triangulation.
Of course, this is not a proof, but it gives an intuition as to why it might work.
Now this is one particular triangulation in our world of triangulations.
However, we know by flips we can get there.
In the real world of computations, it turns out that Delani triangulations are extremely
important.
They appear in numerous areas of research, not just terrain reconstruction.
As we considered point clouds in two dimensions, which we were able to get triangulations for,
it turns out in computational geometry, people care about point clouds in 3D, points floating
in three-dimensional space, where we connect them up not to get triangles on the plane,
but tetrahedra in 3D.
And these are called tetrahedralizations of point clouds.
This is used to recreate hands, not just the surface of the hand, but the hand itself,
and use tetrahedra to get this.
Almost all our ideas that we struggled with in two dimensions can actually be extended
to 3D, including the notion of a flip graph.
Now, however, unlike two dimensions where we know the flip graph is connected, to show
that the flip graph in 3D is connected is one of the biggest open problems in computational
geometry.
In a collection of points in three dimensions, given another collection of points in three
dimensions, the same point cloud, this tetrahedralized and this tetrahedralized, can you go from
this tetrahedralization to this one by three-dimensional flips?
We don't know.
Well, we have studied a world of point clouds.
We have studied and used triangulations to reconstruct surfaces and terrains, and we have
used geometry to build the flip graph, the world of triangulations.
And finally, we have studied an extremely important triangulation, the Delani triangulation,
which we will see again.
In the next lecture, we consider point clouds again, but from a different perspective.
Join me then.
Stay tuned.
