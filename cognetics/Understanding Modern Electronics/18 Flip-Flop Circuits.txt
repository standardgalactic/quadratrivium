Welcome to a lecture in which we're going to find ourselves doing a lot of flipping
and flopping.
Maybe not a good thing for a politician, but an interesting thing for a digital electronic
circuit.
Now, if you think about the digital circuits we've considered so far, they've had typically
one or more likely two inputs, and those two inputs produced an output, which we described
by means of a truth table.
The output responded directly to the inputs, changed the inputs, and the output changed.
We're going to move to more sophisticated circuits now.
Circuits that basically remember.
Circuits that have two possible states they can be in, and once you put them in one of
those states, they may be able to stay there until you do something to change that state.
Those circuits are going to constitute the core of computer memory and many, many, many
other applications that are going to, that we're going to be involved with for the remaining
lectures of the course, in fact.
So we're going to spend this lecture on the basic bistable circuit, the circuit that has
two stable states, and how we change those states, and we're going to build up to some
fairly sophisticated circuits just by the end of this lecture, and then we'll go on
and build even more sophisticated circuits out of these later.
These circuits are sometimes called flip flops, because they can flip and flop from one state
to another.
Strictly speaking, the term flip flop is usually reserved for the more sophisticated of these
circuits that I'll get to later, but I'm going to use the term kind of generically.
So we want to build a circuit that has two stable states.
How do we do that?
Well, we start with the simplest possible logic operation, the not operation, the inversion.
So here's a picture of a single inverter, remember it's a triangle that looks sort of
like an amplifier with that circle at the end that says invert.
And I'm going to connect a second inverter to it, and then I'm going to do a kind of
feedback thing, taking the output of the second inverter, the right hand one, and bringing
it back to the input of the left hand one.
And let's consider now the possible states of this system.
What could it possibly do?
Well, suppose there happens to be zero, low, false, whatever we want to call it, at the
input to the first not gate.
Because these are not gates, they invert, they change the state, the output of that first
one is a one.
If the output of that one is a one, that's the input to the second inverter, so the
output of the second inverter is a zero, and it's that zero that's connected around
back to the input of the first inverter.
So this is a stable consistent state, zero at the input to the first one, zero at the
output of the second one, and a one at the output of the first one, stable.
It's a basic circuit, it can be in that state.
On the other hand, what if there happened to be a one at the input to the first gate?
Well, then there would be a zero at its output because it's a not gate or an inverter, and
then there would be a one at the output of the second gate, and that one is coming back
around to be the one at the input of the first gate.
So that's also a stable state.
That's why I call this thing a basic bistable circuit.
It can be in one or two of those states.
Now if I built this circuit and turned it on, random differences in the transistors inside
those gates and so on would cause it to go into one of these states.
And I wouldn't be able to determine which state it was.
Because it would just happen randomly depending on how the power was applied.
Maybe in other cases it would be prejudiced toward one or the other of those states.
Not very useful, because I can't change the state.
So I want to now move on and develop circuits in which I can change that state.
But before I do that, I want to redraw this circuit.
It's going to be exactly the same circuit, but I'm going to draw it in a way that looks
more symmetric.
So we don't have one gate at the beginning and one gate at the end.
And so here is a more symmetric version of this circuit.
I'm going to call the output of one of the gates Q, the output of the other gate not
Q, and I'm calling them that because we've just seen this is a bistable circuit.
One of the outputs has to be a 1 and the other one has to be a 0 in order for this circuit
to be truly bistable, which I just showed you it is.
And I'm going to redraw the circuit now in this much more symmetric way in which we see
the two inverters and we see them cross coupled with this kind of x-like connection and you'll
notice the little jump in the wire that shows the two wires aren't connected where they
cross and we have arbitrarily called the upper one's output Q and the lower one's output
not Q.
And as we've just seen, one of those Q or not Q will be a 1 and the other one will be
a 0.
Okay.
Well, this again still isn't useful.
We can't change the state of the circuit.
So let's see what we can do now to add some gating.
Remember the idea of logic gates to change the state of the circuit.
So now I'm going to go to the big screen and I'm going to analyze a circuit in which I'm
going to replace those inverters with something a little more sophisticated, namely NAND gates.
So let's go and look at what's called a set reset flip flop, an SR flip flop.
So what I have here is instead of the first inverter, the upper inverter, I now have a
NAND gate.
Instead of the lower inverter, I have another NAND gate.
I still have that cross coupling back from the output of the upper one to the upper input
of the lower one and from the output of the lower one to the lower input of the upper
one, still very nice and symmetric.
And let me remind you how a NAND gate works.
A NAND gate has a truth table, which is the inverse of AND.
In other words, the only time its output is 0 is when both its inputs are 1.
And we're going to leave that on there and use that fact to understand how this SR flip
flop works.
By the way, notice that I've labeled these inputs not S, that stands for not set, and
not R, that stands for not reset.
Those names will become obvious as we move on and eventually we'll change them to set
and reset in a more sophisticated circuit.
So we want to build a truth table for this SR flip flop.
So here we have S and R listed for possible states, 0, 0, 0, 1, and so on, the states
for Q, and I'm leaving a column for comments about that also.
So let's begin by considering the case where both of the inputs are 0.
Now look on the NAND truth table.
If any input to a NAND gate is 0, the output has to be 1.
So we know immediately S and R are both 0, both outputs have to be 1, Q and Q bar.
This is not a by stable state storing a 1 in one output and a 0 in the other.
This isn't doing quite what we want this circuit to do.
So that's a situation we would like to avoid, and later we'll build more sophisticated circuits
that can avoid that more easily.
So we don't want that state.
What if on the other hand we put a 0 at the S bar input and a 1 at the R bar input?
Well, again, any NAND gate that has a 0 at any one of its inputs has a 1 at its output.
So as a result, there's a 1 at Q. There has to be.
And that 1 is cross-connected back to the other input of the lower NAND gate, and consequently
we have 1 and 1 on the lower NAND gate.
The output of the lower NAND gate is 0, and that is all entirely consistent.
So that is a legitimate state of that flip-flop.
So if we do that, if we set S bar to 0, that's why we're calling it set, not set, because
we'd set set to 1 to try to set it.
We're setting not set to 0, and we get Q going to 1.
That's called setting the state of the flip-flop, setting Q to 1.
And so that's called set.
S equals 1.
We don't have an S input.
We have a not S, which is then 0.
We can do the opposite very obviously.
Put S bar to 1 and R bar to 0.
There's the opposite state there, and you can convince yourself very easily that the one
with the 0 has to have a 1.
At the output, the two 1s make Q 0, and so that makes Q 0 and Q bar 1, and we have reset
the flip-flop.
We've set Q back to 0, and Q bar in the same time goes to 1.
Finally, we have the state in which we set both S and R to 1, or S bar and R bar to 1.
So there's that state.
What happens then?
Well, let's suppose that Q happens to be 0.
If Q is 0, we have a 0 to the input of the lower gate, and since a NAND gate with any
input 0 gives us a 1 at the output, Q bar in that case is 1, and so Q is in fact 0 because
we have 1 and 1 at the inputs of the upper gate, and so we have the state Q is 0 and
Q bar is 1, which is just the state we had before.
In other words, there has been no change.
OK, well, what if we have the opposite situation?
What if we have a 1 on Q and a 0 on Q bar?
So I've changed the state here, I've changed the state down here.
Well, there's still no change.
So the beauty of putting the 1 and the 1 into the S bar and the R bar inputs is we store,
we save whatever state we were in, and we don't allow it to change.
And so let me alter the truth table to read that the state in the case of a 1-1 input,
Q is still whatever it was, and Q bar is still whatever it was.
That's what that designation means.
So we have a set-reset-flip-flop.
Let's take a look at what a set-reset-flip-flop looks like, and then let's show you at least
one interesting application of this device, and then we'll go on to build it into more
sophisticated circuits.
So let's move over to our board a moment.
What I have here, again, there's a lot going on on this board, and you can ignore most
of it.
I want you to focus on this particular chip.
It's a 7400-quad 2-input NAND gate.
There it is, and it's connected in this cross-connection, the RS-flip-flop I just described, and two
push buttons are over here, and I'm using one of them to be the set button or the not-set
button, and I'm using the other one to be the reset button.
And here in this light over here is the output of the circuit, the Q, or they actually, it's
the Q itself, I haven't bothered to connect the not-Q.
So right now Q is zero, I press the push button, and Q goes to one.
I press the push button again, and nothing happens.
I press the other push button, which is the reset push button, and it goes back to zero.
So with these two push buttons, I can put that circuit in the Q equals one set-state
or in the Q equals zero reset-state.
So that is an SR-flip-flop.
You obviously can't see the gates and all that kind of stuff, but I have wired exactly
the circuit I just showed you on the big screen.
Okay, what is a circuit like that good for?
Well, before we move on to some of the more sophisticated circuits we're going to be building,
let me talk about what happens when you turn a light switch on.
You turn a light switch on, and the light comes on.
Great.
You don't think a whole lot about that, but what's really happening when you turn a light
switch on is two pieces of metal are coming together and making contact.
Now, this doesn't bother you when you turn a light on, but in fact, typically those pieces
of metal come together, and they bounce apart a little bit, come together, bounce apart,
come together, bounce apart a few times before they settle in to being fully on.
With a light bulb, that doesn't matter.
You don't notice the light bulb turning on and off in a few thousandths of a second.
In fact, if it's an old-fashioned incandescent light bulb that works by just heating up a
filament, it doesn't even do that.
It just interrupts the current a little bit and doesn't warm up quite as fast, perhaps.
But if you're dealing with digital logic circuits, particularly circuits that have to count pulses
or something, then that can wreak havoc with what's going on.
And one of the simplest uses of an SR flip-flop, also called a latch in this instant, is to
stop that bouncing of a switch from occurring.
So I'm going to do a demonstration now with the oscilloscope.
I'll put the oscilloscope on the big screen in which I'm going to show you this process
of switch bouncing.
So what I have over here now is a switch, a push button.
What happens to be a push button that, when I push it, is going to bring the oscilloscope
screen up to a voltage of five volts.
It's going to bring the voltage at a certain point here that I'm connecting to the oscilloscope
up to five volts.
So I'm going to press this thing, and we're going to see what happens.
And there it is, ugly, ugly, ugly.
Let's take a look.
We were down in the low state.
There's a bunch of noise in here, too.
Then I pushed the button, and up went the switch, the switch changed state.
And then it dropped down again, up and down, up and down.
What a mess.
And finally, over here, it probably was on continuously after that.
No problem if that were turning on a light bulb, but a terrible problem if that were
sending pulses into a digital counting circuit, which we'll be building in a few lectures,
because it would count every one of those pulses, and we only wanted there to be one.
So how do we handle that situation?
Here's an example.
Here's exactly the circuit I had.
I had a five-volt power source connected through a resistor to that push button switch that
then grounded that point between the resistor and the top of the switch.
And that's where the bouncing was occurring, and there's typical what the bounce might
look like in that case, that on and off rapid flipping.
What do I do?
I connect an SR flip-flop to that thing.
As soon as the S bar goes low, that sets the flip-flop and sets Q to one.
There's the truth table.
We just worked out for that thing.
If the state bounces back up again, that's the one-one state, notice I've got the R
bar to set to one, just holding it there, that's the state where there's no change.
And so once this thing goes down for the first time, it never goes back up again.
And the same thing is true when we go in the opposite direction, which is what our oscilloscope
happened randomly to catch in this particular instance.
So this circuit latches up.
It holds the state the first time there's a change, and it completely eliminates that
bouncing.
Now, in this simple circuit I've just shown you here, I can't ever change it back again.
So what I would typically do is modify that circuit a little bit so that as I have a switch
that actually can switch to two possible states, and if I push it all the way to the right,
that's the reset state, and that would get it ready to undergo another state change.
The point is the so-called latch or SR flip-flop latches up and holds the state the first time
there's a change, and that eliminates the bouncing of the switch.
And let me demonstrate that to you with the board also.
This particular board actually has built into it two debounced push buttons.
These two blue buttons say debounced push buttons, and what they are are push buttons
that are connected in exactly a circuit like I've showed you.
And now I'm going to change where I've got the oscilloscope connected.
I'm going to connect right now the oscilloscope is connected to the bad push button, the one
that was bouncing, and I'm now going to connect it to the good push button, the one that is
over here, that is the debounced one, and I'm going to hit the button.
Look at that clean transition, perfectly clean, because the SR flip-flop has latched up and
prevented there being another change of state until the flip-flop resets, and we're able
to do another change of state.
There it is.
So we get these beautifully clean changes of state.
That's one application of a simple SR flip-flop, an application called switch debouncing.
And I'll give you one other application of this thing before we move on.
And here's a circuit in which, very similar, in which I'm worried about, and I actually
talked about a circuit like this earlier with analog electronics, I'm going away on vacation.
I want to know if my freezer has had a power failure and gotten above a certain temperature.
And so what I've got here is a string of two resistors from five volts to ground, and the
lower resistor is a thermistor, a resistor whose resistance decreases with increasing
temperature.
So if the temperature goes up, eventually that decreasing resistance pulls the S-bar
input down into the state where it's the zero state, and that's the state that puts
that flip-flop into the situation where Q is equal to one, and when Q is equal to one,
you can see there's a warning light connected there.
That warning light turns on, and then we have latched up just like we did with the debounce
push button.
And that warning light stays on even if the temperature then goes back down.
So you come back home, you think your food is all good, but actually the freezer has
been above freezing, and the warning light is on to tell you that, and I've put a little
reset button there on the R-bar input, which is normally held there at five volts, and
if I push that, then I reset the thing, and then it goes on to work just fine.
So those are two examples of the simple SR flip-flop.
Now we're going to move on and get a little more sophisticated.
That's great for applications like freeze alarms and debouncing push buttons.
But in computer circuits, we have to get more sophisticated with our flip-flops.
These simple SR flip-flops I just showed you is called asynchronous logic.
The output changes as soon as the input changes.
And if you have large-scale circuits with lots of flip-flops, that's not good.
That's what a computer is, for example.
So we're going to start talking about something more sophisticated called synchronous or clocked
logic.
And in clocked logic, a central clock governs all the logic switching.
Now I don't think of a thing with hands, that's not what we're talking about for clock.
A clock is simply a square wave generator that generates regular pulses.
In today's computers, for example, the clock frequency is around 2 to 3 gigahertz, 2 to
3 billion clock cycles every second.
So we're going to look now at how we make flip-flops clocked, how we make them synchronous
circuits.
So here's our simple SR flip-flop.
And all I'm going to do is add some more NAND gates in front of it.
Now I'm going to call those inputs S and R. And you can kind of see why that is, because
to go from S to S bar at that top one, there's an invert, the little circle at the end of
the upper NAND gate and similarly at the bottom one.
And then there's this extra pair of inputs to these NAND gates, and that's the clock.
And let's think about what happens.
Whenever I have a circuit, there's a NAND gate.
Whenever I have a NAND gate, if both inputs are high, the output is low.
And if either input is low, the output is high.
So if the clock is low, the clock constitutes one input to those NAND gates, if the clock
is in its low state, the outputs of both NAND gates are high and that's the state in which
the SR flip-flop doesn't change.
So this flip-flop cannot change state unless the clock is high.
And that's what gives us a synchronism.
This pulse generator is coming along at some fixed rate and it's making these pulses and
the clock is going high and allowing this SR flip-flop to change state.
So when the clock is low, S bar and R bar are both one and there's no change.
And when the clock is high, the other NAND gate inputs get through.
Again, this is an example I showed you in an earlier lecture about how these things are
actually gates.
And here we have to put those two lower input of the upper NAND gate, upper input of the
lower NAND gate.
We have to put them high in order for the S and the R to get through.
And then they get through and they're inverted and they go in and they run the SR flip-flop
just as we had done before.
So that's a clocked SR flip-flop.
The clocked SR flip-flop is going to allow us to change state only when the clock comes
along.
So I set S to 1, for example, and R to 0 and that doesn't automatically change the output
of the flip-flop.
It does so only when the clock comes along.
And if you have a billion flip-flops in a circuit, as you might a billion literally,
then they will all change state together and we have synchronous logic.
Now there are still some issues with this flip-flop that I've just described.
As soon as the clock goes high, the whole time the clock is high, the flip-flop is subject
to change.
So if there's any noise in the system or something else strange going on, it's possible
that during the high phase of the clock, the flip-flop could flip back and forth several
times.
A more orderly situation would be if it would change only once per cycle.
There's a much more subtle issue here too.
In a few lectures, we're going to build a flip-flop that is going to involve feedback
from the Q bar back to the set input.
And with the simple clocked flip-flop I just described, that one would go into a wild oscillation
if I tried to make this happen.
So what we'd really like to do is build a flip-flop that can change state only once
per clock cycle.
And there are two approaches to that system.
One is called an edge-triggered flip-flop in which literally the rise or the fall and
flip-flops are built both ways.
Of the clock is what causes the state change.
That's called an edge-triggered flip-flop.
An alternative which I'm going to describe, it's a little bit easier to understand, it's
the one I have my students build, is called a master-slave flip-flop.
And we want to look at how this master-slave flip-flop works.
So here we go.
Here's our SR flip-flop, now our clocked SR flip-flop.
Look how far we've gotten.
We started with the basic bistable circuit, that's the pair of NAND gates on the right.
Actually, we started with a pair of inverters, but now we've replaced them with NAND gates
so we could set and reset.
Now we've added another pair of NAND gates for the clocking, and we have this clock input.
What do we do to make a master-slave flip-flop?
Well we build the exact thing all over again.
Now we're getting a lot of gates, one, two, three, four, five, six, seven, eight gates
already.
And we've got a clock input there, and I represent the clock again as what it is.
It's a square wave that's coming up and down, up and down, meaning it's going from zero
to five volts if we're in TTL logic, or it's swinging between whatever the two logic-level
voltages are in whatever circuit we're using.
How are we going to connect these things?
Well, let's do the following.
Let's call the first thing on the left, the first clocked flip-flop, the master, and let's
call the one on the right the slave.
Now there are the S and the R inputs to the slave flip-flop, and I'm going to connect
them to the Q and the Q bar outputs of the left hand, the master flip-flop.
Why am I doing that?
Well, here's why.
I'm now going to add one more gate, so we've got nine gates, the ninth gate is an inverter.
It's going from the clock input to the master flip-flop into the clock input of the slave
flip-flop, but there's an inversion in between.
What does that inversion mean?
It means when the clock is high, the actual clock signal that's coming in at the left
is high, the clock input to the slave flip-flop on the right there will be low.
I call that not clock, clock with a bar over it.
Again, the bar signifies an inversion, a change in the logic state from zero to one or one
to zero.
So if the clock on the left is high, not clock is low.
And I've illustrated that in this diagram by showing the square wave going just the opposite.
When the clock square wave is high, the not clock square wave is low.
Now what does all that mean?
It means when the clock is high, which was the situation in which one of these clock
flip-flops was allowed to change state, then the master flip-flop can indeed change state.
But at the same time the clock is high, the not clock, the clock input to the slave flip-flop
is low and it can't change state.
So while the master can change state, the slave cannot.
And so here's what you do with this flip-flop.
You run the clock, you put the SNR inputs to whatever you want to set the master flip-flop
and the Q goes to whatever it wants to be.
But the slave's output doesn't change at that point, the Q of the master.
The Q of the slave stays whatever it was.
Then when the clock goes low, the not clock goes high and that allows the slave to change
state.
The set input of the slave is connected to the Q of the master and the reset is connected
to the Q bar of the master.
What happens is the contents of the master flip-flop, that is the value of Q, gets loaded
into the Q of the slave.
And that can happen only once on the clock cycle.
It happens in this particular circuit when the clock falls to low and at that point the
state of the slave changes and then it can't change again until the clock cycle comes along
again and the state falls to low.
So the master slave flip-flop is a device that gives us increasing order in a complicated
electronic system.
It allows the clock to control the states of when the flip-flops can change state and
furthermore with the master slave arrangement it allows that change to occur only once per
clock cycle.
And that's really crucial to keeping order in a complicated circuit like a computer.
Because we've gained this order at the expense of now going from four flip-flop, four NAND
gates to nine total logic gates, eight NAND gates and one inverter.
Now of course these things are built in today's integrated circuits.
Not by going out and buying 7,400 NAND gates and wiring them all up, although that's how
I have my students do these when they're studying them.
But they're all just built etched onto the silicon circuits with the transistors needed
to make this.
Nevertheless this is a rather now complicated circuit and it's a little bit expensive to
make and it consumes a good bit of power and maybe it isn't the best way to make for instance
computer memory as we'll see in a subsequent lecture.
But it is a very good way to make a system that is very orderly because each flip-flop
can change only once in a clock cycle.
So now we're going to take this whole complicated circuit consisting of eight NAND gates and
one inverter and we're going to shrink it down and forget about what's going on inside
it.
I mean we'll remember that but we're going to build it as one single device and so we'll
shrink it down and we will give it a name and a symbol and the symbol is this rectangle.
That's going to be our symbol for different kinds of flip-flops.
On the left we have the S input, the set input to the master flip-flop and the reset input
to the master flip-flop and the clock input to the master flip-flop.
On the right we have the Q and Q bar of the slave and so we have this system where we
can put whatever values we want on set and reset.
When the clock comes along it will load set into the master, when the clock goes low the
mat and slave clock will go high because it's a knot clock and will load those things into
Q and Q bar.
So this is a master slave flip-flop and we'll use this symbol as we go on and build additional
flip-flops.
We'll have similar symbols and we will take the master slave and build other flip-flops
from them.
Again I want to say something I did at the beginning.
Some electrical engineers would not grace this object with the name flip-flop because
it's still a little hard to make it flip and flop all by itself.
It would be called a latch, a master slave latch, a clock latch, but it could also be
called a flip-flop and I'm going to use those terms interchangeably.
So let me wrap up and then give you a little project to work on.
We have seen the basic bistable circuit.
We started with that circuit with just two inverters.
We grew it into a more sophisticated circuit where we could control the setting and resetting
with those not set and not reset inputs.
But still chaos reigned although we could use that in cases, in fact we had to use that
in cases like the debouncing push button or the freezer alarm where there wasn't any
synchronism throughout a whole complicated circuit.
But once we get to computers and more complicated circuits we needed the clocked flip-flop.
So we built the clocked flip-flop and the clock flip-flop was much better except that
it still had this problem that the state could change many times during a clock cycle as
long as the clock was high.
And so we added the master slave flip-flop which allowed the system to change only once
in a clock cycle.
And once again when you have tens, hundreds, millions, and literally today billions of these
things in a single circuit, you really need that everybody changing only once a clock
cycle and everybody changing together.
So that's the first of many sophisticated flip-flops, three or four sophisticated flip-flops that
we're going to develop in subsequent lectures.
Now if you'd like to look a little bit more at flip-flops, do the project.
And in the project I'd like you to design an un-clocked SR flip-flop, like the early
one I designed after the two inverter by stable, but make it using NOR gates.
And be sure to label your inputs correctly and determine the truth table and ask yourself
the question, how does it differ from the NAND-based flip-flop that I presented in this lecture?
And then if you want to use one of your circuit simulators, go into the circuit simulator and
simulate either the design you came up with in part one or the NAND-based flip-flop from
this lecture and go through it, putting different inputs and verify that it works.
And then you'll really understand flip-flops.
So in lecture 18 I developed a number of flip-flops starting with the simple un-clocked SR flip-flop
using NAND gates.
So for your project I'd like you to design the same circuit, an un-clocked SR flip-flop,
but build it from NOR gates.
Be sure to label the inputs correctly, determine its truth table and ask yourself, how does
it differ from the NAND-based flip-flop presented in the lecture?
And then I'd like you to simulate with your circuit simulation software, your circuit
simulation online, either your design or the NAND-based SR flip-flop from this lecture and
verify that it works.
Okay so in giving you the solution I'm going to go directly to the circuit lab simulation
of this particular circuit that I developed.
So here it is, it has two NOR gates, they're in that cross-coupled configuration we talked
about before where Q from the upper one goes to one of the inputs of the lower one, not
Q from the lower one goes to one of the inputs of the upper one.
And what we have here is a situation in which we need to supply 1s and 0s at the input.
Now I could do that with 5 volt power supplies, that'd be a bit clunky.
And circuit lab gives me a better way of doing that, and the better way of doing that is
to use what are called logic primitives or digital primitives.
And if we scroll down in the build mode, here are the digital primitives.
There's actually a clock that can flip on and off, a square wave generator really, and
then there are just digital 0s and 1s.
And right now I have 0 at the not s input and 1 at the not reset input, so that means
set is a 1, and that means we ought to be setting this thing.
And indeed Q has been set to a 1, and you can see that because I've stuck a voltmeter
across there, and I'm seeing 5 volts.
And let me just go and show you how we would change this by, for instance, taking that
0, and let me just, rather than try to drag it, let me delete it, and let me delete the
one, and let me get a new 0.
And I will put the 0 down below this time, and I'll get a 1, and I'll bring the 1 up
above this time.
Now, not set is a 1, that means set is a 0, I'm going to simulate this circuit, and I'm
going to do a very simple DC simulation, and lo and behold, the output has gone to 0.
And you could work your way through this whole circuit, and you would convince yourself that
it has a truth table very similar to the one we saw before.
However, there is a difference, and the difference is that in this particular situation, you
don't want to avoid the 0, 0 state, as you did with the NAND-based version, but you need
to avoid the 1, 1 state.
And so let me show you the same circuit now, I'm going to handle it a little more sophisticated
way by doing it in due circuits.
So I'll switch over to due circuits, here's the same circuit in due circuits, and I'm
going to supply the two inputs with a clock, that is a square wave generator, and they're
going to be going at two different frequencies, one twice the frequency of the other, and
so they will cycle through all four possible states of this situation.
Now due circuits has a nice feature, it has logic probes, which are like LED lights that
you can put at particular points in the circuit, and those LED lights will actually light up
while the circuit is simulating.
So let me do the simulation here, I'm going to run the digital simulation, and run it
for a while, 100 nanoseconds, it's going to make it last a long time, and it will simulate,
the simulation is done.
And you can see I have the Q and Q bar, I have S and S bar, they're changing according
to those two clocked inputs I gave them, and let's just look at the situation we have.
So here's Q, it's initially zero, it goes to one when we go into the set mode, when
S bar is zero and S is one, it goes into the zero mode when S bar is one and S is zero,
and both S and R, S bar and R bar are both one, here we have it, we get the unfortunate
state where Q and Q bar are both zero, and that's why we want to avoid the one one state,
and finally when we have the zero zero state, nothing changes.
So it's basically the same truth table, but in this configuration in which we want to
avoid the one one state.
And now let me show you this circuit in operation, in due circuits, and you can see the two inputs
changing as those red lights come on and off, and you can see Q and Q bar changing appropriately,
and you can convince yourself that this circuit does indeed do exactly what an S R flip flop
should do, and it's based on Norgates.
