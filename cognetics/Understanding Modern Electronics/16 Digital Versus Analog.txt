Welcome to the first of our lectures that deals with digital electronics.
Just before this lecture I went out to reheat my cup of tea in the microwave oven and I
was discovered to my surprise that I actually had to turn a knob to set the time on the
microwave oven and I thought how rare that is these days, how old-fashioned that is because
today almost everything we deal with electronically seems to be digital.
Digital is all the thing, all the rage.
Can you remember what happened on June 12th, 2009?
Think a minute about that.
That was a famous day in the history of electronics because that was the day that analog television
went completely off the air and television from then on is digital.
What does it mean to be digital versus analog?
You've been doing analog electronics until now.
We're switching now to digital electronics.
What's the difference?
Well, let's take a look at the contrast between analog and digital.
In analog we deal with a continuous range of voltages and currents and other electrical
quantities.
In digital in contrast, there are really only two states and that's a slight understatement.
There could be many, many states, but there are a discrete number of states and they're
ultimately based on just two possible voltages or currents.
The electrical quantities we deal with in analog electronics with the amplifiers we've
been building and so on, these are analogs of physical quantities.
The voltage might correspond to the speed or it might correspond to the intensity of sound
or it might correspond to the intensity of light and we actually built meters in which
we saw a voltage that corresponded to the intensity of light, for example.
In digital electronics, the values of the quantities we want to measure or talk about
or characterize are encoded as binary numbers.
They're not done analogously, the electrical quantities are not analogous to the physical
quantities.
Instead, we encode the physical quantities as numbers, binary numbers, based on just
those two possible states.
Another aspect of analog electronics is there's an irreversible degradation when we transmit
or copy information in the analog way and you've seen this if you're old enough to
remember VHS tapes, which most people are, VHS tapes, if you ever copied one, it got
worse and worse and worse and you can see the same thing if you go to a photocopier
and try to keep copying something over and over again, errors creep in and they multiply
and they get worse.
In the digital world, we have error-free transmission and copying, which by the way is why publishers
and movie makers and so on are very, very, very worried about piracy in the digital age
because you get perfect copies.
Analog is the old way of doing things, digital is the new way of doing things and I want
in this lecture to explore and detail the difference between analog and digital.
This will be kind of a meta-electronics lecture.
We're not going to do any actual electronics, we're not going to hook up any oscilloscopes,
we're not going to make any circuits, I'm not even going to talk about any transistors.
That will come later.
I want to lay the foundation for understanding digital electronics.
So let's look at some examples of what it means to be digital versus analog.
So in analog quantities, just to give you some examples of analog quantities, they take
on a continuous range of values.
They include most physical quantities, examples, temperature, voltage, speed, weight, time,
intensity of sound and so on and so forth.
In fact, many of the quantities in the physical world are analog quantities.
We can't get away from the fact that we live in a large analog world but today's electronics
is largely digital.
So a couple of examples, a thermometer with a column of alcohol or some other liquid,
it used to be mercury, now it's something else, that rises up and the height of that
column is a measure of temperature and that's a continuously variable quantity as is the
temperature.
A speedometer on your car, a dial type speedometer is an example of a measurement of a continuously
varying quantity, the speed of the car and finally an ordinary old-fashioned analog clock
with hands is an analog measurement of a quantity that is continuously varying with time.
On the other hand, many of the quantities we want to measure either are intrinsically
digital or get converted to digital quantities.
They take only discrete values.
A couple of examples from everyday life are cash money.
So if you have a pocket full of change, there are a discrete number of cents in there.
You don't have half a cent, you don't have a tenth of a cent, you don't have pie cents,
you have 25 cents and then a penny so you got 26 cents or whatever.
You buy eggs at the grocery store, you can buy a dozen eggs, maybe you can buy half a
dozen eggs, maybe you can even convince them to sell you an egg but you can't buy half
an egg or 3.7 eggs or anything like that.
Eggs and cash money come in discrete quantities.
On the other hand, many other quantities that we convert to digital quantities are then
approximations of those analog quantities that are continuously varying and here are
just a few examples of those.
An electronic fever thermometer discretizes, if you will, the temperature.
It might read 98.6, it might read 98.7 but it won't read 98.7392 because it doesn't
have that many digits and it can't cover the continuously varying range of quantities.
A digital clock reads the time in numerical values and a digital speedometer reads the
speed as a digital number.
So those are examples where we've converted analog to digital.
We represent these analog quantities as digital quantities with limited numbers of digits
and ultimately those digits are reducible to zeros and ones and the rest of this lecture
is going to be about how we do that reduction to zeros and ones and how we process those
quantities and again I emphasize because everything is reducible to zeros and ones
and you can tell the difference easily between a zero and a one which can't easily tell the
difference between 1.4279 and 1.4278.
You can tell the difference between a zero and a one and that's why you can make perfect
copies with digital electronics.
So let's look in a little bit more detail about this distinction between analog and
digital electronics.
Here I've got kind of a tail of two spinometers.
So at the top I've got an analog spinometer as many cars still have but many don't.
And if I were to blow up the dial of that spinometer again and again and again I would
see that that needle could move to any position at all and as I show this spinometer blowing
up I show more and more fine gradations of the values of the speed.
That is an analog situation in which the speed could be any quantity it takes on a continuous
range.
On the other hand below we have a digital spinometer it's reading 63 miles per hour.
Let's just take a look at that three.
That three is the digit that this particular spinometer can read.
That three is representing the binary number 011 and we don't get any finer than that.
This particular spinometer can't tell us whether we're going 63.1 or 63.2 miles per
hour because it's got only these two digits.
We could look at the case where that digit was in fact a two.
If it were a two it would be the numerical representation two and it would be 010.
We go back to three we're at 3011.
If we go to four then we get the number four and that's represented by the binary 100.
We'll talk more about that in just a moment.
So there is a tale of two spinometers, an analog and a digital one.
Let's take another look at these binary numbers that we use to represent every quantity in
the world of digital electronics.
So there are two binary digits there's only two.
Number zero, write it with the symbol zero, the number zero.
We call it zero, we could also call it no, we could call it false.
Sometimes we'll call it low representing a low voltage level.
And then there's one which we can call one, sometimes we'll call it yes, sometimes we'll
call it true, sometimes we'll call it high.
All those things are ways of talking about the distinction between the one and the zero.
Zero and one, no and yes, false and true, low and high.
Those are binary numbers.
Now think about a digital number like for example a decimal number like 127, you know
what that means.
It means there's 100 in that number.
There's two tens, one, two and then there's seven ones.
And so the number is 127.
Well binary numbers work in the same way.
You probably studied binary numbers sometime back in your math education, but let me just
give you a quick review here.
So here's a binary number 1001.
And just like the one in 127 is the hundreds place 10 squared and the two in 127 is the
tens place 10 to the first power and the seven in 127 is the ones place 10 to the zero, anything
to the zero is one.
In binary the individual places represent different powers of two.
So here I have the binary number 1001, a four binary number.
The first one is in the eights place, two to the three.
So this tells us we've got one eight.
The second zero is in the fours place, so this tells us we don't have any fours, four
is two squared.
The third zero is in the twos place, two to the one.
This tells us we don't have any twos.
And then there's a one in the ones place, so this number is one times eight plus zero
times four plus zero times two plus one times one or the decimal number nine.
And sometimes we'll actually put a subscript nine sub ten to tell us we're representing
this number in the base ten notation and we could put a similar subscript on the 1001,
a two to represent this number as base two.
Well numbers are not the only things we need to represent.
We also need to represent text.
You write a term paper and it's represented digitally in your computer.
Well with text we have something called the ASCII code, the American Standard Code for
Information Interchange.
It assigns each character an eight bit binary representation and here's a table of just
a few of these representations for the capital letters A through G and then I've jumped down
to O down there.
You can see A is one zero one zero zero and then zero zero zero one and then B is zero
zero one zero which is the second number in the binary sequence and so on.
And so here is the binary representation of a word, an actual word.
And if we look at what this word is, let's look at the first character in the word.
That character if we look on our table corresponds to the letter D. So that's the letter D and
the reason I included the O is because the second character is the letter O and the third
character is the letter G so there's the word dog spelled out represented by this sequence
of ones and zeros that is at the basis of all binary information.
So what we need to do now is think about how to process this binary information, how to
do things with it, how to decide if two binary numbers are equal, how to add two binary numbers,
how to compare things, how to ask is this bit the same as that bit, how to ask what's
happening with these bits.
We need to process this information.
And at the heart of processing all this digital information is the science of digital logic.
It's sort of a branch of mathematics, it's sort of a branch of philosophy.
It's not exactly a branch of electronics but it's going to govern everything that goes
on in electronics, digital electronics.
And so I'm going to spend the rest of this lecture looking at the way we think logically
about these yes and no bits.
And we do it with some simple operations just like in mathematics and arithmetic you know
how to add, you know how to multiply, you know how to subtract, you know how to divide.
With these logic symbols we need to know some simple operations on them.
And the simple operations we're going to deal with at the beginning are and and or and then
we'll add another one called not.
And we represent these operations with symbols.
The first one we're going to deal with is and and means as it says and and what it means
is this, the output of an and operation, the result of an and operation is one only if
both inputs are one.
We'll call the inputs a and b.
If a and b are both one, the output which we will write a dot b, surprisingly you might
think a plus b for and but no it's a dot b and the reason for that is it makes normal
algebra work out if you treat that as sort of multiplication but it's not normal algebra.
This is called Boolean algebra.
It's the algebra of logical levels, truths and falses, ones and zeros.
And so the and operation says the result, the output of an electronic circuit that does
this operation is a one, a yes, a true, a high only if both inputs are one.
And here's our symbol for the and operation.
It's this kind of stretched out D like thing on the left are the two inputs on the right
is the output a dot b.
The other logic operation we want to deal with is or and this has two inputs also by
the way both of these could have more than two inputs and the extension of what I'm talking
about here would apply.
The output of or is one if either input is one.
So is this true or is that true?
Well that whole statement, here's a statement, the dog is blue or the cat is orange.
Well the dog isn't blue but the cat is orange.
The combined statement about the dog and the cat if you say is the dog is blue or the cat
is orange that's true if the cat is orange even if the dog isn't blue.
That's what or is doing.
By the way people often ask what if they're both true for or as we're going to define
it here that's still one or the other is true and so the output is still one.
We'll talk later about something called Exclusible or that's a little bit different.
In Boolean Algebra we write or as a plus b that's the or the plus sign.
We give it a symbol which looks like this not quite the same D as the and symbol it's
pointed on the right end and it's kind of curved on the left end but it has two inputs
a and b and the output is a plus b and the output is one if either input is one.
Finally we have one more operation which is very straightforward that's the not operation.
That says if you're a one give me a zero as a result.
If it's true give me a false as a result.
If it's zero give me a one and so on.
So not gives an output which is the opposite of the input.
We write that with a bar over the symbol so when I write a bar a with a bar over it
I would read that as not a and the logic symbol is a little triangle with a circle at the
end.
The triangle should remind you a little bit of amplifiers and it's sort of like that
in a way and the little circle is the all important thing here that little circle is
actually what makes it a not.
So the not gate has only one input and its output is not a.
We'll be using these ideas a lot from now on.
So those are the and or a not symbols.
We can represent what these things do by what are called truth tables.
So let's build up the truth table for and.
So here I'm going to list a and b.
There are actually four possible combinations of the two inputs a and b.
They could both be zero, a could be zero, b could be one, a could be one, b could be
zero or they could both be one.
So what I do is make a table with those four combinations of a and b and in the right hand
column I list a and b.
Well if a and b are both zero the output is zero because both of them have to be true
or one for the output to be true or one.
If a is zero and b is one the output is zero.
If a is one but b is zero the output is still zero.
The only time we get a one at the output of the and gate is when both inputs are one.
So here we have the truth table for and and we can write a truth table for or and the
truth table for or.
We do it the same way, we write the same four combinations but remember an or gate has a
true output if either one or both of its inputs are true and so we have a different situation.
The only time the or gate doesn't have a one at its output is when both inputs are zero
and otherwise it's got an output of one.
So in the right hand column here we have zero, one, one, one.
And finally for our not we could make a truth table it's a little bit silly but there it
is there's only two possible input states because the not gate has only one input and
so a can be zero or one and if it's zero or one the output a bar or not a is the opposite.
So these are the truth tables for our simple operations.
These operations when we implement them electronically are called logic gates and I want to explain
why they're called logic gates.
Here are our and and or and here are the truth tables we just developed for them.
And let me consider a case where on the and gate I set b equal to zero.
The second input is zero.
Now if that input is zero the output has to be zero because for an and gate the output
is zero if either of the inputs is zero both inputs have to be one for the output to be
one.
And so the a is irrelevant to the output in this case.
In other words whatever the input is whatever a is it doesn't have any effect on the output
which just remains zero.
So this is like a gate that's closed a can't get through and you can do the same thing
with the or gate if you set b equal to one and you work out the truth table and you will
see that in that case the output is one regardless of what a is so again a can't get through.
This is like a closed gate and so this is why these things are called gates.
How would I open the gate well I would open the gate now by setting b equal to one for
the and gate well b is one if a is zero the output is still zero.
On the other hand if a is one the output is one so the output is whatever a is.
And so a gets through in this case the gate has been opened and a gets through the output
is a if b is one and if b is zero the output is blocked so that's why these are called
logic gates and you can work out the same thing in the case of the or gate if b is zero
then the output a gets through whatever a is that's what the output is.
So that's why these things are called logic gates and you might think that takes care
of pretty much everything we need to do logically and or not but actually there are some gates
that are much more useful although a little bit more obscure to think about and I need
to introduce those and these gates are called NAND and NOR NAND stands for not and and its
output is zero only if both inputs are one it's exactly the opposite of the AND gate
its output is the opposite and so we write its symbol as a and b with a bar over it not
a and b and even though this sounds like a slightly odd thing to do the NAND gate proves
to be much more useful than the AND gate and I'll show you why.
So here's the truth table for an AND gate and then for a NAND gate so a b I've got the
four combinations I've got the combination that is the output of an AND gate a and b
and I've added a fourth column which simply inverts takes the opposite of the a and b to
make NOT a and b and that's the one one one zero of the NAND gate so there is the truth
table for a NAND gate. A NOR gate is analogously not OR it's an OR gate in which we then negate
the output so remember the output of an OR gate was one if any of the inputs were one
so the output of the NOR gate is zero if either input is one and so there's only one possible
state in which the NOR gate has a nonzero output and that's when both inputs are zero
the Boolean algebra symbol is a plus b with a bar over it not a or b and that is the NOR
gate we can make NOT gates from NAND and NOR by the way we can't make NOT gates no way
if you give me a million AND gates you can't make a NOT gate but you can easily make it
from NAND or NOR you just connect the two inputs together if you connect the two inputs
together in the AND gates truth table that rules out the middle two rows which have different
values for a and b you have either zero zero in which case you get one at the output or
one one in which case you get zero and so that has become a NOT gate so you can make
NOT from NAND a if the input NOT a at the output that's equal to a NOT gate and I'll
let you convince yourself that you can do exactly the same thing with a NOR gate so
once you have NAND or NOR gates you can also make the NOT operation so that makes them useful
so NAND and NOR can make NOT and so NOT is useful because if we wanted to make for example
an AND gate well we could start with a NAND gate and add a NOT to it if we invert the
output of a NAND gate a NOT AND gate we'll get back to an AND gate and we could build
that structure with a NAND and another NAND connected as a NOT gate equivalently we could
make a OR gate from NOR and NOT and the NOT could have been made from a NOR from another
NOR gate or it could have been made from a NAND gate it doesn't matter but the point
is these NANDs and NORs are useful because we can build them we can use them to build
other gate operations we can't do that with the AND and the OR that's why we use NAND
and NOR a lot of the time now you can go out and we're doing electronics and buy an AND
gate and an OR gate but you'll find it's more useful many times to work with the NAND gates
and the NOR gates because you have this flexibility of being able to do different things with them
and let me convince you a little bit more of that flexibility by saying if I have a NAND
operation I can actually build everything from the NAND operation so here's a NAND
gate again its inputs are A and B its output is NOT A and B there's its truth table I've
shown both columns the column for A and B and the column for NOT A and B its Boolean
algebra symbol is A dot B with an overscore and let's show you that we can do basically
everything from it let me ask you what this thing is this thing is a NAND gate with a
couple of inverters or NOT gates we also call NOT gates inverters in front of it on the way
in so what do we have well let me convince you what we have the first inverter the upper
inverter is a NOT gate it takes A at the input and turns it into NOT A A with a bar over
it the second inverter the lower inverter takes the other input B and it turns it into
B with a bar over it NOT B and then we're feeding NOT B and NOT A into a NAND gate so
let's see what we get well the output of a NAND if we had an AND gate we would have had
NOT A and NOT B but we have a NAND gate so there's another bar over that whole NOT A
and NOT B now what does that work out to let's work out the truth table here I have again
the four possible combinations 0 0 0 1 1 0 1 1 I have A bar and B bar because that's
what I'm actually bringing into the gate and then if you look at what the output will be
and you convince yourself the output will be 1 if the two inputs NOT A and NOT B are
0 in other words if the inputs at the far left A and B are 1's it will be 1 in either
of those other two middle situations where the outputs are 0 and 1 and 1 and 0 but if
the two inputs A and B are 0 then the NOT A and NOT B will be 1 and the output of the
NOT gate of the NAND gate will be 0 now this is beginning to sound a little bit complicated
but let's move on let's compare that truth table with another truth table we know that
truth tables output for the four combinations of A and B is 0 for 0 0 at the inputs and
1 for all the rest well that's exactly what we get with an OR gate so what this funny
combination with the NOTing at the two inputs does and then the NAND gate is produce an
OR gate so if I give you NAND gates you can make them into inverters put the inverters
on the front of the inputs to another NAND gate and you can get an OR gate so you can
get OR from NAND you can also get NOT from NAND and you can also get NOR from NAND because
you could invert this OR gate that we've just built so you can get everything from NAND
from NAND and similarly if I give you NOR gates you can get everything from NOR if you
put inputs to the NOR and invert them and you work through the same argument we just
did A goes to NOT A at that inversion at the input B goes to NOT B work out what the output
is we've got a truth table again the four combinations 0 0 0 1 1 0 1 1 at the inputs we invert them
by those two inverters so we have 1 1 1 0 0 1 0 0 we look at what a NOR gate does to
that it produces the output column 0 0 0 1 the only time a NOR gate's output is 1 is
when both its inputs are 0 that's that last row well if you do a comparison you will find
that that is exactly what the AND operation does the AND operation produces an output
of 1 only when it's two inputs are 1 so the A and B inputs at the far left of this funny
circuit with the inversion and then the NOR gate when they're both 1 the output is 1 and
that's the only time and that's what an AND gate does so here we've made AND from NOR
so the bottom line here is that these NAND gates and NOR gates are truly versatile I
could give you a bin of NAND gates and you could build every logic circuit in principle
you could build a whole computer out of just the NAND gates I could give you a bin of NOR
gates and you could build a whole computer you couldn't do that even if I gave you infinitely
many AND gates you couldn't get that negation that it would take to make the other gates
but everything can be built from NOR and NAND so these are going to be the basic building
blocks of our digital circuits now again we have not done any electronics in this lecture
we've just looked at the logic behind digital electronics what we're going to do in the
next lecture is take these operations and understand how to implement them first electrically
and then electronically and by the end of the next lecture we'll actually be designing
circuits using these things so I can't give you a project that is all about circuitry
but I can give you a project that thinks in a little more detail about these operations
and so let's move to a project and let me ask you the following questions in this project
and I urge you to go and do the project if you can and try to figure this stuff out on
your own but even if you don't want to work it all out take a look at the project to see
where we've gone with it so the first question is how many two input logic operations are
possible I introduced some operations in this lecture that had two inputs and produced an
output but how many possible two input logic operations are there and how many were introduced
in this lecture I'll give you one hint there are far more possible than I introduced a
project number two question is using any combination of AND or NAND nor a NOT design a three input
AND gate that is a gate that has three inputs ABC and whose output is one only when all
three of those are one and finally I mentioned this earlier in the lecture using only NAND
gates design a so-called exclusive OR gate a gate whose output is one if one of its two
inputs is one but they aren't both one and there are many ways to do this you can use
lots of gates you can use a few gates the challenges use the minimum number of gates
possible and you can figure out what that number might be
so here's the project for lecture 16 now in lecture 16 we didn't do any actual electronics
but we learned a lot about logic so these are questions about logic and ultimately
the design of a you could think of it as a circuit using logic gates I have three little
sub projects for you here the first two fairly straightforward and the last one perhaps a
little bit more challenging so the first one is how many two input logic operations are
possible in other words how many different gates could you invent that took two inputs
and produced an output for each of the possible pairs of inputs and how many of those got
introduced in this lecture project to using any combination of and or NAND nor and not
design a three input and gate I only introduced two input gates in the lecture you need to
design a three input gate and finally using only NAND gates design an exclusive OR gate
I haven't introduced that yet but an exclusive OR gate is one whose output is one if one
of its two inputs is one but not if they're both one and here's the extra challenge what's
the minimum number of gates you could use to develop this exclusive OR circuit so let's
move on and look at the solutions to all three of these so project solution one how many
two input logic operations are possible and how many got introduced in this lecture so
let me begin with sort of a black box picture of an arbitrary two input gate and its truth
table well it's got an A input and a B input and either of those can be one or zero and
so we have the usual four combinations zero zero zero one one zero one one for each of
those there are two possible output states zero or one and there are four different pairs
of input states and so the question becomes how many four digit combinations of zeros and
ones are there how many possible entries are there in that output column well we can just
start listing them zero zero zero zero zero zero zero zero one zero zero one zero zero
zero one one and so on down the line how many are there there are sixteen in fact they represent
the binary digits from zero to fifteen there are sixteen possible combinations so which
ones were introduced in this lecture and how many well here they are the and operation
has its output one only if both its inputs are one so it has the column the right hand
column the output column zero zero zero one you only get a one at the output if you have
ones at both inputs skimming down the list of sixteen possibilities the next one we come
to is zero one one one that's or which I introduced in this lecture you invert the
or that is turn the zero to a one and the ones to zeros and you get the next one in
the call in the list one zero zero zero that's nor which I introduced in this lecture and
finally way down near the bottom is one one one zero that is the NAND operation so here
are the operations that we introduced in this lecture the two input gates and it's only
four of the sixteen possible gates part three of this project that's two to the fourth possibilities
by the way the the last one last part of this lecture I'm going to ask you about the x or
the exclusive or operation and that's the one where the output is one if either input
is one but not both and so that will correspond to the combination zero one one zero so when
you're done with the project you'll have seen five of the sixteen possible two input gates
now some of them are trivial for example the zero zero zero zero combination says no matter
what a or b are you never get anything out but zero well that's sort of useless and the
last one that says one one one one that's sort of useless too it says no matter what
a and b are you get a one at the output so that is those two are certainly trivial and
not useful but the others could see uses in a number of occasions that's the first part
of this project let's move on using any combination of and or NAND nor and not design a three input
AND gate well I took the simplest possible way of doing that I took a couple of two input
AND gates and AND gate is a gate whose output is one only if both inputs are one so we get
that upper AND gate and we it produces a one only when both its inputs are one and then
that output is combined that's a combined output from the first gate that output is combined
with the c input the third input into a second two input AND gate and the output is a b c
a dot b dot c that is a and b and c that output will be one only if all three inputs are one
and I've illustrated that here with the truth table so there's a three input AND gate and
you'll have some occasions later on in subsequent lectures where you may need a three input AND
gate and you may not have one available and you may have to build one depending on which
circuit simulator you're using so there's project solution two project solution three
using only NAND gates design an exclusive OR gate whose output is one if one of its two
inputs is one but not both and my challenge to you was what's the minimum number of gates
you can use well here's my four gate solution it is the minimum number of gates it's probably
not the easiest to work out if you just sort of plow your way through by brute force you'll
come up with five or six gate solutions probably and they're equally good logically but economically
they're not as good and this one is beautiful and symmetrical and I'm not going to go through
it in all its detail but you can convince yourself if you work through this this logic
circuit this combination of gates that the output does have the truth table zero zero
zero zero one gives a one one zero gives a one and one one gives a zero so that's exclusive
or and that's so important and so widely used that we will shrink that down and draw a new
symbol it looks sort of like an OR gate but it's got this sort of bar at the front that
that curve bar that suggests exclusive or and the symbol is a plus the OR symbol with the
circle around it to say it's exclusive or and we often call this thing x or by the way just
a couple of little sides on x or if you look at the truth table and you think about what's
the sum of zero and zero well it's zero what's the sum of zero and one it's one what's the
sum of one and zero it's one what's the sum of one and one it's two well two in binary
is one zero so that's a zero carry the one and in fact the x or gate is at the heart
of the binary adder that adds binary numbers it's also useful for something else it's also
used for testing equality of two binary numbers if you have two two bit binary numbers a and
b so each one has two bits a bit a one and bit a two and bit b one and bit b two and
you want to see if those two quantities are equal well you run a one and b one through
an exclusive or gate and the output will be zero only if both inputs are equal if they're
both zero the output be zero if they're both one the output will be zero do the same thing
for a two and b two the second bit of each of each two bit number and the only time you'll
get zero at the outputs of those two is if they if the two bit numbers coming in are
equal you run that through a nor gate and you get a one at the output of the nor gate
only if both inputs are equal so out of the exclusive or we can also make a two bit or
as many bits as we want equality tester so quite a bit of versatile logic in this project
