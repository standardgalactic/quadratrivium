Welcome to the next lecture in exploring the magic of flip-flops.
In this lecture, we're going to get both divisive and shifty, and those are good things with
flip-flops.
Now, so far we've seen the simple SR flip-flop, although we've embellished it at the point
where we have the clocked master-slave version of it that could act synchronously in a complicated
circuit like a computer.
But what that flip-flop did for us, basically, was to store one bit of information.
It had a Q output that was either a 1 or a 0.
Now, you might say, that's trivial.
What's that good as that?
But that could stand for a yes or no decision or almost anything.
Is the weather today going to be clear or cloudy?
One, it's going to be clear.
Zero, it's going to be cloudy.
Any piece of information that can be answered with a yes, no, true, false answer can be
stored as one bit in a flip-flop.
But we've already seen that computers and other circuits use many bits.
For example, I showed you a few lectures ago how the ASCII system of information storage
represents each character in the alphabet by an 8-bit sequence.
That's 8 bits.
And computers in general store information in strings of many bits.
They're called words.
And as computers have evolved, the lengths of those words has gotten bigger and bigger,
and computers typically manipulate a whole word at a time.
So we're going to need more than just one flip-flop, storing one bit.
We're going to see how to link flip-flops together to store lots of information.
And that will be the subject of the next couple of lectures.
So let's look at the situation in terms of information storage in computers.
The basic information unit in binary is one bit, and the bit could be either a one or
a zero.
Usually the next thing up that people talk about is the byte, BYTE, byte.
And many of the quantities about your computer are measured not in bits, but in bytes.
For instance, the amount of memory you have in your computer is measured in bytes, or
probably in gigabytes, or hundreds of megabytes, and similarly for the amount of information
that's stored on your hard drive or whatever information storage you have in bytes.
A byte is eight bits.
So we've gone from the basic unit, a zero or a one, a single bit, to a byte, which is
eight bits.
Now I remember my very first computer back quite a few decades ago, and that computer
used eight-bit words.
In other words, each word was one byte.
Computers eventually graduated to 16-bit computing, in which one word was two bytes.
And among many other things they could do, with 16 bits as opposed to eight, was to process
to arithmetic, to mathematics, to a higher level of accuracy, because they had more digits.
Then came 32-bit computers, in which the word is four bytes, 32 bits.
And today's computers are mostly 64-bit units.
And 64-bit units for personal computers began to be developed in the early 2000s.
So most computers today are 64-bit, although many of you will remember if you're into
computers, that that transition didn't occur that long ago, and there were some pieces
of software that maybe took a few more years to get caught up with the 64-bit processing.
Now having said that, there are plenty of computers that still use eight or 16 bits.
They probably aren't your personal computer or a big computer that scientists are using
for computations of climate models or something, but they may be small microcomputers that
are built into many places in your car or into any smart device these days.
And they use fewer bits because they don't need those big numbers of bits.
So we store information in computers in words.
That's the word for it, whether we're dealing with it as mathematics or a string of symbols
or whatever else, it doesn't matter.
The unit of information storage is called the word.
And today's words in modern computers are about 64-bits long.
Now computers have an issue.
They need to communicate with other computers.
They need to communicate with peripheral devices like monitors, like printers.
In the old days, they had to communicate with a modem that then communicated out over the
telephone line.
Today they need to communicate with perhaps a wireless device that sends signals off into
the ether as radio signals.
They need to communicate.
So how do they communicate?
Well, there are two approaches, one of which is becoming rapidly obsolete as the word length
grows in computers, and that's called parallel.
In parallel, you send an entire word all at once, all 8-bits, 16-bits, 32-bits, 64-bits,
or whatever.
You send them down a cable, and they go all at once.
And there's a virtue to that.
The virtue is that transmission happens very fast.
You put 64-bits on one end of the cable, and speed of light later, 64-bits come out the
other end instantaneously.
But as the length of the word has grown, parallel cables have become impractical, parallel communication.
And just to remind you, if you've been into computers for a while, you probably 10 or
15 years ago had a computer that connected to its printer with an ugly, massive connector
like this thing, and a huge, thick cable that was very hard to bend.
And if you look at the end of this cable, you'll see there are many, many, many wires
in here.
This is a parallel cable I took from an old computer to printer connection.
It sent a single word all at once to the printer, so it was fast.
On the other hand, electronics has gotten a lot faster, think Moore's law, and we don't
necessarily need parallel for good speed anymore.
But you look at this cable, many of you have used this cable, a cable like this, and that's
a parallel cable.
All the bits are going down there simultaneously.
Each one has its own wire, increasingly impractical as the number of bits has grown.
The second approach is what's called serial.
In serial, you send one bit at a time.
They can all share the same wire, bit one goes down, bit two goes down, bit four goes
down, bit eight goes down, bit 16 goes down.
It's slower, although again, with modern electronics, it's not prohibitively slow.
It requires, in principle, one wire instead of multiple wires.
In practice, it requires two because you've got to establish a return or a ground common
to the two devices that are communicating.
What the big deal is, it requires that you somehow convert parallel, which is what the
computer is using internally.
The computer would be far too slow if it processed things one bit at a time.
That's the whole point of having words.
It processes 64 bits all at once.
It adds two 64-bit words representing decimal numbers, or it does something to compare two
64-bit words representing strings of letters in a plagiarism searching routine or whatever.
So you need to convert that parallel information that's handled inside the computer to serial
when you're going to send it out to another device or put it out over Wi-Fi or whatever,
and then at the other end, you need to convert serial back to parallel.
How on earth are we going to do that?
Well, before we do, let me just give you an analogy and let me show you what happens when
we do use serial cables.
Here's a serial cable.
This is a very familiar cable to anyone who has an iPhone.
It's a USB cable for the iPhone.
One end plugs into the phone, the other end plugs into any USB port.
There it is, a USB cable.
It's very thin.
We've only got four wires in it, and that's more than it really needs to just do USB communications.
It's very easy to handle compared to this massive cable we had in the old days.
USB, and you may have a printer that uses a USB cable, or maybe the printer is completely
wireless.
There's still serial data transmission involved.
And we've gone from parallel to serial, and the reduction in the cost and the bulkiness
and so on of the cable that's doing communication is huge.
That's coming at the expense of slower transmission, and also the need for this conversion from
parallel to serial and back to parallel at the other end.
And that's what I want to explore now, and that's where flip-flops are going to be able
to help us.
Before we do that, again, an analogy.
Here's a highway carrying lots of cars, a wide divided highway.
Many cars going down at once, side by side in different lanes.
That's like parallel data transmission.
On the right, you see a one-lane road carrying cars.
One at a time, they're all sharing the same lane.
It's obviously slower.
On the other hand, the infrastructure needed is a lot cheaper.
A one-lane road is easier and cheaper to build than a multi-lane highway.
So there's an analogy with parallel and serial data communications.
And what we want to now understand is how to do the conversion from one to the other,
parallel to serial at the sending end, and serial to parallel at the receiving end, and
flip-flops are going to come to the rescue for that purpose.
So before we do that, we need to develop one more kind of flip-flop.
In fact, it's not the last flip-flop.
We'll be developing at least two more kinds after this.
So here is the flip-flop I showed you in the preceding lecture.
It's the SR-clocked flip-flop.
See the master-slave variety, so it switches only once on the clock, but we're not worrying
about those details anymore.
It's just a flip-flop.
It can be set, and it can be reset.
Q can be set to one, and Q can be set back to zero.
What are we going to do with this flip-flop?
Well, we're going to make it into a D flip-flop.
D stands for data.
And in a D flip-flop, we take a set reset flip-flop, and we take the set input, and we take whatever's
coming into the set input, and we put it also to the reset input, but we put it through an
inverter.
So if you put a one at the D input, as it's now called, at the set input, you get a zero
at the reset input.
If you put D to one, when the clock comes along, Q goes to one.
If you put D to zero, when the clock comes along, you've got a one at the reset because
of that inversion, and Q goes to zero.
So this is a data flip-flop.
And one of its advantages is it eliminates that redundant state that we had, the possible
state of putting a one on both inputs, which really didn't make it work like a flip-flop.
That's not possible because whatever you put on S, the reset has the opposite.
So it's actually a simpler flip-flop, in a sense.
It has one input, not two.
It has the D input for the data.
The data is what you're going to store in this thing.
And again, even this more sophisticated device is often not graced with the name flip-flop.
It's called a latch or a register.
It's a storage register.
In fact, we'll see in another lecture that it's going to be the fundamental unit of some
kinds of computer memory, not the kind that's in your everyday computer, but a more sophisticated
and faster kind of computer memory.
So now we have a D or data flip-flop.
We've eliminated the separate SNRs, set and reset for our flip-flop, and replaced them
by just one input D, and then this line that goes down to the reset and inverts whatever
is at the D.
So we can set or reset Q with a single input at the D.
And so what we're going to do is take this flip-flop and do what we've done before.
We're going to reduce it down and give it its own name.
And so it's a slightly simpler rectangle, which represents the master-slave SR flip-flop
inside there with this extra connection from the S to the R through an inversion, giving
us only one input, the D input.
So that's the symbol for the D flip-flop.
We will be working at some length now with D flip-flops.
Let's see what we can do with them.
And the first thing we need to do is this business of serial to parallel and parallel
to serial data conversion.
So we're going to build something called a shift register.
And if this is why I said we're going to be getting shifty here, and what's a shift register?
It's a bunch of D flip-flops connected together.
And notice the connection here at the top of the flip-flops.
The Q of the leftmost flip-flop, that's the stored bit that's either a 1 or a 0, goes
to the D input of the second flip-flop.
And I've marked above there Q sub 1, I'm going to call it.
And I've got the next flip-flop has its Q output.
I'll call it Q2.
In this case, later I may begin to modify some of these numbering schemes a little, so bear
with me.
But I'm going to call that Q2 now.
In fact, I'll call it Q2 later.
It goes from Q to the D input of the third flip-flop.
The third flip-flop's output is Q3 and goes to the fourth flip-flop whose output is Q4.
So what happens?
Well, all these flip-flops are connected to the same clock.
So remember what happens on the clock pulse.
The clock pulse takes the SR flip-flop and delivers the contents of the set input, which
is now the contents of the D input on this D flip-flop, delivers it to Q.
Well the first flip-flop has its D input connected to whatever I want to send into it.
But the remaining flip-flops are connected to the previous one.
So what happens when the clock comes along is that the contents of the flip-flops shift
one place to the right.
And let me give you an example.
Suppose initially this register, and it's a shift register as it's called, it's called
a shift register because it shifts the contents.
Suppose it initially contains 1 1 0 0, which happens if you want to interpret it as a number
to be the binary number 12 because we've got 1 8 and 1 4 and no 2s and no 1s.
But I don't have to interpret it that way.
It's just a piece of information representing true, true, false, false, 1 1 0 0, high, high,
low, low, whatever it represents.
So there's the initial register contents.
And let me put a 0 to the first input.
So that means after the first shift, 0 is going to load into the leftmost D flip-flop
in the register.
So after the first clock pulse, what do I have?
Everything shifted to the right.
And I've got 0 1 1 0 in the register.
And then after the second clock pulse, I've got 0 0 1 1, which happens to be the number
3 1 1 and 1 2.
The intermediate state was the number 6.
And so here's what happens with this shift register.
On every clock, the contents shift to the right.
Now what good is this?
Well, I'm going to give you several goods to this, one of which is going to involve
our problem that we're trying to deal with here of serial parallel conversion.
But let me pause and show you another use for this thing.
Let's just rehash what that circuit did.
We set the initial register contents of 1 1 0 0.
That translated into 12 in base 10, again, 1 8, 1 4, no 2s, no 1s.
After the first clock pulse, we had 0 1 1 0.
That translated into 6 in base 10.
That is, no 8s, 1 4, 1 2, no 1s, 4 and 2 is 6.
Notice what that is.
That's 12 divided by 2.
And after the second clock pulse, both the ones have moved as far right as they can and
still be in the register.
So we have 0 0 1 1.
That's 3 in base 10, 1 2 and 1 1 is 3.
That's 6.
The previous number we had divided by 2 is the same as 12 divided by 4.
So what we've done with each successive clock pulse is shifted the contents to the right.
And if we interpret the contents as a binary number, we've divided that binary number by
2 each time.
So you could imagine taking as many flip flops as you want and you would divide by any power
of 2.
So this is a way of doing arithmetic by computer with shift register.
It's only a way of dividing by powers of 2, however.
But it is a way of doing important arithmetic that we'd want to do in a computer.
So that's sort of an aside.
And if you like that aside, let me give you a little challenge.
Here's another shift register configuration.
And if you want to pause and ask yourself, what does this do, you can do that.
And let me just point out a few things.
I've turned the flip flops around, the D flip flops around.
So the D input is on the right.
I'm bringing in a 0 from the right.
The clocks are all connected together again.
And so ask yourself, what does this circuit do?
OK, here's what it does.
Each clock pulse now shifts the contents one place to the left.
So this is a multiplier by 2 to the n.
In this case, it multiplies by, I've got 4, so it multiplies by 2 to the 4 after I go
through the entire shifting.
So what this circuit does is to multiply, because I'm shifting left and making the
numbers bigger.
It's like adding a 0 on a decimal number.
What's 10 times 15?
It's 150.
You just tack a 0 on.
This circuit is doing the same thing, except it's in binary.
So it's only multiplying by 2 rather than by 10.
So that was a little aside on what shift registers do.
We want to move back to our original challenge, which is the problem of parallel and serial
communications.
So let's move on and look at, first, serial to parallel.
That's actually a little tiny bit easier.
And then we'll put the whole thing together and get computer communications working.
So here, again, is our system in which we have a register consisting of 4D flip flops
connected as I had them originally.
And suppose I want to load this with the number 1100, the number 12, the same number I've
been talking about.
You don't have to interpret it as a number.
It's a string of four binary digits, four bits.
So I'm going to bring the 0 and the 0 and the 1 and the 1 in sequentially to the left
hand flip flop.
And I'm going to sequentially on the clock shift everything to the right.
So what happens?
After the four clock pulses, I brought that whole thing in.
The first 0 came in and shifted all the way to the rightmost register.
The second one came in and shifted.
And after four clock pulses, I end up with 1100 stored in that register.
And available at the Q outputs at the top there is now in parallel form that binary
quantity, binary number, string of bits, whatever you want to call it.
That's how you do serial to parallel conversion.
You want to do parallel to serial conversion at the other end.
It's a little bit more complicated.
You've got to have some switches.
So here I again have the flip flops.
And I show you these switches at the top.
And those switches are connected to whatever information I want to bring in.
That information is now in parallel.
So here we see our word again 1100, not our word, but our four-bit sequence 1100.
That's the input.
We could call it a word, a four-bit word, I suppose.
That's the input sequence 1100.
We're going to have the switches connected.
So those things individually go into the four registers.
And so we load them up.
First thing we do, we set the switches to their upper position.
They're loading in the four-bit word.
And then we have 1100 in the register.
Then we switch the switches to the other position, to the left, so that we switch them to the
– so the Ds are connected to the Qs again, as we had before in our shift register.
Now when I say switches, nobody's in there throwing mechanical switches.
These are CMOS transistors or some other kind of electronic devices that are acting as switches.
And now I can start the process I described before and shift that word to the right.
And out on the right most one come sequentially one of the bits after the other, and after
four shifts, the 1100 are heading down the line.
That's parallel to serial conversion, okay?
Let's talk about how we use that in computer communications.
So here's how a computer communicates.
At the top I've got a parallel to serial converter.
At the bottom I've got a serial to parallel converter.
And what I'm going to do is load an input word in those parallel inputs.
I'm going to have a serial output just as I described as the clock comes along, and
I'm going to connect by means of a serial cable.
One wire or maybe two is all we need here.
And those bits are going to go down that cable, and they are going to load themselves
with each successive clock pulse at the bottom end of the receiving apparatus into that
bottom register.
And I will have transferred the 1100 that was loaded in from the computer in parallel,
send it serially over the cable, and it will load then into the other device where it becomes
available in parallel for that device to use for processing.
By the way, that cable need not be a cable, it could just equally well be a Wi-Fi connection
or whatever.
But the point is we are sending the information one bit at a time.
So that's how computers communicate.
And if we want to talk a little bit more about that, here's what's going on inside the USB
cable that I talked about.
This happens to be a USB 2 cable, the older kind.
We introduced USB 3 and 2008, but there are plenty of USB cables, two cables out there.
There are four wires in the USB 2 cable, two for the signal, the main signal wire, and then
a return ground, and two actually supply 5 volt power.
And that's why you often get a little device like this with your USB cable because you
can plug that into a wall and power other devices.
It's also why you can charge your phone by plugging it into the USB port of your cable
because the USB ports also supply power, they can supply up to 500 milliamps, they can transfer
data at about almost 500 megabits, 500 million bits a second, but they can only transfer
in one direction.
They can only send for a while and then receive for a while.
USB 3, which as I said was introduced in 2008, has eight wires, six are for the signal,
it carries signals in opposite directions at the same time, it's got 2 for 5 volt power,
it can have a data rate maximum of about 5 billion bits per second, much faster, a factor
of 10, faster, and it simultaneously sends and received, as I said, it can supply almost
an amp of current.
So that's what USB is about.
What's the ass in USB?
Serial.
Serial cable.
What's the U?
Universal.
It's a serial cable used universally for all kinds of devices.
And B stands for bus, which is a computer-use term for something that carries signals, typically
large distances or substantial distances in electronic circuits.
So that's how a computer communicates.
Okay, well, I promise you a watch, and let's end with the watch.
And before we can get to the watch, we have to introduce still one other flip-flop, and
that's a T or toggle flip-flop.
And this really is a flip-flop.
Nobody's going to object to my using that term, because it flips and flops from one state
to the other.
It toggles, states, every time the clock comes on.
How do we make a T flip-flop?
Again, it's got a kind of feedback, and this is a sort of interesting negative feedback.
We take the Q bar output, and we put it to the D input.
Now think about that.
If Q is one, then the D input is going to have a zero on it.
And when the clock comes along, what that's going to do is load that zero into Q, so Q's
going to change to zero.
On the other hand, if Q is zero, then Q bar is one, because those two are always opposites.
And that means if Q is zero, there's a one at the D input, and when the clock comes along,
that one is going to load into Q, and the point is it's going to toggle.
It's going to change state.
Whatever state Q is in, on the next clock, Q goes to Q bar is a quick way of talking
about what the toggle or T flip-flop does.
So if we sort of looked at a picture of what went on with the toggle flip-flop, here's
Q, and here's the clock.
The clock is flipping twice as fast as Q is, because, and I'm assuming this is a flip-flop
that changes state when the clock falls.
So the first time the clock falls, that's when the D input is accepted, and Q might
have been high, and now it goes low, and it stays low until the next time the clock falls,
which is a full clock cycle.
So half of a cycle of the flip-flop of the Q is a full cycle of the clock, and so the
Q is flipping at half the rate that the clock is.
And let's see that working in an actual system.
So let me go over to my demo table and look at that situation.
I actually have that situation happening right now, and these lights, I have a T flip-flop
up here.
It's part of a 74, 76 dual T flip-flop.
We don't need to worry about that, but that's what it is, and it's flipping and flopping
in there.
And I've got its Q output and the clock connected to these first two lights.
So the first light is the clock, and the clock is flipping back and forth at a certain rate.
And if you watch the second light, that's the output of the flip-flop, you'll see it's
flipping at half the rate.
And if I speed things up a little bit, perhaps you can see it a little more clearly.
There it goes flipping, and the second light, the second red light is coming on only half
as often as the first red light.
It's a toggle flip-flop.
It is producing an output frequency, if you will, that's half what the input was.
And if I crank that up really fast and look at it on the oscilloscope, and you can see
that the clock, which is the yellow signal, and the Q output, which is the green signal,
are happening at a factor of two different in frequency.
There one full cycle of the clock is only half a cycle of the Q.
So this is acted like a frequency divider.
It's divided the frequency by a factor of two.
So that's a T flip-flop, and the T flip-flop is going to be a building block of many circuits.
In this lecture, it's going to be frequency dividers.
In subsequent lectures, it's going to be circuits that do digital counting.
But I promised you a watch.
So let's talk about a watch.
We'll leave the oscilloscope on because I'm going to demonstrate some more with it in
just a moment.
So as we move on, we're going to shrink that T flip-flop down, so we will simply make a
flip-flop that looks like it has no input except a clock now, and its Q flips every
time the clock comes on.
So there's our symbol for a T or toggle flip-flop.
And now let's think about, say, how we might make a divide by four frequency divider.
I just showed you a divide by two frequency divider with one T flip-flop.
Well, if I take the Q output of the T flip-flop, put it into the clock input of the next T
flip-flop, it acts exactly the same way as the first one did, except now it's working
on a signal that's coming in at half the frequency.
So I have a clock, and then I have Q1, and then I have Q2 at a quarter of that frequency.
So that's a divide by four frequency divider.
Before we move on, let me talk about another circuit that has been sitting here all through
this lecture with these lights blinking rapidly.
And let me just adjust the frequency.
This is a system consisting of four flip-flops, four T flip-flops.
There's 16 possible states, so it's a divide by 16 frequency divider.
And if I turn it down, you watch, this is the clock, and these are the subsequent flip-flops
Q outputs.
And you'll see each one changes less rapidly than the one before, and the less rapid changing
is by a factor of two.
And if you don't like watching those lights go slowly changing, well, I can turn it up
a little bit.
But more interestingly, I can turn it up a lot and look at that from the oscilloscope,
and let's take a moment and rewire the circuit and do that.
OK.
So here we have exactly the same circuit I was talking about with the lights, and you
can still see that the lights are blinking, though the lights at the later flip-flops,
at least you can see blinking.
The other ones are blinking way too fast, about 100 times a second, and you really can't
see that one blinking.
So the clock rate here is pretty high.
I've put the output of the last flip-flop, the fourth one, the one that ought to have
divided by 16 on the oscilloscope, and I've also put the clock on there, and let's look
at what happens.
By the way, I did not build this out of individual flip-flops.
I got a circuit that has four flip-flops in it already connected together to do this.
So here we go on the oscilloscope, and here's the clock, the yellow trace, and let's just
see what's happening.
There's one full cycle of the clock down, up, down, up, down, up, down, up, down, up,
down, up, up, four, five, six, seven, eight cycles of the clock in one half a cycle of
that final output.
There's the full cycle of the final output down half the time, up half the time, and
that would be 16 clock cycles.
So this has been a division of the frequency by a factor of 16, and so what we have in
these cascaded T flip-flops are frequency dividers, and if you have N flip-flops, you'll
divide by two to the N.
I've got four flip-flops, two to the fourth is 16, so I've divided by 16. One flip-flop
you divide by two, two flip-flops you divide by two squared or four, three you divide by
eight and so on. Well, I promised you a watch. So what does this have to do with watches
or for that matter with clocks? Well, if you have a quartz watch or a quartz clock, and
chances are you do because this is the technology that is simple, cheap, and accurate used in
today's timepieces, what's going on in there? Well, your watch or clock probably says,
quartz inside the watch or clock is a tiny little sliver of quartz crystal. And the interesting
thing about quartz is you apply a voltage to it, the quartz kind of deforms, and if you
apply an alternating voltage, it deforms at a particular frequency. And in most quartz
timepieces, that frequency is 32,768 hertz, 32,768 cycles per second. Why that number?
Well, because that number is 2 to the power 15. And so if you take that number and you
divide it by two 15 times, in other words, you run it through 15 D flip-flops, cascaded
together to make a binary divider, a 15 stage, 2 to the 15 binary divider, you will get out
a pulse every one second. And if you look closely at a timepiece, you can sometimes
see the hand moving, taking a little jump every second, and that little jump is caused
by the 1 hertz pulse that's coming out after the 15 stage frequency divider has done its
thing. That's quite an interesting use for flip-flops. Okay, well, let's wrap up. We've
seen two new flip-flops in this lecture. We've seen the D flip-flop and the T flip-flop. We'll
use the D flip-flop more in the next lecture for memory, and then we'll introduce one more
flip-flop as we move on in subsequent lectures. If you want to know more about flip-flops,
try the project, just a couple of projects for you to do. If you want to simulate a T
flip-flop using your circuit simulators, D flip-flop, if it's got a built-in one, which
it does, and verify that it works. If you're working with circuit lab, the D flip-flop doesn't
have a Q bar output, and that's going to be a little bit of a problem for you when you
try to make a T flip-flop, but you can overcome that. And once you have your T flip-flop, make
a frequency divider that divides the input by 8 and verify that it works. And you could
do that either using flip-flops from part one that you've built yourself, or you could
use circuit labs built-in T flip-flop, which it has. But if you do that, it has a separate
T input, and you've got to put that to one to enable it to flip at all. Or you could
use D circuit's JK flip-flop, which we'll get to in a subsequent lecture. They don't
have a T flip-flop, but if you put all the JK inputs of that thing to one, it functions
as a T flip-flop. So enjoy playing with flip-flops.
So lecture 19 ended with a fairly sophisticated circuit, the binary divider in your watch.
The basis of that was the T flip-flop, the toggle flip-flop. So I'd like you to build
a toggle flip-flop, even though you may have a built-in one. I'd like you to build a T
flip-flop by using your circuit simulators built-in D flip-flop, and I'd like you to
verify that it works. I'll say a little bit about circuit lab in a minute, and then I'd
like you to make a frequency divider either using that T flip-flop you built, or using
your simulators built-in T flip-flops, and I'd like it to be a divider that divides
by 8. And there are several ways to do that, using circuit labs built-in T flip-flop. You've
got to put a 1 at the T input to make it flip-flop, or you can use do-circus JK flip-flop, a kind
of we'll get to a little later in a subsequent lecture, and if you do that, you'll have to
put all the JK inputs of all your flip-flops to 1, and I'll explain why somewhat later.
Okay, so let's begin with part 1 and look at the solution. So let's look first at circuit
lab. Now circuit lab has a problem here because circuit labs D flip-flop, which is what you
use to make the T flip-flop, doesn't have a Q bar output, doesn't have an inverted
Q output, and remember the way we make a T flip-flop is to take the Q bar output and
put it back into D, so the next time we get the clock coming in, Q flips to what it wasn't
before, it flips to what not Q was before. Well, there's no not Q connection on the D
flip-flop in circuit lab, so what do we do? We put an inverter after the Q output that
gives us not Q or Q bar, and that's what we put back into the D. And here's the example,
and I'm running this with a clock coming in to the clock input of the D flip-flop. And
so let's see what happens when we simulate this. I'm going to run this as an AC simulation.
I've set some times appropriately, start time of 0, stop time of 10 milliseconds, and I'm
going to step it at 0.1 milliseconds, and let's run it. And here we are, and our confirmation
that this thing works is that the clock, the at clock, it says up here in the corner,
the clock is running at twice the rate as Q is running, and that's what the T flip-flop
should do. It should be flipping half as fast as the clock comes in. So there is the T flip-flop
in circuit lab. Let's now take the T flip-flop and look at it in do-circuits.
So here's the same thing in do-circuits, except what I've done is to use do-circuits,
little logic probes. So I also have a clock coming in. Do-circuits' clock, by the way,
is rather interesting. You can set a sequence of binary digits. 1, 0, 1, 0, 1, 0 would be
a simple on-off, but you could go 0, 0, 1, 0, 0, 0, 1, 0 to make a sequence of digits
from the clock that only came up one very, very, not very often. But here I've got a
rather simple clock coming in, and I'm going to do exactly the same thing. I'm going to
simulate this. I'm using here this flip-flop, the D flip-flop. It has a Q bar output, so
I don't need the inversion, and I'm going to look at the clock, and I'm going to look
at Q when I run it. So I'll run the simulation, and this tells me I have open ports. Do-circuits
will tell you that if you don't connect some inputs, and sometimes that's okay. In TTL
circuitry, you can often get away with that, and I will leave some connections unconnected
sometimes, and that's okay, and I'm just going to click yes to this warning. It's going to
do the simulation. Here it goes. And it's completed, and there is the same kind of pattern of the
clock running twice as fast as the Q, and let's look at what's happening in real time,
and you can see the clock coming on and off, and you can see that for every clock cycle
Q goes through only half a cycle, so that's a verification of this flip-flop. Okay, so
now let's go and make a frequency divider that's going to divide by a factor of 8 in
frequency. That 8 is 2 cubed, so that means we're going to need a 3 flip-flop frequency
divider, so let's go and get that frequency divider. Okay, so here we are with the frequency
divider as implemented in CircuitLab. CircuitLab has a T flip-flop. You have to connect the
T input to a 1 in order to enable the flip-flop to flip, so I've got all three T inputs connected
to 1. I've got the clock connected to the input of the first flip-flop. I happen to be running
it at 8 hertz, because then I should get 1 hertz at the output of flip-flop number 3.
Let's see what happens if we run an AC simulation with the appropriate times. So there we have
it. The clock is running 8 times as fast as the output, the Q output, and so we've successfully
made a frequency divider that divides by a factor of 8. Let's look at the same implementation
now in due circuits. So here is the same thing in due circuits. Due circuits doesn't have
a T flip-flop, but as I argued and as I will show you in a subsequent lecture, you can
use a J-K flip-flop with both J and K set equal to 1, so I've set all the J and K inputs
to 1. You'll notice I've left the set and reset connections here dangling. That's what
I'm going to get a warning about, but it's okay in this case, and I've connected again
due circuits nice little logic probes. Think of them as little LED lights here. So let's
run this simulation. And I say yes to that warning. I'm running it for a good long time
to keep those lights lighting so it's taking a while, and there we have the same thing
we saw before, a division by a factor of 8, and if you want to see that in detail, let's
watch the lights. So the clock is flipping on and off about once a second. It's actually
once a nanosecond, but that's okay, and then Q comes on if you count them. Only there's
a cycle of Q coming on and off only one eighth as often as the clock comes on and off. So
we have successfully built frequency dividers that divide the input frequency by 8. If you
wanted to add, let's see, 15 minus 3 is 12, add 12 more flip flops, and you got the 15
stage frequency divider in your digital watch, for example. So we can use T flip flops, and
we can use them to build frequency dividers.
