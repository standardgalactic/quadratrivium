And as it got better, even more people wanted to try it.
That viral success meant it was being played many, many times and learning a lot.
In the end, 20Q had built a database of 15,000 objects.
According to the 20Q website, the game guesses correctly within 20 questions 76% of the time.
And 98% of the time, if you let it ask 25 questions.
It can eventually guess correctly, even if one or more of your answers does not agree with answers from most other people.
Even with a vast database, it continues to learn.
It's also interesting that the game could be converted into a handheld device that is not connected to the internet.
There would be a difference. Rather than that database of 15,000 objects, it would be brought down to 2,000.
The good news is that people think of those 2,000 objects 98% of the time.
This is a very important step in data analysis, so let's pause and look again.
Yes, the handheld game isn't as robust, but it still does an amazing job and essentially a good enough job.
I often tell my students, don't always try to find what would be perfect.
Try to figure out what is good enough.
That's not always easy to do, but as you learn to think that way, you'll be much better at data analysis.
So let's dig deeper into the computing and data analysis behind the 20Q game.
It uses an artificial neural network, which is a computational model inspired by the brain.
Just like 20Q, these so-called neural networks are capable of learning and pattern recognition.
They've been used not only for language, but also for computer vision and speech recognition.
Amazingly, the work originated in 1943, even before the digital computer.
Warren McCullough, a neuropsychologist at the University of Illinois, and Walter Pitts, a logician,
postulated a simple model to explain how biological neurons work.
They were working to understand the human brain.
In the end, it provided a foundation for computerized learning.
When the digital computer became available in the 1950s, the ideas of McCullough and Pitts were implemented as what were called perceptrons.
They could balance a broom standing upright on a moving cart by moving the cart back and forth.
Can you envision this?
Sometimes I use a broom.
Here, let me show you using a yardstick.
Again, how did the computer learn to do this?
Same way I did.
Practice.
Lots and lots of practice.
I learned, like I did, by seeing what did and didn't work as I learned.
Today, robots, which are a form of a computer, can easily balance a broom, which more precisely can be called an inverted pendulum.
But we have more advanced computing today.
