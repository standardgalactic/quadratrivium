piece of paper. It's best if you slightly spin the toothpick so that each time is a little different.
Then, keep track of how many times you drop and how many times some part of that toothpick
intersects any of those lines. Say I drop the toothpick 10 times and it crosses a line 6 times.
Granted, this can feel a bit silly and could make one wonder what Buffon was up to. What are you
doing? Is this a simulation? The key is to take 2 times the total number of drops divided by the
total number of crossings. So for us, that would be 2 times 10 divided by 6. What does that do?
Buffon showed that you are estimating pi, yes, 3.141592. Surprising? It is unless you know why.
That's the part Buffon helped uncover. Before we do this, however, you may give this a try
and see what you get. I'll spin a toothpick 15 times. I get 9 crossings. So my estimate for pi
is 2 times 15 divided by 9, which equals 3.3333. Not that great, but let me try again from the
beginning. I drop the toothpick another 15 times. This time I get 12 crossings. Now my estimate is
2 times 15 divided by 12 or 2.5. This doesn't appear to be working. Here lie a few lessons
about Monte Carlo simulation. It must be run many, many times. How many? Consider Buffon's needle.
Let's start again and drop the toothpick 100 times. We get 63 crossings for an estimate of pi
at 3.17. If we try another set of 100, we get 72 crossings and 2.77 as our estimate.
Let's combine these two trials, though. We now get 63 plus 72 or 135 out of 200 crossings.
Now we have an estimate of 2.96. I'll really ramp things up and drop the toothpick 1000 times.
Now my estimate is 3.257. If I drop a different set of 1000 times, I get an estimate of 3.140.
Dropping 10,000 times gives me 3.16 and 100,000 times gives me 3.149. Notice how I'm getting
closer and closer. Notice also how I need a lot of numbers, a lot of data to find what I'm looking
for. From the law of large numbers in mathematics, I know that as I run more and more tests,
I'll tend toward the expected value, which again Buffon showed to be the value of pi.
The issue, which isn't a huge one for computers, is that we need to run
hundreds of thousands of experiments. Then we begin to see the value that we want and expect to see.
In this case, we know the value of pi, but if we didn't, we'd want to be sure we're getting the
expected value, which again may not be known in advance. Note how we sense that we weren't
