Data compression is powerful. It allows us to store, access, and use far more images.
Think of the Mars rover, for example, sending back many more images thanks to compressed images.
But the mathematics inside data compression is even more powerful and can be used in other ways, too.
In particular, we will see that the same methods for throwing out data can be adapted to improve an online recommendation system.
It's almost incredible. A technique for using less data helps create a recommendation that's even better.
Recommendations are now big business, at least for organizations that do them well.
But how do they do it? How might we do it?
The latter, how would we do it, was a question Netflix asked when they put together a million-dollar competition just to improve their recommendation system.
It's a great example. To enter the Millionaires Club, you needed to do much more than recommend a film to me on the couch.
In a sense, you had thousands and thousands of people sitting on the couch telling you the films they like and how much they liked them.
It came via the Netflix ratings data. To win the cash, your computer algorithm had to do a better job of predicting the Netflix existing recommendation system at the time called Cinematch SM.
Your goal, take Netflix's dataset of users' ratings, which are integers from 1 to 5 for all movies.
From that, predict how a user would rate other films.
Note, this is harder than just recommending. You are actually trying to predict how much I'd like a film.
In the competition, Netflix supplied data on which you could test your ideas.
When you thought you had something, you test your recommendation method by predicting ratings of movies and users in another dataset.
Your recommendation system had to predict future ratings.
So that second dataset had actual ratings of movies and you test your predicted ratings against the real ratings of movies.
If your predictions were at least 10% better than the recommendation system Netflix used, Netflix would write a check for a million dollars.
In data analysis, you need to know the nature of the data.
Netflix gave you users and movies. One way to store this is in a table.
A column is one user's ratings for all the movies, with a zero being a movie that wasn't rated.
So a row contains all the ratings for one movie.
We connect a user and movie with a line if the user rated the movie.
We associate a number with the line where the number equals the rating of that user for the movie.
This type of diagram is called a bipartite graph.
The lines are called edges.
For this application, the numbers or weights represent the number of stars a Netflix user gives it.
For another application, the weights could be a one for a thumbs up or a negative one for thumbs down.
So you have all this training data in the form of preferences.
