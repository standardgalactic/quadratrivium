So let's compress a grayscale image.
A grayscale image can be represented as a matrix.
If an image is 600 by 400 pixels, then it can be stored in a matrix with 600 rows and 400 columns.
Each element of the matrix holds the grayscale value of the corresponding pixel in the matrix.
We'll consider a matrix A that has 648 rows and 509 columns.
The elements of the matrix correspond to the grayscale pixels of the Renaissance engraving.
Melancholia won by the German artist and amateur mathematician, Albrecht Duerre.
So we end up with a matrix with grayscale values, in this particular case, ranging from 1 to 128.
In general, those values will range between 1 and 255.
So we get our singular value decomposition.
Now we are ready to compress.
We can do this by taking only a few numbers from each of our three new matrices.
Let's create a very, very compressed version of this picture.
It will give us a sense of how this is done.
We simply take the first column of U, the largest singular value of sigma, and the first row of V.
We multiply them together using linear algebra and we get a matrix that's the same size as our original matrix.
The compression is easily seen in the storage.
The original matrix stores 648 times 509, which equals 329, 832 numbers.
Our compressed image requires storing one column of U, which is 648.
One singular value and 509 numbers from the first row of V.
So that's 648 plus 1 plus 509, which equals 1,158 numbers.
So this compressed image takes only 0.35% of the storage of the original image.
The reason I'm laughing is look at what we get when we use this compressed image.
Not that compressive.
That's because we compress too much.
Let's try the first 10 columns of U, the 10 largest singular values of sigma, and the first 10 rows of V.
Now the image looks like this.
This takes about 3.5% to store compared to the original image.
Remember, the image has over 600 rows and 500 columns.
So let's try 50 columns of U in the 50 largest singular values and 50 rows of V.
