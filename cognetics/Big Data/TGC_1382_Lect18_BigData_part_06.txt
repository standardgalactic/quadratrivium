If you don't, then you are requiring searches to have the exact words that appear in the
document.
Then there are the issue of word order.
For example, do you treat queries of boat show and show boat as the same or is different?
All these choices impact which documents are deemed most relevant.
What does your favorite search engine do?
Input show boat and boat show and see if you get the same results.
Now, let's return to the document matrix.
How do we use it?
Let's look at a small example.
You'll see that I created this example with a friend who was fond of fencing.
So our dictionary has three words, electric, fencing, and foil.
Our documents are really short.
They are only phrases.
Document one says the art of war.
Document two is the fencing master.
Document three is fencing techniques of foil, epi, and saber.
And document four is hot tips on building electric fencing.
Now let's form the document matrix.
Note, we already have the documents numbered, so that will be the same ordering for the
columns.
Column one is document one, which is the art of war.
So we need to assign each row to a word in the dictionary.
We will let rows one, two, and three correspond to the words electric, fencing, and foil.
Now we're ready to look at a query.
Use you input the word fencing.
We create the query vector.
This will have the same ordering as the rows.
Fencing is second, so our query is the word corresponding to the second row of the matrix.
So we are interested in the vector zero, one, zero.
Now we look at the columns of our matrix.
Each column of the matrix is this vector most like.
Now it's exactly the same as column two, so we would say that that document is most
similar.
Remember, that was the document, the fencing master.
Some of the other documents are similar, but they also contain other words.
Since this document is related only to this term in the dictionary, it is deemed most
relevant.
What do we do when they aren't the same?
You find the distance between them.
We'll explore two methods of computing distance in the lecture on clustering.
So what can we do with an ability to find similarity between texts?
