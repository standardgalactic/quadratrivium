We've come to the point where we can use programming to address programming on commercial television.
We looked last time at a technique for evaluating efficiency called data envelopment analysis
or DEA. One thing that DEA has going for it compared to many other analytics techniques
is the ability to assess quality based on multiple inputs and multiple outputs. That
makes it rather a surprising application of linear programming because linear programs
always have a single objective function, a single goal. They have to. Because in general
you can't insist that one solution be the best possible one according to two different
criteria. I brought this up in an earlier lecture when I talked about politicians promising
the best possible healthcare at the lowest possible cost. Here there are two goals, maximize
quality of care and minimize cost of delivering it and it doesn't take a genius to see that
they're simply not both going to be accomplished by the same strategy. Since linear programs
have only one objective, our approach when faced with more than one has often been, well,
take the one that you really care about and we'll focus on that. But we can do better.
And a good thing too, because frequently knowing the other objectives or ignoring other objectives
just isn't a satisfactory solution. Let me give you a lovely real world example. NBC,
the national broadcasting company, formerly owned by General Electric, more recently
bought by Comcast. Each year NBC sees about four billion dollars in revenues. From a revenue
generating point of view, the company is in the business of delivering viewers advertisers.
You could say NBC has only one goal, maximizing the revenue from the sale of its finite inventory
of commercial slots. Those commercials are the most important programming in both sense
of a commercial broadcaster's bottom line. But that's a bit simplified, of course. This
isn't a one shot deal. NBC wants to repeat business. So they have the goal of giving
an advertiser as much as it can of what the advertiser would prefer. And the advertisers
have lots of preferences. Season. If your product makes a good gift, jewelry, toys, appliances
and so on, then November and December, the holidays are much more attractive to you than
January and February. Days of the week. Ads for new movies, for example. Since the films
open on Friday, ads are best on Thursday night. Program placement. If you're selling cars,
you probably want to advertise on the shows that appeal to the 29 to 45 year old age demographic.
And of course, you don't want the ads of your competitors appearing next to your own.
And what the network offers to you has to work for you as a package. For NBC planning,
there's more. Not all contracts close at the same time. Last minute changes. New clients
or clients dropping out are part of the business. Yes, it wanted to make as much money as possible
and to satisfy the current advertisers as much as possible. But it also wanted to minimize
the number of prime time, prime commercial slots that it had to use on any given advertiser.
And it was trying to do this with each of its clients and trying to do so in a timely
fashion. And is if that wasn't enough, NBC also wanted to encourage and reward big time
spenders with deals and loyal customers and clients who would take some slots in the most
popular programs. And so it went. In May, NBC would tell potential advertisers what slots it
would have available in the fall. Advertisers would be spawned on an NBC form saying what they
wanted in terms of number of ads, days, season, shows, budget, and so on. Then an NBC planner
working by hand and trying to keep all these goals in mind would work up a proposed schedule.
The process usually took about three to four hours. Unfortunately, the proposed schedule was
often unacceptable to the advertiser. So that required a reworking of the schedule,
often multiple times, and they said to be done with every advertiser. During the crunch period,
during which most of these ads for the year were booked, planners usually worked 12 to 16-hour days.
Too many goals. Too many of them in direct conflict with the others. The result was a not
very efficient booking system and a massive headache for everyone. So how do you handle a
situation like this with multiple goals? Well, the first thing that you can do,
and here's a solution that we touched on before, is to combine them into a single goal by taking
a weighted average of them. For example, suppose the firm had two goals, maximize market share
and maximize profit. Management could create a single objective function to capture their desires
if they were capable of stating their indifference point in trade off between the two. For example,
suppose they decided that they'd be indifferent between gaining 1% market share
and gaining $100,000 in annual profit. Then if share is the percent of the market share,
we could create an objective like maximize profit plus 100,000 share. Left unchanged,
if the market share moves 1% in one direction and the profit moves $100,000 in the other,
it stays the same. And as long as management satisfied that the 1% for $100,000 trade off
is good over a wide range of changes, this objective captures their feelings about the
relative importance of the two goals. And we can use the combination to evaluate both.
And of course, there's nothing to limit us to two variables using this approach.
But before this approach could even be considered for the NBC problem, it needs some refinement.
After all, we can talk about maximizing advertiser satisfaction. But doing that really means hitting
the target specified by the advertisers on their request forms. They may want 10% of their
commercials in the 10 to 11 PM slot, not 5% and not 20%. If you can't nail the request exactly,
you want to at least get close. The further you are from what they asked for, the less happy
they're likely to be. And face it, you're not going to be able to exactly satisfy everyone's
requests. For starters, there's a lot of variations and a lot of variables in these problems are
integers, like how many ads the company runs. If they run 23 ads and want 10% running between 10
and 11, well, you can't run 2.3 ads now, can you? So you're not going to quite satisfy what the
request was no matter what you do. NBC found that if you got within 3% or so, customers were satisfied.
While this isn't a new idea for you or me, what we just said is something quite new for us in
terms of our programming work. We've been assuming so far in this series that it can
constrain as a rule that you have to obey. Period. In today's lecture, I'm going to refer to these
have to obey constraints as hard constraints. For example, NBC, the number of commercial
slots that they have available is a hard constraint. So was the money the advertiser was willing to
spend, although they usually give you a range. The advertiser might say, we got somewhere between
four and a half, five million to spend this year. But if they do, you can't go back to the advertiser
and say, oh, and it came in at five and a half million. If they said five million was the limit,
it is. On the other hand, we've just come across the idea of a soft constraint. Here's what I want,
but if I don't get it, at least get close. And the further you are from the target, the bigger
a problem it is. How big a problem the deviation is, is usually measured with a penalty. And this
idea is extremely useful in handling either multiple goals or soft constraints. Let me show
you how it's going to work for NBC. Suppose we have a constraint that says we have to give the
advertiser 30 commercial slots during this week. Well, we have an integer variable specifying how
many slots this advertiser is given on each show during this week. And we add all those variables
up and we want the total to be 30. To make this easy, I want to call the total number of commercials
that we give this client in week one, tote one for total in week one. Then we want the constraint
to say tote one equals 30. As written, that's a hard constraint. You have to give them 30 ads.
But suppose you give them too few, then you were under the target. How much under would you be?
Well, take how many they wanted, 30, and subtract off how many you gave them,
tote one. And that would be the amount that you were under the desired number of commercials,
30 minus tote one would be under one. Or tote one plus under one equals 30, same math.
On the other hand, we might give them too many commercials this week,
perhaps to make up for the fact that we squeeze them out some other week.
Then we'd be over the desired number. And to find out how much we were over, of course,
would take the number we gave them, tote one, and subtract off how many they wanted, 30. So then
tote one minus 30 would be over one. Or tote one minus over one equals 30. Again, just algebra.
Of course, we don't know before we find a solution whether we're going to be over, under,
or just right. But here's the cool thing. We can combine these two formulas in a rather clever
way that covers all the bases. Like this, tote one plus under one minus over one equals 30.
This is the general way that you handle soft constraints, and it's worth looking at carefully.
At first blush, it looks like it won't work. After all, the math allows, for example, that
tote one equals 30, and that under and over are both five. 30 plus five minus five, certainly
as 30 is required. The math works fine. But it doesn't make sense to say that we're both under
and over five, when in fact, we were just right. But remember that being over or under is going
to be a bad thing. We're going to penalize it. So the program is not going to make either of
these numbers under one or over one any bigger than it has to. And it can always make one of them
zero. And the other one will be the correct value of how much under or over we really are.
Even better, this is a linear relationship. So it works wonderfully in a linear program.
I could do the same thing in the spreadsheet with a command like if,
but we'll be seeing in the next lecture, doing something like that makes the problem nonlinear
and much, much harder to solve. So when we want to soft constraint the linear or integer programming
problem, we're going to see these under and over terms in them. It always goes value plus
under minus over equals target. Sometimes there's a penalty associated with deviations in either
direction values that are too high or too low. And that's the case with the advertisers.
Sometimes only one direction is penalized. For example, I may be unhappy if my car's trunk
capacity is less than two suitcases, but I certainly won't mind if it can hold more.
And this is the approach that NBC took on their scheduling problem. Each commercial slot had a
rating of how popular that slot would be to prospective advertisers. NBC's goal was to
satisfy the current advertisers' needs using the least highly rated mix that it could do the job.
To this ratings total, they added penalties for missing targets on shows in a given week,
shows in a given quarter, budget in a given quarter, demographic targets, and so on.
More serious violations had larger penalties.
You know, one thing I really like about this course is that the further we go,
the more I can share with you. Because if you've been thinking about the stuff we just talked about
so far, you can probably make some pretty shrewd guesses about solving the NBC problem.
They're running this optimization problem program for one advertiser at a time,
coming up with a proposed schedule for them and then getting it approved and moving on.
But think about how many integer variables will be in this program,
roughly one for each commercial length and each show aired during the year. Even if the
advertisers are only interested in a band of programming that's five hours wide each day,
that's still over 7,000 integer variables. You expect that a problem like this is going to
take a long time to solve then, especially if it's being solved on small computers.
And you'd be right. But the stuff we talked about when we discussed integer variables
also can give you some ideas about how you might get around this. Start with the LP relaxation of
the program. That is ignore the fact that some variables have to be integer. You can solve that
quickly because the great thing about LPs is that they solve quickly. And that's how NBC Operations
research team began with this problem. Of course, unless you're very lucky, your LP solution isn't
going to be your final answer. It's going to have non-inager variables like run 3.9 commercials
during this show. The team proceeded by rounding all of these values down. So 3.9 becomes 3.
If we round up, we increase the number of slots and we may not have enough room.
But before we do so, they sorted all the variables on the basis of how big their fractional part was
in order of decreasing fractional parts. So 3.9 with a fractional part of 0.9 would be higher in
the list than 12.1 with a fractional part of 0.1. Then they improved the solution by working down
the list in order and rounding up the next value to the next value for each variable,
unless doing so broke a program constraint. If it did, they skipped it and moved on.
Finally, they tweaked this schedule by adding a single commercial to it or deleting a single
commercial from it to see if the result was improved. If it was, they took this as the
new schedule and then they tweaked this new solution in the same way. If not, they tried
tweaking a different single variable. After a specified number of tries, they stopped.
This search procedure is a simple example of what's called a taboo search. You look at points in
a particular area of the solution space, make small changes to them, and keep a list of the
solutions you've recently tried. Those solutions are taboo, and so the procedure does not return
to them. For example, if you walked one block north and then one block east and ended up in a bad
neighborhood, then you wouldn't want to make another trip in which you walk one block east and then
one block north. You've been there and it wasn't good. In a taboo search, you never
make that second set of tweaks. Now, you wouldn't expect this procedure to find the optimal solution
unless you did a very long taboo search, but that's okay. NBC was happy with a near optimal
solution. Their program generally ran in about two minutes, and some test runs suggested that the
solutions were within a couple of percent of the optimal solution. It took about 10 minutes to
put the data into the computer and then a little bit of time to look at the computer output and
make any changes that a human scheduler felt were appropriate. Call the whole procedure 20 minutes
per advertiser and compare this to the three to five hours that the scheduling agents would spend
per advertiser in creating the schedules by hand. And many of those handmade schedules had to be
reworked because they didn't meet the advertiser's requirements or management's objectives. The
computer-generated ones usually satisfied both groups on the first pass and in 10% of the time
required by a single try by hand. The OR team went further. They created a system to estimate the
demand for each show for the upcoming season. Based on buying patterns from previous years,
this allowed NBC to better set its original price list in May. And on a roll, the team implemented
a system so that one advertiser with different commercials would have two airings of the same
commercials separated by as much airtime as possible. All of these projects together are
estimated to have increased NBC's revenues by at least $50 million a year. Happier customers,
a less stressful work environment, and lots and lots of lovely money. A nice example of
multi-objective programming. Unfortunately, its scope is a bit too grand for me to show you the
details in a half an hour lecture. But since I like this course to have a roll up your sleeves
component, let me take the ideas of soft constraints that we discussed in the NBC example
and use them to show you in detail in a different way to handle multiple objectives in a linear
programming framework. It's used when you can prioritize the goals. We can accomplish the most
important goal as well as we can. Then without sacrificing performance on that goal, we accomplish
the second most important goal as well as we can and so on. The goals that we're talking about here
could either be of the varieties we've, either the varieties we discussed so far. We can maximize
or minimize some quantity of direct interest, as has been the case for most of our linear
programming examples. Alternatively, we can minimize the penalty from violating one or more
soft constraints. Penalties like the NBC example. We'll do both in a classic application of linear
programming, facilities location. Check out the map. Welcome to Gridville, an appropriate name
given its street plan. 25 equally spaced east-west streets from 1st Avenue on the south border of
the town up to 25th Avenue with its northern border. There are also 25 north-south streets all
equally spaced. That's 1st street over on the west-hand side all the way over to 25th street
on the eastern edge of town. As you can see, whatever creativity the city fathers lacked in
coming up with the town names and the street layout, they also locked in naming the streets.
It's a good thing that it's easy to find your way around. The corner of 15th street and 20th
Avenue is just at x equals 15, y equals 20, where the red dot is. I'm guessing this place
makes a great retirement community for aged mathematicians. Actually, that's more or less
what our problem is about. See those six blue dots labeled A through F? Those are six retirement
homes in Gridville. The area of the dots proportional to the number of patients in that home. The
elderly in these facilities sometimes require specialized care. For this reason, they're going
to build a medical center in the city. The red dot is the proposed site for the center.
But it's not really a very good site, as the supervisors of Home A pointed out. Along the
city's roads, it's a 21 block trip from A to the proposed site. And as you can see, Home A is also
the largest home. So after some discussion, the supervisors of the homes and the city planners
agreed on some goals and the order in which they should be prioritized.
Number one, no home should be more than 12 blocks from the medical center. If you can't
meet this condition, then the center should be located so that the total number of blocks
exceeding this limit for all the homes combined should be as small as possible. We'll call this
the overage. For example, two homes that are each at 13 blocks from the center generate an overage at
two, one for each home. That's better than one home, which is 15 blocks from the center,
because it by itself gets an overage of three. Second, the average distance of a patient from
the center should be as small as possible. We could have additional factors too, noticeably the
price of the property and the restrictions on what properties are available for sale,
but doing so wouldn't change the character of our problem. So let's keep it simple for purposes
of demonstration. Let's see if we can build a spreadsheet that will solve this problem for us.
We'll take it piece by piece. By the way, taking it piece by piece is more than just good teaching.
It's good analytics. Always be on the lookout for natural fault lines in your problem. You want
pieces that can be handled relatively independently from the rest of what's going on. So let's start
with the decision variable cells, where the center is eventually going to be built, and I'll
temporarily put it in the current proposal of 15th Street and 20th Avenue. Our first objective said
that ideally no drive from home to center should be longer than 12 city blocks, so we need to figure
out how to get from the center to each of the homes. How far east or west do we have to go?
How far north or south? If you take a second and think about it, you'll realize that this is really
just a soft constraint. Our soft constraint looks like value plus under minus over equals target,
and we can apply this to east-west location in our current problem. Value becomes our east-west
position of our home, target is the east-west position of the center, and under and over
are how far we must go east or west respectively to get from the home to the center. Like this.
For example, the first row computes where you end up if you start on 10th Street
and go five blocks east and zero blocks west, namely 15th. Perfect. The row gives the correct
directions to getting to the center, since it is indeed on 15th Street, as you can see from the bottom.
Now the numbers currently in the red cells for row C aren't doing such a great job just yet.
Five blocks east of 6th Street puts you on 11th Street, and we want our trip to end us at the
center on 15th. But this isn't a problem. Remember that the numbers that I put in the decision
variable cells are just placeholders. Eventually, solver will find their appropriate values.
I'll put constraints in solver that say that each one of the six east-west ending points
have to equal the street number of the center, the red cell on the bottom.
And of course, I have to do the same kind of thing with north-south trips. The Holmes Avenue
plus blocks north minus blocks south gives the ending avenue, and this has to be the avenue of
the center. As you can see, when I filled in the red cells on the right side of this chart,
I got the right numbers for home A on 4th Avenue. You have to go 16 blocks north to get to the center
on 20th, but I didn't even bother with sensible numbers for the other homes. Again, excel will
find the correct values when it solves the program. I just add constraints that say that the north-south
trips all have to equal the avenue that the center is on. Okay, that part looks good. In fact,
you could run solver with just the constraints that we did so far and an arbitrary objective
function to verify that the spreadsheet is figuring the directions correctly. Now we'll use that to
figure the value of our first objective. That you recall was the total overage of the six homes.
A home contributes an overage of its further than 12 blocks from the center.
To figure the total overage, I have to begin with how far each home is from the proposed
side of the center. But remember that we just found the directions from each home to the center,
and that's all we're going to need to figure the distance of a home from the center,
take its east-west distance and add it to its north-south distance. So home A is 5 plus 16
or 21 blocks from the center. That was the long trip that started this discussion in the first
place, remember? If you want to be a bit more general, the distance of a home A to the proposed
location is really 5 plus 0 plus 16 plus 0 blocks. Distance east or west or north or south still
count as distance. Home F, for example, is 5 plus 0 plus 0 plus 3 or 8 blocks from the center.
You have to go 5 blocks east and 3 blocks south to get there. Anyway, adding all of the east,
west, north and south displacements for a home gives us its distance to the center,
which we can record these calculations as formulas on our sheet. The distance isn't a concern unless
it's more than 12 blocks. And here comes soft constraints again. The target is 12 and distance
plus under minus over equals target, will, when solver is done with it, tell us how much above
and below that target each distance is. It looks like this. This time for clarity,
I've put the correct values in the red cells, the one that make home distance plus under minus
over equal exactly 12. Again, solver will find the correct values even if you type in random
numbers in these cells. Your calculation might not give 12, but you'll add constraints to solver
saying that this calculation has to give exactly 12. Then when solver runs, the constraints will
work as required. Okay, in this part of the problem, being over the limit of 12 blocks
contributes to overage, but being under is fine. So we add together all of the over limit values
and find the total overage of the six homes. In the current work, that's 18 blocks.
Quite a lot really. Well, now we have all that we need to address the highest priority goal in
our problem. The location of the center must minimize the total overage. That's the objective.
Put it in solver and run it. And here's what you get. The location is selected. It's in the center
box at 14th Street and 12th Avenue. As you can see from our overage calculation, this puts home
F beyond the 12 block limit, but only by three blocks. Total overage is three. And that's the
best that can be done. If you look at the map, you can see it's quite an improvement.
Okay, let's take a crack at the second goal. The second goal said that the average distance
of a patient from the center should be as small as possible. We find this by taking a weighted
average of the distance of each of the homes from the center. The weights reflect the number of
patients in each home. A home with twice as many patients counts twice as much in this calculation.
So multiply distance of each home from the center by the number of patients at that home.
Add them all up. Divide by the total number of patients in all homes. And you'll see the answer
in the yellow box. The average distance works out to be a bit over 10 and a half blocks for the
current location. Can we do better? We'll change the objective to minimizing this average distance
and rerun Solver. And here's what you get. The darker blue box says not to build it 14th and 12th,
but to build it 10th Street and 15th, like this. This cuts the average distance from the center
to about nine and a quarter blocks. That's about a one and a quarter block improvement.
But it does so at the cost of telling the people at home D to go take a hike.
They're now 19 blocks from the center. E is 13 resulting in a total overage of eight blocks.
But minimizing overage was our primary goal. We don't want to cut down average distance if we
can only do it at the cost of overage. So when we change our second object to our second objective,
we must also do one more thing. We just found a moment ago that the best possible value of
overage was three blocks. So we have to add a constraint to the program that says for any
solution that we're going to even consider, it has to have an overage of three blocks.
When we add that constraint, then we can change to our new objective like this.
Add the constraint to solver and rerun it and the objective with the objective of minimizing
average distance. And the optimal solution moves a bit to the southeast of our first run.
As required, the new location doesn't increase overage beyond its optimal value of three blocks,
but it reduces the average distance from about 10 and a half blocks to about 9.9.
Except for one thing, the location, it's at 12 and a half street and 13 and a half avenue.
As you can see, it's smack dab in the middle of a city block.
And this is why I mentioned earlier that this was an integer linear program.
If we made the street or avenue numbers integer would force the center to be located in the corner.
Alternatively, we could rerun the program with only one of them being an integer to put us on a
street or an avenue. No matter which option you pick though, the answer comes out the same.
Build on the corner of 13th Street and 13th Avenue. Doing so will give you the minimum possible
overage of three blocks and subject to that, it will give you the minimum average distance of
about 10.137 blocks. And if we had more than two objectives, we'd just keep playing this game.
For example, we might have a third goal of having the maximum distance from the center
be as small as possible. We'd add a third constraint, a new constraint that said that the
average distance from the center has to be 10.137 blocks, that's the value we just found,
and optimize for the new objective. Turns out we can't do any better in satisfying this third
goal without doing worse than one of the other two. So our center gets built on the corner of
13th and 13th. Even if that sounds unlucky, there's no other choice to cannot perform it.
It can be a kind of buyer's remorse when you prioritize your goals. In the current problem,
for example, the minimum overage was three blocks, but if giving up a little on this goal could gain
you a lot on your second goal, maybe you'd want to revisit your decision.
Well, we can do such an investigation easily now that we've written the program.
Right now, our program requires that the overage must be its theoretical minimum value of three.
But suppose we replace this with constant by saying that the overage must be less than or
equal to some amount, and then vary that amount. For each amount, we rerun Solver and see the best
we can do on goal two. There's actually a free add-in for Solver called Solver Table that will
do this for you in one command, and I heartily endorse it. But however you do it, here are the
results. As you move to the right across the chart, you accept higher and higher levels of total
overage, and you can see that this does indeed let us lower the average distance of a patient from
the center. We can shorten the average by about 0.4 blocks if we're okay with four blocks of
overage, raise the limit to six, and you can shave off another 0.4 blocks or so from the average
distance. Any of the dots on this curve are possible results. Any solution to the lower left
of this curve is impossible. This kind of trade-off curve can be very handy when deciding what
combination of goals best suits the situation at hand. Here, for example, it's very unlikely
that one would let the total overage exceed six blocks. So we've seen three different approaches
to multiple objectives, combining them into one by taking a weighted average, combining them into
one with use of soft constraints and penalties, like the NBC problem did, and prioritizing them,
as we did in the Medical Center problem. The prioritizing approach also lets us build the
possibilities curve for a pair of objectives, allowing us to explicitly see the trade-off between
them. These aren't the only possibilities. For example, there's an approach called Analytical
Hierarchy Process, or AHP. If you can break the decision down into sub-issues in as many levels
as you like and can identify the relative importances of those sub-issues, then AHP gives you a way to
put all those preferences together into a rank list of choices best to worst. It's an approach
that's much easier to learn about after you know a bit about matrices, which we'll cover later in
the course. See? Even if you're not NBC, you still have to figure out how to optimize the schedule.
