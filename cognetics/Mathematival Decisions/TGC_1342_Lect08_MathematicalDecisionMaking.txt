Union Pacific Railroad.
It's the largest railroad in North America, over 30,000 miles of track, 8,500 local motives.
Union Pacific moves more than 100,000 freight cars across the western two-thirds of the U.S.
Its annual payroll alone is almost $4 billion.
When you think of the services that Union Pacific provides, you might miss an important one.
Delivering empty freight cars to customers who don't have their own and who want to move their goods by rail.
The trouble is that the cars that Union Pacific has can be scattered all over the country.
Using an empty car in San Francisco to meet a demand in a little rock is costly in a number of ways.
The cost of transportation, obviously.
Also the delay in the car arriving where it's needed, which can generate both loss of customer goodwill and explicit penalties.
Then there's the congestion of the railways and so on.
Union Pacific's network is huge.
At its situation, it's dynamic.
New orders can come in at any time and new cars released from an earlier job can suddenly become available.
Because of this, Union Pacific was looking for a way to determine the assignment of empty freight cars to customers in a real-time environment.
Using a solution procedure that was accurate enough to be useful and fast enough to keep up.
Working with the University of Purdue, as they did just that, using the exceptional power and speed of a linear program.
A linear program is an optimization model.
But not all optimization models are created equal, no more than all hikes are created equal.
Strolling along a flat beach that gently slopes into the sea is a lot easier than scaling a rough and craggy mountain.
As it turns out, this analogy between optimization problems and geographic topography is a surprisingly good one.
A major issue in how hard an optimization problem really is to solve really comes down to its mathematical geography.
And linear programs are the simplest optimization problems to solve because they have the simplest geometry.
That's going to make it easier to write the math and to solve the model.
The relative simplicity of linear programs means that problems that aren't huge can be solved blindingly fast.
An important consideration in situations like that faced by Union Pacific.
When there isn't a lot of time between when you get a rundown of your current situation and you need a strategy to implement.
Even huge problems with a collection of decisions and constraints that stagger the imagination can be addressed in a reasonable amount of time.
So, what does a linear geometry look like?
The word linear, of course, suggests a line.
And it's worth keeping that association. Two variables that are linearly related will always have their graph being a straight line.
This isn't something new for us.
Simple linear regression found the best linear relationship between input and output.
The straight line that best matched the data on the scatter plot.
But we also saw in multiple regression that we could talk about a linear function of more than one variable.
If we had two inputs, we visualize this as a table top in which every position on the table was represented by a pair of x and y coordinates.
A function of these two variables was represented by a surface hovering over that table top.
Let's be a bit more specific about this visualization.
Suppose we have a function like 3x plus 2y.
Pick a point on the table top, maybe x equals 5, y equals 10.
To find how high the table top, above the table top, that hovering landscape is at that point, plug in x equals 5, y equals 10 into the function.
So, 3x plus 2y becomes 3 times 5 plus 2 times 10, or 35.
That means that the landscape is hovering 35 units above the table top at that point.
And the entire landscape is created by doing this for each x-y pair.
In general, the graph, that surface, might resemble almost any landscape that you can imagine.
But if the function is a linear function, that landscape is very special.
It's like that flat plane of glass tilted at some angle, and you know what that's like.
In particular, a flat pane of glass has this special property.
Pick any point on the glass, pick a direction, and then draw on the glass continuing in that direction.
What you draw will be a straight line.
That's really what we mean by flat.
No matter what line of sight you choose along the surface, you're always looking along a straight line that stays in the surface.
The same idea can be used as the definition of flat in higher dimensions.
No bends, no jumps, no kinks.
Linear functions always graph as flat surfaces in this sense.
Okay, that's what linear is geometrically, but it's even easier to characterize them algebraically.
Suppose you have a collection of input variables, and you want to create an output variable,
but you want the graph to be flat in the sense that we just described.
You want a linear relation.
You can build such a function in an extremely simple way.
Multiply each variable by a number, then add the results.
And if you like, add one more number by itself at the end for good measure.
The numbers could be positive, negative, zero, whatever you like.
The result is always a linear function of the inputs.
So 3x plus 2y minus 17z minus 2 is linear.
Or w plus 8.
Or x over 2 plus y over 3, since x over 2 is the same as 1 half times x.
2 over x, not linear, you can't divide by a variable.
x times y isn't linear either, you can't multiply two variables together.
It's just number times variable, plus number times variable, and so on.
Maybe with a number by itself added at the end.
Piece of cake.
Okay, one last way to imagine linearity, and we'll have all the pieces that we need.
What's a linear function conceptually?
Well again, let's start off easy.
A concrete example with only two variables, an input and an output.
Your significant other sends you to the grocery store with a specific list of things they want.
In addition to that, you can buy as many cans of tomato soup as you want.
How nice.
The input variable is how many cans of soup you buy, and the output is the total grocery bill.
Well, each time you add one more can of soup to the cart, you increase the total bill by the same amount, the cost of a can of soup.
If you change your mind, each time you take a can out of the cart, you always decrease your bill by the same amount.
These statements are true regardless of what else is already in the cart, whether we're talking about your first can of soup or your 12th,
and that's what characterizes a linear relationship.
On the other hand, if you got a discount, say, for buying four or more cans, that would make the relationship non-linear.
How about if there's more than one input?
Suppose that in your trip to the grocery store, you have a little more latitude.
You can buy soup and hamburger meat in whatever quantities you want, along with the stuff that your SO wants.
If you change only your soup purchases, you're going to see the nice linear behavior we just discussed.
On the other hand, if you change only your hamburger purchases, you see the same kind of behavior.
Each additional pound increases your bill by the cost of a pound of ground beef, and so on.
Again, these numbers don't depend on what else is in the cart.
They don't depend on the fact that you're changing the quantity of only one thing at a time.
Whenever you have these kind of relations, then the output, here, our grocery bill, is a linear function of those inputs.
Simple?
Well, let's put it all together.
One more trip to the grocery store.
The grocery list items from your significant other totals, 50 bucks.
In addition to these items, you can buy as much soup and hamburger as you want.
Soup costs a buck five a can, and hamburger costs three twenty-nine a pound.
What's the total bill going to be?
Well, obviously, that depends on how much soup and hamburger you buy.
So, let S be the number of cans of soup that you buy, and let H be the number of pounds of hamburger that you purchase.
Then your total bill is going to be this.
1.05S plus 3.49H plus 50.
Easy as it is, it's worth looking at this in a new way, because it's a little roadmap for linear programming formulation.
First, look at the algebra.
It is linear, number times variable, plus number times variable, plus number.
But here's the important thing.
Each of those numbers actually answers a specific question.
1.05.
If I buy one more can of soup, how many dollars does my bill go up?
3.49.
If I buy one more pound of hamburger, how many dollars does my bill go up?
50.
If I buy no soup and no hamburger, how much is my bill?
We can generalize this.
In any linear expression, the numbers answer one of two questions.
First, the constant term, the number with no variable, answers this question.
Suppose I set all of the variables to zero.
What should the thing underneath be?
The thing underneath is the measurable quantity I'm interested in.
Here, that's the total bill.
This problem has two variables, S and H, representing cans of soup and pounds of hamburger.
If they're both zero, I don't buy any soup or hamburger.
So the total cost of my bill is just the cost of everything else in your cart, which I told you was 50 bucks,
the cost of the original shopping list.
How about the other numbers, the coefficients?
A coefficient is just the number multiplying a variable.
They answer, if I get one more of this and make no other changes, how much does the thing underneath go up?
So the 105 in front of S means one more S and cost goes up $1.05.
And this is how it works for all linear expressions.
The coefficient of the variable tells you how much the thing underneath goes up if the variable increases by one.
In most variables, this will either mean that you get one more, or you use one more,
or you need one more of something, or something like that.
Okay, let's try a less obvious one.
Suppose that during a 40-hour work week, a building inspector can inspect either 80 houses or 10 farms.
What math represents the number of hours he spends inspecting this week if he inspects H houses and F farms?
The problem implies that each farm takes the same amount of time, and each house takes the same amount of time.
That makes the expression linear.
So algebraically, the answer will look like this.
And it's just a fill-in-the-blanks game.
Constant term first.
If we set both H and F equal to zero, he doesn't inspect anything, so he spends no time inspecting,
and that's how you find the constant term.
It's zero.
Now, coefficient of H.
The question is, if H goes up by one, which means he inspects one more house, how does the thing underneath the hours used go up?
Well, he can do 80 houses in 40 hours, which means it takes him a half an hour per house.
So if H goes up by one, time goes up by a half an hour, like this.
And of course, we use the same reasoning for F.
One more farm increases time by how much?
Well, 10 farms in 40 hours means four hours per farm.
So that's the coefficient of F.
And we're done.
0.5H plus 4F gives the time used.
If he only works 40 hours in a week, our constraint would be 0.5H plus 4F less than or equal to 40.
Notice that the coefficients showing up in this constraint aren't the numbers that I originally gave you this time.
Those were 80 and 10.
We've found the needed coefficients by asking the right questions.
This time, the constraint that we created is an example of the most common kind of constraint in a linear program, what I call a limited resource constraint.
It says you can't use more of something than you have.
Or more formally, number of units used less than or equal to number of units available.
So how would all of this stuff look in a problem like the one that Union Pacific had to handle?
Well, to demonstrate, I'm going to present a problem that's both simpler and harder than the Union Pacific one.
It'll be simpler and that it'll be much, much smaller than the real problem and have a simplified cost structure.
But it will be more complicated in that we're going to work out not only where the empty cars should be assigned to what destinations, but how they're going to get there.
We'll have not only supply and demand constraints, but also transshipment points in between, which makes us a transshipment problem.
Ladies and gentlemen, I give you TGC Railroad, the Great Courses Railroad.
As you can see, we have two supply points in Atlanta and Baltimore, A and B over on the East Coast, and with 300 supply in Atlanta and 200 in Baltimore.
As it turns out, all of our demand for empty cars happens to be in the West, Eugene, Oregon, Fresno, California, and Great Falls, Montana.
There's a direct line from Baltimore to Fresno, but otherwise the cars are going to have to pass through two transshipment points, Chicago, C, or Dallas, D.
There's no rail running from Dallas to Great Falls, so if you're going to Great Falls, it has to be by way of Chicago.
To keep it simple, I'll have all of our railroads running from East to West.
The three demands are for 100 cars, 150 cars, and 200 cars for the three demand points in the West, which adds to 450,
since our total supply was 500 cars, we can meet all of the demand and still have 50 cars on the East Coast that will stay in their original positions.
The numbers on each edge tell us the cost of moving one car along that particular arrow.
For example, it costs $70 to move a car from Baltimore to Chicago.
Obviously, we'd need to get these figures before we could solve the problem.
I made a simple assumption that the cost of shipping from one city to another was dependent only on distance and costs $0.10 a mile.
Alright, let's put the tools that we've developed to work.
We're going to create a linear program step by step, whose solution will tell us how we should ship our cars.
First, we're going to need to find our objective, our constraints, and our decision variables.
To start, let's put the issues into a more friendly form.
What am I trying to accomplish? Objective.
What rules do I have to obey? Constraints.
What quantities do I have direct control over? Decision variables.
Well, the goal of an LLP, a linear program, is always to maximize or minimize something.
What's the goal for our car shipping problem?
We're trying to minimize the cost of getting the job done.
We're assuming here that the only costs we need to worry about are the actual transportation costs of moving the cars.
Okay, how about the rules that we have to obey?
People often get stuck at this point.
What must you do? What can't you do?
Well, one thing that can help us is looking for words and phrases that carry this have to cannot kind of feel.
Words and phrases like at least, at most, no more than, no less than must cannot limited, restricted.
Rules can also come from words like supply, demand, budget, required, and so on.
The second thing that can help is to remember the three basic kinds of constraints and what they say.
I've already told you about one of these.
The limited resource constraint, which says you can't use more of something than you have.
A second kind is the minimum performance constraint, also called the quota constraint.
A minimum performance constraint says that you have to get at least what you need.
Being more formal, it says number of units obtained greater than or equal to number of units required.
So limited resource constraints and minimum performance constraints are two out of the three.
Let's work with those and we'll pick up the third class of constraints a bit later.
Before we go hunting for constraints, though, I have one more helpful hint.
There are two questions that can help you find constraints.
Here's the first one.
What, if anything, prevents me from doing nothing at all?
I grant you, I might not want to do nothing, but are you allowed to?
If you aren't, then whatever stops you from doing nothing is going to be a constraint.
So how about our shipping problem?
Can we do nothing?
Well, we're required to get cars to the western cities, and if we don't do anything, they won't get there.
We have to give Eugene, Fresno, and Great Falls at least the cars that they need.
And if you listen to that, they have to get at least what they need.
You know that we're talking about a minimum performance constraint.
Three, actually, since there are three different conditions that need to be satisfied.
It doesn't matter if Eugene gets a surplus of cars if Fresno is shorted.
So we have one minimum performance constraint for each city,
saying that each city must get at least the cars that it demanded.
So, good.
Asking what stopped us from doing nothing was a worthwhile question.
Sometimes you are allowed to do nothing, but this time we found three constraints that prevented it.
Okay, second question, useful question.
What if anything prevents me from blowing the doors off of the situation?
That's a very vague term.
But what I mean is, what if anything prevents me from making quantities in the problem?
Absurdly huge.
Again, it might be stupid to do so, but is it permissible?
Let's apply this to the shipping problem.
Maybe you see a bunch of quantities in this problem already, like how many cars we ship from place to place.
I'll assume that you don't, that you just know one quantity, shipping cost.
Now, I certainly wouldn't want to make my shipping cost billions and billions of dollars, but could I?
Well, the only way that I can generate cost is by shipping cars,
so a mammoth cost requires a mammoth number of cars shipped.
And I can't do that.
I only have 500 freight cars that I can move because the East Coast cities have limited supplies.
And there we are.
We can't exceed the supplies of our cities.
Note again that the words limited and supply show up, suggesting that we're on the right track.
Since we can't ship too much out of Atlanta or of Baltimore, this actually is two limited resource constraints.
Now, there's actually one more set of constraints in this problem,
but they aren't limited resource nor minimum performance constraints.
They belong to the third common kind of constraint, which I call a conservation constraint.
A conservation constraint basically says that if you count the same thing two different ways, you have to get the same answer.
How does this apply to us?
Well, think about the traffic around Chicago.
Chicago isn't a source nor is it a final destination.
As a consequence, the number of cars that are coming into Chicago has to be exactly equal to the number of cars that are leaving it.
In brief, total in equals total out.
And of course, the same goes for Dallas.
So our program looks like this.
Minimize shipping costs in dollars.
Subject to the constraints, you must at least meet demand in the three Western cities.
That's three constraints.
You can't exceed the supply in either of the two Eastern cities.
That's two constraints.
And whatever goes into a transfer city is what comes out.
That's two more.
As you can see, we haven't written down any numbers yet.
Numbers are the last thing to go into a formulation.
Okay, what's left?
Decision variables.
What do we have direct control over?
Remember that we can get the decision variables by starting with some quantity in the problem and repeatedly asking on what does that depend?
So the one measurable quantity that we have a firm grip on is our objective, shipping cost.
What does it depend on?
Obviously on the shipments you make.
Good.
But remember that we need measurable quantities, number of this, number of that.
So number of cars that you move from place to place.
Okay, better, but still not enough.
Why?
Because to figure out my cost, I need to know more than how many cars moved.
I need to know where they moved from and where they moved to because each inner city link on our map, each edge on our graph has its own cost.
And if I do know the traffic on each link, I configure the shipping cost as well as checking that I don't violate my constraints.
In short, if I know the traffic on each link, I know everything.
So preliminary analysis done.
It looks like this.
Minimize the number of dollars spent on shipping, subject to the constraints, number of cars reaching Eugene has to be at least what Eugene needs.
And the same for the number reaching Fresno in Great Falls.
Number of cars leaving Atlanta can't be more than Atlanta has.
And the same for the number leaving Baltimore.
And number of cars going into Chicago has to be the same as what comes out.
And the same for the number of cars entering and leaving Dallas.
A few things to notice.
First, I relaxed a bit the language from my constraints.
Limited resource constraints say number used less than or equal to number available.
But the number of cars used in Atlanta is actually the number of cars that leave the city.
Similarly, minimum performance constraints say number obtained greater than or equal to number required.
But in this context, obtaining a car in Eugene means that a car reaches Eugene.
Once again, I'd like you to notice that we haven't done anything with the numbers yet.
It's all been measurable quantities.
If you formulate your linear program correctly, you should be able to read every constraint like a sentence.
Okay, how about decision variables?
A moment ago, we said we controlled how many cars we ship along each of the intercity links, each of the arrows on our map,
how many go from Atlanta to Chicago, and how many from Chicago to Eugene, and so on.
I'm going to have a decision variable for each of these.
Now, I could call them W, X, Y, Z, and so on, but I prefer to use names that remind me what the variable stands for.
In this problem, since no two cities start with the same letter,
I can unambiguously refer to a link by giving the letter of its origin city and the letter of its terminus.
So I'll define AC equals the number of cars going from Atlanta to Chicago,
and I'll define decision variables for all the other links in a parallel fashion.
So, for example, BF will represent the number of cars that use a direct link from Baltimore to Fresno.
Our graph has 10 arrows, so we have 10 decision variables.
The more formulations you do, the better you get at them because you start noticing patterns.
In any transportation, transshipment problem, for example,
you're going to expect that you have a limited resource constraint for each supply,
a quota constraint for each demand, and a conservation constraint for each transshipment point,
and a decision variable for each link in the network.
You may have some extra bells and whistles added to a particular problem,
but the skeleton of the problem is likely to be that.
This is true for other problem types, too.
Once you work out one or two, you quickly develop an intuition on what the program will look like.
Okay, we're finally ready to write the program.
Let's start with the objective.
Since the program includes 10 variables, we have 10 variable coefficients to consider, as well as the constant term.
Let's get that constant term out of the way.
Early in the lecture, we said that to do this, we asked what the quantity of interest here, our shipping cost,
would be if all of the variables were set equal to zero,
minimize the number of dollars of shipping cost.
Well, the variables tell you how many cars you ship on each link.
If they're all zero, you ship nothing, and so your shipping cost is zero.
That's the constant term.
Good, that was easy.
How do we find all the coefficients of the 10 variables?
Just ask if this variable goes up by one, and we make no other changes,
by how much does the quantity of interest increase?
Again, the quantity of interest is the shipping cost,
and our variables all represent the traffic on a given intercity link.
If the variable goes up by one, we get one more car of traffic on that link, with no other changes.
And so the cost increases by whatever it costs to ship one car on that link.
So my objective is just this.
72 AC plus 78 AD plus 70 BC, and so on.
Because it costs 72 dollars to ship a unit from A to C,
78 dollars to ship from A to D, and so on.
These numbers come from our map.
Okay, now let's tackle the first constraint.
Number of cars reaching Eugene, greater than or equal to number of cars needed in Eugene.
The right-hand side of the constraint is just a number,
since we're told that Eugene needs 150 cars.
But the left side depends on our shipping pattern.
Obviously, if we set all the variables, the shipping variables, equal to zero,
we ship nothing, and so Eugene gets nothing.
That means the constant term for the left-hand side of our constraint is zero.
How about the variable coefficients?
What happens to the number of cars reaching Eugene if I increase the amount of traffic on only a single link in the system?
Because that's what it means to increase the variable by one here,
to send one more car on a single link and leave all the other links alone.
So we care about what cars reach Eugene.
Suppose I make a single change of sending one more car on the Baltimore Fresno link.
That doesn't help Eugene at all.
Face it, I'm only changing one variable, the traffic on one link,
and if that link doesn't end in Eugene, then Eugene could care less about the change.
So, mentally, I'm standing on the city limits of Eugene
and keeping an eye on the two tracks that do enter it,
one from Chicago and one from Dallas.
One more car on either of these tracks will give Eugene one more car.
So the constraint's going to look like CD plus DE greater than or equal to 150,
because 150 is the number of cars needed by Eugene,
and CE plus DE totals the traffic on the two rails that enter that city.
Once you see that, the other two demand constraints for Fresno and Great Falls are clear.
You expect this kind of demand constraint in any transshipment or transportation problem.
There are three ways into Fresno, so Fresno's constraint will look like this.
BF plus CF plus DF greater than or equal to 200.
There's only one way into Great Falls, so the constraint for them is CG greater than or equal to 100.
Count the cars on the links that lead directly into the city,
and you have to get at least what the city demands.
So, how about the supply constraints, like number of cars leaving Atlanta,
less than or equal to number of cars available in Atlanta?
Well, it's very similar.
Again, the right-hand side is a known quantity.
We're given the number of cars in Atlanta is 300.
The constant term for the left-hand side?
Well, if we set all the decision variables to zero, you're getting this,
the number of cars leaving the city is zero, so the constant term for that city is zero.
And logic parallel to the one that we used for the demand constraints
shows that the only variables that can contribute in and of themselves to a car leaving Atlanta
are those cars that start in Atlanta, those who begin with the letter A.
Similarly, AC and AD.
If AC goes up by one, it means we ship one more car from Atlanta to Chicago,
and this makes the number of cars leaving Atlanta increased by one.
So, one is the coefficient of AC on the left-hand side, same for AD.
So, our constraint for the supply leaving Atlanta looks like this.
AC plus AD less than or equal to 300.
And similarly, the supply constraint for Baltimore is BC plus BD plus BF
less than or equal to 200.
Add up the traffic on all the links originating in Baltimore,
and it can't be more than Baltimore has.
Now we have the conservation constraints for Chicago and Dallas.
But the work that we've already done makes this easy.
To find out what's going into Chicago, take the traffic on each link that ends with Chicago
and add them up, AC plus BC.
What's leaving Chicago?
The sum of all the traffic that's going out of Chicago,
CE plus CF plus CG, all the variables that start with C.
So, the Chicago constraint is AC plus BC equals CE plus CF plus CG.
And the same logic gives the Dallas constraint, AD plus BD equals DE plus DF.
There is no DG since Dallas can't ship to Great Falls.
So, are we done?
Well, not quite.
Most problems have a non-negativity constraint or two.
A requirement that the variables in the problem can't be negative numbers.
That's the case here.
We can't send a negative number of cars along a link.
So, we actually have ten extra constraints,
each one saying that one of the ten variables is greater than or equal to zero.
Constraints like this are very common,
and they're so simple that they're often called trivial constraints.
The rest of the constraints, like our supply and demand constraints, are called non-trivial.
So, we need to specify that all of our variables are non-negative too.
Here, then, is the finished linear program.
That is, minimize our objectives subject to several inequalities.
Note the word subject to just means here come the constraints,
which in this case are three minimum performance constraints,
two limited resource constraints, two conservation constraints, and ten trivial constraints.
Was it worth all the work?
Well, it was the Union Pacific.
The problem was huge with around 10,000 variables and 1,000 constraints,
but once their computers were told how to set up the formulation,
they were perfectly capable of doing so, setting it up and solving it in 35 to 45 seconds.
The model schedules generally showed cost reductions of 10 to 15%
when compared to the old system of assignment by humans,
and the improved schedules and staffing reductions made it possible by this.
We did 35% return on investment.
Today, we've covered the basics of linear programming formulation
and giving you an example of what the power of linear programming can do.
And frankly, once you've seen one transshipment problem, like the one we did,
you're in good shape to tackle any other.
When we get together next time, we're going to expand your repertoire,
looking at multi-period problems that unfold over time.
We'll see that we can use the tools that we developed in our discussion today
to manage all activities, control inventory,
even help determine an investment plan that can give us the money that we need when we need it.
And for our main example, we leave behind the Union Pacific Railroad in America
and travel south to sunny Brazil and to Holombra, the city of flowers,
exotic foreign lands and linear programming.
What more could you want?
