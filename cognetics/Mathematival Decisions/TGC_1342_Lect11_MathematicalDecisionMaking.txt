Mathematical analysis. The ultimate exercise in deduction. Each step follows from the one
before it by carefully established theorems, creating an unbreakable chain from premises
to conclusions. Actually doing mathematics though is a very different matter. Mathematicians
rely to an amazing extent on their intuitions when trying to guess what a right conclusion
might be and what twists and turns that unbreakable chain might take before it links that conclusion
to the premises. Intuition in this sense is a practiced way of seeing things, getting
a feel for how things usually fit together and play off each other. That's what the
last lecture was about, really. The graphical method of solving linear programs is in some
ways an almost useless thing. With more than two variables it's problematic, with more
than three it's basically impossible, and it's labor intensive with all that line drawing
and region shading and the like. The value of the graphical method is that it gives us
a feel for some important ideas, like the best solution being determined by the constraints
that are binding on that solution, the ones that are pushed to their limits at the optimal
point. We'll use these ideas repeatedly, especially in the next lecture. And now you're
ready to learn that you can easily find the optimal solution to virtually any linear program
that has one, using nothing more than a spreadsheet program on a home computer. If you're eager
to try what you've learned so far on problems of your own, this will be right up your alley.
But even if that's not for you, what we do will give you a good idea of what goes on
behind the scenes once a problem is formulated, and what an answer may look like. We'll solve
some of the problems we've already looked at, as well as presenting a new, richer application,
but it'll give you a better idea of what linear programming can do for you.
The technique that the spreadsheet's going to use is essentially dancing simplex method.
And now that you can visualize a linear programming problem from the last lecture, I can tell
you how it works. I'll even show you a visual example of what I'm talking about at the same
time with a problem that has three decision variables, just to give you a sense of what
that looks like. What is a linear program with three variables going to look like graphically?
It's going to look very different from a linear regression with three variables. First off,
with three variables, we again need three dimensions, so our representation isn't going
to live in a flat plane like a video screen. It's going to be hanging in space. In two
dimensions, the constraints in the objective function aligns, graphed as lines. Now we're
a dimension higher up, so constraints are going to be graphing as planes, unbending
flat surfaces. The feasible region is bounded by constraints, so now it'll look like a faceted
gem, a polyhedron, something like this. And the OFL, the objective function line, separated
the flooded part of our picture from the un-flooded part. That was the water line. Now it's no
longer a line, it's the water level cutting through the feasible region at some angle,
like this. For this particular problem, raising the water level, that is increasing the objective
function value, means moving the plane on an upward diagonal direction. To make it easier
to talk about, let's tilt our heads so that the water level is in a horizontal plane as
it would be on Earth. Ah, there. The point that we're looking for is the one way at the
top, the last one that would go under water when the objective function's water level
rises. Here's how the simplex method finds it. It begins by finding a corner of the feasible
region, any corner, like here. Then it looks along all of the edges leaving that corner
to see if moving along any of those edges makes the objective function get better, since
we've tilted our heads better in this picture means up. I'll call such an edge an improving
edge. If a corner doesn't have any improving edges cutting up coming out of it, then you're
already at the best corner and you're done. But if there is an improving edge, then the
simplex method picks the one that improves the objective most rapidly and moves along
it until it reaches another corner. With our rotated view making the OFL plane horizontal,
the edge with the most rapidly improving objective is just a complicated way of saying the steepest
uphill edge. Our starting corner has two improving edges, so we take the steeper one, then repeat
the process. In our example, the steepest upper edge from our second corner takes us
to the peak. And since every edge out of the peak corner worsens the objective function
and our tilted view it leads down, we're done. That's the simplex method. Conceptually,
pretty darn simple. By the way, you might remember that with two decision variables you can always
find an optimal point defined by where two constraints, two lines meet at a corner. Those
constraints that are, those are the two that are binding on the optimal solution. With
three variables, you can see that the optimal point is where three constraints, three planes
meet, just like two walls and a floor, define a corner of a room. This pattern continues
in the higher dimensions. If a program is infeasible, of course, you can't get a starting
point. There is no feasible region to find a corner of. And if a program is unbounded,
the procedure never ends. Imagine a feasible region that was like a slylo stretching up
to the stars. But otherwise, you'll eventually reach a corner that has no improving edges
and that points your optimal solution. You can see how mechanical this process is. And
that's the beauty of it. Because although the mathematics involved in moving from corner
to corner is arithmetically tedious, it's a lot like solving the family of simultaneous
linear equations for a bunch of unknowns. Conceptually, it's straightforward. In other
words, it's exactly the kind of thing that computers are wonderful at. So all we have
to do is to get the hay down where the horses can eat it. And that's pretty easy. The demonstrations
you'll see today will all be done in calc. Calc is part of open office, a freeware alternative
to Excel in Microsoft's Office Suite. For my own work, I usually use Excel. But anyone
can get calc for free. So I thought of a good choice for this series. Feel free to use whichever
you have. Their interfaces are quite similar. And I'll point out this few small variations
between the two as we go. Okay, let's see how we find our best answers. Let's start
with our financial planning problem from two lectures ago. You may recall we had seven
different investment options available for our half a million dollar nest egg, investments
A, B, and C, and four money market funds. And we wanted to accrue as much wealth as
possible at the end of year four, although we wanted to withdraw $10,000 at the end of
year three. Don't worry about the details. Let's get the program back so we can have
it for easy reference. There. Each constraint says that the money that becomes available
at the end of one year is equal to the money that's dispersed at the beginning of the next
year. And the objective tells us how much money becomes available at the end of year
four. In some ways, it's amazing that so much information boils down to such a small formulation,
isn't it? That's part of the charm and power of the language of mathematics. Okay, before
we get started, I'm going to clean up my constraints a little bit by putting them in
what's referred to as standard form. In standard form, the left hand side of the constraint
is just a linear expression with no constant term. And the right hand side is just the
constant term, no variables. The spreadsheet can actually handle things that differ a little
from standard form, but doing this is still a good idea. It makes the interpretation of
some things we'll be doing later easier to understand. So the first constraint needs
to be flipped around end for end, like this. And the variables on the right hand sides
of the other constraints need to be subtracted off to get them over on the left hand sides
where they belong, like this. Later in today's lecture, I'm going to show you how you can
pretty up a problem like this. But right now, I'm going to show you a straightforward approach
that will let you accurately and correctly enter any linear program into a spreadsheet.
I call it the matrix representation. Solving a linear program means finding the best
value for all of the variables. So we're going to start out with a row that just lists
the names of all the variables in the program. Directly under those, I'm going to have the
cells that will eventually hold their best values. To keep things clear, I always border
these decision variable value cells in red. Alright, next comes the objective to maximize
the final cache on hand. Here's how I do this. Add a new row for the objective aligned
with the variables that I've already entered and type the objective's coefficients into
that line, like so. Take a second to make sure you see what's going on here. The objective
was just 1.1a plus 0.53c plus 1.02m4. So I just recorded those coefficients, 1.10,
0.053 and 1.02, underneath their corresponding variables. The other variables get zero entries
in this row because they aren't in the objective. Well, that's great for a human reading this,
but the spreadsheet's going to need to calculate how much money this expression works out to
be. And that, of course, depends on how much money we put in each investment. I told you
that those numeric values are going to end up in the red cells, and although I obviously
don't know how much money to put in each fund, for the moment I'm going to put in any numbers
in those cells as placeholders. I'll be creative and just stick them in. Not only aren't these
values optimal, they aren't even feasible. Remember that we had $500,000 to invest right
now? Well, clearly we aren't. But I don't care. When we get to it, the spreadsheet solver
will find the best values for these cells. But for now I'm going to stick with these
numbers and I want to know how much profit it's supposed to be generated by them. Well,
the objective is 1.10A plus 0.53C plus 1.02M4. So the answer is 1.1 times 300 plus 0.53 times
100 plus 1.02 times 2,000, which works out, if you do it, to 2,423. I could have included
all the other variables, too, of course, but they're all multiplied by zero for their
objective function coefficients, so it wouldn't change my answer. What I'd like you to look
at is the geometry of how this calculation is done in the spreadsheet. The decision variables
value in the red boxes are lined up with the objective function coefficients in the gray
boxes. Then corresponding terms are multiplied, 300 times 1.1, 200 times 0, 100 times 0.53,
and so on. And finally, all of these products are added up. Happily, both Excel and Calc
have built-in functions for doing this with two rows of numbers. It's called sum product.
First you do a bunch of products, multiplying, then you do a sum. To use it, you just type
equals sum product, open parentheses, followed by the first range that you want. For us,
that's the red cells in B2 through H2, and then the second range that you want. For us,
that's the gray cells from B4 to H4. Between those two ranges goes a separator. In Calc,
that's a semicolon. While in Excel, it's a comma. And at the end of it all, you close
the parentheses. So we get this. And when you enter this, voila, the spreadsheet calculates
the correct value. This is dynamic, of course. Changes the numbers in the red cells, and
the spreadsheet automatically computes the new final cache. I've labeled the calculation
as final cache, as you can see. We're going to play the same game with the left-hand side
of the constraints. Left-hand side of the constraints, I should say, that after all,
they're the same kind of expressions that we tackled in the objective, just number times
variable, plus number times variable, and so on, all the way through. For ease of reference,
I'll give each constraint an English label to remind us what the constraint's talking
about. Column I is labeled left-hand side, as you can see, which just stands for left-hand
side, LHS. When you multiply each entry in the red row by the corresponding element in
the gray row, then add up all of those products, the LHS entry tells you the result. For example,
the now row just computes 1 times A plus 1 times B plus 1 times M1 to get 300 plus 200
plus 1,000, or 1,500. This is the total amount being invested right now, given the numbers
that I typed into the red cells. Just remember that those investment numbers are bogus, though.
I made them up. Again, all of the entries in that LHS column are just the sum product
formulas, the sum product of the red numbers with the numbers in that row. Okay. Well,
great. But a constraint has two sides, and we still need the right-hand sides. In this
particular program, all of our constraints are conservation constraints, equality constraints.
So let me indicate that, and include the right-hand sides in my spreadsheet as well. And that's
looking pretty good. Okay, let's step back and see what we have, and what we don't. For
a feasible answer, as you know, all the constraints have to be satisfied, since our constraints
here are equality constraints. The LHS and RHS in each row have to be identical, or we
don't have a feasible solution. So our current proposed solution is way off base. None of
the constraints are satisfied. Well, we could play around with trying different numbers in
the red cells and seeing if we could find a way to make all the constraints true. But
even then, that would only be a possible investment strategy, not the best possible one. And the
truth is, we don't need to play around with any of these numbers. That's the job of the
spreadsheet and the simplex method. I'd love to tell you that we could just tell the spreadsheet
go at this point and get the answer, but I'm afraid that's not true. Everything in the
spreadsheet that isn't a number is actually going to be irrelevant to spreadsheet solver.
We have to tell the solver where the objective is, where the decision variables are, and
where the constraints are. Fortunately, that's easy. Excel has a solver add-in that comes
on the office disk. If you ask Excel to install the add-in, you'll see it appear on the menu
ribbons on the top of your Excel screen. For calc, which is what I'm using here, the add-in
is pre-installed. It's accessible from the tools menu. While the pop-up windows in the
two applications look slightly different, they want the same information and they work
in the same way. Here it is for calc. The target cell holds the objective function.
For us, that's the four-year cash on hand, cell I4. We want to maximize it so we leave
the radio button selecting maximum alone, and the changing cells are the cells that
contain the values of our decision variables, the red cells, B2 through H2. That leaves
the constraints. You can enter each constraint on its own, in its own row, in solver, but
if a number of consecutive constraints have the same relational operator, all less than
or equal to, or all greater than or equal to, or all equal to, then you can do all of
those in one row. And since all of our constraints are equalities, you can do them all at once
by saying that the four left-hand sides, I8 through I11, have to equal the four right-hand
sides, K8 through K11. Like this. And that's almost all there is to it. We have only one
more concern if we're using calc. We forgot the non-negativity constraints on all the variables.
Easily remedied. Click options, and then the checkbox by assume variables as non-negative.
Okay, get out of options by saying, okay, and you're back in solver. By the way, in Excel,
assuming that all the variables are non-negative is the default, and you have to tell Excel
if you want the variables to be allowed to take on negative values. As we've seen, we
usually don't. Also, if you're using a version of Excel that includes premium solver, you'll
also want to tell it to use the standard LP quadratic as the solving method. Okay, all
set. Relax a while as our spreadsheet finds the best investment alternative from all the
myriad of possibilities. It'll start as soon as I press the little solve button. Done.
Rest's over. Wasn't very long, was it? As I've been telling you, problems of even considerable
size and the simplex method end up solving problems blindingly fast. And here is the
best investment strategy. What's it say? Look at the red cells. The best way to invest
money is to put all of it in investment A originally. After one year, you'll have $10,000
come back from A, and this gets funneled into money market two for a year. At the end of
that time, it comes out as $10,200. Also, A gives another $10,000, so the total $20,200
gets plowed into investment C. Investment C after a year gives 53% of this back or $10,706.
We also get another $10,000 from investment A, which is just enough to pay for the vacation.
So the $10,706 gets one more year of money market. It matures as does the investment
A money and another 53% of the investment C money. And we end up with $571,626 and 12
cents on hand at the end of year four. With these lousy interest rates, it's hard to make
a lot of money, but the solution we found here was the best possible one. On the other
hand, suppose that you decide that you want to skip the vacation and instead make a home
improvement that will cost $50,000 in year four. Now what happens? Again, change the
right hand side of the last constraint and rerun the program. Now things are quite different.
We can't put all the money in investment A anymore. It won't leave enough for the renovation.
So about $480,000 goes in A, but the rest goes in B. When the money comes out of either
of these investments, it's immediately sunk back into the money market or withdrawn for
the house renovation. Now C is not used at all. I'd like you to notice that when we
made this change, a $50,000 withdrawal at the end of year three, the solution we saw
not only changed its particulars, like how much money was left at the end of the year
for a money market, it changed its character. A different set of investment options were
being used and some of the previously used options were abandoned. Keep this in mind
because knowing how big an alteration will cause this kind of a C change is important
in assessing the sensitivity of a solution to changes in the existing situation. We'll
look at this issue in much more detail in our next lecture. But for now, let's look
at the solution of another of our problems and see what else we can learn from this
spreadsheet. Remember the Great Courses Railroad, our first linear program? We do the same thing,
write the constraints in standard form, use some product to compute the objective and
left hand sides, and tell Solver the same kind of stuff we told it before, except this
time we'll hit the radio button for minimum since we're trying to spend as little money
shipping as we can. Also, we have two less than or equal to constraints, followed by
two equal to constraints, followed by two greater than or equal to constraints. So the
constraints have to be entered in three blocks instead of one. When we run this, here's what
we get. Which tells us what? Actually, quite a bit. Let's start with the optimal solution.
Ship 100 cars from Atlanta to Chicago and on to Great Falls and 150 from Atlanta to Dallas
and on to Eugene. All 200 of Baltimore's cars go directly to Fresno. Like this. The total
shipping cost is $90,800. Of course, in this problem, we'd probably have different supplies
and demands on different days. When we got the new information, we could quickly rerun
the program. That's what Union Pacific does in determining how to ship its cars. So what
else can we see? Well, remember our discussion of binding constraints in the last lecture?
A binding constraint is one that is satisfied with none to spare. The constraint is pushed
to the limit. Graphically, a constraint was binding on a solution point if the constraint
actually passed through the solution point. But they're just as easy to find here. The
binding constraints are the ones with the numbers in the left-hand column and in the
right-hand column are the same. In this solution, every constraint is binding, except for the
Atlanta supply constraint. With the conservation constraints in Chicago and Dallas, that's
no surprise, they're equalities. They have to have the two sides equal. But the other
ones being binding suggest that changing their right-hand sides will probably impact
your total cost. While changing the non-binding constraints right-hand side by a small amount
won't. You can see the latter. We have 300 cars in Atlanta but are only shipping 250.
If we had less cars in Atlanta, we wouldn't care. It wouldn't hurt our optimal cost unless
it dropped to less than 250 cars available in Atlanta. But how about the binding constraints?
Well, the optimal solution is pushed each binding constraint to the limit. That's what
makes it a binding constraint. This suggests that making the constraints harder to satisfy
would probably worsen our optimal cost. While making them easier to satisfy would probably
make our optimal cost better. Since we've got the linear program, we can do a little
what-if experimentation to see if it's so. We can change the number in a linear program,
rerun it, and see what happens. For example, it seems to make sense that if western cities
need more cars, it's going to cost more money, and that less cars will need less money. But
how much? Now let's try it. Let's increase the demand at Fresno by 1 to 201. What happens?
Costs do climb by $234. Atlanta needs to send one more car to Dallas and then on to Fresno.
On the other hand, if Fresno needed one less car, 199, then rerunning this program shows
that this would only save $138. So the cost of shipping not surprisingly is depending
on the demand at Fresno, but in a rather interesting way. In fact, if you keep on rerunning this
program with different demands and record the total cost each time, it looks like this.
And you can see that as you change the demand at Fresno, the effect is linear, almost. Every
car below 200 demand saves you $138. Every car above 200 demand costs you $234. The graph
is piecewise linear, which just means it's linear in pieces. But the behavior changes
from one linear relation to another at exactly 200 cars demanded by Fresno. It would have
been nice to have known that without having to rerun the program a bunch of times. And
happily, there is a way to know about that. And that's what we're going to talk about
in the next lecture. For now, just keep in mind this picture, a piecewise linear relationship
between the right-hand side of a constraint and the objective function value, here between
Fresno demand and total shipping cost. I want to spend the rest of the lecture today
showing you a different way to approach setting up a linear program in a spreadsheet that
might actually be easier for some of you. Certainly, if it's done well, it can be easier
for those who would use your spreadsheet. I'm going to create a fairly complicated manufacturing
example, a multi-period model that's like the Jan DeWitt-Lillies problem in some ways,
deciding what products to produce, how many to produce, and when to produce them. It's
a variant of a nice problem by Wayne Winston and Chris Albright in their excellent text,
Practical Management Science. We've got a factory that can turn cloth into clothes,
but we only have so much cloth and only so much production capacity each month. We're
making summer clothes, so we have a three-month time horizon for the problem. Each month,
we have a production capacity to make 2400 items of clothes, a shirt, or a pair of pants,
each count as an item. Pants take more cloth than shirts. We have some pants and shirts
already in stock and some cloth as well, although we'll be getting additional cloth at the beginning
of each of the months two and three. We've signed a contract with a wholesaler to deliver
a certain number of shirts and pants each month for the next three months. They have
to be delivered on time, not early, not late. We've already agreed on a selling price for
this order, so our goal is to minimize the total cost of production and storage to get
the job done. I'm going to set this up in a spreadsheet, but not using our matrix approach.
My goal instead is to organize the sheet in a way that's easy to understand, easy to modify,
and easy to create. So first, let's make a section for the item parameters, how much
cloth each garment uses, how much it costs to make, and how much it costs to store. The
blue boxes prompt the user that these values are user-definable. If the values change,
they can simply enter the new values in the spreadsheet and it will still work. Linear
programs are often used in this way over and over. Now, the production schedule. As you
can see, there are some more parameters here. The garment's currently in inventory in the
monthly demands, but the red cells will be my decision variables, how much of each type
of garment to produce in each month. Like last time, I filled these with some bogus made
up values. If we know all of these quantities, we can track inventory. I left blank the cells
for those calculations. We'll do them in a minute. Note how the structure of the sheet
takes advantage of the parallelism of the problem. We have essentially identical processes
going on for shirts and pants in the left-right division of the sheet, and that highlights
that. Similarly, the activities of one month echo those of another, so each month gets
its own column. In the third section, we're going to keep track of our resources, labor
and cloth. We use the same layout as in the previous section. The numbers here are again
provided by the user and could be changed as a user desires. We have a bunch of currently
blank cells which are going to compute how much cloth and labor capacity we use, as well
as keeping tabs on our inventory of cloth. And after all of that, we get to the money.
How much money does doing all of this cost us? Again, I'll track this month by month,
breaking out the money that I spend on production and on inventory. All these cells are going
to need to be computed. While there's no one layout appropriate for every problem, spending
a bit of time thinking about how the pieces of your problem fit together can result in
a much more intuitive sheet. Okay, now let's put it in the math. The first part is production.
The relations are what we've talked about before for production and inventory. Take
the old inventory, add the new production, subtract the sales, and you've got the new
inventory. Notice that at the end of the month inventory for one month becomes the new inventory
for the following month. You can see that my made up numbers for the red cells are going
to give an infeasible solution since I have negative 80 shirts left over at the end of
month two. That's okay while we're creating the program. Solver will fix it. Let's move
on to resource usage. Unused cloth can be carried over from month to month, so it behaves
exactly like the inventory work we've just been doing. Add up what's on hand, subtract
up what we use, and that's the new inventory. To compute fabric used in this part, just
multiply how many items we make times the amount of cloth that item takes, which is
recorded in the parameters section, then add them up. That's cloth. And labor's actually
a bit easier. Every time, every item takes one unit of labor, so we just add up the total
items made each month. Those are our decision variables in the production section, remember?
Unused production capacity is lost, so we'll just enforce the labor restrictions with
limited resource constraints. Notice that I've shown the inequality constraints explicitly
in the spreadsheet to help the user understand the program requirements. So, all we have
left are costs. And again, this is pretty straightforward. Multiply the amount of each
item cost to produce by the number of the item produced to get production cost. Similarly,
take the monthly storage cost of an item times the number of items that are stored each month
to get the storage costs. The storage and production costs per item are in the parameters
section. Finally, we find the total monthly cost, then add all the total monthly costs
to get the total cost, and finally, put it in green to make it easy for the user to find
it. All that's left is to identify the information
to solve it and solve. We know that the objective cell, we know the objective cell and the decision
variable cells, but what constraints do we need? Well, we certainly need the limited resource
constraints on production capacity for each month as shown on the sheet. The only other
conditions we have to enforce is that the end of month inventory can never be negative,
not for pants, not for shirts, not for fabric. All the other relations, like the conservation
constraints on inventory and production, are already part of the spreadsheet. And here's
the answer when we run the program. Here is the optimal solution. The red cells show us
that the production levels that we should set for shirts and pants each month to reach
the minimum cost. Of course, the report shows a lot more than that, too, since we created
it to be easy to read. For example, we can see that it's never a good idea to store shirts.
We produce them just in time, but we do carry an inventory of pants at the end of months
one and two. From the cost section, we see that the optimal
cost is $37,700. And from the resource section, we see that the fabric supply is never a binding
constraint. We have extra fabric left over at the end of each month. So as a manager,
micromanaging fabric is not a good use of my time. On the other hand, we use all available
month labor in months two and three. So if you're going to service your equipment or
give vacations to workers, month one will be the time to do it.
There's both an art and a science to laying out a sheet like this, but I think you'll
agree that the final product is considerably easier to both use and interpret. I hope,
also hope you're beginning to get an idea of how much practical problem-solving power
lies within the domain of linear programs. Not every problem can be described by a linear
program, but there's a remarkable breadth of problems that can be approached in just
this way. And when one can, the simplex method, even if implemented by something as simple
as a spreadsheet, can allow us to find the best answer with surprising ease and speed.
Of course, to get good answers, we need good information. In the real world, we can sometimes
be handed surprises on some of these things. What if labor holds out for more money or
some of the cloth that we're supposed to receive is delayed? The usual answer is that
if the changes aren't too great, the answer that we've already found is left unchanged
or changes in a small and predictable way. Too big a change, though, and we may need
to rework the whole solution. In our next lecture, we'll look more closely at exactly
this issue, a way to anticipate if and how. The best answer changes when we find that
things aren't quite as we imagined they were, and how far we can push things before dramatic
changes occur. It's called sensitivity analysis, and it nicely augments the power of what we've
done so far. Among other things, it will allow us to determine not the market price
of a resource, but something considerably more important. How much that resource is
worth to you. See you then.
