Comedian Steve Morton had a monologue on Saturday Night Live that went like this.
You can be a millionaire and never pay taxes. You say, Steve, how can I be a millionaire and never pay taxes?
First, get a million dollars. Now, it might seem like I've been doing much of the same thing.
Maybe flipped around in the last two lectures. My proposal for how to solve complicated problems also has two steps.
First, translate the problem from English into mathematics, creating a linear program.
Second, solve the linear program. We've been doing great on the first step.
So far on the second part, the actual solving, we've got nothing. But we can fix this.
And that's what we're going to be doing in the next two lectures.
And it may surprise you to learn that really, we've already done the hard part. You've already got the million dollars.
The hard work is in writing the program, like we've been doing. The rest is remarkably mechanical.
I just love this about mathematics. Being able to crack a specific problem in life is always gratifying.
But with mathematics, you've got all these problem types that we know how to solve in generality.
Linear programs are one such type. Turn George Danzig's simplex method loose on a linear program, any linear program.
And it will find the optimal solution to it or tell you that it doesn't have an optimal solution.
And it will do so by a series of purely mechanical steps.
It isn't the only way to solve linear programs. There are faster solution procedures for some specialized problems.
Or for extremely large problems, there are some clever ways that are really quite surprising.
But all of them are algorithmic. That means that solving a linear program is just mechanical cranking the kind that a computer will do without complaint.
I'm going to show you how to set this up yourself using the spreadsheet in the next lecture.
But today, my focus is a bit different. The simplex method is an algebraic approach, and that's great.
But for most people, looking at algebra doesn't provide a lot of intuition about what's going on or why being linear is such a big deal.
So today, we're going to solve a linear program by using a graphical method by drawing a picture, if you like.
The approach has its limitations, but it has some important advantages, too. Limitations?
Yeah. The technique requires one dimension of space for each decision variable in the problem, so a one variable problem could be solved in one dimension, on a number line.
Two variables require two dimensions, both width and height, so you could solve them on a plane, like a piece of paper.
Three variables. Three dimensions. Height, width, and depth.
You can do a three variable problem if you're good at making perspective drawings, or you could have a piece of software do that for you.
But just like we saw in regression and data mining, once you have more than three variables, you're interacting the twilight zone.
You need more than three dimensions. The math is fine, but the visualization is pretty rough.
We've already seen that interesting examples of linear programming can involve thousands of variables, so why bother with a graphical approach?
Well, for the same reason that we did it for regression and data mining.
Doing so will provide a lot of insights into all linear programming problems.
More complicated problems may be harder to grasp in their entirety, but their solutions rely on the same observations and properties that the simple ones do.
So, let's take a look at a problem. This one's about personal financial investment.
Let's say that you've got $80,000 that you're going to invest in three different investment options.
Each investment pays you back after a four-year period.
The first option is moderate risk and moderate return.
It's two-thirds likely to give you a 40% return over the four years, but there's a one-third chance that instead you'll lose 20% of your investment in that time.
You might have noticed that even in this linear program, I'm sneaking in a bit of a stochastic element,
since our objective is going to be to maximize your average returns in this situation, also called your expected return.
We'll have a lot more to say about expected values later in the course, but the calculation here is easy.
Take each possible outcome, multiply it by the probability of occurring, and add the results.
So we get this. Two-thirds of 40% plus one-third of negative 20% is 20%.
Two-thirds of the time you gain 40%, one-third of the time you lose 20%, and so your expected or average return is 20%.
Okay, the second option, high risk, high return.
It's 50% likely to give you 150% return on investment. That's 250 bucks back for each 100 that you invest.
Unfortunately, it's also 50% likely to give you back only half of your money.
That means the expected return works out as one-half of 150 plus one-half of negative 50 is 50%.
Like I said, high risk, but high average return.
Okay, the final option, it's essentially no risk.
It has a 15% return total over the four years.
Your goal was to maximize your expected return, the average return, on the money that you invest.
To limit your downside risk, though, you want to be sure that you lose at most $10,000, even if the risky investments turn sour.
You also want a diversified portfolio, so you want no more than $40,000 in any single investment.
At first blush, this may sound like a three-variable problem. How much money do you put in each of the three investments?
We could do it that way, but since we know that the total investment is $80,000, as soon as we know how much we put in the first two investments,
we know automatically how much we put in the third. That is, the third variable is really an auxiliary variable.
So if we put M dollars in the medium risk investment and H dollars in the high risk one, then we put 80,000 minus M minus H in the risk-free one.
So we can get away with two variables. Okay, here's what the program looks like.
The objective just records the expected or average return on each of the three investments, 20% for the medium risk one, 50% for the high risk one,
and 15% for the risk-free one. We're going to try to maximize this expected return, and we get it by multiplying the expected rate of return for each investment
by the amount of money we put into it. The first three constraints just say that none of these three investments can have more than $40,000 put into it.
Remember that 80,000 minus M minus H is just the money that we dump into the risk-free investment.
Finally, constraint four is our Murphy's law constraint. In English, it says that the money that we lose on our investments, even if everything goes wrong, is at most $10,000.
In this worst case, we lose 20% of the medium risk money and 50% of the high risk money, and this loss is counterbalanced somewhat by what we make on the risk-free investment.
As usual, we also have the non-negativity constraints since we can't put a negative amount of dollars in any option.
In light of our work in the last two lectures, I hope you that this formulation looks sensible to you. If so, that's all we need for now.
While we use math to solve the problem graphically, we'll be talking in English as we interpret what we're doing. Before we start, I'm going to clean up the algebra a bit,
multiplying by multiplying out the parentheses and by gathering light terms.
I'm also going to rewrite the program in terms of thousands of dollars rather than dollars to get rid of all those pesky triple zeros at the end of everything.
Ah, there. It looks somewhat different at first glance, but mathematically, nothing's changed. For example, look at the original constraint three and its makeover.
The original's most easily read is saying that you can't put more than $40,000 in the risk-free investment. The new math is most easily read as saying that you have to put at least $40,000 in the other two investments combined.
But since we're starting with $80,000, these mean exactly the same thing.
OK, so how do we solve the problem? Well, we have two decision variables, m and h, and we'll give each one of them its own axis in the Cartesian plane.
Then we'll add some constraints, one at a time, and see what points in the plane satisfy each one. A point that satisfies every single constraint is going to be a feasible solution, a possible answer.
We'll be able to see easily exactly which points, which combinations of m and h, these are.
Then we're going to have to decide which of these possible answers is the best answer. For this problem, the one that gives the largest expected return.
We're going to come up with a rather clever way of doing this, and all of this is going to work because of the geometric character of linear functions.
Remember that linear relations between two variables graph is straight lines, hence linear. More generally, linear relations among a collection of variables graph is lines, or planes, or higher-dimensional equivalents called hyperplanes.
The crucial point about these objects is that they are flat. They don't wiggle, bend, kink, or jump.
So everything we draw on this problem is going to be a straight line, thanks to the linearity of our program.
OK, we start with the constraints to see what's possible. First, the easiest ones, the non-negativity constraints.
As you can see, they aren't much. I've drawn little arrows pointing from the two axes into the first quadrant.
The value of M, the money we put into the moderate-risk fund, can't be negative, and neither can H, the money we put into the high-risk fund.
So the best answer is going to be somewhere in the blue-shaded region, the points that satisfy these two requirements. It's usually called the first quadrant.
OK, now let's add constraints one and two. They're not much either. They just say that M and H can't be more than $40,000, 40 on our graph.
A vertical line through 40 on the M axis shows all the points where M is equal to 40, so we have to be on the left side of that vertical line.
The same idea for the second constraint. It says that H has to be less than or equal to 40, so we need to be on the horizontal line, H equals 40, or below it.
Remember, M is measuring our horizontal position on this graph, and H is measuring our vertical position.
Again, you can see the little arrows on the lines to show their good sides where the constraints are true.
The points that satisfy all the constraints so far are shown in the blue square.
We're on a roll. Let's go for constraint three. It's a little harder than the ones we've done so far, but not much.
Since we know that everything that graphs is a straight line, like everything does in a linear program, you can find the line with simple graphing techniques,
but let's do it logically. The constraint says that we have to have a total of at least $40,000 in the moderate-risk and high-risk investments together.
To find the borderline, push the constraint to its limits, make it exactly $40,000. How could we make such investments?
Well, one obvious way would be to put $40,000 in the moderate-risk investment and nothing in the high-risk one.
The second one would be to put $40,000 in the high-risk investment and nothing in the more moderate one.
On our graph, these solutions correspond to M equals 40, H equals 0 on the horizontal axis, and M equals 0, H equals 40 on the vertical axis.
And connecting them gives the line for constraint three, showing all of the other ways to split $40,000 between them.
Any point above this line gives more than $40,000 invested in those two together, as the constraint requires.
That's what the little arrow on constraint line three says. Any point on or above this diagonal line satisfies constraint three.
But if I want to satisfy all the constraints I've introduced so far, I'm restricted to points inside the triangle.
Constraints one and two only let me go so far.
In the same way, we can throw in constraint four, which says we lose at most $10,000 on all of this.
That limits how much you can put in the risky investments, especially the high-risk one, which is why constraint four's arrow points down and to the left.
You could plot this line using slope intercept form from basic algebra or a lot of other ways.
And if you're a bit rusty on that, don't worry about it.
Remember, our whole reason for doing this graphically is to strengthen your intuition.
Just get the feel for what's going on here.
So, that's all the constraints.
Now, look at the blue region.
The points in that region satisfy every one of our six constraints, the four non-trivial constraints, and the non-negativity constraints.
That's true of the points on the border of the blue region, too.
Conversely, any point outside this blue region violates at least one of the constraints.
It's on the wrong side of the line, and so it doesn't represent a possible answer to our question.
The blue region is called the feasible region because it contains precisely the points that satisfy every single one of the constraints.
If you like, it's the OK corral, since every point inside the region is OK for all the constraints.
OK.
So, we now know what answers are possible.
The question is, among those points in the feasible region, which is best?
Well, here's one way to get the answer.
I'm going to pick a point inside the feasible region and figure out what its expected return would be.
For example, suppose I pick this point here in the lower right corner of the triangle.
It has coordinates m equals 40, h equals 0, which means that I put 40k into the medium risk investment and 0 into the high risk investment.
The other 40k, then, will go into the risk-free investment.
What expected return do I get here?
Well, the 40k and the risk-free return is guaranteed to give me 15%, which is 6,000.
The 40k and the medium risk investment, on average, pays 20%, so it gives 8,000 on average.
That's a total of 14k in expected return over the two years.
Not bad.
I'm going to record this information in a rather bizarre way.
I'm going to lay my feasible region down on the tabletop, then I'll pull out a piece of extra long, uncooked spaghetti.
I will cut it to exactly 14 centimeters long to represent the $14,000 that we get from this point.
Then I'll take a drop of crazy glue.
Okay?
Put the dab right on that corner and glue the spaghetti right on top of that point.
I'm going to do this with every other point in the feasible region.
Pick the point, find the coordinates, plug them into the objective function, get an answer, cut a piece of spaghetti to that length, and glue it onto the point.
So when I'm done, I'm going to have a crop of spaghetti growing straight out of my feasible region field.
It's going to take me a really long time, but I'm going to do it anyway.
Why?
Because I have no social life, but also because what this field looks like is really important.
Because looking for the best expected return on the investment is what we're looking for, and that means finding the tallest piece of spaghetti in this field.
So here's the question.
I want you to imagine what you'd see when you looked over the tops of this field of spaghetti, because it seems to me that there are three possibilities.
The first one is that there'd be a patternless mess sticking up like a punk rocker's hair.
The second possibility is that the tops of the spaghetti would form a set of gently rolling hills.
And the third possibility is that the tops of the spaghetti would define a surface that's flat, not necessarily level, but flat, as if a samurai took out his sword and went,
What do you think?
I'll give you a hint.
This is a linear program, and that makes all the difference.
Remember, linear things graph is straight lines, planes, or hyperplanes, and the defining property of these things is that they're flat.
Our objective, expected return, is linear, and that means the tops of our spaghetti, or more properly, the three-dimensional graph in our expected returns, is going to be a flat plane.
Like this.
Tilted, maybe, but with no dips or bumps or kinks.
And knowing this is terrifically important, because, again, we're looking for the single tallest piece of spaghetti.
And for our problem here, the spaghetti tops form a flat triangle.
Now, I don't know how it's tilted yet, maybe like this, or this, or this.
But I hope that you see that no matter how it's tilted, one of the corners is going to be the highest point.
It's going to be as high or higher than everything else.
And that's the point we want.
What we've just discovered is called the extreme point theorem of linear programming.
A fancy name that just means that if there's an optimal point, it's going to be at one of the corners of the feasible region.
So we could just check all three corners and find the optimum.
But to get a feel of how we're going to proceed later in the course, I'm going to take a different approach.
Imagine I take my triangular field of spaghetti and flood it to a certain depth.
When the water level gets high enough, some of the stalks will be submerged, but others will still peek out above the surface.
Now, let's look at an aerial view, looking straight down.
We see the triangular field in the feasible region.
Cutting across it, the line separating the submerged part of the field from the part still peeking above the water, like this.
The flood line is usually called an objective function line, or OFL.
In our flooded field, all the points along it are right at the water's edge, so they all have the same height.
In terms of our original problem, this means that each point along the OFL gives the same expected revenue.
Every point still peeking out of the water has spaghetti higher than the water.
That gives it a higher expected return than the level represented by the water.
If you want a shot at higher expected return, send some more water into the picture.
The water level will rise, and the points that are still not submerged make you more money on average, like this.
You can probably see where this is going, and I bet you can tell me where the optimal point will be without any more help from me.
Before I confirm your answer, though, I'd like to point out a couple of little matters.
First, how did I know where to draw the flood line?
I just took the objective function and set it equal to whatever number pleased me.
The number specifies the expected return I'm looking for if you like, it's the depth of the water.
When you set the objective equal to a number, you get a linear equation, so it graphs as a straight line.
That's why the water's edge is a straight line in the aerial view.
From my original data, I decided, rather arbitrarily, to set the depth of the water at $18,500.
So my original dotted line was obtained by setting the objective function equal to $18.5, like this, and then graphing the result, which is a nice, linear function.
If you think of this as a map, you'll avoid another common mistake.
In our picture, the coastline between flooded and not flooded separates the water into a southwest land and the northeast land.
As the water rises, the coastline covers more and more land as it moves to the northeast.
That's because in this picture, the spaghetti toward the upper right is taller than the spaghetti toward the lower left.
But of course, it wouldn't have to be that way.
The Nile River flows north on a map, but that doesn't mean it flows uphill.
In general, when you draw a first objective function line, you need to take a moment to figure out which side of the coastline is water and which is dry land.
Dry land is not necessarily on the northeast.
Okay, you see where this is going, right?
To find the highest point, we just keep the water coming.
The coastline keeps creeping in, and eventually, only one point of our blue triangle is still above water, which is where the upper left corner of the triangle is in this case.
Where's that?
Well, you can see from the graph that somewhere around 15,000 in the moderate risks and about 25,000 in the high-risk investment, which would leave about $40,000 for the risk-free.
We can get precise values for the coordinates by taking the two constraint equations that meet at the optimal point and solving them simultaneously.
More basic algebra.
Solving constraints three and four, the two that meet simultaneously, gives us m equals 13 and a third and h equals 26 and two thirds.
That is, the best you can do is put 13,333 bucks and change into the moderate-risk option and 26,666 and change into the high-risk option.
And the remaining $40,000 goes into the risk-free option.
Doing so will give you an expected return of 0.2 times 13,333 plus 0.5 times 26,667 plus 0.15 times $40,000 or $22,000.
That's an expected return of $22,000 on your $80,000 investment, or a 27.5% return expected for the four years.
That's the unique best answer to this problem.
Any other solution either gives a lower return or breaks a constraint.
Okay, we've solved our first mathematical optimization problem, but I'd like to point out that we've gained some considerable insights in doing so.
Let's look at a few.
First, before you draw your first objective function line, the original flood line, you don't know where the optimal point is.
The optimal point wasn't the best because it was closest to the top edge of the picture.
Remember, this is an aerial view. Top is not necessarily up.
It was the best because it was the last point to be flooded, because the spaghetti was highest at that point.
People often think that for a maximized problem, the good answers are always far to the upper right as you can get,
or as far from the origin as you can get, and neither of these is true in general.
In our problem, the best answer was actually the one closest to the origin.
In fact, if you change this problem a little bit, you get a completely different optimal point.
Remember that the medium risk investment had a two-thirds chance of giving you 40% over the four years and a one-third chance of losing 20%.
If it were 95% likely to make money and only 5% likely to lose it, the feasible origin would remain unchanged,
but the slope of the objective function line would lessen.
The resulting picture would look like this.
Hey, look at the flood line now. Our old optimal solution is no longer optimal.
Now as the water creeps up from the lower left, the last point to be submerged
is the upper right corner of the feasible region at m equals 40,000, h equals 12.31,000.
But let's go back to our original problem and see what else we can see.
I've shown the original solution as a red star.
So here's a question. Suppose that you're actually a bit more adventurous in your investments than the picture suggests,
that the reason that you imposed the conditions that you did was because your spouse doesn't like risk.
Suppose that you felt that with a bit of persuasion, you could get him or her to relent on one of the four non-trivial constraints.
Which would you focus on?
Well, you probably can't say for sure, but you should be able to narrow it down to one of two.
Either the requirement for no more than $40,000 in the risk-free option, constraint three,
or the guaranteed loss of no more than 10,000, constraint four.
Why?
Because it's these two constraints, constraints three and four, that are keeping you from getting a better answer.
They're just barely satisfied.
Right now, you have exactly 40,000 bucks on the risk-free fund, and your maximum possible losses is exactly 10,000.
You can tell because the lines of these two constraints actually run through the optimal point.
We say that these are the binding constraints. They have no leftovers. They're pushed to their limits.
But if either of these constraints were eased, the effect on the graph would be that the constraint line would back up,
keeping it same slope, but making the feasible region larger.
And when this happened, the part of this larger feasible region would again appear above the floodline,
meaning that the new highest point would make you more average money than before.
Surprisingly, you actually want to invest more in the risk-free fund, if you were allowed to do so.
Constraint three would move to the lower left, expanding the feasible region, and giving you a better optimal expected return.
This is because more money in the risk-free investment frees you up to put more money in the high-risk investment, too.
This change might be an easier sell to your spouse than raising your maximum loss limit.
On the other hand, the constraint that you can't put more than 40,000 in the moderate risk investment, constraint two, is non-binding.
It doesn't pass through the optimal point.
The reason you're making the investments you are has nothing to do with that constraint.
You want to invest less than $40,000 in the moderate risk fund.
And look at constraint one.
Here the situation is even more extreme.
You'll notice the constraint line one doesn't even form a side of the feasible region.
What that means is, if you satisfy the other constraints in the program, you automatically satisfy number one.
Saying it another way, you couldn't put $40,000 in the high-risk fund if you tried.
You'd always break a maximum loss constraint.
A constraint like this is called redundant.
In this problem, the non-negativity constraints are redundant, too.
Take them away, and the feasible region doesn't change.
You can safely ignore redundant constraints, unless the other constraints in the program change.
In fact, I actually left one constraint out of our original formulation that you can't invest negative money in the low-risk fund.
But no harm done, it's a redundant constraint.
Why?
Well, there's $80,000 to be invested, and whatever doesn't go into the moderate or high-risk investments has dumped into the low-risk one.
But with constraints that say that at most $40,000 goes into each of those risky funds, it's impossible to make the low-risk fund investment negative.
Just remember, binding constraints are satisfied with none to spare.
And it's the binding constraints that are going to limit the quality of your solution.
Redundant constraints are the least of your worries.
They add no additional requirements at all.
Okay, I want to finish up here today with three other matters that arise in linear programs.
We've worked on an example which had only one optimal solution, a unique optimal solution.
But there are three other things that can happen when you tackle linear programs.
A program may be infeasible, it may have alternative optima, or it may be unbounded.
An infeasible program is one that doesn't have a feasible region.
The constraints are mutually contradictory.
For example, suppose I told you that you had to spend at least $10 on food and at least $5 on beverage, but your total bill couldn't be more than $11.
Well, you can do any two of these three, but all three of them together put you in an impossible situation.
Infeasible programs don't have optimal answers.
They don't have any feasible answers, so they don't have the best one.
In real life, you can get an infeasible problem.
If you get one, you're going to need to relax or remove some of the constraints, or you are doomed.
The second possibility is alternative optima, and that happens when the OFL is tilted it just the right way,
so that the optimal objective function line passes through not a single point,
but an entire side of the feasible region, like this.
Here the optimal OFL would align perfectly with constraint 4,
and so all of the feasible points on constraint line 4, the entire top of the triangle, would all be optimal points.
This would happen in our problem if the moderate risk investment had just under 90% chance of making money.
Another example, easier to see, would be a restaurant that has 5 waiters and waitresses available,
5 waiters, 5 waitresses, but needs only 4 servers.
Assuming men and women are equally good at the jobs and are paid equally,
then using 4 men, or 4 women, or 3 men and 1 woman, and so on, are all equally good answers.
It's nice to have alternative optima, since it gives you some flexibility in the optimal solution.
Okay, the last possibility is that the program is unbounded.
This is kind of the opposite of the situation to infeasible programs.
Infeasible programs have no optimal solutions because the constraints are too binding.
Unbounded programs have no optimal solutions because the constraints aren't restrictive enough.
No matter what feasible answer you find to an unbounded program,
you can always find another one that's even better.
If you got rid of constraints 2, 3, and 4 in our program,
the only constraint left, other than non-negativity, would say that you can't put more than $40,000 in the high-risk fund.
But you could put trillions and trillions into the risk-free fund and make as much money as you like.
To have an unbounded program, you have to have an unbounded feasible region.
That is, the feasible region goes on forever and ever in some direction.
But that's not enough.
If I tell you that the only rule is that X has to be at least zero,
you have an unbounded feasible region, the entire upper half of the number line.
The problem Maximize X is unbounded, since you can always pick a bigger value.
But with the same feasible region, Minimize X isn't unbounded.
The best answer is X equals zero.
All of those bigger numbers are still available at Infinitum.
But for this problem, Minimize X, you don't want to use them.
In brief, if you have an OFL moving in the direction that makes the objective get better,
and if moving it that way never leaves the feasible region, then you've got an unbounded program.
In real life, an unbounded program almost always means you've missed something.
Real life quantities can't approach infinity.
If you think about what stops you from making your decision variables infinitely big,
you'll probably find a constraint you forgot to add to the program.
Okay, we've seen the ideas behind how to find an optimal solution in a linear program,
and done so in the relatively simple case of two decision variables.
Along the way, we've come across some key ideas.
Feasible, infeasible, bounded, unbounded, binding, non-binding, redundant, non-redundant.
But it was also a lot of hands-on labor.
And what do you do when you have more than two variables?
The answer is just what we're going to do next time.
You put your program in a computer, and you use the power of George Danzig's Simplix method
to crank out the information that you need.
