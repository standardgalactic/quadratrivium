So you can imagine then in a space of functions, you can ask the question,
what are polynomials like in there? Are polynomials the very occasional straight
piece of spaghetti that hasn't cooked yet? Are they wiggly and windy and not at all like other
pieces of spaghetti? This question, not asked or answered by Taylor, showed the following,
that polynomials are dense in the space of continuous functions. The continuous function
is one that if you think about just the graph of it, if you draw it with your pencil, never leaving
the paper, and this was most functions you probably drew, then that's a continuous function.
Continuous functions can have sharp points, they can have flat areas, they can go up and down.
So if you imagine those as all possible things like that as being your giant pot of spaghetti,
what has been proven is that polynomials can get arbitrarily close to any of those.
Let me rephrase that. Once you have a distance that you're concerned about,
one one thousandth, then you can find a polynomial as close as you like within that one one thousandth
window. Which is to say, no matter what piece of spaghetti you're interested in, there is a
polynomial piece of spaghetti that is arbitrarily close to it. So you can, by multiplying, adding,
subtracting, and a little bit of division, you can find something that can be done with pencil and
paper. If it can be done with pencil and paper, it can be done on a computer. In some sense,
all that can be done on computers is what we can do with pencil and paper.
So again, this is what essentially what calculators and computers do when you are
a scientist or engineer or economist or anybody starts pushing buttons or typing in a function.
It pulls up an appropriate polynomial approximation that will compute the number you're interested
in with good accuracy. Then it, very very quickly, billions of operations a second will do a bunch
of addition, subtraction, multiplication, throw all those numbers together, and on the screen
you'll get the number you wanted, and it'll be as accurate as you need. So let's talk a bit more
about computing. Some of these ideas will come up during the discussion of cryptography, so we'll
get an early jump on them. For computers, there are bits of information. A bit of information is
like one idea. It's either a zero or a one. It's called binary. Now why, why do computers use binary?
They don't need to, and perhaps it's because we have men and women, good and evil, yin and yang.
It'd be nice if there was a poetic reason like this for why we go with binary numbers,
but unfortunately it's more prosaic of on off or up down. Early computers had up down switches
or on off or charged or uncharged things. That's in a nutshell how they work today.
Now usually we use the digits zero, one, two, three, four, five, six, seven, eight, nine.
We don't just use a zero and one. It's a fair question to ask. Are two digits enough? And the
answer is yes. It's called base two, and this is how it works. Now there are formulas to convert
back and forth, but it might be best just to think of it as a code book. Let's run through the first
few to see how you might do it. Zero equals zero. That was easy. The next one is one equals one.
That's easy two. Two though, we only have a zero and one. And if we want to represent the number two,
we can't call it two. We have to call it something different. So we call two and binary one zero in
our code book. Then we call three one one. So we've now used all single digits and all double digits
with zeros and ones. So when it comes to four, we have to expand to three digits. Four becomes one
zero zero. Five becomes one zero one. Six is one one zero. Seven is one one one. In the pattern that's
developing, we've now used all the zeros and ones up to three digits. So we would have to expand again
if we kept going. But I hope that the pattern is clear, at least in the sense that no matter what
number I chose, five billion three hundred and twelve thousand four hundred and seventy one,
that I could come up with a unique long string of zeros and ones that pointed exactly to that
number and no other. But we don't even have to go that high. We only want eight bits. Eight bits
is called a byte. So that looks like all possible things from zero zero zero zero zero zero to one
one one one one one one one. Now, there's all these different combinations of zeros and ones.
And it's an interesting mathematical question. How many different combinations of zeros and ones
are there if we're willing to look at eight? Each slot, I think of them as slots or boxes. We have
eight boxes. Each box might have something in it or it might be empty. Then the question is,
when I look at those eight boxes, how many different ways are there of filling and keeping
them empty? Since each box can have something in it or not, each box has two possibilities.
I have eight boxes. Each possibility is independent of the others. So those possibilities multiply.
So it's two times two times two eight times. It's two to the eighth with this 256.
