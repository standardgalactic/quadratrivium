1
00:00:00,000 --> 00:00:06,000
Hello again everyone and welcome back to Linode. In today's video what I'm going

2
00:00:06,000 --> 00:00:09,880
to do is teach you guys some command line tricks that I've picked up over the

3
00:00:09,880 --> 00:00:14,280
years, some tricks that I wish I knew earlier in my career, and these are going

4
00:00:14,280 --> 00:00:18,360
to be some command line tricks that'll save you time, maybe help you work more

5
00:00:18,360 --> 00:00:23,000
efficiently, and some are just plain fun. So let's go ahead and get into my

6
00:00:23,000 --> 00:00:27,520
favorite command line tricks for the Linux terminal.

7
00:00:37,480 --> 00:00:42,720
Alright, so here I am on my laptop and I'm going to go over some of my favorite

8
00:00:42,720 --> 00:00:47,200
tips and tricks right now. Now I'm going to go over these in no particular order.

9
00:00:47,200 --> 00:00:50,640
So just stick with me and hopefully you'll find at least some of these

10
00:00:50,640 --> 00:00:54,320
helpful, maybe you'll add these to your daily workflow, that would be really cool.

11
00:00:54,320 --> 00:00:58,880
Let's go ahead and get started. Now what I'm going to do is start off with a

12
00:00:58,880 --> 00:01:03,440
really easy one. So I'm going to go into the Etsy directory, I'm going to change

13
00:01:03,440 --> 00:01:08,360
directory into that directory, and now that's my current working directory, but

14
00:01:08,360 --> 00:01:12,440
what if I want to go back to the previous directory that I was just in? Well

15
00:01:12,440 --> 00:01:17,280
to do that I can actually type cd and then dash, and that's it. I'm just going

16
00:01:17,320 --> 00:01:21,840
to type cd dash just like that, I'll press enter, and I'm back to my home

17
00:01:21,840 --> 00:01:26,280
directory. Now of course you could go back to your home directory by typing cd

18
00:01:26,280 --> 00:01:31,040
and then tilde just like this, that does essentially the same thing, but the

19
00:01:31,040 --> 00:01:34,920
difference with cd dash is that it's not specific to the home directory at all.

20
00:01:34,920 --> 00:01:41,320
So for example if I go into the Etsy directory, then after that let's just

21
00:01:41,320 --> 00:01:47,200
say I go into a different directory, cd dash takes me back to the previous

22
00:01:47,200 --> 00:01:52,080
directory like I mentioned, whereas cd and then tilde takes you specifically to

23
00:01:52,080 --> 00:01:57,040
your home directory, and I'm sure a lot of people know about cd tilde, but I guess

24
00:01:57,040 --> 00:02:02,760
if you didn't already know that then well now you do. So what I'm going to do

25
00:02:02,760 --> 00:02:08,080
right now is just clear my screen, so I'll type clear, and when I press enter it's

26
00:02:08,080 --> 00:02:13,640
going to clear the screen. Actually I'm not going to press enter, but I am going

27
00:02:13,640 --> 00:02:19,280
to clear the screen, but wait a minute how did I do that? So if you have output

28
00:02:19,280 --> 00:02:23,960
on your terminal and then you hold control and press L, that actually clears

29
00:02:23,960 --> 00:02:29,560
your screen, it's that easy. And yeah you could type clear to clear your screen

30
00:02:29,560 --> 00:02:33,440
that does work, but when you do that you're using quite a few more keys than

31
00:02:33,440 --> 00:02:37,000
when you just simply hold control and press L, which I find to be the easiest

32
00:02:37,000 --> 00:02:42,160
way to do it. So again you have output on the screen, just hold control, press L,

33
00:02:42,160 --> 00:02:48,280
and that's it. You've cleared the screen. Now the screen isn't actually completely

34
00:02:48,280 --> 00:02:54,480
clear though, so for example if I use my mouse and I just scroll up a bit, you

35
00:02:54,480 --> 00:02:58,240
can see that the output that I had is still there, so essentially what control

36
00:02:58,240 --> 00:03:01,800
L is going to do is just move the command prompt back to the top of the

37
00:03:01,800 --> 00:03:07,040
screen giving you all the space back, but the history is actually still there

38
00:03:07,040 --> 00:03:12,480
if you use your mouse wheel to scroll up. Now alternatively you could also type

39
00:03:12,480 --> 00:03:19,520
reset as well, and that's actually going to reset your shell. And I'm scrolling the

40
00:03:19,520 --> 00:03:25,360
mouse wheel, but I'm not able to scroll. Why? Well I reset everything, so reset is

41
00:03:25,360 --> 00:03:28,760
kind of like clear on steroids. It actually empties out everything and

42
00:03:29,200 --> 00:03:33,800
legitimately clears your screen in every sense of the word. Now for me it's just

43
00:03:33,800 --> 00:03:37,960
muscle memory to hold control and press L, so that's what I do. I don't use reset

44
00:03:37,960 --> 00:03:41,320
all that often unless there's something wrong with my shell session, maybe

45
00:03:41,320 --> 00:03:45,360
something is enacting right. If that's the case I might type reset, but most of

46
00:03:45,360 --> 00:03:49,520
the time I'll hold control and press L, that's what I'll do. Now earlier in the

47
00:03:49,520 --> 00:03:54,200
video I showed you CD dash to go back to the previous directory, but what I'm

48
00:03:54,200 --> 00:03:57,600
going to show you right now is a different way to do the same thing, but

49
00:03:57,640 --> 00:04:01,920
it's a little bit more flexible. What I'll do right now is change directory into

50
00:04:01,920 --> 00:04:07,240
the slash var directory, but I'm going to go about it a different way. Instead of

51
00:04:07,240 --> 00:04:12,720
typing CD I'm going to type push D, and then the directory I want to go into,

52
00:04:12,720 --> 00:04:19,280
and you can see that I am now in the slash var directory, and that's pretty

53
00:04:19,280 --> 00:04:23,320
cool. So what I'll do just to illustrate the point is just change directory a few

54
00:04:23,320 --> 00:04:30,360
more times. Now I'm in my home directory, and now I'll just go into my dot

55
00:04:30,360 --> 00:04:34,360
config directory. So I've changed directories a few times here, it doesn't

56
00:04:34,360 --> 00:04:37,720
really matter which directories you change into, but what I'm going to do

57
00:04:37,720 --> 00:04:44,600
right now is type pop D, and I'm back to Etsy. When you type push D and then give

58
00:04:44,600 --> 00:04:49,160
it a directory, you'll change into that directory, but it's not quite that

59
00:04:49,160 --> 00:04:53,640
simple. When you change directory into the new directory, the previous directory

60
00:04:53,640 --> 00:04:59,600
is added to the stack, and here you can actually see the stack. I'm going into

61
00:04:59,600 --> 00:05:05,120
slash var from slash Etsy. The push D and pop D commands are actually more

62
00:05:05,120 --> 00:05:09,200
involved than this, there's more you can do with it, but for right now what I

63
00:05:09,200 --> 00:05:13,760
recommend that you remember is how to type push D and then pop D, and push D

64
00:05:13,760 --> 00:05:17,800
remembers the directory that you were in, and then pop D will take you back to

65
00:05:17,800 --> 00:05:22,400
that directory, even if it's not the most recent directory that you were in. If

66
00:05:22,400 --> 00:05:27,240
you recall, CD dash takes you back to the previous directory, but push D gives you

67
00:05:27,240 --> 00:05:31,880
the ability to remember a specific directory, then pop D puts you back into

68
00:05:31,880 --> 00:05:36,080
that directory anytime you want to go back there. So if you plan on doing some

69
00:05:36,080 --> 00:05:39,440
file system navigation, and then at the end of that you want to return to a

70
00:05:39,440 --> 00:05:46,000
specific directory, that's when push D and pop D helps the most. So now I'm back

71
00:05:46,040 --> 00:05:48,920
into my home directory, let's go ahead and continue and check out some more

72
00:05:48,920 --> 00:05:53,520
tricks. The next trick I'm not going to spend too much time on because it's one

73
00:05:53,520 --> 00:05:57,640
of those things that I could actually explain in greater detail, but I've

74
00:05:57,640 --> 00:06:00,760
already done that, I have a whole video about background tasks, so I'm going to

75
00:06:00,760 --> 00:06:05,000
summarize it here, but I'll leave a card right about here if you want to check

76
00:06:05,000 --> 00:06:09,840
out my background process video and learn even more about how this works. Now

77
00:06:09,840 --> 00:06:14,400
let's say for example I have a file open, I'm going to use Vim for some reason

78
00:06:14,400 --> 00:06:17,880
this doesn't always work with nano, I don't know why, but it really shouldn't

79
00:06:17,880 --> 00:06:23,160
matter if it's a text editor or htop or whatever program, basically any program

80
00:06:23,160 --> 00:06:27,560
that is in the front, you know something that takes you away from the command line

81
00:06:27,560 --> 00:06:31,080
and what if you want to return to the command line but you don't want to close

82
00:06:31,080 --> 00:06:35,440
the program you were in. So what I'm going to do is just open up a random file,

83
00:06:35,440 --> 00:06:41,640
I'm going to choose the etsy ssh sshd config file, and let's just say I'm in

84
00:06:41,680 --> 00:06:46,760
this file right here and I'm changing some configuration options, but I need to

85
00:06:46,760 --> 00:06:49,720
work on something else real quick because something came up and I need to go do

86
00:06:49,720 --> 00:06:54,200
something else, and let's say I've made a bunch of changes to this file, I'm not

87
00:06:54,200 --> 00:06:57,680
ready to save the file yet because I'm not finished with it, but I also don't

88
00:06:57,680 --> 00:07:02,480
want to lose it either, so how do I get back to the terminal without actually

89
00:07:02,480 --> 00:07:07,160
saving the file and also without opening up another terminal window, but what we

90
00:07:07,160 --> 00:07:12,360
can do is we'll control the press Z and that effectively minimizes that particular

91
00:07:12,360 --> 00:07:16,360
program to the background. Now it's not quite the same thing as minimizing a

92
00:07:16,360 --> 00:07:21,000
program in a desktop environment or a graphical user interface, but we're

93
00:07:21,000 --> 00:07:24,360
going to pretend it's essentially the same thing because that's the value that

94
00:07:24,360 --> 00:07:28,080
I see here, you have a program running, you don't want to lose it, you don't want

95
00:07:28,080 --> 00:07:32,320
to lose your work, and you do want to return to it, but you also don't want to

96
00:07:32,320 --> 00:07:35,680
open up a terminal just to get back to the command line, this is a great way to

97
00:07:35,680 --> 00:07:40,200
do it. So now you know how to send things to the background, but how do you get it

98
00:07:40,200 --> 00:07:46,080
back? Well that's easy, you type FG for foreground, and then it comes back, it's

99
00:07:46,080 --> 00:07:49,880
that simple, you hold control Z to send something to the background, something

100
00:07:49,880 --> 00:07:55,840
that's in the front, and then FG, and that'll bring it back to the foreground.

101
00:07:55,840 --> 00:08:01,400
So I'll go ahead and exit this, and like I mentioned it doesn't really matter if

102
00:08:01,400 --> 00:08:06,240
it's a text editor, another example of this is Htop, and this is a really cool

103
00:08:06,240 --> 00:08:10,880
utility for monitoring system resources, but the same thing applies here, I can

104
00:08:10,880 --> 00:08:15,760
hold control and press Z, it's sent to the background, FG, it's now in the

105
00:08:15,760 --> 00:08:19,920
foreground. If you want to find out more about how this works then check out the

106
00:08:19,920 --> 00:08:23,680
video that I mentioned, but at the very least being able to send something to

107
00:08:23,680 --> 00:08:27,640
the background and then bring it back to the foreground will probably save you a

108
00:08:27,640 --> 00:08:32,380
lot of time. Just keep in mind that if you close the shell or log out, you will

109
00:08:32,380 --> 00:08:36,200
lose whatever is running in the background, so just make sure you remember

110
00:08:36,200 --> 00:08:39,480
that when you send something to the background, you should bring it back to

111
00:08:39,480 --> 00:08:43,960
the foreground, finish what you're doing before you close your terminal window.

112
00:08:43,960 --> 00:08:48,000
Alright so it's time to move on to the next trick, and what I'm going to do

113
00:08:48,000 --> 00:08:52,320
first is just update my package repository index, so I'll type apt update

114
00:08:52,320 --> 00:08:59,400
just like that, and I'll press enter. Oh wait, I forgot to use sudo. You know as

115
00:08:59,400 --> 00:09:02,960
long as I've been using Linux you would think that I'd remember that by now, but

116
00:09:02,960 --> 00:09:07,800
even after two decades I'm constantly forgetting to run sudo. Of course I could

117
00:09:07,800 --> 00:09:11,480
just run sudo apt update, I mean it doesn't take that long to type that

118
00:09:11,480 --> 00:09:17,400
command, but that's not what I'm going to do. What I'm going to do instead is type

119
00:09:17,400 --> 00:09:21,600
sudo and then two exclamation marks just like this, and then I'll press enter.

120
00:09:22,600 --> 00:09:28,800
And it worked, now check this out. When you run sudo exclamation mark

121
00:09:28,800 --> 00:09:33,480
exclamation mark, the two exclamation marks actually refer to the previous

122
00:09:33,480 --> 00:09:39,600
command that you just ran. So by running sudo exclamation mark exclamation mark,

123
00:09:39,600 --> 00:09:43,720
I'm telling the command shell to repeat the most recent command, but put sudo in

124
00:09:43,720 --> 00:09:47,880
front of it. So that way I don't have to worry about retyping the entire command

125
00:09:47,880 --> 00:09:52,000
just to run it as sudo. This is a great way to repeat the last command, but make

126
00:09:52,000 --> 00:09:56,880
sure that you have the proper privileges and run it with sudo. And again, I find

127
00:09:56,880 --> 00:10:00,760
myself forgetting to use sudo quite often, so this trick right here is

128
00:10:00,760 --> 00:10:06,080
something I use at least once a week. Now another trick is going back through the

129
00:10:06,080 --> 00:10:10,600
command history by holding control and pressing R. Now this is kind of confusing

130
00:10:10,600 --> 00:10:14,440
to explain, so I think showing you will make more sense. So I'm going to hold

131
00:10:14,440 --> 00:10:19,200
control, I'll press R, and now the command prompt has changed to a search

132
00:10:19,200 --> 00:10:24,280
field here, so what do I do here? Well what I do is I start typing part of a

133
00:10:24,280 --> 00:10:28,000
command that I remember, part of any command that I would have ran in the

134
00:10:28,000 --> 00:10:33,160
past. Maybe I want to bring back a long command that I ran in the past, but I

135
00:10:33,160 --> 00:10:36,120
don't remember the syntax and I just don't want to go through the history

136
00:10:36,120 --> 00:10:40,280
file to find it. I'll just type what I know of the command, so we just ran

137
00:10:40,440 --> 00:10:46,200
apt update, for example. Now notice I just typed apt and it's already showing

138
00:10:46,200 --> 00:10:52,520
sudo apt update. If I hold control and press R again, it'll go to the next

139
00:10:52,520 --> 00:10:57,040
thing in the search history that meets that criteria, and control R will just

140
00:10:57,040 --> 00:11:01,120
keep going back through the command history, and then once I find the command

141
00:11:01,120 --> 00:11:06,440
that I was looking for, I rerun it by simply pressing enter. And the sudo

142
00:11:06,440 --> 00:11:11,080
apt install htop command, that's what I ran off-camera to install htop on this

143
00:11:11,080 --> 00:11:20,880
computer. So there's popd, we ran that one, we also ran pushd, any command that

144
00:11:20,880 --> 00:11:26,000
I've ran in the past, I could easily run it again with this trick. I'll hold control

145
00:11:26,000 --> 00:11:30,280
and press C to break out of this, and what I'm going to do is show you yet

146
00:11:30,280 --> 00:11:34,040
another way to run previously run commands that I think is even better.

147
00:11:35,000 --> 00:11:40,840
What I'm going to do right now is run history, just like this, and we see all

148
00:11:40,840 --> 00:11:45,320
of my command history, which is very useful in and of itself, especially if

149
00:11:45,320 --> 00:11:49,000
you're a new Linux administrator for a company. If you're working with a server

150
00:11:49,000 --> 00:11:53,720
that has a particular problem, maybe it's a problem that's happened in the past,

151
00:11:53,720 --> 00:11:56,840
and as a new Linux administrator, it's always a good idea to check the command

152
00:11:56,840 --> 00:12:00,400
history because you could find out what people before you have done in similar

153
00:12:00,720 --> 00:12:05,840
situations. And like I said, this is a cool trick in and of itself, but that's

154
00:12:05,840 --> 00:12:10,800
not actually the trick that I want to show you. What I'm going to do is show

155
00:12:10,800 --> 00:12:15,240
you how to rerun any command from your history. Notice that there's a number on

156
00:12:15,240 --> 00:12:21,320
the left side of each of these commands. So for example, I typed this command

157
00:12:21,320 --> 00:12:25,440
right here off-camera to see whether or not htop was installed on this computer.

158
00:12:25,440 --> 00:12:30,720
It wasn't, so then after that, I installed it. But what if I want to run this

159
00:12:30,720 --> 00:12:36,400
command right here yet again? I could just right click and copy it, and then I

160
00:12:36,400 --> 00:12:40,080
could right click and paste, but that's not what I'm going to do. What I'm going

161
00:12:40,080 --> 00:12:44,440
to do instead is refer to the command by its number, but first I'll type an

162
00:12:44,440 --> 00:12:48,320
exclamation mark, and then directly after that, I'll type the number, no space or

163
00:12:48,320 --> 00:12:52,880
anything like that. And as Linux people, we often refer to the exclamation mark

164
00:12:52,880 --> 00:13:01,000
as bang. So essentially, I'm typing bang 102. And what happens is that it

165
00:13:01,000 --> 00:13:04,960
actually shows me the command that's associated with that number, and then it

166
00:13:04,960 --> 00:13:10,520
runs it. So right there, I was editing the SSH config file. So I could do that

167
00:13:10,520 --> 00:13:14,720
again by typing bang and then the number just like before. And now I'm back into

168
00:13:14,720 --> 00:13:21,080
that config file. I think this is a very useful way to use the history, but I'm

169
00:13:21,120 --> 00:13:25,240
going to make it even better. One thing that I think is missing here is the

170
00:13:25,240 --> 00:13:28,640
date and time. I feel like it's really helpful to have the date and time that

171
00:13:28,640 --> 00:13:33,400
every command was run in. So that way, if I'm looking for a specific command during

172
00:13:33,400 --> 00:13:38,320
a specific time period, I could find it and have a better idea about the actual

173
00:13:38,320 --> 00:13:42,960
command history and when the commands are executed. But the problem is we don't

174
00:13:42,960 --> 00:13:49,480
have that information here. So how do we get it? For that, we have a very special

175
00:13:49,480 --> 00:13:56,520
variable in its hist time format. And what I'm going to do is set this equal to

176
00:13:56,520 --> 00:14:05,040
a very specific string. I'm going to type percent capital Y dash percent lower

177
00:14:05,040 --> 00:14:14,080
case M dash percent lower case D space percent uppercase T and then another

178
00:14:14,080 --> 00:14:19,080
space and adding another space here is really important. I'll explain why in a

179
00:14:19,080 --> 00:14:23,960
moment, but anyway, I'll press enter. And now that we've done that, let's run the

180
00:14:23,960 --> 00:14:30,080
history command again. Now we have a date next to each of the commands right here.

181
00:14:30,080 --> 00:14:33,200
Depending on how your shell is configured, it might actually show the

182
00:14:33,200 --> 00:14:36,960
same date for everything because maybe a date wasn't recorded when it was first

183
00:14:36,960 --> 00:14:41,000
created. Different distributions set this up differently. So this may or may not be

184
00:14:41,000 --> 00:14:45,120
a problem for you, but at least going forward, it's going to have the correct

185
00:14:45,120 --> 00:14:49,000
date and time for every command. So if you're looking for a specific command

186
00:14:49,040 --> 00:14:54,520
from a specific time period, you could just scroll through your history. And as

187
00:14:54,520 --> 00:14:59,120
you can see, it shows that information here. Now one problem with this, though,

188
00:14:59,120 --> 00:15:02,960
is that when you close your shell, then the hist time format variable is going to

189
00:15:02,960 --> 00:15:07,640
go away. We set the variable here in this session. So even if I opened up a new

190
00:15:07,640 --> 00:15:11,560
terminal window, it's not going to apply to that particular terminal window. It's

191
00:15:11,560 --> 00:15:15,880
only for this session. So what I want to do is actually make this permanent. And

192
00:15:15,880 --> 00:15:19,640
the way to do that is we just open up a special file with an editor. We can use

193
00:15:19,640 --> 00:15:26,440
nano then it doesn't matter. And what we're going to do is open up the dot bash

194
00:15:26,440 --> 00:15:32,880
RC file in our home directory. And right here we have hist control. And that's

195
00:15:32,880 --> 00:15:36,520
actually another trick that wasn't on my list, but it may as well have been

196
00:15:37,080 --> 00:15:41,000
his control being set to ignore both means it's going to ignore lines that

197
00:15:41,000 --> 00:15:44,680
include a space at the beginning. So if you want to type a command and you don't

198
00:15:44,680 --> 00:15:48,440
want it to show up in the history, if this is set, you could type a space in

199
00:15:48,440 --> 00:15:52,000
front of the command and it won't show in the history. So if you are running a

200
00:15:52,000 --> 00:15:55,440
command that contains something sensitive, it might be a great way to hide

201
00:15:55,440 --> 00:15:59,680
that from the history. But that's not what we're here for. What I'm going to do

202
00:15:59,680 --> 00:16:03,560
instead is add the hist time format variable right here in the bash RC

203
00:16:03,560 --> 00:16:07,640
file. So that way every single shell I open will automatically have the setting.

204
00:16:14,680 --> 00:16:29,360
Just like that. So hold control and press O to save the file, enter to confirm

205
00:16:29,360 --> 00:16:35,560
it, control X to exit out. So from this point forward, every terminal window

206
00:16:35,560 --> 00:16:39,360
that I open should have the hist time format variable set giving me the date

207
00:16:39,360 --> 00:16:44,080
and time for each command. Now earlier I mentioned to not forget to type the

208
00:16:44,080 --> 00:16:47,760
space at the end when you're setting the variable. And the reason for that is

209
00:16:47,760 --> 00:16:51,480
because if you don't, then there's not going to be a space in between the date

210
00:16:51,480 --> 00:16:55,840
and time in the command. So this space right here would not be present. Because

211
00:16:55,840 --> 00:17:00,240
you added a space at the end of that string, it's putting that space right

212
00:17:00,240 --> 00:17:04,240
here in between the date and the time and the command. So if you don't include

213
00:17:04,240 --> 00:17:08,680
that, things get, you know, confusing. Now another command that I want to show

214
00:17:08,680 --> 00:17:14,200
you guys is completely useless. I mean, it's cool, but it gives you no practical

215
00:17:14,200 --> 00:17:18,000
capabilities whatsoever. It doesn't enhance your workflow. So technically it

216
00:17:18,000 --> 00:17:22,240
doesn't even belong in this video, but I figured it might be fun to show you. And

217
00:17:22,240 --> 00:17:26,680
that command is C matrix. You have to have this package installed. Most of the

218
00:17:26,680 --> 00:17:30,120
time this will not be installed. So you could use your distributions package

219
00:17:30,120 --> 00:17:34,080
manager to install this package. So I'll press enter and you'll see immediately

220
00:17:34,080 --> 00:17:41,360
what it does. Does that look familiar? If you recall, in the background, I often

221
00:17:41,360 --> 00:17:45,640
have a laptop that has this as the screensaver. But it's not actually a

222
00:17:45,640 --> 00:17:51,080
screensaver. It's just a full screen terminal window that's running C matrix. I

223
00:17:51,080 --> 00:17:54,040
just think it looks really cool in the background. Again, it has no practical

224
00:17:54,040 --> 00:17:59,560
use whatsoever. It's not going to enhance your productivity, but it's cool. Now,

225
00:17:59,560 --> 00:18:05,800
as an aside, what I often do is press F11 to make the terminal full screen. And

226
00:18:05,800 --> 00:18:14,320
that makes it look even cooler. But F11 is not actually specific to C matrix.

227
00:18:15,000 --> 00:18:20,040
That's a trick in and of itself. So I'll press F11 again. And that undoes the

228
00:18:20,040 --> 00:18:25,040
full screen. And then to get out a C matrix, I hold control and press C. And

229
00:18:25,040 --> 00:18:30,960
now I've broken out a C matrix. So again, I'm going to press F11. And notice

230
00:18:30,960 --> 00:18:36,880
that the terminal is now full screen. So F11 is a terminal shortcut and it's

231
00:18:36,880 --> 00:18:41,360
recognized by quite a few desktop terminal emulators. There's some that

232
00:18:41,360 --> 00:18:45,840
don't understand F11, but most do. And that makes it full screen. And I mean

233
00:18:45,880 --> 00:18:50,160
full screen to the point that you won't see any window controls at all. You

234
00:18:50,160 --> 00:18:54,760
won't see your panel. It's literally taking up your entire screen. So I'll

235
00:18:54,800 --> 00:18:58,640
often do this if I want my terminal to basically cover up everything else if I

236
00:18:58,640 --> 00:19:02,000
don't want any distractions. And I just want to work on something without

237
00:19:02,000 --> 00:19:06,400
seeing anything in my desktop environment. I don't want to see email alerts. I

238
00:19:06,400 --> 00:19:10,120
don't want to see anything. But when I'm working on, I'll just press F11 and

239
00:19:10,120 --> 00:19:14,320
make the terminal the only thing that's visible. And when you press F11 again,

240
00:19:14,800 --> 00:19:19,600
it returns it back to normal. In addition, most desktop terminal emulators

241
00:19:19,600 --> 00:19:23,960
will allow you to increase and decrease the font. And this is something that I

242
00:19:23,960 --> 00:19:28,600
often do in my videos. So what I'm going to do is hold control and shift at the

243
00:19:28,600 --> 00:19:32,840
same time. And while I'm holding those down, I'll press plus. Notice that

244
00:19:32,840 --> 00:19:38,760
every time I press plus, the font will get larger. If I hold control, not

245
00:19:38,760 --> 00:19:45,240
control and shift, but just control and press minus, as you can see, the font

246
00:19:45,240 --> 00:19:49,680
is shrinking. Now, often when I do this, it kind of plays around with the

247
00:19:49,680 --> 00:19:53,120
sizing of the terminal. So I'll often press reset to make sure that it's going

248
00:19:53,120 --> 00:19:57,920
back to the proper size. Otherwise, I might have some blank space up here. But

249
00:19:57,920 --> 00:20:02,480
anyway, that's how I actually adjust the size of the font in my videos. I often

250
00:20:02,480 --> 00:20:05,240
crank up the font size to make sure that you guys are able to see what I'm

251
00:20:05,240 --> 00:20:09,400
doing. And sometimes I have to shrink the font size if something I'm doing is

252
00:20:09,400 --> 00:20:13,920
taking up too much space. I've had some people in my comments ask me how I do

253
00:20:13,920 --> 00:20:18,800
that. And if that's you, well, now you know. Now, what I'm going to do is just

254
00:20:18,800 --> 00:20:22,920
press the up arrow a few times. I'm going to just bring up a previous command. I

255
00:20:22,920 --> 00:20:26,360
think this one right here is good enough. And what I'm going to do is hold

256
00:20:26,360 --> 00:20:32,760
control and press U. And it just deletes everything on that line. Literally

257
00:20:32,760 --> 00:20:37,360
everything. And depending on your computer, it could take some time to

258
00:20:37,360 --> 00:20:41,120
actually backspace everything out. I mean, that didn't take too long. But if you

259
00:20:41,120 --> 00:20:46,440
had a complete wall of text, control U will simply just delete everything.

260
00:20:46,720 --> 00:20:53,160
That's pretty cool. Now, similar to that, I'll bring up another command here,

261
00:20:53,160 --> 00:20:56,880
maybe something a little bit longer. I guess that's fine. Since we're on the

262
00:20:56,880 --> 00:21:01,040
subject of control U to delete everything on the prompt, there's a few

263
00:21:01,040 --> 00:21:05,160
other shortcuts that also involve holding down control. So what I'll do is

264
00:21:05,160 --> 00:21:09,640
hold control and press A. And that puts a cursor all the way to the front of the

265
00:21:09,640 --> 00:21:19,520
line. And then control E takes you to the end of the line. Now, suppose that I

266
00:21:19,520 --> 00:21:24,120
want to run this command right here. But before I press enter, I realize that I

267
00:21:24,120 --> 00:21:28,000
probably should have included sudo at the beginning. Now, I could hold down the

268
00:21:28,000 --> 00:21:31,480
left arrow go all the way to the beginning, which might take more time if

269
00:21:31,480 --> 00:21:37,840
the command is even longer. And then I could type sudo and I'm fine. But what I

270
00:21:37,840 --> 00:21:41,760
think is more practical is that you can hold control and press A. And that

271
00:21:41,760 --> 00:21:47,480
immediately brings you to the front of the line. And then control E takes you to

272
00:21:47,480 --> 00:21:51,640
the end of the line. So that way I'm able to jump to the beginning, add sudo, jump

273
00:21:51,640 --> 00:21:56,440
back to the end. That'll save some time. Maybe not the most useful thing in the

274
00:21:56,440 --> 00:21:59,760
world, but you never know. Maybe this is something you'll find helpful at one

275
00:21:59,760 --> 00:22:05,000
point or another in the future. So I'll clear the screen. This time I'll just

276
00:22:05,040 --> 00:22:08,680
hold control and press U to delete that command. And now I'm back to an empty

277
00:22:08,680 --> 00:22:14,120
prompt. Now, what if I wanted to run two commands one after another? Maybe I want

278
00:22:14,120 --> 00:22:18,840
to run sudo apt update. And then sudo apt dist upgrade. The first command will

279
00:22:18,840 --> 00:22:23,280
update my package repository index. Whereas the second command that I mentioned

280
00:22:23,280 --> 00:22:27,480
will make sure that all available updates are installed. What I could do is run

281
00:22:27,480 --> 00:22:34,680
sudo apt update. And then once it's done, I can run sudo apt dist

282
00:22:34,680 --> 00:22:38,720
upgrade to run the second command. But that's not what I'm going to do.

283
00:22:40,520 --> 00:22:48,920
Instead, I'm going to set up the command just like this. And watch what happens.

284
00:22:52,440 --> 00:22:56,440
It immediately changed the command into the dist upgrade command. So if I was

285
00:22:56,440 --> 00:23:00,640
to press enter, it's going to install all of the updates. Now, of course, apt is

286
00:23:00,640 --> 00:23:05,200
actually specific to Debian and Dubuntu. But the command itself doesn't really

287
00:23:05,200 --> 00:23:10,000
matter. I'll just say no for now because I don't need to update anything. I'm just

288
00:23:10,000 --> 00:23:14,840
using a temporary installation on my studio laptop. I don't really care to

289
00:23:14,840 --> 00:23:19,840
update it right now anyway. So what I'll do right now is just chain two random

290
00:23:19,840 --> 00:23:31,960
commands together. So LS dash L. And then I'll run echo. Hello world. So the first

291
00:23:31,960 --> 00:23:37,440
command produced this output right here because I ran LS dash L. And the second

292
00:23:37,440 --> 00:23:43,320
command echoed hello world to the screen, which we see right here. So now what I'm

293
00:23:43,320 --> 00:23:48,000
going to do is show you another variation of this same idea. So I'll recall

294
00:23:48,000 --> 00:23:53,160
this command and I'm going to take away the semicolon here. And instead, I'll type

295
00:23:53,160 --> 00:23:59,080
two and percents. What do you think's going to happen? Let's find out. The same

296
00:23:59,080 --> 00:24:04,440
thing. But wait a minute, if it does the same thing, if this method changed two

297
00:24:04,440 --> 00:24:09,080
commands together as well, then why would I want to use the semicolon versus the

298
00:24:09,080 --> 00:24:14,200
two and percents? Demonstrate the difference. I'm going to bring back this

299
00:24:14,240 --> 00:24:18,840
command right here. But what I'm going to do is make the first command completely

300
00:24:18,840 --> 00:24:29,560
invalid. So I'm going to list the storage of a directory that doesn't exist. This

301
00:24:29,560 --> 00:24:33,400
will produce an error. And then I'm going to chain the command into echo. Hello

302
00:24:33,400 --> 00:24:38,600
world, just like before. But the command stopped me, though, it's telling me that

303
00:24:38,600 --> 00:24:42,680
this directory does not exist, which I knew. But it didn't run the second

304
00:24:42,680 --> 00:24:49,240
command. Hmm, that's interesting. Let's bring that back, take away the end

305
00:24:49,240 --> 00:24:55,520
percents, and I'll replace them with a semicolon. So we get the same message as

306
00:24:55,520 --> 00:24:59,800
before. It's telling me that the directory does not exist. But it still ran the

307
00:24:59,800 --> 00:25:04,200
second command. So now you can see the difference. If you chain commands together

308
00:25:04,200 --> 00:25:08,600
with semicolons in between, it will actually run the next command if the

309
00:25:08,600 --> 00:25:13,240
previous command failed. But on the other hand, if you chain commands together

310
00:25:13,240 --> 00:25:17,320
with end percents instead of the semicolon, if it encounters an error, it

311
00:25:17,320 --> 00:25:22,040
will not run subsequent commands. And that's the difference. Depending on what

312
00:25:22,040 --> 00:25:25,080
you want, maybe you want the second command to go through if the first one

313
00:25:25,080 --> 00:25:29,080
fails, or maybe you don't. And that'll determine which one of these you actually

314
00:25:29,080 --> 00:25:35,080
use. Now another command that I want to show you guys is tail dash F. And I feel

315
00:25:35,080 --> 00:25:39,400
like this is a command that a lot of people know already. But for whatever

316
00:25:39,400 --> 00:25:43,960
reason, I didn't find this out until much later in my career. So I want to make

317
00:25:43,960 --> 00:25:47,960
sure that I let you guys know about this as early as I can. So if you didn't

318
00:25:47,960 --> 00:25:51,480
already know about this, well, you're about to know about it. So what we're

319
00:25:51,480 --> 00:25:55,800
going to do is just tail a log file. I just chose the var log syslog file

320
00:25:55,800 --> 00:26:01,480
randomly. You could give it any file that actually exists. Now when I press enter,

321
00:26:01,480 --> 00:26:06,280
it's going to show me the contents of var log syslog, or at least the last portion

322
00:26:06,280 --> 00:26:10,280
of it. And you can't really see it now. But if anything was to happen on this

323
00:26:10,280 --> 00:26:13,640
system, then this is going to update in real time.

324
00:26:13,640 --> 00:26:17,480
So I could literally watch the log as content is being added to it.

325
00:26:17,480 --> 00:26:20,840
So that way if I'm troubleshooting something, I could keep my eye on what's

326
00:26:20,840 --> 00:26:24,760
happening on the server. Maybe the other person that's telling me about a problem

327
00:26:24,760 --> 00:26:28,280
can try to reproduce the problem. And while they're doing that, I'll just

328
00:26:28,280 --> 00:26:31,400
watch the log. And as they're trying, I'll see new entries

329
00:26:31,400 --> 00:26:35,960
being added to the log file. It's a very cool thing to do.

330
00:26:35,960 --> 00:26:38,840
And to break out of this, you hold ctrl and press c.

331
00:26:38,840 --> 00:26:42,280
And now you're back on the command line.

332
00:26:43,000 --> 00:26:47,160
Now for the next trick. If I list the storage of my current working

333
00:26:47,160 --> 00:26:50,680
directory, I actually have this file right here called

334
00:26:50,680 --> 00:26:55,800
hello.txt that I actually created off camera.

335
00:26:55,800 --> 00:27:00,520
If I check the contents of that file, you can see that all it contains is hello

336
00:27:00,520 --> 00:27:03,640
world. Now we're going to pretend that this is a

337
00:27:03,640 --> 00:27:08,760
very long file. Maybe it's a log file, for example, and we want to empty it out.

338
00:27:08,760 --> 00:27:12,600
Now most of the time you can actually delete a log file and then the service

339
00:27:12,600 --> 00:27:15,560
will recreate it. But that's not always the case.

340
00:27:15,560 --> 00:27:19,240
It's actually easier to truncate a file, especially if it's a log file. It's a

341
00:27:19,240 --> 00:27:22,120
safer thing to do than outright deleting a file.

342
00:27:22,120 --> 00:27:25,080
Maybe there's still an open file handle to that file.

343
00:27:25,080 --> 00:27:29,480
And if you go ahead and delete a log file, maybe a new log file will not be

344
00:27:29,480 --> 00:27:32,280
created. And that wouldn't be good. So what you

345
00:27:32,280 --> 00:27:35,800
could do is run truncate because set the size.

346
00:27:35,800 --> 00:27:40,200
That's what the dash s stands for. We'll set the size to zero. Be very careful

347
00:27:40,200 --> 00:27:43,400
with this, by the way. And then we'll give it a file name.

348
00:27:43,400 --> 00:27:47,000
And that's going to make the file size of that file exactly zero,

349
00:27:47,000 --> 00:27:51,240
thereby deleting everything it contains. And that's why I mentioned you should be

350
00:27:51,240 --> 00:27:55,480
careful with it. But cap the contents of hello.txt

351
00:27:55,480 --> 00:27:58,840
one more time. It's an empty file. And that makes sense.

352
00:27:58,840 --> 00:28:04,440
We set the size to exactly zero. It's now an empty file.

353
00:28:04,440 --> 00:28:07,560
So now I'm going to show you guys one more command that I like and that's the

354
00:28:07,560 --> 00:28:11,960
column command, but it's actually more useful when you chain commands into it.

355
00:28:11,960 --> 00:28:16,680
For example, if I run mount, it's going to show me a list of all the file systems

356
00:28:16,680 --> 00:28:20,600
that I have mounted on my computer or server or whatever happens to be.

357
00:28:20,680 --> 00:28:24,680
But it's all kind of jumbled together. And yes, part of that is because of my

358
00:28:24,680 --> 00:28:27,640
font size. But even if I shrink the font size and then

359
00:28:27,640 --> 00:28:32,200
run it again, it's not all that much better.

360
00:28:32,200 --> 00:28:36,280
So let's try this a different way. I'm going to run mount.

361
00:28:36,280 --> 00:28:40,120
And then I'm going to pipe that into column

362
00:28:40,120 --> 00:28:45,880
dash t. And I might need to make the font size really small so you can see the

363
00:28:45,880 --> 00:28:49,240
difference. It's going to make sure that all the

364
00:28:49,240 --> 00:28:53,240
output is shown in columns, which makes it a lot easier to read.

365
00:28:53,240 --> 00:28:56,840
And it's not specific to the mount command. Any command that produces

366
00:28:56,840 --> 00:29:00,600
output that's a little jumbled might actually benefit from being piped into

367
00:29:00,600 --> 00:29:05,880
the column command like I'm doing here. If nothing else, piping mount into

368
00:29:05,880 --> 00:29:09,880
column dash t is useful of and by itself. So if that's all you take away from

369
00:29:09,880 --> 00:29:13,400
this, then I guess that's fine too.

370
00:29:14,040 --> 00:29:17,480
So hopefully you've learned something new with today's video.

371
00:29:17,480 --> 00:29:20,920
Go ahead and let me know in the comments down below what your favorite

372
00:29:20,920 --> 00:29:24,680
command line trick or time saving shortcut happens to be.

373
00:29:24,680 --> 00:29:28,120
I look forward to reading what you guys have to say and maybe I'll learn

374
00:29:28,120 --> 00:29:31,960
something new myself. Anyway, as always, thank you so much

375
00:29:31,960 --> 00:29:35,960
for watching and I'll see you again very soon.

376
00:29:47,480 --> 00:29:49,720
you

