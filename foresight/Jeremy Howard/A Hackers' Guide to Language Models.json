{"text": " Hi, I am Jeremy Howard from fast.ai, and this is a Hackers Guide to Language Models. When I say a Hackers Guide, what we're going to be looking at is a code-first approach to understanding how to use language models in practice. So before we get started, we should probably talk about what is a language model. I would say that this is going to make more sense if you know the kind of basics of deep learning. If you don't, I think you'll still get plenty out of it, and there'll be plenty of things you can do. But if you do have a chance, I would recommend checking out course.fast.ai, which is a free course. And specifically, if you could at least kind of watch, if not work through the first five lessons, that would get you to a point where you understand all the basic fundamentals of deep learning that will make this lesson tutorial make even more sense. Maybe I shouldn't call this a tutorial, it's more of a quick run-through. So I'm going to try to run through all the basic ideas of language models, how to use them, both open source ones and open AI based ones. And it's all going to be based using code as much as possible. So let's start by talking about what a language model is. And so as you might have heard before, a language model is something that knows how to predict the next word of a sentence or knows how to fill in the missing words of a sentence. And we can look at an example of one. Open AI has a language model, text of enchi 003. And we can play with it by passing in some words and ask it to predict what the next words might be. So if we pass in, when I arrived back at the Panda breeding facility after the extraordinary reign of live frogs, I couldn't believe what I saw. Or I just came up with that yesterday and I thought what might happen next. So kind of fun for creative brainstorming. There's a nice site called nat.dev. Nat.dev lets us play with a variety of language models. And here I've selected text of enchi 003 and I'll hit submit. And it starts printing stuff out. The pandas were happily playing and eating the frogs that had fallen in the sky. There's an amazing site to see these animals taking advantage of such a unique opportunity. The staff took quick measures to ensure the safety of the pandas and the frogs. So there you go. That's what happened after the extraordinary reign of live frogs at the Panda breeding facility. You'll see here that I've enabled show probabilities, which is a thing in nat.dev where it shows. Well, let's take a look. It's pretty likely the next word here is going to be there. And after that, since we're talking about a panda breeding facility, it's going to be pandas were. And what were they doing? Well, they could have been doing a few things. They could have been doing something happily or the pandas were having the pandas were out. The pandas were playing. So it picked the most likely. It thought it was 20% likely it's going to be happily. And what were they happily doing? Could have been playing, hopping, eating and so forth. So they're eating the frogs that and then had almost certainly. So you can see what it's doing at each point is it's predicting the probability of a variety of possible next words. And depending on how you set it up, it will either pick the most likely one every time or you can change, muck around with things like p values and temperatures to change what comes up. So at each time, then it will give us a different result. And this is kind of fun. Frogs perched on the heads of some of the pandas. It was an amazing sight, et cetera, et cetera. Okay. So that's what a language model does. Now you might notice here it hasn't predicted pandas. It's predicted panned and then separately us. Okay. After panned, it's going to be us. So it's not always a whole word. Here it's un and then harmed. Oh, actually it's un ha mood. So you can see that it's not always predicting words, specifically what it's doing is predicting tokens. Tokens are either whole words or sub word units, pieces of a word, or it could even be punctuation or numbers or so forth. So let's have a look at how that works. So for example, we can use the actual, it's called tokenization to create tokens from a string. We can use the same tokenizer that GPT users by using tick token. And we can specifically say we want to use the same tokenizer that that model text eventually 003 users. And so, for example, when I earlier tried this, it talked about the frog splashing. And so I thought, well, we'll encode they are splashing. And the result is a bunch of numbers. And what those numbers are, they basically just look ups into a vocabulary that open AI in this case created. And if you train your own models, you'll be automatically creating or your code will create. And if I then decode those, it says, oh, these numbers are they space are space spool ashing. And so put that all together. They are splashing. So you can see that the start of a word is the space before it is also being encoded here. So these language models are quite neat that they can work at all. But they're not of themselves really designed to do anything. Let me explain. The basic idea of what chat GPT, GPT4, etc. are doing comes from a paper which describes an algorithm that I created back in 2017 called ULM fit. And Sebastian Ruder and I wrote a paper up describing the ULM fit approach, which was the one that basically laid out what everybody's doing, how this system works. And the system has three steps. Step one is language model training. But you'll see this is actually from the paper. We actually described it as pre-training. Now what language model pre-training does is this is the thing which predicts the next word of a sentence. And so in the original ULM fit paper, so the algorithm I developed in 2017, then Sebastian Ruder and I wrote it up in 2018, early 2018. What I originally did was I trained this language model on Wikipedia. Now what that meant is I took a neural network and a neural network is just a function. If you don't know what it is, it's just a mathematical function that's extremely flexible and it's got lots and lots of parameters. And initially it can't do anything, but using stochastic gradient descent or SGD, you can teach it to do almost anything if you give it examples. And so I gave it lots of examples of sentences from Wikipedia, so for example from the Wikipedia article for the birds. The birds is a 1963 American natural horror thriller film produced and directed by Alfred, and then it would stop. And so then the model would have to guess what the next word is. And if it guessed Hitchcock, it would be rewarded. And if it guessed something else, it would be penalized. And effectively, basically it's trying to maximize those rewards. It's trying to find a set of weights for this function that makes it more likely that it would predict Hitchcock. And then later on in this article, it reads, from Wikipedia, any previously dated Mitch but ended it due to Mitch's cold, overbearing mother Lydia, who dislikes any woman in Mitch's. They can see that filling this in actually requires being pretty thoughtful because there's a bunch of things that kind of logically could go there. Like a woman could be in Mitch's closet, could be in Mitch's house. And so you could probably guess in the Wikipedia article describing the plot of the birds as actually any woman in Mitch's life. Now, to do a good job of solving this problem as well as possible of guessing the next word of sentences, the neural network is going to have to learn a lot of stuff about the world. It's going to learn that there are things called objects, that there's a thing called time, that objects react to each other over time, that there are things called movies, that movies have directors, that there are people, that people have names and so forth, and that a movie director is Alfred Hitchcock and he directed horror films and so on and so forth. It's going to have to learn an extraordinary amount if it's going to do a really good job of predicting the next word of sentences. Now, these neural networks specifically are deep neural networks. So this is deep learning. And in these deep neural networks, which have, when I created this, I think it had like 100 million parameters. Nowadays, they have billions of parameters. It's got the ability to create a rich hierarchy of abstractions and representations which it can build on. And so this is really the key idea behind neural networks and language models, is that if it's going to do a good job of being able to predict the next word of any sentence in any situation, it's going to have to know an awful lot about the world. It's going to have to know about how to solve math questions or figure out the next move in a chess game or recognize poetry and so on and so forth. Now, nobody says it's going to do a good job of that. So it's a lot of work to find to create and train a model that is good at that. But if you can create one that's good at that, it's going to have a lot of capabilities internally that it would have to be drawing on to be able to do this effectively. So the key idea here for me is that this is a form of compression and this idea of the relationship between compression and intelligence goes back many, many decades. And the basic idea is that, yeah, if you can guess what words are coming up next, then effectively you're compressing all that information down into a neural network. Now, I said this is not useful of itself. Well, why do we do it? Well, we do it because we want to pull out those capabilities. And the way we pull out those capabilities is we take two more steps. The second step is we do something called language model fine tuning. And in language model fine tuning, we are no longer just giving it all of Wikipedia or nowadays we don't just give it all of Wikipedia. But in fact, a large chunk of the internet is fed to pre-training these models. In the fine tuning stage, we feed it a set of documents a lot closer to the final task that we want the model to do. But it's still the same basic idea. It's still trying to predict the next word of a sentence. After that, we then do a final classifier fine tuning. And then the classifier fine tuning, this is the kind of end task we're trying to get it to do. Nowadays, these two steps are very specific approaches are taken. For the step two, the step B, the language model fine tuning, people nowadays do a particular kind called instruction tuning. The idea is that the task we want most of the time to achieve is solve problems, answer questions. And so in the instruction tuning phase, we use data sets like this one. This is a great data set called OpenOrca created by a fantastic open source group. And it's built on top of something called the Flan collection. And you can see that basically there's all kinds of different questions in here. So there's four gigabytes of questions and context and so forth. And each one generally has a question or an instruction or a request and then a response. Here are some examples of instructions. I think this is from the Flan data set if I remember correctly. So for instance, it could be does the sentence in the iron age answer the question, the period of time from 1200 to 1000 BCE is known as what choice is one yes or no. And then the language model is meant to write one or two as appropriate for yes or no. Or it could be things about I think this is from a music video. Who is the girl in more than you know answer and then it would have to write the correct name of the remember model or dancer or whatever from from that music video and so forth. So it's still doing language modeling. So fine tuning and pre training are kind of the same thing. But this is more targeted now, not just to be able to fill in the missing parts of any document from the Internet. But to fill in the words necessary to answer questions to do useful things. Okay, so that's instruction tuning. And then step three, which is the classifier fine tuning. Nowadays, there's generally various approaches such as reinforcement learning from human feedback and others, which are basically giving humans or sometimes more advanced models, multiple answers to a question such as here are some from a reinforcement learning from human feedback paper. I can't remember which one I got it from. Five ideas for how to regain enthusiasm for my career. And so the model will spit out two possible answers or it will have a less good model and more good model. And then a human or a better model will pick, which is best. And so that's used for the the final fine tuning stage. So all of that is to say, although you can download pure language models from the Internet. They're not generally that useful of their on their own until you've fine tuned them. Now, you don't necessarily need step C nowadays. Actually, people are discovering that maybe just step B might be enough. It's still a bit controversial. Okay, so when we talk about a language model, where we could be talking about something that's just been pre-trained, something that's been fine tuned or something that's gone through something like RLHF. All of those things are generally described nowadays as language models. So my view is that if you are going to be good at language modeling in any way, then you need to start by being a really effective user of language models. And to be a really effective user of language models, you've got to use the best one that there is. And currently, so what are we up to September 2023? The best one is by far GPT-4. This might change sometime in the not too distant future, but this is right now. GPT-4 is the recommendation, strong, strong recommendation. Now, you can use GPT-4 by paying 20 bucks a month to open AI, and then you can use it a whole lot. It's very hard to run out of credits, I find. Now, what can GPT-2? It's interesting and instructive, in my opinion, to start with the very common views you see on the internet or even in academia about what it can't do. So, for example, there was this paper you might have seen, GPT-4 can't reason, which describes a number of empirical analysis done of 25 diverse reasoning problems and found that it was not able to solve them, it's utterly incapable of reasoning. So, I always find you've got to be a bit careful about reading stuff like this because I just took the first three that I came across in that paper and I gave them to GPT-4 and, by the way, something very useful in GPT-4 is you can click on the share button and you'll get something that looks like this, and this is really handy. So, here's an example of something from the paper that said GPT-4 can't do this. Mabel's heart rate at 9 a.m. was 75 beats per minute. Her blood pressure at 7 p.m. was 120 over 80. She died at 11 p.m. while she alive at noon. So, of course, we're human, we know obviously she must be. And GPT-4 says, hmm, this appears to be a riddle, not a real inquiry into medical conditions. Here's a summary of the information and, yeah, it sounds like Mabel was alive at noon. So, that's correct. This was the second one I tried from the paper that says GPT-4 can't do this and I found actually GPT-4 can do this. And it said that GPT-4 can't do this and I found GPT-4 can do this. Now, I mentioned this to say GPT-4 is probably a lot better than you would expect if you've read all this stuff on the internet about all the dumb things that it does. Almost every time I see on the internet saying something that GPT-4 can't do, I check it and it turns out it does. This one was just last week. Sally, a girl, has three brothers. Each brother has two sisters. How many sisters does Sally have? So, I have to think about it. And so, GPT-4 says, OK, Sally's counted as one sister by each of her brothers. If each brother has two sisters, that means there's another sister in the picture apart from Sally. So, Sally has one sister. Correct. And then this one I got sort of like three or four days ago. This is a common view that language models can't track things like this. Here's the riddle. I'm in my house. On top of my chair in the living room is a coffee cup. Inside the coffee cup is a thimble. Inside the thimble is a diamond. I move the chair to the bedroom. I put the coffee cup in the bed. I turn the cup upside down. Then I return it upside up. Place the coffee cup on the counter in the kitchen. Where's my diamond? And so GPT-4 says, yeah, OK. You turned it upside down. So, probably the diamond fell out. So, therefore, the diamond in the bedroom fell out. Again, correct. Why is it that people are claiming that GPT-4 can't do these things when it can? Well, the reason is because I think on the whole they are not aware of how GPT-4 was trained. GPT-4 was not trained at any point to give correct answers. GPT-4 was trained initially to give most likely next words. And there's an awful lot of stuff on the internet where documents are not describing things that are true. There could be fiction. There could be jokes. There could be just stupid people saying dumb stuff. So, this first stage does not necessarily give you correct answers. The second stage with the instruction tuning, also, like, it's trying to give correct answers. But part of the problem is that then in the stage where you start asking people which answer do they like better, people tended to say in these things that they prefer more confident answers and they often were not people who were trained well enough to recognize wrong answers. So, there's lots of reasons that the SGD weight updates from this process for stuff like GPT-4 don't particularly or don't entirely reward correct answers. But you can help it want to give you correct answers. If you think about the LM pre-training, what are the kinds of things in a document that would suggest, oh, this is going to be high quality information. And so, you can actually prime GPT-4 to give you high quality information by giving it custom instructions. And what this does is this is basically text that is prepended to all of your queries. And so, you say like, oh, you're brilliant at reasoning. So, like, okay, that's obviously to prime it to give good answers. And then try to work against the fact that the RLHF folks preferred confidence. Just tell it. No, tell me if there might not be a correct answer. Also, the way that the text is generated is it literally generates the next word. And then it puts all that whole lot back into the model and generates the next next word, puts that all back in the model, generates the next next next word, and so forth. That means the more words it generates, the more computation it can do. And so, I literally, I tell it that, right? So, I say, first, bend a few sentences explaining background context, et cetera. So, this custom instruction allows it to solve more challenging problems. And you can see the difference. Here's what it looks like, for example, if I say, how do I get a count of rows grouped by value in pandas? And it just gives me a whole lot of information, which is actually it thinking. So, I just skip over it, and then it gives me the answer. And actually, in my custom instructions, I actually say, if the request begins with VV, actually make it as concise as possible. And so, it kind of goes into brief mode. And here is brief mode. How do I get the grid? This is the same thing, but with VV at the start. And it just spits it out. Now, in this case, it's a really simple question, so I didn't need time to think. So, hopefully, that gives you a sense of how to get language models to give good answers. You have to help them. And if it's not working, it might be user error, basically. But having said that, there's plenty of stuff that language models like GPT-4 can't do. One thing to think carefully about is, does it know about itself? Can you ask it? What is your context length? How were you trained? What transformer architecture are you based on? At any one of these stages, did it have the opportunity to learn any of those things? Well, obviously, not at the pre-training stage. Nothing on the internet existed during GPT-4's training saying how GPT-4 was trained. Probably ditto in the instruction tuning, probably ditto in the RLHF. So, in general, you can't ask, for example, a language model about itself. Now, again, because of the RLHF, it'll want to make you happy by giving you opinionated answers. So, it'll just spit out the most likely thing it thinks with great confidence. This is just a general kind of hallucination, right? So, hallucinations is just this idea that the language model wants to complete the sentence, and it wants to do it in an opinionated way that's likely to make people happy. It doesn't know anything about URLs. It really hasn't seen many at all. I think a lot of them, if not all of them, pretty much were stripped out. So, if you ask it anything about, like, what's at this web page, again, it'll generally just make it up. And it doesn't know, at least GPT-4 doesn't know anything after September 2021, because the information it was pre-trained on was from that time period, September 2021 and before, called the Knowledge Cutoff. So, here's some things it can't do. Steve Newman sent me this good example of something that it can't do. Here is a logic puzzle. I need to carry a cabbage, a goat, and a wolf across a river. I can only carry one item at a time. I can't leave the goat with a cabbage. I can't leave the cabbage with a wolf. How do I get everything across to the other side? Now, the problem is, this looks a lot like something called the classic river crossing puzzle. So, classic, in fact, that it has a whole Wikipedia page about it. And in the classic puzzle, the wolf would eat the goat, or the goat would eat the cabbage. Now, in Steve's version, he changed it. The goat would eat the cabbage, and the wolf would eat the cabbage, but the wolf won't eat the goat. So, what happens? Well, very interestingly, GPT-4 here is entirely overwhelmed by the language model training. It's seen this puzzle so many times, it knows what word comes next. So, it says, oh, yeah, I take the goat across the road, across the river, and leave it on the other side, leaving the wolf with a cabbage, but we're just told you can't leave the wolf with a cabbage. So, it gets it wrong. Now, the thing is, though, you can encourage GPT-4 or any of these language models to try again. So, during the instruction tuning in RLHF, they're actually fine-tuned with multi-stage conversations. So, you can give it a multi-stage conversation. Repeat back to me the constraints I listed. What happened after step one is a constraint violated. Oh, yeah, yeah, yeah, I made a mistake. Okay, my new attempt, instead of taking the goat across the river and leaving it on the other side, is, oh, I'll take the goat across the river and leave it on the other side. It's done the same thing. Oh, yeah, I did do the same thing. Okay, I'll take the wolf across. Well, now the goat's with a cabbage. That still doesn't work. Oh, yeah, that didn't work either. Sorry about that. Instead of taking the goat across the other side, I'll take the goat across the other side. Okay, what's going on here? Right, this is terrible. Well, one of the problems here is that not only is on the internet it's so common to see this particular goat puzzle that it's so confident it knows what the next word is. Also, on the internet, when you see stuff which is stupid on a web page, it's really likely to be followed up with more stuff that is stupid. Once GPT-4 starts being wrong, it tends to be more and more wrong. It's very hard to turn it around to start it making it be right. So you actually have to go back and there's actually an edit button on these chats. And so what you generally want to do is if it's made a mistake, is don't say, oh, here's more information to help you fix it. But instead, go back and click the edit and change it here. And so this time it's not going to get confused. So in this case, actually fixing Steve's example takes quite a lot of effort, but I think I managed to get it to work eventually. And I actually said, oh, sometimes people read things too quickly. They don't notice things, it can trick them up. Then they apply some pattern, get the wrong answer. You do the same thing, by the way. So I'm going to trick you. So before you're about to get tricked, make sure you don't get tricked. Here's the tricky puzzle. And then also with my custom instructions, it takes time discussing it. And this time it gets it correct. It takes the cabbage across first. So it took a lot of effort to get to a point where it could actually solve this because for things where it's been primed to answer a certain way again and again and again, it's very hard for it to not do that. OK, now something else super helpful that you can use is what they call advanced data analysis. In advanced data analysis, you can ask it to basically write code for you. And we're going to look at how to implement this from scratch ourselves quite soon. But first of all, let's learn how to use it. So I was trying to build something that split into markdown headings, a document on third level markdown headings. So that's three hashes at the start of a line. And I was doing it on the whole of Wikipedia. So using regular expressions was really slow. I said, oh, I want to speed this up. And it said, OK, here's some code, which is great, because then I can say, OK, test it and include edge cases. And so it then puts in the code, creates extra cases, tests it, and says, yep, it's working. However, I discovered it's not. I noticed it's actually removing the carriage return at the end of each sentence. So I said, oh, fix that and update your tests. So it said, OK, so now it's changed the test, updated the test cases, it's run them and it's not working. So it says, oh, yeah, fix the issue in the test cases. Nope, it didn't work. And you can see it's quite clever the way it's trying to fix it by looking at the results. But as you can see, it's not. Every one of these is another attempt, another attempt, another attempt, until eventually I gave up waiting. It's so funny each time. It's like, de-banging again. OK, this time I got to handle it properly. And I gave up at the point where it's like, oh, one more attempt. So it didn't solve it, interestingly enough. And again, there's some limits to the amount of logic that it can do. This is really a very simple question. I asked it to do for me. And so hopefully you can see you can't expect even GPT for code interpreter or advanced data analysis that is now called to make it so you don't have to write code anymore. So there's a lot of substitute for having programmers. But it can often do a lot, as I'll show you in a moment. So for example, actually OCR, like this is something I thought was really cool. You can just paste, sorry, paste or upload. So GPT for you can upload an image, advanced data analysis. Yeah, you can upload an image here. And then I wanted to basically grab some text out of an image. Somebody had got a screenshot with their screen, which was something saying, oh, this language model can't do this. And I wanted to try it as well. So rather than retyping it, I just uploaded that image, my screenshot, and said, can you extract the text from this image? And it said, oh, yeah, I could do that. I could use OCR. And like so it literally wrote an OCR script. And there it is. Just took a few seconds. So the difference here is it didn't really require it to think of much logic. It could just use a very, very familiar pattern that it would have seen many times. So this is generally where I find language models excel is where it doesn't have to think too far outside the box. I mean, it's great on kind of creativity tasks, but for like reasoning and logic tasks that are outside the box, I find it not great. But yeah, it's great at doing code for a whole wide variety of different libraries and languages. Having said that, by the way, Google also has a language model called Bard. It's way less good than GPT for most of the time. But there is a nice thing that you can literally paste an image straight into the prompt. And I just typed OCR this. And it didn't even have to go through code interpreter or whatever. It just said, oh, sure, I've done it. And there's the result of the OCR. And even commented on what it just OCRed, which I thought was cute. And oh, even more interestingly, it even figured out where the OCR text came from and gave me a link to it. So I thought that was pretty cool. OK, so there's an example of it doing well. I'll show you one for this talk I found really helpful. I wanted to show you guys how much it costs to use the OpenAI API. But unfortunately, when I went to the OpenAI web page, it was like all over the place. The pricing information was on all separate tables and it was kind of a bit of a mess. So I wanted to create a table with all of the information combined like this. And here's how I did it. I went to the OpenAI page. I hit Apple A to select all. And then I said in chat GPT, create a table with the pricing information rows, no summarization, no information, not in this page. Every row should appear as a separate row in your output. And I hit Paste. Now that was not very helpful to it because hitting Paste, it's got the nav bar. It's got lots of extra information at the bottom. It's got all of its footer, et cetera. But it's really good at this stuff. It did it first time. So there was the markdown table. And then pasted that into Jupiter. And I got my markdown table. And so now you can see at a glance the cost of GPT-4, 3.5, et cetera. But then what I really wanted to do was show you that as a picture. So I just said, oh, chart the input row from this table. Just pasted the table back. And it did. So that's pretty amazing. So let's talk about this pricing. So far, we've used chat GPT, which costs $20 a month. And there's no per token cost or anything. But if you want to use the API from Python or whatever, you have to pay per token. Which is approximately per word. Maybe it's about one and a third tokens per word on average. Unfortunately, in the chart, it did not include these headers, GPT-4, GPT-3.5. So these first two ones are GPT-4. And these two are GPT-3.5. So you can see the GPT-3.5 is way, way cheaper. And you can see it here. It's 0.03 versus 0.0015. So it's so cheap, you can really play around with it and not worry. And I want to give you a sense of what that looks like. So why would you use the OpenAI API rather than chat GPT? Because you can do it programmatically. So you can analyze data sets, you can do repetitive stuff. It's kind of like a different way of programming. It's things that you can think of describing. But let's just look at the most simple example of what that looks like. So if you pip install OpenAI, then you can import chat completion. And then you can say, OK, chat completion.create using GPT-3.5 turbo. And then you can pass in a system message. This is basically the same as custom instructions. So, OK, you're an Aussie LLM that uses Aussie slang and analogies wherever possible. OK, and so you can see I'm passing in an array here of messages. So the first is the system message and then the user message, which is what is money? OK, so GPT-3.5 returns a big embedded dictionary. And the message content is, well, money is like the oil that keeps the machinery of our economy running smoothly. There you go. Just like Aquila loves its eucalyptus leaves, we humans can't survive without this stuff. So there's the Aussie LLM's view of what is money. So the main ones I pretty much always use are GPT-4 and GPT-3.5. GPT-4 is just so, so much better at anything remotely challenging, but obviously it's much more expensive. So rule of thumb, maybe try 3.5 turbo first, see how it goes. If you're happy with the results, then great. If you're not, pony out for the more expensive one. OK, so I just created a little function here called response that will print out this nested thing. And so now, oh, and so then the other thing to point out here is that the result of this also has a usage field, which contains how many tokens was it? So it's about 150 tokens. So at $0.002 per thousand tokens for 150 tokens means we just paid 0.03 cents, 0.0003 dollars to get that done. So as you can see, the cost is insignificant. If we were using GPT-4, it would be 0.03 per thousand. So it would be half a cent. So unless you're doing many thousands of GPT-4, you're not going to be even up into the dollars and GPT-3.5 even more than that. But you know, keep an eye on it. OpenAI has a usage page and you can track your usage. Now, what happens when we are this is really important to understand when we have a follow up in the same conversation? How does that work? So we just asked what goat means. So for example, Michael Jordan is often referred to as the goat for his exceptional skills and accomplishments. And Elvis and the Beatles referred to as goat due to their profound influence and achievement. So I could say, what profound influence and achievements are you referring to? Okay, well, I meant Elvis Presley and the Beatles did all these things. Now, how does that work? How does this follow up work? What happens is the entire conversation is passed back. And so we can actually do that here. So here is the same system prompt. Here is the same question, right? And then the answer comes back with role assistant. And I'm going to do something pretty cheeky. I'm going to pretend that it didn't say money is like oil. I'm going to say, oh, you actually said money is like kangaroos. I thought, what is it going to do? Okay, so you can like literally invent a conversation in which the language model said something different. Because this is actually how it's done in a multi-stage conversation. There's no state, right? There's nothing stored on the server. You're passing back the entire conversation again and telling it what it told you, right? So I'm going to tell it. It told me that money is like kangaroos. And then I'll ask the user, oh, really? In what way? And it's kind of cool because you can see how it convinces you of something I just invented. Oh, let me break it down for you, Cuba. Just like kangaroos hop around and carry their joeys in their pouch, money is a means of carrying value around. So there you go. It's make your own analogy. Cool. So I'll create a little function here that just puts these things together for us. System message, if there is one, the user message and returns the completion. And so now we can ask it, what's the meaning of life? Passing in the Aussie system prompt. The meaning of life is like trying to catch a wave on a sunny day at Bondo Beach. Okay, there you go. So what do you need to be aware of? Well, as I said, one thing is keep an eye on your usage. If you're doing it, you know, hundreds or thousands of times in a loop, keep an eye on not spending too much money. But also if you do it too fast, particularly the first day or two, you've got an account, you're likely to hit the limits for the API. And so the limits initially are pretty low. As you can see, three requests per minute. So that's for free users, page users, first 48 hours. And after that, it starts going up and you can always ask for more. I just mentioned this because you're going to want to have a function that keeps an eye on that. And so what I did is I actually just went to Bing, which has a somewhat crappy version of GPT-4 nowadays, but it can still do basic stuff for free. And I said, please show me Python code to call the OpenAI API and handle rate limits. And it wrote this code. It's got a try, checks your rate limit errors, grabs the retry after, sleeps for that long and calls itself. And so now we can use that to ask, for example, what's the world's funniest joke? And there we go. Here's the world's funniest joke. So that's like the basic stuff you need to get started using the OpenAI LLMs. And yeah, it's definitely suggest spending plenty of time with that so that you feel like you're really a LLM using expert. So what else can we do? Well, let's create our own code interpreter that runs inside GPT-4. And so to do this, we're going to take advantage of a really nifty thing called function calling, which is provided by the OpenAI API. And in function calling, when we call our askGPT function, which is this little one here, we had room to pass in some keyword arguments that would be just passed along to checkCompletion.create. And one of those keyword arguments you can pass is functions. What on earth is that? Functions tells OpenAI about tools that you have, about functions that you have. So for example, I created a really simple function called sums and it adds two things. In fact, it adds two ints. And I am going to pass that function to checkCompletion.create. Now you can't pass a Python function directly. You actually have to pass what's called the JSON schema. So you have to pass the schema for the function. So I created this nifty little function that you're welcome to borrow, which uses pydantic and also Python's inspect module to automatically take a Python function and return the schema for it. And so this is actually what's going to get passed to OpenAI. So it's going to know that there's a function called sums. It's going to know what it does and it's going to know what parameters it takes, what the defaults are and what's required. So this is like, when I first heard about this, I found this a bit mind-bending because this is so different to how we normally program computers. The key thing for programming the computer here actually is the doc string. This is the thing that GPT-4 will look at and say, oh, what does this function do? So it's critical that this describes exactly what the function does. And so if I then say, what is 6 plus 3? And I just, I really wanted to make sure it actually did it here. So I gave it lots of prompts to say, because obviously it knows how to do it itself without calling sums. So it'll only use your functions if it feels it needs to, which is a weird concept. I mean, I guess fields is not a great word to use, but you kind of have to anthropomorphize these things a little bit because they don't behave like normal computer programs. So if I ask GPT, what is 6 plus 3, and tell it that there's a function called sums, then it does not actually return the number 9. Instead, it returns something saying, please call a function. Call this function and pass it these arguments. So if I print it out, there's the arguments. So I created a little function called core function, and it goes into the result of OpenAI, grabs the function call, checks that the name is something that it's allowed to do, grabs it from the global system table, and calls it, passing in the parameters. So if I now say, OK, call the function that we got back, we finally get 9. So this is a very simple example. It's not really doing anything that useful, but what we could do now is we can create a much more powerful function called Python. And the Python function executes code using Python and returns the result. Now, of course, I didn't want my computer to run arbitrary Python code that GPT4 told it to without checking. So I just got it to check first. So say, oh, are you sure you want to do this? So now I can say, ask GPT, what is 12 factorial? System prompt. You can use Python for any required computations and say, OK, here's a function you've got available. It's the Python function. So if I now call this, it will pass me back again a completion object. And here it's going to say, OK, I want you to call Python passing in this argument. And when I do, it's going to go import math, result equals blah, and then return result. Do I want to do that? Yes, I do. And there it is. Now, there's one more step which we can optionally do. I mean, we've got the answer we wanted, but often we want the answer in more of a chat format. And so the way to do that is to, again, repeat everything that you've passed into so far. But then instead of adding an assistant role response, we have to provide a function role response and simply put in here the result we got back from the function. And if we do that, we now get the pros response 12 factorial is equal to 470 million 1,600. Now, functions like Python, you can still ask it about non Python things. And it just ignores it if you don't need it, right? So you can have a whole bunch of functions available that you've built to do whatever you need for the stuff which the language model isn't familiar with. And it'll still solve whatever it can on its own and use your tools, use your functions where possible. So we have built our own code interpreter from scratch. I think that's pretty amazing. So that is what you can do with or some of the stuff you can do with open AI. What about stuff that you can do on your own computer? Well, to use a language model on your own computer, you're going to need to use a GPU. So I guess the first thing to think about is like, do you want this? Does it make sense to do stuff on your own computer? What are the benefits? There are not any open source models that are as good yet as GPT-4. And I would have to say also like actually open AI pricing is really pretty good. So it's not immediately obvious that you definitely want to kind of go in-house, but there's lots of reasons you might want to. And we'll look at some examples of them today. One example you might want to go in-house is that you want to be able to ask questions about your proprietary documents or about information after September 2021, the knowledge cutoff. Or you might want to create your own model that's particularly good at solving the kinds of problems that you need to solve using fine tuning. And these are all things that you absolutely can get better than GPT-4 performance at work or at home without too much money or travel. So these are the situations in which you might want to go down this path. And so you don't necessarily have to buy a GPU. On Kaggle, they will give you a notebook with two quite old GPUs attached and very little RAM. But it's something. Or you can use Colab. And on Colab, you can get much better GPUs than Kaggle has and more RAM, particularly if you pay a monthly subscription fee. So those are some options for free or low cost. You can also, of course, go to one of the many GPU server providers and they change all the time as to what's good or what's not. RunPod is one example. And you can see if you want the biggest and best machine, you're talking $34 an hour, so it gets pretty expensive. But you can certainly get things a lot cheaper, $0.80 an hour. Lambda Labs is often pretty good. You know, it's really hard at the moment to actually find. Let's see, pricing to actually find people that have them available. So they've got lots listed here, but they often have none or very few available. There's also something pretty interesting called Vast AI, which basically lets you use other people's computers when they're not using them. And as you can see, you know, they tend to be much cheaper than other folks. And then they tend to have better availability as well. But of course, for sensitive stuff, you don't want to be running it on some Rando's computer. So anyway, so there's a few options for renting stuff. You know, I think it's, if you can, it's worth buying something and definitely the one to buy at the moment is the GTX 3090 used. You can generally get them from eBay for like 700 bucks or so. A 4090 isn't really better for language models, even though it's a newer GPU. The reason for that is that language models are all about memory speed. How quickly can you get in and stuff in and out of memory rather than how fast is the processor? And that hasn't really improved a whole lot. So the 2000 bucks. The other thing as well as memory speed is memory size 24 gigs. It doesn't quite cut it for a lot of things. So you'd probably want to get two of these GPUs. So you're talking like $1,500 or so. Or you can get a 48 gig gram GPU. It's called an A6000. But this is going to cost you more like five grand. So again, getting two of these is going to be a better deal. And this is not going to be faster than these either. Or funnily enough, you could just get a Mac with a lot of RAM, particularly if you get an M2 Ultra. Macs have, particularly the M2 Ultra has pretty fast memory. It's still going to be way slower than using an Nvidia card. But it's going to be like you're going to be able to get, you know, like I think 192 gig or something. So it's not a terrible option, particularly if you're not training models. You just want to use other existing trained models. So anyway, most people who do this stuff seriously, almost everybody has Nvidia cards. So then what we're going to be using is a library called Transformers from Hugging Face. And the reason for that is that basically people upload lots of pre-trained models or five trained models up to the Hugging Face Hub. And in fact, there's even a leaderboard where you can see which are the best models. Now, this is a really fraught area. So at the moment, this one is meant to be the best model. It has the highest average score. And maybe it is good. I haven't actually used this particular model. Or maybe it's not. I actually have no idea because the problem is these metrics are not particularly well aligned with real life usage. For all kinds of reasons. And also sometimes you get something called leakage, which means that sometimes some of the questions from these things actually leaks through to some of the training sets. So you can get as a rule of thumb what to use from here, but you should always try things. And you can also say, you know, these ones are all the 70B here that tells you how big it is. So this is a 70 billion parameter model. So generally speaking for the kinds of GPUs we're talking about, you'll be wanting no bigger than 13B and quite often 7B. So let's see if we can find here's a 13B model, for example. All right. So you can find models to try out from things like this leaderboard. And there's also a really great leaderboard called FastEval, which I like a lot because it focuses on some more sophisticated evaluation methods such as this chain of thought evaluation method. So I kind of trust these a little bit more. And these are also, you know, GSM 8K is a difficult math benchmark, big bench hard, so forth. So, yeah. So, you know, StableBlog2, WizardMeth, 13B, Dolphin, Lama, 13B, et cetera. These would all be good options. Yeah. So you need to pick a model. And at the moment, nearly all the good models are based on Meta's Lama 2. So when I say based on, what does that mean? Well, what that means is this model here, Lama 2, 7B. So it's a Lama model. That's just the name Meta called it. This is their version 2 of Lama. This is their 7 billion size one. It's the smallest one that they make. And specifically, these weights have been created for hugging face. So you can load it with the hugging face transformers. And this model has only got as far as here. It's done the language model for pre-training. It's done none of the instruction tuning and none of the RLHF. So we would need to fine tune it to really get it to do much useful. So we can just say, OK, create a, automatically create the appropriate model for language model. So causalLM is basically refers to that ULM fifth stage one process or stage two, in fact. Create the pre-trained model from this name. Meta Lama Lama 2, blah, blah, blah. OK. Now, generally speaking, we use 16 bit floating point numbers nowadays. But if you think about it, 16 bit is two bytes. So 7B times 2, it's going to be 14 gigabytes. Just to load in the weights. So you've got to have a decent model to be able to do that. Perhaps surprisingly, you can actually just cast it to 8 bit. And it still works pretty well, thanks to some encode discretization. So let's try that. So remember, this is just a language model. It can only complete sentences. We can't ask it a question and expect a great answer. So let's just give it the start of a sentence, Jeremy, how it is R. So we need the right tokenizer. So this will automatically create the right kind of tokenizer for this model. We can grab the tokens as PyTorch. Here they are. And just to confirm, if we decode them back again, we get the original plus a special token to say this is the start of a document. And so we can now call generate. So generate will auto regressively. So call the model again and again, passing its previous result back as the next input. And I'm just going to do that 15 times. So you can write this for loop yourself. This isn't doing anything fancy. In fact, I would recommend writing this yourself to make sure that you know how, that it all works OK. We have to put those tokens on the GPU. And at the end, I recommend putting them back onto the CPU, the result. And here are the tokens. Not very interesting. So we have to decode them using the tokenizer. And so the first 25, so first 15 tokens are Jeremy, how it is R. 28 year old Australian AI researcher and entrepreneur. OK, well, 28 years old is not exactly correct, but we'll call it close enough. I like that. Thank you very much. Lama 7B. So OK, so we've got a language model completing sentences. It took one and a third seconds. And that's a bit slower than it could be because we used 8 bit. If we use 16 bit, there's a special thing called B float 16, which is a really great 16 bit floating point format that's usable on any somewhat recent GPU, Nvidia GPU. If we use it, it's going to take twice as much RAM as we discussed. But look at the time. It's come down to 390 milliseconds. Now, there is a better option still than even that. There's a different kind of discretization called GPTQ, where a model is carefully optimized to work with 4 or 8 or other lower precision data automatically. And this particular person known as the bloke is fantastic at taking popular models, running that optimization process, and then uploading the results back to Hackingface. So we can use this GPTQ version. And internally, this is actually going to use, I'm not sure exactly how many bits this particular one is. I think it's probably going to be four bits, but it's going to be much more optimized. And so look at this, 270 milliseconds. It's actually faster than 16 bit. Even though internally, it's actually casting it up to 16 bit each layer to do it. And that's because there's a lot less memory moving around. And to confirm, in fact, what we could even do now is we could go up to 13D. Easy. And in fact, it's still faster than the 7B, now that we're using the GPTQ version. So this is a really helpful tip. So let's put all those things together, the tokenizer, the generate, the batch decode, we'll call this gen for generate. And so we can now use the 13B GPTQ model. And let's try this Jeremy Howard is a, so it's got to 50 tokens so fast. 16 year veteran of Silicon Valley, co-founder of Kaggle, a Marketplace predictive model. His company Kaggle.com has become to data science competitions. What I don't know what I was going to say, but anyway, it's on the right track. I was actually there for 10 years, not 16, but that's all right. Okay. So this is looking good. But probably a lot of the time we're going to be interested in, you know, asking questions or using instructions. So stability AI has this nice series called stable beluga, including a small 7B one and other bigger ones. And these are all based on Lama two, but these have been instruction tuned. They might even have been RLHDF. I can't remember now. So we can create a stable beluga model. And now something really important that I keep forgetting everybody keeps forgetting is during the instruction tuning process, during the instruction tuning process, the instructions that are passed in actually are, they don't just appear like this. They actually always are in a particular format. And the format, believe it or not, changes quite a bit from fine-tuned to fine-tuned. And so you have to go to the webpage for the model and scroll down to find out what the prompt format is. So here's the prompt format. So I generally just copy it and then I paste it into Python, which I did here. And created a function called make prompt that used the exact same format that it said to you use. And so now if I want to say who is Jeremy Howard, I can call Jen again. That was that function I created up here and make the correct prompt from that question. And then it returns back. Okay, so you can see here all this prefix. This is a system instruction. This is my question. And then the assistant says, Jeremy Howard's an Australian entrepreneur, computer scientist, co-founder of machine learning and deep learning company, faster than AI. Okay, so this one's actually all correct. So it's getting better by using an actual instruction tune model. And so we could then start to scale up. So we could use the 13b. And in fact, we looked briefly at this open orca data set earlier. So llama two has been fine tuned on open orca and then also fine tuned on another really great data set called platypus. And so the whole thing together is the open orca platypus. And then this is going to be the bigger 13b. GPTQ means it's going to be quantized. So that's got a different format. Okay, a different prompt format. So again, we can scroll down and see what the prompt format is. There it is. Okay. And so we can create a function called make open orca prompt that has that prompt format. And so now we can say, okay, who is Jeremy Howard? And now I've become British, which is kind of true. I was born in England, but I moved to Australia. Professional poker player. Definitely not that. Co-founding several companies, including faster AI, also Kaggle. Okay. So not bad. It was acquired by Google with 2017, probably something around there. Okay. So you can see we've got our own models giving us some pretty good information. How do we make it even better? You know, because it's still hallucinating, you know, and, you know, llama two, I think, has been trained with more up to date information than GPT for it doesn't have the September 2021 cutoff. But it, you know, it's still got a knowledge cutoff. You know, we would like to be able to use the most up to date information. We want to use the right information to answer these questions as well as possible. So to do this, we can use something called retrieval augmented generation. So what happens with retrieval augmented generation is when we take the question we've been asked, like, who is Jeremy Houd? And then we say, okay, let's try and search for documents that may help us answer that question. So obviously we would expect, for example, Wikipedia to be useful. And then what we do is we say, okay, with that information, let's now see if we can tell the language model about what we found and then have it answer the question. So let me show you. So let's actually grab a Wikipedia Python package. We will scrape Wikipedia, grabbing the Jeremy Howard webpage. And so here's the start of the Jeremy Howard Wikipedia page. It has 613 words. Now, generally speaking, these open source models will have a context length of about 2000 or 4000. So the context length is how many tokens can it handle. So that's fine. It'll be able to handle this webpage. And what we're going to do is we're going to ask it the question. So we're going to have here question and with a question. But before that, we're going to say, answer the question with the help of the context. We're going to provide this to the language model. And we're going to say context and they're going to have the whole webpage. So suddenly now our question is going to be a lot bigger. They're prompt. Right. So our prompt now contains the entire webpage, the whole Wikipedia page, followed by a question. And so now it says Jeremy Howard is an Australian data scientist, entrepreneur, an educator, known for his work in deep learning, co-founder of FastAI, teaches courses, develops software, conducts research. Used to be, yeah, okay, it's perfect. So it's actually done a really good job. Like if somebody asked me to send them a, you know, 100 word bio, that would actually probably be better than I would have written myself. And just so even though I asked for 300 tokens, it actually got sent back the end of stream token. And so it knows to stop at this point. Well, that's all very well. But how do we know to pass in the Jeremy Howard Wikipedia page? Well, the way we know which Wikipedia page to pass in is that we can use another model to tell us which web page or which document is the most useful for answering a question. And the way we do that is we can use something called Sentence Transformer. And we can use a special kind of model that's specifically designed to take a document and turn it into a bunch of activations where two documents that are similar will have similar activations. So let me just, let me show you what I mean. What I'm going to do is I'm going to grab just the first paragraph of my Wikipedia page. And I'm going to grab the first paragraph of Tony Blair's Wikipedia page. Okay, so we're pretty different people, right? This is just like a really simple, small example. And I'm going to then call this model, I'm going to say encode, and I'm going to encode my Wikipedia first paragraph, Tony Blair's first paragraph, and the question, which was, who is Jeremy Howard? And it's going to pass back a 384 long vector of embeddings for the question for me and for Tony Blair. And what I can now do is I can calculate the similarity between the question and the Jeremy Howard Wikipedia page. And I can also do it for the question versus the Tony Blair Wikipedia page. And as you can see, it's higher for me. And so that tells you that if you're trying to figure out what document to use to help you answer this question, better off using the Jeremy Howard Wikipedia page than the Tony Blair Wikipedia page. So if you had a few hundred documents you were thinking of using to give back to the model as context to help it answer a question, you could literally just pass them all through to encode, go through each one at a time and see which is closest. When you've got thousands or millions of documents, you can use something called a vector database, where basically as a one-off thing, you go through and you encode all of your documents. And so in fact, there's lots of pre-built systems for this. Here's an example of one called H2O GPT. And this is just something that I've got running here on my computer. It's just an open source thing written in Python and sitting here running on port 7860. And so I've just gone to localhost 7860. And what I did was I just uploaded, I just clicked upload and uploaded a bunch of papers. In fact, I might be able to see it better. Yeah, here we go, a bunch of papers. And so we could look at, can we search? Yeah, I can. So for example, we can look at the ULM fit paper that Sir Bruder and I did. And you can see it's taken the PDF and turned it into slightly crappily, a text format. And then it's created an embedding for each section. So I could then ask it, you know, what is ULM fit? And I'll hit enter. And you can see here it's now actually saying based on the information provided in the context. So it's showing us it's been given some context. What context did it get? So here are the things that it found, right? So it's being sent this context. So this is kind of citations. A goal of ULM fit proves a performance by leveraging the knowledge and adapting it to the specific task at hand. Now, what techniques be more specific? Does ULM fit? Let's see how it goes. Okay, there we go. So here's the three steps, pre-trained, fine-tuned, fine-tuned. Cool. So you can see it's not bad, right? It's not amazing. Like, you know, the context in this particular case is pretty small. And in particular, if you think about how that embedding thing worked, you can't really use like the normal kind of follow-up. So for example, if I say it says fine-tuning a classifier, so I could say what classifier is used. Now, the problem is that there's no context here being sent to the embedding model. So it's actually going to have no idea I'm talking about ULM fit. So generally speaking, it's going to do a terrible job. Yeah, see, it says used as a Roberta model, but it's not. But if I look at the sources, it's no longer actually referring to Howard and Ruder. So anyway, you can see the basic idea. This is called retrieval augmented generation, R-A-G. And it's a nifty approach, but you have to do it with some care. And so there are lots of these private GPT things out there. And actually the H2O GPT web page is a fantastic job of listing lots of them and comparing. So as you can see, if you want to run a private GPT, there's no shortage of options. And you can have your retrieval augmented generation. I haven't tried, I've only tried this one H2O GPT. I don't love it. It's all right. So finally, I want to talk about what's perhaps the most interesting option we have, which is to do our own fine tuning. And fine tuning is cool because rather than just retrieving documents which might have useful context, we can actually change our model to behave based on the documents that we have available. I'm going to show you a really interesting example of fine tuning here. What we're going to do is we're going to fine tune using this no SQL data set. And it's got examples of like a schema for a table in a database, a question, and then the answer is the correct SQL to solve that question using that database schema. And so I'm hoping we could use this to create a, you know, it could be a handy tool for business users where they type some English question and SQL generated for them automatically. Don't know if it actually work in practice or not, but this is just a little fun idea. I thought we'd try out. I know there's lots of startups and stuff out there trying to do this more seriously. But this is, this is quite cool because it actually got it working today in just a couple of hours. So what we do is we use the hugging face data sets library. And what that does, just like the hugging face hub has lots of models stored on it, hugging face data sets has lots of data sets stored on it. And so instead of using transformers, which is what we use to grab models, we use data sets and we just pass in the name of the person and the name of their repo and it grabs the data set. And so we can take a look at it and it just has a training set with features. And so then I can have a look at the training set. So here's an example, which looks a bit like what we've just seen. So what we do now is we want to fine tune a model. So we can do that in in a notebook from scratch takes, I don't know, a hundred or so lines of code is not too much. But given the time constraints here and also like I thought, why not? Why don't we just use something that's ready to go? So for example, there's something called axolotl, which is quite nice in my opinion. Here it is here. Another very nice open source piece of software. And again, you can just pip install it. And it's got things like GPTQ and 16 bit and so forth ready to go. And so what I did was I it basically has a whole bunch of examples of things that it already knows how to do. It's got llama to example. So I copied the llama to example and I created a SQL example. So basically just told it, this is the path to the data set that I want. This is the type and everything else pretty much I left the same. And then I just ran this command, which is from there. Read me accelerate launch axolotl passed in my YAML. And that took about an hour on my GPU. And at the end of the hour, it had created a QLaura out directory. Q stands for quantize. It's because I was creating a smaller quantized model. Laura, I'm not going to talk about today, but Laura is a very cool thing that basically another thing that makes your models smaller and also handles can use bigger models on smaller GPUs for training. So I trained it. And then I thought, okay, let's create our own one. So we're going to have this context and this question get the count of competition hosts by theme. And I'm not going to pass it an answer. So I'll just ignore that. So again, I found out what prompt they were using and created a SQL prompt function. And so here's what I'm going to do. Use the following contextual information to answer the question context create table. So there's the context question list or competition hosts sorted in ascending order. And then I tokenized that called generate. And the answer was select count hosts comma theme from farm competition group by theme. That is correct. So I think that's pretty remarkable. We have just built, you know, so it took me like an hour to figure out how to do it and then an hour to actually do the training. And at the end of that, we've actually got something which, which is converting pros into SQL based on a schema. So I think that's, that's a really exciting idea. The only other thing I do want to briefly mention is, is doing stuff on max. If you've got a Mac, you, there's a couple of really good options. The options are MLC and llama dot CPP currently MLC in particular. I think it's kind of underappreciated. It's a really nice project where you can run language models on literally iPhone, Android, web browsers, everything. It's really cool. And, and so I'm now actually on my Mac here. And I've got a tiny little Python program called chat. And it's going to import chat module and it's going to import a discretized seven B. And that's going to ask the question, what is the meaning of life? So let's try it. Python chat.py. And again, I just installed this earlier today. I haven't done that much stuff on max before, but I was pretty impressed to see that it is doing a good job here. What is the meaning of life is complex and philosophical. Some people might find meaning in their relationships with others. They're impacting the world, et cetera, et cetera. Okay. And it's doing 9.6 tokens per second. So there you go. So there is running a model on a Mac. And then another option that you've probably heard about is llama dot CPP. Llama dot CPP runs on lots of different things as well, including Max and also on CUDA. It uses a different format called gguf. And again, you can use it from Python. Even though that was a CPP thing, it's got a Python wrapper. So you can just download, again, from Huggingface, a gguf file. So you can just go through and there's lots of different ones. They're all documented as to what's what. You can pick how big a file you want. You can download it. And then you just say, okay, llama model path equals passing that gguf file. It spits out lots and lots and lots of gunk. And then you can say, okay. So if I called that LLM, you can then say LLM question. Name the planets of the solar system, 32 tokens. And there we go. Run Pluto. No longer considered a planet. Two, Mercury, three, Venus, four, Earth, Mars, six. Oh, no, right out of tokens. So again, you know, it's just to show you here. There are all these different options. You know, I would say, you know, if you've got a NVIDIA graphics card and you're a reasonably capable Python programmer, you probably be one of you use PyTorch and the Huggingface ecosystem. But, you know, I think, you know, these things might change over time as well. And certainly a lot of stuff is coming into Llama pretty quickly now and it's developing very fast. As you can see, there's a lot of stuff that you can do right now with language models, particularly if you feel pretty comfortable as a Python programmer. I think it's a really exciting time to get involved. In some ways, it's a frustrating time to get involved because, you know, it's very early and a lot of stuff has weird little edge cases and it's tricky to install and stuff like that. There's a lot of great Discord channels. However, FastAI have our own Discord channel, so feel free to just Google for FastAI Discord and drop in. We've got a channel called Generative. You feel free to ask any questions or tell us about what you're finding. Yeah, it's definitely something where you want to be getting help from other people on this journey because it is very early days. And, you know, people are still figuring things out as we go. But I think it's an exciting time to be doing this stuff and I'm really enjoying it. And I hope that this has given some of you a useful starting point on your own journey. So I hope you found this useful. Thanks for listening. Bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.0, "text": " Hi, I am Jeremy Howard from fast.ai, and this is a Hackers Guide to Language Models.", "tokens": [50364, 2421, 11, 286, 669, 17809, 17626, 490, 2370, 13, 1301, 11, 293, 341, 307, 257, 35170, 433, 18727, 281, 24445, 6583, 1625, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18436909914016725, "compression_ratio": 1.55, "no_speech_prob": 0.006095029879361391}, {"id": 1, "seek": 0, "start": 8.0, "end": 19.0, "text": " When I say a Hackers Guide, what we're going to be looking at is a code-first approach to understanding how to use language models in practice.", "tokens": [50764, 1133, 286, 584, 257, 35170, 433, 18727, 11, 437, 321, 434, 516, 281, 312, 1237, 412, 307, 257, 3089, 12, 29581, 3109, 281, 3701, 577, 281, 764, 2856, 5245, 294, 3124, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18436909914016725, "compression_ratio": 1.55, "no_speech_prob": 0.006095029879361391}, {"id": 2, "seek": 0, "start": 19.0, "end": 24.0, "text": " So before we get started, we should probably talk about what is a language model.", "tokens": [51314, 407, 949, 321, 483, 1409, 11, 321, 820, 1391, 751, 466, 437, 307, 257, 2856, 2316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18436909914016725, "compression_ratio": 1.55, "no_speech_prob": 0.006095029879361391}, {"id": 3, "seek": 2400, "start": 25.0, "end": 34.0, "text": " I would say that this is going to make more sense if you know the kind of basics of deep learning.", "tokens": [50414, 286, 576, 584, 300, 341, 307, 516, 281, 652, 544, 2020, 498, 291, 458, 264, 733, 295, 14688, 295, 2452, 2539, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07063106792729075, "compression_ratio": 1.5544041450777202, "no_speech_prob": 0.23898780345916748}, {"id": 4, "seek": 2400, "start": 34.0, "end": 40.0, "text": " If you don't, I think you'll still get plenty out of it, and there'll be plenty of things you can do.", "tokens": [50864, 759, 291, 500, 380, 11, 286, 519, 291, 603, 920, 483, 7140, 484, 295, 309, 11, 293, 456, 603, 312, 7140, 295, 721, 291, 393, 360, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07063106792729075, "compression_ratio": 1.5544041450777202, "no_speech_prob": 0.23898780345916748}, {"id": 5, "seek": 2400, "start": 40.0, "end": 47.0, "text": " But if you do have a chance, I would recommend checking out course.fast.ai, which is a free course.", "tokens": [51164, 583, 498, 291, 360, 362, 257, 2931, 11, 286, 576, 2748, 8568, 484, 1164, 13, 7011, 13, 1301, 11, 597, 307, 257, 1737, 1164, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07063106792729075, "compression_ratio": 1.5544041450777202, "no_speech_prob": 0.23898780345916748}, {"id": 6, "seek": 4700, "start": 47.0, "end": 57.0, "text": " And specifically, if you could at least kind of watch, if not work through the first five lessons,", "tokens": [50364, 400, 4682, 11, 498, 291, 727, 412, 1935, 733, 295, 1159, 11, 498, 406, 589, 807, 264, 700, 1732, 8820, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07138557183115106, "compression_ratio": 1.6009852216748768, "no_speech_prob": 0.05495202913880348}, {"id": 7, "seek": 4700, "start": 57.0, "end": 69.0, "text": " that would get you to a point where you understand all the basic fundamentals of deep learning that will make this lesson tutorial make even more sense.", "tokens": [50864, 300, 576, 483, 291, 281, 257, 935, 689, 291, 1223, 439, 264, 3875, 29505, 295, 2452, 2539, 300, 486, 652, 341, 6898, 7073, 652, 754, 544, 2020, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07138557183115106, "compression_ratio": 1.6009852216748768, "no_speech_prob": 0.05495202913880348}, {"id": 8, "seek": 4700, "start": 69.0, "end": 73.0, "text": " Maybe I shouldn't call this a tutorial, it's more of a quick run-through.", "tokens": [51464, 2704, 286, 4659, 380, 818, 341, 257, 7073, 11, 309, 311, 544, 295, 257, 1702, 1190, 12, 11529, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07138557183115106, "compression_ratio": 1.6009852216748768, "no_speech_prob": 0.05495202913880348}, {"id": 9, "seek": 7300, "start": 73.0, "end": 82.0, "text": " So I'm going to try to run through all the basic ideas of language models, how to use them, both open source ones and open AI based ones.", "tokens": [50364, 407, 286, 478, 516, 281, 853, 281, 1190, 807, 439, 264, 3875, 3487, 295, 2856, 5245, 11, 577, 281, 764, 552, 11, 1293, 1269, 4009, 2306, 293, 1269, 7318, 2361, 2306, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06381340380068179, "compression_ratio": 1.7877551020408162, "no_speech_prob": 0.0746549516916275}, {"id": 10, "seek": 7300, "start": 82.0, "end": 87.0, "text": " And it's all going to be based using code as much as possible.", "tokens": [50814, 400, 309, 311, 439, 516, 281, 312, 2361, 1228, 3089, 382, 709, 382, 1944, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06381340380068179, "compression_ratio": 1.7877551020408162, "no_speech_prob": 0.0746549516916275}, {"id": 11, "seek": 7300, "start": 87.0, "end": 92.0, "text": " So let's start by talking about what a language model is.", "tokens": [51064, 407, 718, 311, 722, 538, 1417, 466, 437, 257, 2856, 2316, 307, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06381340380068179, "compression_ratio": 1.7877551020408162, "no_speech_prob": 0.0746549516916275}, {"id": 12, "seek": 7300, "start": 92.0, "end": 101.0, "text": " And so as you might have heard before, a language model is something that knows how to predict the next word of a sentence or knows how to fill in the missing words of a sentence.", "tokens": [51314, 400, 370, 382, 291, 1062, 362, 2198, 949, 11, 257, 2856, 2316, 307, 746, 300, 3255, 577, 281, 6069, 264, 958, 1349, 295, 257, 8174, 420, 3255, 577, 281, 2836, 294, 264, 5361, 2283, 295, 257, 8174, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06381340380068179, "compression_ratio": 1.7877551020408162, "no_speech_prob": 0.0746549516916275}, {"id": 13, "seek": 10100, "start": 101.0, "end": 108.0, "text": " And we can look at an example of one. Open AI has a language model, text of enchi 003.", "tokens": [50364, 400, 321, 393, 574, 412, 364, 1365, 295, 472, 13, 7238, 7318, 575, 257, 2856, 2316, 11, 2487, 295, 465, 8036, 7143, 18, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15140577804210575, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.056602075695991516}, {"id": 14, "seek": 10100, "start": 108.0, "end": 116.0, "text": " And we can play with it by passing in some words and ask it to predict what the next words might be.", "tokens": [50714, 400, 321, 393, 862, 365, 309, 538, 8437, 294, 512, 2283, 293, 1029, 309, 281, 6069, 437, 264, 958, 2283, 1062, 312, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15140577804210575, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.056602075695991516}, {"id": 15, "seek": 10100, "start": 116.0, "end": 125.0, "text": " So if we pass in, when I arrived back at the Panda breeding facility after the extraordinary reign of live frogs, I couldn't believe what I saw.", "tokens": [51114, 407, 498, 321, 1320, 294, 11, 562, 286, 6678, 646, 412, 264, 44207, 26051, 8973, 934, 264, 10581, 20350, 295, 1621, 37107, 11, 286, 2809, 380, 1697, 437, 286, 1866, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15140577804210575, "compression_ratio": 1.4887892376681615, "no_speech_prob": 0.056602075695991516}, {"id": 16, "seek": 12500, "start": 125.0, "end": 129.0, "text": " Or I just came up with that yesterday and I thought what might happen next.", "tokens": [50364, 1610, 286, 445, 1361, 493, 365, 300, 5186, 293, 286, 1194, 437, 1062, 1051, 958, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 17, "seek": 12500, "start": 129.0, "end": 132.0, "text": " So kind of fun for creative brainstorming.", "tokens": [50564, 407, 733, 295, 1019, 337, 5880, 35245, 278, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 18, "seek": 12500, "start": 132.0, "end": 135.0, "text": " There's a nice site called nat.dev.", "tokens": [50714, 821, 311, 257, 1481, 3621, 1219, 2249, 13, 40343, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 19, "seek": 12500, "start": 135.0, "end": 139.0, "text": " Nat.dev lets us play with a variety of language models.", "tokens": [50864, 6821, 13, 40343, 6653, 505, 862, 365, 257, 5673, 295, 2856, 5245, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 20, "seek": 12500, "start": 139.0, "end": 144.0, "text": " And here I've selected text of enchi 003 and I'll hit submit.", "tokens": [51064, 400, 510, 286, 600, 8209, 2487, 295, 465, 8036, 7143, 18, 293, 286, 603, 2045, 10315, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 21, "seek": 12500, "start": 144.0, "end": 147.0, "text": " And it starts printing stuff out.", "tokens": [51314, 400, 309, 3719, 14699, 1507, 484, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 22, "seek": 12500, "start": 147.0, "end": 151.0, "text": " The pandas were happily playing and eating the frogs that had fallen in the sky.", "tokens": [51464, 440, 4565, 296, 645, 19909, 2433, 293, 3936, 264, 37107, 300, 632, 11547, 294, 264, 5443, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14507837749662852, "compression_ratio": 1.548, "no_speech_prob": 0.3660821318626404}, {"id": 23, "seek": 15100, "start": 151.0, "end": 156.0, "text": " There's an amazing site to see these animals taking advantage of such a unique opportunity.", "tokens": [50364, 821, 311, 364, 2243, 3621, 281, 536, 613, 4882, 1940, 5002, 295, 1270, 257, 3845, 2650, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09372461567754331, "compression_ratio": 1.625, "no_speech_prob": 0.12925845384597778}, {"id": 24, "seek": 15100, "start": 156.0, "end": 160.0, "text": " The staff took quick measures to ensure the safety of the pandas and the frogs.", "tokens": [50614, 440, 3525, 1890, 1702, 8000, 281, 5586, 264, 4514, 295, 264, 4565, 296, 293, 264, 37107, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09372461567754331, "compression_ratio": 1.625, "no_speech_prob": 0.12925845384597778}, {"id": 25, "seek": 15100, "start": 160.0, "end": 165.0, "text": " So there you go. That's what happened after the extraordinary reign of live frogs at the Panda breeding facility.", "tokens": [50814, 407, 456, 291, 352, 13, 663, 311, 437, 2011, 934, 264, 10581, 20350, 295, 1621, 37107, 412, 264, 44207, 26051, 8973, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09372461567754331, "compression_ratio": 1.625, "no_speech_prob": 0.12925845384597778}, {"id": 26, "seek": 15100, "start": 165.0, "end": 172.0, "text": " You'll see here that I've enabled show probabilities, which is a thing in nat.dev where it shows.", "tokens": [51064, 509, 603, 536, 510, 300, 286, 600, 15172, 855, 33783, 11, 597, 307, 257, 551, 294, 2249, 13, 40343, 689, 309, 3110, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09372461567754331, "compression_ratio": 1.625, "no_speech_prob": 0.12925845384597778}, {"id": 27, "seek": 15100, "start": 172.0, "end": 174.0, "text": " Well, let's take a look.", "tokens": [51414, 1042, 11, 718, 311, 747, 257, 574, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09372461567754331, "compression_ratio": 1.625, "no_speech_prob": 0.12925845384597778}, {"id": 28, "seek": 15100, "start": 174.0, "end": 177.0, "text": " It's pretty likely the next word here is going to be there.", "tokens": [51514, 467, 311, 1238, 3700, 264, 958, 1349, 510, 307, 516, 281, 312, 456, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09372461567754331, "compression_ratio": 1.625, "no_speech_prob": 0.12925845384597778}, {"id": 29, "seek": 17700, "start": 177.0, "end": 182.0, "text": " And after that, since we're talking about a panda breeding facility, it's going to be pandas were.", "tokens": [50364, 400, 934, 300, 11, 1670, 321, 434, 1417, 466, 257, 46685, 26051, 8973, 11, 309, 311, 516, 281, 312, 4565, 296, 645, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 30, "seek": 17700, "start": 182.0, "end": 183.0, "text": " And what were they doing?", "tokens": [50614, 400, 437, 645, 436, 884, 30, 50664], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 31, "seek": 17700, "start": 183.0, "end": 185.0, "text": " Well, they could have been doing a few things.", "tokens": [50664, 1042, 11, 436, 727, 362, 668, 884, 257, 1326, 721, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 32, "seek": 17700, "start": 185.0, "end": 190.0, "text": " They could have been doing something happily or the pandas were having the pandas were out.", "tokens": [50764, 814, 727, 362, 668, 884, 746, 19909, 420, 264, 4565, 296, 645, 1419, 264, 4565, 296, 645, 484, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 33, "seek": 17700, "start": 190.0, "end": 191.0, "text": " The pandas were playing.", "tokens": [51014, 440, 4565, 296, 645, 2433, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 34, "seek": 17700, "start": 191.0, "end": 194.0, "text": " So it picked the most likely.", "tokens": [51064, 407, 309, 6183, 264, 881, 3700, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 35, "seek": 17700, "start": 194.0, "end": 197.0, "text": " It thought it was 20% likely it's going to be happily.", "tokens": [51214, 467, 1194, 309, 390, 945, 4, 3700, 309, 311, 516, 281, 312, 19909, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 36, "seek": 17700, "start": 197.0, "end": 199.0, "text": " And what were they happily doing?", "tokens": [51364, 400, 437, 645, 436, 19909, 884, 30, 51464], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 37, "seek": 17700, "start": 199.0, "end": 206.0, "text": " Could have been playing, hopping, eating and so forth.", "tokens": [51464, 7497, 362, 668, 2433, 11, 47199, 11, 3936, 293, 370, 5220, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10709568786621093, "compression_ratio": 1.9493670886075949, "no_speech_prob": 0.044655878096818924}, {"id": 38, "seek": 20600, "start": 206.0, "end": 211.0, "text": " So they're eating the frogs that and then had almost certainly.", "tokens": [50364, 407, 436, 434, 3936, 264, 37107, 300, 293, 550, 632, 1920, 3297, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08876432072032582, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.0022509603295475245}, {"id": 39, "seek": 20600, "start": 211.0, "end": 217.0, "text": " So you can see what it's doing at each point is it's predicting the probability of a variety of possible next words.", "tokens": [50614, 407, 291, 393, 536, 437, 309, 311, 884, 412, 1184, 935, 307, 309, 311, 32884, 264, 8482, 295, 257, 5673, 295, 1944, 958, 2283, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08876432072032582, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.0022509603295475245}, {"id": 40, "seek": 20600, "start": 217.0, "end": 225.0, "text": " And depending on how you set it up, it will either pick the most likely one every time or you can change,", "tokens": [50914, 400, 5413, 322, 577, 291, 992, 309, 493, 11, 309, 486, 2139, 1888, 264, 881, 3700, 472, 633, 565, 420, 291, 393, 1319, 11, 51314], "temperature": 0.0, "avg_logprob": -0.08876432072032582, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.0022509603295475245}, {"id": 41, "seek": 20600, "start": 225.0, "end": 233.0, "text": " muck around with things like p values and temperatures to change what comes up.", "tokens": [51314, 275, 1134, 926, 365, 721, 411, 280, 4190, 293, 12633, 281, 1319, 437, 1487, 493, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08876432072032582, "compression_ratio": 1.6194690265486726, "no_speech_prob": 0.0022509603295475245}, {"id": 42, "seek": 23300, "start": 233.0, "end": 239.0, "text": " So at each time, then it will give us a different result.", "tokens": [50364, 407, 412, 1184, 565, 11, 550, 309, 486, 976, 505, 257, 819, 1874, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11759340763092041, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.011327170766890049}, {"id": 43, "seek": 23300, "start": 239.0, "end": 243.0, "text": " And this is kind of fun.", "tokens": [50664, 400, 341, 307, 733, 295, 1019, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11759340763092041, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.011327170766890049}, {"id": 44, "seek": 23300, "start": 243.0, "end": 245.0, "text": " Frogs perched on the heads of some of the pandas.", "tokens": [50864, 40103, 82, 680, 19318, 322, 264, 8050, 295, 512, 295, 264, 4565, 296, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11759340763092041, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.011327170766890049}, {"id": 45, "seek": 23300, "start": 245.0, "end": 249.0, "text": " It was an amazing sight, et cetera, et cetera.", "tokens": [50964, 467, 390, 364, 2243, 7860, 11, 1030, 11458, 11, 1030, 11458, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11759340763092041, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.011327170766890049}, {"id": 46, "seek": 23300, "start": 249.0, "end": 250.0, "text": " Okay.", "tokens": [51164, 1033, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11759340763092041, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.011327170766890049}, {"id": 47, "seek": 23300, "start": 250.0, "end": 258.0, "text": " So that's what a language model does.", "tokens": [51214, 407, 300, 311, 437, 257, 2856, 2316, 775, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11759340763092041, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.011327170766890049}, {"id": 48, "seek": 25800, "start": 258.0, "end": 263.0, "text": " Now you might notice here it hasn't predicted pandas.", "tokens": [50364, 823, 291, 1062, 3449, 510, 309, 6132, 380, 19147, 4565, 296, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 49, "seek": 25800, "start": 263.0, "end": 270.0, "text": " It's predicted panned and then separately us.", "tokens": [50614, 467, 311, 19147, 280, 5943, 293, 550, 14759, 505, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 50, "seek": 25800, "start": 270.0, "end": 271.0, "text": " Okay.", "tokens": [50964, 1033, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 51, "seek": 25800, "start": 271.0, "end": 272.0, "text": " After panned, it's going to be us.", "tokens": [51014, 2381, 280, 5943, 11, 309, 311, 516, 281, 312, 505, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 52, "seek": 25800, "start": 272.0, "end": 274.0, "text": " So it's not always a whole word.", "tokens": [51064, 407, 309, 311, 406, 1009, 257, 1379, 1349, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 53, "seek": 25800, "start": 274.0, "end": 278.0, "text": " Here it's un and then harmed.", "tokens": [51164, 1692, 309, 311, 517, 293, 550, 41478, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 54, "seek": 25800, "start": 278.0, "end": 281.0, "text": " Oh, actually it's un ha mood.", "tokens": [51364, 876, 11, 767, 309, 311, 517, 324, 9268, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 55, "seek": 25800, "start": 281.0, "end": 284.0, "text": " So you can see that it's not always predicting words,", "tokens": [51514, 407, 291, 393, 536, 300, 309, 311, 406, 1009, 32884, 2283, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 56, "seek": 25800, "start": 284.0, "end": 287.0, "text": " specifically what it's doing is predicting tokens.", "tokens": [51664, 4682, 437, 309, 311, 884, 307, 32884, 22667, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1695097754983341, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.025545932352542877}, {"id": 57, "seek": 28700, "start": 287.0, "end": 294.0, "text": " Tokens are either whole words or sub word units, pieces of a word,", "tokens": [50364, 11036, 694, 366, 2139, 1379, 2283, 420, 1422, 1349, 6815, 11, 3755, 295, 257, 1349, 11, 50714], "temperature": 0.0, "avg_logprob": -0.12178044848971897, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.01149763073772192}, {"id": 58, "seek": 28700, "start": 294.0, "end": 300.0, "text": " or it could even be punctuation or numbers or so forth.", "tokens": [50714, 420, 309, 727, 754, 312, 27006, 16073, 420, 3547, 420, 370, 5220, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12178044848971897, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.01149763073772192}, {"id": 59, "seek": 28700, "start": 300.0, "end": 302.0, "text": " So let's have a look at how that works.", "tokens": [51014, 407, 718, 311, 362, 257, 574, 412, 577, 300, 1985, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12178044848971897, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.01149763073772192}, {"id": 60, "seek": 28700, "start": 302.0, "end": 310.0, "text": " So for example, we can use the actual, it's called tokenization to create tokens from a string.", "tokens": [51114, 407, 337, 1365, 11, 321, 393, 764, 264, 3539, 11, 309, 311, 1219, 14862, 2144, 281, 1884, 22667, 490, 257, 6798, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12178044848971897, "compression_ratio": 1.5087719298245614, "no_speech_prob": 0.01149763073772192}, {"id": 61, "seek": 31000, "start": 310.0, "end": 315.0, "text": " We can use the same tokenizer that GPT users by using tick token.", "tokens": [50364, 492, 393, 764, 264, 912, 14862, 6545, 300, 26039, 51, 5022, 538, 1228, 5204, 14862, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14887994335543725, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.24477314949035645}, {"id": 62, "seek": 31000, "start": 315.0, "end": 322.0, "text": " And we can specifically say we want to use the same tokenizer that that model text eventually 003 users.", "tokens": [50614, 400, 321, 393, 4682, 584, 321, 528, 281, 764, 264, 912, 14862, 6545, 300, 300, 2316, 2487, 4728, 7143, 18, 5022, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14887994335543725, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.24477314949035645}, {"id": 63, "seek": 31000, "start": 322.0, "end": 328.0, "text": " And so, for example, when I earlier tried this, it talked about the frog splashing.", "tokens": [50964, 400, 370, 11, 337, 1365, 11, 562, 286, 3071, 3031, 341, 11, 309, 2825, 466, 264, 17259, 45981, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14887994335543725, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.24477314949035645}, {"id": 64, "seek": 31000, "start": 328.0, "end": 332.0, "text": " And so I thought, well, we'll encode they are splashing.", "tokens": [51264, 400, 370, 286, 1194, 11, 731, 11, 321, 603, 2058, 1429, 436, 366, 45981, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14887994335543725, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.24477314949035645}, {"id": 65, "seek": 31000, "start": 332.0, "end": 335.0, "text": " And the result is a bunch of numbers.", "tokens": [51464, 400, 264, 1874, 307, 257, 3840, 295, 3547, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14887994335543725, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.24477314949035645}, {"id": 66, "seek": 33500, "start": 335.0, "end": 342.0, "text": " And what those numbers are, they basically just look ups into a vocabulary that open AI in this case created.", "tokens": [50364, 400, 437, 729, 3547, 366, 11, 436, 1936, 445, 574, 15497, 666, 257, 19864, 300, 1269, 7318, 294, 341, 1389, 2942, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13738650418399426, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.006287950556725264}, {"id": 67, "seek": 33500, "start": 342.0, "end": 346.0, "text": " And if you train your own models, you'll be automatically creating or your code will create.", "tokens": [50714, 400, 498, 291, 3847, 428, 1065, 5245, 11, 291, 603, 312, 6772, 4084, 420, 428, 3089, 486, 1884, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13738650418399426, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.006287950556725264}, {"id": 68, "seek": 33500, "start": 346.0, "end": 357.0, "text": " And if I then decode those, it says, oh, these numbers are they space are space spool ashing.", "tokens": [50914, 400, 498, 286, 550, 979, 1429, 729, 11, 309, 1619, 11, 1954, 11, 613, 3547, 366, 436, 1901, 366, 1901, 637, 1092, 382, 571, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13738650418399426, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.006287950556725264}, {"id": 69, "seek": 33500, "start": 357.0, "end": 359.0, "text": " And so put that all together.", "tokens": [51464, 400, 370, 829, 300, 439, 1214, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13738650418399426, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.006287950556725264}, {"id": 70, "seek": 33500, "start": 359.0, "end": 360.0, "text": " They are splashing.", "tokens": [51564, 814, 366, 45981, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13738650418399426, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.006287950556725264}, {"id": 71, "seek": 36000, "start": 360.0, "end": 372.0, "text": " So you can see that the start of a word is the space before it is also being encoded here.", "tokens": [50364, 407, 291, 393, 536, 300, 264, 722, 295, 257, 1349, 307, 264, 1901, 949, 309, 307, 611, 885, 2058, 12340, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06938634599958148, "compression_ratio": 1.4697986577181208, "no_speech_prob": 0.008840215392410755}, {"id": 72, "seek": 36000, "start": 372.0, "end": 380.0, "text": " So these language models are quite neat that they can work at all.", "tokens": [50964, 407, 613, 2856, 5245, 366, 1596, 10654, 300, 436, 393, 589, 412, 439, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06938634599958148, "compression_ratio": 1.4697986577181208, "no_speech_prob": 0.008840215392410755}, {"id": 73, "seek": 36000, "start": 380.0, "end": 388.0, "text": " But they're not of themselves really designed to do anything.", "tokens": [51364, 583, 436, 434, 406, 295, 2969, 534, 4761, 281, 360, 1340, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06938634599958148, "compression_ratio": 1.4697986577181208, "no_speech_prob": 0.008840215392410755}, {"id": 74, "seek": 38800, "start": 388.0, "end": 390.0, "text": " Let me explain.", "tokens": [50364, 961, 385, 2903, 13, 50464], "temperature": 0.0, "avg_logprob": -0.19944493910845587, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.07149044424295425}, {"id": 75, "seek": 38800, "start": 390.0, "end": 407.0, "text": " The basic idea of what chat GPT, GPT4, etc. are doing comes from a paper which describes an algorithm that I created back in 2017 called ULM fit.", "tokens": [50464, 440, 3875, 1558, 295, 437, 5081, 26039, 51, 11, 26039, 51, 19, 11, 5183, 13, 366, 884, 1487, 490, 257, 3035, 597, 15626, 364, 9284, 300, 286, 2942, 646, 294, 6591, 1219, 624, 43, 44, 3318, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19944493910845587, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.07149044424295425}, {"id": 76, "seek": 38800, "start": 407.0, "end": 416.0, "text": " And Sebastian Ruder and I wrote a paper up describing the ULM fit approach, which was the one that basically laid out what everybody's doing, how this system works.", "tokens": [51314, 400, 31102, 497, 28230, 293, 286, 4114, 257, 3035, 493, 16141, 264, 624, 43, 44, 3318, 3109, 11, 597, 390, 264, 472, 300, 1936, 9897, 484, 437, 2201, 311, 884, 11, 577, 341, 1185, 1985, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19944493910845587, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.07149044424295425}, {"id": 77, "seek": 41600, "start": 416.0, "end": 419.0, "text": " And the system has three steps.", "tokens": [50364, 400, 264, 1185, 575, 1045, 4439, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0790240207565165, "compression_ratio": 1.597609561752988, "no_speech_prob": 0.0420512855052948}, {"id": 78, "seek": 41600, "start": 419.0, "end": 423.0, "text": " Step one is language model training.", "tokens": [50514, 5470, 472, 307, 2856, 2316, 3097, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0790240207565165, "compression_ratio": 1.597609561752988, "no_speech_prob": 0.0420512855052948}, {"id": 79, "seek": 41600, "start": 423.0, "end": 425.0, "text": " But you'll see this is actually from the paper.", "tokens": [50714, 583, 291, 603, 536, 341, 307, 767, 490, 264, 3035, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0790240207565165, "compression_ratio": 1.597609561752988, "no_speech_prob": 0.0420512855052948}, {"id": 80, "seek": 41600, "start": 425.0, "end": 427.0, "text": " We actually described it as pre-training.", "tokens": [50814, 492, 767, 7619, 309, 382, 659, 12, 17227, 1760, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0790240207565165, "compression_ratio": 1.597609561752988, "no_speech_prob": 0.0420512855052948}, {"id": 81, "seek": 41600, "start": 427.0, "end": 434.0, "text": " Now what language model pre-training does is this is the thing which predicts the next word of a sentence.", "tokens": [50914, 823, 437, 2856, 2316, 659, 12, 17227, 1760, 775, 307, 341, 307, 264, 551, 597, 6069, 82, 264, 958, 1349, 295, 257, 8174, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0790240207565165, "compression_ratio": 1.597609561752988, "no_speech_prob": 0.0420512855052948}, {"id": 82, "seek": 41600, "start": 434.0, "end": 444.0, "text": " And so in the original ULM fit paper, so the algorithm I developed in 2017, then Sebastian Ruder and I wrote it up in 2018, early 2018.", "tokens": [51264, 400, 370, 294, 264, 3380, 624, 43, 44, 3318, 3035, 11, 370, 264, 9284, 286, 4743, 294, 6591, 11, 550, 31102, 497, 28230, 293, 286, 4114, 309, 493, 294, 6096, 11, 2440, 6096, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0790240207565165, "compression_ratio": 1.597609561752988, "no_speech_prob": 0.0420512855052948}, {"id": 83, "seek": 44400, "start": 444.0, "end": 449.0, "text": " What I originally did was I trained this language model on Wikipedia.", "tokens": [50364, 708, 286, 7993, 630, 390, 286, 8895, 341, 2856, 2316, 322, 28999, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06575461075856136, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.029295433312654495}, {"id": 84, "seek": 44400, "start": 449.0, "end": 456.0, "text": " Now what that meant is I took a neural network and a neural network is just a function.", "tokens": [50614, 823, 437, 300, 4140, 307, 286, 1890, 257, 18161, 3209, 293, 257, 18161, 3209, 307, 445, 257, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06575461075856136, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.029295433312654495}, {"id": 85, "seek": 44400, "start": 456.0, "end": 461.0, "text": " If you don't know what it is, it's just a mathematical function that's extremely flexible and it's got lots and lots of parameters.", "tokens": [50964, 759, 291, 500, 380, 458, 437, 309, 307, 11, 309, 311, 445, 257, 18894, 2445, 300, 311, 4664, 11358, 293, 309, 311, 658, 3195, 293, 3195, 295, 9834, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06575461075856136, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.029295433312654495}, {"id": 86, "seek": 44400, "start": 461.0, "end": 470.0, "text": " And initially it can't do anything, but using stochastic gradient descent or SGD, you can teach it to do almost anything if you give it examples.", "tokens": [51214, 400, 9105, 309, 393, 380, 360, 1340, 11, 457, 1228, 342, 8997, 2750, 16235, 23475, 420, 34520, 35, 11, 291, 393, 2924, 309, 281, 360, 1920, 1340, 498, 291, 976, 309, 5110, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06575461075856136, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.029295433312654495}, {"id": 87, "seek": 47000, "start": 470.0, "end": 477.0, "text": " And so I gave it lots of examples of sentences from Wikipedia, so for example from the Wikipedia article for the birds.", "tokens": [50364, 400, 370, 286, 2729, 309, 3195, 295, 5110, 295, 16579, 490, 28999, 11, 370, 337, 1365, 490, 264, 28999, 7222, 337, 264, 9009, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10127116694594875, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.06950350105762482}, {"id": 88, "seek": 47000, "start": 477.0, "end": 486.0, "text": " The birds is a 1963 American natural horror thriller film produced and directed by Alfred, and then it would stop.", "tokens": [50714, 440, 9009, 307, 257, 38698, 2665, 3303, 11501, 43009, 2007, 7126, 293, 12898, 538, 28327, 11, 293, 550, 309, 576, 1590, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10127116694594875, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.06950350105762482}, {"id": 89, "seek": 47000, "start": 486.0, "end": 490.0, "text": " And so then the model would have to guess what the next word is.", "tokens": [51164, 400, 370, 550, 264, 2316, 576, 362, 281, 2041, 437, 264, 958, 1349, 307, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10127116694594875, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.06950350105762482}, {"id": 90, "seek": 47000, "start": 490.0, "end": 494.0, "text": " And if it guessed Hitchcock, it would be rewarded.", "tokens": [51364, 400, 498, 309, 21852, 389, 1549, 29779, 11, 309, 576, 312, 29105, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10127116694594875, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.06950350105762482}, {"id": 91, "seek": 47000, "start": 494.0, "end": 497.0, "text": " And if it guessed something else, it would be penalized.", "tokens": [51564, 400, 498, 309, 21852, 746, 1646, 11, 309, 576, 312, 13661, 1602, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10127116694594875, "compression_ratio": 1.7100840336134453, "no_speech_prob": 0.06950350105762482}, {"id": 92, "seek": 49700, "start": 497.0, "end": 500.0, "text": " And effectively, basically it's trying to maximize those rewards.", "tokens": [50364, 400, 8659, 11, 1936, 309, 311, 1382, 281, 19874, 729, 17203, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11112842340578978, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.12243025004863739}, {"id": 93, "seek": 49700, "start": 500.0, "end": 506.0, "text": " It's trying to find a set of weights for this function that makes it more likely that it would predict Hitchcock.", "tokens": [50514, 467, 311, 1382, 281, 915, 257, 992, 295, 17443, 337, 341, 2445, 300, 1669, 309, 544, 3700, 300, 309, 576, 6069, 389, 1549, 29779, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11112842340578978, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.12243025004863739}, {"id": 94, "seek": 49700, "start": 506.0, "end": 518.0, "text": " And then later on in this article, it reads, from Wikipedia, any previously dated Mitch but ended it due to Mitch's cold, overbearing mother Lydia, who dislikes any woman in Mitch's.", "tokens": [50814, 400, 550, 1780, 322, 294, 341, 7222, 11, 309, 15700, 11, 490, 28999, 11, 604, 8046, 23804, 18546, 457, 4590, 309, 3462, 281, 18546, 311, 3554, 11, 670, 650, 1921, 2895, 44038, 11, 567, 43186, 8916, 604, 3059, 294, 18546, 311, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11112842340578978, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.12243025004863739}, {"id": 95, "seek": 51800, "start": 519.0, "end": 528.0, "text": " They can see that filling this in actually requires being pretty thoughtful because there's a bunch of things that kind of logically could go there.", "tokens": [50414, 814, 393, 536, 300, 10623, 341, 294, 767, 7029, 885, 1238, 21566, 570, 456, 311, 257, 3840, 295, 721, 300, 733, 295, 38887, 727, 352, 456, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09706785152484844, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.6886286735534668}, {"id": 96, "seek": 51800, "start": 528.0, "end": 537.0, "text": " Like a woman could be in Mitch's closet, could be in Mitch's house.", "tokens": [50864, 1743, 257, 3059, 727, 312, 294, 18546, 311, 16669, 11, 727, 312, 294, 18546, 311, 1782, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09706785152484844, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.6886286735534668}, {"id": 97, "seek": 51800, "start": 537.0, "end": 545.0, "text": " And so you could probably guess in the Wikipedia article describing the plot of the birds as actually any woman in Mitch's life.", "tokens": [51314, 400, 370, 291, 727, 1391, 2041, 294, 264, 28999, 7222, 16141, 264, 7542, 295, 264, 9009, 382, 767, 604, 3059, 294, 18546, 311, 993, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09706785152484844, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.6886286735534668}, {"id": 98, "seek": 54500, "start": 545.0, "end": 555.0, "text": " Now, to do a good job of solving this problem as well as possible of guessing the next word of sentences,", "tokens": [50364, 823, 11, 281, 360, 257, 665, 1691, 295, 12606, 341, 1154, 382, 731, 382, 1944, 295, 17939, 264, 958, 1349, 295, 16579, 11, 50864], "temperature": 0.0, "avg_logprob": -0.0681721204287046, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.01132667250931263}, {"id": 99, "seek": 54500, "start": 555.0, "end": 563.0, "text": " the neural network is going to have to learn a lot of stuff about the world.", "tokens": [50864, 264, 18161, 3209, 307, 516, 281, 362, 281, 1466, 257, 688, 295, 1507, 466, 264, 1002, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0681721204287046, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.01132667250931263}, {"id": 100, "seek": 54500, "start": 563.0, "end": 573.0, "text": " It's going to learn that there are things called objects, that there's a thing called time, that objects react to each other over time,", "tokens": [51264, 467, 311, 516, 281, 1466, 300, 456, 366, 721, 1219, 6565, 11, 300, 456, 311, 257, 551, 1219, 565, 11, 300, 6565, 4515, 281, 1184, 661, 670, 565, 11, 51764], "temperature": 0.0, "avg_logprob": -0.0681721204287046, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.01132667250931263}, {"id": 101, "seek": 57300, "start": 573.0, "end": 579.0, "text": " that there are things called movies, that movies have directors, that there are people, that people have names and so forth,", "tokens": [50364, 300, 456, 366, 721, 1219, 6233, 11, 300, 6233, 362, 17307, 11, 300, 456, 366, 561, 11, 300, 561, 362, 5288, 293, 370, 5220, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07349374890327454, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.0008424972184002399}, {"id": 102, "seek": 57300, "start": 579.0, "end": 587.0, "text": " and that a movie director is Alfred Hitchcock and he directed horror films and so on and so forth.", "tokens": [50664, 293, 300, 257, 3169, 5391, 307, 28327, 389, 1549, 29779, 293, 415, 12898, 11501, 7796, 293, 370, 322, 293, 370, 5220, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07349374890327454, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.0008424972184002399}, {"id": 103, "seek": 57300, "start": 587.0, "end": 594.0, "text": " It's going to have to learn an extraordinary amount if it's going to do a really good job of predicting the next word of sentences.", "tokens": [51064, 467, 311, 516, 281, 362, 281, 1466, 364, 10581, 2372, 498, 309, 311, 516, 281, 360, 257, 534, 665, 1691, 295, 32884, 264, 958, 1349, 295, 16579, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07349374890327454, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.0008424972184002399}, {"id": 104, "seek": 57300, "start": 594.0, "end": 599.0, "text": " Now, these neural networks specifically are deep neural networks.", "tokens": [51414, 823, 11, 613, 18161, 9590, 4682, 366, 2452, 18161, 9590, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07349374890327454, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.0008424972184002399}, {"id": 105, "seek": 59900, "start": 599.0, "end": 600.0, "text": " So this is deep learning.", "tokens": [50364, 407, 341, 307, 2452, 2539, 13, 50414], "temperature": 0.0, "avg_logprob": -0.14333436109017636, "compression_ratio": 1.5157894736842106, "no_speech_prob": 0.06552977859973907}, {"id": 106, "seek": 59900, "start": 600.0, "end": 607.0, "text": " And in these deep neural networks, which have, when I created this, I think it had like 100 million parameters.", "tokens": [50414, 400, 294, 613, 2452, 18161, 9590, 11, 597, 362, 11, 562, 286, 2942, 341, 11, 286, 519, 309, 632, 411, 2319, 2459, 9834, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14333436109017636, "compression_ratio": 1.5157894736842106, "no_speech_prob": 0.06552977859973907}, {"id": 107, "seek": 59900, "start": 607.0, "end": 613.0, "text": " Nowadays, they have billions of parameters.", "tokens": [50764, 28908, 11, 436, 362, 17375, 295, 9834, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14333436109017636, "compression_ratio": 1.5157894736842106, "no_speech_prob": 0.06552977859973907}, {"id": 108, "seek": 59900, "start": 613.0, "end": 623.0, "text": " It's got the ability to create a rich hierarchy of abstractions and representations which it can build on.", "tokens": [51064, 467, 311, 658, 264, 3485, 281, 1884, 257, 4593, 22333, 295, 12649, 626, 293, 33358, 597, 309, 393, 1322, 322, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14333436109017636, "compression_ratio": 1.5157894736842106, "no_speech_prob": 0.06552977859973907}, {"id": 109, "seek": 62300, "start": 623.0, "end": 631.0, "text": " And so this is really the key idea behind neural networks and language models,", "tokens": [50364, 400, 370, 341, 307, 534, 264, 2141, 1558, 2261, 18161, 9590, 293, 2856, 5245, 11, 50764], "temperature": 0.0, "avg_logprob": -0.06603850637163435, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02633935958147049}, {"id": 110, "seek": 62300, "start": 631.0, "end": 638.0, "text": " is that if it's going to do a good job of being able to predict the next word of any sentence in any situation,", "tokens": [50764, 307, 300, 498, 309, 311, 516, 281, 360, 257, 665, 1691, 295, 885, 1075, 281, 6069, 264, 958, 1349, 295, 604, 8174, 294, 604, 2590, 11, 51114], "temperature": 0.0, "avg_logprob": -0.06603850637163435, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02633935958147049}, {"id": 111, "seek": 62300, "start": 638.0, "end": 640.0, "text": " it's going to have to know an awful lot about the world.", "tokens": [51114, 309, 311, 516, 281, 362, 281, 458, 364, 11232, 688, 466, 264, 1002, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06603850637163435, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02633935958147049}, {"id": 112, "seek": 62300, "start": 640.0, "end": 652.0, "text": " It's going to have to know about how to solve math questions or figure out the next move in a chess game or recognize poetry and so on and so forth.", "tokens": [51214, 467, 311, 516, 281, 362, 281, 458, 466, 577, 281, 5039, 5221, 1651, 420, 2573, 484, 264, 958, 1286, 294, 257, 24122, 1216, 420, 5521, 15155, 293, 370, 322, 293, 370, 5220, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06603850637163435, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02633935958147049}, {"id": 113, "seek": 65200, "start": 652.0, "end": 656.0, "text": " Now, nobody says it's going to do a good job of that.", "tokens": [50364, 823, 11, 5079, 1619, 309, 311, 516, 281, 360, 257, 665, 1691, 295, 300, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0753613320466514, "compression_ratio": 1.8, "no_speech_prob": 0.0067924740724265575}, {"id": 114, "seek": 65200, "start": 656.0, "end": 662.0, "text": " So it's a lot of work to find to create and train a model that is good at that.", "tokens": [50564, 407, 309, 311, 257, 688, 295, 589, 281, 915, 281, 1884, 293, 3847, 257, 2316, 300, 307, 665, 412, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0753613320466514, "compression_ratio": 1.8, "no_speech_prob": 0.0067924740724265575}, {"id": 115, "seek": 65200, "start": 662.0, "end": 672.0, "text": " But if you can create one that's good at that, it's going to have a lot of capabilities internally that it would have to be drawing on to be able to do this effectively.", "tokens": [50864, 583, 498, 291, 393, 1884, 472, 300, 311, 665, 412, 300, 11, 309, 311, 516, 281, 362, 257, 688, 295, 10862, 19501, 300, 309, 576, 362, 281, 312, 6316, 322, 281, 312, 1075, 281, 360, 341, 8659, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0753613320466514, "compression_ratio": 1.8, "no_speech_prob": 0.0067924740724265575}, {"id": 116, "seek": 65200, "start": 672.0, "end": 681.0, "text": " So the key idea here for me is that this is a form of compression and this idea of the relationship between compression", "tokens": [51364, 407, 264, 2141, 1558, 510, 337, 385, 307, 300, 341, 307, 257, 1254, 295, 19355, 293, 341, 1558, 295, 264, 2480, 1296, 19355, 51814], "temperature": 0.0, "avg_logprob": -0.0753613320466514, "compression_ratio": 1.8, "no_speech_prob": 0.0067924740724265575}, {"id": 117, "seek": 68100, "start": 681.0, "end": 685.0, "text": " and intelligence goes back many, many decades.", "tokens": [50364, 293, 7599, 1709, 646, 867, 11, 867, 7878, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08444200243268694, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.004902939777821302}, {"id": 118, "seek": 68100, "start": 685.0, "end": 693.0, "text": " And the basic idea is that, yeah, if you can guess what words are coming up next,", "tokens": [50564, 400, 264, 3875, 1558, 307, 300, 11, 1338, 11, 498, 291, 393, 2041, 437, 2283, 366, 1348, 493, 958, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08444200243268694, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.004902939777821302}, {"id": 119, "seek": 68100, "start": 693.0, "end": 699.0, "text": " then effectively you're compressing all that information down into a neural network.", "tokens": [50964, 550, 8659, 291, 434, 14778, 278, 439, 300, 1589, 760, 666, 257, 18161, 3209, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08444200243268694, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.004902939777821302}, {"id": 120, "seek": 68100, "start": 699.0, "end": 703.0, "text": " Now, I said this is not useful of itself.", "tokens": [51264, 823, 11, 286, 848, 341, 307, 406, 4420, 295, 2564, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08444200243268694, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.004902939777821302}, {"id": 121, "seek": 68100, "start": 703.0, "end": 705.0, "text": " Well, why do we do it?", "tokens": [51464, 1042, 11, 983, 360, 321, 360, 309, 30, 51564], "temperature": 0.0, "avg_logprob": -0.08444200243268694, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.004902939777821302}, {"id": 122, "seek": 68100, "start": 705.0, "end": 709.0, "text": " Well, we do it because we want to pull out those capabilities.", "tokens": [51564, 1042, 11, 321, 360, 309, 570, 321, 528, 281, 2235, 484, 729, 10862, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08444200243268694, "compression_ratio": 1.5223214285714286, "no_speech_prob": 0.004902939777821302}, {"id": 123, "seek": 70900, "start": 709.0, "end": 713.0, "text": " And the way we pull out those capabilities is we take two more steps.", "tokens": [50364, 400, 264, 636, 321, 2235, 484, 729, 10862, 307, 321, 747, 732, 544, 4439, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07668217297258048, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.01911303959786892}, {"id": 124, "seek": 70900, "start": 713.0, "end": 717.0, "text": " The second step is we do something called language model fine tuning.", "tokens": [50564, 440, 1150, 1823, 307, 321, 360, 746, 1219, 2856, 2316, 2489, 15164, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07668217297258048, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.01911303959786892}, {"id": 125, "seek": 70900, "start": 717.0, "end": 726.0, "text": " And in language model fine tuning, we are no longer just giving it all of Wikipedia or nowadays we don't just give it all of Wikipedia.", "tokens": [50764, 400, 294, 2856, 2316, 2489, 15164, 11, 321, 366, 572, 2854, 445, 2902, 309, 439, 295, 28999, 420, 13434, 321, 500, 380, 445, 976, 309, 439, 295, 28999, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07668217297258048, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.01911303959786892}, {"id": 126, "seek": 70900, "start": 726.0, "end": 732.0, "text": " But in fact, a large chunk of the internet is fed to pre-training these models.", "tokens": [51214, 583, 294, 1186, 11, 257, 2416, 16635, 295, 264, 4705, 307, 4636, 281, 659, 12, 17227, 1760, 613, 5245, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07668217297258048, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.01911303959786892}, {"id": 127, "seek": 73200, "start": 732.0, "end": 742.0, "text": " In the fine tuning stage, we feed it a set of documents a lot closer to the final task that we want the model to do.", "tokens": [50364, 682, 264, 2489, 15164, 3233, 11, 321, 3154, 309, 257, 992, 295, 8512, 257, 688, 4966, 281, 264, 2572, 5633, 300, 321, 528, 264, 2316, 281, 360, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06273697843455305, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.04465542361140251}, {"id": 128, "seek": 73200, "start": 742.0, "end": 744.0, "text": " But it's still the same basic idea.", "tokens": [50864, 583, 309, 311, 920, 264, 912, 3875, 1558, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06273697843455305, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.04465542361140251}, {"id": 129, "seek": 73200, "start": 744.0, "end": 749.0, "text": " It's still trying to predict the next word of a sentence.", "tokens": [50964, 467, 311, 920, 1382, 281, 6069, 264, 958, 1349, 295, 257, 8174, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06273697843455305, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.04465542361140251}, {"id": 130, "seek": 73200, "start": 749.0, "end": 753.0, "text": " After that, we then do a final classifier fine tuning.", "tokens": [51214, 2381, 300, 11, 321, 550, 360, 257, 2572, 1508, 9902, 2489, 15164, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06273697843455305, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.04465542361140251}, {"id": 131, "seek": 73200, "start": 753.0, "end": 759.0, "text": " And then the classifier fine tuning, this is the kind of end task we're trying to get it to do.", "tokens": [51414, 400, 550, 264, 1508, 9902, 2489, 15164, 11, 341, 307, 264, 733, 295, 917, 5633, 321, 434, 1382, 281, 483, 309, 281, 360, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06273697843455305, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.04465542361140251}, {"id": 132, "seek": 75900, "start": 759.0, "end": 765.0, "text": " Nowadays, these two steps are very specific approaches are taken.", "tokens": [50364, 28908, 11, 613, 732, 4439, 366, 588, 2685, 11587, 366, 2726, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09324193000793457, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.009122214280068874}, {"id": 133, "seek": 75900, "start": 765.0, "end": 772.0, "text": " For the step two, the step B, the language model fine tuning, people nowadays do a particular kind called instruction tuning.", "tokens": [50664, 1171, 264, 1823, 732, 11, 264, 1823, 363, 11, 264, 2856, 2316, 2489, 15164, 11, 561, 13434, 360, 257, 1729, 733, 1219, 10951, 15164, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09324193000793457, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.009122214280068874}, {"id": 134, "seek": 75900, "start": 772.0, "end": 780.0, "text": " The idea is that the task we want most of the time to achieve is solve problems, answer questions.", "tokens": [51014, 440, 1558, 307, 300, 264, 5633, 321, 528, 881, 295, 264, 565, 281, 4584, 307, 5039, 2740, 11, 1867, 1651, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09324193000793457, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.009122214280068874}, {"id": 135, "seek": 75900, "start": 780.0, "end": 786.0, "text": " And so in the instruction tuning phase, we use data sets like this one.", "tokens": [51414, 400, 370, 294, 264, 10951, 15164, 5574, 11, 321, 764, 1412, 6352, 411, 341, 472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09324193000793457, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.009122214280068874}, {"id": 136, "seek": 78600, "start": 786.0, "end": 792.0, "text": " This is a great data set called OpenOrca created by a fantastic open source group.", "tokens": [50364, 639, 307, 257, 869, 1412, 992, 1219, 7238, 21520, 496, 2942, 538, 257, 5456, 1269, 4009, 1594, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12483760672555842, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.014717173762619495}, {"id": 137, "seek": 78600, "start": 792.0, "end": 798.0, "text": " And it's built on top of something called the Flan collection.", "tokens": [50664, 400, 309, 311, 3094, 322, 1192, 295, 746, 1219, 264, 3235, 282, 5765, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12483760672555842, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.014717173762619495}, {"id": 138, "seek": 78600, "start": 798.0, "end": 804.0, "text": " And you can see that basically there's all kinds of different questions in here.", "tokens": [50964, 400, 291, 393, 536, 300, 1936, 456, 311, 439, 3685, 295, 819, 1651, 294, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12483760672555842, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.014717173762619495}, {"id": 139, "seek": 78600, "start": 804.0, "end": 811.0, "text": " So there's four gigabytes of questions and context and so forth.", "tokens": [51264, 407, 456, 311, 1451, 42741, 295, 1651, 293, 4319, 293, 370, 5220, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12483760672555842, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.014717173762619495}, {"id": 140, "seek": 81100, "start": 811.0, "end": 820.0, "text": " And each one generally has a question or an instruction or a request and then a response.", "tokens": [50364, 400, 1184, 472, 5101, 575, 257, 1168, 420, 364, 10951, 420, 257, 5308, 293, 550, 257, 4134, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10605132844712999, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.0059093632735311985}, {"id": 141, "seek": 81100, "start": 820.0, "end": 824.0, "text": " Here are some examples of instructions.", "tokens": [50814, 1692, 366, 512, 5110, 295, 9415, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10605132844712999, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.0059093632735311985}, {"id": 142, "seek": 81100, "start": 824.0, "end": 827.0, "text": " I think this is from the Flan data set if I remember correctly.", "tokens": [51014, 286, 519, 341, 307, 490, 264, 3235, 282, 1412, 992, 498, 286, 1604, 8944, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10605132844712999, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.0059093632735311985}, {"id": 143, "seek": 81100, "start": 827.0, "end": 832.0, "text": " So for instance, it could be does the sentence in the iron age answer the question,", "tokens": [51164, 407, 337, 5197, 11, 309, 727, 312, 775, 264, 8174, 294, 264, 6497, 3205, 1867, 264, 1168, 11, 51414], "temperature": 0.0, "avg_logprob": -0.10605132844712999, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.0059093632735311985}, {"id": 144, "seek": 81100, "start": 832.0, "end": 839.0, "text": " the period of time from 1200 to 1000 BCE is known as what choice is one yes or no.", "tokens": [51414, 264, 2896, 295, 565, 490, 29139, 281, 9714, 49369, 307, 2570, 382, 437, 3922, 307, 472, 2086, 420, 572, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10605132844712999, "compression_ratio": 1.5720524017467248, "no_speech_prob": 0.0059093632735311985}, {"id": 145, "seek": 83900, "start": 839.0, "end": 847.0, "text": " And then the language model is meant to write one or two as appropriate for yes or no.", "tokens": [50364, 400, 550, 264, 2856, 2316, 307, 4140, 281, 2464, 472, 420, 732, 382, 6854, 337, 2086, 420, 572, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12211202692102503, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.0014100804692134261}, {"id": 146, "seek": 83900, "start": 847.0, "end": 850.0, "text": " Or it could be things about I think this is from a music video.", "tokens": [50764, 1610, 309, 727, 312, 721, 466, 286, 519, 341, 307, 490, 257, 1318, 960, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12211202692102503, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.0014100804692134261}, {"id": 147, "seek": 83900, "start": 850.0, "end": 857.0, "text": " Who is the girl in more than you know answer and then it would have to write the correct name of the", "tokens": [50914, 2102, 307, 264, 2013, 294, 544, 813, 291, 458, 1867, 293, 550, 309, 576, 362, 281, 2464, 264, 3006, 1315, 295, 264, 51264], "temperature": 0.0, "avg_logprob": -0.12211202692102503, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.0014100804692134261}, {"id": 148, "seek": 83900, "start": 857.0, "end": 863.0, "text": " remember model or dancer or whatever from from that music video and so forth.", "tokens": [51264, 1604, 2316, 420, 21621, 420, 2035, 490, 490, 300, 1318, 960, 293, 370, 5220, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12211202692102503, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.0014100804692134261}, {"id": 149, "seek": 86300, "start": 863.0, "end": 866.0, "text": " So it's still doing language modeling.", "tokens": [50364, 407, 309, 311, 920, 884, 2856, 15983, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11470620426130884, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0019262244459241629}, {"id": 150, "seek": 86300, "start": 866.0, "end": 869.0, "text": " So fine tuning and pre training are kind of the same thing.", "tokens": [50514, 407, 2489, 15164, 293, 659, 3097, 366, 733, 295, 264, 912, 551, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11470620426130884, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0019262244459241629}, {"id": 151, "seek": 86300, "start": 869.0, "end": 878.0, "text": " But this is more targeted now, not just to be able to fill in the missing parts of any document from the Internet.", "tokens": [50664, 583, 341, 307, 544, 15045, 586, 11, 406, 445, 281, 312, 1075, 281, 2836, 294, 264, 5361, 3166, 295, 604, 4166, 490, 264, 7703, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11470620426130884, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0019262244459241629}, {"id": 152, "seek": 86300, "start": 878.0, "end": 886.0, "text": " But to fill in the words necessary to answer questions to do useful things.", "tokens": [51114, 583, 281, 2836, 294, 264, 2283, 4818, 281, 1867, 1651, 281, 360, 4420, 721, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11470620426130884, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0019262244459241629}, {"id": 153, "seek": 86300, "start": 886.0, "end": 889.0, "text": " Okay, so that's instruction tuning.", "tokens": [51514, 1033, 11, 370, 300, 311, 10951, 15164, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11470620426130884, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0019262244459241629}, {"id": 154, "seek": 88900, "start": 889.0, "end": 893.0, "text": " And then step three, which is the classifier fine tuning.", "tokens": [50364, 400, 550, 1823, 1045, 11, 597, 307, 264, 1508, 9902, 2489, 15164, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09661510191768048, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.015417209826409817}, {"id": 155, "seek": 88900, "start": 893.0, "end": 899.0, "text": " Nowadays, there's generally various approaches such as reinforcement learning from human feedback and others,", "tokens": [50564, 28908, 11, 456, 311, 5101, 3683, 11587, 1270, 382, 29280, 2539, 490, 1952, 5824, 293, 2357, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09661510191768048, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.015417209826409817}, {"id": 156, "seek": 88900, "start": 899.0, "end": 909.0, "text": " which are basically giving humans or sometimes more advanced models,", "tokens": [50864, 597, 366, 1936, 2902, 6255, 420, 2171, 544, 7339, 5245, 11, 51364], "temperature": 0.0, "avg_logprob": -0.09661510191768048, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.015417209826409817}, {"id": 157, "seek": 88900, "start": 909.0, "end": 916.0, "text": " multiple answers to a question such as here are some from a reinforcement learning from human feedback paper.", "tokens": [51364, 3866, 6338, 281, 257, 1168, 1270, 382, 510, 366, 512, 490, 257, 29280, 2539, 490, 1952, 5824, 3035, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09661510191768048, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.015417209826409817}, {"id": 158, "seek": 88900, "start": 916.0, "end": 918.0, "text": " I can't remember which one I got it from.", "tokens": [51714, 286, 393, 380, 1604, 597, 472, 286, 658, 309, 490, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09661510191768048, "compression_ratio": 1.7168141592920354, "no_speech_prob": 0.015417209826409817}, {"id": 159, "seek": 91800, "start": 918.0, "end": 921.0, "text": " Five ideas for how to regain enthusiasm for my career.", "tokens": [50364, 9436, 3487, 337, 577, 281, 35336, 23417, 337, 452, 3988, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11339245047620548, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.020944952964782715}, {"id": 160, "seek": 91800, "start": 921.0, "end": 928.0, "text": " And so the model will spit out two possible answers or it will have a less good model and more good model.", "tokens": [50514, 400, 370, 264, 2316, 486, 22127, 484, 732, 1944, 6338, 420, 309, 486, 362, 257, 1570, 665, 2316, 293, 544, 665, 2316, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11339245047620548, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.020944952964782715}, {"id": 161, "seek": 91800, "start": 928.0, "end": 933.0, "text": " And then a human or a better model will pick, which is best.", "tokens": [50864, 400, 550, 257, 1952, 420, 257, 1101, 2316, 486, 1888, 11, 597, 307, 1151, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11339245047620548, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.020944952964782715}, {"id": 162, "seek": 91800, "start": 933.0, "end": 937.0, "text": " And so that's used for the the final fine tuning stage.", "tokens": [51114, 400, 370, 300, 311, 1143, 337, 264, 264, 2572, 2489, 15164, 3233, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11339245047620548, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.020944952964782715}, {"id": 163, "seek": 91800, "start": 937.0, "end": 947.0, "text": " So all of that is to say, although you can download pure language models from the Internet.", "tokens": [51314, 407, 439, 295, 300, 307, 281, 584, 11, 4878, 291, 393, 5484, 6075, 2856, 5245, 490, 264, 7703, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11339245047620548, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.020944952964782715}, {"id": 164, "seek": 94700, "start": 948.0, "end": 954.0, "text": " They're not generally that useful of their on their own until you've fine tuned them.", "tokens": [50414, 814, 434, 406, 5101, 300, 4420, 295, 641, 322, 641, 1065, 1826, 291, 600, 2489, 10870, 552, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11852106614546343, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.010321780107915401}, {"id": 165, "seek": 94700, "start": 954.0, "end": 957.0, "text": " Now, you don't necessarily need step C nowadays.", "tokens": [50714, 823, 11, 291, 500, 380, 4725, 643, 1823, 383, 13434, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11852106614546343, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.010321780107915401}, {"id": 166, "seek": 94700, "start": 957.0, "end": 960.0, "text": " Actually, people are discovering that maybe just step B might be enough.", "tokens": [50864, 5135, 11, 561, 366, 24773, 300, 1310, 445, 1823, 363, 1062, 312, 1547, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11852106614546343, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.010321780107915401}, {"id": 167, "seek": 94700, "start": 960.0, "end": 962.0, "text": " It's still a bit controversial.", "tokens": [51014, 467, 311, 920, 257, 857, 17323, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11852106614546343, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.010321780107915401}, {"id": 168, "seek": 94700, "start": 962.0, "end": 971.0, "text": " Okay, so when we talk about a language model, where we could be talking about something that's just been pre-trained,", "tokens": [51114, 1033, 11, 370, 562, 321, 751, 466, 257, 2856, 2316, 11, 689, 321, 727, 312, 1417, 466, 746, 300, 311, 445, 668, 659, 12, 17227, 2001, 11, 51564], "temperature": 0.0, "avg_logprob": -0.11852106614546343, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.010321780107915401}, {"id": 169, "seek": 94700, "start": 971.0, "end": 975.0, "text": " something that's been fine tuned or something that's gone through something like RLHF.", "tokens": [51564, 746, 300, 311, 668, 2489, 10870, 420, 746, 300, 311, 2780, 807, 746, 411, 497, 43, 39, 37, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11852106614546343, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.010321780107915401}, {"id": 170, "seek": 97500, "start": 975.0, "end": 980.0, "text": " All of those things are generally described nowadays as language models.", "tokens": [50364, 1057, 295, 729, 721, 366, 5101, 7619, 13434, 382, 2856, 5245, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0706460264664662, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.0062876432202756405}, {"id": 171, "seek": 97500, "start": 983.0, "end": 990.0, "text": " So my view is that if you are going to be good at language modeling in any way,", "tokens": [50764, 407, 452, 1910, 307, 300, 498, 291, 366, 516, 281, 312, 665, 412, 2856, 15983, 294, 604, 636, 11, 51114], "temperature": 0.0, "avg_logprob": -0.0706460264664662, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.0062876432202756405}, {"id": 172, "seek": 97500, "start": 990.0, "end": 995.0, "text": " then you need to start by being a really effective user of language models.", "tokens": [51114, 550, 291, 643, 281, 722, 538, 885, 257, 534, 4942, 4195, 295, 2856, 5245, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0706460264664662, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.0062876432202756405}, {"id": 173, "seek": 97500, "start": 995.0, "end": 999.0, "text": " And to be a really effective user of language models, you've got to use the best one that there is.", "tokens": [51364, 400, 281, 312, 257, 534, 4942, 4195, 295, 2856, 5245, 11, 291, 600, 658, 281, 764, 264, 1151, 472, 300, 456, 307, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0706460264664662, "compression_ratio": 1.8121546961325967, "no_speech_prob": 0.0062876432202756405}, {"id": 174, "seek": 99900, "start": 999.0, "end": 1004.0, "text": " And currently, so what are we up to September 2023?", "tokens": [50364, 400, 4362, 11, 370, 437, 366, 321, 493, 281, 7216, 44377, 30, 50614], "temperature": 0.0, "avg_logprob": -0.11852278607956906, "compression_ratio": 1.4930232558139536, "no_speech_prob": 0.1845306009054184}, {"id": 175, "seek": 99900, "start": 1004.0, "end": 1008.0, "text": " The best one is by far GPT-4.", "tokens": [50614, 440, 1151, 472, 307, 538, 1400, 26039, 51, 12, 19, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11852278607956906, "compression_ratio": 1.4930232558139536, "no_speech_prob": 0.1845306009054184}, {"id": 176, "seek": 99900, "start": 1008.0, "end": 1013.0, "text": " This might change sometime in the not too distant future, but this is right now.", "tokens": [50814, 639, 1062, 1319, 15053, 294, 264, 406, 886, 17275, 2027, 11, 457, 341, 307, 558, 586, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11852278607956906, "compression_ratio": 1.4930232558139536, "no_speech_prob": 0.1845306009054184}, {"id": 177, "seek": 99900, "start": 1013.0, "end": 1016.0, "text": " GPT-4 is the recommendation, strong, strong recommendation.", "tokens": [51064, 26039, 51, 12, 19, 307, 264, 11879, 11, 2068, 11, 2068, 11879, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11852278607956906, "compression_ratio": 1.4930232558139536, "no_speech_prob": 0.1845306009054184}, {"id": 178, "seek": 99900, "start": 1016.0, "end": 1025.0, "text": " Now, you can use GPT-4 by paying 20 bucks a month to open AI, and then you can use it a whole lot.", "tokens": [51214, 823, 11, 291, 393, 764, 26039, 51, 12, 19, 538, 6229, 945, 11829, 257, 1618, 281, 1269, 7318, 11, 293, 550, 291, 393, 764, 309, 257, 1379, 688, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11852278607956906, "compression_ratio": 1.4930232558139536, "no_speech_prob": 0.1845306009054184}, {"id": 179, "seek": 102500, "start": 1025.0, "end": 1030.0, "text": " It's very hard to run out of credits, I find.", "tokens": [50364, 467, 311, 588, 1152, 281, 1190, 484, 295, 16816, 11, 286, 915, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09479027854071723, "compression_ratio": 1.4396135265700483, "no_speech_prob": 0.0067942021414637566}, {"id": 180, "seek": 102500, "start": 1030.0, "end": 1033.0, "text": " Now, what can GPT-2?", "tokens": [50614, 823, 11, 437, 393, 26039, 51, 12, 17, 30, 50764], "temperature": 0.0, "avg_logprob": -0.09479027854071723, "compression_ratio": 1.4396135265700483, "no_speech_prob": 0.0067942021414637566}, {"id": 181, "seek": 102500, "start": 1033.0, "end": 1041.0, "text": " It's interesting and instructive, in my opinion, to start with the very common views you see on the internet", "tokens": [50764, 467, 311, 1880, 293, 7232, 488, 11, 294, 452, 4800, 11, 281, 722, 365, 264, 588, 2689, 6809, 291, 536, 322, 264, 4705, 51164], "temperature": 0.0, "avg_logprob": -0.09479027854071723, "compression_ratio": 1.4396135265700483, "no_speech_prob": 0.0067942021414637566}, {"id": 182, "seek": 102500, "start": 1041.0, "end": 1043.0, "text": " or even in academia about what it can't do.", "tokens": [51164, 420, 754, 294, 28937, 466, 437, 309, 393, 380, 360, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09479027854071723, "compression_ratio": 1.4396135265700483, "no_speech_prob": 0.0067942021414637566}, {"id": 183, "seek": 102500, "start": 1043.0, "end": 1049.0, "text": " So, for example, there was this paper you might have seen, GPT-4 can't reason,", "tokens": [51264, 407, 11, 337, 1365, 11, 456, 390, 341, 3035, 291, 1062, 362, 1612, 11, 26039, 51, 12, 19, 393, 380, 1778, 11, 51564], "temperature": 0.0, "avg_logprob": -0.09479027854071723, "compression_ratio": 1.4396135265700483, "no_speech_prob": 0.0067942021414637566}, {"id": 184, "seek": 104900, "start": 1049.0, "end": 1057.0, "text": " which describes a number of empirical analysis done of 25 diverse reasoning problems", "tokens": [50364, 597, 15626, 257, 1230, 295, 31886, 5215, 1096, 295, 3552, 9521, 21577, 2740, 50764], "temperature": 0.0, "avg_logprob": -0.08148339318066108, "compression_ratio": 1.48471615720524, "no_speech_prob": 0.07252105325460434}, {"id": 185, "seek": 104900, "start": 1057.0, "end": 1064.0, "text": " and found that it was not able to solve them, it's utterly incapable of reasoning.", "tokens": [50764, 293, 1352, 300, 309, 390, 406, 1075, 281, 5039, 552, 11, 309, 311, 30251, 44174, 295, 21577, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08148339318066108, "compression_ratio": 1.48471615720524, "no_speech_prob": 0.07252105325460434}, {"id": 186, "seek": 104900, "start": 1064.0, "end": 1070.0, "text": " So, I always find you've got to be a bit careful about reading stuff like this", "tokens": [51114, 407, 11, 286, 1009, 915, 291, 600, 658, 281, 312, 257, 857, 5026, 466, 3760, 1507, 411, 341, 51414], "temperature": 0.0, "avg_logprob": -0.08148339318066108, "compression_ratio": 1.48471615720524, "no_speech_prob": 0.07252105325460434}, {"id": 187, "seek": 104900, "start": 1070.0, "end": 1078.0, "text": " because I just took the first three that I came across in that paper and I gave them to GPT-4", "tokens": [51414, 570, 286, 445, 1890, 264, 700, 1045, 300, 286, 1361, 2108, 294, 300, 3035, 293, 286, 2729, 552, 281, 26039, 51, 12, 19, 51814], "temperature": 0.0, "avg_logprob": -0.08148339318066108, "compression_ratio": 1.48471615720524, "no_speech_prob": 0.07252105325460434}, {"id": 188, "seek": 107800, "start": 1079.0, "end": 1088.0, "text": " and, by the way, something very useful in GPT-4 is you can click on the share button", "tokens": [50414, 293, 11, 538, 264, 636, 11, 746, 588, 4420, 294, 26039, 51, 12, 19, 307, 291, 393, 2052, 322, 264, 2073, 2960, 50864], "temperature": 0.0, "avg_logprob": -0.0892246857430171, "compression_ratio": 1.4955752212389382, "no_speech_prob": 0.05659439414739609}, {"id": 189, "seek": 107800, "start": 1088.0, "end": 1092.0, "text": " and you'll get something that looks like this, and this is really handy.", "tokens": [50864, 293, 291, 603, 483, 746, 300, 1542, 411, 341, 11, 293, 341, 307, 534, 13239, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0892246857430171, "compression_ratio": 1.4955752212389382, "no_speech_prob": 0.05659439414739609}, {"id": 190, "seek": 107800, "start": 1092.0, "end": 1098.0, "text": " So, here's an example of something from the paper that said GPT-4 can't do this.", "tokens": [51064, 407, 11, 510, 311, 364, 1365, 295, 746, 490, 264, 3035, 300, 848, 26039, 51, 12, 19, 393, 380, 360, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0892246857430171, "compression_ratio": 1.4955752212389382, "no_speech_prob": 0.05659439414739609}, {"id": 191, "seek": 107800, "start": 1098.0, "end": 1102.0, "text": " Mabel's heart rate at 9 a.m. was 75 beats per minute.", "tokens": [51364, 376, 18657, 311, 1917, 3314, 412, 1722, 257, 13, 76, 13, 390, 9562, 16447, 680, 3456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0892246857430171, "compression_ratio": 1.4955752212389382, "no_speech_prob": 0.05659439414739609}, {"id": 192, "seek": 107800, "start": 1102.0, "end": 1105.0, "text": " Her blood pressure at 7 p.m. was 120 over 80.", "tokens": [51564, 3204, 3390, 3321, 412, 1614, 280, 13, 76, 13, 390, 10411, 670, 4688, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0892246857430171, "compression_ratio": 1.4955752212389382, "no_speech_prob": 0.05659439414739609}, {"id": 193, "seek": 110500, "start": 1105.0, "end": 1108.0, "text": " She died at 11 p.m. while she alive at noon.", "tokens": [50364, 1240, 4539, 412, 2975, 280, 13, 76, 13, 1339, 750, 5465, 412, 24040, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11857933833681304, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.0044669038616120815}, {"id": 194, "seek": 110500, "start": 1108.0, "end": 1112.0, "text": " So, of course, we're human, we know obviously she must be.", "tokens": [50514, 407, 11, 295, 1164, 11, 321, 434, 1952, 11, 321, 458, 2745, 750, 1633, 312, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11857933833681304, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.0044669038616120815}, {"id": 195, "seek": 110500, "start": 1112.0, "end": 1119.0, "text": " And GPT-4 says, hmm, this appears to be a riddle, not a real inquiry into medical conditions.", "tokens": [50714, 400, 26039, 51, 12, 19, 1619, 11, 16478, 11, 341, 7038, 281, 312, 257, 3973, 2285, 11, 406, 257, 957, 25736, 666, 4625, 4487, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11857933833681304, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.0044669038616120815}, {"id": 196, "seek": 110500, "start": 1119.0, "end": 1127.0, "text": " Here's a summary of the information and, yeah, it sounds like Mabel was alive at noon.", "tokens": [51064, 1692, 311, 257, 12691, 295, 264, 1589, 293, 11, 1338, 11, 309, 3263, 411, 376, 18657, 390, 5465, 412, 24040, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11857933833681304, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.0044669038616120815}, {"id": 197, "seek": 110500, "start": 1127.0, "end": 1128.0, "text": " So, that's correct.", "tokens": [51464, 407, 11, 300, 311, 3006, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11857933833681304, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.0044669038616120815}, {"id": 198, "seek": 110500, "start": 1128.0, "end": 1133.0, "text": " This was the second one I tried from the paper that says GPT-4 can't do this", "tokens": [51514, 639, 390, 264, 1150, 472, 286, 3031, 490, 264, 3035, 300, 1619, 26039, 51, 12, 19, 393, 380, 360, 341, 51764], "temperature": 0.0, "avg_logprob": -0.11857933833681304, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.0044669038616120815}, {"id": 199, "seek": 113300, "start": 1133.0, "end": 1136.0, "text": " and I found actually GPT-4 can do this.", "tokens": [50364, 293, 286, 1352, 767, 26039, 51, 12, 19, 393, 360, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.060385000138055714, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.011681457050144672}, {"id": 200, "seek": 113300, "start": 1137.0, "end": 1142.0, "text": " And it said that GPT-4 can't do this and I found GPT-4 can do this.", "tokens": [50564, 400, 309, 848, 300, 26039, 51, 12, 19, 393, 380, 360, 341, 293, 286, 1352, 26039, 51, 12, 19, 393, 360, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.060385000138055714, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.011681457050144672}, {"id": 201, "seek": 113300, "start": 1142.0, "end": 1149.0, "text": " Now, I mentioned this to say GPT-4 is probably a lot better than you would expect", "tokens": [50814, 823, 11, 286, 2835, 341, 281, 584, 26039, 51, 12, 19, 307, 1391, 257, 688, 1101, 813, 291, 576, 2066, 51164], "temperature": 0.0, "avg_logprob": -0.060385000138055714, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.011681457050144672}, {"id": 202, "seek": 113300, "start": 1149.0, "end": 1155.0, "text": " if you've read all this stuff on the internet about all the dumb things that it does.", "tokens": [51164, 498, 291, 600, 1401, 439, 341, 1507, 322, 264, 4705, 466, 439, 264, 10316, 721, 300, 309, 775, 13, 51464], "temperature": 0.0, "avg_logprob": -0.060385000138055714, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.011681457050144672}, {"id": 203, "seek": 113300, "start": 1157.0, "end": 1162.0, "text": " Almost every time I see on the internet saying something that GPT-4 can't do,", "tokens": [51564, 12627, 633, 565, 286, 536, 322, 264, 4705, 1566, 746, 300, 26039, 51, 12, 19, 393, 380, 360, 11, 51814], "temperature": 0.0, "avg_logprob": -0.060385000138055714, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.011681457050144672}, {"id": 204, "seek": 116200, "start": 1162.0, "end": 1164.0, "text": " I check it and it turns out it does.", "tokens": [50364, 286, 1520, 309, 293, 309, 4523, 484, 309, 775, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 205, "seek": 116200, "start": 1164.0, "end": 1166.0, "text": " This one was just last week.", "tokens": [50464, 639, 472, 390, 445, 1036, 1243, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 206, "seek": 116200, "start": 1166.0, "end": 1168.0, "text": " Sally, a girl, has three brothers.", "tokens": [50564, 26385, 11, 257, 2013, 11, 575, 1045, 8452, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 207, "seek": 116200, "start": 1168.0, "end": 1170.0, "text": " Each brother has two sisters.", "tokens": [50664, 6947, 3708, 575, 732, 11589, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 208, "seek": 116200, "start": 1170.0, "end": 1173.0, "text": " How many sisters does Sally have?", "tokens": [50764, 1012, 867, 11589, 775, 26385, 362, 30, 50914], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 209, "seek": 116200, "start": 1173.0, "end": 1175.0, "text": " So, I have to think about it.", "tokens": [50914, 407, 11, 286, 362, 281, 519, 466, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 210, "seek": 116200, "start": 1177.0, "end": 1183.0, "text": " And so, GPT-4 says, OK, Sally's counted as one sister by each of her brothers.", "tokens": [51114, 400, 370, 11, 26039, 51, 12, 19, 1619, 11, 2264, 11, 26385, 311, 20150, 382, 472, 4892, 538, 1184, 295, 720, 8452, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 211, "seek": 116200, "start": 1183.0, "end": 1188.0, "text": " If each brother has two sisters, that means there's another sister in the picture apart from Sally.", "tokens": [51414, 759, 1184, 3708, 575, 732, 11589, 11, 300, 1355, 456, 311, 1071, 4892, 294, 264, 3036, 4936, 490, 26385, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 212, "seek": 116200, "start": 1188.0, "end": 1190.0, "text": " So, Sally has one sister.", "tokens": [51664, 407, 11, 26385, 575, 472, 4892, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11389645075393935, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.001454856712371111}, {"id": 213, "seek": 119000, "start": 1190.0, "end": 1191.0, "text": " Correct.", "tokens": [50364, 12753, 13, 50414], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 214, "seek": 119000, "start": 1197.0, "end": 1200.0, "text": " And then this one I got sort of like three or four days ago.", "tokens": [50714, 400, 550, 341, 472, 286, 658, 1333, 295, 411, 1045, 420, 1451, 1708, 2057, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 215, "seek": 119000, "start": 1201.0, "end": 1207.0, "text": " This is a common view that language models can't track things like this.", "tokens": [50914, 639, 307, 257, 2689, 1910, 300, 2856, 5245, 393, 380, 2837, 721, 411, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 216, "seek": 119000, "start": 1207.0, "end": 1208.0, "text": " Here's the riddle.", "tokens": [51214, 1692, 311, 264, 3973, 2285, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 217, "seek": 119000, "start": 1208.0, "end": 1209.0, "text": " I'm in my house.", "tokens": [51264, 286, 478, 294, 452, 1782, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 218, "seek": 119000, "start": 1209.0, "end": 1211.0, "text": " On top of my chair in the living room is a coffee cup.", "tokens": [51314, 1282, 1192, 295, 452, 6090, 294, 264, 2647, 1808, 307, 257, 4982, 4414, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 219, "seek": 119000, "start": 1211.0, "end": 1213.0, "text": " Inside the coffee cup is a thimble.", "tokens": [51414, 15123, 264, 4982, 4414, 307, 257, 258, 332, 638, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 220, "seek": 119000, "start": 1213.0, "end": 1215.0, "text": " Inside the thimble is a diamond.", "tokens": [51514, 15123, 264, 258, 332, 638, 307, 257, 16059, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 221, "seek": 119000, "start": 1215.0, "end": 1217.0, "text": " I move the chair to the bedroom.", "tokens": [51614, 286, 1286, 264, 6090, 281, 264, 11211, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 222, "seek": 119000, "start": 1217.0, "end": 1218.0, "text": " I put the coffee cup in the bed.", "tokens": [51714, 286, 829, 264, 4982, 4414, 294, 264, 2901, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 223, "seek": 119000, "start": 1218.0, "end": 1219.0, "text": " I turn the cup upside down.", "tokens": [51764, 286, 1261, 264, 4414, 14119, 760, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08561646270751953, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.010980827733874321}, {"id": 224, "seek": 121900, "start": 1219.0, "end": 1221.0, "text": " Then I return it upside up.", "tokens": [50364, 1396, 286, 2736, 309, 14119, 493, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 225, "seek": 121900, "start": 1221.0, "end": 1223.0, "text": " Place the coffee cup on the counter in the kitchen.", "tokens": [50464, 13637, 264, 4982, 4414, 322, 264, 5682, 294, 264, 6525, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 226, "seek": 121900, "start": 1223.0, "end": 1225.0, "text": " Where's my diamond?", "tokens": [50564, 2305, 311, 452, 16059, 30, 50664], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 227, "seek": 121900, "start": 1225.0, "end": 1228.0, "text": " And so GPT-4 says, yeah, OK.", "tokens": [50664, 400, 370, 26039, 51, 12, 19, 1619, 11, 1338, 11, 2264, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 228, "seek": 121900, "start": 1228.0, "end": 1230.0, "text": " You turned it upside down.", "tokens": [50814, 509, 3574, 309, 14119, 760, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 229, "seek": 121900, "start": 1230.0, "end": 1232.0, "text": " So, probably the diamond fell out.", "tokens": [50914, 407, 11, 1391, 264, 16059, 5696, 484, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 230, "seek": 121900, "start": 1232.0, "end": 1235.0, "text": " So, therefore, the diamond in the bedroom fell out.", "tokens": [51014, 407, 11, 4412, 11, 264, 16059, 294, 264, 11211, 5696, 484, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 231, "seek": 121900, "start": 1235.0, "end": 1236.0, "text": " Again, correct.", "tokens": [51164, 3764, 11, 3006, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 232, "seek": 121900, "start": 1238.0, "end": 1245.0, "text": " Why is it that people are claiming that GPT-4 can't do these things when it can?", "tokens": [51314, 1545, 307, 309, 300, 561, 366, 19232, 300, 26039, 51, 12, 19, 393, 380, 360, 613, 721, 562, 309, 393, 30, 51664], "temperature": 0.0, "avg_logprob": -0.11656160174675707, "compression_ratio": 1.547945205479452, "no_speech_prob": 0.0006069710361771286}, {"id": 233, "seek": 124500, "start": 1245.0, "end": 1251.0, "text": " Well, the reason is because I think on the whole they are not aware of how GPT-4 was trained.", "tokens": [50364, 1042, 11, 264, 1778, 307, 570, 286, 519, 322, 264, 1379, 436, 366, 406, 3650, 295, 577, 26039, 51, 12, 19, 390, 8895, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08749032588232131, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.010324651375412941}, {"id": 234, "seek": 124500, "start": 1251.0, "end": 1259.0, "text": " GPT-4 was not trained at any point to give correct answers.", "tokens": [50664, 26039, 51, 12, 19, 390, 406, 8895, 412, 604, 935, 281, 976, 3006, 6338, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08749032588232131, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.010324651375412941}, {"id": 235, "seek": 124500, "start": 1259.0, "end": 1265.0, "text": " GPT-4 was trained initially to give most likely next words.", "tokens": [51064, 26039, 51, 12, 19, 390, 8895, 9105, 281, 976, 881, 3700, 958, 2283, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08749032588232131, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.010324651375412941}, {"id": 236, "seek": 124500, "start": 1265.0, "end": 1272.0, "text": " And there's an awful lot of stuff on the internet where documents are not describing things that are true.", "tokens": [51364, 400, 456, 311, 364, 11232, 688, 295, 1507, 322, 264, 4705, 689, 8512, 366, 406, 16141, 721, 300, 366, 2074, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08749032588232131, "compression_ratio": 1.592039800995025, "no_speech_prob": 0.010324651375412941}, {"id": 237, "seek": 127200, "start": 1272.0, "end": 1273.0, "text": " There could be fiction.", "tokens": [50364, 821, 727, 312, 13266, 13, 50414], "temperature": 0.0, "avg_logprob": -0.10454216003417968, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.006898912601172924}, {"id": 238, "seek": 127200, "start": 1273.0, "end": 1275.0, "text": " There could be jokes.", "tokens": [50414, 821, 727, 312, 14439, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10454216003417968, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.006898912601172924}, {"id": 239, "seek": 127200, "start": 1275.0, "end": 1278.0, "text": " There could be just stupid people saying dumb stuff.", "tokens": [50514, 821, 727, 312, 445, 6631, 561, 1566, 10316, 1507, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10454216003417968, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.006898912601172924}, {"id": 240, "seek": 127200, "start": 1278.0, "end": 1283.0, "text": " So, this first stage does not necessarily give you correct answers.", "tokens": [50664, 407, 11, 341, 700, 3233, 775, 406, 4725, 976, 291, 3006, 6338, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10454216003417968, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.006898912601172924}, {"id": 241, "seek": 127200, "start": 1283.0, "end": 1291.0, "text": " The second stage with the instruction tuning, also, like, it's trying to give correct answers.", "tokens": [50914, 440, 1150, 3233, 365, 264, 10951, 15164, 11, 611, 11, 411, 11, 309, 311, 1382, 281, 976, 3006, 6338, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10454216003417968, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.006898912601172924}, {"id": 242, "seek": 127200, "start": 1291.0, "end": 1298.0, "text": " But part of the problem is that then in the stage where you start asking people which answer do they like better,", "tokens": [51314, 583, 644, 295, 264, 1154, 307, 300, 550, 294, 264, 3233, 689, 291, 722, 3365, 561, 597, 1867, 360, 436, 411, 1101, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10454216003417968, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.006898912601172924}, {"id": 243, "seek": 129800, "start": 1299.0, "end": 1307.0, "text": " people tended to say in these things that they prefer more confident answers", "tokens": [50414, 561, 34732, 281, 584, 294, 613, 721, 300, 436, 4382, 544, 6679, 6338, 50814], "temperature": 0.0, "avg_logprob": -0.07658862414425366, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.0024720653891563416}, {"id": 244, "seek": 129800, "start": 1307.0, "end": 1313.0, "text": " and they often were not people who were trained well enough to recognize wrong answers.", "tokens": [50814, 293, 436, 2049, 645, 406, 561, 567, 645, 8895, 731, 1547, 281, 5521, 2085, 6338, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07658862414425366, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.0024720653891563416}, {"id": 245, "seek": 129800, "start": 1313.0, "end": 1321.0, "text": " So, there's lots of reasons that the SGD weight updates from this process for stuff like GPT-4", "tokens": [51114, 407, 11, 456, 311, 3195, 295, 4112, 300, 264, 34520, 35, 3364, 9205, 490, 341, 1399, 337, 1507, 411, 26039, 51, 12, 19, 51514], "temperature": 0.0, "avg_logprob": -0.07658862414425366, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.0024720653891563416}, {"id": 246, "seek": 129800, "start": 1321.0, "end": 1327.0, "text": " don't particularly or don't entirely reward correct answers.", "tokens": [51514, 500, 380, 4098, 420, 500, 380, 7696, 7782, 3006, 6338, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07658862414425366, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.0024720653891563416}, {"id": 247, "seek": 132700, "start": 1327.0, "end": 1331.0, "text": " But you can help it want to give you correct answers.", "tokens": [50364, 583, 291, 393, 854, 309, 528, 281, 976, 291, 3006, 6338, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09007915258407592, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0020504710264503956}, {"id": 248, "seek": 132700, "start": 1331.0, "end": 1339.0, "text": " If you think about the LM pre-training, what are the kinds of things in a document that would suggest,", "tokens": [50564, 759, 291, 519, 466, 264, 46529, 659, 12, 17227, 1760, 11, 437, 366, 264, 3685, 295, 721, 294, 257, 4166, 300, 576, 3402, 11, 50964], "temperature": 0.0, "avg_logprob": -0.09007915258407592, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0020504710264503956}, {"id": 249, "seek": 132700, "start": 1339.0, "end": 1342.0, "text": " oh, this is going to be high quality information.", "tokens": [50964, 1954, 11, 341, 307, 516, 281, 312, 1090, 3125, 1589, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09007915258407592, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0020504710264503956}, {"id": 250, "seek": 132700, "start": 1342.0, "end": 1353.0, "text": " And so, you can actually prime GPT-4 to give you high quality information by giving it custom instructions.", "tokens": [51114, 400, 370, 11, 291, 393, 767, 5835, 26039, 51, 12, 19, 281, 976, 291, 1090, 3125, 1589, 538, 2902, 309, 2375, 9415, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09007915258407592, "compression_ratio": 1.5392156862745099, "no_speech_prob": 0.0020504710264503956}, {"id": 251, "seek": 135300, "start": 1353.0, "end": 1360.0, "text": " And what this does is this is basically text that is prepended to all of your queries.", "tokens": [50364, 400, 437, 341, 775, 307, 341, 307, 1936, 2487, 300, 307, 2666, 3502, 281, 439, 295, 428, 24109, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10744448553157758, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.00970467645674944}, {"id": 252, "seek": 135300, "start": 1360.0, "end": 1364.0, "text": " And so, you say like, oh, you're brilliant at reasoning.", "tokens": [50714, 400, 370, 11, 291, 584, 411, 11, 1954, 11, 291, 434, 10248, 412, 21577, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10744448553157758, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.00970467645674944}, {"id": 253, "seek": 135300, "start": 1364.0, "end": 1370.0, "text": " So, like, okay, that's obviously to prime it to give good answers.", "tokens": [50914, 407, 11, 411, 11, 1392, 11, 300, 311, 2745, 281, 5835, 309, 281, 976, 665, 6338, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10744448553157758, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.00970467645674944}, {"id": 254, "seek": 135300, "start": 1370.0, "end": 1380.0, "text": " And then try to work against the fact that the RLHF folks preferred confidence.", "tokens": [51214, 400, 550, 853, 281, 589, 1970, 264, 1186, 300, 264, 497, 43, 39, 37, 4024, 16494, 6687, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10744448553157758, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.00970467645674944}, {"id": 255, "seek": 138000, "start": 1380.0, "end": 1385.0, "text": " Just tell it. No, tell me if there might not be a correct answer.", "tokens": [50364, 1449, 980, 309, 13, 883, 11, 980, 385, 498, 456, 1062, 406, 312, 257, 3006, 1867, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0848621318214818, "compression_ratio": 1.9772727272727273, "no_speech_prob": 0.12927505373954773}, {"id": 256, "seek": 138000, "start": 1385.0, "end": 1392.0, "text": " Also, the way that the text is generated is it literally generates the next word.", "tokens": [50614, 2743, 11, 264, 636, 300, 264, 2487, 307, 10833, 307, 309, 3736, 23815, 264, 958, 1349, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0848621318214818, "compression_ratio": 1.9772727272727273, "no_speech_prob": 0.12927505373954773}, {"id": 257, "seek": 138000, "start": 1392.0, "end": 1397.0, "text": " And then it puts all that whole lot back into the model and generates the next next word,", "tokens": [50964, 400, 550, 309, 8137, 439, 300, 1379, 688, 646, 666, 264, 2316, 293, 23815, 264, 958, 958, 1349, 11, 51214], "temperature": 0.0, "avg_logprob": -0.0848621318214818, "compression_ratio": 1.9772727272727273, "no_speech_prob": 0.12927505373954773}, {"id": 258, "seek": 138000, "start": 1397.0, "end": 1402.0, "text": " puts that all back in the model, generates the next next next word, and so forth.", "tokens": [51214, 8137, 300, 439, 646, 294, 264, 2316, 11, 23815, 264, 958, 958, 958, 1349, 11, 293, 370, 5220, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0848621318214818, "compression_ratio": 1.9772727272727273, "no_speech_prob": 0.12927505373954773}, {"id": 259, "seek": 138000, "start": 1402.0, "end": 1406.0, "text": " That means the more words it generates, the more computation it can do.", "tokens": [51464, 663, 1355, 264, 544, 2283, 309, 23815, 11, 264, 544, 24903, 309, 393, 360, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0848621318214818, "compression_ratio": 1.9772727272727273, "no_speech_prob": 0.12927505373954773}, {"id": 260, "seek": 138000, "start": 1406.0, "end": 1409.0, "text": " And so, I literally, I tell it that, right?", "tokens": [51664, 400, 370, 11, 286, 3736, 11, 286, 980, 309, 300, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.0848621318214818, "compression_ratio": 1.9772727272727273, "no_speech_prob": 0.12927505373954773}, {"id": 261, "seek": 140900, "start": 1409.0, "end": 1415.0, "text": " So, I say, first, bend a few sentences explaining background context, et cetera.", "tokens": [50364, 407, 11, 286, 584, 11, 700, 11, 11229, 257, 1326, 16579, 13468, 3678, 4319, 11, 1030, 11458, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0861128398350307, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.0008558278204873204}, {"id": 262, "seek": 140900, "start": 1415.0, "end": 1428.0, "text": " So, this custom instruction allows it to solve more challenging problems.", "tokens": [50664, 407, 11, 341, 2375, 10951, 4045, 309, 281, 5039, 544, 7595, 2740, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0861128398350307, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.0008558278204873204}, {"id": 263, "seek": 140900, "start": 1428.0, "end": 1432.0, "text": " And you can see the difference.", "tokens": [51314, 400, 291, 393, 536, 264, 2649, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0861128398350307, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.0008558278204873204}, {"id": 264, "seek": 140900, "start": 1432.0, "end": 1438.0, "text": " Here's what it looks like, for example, if I say, how do I get a count of rows grouped by value in pandas?", "tokens": [51514, 1692, 311, 437, 309, 1542, 411, 11, 337, 1365, 11, 498, 286, 584, 11, 577, 360, 286, 483, 257, 1207, 295, 13241, 41877, 538, 2158, 294, 4565, 296, 30, 51814], "temperature": 0.0, "avg_logprob": -0.0861128398350307, "compression_ratio": 1.4292682926829268, "no_speech_prob": 0.0008558278204873204}, {"id": 265, "seek": 143800, "start": 1438.0, "end": 1443.0, "text": " And it just gives me a whole lot of information, which is actually it thinking.", "tokens": [50364, 400, 309, 445, 2709, 385, 257, 1379, 688, 295, 1589, 11, 597, 307, 767, 309, 1953, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 266, "seek": 143800, "start": 1443.0, "end": 1446.0, "text": " So, I just skip over it, and then it gives me the answer.", "tokens": [50614, 407, 11, 286, 445, 10023, 670, 309, 11, 293, 550, 309, 2709, 385, 264, 1867, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 267, "seek": 143800, "start": 1446.0, "end": 1455.0, "text": " And actually, in my custom instructions, I actually say, if the request begins with VV,", "tokens": [50764, 400, 767, 11, 294, 452, 2375, 9415, 11, 286, 767, 584, 11, 498, 264, 5308, 7338, 365, 691, 53, 11, 51214], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 268, "seek": 143800, "start": 1455.0, "end": 1458.0, "text": " actually make it as concise as possible.", "tokens": [51214, 767, 652, 309, 382, 44882, 382, 1944, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 269, "seek": 143800, "start": 1458.0, "end": 1461.0, "text": " And so, it kind of goes into brief mode.", "tokens": [51364, 400, 370, 11, 309, 733, 295, 1709, 666, 5353, 4391, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 270, "seek": 143800, "start": 1461.0, "end": 1463.0, "text": " And here is brief mode.", "tokens": [51514, 400, 510, 307, 5353, 4391, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 271, "seek": 143800, "start": 1463.0, "end": 1464.0, "text": " How do I get the grid?", "tokens": [51614, 1012, 360, 286, 483, 264, 10748, 30, 51664], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 272, "seek": 143800, "start": 1464.0, "end": 1466.0, "text": " This is the same thing, but with VV at the start.", "tokens": [51664, 639, 307, 264, 912, 551, 11, 457, 365, 691, 53, 412, 264, 722, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11055110866187984, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.013629515655338764}, {"id": 273, "seek": 146600, "start": 1466.0, "end": 1468.0, "text": " And it just spits it out.", "tokens": [50364, 400, 309, 445, 637, 1208, 309, 484, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07110405859546126, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.007343036122620106}, {"id": 274, "seek": 146600, "start": 1468.0, "end": 1472.0, "text": " Now, in this case, it's a really simple question, so I didn't need time to think.", "tokens": [50464, 823, 11, 294, 341, 1389, 11, 309, 311, 257, 534, 2199, 1168, 11, 370, 286, 994, 380, 643, 565, 281, 519, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07110405859546126, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.007343036122620106}, {"id": 275, "seek": 146600, "start": 1472.0, "end": 1480.0, "text": " So, hopefully, that gives you a sense of how to get language models to give good answers.", "tokens": [50664, 407, 11, 4696, 11, 300, 2709, 291, 257, 2020, 295, 577, 281, 483, 2856, 5245, 281, 976, 665, 6338, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07110405859546126, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.007343036122620106}, {"id": 276, "seek": 146600, "start": 1480.0, "end": 1482.0, "text": " You have to help them.", "tokens": [51064, 509, 362, 281, 854, 552, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07110405859546126, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.007343036122620106}, {"id": 277, "seek": 146600, "start": 1482.0, "end": 1487.0, "text": " And if it's not working, it might be user error, basically.", "tokens": [51164, 400, 498, 309, 311, 406, 1364, 11, 309, 1062, 312, 4195, 6713, 11, 1936, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07110405859546126, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.007343036122620106}, {"id": 278, "seek": 146600, "start": 1487.0, "end": 1493.0, "text": " But having said that, there's plenty of stuff that language models like GPT-4 can't do.", "tokens": [51414, 583, 1419, 848, 300, 11, 456, 311, 7140, 295, 1507, 300, 2856, 5245, 411, 26039, 51, 12, 19, 393, 380, 360, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07110405859546126, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.007343036122620106}, {"id": 279, "seek": 149300, "start": 1494.0, "end": 1499.0, "text": " One thing to think carefully about is, does it know about itself?", "tokens": [50414, 1485, 551, 281, 519, 7500, 466, 307, 11, 775, 309, 458, 466, 2564, 30, 50664], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 280, "seek": 149300, "start": 1499.0, "end": 1500.0, "text": " Can you ask it?", "tokens": [50664, 1664, 291, 1029, 309, 30, 50714], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 281, "seek": 149300, "start": 1500.0, "end": 1502.0, "text": " What is your context length?", "tokens": [50714, 708, 307, 428, 4319, 4641, 30, 50814], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 282, "seek": 149300, "start": 1502.0, "end": 1504.0, "text": " How were you trained?", "tokens": [50814, 1012, 645, 291, 8895, 30, 50914], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 283, "seek": 149300, "start": 1504.0, "end": 1509.0, "text": " What transformer architecture are you based on?", "tokens": [50914, 708, 31782, 9482, 366, 291, 2361, 322, 30, 51164], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 284, "seek": 149300, "start": 1509.0, "end": 1515.0, "text": " At any one of these stages, did it have the opportunity to learn any of those things?", "tokens": [51164, 1711, 604, 472, 295, 613, 10232, 11, 630, 309, 362, 264, 2650, 281, 1466, 604, 295, 729, 721, 30, 51464], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 285, "seek": 149300, "start": 1515.0, "end": 1517.0, "text": " Well, obviously, not at the pre-training stage.", "tokens": [51464, 1042, 11, 2745, 11, 406, 412, 264, 659, 12, 17227, 1760, 3233, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06641036965126215, "compression_ratio": 1.5467980295566504, "no_speech_prob": 0.032083846628665924}, {"id": 286, "seek": 151700, "start": 1517.0, "end": 1525.0, "text": " Nothing on the internet existed during GPT-4's training saying how GPT-4 was trained.", "tokens": [50364, 6693, 322, 264, 4705, 13135, 1830, 26039, 51, 12, 19, 311, 3097, 1566, 577, 26039, 51, 12, 19, 390, 8895, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0782279410260789, "compression_ratio": 1.5209302325581395, "no_speech_prob": 0.10220661759376526}, {"id": 287, "seek": 151700, "start": 1525.0, "end": 1529.0, "text": " Probably ditto in the instruction tuning, probably ditto in the RLHF.", "tokens": [50764, 9210, 274, 34924, 294, 264, 10951, 15164, 11, 1391, 274, 34924, 294, 264, 497, 43, 39, 37, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0782279410260789, "compression_ratio": 1.5209302325581395, "no_speech_prob": 0.10220661759376526}, {"id": 288, "seek": 151700, "start": 1529.0, "end": 1535.0, "text": " So, in general, you can't ask, for example, a language model about itself.", "tokens": [50964, 407, 11, 294, 2674, 11, 291, 393, 380, 1029, 11, 337, 1365, 11, 257, 2856, 2316, 466, 2564, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0782279410260789, "compression_ratio": 1.5209302325581395, "no_speech_prob": 0.10220661759376526}, {"id": 289, "seek": 151700, "start": 1535.0, "end": 1541.0, "text": " Now, again, because of the RLHF, it'll want to make you happy by giving you opinionated answers.", "tokens": [51264, 823, 11, 797, 11, 570, 295, 264, 497, 43, 39, 37, 11, 309, 603, 528, 281, 652, 291, 2055, 538, 2902, 291, 4800, 770, 6338, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0782279410260789, "compression_ratio": 1.5209302325581395, "no_speech_prob": 0.10220661759376526}, {"id": 290, "seek": 154100, "start": 1541.0, "end": 1547.0, "text": " So, it'll just spit out the most likely thing it thinks with great confidence.", "tokens": [50364, 407, 11, 309, 603, 445, 22127, 484, 264, 881, 3700, 551, 309, 7309, 365, 869, 6687, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 291, "seek": 154100, "start": 1547.0, "end": 1550.0, "text": " This is just a general kind of hallucination, right?", "tokens": [50664, 639, 307, 445, 257, 2674, 733, 295, 35212, 2486, 11, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 292, "seek": 154100, "start": 1550.0, "end": 1556.0, "text": " So, hallucinations is just this idea that the language model wants to complete the sentence,", "tokens": [50814, 407, 11, 35212, 10325, 307, 445, 341, 1558, 300, 264, 2856, 2316, 2738, 281, 3566, 264, 8174, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 293, "seek": 154100, "start": 1556.0, "end": 1560.0, "text": " and it wants to do it in an opinionated way that's likely to make people happy.", "tokens": [51114, 293, 309, 2738, 281, 360, 309, 294, 364, 4800, 770, 636, 300, 311, 3700, 281, 652, 561, 2055, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 294, "seek": 154100, "start": 1562.0, "end": 1564.0, "text": " It doesn't know anything about URLs.", "tokens": [51414, 467, 1177, 380, 458, 1340, 466, 43267, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 295, "seek": 154100, "start": 1564.0, "end": 1567.0, "text": " It really hasn't seen many at all.", "tokens": [51514, 467, 534, 6132, 380, 1612, 867, 412, 439, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 296, "seek": 154100, "start": 1567.0, "end": 1570.0, "text": " I think a lot of them, if not all of them, pretty much were stripped out.", "tokens": [51664, 286, 519, 257, 688, 295, 552, 11, 498, 406, 439, 295, 552, 11, 1238, 709, 645, 33221, 484, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07197582115561275, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.04464375972747803}, {"id": 297, "seek": 157000, "start": 1571.0, "end": 1578.0, "text": " So, if you ask it anything about, like, what's at this web page, again, it'll generally just make it up.", "tokens": [50414, 407, 11, 498, 291, 1029, 309, 1340, 466, 11, 411, 11, 437, 311, 412, 341, 3670, 3028, 11, 797, 11, 309, 603, 5101, 445, 652, 309, 493, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1431288329922423, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.005552023183554411}, {"id": 298, "seek": 157000, "start": 1578.0, "end": 1583.0, "text": " And it doesn't know, at least GPT-4 doesn't know anything after September 2021,", "tokens": [50764, 400, 309, 1177, 380, 458, 11, 412, 1935, 26039, 51, 12, 19, 1177, 380, 458, 1340, 934, 7216, 7201, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1431288329922423, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.005552023183554411}, {"id": 299, "seek": 157000, "start": 1583.0, "end": 1593.0, "text": " because the information it was pre-trained on was from that time period, September 2021 and before,", "tokens": [51014, 570, 264, 1589, 309, 390, 659, 12, 17227, 2001, 322, 390, 490, 300, 565, 2896, 11, 7216, 7201, 293, 949, 11, 51514], "temperature": 0.0, "avg_logprob": -0.1431288329922423, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.005552023183554411}, {"id": 300, "seek": 157000, "start": 1593.0, "end": 1595.0, "text": " called the Knowledge Cutoff.", "tokens": [51514, 1219, 264, 32906, 9431, 4506, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1431288329922423, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.005552023183554411}, {"id": 301, "seek": 157000, "start": 1595.0, "end": 1598.0, "text": " So, here's some things it can't do.", "tokens": [51614, 407, 11, 510, 311, 512, 721, 309, 393, 380, 360, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1431288329922423, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.005552023183554411}, {"id": 302, "seek": 159800, "start": 1599.0, "end": 1602.0, "text": " Steve Newman sent me this good example of something that it can't do.", "tokens": [50414, 7466, 49377, 2279, 385, 341, 665, 1365, 295, 746, 300, 309, 393, 380, 360, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 303, "seek": 159800, "start": 1605.0, "end": 1607.0, "text": " Here is a logic puzzle.", "tokens": [50714, 1692, 307, 257, 9952, 12805, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 304, "seek": 159800, "start": 1607.0, "end": 1611.0, "text": " I need to carry a cabbage, a goat, and a wolf across a river.", "tokens": [50814, 286, 643, 281, 3985, 257, 22944, 11, 257, 23608, 11, 293, 257, 19216, 2108, 257, 6810, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 305, "seek": 159800, "start": 1611.0, "end": 1613.0, "text": " I can only carry one item at a time.", "tokens": [51014, 286, 393, 787, 3985, 472, 3174, 412, 257, 565, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 306, "seek": 159800, "start": 1613.0, "end": 1616.0, "text": " I can't leave the goat with a cabbage.", "tokens": [51114, 286, 393, 380, 1856, 264, 23608, 365, 257, 22944, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 307, "seek": 159800, "start": 1616.0, "end": 1618.0, "text": " I can't leave the cabbage with a wolf.", "tokens": [51264, 286, 393, 380, 1856, 264, 22944, 365, 257, 19216, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 308, "seek": 159800, "start": 1618.0, "end": 1621.0, "text": " How do I get everything across to the other side?", "tokens": [51364, 1012, 360, 286, 483, 1203, 2108, 281, 264, 661, 1252, 30, 51514], "temperature": 0.0, "avg_logprob": -0.05901973122044613, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.0017005702247843146}, {"id": 309, "seek": 162100, "start": 1621.0, "end": 1627.0, "text": " Now, the problem is, this looks a lot like something called the classic river crossing puzzle.", "tokens": [50364, 823, 11, 264, 1154, 307, 11, 341, 1542, 257, 688, 411, 746, 1219, 264, 7230, 6810, 14712, 12805, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11982591335590069, "compression_ratio": 1.575, "no_speech_prob": 0.0016482747159898281}, {"id": 310, "seek": 162100, "start": 1629.0, "end": 1635.0, "text": " So, classic, in fact, that it has a whole Wikipedia page about it.", "tokens": [50764, 407, 11, 7230, 11, 294, 1186, 11, 300, 309, 575, 257, 1379, 28999, 3028, 466, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11982591335590069, "compression_ratio": 1.575, "no_speech_prob": 0.0016482747159898281}, {"id": 311, "seek": 162100, "start": 1635.0, "end": 1644.0, "text": " And in the classic puzzle, the wolf would eat the goat, or the goat would eat the cabbage.", "tokens": [51064, 400, 294, 264, 7230, 12805, 11, 264, 19216, 576, 1862, 264, 23608, 11, 420, 264, 23608, 576, 1862, 264, 22944, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11982591335590069, "compression_ratio": 1.575, "no_speech_prob": 0.0016482747159898281}, {"id": 312, "seek": 164400, "start": 1645.0, "end": 1652.0, "text": " Now, in Steve's version, he changed it.", "tokens": [50414, 823, 11, 294, 7466, 311, 3037, 11, 415, 3105, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06292201732767039, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.0017543521244078875}, {"id": 313, "seek": 164400, "start": 1655.0, "end": 1660.0, "text": " The goat would eat the cabbage, and the wolf would eat the cabbage, but the wolf won't eat the goat.", "tokens": [50914, 440, 23608, 576, 1862, 264, 22944, 11, 293, 264, 19216, 576, 1862, 264, 22944, 11, 457, 264, 19216, 1582, 380, 1862, 264, 23608, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06292201732767039, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.0017543521244078875}, {"id": 314, "seek": 164400, "start": 1662.0, "end": 1663.0, "text": " So, what happens?", "tokens": [51264, 407, 11, 437, 2314, 30, 51314], "temperature": 0.0, "avg_logprob": -0.06292201732767039, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.0017543521244078875}, {"id": 315, "seek": 164400, "start": 1663.0, "end": 1669.0, "text": " Well, very interestingly, GPT-4 here is entirely overwhelmed by the language model training.", "tokens": [51314, 1042, 11, 588, 25873, 11, 26039, 51, 12, 19, 510, 307, 7696, 19042, 538, 264, 2856, 2316, 3097, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06292201732767039, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.0017543521244078875}, {"id": 316, "seek": 164400, "start": 1669.0, "end": 1673.0, "text": " It's seen this puzzle so many times, it knows what word comes next.", "tokens": [51614, 467, 311, 1612, 341, 12805, 370, 867, 1413, 11, 309, 3255, 437, 1349, 1487, 958, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06292201732767039, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.0017543521244078875}, {"id": 317, "seek": 167300, "start": 1673.0, "end": 1678.0, "text": " So, it says, oh, yeah, I take the goat across the road, across the river, and leave it on the other side,", "tokens": [50364, 407, 11, 309, 1619, 11, 1954, 11, 1338, 11, 286, 747, 264, 23608, 2108, 264, 3060, 11, 2108, 264, 6810, 11, 293, 1856, 309, 322, 264, 661, 1252, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08838231527983252, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.001098461216315627}, {"id": 318, "seek": 167300, "start": 1678.0, "end": 1684.0, "text": " leaving the wolf with a cabbage, but we're just told you can't leave the wolf with a cabbage.", "tokens": [50614, 5012, 264, 19216, 365, 257, 22944, 11, 457, 321, 434, 445, 1907, 291, 393, 380, 1856, 264, 19216, 365, 257, 22944, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08838231527983252, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.001098461216315627}, {"id": 319, "seek": 167300, "start": 1684.0, "end": 1686.0, "text": " So, it gets it wrong.", "tokens": [50914, 407, 11, 309, 2170, 309, 2085, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08838231527983252, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.001098461216315627}, {"id": 320, "seek": 167300, "start": 1686.0, "end": 1693.0, "text": " Now, the thing is, though, you can encourage GPT-4 or any of these language models to try again.", "tokens": [51014, 823, 11, 264, 551, 307, 11, 1673, 11, 291, 393, 5373, 26039, 51, 12, 19, 420, 604, 295, 613, 2856, 5245, 281, 853, 797, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08838231527983252, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.001098461216315627}, {"id": 321, "seek": 167300, "start": 1693.0, "end": 1699.0, "text": " So, during the instruction tuning in RLHF, they're actually fine-tuned with multi-stage conversations.", "tokens": [51364, 407, 11, 1830, 264, 10951, 15164, 294, 497, 43, 39, 37, 11, 436, 434, 767, 2489, 12, 83, 43703, 365, 4825, 12, 17882, 7315, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08838231527983252, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.001098461216315627}, {"id": 322, "seek": 167300, "start": 1699.0, "end": 1702.0, "text": " So, you can give it a multi-stage conversation.", "tokens": [51664, 407, 11, 291, 393, 976, 309, 257, 4825, 12, 17882, 3761, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08838231527983252, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.001098461216315627}, {"id": 323, "seek": 170200, "start": 1702.0, "end": 1704.0, "text": " Repeat back to me the constraints I listed.", "tokens": [50364, 28523, 646, 281, 385, 264, 18491, 286, 10052, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 324, "seek": 170200, "start": 1704.0, "end": 1708.0, "text": " What happened after step one is a constraint violated.", "tokens": [50464, 708, 2011, 934, 1823, 472, 307, 257, 25534, 33239, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 325, "seek": 170200, "start": 1708.0, "end": 1711.0, "text": " Oh, yeah, yeah, yeah, I made a mistake.", "tokens": [50664, 876, 11, 1338, 11, 1338, 11, 1338, 11, 286, 1027, 257, 6146, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 326, "seek": 170200, "start": 1711.0, "end": 1717.0, "text": " Okay, my new attempt, instead of taking the goat across the river and leaving it on the other side,", "tokens": [50814, 1033, 11, 452, 777, 5217, 11, 2602, 295, 1940, 264, 23608, 2108, 264, 6810, 293, 5012, 309, 322, 264, 661, 1252, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 327, "seek": 170200, "start": 1717.0, "end": 1721.0, "text": " is, oh, I'll take the goat across the river and leave it on the other side.", "tokens": [51114, 307, 11, 1954, 11, 286, 603, 747, 264, 23608, 2108, 264, 6810, 293, 1856, 309, 322, 264, 661, 1252, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 328, "seek": 170200, "start": 1721.0, "end": 1723.0, "text": " It's done the same thing.", "tokens": [51314, 467, 311, 1096, 264, 912, 551, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 329, "seek": 170200, "start": 1723.0, "end": 1727.0, "text": " Oh, yeah, I did do the same thing.", "tokens": [51414, 876, 11, 1338, 11, 286, 630, 360, 264, 912, 551, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 330, "seek": 170200, "start": 1727.0, "end": 1729.0, "text": " Okay, I'll take the wolf across.", "tokens": [51614, 1033, 11, 286, 603, 747, 264, 19216, 2108, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09585963177079913, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.005383312702178955}, {"id": 331, "seek": 172900, "start": 1729.0, "end": 1732.0, "text": " Well, now the goat's with a cabbage. That still doesn't work.", "tokens": [50364, 1042, 11, 586, 264, 23608, 311, 365, 257, 22944, 13, 663, 920, 1177, 380, 589, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 332, "seek": 172900, "start": 1732.0, "end": 1736.0, "text": " Oh, yeah, that didn't work either.", "tokens": [50514, 876, 11, 1338, 11, 300, 994, 380, 589, 2139, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 333, "seek": 172900, "start": 1736.0, "end": 1738.0, "text": " Sorry about that.", "tokens": [50714, 4919, 466, 300, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 334, "seek": 172900, "start": 1738.0, "end": 1741.0, "text": " Instead of taking the goat across the other side, I'll take the goat across the other side.", "tokens": [50814, 7156, 295, 1940, 264, 23608, 2108, 264, 661, 1252, 11, 286, 603, 747, 264, 23608, 2108, 264, 661, 1252, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 335, "seek": 172900, "start": 1741.0, "end": 1743.0, "text": " Okay, what's going on here?", "tokens": [50964, 1033, 11, 437, 311, 516, 322, 510, 30, 51064], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 336, "seek": 172900, "start": 1743.0, "end": 1745.0, "text": " Right, this is terrible.", "tokens": [51064, 1779, 11, 341, 307, 6237, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 337, "seek": 172900, "start": 1745.0, "end": 1756.0, "text": " Well, one of the problems here is that not only is on the internet it's so common to see this particular goat puzzle", "tokens": [51164, 1042, 11, 472, 295, 264, 2740, 510, 307, 300, 406, 787, 307, 322, 264, 4705, 309, 311, 370, 2689, 281, 536, 341, 1729, 23608, 12805, 51714], "temperature": 0.0, "avg_logprob": -0.10235563005719867, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.00521911820396781}, {"id": 338, "seek": 175600, "start": 1756.0, "end": 1759.0, "text": " that it's so confident it knows what the next word is.", "tokens": [50364, 300, 309, 311, 370, 6679, 309, 3255, 437, 264, 958, 1349, 307, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05626287667647652, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.1821753829717636}, {"id": 339, "seek": 175600, "start": 1759.0, "end": 1765.0, "text": " Also, on the internet, when you see stuff which is stupid on a web page,", "tokens": [50514, 2743, 11, 322, 264, 4705, 11, 562, 291, 536, 1507, 597, 307, 6631, 322, 257, 3670, 3028, 11, 50814], "temperature": 0.0, "avg_logprob": -0.05626287667647652, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.1821753829717636}, {"id": 340, "seek": 175600, "start": 1765.0, "end": 1770.0, "text": " it's really likely to be followed up with more stuff that is stupid.", "tokens": [50814, 309, 311, 534, 3700, 281, 312, 6263, 493, 365, 544, 1507, 300, 307, 6631, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05626287667647652, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.1821753829717636}, {"id": 341, "seek": 175600, "start": 1770.0, "end": 1778.0, "text": " Once GPT-4 starts being wrong, it tends to be more and more wrong.", "tokens": [51064, 3443, 26039, 51, 12, 19, 3719, 885, 2085, 11, 309, 12258, 281, 312, 544, 293, 544, 2085, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05626287667647652, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.1821753829717636}, {"id": 342, "seek": 175600, "start": 1778.0, "end": 1784.0, "text": " It's very hard to turn it around to start it making it be right.", "tokens": [51464, 467, 311, 588, 1152, 281, 1261, 309, 926, 281, 722, 309, 1455, 309, 312, 558, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05626287667647652, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.1821753829717636}, {"id": 343, "seek": 178400, "start": 1784.0, "end": 1797.0, "text": " So you actually have to go back and there's actually an edit button on these chats.", "tokens": [50364, 407, 291, 767, 362, 281, 352, 646, 293, 456, 311, 767, 364, 8129, 2960, 322, 613, 38057, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10723885843309305, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.021595759317278862}, {"id": 344, "seek": 178400, "start": 1797.0, "end": 1800.0, "text": " And so what you generally want to do is if it's made a mistake,", "tokens": [51014, 400, 370, 437, 291, 5101, 528, 281, 360, 307, 498, 309, 311, 1027, 257, 6146, 11, 51164], "temperature": 0.0, "avg_logprob": -0.10723885843309305, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.021595759317278862}, {"id": 345, "seek": 178400, "start": 1800.0, "end": 1803.0, "text": " is don't say, oh, here's more information to help you fix it.", "tokens": [51164, 307, 500, 380, 584, 11, 1954, 11, 510, 311, 544, 1589, 281, 854, 291, 3191, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10723885843309305, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.021595759317278862}, {"id": 346, "seek": 180300, "start": 1803.0, "end": 1816.0, "text": " But instead, go back and click the edit and change it here.", "tokens": [50364, 583, 2602, 11, 352, 646, 293, 2052, 264, 8129, 293, 1319, 309, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09868964415330153, "compression_ratio": 1.4251497005988023, "no_speech_prob": 0.2626963257789612}, {"id": 347, "seek": 180300, "start": 1816.0, "end": 1821.0, "text": " And so this time it's not going to get confused.", "tokens": [51014, 400, 370, 341, 565, 309, 311, 406, 516, 281, 483, 9019, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09868964415330153, "compression_ratio": 1.4251497005988023, "no_speech_prob": 0.2626963257789612}, {"id": 348, "seek": 180300, "start": 1821.0, "end": 1826.0, "text": " So in this case, actually fixing Steve's example takes quite a lot of effort,", "tokens": [51264, 407, 294, 341, 1389, 11, 767, 19442, 7466, 311, 1365, 2516, 1596, 257, 688, 295, 4630, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09868964415330153, "compression_ratio": 1.4251497005988023, "no_speech_prob": 0.2626963257789612}, {"id": 349, "seek": 180300, "start": 1826.0, "end": 1829.0, "text": " but I think I managed to get it to work eventually.", "tokens": [51514, 457, 286, 519, 286, 6453, 281, 483, 309, 281, 589, 4728, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09868964415330153, "compression_ratio": 1.4251497005988023, "no_speech_prob": 0.2626963257789612}, {"id": 350, "seek": 182900, "start": 1829.0, "end": 1832.0, "text": " And I actually said, oh, sometimes people read things too quickly.", "tokens": [50364, 400, 286, 767, 848, 11, 1954, 11, 2171, 561, 1401, 721, 886, 2661, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 351, "seek": 182900, "start": 1832.0, "end": 1835.0, "text": " They don't notice things, it can trick them up.", "tokens": [50514, 814, 500, 380, 3449, 721, 11, 309, 393, 4282, 552, 493, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 352, "seek": 182900, "start": 1835.0, "end": 1838.0, "text": " Then they apply some pattern, get the wrong answer.", "tokens": [50664, 1396, 436, 3079, 512, 5102, 11, 483, 264, 2085, 1867, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 353, "seek": 182900, "start": 1838.0, "end": 1840.0, "text": " You do the same thing, by the way.", "tokens": [50814, 509, 360, 264, 912, 551, 11, 538, 264, 636, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 354, "seek": 182900, "start": 1840.0, "end": 1842.0, "text": " So I'm going to trick you.", "tokens": [50914, 407, 286, 478, 516, 281, 4282, 291, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 355, "seek": 182900, "start": 1842.0, "end": 1846.0, "text": " So before you're about to get tricked, make sure you don't get tricked.", "tokens": [51014, 407, 949, 291, 434, 466, 281, 483, 39345, 11, 652, 988, 291, 500, 380, 483, 39345, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 356, "seek": 182900, "start": 1846.0, "end": 1848.0, "text": " Here's the tricky puzzle.", "tokens": [51214, 1692, 311, 264, 12414, 12805, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 357, "seek": 182900, "start": 1848.0, "end": 1854.0, "text": " And then also with my custom instructions, it takes time discussing it.", "tokens": [51314, 400, 550, 611, 365, 452, 2375, 9415, 11, 309, 2516, 565, 10850, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 358, "seek": 182900, "start": 1854.0, "end": 1856.0, "text": " And this time it gets it correct.", "tokens": [51614, 400, 341, 565, 309, 2170, 309, 3006, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 359, "seek": 182900, "start": 1856.0, "end": 1858.0, "text": " It takes the cabbage across first.", "tokens": [51714, 467, 2516, 264, 22944, 2108, 700, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0684844689775807, "compression_ratio": 1.6920289855072463, "no_speech_prob": 0.1845056414604187}, {"id": 360, "seek": 185800, "start": 1858.0, "end": 1863.0, "text": " So it took a lot of effort to get to a point where it could actually solve this", "tokens": [50364, 407, 309, 1890, 257, 688, 295, 4630, 281, 483, 281, 257, 935, 689, 309, 727, 767, 5039, 341, 50614], "temperature": 0.0, "avg_logprob": -0.10001662969589234, "compression_ratio": 1.5854922279792747, "no_speech_prob": 0.004753020592033863}, {"id": 361, "seek": 185800, "start": 1863.0, "end": 1871.0, "text": " because for things where it's been primed to answer a certain way", "tokens": [50614, 570, 337, 721, 689, 309, 311, 668, 2886, 292, 281, 1867, 257, 1629, 636, 51014], "temperature": 0.0, "avg_logprob": -0.10001662969589234, "compression_ratio": 1.5854922279792747, "no_speech_prob": 0.004753020592033863}, {"id": 362, "seek": 185800, "start": 1871.0, "end": 1876.0, "text": " again and again and again, it's very hard for it to not do that.", "tokens": [51014, 797, 293, 797, 293, 797, 11, 309, 311, 588, 1152, 337, 309, 281, 406, 360, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10001662969589234, "compression_ratio": 1.5854922279792747, "no_speech_prob": 0.004753020592033863}, {"id": 363, "seek": 185800, "start": 1876.0, "end": 1883.0, "text": " OK, now something else super helpful that you can use", "tokens": [51264, 2264, 11, 586, 746, 1646, 1687, 4961, 300, 291, 393, 764, 51614], "temperature": 0.0, "avg_logprob": -0.10001662969589234, "compression_ratio": 1.5854922279792747, "no_speech_prob": 0.004753020592033863}, {"id": 364, "seek": 185800, "start": 1883.0, "end": 1886.0, "text": " is what they call advanced data analysis.", "tokens": [51614, 307, 437, 436, 818, 7339, 1412, 5215, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10001662969589234, "compression_ratio": 1.5854922279792747, "no_speech_prob": 0.004753020592033863}, {"id": 365, "seek": 188600, "start": 1886.0, "end": 1891.0, "text": " In advanced data analysis, you can ask it to basically write code for you.", "tokens": [50364, 682, 7339, 1412, 5215, 11, 291, 393, 1029, 309, 281, 1936, 2464, 3089, 337, 291, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 366, "seek": 188600, "start": 1891.0, "end": 1895.0, "text": " And we're going to look at how to implement this from scratch ourselves quite soon.", "tokens": [50614, 400, 321, 434, 516, 281, 574, 412, 577, 281, 4445, 341, 490, 8459, 4175, 1596, 2321, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 367, "seek": 188600, "start": 1895.0, "end": 1897.0, "text": " But first of all, let's learn how to use it.", "tokens": [50814, 583, 700, 295, 439, 11, 718, 311, 1466, 577, 281, 764, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 368, "seek": 188600, "start": 1897.0, "end": 1903.0, "text": " So I was trying to build something that split into markdown headings,", "tokens": [50914, 407, 286, 390, 1382, 281, 1322, 746, 300, 7472, 666, 1491, 5093, 1378, 1109, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 369, "seek": 188600, "start": 1903.0, "end": 1906.0, "text": " a document on third level markdown headings.", "tokens": [51214, 257, 4166, 322, 2636, 1496, 1491, 5093, 1378, 1109, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 370, "seek": 188600, "start": 1906.0, "end": 1909.0, "text": " So that's three hashes at the start of a line.", "tokens": [51364, 407, 300, 311, 1045, 575, 8076, 412, 264, 722, 295, 257, 1622, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 371, "seek": 188600, "start": 1909.0, "end": 1912.0, "text": " And I was doing it on the whole of Wikipedia.", "tokens": [51514, 400, 286, 390, 884, 309, 322, 264, 1379, 295, 28999, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 372, "seek": 188600, "start": 1912.0, "end": 1915.0, "text": " So using regular expressions was really slow.", "tokens": [51664, 407, 1228, 3890, 15277, 390, 534, 2964, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07206264212111796, "compression_ratio": 1.6498194945848375, "no_speech_prob": 0.004753203596919775}, {"id": 373, "seek": 191500, "start": 1915.0, "end": 1917.0, "text": " I said, oh, I want to speed this up.", "tokens": [50364, 286, 848, 11, 1954, 11, 286, 528, 281, 3073, 341, 493, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 374, "seek": 191500, "start": 1917.0, "end": 1921.0, "text": " And it said, OK, here's some code, which is great,", "tokens": [50464, 400, 309, 848, 11, 2264, 11, 510, 311, 512, 3089, 11, 597, 307, 869, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 375, "seek": 191500, "start": 1921.0, "end": 1925.0, "text": " because then I can say, OK, test it and include edge cases.", "tokens": [50664, 570, 550, 286, 393, 584, 11, 2264, 11, 1500, 309, 293, 4090, 4691, 3331, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 376, "seek": 191500, "start": 1925.0, "end": 1934.0, "text": " And so it then puts in the code, creates extra cases, tests it,", "tokens": [50864, 400, 370, 309, 550, 8137, 294, 264, 3089, 11, 7829, 2857, 3331, 11, 6921, 309, 11, 51314], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 377, "seek": 191500, "start": 1934.0, "end": 1939.0, "text": " and says, yep, it's working.", "tokens": [51314, 293, 1619, 11, 18633, 11, 309, 311, 1364, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 378, "seek": 191500, "start": 1939.0, "end": 1941.0, "text": " However, I discovered it's not.", "tokens": [51564, 2908, 11, 286, 6941, 309, 311, 406, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 379, "seek": 191500, "start": 1941.0, "end": 1944.0, "text": " I noticed it's actually removing the carriage return at the end of each sentence.", "tokens": [51664, 286, 5694, 309, 311, 767, 12720, 264, 31811, 2736, 412, 264, 917, 295, 1184, 8174, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1052368734484521, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.008060084655880928}, {"id": 380, "seek": 194400, "start": 1944.0, "end": 1948.0, "text": " So I said, oh, fix that and update your tests.", "tokens": [50364, 407, 286, 848, 11, 1954, 11, 3191, 300, 293, 5623, 428, 6921, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11598153633646446, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.0088445283472538}, {"id": 381, "seek": 194400, "start": 1948.0, "end": 1954.0, "text": " So it said, OK, so now it's changed the test, updated the test cases,", "tokens": [50564, 407, 309, 848, 11, 2264, 11, 370, 586, 309, 311, 3105, 264, 1500, 11, 10588, 264, 1500, 3331, 11, 50864], "temperature": 0.0, "avg_logprob": -0.11598153633646446, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.0088445283472538}, {"id": 382, "seek": 194400, "start": 1954.0, "end": 1958.0, "text": " it's run them and it's not working.", "tokens": [50864, 309, 311, 1190, 552, 293, 309, 311, 406, 1364, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11598153633646446, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.0088445283472538}, {"id": 383, "seek": 194400, "start": 1958.0, "end": 1963.0, "text": " So it says, oh, yeah, fix the issue in the test cases.", "tokens": [51064, 407, 309, 1619, 11, 1954, 11, 1338, 11, 3191, 264, 2734, 294, 264, 1500, 3331, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11598153633646446, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.0088445283472538}, {"id": 384, "seek": 194400, "start": 1963.0, "end": 1965.0, "text": " Nope, it didn't work.", "tokens": [51314, 12172, 11, 309, 994, 380, 589, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11598153633646446, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.0088445283472538}, {"id": 385, "seek": 194400, "start": 1965.0, "end": 1972.0, "text": " And you can see it's quite clever the way it's trying to fix it by looking at the results.", "tokens": [51414, 400, 291, 393, 536, 309, 311, 1596, 13494, 264, 636, 309, 311, 1382, 281, 3191, 309, 538, 1237, 412, 264, 3542, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11598153633646446, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.0088445283472538}, {"id": 386, "seek": 197200, "start": 1973.0, "end": 1976.0, "text": " But as you can see, it's not.", "tokens": [50414, 583, 382, 291, 393, 536, 11, 309, 311, 406, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 387, "seek": 197200, "start": 1976.0, "end": 1980.0, "text": " Every one of these is another attempt, another attempt, another attempt,", "tokens": [50564, 2048, 472, 295, 613, 307, 1071, 5217, 11, 1071, 5217, 11, 1071, 5217, 11, 50764], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 388, "seek": 197200, "start": 1980.0, "end": 1982.0, "text": " until eventually I gave up waiting.", "tokens": [50764, 1826, 4728, 286, 2729, 493, 3806, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 389, "seek": 197200, "start": 1982.0, "end": 1983.0, "text": " It's so funny each time.", "tokens": [50864, 467, 311, 370, 4074, 1184, 565, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 390, "seek": 197200, "start": 1983.0, "end": 1985.0, "text": " It's like, de-banging again.", "tokens": [50914, 467, 311, 411, 11, 368, 12, 65, 9741, 797, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 391, "seek": 197200, "start": 1985.0, "end": 1988.0, "text": " OK, this time I got to handle it properly.", "tokens": [51014, 2264, 11, 341, 565, 286, 658, 281, 4813, 309, 6108, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 392, "seek": 197200, "start": 1988.0, "end": 1992.0, "text": " And I gave up at the point where it's like, oh, one more attempt.", "tokens": [51164, 400, 286, 2729, 493, 412, 264, 935, 689, 309, 311, 411, 11, 1954, 11, 472, 544, 5217, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 393, "seek": 197200, "start": 1992.0, "end": 1995.0, "text": " So it didn't solve it, interestingly enough.", "tokens": [51364, 407, 309, 994, 380, 5039, 309, 11, 25873, 1547, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13923849378313338, "compression_ratio": 1.6320754716981132, "no_speech_prob": 0.014056729152798653}, {"id": 394, "seek": 199500, "start": 1995.0, "end": 2005.0, "text": " And again, there's some limits to the amount of logic that it can do.", "tokens": [50364, 400, 797, 11, 456, 311, 512, 10406, 281, 264, 2372, 295, 9952, 300, 309, 393, 360, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13101981325847348, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.014948727563023567}, {"id": 395, "seek": 199500, "start": 2005.0, "end": 2007.0, "text": " This is really a very simple question.", "tokens": [50864, 639, 307, 534, 257, 588, 2199, 1168, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13101981325847348, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.014948727563023567}, {"id": 396, "seek": 199500, "start": 2007.0, "end": 2009.0, "text": " I asked it to do for me.", "tokens": [50964, 286, 2351, 309, 281, 360, 337, 385, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13101981325847348, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.014948727563023567}, {"id": 397, "seek": 199500, "start": 2009.0, "end": 2015.0, "text": " And so hopefully you can see you can't expect even GPT for code interpreter", "tokens": [51064, 400, 370, 4696, 291, 393, 536, 291, 393, 380, 2066, 754, 26039, 51, 337, 3089, 34132, 51364], "temperature": 0.0, "avg_logprob": -0.13101981325847348, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.014948727563023567}, {"id": 398, "seek": 199500, "start": 2015.0, "end": 2022.0, "text": " or advanced data analysis that is now called to make it so you don't have to write code anymore.", "tokens": [51364, 420, 7339, 1412, 5215, 300, 307, 586, 1219, 281, 652, 309, 370, 291, 500, 380, 362, 281, 2464, 3089, 3602, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13101981325847348, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.014948727563023567}, {"id": 399, "seek": 202200, "start": 2022.0, "end": 2027.0, "text": " So there's a lot of substitute for having programmers.", "tokens": [50364, 407, 456, 311, 257, 688, 295, 15802, 337, 1419, 41504, 13, 50614], "temperature": 0.0, "avg_logprob": -0.21099308887159968, "compression_ratio": 1.446078431372549, "no_speech_prob": 0.033572182059288025}, {"id": 400, "seek": 202200, "start": 2031.0, "end": 2034.0, "text": " But it can often do a lot, as I'll show you in a moment.", "tokens": [50814, 583, 309, 393, 2049, 360, 257, 688, 11, 382, 286, 603, 855, 291, 294, 257, 1623, 13, 50964], "temperature": 0.0, "avg_logprob": -0.21099308887159968, "compression_ratio": 1.446078431372549, "no_speech_prob": 0.033572182059288025}, {"id": 401, "seek": 202200, "start": 2034.0, "end": 2041.0, "text": " So for example, actually OCR, like this is something I thought was really cool.", "tokens": [50964, 407, 337, 1365, 11, 767, 422, 18547, 11, 411, 341, 307, 746, 286, 1194, 390, 534, 1627, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21099308887159968, "compression_ratio": 1.446078431372549, "no_speech_prob": 0.033572182059288025}, {"id": 402, "seek": 202200, "start": 2041.0, "end": 2044.0, "text": " You can just paste, sorry, paste or upload.", "tokens": [51314, 509, 393, 445, 9163, 11, 2597, 11, 9163, 420, 6580, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21099308887159968, "compression_ratio": 1.446078431372549, "no_speech_prob": 0.033572182059288025}, {"id": 403, "seek": 202200, "start": 2044.0, "end": 2051.0, "text": " So GPT for you can upload an image, advanced data analysis.", "tokens": [51464, 407, 26039, 51, 337, 291, 393, 6580, 364, 3256, 11, 7339, 1412, 5215, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21099308887159968, "compression_ratio": 1.446078431372549, "no_speech_prob": 0.033572182059288025}, {"id": 404, "seek": 205100, "start": 2051.0, "end": 2055.0, "text": " Yeah, you can upload an image here.", "tokens": [50364, 865, 11, 291, 393, 6580, 364, 3256, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 405, "seek": 205100, "start": 2055.0, "end": 2060.0, "text": " And then I wanted to basically grab some text out of an image.", "tokens": [50564, 400, 550, 286, 1415, 281, 1936, 4444, 512, 2487, 484, 295, 364, 3256, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 406, "seek": 205100, "start": 2060.0, "end": 2064.0, "text": " Somebody had got a screenshot with their screen, which was something saying,", "tokens": [50814, 13463, 632, 658, 257, 27712, 365, 641, 2568, 11, 597, 390, 746, 1566, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 407, "seek": 205100, "start": 2064.0, "end": 2067.0, "text": " oh, this language model can't do this.", "tokens": [51014, 1954, 11, 341, 2856, 2316, 393, 380, 360, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 408, "seek": 205100, "start": 2067.0, "end": 2068.0, "text": " And I wanted to try it as well.", "tokens": [51164, 400, 286, 1415, 281, 853, 309, 382, 731, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 409, "seek": 205100, "start": 2068.0, "end": 2072.0, "text": " So rather than retyping it, I just uploaded that image, my screenshot,", "tokens": [51214, 407, 2831, 813, 319, 874, 3381, 309, 11, 286, 445, 17135, 300, 3256, 11, 452, 27712, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 410, "seek": 205100, "start": 2072.0, "end": 2074.0, "text": " and said, can you extract the text from this image?", "tokens": [51414, 293, 848, 11, 393, 291, 8947, 264, 2487, 490, 341, 3256, 30, 51514], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 411, "seek": 205100, "start": 2074.0, "end": 2076.0, "text": " And it said, oh, yeah, I could do that.", "tokens": [51514, 400, 309, 848, 11, 1954, 11, 1338, 11, 286, 727, 360, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 412, "seek": 205100, "start": 2076.0, "end": 2078.0, "text": " I could use OCR.", "tokens": [51614, 286, 727, 764, 422, 18547, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09720127044185516, "compression_ratio": 1.6705882352941177, "no_speech_prob": 0.0027136995922774076}, {"id": 413, "seek": 207800, "start": 2078.0, "end": 2082.0, "text": " And like so it literally wrote an OCR script.", "tokens": [50364, 400, 411, 370, 309, 3736, 4114, 364, 422, 18547, 5755, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0937936080129523, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.0021150221582502127}, {"id": 414, "seek": 207800, "start": 2082.0, "end": 2085.0, "text": " And there it is.", "tokens": [50564, 400, 456, 309, 307, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0937936080129523, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.0021150221582502127}, {"id": 415, "seek": 207800, "start": 2085.0, "end": 2087.0, "text": " Just took a few seconds.", "tokens": [50714, 1449, 1890, 257, 1326, 3949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0937936080129523, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.0021150221582502127}, {"id": 416, "seek": 207800, "start": 2087.0, "end": 2093.0, "text": " So the difference here is it didn't really require it to think of much logic.", "tokens": [50814, 407, 264, 2649, 510, 307, 309, 994, 380, 534, 3651, 309, 281, 519, 295, 709, 9952, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0937936080129523, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.0021150221582502127}, {"id": 417, "seek": 207800, "start": 2093.0, "end": 2099.0, "text": " It could just use a very, very familiar pattern that it would have seen many times.", "tokens": [51114, 467, 727, 445, 764, 257, 588, 11, 588, 4963, 5102, 300, 309, 576, 362, 1612, 867, 1413, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0937936080129523, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.0021150221582502127}, {"id": 418, "seek": 207800, "start": 2099.0, "end": 2106.0, "text": " So this is generally where I find language models excel is where it doesn't have to think too far outside the box.", "tokens": [51414, 407, 341, 307, 5101, 689, 286, 915, 2856, 5245, 24015, 307, 689, 309, 1177, 380, 362, 281, 519, 886, 1400, 2380, 264, 2424, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0937936080129523, "compression_ratio": 1.5689655172413792, "no_speech_prob": 0.0021150221582502127}, {"id": 419, "seek": 210600, "start": 2106.0, "end": 2109.0, "text": " I mean, it's great on kind of creativity tasks,", "tokens": [50364, 286, 914, 11, 309, 311, 869, 322, 733, 295, 12915, 9608, 11, 50514], "temperature": 0.0, "avg_logprob": -0.07379879342748764, "compression_ratio": 1.59375, "no_speech_prob": 0.004903875291347504}, {"id": 420, "seek": 210600, "start": 2109.0, "end": 2114.0, "text": " but for like reasoning and logic tasks that are outside the box, I find it not great.", "tokens": [50514, 457, 337, 411, 21577, 293, 9952, 9608, 300, 366, 2380, 264, 2424, 11, 286, 915, 309, 406, 869, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07379879342748764, "compression_ratio": 1.59375, "no_speech_prob": 0.004903875291347504}, {"id": 421, "seek": 210600, "start": 2114.0, "end": 2121.0, "text": " But yeah, it's great at doing code for a whole wide variety of different libraries and languages.", "tokens": [50764, 583, 1338, 11, 309, 311, 869, 412, 884, 3089, 337, 257, 1379, 4874, 5673, 295, 819, 15148, 293, 8650, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07379879342748764, "compression_ratio": 1.59375, "no_speech_prob": 0.004903875291347504}, {"id": 422, "seek": 210600, "start": 2121.0, "end": 2128.0, "text": " Having said that, by the way, Google also has a language model called Bard.", "tokens": [51114, 10222, 848, 300, 11, 538, 264, 636, 11, 3329, 611, 575, 257, 2856, 2316, 1219, 26841, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07379879342748764, "compression_ratio": 1.59375, "no_speech_prob": 0.004903875291347504}, {"id": 423, "seek": 210600, "start": 2128.0, "end": 2131.0, "text": " It's way less good than GPT for most of the time.", "tokens": [51464, 467, 311, 636, 1570, 665, 813, 26039, 51, 337, 881, 295, 264, 565, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07379879342748764, "compression_ratio": 1.59375, "no_speech_prob": 0.004903875291347504}, {"id": 424, "seek": 213100, "start": 2131.0, "end": 2137.0, "text": " But there is a nice thing that you can literally paste an image straight into the prompt.", "tokens": [50364, 583, 456, 307, 257, 1481, 551, 300, 291, 393, 3736, 9163, 364, 3256, 2997, 666, 264, 12391, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 425, "seek": 213100, "start": 2137.0, "end": 2139.0, "text": " And I just typed OCR this.", "tokens": [50664, 400, 286, 445, 33941, 422, 18547, 341, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 426, "seek": 213100, "start": 2139.0, "end": 2142.0, "text": " And it didn't even have to go through code interpreter or whatever.", "tokens": [50764, 400, 309, 994, 380, 754, 362, 281, 352, 807, 3089, 34132, 420, 2035, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 427, "seek": 213100, "start": 2142.0, "end": 2144.0, "text": " It just said, oh, sure, I've done it.", "tokens": [50914, 467, 445, 848, 11, 1954, 11, 988, 11, 286, 600, 1096, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 428, "seek": 213100, "start": 2144.0, "end": 2147.0, "text": " And there's the result of the OCR.", "tokens": [51014, 400, 456, 311, 264, 1874, 295, 264, 422, 18547, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 429, "seek": 213100, "start": 2147.0, "end": 2151.0, "text": " And even commented on what it just OCRed, which I thought was cute.", "tokens": [51164, 400, 754, 26940, 322, 437, 309, 445, 422, 18547, 292, 11, 597, 286, 1194, 390, 4052, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 430, "seek": 213100, "start": 2151.0, "end": 2160.0, "text": " And oh, even more interestingly, it even figured out where the OCR text came from and gave me a link to it.", "tokens": [51364, 400, 1954, 11, 754, 544, 25873, 11, 309, 754, 8932, 484, 689, 264, 422, 18547, 2487, 1361, 490, 293, 2729, 385, 257, 2113, 281, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10019766698118115, "compression_ratio": 1.6401515151515151, "no_speech_prob": 0.09528892487287521}, {"id": 431, "seek": 216000, "start": 2160.0, "end": 2163.0, "text": " So I thought that was pretty cool.", "tokens": [50364, 407, 286, 1194, 300, 390, 1238, 1627, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07153190557773297, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.003074786625802517}, {"id": 432, "seek": 216000, "start": 2163.0, "end": 2168.0, "text": " OK, so there's an example of it doing well.", "tokens": [50514, 2264, 11, 370, 456, 311, 364, 1365, 295, 309, 884, 731, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07153190557773297, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.003074786625802517}, {"id": 433, "seek": 216000, "start": 2168.0, "end": 2171.0, "text": " I'll show you one for this talk I found really helpful.", "tokens": [50764, 286, 603, 855, 291, 472, 337, 341, 751, 286, 1352, 534, 4961, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07153190557773297, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.003074786625802517}, {"id": 434, "seek": 216000, "start": 2171.0, "end": 2178.0, "text": " I wanted to show you guys how much it costs to use the OpenAI API.", "tokens": [50914, 286, 1415, 281, 855, 291, 1074, 577, 709, 309, 5497, 281, 764, 264, 7238, 48698, 9362, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07153190557773297, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.003074786625802517}, {"id": 435, "seek": 216000, "start": 2178.0, "end": 2184.0, "text": " But unfortunately, when I went to the OpenAI web page, it was like all over the place.", "tokens": [51264, 583, 7015, 11, 562, 286, 1437, 281, 264, 7238, 48698, 3670, 3028, 11, 309, 390, 411, 439, 670, 264, 1081, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07153190557773297, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.003074786625802517}, {"id": 436, "seek": 216000, "start": 2184.0, "end": 2189.0, "text": " The pricing information was on all separate tables and it was kind of a bit of a mess.", "tokens": [51564, 440, 17621, 1589, 390, 322, 439, 4994, 8020, 293, 309, 390, 733, 295, 257, 857, 295, 257, 2082, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07153190557773297, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.003074786625802517}, {"id": 437, "seek": 218900, "start": 2189.0, "end": 2197.0, "text": " So I wanted to create a table with all of the information combined like this.", "tokens": [50364, 407, 286, 1415, 281, 1884, 257, 3199, 365, 439, 295, 264, 1589, 9354, 411, 341, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12418999543061128, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.004330637864768505}, {"id": 438, "seek": 218900, "start": 2197.0, "end": 2202.0, "text": " And here's how I did it.", "tokens": [50764, 400, 510, 311, 577, 286, 630, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12418999543061128, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.004330637864768505}, {"id": 439, "seek": 218900, "start": 2202.0, "end": 2205.0, "text": " I went to the OpenAI page.", "tokens": [51014, 286, 1437, 281, 264, 7238, 48698, 3028, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12418999543061128, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.004330637864768505}, {"id": 440, "seek": 218900, "start": 2205.0, "end": 2208.0, "text": " I hit Apple A to select all.", "tokens": [51164, 286, 2045, 6373, 316, 281, 3048, 439, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12418999543061128, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.004330637864768505}, {"id": 441, "seek": 218900, "start": 2208.0, "end": 2215.0, "text": " And then I said in chat GPT, create a table with the pricing information rows, no summarization,", "tokens": [51314, 400, 550, 286, 848, 294, 5081, 26039, 51, 11, 1884, 257, 3199, 365, 264, 17621, 1589, 13241, 11, 572, 14611, 2144, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12418999543061128, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.004330637864768505}, {"id": 442, "seek": 221500, "start": 2215.0, "end": 2217.0, "text": " no information, not in this page.", "tokens": [50364, 572, 1589, 11, 406, 294, 341, 3028, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 443, "seek": 221500, "start": 2217.0, "end": 2219.0, "text": " Every row should appear as a separate row in your output.", "tokens": [50464, 2048, 5386, 820, 4204, 382, 257, 4994, 5386, 294, 428, 5598, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 444, "seek": 221500, "start": 2219.0, "end": 2221.0, "text": " And I hit Paste.", "tokens": [50564, 400, 286, 2045, 43827, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 445, "seek": 221500, "start": 2221.0, "end": 2225.0, "text": " Now that was not very helpful to it because hitting Paste, it's got the nav bar.", "tokens": [50664, 823, 300, 390, 406, 588, 4961, 281, 309, 570, 8850, 43827, 11, 309, 311, 658, 264, 5947, 2159, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 446, "seek": 221500, "start": 2225.0, "end": 2231.0, "text": " It's got lots of extra information at the bottom.", "tokens": [50864, 467, 311, 658, 3195, 295, 2857, 1589, 412, 264, 2767, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 447, "seek": 221500, "start": 2231.0, "end": 2236.0, "text": " It's got all of its footer, et cetera.", "tokens": [51164, 467, 311, 658, 439, 295, 1080, 2671, 260, 11, 1030, 11458, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 448, "seek": 221500, "start": 2236.0, "end": 2239.0, "text": " But it's really good at this stuff.", "tokens": [51414, 583, 309, 311, 534, 665, 412, 341, 1507, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 449, "seek": 221500, "start": 2239.0, "end": 2241.0, "text": " It did it first time.", "tokens": [51564, 467, 630, 309, 700, 565, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 450, "seek": 221500, "start": 2241.0, "end": 2243.0, "text": " So there was the markdown table.", "tokens": [51664, 407, 456, 390, 264, 1491, 5093, 3199, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1202320705760609, "compression_ratio": 1.5905172413793103, "no_speech_prob": 0.08263598382472992}, {"id": 451, "seek": 224300, "start": 2243.0, "end": 2246.0, "text": " And then pasted that into Jupiter.", "tokens": [50364, 400, 550, 1791, 292, 300, 666, 24567, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 452, "seek": 224300, "start": 2246.0, "end": 2248.0, "text": " And I got my markdown table.", "tokens": [50514, 400, 286, 658, 452, 1491, 5093, 3199, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 453, "seek": 224300, "start": 2248.0, "end": 2254.0, "text": " And so now you can see at a glance the cost of GPT-4, 3.5, et cetera.", "tokens": [50614, 400, 370, 586, 291, 393, 536, 412, 257, 21094, 264, 2063, 295, 26039, 51, 12, 19, 11, 805, 13, 20, 11, 1030, 11458, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 454, "seek": 224300, "start": 2254.0, "end": 2258.0, "text": " But then what I really wanted to do was show you that as a picture.", "tokens": [50914, 583, 550, 437, 286, 534, 1415, 281, 360, 390, 855, 291, 300, 382, 257, 3036, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 455, "seek": 224300, "start": 2258.0, "end": 2262.0, "text": " So I just said, oh, chart the input row from this table.", "tokens": [51114, 407, 286, 445, 848, 11, 1954, 11, 6927, 264, 4846, 5386, 490, 341, 3199, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 456, "seek": 224300, "start": 2262.0, "end": 2266.0, "text": " Just pasted the table back.", "tokens": [51314, 1449, 1791, 292, 264, 3199, 646, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 457, "seek": 224300, "start": 2266.0, "end": 2268.0, "text": " And it did.", "tokens": [51514, 400, 309, 630, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 458, "seek": 224300, "start": 2268.0, "end": 2270.0, "text": " So that's pretty amazing.", "tokens": [51614, 407, 300, 311, 1238, 2243, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12038335260355247, "compression_ratio": 1.5, "no_speech_prob": 0.00805994775146246}, {"id": 459, "seek": 227000, "start": 2270.0, "end": 2273.0, "text": " So let's talk about this pricing.", "tokens": [50364, 407, 718, 311, 751, 466, 341, 17621, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 460, "seek": 227000, "start": 2273.0, "end": 2277.0, "text": " So far, we've used chat GPT, which costs $20 a month.", "tokens": [50514, 407, 1400, 11, 321, 600, 1143, 5081, 26039, 51, 11, 597, 5497, 1848, 2009, 257, 1618, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 461, "seek": 227000, "start": 2277.0, "end": 2280.0, "text": " And there's no per token cost or anything.", "tokens": [50714, 400, 456, 311, 572, 680, 14862, 2063, 420, 1340, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 462, "seek": 227000, "start": 2280.0, "end": 2284.0, "text": " But if you want to use the API from Python or whatever, you have to pay per token.", "tokens": [50864, 583, 498, 291, 528, 281, 764, 264, 9362, 490, 15329, 420, 2035, 11, 291, 362, 281, 1689, 680, 14862, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 463, "seek": 227000, "start": 2284.0, "end": 2287.0, "text": " Which is approximately per word.", "tokens": [51064, 3013, 307, 10447, 680, 1349, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 464, "seek": 227000, "start": 2287.0, "end": 2292.0, "text": " Maybe it's about one and a third tokens per word on average.", "tokens": [51214, 2704, 309, 311, 466, 472, 293, 257, 2636, 22667, 680, 1349, 322, 4274, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 465, "seek": 227000, "start": 2292.0, "end": 2297.0, "text": " Unfortunately, in the chart, it did not include these headers, GPT-4, GPT-3.5.", "tokens": [51464, 8590, 11, 294, 264, 6927, 11, 309, 630, 406, 4090, 613, 45101, 11, 26039, 51, 12, 19, 11, 26039, 51, 12, 18, 13, 20, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 466, "seek": 227000, "start": 2297.0, "end": 2299.0, "text": " So these first two ones are GPT-4.", "tokens": [51714, 407, 613, 700, 732, 2306, 366, 26039, 51, 12, 19, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08207741818686788, "compression_ratio": 1.5650557620817844, "no_speech_prob": 0.004330817144364119}, {"id": 467, "seek": 229900, "start": 2299.0, "end": 2301.0, "text": " And these two are GPT-3.5.", "tokens": [50364, 400, 613, 732, 366, 26039, 51, 12, 18, 13, 20, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08084479531089028, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.006690064910799265}, {"id": 468, "seek": 229900, "start": 2301.0, "end": 2307.0, "text": " So you can see the GPT-3.5 is way, way cheaper.", "tokens": [50464, 407, 291, 393, 536, 264, 26039, 51, 12, 18, 13, 20, 307, 636, 11, 636, 12284, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08084479531089028, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.006690064910799265}, {"id": 469, "seek": 229900, "start": 2307.0, "end": 2309.0, "text": " And you can see it here.", "tokens": [50764, 400, 291, 393, 536, 309, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08084479531089028, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.006690064910799265}, {"id": 470, "seek": 229900, "start": 2309.0, "end": 2314.0, "text": " It's 0.03 versus 0.0015.", "tokens": [50864, 467, 311, 1958, 13, 11592, 5717, 1958, 13, 628, 5211, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08084479531089028, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.006690064910799265}, {"id": 471, "seek": 229900, "start": 2314.0, "end": 2320.0, "text": " So it's so cheap, you can really play around with it and not worry.", "tokens": [51114, 407, 309, 311, 370, 7084, 11, 291, 393, 534, 862, 926, 365, 309, 293, 406, 3292, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08084479531089028, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.006690064910799265}, {"id": 472, "seek": 229900, "start": 2320.0, "end": 2323.0, "text": " And I want to give you a sense of what that looks like.", "tokens": [51414, 400, 286, 528, 281, 976, 291, 257, 2020, 295, 437, 300, 1542, 411, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08084479531089028, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.006690064910799265}, {"id": 473, "seek": 232300, "start": 2324.0, "end": 2331.0, "text": " So why would you use the OpenAI API rather than chat GPT?", "tokens": [50414, 407, 983, 576, 291, 764, 264, 7238, 48698, 9362, 2831, 813, 5081, 26039, 51, 30, 50764], "temperature": 0.0, "avg_logprob": -0.07348751747745207, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.014498346485197544}, {"id": 474, "seek": 232300, "start": 2331.0, "end": 2333.0, "text": " Because you can do it programmatically.", "tokens": [50764, 1436, 291, 393, 360, 309, 37648, 5030, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07348751747745207, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.014498346485197544}, {"id": 475, "seek": 232300, "start": 2333.0, "end": 2342.0, "text": " So you can analyze data sets, you can do repetitive stuff.", "tokens": [50864, 407, 291, 393, 12477, 1412, 6352, 11, 291, 393, 360, 29404, 1507, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07348751747745207, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.014498346485197544}, {"id": 476, "seek": 232300, "start": 2342.0, "end": 2345.0, "text": " It's kind of like a different way of programming.", "tokens": [51314, 467, 311, 733, 295, 411, 257, 819, 636, 295, 9410, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07348751747745207, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.014498346485197544}, {"id": 477, "seek": 232300, "start": 2345.0, "end": 2349.0, "text": " It's things that you can think of describing.", "tokens": [51464, 467, 311, 721, 300, 291, 393, 519, 295, 16141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07348751747745207, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.014498346485197544}, {"id": 478, "seek": 232300, "start": 2349.0, "end": 2352.0, "text": " But let's just look at the most simple example of what that looks like.", "tokens": [51664, 583, 718, 311, 445, 574, 412, 264, 881, 2199, 1365, 295, 437, 300, 1542, 411, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07348751747745207, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.014498346485197544}, {"id": 479, "seek": 235200, "start": 2352.0, "end": 2358.0, "text": " So if you pip install OpenAI, then you can import chat completion.", "tokens": [50364, 407, 498, 291, 8489, 3625, 7238, 48698, 11, 550, 291, 393, 974, 5081, 19372, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11834066564386542, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.023668073117733}, {"id": 480, "seek": 235200, "start": 2358.0, "end": 2364.0, "text": " And then you can say, OK, chat completion.create using GPT-3.5 turbo.", "tokens": [50664, 400, 550, 291, 393, 584, 11, 2264, 11, 5081, 19372, 13, 14066, 473, 1228, 26039, 51, 12, 18, 13, 20, 20902, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11834066564386542, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.023668073117733}, {"id": 481, "seek": 235200, "start": 2364.0, "end": 2367.0, "text": " And then you can pass in a system message.", "tokens": [50964, 400, 550, 291, 393, 1320, 294, 257, 1185, 3636, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11834066564386542, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.023668073117733}, {"id": 482, "seek": 235200, "start": 2367.0, "end": 2370.0, "text": " This is basically the same as custom instructions.", "tokens": [51114, 639, 307, 1936, 264, 912, 382, 2375, 9415, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11834066564386542, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.023668073117733}, {"id": 483, "seek": 235200, "start": 2370.0, "end": 2375.0, "text": " So, OK, you're an Aussie LLM that uses Aussie slang and analogies wherever possible.", "tokens": [51264, 407, 11, 2264, 11, 291, 434, 364, 21286, 414, 441, 43, 44, 300, 4960, 21286, 414, 42517, 293, 16660, 530, 8660, 1944, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11834066564386542, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.023668073117733}, {"id": 484, "seek": 235200, "start": 2375.0, "end": 2379.0, "text": " OK, and so you can see I'm passing in an array here of messages.", "tokens": [51514, 2264, 11, 293, 370, 291, 393, 536, 286, 478, 8437, 294, 364, 10225, 510, 295, 7897, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11834066564386542, "compression_ratio": 1.6309012875536482, "no_speech_prob": 0.023668073117733}, {"id": 485, "seek": 237900, "start": 2379.0, "end": 2385.0, "text": " So the first is the system message and then the user message, which is what is money?", "tokens": [50364, 407, 264, 700, 307, 264, 1185, 3636, 293, 550, 264, 4195, 3636, 11, 597, 307, 437, 307, 1460, 30, 50664], "temperature": 0.0, "avg_logprob": -0.10427203931306538, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005552387796342373}, {"id": 486, "seek": 237900, "start": 2385.0, "end": 2392.0, "text": " OK, so GPT-3.5 returns a big embedded dictionary.", "tokens": [50664, 2264, 11, 370, 26039, 51, 12, 18, 13, 20, 11247, 257, 955, 16741, 25890, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10427203931306538, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005552387796342373}, {"id": 487, "seek": 237900, "start": 2392.0, "end": 2402.0, "text": " And the message content is, well, money is like the oil that keeps the machinery of our economy running smoothly.", "tokens": [51014, 400, 264, 3636, 2701, 307, 11, 731, 11, 1460, 307, 411, 264, 3184, 300, 5965, 264, 27302, 295, 527, 5010, 2614, 19565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10427203931306538, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005552387796342373}, {"id": 488, "seek": 237900, "start": 2402.0, "end": 2403.0, "text": " There you go.", "tokens": [51514, 821, 291, 352, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10427203931306538, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005552387796342373}, {"id": 489, "seek": 237900, "start": 2403.0, "end": 2408.0, "text": " Just like Aquila loves its eucalyptus leaves, we humans can't survive without this stuff.", "tokens": [51564, 1449, 411, 8728, 7371, 6752, 1080, 308, 1311, 5222, 662, 301, 5510, 11, 321, 6255, 393, 380, 7867, 1553, 341, 1507, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10427203931306538, "compression_ratio": 1.489451476793249, "no_speech_prob": 0.005552387796342373}, {"id": 490, "seek": 240800, "start": 2408.0, "end": 2412.0, "text": " So there's the Aussie LLM's view of what is money.", "tokens": [50364, 407, 456, 311, 264, 21286, 414, 441, 43, 44, 311, 1910, 295, 437, 307, 1460, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11755556530422634, "compression_ratio": 1.392156862745098, "no_speech_prob": 0.0041977460496127605}, {"id": 491, "seek": 240800, "start": 2412.0, "end": 2422.0, "text": " So the main ones I pretty much always use are GPT-4 and GPT-3.5.", "tokens": [50564, 407, 264, 2135, 2306, 286, 1238, 709, 1009, 764, 366, 26039, 51, 12, 19, 293, 26039, 51, 12, 18, 13, 20, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11755556530422634, "compression_ratio": 1.392156862745098, "no_speech_prob": 0.0041977460496127605}, {"id": 492, "seek": 240800, "start": 2422.0, "end": 2431.0, "text": " GPT-4 is just so, so much better at anything remotely challenging, but obviously it's much more expensive.", "tokens": [51064, 26039, 51, 12, 19, 307, 445, 370, 11, 370, 709, 1101, 412, 1340, 20824, 7595, 11, 457, 2745, 309, 311, 709, 544, 5124, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11755556530422634, "compression_ratio": 1.392156862745098, "no_speech_prob": 0.0041977460496127605}, {"id": 493, "seek": 240800, "start": 2431.0, "end": 2436.0, "text": " So rule of thumb, maybe try 3.5 turbo first, see how it goes.", "tokens": [51514, 407, 4978, 295, 9298, 11, 1310, 853, 805, 13, 20, 20902, 700, 11, 536, 577, 309, 1709, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11755556530422634, "compression_ratio": 1.392156862745098, "no_speech_prob": 0.0041977460496127605}, {"id": 494, "seek": 243600, "start": 2436.0, "end": 2438.0, "text": " If you're happy with the results, then great.", "tokens": [50364, 759, 291, 434, 2055, 365, 264, 3542, 11, 550, 869, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08836139145717826, "compression_ratio": 1.5863636363636364, "no_speech_prob": 0.005728181451559067}, {"id": 495, "seek": 243600, "start": 2438.0, "end": 2442.0, "text": " If you're not, pony out for the more expensive one.", "tokens": [50464, 759, 291, 434, 406, 11, 27342, 484, 337, 264, 544, 5124, 472, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08836139145717826, "compression_ratio": 1.5863636363636364, "no_speech_prob": 0.005728181451559067}, {"id": 496, "seek": 243600, "start": 2442.0, "end": 2452.0, "text": " OK, so I just created a little function here called response that will print out this nested thing.", "tokens": [50664, 2264, 11, 370, 286, 445, 2942, 257, 707, 2445, 510, 1219, 4134, 300, 486, 4482, 484, 341, 15646, 292, 551, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08836139145717826, "compression_ratio": 1.5863636363636364, "no_speech_prob": 0.005728181451559067}, {"id": 497, "seek": 243600, "start": 2452.0, "end": 2460.0, "text": " And so now, oh, and so then the other thing to point out here is that the result of this also has a usage field,", "tokens": [51164, 400, 370, 586, 11, 1954, 11, 293, 370, 550, 264, 661, 551, 281, 935, 484, 510, 307, 300, 264, 1874, 295, 341, 611, 575, 257, 14924, 2519, 11, 51564], "temperature": 0.0, "avg_logprob": -0.08836139145717826, "compression_ratio": 1.5863636363636364, "no_speech_prob": 0.005728181451559067}, {"id": 498, "seek": 243600, "start": 2460.0, "end": 2464.0, "text": " which contains how many tokens was it?", "tokens": [51564, 597, 8306, 577, 867, 22667, 390, 309, 30, 51764], "temperature": 0.0, "avg_logprob": -0.08836139145717826, "compression_ratio": 1.5863636363636364, "no_speech_prob": 0.005728181451559067}, {"id": 499, "seek": 246400, "start": 2464.0, "end": 2466.0, "text": " So it's about 150 tokens.", "tokens": [50364, 407, 309, 311, 466, 8451, 22667, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13230222669141045, "compression_ratio": 1.3455882352941178, "no_speech_prob": 0.00831441581249237}, {"id": 500, "seek": 246400, "start": 2466.0, "end": 2486.0, "text": " So at $0.002 per thousand tokens for 150 tokens means we just paid 0.03 cents, 0.0003 dollars to get that done.", "tokens": [50464, 407, 412, 1848, 15, 13, 628, 17, 680, 4714, 22667, 337, 8451, 22667, 1355, 321, 445, 4835, 1958, 13, 11592, 14941, 11, 1958, 13, 1360, 18, 3808, 281, 483, 300, 1096, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13230222669141045, "compression_ratio": 1.3455882352941178, "no_speech_prob": 0.00831441581249237}, {"id": 501, "seek": 246400, "start": 2486.0, "end": 2489.0, "text": " So as you can see, the cost is insignificant.", "tokens": [51464, 407, 382, 291, 393, 536, 11, 264, 2063, 307, 43685, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13230222669141045, "compression_ratio": 1.3455882352941178, "no_speech_prob": 0.00831441581249237}, {"id": 502, "seek": 248900, "start": 2489.0, "end": 2495.0, "text": " If we were using GPT-4, it would be 0.03 per thousand.", "tokens": [50364, 759, 321, 645, 1228, 26039, 51, 12, 19, 11, 309, 576, 312, 1958, 13, 11592, 680, 4714, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07479291601279348, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0373062789440155}, {"id": 503, "seek": 248900, "start": 2495.0, "end": 2499.0, "text": " So it would be half a cent.", "tokens": [50664, 407, 309, 576, 312, 1922, 257, 1489, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07479291601279348, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0373062789440155}, {"id": 504, "seek": 248900, "start": 2499.0, "end": 2511.0, "text": " So unless you're doing many thousands of GPT-4, you're not going to be even up into the dollars and GPT-3.5 even more than that.", "tokens": [50864, 407, 5969, 291, 434, 884, 867, 5383, 295, 26039, 51, 12, 19, 11, 291, 434, 406, 516, 281, 312, 754, 493, 666, 264, 3808, 293, 26039, 51, 12, 18, 13, 20, 754, 544, 813, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07479291601279348, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0373062789440155}, {"id": 505, "seek": 248900, "start": 2511.0, "end": 2512.0, "text": " But you know, keep an eye on it.", "tokens": [51464, 583, 291, 458, 11, 1066, 364, 3313, 322, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07479291601279348, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0373062789440155}, {"id": 506, "seek": 248900, "start": 2512.0, "end": 2516.0, "text": " OpenAI has a usage page and you can track your usage.", "tokens": [51514, 7238, 48698, 575, 257, 14924, 3028, 293, 291, 393, 2837, 428, 14924, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07479291601279348, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0373062789440155}, {"id": 507, "seek": 251600, "start": 2516.0, "end": 2527.0, "text": " Now, what happens when we are this is really important to understand when we have a follow up in the same conversation?", "tokens": [50364, 823, 11, 437, 2314, 562, 321, 366, 341, 307, 534, 1021, 281, 1223, 562, 321, 362, 257, 1524, 493, 294, 264, 912, 3761, 30, 50914], "temperature": 0.0, "avg_logprob": -0.1164846491457811, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0311216339468956}, {"id": 508, "seek": 251600, "start": 2527.0, "end": 2531.0, "text": " How does that work?", "tokens": [50914, 1012, 775, 300, 589, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1164846491457811, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0311216339468956}, {"id": 509, "seek": 251600, "start": 2531.0, "end": 2534.0, "text": " So we just asked what goat means.", "tokens": [51114, 407, 321, 445, 2351, 437, 23608, 1355, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1164846491457811, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0311216339468956}, {"id": 510, "seek": 251600, "start": 2534.0, "end": 2545.0, "text": " So for example, Michael Jordan is often referred to as the goat for his exceptional skills and accomplishments.", "tokens": [51264, 407, 337, 1365, 11, 5116, 10979, 307, 2049, 10839, 281, 382, 264, 23608, 337, 702, 19279, 3942, 293, 25943, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1164846491457811, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0311216339468956}, {"id": 511, "seek": 254500, "start": 2545.0, "end": 2550.0, "text": " And Elvis and the Beatles referred to as goat due to their profound influence and achievement.", "tokens": [50364, 400, 39944, 293, 264, 38376, 10839, 281, 382, 23608, 3462, 281, 641, 14382, 6503, 293, 15838, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0900544802347819, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.00288897636346519}, {"id": 512, "seek": 254500, "start": 2550.0, "end": 2565.0, "text": " So I could say, what profound influence and achievements are you referring to?", "tokens": [50614, 407, 286, 727, 584, 11, 437, 14382, 6503, 293, 21420, 366, 291, 13761, 281, 30, 51364], "temperature": 0.0, "avg_logprob": -0.0900544802347819, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.00288897636346519}, {"id": 513, "seek": 254500, "start": 2565.0, "end": 2569.0, "text": " Okay, well, I meant Elvis Presley and the Beatles did all these things.", "tokens": [51364, 1033, 11, 731, 11, 286, 4140, 39944, 2718, 3420, 293, 264, 38376, 630, 439, 613, 721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0900544802347819, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.00288897636346519}, {"id": 514, "seek": 254500, "start": 2569.0, "end": 2570.0, "text": " Now, how does that work?", "tokens": [51564, 823, 11, 577, 775, 300, 589, 30, 51614], "temperature": 0.0, "avg_logprob": -0.0900544802347819, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.00288897636346519}, {"id": 515, "seek": 254500, "start": 2570.0, "end": 2572.0, "text": " How does this follow up work?", "tokens": [51614, 1012, 775, 341, 1524, 493, 589, 30, 51714], "temperature": 0.0, "avg_logprob": -0.0900544802347819, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.00288897636346519}, {"id": 516, "seek": 257200, "start": 2572.0, "end": 2577.0, "text": " What happens is the entire conversation is passed back.", "tokens": [50364, 708, 2314, 307, 264, 2302, 3761, 307, 4678, 646, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 517, "seek": 257200, "start": 2577.0, "end": 2580.0, "text": " And so we can actually do that here.", "tokens": [50614, 400, 370, 321, 393, 767, 360, 300, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 518, "seek": 257200, "start": 2580.0, "end": 2584.0, "text": " So here is the same system prompt.", "tokens": [50764, 407, 510, 307, 264, 912, 1185, 12391, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 519, "seek": 257200, "start": 2584.0, "end": 2587.0, "text": " Here is the same question, right?", "tokens": [50964, 1692, 307, 264, 912, 1168, 11, 558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 520, "seek": 257200, "start": 2587.0, "end": 2590.0, "text": " And then the answer comes back with role assistant.", "tokens": [51114, 400, 550, 264, 1867, 1487, 646, 365, 3090, 10994, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 521, "seek": 257200, "start": 2590.0, "end": 2592.0, "text": " And I'm going to do something pretty cheeky.", "tokens": [51264, 400, 286, 478, 516, 281, 360, 746, 1238, 12839, 88, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 522, "seek": 257200, "start": 2592.0, "end": 2597.0, "text": " I'm going to pretend that it didn't say money is like oil.", "tokens": [51364, 286, 478, 516, 281, 11865, 300, 309, 994, 380, 584, 1460, 307, 411, 3184, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08912180209981985, "compression_ratio": 1.585, "no_speech_prob": 0.12241967022418976}, {"id": 523, "seek": 259700, "start": 2597.0, "end": 2602.0, "text": " I'm going to say, oh, you actually said money is like kangaroos.", "tokens": [50364, 286, 478, 516, 281, 584, 11, 1954, 11, 291, 767, 848, 1460, 307, 411, 47898, 9708, 329, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 524, "seek": 259700, "start": 2602.0, "end": 2604.0, "text": " I thought, what is it going to do?", "tokens": [50614, 286, 1194, 11, 437, 307, 309, 516, 281, 360, 30, 50714], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 525, "seek": 259700, "start": 2604.0, "end": 2610.0, "text": " Okay, so you can like literally invent a conversation in which the language model said something different.", "tokens": [50714, 1033, 11, 370, 291, 393, 411, 3736, 7962, 257, 3761, 294, 597, 264, 2856, 2316, 848, 746, 819, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 526, "seek": 259700, "start": 2610.0, "end": 2614.0, "text": " Because this is actually how it's done in a multi-stage conversation.", "tokens": [51014, 1436, 341, 307, 767, 577, 309, 311, 1096, 294, 257, 4825, 12, 17882, 3761, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 527, "seek": 259700, "start": 2614.0, "end": 2616.0, "text": " There's no state, right?", "tokens": [51214, 821, 311, 572, 1785, 11, 558, 30, 51314], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 528, "seek": 259700, "start": 2616.0, "end": 2618.0, "text": " There's nothing stored on the server.", "tokens": [51314, 821, 311, 1825, 12187, 322, 264, 7154, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 529, "seek": 259700, "start": 2618.0, "end": 2625.0, "text": " You're passing back the entire conversation again and telling it what it told you, right?", "tokens": [51414, 509, 434, 8437, 646, 264, 2302, 3761, 797, 293, 3585, 309, 437, 309, 1907, 291, 11, 558, 30, 51764], "temperature": 0.0, "avg_logprob": -0.09670078861820805, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.07686012983322144}, {"id": 530, "seek": 262500, "start": 2625.0, "end": 2626.0, "text": " So I'm going to tell it.", "tokens": [50364, 407, 286, 478, 516, 281, 980, 309, 13, 50414], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 531, "seek": 262500, "start": 2626.0, "end": 2628.0, "text": " It told me that money is like kangaroos.", "tokens": [50414, 467, 1907, 385, 300, 1460, 307, 411, 47898, 9708, 329, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 532, "seek": 262500, "start": 2628.0, "end": 2631.0, "text": " And then I'll ask the user, oh, really?", "tokens": [50514, 400, 550, 286, 603, 1029, 264, 4195, 11, 1954, 11, 534, 30, 50664], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 533, "seek": 262500, "start": 2631.0, "end": 2632.0, "text": " In what way?", "tokens": [50664, 682, 437, 636, 30, 50714], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 534, "seek": 262500, "start": 2632.0, "end": 2638.0, "text": " And it's kind of cool because you can see how it convinces you of something I just invented.", "tokens": [50714, 400, 309, 311, 733, 295, 1627, 570, 291, 393, 536, 577, 309, 9854, 887, 291, 295, 746, 286, 445, 14479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 535, "seek": 262500, "start": 2638.0, "end": 2641.0, "text": " Oh, let me break it down for you, Cuba.", "tokens": [51014, 876, 11, 718, 385, 1821, 309, 760, 337, 291, 11, 20604, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 536, "seek": 262500, "start": 2641.0, "end": 2644.0, "text": " Just like kangaroos hop around and carry their joeys in their pouch,", "tokens": [51164, 1449, 411, 47898, 9708, 329, 3818, 926, 293, 3985, 641, 1488, 68, 749, 294, 641, 27781, 11, 51314], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 537, "seek": 262500, "start": 2644.0, "end": 2646.0, "text": " money is a means of carrying value around.", "tokens": [51314, 1460, 307, 257, 1355, 295, 9792, 2158, 926, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 538, "seek": 262500, "start": 2646.0, "end": 2647.0, "text": " So there you go.", "tokens": [51414, 407, 456, 291, 352, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 539, "seek": 262500, "start": 2647.0, "end": 2650.0, "text": " It's make your own analogy.", "tokens": [51464, 467, 311, 652, 428, 1065, 21663, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 540, "seek": 262500, "start": 2650.0, "end": 2651.0, "text": " Cool.", "tokens": [51614, 8561, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11891276908643318, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.007119134068489075}, {"id": 541, "seek": 265100, "start": 2651.0, "end": 2657.0, "text": " So I'll create a little function here that just puts these things together for us.", "tokens": [50364, 407, 286, 603, 1884, 257, 707, 2445, 510, 300, 445, 8137, 613, 721, 1214, 337, 505, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 542, "seek": 265100, "start": 2657.0, "end": 2662.0, "text": " System message, if there is one, the user message and returns the completion.", "tokens": [50664, 8910, 3636, 11, 498, 456, 307, 472, 11, 264, 4195, 3636, 293, 11247, 264, 19372, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 543, "seek": 265100, "start": 2662.0, "end": 2665.0, "text": " And so now we can ask it, what's the meaning of life?", "tokens": [50914, 400, 370, 586, 321, 393, 1029, 309, 11, 437, 311, 264, 3620, 295, 993, 30, 51064], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 544, "seek": 265100, "start": 2665.0, "end": 2668.0, "text": " Passing in the Aussie system prompt.", "tokens": [51064, 10319, 278, 294, 264, 21286, 414, 1185, 12391, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 545, "seek": 265100, "start": 2668.0, "end": 2673.0, "text": " The meaning of life is like trying to catch a wave on a sunny day at Bondo Beach.", "tokens": [51214, 440, 3620, 295, 993, 307, 411, 1382, 281, 3745, 257, 5772, 322, 257, 20412, 786, 412, 23604, 78, 14866, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 546, "seek": 265100, "start": 2673.0, "end": 2674.0, "text": " Okay, there you go.", "tokens": [51464, 1033, 11, 456, 291, 352, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 547, "seek": 265100, "start": 2674.0, "end": 2677.0, "text": " So what do you need to be aware of?", "tokens": [51514, 407, 437, 360, 291, 643, 281, 312, 3650, 295, 30, 51664], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 548, "seek": 265100, "start": 2677.0, "end": 2680.0, "text": " Well, as I said, one thing is keep an eye on your usage.", "tokens": [51664, 1042, 11, 382, 286, 848, 11, 472, 551, 307, 1066, 364, 3313, 322, 428, 14924, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09700157886415016, "compression_ratio": 1.6218181818181818, "no_speech_prob": 0.004753644112497568}, {"id": 549, "seek": 268000, "start": 2680.0, "end": 2684.0, "text": " If you're doing it, you know, hundreds or thousands of times in a loop,", "tokens": [50364, 759, 291, 434, 884, 309, 11, 291, 458, 11, 6779, 420, 5383, 295, 1413, 294, 257, 6367, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07282374260273386, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.02477625012397766}, {"id": 550, "seek": 268000, "start": 2684.0, "end": 2687.0, "text": " keep an eye on not spending too much money.", "tokens": [50564, 1066, 364, 3313, 322, 406, 6434, 886, 709, 1460, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07282374260273386, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.02477625012397766}, {"id": 551, "seek": 268000, "start": 2687.0, "end": 2691.0, "text": " But also if you do it too fast, particularly the first day or two,", "tokens": [50714, 583, 611, 498, 291, 360, 309, 886, 2370, 11, 4098, 264, 700, 786, 420, 732, 11, 50914], "temperature": 0.0, "avg_logprob": -0.07282374260273386, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.02477625012397766}, {"id": 552, "seek": 268000, "start": 2691.0, "end": 2697.0, "text": " you've got an account, you're likely to hit the limits for the API.", "tokens": [50914, 291, 600, 658, 364, 2696, 11, 291, 434, 3700, 281, 2045, 264, 10406, 337, 264, 9362, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07282374260273386, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.02477625012397766}, {"id": 553, "seek": 268000, "start": 2697.0, "end": 2702.0, "text": " And so the limits initially are pretty low.", "tokens": [51214, 400, 370, 264, 10406, 9105, 366, 1238, 2295, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07282374260273386, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.02477625012397766}, {"id": 554, "seek": 268000, "start": 2702.0, "end": 2709.0, "text": " As you can see, three requests per minute.", "tokens": [51464, 1018, 291, 393, 536, 11, 1045, 12475, 680, 3456, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07282374260273386, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.02477625012397766}, {"id": 555, "seek": 270900, "start": 2710.0, "end": 2713.0, "text": " So that's for free users, page users, first 48 hours.", "tokens": [50414, 407, 300, 311, 337, 1737, 5022, 11, 3028, 5022, 11, 700, 11174, 2496, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07823893103269067, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.0015974119305610657}, {"id": 556, "seek": 270900, "start": 2713.0, "end": 2717.0, "text": " And after that, it starts going up and you can always ask for more.", "tokens": [50564, 400, 934, 300, 11, 309, 3719, 516, 493, 293, 291, 393, 1009, 1029, 337, 544, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07823893103269067, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.0015974119305610657}, {"id": 557, "seek": 270900, "start": 2717.0, "end": 2723.0, "text": " I just mentioned this because you're going to want to have a function that keeps an eye on that.", "tokens": [50764, 286, 445, 2835, 341, 570, 291, 434, 516, 281, 528, 281, 362, 257, 2445, 300, 5965, 364, 3313, 322, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07823893103269067, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.0015974119305610657}, {"id": 558, "seek": 270900, "start": 2723.0, "end": 2726.0, "text": " And so what I did is I actually just went to Bing,", "tokens": [51064, 400, 370, 437, 286, 630, 307, 286, 767, 445, 1437, 281, 30755, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07823893103269067, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.0015974119305610657}, {"id": 559, "seek": 270900, "start": 2726.0, "end": 2730.0, "text": " which has a somewhat crappy version of GPT-4 nowadays,", "tokens": [51214, 597, 575, 257, 8344, 36531, 3037, 295, 26039, 51, 12, 19, 13434, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07823893103269067, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.0015974119305610657}, {"id": 560, "seek": 270900, "start": 2730.0, "end": 2732.0, "text": " but it can still do basic stuff for free.", "tokens": [51414, 457, 309, 393, 920, 360, 3875, 1507, 337, 1737, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07823893103269067, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.0015974119305610657}, {"id": 561, "seek": 273200, "start": 2732.0, "end": 2741.0, "text": " And I said, please show me Python code to call the OpenAI API and handle rate limits.", "tokens": [50364, 400, 286, 848, 11, 1767, 855, 385, 15329, 3089, 281, 818, 264, 7238, 48698, 9362, 293, 4813, 3314, 10406, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11957838343477797, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.20165778696537018}, {"id": 562, "seek": 273200, "start": 2741.0, "end": 2743.0, "text": " And it wrote this code.", "tokens": [50814, 400, 309, 4114, 341, 3089, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11957838343477797, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.20165778696537018}, {"id": 563, "seek": 273200, "start": 2743.0, "end": 2750.0, "text": " It's got a try, checks your rate limit errors, grabs the retry after,", "tokens": [50914, 467, 311, 658, 257, 853, 11, 13834, 428, 3314, 4948, 13603, 11, 30028, 264, 1533, 627, 934, 11, 51264], "temperature": 0.0, "avg_logprob": -0.11957838343477797, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.20165778696537018}, {"id": 564, "seek": 273200, "start": 2750.0, "end": 2754.0, "text": " sleeps for that long and calls itself.", "tokens": [51264, 37991, 337, 300, 938, 293, 5498, 2564, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11957838343477797, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.20165778696537018}, {"id": 565, "seek": 273200, "start": 2754.0, "end": 2757.0, "text": " And so now we can use that to ask, for example,", "tokens": [51464, 400, 370, 586, 321, 393, 764, 300, 281, 1029, 11, 337, 1365, 11, 51614], "temperature": 0.0, "avg_logprob": -0.11957838343477797, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.20165778696537018}, {"id": 566, "seek": 273200, "start": 2757.0, "end": 2760.0, "text": " what's the world's funniest joke?", "tokens": [51614, 437, 311, 264, 1002, 311, 42681, 7647, 30, 51764], "temperature": 0.0, "avg_logprob": -0.11957838343477797, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.20165778696537018}, {"id": 567, "seek": 276000, "start": 2760.0, "end": 2764.0, "text": " And there we go.", "tokens": [50364, 400, 456, 321, 352, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13772453580583846, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0005702783237211406}, {"id": 568, "seek": 276000, "start": 2764.0, "end": 2768.0, "text": " Here's the world's funniest joke.", "tokens": [50564, 1692, 311, 264, 1002, 311, 42681, 7647, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13772453580583846, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0005702783237211406}, {"id": 569, "seek": 276000, "start": 2768.0, "end": 2778.0, "text": " So that's like the basic stuff you need to get started using the OpenAI LLMs.", "tokens": [50764, 407, 300, 311, 411, 264, 3875, 1507, 291, 643, 281, 483, 1409, 1228, 264, 7238, 48698, 441, 43, 26386, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13772453580583846, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0005702783237211406}, {"id": 570, "seek": 276000, "start": 2778.0, "end": 2784.0, "text": " And yeah, it's definitely suggest spending plenty of time with that", "tokens": [51264, 400, 1338, 11, 309, 311, 2138, 3402, 6434, 7140, 295, 565, 365, 300, 51564], "temperature": 0.0, "avg_logprob": -0.13772453580583846, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.0005702783237211406}, {"id": 571, "seek": 278400, "start": 2784.0, "end": 2793.0, "text": " so that you feel like you're really a LLM using expert.", "tokens": [50364, 370, 300, 291, 841, 411, 291, 434, 534, 257, 441, 43, 44, 1228, 5844, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0659337043762207, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.005910089239478111}, {"id": 572, "seek": 278400, "start": 2793.0, "end": 2795.0, "text": " So what else can we do?", "tokens": [50814, 407, 437, 1646, 393, 321, 360, 30, 50914], "temperature": 0.0, "avg_logprob": -0.0659337043762207, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.005910089239478111}, {"id": 573, "seek": 278400, "start": 2795.0, "end": 2800.0, "text": " Well, let's create our own code interpreter that runs inside GPT-4.", "tokens": [50914, 1042, 11, 718, 311, 1884, 527, 1065, 3089, 34132, 300, 6676, 1854, 26039, 51, 12, 19, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0659337043762207, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.005910089239478111}, {"id": 574, "seek": 278400, "start": 2800.0, "end": 2808.0, "text": " And so to do this, we're going to take advantage of a really nifty thing called function calling,", "tokens": [51164, 400, 370, 281, 360, 341, 11, 321, 434, 516, 281, 747, 5002, 295, 257, 534, 297, 37177, 551, 1219, 2445, 5141, 11, 51564], "temperature": 0.0, "avg_logprob": -0.0659337043762207, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.005910089239478111}, {"id": 575, "seek": 278400, "start": 2808.0, "end": 2811.0, "text": " which is provided by the OpenAI API.", "tokens": [51564, 597, 307, 5649, 538, 264, 7238, 48698, 9362, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0659337043762207, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.005910089239478111}, {"id": 576, "seek": 281100, "start": 2811.0, "end": 2816.0, "text": " And in function calling, when we call our askGPT function,", "tokens": [50364, 400, 294, 2445, 5141, 11, 562, 321, 818, 527, 1029, 38, 47, 51, 2445, 11, 50614], "temperature": 0.0, "avg_logprob": -0.12460207939147949, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.02227814495563507}, {"id": 577, "seek": 281100, "start": 2816.0, "end": 2822.0, "text": " which is this little one here, we had room to pass in some keyword arguments", "tokens": [50614, 597, 307, 341, 707, 472, 510, 11, 321, 632, 1808, 281, 1320, 294, 512, 20428, 12869, 50914], "temperature": 0.0, "avg_logprob": -0.12460207939147949, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.02227814495563507}, {"id": 578, "seek": 281100, "start": 2822.0, "end": 2825.0, "text": " that would be just passed along to checkCompletion.create.", "tokens": [50914, 300, 576, 312, 445, 4678, 2051, 281, 1520, 14627, 14657, 313, 13, 14066, 473, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12460207939147949, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.02227814495563507}, {"id": 579, "seek": 281100, "start": 2825.0, "end": 2832.0, "text": " And one of those keyword arguments you can pass is functions.", "tokens": [51064, 400, 472, 295, 729, 20428, 12869, 291, 393, 1320, 307, 6828, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12460207939147949, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.02227814495563507}, {"id": 580, "seek": 281100, "start": 2832.0, "end": 2834.0, "text": " What on earth is that?", "tokens": [51414, 708, 322, 4120, 307, 300, 30, 51514], "temperature": 0.0, "avg_logprob": -0.12460207939147949, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.02227814495563507}, {"id": 581, "seek": 283400, "start": 2834.0, "end": 2843.0, "text": " Functions tells OpenAI about tools that you have, about functions that you have.", "tokens": [50364, 11166, 3916, 5112, 7238, 48698, 466, 3873, 300, 291, 362, 11, 466, 6828, 300, 291, 362, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07762785141284649, "compression_ratio": 1.4809160305343512, "no_speech_prob": 0.008060555905103683}, {"id": 582, "seek": 283400, "start": 2843.0, "end": 2853.0, "text": " So for example, I created a really simple function called sums and it adds two things.", "tokens": [50814, 407, 337, 1365, 11, 286, 2942, 257, 534, 2199, 2445, 1219, 34499, 293, 309, 10860, 732, 721, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07762785141284649, "compression_ratio": 1.4809160305343512, "no_speech_prob": 0.008060555905103683}, {"id": 583, "seek": 283400, "start": 2853.0, "end": 2857.0, "text": " In fact, it adds two ints.", "tokens": [51314, 682, 1186, 11, 309, 10860, 732, 560, 82, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07762785141284649, "compression_ratio": 1.4809160305343512, "no_speech_prob": 0.008060555905103683}, {"id": 584, "seek": 285700, "start": 2857.0, "end": 2865.0, "text": " And I am going to pass that function to checkCompletion.create.", "tokens": [50364, 400, 286, 669, 516, 281, 1320, 300, 2445, 281, 1520, 14627, 14657, 313, 13, 14066, 473, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07614353724888392, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.004904448054730892}, {"id": 585, "seek": 285700, "start": 2865.0, "end": 2869.0, "text": " Now you can't pass a Python function directly.", "tokens": [50764, 823, 291, 393, 380, 1320, 257, 15329, 2445, 3838, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07614353724888392, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.004904448054730892}, {"id": 586, "seek": 285700, "start": 2869.0, "end": 2873.0, "text": " You actually have to pass what's called the JSON schema.", "tokens": [50964, 509, 767, 362, 281, 1320, 437, 311, 1219, 264, 31828, 34078, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07614353724888392, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.004904448054730892}, {"id": 587, "seek": 285700, "start": 2873.0, "end": 2876.0, "text": " So you have to pass the schema for the function.", "tokens": [51164, 407, 291, 362, 281, 1320, 264, 34078, 337, 264, 2445, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07614353724888392, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.004904448054730892}, {"id": 588, "seek": 285700, "start": 2876.0, "end": 2881.0, "text": " So I created this nifty little function that you're welcome to borrow,", "tokens": [51314, 407, 286, 2942, 341, 297, 37177, 707, 2445, 300, 291, 434, 2928, 281, 11172, 11, 51564], "temperature": 0.0, "avg_logprob": -0.07614353724888392, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.004904448054730892}, {"id": 589, "seek": 288100, "start": 2881.0, "end": 2888.0, "text": " which uses pydantic and also Python's inspect module", "tokens": [50364, 597, 4960, 10664, 67, 7128, 293, 611, 15329, 311, 15018, 10088, 50714], "temperature": 0.0, "avg_logprob": -0.08681991696357727, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.12932021915912628}, {"id": 590, "seek": 288100, "start": 2888.0, "end": 2895.0, "text": " to automatically take a Python function and return the schema for it.", "tokens": [50714, 281, 6772, 747, 257, 15329, 2445, 293, 2736, 264, 34078, 337, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08681991696357727, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.12932021915912628}, {"id": 591, "seek": 288100, "start": 2895.0, "end": 2898.0, "text": " And so this is actually what's going to get passed to OpenAI.", "tokens": [51064, 400, 370, 341, 307, 767, 437, 311, 516, 281, 483, 4678, 281, 7238, 48698, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08681991696357727, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.12932021915912628}, {"id": 592, "seek": 288100, "start": 2898.0, "end": 2900.0, "text": " So it's going to know that there's a function called sums.", "tokens": [51214, 407, 309, 311, 516, 281, 458, 300, 456, 311, 257, 2445, 1219, 34499, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08681991696357727, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.12932021915912628}, {"id": 593, "seek": 288100, "start": 2900.0, "end": 2905.0, "text": " It's going to know what it does and it's going to know what parameters it takes,", "tokens": [51314, 467, 311, 516, 281, 458, 437, 309, 775, 293, 309, 311, 516, 281, 458, 437, 9834, 309, 2516, 11, 51564], "temperature": 0.0, "avg_logprob": -0.08681991696357727, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.12932021915912628}, {"id": 594, "seek": 288100, "start": 2905.0, "end": 2909.0, "text": " what the defaults are and what's required.", "tokens": [51564, 437, 264, 7576, 82, 366, 293, 437, 311, 4739, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08681991696357727, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.12932021915912628}, {"id": 595, "seek": 290900, "start": 2909.0, "end": 2914.0, "text": " So this is like, when I first heard about this, I found this a bit mind-bending", "tokens": [50364, 407, 341, 307, 411, 11, 562, 286, 700, 2198, 466, 341, 11, 286, 1352, 341, 257, 857, 1575, 12, 65, 2029, 50614], "temperature": 0.0, "avg_logprob": -0.09607314059608861, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0026312461122870445}, {"id": 596, "seek": 290900, "start": 2914.0, "end": 2917.0, "text": " because this is so different to how we normally program computers.", "tokens": [50614, 570, 341, 307, 370, 819, 281, 577, 321, 5646, 1461, 10807, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09607314059608861, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0026312461122870445}, {"id": 597, "seek": 290900, "start": 2917.0, "end": 2922.0, "text": " The key thing for programming the computer here actually is the doc string.", "tokens": [50764, 440, 2141, 551, 337, 9410, 264, 3820, 510, 767, 307, 264, 3211, 6798, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09607314059608861, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0026312461122870445}, {"id": 598, "seek": 290900, "start": 2922.0, "end": 2928.0, "text": " This is the thing that GPT-4 will look at and say, oh, what does this function do?", "tokens": [51014, 639, 307, 264, 551, 300, 26039, 51, 12, 19, 486, 574, 412, 293, 584, 11, 1954, 11, 437, 775, 341, 2445, 360, 30, 51314], "temperature": 0.0, "avg_logprob": -0.09607314059608861, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0026312461122870445}, {"id": 599, "seek": 290900, "start": 2928.0, "end": 2932.0, "text": " So it's critical that this describes exactly what the function does.", "tokens": [51314, 407, 309, 311, 4924, 300, 341, 15626, 2293, 437, 264, 2445, 775, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09607314059608861, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0026312461122870445}, {"id": 600, "seek": 293200, "start": 2932.0, "end": 2940.0, "text": " And so if I then say, what is 6 plus 3?", "tokens": [50364, 400, 370, 498, 286, 550, 584, 11, 437, 307, 1386, 1804, 805, 30, 50764], "temperature": 0.0, "avg_logprob": -0.14682759284973146, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.0124290082603693}, {"id": 601, "seek": 293200, "start": 2940.0, "end": 2944.0, "text": " And I just, I really wanted to make sure it actually did it here.", "tokens": [50764, 400, 286, 445, 11, 286, 534, 1415, 281, 652, 988, 309, 767, 630, 309, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14682759284973146, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.0124290082603693}, {"id": 602, "seek": 293200, "start": 2944.0, "end": 2948.0, "text": " So I gave it lots of prompts to say, because obviously it knows how to do it itself", "tokens": [50964, 407, 286, 2729, 309, 3195, 295, 41095, 281, 584, 11, 570, 2745, 309, 3255, 577, 281, 360, 309, 2564, 51164], "temperature": 0.0, "avg_logprob": -0.14682759284973146, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.0124290082603693}, {"id": 603, "seek": 293200, "start": 2948.0, "end": 2950.0, "text": " without calling sums.", "tokens": [51164, 1553, 5141, 34499, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14682759284973146, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.0124290082603693}, {"id": 604, "seek": 293200, "start": 2950.0, "end": 2956.0, "text": " So it'll only use your functions if it feels it needs to, which is a weird concept.", "tokens": [51264, 407, 309, 603, 787, 764, 428, 6828, 498, 309, 3417, 309, 2203, 281, 11, 597, 307, 257, 3657, 3410, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14682759284973146, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.0124290082603693}, {"id": 605, "seek": 293200, "start": 2956.0, "end": 2958.0, "text": " I mean, I guess fields is not a great word to use,", "tokens": [51564, 286, 914, 11, 286, 2041, 7909, 307, 406, 257, 869, 1349, 281, 764, 11, 51664], "temperature": 0.0, "avg_logprob": -0.14682759284973146, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.0124290082603693}, {"id": 606, "seek": 295800, "start": 2958.0, "end": 2962.0, "text": " but you kind of have to anthropomorphize these things a little bit", "tokens": [50364, 457, 291, 733, 295, 362, 281, 22727, 32702, 1125, 613, 721, 257, 707, 857, 50564], "temperature": 0.0, "avg_logprob": -0.09098597495786605, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008313611149787903}, {"id": 607, "seek": 295800, "start": 2962.0, "end": 2965.0, "text": " because they don't behave like normal computer programs.", "tokens": [50564, 570, 436, 500, 380, 15158, 411, 2710, 3820, 4268, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09098597495786605, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008313611149787903}, {"id": 608, "seek": 295800, "start": 2965.0, "end": 2973.0, "text": " So if I ask GPT, what is 6 plus 3, and tell it that there's a function called sums,", "tokens": [50714, 407, 498, 286, 1029, 26039, 51, 11, 437, 307, 1386, 1804, 805, 11, 293, 980, 309, 300, 456, 311, 257, 2445, 1219, 34499, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09098597495786605, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008313611149787903}, {"id": 609, "seek": 295800, "start": 2973.0, "end": 2977.0, "text": " then it does not actually return the number 9.", "tokens": [51114, 550, 309, 775, 406, 767, 2736, 264, 1230, 1722, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09098597495786605, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008313611149787903}, {"id": 610, "seek": 295800, "start": 2977.0, "end": 2981.0, "text": " Instead, it returns something saying, please call a function.", "tokens": [51314, 7156, 11, 309, 11247, 746, 1566, 11, 1767, 818, 257, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09098597495786605, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008313611149787903}, {"id": 611, "seek": 295800, "start": 2981.0, "end": 2986.0, "text": " Call this function and pass it these arguments.", "tokens": [51514, 7807, 341, 2445, 293, 1320, 309, 613, 12869, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09098597495786605, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008313611149787903}, {"id": 612, "seek": 298600, "start": 2986.0, "end": 2990.0, "text": " So if I print it out, there's the arguments.", "tokens": [50364, 407, 498, 286, 4482, 309, 484, 11, 456, 311, 264, 12869, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10163548626477205, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0022516343742609024}, {"id": 613, "seek": 298600, "start": 2990.0, "end": 2993.0, "text": " So I created a little function called core function,", "tokens": [50564, 407, 286, 2942, 257, 707, 2445, 1219, 4965, 2445, 11, 50714], "temperature": 0.0, "avg_logprob": -0.10163548626477205, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0022516343742609024}, {"id": 614, "seek": 298600, "start": 2993.0, "end": 3000.0, "text": " and it goes into the result of OpenAI, grabs the function call,", "tokens": [50714, 293, 309, 1709, 666, 264, 1874, 295, 7238, 48698, 11, 30028, 264, 2445, 818, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10163548626477205, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0022516343742609024}, {"id": 615, "seek": 298600, "start": 3000.0, "end": 3004.0, "text": " checks that the name is something that it's allowed to do,", "tokens": [51064, 13834, 300, 264, 1315, 307, 746, 300, 309, 311, 4350, 281, 360, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10163548626477205, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0022516343742609024}, {"id": 616, "seek": 298600, "start": 3004.0, "end": 3011.0, "text": " grabs it from the global system table, and calls it, passing in the parameters.", "tokens": [51264, 30028, 309, 490, 264, 4338, 1185, 3199, 11, 293, 5498, 309, 11, 8437, 294, 264, 9834, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10163548626477205, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0022516343742609024}, {"id": 617, "seek": 301100, "start": 3011.0, "end": 3022.0, "text": " So if I now say, OK, call the function that we got back, we finally get 9.", "tokens": [50364, 407, 498, 286, 586, 584, 11, 2264, 11, 818, 264, 2445, 300, 321, 658, 646, 11, 321, 2721, 483, 1722, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06262078429713394, "compression_ratio": 1.4058823529411764, "no_speech_prob": 0.0018100928282365203}, {"id": 618, "seek": 301100, "start": 3022.0, "end": 3025.0, "text": " So this is a very simple example.", "tokens": [50914, 407, 341, 307, 257, 588, 2199, 1365, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06262078429713394, "compression_ratio": 1.4058823529411764, "no_speech_prob": 0.0018100928282365203}, {"id": 619, "seek": 301100, "start": 3025.0, "end": 3027.0, "text": " It's not really doing anything that useful,", "tokens": [51064, 467, 311, 406, 534, 884, 1340, 300, 4420, 11, 51164], "temperature": 0.0, "avg_logprob": -0.06262078429713394, "compression_ratio": 1.4058823529411764, "no_speech_prob": 0.0018100928282365203}, {"id": 620, "seek": 301100, "start": 3027.0, "end": 3035.0, "text": " but what we could do now is we can create a much more powerful function called Python.", "tokens": [51164, 457, 437, 321, 727, 360, 586, 307, 321, 393, 1884, 257, 709, 544, 4005, 2445, 1219, 15329, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06262078429713394, "compression_ratio": 1.4058823529411764, "no_speech_prob": 0.0018100928282365203}, {"id": 621, "seek": 303500, "start": 3035.0, "end": 3046.0, "text": " And the Python function executes code using Python and returns the result.", "tokens": [50364, 400, 264, 15329, 2445, 4454, 1819, 3089, 1228, 15329, 293, 11247, 264, 1874, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09214567184448243, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0049047889187932014}, {"id": 622, "seek": 303500, "start": 3046.0, "end": 3052.0, "text": " Now, of course, I didn't want my computer to run arbitrary Python code", "tokens": [50914, 823, 11, 295, 1164, 11, 286, 994, 380, 528, 452, 3820, 281, 1190, 23211, 15329, 3089, 51214], "temperature": 0.0, "avg_logprob": -0.09214567184448243, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0049047889187932014}, {"id": 623, "seek": 303500, "start": 3052.0, "end": 3055.0, "text": " that GPT4 told it to without checking.", "tokens": [51214, 300, 26039, 51, 19, 1907, 309, 281, 1553, 8568, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09214567184448243, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0049047889187932014}, {"id": 624, "seek": 303500, "start": 3055.0, "end": 3057.0, "text": " So I just got it to check first.", "tokens": [51364, 407, 286, 445, 658, 309, 281, 1520, 700, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09214567184448243, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0049047889187932014}, {"id": 625, "seek": 303500, "start": 3057.0, "end": 3061.0, "text": " So say, oh, are you sure you want to do this?", "tokens": [51464, 407, 584, 11, 1954, 11, 366, 291, 988, 291, 528, 281, 360, 341, 30, 51664], "temperature": 0.0, "avg_logprob": -0.09214567184448243, "compression_ratio": 1.4692737430167597, "no_speech_prob": 0.0049047889187932014}, {"id": 626, "seek": 306100, "start": 3061.0, "end": 3069.0, "text": " So now I can say, ask GPT, what is 12 factorial?", "tokens": [50364, 407, 586, 286, 393, 584, 11, 1029, 26039, 51, 11, 437, 307, 2272, 36916, 30, 50764], "temperature": 0.0, "avg_logprob": -0.10991253350910388, "compression_ratio": 1.3645833333333333, "no_speech_prob": 0.002800477435812354}, {"id": 627, "seek": 306100, "start": 3069.0, "end": 3070.0, "text": " System prompt.", "tokens": [50764, 8910, 12391, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10991253350910388, "compression_ratio": 1.3645833333333333, "no_speech_prob": 0.002800477435812354}, {"id": 628, "seek": 306100, "start": 3070.0, "end": 3075.0, "text": " You can use Python for any required computations and say, OK, here's a function you've got available.", "tokens": [50814, 509, 393, 764, 15329, 337, 604, 4739, 2807, 763, 293, 584, 11, 2264, 11, 510, 311, 257, 2445, 291, 600, 658, 2435, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10991253350910388, "compression_ratio": 1.3645833333333333, "no_speech_prob": 0.002800477435812354}, {"id": 629, "seek": 306100, "start": 3075.0, "end": 3078.0, "text": " It's the Python function.", "tokens": [51064, 467, 311, 264, 15329, 2445, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10991253350910388, "compression_ratio": 1.3645833333333333, "no_speech_prob": 0.002800477435812354}, {"id": 630, "seek": 306100, "start": 3078.0, "end": 3086.0, "text": " So if I now call this, it will pass me back again a completion object.", "tokens": [51214, 407, 498, 286, 586, 818, 341, 11, 309, 486, 1320, 385, 646, 797, 257, 19372, 2657, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10991253350910388, "compression_ratio": 1.3645833333333333, "no_speech_prob": 0.002800477435812354}, {"id": 631, "seek": 308600, "start": 3086.0, "end": 3093.0, "text": " And here it's going to say, OK, I want you to call Python passing in this argument.", "tokens": [50364, 400, 510, 309, 311, 516, 281, 584, 11, 2264, 11, 286, 528, 291, 281, 818, 15329, 8437, 294, 341, 6770, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 632, "seek": 308600, "start": 3093.0, "end": 3099.0, "text": " And when I do, it's going to go import math, result equals blah, and then return result.", "tokens": [50714, 400, 562, 286, 360, 11, 309, 311, 516, 281, 352, 974, 5221, 11, 1874, 6915, 12288, 11, 293, 550, 2736, 1874, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 633, "seek": 308600, "start": 3099.0, "end": 3100.0, "text": " Do I want to do that?", "tokens": [51014, 1144, 286, 528, 281, 360, 300, 30, 51064], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 634, "seek": 308600, "start": 3100.0, "end": 3103.0, "text": " Yes, I do.", "tokens": [51064, 1079, 11, 286, 360, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 635, "seek": 308600, "start": 3103.0, "end": 3105.0, "text": " And there it is.", "tokens": [51214, 400, 456, 309, 307, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 636, "seek": 308600, "start": 3105.0, "end": 3109.0, "text": " Now, there's one more step which we can optionally do.", "tokens": [51314, 823, 11, 456, 311, 472, 544, 1823, 597, 321, 393, 3614, 379, 360, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 637, "seek": 308600, "start": 3109.0, "end": 3114.0, "text": " I mean, we've got the answer we wanted, but often we want the answer in more of a chat format.", "tokens": [51514, 286, 914, 11, 321, 600, 658, 264, 1867, 321, 1415, 11, 457, 2049, 321, 528, 264, 1867, 294, 544, 295, 257, 5081, 7877, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07652862448441355, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.07366298139095306}, {"id": 638, "seek": 311400, "start": 3114.0, "end": 3122.0, "text": " And so the way to do that is to, again, repeat everything that you've passed into so far.", "tokens": [50364, 400, 370, 264, 636, 281, 360, 300, 307, 281, 11, 797, 11, 7149, 1203, 300, 291, 600, 4678, 666, 370, 1400, 13, 50764], "temperature": 0.0, "avg_logprob": -0.052266055537808324, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.022969815880060196}, {"id": 639, "seek": 311400, "start": 3122.0, "end": 3130.0, "text": " But then instead of adding an assistant role response, we have to provide a function role response", "tokens": [50764, 583, 550, 2602, 295, 5127, 364, 10994, 3090, 4134, 11, 321, 362, 281, 2893, 257, 2445, 3090, 4134, 51164], "temperature": 0.0, "avg_logprob": -0.052266055537808324, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.022969815880060196}, {"id": 640, "seek": 311400, "start": 3130.0, "end": 3136.0, "text": " and simply put in here the result we got back from the function.", "tokens": [51164, 293, 2935, 829, 294, 510, 264, 1874, 321, 658, 646, 490, 264, 2445, 13, 51464], "temperature": 0.0, "avg_logprob": -0.052266055537808324, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.022969815880060196}, {"id": 641, "seek": 313600, "start": 3136.0, "end": 3150.0, "text": " And if we do that, we now get the pros response 12 factorial is equal to 470 million 1,600.", "tokens": [50364, 400, 498, 321, 360, 300, 11, 321, 586, 483, 264, 6267, 4134, 2272, 36916, 307, 2681, 281, 1017, 5867, 2459, 502, 11, 15707, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1534541750711108, "compression_ratio": 1.3312883435582823, "no_speech_prob": 0.02930488996207714}, {"id": 642, "seek": 313600, "start": 3150.0, "end": 3160.0, "text": " Now, functions like Python, you can still ask it about non Python things.", "tokens": [51064, 823, 11, 6828, 411, 15329, 11, 291, 393, 920, 1029, 309, 466, 2107, 15329, 721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1534541750711108, "compression_ratio": 1.3312883435582823, "no_speech_prob": 0.02930488996207714}, {"id": 643, "seek": 313600, "start": 3160.0, "end": 3164.0, "text": " And it just ignores it if you don't need it, right?", "tokens": [51564, 400, 309, 445, 5335, 2706, 309, 498, 291, 500, 380, 643, 309, 11, 558, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1534541750711108, "compression_ratio": 1.3312883435582823, "no_speech_prob": 0.02930488996207714}, {"id": 644, "seek": 316400, "start": 3164.0, "end": 3177.0, "text": " So you can have a whole bunch of functions available that you've built to do whatever you need for the stuff which the language model isn't familiar with.", "tokens": [50364, 407, 291, 393, 362, 257, 1379, 3840, 295, 6828, 2435, 300, 291, 600, 3094, 281, 360, 2035, 291, 643, 337, 264, 1507, 597, 264, 2856, 2316, 1943, 380, 4963, 365, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08082658961667853, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.010325701907277107}, {"id": 645, "seek": 316400, "start": 3177.0, "end": 3189.0, "text": " And it'll still solve whatever it can on its own and use your tools, use your functions where possible.", "tokens": [51014, 400, 309, 603, 920, 5039, 2035, 309, 393, 322, 1080, 1065, 293, 764, 428, 3873, 11, 764, 428, 6828, 689, 1944, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08082658961667853, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.010325701907277107}, {"id": 646, "seek": 318900, "start": 3189.0, "end": 3195.0, "text": " So we have built our own code interpreter from scratch.", "tokens": [50364, 407, 321, 362, 3094, 527, 1065, 3089, 34132, 490, 8459, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09433518250783285, "compression_ratio": 1.5103448275862068, "no_speech_prob": 0.09261111915111542}, {"id": 647, "seek": 318900, "start": 3195.0, "end": 3202.0, "text": " I think that's pretty amazing.", "tokens": [50664, 286, 519, 300, 311, 1238, 2243, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09433518250783285, "compression_ratio": 1.5103448275862068, "no_speech_prob": 0.09261111915111542}, {"id": 648, "seek": 318900, "start": 3202.0, "end": 3212.0, "text": " So that is what you can do with or some of the stuff you can do with open AI.", "tokens": [51014, 407, 300, 307, 437, 291, 393, 360, 365, 420, 512, 295, 264, 1507, 291, 393, 360, 365, 1269, 7318, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09433518250783285, "compression_ratio": 1.5103448275862068, "no_speech_prob": 0.09261111915111542}, {"id": 649, "seek": 318900, "start": 3212.0, "end": 3216.0, "text": " What about stuff that you can do on your own computer?", "tokens": [51514, 708, 466, 1507, 300, 291, 393, 360, 322, 428, 1065, 3820, 30, 51714], "temperature": 0.0, "avg_logprob": -0.09433518250783285, "compression_ratio": 1.5103448275862068, "no_speech_prob": 0.09261111915111542}, {"id": 650, "seek": 321600, "start": 3216.0, "end": 3225.0, "text": " Well, to use a language model on your own computer, you're going to need to use a GPU.", "tokens": [50364, 1042, 11, 281, 764, 257, 2856, 2316, 322, 428, 1065, 3820, 11, 291, 434, 516, 281, 643, 281, 764, 257, 18407, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05616789875608502, "compression_ratio": 1.4713375796178343, "no_speech_prob": 0.015897218137979507}, {"id": 651, "seek": 321600, "start": 3225.0, "end": 3230.0, "text": " So I guess the first thing to think about is like, do you want this?", "tokens": [50814, 407, 286, 2041, 264, 700, 551, 281, 519, 466, 307, 411, 11, 360, 291, 528, 341, 30, 51064], "temperature": 0.0, "avg_logprob": -0.05616789875608502, "compression_ratio": 1.4713375796178343, "no_speech_prob": 0.015897218137979507}, {"id": 652, "seek": 321600, "start": 3230.0, "end": 3235.0, "text": " Does it make sense to do stuff on your own computer?", "tokens": [51064, 4402, 309, 652, 2020, 281, 360, 1507, 322, 428, 1065, 3820, 30, 51314], "temperature": 0.0, "avg_logprob": -0.05616789875608502, "compression_ratio": 1.4713375796178343, "no_speech_prob": 0.015897218137979507}, {"id": 653, "seek": 321600, "start": 3235.0, "end": 3238.0, "text": " What are the benefits?", "tokens": [51314, 708, 366, 264, 5311, 30, 51464], "temperature": 0.0, "avg_logprob": -0.05616789875608502, "compression_ratio": 1.4713375796178343, "no_speech_prob": 0.015897218137979507}, {"id": 654, "seek": 323800, "start": 3238.0, "end": 3246.0, "text": " There are not any open source models that are as good yet as GPT-4.", "tokens": [50364, 821, 366, 406, 604, 1269, 4009, 5245, 300, 366, 382, 665, 1939, 382, 26039, 51, 12, 19, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08588128931382123, "compression_ratio": 1.5, "no_speech_prob": 0.13106569647789001}, {"id": 655, "seek": 323800, "start": 3246.0, "end": 3251.0, "text": " And I would have to say also like actually open AI pricing is really pretty good.", "tokens": [50764, 400, 286, 576, 362, 281, 584, 611, 411, 767, 1269, 7318, 17621, 307, 534, 1238, 665, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08588128931382123, "compression_ratio": 1.5, "no_speech_prob": 0.13106569647789001}, {"id": 656, "seek": 323800, "start": 3251.0, "end": 3259.0, "text": " So it's not immediately obvious that you definitely want to kind of go in-house, but there's lots of reasons you might want to.", "tokens": [51014, 407, 309, 311, 406, 4258, 6322, 300, 291, 2138, 528, 281, 733, 295, 352, 294, 12, 6410, 11, 457, 456, 311, 3195, 295, 4112, 291, 1062, 528, 281, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08588128931382123, "compression_ratio": 1.5, "no_speech_prob": 0.13106569647789001}, {"id": 657, "seek": 323800, "start": 3259.0, "end": 3264.0, "text": " And we'll look at some examples of them today.", "tokens": [51414, 400, 321, 603, 574, 412, 512, 5110, 295, 552, 965, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08588128931382123, "compression_ratio": 1.5, "no_speech_prob": 0.13106569647789001}, {"id": 658, "seek": 326400, "start": 3265.0, "end": 3274.0, "text": " One example you might want to go in-house is that you want to be able to ask questions about your proprietary documents", "tokens": [50414, 1485, 1365, 291, 1062, 528, 281, 352, 294, 12, 6410, 307, 300, 291, 528, 281, 312, 1075, 281, 1029, 1651, 466, 428, 38992, 8512, 50864], "temperature": 0.0, "avg_logprob": -0.07421262396706475, "compression_ratio": 1.5721153846153846, "no_speech_prob": 0.0510110929608345}, {"id": 659, "seek": 326400, "start": 3274.0, "end": 3279.0, "text": " or about information after September 2021, the knowledge cutoff.", "tokens": [50864, 420, 466, 1589, 934, 7216, 7201, 11, 264, 3601, 1723, 4506, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07421262396706475, "compression_ratio": 1.5721153846153846, "no_speech_prob": 0.0510110929608345}, {"id": 660, "seek": 326400, "start": 3279.0, "end": 3286.0, "text": " Or you might want to create your own model that's particularly good at solving the kinds of problems that you need to solve using fine tuning.", "tokens": [51114, 1610, 291, 1062, 528, 281, 1884, 428, 1065, 2316, 300, 311, 4098, 665, 412, 12606, 264, 3685, 295, 2740, 300, 291, 643, 281, 5039, 1228, 2489, 15164, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07421262396706475, "compression_ratio": 1.5721153846153846, "no_speech_prob": 0.0510110929608345}, {"id": 661, "seek": 328600, "start": 3286.0, "end": 3297.0, "text": " And these are all things that you absolutely can get better than GPT-4 performance at work or at home without too much money or travel.", "tokens": [50364, 400, 613, 366, 439, 721, 300, 291, 3122, 393, 483, 1101, 813, 26039, 51, 12, 19, 3389, 412, 589, 420, 412, 1280, 1553, 886, 709, 1460, 420, 3147, 13, 50914], "temperature": 0.0, "avg_logprob": -0.055714012531752, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.5113030672073364}, {"id": 662, "seek": 328600, "start": 3297.0, "end": 3300.0, "text": " So these are the situations in which you might want to go down this path.", "tokens": [50914, 407, 613, 366, 264, 6851, 294, 597, 291, 1062, 528, 281, 352, 760, 341, 3100, 13, 51064], "temperature": 0.0, "avg_logprob": -0.055714012531752, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.5113030672073364}, {"id": 663, "seek": 328600, "start": 3300.0, "end": 3304.0, "text": " And so you don't necessarily have to buy a GPU.", "tokens": [51064, 400, 370, 291, 500, 380, 4725, 362, 281, 2256, 257, 18407, 13, 51264], "temperature": 0.0, "avg_logprob": -0.055714012531752, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.5113030672073364}, {"id": 664, "seek": 328600, "start": 3304.0, "end": 3312.0, "text": " On Kaggle, they will give you a notebook with two quite old GPUs attached and very little RAM.", "tokens": [51264, 1282, 48751, 22631, 11, 436, 486, 976, 291, 257, 21060, 365, 732, 1596, 1331, 18407, 82, 8570, 293, 588, 707, 14561, 13, 51664], "temperature": 0.0, "avg_logprob": -0.055714012531752, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.5113030672073364}, {"id": 665, "seek": 331200, "start": 3312.0, "end": 3314.0, "text": " But it's something.", "tokens": [50364, 583, 309, 311, 746, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10737289920929939, "compression_ratio": 1.3209876543209877, "no_speech_prob": 0.041444387286901474}, {"id": 666, "seek": 331200, "start": 3314.0, "end": 3316.0, "text": " Or you can use Colab.", "tokens": [50464, 1610, 291, 393, 764, 4004, 455, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10737289920929939, "compression_ratio": 1.3209876543209877, "no_speech_prob": 0.041444387286901474}, {"id": 667, "seek": 331200, "start": 3316.0, "end": 3328.0, "text": " And on Colab, you can get much better GPUs than Kaggle has and more RAM, particularly if you pay a monthly subscription fee.", "tokens": [50564, 400, 322, 4004, 455, 11, 291, 393, 483, 709, 1101, 18407, 82, 813, 48751, 22631, 575, 293, 544, 14561, 11, 4098, 498, 291, 1689, 257, 12878, 17231, 12054, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10737289920929939, "compression_ratio": 1.3209876543209877, "no_speech_prob": 0.041444387286901474}, {"id": 668, "seek": 331200, "start": 3328.0, "end": 3333.0, "text": " So those are some options for free or low cost.", "tokens": [51164, 407, 729, 366, 512, 3956, 337, 1737, 420, 2295, 2063, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10737289920929939, "compression_ratio": 1.3209876543209877, "no_speech_prob": 0.041444387286901474}, {"id": 669, "seek": 333300, "start": 3333.0, "end": 3349.0, "text": " You can also, of course, go to one of the many GPU server providers and they change all the time as to what's good or what's not.", "tokens": [50364, 509, 393, 611, 11, 295, 1164, 11, 352, 281, 472, 295, 264, 867, 18407, 7154, 11330, 293, 436, 1319, 439, 264, 565, 382, 281, 437, 311, 665, 420, 437, 311, 406, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10619708936508387, "compression_ratio": 1.4052631578947368, "no_speech_prob": 0.2716112434864044}, {"id": 670, "seek": 333300, "start": 3349.0, "end": 3352.0, "text": " RunPod is one example.", "tokens": [51164, 8950, 40742, 307, 472, 1365, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10619708936508387, "compression_ratio": 1.4052631578947368, "no_speech_prob": 0.2716112434864044}, {"id": 671, "seek": 333300, "start": 3352.0, "end": 3362.0, "text": " And you can see if you want the biggest and best machine, you're talking $34 an hour, so it gets pretty expensive.", "tokens": [51314, 400, 291, 393, 536, 498, 291, 528, 264, 3880, 293, 1151, 3479, 11, 291, 434, 1417, 1848, 12249, 364, 1773, 11, 370, 309, 2170, 1238, 5124, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10619708936508387, "compression_ratio": 1.4052631578947368, "no_speech_prob": 0.2716112434864044}, {"id": 672, "seek": 336200, "start": 3362.0, "end": 3367.0, "text": " But you can certainly get things a lot cheaper, $0.80 an hour.", "tokens": [50364, 583, 291, 393, 3297, 483, 721, 257, 688, 12284, 11, 1848, 15, 13, 4702, 364, 1773, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12496971047442892, "compression_ratio": 1.2015503875968991, "no_speech_prob": 0.012815598398447037}, {"id": 673, "seek": 336200, "start": 3367.0, "end": 3374.0, "text": " Lambda Labs is often pretty good.", "tokens": [50614, 45691, 40047, 307, 2049, 1238, 665, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12496971047442892, "compression_ratio": 1.2015503875968991, "no_speech_prob": 0.012815598398447037}, {"id": 674, "seek": 336200, "start": 3374.0, "end": 3382.0, "text": " You know, it's really hard at the moment to actually find.", "tokens": [50964, 509, 458, 11, 309, 311, 534, 1152, 412, 264, 1623, 281, 767, 915, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12496971047442892, "compression_ratio": 1.2015503875968991, "no_speech_prob": 0.012815598398447037}, {"id": 675, "seek": 338200, "start": 3382.0, "end": 3385.0, "text": " Let's see, pricing to actually find people that have them available.", "tokens": [50364, 961, 311, 536, 11, 17621, 281, 767, 915, 561, 300, 362, 552, 2435, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08109990874333169, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.061826348304748535}, {"id": 676, "seek": 338200, "start": 3385.0, "end": 3392.0, "text": " So they've got lots listed here, but they often have none or very few available.", "tokens": [50514, 407, 436, 600, 658, 3195, 10052, 510, 11, 457, 436, 2049, 362, 6022, 420, 588, 1326, 2435, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08109990874333169, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.061826348304748535}, {"id": 677, "seek": 338200, "start": 3392.0, "end": 3406.0, "text": " There's also something pretty interesting called Vast AI, which basically lets you use other people's computers when they're not using them.", "tokens": [50864, 821, 311, 611, 746, 1238, 1880, 1219, 691, 525, 7318, 11, 597, 1936, 6653, 291, 764, 661, 561, 311, 10807, 562, 436, 434, 406, 1228, 552, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08109990874333169, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.061826348304748535}, {"id": 678, "seek": 340600, "start": 3406.0, "end": 3415.0, "text": " And as you can see, you know, they tend to be much cheaper than other folks.", "tokens": [50364, 400, 382, 291, 393, 536, 11, 291, 458, 11, 436, 3928, 281, 312, 709, 12284, 813, 661, 4024, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07858523300715856, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.09264148771762848}, {"id": 679, "seek": 340600, "start": 3415.0, "end": 3418.0, "text": " And then they tend to have better availability as well.", "tokens": [50814, 400, 550, 436, 3928, 281, 362, 1101, 17945, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07858523300715856, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.09264148771762848}, {"id": 680, "seek": 340600, "start": 3418.0, "end": 3422.0, "text": " But of course, for sensitive stuff, you don't want to be running it on some Rando's computer.", "tokens": [50964, 583, 295, 1164, 11, 337, 9477, 1507, 11, 291, 500, 380, 528, 281, 312, 2614, 309, 322, 512, 497, 1806, 311, 3820, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07858523300715856, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.09264148771762848}, {"id": 681, "seek": 340600, "start": 3422.0, "end": 3425.0, "text": " So anyway, so there's a few options for renting stuff.", "tokens": [51164, 407, 4033, 11, 370, 456, 311, 257, 1326, 3956, 337, 40598, 1507, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07858523300715856, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.09264148771762848}, {"id": 682, "seek": 340600, "start": 3425.0, "end": 3433.0, "text": " You know, I think it's, if you can, it's worth buying something and definitely the one to buy at the moment is the GTX 3090 used.", "tokens": [51314, 509, 458, 11, 286, 519, 309, 311, 11, 498, 291, 393, 11, 309, 311, 3163, 6382, 746, 293, 2138, 264, 472, 281, 2256, 412, 264, 1623, 307, 264, 17530, 55, 2217, 7771, 1143, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07858523300715856, "compression_ratio": 1.5747126436781609, "no_speech_prob": 0.09264148771762848}, {"id": 683, "seek": 343300, "start": 3433.0, "end": 3439.0, "text": " You can generally get them from eBay for like 700 bucks or so.", "tokens": [50364, 509, 393, 5101, 483, 552, 490, 33803, 337, 411, 15204, 11829, 420, 370, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07658534689047902, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.013628527522087097}, {"id": 684, "seek": 343300, "start": 3439.0, "end": 3445.0, "text": " A 4090 isn't really better for language models, even though it's a newer GPU.", "tokens": [50664, 316, 3356, 7771, 1943, 380, 534, 1101, 337, 2856, 5245, 11, 754, 1673, 309, 311, 257, 17628, 18407, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07658534689047902, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.013628527522087097}, {"id": 685, "seek": 343300, "start": 3445.0, "end": 3450.0, "text": " The reason for that is that language models are all about memory speed.", "tokens": [50964, 440, 1778, 337, 300, 307, 300, 2856, 5245, 366, 439, 466, 4675, 3073, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07658534689047902, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.013628527522087097}, {"id": 686, "seek": 343300, "start": 3450.0, "end": 3454.0, "text": " How quickly can you get in and stuff in and out of memory rather than how fast is the processor?", "tokens": [51214, 1012, 2661, 393, 291, 483, 294, 293, 1507, 294, 293, 484, 295, 4675, 2831, 813, 577, 2370, 307, 264, 15321, 30, 51414], "temperature": 0.0, "avg_logprob": -0.07658534689047902, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.013628527522087097}, {"id": 687, "seek": 343300, "start": 3454.0, "end": 3457.0, "text": " And that hasn't really improved a whole lot.", "tokens": [51414, 400, 300, 6132, 380, 534, 9689, 257, 1379, 688, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07658534689047902, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.013628527522087097}, {"id": 688, "seek": 343300, "start": 3457.0, "end": 3460.0, "text": " So the 2000 bucks.", "tokens": [51564, 407, 264, 8132, 11829, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07658534689047902, "compression_ratio": 1.5541666666666667, "no_speech_prob": 0.013628527522087097}, {"id": 689, "seek": 346000, "start": 3460.0, "end": 3464.0, "text": " The other thing as well as memory speed is memory size 24 gigs.", "tokens": [50364, 440, 661, 551, 382, 731, 382, 4675, 3073, 307, 4675, 2744, 4022, 34586, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 690, "seek": 346000, "start": 3464.0, "end": 3467.0, "text": " It doesn't quite cut it for a lot of things.", "tokens": [50564, 467, 1177, 380, 1596, 1723, 309, 337, 257, 688, 295, 721, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 691, "seek": 346000, "start": 3467.0, "end": 3469.0, "text": " So you'd probably want to get two of these GPUs.", "tokens": [50714, 407, 291, 1116, 1391, 528, 281, 483, 732, 295, 613, 18407, 82, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 692, "seek": 346000, "start": 3469.0, "end": 3474.0, "text": " So you're talking like $1,500 or so.", "tokens": [50814, 407, 291, 434, 1417, 411, 1848, 16, 11, 7526, 420, 370, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 693, "seek": 346000, "start": 3474.0, "end": 3477.0, "text": " Or you can get a 48 gig gram GPU.", "tokens": [51064, 1610, 291, 393, 483, 257, 11174, 8741, 21353, 18407, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 694, "seek": 346000, "start": 3477.0, "end": 3479.0, "text": " It's called an A6000.", "tokens": [51214, 467, 311, 1219, 364, 316, 21, 1360, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 695, "seek": 346000, "start": 3479.0, "end": 3483.0, "text": " But this is going to cost you more like five grand.", "tokens": [51314, 583, 341, 307, 516, 281, 2063, 291, 544, 411, 1732, 2697, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1336178730443581, "compression_ratio": 1.438095238095238, "no_speech_prob": 0.0028890734538435936}, {"id": 696, "seek": 348300, "start": 3483.0, "end": 3488.0, "text": " So again, getting two of these is going to be a better deal.", "tokens": [50364, 407, 797, 11, 1242, 732, 295, 613, 307, 516, 281, 312, 257, 1101, 2028, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08561093756493102, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.01911933161318302}, {"id": 697, "seek": 348300, "start": 3488.0, "end": 3493.0, "text": " And this is not going to be faster than these either.", "tokens": [50614, 400, 341, 307, 406, 516, 281, 312, 4663, 813, 613, 2139, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08561093756493102, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.01911933161318302}, {"id": 698, "seek": 348300, "start": 3493.0, "end": 3500.0, "text": " Or funnily enough, you could just get a Mac with a lot of RAM, particularly if you get an M2 Ultra.", "tokens": [50864, 1610, 1019, 77, 953, 1547, 11, 291, 727, 445, 483, 257, 5707, 365, 257, 688, 295, 14561, 11, 4098, 498, 291, 483, 364, 376, 17, 20925, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08561093756493102, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.01911933161318302}, {"id": 699, "seek": 348300, "start": 3500.0, "end": 3506.0, "text": " Macs have, particularly the M2 Ultra has pretty fast memory.", "tokens": [51214, 5707, 82, 362, 11, 4098, 264, 376, 17, 20925, 575, 1238, 2370, 4675, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08561093756493102, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.01911933161318302}, {"id": 700, "seek": 348300, "start": 3506.0, "end": 3509.0, "text": " It's still going to be way slower than using an Nvidia card.", "tokens": [51514, 467, 311, 920, 516, 281, 312, 636, 14009, 813, 1228, 364, 46284, 2920, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08561093756493102, "compression_ratio": 1.5849056603773586, "no_speech_prob": 0.01911933161318302}, {"id": 701, "seek": 350900, "start": 3509.0, "end": 3517.0, "text": " But it's going to be like you're going to be able to get, you know, like I think 192 gig or something.", "tokens": [50364, 583, 309, 311, 516, 281, 312, 411, 291, 434, 516, 281, 312, 1075, 281, 483, 11, 291, 458, 11, 411, 286, 519, 1294, 17, 8741, 420, 746, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12713250996154032, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.01098470389842987}, {"id": 702, "seek": 350900, "start": 3517.0, "end": 3523.0, "text": " So it's not a terrible option, particularly if you're not training models.", "tokens": [50764, 407, 309, 311, 406, 257, 6237, 3614, 11, 4098, 498, 291, 434, 406, 3097, 5245, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12713250996154032, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.01098470389842987}, {"id": 703, "seek": 350900, "start": 3523.0, "end": 3531.0, "text": " You just want to use other existing trained models.", "tokens": [51064, 509, 445, 528, 281, 764, 661, 6741, 8895, 5245, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12713250996154032, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.01098470389842987}, {"id": 704, "seek": 350900, "start": 3531.0, "end": 3538.0, "text": " So anyway, most people who do this stuff seriously, almost everybody has Nvidia cards.", "tokens": [51464, 407, 4033, 11, 881, 561, 567, 360, 341, 1507, 6638, 11, 1920, 2201, 575, 46284, 5632, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12713250996154032, "compression_ratio": 1.5119617224880382, "no_speech_prob": 0.01098470389842987}, {"id": 705, "seek": 353800, "start": 3539.0, "end": 3544.0, "text": " So then what we're going to be using is a library called Transformers from Hugging Face.", "tokens": [50414, 407, 550, 437, 321, 434, 516, 281, 312, 1228, 307, 257, 6405, 1219, 27938, 433, 490, 46892, 3249, 4047, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10260041348345868, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.003482506377622485}, {"id": 706, "seek": 353800, "start": 3544.0, "end": 3554.0, "text": " And the reason for that is that basically people upload lots of pre-trained models or five trained models up to the Hugging Face Hub.", "tokens": [50664, 400, 264, 1778, 337, 300, 307, 300, 1936, 561, 6580, 3195, 295, 659, 12, 17227, 2001, 5245, 420, 1732, 8895, 5245, 493, 281, 264, 46892, 3249, 4047, 18986, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10260041348345868, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.003482506377622485}, {"id": 707, "seek": 353800, "start": 3554.0, "end": 3560.0, "text": " And in fact, there's even a leaderboard where you can see which are the best models.", "tokens": [51164, 400, 294, 1186, 11, 456, 311, 754, 257, 5263, 3787, 689, 291, 393, 536, 597, 366, 264, 1151, 5245, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10260041348345868, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.003482506377622485}, {"id": 708, "seek": 356000, "start": 3560.0, "end": 3567.0, "text": " Now, this is a really fraught area.", "tokens": [50364, 823, 11, 341, 307, 257, 534, 6600, 1599, 1859, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 709, "seek": 356000, "start": 3567.0, "end": 3570.0, "text": " So at the moment, this one is meant to be the best model.", "tokens": [50714, 407, 412, 264, 1623, 11, 341, 472, 307, 4140, 281, 312, 264, 1151, 2316, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 710, "seek": 356000, "start": 3570.0, "end": 3572.0, "text": " It has the highest average score.", "tokens": [50864, 467, 575, 264, 6343, 4274, 6175, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 711, "seek": 356000, "start": 3572.0, "end": 3574.0, "text": " And maybe it is good.", "tokens": [50964, 400, 1310, 309, 307, 665, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 712, "seek": 356000, "start": 3574.0, "end": 3576.0, "text": " I haven't actually used this particular model.", "tokens": [51064, 286, 2378, 380, 767, 1143, 341, 1729, 2316, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 713, "seek": 356000, "start": 3576.0, "end": 3578.0, "text": " Or maybe it's not.", "tokens": [51164, 1610, 1310, 309, 311, 406, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 714, "seek": 356000, "start": 3578.0, "end": 3589.0, "text": " I actually have no idea because the problem is these metrics are not particularly well aligned with real life usage.", "tokens": [51264, 286, 767, 362, 572, 1558, 570, 264, 1154, 307, 613, 16367, 366, 406, 4098, 731, 17962, 365, 957, 993, 14924, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11191349029541016, "compression_ratio": 1.6195121951219513, "no_speech_prob": 0.034089889377355576}, {"id": 715, "seek": 358900, "start": 3590.0, "end": 3591.0, "text": " For all kinds of reasons.", "tokens": [50414, 1171, 439, 3685, 295, 4112, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09167144848750187, "compression_ratio": 1.7165991902834008, "no_speech_prob": 0.0025503220967948437}, {"id": 716, "seek": 358900, "start": 3591.0, "end": 3601.0, "text": " And also sometimes you get something called leakage, which means that sometimes some of the questions from these things actually leaks through to some of the training sets.", "tokens": [50464, 400, 611, 2171, 291, 483, 746, 1219, 47799, 11, 597, 1355, 300, 2171, 512, 295, 264, 1651, 490, 613, 721, 767, 28885, 807, 281, 512, 295, 264, 3097, 6352, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09167144848750187, "compression_ratio": 1.7165991902834008, "no_speech_prob": 0.0025503220967948437}, {"id": 717, "seek": 358900, "start": 3601.0, "end": 3609.0, "text": " So you can get as a rule of thumb what to use from here, but you should always try things.", "tokens": [50964, 407, 291, 393, 483, 382, 257, 4978, 295, 9298, 437, 281, 764, 490, 510, 11, 457, 291, 820, 1009, 853, 721, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09167144848750187, "compression_ratio": 1.7165991902834008, "no_speech_prob": 0.0025503220967948437}, {"id": 718, "seek": 358900, "start": 3609.0, "end": 3614.0, "text": " And you can also say, you know, these ones are all the 70B here that tells you how big it is.", "tokens": [51364, 400, 291, 393, 611, 584, 11, 291, 458, 11, 613, 2306, 366, 439, 264, 5285, 33, 510, 300, 5112, 291, 577, 955, 309, 307, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09167144848750187, "compression_ratio": 1.7165991902834008, "no_speech_prob": 0.0025503220967948437}, {"id": 719, "seek": 358900, "start": 3614.0, "end": 3618.0, "text": " So this is a 70 billion parameter model.", "tokens": [51614, 407, 341, 307, 257, 5285, 5218, 13075, 2316, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09167144848750187, "compression_ratio": 1.7165991902834008, "no_speech_prob": 0.0025503220967948437}, {"id": 720, "seek": 361800, "start": 3619.0, "end": 3630.0, "text": " So generally speaking for the kinds of GPUs we're talking about, you'll be wanting no bigger than 13B and quite often 7B.", "tokens": [50414, 407, 5101, 4124, 337, 264, 3685, 295, 18407, 82, 321, 434, 1417, 466, 11, 291, 603, 312, 7935, 572, 3801, 813, 3705, 33, 293, 1596, 2049, 1614, 33, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13556713104248047, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.0005883446428924799}, {"id": 721, "seek": 361800, "start": 3630.0, "end": 3637.0, "text": " So let's see if we can find here's a 13B model, for example.", "tokens": [50964, 407, 718, 311, 536, 498, 321, 393, 915, 510, 311, 257, 3705, 33, 2316, 11, 337, 1365, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13556713104248047, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.0005883446428924799}, {"id": 722, "seek": 361800, "start": 3637.0, "end": 3638.0, "text": " All right.", "tokens": [51314, 1057, 558, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13556713104248047, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.0005883446428924799}, {"id": 723, "seek": 361800, "start": 3638.0, "end": 3644.0, "text": " So you can find models to try out from things like this leaderboard.", "tokens": [51364, 407, 291, 393, 915, 5245, 281, 853, 484, 490, 721, 411, 341, 5263, 3787, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13556713104248047, "compression_ratio": 1.4162162162162162, "no_speech_prob": 0.0005883446428924799}, {"id": 724, "seek": 364400, "start": 3644.0, "end": 3658.0, "text": " And there's also a really great leaderboard called FastEval, which I like a lot because it focuses on some more sophisticated evaluation methods such as this chain of thought evaluation method.", "tokens": [50364, 400, 456, 311, 611, 257, 534, 869, 5263, 3787, 1219, 15968, 36, 3337, 11, 597, 286, 411, 257, 688, 570, 309, 16109, 322, 512, 544, 16950, 13344, 7150, 1270, 382, 341, 5021, 295, 1194, 13344, 3170, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13568329516752267, "compression_ratio": 1.497737556561086, "no_speech_prob": 0.010483304969966412}, {"id": 725, "seek": 364400, "start": 3658.0, "end": 3661.0, "text": " So I kind of trust these a little bit more.", "tokens": [51064, 407, 286, 733, 295, 3361, 613, 257, 707, 857, 544, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13568329516752267, "compression_ratio": 1.497737556561086, "no_speech_prob": 0.010483304969966412}, {"id": 726, "seek": 364400, "start": 3661.0, "end": 3670.0, "text": " And these are also, you know, GSM 8K is a difficult math benchmark, big bench hard, so forth.", "tokens": [51214, 400, 613, 366, 611, 11, 291, 458, 11, 460, 26693, 1649, 42, 307, 257, 2252, 5221, 18927, 11, 955, 10638, 1152, 11, 370, 5220, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13568329516752267, "compression_ratio": 1.497737556561086, "no_speech_prob": 0.010483304969966412}, {"id": 727, "seek": 367000, "start": 3670.0, "end": 3671.0, "text": " So, yeah.", "tokens": [50364, 407, 11, 1338, 13, 50414], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 728, "seek": 367000, "start": 3671.0, "end": 3677.0, "text": " So, you know, StableBlog2, WizardMeth, 13B, Dolphin, Lama, 13B, et cetera.", "tokens": [50414, 407, 11, 291, 458, 11, 745, 712, 33, 4987, 17, 11, 37449, 44, 3293, 11, 3705, 33, 11, 18786, 48522, 11, 441, 2404, 11, 3705, 33, 11, 1030, 11458, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 729, "seek": 367000, "start": 3677.0, "end": 3682.0, "text": " These would all be good options.", "tokens": [50714, 1981, 576, 439, 312, 665, 3956, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 730, "seek": 367000, "start": 3682.0, "end": 3683.0, "text": " Yeah.", "tokens": [50964, 865, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 731, "seek": 367000, "start": 3683.0, "end": 3684.0, "text": " So you need to pick a model.", "tokens": [51014, 407, 291, 643, 281, 1888, 257, 2316, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 732, "seek": 367000, "start": 3684.0, "end": 3691.0, "text": " And at the moment, nearly all the good models are based on Meta's Lama 2.", "tokens": [51064, 400, 412, 264, 1623, 11, 6217, 439, 264, 665, 5245, 366, 2361, 322, 6377, 64, 311, 441, 2404, 568, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 733, "seek": 367000, "start": 3691.0, "end": 3694.0, "text": " So when I say based on, what does that mean?", "tokens": [51414, 407, 562, 286, 584, 2361, 322, 11, 437, 775, 300, 914, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2312734006631254, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.0046084546484053135}, {"id": 734, "seek": 369400, "start": 3694.0, "end": 3700.0, "text": " Well, what that means is this model here, Lama 2, 7B.", "tokens": [50364, 1042, 11, 437, 300, 1355, 307, 341, 2316, 510, 11, 441, 2404, 568, 11, 1614, 33, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 735, "seek": 369400, "start": 3700.0, "end": 3702.0, "text": " So it's a Lama model.", "tokens": [50664, 407, 309, 311, 257, 441, 2404, 2316, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 736, "seek": 369400, "start": 3702.0, "end": 3704.0, "text": " That's just the name Meta called it.", "tokens": [50764, 663, 311, 445, 264, 1315, 6377, 64, 1219, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 737, "seek": 369400, "start": 3704.0, "end": 3706.0, "text": " This is their version 2 of Lama.", "tokens": [50864, 639, 307, 641, 3037, 568, 295, 441, 2404, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 738, "seek": 369400, "start": 3706.0, "end": 3708.0, "text": " This is their 7 billion size one.", "tokens": [50964, 639, 307, 641, 1614, 5218, 2744, 472, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 739, "seek": 369400, "start": 3708.0, "end": 3710.0, "text": " It's the smallest one that they make.", "tokens": [51064, 467, 311, 264, 16998, 472, 300, 436, 652, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 740, "seek": 369400, "start": 3710.0, "end": 3713.0, "text": " And specifically, these weights have been created for hugging face.", "tokens": [51164, 400, 4682, 11, 613, 17443, 362, 668, 2942, 337, 41706, 1851, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 741, "seek": 369400, "start": 3713.0, "end": 3716.0, "text": " So you can load it with the hugging face transformers.", "tokens": [51314, 407, 291, 393, 3677, 309, 365, 264, 41706, 1851, 4088, 433, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 742, "seek": 369400, "start": 3716.0, "end": 3720.0, "text": " And this model has only got as far as here.", "tokens": [51464, 400, 341, 2316, 575, 787, 658, 382, 1400, 382, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 743, "seek": 369400, "start": 3720.0, "end": 3722.0, "text": " It's done the language model for pre-training.", "tokens": [51664, 467, 311, 1096, 264, 2856, 2316, 337, 659, 12, 17227, 1760, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09857826232910157, "compression_ratio": 1.68359375, "no_speech_prob": 0.024408778175711632}, {"id": 744, "seek": 372200, "start": 3722.0, "end": 3729.0, "text": " It's done none of the instruction tuning and none of the RLHF.", "tokens": [50364, 467, 311, 1096, 6022, 295, 264, 10951, 15164, 293, 6022, 295, 264, 497, 43, 39, 37, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1407983056430159, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.004753429442644119}, {"id": 745, "seek": 372200, "start": 3729.0, "end": 3735.0, "text": " So we would need to fine tune it to really get it to do much useful.", "tokens": [50714, 407, 321, 576, 643, 281, 2489, 10864, 309, 281, 534, 483, 309, 281, 360, 709, 4420, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1407983056430159, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.004753429442644119}, {"id": 746, "seek": 372200, "start": 3735.0, "end": 3743.0, "text": " So we can just say, OK, create a, automatically create the appropriate model for language model.", "tokens": [51014, 407, 321, 393, 445, 584, 11, 2264, 11, 1884, 257, 11, 6772, 1884, 264, 6854, 2316, 337, 2856, 2316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1407983056430159, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.004753429442644119}, {"id": 747, "seek": 372200, "start": 3743.0, "end": 3750.0, "text": " So causalLM is basically refers to that ULM fifth stage one process or stage two, in fact.", "tokens": [51414, 407, 38755, 43, 44, 307, 1936, 14942, 281, 300, 624, 43, 44, 9266, 3233, 472, 1399, 420, 3233, 732, 11, 294, 1186, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1407983056430159, "compression_ratio": 1.5485436893203883, "no_speech_prob": 0.004753429442644119}, {"id": 748, "seek": 375000, "start": 3750.0, "end": 3753.0, "text": " Create the pre-trained model from this name.", "tokens": [50364, 20248, 264, 659, 12, 17227, 2001, 2316, 490, 341, 1315, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19310004536698505, "compression_ratio": 1.404494382022472, "no_speech_prob": 0.005383371375501156}, {"id": 749, "seek": 375000, "start": 3753.0, "end": 3755.0, "text": " Meta Lama Lama 2, blah, blah, blah.", "tokens": [50514, 6377, 64, 441, 2404, 441, 2404, 568, 11, 12288, 11, 12288, 11, 12288, 13, 50614], "temperature": 0.0, "avg_logprob": -0.19310004536698505, "compression_ratio": 1.404494382022472, "no_speech_prob": 0.005383371375501156}, {"id": 750, "seek": 375000, "start": 3755.0, "end": 3756.0, "text": " OK.", "tokens": [50614, 2264, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19310004536698505, "compression_ratio": 1.404494382022472, "no_speech_prob": 0.005383371375501156}, {"id": 751, "seek": 375000, "start": 3756.0, "end": 3767.0, "text": " Now, generally speaking, we use 16 bit floating point numbers nowadays.", "tokens": [50664, 823, 11, 5101, 4124, 11, 321, 764, 3165, 857, 12607, 935, 3547, 13434, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19310004536698505, "compression_ratio": 1.404494382022472, "no_speech_prob": 0.005383371375501156}, {"id": 752, "seek": 375000, "start": 3767.0, "end": 3772.0, "text": " But if you think about it, 16 bit is two bytes.", "tokens": [51214, 583, 498, 291, 519, 466, 309, 11, 3165, 857, 307, 732, 36088, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19310004536698505, "compression_ratio": 1.404494382022472, "no_speech_prob": 0.005383371375501156}, {"id": 753, "seek": 375000, "start": 3772.0, "end": 3778.0, "text": " So 7B times 2, it's going to be 14 gigabytes.", "tokens": [51464, 407, 1614, 33, 1413, 568, 11, 309, 311, 516, 281, 312, 3499, 42741, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19310004536698505, "compression_ratio": 1.404494382022472, "no_speech_prob": 0.005383371375501156}, {"id": 754, "seek": 377800, "start": 3778.0, "end": 3781.0, "text": " Just to load in the weights.", "tokens": [50364, 1449, 281, 3677, 294, 264, 17443, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 755, "seek": 377800, "start": 3781.0, "end": 3786.0, "text": " So you've got to have a decent model to be able to do that.", "tokens": [50514, 407, 291, 600, 658, 281, 362, 257, 8681, 2316, 281, 312, 1075, 281, 360, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 756, "seek": 377800, "start": 3786.0, "end": 3790.0, "text": " Perhaps surprisingly, you can actually just cast it to 8 bit.", "tokens": [50764, 10517, 17600, 11, 291, 393, 767, 445, 4193, 309, 281, 1649, 857, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 757, "seek": 377800, "start": 3790.0, "end": 3794.0, "text": " And it still works pretty well, thanks to some encode discretization.", "tokens": [50964, 400, 309, 920, 1985, 1238, 731, 11, 3231, 281, 512, 2058, 1429, 25656, 2144, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 758, "seek": 377800, "start": 3794.0, "end": 3797.0, "text": " So let's try that.", "tokens": [51164, 407, 718, 311, 853, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 759, "seek": 377800, "start": 3797.0, "end": 3799.0, "text": " So remember, this is just a language model.", "tokens": [51314, 407, 1604, 11, 341, 307, 445, 257, 2856, 2316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 760, "seek": 377800, "start": 3799.0, "end": 3800.0, "text": " It can only complete sentences.", "tokens": [51414, 467, 393, 787, 3566, 16579, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 761, "seek": 377800, "start": 3800.0, "end": 3803.0, "text": " We can't ask it a question and expect a great answer.", "tokens": [51464, 492, 393, 380, 1029, 309, 257, 1168, 293, 2066, 257, 869, 1867, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 762, "seek": 377800, "start": 3803.0, "end": 3807.0, "text": " So let's just give it the start of a sentence, Jeremy, how it is R.", "tokens": [51614, 407, 718, 311, 445, 976, 309, 264, 722, 295, 257, 8174, 11, 17809, 11, 577, 309, 307, 497, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10634502410888672, "compression_ratio": 1.589090909090909, "no_speech_prob": 0.034081265330314636}, {"id": 763, "seek": 380700, "start": 3807.0, "end": 3809.0, "text": " So we need the right tokenizer.", "tokens": [50364, 407, 321, 643, 264, 558, 14862, 6545, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 764, "seek": 380700, "start": 3809.0, "end": 3812.0, "text": " So this will automatically create the right kind of tokenizer for this model.", "tokens": [50464, 407, 341, 486, 6772, 1884, 264, 558, 733, 295, 14862, 6545, 337, 341, 2316, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 765, "seek": 380700, "start": 3812.0, "end": 3816.0, "text": " We can grab the tokens as PyTorch.", "tokens": [50614, 492, 393, 4444, 264, 22667, 382, 9953, 51, 284, 339, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 766, "seek": 380700, "start": 3816.0, "end": 3821.0, "text": " Here they are.", "tokens": [50814, 1692, 436, 366, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 767, "seek": 380700, "start": 3821.0, "end": 3825.0, "text": " And just to confirm, if we decode them back again,", "tokens": [51064, 400, 445, 281, 9064, 11, 498, 321, 979, 1429, 552, 646, 797, 11, 51264], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 768, "seek": 380700, "start": 3825.0, "end": 3830.0, "text": " we get the original plus a special token to say this is the start of a document.", "tokens": [51264, 321, 483, 264, 3380, 1804, 257, 2121, 14862, 281, 584, 341, 307, 264, 722, 295, 257, 4166, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 769, "seek": 380700, "start": 3830.0, "end": 3833.0, "text": " And so we can now call generate.", "tokens": [51514, 400, 370, 321, 393, 586, 818, 8460, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08368616206671602, "compression_ratio": 1.5502392344497609, "no_speech_prob": 0.00460871122777462}, {"id": 770, "seek": 383300, "start": 3833.0, "end": 3839.0, "text": " So generate will auto regressively.", "tokens": [50364, 407, 8460, 486, 8399, 1121, 735, 3413, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 771, "seek": 383300, "start": 3839.0, "end": 3841.0, "text": " So call the model again and again,", "tokens": [50664, 407, 818, 264, 2316, 797, 293, 797, 11, 50764], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 772, "seek": 383300, "start": 3841.0, "end": 3848.0, "text": " passing its previous result back as the next input.", "tokens": [50764, 8437, 1080, 3894, 1874, 646, 382, 264, 958, 4846, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 773, "seek": 383300, "start": 3848.0, "end": 3851.0, "text": " And I'm just going to do that 15 times.", "tokens": [51114, 400, 286, 478, 445, 516, 281, 360, 300, 2119, 1413, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 774, "seek": 383300, "start": 3851.0, "end": 3854.0, "text": " So you can write this for loop yourself.", "tokens": [51264, 407, 291, 393, 2464, 341, 337, 6367, 1803, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 775, "seek": 383300, "start": 3854.0, "end": 3855.0, "text": " This isn't doing anything fancy.", "tokens": [51414, 639, 1943, 380, 884, 1340, 10247, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 776, "seek": 383300, "start": 3855.0, "end": 3858.0, "text": " In fact, I would recommend writing this yourself", "tokens": [51464, 682, 1186, 11, 286, 576, 2748, 3579, 341, 1803, 51614], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 777, "seek": 383300, "start": 3858.0, "end": 3862.0, "text": " to make sure that you know how, that it all works OK.", "tokens": [51614, 281, 652, 988, 300, 291, 458, 577, 11, 300, 309, 439, 1985, 2264, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0993760088656811, "compression_ratio": 1.486842105263158, "no_speech_prob": 0.002888893708586693}, {"id": 778, "seek": 386200, "start": 3863.0, "end": 3866.0, "text": " We have to put those tokens on the GPU.", "tokens": [50414, 492, 362, 281, 829, 729, 22667, 322, 264, 18407, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 779, "seek": 386200, "start": 3866.0, "end": 3869.0, "text": " And at the end, I recommend putting them back onto the CPU, the result.", "tokens": [50564, 400, 412, 264, 917, 11, 286, 2748, 3372, 552, 646, 3911, 264, 13199, 11, 264, 1874, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 780, "seek": 386200, "start": 3869.0, "end": 3871.0, "text": " And here are the tokens.", "tokens": [50714, 400, 510, 366, 264, 22667, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 781, "seek": 386200, "start": 3871.0, "end": 3872.0, "text": " Not very interesting.", "tokens": [50814, 1726, 588, 1880, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 782, "seek": 386200, "start": 3872.0, "end": 3875.0, "text": " So we have to decode them using the tokenizer.", "tokens": [50864, 407, 321, 362, 281, 979, 1429, 552, 1228, 264, 14862, 6545, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 783, "seek": 386200, "start": 3875.0, "end": 3879.0, "text": " And so the first 25, so first 15 tokens are Jeremy, how it is R.", "tokens": [51014, 400, 370, 264, 700, 3552, 11, 370, 700, 2119, 22667, 366, 17809, 11, 577, 309, 307, 497, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 784, "seek": 386200, "start": 3879.0, "end": 3883.0, "text": " 28 year old Australian AI researcher and entrepreneur.", "tokens": [51214, 7562, 1064, 1331, 13337, 7318, 21751, 293, 14307, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 785, "seek": 386200, "start": 3883.0, "end": 3887.0, "text": " OK, well, 28 years old is not exactly correct, but we'll call it close enough.", "tokens": [51414, 2264, 11, 731, 11, 7562, 924, 1331, 307, 406, 2293, 3006, 11, 457, 321, 603, 818, 309, 1998, 1547, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 786, "seek": 386200, "start": 3887.0, "end": 3888.0, "text": " I like that.", "tokens": [51614, 286, 411, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 787, "seek": 386200, "start": 3888.0, "end": 3890.0, "text": " Thank you very much.", "tokens": [51664, 1044, 291, 588, 709, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1243459446223702, "compression_ratio": 1.5812274368231047, "no_speech_prob": 0.005382923409342766}, {"id": 788, "seek": 389000, "start": 3890.0, "end": 3892.0, "text": " Lama 7B.", "tokens": [50364, 441, 2404, 1614, 33, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 789, "seek": 389000, "start": 3892.0, "end": 3897.0, "text": " So OK, so we've got a language model completing sentences.", "tokens": [50464, 407, 2264, 11, 370, 321, 600, 658, 257, 2856, 2316, 19472, 16579, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 790, "seek": 389000, "start": 3897.0, "end": 3902.0, "text": " It took one and a third seconds.", "tokens": [50714, 467, 1890, 472, 293, 257, 2636, 3949, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 791, "seek": 389000, "start": 3902.0, "end": 3906.0, "text": " And that's a bit slower than it could be because we used 8 bit.", "tokens": [50964, 400, 300, 311, 257, 857, 14009, 813, 309, 727, 312, 570, 321, 1143, 1649, 857, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 792, "seek": 389000, "start": 3906.0, "end": 3910.0, "text": " If we use 16 bit, there's a special thing called B float 16,", "tokens": [51164, 759, 321, 764, 3165, 857, 11, 456, 311, 257, 2121, 551, 1219, 363, 15706, 3165, 11, 51364], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 793, "seek": 389000, "start": 3910.0, "end": 3914.0, "text": " which is a really great 16 bit floating point format", "tokens": [51364, 597, 307, 257, 534, 869, 3165, 857, 12607, 935, 7877, 51564], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 794, "seek": 389000, "start": 3914.0, "end": 3919.0, "text": " that's usable on any somewhat recent GPU, Nvidia GPU.", "tokens": [51564, 300, 311, 29975, 322, 604, 8344, 5162, 18407, 11, 46284, 18407, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15058806538581848, "compression_ratio": 1.4755555555555555, "no_speech_prob": 0.011153778992593288}, {"id": 795, "seek": 391900, "start": 3919.0, "end": 3924.0, "text": " If we use it, it's going to take twice as much RAM as we discussed.", "tokens": [50364, 759, 321, 764, 309, 11, 309, 311, 516, 281, 747, 6091, 382, 709, 14561, 382, 321, 7152, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11896267391386486, "compression_ratio": 1.3942307692307692, "no_speech_prob": 0.0003919895098078996}, {"id": 796, "seek": 391900, "start": 3924.0, "end": 3926.0, "text": " But look at the time.", "tokens": [50614, 583, 574, 412, 264, 565, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11896267391386486, "compression_ratio": 1.3942307692307692, "no_speech_prob": 0.0003919895098078996}, {"id": 797, "seek": 391900, "start": 3926.0, "end": 3931.0, "text": " It's come down to 390 milliseconds.", "tokens": [50714, 467, 311, 808, 760, 281, 805, 7771, 34184, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11896267391386486, "compression_ratio": 1.3942307692307692, "no_speech_prob": 0.0003919895098078996}, {"id": 798, "seek": 391900, "start": 3931.0, "end": 3935.0, "text": " Now, there is a better option still than even that.", "tokens": [50964, 823, 11, 456, 307, 257, 1101, 3614, 920, 813, 754, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11896267391386486, "compression_ratio": 1.3942307692307692, "no_speech_prob": 0.0003919895098078996}, {"id": 799, "seek": 391900, "start": 3935.0, "end": 3939.0, "text": " There's a different kind of discretization called GPTQ,", "tokens": [51164, 821, 311, 257, 819, 733, 295, 25656, 2144, 1219, 26039, 51, 48, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11896267391386486, "compression_ratio": 1.3942307692307692, "no_speech_prob": 0.0003919895098078996}, {"id": 800, "seek": 391900, "start": 3939.0, "end": 3946.0, "text": " where a model is carefully optimized to work with 4 or 8", "tokens": [51364, 689, 257, 2316, 307, 7500, 26941, 281, 589, 365, 1017, 420, 1649, 51714], "temperature": 0.0, "avg_logprob": -0.11896267391386486, "compression_ratio": 1.3942307692307692, "no_speech_prob": 0.0003919895098078996}, {"id": 801, "seek": 394600, "start": 3946.0, "end": 3951.0, "text": " or other lower precision data automatically.", "tokens": [50364, 420, 661, 3126, 18356, 1412, 6772, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11759967020113174, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.006287227850407362}, {"id": 802, "seek": 394600, "start": 3951.0, "end": 3957.0, "text": " And this particular person known as the bloke", "tokens": [50614, 400, 341, 1729, 954, 2570, 382, 264, 1749, 330, 50914], "temperature": 0.0, "avg_logprob": -0.11759967020113174, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.006287227850407362}, {"id": 803, "seek": 394600, "start": 3957.0, "end": 3962.0, "text": " is fantastic at taking popular models, running that optimization process,", "tokens": [50914, 307, 5456, 412, 1940, 3743, 5245, 11, 2614, 300, 19618, 1399, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11759967020113174, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.006287227850407362}, {"id": 804, "seek": 394600, "start": 3962.0, "end": 3967.0, "text": " and then uploading the results back to Hackingface.", "tokens": [51164, 293, 550, 27301, 264, 3542, 646, 281, 389, 14134, 2868, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11759967020113174, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.006287227850407362}, {"id": 805, "seek": 394600, "start": 3967.0, "end": 3971.0, "text": " So we can use this GPTQ version.", "tokens": [51414, 407, 321, 393, 764, 341, 26039, 51, 48, 3037, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11759967020113174, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.006287227850407362}, {"id": 806, "seek": 394600, "start": 3971.0, "end": 3974.0, "text": " And internally, this is actually going to use,", "tokens": [51614, 400, 19501, 11, 341, 307, 767, 516, 281, 764, 11, 51764], "temperature": 0.0, "avg_logprob": -0.11759967020113174, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.006287227850407362}, {"id": 807, "seek": 397400, "start": 3974.0, "end": 3976.0, "text": " I'm not sure exactly how many bits this particular one is.", "tokens": [50364, 286, 478, 406, 988, 2293, 577, 867, 9239, 341, 1729, 472, 307, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 808, "seek": 397400, "start": 3976.0, "end": 3978.0, "text": " I think it's probably going to be four bits,", "tokens": [50464, 286, 519, 309, 311, 1391, 516, 281, 312, 1451, 9239, 11, 50564], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 809, "seek": 397400, "start": 3978.0, "end": 3981.0, "text": " but it's going to be much more optimized.", "tokens": [50564, 457, 309, 311, 516, 281, 312, 709, 544, 26941, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 810, "seek": 397400, "start": 3981.0, "end": 3984.0, "text": " And so look at this, 270 milliseconds.", "tokens": [50714, 400, 370, 574, 412, 341, 11, 40774, 34184, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 811, "seek": 397400, "start": 3984.0, "end": 3989.0, "text": " It's actually faster than 16 bit.", "tokens": [50864, 467, 311, 767, 4663, 813, 3165, 857, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 812, "seek": 397400, "start": 3989.0, "end": 3994.0, "text": " Even though internally, it's actually casting it up to 16 bit each layer to do it.", "tokens": [51114, 2754, 1673, 19501, 11, 309, 311, 767, 17301, 309, 493, 281, 3165, 857, 1184, 4583, 281, 360, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 813, "seek": 397400, "start": 3994.0, "end": 3998.0, "text": " And that's because there's a lot less memory moving around.", "tokens": [51364, 400, 300, 311, 570, 456, 311, 257, 688, 1570, 4675, 2684, 926, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 814, "seek": 397400, "start": 3998.0, "end": 4003.0, "text": " And to confirm, in fact, what we could even do now is we could go up to 13D.", "tokens": [51564, 400, 281, 9064, 11, 294, 1186, 11, 437, 321, 727, 754, 360, 586, 307, 321, 727, 352, 493, 281, 3705, 35, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11574221820366092, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.010648872703313828}, {"id": 815, "seek": 400300, "start": 4003.0, "end": 4004.0, "text": " Easy.", "tokens": [50364, 16002, 13, 50414], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 816, "seek": 400300, "start": 4004.0, "end": 4007.0, "text": " And in fact, it's still faster than the 7B,", "tokens": [50414, 400, 294, 1186, 11, 309, 311, 920, 4663, 813, 264, 1614, 33, 11, 50564], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 817, "seek": 400300, "start": 4007.0, "end": 4009.0, "text": " now that we're using the GPTQ version.", "tokens": [50564, 586, 300, 321, 434, 1228, 264, 26039, 51, 48, 3037, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 818, "seek": 400300, "start": 4009.0, "end": 4012.0, "text": " So this is a really helpful tip.", "tokens": [50664, 407, 341, 307, 257, 534, 4961, 4125, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 819, "seek": 400300, "start": 4012.0, "end": 4015.0, "text": " So let's put all those things together, the tokenizer,", "tokens": [50814, 407, 718, 311, 829, 439, 729, 721, 1214, 11, 264, 14862, 6545, 11, 50964], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 820, "seek": 400300, "start": 4015.0, "end": 4018.0, "text": " the generate, the batch decode, we'll call this gen for generate.", "tokens": [50964, 264, 8460, 11, 264, 15245, 979, 1429, 11, 321, 603, 818, 341, 1049, 337, 8460, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 821, "seek": 400300, "start": 4018.0, "end": 4023.0, "text": " And so we can now use the 13B GPTQ model.", "tokens": [51114, 400, 370, 321, 393, 586, 764, 264, 3705, 33, 26039, 51, 48, 2316, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 822, "seek": 400300, "start": 4023.0, "end": 4028.0, "text": " And let's try this Jeremy Howard is a, so it's got to 50 tokens so fast.", "tokens": [51364, 400, 718, 311, 853, 341, 17809, 17626, 307, 257, 11, 370, 309, 311, 658, 281, 2625, 22667, 370, 2370, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12377092941947605, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.004903554450720549}, {"id": 823, "seek": 402800, "start": 4028.0, "end": 4031.0, "text": " 16 year veteran of Silicon Valley, co-founder of Kaggle,", "tokens": [50364, 3165, 1064, 18324, 295, 25351, 10666, 11, 598, 12, 33348, 295, 48751, 22631, 11, 50514], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 824, "seek": 402800, "start": 4031.0, "end": 4033.0, "text": " a Marketplace predictive model.", "tokens": [50514, 257, 15596, 6742, 35521, 2316, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 825, "seek": 402800, "start": 4033.0, "end": 4036.0, "text": " His company Kaggle.com has become to data science competitions.", "tokens": [50614, 2812, 2237, 48751, 22631, 13, 1112, 575, 1813, 281, 1412, 3497, 26185, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 826, "seek": 402800, "start": 4036.0, "end": 4039.0, "text": " What I don't know what I was going to say, but anyway, it's on the right track.", "tokens": [50764, 708, 286, 500, 380, 458, 437, 286, 390, 516, 281, 584, 11, 457, 4033, 11, 309, 311, 322, 264, 558, 2837, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 827, "seek": 402800, "start": 4039.0, "end": 4045.0, "text": " I was actually there for 10 years, not 16, but that's all right.", "tokens": [50914, 286, 390, 767, 456, 337, 1266, 924, 11, 406, 3165, 11, 457, 300, 311, 439, 558, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 828, "seek": 402800, "start": 4045.0, "end": 4046.0, "text": " Okay.", "tokens": [51214, 1033, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 829, "seek": 402800, "start": 4046.0, "end": 4049.0, "text": " So this is looking good.", "tokens": [51264, 407, 341, 307, 1237, 665, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 830, "seek": 402800, "start": 4049.0, "end": 4054.0, "text": " But probably a lot of the time we're going to be interested in, you know,", "tokens": [51414, 583, 1391, 257, 688, 295, 264, 565, 321, 434, 516, 281, 312, 3102, 294, 11, 291, 458, 11, 51664], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 831, "seek": 402800, "start": 4054.0, "end": 4056.0, "text": " asking questions or using instructions.", "tokens": [51664, 3365, 1651, 420, 1228, 9415, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13899641652261058, "compression_ratio": 1.550877192982456, "no_speech_prob": 0.01798304170370102}, {"id": 832, "seek": 405600, "start": 4056.0, "end": 4060.0, "text": " So stability AI has this nice series called stable beluga,", "tokens": [50364, 407, 11826, 7318, 575, 341, 1481, 2638, 1219, 8351, 989, 19364, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 833, "seek": 405600, "start": 4060.0, "end": 4064.0, "text": " including a small 7B one and other bigger ones.", "tokens": [50564, 3009, 257, 1359, 1614, 33, 472, 293, 661, 3801, 2306, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 834, "seek": 405600, "start": 4064.0, "end": 4068.0, "text": " And these are all based on Lama two, but these have been instruction tuned.", "tokens": [50764, 400, 613, 366, 439, 2361, 322, 441, 2404, 732, 11, 457, 613, 362, 668, 10951, 10870, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 835, "seek": 405600, "start": 4068.0, "end": 4070.0, "text": " They might even have been RLHDF.", "tokens": [50964, 814, 1062, 754, 362, 668, 497, 43, 22859, 37, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 836, "seek": 405600, "start": 4070.0, "end": 4072.0, "text": " I can't remember now.", "tokens": [51064, 286, 393, 380, 1604, 586, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 837, "seek": 405600, "start": 4072.0, "end": 4076.0, "text": " So we can create a stable beluga model.", "tokens": [51164, 407, 321, 393, 1884, 257, 8351, 989, 19364, 2316, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 838, "seek": 405600, "start": 4076.0, "end": 4084.0, "text": " And now something really important that I keep forgetting everybody keeps forgetting is", "tokens": [51364, 400, 586, 746, 534, 1021, 300, 286, 1066, 25428, 2201, 5965, 25428, 307, 51764], "temperature": 0.0, "avg_logprob": -0.1281169991744192, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.014057984575629234}, {"id": 839, "seek": 408400, "start": 4084.0, "end": 4092.0, "text": " during the instruction tuning process,", "tokens": [50364, 1830, 264, 10951, 15164, 1399, 11, 50764], "temperature": 0.0, "avg_logprob": -0.15646883845329285, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.011328431777656078}, {"id": 840, "seek": 408400, "start": 4092.0, "end": 4104.0, "text": " during the instruction tuning process, the instructions that are passed in actually are,", "tokens": [50764, 1830, 264, 10951, 15164, 1399, 11, 264, 9415, 300, 366, 4678, 294, 767, 366, 11, 51364], "temperature": 0.0, "avg_logprob": -0.15646883845329285, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.011328431777656078}, {"id": 841, "seek": 408400, "start": 4104.0, "end": 4106.0, "text": " they don't just appear like this.", "tokens": [51364, 436, 500, 380, 445, 4204, 411, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15646883845329285, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.011328431777656078}, {"id": 842, "seek": 408400, "start": 4106.0, "end": 4109.0, "text": " They actually always are in a particular format.", "tokens": [51464, 814, 767, 1009, 366, 294, 257, 1729, 7877, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15646883845329285, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.011328431777656078}, {"id": 843, "seek": 410900, "start": 4109.0, "end": 4115.0, "text": " And the format, believe it or not, changes quite a bit from fine-tuned to fine-tuned.", "tokens": [50364, 400, 264, 7877, 11, 1697, 309, 420, 406, 11, 2962, 1596, 257, 857, 490, 2489, 12, 83, 43703, 281, 2489, 12, 83, 43703, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09639844440278553, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.04883979260921478}, {"id": 844, "seek": 410900, "start": 4115.0, "end": 4127.0, "text": " And so you have to go to the webpage for the model and scroll down to find out what the prompt format is.", "tokens": [50664, 400, 370, 291, 362, 281, 352, 281, 264, 37852, 337, 264, 2316, 293, 11369, 760, 281, 915, 484, 437, 264, 12391, 7877, 307, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09639844440278553, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.04883979260921478}, {"id": 845, "seek": 410900, "start": 4127.0, "end": 4129.0, "text": " So here's the prompt format.", "tokens": [51264, 407, 510, 311, 264, 12391, 7877, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09639844440278553, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.04883979260921478}, {"id": 846, "seek": 410900, "start": 4129.0, "end": 4138.0, "text": " So I generally just copy it and then I paste it into Python, which I did here.", "tokens": [51364, 407, 286, 5101, 445, 5055, 309, 293, 550, 286, 9163, 309, 666, 15329, 11, 597, 286, 630, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09639844440278553, "compression_ratio": 1.5736842105263158, "no_speech_prob": 0.04883979260921478}, {"id": 847, "seek": 413800, "start": 4138.0, "end": 4148.0, "text": " And created a function called make prompt that used the exact same format that it said to you use.", "tokens": [50364, 400, 2942, 257, 2445, 1219, 652, 12391, 300, 1143, 264, 1900, 912, 7877, 300, 309, 848, 281, 291, 764, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09762205103392242, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.006901892367750406}, {"id": 848, "seek": 413800, "start": 4148.0, "end": 4153.0, "text": " And so now if I want to say who is Jeremy Howard, I can call Jen again.", "tokens": [50864, 400, 370, 586, 498, 286, 528, 281, 584, 567, 307, 17809, 17626, 11, 286, 393, 818, 9228, 797, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09762205103392242, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.006901892367750406}, {"id": 849, "seek": 413800, "start": 4153.0, "end": 4160.0, "text": " That was that function I created up here and make the correct prompt from that question.", "tokens": [51114, 663, 390, 300, 2445, 286, 2942, 493, 510, 293, 652, 264, 3006, 12391, 490, 300, 1168, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09762205103392242, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.006901892367750406}, {"id": 850, "seek": 413800, "start": 4160.0, "end": 4162.0, "text": " And then it returns back.", "tokens": [51464, 400, 550, 309, 11247, 646, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09762205103392242, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.006901892367750406}, {"id": 851, "seek": 413800, "start": 4162.0, "end": 4165.0, "text": " Okay, so you can see here all this prefix.", "tokens": [51564, 1033, 11, 370, 291, 393, 536, 510, 439, 341, 46969, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09762205103392242, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.006901892367750406}, {"id": 852, "seek": 413800, "start": 4165.0, "end": 4167.0, "text": " This is a system instruction.", "tokens": [51714, 639, 307, 257, 1185, 10951, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09762205103392242, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.006901892367750406}, {"id": 853, "seek": 416700, "start": 4167.0, "end": 4169.0, "text": " This is my question.", "tokens": [50364, 639, 307, 452, 1168, 13, 50464], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 854, "seek": 416700, "start": 4169.0, "end": 4177.0, "text": " And then the assistant says, Jeremy Howard's an Australian entrepreneur, computer scientist, co-founder of machine learning and deep learning company, faster than AI.", "tokens": [50464, 400, 550, 264, 10994, 1619, 11, 17809, 17626, 311, 364, 13337, 14307, 11, 3820, 12662, 11, 598, 12, 33348, 295, 3479, 2539, 293, 2452, 2539, 2237, 11, 4663, 813, 7318, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 855, "seek": 416700, "start": 4177.0, "end": 4179.0, "text": " Okay, so this one's actually all correct.", "tokens": [50864, 1033, 11, 370, 341, 472, 311, 767, 439, 3006, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 856, "seek": 416700, "start": 4179.0, "end": 4186.0, "text": " So it's getting better by using an actual instruction tune model.", "tokens": [50964, 407, 309, 311, 1242, 1101, 538, 1228, 364, 3539, 10951, 10864, 2316, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 857, "seek": 416700, "start": 4186.0, "end": 4188.0, "text": " And so we could then start to scale up.", "tokens": [51314, 400, 370, 321, 727, 550, 722, 281, 4373, 493, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 858, "seek": 416700, "start": 4188.0, "end": 4190.0, "text": " So we could use the 13b.", "tokens": [51414, 407, 321, 727, 764, 264, 3705, 65, 13, 51514], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 859, "seek": 416700, "start": 4190.0, "end": 4195.0, "text": " And in fact, we looked briefly at this open orca data set earlier.", "tokens": [51514, 400, 294, 1186, 11, 321, 2956, 10515, 412, 341, 1269, 420, 496, 1412, 992, 3071, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17982496909045298, "compression_ratio": 1.5932835820895523, "no_speech_prob": 0.00232272082939744}, {"id": 860, "seek": 419500, "start": 4195.0, "end": 4204.0, "text": " So llama two has been fine tuned on open orca and then also fine tuned on another really great data set called platypus.", "tokens": [50364, 407, 23272, 732, 575, 668, 2489, 10870, 322, 1269, 420, 496, 293, 550, 611, 2489, 10870, 322, 1071, 534, 869, 1412, 992, 1219, 3403, 88, 31624, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 861, "seek": 419500, "start": 4204.0, "end": 4209.0, "text": " And so the whole thing together is the open orca platypus.", "tokens": [50814, 400, 370, 264, 1379, 551, 1214, 307, 264, 1269, 420, 496, 3403, 88, 31624, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 862, "seek": 419500, "start": 4209.0, "end": 4211.0, "text": " And then this is going to be the bigger 13b.", "tokens": [51064, 400, 550, 341, 307, 516, 281, 312, 264, 3801, 3705, 65, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 863, "seek": 419500, "start": 4211.0, "end": 4215.0, "text": " GPTQ means it's going to be quantized.", "tokens": [51164, 26039, 51, 48, 1355, 309, 311, 516, 281, 312, 4426, 1602, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 864, "seek": 419500, "start": 4215.0, "end": 4218.0, "text": " So that's got a different format.", "tokens": [51364, 407, 300, 311, 658, 257, 819, 7877, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 865, "seek": 419500, "start": 4218.0, "end": 4220.0, "text": " Okay, a different prompt format.", "tokens": [51514, 1033, 11, 257, 819, 12391, 7877, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 866, "seek": 419500, "start": 4220.0, "end": 4224.0, "text": " So again, we can scroll down and see what the prompt format is.", "tokens": [51614, 407, 797, 11, 321, 393, 11369, 760, 293, 536, 437, 264, 12391, 7877, 307, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09945671898978097, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.02062859572470188}, {"id": 867, "seek": 422400, "start": 4224.0, "end": 4226.0, "text": " There it is.", "tokens": [50364, 821, 309, 307, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 868, "seek": 422400, "start": 4226.0, "end": 4227.0, "text": " Okay.", "tokens": [50464, 1033, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 869, "seek": 422400, "start": 4227.0, "end": 4237.0, "text": " And so we can create a function called make open orca prompt that has that prompt format.", "tokens": [50514, 400, 370, 321, 393, 1884, 257, 2445, 1219, 652, 1269, 420, 496, 12391, 300, 575, 300, 12391, 7877, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 870, "seek": 422400, "start": 4237.0, "end": 4240.0, "text": " And so now we can say, okay, who is Jeremy Howard?", "tokens": [51014, 400, 370, 586, 321, 393, 584, 11, 1392, 11, 567, 307, 17809, 17626, 30, 51164], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 871, "seek": 422400, "start": 4240.0, "end": 4242.0, "text": " And now I've become British, which is kind of true.", "tokens": [51164, 400, 586, 286, 600, 1813, 6221, 11, 597, 307, 733, 295, 2074, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 872, "seek": 422400, "start": 4242.0, "end": 4245.0, "text": " I was born in England, but I moved to Australia.", "tokens": [51264, 286, 390, 4232, 294, 8196, 11, 457, 286, 4259, 281, 7060, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 873, "seek": 422400, "start": 4245.0, "end": 4247.0, "text": " Professional poker player.", "tokens": [51414, 30011, 36863, 4256, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 874, "seek": 422400, "start": 4247.0, "end": 4248.0, "text": " Definitely not that.", "tokens": [51514, 12151, 406, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 875, "seek": 422400, "start": 4248.0, "end": 4253.0, "text": " Co-founding several companies, including faster AI, also Kaggle.", "tokens": [51564, 3066, 12, 17493, 278, 2940, 3431, 11, 3009, 4663, 7318, 11, 611, 48751, 22631, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11068869082727165, "compression_ratio": 1.468503937007874, "no_speech_prob": 0.018256856128573418}, {"id": 876, "seek": 425300, "start": 4253.0, "end": 4254.0, "text": " Okay.", "tokens": [50364, 1033, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 877, "seek": 425300, "start": 4254.0, "end": 4255.0, "text": " So not bad.", "tokens": [50414, 407, 406, 1578, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 878, "seek": 425300, "start": 4255.0, "end": 4259.0, "text": " It was acquired by Google with 2017, probably something around there.", "tokens": [50464, 467, 390, 17554, 538, 3329, 365, 6591, 11, 1391, 746, 926, 456, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 879, "seek": 425300, "start": 4259.0, "end": 4260.0, "text": " Okay.", "tokens": [50664, 1033, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 880, "seek": 425300, "start": 4260.0, "end": 4269.0, "text": " So you can see we've got our own models giving us some pretty good information.", "tokens": [50714, 407, 291, 393, 536, 321, 600, 658, 527, 1065, 5245, 2902, 505, 512, 1238, 665, 1589, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 881, "seek": 425300, "start": 4269.0, "end": 4271.0, "text": " How do we make it even better?", "tokens": [51164, 1012, 360, 321, 652, 309, 754, 1101, 30, 51264], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 882, "seek": 425300, "start": 4271.0, "end": 4282.0, "text": " You know, because it's still hallucinating, you know, and, you know, llama two, I think,", "tokens": [51264, 509, 458, 11, 570, 309, 311, 920, 35212, 8205, 11, 291, 458, 11, 293, 11, 291, 458, 11, 23272, 732, 11, 286, 519, 11, 51814], "temperature": 0.0, "avg_logprob": -0.1371444436006768, "compression_ratio": 1.4223300970873787, "no_speech_prob": 0.012236201204359531}, {"id": 883, "seek": 428200, "start": 4282.0, "end": 4290.0, "text": " has been trained with more up to date information than GPT for it doesn't have the September 2021 cutoff.", "tokens": [50364, 575, 668, 8895, 365, 544, 493, 281, 4002, 1589, 813, 26039, 51, 337, 309, 1177, 380, 362, 264, 7216, 7201, 1723, 4506, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0856413600420711, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.02674126997590065}, {"id": 884, "seek": 428200, "start": 4290.0, "end": 4293.0, "text": " But it, you know, it's still got a knowledge cutoff.", "tokens": [50764, 583, 309, 11, 291, 458, 11, 309, 311, 920, 658, 257, 3601, 1723, 4506, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0856413600420711, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.02674126997590065}, {"id": 885, "seek": 428200, "start": 4293.0, "end": 4296.0, "text": " You know, we would like to be able to use the most up to date information.", "tokens": [50914, 509, 458, 11, 321, 576, 411, 281, 312, 1075, 281, 764, 264, 881, 493, 281, 4002, 1589, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0856413600420711, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.02674126997590065}, {"id": 886, "seek": 428200, "start": 4296.0, "end": 4301.0, "text": " We want to use the right information to answer these questions as well as possible.", "tokens": [51064, 492, 528, 281, 764, 264, 558, 1589, 281, 1867, 613, 1651, 382, 731, 382, 1944, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0856413600420711, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.02674126997590065}, {"id": 887, "seek": 428200, "start": 4301.0, "end": 4306.0, "text": " So to do this, we can use something called retrieval augmented generation.", "tokens": [51314, 407, 281, 360, 341, 11, 321, 393, 764, 746, 1219, 19817, 3337, 36155, 5125, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0856413600420711, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.02674126997590065}, {"id": 888, "seek": 430600, "start": 4306.0, "end": 4317.0, "text": " So what happens with retrieval augmented generation is when we take the question we've been asked, like, who is Jeremy Houd?", "tokens": [50364, 407, 437, 2314, 365, 19817, 3337, 36155, 5125, 307, 562, 321, 747, 264, 1168, 321, 600, 668, 2351, 11, 411, 11, 567, 307, 17809, 389, 1861, 30, 50914], "temperature": 0.0, "avg_logprob": -0.10514538053055884, "compression_ratio": 1.4472361809045227, "no_speech_prob": 0.03112834133207798}, {"id": 889, "seek": 430600, "start": 4317.0, "end": 4327.0, "text": " And then we say, okay, let's try and search for documents that may help us answer that question.", "tokens": [50914, 400, 550, 321, 584, 11, 1392, 11, 718, 311, 853, 293, 3164, 337, 8512, 300, 815, 854, 505, 1867, 300, 1168, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10514538053055884, "compression_ratio": 1.4472361809045227, "no_speech_prob": 0.03112834133207798}, {"id": 890, "seek": 430600, "start": 4327.0, "end": 4332.0, "text": " So obviously we would expect, for example, Wikipedia to be useful.", "tokens": [51414, 407, 2745, 321, 576, 2066, 11, 337, 1365, 11, 28999, 281, 312, 4420, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10514538053055884, "compression_ratio": 1.4472361809045227, "no_speech_prob": 0.03112834133207798}, {"id": 891, "seek": 433200, "start": 4332.0, "end": 4349.0, "text": " And then what we do is we say, okay, with that information, let's now see if we can tell the language model about what we found and then have it answer the question.", "tokens": [50364, 400, 550, 437, 321, 360, 307, 321, 584, 11, 1392, 11, 365, 300, 1589, 11, 718, 311, 586, 536, 498, 321, 393, 980, 264, 2856, 2316, 466, 437, 321, 1352, 293, 550, 362, 309, 1867, 264, 1168, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07419972265920331, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.01639830693602562}, {"id": 892, "seek": 433200, "start": 4349.0, "end": 4350.0, "text": " So let me show you.", "tokens": [51214, 407, 718, 385, 855, 291, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07419972265920331, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.01639830693602562}, {"id": 893, "seek": 433200, "start": 4350.0, "end": 4356.0, "text": " So let's actually grab a Wikipedia Python package.", "tokens": [51264, 407, 718, 311, 767, 4444, 257, 28999, 15329, 7372, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07419972265920331, "compression_ratio": 1.4303030303030304, "no_speech_prob": 0.01639830693602562}, {"id": 894, "seek": 435600, "start": 4356.0, "end": 4362.0, "text": " We will scrape Wikipedia, grabbing the Jeremy Howard webpage.", "tokens": [50364, 492, 486, 32827, 28999, 11, 23771, 264, 17809, 17626, 37852, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 895, "seek": 435600, "start": 4362.0, "end": 4368.0, "text": " And so here's the start of the Jeremy Howard Wikipedia page.", "tokens": [50664, 400, 370, 510, 311, 264, 722, 295, 264, 17809, 17626, 28999, 3028, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 896, "seek": 435600, "start": 4368.0, "end": 4371.0, "text": " It has 613 words.", "tokens": [50964, 467, 575, 1386, 7668, 2283, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 897, "seek": 435600, "start": 4371.0, "end": 4377.0, "text": " Now, generally speaking, these open source models will have a context length of about 2000 or 4000.", "tokens": [51114, 823, 11, 5101, 4124, 11, 613, 1269, 4009, 5245, 486, 362, 257, 4319, 4641, 295, 466, 8132, 420, 31104, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 898, "seek": 435600, "start": 4377.0, "end": 4380.0, "text": " So the context length is how many tokens can it handle.", "tokens": [51414, 407, 264, 4319, 4641, 307, 577, 867, 22667, 393, 309, 4813, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 899, "seek": 435600, "start": 4380.0, "end": 4381.0, "text": " So that's fine.", "tokens": [51564, 407, 300, 311, 2489, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 900, "seek": 435600, "start": 4381.0, "end": 4383.0, "text": " It'll be able to handle this webpage.", "tokens": [51614, 467, 603, 312, 1075, 281, 4813, 341, 37852, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09337338157322096, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.09003300219774246}, {"id": 901, "seek": 438300, "start": 4383.0, "end": 4386.0, "text": " And what we're going to do is we're going to ask it the question.", "tokens": [50364, 400, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 1029, 309, 264, 1168, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 902, "seek": 438300, "start": 4386.0, "end": 4389.0, "text": " So we're going to have here question and with a question.", "tokens": [50514, 407, 321, 434, 516, 281, 362, 510, 1168, 293, 365, 257, 1168, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 903, "seek": 438300, "start": 4389.0, "end": 4392.0, "text": " But before that, we're going to say, answer the question with the help of the context.", "tokens": [50664, 583, 949, 300, 11, 321, 434, 516, 281, 584, 11, 1867, 264, 1168, 365, 264, 854, 295, 264, 4319, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 904, "seek": 438300, "start": 4392.0, "end": 4394.0, "text": " We're going to provide this to the language model.", "tokens": [50814, 492, 434, 516, 281, 2893, 341, 281, 264, 2856, 2316, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 905, "seek": 438300, "start": 4394.0, "end": 4397.0, "text": " And we're going to say context and they're going to have the whole webpage.", "tokens": [50914, 400, 321, 434, 516, 281, 584, 4319, 293, 436, 434, 516, 281, 362, 264, 1379, 37852, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 906, "seek": 438300, "start": 4397.0, "end": 4400.0, "text": " So suddenly now our question is going to be a lot bigger.", "tokens": [51064, 407, 5800, 586, 527, 1168, 307, 516, 281, 312, 257, 688, 3801, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 907, "seek": 438300, "start": 4400.0, "end": 4403.0, "text": " They're prompt.", "tokens": [51214, 814, 434, 12391, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 908, "seek": 438300, "start": 4403.0, "end": 4404.0, "text": " Right.", "tokens": [51364, 1779, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11800551207169242, "compression_ratio": 1.9624413145539905, "no_speech_prob": 0.04081029072403908}, {"id": 909, "seek": 440400, "start": 4404.0, "end": 4414.0, "text": " So our prompt now contains the entire webpage, the whole Wikipedia page, followed by a question.", "tokens": [50364, 407, 527, 12391, 586, 8306, 264, 2302, 37852, 11, 264, 1379, 28999, 3028, 11, 6263, 538, 257, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20172079219374545, "compression_ratio": 1.4572649572649572, "no_speech_prob": 0.10960862040519714}, {"id": 910, "seek": 440400, "start": 4414.0, "end": 4420.0, "text": " And so now it says Jeremy Howard is an Australian data scientist,", "tokens": [50864, 400, 370, 586, 309, 1619, 17809, 17626, 307, 364, 13337, 1412, 12662, 11, 51164], "temperature": 0.0, "avg_logprob": -0.20172079219374545, "compression_ratio": 1.4572649572649572, "no_speech_prob": 0.10960862040519714}, {"id": 911, "seek": 440400, "start": 4420.0, "end": 4423.0, "text": " entrepreneur, an educator, known for his work in deep learning,", "tokens": [51164, 14307, 11, 364, 31237, 11, 2570, 337, 702, 589, 294, 2452, 2539, 11, 51314], "temperature": 0.0, "avg_logprob": -0.20172079219374545, "compression_ratio": 1.4572649572649572, "no_speech_prob": 0.10960862040519714}, {"id": 912, "seek": 440400, "start": 4423.0, "end": 4428.0, "text": " co-founder of FastAI, teaches courses, develops software, conducts research.", "tokens": [51314, 598, 12, 33348, 295, 15968, 48698, 11, 16876, 7712, 11, 25453, 4722, 11, 6018, 82, 2132, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20172079219374545, "compression_ratio": 1.4572649572649572, "no_speech_prob": 0.10960862040519714}, {"id": 913, "seek": 440400, "start": 4428.0, "end": 4431.0, "text": " Used to be, yeah, okay, it's perfect.", "tokens": [51564, 43237, 281, 312, 11, 1338, 11, 1392, 11, 309, 311, 2176, 13, 51714], "temperature": 0.0, "avg_logprob": -0.20172079219374545, "compression_ratio": 1.4572649572649572, "no_speech_prob": 0.10960862040519714}, {"id": 914, "seek": 443100, "start": 4431.0, "end": 4434.0, "text": " So it's actually done a really good job.", "tokens": [50364, 407, 309, 311, 767, 1096, 257, 534, 665, 1691, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10492167018708728, "compression_ratio": 1.5095238095238095, "no_speech_prob": 0.018539322540163994}, {"id": 915, "seek": 443100, "start": 4434.0, "end": 4440.0, "text": " Like if somebody asked me to send them a, you know, 100 word bio,", "tokens": [50514, 1743, 498, 2618, 2351, 385, 281, 2845, 552, 257, 11, 291, 458, 11, 2319, 1349, 12198, 11, 50814], "temperature": 0.0, "avg_logprob": -0.10492167018708728, "compression_ratio": 1.5095238095238095, "no_speech_prob": 0.018539322540163994}, {"id": 916, "seek": 443100, "start": 4440.0, "end": 4444.0, "text": " that would actually probably be better than I would have written myself.", "tokens": [50814, 300, 576, 767, 1391, 312, 1101, 813, 286, 576, 362, 3720, 2059, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10492167018708728, "compression_ratio": 1.5095238095238095, "no_speech_prob": 0.018539322540163994}, {"id": 917, "seek": 443100, "start": 4444.0, "end": 4451.0, "text": " And just so even though I asked for 300 tokens, it actually got sent back the end of stream token.", "tokens": [51014, 400, 445, 370, 754, 1673, 286, 2351, 337, 6641, 22667, 11, 309, 767, 658, 2279, 646, 264, 917, 295, 4309, 14862, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10492167018708728, "compression_ratio": 1.5095238095238095, "no_speech_prob": 0.018539322540163994}, {"id": 918, "seek": 443100, "start": 4451.0, "end": 4457.0, "text": " And so it knows to stop at this point.", "tokens": [51364, 400, 370, 309, 3255, 281, 1590, 412, 341, 935, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10492167018708728, "compression_ratio": 1.5095238095238095, "no_speech_prob": 0.018539322540163994}, {"id": 919, "seek": 445700, "start": 4457.0, "end": 4459.0, "text": " Well, that's all very well.", "tokens": [50364, 1042, 11, 300, 311, 439, 588, 731, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0721882322560186, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.009706582874059677}, {"id": 920, "seek": 445700, "start": 4459.0, "end": 4463.0, "text": " But how do we know to pass in the Jeremy Howard Wikipedia page?", "tokens": [50464, 583, 577, 360, 321, 458, 281, 1320, 294, 264, 17809, 17626, 28999, 3028, 30, 50664], "temperature": 0.0, "avg_logprob": -0.0721882322560186, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.009706582874059677}, {"id": 921, "seek": 445700, "start": 4463.0, "end": 4473.0, "text": " Well, the way we know which Wikipedia page to pass in is that we can use another model to tell us which web page", "tokens": [50664, 1042, 11, 264, 636, 321, 458, 597, 28999, 3028, 281, 1320, 294, 307, 300, 321, 393, 764, 1071, 2316, 281, 980, 505, 597, 3670, 3028, 51164], "temperature": 0.0, "avg_logprob": -0.0721882322560186, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.009706582874059677}, {"id": 922, "seek": 445700, "start": 4473.0, "end": 4481.0, "text": " or which document is the most useful for answering a question.", "tokens": [51164, 420, 597, 4166, 307, 264, 881, 4420, 337, 13430, 257, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0721882322560186, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.009706582874059677}, {"id": 923, "seek": 448100, "start": 4481.0, "end": 4486.0, "text": " And the way we do that is we can use something called Sentence Transformer.", "tokens": [50364, 400, 264, 636, 321, 360, 300, 307, 321, 393, 764, 746, 1219, 23652, 655, 27938, 260, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06099362892679649, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.05182279273867607}, {"id": 924, "seek": 448100, "start": 4486.0, "end": 4492.0, "text": " And we can use a special kind of model that's specifically designed to take a document", "tokens": [50614, 400, 321, 393, 764, 257, 2121, 733, 295, 2316, 300, 311, 4682, 4761, 281, 747, 257, 4166, 50914], "temperature": 0.0, "avg_logprob": -0.06099362892679649, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.05182279273867607}, {"id": 925, "seek": 448100, "start": 4492.0, "end": 4501.0, "text": " and turn it into a bunch of activations where two documents that are similar will have similar activations.", "tokens": [50914, 293, 1261, 309, 666, 257, 3840, 295, 2430, 763, 689, 732, 8512, 300, 366, 2531, 486, 362, 2531, 2430, 763, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06099362892679649, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.05182279273867607}, {"id": 926, "seek": 448100, "start": 4501.0, "end": 4503.0, "text": " So let me just, let me show you what I mean.", "tokens": [51364, 407, 718, 385, 445, 11, 718, 385, 855, 291, 437, 286, 914, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06099362892679649, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.05182279273867607}, {"id": 927, "seek": 448100, "start": 4503.0, "end": 4509.0, "text": " What I'm going to do is I'm going to grab just the first paragraph of my Wikipedia page.", "tokens": [51464, 708, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 4444, 445, 264, 700, 18865, 295, 452, 28999, 3028, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06099362892679649, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.05182279273867607}, {"id": 928, "seek": 450900, "start": 4509.0, "end": 4514.0, "text": " And I'm going to grab the first paragraph of Tony Blair's Wikipedia page.", "tokens": [50364, 400, 286, 478, 516, 281, 4444, 264, 700, 18865, 295, 10902, 42157, 311, 28999, 3028, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11151222229003906, "compression_ratio": 1.7242990654205608, "no_speech_prob": 0.007120264694094658}, {"id": 929, "seek": 450900, "start": 4514.0, "end": 4517.0, "text": " Okay, so we're pretty different people, right?", "tokens": [50614, 1033, 11, 370, 321, 434, 1238, 819, 561, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.11151222229003906, "compression_ratio": 1.7242990654205608, "no_speech_prob": 0.007120264694094658}, {"id": 930, "seek": 450900, "start": 4517.0, "end": 4520.0, "text": " This is just like a really simple, small example.", "tokens": [50764, 639, 307, 445, 411, 257, 534, 2199, 11, 1359, 1365, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11151222229003906, "compression_ratio": 1.7242990654205608, "no_speech_prob": 0.007120264694094658}, {"id": 931, "seek": 450900, "start": 4520.0, "end": 4525.0, "text": " And I'm going to then call this model, I'm going to say encode,", "tokens": [50914, 400, 286, 478, 516, 281, 550, 818, 341, 2316, 11, 286, 478, 516, 281, 584, 2058, 1429, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11151222229003906, "compression_ratio": 1.7242990654205608, "no_speech_prob": 0.007120264694094658}, {"id": 932, "seek": 450900, "start": 4525.0, "end": 4529.0, "text": " and I'm going to encode my Wikipedia first paragraph, Tony Blair's first paragraph,", "tokens": [51164, 293, 286, 478, 516, 281, 2058, 1429, 452, 28999, 700, 18865, 11, 10902, 42157, 311, 700, 18865, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11151222229003906, "compression_ratio": 1.7242990654205608, "no_speech_prob": 0.007120264694094658}, {"id": 933, "seek": 450900, "start": 4529.0, "end": 4537.0, "text": " and the question, which was, who is Jeremy Howard?", "tokens": [51364, 293, 264, 1168, 11, 597, 390, 11, 567, 307, 17809, 17626, 30, 51764], "temperature": 0.0, "avg_logprob": -0.11151222229003906, "compression_ratio": 1.7242990654205608, "no_speech_prob": 0.007120264694094658}, {"id": 934, "seek": 453700, "start": 4537.0, "end": 4549.0, "text": " And it's going to pass back a 384 long vector of embeddings for the question for me and for Tony Blair.", "tokens": [50364, 400, 309, 311, 516, 281, 1320, 646, 257, 12843, 19, 938, 8062, 295, 12240, 29432, 337, 264, 1168, 337, 385, 293, 337, 10902, 42157, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05038851008695715, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.004467692691832781}, {"id": 935, "seek": 453700, "start": 4549.0, "end": 4558.0, "text": " And what I can now do is I can calculate the similarity between the question and the Jeremy Howard Wikipedia page.", "tokens": [50964, 400, 437, 286, 393, 586, 360, 307, 286, 393, 8873, 264, 32194, 1296, 264, 1168, 293, 264, 17809, 17626, 28999, 3028, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05038851008695715, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.004467692691832781}, {"id": 936, "seek": 453700, "start": 4558.0, "end": 4563.0, "text": " And I can also do it for the question versus the Tony Blair Wikipedia page.", "tokens": [51414, 400, 286, 393, 611, 360, 309, 337, 264, 1168, 5717, 264, 10902, 42157, 28999, 3028, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05038851008695715, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.004467692691832781}, {"id": 937, "seek": 453700, "start": 4563.0, "end": 4566.0, "text": " And as you can see, it's higher for me.", "tokens": [51664, 400, 382, 291, 393, 536, 11, 309, 311, 2946, 337, 385, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05038851008695715, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.004467692691832781}, {"id": 938, "seek": 456600, "start": 4566.0, "end": 4573.0, "text": " And so that tells you that if you're trying to figure out what document to use to help you answer this question,", "tokens": [50364, 400, 370, 300, 5112, 291, 300, 498, 291, 434, 1382, 281, 2573, 484, 437, 4166, 281, 764, 281, 854, 291, 1867, 341, 1168, 11, 50714], "temperature": 0.0, "avg_logprob": -0.06406070709228516, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.00348285841755569}, {"id": 939, "seek": 456600, "start": 4573.0, "end": 4580.0, "text": " better off using the Jeremy Howard Wikipedia page than the Tony Blair Wikipedia page.", "tokens": [50714, 1101, 766, 1228, 264, 17809, 17626, 28999, 3028, 813, 264, 10902, 42157, 28999, 3028, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06406070709228516, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.00348285841755569}, {"id": 940, "seek": 456600, "start": 4580.0, "end": 4589.0, "text": " So if you had a few hundred documents you were thinking of using to give back to the model as context to help it answer a question,", "tokens": [51064, 407, 498, 291, 632, 257, 1326, 3262, 8512, 291, 645, 1953, 295, 1228, 281, 976, 646, 281, 264, 2316, 382, 4319, 281, 854, 309, 1867, 257, 1168, 11, 51514], "temperature": 0.0, "avg_logprob": -0.06406070709228516, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.00348285841755569}, {"id": 941, "seek": 458900, "start": 4589.0, "end": 4597.0, "text": " you could literally just pass them all through to encode, go through each one at a time and see which is closest.", "tokens": [50364, 291, 727, 3736, 445, 1320, 552, 439, 807, 281, 2058, 1429, 11, 352, 807, 1184, 472, 412, 257, 565, 293, 536, 597, 307, 13699, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07117669876307657, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.31050774455070496}, {"id": 942, "seek": 458900, "start": 4597.0, "end": 4604.0, "text": " When you've got thousands or millions of documents, you can use something called a vector database,", "tokens": [50764, 1133, 291, 600, 658, 5383, 420, 6803, 295, 8512, 11, 291, 393, 764, 746, 1219, 257, 8062, 8149, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07117669876307657, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.31050774455070496}, {"id": 943, "seek": 458900, "start": 4604.0, "end": 4611.0, "text": " where basically as a one-off thing, you go through and you encode all of your documents.", "tokens": [51114, 689, 1936, 382, 257, 472, 12, 4506, 551, 11, 291, 352, 807, 293, 291, 2058, 1429, 439, 295, 428, 8512, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07117669876307657, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.31050774455070496}, {"id": 944, "seek": 461100, "start": 4612.0, "end": 4617.0, "text": " And so in fact, there's lots of pre-built systems for this.", "tokens": [50414, 400, 370, 294, 1186, 11, 456, 311, 3195, 295, 659, 12, 23018, 3652, 337, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11551936685222469, "compression_ratio": 1.4175824175824177, "no_speech_prob": 0.41078677773475647}, {"id": 945, "seek": 461100, "start": 4617.0, "end": 4622.0, "text": " Here's an example of one called H2O GPT.", "tokens": [50664, 1692, 311, 364, 1365, 295, 472, 1219, 389, 17, 46, 26039, 51, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11551936685222469, "compression_ratio": 1.4175824175824177, "no_speech_prob": 0.41078677773475647}, {"id": 946, "seek": 461100, "start": 4622.0, "end": 4632.0, "text": " And this is just something that I've got running here on my computer.", "tokens": [50914, 400, 341, 307, 445, 746, 300, 286, 600, 658, 2614, 510, 322, 452, 3820, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11551936685222469, "compression_ratio": 1.4175824175824177, "no_speech_prob": 0.41078677773475647}, {"id": 947, "seek": 461100, "start": 4632.0, "end": 4638.0, "text": " It's just an open source thing written in Python and sitting here running on port 7860.", "tokens": [51414, 467, 311, 445, 364, 1269, 4009, 551, 3720, 294, 15329, 293, 3798, 510, 2614, 322, 2436, 26369, 4550, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11551936685222469, "compression_ratio": 1.4175824175824177, "no_speech_prob": 0.41078677773475647}, {"id": 948, "seek": 463800, "start": 4638.0, "end": 4642.0, "text": " And so I've just gone to localhost 7860.", "tokens": [50364, 400, 370, 286, 600, 445, 2780, 281, 2654, 6037, 26369, 4550, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16246022617115694, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.028426701202988625}, {"id": 949, "seek": 463800, "start": 4642.0, "end": 4650.0, "text": " And what I did was I just uploaded, I just clicked upload and uploaded a bunch of papers.", "tokens": [50564, 400, 437, 286, 630, 390, 286, 445, 17135, 11, 286, 445, 23370, 6580, 293, 17135, 257, 3840, 295, 10577, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16246022617115694, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.028426701202988625}, {"id": 950, "seek": 463800, "start": 4650.0, "end": 4652.0, "text": " In fact, I might be able to see it better.", "tokens": [50964, 682, 1186, 11, 286, 1062, 312, 1075, 281, 536, 309, 1101, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16246022617115694, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.028426701202988625}, {"id": 951, "seek": 463800, "start": 4652.0, "end": 4655.0, "text": " Yeah, here we go, a bunch of papers.", "tokens": [51064, 865, 11, 510, 321, 352, 11, 257, 3840, 295, 10577, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16246022617115694, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.028426701202988625}, {"id": 952, "seek": 463800, "start": 4655.0, "end": 4662.0, "text": " And so we could look at, can we search?", "tokens": [51214, 400, 370, 321, 727, 574, 412, 11, 393, 321, 3164, 30, 51564], "temperature": 0.0, "avg_logprob": -0.16246022617115694, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.028426701202988625}, {"id": 953, "seek": 463800, "start": 4662.0, "end": 4663.0, "text": " Yeah, I can.", "tokens": [51564, 865, 11, 286, 393, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16246022617115694, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.028426701202988625}, {"id": 954, "seek": 466300, "start": 4663.0, "end": 4668.0, "text": " So for example, we can look at the ULM fit paper that Sir Bruder and I did.", "tokens": [50364, 407, 337, 1365, 11, 321, 393, 574, 412, 264, 624, 43, 44, 3318, 3035, 300, 6144, 1603, 28230, 293, 286, 630, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15703171491622925, "compression_ratio": 1.3416149068322982, "no_speech_prob": 0.02555476315319538}, {"id": 955, "seek": 466300, "start": 4668.0, "end": 4675.0, "text": " And you can see it's taken the PDF and turned it into slightly crappily, a text format.", "tokens": [50614, 400, 291, 393, 536, 309, 311, 2726, 264, 17752, 293, 3574, 309, 666, 4748, 2094, 427, 953, 11, 257, 2487, 7877, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15703171491622925, "compression_ratio": 1.3416149068322982, "no_speech_prob": 0.02555476315319538}, {"id": 956, "seek": 466300, "start": 4675.0, "end": 4682.0, "text": " And then it's created an embedding for each section.", "tokens": [50964, 400, 550, 309, 311, 2942, 364, 12240, 3584, 337, 1184, 3541, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15703171491622925, "compression_ratio": 1.3416149068322982, "no_speech_prob": 0.02555476315319538}, {"id": 957, "seek": 468200, "start": 4682.0, "end": 4691.0, "text": " So I could then ask it, you know, what is ULM fit?", "tokens": [50364, 407, 286, 727, 550, 1029, 309, 11, 291, 458, 11, 437, 307, 624, 43, 44, 3318, 30, 50814], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 958, "seek": 468200, "start": 4691.0, "end": 4695.0, "text": " And I'll hit enter.", "tokens": [50814, 400, 286, 603, 2045, 3242, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 959, "seek": 468200, "start": 4695.0, "end": 4698.0, "text": " And you can see here it's now actually saying based on the information provided in the context.", "tokens": [51014, 400, 291, 393, 536, 510, 309, 311, 586, 767, 1566, 2361, 322, 264, 1589, 5649, 294, 264, 4319, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 960, "seek": 468200, "start": 4698.0, "end": 4701.0, "text": " So it's showing us it's been given some context.", "tokens": [51164, 407, 309, 311, 4099, 505, 309, 311, 668, 2212, 512, 4319, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 961, "seek": 468200, "start": 4701.0, "end": 4702.0, "text": " What context did it get?", "tokens": [51314, 708, 4319, 630, 309, 483, 30, 51364], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 962, "seek": 468200, "start": 4702.0, "end": 4707.0, "text": " So here are the things that it found, right?", "tokens": [51364, 407, 510, 366, 264, 721, 300, 309, 1352, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 963, "seek": 468200, "start": 4707.0, "end": 4711.0, "text": " So it's being sent this context.", "tokens": [51614, 407, 309, 311, 885, 2279, 341, 4319, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12005328128212377, "compression_ratio": 1.551219512195122, "no_speech_prob": 0.020328238606452942}, {"id": 964, "seek": 471100, "start": 4711.0, "end": 4716.0, "text": " So this is kind of citations.", "tokens": [50364, 407, 341, 307, 733, 295, 4814, 763, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14281868567833533, "compression_ratio": 1.345679012345679, "no_speech_prob": 0.00843991618603468}, {"id": 965, "seek": 471100, "start": 4716.0, "end": 4726.0, "text": " A goal of ULM fit proves a performance by leveraging the knowledge and adapting it to the specific task at hand.", "tokens": [50614, 316, 3387, 295, 624, 43, 44, 3318, 25019, 257, 3389, 538, 32666, 264, 3601, 293, 34942, 309, 281, 264, 2685, 5633, 412, 1011, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14281868567833533, "compression_ratio": 1.345679012345679, "no_speech_prob": 0.00843991618603468}, {"id": 966, "seek": 471100, "start": 4726.0, "end": 4730.0, "text": " Now, what techniques be more specific?", "tokens": [51114, 823, 11, 437, 7512, 312, 544, 2685, 30, 51314], "temperature": 0.0, "avg_logprob": -0.14281868567833533, "compression_ratio": 1.345679012345679, "no_speech_prob": 0.00843991618603468}, {"id": 967, "seek": 471100, "start": 4730.0, "end": 4735.0, "text": " Does ULM fit?", "tokens": [51314, 4402, 624, 43, 44, 3318, 30, 51564], "temperature": 0.0, "avg_logprob": -0.14281868567833533, "compression_ratio": 1.345679012345679, "no_speech_prob": 0.00843991618603468}, {"id": 968, "seek": 471100, "start": 4735.0, "end": 4740.0, "text": " Let's see how it goes.", "tokens": [51564, 961, 311, 536, 577, 309, 1709, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14281868567833533, "compression_ratio": 1.345679012345679, "no_speech_prob": 0.00843991618603468}, {"id": 969, "seek": 474000, "start": 4740.0, "end": 4742.0, "text": " Okay, there we go.", "tokens": [50364, 1033, 11, 456, 321, 352, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 970, "seek": 474000, "start": 4742.0, "end": 4745.0, "text": " So here's the three steps, pre-trained, fine-tuned, fine-tuned.", "tokens": [50464, 407, 510, 311, 264, 1045, 4439, 11, 659, 12, 17227, 2001, 11, 2489, 12, 83, 43703, 11, 2489, 12, 83, 43703, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 971, "seek": 474000, "start": 4745.0, "end": 4746.0, "text": " Cool.", "tokens": [50614, 8561, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 972, "seek": 474000, "start": 4746.0, "end": 4749.0, "text": " So you can see it's not bad, right?", "tokens": [50664, 407, 291, 393, 536, 309, 311, 406, 1578, 11, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 973, "seek": 474000, "start": 4749.0, "end": 4752.0, "text": " It's not amazing.", "tokens": [50814, 467, 311, 406, 2243, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 974, "seek": 474000, "start": 4752.0, "end": 4757.0, "text": " Like, you know, the context in this particular case is pretty small.", "tokens": [50964, 1743, 11, 291, 458, 11, 264, 4319, 294, 341, 1729, 1389, 307, 1238, 1359, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 975, "seek": 474000, "start": 4757.0, "end": 4765.0, "text": " And in particular, if you think about how that embedding thing worked, you can't really use like the normal kind of follow-up.", "tokens": [51214, 400, 294, 1729, 11, 498, 291, 519, 466, 577, 300, 12240, 3584, 551, 2732, 11, 291, 393, 380, 534, 764, 411, 264, 2710, 733, 295, 1524, 12, 1010, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13137317153642764, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.006287412252277136}, {"id": 976, "seek": 476500, "start": 4765.0, "end": 4776.0, "text": " So for example, if I say it says fine-tuning a classifier, so I could say what classifier is used.", "tokens": [50364, 407, 337, 1365, 11, 498, 286, 584, 309, 1619, 2489, 12, 83, 37726, 257, 1508, 9902, 11, 370, 286, 727, 584, 437, 1508, 9902, 307, 1143, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10604016134672076, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.03209245577454567}, {"id": 977, "seek": 476500, "start": 4776.0, "end": 4781.0, "text": " Now, the problem is that there's no context here being sent to the embedding model.", "tokens": [50914, 823, 11, 264, 1154, 307, 300, 456, 311, 572, 4319, 510, 885, 2279, 281, 264, 12240, 3584, 2316, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10604016134672076, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.03209245577454567}, {"id": 978, "seek": 476500, "start": 4781.0, "end": 4784.0, "text": " So it's actually going to have no idea I'm talking about ULM fit.", "tokens": [51164, 407, 309, 311, 767, 516, 281, 362, 572, 1558, 286, 478, 1417, 466, 624, 43, 44, 3318, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10604016134672076, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.03209245577454567}, {"id": 979, "seek": 476500, "start": 4784.0, "end": 4788.0, "text": " So generally speaking, it's going to do a terrible job.", "tokens": [51314, 407, 5101, 4124, 11, 309, 311, 516, 281, 360, 257, 6237, 1691, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10604016134672076, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.03209245577454567}, {"id": 980, "seek": 476500, "start": 4788.0, "end": 4791.0, "text": " Yeah, see, it says used as a Roberta model, but it's not.", "tokens": [51514, 865, 11, 536, 11, 309, 1619, 1143, 382, 257, 15800, 1328, 2316, 11, 457, 309, 311, 406, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10604016134672076, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.03209245577454567}, {"id": 981, "seek": 479100, "start": 4791.0, "end": 4796.0, "text": " But if I look at the sources, it's no longer actually referring to Howard and Ruder.", "tokens": [50364, 583, 498, 286, 574, 412, 264, 7139, 11, 309, 311, 572, 2854, 767, 13761, 281, 17626, 293, 18636, 260, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11180188439109108, "compression_ratio": 1.4428571428571428, "no_speech_prob": 0.0433507114648819}, {"id": 982, "seek": 479100, "start": 4796.0, "end": 4799.0, "text": " So anyway, you can see the basic idea.", "tokens": [50614, 407, 4033, 11, 291, 393, 536, 264, 3875, 1558, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11180188439109108, "compression_ratio": 1.4428571428571428, "no_speech_prob": 0.0433507114648819}, {"id": 983, "seek": 479100, "start": 4799.0, "end": 4805.0, "text": " This is called retrieval augmented generation, R-A-G.", "tokens": [50764, 639, 307, 1219, 19817, 3337, 36155, 5125, 11, 497, 12, 32, 12, 38, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11180188439109108, "compression_ratio": 1.4428571428571428, "no_speech_prob": 0.0433507114648819}, {"id": 984, "seek": 479100, "start": 4805.0, "end": 4812.0, "text": " And it's a nifty approach, but you have to do it with some care.", "tokens": [51064, 400, 309, 311, 257, 297, 37177, 3109, 11, 457, 291, 362, 281, 360, 309, 365, 512, 1127, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11180188439109108, "compression_ratio": 1.4428571428571428, "no_speech_prob": 0.0433507114648819}, {"id": 985, "seek": 479100, "start": 4812.0, "end": 4818.0, "text": " And so there are lots of these private GPT things out there.", "tokens": [51414, 400, 370, 456, 366, 3195, 295, 613, 4551, 26039, 51, 721, 484, 456, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11180188439109108, "compression_ratio": 1.4428571428571428, "no_speech_prob": 0.0433507114648819}, {"id": 986, "seek": 481800, "start": 4818.0, "end": 4829.0, "text": " And actually the H2O GPT web page is a fantastic job of listing lots of them and comparing.", "tokens": [50364, 400, 767, 264, 389, 17, 46, 26039, 51, 3670, 3028, 307, 257, 5456, 1691, 295, 22161, 3195, 295, 552, 293, 15763, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09917583698179663, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.0420607291162014}, {"id": 987, "seek": 481800, "start": 4829.0, "end": 4839.0, "text": " So as you can see, if you want to run a private GPT, there's no shortage of options.", "tokens": [50914, 407, 382, 291, 393, 536, 11, 498, 291, 528, 281, 1190, 257, 4551, 26039, 51, 11, 456, 311, 572, 24708, 295, 3956, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09917583698179663, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.0420607291162014}, {"id": 988, "seek": 481800, "start": 4839.0, "end": 4842.0, "text": " And you can have your retrieval augmented generation.", "tokens": [51414, 400, 291, 393, 362, 428, 19817, 3337, 36155, 5125, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09917583698179663, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.0420607291162014}, {"id": 989, "seek": 481800, "start": 4842.0, "end": 4845.0, "text": " I haven't tried, I've only tried this one H2O GPT.", "tokens": [51564, 286, 2378, 380, 3031, 11, 286, 600, 787, 3031, 341, 472, 389, 17, 46, 26039, 51, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09917583698179663, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.0420607291162014}, {"id": 990, "seek": 484500, "start": 4845.0, "end": 4849.0, "text": " I don't love it. It's all right.", "tokens": [50364, 286, 500, 380, 959, 309, 13, 467, 311, 439, 558, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0749368667602539, "compression_ratio": 1.678714859437751, "no_speech_prob": 0.03306097164750099}, {"id": 991, "seek": 484500, "start": 4849.0, "end": 4858.0, "text": " So finally, I want to talk about what's perhaps the most interesting option we have, which is to do our own fine tuning.", "tokens": [50564, 407, 2721, 11, 286, 528, 281, 751, 466, 437, 311, 4317, 264, 881, 1880, 3614, 321, 362, 11, 597, 307, 281, 360, 527, 1065, 2489, 15164, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0749368667602539, "compression_ratio": 1.678714859437751, "no_speech_prob": 0.03306097164750099}, {"id": 992, "seek": 484500, "start": 4858.0, "end": 4863.0, "text": " And fine tuning is cool because rather than just retrieving documents which might have useful context,", "tokens": [51014, 400, 2489, 15164, 307, 1627, 570, 2831, 813, 445, 19817, 798, 8512, 597, 1062, 362, 4420, 4319, 11, 51264], "temperature": 0.0, "avg_logprob": -0.0749368667602539, "compression_ratio": 1.678714859437751, "no_speech_prob": 0.03306097164750099}, {"id": 993, "seek": 484500, "start": 4863.0, "end": 4870.0, "text": " we can actually change our model to behave based on the documents that we have available.", "tokens": [51264, 321, 393, 767, 1319, 527, 2316, 281, 15158, 2361, 322, 264, 8512, 300, 321, 362, 2435, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0749368667602539, "compression_ratio": 1.678714859437751, "no_speech_prob": 0.03306097164750099}, {"id": 994, "seek": 484500, "start": 4870.0, "end": 4874.0, "text": " I'm going to show you a really interesting example of fine tuning here.", "tokens": [51614, 286, 478, 516, 281, 855, 291, 257, 534, 1880, 1365, 295, 2489, 15164, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0749368667602539, "compression_ratio": 1.678714859437751, "no_speech_prob": 0.03306097164750099}, {"id": 995, "seek": 487400, "start": 4874.0, "end": 4881.0, "text": " What we're going to do is we're going to fine tune using this no SQL data set.", "tokens": [50364, 708, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 2489, 10864, 1228, 341, 572, 19200, 1412, 992, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1135215229458279, "compression_ratio": 1.3109243697478992, "no_speech_prob": 0.014949922449886799}, {"id": 996, "seek": 487400, "start": 4881.0, "end": 4892.0, "text": " And it's got examples of like a schema for a table in a database, a question,", "tokens": [50714, 400, 309, 311, 658, 5110, 295, 411, 257, 34078, 337, 257, 3199, 294, 257, 8149, 11, 257, 1168, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1135215229458279, "compression_ratio": 1.3109243697478992, "no_speech_prob": 0.014949922449886799}, {"id": 997, "seek": 489200, "start": 4892.0, "end": 4904.0, "text": " and then the answer is the correct SQL to solve that question using that database schema.", "tokens": [50364, 293, 550, 264, 1867, 307, 264, 3006, 19200, 281, 5039, 300, 1168, 1228, 300, 8149, 34078, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09889007466179985, "compression_ratio": 1.4197530864197532, "no_speech_prob": 0.1559487283229828}, {"id": 998, "seek": 489200, "start": 4904.0, "end": 4910.0, "text": " And so I'm hoping we could use this to create a, you know,", "tokens": [50964, 400, 370, 286, 478, 7159, 321, 727, 764, 341, 281, 1884, 257, 11, 291, 458, 11, 51264], "temperature": 0.0, "avg_logprob": -0.09889007466179985, "compression_ratio": 1.4197530864197532, "no_speech_prob": 0.1559487283229828}, {"id": 999, "seek": 489200, "start": 4910.0, "end": 4916.0, "text": " it could be a handy tool for business users where they type some English question", "tokens": [51264, 309, 727, 312, 257, 13239, 2290, 337, 1606, 5022, 689, 436, 2010, 512, 3669, 1168, 51564], "temperature": 0.0, "avg_logprob": -0.09889007466179985, "compression_ratio": 1.4197530864197532, "no_speech_prob": 0.1559487283229828}, {"id": 1000, "seek": 491600, "start": 4916.0, "end": 4921.0, "text": " and SQL generated for them automatically.", "tokens": [50364, 293, 19200, 10833, 337, 552, 6772, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07932113779002223, "compression_ratio": 1.572093023255814, "no_speech_prob": 0.06005367636680603}, {"id": 1001, "seek": 491600, "start": 4921.0, "end": 4926.0, "text": " Don't know if it actually work in practice or not, but this is just a little fun idea.", "tokens": [50614, 1468, 380, 458, 498, 309, 767, 589, 294, 3124, 420, 406, 11, 457, 341, 307, 445, 257, 707, 1019, 1558, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07932113779002223, "compression_ratio": 1.572093023255814, "no_speech_prob": 0.06005367636680603}, {"id": 1002, "seek": 491600, "start": 4926.0, "end": 4928.0, "text": " I thought we'd try out.", "tokens": [50864, 286, 1194, 321, 1116, 853, 484, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07932113779002223, "compression_ratio": 1.572093023255814, "no_speech_prob": 0.06005367636680603}, {"id": 1003, "seek": 491600, "start": 4928.0, "end": 4934.0, "text": " I know there's lots of startups and stuff out there trying to do this more seriously.", "tokens": [50964, 286, 458, 456, 311, 3195, 295, 28041, 293, 1507, 484, 456, 1382, 281, 360, 341, 544, 6638, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07932113779002223, "compression_ratio": 1.572093023255814, "no_speech_prob": 0.06005367636680603}, {"id": 1004, "seek": 491600, "start": 4934.0, "end": 4940.0, "text": " But this is, this is quite cool because it actually got it working today in just a couple of hours.", "tokens": [51264, 583, 341, 307, 11, 341, 307, 1596, 1627, 570, 309, 767, 658, 309, 1364, 965, 294, 445, 257, 1916, 295, 2496, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07932113779002223, "compression_ratio": 1.572093023255814, "no_speech_prob": 0.06005367636680603}, {"id": 1005, "seek": 494000, "start": 4940.0, "end": 4947.0, "text": " So what we do is we use the hugging face data sets library.", "tokens": [50364, 407, 437, 321, 360, 307, 321, 764, 264, 41706, 1851, 1412, 6352, 6405, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08609889535342946, "compression_ratio": 2.015463917525773, "no_speech_prob": 0.020327981561422348}, {"id": 1006, "seek": 494000, "start": 4947.0, "end": 4952.0, "text": " And what that does, just like the hugging face hub has lots of models stored on it,", "tokens": [50714, 400, 437, 300, 775, 11, 445, 411, 264, 41706, 1851, 11838, 575, 3195, 295, 5245, 12187, 322, 309, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08609889535342946, "compression_ratio": 2.015463917525773, "no_speech_prob": 0.020327981561422348}, {"id": 1007, "seek": 494000, "start": 4952.0, "end": 4956.0, "text": " hugging face data sets has lots of data sets stored on it.", "tokens": [50964, 41706, 1851, 1412, 6352, 575, 3195, 295, 1412, 6352, 12187, 322, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08609889535342946, "compression_ratio": 2.015463917525773, "no_speech_prob": 0.020327981561422348}, {"id": 1008, "seek": 494000, "start": 4956.0, "end": 4960.0, "text": " And so instead of using transformers, which is what we use to grab models,", "tokens": [51164, 400, 370, 2602, 295, 1228, 4088, 433, 11, 597, 307, 437, 321, 764, 281, 4444, 5245, 11, 51364], "temperature": 0.0, "avg_logprob": -0.08609889535342946, "compression_ratio": 2.015463917525773, "no_speech_prob": 0.020327981561422348}, {"id": 1009, "seek": 494000, "start": 4960.0, "end": 4968.0, "text": " we use data sets and we just pass in the name of the person and the name of their repo and it grabs the data set.", "tokens": [51364, 321, 764, 1412, 6352, 293, 321, 445, 1320, 294, 264, 1315, 295, 264, 954, 293, 264, 1315, 295, 641, 49040, 293, 309, 30028, 264, 1412, 992, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08609889535342946, "compression_ratio": 2.015463917525773, "no_speech_prob": 0.020327981561422348}, {"id": 1010, "seek": 496800, "start": 4968.0, "end": 4975.0, "text": " And so we can take a look at it and it just has a training set with features.", "tokens": [50364, 400, 370, 321, 393, 747, 257, 574, 412, 309, 293, 309, 445, 575, 257, 3097, 992, 365, 4122, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06947305104503892, "compression_ratio": 1.5569620253164558, "no_speech_prob": 0.004608878865838051}, {"id": 1011, "seek": 496800, "start": 4975.0, "end": 4982.0, "text": " And so then I can have a look at the training set.", "tokens": [50714, 400, 370, 550, 286, 393, 362, 257, 574, 412, 264, 3097, 992, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06947305104503892, "compression_ratio": 1.5569620253164558, "no_speech_prob": 0.004608878865838051}, {"id": 1012, "seek": 496800, "start": 4982.0, "end": 4987.0, "text": " So here's an example, which looks a bit like what we've just seen.", "tokens": [51064, 407, 510, 311, 364, 1365, 11, 597, 1542, 257, 857, 411, 437, 321, 600, 445, 1612, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06947305104503892, "compression_ratio": 1.5569620253164558, "no_speech_prob": 0.004608878865838051}, {"id": 1013, "seek": 496800, "start": 4987.0, "end": 4992.0, "text": " So what we do now is we want to fine tune a model.", "tokens": [51314, 407, 437, 321, 360, 586, 307, 321, 528, 281, 2489, 10864, 257, 2316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06947305104503892, "compression_ratio": 1.5569620253164558, "no_speech_prob": 0.004608878865838051}, {"id": 1014, "seek": 499200, "start": 4992.0, "end": 4997.0, "text": " So we can do that in in a notebook from scratch takes, I don't know,", "tokens": [50364, 407, 321, 393, 360, 300, 294, 294, 257, 21060, 490, 8459, 2516, 11, 286, 500, 380, 458, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1015, "seek": 499200, "start": 4997.0, "end": 5000.0, "text": " a hundred or so lines of code is not too much.", "tokens": [50614, 257, 3262, 420, 370, 3876, 295, 3089, 307, 406, 886, 709, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1016, "seek": 499200, "start": 5000.0, "end": 5004.0, "text": " But given the time constraints here and also like I thought, why not?", "tokens": [50764, 583, 2212, 264, 565, 18491, 510, 293, 611, 411, 286, 1194, 11, 983, 406, 30, 50964], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1017, "seek": 499200, "start": 5004.0, "end": 5007.0, "text": " Why don't we just use something that's ready to go?", "tokens": [50964, 1545, 500, 380, 321, 445, 764, 746, 300, 311, 1919, 281, 352, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1018, "seek": 499200, "start": 5007.0, "end": 5014.0, "text": " So for example, there's something called axolotl, which is quite nice in my opinion.", "tokens": [51114, 407, 337, 1365, 11, 456, 311, 746, 1219, 6360, 401, 310, 75, 11, 597, 307, 1596, 1481, 294, 452, 4800, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1019, "seek": 499200, "start": 5014.0, "end": 5015.0, "text": " Here it is here.", "tokens": [51464, 1692, 309, 307, 510, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1020, "seek": 499200, "start": 5015.0, "end": 5018.0, "text": " Another very nice open source piece of software.", "tokens": [51514, 3996, 588, 1481, 1269, 4009, 2522, 295, 4722, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1431447650314471, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.14407974481582642}, {"id": 1021, "seek": 501800, "start": 5018.0, "end": 5021.0, "text": " And again, you can just pip install it.", "tokens": [50364, 400, 797, 11, 291, 393, 445, 8489, 3625, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14250182009291376, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.020955413579940796}, {"id": 1022, "seek": 501800, "start": 5021.0, "end": 5027.0, "text": " And it's got things like GPTQ and 16 bit and so forth ready to go.", "tokens": [50514, 400, 309, 311, 658, 721, 411, 26039, 51, 48, 293, 3165, 857, 293, 370, 5220, 1919, 281, 352, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14250182009291376, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.020955413579940796}, {"id": 1023, "seek": 501800, "start": 5027.0, "end": 5038.0, "text": " And so what I did was I it basically has a whole bunch of examples of things that it already knows how to do.", "tokens": [50814, 400, 370, 437, 286, 630, 390, 286, 309, 1936, 575, 257, 1379, 3840, 295, 5110, 295, 721, 300, 309, 1217, 3255, 577, 281, 360, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14250182009291376, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.020955413579940796}, {"id": 1024, "seek": 501800, "start": 5038.0, "end": 5040.0, "text": " It's got llama to example.", "tokens": [51364, 467, 311, 658, 23272, 281, 1365, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14250182009291376, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.020955413579940796}, {"id": 1025, "seek": 501800, "start": 5040.0, "end": 5045.0, "text": " So I copied the llama to example and I created a SQL example.", "tokens": [51464, 407, 286, 25365, 264, 23272, 281, 1365, 293, 286, 2942, 257, 19200, 1365, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14250182009291376, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.020955413579940796}, {"id": 1026, "seek": 504500, "start": 5045.0, "end": 5049.0, "text": " So basically just told it, this is the path to the data set that I want.", "tokens": [50364, 407, 1936, 445, 1907, 309, 11, 341, 307, 264, 3100, 281, 264, 1412, 992, 300, 286, 528, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12007663308120356, "compression_ratio": 1.4393939393939394, "no_speech_prob": 0.002631319686770439}, {"id": 1027, "seek": 504500, "start": 5049.0, "end": 5056.0, "text": " This is the type and everything else pretty much I left the same.", "tokens": [50564, 639, 307, 264, 2010, 293, 1203, 1646, 1238, 709, 286, 1411, 264, 912, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12007663308120356, "compression_ratio": 1.4393939393939394, "no_speech_prob": 0.002631319686770439}, {"id": 1028, "seek": 504500, "start": 5056.0, "end": 5060.0, "text": " And then I just ran this command, which is from there.", "tokens": [50914, 400, 550, 286, 445, 5872, 341, 5622, 11, 597, 307, 490, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12007663308120356, "compression_ratio": 1.4393939393939394, "no_speech_prob": 0.002631319686770439}, {"id": 1029, "seek": 504500, "start": 5060.0, "end": 5064.0, "text": " Read me accelerate launch axolotl passed in my YAML.", "tokens": [51114, 17604, 385, 21341, 4025, 6360, 401, 310, 75, 4678, 294, 452, 398, 2865, 43, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12007663308120356, "compression_ratio": 1.4393939393939394, "no_speech_prob": 0.002631319686770439}, {"id": 1030, "seek": 504500, "start": 5064.0, "end": 5068.0, "text": " And that took about an hour on my GPU.", "tokens": [51314, 400, 300, 1890, 466, 364, 1773, 322, 452, 18407, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12007663308120356, "compression_ratio": 1.4393939393939394, "no_speech_prob": 0.002631319686770439}, {"id": 1031, "seek": 506800, "start": 5068.0, "end": 5075.0, "text": " And at the end of the hour, it had created a QLaura out directory.", "tokens": [50364, 400, 412, 264, 917, 295, 264, 1773, 11, 309, 632, 2942, 257, 1249, 5478, 2991, 484, 21120, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13172611148878074, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.03566182032227516}, {"id": 1032, "seek": 506800, "start": 5075.0, "end": 5077.0, "text": " Q stands for quantize.", "tokens": [50714, 1249, 7382, 337, 4426, 1125, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13172611148878074, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.03566182032227516}, {"id": 1033, "seek": 506800, "start": 5077.0, "end": 5079.0, "text": " It's because I was creating a smaller quantized model.", "tokens": [50814, 467, 311, 570, 286, 390, 4084, 257, 4356, 4426, 1602, 2316, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13172611148878074, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.03566182032227516}, {"id": 1034, "seek": 506800, "start": 5079.0, "end": 5093.0, "text": " Laura, I'm not going to talk about today, but Laura is a very cool thing that basically another thing that makes your models smaller and also handles can use bigger models on smaller GPUs for training.", "tokens": [50914, 13220, 11, 286, 478, 406, 516, 281, 751, 466, 965, 11, 457, 13220, 307, 257, 588, 1627, 551, 300, 1936, 1071, 551, 300, 1669, 428, 5245, 4356, 293, 611, 18722, 393, 764, 3801, 5245, 322, 4356, 18407, 82, 337, 3097, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13172611148878074, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.03566182032227516}, {"id": 1035, "seek": 509300, "start": 5094.0, "end": 5098.0, "text": " So I trained it.", "tokens": [50414, 407, 286, 8895, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11977132161458333, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.12076971679925919}, {"id": 1036, "seek": 509300, "start": 5098.0, "end": 5104.0, "text": " And then I thought, okay, let's create our own one.", "tokens": [50614, 400, 550, 286, 1194, 11, 1392, 11, 718, 311, 1884, 527, 1065, 472, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11977132161458333, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.12076971679925919}, {"id": 1037, "seek": 509300, "start": 5104.0, "end": 5118.0, "text": " So we're going to have this context and this question get the count of competition hosts by theme.", "tokens": [50914, 407, 321, 434, 516, 281, 362, 341, 4319, 293, 341, 1168, 483, 264, 1207, 295, 6211, 21573, 538, 6314, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11977132161458333, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.12076971679925919}, {"id": 1038, "seek": 509300, "start": 5118.0, "end": 5120.0, "text": " And I'm not going to pass it an answer.", "tokens": [51614, 400, 286, 478, 406, 516, 281, 1320, 309, 364, 1867, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11977132161458333, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.12076971679925919}, {"id": 1039, "seek": 509300, "start": 5120.0, "end": 5122.0, "text": " So I'll just ignore that.", "tokens": [51714, 407, 286, 603, 445, 11200, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11977132161458333, "compression_ratio": 1.4294478527607362, "no_speech_prob": 0.12076971679925919}, {"id": 1040, "seek": 512200, "start": 5122.0, "end": 5131.0, "text": " So again, I found out what prompt they were using and created a SQL prompt function.", "tokens": [50364, 407, 797, 11, 286, 1352, 484, 437, 12391, 436, 645, 1228, 293, 2942, 257, 19200, 12391, 2445, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1426677703857422, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.003823197213932872}, {"id": 1041, "seek": 512200, "start": 5131.0, "end": 5133.0, "text": " And so here's what I'm going to do.", "tokens": [50814, 400, 370, 510, 311, 437, 286, 478, 516, 281, 360, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1426677703857422, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.003823197213932872}, {"id": 1042, "seek": 512200, "start": 5133.0, "end": 5138.0, "text": " Use the following contextual information to answer the question context create table.", "tokens": [50914, 8278, 264, 3480, 35526, 1589, 281, 1867, 264, 1168, 4319, 1884, 3199, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1426677703857422, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.003823197213932872}, {"id": 1043, "seek": 512200, "start": 5138.0, "end": 5144.0, "text": " So there's the context question list or competition hosts sorted in ascending order.", "tokens": [51164, 407, 456, 311, 264, 4319, 1168, 1329, 420, 6211, 21573, 25462, 294, 15526, 2029, 1668, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1426677703857422, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.003823197213932872}, {"id": 1044, "seek": 514400, "start": 5144.0, "end": 5152.0, "text": " And then I tokenized that called generate.", "tokens": [50364, 400, 550, 286, 14862, 1602, 300, 1219, 8460, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13169968381841132, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.08148034662008286}, {"id": 1045, "seek": 514400, "start": 5152.0, "end": 5160.0, "text": " And the answer was select count hosts comma theme from farm competition group by theme.", "tokens": [50764, 400, 264, 1867, 390, 3048, 1207, 21573, 22117, 6314, 490, 5421, 6211, 1594, 538, 6314, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13169968381841132, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.08148034662008286}, {"id": 1046, "seek": 514400, "start": 5160.0, "end": 5162.0, "text": " That is correct.", "tokens": [51164, 663, 307, 3006, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13169968381841132, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.08148034662008286}, {"id": 1047, "seek": 514400, "start": 5162.0, "end": 5165.0, "text": " So I think that's pretty remarkable.", "tokens": [51264, 407, 286, 519, 300, 311, 1238, 12802, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13169968381841132, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.08148034662008286}, {"id": 1048, "seek": 516500, "start": 5165.0, "end": 5175.0, "text": " We have just built, you know, so it took me like an hour to figure out how to do it and then an hour to actually do the training.", "tokens": [50364, 492, 362, 445, 3094, 11, 291, 458, 11, 370, 309, 1890, 385, 411, 364, 1773, 281, 2573, 484, 577, 281, 360, 309, 293, 550, 364, 1773, 281, 767, 360, 264, 3097, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09526725915762094, "compression_ratio": 1.5129533678756477, "no_speech_prob": 0.19176779687404633}, {"id": 1049, "seek": 516500, "start": 5175.0, "end": 5185.0, "text": " And at the end of that, we've actually got something which, which is converting pros into SQL based on a schema.", "tokens": [50864, 400, 412, 264, 917, 295, 300, 11, 321, 600, 767, 658, 746, 597, 11, 597, 307, 29942, 6267, 666, 19200, 2361, 322, 257, 34078, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09526725915762094, "compression_ratio": 1.5129533678756477, "no_speech_prob": 0.19176779687404633}, {"id": 1050, "seek": 516500, "start": 5185.0, "end": 5189.0, "text": " So I think that's, that's a really exciting idea.", "tokens": [51364, 407, 286, 519, 300, 311, 11, 300, 311, 257, 534, 4670, 1558, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09526725915762094, "compression_ratio": 1.5129533678756477, "no_speech_prob": 0.19176779687404633}, {"id": 1051, "seek": 518900, "start": 5189.0, "end": 5196.0, "text": " The only other thing I do want to briefly mention is, is doing stuff on max.", "tokens": [50364, 440, 787, 661, 551, 286, 360, 528, 281, 10515, 2152, 307, 11, 307, 884, 1507, 322, 11469, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14008378329342358, "compression_ratio": 1.3833333333333333, "no_speech_prob": 0.043347179889678955}, {"id": 1052, "seek": 518900, "start": 5196.0, "end": 5202.0, "text": " If you've got a Mac, you, there's a couple of really good options.", "tokens": [50714, 759, 291, 600, 658, 257, 5707, 11, 291, 11, 456, 311, 257, 1916, 295, 534, 665, 3956, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14008378329342358, "compression_ratio": 1.3833333333333333, "no_speech_prob": 0.043347179889678955}, {"id": 1053, "seek": 518900, "start": 5202.0, "end": 5208.0, "text": " The options are MLC and llama dot CPP currently MLC in particular.", "tokens": [51014, 440, 3956, 366, 376, 14766, 293, 23272, 5893, 383, 17755, 4362, 376, 14766, 294, 1729, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14008378329342358, "compression_ratio": 1.3833333333333333, "no_speech_prob": 0.043347179889678955}, {"id": 1054, "seek": 518900, "start": 5208.0, "end": 5210.0, "text": " I think it's kind of underappreciated.", "tokens": [51314, 286, 519, 309, 311, 733, 295, 833, 1746, 3326, 770, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14008378329342358, "compression_ratio": 1.3833333333333333, "no_speech_prob": 0.043347179889678955}, {"id": 1055, "seek": 521000, "start": 5210.0, "end": 5228.0, "text": " It's a really nice project where you can run language models on literally iPhone, Android, web browsers, everything.", "tokens": [50364, 467, 311, 257, 534, 1481, 1716, 689, 291, 393, 1190, 2856, 5245, 322, 3736, 7252, 11, 8853, 11, 3670, 36069, 11, 1203, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1415054360214545, "compression_ratio": 1.3065693430656935, "no_speech_prob": 0.43378132581710815}, {"id": 1056, "seek": 521000, "start": 5228.0, "end": 5230.0, "text": " It's really cool.", "tokens": [51264, 467, 311, 534, 1627, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1415054360214545, "compression_ratio": 1.3065693430656935, "no_speech_prob": 0.43378132581710815}, {"id": 1057, "seek": 521000, "start": 5230.0, "end": 5237.0, "text": " And, and so I'm now actually on my Mac here.", "tokens": [51364, 400, 11, 293, 370, 286, 478, 586, 767, 322, 452, 5707, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1415054360214545, "compression_ratio": 1.3065693430656935, "no_speech_prob": 0.43378132581710815}, {"id": 1058, "seek": 523700, "start": 5237.0, "end": 5244.0, "text": " And I've got a tiny little Python program called chat.", "tokens": [50364, 400, 286, 600, 658, 257, 5870, 707, 15329, 1461, 1219, 5081, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1299331933259964, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.02441604621708393}, {"id": 1059, "seek": 523700, "start": 5244.0, "end": 5255.0, "text": " And it's going to import chat module and it's going to import a discretized seven B.", "tokens": [50714, 400, 309, 311, 516, 281, 974, 5081, 10088, 293, 309, 311, 516, 281, 974, 257, 25656, 1602, 3407, 363, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1299331933259964, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.02441604621708393}, {"id": 1060, "seek": 523700, "start": 5255.0, "end": 5260.0, "text": " And that's going to ask the question, what is the meaning of life?", "tokens": [51264, 400, 300, 311, 516, 281, 1029, 264, 1168, 11, 437, 307, 264, 3620, 295, 993, 30, 51514], "temperature": 0.0, "avg_logprob": -0.1299331933259964, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.02441604621708393}, {"id": 1061, "seek": 523700, "start": 5260.0, "end": 5262.0, "text": " So let's try it.", "tokens": [51514, 407, 718, 311, 853, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1299331933259964, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.02441604621708393}, {"id": 1062, "seek": 526200, "start": 5262.0, "end": 5264.0, "text": " Python chat.py.", "tokens": [50364, 15329, 5081, 13, 8200, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12179355621337891, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.03209146484732628}, {"id": 1063, "seek": 526200, "start": 5264.0, "end": 5268.0, "text": " And again, I just installed this earlier today.", "tokens": [50464, 400, 797, 11, 286, 445, 8899, 341, 3071, 965, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12179355621337891, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.03209146484732628}, {"id": 1064, "seek": 526200, "start": 5268.0, "end": 5278.0, "text": " I haven't done that much stuff on max before, but I was pretty impressed to see that it is doing a good job here.", "tokens": [50664, 286, 2378, 380, 1096, 300, 709, 1507, 322, 11469, 949, 11, 457, 286, 390, 1238, 11679, 281, 536, 300, 309, 307, 884, 257, 665, 1691, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12179355621337891, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.03209146484732628}, {"id": 1065, "seek": 526200, "start": 5278.0, "end": 5283.0, "text": " What is the meaning of life is complex and philosophical.", "tokens": [51164, 708, 307, 264, 3620, 295, 993, 307, 3997, 293, 25066, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12179355621337891, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.03209146484732628}, {"id": 1066, "seek": 526200, "start": 5283.0, "end": 5287.0, "text": " Some people might find meaning in their relationships with others.", "tokens": [51414, 2188, 561, 1062, 915, 3620, 294, 641, 6159, 365, 2357, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12179355621337891, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.03209146484732628}, {"id": 1067, "seek": 526200, "start": 5287.0, "end": 5290.0, "text": " They're impacting the world, et cetera, et cetera.", "tokens": [51614, 814, 434, 29963, 264, 1002, 11, 1030, 11458, 11, 1030, 11458, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12179355621337891, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.03209146484732628}, {"id": 1068, "seek": 529000, "start": 5290.0, "end": 5291.0, "text": " Okay.", "tokens": [50364, 1033, 13, 50414], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1069, "seek": 529000, "start": 5291.0, "end": 5295.0, "text": " And it's doing 9.6 tokens per second.", "tokens": [50414, 400, 309, 311, 884, 1722, 13, 21, 22667, 680, 1150, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1070, "seek": 529000, "start": 5295.0, "end": 5296.0, "text": " So there you go.", "tokens": [50614, 407, 456, 291, 352, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1071, "seek": 529000, "start": 5296.0, "end": 5299.0, "text": " So there is running a model on a Mac.", "tokens": [50664, 407, 456, 307, 2614, 257, 2316, 322, 257, 5707, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1072, "seek": 529000, "start": 5299.0, "end": 5304.0, "text": " And then another option that you've probably heard about is llama dot CPP.", "tokens": [50814, 400, 550, 1071, 3614, 300, 291, 600, 1391, 2198, 466, 307, 23272, 5893, 383, 17755, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1073, "seek": 529000, "start": 5304.0, "end": 5312.0, "text": " Llama dot CPP runs on lots of different things as well, including Max and also on CUDA.", "tokens": [51064, 32717, 2404, 5893, 383, 17755, 6676, 322, 3195, 295, 819, 721, 382, 731, 11, 3009, 7402, 293, 611, 322, 29777, 7509, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1074, "seek": 529000, "start": 5312.0, "end": 5316.0, "text": " It uses a different format called gguf.", "tokens": [51464, 467, 4960, 257, 819, 7877, 1219, 290, 70, 2947, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11342621886211893, "compression_ratio": 1.4682926829268292, "no_speech_prob": 0.03729969635605812}, {"id": 1075, "seek": 531600, "start": 5316.0, "end": 5318.0, "text": " And again, you can use it from Python.", "tokens": [50364, 400, 797, 11, 291, 393, 764, 309, 490, 15329, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1076, "seek": 531600, "start": 5318.0, "end": 5321.0, "text": " Even though that was a CPP thing, it's got a Python wrapper.", "tokens": [50464, 2754, 1673, 300, 390, 257, 383, 17755, 551, 11, 309, 311, 658, 257, 15329, 46906, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1077, "seek": 531600, "start": 5321.0, "end": 5329.0, "text": " So you can just download, again, from Huggingface, a gguf file.", "tokens": [50614, 407, 291, 393, 445, 5484, 11, 797, 11, 490, 46892, 3249, 2868, 11, 257, 290, 70, 2947, 3991, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1078, "seek": 531600, "start": 5329.0, "end": 5332.0, "text": " So you can just go through and there's lots of different ones.", "tokens": [51014, 407, 291, 393, 445, 352, 807, 293, 456, 311, 3195, 295, 819, 2306, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1079, "seek": 531600, "start": 5332.0, "end": 5334.0, "text": " They're all documented as to what's what.", "tokens": [51164, 814, 434, 439, 23007, 382, 281, 437, 311, 437, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1080, "seek": 531600, "start": 5334.0, "end": 5336.0, "text": " You can pick how big a file you want.", "tokens": [51264, 509, 393, 1888, 577, 955, 257, 3991, 291, 528, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1081, "seek": 531600, "start": 5336.0, "end": 5338.0, "text": " You can download it.", "tokens": [51364, 509, 393, 5484, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1082, "seek": 531600, "start": 5338.0, "end": 5343.0, "text": " And then you just say, okay, llama model path equals passing that gguf file.", "tokens": [51464, 400, 550, 291, 445, 584, 11, 1392, 11, 23272, 2316, 3100, 6915, 8437, 300, 290, 70, 2947, 3991, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10762415641595509, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.05181171000003815}, {"id": 1083, "seek": 534300, "start": 5343.0, "end": 5347.0, "text": " It spits out lots and lots and lots of gunk.", "tokens": [50364, 467, 637, 1208, 484, 3195, 293, 3195, 293, 3195, 295, 290, 3197, 13, 50564], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1084, "seek": 534300, "start": 5347.0, "end": 5350.0, "text": " And then you can say, okay.", "tokens": [50564, 400, 550, 291, 393, 584, 11, 1392, 13, 50714], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1085, "seek": 534300, "start": 5350.0, "end": 5353.0, "text": " So if I called that LLM, you can then say LLM question.", "tokens": [50714, 407, 498, 286, 1219, 300, 441, 43, 44, 11, 291, 393, 550, 584, 441, 43, 44, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1086, "seek": 534300, "start": 5353.0, "end": 5357.0, "text": " Name the planets of the solar system, 32 tokens.", "tokens": [50864, 13866, 264, 15126, 295, 264, 7936, 1185, 11, 8858, 22667, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1087, "seek": 534300, "start": 5357.0, "end": 5361.0, "text": " And there we go.", "tokens": [51064, 400, 456, 321, 352, 13, 51264], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1088, "seek": 534300, "start": 5361.0, "end": 5362.0, "text": " Run Pluto.", "tokens": [51264, 8950, 41205, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1089, "seek": 534300, "start": 5362.0, "end": 5363.0, "text": " No longer considered a planet.", "tokens": [51314, 883, 2854, 4888, 257, 5054, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1090, "seek": 534300, "start": 5363.0, "end": 5366.0, "text": " Two, Mercury, three, Venus, four, Earth, Mars, six.", "tokens": [51364, 4453, 11, 31780, 11, 1045, 11, 23994, 11, 1451, 11, 4755, 11, 9692, 11, 2309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1091, "seek": 534300, "start": 5366.0, "end": 5368.0, "text": " Oh, no, right out of tokens.", "tokens": [51514, 876, 11, 572, 11, 558, 484, 295, 22667, 13, 51614], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1092, "seek": 534300, "start": 5368.0, "end": 5372.0, "text": " So again, you know, it's just to show you here.", "tokens": [51614, 407, 797, 11, 291, 458, 11, 309, 311, 445, 281, 855, 291, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.19612455749511717, "compression_ratio": 1.5466101694915255, "no_speech_prob": 0.031601399183273315}, {"id": 1093, "seek": 537200, "start": 5372.0, "end": 5377.0, "text": " There are all these different options.", "tokens": [50364, 821, 366, 439, 613, 819, 3956, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1094, "seek": 537200, "start": 5377.0, "end": 5382.0, "text": " You know, I would say, you know, if you've got a NVIDIA graphics card", "tokens": [50614, 509, 458, 11, 286, 576, 584, 11, 291, 458, 11, 498, 291, 600, 658, 257, 426, 3958, 6914, 11837, 2920, 50864], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1095, "seek": 537200, "start": 5382.0, "end": 5385.0, "text": " and you're a reasonably capable Python programmer,", "tokens": [50864, 293, 291, 434, 257, 23551, 8189, 15329, 32116, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1096, "seek": 537200, "start": 5385.0, "end": 5392.0, "text": " you probably be one of you use PyTorch and the Huggingface ecosystem.", "tokens": [51014, 291, 1391, 312, 472, 295, 291, 764, 9953, 51, 284, 339, 293, 264, 46892, 3249, 2868, 11311, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1097, "seek": 537200, "start": 5392.0, "end": 5395.0, "text": " But, you know, I think, you know, these things might change over time as well.", "tokens": [51364, 583, 11, 291, 458, 11, 286, 519, 11, 291, 458, 11, 613, 721, 1062, 1319, 670, 565, 382, 731, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1098, "seek": 537200, "start": 5395.0, "end": 5398.0, "text": " And certainly a lot of stuff is coming into Llama pretty quickly now", "tokens": [51514, 400, 3297, 257, 688, 295, 1507, 307, 1348, 666, 32717, 2404, 1238, 2661, 586, 51664], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1099, "seek": 537200, "start": 5398.0, "end": 5400.0, "text": " and it's developing very fast.", "tokens": [51664, 293, 309, 311, 6416, 588, 2370, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10364331425847234, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.020317059010267258}, {"id": 1100, "seek": 540000, "start": 5400.0, "end": 5404.0, "text": " As you can see, there's a lot of stuff that you can do right now", "tokens": [50364, 1018, 291, 393, 536, 11, 456, 311, 257, 688, 295, 1507, 300, 291, 393, 360, 558, 586, 50564], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1101, "seek": 540000, "start": 5404.0, "end": 5409.0, "text": " with language models, particularly if you feel pretty comfortable", "tokens": [50564, 365, 2856, 5245, 11, 4098, 498, 291, 841, 1238, 4619, 50814], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1102, "seek": 540000, "start": 5409.0, "end": 5412.0, "text": " as a Python programmer.", "tokens": [50814, 382, 257, 15329, 32116, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1103, "seek": 540000, "start": 5412.0, "end": 5414.0, "text": " I think it's a really exciting time to get involved.", "tokens": [50964, 286, 519, 309, 311, 257, 534, 4670, 565, 281, 483, 3288, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1104, "seek": 540000, "start": 5414.0, "end": 5417.0, "text": " In some ways, it's a frustrating time to get involved", "tokens": [51064, 682, 512, 2098, 11, 309, 311, 257, 16522, 565, 281, 483, 3288, 51214], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1105, "seek": 540000, "start": 5417.0, "end": 5423.0, "text": " because, you know, it's very early", "tokens": [51214, 570, 11, 291, 458, 11, 309, 311, 588, 2440, 51514], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1106, "seek": 540000, "start": 5423.0, "end": 5427.0, "text": " and a lot of stuff has weird little edge cases", "tokens": [51514, 293, 257, 688, 295, 1507, 575, 3657, 707, 4691, 3331, 51714], "temperature": 0.0, "avg_logprob": -0.07767001351157388, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0075752404518425465}, {"id": 1107, "seek": 542700, "start": 5427.0, "end": 5432.0, "text": " and it's tricky to install and stuff like that.", "tokens": [50364, 293, 309, 311, 12414, 281, 3625, 293, 1507, 411, 300, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1108, "seek": 542700, "start": 5432.0, "end": 5434.0, "text": " There's a lot of great Discord channels.", "tokens": [50614, 821, 311, 257, 688, 295, 869, 32623, 9235, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1109, "seek": 542700, "start": 5434.0, "end": 5436.0, "text": " However, FastAI have our own Discord channel,", "tokens": [50714, 2908, 11, 15968, 48698, 362, 527, 1065, 32623, 2269, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1110, "seek": 542700, "start": 5436.0, "end": 5440.0, "text": " so feel free to just Google for FastAI Discord and drop in.", "tokens": [50814, 370, 841, 1737, 281, 445, 3329, 337, 15968, 48698, 32623, 293, 3270, 294, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1111, "seek": 542700, "start": 5440.0, "end": 5442.0, "text": " We've got a channel called Generative.", "tokens": [51014, 492, 600, 658, 257, 2269, 1219, 15409, 1166, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1112, "seek": 542700, "start": 5442.0, "end": 5448.0, "text": " You feel free to ask any questions or tell us about what you're finding.", "tokens": [51114, 509, 841, 1737, 281, 1029, 604, 1651, 420, 980, 505, 466, 437, 291, 434, 5006, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1113, "seek": 542700, "start": 5448.0, "end": 5450.0, "text": " Yeah, it's definitely something where you want to be getting help", "tokens": [51414, 865, 11, 309, 311, 2138, 746, 689, 291, 528, 281, 312, 1242, 854, 51514], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1114, "seek": 542700, "start": 5450.0, "end": 5454.0, "text": " from other people on this journey because it is very early days.", "tokens": [51514, 490, 661, 561, 322, 341, 4671, 570, 309, 307, 588, 2440, 1708, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09425493257235637, "compression_ratio": 1.6245353159851301, "no_speech_prob": 0.015180365182459354}, {"id": 1115, "seek": 545400, "start": 5454.0, "end": 5458.0, "text": " And, you know, people are still figuring things out as we go.", "tokens": [50364, 400, 11, 291, 458, 11, 561, 366, 920, 15213, 721, 484, 382, 321, 352, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1116, "seek": 545400, "start": 5458.0, "end": 5461.0, "text": " But I think it's an exciting time to be doing this stuff", "tokens": [50564, 583, 286, 519, 309, 311, 364, 4670, 565, 281, 312, 884, 341, 1507, 50714], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1117, "seek": 545400, "start": 5461.0, "end": 5463.0, "text": " and I'm really enjoying it.", "tokens": [50714, 293, 286, 478, 534, 9929, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1118, "seek": 545400, "start": 5463.0, "end": 5467.0, "text": " And I hope that this has given some of you a useful starting point", "tokens": [50814, 400, 286, 1454, 300, 341, 575, 2212, 512, 295, 291, 257, 4420, 2891, 935, 51014], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1119, "seek": 545400, "start": 5467.0, "end": 5469.0, "text": " on your own journey.", "tokens": [51014, 322, 428, 1065, 4671, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1120, "seek": 545400, "start": 5469.0, "end": 5470.0, "text": " So I hope you found this useful.", "tokens": [51114, 407, 286, 1454, 291, 1352, 341, 4420, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1121, "seek": 545400, "start": 5470.0, "end": 5471.0, "text": " Thanks for listening.", "tokens": [51164, 2561, 337, 4764, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}, {"id": 1122, "seek": 545400, "start": 5471.0, "end": 5472.0, "text": " Bye.", "tokens": [51214, 4621, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10930592032039867, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.008174538612365723}], "language": "en"}