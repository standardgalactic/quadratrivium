{"text": " Okay, so welcome to the first lecture on the vectors course. This is the basics, vectors versus scalars, vector notation, addition and scaling, and properties. Alright, so begin at the beginning. Let's list some scalar quantities. Think about mass, duration, length, temperature, charge. These physical quantities are all well described with a single number. Really they just have a magnitude, although some of them may go negative, so it's a magnitude and a sign. But still, just a simple number is adequate to describe these things. How about vector quantities? What's different about vector quantities? Well, think about these things, force, velocity, and therefore acceleration, or momentum. These things also have a strength or a magnitude. However, so let's put that down, they have a magnitude. However, they also have a direction. More than just a sign, they have a full on direction in three-dimensional space. So it's not enough to know that a force is three Newtons. I want to know in which direction is that force applied. And that then is the difference between a vector and a scalar quantity. We're going to think about how we manipulate them. Alright, so first off, the notation that we're going to use when we talk about our vectors. What I'm going to do is I'm going to use a symbol such as the letter A. So let's write that out, but I'm going to underline it. So an underlined symbol indicates a vector rather than a simple number. And when I need to specify that vector, I'm going to write it, so we're going to be three-dimensional. I'm going to write the three numbers in a column form like this. Now, if you haven't seen a vector specified before, what does it mean? Well, think of the Cartesian axes, the x, the x, y, z axes. Think in this case about coming out from the origin two in the direction of x and one in the direction of y and three in the direction of z. What we're going to do is we're going to think of our vector as an arrow, an arrow that comes from the origin to this point in space. And that arrow itself, whether or not it comes from the origin, that direction and that length of arrow is our visualization of the vector. So let me just change color to green and go ahead and draw the tip of my arrow there. There we are. So the vector is coming towards us out of the screen and it has those particular three components, two, one, three. Other people may use other notations. For example, a line over the symbol A is commonly used. When people write out the components, they may choose to do it as a row like this or even using pointy brackets like this. Now, all these notations are basically getting at the same thing. You'll be able to read textbooks or look online and see these things and understand what they mean. But within this course of videos, we're just going to use the notation that I've introduced above. So I'll erase those for now. Now, the simplest thing that you might want to do if you have a couple of vectors is to add them up. So let's think about that vector addition. What does it mean? So let's give ourselves a second vector B. We'll make it five minus two zero, let's say. I want to add these two vectors together. So we'll write that out. I simply want to add A underline plus B underline. What does that mean? Let's just substitute in two, three. Add it on two, five minus two, zero. Now, what we do is we simply add the first component of vector A to the first component of vector B and so on down the list. Very, very simple. So we're adding two plus five. We're going to add one plus minus two and three plus zero. And we just tidy that up. So that's going to be seven minus one and three. Now, how about scaling a vector? Okay. So what we can do is we can multiply a vector by a simple number and correspondingly, we'll just end up multiplying each of its components. So let's take an example, three, nine, minus twelve. What we notice is each of the three components is a multiple of three. We can just take that common factor out in front and write this instead as three times one, three, minus four. Same thing. All right? Or equivalently, someone might give us a vector that's already written in this form. It could be, let's say three over two onto two, four, minus four. Let's make it one. All right? And we can just multiply that in, in a component by component basis. So we just write ourselves a new column. Of course, three times two is three. Three times minus four is minus six. And three over two times one is three over two. Okay? So there we are. We can scale our vectors by a number in this simple way. So with these definitions of addition and scaling, can we say anything about the properties? Okay. So if I have two regular numbers a and b, then of course, a plus b is the same as b plus a. I'm not saying anything fancy here. It's as simple as, I don't know, seven plus minus three is equal to minus three plus seven. Obviously it is. We know that. Now, if we think about the same statement for vectors, a plus b, vector b, is it the same as vector b plus a? Well, it must be. Let's just write out an example, seven zero minus one, three, one, two. Is it equal to three, one, two vector plus the vector seven zero minus one? Of course it is because of the way we've defined vector addition as just being the addition of each element to the corresponding element. And this property is called being commutative. Okay. So vector addition is commutative. How about this second example? If we have three basic quantities, ordinary numbers, then if we have a plus b plus c, it's the same as a plus b plus c. It doesn't matter the order that we do them in. Is that going to be true for vectors? Well, of course, it is going to have to be true to vectors because the way we define vector addition is to add each component to the corresponding component. It's just addition. So this is for vectors. Let's write down what we mean. We mean that vector a plus b plus c as a previously worked out thing is equal to vector a plus vector b and then add on c. It doesn't matter the order we do these things. All right. And there's a name for that property. It's called being associative. All right. So vector addition has that property also. Now let's think about our scaling property. If we have ordinary numbers again, then we could take some scale factor k and multiply it into a plus b and it would just give us k times a plus k times b. Again, I'm not saying anything that isn't utterly obvious here. Say for example, I don't know, 2 into 1 plus minus 3 is equal to 2 times 1 plus 2 times minus 3. Of course it is. So how about for vectors? Is it true that some scale factor k times the sum vector a plus vector b, a plus b, and let's stress that this scale factor is just a pure number? Yes indeed. It's going to be just k times a plus k times b. So just to stress what we're doing here, let's copy down this sum of two vectors we were playing with up here. This 7, 0 minus 1 thing plus 3, 1, 2. Put it inside curly brackets maybe for a variety. It doesn't have to be curly brackets. Multiply it by some factor. Let's have 3 over 2. Had that before. Unimaginative. There we are. What's that going to be? It's just going to be 3 over 2 times the first vector 7, 0, 1 and then plus 3 over 2 times the second vector 3, 1, 2. Okay. So everything as you kind of would expect it works out. It must. And this latter property is called being distributive, so scaling is distributive over addition. And that's the end of our first video. Welcome to the second of these videos. We're going to look here at the vector dot product, also called the scalar product. We'll look at also the magnitude of a vector and the meaning of unit vectors, the geometric meaning of the dot product, and finding the angle between vectors using the dot product. Okay. So the dot product is a way of combining two vectors in order to produce a scalar, hence the alternate name scalar product. Let's give ourselves a couple of vectors. Let's have a, well, vector a can be 4 minus 4. Let's have 2, 1. And we'll have a vector b, which can be 3, 1, 3. And we're going to do the dot product of these two guys. So we write that as vector a, a nice, nice clear central dot vector b. And then we write that out as the two column vectors. And we need to understand how we compute the dot product. And the answer is we're simply going to multiply each component by its opposite number and then add them up. So we're going to multiply the first component minus 4 by 3. And then add that to the second component to multiply by its opposite number 1. And finally, the third components, 1 and 3. So that's minus 4 times by 3. Add it on to 2 times by 1. Add it on to 1 times by 3. So minus 12 plus 2 plus 3. That's going to be minus, minus 7. All right. There's the dot product worked out. It's pretty straightforward. And of course, as you can see, it can be a minus number. It can be 0. It can be a positive number. But it's a simple, pure number. Okay. So now, let's see what happens if we do the dot product of a vector with itself. Let's do a dotted with itself. So that's going to be minus 4 to 1 dotted with minus 4 to 1. Now, of course, because we're multiplying each component by itself, that will always be a positive number. 16, minus 4 by minus 4. And 2, 2 is a 4. And 1, 1 is 1. And so that's going to add up to 21. It must add up to a positive number. It's made of three positive numbers summed. Now, I want to introduce a second vector called a hat. It's related to a just by scaling it. And we're going to scale it by 1 over the square root of the earlier dot product with itself. So 1 over square root 21. And then just minus 4, 2, 1 as before. So that's just a scaled version of a. What's interesting about it? Well, now let's see what happens if we take the dot product of a hat with a hat with itself. So we're going to get 1 over square root of 21 times 1 over square root of 21, which is 1 over 21. And then, of course, we're going to get a dotted with a, the original dot product we did, which is just 21, as we know. So, of course, the dot product of a hat with itself is just 1. That means that a hat has a special property. It's what's called a unit vector. Unity being, of course, a fancy word for the number 1. So when we scale a vector, so that it, when dotted with itself, it comes out as 1, then it is a unit vector. Meanwhile, in general for a vector, the square root of the dot product with itself has the name magnitude. This is the magnitude of a vector. And it is also magnitude. It is also the length of the arrow, if we think in terms of a vector as a physical displacement and arrow that lives in three-dimensional space, then it would be the length of that arrow, as you can see from Pythagoras. Okay, now then, a different thing. The dot product between two vectors has an alternative definition, which we can show is the same as the definition we've been using so far. a dot b is also the magnitude of a times the magnitude of b times cos of some angle. And what is that angle? It's actually just the angle between the two vectors, between their directions. So here I'm drawing a vector a going in one direction and almost in the opposite direction vector b. And then the angle in question would be this angle that we see between the two vectors when we draw them coming from a common point of origin. Okay, so it's important to understand then that this angle can be more than 90 degrees. Here's what it isn't. Here's a mistake that's sometimes made by people as they start to play with the vectors. They want the angle, for some reason, they want it to be less than 90 degrees. So they try and contrive this by putting the vectors together in a way that will give them less than 90 degrees, like this, for example. And then we could try and draw an angle between these two lines. Let's see, like, let's use a red to show that it's not correct. What we should have is the two vectors coming from a common origin. Then we see that the angle between them can be more or less than 90 degrees. If it was exactly 90 degrees, then of course the dot product would be zero because cos of 90 is zero. That has interesting consequences. But right now let's work out the angle between a couple of vectors. Let's give ourselves a, we'll make it one, zero minus one, and b. We're going to make it four, one, minus one. And we'll do the dot product between those guys. So first we'll work out the dot product. Actually, let's make it minus one. So a can be minus one, zero, minus one. I think that will come out better. So we have minus four from minus one times four. We have zero times one is zero. We have minus one times minus one is one. So it's going to be minus three for the total dot product between these two guys. But we also need to find out the magnitude. Fair enough. Magnitude of a is going to be the square root of minus one times one times one. And again, one. So that would be the square root of two. Nice and straightforward. Meanwhile, the magnitude of b is going to be four fours of sixteen plus one plus one. It's going to be eighteen. The square root of eighteen. But I think we can do better than that. Square root of eighteen is actually square root of nine times the square root of two. And that means it's three times the square root of two. Okay, now we've got everything we need. Let's pull down a copy of that definition there relating a dot b to its magnitudes in the angle and fill in what we know for this particular choice of a and b. We've got minus three is therefore equal to root two times three root two times cos of the angle that we're after. So now we just need to rearrange. That means that cos of the angle is going to be equal to minus three divided by what we've got two lots of root two. So that's just three times two. And if we simplify that down, it's just minus a half. Now we may just remember or use a calculator to find out. This means that the angle in question is in fact going to be simply one hundred and twenty degrees. Or you can use radians if you prefer radians. So there we are. That's the answer. The angle between these two vectors, 120 degrees. And that's it for the second video. In this video, we're going to see how to calculate something called the cross product of two vectors. It's also called the vector product because the output is a new vector. And we'll see how to test that the answer is correct. So here I've written a cross b is equal to c. And notice that the symbol for the cross product is just the multiplication symbol that you're familiar with from basic arithmetic. I've given the vector a a particular form, this two, three, four column vector. And similarly b is written as four, five, six. So we're going to go ahead and find out what is the cross product of these two vectors c. Because it's a vector, we'll need to do some working for each of the three components. Now what I'm going to do is I'm going to paste up some structure to help us work through the problem. So don't worry because it's going to look like a lot. But you don't need to write all this out every time you want to do a cross product. I'm just putting it here so we can really spell out the process. Okay so let's go ahead and work out the first component of the output vector c. Strangely enough what we're going to do is we're going to ignore the first component of vectors a and b. So I'm just going to cross those out. Those aren't used. And what we're going to do is we're going to multiply a certain of the other components. What we're going to do is we're going to multiply the second component of vector a with the third component of vector b. I call that the falling diagonal. Because when we draw it like this we start high and then go low. And then we're going to subtract off the multiple of the rising diagonal 4 and 6 here. The last component of vector a and the middle component of vector b. So what we have here is 21, that's 7 3's a 21, minus 6 4's a 24, that's minus 3. We can go ahead now and write that in as our first element minus 3. Now let's move to the second element of the output vector c. We'll start by ignoring the second component of the two source vectors a and b. We can cross those off. And again we're not going to multiply some diagonals. But what's different here is we start with the rising diagonal 4 times 5. The last component of vector a times the first component of vector b. The rising diagonal 5 4's a 20. And then we subtract off the falling diagonal. So 2 7's a 14 and that's going to give us 6. So we can put that in. Now let's move to the third and final component. As before we start by noting that we will ignore the third component of the two source vectors. And we're going to need some diagonals. It's the same pattern as the first falling diagonal first. So 2 times 6 and subtract which is 12 and then subtract off the rising diagonal 5 3's a 15. All right so that's going to be minus 3. Pop that in. We see that we have quite a simple vector here. There's a common factor of 3. Let's bring that out. 3 then minus 1 to minus 1. That is our vector c. That is a cross b. Notice again the pattern. It was the falling diagonal minus the rising diagonal for the first component. And then the rising diagonal minus the falling diagonal for the second component. And then for the third it was back to the same pattern as for the first. Now these look a bit like letters to me. They look a bit like a v. The middle one perhaps an n and the final one a v. I like to remember that as a little sentence which is voles never vary. Because in my opinion voles don't vary very much. Here's a vol. This one doesn't vary at all because it's stuffed in a museum. However if you compare it to some other voles which I found these on the internet I think they're all pretty much identical and it's a big difference there. So for me voles never vary. If for you they do seem to vary then think of a different way of remembering it. But the important thing is that the first thing is the falling diagonal and then subtract the rising diagonal of v shape and it alternates. Okay how to check your cross product has been worked out correctly. This is really useful stuff. So let's give ourselves another example. We'll have two three one and then we'll have let's say three seven minus one. Let's get a minus in there. And that's going to be equal to something. We'll work it out in a minute. For now I'll put x, y, z. Now how am I going to test once I found those x, y and z that I haven't made some kind of slip? I mean there's a lot of mental arithmetic. If we don't write it all out we're going to be doing a bunch of multiplications. I could easily slip up. How am I going to test that? It turns out there's a very interesting property of the vector c that we get out after the operation if we've done it correctly. That is as I've written here that a dot dot product with vector c is zero and so is b. So either of the input vectors a and b dotted with the correct cross product c should give us zero and that's great because the dot product is very easy to work out even by i as a check. Let's go ahead and do it. So I've copied it down here. We're going to want to work down our various components. Let's do the first component of c. So what do we do? We ignore the first components of a and b and we do the falling diagonal. So that's going to be three times minus one and we subtract the rising diagonal one times seven. So that's just let's just write that out. Normally I wouldn't bother to write all this out but let's go ahead and do it here. So it's minus three minus seven and so that's going to be minus ten as our first component. Now we work out second component. We ignore the second component on the input vectors. We do the rising diagonal one times three and subtract the falling diagonal two times minus one. So what have we got? We've got three here minus minus two and so that's going to give us five and then finally the third component ignore the third component of the input vectors. Do the falling diagonal. Two times seven seven two is a fourteen. Subtract the rising diagonal three three's a nine. So we're going to have for our final component fourteen minus nine which is another five. So that's quite a simple vector. It has a common factor of five in there if we wanted to write it out that way. Now let's test that guy versus the a and b vectors to see if it passes our test or have we made a slip. So let's just be completely explicit about that. We're going to start by testing the dot product of the vector a with our hopefully correct cross product c. I'll write it out two three one dot product minus ten five five. What's that going to be equal to minus twenty and then three fives of fifteen and then one five is five. Aha! It does equal zero. That's correct. That's a very very encouraging thing but for real thoroughness we're going to test the other one as well. So this is b dot c. Let's check that out. So that's three seven minus one dotted with again minus ten five five. This time it's going to be minus uh minus thirty from three times minus ten and then seven fives of thirty five but then minus five from the last element zero again. Aha! So it has in fact passed both of our tests and we're now very confident that's correct. This is a great test to do. One word of warning though the one thing it won't pick up is if you've done your rising and falling diagonals in exactly the wrong way around by starting with the wrong pattern. So do remember the VNV pattern and this test will check for any particular slips in your multiplications and that's the end of the video. Okay so in this short video I'm just going to look at four more examples of the cross product for practice and here they are. Okay so here's the first one. We want the first element of this cross product so we ignore the first elements of the two source vectors. We do the falling diagonal three times zero that's zero and we subtract the rising diagonal seven times minus one that is minus seven so we're subtracting minus seven that means we'll get plus seven. So the first element here is in the seven. Okay so now we want the second element that means we ignore the second element of the two source vectors. We do however the rising diagonal first seven two is fourteen minus one times zero is zero so that's fourteen. So the second one was the rising diagonal first if you follow me and then finally to get the third component we ignore the third component of the source vectors and we do the falling diagonal one times minus one is minus one minus three two six so that is minus seven. Okay so there's our solution seven fourteen minus seven but is that correct or have we made a slip? It's a good time to check the old dot product trick so if we call this A cross B equals C then we should find that if we do the dot product of one of the input vectors say B with C then it should be zero. Let's check that seven twos are fourteen minus one times fourteen is minus fourteen zero times minus seven is zero so that's fourteen minus fourteen it's correct let's do the other one it's harder so one times seven is seven three times fourteen is forty two that's forty nine in total and then the final term here seven sevens are forty nine but that was with a minus number so we've got in fact forty nine minus forty nine is zero so another one of those dot products is correctly zero so what we found out is that A dot C and B dot C are both equal to zero as they must be so we're now very confident that we have the right cross product let's do another one okay so we're going to want the first element so we ignore the first element of the two source vectors and we do eight threes eight threes are twenty four minus two two times one is two so that's twenty two let's do the next element so we ignore the middle elements and we do the rising diagonal four twos are eight minus eight that's just going to be zero and then finally we ignore the bottom elements and we do the falling diagonal minus the rising diagonal one minus twelve is minus eleven so there's our solution twenty two zero minus eleven we notice we could take eleven out of that as a common factor it would make the next stage very easy but let's just let's do it the hard way and do the dot product so four times twenty two is eighty eight one times zero zero and minus eighty eight actually pretty easy to confirm that zero let's do the other one one times twenty two is twenty two three times zero and again two times uh minus eleven again zero so that's fine that one's past its checks as well on to the third one okay so um this time I think I might take a common factor out just to show us doing that because I see that this twenty five five fifteen chap is going to lead to some pretty big numbers but maybe I don't need to do that I can just take the common factor of five out of the first vector we're calling it vector a so that's just five one minus three and then I go ahead and write vector b which can't be simplified it's just one three minus two we'll do this cross cross pod excuse me we'll do this cross product and then we'll put the factor of five in at the end that's fine to do it that way around okay so let's go ahead and write that out there's our factor of five and here's our cross product so the first element of our cross product we ignore the first elements of the two source vectors we do the falling diagonal that gives us a minus two we subtract the rising diagonal that's a minus nine so that's minus two plus nine that's going to give us a seven and now the middle element we ignore the middle elements on the two source vectors we do the rising diagonal this time gives us minus three we subtract the falling diagonal that gives us minus uh ten which means we're gonna have to add on ten so that's minus three plus ten it's another seven okay and then finally the third element we ignore the third elements on the source vector we do the falling diagonal that's five threes of 15 and we subtract the rising diagonal one that's going to give us another uh a 14 so in fact a really simple vector here because we could take out a factor of seven if we want to but um let's check those dot products do it before or after we take out the factor of seven it's pretty easy that's going to be uh four times seven minus uh and minus two times 14 yes that goes to zero let's do this one just quickly uh 35 and another seven is 42 but minus three times 14 is exactly minus 42 so that one is also satisfied we've passed our checks that looks pretty good we can leave it like this or if we want we can take out that factor of seven and do 35 times one one two very simple very nice uh vector there okay let's come here uh now come down to the bottom and look at the final one we notice is actually the cross product of a vector with itself it's the same vector here so what are we going to get well we can just easily enough work it out we ignore the first two elements and we do four um two times minus four and minus four times two so it's something minus itself that's just going to give us a zero obviously and uh let's keep going if we ignore the middle terms and do the rising diagonal minus the falling diagonal again threes and minus fours the same product so something minus itself zero and it's going to be the same for the final element so the cross product of a vector with itself is always going to be uh the zero vector now it's important not to write that just as the scalar zero because it is a different object it's the vector zero it's a set of in three-dimensional space three zeros that's what we get when we cross a vector with itself of course this is going to trivially satisfy our condition on the a dot c is equal to zero and b dot z is equal to zero that's clear and so uh i think that's a nice set of four examples done quite quickly there they're not too bad are they so that's the end of the video okay in this video we're going to look again at the cross product but this time we're going to ask about its geometric meaning and its properties when we come to manipulate it okay so if some vector c is the cross product of two other vectors a and b we've already seen how to work that out but what we can reasonably now ask is what does that vector c look like you know if we imagine a particular couple of vectors a and b there in space where is this vector c how is it related to them we know how to work it out but what's its relationship with them how should we think about it and that's what we're gonna we're gonna figure out now so we know that c is a vector so it has two properties it has its magnitude and direction let's think about the magnitude first what is the magnitude of c and how does that relate to um a and b what is the length of that vector it's pretty simple the magnitude of c is the magnitude of a times the magnitude of b times sine of the angle between a and b this is very similar to the dot product except with a sine instead of a cos so there we are there's our two vectors a and b and an angle between them and from those magnitude to the lengths of those two vectors in the angle we can work out the magnitude of c note that if we cross a vector with itself the angle will be zero and so the cross product will be zero just as we've already seen in our examples that was easy enough what about the direction of this new vector c how does that relate okay here's the thing the direction of c is perpendicular sorry for my writing there we'll be writing c is perpendicular to both vectors a and b so it's at right angles to each of those vectors separately and simultaneously what does that look like well actually we can draw it in one of two ways one of which is right and one is wrong let's just do that so here's um here's our vector a here's our vector b if we draw c like that and make it clear with this little symbol that it's at right angles to those two vectors that would be perpendicular to them both how about this we could also draw a vector a draw vector b again and we could go in the opposite direction simply literally the opposite direction and that would also be perpendicular to these two vectors one of these is actually strictly the correct case and the other is wrong by essentially a minus a minus one multiple what's the way to work that out so let's let's now figure that out there's actually a rule to remember it by it's called the right hand screw rule so let's draw that out kind of really clearly one more time we have two vectors a and b and we are going to say that a cross b is equal to some vector c that's fine so what we do is we put on the line along which we know c must lie so this is the line that's perpendicular to both a and b and we simply have to ask ourselves um in in this picture does the vector c uh go upwards or does it go downwards the trick is to write on the angle between a and b and give it a direction so that it's increasing from a to b it's the angle from a to b then you imagine taking your right hand and gripping that line in such a way that your fingers curl in the same direction as the angle increases and then your thumb points in the direction that the uh in the actual direction of c let's do another example uh just to uh really make that clear here's a and b again so we know we need to be I've drawn these lying in a plane so we I'm now trying to draw a line that's perpendicular to that plane vector c must lie in one direction or the other along this line what do we do we draw on the angle we now take our right hand and we imagine gripping that that line we've just drawn in such a way that our fingers curl uh in the direction in which the angle is increasing so it's like the anticlockwise direction in this picture and that's and then our thumb points in the correct direction for that vector so it's in fact these are the two opposite cases so that's the rule that allows you to construct the correct direction for your vector geometrically geometrically okay uh then let's just finally wrap up by thinking about the cross product and asking whether it has those properties that we looked at before for a vector addition the commutative property so for example is a cross b equal to b cross a it is not it is not equal to it unlike the dot product unlike addition this one the cross product it matters the order and in fact it simply uh introduces a minus sign if you swap the order of a and b so it's not commutative it nearly is in the sense that it gives you something similar it gives you uh the same thing up to a minus sign it's important to remember and you can just verify that by thinking about how we work out a and b with those diagonal products now how about the associative property can we say that a cross b cross c where b and c have already been worked out it's the same as a cross b and then cross c uh what do we think is that going to work or not in fact it uh this is the associative property we might ask whether this is true and the answer is no again uh the cross product does not have this property so the order in which you do your cross product if you have doing the cross product of three vectors does matter we can easily convince ourselves of this just by looking at a particularly uh convenient example let's just use cartesian vectors i j k so let's just remind ourselves where these guys lie they're perpendicular to each other i j and k just our unit vectors going in the x y and z direction so suppose we have this guy i cross i cross k if we try evaluating it this way around with the i cross k being worked out first well that's just going to give us in fact minus j which you can confirm with the right hand rule that we just introduced and then that in turn will give us k that's fine so we've worked out um in that instance the answer is minus k now let's do it the other way around i cross i if we do that first that's just going to be zero because i cross i is zero so it's game over already at that point so we can see two radically different answers here just depending on our order finally we could ask about the distributive property so are we allowed to multiply through using the cross product uh if we um if the second object in our cross product is a sum of two vectors can we do this well uh this at last is something that we are going to be allowed to do it is the distributive property and the cross product operation the vector product does have this property we are allowed to do that but of course we must make sure to make uh to keep the order the same okay so i think that's everything for this video okay in this lecture we're going to be looking at something called the scalar triple product so what we're dealing with here is taking three vectors and combining them in a certain way in order to yield a single one scalar quantity so three vectors into one scalar scalar triple product suppose we have a we dot it with b which itself is crossed with c that is the scalar triple product that combination now here i've put brackets to emphasize to do the cross product first but we can just write a dot b cross c without the brackets why because we have to do it in the correct order if we try to do a dot b first and then cross that with c it's a nonsense because that will be a scalar cross-producted with a vector doesn't make sense all right then so let's do one we'll make up some vectors let's have a is equal to three one minus one and b is equal to two zero four and c is equal to minus one minus two three okay there are vectors and let's go ahead and work it out so first we'll need to do the cross product b cross c so let's write that out so i'm bringing these down now remember you can work out the cross product by whatever your favorite method is i'm just going to do it in the method i introduced before which is we ignore the first elements and we do the falling diagonal here zero and subtract the rising diagonal minus eight that gives us the first element eight then we ignore the middle elements and we do the rising diagonal gives us minus four subtract the falling diagonal which is six so that's going to give us a minus 10 entry and then we ignore the third elements we do the falling diagonal gives us a minus four and subtract zero so that's going to be minus four that is our candidate for our cross product but it's always good to test how do we test a cross product we try dotting it with either of the input vectors and check we get zero so here we'll get eight twos are 16 and four minus four is minus 16 add it up that is zero and now we try the other combination here we're going to have minus one on eight minus eight and then plus 20 and then minus 12 that does indeed add up to zero it's past our checks those were just checks but it was good to do them and so we're now very happy that that is the correct cross product to finish the scalar triple product we now just need to dot that with a so let's write it out again minus 10 minus four and do the dot product that's 24 minus 10 plus four is going to be 18 that's the answer that's our scalar triple product it could have been a positive number a negative number could have been zero in this case it's 18 now let's do another one so I'll erase this but we'll simply use the same the same three vectors but we'll do them in a different order as our second example so let's do b dotted with c cross a so of course we have to start by doing that c cross a combination first so let me write that down quickly minus one minus two three crossed with three one minus one so we start with the falling diagonal that's going to be two and then we subtract three that's minus one and then we have a rising diagonal that's going to be nine and subtract one that's eight and then we have a falling diagonal minus one and subtract minus six so that's going to be five in all okay did I get that cross product correct or not do the dot product test minus three minus three eight minus five that one's passed let's try this dot product combination as a second check double check one minus 16 plus 15 that's also going to come out at zero so it's passed both of my checks that one is zero as well we're happy that this is indeed the cross product c cross a we now need to complete it so what we're doing is um b which was 204 dotted with what we found our cross product minus 185 so again go ahead and value this minus 20 and 20 18 again all right so our second example has also given us 18 does this mean that it doesn't matter in which order we do the elements of the uh scalar triple product let me just write down the answer to that and then we'll look at it it turns out that for any vectors a b and c then a dot b cross c is equal to b dot c cross a these were the two cases we looked at and it's also equal in fact to c dot um a cross b this will always be true in this case it was equal to 18 but these three things will always be equal there are three other combinations we could write down in principle there are three other ways to combine a b and c we could have a dot c cross b or we could have b dot a cross c or we could have c dot b cross a now it turns out that those things are easy to see what they will be because let's just look at the difference from the ones above i've just swapped the order of the cross product and we know that when we oops we know that when we swap the order of a cross product we introduce a minus sign so if the top three cases were equal to 18 the bottom three cases must be equal to each other and equal to minus 18 and in general uh this is the same rule for all uh uh scalar triple products your three of them are equal and three of them uh are equal to one another but equal to the minus of the first three so to speak and and how can you tell which ones are equal it's helpful to write out this little cycle a b and c written in a circle like this if we are going around in a clockwise direction here b dot c cross a but that's clockwise around our wheel then um and here's another one that's clockwise c dot a cross b those guys all belong together so the guys that are in the clockwise direction all belong together and the anti-clockwise guys they belong uh together and they're the minus of one another these two groups all right so um that's uh that's i think all we need to do as practice for uh doing the scalar triple product and uh knowing what we ought to get let's think about something else i'm going to introduce you to something called the parallely pipette uh that's why i say i'm not sure how to pronounce it parallely pipette anyway this guy is a three-dimensional shape but first i'm going to remind you of what a parallelogram looks like so here's a rectangle and here's a parallelogram that we get um if we have uh the pairs of the sides are parallel to each other but they are not at right angle at right angles around the vertex now consider this rectangular box and let's tie it up there we are and consider what happens if we uh build it out of edges that are in groups of parallel edges but are not all at right angles to each other so uh let's see if i can draw this reasonably realistically as a three-dimensional object so i'm going to draw this and then i'm going to stress which edges are parallel to each other all right here we are okay let me change color so consider these four edges of the object are all parallel to each other in exactly the same way that in our simple parallelogram these opposing edges were parallel and then these four edges are all parallel to one another again in our 3d shape just as these two edges are parallel and then we have another set these four edges here in yellow are also going to be parallel to one another that object is a particular three-dimensional solid it's clearly a generalization of the uh of the box in that we're allowing ourselves to um have slanting edges if we want to now let's introduce three vectors a b and c to represent these three kinds of edges you see that all the green edges are the same vector a and so on what happens if we do a dot b cross c that it turns out the magnitude of that if we drop the sign then the magnitude is just the volume of this shape so it contains uh uh of course the simple case of a rectangular box as a special case but this will work for any parallel parallel pipette uh that we care to think of with those three vectors can always be combined with the scalar triple product to give us the volume and that's the end of the video welcome to the uh third um topic in this video series where i'll be introducing the matrix and thinking about what is a matrix product all right so essentially a matrix is nothing more than a grid of numbers simply a grid of numbers that could be positive or negative or fractional or zeros and when we uh specify the shape of our grid of numbers or we do so simply by stating how many rows we have and how many columns so we're gonna hear about rows and columns a lot in this video um in this video course i'm going to use a particular uh way of writing a matrix as a symbol and i need to do that i'm going to just use a capital letter and i'm going to the letter is going to be double underlined i'll double underline that symbol so here we go a underline that means the matrix a and how would we write it so that's uh just like this essentially a grid of numbers and we put it in curvy brackets just to give it some structure so this is three rows two columns that one here's a matrix b let's make it a square matrix let's put in a fraction to show we can minus 10 zero okay so there are two different examples of a matrix easy enough but it gets more interesting when we try and combine them so i want to talk about matrix multiplication addition is simple and it's just an element by element addition but multiplication is not so simple so here's how we write it the multiplication of matrix a by matrix b is simply written like this a b and it gives us some new matrix c which may be a difference shape from both a and b as we'll see let's give ourselves a couple of examples um three zero minus one two three four and matrix b can be just um one two zero minus three so there are our two matrices here i've chosen them such that a b that multiplication will work it will exist but actually if we try it the other way around it will turn out that the multiple the multiple of those two matrices doesn't even exist it's not a well-defined thing so this is an extreme case of an operation uh not being reversible in its order in other words matrix multiplication is not commutative okay so uh let's just erase that and go ahead and see how the multiplication actually works the trick is to multiply the each row of matrix a the first matrix by each entire column of matrix b what does that mean well let's write out our example three two zero three minus four minus one minus one four uh one zero two minus three now i know that this guy is going to have uh three rows and two columns the output matrix you'll see why in a bit i'll just put these blanks in for now the question is how to work out each of these numbers let's choose this one first okay now notice this guy's address if you like is row one column one of the output matrix c i'm going to need to in order to work this guy out i'll need to look at the whole of um row one in the first matrix in matrix a and the whole of column one in the matrix i'll need to combine those guys and how do i combine them i just multiply element by element as i go along the row and down the column so three times one just gives me three and then i add on the next combination two times two is four so three plus four is going to give me seven that's how i combine those two i'll jump back here and i'll erase there and i'll just put in my seven all right so that's the the general way it works let's go ahead and do the other elements of our matrix c let's do this one notice this is still row one so i want that first row it's now column two that's its address so i want the second column three times zero and two times minus three is how i'll work that out and that's just going to be minus six so let me jump backwards um and erase my blank symbol and write in minus six okay maybe i went a bit fast let me um spell this one out more explicitly okay so here i now have row two column one that's the address of that guy i want all of row two and all of column one i want to look at those guys and i want to multiply along so zero times one and three times two that's going to give us just six in total when we add them up so let me erase and put in six and now this element that's uh row two column two so i want all of row two want all of column two and multiply zero times zero and uh three times minus three is minus nine so that's going to be a minus nine if i go backwards and just put in minus nine here now we're finally on to the final third row so we're going to want the third row of a and in this case the first column so that's one times minus one and four times two is eight that's going to be seven minus one plus eight and then finally last row last column uh four times minus three is twelve and zero minus twelve all right so there we are that is our matrix product c formed by combining each row in each column it's quite a lot of work and it would be even more if we had bigger matrices but we said that um we get something quite different if we try multiplying a and b in the other order so let's go ahead and do that now what if we have one zero two minus three that's b on to three two zero three minus one four that's a so we can try it we try and multiply row one by column one and we immediately find we cannot because they are a different length a different list so there is no third element of our row to multiply with our third element of the column just pause the video here um and have a look at that and see why that must be impossible for us and so sometimes matrix multiplication is impossible all right let's look at a few uh little um further examples and you may want to pause the video to convince yourself in each case it's true is this thing possible for example pause it and think this one is not possible this is not possible again because there are two elements in say the first row of a and three elements in the column single column of b there's no way to do that as a series of element by element products how about this we just have this row matrix and this column matrix can we do that yes this one is perfectly possible actually it just produces a single number in fact it's a bit like a like a um a dot product it's the whole of row one times which is the entire matrix um and then the whole whole of column one this thing is called a row matrix and this other guy is called a column matrix for obvious reasons okay how about this let's have a look at this one what if i swap the order of my own column i just swap them around can i do that is that going to produce a legitimate matrix actually yes it will this time swapping our two matrices a and b around has produced um something which exists it's actually a huge matrix it's three by three it must have three rows and three columns because a has three rows and b has three columns how does it work let's look at that guy for example it's just simply the number there which is row one is just a number and column two is just a number single number so we just do that product there's no problem pause the video if it's confusing all right so again the point here is that um a times b is generally not equal to b times a even if they both exist they may not be the same they may not even be the same shape uh however we can go on and ask about the other kinds of properties of the matrix product operation a onto b times c is that the same as a times b onto c does the order matter actually it is the same it does work in other words we have the associative property how about a into b plus c some of two matrices yes we can have a onto b plus a onto c that is therefore the distributive property matrix multiplication does satisfy those things it's just not commutative okay let me make a bit more room up here in the top of the screen and put one final puzzle up suppose i have this two row three column matrix and then a mystery matrix m and then i have a simple column matrix of two rows and i'm asking what shape should matrix m be or is it even is it is it possible pause and think about that and in fact it's just a column matrix of three elements you may want to uh just meditate on that and see that it's correct okay that's the end of this video okay welcome to this video in this one we're going to take a look at how to work out a determinant what is it how can you find determinants of varying sizes so a determinant is a scalar it's just a number could be positive could be negative could be zero and it's derived from a square matrix a single number derived from an entire matrix um now the determinant of m would be written with m with the modulus signs either side of it even though it can be a negative number so here's an example of m and here is how we would write the determinant of m note that we don't bother writing squares uh straight sides and curved brackets as well there's no point in that it's just enough to have the straight line sides so let's start with the definition of a uh two by two determinant that's the easy case to look at so let's write out um a general two by two just using symbols we'll have a b c d written inside our straight line sides indicates a determinant it's simply a d minus b c okay so that's the falling diagonal the leading diagonal is also called minus the rising diagonal multiplied together very simple very simple and that is how you can just look at and evaluate a two by two determinant so for our example one two three four one times four is four subtract off a two times three is six and so that's going to give us minus two is the determinant okay so a three by three determinant is um going to be a bit more work what we do is when we have a three by three determinant we evaluate it by breaking it up into a number um up to three smaller determinants each of which is a two by two and for that we have our definition for immediate evaluation so we break up bigger determinants into little ones and then evaluate them now i'm going to write out something here that's like a chess board but instead of black and white i have pluses and minuses you'll see why in a moment the thing to notice though is that we alternate plus minus plus minus along each row and each column in this three by three grid okay so now let's work out a three by three determinant again i will just use general symbols a b c d e f g h i right now first i have to choose a row or a column i'm going to choose this top row for the first example and i'm going to work along this row and i'm going to start with the a symbol now i go and i look on my chart and i see that there's a plus sign in that in that slot of my grid that means i put down plus a and now what i do is i ignore the whole row and the whole column that a is in and i look at the remaining four numbers and i write a little determinant just made out of those guys in the same order they appear so e f um is going to be uh in my main determinant there and hi those are the remaining four guys in the same order they appear now b the next term that has a minus sign according to my chart so i will put in minus b and multiply it by again a smaller two by two determinant the one i get if i delete the row and the column with b in it and look at the remaining guys d f g i and i just i just uh write those guys out um in the same order they appear as a small two by two determinant finally there's c c appears with a plus sign according to my chart um so i need to put down plus c and i need to multiply by well we delete the row and column with c in it and we just see the remaining determinant d e um gh so uh i simply imagine that that row and column was not there and then that's what the determinant becomes and then of course those two by two determinants i can just write down what they are using my uh rule of multiplying down the diagonal and subtracting the anti-diagonal okay there we are so that is uh in general what a three by three determinant evaluates to but it's not the only way to do it let's write it out again and this time choose uh let's choose a column and a different one let's choose this column i'm also allowed to work down this so i would start with b as my first term and i delete the row and column with it in and i'd see what i are the remaining terms and write them d f g i except i've forgotten something uh there's a minus sign attached to that particular entry so that should actually have been minus b all right and then similarly plus e and i delete the row and column which has e in it and then i just make a two by two determinant from in this case it would be the corner elements a c g i and then finally minus h and delete the row and column with h in it make a two by two determinant determinant of what's left a c d f okay and of course i could then write out these two by two determinants explicitly but the point is it will get give me the same answer let's do an example and see why we would choose one method or the other so here are just some random numbers i'm making up let's stick that in it's three by three first off let's work along the top row and as uh as we did in our first example so that's going to be three uh let's put in the full determinant here and then minus one and again the determinant i get by excluding the top row and middle column and then plus two uh that's going to be seven zero five minus one and i can go ahead and i can work out explicitly what this comes out at as you can see i'm doing here and in fact it will be 12 plus 20 minus 14 and it comes out as 18 so there we are we've worked out a three by three but we could have done it in a different way let's say we went along this bottom row that's fine so then it will be five and i will be left with one two zero four for my mini terminate and the next element along a minus sign and it was a minus number anyway minus minus one that's going to be three two seven four let's just see how we've done that three two seven four by deleting the bottom row and middle column of that now what about the third element here well we actually have a zero plus zero times sum determinant i don't even care what that is because it's been multiplied by zero that's the beauty of it so i've got five into four minus zero and then we're going to have four threes of 12 minus 14 so that's going to give us 20 minus two is 18 same answer as before okay what about if we have even bigger determinants than our three by three example there if we have if we go bigger still we for example a four by four we're just going to break it up into a number of three by threes and each of those would have to be broken up into two by twos lots of work so here we are here's a general four by four we are going to expand it along a row or column let's say we want to expand it along this row for example and we'll take in turn a b c d and we'll need to know what sign to use so here's our checker board or our chess board pattern of pluses and minuses just extend it out now to a four by four and you can see the rule here is that if you like if the row number plus the column number is an even number then there's going to be a plus sign and if it's odd it's going to be a minus sign you can confirm that for yourself look at this one it's going to be at row two and column three and that's five and so that's a minus that's one way to remember it or just draw it out anyway we're going to use that rule so we go ahead and we write plus a and now we need to do the entire three by three determinant that we get when we delete the row and column with a in it so we just write out that little square block that we see it's quite easy to copy across and now we're going to have minus b and we need to delete the row and column and then transcribe across the elements that are left as a three by three just being careful not to make any slips and you see that we're going to continue so let's delete this just to be completely explicit I'll finish the job off so I think I hope it's off is what we're doing we're onto plus c and now we're going to just have e f h i j l and m n p and then finally minus d um onto what we get if we delete the top row and right most column which is left over then e f g i j k m n oh there we are that's how we handle a four by four each of these three by threes would then have to be evaluated and so on so a lot of work and that's the end of the video okay welcome to this fifth topic which is eigenvalues and eigenvectors we'll introduce the problem and we'll see how to find eigenvalues finding eigenvectors is for the next video so suppose that we are given a square matrix um n just some matrix but we are told that m multiplied by v is equal to lambda multiplied by v for some scalar just some number lambda and for some column matrix uh v and a column matrix of course the same as a vector I will just say vector from now on okay so this scalar lambda could be positive negative or zero meanwhile this vector v could be anything except the trivial boring case of just zeros it's something other than that our challenge then is that we're going to be given a square matrix m and we have to look for any scalar lambda and vector v that satisfies the equation and such a scalar is called an eigenvalue and such a vector is called an eigenvector so in that language m multiplied by some eigenvector gives us back that eigenvector just multiplied by a scalar the eigenvalue okay so first off let's notice that if we are given a candidate a possible eigenvector v to try perhaps for a multiple choice then it's easy to test we'll just go ahead and try it so here's a square matrix a two by two two four one minus one and uh suppose we write down v is equal to one minus one and this is suggested as a possible eigenvector well then we would just test it out to see if it matches our equation we try multiplying m by v so here we go two four one minus one and v is one minus one that's a column and so we do row times column that's two and minus four is minus two and again row and column that's going to be one plus one is two and we notice we can take out minus two as a factor and then it will be the vector left is one minus one but that is just v so minus two is indeed a scalar that multiplies v and we've succeeded improving that v is our eigenvector and our eigenvalue that goes with it is minus two okay so that's great if we're given eigenvectors to check out but what if we're not given any eigenvectors or eigenvalues then we must find any possible eigenvalues for ourselves there could be more than one and for each we must find the corresponding eigenvector v and in this first video we're just going to be finding those eigenvalues okay so here's a little bit of quick manipulation and a side we know our equation is mv is equal to lambda v i can certainly just bring it all to the left hand side and write mv minus lambda v is equal to zero as long as i don't remember to write that as vector zero but now let's do something interesting let's insert the identity matrix which won't change the equation but it will be important for the next step mv minus lambda times the identity times v is equal to vector zero the identity doesn't change the equation but now i can factor out both those two matrices the m and the minus lambda times the identity that's a matrix i can factor those out and it allows me to write that line now that if form of the equation it turns out this can only be solved for any interesting v any v other than just zeros if the following equation is true which we can easily prove but we're not going to prove in this video m minus lambda times the identity the determinant of that is equal to zero so we're going to have plenty of time to think about that but let me just put a green box around it because that is the fundamental equation we're going to use this will allow us to find all the eigenvalues that satisfy our basic eigenvalue equation so let's do an example it's the best thing let's do m as a two four this was the one we had before two four minus one little square matrix and so let's write down what this lambda times the identity is for a two by two it's going to be lambda zero zero lambda very simple and so this matrix that's the difference of the two of them two minus lambda four one minus one minus lambda just the difference of those two things as a determinant is equal to zero that's all so there we have it we've just subtracted lambda off the down the diagonal but now we need to solve this so we just write out the determinant two minus lambda multiplied by minus one minus lambda down the diagonal minus four the off diagonal is equal to zero all right so we expand this out minus two minus two lambda plus lambda um plus lambda squared minus four equals zero let's come over here for a bit more space tidy that up a bit what if we got lambda squared minus lambda minus six is equal to zero can we solve this actually it's quite easy to factor that's going to be lambda minus three into lambda plus two is equal to zero so that's true if either lambda is equal to three or it's equal to minus two and those are our two eigenvalues we found them using that equation in the square box let's crack on and do one with a three by three matrix m here we go matrix m is equal to let's have minus two one three one minus one zero and minus one one two i've worked i've checked that before and it will work for us nicely now let's remember of course the rule from the previous screen and we just need to apply that so let's go ahead and write it as a write our determinant out we need to have minus two minus lambda and then just one and minus one and then one minus one minus lambda and then one and three zero two minus lambda i'm just subtracting lambdas down the diagonal making it a determinant setting it equal to zero now i'm going to work along this row because it's got a zero in it so that makes me like it a bit more as a determinant the first number is going to be minus one why because it's a one and let me just quickly write out our little lookup table of pluses and minuses for doing determinants so it was a one and then it picked up a minus sign and then we have the mini determinant that's made out of those four terms so that's one three one and two minus lambda all right and then the next term is going to be plus and then it's going to be the term itself is minus one minus lambda and the mini determinant that we get when we exclude that row and that column is just made out of the corner terms that's going to be minus two minus lambda and three and one and two minus lambda and that's it because the zero term gives us nothing so it was only those two mini determinants let's write them out minus one two times lambda and then three times one is three let's expand that one out and then this one has the term in front minus of one plus lambda and then we have to expand out the determinant minus two minus lambda times two minus lambda down the league diagonal minus minus three is plus three there we are is equal to zero and then we just need to tidy that up we need to clean it up a bit that's going to be minus of minus lambda minus one for the first term let's turn that it one into pluses multiply through by the minus one and here we have minus let's make that lambda plus one right that way around and then tidy up inside here we expand it out minus four plus two lambda minus two lambda plus lambda squared and this three is equal to zero we need to keep on working to tidy that a bit more this term here is in fact going to be just I see the lambdas cancel out lambda squared minus one that's very nice that's come down very very neatly so now we can really tidy that up and we can take out a common factor of lambda plus one and the first term was just that so there's one for that and the second term we've just found is lambda squared minus one pause the video and check you agree that that's tidied up version of the equation now the way that can be zero is either the first term is zero which requires lambda is equal to minus one so there's one eigenvalue for us that's one option one of our eigenvalues has been found or the second term here has to be zero so let's do a bit more work with that what we're saying is to neaten that up we're saying that lambda two minus lambda squared is equal to zero in other words lambda squared is equal to two and so lambda is going to be plus or minus square root of two that's two more eigenvalues three in all that we found for this three by three matrix and in the next video we'll see how to take each of these values and derive the corresponding vector this is the second of two videos that looks at eigenvalues and eigenvectors in the first video we have seen how to find eigenvalues and we write these as lambda for each lambda how do we find the eigenvector an eigenvector that goes with it we know that our fundamental equation that we're working with here is that when matrix m multiplies an eigenvector v it just gives us back that v scaled by lambda and another way to write that is the m minus lambda times the identity multiplied by v is equal to vector zero this is the same equation written two different ways what we need to know now that we um have obtained our lambda values we just need to look at one of these equations and figure out an acceptable vector i find that it's more useful to use the form on the right hand side okay let's look at a particular example we'll have the matrix two four one minus one we looked at this before and we found already that its eigenvalues are equal to three and minus two what we're going to do now is we're going to take those values one at a time and figure out an acceptable eigenvector we're going to write our vector that we need to find as just x and y where we need to find these x y values now take a look at this green underlined equation and in particular the matrix which is a difference of two different matrices m and lambda times the identity now that we have our lambda value of three we could write out that difference that difference matrix it's going to be two minus three and then just four and then just one and minus one minus three there it is we're saying that when that multiplies our vector x y it gives us zero zero so let's go ahead and clean this equation up we have minus one four one minus four four onto x and y if you want to be explicit about that we can multiply out it means minus x plus four y and x minus four y and that we know is equal to zero zero now what we immediately notice here is that whilst this this equation between two columns two column vectors is telling us two things it's actually telling us the same equation twice so we can see here that we're saying minus x plus four y is equal to zero we're also saying that x minus four y is equal to zero that's telling us the same thing is that a problem no that's exactly what we want to see at this stage we should find that when we work on uh eigenvalue and eigenvector problems based on a two by two matrix then really only one of these rows in the final expression uh constrains us and the other one doesn't add any new constraint so this is exactly what we want so now how do we go ahead and solve it we're saying that uh minus x plus four y is equal to zero of course we can just rearrange this to say instead that four y is equal to x and that's the only constraint we have what we're allowed to do is choose we can choose the simplest values of x and y that will make this work so i'm going to choose y is equal to one and then i'll find that x is equal to four and that is a perfectly acceptable eigenvector for one to go with my eigenvalue we will always have this freedom in choosing the elements of our eigenvector really this freedom simply corresponds to choosing how long the eigenvector is in other words its magnitude because if a particular eigenvector and eigenvector satisfies our equations a scaled version of that same eigenvector will still satisfy with the same eigenvalue now while the eigenvector can have any length we might specifically have been asked for a normalized eigenvector that simply means we need to take the one that we found and scale it to have unit length so in this case since it's four one we need to divide by uh root seventeen to scale to unit length simple as that so there we are that's our eigenvector and a normalized version of it now we still haven't found the eigenvector for the other eigenvalue which was minus two let me just move this up on the screen to make space to do that at the bottom so here we go we do exactly the same procedure we subtract minus two on the diagonal two minus minus two and four and one minus one minus minus two lots of minus is there so let's uh tidy that up that's going to be four four one and in fact another one and then times x y is equal to zero zero as before we see that really these this is the same equation twice there's only one constraint and we can read it off simply as x is equal to minus y so if i choose x is equal to one for example then i'm going to write down an eigenvector one minus one or if i've chosen y is equal to one then it would have been minus one one it doesn't matter they're both correct eigenvectors to go with our eigenvalue but if we want to normalize well they need to divide by the magnitude one over root two okay so there are acceptable eigenvectors to go with the eigenvalue minus two okay so now let's find the eigenvectors that go with the eigenvalues for our three by three matrix m which was minus two one three one minus one zero minus one one two we looked at that before in the previous video and we found the eigenvalues which were minus one root two and minus root two and i've put little subscripts on our lambdas here so we know which one we're dealing with let's deal with lambda one first which is the one that has value minus one so i'll write over here the little equation that we're using over and over again which is that m minus lambda times the identity multiplied by our vector is zero okay we need this difference matrix so we subtract off the diagonal one minus minus one and then one three one and minus one minus minus one and zero minus one one and two minus minus one and that's on x y and z because we now need an eigenvector with three elements and it's going to be equal to uh we simplify the matrix to minus one one three one zero zero minus one one and that'll be a three and that again is on our x y z eigenvector is equal to zero zero now what we immediately notice is that as before we don't really have three different equations captured by our matrix equation we only have two in fact this is very obvious in this case because the bottom row is the same as the top row that's not always the case it's not always the case that the rows are actually identical but we will always find if we check that there are only really two independent equations when we're dealing with three by three eigenvalue problems we only have two equations really now i'm going to uh highlight this row here one zero zero that's just saying in fact that x is equal to zero now if we take uh either the top row or the bottom run we have minus x plus y plus three z is equal to zero or y is equal to minus three z okay so now we simply uh choose any values of y and z x has been dictated to us but any values of i y and z that satisfy these rows so if i choose z is equal to one that's going to give me y is equal to minus three and i can straight away then write down a satisfactory eigenvector it will be zero minus three one as simple as that it doesn't matter whether minus sign is i could equivalently have chosen z is equal to minus one and then i'd have zero three minus one if i normalize then i'll need one over root ten that being three squared plus one squared and so that is a complete solution for our first eigenvector we found it in simple form and in normalized form this is the eigenvector that goes with eigenvalue minus one we can go ahead however and check this eigenvector to make sure that it works so for that we'll simply need to write out our matrix m the original matrix which was minus two one three one minus one zero minus one one two we have our vector zero three minus one we just need to do this sum so the first element is going to be a minus two times zero and then so three and i see there's a minus three so that does give us zero and our second element is the only non zero element will be minus three and our third third element there gives us one and we can write that as simply minus one onto zero three minus one and so indeed we found that this vector works with the eigenvalue of minus one now we can continue to look at uh to find the other eigenvectors but first let's take a pause and review the steps involved so we're looking at rules for solving eigenvector problems eigenvector problem is where we have a square matrix m and we say that m multiplied by some special eigenvector gives us back that eigenvector times just by a value the eigenvalue we find the possible eigenvalues using this equation involving a determinant of a difference of two matrices in general there are going to be n solutions for an n by n matrix so two solutions for a two by two three solutions three solutions for a three by three matrix that's because when we write the determinant it will have lambda to the power of n as its highest order so for example we have cubed to deal with when we're working out for three by three matrices now having found those eigenvalues we then for each value need to figure out an acceptable eigenvector what we've noticed is that generally we only have to use n minus one of the rows in the equation that we're working to satisfy and that meant just one row in the case of two by two problems and two of the rows in the three by three problems we had some freedom as to what values to choose for our eigenvector and in fact that freedom corresponded to just scaling the entire eigenvector to a greater or smaller magnitude and if we were asked to normalize we would simply work it out using whatever values we like the simplest values and scale it at the last step so that it has unit length okay so we've covered a lot of ground for one video and this would be a good place to just stop watching if you like but i would like to carry on and solve the remaining two eigenvectors for our three by three example because they involve a square root two they're actually a bit more messy and tricky to do and in a way i think that makes for a good interesting example to see so let me go ahead and cut back to the screen that we had before with our matrix m spelt out and our possible eigenvalues and we'll now take the value lambda subscript two which is square root two so then as usual we need to subtract that down the diagonal so we'll have minus two minus square root two one three one minus one minus square root two zero minus one one two minus square root two and that is the thing which when multiplied by our unknown eigenvector xyz should give us zero zero zero now one thing we notice here is the rows look all different it looks like we've got three different equations captured in this matrix equation but they are not if we examine them carefully enough we'd find that we could generate one of these rows from the other two and in fact we're only therefore going to need to use two of them you could pause the video and play with it and see if you can show this but it must always be the case unless we've made a slip earlier okay so i see that the middle row has a zero so i'm going to start with that one it says x plus minus two minus root two times y is equal to zero and that means that if i choose a simple value for y of one then i can immediately say that x moving across is going to be one plus root two good so now i'll use the top line which is minus two minus root two x plus y plus three z is equal to zero and i'll substitute in the values that i've already picked and inferred so i'm going to get one plus root two onto minus two minus root two that's the x term plus the y is one plus three z yet to be found is equal to zero rearrange so put z on one side divided by a third expand this thing out minus two minus root two minus two root two minus two plus one all right oh and there's a minus sign because we've moved it all to the other side from the z of course now we need to tide this up but what i notice is that inside the brackets i have a minus three and a minus three root two and that will cancel cancel with a factor of a minus and third of front and just give us a very simple expression of one plus root two so that's our z term okay we've found a compatible set of x y and z values so we can now write down an accept acceptable eigenvector one plus root two one one plus root two there we are that is an acceptable eigenvector and here's where we found those numbers uh that goes with the eigenvalue lambda two is equal to square root two note that i use the same subscript two on my vector so that i make it clear that lambda subscript two goes along with vector subscript two so now our only remaining task is to look at the third eigenvalue which was negative root two and find a compatible eigenvector for that one so as always what we need to do is take the vector m and subtract that the lambda value we found off down the diagonal and because we're subtracting minus a minus number we can just add it instead of course so that will be minus two plus root two and then one and then three and then one and minus one plus root two and zero and minus one and one and two plus root two and that matrix when multiplied by our unknown eigenvector x y z will give us zero zero zero now as before our middle row looks nicest here it's just telling us that x plus root two minus one put it that way around y times y is equal to zero that means if i chose y is equal to one obvious choice then x is equal to one minus root two watching for signs now if i take the let's say the bottom row i can have minus x plus y plus two plus two root plus two plus root two times z is equal to zero but i can substitute in the values i found so that will say that square root two minus one plus one plus two plus root two z is equal to zero okay i've got some work to do to find out the value of z here i'll start by rearranging just to put two plus root two z is equal to minus root two on the other side but i still need to do a bit more work divide both sides i notice i can simplify simplify by a factor of root two i can write this as z is minus one over root two plus one pause the video and check you agree with me um and then i'm not happy with that because i don't want to leave z as a fraction i could do but that would make a very messy looking eigenvector i noticed there's a trick in up i have up my sleeve i know that if i multiply the top and bottom of a fraction like that by root two minus one it will simplify i will then find that the top of course is one minus root two uh but the bottom will be two plus root two minus root two minus one and that whole expression just comes down to one finally then z is equal to one minus root two we've now found our x y and z values that are acceptable so we're seeing saying that vector three that goes with the lambda three value is one minus root two one one minus root two that is an acceptable eigenvector so we're done for our three by three matrix m we found that three eigenvalues and for each of them an eigenvector the last two of these which involve the root two were uh more tricky just because there was more to keep track of more messy expressions but the basic maths is the same every time in this series of videos we'll talk about linear regression and least squares and the problem that we'll be solving is first in the most abstract setting if you're given a subspace w of r m and a vector let's call it b also in r m the question that we want to solve is which vector w in this subspace w is closest to the vector b now just intuitively if we take the orthogonal projection of b onto w let's call that p subscript capital w b so the projection of b onto the subspace w the orthogonal projection we suspect that that would minimize this distance and the distance so the distance that we're trying to minimize is b minus w minimize this over all w inside of this subspace w equivalently you can minimize the square of the distances and this is why this problem is called least squares because we're minimizing the squares of each of the components of these differences when you add them all up so that's the statement of the problem is to find w inside of w such that that the distance between w is minimized and it turns out that the solution to this problem is exactly w equals the projection of b onto w and i won't give a precise proof of this statement but we should at least get an intuition for why this is true looking at this picture i've already drawn the projection of b onto w and another arbitrary vector w now these three vectors form a right triangle so it looks a little bit skewed from this angle but if you turn this this way that triangle looks something like here's b here's the projection of b onto w and here's some arbitrary vector w in the subspace w these two vectors are in w and so this line connecting them is also in w the vector b is perpendicular to the subspace w and therefore this angle is a right angle here this is the hypotenuse of this triangle and it's the distance from b to w and this distance is the minimizing distance supposedly so that's just b minus the projection of b onto w so i i you know misused a little bit of notation here um i hope you understand that this w now is different from this one this is the actual solution and because this is a hypotenuse of this triangle we know that this distance is always going to be greater than or equal to either of these two distances no matter what w is this will always create a triangle a right triangle unless w equals this vector right here and in all other cases except this one this distance is always going to be strictly greater than this distance so what are some ways to compute this projection so one way is to actually find an orthonormal basis of w so given an orthonormal basis let's call it w1 up to wk let's say k is the dimension of w then the projection of b onto w is just take the dot product remember the dot product of b with any of these normal orthonormal vectors gives you the shadow of b onto that vector and then multiply again by that vector here to give you the shadow of b onto this line in that same direction so we take the dot product or the inner product i'll write the inner product with brackets of each of these vectors and then we'll multiply by that vector again so that we have a vector in the end and then sum up all of these different contributions from these different shadows so this is how you would compute the orthogonal projection of a vector onto a specific subspace you would need for instance an orthonormal basis for that subspace but sometimes you're not given an orthonormal basis so it might be difficult to compute it one thing you could do is you can choose any basis of w pick arbitrary vectors that are in w and once you find k of them and you know that they're linearly independent then you know that that forms a basis then in order to find an orthonormal basis you would apply the Gram-Schmidt procedure to obtain an orthonormal one but you know how difficult that is maybe you can do it for the first few vectors pretty easily but then after a while it gets pretty messy so we'll look at a special case of this problem where w happens to equal the column space of some m by n matrix where a is an m by m matrix m by n matrix so in other words you can think of a as a linear transformation from r n to r m and in this special case we'll find a very interesting solution to this problem in general when we look at this problem and we're given a vector b so now let's suppose that this subspace is the column space of a and we have some vector b that's not necessarily in the column space what this means is that the linear system ax equals b does not have a solution unless a is onto or more specifically or more precisely unless the vector b is in the column space of a but because this doesn't happen in general instead of trying to solve this system which might not have a solution we can solve an associated system instead that says okay I might not be able to find an x in our domain here that sort of maps to the vector b because it's impossible all x's get mapped to this subspace what instead we can try to find is project b onto this subspace and now this vector the projection of b onto that subspace is by definition inside the column space of a and therefore we can solve that associated system so we make a definition based on this idea that a least squares approximation to the linear system ax equals b is a solution to the associated linear system ax equals the projection onto the column space of a apply to our given vector b and it's this problem that we'll be focusing on solving in the next few videos let's first state a theorem that makes it a lot easier to compute the least square solution to a given problem in the special case that we mentioned at the end of the video in the in the last session so the theorem says given a linear transformation from r n to r m that's called a let me write it here and a vector b in the co-domain of this linear transformation a let's say x in the domain in the domain that's r n is a least squares approximation to ax equals b now this is using the definition that we had made before which remember was x is the least squares approximation to ax equals b if and only if ax equals the projection of b onto w where w is the column space of a if and only if x is a solution to the system a transpose ax equals a transpose b now we mentioned last time that so let me just say here w equals the column space of a throughout this entire discussion now we mentioned last time that if we have an orthonormal basis of w we can actually solve this problem relatively easily but in general we're not given an orthonormal basis of w so this formulation of the problem makes it much simpler to compute so i said it but i should also write this that this means the taking the transpose of this matrix and taking the transpose is easy you just swap the columns with the rows so this just gives you a new linear system and in general this is much much easier to solve than something like this and the reason this simplification occurs is because we've taken our subspace to be the column space of some matrix so before we give some examples of how to apply this theorem we'll give the proof if you want to skip the proof you can go to the next video so this is an if and only if proof so we'll prove it in two directions let's let's first suppose that x is a least squares suppose x is a least square solution to ax equals b i.e x solves ax equals a projection of b onto w now here's a little picture that'll help us visualize everything let's say this is the vector b this is the subspace w this is the projection of b onto w if we take the difference of b with the projection onto w so b minus the projection of b onto w then that difference is exactly this line that's orthogonal to w in other words this vector is in the orthogonal complement of w and because it's in the orthogonal complement of w we know that no matter which vector we take in this subspace let's call any vector here a and the reason we're going to call it a is because a is an element in the column space of of the matrix capital a then the dot product of a with any of these vectors i mean with this specific vector equals zero for all a in the column space of a in particular if we take the actual columns of a so a e i let's say and we dot this is the i-th column of a as a matrix and we dot it with this vector this is always going to equal zero for all i from and in this case since the domain of a is r n it's for all i going from one to n we can write this dot product using the transpose so remember the dot product is the the multiple you multiply each of the entries in the vectors and then you add them all up and the way you can express that is using the transpose of a particular vector if we write this as a column vector then we can write this as a row vector by taking the transpose and then matrix multiplying these entries so we would take a e i transpose times the vector b minus p w b equals zero for all i but this transpose the fact that um if we take if we look at this um column of a and we take its transpose and if this is true for all i then this is saying that this vector is the dot product of this vector with each of the transpose vectors from a dotted with this is zero therefore if we take the matrix a and transpose it and we multiply it matrix multiply it with this vector it will always equal zero and now rewrite this by moving everything over to one side we get a transpose times the vector b equals a transpose times this projection but by assumption this projection we know that x solves this equation so we know that this also equals a transpose ax and this shows that if x is the least square solution in other words if it solves this problem then a transpose a transpose a acting on x equals a transpose b so this proves the theorem in one direction to prove the theorem in the other direction i'm running out of space here but i can give you at least the sketch of this proof now suppose that um this equation is satisfied so suppose x is a solution to a transpose ax equals a transpose b we can move everything over again as we did sort of going backwards in this calculation and we can express this by saying that a transpose acting on ax minus b equals zero in other words this vector ax minus b is in the orthogonal complement of the column space of a so it's in the orthogonal complement of w now if we go back to our picture we know that the vector b can be uniquely decomposed as the sum of two vectors one a vector in w and one a vector in the orthogonal complement of w so this is a theorem um that you might cover uh in in the part of your linear algebra course on um when you talk when you discuss orthogonality so b has a unique decomposition into a vector in w plus a vector let's say in the orthogonal complement let's call it v where w is in w and v is in the orthogonal complement of w but this equation here says that if we take the difference ax minus b and we get in the orthogonal complement we know that this has to equal some vector so ax minus b equals a vector in this orthogonal complement let's just call it v for now because it's in the orthogonal complement rewriting this equation says that b must equal ax minus v and a where is ax ax is in the column space of a in other words it's already in w so this is the vector in w and therefore this vector right here has to be in the orthogonal complement and this uniqueness decomposition theorem tells us that this vector is exactly b minus ax so this looks this is going to look a little bit silly but b equals ax minus ax minus b and the uniqueness decomposition theorem tells us that this vector that's in the orthogonal complement must equal the projection of b onto that subspace w in other words ax this term right here has to equal the projection of b onto w minus this vector right here in other words ax equals the projection of w onto of b onto w and that means that x is a least square solution because it solves this equation so that follows from the uniqueness of orthogonal decomposition of a vector into two parts if you have a given subspace one into a vector in that subspace that's where this ax equals the projection of b onto w comes from and the other vector is just the orthogonal complement the projection onto the orthogonal complement which is just the difference of the vector itself minus that vector in the orthogonal subspace so this is the the proof of this theorem that allows us to say if we want to solve a least square solution problem when w equals the column space of a we merely have to solve this system so the next few videos will do lots of different examples of how to actually so the example that we'll be working out it's a quite a long example because of the generality that we'll do it in is if you're given data and let's say the data you're given is you have a bunch of x values and a bunch of y values so these are one dimensional input and one dimensional output values so suppose you have given data x1 y1 x2 y2 and so on up until the number of data points that you have x dyd and if you try to plot these data points let's say they look maybe something like this the question that you want to solve is can you try to find a line that sort of best approximates these data so that's the problem is to find a best fit whatever that means straight line let's say of the form y equals mx plus b now if we wanted to actually try to solve this problem and suppose that all of these points actually lied on this line we would want to solve this entire system now m and b are our unknowns we don't know the slope we don't know the y-intercept so we'd have y1 we want to set it equal to mx1 plus b similarly for y2 our second data point mx2 plus b and we keep going yd equals mxd plus b now in general this is an over constrained system because we have d equations and if d is relatively large in particular if it's bigger than two if it's relatively large it's very unlikely for us to find a solution to this problem we can rewrite this problem as a matrix equation by saying that we have the vector y which is the vector of our data points in fact let me even write y as a column vector so let's write it like y1 all the way to yd and if we notice this our coefficients are always being added in a linear fashion and the only thing that's changing is the value of x1 so you could actually write this as a d by 2 matrix acting on the vector mb now what should this matrix be we want it to satisfy the equation y1 equals mx1 so x1 has to go in this column plus b times what's the only thing that's going to leave b exactly where it is the number one and the same thing here if we had y2 we would want to write y2 equals m x2 plus one times b and so on all the way down to xd and one so this matrix equation which we can write as y vector equals a and i don't want to write x as we did before because i don't want to conflate it with the data points that are also labeled by x and so instead we'll write this as ax so this is the system that we would like to solve but we know that there is in general no solution to this problem so what can we do now in this case the column space of a happens to be a two-dimensional subspace of r what of rd so the column space of a is a two-dimensional subspace of rd so we can actually draw something like this although the space that's in is might be significantly larger and we have the vector y somewhere out here in general it's not in the column space in general this line does not go through every single one of these data points so we have some vector y and instead of trying to solve this specific equation which in general is unsolvable we can project y onto this subspace w and we can solve that associated system and then we'll say what that means in a moment in fact actually we can say what it means right now if we take the difference of these two vectors y minus this projection what are we minimizing so an arbitrary vector in this subspace let's write w as an arbitrary vector in the subspace is a linear combination of these columns so let's write that linear combination as m suggestively a e1 which is the first column of a which is just all of these x data points x data points plus b times the second column of a and we want to minimize the distance between our data set our data vector y with this vector so in other words if we take this difference let's let's replace this with w for now because let's imagine we don't yet know that this is the projection so this difference is trying to minimize y minus m a e1 plus b a e2 and if we look at what each of these components give you then this equals let's square this just so we don't have to deal with square roots then this is the sum so first let's take an arbitrary ith component here it's yi minus m times xi plus b and that's it and then we take the sum of these squares because that's what this means and we sum over all i from one to d so we want to minimize this expression in other words we're taking our actual data set y and we're taking this which is our best fit curve using our data set x and so we're trying to minimize all of these distances so these are actually the vertical distances between the best fit curve and this line it's the vertical distances because this is seeing our y data point minus the value of this line at that point and we take that distance that difference which is this little vertical height we square that height and then we add up all of these heights and we want to minimize that expression so the solution to this least squares problem is graphically given by an expression like that and we know how to solve this to solve this we apply our previous theorem and we know that to solve this we can solve instead a transpose a equals a sorry a transpose a x equals a transpose oh and x is xi let me write this as xi and a transpose y so this is the problem that we want to solve and we want to solve this for xi and xi is our vector of unknowns so in order to do this we have to write down what a is we already know what a is we have to write down its transpose we have to multiply those two things there's a lot of things we have to calculate so let's do that on a fresh board space so i've written the problem setup and we have the matrix a with our data points for x and our vector y with y and i've taken the transpose and i've written it on the left because we'll be applying matrix multiplication to this side to solve for a transpose a and then we'll also matrix multiply a transpose with y so if we multiply these two matrices it's the first row here times the first take the dot product with this with this column and that's x1 squared plus x2 squared plus xd squared so the first top left entry is the sum of the squares of these entries from 1 to d and the second entry on the top is the first row times the second column of a and that's x1 times 1 plus x2 times 1 in other words we're just summing up all of the different x values and on the bottom left it's this first this the second row here with the first column that's the same as it was in the top right and then the last entry on the bottom right is the second row with the second column and that's one times one plus one times one plus one times one d times which is just d itself so this is a transpose a and a transpose y equals first of all notice that it's just a two by two matrix so we're going to be solving a rather simple system it's just a two by two so a transpose y is now take the values of x multiply them with the values of y it's sum i equals one to d x i with y i this time and then it's the second row with this and that's just the sum of the y's and it's our vector with two components here and we want to solve this system now it's only a two by two so on the one hand we could probably set this up as a as a row reduction an augmented matrix problem row reduce and isolate whatever we need to so that we can solve for this vector c on the other hand it's only a two by two matrix and row reduction might be a little bit complicated for instance we might want to maybe divide this entry by the sum of the squares of all of the entries but maybe that's a problem if every single one of these is zero you know it's a little bit tricky so it's very convenient to first of all find out when this matrix is invertible and if this matrix is invertible we can multiply both sides by the inverse so if a transpose a inverse exists and we'll figure out what that means we'll compute the determinant of this to determine when this inverse actually exists then we can solve this system pretty easily and it's c which is again remember our vector of unknown coefficients m and b then this equals a transpose a inverse times this vector right here a transpose y which we've already computed so you know in terms of the setup it's relatively straightforward maybe calculating this actual inverse might be a little bit of a challenge because of the arbitrariness the generality that we're doing this in so first let's compute the determinant of this matrix and that's just this times this minus this times this now because we're multiplying these two sums we really have to be careful about the indices remember this is a sum of stuff multiplied by a sum of stuff so we can't just say that this is sum xi squared it's actually there's a lot of foiling going on and this is given by d the sum of the squares that's from the first term this times this minus this times this and in order in order to make that calculation a little bit more straightforward i'll rewrite one of the indices as a j instead of an i so that we don't get confused so this is xi times xj and each of these sums there's actually two sums here one for the index i and one for the index j and they both go from one to d so this is the determinant and i won't do the rest of this calculation out but this i'll make a claim and you should check this that this equals zero if and only if xi equals xj for all i and j so the only time that this determinant vanishes if all of the xi data points happen to be equal to each other now it takes a little bit of time to actually show that but you can do it and this is the only instance when this matrix is not invertible and if you're thinking about data this basically would mean that all of your data points lie along a vertical line and then it makes sense that you can't find a function of the form y equals mx plus b to fit this because the only line that'll work is a vertical line and in that case the slope is infinite so you won't find a solution so it makes a lot of sense why this is the only case where that happens otherwise if you have even a single point that's off of this line you will be able to find some curve that best approximates this data although you would think that maybe if all of these points lie here and there's a data point way out here then maybe this data point is there's something wrong with it or more investigation is needed such a point in this situation would be called an outlier and I may discuss about this at some point but that's not the focus of this specific video right now so that's the claim so this determinant vanishes if and only if all of these data points are equal so let's assume that this does not happen assume there exists an i and a j that's not equal an i and a j which they are not equal and such that xi is different from xj so we just need to assume that we have at least two data points that do not lie on um that are not the same when we make this assumption we can compute this inverse and this is easy because it's just two by two we maybe remember this formula we just divide by the determinant we swap these two entries and we negate these so this is just one over this determinant and i don't want to keep writing it so let me just write determinant of a transpose a and just remember that it equals this and then we swap these entries so this is d and here we have some and there's lots of indices now and i don't want to conflate any of these indices with each other so i'm now going to call these k or something so this is k equals one to d and this is x k squared and here we have minus some x k oops k goes from one to d and this is minus k from one to d and this here is the inverse of our matrix and then what we have to do is you have to take this complicated expression and multiply it by this vector and once we do that we'll find out what the values of m and b are so we'll need again a little bit more board space to do that so here i've rewritten our problem and remember we're trying to solve for the coefficients m and b for linear regression for an arbitrary data set and we computed that a transpose a as a matrix equals one over the determinant of that matrix which we found was d times that's a d times xi squared minus let's use the indices i and j here xi times xj so this is one over the determinant times our matrix which was to not conflate these indices let's call these indices k this was i believe d here for the inverse on the bottom right we had sum of the squares x k squared minus k x k i'll stop writing from one to d it's just getting a little bit annoying minus sum k x k but i'll always write the the subscript that we're summing over so this is a transpose a inverse now a transpose y well i can't remember if i wrote it but if you remember what a transpose looks like oh we computed a transpose y yeah now i remember but the thing is that we'll have to be careful about indices because i believe we use the indices i there as well and we've already used i we've already used j we've already used k so let me call them l so this was sum x l y l l goes from one to d and on the bottom part of this uh two component vector it was just the sum of the y's okay so all of this mess is the left hand side of this expression let's multiply these two matrices and see what we get um so let's just do that then we get and let's keep this determinant factor here and i'm writing all of this because you'll see that it relates to something you may have seen in a course on statistics or probability so then we multiply d by this and we multiply this by this i'm just going to do this all out d times this sum uh over it's just l one index x l y l minus this expression there's two sums here now k and l x k y l that's the first component of this vector and the second component is this times this now we have a bunch of stuff going on here um plus this times this so let me write the plus on the left this becomes sum over k and l and x k squared which we can write as x k you know let's just write it x k squared y l minus x k now this is a little bit different right because we have two sums k and l and this time it's not x k squared it's x k x l y l and this is what equals m b now so this actually solves the whole problem so we know that m equals this first expression here divided by this determinant and the y intercept equals this expression here divided by that determinant now does it equal anything um familiar if we look at m itself and we divide the numerator and the denominator by d we get that m equals sum over l x l y l minus one over d sum k and l x k y l divided by x i squared minus i j x i x j now each of these expressions um actually show up in statistics quite often and they're actually given special names we call the let's do the denominator first since this one's only involves a single data set this is called the variance of the data set x where x vector equals x one through x d and it's also written as var oops var of x and this just equals by definition the sum of the x i squares minus x i j x i x j so that's what the variance is by definition and the covariance um is involves two data sets our x's and our y's so it's of x and y and this is defined by i think you know people have different notation i don't know what the notation is i don't really care um but it's this expression on top so this is sum l x l y l minus one over d oh did i forget a one over d i did this should have a one over d here minus one over d x k y l that's an l subscript on that last y so we have that our linear regression problem actually derives for us the variance and the covariance of our data set and we also have explicit expressions if we wanted to um for the least squares uh solution if we want to fit data to a straight line curve in the next video we won't apply this general result because i don't think anybody would expect you to memorize something like this instead we'll set up the problem in an explicit example redo the whole procedure just so you get a feel for it with specific numbers involved and um and how you would actually compute the inverse without all of these sums or anything like that if you're just given a relatively small data set if you're given relatively large data sets then you might want to go through this approach or you might have to program something that does it for you so let's actually do an explicit example using actual numbers um here's a a graph and here's some data points um the x axis is the horizontal axis and the y axis is the vertical one and let's just use a unit grid so that the distance between any two of these grid lines has length one so the data that we're given uh according to this plot is um we have our data vector and we want to try to fit to a line of the form y equals mx plus b so let's write down our matrix a and our matrix a remember consists of all of the x's if we write it in this form and ones all along the right column so how many data points do we have so what's d one two three four five six seven three four five six seven so you should have seven um entries in this column in the columns of a and let's go in order from left to right filling in all of these entries the order that you go in doesn't really matter as long as you're consistent with the value with the corresponding values of y that you use so in this case the first value of x is at x equals negative four negative three negative one zero one three four i've chosen it to be somewhat symmetric just for convenience of the computation so it's negative four negative three negative one zero and the x values positive x values are one three and four so this is the matrix a and the vector y is the corresponding values of y so for x equals negative four the value of y is at negative one again there are d there are d entries here as well the next one is zero then it's one zero one and the last one the last two are two and four so this is all of the information that we need and if we compute a transpose a what do we get so i won't write out a transpose just take the transpose of this then we know that we're taking the dot product of this vector with itself to get the top left entry here so what's the dot product of this with itself it's four squared times two so it's 16 times two which is 32 nine plus nine which is 18 so 32 plus 18 which is 50 plus two so it's 52 on the top left the dot product of this with this is zero because all the negatives cancel out all of the positive entries again i chose that specifically so that this happens so that computing the inverse is much easier and we can immediately solve this system now a transpose acting on y oh sorry the bottom entry is um is is just d itself and d is seven now a transpose y is this times this plus so negative four times negative one plus negative three times zero plus negative one times one and so on so negative four with negative one gives you four that with zero doesn't change anything so we still have four then that's negative one from four so that gives us three leftover this one brings it back up to four then this six brings it up to 10 and this is 16 so we get 26 in the first entry maybe you have faster ways of doing this i don't know um so then uh a transpose if we take the second row here of a transpose which is this column of ones and we dot it with this these cancel these add so we get seven now solving this system is pretty straightforward um right this is 52007 in one side 267 we just have to divide everything by 50 the first row by 52 the second row by seven and we immediately arrive at the vector mb our vector of unknowns is one half and one so this tells us that the best fit approximation that minimizes the vertical distance squared between between that line and all of these data points has slope one half and y intercept one so the line that we want to fit this to is one half x plus one and if we try to sketch what that graph looks like we know that it goes through one so let's include that point here and it has slope one half so when it gets to this when it moves two units over it moves one unit up so here's the next data point we connect these two with a straight line and moving over two units to the right one unit up we connect that with a straight line and we keep doing this i mean this is how i draw um if i don't have um a ruler or anything on hand i would try to draw something like this so this straight line here if you notice it happens to actually go through one of the data points that might not happen but as you can see it doesn't go through most of them but it's a pretty reasonable approximation to this data set so this is how you would actually solve a least squares problem specifically in the context of a fitting data to a linear curve or rather an affine curve to be technically correct and this is how you do it in such an example in the next few videos we're going to generalize the idea of linear regression just in terms of a straight line data fitting to linear regression in the sense that you can data fit your data to sort of any curve almost any curve and the way that we're going to do this is we're going to set up some notation and we're going to let f1 through fk be linearly independent functions and what i mean by this is it's the same definition of linear independence of vectors namely that um there does not exist a set of numbers a1 through ak such that when you sum up um so let me just say this i.e there does not exist a set of numbers a1 through ak so these are real numbers or complex if these are complex valued functions such that the sum of ai fi equals zero as a function so um let's just say the domain of our function is whatever we need to specify it to be for example the the whole real line or maybe an interval or something like that so and imagine your given data points and let's say the given data points again we're going to use our x and y variables so your input is x and your output is y and you have a whole list of data x1 x2 up to xd where d is the number of data points and you want to fit these points to these functions so in other words your hope is to somehow fit y1 equals to a1 f1 of x1 plus dot dot dot ak f k x1 and not only do you want this but you also want this to hold for all of your data points so up to yd a1 f1 xd now plus dot dot dot ak fk xd so this is your hope but if d is much much greater than k then this is unlikely it's usually impossible to find coefficients that fit all of these data so before moving on let's try to rewrite this expression in a linear way so that we can relate it to the linear regression problem we solved earlier so set y to be this vector here so let's call this the vector y and what you notice here is that each of these numbers so f1 x1 is a specific number we're taking a linear combination of these numbers with coefficients coming from the a's so this looks like the vector y1 down to yd this is what this equation is represented by a matrix whose entries are given by these values of f so f1 x1 in the first column and up to yd the coefficient front of a1 is f1 xd and then this goes up to fk still x1 so x1 is the first row and down to fk xd in the last row and this matrix is applied to the vector of unknowns a1 through ak so this is again of the form y equals a and let's call it xc instead of x to not confuse ourselves with the variable x that we've used for our data so in general it's impossible to solve this and the way that we would like to solve this is again a least square solution so a least squares solution or approximation to this is a actual solution to a transpose y equals a transpose ax so just apply a transpose on the left on both sides and this is generally what we're going to solve for and this will be our this will be fitting our data to the set of functions defined by these but there are a few restrictions that have to be made for example the first maybe obvious restriction if you think about it is that these coefficients should be independent and independent in the sense that I can't take any one of these coefficients and sort of re-express it in terms of the others I'm not talking about linear independence I'm just talking about independence so we assume the coefficients are independent and this just means i.e. there does not exist an i from one through k such that a i is determined by a j by all the other a j's so let's just say the set of a j's where j is now from one excluding i so I read a little hat over that to exclude i up to k so in other words in terms of all of the other coefficients so we assume that they're independent and this is sort of obvious right because if you wanted to fit your data to these functions and you assume that these were all unknown coefficients and you wanted to find the best value for them then if you suddenly did that arbitrarily then it's unlikely that this relationship between them holds in that situation so in general we definitely want to make sure these coefficients are independent not only that we also should assume that the functions are linearly independent so we assume that these functions are independent as well and this is because so suppose that one of these actually depended on the other so because if let's say f i equal to some linear combination of the other ones so let's say bj fj so j goes from one to k but j is not equal to i so we're just saying like for these to be linearly independent another way is saying that well at least um none of them can be expressed in terms of the other so if that fails at least one of them can be expressed in terms of the others so because if for some numbers bj then what happens is expressions so then if we take so then if we take f and we take its linear combinations so let's say a i sorry let me not use the index i let me use the index j now so let's take some of a j fj and this breaks up into two parts now right because we have a sum over j where j is not equal to i so this is j um not equal to i and the sum goes from one to k so this is a j fj but then we also have plus a i f i but this term equals this so this equals sum over all j not equal to i another sum over all j that are not equal to i so we have a i sorry a j i'm just copying this term fj plus a i times this so a i times bj fj and then this is all in parentheses and now you notice that fj is a common factor so when you factor that out you get sum j not equal to i and then this is a j plus a i bj fj so now what we've done is we've re-expressed our linear combination of these functions so the way everything that's on the right hand side here in particular and we've re-expressed it in terms of functions in terms of k minus one functions and now our coefficients have changed so in other words there was already a dependence on the coefficients in some sense and so we usually demand that the functions are linearly independent so that we avoid this issue in the next video we'll explain more generally a simple situation that occurs in which this function this linear system is always um solvable by the method that we used earlier namely by taking a transpose a inverse let's now understand when we can solve a transpose y equals a transpose a c using the method of taking the inverse of a transpose a now in order to take the inverse of this we know that we need to require that the kernel of this matrix so by the way if a is a is a d by k matrix and again d is typically much much larger than k then we want to know when this exists so one of the situations when this exists is when the kernel of this matrix vanishes that's one of the criteria so zero as a vector space as a vector subspace um of r k so when does something like this happen so to understand when we can apply this method let's suppose that this is the matrix a a goes from r k this is r d here and this here is the image of a if we take the orthogonal complement of this image in this case you know unfortunately i can only draw the orthogonal complement as having a single dimension but you could imagine that it has um a much much larger dimension especially if these much much larger than k so the first claim that will prove is that the orthogonal complement of the image of a equals the kernel now in order for this to make sense i need to take the kernel of some matrix now the image of a is in r d its orthogonal complement is also in r d and i can't take the kernel of a because that wouldn't make sense the kernel would live here so i have to take the only other thing i can take the kernel of is maybe the kernel of a transpose so we'll do that so we'll take the kernel of a transpose and it turns out that these two are equal so how do we see this let's visualize a as a um as a matrix of vectors so a one through a k and when we take the transpose these rows these columns just become the rows so we'll do this proof just by showing that one is contained in the other just to make it very explicit so suppose that the vector v is let's start with the um let's start with being an element in the orthogonal complement so let's say v is perpendicular to a the um the image of a and then let's see if it's in the kernel of a transpose so when we take a transpose applied to v what do we get so we'll write the matrix a transpose now we take these columns and turn them into rows and we apply it to the vector v but matrix multiplication tells us that when we do this we take this row multiply it by this vector in other words we take the dot product so this equals another vector and it's a it's a vector in r k and what we get is a one dot product with v as the first entry all the way down to ak dot product with v but if v is in the orthogonal complement of a then it has to be that all of these dot products are zero so this is actually the zero vector and therefore therefore the um this containment holds the image of the orthogonal complement of the image of a is in the kernel of a transpose so that shows half of the theorem now let's suppose so conversely suppose that the vector u is in the kernel of a transpose then by the same argument being in the kernel of a transpose a transpose u equals zero but a transpose u is a one dot u all the way down to ak dot u but the zero vector says that all of those are zero and because the image of a is spanned by the vectors a one through ak we know automatically by the same exact argument that u is perpendicular to the image of a so it's almost the same argument which is why i'm not writing it and therefore this containment holds and that's the other half of the theorem so that's the proof that the kernel of a transpose equals the orthogonal complement of the image of a why is this useful it's useful for the following very important reason and it says that the kernel of a equals the kernel of a transpose a you can already see why this is going to be useful because instead of looking at the kernel of a transpose a which we take two matrices multiply them it's going to be a little bit more difficult matrix to work with if we could just look at the kernel of a that would probably save us some time so let's prove this in one direction it's pretty obvious but i'll write it out anyway so let's first prove the direction that the kernel of a is inside here so let's prove on this containment so if u satisfies a u equals zero then a transpose a u because this thing is zero also equals zero so that direction is pretty straightforward let's look at the other containment so suppose v satisfies a transpose a v equals zero then what this means is that a v is in the kernel of a transpose i.e. a v is in the kernel of a transpose but by the previous claim the kernel of a transpose equals the image of a taking the orthogonal complement of the image of a so what's the picture here actually let's go back right here so we have that a v which by the way is in this plane also is contained in the orthogonal complement of that image and the only vector that's contained both in a and in the orthogonal complement is the zero vector this implies that a v equals the zero vector in other words v is in the kernel of a and now the containment has been shown in both directions and that's the conclusion of the proof and let me just write out the final corollary which is the useful one for us it's like corollary two is that at least so let's say a transpose how do I say this a transpose a inverse exists if and only if the kernel of a is trivial so it's only the zero vector now why is this reasonable so this is this isn't really an example it's sort of an idea for why this is uh this usually occurs when you're trying to fit data so our matrix a is typically going to be of the form f 1 x 1 dot dot dot f um what was it x k f k x 1 all the way down to f 1 x d f k x d so typically our matrix a looks something like this and what would it mean for this to have trivial kernel it would say that none of these so all of these vectors are linearly the set of these vectors the column vectors are linearly independent is that likely so when when might something like that happen so for instance if one of these functions did depend on the others in a linear way so for instance in the last video we said that we assume that these functions were linearly independent if they were dependent what could happen one of these column vectors could be expressed as a linear combination of the others and therefore these columns would be linearly dependent and if these are dependent then this has a non-trivial kernel so that's at least the sufficient that's at least one condition that's a necessary condition for this to have um a non-trivial kernel so we demand that these functions are linearly independent but furthermore not only do we ask that these functions are linearly independent but it also implies that these specific vectors after we apply our data are linearly independent but if d is much much much larger than k we only have very few of these vectors right so the number of entries is d but we only have k vectors so it's kind of easy if you randomly chose if you arbitrary and randomly chose k vectors in a very large dimensional space randomly with almost almost surely it will be that those vectors are linearly independent think about it just choose random numbers so for example let's write pi e 1 2 square root of 3 3 and the vector 1 1 1 i'm pretty sure that these three vectors are linearly independent in r3 and i randomly chose them so even if d is not drastically larger than k but even if it's just greater than k almost surely you'll pick linearly independent vectors so if your data is sufficiently you know distributed well and it's not lying exactly on one line or something like that then chances are these vectors are linearly independent so that's where it's going to be useful and in the next video we'll actually apply this to a simple example that you probably don't need a calculator to compute with in the next few videos we're going to be working with arithmetic modular two so we're going to deal with all even numbers are equal to zero and all odd numbers are equal to one so for instance two times three is six which is an even number so zero and seven plus three is ten which is also even which is zero for another example is negative three equals one in this case so anytime we do arithmetic for the most part when we add we're only going to be caring about the parity of that number and this is going to be there are multiple reasons for this one of which is simplicity the other of which is is that it's related to computer science so we're going to let z mod two be exactly those numbers and with the arithmetic that I just said so zero plus zero zero zero plus one is one one plus one is two which is zero and then multiplication similarly zero times one is zero and one times one is one and we'll also work with vectors whose entries are elements of z mod two so these are going to be vectors of the form x one all the way up to x n where x one through x n are in z mod two and we can also do arithmetic the way we usually do with vectors with vectors of this sort by just adding component wise and scalar multiplication on each components as well the interesting thing about this vector space is that unlike the vector space r to the n this has finitely many vectors so how many vectors does this vector space have well first of all here there are two elements and if you have n component vectors think how many entries think what possibilities you can put in the first entry you can either put a zero or a one and as soon as you move to the next entry you can also put a zero or a one and therefore each time you go through these entries you have two to the n total possibilities so the number of vectors in z mod two to the n is two to the n and one of those vectors is very special namely the zero vector and the non-zero vectors well there's just one less of them and i know that sounds like a trivial thing to point out but it'll actually be important in our discussion and so for example this is the main example that we'll be working with z mod two to the third power has seven non-zero vectors for example so let's make a definition first first we're going to be exploring a lot of mathematical curiosities and then we'll see how they apply to an actual physical situation and i rather you have a little bit of suspense before we get there so first we're going to do some math and then we'll talk about the applications so a hamming matrix is a matrix h with k rows and the columns of h consist of all the non-zero vectors in z mod two to the kth power so k here is a non negative integer in fact let's just yes suppose it's a positive integer so for example when k is three we have seven non-zero vectors and what this is telling us all right now let's try to understand these two matrices a little bit more the matrices m and h that we introduced earlier so recall that h was the matrix it was the identity matrix a three by three in this case and another matrix q and m was q and then the identity four by four matrix and both of these numbers can be generalized as long as it's an appropriate size and it satisfies the requirements that we made earlier namely that h consists of all of the non-zero vectors in the vector space z mod two to the power where the power is determined by the number of rows here so given the setup let's introduce a little bit more notation and that notation is going to be we're going to define these that subspace which was the kernel of h and also the image of m so let's call these image of m which is also the kernel of m kernel of h rather let's denote this by c so for the rest of these videos c will refer to exactly that subspace now remember this is a four-dimensional subspace inside of z mod two to the seventh okay we're also going to introduce other notation let's see subscript i be that subspace shifted by the i-th unit vector in z mod two so it's going to be c plus e i and this just means by definition the set of all vectors of the form v plus e i where v is in c now this is not a subspace right because we can't add two vectors and stay within the subspace yes stay within the subset but at the very least you can think of this as the subspace shifted by some vector and we can define this for all i between one and seven because that's how many non-zero vectors there are in sorry that's that's that gives us a basis of vectors in z mod two to the seventh power and now let's write some additional facts regarding these subs these subsets so the first thing is that we already know that c is the solution set of a homogeneous system namely it's the kernel of h ci is also the solution set of some system though it's no longer homogeneous ci is the solution set of the inhomogeneous system h x equals h e i where this is this whole thing h e i is the i-th column of h secondly if we take any two of these different subsets ci and cj then ci intersect cj so if we look at all of the vectors that are common to both of them it turns out there are none so it's the empty set for all i not equal to j third each of these subsets are also disjoint from the solution set of the homogeneous system so c intersect ci is also empty for all i and finally and this is maybe the most interesting part of it is that the entire vector space of all vectors is the union of every single one of these so it's the solution set of the homogeneous system with all of these other inhomogeneous solution sets and because these are all disjoint this is a disjoint union so every vector in z mod 2 is in exactly one of these subsets it's either a solution set of the homogeneous system or it's in one of these solution sets of the different inhomogeneous systems so this is a very important claim so let's actually let's actually prove it so the first claim now when we solve inhomogeneous systems all we have to do is find one particular solution and if we find that a solution exists then the solution set of the inhomogeneous system is that particular solution plus the homogeneous solution that we obtained from solving well for the kernel of h so notice however that we can just take x to be e i to get a solution set so e i is a particular solution and therefore the solution set of the whole system of h x equals h e i is that particular solution plus the homogeneous one and that's exactly what the claim is c i is the solution set of this now let's look at the second claim the second claim says that these are all different all of these subsets for different i and j have no common intersection so in order to prove that let's pick two vectors one in c i one in c j and they're going to be relatively they're going to be arbitrary and then we're going to show that the only way that they can be equal to each other is if those subscripts are equal if i and j are equal so let's start suppose that we have two vectors now because we're a solution set of the homogeneous system the kernel of h and the kernel of h equals the image of h our vectors are going to have this form so suppose m u 1 plus e i so this is our vector in c i equals m u 2 because we don't know if right these two could have different they have come from different vectors plus e j so suppose these we have these two vectors and this one is in c i this one is in c j okay now if we apply h to these vectors so let me just write that this is in c i this is in c j so we're totally clear now apply h to these this to this equality what happens well because these functions are linear and we apply h to both on the left hand side this becomes h m u 1 plus h e i equals h m u 2 plus h e j right and h m of u 1 is zero because h m is the zero matrix so this is zero that's zero and we're left with h e i equals h e j now the only way that this is possible is if i and j are both equal to each other and the reason is because h by definition is the set of all non-zero vectors in z mod 2 to the third power and they never repeat so we only use those vectors once and only one so to better understand this application let's first notice that if we apply m acting on any vector u the vector we get is q applied to u in the top part of that um entries of those of that vector and we retain a copy of u in the bottom this is because the matrix m was q on top and then the identity matrix on bottom so this is true for all u in z mod 2 to the fourth and so a copy of your original vector sits inside of this vector so imagine you're trying to send a message u across some sort of a channel a communication channel and you want a receiver to obtain um that message and you would like it for them to obtain exactly the message you sent because if you hear something else on the other end of that line or you see something else then you may misinterpret what the sender is trying to tell you so there's a sender and a receiver and so for example um during this transmission there could be some noise or maybe something that alters that message you hear this all the time when you're on the phone and sometimes the signal isn't working too well you might not hear exactly what the other person is saying or you might hear something a little bit different so there may be disturbance along such a line so for example if we were sending um let's say my name across this channel and at the end of the line the receiver sees um the word archer for example now what was the original message that was supposed to be sent in this context you have you know you know the english language so you know that there may be a specific word that this is corresponding to but in this example you have two possibilities that this word could be at least one of them could be archer or maybe arthur and in order for the receiver to verify what the message was or one way to verify what the message is is they could send that same message back and then basically ask you know is this the message you intended to send okay so now imagine that this person sends um let's say this person sends archer back and imagine another error occurs and imagine that the error occurs um takes place let's say in the first entry and it becomes archer and then the person is like wait did you want to send me the word archer like what are you doing with this message um are you trying to tell me escher or archer and so this person is going to send another message back um asking and you can see that this could keep happening for a very long time um so it would be very convenient to either this person can send multiple copies of that message and then with lower and lower probability the more messages you send the more likely it is that the person on the other end will figure out what that message is supposed to say so that's one option um but this option seems to take up a lot of resources right sending a message over and over and over again is sort of multiplying the number of resources you need by the number of times you send that message it would be very convenient if you could somehow have a scheme where the sender is sending a message and the receiver can apply a certain method that both the receiver and sender have agreed upon in advance to possibly identify if if an error occurred and where an error occurred during that transmission so that's what we're going to do and we're going to simplify the problem by not looking at the english language we're going to look at vectors whose entries are just zeros and ones the simplest possible language that we can come up with or at least the simplest list of the simplest alphabet we can come up with an alphabet containing two um symbols so let's say we initially send the vector zero one one zero across this channel now once this channel goes i should have written it from right to left as i've been doing so but let's go um counter to this now if one error occurs suppose one error occurred that means that error is going to occur in one of these four entries and if it occurs in the first entry the only possible thing that that zero could become because our language only has two symbols is one so one possibility is that we get one one one zero at the under the line another possibility is if the error occurs in the second entry in which case we would have zero zero one zero and so on so in the third entry zero one zero zero and in the last entry zero one one one so these are the possible outcomes if we have exactly one error of course if no error occurs then the receiver will see the original message but how do they even know that an error didn't occur or not so the way that we're going to solve this problem is by using the previous situation that we had developed we can take our original message encode it in some larger message and then this message is going to be contained in the subspace c so if we send the message u it's going to be contained in that subspace c and if we send that message across the channel instead what could happen to it so initially the sender is sending the the letter the message u is contained in the bottom part but now mu is contained in z mod two to the seventh power so it seems like a more complicated vector but the only real messages that could have been sent the ones that have no errors are exactly in that subspace c any other vector in this vector space is not a message that the sender could have sent because they're only working with images the image of the transformation associated to m so this message is going through now imagine that an error occurs somewhere along the way error and the message becomes mu plus now there are seven entries in the vector mu so there are now seven possible errors that could occur and these errors are exactly quantified by adding the unit vector in the ife row or entry of that vector so this error occurs but the reader on the other end is going to see this vector v they don't know that it is a priori this sort of combination all they see is some vector of zeros and ones but they can use h to identify what form the vector v is in remember we said that if h of v equals zero and this implies that the vector v is in the subspace c which is the image of m and if h of v equals a non-zero vector then that non-zero vector is one of the columns of h this tells us that v is in ci but remember what ci was it was this subspace plus the unit vector ei so it tells us that if a receiver receives receives the vector v and they apply h to it they can identify which of these subsets it's in and if the vector that they see after they apply h is zero that tells us that no error occurred so we're going to assume at most at most one error occurs during the transmission and if we make that assumption then these two applications an application of h to v will tell us where an error occurred and if we've identified where the error occurs right this says that if we see that the h of v is hei then we know that the vectors of this form and how do we fix it so if if it's let's say this is case one and this is case two in case one how would the receiver identify what the original message is they would look at the last four entries of the vector v because that's where u is and we know that no error occurred so the original message sent by the sender is the vector corresponding to the last four entries of the vector v and in the second case what happens then well if in the second case we found that h of v equals h of v i then an error occurred in the ith entry of v and how would we fix that while we would just subtract e i but subtracting in addition are the same in z mod 2 so to fix we know that the original message will be v plus e i well not the original message but what the receiver sent after applying the transformation m and when they do this then they can read off the last four entries of this vector the last meaning the bottom four of this vector v plus e i is the original message so let's just do this in an example just to see how exactly this works so imagine you're the receiver and you see the vector v equals zero zero one one zero one one if you apply h to this vector so i'll write h to remind you because otherwise how are we going to do this computation huh so this is one one one zero one one one zero one one zero and then we apply the vector v here and if we apply matrix operations here we will get the vector three two three but three is one in z mod two and two is zero so this becomes one zero one so we take this vector and look where it appears in this matrix and in this case it is the sixth column of h this means that an error occurred in the sixth entry of this vector here so error in sixth entry of v and therefore the if we alter the sixth entry that would mean we change this one the second last one to a zero so that means the original message message is one zero zero one because we take the last four entries of this vector and then we switch the sixth entry if we had found that the second entry was um an error occurred in the second entry we would have changed that zero to a one and left the original message here and that would have been our the message that was sent by the sender so um that's the basic idea of how this works and again we worked with a case where we were dealing with um sending messages of length four and we used um an additional a larger vector space to encode the possibilities of computing those errors and you could also do it by um using the um by having h to be a matrix consisting of all the non zero vectors in z mod two to the k it will allow us to encode a message of length given by the number of columns in that matrix q and we already calculated that the number of columns in that matrix q is two to the k minus one because of the zero vector minus an additional k from the k vectors we used on the left hand side of the matrix h so we can encode quite a large um number of messages under the assumption that at most one error occurs during transmission so let's now analyze in a little bit more detail what is q u actually doing so we know that that matrix m that we had it was broken up into two parts and when we send a message u across a channel we will keep our original message in one part of that vector but we'll add a bunch of fluff to it and what is the meaning of that fluff from maybe a more a different perspective um it turns out that there's a very interesting sort of uh logical thing that's going on between the entries of u and what q is doing to those entries and the idea is that it's adding those entries in such a way as to maintain the sort of consistency so if we take actually q u and we apply that matrix q that was left over the vector we would get in terms of the entries of u so u is going to be u one through u four the entries of this vector are going to be u one plus u three plus u four u one plus u two plus u four and the third entry because this is a three by four matrix is going to be u one plus u two plus u three and these entries here are called well let's call them p one p two and p three for now and they are called parity bits and the reason they're called parity bits is because when this message gets sent across a channel if an error occurs these entries are summing up the entries of the vector u in some specific way and if an error occurred right we have some vector p one p two p three and then u one u two u three and u four if an error occurred in one of these entries then these parity bits will detect if an error occurred and where the error occurred based on the consistency of this formula so let's see how this works in an explicit example let's say we have the vector zero zero one and i'll break this up into the two different parts so that we isolate the parity bits versus the original message and by the way this isn't the original message that i'm writing right now this is what happens after it's sent and let's see the receiver sees this message i believe this may be the example we were working with a moment ago so let's now look at these formulas and see what they say so p one on the one hand equals zero but let's see if the sum of these entries is also equal to zero so if we take u one plus u three plus u four we get one plus one plus one is three which is one which is not equal to one which equals u one plus u three plus u four what does this mean this means an error occurred in one of these entries and when i say one of these entries i mean either p one u one u three or u four so let's write that down p one u one u three or u four and we know it has to be exactly one because again we're assuming at most one error occurred and because of this inconsistency we're guaranteed that an error occurred the only way no error would occur is if all of these would be consistent so if p one does equal this p two does equal that p three does equal that because this would say that our vector is of this form m applied to the original vector u so that doesn't exactly tell us which of the errors it is yet is it p one u one u three or u four so for that we'll look at the other parity bits so let's look at p two the vector we see says p two is zero is that consistent with this formula u one plus u two plus u four so u one plus u two plus u four is zero so that actually is consistent what does this tell us this tells us that no error occurred in any of these entries because if one error occurred it is impossible for these two to be equal to each other so this means p two u one u two and u four are all error free now let's compare this to the first one that we analyzed the first one said it was possible that the error occurred at u one and it was also possible that the error occurred at u four this new observation tells us those two possibilities it's not possible that an error occurred in those entries so now the only possibilities left are p one and maybe u three so we'll keep that in mind when we go to the last parity bit which will then isolate exactly where the error occurred so p three is equal to well from this it's one and is that equal to u one plus u two plus u three u one plus u two plus u three it's equal to zero so that's not equal to this which is u one plus u two plus u three now this tells us that error is in one of p three u one u two or you or u three we already know that u one and u two are not possible right u one and u four are not possible and the only error that's common to both of these right because we know an error one error occurred in either p one or p r u three or it's possible that an occurred in p three or u three but if it was p three right suppose that the error occurred in p three then this would have been fine it would have been unaltered because we wouldn't have detected an error u three would have also been okay so the only possibility in this case is that an error occurred in u three the one that's singled out from these three parity bits so error in u three and therefore if we go to this original message the message that we received rather and then we um this is sorry this is the message we received but we would have to alter is the u three entry of this to get back the original message therefore the original message is the last four entries as it was before but now we alter that third message that third entry to get one zero zero one as the original message being sent and this is consistent I believe with the answer that we obtained earlier so you might be wondering okay this is a little bit more intuitive because we're sort of counting up our different entries in different ways and sort of using a process of elimination method to isolate exactly where the error occurred now of course that is a little bit more straightforward it's easier to work with it's easier to think about um the first time you see it perhaps on the other hand the linear algebra method it allows you to see it from a maybe potentially different perspective and I would think that if you're working with a much much larger message that the linear algebra method seems to be a lot easier to work with especially when you look at the way that we multiply those matrices and the form of the hamming matrix that we constructed so let me just say this that the cs hamming matrix looks a little bit different for instance I think it starts out with one zero zero zero one zero but then the third column is not zero zero one I think the fourth column is zero zero one and these other four columns are some permutation of the leftover columns I had and now you can see if you were to manipulate this with the other matrix m that's associated to this one by demanding that the kernel of h equals the image of that matrix m the algebra would be a little bit more we can't just break this up into do blocks identity and the leftover part instead it has sort of this interpretation but I believe the linear algebra calculations are much much simpler if you work with a block die a block matrix of the form that I indicated earlier now this may change if you try to look at what happens if multiple errors occur how would you potentially correct for all of those additional errors and I'll leave you to think about that and to check out the literature in the next few videos we're going to compute the square root of a positive matrix and the way we're going to do this is by introducing something called the functional calculus and in fact we'll learn how to compute given any function under suitable conditions what it means to apply that function to a given square matrix so let me go ahead and state the statement of the theorem that will prove and we'll prove this theorem first by doing an example and then we'll prove the general result from scratch so it says let a be a diagonalizable n by n matrix and let f be a function be a complex valued function let's say defined on what I'm going to call sigma of a and sigma of a is the set of all eigenvalues of a now if we have this setup we can already define what f of a is so let's do that so f of a is going to be defined as p f of d p inverse where p is the n by n matrix is a matrix of eigenvectors of a written as columns and d is the corresponding matrix of eigenvalues and what do I mean by f of d and f of d is defined to be now d is a diagonal matrix so let me just write out exactly what we're doing if we have a matrix of eigenvalues and these eigenvalues can repeat so let me just write all n of them and then this is zero everywhere else we define f of this matrix to be f applied to the elements along the diagonal and zero everywhere else so this is f of lambda one f of lambda n and zero everywhere else so so far all we've done is set up our assumptions so we have a matrix we have the eigenvalues we can define f applied to a provided that we have a complex valued function defined on the set of eigenvalues and here's the statement of the theorem then there exists a polynomial q such that q of a now what do I mean by q of a q is a polynomial and it makes sense to multiply so we can take a we can square it we can cube it we can also take it to the zero power that's just the identity matrix and then we can also multiply these by coefficients so if I have any polynomial it's very easy to define what q of a is you just write your polynomial and where you have your variable you replace it with the matrix a so this is some polynomial in a but it turns out to equal f of a as defined previously by this method of breaking a matrix up into its eigenvalues and getting its eigenvectors and constructing it this way so that's what the statement of this theorem is and it's very surprising because in general you can think of a very strange function such as the square root and this is telling you that there is a way to write the square root of that given matrix in terms of a single polynomial and what we're going to do first is do this through a simple example and illustrate it with that simple two by two matrix and then we'll prove the general theorem so we might as well start this example now and continue it in the next video so the example is going to be let a equal 10 6 6 10 and our goal is to compute the square root of a so the first step is find the eigenvalues so another thing that we'll do is we'll review how to do these things so to find the eigenvalues compute the determinant of 10 minus lambda 6 6 10 minus lambda and this equals 100 plus lambda squared minus 20 lambda minus 36 and some of this simplifies we get lambda squared minus 20 lambda plus 64 and this also factors into lambda minus four and lambda minus 16 so we know what our two eigenvalues are they are four and 16 and while we wait for the next video you can try to compute the corresponding eigenvectors and I'll just give you the answer there in a moment so here's the matrix that we're looking at the associated eigenvalues that we found before and corresponding eigenvectors which you should have found by computing the corresponding eigenvectors and so now let's compute what f and f meaning the square root of a so what is f of sorry f of the diagonal matrix d associated to these eigenvalues this is taking the square root of each of the corresponding entries on the diagonal so it's just two and four and the matrix p is writing down these two eigenvectors so it's just one negative one one one its corresponding inverse is the determinant here is two so it's one half and then the rest of this matrix we swap and we negate so that's the corresponding inverse of this matrix so what happens when we compute p f of d p inverse supposedly we should get the square root of our matrix which means that if we square it then we get back our matrix a so if we multiply some of these out i'll skip some of the steps so if we take one half when we multiply p with f of d we get two four negative two four and then we also have p inverse still here i've already pulled that one half out and multiplying these matrices out we get well that distributes out so we can just have one two negative one two and when we multiply those we get three one one three so let's check that if we square this matrix so let's um let's just call this f of a this is the definition that we gave of f of a so what happens when we square this matrix f of a squared we get exactly 10 6 6 10 so we do get our original matrix back so this is one way of computing the square root of a matrix or at least if it has positive eigenvalues um by computing the corresponding eigenvectors and eigenvalues and supposedly we have another way of doing this and the interesting thing about the following method is that we will not be able we will not need to use the corresponding eigenvectors all we need to use are the corresponding eigenvalues and we'll find that polynomial that allows us to compute the square root of this matrix so how do we do that for the time being what we'll first do is we'll find a polynomial q such that q of lambda one equals the square root of lambda one or f of lambda one and q of lambda two equals f of lambda two so in this case these are the square roots and we already know exactly what their values are this is two and this is four so we're trying to do at this point now we're doing a different problem it seems like because now we're just trying to find a polynomial that interpolates these two values of a function so what we're trying to do is so here's lambda one here's lambda two and we have a function which is just the square root and we know that f applied to lambda one is two and f of lambda two is four now this is not drawn to scale in any way but what we're trying to do is find a polynomial that goes through these two points now you know that two points determine a line so a straight line goes through these two points and that straight line of the form y equals mx plus b so our goal is to find out what are m and what are b such that when we plug in x which is our values of lambda we get the corresponding values of y so this isn't a very difficult problem but what we're going to do is set it up as a linear algebra problem even though you could probably immediately solve for m and b and the reason we'll do that will be made more apparent later when we try to compute f of matrices of larger sizes where it will be more difficult to do the simpler method and it's more reasonable to solve that system of linear equations using techniques of linear algebra so when we set this up we write on this side since this is our y we have m lambda one plus b and this equals m of lambda two plus b and our unknowns are m and b so if we set up our matrix system we get and what i'll do for convenience is i'll put the ones on the left so i'll put my b's on the left column so it's really b plus mx one one and then this is lambda one lambda two and our two corresponding values f of lambda one which in this case is two and four and we know what lambda one and lambda two are they are four and sixteen so really this is equal to one four one sixteen two four and if we try to row reduce this system and solve it what we end up getting is b equals four thirds and m equals one sixth so this line is of the form y equals four thirds plus one sixth x and that's our polynomial this is our q of x and what we'll do in the next video is we will actually apply this polynomial to our matrix and see if it also satisfies the same equation so here's the polynomial that we found as a real valued function in this case and if we wanted to define q of any matrix i'm just going to write a but it's for any matrix a we would the associated polynomial on matrices would be four thirds times the identity matrix which in this case is an n by n matrix well in this case it's two by two matrix plus one sixth a so let's see what happens when we actually compute this so we have four thirds of the identity both along the diagonal plus one sixth of our matrix a so it's 10 over six which is five thirds one one five thirds and if we add these two matrices what do we get nine thirds which is three one one three which is exactly what we found for f of a before so we already know that when we square this matrix we get exactly our matrix a back now let's look at the more general situation so we're going to go back to our setup where we have an n by n matrix a a function f on the set of eigenvalues so we write if a is n by n and lambda one through lambda n are the eigenvalues and f is a function on the set of eigenvalues to let's say the complex numbers we're going to find a polynomial q that first satisfies the initial equation we wrote down for the associated eigenvalues so our goal is to find a polynomial q such that q of when we plug in our corresponding eigenvalues we get f applied to those corresponding eigenvalues and we already know that that's problem will help us solve this one by a similar analysis that's why we're reducing our problem to finding a polynomial on just a finite set of numbers rather than trying to find the answer to our matrix problem and in fact when we look at the degree of this polynomial we notice that it was also matching the degree of the size of our matrix and that's going to be true in general we'll be able to find the polynomial whose degree is at most the size of the matrix that will solve that problem namely q of a equals f of a and why that happens is precisely because of this equation because there are going to be at most n distinct eigenvalues and so we only need to find a polynomial so let me draw this as visually let's just assume everything is real so it's simple to draw this so if we have lambda 1 here lambda 3 here lambda 2 maybe another lambda 4 somewhere out here and let's say lambda 2 equals lambda 5 for instance and if we apply f to these numbers let's say they look something like this what we're going to try to do is find the polynomial that fits through these in this case four points and the reason it's four is because two of our eigenvalues are repeated and so we have to find the polynomial through these four points so and if we had n distinct eigenvalues we would have n distinct points through which we would have to find a polynomial sorry i misspoke i think i said degree two i meant degree one because one is the highest power but it starts from zero so in this case we would find a degree in this case we would find a degree three polynomial and in general it would be at most n minus one degree so and again if we have multiplicity that's non z that's um bigger than one then the problem is going to be a little bit easier to solve because we can find a polynomial of a lower degree so let's just assume that all eigenvalues are distinct just it's not it's not actually making our problem easier it's making it a little bit harder because if some of them repeat then the problem is reduced to a smaller and simpler matrix algebra problem so if we assume all the eigenvalues that are distinct we're really doing the hardest case now when such a thing happens we can write our polynomial q of x as a zero plus a one x plus a two x squared all the way up to the highest degree which you know just by looking at the pictures we're assuming it's of the form a n minus one x to the n minus one and if we write down all of these different equations we're going to get another linear system and the unknowns of that linear system are these a's and we know the values of x's those are different eigenvalues and we know the q of those x's are it's f applied to those values so the associated linear system that we get that looks like one ones along the vertical on the left side corresponding to the coefficient in front of a zero the coefficients in front of a one are the different eigenvalues the coefficients in front of a in front of x squared are the squares of our eigenvalues and then the coefficients in front of our highest degree are our eigenvalues to the power of that highest degree and the augmented side of our matrix is the value of those different eigenvalues so our goal will be to try to solve this system well actually our goal is a little bit easier than that the statement of the theorem says that there exists a polynomial q that satisfies the equation q of a equals f of a and so all we really have to do is show that such a polynomial exists so we don't have to solve this solving it is what is q so given a matrix a what is what is q the what is that polynomial q we're just trying to show that one exists in other words what we want to do is answer the question does a solution to this system exist and if we want to know how a solution exists if well if we can solve this system right and one criteria that allows us to solve this system is that if this matrix here which is an n by an n minus what is this an n by n matrix right it's an n by n matrix and if this matrix is invertible and when is the matrix invertible if the determinant of this matrix is non-zero so solution exists if the determinant of this matrix which is called a van der man matrix if this determinant is non-zero so what we're going to do is it's going to be a little bit of a brute force method but we will find one way to compute the determinant of this matrix and therefore show whether or not it's zero and see if we can answer our problem whenever we have a problem with arbitrary n it's a little bit difficult to see what the pattern is without doing an example so i think it's good to try out a simple example or at least somewhat simpler by computing the determinant of the same matrix but where n equals let's say three so we have a three by three and we want to compute this determinant and we want to compute it in such a way so that we can use some of the ideas for computing this determinant and abstract it to that more general case now this isn't the most simplest way to do such a thing but it's one way and i'm sure there are many many other ways to compute this determinant some of which may be certainly more clever than the approach that we'll take so we're going to do this by essentially row reduction and for the first step we're going to get rid of the ones underneath the top left one and by just subtracting the first row from those so if we do that that doesn't change the determinant and we get the top row is left alone and then the rows below it look like zero zero lambda two minus one lambda three minus one and this becomes lambda three cubed minus lambda one cubed uh sorry squared and lambda two squared minus lambda one squared now when we uh lambda two minus lambda one is actually a common factor in this second row because this becomes lambda two plus lambda one when we pull that out and this is lambda three plus lambda one so when we distribute out we get lambda two minus lambda one lambda three minus lambda one times the determinant of what's left over which is one lambda one lambda one squared zero one zero one lambda one plus lambda two lambda one plus lambda three and this happened because the determinant remember when you take the determinant and you multiply any row or any column by a number you can distribute out that one number for that one column in this determinant you can think of the volume if you scale one side of the room by a factor and another side of the room by a different factor then the determinant is computing the area and you scale by both of those but for each side you only distribute one of them so now we're looking at this and we want to compute the determinant of this now of course what's left over is a two by two so it's very easy to compute the determinant but if we wanted to have an inductive proof if we did a similar calculation here for a larger matrix what we would have is lambda one through lambda one to the n minus first power up here and we have a much larger matrix which isn't very easy to compute the determinant of by some explicit formula it's sort of complicated to write so what we want to do is we want to think of how to compute this maybe more conceptually and what we can do is notice that lambda one appears here in each of these two terms and if we multiply the second column by lambda one and subtract what happens is this cancels the lambda one cancels the lambda one cancels and you're only left with lambda two and lambda three and you also don't change the determinant because you're taking one column and adding it to another so this is also equal to the determinant of what's left over after you do that subtraction this is zero zero one zero one and then just lambda two and lambda three left over well you can even do something even a little bit more simpler now now you have a one here you can multiply this by lambda one to get rid of that so i'm not even going to write that whole step out we can just erase this and put a zero here and now here's the amazing part what's left over after you perform these operations is another van der man matrix on the bottom right corner and we can continue this process now because the determinant of this because this is a one is equal to the determinant of this so we've reduced our problem from an n by n matrix to an n minus one by n minus one matrix of the same form and if we keep going down further up until maybe this step or even further than that then we would find out what the determinant of this matrix is so if we did that procedure again of course you can compute the determinant of a two by two no problem but if you did that procedure again subtract you get a zero here move that over you end up getting lambda two minus lambda three it's already of that it already breaks up like that pretty easily and you get lambda two minus lambda three that pops out so you end up getting is the product of i and j let's say i is less than j and j is less than or equal to three and i is greater than or equal to one of lambda j minus lambda i so you actually get the product of the differences of all of these different eigenvalues and because we're assuming that the eigenvalues are distinct all of these numbers are not zero therefore this is not equal to zero and so we automatically know that the determinant of this matrix is non-zero so we can make a guess that the determinant of that more general matrix of that more general van der man matrix is exactly the product of the differences of all of the eigenvalues and therefore is not zero if they're distinct and we can prove this by induction we already know what happens when n equals one or when n equals two and not even n equals three and so what we can do is if we assume that this formula is true for n and go to n plus one then what we want to do is reduce that problem to this one and show that those numbers factor out and then we can apply our induction hypothesis and prove that this formula holds more generally and the way we do that is very similar to this so i'll put a question mark here and i'll write what this equals by doing this first step which was here sorry this first step in subtracting the first row from all of the rows below it what we end up getting is the determinant of and here we have a bunch of zeros below the ones so we have one and i'll write two rows just so we see more of the pattern uh this is a zero sorry zero lambda one and then this is lambda two minus lambda one and this is all the way down to lambda n minus lambda one all the way up to and let me write two additional terms here this is going to be lambda n minus two lambda one n minus one now this is lambda two to the n minus tooth power minus lambda one to the n minus tooth power and here we have lambda n minus one minus sorry two minus one so that's a one okay now at this point we can follow a similar procedure by pulling out a lambda two minus lambda one from each of the terms but then we would have to figure out what is lambda two to some power minus lambda one to that same power divided by lambda two minus lambda one we could do that and factor it out by using um polynomial division find out what the corresponding factors are but maybe that's not the best way to do it another option although that method of course you know teaches you a lot about how to do polynomial division in case you haven't seen it before it's quite nice but maybe there's another easier way similar to what we did over here and what we did here was we took the second last column and we multiplied it by lambda one and we took the difference here we could have also done that in this step it just might have been a little bit it might have looked a little bit more complicated because of the higher powers but let's try to do that anyway if we multiply the second last column by lambda one from the last column the power here will be n minus one which will match this one and these two terms will cancel and you'll just get zero what happens to this term if you multiply this by lambda one so let's write this out so we have lambda two n minus one minus lambda one to the n minus one minus multiply this whole term by lambda one that becomes a plus lambda one to the n minus one and then what's left over is minus lambda one lambda two to the n minus two these two terms conveniently cancel and what you're left over with is lambda two appears the highest common factor is lambda two to the n minus two so we can pull that out and what's left over after we pull that out is lambda two minus lambda one and therefore we can much more easily see that this factors out after we do this subtraction now we've done imagine we've done that for the last column here now we have this second last column which still has all of these complicated terms but what does this term before it look like lambda one to the n minus three and then it's lambda two to the n minus three minus lambda one to the n minus three so you can just see it's of the form n minus j and if we multiply this by lambda one and subtract it well these two terms will cancel and a similar thing will happen here it's just that the power will now be not lambda two to the n minus two but lambda two to the n minus three after we take this difference and so if we keep going in this direction taking all of those successive differences we will be left over with so this determinant equals the product of lambda j minus lambda one and j goes from two to n and we're left over with the determinant of a smaller bandermen matrix which looks like one zero zero and this term is one and it's all the way one's all the way down let me write just the first and last ones we also have zeros here up to the last term now what is this term here it's lambda two to the n minus two now all the way down to lambda n to the n minus two and if we assume the induction hypothesis then we know that the determinant here is the product of lambda let me use a different letter k and l so k minus l where k is greater than strictly greater than l and l runs from this time two to n and and and k so we end up getting after all of this work by using that induction hypothesis we get that this is this expression right here and in particular this says that our determinant is non-zero so we can compute the inverse of this matrix if we wanted to now that we have all of this set up we can prove our main theorem which remember said that given any diagonalizable matrix a there exists and a function f on its set of eigenvalues there exists a polynomial q such that q of a equals f of a and so far based on the facts that we just proved we know there exists a polynomial q such that q of lambda i equals f of lambda i for all of the eigenvalues of that matrix therefore if we compute f of d which was defined to be f of lambda one f of lambda n of our diagonal matrix d then this is the same exact thing as q of lambda one q of lambda n with zero everywhere else by this result we can find a single polynomial q that satisfies this but this is exactly the same thing as q of d well why is that well if we write our diagonal matrix d out and we apply the polynomial q to it right so let's just see why this is true if we take our diagonal matrix and then we plug in our polynomial so we had what was it it was a zero times the identity n by n matrix this is what if we view q as a polynomial and we plug in the formula for q of d this is by definition of a matrix applied to a polynomial sorry a polynomial um with input a matrix plus a1d plus a2d squared plus a n minus 1 d to the n minus 1 and we know what this looks like as a matrix this is the identity it looks like a zero all along the diagonals and zero everywhere else this is a one times lambda one all the way down to a one times lambda to the n lambda n and then here we have plus a2d squared now d squared since d is the diagonal matrix is just lambda i squared in each of the diagonal terms so it's a2 lambda one squared all the way down to a2 lambda n squared and similarly for all of the other terms up until this last one then what happens when you add all of these matrices together well you get a zero on the top left term you get a zero plus a1 lambda one plus a2 lambda one squared plus dot dot dot a n one minus lambda one to the n minus one that's exactly what q of lambda one is and similarly for all of the other terms so this justifies why this equality holds and of course q of any matrix is defined similarly so in particular q of a equals a zero times the identity plus a1 times a plus a2 times a squared and so on so now let's show that f of a equals q of a now f of a by definition of f of a is p times f of the diagonal matrix times p inverse where p is the matrix of eigen vectors corresponding to those eigen values is a matrix of eigen vectors now f of d by this calculation is also q applied to d and so that equation is true by what we just showed now we know what q of d looks like it looks like this and we also know what happens when we distribute p throughout so we get something that looks like a zero p times p inverse plus a1 pd p inverse all the way up to a n minus one pd to the n minus one p inverse that's just what that looks like when you distribute p and p inverse on both sides now this is a and what is this expression and likewise for all of the terms in between well let's just let's just look at what happens if we um if we set f n is like three or something like that or maybe even two is enough um so let's look at this term p d squared p inverse so p d squared p inverse also equals p times d times d times p inverse and because p and p inverse are well inverses of each other we can plug in a p inverse p between these two d's and this gives us p d p inverse times p d p inverse again and this is just a and this is just a so we get a squared therefore when we actually write out what all of these things equal we get a zero p p inverse plus a one which is the identity sorry this is the identity matrix and this is a plus a two a squared plus all the way up to a n minus one a to the n minus one and this is the definition of q of a so this shows us that that theorem is true so this has an interesting corollary so let a be diagonalizable and let b be any square matrix of the same size and suppose that they satisfy the fact that when we multiply them in any order they're equal to each other then f of a b equals b f of a for all functions that are defined on the eigenvalues of a and how do we prove this well because a is diagonalizable then f of a equals q of a for some polynomial q and because it's a polynomial if we replace this expression with q of a times b so if we have q of a times b this is a polynomial in a and each of the terms look like a to the jth power times b right so you have a to the jth power times b now a to the jth power means you write the matrix a j times and if you have a b on one side you can use this to move each of those a's one over at a time you can move them over one at a time therefore a j a to the jth times b equals b times a to the jth therefore it's immediate that this equals b times q of a and it immediately solves this problem because q of a equals f of a and the interesting thing about this is that b can be any matrix whatsoever and a only has to be diagonalizable for this to be true so hopefully this is an interesting fact namely that given any function at least that's defined on the set of eigenvalues of a it could be defined on a larger set of the subset of the complex numbers but at the very least if it's defined on those eigenvalues then we can always find a polynomial for which when we apply that function which could be completely wild such such as the logarithm or something like that then there's a polynomial that gives us the same value for that matrix if we apply the polynomials of the matrix versus if we apply the function to that matrix and a lot of this has to do with the fact that we're working with finite dimensional matrices one of the interesting things about linear algebra is what happens when your matrices become of infinite order and then this really becomes a much more subtle issue and clearly the method that we've used should probably break down for instance we're not working with polynomials anymore and a lot of this is explored for instance in functional analysis and spectral theory and the functional calculus for such operators in these next few videos we'll learn about affine subspaces affine combinations and affine transformations which are very slight generalizations of linear transformations as we'll see so the first definition that we'll need is what an affine combination of vectors is so but to do that we'll recall what a linear combination is so a linear combination of vectors v1 through vk in rn is a combination of the form lambda 1 v1 so we add up all our vectors with some weights and these weights will take to be real numbers so that's what a linear combination is and closely related to this an affine combination of these same vectors is a linear combination and for short I may often write just using the summation notation oops let's call this not k but j and this goes from j equals one to k such that the sum of these coefficients is equal to one so it's basically a linear combination but we have an additional constraint on the coefficients so for example when k equals two we have two vectors let's say v1 and v2 then every such affine combination is of the form t v2 plus one minus t v1 where t is a real number and you can look at what this says let's say these two vectors are different let's say v1 is here and v2 is here then at t equals zero so this right this is describing the set of all such combinations and when t equals zero this gives me v1 so at t equals zero i'm here and when t equals one i'm at v2 and as you vary t over the set of real numbers you get all the points along the straight line through v1 and v2 this is very different than the set of all linear combinations of v1 and v2 because if let's say the zero vector were here then v1 would be this corresponding vector v2 would be this corresponding vector and all linear combinations of these two vectors is actually the plane obtained from v1 and v2 that's what the span of these two vectors are but all affine combinations is just this line and so just like we can define the span of vectors we can also define the affine span of vectors so the affine span of the vectors v1 through vk is and we denote it by aff and it's defined to be the set of all affine combinations so the set of all lambda j vj such that all of the lambda j's are in r and the sum of them equals one so let's look at another example where we take three vectors so let's say v1 v2 v3 and let's just be concrete and let's say we're in r3 so that we can visualize this a little bit better so there are several cases that we can take just like for linear combinations for instance if one of these vectors was a linear combination of the other then the span of this would be a plane and if all of them are scaled on multiples of each other then the span is a line and if they are all the zero vector then we just get the zero vector and if they're all linearly independent then we get all of r3 there are many different cases depending on the relationships between v1 through v3 same thing happens for affine span in the sense that it depends on how these vectors are related so let's look at three possible cases so case one let's say v1 v2 and v3 are not collinear so this means that all these three points don't lie on the same line so maybe they look something like this like for instance you can take the unit vectors e1 e2 and e3 and r3 then the affine span of these three vectors is equal to the two-dimensional plane containing these vectors and it's not so immediately obvious that that's what happens but let's just think about this if we take v1 and v2 then it includes the affine span of these two vectors which means we have this line through these two vectors is in our affine span and likewise the line through v2 and v3 is here likewise the line v1 through v3 is here and now that we have all of these lines in here we can also take affine combinations of these points so you can take for instance the affine combination of this point with this point which gives us this line this point with this point which gives us this line and you can see by taking all such combinations all such affine combinations of these three vectors we can actually get any point in the plane that contains these three points in case two let's imagine that v1 v2 v3 are collinear but at least two are distinct so in this case so i'm assuming that at least two so either the possibilities are something like they're all different but they lie on the same line in which case the affine span of these three points is equal to the straight line through those two points those three points or the other cases the affine span if two of them happen to coincide then we just have two points but i'm assuming that they're collinear and at least two are distinct so we also get the straight line through those two points and the final case case three is when all those vectors are exactly the same vector and when this happens we only have a single point and all affine combinations of a single point is just that point itself so these are some of the basic constructions that you can do with vectors besides just taking linear combinations you can also take affine combinations there's yet another type which we won't discuss is if you require that the sum of these coefficients adds up to one but they're also not just real numbers but they're strictly non-negative so they have to be at least zero and that's called a convex combination which is a closely related idea and in the case of these three vectors for instance it would be the triangle who's three vertices are those three vectors that we had here and in this case if we took convex combinations it would be the interval between these two farthest end points and in this case we would have the same situation as we had here where we would just get a single point a common question that we ask given a set of vectors is if we have another vector when is that vector in the span of those vectors and this shows up for instance if we solve a homogeneous linear system and we have a bunch of solutions that we know are actually solving that system but let's say we don't know exactly what that system is we just know we have this collection of solutions and if somebody hands us another vector then we can ask is that vector a definitely a solution of the system that we have and in this case since we don't know the system we can't plug in that vector to check instead what we have to do is check if that vector is in the span of the vectors that we have already if that vector is in the span of the vectors that we already have then that vector is definitely a solution but it doesn't tell us that if it's not in the span of those vectors and it's not a solution because we might not have had a set of vectors that span the solution set but at the very least it gives us a criteria for guaranteeing that if that vector is in the span it's definitely a solution and likewise you can ask well if I have a bunch of vectors that I happen to know solve an inhomogeneous equation and somebody hands me another vector is there a similar criteria and there is and that involves the notion of affine span which we talked about in the last video so the question that we could ask is given vectors v1 through vk and another vector u in rn when is u in the affine span of these vectors v1 through vk now in order for us to solve this problem then we have to be able to write u as a linear combination of v1 through vk right but because it's an affine combination we have an additional constraint on what these coefficients could be and that constraint is that lambda 1 plus lambda k equals 1 which is also a linear system in the unknowns lambda 1 through lambda k and therefore if we want to solve this system this question is equivalent to the following one which is is the augmented matrix where we take our vectors v1 through vk and we can also write vk through vk through vk through vk through vk through vk through vk augmented with the vector u but in addition augment this further by one additional row stating that one equals so now this is the number one equals one dot dot dot one let me write this one so it's clear so this vector is just denoting the fact that it could have several entries so we have an additional row in our augmented matrix and the question is is this consistent so this is actually how we would solve such a problem and how does it show up in solving inhomogeneous systems we'll get to that after we talk about what an affine subspace is and the fact that the solution set of an inhomogeneous system is an affine subspace so for this let's just briefly recall a vector subspace i'll put vector usually in parentheses but a vector subspace of our n is a first of all a subset let's call it v such that three conditions hold now there are many equivalent ways to define such a thing but this one seems pretty concise and simple and the first condition is that the zero vector is in v the second condition is that if you take a vector in v and you scale it by any number then that scalar multiple is also in v so lambda v is in v provided that the vector v was in v to begin with and lambda is a real number and three the third condition is that if i take any two vectors in v then the sum of them are in v so let's write u plus v is in v for all pairs u and v that are already in v and this is what a vector subspace is now this definition of a vector space is a little bit algebraic it's telling us when certain vectors are in v and we can have a little bit more of a geometric interpretation of a what a vector subspace is by using affine combinations so equivalently v satisfies which means that if v satisfies the following conditions i'm about to write then it satisfies this one and conversely let's call it instead of i and two so let's use i because the first one's the same the zero vector is in v and the second condition which is sort of a combination of these two is that t u plus one minus t v is in v for all t in real numbers and for all u and v in v now this is exactly a linear combination of the vectors u and v so if i take two vectors u and v inside of v then this affine combination is describing the set of all points along the straight line through those two vectors so this is saying that a subspace can also be described as a plane that contains the zero vector and plane could mean hyper plane and this is because we always have the straight line through any two points in our subspace now the fact that we've written it this way allows us to define an affine subspace in a much more closely related fashion to this definition because for an affine subspace we'll only be able to combine combine vectors in an affine way so we define an affine subspace is a subset a of r n such that and now we drop this first condition so all we require is that affine combinations of two vectors are always inside so t u plus one minus t v are in v for all same conditions as here and you can ask well maybe an affine subspace should be if i take any collection of points inside of it then the affine span of those points is inside of v and that actually follows from this condition and the usual properties of scalar multiplication and vector spaces and how you add them so the main example that we want to illustrate is the solution set of any linear system ax equals b this is just notation for a linear system where b is a vector in r m and a is an m by n matrix so the solution set of this is an affine subspace of r n now the solution set of an inhomogeneous system is not a vector subspace because in general zero is not a solution in fact when zero is a solution then it exactly is a subspace and when zero is not a solution we get this more general notion of an affine subspace and it's a fact that affine subspaces are translates of vector subspaces and what do i mean by that a is an affine subspace if and only if there exists a vector v in r n such that if i take the subs if i take this affine subspace a and subtract v from it now what this means is the set of all vectors of the form u minus v where u is in a if this subset of r n is a subspace in this sense is a vector subspace in fact we can use any vector inside of a to translate it to the origin so in fact v will be a vector in a in fact any vector in a will make this a vector subspace so the picture for this is actually really nice i guess i shouldn't have called it a because i called this linear system a that may be potentially confusing so maybe let's call this script a so let me use a script a here and fortunately the letter a was only used in this one example but let me write it like this here so it's the same so there's no conflicting notation okay so here's our affine subspace a and if we take any vector in here let's call it u no let's call it v so v points from zero up to where that vector is and if we take this vector and we subtract it then v minus itself will be zero so i know that this plane is going to contain the zero vector and so here we have a minus v and no matter which v we picked right if we picked another one let's say we picked this vector right here let's call this one u then if we translate that u minus itself is zero so we also get this plane back as well and so a good application of this of this sort of mathematical object is if the vector xp p for particular is a solution to ax equals b for some linear system like in the previous example then the solution set meaning all the solutions of ax equals b is as we know the particular solution plus the homogeneous solution set so it's a set of all all sums of particular solutions with homogeneous solutions so axp solves the system this and ax homogeneous solves the associated homogeneous system so if a represented the solution set of an inhomogeneous system and a minus v represents the solution set of a homogeneous system and all we have to do is pick one of these solutions and then all of these solutions and then take that solution and translate it by that vector which was a particular solution of the inhomogeneous system just as we can define linear transformations which are functions that take linear combinations to linear combinations we can also define affine transformations and the idea is that they take affine combinations to affine combinations which translates geometrically to it takes lines or hyperplanes to other lines and hyperplanes as well so the definition of an affine transformation is exactly that an affine transformation in this case from rn to rm is a function first and foremost and i will write my arrows as usual from right to left so it's a function let's call it s such that s of lambda u plus 1 minus lambda v is equal to lambda s of u plus 1 minus lambda s of v for all u and v in rn and for all lambda in r and it's a consequence of this definition that if we take any affine transfer if we take any affine combination of vectors then s of that affine combination is going to be the affine combination of s applied to each of those vectors this is a little less obvious than it is if you take linear transformations and you show that it follows from the assumptions of a linear transformation that it takes linear combinations to linear combinations and the reason it's a little bit slightly more challenging is that if you apply this in a binary fashion right if you take two vectors u and v so you think of this as a function from let's say r cross r to the n cross r to the n to r to the m then in order to apply this here you have to put parentheses in an appropriate place but in order to have an affine combination with the appropriate parentheses you have to be a little bit careful about what your resulting coefficients are and it's not so easy to see how to do that but it can be done and here's the example that I really like to think of when comparing linear transformations to affine transformations and things you might have seen from a while back not in my lectures but in your early learnings of math perhaps so if we take the usual equation of the form y of x equals mx plus b where m and b are both real numbers and x is a variable and y is the function of x then this is an affine transformation from r to r because it takes a real number r x and it gives us another real number and it's linear if and only if b equals zero linear in the sense of being a linear transformation so this will help you perhaps relate the difference between an affine transformation and a linear one and we'll later talk about a theorem that relates the two exactly together in fact we'll state that theorem now so the theorem says the following are equivalent for a function now we're just describing a function and these conditions are that s is affine is an affine transformation so i'm not assuming any linearity this is just an ordinary function so s is affine if i take the function s and subtract s of zero from it so if i take s minus s of zero now this is a function in the sense that if i take any x the function associated to this is defined by s of x minus s is s of zero so this is also a function from r into rm if this is linear and c there exists an m by n matrix m and a vector b in rm such that s of x equals mx plus b and the reason i mentioned this example is precisely because of this theorem because it allows us to relate linear transfer affine transformations to transformations that we may have seen a long time ago and i personally think it's instructive to prove this theorem to get a feeling for how affine combinations work so let's actually prove it and we'll prove this by proving a implies b implies c implies a so for the first part of this proof we're going to define we i don't want to keep writing s minus s of zero so we're going to define l to be this function s minus s of zero and the goal is to prove that this function is linear so we have to check the associated conditions for linearity and before we do that let's just establish that if we apply zero to l if we apply l to zero then we get exactly zero because this is s of zero minus s of zero so it definitely preserved zero and we know that this doesn't give us a sufficient condition for linearity but it's definitely necessary so second if we take a coefficient lambda any real number lambda and if we take a vector u that's inside of our n then by this definition this is s of lambda u minus s of zero and this is an interesting combination of lambda u and zero this also equals s of lambda u plus one minus lambda of the zero vector right the zero vector is in the domain of s and so i can multiply by any number and i still get zero and now the interesting thing about this is that this is an affine combination of the vectors u and zero so that's what this term is and this just comes along for the ride because s is affine i can take these coefficients out and this is also an affine combination of itself so i can write minus lambda s of zero minus one minus lambda s of zero and so what do we have we have lambda of s of u in parentheses minus s of zero which is exactly l of u and these two terms cancel so we're left over with lambda l of u when we're done with this calculation so it's linear in this it's the first condition of linearity is proven and the second condition is if we take a linear combination this also has to go to a linear combination as well so let's just use the definition this is s of u plus v minus s of zero and now let's draw a picture here because this is going to help let's say we have the vector u here and the vector v here and this is the zero vector now the vector u plus v is somewhere here now can we express u plus v as some convenient affine combination of vectors for which we know what s does to those vectors well if we extend u so we take combinations of u and combinations of v then u plus v can be written as an affine combination of some multiple of u and some multiple of v in fact it can be written like that in many ways all i have to do is pick any point here and draw the straight line through this point and u plus v and then find out what that vector is or we can take a simple shortcut and just notice that if we multiply this by two this by two then those two points to u and to v are on the same line that goes are on the line that goes through u plus v and how do i know that well if i take half of this and half of this i get exactly this and half and half is an affine combination so this equals s of one half to u plus one half to v minus s of zero and because this is an affine combination we have one half s of two u plus one half s of two v and now we can also subtract half of s of zero here minus one half s of zero again and now one half is a common factor here so this gives us one half l of two u plus one half l of two v but by the thing we just proved we know that we can pull out scalars from l so this gives us l of u plus l of v and this together proves the linearity so this is the proof that a implies b but if we have an affine transformation we subtract by what it applies to when you plug in zero then we get a linear transformation now the rest of the proof is actually not bad afterwards because for b implies c if we have a linear transformation we already know we have a matrix corresponding to it so because l is linear we get an m by m matrix such that l of x equals m of x equals m times x for all x in the domain of s which is r n so set b to be equal to s of zero and when we make when we set that to be that then since l is s minus s of zero then we take s equals l plus s zero which is b then we get y then we get the equation of the form s of x equals m x plus b so that that's what how b implies c and then if we have c to imply a this is much much it's very similar to these kinds of calculations of taking affine combinations if we take s of like let's say lambda u plus one minus lambda v plug that in here we know m acts in a linear way this is a matrix we apply matrix multiplication distributivity associativity of all these properties of addition of vectors and scalar multiplication of vectors in r m and we get that s is affine from this assumption so these three conditions are equivalent for any function from r n to r m that characterize what it means for transformation to be affine as we know functions can be composed provided that the domains and codomains of these functions match up similarly affine transformations compose and the composition is affine in an analogous way to how linear combinations are composed and the resulting composition is also linear so we have a fact and this fact is that the composition of two affine transformations s and t is also affine and because it's affine and we know that each of these transformations can be written in the form of mx plus b for some appropriate matrices and appropriate vectors b we can ask what is the resulting matrix for what is what are the resulting matrices and vectors for the composition of two affine transformations so let's write s of x as mx plus b and t of y as nx plus ny plus c and let's just be careful about composing these so if we take the composition s composed with t and we apply a vector y then this by definition is s applied to t of y and we know that t is of this form so we get ny plus c and this equals m times the input of this function which is ny plus c plus the associated b oh this should be a plus from the transformation s and if you distribute this all out we get mn times y plus mc plus b so the associated matrix that we get is actually just the multiplication of the matrices that we started with and the associated vector b is some interesting combination of the original vectors b and c but also with the matrix m and in particular if s from same setup rm rn to rm is invertible and we wrote our decomposition like this then we could ask what are the matrices and vectors associated to the inverse of this matrix and that is exactly so s inverse let's write of y just because we're changing the codomains with the domains we get the inverse of m plus well rather minus m inverse of the vector b and why does this work well if you just take s for instance and you apply it to this result we know what this combination looks like we get m applied to this term which gives us just y back m applied to this term which gives us negative b but we have a plus b and those two cancel so just like the composition of linear transformations need not commute similarly the composition of affine transformations need not commute so let's look at an example and a common affine transformation is leave everything alone just translate by some vector so let's just keep things very simple and let's assume that we translate by the vector one zero so we shift everything along the x axis in r2 so we shift everything along the x axis so let's say the vector let's draw a smiley face here this smiley face transforms under this transformation let's say smiley face is it contained in the unit box so i have to make this a little bit bigger and it gets translated along the x axis in the positive direction so let's call this transformation t another transformation that we can look at let's call this one s is rotation by 90 degrees so when we rotate the face looks something like this and then we can ask what happens when we apply s and t in that order or if we apply t then s and what are the matrices and vectors associated to these transformations let's actually answer that question first so t of any vector x equals well it's just translate so it says leave everything in the plane alone so that's the matrix corresponding to the identity and shift by the unit vector in the x direction so i call that e1 so remember e1 equals the vector 1 0 and s of x is the transformation that rotates by 90 degrees so i'm going to write that in matrix form because rotation by 90 degrees is 0 negative 1 1 0 applied to the vector x and the b here is 0 because this is in actually this is actually a linear transformation so what happens when we compose these in different orders so let's just think about this imagine you translate first and then you rotate this rotation is occurring about the origin so when we apply t first and then we apply s again we're rotating this picture by 90 degrees with respect to this origin so this face is actually going to be further out than it would have been if we applied the transfer if we apply the rotation initially and then translated you can already see the big difference between these two pictures so if we apply first t and s apply to this picture let's start with our initial configuration that what happens after you apply this will first you rotate and then you translate so this translates everything to something that looks like this but if instead we applied s after t to the same initial configuration well first we would translate and then we would rotate by 90 degrees that would look much much different so if i were to draw this as a unit grid that face would now be in this box rotated by 90 degrees so it looks something like that so now let's just check the math out to make sure that this is consistent with these geometric interpretations so if we apply t after s to any vector x what do we get well t says first translate then rotate so we end up translating by x then rotating because we do matrix multiplication and the resulting vector b is just e1 so we get rotation apply to x plus e1 which is exactly what we expected from our picture here if we did it in the other order well in that case first we translate and then we rotate and when we rotate we not only apply the rotation to our initial vector x but we also apply the rotation to the vector e1 and e1 gets rotated by a 90 degree rotation to the vector e2 so in this case we get this instead so and this is consistent with this picture because if we rotate first our face ends up somewhere here like in this picture and then how do we get from this picture to this one we translate up by a unit vector by the unit vector e2 the next few videos are going to be a sort of combination of probability theory and matrix algebra and we'll start by talking about finite sets and stochastic matrices or what I call stochastic maps and we'll try to get through a lot of interesting topics so first I just want to make sure that we have all these definitions at hand and the first one that I want to make is a probability measure and for simplicity we will be working with finite sets all the time so a probability measure on x where here x is a finite set is a function that takes every element of x and it gives me a number and that number is between 0 and 1 and the sum of these numbers when I sum over all elements in x and let me just set notation that when I apply this probability measure to x instead of writing p of x I will write p subscript x so such that the sum of these numbers equals 1 and a stochastic map is something very similar to this ah and let me even set some more notation the set of all probability measures on x is denoted by px so a stochastic map from x to y so another finite set is a function from x to probability measures on y let's call that f and we're going to introduce a convenient notation for such stochastic maps so first let's explain a convenient notation for how to write f so if we take an element x and we apply it we'll get a probability measure on y for now let's just call this f of x because this is a probability measure it takes an element y and y and gives me a number between 0 and 1 so this takes an element y and maps it to f of x of y now it's a little bit annoying to write something like this and potentially confusing so instead of writing this we will write f subscript y x and the reason we write the y on the left is because we will end up in y and x on the right because we started in x we'll see why this is convenient in a moment when we talk about composition of stochastic maps and we'll also introduce graphical notation for this instead of writing a map from x to py we will replace this by a map from x to y but we'll use slightly different notation for our arrows and we'll make them squiggly arrows like this and the reason we want to do this is because there's a very nice example of a stochastic map if we have a function so if x to y is a function this actually gives us a natural stochastic map and just for this example we'll call it delta f oops these should be squiggly arrows now so delta f to y which sends an element x to a probability measure on y and what should that probability measure be well if i take let's call this delta f for now if i take an element in y and i plug in our initial element x so again we're using this notation here then this is defined to be the chronicer delta so if we take the element x apply f to it we know what that is because we have a function already and then we plug in y so visually how do i think of something like this well a stochastic map is telling us if we start off in x let me draw the arrows backwards for a moment then it takes an element in x and it spreads that element out over y by giving us a probability distribution on y but if we already have a function then we know where that element x goes it goes to a specific element which we call f of x and therefore it does give us a probability distribution and that probability distribution is one when we evaluated at f of x and zero everywhere else so i think of this as a deterministic process in some sense because we know given an input we know exactly what the output would be with 100 probability so we notice that there's this close relationship between functions and stochastic maps in fact functions are special kinds of stochastic maps and instead of writing delta f all the time we'll simply write xf and we will think of this as a stochastic map but we'll write it as a straight arrow another example there is a one-to-one correspondence between stochastic maps from a single element set into another finite set x so this is going to be my notation for a set containing a single element which i'm just calling bullet and probability measures on x why is that well if i have a stochastic map i apply an element of it i apply it to an element of the domain and that gives me a probability measure on x but this only has one element so i only get one probability measure so in general a stochastic map is you can think of it as a family of probability measures indexed by the domain of that stochastic map stochastic maps define conditional probabilities or at least some kind of restricted notion of conditional probabilities and the reason is because f y x you can think of this as the probability of y occurring given that x has occurred and you can if you know if you have a definition of conditional probability and you are looking at single element events then this definition coincides with the one you're thinking of for finite sets and again single element events but if you're not then we're going to think of this as our notion of a conditional probability so for being very concrete let's take x to be the set whose elements are so pick your favorite supermarket and let's say there's a good sale at that supermarket and let me think of that as one element of this set x and the other element is going to be a not great sale or a not good sale at that same supermarket so two elements and let y be the elements that state whether I go to the supermarket this week or you go or whatever or I don't go so I go to the supermarket let's say this week or something like that or I don't go and let's say if there's a good sale let's say the probability right because I might have a lot of food stocked in my pantry I may or may not go to the grocery store this week but if there's a good sale maybe there's a good chance that I'll go let's say there's a 90% chance that I'll go and if there isn't a good sale well it might be that I still need to get food so there's still going to be some chance that I go but perhaps it'll be less I'll be less enticed to go to that supermarket this week let's just say that there is a 60% chance I'll go and with this information we can define a stochastic map from x to y so this actually defines the stochastic map and we'll come back to this in several examples that we'll look at later on because it's a nice simple example and the reason you can figure out what the rest of this is is just by using probabilities because if there is a good sale the chance that I go is 90% then there's a 10% chance I won't go and conversely if there isn't a good sale then there's a 40% chance I don't go so that defines this stochastic map just like with functions we can compose stochastic maps as well but this is going to have a really nice picture so I rather give that its own video and we'll talk about compositions in a moment all right so if we have two finite sets rather three finite sets x y and z and a stochastic maps between them in such a way so that the codomain of f lines up with the domain of g and I really mean source and target here because again if I really think of x as a function it's a map from x to probability measures on y but the domain of g is not probability measures on y it's y itself so it's really better to think of this a little bit categorically where I'm thinking of the target of f and the source of g so given this given stochastic maps we can define a composition of these two and before I write down the formula let's think about how we would do this so here's x here's y here's z what we want to define is an ocean of composition which is determined by if I give if you give me an element in x and you give me an element in z I want to know given x what is the probability that z occurs and there's an intermediary y here so the way that you get that is well I look at all the elements of y and I look at given x what is the probability of that element y occurring let's call this let's say that this is the element y then this is f y x so given x the probability that y occurs and going from y what's the probability that z occurs that also has a probability which is gzy and so the probability of given x the probability of z given x is taking all of these probabilities by varying y and multiplying the corresponding ones when they match up and then adding them all so this is defined to be the sum over all elements in y with their respective probabilities gzy f y x so this is what the composition of stochastic maps is and now you can see why I chose this notation earlier of writing our subscripts in this particular order because if I think of these as matrices indexed by the elements of these sets that we have then this ends up just being matrix multiplication so sometimes these are also called stochastic matrices but I'm going to stick to the calling them stochastic maps so let's look at some interesting special cases of this definition so first let's look at the special case where x is replaced by a single element set y is a set x and g is a function not just a stochastic map so let's take this special example so let's take y a function f and a probability measure on x so first of all what is a probability measure on x look like well if I think of x as a set so let's draw some of the elements of x here let's say here we have nine elements a probability measure sort of gives me a size to each of these elements so I can think of these as water droplets each with a specific size namely the volume so this is sort of what a generic x looks like with a probability measure on it and the sum of the volumes of these water droplets is equal to one now if I have a function f from y to x then the composite here gives me a probability measure on y what is that probability measure well if I just use the definition p followed by f and I evaluated at y this is equal to just straight from the definition we know that this is the sum over all elements in x of the function on the left which is f but f is a function so we know that it corresponds to the direct delta the chronicle delta f y f of x with the probability measure px now if I substitute what this looks like this says this only gives me a non-zero contribution if f of x equals y in other words if y is in the image of f of x is in the image of f and it comes from some x so if we look at the inverse image of y that's going to give me a bunch of elements and that's the only case where this gives me a non-zero contribution and what that means is that this breaks down into the sum of all elements x in the inverse image of y so here we have the sum of all the px's that are in the inverse image of an element y so let's look at this element y here the inverse image of this under a map f so let's imagine that f identifies all the elements that are in the vertical direction so right because a function f might not be one to one so it might identify some of the elements and that's why I've drawn it this way it takes these four elements and gives me the single output y and these two elements gives me another output and what this condition says is that the probability here is the sum of these probabilities in other words the volume of this water droplet is the sum of the volumes of those water droplets likewise here in order to make the volume somewhat geometrically similar to these this would be the resulting volume after we apply this function f and here maybe it's this big so this gives us a nice picture of what compositions like this look like it essentially says that we take these water droplets and then we combine them and when you combine the associated water droplets their volumes add as another example let's go back to our previous situation in fact let me write that example here because it's a little bit it can fit here so in this case we had that set x to be there's a good sale at the supermarket this week and there's not a good sale and the set y is I go to the supermarket or I don't now what if we happen to know the statistics or the probabilities of whether there is a good sale or not at the specific supermarket given that specific week so you compile all of your data over the course of a year for instance and you just ignore the seasons you ignore the months you just look at when is there a good sale for whatever definition of good you might have for for you and let's just say that the probability of a good sale is maybe only 30 percent so roughly 30 percent of the time there's a good sale on a given week and therefore the probability of a not so good sale is 70 percent and so you might ask what is the probability that I go to the supermarket question mark so that's the end of the statement so all we know is that if there's a good sale we already know what those probabilities are I think they were 90 percent and if there is a good sale and 60 percent if there isn't a good sale because I still need to eat and if we happen to know the probability that there's a good sale and therefore the probability of there being a bad sale or not good rather is 70 percent then you could still ask what is the probability that I actually end up going and that's where this composition comes in where instead of having an f like this we instead have our f from our previous example but we also know the probabilities of whether or not there's a good sale so it's a slight generalization of this example and therefore the probability that I go to the supermarket is equal to and in this case I'm going to take the probability that there is a good sale times the probability that I go given that there's a good sale plus so let me actually write that one down so that's 90 percent times 30 percent the probability that there's a good sale times the probability that I go plus the probability that there isn't a good sale but I still go and the probability that I go given that there isn't a good sale is 60 percent and the probability that there is not a good sale is 70 percent and the resulting probability that I go is 69 percent so given those statistics we still know that if I just chose an arbitrary week in the year there's a 69 chance that I'll go to the supermarket that week so now let's look at another example and this example again will come back will come back to this perhaps a few more times so now let's look at another example this one may seem a little bit abstract but it's a very useful one anyway so let's take the diagonal map from x to x cross x what this does is it takes an element x so far we've talked about stochastic maps and how to compose them and how to view ordinary functions as specific examples of stochastic maps what we'll do now is describe how to take the product of two stochastic maps in a way that generalizes the usual notion of the Cartesian product of two functions so given stochastic maps f and g we can form their product and it's another stochastic map that essentially takes the product of these two problems of the associated probabilities point-wise so it's determined by the formula f cross g now remember what our notation is for each element in the domain we get a probability distribution on the co-domain and that probability distribution is determined by what it does to points because we're working with finite sets so that probability distribution is determined by the value of our initial input with our our output and it's just the product of the associated probabilities from f and g and let's just check that make sure that this coincides with our usual definition of Cartesian product when we specify that these stochastic maps correspond to functions so if f and g are functions or how I think of them as being deterministic then this product is given by well we know what happens when these are functions then we use the the chronicle delta and this is x prime f of x while this is delta y prime g of y and this is nothing but it's the same exact thing as requiring that x prime coincides with f of x simultaneously as g as y prime corresponds with coincides with g of y and this is the usual way we think about the Cartesian product because it says what is the value of f cross g at x y well it's f of x comma g of y and this is exactly what encompasses that idea and all of the structure that we've defined so far the idea of this stochastic map it's definition how it composes the fact that functions are special cases in particular the identity function is a special kind of stochastic map it turns out that composition is associative the identity is an identity for the composition for any finite set and this Cartesian product it also satisfies the type of associativity condition and together all of this all of these data give the collection of finite sets with stochastic maps and this associated product this it gives it the structure of a symmetric minoidal category but there's another thing that we haven't yet discussed which is a notion of almost everywhere equivalence or in other words an almost surely notion of equivalence and this essentially takes care of when probabilities happen to vanish and when such a thing happens we can have a notion of equivalence between functions when their probabilities are equal versus when they're not when they're zero and so we get a very natural definition of what it means for two stochastic maps very similar to the way we define almost everywhere equivalence for functions so given two stochastic maps so I'm using different notation than what's up here so given two stochastic maps and a probability measure on x we say that f is p almost everywhere equivalent to g if and only if and the way we define equivalence is that these stochastic maps agree everywhere outside a set of measure zero so outside of events that have probability zero so the way we write that is if and only if the probability of the set of points on the domains of these corresponding stochastic maps where these two stochastic maps differ is equal to zero now what does this inequality mean now f of x and g of x are both probability measures on y so when I write that they're not equal that means f subscript y x is not is is not equal to g subscript y x for some y so this is a very intuitive notion of almost everywhere equivalence there's another sort of diagrammatic way that you can encompass these definitions as well so I'll write this as a theorem but we'll use this idea later on so it turns out that given f g and p as in this definition f is almost everywhere equivalent to g so this is the notation that we'll use if and only if the diagram now this is going to be a little bit of an interesting diagram so we're going to produce our probability on x we're going to duplicate x using the map that we introduced earlier and on each of these two factors we will apply our associated maps f and g on their corresponding terms so in this case we'll have the identity on x here cross f and here it's the identity on x cross g where this product is the one that we justified so if and only if this diagram commutes so first of all this is a very interesting statement it tells us that this notion of almost everywhere equivalence can be encompassed in some diagrammatic form and secondly if we ever discuss these in these videos we'll find out that this is very closer related to a notion of almost everywhere equivalence in a non-commutative setting where we replace our finite sets and stochastic maps with certain kinds of c star algebras and completely positive unital maps and these sorts of objects are relevant in quantum information theory okay so before we prove this we'll have a little bit of a lemma just to make the calculation a little bit easier and that lemma is the composition of two maps of two stochastic maps that are of this form so if i have a map phi from u into v and the map psi from u into v and i pre-compose with this diagonal map then this composition is given by the formula so we take phi cross psi composed with this diagonal and how do we evaluate this well the domain has a u and the codomain has a v and a w so we can evaluate it v comma w and u and the claim is that this is given by taking just the product of these where two of the points happen to match up so this is phi v u psi w u for all v u and w so the proof of this is pretty pretty easy once we have all of our definitions in place and the left hand side of this expression by definition of the composition and by using the definition of the product is equal to a sum and what's our intermediary step it's the sum over u cross u and u cross u therefore we have to sum over two elements we've already we're already using a letter u so we're going to have to introduce u prime and u double prime for instance so it's going to be u prime u double prime both elements in u and the product here is going to be phi v u prime psi w u double prime because that's the second coordinate and this is as we recall the direct the chronicle delta twice using the coordinate u and u double prime and u prime so it's u prime u delta u double prime u so this gives us two delta functions and we have a summation over those and as a result these two letters coincide so this is exactly the right hand side quick and simple proof so this is the proof of the lemma and then the proof of the theorem we'll now talk about Bayes theorem and first we'll state the theorem given a probability distribution on x and a conditional probability from x to y call it f so it's the stochastic map there exists another map going in the opposite direction let's call it g such that the diagram now the diagram looks a little bit complicated but it's not too bad when we write out the equation we'll see exactly what it means so here we'll have p and here notice we can compose p with f to get another probability distribution on y and we'll call that q so we have our probability distribution on x on one on y we duplicate x we duplicate y this almost reminds me of the definition of a equivalence x cross y and here we will apply the only maps we can and to go from x to y we apply f and to go from y to x we apply g so the statement is that this diagram commutes and furthermore for any other stochastic map that also goes in the opposite direction let's call it g prime satisfying this then these two maps are q are almost everywhere equivalent and in the sense of our probability q so this is the formal statement of Bayes theorem and if you've seen if you've seen Bayes theorem in a different context this may seem totally strange but let's just see exactly what it says when we look at the composition of all of these arrows we've actually computed expressions just like this if you remember the this left hand side when we were doing the notion of almost everywhere equivalence in that diagrammatic perspective we computed something I think it may have been exactly this expression actually so commutativity says says that f y x times p x equals and if we did that same calculation but on the right hand side of this diagram it looks almost the same it's just that the g is on the other side nevertheless we still get g x y q y and this holds for all x y of course x is an x and y is in y now let's introduce some notation to see how to understand this let's define p of y given x so this is the probability of y given x to be exactly f y x that's exactly what f means f is this stochastic map it says it's not corresponding to a function it says if you give me x I will give you y with some probability the probability is exactly f y x so that's exactly what this conditional probability is and the probability of x is just little p x the conditional probability of x given y now this is going in the opposite direction it says if you give me y what's the probability of x occurring that's exactly g x y and finally the probability of y occurring is q y and so if we write down these expressions commutativity is of this diagram says nothing but the probability of x given y times the probability of x is equal to the probability of y of x given y times the probability of y which is perhaps a slightly more familiar form of base theorem at least when your events are singleton sets and with the appropriate definitions you can also extend this you can look at what this diagram means because these are corresponding to probability measures and you can also define a notion of conditional probability where you replace this point with a subset and you can use the probabilities on your corresponding spaces to make sense of what this means when x is replaced by some event a perhaps and y is replaced by some event b nevertheless the same equation still follows from commutativity of this diagram so let's look at our earlier example just to see what this is saying and how to interpret it in sort of a real-life situation so if you remember we had x and y two sets with each of which contains two elements and x corresponded to the set where there's a good sale and the other element was not a great sale not good sale and y is the set of elements the set containing the elements i go to the store the grocery the grocery store or i don't go and we also had probabilities on each of these spaces and we also knew the probabilities that if there's a good sale how likely am i to go right that was nine nine ninety percent so ninety percent if good i go with ninety percent probability and if not good then i still go but with sixty percent chance and likewise the other probabilities are given by the fact that it's one minus this one minus this and we also know the probability of there actually being a good sale so we know what p of good sale is and the probability is thirty percent and the probability of a not good sale is therefore seventy percent so we have all of this information now imagine you're in that store this particular week and you happen to see me there so in that case you happen to know i'm already at the store then you can ask what is the probability that there's a good sale this week given the information that you see and knowing this information as well so initially you also know the statistics that says the if i look over the entire year the probability that there's a good sale is thirty percent but you also know that i'm more likely to go to the store if there is a sale so if you see me then there might be a better chance that there's a sale this week and how do you figure that out well if we look at this expression and we compare these two sides then we can say that f corresponds to the if there's a good sale versus if there's not a good sale how likely am i to go or not as f y x and the probability that there's a good sale is p x and if we wanted to know so let's say g is on the other side so g of x given y so this says if you see me at the store so here this element y is i'm at the store and x is there's a good sale so if you see me at the store what's the probability of there being good sale and we divide that by q y which we've already determined last time so q y was the probability that i went to the store and we know that that equals the sum of the product of the probability of if there's a good sale i go and if there's not a good sale i go multiplied by the corresponding probabilities corresponding to here and we found that to be 69 percent so in this case this equals 90 percent 30 percent divided by 69 percent and when you write out what this equals it's roughly approximately equal to 39 percent so you've updated your hypothesis based on what you see and this is known as Bayesian inference or inversion inversion and in fact the map g constructed here a g from Bayes theorem is called a Bayesian inverse of f and it would be a little bit inappropriate to say that it only depends on f because it also depends on your prior probability distribution p so this is an interesting reformulation of Bayes theorem that seems to be totally in the language of category theory and it therefore makes it amenable to a wide range of techniques that could be used to analyze and understand it and perhaps even generalize this idea to other contexts", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.04, "text": " Okay, so welcome to the first lecture on the vectors course. This is the basics, vectors", "tokens": [50364, 1033, 11, 370, 2928, 281, 264, 700, 7991, 322, 264, 18875, 1164, 13, 639, 307, 264, 14688, 11, 18875, 50666], "temperature": 0.0, "avg_logprob": -0.18383567149822527, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.028861574828624725}, {"id": 1, "seek": 0, "start": 6.04, "end": 12.56, "text": " versus scalars, vector notation, addition and scaling, and properties. Alright, so begin", "tokens": [50666, 5717, 15664, 685, 11, 8062, 24657, 11, 4500, 293, 21589, 11, 293, 7221, 13, 2798, 11, 370, 1841, 50992], "temperature": 0.0, "avg_logprob": -0.18383567149822527, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.028861574828624725}, {"id": 2, "seek": 0, "start": 12.56, "end": 19.04, "text": " at the beginning. Let's list some scalar quantities. Think about mass, duration, length, temperature,", "tokens": [50992, 412, 264, 2863, 13, 961, 311, 1329, 512, 39684, 22927, 13, 6557, 466, 2758, 11, 16365, 11, 4641, 11, 4292, 11, 51316], "temperature": 0.0, "avg_logprob": -0.18383567149822527, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.028861574828624725}, {"id": 3, "seek": 0, "start": 19.04, "end": 24.2, "text": " charge. These physical quantities are all well described with a single number. Really", "tokens": [51316, 4602, 13, 1981, 4001, 22927, 366, 439, 731, 7619, 365, 257, 2167, 1230, 13, 4083, 51574], "temperature": 0.0, "avg_logprob": -0.18383567149822527, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.028861574828624725}, {"id": 4, "seek": 0, "start": 24.2, "end": 29.2, "text": " they just have a magnitude, although some of them may go negative, so it's a magnitude", "tokens": [51574, 436, 445, 362, 257, 15668, 11, 4878, 512, 295, 552, 815, 352, 3671, 11, 370, 309, 311, 257, 15668, 51824], "temperature": 0.0, "avg_logprob": -0.18383567149822527, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.028861574828624725}, {"id": 5, "seek": 2920, "start": 29.4, "end": 34.12, "text": " and a sign. But still, just a simple number is adequate to describe these things. How", "tokens": [50374, 293, 257, 1465, 13, 583, 920, 11, 445, 257, 2199, 1230, 307, 20927, 281, 6786, 613, 721, 13, 1012, 50610], "temperature": 0.0, "avg_logprob": -0.16417433665348932, "compression_ratio": 1.8403361344537814, "no_speech_prob": 0.0014548691688105464}, {"id": 6, "seek": 2920, "start": 34.12, "end": 38.68, "text": " about vector quantities? What's different about vector quantities? Well, think about", "tokens": [50610, 466, 8062, 22927, 30, 708, 311, 819, 466, 8062, 22927, 30, 1042, 11, 519, 466, 50838], "temperature": 0.0, "avg_logprob": -0.16417433665348932, "compression_ratio": 1.8403361344537814, "no_speech_prob": 0.0014548691688105464}, {"id": 7, "seek": 2920, "start": 38.68, "end": 44.4, "text": " these things, force, velocity, and therefore acceleration, or momentum. These things also", "tokens": [50838, 613, 721, 11, 3464, 11, 9269, 11, 293, 4412, 17162, 11, 420, 11244, 13, 1981, 721, 611, 51124], "temperature": 0.0, "avg_logprob": -0.16417433665348932, "compression_ratio": 1.8403361344537814, "no_speech_prob": 0.0014548691688105464}, {"id": 8, "seek": 2920, "start": 44.4, "end": 52.2, "text": " have a strength or a magnitude. However, so let's put that down, they have a magnitude.", "tokens": [51124, 362, 257, 3800, 420, 257, 15668, 13, 2908, 11, 370, 718, 311, 829, 300, 760, 11, 436, 362, 257, 15668, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16417433665348932, "compression_ratio": 1.8403361344537814, "no_speech_prob": 0.0014548691688105464}, {"id": 9, "seek": 2920, "start": 52.2, "end": 58.36, "text": " However, they also have a direction. More than just a sign, they have a full on direction", "tokens": [51514, 2908, 11, 436, 611, 362, 257, 3513, 13, 5048, 813, 445, 257, 1465, 11, 436, 362, 257, 1577, 322, 3513, 51822], "temperature": 0.0, "avg_logprob": -0.16417433665348932, "compression_ratio": 1.8403361344537814, "no_speech_prob": 0.0014548691688105464}, {"id": 10, "seek": 5836, "start": 58.36, "end": 62.86, "text": " in three-dimensional space. So it's not enough to know that a force is three Newtons. I want", "tokens": [50364, 294, 1045, 12, 18759, 1901, 13, 407, 309, 311, 406, 1547, 281, 458, 300, 257, 3464, 307, 1045, 1873, 83, 892, 13, 286, 528, 50589], "temperature": 0.0, "avg_logprob": -0.13604700463449854, "compression_ratio": 1.7007575757575757, "no_speech_prob": 0.00757557712495327}, {"id": 11, "seek": 5836, "start": 62.86, "end": 67.32, "text": " to know in which direction is that force applied. And that then is the difference between a", "tokens": [50589, 281, 458, 294, 597, 3513, 307, 300, 3464, 6456, 13, 400, 300, 550, 307, 264, 2649, 1296, 257, 50812], "temperature": 0.0, "avg_logprob": -0.13604700463449854, "compression_ratio": 1.7007575757575757, "no_speech_prob": 0.00757557712495327}, {"id": 12, "seek": 5836, "start": 67.32, "end": 72.4, "text": " vector and a scalar quantity. We're going to think about how we manipulate them. Alright,", "tokens": [50812, 8062, 293, 257, 39684, 11275, 13, 492, 434, 516, 281, 519, 466, 577, 321, 20459, 552, 13, 2798, 11, 51066], "temperature": 0.0, "avg_logprob": -0.13604700463449854, "compression_ratio": 1.7007575757575757, "no_speech_prob": 0.00757557712495327}, {"id": 13, "seek": 5836, "start": 72.4, "end": 79.12, "text": " so first off, the notation that we're going to use when we talk about our vectors. What", "tokens": [51066, 370, 700, 766, 11, 264, 24657, 300, 321, 434, 516, 281, 764, 562, 321, 751, 466, 527, 18875, 13, 708, 51402], "temperature": 0.0, "avg_logprob": -0.13604700463449854, "compression_ratio": 1.7007575757575757, "no_speech_prob": 0.00757557712495327}, {"id": 14, "seek": 5836, "start": 79.12, "end": 85.28, "text": " I'm going to do is I'm going to use a symbol such as the letter A. So let's write that", "tokens": [51402, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 764, 257, 5986, 1270, 382, 264, 5063, 316, 13, 407, 718, 311, 2464, 300, 51710], "temperature": 0.0, "avg_logprob": -0.13604700463449854, "compression_ratio": 1.7007575757575757, "no_speech_prob": 0.00757557712495327}, {"id": 15, "seek": 8528, "start": 85.32000000000001, "end": 91.16, "text": " out, but I'm going to underline it. So an underlined symbol indicates a vector rather", "tokens": [50366, 484, 11, 457, 286, 478, 516, 281, 833, 1889, 309, 13, 407, 364, 833, 13564, 5986, 16203, 257, 8062, 2831, 50658], "temperature": 0.0, "avg_logprob": -0.15733309028562437, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.004608878865838051}, {"id": 16, "seek": 8528, "start": 91.16, "end": 95.72, "text": " than a simple number. And when I need to specify that vector, I'm going to write it, so we're", "tokens": [50658, 813, 257, 2199, 1230, 13, 400, 562, 286, 643, 281, 16500, 300, 8062, 11, 286, 478, 516, 281, 2464, 309, 11, 370, 321, 434, 50886], "temperature": 0.0, "avg_logprob": -0.15733309028562437, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.004608878865838051}, {"id": 17, "seek": 8528, "start": 95.72, "end": 99.4, "text": " going to be three-dimensional. I'm going to write the three numbers in a column form", "tokens": [50886, 516, 281, 312, 1045, 12, 18759, 13, 286, 478, 516, 281, 2464, 264, 1045, 3547, 294, 257, 7738, 1254, 51070], "temperature": 0.0, "avg_logprob": -0.15733309028562437, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.004608878865838051}, {"id": 18, "seek": 8528, "start": 99.4, "end": 104.4, "text": " like this. Now, if you haven't seen a vector specified before, what does it mean? Well,", "tokens": [51070, 411, 341, 13, 823, 11, 498, 291, 2378, 380, 1612, 257, 8062, 22206, 949, 11, 437, 775, 309, 914, 30, 1042, 11, 51320], "temperature": 0.0, "avg_logprob": -0.15733309028562437, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.004608878865838051}, {"id": 19, "seek": 8528, "start": 104.4, "end": 113.96000000000001, "text": " think of the Cartesian axes, the x, the x, y, z axes. Think in this case about coming", "tokens": [51320, 519, 295, 264, 22478, 42434, 35387, 11, 264, 2031, 11, 264, 2031, 11, 288, 11, 710, 35387, 13, 6557, 294, 341, 1389, 466, 1348, 51798], "temperature": 0.0, "avg_logprob": -0.15733309028562437, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.004608878865838051}, {"id": 20, "seek": 11396, "start": 113.96, "end": 122.6, "text": " out from the origin two in the direction of x and one in the direction of y and three", "tokens": [50364, 484, 490, 264, 4957, 732, 294, 264, 3513, 295, 2031, 293, 472, 294, 264, 3513, 295, 288, 293, 1045, 50796], "temperature": 0.0, "avg_logprob": -0.13346929864569024, "compression_ratio": 2.0164835164835164, "no_speech_prob": 0.01798281818628311}, {"id": 21, "seek": 11396, "start": 122.6, "end": 127.39999999999999, "text": " in the direction of z. What we're going to do is we're going to think of our vector as", "tokens": [50796, 294, 264, 3513, 295, 710, 13, 708, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 519, 295, 527, 8062, 382, 51036], "temperature": 0.0, "avg_logprob": -0.13346929864569024, "compression_ratio": 2.0164835164835164, "no_speech_prob": 0.01798281818628311}, {"id": 22, "seek": 11396, "start": 127.39999999999999, "end": 133.79999999999998, "text": " an arrow, an arrow that comes from the origin to this point in space. And that arrow itself,", "tokens": [51036, 364, 11610, 11, 364, 11610, 300, 1487, 490, 264, 4957, 281, 341, 935, 294, 1901, 13, 400, 300, 11610, 2564, 11, 51356], "temperature": 0.0, "avg_logprob": -0.13346929864569024, "compression_ratio": 2.0164835164835164, "no_speech_prob": 0.01798281818628311}, {"id": 23, "seek": 11396, "start": 133.79999999999998, "end": 141.0, "text": " whether or not it comes from the origin, that direction and that length of arrow is our visualization", "tokens": [51356, 1968, 420, 406, 309, 1487, 490, 264, 4957, 11, 300, 3513, 293, 300, 4641, 295, 11610, 307, 527, 25801, 51716], "temperature": 0.0, "avg_logprob": -0.13346929864569024, "compression_ratio": 2.0164835164835164, "no_speech_prob": 0.01798281818628311}, {"id": 24, "seek": 14100, "start": 141.12, "end": 147.32, "text": " of the vector. So let me just change color to green and go ahead and draw the tip of", "tokens": [50370, 295, 264, 8062, 13, 407, 718, 385, 445, 1319, 2017, 281, 3092, 293, 352, 2286, 293, 2642, 264, 4125, 295, 50680], "temperature": 0.0, "avg_logprob": -0.1393249811751119, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0216112919151783}, {"id": 25, "seek": 14100, "start": 147.32, "end": 152.92, "text": " my arrow there. There we are. So the vector is coming towards us out of the screen and", "tokens": [50680, 452, 11610, 456, 13, 821, 321, 366, 13, 407, 264, 8062, 307, 1348, 3030, 505, 484, 295, 264, 2568, 293, 50960], "temperature": 0.0, "avg_logprob": -0.1393249811751119, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0216112919151783}, {"id": 26, "seek": 14100, "start": 152.92, "end": 158.2, "text": " it has those particular three components, two, one, three. Other people may use other", "tokens": [50960, 309, 575, 729, 1729, 1045, 6677, 11, 732, 11, 472, 11, 1045, 13, 5358, 561, 815, 764, 661, 51224], "temperature": 0.0, "avg_logprob": -0.1393249811751119, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0216112919151783}, {"id": 27, "seek": 14100, "start": 158.2, "end": 165.56, "text": " notations. For example, a line over the symbol A is commonly used. When people write out the", "tokens": [51224, 406, 763, 13, 1171, 1365, 11, 257, 1622, 670, 264, 5986, 316, 307, 12719, 1143, 13, 1133, 561, 2464, 484, 264, 51592], "temperature": 0.0, "avg_logprob": -0.1393249811751119, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.0216112919151783}, {"id": 28, "seek": 16556, "start": 165.6, "end": 170.76, "text": " components, they may choose to do it as a row like this or even using pointy brackets", "tokens": [50366, 6677, 11, 436, 815, 2826, 281, 360, 309, 382, 257, 5386, 411, 341, 420, 754, 1228, 935, 88, 26179, 50624], "temperature": 0.0, "avg_logprob": -0.11488164795769586, "compression_ratio": 1.6541353383458646, "no_speech_prob": 0.010651428252458572}, {"id": 29, "seek": 16556, "start": 170.76, "end": 176.28, "text": " like this. Now, all these notations are basically getting at the same thing. You'll be able", "tokens": [50624, 411, 341, 13, 823, 11, 439, 613, 406, 763, 366, 1936, 1242, 412, 264, 912, 551, 13, 509, 603, 312, 1075, 50900], "temperature": 0.0, "avg_logprob": -0.11488164795769586, "compression_ratio": 1.6541353383458646, "no_speech_prob": 0.010651428252458572}, {"id": 30, "seek": 16556, "start": 176.28, "end": 180.8, "text": " to read textbooks or look online and see these things and understand what they mean. But", "tokens": [50900, 281, 1401, 33587, 420, 574, 2950, 293, 536, 613, 721, 293, 1223, 437, 436, 914, 13, 583, 51126], "temperature": 0.0, "avg_logprob": -0.11488164795769586, "compression_ratio": 1.6541353383458646, "no_speech_prob": 0.010651428252458572}, {"id": 31, "seek": 16556, "start": 180.8, "end": 186.6, "text": " within this course of videos, we're just going to use the notation that I've introduced", "tokens": [51126, 1951, 341, 1164, 295, 2145, 11, 321, 434, 445, 516, 281, 764, 264, 24657, 300, 286, 600, 7268, 51416], "temperature": 0.0, "avg_logprob": -0.11488164795769586, "compression_ratio": 1.6541353383458646, "no_speech_prob": 0.010651428252458572}, {"id": 32, "seek": 16556, "start": 186.6, "end": 193.0, "text": " above. So I'll erase those for now. Now, the simplest thing that you might want to do", "tokens": [51416, 3673, 13, 407, 286, 603, 23525, 729, 337, 586, 13, 823, 11, 264, 22811, 551, 300, 291, 1062, 528, 281, 360, 51736], "temperature": 0.0, "avg_logprob": -0.11488164795769586, "compression_ratio": 1.6541353383458646, "no_speech_prob": 0.010651428252458572}, {"id": 33, "seek": 19300, "start": 193.0, "end": 196.92, "text": " if you have a couple of vectors is to add them up. So let's think about that vector", "tokens": [50364, 498, 291, 362, 257, 1916, 295, 18875, 307, 281, 909, 552, 493, 13, 407, 718, 311, 519, 466, 300, 8062, 50560], "temperature": 0.0, "avg_logprob": -0.1525534808151121, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.010650750249624252}, {"id": 34, "seek": 19300, "start": 196.92, "end": 201.04, "text": " addition. What does it mean? So let's give ourselves a second vector B. We'll make it", "tokens": [50560, 4500, 13, 708, 775, 309, 914, 30, 407, 718, 311, 976, 4175, 257, 1150, 8062, 363, 13, 492, 603, 652, 309, 50766], "temperature": 0.0, "avg_logprob": -0.1525534808151121, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.010650750249624252}, {"id": 35, "seek": 19300, "start": 201.04, "end": 206.96, "text": " five minus two zero, let's say. I want to add these two vectors together. So we'll write", "tokens": [50766, 1732, 3175, 732, 4018, 11, 718, 311, 584, 13, 286, 528, 281, 909, 613, 732, 18875, 1214, 13, 407, 321, 603, 2464, 51062], "temperature": 0.0, "avg_logprob": -0.1525534808151121, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.010650750249624252}, {"id": 36, "seek": 19300, "start": 206.96, "end": 211.72, "text": " that out. I simply want to add A underline plus B underline. What does that mean? Let's", "tokens": [51062, 300, 484, 13, 286, 2935, 528, 281, 909, 316, 833, 1889, 1804, 363, 833, 1889, 13, 708, 775, 300, 914, 30, 961, 311, 51300], "temperature": 0.0, "avg_logprob": -0.1525534808151121, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.010650750249624252}, {"id": 37, "seek": 19300, "start": 211.72, "end": 219.44, "text": " just substitute in two, three. Add it on two, five minus two, zero. Now, what we do is we", "tokens": [51300, 445, 15802, 294, 732, 11, 1045, 13, 5349, 309, 322, 732, 11, 1732, 3175, 732, 11, 4018, 13, 823, 11, 437, 321, 360, 307, 321, 51686], "temperature": 0.0, "avg_logprob": -0.1525534808151121, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.010650750249624252}, {"id": 38, "seek": 21944, "start": 219.44, "end": 225.72, "text": " simply add the first component of vector A to the first component of vector B and so", "tokens": [50364, 2935, 909, 264, 700, 6542, 295, 8062, 316, 281, 264, 700, 6542, 295, 8062, 363, 293, 370, 50678], "temperature": 0.0, "avg_logprob": -0.15109576973863828, "compression_ratio": 1.6813725490196079, "no_speech_prob": 0.024421164765954018}, {"id": 39, "seek": 21944, "start": 225.72, "end": 231.8, "text": " on down the list. Very, very simple. So we're adding two plus five. We're going to add one", "tokens": [50678, 322, 760, 264, 1329, 13, 4372, 11, 588, 2199, 13, 407, 321, 434, 5127, 732, 1804, 1732, 13, 492, 434, 516, 281, 909, 472, 50982], "temperature": 0.0, "avg_logprob": -0.15109576973863828, "compression_ratio": 1.6813725490196079, "no_speech_prob": 0.024421164765954018}, {"id": 40, "seek": 21944, "start": 231.8, "end": 237.72, "text": " plus minus two and three plus zero. And we just tidy that up. So that's going to be", "tokens": [50982, 1804, 3175, 732, 293, 1045, 1804, 4018, 13, 400, 321, 445, 34646, 300, 493, 13, 407, 300, 311, 516, 281, 312, 51278], "temperature": 0.0, "avg_logprob": -0.15109576973863828, "compression_ratio": 1.6813725490196079, "no_speech_prob": 0.024421164765954018}, {"id": 41, "seek": 21944, "start": 237.72, "end": 248.2, "text": " seven minus one and three. Now, how about scaling a vector? Okay. So what we can do", "tokens": [51278, 3407, 3175, 472, 293, 1045, 13, 823, 11, 577, 466, 21589, 257, 8062, 30, 1033, 13, 407, 437, 321, 393, 360, 51802], "temperature": 0.0, "avg_logprob": -0.15109576973863828, "compression_ratio": 1.6813725490196079, "no_speech_prob": 0.024421164765954018}, {"id": 42, "seek": 24820, "start": 248.23999999999998, "end": 256.24, "text": " is we can multiply a vector by a simple number and correspondingly, we'll just end up multiplying", "tokens": [50366, 307, 321, 393, 12972, 257, 8062, 538, 257, 2199, 1230, 293, 11760, 356, 11, 321, 603, 445, 917, 493, 30955, 50766], "temperature": 0.0, "avg_logprob": -0.1698873540857336, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.03621549531817436}, {"id": 43, "seek": 24820, "start": 256.24, "end": 262.4, "text": " each of its components. So let's take an example, three, nine, minus twelve. What we notice", "tokens": [50766, 1184, 295, 1080, 6677, 13, 407, 718, 311, 747, 364, 1365, 11, 1045, 11, 4949, 11, 3175, 14390, 13, 708, 321, 3449, 51074], "temperature": 0.0, "avg_logprob": -0.1698873540857336, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.03621549531817436}, {"id": 44, "seek": 24820, "start": 262.4, "end": 267.08, "text": " is each of the three components is a multiple of three. We can just take that common factor", "tokens": [51074, 307, 1184, 295, 264, 1045, 6677, 307, 257, 3866, 295, 1045, 13, 492, 393, 445, 747, 300, 2689, 5952, 51308], "temperature": 0.0, "avg_logprob": -0.1698873540857336, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.03621549531817436}, {"id": 45, "seek": 24820, "start": 267.08, "end": 273.48, "text": " out in front and write this instead as three times one, three, minus four. Same thing.", "tokens": [51308, 484, 294, 1868, 293, 2464, 341, 2602, 382, 1045, 1413, 472, 11, 1045, 11, 3175, 1451, 13, 10635, 551, 13, 51628], "temperature": 0.0, "avg_logprob": -0.1698873540857336, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.03621549531817436}, {"id": 46, "seek": 27348, "start": 273.76, "end": 278.12, "text": " All right? Or equivalently, someone might give us a vector that's already written in", "tokens": [50378, 1057, 558, 30, 1610, 9052, 2276, 11, 1580, 1062, 976, 505, 257, 8062, 300, 311, 1217, 3720, 294, 50596], "temperature": 0.0, "avg_logprob": -0.21480584913684475, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.004905161447823048}, {"id": 47, "seek": 27348, "start": 278.12, "end": 284.44, "text": " this form. It could be, let's say three over two onto two, four, minus four. Let's make", "tokens": [50596, 341, 1254, 13, 467, 727, 312, 11, 718, 311, 584, 1045, 670, 732, 3911, 732, 11, 1451, 11, 3175, 1451, 13, 961, 311, 652, 50912], "temperature": 0.0, "avg_logprob": -0.21480584913684475, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.004905161447823048}, {"id": 48, "seek": 27348, "start": 284.44, "end": 291.0, "text": " it one. All right? And we can just multiply that in, in a component by component basis.", "tokens": [50912, 309, 472, 13, 1057, 558, 30, 400, 321, 393, 445, 12972, 300, 294, 11, 294, 257, 6542, 538, 6542, 5143, 13, 51240], "temperature": 0.0, "avg_logprob": -0.21480584913684475, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.004905161447823048}, {"id": 49, "seek": 27348, "start": 291.0, "end": 295.0, "text": " So we just write ourselves a new column. Of course, three times two is three. Three times", "tokens": [51240, 407, 321, 445, 2464, 4175, 257, 777, 7738, 13, 2720, 1164, 11, 1045, 1413, 732, 307, 1045, 13, 6244, 1413, 51440], "temperature": 0.0, "avg_logprob": -0.21480584913684475, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.004905161447823048}, {"id": 50, "seek": 29500, "start": 295.04, "end": 304.04, "text": " minus four is minus six. And three over two times one is three over two. Okay? So there", "tokens": [50366, 3175, 1451, 307, 3175, 2309, 13, 400, 1045, 670, 732, 1413, 472, 307, 1045, 670, 732, 13, 1033, 30, 407, 456, 50816], "temperature": 0.0, "avg_logprob": -0.14519976576169333, "compression_ratio": 1.584070796460177, "no_speech_prob": 0.006097173783928156}, {"id": 51, "seek": 29500, "start": 304.16, "end": 310.56, "text": " we are. We can scale our vectors by a number in this simple way. So with these definitions", "tokens": [50822, 321, 366, 13, 492, 393, 4373, 527, 18875, 538, 257, 1230, 294, 341, 2199, 636, 13, 407, 365, 613, 21988, 51142], "temperature": 0.0, "avg_logprob": -0.14519976576169333, "compression_ratio": 1.584070796460177, "no_speech_prob": 0.006097173783928156}, {"id": 52, "seek": 29500, "start": 310.56, "end": 315.96, "text": " of addition and scaling, can we say anything about the properties? Okay. So if I have two", "tokens": [51142, 295, 4500, 293, 21589, 11, 393, 321, 584, 1340, 466, 264, 7221, 30, 1033, 13, 407, 498, 286, 362, 732, 51412], "temperature": 0.0, "avg_logprob": -0.14519976576169333, "compression_ratio": 1.584070796460177, "no_speech_prob": 0.006097173783928156}, {"id": 53, "seek": 29500, "start": 315.96, "end": 320.6, "text": " regular numbers a and b, then of course, a plus b is the same as b plus a. I'm not saying", "tokens": [51412, 3890, 3547, 257, 293, 272, 11, 550, 295, 1164, 11, 257, 1804, 272, 307, 264, 912, 382, 272, 1804, 257, 13, 286, 478, 406, 1566, 51644], "temperature": 0.0, "avg_logprob": -0.14519976576169333, "compression_ratio": 1.584070796460177, "no_speech_prob": 0.006097173783928156}, {"id": 54, "seek": 32060, "start": 320.6, "end": 325.20000000000005, "text": " anything fancy here. It's as simple as, I don't know, seven plus minus three is equal", "tokens": [50364, 1340, 10247, 510, 13, 467, 311, 382, 2199, 382, 11, 286, 500, 380, 458, 11, 3407, 1804, 3175, 1045, 307, 2681, 50594], "temperature": 0.0, "avg_logprob": -0.11897485396441292, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.01743735931813717}, {"id": 55, "seek": 32060, "start": 325.20000000000005, "end": 330.68, "text": " to minus three plus seven. Obviously it is. We know that. Now, if we think about the same", "tokens": [50594, 281, 3175, 1045, 1804, 3407, 13, 7580, 309, 307, 13, 492, 458, 300, 13, 823, 11, 498, 321, 519, 466, 264, 912, 50868], "temperature": 0.0, "avg_logprob": -0.11897485396441292, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.01743735931813717}, {"id": 56, "seek": 32060, "start": 330.68, "end": 337.08000000000004, "text": " statement for vectors, a plus b, vector b, is it the same as vector b plus a? Well, it", "tokens": [50868, 5629, 337, 18875, 11, 257, 1804, 272, 11, 8062, 272, 11, 307, 309, 264, 912, 382, 8062, 272, 1804, 257, 30, 1042, 11, 309, 51188], "temperature": 0.0, "avg_logprob": -0.11897485396441292, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.01743735931813717}, {"id": 57, "seek": 32060, "start": 337.08000000000004, "end": 342.52000000000004, "text": " must be. Let's just write out an example, seven zero minus one, three, one, two. Is it equal", "tokens": [51188, 1633, 312, 13, 961, 311, 445, 2464, 484, 364, 1365, 11, 3407, 4018, 3175, 472, 11, 1045, 11, 472, 11, 732, 13, 1119, 309, 2681, 51460], "temperature": 0.0, "avg_logprob": -0.11897485396441292, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.01743735931813717}, {"id": 58, "seek": 34252, "start": 342.52, "end": 351.96, "text": " to three, one, two vector plus the vector seven zero minus one? Of course it is because", "tokens": [50364, 281, 1045, 11, 472, 11, 732, 8062, 1804, 264, 8062, 3407, 4018, 3175, 472, 30, 2720, 1164, 309, 307, 570, 50836], "temperature": 0.0, "avg_logprob": -0.17656914393107095, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.02675453945994377}, {"id": 59, "seek": 34252, "start": 351.96, "end": 357.76, "text": " of the way we've defined vector addition as just being the addition of each element", "tokens": [50836, 295, 264, 636, 321, 600, 7642, 8062, 4500, 382, 445, 885, 264, 4500, 295, 1184, 4478, 51126], "temperature": 0.0, "avg_logprob": -0.17656914393107095, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.02675453945994377}, {"id": 60, "seek": 34252, "start": 357.76, "end": 364.47999999999996, "text": " to the corresponding element. And this property is called being commutative. Okay. So vector", "tokens": [51126, 281, 264, 11760, 4478, 13, 400, 341, 4707, 307, 1219, 885, 800, 325, 1166, 13, 1033, 13, 407, 8062, 51462], "temperature": 0.0, "avg_logprob": -0.17656914393107095, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.02675453945994377}, {"id": 61, "seek": 34252, "start": 364.47999999999996, "end": 370.4, "text": " addition is commutative. How about this second example? If we have three basic quantities,", "tokens": [51462, 4500, 307, 800, 325, 1166, 13, 1012, 466, 341, 1150, 1365, 30, 759, 321, 362, 1045, 3875, 22927, 11, 51758], "temperature": 0.0, "avg_logprob": -0.17656914393107095, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.02675453945994377}, {"id": 62, "seek": 37040, "start": 370.4, "end": 376.52, "text": " ordinary numbers, then if we have a plus b plus c, it's the same as a plus b plus c.", "tokens": [50364, 10547, 3547, 11, 550, 498, 321, 362, 257, 1804, 272, 1804, 269, 11, 309, 311, 264, 912, 382, 257, 1804, 272, 1804, 269, 13, 50670], "temperature": 0.0, "avg_logprob": -0.14134876853541323, "compression_ratio": 1.7427184466019416, "no_speech_prob": 0.19186636805534363}, {"id": 63, "seek": 37040, "start": 376.52, "end": 380.67999999999995, "text": " It doesn't matter the order that we do them in. Is that going to be true for vectors? Well,", "tokens": [50670, 467, 1177, 380, 1871, 264, 1668, 300, 321, 360, 552, 294, 13, 1119, 300, 516, 281, 312, 2074, 337, 18875, 30, 1042, 11, 50878], "temperature": 0.0, "avg_logprob": -0.14134876853541323, "compression_ratio": 1.7427184466019416, "no_speech_prob": 0.19186636805534363}, {"id": 64, "seek": 37040, "start": 380.67999999999995, "end": 385.15999999999997, "text": " of course, it is going to have to be true to vectors because the way we define vector", "tokens": [50878, 295, 1164, 11, 309, 307, 516, 281, 362, 281, 312, 2074, 281, 18875, 570, 264, 636, 321, 6964, 8062, 51102], "temperature": 0.0, "avg_logprob": -0.14134876853541323, "compression_ratio": 1.7427184466019416, "no_speech_prob": 0.19186636805534363}, {"id": 65, "seek": 37040, "start": 385.15999999999997, "end": 390.88, "text": " addition is to add each component to the corresponding component. It's just addition. So this is", "tokens": [51102, 4500, 307, 281, 909, 1184, 6542, 281, 264, 11760, 6542, 13, 467, 311, 445, 4500, 13, 407, 341, 307, 51388], "temperature": 0.0, "avg_logprob": -0.14134876853541323, "compression_ratio": 1.7427184466019416, "no_speech_prob": 0.19186636805534363}, {"id": 66, "seek": 39088, "start": 391.28, "end": 401.15999999999997, "text": " for vectors. Let's write down what we mean. We mean that vector a plus b plus c as a previously", "tokens": [50384, 337, 18875, 13, 961, 311, 2464, 760, 437, 321, 914, 13, 492, 914, 300, 8062, 257, 1804, 272, 1804, 269, 382, 257, 8046, 50878], "temperature": 0.0, "avg_logprob": -0.1443141731056007, "compression_ratio": 1.5895953757225434, "no_speech_prob": 0.22811411321163177}, {"id": 67, "seek": 39088, "start": 401.15999999999997, "end": 409.84, "text": " worked out thing is equal to vector a plus vector b and then add on c. It doesn't matter", "tokens": [50878, 2732, 484, 551, 307, 2681, 281, 8062, 257, 1804, 8062, 272, 293, 550, 909, 322, 269, 13, 467, 1177, 380, 1871, 51312], "temperature": 0.0, "avg_logprob": -0.1443141731056007, "compression_ratio": 1.5895953757225434, "no_speech_prob": 0.22811411321163177}, {"id": 68, "seek": 39088, "start": 409.84, "end": 414.68, "text": " the order we do these things. All right. And there's a name for that property. It's called", "tokens": [51312, 264, 1668, 321, 360, 613, 721, 13, 1057, 558, 13, 400, 456, 311, 257, 1315, 337, 300, 4707, 13, 467, 311, 1219, 51554], "temperature": 0.0, "avg_logprob": -0.1443141731056007, "compression_ratio": 1.5895953757225434, "no_speech_prob": 0.22811411321163177}, {"id": 69, "seek": 41468, "start": 414.68, "end": 427.24, "text": " being associative. All right. So vector addition has that property also. Now let's think about", "tokens": [50364, 885, 4180, 1166, 13, 1057, 558, 13, 407, 8062, 4500, 575, 300, 4707, 611, 13, 823, 718, 311, 519, 466, 50992], "temperature": 0.0, "avg_logprob": -0.16759361015571342, "compression_ratio": 1.5627705627705628, "no_speech_prob": 0.014061772264540195}, {"id": 70, "seek": 41468, "start": 427.24, "end": 431.24, "text": " our scaling property. If we have ordinary numbers again, then we could take some scale", "tokens": [50992, 527, 21589, 4707, 13, 759, 321, 362, 10547, 3547, 797, 11, 550, 321, 727, 747, 512, 4373, 51192], "temperature": 0.0, "avg_logprob": -0.16759361015571342, "compression_ratio": 1.5627705627705628, "no_speech_prob": 0.014061772264540195}, {"id": 71, "seek": 41468, "start": 431.24, "end": 437.24, "text": " factor k and multiply it into a plus b and it would just give us k times a plus k times", "tokens": [51192, 5952, 350, 293, 12972, 309, 666, 257, 1804, 272, 293, 309, 576, 445, 976, 505, 350, 1413, 257, 1804, 350, 1413, 51492], "temperature": 0.0, "avg_logprob": -0.16759361015571342, "compression_ratio": 1.5627705627705628, "no_speech_prob": 0.014061772264540195}, {"id": 72, "seek": 41468, "start": 437.24, "end": 441.4, "text": " b. Again, I'm not saying anything that isn't utterly obvious here. Say for example, I don't", "tokens": [51492, 272, 13, 3764, 11, 286, 478, 406, 1566, 1340, 300, 1943, 380, 30251, 6322, 510, 13, 6463, 337, 1365, 11, 286, 500, 380, 51700], "temperature": 0.0, "avg_logprob": -0.16759361015571342, "compression_ratio": 1.5627705627705628, "no_speech_prob": 0.014061772264540195}, {"id": 73, "seek": 44140, "start": 441.41999999999996, "end": 450.91999999999996, "text": " know, 2 into 1 plus minus 3 is equal to 2 times 1 plus 2 times minus 3. Of course it", "tokens": [50365, 458, 11, 568, 666, 502, 1804, 3175, 805, 307, 2681, 281, 568, 1413, 502, 1804, 568, 1413, 3175, 805, 13, 2720, 1164, 309, 50840], "temperature": 0.0, "avg_logprob": -0.21214049571269267, "compression_ratio": 1.5914634146341464, "no_speech_prob": 0.03844663128256798}, {"id": 74, "seek": 44140, "start": 450.91999999999996, "end": 456.84, "text": " is. So how about for vectors? Is it true that some scale factor k times the sum vector a", "tokens": [50840, 307, 13, 407, 577, 466, 337, 18875, 30, 1119, 309, 2074, 300, 512, 4373, 5952, 350, 1413, 264, 2408, 8062, 257, 51136], "temperature": 0.0, "avg_logprob": -0.21214049571269267, "compression_ratio": 1.5914634146341464, "no_speech_prob": 0.03844663128256798}, {"id": 75, "seek": 44140, "start": 456.84, "end": 463.23999999999995, "text": " plus vector b, a plus b, and let's stress that this scale factor is just a pure number?", "tokens": [51136, 1804, 8062, 272, 11, 257, 1804, 272, 11, 293, 718, 311, 4244, 300, 341, 4373, 5952, 307, 445, 257, 6075, 1230, 30, 51456], "temperature": 0.0, "avg_logprob": -0.21214049571269267, "compression_ratio": 1.5914634146341464, "no_speech_prob": 0.03844663128256798}, {"id": 76, "seek": 46324, "start": 463.56, "end": 471.56, "text": " Yes indeed. It's going to be just k times a plus k times b. So just to stress what we're", "tokens": [50380, 1079, 6451, 13, 467, 311, 516, 281, 312, 445, 350, 1413, 257, 1804, 350, 1413, 272, 13, 407, 445, 281, 4244, 437, 321, 434, 50780], "temperature": 0.0, "avg_logprob": -0.1497995507626133, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.530805230140686}, {"id": 77, "seek": 46324, "start": 471.56, "end": 476.92, "text": " doing here, let's copy down this sum of two vectors we were playing with up here. This", "tokens": [50780, 884, 510, 11, 718, 311, 5055, 760, 341, 2408, 295, 732, 18875, 321, 645, 2433, 365, 493, 510, 13, 639, 51048], "temperature": 0.0, "avg_logprob": -0.1497995507626133, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.530805230140686}, {"id": 78, "seek": 46324, "start": 476.92, "end": 482.76, "text": " 7, 0 minus 1 thing plus 3, 1, 2. Put it inside curly brackets maybe for a variety. It doesn't", "tokens": [51048, 1614, 11, 1958, 3175, 502, 551, 1804, 805, 11, 502, 11, 568, 13, 4935, 309, 1854, 32066, 26179, 1310, 337, 257, 5673, 13, 467, 1177, 380, 51340], "temperature": 0.0, "avg_logprob": -0.1497995507626133, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.530805230140686}, {"id": 79, "seek": 46324, "start": 482.76, "end": 487.96000000000004, "text": " have to be curly brackets. Multiply it by some factor. Let's have 3 over 2. Had that before.", "tokens": [51340, 362, 281, 312, 32066, 26179, 13, 31150, 356, 309, 538, 512, 5952, 13, 961, 311, 362, 805, 670, 568, 13, 12298, 300, 949, 13, 51600], "temperature": 0.0, "avg_logprob": -0.1497995507626133, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.530805230140686}, {"id": 80, "seek": 46324, "start": 487.96000000000004, "end": 491.96000000000004, "text": " Unimaginative. There we are. What's that going to be? It's just going to be 3 over 2 times", "tokens": [51600, 1156, 44976, 1166, 13, 821, 321, 366, 13, 708, 311, 300, 516, 281, 312, 30, 467, 311, 445, 516, 281, 312, 805, 670, 568, 1413, 51800], "temperature": 0.0, "avg_logprob": -0.1497995507626133, "compression_ratio": 1.635379061371841, "no_speech_prob": 0.530805230140686}, {"id": 81, "seek": 49196, "start": 491.96, "end": 500.59999999999997, "text": " the first vector 7, 0, 1 and then plus 3 over 2 times the second vector 3, 1, 2. Okay. So", "tokens": [50364, 264, 700, 8062, 1614, 11, 1958, 11, 502, 293, 550, 1804, 805, 670, 568, 1413, 264, 1150, 8062, 805, 11, 502, 11, 568, 13, 1033, 13, 407, 50796], "temperature": 0.0, "avg_logprob": -0.11099058621889585, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.002472488908097148}, {"id": 82, "seek": 49196, "start": 501.56, "end": 507.15999999999997, "text": " everything as you kind of would expect it works out. It must. And this latter property is called", "tokens": [50844, 1203, 382, 291, 733, 295, 576, 2066, 309, 1985, 484, 13, 467, 1633, 13, 400, 341, 18481, 4707, 307, 1219, 51124], "temperature": 0.0, "avg_logprob": -0.11099058621889585, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.002472488908097148}, {"id": 83, "seek": 49196, "start": 507.15999999999997, "end": 517.4, "text": " being distributive, so scaling is distributive over addition. And that's the end of our first video.", "tokens": [51124, 885, 4400, 17254, 11, 370, 21589, 307, 4400, 17254, 670, 4500, 13, 400, 300, 311, 264, 917, 295, 527, 700, 960, 13, 51636], "temperature": 0.0, "avg_logprob": -0.11099058621889585, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.002472488908097148}, {"id": 84, "seek": 51740, "start": 518.04, "end": 525.72, "text": " Welcome to the second of these videos. We're going to look here at the vector dot product, also", "tokens": [50396, 4027, 281, 264, 1150, 295, 613, 2145, 13, 492, 434, 516, 281, 574, 510, 412, 264, 8062, 5893, 1674, 11, 611, 50780], "temperature": 0.0, "avg_logprob": -0.1589410252041287, "compression_ratio": 1.8731707317073172, "no_speech_prob": 0.0012059867149218917}, {"id": 85, "seek": 51740, "start": 525.72, "end": 529.72, "text": " called the scalar product. We'll look at also the magnitude of a vector and the meaning of unit", "tokens": [50780, 1219, 264, 39684, 1674, 13, 492, 603, 574, 412, 611, 264, 15668, 295, 257, 8062, 293, 264, 3620, 295, 4985, 50980], "temperature": 0.0, "avg_logprob": -0.1589410252041287, "compression_ratio": 1.8731707317073172, "no_speech_prob": 0.0012059867149218917}, {"id": 86, "seek": 51740, "start": 529.72, "end": 535.56, "text": " vectors, the geometric meaning of the dot product, and finding the angle between vectors using the", "tokens": [50980, 18875, 11, 264, 33246, 3620, 295, 264, 5893, 1674, 11, 293, 5006, 264, 5802, 1296, 18875, 1228, 264, 51272], "temperature": 0.0, "avg_logprob": -0.1589410252041287, "compression_ratio": 1.8731707317073172, "no_speech_prob": 0.0012059867149218917}, {"id": 87, "seek": 51740, "start": 535.56, "end": 543.96, "text": " dot product. Okay. So the dot product is a way of combining two vectors in order to produce a", "tokens": [51272, 5893, 1674, 13, 1033, 13, 407, 264, 5893, 1674, 307, 257, 636, 295, 21928, 732, 18875, 294, 1668, 281, 5258, 257, 51692], "temperature": 0.0, "avg_logprob": -0.1589410252041287, "compression_ratio": 1.8731707317073172, "no_speech_prob": 0.0012059867149218917}, {"id": 88, "seek": 54396, "start": 544.2800000000001, "end": 549.08, "text": " scalar, hence the alternate name scalar product. Let's give ourselves a couple of vectors. Let's", "tokens": [50380, 39684, 11, 16678, 264, 18873, 1315, 39684, 1674, 13, 961, 311, 976, 4175, 257, 1916, 295, 18875, 13, 961, 311, 50620], "temperature": 0.0, "avg_logprob": -0.1698592723101035, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.008180063217878342}, {"id": 89, "seek": 54396, "start": 549.08, "end": 558.84, "text": " have a, well, vector a can be 4 minus 4. Let's have 2, 1. And we'll have a vector b, which can be", "tokens": [50620, 362, 257, 11, 731, 11, 8062, 257, 393, 312, 1017, 3175, 1017, 13, 961, 311, 362, 568, 11, 502, 13, 400, 321, 603, 362, 257, 8062, 272, 11, 597, 393, 312, 51108], "temperature": 0.0, "avg_logprob": -0.1698592723101035, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.008180063217878342}, {"id": 90, "seek": 54396, "start": 560.76, "end": 570.2, "text": " 3, 1, 3. And we're going to do the dot product of these two guys. So we write that as vector a,", "tokens": [51204, 805, 11, 502, 11, 805, 13, 400, 321, 434, 516, 281, 360, 264, 5893, 1674, 295, 613, 732, 1074, 13, 407, 321, 2464, 300, 382, 8062, 257, 11, 51676], "temperature": 0.0, "avg_logprob": -0.1698592723101035, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.008180063217878342}, {"id": 91, "seek": 57020, "start": 570.2, "end": 576.44, "text": " a nice, nice clear central dot vector b. And then we write that out as the two column vectors.", "tokens": [50364, 257, 1481, 11, 1481, 1850, 5777, 5893, 8062, 272, 13, 400, 550, 321, 2464, 300, 484, 382, 264, 732, 7738, 18875, 13, 50676], "temperature": 0.0, "avg_logprob": -0.11524408990210229, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.005466712173074484}, {"id": 92, "seek": 57020, "start": 577.24, "end": 583.08, "text": " And we need to understand how we compute the dot product. And the answer is we're simply going to", "tokens": [50716, 400, 321, 643, 281, 1223, 577, 321, 14722, 264, 5893, 1674, 13, 400, 264, 1867, 307, 321, 434, 2935, 516, 281, 51008], "temperature": 0.0, "avg_logprob": -0.11524408990210229, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.005466712173074484}, {"id": 93, "seek": 57020, "start": 583.08, "end": 589.1600000000001, "text": " multiply each component by its opposite number and then add them up. So we're going to multiply", "tokens": [51008, 12972, 1184, 6542, 538, 1080, 6182, 1230, 293, 550, 909, 552, 493, 13, 407, 321, 434, 516, 281, 12972, 51312], "temperature": 0.0, "avg_logprob": -0.11524408990210229, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.005466712173074484}, {"id": 94, "seek": 57020, "start": 589.1600000000001, "end": 595.96, "text": " the first component minus 4 by 3. And then add that to the second component to multiply by", "tokens": [51312, 264, 700, 6542, 3175, 1017, 538, 805, 13, 400, 550, 909, 300, 281, 264, 1150, 6542, 281, 12972, 538, 51652], "temperature": 0.0, "avg_logprob": -0.11524408990210229, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.005466712173074484}, {"id": 95, "seek": 59596, "start": 595.96, "end": 602.2800000000001, "text": " its opposite number 1. And finally, the third components, 1 and 3. So that's minus 4 times", "tokens": [50364, 1080, 6182, 1230, 502, 13, 400, 2721, 11, 264, 2636, 6677, 11, 502, 293, 805, 13, 407, 300, 311, 3175, 1017, 1413, 50680], "temperature": 0.0, "avg_logprob": -0.1472040625179515, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.006096608936786652}, {"id": 96, "seek": 59596, "start": 602.2800000000001, "end": 616.84, "text": " by 3. Add it on to 2 times by 1. Add it on to 1 times by 3. So minus 12 plus 2 plus 3. That's", "tokens": [50680, 538, 805, 13, 5349, 309, 322, 281, 568, 1413, 538, 502, 13, 5349, 309, 322, 281, 502, 1413, 538, 805, 13, 407, 3175, 2272, 1804, 568, 1804, 805, 13, 663, 311, 51408], "temperature": 0.0, "avg_logprob": -0.1472040625179515, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.006096608936786652}, {"id": 97, "seek": 59596, "start": 616.84, "end": 624.6800000000001, "text": " going to be minus, minus 7. All right. There's the dot product worked out. It's pretty straightforward.", "tokens": [51408, 516, 281, 312, 3175, 11, 3175, 1614, 13, 1057, 558, 13, 821, 311, 264, 5893, 1674, 2732, 484, 13, 467, 311, 1238, 15325, 13, 51800], "temperature": 0.0, "avg_logprob": -0.1472040625179515, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.006096608936786652}, {"id": 98, "seek": 62468, "start": 624.68, "end": 629.0799999999999, "text": " And of course, as you can see, it can be a minus number. It can be 0. It can be a positive number.", "tokens": [50364, 400, 295, 1164, 11, 382, 291, 393, 536, 11, 309, 393, 312, 257, 3175, 1230, 13, 467, 393, 312, 1958, 13, 467, 393, 312, 257, 3353, 1230, 13, 50584], "temperature": 0.0, "avg_logprob": -0.11178655953242861, "compression_ratio": 1.8339622641509434, "no_speech_prob": 0.0010985038243234158}, {"id": 99, "seek": 62468, "start": 629.0799999999999, "end": 635.64, "text": " But it's a simple, pure number. Okay. So now, let's see what happens if we do the dot product", "tokens": [50584, 583, 309, 311, 257, 2199, 11, 6075, 1230, 13, 1033, 13, 407, 586, 11, 718, 311, 536, 437, 2314, 498, 321, 360, 264, 5893, 1674, 50912], "temperature": 0.0, "avg_logprob": -0.11178655953242861, "compression_ratio": 1.8339622641509434, "no_speech_prob": 0.0010985038243234158}, {"id": 100, "seek": 62468, "start": 635.64, "end": 641.4, "text": " of a vector with itself. Let's do a dotted with itself. So that's going to be minus 4 to 1 dotted", "tokens": [50912, 295, 257, 8062, 365, 2564, 13, 961, 311, 360, 257, 37459, 365, 2564, 13, 407, 300, 311, 516, 281, 312, 3175, 1017, 281, 502, 37459, 51200], "temperature": 0.0, "avg_logprob": -0.11178655953242861, "compression_ratio": 1.8339622641509434, "no_speech_prob": 0.0010985038243234158}, {"id": 101, "seek": 62468, "start": 641.4, "end": 648.04, "text": " with minus 4 to 1. Now, of course, because we're multiplying each component by itself, that will", "tokens": [51200, 365, 3175, 1017, 281, 502, 13, 823, 11, 295, 1164, 11, 570, 321, 434, 30955, 1184, 6542, 538, 2564, 11, 300, 486, 51532], "temperature": 0.0, "avg_logprob": -0.11178655953242861, "compression_ratio": 1.8339622641509434, "no_speech_prob": 0.0010985038243234158}, {"id": 102, "seek": 62468, "start": 648.04, "end": 654.3599999999999, "text": " always be a positive number. 16, minus 4 by minus 4. And 2, 2 is a 4. And 1, 1 is 1. And so that's", "tokens": [51532, 1009, 312, 257, 3353, 1230, 13, 3165, 11, 3175, 1017, 538, 3175, 1017, 13, 400, 568, 11, 568, 307, 257, 1017, 13, 400, 502, 11, 502, 307, 502, 13, 400, 370, 300, 311, 51848], "temperature": 0.0, "avg_logprob": -0.11178655953242861, "compression_ratio": 1.8339622641509434, "no_speech_prob": 0.0010985038243234158}, {"id": 103, "seek": 65436, "start": 654.36, "end": 659.08, "text": " going to add up to 21. It must add up to a positive number. It's made of three positive", "tokens": [50364, 516, 281, 909, 493, 281, 5080, 13, 467, 1633, 909, 493, 281, 257, 3353, 1230, 13, 467, 311, 1027, 295, 1045, 3353, 50600], "temperature": 0.0, "avg_logprob": -0.0837444057901397, "compression_ratio": 1.7214285714285715, "no_speech_prob": 0.000939723162446171}, {"id": 104, "seek": 65436, "start": 659.08, "end": 665.8000000000001, "text": " numbers summed. Now, I want to introduce a second vector called a hat. It's related to a just by", "tokens": [50600, 3547, 2408, 1912, 13, 823, 11, 286, 528, 281, 5366, 257, 1150, 8062, 1219, 257, 2385, 13, 467, 311, 4077, 281, 257, 445, 538, 50936], "temperature": 0.0, "avg_logprob": -0.0837444057901397, "compression_ratio": 1.7214285714285715, "no_speech_prob": 0.000939723162446171}, {"id": 105, "seek": 65436, "start": 665.8000000000001, "end": 671.32, "text": " scaling it. And we're going to scale it by 1 over the square root of the earlier dot product with", "tokens": [50936, 21589, 309, 13, 400, 321, 434, 516, 281, 4373, 309, 538, 502, 670, 264, 3732, 5593, 295, 264, 3071, 5893, 1674, 365, 51212], "temperature": 0.0, "avg_logprob": -0.0837444057901397, "compression_ratio": 1.7214285714285715, "no_speech_prob": 0.000939723162446171}, {"id": 106, "seek": 65436, "start": 671.32, "end": 678.36, "text": " itself. So 1 over square root 21. And then just minus 4, 2, 1 as before. So that's just a scaled", "tokens": [51212, 2564, 13, 407, 502, 670, 3732, 5593, 5080, 13, 400, 550, 445, 3175, 1017, 11, 568, 11, 502, 382, 949, 13, 407, 300, 311, 445, 257, 36039, 51564], "temperature": 0.0, "avg_logprob": -0.0837444057901397, "compression_ratio": 1.7214285714285715, "no_speech_prob": 0.000939723162446171}, {"id": 107, "seek": 65436, "start": 678.36, "end": 683.88, "text": " version of a. What's interesting about it? Well, now let's see what happens if we take the dot product", "tokens": [51564, 3037, 295, 257, 13, 708, 311, 1880, 466, 309, 30, 1042, 11, 586, 718, 311, 536, 437, 2314, 498, 321, 747, 264, 5893, 1674, 51840], "temperature": 0.0, "avg_logprob": -0.0837444057901397, "compression_ratio": 1.7214285714285715, "no_speech_prob": 0.000939723162446171}, {"id": 108, "seek": 68388, "start": 683.88, "end": 692.12, "text": " of a hat with a hat with itself. So we're going to get 1 over square root of 21 times 1 over", "tokens": [50364, 295, 257, 2385, 365, 257, 2385, 365, 2564, 13, 407, 321, 434, 516, 281, 483, 502, 670, 3732, 5593, 295, 5080, 1413, 502, 670, 50776], "temperature": 0.0, "avg_logprob": -0.07930856232249409, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.0015486875781789422}, {"id": 109, "seek": 68388, "start": 692.12, "end": 699.72, "text": " square root of 21, which is 1 over 21. And then, of course, we're going to get a dotted with a,", "tokens": [50776, 3732, 5593, 295, 5080, 11, 597, 307, 502, 670, 5080, 13, 400, 550, 11, 295, 1164, 11, 321, 434, 516, 281, 483, 257, 37459, 365, 257, 11, 51156], "temperature": 0.0, "avg_logprob": -0.07930856232249409, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.0015486875781789422}, {"id": 110, "seek": 68388, "start": 699.72, "end": 705.48, "text": " the original dot product we did, which is just 21, as we know. So, of course, the dot product", "tokens": [51156, 264, 3380, 5893, 1674, 321, 630, 11, 597, 307, 445, 5080, 11, 382, 321, 458, 13, 407, 11, 295, 1164, 11, 264, 5893, 1674, 51444], "temperature": 0.0, "avg_logprob": -0.07930856232249409, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.0015486875781789422}, {"id": 111, "seek": 68388, "start": 705.48, "end": 712.2, "text": " of a hat with itself is just 1. That means that a hat has a special property. It's what's called", "tokens": [51444, 295, 257, 2385, 365, 2564, 307, 445, 502, 13, 663, 1355, 300, 257, 2385, 575, 257, 2121, 4707, 13, 467, 311, 437, 311, 1219, 51780], "temperature": 0.0, "avg_logprob": -0.07930856232249409, "compression_ratio": 1.8762376237623761, "no_speech_prob": 0.0015486875781789422}, {"id": 112, "seek": 71220, "start": 712.2, "end": 718.5200000000001, "text": " a unit vector. Unity being, of course, a fancy word for the number 1. So when we scale a vector,", "tokens": [50364, 257, 4985, 8062, 13, 27913, 885, 11, 295, 1164, 11, 257, 10247, 1349, 337, 264, 1230, 502, 13, 407, 562, 321, 4373, 257, 8062, 11, 50680], "temperature": 0.0, "avg_logprob": -0.0815661975315639, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.0003916447749361396}, {"id": 113, "seek": 71220, "start": 718.5200000000001, "end": 723.24, "text": " so that it, when dotted with itself, it comes out as 1, then it is a unit vector.", "tokens": [50680, 370, 300, 309, 11, 562, 37459, 365, 2564, 11, 309, 1487, 484, 382, 502, 11, 550, 309, 307, 257, 4985, 8062, 13, 50916], "temperature": 0.0, "avg_logprob": -0.0815661975315639, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.0003916447749361396}, {"id": 114, "seek": 71220, "start": 723.88, "end": 730.6800000000001, "text": " Meanwhile, in general for a vector, the square root of the dot product with itself has the name", "tokens": [50948, 13879, 11, 294, 2674, 337, 257, 8062, 11, 264, 3732, 5593, 295, 264, 5893, 1674, 365, 2564, 575, 264, 1315, 51288], "temperature": 0.0, "avg_logprob": -0.0815661975315639, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.0003916447749361396}, {"id": 115, "seek": 71220, "start": 730.6800000000001, "end": 737.32, "text": " magnitude. This is the magnitude of a vector. And it is also magnitude. It is also the length", "tokens": [51288, 15668, 13, 639, 307, 264, 15668, 295, 257, 8062, 13, 400, 309, 307, 611, 15668, 13, 467, 307, 611, 264, 4641, 51620], "temperature": 0.0, "avg_logprob": -0.0815661975315639, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.0003916447749361396}, {"id": 116, "seek": 73732, "start": 737.32, "end": 745.4000000000001, "text": " of the arrow, if we think in terms of a vector as a physical displacement and arrow that lives", "tokens": [50364, 295, 264, 11610, 11, 498, 321, 519, 294, 2115, 295, 257, 8062, 382, 257, 4001, 21899, 293, 11610, 300, 2909, 50768], "temperature": 0.0, "avg_logprob": -0.09689534312546855, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.001324422424659133}, {"id": 117, "seek": 73732, "start": 745.4000000000001, "end": 749.96, "text": " in three-dimensional space, then it would be the length of that arrow, as you can see from Pythagoras.", "tokens": [50768, 294, 1045, 12, 18759, 1901, 11, 550, 309, 576, 312, 264, 4641, 295, 300, 11610, 11, 382, 291, 393, 536, 490, 9953, 392, 559, 40928, 13, 50996], "temperature": 0.0, "avg_logprob": -0.09689534312546855, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.001324422424659133}, {"id": 118, "seek": 73732, "start": 749.96, "end": 755.96, "text": " Okay, now then, a different thing. The dot product between two vectors has an alternative definition,", "tokens": [50996, 1033, 11, 586, 550, 11, 257, 819, 551, 13, 440, 5893, 1674, 1296, 732, 18875, 575, 364, 8535, 7123, 11, 51296], "temperature": 0.0, "avg_logprob": -0.09689534312546855, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.001324422424659133}, {"id": 119, "seek": 73732, "start": 755.96, "end": 762.2, "text": " which we can show is the same as the definition we've been using so far. a dot b is also the", "tokens": [51296, 597, 321, 393, 855, 307, 264, 912, 382, 264, 7123, 321, 600, 668, 1228, 370, 1400, 13, 257, 5893, 272, 307, 611, 264, 51608], "temperature": 0.0, "avg_logprob": -0.09689534312546855, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.001324422424659133}, {"id": 120, "seek": 76220, "start": 762.2, "end": 769.08, "text": " magnitude of a times the magnitude of b times cos of some angle. And what is that angle? It's", "tokens": [50364, 15668, 295, 257, 1413, 264, 15668, 295, 272, 1413, 3792, 295, 512, 5802, 13, 400, 437, 307, 300, 5802, 30, 467, 311, 50708], "temperature": 0.0, "avg_logprob": -0.08004988091332572, "compression_ratio": 1.88671875, "no_speech_prob": 0.0005883951089344919}, {"id": 121, "seek": 76220, "start": 769.08, "end": 775.08, "text": " actually just the angle between the two vectors, between their directions. So here I'm drawing a", "tokens": [50708, 767, 445, 264, 5802, 1296, 264, 732, 18875, 11, 1296, 641, 11095, 13, 407, 510, 286, 478, 6316, 257, 51008], "temperature": 0.0, "avg_logprob": -0.08004988091332572, "compression_ratio": 1.88671875, "no_speech_prob": 0.0005883951089344919}, {"id": 122, "seek": 76220, "start": 775.08, "end": 780.5200000000001, "text": " vector a going in one direction and almost in the opposite direction vector b. And then the angle in", "tokens": [51008, 8062, 257, 516, 294, 472, 3513, 293, 1920, 294, 264, 6182, 3513, 8062, 272, 13, 400, 550, 264, 5802, 294, 51280], "temperature": 0.0, "avg_logprob": -0.08004988091332572, "compression_ratio": 1.88671875, "no_speech_prob": 0.0005883951089344919}, {"id": 123, "seek": 76220, "start": 780.5200000000001, "end": 786.0400000000001, "text": " question would be this angle that we see between the two vectors when we draw them coming from a", "tokens": [51280, 1168, 576, 312, 341, 5802, 300, 321, 536, 1296, 264, 732, 18875, 562, 321, 2642, 552, 1348, 490, 257, 51556], "temperature": 0.0, "avg_logprob": -0.08004988091332572, "compression_ratio": 1.88671875, "no_speech_prob": 0.0005883951089344919}, {"id": 124, "seek": 76220, "start": 786.0400000000001, "end": 791.88, "text": " common point of origin. Okay, so it's important to understand then that this angle can be more", "tokens": [51556, 2689, 935, 295, 4957, 13, 1033, 11, 370, 309, 311, 1021, 281, 1223, 550, 300, 341, 5802, 393, 312, 544, 51848], "temperature": 0.0, "avg_logprob": -0.08004988091332572, "compression_ratio": 1.88671875, "no_speech_prob": 0.0005883951089344919}, {"id": 125, "seek": 79188, "start": 791.88, "end": 797.4, "text": " than 90 degrees. Here's what it isn't. Here's a mistake that's sometimes made by people as they", "tokens": [50364, 813, 4289, 5310, 13, 1692, 311, 437, 309, 1943, 380, 13, 1692, 311, 257, 6146, 300, 311, 2171, 1027, 538, 561, 382, 436, 50640], "temperature": 0.0, "avg_logprob": -0.08216531753540039, "compression_ratio": 1.748898678414097, "no_speech_prob": 0.0028882843907922506}, {"id": 126, "seek": 79188, "start": 797.4, "end": 802.4399999999999, "text": " start to play with the vectors. They want the angle, for some reason, they want it to be less than 90", "tokens": [50640, 722, 281, 862, 365, 264, 18875, 13, 814, 528, 264, 5802, 11, 337, 512, 1778, 11, 436, 528, 309, 281, 312, 1570, 813, 4289, 50892], "temperature": 0.0, "avg_logprob": -0.08216531753540039, "compression_ratio": 1.748898678414097, "no_speech_prob": 0.0028882843907922506}, {"id": 127, "seek": 79188, "start": 802.4399999999999, "end": 807.64, "text": " degrees. So they try and contrive this by putting the vectors together in a way that will give them", "tokens": [50892, 5310, 13, 407, 436, 853, 293, 660, 8003, 341, 538, 3372, 264, 18875, 1214, 294, 257, 636, 300, 486, 976, 552, 51152], "temperature": 0.0, "avg_logprob": -0.08216531753540039, "compression_ratio": 1.748898678414097, "no_speech_prob": 0.0028882843907922506}, {"id": 128, "seek": 79188, "start": 807.64, "end": 814.68, "text": " less than 90 degrees, like this, for example. And then we could try and draw an angle between these", "tokens": [51152, 1570, 813, 4289, 5310, 11, 411, 341, 11, 337, 1365, 13, 400, 550, 321, 727, 853, 293, 2642, 364, 5802, 1296, 613, 51504], "temperature": 0.0, "avg_logprob": -0.08216531753540039, "compression_ratio": 1.748898678414097, "no_speech_prob": 0.0028882843907922506}, {"id": 129, "seek": 81468, "start": 814.68, "end": 822.12, "text": " two lines. Let's see, like, let's use a red to show that it's not correct. What we should have is", "tokens": [50364, 732, 3876, 13, 961, 311, 536, 11, 411, 11, 718, 311, 764, 257, 2182, 281, 855, 300, 309, 311, 406, 3006, 13, 708, 321, 820, 362, 307, 50736], "temperature": 0.0, "avg_logprob": -0.12015664962030226, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.06752975285053253}, {"id": 130, "seek": 81468, "start": 822.12, "end": 826.4399999999999, "text": " the two vectors coming from a common origin. Then we see that the angle between them can be more or", "tokens": [50736, 264, 732, 18875, 1348, 490, 257, 2689, 4957, 13, 1396, 321, 536, 300, 264, 5802, 1296, 552, 393, 312, 544, 420, 50952], "temperature": 0.0, "avg_logprob": -0.12015664962030226, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.06752975285053253}, {"id": 131, "seek": 81468, "start": 826.4399999999999, "end": 831.3199999999999, "text": " less than 90 degrees. If it was exactly 90 degrees, then of course the dot product would be zero", "tokens": [50952, 1570, 813, 4289, 5310, 13, 759, 309, 390, 2293, 4289, 5310, 11, 550, 295, 1164, 264, 5893, 1674, 576, 312, 4018, 51196], "temperature": 0.0, "avg_logprob": -0.12015664962030226, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.06752975285053253}, {"id": 132, "seek": 81468, "start": 831.3199999999999, "end": 837.64, "text": " because cos of 90 is zero. That has interesting consequences. But right now let's work out the", "tokens": [51196, 570, 3792, 295, 4289, 307, 4018, 13, 663, 575, 1880, 10098, 13, 583, 558, 586, 718, 311, 589, 484, 264, 51512], "temperature": 0.0, "avg_logprob": -0.12015664962030226, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.06752975285053253}, {"id": 133, "seek": 81468, "start": 837.64, "end": 843.4, "text": " angle between a couple of vectors. Let's give ourselves a, we'll make it one, zero minus one,", "tokens": [51512, 5802, 1296, 257, 1916, 295, 18875, 13, 961, 311, 976, 4175, 257, 11, 321, 603, 652, 309, 472, 11, 4018, 3175, 472, 11, 51800], "temperature": 0.0, "avg_logprob": -0.12015664962030226, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.06752975285053253}, {"id": 134, "seek": 84340, "start": 843.4, "end": 849.64, "text": " and b. We're going to make it four, one, minus one. And we'll do the dot product between those", "tokens": [50364, 293, 272, 13, 492, 434, 516, 281, 652, 309, 1451, 11, 472, 11, 3175, 472, 13, 400, 321, 603, 360, 264, 5893, 1674, 1296, 729, 50676], "temperature": 0.0, "avg_logprob": -0.09930939710777224, "compression_ratio": 2.01255230125523, "no_speech_prob": 0.0014548924518749118}, {"id": 135, "seek": 84340, "start": 849.64, "end": 855.24, "text": " guys. So first we'll work out the dot product. Actually, let's make it minus one. So a can", "tokens": [50676, 1074, 13, 407, 700, 321, 603, 589, 484, 264, 5893, 1674, 13, 5135, 11, 718, 311, 652, 309, 3175, 472, 13, 407, 257, 393, 50956], "temperature": 0.0, "avg_logprob": -0.09930939710777224, "compression_ratio": 2.01255230125523, "no_speech_prob": 0.0014548924518749118}, {"id": 136, "seek": 84340, "start": 855.24, "end": 859.0799999999999, "text": " be minus one, zero, minus one. I think that will come out better. So we have minus four from minus", "tokens": [50956, 312, 3175, 472, 11, 4018, 11, 3175, 472, 13, 286, 519, 300, 486, 808, 484, 1101, 13, 407, 321, 362, 3175, 1451, 490, 3175, 51148], "temperature": 0.0, "avg_logprob": -0.09930939710777224, "compression_ratio": 2.01255230125523, "no_speech_prob": 0.0014548924518749118}, {"id": 137, "seek": 84340, "start": 859.0799999999999, "end": 863.8, "text": " one times four. We have zero times one is zero. We have minus one times minus one is one. So it's", "tokens": [51148, 472, 1413, 1451, 13, 492, 362, 4018, 1413, 472, 307, 4018, 13, 492, 362, 3175, 472, 1413, 3175, 472, 307, 472, 13, 407, 309, 311, 51384], "temperature": 0.0, "avg_logprob": -0.09930939710777224, "compression_ratio": 2.01255230125523, "no_speech_prob": 0.0014548924518749118}, {"id": 138, "seek": 84340, "start": 863.8, "end": 869.0, "text": " going to be minus three for the total dot product between these two guys. But we also need to find", "tokens": [51384, 516, 281, 312, 3175, 1045, 337, 264, 3217, 5893, 1674, 1296, 613, 732, 1074, 13, 583, 321, 611, 643, 281, 915, 51644], "temperature": 0.0, "avg_logprob": -0.09930939710777224, "compression_ratio": 2.01255230125523, "no_speech_prob": 0.0014548924518749118}, {"id": 139, "seek": 86900, "start": 869.0, "end": 873.32, "text": " out the magnitude. Fair enough. Magnitude of a is going to be the square root of minus one times", "tokens": [50364, 484, 264, 15668, 13, 12157, 1547, 13, 19664, 4377, 295, 257, 307, 516, 281, 312, 264, 3732, 5593, 295, 3175, 472, 1413, 50580], "temperature": 0.0, "avg_logprob": -0.13815872068327617, "compression_ratio": 2.103448275862069, "no_speech_prob": 0.04884824529290199}, {"id": 140, "seek": 86900, "start": 873.32, "end": 879.56, "text": " one times one. And again, one. So that would be the square root of two. Nice and straightforward.", "tokens": [50580, 472, 1413, 472, 13, 400, 797, 11, 472, 13, 407, 300, 576, 312, 264, 3732, 5593, 295, 732, 13, 5490, 293, 15325, 13, 50892], "temperature": 0.0, "avg_logprob": -0.13815872068327617, "compression_ratio": 2.103448275862069, "no_speech_prob": 0.04884824529290199}, {"id": 141, "seek": 86900, "start": 879.56, "end": 887.08, "text": " Meanwhile, the magnitude of b is going to be four fours of sixteen plus one plus one. It's going", "tokens": [50892, 13879, 11, 264, 15668, 295, 272, 307, 516, 281, 312, 1451, 1451, 82, 295, 27847, 1804, 472, 1804, 472, 13, 467, 311, 516, 51268], "temperature": 0.0, "avg_logprob": -0.13815872068327617, "compression_ratio": 2.103448275862069, "no_speech_prob": 0.04884824529290199}, {"id": 142, "seek": 86900, "start": 887.08, "end": 893.56, "text": " to be eighteen. The square root of eighteen. But I think we can do better than that. Square root", "tokens": [51268, 281, 312, 31755, 13, 440, 3732, 5593, 295, 31755, 13, 583, 286, 519, 321, 393, 360, 1101, 813, 300, 13, 16463, 5593, 51592], "temperature": 0.0, "avg_logprob": -0.13815872068327617, "compression_ratio": 2.103448275862069, "no_speech_prob": 0.04884824529290199}, {"id": 143, "seek": 86900, "start": 893.56, "end": 898.6, "text": " of eighteen is actually square root of nine times the square root of two. And that means it's three", "tokens": [51592, 295, 31755, 307, 767, 3732, 5593, 295, 4949, 1413, 264, 3732, 5593, 295, 732, 13, 400, 300, 1355, 309, 311, 1045, 51844], "temperature": 0.0, "avg_logprob": -0.13815872068327617, "compression_ratio": 2.103448275862069, "no_speech_prob": 0.04884824529290199}, {"id": 144, "seek": 89860, "start": 898.6, "end": 903.72, "text": " times the square root of two. Okay, now we've got everything we need. Let's pull down a copy of that", "tokens": [50364, 1413, 264, 3732, 5593, 295, 732, 13, 1033, 11, 586, 321, 600, 658, 1203, 321, 643, 13, 961, 311, 2235, 760, 257, 5055, 295, 300, 50620], "temperature": 0.0, "avg_logprob": -0.1000319586859809, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.001133501180447638}, {"id": 145, "seek": 89860, "start": 904.52, "end": 910.6, "text": " definition there relating a dot b to its magnitudes in the angle and fill in what we know for this", "tokens": [50660, 7123, 456, 23968, 257, 5893, 272, 281, 1080, 4944, 16451, 294, 264, 5802, 293, 2836, 294, 437, 321, 458, 337, 341, 50964], "temperature": 0.0, "avg_logprob": -0.1000319586859809, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.001133501180447638}, {"id": 146, "seek": 89860, "start": 910.6, "end": 918.84, "text": " particular choice of a and b. We've got minus three is therefore equal to root two times three root", "tokens": [50964, 1729, 3922, 295, 257, 293, 272, 13, 492, 600, 658, 3175, 1045, 307, 4412, 2681, 281, 5593, 732, 1413, 1045, 5593, 51376], "temperature": 0.0, "avg_logprob": -0.1000319586859809, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.001133501180447638}, {"id": 147, "seek": 89860, "start": 918.84, "end": 924.52, "text": " two times cos of the angle that we're after. So now we just need to rearrange. That means that", "tokens": [51376, 732, 1413, 3792, 295, 264, 5802, 300, 321, 434, 934, 13, 407, 586, 321, 445, 643, 281, 39568, 13, 663, 1355, 300, 51660], "temperature": 0.0, "avg_logprob": -0.1000319586859809, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.001133501180447638}, {"id": 148, "seek": 92452, "start": 925.24, "end": 932.36, "text": " cos of the angle is going to be equal to minus three divided by what we've got two lots of", "tokens": [50400, 3792, 295, 264, 5802, 307, 516, 281, 312, 2681, 281, 3175, 1045, 6666, 538, 437, 321, 600, 658, 732, 3195, 295, 50756], "temperature": 0.0, "avg_logprob": -0.1805853525797526, "compression_ratio": 1.721189591078067, "no_speech_prob": 0.004903875757008791}, {"id": 149, "seek": 92452, "start": 932.36, "end": 937.24, "text": " root two. So that's just three times two. And if we simplify that down, it's just minus a half.", "tokens": [50756, 5593, 732, 13, 407, 300, 311, 445, 1045, 1413, 732, 13, 400, 498, 321, 20460, 300, 760, 11, 309, 311, 445, 3175, 257, 1922, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1805853525797526, "compression_ratio": 1.721189591078067, "no_speech_prob": 0.004903875757008791}, {"id": 150, "seek": 92452, "start": 937.8, "end": 943.56, "text": " Now we may just remember or use a calculator to find out. This means that the angle in question", "tokens": [51028, 823, 321, 815, 445, 1604, 420, 764, 257, 24993, 281, 915, 484, 13, 639, 1355, 300, 264, 5802, 294, 1168, 51316], "temperature": 0.0, "avg_logprob": -0.1805853525797526, "compression_ratio": 1.721189591078067, "no_speech_prob": 0.004903875757008791}, {"id": 151, "seek": 92452, "start": 944.12, "end": 948.68, "text": " is in fact going to be simply one hundred and twenty degrees. Or you can use radians if you", "tokens": [51344, 307, 294, 1186, 516, 281, 312, 2935, 472, 3262, 293, 7699, 5310, 13, 1610, 291, 393, 764, 2843, 2567, 498, 291, 51572], "temperature": 0.0, "avg_logprob": -0.1805853525797526, "compression_ratio": 1.721189591078067, "no_speech_prob": 0.004903875757008791}, {"id": 152, "seek": 92452, "start": 948.68, "end": 952.68, "text": " prefer radians. So there we are. That's the answer. The angle between these two vectors,", "tokens": [51572, 4382, 2843, 2567, 13, 407, 456, 321, 366, 13, 663, 311, 264, 1867, 13, 440, 5802, 1296, 613, 732, 18875, 11, 51772], "temperature": 0.0, "avg_logprob": -0.1805853525797526, "compression_ratio": 1.721189591078067, "no_speech_prob": 0.004903875757008791}, {"id": 153, "seek": 95268, "start": 952.68, "end": 959.4, "text": " 120 degrees. And that's it for the second video. In this video, we're going to see how to calculate", "tokens": [50364, 10411, 5310, 13, 400, 300, 311, 309, 337, 264, 1150, 960, 13, 682, 341, 960, 11, 321, 434, 516, 281, 536, 577, 281, 8873, 50700], "temperature": 0.0, "avg_logprob": -0.07650667174249633, "compression_ratio": 1.7919708029197081, "no_speech_prob": 0.0021155518479645252}, {"id": 154, "seek": 95268, "start": 959.4, "end": 964.68, "text": " something called the cross product of two vectors. It's also called the vector product because the", "tokens": [50700, 746, 1219, 264, 3278, 1674, 295, 732, 18875, 13, 467, 311, 611, 1219, 264, 8062, 1674, 570, 264, 50964], "temperature": 0.0, "avg_logprob": -0.07650667174249633, "compression_ratio": 1.7919708029197081, "no_speech_prob": 0.0021155518479645252}, {"id": 155, "seek": 95268, "start": 964.68, "end": 970.76, "text": " output is a new vector. And we'll see how to test that the answer is correct. So here I've written", "tokens": [50964, 5598, 307, 257, 777, 8062, 13, 400, 321, 603, 536, 577, 281, 1500, 300, 264, 1867, 307, 3006, 13, 407, 510, 286, 600, 3720, 51268], "temperature": 0.0, "avg_logprob": -0.07650667174249633, "compression_ratio": 1.7919708029197081, "no_speech_prob": 0.0021155518479645252}, {"id": 156, "seek": 95268, "start": 970.76, "end": 976.52, "text": " a cross b is equal to c. And notice that the symbol for the cross product is just the multiplication", "tokens": [51268, 257, 3278, 272, 307, 2681, 281, 269, 13, 400, 3449, 300, 264, 5986, 337, 264, 3278, 1674, 307, 445, 264, 27290, 51556], "temperature": 0.0, "avg_logprob": -0.07650667174249633, "compression_ratio": 1.7919708029197081, "no_speech_prob": 0.0021155518479645252}, {"id": 157, "seek": 95268, "start": 976.52, "end": 982.4399999999999, "text": " symbol that you're familiar with from basic arithmetic. I've given the vector a a particular", "tokens": [51556, 5986, 300, 291, 434, 4963, 365, 490, 3875, 42973, 13, 286, 600, 2212, 264, 8062, 257, 257, 1729, 51852], "temperature": 0.0, "avg_logprob": -0.07650667174249633, "compression_ratio": 1.7919708029197081, "no_speech_prob": 0.0021155518479645252}, {"id": 158, "seek": 98244, "start": 982.44, "end": 988.6800000000001, "text": " form, this two, three, four column vector. And similarly b is written as four, five, six. So", "tokens": [50364, 1254, 11, 341, 732, 11, 1045, 11, 1451, 7738, 8062, 13, 400, 14138, 272, 307, 3720, 382, 1451, 11, 1732, 11, 2309, 13, 407, 50676], "temperature": 0.0, "avg_logprob": -0.08492425379862312, "compression_ratio": 1.7535714285714286, "no_speech_prob": 0.0013246277812868357}, {"id": 159, "seek": 98244, "start": 988.6800000000001, "end": 993.8000000000001, "text": " we're going to go ahead and find out what is the cross product of these two vectors c. Because it's", "tokens": [50676, 321, 434, 516, 281, 352, 2286, 293, 915, 484, 437, 307, 264, 3278, 1674, 295, 613, 732, 18875, 269, 13, 1436, 309, 311, 50932], "temperature": 0.0, "avg_logprob": -0.08492425379862312, "compression_ratio": 1.7535714285714286, "no_speech_prob": 0.0013246277812868357}, {"id": 160, "seek": 98244, "start": 993.8000000000001, "end": 998.84, "text": " a vector, we'll need to do some working for each of the three components. Now what I'm going to do", "tokens": [50932, 257, 8062, 11, 321, 603, 643, 281, 360, 512, 1364, 337, 1184, 295, 264, 1045, 6677, 13, 823, 437, 286, 478, 516, 281, 360, 51184], "temperature": 0.0, "avg_logprob": -0.08492425379862312, "compression_ratio": 1.7535714285714286, "no_speech_prob": 0.0013246277812868357}, {"id": 161, "seek": 98244, "start": 998.84, "end": 1004.36, "text": " is I'm going to paste up some structure to help us work through the problem. So don't worry because", "tokens": [51184, 307, 286, 478, 516, 281, 9163, 493, 512, 3877, 281, 854, 505, 589, 807, 264, 1154, 13, 407, 500, 380, 3292, 570, 51460], "temperature": 0.0, "avg_logprob": -0.08492425379862312, "compression_ratio": 1.7535714285714286, "no_speech_prob": 0.0013246277812868357}, {"id": 162, "seek": 98244, "start": 1004.36, "end": 1008.6, "text": " it's going to look like a lot. But you don't need to write all this out every time you want to do a", "tokens": [51460, 309, 311, 516, 281, 574, 411, 257, 688, 13, 583, 291, 500, 380, 643, 281, 2464, 439, 341, 484, 633, 565, 291, 528, 281, 360, 257, 51672], "temperature": 0.0, "avg_logprob": -0.08492425379862312, "compression_ratio": 1.7535714285714286, "no_speech_prob": 0.0013246277812868357}, {"id": 163, "seek": 100860, "start": 1008.6, "end": 1013.72, "text": " cross product. I'm just putting it here so we can really spell out the process. Okay so let's go", "tokens": [50364, 3278, 1674, 13, 286, 478, 445, 3372, 309, 510, 370, 321, 393, 534, 9827, 484, 264, 1399, 13, 1033, 370, 718, 311, 352, 50620], "temperature": 0.0, "avg_logprob": -0.05271409008954022, "compression_ratio": 2.1340579710144927, "no_speech_prob": 0.004903377499431372}, {"id": 164, "seek": 100860, "start": 1013.72, "end": 1018.0400000000001, "text": " ahead and work out the first component of the output vector c. Strangely enough what we're going", "tokens": [50620, 2286, 293, 589, 484, 264, 700, 6542, 295, 264, 5598, 8062, 269, 13, 8251, 656, 736, 1547, 437, 321, 434, 516, 50836], "temperature": 0.0, "avg_logprob": -0.05271409008954022, "compression_ratio": 2.1340579710144927, "no_speech_prob": 0.004903377499431372}, {"id": 165, "seek": 100860, "start": 1018.0400000000001, "end": 1023.16, "text": " to do is we're going to ignore the first component of vectors a and b. So I'm just going to cross", "tokens": [50836, 281, 360, 307, 321, 434, 516, 281, 11200, 264, 700, 6542, 295, 18875, 257, 293, 272, 13, 407, 286, 478, 445, 516, 281, 3278, 51092], "temperature": 0.0, "avg_logprob": -0.05271409008954022, "compression_ratio": 2.1340579710144927, "no_speech_prob": 0.004903377499431372}, {"id": 166, "seek": 100860, "start": 1023.16, "end": 1028.2, "text": " those out. Those aren't used. And what we're going to do is we're going to multiply a certain of the", "tokens": [51092, 729, 484, 13, 3950, 3212, 380, 1143, 13, 400, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 12972, 257, 1629, 295, 264, 51344], "temperature": 0.0, "avg_logprob": -0.05271409008954022, "compression_ratio": 2.1340579710144927, "no_speech_prob": 0.004903377499431372}, {"id": 167, "seek": 100860, "start": 1028.2, "end": 1032.6, "text": " other components. What we're going to do is we're going to multiply the second component of vector", "tokens": [51344, 661, 6677, 13, 708, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 12972, 264, 1150, 6542, 295, 8062, 51564], "temperature": 0.0, "avg_logprob": -0.05271409008954022, "compression_ratio": 2.1340579710144927, "no_speech_prob": 0.004903377499431372}, {"id": 168, "seek": 100860, "start": 1032.6, "end": 1037.88, "text": " a with the third component of vector b. I call that the falling diagonal. Because when we draw it", "tokens": [51564, 257, 365, 264, 2636, 6542, 295, 8062, 272, 13, 286, 818, 300, 264, 7440, 21539, 13, 1436, 562, 321, 2642, 309, 51828], "temperature": 0.0, "avg_logprob": -0.05271409008954022, "compression_ratio": 2.1340579710144927, "no_speech_prob": 0.004903377499431372}, {"id": 169, "seek": 103788, "start": 1037.88, "end": 1043.72, "text": " like this we start high and then go low. And then we're going to subtract off the multiple", "tokens": [50364, 411, 341, 321, 722, 1090, 293, 550, 352, 2295, 13, 400, 550, 321, 434, 516, 281, 16390, 766, 264, 3866, 50656], "temperature": 0.0, "avg_logprob": -0.12414996137896787, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.0026314188726246357}, {"id": 170, "seek": 103788, "start": 1043.72, "end": 1050.5200000000002, "text": " of the rising diagonal 4 and 6 here. The last component of vector a and the middle component", "tokens": [50656, 295, 264, 11636, 21539, 1017, 293, 1386, 510, 13, 440, 1036, 6542, 295, 8062, 257, 293, 264, 2808, 6542, 50996], "temperature": 0.0, "avg_logprob": -0.12414996137896787, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.0026314188726246357}, {"id": 171, "seek": 103788, "start": 1050.5200000000002, "end": 1058.44, "text": " of vector b. So what we have here is 21, that's 7 3's a 21, minus 6 4's a 24, that's minus 3.", "tokens": [50996, 295, 8062, 272, 13, 407, 437, 321, 362, 510, 307, 5080, 11, 300, 311, 1614, 805, 311, 257, 5080, 11, 3175, 1386, 1017, 311, 257, 4022, 11, 300, 311, 3175, 805, 13, 51392], "temperature": 0.0, "avg_logprob": -0.12414996137896787, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.0026314188726246357}, {"id": 172, "seek": 103788, "start": 1058.44, "end": 1064.1200000000001, "text": " We can go ahead now and write that in as our first element minus 3. Now let's move to the", "tokens": [51392, 492, 393, 352, 2286, 586, 293, 2464, 300, 294, 382, 527, 700, 4478, 3175, 805, 13, 823, 718, 311, 1286, 281, 264, 51676], "temperature": 0.0, "avg_logprob": -0.12414996137896787, "compression_ratio": 1.6457399103139014, "no_speech_prob": 0.0026314188726246357}, {"id": 173, "seek": 106412, "start": 1064.12, "end": 1070.9199999999998, "text": " second element of the output vector c. We'll start by ignoring the second component of the", "tokens": [50364, 1150, 4478, 295, 264, 5598, 8062, 269, 13, 492, 603, 722, 538, 26258, 264, 1150, 6542, 295, 264, 50704], "temperature": 0.0, "avg_logprob": -0.08375505469311242, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.006487339735031128}, {"id": 174, "seek": 106412, "start": 1070.9199999999998, "end": 1075.3999999999999, "text": " two source vectors a and b. We can cross those off. And again we're not going to multiply", "tokens": [50704, 732, 4009, 18875, 257, 293, 272, 13, 492, 393, 3278, 729, 766, 13, 400, 797, 321, 434, 406, 516, 281, 12972, 50928], "temperature": 0.0, "avg_logprob": -0.08375505469311242, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.006487339735031128}, {"id": 175, "seek": 106412, "start": 1075.3999999999999, "end": 1081.32, "text": " some diagonals. But what's different here is we start with the rising diagonal 4 times 5.", "tokens": [50928, 512, 17405, 1124, 13, 583, 437, 311, 819, 510, 307, 321, 722, 365, 264, 11636, 21539, 1017, 1413, 1025, 13, 51224], "temperature": 0.0, "avg_logprob": -0.08375505469311242, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.006487339735031128}, {"id": 176, "seek": 106412, "start": 1081.32, "end": 1087.9599999999998, "text": " The last component of vector a times the first component of vector b. The rising diagonal 5", "tokens": [51224, 440, 1036, 6542, 295, 8062, 257, 1413, 264, 700, 6542, 295, 8062, 272, 13, 440, 11636, 21539, 1025, 51556], "temperature": 0.0, "avg_logprob": -0.08375505469311242, "compression_ratio": 1.7658536585365854, "no_speech_prob": 0.006487339735031128}, {"id": 177, "seek": 108796, "start": 1087.96, "end": 1095.0, "text": " 4's a 20. And then we subtract off the falling diagonal. So 2 7's a 14 and that's going to give", "tokens": [50364, 1017, 311, 257, 945, 13, 400, 550, 321, 16390, 766, 264, 7440, 21539, 13, 407, 568, 1614, 311, 257, 3499, 293, 300, 311, 516, 281, 976, 50716], "temperature": 0.0, "avg_logprob": -0.0988929505441703, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.011685243807733059}, {"id": 178, "seek": 108796, "start": 1095.0, "end": 1102.1200000000001, "text": " us 6. So we can put that in. Now let's move to the third and final component. As before we start", "tokens": [50716, 505, 1386, 13, 407, 321, 393, 829, 300, 294, 13, 823, 718, 311, 1286, 281, 264, 2636, 293, 2572, 6542, 13, 1018, 949, 321, 722, 51072], "temperature": 0.0, "avg_logprob": -0.0988929505441703, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.011685243807733059}, {"id": 179, "seek": 108796, "start": 1102.1200000000001, "end": 1108.92, "text": " by noting that we will ignore the third component of the two source vectors. And we're going to", "tokens": [51072, 538, 26801, 300, 321, 486, 11200, 264, 2636, 6542, 295, 264, 732, 4009, 18875, 13, 400, 321, 434, 516, 281, 51412], "temperature": 0.0, "avg_logprob": -0.0988929505441703, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.011685243807733059}, {"id": 180, "seek": 108796, "start": 1108.92, "end": 1114.68, "text": " need some diagonals. It's the same pattern as the first falling diagonal first. So 2 times 6", "tokens": [51412, 643, 512, 17405, 1124, 13, 467, 311, 264, 912, 5102, 382, 264, 700, 7440, 21539, 700, 13, 407, 568, 1413, 1386, 51700], "temperature": 0.0, "avg_logprob": -0.0988929505441703, "compression_ratio": 1.7008928571428572, "no_speech_prob": 0.011685243807733059}, {"id": 181, "seek": 111468, "start": 1114.68, "end": 1120.04, "text": " and subtract which is 12 and then subtract off the rising diagonal 5 3's a 15.", "tokens": [50364, 293, 16390, 597, 307, 2272, 293, 550, 16390, 766, 264, 11636, 21539, 1025, 805, 311, 257, 2119, 13, 50632], "temperature": 0.0, "avg_logprob": -0.10020623207092286, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.0008558501722291112}, {"id": 182, "seek": 111468, "start": 1121.3200000000002, "end": 1126.8400000000001, "text": " All right so that's going to be minus 3. Pop that in. We see that we have quite a simple", "tokens": [50696, 1057, 558, 370, 300, 311, 516, 281, 312, 3175, 805, 13, 10215, 300, 294, 13, 492, 536, 300, 321, 362, 1596, 257, 2199, 50972], "temperature": 0.0, "avg_logprob": -0.10020623207092286, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.0008558501722291112}, {"id": 183, "seek": 111468, "start": 1126.8400000000001, "end": 1134.04, "text": " vector here. There's a common factor of 3. Let's bring that out. 3 then minus 1 to minus 1. That", "tokens": [50972, 8062, 510, 13, 821, 311, 257, 2689, 5952, 295, 805, 13, 961, 311, 1565, 300, 484, 13, 805, 550, 3175, 502, 281, 3175, 502, 13, 663, 51332], "temperature": 0.0, "avg_logprob": -0.10020623207092286, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.0008558501722291112}, {"id": 184, "seek": 111468, "start": 1134.04, "end": 1141.0800000000002, "text": " is our vector c. That is a cross b. Notice again the pattern. It was the falling diagonal minus the", "tokens": [51332, 307, 527, 8062, 269, 13, 663, 307, 257, 3278, 272, 13, 13428, 797, 264, 5102, 13, 467, 390, 264, 7440, 21539, 3175, 264, 51684], "temperature": 0.0, "avg_logprob": -0.10020623207092286, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.0008558501722291112}, {"id": 185, "seek": 114108, "start": 1141.08, "end": 1148.04, "text": " rising diagonal for the first component. And then the rising diagonal minus the falling diagonal", "tokens": [50364, 11636, 21539, 337, 264, 700, 6542, 13, 400, 550, 264, 11636, 21539, 3175, 264, 7440, 21539, 50712], "temperature": 0.0, "avg_logprob": -0.08528377163794733, "compression_ratio": 1.8855721393034826, "no_speech_prob": 0.0006070610834285617}, {"id": 186, "seek": 114108, "start": 1148.04, "end": 1153.0, "text": " for the second component. And then for the third it was back to the same pattern as for the first.", "tokens": [50712, 337, 264, 1150, 6542, 13, 400, 550, 337, 264, 2636, 309, 390, 646, 281, 264, 912, 5102, 382, 337, 264, 700, 13, 50960], "temperature": 0.0, "avg_logprob": -0.08528377163794733, "compression_ratio": 1.8855721393034826, "no_speech_prob": 0.0006070610834285617}, {"id": 187, "seek": 114108, "start": 1153.0, "end": 1157.24, "text": " Now these look a bit like letters to me. They look a bit like a v. The middle one perhaps an", "tokens": [50960, 823, 613, 574, 257, 857, 411, 7825, 281, 385, 13, 814, 574, 257, 857, 411, 257, 371, 13, 440, 2808, 472, 4317, 364, 51172], "temperature": 0.0, "avg_logprob": -0.08528377163794733, "compression_ratio": 1.8855721393034826, "no_speech_prob": 0.0006070610834285617}, {"id": 188, "seek": 114108, "start": 1157.24, "end": 1165.56, "text": " n and the final one a v. I like to remember that as a little sentence which is voles never", "tokens": [51172, 297, 293, 264, 2572, 472, 257, 371, 13, 286, 411, 281, 1604, 300, 382, 257, 707, 8174, 597, 307, 1996, 279, 1128, 51588], "temperature": 0.0, "avg_logprob": -0.08528377163794733, "compression_ratio": 1.8855721393034826, "no_speech_prob": 0.0006070610834285617}, {"id": 189, "seek": 116556, "start": 1166.36, "end": 1172.9199999999998, "text": " vary. Because in my opinion voles don't vary very much. Here's a vol. This one doesn't vary at all", "tokens": [50404, 10559, 13, 1436, 294, 452, 4800, 1996, 279, 500, 380, 10559, 588, 709, 13, 1692, 311, 257, 1996, 13, 639, 472, 1177, 380, 10559, 412, 439, 50732], "temperature": 0.0, "avg_logprob": -0.08840620813290935, "compression_ratio": 1.7304964539007093, "no_speech_prob": 0.01744075119495392}, {"id": 190, "seek": 116556, "start": 1172.9199999999998, "end": 1178.04, "text": " because it's stuffed in a museum. However if you compare it to some other voles which I found these", "tokens": [50732, 570, 309, 311, 24092, 294, 257, 8441, 13, 2908, 498, 291, 6794, 309, 281, 512, 661, 1996, 279, 597, 286, 1352, 613, 50988], "temperature": 0.0, "avg_logprob": -0.08840620813290935, "compression_ratio": 1.7304964539007093, "no_speech_prob": 0.01744075119495392}, {"id": 191, "seek": 116556, "start": 1178.04, "end": 1182.76, "text": " on the internet I think they're all pretty much identical and it's a big difference there. So", "tokens": [50988, 322, 264, 4705, 286, 519, 436, 434, 439, 1238, 709, 14800, 293, 309, 311, 257, 955, 2649, 456, 13, 407, 51224], "temperature": 0.0, "avg_logprob": -0.08840620813290935, "compression_ratio": 1.7304964539007093, "no_speech_prob": 0.01744075119495392}, {"id": 192, "seek": 116556, "start": 1182.76, "end": 1188.12, "text": " for me voles never vary. If for you they do seem to vary then think of a different way of remembering", "tokens": [51224, 337, 385, 1996, 279, 1128, 10559, 13, 759, 337, 291, 436, 360, 1643, 281, 10559, 550, 519, 295, 257, 819, 636, 295, 20719, 51492], "temperature": 0.0, "avg_logprob": -0.08840620813290935, "compression_ratio": 1.7304964539007093, "no_speech_prob": 0.01744075119495392}, {"id": 193, "seek": 116556, "start": 1188.12, "end": 1192.52, "text": " it. But the important thing is that the first thing is the falling diagonal and then subtract", "tokens": [51492, 309, 13, 583, 264, 1021, 551, 307, 300, 264, 700, 551, 307, 264, 7440, 21539, 293, 550, 16390, 51712], "temperature": 0.0, "avg_logprob": -0.08840620813290935, "compression_ratio": 1.7304964539007093, "no_speech_prob": 0.01744075119495392}, {"id": 194, "seek": 119252, "start": 1192.52, "end": 1199.6399999999999, "text": " the rising diagonal of v shape and it alternates. Okay how to check your cross product has been", "tokens": [50364, 264, 11636, 21539, 295, 371, 3909, 293, 309, 5400, 1024, 13, 1033, 577, 281, 1520, 428, 3278, 1674, 575, 668, 50720], "temperature": 0.0, "avg_logprob": -0.11879592155342672, "compression_ratio": 1.6312292358803986, "no_speech_prob": 0.02297324687242508}, {"id": 195, "seek": 119252, "start": 1199.6399999999999, "end": 1204.36, "text": " worked out correctly. This is really useful stuff. So let's give ourselves another example. We'll have", "tokens": [50720, 2732, 484, 8944, 13, 639, 307, 534, 4420, 1507, 13, 407, 718, 311, 976, 4175, 1071, 1365, 13, 492, 603, 362, 50956], "temperature": 0.0, "avg_logprob": -0.11879592155342672, "compression_ratio": 1.6312292358803986, "no_speech_prob": 0.02297324687242508}, {"id": 196, "seek": 119252, "start": 1204.36, "end": 1209.96, "text": " two three one and then we'll have let's say three seven minus one. Let's get a minus in there.", "tokens": [50956, 732, 1045, 472, 293, 550, 321, 603, 362, 718, 311, 584, 1045, 3407, 3175, 472, 13, 961, 311, 483, 257, 3175, 294, 456, 13, 51236], "temperature": 0.0, "avg_logprob": -0.11879592155342672, "compression_ratio": 1.6312292358803986, "no_speech_prob": 0.02297324687242508}, {"id": 197, "seek": 119252, "start": 1209.96, "end": 1214.52, "text": " And that's going to be equal to something. We'll work it out in a minute. For now I'll put x, y, z.", "tokens": [51236, 400, 300, 311, 516, 281, 312, 2681, 281, 746, 13, 492, 603, 589, 309, 484, 294, 257, 3456, 13, 1171, 586, 286, 603, 829, 2031, 11, 288, 11, 710, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11879592155342672, "compression_ratio": 1.6312292358803986, "no_speech_prob": 0.02297324687242508}, {"id": 198, "seek": 119252, "start": 1215.48, "end": 1220.44, "text": " Now how am I going to test once I found those x, y and z that I haven't made some kind of slip? I", "tokens": [51512, 823, 577, 669, 286, 516, 281, 1500, 1564, 286, 1352, 729, 2031, 11, 288, 293, 710, 300, 286, 2378, 380, 1027, 512, 733, 295, 11140, 30, 286, 51760], "temperature": 0.0, "avg_logprob": -0.11879592155342672, "compression_ratio": 1.6312292358803986, "no_speech_prob": 0.02297324687242508}, {"id": 199, "seek": 122044, "start": 1220.44, "end": 1224.2, "text": " mean there's a lot of mental arithmetic. If we don't write it all out we're going to be doing a", "tokens": [50364, 914, 456, 311, 257, 688, 295, 4973, 42973, 13, 759, 321, 500, 380, 2464, 309, 439, 484, 321, 434, 516, 281, 312, 884, 257, 50552], "temperature": 0.0, "avg_logprob": -0.05294045607248942, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.0011331088608130813}, {"id": 200, "seek": 122044, "start": 1224.2, "end": 1230.1200000000001, "text": " bunch of multiplications. I could easily slip up. How am I going to test that? It turns out", "tokens": [50552, 3840, 295, 17596, 763, 13, 286, 727, 3612, 11140, 493, 13, 1012, 669, 286, 516, 281, 1500, 300, 30, 467, 4523, 484, 50848], "temperature": 0.0, "avg_logprob": -0.05294045607248942, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.0011331088608130813}, {"id": 201, "seek": 122044, "start": 1230.1200000000001, "end": 1234.92, "text": " there's a very interesting property of the vector c that we get out after the operation", "tokens": [50848, 456, 311, 257, 588, 1880, 4707, 295, 264, 8062, 269, 300, 321, 483, 484, 934, 264, 6916, 51088], "temperature": 0.0, "avg_logprob": -0.05294045607248942, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.0011331088608130813}, {"id": 202, "seek": 122044, "start": 1234.92, "end": 1242.04, "text": " if we've done it correctly. That is as I've written here that a dot dot product with vector c is zero", "tokens": [51088, 498, 321, 600, 1096, 309, 8944, 13, 663, 307, 382, 286, 600, 3720, 510, 300, 257, 5893, 5893, 1674, 365, 8062, 269, 307, 4018, 51444], "temperature": 0.0, "avg_logprob": -0.05294045607248942, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.0011331088608130813}, {"id": 203, "seek": 122044, "start": 1242.04, "end": 1249.0, "text": " and so is b. So either of the input vectors a and b dotted with the correct cross product c", "tokens": [51444, 293, 370, 307, 272, 13, 407, 2139, 295, 264, 4846, 18875, 257, 293, 272, 37459, 365, 264, 3006, 3278, 1674, 269, 51792], "temperature": 0.0, "avg_logprob": -0.05294045607248942, "compression_ratio": 1.7765151515151516, "no_speech_prob": 0.0011331088608130813}, {"id": 204, "seek": 124900, "start": 1249.0, "end": 1253.88, "text": " should give us zero and that's great because the dot product is very easy to work out even by i", "tokens": [50364, 820, 976, 505, 4018, 293, 300, 311, 869, 570, 264, 5893, 1674, 307, 588, 1858, 281, 589, 484, 754, 538, 741, 50608], "temperature": 0.0, "avg_logprob": -0.08916269242763519, "compression_ratio": 1.8228782287822878, "no_speech_prob": 0.006096522323787212}, {"id": 205, "seek": 124900, "start": 1253.88, "end": 1259.0, "text": " as a check. Let's go ahead and do it. So I've copied it down here. We're going to want to work down", "tokens": [50608, 382, 257, 1520, 13, 961, 311, 352, 2286, 293, 360, 309, 13, 407, 286, 600, 25365, 309, 760, 510, 13, 492, 434, 516, 281, 528, 281, 589, 760, 50864], "temperature": 0.0, "avg_logprob": -0.08916269242763519, "compression_ratio": 1.8228782287822878, "no_speech_prob": 0.006096522323787212}, {"id": 206, "seek": 124900, "start": 1259.0, "end": 1264.84, "text": " our various components. Let's do the first component of c. So what do we do? We ignore the first", "tokens": [50864, 527, 3683, 6677, 13, 961, 311, 360, 264, 700, 6542, 295, 269, 13, 407, 437, 360, 321, 360, 30, 492, 11200, 264, 700, 51156], "temperature": 0.0, "avg_logprob": -0.08916269242763519, "compression_ratio": 1.8228782287822878, "no_speech_prob": 0.006096522323787212}, {"id": 207, "seek": 124900, "start": 1264.84, "end": 1270.2, "text": " components of a and b and we do the falling diagonal. So that's going to be three times minus one and", "tokens": [51156, 6677, 295, 257, 293, 272, 293, 321, 360, 264, 7440, 21539, 13, 407, 300, 311, 516, 281, 312, 1045, 1413, 3175, 472, 293, 51424], "temperature": 0.0, "avg_logprob": -0.08916269242763519, "compression_ratio": 1.8228782287822878, "no_speech_prob": 0.006096522323787212}, {"id": 208, "seek": 124900, "start": 1270.2, "end": 1277.32, "text": " we subtract the rising diagonal one times seven. So that's just let's just write that out. Normally", "tokens": [51424, 321, 16390, 264, 11636, 21539, 472, 1413, 3407, 13, 407, 300, 311, 445, 718, 311, 445, 2464, 300, 484, 13, 17424, 51780], "temperature": 0.0, "avg_logprob": -0.08916269242763519, "compression_ratio": 1.8228782287822878, "no_speech_prob": 0.006096522323787212}, {"id": 209, "seek": 127732, "start": 1277.32, "end": 1280.6799999999998, "text": " I wouldn't bother to write all this out but let's go ahead and do it here. So it's minus three", "tokens": [50364, 286, 2759, 380, 8677, 281, 2464, 439, 341, 484, 457, 718, 311, 352, 2286, 293, 360, 309, 510, 13, 407, 309, 311, 3175, 1045, 50532], "temperature": 0.0, "avg_logprob": -0.07780434345376902, "compression_ratio": 1.9087301587301588, "no_speech_prob": 0.007576427888125181}, {"id": 210, "seek": 127732, "start": 1280.6799999999998, "end": 1285.6399999999999, "text": " minus seven and so that's going to be minus ten as our first component. Now we work out", "tokens": [50532, 3175, 3407, 293, 370, 300, 311, 516, 281, 312, 3175, 2064, 382, 527, 700, 6542, 13, 823, 321, 589, 484, 50780], "temperature": 0.0, "avg_logprob": -0.07780434345376902, "compression_ratio": 1.9087301587301588, "no_speech_prob": 0.007576427888125181}, {"id": 211, "seek": 127732, "start": 1285.6399999999999, "end": 1290.36, "text": " second component. We ignore the second component on the input vectors. We do the rising diagonal", "tokens": [50780, 1150, 6542, 13, 492, 11200, 264, 1150, 6542, 322, 264, 4846, 18875, 13, 492, 360, 264, 11636, 21539, 51016], "temperature": 0.0, "avg_logprob": -0.07780434345376902, "compression_ratio": 1.9087301587301588, "no_speech_prob": 0.007576427888125181}, {"id": 212, "seek": 127732, "start": 1290.36, "end": 1297.24, "text": " one times three and subtract the falling diagonal two times minus one. So what have we got? We've", "tokens": [51016, 472, 1413, 1045, 293, 16390, 264, 7440, 21539, 732, 1413, 3175, 472, 13, 407, 437, 362, 321, 658, 30, 492, 600, 51360], "temperature": 0.0, "avg_logprob": -0.07780434345376902, "compression_ratio": 1.9087301587301588, "no_speech_prob": 0.007576427888125181}, {"id": 213, "seek": 127732, "start": 1297.24, "end": 1305.72, "text": " got three here minus minus two and so that's going to give us five and then finally the third component", "tokens": [51360, 658, 1045, 510, 3175, 3175, 732, 293, 370, 300, 311, 516, 281, 976, 505, 1732, 293, 550, 2721, 264, 2636, 6542, 51784], "temperature": 0.0, "avg_logprob": -0.07780434345376902, "compression_ratio": 1.9087301587301588, "no_speech_prob": 0.007576427888125181}, {"id": 214, "seek": 130572, "start": 1305.8, "end": 1310.1200000000001, "text": " ignore the third component of the input vectors. Do the falling diagonal. Two times seven seven", "tokens": [50368, 11200, 264, 2636, 6542, 295, 264, 4846, 18875, 13, 1144, 264, 7440, 21539, 13, 4453, 1413, 3407, 3407, 50584], "temperature": 0.0, "avg_logprob": -0.13529299664241012, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0136339720338583}, {"id": 215, "seek": 130572, "start": 1310.1200000000001, "end": 1315.56, "text": " two is a fourteen. Subtract the rising diagonal three three's a nine. So we're going to have", "tokens": [50584, 732, 307, 257, 32253, 13, 8511, 83, 1897, 264, 11636, 21539, 1045, 1045, 311, 257, 4949, 13, 407, 321, 434, 516, 281, 362, 50856], "temperature": 0.0, "avg_logprob": -0.13529299664241012, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0136339720338583}, {"id": 216, "seek": 130572, "start": 1316.52, "end": 1323.64, "text": " for our final component fourteen minus nine which is another five. So that's quite a simple", "tokens": [50904, 337, 527, 2572, 6542, 32253, 3175, 4949, 597, 307, 1071, 1732, 13, 407, 300, 311, 1596, 257, 2199, 51260], "temperature": 0.0, "avg_logprob": -0.13529299664241012, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0136339720338583}, {"id": 217, "seek": 130572, "start": 1323.64, "end": 1329.8, "text": " vector. It has a common factor of five in there if we wanted to write it out that way. Now let's", "tokens": [51260, 8062, 13, 467, 575, 257, 2689, 5952, 295, 1732, 294, 456, 498, 321, 1415, 281, 2464, 309, 484, 300, 636, 13, 823, 718, 311, 51568], "temperature": 0.0, "avg_logprob": -0.13529299664241012, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.0136339720338583}, {"id": 218, "seek": 132980, "start": 1329.8, "end": 1338.04, "text": " test that guy versus the a and b vectors to see if it passes our test or have we made a slip.", "tokens": [50364, 1500, 300, 2146, 5717, 264, 257, 293, 272, 18875, 281, 536, 498, 309, 11335, 527, 1500, 420, 362, 321, 1027, 257, 11140, 13, 50776], "temperature": 0.0, "avg_logprob": -0.09081907003698214, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.014954051934182644}, {"id": 219, "seek": 132980, "start": 1339.08, "end": 1345.0, "text": " So let's just be completely explicit about that. We're going to start by testing the dot product", "tokens": [50828, 407, 718, 311, 445, 312, 2584, 13691, 466, 300, 13, 492, 434, 516, 281, 722, 538, 4997, 264, 5893, 1674, 51124], "temperature": 0.0, "avg_logprob": -0.09081907003698214, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.014954051934182644}, {"id": 220, "seek": 132980, "start": 1345.6399999999999, "end": 1352.6, "text": " of the vector a with our hopefully correct cross product c. I'll write it out two three one", "tokens": [51156, 295, 264, 8062, 257, 365, 527, 4696, 3006, 3278, 1674, 269, 13, 286, 603, 2464, 309, 484, 732, 1045, 472, 51504], "temperature": 0.0, "avg_logprob": -0.09081907003698214, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.014954051934182644}, {"id": 221, "seek": 135260, "start": 1353.3999999999999, "end": 1359.1599999999999, "text": " dot product minus ten five five. What's that going to be equal to minus twenty", "tokens": [50404, 5893, 1674, 3175, 2064, 1732, 1732, 13, 708, 311, 300, 516, 281, 312, 2681, 281, 3175, 7699, 50692], "temperature": 0.0, "avg_logprob": -0.10899869191277888, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.07917861640453339}, {"id": 222, "seek": 135260, "start": 1359.8, "end": 1365.3999999999999, "text": " and then three fives of fifteen and then one five is five. Aha! It does equal zero. That's", "tokens": [50724, 293, 550, 1045, 283, 1539, 295, 18126, 293, 550, 472, 1732, 307, 1732, 13, 27448, 0, 467, 775, 2681, 4018, 13, 663, 311, 51004], "temperature": 0.0, "avg_logprob": -0.10899869191277888, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.07917861640453339}, {"id": 223, "seek": 135260, "start": 1365.3999999999999, "end": 1370.6, "text": " correct. That's a very very encouraging thing but for real thoroughness we're going to test the other", "tokens": [51004, 3006, 13, 663, 311, 257, 588, 588, 14580, 551, 457, 337, 957, 12934, 1287, 321, 434, 516, 281, 1500, 264, 661, 51264], "temperature": 0.0, "avg_logprob": -0.10899869191277888, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.07917861640453339}, {"id": 224, "seek": 135260, "start": 1370.6, "end": 1377.8799999999999, "text": " one as well. So this is b dot c. Let's check that out. So that's three seven minus one dotted with", "tokens": [51264, 472, 382, 731, 13, 407, 341, 307, 272, 5893, 269, 13, 961, 311, 1520, 300, 484, 13, 407, 300, 311, 1045, 3407, 3175, 472, 37459, 365, 51628], "temperature": 0.0, "avg_logprob": -0.10899869191277888, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.07917861640453339}, {"id": 225, "seek": 137788, "start": 1377.88, "end": 1384.3600000000001, "text": " again minus ten five five. This time it's going to be minus uh minus thirty from three times minus", "tokens": [50364, 797, 3175, 2064, 1732, 1732, 13, 639, 565, 309, 311, 516, 281, 312, 3175, 2232, 3175, 11790, 490, 1045, 1413, 3175, 50688], "temperature": 0.0, "avg_logprob": -0.08123776064080707, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.0028892201371490955}, {"id": 226, "seek": 137788, "start": 1384.3600000000001, "end": 1390.6000000000001, "text": " ten and then seven fives of thirty five but then minus five from the last element zero again. Aha!", "tokens": [50688, 2064, 293, 550, 3407, 283, 1539, 295, 11790, 1732, 457, 550, 3175, 1732, 490, 264, 1036, 4478, 4018, 797, 13, 27448, 0, 51000], "temperature": 0.0, "avg_logprob": -0.08123776064080707, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.0028892201371490955}, {"id": 227, "seek": 137788, "start": 1390.6000000000001, "end": 1395.3200000000002, "text": " So it has in fact passed both of our tests and we're now very confident that's correct.", "tokens": [51000, 407, 309, 575, 294, 1186, 4678, 1293, 295, 527, 6921, 293, 321, 434, 586, 588, 6679, 300, 311, 3006, 13, 51236], "temperature": 0.0, "avg_logprob": -0.08123776064080707, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.0028892201371490955}, {"id": 228, "seek": 137788, "start": 1395.3200000000002, "end": 1400.44, "text": " This is a great test to do. One word of warning though the one thing it won't pick up is if you've", "tokens": [51236, 639, 307, 257, 869, 1500, 281, 360, 13, 1485, 1349, 295, 9164, 1673, 264, 472, 551, 309, 1582, 380, 1888, 493, 307, 498, 291, 600, 51492], "temperature": 0.0, "avg_logprob": -0.08123776064080707, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.0028892201371490955}, {"id": 229, "seek": 137788, "start": 1400.44, "end": 1405.5600000000002, "text": " done your rising and falling diagonals in exactly the wrong way around by starting with the wrong", "tokens": [51492, 1096, 428, 11636, 293, 7440, 17405, 1124, 294, 2293, 264, 2085, 636, 926, 538, 2891, 365, 264, 2085, 51748], "temperature": 0.0, "avg_logprob": -0.08123776064080707, "compression_ratio": 1.7275985663082438, "no_speech_prob": 0.0028892201371490955}, {"id": 230, "seek": 140556, "start": 1405.56, "end": 1412.9199999999998, "text": " pattern. So do remember the VNV pattern and this test will check for any particular slips in your", "tokens": [50364, 5102, 13, 407, 360, 1604, 264, 691, 45, 53, 5102, 293, 341, 1500, 486, 1520, 337, 604, 1729, 44690, 294, 428, 50732], "temperature": 0.0, "avg_logprob": -0.08994714249955847, "compression_ratio": 1.7366071428571428, "no_speech_prob": 0.005294575355947018}, {"id": 231, "seek": 140556, "start": 1412.9199999999998, "end": 1421.8, "text": " multiplications and that's the end of the video. Okay so in this short video I'm just going to look", "tokens": [50732, 17596, 763, 293, 300, 311, 264, 917, 295, 264, 960, 13, 1033, 370, 294, 341, 2099, 960, 286, 478, 445, 516, 281, 574, 51176], "temperature": 0.0, "avg_logprob": -0.08994714249955847, "compression_ratio": 1.7366071428571428, "no_speech_prob": 0.005294575355947018}, {"id": 232, "seek": 140556, "start": 1421.8, "end": 1427.08, "text": " at four more examples of the cross product for practice and here they are. Okay so here's the", "tokens": [51176, 412, 1451, 544, 5110, 295, 264, 3278, 1674, 337, 3124, 293, 510, 436, 366, 13, 1033, 370, 510, 311, 264, 51440], "temperature": 0.0, "avg_logprob": -0.08994714249955847, "compression_ratio": 1.7366071428571428, "no_speech_prob": 0.005294575355947018}, {"id": 233, "seek": 140556, "start": 1427.08, "end": 1433.0, "text": " first one. We want the first element of this cross product so we ignore the first elements of the", "tokens": [51440, 700, 472, 13, 492, 528, 264, 700, 4478, 295, 341, 3278, 1674, 370, 321, 11200, 264, 700, 4959, 295, 264, 51736], "temperature": 0.0, "avg_logprob": -0.08994714249955847, "compression_ratio": 1.7366071428571428, "no_speech_prob": 0.005294575355947018}, {"id": 234, "seek": 143300, "start": 1433.0, "end": 1439.24, "text": " two source vectors. We do the falling diagonal three times zero that's zero and we subtract the", "tokens": [50364, 732, 4009, 18875, 13, 492, 360, 264, 7440, 21539, 1045, 1413, 4018, 300, 311, 4018, 293, 321, 16390, 264, 50676], "temperature": 0.0, "avg_logprob": -0.10629399006183331, "compression_ratio": 2.1448598130841123, "no_speech_prob": 0.002600898966193199}, {"id": 235, "seek": 143300, "start": 1439.24, "end": 1444.2, "text": " rising diagonal seven times minus one that is minus seven so we're subtracting minus seven", "tokens": [50676, 11636, 21539, 3407, 1413, 3175, 472, 300, 307, 3175, 3407, 370, 321, 434, 16390, 278, 3175, 3407, 50924], "temperature": 0.0, "avg_logprob": -0.10629399006183331, "compression_ratio": 2.1448598130841123, "no_speech_prob": 0.002600898966193199}, {"id": 236, "seek": 143300, "start": 1444.2, "end": 1449.56, "text": " that means we'll get plus seven. So the first element here is in the seven. Okay so now we", "tokens": [50924, 300, 1355, 321, 603, 483, 1804, 3407, 13, 407, 264, 700, 4478, 510, 307, 294, 264, 3407, 13, 1033, 370, 586, 321, 51192], "temperature": 0.0, "avg_logprob": -0.10629399006183331, "compression_ratio": 2.1448598130841123, "no_speech_prob": 0.002600898966193199}, {"id": 237, "seek": 143300, "start": 1449.56, "end": 1453.64, "text": " want the second element that means we ignore the second element of the two source vectors.", "tokens": [51192, 528, 264, 1150, 4478, 300, 1355, 321, 11200, 264, 1150, 4478, 295, 264, 732, 4009, 18875, 13, 51396], "temperature": 0.0, "avg_logprob": -0.10629399006183331, "compression_ratio": 2.1448598130841123, "no_speech_prob": 0.002600898966193199}, {"id": 238, "seek": 143300, "start": 1453.64, "end": 1458.92, "text": " We do however the rising diagonal first seven two is fourteen minus one times zero is zero", "tokens": [51396, 492, 360, 4461, 264, 11636, 21539, 700, 3407, 732, 307, 32253, 3175, 472, 1413, 4018, 307, 4018, 51660], "temperature": 0.0, "avg_logprob": -0.10629399006183331, "compression_ratio": 2.1448598130841123, "no_speech_prob": 0.002600898966193199}, {"id": 239, "seek": 145892, "start": 1458.92, "end": 1464.28, "text": " so that's fourteen. So the second one was the rising diagonal first if you follow me", "tokens": [50364, 370, 300, 311, 32253, 13, 407, 264, 1150, 472, 390, 264, 11636, 21539, 700, 498, 291, 1524, 385, 50632], "temperature": 0.0, "avg_logprob": -0.08997273445129395, "compression_ratio": 1.8357487922705313, "no_speech_prob": 0.0012609352124854922}, {"id": 240, "seek": 145892, "start": 1464.28, "end": 1468.8400000000001, "text": " and then finally to get the third component we ignore the third component of the source vectors", "tokens": [50632, 293, 550, 2721, 281, 483, 264, 2636, 6542, 321, 11200, 264, 2636, 6542, 295, 264, 4009, 18875, 50860], "temperature": 0.0, "avg_logprob": -0.08997273445129395, "compression_ratio": 1.8357487922705313, "no_speech_prob": 0.0012609352124854922}, {"id": 241, "seek": 145892, "start": 1468.8400000000001, "end": 1475.4, "text": " and we do the falling diagonal one times minus one is minus one minus three two six so that is minus", "tokens": [50860, 293, 321, 360, 264, 7440, 21539, 472, 1413, 3175, 472, 307, 3175, 472, 3175, 1045, 732, 2309, 370, 300, 307, 3175, 51188], "temperature": 0.0, "avg_logprob": -0.08997273445129395, "compression_ratio": 1.8357487922705313, "no_speech_prob": 0.0012609352124854922}, {"id": 242, "seek": 145892, "start": 1475.4, "end": 1484.6000000000001, "text": " seven. Okay so there's our solution seven fourteen minus seven but is that correct or have we made", "tokens": [51188, 3407, 13, 1033, 370, 456, 311, 527, 3827, 3407, 32253, 3175, 3407, 457, 307, 300, 3006, 420, 362, 321, 1027, 51648], "temperature": 0.0, "avg_logprob": -0.08997273445129395, "compression_ratio": 1.8357487922705313, "no_speech_prob": 0.0012609352124854922}, {"id": 243, "seek": 148460, "start": 1485.56, "end": 1491.08, "text": " a slip? It's a good time to check the old dot product trick so if we call this A cross B equals", "tokens": [50412, 257, 11140, 30, 467, 311, 257, 665, 565, 281, 1520, 264, 1331, 5893, 1674, 4282, 370, 498, 321, 818, 341, 316, 3278, 363, 6915, 50688], "temperature": 0.0, "avg_logprob": -0.12644106766273236, "compression_ratio": 1.9789915966386555, "no_speech_prob": 0.1537051498889923}, {"id": 244, "seek": 148460, "start": 1491.08, "end": 1495.9599999999998, "text": " C then we should find that if we do the dot product of one of the input vectors say B", "tokens": [50688, 383, 550, 321, 820, 915, 300, 498, 321, 360, 264, 5893, 1674, 295, 472, 295, 264, 4846, 18875, 584, 363, 50932], "temperature": 0.0, "avg_logprob": -0.12644106766273236, "compression_ratio": 1.9789915966386555, "no_speech_prob": 0.1537051498889923}, {"id": 245, "seek": 148460, "start": 1495.9599999999998, "end": 1500.6, "text": " with C then it should be zero. Let's check that seven twos are fourteen minus one times fourteen", "tokens": [50932, 365, 383, 550, 309, 820, 312, 4018, 13, 961, 311, 1520, 300, 3407, 683, 329, 366, 32253, 3175, 472, 1413, 32253, 51164], "temperature": 0.0, "avg_logprob": -0.12644106766273236, "compression_ratio": 1.9789915966386555, "no_speech_prob": 0.1537051498889923}, {"id": 246, "seek": 148460, "start": 1500.6, "end": 1505.24, "text": " is minus fourteen zero times minus seven is zero so that's fourteen minus fourteen it's correct", "tokens": [51164, 307, 3175, 32253, 4018, 1413, 3175, 3407, 307, 4018, 370, 300, 311, 32253, 3175, 32253, 309, 311, 3006, 51396], "temperature": 0.0, "avg_logprob": -0.12644106766273236, "compression_ratio": 1.9789915966386555, "no_speech_prob": 0.1537051498889923}, {"id": 247, "seek": 148460, "start": 1505.24, "end": 1511.3999999999999, "text": " let's do the other one it's harder so one times seven is seven three times fourteen is forty two", "tokens": [51396, 718, 311, 360, 264, 661, 472, 309, 311, 6081, 370, 472, 1413, 3407, 307, 3407, 1045, 1413, 32253, 307, 15815, 732, 51704], "temperature": 0.0, "avg_logprob": -0.12644106766273236, "compression_ratio": 1.9789915966386555, "no_speech_prob": 0.1537051498889923}, {"id": 248, "seek": 151140, "start": 1511.4, "end": 1518.44, "text": " that's forty nine in total and then the final term here seven sevens are forty nine but that", "tokens": [50364, 300, 311, 15815, 4949, 294, 3217, 293, 550, 264, 2572, 1433, 510, 3407, 3407, 82, 366, 15815, 4949, 457, 300, 50716], "temperature": 0.0, "avg_logprob": -0.06797830601955981, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.007573246490210295}, {"id": 249, "seek": 151140, "start": 1518.44, "end": 1525.3200000000002, "text": " was with a minus number so we've got in fact forty nine minus forty nine is zero so another one of", "tokens": [50716, 390, 365, 257, 3175, 1230, 370, 321, 600, 658, 294, 1186, 15815, 4949, 3175, 15815, 4949, 307, 4018, 370, 1071, 472, 295, 51060], "temperature": 0.0, "avg_logprob": -0.06797830601955981, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.007573246490210295}, {"id": 250, "seek": 151140, "start": 1525.3200000000002, "end": 1534.8400000000001, "text": " those dot products is correctly zero so what we found out is that A dot C and B dot C are both", "tokens": [51060, 729, 5893, 3383, 307, 8944, 4018, 370, 437, 321, 1352, 484, 307, 300, 316, 5893, 383, 293, 363, 5893, 383, 366, 1293, 51536], "temperature": 0.0, "avg_logprob": -0.06797830601955981, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.007573246490210295}, {"id": 251, "seek": 151140, "start": 1534.8400000000001, "end": 1540.0400000000002, "text": " equal to zero as they must be so we're now very confident that we have the right cross product", "tokens": [51536, 2681, 281, 4018, 382, 436, 1633, 312, 370, 321, 434, 586, 588, 6679, 300, 321, 362, 264, 558, 3278, 1674, 51796], "temperature": 0.0, "avg_logprob": -0.06797830601955981, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.007573246490210295}, {"id": 252, "seek": 154004, "start": 1540.36, "end": 1547.6399999999999, "text": " let's do another one okay so we're going to want the first element so we ignore the first element", "tokens": [50380, 718, 311, 360, 1071, 472, 1392, 370, 321, 434, 516, 281, 528, 264, 700, 4478, 370, 321, 11200, 264, 700, 4478, 50744], "temperature": 0.0, "avg_logprob": -0.1113985864739669, "compression_ratio": 2.010204081632653, "no_speech_prob": 0.0036424309946596622}, {"id": 253, "seek": 154004, "start": 1547.6399999999999, "end": 1555.32, "text": " of the two source vectors and we do eight threes eight threes are twenty four minus two two times", "tokens": [50744, 295, 264, 732, 4009, 18875, 293, 321, 360, 3180, 258, 4856, 3180, 258, 4856, 366, 7699, 1451, 3175, 732, 732, 1413, 51128], "temperature": 0.0, "avg_logprob": -0.1113985864739669, "compression_ratio": 2.010204081632653, "no_speech_prob": 0.0036424309946596622}, {"id": 254, "seek": 154004, "start": 1555.32, "end": 1559.96, "text": " one is two so that's twenty two let's do the next element so we ignore the middle elements and we", "tokens": [51128, 472, 307, 732, 370, 300, 311, 7699, 732, 718, 311, 360, 264, 958, 4478, 370, 321, 11200, 264, 2808, 4959, 293, 321, 51360], "temperature": 0.0, "avg_logprob": -0.1113985864739669, "compression_ratio": 2.010204081632653, "no_speech_prob": 0.0036424309946596622}, {"id": 255, "seek": 154004, "start": 1559.96, "end": 1565.8799999999999, "text": " do the rising diagonal four twos are eight minus eight that's just going to be zero and then finally", "tokens": [51360, 360, 264, 11636, 21539, 1451, 683, 329, 366, 3180, 3175, 3180, 300, 311, 445, 516, 281, 312, 4018, 293, 550, 2721, 51656], "temperature": 0.0, "avg_logprob": -0.1113985864739669, "compression_ratio": 2.010204081632653, "no_speech_prob": 0.0036424309946596622}, {"id": 256, "seek": 156588, "start": 1565.88, "end": 1571.24, "text": " we ignore the bottom elements and we do the falling diagonal minus the rising diagonal one minus", "tokens": [50364, 321, 11200, 264, 2767, 4959, 293, 321, 360, 264, 7440, 21539, 3175, 264, 11636, 21539, 472, 3175, 50632], "temperature": 0.0, "avg_logprob": -0.0657977401663404, "compression_ratio": 1.9477911646586346, "no_speech_prob": 0.005375147331506014}, {"id": 257, "seek": 156588, "start": 1571.24, "end": 1578.0400000000002, "text": " twelve is minus eleven so there's our solution twenty two zero minus eleven we notice we could", "tokens": [50632, 14390, 307, 3175, 21090, 370, 456, 311, 527, 3827, 7699, 732, 4018, 3175, 21090, 321, 3449, 321, 727, 50972], "temperature": 0.0, "avg_logprob": -0.0657977401663404, "compression_ratio": 1.9477911646586346, "no_speech_prob": 0.005375147331506014}, {"id": 258, "seek": 156588, "start": 1578.0400000000002, "end": 1582.8400000000001, "text": " take eleven out of that as a common factor it would make the next stage very easy but let's just", "tokens": [50972, 747, 21090, 484, 295, 300, 382, 257, 2689, 5952, 309, 576, 652, 264, 958, 3233, 588, 1858, 457, 718, 311, 445, 51212], "temperature": 0.0, "avg_logprob": -0.0657977401663404, "compression_ratio": 1.9477911646586346, "no_speech_prob": 0.005375147331506014}, {"id": 259, "seek": 156588, "start": 1583.4, "end": 1589.0800000000002, "text": " let's do it the hard way and do the dot product so four times twenty two is eighty eight one times", "tokens": [51240, 718, 311, 360, 309, 264, 1152, 636, 293, 360, 264, 5893, 1674, 370, 1451, 1413, 7699, 732, 307, 26348, 3180, 472, 1413, 51524], "temperature": 0.0, "avg_logprob": -0.0657977401663404, "compression_ratio": 1.9477911646586346, "no_speech_prob": 0.005375147331506014}, {"id": 260, "seek": 156588, "start": 1589.0800000000002, "end": 1593.8000000000002, "text": " zero zero and minus eighty eight actually pretty easy to confirm that zero let's do the other one", "tokens": [51524, 4018, 4018, 293, 3175, 26348, 3180, 767, 1238, 1858, 281, 9064, 300, 4018, 718, 311, 360, 264, 661, 472, 51760], "temperature": 0.0, "avg_logprob": -0.0657977401663404, "compression_ratio": 1.9477911646586346, "no_speech_prob": 0.005375147331506014}, {"id": 261, "seek": 159380, "start": 1593.8, "end": 1600.2, "text": " one times twenty two is twenty two three times zero and again two times uh minus eleven again zero", "tokens": [50364, 472, 1413, 7699, 732, 307, 7699, 732, 1045, 1413, 4018, 293, 797, 732, 1413, 2232, 3175, 21090, 797, 4018, 50684], "temperature": 0.0, "avg_logprob": -0.08268884357653167, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.002507844939827919}, {"id": 262, "seek": 159380, "start": 1600.2, "end": 1607.24, "text": " so that's fine that one's past its checks as well on to the third one okay so um this time I think", "tokens": [50684, 370, 300, 311, 2489, 300, 472, 311, 1791, 1080, 13834, 382, 731, 322, 281, 264, 2636, 472, 1392, 370, 1105, 341, 565, 286, 519, 51036], "temperature": 0.0, "avg_logprob": -0.08268884357653167, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.002507844939827919}, {"id": 263, "seek": 159380, "start": 1607.24, "end": 1612.6, "text": " I might take a common factor out just to show us doing that because I see that this twenty five", "tokens": [51036, 286, 1062, 747, 257, 2689, 5952, 484, 445, 281, 855, 505, 884, 300, 570, 286, 536, 300, 341, 7699, 1732, 51304], "temperature": 0.0, "avg_logprob": -0.08268884357653167, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.002507844939827919}, {"id": 264, "seek": 159380, "start": 1612.6, "end": 1618.12, "text": " five fifteen chap is going to lead to some pretty big numbers but maybe I don't need to do that I", "tokens": [51304, 1732, 18126, 13223, 307, 516, 281, 1477, 281, 512, 1238, 955, 3547, 457, 1310, 286, 500, 380, 643, 281, 360, 300, 286, 51580], "temperature": 0.0, "avg_logprob": -0.08268884357653167, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.002507844939827919}, {"id": 265, "seek": 161812, "start": 1618.12, "end": 1623.32, "text": " can just take the common factor of five out of the first vector we're calling it vector a so that's", "tokens": [50364, 393, 445, 747, 264, 2689, 5952, 295, 1732, 484, 295, 264, 700, 8062, 321, 434, 5141, 309, 8062, 257, 370, 300, 311, 50624], "temperature": 0.0, "avg_logprob": -0.0764080891843702, "compression_ratio": 2.0944206008583692, "no_speech_prob": 0.006791430991142988}, {"id": 266, "seek": 161812, "start": 1623.32, "end": 1629.4799999999998, "text": " just five one minus three and then I go ahead and write vector b which can't be simplified it's just", "tokens": [50624, 445, 1732, 472, 3175, 1045, 293, 550, 286, 352, 2286, 293, 2464, 8062, 272, 597, 393, 380, 312, 26335, 309, 311, 445, 50932], "temperature": 0.0, "avg_logprob": -0.0764080891843702, "compression_ratio": 2.0944206008583692, "no_speech_prob": 0.006791430991142988}, {"id": 267, "seek": 161812, "start": 1629.4799999999998, "end": 1635.08, "text": " one three minus two we'll do this cross cross pod excuse me we'll do this cross product and then", "tokens": [50932, 472, 1045, 3175, 732, 321, 603, 360, 341, 3278, 3278, 2497, 8960, 385, 321, 603, 360, 341, 3278, 1674, 293, 550, 51212], "temperature": 0.0, "avg_logprob": -0.0764080891843702, "compression_ratio": 2.0944206008583692, "no_speech_prob": 0.006791430991142988}, {"id": 268, "seek": 161812, "start": 1635.08, "end": 1640.76, "text": " we'll put the factor of five in at the end that's fine to do it that way around okay so let's go", "tokens": [51212, 321, 603, 829, 264, 5952, 295, 1732, 294, 412, 264, 917, 300, 311, 2489, 281, 360, 309, 300, 636, 926, 1392, 370, 718, 311, 352, 51496], "temperature": 0.0, "avg_logprob": -0.0764080891843702, "compression_ratio": 2.0944206008583692, "no_speech_prob": 0.006791430991142988}, {"id": 269, "seek": 161812, "start": 1640.76, "end": 1645.8799999999999, "text": " ahead and write that out there's our factor of five and here's our cross product so the first", "tokens": [51496, 2286, 293, 2464, 300, 484, 456, 311, 527, 5952, 295, 1732, 293, 510, 311, 527, 3278, 1674, 370, 264, 700, 51752], "temperature": 0.0, "avg_logprob": -0.0764080891843702, "compression_ratio": 2.0944206008583692, "no_speech_prob": 0.006791430991142988}, {"id": 270, "seek": 164588, "start": 1645.88, "end": 1649.88, "text": " element of our cross product we ignore the first elements of the two source vectors we do the falling", "tokens": [50364, 4478, 295, 527, 3278, 1674, 321, 11200, 264, 700, 4959, 295, 264, 732, 4009, 18875, 321, 360, 264, 7440, 50564], "temperature": 0.0, "avg_logprob": -0.04391663604312473, "compression_ratio": 2.370731707317073, "no_speech_prob": 0.040817081928253174}, {"id": 271, "seek": 164588, "start": 1649.88, "end": 1655.0, "text": " diagonal that gives us a minus two we subtract the rising diagonal that's a minus nine so that's", "tokens": [50564, 21539, 300, 2709, 505, 257, 3175, 732, 321, 16390, 264, 11636, 21539, 300, 311, 257, 3175, 4949, 370, 300, 311, 50820], "temperature": 0.0, "avg_logprob": -0.04391663604312473, "compression_ratio": 2.370731707317073, "no_speech_prob": 0.040817081928253174}, {"id": 272, "seek": 164588, "start": 1655.0, "end": 1661.48, "text": " minus two plus nine that's going to give us a seven and now the middle element we ignore the", "tokens": [50820, 3175, 732, 1804, 4949, 300, 311, 516, 281, 976, 505, 257, 3407, 293, 586, 264, 2808, 4478, 321, 11200, 264, 51144], "temperature": 0.0, "avg_logprob": -0.04391663604312473, "compression_ratio": 2.370731707317073, "no_speech_prob": 0.040817081928253174}, {"id": 273, "seek": 164588, "start": 1661.48, "end": 1666.0400000000002, "text": " middle elements on the two source vectors we do the rising diagonal this time gives us minus three", "tokens": [51144, 2808, 4959, 322, 264, 732, 4009, 18875, 321, 360, 264, 11636, 21539, 341, 565, 2709, 505, 3175, 1045, 51372], "temperature": 0.0, "avg_logprob": -0.04391663604312473, "compression_ratio": 2.370731707317073, "no_speech_prob": 0.040817081928253174}, {"id": 274, "seek": 164588, "start": 1666.0400000000002, "end": 1671.24, "text": " we subtract the falling diagonal that gives us minus uh ten which means we're gonna have to add", "tokens": [51372, 321, 16390, 264, 7440, 21539, 300, 2709, 505, 3175, 2232, 2064, 597, 1355, 321, 434, 799, 362, 281, 909, 51632], "temperature": 0.0, "avg_logprob": -0.04391663604312473, "compression_ratio": 2.370731707317073, "no_speech_prob": 0.040817081928253174}, {"id": 275, "seek": 167124, "start": 1671.24, "end": 1678.04, "text": " on ten so that's minus three plus ten it's another seven okay and then finally the third element we", "tokens": [50364, 322, 2064, 370, 300, 311, 3175, 1045, 1804, 2064, 309, 311, 1071, 3407, 1392, 293, 550, 2721, 264, 2636, 4478, 321, 50704], "temperature": 0.0, "avg_logprob": -0.08217501896683888, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.010972675867378712}, {"id": 276, "seek": 167124, "start": 1678.04, "end": 1683.88, "text": " ignore the third elements on the source vector we do the falling diagonal that's five threes of 15", "tokens": [50704, 11200, 264, 2636, 4959, 322, 264, 4009, 8062, 321, 360, 264, 7440, 21539, 300, 311, 1732, 258, 4856, 295, 2119, 50996], "temperature": 0.0, "avg_logprob": -0.08217501896683888, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.010972675867378712}, {"id": 277, "seek": 167124, "start": 1683.88, "end": 1690.36, "text": " and we subtract the rising diagonal one that's going to give us another uh a 14 so in fact a", "tokens": [50996, 293, 321, 16390, 264, 11636, 21539, 472, 300, 311, 516, 281, 976, 505, 1071, 2232, 257, 3499, 370, 294, 1186, 257, 51320], "temperature": 0.0, "avg_logprob": -0.08217501896683888, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.010972675867378712}, {"id": 278, "seek": 167124, "start": 1690.36, "end": 1696.1200000000001, "text": " really simple vector here because we could take out a factor of seven if we want to but um let's", "tokens": [51320, 534, 2199, 8062, 510, 570, 321, 727, 747, 484, 257, 5952, 295, 3407, 498, 321, 528, 281, 457, 1105, 718, 311, 51608], "temperature": 0.0, "avg_logprob": -0.08217501896683888, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.010972675867378712}, {"id": 279, "seek": 169612, "start": 1696.12, "end": 1701.6399999999999, "text": " check those dot products do it before or after we take out the factor of seven it's pretty easy", "tokens": [50364, 1520, 729, 5893, 3383, 360, 309, 949, 420, 934, 321, 747, 484, 264, 5952, 295, 3407, 309, 311, 1238, 1858, 50640], "temperature": 0.0, "avg_logprob": -0.08180450083135249, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.033038847148418427}, {"id": 280, "seek": 169612, "start": 1702.36, "end": 1709.08, "text": " that's going to be uh four times seven minus uh and minus two times 14 yes that goes to zero", "tokens": [50676, 300, 311, 516, 281, 312, 2232, 1451, 1413, 3407, 3175, 2232, 293, 3175, 732, 1413, 3499, 2086, 300, 1709, 281, 4018, 51012], "temperature": 0.0, "avg_logprob": -0.08180450083135249, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.033038847148418427}, {"id": 281, "seek": 169612, "start": 1709.08, "end": 1719.32, "text": " let's do this one just quickly uh 35 and another seven is 42 but minus three times 14 is exactly", "tokens": [51012, 718, 311, 360, 341, 472, 445, 2661, 2232, 6976, 293, 1071, 3407, 307, 14034, 457, 3175, 1045, 1413, 3499, 307, 2293, 51524], "temperature": 0.0, "avg_logprob": -0.08180450083135249, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.033038847148418427}, {"id": 282, "seek": 169612, "start": 1719.32, "end": 1725.08, "text": " minus 42 so that one is also satisfied we've passed our checks that looks pretty good we can", "tokens": [51524, 3175, 14034, 370, 300, 472, 307, 611, 11239, 321, 600, 4678, 527, 13834, 300, 1542, 1238, 665, 321, 393, 51812], "temperature": 0.0, "avg_logprob": -0.08180450083135249, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.033038847148418427}, {"id": 283, "seek": 172508, "start": 1725.08, "end": 1731.72, "text": " leave it like this or if we want we can take out that factor of seven and do 35 times one one two", "tokens": [50364, 1856, 309, 411, 341, 420, 498, 321, 528, 321, 393, 747, 484, 300, 5952, 295, 3407, 293, 360, 6976, 1413, 472, 472, 732, 50696], "temperature": 0.0, "avg_logprob": -0.058245278206192144, "compression_ratio": 1.8131868131868132, "no_speech_prob": 0.0010155928321182728}, {"id": 284, "seek": 172508, "start": 1731.72, "end": 1737.48, "text": " very simple very nice uh vector there okay let's come here uh now come down to the bottom and look", "tokens": [50696, 588, 2199, 588, 1481, 2232, 8062, 456, 1392, 718, 311, 808, 510, 2232, 586, 808, 760, 281, 264, 2767, 293, 574, 50984], "temperature": 0.0, "avg_logprob": -0.058245278206192144, "compression_ratio": 1.8131868131868132, "no_speech_prob": 0.0010155928321182728}, {"id": 285, "seek": 172508, "start": 1737.48, "end": 1742.4399999999998, "text": " at the final one we notice is actually the cross product of a vector with itself it's the same vector", "tokens": [50984, 412, 264, 2572, 472, 321, 3449, 307, 767, 264, 3278, 1674, 295, 257, 8062, 365, 2564, 309, 311, 264, 912, 8062, 51232], "temperature": 0.0, "avg_logprob": -0.058245278206192144, "compression_ratio": 1.8131868131868132, "no_speech_prob": 0.0010155928321182728}, {"id": 286, "seek": 172508, "start": 1742.4399999999998, "end": 1747.56, "text": " here so what are we going to get well we can just easily enough work it out we ignore the first two", "tokens": [51232, 510, 370, 437, 366, 321, 516, 281, 483, 731, 321, 393, 445, 3612, 1547, 589, 309, 484, 321, 11200, 264, 700, 732, 51488], "temperature": 0.0, "avg_logprob": -0.058245278206192144, "compression_ratio": 1.8131868131868132, "no_speech_prob": 0.0010155928321182728}, {"id": 287, "seek": 172508, "start": 1747.56, "end": 1753.32, "text": " elements and we do four um two times minus four and minus four times two so it's something minus", "tokens": [51488, 4959, 293, 321, 360, 1451, 1105, 732, 1413, 3175, 1451, 293, 3175, 1451, 1413, 732, 370, 309, 311, 746, 3175, 51776], "temperature": 0.0, "avg_logprob": -0.058245278206192144, "compression_ratio": 1.8131868131868132, "no_speech_prob": 0.0010155928321182728}, {"id": 288, "seek": 175332, "start": 1753.32, "end": 1759.6399999999999, "text": " itself that's just going to give us a zero obviously and uh let's keep going if we ignore the middle", "tokens": [50364, 2564, 300, 311, 445, 516, 281, 976, 505, 257, 4018, 2745, 293, 2232, 718, 311, 1066, 516, 498, 321, 11200, 264, 2808, 50680], "temperature": 0.0, "avg_logprob": -0.048088481691148544, "compression_ratio": 1.8823529411764706, "no_speech_prob": 0.01098077092319727}, {"id": 289, "seek": 175332, "start": 1759.6399999999999, "end": 1765.3999999999999, "text": " terms and do the rising diagonal minus the falling diagonal again threes and minus fours the same", "tokens": [50680, 2115, 293, 360, 264, 11636, 21539, 3175, 264, 7440, 21539, 797, 258, 4856, 293, 3175, 1451, 82, 264, 912, 50968], "temperature": 0.0, "avg_logprob": -0.048088481691148544, "compression_ratio": 1.8823529411764706, "no_speech_prob": 0.01098077092319727}, {"id": 290, "seek": 175332, "start": 1765.3999999999999, "end": 1771.32, "text": " product so something minus itself zero and it's going to be the same for the final element so", "tokens": [50968, 1674, 370, 746, 3175, 2564, 4018, 293, 309, 311, 516, 281, 312, 264, 912, 337, 264, 2572, 4478, 370, 51264], "temperature": 0.0, "avg_logprob": -0.048088481691148544, "compression_ratio": 1.8823529411764706, "no_speech_prob": 0.01098077092319727}, {"id": 291, "seek": 175332, "start": 1771.32, "end": 1779.08, "text": " the cross product of a vector with itself is always going to be uh the zero vector now it's", "tokens": [51264, 264, 3278, 1674, 295, 257, 8062, 365, 2564, 307, 1009, 516, 281, 312, 2232, 264, 4018, 8062, 586, 309, 311, 51652], "temperature": 0.0, "avg_logprob": -0.048088481691148544, "compression_ratio": 1.8823529411764706, "no_speech_prob": 0.01098077092319727}, {"id": 292, "seek": 177908, "start": 1779.08, "end": 1785.0, "text": " important not to write that just as the scalar zero because it is a different object it's the", "tokens": [50364, 1021, 406, 281, 2464, 300, 445, 382, 264, 39684, 4018, 570, 309, 307, 257, 819, 2657, 309, 311, 264, 50660], "temperature": 0.0, "avg_logprob": -0.09564181736537389, "compression_ratio": 1.7454545454545454, "no_speech_prob": 0.0008685869397595525}, {"id": 293, "seek": 177908, "start": 1785.0, "end": 1791.1599999999999, "text": " vector zero it's a set of in three-dimensional space three zeros that's what we get when we cross a", "tokens": [50660, 8062, 4018, 309, 311, 257, 992, 295, 294, 1045, 12, 18759, 1901, 1045, 35193, 300, 311, 437, 321, 483, 562, 321, 3278, 257, 50968], "temperature": 0.0, "avg_logprob": -0.09564181736537389, "compression_ratio": 1.7454545454545454, "no_speech_prob": 0.0008685869397595525}, {"id": 294, "seek": 177908, "start": 1791.8, "end": 1801.1599999999999, "text": " vector with itself of course this is going to trivially satisfy our condition on the a dot c", "tokens": [51000, 8062, 365, 2564, 295, 1164, 341, 307, 516, 281, 1376, 85, 2270, 19319, 527, 4188, 322, 264, 257, 5893, 269, 51468], "temperature": 0.0, "avg_logprob": -0.09564181736537389, "compression_ratio": 1.7454545454545454, "no_speech_prob": 0.0008685869397595525}, {"id": 295, "seek": 177908, "start": 1801.72, "end": 1808.36, "text": " is equal to zero and b dot z is equal to zero that's clear and so uh i think that's a nice set of", "tokens": [51496, 307, 2681, 281, 4018, 293, 272, 5893, 710, 307, 2681, 281, 4018, 300, 311, 1850, 293, 370, 2232, 741, 519, 300, 311, 257, 1481, 992, 295, 51828], "temperature": 0.0, "avg_logprob": -0.09564181736537389, "compression_ratio": 1.7454545454545454, "no_speech_prob": 0.0008685869397595525}, {"id": 296, "seek": 180836, "start": 1808.36, "end": 1812.9199999999998, "text": " four examples done quite quickly there they're not too bad are they so that's the end of the video", "tokens": [50364, 1451, 5110, 1096, 1596, 2661, 456, 436, 434, 406, 886, 1578, 366, 436, 370, 300, 311, 264, 917, 295, 264, 960, 50592], "temperature": 0.0, "avg_logprob": -0.03991357658220374, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.00150081526953727}, {"id": 297, "seek": 180836, "start": 1814.36, "end": 1818.76, "text": " okay in this video we're going to look again at the cross product but this time we're going to ask", "tokens": [50664, 1392, 294, 341, 960, 321, 434, 516, 281, 574, 797, 412, 264, 3278, 1674, 457, 341, 565, 321, 434, 516, 281, 1029, 50884], "temperature": 0.0, "avg_logprob": -0.03991357658220374, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.00150081526953727}, {"id": 298, "seek": 180836, "start": 1818.76, "end": 1826.12, "text": " about its geometric meaning and its properties when we come to manipulate it okay so if some", "tokens": [50884, 466, 1080, 33246, 3620, 293, 1080, 7221, 562, 321, 808, 281, 20459, 309, 1392, 370, 498, 512, 51252], "temperature": 0.0, "avg_logprob": -0.03991357658220374, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.00150081526953727}, {"id": 299, "seek": 180836, "start": 1826.12, "end": 1832.84, "text": " vector c is the cross product of two other vectors a and b we've already seen how to work that out", "tokens": [51252, 8062, 269, 307, 264, 3278, 1674, 295, 732, 661, 18875, 257, 293, 272, 321, 600, 1217, 1612, 577, 281, 589, 300, 484, 51588], "temperature": 0.0, "avg_logprob": -0.03991357658220374, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.00150081526953727}, {"id": 300, "seek": 183284, "start": 1832.84, "end": 1840.9199999999998, "text": " but what we can reasonably now ask is what does that vector c look like you know if we imagine a", "tokens": [50364, 457, 437, 321, 393, 23551, 586, 1029, 307, 437, 775, 300, 8062, 269, 574, 411, 291, 458, 498, 321, 3811, 257, 50768], "temperature": 0.0, "avg_logprob": -0.05601058900356293, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.008436253294348717}, {"id": 301, "seek": 183284, "start": 1840.9199999999998, "end": 1849.1599999999999, "text": " particular couple of vectors a and b there in space where is this vector c how is it related", "tokens": [50768, 1729, 1916, 295, 18875, 257, 293, 272, 456, 294, 1901, 689, 307, 341, 8062, 269, 577, 307, 309, 4077, 51180], "temperature": 0.0, "avg_logprob": -0.05601058900356293, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.008436253294348717}, {"id": 302, "seek": 183284, "start": 1849.1599999999999, "end": 1855.3999999999999, "text": " to them we know how to work it out but what's its relationship with them how should we think about it", "tokens": [51180, 281, 552, 321, 458, 577, 281, 589, 309, 484, 457, 437, 311, 1080, 2480, 365, 552, 577, 820, 321, 519, 466, 309, 51492], "temperature": 0.0, "avg_logprob": -0.05601058900356293, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.008436253294348717}, {"id": 303, "seek": 183284, "start": 1856.4399999999998, "end": 1861.72, "text": " and that's what we're gonna we're gonna figure out now so we know that c is a vector so it has", "tokens": [51544, 293, 300, 311, 437, 321, 434, 799, 321, 434, 799, 2573, 484, 586, 370, 321, 458, 300, 269, 307, 257, 8062, 370, 309, 575, 51808], "temperature": 0.0, "avg_logprob": -0.05601058900356293, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.008436253294348717}, {"id": 304, "seek": 186172, "start": 1861.72, "end": 1867.48, "text": " two properties it has its magnitude and direction let's think about the magnitude first what is the", "tokens": [50364, 732, 7221, 309, 575, 1080, 15668, 293, 3513, 718, 311, 519, 466, 264, 15668, 700, 437, 307, 264, 50652], "temperature": 0.0, "avg_logprob": -0.05925489257980179, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0043306853622198105}, {"id": 305, "seek": 186172, "start": 1867.48, "end": 1873.96, "text": " magnitude of c and how does that relate to um a and b what is the length of that vector it's pretty", "tokens": [50652, 15668, 295, 269, 293, 577, 775, 300, 10961, 281, 1105, 257, 293, 272, 437, 307, 264, 4641, 295, 300, 8062, 309, 311, 1238, 50976], "temperature": 0.0, "avg_logprob": -0.05925489257980179, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0043306853622198105}, {"id": 306, "seek": 186172, "start": 1873.96, "end": 1881.8, "text": " simple the magnitude of c is the magnitude of a times the magnitude of b times sine of the angle", "tokens": [50976, 2199, 264, 15668, 295, 269, 307, 264, 15668, 295, 257, 1413, 264, 15668, 295, 272, 1413, 18609, 295, 264, 5802, 51368], "temperature": 0.0, "avg_logprob": -0.05925489257980179, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0043306853622198105}, {"id": 307, "seek": 186172, "start": 1881.8, "end": 1887.8, "text": " between a and b this is very similar to the dot product except with a sine instead of a cos", "tokens": [51368, 1296, 257, 293, 272, 341, 307, 588, 2531, 281, 264, 5893, 1674, 3993, 365, 257, 18609, 2602, 295, 257, 3792, 51668], "temperature": 0.0, "avg_logprob": -0.05925489257980179, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0043306853622198105}, {"id": 308, "seek": 188780, "start": 1888.76, "end": 1896.04, "text": " so there we are there's our two vectors a and b and an angle between them and from those", "tokens": [50412, 370, 456, 321, 366, 456, 311, 527, 732, 18875, 257, 293, 272, 293, 364, 5802, 1296, 552, 293, 490, 729, 50776], "temperature": 0.0, "avg_logprob": -0.07226466590707953, "compression_ratio": 1.829268292682927, "no_speech_prob": 0.0017818812048062682}, {"id": 309, "seek": 188780, "start": 1896.76, "end": 1901.32, "text": " magnitude to the lengths of those two vectors in the angle we can work out the magnitude of c", "tokens": [50812, 15668, 281, 264, 26329, 295, 729, 732, 18875, 294, 264, 5802, 321, 393, 589, 484, 264, 15668, 295, 269, 51040], "temperature": 0.0, "avg_logprob": -0.07226466590707953, "compression_ratio": 1.829268292682927, "no_speech_prob": 0.0017818812048062682}, {"id": 310, "seek": 188780, "start": 1901.32, "end": 1906.2, "text": " note that if we cross a vector with itself the angle will be zero and so the cross product will be", "tokens": [51040, 3637, 300, 498, 321, 3278, 257, 8062, 365, 2564, 264, 5802, 486, 312, 4018, 293, 370, 264, 3278, 1674, 486, 312, 51284], "temperature": 0.0, "avg_logprob": -0.07226466590707953, "compression_ratio": 1.829268292682927, "no_speech_prob": 0.0017818812048062682}, {"id": 311, "seek": 188780, "start": 1906.2, "end": 1913.24, "text": " zero just as we've already seen in our examples that was easy enough what about the direction", "tokens": [51284, 4018, 445, 382, 321, 600, 1217, 1612, 294, 527, 5110, 300, 390, 1858, 1547, 437, 466, 264, 3513, 51636], "temperature": 0.0, "avg_logprob": -0.07226466590707953, "compression_ratio": 1.829268292682927, "no_speech_prob": 0.0017818812048062682}, {"id": 312, "seek": 191324, "start": 1913.24, "end": 1921.72, "text": " of this new vector c how does that relate okay here's the thing the direction of c is perpendicular", "tokens": [50364, 295, 341, 777, 8062, 269, 577, 775, 300, 10961, 1392, 510, 311, 264, 551, 264, 3513, 295, 269, 307, 26734, 50788], "temperature": 0.0, "avg_logprob": -0.06671350851826284, "compression_ratio": 1.7952380952380953, "no_speech_prob": 0.004330500029027462}, {"id": 313, "seek": 191324, "start": 1921.72, "end": 1931.0, "text": " sorry for my writing there we'll be writing c is perpendicular to both vectors a and b so", "tokens": [50788, 2597, 337, 452, 3579, 456, 321, 603, 312, 3579, 269, 307, 26734, 281, 1293, 18875, 257, 293, 272, 370, 51252], "temperature": 0.0, "avg_logprob": -0.06671350851826284, "compression_ratio": 1.7952380952380953, "no_speech_prob": 0.004330500029027462}, {"id": 314, "seek": 191324, "start": 1931.0, "end": 1937.64, "text": " it's at right angles to each of those vectors separately and simultaneously what does that", "tokens": [51252, 309, 311, 412, 558, 14708, 281, 1184, 295, 729, 18875, 14759, 293, 16561, 437, 775, 300, 51584], "temperature": 0.0, "avg_logprob": -0.06671350851826284, "compression_ratio": 1.7952380952380953, "no_speech_prob": 0.004330500029027462}, {"id": 315, "seek": 191324, "start": 1937.64, "end": 1942.6, "text": " look like well actually we can draw it in one of two ways one of which is right and one is wrong", "tokens": [51584, 574, 411, 731, 767, 321, 393, 2642, 309, 294, 472, 295, 732, 2098, 472, 295, 597, 307, 558, 293, 472, 307, 2085, 51832], "temperature": 0.0, "avg_logprob": -0.06671350851826284, "compression_ratio": 1.7952380952380953, "no_speech_prob": 0.004330500029027462}, {"id": 316, "seek": 194260, "start": 1942.6, "end": 1949.8, "text": " let's just do that so here's um here's our vector a here's our vector b if we draw c like that and", "tokens": [50364, 718, 311, 445, 360, 300, 370, 510, 311, 1105, 510, 311, 527, 8062, 257, 510, 311, 527, 8062, 272, 498, 321, 2642, 269, 411, 300, 293, 50724], "temperature": 0.0, "avg_logprob": -0.0418558847336542, "compression_ratio": 2.0669642857142856, "no_speech_prob": 0.0013863950734958053}, {"id": 317, "seek": 194260, "start": 1949.8, "end": 1953.8799999999999, "text": " make it clear with this little symbol that it's at right angles to those two vectors", "tokens": [50724, 652, 309, 1850, 365, 341, 707, 5986, 300, 309, 311, 412, 558, 14708, 281, 729, 732, 18875, 50928], "temperature": 0.0, "avg_logprob": -0.0418558847336542, "compression_ratio": 2.0669642857142856, "no_speech_prob": 0.0013863950734958053}, {"id": 318, "seek": 194260, "start": 1953.8799999999999, "end": 1958.9199999999998, "text": " that would be perpendicular to them both how about this we could also draw a vector a draw", "tokens": [50928, 300, 576, 312, 26734, 281, 552, 1293, 577, 466, 341, 321, 727, 611, 2642, 257, 8062, 257, 2642, 51180], "temperature": 0.0, "avg_logprob": -0.0418558847336542, "compression_ratio": 2.0669642857142856, "no_speech_prob": 0.0013863950734958053}, {"id": 319, "seek": 194260, "start": 1958.9199999999998, "end": 1964.36, "text": " vector b again and we could go in the opposite direction simply literally the opposite direction", "tokens": [51180, 8062, 272, 797, 293, 321, 727, 352, 294, 264, 6182, 3513, 2935, 3736, 264, 6182, 3513, 51452], "temperature": 0.0, "avg_logprob": -0.0418558847336542, "compression_ratio": 2.0669642857142856, "no_speech_prob": 0.0013863950734958053}, {"id": 320, "seek": 194260, "start": 1964.36, "end": 1969.8, "text": " and that would also be perpendicular to these two vectors one of these is actually strictly", "tokens": [51452, 293, 300, 576, 611, 312, 26734, 281, 613, 732, 18875, 472, 295, 613, 307, 767, 20792, 51724], "temperature": 0.0, "avg_logprob": -0.0418558847336542, "compression_ratio": 2.0669642857142856, "no_speech_prob": 0.0013863950734958053}, {"id": 321, "seek": 196980, "start": 1969.8, "end": 1977.8799999999999, "text": " the correct case and the other is wrong by essentially a minus a minus one multiple what's", "tokens": [50364, 264, 3006, 1389, 293, 264, 661, 307, 2085, 538, 4476, 257, 3175, 257, 3175, 472, 3866, 437, 311, 50768], "temperature": 0.0, "avg_logprob": -0.04746479719457492, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.012605802156031132}, {"id": 322, "seek": 196980, "start": 1977.8799999999999, "end": 1983.1599999999999, "text": " the way to work that out so let's let's now figure that out there's actually a rule to remember it", "tokens": [50768, 264, 636, 281, 589, 300, 484, 370, 718, 311, 718, 311, 586, 2573, 300, 484, 456, 311, 767, 257, 4978, 281, 1604, 309, 51032], "temperature": 0.0, "avg_logprob": -0.04746479719457492, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.012605802156031132}, {"id": 323, "seek": 196980, "start": 1983.1599999999999, "end": 1990.52, "text": " by it's called the right hand screw rule so let's draw that out kind of really clearly one more time", "tokens": [51032, 538, 309, 311, 1219, 264, 558, 1011, 5630, 4978, 370, 718, 311, 2642, 300, 484, 733, 295, 534, 4448, 472, 544, 565, 51400], "temperature": 0.0, "avg_logprob": -0.04746479719457492, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.012605802156031132}, {"id": 324, "seek": 199052, "start": 1991.24, "end": 1999.8799999999999, "text": " we have two vectors a and b and we are going to say that a cross b is equal to some vector c", "tokens": [50400, 321, 362, 732, 18875, 257, 293, 272, 293, 321, 366, 516, 281, 584, 300, 257, 3278, 272, 307, 2681, 281, 512, 8062, 269, 50832], "temperature": 0.0, "avg_logprob": -0.07092498725568744, "compression_ratio": 1.6603773584905661, "no_speech_prob": 0.05335765704512596}, {"id": 325, "seek": 199052, "start": 2000.76, "end": 2008.6, "text": " that's fine so what we do is we put on the line along which we know c must lie", "tokens": [50876, 300, 311, 2489, 370, 437, 321, 360, 307, 321, 829, 322, 264, 1622, 2051, 597, 321, 458, 269, 1633, 4544, 51268], "temperature": 0.0, "avg_logprob": -0.07092498725568744, "compression_ratio": 1.6603773584905661, "no_speech_prob": 0.05335765704512596}, {"id": 326, "seek": 199052, "start": 2008.6, "end": 2013.96, "text": " so this is the line that's perpendicular to both a and b and we simply have to ask ourselves", "tokens": [51268, 370, 341, 307, 264, 1622, 300, 311, 26734, 281, 1293, 257, 293, 272, 293, 321, 2935, 362, 281, 1029, 4175, 51536], "temperature": 0.0, "avg_logprob": -0.07092498725568744, "compression_ratio": 1.6603773584905661, "no_speech_prob": 0.05335765704512596}, {"id": 327, "seek": 201396, "start": 2014.2, "end": 2023.4, "text": " um in in this picture does the vector c uh go upwards or does it go downwards the trick is", "tokens": [50376, 1105, 294, 294, 341, 3036, 775, 264, 8062, 269, 2232, 352, 22167, 420, 775, 309, 352, 39880, 264, 4282, 307, 50836], "temperature": 0.0, "avg_logprob": -0.07554368005282637, "compression_ratio": 1.6645962732919255, "no_speech_prob": 0.031124036759138107}, {"id": 328, "seek": 201396, "start": 2023.4, "end": 2030.52, "text": " to write on the angle between a and b and give it a direction so that it's increasing from", "tokens": [50836, 281, 2464, 322, 264, 5802, 1296, 257, 293, 272, 293, 976, 309, 257, 3513, 370, 300, 309, 311, 5662, 490, 51192], "temperature": 0.0, "avg_logprob": -0.07554368005282637, "compression_ratio": 1.6645962732919255, "no_speech_prob": 0.031124036759138107}, {"id": 329, "seek": 201396, "start": 2030.52, "end": 2037.08, "text": " a to b it's the angle from a to b then you imagine taking your right hand and gripping", "tokens": [51192, 257, 281, 272, 309, 311, 264, 5802, 490, 257, 281, 272, 550, 291, 3811, 1940, 428, 558, 1011, 293, 17865, 3759, 51520], "temperature": 0.0, "avg_logprob": -0.07554368005282637, "compression_ratio": 1.6645962732919255, "no_speech_prob": 0.031124036759138107}, {"id": 330, "seek": 203708, "start": 2037.08, "end": 2045.08, "text": " that line in such a way that your fingers curl in the same direction as the angle increases", "tokens": [50364, 300, 1622, 294, 1270, 257, 636, 300, 428, 7350, 22591, 294, 264, 912, 3513, 382, 264, 5802, 8637, 50764], "temperature": 0.0, "avg_logprob": -0.065779910998398, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.019407376646995544}, {"id": 331, "seek": 203708, "start": 2045.08, "end": 2051.24, "text": " and then your thumb points in the direction that the uh in the actual direction of c", "tokens": [50764, 293, 550, 428, 9298, 2793, 294, 264, 3513, 300, 264, 2232, 294, 264, 3539, 3513, 295, 269, 51072], "temperature": 0.0, "avg_logprob": -0.065779910998398, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.019407376646995544}, {"id": 332, "seek": 203708, "start": 2051.24, "end": 2057.56, "text": " let's do another example uh just to uh really make that clear here's a and b again", "tokens": [51072, 718, 311, 360, 1071, 1365, 2232, 445, 281, 2232, 534, 652, 300, 1850, 510, 311, 257, 293, 272, 797, 51388], "temperature": 0.0, "avg_logprob": -0.065779910998398, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.019407376646995544}, {"id": 333, "seek": 203708, "start": 2059.0, "end": 2063.64, "text": " so we know we need to be I've drawn these lying in a plane so we I'm now trying to draw a line", "tokens": [51460, 370, 321, 458, 321, 643, 281, 312, 286, 600, 10117, 613, 8493, 294, 257, 5720, 370, 321, 286, 478, 586, 1382, 281, 2642, 257, 1622, 51692], "temperature": 0.0, "avg_logprob": -0.065779910998398, "compression_ratio": 1.726829268292683, "no_speech_prob": 0.019407376646995544}, {"id": 334, "seek": 206364, "start": 2063.64, "end": 2069.72, "text": " that's perpendicular to that plane vector c must lie in one direction or the other along this line", "tokens": [50364, 300, 311, 26734, 281, 300, 5720, 8062, 269, 1633, 4544, 294, 472, 3513, 420, 264, 661, 2051, 341, 1622, 50668], "temperature": 0.0, "avg_logprob": -0.055624774161805494, "compression_ratio": 1.7972972972972974, "no_speech_prob": 0.010321525856852531}, {"id": 335, "seek": 206364, "start": 2069.72, "end": 2076.04, "text": " what do we do we draw on the angle we now take our right hand and we imagine gripping that that line", "tokens": [50668, 437, 360, 321, 360, 321, 2642, 322, 264, 5802, 321, 586, 747, 527, 558, 1011, 293, 321, 3811, 17865, 3759, 300, 300, 1622, 50984], "temperature": 0.0, "avg_logprob": -0.055624774161805494, "compression_ratio": 1.7972972972972974, "no_speech_prob": 0.010321525856852531}, {"id": 336, "seek": 206364, "start": 2076.04, "end": 2083.16, "text": " we've just drawn in such a way that our fingers curl uh in the direction in which the angle is", "tokens": [50984, 321, 600, 445, 10117, 294, 1270, 257, 636, 300, 527, 7350, 22591, 2232, 294, 264, 3513, 294, 597, 264, 5802, 307, 51340], "temperature": 0.0, "avg_logprob": -0.055624774161805494, "compression_ratio": 1.7972972972972974, "no_speech_prob": 0.010321525856852531}, {"id": 337, "seek": 206364, "start": 2083.16, "end": 2089.4, "text": " increasing so it's like the anticlockwise direction in this picture and that's and then our thumb points", "tokens": [51340, 5662, 370, 309, 311, 411, 264, 49172, 4102, 3711, 3513, 294, 341, 3036, 293, 300, 311, 293, 550, 527, 9298, 2793, 51652], "temperature": 0.0, "avg_logprob": -0.055624774161805494, "compression_ratio": 1.7972972972972974, "no_speech_prob": 0.010321525856852531}, {"id": 338, "seek": 208940, "start": 2089.4, "end": 2094.36, "text": " in the correct direction for that vector so it's in fact these are the two opposite cases", "tokens": [50364, 294, 264, 3006, 3513, 337, 300, 8062, 370, 309, 311, 294, 1186, 613, 366, 264, 732, 6182, 3331, 50612], "temperature": 0.0, "avg_logprob": -0.0668229114862136, "compression_ratio": 1.835820895522388, "no_speech_prob": 0.0071038613095879555}, {"id": 339, "seek": 208940, "start": 2095.56, "end": 2102.28, "text": " so that's the rule that allows you to construct the correct direction for your vector geometrically", "tokens": [50672, 370, 300, 311, 264, 4978, 300, 4045, 291, 281, 7690, 264, 3006, 3513, 337, 428, 8062, 12956, 81, 984, 51008], "temperature": 0.0, "avg_logprob": -0.0668229114862136, "compression_ratio": 1.835820895522388, "no_speech_prob": 0.0071038613095879555}, {"id": 340, "seek": 208940, "start": 2102.28, "end": 2109.08, "text": " geometrically okay uh then let's just finally wrap up by thinking about the cross product", "tokens": [51008, 12956, 81, 984, 1392, 2232, 550, 718, 311, 445, 2721, 7019, 493, 538, 1953, 466, 264, 3278, 1674, 51348], "temperature": 0.0, "avg_logprob": -0.0668229114862136, "compression_ratio": 1.835820895522388, "no_speech_prob": 0.0071038613095879555}, {"id": 341, "seek": 208940, "start": 2109.08, "end": 2114.6, "text": " and asking whether it has those properties that we looked at before for a vector addition", "tokens": [51348, 293, 3365, 1968, 309, 575, 729, 7221, 300, 321, 2956, 412, 949, 337, 257, 8062, 4500, 51624], "temperature": 0.0, "avg_logprob": -0.0668229114862136, "compression_ratio": 1.835820895522388, "no_speech_prob": 0.0071038613095879555}, {"id": 342, "seek": 211460, "start": 2114.6, "end": 2121.24, "text": " the commutative property so for example is a cross b equal to b cross a it is not", "tokens": [50364, 264, 800, 325, 1166, 4707, 370, 337, 1365, 307, 257, 3278, 272, 2681, 281, 272, 3278, 257, 309, 307, 406, 50696], "temperature": 0.0, "avg_logprob": -0.07535399330986871, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.07790699601173401}, {"id": 343, "seek": 211460, "start": 2121.88, "end": 2128.52, "text": " it is not equal to it unlike the dot product unlike addition this one the cross product", "tokens": [50728, 309, 307, 406, 2681, 281, 309, 8343, 264, 5893, 1674, 8343, 4500, 341, 472, 264, 3278, 1674, 51060], "temperature": 0.0, "avg_logprob": -0.07535399330986871, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.07790699601173401}, {"id": 344, "seek": 211460, "start": 2128.52, "end": 2136.04, "text": " it matters the order and in fact it simply uh introduces a minus sign if you swap the order", "tokens": [51060, 309, 7001, 264, 1668, 293, 294, 1186, 309, 2935, 2232, 31472, 257, 3175, 1465, 498, 291, 18135, 264, 1668, 51436], "temperature": 0.0, "avg_logprob": -0.07535399330986871, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.07790699601173401}, {"id": 345, "seek": 211460, "start": 2136.04, "end": 2141.0, "text": " of a and b so it's not commutative it nearly is in the sense that it gives you something similar it", "tokens": [51436, 295, 257, 293, 272, 370, 309, 311, 406, 800, 325, 1166, 309, 6217, 307, 294, 264, 2020, 300, 309, 2709, 291, 746, 2531, 309, 51684], "temperature": 0.0, "avg_logprob": -0.07535399330986871, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.07790699601173401}, {"id": 346, "seek": 214100, "start": 2141.0, "end": 2147.72, "text": " gives you uh the same thing up to a minus sign it's important to remember and you can just verify", "tokens": [50364, 2709, 291, 2232, 264, 912, 551, 493, 281, 257, 3175, 1465, 309, 311, 1021, 281, 1604, 293, 291, 393, 445, 16888, 50700], "temperature": 0.0, "avg_logprob": -0.062287379785911326, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.0023954445496201515}, {"id": 347, "seek": 214100, "start": 2147.72, "end": 2153.48, "text": " that by thinking about how we work out a and b with those diagonal products now how about the", "tokens": [50700, 300, 538, 1953, 466, 577, 321, 589, 484, 257, 293, 272, 365, 729, 21539, 3383, 586, 577, 466, 264, 50988], "temperature": 0.0, "avg_logprob": -0.062287379785911326, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.0023954445496201515}, {"id": 348, "seek": 214100, "start": 2153.48, "end": 2159.72, "text": " associative property can we say that a cross b cross c where b and c have already been worked out", "tokens": [50988, 4180, 1166, 4707, 393, 321, 584, 300, 257, 3278, 272, 3278, 269, 689, 272, 293, 269, 362, 1217, 668, 2732, 484, 51300], "temperature": 0.0, "avg_logprob": -0.062287379785911326, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.0023954445496201515}, {"id": 349, "seek": 214100, "start": 2159.72, "end": 2166.68, "text": " it's the same as a cross b and then cross c uh what do we think is that going to work or not in fact", "tokens": [51300, 309, 311, 264, 912, 382, 257, 3278, 272, 293, 550, 3278, 269, 2232, 437, 360, 321, 519, 307, 300, 516, 281, 589, 420, 406, 294, 1186, 51648], "temperature": 0.0, "avg_logprob": -0.062287379785911326, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.0023954445496201515}, {"id": 350, "seek": 216668, "start": 2167.3999999999996, "end": 2175.64, "text": " it uh this is the associative property we might ask whether this is true and the answer is no", "tokens": [50400, 309, 2232, 341, 307, 264, 4180, 1166, 4707, 321, 1062, 1029, 1968, 341, 307, 2074, 293, 264, 1867, 307, 572, 50812], "temperature": 0.0, "avg_logprob": -0.06341493697393508, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.022265911102294922}, {"id": 351, "seek": 216668, "start": 2175.64, "end": 2182.2, "text": " again uh the cross product does not have this property so the order in which you do your cross", "tokens": [50812, 797, 2232, 264, 3278, 1674, 775, 406, 362, 341, 4707, 370, 264, 1668, 294, 597, 291, 360, 428, 3278, 51140], "temperature": 0.0, "avg_logprob": -0.06341493697393508, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.022265911102294922}, {"id": 352, "seek": 216668, "start": 2182.2, "end": 2187.8799999999997, "text": " product if you have doing the cross product of three vectors does matter we can easily convince", "tokens": [51140, 1674, 498, 291, 362, 884, 264, 3278, 1674, 295, 1045, 18875, 775, 1871, 321, 393, 3612, 13447, 51424], "temperature": 0.0, "avg_logprob": -0.06341493697393508, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.022265911102294922}, {"id": 353, "seek": 216668, "start": 2187.8799999999997, "end": 2194.52, "text": " ourselves of this just by looking at a particularly uh convenient example let's just use cartesian", "tokens": [51424, 4175, 295, 341, 445, 538, 1237, 412, 257, 4098, 2232, 10851, 1365, 718, 311, 445, 764, 5467, 42434, 51756], "temperature": 0.0, "avg_logprob": -0.06341493697393508, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.022265911102294922}, {"id": 354, "seek": 219452, "start": 2194.52, "end": 2200.84, "text": " vectors i j k so let's just remind ourselves where these guys lie they're perpendicular to each other", "tokens": [50364, 18875, 741, 361, 350, 370, 718, 311, 445, 4160, 4175, 689, 613, 1074, 4544, 436, 434, 26734, 281, 1184, 661, 50680], "temperature": 0.0, "avg_logprob": -0.05944737208258245, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005050181411206722}, {"id": 355, "seek": 219452, "start": 2200.84, "end": 2207.96, "text": " i j and k just our unit vectors going in the x y and z direction so suppose we have this guy i cross", "tokens": [50680, 741, 361, 293, 350, 445, 527, 4985, 18875, 516, 294, 264, 2031, 288, 293, 710, 3513, 370, 7297, 321, 362, 341, 2146, 741, 3278, 51036], "temperature": 0.0, "avg_logprob": -0.05944737208258245, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005050181411206722}, {"id": 356, "seek": 219452, "start": 2207.96, "end": 2214.52, "text": " i cross k if we try evaluating it this way around with the i cross k being worked out first well", "tokens": [51036, 741, 3278, 350, 498, 321, 853, 27479, 309, 341, 636, 926, 365, 264, 741, 3278, 350, 885, 2732, 484, 700, 731, 51364], "temperature": 0.0, "avg_logprob": -0.05944737208258245, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005050181411206722}, {"id": 357, "seek": 219452, "start": 2214.52, "end": 2220.04, "text": " that's just going to give us in fact minus j which you can confirm with the right hand rule that we", "tokens": [51364, 300, 311, 445, 516, 281, 976, 505, 294, 1186, 3175, 361, 597, 291, 393, 9064, 365, 264, 558, 1011, 4978, 300, 321, 51640], "temperature": 0.0, "avg_logprob": -0.05944737208258245, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.005050181411206722}, {"id": 358, "seek": 222004, "start": 2220.04, "end": 2227.16, "text": " just introduced and then that in turn will give us k that's fine so we've worked out um in that", "tokens": [50364, 445, 7268, 293, 550, 300, 294, 1261, 486, 976, 505, 350, 300, 311, 2489, 370, 321, 600, 2732, 484, 1105, 294, 300, 50720], "temperature": 0.0, "avg_logprob": -0.04819798720510383, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.032568108290433884}, {"id": 359, "seek": 222004, "start": 2227.16, "end": 2232.84, "text": " instance the answer is minus k now let's do it the other way around i cross i if we do that first", "tokens": [50720, 5197, 264, 1867, 307, 3175, 350, 586, 718, 311, 360, 309, 264, 661, 636, 926, 741, 3278, 741, 498, 321, 360, 300, 700, 51004], "temperature": 0.0, "avg_logprob": -0.04819798720510383, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.032568108290433884}, {"id": 360, "seek": 222004, "start": 2232.84, "end": 2238.2, "text": " that's just going to be zero because i cross i is zero so it's game over already at that point", "tokens": [51004, 300, 311, 445, 516, 281, 312, 4018, 570, 741, 3278, 741, 307, 4018, 370, 309, 311, 1216, 670, 1217, 412, 300, 935, 51272], "temperature": 0.0, "avg_logprob": -0.04819798720510383, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.032568108290433884}, {"id": 361, "seek": 222004, "start": 2238.2, "end": 2243.16, "text": " so we can see two radically different answers here just depending on our order finally we could ask", "tokens": [51272, 370, 321, 393, 536, 732, 35508, 819, 6338, 510, 445, 5413, 322, 527, 1668, 2721, 321, 727, 1029, 51520], "temperature": 0.0, "avg_logprob": -0.04819798720510383, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.032568108290433884}, {"id": 362, "seek": 224316, "start": 2243.16, "end": 2250.92, "text": " about the distributive property so are we allowed to multiply through using the cross product uh if", "tokens": [50364, 466, 264, 4400, 17254, 4707, 370, 366, 321, 4350, 281, 12972, 807, 1228, 264, 3278, 1674, 2232, 498, 50752], "temperature": 0.0, "avg_logprob": -0.060898661613464355, "compression_ratio": 2.0259067357512954, "no_speech_prob": 0.1021370142698288}, {"id": 363, "seek": 224316, "start": 2250.92, "end": 2258.7599999999998, "text": " we um if the second object in our cross product is a sum of two vectors can we do this well uh", "tokens": [50752, 321, 1105, 498, 264, 1150, 2657, 294, 527, 3278, 1674, 307, 257, 2408, 295, 732, 18875, 393, 321, 360, 341, 731, 2232, 51144], "temperature": 0.0, "avg_logprob": -0.060898661613464355, "compression_ratio": 2.0259067357512954, "no_speech_prob": 0.1021370142698288}, {"id": 364, "seek": 224316, "start": 2258.7599999999998, "end": 2264.2799999999997, "text": " this at last is something that we are going to be allowed to do it is the distributive property", "tokens": [51144, 341, 412, 1036, 307, 746, 300, 321, 366, 516, 281, 312, 4350, 281, 360, 309, 307, 264, 4400, 17254, 4707, 51420], "temperature": 0.0, "avg_logprob": -0.060898661613464355, "compression_ratio": 2.0259067357512954, "no_speech_prob": 0.1021370142698288}, {"id": 365, "seek": 224316, "start": 2265.3999999999996, "end": 2272.3599999999997, "text": " and the cross product operation the vector product does have this property we are allowed to do that", "tokens": [51476, 293, 264, 3278, 1674, 6916, 264, 8062, 1674, 775, 362, 341, 4707, 321, 366, 4350, 281, 360, 300, 51824], "temperature": 0.0, "avg_logprob": -0.060898661613464355, "compression_ratio": 2.0259067357512954, "no_speech_prob": 0.1021370142698288}, {"id": 366, "seek": 227236, "start": 2272.36, "end": 2279.7200000000003, "text": " but of course we must make sure to make uh to keep the order the same okay so i think that's", "tokens": [50364, 457, 295, 1164, 321, 1633, 652, 988, 281, 652, 2232, 281, 1066, 264, 1668, 264, 912, 1392, 370, 741, 519, 300, 311, 50732], "temperature": 0.0, "avg_logprob": -0.0419672599205604, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.0004303982714191079}, {"id": 367, "seek": 227236, "start": 2279.7200000000003, "end": 2287.08, "text": " everything for this video okay in this lecture we're going to be looking at something called the", "tokens": [50732, 1203, 337, 341, 960, 1392, 294, 341, 7991, 321, 434, 516, 281, 312, 1237, 412, 746, 1219, 264, 51100], "temperature": 0.0, "avg_logprob": -0.0419672599205604, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.0004303982714191079}, {"id": 368, "seek": 227236, "start": 2287.08, "end": 2298.76, "text": " scalar triple product so what we're dealing with here is taking three vectors and combining them", "tokens": [51100, 39684, 15508, 1674, 370, 437, 321, 434, 6260, 365, 510, 307, 1940, 1045, 18875, 293, 21928, 552, 51684], "temperature": 0.0, "avg_logprob": -0.0419672599205604, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.0004303982714191079}, {"id": 369, "seek": 229876, "start": 2298.76, "end": 2307.1600000000003, "text": " in a certain way in order to yield a single one scalar quantity so three vectors into one scalar", "tokens": [50364, 294, 257, 1629, 636, 294, 1668, 281, 11257, 257, 2167, 472, 39684, 11275, 370, 1045, 18875, 666, 472, 39684, 50784], "temperature": 0.0, "avg_logprob": -0.050796838907095104, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.005465609487146139}, {"id": 370, "seek": 229876, "start": 2307.1600000000003, "end": 2316.0400000000004, "text": " scalar triple product suppose we have a we dot it with b which itself is crossed with c that is the", "tokens": [50784, 39684, 15508, 1674, 7297, 321, 362, 257, 321, 5893, 309, 365, 272, 597, 2564, 307, 14622, 365, 269, 300, 307, 264, 51228], "temperature": 0.0, "avg_logprob": -0.050796838907095104, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.005465609487146139}, {"id": 371, "seek": 229876, "start": 2316.0400000000004, "end": 2320.84, "text": " scalar triple product that combination now here i've put brackets to emphasize to do the cross", "tokens": [51228, 39684, 15508, 1674, 300, 6562, 586, 510, 741, 600, 829, 26179, 281, 16078, 281, 360, 264, 3278, 51468], "temperature": 0.0, "avg_logprob": -0.050796838907095104, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.005465609487146139}, {"id": 372, "seek": 232084, "start": 2320.84, "end": 2330.28, "text": " product first but we can just write a dot b cross c without the brackets why because we have to do", "tokens": [50364, 1674, 700, 457, 321, 393, 445, 2464, 257, 5893, 272, 3278, 269, 1553, 264, 26179, 983, 570, 321, 362, 281, 360, 50836], "temperature": 0.0, "avg_logprob": -0.07394698547990355, "compression_ratio": 1.6900584795321638, "no_speech_prob": 0.028427351266145706}, {"id": 373, "seek": 232084, "start": 2330.28, "end": 2337.48, "text": " it in the correct order if we try to do a dot b first and then cross that with c it's a nonsense", "tokens": [50836, 309, 294, 264, 3006, 1668, 498, 321, 853, 281, 360, 257, 5893, 272, 700, 293, 550, 3278, 300, 365, 269, 309, 311, 257, 14925, 51196], "temperature": 0.0, "avg_logprob": -0.07394698547990355, "compression_ratio": 1.6900584795321638, "no_speech_prob": 0.028427351266145706}, {"id": 374, "seek": 232084, "start": 2337.48, "end": 2343.2400000000002, "text": " because that will be a scalar cross-producted with a vector doesn't make sense all right then", "tokens": [51196, 570, 300, 486, 312, 257, 39684, 3278, 12, 33244, 292, 365, 257, 8062, 1177, 380, 652, 2020, 439, 558, 550, 51484], "temperature": 0.0, "avg_logprob": -0.07394698547990355, "compression_ratio": 1.6900584795321638, "no_speech_prob": 0.028427351266145706}, {"id": 375, "seek": 234324, "start": 2343.24, "end": 2350.6, "text": " so let's do one we'll make up some vectors let's have a is equal to three one minus one", "tokens": [50364, 370, 718, 311, 360, 472, 321, 603, 652, 493, 512, 18875, 718, 311, 362, 257, 307, 2681, 281, 1045, 472, 3175, 472, 50732], "temperature": 0.0, "avg_logprob": -0.03517253367931812, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.0019266122253611684}, {"id": 376, "seek": 234324, "start": 2350.6, "end": 2363.72, "text": " and b is equal to two zero four and c is equal to minus one minus two three okay there are vectors", "tokens": [50732, 293, 272, 307, 2681, 281, 732, 4018, 1451, 293, 269, 307, 2681, 281, 3175, 472, 3175, 732, 1045, 1392, 456, 366, 18875, 51388], "temperature": 0.0, "avg_logprob": -0.03517253367931812, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.0019266122253611684}, {"id": 377, "seek": 234324, "start": 2363.72, "end": 2368.6, "text": " and let's go ahead and work it out so first we'll need to do the cross product b cross c so let's", "tokens": [51388, 293, 718, 311, 352, 2286, 293, 589, 309, 484, 370, 700, 321, 603, 643, 281, 360, 264, 3278, 1674, 272, 3278, 269, 370, 718, 311, 51632], "temperature": 0.0, "avg_logprob": -0.03517253367931812, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.0019266122253611684}, {"id": 378, "seek": 236860, "start": 2368.6, "end": 2373.64, "text": " write that out so i'm bringing these down now remember you can work out the cross product by", "tokens": [50364, 2464, 300, 484, 370, 741, 478, 5062, 613, 760, 586, 1604, 291, 393, 589, 484, 264, 3278, 1674, 538, 50616], "temperature": 0.0, "avg_logprob": -0.04661747874045859, "compression_ratio": 2.081447963800905, "no_speech_prob": 0.08024317771196365}, {"id": 379, "seek": 236860, "start": 2373.64, "end": 2379.3199999999997, "text": " whatever your favorite method is i'm just going to do it in the method i introduced before which", "tokens": [50616, 2035, 428, 2954, 3170, 307, 741, 478, 445, 516, 281, 360, 309, 294, 264, 3170, 741, 7268, 949, 597, 50900], "temperature": 0.0, "avg_logprob": -0.04661747874045859, "compression_ratio": 2.081447963800905, "no_speech_prob": 0.08024317771196365}, {"id": 380, "seek": 236860, "start": 2379.3199999999997, "end": 2384.04, "text": " is we ignore the first elements and we do the falling diagonal here zero and subtract the", "tokens": [50900, 307, 321, 11200, 264, 700, 4959, 293, 321, 360, 264, 7440, 21539, 510, 4018, 293, 16390, 264, 51136], "temperature": 0.0, "avg_logprob": -0.04661747874045859, "compression_ratio": 2.081447963800905, "no_speech_prob": 0.08024317771196365}, {"id": 381, "seek": 236860, "start": 2384.04, "end": 2389.7999999999997, "text": " rising diagonal minus eight that gives us the first element eight then we ignore the middle", "tokens": [51136, 11636, 21539, 3175, 3180, 300, 2709, 505, 264, 700, 4478, 3180, 550, 321, 11200, 264, 2808, 51424], "temperature": 0.0, "avg_logprob": -0.04661747874045859, "compression_ratio": 2.081447963800905, "no_speech_prob": 0.08024317771196365}, {"id": 382, "seek": 236860, "start": 2389.7999999999997, "end": 2394.36, "text": " elements and we do the rising diagonal gives us minus four subtract the falling diagonal", "tokens": [51424, 4959, 293, 321, 360, 264, 11636, 21539, 2709, 505, 3175, 1451, 16390, 264, 7440, 21539, 51652], "temperature": 0.0, "avg_logprob": -0.04661747874045859, "compression_ratio": 2.081447963800905, "no_speech_prob": 0.08024317771196365}, {"id": 383, "seek": 239436, "start": 2394.36, "end": 2401.96, "text": " which is six so that's going to give us a minus 10 entry and then we ignore the third elements", "tokens": [50364, 597, 307, 2309, 370, 300, 311, 516, 281, 976, 505, 257, 3175, 1266, 8729, 293, 550, 321, 11200, 264, 2636, 4959, 50744], "temperature": 0.0, "avg_logprob": -0.07054882551494397, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.00896536000072956}, {"id": 384, "seek": 239436, "start": 2401.96, "end": 2408.04, "text": " we do the falling diagonal gives us a minus four and subtract zero so that's going to be minus four", "tokens": [50744, 321, 360, 264, 7440, 21539, 2709, 505, 257, 3175, 1451, 293, 16390, 4018, 370, 300, 311, 516, 281, 312, 3175, 1451, 51048], "temperature": 0.0, "avg_logprob": -0.07054882551494397, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.00896536000072956}, {"id": 385, "seek": 239436, "start": 2408.04, "end": 2412.6, "text": " that is our candidate for our cross product but it's always good to test how do we test a cross", "tokens": [51048, 300, 307, 527, 11532, 337, 527, 3278, 1674, 457, 309, 311, 1009, 665, 281, 1500, 577, 360, 321, 1500, 257, 3278, 51276], "temperature": 0.0, "avg_logprob": -0.07054882551494397, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.00896536000072956}, {"id": 386, "seek": 239436, "start": 2412.6, "end": 2418.92, "text": " product we try dotting it with either of the input vectors and check we get zero so here we'll get", "tokens": [51276, 1674, 321, 853, 5893, 783, 309, 365, 2139, 295, 264, 4846, 18875, 293, 1520, 321, 483, 4018, 370, 510, 321, 603, 483, 51592], "temperature": 0.0, "avg_logprob": -0.07054882551494397, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.00896536000072956}, {"id": 387, "seek": 241892, "start": 2418.92, "end": 2424.28, "text": " eight twos are 16 and four minus four is minus 16 add it up that is zero and now we try the other", "tokens": [50364, 3180, 683, 329, 366, 3165, 293, 1451, 3175, 1451, 307, 3175, 3165, 909, 309, 493, 300, 307, 4018, 293, 586, 321, 853, 264, 661, 50632], "temperature": 0.0, "avg_logprob": -0.06227560341358185, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.03256946802139282}, {"id": 388, "seek": 241892, "start": 2424.28, "end": 2433.0, "text": " combination here we're going to have minus one on eight minus eight and then plus 20 and then", "tokens": [50632, 6562, 510, 321, 434, 516, 281, 362, 3175, 472, 322, 3180, 3175, 3180, 293, 550, 1804, 945, 293, 550, 51068], "temperature": 0.0, "avg_logprob": -0.06227560341358185, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.03256946802139282}, {"id": 389, "seek": 241892, "start": 2433.0, "end": 2439.7200000000003, "text": " minus 12 that does indeed add up to zero it's past our checks those were just checks but it was good", "tokens": [51068, 3175, 2272, 300, 775, 6451, 909, 493, 281, 4018, 309, 311, 1791, 527, 13834, 729, 645, 445, 13834, 457, 309, 390, 665, 51404], "temperature": 0.0, "avg_logprob": -0.06227560341358185, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.03256946802139282}, {"id": 390, "seek": 241892, "start": 2439.7200000000003, "end": 2445.32, "text": " to do them and so we're now very happy that that is the correct cross product to finish the scalar", "tokens": [51404, 281, 360, 552, 293, 370, 321, 434, 586, 588, 2055, 300, 300, 307, 264, 3006, 3278, 1674, 281, 2413, 264, 39684, 51684], "temperature": 0.0, "avg_logprob": -0.06227560341358185, "compression_ratio": 1.7533632286995515, "no_speech_prob": 0.03256946802139282}, {"id": 391, "seek": 244532, "start": 2445.32, "end": 2453.0, "text": " triple product we now just need to dot that with a so let's write it out again minus 10 minus four", "tokens": [50364, 15508, 1674, 321, 586, 445, 643, 281, 5893, 300, 365, 257, 370, 718, 311, 2464, 309, 484, 797, 3175, 1266, 3175, 1451, 50748], "temperature": 0.0, "avg_logprob": -0.07207579956841223, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.010959249921143055}, {"id": 392, "seek": 244532, "start": 2453.0, "end": 2461.8, "text": " and do the dot product that's 24 minus 10 plus four is going to be 18 that's the answer that's", "tokens": [50748, 293, 360, 264, 5893, 1674, 300, 311, 4022, 3175, 1266, 1804, 1451, 307, 516, 281, 312, 2443, 300, 311, 264, 1867, 300, 311, 51188], "temperature": 0.0, "avg_logprob": -0.07207579956841223, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.010959249921143055}, {"id": 393, "seek": 244532, "start": 2461.8, "end": 2465.88, "text": " our scalar triple product it could have been a positive number a negative number could have been", "tokens": [51188, 527, 39684, 15508, 1674, 309, 727, 362, 668, 257, 3353, 1230, 257, 3671, 1230, 727, 362, 668, 51392], "temperature": 0.0, "avg_logprob": -0.07207579956841223, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.010959249921143055}, {"id": 394, "seek": 244532, "start": 2465.88, "end": 2473.6400000000003, "text": " zero in this case it's 18 now let's do another one so I'll erase this but we'll simply use the same", "tokens": [51392, 4018, 294, 341, 1389, 309, 311, 2443, 586, 718, 311, 360, 1071, 472, 370, 286, 603, 23525, 341, 457, 321, 603, 2935, 764, 264, 912, 51780], "temperature": 0.0, "avg_logprob": -0.07207579956841223, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.010959249921143055}, {"id": 395, "seek": 247364, "start": 2474.6, "end": 2481.7999999999997, "text": " the same three vectors but we'll do them in a different order as our second example", "tokens": [50412, 264, 912, 1045, 18875, 457, 321, 603, 360, 552, 294, 257, 819, 1668, 382, 527, 1150, 1365, 50772], "temperature": 0.0, "avg_logprob": -0.06048375017502729, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.0020816915202885866}, {"id": 396, "seek": 247364, "start": 2481.7999999999997, "end": 2492.12, "text": " so let's do b dotted with c cross a so of course we have to start by doing that c cross a combination", "tokens": [50772, 370, 718, 311, 360, 272, 37459, 365, 269, 3278, 257, 370, 295, 1164, 321, 362, 281, 722, 538, 884, 300, 269, 3278, 257, 6562, 51288], "temperature": 0.0, "avg_logprob": -0.06048375017502729, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.0020816915202885866}, {"id": 397, "seek": 247364, "start": 2492.12, "end": 2502.3599999999997, "text": " first so let me write that down quickly minus one minus two three crossed with three one minus one", "tokens": [51288, 700, 370, 718, 385, 2464, 300, 760, 2661, 3175, 472, 3175, 732, 1045, 14622, 365, 1045, 472, 3175, 472, 51800], "temperature": 0.0, "avg_logprob": -0.06048375017502729, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.0020816915202885866}, {"id": 398, "seek": 250236, "start": 2502.36, "end": 2508.04, "text": " so we start with the falling diagonal that's going to be two and then we subtract three that's minus", "tokens": [50364, 370, 321, 722, 365, 264, 7440, 21539, 300, 311, 516, 281, 312, 732, 293, 550, 321, 16390, 1045, 300, 311, 3175, 50648], "temperature": 0.0, "avg_logprob": -0.05704626170071689, "compression_ratio": 2.1964285714285716, "no_speech_prob": 0.0009696565102785826}, {"id": 399, "seek": 250236, "start": 2508.04, "end": 2513.96, "text": " one and then we have a rising diagonal that's going to be nine and subtract one that's eight", "tokens": [50648, 472, 293, 550, 321, 362, 257, 11636, 21539, 300, 311, 516, 281, 312, 4949, 293, 16390, 472, 300, 311, 3180, 50944], "temperature": 0.0, "avg_logprob": -0.05704626170071689, "compression_ratio": 2.1964285714285716, "no_speech_prob": 0.0009696565102785826}, {"id": 400, "seek": 250236, "start": 2513.96, "end": 2519.4, "text": " and then we have a falling diagonal minus one and subtract minus six so that's going to be", "tokens": [50944, 293, 550, 321, 362, 257, 7440, 21539, 3175, 472, 293, 16390, 3175, 2309, 370, 300, 311, 516, 281, 312, 51216], "temperature": 0.0, "avg_logprob": -0.05704626170071689, "compression_ratio": 2.1964285714285716, "no_speech_prob": 0.0009696565102785826}, {"id": 401, "seek": 250236, "start": 2520.84, "end": 2527.96, "text": " five in all okay did I get that cross product correct or not do the dot product test", "tokens": [51288, 1732, 294, 439, 1392, 630, 286, 483, 300, 3278, 1674, 3006, 420, 406, 360, 264, 5893, 1674, 1500, 51644], "temperature": 0.0, "avg_logprob": -0.05704626170071689, "compression_ratio": 2.1964285714285716, "no_speech_prob": 0.0009696565102785826}, {"id": 402, "seek": 252796, "start": 2528.68, "end": 2536.04, "text": " minus three minus three eight minus five that one's passed let's try this dot product combination", "tokens": [50400, 3175, 1045, 3175, 1045, 3180, 3175, 1732, 300, 472, 311, 4678, 718, 311, 853, 341, 5893, 1674, 6562, 50768], "temperature": 0.0, "avg_logprob": -0.08485450606415237, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.012605801224708557}, {"id": 403, "seek": 252796, "start": 2536.04, "end": 2544.28, "text": " as a second check double check one minus 16 plus 15 that's also going to come out at zero", "tokens": [50768, 382, 257, 1150, 1520, 3834, 1520, 472, 3175, 3165, 1804, 2119, 300, 311, 611, 516, 281, 808, 484, 412, 4018, 51180], "temperature": 0.0, "avg_logprob": -0.08485450606415237, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.012605801224708557}, {"id": 404, "seek": 252796, "start": 2544.28, "end": 2550.12, "text": " so it's passed both of my checks that one is zero as well we're happy that this is indeed the cross", "tokens": [51180, 370, 309, 311, 4678, 1293, 295, 452, 13834, 300, 472, 307, 4018, 382, 731, 321, 434, 2055, 300, 341, 307, 6451, 264, 3278, 51472], "temperature": 0.0, "avg_logprob": -0.08485450606415237, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.012605801224708557}, {"id": 405, "seek": 255012, "start": 2550.2, "end": 2557.56, "text": " product c cross a we now need to complete it so what we're doing is um b which was 204", "tokens": [50368, 1674, 269, 3278, 257, 321, 586, 643, 281, 3566, 309, 370, 437, 321, 434, 884, 307, 1105, 272, 597, 390, 945, 19, 50736], "temperature": 0.0, "avg_logprob": -0.1280544053262739, "compression_ratio": 1.5535714285714286, "no_speech_prob": 0.03018227219581604}, {"id": 406, "seek": 255012, "start": 2558.2799999999997, "end": 2565.7999999999997, "text": " dotted with what we found our cross product minus 185 so again go ahead and value this", "tokens": [50772, 37459, 365, 437, 321, 1352, 527, 3278, 1674, 3175, 2443, 20, 370, 797, 352, 2286, 293, 2158, 341, 51148], "temperature": 0.0, "avg_logprob": -0.1280544053262739, "compression_ratio": 1.5535714285714286, "no_speech_prob": 0.03018227219581604}, {"id": 407, "seek": 255012, "start": 2565.7999999999997, "end": 2575.3199999999997, "text": " minus 20 and 20 18 again all right so our second example has also given us 18 does this", "tokens": [51148, 3175, 945, 293, 945, 2443, 797, 439, 558, 370, 527, 1150, 1365, 575, 611, 2212, 505, 2443, 775, 341, 51624], "temperature": 0.0, "avg_logprob": -0.1280544053262739, "compression_ratio": 1.5535714285714286, "no_speech_prob": 0.03018227219581604}, {"id": 408, "seek": 257532, "start": 2575.32, "end": 2581.4, "text": " mean that it doesn't matter in which order we do the elements of the uh scalar triple product", "tokens": [50364, 914, 300, 309, 1177, 380, 1871, 294, 597, 1668, 321, 360, 264, 4959, 295, 264, 2232, 39684, 15508, 1674, 50668], "temperature": 0.0, "avg_logprob": -0.0465168068089436, "compression_ratio": 1.7230046948356808, "no_speech_prob": 0.029745273292064667}, {"id": 409, "seek": 257532, "start": 2582.1200000000003, "end": 2586.6000000000004, "text": " let me just write down the answer to that and then we'll look at it it turns out that for", "tokens": [50704, 718, 385, 445, 2464, 760, 264, 1867, 281, 300, 293, 550, 321, 603, 574, 412, 309, 309, 4523, 484, 300, 337, 50928], "temperature": 0.0, "avg_logprob": -0.0465168068089436, "compression_ratio": 1.7230046948356808, "no_speech_prob": 0.029745273292064667}, {"id": 410, "seek": 257532, "start": 2586.6000000000004, "end": 2594.76, "text": " any vectors a b and c then a dot b cross c is equal to b dot c cross a these were the two", "tokens": [50928, 604, 18875, 257, 272, 293, 269, 550, 257, 5893, 272, 3278, 269, 307, 2681, 281, 272, 5893, 269, 3278, 257, 613, 645, 264, 732, 51336], "temperature": 0.0, "avg_logprob": -0.0465168068089436, "compression_ratio": 1.7230046948356808, "no_speech_prob": 0.029745273292064667}, {"id": 411, "seek": 257532, "start": 2594.76, "end": 2604.28, "text": " cases we looked at and it's also equal in fact to c dot um a cross b this will always be true", "tokens": [51336, 3331, 321, 2956, 412, 293, 309, 311, 611, 2681, 294, 1186, 281, 269, 5893, 1105, 257, 3278, 272, 341, 486, 1009, 312, 2074, 51812], "temperature": 0.0, "avg_logprob": -0.0465168068089436, "compression_ratio": 1.7230046948356808, "no_speech_prob": 0.029745273292064667}, {"id": 412, "seek": 260428, "start": 2604.28, "end": 2609.48, "text": " in this case it was equal to 18 but these three things will always be equal there are three other", "tokens": [50364, 294, 341, 1389, 309, 390, 2681, 281, 2443, 457, 613, 1045, 721, 486, 1009, 312, 2681, 456, 366, 1045, 661, 50624], "temperature": 0.0, "avg_logprob": -0.0672331862979465, "compression_ratio": 1.9259259259259258, "no_speech_prob": 0.0026719465386122465}, {"id": 413, "seek": 260428, "start": 2609.48, "end": 2614.28, "text": " combinations we could write down in principle there are three other ways to combine a b and c", "tokens": [50624, 21267, 321, 727, 2464, 760, 294, 8665, 456, 366, 1045, 661, 2098, 281, 10432, 257, 272, 293, 269, 50864], "temperature": 0.0, "avg_logprob": -0.0672331862979465, "compression_ratio": 1.9259259259259258, "no_speech_prob": 0.0026719465386122465}, {"id": 414, "seek": 260428, "start": 2614.84, "end": 2627.1600000000003, "text": " we could have a dot c cross b or we could have b dot a cross c or we could have c dot b cross a", "tokens": [50892, 321, 727, 362, 257, 5893, 269, 3278, 272, 420, 321, 727, 362, 272, 5893, 257, 3278, 269, 420, 321, 727, 362, 269, 5893, 272, 3278, 257, 51508], "temperature": 0.0, "avg_logprob": -0.0672331862979465, "compression_ratio": 1.9259259259259258, "no_speech_prob": 0.0026719465386122465}, {"id": 415, "seek": 260428, "start": 2627.8, "end": 2632.6800000000003, "text": " now it turns out that those things are easy to see what they will be because", "tokens": [51540, 586, 309, 4523, 484, 300, 729, 721, 366, 1858, 281, 536, 437, 436, 486, 312, 570, 51784], "temperature": 0.0, "avg_logprob": -0.0672331862979465, "compression_ratio": 1.9259259259259258, "no_speech_prob": 0.0026719465386122465}, {"id": 416, "seek": 263268, "start": 2632.7599999999998, "end": 2637.8799999999997, "text": " let's just look at the difference from the ones above i've just swapped the order of the cross", "tokens": [50368, 718, 311, 445, 574, 412, 264, 2649, 490, 264, 2306, 3673, 741, 600, 445, 50011, 264, 1668, 295, 264, 3278, 50624], "temperature": 0.0, "avg_logprob": -0.0667752328809801, "compression_ratio": 1.8756218905472637, "no_speech_prob": 0.0027548696380108595}, {"id": 417, "seek": 263268, "start": 2637.8799999999997, "end": 2644.68, "text": " product and we know that when we oops we know that when we swap the order of a cross product", "tokens": [50624, 1674, 293, 321, 458, 300, 562, 321, 34166, 321, 458, 300, 562, 321, 18135, 264, 1668, 295, 257, 3278, 1674, 50964], "temperature": 0.0, "avg_logprob": -0.0667752328809801, "compression_ratio": 1.8756218905472637, "no_speech_prob": 0.0027548696380108595}, {"id": 418, "seek": 263268, "start": 2644.68, "end": 2650.9199999999996, "text": " we introduce a minus sign so if the top three cases were equal to 18 the bottom three cases", "tokens": [50964, 321, 5366, 257, 3175, 1465, 370, 498, 264, 1192, 1045, 3331, 645, 2681, 281, 2443, 264, 2767, 1045, 3331, 51276], "temperature": 0.0, "avg_logprob": -0.0667752328809801, "compression_ratio": 1.8756218905472637, "no_speech_prob": 0.0027548696380108595}, {"id": 419, "seek": 263268, "start": 2650.9199999999996, "end": 2658.2, "text": " must be equal to each other and equal to minus 18 and in general uh this is the same rule for all", "tokens": [51276, 1633, 312, 2681, 281, 1184, 661, 293, 2681, 281, 3175, 2443, 293, 294, 2674, 2232, 341, 307, 264, 912, 4978, 337, 439, 51640], "temperature": 0.0, "avg_logprob": -0.0667752328809801, "compression_ratio": 1.8756218905472637, "no_speech_prob": 0.0027548696380108595}, {"id": 420, "seek": 265820, "start": 2658.52, "end": 2664.2, "text": " uh uh scalar triple products your three of them are equal and three of them uh are equal to", "tokens": [50380, 2232, 2232, 39684, 15508, 3383, 428, 1045, 295, 552, 366, 2681, 293, 1045, 295, 552, 2232, 366, 2681, 281, 50664], "temperature": 0.0, "avg_logprob": -0.0670427148060132, "compression_ratio": 1.8564593301435406, "no_speech_prob": 0.04725721850991249}, {"id": 421, "seek": 265820, "start": 2664.2, "end": 2669.3999999999996, "text": " one another but equal to the minus of the first three so to speak and and how can you tell which", "tokens": [50664, 472, 1071, 457, 2681, 281, 264, 3175, 295, 264, 700, 1045, 370, 281, 1710, 293, 293, 577, 393, 291, 980, 597, 50924], "temperature": 0.0, "avg_logprob": -0.0670427148060132, "compression_ratio": 1.8564593301435406, "no_speech_prob": 0.04725721850991249}, {"id": 422, "seek": 265820, "start": 2669.3999999999996, "end": 2676.12, "text": " ones are equal it's helpful to write out this little cycle a b and c written in a circle like this", "tokens": [50924, 2306, 366, 2681, 309, 311, 4961, 281, 2464, 484, 341, 707, 6586, 257, 272, 293, 269, 3720, 294, 257, 6329, 411, 341, 51260], "temperature": 0.0, "avg_logprob": -0.0670427148060132, "compression_ratio": 1.8564593301435406, "no_speech_prob": 0.04725721850991249}, {"id": 423, "seek": 265820, "start": 2676.7599999999998, "end": 2683.96, "text": " if we are going around in a clockwise direction here b dot c cross a but that's clockwise around our", "tokens": [51292, 498, 321, 366, 516, 926, 294, 257, 35790, 3513, 510, 272, 5893, 269, 3278, 257, 457, 300, 311, 35790, 926, 527, 51652], "temperature": 0.0, "avg_logprob": -0.0670427148060132, "compression_ratio": 1.8564593301435406, "no_speech_prob": 0.04725721850991249}, {"id": 424, "seek": 268396, "start": 2683.96, "end": 2691.16, "text": " wheel then um and here's another one that's clockwise c dot a cross b those guys all belong", "tokens": [50364, 5589, 550, 1105, 293, 510, 311, 1071, 472, 300, 311, 35790, 269, 5893, 257, 3278, 272, 729, 1074, 439, 5784, 50724], "temperature": 0.0, "avg_logprob": -0.06447253602274348, "compression_ratio": 1.8916256157635467, "no_speech_prob": 0.007808863651007414}, {"id": 425, "seek": 268396, "start": 2691.16, "end": 2695.8, "text": " together so the guys that are in the clockwise direction all belong together and the anti-clockwise", "tokens": [50724, 1214, 370, 264, 1074, 300, 366, 294, 264, 35790, 3513, 439, 5784, 1214, 293, 264, 6061, 12, 48685, 50956], "temperature": 0.0, "avg_logprob": -0.06447253602274348, "compression_ratio": 1.8916256157635467, "no_speech_prob": 0.007808863651007414}, {"id": 426, "seek": 268396, "start": 2695.8, "end": 2703.4, "text": " guys they belong uh together and they're the minus of one another these two groups all right so um", "tokens": [50956, 1074, 436, 5784, 2232, 1214, 293, 436, 434, 264, 3175, 295, 472, 1071, 613, 732, 3935, 439, 558, 370, 1105, 51336], "temperature": 0.0, "avg_logprob": -0.06447253602274348, "compression_ratio": 1.8916256157635467, "no_speech_prob": 0.007808863651007414}, {"id": 427, "seek": 268396, "start": 2703.4, "end": 2709.7200000000003, "text": " that's uh that's i think all we need to do as practice for uh doing the scalar triple product", "tokens": [51336, 300, 311, 2232, 300, 311, 741, 519, 439, 321, 643, 281, 360, 382, 3124, 337, 2232, 884, 264, 39684, 15508, 1674, 51652], "temperature": 0.0, "avg_logprob": -0.06447253602274348, "compression_ratio": 1.8916256157635467, "no_speech_prob": 0.007808863651007414}, {"id": 428, "seek": 270972, "start": 2709.72, "end": 2714.12, "text": " and uh knowing what we ought to get let's think about something else i'm going to introduce you", "tokens": [50364, 293, 2232, 5276, 437, 321, 13416, 281, 483, 718, 311, 519, 466, 746, 1646, 741, 478, 516, 281, 5366, 291, 50584], "temperature": 0.0, "avg_logprob": -0.08490379569456749, "compression_ratio": 1.798165137614679, "no_speech_prob": 0.013005432672798634}, {"id": 429, "seek": 270972, "start": 2714.12, "end": 2719.56, "text": " to something called the parallely pipette uh that's why i say i'm not sure how to pronounce it", "tokens": [50584, 281, 746, 1219, 264, 8069, 736, 8489, 3007, 2232, 300, 311, 983, 741, 584, 741, 478, 406, 988, 577, 281, 19567, 309, 50856], "temperature": 0.0, "avg_logprob": -0.08490379569456749, "compression_ratio": 1.798165137614679, "no_speech_prob": 0.013005432672798634}, {"id": 430, "seek": 270972, "start": 2719.56, "end": 2726.12, "text": " parallely pipette anyway this guy is a three-dimensional shape but first i'm going to remind you of what", "tokens": [50856, 8069, 736, 8489, 3007, 4033, 341, 2146, 307, 257, 1045, 12, 18759, 3909, 457, 700, 741, 478, 516, 281, 4160, 291, 295, 437, 51184], "temperature": 0.0, "avg_logprob": -0.08490379569456749, "compression_ratio": 1.798165137614679, "no_speech_prob": 0.013005432672798634}, {"id": 431, "seek": 270972, "start": 2726.12, "end": 2733.64, "text": " a parallelogram looks like so here's a rectangle and here's a parallelogram that we get um if we", "tokens": [51184, 257, 8952, 12820, 1542, 411, 370, 510, 311, 257, 21930, 293, 510, 311, 257, 8952, 12820, 300, 321, 483, 1105, 498, 321, 51560], "temperature": 0.0, "avg_logprob": -0.08490379569456749, "compression_ratio": 1.798165137614679, "no_speech_prob": 0.013005432672798634}, {"id": 432, "seek": 273364, "start": 2733.64, "end": 2739.96, "text": " have uh the pairs of the sides are parallel to each other but they are not at right angle at", "tokens": [50364, 362, 2232, 264, 15494, 295, 264, 4881, 366, 8952, 281, 1184, 661, 457, 436, 366, 406, 412, 558, 5802, 412, 50680], "temperature": 0.0, "avg_logprob": -0.0689228197162071, "compression_ratio": 1.88, "no_speech_prob": 0.024402549490332603}, {"id": 433, "seek": 273364, "start": 2739.96, "end": 2748.12, "text": " right angles around the vertex now consider this rectangular box and let's tie it up there we are", "tokens": [50680, 558, 14708, 926, 264, 28162, 586, 1949, 341, 31167, 2424, 293, 718, 311, 7582, 309, 493, 456, 321, 366, 51088], "temperature": 0.0, "avg_logprob": -0.0689228197162071, "compression_ratio": 1.88, "no_speech_prob": 0.024402549490332603}, {"id": 434, "seek": 273364, "start": 2748.12, "end": 2756.52, "text": " and consider what happens if we uh build it out of edges that are in groups of parallel edges but", "tokens": [51088, 293, 1949, 437, 2314, 498, 321, 2232, 1322, 309, 484, 295, 8819, 300, 366, 294, 3935, 295, 8952, 8819, 457, 51508], "temperature": 0.0, "avg_logprob": -0.0689228197162071, "compression_ratio": 1.88, "no_speech_prob": 0.024402549490332603}, {"id": 435, "seek": 273364, "start": 2756.52, "end": 2762.2799999999997, "text": " are not all at right angles to each other so uh let's see if i can draw this reasonably", "tokens": [51508, 366, 406, 439, 412, 558, 14708, 281, 1184, 661, 370, 2232, 718, 311, 536, 498, 741, 393, 2642, 341, 23551, 51796], "temperature": 0.0, "avg_logprob": -0.0689228197162071, "compression_ratio": 1.88, "no_speech_prob": 0.024402549490332603}, {"id": 436, "seek": 276228, "start": 2762.92, "end": 2768.92, "text": " realistically as a three-dimensional object so i'm going to draw this and then i'm going to stress", "tokens": [50396, 40734, 382, 257, 1045, 12, 18759, 2657, 370, 741, 478, 516, 281, 2642, 341, 293, 550, 741, 478, 516, 281, 4244, 50696], "temperature": 0.0, "avg_logprob": -0.04898151719426534, "compression_ratio": 1.9183673469387754, "no_speech_prob": 0.001475317170843482}, {"id": 437, "seek": 276228, "start": 2768.92, "end": 2775.6400000000003, "text": " which edges are parallel to each other all right here we are okay let me change color", "tokens": [50696, 597, 8819, 366, 8952, 281, 1184, 661, 439, 558, 510, 321, 366, 1392, 718, 385, 1319, 2017, 51032], "temperature": 0.0, "avg_logprob": -0.04898151719426534, "compression_ratio": 1.9183673469387754, "no_speech_prob": 0.001475317170843482}, {"id": 438, "seek": 276228, "start": 2775.6400000000003, "end": 2782.6800000000003, "text": " so consider these four edges of the object are all parallel to each other in exactly the same way", "tokens": [51032, 370, 1949, 613, 1451, 8819, 295, 264, 2657, 366, 439, 8952, 281, 1184, 661, 294, 2293, 264, 912, 636, 51384], "temperature": 0.0, "avg_logprob": -0.04898151719426534, "compression_ratio": 1.9183673469387754, "no_speech_prob": 0.001475317170843482}, {"id": 439, "seek": 276228, "start": 2782.6800000000003, "end": 2789.1600000000003, "text": " that in our simple parallelogram these opposing edges were parallel and then these four edges", "tokens": [51384, 300, 294, 527, 2199, 8952, 12820, 613, 27890, 8819, 645, 8952, 293, 550, 613, 1451, 8819, 51708], "temperature": 0.0, "avg_logprob": -0.04898151719426534, "compression_ratio": 1.9183673469387754, "no_speech_prob": 0.001475317170843482}, {"id": 440, "seek": 278916, "start": 2789.72, "end": 2794.92, "text": " are all parallel to one another again in our 3d shape just as these two edges are parallel", "tokens": [50392, 366, 439, 8952, 281, 472, 1071, 797, 294, 527, 805, 67, 3909, 445, 382, 613, 732, 8819, 366, 8952, 50652], "temperature": 0.0, "avg_logprob": -0.053099873301747084, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0008293341379612684}, {"id": 441, "seek": 278916, "start": 2795.72, "end": 2801.64, "text": " and then we have another set these four edges here in yellow are also going to be parallel to one", "tokens": [50692, 293, 550, 321, 362, 1071, 992, 613, 1451, 8819, 510, 294, 5566, 366, 611, 516, 281, 312, 8952, 281, 472, 50988], "temperature": 0.0, "avg_logprob": -0.053099873301747084, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0008293341379612684}, {"id": 442, "seek": 278916, "start": 2801.64, "end": 2810.04, "text": " another that object is a particular three-dimensional solid it's clearly a generalization of the uh", "tokens": [50988, 1071, 300, 2657, 307, 257, 1729, 1045, 12, 18759, 5100, 309, 311, 4448, 257, 2674, 2144, 295, 264, 2232, 51408], "temperature": 0.0, "avg_logprob": -0.053099873301747084, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0008293341379612684}, {"id": 443, "seek": 278916, "start": 2810.04, "end": 2816.2799999999997, "text": " of the box in that we're allowing ourselves to um have slanting edges if we want to now let's introduce", "tokens": [51408, 295, 264, 2424, 294, 300, 321, 434, 8293, 4175, 281, 1105, 362, 1061, 18571, 8819, 498, 321, 528, 281, 586, 718, 311, 5366, 51720], "temperature": 0.0, "avg_logprob": -0.053099873301747084, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0008293341379612684}, {"id": 444, "seek": 281628, "start": 2816.28, "end": 2821.7200000000003, "text": " three vectors a b and c to represent these three kinds of edges you see that all the green edges", "tokens": [50364, 1045, 18875, 257, 272, 293, 269, 281, 2906, 613, 1045, 3685, 295, 8819, 291, 536, 300, 439, 264, 3092, 8819, 50636], "temperature": 0.0, "avg_logprob": -0.054938497750655464, "compression_ratio": 1.7914691943127963, "no_speech_prob": 0.004536765627563}, {"id": 445, "seek": 281628, "start": 2821.7200000000003, "end": 2831.4, "text": " are the same vector a and so on what happens if we do a dot b cross c that it turns out the", "tokens": [50636, 366, 264, 912, 8062, 257, 293, 370, 322, 437, 2314, 498, 321, 360, 257, 5893, 272, 3278, 269, 300, 309, 4523, 484, 264, 51120], "temperature": 0.0, "avg_logprob": -0.054938497750655464, "compression_ratio": 1.7914691943127963, "no_speech_prob": 0.004536765627563}, {"id": 446, "seek": 281628, "start": 2831.4, "end": 2837.88, "text": " magnitude of that if we drop the sign then the magnitude is just the volume of this shape so it", "tokens": [51120, 15668, 295, 300, 498, 321, 3270, 264, 1465, 550, 264, 15668, 307, 445, 264, 5523, 295, 341, 3909, 370, 309, 51444], "temperature": 0.0, "avg_logprob": -0.054938497750655464, "compression_ratio": 1.7914691943127963, "no_speech_prob": 0.004536765627563}, {"id": 447, "seek": 281628, "start": 2837.88, "end": 2844.44, "text": " contains uh uh of course the simple case of a rectangular box as a special case but this will", "tokens": [51444, 8306, 2232, 2232, 295, 1164, 264, 2199, 1389, 295, 257, 31167, 2424, 382, 257, 2121, 1389, 457, 341, 486, 51772], "temperature": 0.0, "avg_logprob": -0.054938497750655464, "compression_ratio": 1.7914691943127963, "no_speech_prob": 0.004536765627563}, {"id": 448, "seek": 284444, "start": 2844.44, "end": 2851.8, "text": " work for any parallel parallel pipette uh that we care to think of with those three vectors", "tokens": [50364, 589, 337, 604, 8952, 8952, 8489, 3007, 2232, 300, 321, 1127, 281, 519, 295, 365, 729, 1045, 18875, 50732], "temperature": 0.0, "avg_logprob": -0.10118988313172993, "compression_ratio": 1.7305699481865284, "no_speech_prob": 0.001133075333200395}, {"id": 449, "seek": 284444, "start": 2851.8, "end": 2855.2400000000002, "text": " can always be combined with the scalar triple product to give us the volume", "tokens": [50732, 393, 1009, 312, 9354, 365, 264, 39684, 15508, 1674, 281, 976, 505, 264, 5523, 50904], "temperature": 0.0, "avg_logprob": -0.10118988313172993, "compression_ratio": 1.7305699481865284, "no_speech_prob": 0.001133075333200395}, {"id": 450, "seek": 284444, "start": 2857.08, "end": 2864.04, "text": " and that's the end of the video welcome to the uh third um topic in this video series", "tokens": [50996, 293, 300, 311, 264, 917, 295, 264, 960, 2928, 281, 264, 2232, 2636, 1105, 4829, 294, 341, 960, 2638, 51344], "temperature": 0.0, "avg_logprob": -0.10118988313172993, "compression_ratio": 1.7305699481865284, "no_speech_prob": 0.001133075333200395}, {"id": 451, "seek": 284444, "start": 2864.04, "end": 2870.28, "text": " where i'll be introducing the matrix and thinking about what is a matrix product", "tokens": [51344, 689, 741, 603, 312, 15424, 264, 8141, 293, 1953, 466, 437, 307, 257, 8141, 1674, 51656], "temperature": 0.0, "avg_logprob": -0.10118988313172993, "compression_ratio": 1.7305699481865284, "no_speech_prob": 0.001133075333200395}, {"id": 452, "seek": 287028, "start": 2871.1600000000003, "end": 2879.2400000000002, "text": " all right so essentially a matrix is nothing more than a grid of numbers simply a grid of", "tokens": [50408, 439, 558, 370, 4476, 257, 8141, 307, 1825, 544, 813, 257, 10748, 295, 3547, 2935, 257, 10748, 295, 50812], "temperature": 0.0, "avg_logprob": -0.05056260932575573, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.006189666222780943}, {"id": 453, "seek": 287028, "start": 2879.2400000000002, "end": 2887.8, "text": " numbers that could be positive or negative or fractional or zeros and when we uh specify the shape", "tokens": [50812, 3547, 300, 727, 312, 3353, 420, 3671, 420, 17948, 1966, 420, 35193, 293, 562, 321, 2232, 16500, 264, 3909, 51240], "temperature": 0.0, "avg_logprob": -0.05056260932575573, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.006189666222780943}, {"id": 454, "seek": 287028, "start": 2887.8, "end": 2895.8, "text": " of our grid of numbers or we do so simply by stating how many rows we have and how many columns", "tokens": [51240, 295, 527, 10748, 295, 3547, 420, 321, 360, 370, 2935, 538, 26688, 577, 867, 13241, 321, 362, 293, 577, 867, 13766, 51640], "temperature": 0.0, "avg_logprob": -0.05056260932575573, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.006189666222780943}, {"id": 455, "seek": 289580, "start": 2896.6000000000004, "end": 2903.48, "text": " so we're gonna hear about rows and columns a lot in this video um in this video course i'm going", "tokens": [50404, 370, 321, 434, 799, 1568, 466, 13241, 293, 13766, 257, 688, 294, 341, 960, 1105, 294, 341, 960, 1164, 741, 478, 516, 50748], "temperature": 0.0, "avg_logprob": -0.06766164143880209, "compression_ratio": 1.7515151515151515, "no_speech_prob": 0.0029751905240118504}, {"id": 456, "seek": 289580, "start": 2903.48, "end": 2911.2400000000002, "text": " to use a particular uh way of writing a matrix as a symbol and i need to do that i'm going to just", "tokens": [50748, 281, 764, 257, 1729, 2232, 636, 295, 3579, 257, 8141, 382, 257, 5986, 293, 741, 643, 281, 360, 300, 741, 478, 516, 281, 445, 51136], "temperature": 0.0, "avg_logprob": -0.06766164143880209, "compression_ratio": 1.7515151515151515, "no_speech_prob": 0.0029751905240118504}, {"id": 457, "seek": 289580, "start": 2911.2400000000002, "end": 2921.4, "text": " use a capital letter and i'm going to the letter is going to be double underlined i'll double", "tokens": [51136, 764, 257, 4238, 5063, 293, 741, 478, 516, 281, 264, 5063, 307, 516, 281, 312, 3834, 833, 13564, 741, 603, 3834, 51644], "temperature": 0.0, "avg_logprob": -0.06766164143880209, "compression_ratio": 1.7515151515151515, "no_speech_prob": 0.0029751905240118504}, {"id": 458, "seek": 292140, "start": 2921.4, "end": 2929.2400000000002, "text": " underline that symbol so here we go a underline that means the matrix a and how would we write it", "tokens": [50364, 833, 1889, 300, 5986, 370, 510, 321, 352, 257, 833, 1889, 300, 1355, 264, 8141, 257, 293, 577, 576, 321, 2464, 309, 50756], "temperature": 0.0, "avg_logprob": -0.07589472101089802, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.007564265746623278}, {"id": 459, "seek": 292140, "start": 2930.36, "end": 2936.36, "text": " so that's uh just like this essentially a grid of numbers and we put it in curvy brackets just", "tokens": [50812, 370, 300, 311, 2232, 445, 411, 341, 4476, 257, 10748, 295, 3547, 293, 321, 829, 309, 294, 1262, 11869, 26179, 445, 51112], "temperature": 0.0, "avg_logprob": -0.07589472101089802, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.007564265746623278}, {"id": 460, "seek": 292140, "start": 2936.36, "end": 2941.7200000000003, "text": " to give it some structure so this is three rows two columns that one here's a matrix b", "tokens": [51112, 281, 976, 309, 512, 3877, 370, 341, 307, 1045, 13241, 732, 13766, 300, 472, 510, 311, 257, 8141, 272, 51380], "temperature": 0.0, "avg_logprob": -0.07589472101089802, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.007564265746623278}, {"id": 461, "seek": 292140, "start": 2941.7200000000003, "end": 2948.12, "text": " let's make it a square matrix let's put in a fraction to show we can minus 10 zero okay so", "tokens": [51380, 718, 311, 652, 309, 257, 3732, 8141, 718, 311, 829, 294, 257, 14135, 281, 855, 321, 393, 3175, 1266, 4018, 1392, 370, 51700], "temperature": 0.0, "avg_logprob": -0.07589472101089802, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.007564265746623278}, {"id": 462, "seek": 294812, "start": 2948.12, "end": 2954.44, "text": " there are two different examples of a matrix easy enough but it gets more interesting when we try and", "tokens": [50364, 456, 366, 732, 819, 5110, 295, 257, 8141, 1858, 1547, 457, 309, 2170, 544, 1880, 562, 321, 853, 293, 50680], "temperature": 0.0, "avg_logprob": -0.08964813760964267, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.0005091546336188912}, {"id": 463, "seek": 294812, "start": 2954.44, "end": 2962.92, "text": " combine them so i want to talk about matrix multiplication addition is simple and it's", "tokens": [50680, 10432, 552, 370, 741, 528, 281, 751, 466, 8141, 27290, 4500, 307, 2199, 293, 309, 311, 51104], "temperature": 0.0, "avg_logprob": -0.08964813760964267, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.0005091546336188912}, {"id": 464, "seek": 294812, "start": 2962.92, "end": 2971.64, "text": " just an element by element addition but multiplication is not so simple so here's how we write it", "tokens": [51104, 445, 364, 4478, 538, 4478, 4500, 457, 27290, 307, 406, 370, 2199, 370, 510, 311, 577, 321, 2464, 309, 51540], "temperature": 0.0, "avg_logprob": -0.08964813760964267, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.0005091546336188912}, {"id": 465, "seek": 294812, "start": 2971.64, "end": 2977.88, "text": " the multiplication of matrix a by matrix b is simply written like this a b and it gives us", "tokens": [51540, 264, 27290, 295, 8141, 257, 538, 8141, 272, 307, 2935, 3720, 411, 341, 257, 272, 293, 309, 2709, 505, 51852], "temperature": 0.0, "avg_logprob": -0.08964813760964267, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.0005091546336188912}, {"id": 466, "seek": 297788, "start": 2977.88, "end": 2984.76, "text": " some new matrix c which may be a difference shape from both a and b as we'll see let's give ourselves", "tokens": [50364, 512, 777, 8141, 269, 597, 815, 312, 257, 2649, 3909, 490, 1293, 257, 293, 272, 382, 321, 603, 536, 718, 311, 976, 4175, 50708], "temperature": 0.0, "avg_logprob": -0.07631862825817531, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.000561215216293931}, {"id": 467, "seek": 297788, "start": 2984.76, "end": 2995.7200000000003, "text": " a couple of examples um three zero minus one two three four and matrix b can be just um one two zero", "tokens": [50708, 257, 1916, 295, 5110, 1105, 1045, 4018, 3175, 472, 732, 1045, 1451, 293, 8141, 272, 393, 312, 445, 1105, 472, 732, 4018, 51256], "temperature": 0.0, "avg_logprob": -0.07631862825817531, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.000561215216293931}, {"id": 468, "seek": 297788, "start": 2995.7200000000003, "end": 3002.44, "text": " minus three so there are our two matrices here i've chosen them such that a b that multiplication", "tokens": [51256, 3175, 1045, 370, 456, 366, 527, 732, 32284, 510, 741, 600, 8614, 552, 1270, 300, 257, 272, 300, 27290, 51592], "temperature": 0.0, "avg_logprob": -0.07631862825817531, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.000561215216293931}, {"id": 469, "seek": 300244, "start": 3002.44, "end": 3009.0, "text": " will work it will exist but actually if we try it the other way around it will turn out that the", "tokens": [50364, 486, 589, 309, 486, 2514, 457, 767, 498, 321, 853, 309, 264, 661, 636, 926, 309, 486, 1261, 484, 300, 264, 50692], "temperature": 0.0, "avg_logprob": -0.07032238735872157, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.016121847555041313}, {"id": 470, "seek": 300244, "start": 3009.0, "end": 3015.0, "text": " multiple the multiple of those two matrices doesn't even exist it's not a well-defined thing so this", "tokens": [50692, 3866, 264, 3866, 295, 729, 732, 32284, 1177, 380, 754, 2514, 309, 311, 406, 257, 731, 12, 37716, 551, 370, 341, 50992], "temperature": 0.0, "avg_logprob": -0.07032238735872157, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.016121847555041313}, {"id": 471, "seek": 300244, "start": 3015.0, "end": 3021.32, "text": " is an extreme case of an operation uh not being reversible in its order in other words matrix", "tokens": [50992, 307, 364, 8084, 1389, 295, 364, 6916, 2232, 406, 885, 44788, 294, 1080, 1668, 294, 661, 2283, 8141, 51308], "temperature": 0.0, "avg_logprob": -0.07032238735872157, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.016121847555041313}, {"id": 472, "seek": 302132, "start": 3021.32, "end": 3031.88, "text": " multiplication is not commutative okay so uh let's just erase that and go ahead and see", "tokens": [50364, 27290, 307, 406, 800, 325, 1166, 1392, 370, 2232, 718, 311, 445, 23525, 300, 293, 352, 2286, 293, 536, 50892], "temperature": 0.0, "avg_logprob": -0.0789860681045887, "compression_ratio": 1.5040650406504066, "no_speech_prob": 0.018825504928827286}, {"id": 473, "seek": 302132, "start": 3032.76, "end": 3042.44, "text": " how the multiplication actually works the trick is to multiply the each row of matrix a the first", "tokens": [50936, 577, 264, 27290, 767, 1985, 264, 4282, 307, 281, 12972, 264, 1184, 5386, 295, 8141, 257, 264, 700, 51420], "temperature": 0.0, "avg_logprob": -0.0789860681045887, "compression_ratio": 1.5040650406504066, "no_speech_prob": 0.018825504928827286}, {"id": 474, "seek": 304244, "start": 3042.44, "end": 3052.12, "text": " matrix by each entire column of matrix b what does that mean well let's write out our example", "tokens": [50364, 8141, 538, 1184, 2302, 7738, 295, 8141, 272, 437, 775, 300, 914, 731, 718, 311, 2464, 484, 527, 1365, 50848], "temperature": 0.0, "avg_logprob": -0.07640436421269955, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.07046851515769958}, {"id": 475, "seek": 304244, "start": 3052.12, "end": 3061.7200000000003, "text": " three two zero three minus four minus one minus one four uh one zero two minus three now i know", "tokens": [50848, 1045, 732, 4018, 1045, 3175, 1451, 3175, 472, 3175, 472, 1451, 2232, 472, 4018, 732, 3175, 1045, 586, 741, 458, 51328], "temperature": 0.0, "avg_logprob": -0.07640436421269955, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.07046851515769958}, {"id": 476, "seek": 304244, "start": 3061.7200000000003, "end": 3067.64, "text": " that this guy is going to have uh three rows and two columns the output matrix you'll see why in a", "tokens": [51328, 300, 341, 2146, 307, 516, 281, 362, 2232, 1045, 13241, 293, 732, 13766, 264, 5598, 8141, 291, 603, 536, 983, 294, 257, 51624], "temperature": 0.0, "avg_logprob": -0.07640436421269955, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.07046851515769958}, {"id": 477, "seek": 306764, "start": 3067.64, "end": 3073.48, "text": " bit i'll just put these blanks in for now the question is how to work out each of these numbers", "tokens": [50364, 857, 741, 603, 445, 829, 613, 8247, 82, 294, 337, 586, 264, 1168, 307, 577, 281, 589, 484, 1184, 295, 613, 3547, 50656], "temperature": 0.0, "avg_logprob": -0.038976818624168935, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.014933187514543533}, {"id": 478, "seek": 306764, "start": 3073.48, "end": 3080.2799999999997, "text": " let's choose this one first okay now notice this guy's address if you like is row one column one", "tokens": [50656, 718, 311, 2826, 341, 472, 700, 1392, 586, 3449, 341, 2146, 311, 2985, 498, 291, 411, 307, 5386, 472, 7738, 472, 50996], "temperature": 0.0, "avg_logprob": -0.038976818624168935, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.014933187514543533}, {"id": 479, "seek": 306764, "start": 3080.2799999999997, "end": 3086.92, "text": " of the output matrix c i'm going to need to in order to work this guy out i'll need to look at", "tokens": [50996, 295, 264, 5598, 8141, 269, 741, 478, 516, 281, 643, 281, 294, 1668, 281, 589, 341, 2146, 484, 741, 603, 643, 281, 574, 412, 51328], "temperature": 0.0, "avg_logprob": -0.038976818624168935, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.014933187514543533}, {"id": 480, "seek": 306764, "start": 3086.92, "end": 3097.3199999999997, "text": " the whole of um row one in the first matrix in matrix a and the whole of column one in the matrix", "tokens": [51328, 264, 1379, 295, 1105, 5386, 472, 294, 264, 700, 8141, 294, 8141, 257, 293, 264, 1379, 295, 7738, 472, 294, 264, 8141, 51848], "temperature": 0.0, "avg_logprob": -0.038976818624168935, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.014933187514543533}, {"id": 481, "seek": 309732, "start": 3097.88, "end": 3103.88, "text": " i'll need to combine those guys and how do i combine them i just multiply element by element as i go", "tokens": [50392, 741, 603, 643, 281, 10432, 729, 1074, 293, 577, 360, 741, 10432, 552, 741, 445, 12972, 4478, 538, 4478, 382, 741, 352, 50692], "temperature": 0.0, "avg_logprob": -0.0665861090568647, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.012805852107703686}, {"id": 482, "seek": 309732, "start": 3103.88, "end": 3111.0, "text": " along the row and down the column so three times one just gives me three and then i add on the next", "tokens": [50692, 2051, 264, 5386, 293, 760, 264, 7738, 370, 1045, 1413, 472, 445, 2709, 385, 1045, 293, 550, 741, 909, 322, 264, 958, 51048], "temperature": 0.0, "avg_logprob": -0.0665861090568647, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.012805852107703686}, {"id": 483, "seek": 309732, "start": 3111.0, "end": 3118.52, "text": " combination two times two is four so three plus four is going to give me seven that's how i combine", "tokens": [51048, 6562, 732, 1413, 732, 307, 1451, 370, 1045, 1804, 1451, 307, 516, 281, 976, 385, 3407, 300, 311, 577, 741, 10432, 51424], "temperature": 0.0, "avg_logprob": -0.0665861090568647, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.012805852107703686}, {"id": 484, "seek": 311852, "start": 3118.52, "end": 3127.88, "text": " those two i'll jump back here and i'll erase there and i'll just put in my seven all right so that's", "tokens": [50364, 729, 732, 741, 603, 3012, 646, 510, 293, 741, 603, 23525, 456, 293, 741, 603, 445, 829, 294, 452, 3407, 439, 558, 370, 300, 311, 50832], "temperature": 0.0, "avg_logprob": -0.04560302507759321, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.05417129024863243}, {"id": 485, "seek": 311852, "start": 3127.88, "end": 3133.72, "text": " the the general way it works let's go ahead and do the other elements of our matrix c let's do this", "tokens": [50832, 264, 264, 2674, 636, 309, 1985, 718, 311, 352, 2286, 293, 360, 264, 661, 4959, 295, 527, 8141, 269, 718, 311, 360, 341, 51124], "temperature": 0.0, "avg_logprob": -0.04560302507759321, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.05417129024863243}, {"id": 486, "seek": 311852, "start": 3133.72, "end": 3140.04, "text": " one notice this is still row one so i want that first row it's now column two that's its address", "tokens": [51124, 472, 3449, 341, 307, 920, 5386, 472, 370, 741, 528, 300, 700, 5386, 309, 311, 586, 7738, 732, 300, 311, 1080, 2985, 51440], "temperature": 0.0, "avg_logprob": -0.04560302507759321, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.05417129024863243}, {"id": 487, "seek": 311852, "start": 3140.04, "end": 3146.04, "text": " so i want the second column three times zero and two times minus three is how i'll work that out", "tokens": [51440, 370, 741, 528, 264, 1150, 7738, 1045, 1413, 4018, 293, 732, 1413, 3175, 1045, 307, 577, 741, 603, 589, 300, 484, 51740], "temperature": 0.0, "avg_logprob": -0.04560302507759321, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.05417129024863243}, {"id": 488, "seek": 314604, "start": 3146.04, "end": 3153.48, "text": " and that's just going to be minus six so let me jump backwards um and erase my blank symbol and", "tokens": [50364, 293, 300, 311, 445, 516, 281, 312, 3175, 2309, 370, 718, 385, 3012, 12204, 1105, 293, 23525, 452, 8247, 5986, 293, 50736], "temperature": 0.0, "avg_logprob": -0.052008782823880516, "compression_ratio": 1.7442922374429224, "no_speech_prob": 0.006999787408858538}, {"id": 489, "seek": 314604, "start": 3153.48, "end": 3160.84, "text": " write in minus six okay maybe i went a bit fast let me um spell this one out more explicitly okay", "tokens": [50736, 2464, 294, 3175, 2309, 1392, 1310, 741, 1437, 257, 857, 2370, 718, 385, 1105, 9827, 341, 472, 484, 544, 20803, 1392, 51104], "temperature": 0.0, "avg_logprob": -0.052008782823880516, "compression_ratio": 1.7442922374429224, "no_speech_prob": 0.006999787408858538}, {"id": 490, "seek": 314604, "start": 3160.84, "end": 3167.4, "text": " so here i now have row two column one that's the address of that guy i want all of row two", "tokens": [51104, 370, 510, 741, 586, 362, 5386, 732, 7738, 472, 300, 311, 264, 2985, 295, 300, 2146, 741, 528, 439, 295, 5386, 732, 51432], "temperature": 0.0, "avg_logprob": -0.052008782823880516, "compression_ratio": 1.7442922374429224, "no_speech_prob": 0.006999787408858538}, {"id": 491, "seek": 314604, "start": 3167.4, "end": 3173.08, "text": " and all of column one i want to look at those guys and i want to multiply along so zero times one", "tokens": [51432, 293, 439, 295, 7738, 472, 741, 528, 281, 574, 412, 729, 1074, 293, 741, 528, 281, 12972, 2051, 370, 4018, 1413, 472, 51716], "temperature": 0.0, "avg_logprob": -0.052008782823880516, "compression_ratio": 1.7442922374429224, "no_speech_prob": 0.006999787408858538}, {"id": 492, "seek": 317308, "start": 3173.08, "end": 3179.64, "text": " and three times two that's going to give us just six in total when we add them up so let me erase", "tokens": [50364, 293, 1045, 1413, 732, 300, 311, 516, 281, 976, 505, 445, 2309, 294, 3217, 562, 321, 909, 552, 493, 370, 718, 385, 23525, 50692], "temperature": 0.0, "avg_logprob": -0.061043332752428556, "compression_ratio": 1.9631578947368422, "no_speech_prob": 0.003648804035037756}, {"id": 493, "seek": 317308, "start": 3179.64, "end": 3186.2799999999997, "text": " and put in six and now this element that's uh row two column two so i want all of row two", "tokens": [50692, 293, 829, 294, 2309, 293, 586, 341, 4478, 300, 311, 2232, 5386, 732, 7738, 732, 370, 741, 528, 439, 295, 5386, 732, 51024], "temperature": 0.0, "avg_logprob": -0.061043332752428556, "compression_ratio": 1.9631578947368422, "no_speech_prob": 0.003648804035037756}, {"id": 494, "seek": 317308, "start": 3186.2799999999997, "end": 3194.6, "text": " want all of column two and multiply zero times zero and uh three times minus three is minus nine", "tokens": [51024, 528, 439, 295, 7738, 732, 293, 12972, 4018, 1413, 4018, 293, 2232, 1045, 1413, 3175, 1045, 307, 3175, 4949, 51440], "temperature": 0.0, "avg_logprob": -0.061043332752428556, "compression_ratio": 1.9631578947368422, "no_speech_prob": 0.003648804035037756}, {"id": 495, "seek": 317308, "start": 3194.6, "end": 3200.44, "text": " so that's going to be a minus nine if i go backwards and just put in minus nine here now", "tokens": [51440, 370, 300, 311, 516, 281, 312, 257, 3175, 4949, 498, 741, 352, 12204, 293, 445, 829, 294, 3175, 4949, 510, 586, 51732], "temperature": 0.0, "avg_logprob": -0.061043332752428556, "compression_ratio": 1.9631578947368422, "no_speech_prob": 0.003648804035037756}, {"id": 496, "seek": 320044, "start": 3200.44, "end": 3206.12, "text": " we're finally on to the final third row so we're going to want the third row of a and in this case", "tokens": [50364, 321, 434, 2721, 322, 281, 264, 2572, 2636, 5386, 370, 321, 434, 516, 281, 528, 264, 2636, 5386, 295, 257, 293, 294, 341, 1389, 50648], "temperature": 0.0, "avg_logprob": -0.06926955971666561, "compression_ratio": 1.95, "no_speech_prob": 0.009837386198341846}, {"id": 497, "seek": 320044, "start": 3206.12, "end": 3212.12, "text": " the first column so that's one times minus one and four times two is eight that's going to be seven", "tokens": [50648, 264, 700, 7738, 370, 300, 311, 472, 1413, 3175, 472, 293, 1451, 1413, 732, 307, 3180, 300, 311, 516, 281, 312, 3407, 50948], "temperature": 0.0, "avg_logprob": -0.06926955971666561, "compression_ratio": 1.95, "no_speech_prob": 0.009837386198341846}, {"id": 498, "seek": 320044, "start": 3212.12, "end": 3218.6, "text": " minus one plus eight and then finally last row last column uh four times minus three is twelve", "tokens": [50948, 3175, 472, 1804, 3180, 293, 550, 2721, 1036, 5386, 1036, 7738, 2232, 1451, 1413, 3175, 1045, 307, 14390, 51272], "temperature": 0.0, "avg_logprob": -0.06926955971666561, "compression_ratio": 1.95, "no_speech_prob": 0.009837386198341846}, {"id": 499, "seek": 320044, "start": 3218.6, "end": 3227.56, "text": " and zero minus twelve all right so there we are that is our matrix product c formed by combining", "tokens": [51272, 293, 4018, 3175, 14390, 439, 558, 370, 456, 321, 366, 300, 307, 527, 8141, 1674, 269, 8693, 538, 21928, 51720], "temperature": 0.0, "avg_logprob": -0.06926955971666561, "compression_ratio": 1.95, "no_speech_prob": 0.009837386198341846}, {"id": 500, "seek": 322756, "start": 3227.56, "end": 3232.12, "text": " each row in each column it's quite a lot of work and it would be even more if we had bigger matrices", "tokens": [50364, 1184, 5386, 294, 1184, 7738, 309, 311, 1596, 257, 688, 295, 589, 293, 309, 576, 312, 754, 544, 498, 321, 632, 3801, 32284, 50592], "temperature": 0.0, "avg_logprob": -0.07021843170633121, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.03782491758465767}, {"id": 501, "seek": 322756, "start": 3232.84, "end": 3238.2799999999997, "text": " but we said that um we get something quite different if we try multiplying a and b in the", "tokens": [50628, 457, 321, 848, 300, 1105, 321, 483, 746, 1596, 819, 498, 321, 853, 30955, 257, 293, 272, 294, 264, 50900], "temperature": 0.0, "avg_logprob": -0.07021843170633121, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.03782491758465767}, {"id": 502, "seek": 322756, "start": 3238.2799999999997, "end": 3245.32, "text": " other order so let's go ahead and do that now what if we have one zero two minus three that's b", "tokens": [50900, 661, 1668, 370, 718, 311, 352, 2286, 293, 360, 300, 586, 437, 498, 321, 362, 472, 4018, 732, 3175, 1045, 300, 311, 272, 51252], "temperature": 0.0, "avg_logprob": -0.07021843170633121, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.03782491758465767}, {"id": 503, "seek": 322756, "start": 3245.88, "end": 3253.72, "text": " on to three two zero three minus one four that's a so we can try it we try and multiply row one", "tokens": [51280, 322, 281, 1045, 732, 4018, 1045, 3175, 472, 1451, 300, 311, 257, 370, 321, 393, 853, 309, 321, 853, 293, 12972, 5386, 472, 51672], "temperature": 0.0, "avg_logprob": -0.07021843170633121, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.03782491758465767}, {"id": 504, "seek": 325372, "start": 3253.72, "end": 3259.24, "text": " by column one and we immediately find we cannot because they are a different length a different", "tokens": [50364, 538, 7738, 472, 293, 321, 4258, 915, 321, 2644, 570, 436, 366, 257, 819, 4641, 257, 819, 50640], "temperature": 0.0, "avg_logprob": -0.040148785535027, "compression_ratio": 1.8142857142857143, "no_speech_prob": 0.023604171350598335}, {"id": 505, "seek": 325372, "start": 3259.24, "end": 3265.8799999999997, "text": " list so there is no third element of our row to multiply with our third element of the column", "tokens": [50640, 1329, 370, 456, 307, 572, 2636, 4478, 295, 527, 5386, 281, 12972, 365, 527, 2636, 4478, 295, 264, 7738, 50972], "temperature": 0.0, "avg_logprob": -0.040148785535027, "compression_ratio": 1.8142857142857143, "no_speech_prob": 0.023604171350598335}, {"id": 506, "seek": 325372, "start": 3265.8799999999997, "end": 3272.68, "text": " just pause the video here um and have a look at that and see why that must be impossible for us", "tokens": [50972, 445, 10465, 264, 960, 510, 1105, 293, 362, 257, 574, 412, 300, 293, 536, 983, 300, 1633, 312, 6243, 337, 505, 51312], "temperature": 0.0, "avg_logprob": -0.040148785535027, "compression_ratio": 1.8142857142857143, "no_speech_prob": 0.023604171350598335}, {"id": 507, "seek": 325372, "start": 3272.68, "end": 3280.2, "text": " and so sometimes matrix multiplication is impossible all right let's look at a few uh little um", "tokens": [51312, 293, 370, 2171, 8141, 27290, 307, 6243, 439, 558, 718, 311, 574, 412, 257, 1326, 2232, 707, 1105, 51688], "temperature": 0.0, "avg_logprob": -0.040148785535027, "compression_ratio": 1.8142857142857143, "no_speech_prob": 0.023604171350598335}, {"id": 508, "seek": 328020, "start": 3280.2, "end": 3284.2799999999997, "text": " further examples and you may want to pause the video to convince yourself in each case it's true", "tokens": [50364, 3052, 5110, 293, 291, 815, 528, 281, 10465, 264, 960, 281, 13447, 1803, 294, 1184, 1389, 309, 311, 2074, 50568], "temperature": 0.0, "avg_logprob": -0.034058923071080986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.004126488696783781}, {"id": 509, "seek": 328020, "start": 3284.2799999999997, "end": 3291.08, "text": " is this thing possible for example pause it and think this one is not possible this is not possible", "tokens": [50568, 307, 341, 551, 1944, 337, 1365, 10465, 309, 293, 519, 341, 472, 307, 406, 1944, 341, 307, 406, 1944, 50908], "temperature": 0.0, "avg_logprob": -0.034058923071080986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.004126488696783781}, {"id": 510, "seek": 328020, "start": 3291.08, "end": 3298.04, "text": " again because there are two elements in say the first row of a and three elements in the column", "tokens": [50908, 797, 570, 456, 366, 732, 4959, 294, 584, 264, 700, 5386, 295, 257, 293, 1045, 4959, 294, 264, 7738, 51256], "temperature": 0.0, "avg_logprob": -0.034058923071080986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.004126488696783781}, {"id": 511, "seek": 328020, "start": 3298.04, "end": 3303.96, "text": " single column of b there's no way to do that as a series of element by element products how about", "tokens": [51256, 2167, 7738, 295, 272, 456, 311, 572, 636, 281, 360, 300, 382, 257, 2638, 295, 4478, 538, 4478, 3383, 577, 466, 51552], "temperature": 0.0, "avg_logprob": -0.034058923071080986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.004126488696783781}, {"id": 512, "seek": 330396, "start": 3303.96, "end": 3312.84, "text": " this we just have this row matrix and this column matrix can we do that yes this one is perfectly", "tokens": [50364, 341, 321, 445, 362, 341, 5386, 8141, 293, 341, 7738, 8141, 393, 321, 360, 300, 2086, 341, 472, 307, 6239, 50808], "temperature": 0.0, "avg_logprob": -0.08391916089587742, "compression_ratio": 1.7588235294117647, "no_speech_prob": 0.027579290792346}, {"id": 513, "seek": 330396, "start": 3312.84, "end": 3322.44, "text": " possible actually it just produces a single number in fact it's a bit like a like a um a dot product", "tokens": [50808, 1944, 767, 309, 445, 14725, 257, 2167, 1230, 294, 1186, 309, 311, 257, 857, 411, 257, 411, 257, 1105, 257, 5893, 1674, 51288], "temperature": 0.0, "avg_logprob": -0.08391916089587742, "compression_ratio": 1.7588235294117647, "no_speech_prob": 0.027579290792346}, {"id": 514, "seek": 330396, "start": 3322.44, "end": 3329.56, "text": " it's the whole of row one times which is the entire matrix um and then the whole whole of column one", "tokens": [51288, 309, 311, 264, 1379, 295, 5386, 472, 1413, 597, 307, 264, 2302, 8141, 1105, 293, 550, 264, 1379, 1379, 295, 7738, 472, 51644], "temperature": 0.0, "avg_logprob": -0.08391916089587742, "compression_ratio": 1.7588235294117647, "no_speech_prob": 0.027579290792346}, {"id": 515, "seek": 332956, "start": 3330.52, "end": 3336.44, "text": " this thing is called a row matrix and this other guy is called a column matrix for obvious reasons", "tokens": [50412, 341, 551, 307, 1219, 257, 5386, 8141, 293, 341, 661, 2146, 307, 1219, 257, 7738, 8141, 337, 6322, 4112, 50708], "temperature": 0.0, "avg_logprob": -0.07139554749364438, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.01712864823639393}, {"id": 516, "seek": 332956, "start": 3338.44, "end": 3343.32, "text": " okay how about this let's have a look at this one what if i swap the order of my own column i", "tokens": [50808, 1392, 577, 466, 341, 718, 311, 362, 257, 574, 412, 341, 472, 437, 498, 741, 18135, 264, 1668, 295, 452, 1065, 7738, 741, 51052], "temperature": 0.0, "avg_logprob": -0.07139554749364438, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.01712864823639393}, {"id": 517, "seek": 332956, "start": 3343.32, "end": 3350.44, "text": " just swap them around can i do that is that going to produce a legitimate matrix actually yes it will", "tokens": [51052, 445, 18135, 552, 926, 393, 741, 360, 300, 307, 300, 516, 281, 5258, 257, 17956, 8141, 767, 2086, 309, 486, 51408], "temperature": 0.0, "avg_logprob": -0.07139554749364438, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.01712864823639393}, {"id": 518, "seek": 332956, "start": 3350.44, "end": 3357.48, "text": " this time swapping our two matrices a and b around has produced um something which exists it's actually", "tokens": [51408, 341, 565, 1693, 10534, 527, 732, 32284, 257, 293, 272, 926, 575, 7126, 1105, 746, 597, 8198, 309, 311, 767, 51760], "temperature": 0.0, "avg_logprob": -0.07139554749364438, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.01712864823639393}, {"id": 519, "seek": 335748, "start": 3357.48, "end": 3363.08, "text": " a huge matrix it's three by three it must have three rows and three columns because a has three rows", "tokens": [50364, 257, 2603, 8141, 309, 311, 1045, 538, 1045, 309, 1633, 362, 1045, 13241, 293, 1045, 13766, 570, 257, 575, 1045, 13241, 50644], "temperature": 0.0, "avg_logprob": -0.05510227382183075, "compression_ratio": 1.8878504672897196, "no_speech_prob": 0.011298537254333496}, {"id": 520, "seek": 335748, "start": 3363.08, "end": 3367.72, "text": " and b has three columns how does it work let's look at that guy for example it's just simply the number", "tokens": [50644, 293, 272, 575, 1045, 13766, 577, 775, 309, 589, 718, 311, 574, 412, 300, 2146, 337, 1365, 309, 311, 445, 2935, 264, 1230, 50876], "temperature": 0.0, "avg_logprob": -0.05510227382183075, "compression_ratio": 1.8878504672897196, "no_speech_prob": 0.011298537254333496}, {"id": 521, "seek": 335748, "start": 3367.72, "end": 3373.88, "text": " there which is row one is just a number and column two is just a number single number so we just do", "tokens": [50876, 456, 597, 307, 5386, 472, 307, 445, 257, 1230, 293, 7738, 732, 307, 445, 257, 1230, 2167, 1230, 370, 321, 445, 360, 51184], "temperature": 0.0, "avg_logprob": -0.05510227382183075, "compression_ratio": 1.8878504672897196, "no_speech_prob": 0.011298537254333496}, {"id": 522, "seek": 335748, "start": 3373.88, "end": 3380.36, "text": " that product there's no problem pause the video if it's confusing all right so again the point here", "tokens": [51184, 300, 1674, 456, 311, 572, 1154, 10465, 264, 960, 498, 309, 311, 13181, 439, 558, 370, 797, 264, 935, 510, 51508], "temperature": 0.0, "avg_logprob": -0.05510227382183075, "compression_ratio": 1.8878504672897196, "no_speech_prob": 0.011298537254333496}, {"id": 523, "seek": 338036, "start": 3380.36, "end": 3388.36, "text": " is that um a times b is generally not equal to b times a even if they both exist they may not be", "tokens": [50364, 307, 300, 1105, 257, 1413, 272, 307, 5101, 406, 2681, 281, 272, 1413, 257, 754, 498, 436, 1293, 2514, 436, 815, 406, 312, 50764], "temperature": 0.0, "avg_logprob": -0.04906187559428968, "compression_ratio": 1.914572864321608, "no_speech_prob": 0.09800949692726135}, {"id": 524, "seek": 338036, "start": 3388.36, "end": 3392.76, "text": " the same they may not even be the same shape uh however we can go on and ask about the other", "tokens": [50764, 264, 912, 436, 815, 406, 754, 312, 264, 912, 3909, 2232, 4461, 321, 393, 352, 322, 293, 1029, 466, 264, 661, 50984], "temperature": 0.0, "avg_logprob": -0.04906187559428968, "compression_ratio": 1.914572864321608, "no_speech_prob": 0.09800949692726135}, {"id": 525, "seek": 338036, "start": 3392.76, "end": 3399.88, "text": " kinds of properties of the matrix product operation a onto b times c is that the same as a times b", "tokens": [50984, 3685, 295, 7221, 295, 264, 8141, 1674, 6916, 257, 3911, 272, 1413, 269, 307, 300, 264, 912, 382, 257, 1413, 272, 51340], "temperature": 0.0, "avg_logprob": -0.04906187559428968, "compression_ratio": 1.914572864321608, "no_speech_prob": 0.09800949692726135}, {"id": 526, "seek": 338036, "start": 3399.88, "end": 3405.7200000000003, "text": " onto c does the order matter actually it is the same it does work in other words we have the", "tokens": [51340, 3911, 269, 775, 264, 1668, 1871, 767, 309, 307, 264, 912, 309, 775, 589, 294, 661, 2283, 321, 362, 264, 51632], "temperature": 0.0, "avg_logprob": -0.04906187559428968, "compression_ratio": 1.914572864321608, "no_speech_prob": 0.09800949692726135}, {"id": 527, "seek": 340572, "start": 3405.72, "end": 3412.2, "text": " associative property how about a into b plus c some of two matrices yes we can have a onto b", "tokens": [50364, 4180, 1166, 4707, 577, 466, 257, 666, 272, 1804, 269, 512, 295, 732, 32284, 2086, 321, 393, 362, 257, 3911, 272, 50688], "temperature": 0.0, "avg_logprob": -0.05787589814927843, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.019396580755710602}, {"id": 528, "seek": 340572, "start": 3412.2, "end": 3420.52, "text": " plus a onto c that is therefore the distributive property matrix multiplication does satisfy those", "tokens": [50688, 1804, 257, 3911, 269, 300, 307, 4412, 264, 4400, 17254, 4707, 8141, 27290, 775, 19319, 729, 51104], "temperature": 0.0, "avg_logprob": -0.05787589814927843, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.019396580755710602}, {"id": 529, "seek": 340572, "start": 3420.52, "end": 3427.08, "text": " things it's just not commutative okay let me make a bit more room up here in the top of the screen", "tokens": [51104, 721, 309, 311, 445, 406, 800, 325, 1166, 1392, 718, 385, 652, 257, 857, 544, 1808, 493, 510, 294, 264, 1192, 295, 264, 2568, 51432], "temperature": 0.0, "avg_logprob": -0.05787589814927843, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.019396580755710602}, {"id": 530, "seek": 340572, "start": 3427.8799999999997, "end": 3433.9599999999996, "text": " and put one final puzzle up suppose i have this two row three column matrix and then a mystery", "tokens": [51472, 293, 829, 472, 2572, 12805, 493, 7297, 741, 362, 341, 732, 5386, 1045, 7738, 8141, 293, 550, 257, 11422, 51776], "temperature": 0.0, "avg_logprob": -0.05787589814927843, "compression_ratio": 1.711111111111111, "no_speech_prob": 0.019396580755710602}, {"id": 531, "seek": 343396, "start": 3433.96, "end": 3441.32, "text": " matrix m and then i have a simple column matrix of two rows and i'm asking what shape should", "tokens": [50364, 8141, 275, 293, 550, 741, 362, 257, 2199, 7738, 8141, 295, 732, 13241, 293, 741, 478, 3365, 437, 3909, 820, 50732], "temperature": 0.0, "avg_logprob": -0.050603560397499484, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.006001276895403862}, {"id": 532, "seek": 343396, "start": 3441.32, "end": 3449.32, "text": " matrix m be or is it even is it is it possible pause and think about that and in fact it's just", "tokens": [50732, 8141, 275, 312, 420, 307, 309, 754, 307, 309, 307, 309, 1944, 10465, 293, 519, 466, 300, 293, 294, 1186, 309, 311, 445, 51132], "temperature": 0.0, "avg_logprob": -0.050603560397499484, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.006001276895403862}, {"id": 533, "seek": 343396, "start": 3449.32, "end": 3454.6, "text": " a column matrix of three elements you may want to uh just meditate on that and see that it's correct", "tokens": [51132, 257, 7738, 8141, 295, 1045, 4959, 291, 815, 528, 281, 2232, 445, 29989, 322, 300, 293, 536, 300, 309, 311, 3006, 51396], "temperature": 0.0, "avg_logprob": -0.050603560397499484, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.006001276895403862}, {"id": 534, "seek": 343396, "start": 3455.2400000000002, "end": 3460.68, "text": " okay that's the end of this video okay welcome to this video in this one we're going to take", "tokens": [51428, 1392, 300, 311, 264, 917, 295, 341, 960, 1392, 2928, 281, 341, 960, 294, 341, 472, 321, 434, 516, 281, 747, 51700], "temperature": 0.0, "avg_logprob": -0.050603560397499484, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.006001276895403862}, {"id": 535, "seek": 346068, "start": 3460.68, "end": 3467.48, "text": " a look at how to work out a determinant what is it how can you find determinants of varying sizes", "tokens": [50364, 257, 574, 412, 577, 281, 589, 484, 257, 41296, 437, 307, 309, 577, 393, 291, 915, 15957, 1719, 295, 22984, 11602, 50704], "temperature": 0.0, "avg_logprob": -0.07054577607374925, "compression_ratio": 1.8, "no_speech_prob": 0.005364912562072277}, {"id": 536, "seek": 346068, "start": 3468.04, "end": 3475.08, "text": " so a determinant is a scalar it's just a number could be positive could be negative could be zero", "tokens": [50732, 370, 257, 41296, 307, 257, 39684, 309, 311, 445, 257, 1230, 727, 312, 3353, 727, 312, 3671, 727, 312, 4018, 51084], "temperature": 0.0, "avg_logprob": -0.07054577607374925, "compression_ratio": 1.8, "no_speech_prob": 0.005364912562072277}, {"id": 537, "seek": 346068, "start": 3475.08, "end": 3482.04, "text": " and it's derived from a square matrix a single number derived from an entire matrix", "tokens": [51084, 293, 309, 311, 18949, 490, 257, 3732, 8141, 257, 2167, 1230, 18949, 490, 364, 2302, 8141, 51432], "temperature": 0.0, "avg_logprob": -0.07054577607374925, "compression_ratio": 1.8, "no_speech_prob": 0.005364912562072277}, {"id": 538, "seek": 348204, "start": 3482.92, "end": 3490.36, "text": " um now the determinant of m would be written with m with the modulus signs either side of it", "tokens": [50408, 1105, 586, 264, 41296, 295, 275, 576, 312, 3720, 365, 275, 365, 264, 42287, 7880, 2139, 1252, 295, 309, 50780], "temperature": 0.0, "avg_logprob": -0.06008471017596365, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.043288927525281906}, {"id": 539, "seek": 348204, "start": 3490.36, "end": 3495.72, "text": " even though it can be a negative number so here's an example of m and here is how we would write", "tokens": [50780, 754, 1673, 309, 393, 312, 257, 3671, 1230, 370, 510, 311, 364, 1365, 295, 275, 293, 510, 307, 577, 321, 576, 2464, 51048], "temperature": 0.0, "avg_logprob": -0.06008471017596365, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.043288927525281906}, {"id": 540, "seek": 348204, "start": 3495.72, "end": 3502.2, "text": " the determinant of m note that we don't bother writing squares uh straight sides and curved", "tokens": [51048, 264, 41296, 295, 275, 3637, 300, 321, 500, 380, 8677, 3579, 19368, 2232, 2997, 4881, 293, 24991, 51372], "temperature": 0.0, "avg_logprob": -0.06008471017596365, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.043288927525281906}, {"id": 541, "seek": 348204, "start": 3502.2, "end": 3507.24, "text": " brackets as well there's no point in that it's just enough to have the straight line sides", "tokens": [51372, 26179, 382, 731, 456, 311, 572, 935, 294, 300, 309, 311, 445, 1547, 281, 362, 264, 2997, 1622, 4881, 51624], "temperature": 0.0, "avg_logprob": -0.06008471017596365, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.043288927525281906}, {"id": 542, "seek": 350724, "start": 3507.9599999999996, "end": 3517.0, "text": " so let's start with the definition of a uh two by two determinant that's the easy case to look at", "tokens": [50400, 370, 718, 311, 722, 365, 264, 7123, 295, 257, 2232, 732, 538, 732, 41296, 300, 311, 264, 1858, 1389, 281, 574, 412, 50852], "temperature": 0.0, "avg_logprob": -0.07150118971524173, "compression_ratio": 1.672514619883041, "no_speech_prob": 0.0029769421089440584}, {"id": 543, "seek": 350724, "start": 3517.72, "end": 3525.56, "text": " so let's write out um a general two by two just using symbols we'll have a b c d written inside", "tokens": [50888, 370, 718, 311, 2464, 484, 1105, 257, 2674, 732, 538, 732, 445, 1228, 16944, 321, 603, 362, 257, 272, 269, 274, 3720, 1854, 51280], "temperature": 0.0, "avg_logprob": -0.07150118971524173, "compression_ratio": 1.672514619883041, "no_speech_prob": 0.0029769421089440584}, {"id": 544, "seek": 350724, "start": 3525.56, "end": 3533.3999999999996, "text": " our straight line sides indicates a determinant it's simply a d minus b c okay so that's the", "tokens": [51280, 527, 2997, 1622, 4881, 16203, 257, 41296, 309, 311, 2935, 257, 274, 3175, 272, 269, 1392, 370, 300, 311, 264, 51672], "temperature": 0.0, "avg_logprob": -0.07150118971524173, "compression_ratio": 1.672514619883041, "no_speech_prob": 0.0029769421089440584}, {"id": 545, "seek": 353340, "start": 3533.4, "end": 3539.88, "text": " falling diagonal the leading diagonal is also called minus the rising diagonal multiplied together", "tokens": [50364, 7440, 21539, 264, 5775, 21539, 307, 611, 1219, 3175, 264, 11636, 21539, 17207, 1214, 50688], "temperature": 0.0, "avg_logprob": -0.054018197915492915, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0032635896932333708}, {"id": 546, "seek": 353340, "start": 3539.88, "end": 3547.08, "text": " very simple very simple and that is how you can just look at and evaluate a two by two determinant", "tokens": [50688, 588, 2199, 588, 2199, 293, 300, 307, 577, 291, 393, 445, 574, 412, 293, 13059, 257, 732, 538, 732, 41296, 51048], "temperature": 0.0, "avg_logprob": -0.054018197915492915, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0032635896932333708}, {"id": 547, "seek": 353340, "start": 3547.64, "end": 3555.0, "text": " so for our example one two three four one times four is four subtract off a two times three is six", "tokens": [51076, 370, 337, 527, 1365, 472, 732, 1045, 1451, 472, 1413, 1451, 307, 1451, 16390, 766, 257, 732, 1413, 1045, 307, 2309, 51444], "temperature": 0.0, "avg_logprob": -0.054018197915492915, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0032635896932333708}, {"id": 548, "seek": 353340, "start": 3555.8, "end": 3559.56, "text": " and so that's going to give us minus two is the determinant", "tokens": [51484, 293, 370, 300, 311, 516, 281, 976, 505, 3175, 732, 307, 264, 41296, 51672], "temperature": 0.0, "avg_logprob": -0.054018197915492915, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0032635896932333708}, {"id": 549, "seek": 355956, "start": 3560.12, "end": 3570.2799999999997, "text": " okay so a three by three determinant is um going to be a bit more work what we do is when we have", "tokens": [50392, 1392, 370, 257, 1045, 538, 1045, 41296, 307, 1105, 516, 281, 312, 257, 857, 544, 589, 437, 321, 360, 307, 562, 321, 362, 50900], "temperature": 0.0, "avg_logprob": -0.07425916367682858, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0008728084503673017}, {"id": 550, "seek": 355956, "start": 3570.2799999999997, "end": 3578.2799999999997, "text": " a three by three determinant we evaluate it by breaking it up into a number um up to three", "tokens": [50900, 257, 1045, 538, 1045, 41296, 321, 13059, 309, 538, 7697, 309, 493, 666, 257, 1230, 1105, 493, 281, 1045, 51300], "temperature": 0.0, "avg_logprob": -0.07425916367682858, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0008728084503673017}, {"id": 551, "seek": 355956, "start": 3578.92, "end": 3584.52, "text": " smaller determinants each of which is a two by two and for that we have our definition for", "tokens": [51332, 4356, 15957, 1719, 1184, 295, 597, 307, 257, 732, 538, 732, 293, 337, 300, 321, 362, 527, 7123, 337, 51612], "temperature": 0.0, "avg_logprob": -0.07425916367682858, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0008728084503673017}, {"id": 552, "seek": 358452, "start": 3584.68, "end": 3589.72, "text": " immediate evaluation so we break up bigger determinants into little ones and then evaluate", "tokens": [50372, 11629, 13344, 370, 321, 1821, 493, 3801, 15957, 1719, 666, 707, 2306, 293, 550, 13059, 50624], "temperature": 0.0, "avg_logprob": -0.053101945197445224, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.005783461965620518}, {"id": 553, "seek": 358452, "start": 3589.72, "end": 3594.44, "text": " them now i'm going to write out something here that's like a chess board but instead of black and", "tokens": [50624, 552, 586, 741, 478, 516, 281, 2464, 484, 746, 510, 300, 311, 411, 257, 24122, 3150, 457, 2602, 295, 2211, 293, 50860], "temperature": 0.0, "avg_logprob": -0.053101945197445224, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.005783461965620518}, {"id": 554, "seek": 358452, "start": 3594.44, "end": 3599.56, "text": " white i have pluses and minuses you'll see why in a moment the thing to notice though is that we", "tokens": [50860, 2418, 741, 362, 1804, 279, 293, 3175, 279, 291, 603, 536, 983, 294, 257, 1623, 264, 551, 281, 3449, 1673, 307, 300, 321, 51116], "temperature": 0.0, "avg_logprob": -0.053101945197445224, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.005783461965620518}, {"id": 555, "seek": 358452, "start": 3599.56, "end": 3606.52, "text": " alternate plus minus plus minus along each row and each column in this three by three grid okay", "tokens": [51116, 18873, 1804, 3175, 1804, 3175, 2051, 1184, 5386, 293, 1184, 7738, 294, 341, 1045, 538, 1045, 10748, 1392, 51464], "temperature": 0.0, "avg_logprob": -0.053101945197445224, "compression_ratio": 1.7085201793721974, "no_speech_prob": 0.005783461965620518}, {"id": 556, "seek": 360652, "start": 3606.7599999999998, "end": 3614.44, "text": " so now let's work out a three by three determinant again i will just use general symbols a b c", "tokens": [50376, 370, 586, 718, 311, 589, 484, 257, 1045, 538, 1045, 41296, 797, 741, 486, 445, 764, 2674, 16944, 257, 272, 269, 50760], "temperature": 0.0, "avg_logprob": -0.0704356523660513, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.0036750088911503553}, {"id": 557, "seek": 360652, "start": 3615.16, "end": 3625.16, "text": " d e f g h i right now first i have to choose a row or a column i'm going to choose this top row", "tokens": [50796, 274, 308, 283, 290, 276, 741, 558, 586, 700, 741, 362, 281, 2826, 257, 5386, 420, 257, 7738, 741, 478, 516, 281, 2826, 341, 1192, 5386, 51296], "temperature": 0.0, "avg_logprob": -0.0704356523660513, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.0036750088911503553}, {"id": 558, "seek": 360652, "start": 3625.16, "end": 3631.56, "text": " for the first example and i'm going to work along this row and i'm going to start with the a symbol", "tokens": [51296, 337, 264, 700, 1365, 293, 741, 478, 516, 281, 589, 2051, 341, 5386, 293, 741, 478, 516, 281, 722, 365, 264, 257, 5986, 51616], "temperature": 0.0, "avg_logprob": -0.0704356523660513, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.0036750088911503553}, {"id": 559, "seek": 363156, "start": 3632.04, "end": 3637.96, "text": " now i go and i look on my chart and i see that there's a plus sign in that in that slot of my", "tokens": [50388, 586, 741, 352, 293, 741, 574, 322, 452, 6927, 293, 741, 536, 300, 456, 311, 257, 1804, 1465, 294, 300, 294, 300, 14747, 295, 452, 50684], "temperature": 0.0, "avg_logprob": -0.04161452293395996, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.010227322578430176}, {"id": 560, "seek": 363156, "start": 3637.96, "end": 3645.7999999999997, "text": " grid that means i put down plus a and now what i do is i ignore the whole row and the whole column", "tokens": [50684, 10748, 300, 1355, 741, 829, 760, 1804, 257, 293, 586, 437, 741, 360, 307, 741, 11200, 264, 1379, 5386, 293, 264, 1379, 7738, 51076], "temperature": 0.0, "avg_logprob": -0.04161452293395996, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.010227322578430176}, {"id": 561, "seek": 363156, "start": 3645.7999999999997, "end": 3652.68, "text": " that a is in and i look at the remaining four numbers and i write a little determinant just", "tokens": [51076, 300, 257, 307, 294, 293, 741, 574, 412, 264, 8877, 1451, 3547, 293, 741, 2464, 257, 707, 41296, 445, 51420], "temperature": 0.0, "avg_logprob": -0.04161452293395996, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.010227322578430176}, {"id": 562, "seek": 363156, "start": 3652.68, "end": 3660.12, "text": " made out of those guys in the same order they appear so e f um is going to be uh in my main", "tokens": [51420, 1027, 484, 295, 729, 1074, 294, 264, 912, 1668, 436, 4204, 370, 308, 283, 1105, 307, 516, 281, 312, 2232, 294, 452, 2135, 51792], "temperature": 0.0, "avg_logprob": -0.04161452293395996, "compression_ratio": 1.799043062200957, "no_speech_prob": 0.010227322578430176}, {"id": 563, "seek": 366012, "start": 3660.2, "end": 3666.44, "text": " determinant there and hi those are the remaining four guys in the same order they appear now b", "tokens": [50368, 41296, 456, 293, 4879, 729, 366, 264, 8877, 1451, 1074, 294, 264, 912, 1668, 436, 4204, 586, 272, 50680], "temperature": 0.0, "avg_logprob": -0.05995752860088738, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.010470905341207981}, {"id": 564, "seek": 366012, "start": 3666.44, "end": 3673.88, "text": " the next term that has a minus sign according to my chart so i will put in minus b and multiply it", "tokens": [50680, 264, 958, 1433, 300, 575, 257, 3175, 1465, 4650, 281, 452, 6927, 370, 741, 486, 829, 294, 3175, 272, 293, 12972, 309, 51052], "temperature": 0.0, "avg_logprob": -0.05995752860088738, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.010470905341207981}, {"id": 565, "seek": 366012, "start": 3673.88, "end": 3680.2799999999997, "text": " by again a smaller two by two determinant the one i get if i delete the row and the column with b in", "tokens": [51052, 538, 797, 257, 4356, 732, 538, 732, 41296, 264, 472, 741, 483, 498, 741, 12097, 264, 5386, 293, 264, 7738, 365, 272, 294, 51372], "temperature": 0.0, "avg_logprob": -0.05995752860088738, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.010470905341207981}, {"id": 566, "seek": 366012, "start": 3680.2799999999997, "end": 3689.08, "text": " it and look at the remaining guys d f g i and i just i just uh write those guys out um in the same", "tokens": [51372, 309, 293, 574, 412, 264, 8877, 1074, 274, 283, 290, 741, 293, 741, 445, 741, 445, 2232, 2464, 729, 1074, 484, 1105, 294, 264, 912, 51812], "temperature": 0.0, "avg_logprob": -0.05995752860088738, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.010470905341207981}, {"id": 567, "seek": 368908, "start": 3689.08, "end": 3697.16, "text": " order they appear as a small two by two determinant finally there's c c appears with a plus sign", "tokens": [50364, 1668, 436, 4204, 382, 257, 1359, 732, 538, 732, 41296, 2721, 456, 311, 269, 269, 7038, 365, 257, 1804, 1465, 50768], "temperature": 0.0, "avg_logprob": -0.0462753609435199, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005115950480103493}, {"id": 568, "seek": 368908, "start": 3697.16, "end": 3706.36, "text": " according to my chart um so i need to put down plus c and i need to multiply by well we delete the", "tokens": [50768, 4650, 281, 452, 6927, 1105, 370, 741, 643, 281, 829, 760, 1804, 269, 293, 741, 643, 281, 12972, 538, 731, 321, 12097, 264, 51228], "temperature": 0.0, "avg_logprob": -0.0462753609435199, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005115950480103493}, {"id": 569, "seek": 368908, "start": 3706.36, "end": 3717.56, "text": " row and column with c in it and we just see the remaining determinant d e um gh so uh i simply", "tokens": [51228, 5386, 293, 7738, 365, 269, 294, 309, 293, 321, 445, 536, 264, 8877, 41296, 274, 308, 1105, 33937, 370, 2232, 741, 2935, 51788], "temperature": 0.0, "avg_logprob": -0.0462753609435199, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005115950480103493}, {"id": 570, "seek": 371756, "start": 3717.56, "end": 3722.7599999999998, "text": " imagine that that row and column was not there and then that's what the determinant becomes", "tokens": [50364, 3811, 300, 300, 5386, 293, 7738, 390, 406, 456, 293, 550, 300, 311, 437, 264, 41296, 3643, 50624], "temperature": 0.0, "avg_logprob": -0.07446664135630537, "compression_ratio": 1.8324607329842932, "no_speech_prob": 0.0015000833664089441}, {"id": 571, "seek": 371756, "start": 3723.48, "end": 3728.92, "text": " and then of course those two by two determinants i can just write down what they are using my uh", "tokens": [50660, 293, 550, 295, 1164, 729, 732, 538, 732, 15957, 1719, 741, 393, 445, 2464, 760, 437, 436, 366, 1228, 452, 2232, 50932], "temperature": 0.0, "avg_logprob": -0.07446664135630537, "compression_ratio": 1.8324607329842932, "no_speech_prob": 0.0015000833664089441}, {"id": 572, "seek": 371756, "start": 3730.2799999999997, "end": 3734.68, "text": " rule of multiplying down the diagonal and subtracting the anti-diagonal", "tokens": [51000, 4978, 295, 30955, 760, 264, 21539, 293, 16390, 278, 264, 6061, 12, 4504, 6709, 304, 51220], "temperature": 0.0, "avg_logprob": -0.07446664135630537, "compression_ratio": 1.8324607329842932, "no_speech_prob": 0.0015000833664089441}, {"id": 573, "seek": 371756, "start": 3736.44, "end": 3743.72, "text": " okay there we are so that is uh in general what a three by three determinant evaluates to", "tokens": [51308, 1392, 456, 321, 366, 370, 300, 307, 2232, 294, 2674, 437, 257, 1045, 538, 1045, 41296, 6133, 1024, 281, 51672], "temperature": 0.0, "avg_logprob": -0.07446664135630537, "compression_ratio": 1.8324607329842932, "no_speech_prob": 0.0015000833664089441}, {"id": 574, "seek": 374372, "start": 3743.72, "end": 3749.3199999999997, "text": " but it's not the only way to do it let's write it out again and this time choose uh let's choose a", "tokens": [50364, 457, 309, 311, 406, 264, 787, 636, 281, 360, 309, 718, 311, 2464, 309, 484, 797, 293, 341, 565, 2826, 2232, 718, 311, 2826, 257, 50644], "temperature": 0.0, "avg_logprob": -0.05908532576127486, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.00307407951913774}, {"id": 575, "seek": 374372, "start": 3749.3199999999997, "end": 3754.7599999999998, "text": " column and a different one let's choose this column i'm also allowed to work down this so i", "tokens": [50644, 7738, 293, 257, 819, 472, 718, 311, 2826, 341, 7738, 741, 478, 611, 4350, 281, 589, 760, 341, 370, 741, 50916], "temperature": 0.0, "avg_logprob": -0.05908532576127486, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.00307407951913774}, {"id": 576, "seek": 374372, "start": 3754.7599999999998, "end": 3761.08, "text": " would start with b as my first term and i delete the row and column with it in and i'd see what i", "tokens": [50916, 576, 722, 365, 272, 382, 452, 700, 1433, 293, 741, 12097, 264, 5386, 293, 7738, 365, 309, 294, 293, 741, 1116, 536, 437, 741, 51232], "temperature": 0.0, "avg_logprob": -0.05908532576127486, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.00307407951913774}, {"id": 577, "seek": 374372, "start": 3761.08, "end": 3769.7999999999997, "text": " are the remaining terms and write them d f g i except i've forgotten something uh there's a", "tokens": [51232, 366, 264, 8877, 2115, 293, 2464, 552, 274, 283, 290, 741, 3993, 741, 600, 11832, 746, 2232, 456, 311, 257, 51668], "temperature": 0.0, "avg_logprob": -0.05908532576127486, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.00307407951913774}, {"id": 578, "seek": 376980, "start": 3769.8, "end": 3776.52, "text": " minus sign attached to that particular entry so that should actually have been minus b all right", "tokens": [50364, 3175, 1465, 8570, 281, 300, 1729, 8729, 370, 300, 820, 767, 362, 668, 3175, 272, 439, 558, 50700], "temperature": 0.0, "avg_logprob": -0.05702686309814453, "compression_ratio": 1.9846938775510203, "no_speech_prob": 0.025525441393256187}, {"id": 579, "seek": 376980, "start": 3776.52, "end": 3784.76, "text": " and then similarly plus e and i delete the row and column which has e in it and then i just make a", "tokens": [50700, 293, 550, 14138, 1804, 308, 293, 741, 12097, 264, 5386, 293, 7738, 597, 575, 308, 294, 309, 293, 550, 741, 445, 652, 257, 51112], "temperature": 0.0, "avg_logprob": -0.05702686309814453, "compression_ratio": 1.9846938775510203, "no_speech_prob": 0.025525441393256187}, {"id": 580, "seek": 376980, "start": 3784.76, "end": 3791.32, "text": " two by two determinant from in this case it would be the corner elements a c g i and then finally", "tokens": [51112, 732, 538, 732, 41296, 490, 294, 341, 1389, 309, 576, 312, 264, 4538, 4959, 257, 269, 290, 741, 293, 550, 2721, 51440], "temperature": 0.0, "avg_logprob": -0.05702686309814453, "compression_ratio": 1.9846938775510203, "no_speech_prob": 0.025525441393256187}, {"id": 581, "seek": 376980, "start": 3791.32, "end": 3798.76, "text": " minus h and delete the row and column with h in it make a two by two determinant determinant of", "tokens": [51440, 3175, 276, 293, 12097, 264, 5386, 293, 7738, 365, 276, 294, 309, 652, 257, 732, 538, 732, 41296, 41296, 295, 51812], "temperature": 0.0, "avg_logprob": -0.05702686309814453, "compression_ratio": 1.9846938775510203, "no_speech_prob": 0.025525441393256187}, {"id": 582, "seek": 379876, "start": 3798.76, "end": 3808.44, "text": " what's left a c d f okay and of course i could then write out these two by two determinants", "tokens": [50364, 437, 311, 1411, 257, 269, 274, 283, 1392, 293, 295, 1164, 741, 727, 550, 2464, 484, 613, 732, 538, 732, 15957, 1719, 50848], "temperature": 0.0, "avg_logprob": -0.06592195202605892, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0007296546828001738}, {"id": 583, "seek": 379876, "start": 3808.44, "end": 3814.5200000000004, "text": " explicitly but the point is it will get give me the same answer let's do an example and see why", "tokens": [50848, 20803, 457, 264, 935, 307, 309, 486, 483, 976, 385, 264, 912, 1867, 718, 311, 360, 364, 1365, 293, 536, 983, 51152], "temperature": 0.0, "avg_logprob": -0.06592195202605892, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0007296546828001738}, {"id": 584, "seek": 379876, "start": 3814.5200000000004, "end": 3819.1600000000003, "text": " we would choose one method or the other so here are just some random numbers i'm making up let's", "tokens": [51152, 321, 576, 2826, 472, 3170, 420, 264, 661, 370, 510, 366, 445, 512, 4974, 3547, 741, 478, 1455, 493, 718, 311, 51384], "temperature": 0.0, "avg_logprob": -0.06592195202605892, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0007296546828001738}, {"id": 585, "seek": 379876, "start": 3819.1600000000003, "end": 3826.2000000000003, "text": " stick that in it's three by three first off let's work along the top row and as uh as we did in our", "tokens": [51384, 2897, 300, 294, 309, 311, 1045, 538, 1045, 700, 766, 718, 311, 589, 2051, 264, 1192, 5386, 293, 382, 2232, 382, 321, 630, 294, 527, 51736], "temperature": 0.0, "avg_logprob": -0.06592195202605892, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0007296546828001738}, {"id": 586, "seek": 382620, "start": 3826.2, "end": 3830.9199999999996, "text": " first example so that's going to be three uh let's put in the full determinant here", "tokens": [50364, 700, 1365, 370, 300, 311, 516, 281, 312, 1045, 2232, 718, 311, 829, 294, 264, 1577, 41296, 510, 50600], "temperature": 0.0, "avg_logprob": -0.05488284603580014, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.008180808275938034}, {"id": 587, "seek": 382620, "start": 3831.56, "end": 3837.96, "text": " and then minus one and again the determinant i get by excluding the top row and middle column", "tokens": [50632, 293, 550, 3175, 472, 293, 797, 264, 41296, 741, 483, 538, 49999, 264, 1192, 5386, 293, 2808, 7738, 50952], "temperature": 0.0, "avg_logprob": -0.05488284603580014, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.008180808275938034}, {"id": 588, "seek": 382620, "start": 3837.96, "end": 3846.52, "text": " and then plus two uh that's going to be seven zero five minus one and i can go ahead and i can", "tokens": [50952, 293, 550, 1804, 732, 2232, 300, 311, 516, 281, 312, 3407, 4018, 1732, 3175, 472, 293, 741, 393, 352, 2286, 293, 741, 393, 51380], "temperature": 0.0, "avg_logprob": -0.05488284603580014, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.008180808275938034}, {"id": 589, "seek": 382620, "start": 3846.52, "end": 3852.52, "text": " work out explicitly what this comes out at as you can see i'm doing here and in fact it will be", "tokens": [51380, 589, 484, 20803, 437, 341, 1487, 484, 412, 382, 291, 393, 536, 741, 478, 884, 510, 293, 294, 1186, 309, 486, 312, 51680], "temperature": 0.0, "avg_logprob": -0.05488284603580014, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.008180808275938034}, {"id": 590, "seek": 385252, "start": 3852.52, "end": 3859.88, "text": " 12 plus 20 minus 14 and it comes out as 18 so there we are we've worked out a three by three", "tokens": [50364, 2272, 1804, 945, 3175, 3499, 293, 309, 1487, 484, 382, 2443, 370, 456, 321, 366, 321, 600, 2732, 484, 257, 1045, 538, 1045, 50732], "temperature": 0.0, "avg_logprob": -0.04107299510468828, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.011865721084177494}, {"id": 591, "seek": 385252, "start": 3859.88, "end": 3864.68, "text": " but we could have done it in a different way let's say we went along this bottom row that's", "tokens": [50732, 457, 321, 727, 362, 1096, 309, 294, 257, 819, 636, 718, 311, 584, 321, 1437, 2051, 341, 2767, 5386, 300, 311, 50972], "temperature": 0.0, "avg_logprob": -0.04107299510468828, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.011865721084177494}, {"id": 592, "seek": 385252, "start": 3864.68, "end": 3872.12, "text": " fine so then it will be five and i will be left with one two zero four for my mini terminate", "tokens": [50972, 2489, 370, 550, 309, 486, 312, 1732, 293, 741, 486, 312, 1411, 365, 472, 732, 4018, 1451, 337, 452, 8382, 10761, 473, 51344], "temperature": 0.0, "avg_logprob": -0.04107299510468828, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.011865721084177494}, {"id": 593, "seek": 385252, "start": 3872.12, "end": 3877.64, "text": " and the next element along a minus sign and it was a minus number anyway minus minus one", "tokens": [51344, 293, 264, 958, 4478, 2051, 257, 3175, 1465, 293, 309, 390, 257, 3175, 1230, 4033, 3175, 3175, 472, 51620], "temperature": 0.0, "avg_logprob": -0.04107299510468828, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.011865721084177494}, {"id": 594, "seek": 387764, "start": 3877.64, "end": 3883.72, "text": " that's going to be three two seven four let's just see how we've done that three two seven four", "tokens": [50364, 300, 311, 516, 281, 312, 1045, 732, 3407, 1451, 718, 311, 445, 536, 577, 321, 600, 1096, 300, 1045, 732, 3407, 1451, 50668], "temperature": 0.0, "avg_logprob": -0.051583645078870984, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0022244590800255537}, {"id": 595, "seek": 387764, "start": 3883.72, "end": 3889.8799999999997, "text": " by deleting the bottom row and middle column of that now what about the third element here", "tokens": [50668, 538, 48946, 264, 2767, 5386, 293, 2808, 7738, 295, 300, 586, 437, 466, 264, 2636, 4478, 510, 50976], "temperature": 0.0, "avg_logprob": -0.051583645078870984, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0022244590800255537}, {"id": 596, "seek": 387764, "start": 3889.8799999999997, "end": 3895.8799999999997, "text": " well we actually have a zero plus zero times sum determinant i don't even care what that is because", "tokens": [50976, 731, 321, 767, 362, 257, 4018, 1804, 4018, 1413, 2408, 41296, 741, 500, 380, 754, 1127, 437, 300, 307, 570, 51276], "temperature": 0.0, "avg_logprob": -0.051583645078870984, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0022244590800255537}, {"id": 597, "seek": 387764, "start": 3895.8799999999997, "end": 3901.0, "text": " it's been multiplied by zero that's the beauty of it so i've got five into four minus zero", "tokens": [51276, 309, 311, 668, 17207, 538, 4018, 300, 311, 264, 6643, 295, 309, 370, 741, 600, 658, 1732, 666, 1451, 3175, 4018, 51532], "temperature": 0.0, "avg_logprob": -0.051583645078870984, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0022244590800255537}, {"id": 598, "seek": 390100, "start": 3901.96, "end": 3907.08, "text": " and then we're going to have four threes of 12 minus 14 so that's going to give us 20 minus", "tokens": [50412, 293, 550, 321, 434, 516, 281, 362, 1451, 258, 4856, 295, 2272, 3175, 3499, 370, 300, 311, 516, 281, 976, 505, 945, 3175, 50668], "temperature": 0.0, "avg_logprob": -0.0689587301137496, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.04995157569646835}, {"id": 599, "seek": 390100, "start": 3907.08, "end": 3915.16, "text": " two is 18 same answer as before okay what about if we have even bigger determinants than our three", "tokens": [50668, 732, 307, 2443, 912, 1867, 382, 949, 1392, 437, 466, 498, 321, 362, 754, 3801, 15957, 1719, 813, 527, 1045, 51072], "temperature": 0.0, "avg_logprob": -0.0689587301137496, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.04995157569646835}, {"id": 600, "seek": 390100, "start": 3915.16, "end": 3922.28, "text": " by three example there if we have if we go bigger still we for example a four by four we're just", "tokens": [51072, 538, 1045, 1365, 456, 498, 321, 362, 498, 321, 352, 3801, 920, 321, 337, 1365, 257, 1451, 538, 1451, 321, 434, 445, 51428], "temperature": 0.0, "avg_logprob": -0.0689587301137496, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.04995157569646835}, {"id": 601, "seek": 390100, "start": 3922.28, "end": 3927.96, "text": " going to break it up into a number of three by threes and each of those would have to be broken up", "tokens": [51428, 516, 281, 1821, 309, 493, 666, 257, 1230, 295, 1045, 538, 258, 4856, 293, 1184, 295, 729, 576, 362, 281, 312, 5463, 493, 51712], "temperature": 0.0, "avg_logprob": -0.0689587301137496, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.04995157569646835}, {"id": 602, "seek": 392796, "start": 3927.96, "end": 3936.04, "text": " into two by twos lots of work so here we are here's a general four by four we are going to expand it", "tokens": [50364, 666, 732, 538, 683, 329, 3195, 295, 589, 370, 510, 321, 366, 510, 311, 257, 2674, 1451, 538, 1451, 321, 366, 516, 281, 5268, 309, 50768], "temperature": 0.0, "avg_logprob": -0.05814499325222439, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.03500893712043762}, {"id": 603, "seek": 392796, "start": 3936.04, "end": 3942.04, "text": " along a row or column let's say we want to expand it along this row for example and we'll take in", "tokens": [50768, 2051, 257, 5386, 420, 7738, 718, 311, 584, 321, 528, 281, 5268, 309, 2051, 341, 5386, 337, 1365, 293, 321, 603, 747, 294, 51068], "temperature": 0.0, "avg_logprob": -0.05814499325222439, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.03500893712043762}, {"id": 604, "seek": 392796, "start": 3942.04, "end": 3948.36, "text": " turn a b c d and we'll need to know what sign to use so here's our checker board or our chess board", "tokens": [51068, 1261, 257, 272, 269, 274, 293, 321, 603, 643, 281, 458, 437, 1465, 281, 764, 370, 510, 311, 527, 1520, 260, 3150, 420, 527, 24122, 3150, 51384], "temperature": 0.0, "avg_logprob": -0.05814499325222439, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.03500893712043762}, {"id": 605, "seek": 392796, "start": 3948.36, "end": 3955.08, "text": " pattern of pluses and minuses just extend it out now to a four by four and you can see the rule here", "tokens": [51384, 5102, 295, 1804, 279, 293, 3175, 279, 445, 10101, 309, 484, 586, 281, 257, 1451, 538, 1451, 293, 291, 393, 536, 264, 4978, 510, 51720], "temperature": 0.0, "avg_logprob": -0.05814499325222439, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.03500893712043762}, {"id": 606, "seek": 395508, "start": 3955.08, "end": 3961.16, "text": " is that if you like if the row number plus the column number is an even number then there's going", "tokens": [50364, 307, 300, 498, 291, 411, 498, 264, 5386, 1230, 1804, 264, 7738, 1230, 307, 364, 754, 1230, 550, 456, 311, 516, 50668], "temperature": 0.0, "avg_logprob": -0.046822301925174774, "compression_ratio": 2.0165289256198347, "no_speech_prob": 0.004574282094836235}, {"id": 607, "seek": 395508, "start": 3961.16, "end": 3965.64, "text": " to be a plus sign and if it's odd it's going to be a minus sign you can confirm that for yourself", "tokens": [50668, 281, 312, 257, 1804, 1465, 293, 498, 309, 311, 7401, 309, 311, 516, 281, 312, 257, 3175, 1465, 291, 393, 9064, 300, 337, 1803, 50892], "temperature": 0.0, "avg_logprob": -0.046822301925174774, "compression_ratio": 2.0165289256198347, "no_speech_prob": 0.004574282094836235}, {"id": 608, "seek": 395508, "start": 3965.64, "end": 3972.44, "text": " look at this one it's going to be at row two and column three and that's five and so that's a minus", "tokens": [50892, 574, 412, 341, 472, 309, 311, 516, 281, 312, 412, 5386, 732, 293, 7738, 1045, 293, 300, 311, 1732, 293, 370, 300, 311, 257, 3175, 51232], "temperature": 0.0, "avg_logprob": -0.046822301925174774, "compression_ratio": 2.0165289256198347, "no_speech_prob": 0.004574282094836235}, {"id": 609, "seek": 395508, "start": 3972.44, "end": 3977.7999999999997, "text": " that's one way to remember it or just draw it out anyway we're going to use that rule so we go", "tokens": [51232, 300, 311, 472, 636, 281, 1604, 309, 420, 445, 2642, 309, 484, 4033, 321, 434, 516, 281, 764, 300, 4978, 370, 321, 352, 51500], "temperature": 0.0, "avg_logprob": -0.046822301925174774, "compression_ratio": 2.0165289256198347, "no_speech_prob": 0.004574282094836235}, {"id": 610, "seek": 395508, "start": 3977.7999999999997, "end": 3984.2799999999997, "text": " ahead and we write plus a and now we need to do the entire three by three determinant that we get", "tokens": [51500, 2286, 293, 321, 2464, 1804, 257, 293, 586, 321, 643, 281, 360, 264, 2302, 1045, 538, 1045, 41296, 300, 321, 483, 51824], "temperature": 0.0, "avg_logprob": -0.046822301925174774, "compression_ratio": 2.0165289256198347, "no_speech_prob": 0.004574282094836235}, {"id": 611, "seek": 398428, "start": 3984.28, "end": 3990.1200000000003, "text": " when we delete the row and column with a in it so we just write out that little square block", "tokens": [50364, 562, 321, 12097, 264, 5386, 293, 7738, 365, 257, 294, 309, 370, 321, 445, 2464, 484, 300, 707, 3732, 3461, 50656], "temperature": 0.0, "avg_logprob": -0.05687036185429014, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.0057865469716489315}, {"id": 612, "seek": 398428, "start": 3990.1200000000003, "end": 3995.8, "text": " that we see it's quite easy to copy across and now we're going to have minus b and we need to delete", "tokens": [50656, 300, 321, 536, 309, 311, 1596, 1858, 281, 5055, 2108, 293, 586, 321, 434, 516, 281, 362, 3175, 272, 293, 321, 643, 281, 12097, 50940], "temperature": 0.0, "avg_logprob": -0.05687036185429014, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.0057865469716489315}, {"id": 613, "seek": 398428, "start": 3995.8, "end": 4002.2000000000003, "text": " the row and column and then transcribe across the elements that are left as a three by three", "tokens": [50940, 264, 5386, 293, 7738, 293, 550, 1145, 8056, 2108, 264, 4959, 300, 366, 1411, 382, 257, 1045, 538, 1045, 51260], "temperature": 0.0, "avg_logprob": -0.05687036185429014, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.0057865469716489315}, {"id": 614, "seek": 398428, "start": 4002.2000000000003, "end": 4009.0800000000004, "text": " just being careful not to make any slips and you see that we're going to continue so let's", "tokens": [51260, 445, 885, 5026, 406, 281, 652, 604, 44690, 293, 291, 536, 300, 321, 434, 516, 281, 2354, 370, 718, 311, 51604], "temperature": 0.0, "avg_logprob": -0.05687036185429014, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.0057865469716489315}, {"id": 615, "seek": 398428, "start": 4009.0800000000004, "end": 4013.7200000000003, "text": " delete this just to be completely explicit I'll finish the job off so I think I hope it's off", "tokens": [51604, 12097, 341, 445, 281, 312, 2584, 13691, 286, 603, 2413, 264, 1691, 766, 370, 286, 519, 286, 1454, 309, 311, 766, 51836], "temperature": 0.0, "avg_logprob": -0.05687036185429014, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.0057865469716489315}, {"id": 616, "seek": 401372, "start": 4013.72, "end": 4024.12, "text": " is what we're doing we're onto plus c and now we're going to just have e f h i j l and m n p", "tokens": [50364, 307, 437, 321, 434, 884, 321, 434, 3911, 1804, 269, 293, 586, 321, 434, 516, 281, 445, 362, 308, 283, 276, 741, 361, 287, 293, 275, 297, 280, 50884], "temperature": 0.0, "avg_logprob": -0.07038769090032003, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.009675965644419193}, {"id": 617, "seek": 401372, "start": 4024.8399999999997, "end": 4032.68, "text": " and then finally minus d um onto what we get if we delete the top row and right most column", "tokens": [50920, 293, 550, 2721, 3175, 274, 1105, 3911, 437, 321, 483, 498, 321, 12097, 264, 1192, 5386, 293, 558, 881, 7738, 51312], "temperature": 0.0, "avg_logprob": -0.07038769090032003, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.009675965644419193}, {"id": 618, "seek": 401372, "start": 4032.68, "end": 4040.4399999999996, "text": " which is left over then e f g i j k m n oh there we are that's how we handle a four by four each", "tokens": [51312, 597, 307, 1411, 670, 550, 308, 283, 290, 741, 361, 350, 275, 297, 1954, 456, 321, 366, 300, 311, 577, 321, 4813, 257, 1451, 538, 1451, 1184, 51700], "temperature": 0.0, "avg_logprob": -0.07038769090032003, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.009675965644419193}, {"id": 619, "seek": 404044, "start": 4040.44, "end": 4045.88, "text": " of these three by threes would then have to be evaluated and so on so a lot of work and", "tokens": [50364, 295, 613, 1045, 538, 258, 4856, 576, 550, 362, 281, 312, 25509, 293, 370, 322, 370, 257, 688, 295, 589, 293, 50636], "temperature": 0.0, "avg_logprob": -0.04748467777086341, "compression_ratio": 1.7677725118483412, "no_speech_prob": 0.003721771761775017}, {"id": 620, "seek": 404044, "start": 4045.88, "end": 4052.04, "text": " that's the end of the video okay welcome to this fifth topic which is eigenvalues and eigenvectors", "tokens": [50636, 300, 311, 264, 917, 295, 264, 960, 1392, 2928, 281, 341, 9266, 4829, 597, 307, 10446, 46033, 293, 10446, 303, 5547, 50944], "temperature": 0.0, "avg_logprob": -0.04748467777086341, "compression_ratio": 1.7677725118483412, "no_speech_prob": 0.003721771761775017}, {"id": 621, "seek": 404044, "start": 4052.04, "end": 4057.56, "text": " we'll introduce the problem and we'll see how to find eigenvalues finding eigenvectors is for", "tokens": [50944, 321, 603, 5366, 264, 1154, 293, 321, 603, 536, 577, 281, 915, 10446, 46033, 5006, 10446, 303, 5547, 307, 337, 51220], "temperature": 0.0, "avg_logprob": -0.04748467777086341, "compression_ratio": 1.7677725118483412, "no_speech_prob": 0.003721771761775017}, {"id": 622, "seek": 404044, "start": 4057.56, "end": 4068.44, "text": " the next video so suppose that we are given a square matrix um n just some matrix but we are", "tokens": [51220, 264, 958, 960, 370, 7297, 300, 321, 366, 2212, 257, 3732, 8141, 1105, 297, 445, 512, 8141, 457, 321, 366, 51764], "temperature": 0.0, "avg_logprob": -0.04748467777086341, "compression_ratio": 1.7677725118483412, "no_speech_prob": 0.003721771761775017}, {"id": 623, "seek": 406844, "start": 4068.44, "end": 4078.2000000000003, "text": " told that m multiplied by v is equal to lambda multiplied by v for some scalar just some number", "tokens": [50364, 1907, 300, 275, 17207, 538, 371, 307, 2681, 281, 13607, 17207, 538, 371, 337, 512, 39684, 445, 512, 1230, 50852], "temperature": 0.0, "avg_logprob": -0.06502480140099158, "compression_ratio": 1.7515527950310559, "no_speech_prob": 0.0019561517983675003}, {"id": 624, "seek": 406844, "start": 4078.2000000000003, "end": 4088.04, "text": " lambda and for some column matrix uh v and a column matrix of course the same as a vector", "tokens": [50852, 13607, 293, 337, 512, 7738, 8141, 2232, 371, 293, 257, 7738, 8141, 295, 1164, 264, 912, 382, 257, 8062, 51344], "temperature": 0.0, "avg_logprob": -0.06502480140099158, "compression_ratio": 1.7515527950310559, "no_speech_prob": 0.0019561517983675003}, {"id": 625, "seek": 406844, "start": 4088.76, "end": 4095.2400000000002, "text": " I will just say vector from now on okay so this scalar lambda could be positive negative or zero", "tokens": [51380, 286, 486, 445, 584, 8062, 490, 586, 322, 1392, 370, 341, 39684, 13607, 727, 312, 3353, 3671, 420, 4018, 51704], "temperature": 0.0, "avg_logprob": -0.06502480140099158, "compression_ratio": 1.7515527950310559, "no_speech_prob": 0.0019561517983675003}, {"id": 626, "seek": 409524, "start": 4096.12, "end": 4103.0, "text": " meanwhile this vector v could be anything except the trivial boring case of just zeros", "tokens": [50408, 29252, 341, 8062, 371, 727, 312, 1340, 3993, 264, 26703, 9989, 1389, 295, 445, 35193, 50752], "temperature": 0.0, "avg_logprob": -0.0479929005658185, "compression_ratio": 1.7611940298507462, "no_speech_prob": 0.0009251399314962327}, {"id": 627, "seek": 409524, "start": 4103.0, "end": 4108.36, "text": " it's something other than that our challenge then is that we're going to be given a square matrix m", "tokens": [50752, 309, 311, 746, 661, 813, 300, 527, 3430, 550, 307, 300, 321, 434, 516, 281, 312, 2212, 257, 3732, 8141, 275, 51020], "temperature": 0.0, "avg_logprob": -0.0479929005658185, "compression_ratio": 1.7611940298507462, "no_speech_prob": 0.0009251399314962327}, {"id": 628, "seek": 409524, "start": 4108.36, "end": 4114.36, "text": " and we have to look for any scalar lambda and vector v that satisfies the equation", "tokens": [51020, 293, 321, 362, 281, 574, 337, 604, 39684, 13607, 293, 8062, 371, 300, 44271, 264, 5367, 51320], "temperature": 0.0, "avg_logprob": -0.0479929005658185, "compression_ratio": 1.7611940298507462, "no_speech_prob": 0.0009251399314962327}, {"id": 629, "seek": 409524, "start": 4115.08, "end": 4120.44, "text": " and such a scalar is called an eigenvalue and such a vector is called an eigenvector", "tokens": [51356, 293, 1270, 257, 39684, 307, 1219, 364, 10446, 29155, 293, 1270, 257, 8062, 307, 1219, 364, 10446, 303, 1672, 51624], "temperature": 0.0, "avg_logprob": -0.0479929005658185, "compression_ratio": 1.7611940298507462, "no_speech_prob": 0.0009251399314962327}, {"id": 630, "seek": 412044, "start": 4120.5199999999995, "end": 4127.719999999999, "text": " so in that language m multiplied by some eigenvector gives us back that eigenvector just", "tokens": [50368, 370, 294, 300, 2856, 275, 17207, 538, 512, 10446, 303, 1672, 2709, 505, 646, 300, 10446, 303, 1672, 445, 50728], "temperature": 0.0, "avg_logprob": -0.05513566473255987, "compression_ratio": 1.7523809523809524, "no_speech_prob": 0.0003353102074470371}, {"id": 631, "seek": 412044, "start": 4127.719999999999, "end": 4136.44, "text": " multiplied by a scalar the eigenvalue okay so first off let's notice that if we are given", "tokens": [50728, 17207, 538, 257, 39684, 264, 10446, 29155, 1392, 370, 700, 766, 718, 311, 3449, 300, 498, 321, 366, 2212, 51164], "temperature": 0.0, "avg_logprob": -0.05513566473255987, "compression_ratio": 1.7523809523809524, "no_speech_prob": 0.0003353102074470371}, {"id": 632, "seek": 412044, "start": 4136.44, "end": 4142.44, "text": " a candidate a possible eigenvector v to try perhaps for a multiple choice then it's easy", "tokens": [51164, 257, 11532, 257, 1944, 10446, 303, 1672, 371, 281, 853, 4317, 337, 257, 3866, 3922, 550, 309, 311, 1858, 51464], "temperature": 0.0, "avg_logprob": -0.05513566473255987, "compression_ratio": 1.7523809523809524, "no_speech_prob": 0.0003353102074470371}, {"id": 633, "seek": 412044, "start": 4142.44, "end": 4149.16, "text": " to test we'll just go ahead and try it so here's a square matrix a two by two two four one minus one", "tokens": [51464, 281, 1500, 321, 603, 445, 352, 2286, 293, 853, 309, 370, 510, 311, 257, 3732, 8141, 257, 732, 538, 732, 732, 1451, 472, 3175, 472, 51800], "temperature": 0.0, "avg_logprob": -0.05513566473255987, "compression_ratio": 1.7523809523809524, "no_speech_prob": 0.0003353102074470371}, {"id": 634, "seek": 414916, "start": 4149.8, "end": 4161.4, "text": " and uh suppose we write down v is equal to one minus one and this is suggested as a possible", "tokens": [50396, 293, 2232, 7297, 321, 2464, 760, 371, 307, 2681, 281, 472, 3175, 472, 293, 341, 307, 10945, 382, 257, 1944, 50976], "temperature": 0.0, "avg_logprob": -0.0673887195871837, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0019568444695323706}, {"id": 635, "seek": 414916, "start": 4161.4, "end": 4167.48, "text": " eigenvector well then we would just test it out to see if it matches our equation", "tokens": [50976, 10446, 303, 1672, 731, 550, 321, 576, 445, 1500, 309, 484, 281, 536, 498, 309, 10676, 527, 5367, 51280], "temperature": 0.0, "avg_logprob": -0.0673887195871837, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0019568444695323706}, {"id": 636, "seek": 414916, "start": 4168.12, "end": 4175.16, "text": " we try multiplying m by v so here we go two four one minus one and v is one minus one", "tokens": [51312, 321, 853, 30955, 275, 538, 371, 370, 510, 321, 352, 732, 1451, 472, 3175, 472, 293, 371, 307, 472, 3175, 472, 51664], "temperature": 0.0, "avg_logprob": -0.0673887195871837, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0019568444695323706}, {"id": 637, "seek": 417516, "start": 4175.16, "end": 4182.36, "text": " that's a column and so we do row times column that's two and minus four is minus two and again row", "tokens": [50364, 300, 311, 257, 7738, 293, 370, 321, 360, 5386, 1413, 7738, 300, 311, 732, 293, 3175, 1451, 307, 3175, 732, 293, 797, 5386, 50724], "temperature": 0.0, "avg_logprob": -0.07350465986463758, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.002359304577112198}, {"id": 638, "seek": 417516, "start": 4182.36, "end": 4188.76, "text": " and column that's going to be one plus one is two and we notice we can take out minus two as a factor", "tokens": [50724, 293, 7738, 300, 311, 516, 281, 312, 472, 1804, 472, 307, 732, 293, 321, 3449, 321, 393, 747, 484, 3175, 732, 382, 257, 5952, 51044], "temperature": 0.0, "avg_logprob": -0.07350465986463758, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.002359304577112198}, {"id": 639, "seek": 417516, "start": 4188.76, "end": 4195.24, "text": " and then it will be the vector left is one minus one but that is just v so minus two is indeed a", "tokens": [51044, 293, 550, 309, 486, 312, 264, 8062, 1411, 307, 472, 3175, 472, 457, 300, 307, 445, 371, 370, 3175, 732, 307, 6451, 257, 51368], "temperature": 0.0, "avg_logprob": -0.07350465986463758, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.002359304577112198}, {"id": 640, "seek": 417516, "start": 4195.24, "end": 4202.12, "text": " scalar that multiplies v and we've succeeded improving that v is our eigenvector and our", "tokens": [51368, 39684, 300, 12788, 530, 371, 293, 321, 600, 20263, 11470, 300, 371, 307, 527, 10446, 303, 1672, 293, 527, 51712], "temperature": 0.0, "avg_logprob": -0.07350465986463758, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.002359304577112198}, {"id": 641, "seek": 420212, "start": 4202.12, "end": 4207.8, "text": " eigenvalue that goes with it is minus two okay so that's great if we're given eigenvectors to", "tokens": [50364, 10446, 29155, 300, 1709, 365, 309, 307, 3175, 732, 1392, 370, 300, 311, 869, 498, 321, 434, 2212, 10446, 303, 5547, 281, 50648], "temperature": 0.0, "avg_logprob": -0.031711806307782184, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.0001535131741547957}, {"id": 642, "seek": 420212, "start": 4207.8, "end": 4215.0, "text": " check out but what if we're not given any eigenvectors or eigenvalues then we must find any possible", "tokens": [50648, 1520, 484, 457, 437, 498, 321, 434, 406, 2212, 604, 10446, 303, 5547, 420, 10446, 46033, 550, 321, 1633, 915, 604, 1944, 51008], "temperature": 0.0, "avg_logprob": -0.031711806307782184, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.0001535131741547957}, {"id": 643, "seek": 420212, "start": 4215.0, "end": 4221.24, "text": " eigenvalues for ourselves there could be more than one and for each we must find the corresponding", "tokens": [51008, 10446, 46033, 337, 4175, 456, 727, 312, 544, 813, 472, 293, 337, 1184, 321, 1633, 915, 264, 11760, 51320], "temperature": 0.0, "avg_logprob": -0.031711806307782184, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.0001535131741547957}, {"id": 644, "seek": 420212, "start": 4221.24, "end": 4227.5599999999995, "text": " eigenvector v and in this first video we're just going to be finding those eigenvalues", "tokens": [51320, 10446, 303, 1672, 371, 293, 294, 341, 700, 960, 321, 434, 445, 516, 281, 312, 5006, 729, 10446, 46033, 51636], "temperature": 0.0, "avg_logprob": -0.031711806307782184, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.0001535131741547957}, {"id": 645, "seek": 422756, "start": 4228.360000000001, "end": 4234.52, "text": " okay so here's a little bit of quick manipulation and a side we know our equation is mv is equal", "tokens": [50404, 1392, 370, 510, 311, 257, 707, 857, 295, 1702, 26475, 293, 257, 1252, 321, 458, 527, 5367, 307, 275, 85, 307, 2681, 50712], "temperature": 0.0, "avg_logprob": -0.07150968779688296, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0016217413358390331}, {"id": 646, "seek": 422756, "start": 4234.52, "end": 4240.84, "text": " to lambda v i can certainly just bring it all to the left hand side and write mv minus lambda v", "tokens": [50712, 281, 13607, 371, 741, 393, 3297, 445, 1565, 309, 439, 281, 264, 1411, 1011, 1252, 293, 2464, 275, 85, 3175, 13607, 371, 51028], "temperature": 0.0, "avg_logprob": -0.07150968779688296, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0016217413358390331}, {"id": 647, "seek": 422756, "start": 4240.84, "end": 4245.080000000001, "text": " is equal to zero as long as i don't remember to write that as vector zero but now let's do", "tokens": [51028, 307, 2681, 281, 4018, 382, 938, 382, 741, 500, 380, 1604, 281, 2464, 300, 382, 8062, 4018, 457, 586, 718, 311, 360, 51240], "temperature": 0.0, "avg_logprob": -0.07150968779688296, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0016217413358390331}, {"id": 648, "seek": 422756, "start": 4245.080000000001, "end": 4250.6, "text": " something interesting let's insert the identity matrix which won't change the equation but it", "tokens": [51240, 746, 1880, 718, 311, 8969, 264, 6575, 8141, 597, 1582, 380, 1319, 264, 5367, 457, 309, 51516], "temperature": 0.0, "avg_logprob": -0.07150968779688296, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0016217413358390331}, {"id": 649, "seek": 425060, "start": 4250.6, "end": 4262.200000000001, "text": " will be important for the next step mv minus lambda times the identity times v is equal to", "tokens": [50364, 486, 312, 1021, 337, 264, 958, 1823, 275, 85, 3175, 13607, 1413, 264, 6575, 1413, 371, 307, 2681, 281, 50944], "temperature": 0.0, "avg_logprob": -0.06914866860233136, "compression_ratio": 1.8417721518987342, "no_speech_prob": 0.029293011873960495}, {"id": 650, "seek": 425060, "start": 4262.200000000001, "end": 4267.72, "text": " vector zero the identity doesn't change the equation but now i can factor out both those two matrices the", "tokens": [50944, 8062, 4018, 264, 6575, 1177, 380, 1319, 264, 5367, 457, 586, 741, 393, 5952, 484, 1293, 729, 732, 32284, 264, 51220], "temperature": 0.0, "avg_logprob": -0.06914866860233136, "compression_ratio": 1.8417721518987342, "no_speech_prob": 0.029293011873960495}, {"id": 651, "seek": 425060, "start": 4267.72, "end": 4274.200000000001, "text": " m and the minus lambda times the identity that's a matrix i can factor those out and it allows", "tokens": [51220, 275, 293, 264, 3175, 13607, 1413, 264, 6575, 300, 311, 257, 8141, 741, 393, 5952, 729, 484, 293, 309, 4045, 51544], "temperature": 0.0, "avg_logprob": -0.06914866860233136, "compression_ratio": 1.8417721518987342, "no_speech_prob": 0.029293011873960495}, {"id": 652, "seek": 427420, "start": 4274.2, "end": 4281.08, "text": " me to write that line now that if form of the equation it turns out this can only be solved", "tokens": [50364, 385, 281, 2464, 300, 1622, 586, 300, 498, 1254, 295, 264, 5367, 309, 4523, 484, 341, 393, 787, 312, 13041, 50708], "temperature": 0.0, "avg_logprob": -0.04522953344428021, "compression_ratio": 1.7623318385650224, "no_speech_prob": 0.005384101998060942}, {"id": 653, "seek": 427420, "start": 4281.08, "end": 4289.16, "text": " for any interesting v any v other than just zeros if the following equation is true which we can", "tokens": [50708, 337, 604, 1880, 371, 604, 371, 661, 813, 445, 35193, 498, 264, 3480, 5367, 307, 2074, 597, 321, 393, 51112], "temperature": 0.0, "avg_logprob": -0.04522953344428021, "compression_ratio": 1.7623318385650224, "no_speech_prob": 0.005384101998060942}, {"id": 654, "seek": 427420, "start": 4289.16, "end": 4295.24, "text": " easily prove but we're not going to prove in this video m minus lambda times the identity the determinant", "tokens": [51112, 3612, 7081, 457, 321, 434, 406, 516, 281, 7081, 294, 341, 960, 275, 3175, 13607, 1413, 264, 6575, 264, 41296, 51416], "temperature": 0.0, "avg_logprob": -0.04522953344428021, "compression_ratio": 1.7623318385650224, "no_speech_prob": 0.005384101998060942}, {"id": 655, "seek": 427420, "start": 4295.24, "end": 4299.72, "text": " of that is equal to zero so we're going to have plenty of time to think about that but let me just", "tokens": [51416, 295, 300, 307, 2681, 281, 4018, 370, 321, 434, 516, 281, 362, 7140, 295, 565, 281, 519, 466, 300, 457, 718, 385, 445, 51640], "temperature": 0.0, "avg_logprob": -0.04522953344428021, "compression_ratio": 1.7623318385650224, "no_speech_prob": 0.005384101998060942}, {"id": 656, "seek": 429972, "start": 4299.72, "end": 4306.52, "text": " put a green box around it because that is the fundamental equation we're going to use this", "tokens": [50364, 829, 257, 3092, 2424, 926, 309, 570, 300, 307, 264, 8088, 5367, 321, 434, 516, 281, 764, 341, 50704], "temperature": 0.0, "avg_logprob": -0.056112357548304966, "compression_ratio": 1.7048192771084338, "no_speech_prob": 0.0020188339985907078}, {"id": 657, "seek": 429972, "start": 4306.52, "end": 4318.12, "text": " will allow us to find all the eigenvalues that satisfy our basic eigenvalue equation so let's", "tokens": [50704, 486, 2089, 505, 281, 915, 439, 264, 10446, 46033, 300, 19319, 527, 3875, 10446, 29155, 5367, 370, 718, 311, 51284], "temperature": 0.0, "avg_logprob": -0.056112357548304966, "compression_ratio": 1.7048192771084338, "no_speech_prob": 0.0020188339985907078}, {"id": 658, "seek": 429972, "start": 4318.12, "end": 4324.4400000000005, "text": " do an example it's the best thing let's do m as a two four this was the one we had before two four", "tokens": [51284, 360, 364, 1365, 309, 311, 264, 1151, 551, 718, 311, 360, 275, 382, 257, 732, 1451, 341, 390, 264, 472, 321, 632, 949, 732, 1451, 51600], "temperature": 0.0, "avg_logprob": -0.056112357548304966, "compression_ratio": 1.7048192771084338, "no_speech_prob": 0.0020188339985907078}, {"id": 659, "seek": 432444, "start": 4324.44, "end": 4330.44, "text": " minus one little square matrix and so let's write down what this lambda times the identity is", "tokens": [50364, 3175, 472, 707, 3732, 8141, 293, 370, 718, 311, 2464, 760, 437, 341, 13607, 1413, 264, 6575, 307, 50664], "temperature": 0.0, "avg_logprob": -0.04183197545481252, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.013841093517839909}, {"id": 660, "seek": 432444, "start": 4330.44, "end": 4336.28, "text": " for a two by two it's going to be lambda zero zero lambda very simple and so this matrix that's the", "tokens": [50664, 337, 257, 732, 538, 732, 309, 311, 516, 281, 312, 13607, 4018, 4018, 13607, 588, 2199, 293, 370, 341, 8141, 300, 311, 264, 50956], "temperature": 0.0, "avg_logprob": -0.04183197545481252, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.013841093517839909}, {"id": 661, "seek": 432444, "start": 4336.28, "end": 4342.599999999999, "text": " difference of the two of them two minus lambda four one minus one minus lambda just the difference of", "tokens": [50956, 2649, 295, 264, 732, 295, 552, 732, 3175, 13607, 1451, 472, 3175, 472, 3175, 13607, 445, 264, 2649, 295, 51272], "temperature": 0.0, "avg_logprob": -0.04183197545481252, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.013841093517839909}, {"id": 662, "seek": 432444, "start": 4342.599999999999, "end": 4349.719999999999, "text": " those two things as a determinant is equal to zero that's all so there we have it we've just", "tokens": [51272, 729, 732, 721, 382, 257, 41296, 307, 2681, 281, 4018, 300, 311, 439, 370, 456, 321, 362, 309, 321, 600, 445, 51628], "temperature": 0.0, "avg_logprob": -0.04183197545481252, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.013841093517839909}, {"id": 663, "seek": 434972, "start": 4349.72, "end": 4354.4400000000005, "text": " subtracted lambda off the down the diagonal but now we need to solve this so we just write out", "tokens": [50364, 16390, 292, 13607, 766, 264, 760, 264, 21539, 457, 586, 321, 643, 281, 5039, 341, 370, 321, 445, 2464, 484, 50600], "temperature": 0.0, "avg_logprob": -0.06639437448410761, "compression_ratio": 1.9689119170984455, "no_speech_prob": 0.004752872511744499}, {"id": 664, "seek": 434972, "start": 4354.4400000000005, "end": 4359.240000000001, "text": " the determinant two minus lambda multiplied by minus one minus lambda down the diagonal minus", "tokens": [50600, 264, 41296, 732, 3175, 13607, 17207, 538, 3175, 472, 3175, 13607, 760, 264, 21539, 3175, 50840], "temperature": 0.0, "avg_logprob": -0.06639437448410761, "compression_ratio": 1.9689119170984455, "no_speech_prob": 0.004752872511744499}, {"id": 665, "seek": 434972, "start": 4359.240000000001, "end": 4366.2, "text": " four the off diagonal is equal to zero all right so we expand this out minus two minus two lambda", "tokens": [50840, 1451, 264, 766, 21539, 307, 2681, 281, 4018, 439, 558, 370, 321, 5268, 341, 484, 3175, 732, 3175, 732, 13607, 51188], "temperature": 0.0, "avg_logprob": -0.06639437448410761, "compression_ratio": 1.9689119170984455, "no_speech_prob": 0.004752872511744499}, {"id": 666, "seek": 434972, "start": 4366.2, "end": 4373.96, "text": " plus lambda um plus lambda squared minus four equals zero let's come over here for a bit more", "tokens": [51188, 1804, 13607, 1105, 1804, 13607, 8889, 3175, 1451, 6915, 4018, 718, 311, 808, 670, 510, 337, 257, 857, 544, 51576], "temperature": 0.0, "avg_logprob": -0.06639437448410761, "compression_ratio": 1.9689119170984455, "no_speech_prob": 0.004752872511744499}, {"id": 667, "seek": 437396, "start": 4373.96, "end": 4384.52, "text": " space tidy that up a bit what if we got lambda squared minus lambda minus six is equal to zero", "tokens": [50364, 1901, 34646, 300, 493, 257, 857, 437, 498, 321, 658, 13607, 8889, 3175, 13607, 3175, 2309, 307, 2681, 281, 4018, 50892], "temperature": 0.0, "avg_logprob": -0.09601793867169005, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.03066524676978588}, {"id": 668, "seek": 437396, "start": 4384.52, "end": 4391.64, "text": " can we solve this actually it's quite easy to factor that's going to be lambda minus three", "tokens": [50892, 393, 321, 5039, 341, 767, 309, 311, 1596, 1858, 281, 5952, 300, 311, 516, 281, 312, 13607, 3175, 1045, 51248], "temperature": 0.0, "avg_logprob": -0.09601793867169005, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.03066524676978588}, {"id": 669, "seek": 437396, "start": 4392.2, "end": 4399.8, "text": " into lambda plus two is equal to zero so that's true if either lambda is equal to three", "tokens": [51276, 666, 13607, 1804, 732, 307, 2681, 281, 4018, 370, 300, 311, 2074, 498, 2139, 13607, 307, 2681, 281, 1045, 51656], "temperature": 0.0, "avg_logprob": -0.09601793867169005, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.03066524676978588}, {"id": 670, "seek": 439980, "start": 4400.4400000000005, "end": 4408.04, "text": " or it's equal to minus two and those are our two eigenvalues we found them using that equation in", "tokens": [50396, 420, 309, 311, 2681, 281, 3175, 732, 293, 729, 366, 527, 732, 10446, 46033, 321, 1352, 552, 1228, 300, 5367, 294, 50776], "temperature": 0.0, "avg_logprob": -0.0811011497288534, "compression_ratio": 1.78125, "no_speech_prob": 0.00884594488888979}, {"id": 671, "seek": 439980, "start": 4408.04, "end": 4419.56, "text": " the square box let's crack on and do one with a three by three matrix m here we go matrix m", "tokens": [50776, 264, 3732, 2424, 718, 311, 6226, 322, 293, 360, 472, 365, 257, 1045, 538, 1045, 8141, 275, 510, 321, 352, 8141, 275, 51352], "temperature": 0.0, "avg_logprob": -0.0811011497288534, "compression_ratio": 1.78125, "no_speech_prob": 0.00884594488888979}, {"id": 672, "seek": 439980, "start": 4419.56, "end": 4427.0, "text": " is equal to let's have minus two one three one minus one zero and minus one one two i've worked", "tokens": [51352, 307, 2681, 281, 718, 311, 362, 3175, 732, 472, 1045, 472, 3175, 472, 4018, 293, 3175, 472, 472, 732, 741, 600, 2732, 51724], "temperature": 0.0, "avg_logprob": -0.0811011497288534, "compression_ratio": 1.78125, "no_speech_prob": 0.00884594488888979}, {"id": 673, "seek": 442700, "start": 4427.72, "end": 4435.08, "text": " i've checked that before and it will work for us nicely now let's remember of course the rule", "tokens": [50400, 741, 600, 10033, 300, 949, 293, 309, 486, 589, 337, 505, 9594, 586, 718, 311, 1604, 295, 1164, 264, 4978, 50768], "temperature": 0.0, "avg_logprob": -0.10096342423382927, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.009266570210456848}, {"id": 674, "seek": 442700, "start": 4435.08, "end": 4443.24, "text": " from the previous screen and we just need to apply that so let's go ahead and write it as a", "tokens": [50768, 490, 264, 3894, 2568, 293, 321, 445, 643, 281, 3079, 300, 370, 718, 311, 352, 2286, 293, 2464, 309, 382, 257, 51176], "temperature": 0.0, "avg_logprob": -0.10096342423382927, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.009266570210456848}, {"id": 675, "seek": 442700, "start": 4445.08, "end": 4451.88, "text": " write our determinant out we need to have minus two minus lambda and then just one and minus one", "tokens": [51268, 2464, 527, 41296, 484, 321, 643, 281, 362, 3175, 732, 3175, 13607, 293, 550, 445, 472, 293, 3175, 472, 51608], "temperature": 0.0, "avg_logprob": -0.10096342423382927, "compression_ratio": 1.668639053254438, "no_speech_prob": 0.009266570210456848}, {"id": 676, "seek": 445188, "start": 4451.88, "end": 4459.56, "text": " and then one minus one minus lambda and then one and three zero two minus lambda i'm just", "tokens": [50364, 293, 550, 472, 3175, 472, 3175, 13607, 293, 550, 472, 293, 1045, 4018, 732, 3175, 13607, 741, 478, 445, 50748], "temperature": 0.0, "avg_logprob": -0.058459412735120383, "compression_ratio": 1.949579831932773, "no_speech_prob": 0.002800566144287586}, {"id": 677, "seek": 445188, "start": 4459.56, "end": 4464.6, "text": " subtracting lambdas down the diagonal making it a determinant setting it equal to zero", "tokens": [50748, 16390, 278, 10097, 27476, 760, 264, 21539, 1455, 309, 257, 41296, 3287, 309, 2681, 281, 4018, 51000], "temperature": 0.0, "avg_logprob": -0.058459412735120383, "compression_ratio": 1.949579831932773, "no_speech_prob": 0.002800566144287586}, {"id": 678, "seek": 445188, "start": 4464.6, "end": 4468.68, "text": " now i'm going to work along this row because it's got a zero in it so that makes me like it a bit", "tokens": [51000, 586, 741, 478, 516, 281, 589, 2051, 341, 5386, 570, 309, 311, 658, 257, 4018, 294, 309, 370, 300, 1669, 385, 411, 309, 257, 857, 51204], "temperature": 0.0, "avg_logprob": -0.058459412735120383, "compression_ratio": 1.949579831932773, "no_speech_prob": 0.002800566144287586}, {"id": 679, "seek": 445188, "start": 4468.68, "end": 4474.6, "text": " more as a determinant the first number is going to be minus one why because it's a one and let me", "tokens": [51204, 544, 382, 257, 41296, 264, 700, 1230, 307, 516, 281, 312, 3175, 472, 983, 570, 309, 311, 257, 472, 293, 718, 385, 51500], "temperature": 0.0, "avg_logprob": -0.058459412735120383, "compression_ratio": 1.949579831932773, "no_speech_prob": 0.002800566144287586}, {"id": 680, "seek": 445188, "start": 4474.6, "end": 4479.08, "text": " just quickly write out our little lookup table of pluses and minuses for doing determinants", "tokens": [51500, 445, 2661, 2464, 484, 527, 707, 574, 1010, 3199, 295, 1804, 279, 293, 3175, 279, 337, 884, 15957, 1719, 51724], "temperature": 0.0, "avg_logprob": -0.058459412735120383, "compression_ratio": 1.949579831932773, "no_speech_prob": 0.002800566144287586}, {"id": 681, "seek": 447908, "start": 4479.8, "end": 4484.68, "text": " so it was a one and then it picked up a minus sign and then we have the mini determinant that's made", "tokens": [50400, 370, 309, 390, 257, 472, 293, 550, 309, 6183, 493, 257, 3175, 1465, 293, 550, 321, 362, 264, 8382, 41296, 300, 311, 1027, 50644], "temperature": 0.0, "avg_logprob": -0.04205235358207456, "compression_ratio": 2.0052631578947366, "no_speech_prob": 0.001524636521935463}, {"id": 682, "seek": 447908, "start": 4484.68, "end": 4492.84, "text": " out of those four terms so that's one three one and two minus lambda all right and then the next", "tokens": [50644, 484, 295, 729, 1451, 2115, 370, 300, 311, 472, 1045, 472, 293, 732, 3175, 13607, 439, 558, 293, 550, 264, 958, 51052], "temperature": 0.0, "avg_logprob": -0.04205235358207456, "compression_ratio": 2.0052631578947366, "no_speech_prob": 0.001524636521935463}, {"id": 683, "seek": 447908, "start": 4492.84, "end": 4498.5199999999995, "text": " term is going to be plus and then it's going to be the term itself is minus one minus lambda", "tokens": [51052, 1433, 307, 516, 281, 312, 1804, 293, 550, 309, 311, 516, 281, 312, 264, 1433, 2564, 307, 3175, 472, 3175, 13607, 51336], "temperature": 0.0, "avg_logprob": -0.04205235358207456, "compression_ratio": 2.0052631578947366, "no_speech_prob": 0.001524636521935463}, {"id": 684, "seek": 447908, "start": 4498.5199999999995, "end": 4504.36, "text": " and the mini determinant that we get when we exclude that row and that column is just made", "tokens": [51336, 293, 264, 8382, 41296, 300, 321, 483, 562, 321, 33536, 300, 5386, 293, 300, 7738, 307, 445, 1027, 51628], "temperature": 0.0, "avg_logprob": -0.04205235358207456, "compression_ratio": 2.0052631578947366, "no_speech_prob": 0.001524636521935463}, {"id": 685, "seek": 450436, "start": 4504.36, "end": 4512.679999999999, "text": " out of the corner terms that's going to be minus two minus lambda and three and one and two minus", "tokens": [50364, 484, 295, 264, 4538, 2115, 300, 311, 516, 281, 312, 3175, 732, 3175, 13607, 293, 1045, 293, 472, 293, 732, 3175, 50780], "temperature": 0.0, "avg_logprob": -0.04023981345327277, "compression_ratio": 2.0725388601036268, "no_speech_prob": 0.006588675081729889}, {"id": 686, "seek": 450436, "start": 4512.679999999999, "end": 4519.32, "text": " lambda and that's it because the zero term gives us nothing so it was only those two mini determinants", "tokens": [50780, 13607, 293, 300, 311, 309, 570, 264, 4018, 1433, 2709, 505, 1825, 370, 309, 390, 787, 729, 732, 8382, 15957, 1719, 51112], "temperature": 0.0, "avg_logprob": -0.04023981345327277, "compression_ratio": 2.0725388601036268, "no_speech_prob": 0.006588675081729889}, {"id": 687, "seek": 450436, "start": 4519.32, "end": 4525.24, "text": " let's write them out minus one two times lambda and then three times one is three let's expand that", "tokens": [51112, 718, 311, 2464, 552, 484, 3175, 472, 732, 1413, 13607, 293, 550, 1045, 1413, 472, 307, 1045, 718, 311, 5268, 300, 51408], "temperature": 0.0, "avg_logprob": -0.04023981345327277, "compression_ratio": 2.0725388601036268, "no_speech_prob": 0.006588675081729889}, {"id": 688, "seek": 450436, "start": 4525.24, "end": 4531.5599999999995, "text": " one out and then this one has the term in front minus of one plus lambda and then we have to expand", "tokens": [51408, 472, 484, 293, 550, 341, 472, 575, 264, 1433, 294, 1868, 3175, 295, 472, 1804, 13607, 293, 550, 321, 362, 281, 5268, 51724], "temperature": 0.0, "avg_logprob": -0.04023981345327277, "compression_ratio": 2.0725388601036268, "no_speech_prob": 0.006588675081729889}, {"id": 689, "seek": 453156, "start": 4531.56, "end": 4538.6, "text": " out the determinant minus two minus lambda times two minus lambda down the league diagonal", "tokens": [50364, 484, 264, 41296, 3175, 732, 3175, 13607, 1413, 732, 3175, 13607, 760, 264, 14957, 21539, 50716], "temperature": 0.0, "avg_logprob": -0.06794290284852723, "compression_ratio": 2.0256410256410255, "no_speech_prob": 0.002359340200200677}, {"id": 690, "seek": 453156, "start": 4538.6, "end": 4543.8, "text": " minus minus three is plus three there we are is equal to zero and then we just need to tidy that", "tokens": [50716, 3175, 3175, 1045, 307, 1804, 1045, 456, 321, 366, 307, 2681, 281, 4018, 293, 550, 321, 445, 643, 281, 34646, 300, 50976], "temperature": 0.0, "avg_logprob": -0.06794290284852723, "compression_ratio": 2.0256410256410255, "no_speech_prob": 0.002359340200200677}, {"id": 691, "seek": 453156, "start": 4543.8, "end": 4550.4400000000005, "text": " up we need to clean it up a bit that's going to be minus of minus lambda minus one for the first", "tokens": [50976, 493, 321, 643, 281, 2541, 309, 493, 257, 857, 300, 311, 516, 281, 312, 3175, 295, 3175, 13607, 3175, 472, 337, 264, 700, 51308], "temperature": 0.0, "avg_logprob": -0.06794290284852723, "compression_ratio": 2.0256410256410255, "no_speech_prob": 0.002359340200200677}, {"id": 692, "seek": 453156, "start": 4550.4400000000005, "end": 4556.200000000001, "text": " term let's turn that it one into pluses multiply through by the minus one and here we have minus", "tokens": [51308, 1433, 718, 311, 1261, 300, 309, 472, 666, 1804, 279, 12972, 807, 538, 264, 3175, 472, 293, 510, 321, 362, 3175, 51596], "temperature": 0.0, "avg_logprob": -0.06794290284852723, "compression_ratio": 2.0256410256410255, "no_speech_prob": 0.002359340200200677}, {"id": 693, "seek": 453156, "start": 4556.200000000001, "end": 4561.160000000001, "text": " let's make that lambda plus one right that way around and then tidy up inside here we expand", "tokens": [51596, 718, 311, 652, 300, 13607, 1804, 472, 558, 300, 636, 926, 293, 550, 34646, 493, 1854, 510, 321, 5268, 51844], "temperature": 0.0, "avg_logprob": -0.06794290284852723, "compression_ratio": 2.0256410256410255, "no_speech_prob": 0.002359340200200677}, {"id": 694, "seek": 456116, "start": 4561.16, "end": 4568.5199999999995, "text": " it out minus four plus two lambda minus two lambda plus lambda squared and this three is", "tokens": [50364, 309, 484, 3175, 1451, 1804, 732, 13607, 3175, 732, 13607, 1804, 13607, 8889, 293, 341, 1045, 307, 50732], "temperature": 0.0, "avg_logprob": -0.04198813645736031, "compression_ratio": 1.9708333333333334, "no_speech_prob": 0.0021112821996212006}, {"id": 695, "seek": 456116, "start": 4568.5199999999995, "end": 4573.4, "text": " equal to zero we need to keep on working to tidy that a bit more this term here is in fact going", "tokens": [50732, 2681, 281, 4018, 321, 643, 281, 1066, 322, 1364, 281, 34646, 300, 257, 857, 544, 341, 1433, 510, 307, 294, 1186, 516, 50976], "temperature": 0.0, "avg_logprob": -0.04198813645736031, "compression_ratio": 1.9708333333333334, "no_speech_prob": 0.0021112821996212006}, {"id": 696, "seek": 456116, "start": 4573.4, "end": 4578.28, "text": " to be just I see the lambdas cancel out lambda squared minus one that's very nice that's come", "tokens": [50976, 281, 312, 445, 286, 536, 264, 10097, 27476, 10373, 484, 13607, 8889, 3175, 472, 300, 311, 588, 1481, 300, 311, 808, 51220], "temperature": 0.0, "avg_logprob": -0.04198813645736031, "compression_ratio": 1.9708333333333334, "no_speech_prob": 0.0021112821996212006}, {"id": 697, "seek": 456116, "start": 4578.28, "end": 4584.12, "text": " down very very neatly so now we can really tidy that up and we can take out a common factor of", "tokens": [51220, 760, 588, 588, 36634, 370, 586, 321, 393, 534, 34646, 300, 493, 293, 321, 393, 747, 484, 257, 2689, 5952, 295, 51512], "temperature": 0.0, "avg_logprob": -0.04198813645736031, "compression_ratio": 1.9708333333333334, "no_speech_prob": 0.0021112821996212006}, {"id": 698, "seek": 456116, "start": 4584.12, "end": 4589.72, "text": " lambda plus one and the first term was just that so there's one for that and the second term we've", "tokens": [51512, 13607, 1804, 472, 293, 264, 700, 1433, 390, 445, 300, 370, 456, 311, 472, 337, 300, 293, 264, 1150, 1433, 321, 600, 51792], "temperature": 0.0, "avg_logprob": -0.04198813645736031, "compression_ratio": 1.9708333333333334, "no_speech_prob": 0.0021112821996212006}, {"id": 699, "seek": 458972, "start": 4589.72, "end": 4596.76, "text": " just found is lambda squared minus one pause the video and check you agree that that's tidied up", "tokens": [50364, 445, 1352, 307, 13607, 8889, 3175, 472, 10465, 264, 960, 293, 1520, 291, 3986, 300, 300, 311, 9422, 1091, 493, 50716], "temperature": 0.0, "avg_logprob": -0.062344940759802375, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.0008266469230875373}, {"id": 700, "seek": 458972, "start": 4596.76, "end": 4600.84, "text": " version of the equation now the way that can be zero is either the first term is zero which", "tokens": [50716, 3037, 295, 264, 5367, 586, 264, 636, 300, 393, 312, 4018, 307, 2139, 264, 700, 1433, 307, 4018, 597, 50920], "temperature": 0.0, "avg_logprob": -0.062344940759802375, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.0008266469230875373}, {"id": 701, "seek": 458972, "start": 4600.84, "end": 4607.0, "text": " requires lambda is equal to minus one so there's one eigenvalue for us that's one option one of", "tokens": [50920, 7029, 13607, 307, 2681, 281, 3175, 472, 370, 456, 311, 472, 10446, 29155, 337, 505, 300, 311, 472, 3614, 472, 295, 51228], "temperature": 0.0, "avg_logprob": -0.062344940759802375, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.0008266469230875373}, {"id": 702, "seek": 458972, "start": 4607.0, "end": 4613.240000000001, "text": " our eigenvalues has been found or the second term here has to be zero so let's do a bit more work", "tokens": [51228, 527, 10446, 46033, 575, 668, 1352, 420, 264, 1150, 1433, 510, 575, 281, 312, 4018, 370, 718, 311, 360, 257, 857, 544, 589, 51540], "temperature": 0.0, "avg_logprob": -0.062344940759802375, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.0008266469230875373}, {"id": 703, "seek": 461324, "start": 4613.24, "end": 4621.24, "text": " with that what we're saying is to neaten that up we're saying that lambda two minus lambda squared", "tokens": [50364, 365, 300, 437, 321, 434, 1566, 307, 281, 408, 7186, 300, 493, 321, 434, 1566, 300, 13607, 732, 3175, 13607, 8889, 50764], "temperature": 0.0, "avg_logprob": -0.04510018589732411, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.20916089415550232}, {"id": 704, "seek": 461324, "start": 4621.24, "end": 4628.84, "text": " is equal to zero in other words lambda squared is equal to two and so lambda is going to be", "tokens": [50764, 307, 2681, 281, 4018, 294, 661, 2283, 13607, 8889, 307, 2681, 281, 732, 293, 370, 13607, 307, 516, 281, 312, 51144], "temperature": 0.0, "avg_logprob": -0.04510018589732411, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.20916089415550232}, {"id": 705, "seek": 461324, "start": 4628.84, "end": 4635.5599999999995, "text": " plus or minus square root of two that's two more eigenvalues three in all that we found for this", "tokens": [51144, 1804, 420, 3175, 3732, 5593, 295, 732, 300, 311, 732, 544, 10446, 46033, 1045, 294, 439, 300, 321, 1352, 337, 341, 51480], "temperature": 0.0, "avg_logprob": -0.04510018589732411, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.20916089415550232}, {"id": 706, "seek": 461324, "start": 4635.5599999999995, "end": 4641.8, "text": " three by three matrix and in the next video we'll see how to take each of these values", "tokens": [51480, 1045, 538, 1045, 8141, 293, 294, 264, 958, 960, 321, 603, 536, 577, 281, 747, 1184, 295, 613, 4190, 51792], "temperature": 0.0, "avg_logprob": -0.04510018589732411, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.20916089415550232}, {"id": 707, "seek": 464180, "start": 4641.8, "end": 4649.0, "text": " and derive the corresponding vector this is the second of two videos that looks at eigenvalues", "tokens": [50364, 293, 28446, 264, 11760, 8062, 341, 307, 264, 1150, 295, 732, 2145, 300, 1542, 412, 10446, 46033, 50724], "temperature": 0.0, "avg_logprob": -0.0580440109426325, "compression_ratio": 1.8157894736842106, "no_speech_prob": 0.0006359869730658829}, {"id": 708, "seek": 464180, "start": 4649.0, "end": 4659.4800000000005, "text": " and eigenvectors in the first video we have seen how to find eigenvalues and we write these as lambda", "tokens": [50724, 293, 10446, 303, 5547, 294, 264, 700, 960, 321, 362, 1612, 577, 281, 915, 10446, 46033, 293, 321, 2464, 613, 382, 13607, 51248], "temperature": 0.0, "avg_logprob": -0.0580440109426325, "compression_ratio": 1.8157894736842106, "no_speech_prob": 0.0006359869730658829}, {"id": 709, "seek": 464180, "start": 4660.76, "end": 4667.24, "text": " for each lambda how do we find the eigenvector an eigenvector that goes with it", "tokens": [51312, 337, 1184, 13607, 577, 360, 321, 915, 264, 10446, 303, 1672, 364, 10446, 303, 1672, 300, 1709, 365, 309, 51636], "temperature": 0.0, "avg_logprob": -0.0580440109426325, "compression_ratio": 1.8157894736842106, "no_speech_prob": 0.0006359869730658829}, {"id": 710, "seek": 466724, "start": 4667.24, "end": 4676.84, "text": " we know that our fundamental equation that we're working with here is that when matrix m multiplies", "tokens": [50364, 321, 458, 300, 527, 8088, 5367, 300, 321, 434, 1364, 365, 510, 307, 300, 562, 8141, 275, 12788, 530, 50844], "temperature": 0.0, "avg_logprob": -0.07839017564600165, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.0002868205774575472}, {"id": 711, "seek": 466724, "start": 4676.84, "end": 4683.5599999999995, "text": " an eigenvector v it just gives us back that v scaled by lambda and another way to write that", "tokens": [50844, 364, 10446, 303, 1672, 371, 309, 445, 2709, 505, 646, 300, 371, 36039, 538, 13607, 293, 1071, 636, 281, 2464, 300, 51180], "temperature": 0.0, "avg_logprob": -0.07839017564600165, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.0002868205774575472}, {"id": 712, "seek": 466724, "start": 4683.5599999999995, "end": 4689.96, "text": " is the m minus lambda times the identity multiplied by v is equal to vector zero this is the same", "tokens": [51180, 307, 264, 275, 3175, 13607, 1413, 264, 6575, 17207, 538, 371, 307, 2681, 281, 8062, 4018, 341, 307, 264, 912, 51500], "temperature": 0.0, "avg_logprob": -0.07839017564600165, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.0002868205774575472}, {"id": 713, "seek": 466724, "start": 4689.96, "end": 4696.5199999999995, "text": " equation written two different ways what we need to know now that we um have obtained our lambda", "tokens": [51500, 5367, 3720, 732, 819, 2098, 437, 321, 643, 281, 458, 586, 300, 321, 1105, 362, 14879, 527, 13607, 51828], "temperature": 0.0, "avg_logprob": -0.07839017564600165, "compression_ratio": 1.7834101382488479, "no_speech_prob": 0.0002868205774575472}, {"id": 714, "seek": 469652, "start": 4696.52, "end": 4702.4400000000005, "text": " values we just need to look at one of these equations and figure out an acceptable vector", "tokens": [50364, 4190, 321, 445, 643, 281, 574, 412, 472, 295, 613, 11787, 293, 2573, 484, 364, 15513, 8062, 50660], "temperature": 0.0, "avg_logprob": -0.05568979404590748, "compression_ratio": 1.6682926829268292, "no_speech_prob": 0.0013668799074366689}, {"id": 715, "seek": 469652, "start": 4703.320000000001, "end": 4706.52, "text": " i find that it's more useful to use the form on the right hand side", "tokens": [50704, 741, 915, 300, 309, 311, 544, 4420, 281, 764, 264, 1254, 322, 264, 558, 1011, 1252, 50864], "temperature": 0.0, "avg_logprob": -0.05568979404590748, "compression_ratio": 1.6682926829268292, "no_speech_prob": 0.0013668799074366689}, {"id": 716, "seek": 469652, "start": 4708.6, "end": 4716.360000000001, "text": " okay let's look at a particular example we'll have the matrix two four one minus one we looked at", "tokens": [50968, 1392, 718, 311, 574, 412, 257, 1729, 1365, 321, 603, 362, 264, 8141, 732, 1451, 472, 3175, 472, 321, 2956, 412, 51356], "temperature": 0.0, "avg_logprob": -0.05568979404590748, "compression_ratio": 1.6682926829268292, "no_speech_prob": 0.0013668799074366689}, {"id": 717, "seek": 469652, "start": 4716.360000000001, "end": 4723.88, "text": " this before and we found already that its eigenvalues are equal to three and minus two", "tokens": [51356, 341, 949, 293, 321, 1352, 1217, 300, 1080, 10446, 46033, 366, 2681, 281, 1045, 293, 3175, 732, 51732], "temperature": 0.0, "avg_logprob": -0.05568979404590748, "compression_ratio": 1.6682926829268292, "no_speech_prob": 0.0013668799074366689}, {"id": 718, "seek": 472388, "start": 4724.04, "end": 4731.88, "text": " what we're going to do now is we're going to take those values one at a time and figure out an acceptable", "tokens": [50372, 437, 321, 434, 516, 281, 360, 586, 307, 321, 434, 516, 281, 747, 729, 4190, 472, 412, 257, 565, 293, 2573, 484, 364, 15513, 50764], "temperature": 0.0, "avg_logprob": -0.07293128470579784, "compression_ratio": 1.8394495412844036, "no_speech_prob": 0.0001971578021766618}, {"id": 719, "seek": 472388, "start": 4731.88, "end": 4739.64, "text": " eigenvector we're going to write our vector that we need to find as just x and y where we need to", "tokens": [50764, 10446, 303, 1672, 321, 434, 516, 281, 2464, 527, 8062, 300, 321, 643, 281, 915, 382, 445, 2031, 293, 288, 689, 321, 643, 281, 51152], "temperature": 0.0, "avg_logprob": -0.07293128470579784, "compression_ratio": 1.8394495412844036, "no_speech_prob": 0.0001971578021766618}, {"id": 720, "seek": 472388, "start": 4739.64, "end": 4746.6, "text": " find these x y values now take a look at this green underlined equation and in particular the matrix", "tokens": [51152, 915, 613, 2031, 288, 4190, 586, 747, 257, 574, 412, 341, 3092, 833, 13564, 5367, 293, 294, 1729, 264, 8141, 51500], "temperature": 0.0, "avg_logprob": -0.07293128470579784, "compression_ratio": 1.8394495412844036, "no_speech_prob": 0.0001971578021766618}, {"id": 721, "seek": 472388, "start": 4746.6, "end": 4753.4800000000005, "text": " which is a difference of two different matrices m and lambda times the identity now that we have", "tokens": [51500, 597, 307, 257, 2649, 295, 732, 819, 32284, 275, 293, 13607, 1413, 264, 6575, 586, 300, 321, 362, 51844], "temperature": 0.0, "avg_logprob": -0.07293128470579784, "compression_ratio": 1.8394495412844036, "no_speech_prob": 0.0001971578021766618}, {"id": 722, "seek": 475348, "start": 4753.48, "end": 4759.5599999999995, "text": " our lambda value of three we could write out that difference that difference matrix it's going to be", "tokens": [50364, 527, 13607, 2158, 295, 1045, 321, 727, 2464, 484, 300, 2649, 300, 2649, 8141, 309, 311, 516, 281, 312, 50668], "temperature": 0.0, "avg_logprob": -0.0609236510403185, "compression_ratio": 1.8229166666666667, "no_speech_prob": 0.0009109644452109933}, {"id": 723, "seek": 475348, "start": 4759.5599999999995, "end": 4767.639999999999, "text": " two minus three and then just four and then just one and minus one minus three there it is", "tokens": [50668, 732, 3175, 1045, 293, 550, 445, 1451, 293, 550, 445, 472, 293, 3175, 472, 3175, 1045, 456, 309, 307, 51072], "temperature": 0.0, "avg_logprob": -0.0609236510403185, "compression_ratio": 1.8229166666666667, "no_speech_prob": 0.0009109644452109933}, {"id": 724, "seek": 475348, "start": 4767.639999999999, "end": 4772.28, "text": " we're saying that when that multiplies our vector x y it gives us zero zero", "tokens": [51072, 321, 434, 1566, 300, 562, 300, 12788, 530, 527, 8062, 2031, 288, 309, 2709, 505, 4018, 4018, 51304], "temperature": 0.0, "avg_logprob": -0.0609236510403185, "compression_ratio": 1.8229166666666667, "no_speech_prob": 0.0009109644452109933}, {"id": 725, "seek": 475348, "start": 4774.12, "end": 4779.799999999999, "text": " so let's go ahead and clean this equation up we have minus one four one minus four", "tokens": [51396, 370, 718, 311, 352, 2286, 293, 2541, 341, 5367, 493, 321, 362, 3175, 472, 1451, 472, 3175, 1451, 51680], "temperature": 0.0, "avg_logprob": -0.0609236510403185, "compression_ratio": 1.8229166666666667, "no_speech_prob": 0.0009109644452109933}, {"id": 726, "seek": 477980, "start": 4779.8, "end": 4786.2, "text": " four onto x and y if you want to be explicit about that we can multiply out it means minus x", "tokens": [50364, 1451, 3911, 2031, 293, 288, 498, 291, 528, 281, 312, 13691, 466, 300, 321, 393, 12972, 484, 309, 1355, 3175, 2031, 50684], "temperature": 0.0, "avg_logprob": -0.09568014037743043, "compression_ratio": 1.8634146341463416, "no_speech_prob": 0.0013457071036100388}, {"id": 727, "seek": 477980, "start": 4786.2, "end": 4795.8, "text": " plus four y and x minus four y and that we know is equal to zero zero now what we immediately notice", "tokens": [50684, 1804, 1451, 288, 293, 2031, 3175, 1451, 288, 293, 300, 321, 458, 307, 2681, 281, 4018, 4018, 586, 437, 321, 4258, 3449, 51164], "temperature": 0.0, "avg_logprob": -0.09568014037743043, "compression_ratio": 1.8634146341463416, "no_speech_prob": 0.0013457071036100388}, {"id": 728, "seek": 477980, "start": 4795.8, "end": 4803.0, "text": " here is that whilst this this equation between two columns two column vectors is telling us two", "tokens": [51164, 510, 307, 300, 18534, 341, 341, 5367, 1296, 732, 13766, 732, 7738, 18875, 307, 3585, 505, 732, 51524], "temperature": 0.0, "avg_logprob": -0.09568014037743043, "compression_ratio": 1.8634146341463416, "no_speech_prob": 0.0013457071036100388}, {"id": 729, "seek": 477980, "start": 4803.0, "end": 4809.320000000001, "text": " things it's actually telling us the same equation twice so we can see here that we're saying", "tokens": [51524, 721, 309, 311, 767, 3585, 505, 264, 912, 5367, 6091, 370, 321, 393, 536, 510, 300, 321, 434, 1566, 51840], "temperature": 0.0, "avg_logprob": -0.09568014037743043, "compression_ratio": 1.8634146341463416, "no_speech_prob": 0.0013457071036100388}, {"id": 730, "seek": 480932, "start": 4809.32, "end": 4816.36, "text": " minus x plus four y is equal to zero we're also saying that x minus four y is equal to zero", "tokens": [50364, 3175, 2031, 1804, 1451, 288, 307, 2681, 281, 4018, 321, 434, 611, 1566, 300, 2031, 3175, 1451, 288, 307, 2681, 281, 4018, 50716], "temperature": 0.0, "avg_logprob": -0.06255031913839361, "compression_ratio": 1.7641509433962264, "no_speech_prob": 0.0003740527608897537}, {"id": 731, "seek": 480932, "start": 4816.36, "end": 4822.599999999999, "text": " that's telling us the same thing is that a problem no that's exactly what we want to see", "tokens": [50716, 300, 311, 3585, 505, 264, 912, 551, 307, 300, 257, 1154, 572, 300, 311, 2293, 437, 321, 528, 281, 536, 51028], "temperature": 0.0, "avg_logprob": -0.06255031913839361, "compression_ratio": 1.7641509433962264, "no_speech_prob": 0.0003740527608897537}, {"id": 732, "seek": 480932, "start": 4822.599999999999, "end": 4829.08, "text": " at this stage we should find that when we work on uh eigenvalue and eigenvector problems based on a", "tokens": [51028, 412, 341, 3233, 321, 820, 915, 300, 562, 321, 589, 322, 2232, 10446, 29155, 293, 10446, 303, 1672, 2740, 2361, 322, 257, 51352], "temperature": 0.0, "avg_logprob": -0.06255031913839361, "compression_ratio": 1.7641509433962264, "no_speech_prob": 0.0003740527608897537}, {"id": 733, "seek": 480932, "start": 4829.08, "end": 4836.759999999999, "text": " two by two matrix then really only one of these rows in the final expression uh constrains us", "tokens": [51352, 732, 538, 732, 8141, 550, 534, 787, 472, 295, 613, 13241, 294, 264, 2572, 6114, 2232, 11525, 1292, 505, 51736], "temperature": 0.0, "avg_logprob": -0.06255031913839361, "compression_ratio": 1.7641509433962264, "no_speech_prob": 0.0003740527608897537}, {"id": 734, "seek": 483676, "start": 4836.76, "end": 4843.16, "text": " and the other one doesn't add any new constraint so this is exactly what we want so now how do we", "tokens": [50364, 293, 264, 661, 472, 1177, 380, 909, 604, 777, 25534, 370, 341, 307, 2293, 437, 321, 528, 370, 586, 577, 360, 321, 50684], "temperature": 0.0, "avg_logprob": -0.055090968673293654, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.0010161609388887882}, {"id": 735, "seek": 483676, "start": 4843.16, "end": 4851.08, "text": " go ahead and solve it we're saying that uh minus x plus four y is equal to zero of course we can", "tokens": [50684, 352, 2286, 293, 5039, 309, 321, 434, 1566, 300, 2232, 3175, 2031, 1804, 1451, 288, 307, 2681, 281, 4018, 295, 1164, 321, 393, 51080], "temperature": 0.0, "avg_logprob": -0.055090968673293654, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.0010161609388887882}, {"id": 736, "seek": 483676, "start": 4851.08, "end": 4859.08, "text": " just rearrange this to say instead that four y is equal to x and that's the only constraint we have", "tokens": [51080, 445, 39568, 341, 281, 584, 2602, 300, 1451, 288, 307, 2681, 281, 2031, 293, 300, 311, 264, 787, 25534, 321, 362, 51480], "temperature": 0.0, "avg_logprob": -0.055090968673293654, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.0010161609388887882}, {"id": 737, "seek": 485908, "start": 4859.08, "end": 4871.16, "text": " what we're allowed to do is choose we can choose the simplest values of x and y that will make", "tokens": [50364, 437, 321, 434, 4350, 281, 360, 307, 2826, 321, 393, 2826, 264, 22811, 4190, 295, 2031, 293, 288, 300, 486, 652, 50968], "temperature": 0.0, "avg_logprob": -0.08179258320429554, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.00030060650897212327}, {"id": 738, "seek": 485908, "start": 4871.16, "end": 4876.68, "text": " this work so i'm going to choose y is equal to one and then i'll find that x is equal to four", "tokens": [50968, 341, 589, 370, 741, 478, 516, 281, 2826, 288, 307, 2681, 281, 472, 293, 550, 741, 603, 915, 300, 2031, 307, 2681, 281, 1451, 51244], "temperature": 0.0, "avg_logprob": -0.08179258320429554, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.00030060650897212327}, {"id": 739, "seek": 485908, "start": 4877.88, "end": 4886.68, "text": " and that is a perfectly acceptable eigenvector for one to go with my eigenvalue we will always", "tokens": [51304, 293, 300, 307, 257, 6239, 15513, 10446, 303, 1672, 337, 472, 281, 352, 365, 452, 10446, 29155, 321, 486, 1009, 51744], "temperature": 0.0, "avg_logprob": -0.08179258320429554, "compression_ratio": 1.6647058823529413, "no_speech_prob": 0.00030060650897212327}, {"id": 740, "seek": 488668, "start": 4886.68, "end": 4894.4400000000005, "text": " have this freedom in choosing the elements of our eigenvector really this freedom simply corresponds", "tokens": [50364, 362, 341, 5645, 294, 10875, 264, 4959, 295, 527, 10446, 303, 1672, 534, 341, 5645, 2935, 23249, 50752], "temperature": 0.0, "avg_logprob": -0.06614624886285692, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.004261169116944075}, {"id": 741, "seek": 488668, "start": 4894.4400000000005, "end": 4900.84, "text": " to choosing how long the eigenvector is in other words its magnitude because if a particular", "tokens": [50752, 281, 10875, 577, 938, 264, 10446, 303, 1672, 307, 294, 661, 2283, 1080, 15668, 570, 498, 257, 1729, 51072], "temperature": 0.0, "avg_logprob": -0.06614624886285692, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.004261169116944075}, {"id": 742, "seek": 488668, "start": 4900.84, "end": 4908.12, "text": " eigenvector and eigenvector satisfies our equations a scaled version of that same eigenvector will", "tokens": [51072, 10446, 303, 1672, 293, 10446, 303, 1672, 44271, 527, 11787, 257, 36039, 3037, 295, 300, 912, 10446, 303, 1672, 486, 51436], "temperature": 0.0, "avg_logprob": -0.06614624886285692, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.004261169116944075}, {"id": 743, "seek": 488668, "start": 4908.12, "end": 4916.360000000001, "text": " still satisfy with the same eigenvalue now while the eigenvector can have any length we might", "tokens": [51436, 920, 19319, 365, 264, 912, 10446, 29155, 586, 1339, 264, 10446, 303, 1672, 393, 362, 604, 4641, 321, 1062, 51848], "temperature": 0.0, "avg_logprob": -0.06614624886285692, "compression_ratio": 1.9203980099502487, "no_speech_prob": 0.004261169116944075}, {"id": 744, "seek": 491636, "start": 4916.36, "end": 4923.5599999999995, "text": " specifically have been asked for a normalized eigenvector that simply means we need to take", "tokens": [50364, 4682, 362, 668, 2351, 337, 257, 48704, 10446, 303, 1672, 300, 2935, 1355, 321, 643, 281, 747, 50724], "temperature": 0.0, "avg_logprob": -0.04645438266522957, "compression_ratio": 1.652694610778443, "no_speech_prob": 0.0009098825976252556}, {"id": 745, "seek": 491636, "start": 4923.5599999999995, "end": 4930.28, "text": " the one that we found and scale it to have unit length so in this case since it's four one we", "tokens": [50724, 264, 472, 300, 321, 1352, 293, 4373, 309, 281, 362, 4985, 4641, 370, 294, 341, 1389, 1670, 309, 311, 1451, 472, 321, 51060], "temperature": 0.0, "avg_logprob": -0.04645438266522957, "compression_ratio": 1.652694610778443, "no_speech_prob": 0.0009098825976252556}, {"id": 746, "seek": 491636, "start": 4930.28, "end": 4940.04, "text": " need to divide by uh root seventeen to scale to unit length simple as that so there we are", "tokens": [51060, 643, 281, 9845, 538, 2232, 5593, 39532, 281, 4373, 281, 4985, 4641, 2199, 382, 300, 370, 456, 321, 366, 51548], "temperature": 0.0, "avg_logprob": -0.04645438266522957, "compression_ratio": 1.652694610778443, "no_speech_prob": 0.0009098825976252556}, {"id": 747, "seek": 494004, "start": 4940.04, "end": 4946.68, "text": " that's our eigenvector and a normalized version of it now we still haven't found the eigenvector for", "tokens": [50364, 300, 311, 527, 10446, 303, 1672, 293, 257, 48704, 3037, 295, 309, 586, 321, 920, 2378, 380, 1352, 264, 10446, 303, 1672, 337, 50696], "temperature": 0.0, "avg_logprob": -0.052539226856637505, "compression_ratio": 1.8309859154929577, "no_speech_prob": 0.005383719690144062}, {"id": 748, "seek": 494004, "start": 4946.68, "end": 4953.24, "text": " the other eigenvalue which was minus two let me just move this up on the screen to make space to", "tokens": [50696, 264, 661, 10446, 29155, 597, 390, 3175, 732, 718, 385, 445, 1286, 341, 493, 322, 264, 2568, 281, 652, 1901, 281, 51024], "temperature": 0.0, "avg_logprob": -0.052539226856637505, "compression_ratio": 1.8309859154929577, "no_speech_prob": 0.005383719690144062}, {"id": 749, "seek": 494004, "start": 4953.24, "end": 4958.5199999999995, "text": " do that at the bottom so here we go we do exactly the same procedure we subtract minus two on the", "tokens": [51024, 360, 300, 412, 264, 2767, 370, 510, 321, 352, 321, 360, 2293, 264, 912, 10747, 321, 16390, 3175, 732, 322, 264, 51288], "temperature": 0.0, "avg_logprob": -0.052539226856637505, "compression_ratio": 1.8309859154929577, "no_speech_prob": 0.005383719690144062}, {"id": 750, "seek": 494004, "start": 4958.5199999999995, "end": 4965.64, "text": " diagonal two minus minus two and four and one minus one minus minus two lots of minus is there", "tokens": [51288, 21539, 732, 3175, 3175, 732, 293, 1451, 293, 472, 3175, 472, 3175, 3175, 732, 3195, 295, 3175, 307, 456, 51644], "temperature": 0.0, "avg_logprob": -0.052539226856637505, "compression_ratio": 1.8309859154929577, "no_speech_prob": 0.005383719690144062}, {"id": 751, "seek": 496564, "start": 4965.72, "end": 4973.72, "text": " so let's uh tidy that up that's going to be four four one and in fact another one", "tokens": [50368, 370, 718, 311, 2232, 34646, 300, 493, 300, 311, 516, 281, 312, 1451, 1451, 472, 293, 294, 1186, 1071, 472, 50768], "temperature": 0.0, "avg_logprob": -0.06628288106715426, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.0014777263859286904}, {"id": 752, "seek": 496564, "start": 4974.52, "end": 4981.64, "text": " and then times x y is equal to zero zero as before we see that really these this is the", "tokens": [50808, 293, 550, 1413, 2031, 288, 307, 2681, 281, 4018, 4018, 382, 949, 321, 536, 300, 534, 613, 341, 307, 264, 51164], "temperature": 0.0, "avg_logprob": -0.06628288106715426, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.0014777263859286904}, {"id": 753, "seek": 496564, "start": 4981.64, "end": 4987.160000000001, "text": " same equation twice there's only one constraint and we can read it off simply as x is equal to", "tokens": [51164, 912, 5367, 6091, 456, 311, 787, 472, 25534, 293, 321, 393, 1401, 309, 766, 2935, 382, 2031, 307, 2681, 281, 51440], "temperature": 0.0, "avg_logprob": -0.06628288106715426, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.0014777263859286904}, {"id": 754, "seek": 496564, "start": 4987.160000000001, "end": 4993.8, "text": " minus y so if i choose x is equal to one for example then i'm going to write down an eigenvector", "tokens": [51440, 3175, 288, 370, 498, 741, 2826, 2031, 307, 2681, 281, 472, 337, 1365, 550, 741, 478, 516, 281, 2464, 760, 364, 10446, 303, 1672, 51772], "temperature": 0.0, "avg_logprob": -0.06628288106715426, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.0014777263859286904}, {"id": 755, "seek": 499380, "start": 4993.8, "end": 4997.64, "text": " one minus one or if i've chosen y is equal to one then it would have been", "tokens": [50364, 472, 3175, 472, 420, 498, 741, 600, 8614, 288, 307, 2681, 281, 472, 550, 309, 576, 362, 668, 50556], "temperature": 0.0, "avg_logprob": -0.07212117012966884, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.0007092304877005517}, {"id": 756, "seek": 499380, "start": 4997.64, "end": 5003.400000000001, "text": " minus one one it doesn't matter they're both correct eigenvectors to go with our eigenvalue", "tokens": [50556, 3175, 472, 472, 309, 1177, 380, 1871, 436, 434, 1293, 3006, 10446, 303, 5547, 281, 352, 365, 527, 10446, 29155, 50844], "temperature": 0.0, "avg_logprob": -0.07212117012966884, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.0007092304877005517}, {"id": 757, "seek": 499380, "start": 5003.400000000001, "end": 5009.400000000001, "text": " but if we want to normalize well they need to divide by the magnitude one over root two okay", "tokens": [50844, 457, 498, 321, 528, 281, 2710, 1125, 731, 436, 643, 281, 9845, 538, 264, 15668, 472, 670, 5593, 732, 1392, 51144], "temperature": 0.0, "avg_logprob": -0.07212117012966884, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.0007092304877005517}, {"id": 758, "seek": 499380, "start": 5009.400000000001, "end": 5018.6, "text": " so there are acceptable eigenvectors to go with the eigenvalue minus two okay so now let's find", "tokens": [51144, 370, 456, 366, 15513, 10446, 303, 5547, 281, 352, 365, 264, 10446, 29155, 3175, 732, 1392, 370, 586, 718, 311, 915, 51604], "temperature": 0.0, "avg_logprob": -0.07212117012966884, "compression_ratio": 1.8061224489795917, "no_speech_prob": 0.0007092304877005517}, {"id": 759, "seek": 501860, "start": 5019.400000000001, "end": 5027.88, "text": " the eigenvectors that go with the eigenvalues for our three by three matrix m which was", "tokens": [50404, 264, 10446, 303, 5547, 300, 352, 365, 264, 10446, 46033, 337, 527, 1045, 538, 1045, 8141, 275, 597, 390, 50828], "temperature": 0.0, "avg_logprob": -0.0855841799215837, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.02332143671810627}, {"id": 760, "seek": 501860, "start": 5029.400000000001, "end": 5039.96, "text": " minus two one three one minus one zero minus one one two we looked at that before in the", "tokens": [50904, 3175, 732, 472, 1045, 472, 3175, 472, 4018, 3175, 472, 472, 732, 321, 2956, 412, 300, 949, 294, 264, 51432], "temperature": 0.0, "avg_logprob": -0.0855841799215837, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.02332143671810627}, {"id": 761, "seek": 503996, "start": 5039.96, "end": 5050.52, "text": " previous video and we found the eigenvalues which were minus one root two and minus root two", "tokens": [50364, 3894, 960, 293, 321, 1352, 264, 10446, 46033, 597, 645, 3175, 472, 5593, 732, 293, 3175, 5593, 732, 50892], "temperature": 0.0, "avg_logprob": -0.057212271341463415, "compression_ratio": 1.8423913043478262, "no_speech_prob": 0.0009253660682588816}, {"id": 762, "seek": 503996, "start": 5051.16, "end": 5056.6, "text": " and i've put little subscripts on our lambdas here so we know which one we're dealing with", "tokens": [50924, 293, 741, 600, 829, 707, 2325, 39280, 322, 527, 10097, 27476, 510, 370, 321, 458, 597, 472, 321, 434, 6260, 365, 51196], "temperature": 0.0, "avg_logprob": -0.057212271341463415, "compression_ratio": 1.8423913043478262, "no_speech_prob": 0.0009253660682588816}, {"id": 763, "seek": 503996, "start": 5056.6, "end": 5061.4800000000005, "text": " let's deal with lambda one first which is the one that has value minus one", "tokens": [51196, 718, 311, 2028, 365, 13607, 472, 700, 597, 307, 264, 472, 300, 575, 2158, 3175, 472, 51440], "temperature": 0.0, "avg_logprob": -0.057212271341463415, "compression_ratio": 1.8423913043478262, "no_speech_prob": 0.0009253660682588816}, {"id": 764, "seek": 503996, "start": 5063.08, "end": 5067.16, "text": " so i'll write over here the little equation that we're using over and over again", "tokens": [51520, 370, 741, 603, 2464, 670, 510, 264, 707, 5367, 300, 321, 434, 1228, 670, 293, 670, 797, 51724], "temperature": 0.0, "avg_logprob": -0.057212271341463415, "compression_ratio": 1.8423913043478262, "no_speech_prob": 0.0009253660682588816}, {"id": 765, "seek": 506716, "start": 5067.16, "end": 5072.599999999999, "text": " which is that m minus lambda times the identity multiplied by our vector is zero", "tokens": [50364, 597, 307, 300, 275, 3175, 13607, 1413, 264, 6575, 17207, 538, 527, 8062, 307, 4018, 50636], "temperature": 0.0, "avg_logprob": -0.06514270217330367, "compression_ratio": 1.9171270718232045, "no_speech_prob": 0.0009697063942439854}, {"id": 766, "seek": 506716, "start": 5073.639999999999, "end": 5078.84, "text": " okay we need this difference matrix so we subtract off the diagonal one minus minus one", "tokens": [50688, 1392, 321, 643, 341, 2649, 8141, 370, 321, 16390, 766, 264, 21539, 472, 3175, 3175, 472, 50948], "temperature": 0.0, "avg_logprob": -0.06514270217330367, "compression_ratio": 1.9171270718232045, "no_speech_prob": 0.0009697063942439854}, {"id": 767, "seek": 506716, "start": 5078.84, "end": 5088.2, "text": " and then one three one and minus one minus minus one and zero minus one one and two minus minus one", "tokens": [50948, 293, 550, 472, 1045, 472, 293, 3175, 472, 3175, 3175, 472, 293, 4018, 3175, 472, 472, 293, 732, 3175, 3175, 472, 51416], "temperature": 0.0, "avg_logprob": -0.06514270217330367, "compression_ratio": 1.9171270718232045, "no_speech_prob": 0.0009697063942439854}, {"id": 768, "seek": 506716, "start": 5089.32, "end": 5093.8, "text": " and that's on x y and z because we now need an eigenvector with three elements", "tokens": [51472, 293, 300, 311, 322, 2031, 288, 293, 710, 570, 321, 586, 643, 364, 10446, 303, 1672, 365, 1045, 4959, 51696], "temperature": 0.0, "avg_logprob": -0.06514270217330367, "compression_ratio": 1.9171270718232045, "no_speech_prob": 0.0009697063942439854}, {"id": 769, "seek": 509380, "start": 5094.76, "end": 5103.4800000000005, "text": " and it's going to be equal to uh we simplify the matrix to minus one one three one zero zero", "tokens": [50412, 293, 309, 311, 516, 281, 312, 2681, 281, 2232, 321, 20460, 264, 8141, 281, 3175, 472, 472, 1045, 472, 4018, 4018, 50848], "temperature": 0.0, "avg_logprob": -0.1010979413986206, "compression_ratio": 1.575, "no_speech_prob": 0.005468678195029497}, {"id": 770, "seek": 509380, "start": 5103.4800000000005, "end": 5115.24, "text": " minus one one and that'll be a three and that again is on our x y z eigenvector is equal to zero", "tokens": [50848, 3175, 472, 472, 293, 300, 603, 312, 257, 1045, 293, 300, 797, 307, 322, 527, 2031, 288, 710, 10446, 303, 1672, 307, 2681, 281, 4018, 51436], "temperature": 0.0, "avg_logprob": -0.1010979413986206, "compression_ratio": 1.575, "no_speech_prob": 0.005468678195029497}, {"id": 771, "seek": 511524, "start": 5115.639999999999, "end": 5124.28, "text": " zero now what we immediately notice is that as before we don't really have three different", "tokens": [50384, 4018, 586, 437, 321, 4258, 3449, 307, 300, 382, 949, 321, 500, 380, 534, 362, 1045, 819, 50816], "temperature": 0.0, "avg_logprob": -0.060398762484630907, "compression_ratio": 1.7766990291262137, "no_speech_prob": 0.001674295635893941}, {"id": 772, "seek": 511524, "start": 5124.28, "end": 5131.0, "text": " equations captured by our matrix equation we only have two in fact this is very obvious in", "tokens": [50816, 11787, 11828, 538, 527, 8141, 5367, 321, 787, 362, 732, 294, 1186, 341, 307, 588, 6322, 294, 51152], "temperature": 0.0, "avg_logprob": -0.060398762484630907, "compression_ratio": 1.7766990291262137, "no_speech_prob": 0.001674295635893941}, {"id": 773, "seek": 511524, "start": 5131.0, "end": 5138.12, "text": " this case because the bottom row is the same as the top row that's not always the case it's not", "tokens": [51152, 341, 1389, 570, 264, 2767, 5386, 307, 264, 912, 382, 264, 1192, 5386, 300, 311, 406, 1009, 264, 1389, 309, 311, 406, 51508], "temperature": 0.0, "avg_logprob": -0.060398762484630907, "compression_ratio": 1.7766990291262137, "no_speech_prob": 0.001674295635893941}, {"id": 774, "seek": 511524, "start": 5138.12, "end": 5144.04, "text": " always the case that the rows are actually identical but we will always find if we check", "tokens": [51508, 1009, 264, 1389, 300, 264, 13241, 366, 767, 14800, 457, 321, 486, 1009, 915, 498, 321, 1520, 51804], "temperature": 0.0, "avg_logprob": -0.060398762484630907, "compression_ratio": 1.7766990291262137, "no_speech_prob": 0.001674295635893941}, {"id": 775, "seek": 514404, "start": 5144.04, "end": 5149.4, "text": " that there are only really two independent equations when we're dealing with three by", "tokens": [50364, 300, 456, 366, 787, 534, 732, 6695, 11787, 562, 321, 434, 6260, 365, 1045, 538, 50632], "temperature": 0.0, "avg_logprob": -0.08282106097151594, "compression_ratio": 1.7336683417085428, "no_speech_prob": 0.0016479011392220855}, {"id": 776, "seek": 514404, "start": 5149.4, "end": 5157.32, "text": " three eigenvalue problems we only have two equations really now i'm going to uh highlight", "tokens": [50632, 1045, 10446, 29155, 2740, 321, 787, 362, 732, 11787, 534, 586, 741, 478, 516, 281, 2232, 5078, 51028], "temperature": 0.0, "avg_logprob": -0.08282106097151594, "compression_ratio": 1.7336683417085428, "no_speech_prob": 0.0016479011392220855}, {"id": 777, "seek": 514404, "start": 5157.32, "end": 5162.92, "text": " this row here one zero zero that's just saying in fact that x is equal to zero", "tokens": [51028, 341, 5386, 510, 472, 4018, 4018, 300, 311, 445, 1566, 294, 1186, 300, 2031, 307, 2681, 281, 4018, 51308], "temperature": 0.0, "avg_logprob": -0.08282106097151594, "compression_ratio": 1.7336683417085428, "no_speech_prob": 0.0016479011392220855}, {"id": 778, "seek": 514404, "start": 5164.68, "end": 5171.0, "text": " now if we take uh either the top row or the bottom run we have minus x plus y plus three z", "tokens": [51396, 586, 498, 321, 747, 2232, 2139, 264, 1192, 5386, 420, 264, 2767, 1190, 321, 362, 3175, 2031, 1804, 288, 1804, 1045, 710, 51712], "temperature": 0.0, "avg_logprob": -0.08282106097151594, "compression_ratio": 1.7336683417085428, "no_speech_prob": 0.0016479011392220855}, {"id": 779, "seek": 517100, "start": 5171.0, "end": 5180.12, "text": " is equal to zero or y is equal to minus three z okay so now we simply uh choose any values", "tokens": [50364, 307, 2681, 281, 4018, 420, 288, 307, 2681, 281, 3175, 1045, 710, 1392, 370, 586, 321, 2935, 2232, 2826, 604, 4190, 50820], "temperature": 0.0, "avg_logprob": -0.06785523891448975, "compression_ratio": 1.8253968253968254, "no_speech_prob": 0.002550530480220914}, {"id": 780, "seek": 517100, "start": 5180.12, "end": 5187.08, "text": " of y and z x has been dictated to us but any values of i y and z that satisfy these rows", "tokens": [50820, 295, 288, 293, 710, 2031, 575, 668, 12569, 770, 281, 505, 457, 604, 4190, 295, 741, 288, 293, 710, 300, 19319, 613, 13241, 51168], "temperature": 0.0, "avg_logprob": -0.06785523891448975, "compression_ratio": 1.8253968253968254, "no_speech_prob": 0.002550530480220914}, {"id": 781, "seek": 517100, "start": 5188.04, "end": 5192.2, "text": " so if i choose z is equal to one that's going to give me y is equal to minus three", "tokens": [51216, 370, 498, 741, 2826, 710, 307, 2681, 281, 472, 300, 311, 516, 281, 976, 385, 288, 307, 2681, 281, 3175, 1045, 51424], "temperature": 0.0, "avg_logprob": -0.06785523891448975, "compression_ratio": 1.8253968253968254, "no_speech_prob": 0.002550530480220914}, {"id": 782, "seek": 517100, "start": 5192.84, "end": 5198.12, "text": " and i can straight away then write down a satisfactory eigenvector it will be zero", "tokens": [51456, 293, 741, 393, 2997, 1314, 550, 2464, 760, 257, 48614, 10446, 303, 1672, 309, 486, 312, 4018, 51720], "temperature": 0.0, "avg_logprob": -0.06785523891448975, "compression_ratio": 1.8253968253968254, "no_speech_prob": 0.002550530480220914}, {"id": 783, "seek": 519812, "start": 5198.12, "end": 5203.88, "text": " minus three one as simple as that it doesn't matter whether minus sign is i could equivalently", "tokens": [50364, 3175, 1045, 472, 382, 2199, 382, 300, 309, 1177, 380, 1871, 1968, 3175, 1465, 307, 741, 727, 9052, 2276, 50652], "temperature": 0.0, "avg_logprob": -0.07354877283284952, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.004753575194627047}, {"id": 784, "seek": 519812, "start": 5203.88, "end": 5211.8, "text": " have chosen z is equal to minus one and then i'd have zero three minus one if i normalize then", "tokens": [50652, 362, 8614, 710, 307, 2681, 281, 3175, 472, 293, 550, 741, 1116, 362, 4018, 1045, 3175, 472, 498, 741, 2710, 1125, 550, 51048], "temperature": 0.0, "avg_logprob": -0.07354877283284952, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.004753575194627047}, {"id": 785, "seek": 519812, "start": 5211.8, "end": 5219.16, "text": " i'll need one over root ten that being three squared plus one squared and so that is a complete", "tokens": [51048, 741, 603, 643, 472, 670, 5593, 2064, 300, 885, 1045, 8889, 1804, 472, 8889, 293, 370, 300, 307, 257, 3566, 51416], "temperature": 0.0, "avg_logprob": -0.07354877283284952, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.004753575194627047}, {"id": 786, "seek": 519812, "start": 5219.16, "end": 5224.84, "text": " solution for our first eigenvector we found it in simple form and in normalized form this is the", "tokens": [51416, 3827, 337, 527, 700, 10446, 303, 1672, 321, 1352, 309, 294, 2199, 1254, 293, 294, 48704, 1254, 341, 307, 264, 51700], "temperature": 0.0, "avg_logprob": -0.07354877283284952, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.004753575194627047}, {"id": 787, "seek": 522484, "start": 5224.84, "end": 5231.8, "text": " eigenvector that goes with eigenvalue minus one we can go ahead however and check this eigenvector", "tokens": [50364, 10446, 303, 1672, 300, 1709, 365, 10446, 29155, 3175, 472, 321, 393, 352, 2286, 4461, 293, 1520, 341, 10446, 303, 1672, 50712], "temperature": 0.0, "avg_logprob": -0.05281902819263692, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.0015010690549388528}, {"id": 788, "seek": 522484, "start": 5231.8, "end": 5239.72, "text": " to make sure that it works so for that we'll simply need to write out our matrix m the original matrix", "tokens": [50712, 281, 652, 988, 300, 309, 1985, 370, 337, 300, 321, 603, 2935, 643, 281, 2464, 484, 527, 8141, 275, 264, 3380, 8141, 51108], "temperature": 0.0, "avg_logprob": -0.05281902819263692, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.0015010690549388528}, {"id": 789, "seek": 523972, "start": 5239.72, "end": 5250.92, "text": " which was minus two one three one minus one zero minus one one two we have our", "tokens": [50364, 597, 390, 3175, 732, 472, 1045, 472, 3175, 472, 4018, 3175, 472, 472, 732, 321, 362, 527, 50924], "temperature": 0.0, "avg_logprob": -0.08478412908666275, "compression_ratio": 1.8424657534246576, "no_speech_prob": 0.003027727361768484}, {"id": 790, "seek": 523972, "start": 5251.72, "end": 5258.68, "text": " vector zero three minus one we just need to do this sum so the first element is going to be", "tokens": [50964, 8062, 4018, 1045, 3175, 472, 321, 445, 643, 281, 360, 341, 2408, 370, 264, 700, 4478, 307, 516, 281, 312, 51312], "temperature": 0.0, "avg_logprob": -0.08478412908666275, "compression_ratio": 1.8424657534246576, "no_speech_prob": 0.003027727361768484}, {"id": 791, "seek": 523972, "start": 5259.320000000001, "end": 5264.6, "text": " a minus two times zero and then so three and i see there's a minus three so that does give us zero", "tokens": [51344, 257, 3175, 732, 1413, 4018, 293, 550, 370, 1045, 293, 741, 536, 456, 311, 257, 3175, 1045, 370, 300, 775, 976, 505, 4018, 51608], "temperature": 0.0, "avg_logprob": -0.08478412908666275, "compression_ratio": 1.8424657534246576, "no_speech_prob": 0.003027727361768484}, {"id": 792, "seek": 526460, "start": 5265.160000000001, "end": 5269.56, "text": " and our second element is the only non zero element will be minus three", "tokens": [50392, 293, 527, 1150, 4478, 307, 264, 787, 2107, 4018, 4478, 486, 312, 3175, 1045, 50612], "temperature": 0.0, "avg_logprob": -0.07327725773765928, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.001225499901920557}, {"id": 793, "seek": 526460, "start": 5270.52, "end": 5277.64, "text": " and our third third element there gives us one and we can write that as simply minus one", "tokens": [50660, 293, 527, 2636, 2636, 4478, 456, 2709, 505, 472, 293, 321, 393, 2464, 300, 382, 2935, 3175, 472, 51016], "temperature": 0.0, "avg_logprob": -0.07327725773765928, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.001225499901920557}, {"id": 794, "seek": 526460, "start": 5277.64, "end": 5285.240000000001, "text": " onto zero three minus one and so indeed we found that this vector works with the eigenvalue of", "tokens": [51016, 3911, 4018, 1045, 3175, 472, 293, 370, 6451, 321, 1352, 300, 341, 8062, 1985, 365, 264, 10446, 29155, 295, 51396], "temperature": 0.0, "avg_logprob": -0.07327725773765928, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.001225499901920557}, {"id": 795, "seek": 526460, "start": 5285.240000000001, "end": 5293.0, "text": " minus one now we can continue to look at uh to find the other eigenvectors but first let's take a", "tokens": [51396, 3175, 472, 586, 321, 393, 2354, 281, 574, 412, 2232, 281, 915, 264, 661, 10446, 303, 5547, 457, 700, 718, 311, 747, 257, 51784], "temperature": 0.0, "avg_logprob": -0.07327725773765928, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.001225499901920557}, {"id": 796, "seek": 529300, "start": 5293.0, "end": 5302.28, "text": " pause and review the steps involved so we're looking at rules for solving eigenvector problems", "tokens": [50364, 10465, 293, 3131, 264, 4439, 3288, 370, 321, 434, 1237, 412, 4474, 337, 12606, 10446, 303, 1672, 2740, 50828], "temperature": 0.0, "avg_logprob": -0.04384939727329072, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.0005032897461205721}, {"id": 797, "seek": 529300, "start": 5302.28, "end": 5307.48, "text": " eigenvector problem is where we have a square matrix m and we say that m multiplied by some", "tokens": [50828, 10446, 303, 1672, 1154, 307, 689, 321, 362, 257, 3732, 8141, 275, 293, 321, 584, 300, 275, 17207, 538, 512, 51088], "temperature": 0.0, "avg_logprob": -0.04384939727329072, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.0005032897461205721}, {"id": 798, "seek": 529300, "start": 5307.48, "end": 5315.56, "text": " special eigenvector gives us back that eigenvector times just by a value the eigenvalue we find the", "tokens": [51088, 2121, 10446, 303, 1672, 2709, 505, 646, 300, 10446, 303, 1672, 1413, 445, 538, 257, 2158, 264, 10446, 29155, 321, 915, 264, 51492], "temperature": 0.0, "avg_logprob": -0.04384939727329072, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.0005032897461205721}, {"id": 799, "seek": 529300, "start": 5315.56, "end": 5321.64, "text": " possible eigenvalues using this equation involving a determinant of a difference of two matrices", "tokens": [51492, 1944, 10446, 46033, 1228, 341, 5367, 17030, 257, 41296, 295, 257, 2649, 295, 732, 32284, 51796], "temperature": 0.0, "avg_logprob": -0.04384939727329072, "compression_ratio": 1.7897196261682242, "no_speech_prob": 0.0005032897461205721}, {"id": 800, "seek": 532300, "start": 5323.48, "end": 5330.28, "text": " in general there are going to be n solutions for an n by n matrix so two solutions for a two by two", "tokens": [50388, 294, 2674, 456, 366, 516, 281, 312, 297, 6547, 337, 364, 297, 538, 297, 8141, 370, 732, 6547, 337, 257, 732, 538, 732, 50728], "temperature": 0.0, "avg_logprob": -0.057245314806357195, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.00033012143103405833}, {"id": 801, "seek": 532300, "start": 5330.28, "end": 5336.12, "text": " three solutions three solutions for a three by three matrix that's because when we write the", "tokens": [50728, 1045, 6547, 1045, 6547, 337, 257, 1045, 538, 1045, 8141, 300, 311, 570, 562, 321, 2464, 264, 51020], "temperature": 0.0, "avg_logprob": -0.057245314806357195, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.00033012143103405833}, {"id": 802, "seek": 532300, "start": 5336.12, "end": 5343.24, "text": " determinant it will have lambda to the power of n as its highest order so for example we have", "tokens": [51020, 41296, 309, 486, 362, 13607, 281, 264, 1347, 295, 297, 382, 1080, 6343, 1668, 370, 337, 1365, 321, 362, 51376], "temperature": 0.0, "avg_logprob": -0.057245314806357195, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.00033012143103405833}, {"id": 803, "seek": 532300, "start": 5343.24, "end": 5350.28, "text": " cubed to deal with when we're working out for three by three matrices now having found those", "tokens": [51376, 36510, 281, 2028, 365, 562, 321, 434, 1364, 484, 337, 1045, 538, 1045, 32284, 586, 1419, 1352, 729, 51728], "temperature": 0.0, "avg_logprob": -0.057245314806357195, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.00033012143103405833}, {"id": 804, "seek": 535028, "start": 5350.36, "end": 5356.12, "text": " eigenvalues we then for each value need to figure out an acceptable eigenvector", "tokens": [50368, 10446, 46033, 321, 550, 337, 1184, 2158, 643, 281, 2573, 484, 364, 15513, 10446, 303, 1672, 50656], "temperature": 0.0, "avg_logprob": -0.0497970061424451, "compression_ratio": 1.7486338797814207, "no_speech_prob": 0.0008968784241005778}, {"id": 805, "seek": 535028, "start": 5358.04, "end": 5364.679999999999, "text": " what we've noticed is that generally we only have to use n minus one of the rows in the equation", "tokens": [50752, 437, 321, 600, 5694, 307, 300, 5101, 321, 787, 362, 281, 764, 297, 3175, 472, 295, 264, 13241, 294, 264, 5367, 51084], "temperature": 0.0, "avg_logprob": -0.0497970061424451, "compression_ratio": 1.7486338797814207, "no_speech_prob": 0.0008968784241005778}, {"id": 806, "seek": 535028, "start": 5364.679999999999, "end": 5370.5199999999995, "text": " that we're working to satisfy and that meant just one row in the case of two by two problems", "tokens": [51084, 300, 321, 434, 1364, 281, 19319, 293, 300, 4140, 445, 472, 5386, 294, 264, 1389, 295, 732, 538, 732, 2740, 51376], "temperature": 0.0, "avg_logprob": -0.0497970061424451, "compression_ratio": 1.7486338797814207, "no_speech_prob": 0.0008968784241005778}, {"id": 807, "seek": 535028, "start": 5371.24, "end": 5373.639999999999, "text": " and two of the rows in the three by three problems", "tokens": [51412, 293, 732, 295, 264, 13241, 294, 264, 1045, 538, 1045, 2740, 51532], "temperature": 0.0, "avg_logprob": -0.0497970061424451, "compression_ratio": 1.7486338797814207, "no_speech_prob": 0.0008968784241005778}, {"id": 808, "seek": 537364, "start": 5373.64, "end": 5382.6, "text": " we had some freedom as to what values to choose for our eigenvector and in fact that freedom", "tokens": [50364, 321, 632, 512, 5645, 382, 281, 437, 4190, 281, 2826, 337, 527, 10446, 303, 1672, 293, 294, 1186, 300, 5645, 50812], "temperature": 0.0, "avg_logprob": -0.06901541815863715, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.004197284113615751}, {"id": 809, "seek": 537364, "start": 5382.6, "end": 5389.96, "text": " corresponded to just scaling the entire eigenvector to a greater or smaller magnitude and if we were", "tokens": [50812, 6805, 292, 281, 445, 21589, 264, 2302, 10446, 303, 1672, 281, 257, 5044, 420, 4356, 15668, 293, 498, 321, 645, 51180], "temperature": 0.0, "avg_logprob": -0.06901541815863715, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.004197284113615751}, {"id": 810, "seek": 537364, "start": 5389.96, "end": 5394.92, "text": " asked to normalize we would simply work it out using whatever values we like the simplest values", "tokens": [51180, 2351, 281, 2710, 1125, 321, 576, 2935, 589, 309, 484, 1228, 2035, 4190, 321, 411, 264, 22811, 4190, 51428], "temperature": 0.0, "avg_logprob": -0.06901541815863715, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.004197284113615751}, {"id": 811, "seek": 537364, "start": 5395.56, "end": 5402.6, "text": " and scale it at the last step so that it has unit length okay so we've covered a lot of ground", "tokens": [51460, 293, 4373, 309, 412, 264, 1036, 1823, 370, 300, 309, 575, 4985, 4641, 1392, 370, 321, 600, 5343, 257, 688, 295, 2727, 51812], "temperature": 0.0, "avg_logprob": -0.06901541815863715, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.004197284113615751}, {"id": 812, "seek": 540260, "start": 5402.6, "end": 5408.120000000001, "text": " for one video and this would be a good place to just stop watching if you like but i would like to", "tokens": [50364, 337, 472, 960, 293, 341, 576, 312, 257, 665, 1081, 281, 445, 1590, 1976, 498, 291, 411, 457, 741, 576, 411, 281, 50640], "temperature": 0.0, "avg_logprob": -0.03865827259264494, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.0028431303799152374}, {"id": 813, "seek": 540260, "start": 5408.120000000001, "end": 5414.200000000001, "text": " carry on and solve the remaining two eigenvectors for our three by three example because they involve", "tokens": [50640, 3985, 322, 293, 5039, 264, 8877, 732, 10446, 303, 5547, 337, 527, 1045, 538, 1045, 1365, 570, 436, 9494, 50944], "temperature": 0.0, "avg_logprob": -0.03865827259264494, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.0028431303799152374}, {"id": 814, "seek": 540260, "start": 5414.200000000001, "end": 5419.0, "text": " a square root two they're actually a bit more messy and tricky to do and in a way i think that makes", "tokens": [50944, 257, 3732, 5593, 732, 436, 434, 767, 257, 857, 544, 16191, 293, 12414, 281, 360, 293, 294, 257, 636, 741, 519, 300, 1669, 51184], "temperature": 0.0, "avg_logprob": -0.03865827259264494, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.0028431303799152374}, {"id": 815, "seek": 540260, "start": 5419.0, "end": 5425.88, "text": " for a good interesting example to see so let me go ahead and cut back to the screen that we had", "tokens": [51184, 337, 257, 665, 1880, 1365, 281, 536, 370, 718, 385, 352, 2286, 293, 1723, 646, 281, 264, 2568, 300, 321, 632, 51528], "temperature": 0.0, "avg_logprob": -0.03865827259264494, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.0028431303799152374}, {"id": 816, "seek": 542588, "start": 5425.88, "end": 5432.92, "text": " before with our matrix m spelt out and our possible eigenvalues and we'll now take the value lambda", "tokens": [50364, 949, 365, 527, 8141, 275, 637, 2018, 484, 293, 527, 1944, 10446, 46033, 293, 321, 603, 586, 747, 264, 2158, 13607, 50716], "temperature": 0.0, "avg_logprob": -0.06756572446961334, "compression_ratio": 1.7664670658682635, "no_speech_prob": 0.018260490149259567}, {"id": 817, "seek": 542588, "start": 5432.92, "end": 5440.76, "text": " subscript two which is square root two so then as usual we need to subtract that down the diagonal", "tokens": [50716, 2325, 662, 732, 597, 307, 3732, 5593, 732, 370, 550, 382, 7713, 321, 643, 281, 16390, 300, 760, 264, 21539, 51108], "temperature": 0.0, "avg_logprob": -0.06756572446961334, "compression_ratio": 1.7664670658682635, "no_speech_prob": 0.018260490149259567}, {"id": 818, "seek": 542588, "start": 5440.76, "end": 5448.68, "text": " so we'll have minus two minus square root two one three one minus one minus square root two zero", "tokens": [51108, 370, 321, 603, 362, 3175, 732, 3175, 3732, 5593, 732, 472, 1045, 472, 3175, 472, 3175, 3732, 5593, 732, 4018, 51504], "temperature": 0.0, "avg_logprob": -0.06756572446961334, "compression_ratio": 1.7664670658682635, "no_speech_prob": 0.018260490149259567}, {"id": 819, "seek": 544868, "start": 5449.4800000000005, "end": 5457.0, "text": " minus one one two minus square root two and that is the thing which when multiplied by", "tokens": [50404, 3175, 472, 472, 732, 3175, 3732, 5593, 732, 293, 300, 307, 264, 551, 597, 562, 17207, 538, 50780], "temperature": 0.0, "avg_logprob": -0.061502639637436976, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.002433299319818616}, {"id": 820, "seek": 544868, "start": 5457.0, "end": 5464.6, "text": " our unknown eigenvector xyz should give us zero zero zero now one thing we notice here is the rows", "tokens": [50780, 527, 9841, 10446, 303, 1672, 2031, 37433, 820, 976, 505, 4018, 4018, 4018, 586, 472, 551, 321, 3449, 510, 307, 264, 13241, 51160], "temperature": 0.0, "avg_logprob": -0.061502639637436976, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.002433299319818616}, {"id": 821, "seek": 544868, "start": 5464.6, "end": 5470.6, "text": " look all different it looks like we've got three different equations captured in this matrix equation", "tokens": [51160, 574, 439, 819, 309, 1542, 411, 321, 600, 658, 1045, 819, 11787, 11828, 294, 341, 8141, 5367, 51460], "temperature": 0.0, "avg_logprob": -0.061502639637436976, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.002433299319818616}, {"id": 822, "seek": 544868, "start": 5470.6, "end": 5476.04, "text": " but they are not if we examine them carefully enough we'd find that we could generate one of these", "tokens": [51460, 457, 436, 366, 406, 498, 321, 17496, 552, 7500, 1547, 321, 1116, 915, 300, 321, 727, 8460, 472, 295, 613, 51732], "temperature": 0.0, "avg_logprob": -0.061502639637436976, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.002433299319818616}, {"id": 823, "seek": 547604, "start": 5476.68, "end": 5482.12, "text": " rows from the other two and in fact we're only therefore going to need to use two of them", "tokens": [50396, 13241, 490, 264, 661, 732, 293, 294, 1186, 321, 434, 787, 4412, 516, 281, 643, 281, 764, 732, 295, 552, 50668], "temperature": 0.0, "avg_logprob": -0.047365476345193794, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.00180833600461483}, {"id": 824, "seek": 547604, "start": 5482.12, "end": 5485.96, "text": " you could pause the video and play with it and see if you can show this but it must always be", "tokens": [50668, 291, 727, 10465, 264, 960, 293, 862, 365, 309, 293, 536, 498, 291, 393, 855, 341, 457, 309, 1633, 1009, 312, 50860], "temperature": 0.0, "avg_logprob": -0.047365476345193794, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.00180833600461483}, {"id": 825, "seek": 547604, "start": 5485.96, "end": 5491.4, "text": " the case unless we've made a slip earlier okay so i see that the middle row has a zero so i'm", "tokens": [50860, 264, 1389, 5969, 321, 600, 1027, 257, 11140, 3071, 1392, 370, 741, 536, 300, 264, 2808, 5386, 575, 257, 4018, 370, 741, 478, 51132], "temperature": 0.0, "avg_logprob": -0.047365476345193794, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.00180833600461483}, {"id": 826, "seek": 547604, "start": 5491.4, "end": 5498.04, "text": " going to start with that one it says x plus minus two minus root two times y is equal to zero", "tokens": [51132, 516, 281, 722, 365, 300, 472, 309, 1619, 2031, 1804, 3175, 732, 3175, 5593, 732, 1413, 288, 307, 2681, 281, 4018, 51464], "temperature": 0.0, "avg_logprob": -0.047365476345193794, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.00180833600461483}, {"id": 827, "seek": 547604, "start": 5499.24, "end": 5504.36, "text": " and that means that if i choose a simple value for y of one then i can immediately say", "tokens": [51524, 293, 300, 1355, 300, 498, 741, 2826, 257, 2199, 2158, 337, 288, 295, 472, 550, 741, 393, 4258, 584, 51780], "temperature": 0.0, "avg_logprob": -0.047365476345193794, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.00180833600461483}, {"id": 828, "seek": 550436, "start": 5504.36, "end": 5513.0, "text": " that x moving across is going to be one plus root two good so now i'll use the top line which is", "tokens": [50364, 300, 2031, 2684, 2108, 307, 516, 281, 312, 472, 1804, 5593, 732, 665, 370, 586, 741, 603, 764, 264, 1192, 1622, 597, 307, 50796], "temperature": 0.0, "avg_logprob": -0.06381356557210287, "compression_ratio": 1.7530120481927711, "no_speech_prob": 0.0022856153082102537}, {"id": 829, "seek": 550436, "start": 5513.0, "end": 5520.2, "text": " minus two minus root two x plus y plus three z is equal to zero and i'll substitute in the values", "tokens": [50796, 3175, 732, 3175, 5593, 732, 2031, 1804, 288, 1804, 1045, 710, 307, 2681, 281, 4018, 293, 741, 603, 15802, 294, 264, 4190, 51156], "temperature": 0.0, "avg_logprob": -0.06381356557210287, "compression_ratio": 1.7530120481927711, "no_speech_prob": 0.0022856153082102537}, {"id": 830, "seek": 550436, "start": 5520.2, "end": 5530.679999999999, "text": " that i've already picked and inferred so i'm going to get one plus root two onto minus two minus", "tokens": [51156, 300, 741, 600, 1217, 6183, 293, 13596, 986, 370, 741, 478, 516, 281, 483, 472, 1804, 5593, 732, 3911, 3175, 732, 3175, 51680], "temperature": 0.0, "avg_logprob": -0.06381356557210287, "compression_ratio": 1.7530120481927711, "no_speech_prob": 0.0022856153082102537}, {"id": 831, "seek": 553068, "start": 5530.68, "end": 5536.12, "text": " root two that's the x term plus the y is one plus three z yet to be found is equal to zero", "tokens": [50364, 5593, 732, 300, 311, 264, 2031, 1433, 1804, 264, 288, 307, 472, 1804, 1045, 710, 1939, 281, 312, 1352, 307, 2681, 281, 4018, 50636], "temperature": 0.0, "avg_logprob": -0.05532664761823766, "compression_ratio": 1.7417218543046358, "no_speech_prob": 0.017974773421883583}, {"id": 832, "seek": 553068, "start": 5536.76, "end": 5543.16, "text": " rearrange so put z on one side divided by a third expand this thing out minus two", "tokens": [50668, 39568, 370, 829, 710, 322, 472, 1252, 6666, 538, 257, 2636, 5268, 341, 551, 484, 3175, 732, 50988], "temperature": 0.0, "avg_logprob": -0.05532664761823766, "compression_ratio": 1.7417218543046358, "no_speech_prob": 0.017974773421883583}, {"id": 833, "seek": 553068, "start": 5544.6, "end": 5556.12, "text": " minus root two minus two root two minus two plus one all right oh and there's a minus sign", "tokens": [51060, 3175, 5593, 732, 3175, 732, 5593, 732, 3175, 732, 1804, 472, 439, 558, 1954, 293, 456, 311, 257, 3175, 1465, 51636], "temperature": 0.0, "avg_logprob": -0.05532664761823766, "compression_ratio": 1.7417218543046358, "no_speech_prob": 0.017974773421883583}, {"id": 834, "seek": 555612, "start": 5556.68, "end": 5561.96, "text": " because we've moved it all to the other side from the z of course now we need to tide this up", "tokens": [50392, 570, 321, 600, 4259, 309, 439, 281, 264, 661, 1252, 490, 264, 710, 295, 1164, 586, 321, 643, 281, 24662, 341, 493, 50656], "temperature": 0.0, "avg_logprob": -0.06633660641122371, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.012015320360660553}, {"id": 835, "seek": 555612, "start": 5561.96, "end": 5567.8, "text": " but what i notice is that inside the brackets i have a minus three and a minus three root two", "tokens": [50656, 457, 437, 741, 3449, 307, 300, 1854, 264, 26179, 741, 362, 257, 3175, 1045, 293, 257, 3175, 1045, 5593, 732, 50948], "temperature": 0.0, "avg_logprob": -0.06633660641122371, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.012015320360660553}, {"id": 836, "seek": 555612, "start": 5567.8, "end": 5572.44, "text": " and that will cancel cancel with a factor of a minus and third of front and just give us a very", "tokens": [50948, 293, 300, 486, 10373, 10373, 365, 257, 5952, 295, 257, 3175, 293, 2636, 295, 1868, 293, 445, 976, 505, 257, 588, 51180], "temperature": 0.0, "avg_logprob": -0.06633660641122371, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.012015320360660553}, {"id": 837, "seek": 555612, "start": 5572.44, "end": 5580.5199999999995, "text": " simple expression of one plus root two so that's our z term okay we've found a compatible set of", "tokens": [51180, 2199, 6114, 295, 472, 1804, 5593, 732, 370, 300, 311, 527, 710, 1433, 1392, 321, 600, 1352, 257, 18218, 992, 295, 51584], "temperature": 0.0, "avg_logprob": -0.06633660641122371, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.012015320360660553}, {"id": 838, "seek": 558052, "start": 5580.52, "end": 5587.0, "text": " x y and z values so we can now write down an accept acceptable eigenvector one plus root two", "tokens": [50364, 2031, 288, 293, 710, 4190, 370, 321, 393, 586, 2464, 760, 364, 3241, 15513, 10446, 303, 1672, 472, 1804, 5593, 732, 50688], "temperature": 0.0, "avg_logprob": -0.0691208078506145, "compression_ratio": 1.969387755102041, "no_speech_prob": 0.00818260945379734}, {"id": 839, "seek": 558052, "start": 5587.0, "end": 5592.84, "text": " one one plus root two there we are that is an acceptable eigenvector and here's where we found", "tokens": [50688, 472, 472, 1804, 5593, 732, 456, 321, 366, 300, 307, 364, 15513, 10446, 303, 1672, 293, 510, 311, 689, 321, 1352, 50980], "temperature": 0.0, "avg_logprob": -0.0691208078506145, "compression_ratio": 1.969387755102041, "no_speech_prob": 0.00818260945379734}, {"id": 840, "seek": 558052, "start": 5592.84, "end": 5598.92, "text": " those numbers uh that goes with the eigenvalue lambda two is equal to square root two note that", "tokens": [50980, 729, 3547, 2232, 300, 1709, 365, 264, 10446, 29155, 13607, 732, 307, 2681, 281, 3732, 5593, 732, 3637, 300, 51284], "temperature": 0.0, "avg_logprob": -0.0691208078506145, "compression_ratio": 1.969387755102041, "no_speech_prob": 0.00818260945379734}, {"id": 841, "seek": 558052, "start": 5598.92, "end": 5606.68, "text": " i use the same subscript two on my vector so that i make it clear that lambda subscript two goes along", "tokens": [51284, 741, 764, 264, 912, 2325, 662, 732, 322, 452, 8062, 370, 300, 741, 652, 309, 1850, 300, 13607, 2325, 662, 732, 1709, 2051, 51672], "temperature": 0.0, "avg_logprob": -0.0691208078506145, "compression_ratio": 1.969387755102041, "no_speech_prob": 0.00818260945379734}, {"id": 842, "seek": 560668, "start": 5606.68, "end": 5615.8, "text": " with vector subscript two so now our only remaining task is to look at the third eigenvalue which was", "tokens": [50364, 365, 8062, 2325, 662, 732, 370, 586, 527, 787, 8877, 5633, 307, 281, 574, 412, 264, 2636, 10446, 29155, 597, 390, 50820], "temperature": 0.0, "avg_logprob": -0.04162087491763535, "compression_ratio": 1.74235807860262, "no_speech_prob": 0.00027788354782387614}, {"id": 843, "seek": 560668, "start": 5615.8, "end": 5622.12, "text": " negative root two and find a compatible eigenvector for that one so as always what we need to do is", "tokens": [50820, 3671, 5593, 732, 293, 915, 257, 18218, 10446, 303, 1672, 337, 300, 472, 370, 382, 1009, 437, 321, 643, 281, 360, 307, 51136], "temperature": 0.0, "avg_logprob": -0.04162087491763535, "compression_ratio": 1.74235807860262, "no_speech_prob": 0.00027788354782387614}, {"id": 844, "seek": 560668, "start": 5622.12, "end": 5628.6, "text": " take the vector m and subtract that the lambda value we found off down the diagonal and because", "tokens": [51136, 747, 264, 8062, 275, 293, 16390, 300, 264, 13607, 2158, 321, 1352, 766, 760, 264, 21539, 293, 570, 51460], "temperature": 0.0, "avg_logprob": -0.04162087491763535, "compression_ratio": 1.74235807860262, "no_speech_prob": 0.00027788354782387614}, {"id": 845, "seek": 560668, "start": 5628.6, "end": 5634.280000000001, "text": " we're subtracting minus a minus number we can just add it instead of course so that will be minus two", "tokens": [51460, 321, 434, 16390, 278, 3175, 257, 3175, 1230, 321, 393, 445, 909, 309, 2602, 295, 1164, 370, 300, 486, 312, 3175, 732, 51744], "temperature": 0.0, "avg_logprob": -0.04162087491763535, "compression_ratio": 1.74235807860262, "no_speech_prob": 0.00027788354782387614}, {"id": 846, "seek": 563428, "start": 5635.0, "end": 5642.44, "text": " plus root two and then one and then three and then one and minus one plus root two and zero", "tokens": [50400, 1804, 5593, 732, 293, 550, 472, 293, 550, 1045, 293, 550, 472, 293, 3175, 472, 1804, 5593, 732, 293, 4018, 50772], "temperature": 0.0, "avg_logprob": -0.06997701396112857, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.0017820673529058695}, {"id": 847, "seek": 563428, "start": 5642.44, "end": 5649.719999999999, "text": " and minus one and one and two plus root two and that matrix when multiplied by our unknown", "tokens": [50772, 293, 3175, 472, 293, 472, 293, 732, 1804, 5593, 732, 293, 300, 8141, 562, 17207, 538, 527, 9841, 51136], "temperature": 0.0, "avg_logprob": -0.06997701396112857, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.0017820673529058695}, {"id": 848, "seek": 563428, "start": 5649.719999999999, "end": 5657.08, "text": " eigenvector x y z will give us zero zero zero now as before our middle row looks nicest here", "tokens": [51136, 10446, 303, 1672, 2031, 288, 710, 486, 976, 505, 4018, 4018, 4018, 586, 382, 949, 527, 2808, 5386, 1542, 45516, 510, 51504], "temperature": 0.0, "avg_logprob": -0.06997701396112857, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.0017820673529058695}, {"id": 849, "seek": 563428, "start": 5657.08, "end": 5663.96, "text": " it's just telling us that x plus root two minus one put it that way around y times y is equal to", "tokens": [51504, 309, 311, 445, 3585, 505, 300, 2031, 1804, 5593, 732, 3175, 472, 829, 309, 300, 636, 926, 288, 1413, 288, 307, 2681, 281, 51848], "temperature": 0.0, "avg_logprob": -0.06997701396112857, "compression_ratio": 1.9682539682539681, "no_speech_prob": 0.0017820673529058695}, {"id": 850, "seek": 566396, "start": 5663.96, "end": 5670.84, "text": " zero that means if i chose y is equal to one obvious choice then x is equal to one minus root two", "tokens": [50364, 4018, 300, 1355, 498, 741, 5111, 288, 307, 2681, 281, 472, 6322, 3922, 550, 2031, 307, 2681, 281, 472, 3175, 5593, 732, 50708], "temperature": 0.0, "avg_logprob": -0.08226431452709695, "compression_ratio": 1.9210526315789473, "no_speech_prob": 0.0028392202220857143}, {"id": 851, "seek": 566396, "start": 5670.84, "end": 5676.76, "text": " watching for signs now if i take the let's say the bottom row i can have minus x plus y", "tokens": [50708, 1976, 337, 7880, 586, 498, 741, 747, 264, 718, 311, 584, 264, 2767, 5386, 741, 393, 362, 3175, 2031, 1804, 288, 51004], "temperature": 0.0, "avg_logprob": -0.08226431452709695, "compression_ratio": 1.9210526315789473, "no_speech_prob": 0.0028392202220857143}, {"id": 852, "seek": 566396, "start": 5677.96, "end": 5684.28, "text": " plus two plus two root plus two plus root two times z is equal to zero but i can substitute", "tokens": [51064, 1804, 732, 1804, 732, 5593, 1804, 732, 1804, 5593, 732, 1413, 710, 307, 2681, 281, 4018, 457, 741, 393, 15802, 51380], "temperature": 0.0, "avg_logprob": -0.08226431452709695, "compression_ratio": 1.9210526315789473, "no_speech_prob": 0.0028392202220857143}, {"id": 853, "seek": 566396, "start": 5684.28, "end": 5691.72, "text": " in the values i found so that will say that square root two minus one plus one plus two", "tokens": [51380, 294, 264, 4190, 741, 1352, 370, 300, 486, 584, 300, 3732, 5593, 732, 3175, 472, 1804, 472, 1804, 732, 51752], "temperature": 0.0, "avg_logprob": -0.08226431452709695, "compression_ratio": 1.9210526315789473, "no_speech_prob": 0.0028392202220857143}, {"id": 854, "seek": 569172, "start": 5691.72, "end": 5698.12, "text": " plus root two z is equal to zero okay i've got some work to do to find out the value of z here", "tokens": [50364, 1804, 5593, 732, 710, 307, 2681, 281, 4018, 1392, 741, 600, 658, 512, 589, 281, 360, 281, 915, 484, 264, 2158, 295, 710, 510, 50684], "temperature": 0.0, "avg_logprob": -0.057392120361328125, "compression_ratio": 1.845, "no_speech_prob": 0.00204880116507411}, {"id": 855, "seek": 569172, "start": 5698.12, "end": 5708.2, "text": " i'll start by rearranging just to put two plus root two z is equal to minus root two on the other", "tokens": [50684, 741, 603, 722, 538, 29875, 9741, 445, 281, 829, 732, 1804, 5593, 732, 710, 307, 2681, 281, 3175, 5593, 732, 322, 264, 661, 51188], "temperature": 0.0, "avg_logprob": -0.057392120361328125, "compression_ratio": 1.845, "no_speech_prob": 0.00204880116507411}, {"id": 856, "seek": 569172, "start": 5708.2, "end": 5713.4800000000005, "text": " side but i still need to do a bit more work divide both sides i notice i can simplify", "tokens": [51188, 1252, 457, 741, 920, 643, 281, 360, 257, 857, 544, 589, 9845, 1293, 4881, 741, 3449, 741, 393, 20460, 51452], "temperature": 0.0, "avg_logprob": -0.057392120361328125, "compression_ratio": 1.845, "no_speech_prob": 0.00204880116507411}, {"id": 857, "seek": 569172, "start": 5713.4800000000005, "end": 5720.2, "text": " simplify by a factor of root two i can write this as z is minus one over root two plus one", "tokens": [51452, 20460, 538, 257, 5952, 295, 5593, 732, 741, 393, 2464, 341, 382, 710, 307, 3175, 472, 670, 5593, 732, 1804, 472, 51788], "temperature": 0.0, "avg_logprob": -0.057392120361328125, "compression_ratio": 1.845, "no_speech_prob": 0.00204880116507411}, {"id": 858, "seek": 572020, "start": 5720.2, "end": 5725.96, "text": " pause the video and check you agree with me um and then i'm not happy with that because i don't", "tokens": [50364, 10465, 264, 960, 293, 1520, 291, 3986, 365, 385, 1105, 293, 550, 741, 478, 406, 2055, 365, 300, 570, 741, 500, 380, 50652], "temperature": 0.0, "avg_logprob": -0.07692556478539292, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.007222860585898161}, {"id": 859, "seek": 572020, "start": 5725.96, "end": 5731.48, "text": " want to leave z as a fraction i could do but that would make a very messy looking eigenvector", "tokens": [50652, 528, 281, 1856, 710, 382, 257, 14135, 741, 727, 360, 457, 300, 576, 652, 257, 588, 16191, 1237, 10446, 303, 1672, 50928], "temperature": 0.0, "avg_logprob": -0.07692556478539292, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.007222860585898161}, {"id": 860, "seek": 572020, "start": 5731.48, "end": 5737.32, "text": " i noticed there's a trick in up i have up my sleeve i know that if i multiply the top and bottom", "tokens": [50928, 741, 5694, 456, 311, 257, 4282, 294, 493, 741, 362, 493, 452, 21138, 741, 458, 300, 498, 741, 12972, 264, 1192, 293, 2767, 51220], "temperature": 0.0, "avg_logprob": -0.07692556478539292, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.007222860585898161}, {"id": 861, "seek": 572020, "start": 5737.32, "end": 5745.639999999999, "text": " of a fraction like that by root two minus one it will simplify i will then find that the top of course", "tokens": [51220, 295, 257, 14135, 411, 300, 538, 5593, 732, 3175, 472, 309, 486, 20460, 741, 486, 550, 915, 300, 264, 1192, 295, 1164, 51636], "temperature": 0.0, "avg_logprob": -0.07692556478539292, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.007222860585898161}, {"id": 862, "seek": 574564, "start": 5745.64, "end": 5753.96, "text": " is one minus root two uh but the bottom will be two plus root two minus root two minus one", "tokens": [50364, 307, 472, 3175, 5593, 732, 2232, 457, 264, 2767, 486, 312, 732, 1804, 5593, 732, 3175, 5593, 732, 3175, 472, 50780], "temperature": 0.0, "avg_logprob": -0.0503198912974154, "compression_ratio": 1.9479166666666667, "no_speech_prob": 0.010326869785785675}, {"id": 863, "seek": 574564, "start": 5753.96, "end": 5761.240000000001, "text": " and that whole expression just comes down to one finally then z is equal to one minus root two", "tokens": [50780, 293, 300, 1379, 6114, 445, 1487, 760, 281, 472, 2721, 550, 710, 307, 2681, 281, 472, 3175, 5593, 732, 51144], "temperature": 0.0, "avg_logprob": -0.0503198912974154, "compression_ratio": 1.9479166666666667, "no_speech_prob": 0.010326869785785675}, {"id": 864, "seek": 574564, "start": 5761.240000000001, "end": 5767.08, "text": " we've now found our x y and z values that are acceptable so we're seeing saying that vector", "tokens": [51144, 321, 600, 586, 1352, 527, 2031, 288, 293, 710, 4190, 300, 366, 15513, 370, 321, 434, 2577, 1566, 300, 8062, 51436], "temperature": 0.0, "avg_logprob": -0.0503198912974154, "compression_ratio": 1.9479166666666667, "no_speech_prob": 0.010326869785785675}, {"id": 865, "seek": 574564, "start": 5767.08, "end": 5773.0, "text": " three that goes with the lambda three value is one minus root two one one minus root two that is", "tokens": [51436, 1045, 300, 1709, 365, 264, 13607, 1045, 2158, 307, 472, 3175, 5593, 732, 472, 472, 3175, 5593, 732, 300, 307, 51732], "temperature": 0.0, "avg_logprob": -0.0503198912974154, "compression_ratio": 1.9479166666666667, "no_speech_prob": 0.010326869785785675}, {"id": 866, "seek": 577300, "start": 5773.0, "end": 5779.4, "text": " an acceptable eigenvector so we're done for our three by three matrix m we found that three", "tokens": [50364, 364, 15513, 10446, 303, 1672, 370, 321, 434, 1096, 337, 527, 1045, 538, 1045, 8141, 275, 321, 1352, 300, 1045, 50684], "temperature": 0.0, "avg_logprob": -0.056934761446575784, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.003376333974301815}, {"id": 867, "seek": 577300, "start": 5779.4, "end": 5785.48, "text": " eigenvalues and for each of them an eigenvector the last two of these which involve the root two", "tokens": [50684, 10446, 46033, 293, 337, 1184, 295, 552, 364, 10446, 303, 1672, 264, 1036, 732, 295, 613, 597, 9494, 264, 5593, 732, 50988], "temperature": 0.0, "avg_logprob": -0.056934761446575784, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.003376333974301815}, {"id": 868, "seek": 577300, "start": 5785.48, "end": 5789.96, "text": " were uh more tricky just because there was more to keep track of more messy expressions", "tokens": [50988, 645, 2232, 544, 12414, 445, 570, 456, 390, 544, 281, 1066, 2837, 295, 544, 16191, 15277, 51212], "temperature": 0.0, "avg_logprob": -0.056934761446575784, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.003376333974301815}, {"id": 869, "seek": 577300, "start": 5789.96, "end": 5797.08, "text": " but the basic maths is the same every time in this series of videos we'll talk about linear", "tokens": [51212, 457, 264, 3875, 36287, 307, 264, 912, 633, 565, 294, 341, 2638, 295, 2145, 321, 603, 751, 466, 8213, 51568], "temperature": 0.0, "avg_logprob": -0.056934761446575784, "compression_ratio": 1.719626168224299, "no_speech_prob": 0.003376333974301815}, {"id": 870, "seek": 579708, "start": 5797.08, "end": 5811.4, "text": " regression and least squares and the problem that we'll be solving is first in the most", "tokens": [50364, 24590, 293, 1935, 19368, 293, 264, 1154, 300, 321, 603, 312, 12606, 307, 700, 294, 264, 881, 51080], "temperature": 0.0, "avg_logprob": -0.07572553468787152, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.03514164313673973}, {"id": 871, "seek": 579708, "start": 5811.4, "end": 5826.92, "text": " abstract setting if you're given a subspace w of r m and a vector let's call it b also in", "tokens": [51080, 12649, 3287, 498, 291, 434, 2212, 257, 2090, 17940, 261, 295, 367, 275, 293, 257, 8062, 718, 311, 818, 309, 272, 611, 294, 51856], "temperature": 0.0, "avg_logprob": -0.07572553468787152, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.03514164313673973}, {"id": 872, "seek": 582692, "start": 5826.92, "end": 5837.64, "text": " r m the question that we want to solve is which vector w in this subspace w is closest to the", "tokens": [50364, 367, 275, 264, 1168, 300, 321, 528, 281, 5039, 307, 597, 8062, 261, 294, 341, 2090, 17940, 261, 307, 13699, 281, 264, 50900], "temperature": 0.0, "avg_logprob": -0.043254253712106255, "compression_ratio": 1.4573643410852712, "no_speech_prob": 0.0030750890728086233}, {"id": 873, "seek": 582692, "start": 5837.64, "end": 5849.8, "text": " vector b now just intuitively if we take the orthogonal projection of b onto w let's call that", "tokens": [50900, 8062, 272, 586, 445, 46506, 498, 321, 747, 264, 41488, 22743, 295, 272, 3911, 261, 718, 311, 818, 300, 51508], "temperature": 0.0, "avg_logprob": -0.043254253712106255, "compression_ratio": 1.4573643410852712, "no_speech_prob": 0.0030750890728086233}, {"id": 874, "seek": 584980, "start": 5850.360000000001, "end": 5857.72, "text": " p subscript capital w b so the projection of b onto the subspace w the orthogonal projection", "tokens": [50392, 280, 2325, 662, 4238, 261, 272, 370, 264, 22743, 295, 272, 3911, 264, 2090, 17940, 261, 264, 41488, 22743, 50760], "temperature": 0.0, "avg_logprob": -0.07133593703761246, "compression_ratio": 1.7901234567901234, "no_speech_prob": 0.07262136042118073}, {"id": 875, "seek": 584980, "start": 5858.92, "end": 5863.88, "text": " we suspect that that would minimize this distance and the distance so the distance that we're trying", "tokens": [50820, 321, 9091, 300, 300, 576, 17522, 341, 4560, 293, 264, 4560, 370, 264, 4560, 300, 321, 434, 1382, 51068], "temperature": 0.0, "avg_logprob": -0.07133593703761246, "compression_ratio": 1.7901234567901234, "no_speech_prob": 0.07262136042118073}, {"id": 876, "seek": 584980, "start": 5863.88, "end": 5876.360000000001, "text": " to minimize is b minus w minimize this over all w inside of this subspace w equivalently you can", "tokens": [51068, 281, 17522, 307, 272, 3175, 261, 17522, 341, 670, 439, 261, 1854, 295, 341, 2090, 17940, 261, 9052, 2276, 291, 393, 51692], "temperature": 0.0, "avg_logprob": -0.07133593703761246, "compression_ratio": 1.7901234567901234, "no_speech_prob": 0.07262136042118073}, {"id": 877, "seek": 587636, "start": 5876.36, "end": 5883.799999999999, "text": " minimize the square of the distances and this is why this problem is called least squares because", "tokens": [50364, 17522, 264, 3732, 295, 264, 22182, 293, 341, 307, 983, 341, 1154, 307, 1219, 1935, 19368, 570, 50736], "temperature": 0.0, "avg_logprob": -0.04835868272625032, "compression_ratio": 1.7106918238993711, "no_speech_prob": 0.006288978736847639}, {"id": 878, "seek": 587636, "start": 5883.799999999999, "end": 5887.639999999999, "text": " we're minimizing the squares of each of the components of these differences when you add", "tokens": [50736, 321, 434, 46608, 264, 19368, 295, 1184, 295, 264, 6677, 295, 613, 7300, 562, 291, 909, 50928], "temperature": 0.0, "avg_logprob": -0.04835868272625032, "compression_ratio": 1.7106918238993711, "no_speech_prob": 0.006288978736847639}, {"id": 879, "seek": 587636, "start": 5887.639999999999, "end": 5899.24, "text": " them all up so that's the statement of the problem is to find w inside of w such that", "tokens": [50928, 552, 439, 493, 370, 300, 311, 264, 5629, 295, 264, 1154, 307, 281, 915, 261, 1854, 295, 261, 1270, 300, 51508], "temperature": 0.0, "avg_logprob": -0.04835868272625032, "compression_ratio": 1.7106918238993711, "no_speech_prob": 0.006288978736847639}, {"id": 880, "seek": 589924, "start": 5899.88, "end": 5906.599999999999, "text": " that the distance between w is minimized", "tokens": [50396, 300, 264, 4560, 1296, 261, 307, 4464, 1602, 50732], "temperature": 0.0, "avg_logprob": -0.095693291358228, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.0012842703144997358}, {"id": 881, "seek": 589924, "start": 5911.32, "end": 5919.4, "text": " and it turns out that the solution to this problem is exactly w equals the projection", "tokens": [50968, 293, 309, 4523, 484, 300, 264, 3827, 281, 341, 1154, 307, 2293, 261, 6915, 264, 22743, 51372], "temperature": 0.0, "avg_logprob": -0.095693291358228, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.0012842703144997358}, {"id": 882, "seek": 589924, "start": 5920.2, "end": 5925.5599999999995, "text": " of b onto w and i won't give a precise proof of this statement but we should at least get", "tokens": [51412, 295, 272, 3911, 261, 293, 741, 1582, 380, 976, 257, 13600, 8177, 295, 341, 5629, 457, 321, 820, 412, 1935, 483, 51680], "temperature": 0.0, "avg_logprob": -0.095693291358228, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.0012842703144997358}, {"id": 883, "seek": 592556, "start": 5925.56, "end": 5930.84, "text": " an intuition for why this is true looking at this picture i've already drawn the projection of", "tokens": [50364, 364, 24002, 337, 983, 341, 307, 2074, 1237, 412, 341, 3036, 741, 600, 1217, 10117, 264, 22743, 295, 50628], "temperature": 0.0, "avg_logprob": -0.053123899300893146, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.010985931381583214}, {"id": 884, "seek": 592556, "start": 5930.84, "end": 5940.68, "text": " b onto w and another arbitrary vector w now these three vectors form", "tokens": [50628, 272, 3911, 261, 293, 1071, 23211, 8062, 261, 586, 613, 1045, 18875, 1254, 51120], "temperature": 0.0, "avg_logprob": -0.053123899300893146, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.010985931381583214}, {"id": 885, "seek": 592556, "start": 5943.240000000001, "end": 5948.4400000000005, "text": " a right triangle so it looks a little bit skewed from this angle but if you turn this this way", "tokens": [51248, 257, 558, 13369, 370, 309, 1542, 257, 707, 857, 8756, 26896, 490, 341, 5802, 457, 498, 291, 1261, 341, 341, 636, 51508], "temperature": 0.0, "avg_logprob": -0.053123899300893146, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.010985931381583214}, {"id": 886, "seek": 594844, "start": 5949.0, "end": 5955.0, "text": " that triangle looks something like here's b here's the projection of b onto w", "tokens": [50392, 300, 13369, 1542, 746, 411, 510, 311, 272, 510, 311, 264, 22743, 295, 272, 3911, 261, 50692], "temperature": 0.0, "avg_logprob": -0.06033673594074865, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.08754055947065353}, {"id": 887, "seek": 594844, "start": 5955.639999999999, "end": 5962.28, "text": " and here's some arbitrary vector w in the subspace w these two vectors are in w", "tokens": [50724, 293, 510, 311, 512, 23211, 8062, 261, 294, 264, 2090, 17940, 261, 613, 732, 18875, 366, 294, 261, 51056], "temperature": 0.0, "avg_logprob": -0.06033673594074865, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.08754055947065353}, {"id": 888, "seek": 594844, "start": 5964.5199999999995, "end": 5971.639999999999, "text": " and so this line connecting them is also in w the vector b is perpendicular to the subspace w", "tokens": [51168, 293, 370, 341, 1622, 11015, 552, 307, 611, 294, 261, 264, 8062, 272, 307, 26734, 281, 264, 2090, 17940, 261, 51524], "temperature": 0.0, "avg_logprob": -0.06033673594074865, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.08754055947065353}, {"id": 889, "seek": 597164, "start": 5972.52, "end": 5981.400000000001, "text": " and therefore this angle is a right angle here this is the hypotenuse of this triangle", "tokens": [50408, 293, 4412, 341, 5802, 307, 257, 558, 5802, 510, 341, 307, 264, 7420, 21990, 438, 295, 341, 13369, 50852], "temperature": 0.0, "avg_logprob": -0.053050407549230065, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0030752166640013456}, {"id": 890, "seek": 597164, "start": 5981.400000000001, "end": 5989.0, "text": " and it's the distance from b to w and this distance is the minimizing distance supposedly", "tokens": [50852, 293, 309, 311, 264, 4560, 490, 272, 281, 261, 293, 341, 4560, 307, 264, 46608, 4560, 20581, 51232], "temperature": 0.0, "avg_logprob": -0.053050407549230065, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0030752166640013456}, {"id": 891, "seek": 598900, "start": 5989.64, "end": 6003.16, "text": " so that's just b minus the projection of b onto w so i i you know misused a little bit of notation", "tokens": [50396, 370, 300, 311, 445, 272, 3175, 264, 22743, 295, 272, 3911, 261, 370, 741, 741, 291, 458, 3346, 4717, 257, 707, 857, 295, 24657, 51072], "temperature": 0.0, "avg_logprob": -0.0975137475418718, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0022517868783324957}, {"id": 892, "seek": 598900, "start": 6003.16, "end": 6008.36, "text": " here um i hope you understand that this w now is different from this one this is the actual solution", "tokens": [51072, 510, 1105, 741, 1454, 291, 1223, 300, 341, 261, 586, 307, 819, 490, 341, 472, 341, 307, 264, 3539, 3827, 51332], "temperature": 0.0, "avg_logprob": -0.0975137475418718, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0022517868783324957}, {"id": 893, "seek": 598900, "start": 6009.64, "end": 6015.96, "text": " and because this is a hypotenuse of this triangle we know that this distance is always going to be", "tokens": [51396, 293, 570, 341, 307, 257, 7420, 21990, 438, 295, 341, 13369, 321, 458, 300, 341, 4560, 307, 1009, 516, 281, 312, 51712], "temperature": 0.0, "avg_logprob": -0.0975137475418718, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0022517868783324957}, {"id": 894, "seek": 601596, "start": 6015.96, "end": 6021.88, "text": " greater than or equal to either of these two distances no matter what w is this will always", "tokens": [50364, 5044, 813, 420, 2681, 281, 2139, 295, 613, 732, 22182, 572, 1871, 437, 261, 307, 341, 486, 1009, 50660], "temperature": 0.0, "avg_logprob": -0.04350914878229941, "compression_ratio": 1.8, "no_speech_prob": 0.00348317576572299}, {"id": 895, "seek": 601596, "start": 6021.88, "end": 6030.2, "text": " create a triangle a right triangle unless w equals this vector right here and in all other cases", "tokens": [50660, 1884, 257, 13369, 257, 558, 13369, 5969, 261, 6915, 341, 8062, 558, 510, 293, 294, 439, 661, 3331, 51076], "temperature": 0.0, "avg_logprob": -0.04350914878229941, "compression_ratio": 1.8, "no_speech_prob": 0.00348317576572299}, {"id": 896, "seek": 601596, "start": 6030.2, "end": 6036.28, "text": " except this one this distance is always going to be strictly greater than this distance so what are", "tokens": [51076, 3993, 341, 472, 341, 4560, 307, 1009, 516, 281, 312, 20792, 5044, 813, 341, 4560, 370, 437, 366, 51380], "temperature": 0.0, "avg_logprob": -0.04350914878229941, "compression_ratio": 1.8, "no_speech_prob": 0.00348317576572299}, {"id": 897, "seek": 603628, "start": 6036.28, "end": 6050.2, "text": " some ways to compute this projection so one way is to actually find an orthonormal basis of w", "tokens": [50364, 512, 2098, 281, 14722, 341, 22743, 370, 472, 636, 307, 281, 767, 915, 364, 420, 11943, 24440, 5143, 295, 261, 51060], "temperature": 0.0, "avg_logprob": -0.07893125965910137, "compression_ratio": 1.525, "no_speech_prob": 0.016913892701268196}, {"id": 898, "seek": 603628, "start": 6051.88, "end": 6054.599999999999, "text": " so given an orthonormal basis", "tokens": [51144, 370, 2212, 364, 420, 11943, 24440, 5143, 51280], "temperature": 0.0, "avg_logprob": -0.07893125965910137, "compression_ratio": 1.525, "no_speech_prob": 0.016913892701268196}, {"id": 899, "seek": 603628, "start": 6057.96, "end": 6063.8, "text": " let's call it w1 up to wk let's say k is the dimension of w", "tokens": [51448, 718, 311, 818, 309, 261, 16, 493, 281, 261, 74, 718, 311, 584, 350, 307, 264, 10139, 295, 261, 51740], "temperature": 0.0, "avg_logprob": -0.07893125965910137, "compression_ratio": 1.525, "no_speech_prob": 0.016913892701268196}, {"id": 900, "seek": 606628, "start": 6066.759999999999, "end": 6076.36, "text": " then the projection of b onto w is just take the dot product remember the dot product of", "tokens": [50388, 550, 264, 22743, 295, 272, 3911, 261, 307, 445, 747, 264, 5893, 1674, 1604, 264, 5893, 1674, 295, 50868], "temperature": 0.0, "avg_logprob": -0.08718922643950491, "compression_ratio": 1.8657718120805369, "no_speech_prob": 0.0006666789413429797}, {"id": 901, "seek": 606628, "start": 6076.36, "end": 6084.599999999999, "text": " b with any of these normal orthonormal vectors gives you the shadow of b onto that vector and", "tokens": [50868, 272, 365, 604, 295, 613, 2710, 420, 11943, 24440, 18875, 2709, 291, 264, 8576, 295, 272, 3911, 300, 8062, 293, 51280], "temperature": 0.0, "avg_logprob": -0.08718922643950491, "compression_ratio": 1.8657718120805369, "no_speech_prob": 0.0006666789413429797}, {"id": 902, "seek": 606628, "start": 6084.599999999999, "end": 6092.28, "text": " then multiply again by that vector here to give you the shadow of b onto this line in that same", "tokens": [51280, 550, 12972, 797, 538, 300, 8062, 510, 281, 976, 291, 264, 8576, 295, 272, 3911, 341, 1622, 294, 300, 912, 51664], "temperature": 0.0, "avg_logprob": -0.08718922643950491, "compression_ratio": 1.8657718120805369, "no_speech_prob": 0.0006666789413429797}, {"id": 903, "seek": 609228, "start": 6092.28, "end": 6098.36, "text": " direction so we take the dot product or the inner product i'll write the inner product with brackets", "tokens": [50364, 3513, 370, 321, 747, 264, 5893, 1674, 420, 264, 7284, 1674, 741, 603, 2464, 264, 7284, 1674, 365, 26179, 50668], "temperature": 0.0, "avg_logprob": -0.06331980372049723, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0016484385123476386}, {"id": 904, "seek": 609228, "start": 6100.04, "end": 6107.16, "text": " of each of these vectors and then we'll multiply by that vector again so that we have a vector in", "tokens": [50752, 295, 1184, 295, 613, 18875, 293, 550, 321, 603, 12972, 538, 300, 8062, 797, 370, 300, 321, 362, 257, 8062, 294, 51108], "temperature": 0.0, "avg_logprob": -0.06331980372049723, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0016484385123476386}, {"id": 905, "seek": 609228, "start": 6107.16, "end": 6113.0, "text": " the end and then sum up all of these different contributions from these different shadows", "tokens": [51108, 264, 917, 293, 550, 2408, 493, 439, 295, 613, 819, 15725, 490, 613, 819, 14740, 51400], "temperature": 0.0, "avg_logprob": -0.06331980372049723, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0016484385123476386}, {"id": 906, "seek": 609228, "start": 6114.2, "end": 6120.36, "text": " so this is how you would compute the orthogonal projection of a vector onto a specific subspace", "tokens": [51460, 370, 341, 307, 577, 291, 576, 14722, 264, 41488, 22743, 295, 257, 8062, 3911, 257, 2685, 2090, 17940, 51768], "temperature": 0.0, "avg_logprob": -0.06331980372049723, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0016484385123476386}, {"id": 907, "seek": 612036, "start": 6121.32, "end": 6127.799999999999, "text": " you would need for instance an orthonormal basis for that subspace but sometimes you're not given", "tokens": [50412, 291, 576, 643, 337, 5197, 364, 420, 11943, 24440, 5143, 337, 300, 2090, 17940, 457, 2171, 291, 434, 406, 2212, 50736], "temperature": 0.0, "avg_logprob": -0.07636850758602745, "compression_ratio": 1.834862385321101, "no_speech_prob": 0.002396567026153207}, {"id": 908, "seek": 612036, "start": 6127.799999999999, "end": 6133.639999999999, "text": " an orthonormal basis so it might be difficult to compute it one thing you could do is you can choose", "tokens": [50736, 364, 420, 11943, 24440, 5143, 370, 309, 1062, 312, 2252, 281, 14722, 309, 472, 551, 291, 727, 360, 307, 291, 393, 2826, 51028], "temperature": 0.0, "avg_logprob": -0.07636850758602745, "compression_ratio": 1.834862385321101, "no_speech_prob": 0.002396567026153207}, {"id": 909, "seek": 612036, "start": 6133.639999999999, "end": 6139.24, "text": " any basis of w pick arbitrary vectors that are in w and once you find k of them and you know that", "tokens": [51028, 604, 5143, 295, 261, 1888, 23211, 18875, 300, 366, 294, 261, 293, 1564, 291, 915, 350, 295, 552, 293, 291, 458, 300, 51308], "temperature": 0.0, "avg_logprob": -0.07636850758602745, "compression_ratio": 1.834862385321101, "no_speech_prob": 0.002396567026153207}, {"id": 910, "seek": 612036, "start": 6139.24, "end": 6145.16, "text": " they're linearly independent then you know that that forms a basis then in order to find an orthonormal", "tokens": [51308, 436, 434, 43586, 6695, 550, 291, 458, 300, 300, 6422, 257, 5143, 550, 294, 1668, 281, 915, 364, 420, 11943, 24440, 51604], "temperature": 0.0, "avg_logprob": -0.07636850758602745, "compression_ratio": 1.834862385321101, "no_speech_prob": 0.002396567026153207}, {"id": 911, "seek": 614516, "start": 6145.16, "end": 6150.76, "text": " basis you would apply the Gram-Schmidt procedure to obtain an orthonormal one but you know how", "tokens": [50364, 5143, 291, 576, 3079, 264, 22130, 12, 31560, 39000, 10747, 281, 12701, 364, 420, 11943, 24440, 472, 457, 291, 458, 577, 50644], "temperature": 0.0, "avg_logprob": -0.045877926591513817, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.020329870283603668}, {"id": 912, "seek": 614516, "start": 6150.76, "end": 6155.16, "text": " difficult that is maybe you can do it for the first few vectors pretty easily but then after a while", "tokens": [50644, 2252, 300, 307, 1310, 291, 393, 360, 309, 337, 264, 700, 1326, 18875, 1238, 3612, 457, 550, 934, 257, 1339, 50864], "temperature": 0.0, "avg_logprob": -0.045877926591513817, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.020329870283603668}, {"id": 913, "seek": 614516, "start": 6155.16, "end": 6169.8, "text": " it gets pretty messy so we'll look at a special case of this problem where w happens to equal", "tokens": [50864, 309, 2170, 1238, 16191, 370, 321, 603, 574, 412, 257, 2121, 1389, 295, 341, 1154, 689, 261, 2314, 281, 2681, 51596], "temperature": 0.0, "avg_logprob": -0.045877926591513817, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.020329870283603668}, {"id": 914, "seek": 616980, "start": 6169.8, "end": 6180.52, "text": " the column space of some m by n matrix where a is an m by m matrix m by n matrix", "tokens": [50364, 264, 7738, 1901, 295, 512, 275, 538, 297, 8141, 689, 257, 307, 364, 275, 538, 275, 8141, 275, 538, 297, 8141, 50900], "temperature": 0.0, "avg_logprob": -0.08606942494710286, "compression_ratio": 1.4953271028037383, "no_speech_prob": 0.025175929069519043}, {"id": 915, "seek": 616980, "start": 6182.6, "end": 6186.04, "text": " so in other words you can think of a as a linear transformation", "tokens": [51004, 370, 294, 661, 2283, 291, 393, 519, 295, 257, 382, 257, 8213, 9887, 51176], "temperature": 0.0, "avg_logprob": -0.08606942494710286, "compression_ratio": 1.4953271028037383, "no_speech_prob": 0.025175929069519043}, {"id": 916, "seek": 616980, "start": 6189.96, "end": 6192.4400000000005, "text": " from r n to r m", "tokens": [51372, 490, 367, 297, 281, 367, 275, 51496], "temperature": 0.0, "avg_logprob": -0.08606942494710286, "compression_ratio": 1.4953271028037383, "no_speech_prob": 0.025175929069519043}, {"id": 917, "seek": 619244, "start": 6192.759999999999, "end": 6202.919999999999, "text": " and in this special case we'll find a very interesting solution to this problem in general", "tokens": [50380, 293, 294, 341, 2121, 1389, 321, 603, 915, 257, 588, 1880, 3827, 281, 341, 1154, 294, 2674, 50888], "temperature": 0.0, "avg_logprob": -0.04540501622592702, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.010012606158852577}, {"id": 918, "seek": 619244, "start": 6202.919999999999, "end": 6208.5199999999995, "text": " when we look at this problem and we're given a vector b so now let's suppose that this subspace", "tokens": [50888, 562, 321, 574, 412, 341, 1154, 293, 321, 434, 2212, 257, 8062, 272, 370, 586, 718, 311, 7297, 300, 341, 2090, 17940, 51168], "temperature": 0.0, "avg_logprob": -0.04540501622592702, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.010012606158852577}, {"id": 919, "seek": 619244, "start": 6208.5199999999995, "end": 6217.32, "text": " is the column space of a and we have some vector b that's not necessarily in the column space what", "tokens": [51168, 307, 264, 7738, 1901, 295, 257, 293, 321, 362, 512, 8062, 272, 300, 311, 406, 4725, 294, 264, 7738, 1901, 437, 51608], "temperature": 0.0, "avg_logprob": -0.04540501622592702, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.010012606158852577}, {"id": 920, "seek": 621732, "start": 6217.32, "end": 6232.599999999999, "text": " this means is that the linear system ax equals b does not have a solution unless", "tokens": [50364, 341, 1355, 307, 300, 264, 8213, 1185, 6360, 6915, 272, 775, 406, 362, 257, 3827, 5969, 51128], "temperature": 0.0, "avg_logprob": -0.15311301549275716, "compression_ratio": 1.3298969072164948, "no_speech_prob": 0.005730025470256805}, {"id": 921, "seek": 621732, "start": 6235.0, "end": 6241.96, "text": " a is onto or more specifically or more precisely", "tokens": [51248, 257, 307, 3911, 420, 544, 4682, 420, 544, 13402, 51596], "temperature": 0.0, "avg_logprob": -0.15311301549275716, "compression_ratio": 1.3298969072164948, "no_speech_prob": 0.005730025470256805}, {"id": 922, "seek": 624732, "start": 6247.4, "end": 6252.92, "text": " unless the vector b is in the column space of a", "tokens": [50368, 5969, 264, 8062, 272, 307, 294, 264, 7738, 1901, 295, 257, 50644], "temperature": 0.0, "avg_logprob": -0.07481629631736061, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.001754571683704853}, {"id": 923, "seek": 624732, "start": 6260.84, "end": 6264.92, "text": " but because this doesn't happen in general instead of trying to solve this system which", "tokens": [51040, 457, 570, 341, 1177, 380, 1051, 294, 2674, 2602, 295, 1382, 281, 5039, 341, 1185, 597, 51244], "temperature": 0.0, "avg_logprob": -0.07481629631736061, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.001754571683704853}, {"id": 924, "seek": 624732, "start": 6264.92, "end": 6271.16, "text": " might not have a solution we can solve an associated system instead that says okay I might not be able", "tokens": [51244, 1062, 406, 362, 257, 3827, 321, 393, 5039, 364, 6615, 1185, 2602, 300, 1619, 1392, 286, 1062, 406, 312, 1075, 51556], "temperature": 0.0, "avg_logprob": -0.07481629631736061, "compression_ratio": 1.576158940397351, "no_speech_prob": 0.001754571683704853}, {"id": 925, "seek": 627116, "start": 6271.16, "end": 6279.8, "text": " to find an x in our domain here that sort of maps to the vector b because it's impossible all x's", "tokens": [50364, 281, 915, 364, 2031, 294, 527, 9274, 510, 300, 1333, 295, 11317, 281, 264, 8062, 272, 570, 309, 311, 6243, 439, 2031, 311, 50796], "temperature": 0.0, "avg_logprob": -0.05171413006989852, "compression_ratio": 1.715151515151515, "no_speech_prob": 0.06186320632696152}, {"id": 926, "seek": 627116, "start": 6279.8, "end": 6286.5199999999995, "text": " get mapped to this subspace what instead we can try to find is project b onto this subspace", "tokens": [50796, 483, 33318, 281, 341, 2090, 17940, 437, 2602, 321, 393, 853, 281, 915, 307, 1716, 272, 3911, 341, 2090, 17940, 51132], "temperature": 0.0, "avg_logprob": -0.05171413006989852, "compression_ratio": 1.715151515151515, "no_speech_prob": 0.06186320632696152}, {"id": 927, "seek": 627116, "start": 6289.32, "end": 6296.04, "text": " and now this vector the projection of b onto that subspace is by definition inside the column", "tokens": [51272, 293, 586, 341, 8062, 264, 22743, 295, 272, 3911, 300, 2090, 17940, 307, 538, 7123, 1854, 264, 7738, 51608], "temperature": 0.0, "avg_logprob": -0.05171413006989852, "compression_ratio": 1.715151515151515, "no_speech_prob": 0.06186320632696152}, {"id": 928, "seek": 629604, "start": 6296.04, "end": 6302.28, "text": " space of a and therefore we can solve that associated system so we make a definition", "tokens": [50364, 1901, 295, 257, 293, 4412, 321, 393, 5039, 300, 6615, 1185, 370, 321, 652, 257, 7123, 50676], "temperature": 0.0, "avg_logprob": -0.07912742707037157, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0060971081256866455}, {"id": 929, "seek": 629604, "start": 6304.12, "end": 6312.28, "text": " based on this idea that a least squares approximation", "tokens": [50768, 2361, 322, 341, 1558, 300, 257, 1935, 19368, 28023, 51176], "temperature": 0.0, "avg_logprob": -0.07912742707037157, "compression_ratio": 1.3529411764705883, "no_speech_prob": 0.0060971081256866455}, {"id": 930, "seek": 631228, "start": 6312.5199999999995, "end": 6325.719999999999, "text": " to the linear system ax equals b is a solution", "tokens": [50376, 281, 264, 8213, 1185, 6360, 6915, 272, 307, 257, 3827, 51036], "temperature": 0.0, "avg_logprob": -0.16440228492982925, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.12082052230834961}, {"id": 931, "seek": 631228, "start": 6326.84, "end": 6335.0, "text": " to the associated linear system ax equals the projection onto the column space of a", "tokens": [51092, 281, 264, 6615, 8213, 1185, 6360, 6915, 264, 22743, 3911, 264, 7738, 1901, 295, 257, 51500], "temperature": 0.0, "avg_logprob": -0.16440228492982925, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.12082052230834961}, {"id": 932, "seek": 633500, "start": 6335.64, "end": 6344.68, "text": " apply to our given vector b and it's this problem that we'll be focusing on solving", "tokens": [50396, 3079, 281, 527, 2212, 8062, 272, 293, 309, 311, 341, 1154, 300, 321, 603, 312, 8416, 322, 12606, 50848], "temperature": 0.0, "avg_logprob": -0.0897979736328125, "compression_ratio": 1.7889447236180904, "no_speech_prob": 0.00806084368377924}, {"id": 933, "seek": 633500, "start": 6344.68, "end": 6351.16, "text": " in the next few videos let's first state a theorem that makes it a lot easier to compute", "tokens": [50848, 294, 264, 958, 1326, 2145, 718, 311, 700, 1785, 257, 20904, 300, 1669, 309, 257, 688, 3571, 281, 14722, 51172], "temperature": 0.0, "avg_logprob": -0.0897979736328125, "compression_ratio": 1.7889447236180904, "no_speech_prob": 0.00806084368377924}, {"id": 934, "seek": 633500, "start": 6351.16, "end": 6355.16, "text": " the least square solution to a given problem in the special case that we mentioned at the", "tokens": [51172, 264, 1935, 3732, 3827, 281, 257, 2212, 1154, 294, 264, 2121, 1389, 300, 321, 2835, 412, 264, 51372], "temperature": 0.0, "avg_logprob": -0.0897979736328125, "compression_ratio": 1.7889447236180904, "no_speech_prob": 0.00806084368377924}, {"id": 935, "seek": 633500, "start": 6355.16, "end": 6363.4, "text": " end of the video in the in the last session so the theorem says given a linear transformation", "tokens": [51372, 917, 295, 264, 960, 294, 264, 294, 264, 1036, 5481, 370, 264, 20904, 1619, 2212, 257, 8213, 9887, 51784], "temperature": 0.0, "avg_logprob": -0.0897979736328125, "compression_ratio": 1.7889447236180904, "no_speech_prob": 0.00806084368377924}, {"id": 936, "seek": 636500, "start": 6365.4, "end": 6365.72, "text": " from", "tokens": [50384, 490, 50400], "temperature": 0.0, "avg_logprob": -0.20683672848869772, "compression_ratio": 1.1927710843373494, "no_speech_prob": 0.01363553199917078}, {"id": 937, "seek": 636500, "start": 6368.52, "end": 6378.6, "text": " r n to r m that's called a let me write it here and a vector b in the co-domain of this linear", "tokens": [50540, 367, 297, 281, 367, 275, 300, 311, 1219, 257, 718, 385, 2464, 309, 510, 293, 257, 8062, 272, 294, 264, 598, 12, 4121, 491, 295, 341, 8213, 51044], "temperature": 0.0, "avg_logprob": -0.20683672848869772, "compression_ratio": 1.1927710843373494, "no_speech_prob": 0.01363553199917078}, {"id": 938, "seek": 637860, "start": 6378.6, "end": 6396.360000000001, "text": " transformation a let's say x in the domain in the domain that's r n is a least squares", "tokens": [50364, 9887, 257, 718, 311, 584, 2031, 294, 264, 9274, 294, 264, 9274, 300, 311, 367, 297, 307, 257, 1935, 19368, 51252], "temperature": 0.0, "avg_logprob": -0.08215369497026716, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.039045367389917374}, {"id": 939, "seek": 637860, "start": 6397.96, "end": 6406.200000000001, "text": " approximation to ax equals b now this is using the definition that we had made before", "tokens": [51332, 28023, 281, 6360, 6915, 272, 586, 341, 307, 1228, 264, 7123, 300, 321, 632, 1027, 949, 51744], "temperature": 0.0, "avg_logprob": -0.08215369497026716, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.039045367389917374}, {"id": 940, "seek": 640620, "start": 6406.2, "end": 6411.32, "text": " which remember was x is the least squares approximation to ax equals b if and only if", "tokens": [50364, 597, 1604, 390, 2031, 307, 264, 1935, 19368, 28023, 281, 6360, 6915, 272, 498, 293, 787, 498, 50620], "temperature": 0.0, "avg_logprob": -0.08288805429325548, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.002396591706201434}, {"id": 941, "seek": 640620, "start": 6412.679999999999, "end": 6422.04, "text": " ax equals the projection of b onto w where w is the column space of a if and only if", "tokens": [50688, 6360, 6915, 264, 22743, 295, 272, 3911, 261, 689, 261, 307, 264, 7738, 1901, 295, 257, 498, 293, 787, 498, 51156], "temperature": 0.0, "avg_logprob": -0.08288805429325548, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.002396591706201434}, {"id": 942, "seek": 642204, "start": 6422.92, "end": 6440.92, "text": " x is a solution to the system a transpose ax equals a transpose b", "tokens": [50408, 2031, 307, 257, 3827, 281, 264, 1185, 257, 25167, 6360, 6915, 257, 25167, 272, 51308], "temperature": 0.0, "avg_logprob": -0.16814733743667604, "compression_ratio": 1.4684684684684686, "no_speech_prob": 0.0033764992840588093}, {"id": 943, "seek": 642204, "start": 6442.6, "end": 6449.64, "text": " now we mentioned last time that so let me just say here w equals the column space of a throughout", "tokens": [51392, 586, 321, 2835, 1036, 565, 300, 370, 718, 385, 445, 584, 510, 261, 6915, 264, 7738, 1901, 295, 257, 3710, 51744], "temperature": 0.0, "avg_logprob": -0.16814733743667604, "compression_ratio": 1.4684684684684686, "no_speech_prob": 0.0033764992840588093}, {"id": 944, "seek": 644964, "start": 6449.64, "end": 6456.04, "text": " this entire discussion now we mentioned last time that if we have an orthonormal basis of w", "tokens": [50364, 341, 2302, 5017, 586, 321, 2835, 1036, 565, 300, 498, 321, 362, 364, 420, 11943, 24440, 5143, 295, 261, 50684], "temperature": 0.0, "avg_logprob": -0.05449951526730559, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.0023229101207107306}, {"id": 945, "seek": 644964, "start": 6456.76, "end": 6461.4800000000005, "text": " we can actually solve this problem relatively easily but in general we're not given an orthonormal", "tokens": [50720, 321, 393, 767, 5039, 341, 1154, 7226, 3612, 457, 294, 2674, 321, 434, 406, 2212, 364, 420, 11943, 24440, 50956], "temperature": 0.0, "avg_logprob": -0.05449951526730559, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.0023229101207107306}, {"id": 946, "seek": 644964, "start": 6461.4800000000005, "end": 6469.72, "text": " basis of w so this formulation of the problem makes it much simpler to compute so i said it but i", "tokens": [50956, 5143, 295, 261, 370, 341, 37642, 295, 264, 1154, 1669, 309, 709, 18587, 281, 14722, 370, 741, 848, 309, 457, 741, 51368], "temperature": 0.0, "avg_logprob": -0.05449951526730559, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.0023229101207107306}, {"id": 947, "seek": 644964, "start": 6469.72, "end": 6476.360000000001, "text": " should also write this that this means the taking the transpose of this matrix and taking the", "tokens": [51368, 820, 611, 2464, 341, 300, 341, 1355, 264, 1940, 264, 25167, 295, 341, 8141, 293, 1940, 264, 51700], "temperature": 0.0, "avg_logprob": -0.05449951526730559, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.0023229101207107306}, {"id": 948, "seek": 647636, "start": 6476.36, "end": 6482.04, "text": " transpose is easy you just swap the columns with the rows so this just gives you a new linear system", "tokens": [50364, 25167, 307, 1858, 291, 445, 18135, 264, 13766, 365, 264, 13241, 370, 341, 445, 2709, 291, 257, 777, 8213, 1185, 50648], "temperature": 0.0, "avg_logprob": -0.053343460477631666, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.003272863570600748}, {"id": 949, "seek": 647636, "start": 6483.0, "end": 6487.799999999999, "text": " and in general this is much much easier to solve than something like this and the reason this", "tokens": [50696, 293, 294, 2674, 341, 307, 709, 709, 3571, 281, 5039, 813, 746, 411, 341, 293, 264, 1778, 341, 50936], "temperature": 0.0, "avg_logprob": -0.053343460477631666, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.003272863570600748}, {"id": 950, "seek": 647636, "start": 6487.799999999999, "end": 6493.5599999999995, "text": " simplification occurs is because we've taken our subspace to be the column space of some matrix", "tokens": [50936, 6883, 3774, 11843, 307, 570, 321, 600, 2726, 527, 2090, 17940, 281, 312, 264, 7738, 1901, 295, 512, 8141, 51224], "temperature": 0.0, "avg_logprob": -0.053343460477631666, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.003272863570600748}, {"id": 951, "seek": 647636, "start": 6495.5599999999995, "end": 6500.92, "text": " so before we give some examples of how to apply this theorem we'll give the proof if you want", "tokens": [51324, 370, 949, 321, 976, 512, 5110, 295, 577, 281, 3079, 341, 20904, 321, 603, 976, 264, 8177, 498, 291, 528, 51592], "temperature": 0.0, "avg_logprob": -0.053343460477631666, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.003272863570600748}, {"id": 952, "seek": 650092, "start": 6500.92, "end": 6508.2, "text": " to skip the proof you can go to the next video so this is an if and only if proof so we'll prove", "tokens": [50364, 281, 10023, 264, 8177, 291, 393, 352, 281, 264, 958, 960, 370, 341, 307, 364, 498, 293, 787, 498, 8177, 370, 321, 603, 7081, 50728], "temperature": 0.0, "avg_logprob": -0.07134110787335564, "compression_ratio": 1.5702479338842976, "no_speech_prob": 0.024794552475214005}, {"id": 953, "seek": 650092, "start": 6508.2, "end": 6519.32, "text": " it in two directions let's let's first suppose that x is a least squares suppose x is a least", "tokens": [50728, 309, 294, 732, 11095, 718, 311, 718, 311, 700, 7297, 300, 2031, 307, 257, 1935, 19368, 7297, 2031, 307, 257, 1935, 51284], "temperature": 0.0, "avg_logprob": -0.07134110787335564, "compression_ratio": 1.5702479338842976, "no_speech_prob": 0.024794552475214005}, {"id": 954, "seek": 651932, "start": 6519.4, "end": 6535.08, "text": " square solution to ax equals b i.e x solves ax equals a projection of b onto w", "tokens": [50368, 3732, 3827, 281, 6360, 6915, 272, 741, 13, 68, 2031, 39890, 6360, 6915, 257, 22743, 295, 272, 3911, 261, 51152], "temperature": 0.0, "avg_logprob": -0.12059111065334743, "compression_ratio": 1.403225806451613, "no_speech_prob": 0.04602795094251633}, {"id": 955, "seek": 651932, "start": 6538.04, "end": 6543.719999999999, "text": " now here's a little picture that'll help us visualize everything let's say this is the vector b", "tokens": [51300, 586, 510, 311, 257, 707, 3036, 300, 603, 854, 505, 23273, 1203, 718, 311, 584, 341, 307, 264, 8062, 272, 51584], "temperature": 0.0, "avg_logprob": -0.12059111065334743, "compression_ratio": 1.403225806451613, "no_speech_prob": 0.04602795094251633}, {"id": 956, "seek": 654372, "start": 6544.52, "end": 6555.0, "text": " this is the subspace w this is the projection of b onto w if we take the difference of b with", "tokens": [50404, 341, 307, 264, 2090, 17940, 261, 341, 307, 264, 22743, 295, 272, 3911, 261, 498, 321, 747, 264, 2649, 295, 272, 365, 50928], "temperature": 0.0, "avg_logprob": -0.056902747601270676, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.010012727230787277}, {"id": 957, "seek": 654372, "start": 6555.0, "end": 6565.320000000001, "text": " the projection onto w so b minus the projection of b onto w then that difference is exactly this", "tokens": [50928, 264, 22743, 3911, 261, 370, 272, 3175, 264, 22743, 295, 272, 3911, 261, 550, 300, 2649, 307, 2293, 341, 51444], "temperature": 0.0, "avg_logprob": -0.056902747601270676, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.010012727230787277}, {"id": 958, "seek": 654372, "start": 6566.04, "end": 6572.2, "text": " line that's orthogonal to w in other words this vector is in the orthogonal complement", "tokens": [51480, 1622, 300, 311, 41488, 281, 261, 294, 661, 2283, 341, 8062, 307, 294, 264, 41488, 17103, 51788], "temperature": 0.0, "avg_logprob": -0.056902747601270676, "compression_ratio": 1.8972602739726028, "no_speech_prob": 0.010012727230787277}, {"id": 959, "seek": 657372, "start": 6574.68, "end": 6587.56, "text": " of w and because it's in the orthogonal complement of w we know that no matter which", "tokens": [50412, 295, 261, 293, 570, 309, 311, 294, 264, 41488, 17103, 295, 261, 321, 458, 300, 572, 1871, 597, 51056], "temperature": 0.0, "avg_logprob": -0.10134513327415953, "compression_ratio": 1.464, "no_speech_prob": 0.0028007260989397764}, {"id": 960, "seek": 657372, "start": 6587.56, "end": 6593.400000000001, "text": " vector we take in this subspace let's call any vector here a and the reason we're going to call it", "tokens": [51056, 8062, 321, 747, 294, 341, 2090, 17940, 718, 311, 818, 604, 8062, 510, 257, 293, 264, 1778, 321, 434, 516, 281, 818, 309, 51348], "temperature": 0.0, "avg_logprob": -0.10134513327415953, "compression_ratio": 1.464, "no_speech_prob": 0.0028007260989397764}, {"id": 961, "seek": 659340, "start": 6593.4, "end": 6604.2, "text": " a is because a is an element in the column space of of the matrix capital a then the dot product", "tokens": [50364, 257, 307, 570, 257, 307, 364, 4478, 294, 264, 7738, 1901, 295, 295, 264, 8141, 4238, 257, 550, 264, 5893, 1674, 50904], "temperature": 0.0, "avg_logprob": -0.11044860336015809, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.06370723247528076}, {"id": 962, "seek": 659340, "start": 6604.2, "end": 6608.5199999999995, "text": " of a with any of these vectors i mean with this specific vector", "tokens": [50904, 295, 257, 365, 604, 295, 613, 18875, 741, 914, 365, 341, 2685, 8062, 51120], "temperature": 0.0, "avg_logprob": -0.11044860336015809, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.06370723247528076}, {"id": 963, "seek": 659340, "start": 6611.32, "end": 6617.0, "text": " equals zero for all a in the column space of a", "tokens": [51260, 6915, 4018, 337, 439, 257, 294, 264, 7738, 1901, 295, 257, 51544], "temperature": 0.0, "avg_logprob": -0.11044860336015809, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.06370723247528076}, {"id": 964, "seek": 661700, "start": 6617.32, "end": 6623.08, "text": " in particular", "tokens": [50380, 294, 1729, 50668], "temperature": 0.0, "avg_logprob": -0.1786289086212983, "compression_ratio": 1.2588235294117647, "no_speech_prob": 0.014502374455332756}, {"id": 965, "seek": 661700, "start": 6629.16, "end": 6631.72, "text": " if we take the actual columns of a", "tokens": [50972, 498, 321, 747, 264, 3539, 13766, 295, 257, 51100], "temperature": 0.0, "avg_logprob": -0.1786289086212983, "compression_ratio": 1.2588235294117647, "no_speech_prob": 0.014502374455332756}, {"id": 966, "seek": 661700, "start": 6634.28, "end": 6639.0, "text": " so a e i let's say and we dot this is the i-th column of a", "tokens": [51228, 370, 257, 308, 741, 718, 311, 584, 293, 321, 5893, 341, 307, 264, 741, 12, 392, 7738, 295, 257, 51464], "temperature": 0.0, "avg_logprob": -0.1786289086212983, "compression_ratio": 1.2588235294117647, "no_speech_prob": 0.014502374455332756}, {"id": 967, "seek": 663900, "start": 6639.88, "end": 6645.08, "text": " as a matrix and we dot it with", "tokens": [50408, 382, 257, 8141, 293, 321, 5893, 309, 365, 50668], "temperature": 0.0, "avg_logprob": -0.0870760997136434, "compression_ratio": 1.5815602836879432, "no_speech_prob": 0.007815257646143436}, {"id": 968, "seek": 663900, "start": 6647.72, "end": 6656.2, "text": " this vector this is always going to equal zero for all i from and in this case since the domain", "tokens": [50800, 341, 8062, 341, 307, 1009, 516, 281, 2681, 4018, 337, 439, 741, 490, 293, 294, 341, 1389, 1670, 264, 9274, 51224], "temperature": 0.0, "avg_logprob": -0.0870760997136434, "compression_ratio": 1.5815602836879432, "no_speech_prob": 0.007815257646143436}, {"id": 969, "seek": 663900, "start": 6656.2, "end": 6667.16, "text": " of a is r n it's for all i going from one to n we can write this dot product using the transpose", "tokens": [51224, 295, 257, 307, 367, 297, 309, 311, 337, 439, 741, 516, 490, 472, 281, 297, 321, 393, 2464, 341, 5893, 1674, 1228, 264, 25167, 51772], "temperature": 0.0, "avg_logprob": -0.0870760997136434, "compression_ratio": 1.5815602836879432, "no_speech_prob": 0.007815257646143436}, {"id": 970, "seek": 666716, "start": 6667.16, "end": 6673.08, "text": " so remember the dot product is the the multiple you multiply each of the entries in the vectors", "tokens": [50364, 370, 1604, 264, 5893, 1674, 307, 264, 264, 3866, 291, 12972, 1184, 295, 264, 23041, 294, 264, 18875, 50660], "temperature": 0.0, "avg_logprob": -0.07322997485890108, "compression_ratio": 2.016042780748663, "no_speech_prob": 0.0005702816415578127}, {"id": 971, "seek": 666716, "start": 6673.08, "end": 6677.8, "text": " and then you add them all up and the way you can express that is using the transpose of a particular", "tokens": [50660, 293, 550, 291, 909, 552, 439, 493, 293, 264, 636, 291, 393, 5109, 300, 307, 1228, 264, 25167, 295, 257, 1729, 50896], "temperature": 0.0, "avg_logprob": -0.07322997485890108, "compression_ratio": 2.016042780748663, "no_speech_prob": 0.0005702816415578127}, {"id": 972, "seek": 666716, "start": 6677.8, "end": 6684.12, "text": " vector if we write this as a column vector then we can write this as a row vector by taking the", "tokens": [50896, 8062, 498, 321, 2464, 341, 382, 257, 7738, 8062, 550, 321, 393, 2464, 341, 382, 257, 5386, 8062, 538, 1940, 264, 51212], "temperature": 0.0, "avg_logprob": -0.07322997485890108, "compression_ratio": 2.016042780748663, "no_speech_prob": 0.0005702816415578127}, {"id": 973, "seek": 666716, "start": 6684.12, "end": 6692.92, "text": " transpose and then matrix multiplying these entries so we would take a e i transpose", "tokens": [51212, 25167, 293, 550, 8141, 30955, 613, 23041, 370, 321, 576, 747, 257, 308, 741, 25167, 51652], "temperature": 0.0, "avg_logprob": -0.07322997485890108, "compression_ratio": 2.016042780748663, "no_speech_prob": 0.0005702816415578127}, {"id": 974, "seek": 669292, "start": 6693.88, "end": 6707.64, "text": " times the vector b minus p w b equals zero for all i but this transpose the fact that", "tokens": [50412, 1413, 264, 8062, 272, 3175, 280, 261, 272, 6915, 4018, 337, 439, 741, 457, 341, 25167, 264, 1186, 300, 51100], "temperature": 0.0, "avg_logprob": -0.1340528156446374, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.004754784516990185}, {"id": 975, "seek": 669292, "start": 6708.2, "end": 6715.64, "text": " um if we take if we look at this um column of a and we take its transpose and if this is true", "tokens": [51128, 1105, 498, 321, 747, 498, 321, 574, 412, 341, 1105, 7738, 295, 257, 293, 321, 747, 1080, 25167, 293, 498, 341, 307, 2074, 51500], "temperature": 0.0, "avg_logprob": -0.1340528156446374, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.004754784516990185}, {"id": 976, "seek": 669292, "start": 6715.64, "end": 6721.72, "text": " for all i then this is saying that this vector is the dot product of this vector with each", "tokens": [51500, 337, 439, 741, 550, 341, 307, 1566, 300, 341, 8062, 307, 264, 5893, 1674, 295, 341, 8062, 365, 1184, 51804], "temperature": 0.0, "avg_logprob": -0.1340528156446374, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.004754784516990185}, {"id": 977, "seek": 672172, "start": 6721.72, "end": 6731.400000000001, "text": " of the transpose vectors from a dotted with this is zero therefore if we take the matrix a and transpose", "tokens": [50364, 295, 264, 25167, 18875, 490, 257, 37459, 365, 341, 307, 4018, 4412, 498, 321, 747, 264, 8141, 257, 293, 25167, 50848], "temperature": 0.0, "avg_logprob": -0.061433425025334436, "compression_ratio": 1.7701863354037266, "no_speech_prob": 0.0013249822659417987}, {"id": 978, "seek": 672172, "start": 6731.400000000001, "end": 6739.88, "text": " it and we multiply it matrix multiply it with this vector it will always equal zero", "tokens": [50848, 309, 293, 321, 12972, 309, 8141, 12972, 309, 365, 341, 8062, 309, 486, 1009, 2681, 4018, 51272], "temperature": 0.0, "avg_logprob": -0.061433425025334436, "compression_ratio": 1.7701863354037266, "no_speech_prob": 0.0013249822659417987}, {"id": 979, "seek": 672172, "start": 6743.320000000001, "end": 6749.56, "text": " and now rewrite this by moving everything over to one side we get a transpose times the vector b", "tokens": [51444, 293, 586, 28132, 341, 538, 2684, 1203, 670, 281, 472, 1252, 321, 483, 257, 25167, 1413, 264, 8062, 272, 51756], "temperature": 0.0, "avg_logprob": -0.061433425025334436, "compression_ratio": 1.7701863354037266, "no_speech_prob": 0.0013249822659417987}, {"id": 980, "seek": 674956, "start": 6750.280000000001, "end": 6753.8, "text": " equals a transpose times this projection", "tokens": [50400, 6915, 257, 25167, 1413, 341, 22743, 50576], "temperature": 0.0, "avg_logprob": -0.08460415110868566, "compression_ratio": 1.796875, "no_speech_prob": 0.0034832891542464495}, {"id": 981, "seek": 674956, "start": 6756.68, "end": 6764.200000000001, "text": " but by assumption this projection we know that x solves this equation so we know that this also", "tokens": [50720, 457, 538, 15302, 341, 22743, 321, 458, 300, 2031, 39890, 341, 5367, 370, 321, 458, 300, 341, 611, 51096], "temperature": 0.0, "avg_logprob": -0.08460415110868566, "compression_ratio": 1.796875, "no_speech_prob": 0.0034832891542464495}, {"id": 982, "seek": 674956, "start": 6764.200000000001, "end": 6773.56, "text": " equals a transpose ax and this shows that if x is the least square solution in other words if", "tokens": [51096, 6915, 257, 25167, 6360, 293, 341, 3110, 300, 498, 2031, 307, 264, 1935, 3732, 3827, 294, 661, 2283, 498, 51564], "temperature": 0.0, "avg_logprob": -0.08460415110868566, "compression_ratio": 1.796875, "no_speech_prob": 0.0034832891542464495}, {"id": 983, "seek": 677356, "start": 6773.56, "end": 6783.400000000001, "text": " it solves this problem then a transpose a transpose a acting on x equals a transpose b so this proves", "tokens": [50364, 309, 39890, 341, 1154, 550, 257, 25167, 257, 25167, 257, 6577, 322, 2031, 6915, 257, 25167, 272, 370, 341, 25019, 50856], "temperature": 0.0, "avg_logprob": -0.05493121147155762, "compression_ratio": 1.8357142857142856, "no_speech_prob": 0.0011335525196045637}, {"id": 984, "seek": 677356, "start": 6783.400000000001, "end": 6790.200000000001, "text": " the theorem in one direction to prove the theorem in the other direction", "tokens": [50856, 264, 20904, 294, 472, 3513, 281, 7081, 264, 20904, 294, 264, 661, 3513, 51196], "temperature": 0.0, "avg_logprob": -0.05493121147155762, "compression_ratio": 1.8357142857142856, "no_speech_prob": 0.0011335525196045637}, {"id": 985, "seek": 677356, "start": 6793.0, "end": 6796.68, "text": " i'm running out of space here but i can give you at least the sketch of this proof", "tokens": [51336, 741, 478, 2614, 484, 295, 1901, 510, 457, 741, 393, 976, 291, 412, 1935, 264, 12325, 295, 341, 8177, 51520], "temperature": 0.0, "avg_logprob": -0.05493121147155762, "compression_ratio": 1.8357142857142856, "no_speech_prob": 0.0011335525196045637}, {"id": 986, "seek": 679668, "start": 6797.56, "end": 6806.6, "text": " now suppose that um this equation is satisfied so suppose x is a solution", "tokens": [50408, 586, 7297, 300, 1105, 341, 5367, 307, 11239, 370, 7297, 2031, 307, 257, 3827, 50860], "temperature": 0.0, "avg_logprob": -0.11080942983212679, "compression_ratio": 1.5625, "no_speech_prob": 0.0015487244818359613}, {"id": 987, "seek": 679668, "start": 6808.4400000000005, "end": 6814.4400000000005, "text": " to a transpose ax equals a transpose b", "tokens": [50952, 281, 257, 25167, 6360, 6915, 257, 25167, 272, 51252], "temperature": 0.0, "avg_logprob": -0.11080942983212679, "compression_ratio": 1.5625, "no_speech_prob": 0.0015487244818359613}, {"id": 988, "seek": 679668, "start": 6818.04, "end": 6822.76, "text": " we can move everything over again as we did sort of going backwards in this calculation", "tokens": [51432, 321, 393, 1286, 1203, 670, 797, 382, 321, 630, 1333, 295, 516, 12204, 294, 341, 17108, 51668], "temperature": 0.0, "avg_logprob": -0.11080942983212679, "compression_ratio": 1.5625, "no_speech_prob": 0.0015487244818359613}, {"id": 989, "seek": 682276, "start": 6822.76, "end": 6829.64, "text": " and we can express this by saying that a transpose acting on ax minus b", "tokens": [50364, 293, 321, 393, 5109, 341, 538, 1566, 300, 257, 25167, 6577, 322, 6360, 3175, 272, 50708], "temperature": 0.0, "avg_logprob": -0.09073317527770997, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.00045829490409232676}, {"id": 990, "seek": 682276, "start": 6830.68, "end": 6834.6, "text": " equals zero in other words this vector", "tokens": [50760, 6915, 4018, 294, 661, 2283, 341, 8062, 50956], "temperature": 0.0, "avg_logprob": -0.09073317527770997, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.00045829490409232676}, {"id": 991, "seek": 682276, "start": 6836.84, "end": 6844.280000000001, "text": " ax minus b is in the orthogonal complement of the column space of a so it's in the orthogonal", "tokens": [51068, 6360, 3175, 272, 307, 294, 264, 41488, 17103, 295, 264, 7738, 1901, 295, 257, 370, 309, 311, 294, 264, 41488, 51440], "temperature": 0.0, "avg_logprob": -0.09073317527770997, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.00045829490409232676}, {"id": 992, "seek": 684428, "start": 6844.36, "end": 6856.759999999999, "text": " complement of w now if we go back to our picture we know that the vector b can be uniquely decomposed", "tokens": [50368, 17103, 295, 261, 586, 498, 321, 352, 646, 281, 527, 3036, 321, 458, 300, 264, 8062, 272, 393, 312, 31474, 22867, 1744, 50988], "temperature": 0.0, "avg_logprob": -0.07413285308414036, "compression_ratio": 1.727810650887574, "no_speech_prob": 0.006289459764957428}, {"id": 993, "seek": 684428, "start": 6856.759999999999, "end": 6864.36, "text": " as the sum of two vectors one a vector in w and one a vector in the orthogonal complement of w", "tokens": [50988, 382, 264, 2408, 295, 732, 18875, 472, 257, 8062, 294, 261, 293, 472, 257, 8062, 294, 264, 41488, 17103, 295, 261, 51368], "temperature": 0.0, "avg_logprob": -0.07413285308414036, "compression_ratio": 1.727810650887574, "no_speech_prob": 0.006289459764957428}, {"id": 994, "seek": 684428, "start": 6865.0, "end": 6871.4, "text": " so this is a theorem um that you might cover uh in in the part of your linear algebra course on", "tokens": [51400, 370, 341, 307, 257, 20904, 1105, 300, 291, 1062, 2060, 2232, 294, 294, 264, 644, 295, 428, 8213, 21989, 1164, 322, 51720], "temperature": 0.0, "avg_logprob": -0.07413285308414036, "compression_ratio": 1.727810650887574, "no_speech_prob": 0.006289459764957428}, {"id": 995, "seek": 687140, "start": 6871.96, "end": 6881.639999999999, "text": " um when you talk when you discuss orthogonality so b has a unique decomposition", "tokens": [50392, 1105, 562, 291, 751, 562, 291, 2248, 38130, 266, 1860, 370, 272, 575, 257, 3845, 48356, 50876], "temperature": 0.0, "avg_logprob": -0.10032192866007487, "compression_ratio": 1.5045045045045045, "no_speech_prob": 0.0012448037741705775}, {"id": 996, "seek": 687140, "start": 6887.5599999999995, "end": 6894.839999999999, "text": " into a vector in w plus a vector let's say in the orthogonal complement let's call it v", "tokens": [51172, 666, 257, 8062, 294, 261, 1804, 257, 8062, 718, 311, 584, 294, 264, 41488, 17103, 718, 311, 818, 309, 371, 51536], "temperature": 0.0, "avg_logprob": -0.10032192866007487, "compression_ratio": 1.5045045045045045, "no_speech_prob": 0.0012448037741705775}, {"id": 997, "seek": 689484, "start": 6895.8, "end": 6904.28, "text": " where w is in w and v is in the orthogonal complement of w", "tokens": [50412, 689, 261, 307, 294, 261, 293, 371, 307, 294, 264, 41488, 17103, 295, 261, 50836], "temperature": 0.0, "avg_logprob": -0.0583845882092492, "compression_ratio": 1.7985074626865671, "no_speech_prob": 0.0028447837103158236}, {"id": 998, "seek": 689484, "start": 6906.6, "end": 6912.12, "text": " but this equation here says that if we take the difference ax minus b and we get in the", "tokens": [50952, 457, 341, 5367, 510, 1619, 300, 498, 321, 747, 264, 2649, 6360, 3175, 272, 293, 321, 483, 294, 264, 51228], "temperature": 0.0, "avg_logprob": -0.0583845882092492, "compression_ratio": 1.7985074626865671, "no_speech_prob": 0.0028447837103158236}, {"id": 999, "seek": 689484, "start": 6912.12, "end": 6923.0, "text": " orthogonal complement we know that this has to equal some vector so ax minus b equals a vector", "tokens": [51228, 41488, 17103, 321, 458, 300, 341, 575, 281, 2681, 512, 8062, 370, 6360, 3175, 272, 6915, 257, 8062, 51772], "temperature": 0.0, "avg_logprob": -0.0583845882092492, "compression_ratio": 1.7985074626865671, "no_speech_prob": 0.0028447837103158236}, {"id": 1000, "seek": 692300, "start": 6923.0, "end": 6929.64, "text": " in this orthogonal complement let's just call it v for now because it's in the orthogonal complement", "tokens": [50364, 294, 341, 41488, 17103, 718, 311, 445, 818, 309, 371, 337, 586, 570, 309, 311, 294, 264, 41488, 17103, 50696], "temperature": 0.0, "avg_logprob": -0.05527218612464699, "compression_ratio": 1.4766355140186915, "no_speech_prob": 0.002980886958539486}, {"id": 1001, "seek": 692300, "start": 6929.64, "end": 6940.12, "text": " rewriting this equation says that b must equal ax minus v", "tokens": [50696, 319, 19868, 341, 5367, 1619, 300, 272, 1633, 2681, 6360, 3175, 371, 51220], "temperature": 0.0, "avg_logprob": -0.05527218612464699, "compression_ratio": 1.4766355140186915, "no_speech_prob": 0.002980886958539486}, {"id": 1002, "seek": 694012, "start": 6940.68, "end": 6953.48, "text": " and a where is ax ax is in the column space of a in other words it's already in w", "tokens": [50392, 293, 257, 689, 307, 6360, 6360, 307, 294, 264, 7738, 1901, 295, 257, 294, 661, 2283, 309, 311, 1217, 294, 261, 51032], "temperature": 0.0, "avg_logprob": -0.09045361435931662, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.008315438404679298}, {"id": 1003, "seek": 694012, "start": 6955.0, "end": 6962.12, "text": " so this is the vector in w and therefore this vector right here has to be in the orthogonal", "tokens": [51108, 370, 341, 307, 264, 8062, 294, 261, 293, 4412, 341, 8062, 558, 510, 575, 281, 312, 294, 264, 41488, 51464], "temperature": 0.0, "avg_logprob": -0.09045361435931662, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.008315438404679298}, {"id": 1004, "seek": 696212, "start": 6962.12, "end": 6969.08, "text": " complement and this uniqueness decomposition theorem tells us that this vector is exactly", "tokens": [50364, 17103, 293, 341, 48294, 48356, 20904, 5112, 505, 300, 341, 8062, 307, 2293, 50712], "temperature": 0.0, "avg_logprob": -0.061508606780659066, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.008315620012581348}, {"id": 1005, "seek": 696212, "start": 6970.04, "end": 6979.08, "text": " b minus ax so this looks this is going to look a little bit silly but b equals ax minus", "tokens": [50760, 272, 3175, 6360, 370, 341, 1542, 341, 307, 516, 281, 574, 257, 707, 857, 11774, 457, 272, 6915, 6360, 3175, 51212], "temperature": 0.0, "avg_logprob": -0.061508606780659066, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.008315620012581348}, {"id": 1006, "seek": 696212, "start": 6981.5599999999995, "end": 6983.96, "text": " ax minus b", "tokens": [51336, 6360, 3175, 272, 51456], "temperature": 0.0, "avg_logprob": -0.061508606780659066, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.008315620012581348}, {"id": 1007, "seek": 698396, "start": 6984.12, "end": 6992.92, "text": " and the uniqueness decomposition theorem tells us that this vector that's in the orthogonal", "tokens": [50372, 293, 264, 48294, 48356, 20904, 5112, 505, 300, 341, 8062, 300, 311, 294, 264, 41488, 50812], "temperature": 0.0, "avg_logprob": -0.09714282751083374, "compression_ratio": 1.4803149606299213, "no_speech_prob": 0.014955746941268444}, {"id": 1008, "seek": 698396, "start": 6992.92, "end": 7002.12, "text": " complement must equal the projection of b onto that subspace w in other words ax this term right", "tokens": [50812, 17103, 1633, 2681, 264, 22743, 295, 272, 3911, 300, 2090, 17940, 261, 294, 661, 2283, 6360, 341, 1433, 558, 51272], "temperature": 0.0, "avg_logprob": -0.09714282751083374, "compression_ratio": 1.4803149606299213, "no_speech_prob": 0.014955746941268444}, {"id": 1009, "seek": 700212, "start": 7002.12, "end": 7010.04, "text": " here has to equal the projection of b onto w minus this vector right here", "tokens": [50364, 510, 575, 281, 2681, 264, 22743, 295, 272, 3911, 261, 3175, 341, 8062, 558, 510, 50760], "temperature": 0.0, "avg_logprob": -0.08471991275918894, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.0006878400454297662}, {"id": 1010, "seek": 700212, "start": 7014.28, "end": 7024.84, "text": " in other words ax equals the projection of w onto of b onto w and that means that x is", "tokens": [50972, 294, 661, 2283, 6360, 6915, 264, 22743, 295, 261, 3911, 295, 272, 3911, 261, 293, 300, 1355, 300, 2031, 307, 51500], "temperature": 0.0, "avg_logprob": -0.08471991275918894, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.0006878400454297662}, {"id": 1011, "seek": 700212, "start": 7024.84, "end": 7029.96, "text": " a least square solution because it solves this equation so that follows from the uniqueness", "tokens": [51500, 257, 1935, 3732, 3827, 570, 309, 39890, 341, 5367, 370, 300, 10002, 490, 264, 48294, 51756], "temperature": 0.0, "avg_logprob": -0.08471991275918894, "compression_ratio": 1.726027397260274, "no_speech_prob": 0.0006878400454297662}, {"id": 1012, "seek": 702996, "start": 7029.96, "end": 7038.44, "text": " of orthogonal decomposition of a vector into two parts if you have a given subspace one", "tokens": [50364, 295, 41488, 48356, 295, 257, 8062, 666, 732, 3166, 498, 291, 362, 257, 2212, 2090, 17940, 472, 50788], "temperature": 0.0, "avg_logprob": -0.04735955519553942, "compression_ratio": 2.0054054054054054, "no_speech_prob": 0.00025315029779449105}, {"id": 1013, "seek": 702996, "start": 7038.44, "end": 7043.64, "text": " into a vector in that subspace that's where this ax equals the projection of b onto w comes from", "tokens": [50788, 666, 257, 8062, 294, 300, 2090, 17940, 300, 311, 689, 341, 6360, 6915, 264, 22743, 295, 272, 3911, 261, 1487, 490, 51048], "temperature": 0.0, "avg_logprob": -0.04735955519553942, "compression_ratio": 2.0054054054054054, "no_speech_prob": 0.00025315029779449105}, {"id": 1014, "seek": 702996, "start": 7043.64, "end": 7048.36, "text": " and the other vector is just the orthogonal complement the projection onto the orthogonal", "tokens": [51048, 293, 264, 661, 8062, 307, 445, 264, 41488, 17103, 264, 22743, 3911, 264, 41488, 51284], "temperature": 0.0, "avg_logprob": -0.04735955519553942, "compression_ratio": 2.0054054054054054, "no_speech_prob": 0.00025315029779449105}, {"id": 1015, "seek": 702996, "start": 7048.36, "end": 7053.32, "text": " complement which is just the difference of the vector itself minus that vector in the orthogonal", "tokens": [51284, 17103, 597, 307, 445, 264, 2649, 295, 264, 8062, 2564, 3175, 300, 8062, 294, 264, 41488, 51532], "temperature": 0.0, "avg_logprob": -0.04735955519553942, "compression_ratio": 2.0054054054054054, "no_speech_prob": 0.00025315029779449105}, {"id": 1016, "seek": 705332, "start": 7053.32, "end": 7060.04, "text": " subspace so this is the the proof of this theorem that allows us to say if we want to solve a least", "tokens": [50364, 2090, 17940, 370, 341, 307, 264, 264, 8177, 295, 341, 20904, 300, 4045, 505, 281, 584, 498, 321, 528, 281, 5039, 257, 1935, 50700], "temperature": 0.0, "avg_logprob": -0.0507531109978171, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.00884680263698101}, {"id": 1017, "seek": 705332, "start": 7060.04, "end": 7065.88, "text": " square solution problem when w equals the column space of a we merely have to solve this system", "tokens": [50700, 3732, 3827, 1154, 562, 261, 6915, 264, 7738, 1901, 295, 257, 321, 17003, 362, 281, 5039, 341, 1185, 50992], "temperature": 0.0, "avg_logprob": -0.0507531109978171, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.00884680263698101}, {"id": 1018, "seek": 705332, "start": 7065.88, "end": 7070.36, "text": " so the next few videos will do lots of different examples of how to actually", "tokens": [50992, 370, 264, 958, 1326, 2145, 486, 360, 3195, 295, 819, 5110, 295, 577, 281, 767, 51216], "temperature": 0.0, "avg_logprob": -0.0507531109978171, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.00884680263698101}, {"id": 1019, "seek": 705332, "start": 7071.4, "end": 7075.4, "text": " so the example that we'll be working out it's a quite a long example because of the", "tokens": [51268, 370, 264, 1365, 300, 321, 603, 312, 1364, 484, 309, 311, 257, 1596, 257, 938, 1365, 570, 295, 264, 51468], "temperature": 0.0, "avg_logprob": -0.0507531109978171, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.00884680263698101}, {"id": 1020, "seek": 707540, "start": 7075.4, "end": 7082.04, "text": " generality that we'll do it in is if you're given data and let's say the data you're given", "tokens": [50364, 1337, 1860, 300, 321, 603, 360, 309, 294, 307, 498, 291, 434, 2212, 1412, 293, 718, 311, 584, 264, 1412, 291, 434, 2212, 50696], "temperature": 0.0, "avg_logprob": -0.0902467409769694, "compression_ratio": 1.7987012987012987, "no_speech_prob": 0.14801916480064392}, {"id": 1021, "seek": 707540, "start": 7083.32, "end": 7089.4, "text": " is you have a bunch of x values and a bunch of y values so these are one dimensional input and", "tokens": [50760, 307, 291, 362, 257, 3840, 295, 2031, 4190, 293, 257, 3840, 295, 288, 4190, 370, 613, 366, 472, 18795, 4846, 293, 51064], "temperature": 0.0, "avg_logprob": -0.0902467409769694, "compression_ratio": 1.7987012987012987, "no_speech_prob": 0.14801916480064392}, {"id": 1022, "seek": 707540, "start": 7089.4, "end": 7098.599999999999, "text": " one dimensional output values so suppose you have given data x1 y1 x2 y2 and so on up until", "tokens": [51064, 472, 18795, 5598, 4190, 370, 7297, 291, 362, 2212, 1412, 2031, 16, 288, 16, 2031, 17, 288, 17, 293, 370, 322, 493, 1826, 51524], "temperature": 0.0, "avg_logprob": -0.0902467409769694, "compression_ratio": 1.7987012987012987, "no_speech_prob": 0.14801916480064392}, {"id": 1023, "seek": 709860, "start": 7098.6, "end": 7109.240000000001, "text": " the number of data points that you have x dyd and if you try to plot these data points let's say", "tokens": [50364, 264, 1230, 295, 1412, 2793, 300, 291, 362, 2031, 14584, 67, 293, 498, 291, 853, 281, 7542, 613, 1412, 2793, 718, 311, 584, 50896], "temperature": 0.0, "avg_logprob": -0.09157274166742961, "compression_ratio": 1.5528455284552845, "no_speech_prob": 0.008846994489431381}, {"id": 1024, "seek": 709860, "start": 7109.240000000001, "end": 7118.360000000001, "text": " they look maybe something like this the question that you want to solve is can you try to find", "tokens": [50896, 436, 574, 1310, 746, 411, 341, 264, 1168, 300, 291, 528, 281, 5039, 307, 393, 291, 853, 281, 915, 51352], "temperature": 0.0, "avg_logprob": -0.09157274166742961, "compression_ratio": 1.5528455284552845, "no_speech_prob": 0.008846994489431381}, {"id": 1025, "seek": 711836, "start": 7119.08, "end": 7130.5199999999995, "text": " a line that sort of best approximates these data so that's the problem", "tokens": [50400, 257, 1622, 300, 1333, 295, 1151, 8542, 1024, 613, 1412, 370, 300, 311, 264, 1154, 50972], "temperature": 0.0, "avg_logprob": -0.1016551592411139, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.07368501275777817}, {"id": 1026, "seek": 711836, "start": 7133.88, "end": 7139.5599999999995, "text": " is to find a best fit whatever that means", "tokens": [51140, 307, 281, 915, 257, 1151, 3318, 2035, 300, 1355, 51424], "temperature": 0.0, "avg_logprob": -0.1016551592411139, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.07368501275777817}, {"id": 1027, "seek": 711836, "start": 7142.2, "end": 7146.12, "text": " straight line let's say of the form", "tokens": [51556, 2997, 1622, 718, 311, 584, 295, 264, 1254, 51752], "temperature": 0.0, "avg_logprob": -0.1016551592411139, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.07368501275777817}, {"id": 1028, "seek": 714836, "start": 7148.759999999999, "end": 7156.12, "text": " y equals mx plus b now if we wanted to actually try to solve this problem", "tokens": [50384, 288, 6915, 275, 87, 1804, 272, 586, 498, 321, 1415, 281, 767, 853, 281, 5039, 341, 1154, 50752], "temperature": 0.0, "avg_logprob": -0.07908389442845394, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.0063872747123241425}, {"id": 1029, "seek": 714836, "start": 7156.759999999999, "end": 7161.48, "text": " and suppose that all of these points actually lied on this line we would want to solve this entire", "tokens": [50784, 293, 7297, 300, 439, 295, 613, 2793, 767, 20101, 322, 341, 1622, 321, 576, 528, 281, 5039, 341, 2302, 51020], "temperature": 0.0, "avg_logprob": -0.07908389442845394, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.0063872747123241425}, {"id": 1030, "seek": 714836, "start": 7161.48, "end": 7167.16, "text": " system now m and b are our unknowns we don't know the slope we don't know the y-intercept", "tokens": [51020, 1185, 586, 275, 293, 272, 366, 527, 46048, 321, 500, 380, 458, 264, 13525, 321, 500, 380, 458, 264, 288, 12, 5106, 1336, 51304], "temperature": 0.0, "avg_logprob": -0.07908389442845394, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.0063872747123241425}, {"id": 1031, "seek": 714836, "start": 7167.16, "end": 7175.639999999999, "text": " so we'd have y1 we want to set it equal to mx1 plus b similarly for y2 our second data point", "tokens": [51304, 370, 321, 1116, 362, 288, 16, 321, 528, 281, 992, 309, 2681, 281, 275, 87, 16, 1804, 272, 14138, 337, 288, 17, 527, 1150, 1412, 935, 51728], "temperature": 0.0, "avg_logprob": -0.07908389442845394, "compression_ratio": 1.748768472906404, "no_speech_prob": 0.0063872747123241425}, {"id": 1032, "seek": 717564, "start": 7176.200000000001, "end": 7187.8, "text": " mx2 plus b and we keep going yd equals mxd plus b now in general this is an over constrained system", "tokens": [50392, 275, 87, 17, 1804, 272, 293, 321, 1066, 516, 288, 67, 6915, 275, 87, 67, 1804, 272, 586, 294, 2674, 341, 307, 364, 670, 38901, 1185, 50972], "temperature": 0.0, "avg_logprob": -0.05239806376712423, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.002631517592817545}, {"id": 1033, "seek": 717564, "start": 7187.8, "end": 7192.280000000001, "text": " because we have d equations and if d is relatively large in particular if it's bigger than two", "tokens": [50972, 570, 321, 362, 274, 11787, 293, 498, 274, 307, 7226, 2416, 294, 1729, 498, 309, 311, 3801, 813, 732, 51196], "temperature": 0.0, "avg_logprob": -0.05239806376712423, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.002631517592817545}, {"id": 1034, "seek": 717564, "start": 7193.08, "end": 7198.68, "text": " if it's relatively large it's very unlikely for us to find a solution to this problem", "tokens": [51236, 498, 309, 311, 7226, 2416, 309, 311, 588, 17518, 337, 505, 281, 915, 257, 3827, 281, 341, 1154, 51516], "temperature": 0.0, "avg_logprob": -0.05239806376712423, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.002631517592817545}, {"id": 1035, "seek": 719868, "start": 7198.68, "end": 7207.56, "text": " we can rewrite this problem as a matrix equation by saying that we have the vector y", "tokens": [50364, 321, 393, 28132, 341, 1154, 382, 257, 8141, 5367, 538, 1566, 300, 321, 362, 264, 8062, 288, 50808], "temperature": 0.0, "avg_logprob": -0.0856206252657134, "compression_ratio": 1.5177304964539007, "no_speech_prob": 0.0033764299005270004}, {"id": 1036, "seek": 719868, "start": 7207.56, "end": 7214.12, "text": " which is the vector of our data points in fact let me even write y as a column vector", "tokens": [50808, 597, 307, 264, 8062, 295, 527, 1412, 2793, 294, 1186, 718, 385, 754, 2464, 288, 382, 257, 7738, 8062, 51136], "temperature": 0.0, "avg_logprob": -0.0856206252657134, "compression_ratio": 1.5177304964539007, "no_speech_prob": 0.0033764299005270004}, {"id": 1037, "seek": 719868, "start": 7215.56, "end": 7220.12, "text": " so let's write it like y1 all the way to yd", "tokens": [51208, 370, 718, 311, 2464, 309, 411, 288, 16, 439, 264, 636, 281, 288, 67, 51436], "temperature": 0.0, "avg_logprob": -0.0856206252657134, "compression_ratio": 1.5177304964539007, "no_speech_prob": 0.0033764299005270004}, {"id": 1038, "seek": 722012, "start": 7221.0, "end": 7230.36, "text": " and if we notice this our coefficients are always being added in a linear fashion", "tokens": [50408, 293, 498, 321, 3449, 341, 527, 31994, 366, 1009, 885, 3869, 294, 257, 8213, 6700, 50876], "temperature": 0.0, "avg_logprob": -0.08621410528818767, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.028867896646261215}, {"id": 1039, "seek": 722012, "start": 7230.36, "end": 7235.5599999999995, "text": " and the only thing that's changing is the value of x1 so you could actually write this", "tokens": [50876, 293, 264, 787, 551, 300, 311, 4473, 307, 264, 2158, 295, 2031, 16, 370, 291, 727, 767, 2464, 341, 51136], "temperature": 0.0, "avg_logprob": -0.08621410528818767, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.028867896646261215}, {"id": 1040, "seek": 722012, "start": 7236.92, "end": 7245.72, "text": " as a d by 2 matrix acting on the vector mb now what should this matrix be", "tokens": [51204, 382, 257, 274, 538, 568, 8141, 6577, 322, 264, 8062, 275, 65, 586, 437, 820, 341, 8141, 312, 51644], "temperature": 0.0, "avg_logprob": -0.08621410528818767, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.028867896646261215}, {"id": 1041, "seek": 724572, "start": 7245.72, "end": 7252.68, "text": " we want it to satisfy the equation y1 equals mx1 so x1 has to go in this column", "tokens": [50364, 321, 528, 309, 281, 19319, 264, 5367, 288, 16, 6915, 275, 87, 16, 370, 2031, 16, 575, 281, 352, 294, 341, 7738, 50712], "temperature": 0.0, "avg_logprob": -0.07049329621451242, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.007120918016880751}, {"id": 1042, "seek": 724572, "start": 7253.56, "end": 7260.4400000000005, "text": " plus b times what's the only thing that's going to leave b exactly where it is the number one", "tokens": [50756, 1804, 272, 1413, 437, 311, 264, 787, 551, 300, 311, 516, 281, 1856, 272, 2293, 689, 309, 307, 264, 1230, 472, 51100], "temperature": 0.0, "avg_logprob": -0.07049329621451242, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.007120918016880751}, {"id": 1043, "seek": 724572, "start": 7261.72, "end": 7267.64, "text": " and the same thing here if we had y2 we would want to write y2 equals m", "tokens": [51164, 293, 264, 912, 551, 510, 498, 321, 632, 288, 17, 321, 576, 528, 281, 2464, 288, 17, 6915, 275, 51460], "temperature": 0.0, "avg_logprob": -0.07049329621451242, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.007120918016880751}, {"id": 1044, "seek": 726764, "start": 7268.6, "end": 7278.200000000001, "text": " x2 plus one times b and so on all the way down to xd and one so this matrix equation", "tokens": [50412, 2031, 17, 1804, 472, 1413, 272, 293, 370, 322, 439, 264, 636, 760, 281, 2031, 67, 293, 472, 370, 341, 8141, 5367, 50892], "temperature": 0.0, "avg_logprob": -0.04784554481506348, "compression_ratio": 1.630952380952381, "no_speech_prob": 0.011331099085509777}, {"id": 1045, "seek": 726764, "start": 7278.200000000001, "end": 7284.6, "text": " which we can write as y vector equals a and i don't want to write x as we did before because", "tokens": [50892, 597, 321, 393, 2464, 382, 288, 8062, 6915, 257, 293, 741, 500, 380, 528, 281, 2464, 2031, 382, 321, 630, 949, 570, 51212], "temperature": 0.0, "avg_logprob": -0.04784554481506348, "compression_ratio": 1.630952380952381, "no_speech_prob": 0.011331099085509777}, {"id": 1046, "seek": 726764, "start": 7284.6, "end": 7290.84, "text": " i don't want to conflate it with the data points that are also labeled by x and so instead we'll", "tokens": [51212, 741, 500, 380, 528, 281, 1497, 17593, 309, 365, 264, 1412, 2793, 300, 366, 611, 21335, 538, 2031, 293, 370, 2602, 321, 603, 51524], "temperature": 0.0, "avg_logprob": -0.04784554481506348, "compression_ratio": 1.630952380952381, "no_speech_prob": 0.011331099085509777}, {"id": 1047, "seek": 729084, "start": 7290.84, "end": 7299.08, "text": " write this as ax so this is the system that we would like to solve but we know that there is in", "tokens": [50364, 2464, 341, 382, 6360, 370, 341, 307, 264, 1185, 300, 321, 576, 411, 281, 5039, 457, 321, 458, 300, 456, 307, 294, 50776], "temperature": 0.0, "avg_logprob": -0.06562804548363936, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.06186392530798912}, {"id": 1048, "seek": 729084, "start": 7299.08, "end": 7306.76, "text": " general no solution to this problem so what can we do now in this case the column space of a", "tokens": [50776, 2674, 572, 3827, 281, 341, 1154, 370, 437, 393, 321, 360, 586, 294, 341, 1389, 264, 7738, 1901, 295, 257, 51160], "temperature": 0.0, "avg_logprob": -0.06562804548363936, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.06186392530798912}, {"id": 1049, "seek": 729084, "start": 7306.76, "end": 7316.6, "text": " happens to be a two-dimensional subspace of r what of rd so the column space of a is a two-dimensional", "tokens": [51160, 2314, 281, 312, 257, 732, 12, 18759, 2090, 17940, 295, 367, 437, 295, 367, 67, 370, 264, 7738, 1901, 295, 257, 307, 257, 732, 12, 18759, 51652], "temperature": 0.0, "avg_logprob": -0.06562804548363936, "compression_ratio": 1.7962962962962963, "no_speech_prob": 0.06186392530798912}, {"id": 1050, "seek": 731660, "start": 7316.6, "end": 7322.68, "text": " subspace of rd so we can actually draw something like this although the space that's in is might", "tokens": [50364, 2090, 17940, 295, 367, 67, 370, 321, 393, 767, 2642, 746, 411, 341, 4878, 264, 1901, 300, 311, 294, 307, 1062, 50668], "temperature": 0.0, "avg_logprob": -0.034365834191788076, "compression_ratio": 1.76036866359447, "no_speech_prob": 0.02595474384725094}, {"id": 1051, "seek": 731660, "start": 7322.68, "end": 7329.08, "text": " be significantly larger and we have the vector y somewhere out here in general it's not in the", "tokens": [50668, 312, 10591, 4833, 293, 321, 362, 264, 8062, 288, 4079, 484, 510, 294, 2674, 309, 311, 406, 294, 264, 50988], "temperature": 0.0, "avg_logprob": -0.034365834191788076, "compression_ratio": 1.76036866359447, "no_speech_prob": 0.02595474384725094}, {"id": 1052, "seek": 731660, "start": 7329.08, "end": 7333.4800000000005, "text": " column space in general this line does not go through every single one of these data points", "tokens": [50988, 7738, 1901, 294, 2674, 341, 1622, 775, 406, 352, 807, 633, 2167, 472, 295, 613, 1412, 2793, 51208], "temperature": 0.0, "avg_logprob": -0.034365834191788076, "compression_ratio": 1.76036866359447, "no_speech_prob": 0.02595474384725094}, {"id": 1053, "seek": 731660, "start": 7334.200000000001, "end": 7340.6, "text": " so we have some vector y and instead of trying to solve this specific equation which in general is", "tokens": [51244, 370, 321, 362, 512, 8062, 288, 293, 2602, 295, 1382, 281, 5039, 341, 2685, 5367, 597, 294, 2674, 307, 51564], "temperature": 0.0, "avg_logprob": -0.034365834191788076, "compression_ratio": 1.76036866359447, "no_speech_prob": 0.02595474384725094}, {"id": 1054, "seek": 734060, "start": 7340.6, "end": 7349.88, "text": " unsolvable we can project y onto this subspace w and we can solve that associated system and then", "tokens": [50364, 2693, 401, 17915, 321, 393, 1716, 288, 3911, 341, 2090, 17940, 261, 293, 321, 393, 5039, 300, 6615, 1185, 293, 550, 50828], "temperature": 0.0, "avg_logprob": -0.0491127121833063, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.03409619629383087}, {"id": 1055, "seek": 734060, "start": 7349.88, "end": 7355.56, "text": " we'll say what that means in a moment in fact actually we can say what it means right now", "tokens": [50828, 321, 603, 584, 437, 300, 1355, 294, 257, 1623, 294, 1186, 767, 321, 393, 584, 437, 309, 1355, 558, 586, 51112], "temperature": 0.0, "avg_logprob": -0.0491127121833063, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.03409619629383087}, {"id": 1056, "seek": 734060, "start": 7355.56, "end": 7361.64, "text": " if we take the difference of these two vectors y minus this projection", "tokens": [51112, 498, 321, 747, 264, 2649, 295, 613, 732, 18875, 288, 3175, 341, 22743, 51416], "temperature": 0.0, "avg_logprob": -0.0491127121833063, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.03409619629383087}, {"id": 1057, "seek": 736164, "start": 7362.04, "end": 7370.4400000000005, "text": " what are we minimizing so an arbitrary vector in this subspace let's write w as an arbitrary vector", "tokens": [50384, 437, 366, 321, 46608, 370, 364, 23211, 8062, 294, 341, 2090, 17940, 718, 311, 2464, 261, 382, 364, 23211, 8062, 50804], "temperature": 0.0, "avg_logprob": -0.16896609983582428, "compression_ratio": 1.8471337579617835, "no_speech_prob": 0.03409780189394951}, {"id": 1058, "seek": 736164, "start": 7370.4400000000005, "end": 7377.64, "text": " in the subspace is a linear combination of these columns so let's write that linear combination", "tokens": [50804, 294, 264, 2090, 17940, 307, 257, 8213, 6562, 295, 613, 13766, 370, 718, 311, 2464, 300, 8213, 6562, 51164], "temperature": 0.0, "avg_logprob": -0.16896609983582428, "compression_ratio": 1.8471337579617835, "no_speech_prob": 0.03409780189394951}, {"id": 1059, "seek": 736164, "start": 7377.64, "end": 7386.92, "text": " as m suggestively a e1 which is the first column of a which is just all of these x data points", "tokens": [51164, 382, 275, 3402, 3413, 257, 308, 16, 597, 307, 264, 700, 7738, 295, 257, 597, 307, 445, 439, 295, 613, 2031, 1412, 2793, 51628], "temperature": 0.0, "avg_logprob": -0.16896609983582428, "compression_ratio": 1.8471337579617835, "no_speech_prob": 0.03409780189394951}, {"id": 1060, "seek": 738692, "start": 7387.0, "end": 7396.36, "text": " x data points plus b times the second column of a and we want to minimize the distance between our", "tokens": [50368, 2031, 1412, 2793, 1804, 272, 1413, 264, 1150, 7738, 295, 257, 293, 321, 528, 281, 17522, 264, 4560, 1296, 527, 50836], "temperature": 0.0, "avg_logprob": -0.06480255679807802, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.002396580995991826}, {"id": 1061, "seek": 738692, "start": 7396.36, "end": 7402.92, "text": " data set our data vector y with this vector so in other words if we take this difference", "tokens": [50836, 1412, 992, 527, 1412, 8062, 288, 365, 341, 8062, 370, 294, 661, 2283, 498, 321, 747, 341, 2649, 51164], "temperature": 0.0, "avg_logprob": -0.06480255679807802, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.002396580995991826}, {"id": 1062, "seek": 738692, "start": 7402.92, "end": 7407.72, "text": " let's let's replace this with w for now because let's imagine we don't yet know that this is the", "tokens": [51164, 718, 311, 718, 311, 7406, 341, 365, 261, 337, 586, 570, 718, 311, 3811, 321, 500, 380, 1939, 458, 300, 341, 307, 264, 51404], "temperature": 0.0, "avg_logprob": -0.06480255679807802, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.002396580995991826}, {"id": 1063, "seek": 740772, "start": 7407.72, "end": 7416.4400000000005, "text": " projection so this difference is trying to minimize y minus m a e1", "tokens": [50364, 22743, 370, 341, 2649, 307, 1382, 281, 17522, 288, 3175, 275, 257, 308, 16, 50800], "temperature": 0.0, "avg_logprob": -0.07105712592601776, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.047420766204595566}, {"id": 1064, "seek": 740772, "start": 7420.04, "end": 7430.04, "text": " plus b a e2 and if we look at what each of these components give you then this equals", "tokens": [50980, 1804, 272, 257, 308, 17, 293, 498, 321, 574, 412, 437, 1184, 295, 613, 6677, 976, 291, 550, 341, 6915, 51480], "temperature": 0.0, "avg_logprob": -0.07105712592601776, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.047420766204595566}, {"id": 1065, "seek": 740772, "start": 7430.04, "end": 7436.52, "text": " let's square this just so we don't have to deal with square roots then this is the sum so first", "tokens": [51480, 718, 311, 3732, 341, 445, 370, 321, 500, 380, 362, 281, 2028, 365, 3732, 10669, 550, 341, 307, 264, 2408, 370, 700, 51804], "temperature": 0.0, "avg_logprob": -0.07105712592601776, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.047420766204595566}, {"id": 1066, "seek": 743652, "start": 7436.52, "end": 7449.240000000001, "text": " let's take an arbitrary ith component here it's yi minus m times xi plus b and that's it and then we", "tokens": [50364, 718, 311, 747, 364, 23211, 309, 71, 6542, 510, 309, 311, 288, 72, 3175, 275, 1413, 36800, 1804, 272, 293, 300, 311, 309, 293, 550, 321, 51000], "temperature": 0.0, "avg_logprob": -0.07500070571899414, "compression_ratio": 1.6384180790960452, "no_speech_prob": 0.0018674808088690042}, {"id": 1067, "seek": 743652, "start": 7449.240000000001, "end": 7456.52, "text": " take the sum of these squares because that's what this means and we sum over all i from one to d", "tokens": [51000, 747, 264, 2408, 295, 613, 19368, 570, 300, 311, 437, 341, 1355, 293, 321, 2408, 670, 439, 741, 490, 472, 281, 274, 51364], "temperature": 0.0, "avg_logprob": -0.07500070571899414, "compression_ratio": 1.6384180790960452, "no_speech_prob": 0.0018674808088690042}, {"id": 1068, "seek": 743652, "start": 7457.240000000001, "end": 7463.160000000001, "text": " so we want to minimize this expression in other words we're taking our actual data set y and", "tokens": [51400, 370, 321, 528, 281, 17522, 341, 6114, 294, 661, 2283, 321, 434, 1940, 527, 3539, 1412, 992, 288, 293, 51696], "temperature": 0.0, "avg_logprob": -0.07500070571899414, "compression_ratio": 1.6384180790960452, "no_speech_prob": 0.0018674808088690042}, {"id": 1069, "seek": 746316, "start": 7463.24, "end": 7472.12, "text": " we're taking this which is our best fit curve using our data set x and so we're trying to minimize", "tokens": [50368, 321, 434, 1940, 341, 597, 307, 527, 1151, 3318, 7605, 1228, 527, 1412, 992, 2031, 293, 370, 321, 434, 1382, 281, 17522, 50812], "temperature": 0.0, "avg_logprob": -0.05481229509626116, "compression_ratio": 1.8012820512820513, "no_speech_prob": 0.00025315230595879257}, {"id": 1070, "seek": 746316, "start": 7472.12, "end": 7480.599999999999, "text": " all of these distances so these are actually the vertical distances between the best fit curve", "tokens": [50812, 439, 295, 613, 22182, 370, 613, 366, 767, 264, 9429, 22182, 1296, 264, 1151, 3318, 7605, 51236], "temperature": 0.0, "avg_logprob": -0.05481229509626116, "compression_ratio": 1.8012820512820513, "no_speech_prob": 0.00025315230595879257}, {"id": 1071, "seek": 746316, "start": 7480.599999999999, "end": 7486.12, "text": " and this line it's the vertical distances because this is seeing our y data point minus", "tokens": [51236, 293, 341, 1622, 309, 311, 264, 9429, 22182, 570, 341, 307, 2577, 527, 288, 1412, 935, 3175, 51512], "temperature": 0.0, "avg_logprob": -0.05481229509626116, "compression_ratio": 1.8012820512820513, "no_speech_prob": 0.00025315230595879257}, {"id": 1072, "seek": 748612, "start": 7487.08, "end": 7494.28, "text": " the value of this line at that point and we take that distance that difference which is this", "tokens": [50412, 264, 2158, 295, 341, 1622, 412, 300, 935, 293, 321, 747, 300, 4560, 300, 2649, 597, 307, 341, 50772], "temperature": 0.0, "avg_logprob": -0.09683968381183904, "compression_ratio": 1.8689320388349515, "no_speech_prob": 0.010651776567101479}, {"id": 1073, "seek": 748612, "start": 7494.28, "end": 7500.36, "text": " little vertical height we square that height and then we add up all of these heights and we want to", "tokens": [50772, 707, 9429, 6681, 321, 3732, 300, 6681, 293, 550, 321, 909, 493, 439, 295, 613, 25930, 293, 321, 528, 281, 51076], "temperature": 0.0, "avg_logprob": -0.09683968381183904, "compression_ratio": 1.8689320388349515, "no_speech_prob": 0.010651776567101479}, {"id": 1074, "seek": 748612, "start": 7500.36, "end": 7505.72, "text": " minimize that expression so the solution to this least squares problem is graphically given by", "tokens": [51076, 17522, 300, 6114, 370, 264, 3827, 281, 341, 1935, 19368, 1154, 307, 4295, 984, 2212, 538, 51344], "temperature": 0.0, "avg_logprob": -0.09683968381183904, "compression_ratio": 1.8689320388349515, "no_speech_prob": 0.010651776567101479}, {"id": 1075, "seek": 748612, "start": 7506.36, "end": 7512.92, "text": " an expression like that and we know how to solve this to solve this we apply our previous theorem", "tokens": [51376, 364, 6114, 411, 300, 293, 321, 458, 577, 281, 5039, 341, 281, 5039, 341, 321, 3079, 527, 3894, 20904, 51704], "temperature": 0.0, "avg_logprob": -0.09683968381183904, "compression_ratio": 1.8689320388349515, "no_speech_prob": 0.010651776567101479}, {"id": 1076, "seek": 751612, "start": 7517.08, "end": 7522.12, "text": " and we know that to solve this we can solve instead", "tokens": [50412, 293, 321, 458, 300, 281, 5039, 341, 321, 393, 5039, 2602, 50664], "temperature": 0.0, "avg_logprob": -0.11920168525294254, "compression_ratio": 1.7933884297520661, "no_speech_prob": 0.000687839463353157}, {"id": 1077, "seek": 751612, "start": 7524.36, "end": 7534.36, "text": " a transpose a equals a sorry a transpose a x equals a transpose oh and x is xi", "tokens": [50776, 257, 25167, 257, 6915, 257, 2597, 257, 25167, 257, 2031, 6915, 257, 25167, 1954, 293, 2031, 307, 36800, 51276], "temperature": 0.0, "avg_logprob": -0.11920168525294254, "compression_ratio": 1.7933884297520661, "no_speech_prob": 0.000687839463353157}, {"id": 1078, "seek": 751612, "start": 7535.48, "end": 7541.64, "text": " let me write this as xi and a transpose y so this is the problem that we want to solve", "tokens": [51332, 718, 385, 2464, 341, 382, 36800, 293, 257, 25167, 288, 370, 341, 307, 264, 1154, 300, 321, 528, 281, 5039, 51640], "temperature": 0.0, "avg_logprob": -0.11920168525294254, "compression_ratio": 1.7933884297520661, "no_speech_prob": 0.000687839463353157}, {"id": 1079, "seek": 754164, "start": 7541.64, "end": 7549.0, "text": " and we want to solve this for xi and xi is our vector of unknowns so in order to do this we have", "tokens": [50364, 293, 321, 528, 281, 5039, 341, 337, 36800, 293, 36800, 307, 527, 8062, 295, 46048, 370, 294, 1668, 281, 360, 341, 321, 362, 50732], "temperature": 0.0, "avg_logprob": -0.05729046688284925, "compression_ratio": 1.84, "no_speech_prob": 0.002050627488642931}, {"id": 1080, "seek": 754164, "start": 7549.0, "end": 7553.72, "text": " to write down what a is we already know what a is we have to write down its transpose we have", "tokens": [50732, 281, 2464, 760, 437, 257, 307, 321, 1217, 458, 437, 257, 307, 321, 362, 281, 2464, 760, 1080, 25167, 321, 362, 50968], "temperature": 0.0, "avg_logprob": -0.05729046688284925, "compression_ratio": 1.84, "no_speech_prob": 0.002050627488642931}, {"id": 1081, "seek": 754164, "start": 7553.72, "end": 7558.4400000000005, "text": " to multiply those two things there's a lot of things we have to calculate so let's do that", "tokens": [50968, 281, 12972, 729, 732, 721, 456, 311, 257, 688, 295, 721, 321, 362, 281, 8873, 370, 718, 311, 360, 300, 51204], "temperature": 0.0, "avg_logprob": -0.05729046688284925, "compression_ratio": 1.84, "no_speech_prob": 0.002050627488642931}, {"id": 1082, "seek": 754164, "start": 7559.160000000001, "end": 7566.360000000001, "text": " on a fresh board space so i've written the problem setup and we have the matrix a with", "tokens": [51240, 322, 257, 4451, 3150, 1901, 370, 741, 600, 3720, 264, 1154, 8657, 293, 321, 362, 264, 8141, 257, 365, 51600], "temperature": 0.0, "avg_logprob": -0.05729046688284925, "compression_ratio": 1.84, "no_speech_prob": 0.002050627488642931}, {"id": 1083, "seek": 756636, "start": 7566.44, "end": 7571.799999999999, "text": " our data points for x and our vector y with y and i've taken the transpose and i've written it", "tokens": [50368, 527, 1412, 2793, 337, 2031, 293, 527, 8062, 288, 365, 288, 293, 741, 600, 2726, 264, 25167, 293, 741, 600, 3720, 309, 50636], "temperature": 0.0, "avg_logprob": -0.05631333932109263, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.025953862816095352}, {"id": 1084, "seek": 756636, "start": 7571.799999999999, "end": 7577.5599999999995, "text": " on the left because we'll be applying matrix multiplication to this side to solve for a transpose", "tokens": [50636, 322, 264, 1411, 570, 321, 603, 312, 9275, 8141, 27290, 281, 341, 1252, 281, 5039, 337, 257, 25167, 50924], "temperature": 0.0, "avg_logprob": -0.05631333932109263, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.025953862816095352}, {"id": 1085, "seek": 756636, "start": 7577.5599999999995, "end": 7584.28, "text": " a and then we'll also matrix multiply a transpose with y so if we multiply these two matrices", "tokens": [50924, 257, 293, 550, 321, 603, 611, 8141, 12972, 257, 25167, 365, 288, 370, 498, 321, 12972, 613, 732, 32284, 51260], "temperature": 0.0, "avg_logprob": -0.05631333932109263, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.025953862816095352}, {"id": 1086, "seek": 756636, "start": 7586.5199999999995, "end": 7591.32, "text": " it's the first row here times the first take the dot product with this with this column", "tokens": [51372, 309, 311, 264, 700, 5386, 510, 1413, 264, 700, 747, 264, 5893, 1674, 365, 341, 365, 341, 7738, 51612], "temperature": 0.0, "avg_logprob": -0.05631333932109263, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.025953862816095352}, {"id": 1087, "seek": 759132, "start": 7591.88, "end": 7600.04, "text": " and that's x1 squared plus x2 squared plus xd squared so the first top left entry is the sum", "tokens": [50392, 293, 300, 311, 2031, 16, 8889, 1804, 2031, 17, 8889, 1804, 2031, 67, 8889, 370, 264, 700, 1192, 1411, 8729, 307, 264, 2408, 50800], "temperature": 0.0, "avg_logprob": -0.108275406062603, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.011330765672028065}, {"id": 1088, "seek": 759132, "start": 7600.04, "end": 7603.48, "text": " of the squares of these entries from 1 to d", "tokens": [50800, 295, 264, 19368, 295, 613, 23041, 490, 502, 281, 274, 50972], "temperature": 0.0, "avg_logprob": -0.108275406062603, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.011330765672028065}, {"id": 1089, "seek": 759132, "start": 7607.24, "end": 7614.759999999999, "text": " and the second entry on the top is the first row times the second column of a and that's x1 times", "tokens": [51160, 293, 264, 1150, 8729, 322, 264, 1192, 307, 264, 700, 5386, 1413, 264, 1150, 7738, 295, 257, 293, 300, 311, 2031, 16, 1413, 51536], "temperature": 0.0, "avg_logprob": -0.108275406062603, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.011330765672028065}, {"id": 1090, "seek": 761476, "start": 7614.84, "end": 7620.2, "text": " 1 plus x2 times 1 in other words we're just summing up all of the different x values", "tokens": [50368, 502, 1804, 2031, 17, 1413, 502, 294, 661, 2283, 321, 434, 445, 2408, 2810, 493, 439, 295, 264, 819, 2031, 4190, 50636], "temperature": 0.0, "avg_logprob": -0.052033466100692746, "compression_ratio": 1.7965116279069768, "no_speech_prob": 0.00806145928800106}, {"id": 1091, "seek": 761476, "start": 7623.72, "end": 7628.6, "text": " and on the bottom left it's this first this the second row here with the first column", "tokens": [50812, 293, 322, 264, 2767, 1411, 309, 311, 341, 700, 341, 264, 1150, 5386, 510, 365, 264, 700, 7738, 51056], "temperature": 0.0, "avg_logprob": -0.052033466100692746, "compression_ratio": 1.7965116279069768, "no_speech_prob": 0.00806145928800106}, {"id": 1092, "seek": 761476, "start": 7628.6, "end": 7630.76, "text": " that's the same as it was in the top right", "tokens": [51056, 300, 311, 264, 912, 382, 309, 390, 294, 264, 1192, 558, 51164], "temperature": 0.0, "avg_logprob": -0.052033466100692746, "compression_ratio": 1.7965116279069768, "no_speech_prob": 0.00806145928800106}, {"id": 1093, "seek": 761476, "start": 7633.96, "end": 7640.6, "text": " and then the last entry on the bottom right is the second row with the second column and that's", "tokens": [51324, 293, 550, 264, 1036, 8729, 322, 264, 2767, 558, 307, 264, 1150, 5386, 365, 264, 1150, 7738, 293, 300, 311, 51656], "temperature": 0.0, "avg_logprob": -0.052033466100692746, "compression_ratio": 1.7965116279069768, "no_speech_prob": 0.00806145928800106}, {"id": 1094, "seek": 764060, "start": 7640.6, "end": 7646.84, "text": " one times one plus one times one plus one times one d times which is just d itself", "tokens": [50364, 472, 1413, 472, 1804, 472, 1413, 472, 1804, 472, 1413, 472, 274, 1413, 597, 307, 445, 274, 2564, 50676], "temperature": 0.0, "avg_logprob": -0.05720833756706931, "compression_ratio": 1.9431818181818181, "no_speech_prob": 0.0005883933044970036}, {"id": 1095, "seek": 764060, "start": 7648.76, "end": 7656.52, "text": " so this is a transpose a and a transpose y equals first of all notice that it's just a", "tokens": [50772, 370, 341, 307, 257, 25167, 257, 293, 257, 25167, 288, 6915, 700, 295, 439, 3449, 300, 309, 311, 445, 257, 51160], "temperature": 0.0, "avg_logprob": -0.05720833756706931, "compression_ratio": 1.9431818181818181, "no_speech_prob": 0.0005883933044970036}, {"id": 1096, "seek": 764060, "start": 7656.52, "end": 7662.360000000001, "text": " two by two matrix so we're going to be solving a rather simple system it's just a two by two", "tokens": [51160, 732, 538, 732, 8141, 370, 321, 434, 516, 281, 312, 12606, 257, 2831, 2199, 1185, 309, 311, 445, 257, 732, 538, 732, 51452], "temperature": 0.0, "avg_logprob": -0.05720833756706931, "compression_ratio": 1.9431818181818181, "no_speech_prob": 0.0005883933044970036}, {"id": 1097, "seek": 764060, "start": 7662.360000000001, "end": 7668.360000000001, "text": " so a transpose y is now take the values of x multiply them with the values of y", "tokens": [51452, 370, 257, 25167, 288, 307, 586, 747, 264, 4190, 295, 2031, 12972, 552, 365, 264, 4190, 295, 288, 51752], "temperature": 0.0, "avg_logprob": -0.05720833756706931, "compression_ratio": 1.9431818181818181, "no_speech_prob": 0.0005883933044970036}, {"id": 1098, "seek": 766836, "start": 7669.0, "end": 7678.04, "text": " it's sum i equals one to d x i with y i this time and then it's the second row with this", "tokens": [50396, 309, 311, 2408, 741, 6915, 472, 281, 274, 2031, 741, 365, 288, 741, 341, 565, 293, 550, 309, 311, 264, 1150, 5386, 365, 341, 50848], "temperature": 0.0, "avg_logprob": -0.08678754759423526, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.002182605443522334}, {"id": 1099, "seek": 766836, "start": 7678.04, "end": 7679.5599999999995, "text": " and that's just the sum of the y's", "tokens": [50848, 293, 300, 311, 445, 264, 2408, 295, 264, 288, 311, 50924], "temperature": 0.0, "avg_logprob": -0.08678754759423526, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.002182605443522334}, {"id": 1100, "seek": 766836, "start": 7682.599999999999, "end": 7688.92, "text": " and it's our vector with two components here and we want to solve this system", "tokens": [51076, 293, 309, 311, 527, 8062, 365, 732, 6677, 510, 293, 321, 528, 281, 5039, 341, 1185, 51392], "temperature": 0.0, "avg_logprob": -0.08678754759423526, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.002182605443522334}, {"id": 1101, "seek": 766836, "start": 7690.12, "end": 7696.44, "text": " now it's only a two by two so on the one hand we could probably set this up as a", "tokens": [51452, 586, 309, 311, 787, 257, 732, 538, 732, 370, 322, 264, 472, 1011, 321, 727, 1391, 992, 341, 493, 382, 257, 51768], "temperature": 0.0, "avg_logprob": -0.08678754759423526, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.002182605443522334}, {"id": 1102, "seek": 769644, "start": 7696.919999999999, "end": 7704.36, "text": " as a row reduction an augmented matrix problem row reduce and isolate whatever we need to so that", "tokens": [50388, 382, 257, 5386, 11004, 364, 36155, 8141, 1154, 5386, 5407, 293, 25660, 2035, 321, 643, 281, 370, 300, 50760], "temperature": 0.0, "avg_logprob": -0.0984929451575646, "compression_ratio": 1.6473988439306357, "no_speech_prob": 8.480982796754688e-05}, {"id": 1103, "seek": 769644, "start": 7704.36, "end": 7713.5599999999995, "text": " we can solve for this vector c on the other hand it's only a two by two matrix and row reduction", "tokens": [50760, 321, 393, 5039, 337, 341, 8062, 269, 322, 264, 661, 1011, 309, 311, 787, 257, 732, 538, 732, 8141, 293, 5386, 11004, 51220], "temperature": 0.0, "avg_logprob": -0.0984929451575646, "compression_ratio": 1.6473988439306357, "no_speech_prob": 8.480982796754688e-05}, {"id": 1104, "seek": 769644, "start": 7713.5599999999995, "end": 7722.04, "text": " might be a little bit complicated for instance we might want to maybe divide this entry by", "tokens": [51220, 1062, 312, 257, 707, 857, 6179, 337, 5197, 321, 1062, 528, 281, 1310, 9845, 341, 8729, 538, 51644], "temperature": 0.0, "avg_logprob": -0.0984929451575646, "compression_ratio": 1.6473988439306357, "no_speech_prob": 8.480982796754688e-05}, {"id": 1105, "seek": 772204, "start": 7722.12, "end": 7727.16, "text": " the sum of the squares of all of the entries but maybe that's a problem if every single one of", "tokens": [50368, 264, 2408, 295, 264, 19368, 295, 439, 295, 264, 23041, 457, 1310, 300, 311, 257, 1154, 498, 633, 2167, 472, 295, 50620], "temperature": 0.0, "avg_logprob": -0.0643617222818096, "compression_ratio": 1.8, "no_speech_prob": 0.0038242898881435394}, {"id": 1106, "seek": 772204, "start": 7727.16, "end": 7733.16, "text": " these is zero you know it's a little bit tricky so it's very convenient to first of all find out", "tokens": [50620, 613, 307, 4018, 291, 458, 309, 311, 257, 707, 857, 12414, 370, 309, 311, 588, 10851, 281, 700, 295, 439, 915, 484, 50920], "temperature": 0.0, "avg_logprob": -0.0643617222818096, "compression_ratio": 1.8, "no_speech_prob": 0.0038242898881435394}, {"id": 1107, "seek": 772204, "start": 7733.96, "end": 7739.48, "text": " when this matrix is invertible and if this matrix is invertible we can multiply both", "tokens": [50960, 562, 341, 8141, 307, 33966, 964, 293, 498, 341, 8141, 307, 33966, 964, 321, 393, 12972, 1293, 51236], "temperature": 0.0, "avg_logprob": -0.0643617222818096, "compression_ratio": 1.8, "no_speech_prob": 0.0038242898881435394}, {"id": 1108, "seek": 772204, "start": 7739.48, "end": 7749.16, "text": " sides by the inverse so if a transpose a inverse exists and we'll figure out what that means", "tokens": [51236, 4881, 538, 264, 17340, 370, 498, 257, 25167, 257, 17340, 8198, 293, 321, 603, 2573, 484, 437, 300, 1355, 51720], "temperature": 0.0, "avg_logprob": -0.0643617222818096, "compression_ratio": 1.8, "no_speech_prob": 0.0038242898881435394}, {"id": 1109, "seek": 774916, "start": 7749.24, "end": 7753.24, "text": " we'll compute the determinant of this to determine when this inverse actually exists", "tokens": [50368, 321, 603, 14722, 264, 41296, 295, 341, 281, 6997, 562, 341, 17340, 767, 8198, 50568], "temperature": 0.0, "avg_logprob": -0.06273413526600805, "compression_ratio": 1.630952380952381, "no_speech_prob": 0.006289612501859665}, {"id": 1110, "seek": 774916, "start": 7753.88, "end": 7759.96, "text": " then we can solve this system pretty easily and it's c which is again remember our vector of", "tokens": [50600, 550, 321, 393, 5039, 341, 1185, 1238, 3612, 293, 309, 311, 269, 597, 307, 797, 1604, 527, 8062, 295, 50904], "temperature": 0.0, "avg_logprob": -0.06273413526600805, "compression_ratio": 1.630952380952381, "no_speech_prob": 0.006289612501859665}, {"id": 1111, "seek": 774916, "start": 7759.96, "end": 7771.24, "text": " unknown coefficients m and b then this equals a transpose a inverse times this vector right here", "tokens": [50904, 9841, 31994, 275, 293, 272, 550, 341, 6915, 257, 25167, 257, 17340, 1413, 341, 8062, 558, 510, 51468], "temperature": 0.0, "avg_logprob": -0.06273413526600805, "compression_ratio": 1.630952380952381, "no_speech_prob": 0.006289612501859665}, {"id": 1112, "seek": 777124, "start": 7772.2, "end": 7780.36, "text": " a transpose y which we've already computed so you know in terms of the setup it's relatively", "tokens": [50412, 257, 25167, 288, 597, 321, 600, 1217, 40610, 370, 291, 458, 294, 2115, 295, 264, 8657, 309, 311, 7226, 50820], "temperature": 0.0, "avg_logprob": -0.05600949275640794, "compression_ratio": 1.7383177570093458, "no_speech_prob": 0.0032729697413742542}, {"id": 1113, "seek": 777124, "start": 7780.36, "end": 7784.36, "text": " straightforward maybe calculating this actual inverse might be a little bit of a challenge", "tokens": [50820, 15325, 1310, 28258, 341, 3539, 17340, 1062, 312, 257, 707, 857, 295, 257, 3430, 51020], "temperature": 0.0, "avg_logprob": -0.05600949275640794, "compression_ratio": 1.7383177570093458, "no_speech_prob": 0.0032729697413742542}, {"id": 1114, "seek": 777124, "start": 7784.36, "end": 7790.76, "text": " because of the arbitrariness the generality that we're doing this in so first let's compute the", "tokens": [51020, 570, 295, 264, 14931, 5352, 1324, 264, 1337, 1860, 300, 321, 434, 884, 341, 294, 370, 700, 718, 311, 14722, 264, 51340], "temperature": 0.0, "avg_logprob": -0.05600949275640794, "compression_ratio": 1.7383177570093458, "no_speech_prob": 0.0032729697413742542}, {"id": 1115, "seek": 777124, "start": 7790.76, "end": 7798.599999999999, "text": " determinant of this matrix and that's just this times this minus this times this now because", "tokens": [51340, 41296, 295, 341, 8141, 293, 300, 311, 445, 341, 1413, 341, 3175, 341, 1413, 341, 586, 570, 51732], "temperature": 0.0, "avg_logprob": -0.05600949275640794, "compression_ratio": 1.7383177570093458, "no_speech_prob": 0.0032729697413742542}, {"id": 1116, "seek": 779860, "start": 7798.68, "end": 7805.400000000001, "text": " we're multiplying these two sums we really have to be careful about the indices remember this is a", "tokens": [50368, 321, 434, 30955, 613, 732, 34499, 321, 534, 362, 281, 312, 5026, 466, 264, 43840, 1604, 341, 307, 257, 50704], "temperature": 0.0, "avg_logprob": -0.06535720825195312, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0005702946218661964}, {"id": 1117, "seek": 779860, "start": 7805.400000000001, "end": 7812.68, "text": " sum of stuff multiplied by a sum of stuff so we can't just say that this is sum xi squared it's", "tokens": [50704, 2408, 295, 1507, 17207, 538, 257, 2408, 295, 1507, 370, 321, 393, 380, 445, 584, 300, 341, 307, 2408, 36800, 8889, 309, 311, 51068], "temperature": 0.0, "avg_logprob": -0.06535720825195312, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0005702946218661964}, {"id": 1118, "seek": 779860, "start": 7812.68, "end": 7819.0, "text": " actually there's a lot of foiling going on and this is given by d the sum of the squares", "tokens": [51068, 767, 456, 311, 257, 688, 295, 726, 4883, 516, 322, 293, 341, 307, 2212, 538, 274, 264, 2408, 295, 264, 19368, 51384], "temperature": 0.0, "avg_logprob": -0.06535720825195312, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0005702946218661964}, {"id": 1119, "seek": 779860, "start": 7821.160000000001, "end": 7826.84, "text": " that's from the first term this times this minus this times this and in order in order to make that", "tokens": [51492, 300, 311, 490, 264, 700, 1433, 341, 1413, 341, 3175, 341, 1413, 341, 293, 294, 1668, 294, 1668, 281, 652, 300, 51776], "temperature": 0.0, "avg_logprob": -0.06535720825195312, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0005702946218661964}, {"id": 1120, "seek": 782684, "start": 7826.92, "end": 7831.96, "text": " calculation a little bit more straightforward i'll rewrite one of the indices as a j instead of an", "tokens": [50368, 17108, 257, 707, 857, 544, 15325, 741, 603, 28132, 472, 295, 264, 43840, 382, 257, 361, 2602, 295, 364, 50620], "temperature": 0.0, "avg_logprob": -0.06845951571906965, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0016484183724969625}, {"id": 1121, "seek": 782684, "start": 7831.96, "end": 7838.6, "text": " i so that we don't get confused so this is xi times xj and each of these sums there's actually", "tokens": [50620, 741, 370, 300, 321, 500, 380, 483, 9019, 370, 341, 307, 36800, 1413, 2031, 73, 293, 1184, 295, 613, 34499, 456, 311, 767, 50952], "temperature": 0.0, "avg_logprob": -0.06845951571906965, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0016484183724969625}, {"id": 1122, "seek": 782684, "start": 7838.6, "end": 7845.56, "text": " two sums here one for the index i and one for the index j and they both go from one to d so this", "tokens": [50952, 732, 34499, 510, 472, 337, 264, 8186, 741, 293, 472, 337, 264, 8186, 361, 293, 436, 1293, 352, 490, 472, 281, 274, 370, 341, 51300], "temperature": 0.0, "avg_logprob": -0.06845951571906965, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0016484183724969625}, {"id": 1123, "seek": 782684, "start": 7845.56, "end": 7854.52, "text": " is the determinant and i won't do the rest of this calculation out but this i'll make a claim", "tokens": [51300, 307, 264, 41296, 293, 741, 1582, 380, 360, 264, 1472, 295, 341, 17108, 484, 457, 341, 741, 603, 652, 257, 3932, 51748], "temperature": 0.0, "avg_logprob": -0.06845951571906965, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0016484183724969625}, {"id": 1124, "seek": 785452, "start": 7854.68, "end": 7866.4400000000005, "text": " and you should check this that this equals zero if and only if xi equals xj for all i and j", "tokens": [50372, 293, 291, 820, 1520, 341, 300, 341, 6915, 4018, 498, 293, 787, 498, 36800, 6915, 2031, 73, 337, 439, 741, 293, 361, 50960], "temperature": 0.0, "avg_logprob": -0.12314809258304425, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.0019877131562680006}, {"id": 1125, "seek": 785452, "start": 7868.120000000001, "end": 7873.72, "text": " so the only time that this determinant vanishes if all of the xi data points", "tokens": [51044, 370, 264, 787, 565, 300, 341, 41296, 3161, 16423, 498, 439, 295, 264, 36800, 1412, 2793, 51324], "temperature": 0.0, "avg_logprob": -0.12314809258304425, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.0019877131562680006}, {"id": 1126, "seek": 785452, "start": 7874.280000000001, "end": 7880.200000000001, "text": " happen to be equal to each other now it takes a little bit of time to actually show that but you", "tokens": [51352, 1051, 281, 312, 2681, 281, 1184, 661, 586, 309, 2516, 257, 707, 857, 295, 565, 281, 767, 855, 300, 457, 291, 51648], "temperature": 0.0, "avg_logprob": -0.12314809258304425, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.0019877131562680006}, {"id": 1127, "seek": 788020, "start": 7880.2, "end": 7887.5599999999995, "text": " can do it and this is the only instance when this matrix is not invertible and if you're", "tokens": [50364, 393, 360, 309, 293, 341, 307, 264, 787, 5197, 562, 341, 8141, 307, 406, 33966, 964, 293, 498, 291, 434, 50732], "temperature": 0.0, "avg_logprob": -0.0521562381457257, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008576798252761364}, {"id": 1128, "seek": 788020, "start": 7887.5599999999995, "end": 7893.0, "text": " thinking about data this basically would mean that all of your data points lie along a vertical line", "tokens": [50732, 1953, 466, 1412, 341, 1936, 576, 914, 300, 439, 295, 428, 1412, 2793, 4544, 2051, 257, 9429, 1622, 51004], "temperature": 0.0, "avg_logprob": -0.0521562381457257, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008576798252761364}, {"id": 1129, "seek": 788020, "start": 7893.5599999999995, "end": 7899.08, "text": " and then it makes sense that you can't find a function of the form y equals mx plus b to fit this", "tokens": [51032, 293, 550, 309, 1669, 2020, 300, 291, 393, 380, 915, 257, 2445, 295, 264, 1254, 288, 6915, 275, 87, 1804, 272, 281, 3318, 341, 51308], "temperature": 0.0, "avg_logprob": -0.0521562381457257, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008576798252761364}, {"id": 1130, "seek": 788020, "start": 7899.72, "end": 7904.5199999999995, "text": " because the only line that'll work is a vertical line and in that case the slope is infinite so you", "tokens": [51340, 570, 264, 787, 1622, 300, 603, 589, 307, 257, 9429, 1622, 293, 294, 300, 1389, 264, 13525, 307, 13785, 370, 291, 51580], "temperature": 0.0, "avg_logprob": -0.0521562381457257, "compression_ratio": 1.808411214953271, "no_speech_prob": 0.008576798252761364}, {"id": 1131, "seek": 790452, "start": 7904.52, "end": 7910.52, "text": " won't find a solution so it makes a lot of sense why this is the only case where that happens", "tokens": [50364, 1582, 380, 915, 257, 3827, 370, 309, 1669, 257, 688, 295, 2020, 983, 341, 307, 264, 787, 1389, 689, 300, 2314, 50664], "temperature": 0.0, "avg_logprob": -0.046615542946281015, "compression_ratio": 1.8130841121495327, "no_speech_prob": 0.051836010068655014}, {"id": 1132, "seek": 790452, "start": 7910.52, "end": 7916.6, "text": " otherwise if you have even a single point that's off of this line you will be able to find some curve", "tokens": [50664, 5911, 498, 291, 362, 754, 257, 2167, 935, 300, 311, 766, 295, 341, 1622, 291, 486, 312, 1075, 281, 915, 512, 7605, 50968], "temperature": 0.0, "avg_logprob": -0.046615542946281015, "compression_ratio": 1.8130841121495327, "no_speech_prob": 0.051836010068655014}, {"id": 1133, "seek": 790452, "start": 7917.400000000001, "end": 7923.080000000001, "text": " that best approximates this data although you would think that maybe if all of these points", "tokens": [51008, 300, 1151, 8542, 1024, 341, 1412, 4878, 291, 576, 519, 300, 1310, 498, 439, 295, 613, 2793, 51292], "temperature": 0.0, "avg_logprob": -0.046615542946281015, "compression_ratio": 1.8130841121495327, "no_speech_prob": 0.051836010068655014}, {"id": 1134, "seek": 790452, "start": 7923.080000000001, "end": 7929.4800000000005, "text": " lie here and there's a data point way out here then maybe this data point is there's something wrong", "tokens": [51292, 4544, 510, 293, 456, 311, 257, 1412, 935, 636, 484, 510, 550, 1310, 341, 1412, 935, 307, 456, 311, 746, 2085, 51612], "temperature": 0.0, "avg_logprob": -0.046615542946281015, "compression_ratio": 1.8130841121495327, "no_speech_prob": 0.051836010068655014}, {"id": 1135, "seek": 792948, "start": 7929.48, "end": 7935.879999999999, "text": " with it or more investigation is needed such a point in this situation would be called an outlier", "tokens": [50364, 365, 309, 420, 544, 9627, 307, 2978, 1270, 257, 935, 294, 341, 2590, 576, 312, 1219, 364, 484, 2753, 50684], "temperature": 0.0, "avg_logprob": -0.05362621545791626, "compression_ratio": 1.695, "no_speech_prob": 0.007345267571508884}, {"id": 1136, "seek": 792948, "start": 7936.839999999999, "end": 7941.08, "text": " and I may discuss about this at some point but that's not the focus of this specific", "tokens": [50732, 293, 286, 815, 2248, 466, 341, 412, 512, 935, 457, 300, 311, 406, 264, 1879, 295, 341, 2685, 50944], "temperature": 0.0, "avg_logprob": -0.05362621545791626, "compression_ratio": 1.695, "no_speech_prob": 0.007345267571508884}, {"id": 1137, "seek": 792948, "start": 7942.36, "end": 7948.2, "text": " video right now so that's the claim so this determinant vanishes if and only if", "tokens": [51008, 960, 558, 586, 370, 300, 311, 264, 3932, 370, 341, 41296, 3161, 16423, 498, 293, 787, 498, 51300], "temperature": 0.0, "avg_logprob": -0.05362621545791626, "compression_ratio": 1.695, "no_speech_prob": 0.007345267571508884}, {"id": 1138, "seek": 792948, "start": 7948.2, "end": 7951.24, "text": " all of these data points are equal so let's assume that this does not happen", "tokens": [51300, 439, 295, 613, 1412, 2793, 366, 2681, 370, 718, 311, 6552, 300, 341, 775, 406, 1051, 51452], "temperature": 0.0, "avg_logprob": -0.05362621545791626, "compression_ratio": 1.695, "no_speech_prob": 0.007345267571508884}, {"id": 1139, "seek": 795124, "start": 7951.639999999999, "end": 7960.599999999999, "text": " assume there exists an i and a j that's not equal an i and a j which they are not equal", "tokens": [50384, 6552, 456, 8198, 364, 741, 293, 257, 361, 300, 311, 406, 2681, 364, 741, 293, 257, 361, 597, 436, 366, 406, 2681, 50832], "temperature": 0.0, "avg_logprob": -0.10495162336793665, "compression_ratio": 1.7159763313609468, "no_speech_prob": 0.004609482828527689}, {"id": 1140, "seek": 795124, "start": 7960.599999999999, "end": 7968.679999999999, "text": " and such that xi is different from xj so we just need to assume that we have at least two data points", "tokens": [50832, 293, 1270, 300, 36800, 307, 819, 490, 2031, 73, 370, 321, 445, 643, 281, 6552, 300, 321, 362, 412, 1935, 732, 1412, 2793, 51236], "temperature": 0.0, "avg_logprob": -0.10495162336793665, "compression_ratio": 1.7159763313609468, "no_speech_prob": 0.004609482828527689}, {"id": 1141, "seek": 795124, "start": 7968.679999999999, "end": 7977.48, "text": " that do not lie on um that are not the same when we make this assumption we can compute this inverse", "tokens": [51236, 300, 360, 406, 4544, 322, 1105, 300, 366, 406, 264, 912, 562, 321, 652, 341, 15302, 321, 393, 14722, 341, 17340, 51676], "temperature": 0.0, "avg_logprob": -0.10495162336793665, "compression_ratio": 1.7159763313609468, "no_speech_prob": 0.004609482828527689}, {"id": 1142, "seek": 798124, "start": 7981.32, "end": 7987.0, "text": " and this is easy because it's just two by two we maybe remember this formula we just divide by", "tokens": [50368, 293, 341, 307, 1858, 570, 309, 311, 445, 732, 538, 732, 321, 1310, 1604, 341, 8513, 321, 445, 9845, 538, 50652], "temperature": 0.0, "avg_logprob": -0.04675390845850894, "compression_ratio": 2.0425531914893615, "no_speech_prob": 0.0080610616132617}, {"id": 1143, "seek": 798124, "start": 7987.0, "end": 7993.08, "text": " the determinant we swap these two entries and we negate these so this is just one over this", "tokens": [50652, 264, 41296, 321, 18135, 613, 732, 23041, 293, 321, 2485, 473, 613, 370, 341, 307, 445, 472, 670, 341, 50956], "temperature": 0.0, "avg_logprob": -0.04675390845850894, "compression_ratio": 2.0425531914893615, "no_speech_prob": 0.0080610616132617}, {"id": 1144, "seek": 798124, "start": 7993.08, "end": 7998.76, "text": " determinant and i don't want to keep writing it so let me just write determinant of a transpose a", "tokens": [50956, 41296, 293, 741, 500, 380, 528, 281, 1066, 3579, 309, 370, 718, 385, 445, 2464, 41296, 295, 257, 25167, 257, 51240], "temperature": 0.0, "avg_logprob": -0.04675390845850894, "compression_ratio": 2.0425531914893615, "no_speech_prob": 0.0080610616132617}, {"id": 1145, "seek": 798124, "start": 7998.76, "end": 8005.48, "text": " and just remember that it equals this and then we swap these entries so this is d and here we have", "tokens": [51240, 293, 445, 1604, 300, 309, 6915, 341, 293, 550, 321, 18135, 613, 23041, 370, 341, 307, 274, 293, 510, 321, 362, 51576], "temperature": 0.0, "avg_logprob": -0.04675390845850894, "compression_ratio": 2.0425531914893615, "no_speech_prob": 0.0080610616132617}, {"id": 1146, "seek": 798124, "start": 8005.48, "end": 8010.76, "text": " some and there's lots of indices now and i don't want to conflate any of these indices with each", "tokens": [51576, 512, 293, 456, 311, 3195, 295, 43840, 586, 293, 741, 500, 380, 528, 281, 1497, 17593, 604, 295, 613, 43840, 365, 1184, 51840], "temperature": 0.0, "avg_logprob": -0.04675390845850894, "compression_ratio": 2.0425531914893615, "no_speech_prob": 0.0080610616132617}, {"id": 1147, "seek": 801076, "start": 8010.76, "end": 8019.16, "text": " other so i'm now going to call these k or something so this is k equals one to d and this is x k", "tokens": [50364, 661, 370, 741, 478, 586, 516, 281, 818, 613, 350, 420, 746, 370, 341, 307, 350, 6915, 472, 281, 274, 293, 341, 307, 2031, 350, 50784], "temperature": 0.0, "avg_logprob": -0.08488633897569445, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.004198594018816948}, {"id": 1148, "seek": 801076, "start": 8019.16, "end": 8033.0, "text": " squared and here we have minus some x k oops k goes from one to d and this is minus k from one", "tokens": [50784, 8889, 293, 510, 321, 362, 3175, 512, 2031, 350, 34166, 350, 1709, 490, 472, 281, 274, 293, 341, 307, 3175, 350, 490, 472, 51476], "temperature": 0.0, "avg_logprob": -0.08488633897569445, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.004198594018816948}, {"id": 1149, "seek": 803300, "start": 8033.96, "end": 8037.48, "text": " to d and this here is the inverse of our matrix", "tokens": [50412, 281, 274, 293, 341, 510, 307, 264, 17340, 295, 527, 8141, 50588], "temperature": 0.0, "avg_logprob": -0.05780707153619504, "compression_ratio": 1.7754237288135593, "no_speech_prob": 0.0067968242801725864}, {"id": 1150, "seek": 803300, "start": 8040.12, "end": 8043.64, "text": " and then what we have to do is you have to take this complicated expression", "tokens": [50720, 293, 550, 437, 321, 362, 281, 360, 307, 291, 362, 281, 747, 341, 6179, 6114, 50896], "temperature": 0.0, "avg_logprob": -0.05780707153619504, "compression_ratio": 1.7754237288135593, "no_speech_prob": 0.0067968242801725864}, {"id": 1151, "seek": 803300, "start": 8043.64, "end": 8049.8, "text": " and multiply it by this vector and once we do that we'll find out what the values of m and b are", "tokens": [50896, 293, 12972, 309, 538, 341, 8062, 293, 1564, 321, 360, 300, 321, 603, 915, 484, 437, 264, 4190, 295, 275, 293, 272, 366, 51204], "temperature": 0.0, "avg_logprob": -0.05780707153619504, "compression_ratio": 1.7754237288135593, "no_speech_prob": 0.0067968242801725864}, {"id": 1152, "seek": 803300, "start": 8049.8, "end": 8056.2, "text": " so we'll need again a little bit more board space to do that so here i've rewritten our problem and", "tokens": [51204, 370, 321, 603, 643, 797, 257, 707, 857, 544, 3150, 1901, 281, 360, 300, 370, 510, 741, 600, 319, 26859, 527, 1154, 293, 51524], "temperature": 0.0, "avg_logprob": -0.05780707153619504, "compression_ratio": 1.7754237288135593, "no_speech_prob": 0.0067968242801725864}, {"id": 1153, "seek": 803300, "start": 8056.2, "end": 8062.52, "text": " remember we're trying to solve for the coefficients m and b for linear regression for an arbitrary", "tokens": [51524, 1604, 321, 434, 1382, 281, 5039, 337, 264, 31994, 275, 293, 272, 337, 8213, 24590, 337, 364, 23211, 51840], "temperature": 0.0, "avg_logprob": -0.05780707153619504, "compression_ratio": 1.7754237288135593, "no_speech_prob": 0.0067968242801725864}, {"id": 1154, "seek": 806252, "start": 8062.52, "end": 8069.400000000001, "text": " data set and we computed that a transpose a as a matrix equals one over the determinant of that", "tokens": [50364, 1412, 992, 293, 321, 40610, 300, 257, 25167, 257, 382, 257, 8141, 6915, 472, 670, 264, 41296, 295, 300, 50708], "temperature": 0.0, "avg_logprob": -0.10124885792634924, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.0010321985464543104}, {"id": 1155, "seek": 806252, "start": 8069.400000000001, "end": 8085.080000000001, "text": " matrix which we found was d times that's a d times xi squared minus let's use the indices i and j here", "tokens": [50708, 8141, 597, 321, 1352, 390, 274, 1413, 300, 311, 257, 274, 1413, 36800, 8889, 3175, 718, 311, 764, 264, 43840, 741, 293, 361, 510, 51492], "temperature": 0.0, "avg_logprob": -0.10124885792634924, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.0010321985464543104}, {"id": 1156, "seek": 808508, "start": 8085.08, "end": 8092.84, "text": " xi times xj so this is one over the determinant times our matrix which was", "tokens": [50364, 36800, 1413, 2031, 73, 370, 341, 307, 472, 670, 264, 41296, 1413, 527, 8141, 597, 390, 50752], "temperature": 0.0, "avg_logprob": -0.09236888885498047, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0012065703049302101}, {"id": 1157, "seek": 808508, "start": 8095.64, "end": 8098.84, "text": " to not conflate these indices let's call these indices k", "tokens": [50892, 281, 406, 1497, 17593, 613, 43840, 718, 311, 818, 613, 43840, 350, 51052], "temperature": 0.0, "avg_logprob": -0.09236888885498047, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0012065703049302101}, {"id": 1158, "seek": 808508, "start": 8099.64, "end": 8106.6, "text": " this was i believe d here for the inverse on the bottom right we had sum of the squares", "tokens": [51092, 341, 390, 741, 1697, 274, 510, 337, 264, 17340, 322, 264, 2767, 558, 321, 632, 2408, 295, 264, 19368, 51440], "temperature": 0.0, "avg_logprob": -0.09236888885498047, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0012065703049302101}, {"id": 1159, "seek": 810660, "start": 8107.320000000001, "end": 8118.68, "text": " x k squared minus k x k i'll stop writing from one to d it's just getting a little bit annoying", "tokens": [50400, 2031, 350, 8889, 3175, 350, 2031, 350, 741, 603, 1590, 3579, 490, 472, 281, 274, 309, 311, 445, 1242, 257, 707, 857, 11304, 50968], "temperature": 0.0, "avg_logprob": -0.14568682817312387, "compression_ratio": 1.488, "no_speech_prob": 0.007121237460523844}, {"id": 1160, "seek": 810660, "start": 8118.68, "end": 8128.120000000001, "text": " minus sum k x k but i'll always write the the subscript that we're summing over so this is", "tokens": [50968, 3175, 2408, 350, 2031, 350, 457, 741, 603, 1009, 2464, 264, 264, 2325, 662, 300, 321, 434, 2408, 2810, 670, 370, 341, 307, 51440], "temperature": 0.0, "avg_logprob": -0.14568682817312387, "compression_ratio": 1.488, "no_speech_prob": 0.007121237460523844}, {"id": 1161, "seek": 812812, "start": 8128.2, "end": 8131.88, "text": " a transpose a inverse now a transpose y", "tokens": [50368, 257, 25167, 257, 17340, 586, 257, 25167, 288, 50552], "temperature": 0.0, "avg_logprob": -0.07584577340346116, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.0219463761895895}, {"id": 1162, "seek": 812812, "start": 8135.88, "end": 8142.04, "text": " well i can't remember if i wrote it but if you remember what a transpose looks like", "tokens": [50752, 731, 741, 393, 380, 1604, 498, 741, 4114, 309, 457, 498, 291, 1604, 437, 257, 25167, 1542, 411, 51060], "temperature": 0.0, "avg_logprob": -0.07584577340346116, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.0219463761895895}, {"id": 1163, "seek": 812812, "start": 8142.84, "end": 8148.68, "text": " oh we computed a transpose y yeah now i remember but the thing is that we'll have to be careful", "tokens": [51100, 1954, 321, 40610, 257, 25167, 288, 1338, 586, 741, 1604, 457, 264, 551, 307, 300, 321, 603, 362, 281, 312, 5026, 51392], "temperature": 0.0, "avg_logprob": -0.07584577340346116, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.0219463761895895}, {"id": 1164, "seek": 812812, "start": 8148.68, "end": 8154.44, "text": " about indices because i believe we use the indices i there as well and we've already used i we've", "tokens": [51392, 466, 43840, 570, 741, 1697, 321, 764, 264, 43840, 741, 456, 382, 731, 293, 321, 600, 1217, 1143, 741, 321, 600, 51680], "temperature": 0.0, "avg_logprob": -0.07584577340346116, "compression_ratio": 1.770949720670391, "no_speech_prob": 0.0219463761895895}, {"id": 1165, "seek": 815444, "start": 8154.44, "end": 8163.48, "text": " already used j we've already used k so let me call them l so this was sum x l y l l goes from one to", "tokens": [50364, 1217, 1143, 361, 321, 600, 1217, 1143, 350, 370, 718, 385, 818, 552, 287, 370, 341, 390, 2408, 2031, 287, 288, 287, 287, 1709, 490, 472, 281, 50816], "temperature": 0.0, "avg_logprob": -0.09270189310375013, "compression_ratio": 1.6457142857142857, "no_speech_prob": 0.0010484256781637669}, {"id": 1166, "seek": 815444, "start": 8163.48, "end": 8171.5599999999995, "text": " d and on the bottom part of this uh two component vector it was just the sum of the y's", "tokens": [50816, 274, 293, 322, 264, 2767, 644, 295, 341, 2232, 732, 6542, 8062, 309, 390, 445, 264, 2408, 295, 264, 288, 311, 51220], "temperature": 0.0, "avg_logprob": -0.09270189310375013, "compression_ratio": 1.6457142857142857, "no_speech_prob": 0.0010484256781637669}, {"id": 1167, "seek": 815444, "start": 8174.44, "end": 8180.759999999999, "text": " okay so all of this mess is the left hand side of this expression let's multiply these two matrices", "tokens": [51364, 1392, 370, 439, 295, 341, 2082, 307, 264, 1411, 1011, 1252, 295, 341, 6114, 718, 311, 12972, 613, 732, 32284, 51680], "temperature": 0.0, "avg_logprob": -0.09270189310375013, "compression_ratio": 1.6457142857142857, "no_speech_prob": 0.0010484256781637669}, {"id": 1168, "seek": 818076, "start": 8180.76, "end": 8190.92, "text": " and see what we get um so let's just do that then we get and let's keep this determinant factor here", "tokens": [50364, 293, 536, 437, 321, 483, 1105, 370, 718, 311, 445, 360, 300, 550, 321, 483, 293, 718, 311, 1066, 341, 41296, 5952, 510, 50872], "temperature": 0.0, "avg_logprob": -0.09326601850575414, "compression_ratio": 1.5460526315789473, "no_speech_prob": 0.00024156103609129786}, {"id": 1169, "seek": 818076, "start": 8195.56, "end": 8200.12, "text": " and i'm writing all of this because you'll see that it relates to something you may have seen", "tokens": [51104, 293, 741, 478, 3579, 439, 295, 341, 570, 291, 603, 536, 300, 309, 16155, 281, 746, 291, 815, 362, 1612, 51332], "temperature": 0.0, "avg_logprob": -0.09326601850575414, "compression_ratio": 1.5460526315789473, "no_speech_prob": 0.00024156103609129786}, {"id": 1170, "seek": 818076, "start": 8200.68, "end": 8203.32, "text": " in a course on statistics or probability", "tokens": [51360, 294, 257, 1164, 322, 12523, 420, 8482, 51492], "temperature": 0.0, "avg_logprob": -0.09326601850575414, "compression_ratio": 1.5460526315789473, "no_speech_prob": 0.00024156103609129786}, {"id": 1171, "seek": 820332, "start": 8204.199999999999, "end": 8214.84, "text": " so then we multiply d by this and we multiply this by this i'm just going to do this all out", "tokens": [50408, 370, 550, 321, 12972, 274, 538, 341, 293, 321, 12972, 341, 538, 341, 741, 478, 445, 516, 281, 360, 341, 439, 484, 50940], "temperature": 0.0, "avg_logprob": -0.09952128255689466, "compression_ratio": 1.7160493827160495, "no_speech_prob": 0.0015487074851989746}, {"id": 1172, "seek": 820332, "start": 8214.84, "end": 8223.56, "text": " d times this sum uh over it's just l one index x l y l minus this expression there's two sums", "tokens": [50940, 274, 1413, 341, 2408, 2232, 670, 309, 311, 445, 287, 472, 8186, 2031, 287, 288, 287, 3175, 341, 6114, 456, 311, 732, 34499, 51376], "temperature": 0.0, "avg_logprob": -0.09952128255689466, "compression_ratio": 1.7160493827160495, "no_speech_prob": 0.0015487074851989746}, {"id": 1173, "seek": 820332, "start": 8223.56, "end": 8232.199999999999, "text": " here now k and l x k y l that's the first component of this vector and the second component", "tokens": [51376, 510, 586, 350, 293, 287, 2031, 350, 288, 287, 300, 311, 264, 700, 6542, 295, 341, 8062, 293, 264, 1150, 6542, 51808], "temperature": 0.0, "avg_logprob": -0.09952128255689466, "compression_ratio": 1.7160493827160495, "no_speech_prob": 0.0015487074851989746}, {"id": 1174, "seek": 823220, "start": 8232.2, "end": 8237.880000000001, "text": " is this times this now we have a bunch of stuff going on here um plus this times this so let me", "tokens": [50364, 307, 341, 1413, 341, 586, 321, 362, 257, 3840, 295, 1507, 516, 322, 510, 1105, 1804, 341, 1413, 341, 370, 718, 385, 50648], "temperature": 0.0, "avg_logprob": -0.045270152581043735, "compression_ratio": 1.722543352601156, "no_speech_prob": 0.004981894977390766}, {"id": 1175, "seek": 823220, "start": 8237.880000000001, "end": 8247.640000000001, "text": " write the plus on the left this becomes sum over k and l and x k squared which we can write as x k", "tokens": [50648, 2464, 264, 1804, 322, 264, 1411, 341, 3643, 2408, 670, 350, 293, 287, 293, 2031, 350, 8889, 597, 321, 393, 2464, 382, 2031, 350, 51136], "temperature": 0.0, "avg_logprob": -0.045270152581043735, "compression_ratio": 1.722543352601156, "no_speech_prob": 0.004981894977390766}, {"id": 1176, "seek": 823220, "start": 8247.640000000001, "end": 8256.04, "text": " you know let's just write it x k squared y l minus x k now this is a little bit different right because", "tokens": [51136, 291, 458, 718, 311, 445, 2464, 309, 2031, 350, 8889, 288, 287, 3175, 2031, 350, 586, 341, 307, 257, 707, 857, 819, 558, 570, 51556], "temperature": 0.0, "avg_logprob": -0.045270152581043735, "compression_ratio": 1.722543352601156, "no_speech_prob": 0.004981894977390766}, {"id": 1177, "seek": 825604, "start": 8256.12, "end": 8261.640000000001, "text": " we have two sums k and l and this time it's not x k squared it's x k x l", "tokens": [50368, 321, 362, 732, 34499, 350, 293, 287, 293, 341, 565, 309, 311, 406, 2031, 350, 8889, 309, 311, 2031, 350, 2031, 287, 50644], "temperature": 0.0, "avg_logprob": -0.07834048020212274, "compression_ratio": 1.5419847328244274, "no_speech_prob": 0.002631609560921788}, {"id": 1178, "seek": 825604, "start": 8264.04, "end": 8268.2, "text": " y l and this is what equals m b", "tokens": [50764, 288, 287, 293, 341, 307, 437, 6915, 275, 272, 50972], "temperature": 0.0, "avg_logprob": -0.07834048020212274, "compression_ratio": 1.5419847328244274, "no_speech_prob": 0.002631609560921788}, {"id": 1179, "seek": 825604, "start": 8272.36, "end": 8281.320000000002, "text": " now so this actually solves the whole problem so we know that m equals this first expression here", "tokens": [51180, 586, 370, 341, 767, 39890, 264, 1379, 1154, 370, 321, 458, 300, 275, 6915, 341, 700, 6114, 510, 51628], "temperature": 0.0, "avg_logprob": -0.07834048020212274, "compression_ratio": 1.5419847328244274, "no_speech_prob": 0.002631609560921788}, {"id": 1180, "seek": 828132, "start": 8281.32, "end": 8288.6, "text": " divided by this determinant and the y intercept equals this expression here divided by that determinant", "tokens": [50364, 6666, 538, 341, 41296, 293, 264, 288, 24700, 6915, 341, 6114, 510, 6666, 538, 300, 41296, 50728], "temperature": 0.0, "avg_logprob": -0.06628550932957576, "compression_ratio": 1.7194244604316546, "no_speech_prob": 0.0014550111955031753}, {"id": 1181, "seek": 828132, "start": 8290.76, "end": 8294.92, "text": " now does it equal anything um familiar if we look at m itself", "tokens": [50836, 586, 775, 309, 2681, 1340, 1105, 4963, 498, 321, 574, 412, 275, 2564, 51044], "temperature": 0.0, "avg_logprob": -0.06628550932957576, "compression_ratio": 1.7194244604316546, "no_speech_prob": 0.0014550111955031753}, {"id": 1182, "seek": 828132, "start": 8298.44, "end": 8305.56, "text": " and we divide the numerator and the denominator by d we get that m equals", "tokens": [51220, 293, 321, 9845, 264, 30380, 293, 264, 20687, 538, 274, 321, 483, 300, 275, 6915, 51576], "temperature": 0.0, "avg_logprob": -0.06628550932957576, "compression_ratio": 1.7194244604316546, "no_speech_prob": 0.0014550111955031753}, {"id": 1183, "seek": 830556, "start": 8305.56, "end": 8312.279999999999, "text": " sum over l x l y l minus", "tokens": [50364, 2408, 670, 287, 2031, 287, 288, 287, 3175, 50700], "temperature": 0.0, "avg_logprob": -0.20330626876265914, "compression_ratio": 1.11864406779661, "no_speech_prob": 0.013019764795899391}, {"id": 1184, "seek": 830556, "start": 8314.359999999999, "end": 8322.76, "text": " one over d sum k and l x k y l divided by", "tokens": [50804, 472, 670, 274, 2408, 350, 293, 287, 2031, 350, 288, 287, 6666, 538, 51224], "temperature": 0.0, "avg_logprob": -0.20330626876265914, "compression_ratio": 1.11864406779661, "no_speech_prob": 0.013019764795899391}, {"id": 1185, "seek": 832276, "start": 8323.48, "end": 8334.36, "text": " x i squared minus i j x i x j", "tokens": [50400, 2031, 741, 8889, 3175, 741, 361, 2031, 741, 2031, 361, 50944], "temperature": 0.0, "avg_logprob": -0.1263064168534189, "compression_ratio": 1.4965986394557824, "no_speech_prob": 0.0014550290070474148}, {"id": 1186, "seek": 832276, "start": 8337.32, "end": 8344.76, "text": " now each of these expressions um actually show up in statistics quite often and they're actually", "tokens": [51092, 586, 1184, 295, 613, 15277, 1105, 767, 855, 493, 294, 12523, 1596, 2049, 293, 436, 434, 767, 51464], "temperature": 0.0, "avg_logprob": -0.1263064168534189, "compression_ratio": 1.4965986394557824, "no_speech_prob": 0.0014550290070474148}, {"id": 1187, "seek": 832276, "start": 8344.76, "end": 8351.08, "text": " given special names we call the let's do the denominator first since this one's only involves", "tokens": [51464, 2212, 2121, 5288, 321, 818, 264, 718, 311, 360, 264, 20687, 700, 1670, 341, 472, 311, 787, 11626, 51780], "temperature": 0.0, "avg_logprob": -0.1263064168534189, "compression_ratio": 1.4965986394557824, "no_speech_prob": 0.0014550290070474148}, {"id": 1188, "seek": 835108, "start": 8351.08, "end": 8358.2, "text": " a single data set this is called the variance of the data set x", "tokens": [50364, 257, 2167, 1412, 992, 341, 307, 1219, 264, 21977, 295, 264, 1412, 992, 2031, 50720], "temperature": 0.0, "avg_logprob": -0.07982813301732984, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.0003150340053252876}, {"id": 1189, "seek": 835108, "start": 8360.76, "end": 8367.08, "text": " where x vector equals x one through x d and it's also written as var oops var of x", "tokens": [50848, 689, 2031, 8062, 6915, 2031, 472, 807, 2031, 274, 293, 309, 311, 611, 3720, 382, 1374, 34166, 1374, 295, 2031, 51164], "temperature": 0.0, "avg_logprob": -0.07982813301732984, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.0003150340053252876}, {"id": 1190, "seek": 835108, "start": 8370.44, "end": 8376.6, "text": " and this just equals by definition the sum of the x i squares minus x i j", "tokens": [51332, 293, 341, 445, 6915, 538, 7123, 264, 2408, 295, 264, 2031, 741, 19368, 3175, 2031, 741, 361, 51640], "temperature": 0.0, "avg_logprob": -0.07982813301732984, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.0003150340053252876}, {"id": 1191, "seek": 837660, "start": 8377.56, "end": 8384.44, "text": " x i x j so that's what the variance is by definition and the covariance", "tokens": [50412, 2031, 741, 2031, 361, 370, 300, 311, 437, 264, 21977, 307, 538, 7123, 293, 264, 49851, 719, 50756], "temperature": 0.0, "avg_logprob": -0.16306465725566066, "compression_ratio": 1.3762376237623761, "no_speech_prob": 0.0012842270080000162}, {"id": 1192, "seek": 837660, "start": 8390.44, "end": 8397.56, "text": " um is involves two data sets our x's and our y's so it's of x and y", "tokens": [51056, 1105, 307, 11626, 732, 1412, 6352, 527, 2031, 311, 293, 527, 288, 311, 370, 309, 311, 295, 2031, 293, 288, 51412], "temperature": 0.0, "avg_logprob": -0.16306465725566066, "compression_ratio": 1.3762376237623761, "no_speech_prob": 0.0012842270080000162}, {"id": 1193, "seek": 839756, "start": 8398.119999999999, "end": 8401.8, "text": " and this is defined by", "tokens": [50392, 293, 341, 307, 7642, 538, 50576], "temperature": 0.0, "avg_logprob": -0.1014852523803711, "compression_ratio": 1.7261146496815287, "no_speech_prob": 0.0046093096025288105}, {"id": 1194, "seek": 839756, "start": 8404.039999999999, "end": 8407.48, "text": " i think you know people have different notation i don't know what the notation is i don't really", "tokens": [50688, 741, 519, 291, 458, 561, 362, 819, 24657, 741, 500, 380, 458, 437, 264, 24657, 307, 741, 500, 380, 534, 50860], "temperature": 0.0, "avg_logprob": -0.1014852523803711, "compression_ratio": 1.7261146496815287, "no_speech_prob": 0.0046093096025288105}, {"id": 1195, "seek": 839756, "start": 8408.6, "end": 8419.8, "text": " care um but it's this expression on top so this is sum l x l y l minus one over d", "tokens": [50916, 1127, 1105, 457, 309, 311, 341, 6114, 322, 1192, 370, 341, 307, 2408, 287, 2031, 287, 288, 287, 3175, 472, 670, 274, 51476], "temperature": 0.0, "avg_logprob": -0.1014852523803711, "compression_ratio": 1.7261146496815287, "no_speech_prob": 0.0046093096025288105}, {"id": 1196, "seek": 839756, "start": 8419.8, "end": 8423.88, "text": " oh did i forget a one over d i did this should have a one over d here", "tokens": [51476, 1954, 630, 741, 2870, 257, 472, 670, 274, 741, 630, 341, 820, 362, 257, 472, 670, 274, 510, 51680], "temperature": 0.0, "avg_logprob": -0.1014852523803711, "compression_ratio": 1.7261146496815287, "no_speech_prob": 0.0046093096025288105}, {"id": 1197, "seek": 842756, "start": 8427.64, "end": 8428.519999999999, "text": " minus one over d", "tokens": [50368, 3175, 472, 670, 274, 50412], "temperature": 0.0, "avg_logprob": -0.11169475023863745, "compression_ratio": 1.5743243243243243, "no_speech_prob": 0.0002531510835979134}, {"id": 1198, "seek": 842756, "start": 8431.16, "end": 8440.68, "text": " x k y l that's an l subscript on that last y", "tokens": [50544, 2031, 350, 288, 287, 300, 311, 364, 287, 2325, 662, 322, 300, 1036, 288, 51020], "temperature": 0.0, "avg_logprob": -0.11169475023863745, "compression_ratio": 1.5743243243243243, "no_speech_prob": 0.0002531510835979134}, {"id": 1199, "seek": 842756, "start": 8443.56, "end": 8449.32, "text": " so we have that our linear regression problem actually derives for us the variance and the", "tokens": [51164, 370, 321, 362, 300, 527, 8213, 24590, 1154, 767, 1163, 1539, 337, 505, 264, 21977, 293, 264, 51452], "temperature": 0.0, "avg_logprob": -0.11169475023863745, "compression_ratio": 1.5743243243243243, "no_speech_prob": 0.0002531510835979134}, {"id": 1200, "seek": 842756, "start": 8449.32, "end": 8454.359999999999, "text": " covariance of our data set and we also have explicit expressions if we wanted to", "tokens": [51452, 49851, 719, 295, 527, 1412, 992, 293, 321, 611, 362, 13691, 15277, 498, 321, 1415, 281, 51704], "temperature": 0.0, "avg_logprob": -0.11169475023863745, "compression_ratio": 1.5743243243243243, "no_speech_prob": 0.0002531510835979134}, {"id": 1201, "seek": 845436, "start": 8454.6, "end": 8461.560000000001, "text": " um for the least squares uh solution if we want to fit data to a straight line curve", "tokens": [50376, 1105, 337, 264, 1935, 19368, 2232, 3827, 498, 321, 528, 281, 3318, 1412, 281, 257, 2997, 1622, 7605, 50724], "temperature": 0.0, "avg_logprob": -0.08391319251641995, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.0021155630238354206}, {"id": 1202, "seek": 845436, "start": 8463.08, "end": 8470.52, "text": " in the next video we won't apply this general result because i don't think anybody would", "tokens": [50800, 294, 264, 958, 960, 321, 1582, 380, 3079, 341, 2674, 1874, 570, 741, 500, 380, 519, 4472, 576, 51172], "temperature": 0.0, "avg_logprob": -0.08391319251641995, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.0021155630238354206}, {"id": 1203, "seek": 845436, "start": 8470.52, "end": 8475.0, "text": " expect you to memorize something like this instead we'll set up the problem in an explicit example", "tokens": [51172, 2066, 291, 281, 27478, 746, 411, 341, 2602, 321, 603, 992, 493, 264, 1154, 294, 364, 13691, 1365, 51396], "temperature": 0.0, "avg_logprob": -0.08391319251641995, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.0021155630238354206}, {"id": 1204, "seek": 845436, "start": 8475.560000000001, "end": 8481.08, "text": " redo the whole procedure just so you get a feel for it with specific numbers involved and um", "tokens": [51424, 29956, 264, 1379, 10747, 445, 370, 291, 483, 257, 841, 337, 309, 365, 2685, 3547, 3288, 293, 1105, 51700], "temperature": 0.0, "avg_logprob": -0.08391319251641995, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.0021155630238354206}, {"id": 1205, "seek": 848108, "start": 8481.64, "end": 8485.16, "text": " and how you would actually compute the inverse without all of these sums or anything like that", "tokens": [50392, 293, 577, 291, 576, 767, 14722, 264, 17340, 1553, 439, 295, 613, 34499, 420, 1340, 411, 300, 50568], "temperature": 0.0, "avg_logprob": -0.07564101108284883, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.0002611858944874257}, {"id": 1206, "seek": 848108, "start": 8485.16, "end": 8489.96, "text": " if you're just given a relatively small data set if you're given relatively large data sets", "tokens": [50568, 498, 291, 434, 445, 2212, 257, 7226, 1359, 1412, 992, 498, 291, 434, 2212, 7226, 2416, 1412, 6352, 50808], "temperature": 0.0, "avg_logprob": -0.07564101108284883, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.0002611858944874257}, {"id": 1207, "seek": 848108, "start": 8489.96, "end": 8494.28, "text": " then you might want to go through this approach or you might have to program something that does it", "tokens": [50808, 550, 291, 1062, 528, 281, 352, 807, 341, 3109, 420, 291, 1062, 362, 281, 1461, 746, 300, 775, 309, 51024], "temperature": 0.0, "avg_logprob": -0.07564101108284883, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.0002611858944874257}, {"id": 1208, "seek": 848108, "start": 8494.28, "end": 8503.8, "text": " for you so let's actually do an explicit example using actual numbers um here's a a graph and here's", "tokens": [51024, 337, 291, 370, 718, 311, 767, 360, 364, 13691, 1365, 1228, 3539, 3547, 1105, 510, 311, 257, 257, 4295, 293, 510, 311, 51500], "temperature": 0.0, "avg_logprob": -0.07564101108284883, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.0002611858944874257}, {"id": 1209, "seek": 850380, "start": 8503.8, "end": 8513.72, "text": " some data points um the x axis is the horizontal axis and the y axis is the vertical one and let's", "tokens": [50364, 512, 1412, 2793, 1105, 264, 2031, 10298, 307, 264, 12750, 10298, 293, 264, 288, 10298, 307, 264, 9429, 472, 293, 718, 311, 50860], "temperature": 0.0, "avg_logprob": -0.059012968246250935, "compression_ratio": 1.6573033707865168, "no_speech_prob": 0.002182680182158947}, {"id": 1210, "seek": 850380, "start": 8513.72, "end": 8521.0, "text": " just use a unit grid so that the distance between any two of these grid lines has length one so the", "tokens": [50860, 445, 764, 257, 4985, 10748, 370, 300, 264, 4560, 1296, 604, 732, 295, 613, 10748, 3876, 575, 4641, 472, 370, 264, 51224], "temperature": 0.0, "avg_logprob": -0.059012968246250935, "compression_ratio": 1.6573033707865168, "no_speech_prob": 0.002182680182158947}, {"id": 1211, "seek": 850380, "start": 8521.0, "end": 8529.4, "text": " data that we're given uh according to this plot is um we have our data vector and we want to try", "tokens": [51224, 1412, 300, 321, 434, 2212, 2232, 4650, 281, 341, 7542, 307, 1105, 321, 362, 527, 1412, 8062, 293, 321, 528, 281, 853, 51644], "temperature": 0.0, "avg_logprob": -0.059012968246250935, "compression_ratio": 1.6573033707865168, "no_speech_prob": 0.002182680182158947}, {"id": 1212, "seek": 852940, "start": 8529.4, "end": 8537.4, "text": " to fit to a line of the form y equals mx plus b so let's write down our matrix a and our matrix a", "tokens": [50364, 281, 3318, 281, 257, 1622, 295, 264, 1254, 288, 6915, 275, 87, 1804, 272, 370, 718, 311, 2464, 760, 527, 8141, 257, 293, 527, 8141, 257, 50764], "temperature": 0.0, "avg_logprob": -0.08321609252538437, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.011330782435834408}, {"id": 1213, "seek": 852940, "start": 8537.4, "end": 8546.119999999999, "text": " remember consists of all of the x's if we write it in this form and ones all along the right column", "tokens": [50764, 1604, 14689, 295, 439, 295, 264, 2031, 311, 498, 321, 2464, 309, 294, 341, 1254, 293, 2306, 439, 2051, 264, 558, 7738, 51200], "temperature": 0.0, "avg_logprob": -0.08321609252538437, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.011330782435834408}, {"id": 1214, "seek": 852940, "start": 8546.119999999999, "end": 8552.92, "text": " so how many data points do we have so what's d one two three four five six seven three four five", "tokens": [51200, 370, 577, 867, 1412, 2793, 360, 321, 362, 370, 437, 311, 274, 472, 732, 1045, 1451, 1732, 2309, 3407, 1045, 1451, 1732, 51540], "temperature": 0.0, "avg_logprob": -0.08321609252538437, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.011330782435834408}, {"id": 1215, "seek": 855292, "start": 8552.92, "end": 8561.08, "text": " six seven so you should have seven um entries in this column in the columns of a and let's go", "tokens": [50364, 2309, 3407, 370, 291, 820, 362, 3407, 1105, 23041, 294, 341, 7738, 294, 264, 13766, 295, 257, 293, 718, 311, 352, 50772], "temperature": 0.0, "avg_logprob": -0.058296428637558156, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.009411992505192757}, {"id": 1216, "seek": 855292, "start": 8561.08, "end": 8566.36, "text": " in order from left to right filling in all of these entries the order that you go in doesn't", "tokens": [50772, 294, 1668, 490, 1411, 281, 558, 10623, 294, 439, 295, 613, 23041, 264, 1668, 300, 291, 352, 294, 1177, 380, 51036], "temperature": 0.0, "avg_logprob": -0.058296428637558156, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.009411992505192757}, {"id": 1217, "seek": 855292, "start": 8566.36, "end": 8571.24, "text": " really matter as long as you're consistent with the value with the corresponding values of y that", "tokens": [51036, 534, 1871, 382, 938, 382, 291, 434, 8398, 365, 264, 2158, 365, 264, 11760, 4190, 295, 288, 300, 51280], "temperature": 0.0, "avg_logprob": -0.058296428637558156, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.009411992505192757}, {"id": 1218, "seek": 855292, "start": 8571.24, "end": 8579.8, "text": " you use so in this case the first value of x is at x equals negative four negative three negative", "tokens": [51280, 291, 764, 370, 294, 341, 1389, 264, 700, 2158, 295, 2031, 307, 412, 2031, 6915, 3671, 1451, 3671, 1045, 3671, 51708], "temperature": 0.0, "avg_logprob": -0.058296428637558156, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.009411992505192757}, {"id": 1219, "seek": 857980, "start": 8579.8, "end": 8585.88, "text": " one zero one three four i've chosen it to be somewhat symmetric just for convenience of the", "tokens": [50364, 472, 4018, 472, 1045, 1451, 741, 600, 8614, 309, 281, 312, 8344, 32330, 445, 337, 19283, 295, 264, 50668], "temperature": 0.0, "avg_logprob": -0.07372262114185398, "compression_ratio": 1.7133333333333334, "no_speech_prob": 0.0023966182488948107}, {"id": 1220, "seek": 857980, "start": 8586.759999999998, "end": 8595.32, "text": " computation so it's negative four negative three negative one zero and the x values positive x", "tokens": [50712, 24903, 370, 309, 311, 3671, 1451, 3671, 1045, 3671, 472, 4018, 293, 264, 2031, 4190, 3353, 2031, 51140], "temperature": 0.0, "avg_logprob": -0.07372262114185398, "compression_ratio": 1.7133333333333334, "no_speech_prob": 0.0023966182488948107}, {"id": 1221, "seek": 857980, "start": 8595.32, "end": 8601.64, "text": " values are one three and four so this is the matrix a and the vector y", "tokens": [51140, 4190, 366, 472, 1045, 293, 1451, 370, 341, 307, 264, 8141, 257, 293, 264, 8062, 288, 51456], "temperature": 0.0, "avg_logprob": -0.07372262114185398, "compression_ratio": 1.7133333333333334, "no_speech_prob": 0.0023966182488948107}, {"id": 1222, "seek": 860164, "start": 8602.199999999999, "end": 8612.359999999999, "text": " is the corresponding values of y so for x equals negative four the value of y is at negative one", "tokens": [50392, 307, 264, 11760, 4190, 295, 288, 370, 337, 2031, 6915, 3671, 1451, 264, 2158, 295, 288, 307, 412, 3671, 472, 50900], "temperature": 0.0, "avg_logprob": -0.09759569949791079, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.048852160573005676}, {"id": 1223, "seek": 860164, "start": 8614.199999999999, "end": 8620.439999999999, "text": " again there are d there are d entries here as well the next one is zero then it's one zero one", "tokens": [50992, 797, 456, 366, 274, 456, 366, 274, 23041, 510, 382, 731, 264, 958, 472, 307, 4018, 550, 309, 311, 472, 4018, 472, 51304], "temperature": 0.0, "avg_logprob": -0.09759569949791079, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.048852160573005676}, {"id": 1224, "seek": 860164, "start": 8622.76, "end": 8625.48, "text": " and the last one the last two are two and four", "tokens": [51420, 293, 264, 1036, 472, 264, 1036, 732, 366, 732, 293, 1451, 51556], "temperature": 0.0, "avg_logprob": -0.09759569949791079, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.048852160573005676}, {"id": 1225, "seek": 862548, "start": 8626.359999999999, "end": 8630.76, "text": " so this is all of the information that we need", "tokens": [50408, 370, 341, 307, 439, 295, 264, 1589, 300, 321, 643, 50628], "temperature": 0.0, "avg_logprob": -0.07235203006050804, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.0033764238469302654}, {"id": 1226, "seek": 862548, "start": 8633.32, "end": 8635.08, "text": " and if we compute a transpose a", "tokens": [50756, 293, 498, 321, 14722, 257, 25167, 257, 50844], "temperature": 0.0, "avg_logprob": -0.07235203006050804, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.0033764238469302654}, {"id": 1227, "seek": 862548, "start": 8637.72, "end": 8642.6, "text": " what do we get so i won't write out a transpose just take the transpose of this", "tokens": [50976, 437, 360, 321, 483, 370, 741, 1582, 380, 2464, 484, 257, 25167, 445, 747, 264, 25167, 295, 341, 51220], "temperature": 0.0, "avg_logprob": -0.07235203006050804, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.0033764238469302654}, {"id": 1228, "seek": 862548, "start": 8643.24, "end": 8647.24, "text": " then we know that we're taking the dot product of this vector with itself to get the top left", "tokens": [51252, 550, 321, 458, 300, 321, 434, 1940, 264, 5893, 1674, 295, 341, 8062, 365, 2564, 281, 483, 264, 1192, 1411, 51452], "temperature": 0.0, "avg_logprob": -0.07235203006050804, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.0033764238469302654}, {"id": 1229, "seek": 862548, "start": 8647.24, "end": 8653.4, "text": " entry here so what's the dot product of this with itself it's four squared times two so it's", "tokens": [51452, 8729, 510, 370, 437, 311, 264, 5893, 1674, 295, 341, 365, 2564, 309, 311, 1451, 8889, 1413, 732, 370, 309, 311, 51760], "temperature": 0.0, "avg_logprob": -0.07235203006050804, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.0033764238469302654}, {"id": 1230, "seek": 865340, "start": 8653.4, "end": 8662.199999999999, "text": " 16 times two which is 32 nine plus nine which is 18 so 32 plus 18 which is 50 plus two", "tokens": [50364, 3165, 1413, 732, 597, 307, 8858, 4949, 1804, 4949, 597, 307, 2443, 370, 8858, 1804, 2443, 597, 307, 2625, 1804, 732, 50804], "temperature": 0.0, "avg_logprob": -0.0693173925560641, "compression_ratio": 1.6854460093896713, "no_speech_prob": 0.000732152780983597}, {"id": 1231, "seek": 865340, "start": 8663.24, "end": 8670.92, "text": " so it's 52 on the top left the dot product of this with this is zero because all the negatives", "tokens": [50856, 370, 309, 311, 18079, 322, 264, 1192, 1411, 264, 5893, 1674, 295, 341, 365, 341, 307, 4018, 570, 439, 264, 40019, 51240], "temperature": 0.0, "avg_logprob": -0.0693173925560641, "compression_ratio": 1.6854460093896713, "no_speech_prob": 0.000732152780983597}, {"id": 1232, "seek": 865340, "start": 8670.92, "end": 8675.88, "text": " cancel out all of the positive entries again i chose that specifically so that this happens", "tokens": [51240, 10373, 484, 439, 295, 264, 3353, 23041, 797, 741, 5111, 300, 4682, 370, 300, 341, 2314, 51488], "temperature": 0.0, "avg_logprob": -0.0693173925560641, "compression_ratio": 1.6854460093896713, "no_speech_prob": 0.000732152780983597}, {"id": 1233, "seek": 865340, "start": 8675.88, "end": 8680.76, "text": " so that computing the inverse is much easier and we can immediately solve this system", "tokens": [51488, 370, 300, 15866, 264, 17340, 307, 709, 3571, 293, 321, 393, 4258, 5039, 341, 1185, 51732], "temperature": 0.0, "avg_logprob": -0.0693173925560641, "compression_ratio": 1.6854460093896713, "no_speech_prob": 0.000732152780983597}, {"id": 1234, "seek": 868076, "start": 8681.16, "end": 8690.2, "text": " now a transpose acting on y oh sorry the bottom entry is um is is just d itself and d is seven", "tokens": [50384, 586, 257, 25167, 6577, 322, 288, 1954, 2597, 264, 2767, 8729, 307, 1105, 307, 307, 445, 274, 2564, 293, 274, 307, 3407, 50836], "temperature": 0.0, "avg_logprob": -0.11885923579119254, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0012447995832189918}, {"id": 1235, "seek": 868076, "start": 8691.48, "end": 8692.76, "text": " now a transpose y", "tokens": [50900, 586, 257, 25167, 288, 50964], "temperature": 0.0, "avg_logprob": -0.11885923579119254, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0012447995832189918}, {"id": 1236, "seek": 868076, "start": 8695.72, "end": 8701.16, "text": " is this times this plus so negative four times negative one plus negative three times zero", "tokens": [51112, 307, 341, 1413, 341, 1804, 370, 3671, 1451, 1413, 3671, 472, 1804, 3671, 1045, 1413, 4018, 51384], "temperature": 0.0, "avg_logprob": -0.11885923579119254, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0012447995832189918}, {"id": 1237, "seek": 868076, "start": 8701.16, "end": 8706.04, "text": " plus negative one times one and so on so negative four with negative one gives you four", "tokens": [51384, 1804, 3671, 472, 1413, 472, 293, 370, 322, 370, 3671, 1451, 365, 3671, 472, 2709, 291, 1451, 51628], "temperature": 0.0, "avg_logprob": -0.11885923579119254, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.0012447995832189918}, {"id": 1238, "seek": 870604, "start": 8707.0, "end": 8712.28, "text": " that with zero doesn't change anything so we still have four then that's negative one from four so", "tokens": [50412, 300, 365, 4018, 1177, 380, 1319, 1340, 370, 321, 920, 362, 1451, 550, 300, 311, 3671, 472, 490, 1451, 370, 50676], "temperature": 0.0, "avg_logprob": -0.12163103739420573, "compression_ratio": 1.6, "no_speech_prob": 0.0013249866897240281}, {"id": 1239, "seek": 870604, "start": 8712.28, "end": 8720.44, "text": " that gives us three leftover this one brings it back up to four then this six brings it up to 10", "tokens": [50676, 300, 2709, 505, 1045, 27373, 341, 472, 5607, 309, 646, 493, 281, 1451, 550, 341, 2309, 5607, 309, 493, 281, 1266, 51084], "temperature": 0.0, "avg_logprob": -0.12163103739420573, "compression_ratio": 1.6, "no_speech_prob": 0.0013249866897240281}, {"id": 1240, "seek": 870604, "start": 8721.0, "end": 8724.52, "text": " and this is 16 so we get 26 in the first entry", "tokens": [51112, 293, 341, 307, 3165, 370, 321, 483, 7551, 294, 264, 700, 8729, 51288], "temperature": 0.0, "avg_logprob": -0.12163103739420573, "compression_ratio": 1.6, "no_speech_prob": 0.0013249866897240281}, {"id": 1241, "seek": 870604, "start": 8728.52, "end": 8730.52, "text": " maybe you have faster ways of doing this i don't know", "tokens": [51488, 1310, 291, 362, 4663, 2098, 295, 884, 341, 741, 500, 380, 458, 51588], "temperature": 0.0, "avg_logprob": -0.12163103739420573, "compression_ratio": 1.6, "no_speech_prob": 0.0013249866897240281}, {"id": 1242, "seek": 873052, "start": 8731.4, "end": 8737.08, "text": " um so then uh a transpose if we take the second row here of a transpose", "tokens": [50408, 1105, 370, 550, 2232, 257, 25167, 498, 321, 747, 264, 1150, 5386, 510, 295, 257, 25167, 50692], "temperature": 0.0, "avg_logprob": -0.13921607090876653, "compression_ratio": 1.5568862275449102, "no_speech_prob": 0.0005703014903701842}, {"id": 1243, "seek": 873052, "start": 8737.720000000001, "end": 8743.32, "text": " which is this column of ones and we dot it with this these cancel these add so we get seven", "tokens": [50724, 597, 307, 341, 7738, 295, 2306, 293, 321, 5893, 309, 365, 341, 613, 10373, 613, 909, 370, 321, 483, 3407, 51004], "temperature": 0.0, "avg_logprob": -0.13921607090876653, "compression_ratio": 1.5568862275449102, "no_speech_prob": 0.0005703014903701842}, {"id": 1244, "seek": 873052, "start": 8745.880000000001, "end": 8754.84, "text": " now solving this system is pretty straightforward um right this is 52007 in one side 267 we just", "tokens": [51132, 586, 12606, 341, 1185, 307, 1238, 15325, 1105, 558, 341, 307, 1025, 7629, 22, 294, 472, 1252, 7551, 22, 321, 445, 51580], "temperature": 0.0, "avg_logprob": -0.13921607090876653, "compression_ratio": 1.5568862275449102, "no_speech_prob": 0.0005703014903701842}, {"id": 1245, "seek": 875484, "start": 8754.84, "end": 8761.56, "text": " have to divide everything by 50 the first row by 52 the second row by seven and we immediately arrive", "tokens": [50364, 362, 281, 9845, 1203, 538, 2625, 264, 700, 5386, 538, 18079, 264, 1150, 5386, 538, 3407, 293, 321, 4258, 8881, 50700], "temperature": 0.0, "avg_logprob": -0.05792755465353689, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.007345408201217651}, {"id": 1246, "seek": 875484, "start": 8761.56, "end": 8774.92, "text": " at the vector mb our vector of unknowns is one half and one so this tells us that the best fit", "tokens": [50700, 412, 264, 8062, 275, 65, 527, 8062, 295, 46048, 307, 472, 1922, 293, 472, 370, 341, 5112, 505, 300, 264, 1151, 3318, 51368], "temperature": 0.0, "avg_logprob": -0.05792755465353689, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.007345408201217651}, {"id": 1247, "seek": 875484, "start": 8774.92, "end": 8782.2, "text": " approximation that minimizes the vertical distance squared between between that line", "tokens": [51368, 28023, 300, 4464, 5660, 264, 9429, 4560, 8889, 1296, 1296, 300, 1622, 51732], "temperature": 0.0, "avg_logprob": -0.05792755465353689, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.007345408201217651}, {"id": 1248, "seek": 878220, "start": 8783.0, "end": 8790.28, "text": " and all of these data points has slope one half and y intercept one so the line that we", "tokens": [50404, 293, 439, 295, 613, 1412, 2793, 575, 13525, 472, 1922, 293, 288, 24700, 472, 370, 264, 1622, 300, 321, 50768], "temperature": 0.0, "avg_logprob": -0.07208966099938681, "compression_ratio": 1.8324324324324324, "no_speech_prob": 0.0037069490645080805}, {"id": 1249, "seek": 878220, "start": 8790.28, "end": 8796.36, "text": " want to fit this to is one half x plus one and if we try to sketch what that graph looks like", "tokens": [50768, 528, 281, 3318, 341, 281, 307, 472, 1922, 2031, 1804, 472, 293, 498, 321, 853, 281, 12325, 437, 300, 4295, 1542, 411, 51072], "temperature": 0.0, "avg_logprob": -0.07208966099938681, "compression_ratio": 1.8324324324324324, "no_speech_prob": 0.0037069490645080805}, {"id": 1250, "seek": 878220, "start": 8796.36, "end": 8799.720000000001, "text": " we know that it goes through one so let's include that point here", "tokens": [51072, 321, 458, 300, 309, 1709, 807, 472, 370, 718, 311, 4090, 300, 935, 510, 51240], "temperature": 0.0, "avg_logprob": -0.07208966099938681, "compression_ratio": 1.8324324324324324, "no_speech_prob": 0.0037069490645080805}, {"id": 1251, "seek": 878220, "start": 8802.36, "end": 8808.12, "text": " and it has slope one half so when it gets to this when it moves two units over it moves one", "tokens": [51372, 293, 309, 575, 13525, 472, 1922, 370, 562, 309, 2170, 281, 341, 562, 309, 6067, 732, 6815, 670, 309, 6067, 472, 51660], "temperature": 0.0, "avg_logprob": -0.07208966099938681, "compression_ratio": 1.8324324324324324, "no_speech_prob": 0.0037069490645080805}, {"id": 1252, "seek": 880812, "start": 8808.12, "end": 8814.2, "text": " unit up so here's the next data point we connect these two with a straight line and moving over", "tokens": [50364, 4985, 493, 370, 510, 311, 264, 958, 1412, 935, 321, 1745, 613, 732, 365, 257, 2997, 1622, 293, 2684, 670, 50668], "temperature": 0.0, "avg_logprob": -0.07165303856435448, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0030752550810575485}, {"id": 1253, "seek": 880812, "start": 8814.2, "end": 8819.400000000001, "text": " two units to the right one unit up we connect that with a straight line and we keep doing this", "tokens": [50668, 732, 6815, 281, 264, 558, 472, 4985, 493, 321, 1745, 300, 365, 257, 2997, 1622, 293, 321, 1066, 884, 341, 50928], "temperature": 0.0, "avg_logprob": -0.07165303856435448, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0030752550810575485}, {"id": 1254, "seek": 880812, "start": 8819.400000000001, "end": 8824.28, "text": " i mean this is how i draw um if i don't have um a ruler or anything on hand", "tokens": [50928, 741, 914, 341, 307, 577, 741, 2642, 1105, 498, 741, 500, 380, 362, 1105, 257, 19661, 420, 1340, 322, 1011, 51172], "temperature": 0.0, "avg_logprob": -0.07165303856435448, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0030752550810575485}, {"id": 1255, "seek": 880812, "start": 8826.12, "end": 8827.720000000001, "text": " i would try to draw something like this", "tokens": [51264, 741, 576, 853, 281, 2642, 746, 411, 341, 51344], "temperature": 0.0, "avg_logprob": -0.07165303856435448, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0030752550810575485}, {"id": 1256, "seek": 880812, "start": 8831.720000000001, "end": 8836.84, "text": " so this straight line here if you notice it happens to actually go through one of the data points", "tokens": [51544, 370, 341, 2997, 1622, 510, 498, 291, 3449, 309, 2314, 281, 767, 352, 807, 472, 295, 264, 1412, 2793, 51800], "temperature": 0.0, "avg_logprob": -0.07165303856435448, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0030752550810575485}, {"id": 1257, "seek": 883684, "start": 8837.8, "end": 8843.08, "text": " that might not happen but as you can see it doesn't go through most of them but it's a pretty", "tokens": [50412, 300, 1062, 406, 1051, 457, 382, 291, 393, 536, 309, 1177, 380, 352, 807, 881, 295, 552, 457, 309, 311, 257, 1238, 50676], "temperature": 0.0, "avg_logprob": -0.06400940093127164, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0008830172591842711}, {"id": 1258, "seek": 883684, "start": 8843.08, "end": 8849.880000000001, "text": " reasonable approximation to this data set so this is how you would actually solve a least squares", "tokens": [50676, 10585, 28023, 281, 341, 1412, 992, 370, 341, 307, 577, 291, 576, 767, 5039, 257, 1935, 19368, 51016], "temperature": 0.0, "avg_logprob": -0.06400940093127164, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0008830172591842711}, {"id": 1259, "seek": 883684, "start": 8849.880000000001, "end": 8857.48, "text": " problem specifically in the context of a fitting data to a linear curve or rather an affine curve", "tokens": [51016, 1154, 4682, 294, 264, 4319, 295, 257, 15669, 1412, 281, 257, 8213, 7605, 420, 2831, 364, 2096, 533, 7605, 51396], "temperature": 0.0, "avg_logprob": -0.06400940093127164, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0008830172591842711}, {"id": 1260, "seek": 883684, "start": 8857.48, "end": 8864.84, "text": " to be technically correct and this is how you do it in such an example in the next few videos", "tokens": [51396, 281, 312, 12120, 3006, 293, 341, 307, 577, 291, 360, 309, 294, 1270, 364, 1365, 294, 264, 958, 1326, 2145, 51764], "temperature": 0.0, "avg_logprob": -0.06400940093127164, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0008830172591842711}, {"id": 1261, "seek": 886484, "start": 8864.84, "end": 8869.960000000001, "text": " we're going to generalize the idea of linear regression just in terms of a straight line", "tokens": [50364, 321, 434, 516, 281, 2674, 1125, 264, 1558, 295, 8213, 24590, 445, 294, 2115, 295, 257, 2997, 1622, 50620], "temperature": 0.0, "avg_logprob": -0.06258920301874, "compression_ratio": 1.864864864864865, "no_speech_prob": 0.006487616337835789}, {"id": 1262, "seek": 886484, "start": 8869.960000000001, "end": 8876.76, "text": " data fitting to linear regression in the sense that you can data fit your data to sort of any", "tokens": [50620, 1412, 15669, 281, 8213, 24590, 294, 264, 2020, 300, 291, 393, 1412, 3318, 428, 1412, 281, 1333, 295, 604, 50960], "temperature": 0.0, "avg_logprob": -0.06258920301874, "compression_ratio": 1.864864864864865, "no_speech_prob": 0.006487616337835789}, {"id": 1263, "seek": 886484, "start": 8876.76, "end": 8882.76, "text": " curve almost any curve and the way that we're going to do this is we're going to set up", "tokens": [50960, 7605, 1920, 604, 7605, 293, 264, 636, 300, 321, 434, 516, 281, 360, 341, 307, 321, 434, 516, 281, 992, 493, 51260], "temperature": 0.0, "avg_logprob": -0.06258920301874, "compression_ratio": 1.864864864864865, "no_speech_prob": 0.006487616337835789}, {"id": 1264, "seek": 886484, "start": 8884.28, "end": 8893.0, "text": " some notation and we're going to let f1 through fk be linearly independent", "tokens": [51336, 512, 24657, 293, 321, 434, 516, 281, 718, 283, 16, 807, 283, 74, 312, 43586, 6695, 51772], "temperature": 0.0, "avg_logprob": -0.06258920301874, "compression_ratio": 1.864864864864865, "no_speech_prob": 0.006487616337835789}, {"id": 1265, "seek": 889484, "start": 8895.72, "end": 8899.8, "text": " functions", "tokens": [50408, 6828, 50612], "temperature": 0.0, "avg_logprob": -0.11596250534057617, "compression_ratio": 1.4351145038167938, "no_speech_prob": 0.0005033267079852521}, {"id": 1266, "seek": 889484, "start": 8903.32, "end": 8908.12, "text": " and what i mean by this is it's the same definition of linear independence of vectors", "tokens": [50788, 293, 437, 741, 914, 538, 341, 307, 309, 311, 264, 912, 7123, 295, 8213, 14640, 295, 18875, 51028], "temperature": 0.0, "avg_logprob": -0.11596250534057617, "compression_ratio": 1.4351145038167938, "no_speech_prob": 0.0005033267079852521}, {"id": 1267, "seek": 889484, "start": 8908.12, "end": 8914.44, "text": " namely that um there does not exist a set of numbers a1 through ak such that when you sum up", "tokens": [51028, 20926, 300, 1105, 456, 775, 406, 2514, 257, 992, 295, 3547, 257, 16, 807, 9308, 1270, 300, 562, 291, 2408, 493, 51344], "temperature": 0.0, "avg_logprob": -0.11596250534057617, "compression_ratio": 1.4351145038167938, "no_speech_prob": 0.0005033267079852521}, {"id": 1268, "seek": 891444, "start": 8915.16, "end": 8919.880000000001, "text": " um so let me just say this i.e there does not exist", "tokens": [50400, 1105, 370, 718, 385, 445, 584, 341, 741, 13, 68, 456, 775, 406, 2514, 50636], "temperature": 0.0, "avg_logprob": -0.14726642120716182, "compression_ratio": 1.4144144144144144, "no_speech_prob": 0.006903639063239098}, {"id": 1269, "seek": 891444, "start": 8926.04, "end": 8930.04, "text": " a set of numbers a1 through ak", "tokens": [50944, 257, 992, 295, 3547, 257, 16, 807, 9308, 51144], "temperature": 0.0, "avg_logprob": -0.14726642120716182, "compression_ratio": 1.4144144144144144, "no_speech_prob": 0.006903639063239098}, {"id": 1270, "seek": 891444, "start": 8932.92, "end": 8937.16, "text": " so these are real numbers or complex if these are complex valued functions", "tokens": [51288, 370, 613, 366, 957, 3547, 420, 3997, 498, 613, 366, 3997, 22608, 6828, 51500], "temperature": 0.0, "avg_logprob": -0.14726642120716182, "compression_ratio": 1.4144144144144144, "no_speech_prob": 0.006903639063239098}, {"id": 1271, "seek": 893716, "start": 8937.24, "end": 8946.039999999999, "text": " such that the sum of ai fi equals zero as a function", "tokens": [50368, 1270, 300, 264, 2408, 295, 9783, 15848, 6915, 4018, 382, 257, 2445, 50808], "temperature": 0.0, "avg_logprob": -0.13181036313374836, "compression_ratio": 1.50920245398773, "no_speech_prob": 0.0008040693355724216}, {"id": 1272, "seek": 893716, "start": 8949.88, "end": 8955.32, "text": " so um let's just say the domain of our function is whatever we need to specify it to be for", "tokens": [51000, 370, 1105, 718, 311, 445, 584, 264, 9274, 295, 527, 2445, 307, 2035, 321, 643, 281, 16500, 309, 281, 312, 337, 51272], "temperature": 0.0, "avg_logprob": -0.13181036313374836, "compression_ratio": 1.50920245398773, "no_speech_prob": 0.0008040693355724216}, {"id": 1273, "seek": 893716, "start": 8955.32, "end": 8962.28, "text": " example the the whole real line or maybe an interval or something like that so and imagine your given", "tokens": [51272, 1365, 264, 264, 1379, 957, 1622, 420, 1310, 364, 15035, 420, 746, 411, 300, 370, 293, 3811, 428, 2212, 51620], "temperature": 0.0, "avg_logprob": -0.13181036313374836, "compression_ratio": 1.50920245398773, "no_speech_prob": 0.0008040693355724216}, {"id": 1274, "seek": 896228, "start": 8962.28, "end": 8972.12, "text": " data points and let's say the given data points again we're going to use our x and y variables", "tokens": [50364, 1412, 2793, 293, 718, 311, 584, 264, 2212, 1412, 2793, 797, 321, 434, 516, 281, 764, 527, 2031, 293, 288, 9102, 50856], "temperature": 0.0, "avg_logprob": -0.05883412134079706, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.004198456648737192}, {"id": 1275, "seek": 896228, "start": 8972.12, "end": 8979.16, "text": " so your input is x and your output is y and you have a whole list of data x1 x2", "tokens": [50856, 370, 428, 4846, 307, 2031, 293, 428, 5598, 307, 288, 293, 291, 362, 257, 1379, 1329, 295, 1412, 2031, 16, 2031, 17, 51208], "temperature": 0.0, "avg_logprob": -0.05883412134079706, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.004198456648737192}, {"id": 1276, "seek": 896228, "start": 8980.92, "end": 8983.880000000001, "text": " up to xd where d is the number of data points", "tokens": [51296, 493, 281, 2031, 67, 689, 274, 307, 264, 1230, 295, 1412, 2793, 51444], "temperature": 0.0, "avg_logprob": -0.05883412134079706, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.004198456648737192}, {"id": 1277, "seek": 898388, "start": 8984.839999999998, "end": 8992.759999999998, "text": " and you want to fit these points to these functions so in other words your hope", "tokens": [50412, 293, 291, 528, 281, 3318, 613, 2793, 281, 613, 6828, 370, 294, 661, 2283, 428, 1454, 50808], "temperature": 0.0, "avg_logprob": -0.1169116552485976, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.017710447311401367}, {"id": 1278, "seek": 898388, "start": 8994.759999999998, "end": 9008.279999999999, "text": " is to somehow fit y1 equals to a1 f1 of x1 plus dot dot dot ak f", "tokens": [50908, 307, 281, 6063, 3318, 288, 16, 6915, 281, 257, 16, 283, 16, 295, 2031, 16, 1804, 5893, 5893, 5893, 9308, 283, 51584], "temperature": 0.0, "avg_logprob": -0.1169116552485976, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.017710447311401367}, {"id": 1279, "seek": 900828, "start": 9008.28, "end": 9012.36, "text": " k x1", "tokens": [50364, 350, 2031, 16, 50568], "temperature": 0.0, "avg_logprob": -0.12686972618103026, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.01590350829064846}, {"id": 1280, "seek": 900828, "start": 9014.76, "end": 9019.0, "text": " and not only do you want this but you also want this to hold for all of your data points", "tokens": [50688, 293, 406, 787, 360, 291, 528, 341, 457, 291, 611, 528, 341, 281, 1797, 337, 439, 295, 428, 1412, 2793, 50900], "temperature": 0.0, "avg_logprob": -0.12686972618103026, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.01590350829064846}, {"id": 1281, "seek": 900828, "start": 9019.0, "end": 9035.960000000001, "text": " so up to yd a1 f1 xd now plus dot dot dot ak fk xd so this is your hope but if d", "tokens": [50900, 370, 493, 281, 288, 67, 257, 16, 283, 16, 2031, 67, 586, 1804, 5893, 5893, 5893, 9308, 283, 74, 2031, 67, 370, 341, 307, 428, 1454, 457, 498, 274, 51748], "temperature": 0.0, "avg_logprob": -0.12686972618103026, "compression_ratio": 1.5398230088495575, "no_speech_prob": 0.01590350829064846}, {"id": 1282, "seek": 903596, "start": 9035.96, "end": 9043.16, "text": " is much much greater than k then this is unlikely", "tokens": [50364, 307, 709, 709, 5044, 813, 350, 550, 341, 307, 17518, 50724], "temperature": 0.0, "avg_logprob": -0.08572145536834118, "compression_ratio": 1.5, "no_speech_prob": 0.0011694608256220818}, {"id": 1283, "seek": 903596, "start": 9050.439999999999, "end": 9054.599999999999, "text": " it's usually impossible to find coefficients that fit all of these data", "tokens": [51088, 309, 311, 2673, 6243, 281, 915, 31994, 300, 3318, 439, 295, 613, 1412, 51296], "temperature": 0.0, "avg_logprob": -0.08572145536834118, "compression_ratio": 1.5, "no_speech_prob": 0.0011694608256220818}, {"id": 1284, "seek": 903596, "start": 9057.64, "end": 9064.359999999999, "text": " so before moving on let's try to rewrite this expression in a linear way so that we can relate", "tokens": [51448, 370, 949, 2684, 322, 718, 311, 853, 281, 28132, 341, 6114, 294, 257, 8213, 636, 370, 300, 321, 393, 10961, 51784], "temperature": 0.0, "avg_logprob": -0.08572145536834118, "compression_ratio": 1.5, "no_speech_prob": 0.0011694608256220818}, {"id": 1285, "seek": 906436, "start": 9064.36, "end": 9071.720000000001, "text": " it to the linear regression problem we solved earlier so set y to be this vector here so let's", "tokens": [50364, 309, 281, 264, 8213, 24590, 1154, 321, 13041, 3071, 370, 992, 288, 281, 312, 341, 8062, 510, 370, 718, 311, 50732], "temperature": 0.0, "avg_logprob": -0.07081907382909802, "compression_ratio": 1.6820809248554913, "no_speech_prob": 0.0047547221183776855}, {"id": 1286, "seek": 906436, "start": 9071.720000000001, "end": 9080.6, "text": " call this the vector y and what you notice here is that each of these numbers so f1 x1 is a specific", "tokens": [50732, 818, 341, 264, 8062, 288, 293, 437, 291, 3449, 510, 307, 300, 1184, 295, 613, 3547, 370, 283, 16, 2031, 16, 307, 257, 2685, 51176], "temperature": 0.0, "avg_logprob": -0.07081907382909802, "compression_ratio": 1.6820809248554913, "no_speech_prob": 0.0047547221183776855}, {"id": 1287, "seek": 906436, "start": 9080.6, "end": 9085.640000000001, "text": " number we're taking a linear combination of these numbers with coefficients coming from the a's", "tokens": [51176, 1230, 321, 434, 1940, 257, 8213, 6562, 295, 613, 3547, 365, 31994, 1348, 490, 264, 257, 311, 51428], "temperature": 0.0, "avg_logprob": -0.07081907382909802, "compression_ratio": 1.6820809248554913, "no_speech_prob": 0.0047547221183776855}, {"id": 1288, "seek": 908564, "start": 9086.279999999999, "end": 9096.439999999999, "text": " so this looks like the vector y1 down to yd this is what this equation is represented by", "tokens": [50396, 370, 341, 1542, 411, 264, 8062, 288, 16, 760, 281, 288, 67, 341, 307, 437, 341, 5367, 307, 10379, 538, 50904], "temperature": 0.0, "avg_logprob": -0.04108774895761527, "compression_ratio": 1.4375, "no_speech_prob": 0.05919988080859184}, {"id": 1289, "seek": 908564, "start": 9096.439999999999, "end": 9106.279999999999, "text": " a matrix whose entries are given by these values of f so f1 x1 in the first column and up to yd", "tokens": [50904, 257, 8141, 6104, 23041, 366, 2212, 538, 613, 4190, 295, 283, 370, 283, 16, 2031, 16, 294, 264, 700, 7738, 293, 493, 281, 288, 67, 51396], "temperature": 0.0, "avg_logprob": -0.04108774895761527, "compression_ratio": 1.4375, "no_speech_prob": 0.05919988080859184}, {"id": 1290, "seek": 910628, "start": 9106.28, "end": 9117.0, "text": " the coefficient front of a1 is f1 xd and then this goes up to fk still x1 so x1 is the first row", "tokens": [50364, 264, 17619, 1868, 295, 257, 16, 307, 283, 16, 2031, 67, 293, 550, 341, 1709, 493, 281, 283, 74, 920, 2031, 16, 370, 2031, 16, 307, 264, 700, 5386, 50900], "temperature": 0.0, "avg_logprob": -0.06583261887232462, "compression_ratio": 1.5038167938931297, "no_speech_prob": 0.007576488424092531}, {"id": 1291, "seek": 910628, "start": 9117.800000000001, "end": 9130.2, "text": " and down to fk xd in the last row and this matrix is applied to the vector of unknowns a1 through ak", "tokens": [50940, 293, 760, 281, 283, 74, 2031, 67, 294, 264, 1036, 5386, 293, 341, 8141, 307, 6456, 281, 264, 8062, 295, 46048, 257, 16, 807, 9308, 51560], "temperature": 0.0, "avg_logprob": -0.06583261887232462, "compression_ratio": 1.5038167938931297, "no_speech_prob": 0.007576488424092531}, {"id": 1292, "seek": 913020, "start": 9131.16, "end": 9141.400000000001, "text": " so this is again of the form y equals a and let's call it xc instead of x to not confuse ourselves", "tokens": [50412, 370, 341, 307, 797, 295, 264, 1254, 288, 6915, 257, 293, 718, 311, 818, 309, 2031, 66, 2602, 295, 2031, 281, 406, 28584, 4175, 50924], "temperature": 0.0, "avg_logprob": -0.0848721853444274, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.0008040700922720134}, {"id": 1293, "seek": 913020, "start": 9141.400000000001, "end": 9146.44, "text": " with the variable x that we've used for our data so in general it's impossible to solve this", "tokens": [50924, 365, 264, 7006, 2031, 300, 321, 600, 1143, 337, 527, 1412, 370, 294, 2674, 309, 311, 6243, 281, 5039, 341, 51176], "temperature": 0.0, "avg_logprob": -0.0848721853444274, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.0008040700922720134}, {"id": 1294, "seek": 913020, "start": 9148.76, "end": 9157.08, "text": " and the way that we would like to solve this is again a least square solution so a least squares", "tokens": [51292, 293, 264, 636, 300, 321, 576, 411, 281, 5039, 341, 307, 797, 257, 1935, 3732, 3827, 370, 257, 1935, 19368, 51708], "temperature": 0.0, "avg_logprob": -0.0848721853444274, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.0008040700922720134}, {"id": 1295, "seek": 916020, "start": 9160.44, "end": 9162.28, "text": " solution or approximation to", "tokens": [50376, 3827, 420, 28023, 281, 50468], "temperature": 0.0, "avg_logprob": -0.10716599225997925, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.009707116521894932}, {"id": 1296, "seek": 916020, "start": 9165.720000000001, "end": 9170.68, "text": " this is a actual solution to", "tokens": [50640, 341, 307, 257, 3539, 3827, 281, 50888], "temperature": 0.0, "avg_logprob": -0.10716599225997925, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.009707116521894932}, {"id": 1297, "seek": 916020, "start": 9174.52, "end": 9184.52, "text": " a transpose y equals a transpose ax so just apply a transpose on the left on both sides", "tokens": [51080, 257, 25167, 288, 6915, 257, 25167, 6360, 370, 445, 3079, 257, 25167, 322, 264, 1411, 322, 1293, 4881, 51580], "temperature": 0.0, "avg_logprob": -0.10716599225997925, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.009707116521894932}, {"id": 1298, "seek": 918452, "start": 9184.68, "end": 9191.0, "text": " and this is generally what we're going to solve for and this will be our this will be fitting our", "tokens": [50372, 293, 341, 307, 5101, 437, 321, 434, 516, 281, 5039, 337, 293, 341, 486, 312, 527, 341, 486, 312, 15669, 527, 50688], "temperature": 0.0, "avg_logprob": -0.07614473455092487, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.011685587465763092}, {"id": 1299, "seek": 918452, "start": 9191.560000000001, "end": 9198.2, "text": " data to the set of functions defined by these but there are a few restrictions that have to be made", "tokens": [50716, 1412, 281, 264, 992, 295, 6828, 7642, 538, 613, 457, 456, 366, 257, 1326, 14191, 300, 362, 281, 312, 1027, 51048], "temperature": 0.0, "avg_logprob": -0.07614473455092487, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.011685587465763092}, {"id": 1300, "seek": 918452, "start": 9198.84, "end": 9204.6, "text": " for example the first maybe obvious restriction if you think about it is that these coefficients", "tokens": [51080, 337, 1365, 264, 700, 1310, 6322, 29529, 498, 291, 519, 466, 309, 307, 300, 613, 31994, 51368], "temperature": 0.0, "avg_logprob": -0.07614473455092487, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.011685587465763092}, {"id": 1301, "seek": 918452, "start": 9204.6, "end": 9210.6, "text": " should be independent and independent in the sense that I can't take any one of these coefficients", "tokens": [51368, 820, 312, 6695, 293, 6695, 294, 264, 2020, 300, 286, 393, 380, 747, 604, 472, 295, 613, 31994, 51668], "temperature": 0.0, "avg_logprob": -0.07614473455092487, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.011685587465763092}, {"id": 1302, "seek": 921060, "start": 9210.6, "end": 9215.0, "text": " and sort of re-express it in terms of the others I'm not talking about linear independence I'm just", "tokens": [50364, 293, 1333, 295, 319, 12, 3121, 11637, 309, 294, 2115, 295, 264, 2357, 286, 478, 406, 1417, 466, 8213, 14640, 286, 478, 445, 50584], "temperature": 0.0, "avg_logprob": -0.09494342360385628, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.004468067083507776}, {"id": 1303, "seek": 921060, "start": 9215.0, "end": 9226.84, "text": " talking about independence so we assume the coefficients are independent and this just means", "tokens": [50584, 1417, 466, 14640, 370, 321, 6552, 264, 31994, 366, 6695, 293, 341, 445, 1355, 51176], "temperature": 0.0, "avg_logprob": -0.09494342360385628, "compression_ratio": 1.5867768595041323, "no_speech_prob": 0.004468067083507776}, {"id": 1304, "seek": 922684, "start": 9227.64, "end": 9230.36, "text": " i.e. there does not exist an i", "tokens": [50404, 741, 13, 68, 13, 456, 775, 406, 2514, 364, 741, 50540], "temperature": 0.0, "avg_logprob": -0.24112499171289906, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.16447784006595612}, {"id": 1305, "seek": 922684, "start": 9236.76, "end": 9241.4, "text": " from one through k such that", "tokens": [50860, 490, 472, 807, 350, 1270, 300, 51092], "temperature": 0.0, "avg_logprob": -0.24112499171289906, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.16447784006595612}, {"id": 1306, "seek": 922684, "start": 9244.44, "end": 9246.44, "text": " a i is determined by", "tokens": [51244, 257, 741, 307, 9540, 538, 51344], "temperature": 0.0, "avg_logprob": -0.24112499171289906, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.16447784006595612}, {"id": 1307, "seek": 924644, "start": 9246.92, "end": 9258.44, "text": " a j by all the other a j's so let's just say the set of a j's where j is now", "tokens": [50388, 257, 361, 538, 439, 264, 661, 257, 361, 311, 370, 718, 311, 445, 584, 264, 992, 295, 257, 361, 311, 689, 361, 307, 586, 50964], "temperature": 0.0, "avg_logprob": -0.09980562941668784, "compression_ratio": 1.6219512195121952, "no_speech_prob": 0.007576652802526951}, {"id": 1308, "seek": 924644, "start": 9259.560000000001, "end": 9266.04, "text": " from one excluding i so I read a little hat over that to exclude i up to k so in other words in", "tokens": [51020, 490, 472, 49999, 741, 370, 286, 1401, 257, 707, 2385, 670, 300, 281, 33536, 741, 493, 281, 350, 370, 294, 661, 2283, 294, 51344], "temperature": 0.0, "avg_logprob": -0.09980562941668784, "compression_ratio": 1.6219512195121952, "no_speech_prob": 0.007576652802526951}, {"id": 1309, "seek": 924644, "start": 9266.04, "end": 9271.24, "text": " terms of all of the other coefficients so we assume that they're independent and this is sort", "tokens": [51344, 2115, 295, 439, 295, 264, 661, 31994, 370, 321, 6552, 300, 436, 434, 6695, 293, 341, 307, 1333, 51604], "temperature": 0.0, "avg_logprob": -0.09980562941668784, "compression_ratio": 1.6219512195121952, "no_speech_prob": 0.007576652802526951}, {"id": 1310, "seek": 927124, "start": 9271.32, "end": 9276.199999999999, "text": " of obvious right because if you wanted to fit your data to these functions and you assume that these", "tokens": [50368, 295, 6322, 558, 570, 498, 291, 1415, 281, 3318, 428, 1412, 281, 613, 6828, 293, 291, 6552, 300, 613, 50612], "temperature": 0.0, "avg_logprob": -0.06369552304667811, "compression_ratio": 1.9411764705882353, "no_speech_prob": 0.09131857752799988}, {"id": 1311, "seek": 927124, "start": 9276.199999999999, "end": 9281.32, "text": " were all unknown coefficients and you wanted to find the best value for them then if you", "tokens": [50612, 645, 439, 9841, 31994, 293, 291, 1415, 281, 915, 264, 1151, 2158, 337, 552, 550, 498, 291, 50868], "temperature": 0.0, "avg_logprob": -0.06369552304667811, "compression_ratio": 1.9411764705882353, "no_speech_prob": 0.09131857752799988}, {"id": 1312, "seek": 927124, "start": 9281.32, "end": 9286.119999999999, "text": " suddenly did that arbitrarily then it's unlikely that this relationship between them holds", "tokens": [50868, 5800, 630, 300, 19071, 3289, 550, 309, 311, 17518, 300, 341, 2480, 1296, 552, 9190, 51108], "temperature": 0.0, "avg_logprob": -0.06369552304667811, "compression_ratio": 1.9411764705882353, "no_speech_prob": 0.09131857752799988}, {"id": 1313, "seek": 927124, "start": 9287.08, "end": 9291.8, "text": " in that situation so in general we definitely want to make sure these coefficients are independent", "tokens": [51156, 294, 300, 2590, 370, 294, 2674, 321, 2138, 528, 281, 652, 988, 613, 31994, 366, 6695, 51392], "temperature": 0.0, "avg_logprob": -0.06369552304667811, "compression_ratio": 1.9411764705882353, "no_speech_prob": 0.09131857752799988}, {"id": 1314, "seek": 927124, "start": 9292.44, "end": 9297.48, "text": " not only that we also should assume that the functions are linearly independent so", "tokens": [51424, 406, 787, 300, 321, 611, 820, 6552, 300, 264, 6828, 366, 43586, 6695, 370, 51676], "temperature": 0.0, "avg_logprob": -0.06369552304667811, "compression_ratio": 1.9411764705882353, "no_speech_prob": 0.09131857752799988}, {"id": 1315, "seek": 929748, "start": 9298.439999999999, "end": 9305.4, "text": " we assume that these functions are independent", "tokens": [50412, 321, 6552, 300, 613, 6828, 366, 6695, 50760], "temperature": 0.0, "avg_logprob": -0.21042395860720903, "compression_ratio": 1.490566037735849, "no_speech_prob": 0.0007321684970520437}, {"id": 1316, "seek": 929748, "start": 9308.6, "end": 9310.6, "text": " as well and this is because", "tokens": [50920, 382, 731, 293, 341, 307, 570, 51020], "temperature": 0.0, "avg_logprob": -0.21042395860720903, "compression_ratio": 1.490566037735849, "no_speech_prob": 0.0007321684970520437}, {"id": 1317, "seek": 929748, "start": 9314.84, "end": 9322.68, "text": " so suppose that one of these actually depended on the other so because if let's say", "tokens": [51232, 370, 7297, 300, 472, 295, 613, 767, 1367, 3502, 322, 264, 661, 370, 570, 498, 718, 311, 584, 51624], "temperature": 0.0, "avg_logprob": -0.21042395860720903, "compression_ratio": 1.490566037735849, "no_speech_prob": 0.0007321684970520437}, {"id": 1318, "seek": 932268, "start": 9322.68, "end": 9331.960000000001, "text": " f i equal to some linear combination of the other ones so let's say bj fj so j goes from", "tokens": [50364, 283, 741, 2681, 281, 512, 8213, 6562, 295, 264, 661, 2306, 370, 718, 311, 584, 272, 73, 283, 73, 370, 361, 1709, 490, 50828], "temperature": 0.0, "avg_logprob": -0.07079676991885471, "compression_ratio": 1.9538461538461538, "no_speech_prob": 0.019716516137123108}, {"id": 1319, "seek": 932268, "start": 9331.960000000001, "end": 9337.880000000001, "text": " one to k but j is not equal to i so we're just saying like for these to be linearly independent", "tokens": [50828, 472, 281, 350, 457, 361, 307, 406, 2681, 281, 741, 370, 321, 434, 445, 1566, 411, 337, 613, 281, 312, 43586, 6695, 51124], "temperature": 0.0, "avg_logprob": -0.07079676991885471, "compression_ratio": 1.9538461538461538, "no_speech_prob": 0.019716516137123108}, {"id": 1320, "seek": 932268, "start": 9337.880000000001, "end": 9343.0, "text": " another way is saying that well at least um none of them can be expressed in terms of the other so", "tokens": [51124, 1071, 636, 307, 1566, 300, 731, 412, 1935, 1105, 6022, 295, 552, 393, 312, 12675, 294, 2115, 295, 264, 661, 370, 51380], "temperature": 0.0, "avg_logprob": -0.07079676991885471, "compression_ratio": 1.9538461538461538, "no_speech_prob": 0.019716516137123108}, {"id": 1321, "seek": 932268, "start": 9343.0, "end": 9348.04, "text": " if that fails at least one of them can be expressed in terms of the others so because if for some", "tokens": [51380, 498, 300, 18199, 412, 1935, 472, 295, 552, 393, 312, 12675, 294, 2115, 295, 264, 2357, 370, 570, 498, 337, 512, 51632], "temperature": 0.0, "avg_logprob": -0.07079676991885471, "compression_ratio": 1.9538461538461538, "no_speech_prob": 0.019716516137123108}, {"id": 1322, "seek": 934804, "start": 9348.44, "end": 9350.44, "text": " numbers bj", "tokens": [50384, 3547, 272, 73, 50484], "temperature": 0.0, "avg_logprob": -0.15295590294731987, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.006487946026027203}, {"id": 1323, "seek": 934804, "start": 9353.880000000001, "end": 9358.76, "text": " then what happens is expressions so then if we take", "tokens": [50656, 550, 437, 2314, 307, 15277, 370, 550, 498, 321, 747, 50900], "temperature": 0.0, "avg_logprob": -0.15295590294731987, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.006487946026027203}, {"id": 1324, "seek": 934804, "start": 9362.36, "end": 9367.640000000001, "text": " so then if we take f and we take its linear combinations so let's say", "tokens": [51080, 370, 550, 498, 321, 747, 283, 293, 321, 747, 1080, 8213, 21267, 370, 718, 311, 584, 51344], "temperature": 0.0, "avg_logprob": -0.15295590294731987, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.006487946026027203}, {"id": 1325, "seek": 934804, "start": 9368.6, "end": 9374.76, "text": " a i sorry let me not use the index i let me use the index j now so let's take some of a j", "tokens": [51392, 257, 741, 2597, 718, 385, 406, 764, 264, 8186, 741, 718, 385, 764, 264, 8186, 361, 586, 370, 718, 311, 747, 512, 295, 257, 361, 51700], "temperature": 0.0, "avg_logprob": -0.15295590294731987, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.006487946026027203}, {"id": 1326, "seek": 937804, "start": 9378.28, "end": 9384.2, "text": " fj and this breaks up into two parts now right because we have a sum over j where j is not equal to i", "tokens": [50376, 283, 73, 293, 341, 9857, 493, 666, 732, 3166, 586, 558, 570, 321, 362, 257, 2408, 670, 361, 689, 361, 307, 406, 2681, 281, 741, 50672], "temperature": 0.0, "avg_logprob": -0.08259387763149767, "compression_ratio": 1.8516129032258064, "no_speech_prob": 0.006487702485173941}, {"id": 1327, "seek": 937804, "start": 9387.0, "end": 9395.800000000001, "text": " so this is j um not equal to i and the sum goes from one to k so this is a j fj but then we also", "tokens": [50812, 370, 341, 307, 361, 1105, 406, 2681, 281, 741, 293, 264, 2408, 1709, 490, 472, 281, 350, 370, 341, 307, 257, 361, 283, 73, 457, 550, 321, 611, 51252], "temperature": 0.0, "avg_logprob": -0.08259387763149767, "compression_ratio": 1.8516129032258064, "no_speech_prob": 0.006487702485173941}, {"id": 1328, "seek": 937804, "start": 9395.800000000001, "end": 9406.28, "text": " have plus a i f i but this term equals this so this equals sum over all j not equal to i", "tokens": [51252, 362, 1804, 257, 741, 283, 741, 457, 341, 1433, 6915, 341, 370, 341, 6915, 2408, 670, 439, 361, 406, 2681, 281, 741, 51776], "temperature": 0.0, "avg_logprob": -0.08259387763149767, "compression_ratio": 1.8516129032258064, "no_speech_prob": 0.006487702485173941}, {"id": 1329, "seek": 940628, "start": 9406.92, "end": 9415.08, "text": " another sum over all j that are not equal to i so we have a i sorry a j i'm just copying", "tokens": [50396, 1071, 2408, 670, 439, 361, 300, 366, 406, 2681, 281, 741, 370, 321, 362, 257, 741, 2597, 257, 361, 741, 478, 445, 27976, 50804], "temperature": 0.0, "avg_logprob": -0.08539004595774524, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.003075223881751299}, {"id": 1330, "seek": 940628, "start": 9415.08, "end": 9429.400000000001, "text": " this term fj plus a i times this so a i times bj fj and then this is all in parentheses", "tokens": [50804, 341, 1433, 283, 73, 1804, 257, 741, 1413, 341, 370, 257, 741, 1413, 272, 73, 283, 73, 293, 550, 341, 307, 439, 294, 34153, 51520], "temperature": 0.0, "avg_logprob": -0.08539004595774524, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.003075223881751299}, {"id": 1331, "seek": 942940, "start": 9429.48, "end": 9436.76, "text": " and now you notice that fj is a common factor so when you factor that out you get sum j not", "tokens": [50368, 293, 586, 291, 3449, 300, 283, 73, 307, 257, 2689, 5952, 370, 562, 291, 5952, 300, 484, 291, 483, 2408, 361, 406, 50732], "temperature": 0.0, "avg_logprob": -0.06548883388568828, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0024724954273551702}, {"id": 1332, "seek": 942940, "start": 9436.76, "end": 9448.44, "text": " equal to i and then this is a j plus a i bj fj so now what we've done is we've re-expressed", "tokens": [50732, 2681, 281, 741, 293, 550, 341, 307, 257, 361, 1804, 257, 741, 272, 73, 283, 73, 370, 586, 437, 321, 600, 1096, 307, 321, 600, 319, 12, 15952, 3805, 51316], "temperature": 0.0, "avg_logprob": -0.06548883388568828, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0024724954273551702}, {"id": 1333, "seek": 942940, "start": 9448.44, "end": 9453.4, "text": " our linear combination of these functions so the way everything that's on the right hand side here", "tokens": [51316, 527, 8213, 6562, 295, 613, 6828, 370, 264, 636, 1203, 300, 311, 322, 264, 558, 1011, 1252, 510, 51564], "temperature": 0.0, "avg_logprob": -0.06548883388568828, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0024724954273551702}, {"id": 1334, "seek": 945340, "start": 9453.4, "end": 9461.08, "text": " in particular and we've re-expressed it in terms of functions in terms of k minus one functions", "tokens": [50364, 294, 1729, 293, 321, 600, 319, 12, 15952, 3805, 309, 294, 2115, 295, 6828, 294, 2115, 295, 350, 3175, 472, 6828, 50748], "temperature": 0.0, "avg_logprob": -0.06454648500607338, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.04208069294691086}, {"id": 1335, "seek": 945340, "start": 9461.8, "end": 9466.199999999999, "text": " and now our coefficients have changed so in other words there was already a dependence on", "tokens": [50784, 293, 586, 527, 31994, 362, 3105, 370, 294, 661, 2283, 456, 390, 1217, 257, 31704, 322, 51004], "temperature": 0.0, "avg_logprob": -0.06454648500607338, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.04208069294691086}, {"id": 1336, "seek": 945340, "start": 9466.199999999999, "end": 9471.88, "text": " the coefficients in some sense and so we usually demand that the functions are linearly independent", "tokens": [51004, 264, 31994, 294, 512, 2020, 293, 370, 321, 2673, 4733, 300, 264, 6828, 366, 43586, 6695, 51288], "temperature": 0.0, "avg_logprob": -0.06454648500607338, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.04208069294691086}, {"id": 1337, "seek": 945340, "start": 9471.88, "end": 9481.48, "text": " so that we avoid this issue in the next video we'll explain more generally a simple situation", "tokens": [51288, 370, 300, 321, 5042, 341, 2734, 294, 264, 958, 960, 321, 603, 2903, 544, 5101, 257, 2199, 2590, 51768], "temperature": 0.0, "avg_logprob": -0.06454648500607338, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.04208069294691086}, {"id": 1338, "seek": 948148, "start": 9481.48, "end": 9487.64, "text": " that occurs in which this function this linear system is always um solvable by the method that", "tokens": [50364, 300, 11843, 294, 597, 341, 2445, 341, 8213, 1185, 307, 1009, 1105, 1404, 17915, 538, 264, 3170, 300, 50672], "temperature": 0.0, "avg_logprob": -0.08896370539589533, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.007344953715801239}, {"id": 1339, "seek": 948148, "start": 9487.64, "end": 9495.8, "text": " we used earlier namely by taking a transpose a inverse let's now understand when we can solve", "tokens": [50672, 321, 1143, 3071, 20926, 538, 1940, 257, 25167, 257, 17340, 718, 311, 586, 1223, 562, 321, 393, 5039, 51080], "temperature": 0.0, "avg_logprob": -0.08896370539589533, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.007344953715801239}, {"id": 1340, "seek": 948148, "start": 9496.359999999999, "end": 9504.92, "text": " a transpose y equals a transpose a c using the method of taking the inverse of a transpose a", "tokens": [51108, 257, 25167, 288, 6915, 257, 25167, 257, 269, 1228, 264, 3170, 295, 1940, 264, 17340, 295, 257, 25167, 257, 51536], "temperature": 0.0, "avg_logprob": -0.08896370539589533, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.007344953715801239}, {"id": 1341, "seek": 950492, "start": 9505.48, "end": 9507.32, "text": " now in order to take the inverse of this", "tokens": [50392, 586, 294, 1668, 281, 747, 264, 17340, 295, 341, 50484], "temperature": 0.0, "avg_logprob": -0.07483268956669041, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.013221673667430878}, {"id": 1342, "seek": 950492, "start": 9513.32, "end": 9519.0, "text": " we know that we need to require that the kernel of this matrix so by the way if a is a", "tokens": [50784, 321, 458, 300, 321, 643, 281, 3651, 300, 264, 28256, 295, 341, 8141, 370, 538, 264, 636, 498, 257, 307, 257, 51068], "temperature": 0.0, "avg_logprob": -0.07483268956669041, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.013221673667430878}, {"id": 1343, "seek": 950492, "start": 9520.6, "end": 9529.56, "text": " is a d by k matrix and again d is typically much much larger than k then we want to know when this", "tokens": [51148, 307, 257, 274, 538, 350, 8141, 293, 797, 274, 307, 5850, 709, 709, 4833, 813, 350, 550, 321, 528, 281, 458, 562, 341, 51596], "temperature": 0.0, "avg_logprob": -0.07483268956669041, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.013221673667430878}, {"id": 1344, "seek": 952956, "start": 9529.64, "end": 9533.48, "text": " exists so one of the situations when this exists is when", "tokens": [50368, 8198, 370, 472, 295, 264, 6851, 562, 341, 8198, 307, 562, 50560], "temperature": 0.0, "avg_logprob": -0.1094899481915413, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.005729966331273317}, {"id": 1345, "seek": 952956, "start": 9536.6, "end": 9543.48, "text": " the kernel of this matrix vanishes that's one of the criteria", "tokens": [50716, 264, 28256, 295, 341, 8141, 3161, 16423, 300, 311, 472, 295, 264, 11101, 51060], "temperature": 0.0, "avg_logprob": -0.1094899481915413, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.005729966331273317}, {"id": 1346, "seek": 952956, "start": 9546.84, "end": 9552.6, "text": " so zero as a vector space as a vector subspace um of r k", "tokens": [51228, 370, 4018, 382, 257, 8062, 1901, 382, 257, 8062, 2090, 17940, 1105, 295, 367, 350, 51516], "temperature": 0.0, "avg_logprob": -0.1094899481915413, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.005729966331273317}, {"id": 1347, "seek": 955260, "start": 9553.24, "end": 9561.800000000001, "text": " so when does something like this happen so to understand when we can apply this method", "tokens": [50396, 370, 562, 775, 746, 411, 341, 1051, 370, 281, 1223, 562, 321, 393, 3079, 341, 3170, 50824], "temperature": 0.0, "avg_logprob": -0.10411428937724992, "compression_ratio": 1.5528455284552845, "no_speech_prob": 0.0034294186625629663}, {"id": 1348, "seek": 955260, "start": 9564.6, "end": 9572.52, "text": " let's suppose that this is the matrix a a goes from r k this is r d here and this here", "tokens": [50964, 718, 311, 7297, 300, 341, 307, 264, 8141, 257, 257, 1709, 490, 367, 350, 341, 307, 367, 274, 510, 293, 341, 510, 51360], "temperature": 0.0, "avg_logprob": -0.10411428937724992, "compression_ratio": 1.5528455284552845, "no_speech_prob": 0.0034294186625629663}, {"id": 1349, "seek": 955260, "start": 9573.720000000001, "end": 9574.68, "text": " is the image of a", "tokens": [51420, 307, 264, 3256, 295, 257, 51468], "temperature": 0.0, "avg_logprob": -0.10411428937724992, "compression_ratio": 1.5528455284552845, "no_speech_prob": 0.0034294186625629663}, {"id": 1350, "seek": 957468, "start": 9575.08, "end": 9583.0, "text": " if we take the orthogonal complement of this image in this case you know unfortunately i", "tokens": [50384, 498, 321, 747, 264, 41488, 17103, 295, 341, 3256, 294, 341, 1389, 291, 458, 7015, 741, 50780], "temperature": 0.0, "avg_logprob": -0.13014577606977043, "compression_ratio": 1.78343949044586, "no_speech_prob": 0.011330640874803066}, {"id": 1351, "seek": 957468, "start": 9583.0, "end": 9587.56, "text": " can only draw the orthogonal complement as having a single dimension but you could imagine that it", "tokens": [50780, 393, 787, 2642, 264, 41488, 17103, 382, 1419, 257, 2167, 10139, 457, 291, 727, 3811, 300, 309, 51008], "temperature": 0.0, "avg_logprob": -0.13014577606977043, "compression_ratio": 1.78343949044586, "no_speech_prob": 0.011330640874803066}, {"id": 1352, "seek": 957468, "start": 9587.56, "end": 9596.04, "text": " has um a much much larger dimension especially if these much much larger than k so the first", "tokens": [51008, 575, 1105, 257, 709, 709, 4833, 10139, 2318, 498, 613, 709, 709, 4833, 813, 350, 370, 264, 700, 51432], "temperature": 0.0, "avg_logprob": -0.13014577606977043, "compression_ratio": 1.78343949044586, "no_speech_prob": 0.011330640874803066}, {"id": 1353, "seek": 959604, "start": 9596.04, "end": 9606.68, "text": " claim that will prove is that the orthogonal complement of the image of a", "tokens": [50364, 3932, 300, 486, 7081, 307, 300, 264, 41488, 17103, 295, 264, 3256, 295, 257, 50896], "temperature": 0.0, "avg_logprob": -0.06991697458120492, "compression_ratio": 1.7986111111111112, "no_speech_prob": 0.02758242003619671}, {"id": 1354, "seek": 959604, "start": 9609.720000000001, "end": 9615.560000000001, "text": " equals the kernel now in order for this to make sense i need to take the kernel of some matrix", "tokens": [51048, 6915, 264, 28256, 586, 294, 1668, 337, 341, 281, 652, 2020, 741, 643, 281, 747, 264, 28256, 295, 512, 8141, 51340], "temperature": 0.0, "avg_logprob": -0.06991697458120492, "compression_ratio": 1.7986111111111112, "no_speech_prob": 0.02758242003619671}, {"id": 1355, "seek": 959604, "start": 9615.560000000001, "end": 9622.68, "text": " now the image of a is in r d its orthogonal complement is also in r d and i can't take the", "tokens": [51340, 586, 264, 3256, 295, 257, 307, 294, 367, 274, 1080, 41488, 17103, 307, 611, 294, 367, 274, 293, 741, 393, 380, 747, 264, 51696], "temperature": 0.0, "avg_logprob": -0.06991697458120492, "compression_ratio": 1.7986111111111112, "no_speech_prob": 0.02758242003619671}, {"id": 1356, "seek": 962268, "start": 9622.68, "end": 9626.68, "text": " kernel of a because that wouldn't make sense the kernel would live here so i have to take", "tokens": [50364, 28256, 295, 257, 570, 300, 2759, 380, 652, 2020, 264, 28256, 576, 1621, 510, 370, 741, 362, 281, 747, 50564], "temperature": 0.0, "avg_logprob": -0.06037081441571636, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.008314737118780613}, {"id": 1357, "seek": 962268, "start": 9627.32, "end": 9631.56, "text": " the only other thing i can take the kernel of is maybe the kernel of a transpose", "tokens": [50596, 264, 787, 661, 551, 741, 393, 747, 264, 28256, 295, 307, 1310, 264, 28256, 295, 257, 25167, 50808], "temperature": 0.0, "avg_logprob": -0.06037081441571636, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.008314737118780613}, {"id": 1358, "seek": 962268, "start": 9631.56, "end": 9636.6, "text": " so we'll do that so we'll take the kernel of a transpose and it turns out that these two are", "tokens": [50808, 370, 321, 603, 360, 300, 370, 321, 603, 747, 264, 28256, 295, 257, 25167, 293, 309, 4523, 484, 300, 613, 732, 366, 51060], "temperature": 0.0, "avg_logprob": -0.06037081441571636, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.008314737118780613}, {"id": 1359, "seek": 962268, "start": 9636.6, "end": 9648.2, "text": " equal so how do we see this let's visualize a as a um as a matrix of vectors so a one through a k", "tokens": [51060, 2681, 370, 577, 360, 321, 536, 341, 718, 311, 23273, 257, 382, 257, 1105, 382, 257, 8141, 295, 18875, 370, 257, 472, 807, 257, 350, 51640], "temperature": 0.0, "avg_logprob": -0.06037081441571636, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.008314737118780613}, {"id": 1360, "seek": 964820, "start": 9648.2, "end": 9655.320000000002, "text": " and when we take the transpose these rows these columns just become the rows", "tokens": [50364, 293, 562, 321, 747, 264, 25167, 613, 13241, 613, 13766, 445, 1813, 264, 13241, 50720], "temperature": 0.0, "avg_logprob": -0.08546312898397446, "compression_ratio": 1.6875, "no_speech_prob": 0.0005703038768842816}, {"id": 1361, "seek": 964820, "start": 9656.36, "end": 9661.480000000001, "text": " so we'll do this proof just by showing that one is contained in the other just to make it very", "tokens": [50772, 370, 321, 603, 360, 341, 8177, 445, 538, 4099, 300, 472, 307, 16212, 294, 264, 661, 445, 281, 652, 309, 588, 51028], "temperature": 0.0, "avg_logprob": -0.08546312898397446, "compression_ratio": 1.6875, "no_speech_prob": 0.0005703038768842816}, {"id": 1362, "seek": 964820, "start": 9661.480000000001, "end": 9672.6, "text": " explicit so suppose that the vector v is let's start with the um let's start with being an element", "tokens": [51028, 13691, 370, 7297, 300, 264, 8062, 371, 307, 718, 311, 722, 365, 264, 1105, 718, 311, 722, 365, 885, 364, 4478, 51584], "temperature": 0.0, "avg_logprob": -0.08546312898397446, "compression_ratio": 1.6875, "no_speech_prob": 0.0005703038768842816}, {"id": 1363, "seek": 967260, "start": 9672.6, "end": 9681.0, "text": " in the orthogonal complement so let's say v is perpendicular to a the um the image of a", "tokens": [50364, 294, 264, 41488, 17103, 370, 718, 311, 584, 371, 307, 26734, 281, 257, 264, 1105, 264, 3256, 295, 257, 50784], "temperature": 0.0, "avg_logprob": -0.04389254365648542, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.0033765092957764864}, {"id": 1364, "seek": 967260, "start": 9684.68, "end": 9689.800000000001, "text": " and then let's see if it's in the kernel of a transpose so when we take a transpose applied", "tokens": [50968, 293, 550, 718, 311, 536, 498, 309, 311, 294, 264, 28256, 295, 257, 25167, 370, 562, 321, 747, 257, 25167, 6456, 51224], "temperature": 0.0, "avg_logprob": -0.04389254365648542, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.0033765092957764864}, {"id": 1365, "seek": 967260, "start": 9689.800000000001, "end": 9695.800000000001, "text": " to v what do we get so we'll write the matrix a transpose now we take these columns and turn them", "tokens": [51224, 281, 371, 437, 360, 321, 483, 370, 321, 603, 2464, 264, 8141, 257, 25167, 586, 321, 747, 613, 13766, 293, 1261, 552, 51524], "temperature": 0.0, "avg_logprob": -0.04389254365648542, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.0033765092957764864}, {"id": 1366, "seek": 969580, "start": 9695.8, "end": 9708.759999999998, "text": " into rows and we apply it to the vector v but matrix multiplication tells us that when we do this", "tokens": [50364, 666, 13241, 293, 321, 3079, 309, 281, 264, 8062, 371, 457, 8141, 27290, 5112, 505, 300, 562, 321, 360, 341, 51012], "temperature": 0.0, "avg_logprob": -0.0568431512169216, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.04741831123828888}, {"id": 1367, "seek": 969580, "start": 9708.759999999998, "end": 9715.16, "text": " we take this row multiply it by this vector in other words we take the dot product so this equals", "tokens": [51012, 321, 747, 341, 5386, 12972, 309, 538, 341, 8062, 294, 661, 2283, 321, 747, 264, 5893, 1674, 370, 341, 6915, 51332], "temperature": 0.0, "avg_logprob": -0.0568431512169216, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.04741831123828888}, {"id": 1368, "seek": 971516, "start": 9715.8, "end": 9726.92, "text": " another vector and it's a it's a vector in r k and what we get is a one dot product with v", "tokens": [50396, 1071, 8062, 293, 309, 311, 257, 309, 311, 257, 8062, 294, 367, 350, 293, 437, 321, 483, 307, 257, 472, 5893, 1674, 365, 371, 50952], "temperature": 0.0, "avg_logprob": -0.07110758350320058, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.1112237423658371}, {"id": 1369, "seek": 971516, "start": 9728.2, "end": 9736.36, "text": " as the first entry all the way down to ak dot product with v but if v is in the orthogonal", "tokens": [51016, 382, 264, 700, 8729, 439, 264, 636, 760, 281, 9308, 5893, 1674, 365, 371, 457, 498, 371, 307, 294, 264, 41488, 51424], "temperature": 0.0, "avg_logprob": -0.07110758350320058, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.1112237423658371}, {"id": 1370, "seek": 971516, "start": 9736.36, "end": 9741.96, "text": " complement of a then it has to be that all of these dot products are zero so this is actually", "tokens": [51424, 17103, 295, 257, 550, 309, 575, 281, 312, 300, 439, 295, 613, 5893, 3383, 366, 4018, 370, 341, 307, 767, 51704], "temperature": 0.0, "avg_logprob": -0.07110758350320058, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.1112237423658371}, {"id": 1371, "seek": 974196, "start": 9741.96, "end": 9752.839999999998, "text": " the zero vector and therefore therefore the um this containment holds the image of the orthogonal", "tokens": [50364, 264, 4018, 8062, 293, 4412, 4412, 264, 1105, 341, 44058, 9190, 264, 3256, 295, 264, 41488, 50908], "temperature": 0.0, "avg_logprob": -0.07214976292030484, "compression_ratio": 1.6592592592592592, "no_speech_prob": 0.0062894634902477264}, {"id": 1372, "seek": 974196, "start": 9752.839999999998, "end": 9758.039999999999, "text": " complement of the image of a is in the kernel of a transpose so that shows half of the theorem", "tokens": [50908, 17103, 295, 264, 3256, 295, 257, 307, 294, 264, 28256, 295, 257, 25167, 370, 300, 3110, 1922, 295, 264, 20904, 51168], "temperature": 0.0, "avg_logprob": -0.07214976292030484, "compression_ratio": 1.6592592592592592, "no_speech_prob": 0.0062894634902477264}, {"id": 1373, "seek": 974196, "start": 9760.359999999999, "end": 9762.599999999999, "text": " now let's suppose so conversely", "tokens": [51284, 586, 718, 311, 7297, 370, 2615, 736, 51396], "temperature": 0.0, "avg_logprob": -0.07214976292030484, "compression_ratio": 1.6592592592592592, "no_speech_prob": 0.0062894634902477264}, {"id": 1374, "seek": 976260, "start": 9763.24, "end": 9771.4, "text": " suppose that the vector u is in the kernel of a transpose", "tokens": [50396, 7297, 300, 264, 8062, 344, 307, 294, 264, 28256, 295, 257, 25167, 50804], "temperature": 0.0, "avg_logprob": -0.1158594528834025, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.012820654548704624}, {"id": 1375, "seek": 976260, "start": 9774.92, "end": 9778.52, "text": " then by the same argument being in the kernel of a transpose", "tokens": [50980, 550, 538, 264, 912, 6770, 885, 294, 264, 28256, 295, 257, 25167, 51160], "temperature": 0.0, "avg_logprob": -0.1158594528834025, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.012820654548704624}, {"id": 1376, "seek": 977852, "start": 9779.08, "end": 9792.84, "text": " a transpose u equals zero but a transpose u is a one dot u all the way down to ak dot u", "tokens": [50392, 257, 25167, 344, 6915, 4018, 457, 257, 25167, 344, 307, 257, 472, 5893, 344, 439, 264, 636, 760, 281, 9308, 5893, 344, 51080], "temperature": 0.0, "avg_logprob": -0.10293705609379983, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.08507645130157471}, {"id": 1377, "seek": 977852, "start": 9793.640000000001, "end": 9800.12, "text": " but the zero vector says that all of those are zero and because the image of a is spanned by", "tokens": [51120, 457, 264, 4018, 8062, 1619, 300, 439, 295, 729, 366, 4018, 293, 570, 264, 3256, 295, 257, 307, 637, 5943, 538, 51444], "temperature": 0.0, "avg_logprob": -0.10293705609379983, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.08507645130157471}, {"id": 1378, "seek": 980012, "start": 9800.2, "end": 9811.240000000002, "text": " the vectors a one through ak we know automatically by the same exact argument that u is perpendicular", "tokens": [50368, 264, 18875, 257, 472, 807, 9308, 321, 458, 6772, 538, 264, 912, 1900, 6770, 300, 344, 307, 26734, 50920], "temperature": 0.0, "avg_logprob": -0.061440012671730736, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.0007321688462980092}, {"id": 1379, "seek": 980012, "start": 9811.240000000002, "end": 9817.320000000002, "text": " to the image of a so it's almost the same argument which is why i'm not writing it and therefore", "tokens": [50920, 281, 264, 3256, 295, 257, 370, 309, 311, 1920, 264, 912, 6770, 597, 307, 983, 741, 478, 406, 3579, 309, 293, 4412, 51224], "temperature": 0.0, "avg_logprob": -0.061440012671730736, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.0007321688462980092}, {"id": 1380, "seek": 980012, "start": 9820.68, "end": 9825.560000000001, "text": " this containment holds and that's the other half of the theorem so that's the proof that", "tokens": [51392, 341, 44058, 9190, 293, 300, 311, 264, 661, 1922, 295, 264, 20904, 370, 300, 311, 264, 8177, 300, 51636], "temperature": 0.0, "avg_logprob": -0.061440012671730736, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.0007321688462980092}, {"id": 1381, "seek": 982556, "start": 9826.519999999999, "end": 9831.0, "text": " the kernel of a transpose equals the orthogonal complement of the image of a", "tokens": [50412, 264, 28256, 295, 257, 25167, 6915, 264, 41488, 17103, 295, 264, 3256, 295, 257, 50636], "temperature": 0.0, "avg_logprob": -0.11544477022611178, "compression_ratio": 1.6796875, "no_speech_prob": 0.0026315145660191774}, {"id": 1382, "seek": 982556, "start": 9832.92, "end": 9833.88, "text": " why is this useful", "tokens": [50732, 983, 307, 341, 4420, 50780], "temperature": 0.0, "avg_logprob": -0.11544477022611178, "compression_ratio": 1.6796875, "no_speech_prob": 0.0026315145660191774}, {"id": 1383, "seek": 982556, "start": 9837.56, "end": 9840.039999999999, "text": " it's useful for the following very important reason", "tokens": [50964, 309, 311, 4420, 337, 264, 3480, 588, 1021, 1778, 51088], "temperature": 0.0, "avg_logprob": -0.11544477022611178, "compression_ratio": 1.6796875, "no_speech_prob": 0.0026315145660191774}, {"id": 1384, "seek": 982556, "start": 9843.16, "end": 9852.279999999999, "text": " and it says that the kernel of a equals the kernel of a transpose a", "tokens": [51244, 293, 309, 1619, 300, 264, 28256, 295, 257, 6915, 264, 28256, 295, 257, 25167, 257, 51700], "temperature": 0.0, "avg_logprob": -0.11544477022611178, "compression_ratio": 1.6796875, "no_speech_prob": 0.0026315145660191774}, {"id": 1385, "seek": 985228, "start": 9853.24, "end": 9858.76, "text": " you can already see why this is going to be useful because instead of looking at the kernel of a", "tokens": [50412, 291, 393, 1217, 536, 983, 341, 307, 516, 281, 312, 4420, 570, 2602, 295, 1237, 412, 264, 28256, 295, 257, 50688], "temperature": 0.0, "avg_logprob": -0.07521948274576438, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.004198034293949604}, {"id": 1386, "seek": 985228, "start": 9858.76, "end": 9863.560000000001, "text": " transpose a which we take two matrices multiply them it's going to be a little bit more difficult", "tokens": [50688, 25167, 257, 597, 321, 747, 732, 32284, 12972, 552, 309, 311, 516, 281, 312, 257, 707, 857, 544, 2252, 50928], "temperature": 0.0, "avg_logprob": -0.07521948274576438, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.004198034293949604}, {"id": 1387, "seek": 985228, "start": 9863.560000000001, "end": 9868.04, "text": " matrix to work with if we could just look at the kernel of a that would probably save us some time", "tokens": [50928, 8141, 281, 589, 365, 498, 321, 727, 445, 574, 412, 264, 28256, 295, 257, 300, 576, 1391, 3155, 505, 512, 565, 51152], "temperature": 0.0, "avg_logprob": -0.07521948274576438, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.004198034293949604}, {"id": 1388, "seek": 985228, "start": 9870.2, "end": 9876.12, "text": " so let's prove this in one direction it's pretty obvious but i'll write it out anyway", "tokens": [51260, 370, 718, 311, 7081, 341, 294, 472, 3513, 309, 311, 1238, 6322, 457, 741, 603, 2464, 309, 484, 4033, 51556], "temperature": 0.0, "avg_logprob": -0.07521948274576438, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.004198034293949604}, {"id": 1389, "seek": 985228, "start": 9876.12, "end": 9879.560000000001, "text": " so let's first prove the direction that the kernel of a is inside here", "tokens": [51556, 370, 718, 311, 700, 7081, 264, 3513, 300, 264, 28256, 295, 257, 307, 1854, 510, 51728], "temperature": 0.0, "avg_logprob": -0.07521948274576438, "compression_ratio": 1.8442622950819672, "no_speech_prob": 0.004198034293949604}, {"id": 1390, "seek": 987956, "start": 9880.199999999999, "end": 9887.08, "text": " so let's prove on this containment so if u satisfies", "tokens": [50396, 370, 718, 311, 7081, 322, 341, 44058, 370, 498, 344, 44271, 50740], "temperature": 0.0, "avg_logprob": -0.09121432596323442, "compression_ratio": 1.5895522388059702, "no_speech_prob": 0.0021826443262398243}, {"id": 1391, "seek": 987956, "start": 9890.199999999999, "end": 9900.119999999999, "text": " a u equals zero then a transpose a u because this thing is zero also equals zero", "tokens": [50896, 257, 344, 6915, 4018, 550, 257, 25167, 257, 344, 570, 341, 551, 307, 4018, 611, 6915, 4018, 51392], "temperature": 0.0, "avg_logprob": -0.09121432596323442, "compression_ratio": 1.5895522388059702, "no_speech_prob": 0.0021826443262398243}, {"id": 1392, "seek": 987956, "start": 9901.64, "end": 9906.439999999999, "text": " so that direction is pretty straightforward let's look at the other containment", "tokens": [51468, 370, 300, 3513, 307, 1238, 15325, 718, 311, 574, 412, 264, 661, 44058, 51708], "temperature": 0.0, "avg_logprob": -0.09121432596323442, "compression_ratio": 1.5895522388059702, "no_speech_prob": 0.0021826443262398243}, {"id": 1393, "seek": 990644, "start": 9906.6, "end": 9911.32, "text": " so suppose v satisfies", "tokens": [50372, 370, 7297, 371, 44271, 50608], "temperature": 0.0, "avg_logprob": -0.19362946479551255, "compression_ratio": 1.369047619047619, "no_speech_prob": 0.0041984631679952145}, {"id": 1394, "seek": 990644, "start": 9915.720000000001, "end": 9925.800000000001, "text": " a transpose a v equals zero then what this means is that a v is in the kernel of a transpose", "tokens": [50828, 257, 25167, 257, 371, 6915, 4018, 550, 437, 341, 1355, 307, 300, 257, 371, 307, 294, 264, 28256, 295, 257, 25167, 51332], "temperature": 0.0, "avg_logprob": -0.19362946479551255, "compression_ratio": 1.369047619047619, "no_speech_prob": 0.0041984631679952145}, {"id": 1395, "seek": 992580, "start": 9926.039999999999, "end": 9937.96, "text": " i.e. a v is in the kernel of a transpose but by the previous claim the kernel of a transpose", "tokens": [50376, 741, 13, 68, 13, 257, 371, 307, 294, 264, 28256, 295, 257, 25167, 457, 538, 264, 3894, 3932, 264, 28256, 295, 257, 25167, 50972], "temperature": 0.0, "avg_logprob": -0.1149150764240938, "compression_ratio": 1.7189542483660132, "no_speech_prob": 0.005060027353465557}, {"id": 1396, "seek": 992580, "start": 9938.679999999998, "end": 9943.8, "text": " equals the image of a taking the orthogonal complement of the image of a", "tokens": [51008, 6915, 264, 3256, 295, 257, 1940, 264, 41488, 17103, 295, 264, 3256, 295, 257, 51264], "temperature": 0.0, "avg_logprob": -0.1149150764240938, "compression_ratio": 1.7189542483660132, "no_speech_prob": 0.005060027353465557}, {"id": 1397, "seek": 992580, "start": 9947.48, "end": 9953.32, "text": " so what's the picture here actually let's go back right here so we have that a v which by the way", "tokens": [51448, 370, 437, 311, 264, 3036, 510, 767, 718, 311, 352, 646, 558, 510, 370, 321, 362, 300, 257, 371, 597, 538, 264, 636, 51740], "temperature": 0.0, "avg_logprob": -0.1149150764240938, "compression_ratio": 1.7189542483660132, "no_speech_prob": 0.005060027353465557}, {"id": 1398, "seek": 995332, "start": 9953.32, "end": 9960.039999999999, "text": " is in this plane also is contained in the orthogonal complement of that image", "tokens": [50364, 307, 294, 341, 5720, 611, 307, 16212, 294, 264, 41488, 17103, 295, 300, 3256, 50700], "temperature": 0.0, "avg_logprob": -0.062077903747558595, "compression_ratio": 1.870503597122302, "no_speech_prob": 0.012051989324390888}, {"id": 1399, "seek": 995332, "start": 9960.68, "end": 9967.48, "text": " and the only vector that's contained both in a and in the orthogonal complement is the zero vector", "tokens": [50732, 293, 264, 787, 8062, 300, 311, 16212, 1293, 294, 257, 293, 294, 264, 41488, 17103, 307, 264, 4018, 8062, 51072], "temperature": 0.0, "avg_logprob": -0.062077903747558595, "compression_ratio": 1.870503597122302, "no_speech_prob": 0.012051989324390888}, {"id": 1400, "seek": 995332, "start": 9969.88, "end": 9976.52, "text": " this implies that a v equals the zero vector in other words v is in the kernel of a", "tokens": [51192, 341, 18779, 300, 257, 371, 6915, 264, 4018, 8062, 294, 661, 2283, 371, 307, 294, 264, 28256, 295, 257, 51524], "temperature": 0.0, "avg_logprob": -0.062077903747558595, "compression_ratio": 1.870503597122302, "no_speech_prob": 0.012051989324390888}, {"id": 1401, "seek": 997652, "start": 9976.76, "end": 9986.52, "text": " and now the containment has been shown in both directions and that's the conclusion of the proof", "tokens": [50376, 293, 586, 264, 44058, 575, 668, 4898, 294, 1293, 11095, 293, 300, 311, 264, 10063, 295, 264, 8177, 50864], "temperature": 0.0, "avg_logprob": -0.10886599970798866, "compression_ratio": 1.5153846153846153, "no_speech_prob": 0.002323017455637455}, {"id": 1402, "seek": 997652, "start": 9987.48, "end": 9991.24, "text": " and let me just write out the final corollary which is the useful one for us", "tokens": [50912, 293, 718, 385, 445, 2464, 484, 264, 2572, 1181, 1833, 822, 597, 307, 264, 4420, 472, 337, 505, 51100], "temperature": 0.0, "avg_logprob": -0.10886599970798866, "compression_ratio": 1.5153846153846153, "no_speech_prob": 0.002323017455637455}, {"id": 1403, "seek": 997652, "start": 9993.48, "end": 9994.68, "text": " it's like corollary two", "tokens": [51212, 309, 311, 411, 1181, 1833, 822, 732, 51272], "temperature": 0.0, "avg_logprob": -0.10886599970798866, "compression_ratio": 1.5153846153846153, "no_speech_prob": 0.002323017455637455}, {"id": 1404, "seek": 999468, "start": 9994.68, "end": 10008.28, "text": " is that at least so let's say a transpose how do I say this a transpose a inverse exists", "tokens": [50364, 307, 300, 412, 1935, 370, 718, 311, 584, 257, 25167, 577, 360, 286, 584, 341, 257, 25167, 257, 17340, 8198, 51044], "temperature": 0.0, "avg_logprob": -0.16743489828976718, "compression_ratio": 1.4424778761061947, "no_speech_prob": 0.0197181086987257}, {"id": 1405, "seek": 999468, "start": 10010.04, "end": 10018.6, "text": " if and only if the kernel of a is trivial so it's only the zero vector now", "tokens": [51132, 498, 293, 787, 498, 264, 28256, 295, 257, 307, 26703, 370, 309, 311, 787, 264, 4018, 8062, 586, 51560], "temperature": 0.0, "avg_logprob": -0.16743489828976718, "compression_ratio": 1.4424778761061947, "no_speech_prob": 0.0197181086987257}, {"id": 1406, "seek": 1001860, "start": 10019.0, "end": 10030.44, "text": " why is this reasonable so this is this isn't really an example it's sort of an idea for why", "tokens": [50384, 983, 307, 341, 10585, 370, 341, 307, 341, 1943, 380, 534, 364, 1365, 309, 311, 1333, 295, 364, 1558, 337, 983, 50956], "temperature": 0.0, "avg_logprob": -0.1392620269288408, "compression_ratio": 1.504, "no_speech_prob": 0.0005192930693738163}, {"id": 1407, "seek": 1001860, "start": 10030.44, "end": 10037.640000000001, "text": " this is uh this usually occurs when you're trying to fit data so our matrix a is typically going", "tokens": [50956, 341, 307, 2232, 341, 2673, 11843, 562, 291, 434, 1382, 281, 3318, 1412, 370, 527, 8141, 257, 307, 5850, 516, 51316], "temperature": 0.0, "avg_logprob": -0.1392620269288408, "compression_ratio": 1.504, "no_speech_prob": 0.0005192930693738163}, {"id": 1408, "seek": 1003764, "start": 10037.64, "end": 10049.08, "text": " to be of the form f 1 x 1 dot dot dot f um what was it x k f k x 1 all the way down to f 1 x d", "tokens": [50364, 281, 312, 295, 264, 1254, 283, 502, 2031, 502, 5893, 5893, 5893, 283, 1105, 437, 390, 309, 2031, 350, 283, 350, 2031, 502, 439, 264, 636, 760, 281, 283, 502, 2031, 274, 50936], "temperature": 0.0, "avg_logprob": -0.08068647776564507, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.009708002209663391}, {"id": 1409, "seek": 1003764, "start": 10050.92, "end": 10056.599999999999, "text": " f k x d so typically our matrix a looks something like this", "tokens": [51028, 283, 350, 2031, 274, 370, 5850, 527, 8141, 257, 1542, 746, 411, 341, 51312], "temperature": 0.0, "avg_logprob": -0.08068647776564507, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.009708002209663391}, {"id": 1410, "seek": 1003764, "start": 10059.32, "end": 10065.24, "text": " and what would it mean for this to have trivial kernel it would say that none of these so all", "tokens": [51448, 293, 437, 576, 309, 914, 337, 341, 281, 362, 26703, 28256, 309, 576, 584, 300, 6022, 295, 613, 370, 439, 51744], "temperature": 0.0, "avg_logprob": -0.08068647776564507, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.009708002209663391}, {"id": 1411, "seek": 1006524, "start": 10065.24, "end": 10070.199999999999, "text": " of these vectors are linearly the set of these vectors the column vectors are linearly independent", "tokens": [50364, 295, 613, 18875, 366, 43586, 264, 992, 295, 613, 18875, 264, 7738, 18875, 366, 43586, 6695, 50612], "temperature": 0.0, "avg_logprob": -0.036615646802462064, "compression_ratio": 2.1714285714285713, "no_speech_prob": 0.005384447984397411}, {"id": 1412, "seek": 1006524, "start": 10070.84, "end": 10079.88, "text": " is that likely so when when might something like that happen so for instance if one of these functions", "tokens": [50644, 307, 300, 3700, 370, 562, 562, 1062, 746, 411, 300, 1051, 370, 337, 5197, 498, 472, 295, 613, 6828, 51096], "temperature": 0.0, "avg_logprob": -0.036615646802462064, "compression_ratio": 2.1714285714285713, "no_speech_prob": 0.005384447984397411}, {"id": 1413, "seek": 1006524, "start": 10081.24, "end": 10087.4, "text": " did depend on the others in a linear way so for instance in the last video we said that", "tokens": [51164, 630, 5672, 322, 264, 2357, 294, 257, 8213, 636, 370, 337, 5197, 294, 264, 1036, 960, 321, 848, 300, 51472], "temperature": 0.0, "avg_logprob": -0.036615646802462064, "compression_ratio": 2.1714285714285713, "no_speech_prob": 0.005384447984397411}, {"id": 1414, "seek": 1006524, "start": 10087.4, "end": 10091.8, "text": " we assume that these functions were linearly independent if they were dependent what could", "tokens": [51472, 321, 6552, 300, 613, 6828, 645, 43586, 6695, 498, 436, 645, 12334, 437, 727, 51692], "temperature": 0.0, "avg_logprob": -0.036615646802462064, "compression_ratio": 2.1714285714285713, "no_speech_prob": 0.005384447984397411}, {"id": 1415, "seek": 1009180, "start": 10091.8, "end": 10096.359999999999, "text": " happen one of these column vectors could be expressed as a linear combination of the others", "tokens": [50364, 1051, 472, 295, 613, 7738, 18875, 727, 312, 12675, 382, 257, 8213, 6562, 295, 264, 2357, 50592], "temperature": 0.0, "avg_logprob": -0.04136049179803757, "compression_ratio": 1.931578947368421, "no_speech_prob": 0.0008558831759728491}, {"id": 1416, "seek": 1009180, "start": 10097.0, "end": 10102.599999999999, "text": " and therefore these columns would be linearly dependent and if these are dependent then this", "tokens": [50624, 293, 4412, 613, 13766, 576, 312, 43586, 12334, 293, 498, 613, 366, 12334, 550, 341, 50904], "temperature": 0.0, "avg_logprob": -0.04136049179803757, "compression_ratio": 1.931578947368421, "no_speech_prob": 0.0008558831759728491}, {"id": 1417, "seek": 1009180, "start": 10102.599999999999, "end": 10108.679999999998, "text": " has a non-trivial kernel so that's at least the sufficient that's at least one condition", "tokens": [50904, 575, 257, 2107, 12, 83, 470, 22640, 28256, 370, 300, 311, 412, 1935, 264, 11563, 300, 311, 412, 1935, 472, 4188, 51208], "temperature": 0.0, "avg_logprob": -0.04136049179803757, "compression_ratio": 1.931578947368421, "no_speech_prob": 0.0008558831759728491}, {"id": 1418, "seek": 1009180, "start": 10108.679999999998, "end": 10117.24, "text": " that's a necessary condition for this to have um a non-trivial kernel so we demand that these", "tokens": [51208, 300, 311, 257, 4818, 4188, 337, 341, 281, 362, 1105, 257, 2107, 12, 83, 470, 22640, 28256, 370, 321, 4733, 300, 613, 51636], "temperature": 0.0, "avg_logprob": -0.04136049179803757, "compression_ratio": 1.931578947368421, "no_speech_prob": 0.0008558831759728491}, {"id": 1419, "seek": 1011724, "start": 10117.24, "end": 10122.039999999999, "text": " functions are linearly independent but furthermore not only do we ask that these functions are", "tokens": [50364, 6828, 366, 43586, 6695, 457, 3052, 3138, 406, 787, 360, 321, 1029, 300, 613, 6828, 366, 50604], "temperature": 0.0, "avg_logprob": -0.04863568714686802, "compression_ratio": 2.005235602094241, "no_speech_prob": 0.06753432005643845}, {"id": 1420, "seek": 1011724, "start": 10122.039999999999, "end": 10127.08, "text": " linearly independent but it also implies that these specific vectors after we apply our data are", "tokens": [50604, 43586, 6695, 457, 309, 611, 18779, 300, 613, 2685, 18875, 934, 321, 3079, 527, 1412, 366, 50856], "temperature": 0.0, "avg_logprob": -0.04863568714686802, "compression_ratio": 2.005235602094241, "no_speech_prob": 0.06753432005643845}, {"id": 1421, "seek": 1011724, "start": 10127.08, "end": 10133.64, "text": " linearly independent but if d is much much much larger than k we only have very few of these", "tokens": [50856, 43586, 6695, 457, 498, 274, 307, 709, 709, 709, 4833, 813, 350, 321, 787, 362, 588, 1326, 295, 613, 51184], "temperature": 0.0, "avg_logprob": -0.04863568714686802, "compression_ratio": 2.005235602094241, "no_speech_prob": 0.06753432005643845}, {"id": 1422, "seek": 1011724, "start": 10133.64, "end": 10141.4, "text": " vectors right so the number of entries is d but we only have k vectors so it's kind of easy if you", "tokens": [51184, 18875, 558, 370, 264, 1230, 295, 23041, 307, 274, 457, 321, 787, 362, 350, 18875, 370, 309, 311, 733, 295, 1858, 498, 291, 51572], "temperature": 0.0, "avg_logprob": -0.04863568714686802, "compression_ratio": 2.005235602094241, "no_speech_prob": 0.06753432005643845}, {"id": 1423, "seek": 1014140, "start": 10141.4, "end": 10146.92, "text": " randomly chose if you arbitrary and randomly chose k vectors in a very large dimensional space", "tokens": [50364, 16979, 5111, 498, 291, 23211, 293, 16979, 5111, 350, 18875, 294, 257, 588, 2416, 18795, 1901, 50640], "temperature": 0.0, "avg_logprob": -0.08038059870402019, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.08880385756492615}, {"id": 1424, "seek": 1014140, "start": 10147.56, "end": 10153.64, "text": " randomly with almost almost surely it will be that those vectors are linearly independent", "tokens": [50672, 16979, 365, 1920, 1920, 11468, 309, 486, 312, 300, 729, 18875, 366, 43586, 6695, 50976], "temperature": 0.0, "avg_logprob": -0.08038059870402019, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.08880385756492615}, {"id": 1425, "seek": 1014140, "start": 10153.64, "end": 10162.92, "text": " think about it just choose random numbers so for example let's write pi e 1 2 square root of 3 3", "tokens": [50976, 519, 466, 309, 445, 2826, 4974, 3547, 370, 337, 1365, 718, 311, 2464, 3895, 308, 502, 568, 3732, 5593, 295, 805, 805, 51440], "temperature": 0.0, "avg_logprob": -0.08038059870402019, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.08880385756492615}, {"id": 1426, "seek": 1016292, "start": 10162.92, "end": 10173.4, "text": " and the vector 1 1 1 i'm pretty sure that these three vectors are linearly independent in r3 and", "tokens": [50364, 293, 264, 8062, 502, 502, 502, 741, 478, 1238, 988, 300, 613, 1045, 18875, 366, 43586, 6695, 294, 367, 18, 293, 50888], "temperature": 0.0, "avg_logprob": -0.09139741853226063, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.014502771198749542}, {"id": 1427, "seek": 1016292, "start": 10173.4, "end": 10179.0, "text": " i randomly chose them so even if d is not drastically larger than k but even if it's just", "tokens": [50888, 741, 16979, 5111, 552, 370, 754, 498, 274, 307, 406, 29673, 4833, 813, 350, 457, 754, 498, 309, 311, 445, 51168], "temperature": 0.0, "avg_logprob": -0.09139741853226063, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.014502771198749542}, {"id": 1428, "seek": 1016292, "start": 10179.0, "end": 10185.0, "text": " greater than k almost surely you'll pick linearly independent vectors so if your data is sufficiently", "tokens": [51168, 5044, 813, 350, 1920, 11468, 291, 603, 1888, 43586, 6695, 18875, 370, 498, 428, 1412, 307, 31868, 51468], "temperature": 0.0, "avg_logprob": -0.09139741853226063, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.014502771198749542}, {"id": 1429, "seek": 1016292, "start": 10185.0, "end": 10190.04, "text": " you know distributed well and it's not lying exactly on one line or something like that then", "tokens": [51468, 291, 458, 12631, 731, 293, 309, 311, 406, 8493, 2293, 322, 472, 1622, 420, 746, 411, 300, 550, 51720], "temperature": 0.0, "avg_logprob": -0.09139741853226063, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.014502771198749542}, {"id": 1430, "seek": 1019004, "start": 10190.04, "end": 10198.12, "text": " chances are these vectors are linearly independent so that's where it's going to be useful and in", "tokens": [50364, 10486, 366, 613, 18875, 366, 43586, 6695, 370, 300, 311, 689, 309, 311, 516, 281, 312, 4420, 293, 294, 50768], "temperature": 0.0, "avg_logprob": -0.05935496962472294, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0004044780507683754}, {"id": 1431, "seek": 1019004, "start": 10198.12, "end": 10203.480000000001, "text": " the next video we'll actually apply this to a simple example that you probably don't need a calculator", "tokens": [50768, 264, 958, 960, 321, 603, 767, 3079, 341, 281, 257, 2199, 1365, 300, 291, 1391, 500, 380, 643, 257, 24993, 51036], "temperature": 0.0, "avg_logprob": -0.05935496962472294, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0004044780507683754}, {"id": 1432, "seek": 1019004, "start": 10203.480000000001, "end": 10209.720000000001, "text": " to compute with in the next few videos we're going to be working with arithmetic modular two", "tokens": [51036, 281, 14722, 365, 294, 264, 958, 1326, 2145, 321, 434, 516, 281, 312, 1364, 365, 42973, 31111, 732, 51348], "temperature": 0.0, "avg_logprob": -0.05935496962472294, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0004044780507683754}, {"id": 1433, "seek": 1019004, "start": 10210.92, "end": 10217.960000000001, "text": " so we're going to deal with all even numbers are equal to zero and all odd numbers are equal to one", "tokens": [51408, 370, 321, 434, 516, 281, 2028, 365, 439, 754, 3547, 366, 2681, 281, 4018, 293, 439, 7401, 3547, 366, 2681, 281, 472, 51760], "temperature": 0.0, "avg_logprob": -0.05935496962472294, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0004044780507683754}, {"id": 1434, "seek": 1021796, "start": 10218.519999999999, "end": 10225.32, "text": " so for instance two times three is six which is an even number so zero and seven plus three", "tokens": [50392, 370, 337, 5197, 732, 1413, 1045, 307, 2309, 597, 307, 364, 754, 1230, 370, 4018, 293, 3407, 1804, 1045, 50732], "temperature": 0.0, "avg_logprob": -0.06598753152891647, "compression_ratio": 1.7932692307692308, "no_speech_prob": 0.0032728102523833513}, {"id": 1435, "seek": 1021796, "start": 10225.32, "end": 10231.48, "text": " is ten which is also even which is zero for another example is negative three equals one", "tokens": [50732, 307, 2064, 597, 307, 611, 754, 597, 307, 4018, 337, 1071, 1365, 307, 3671, 1045, 6915, 472, 51040], "temperature": 0.0, "avg_logprob": -0.06598753152891647, "compression_ratio": 1.7932692307692308, "no_speech_prob": 0.0032728102523833513}, {"id": 1436, "seek": 1021796, "start": 10231.48, "end": 10236.919999999998, "text": " in this case so anytime we do arithmetic for the most part when we add we're only going to be", "tokens": [51040, 294, 341, 1389, 370, 13038, 321, 360, 42973, 337, 264, 881, 644, 562, 321, 909, 321, 434, 787, 516, 281, 312, 51312], "temperature": 0.0, "avg_logprob": -0.06598753152891647, "compression_ratio": 1.7932692307692308, "no_speech_prob": 0.0032728102523833513}, {"id": 1437, "seek": 1021796, "start": 10236.919999999998, "end": 10243.0, "text": " caring about the parity of that number and this is going to be there are multiple reasons for this", "tokens": [51312, 15365, 466, 264, 44747, 295, 300, 1230, 293, 341, 307, 516, 281, 312, 456, 366, 3866, 4112, 337, 341, 51616], "temperature": 0.0, "avg_logprob": -0.06598753152891647, "compression_ratio": 1.7932692307692308, "no_speech_prob": 0.0032728102523833513}, {"id": 1438, "seek": 1024300, "start": 10243.0, "end": 10248.28, "text": " one of which is simplicity the other of which is is that it's related to computer science", "tokens": [50364, 472, 295, 597, 307, 25632, 264, 661, 295, 597, 307, 307, 300, 309, 311, 4077, 281, 3820, 3497, 50628], "temperature": 0.0, "avg_logprob": -0.05091971158981323, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.006692441180348396}, {"id": 1439, "seek": 1024300, "start": 10249.72, "end": 10258.44, "text": " so we're going to let z mod two be exactly those numbers and with the arithmetic that I just said", "tokens": [50700, 370, 321, 434, 516, 281, 718, 710, 1072, 732, 312, 2293, 729, 3547, 293, 365, 264, 42973, 300, 286, 445, 848, 51136], "temperature": 0.0, "avg_logprob": -0.05091971158981323, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.006692441180348396}, {"id": 1440, "seek": 1024300, "start": 10258.44, "end": 10263.64, "text": " so zero plus zero zero zero plus one is one one plus one is two which is zero and then", "tokens": [51136, 370, 4018, 1804, 4018, 4018, 4018, 1804, 472, 307, 472, 472, 1804, 472, 307, 732, 597, 307, 4018, 293, 550, 51396], "temperature": 0.0, "avg_logprob": -0.05091971158981323, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.006692441180348396}, {"id": 1441, "seek": 1024300, "start": 10263.64, "end": 10270.36, "text": " multiplication similarly zero times one is zero and one times one is one and we'll also work with", "tokens": [51396, 27290, 14138, 4018, 1413, 472, 307, 4018, 293, 472, 1413, 472, 307, 472, 293, 321, 603, 611, 589, 365, 51732], "temperature": 0.0, "avg_logprob": -0.05091971158981323, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.006692441180348396}, {"id": 1442, "seek": 1027036, "start": 10270.36, "end": 10280.84, "text": " vectors whose entries are elements of z mod two so these are going to be vectors of the form x one", "tokens": [50364, 18875, 6104, 23041, 366, 4959, 295, 710, 1072, 732, 370, 613, 366, 516, 281, 312, 18875, 295, 264, 1254, 2031, 472, 50888], "temperature": 0.0, "avg_logprob": -0.09744996873159258, "compression_ratio": 1.704225352112676, "no_speech_prob": 0.0028008073568344116}, {"id": 1443, "seek": 1027036, "start": 10280.84, "end": 10284.36, "text": " all the way up to x n where x one through x n", "tokens": [50888, 439, 264, 636, 493, 281, 2031, 297, 689, 2031, 472, 807, 2031, 297, 51064], "temperature": 0.0, "avg_logprob": -0.09744996873159258, "compression_ratio": 1.704225352112676, "no_speech_prob": 0.0028008073568344116}, {"id": 1444, "seek": 1027036, "start": 10287.480000000001, "end": 10294.6, "text": " are in z mod two and we can also do arithmetic the way we usually do with vectors with vectors of", "tokens": [51220, 366, 294, 710, 1072, 732, 293, 321, 393, 611, 360, 42973, 264, 636, 321, 2673, 360, 365, 18875, 365, 18875, 295, 51576], "temperature": 0.0, "avg_logprob": -0.09744996873159258, "compression_ratio": 1.704225352112676, "no_speech_prob": 0.0028008073568344116}, {"id": 1445, "seek": 1029460, "start": 10294.6, "end": 10301.24, "text": " this sort by just adding component wise and scalar multiplication on each components as well", "tokens": [50364, 341, 1333, 538, 445, 5127, 6542, 10829, 293, 39684, 27290, 322, 1184, 6677, 382, 731, 50696], "temperature": 0.0, "avg_logprob": -0.06001922686894735, "compression_ratio": 1.779874213836478, "no_speech_prob": 0.00970758218318224}, {"id": 1446, "seek": 1029460, "start": 10303.4, "end": 10311.720000000001, "text": " the interesting thing about this vector space is that unlike the vector space r to the n this", "tokens": [50804, 264, 1880, 551, 466, 341, 8062, 1901, 307, 300, 8343, 264, 8062, 1901, 367, 281, 264, 297, 341, 51220], "temperature": 0.0, "avg_logprob": -0.06001922686894735, "compression_ratio": 1.779874213836478, "no_speech_prob": 0.00970758218318224}, {"id": 1447, "seek": 1029460, "start": 10311.720000000001, "end": 10317.56, "text": " has finitely many vectors so how many vectors does this vector space have well first of all here", "tokens": [51220, 575, 962, 1959, 867, 18875, 370, 577, 867, 18875, 775, 341, 8062, 1901, 362, 731, 700, 295, 439, 510, 51512], "temperature": 0.0, "avg_logprob": -0.06001922686894735, "compression_ratio": 1.779874213836478, "no_speech_prob": 0.00970758218318224}, {"id": 1448, "seek": 1031756, "start": 10317.56, "end": 10327.4, "text": " there are two elements and if you have n component vectors think how many entries think what possibilities", "tokens": [50364, 456, 366, 732, 4959, 293, 498, 291, 362, 297, 6542, 18875, 519, 577, 867, 23041, 519, 437, 12178, 50856], "temperature": 0.0, "avg_logprob": -0.05977954467137655, "compression_ratio": 1.8392857142857142, "no_speech_prob": 0.012820357456803322}, {"id": 1449, "seek": 1031756, "start": 10327.4, "end": 10331.88, "text": " you can put in the first entry you can either put a zero or a one and as soon as you move to the next", "tokens": [50856, 291, 393, 829, 294, 264, 700, 8729, 291, 393, 2139, 829, 257, 4018, 420, 257, 472, 293, 382, 2321, 382, 291, 1286, 281, 264, 958, 51080], "temperature": 0.0, "avg_logprob": -0.05977954467137655, "compression_ratio": 1.8392857142857142, "no_speech_prob": 0.012820357456803322}, {"id": 1450, "seek": 1031756, "start": 10331.88, "end": 10337.96, "text": " entry you can also put a zero or a one and therefore each time you go through these entries you have", "tokens": [51080, 8729, 291, 393, 611, 829, 257, 4018, 420, 257, 472, 293, 4412, 1184, 565, 291, 352, 807, 613, 23041, 291, 362, 51384], "temperature": 0.0, "avg_logprob": -0.05977954467137655, "compression_ratio": 1.8392857142857142, "no_speech_prob": 0.012820357456803322}, {"id": 1451, "seek": 1033796, "start": 10338.599999999999, "end": 10349.88, "text": " two to the n total possibilities so the number of vectors in z mod two to the n is two to the n", "tokens": [50396, 732, 281, 264, 297, 3217, 12178, 370, 264, 1230, 295, 18875, 294, 710, 1072, 732, 281, 264, 297, 307, 732, 281, 264, 297, 50960], "temperature": 0.0, "avg_logprob": -0.07537490129470825, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.08034644275903702}, {"id": 1452, "seek": 1033796, "start": 10350.679999999998, "end": 10357.72, "text": " and one of those vectors is very special namely the zero vector and the non-zero vectors well", "tokens": [51000, 293, 472, 295, 729, 18875, 307, 588, 2121, 20926, 264, 4018, 8062, 293, 264, 2107, 12, 32226, 18875, 731, 51352], "temperature": 0.0, "avg_logprob": -0.07537490129470825, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.08034644275903702}, {"id": 1453, "seek": 1035772, "start": 10357.8, "end": 10359.4, "text": " there's just one less of them", "tokens": [50368, 456, 311, 445, 472, 1570, 295, 552, 50448], "temperature": 0.0, "avg_logprob": -0.08605414745854396, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.0003569653781596571}, {"id": 1454, "seek": 1035772, "start": 10364.76, "end": 10369.64, "text": " and i know that sounds like a trivial thing to point out but it'll actually be important", "tokens": [50716, 293, 741, 458, 300, 3263, 411, 257, 26703, 551, 281, 935, 484, 457, 309, 603, 767, 312, 1021, 50960], "temperature": 0.0, "avg_logprob": -0.08605414745854396, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.0003569653781596571}, {"id": 1455, "seek": 1035772, "start": 10369.64, "end": 10378.039999999999, "text": " in our discussion and so for example this is the main example that we'll be working with", "tokens": [50960, 294, 527, 5017, 293, 370, 337, 1365, 341, 307, 264, 2135, 1365, 300, 321, 603, 312, 1364, 365, 51380], "temperature": 0.0, "avg_logprob": -0.08605414745854396, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.0003569653781596571}, {"id": 1456, "seek": 1037804, "start": 10379.0, "end": 10383.160000000002, "text": " z mod two to the third power has seven non-zero vectors", "tokens": [50412, 710, 1072, 732, 281, 264, 2636, 1347, 575, 3407, 2107, 12, 32226, 18875, 50620], "temperature": 0.0, "avg_logprob": -0.07373495343365247, "compression_ratio": 1.64, "no_speech_prob": 0.0022517123725265265}, {"id": 1457, "seek": 1037804, "start": 10386.6, "end": 10393.800000000001, "text": " for example so let's make a definition first first we're going to be exploring a lot of", "tokens": [50792, 337, 1365, 370, 718, 311, 652, 257, 7123, 700, 700, 321, 434, 516, 281, 312, 12736, 257, 688, 295, 51152], "temperature": 0.0, "avg_logprob": -0.07373495343365247, "compression_ratio": 1.64, "no_speech_prob": 0.0022517123725265265}, {"id": 1458, "seek": 1037804, "start": 10393.800000000001, "end": 10399.720000000001, "text": " mathematical curiosities and then we'll see how they apply to an actual physical situation", "tokens": [51152, 18894, 13625, 1088, 293, 550, 321, 603, 536, 577, 436, 3079, 281, 364, 3539, 4001, 2590, 51448], "temperature": 0.0, "avg_logprob": -0.07373495343365247, "compression_ratio": 1.64, "no_speech_prob": 0.0022517123725265265}, {"id": 1459, "seek": 1037804, "start": 10400.6, "end": 10404.68, "text": " and i rather you have a little bit of suspense before we get there so first we're going to do", "tokens": [51492, 293, 741, 2831, 291, 362, 257, 707, 857, 295, 47803, 949, 321, 483, 456, 370, 700, 321, 434, 516, 281, 360, 51696], "temperature": 0.0, "avg_logprob": -0.07373495343365247, "compression_ratio": 1.64, "no_speech_prob": 0.0022517123725265265}, {"id": 1460, "seek": 1040468, "start": 10404.68, "end": 10409.720000000001, "text": " some math and then we'll talk about the applications so a hamming matrix", "tokens": [50364, 512, 5221, 293, 550, 321, 603, 751, 466, 264, 5821, 370, 257, 36600, 278, 8141, 50616], "temperature": 0.0, "avg_logprob": -0.1379287815093994, "compression_ratio": 1.1466666666666667, "no_speech_prob": 0.007345153950154781}, {"id": 1461, "seek": 1040468, "start": 10414.84, "end": 10417.08, "text": " is a matrix h", "tokens": [50872, 307, 257, 8141, 276, 50984], "temperature": 0.0, "avg_logprob": -0.1379287815093994, "compression_ratio": 1.1466666666666667, "no_speech_prob": 0.007345153950154781}, {"id": 1462, "seek": 1041708, "start": 10417.48, "end": 10428.44, "text": " with k rows and the columns", "tokens": [50384, 365, 350, 13241, 293, 264, 13766, 50932], "temperature": 0.0, "avg_logprob": -0.21643608808517456, "compression_ratio": 1.0149253731343284, "no_speech_prob": 0.06277497112751007}, {"id": 1463, "seek": 1041708, "start": 10430.84, "end": 10435.72, "text": " of h consist of all", "tokens": [51052, 295, 276, 4603, 295, 439, 51296], "temperature": 0.0, "avg_logprob": -0.21643608808517456, "compression_ratio": 1.0149253731343284, "no_speech_prob": 0.06277497112751007}, {"id": 1464, "seek": 1041708, "start": 10439.0, "end": 10440.52, "text": " the non-zero vectors", "tokens": [51460, 264, 2107, 12, 32226, 18875, 51536], "temperature": 0.0, "avg_logprob": -0.21643608808517456, "compression_ratio": 1.0149253731343284, "no_speech_prob": 0.06277497112751007}, {"id": 1465, "seek": 1044052, "start": 10440.92, "end": 10452.84, "text": " in z mod two to the kth power so k here is a non negative integer in fact let's just", "tokens": [50384, 294, 710, 1072, 732, 281, 264, 350, 392, 1347, 370, 350, 510, 307, 257, 2107, 3671, 24922, 294, 1186, 718, 311, 445, 50980], "temperature": 0.0, "avg_logprob": -0.11501285995262256, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.004331185482442379}, {"id": 1466, "seek": 1044052, "start": 10453.640000000001, "end": 10464.12, "text": " yes suppose it's a positive integer so for example when k is three we have seven non-zero", "tokens": [51020, 2086, 7297, 309, 311, 257, 3353, 24922, 370, 337, 1365, 562, 350, 307, 1045, 321, 362, 3407, 2107, 12, 32226, 51544], "temperature": 0.0, "avg_logprob": -0.11501285995262256, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.004331185482442379}, {"id": 1467, "seek": 1044052, "start": 10464.12, "end": 10469.4, "text": " vectors and what this is telling us all right now let's try to understand these two matrices a", "tokens": [51544, 18875, 293, 437, 341, 307, 3585, 505, 439, 558, 586, 718, 311, 853, 281, 1223, 613, 732, 32284, 257, 51808], "temperature": 0.0, "avg_logprob": -0.11501285995262256, "compression_ratio": 1.5284090909090908, "no_speech_prob": 0.004331185482442379}, {"id": 1468, "seek": 1046940, "start": 10469.4, "end": 10476.76, "text": " little bit more the matrices m and h that we introduced earlier so recall that h was the matrix", "tokens": [50364, 707, 857, 544, 264, 32284, 275, 293, 276, 300, 321, 7268, 3071, 370, 9901, 300, 276, 390, 264, 8141, 50732], "temperature": 0.0, "avg_logprob": -0.04901828998472632, "compression_ratio": 1.8426395939086295, "no_speech_prob": 0.004609015770256519}, {"id": 1469, "seek": 1046940, "start": 10476.76, "end": 10483.72, "text": " it was the identity matrix a three by three in this case and another matrix q and m", "tokens": [50732, 309, 390, 264, 6575, 8141, 257, 1045, 538, 1045, 294, 341, 1389, 293, 1071, 8141, 9505, 293, 275, 51080], "temperature": 0.0, "avg_logprob": -0.04901828998472632, "compression_ratio": 1.8426395939086295, "no_speech_prob": 0.004609015770256519}, {"id": 1470, "seek": 1046940, "start": 10485.88, "end": 10491.32, "text": " was q and then the identity four by four matrix and both of these numbers can be generalized", "tokens": [51188, 390, 9505, 293, 550, 264, 6575, 1451, 538, 1451, 8141, 293, 1293, 295, 613, 3547, 393, 312, 44498, 51460], "temperature": 0.0, "avg_logprob": -0.04901828998472632, "compression_ratio": 1.8426395939086295, "no_speech_prob": 0.004609015770256519}, {"id": 1471, "seek": 1046940, "start": 10491.32, "end": 10497.0, "text": " as long as it's an appropriate size and it satisfies the requirements that we made earlier", "tokens": [51460, 382, 938, 382, 309, 311, 364, 6854, 2744, 293, 309, 44271, 264, 7728, 300, 321, 1027, 3071, 51744], "temperature": 0.0, "avg_logprob": -0.04901828998472632, "compression_ratio": 1.8426395939086295, "no_speech_prob": 0.004609015770256519}, {"id": 1472, "seek": 1049700, "start": 10497.0, "end": 10502.52, "text": " namely that h consists of all of the non-zero vectors in the vector space", "tokens": [50364, 20926, 300, 276, 14689, 295, 439, 295, 264, 2107, 12, 32226, 18875, 294, 264, 8062, 1901, 50640], "temperature": 0.0, "avg_logprob": -0.06537638483820735, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0014102676650509238}, {"id": 1473, "seek": 1049700, "start": 10504.04, "end": 10508.6, "text": " z mod two to the power where the power is determined by the number of rows here", "tokens": [50716, 710, 1072, 732, 281, 264, 1347, 689, 264, 1347, 307, 9540, 538, 264, 1230, 295, 13241, 510, 50944], "temperature": 0.0, "avg_logprob": -0.06537638483820735, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0014102676650509238}, {"id": 1474, "seek": 1049700, "start": 10510.2, "end": 10514.2, "text": " so given the setup let's introduce a little bit more notation", "tokens": [51024, 370, 2212, 264, 8657, 718, 311, 5366, 257, 707, 857, 544, 24657, 51224], "temperature": 0.0, "avg_logprob": -0.06537638483820735, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0014102676650509238}, {"id": 1475, "seek": 1049700, "start": 10515.16, "end": 10521.08, "text": " and that notation is going to be we're going to define these that subspace which was the", "tokens": [51272, 293, 300, 24657, 307, 516, 281, 312, 321, 434, 516, 281, 6964, 613, 300, 2090, 17940, 597, 390, 264, 51568], "temperature": 0.0, "avg_logprob": -0.06537638483820735, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0014102676650509238}, {"id": 1476, "seek": 1052108, "start": 10521.08, "end": 10528.44, "text": " kernel of h and also the image of m so let's call these image of m which is also the kernel of m", "tokens": [50364, 28256, 295, 276, 293, 611, 264, 3256, 295, 275, 370, 718, 311, 818, 613, 3256, 295, 275, 597, 307, 611, 264, 28256, 295, 275, 50732], "temperature": 0.0, "avg_logprob": -0.05395952860514323, "compression_ratio": 1.727810650887574, "no_speech_prob": 0.006487712264060974}, {"id": 1477, "seek": 1052108, "start": 10530.039999999999, "end": 10539.32, "text": " kernel of h rather let's denote this by c so for the rest of these videos c will refer to exactly", "tokens": [50812, 28256, 295, 276, 2831, 718, 311, 45708, 341, 538, 269, 370, 337, 264, 1472, 295, 613, 2145, 269, 486, 2864, 281, 2293, 51276], "temperature": 0.0, "avg_logprob": -0.05395952860514323, "compression_ratio": 1.727810650887574, "no_speech_prob": 0.006487712264060974}, {"id": 1478, "seek": 1052108, "start": 10539.32, "end": 10546.6, "text": " that subspace now remember this is a four-dimensional subspace inside of z mod two to the seventh", "tokens": [51276, 300, 2090, 17940, 586, 1604, 341, 307, 257, 1451, 12, 18759, 2090, 17940, 1854, 295, 710, 1072, 732, 281, 264, 17875, 51640], "temperature": 0.0, "avg_logprob": -0.05395952860514323, "compression_ratio": 1.727810650887574, "no_speech_prob": 0.006487712264060974}, {"id": 1479, "seek": 1054660, "start": 10547.56, "end": 10550.6, "text": " okay we're also going to introduce other notation", "tokens": [50412, 1392, 321, 434, 611, 516, 281, 5366, 661, 24657, 50564], "temperature": 0.0, "avg_logprob": -0.12016950334821429, "compression_ratio": 1.5032258064516129, "no_speech_prob": 0.0019876956939697266}, {"id": 1480, "seek": 1054660, "start": 10552.28, "end": 10562.52, "text": " let's see subscript i be that subspace shifted by the i-th unit vector in z mod two so it's", "tokens": [50648, 718, 311, 536, 2325, 662, 741, 312, 300, 2090, 17940, 18892, 538, 264, 741, 12, 392, 4985, 8062, 294, 710, 1072, 732, 370, 309, 311, 51160], "temperature": 0.0, "avg_logprob": -0.12016950334821429, "compression_ratio": 1.5032258064516129, "no_speech_prob": 0.0019876956939697266}, {"id": 1481, "seek": 1054660, "start": 10562.52, "end": 10570.68, "text": " going to be c plus e i and this just means by definition the set of all vectors of the form", "tokens": [51160, 516, 281, 312, 269, 1804, 308, 741, 293, 341, 445, 1355, 538, 7123, 264, 992, 295, 439, 18875, 295, 264, 1254, 51568], "temperature": 0.0, "avg_logprob": -0.12016950334821429, "compression_ratio": 1.5032258064516129, "no_speech_prob": 0.0019876956939697266}, {"id": 1482, "seek": 1057068, "start": 10570.68, "end": 10579.32, "text": " v plus e i where v is in c", "tokens": [50364, 371, 1804, 308, 741, 689, 371, 307, 294, 269, 50796], "temperature": 0.0, "avg_logprob": -0.12550671058788634, "compression_ratio": 1.6377952755905512, "no_speech_prob": 0.0003920358431059867}, {"id": 1483, "seek": 1057068, "start": 10581.720000000001, "end": 10587.4, "text": " now this is not a subspace right because we can't add two vectors and stay within the subspace", "tokens": [50916, 586, 341, 307, 406, 257, 2090, 17940, 558, 570, 321, 393, 380, 909, 732, 18875, 293, 1754, 1951, 264, 2090, 17940, 51200], "temperature": 0.0, "avg_logprob": -0.12550671058788634, "compression_ratio": 1.6377952755905512, "no_speech_prob": 0.0003920358431059867}, {"id": 1484, "seek": 1057068, "start": 10588.28, "end": 10594.52, "text": " yes stay within the subset but at the very least you can think of this as the subspace", "tokens": [51244, 2086, 1754, 1951, 264, 25993, 457, 412, 264, 588, 1935, 291, 393, 519, 295, 341, 382, 264, 2090, 17940, 51556], "temperature": 0.0, "avg_logprob": -0.12550671058788634, "compression_ratio": 1.6377952755905512, "no_speech_prob": 0.0003920358431059867}, {"id": 1485, "seek": 1059452, "start": 10594.52, "end": 10597.48, "text": " shifted by some vector and we can define this for all i", "tokens": [50364, 18892, 538, 512, 8062, 293, 321, 393, 6964, 341, 337, 439, 741, 50512], "temperature": 0.0, "avg_logprob": -0.08832240956170219, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.007121196016669273}, {"id": 1486, "seek": 1059452, "start": 10600.84, "end": 10605.720000000001, "text": " between one and seven because that's how many non-zero vectors there are", "tokens": [50680, 1296, 472, 293, 3407, 570, 300, 311, 577, 867, 2107, 12, 32226, 18875, 456, 366, 50924], "temperature": 0.0, "avg_logprob": -0.08832240956170219, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.007121196016669273}, {"id": 1487, "seek": 1059452, "start": 10605.720000000001, "end": 10613.32, "text": " in sorry that's that's that gives us a basis of vectors in z mod two to the seventh power", "tokens": [50924, 294, 2597, 300, 311, 300, 311, 300, 2709, 505, 257, 5143, 295, 18875, 294, 710, 1072, 732, 281, 264, 17875, 1347, 51304], "temperature": 0.0, "avg_logprob": -0.08832240956170219, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.007121196016669273}, {"id": 1488, "seek": 1061332, "start": 10614.119999999999, "end": 10623.48, "text": " and now let's write some additional facts regarding these subs these subsets", "tokens": [50404, 293, 586, 718, 311, 2464, 512, 4497, 9130, 8595, 613, 2090, 613, 2090, 1385, 50872], "temperature": 0.0, "avg_logprob": -0.07833303389002065, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.00912520382553339}, {"id": 1489, "seek": 1061332, "start": 10628.199999999999, "end": 10635.4, "text": " so the first thing is that we already know that c is the solution set of a homogeneous system", "tokens": [51108, 370, 264, 700, 551, 307, 300, 321, 1217, 458, 300, 269, 307, 264, 3827, 992, 295, 257, 42632, 1185, 51468], "temperature": 0.0, "avg_logprob": -0.07833303389002065, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.00912520382553339}, {"id": 1490, "seek": 1061332, "start": 10635.4, "end": 10641.4, "text": " namely it's the kernel of h ci is also the solution set of some system though it's no", "tokens": [51468, 20926, 309, 311, 264, 28256, 295, 276, 6983, 307, 611, 264, 3827, 992, 295, 512, 1185, 1673, 309, 311, 572, 51768], "temperature": 0.0, "avg_logprob": -0.07833303389002065, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.00912520382553339}, {"id": 1491, "seek": 1064140, "start": 10641.4, "end": 10654.68, "text": " longer homogeneous ci is the solution set of the inhomogeneous system h x equals h e i", "tokens": [50364, 2854, 42632, 6983, 307, 264, 3827, 992, 295, 264, 47707, 298, 31112, 1185, 276, 2031, 6915, 276, 308, 741, 51028], "temperature": 0.0, "avg_logprob": -0.1312026279728587, "compression_ratio": 1.4554455445544554, "no_speech_prob": 0.0057299090549349785}, {"id": 1492, "seek": 1064140, "start": 10657.16, "end": 10668.6, "text": " where this is this whole thing h e i is the i-th column of h", "tokens": [51152, 689, 341, 307, 341, 1379, 551, 276, 308, 741, 307, 264, 741, 12, 392, 7738, 295, 276, 51724], "temperature": 0.0, "avg_logprob": -0.1312026279728587, "compression_ratio": 1.4554455445544554, "no_speech_prob": 0.0057299090549349785}, {"id": 1493, "seek": 1067140, "start": 10671.56, "end": 10673.24, "text": " secondly", "tokens": [50372, 26246, 50456], "temperature": 0.0, "avg_logprob": -0.13822825505183292, "compression_ratio": 1.5944055944055944, "no_speech_prob": 0.001098708133213222}, {"id": 1494, "seek": 1067140, "start": 10676.68, "end": 10686.359999999999, "text": " if we take any two of these different subsets ci and cj then ci intersect cj so if we look at all", "tokens": [50628, 498, 321, 747, 604, 732, 295, 613, 819, 2090, 1385, 6983, 293, 269, 73, 550, 6983, 27815, 269, 73, 370, 498, 321, 574, 412, 439, 51112], "temperature": 0.0, "avg_logprob": -0.13822825505183292, "compression_ratio": 1.5944055944055944, "no_speech_prob": 0.001098708133213222}, {"id": 1495, "seek": 1067140, "start": 10686.359999999999, "end": 10692.359999999999, "text": " of the vectors that are common to both of them it turns out there are none so it's the empty set", "tokens": [51112, 295, 264, 18875, 300, 366, 2689, 281, 1293, 295, 552, 309, 4523, 484, 456, 366, 6022, 370, 309, 311, 264, 6707, 992, 51412], "temperature": 0.0, "avg_logprob": -0.13822825505183292, "compression_ratio": 1.5944055944055944, "no_speech_prob": 0.001098708133213222}, {"id": 1496, "seek": 1067140, "start": 10693.08, "end": 10695.8, "text": " for all i not equal to j", "tokens": [51448, 337, 439, 741, 406, 2681, 281, 361, 51584], "temperature": 0.0, "avg_logprob": -0.13822825505183292, "compression_ratio": 1.5944055944055944, "no_speech_prob": 0.001098708133213222}, {"id": 1497, "seek": 1069580, "start": 10696.599999999999, "end": 10700.599999999999, "text": " third", "tokens": [50404, 2636, 50604], "temperature": 0.0, "avg_logprob": -0.16204618083106148, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.006097087636590004}, {"id": 1498, "seek": 1069580, "start": 10703.56, "end": 10710.359999999999, "text": " each of these subsets are also disjoint from the solution set of the homogeneous system", "tokens": [50752, 1184, 295, 613, 2090, 1385, 366, 611, 717, 48613, 490, 264, 3827, 992, 295, 264, 42632, 1185, 51092], "temperature": 0.0, "avg_logprob": -0.16204618083106148, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.006097087636590004}, {"id": 1499, "seek": 1069580, "start": 10711.08, "end": 10715.8, "text": " so c intersect ci is also empty for all i", "tokens": [51128, 370, 269, 27815, 6983, 307, 611, 6707, 337, 439, 741, 51364], "temperature": 0.0, "avg_logprob": -0.16204618083106148, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.006097087636590004}, {"id": 1500, "seek": 1071580, "start": 10716.759999999998, "end": 10725.16, "text": " and finally and this is maybe the most interesting part of it is that", "tokens": [50412, 293, 2721, 293, 341, 307, 1310, 264, 881, 1880, 644, 295, 309, 307, 300, 50832], "temperature": 0.0, "avg_logprob": -0.07861159529004778, "compression_ratio": 1.6597222222222223, "no_speech_prob": 0.016150064766407013}, {"id": 1501, "seek": 1071580, "start": 10727.64, "end": 10733.96, "text": " the entire vector space of all vectors is the union of every single one of these", "tokens": [50956, 264, 2302, 8062, 1901, 295, 439, 18875, 307, 264, 11671, 295, 633, 2167, 472, 295, 613, 51272], "temperature": 0.0, "avg_logprob": -0.07861159529004778, "compression_ratio": 1.6597222222222223, "no_speech_prob": 0.016150064766407013}, {"id": 1502, "seek": 1071580, "start": 10734.84, "end": 10742.279999999999, "text": " so it's the solution set of the homogeneous system with all of these other inhomogeneous", "tokens": [51316, 370, 309, 311, 264, 3827, 992, 295, 264, 42632, 1185, 365, 439, 295, 613, 661, 47707, 298, 31112, 51688], "temperature": 0.0, "avg_logprob": -0.07861159529004778, "compression_ratio": 1.6597222222222223, "no_speech_prob": 0.016150064766407013}, {"id": 1503, "seek": 1074228, "start": 10742.28, "end": 10751.0, "text": " solution sets and because these are all disjoint this is a disjoint union", "tokens": [50364, 3827, 6352, 293, 570, 613, 366, 439, 717, 48613, 341, 307, 257, 717, 48613, 11671, 50800], "temperature": 0.0, "avg_logprob": -0.0856631218440949, "compression_ratio": 1.7602739726027397, "no_speech_prob": 0.0010649083415046334}, {"id": 1504, "seek": 1074228, "start": 10751.0, "end": 10758.84, "text": " so every vector in z mod 2 is in exactly one of these subsets it's either a solution set of", "tokens": [50800, 370, 633, 8062, 294, 710, 1072, 568, 307, 294, 2293, 472, 295, 613, 2090, 1385, 309, 311, 2139, 257, 3827, 992, 295, 51192], "temperature": 0.0, "avg_logprob": -0.0856631218440949, "compression_ratio": 1.7602739726027397, "no_speech_prob": 0.0010649083415046334}, {"id": 1505, "seek": 1074228, "start": 10758.84, "end": 10765.480000000001, "text": " the homogeneous system or it's in one of these solution sets of the different inhomogeneous", "tokens": [51192, 264, 42632, 1185, 420, 309, 311, 294, 472, 295, 613, 3827, 6352, 295, 264, 819, 47707, 298, 31112, 51524], "temperature": 0.0, "avg_logprob": -0.0856631218440949, "compression_ratio": 1.7602739726027397, "no_speech_prob": 0.0010649083415046334}, {"id": 1506, "seek": 1076548, "start": 10765.48, "end": 10773.4, "text": " systems so this is a very important claim so let's actually let's actually prove it", "tokens": [50364, 3652, 370, 341, 307, 257, 588, 1021, 3932, 370, 718, 311, 767, 718, 311, 767, 7081, 309, 50760], "temperature": 0.0, "avg_logprob": -0.05378304261427659, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.018262119963765144}, {"id": 1507, "seek": 1076548, "start": 10776.92, "end": 10786.119999999999, "text": " so the first claim now when we solve inhomogeneous systems all we have to do is find one particular", "tokens": [50936, 370, 264, 700, 3932, 586, 562, 321, 5039, 47707, 298, 31112, 3652, 439, 321, 362, 281, 360, 307, 915, 472, 1729, 51396], "temperature": 0.0, "avg_logprob": -0.05378304261427659, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.018262119963765144}, {"id": 1508, "seek": 1076548, "start": 10786.119999999999, "end": 10791.56, "text": " solution and if we find that a solution exists then the solution set of the inhomogeneous system", "tokens": [51396, 3827, 293, 498, 321, 915, 300, 257, 3827, 8198, 550, 264, 3827, 992, 295, 264, 47707, 298, 31112, 1185, 51668], "temperature": 0.0, "avg_logprob": -0.05378304261427659, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.018262119963765144}, {"id": 1509, "seek": 1079156, "start": 10791.56, "end": 10795.88, "text": " is that particular solution plus the homogeneous solution that we obtained", "tokens": [50364, 307, 300, 1729, 3827, 1804, 264, 42632, 3827, 300, 321, 14879, 50580], "temperature": 0.0, "avg_logprob": -0.07837164402008057, "compression_ratio": 1.7933333333333332, "no_speech_prob": 0.0009399168775416911}, {"id": 1510, "seek": 1079156, "start": 10797.0, "end": 10805.88, "text": " from solving well for the kernel of h so notice however that we can just take x to be e i to get", "tokens": [50636, 490, 12606, 731, 337, 264, 28256, 295, 276, 370, 3449, 4461, 300, 321, 393, 445, 747, 2031, 281, 312, 308, 741, 281, 483, 51080], "temperature": 0.0, "avg_logprob": -0.07837164402008057, "compression_ratio": 1.7933333333333332, "no_speech_prob": 0.0009399168775416911}, {"id": 1511, "seek": 1079156, "start": 10805.88, "end": 10819.4, "text": " a solution set so e i is a particular solution and therefore the solution set of the whole system", "tokens": [51080, 257, 3827, 992, 370, 308, 741, 307, 257, 1729, 3827, 293, 4412, 264, 3827, 992, 295, 264, 1379, 1185, 51756], "temperature": 0.0, "avg_logprob": -0.07837164402008057, "compression_ratio": 1.7933333333333332, "no_speech_prob": 0.0009399168775416911}, {"id": 1512, "seek": 1082156, "start": 10822.279999999999, "end": 10834.039999999999, "text": " of h x equals h e i is that particular solution plus the homogeneous one", "tokens": [50400, 295, 276, 2031, 6915, 276, 308, 741, 307, 300, 1729, 3827, 1804, 264, 42632, 472, 50988], "temperature": 0.0, "avg_logprob": -0.11484511332078413, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.0010004729265347123}, {"id": 1513, "seek": 1082156, "start": 10836.76, "end": 10845.4, "text": " and that's exactly what the claim is c i is the solution set of this now let's look at the second", "tokens": [51124, 293, 300, 311, 2293, 437, 264, 3932, 307, 269, 741, 307, 264, 3827, 992, 295, 341, 586, 718, 311, 574, 412, 264, 1150, 51556], "temperature": 0.0, "avg_logprob": -0.11484511332078413, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.0010004729265347123}, {"id": 1514, "seek": 1084540, "start": 10845.48, "end": 10853.16, "text": " claim the second claim says that these are all different all of these subsets for different i", "tokens": [50368, 3932, 264, 1150, 3932, 1619, 300, 613, 366, 439, 819, 439, 295, 613, 2090, 1385, 337, 819, 741, 50752], "temperature": 0.0, "avg_logprob": -0.0709726441074425, "compression_ratio": 1.7804878048780488, "no_speech_prob": 0.05260666459798813}, {"id": 1515, "seek": 1084540, "start": 10853.16, "end": 10864.199999999999, "text": " and j have no common intersection so in order to prove that let's pick two vectors one in c i one in", "tokens": [50752, 293, 361, 362, 572, 2689, 15236, 370, 294, 1668, 281, 7081, 300, 718, 311, 1888, 732, 18875, 472, 294, 269, 741, 472, 294, 51304], "temperature": 0.0, "avg_logprob": -0.0709726441074425, "compression_ratio": 1.7804878048780488, "no_speech_prob": 0.05260666459798813}, {"id": 1516, "seek": 1084540, "start": 10864.199999999999, "end": 10869.96, "text": " c j and they're going to be relatively they're going to be arbitrary and then we're going to show", "tokens": [51304, 269, 361, 293, 436, 434, 516, 281, 312, 7226, 436, 434, 516, 281, 312, 23211, 293, 550, 321, 434, 516, 281, 855, 51592], "temperature": 0.0, "avg_logprob": -0.0709726441074425, "compression_ratio": 1.7804878048780488, "no_speech_prob": 0.05260666459798813}, {"id": 1517, "seek": 1086996, "start": 10869.96, "end": 10875.4, "text": " that the only way that they can be equal to each other is if those subscripts are equal if i and", "tokens": [50364, 300, 264, 787, 636, 300, 436, 393, 312, 2681, 281, 1184, 661, 307, 498, 729, 2325, 39280, 366, 2681, 498, 741, 293, 50636], "temperature": 0.0, "avg_logprob": -0.03973228250231062, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.02297358401119709}, {"id": 1518, "seek": 1086996, "start": 10875.4, "end": 10883.8, "text": " j are equal so let's start suppose that we have two vectors now because we're a solution set of", "tokens": [50636, 361, 366, 2681, 370, 718, 311, 722, 7297, 300, 321, 362, 732, 18875, 586, 570, 321, 434, 257, 3827, 992, 295, 51056], "temperature": 0.0, "avg_logprob": -0.03973228250231062, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.02297358401119709}, {"id": 1519, "seek": 1086996, "start": 10883.8, "end": 10888.839999999998, "text": " the homogeneous system the kernel of h and the kernel of h equals the image of h our vectors", "tokens": [51056, 264, 42632, 1185, 264, 28256, 295, 276, 293, 264, 28256, 295, 276, 6915, 264, 3256, 295, 276, 527, 18875, 51308], "temperature": 0.0, "avg_logprob": -0.03973228250231062, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.02297358401119709}, {"id": 1520, "seek": 1088884, "start": 10888.84, "end": 10901.32, "text": " are going to have this form so suppose m u 1 plus e i so this is our vector in c i equals m u 2 because", "tokens": [50364, 366, 516, 281, 362, 341, 1254, 370, 7297, 275, 344, 502, 1804, 308, 741, 370, 341, 307, 527, 8062, 294, 269, 741, 6915, 275, 344, 568, 570, 50988], "temperature": 0.0, "avg_logprob": -0.08998994450820119, "compression_ratio": 1.80625, "no_speech_prob": 0.17777472734451294}, {"id": 1521, "seek": 1088884, "start": 10901.32, "end": 10906.2, "text": " we don't know if right these two could have different they have come from different vectors", "tokens": [50988, 321, 500, 380, 458, 498, 558, 613, 732, 727, 362, 819, 436, 362, 808, 490, 819, 18875, 51232], "temperature": 0.0, "avg_logprob": -0.08998994450820119, "compression_ratio": 1.80625, "no_speech_prob": 0.17777472734451294}, {"id": 1522, "seek": 1088884, "start": 10907.0, "end": 10913.56, "text": " plus e j so suppose these we have these two vectors and this one is in c i this one is in c j", "tokens": [51272, 1804, 308, 361, 370, 7297, 613, 321, 362, 613, 732, 18875, 293, 341, 472, 307, 294, 269, 741, 341, 472, 307, 294, 269, 361, 51600], "temperature": 0.0, "avg_logprob": -0.08998994450820119, "compression_ratio": 1.80625, "no_speech_prob": 0.17777472734451294}, {"id": 1523, "seek": 1091356, "start": 10914.279999999999, "end": 10922.279999999999, "text": " okay now if we apply h to these vectors so let me just write that this is in c i this is in c j so we're totally", "tokens": [50400, 1392, 586, 498, 321, 3079, 276, 281, 613, 18875, 370, 718, 385, 445, 2464, 300, 341, 307, 294, 269, 741, 341, 307, 294, 269, 361, 370, 321, 434, 3879, 50800], "temperature": 0.0, "avg_logprob": -0.21609871342497053, "compression_ratio": 1.633587786259542, "no_speech_prob": 0.005219870246946812}, {"id": 1524, "seek": 1091356, "start": 10922.279999999999, "end": 10935.4, "text": " clear now apply h to these this to this equality what happens well because these functions are linear", "tokens": [50800, 1850, 586, 3079, 276, 281, 613, 341, 281, 341, 14949, 437, 2314, 731, 570, 613, 6828, 366, 8213, 51456], "temperature": 0.0, "avg_logprob": -0.21609871342497053, "compression_ratio": 1.633587786259542, "no_speech_prob": 0.005219870246946812}, {"id": 1525, "seek": 1093540, "start": 10936.359999999999, "end": 10952.359999999999, "text": " and we apply h to both on the left hand side this becomes h m u 1 plus h e i equals h m u 2 plus h e j", "tokens": [50412, 293, 321, 3079, 276, 281, 1293, 322, 264, 1411, 1011, 1252, 341, 3643, 276, 275, 344, 502, 1804, 276, 308, 741, 6915, 276, 275, 344, 568, 1804, 276, 308, 361, 51212], "temperature": 0.0, "avg_logprob": -0.1854136836144232, "compression_ratio": 1.5625, "no_speech_prob": 0.07806463539600372}, {"id": 1526, "seek": 1093540, "start": 10953.72, "end": 10963.24, "text": " right and h m of u 1 is zero because h m is the zero matrix so this is zero that's zero and we're", "tokens": [51280, 558, 293, 276, 275, 295, 344, 502, 307, 4018, 570, 276, 275, 307, 264, 4018, 8141, 370, 341, 307, 4018, 300, 311, 4018, 293, 321, 434, 51756], "temperature": 0.0, "avg_logprob": -0.1854136836144232, "compression_ratio": 1.5625, "no_speech_prob": 0.07806463539600372}, {"id": 1527, "seek": 1096324, "start": 10963.4, "end": 10972.039999999999, "text": " left with h e i equals h e j now the only way that this is possible is if i and j are both equal to", "tokens": [50372, 1411, 365, 276, 308, 741, 6915, 276, 308, 361, 586, 264, 787, 636, 300, 341, 307, 1944, 307, 498, 741, 293, 361, 366, 1293, 2681, 281, 50804], "temperature": 0.0, "avg_logprob": -0.05928400235298353, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0029807528480887413}, {"id": 1528, "seek": 1096324, "start": 10972.039999999999, "end": 10981.64, "text": " each other and the reason is because h by definition is the set of all non-zero vectors in z mod 2 to", "tokens": [50804, 1184, 661, 293, 264, 1778, 307, 570, 276, 538, 7123, 307, 264, 992, 295, 439, 2107, 12, 32226, 18875, 294, 710, 1072, 568, 281, 51284], "temperature": 0.0, "avg_logprob": -0.05928400235298353, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0029807528480887413}, {"id": 1529, "seek": 1096324, "start": 10981.64, "end": 10987.96, "text": " the third power and they never repeat so we only use those vectors once and only one so to better", "tokens": [51284, 264, 2636, 1347, 293, 436, 1128, 7149, 370, 321, 787, 764, 729, 18875, 1564, 293, 787, 472, 370, 281, 1101, 51600], "temperature": 0.0, "avg_logprob": -0.05928400235298353, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.0029807528480887413}, {"id": 1530, "seek": 1098796, "start": 10988.039999999999, "end": 10995.4, "text": " understand this application let's first notice that if we apply m acting on any vector u the", "tokens": [50368, 1223, 341, 3861, 718, 311, 700, 3449, 300, 498, 321, 3079, 275, 6577, 322, 604, 8062, 344, 264, 50736], "temperature": 0.0, "avg_logprob": -0.040346259802160125, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.013635541312396526}, {"id": 1531, "seek": 1098796, "start": 10995.4, "end": 11003.72, "text": " vector we get is q applied to u in the top part of that um entries of those of that vector and we", "tokens": [50736, 8062, 321, 483, 307, 9505, 6456, 281, 344, 294, 264, 1192, 644, 295, 300, 1105, 23041, 295, 729, 295, 300, 8062, 293, 321, 51152], "temperature": 0.0, "avg_logprob": -0.040346259802160125, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.013635541312396526}, {"id": 1532, "seek": 1098796, "start": 11003.72, "end": 11010.439999999999, "text": " retain a copy of u in the bottom this is because the matrix m was q on top and then the identity", "tokens": [51152, 18340, 257, 5055, 295, 344, 294, 264, 2767, 341, 307, 570, 264, 8141, 275, 390, 9505, 322, 1192, 293, 550, 264, 6575, 51488], "temperature": 0.0, "avg_logprob": -0.040346259802160125, "compression_ratio": 1.718562874251497, "no_speech_prob": 0.013635541312396526}, {"id": 1533, "seek": 1101044, "start": 11010.44, "end": 11017.880000000001, "text": " matrix on bottom so this is true for all u in z mod 2 to the fourth", "tokens": [50364, 8141, 322, 2767, 370, 341, 307, 2074, 337, 439, 344, 294, 710, 1072, 568, 281, 264, 6409, 50736], "temperature": 0.0, "avg_logprob": -0.03953120016282605, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.028433360159397125}, {"id": 1534, "seek": 1101044, "start": 11021.4, "end": 11027.4, "text": " and so a copy of your original vector sits inside of this vector so imagine you're trying to send", "tokens": [50912, 293, 370, 257, 5055, 295, 428, 3380, 8062, 12696, 1854, 295, 341, 8062, 370, 3811, 291, 434, 1382, 281, 2845, 51212], "temperature": 0.0, "avg_logprob": -0.03953120016282605, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.028433360159397125}, {"id": 1535, "seek": 1101044, "start": 11027.4, "end": 11034.68, "text": " a message u across some sort of a channel a communication channel and you want a receiver", "tokens": [51212, 257, 3636, 344, 2108, 512, 1333, 295, 257, 2269, 257, 6101, 2269, 293, 291, 528, 257, 20086, 51576], "temperature": 0.0, "avg_logprob": -0.03953120016282605, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.028433360159397125}, {"id": 1536, "seek": 1103468, "start": 11034.68, "end": 11041.32, "text": " to obtain um that message and you would like it for them to obtain exactly the message you sent", "tokens": [50364, 281, 12701, 1105, 300, 3636, 293, 291, 576, 411, 309, 337, 552, 281, 12701, 2293, 264, 3636, 291, 2279, 50696], "temperature": 0.0, "avg_logprob": -0.04728184173356241, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.034096356481313705}, {"id": 1537, "seek": 1103468, "start": 11041.32, "end": 11046.44, "text": " because if you hear something else on the other end of that line or you see something else", "tokens": [50696, 570, 498, 291, 1568, 746, 1646, 322, 264, 661, 917, 295, 300, 1622, 420, 291, 536, 746, 1646, 50952], "temperature": 0.0, "avg_logprob": -0.04728184173356241, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.034096356481313705}, {"id": 1538, "seek": 1103468, "start": 11046.44, "end": 11053.64, "text": " then you may misinterpret what the sender is trying to tell you so there's a sender and a", "tokens": [50952, 550, 291, 815, 3346, 41935, 437, 264, 2845, 260, 307, 1382, 281, 980, 291, 370, 456, 311, 257, 2845, 260, 293, 257, 51312], "temperature": 0.0, "avg_logprob": -0.04728184173356241, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.034096356481313705}, {"id": 1539, "seek": 1105364, "start": 11053.64, "end": 11060.439999999999, "text": " receiver and so for example um during this transmission there could be", "tokens": [50364, 20086, 293, 370, 337, 1365, 1105, 1830, 341, 11574, 456, 727, 312, 50704], "temperature": 0.0, "avg_logprob": -0.0467984798627022, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.06953351199626923}, {"id": 1540, "seek": 1105364, "start": 11065.0, "end": 11070.039999999999, "text": " some noise or maybe something that alters that message you hear this all the time when you're", "tokens": [50932, 512, 5658, 420, 1310, 746, 300, 419, 1559, 300, 3636, 291, 1568, 341, 439, 264, 565, 562, 291, 434, 51184], "temperature": 0.0, "avg_logprob": -0.0467984798627022, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.06953351199626923}, {"id": 1541, "seek": 1105364, "start": 11070.039999999999, "end": 11074.84, "text": " on the phone and sometimes the signal isn't working too well you might not hear exactly what the other", "tokens": [51184, 322, 264, 2593, 293, 2171, 264, 6358, 1943, 380, 1364, 886, 731, 291, 1062, 406, 1568, 2293, 437, 264, 661, 51424], "temperature": 0.0, "avg_logprob": -0.0467984798627022, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.06953351199626923}, {"id": 1542, "seek": 1105364, "start": 11074.84, "end": 11080.84, "text": " person is saying or you might hear something a little bit different so there may be disturbance", "tokens": [51424, 954, 307, 1566, 420, 291, 1062, 1568, 746, 257, 707, 857, 819, 370, 456, 815, 312, 35684, 51724], "temperature": 0.0, "avg_logprob": -0.0467984798627022, "compression_ratio": 1.7203791469194314, "no_speech_prob": 0.06953351199626923}, {"id": 1543, "seek": 1108084, "start": 11080.84, "end": 11087.48, "text": " along such a line so for example if we were sending um let's say my name across this channel", "tokens": [50364, 2051, 1270, 257, 1622, 370, 337, 1365, 498, 321, 645, 7750, 1105, 718, 311, 584, 452, 1315, 2108, 341, 2269, 50696], "temperature": 0.0, "avg_logprob": -0.08139596229944474, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.00712068285793066}, {"id": 1544, "seek": 1108084, "start": 11088.44, "end": 11093.48, "text": " and at the end of the line the receiver sees um", "tokens": [50744, 293, 412, 264, 917, 295, 264, 1622, 264, 20086, 8194, 1105, 50996], "temperature": 0.0, "avg_logprob": -0.08139596229944474, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.00712068285793066}, {"id": 1545, "seek": 1108084, "start": 11096.84, "end": 11103.72, "text": " the word archer for example now what was the original message that was supposed to be sent", "tokens": [51164, 264, 1349, 3912, 260, 337, 1365, 586, 437, 390, 264, 3380, 3636, 300, 390, 3442, 281, 312, 2279, 51508], "temperature": 0.0, "avg_logprob": -0.08139596229944474, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.00712068285793066}, {"id": 1546, "seek": 1108084, "start": 11103.72, "end": 11108.36, "text": " in this context you have you know you know the english language so you know that there may be", "tokens": [51508, 294, 341, 4319, 291, 362, 291, 458, 291, 458, 264, 32169, 2856, 370, 291, 458, 300, 456, 815, 312, 51740], "temperature": 0.0, "avg_logprob": -0.08139596229944474, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.00712068285793066}, {"id": 1547, "seek": 1110836, "start": 11108.52, "end": 11113.400000000001, "text": " a specific word that this is corresponding to but in this example you have two possibilities", "tokens": [50372, 257, 2685, 1349, 300, 341, 307, 11760, 281, 457, 294, 341, 1365, 291, 362, 732, 12178, 50616], "temperature": 0.0, "avg_logprob": -0.046037150592338746, "compression_ratio": 1.869109947643979, "no_speech_prob": 0.0032727927900850773}, {"id": 1548, "seek": 1110836, "start": 11113.400000000001, "end": 11121.16, "text": " that this word could be at least one of them could be archer or maybe arthur", "tokens": [50616, 300, 341, 1349, 727, 312, 412, 1935, 472, 295, 552, 727, 312, 3912, 260, 420, 1310, 594, 15915, 51004], "temperature": 0.0, "avg_logprob": -0.046037150592338746, "compression_ratio": 1.869109947643979, "no_speech_prob": 0.0032727927900850773}, {"id": 1549, "seek": 1110836, "start": 11123.08, "end": 11128.52, "text": " and in order for the receiver to verify what the message was or one way to verify what the", "tokens": [51100, 293, 294, 1668, 337, 264, 20086, 281, 16888, 437, 264, 3636, 390, 420, 472, 636, 281, 16888, 437, 264, 51372], "temperature": 0.0, "avg_logprob": -0.046037150592338746, "compression_ratio": 1.869109947643979, "no_speech_prob": 0.0032727927900850773}, {"id": 1550, "seek": 1110836, "start": 11128.52, "end": 11133.960000000001, "text": " message is is they could send that same message back and then basically ask you know is this the", "tokens": [51372, 3636, 307, 307, 436, 727, 2845, 300, 912, 3636, 646, 293, 550, 1936, 1029, 291, 458, 307, 341, 264, 51644], "temperature": 0.0, "avg_logprob": -0.046037150592338746, "compression_ratio": 1.869109947643979, "no_speech_prob": 0.0032727927900850773}, {"id": 1551, "seek": 1113396, "start": 11133.96, "end": 11141.88, "text": " message you intended to send okay so now imagine that this person sends um let's say this person", "tokens": [50364, 3636, 291, 10226, 281, 2845, 1392, 370, 586, 3811, 300, 341, 954, 14790, 1105, 718, 311, 584, 341, 954, 50760], "temperature": 0.0, "avg_logprob": -0.05783214903714364, "compression_ratio": 1.8161764705882353, "no_speech_prob": 0.007576406002044678}, {"id": 1552, "seek": 1113396, "start": 11141.88, "end": 11151.56, "text": " sends archer back and imagine another error occurs and imagine that the error occurs um takes place", "tokens": [50760, 14790, 3912, 260, 646, 293, 3811, 1071, 6713, 11843, 293, 3811, 300, 264, 6713, 11843, 1105, 2516, 1081, 51244], "temperature": 0.0, "avg_logprob": -0.05783214903714364, "compression_ratio": 1.8161764705882353, "no_speech_prob": 0.007576406002044678}, {"id": 1553, "seek": 1113396, "start": 11151.56, "end": 11158.279999999999, "text": " let's say in the first entry and it becomes archer", "tokens": [51244, 718, 311, 584, 294, 264, 700, 8729, 293, 309, 3643, 3912, 260, 51580], "temperature": 0.0, "avg_logprob": -0.05783214903714364, "compression_ratio": 1.8161764705882353, "no_speech_prob": 0.007576406002044678}, {"id": 1554, "seek": 1115828, "start": 11159.24, "end": 11166.28, "text": " and then the person is like wait did you want to send me the word archer like what are you doing", "tokens": [50412, 293, 550, 264, 954, 307, 411, 1699, 630, 291, 528, 281, 2845, 385, 264, 1349, 3912, 260, 411, 437, 366, 291, 884, 50764], "temperature": 0.0, "avg_logprob": -0.1187389803604341, "compression_ratio": 1.7682926829268293, "no_speech_prob": 0.006903042551130056}, {"id": 1555, "seek": 1115828, "start": 11166.28, "end": 11176.68, "text": " with this message um are you trying to tell me escher or archer and so this person is going to", "tokens": [50764, 365, 341, 3636, 1105, 366, 291, 1382, 281, 980, 385, 785, 6759, 420, 3912, 260, 293, 370, 341, 954, 307, 516, 281, 51284], "temperature": 0.0, "avg_logprob": -0.1187389803604341, "compression_ratio": 1.7682926829268293, "no_speech_prob": 0.006903042551130056}, {"id": 1556, "seek": 1115828, "start": 11176.68, "end": 11181.720000000001, "text": " send another message back um asking and you can see that this could keep happening for a very long", "tokens": [51284, 2845, 1071, 3636, 646, 1105, 3365, 293, 291, 393, 536, 300, 341, 727, 1066, 2737, 337, 257, 588, 938, 51536], "temperature": 0.0, "avg_logprob": -0.1187389803604341, "compression_ratio": 1.7682926829268293, "no_speech_prob": 0.006903042551130056}, {"id": 1557, "seek": 1118172, "start": 11181.72, "end": 11188.92, "text": " time um so it would be very convenient to either this person can send multiple copies of that message", "tokens": [50364, 565, 1105, 370, 309, 576, 312, 588, 10851, 281, 2139, 341, 954, 393, 2845, 3866, 14341, 295, 300, 3636, 50724], "temperature": 0.0, "avg_logprob": -0.048997172602900756, "compression_ratio": 1.9291338582677164, "no_speech_prob": 0.1777491271495819}, {"id": 1558, "seek": 1118172, "start": 11188.92, "end": 11194.519999999999, "text": " and then with lower and lower probability the more messages you send the more likely it is", "tokens": [50724, 293, 550, 365, 3126, 293, 3126, 8482, 264, 544, 7897, 291, 2845, 264, 544, 3700, 309, 307, 51004], "temperature": 0.0, "avg_logprob": -0.048997172602900756, "compression_ratio": 1.9291338582677164, "no_speech_prob": 0.1777491271495819}, {"id": 1559, "seek": 1118172, "start": 11194.519999999999, "end": 11199.72, "text": " that the person on the other end will figure out what that message is supposed to say so that's one", "tokens": [51004, 300, 264, 954, 322, 264, 661, 917, 486, 2573, 484, 437, 300, 3636, 307, 3442, 281, 584, 370, 300, 311, 472, 51264], "temperature": 0.0, "avg_logprob": -0.048997172602900756, "compression_ratio": 1.9291338582677164, "no_speech_prob": 0.1777491271495819}, {"id": 1560, "seek": 1118172, "start": 11199.72, "end": 11204.439999999999, "text": " option um but this option seems to take up a lot of resources right sending a message over and over", "tokens": [51264, 3614, 1105, 457, 341, 3614, 2544, 281, 747, 493, 257, 688, 295, 3593, 558, 7750, 257, 3636, 670, 293, 670, 51500], "temperature": 0.0, "avg_logprob": -0.048997172602900756, "compression_ratio": 1.9291338582677164, "no_speech_prob": 0.1777491271495819}, {"id": 1561, "seek": 1118172, "start": 11204.439999999999, "end": 11208.679999999998, "text": " and over again is sort of multiplying the number of resources you need by the number of times you", "tokens": [51500, 293, 670, 797, 307, 1333, 295, 30955, 264, 1230, 295, 3593, 291, 643, 538, 264, 1230, 295, 1413, 291, 51712], "temperature": 0.0, "avg_logprob": -0.048997172602900756, "compression_ratio": 1.9291338582677164, "no_speech_prob": 0.1777491271495819}, {"id": 1562, "seek": 1120868, "start": 11208.68, "end": 11215.32, "text": " send that message it would be very convenient if you could somehow have a scheme where the sender", "tokens": [50364, 2845, 300, 3636, 309, 576, 312, 588, 10851, 498, 291, 727, 6063, 362, 257, 12232, 689, 264, 2845, 260, 50696], "temperature": 0.0, "avg_logprob": -0.05379027412051246, "compression_ratio": 1.8413461538461537, "no_speech_prob": 0.015423130244016647}, {"id": 1563, "seek": 1120868, "start": 11215.32, "end": 11221.64, "text": " is sending a message and the receiver can apply a certain method that both the receiver and", "tokens": [50696, 307, 7750, 257, 3636, 293, 264, 20086, 393, 3079, 257, 1629, 3170, 300, 1293, 264, 20086, 293, 51012], "temperature": 0.0, "avg_logprob": -0.05379027412051246, "compression_ratio": 1.8413461538461537, "no_speech_prob": 0.015423130244016647}, {"id": 1564, "seek": 1120868, "start": 11221.64, "end": 11228.04, "text": " sender have agreed upon in advance to possibly identify if if an error occurred and where an", "tokens": [51012, 2845, 260, 362, 9166, 3564, 294, 7295, 281, 6264, 5876, 498, 498, 364, 6713, 11068, 293, 689, 364, 51332], "temperature": 0.0, "avg_logprob": -0.05379027412051246, "compression_ratio": 1.8413461538461537, "no_speech_prob": 0.015423130244016647}, {"id": 1565, "seek": 1120868, "start": 11228.04, "end": 11236.92, "text": " error occurred during that transmission so that's what we're going to do and we're going to simplify", "tokens": [51332, 6713, 11068, 1830, 300, 11574, 370, 300, 311, 437, 321, 434, 516, 281, 360, 293, 321, 434, 516, 281, 20460, 51776], "temperature": 0.0, "avg_logprob": -0.05379027412051246, "compression_ratio": 1.8413461538461537, "no_speech_prob": 0.015423130244016647}, {"id": 1566, "seek": 1123692, "start": 11237.0, "end": 11242.28, "text": " the problem by not looking at the english language we're going to look at vectors whose entries are", "tokens": [50368, 264, 1154, 538, 406, 1237, 412, 264, 32169, 2856, 321, 434, 516, 281, 574, 412, 18875, 6104, 23041, 366, 50632], "temperature": 0.0, "avg_logprob": -0.0726120163412655, "compression_ratio": 1.8632075471698113, "no_speech_prob": 0.14799630641937256}, {"id": 1567, "seek": 1123692, "start": 11242.28, "end": 11247.16, "text": " just zeros and ones the simplest possible language that we can come up with or at least the simplest", "tokens": [50632, 445, 35193, 293, 2306, 264, 22811, 1944, 2856, 300, 321, 393, 808, 493, 365, 420, 412, 1935, 264, 22811, 50876], "temperature": 0.0, "avg_logprob": -0.0726120163412655, "compression_ratio": 1.8632075471698113, "no_speech_prob": 0.14799630641937256}, {"id": 1568, "seek": 1123692, "start": 11248.04, "end": 11256.36, "text": " list of the simplest alphabet we can come up with an alphabet containing two um symbols so let's say", "tokens": [50920, 1329, 295, 264, 22811, 23339, 321, 393, 808, 493, 365, 364, 23339, 19273, 732, 1105, 16944, 370, 718, 311, 584, 51336], "temperature": 0.0, "avg_logprob": -0.0726120163412655, "compression_ratio": 1.8632075471698113, "no_speech_prob": 0.14799630641937256}, {"id": 1569, "seek": 1123692, "start": 11256.36, "end": 11265.08, "text": " we initially send the vector zero one one zero across this channel now once this channel goes", "tokens": [51336, 321, 9105, 2845, 264, 8062, 4018, 472, 472, 4018, 2108, 341, 2269, 586, 1564, 341, 2269, 1709, 51772], "temperature": 0.0, "avg_logprob": -0.0726120163412655, "compression_ratio": 1.8632075471698113, "no_speech_prob": 0.14799630641937256}, {"id": 1570, "seek": 1126508, "start": 11265.08, "end": 11270.6, "text": " i should have written it from right to left as i've been doing so but let's go um counter to", "tokens": [50364, 741, 820, 362, 3720, 309, 490, 558, 281, 1411, 382, 741, 600, 668, 884, 370, 457, 718, 311, 352, 1105, 5682, 281, 50640], "temperature": 0.0, "avg_logprob": -0.04936861169749293, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.004069863818585873}, {"id": 1571, "seek": 1126508, "start": 11270.6, "end": 11277.96, "text": " this now if one error occurs suppose one error occurred that means that error is going to occur", "tokens": [50640, 341, 586, 498, 472, 6713, 11843, 7297, 472, 6713, 11068, 300, 1355, 300, 6713, 307, 516, 281, 5160, 51008], "temperature": 0.0, "avg_logprob": -0.04936861169749293, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.004069863818585873}, {"id": 1572, "seek": 1126508, "start": 11277.96, "end": 11284.039999999999, "text": " in one of these four entries and if it occurs in the first entry the only possible thing that", "tokens": [51008, 294, 472, 295, 613, 1451, 23041, 293, 498, 309, 11843, 294, 264, 700, 8729, 264, 787, 1944, 551, 300, 51312], "temperature": 0.0, "avg_logprob": -0.04936861169749293, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.004069863818585873}, {"id": 1573, "seek": 1126508, "start": 11284.039999999999, "end": 11291.24, "text": " that zero could become because our language only has two symbols is one so one possibility is that", "tokens": [51312, 300, 4018, 727, 1813, 570, 527, 2856, 787, 575, 732, 16944, 307, 472, 370, 472, 7959, 307, 300, 51672], "temperature": 0.0, "avg_logprob": -0.04936861169749293, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.004069863818585873}, {"id": 1574, "seek": 1129124, "start": 11291.24, "end": 11297.0, "text": " we get one one one zero at the under the line another possibility is if the error occurs in", "tokens": [50364, 321, 483, 472, 472, 472, 4018, 412, 264, 833, 264, 1622, 1071, 7959, 307, 498, 264, 6713, 11843, 294, 50652], "temperature": 0.0, "avg_logprob": -0.04400082384602407, "compression_ratio": 2.031578947368421, "no_speech_prob": 0.005729818716645241}, {"id": 1575, "seek": 1129124, "start": 11297.0, "end": 11303.48, "text": " the second entry in which case we would have zero zero one zero and so on so in the third entry zero", "tokens": [50652, 264, 1150, 8729, 294, 597, 1389, 321, 576, 362, 4018, 4018, 472, 4018, 293, 370, 322, 370, 294, 264, 2636, 8729, 4018, 50976], "temperature": 0.0, "avg_logprob": -0.04400082384602407, "compression_ratio": 2.031578947368421, "no_speech_prob": 0.005729818716645241}, {"id": 1576, "seek": 1129124, "start": 11303.48, "end": 11312.68, "text": " one zero zero and in the last entry zero one one one so these are the possible outcomes if we have", "tokens": [50976, 472, 4018, 4018, 293, 294, 264, 1036, 8729, 4018, 472, 472, 472, 370, 613, 366, 264, 1944, 10070, 498, 321, 362, 51436], "temperature": 0.0, "avg_logprob": -0.04400082384602407, "compression_ratio": 2.031578947368421, "no_speech_prob": 0.005729818716645241}, {"id": 1577, "seek": 1129124, "start": 11312.68, "end": 11318.36, "text": " exactly one error of course if no error occurs then the receiver will see the original message", "tokens": [51436, 2293, 472, 6713, 295, 1164, 498, 572, 6713, 11843, 550, 264, 20086, 486, 536, 264, 3380, 3636, 51720], "temperature": 0.0, "avg_logprob": -0.04400082384602407, "compression_ratio": 2.031578947368421, "no_speech_prob": 0.005729818716645241}, {"id": 1578, "seek": 1131836, "start": 11318.36, "end": 11325.880000000001, "text": " but how do they even know that an error didn't occur or not so the way that we're going to solve", "tokens": [50364, 457, 577, 360, 436, 754, 458, 300, 364, 6713, 994, 380, 5160, 420, 406, 370, 264, 636, 300, 321, 434, 516, 281, 5039, 50740], "temperature": 0.0, "avg_logprob": -0.05093779814870734, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.0032727099023759365}, {"id": 1579, "seek": 1131836, "start": 11325.880000000001, "end": 11333.0, "text": " this problem is by using the previous situation that we had developed we can take our original", "tokens": [50740, 341, 1154, 307, 538, 1228, 264, 3894, 2590, 300, 321, 632, 4743, 321, 393, 747, 527, 3380, 51096], "temperature": 0.0, "avg_logprob": -0.05093779814870734, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.0032727099023759365}, {"id": 1580, "seek": 1131836, "start": 11333.0, "end": 11340.36, "text": " message encode it in some larger message and then this message is going to be contained in the subspace", "tokens": [51096, 3636, 2058, 1429, 309, 294, 512, 4833, 3636, 293, 550, 341, 3636, 307, 516, 281, 312, 16212, 294, 264, 2090, 17940, 51464], "temperature": 0.0, "avg_logprob": -0.05093779814870734, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.0032727099023759365}, {"id": 1581, "seek": 1131836, "start": 11340.36, "end": 11347.24, "text": " c so if we send the message u it's going to be contained in that subspace c and if we send that", "tokens": [51464, 269, 370, 498, 321, 2845, 264, 3636, 344, 309, 311, 516, 281, 312, 16212, 294, 300, 2090, 17940, 269, 293, 498, 321, 2845, 300, 51808], "temperature": 0.0, "avg_logprob": -0.05093779814870734, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.0032727099023759365}, {"id": 1582, "seek": 1134724, "start": 11347.32, "end": 11354.119999999999, "text": " message across the channel instead what could happen to it so initially the sender is sending the", "tokens": [50368, 3636, 2108, 264, 2269, 2602, 437, 727, 1051, 281, 309, 370, 9105, 264, 2845, 260, 307, 7750, 264, 50708], "temperature": 0.0, "avg_logprob": -0.05682352767593559, "compression_ratio": 1.8215962441314555, "no_speech_prob": 0.006487465929239988}, {"id": 1583, "seek": 1134724, "start": 11354.92, "end": 11361.96, "text": " the letter the message u is contained in the bottom part but now mu is contained in z mod", "tokens": [50748, 264, 5063, 264, 3636, 344, 307, 16212, 294, 264, 2767, 644, 457, 586, 2992, 307, 16212, 294, 710, 1072, 51100], "temperature": 0.0, "avg_logprob": -0.05682352767593559, "compression_ratio": 1.8215962441314555, "no_speech_prob": 0.006487465929239988}, {"id": 1584, "seek": 1134724, "start": 11361.96, "end": 11367.72, "text": " two to the seventh power so it seems like a more complicated vector but the only real messages that", "tokens": [51100, 732, 281, 264, 17875, 1347, 370, 309, 2544, 411, 257, 544, 6179, 8062, 457, 264, 787, 957, 7897, 300, 51388], "temperature": 0.0, "avg_logprob": -0.05682352767593559, "compression_ratio": 1.8215962441314555, "no_speech_prob": 0.006487465929239988}, {"id": 1585, "seek": 1134724, "start": 11367.72, "end": 11374.6, "text": " could have been sent the ones that have no errors are exactly in that subspace c any other vector in", "tokens": [51388, 727, 362, 668, 2279, 264, 2306, 300, 362, 572, 13603, 366, 2293, 294, 300, 2090, 17940, 269, 604, 661, 8062, 294, 51732], "temperature": 0.0, "avg_logprob": -0.05682352767593559, "compression_ratio": 1.8215962441314555, "no_speech_prob": 0.006487465929239988}, {"id": 1586, "seek": 1137460, "start": 11374.6, "end": 11383.24, "text": " this vector space is not a message that the sender could have sent because they're only working with", "tokens": [50364, 341, 8062, 1901, 307, 406, 257, 3636, 300, 264, 2845, 260, 727, 362, 2279, 570, 436, 434, 787, 1364, 365, 50796], "temperature": 0.0, "avg_logprob": -0.05291876941919327, "compression_ratio": 1.6740331491712708, "no_speech_prob": 0.0004583022673614323}, {"id": 1587, "seek": 1137460, "start": 11383.24, "end": 11393.08, "text": " images the image of the transformation associated to m so this message is going through now imagine", "tokens": [50796, 5267, 264, 3256, 295, 264, 9887, 6615, 281, 275, 370, 341, 3636, 307, 516, 807, 586, 3811, 51288], "temperature": 0.0, "avg_logprob": -0.05291876941919327, "compression_ratio": 1.6740331491712708, "no_speech_prob": 0.0004583022673614323}, {"id": 1588, "seek": 1137460, "start": 11393.08, "end": 11402.2, "text": " that an error occurs somewhere along the way error and the message becomes mu plus now there are seven", "tokens": [51288, 300, 364, 6713, 11843, 4079, 2051, 264, 636, 6713, 293, 264, 3636, 3643, 2992, 1804, 586, 456, 366, 3407, 51744], "temperature": 0.0, "avg_logprob": -0.05291876941919327, "compression_ratio": 1.6740331491712708, "no_speech_prob": 0.0004583022673614323}, {"id": 1589, "seek": 1140220, "start": 11402.2, "end": 11408.12, "text": " entries in the vector mu so there are now seven possible errors that could occur and these errors", "tokens": [50364, 23041, 294, 264, 8062, 2992, 370, 456, 366, 586, 3407, 1944, 13603, 300, 727, 5160, 293, 613, 13603, 50660], "temperature": 0.0, "avg_logprob": -0.058276010596233864, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.004904996138066053}, {"id": 1590, "seek": 1140220, "start": 11408.12, "end": 11416.68, "text": " are exactly quantified by adding the unit vector in the ife row or entry of that vector so this", "tokens": [50660, 366, 2293, 4426, 2587, 538, 5127, 264, 4985, 8062, 294, 264, 498, 68, 5386, 420, 8729, 295, 300, 8062, 370, 341, 51088], "temperature": 0.0, "avg_logprob": -0.058276010596233864, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.004904996138066053}, {"id": 1591, "seek": 1140220, "start": 11416.68, "end": 11423.880000000001, "text": " error occurs but the reader on the other end is going to see this vector v they don't know that it", "tokens": [51088, 6713, 11843, 457, 264, 15149, 322, 264, 661, 917, 307, 516, 281, 536, 341, 8062, 371, 436, 500, 380, 458, 300, 309, 51448], "temperature": 0.0, "avg_logprob": -0.058276010596233864, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.004904996138066053}, {"id": 1592, "seek": 1142388, "start": 11423.88, "end": 11429.8, "text": " is a priori this sort of combination all they see is some vector of zeros and ones", "tokens": [50364, 307, 257, 4059, 72, 341, 1333, 295, 6562, 439, 436, 536, 307, 512, 8062, 295, 35193, 293, 2306, 50660], "temperature": 0.0, "avg_logprob": -0.052695789198944534, "compression_ratio": 1.694267515923567, "no_speech_prob": 0.3038914203643799}, {"id": 1593, "seek": 1142388, "start": 11431.4, "end": 11442.039999999999, "text": " but they can use h to identify what form the vector v is in remember we said that if h of v", "tokens": [50740, 457, 436, 393, 764, 276, 281, 5876, 437, 1254, 264, 8062, 371, 307, 294, 1604, 321, 848, 300, 498, 276, 295, 371, 51272], "temperature": 0.0, "avg_logprob": -0.052695789198944534, "compression_ratio": 1.694267515923567, "no_speech_prob": 0.3038914203643799}, {"id": 1594, "seek": 1142388, "start": 11442.039999999999, "end": 11448.519999999999, "text": " equals zero and this implies that the vector v is in the subspace c which is the image of m", "tokens": [51272, 6915, 4018, 293, 341, 18779, 300, 264, 8062, 371, 307, 294, 264, 2090, 17940, 269, 597, 307, 264, 3256, 295, 275, 51596], "temperature": 0.0, "avg_logprob": -0.052695789198944534, "compression_ratio": 1.694267515923567, "no_speech_prob": 0.3038914203643799}, {"id": 1595, "seek": 1144852, "start": 11448.84, "end": 11459.4, "text": " and if h of v equals a non-zero vector then that non-zero vector is one of the columns of h", "tokens": [50380, 293, 498, 276, 295, 371, 6915, 257, 2107, 12, 32226, 8062, 550, 300, 2107, 12, 32226, 8062, 307, 472, 295, 264, 13766, 295, 276, 50908], "temperature": 0.0, "avg_logprob": -0.10521749349740836, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.02517680637538433}, {"id": 1596, "seek": 1144852, "start": 11461.0, "end": 11472.28, "text": " this tells us that v is in ci but remember what ci was it was this subspace plus the unit vector", "tokens": [50988, 341, 5112, 505, 300, 371, 307, 294, 6983, 457, 1604, 437, 6983, 390, 309, 390, 341, 2090, 17940, 1804, 264, 4985, 8062, 51552], "temperature": 0.0, "avg_logprob": -0.10521749349740836, "compression_ratio": 1.5537190082644627, "no_speech_prob": 0.02517680637538433}, {"id": 1597, "seek": 1147228, "start": 11472.28, "end": 11481.0, "text": " ei so it tells us that if a receiver receives receives the vector v and they apply h to it", "tokens": [50364, 14020, 370, 309, 5112, 505, 300, 498, 257, 20086, 20717, 20717, 264, 8062, 371, 293, 436, 3079, 276, 281, 309, 50800], "temperature": 0.0, "avg_logprob": -0.07174873352050781, "compression_ratio": 1.7516339869281046, "no_speech_prob": 0.05339280143380165}, {"id": 1598, "seek": 1147228, "start": 11481.0, "end": 11487.960000000001, "text": " they can identify which of these subsets it's in and if the vector that they see after they", "tokens": [50800, 436, 393, 5876, 597, 295, 613, 2090, 1385, 309, 311, 294, 293, 498, 264, 8062, 300, 436, 536, 934, 436, 51148], "temperature": 0.0, "avg_logprob": -0.07174873352050781, "compression_ratio": 1.7516339869281046, "no_speech_prob": 0.05339280143380165}, {"id": 1599, "seek": 1147228, "start": 11487.960000000001, "end": 11496.12, "text": " apply h is zero that tells us that no error occurred so we're going to assume at most", "tokens": [51148, 3079, 276, 307, 4018, 300, 5112, 505, 300, 572, 6713, 11068, 370, 321, 434, 516, 281, 6552, 412, 881, 51556], "temperature": 0.0, "avg_logprob": -0.07174873352050781, "compression_ratio": 1.7516339869281046, "no_speech_prob": 0.05339280143380165}, {"id": 1600, "seek": 1149612, "start": 11496.52, "end": 11503.240000000002, "text": " at most one error occurs during the transmission", "tokens": [50384, 412, 881, 472, 6713, 11843, 1830, 264, 11574, 50720], "temperature": 0.0, "avg_logprob": -0.10220138081964457, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.004609245806932449}, {"id": 1601, "seek": 1149612, "start": 11510.52, "end": 11517.400000000001, "text": " and if we make that assumption then these two applications an application of h to v will tell", "tokens": [51084, 293, 498, 321, 652, 300, 15302, 550, 613, 732, 5821, 364, 3861, 295, 276, 281, 371, 486, 980, 51428], "temperature": 0.0, "avg_logprob": -0.10220138081964457, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.004609245806932449}, {"id": 1602, "seek": 1149612, "start": 11517.400000000001, "end": 11525.0, "text": " us where an error occurred and if we've identified where the error occurs right this says that if", "tokens": [51428, 505, 689, 364, 6713, 11068, 293, 498, 321, 600, 9234, 689, 264, 6713, 11843, 558, 341, 1619, 300, 498, 51808], "temperature": 0.0, "avg_logprob": -0.10220138081964457, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.004609245806932449}, {"id": 1603, "seek": 1152500, "start": 11525.0, "end": 11531.88, "text": " we see that the h of v is hei then we know that the vectors of this form and how do we fix it", "tokens": [50364, 321, 536, 300, 264, 276, 295, 371, 307, 415, 72, 550, 321, 458, 300, 264, 18875, 295, 341, 1254, 293, 577, 360, 321, 3191, 309, 50708], "temperature": 0.0, "avg_logprob": -0.0645125348080871, "compression_ratio": 1.8854166666666667, "no_speech_prob": 0.0018674579914659262}, {"id": 1604, "seek": 1152500, "start": 11532.52, "end": 11540.92, "text": " so if if it's let's say this is case one and this is case two in case one how would the receiver", "tokens": [50740, 370, 498, 498, 309, 311, 718, 311, 584, 341, 307, 1389, 472, 293, 341, 307, 1389, 732, 294, 1389, 472, 577, 576, 264, 20086, 51160], "temperature": 0.0, "avg_logprob": -0.0645125348080871, "compression_ratio": 1.8854166666666667, "no_speech_prob": 0.0018674579914659262}, {"id": 1605, "seek": 1152500, "start": 11541.72, "end": 11547.48, "text": " identify what the original message is they would look at the last four entries of the vector v", "tokens": [51200, 5876, 437, 264, 3380, 3636, 307, 436, 576, 574, 412, 264, 1036, 1451, 23041, 295, 264, 8062, 371, 51488], "temperature": 0.0, "avg_logprob": -0.0645125348080871, "compression_ratio": 1.8854166666666667, "no_speech_prob": 0.0018674579914659262}, {"id": 1606, "seek": 1152500, "start": 11547.48, "end": 11552.44, "text": " because that's where u is and we know that no error occurred so the original", "tokens": [51488, 570, 300, 311, 689, 344, 307, 293, 321, 458, 300, 572, 6713, 11068, 370, 264, 3380, 51736], "temperature": 0.0, "avg_logprob": -0.0645125348080871, "compression_ratio": 1.8854166666666667, "no_speech_prob": 0.0018674579914659262}, {"id": 1607, "seek": 1155244, "start": 11553.08, "end": 11563.16, "text": " message sent by the sender is the vector corresponding to the last four entries", "tokens": [50396, 3636, 2279, 538, 264, 2845, 260, 307, 264, 8062, 11760, 281, 264, 1036, 1451, 23041, 50900], "temperature": 0.0, "avg_logprob": -0.14879350435166133, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.007120950613170862}, {"id": 1608, "seek": 1155244, "start": 11568.76, "end": 11578.6, "text": " of the vector v and in the second case what happens then well if in the second case we found that", "tokens": [51180, 295, 264, 8062, 371, 293, 294, 264, 1150, 1389, 437, 2314, 550, 731, 498, 294, 264, 1150, 1389, 321, 1352, 300, 51672], "temperature": 0.0, "avg_logprob": -0.14879350435166133, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.007120950613170862}, {"id": 1609, "seek": 1157860, "start": 11579.4, "end": 11583.16, "text": " h of v equals h of v i then an error occurred", "tokens": [50404, 276, 295, 371, 6915, 276, 295, 371, 741, 550, 364, 6713, 11068, 50592], "temperature": 0.0, "avg_logprob": -0.13052450526844372, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.00419852277263999}, {"id": 1610, "seek": 1157860, "start": 11587.48, "end": 11598.36, "text": " in the ith entry of v and how would we fix that while we would just subtract e i but", "tokens": [50808, 294, 264, 309, 71, 8729, 295, 371, 293, 577, 576, 321, 3191, 300, 1339, 321, 576, 445, 16390, 308, 741, 457, 51352], "temperature": 0.0, "avg_logprob": -0.13052450526844372, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.00419852277263999}, {"id": 1611, "seek": 1157860, "start": 11598.36, "end": 11603.4, "text": " subtracting in addition are the same in z mod 2 so to fix", "tokens": [51352, 16390, 278, 294, 4500, 366, 264, 912, 294, 710, 1072, 568, 370, 281, 3191, 51604], "temperature": 0.0, "avg_logprob": -0.13052450526844372, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.00419852277263999}, {"id": 1612, "seek": 1160340, "start": 11603.48, "end": 11614.279999999999, "text": " we know that the original message will be v plus e i well not the original message but", "tokens": [50368, 321, 458, 300, 264, 3380, 3636, 486, 312, 371, 1804, 308, 741, 731, 406, 264, 3380, 3636, 457, 50908], "temperature": 0.0, "avg_logprob": -0.13248811960220336, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.009707874618470669}, {"id": 1613, "seek": 1160340, "start": 11614.84, "end": 11622.199999999999, "text": " what the receiver sent after applying the transformation m and when they do this then they", "tokens": [50936, 437, 264, 20086, 2279, 934, 9275, 264, 9887, 275, 293, 562, 436, 360, 341, 550, 436, 51304], "temperature": 0.0, "avg_logprob": -0.13248811960220336, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.009707874618470669}, {"id": 1614, "seek": 1162220, "start": 11622.2, "end": 11632.2, "text": " can read off the last four entries of this vector the last meaning the bottom four", "tokens": [50364, 393, 1401, 766, 264, 1036, 1451, 23041, 295, 341, 8062, 264, 1036, 3620, 264, 2767, 1451, 50864], "temperature": 0.0, "avg_logprob": -0.07658199702992159, "compression_ratio": 1.5859375, "no_speech_prob": 0.05833866074681282}, {"id": 1615, "seek": 1162220, "start": 11635.400000000001, "end": 11640.12, "text": " of this vector v plus e i is the original message", "tokens": [51024, 295, 341, 8062, 371, 1804, 308, 741, 307, 264, 3380, 3636, 51260], "temperature": 0.0, "avg_logprob": -0.07658199702992159, "compression_ratio": 1.5859375, "no_speech_prob": 0.05833866074681282}, {"id": 1616, "seek": 1162220, "start": 11644.44, "end": 11648.44, "text": " so let's just do this in an example just to see how exactly this works", "tokens": [51476, 370, 718, 311, 445, 360, 341, 294, 364, 1365, 445, 281, 536, 577, 2293, 341, 1985, 51676], "temperature": 0.0, "avg_logprob": -0.07658199702992159, "compression_ratio": 1.5859375, "no_speech_prob": 0.05833866074681282}, {"id": 1617, "seek": 1164844, "start": 11649.16, "end": 11659.4, "text": " so imagine you're the receiver and you see the vector v equals zero zero one one zero one one", "tokens": [50400, 370, 3811, 291, 434, 264, 20086, 293, 291, 536, 264, 8062, 371, 6915, 4018, 4018, 472, 472, 4018, 472, 472, 50912], "temperature": 0.0, "avg_logprob": -0.09749688658603402, "compression_ratio": 1.5, "no_speech_prob": 0.00498197553679347}, {"id": 1618, "seek": 1164844, "start": 11663.24, "end": 11667.880000000001, "text": " if you apply h to this vector so i'll write h to remind you because otherwise", "tokens": [51104, 498, 291, 3079, 276, 281, 341, 8062, 370, 741, 603, 2464, 276, 281, 4160, 291, 570, 5911, 51336], "temperature": 0.0, "avg_logprob": -0.09749688658603402, "compression_ratio": 1.5, "no_speech_prob": 0.00498197553679347}, {"id": 1619, "seek": 1166788, "start": 11668.199999999999, "end": 11677.16, "text": " how are we going to do this computation huh so this is one one one zero one one one zero one", "tokens": [50380, 577, 366, 321, 516, 281, 360, 341, 24903, 7020, 370, 341, 307, 472, 472, 472, 4018, 472, 472, 472, 4018, 472, 50828], "temperature": 0.0, "avg_logprob": -0.16424059045725856, "compression_ratio": 1.8412698412698412, "no_speech_prob": 0.01854504831135273}, {"id": 1620, "seek": 1166788, "start": 11678.199999999999, "end": 11681.56, "text": " one zero and then we apply the vector v here", "tokens": [50880, 472, 4018, 293, 550, 321, 3079, 264, 8062, 371, 510, 51048], "temperature": 0.0, "avg_logprob": -0.16424059045725856, "compression_ratio": 1.8412698412698412, "no_speech_prob": 0.01854504831135273}, {"id": 1621, "seek": 1166788, "start": 11686.199999999999, "end": 11694.439999999999, "text": " and if we apply matrix operations here we will get the vector three two three but three is one", "tokens": [51280, 293, 498, 321, 3079, 8141, 7705, 510, 321, 486, 483, 264, 8062, 1045, 732, 1045, 457, 1045, 307, 472, 51692], "temperature": 0.0, "avg_logprob": -0.16424059045725856, "compression_ratio": 1.8412698412698412, "no_speech_prob": 0.01854504831135273}, {"id": 1622, "seek": 1169444, "start": 11694.44, "end": 11701.560000000001, "text": " in z mod two and two is zero so this becomes one zero one so we take this vector and look", "tokens": [50364, 294, 710, 1072, 732, 293, 732, 307, 4018, 370, 341, 3643, 472, 4018, 472, 370, 321, 747, 341, 8062, 293, 574, 50720], "temperature": 0.0, "avg_logprob": -0.04671587517012411, "compression_ratio": 1.8231292517006803, "no_speech_prob": 0.012818444520235062}, {"id": 1623, "seek": 1169444, "start": 11701.560000000001, "end": 11709.560000000001, "text": " where it appears in this matrix and in this case it is the sixth column of h this means that an", "tokens": [50720, 689, 309, 7038, 294, 341, 8141, 293, 294, 341, 1389, 309, 307, 264, 15102, 7738, 295, 276, 341, 1355, 300, 364, 51120], "temperature": 0.0, "avg_logprob": -0.04671587517012411, "compression_ratio": 1.8231292517006803, "no_speech_prob": 0.012818444520235062}, {"id": 1624, "seek": 1169444, "start": 11709.560000000001, "end": 11719.880000000001, "text": " error occurred in the sixth entry of this vector here so error in sixth entry of v", "tokens": [51120, 6713, 11068, 294, 264, 15102, 8729, 295, 341, 8062, 510, 370, 6713, 294, 15102, 8729, 295, 371, 51636], "temperature": 0.0, "avg_logprob": -0.04671587517012411, "compression_ratio": 1.8231292517006803, "no_speech_prob": 0.012818444520235062}, {"id": 1625, "seek": 1171988, "start": 11720.119999999999, "end": 11729.08, "text": " and therefore the if we alter the sixth entry that would mean we change this one the second", "tokens": [50376, 293, 4412, 264, 498, 321, 11337, 264, 15102, 8729, 300, 576, 914, 321, 1319, 341, 472, 264, 1150, 50824], "temperature": 0.0, "avg_logprob": -0.06221004811728873, "compression_ratio": 1.5963302752293578, "no_speech_prob": 0.004069835413247347}, {"id": 1626, "seek": 1171988, "start": 11729.08, "end": 11741.96, "text": " last one to a zero so that means the original message message is one zero zero one", "tokens": [50824, 1036, 472, 281, 257, 4018, 370, 300, 1355, 264, 3380, 3636, 3636, 307, 472, 4018, 4018, 472, 51468], "temperature": 0.0, "avg_logprob": -0.06221004811728873, "compression_ratio": 1.5963302752293578, "no_speech_prob": 0.004069835413247347}, {"id": 1627, "seek": 1174196, "start": 11742.279999999999, "end": 11749.88, "text": " because we take the last four entries of this vector and then we switch the sixth entry", "tokens": [50380, 570, 321, 747, 264, 1036, 1451, 23041, 295, 341, 8062, 293, 550, 321, 3679, 264, 15102, 8729, 50760], "temperature": 0.0, "avg_logprob": -0.08823868246639475, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.0009399225236847997}, {"id": 1628, "seek": 1174196, "start": 11749.88, "end": 11755.24, "text": " if we had found that the second entry was um an error occurred in the second entry we would", "tokens": [50760, 498, 321, 632, 1352, 300, 264, 1150, 8729, 390, 1105, 364, 6713, 11068, 294, 264, 1150, 8729, 321, 576, 51028], "temperature": 0.0, "avg_logprob": -0.08823868246639475, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.0009399225236847997}, {"id": 1629, "seek": 1174196, "start": 11755.24, "end": 11760.839999999998, "text": " have changed that zero to a one and left the original message here and that would have been our", "tokens": [51028, 362, 3105, 300, 4018, 281, 257, 472, 293, 1411, 264, 3380, 3636, 510, 293, 300, 576, 362, 668, 527, 51308], "temperature": 0.0, "avg_logprob": -0.08823868246639475, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.0009399225236847997}, {"id": 1630, "seek": 1174196, "start": 11760.839999999998, "end": 11767.96, "text": " the message that was sent by the sender so um that's the basic idea of how this works", "tokens": [51308, 264, 3636, 300, 390, 2279, 538, 264, 2845, 260, 370, 1105, 300, 311, 264, 3875, 1558, 295, 577, 341, 1985, 51664], "temperature": 0.0, "avg_logprob": -0.08823868246639475, "compression_ratio": 1.7960199004975124, "no_speech_prob": 0.0009399225236847997}, {"id": 1631, "seek": 1176796, "start": 11767.96, "end": 11774.199999999999, "text": " and again we worked with a case where we were dealing with um sending messages of length four", "tokens": [50364, 293, 797, 321, 2732, 365, 257, 1389, 689, 321, 645, 6260, 365, 1105, 7750, 7897, 295, 4641, 1451, 50676], "temperature": 0.0, "avg_logprob": -0.08618559470543495, "compression_ratio": 1.6264367816091954, "no_speech_prob": 0.00036257063038647175}, {"id": 1632, "seek": 1176796, "start": 11775.72, "end": 11783.4, "text": " and we used um an additional a larger vector space to encode the possibilities of computing", "tokens": [50752, 293, 321, 1143, 1105, 364, 4497, 257, 4833, 8062, 1901, 281, 2058, 1429, 264, 12178, 295, 15866, 51136], "temperature": 0.0, "avg_logprob": -0.08618559470543495, "compression_ratio": 1.6264367816091954, "no_speech_prob": 0.00036257063038647175}, {"id": 1633, "seek": 1176796, "start": 11783.4, "end": 11793.16, "text": " those errors and you could also do it by um using the um by having h to be a matrix consisting of", "tokens": [51136, 729, 13603, 293, 291, 727, 611, 360, 309, 538, 1105, 1228, 264, 1105, 538, 1419, 276, 281, 312, 257, 8141, 33921, 295, 51624], "temperature": 0.0, "avg_logprob": -0.08618559470543495, "compression_ratio": 1.6264367816091954, "no_speech_prob": 0.00036257063038647175}, {"id": 1634, "seek": 1179316, "start": 11793.16, "end": 11800.119999999999, "text": " all the non zero vectors in z mod two to the k it will allow us to encode a message of length", "tokens": [50364, 439, 264, 2107, 4018, 18875, 294, 710, 1072, 732, 281, 264, 350, 309, 486, 2089, 505, 281, 2058, 1429, 257, 3636, 295, 4641, 50712], "temperature": 0.0, "avg_logprob": -0.05780090456423552, "compression_ratio": 1.936842105263158, "no_speech_prob": 0.010651885531842709}, {"id": 1635, "seek": 1179316, "start": 11801.8, "end": 11809.48, "text": " given by the number of columns in that matrix q and we already calculated that the number", "tokens": [50796, 2212, 538, 264, 1230, 295, 13766, 294, 300, 8141, 9505, 293, 321, 1217, 15598, 300, 264, 1230, 51180], "temperature": 0.0, "avg_logprob": -0.05780090456423552, "compression_ratio": 1.936842105263158, "no_speech_prob": 0.010651885531842709}, {"id": 1636, "seek": 1179316, "start": 11809.48, "end": 11814.84, "text": " of columns in that matrix q is two to the k minus one because of the zero vector minus an", "tokens": [51180, 295, 13766, 294, 300, 8141, 9505, 307, 732, 281, 264, 350, 3175, 472, 570, 295, 264, 4018, 8062, 3175, 364, 51448], "temperature": 0.0, "avg_logprob": -0.05780090456423552, "compression_ratio": 1.936842105263158, "no_speech_prob": 0.010651885531842709}, {"id": 1637, "seek": 1179316, "start": 11814.84, "end": 11820.68, "text": " additional k from the k vectors we used on the left hand side of the matrix h so we can encode", "tokens": [51448, 4497, 350, 490, 264, 350, 18875, 321, 1143, 322, 264, 1411, 1011, 1252, 295, 264, 8141, 276, 370, 321, 393, 2058, 1429, 51740], "temperature": 0.0, "avg_logprob": -0.05780090456423552, "compression_ratio": 1.936842105263158, "no_speech_prob": 0.010651885531842709}, {"id": 1638, "seek": 1182068, "start": 11820.68, "end": 11828.84, "text": " quite a large um number of messages under the assumption that at most one error occurs during", "tokens": [50364, 1596, 257, 2416, 1105, 1230, 295, 7897, 833, 264, 15302, 300, 412, 881, 472, 6713, 11843, 1830, 50772], "temperature": 0.0, "avg_logprob": -0.07292062441507975, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.0013249990297481418}, {"id": 1639, "seek": 1182068, "start": 11828.84, "end": 11833.960000000001, "text": " transmission so let's now analyze in a little bit more detail", "tokens": [50772, 11574, 370, 718, 311, 586, 12477, 294, 257, 707, 857, 544, 2607, 51028], "temperature": 0.0, "avg_logprob": -0.07292062441507975, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.0013249990297481418}, {"id": 1640, "seek": 1182068, "start": 11839.24, "end": 11846.92, "text": " what is q u actually doing so we know that that matrix m that we had it was broken up into two parts", "tokens": [51292, 437, 307, 9505, 344, 767, 884, 370, 321, 458, 300, 300, 8141, 275, 300, 321, 632, 309, 390, 5463, 493, 666, 732, 3166, 51676], "temperature": 0.0, "avg_logprob": -0.07292062441507975, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.0013249990297481418}, {"id": 1641, "seek": 1184692, "start": 11847.48, "end": 11854.36, "text": " and when we send a message u across a channel we will keep our original message in one part", "tokens": [50392, 293, 562, 321, 2845, 257, 3636, 344, 2108, 257, 2269, 321, 486, 1066, 527, 3380, 3636, 294, 472, 644, 50736], "temperature": 0.0, "avg_logprob": -0.14178124596090877, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.007694812025874853}, {"id": 1642, "seek": 1184692, "start": 11854.36, "end": 11860.92, "text": " of that vector but we'll add a bunch of fluff to it and what is the meaning of that fluff from", "tokens": [50736, 295, 300, 8062, 457, 321, 603, 909, 257, 3840, 295, 41533, 281, 309, 293, 437, 307, 264, 3620, 295, 300, 41533, 490, 51064], "temperature": 0.0, "avg_logprob": -0.14178124596090877, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.007694812025874853}, {"id": 1643, "seek": 1184692, "start": 11860.92, "end": 11869.56, "text": " maybe a more a different perspective um it turns out that there's a very interesting sort of uh", "tokens": [51064, 1310, 257, 544, 257, 819, 4585, 1105, 309, 4523, 484, 300, 456, 311, 257, 588, 1880, 1333, 295, 2232, 51496], "temperature": 0.0, "avg_logprob": -0.14178124596090877, "compression_ratio": 1.6114285714285714, "no_speech_prob": 0.007694812025874853}, {"id": 1644, "seek": 1186956, "start": 11870.519999999999, "end": 11878.119999999999, "text": " logical thing that's going on between the entries of u and what q is doing to those entries", "tokens": [50412, 14978, 551, 300, 311, 516, 322, 1296, 264, 23041, 295, 344, 293, 437, 9505, 307, 884, 281, 729, 23041, 50792], "temperature": 0.0, "avg_logprob": -0.07526203261481391, "compression_ratio": 1.7635467980295567, "no_speech_prob": 0.16663342714309692}, {"id": 1645, "seek": 1186956, "start": 11878.119999999999, "end": 11882.68, "text": " and the idea is that it's adding those entries in such a way as to maintain the sort of consistency", "tokens": [50792, 293, 264, 1558, 307, 300, 309, 311, 5127, 729, 23041, 294, 1270, 257, 636, 382, 281, 6909, 264, 1333, 295, 14416, 51020], "temperature": 0.0, "avg_logprob": -0.07526203261481391, "compression_ratio": 1.7635467980295567, "no_speech_prob": 0.16663342714309692}, {"id": 1646, "seek": 1186956, "start": 11883.48, "end": 11890.359999999999, "text": " so if we take actually q u and we apply that matrix q that was left over the vector we would get", "tokens": [51060, 370, 498, 321, 747, 767, 9505, 344, 293, 321, 3079, 300, 8141, 9505, 300, 390, 1411, 670, 264, 8062, 321, 576, 483, 51404], "temperature": 0.0, "avg_logprob": -0.07526203261481391, "compression_ratio": 1.7635467980295567, "no_speech_prob": 0.16663342714309692}, {"id": 1647, "seek": 1186956, "start": 11891.0, "end": 11894.6, "text": " in terms of the entries of u so u is going to be u one through u four", "tokens": [51436, 294, 2115, 295, 264, 23041, 295, 344, 370, 344, 307, 516, 281, 312, 344, 472, 807, 344, 1451, 51616], "temperature": 0.0, "avg_logprob": -0.07526203261481391, "compression_ratio": 1.7635467980295567, "no_speech_prob": 0.16663342714309692}, {"id": 1648, "seek": 1189460, "start": 11895.56, "end": 11903.720000000001, "text": " the entries of this vector are going to be u one plus u three plus u four", "tokens": [50412, 264, 23041, 295, 341, 8062, 366, 516, 281, 312, 344, 472, 1804, 344, 1045, 1804, 344, 1451, 50820], "temperature": 0.0, "avg_logprob": -0.09061691340278177, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.01665456034243107}, {"id": 1649, "seek": 1189460, "start": 11905.08, "end": 11911.640000000001, "text": " u one plus u two plus u four and the third entry because this is a three by four matrix", "tokens": [50888, 344, 472, 1804, 344, 732, 1804, 344, 1451, 293, 264, 2636, 8729, 570, 341, 307, 257, 1045, 538, 1451, 8141, 51216], "temperature": 0.0, "avg_logprob": -0.09061691340278177, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.01665456034243107}, {"id": 1650, "seek": 1189460, "start": 11911.640000000001, "end": 11922.84, "text": " is going to be u one plus u two plus u three and these entries here are called well let's call them", "tokens": [51216, 307, 516, 281, 312, 344, 472, 1804, 344, 732, 1804, 344, 1045, 293, 613, 23041, 510, 366, 1219, 731, 718, 311, 818, 552, 51776], "temperature": 0.0, "avg_logprob": -0.09061691340278177, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.01665456034243107}, {"id": 1651, "seek": 1192284, "start": 11922.84, "end": 11929.72, "text": " p one p two and p three for now and they are called parity bits", "tokens": [50364, 280, 472, 280, 732, 293, 280, 1045, 337, 586, 293, 436, 366, 1219, 44747, 9239, 50708], "temperature": 0.0, "avg_logprob": -0.06608120339815735, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.00941209215670824}, {"id": 1652, "seek": 1192284, "start": 11937.64, "end": 11943.16, "text": " and the reason they're called parity bits is because when this message gets sent across a channel", "tokens": [51104, 293, 264, 1778, 436, 434, 1219, 44747, 9239, 307, 570, 562, 341, 3636, 2170, 2279, 2108, 257, 2269, 51380], "temperature": 0.0, "avg_logprob": -0.06608120339815735, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.00941209215670824}, {"id": 1653, "seek": 1192284, "start": 11944.12, "end": 11951.880000000001, "text": " if an error occurs these entries are summing up the entries of the vector u in some specific way", "tokens": [51428, 498, 364, 6713, 11843, 613, 23041, 366, 2408, 2810, 493, 264, 23041, 295, 264, 8062, 344, 294, 512, 2685, 636, 51816], "temperature": 0.0, "avg_logprob": -0.06608120339815735, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.00941209215670824}, {"id": 1654, "seek": 1195188, "start": 11951.96, "end": 11960.359999999999, "text": " and if an error occurred right we have some vector p one p two p three and then u one u", "tokens": [50368, 293, 498, 364, 6713, 11068, 558, 321, 362, 512, 8062, 280, 472, 280, 732, 280, 1045, 293, 550, 344, 472, 344, 50788], "temperature": 0.0, "avg_logprob": -0.05479249448487253, "compression_ratio": 1.9246575342465753, "no_speech_prob": 0.001324959797784686}, {"id": 1655, "seek": 1195188, "start": 11960.359999999999, "end": 11969.24, "text": " two u three and u four if an error occurred in one of these entries then these parity bits will", "tokens": [50788, 732, 344, 1045, 293, 344, 1451, 498, 364, 6713, 11068, 294, 472, 295, 613, 23041, 550, 613, 44747, 9239, 486, 51232], "temperature": 0.0, "avg_logprob": -0.05479249448487253, "compression_ratio": 1.9246575342465753, "no_speech_prob": 0.001324959797784686}, {"id": 1656, "seek": 1195188, "start": 11969.24, "end": 11976.439999999999, "text": " detect if an error occurred and where the error occurred based on the consistency of this formula", "tokens": [51232, 5531, 498, 364, 6713, 11068, 293, 689, 264, 6713, 11068, 2361, 322, 264, 14416, 295, 341, 8513, 51592], "temperature": 0.0, "avg_logprob": -0.05479249448487253, "compression_ratio": 1.9246575342465753, "no_speech_prob": 0.001324959797784686}, {"id": 1657, "seek": 1197644, "start": 11977.4, "end": 11985.640000000001, "text": " so let's see how this works in an explicit example let's say we have the vector zero zero one", "tokens": [50412, 370, 718, 311, 536, 577, 341, 1985, 294, 364, 13691, 1365, 718, 311, 584, 321, 362, 264, 8062, 4018, 4018, 472, 50824], "temperature": 0.0, "avg_logprob": -0.07689807703206827, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0009697122732177377}, {"id": 1658, "seek": 1197644, "start": 11986.36, "end": 11991.08, "text": " and i'll break this up into the two different parts so that we isolate the parity bits versus the", "tokens": [50860, 293, 741, 603, 1821, 341, 493, 666, 264, 732, 819, 3166, 370, 300, 321, 25660, 264, 44747, 9239, 5717, 264, 51096], "temperature": 0.0, "avg_logprob": -0.07689807703206827, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0009697122732177377}, {"id": 1659, "seek": 1197644, "start": 11991.08, "end": 11996.04, "text": " original message and by the way this isn't the original message that i'm writing right now this", "tokens": [51096, 3380, 3636, 293, 538, 264, 636, 341, 1943, 380, 264, 3380, 3636, 300, 741, 478, 3579, 558, 586, 341, 51344], "temperature": 0.0, "avg_logprob": -0.07689807703206827, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0009697122732177377}, {"id": 1660, "seek": 1197644, "start": 11996.04, "end": 12001.880000000001, "text": " is what happens after it's sent and let's see the receiver sees this message i believe this may be", "tokens": [51344, 307, 437, 2314, 934, 309, 311, 2279, 293, 718, 311, 536, 264, 20086, 8194, 341, 3636, 741, 1697, 341, 815, 312, 51636], "temperature": 0.0, "avg_logprob": -0.07689807703206827, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0009697122732177377}, {"id": 1661, "seek": 1200188, "start": 12001.96, "end": 12008.599999999999, "text": " the example we were working with a moment ago so let's now look at these formulas and see what", "tokens": [50368, 264, 1365, 321, 645, 1364, 365, 257, 1623, 2057, 370, 718, 311, 586, 574, 412, 613, 30546, 293, 536, 437, 50700], "temperature": 0.0, "avg_logprob": -0.02717588424682617, "compression_ratio": 1.75, "no_speech_prob": 0.011685788631439209}, {"id": 1662, "seek": 1200188, "start": 12008.599999999999, "end": 12018.679999999998, "text": " they say so p one on the one hand equals zero but let's see if the sum of these entries is also", "tokens": [50700, 436, 584, 370, 280, 472, 322, 264, 472, 1011, 6915, 4018, 457, 718, 311, 536, 498, 264, 2408, 295, 613, 23041, 307, 611, 51204], "temperature": 0.0, "avg_logprob": -0.02717588424682617, "compression_ratio": 1.75, "no_speech_prob": 0.011685788631439209}, {"id": 1663, "seek": 1200188, "start": 12018.679999999998, "end": 12025.48, "text": " equal to zero so if we take u one plus u three plus u four we get one plus one plus one is three", "tokens": [51204, 2681, 281, 4018, 370, 498, 321, 747, 344, 472, 1804, 344, 1045, 1804, 344, 1451, 321, 483, 472, 1804, 472, 1804, 472, 307, 1045, 51544], "temperature": 0.0, "avg_logprob": -0.02717588424682617, "compression_ratio": 1.75, "no_speech_prob": 0.011685788631439209}, {"id": 1664, "seek": 1202548, "start": 12025.48, "end": 12037.24, "text": " which is one which is not equal to one which equals u one plus u three plus u four what does", "tokens": [50364, 597, 307, 472, 597, 307, 406, 2681, 281, 472, 597, 6915, 344, 472, 1804, 344, 1045, 1804, 344, 1451, 437, 775, 50952], "temperature": 0.0, "avg_logprob": -0.07962062835693359, "compression_ratio": 1.373134328358209, "no_speech_prob": 0.013221625238656998}, {"id": 1665, "seek": 1203724, "start": 12037.24, "end": 12055.48, "text": " this mean this means an error occurred in one of these entries", "tokens": [50364, 341, 914, 341, 1355, 364, 6713, 11068, 294, 472, 295, 613, 23041, 51276], "temperature": 0.0, "avg_logprob": -0.17267820239067078, "compression_ratio": 1.087719298245614, "no_speech_prob": 0.09806622564792633}, {"id": 1666, "seek": 1205548, "start": 12056.119999999999, "end": 12067.24, "text": " and when i say one of these entries i mean either p one u one u three or u four so let's", "tokens": [50396, 293, 562, 741, 584, 472, 295, 613, 23041, 741, 914, 2139, 280, 472, 344, 472, 344, 1045, 420, 344, 1451, 370, 718, 311, 50952], "temperature": 0.0, "avg_logprob": -0.06291161643134223, "compression_ratio": 1.7375, "no_speech_prob": 0.0033764387480914593}, {"id": 1667, "seek": 1205548, "start": 12067.24, "end": 12075.48, "text": " write that down p one u one u three or u four and we know it has to be exactly one because again", "tokens": [50952, 2464, 300, 760, 280, 472, 344, 472, 344, 1045, 420, 344, 1451, 293, 321, 458, 309, 575, 281, 312, 2293, 472, 570, 797, 51364], "temperature": 0.0, "avg_logprob": -0.06291161643134223, "compression_ratio": 1.7375, "no_speech_prob": 0.0033764387480914593}, {"id": 1668, "seek": 1205548, "start": 12075.48, "end": 12082.039999999999, "text": " we're assuming at most one error occurred and because of this inconsistency we're guaranteed", "tokens": [51364, 321, 434, 11926, 412, 881, 472, 6713, 11068, 293, 570, 295, 341, 22039, 468, 3020, 321, 434, 18031, 51692], "temperature": 0.0, "avg_logprob": -0.06291161643134223, "compression_ratio": 1.7375, "no_speech_prob": 0.0033764387480914593}, {"id": 1669, "seek": 1208204, "start": 12082.04, "end": 12088.2, "text": " that an error occurred the only way no error would occur is if all of these would be consistent so if", "tokens": [50364, 300, 364, 6713, 11068, 264, 787, 636, 572, 6713, 576, 5160, 307, 498, 439, 295, 613, 576, 312, 8398, 370, 498, 50672], "temperature": 0.0, "avg_logprob": -0.06243993311512227, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.011329932138323784}, {"id": 1670, "seek": 1208204, "start": 12088.2, "end": 12093.0, "text": " p one does equal this p two does equal that p three does equal that because this would say", "tokens": [50672, 280, 472, 775, 2681, 341, 280, 732, 775, 2681, 300, 280, 1045, 775, 2681, 300, 570, 341, 576, 584, 50912], "temperature": 0.0, "avg_logprob": -0.06243993311512227, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.011329932138323784}, {"id": 1671, "seek": 1208204, "start": 12093.0, "end": 12100.44, "text": " that our vector is of this form m applied to the original vector u so that doesn't exactly tell us", "tokens": [50912, 300, 527, 8062, 307, 295, 341, 1254, 275, 6456, 281, 264, 3380, 8062, 344, 370, 300, 1177, 380, 2293, 980, 505, 51284], "temperature": 0.0, "avg_logprob": -0.06243993311512227, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.011329932138323784}, {"id": 1672, "seek": 1208204, "start": 12100.44, "end": 12106.84, "text": " which of the errors it is yet is it p one u one u three or u four so for that we'll look at the other", "tokens": [51284, 597, 295, 264, 13603, 309, 307, 1939, 307, 309, 280, 472, 344, 472, 344, 1045, 420, 344, 1451, 370, 337, 300, 321, 603, 574, 412, 264, 661, 51604], "temperature": 0.0, "avg_logprob": -0.06243993311512227, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.011329932138323784}, {"id": 1673, "seek": 1210684, "start": 12107.48, "end": 12115.64, "text": " parity bits so let's look at p two the vector we see says p two is zero is that consistent with", "tokens": [50396, 44747, 9239, 370, 718, 311, 574, 412, 280, 732, 264, 8062, 321, 536, 1619, 280, 732, 307, 4018, 307, 300, 8398, 365, 50804], "temperature": 0.0, "avg_logprob": -0.04294953607533076, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.006487919017672539}, {"id": 1674, "seek": 1210684, "start": 12115.64, "end": 12123.48, "text": " this formula u one plus u two plus u four so u one plus u two plus u four is zero so that actually is", "tokens": [50804, 341, 8513, 344, 472, 1804, 344, 732, 1804, 344, 1451, 370, 344, 472, 1804, 344, 732, 1804, 344, 1451, 307, 4018, 370, 300, 767, 307, 51196], "temperature": 0.0, "avg_logprob": -0.04294953607533076, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.006487919017672539}, {"id": 1675, "seek": 1210684, "start": 12123.48, "end": 12136.2, "text": " consistent what does this tell us this tells us that no error occurred in any of these entries", "tokens": [51196, 8398, 437, 775, 341, 980, 505, 341, 5112, 505, 300, 572, 6713, 11068, 294, 604, 295, 613, 23041, 51832], "temperature": 0.0, "avg_logprob": -0.04294953607533076, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.006487919017672539}, {"id": 1676, "seek": 1213620, "start": 12136.28, "end": 12142.52, "text": " because if one error occurred it is impossible for these two to be equal to each other so this means", "tokens": [50368, 570, 498, 472, 6713, 11068, 309, 307, 6243, 337, 613, 732, 281, 312, 2681, 281, 1184, 661, 370, 341, 1355, 50680], "temperature": 0.0, "avg_logprob": -0.06498357705902635, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005357543122954667}, {"id": 1677, "seek": 1213620, "start": 12145.960000000001, "end": 12150.92, "text": " p two u one u two and u four are all", "tokens": [50852, 280, 732, 344, 472, 344, 732, 293, 344, 1451, 366, 439, 51100], "temperature": 0.0, "avg_logprob": -0.06498357705902635, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005357543122954667}, {"id": 1678, "seek": 1213620, "start": 12153.560000000001, "end": 12161.08, "text": " error free now let's compare this to the first one that we analyzed the first one said", "tokens": [51232, 6713, 1737, 586, 718, 311, 6794, 341, 281, 264, 700, 472, 300, 321, 28181, 264, 700, 472, 848, 51608], "temperature": 0.0, "avg_logprob": -0.06498357705902635, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005357543122954667}, {"id": 1679, "seek": 1216108, "start": 12161.72, "end": 12168.039999999999, "text": " it was possible that the error occurred at u one and it was also possible that the error occurred", "tokens": [50396, 309, 390, 1944, 300, 264, 6713, 11068, 412, 344, 472, 293, 309, 390, 611, 1944, 300, 264, 6713, 11068, 50712], "temperature": 0.0, "avg_logprob": -0.04775077388400123, "compression_ratio": 1.953125, "no_speech_prob": 0.012052071280777454}, {"id": 1680, "seek": 1216108, "start": 12168.039999999999, "end": 12176.28, "text": " at u four this new observation tells us those two possibilities it's not possible that an error", "tokens": [50712, 412, 344, 1451, 341, 777, 14816, 5112, 505, 729, 732, 12178, 309, 311, 406, 1944, 300, 364, 6713, 51124], "temperature": 0.0, "avg_logprob": -0.04775077388400123, "compression_ratio": 1.953125, "no_speech_prob": 0.012052071280777454}, {"id": 1681, "seek": 1216108, "start": 12176.28, "end": 12182.52, "text": " occurred in those entries so now the only possibilities left are p one and maybe u three", "tokens": [51124, 11068, 294, 729, 23041, 370, 586, 264, 787, 12178, 1411, 366, 280, 472, 293, 1310, 344, 1045, 51436], "temperature": 0.0, "avg_logprob": -0.04775077388400123, "compression_ratio": 1.953125, "no_speech_prob": 0.012052071280777454}, {"id": 1682, "seek": 1216108, "start": 12183.16, "end": 12188.44, "text": " so we'll keep that in mind when we go to the last parity bit which will then isolate exactly", "tokens": [51468, 370, 321, 603, 1066, 300, 294, 1575, 562, 321, 352, 281, 264, 1036, 44747, 857, 597, 486, 550, 25660, 2293, 51732], "temperature": 0.0, "avg_logprob": -0.04775077388400123, "compression_ratio": 1.953125, "no_speech_prob": 0.012052071280777454}, {"id": 1683, "seek": 1218844, "start": 12188.52, "end": 12195.32, "text": " where the error occurred so p three is equal to well from this it's one and is that equal to", "tokens": [50368, 689, 264, 6713, 11068, 370, 280, 1045, 307, 2681, 281, 731, 490, 341, 309, 311, 472, 293, 307, 300, 2681, 281, 50708], "temperature": 0.0, "avg_logprob": -0.06298047641538224, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.009411596693098545}, {"id": 1684, "seek": 1218844, "start": 12195.32, "end": 12201.640000000001, "text": " u one plus u two plus u three u one plus u two plus u three it's equal to zero so that's not equal", "tokens": [50708, 344, 472, 1804, 344, 732, 1804, 344, 1045, 344, 472, 1804, 344, 732, 1804, 344, 1045, 309, 311, 2681, 281, 4018, 370, 300, 311, 406, 2681, 51024], "temperature": 0.0, "avg_logprob": -0.06298047641538224, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.009411596693098545}, {"id": 1685, "seek": 1220164, "start": 12201.64, "end": 12216.199999999999, "text": " to this which is u one plus u two plus u three now this tells us that error is in one of p three", "tokens": [50364, 281, 341, 597, 307, 344, 472, 1804, 344, 732, 1804, 344, 1045, 586, 341, 5112, 505, 300, 6713, 307, 294, 472, 295, 280, 1045, 51092], "temperature": 0.0, "avg_logprob": -0.06980464288166591, "compression_ratio": 1.352112676056338, "no_speech_prob": 0.061868105083703995}, {"id": 1686, "seek": 1221620, "start": 12217.08, "end": 12222.76, "text": " u one u two or you or u three", "tokens": [50408, 344, 472, 344, 732, 420, 291, 420, 344, 1045, 50692], "temperature": 0.0, "avg_logprob": -0.08084871985695578, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.07584142684936523}, {"id": 1687, "seek": 1221620, "start": 12225.640000000001, "end": 12234.68, "text": " we already know that u one and u two are not possible right u one and u four are not possible", "tokens": [50836, 321, 1217, 458, 300, 344, 472, 293, 344, 732, 366, 406, 1944, 558, 344, 472, 293, 344, 1451, 366, 406, 1944, 51288], "temperature": 0.0, "avg_logprob": -0.08084871985695578, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.07584142684936523}, {"id": 1688, "seek": 1221620, "start": 12237.320000000002, "end": 12245.08, "text": " and the only error that's common to both of these right because we know an error", "tokens": [51420, 293, 264, 787, 6713, 300, 311, 2689, 281, 1293, 295, 613, 558, 570, 321, 458, 364, 6713, 51808], "temperature": 0.0, "avg_logprob": -0.08084871985695578, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.07584142684936523}, {"id": 1689, "seek": 1224508, "start": 12245.08, "end": 12252.36, "text": " one error occurred in either p one or p r u three or it's possible that an occurred in p three or", "tokens": [50364, 472, 6713, 11068, 294, 2139, 280, 472, 420, 280, 367, 344, 1045, 420, 309, 311, 1944, 300, 364, 11068, 294, 280, 1045, 420, 50728], "temperature": 0.0, "avg_logprob": -0.0543644110361735, "compression_ratio": 2.0434782608695654, "no_speech_prob": 0.0015486509073525667}, {"id": 1690, "seek": 1224508, "start": 12252.36, "end": 12259.48, "text": " u three but if it was p three right suppose that the error occurred in p three then this would", "tokens": [50728, 344, 1045, 457, 498, 309, 390, 280, 1045, 558, 7297, 300, 264, 6713, 11068, 294, 280, 1045, 550, 341, 576, 51084], "temperature": 0.0, "avg_logprob": -0.0543644110361735, "compression_ratio": 2.0434782608695654, "no_speech_prob": 0.0015486509073525667}, {"id": 1691, "seek": 1224508, "start": 12259.48, "end": 12264.52, "text": " have been fine it would have been unaltered because we wouldn't have detected an error", "tokens": [51084, 362, 668, 2489, 309, 576, 362, 668, 517, 304, 40665, 570, 321, 2759, 380, 362, 21896, 364, 6713, 51336], "temperature": 0.0, "avg_logprob": -0.0543644110361735, "compression_ratio": 2.0434782608695654, "no_speech_prob": 0.0015486509073525667}, {"id": 1692, "seek": 1224508, "start": 12264.52, "end": 12270.68, "text": " u three would have also been okay so the only possibility in this case is that an error occurred", "tokens": [51336, 344, 1045, 576, 362, 611, 668, 1392, 370, 264, 787, 7959, 294, 341, 1389, 307, 300, 364, 6713, 11068, 51644], "temperature": 0.0, "avg_logprob": -0.0543644110361735, "compression_ratio": 2.0434782608695654, "no_speech_prob": 0.0015486509073525667}, {"id": 1693, "seek": 1227068, "start": 12270.76, "end": 12277.960000000001, "text": " in u three the one that's singled out from these three parity bits so error", "tokens": [50368, 294, 344, 1045, 264, 472, 300, 311, 1522, 1493, 484, 490, 613, 1045, 44747, 9239, 370, 6713, 50728], "temperature": 0.0, "avg_logprob": -0.07987580448389053, "compression_ratio": 1.8150684931506849, "no_speech_prob": 0.00555440504103899}, {"id": 1694, "seek": 1227068, "start": 12279.4, "end": 12286.28, "text": " in u three and therefore if we go to this original message the message that we received rather", "tokens": [50800, 294, 344, 1045, 293, 4412, 498, 321, 352, 281, 341, 3380, 3636, 264, 3636, 300, 321, 4613, 2831, 51144], "temperature": 0.0, "avg_logprob": -0.07987580448389053, "compression_ratio": 1.8150684931506849, "no_speech_prob": 0.00555440504103899}, {"id": 1695, "seek": 1227068, "start": 12286.84, "end": 12292.44, "text": " and then we um this is sorry this is the message we received but we would have to alter is the", "tokens": [51172, 293, 550, 321, 1105, 341, 307, 2597, 341, 307, 264, 3636, 321, 4613, 457, 321, 576, 362, 281, 11337, 307, 264, 51452], "temperature": 0.0, "avg_logprob": -0.07987580448389053, "compression_ratio": 1.8150684931506849, "no_speech_prob": 0.00555440504103899}, {"id": 1696, "seek": 1229244, "start": 12292.44, "end": 12298.36, "text": " u three entry of this to get back the original message therefore the original message", "tokens": [50364, 344, 1045, 8729, 295, 341, 281, 483, 646, 264, 3380, 3636, 4412, 264, 3380, 3636, 50660], "temperature": 0.0, "avg_logprob": -0.059559309482574464, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.03963062912225723}, {"id": 1697, "seek": 1229244, "start": 12301.4, "end": 12310.04, "text": " is the last four entries as it was before but now we alter that third message that third entry", "tokens": [50812, 307, 264, 1036, 1451, 23041, 382, 309, 390, 949, 457, 586, 321, 11337, 300, 2636, 3636, 300, 2636, 8729, 51244], "temperature": 0.0, "avg_logprob": -0.059559309482574464, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.03963062912225723}, {"id": 1698, "seek": 1229244, "start": 12310.04, "end": 12316.28, "text": " to get one zero zero one as the original message being sent and this is consistent I believe", "tokens": [51244, 281, 483, 472, 4018, 4018, 472, 382, 264, 3380, 3636, 885, 2279, 293, 341, 307, 8398, 286, 1697, 51556], "temperature": 0.0, "avg_logprob": -0.059559309482574464, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.03963062912225723}, {"id": 1699, "seek": 1231628, "start": 12316.28, "end": 12323.560000000001, "text": " with the answer that we obtained earlier so you might be wondering okay this is a little bit more", "tokens": [50364, 365, 264, 1867, 300, 321, 14879, 3071, 370, 291, 1062, 312, 6359, 1392, 341, 307, 257, 707, 857, 544, 50728], "temperature": 0.0, "avg_logprob": -0.05189703717643832, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.009411103092133999}, {"id": 1700, "seek": 1231628, "start": 12323.560000000001, "end": 12329.640000000001, "text": " intuitive because we're sort of counting up our different entries in different ways and sort of", "tokens": [50728, 21769, 570, 321, 434, 1333, 295, 13251, 493, 527, 819, 23041, 294, 819, 2098, 293, 1333, 295, 51032], "temperature": 0.0, "avg_logprob": -0.05189703717643832, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.009411103092133999}, {"id": 1701, "seek": 1231628, "start": 12329.640000000001, "end": 12336.2, "text": " using a process of elimination method to isolate exactly where the error occurred now of course", "tokens": [51032, 1228, 257, 1399, 295, 29224, 3170, 281, 25660, 2293, 689, 264, 6713, 11068, 586, 295, 1164, 51360], "temperature": 0.0, "avg_logprob": -0.05189703717643832, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.009411103092133999}, {"id": 1702, "seek": 1231628, "start": 12336.2, "end": 12340.6, "text": " that is a little bit more straightforward it's easier to work with it's easier to think about", "tokens": [51360, 300, 307, 257, 707, 857, 544, 15325, 309, 311, 3571, 281, 589, 365, 309, 311, 3571, 281, 519, 466, 51580], "temperature": 0.0, "avg_logprob": -0.05189703717643832, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.009411103092133999}, {"id": 1703, "seek": 1234060, "start": 12341.16, "end": 12346.28, "text": " um the first time you see it perhaps on the other hand the linear algebra method", "tokens": [50392, 1105, 264, 700, 565, 291, 536, 309, 4317, 322, 264, 661, 1011, 264, 8213, 21989, 3170, 50648], "temperature": 0.0, "avg_logprob": -0.07820171645925014, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05183205381035805}, {"id": 1704, "seek": 1234060, "start": 12347.4, "end": 12353.0, "text": " it allows you to see it from a maybe potentially different perspective and I would think that if", "tokens": [50704, 309, 4045, 291, 281, 536, 309, 490, 257, 1310, 7263, 819, 4585, 293, 286, 576, 519, 300, 498, 50984], "temperature": 0.0, "avg_logprob": -0.07820171645925014, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05183205381035805}, {"id": 1705, "seek": 1234060, "start": 12353.0, "end": 12359.08, "text": " you're working with a much much larger message that the linear algebra method seems to be a", "tokens": [50984, 291, 434, 1364, 365, 257, 709, 709, 4833, 3636, 300, 264, 8213, 21989, 3170, 2544, 281, 312, 257, 51288], "temperature": 0.0, "avg_logprob": -0.07820171645925014, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05183205381035805}, {"id": 1706, "seek": 1234060, "start": 12359.08, "end": 12363.880000000001, "text": " lot easier to work with especially when you look at the way that we multiply those matrices", "tokens": [51288, 688, 3571, 281, 589, 365, 2318, 562, 291, 574, 412, 264, 636, 300, 321, 12972, 729, 32284, 51528], "temperature": 0.0, "avg_logprob": -0.07820171645925014, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05183205381035805}, {"id": 1707, "seek": 1236388, "start": 12364.679999999998, "end": 12370.92, "text": " and the form of the hamming matrix that we constructed so let me just say this that", "tokens": [50404, 293, 264, 1254, 295, 264, 36600, 278, 8141, 300, 321, 17083, 370, 718, 385, 445, 584, 341, 300, 50716], "temperature": 0.0, "avg_logprob": -0.07306489599756448, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.02930830791592598}, {"id": 1708, "seek": 1236388, "start": 12370.92, "end": 12376.839999999998, "text": " the cs hamming matrix looks a little bit different for instance I think it starts out with", "tokens": [50716, 264, 28277, 36600, 278, 8141, 1542, 257, 707, 857, 819, 337, 5197, 286, 519, 309, 3719, 484, 365, 51012], "temperature": 0.0, "avg_logprob": -0.07306489599756448, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.02930830791592598}, {"id": 1709, "seek": 1236388, "start": 12378.119999999999, "end": 12384.519999999999, "text": " one zero zero zero one zero but then the third column is not zero zero one I think the fourth", "tokens": [51076, 472, 4018, 4018, 4018, 472, 4018, 457, 550, 264, 2636, 7738, 307, 406, 4018, 4018, 472, 286, 519, 264, 6409, 51396], "temperature": 0.0, "avg_logprob": -0.07306489599756448, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.02930830791592598}, {"id": 1710, "seek": 1236388, "start": 12384.519999999999, "end": 12392.679999999998, "text": " column is zero zero one and these other four columns are some permutation of the leftover", "tokens": [51396, 7738, 307, 4018, 4018, 472, 293, 613, 661, 1451, 13766, 366, 512, 4784, 11380, 295, 264, 27373, 51804], "temperature": 0.0, "avg_logprob": -0.07306489599756448, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.02930830791592598}, {"id": 1711, "seek": 1239268, "start": 12392.68, "end": 12398.44, "text": " columns I had and now you can see if you were to manipulate this with the other matrix m that's", "tokens": [50364, 13766, 286, 632, 293, 586, 291, 393, 536, 498, 291, 645, 281, 20459, 341, 365, 264, 661, 8141, 275, 300, 311, 50652], "temperature": 0.0, "avg_logprob": -0.051367033095586864, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.0019876810256391764}, {"id": 1712, "seek": 1239268, "start": 12398.44, "end": 12403.48, "text": " associated to this one by demanding that the kernel of h equals the image of that matrix m", "tokens": [50652, 6615, 281, 341, 472, 538, 19960, 300, 264, 28256, 295, 276, 6915, 264, 3256, 295, 300, 8141, 275, 50904], "temperature": 0.0, "avg_logprob": -0.051367033095586864, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.0019876810256391764}, {"id": 1713, "seek": 1239268, "start": 12404.76, "end": 12409.16, "text": " the algebra would be a little bit more we can't just break this up into do blocks identity", "tokens": [50968, 264, 21989, 576, 312, 257, 707, 857, 544, 321, 393, 380, 445, 1821, 341, 493, 666, 360, 8474, 6575, 51188], "temperature": 0.0, "avg_logprob": -0.051367033095586864, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.0019876810256391764}, {"id": 1714, "seek": 1239268, "start": 12409.16, "end": 12417.880000000001, "text": " and the leftover part instead it has sort of this interpretation but I believe the linear", "tokens": [51188, 293, 264, 27373, 644, 2602, 309, 575, 1333, 295, 341, 14174, 457, 286, 1697, 264, 8213, 51624], "temperature": 0.0, "avg_logprob": -0.051367033095586864, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.0019876810256391764}, {"id": 1715, "seek": 1241788, "start": 12417.88, "end": 12423.72, "text": " algebra calculations are much much simpler if you work with a block die a block matrix", "tokens": [50364, 21989, 20448, 366, 709, 709, 18587, 498, 291, 589, 365, 257, 3461, 978, 257, 3461, 8141, 50656], "temperature": 0.0, "avg_logprob": -0.07704968452453613, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.004198483191430569}, {"id": 1716, "seek": 1241788, "start": 12424.439999999999, "end": 12430.679999999998, "text": " of the form that I indicated earlier now this may change if you try to look at what happens if", "tokens": [50692, 295, 264, 1254, 300, 286, 16176, 3071, 586, 341, 815, 1319, 498, 291, 853, 281, 574, 412, 437, 2314, 498, 51004], "temperature": 0.0, "avg_logprob": -0.07704968452453613, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.004198483191430569}, {"id": 1717, "seek": 1241788, "start": 12430.679999999998, "end": 12436.92, "text": " multiple errors occur how would you potentially correct for all of those additional errors", "tokens": [51004, 3866, 13603, 5160, 577, 576, 291, 7263, 3006, 337, 439, 295, 729, 4497, 13603, 51316], "temperature": 0.0, "avg_logprob": -0.07704968452453613, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.004198483191430569}, {"id": 1718, "seek": 1241788, "start": 12437.64, "end": 12443.0, "text": " and I'll leave you to think about that and to check out the literature in the next few videos", "tokens": [51352, 293, 286, 603, 1856, 291, 281, 519, 466, 300, 293, 281, 1520, 484, 264, 10394, 294, 264, 958, 1326, 2145, 51620], "temperature": 0.0, "avg_logprob": -0.07704968452453613, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.004198483191430569}, {"id": 1719, "seek": 1244300, "start": 12443.0, "end": 12452.44, "text": " we're going to compute the square root of a positive matrix and the way we're going to do this", "tokens": [50364, 321, 434, 516, 281, 14722, 264, 3732, 5593, 295, 257, 3353, 8141, 293, 264, 636, 321, 434, 516, 281, 360, 341, 50836], "temperature": 0.0, "avg_logprob": -0.05163418862127488, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0043306960724294186}, {"id": 1720, "seek": 1244300, "start": 12452.44, "end": 12459.08, "text": " is by introducing something called the functional calculus and in fact we'll learn how to compute", "tokens": [50836, 307, 538, 15424, 746, 1219, 264, 11745, 33400, 293, 294, 1186, 321, 603, 1466, 577, 281, 14722, 51168], "temperature": 0.0, "avg_logprob": -0.05163418862127488, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0043306960724294186}, {"id": 1721, "seek": 1244300, "start": 12460.2, "end": 12466.84, "text": " given any function under suitable conditions what it means to apply that function to a given", "tokens": [51224, 2212, 604, 2445, 833, 12873, 4487, 437, 309, 1355, 281, 3079, 300, 2445, 281, 257, 2212, 51556], "temperature": 0.0, "avg_logprob": -0.05163418862127488, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0043306960724294186}, {"id": 1722, "seek": 1246684, "start": 12466.84, "end": 12473.08, "text": " square matrix so let me go ahead and state the statement of the theorem that will prove", "tokens": [50364, 3732, 8141, 370, 718, 385, 352, 2286, 293, 1785, 264, 5629, 295, 264, 20904, 300, 486, 7081, 50676], "temperature": 0.0, "avg_logprob": -0.06766312878306319, "compression_ratio": 1.5350877192982457, "no_speech_prob": 0.0066922931000590324}, {"id": 1723, "seek": 1246684, "start": 12474.6, "end": 12479.32, "text": " and we'll prove this theorem first by doing an example and then we'll prove the general", "tokens": [50752, 293, 321, 603, 7081, 341, 20904, 700, 538, 884, 364, 1365, 293, 550, 321, 603, 7081, 264, 2674, 50988], "temperature": 0.0, "avg_logprob": -0.06766312878306319, "compression_ratio": 1.5350877192982457, "no_speech_prob": 0.0066922931000590324}, {"id": 1724, "seek": 1247932, "start": 12479.32, "end": 12487.16, "text": " result from scratch so it says let a be a diagonalizable", "tokens": [50364, 1874, 490, 8459, 370, 309, 1619, 718, 257, 312, 257, 21539, 22395, 50756], "temperature": 0.0, "avg_logprob": -0.11784883447595544, "compression_ratio": 1.316831683168317, "no_speech_prob": 0.1602201908826828}, {"id": 1725, "seek": 1247932, "start": 12490.92, "end": 12492.039999999999, "text": " n by n matrix", "tokens": [50944, 297, 538, 297, 8141, 51000], "temperature": 0.0, "avg_logprob": -0.11784883447595544, "compression_ratio": 1.316831683168317, "no_speech_prob": 0.1602201908826828}, {"id": 1726, "seek": 1247932, "start": 12497.8, "end": 12506.92, "text": " and let f be a function be a complex valued function let's say", "tokens": [51288, 293, 718, 283, 312, 257, 2445, 312, 257, 3997, 22608, 2445, 718, 311, 584, 51744], "temperature": 0.0, "avg_logprob": -0.11784883447595544, "compression_ratio": 1.316831683168317, "no_speech_prob": 0.1602201908826828}, {"id": 1727, "seek": 1250932, "start": 12510.279999999999, "end": 12522.44, "text": " defined on what I'm going to call sigma of a and sigma of a is the set of all eigenvalues of a", "tokens": [50412, 7642, 322, 437, 286, 478, 516, 281, 818, 12771, 295, 257, 293, 12771, 295, 257, 307, 264, 992, 295, 439, 10446, 46033, 295, 257, 51020], "temperature": 0.0, "avg_logprob": -0.19998182569231307, "compression_ratio": 1.4745762711864407, "no_speech_prob": 0.002714517991989851}, {"id": 1728, "seek": 1250932, "start": 12530.6, "end": 12536.279999999999, "text": " now if we have this setup we can already define what f of a is so let's do that", "tokens": [51428, 586, 498, 321, 362, 341, 8657, 321, 393, 1217, 6964, 437, 283, 295, 257, 307, 370, 718, 311, 360, 300, 51712], "temperature": 0.0, "avg_logprob": -0.19998182569231307, "compression_ratio": 1.4745762711864407, "no_speech_prob": 0.002714517991989851}, {"id": 1729, "seek": 1253932, "start": 12539.56, "end": 12549.4, "text": " so f of a is going to be defined as p f of d p inverse where", "tokens": [50376, 370, 283, 295, 257, 307, 516, 281, 312, 7642, 382, 280, 283, 295, 274, 280, 17340, 689, 50868], "temperature": 0.0, "avg_logprob": -0.08150694767634074, "compression_ratio": 1.3058823529411765, "no_speech_prob": 0.005554297938942909}, {"id": 1730, "seek": 1253932, "start": 12554.119999999999, "end": 12565.96, "text": " p is the n by n matrix is a matrix of eigenvectors", "tokens": [51104, 280, 307, 264, 297, 538, 297, 8141, 307, 257, 8141, 295, 10446, 303, 5547, 51696], "temperature": 0.0, "avg_logprob": -0.08150694767634074, "compression_ratio": 1.3058823529411765, "no_speech_prob": 0.005554297938942909}, {"id": 1731, "seek": 1256932, "start": 12569.88, "end": 12579.96, "text": " of a written as columns and d is the corresponding", "tokens": [50392, 295, 257, 3720, 382, 13766, 293, 274, 307, 264, 11760, 50896], "temperature": 0.0, "avg_logprob": -0.31247525215148925, "compression_ratio": 1.0746268656716418, "no_speech_prob": 0.010649779811501503}, {"id": 1732, "seek": 1256932, "start": 12582.84, "end": 12586.92, "text": " matrix of eigenvalues", "tokens": [51040, 8141, 295, 10446, 46033, 51244], "temperature": 0.0, "avg_logprob": -0.31247525215148925, "compression_ratio": 1.0746268656716418, "no_speech_prob": 0.010649779811501503}, {"id": 1733, "seek": 1258692, "start": 12587.48, "end": 12593.24, "text": " and what do I mean by f of d", "tokens": [50392, 293, 437, 360, 286, 914, 538, 283, 295, 274, 50680], "temperature": 0.0, "avg_logprob": -0.08570195039113362, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0038243767339736223}, {"id": 1734, "seek": 1258692, "start": 12596.04, "end": 12605.24, "text": " and f of d is defined to be now d is a diagonal matrix so let me just write out exactly what", "tokens": [50820, 293, 283, 295, 274, 307, 7642, 281, 312, 586, 274, 307, 257, 21539, 8141, 370, 718, 385, 445, 2464, 484, 2293, 437, 51280], "temperature": 0.0, "avg_logprob": -0.08570195039113362, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0038243767339736223}, {"id": 1735, "seek": 1258692, "start": 12607.24, "end": 12614.12, "text": " we're doing if we have a matrix of eigenvalues and these eigenvalues can repeat so let me just", "tokens": [51380, 321, 434, 884, 498, 321, 362, 257, 8141, 295, 10446, 46033, 293, 613, 10446, 46033, 393, 7149, 370, 718, 385, 445, 51724], "temperature": 0.0, "avg_logprob": -0.08570195039113362, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0038243767339736223}, {"id": 1736, "seek": 1261412, "start": 12614.12, "end": 12623.320000000002, "text": " write all n of them and then this is zero everywhere else we define f of this matrix to be f applied", "tokens": [50364, 2464, 439, 297, 295, 552, 293, 550, 341, 307, 4018, 5315, 1646, 321, 6964, 283, 295, 341, 8141, 281, 312, 283, 6456, 50824], "temperature": 0.0, "avg_logprob": -0.07451064551054541, "compression_ratio": 1.8344370860927153, "no_speech_prob": 0.007814832031726837}, {"id": 1737, "seek": 1261412, "start": 12623.320000000002, "end": 12629.400000000001, "text": " to the elements along the diagonal and zero everywhere else so this is f of lambda one", "tokens": [50824, 281, 264, 4959, 2051, 264, 21539, 293, 4018, 5315, 1646, 370, 341, 307, 283, 295, 13607, 472, 51128], "temperature": 0.0, "avg_logprob": -0.07451064551054541, "compression_ratio": 1.8344370860927153, "no_speech_prob": 0.007814832031726837}, {"id": 1738, "seek": 1261412, "start": 12630.84, "end": 12640.2, "text": " f of lambda n and zero everywhere else so so far all we've done is set up our assumptions", "tokens": [51200, 283, 295, 13607, 297, 293, 4018, 5315, 1646, 370, 370, 1400, 439, 321, 600, 1096, 307, 992, 493, 527, 17695, 51668], "temperature": 0.0, "avg_logprob": -0.07451064551054541, "compression_ratio": 1.8344370860927153, "no_speech_prob": 0.007814832031726837}, {"id": 1739, "seek": 1264020, "start": 12640.2, "end": 12645.960000000001, "text": " so we have a matrix we have the eigenvalues we can define f applied to a provided that we", "tokens": [50364, 370, 321, 362, 257, 8141, 321, 362, 264, 10446, 46033, 321, 393, 6964, 283, 6456, 281, 257, 5649, 300, 321, 50652], "temperature": 0.0, "avg_logprob": -0.08459211455451118, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00239650160074234}, {"id": 1740, "seek": 1264020, "start": 12645.960000000001, "end": 12652.12, "text": " have a complex valued function defined on the set of eigenvalues and here's the statement of the", "tokens": [50652, 362, 257, 3997, 22608, 2445, 7642, 322, 264, 992, 295, 10446, 46033, 293, 510, 311, 264, 5629, 295, 264, 50960], "temperature": 0.0, "avg_logprob": -0.08459211455451118, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00239650160074234}, {"id": 1741, "seek": 1265212, "start": 12652.12, "end": 12661.480000000001, "text": " theorem then there exists a polynomial", "tokens": [50364, 20904, 550, 456, 8198, 257, 26110, 50832], "temperature": 0.0, "avg_logprob": -0.13262469059712179, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.13114149868488312}, {"id": 1742, "seek": 1265212, "start": 12664.44, "end": 12677.960000000001, "text": " q such that q of a now what do I mean by q of a q is a polynomial and it makes sense to multiply", "tokens": [50980, 9505, 1270, 300, 9505, 295, 257, 586, 437, 360, 286, 914, 538, 9505, 295, 257, 9505, 307, 257, 26110, 293, 309, 1669, 2020, 281, 12972, 51656], "temperature": 0.0, "avg_logprob": -0.13262469059712179, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.13114149868488312}, {"id": 1743, "seek": 1267796, "start": 12678.679999999998, "end": 12682.599999999999, "text": " so we can take a we can square it we can cube it we can also take it to the zero", "tokens": [50400, 370, 321, 393, 747, 257, 321, 393, 3732, 309, 321, 393, 13728, 309, 321, 393, 611, 747, 309, 281, 264, 4018, 50596], "temperature": 0.0, "avg_logprob": -0.06636619567871094, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.02930365316569805}, {"id": 1744, "seek": 1267796, "start": 12682.599999999999, "end": 12687.88, "text": " power that's just the identity matrix and then we can also multiply these by coefficients so if I", "tokens": [50596, 1347, 300, 311, 445, 264, 6575, 8141, 293, 550, 321, 393, 611, 12972, 613, 538, 31994, 370, 498, 286, 50860], "temperature": 0.0, "avg_logprob": -0.06636619567871094, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.02930365316569805}, {"id": 1745, "seek": 1267796, "start": 12687.88, "end": 12693.88, "text": " have any polynomial it's very easy to define what q of a is you just write your polynomial", "tokens": [50860, 362, 604, 26110, 309, 311, 588, 1858, 281, 6964, 437, 9505, 295, 257, 307, 291, 445, 2464, 428, 26110, 51160], "temperature": 0.0, "avg_logprob": -0.06636619567871094, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.02930365316569805}, {"id": 1746, "seek": 1267796, "start": 12693.88, "end": 12700.919999999998, "text": " and where you have your variable you replace it with the matrix a so this is some polynomial in a", "tokens": [51160, 293, 689, 291, 362, 428, 7006, 291, 7406, 309, 365, 264, 8141, 257, 370, 341, 307, 512, 26110, 294, 257, 51512], "temperature": 0.0, "avg_logprob": -0.06636619567871094, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.02930365316569805}, {"id": 1747, "seek": 1270092, "start": 12701.88, "end": 12710.28, "text": " but it turns out to equal f of a as defined previously by this method of breaking a matrix up", "tokens": [50412, 457, 309, 4523, 484, 281, 2681, 283, 295, 257, 382, 7642, 8046, 538, 341, 3170, 295, 7697, 257, 8141, 493, 50832], "temperature": 0.0, "avg_logprob": -0.04151404622089432, "compression_ratio": 1.7251184834123223, "no_speech_prob": 0.012818636372685432}, {"id": 1748, "seek": 1270092, "start": 12710.28, "end": 12715.16, "text": " into its eigenvalues and getting its eigenvectors and constructing it this way", "tokens": [50832, 666, 1080, 10446, 46033, 293, 1242, 1080, 10446, 303, 5547, 293, 39969, 309, 341, 636, 51076], "temperature": 0.0, "avg_logprob": -0.04151404622089432, "compression_ratio": 1.7251184834123223, "no_speech_prob": 0.012818636372685432}, {"id": 1749, "seek": 1270092, "start": 12715.88, "end": 12721.88, "text": " so that's what the statement of this theorem is and it's very surprising because in general you", "tokens": [51112, 370, 300, 311, 437, 264, 5629, 295, 341, 20904, 307, 293, 309, 311, 588, 8830, 570, 294, 2674, 291, 51412], "temperature": 0.0, "avg_logprob": -0.04151404622089432, "compression_ratio": 1.7251184834123223, "no_speech_prob": 0.012818636372685432}, {"id": 1750, "seek": 1270092, "start": 12721.88, "end": 12728.36, "text": " can think of a very strange function such as the square root and this is telling you that there", "tokens": [51412, 393, 519, 295, 257, 588, 5861, 2445, 1270, 382, 264, 3732, 5593, 293, 341, 307, 3585, 291, 300, 456, 51736], "temperature": 0.0, "avg_logprob": -0.04151404622089432, "compression_ratio": 1.7251184834123223, "no_speech_prob": 0.012818636372685432}, {"id": 1751, "seek": 1272836, "start": 12728.36, "end": 12734.6, "text": " is a way to write the square root of that given matrix in terms of a single polynomial", "tokens": [50364, 307, 257, 636, 281, 2464, 264, 3732, 5593, 295, 300, 2212, 8141, 294, 2115, 295, 257, 2167, 26110, 50676], "temperature": 0.0, "avg_logprob": -0.07358082857998935, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.0019265128066763282}, {"id": 1752, "seek": 1272836, "start": 12735.400000000001, "end": 12741.480000000001, "text": " and what we're going to do first is do this through a simple example and illustrate it with", "tokens": [50716, 293, 437, 321, 434, 516, 281, 360, 700, 307, 360, 341, 807, 257, 2199, 1365, 293, 23221, 309, 365, 51020], "temperature": 0.0, "avg_logprob": -0.07358082857998935, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.0019265128066763282}, {"id": 1753, "seek": 1272836, "start": 12741.480000000001, "end": 12746.52, "text": " that simple two by two matrix and then we'll prove the general theorem so we might as well start", "tokens": [51020, 300, 2199, 732, 538, 732, 8141, 293, 550, 321, 603, 7081, 264, 2674, 20904, 370, 321, 1062, 382, 731, 722, 51272], "temperature": 0.0, "avg_logprob": -0.07358082857998935, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.0019265128066763282}, {"id": 1754, "seek": 1272836, "start": 12746.52, "end": 12755.640000000001, "text": " this example now and continue it in the next video so the example is going to be let a equal 10", "tokens": [51272, 341, 1365, 586, 293, 2354, 309, 294, 264, 958, 960, 370, 264, 1365, 307, 516, 281, 312, 718, 257, 2681, 1266, 51728], "temperature": 0.0, "avg_logprob": -0.07358082857998935, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.0019265128066763282}, {"id": 1755, "seek": 1275564, "start": 12756.359999999999, "end": 12775.8, "text": " 6 6 10 and our goal is to compute the square root of a so the first step is find the eigenvalues", "tokens": [50400, 1386, 1386, 1266, 293, 527, 3387, 307, 281, 14722, 264, 3732, 5593, 295, 257, 370, 264, 700, 1823, 307, 915, 264, 10446, 46033, 51372], "temperature": 0.0, "avg_logprob": -0.08768503338682886, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.001987632131204009}, {"id": 1756, "seek": 1275564, "start": 12778.279999999999, "end": 12783.24, "text": " so another thing that we'll do is we'll review how to do these things so to find the eigenvalues", "tokens": [51496, 370, 1071, 551, 300, 321, 603, 360, 307, 321, 603, 3131, 577, 281, 360, 613, 721, 370, 281, 915, 264, 10446, 46033, 51744], "temperature": 0.0, "avg_logprob": -0.08768503338682886, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.001987632131204009}, {"id": 1757, "seek": 1278324, "start": 12783.24, "end": 12792.68, "text": " compute the determinant of 10 minus lambda 6 6 10 minus lambda and this equals 100", "tokens": [50364, 14722, 264, 41296, 295, 1266, 3175, 13607, 1386, 1386, 1266, 3175, 13607, 293, 341, 6915, 2319, 50836], "temperature": 0.0, "avg_logprob": -0.07841365337371826, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.003272897796705365}, {"id": 1758, "seek": 1278324, "start": 12794.84, "end": 12804.92, "text": " plus lambda squared minus 20 lambda minus 36 and some of this simplifies we get lambda squared", "tokens": [50944, 1804, 13607, 8889, 3175, 945, 13607, 3175, 8652, 293, 512, 295, 341, 6883, 11221, 321, 483, 13607, 8889, 51448], "temperature": 0.0, "avg_logprob": -0.07841365337371826, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.003272897796705365}, {"id": 1759, "seek": 1280492, "start": 12805.88, "end": 12825.24, "text": " minus 20 lambda plus 64 and this also factors into lambda minus four and lambda minus 16", "tokens": [50412, 3175, 945, 13607, 1804, 12145, 293, 341, 611, 6771, 666, 13607, 3175, 1451, 293, 13607, 3175, 3165, 51380], "temperature": 0.0, "avg_logprob": -0.17149127854241264, "compression_ratio": 1.3796296296296295, "no_speech_prob": 0.02064407989382744}, {"id": 1760, "seek": 1280492, "start": 12826.2, "end": 12829.72, "text": " so we know what our two eigenvalues are they are four and 16", "tokens": [51428, 370, 321, 458, 437, 527, 732, 10446, 46033, 366, 436, 366, 1451, 293, 3165, 51604], "temperature": 0.0, "avg_logprob": -0.17149127854241264, "compression_ratio": 1.3796296296296295, "no_speech_prob": 0.02064407989382744}, {"id": 1761, "seek": 1283492, "start": 12835.56, "end": 12843.24, "text": " and while we wait for the next video you can try to compute the corresponding eigenvectors", "tokens": [50396, 293, 1339, 321, 1699, 337, 264, 958, 960, 291, 393, 853, 281, 14722, 264, 11760, 10446, 303, 5547, 50780], "temperature": 0.0, "avg_logprob": -0.06494475507188117, "compression_ratio": 1.9108910891089108, "no_speech_prob": 0.0012842279393225908}, {"id": 1762, "seek": 1283492, "start": 12843.24, "end": 12847.48, "text": " and I'll just give you the answer there in a moment so here's the matrix that we're looking at", "tokens": [50780, 293, 286, 603, 445, 976, 291, 264, 1867, 456, 294, 257, 1623, 370, 510, 311, 264, 8141, 300, 321, 434, 1237, 412, 50992], "temperature": 0.0, "avg_logprob": -0.06494475507188117, "compression_ratio": 1.9108910891089108, "no_speech_prob": 0.0012842279393225908}, {"id": 1763, "seek": 1283492, "start": 12847.48, "end": 12852.68, "text": " the associated eigenvalues that we found before and corresponding eigenvectors which you should have", "tokens": [50992, 264, 6615, 10446, 46033, 300, 321, 1352, 949, 293, 11760, 10446, 303, 5547, 597, 291, 820, 362, 51252], "temperature": 0.0, "avg_logprob": -0.06494475507188117, "compression_ratio": 1.9108910891089108, "no_speech_prob": 0.0012842279393225908}, {"id": 1764, "seek": 1283492, "start": 12852.68, "end": 12860.44, "text": " found by computing the corresponding eigenvectors and so now let's compute what f and f meaning the", "tokens": [51252, 1352, 538, 15866, 264, 11760, 10446, 303, 5547, 293, 370, 586, 718, 311, 14722, 437, 283, 293, 283, 3620, 264, 51640], "temperature": 0.0, "avg_logprob": -0.06494475507188117, "compression_ratio": 1.9108910891089108, "no_speech_prob": 0.0012842279393225908}, {"id": 1765, "seek": 1286044, "start": 12860.44, "end": 12868.28, "text": " square root of a so what is f of sorry f of the diagonal matrix d associated to these eigenvalues", "tokens": [50364, 3732, 5593, 295, 257, 370, 437, 307, 283, 295, 2597, 283, 295, 264, 21539, 8141, 274, 6615, 281, 613, 10446, 46033, 50756], "temperature": 0.0, "avg_logprob": -0.04624161858489548, "compression_ratio": 1.7839506172839505, "no_speech_prob": 0.002182621508836746}, {"id": 1766, "seek": 1286044, "start": 12869.32, "end": 12874.52, "text": " this is taking the square root of each of the corresponding entries on the diagonal so it's", "tokens": [50808, 341, 307, 1940, 264, 3732, 5593, 295, 1184, 295, 264, 11760, 23041, 322, 264, 21539, 370, 309, 311, 51068], "temperature": 0.0, "avg_logprob": -0.04624161858489548, "compression_ratio": 1.7839506172839505, "no_speech_prob": 0.002182621508836746}, {"id": 1767, "seek": 1286044, "start": 12874.52, "end": 12884.04, "text": " just two and four and the matrix p is writing down these two eigenvectors so it's just one negative", "tokens": [51068, 445, 732, 293, 1451, 293, 264, 8141, 280, 307, 3579, 760, 613, 732, 10446, 303, 5547, 370, 309, 311, 445, 472, 3671, 51544], "temperature": 0.0, "avg_logprob": -0.04624161858489548, "compression_ratio": 1.7839506172839505, "no_speech_prob": 0.002182621508836746}, {"id": 1768, "seek": 1288404, "start": 12884.04, "end": 12895.560000000001, "text": " one one one its corresponding inverse is the determinant here is two so it's one half and", "tokens": [50364, 472, 472, 472, 1080, 11760, 17340, 307, 264, 41296, 510, 307, 732, 370, 309, 311, 472, 1922, 293, 50940], "temperature": 0.0, "avg_logprob": -0.10257768630981445, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.02368629164993763}, {"id": 1769, "seek": 1288404, "start": 12895.560000000001, "end": 12902.76, "text": " then the rest of this matrix we swap and we negate so that's the corresponding inverse of this matrix", "tokens": [50940, 550, 264, 1472, 295, 341, 8141, 321, 18135, 293, 321, 2485, 473, 370, 300, 311, 264, 11760, 17340, 295, 341, 8141, 51300], "temperature": 0.0, "avg_logprob": -0.10257768630981445, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.02368629164993763}, {"id": 1770, "seek": 1290276, "start": 12903.4, "end": 12908.12, "text": " so what happens when we compute p f of d", "tokens": [50396, 370, 437, 2314, 562, 321, 14722, 280, 283, 295, 274, 50632], "temperature": 0.0, "avg_logprob": -0.0642290034536588, "compression_ratio": 1.6223776223776223, "no_speech_prob": 0.020021837204694748}, {"id": 1771, "seek": 1290276, "start": 12910.6, "end": 12918.2, "text": " p inverse supposedly we should get the square root of our matrix which means that if we square it", "tokens": [50756, 280, 17340, 20581, 321, 820, 483, 264, 3732, 5593, 295, 527, 8141, 597, 1355, 300, 498, 321, 3732, 309, 51136], "temperature": 0.0, "avg_logprob": -0.0642290034536588, "compression_ratio": 1.6223776223776223, "no_speech_prob": 0.020021837204694748}, {"id": 1772, "seek": 1290276, "start": 12918.2, "end": 12926.12, "text": " then we get back our matrix a so if we multiply some of these out i'll skip some of the steps", "tokens": [51136, 550, 321, 483, 646, 527, 8141, 257, 370, 498, 321, 12972, 512, 295, 613, 484, 741, 603, 10023, 512, 295, 264, 4439, 51532], "temperature": 0.0, "avg_logprob": -0.0642290034536588, "compression_ratio": 1.6223776223776223, "no_speech_prob": 0.020021837204694748}, {"id": 1773, "seek": 1292612, "start": 12926.12, "end": 12938.84, "text": " so if we take one half when we multiply p with f of d we get two four negative two four", "tokens": [50364, 370, 498, 321, 747, 472, 1922, 562, 321, 12972, 280, 365, 283, 295, 274, 321, 483, 732, 1451, 3671, 732, 1451, 51000], "temperature": 0.0, "avg_logprob": -0.06531704389131986, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.004609210416674614}, {"id": 1774, "seek": 1292612, "start": 12939.800000000001, "end": 12943.880000000001, "text": " and then we also have p inverse still here i've already pulled that one half out", "tokens": [51048, 293, 550, 321, 611, 362, 280, 17340, 920, 510, 741, 600, 1217, 7373, 300, 472, 1922, 484, 51252], "temperature": 0.0, "avg_logprob": -0.06531704389131986, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.004609210416674614}, {"id": 1775, "seek": 1292612, "start": 12947.960000000001, "end": 12954.36, "text": " and multiplying these matrices out we get well that distributes out so we can just have one two", "tokens": [51456, 293, 30955, 613, 32284, 484, 321, 483, 731, 300, 4400, 1819, 484, 370, 321, 393, 445, 362, 472, 732, 51776], "temperature": 0.0, "avg_logprob": -0.06531704389131986, "compression_ratio": 1.7032258064516128, "no_speech_prob": 0.004609210416674614}, {"id": 1776, "seek": 1295436, "start": 12954.36, "end": 12966.76, "text": " negative one two and when we multiply those we get three one one three so let's check that if we", "tokens": [50364, 3671, 472, 732, 293, 562, 321, 12972, 729, 321, 483, 1045, 472, 472, 1045, 370, 718, 311, 1520, 300, 498, 321, 50984], "temperature": 0.0, "avg_logprob": -0.06387887682233538, "compression_ratio": 1.5403225806451613, "no_speech_prob": 0.0015247134724631906}, {"id": 1777, "seek": 1295436, "start": 12966.76, "end": 12974.84, "text": " square this matrix so let's um let's just call this f of a this is the definition that we gave", "tokens": [50984, 3732, 341, 8141, 370, 718, 311, 1105, 718, 311, 445, 818, 341, 283, 295, 257, 341, 307, 264, 7123, 300, 321, 2729, 51388], "temperature": 0.0, "avg_logprob": -0.06387887682233538, "compression_ratio": 1.5403225806451613, "no_speech_prob": 0.0015247134724631906}, {"id": 1778, "seek": 1297484, "start": 12974.84, "end": 12984.76, "text": " of f of a so what happens when we square this matrix f of a squared we get exactly 10 6 6 10", "tokens": [50364, 295, 283, 295, 257, 370, 437, 2314, 562, 321, 3732, 341, 8141, 283, 295, 257, 8889, 321, 483, 2293, 1266, 1386, 1386, 1266, 50860], "temperature": 0.0, "avg_logprob": -0.05421909264155796, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.03846105933189392}, {"id": 1779, "seek": 1297484, "start": 12984.76, "end": 12991.56, "text": " so we do get our original matrix back so this is one way of computing the square root of a matrix", "tokens": [50860, 370, 321, 360, 483, 527, 3380, 8141, 646, 370, 341, 307, 472, 636, 295, 15866, 264, 3732, 5593, 295, 257, 8141, 51200], "temperature": 0.0, "avg_logprob": -0.05421909264155796, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.03846105933189392}, {"id": 1780, "seek": 1297484, "start": 12991.56, "end": 12998.92, "text": " or at least if it has positive eigenvalues um by computing the corresponding eigenvectors and", "tokens": [51200, 420, 412, 1935, 498, 309, 575, 3353, 10446, 46033, 1105, 538, 15866, 264, 11760, 10446, 303, 5547, 293, 51568], "temperature": 0.0, "avg_logprob": -0.05421909264155796, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.03846105933189392}, {"id": 1781, "seek": 1299892, "start": 12998.92, "end": 13005.960000000001, "text": " eigenvalues and supposedly we have another way of doing this and the interesting thing about", "tokens": [50364, 10446, 46033, 293, 20581, 321, 362, 1071, 636, 295, 884, 341, 293, 264, 1880, 551, 466, 50716], "temperature": 0.0, "avg_logprob": -0.04834655353001186, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.03113749250769615}, {"id": 1782, "seek": 1299892, "start": 13005.960000000001, "end": 13012.28, "text": " the following method is that we will not be able we will not need to use the corresponding eigenvectors", "tokens": [50716, 264, 3480, 3170, 307, 300, 321, 486, 406, 312, 1075, 321, 486, 406, 643, 281, 764, 264, 11760, 10446, 303, 5547, 51032], "temperature": 0.0, "avg_logprob": -0.04834655353001186, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.03113749250769615}, {"id": 1783, "seek": 1299892, "start": 13012.28, "end": 13018.52, "text": " all we need to use are the corresponding eigenvalues and we'll find that polynomial that", "tokens": [51032, 439, 321, 643, 281, 764, 366, 264, 11760, 10446, 46033, 293, 321, 603, 915, 300, 26110, 300, 51344], "temperature": 0.0, "avg_logprob": -0.04834655353001186, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.03113749250769615}, {"id": 1784, "seek": 1299892, "start": 13018.52, "end": 13025.16, "text": " allows us to compute the square root of this matrix so how do we do that for the time being", "tokens": [51344, 4045, 505, 281, 14722, 264, 3732, 5593, 295, 341, 8141, 370, 577, 360, 321, 360, 300, 337, 264, 565, 885, 51676], "temperature": 0.0, "avg_logprob": -0.04834655353001186, "compression_ratio": 1.8390243902439025, "no_speech_prob": 0.03113749250769615}, {"id": 1785, "seek": 1302516, "start": 13025.16, "end": 13030.68, "text": " what we'll first do is we'll find a polynomial", "tokens": [50364, 437, 321, 603, 700, 360, 307, 321, 603, 915, 257, 26110, 50640], "temperature": 0.0, "avg_logprob": -0.05034326252184416, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.004609178751707077}, {"id": 1786, "seek": 1302516, "start": 13034.76, "end": 13046.28, "text": " q such that q of lambda one equals the square root of lambda one or f of lambda one", "tokens": [50844, 9505, 1270, 300, 9505, 295, 13607, 472, 6915, 264, 3732, 5593, 295, 13607, 472, 420, 283, 295, 13607, 472, 51420], "temperature": 0.0, "avg_logprob": -0.05034326252184416, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.004609178751707077}, {"id": 1787, "seek": 1302516, "start": 13047.4, "end": 13054.36, "text": " and q of lambda two equals f of lambda two so in this case these are the square roots", "tokens": [51476, 293, 9505, 295, 13607, 732, 6915, 283, 295, 13607, 732, 370, 294, 341, 1389, 613, 366, 264, 3732, 10669, 51824], "temperature": 0.0, "avg_logprob": -0.05034326252184416, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.004609178751707077}, {"id": 1788, "seek": 1305436, "start": 13054.44, "end": 13058.68, "text": " and we already know exactly what their values are this is two and this is four", "tokens": [50368, 293, 321, 1217, 458, 2293, 437, 641, 4190, 366, 341, 307, 732, 293, 341, 307, 1451, 50580], "temperature": 0.0, "avg_logprob": -0.05363842498424441, "compression_ratio": 1.8071065989847717, "no_speech_prob": 0.0003353287756908685}, {"id": 1789, "seek": 1305436, "start": 13060.12, "end": 13064.52, "text": " so we're trying to do at this point now we're doing a different problem it seems like", "tokens": [50652, 370, 321, 434, 1382, 281, 360, 412, 341, 935, 586, 321, 434, 884, 257, 819, 1154, 309, 2544, 411, 50872], "temperature": 0.0, "avg_logprob": -0.05363842498424441, "compression_ratio": 1.8071065989847717, "no_speech_prob": 0.0003353287756908685}, {"id": 1790, "seek": 1305436, "start": 13064.52, "end": 13070.36, "text": " because now we're just trying to find a polynomial that interpolates these two values of a function", "tokens": [50872, 570, 586, 321, 434, 445, 1382, 281, 915, 257, 26110, 300, 44902, 1024, 613, 732, 4190, 295, 257, 2445, 51164], "temperature": 0.0, "avg_logprob": -0.05363842498424441, "compression_ratio": 1.8071065989847717, "no_speech_prob": 0.0003353287756908685}, {"id": 1791, "seek": 1305436, "start": 13071.560000000001, "end": 13080.12, "text": " so what we're trying to do is so here's lambda one here's lambda two and we have a function", "tokens": [51224, 370, 437, 321, 434, 1382, 281, 360, 307, 370, 510, 311, 13607, 472, 510, 311, 13607, 732, 293, 321, 362, 257, 2445, 51652], "temperature": 0.0, "avg_logprob": -0.05363842498424441, "compression_ratio": 1.8071065989847717, "no_speech_prob": 0.0003353287756908685}, {"id": 1792, "seek": 1308012, "start": 13081.08, "end": 13089.0, "text": " which is just the square root and we know that f applied to lambda one is two and f of lambda", "tokens": [50412, 597, 307, 445, 264, 3732, 5593, 293, 321, 458, 300, 283, 6456, 281, 13607, 472, 307, 732, 293, 283, 295, 13607, 50808], "temperature": 0.0, "avg_logprob": -0.05784264276194018, "compression_ratio": 1.8418367346938775, "no_speech_prob": 0.0021155402064323425}, {"id": 1793, "seek": 1308012, "start": 13090.2, "end": 13096.04, "text": " two is four now this is not drawn to scale in any way but what we're trying to do is", "tokens": [50868, 732, 307, 1451, 586, 341, 307, 406, 10117, 281, 4373, 294, 604, 636, 457, 437, 321, 434, 1382, 281, 360, 307, 51160], "temperature": 0.0, "avg_logprob": -0.05784264276194018, "compression_ratio": 1.8418367346938775, "no_speech_prob": 0.0021155402064323425}, {"id": 1794, "seek": 1308012, "start": 13096.04, "end": 13101.160000000002, "text": " find a polynomial that goes through these two points now you know that two points determine", "tokens": [51160, 915, 257, 26110, 300, 1709, 807, 613, 732, 2793, 586, 291, 458, 300, 732, 2793, 6997, 51416], "temperature": 0.0, "avg_logprob": -0.05784264276194018, "compression_ratio": 1.8418367346938775, "no_speech_prob": 0.0021155402064323425}, {"id": 1795, "seek": 1308012, "start": 13101.160000000002, "end": 13106.92, "text": " a line so a straight line goes through these two points and that straight line of the form", "tokens": [51416, 257, 1622, 370, 257, 2997, 1622, 1709, 807, 613, 732, 2793, 293, 300, 2997, 1622, 295, 264, 1254, 51704], "temperature": 0.0, "avg_logprob": -0.05784264276194018, "compression_ratio": 1.8418367346938775, "no_speech_prob": 0.0021155402064323425}, {"id": 1796, "seek": 1310692, "start": 13107.0, "end": 13116.28, "text": " y equals mx plus b so our goal is to find out what are m and what are b such that", "tokens": [50368, 288, 6915, 275, 87, 1804, 272, 370, 527, 3387, 307, 281, 915, 484, 437, 366, 275, 293, 437, 366, 272, 1270, 300, 50832], "temperature": 0.0, "avg_logprob": -0.053324590558591095, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0008830021251924336}, {"id": 1797, "seek": 1310692, "start": 13116.28, "end": 13121.0, "text": " when we plug in x which is our values of lambda we get the corresponding values of y", "tokens": [50832, 562, 321, 5452, 294, 2031, 597, 307, 527, 4190, 295, 13607, 321, 483, 264, 11760, 4190, 295, 288, 51068], "temperature": 0.0, "avg_logprob": -0.053324590558591095, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0008830021251924336}, {"id": 1798, "seek": 1310692, "start": 13122.76, "end": 13127.8, "text": " so this isn't a very difficult problem but what we're going to do is set it up as a linear algebra", "tokens": [51156, 370, 341, 1943, 380, 257, 588, 2252, 1154, 457, 437, 321, 434, 516, 281, 360, 307, 992, 309, 493, 382, 257, 8213, 21989, 51408], "temperature": 0.0, "avg_logprob": -0.053324590558591095, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0008830021251924336}, {"id": 1799, "seek": 1310692, "start": 13127.8, "end": 13132.76, "text": " problem even though you could probably immediately solve for m and b and the reason we'll do that", "tokens": [51408, 1154, 754, 1673, 291, 727, 1391, 4258, 5039, 337, 275, 293, 272, 293, 264, 1778, 321, 603, 360, 300, 51656], "temperature": 0.0, "avg_logprob": -0.053324590558591095, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0008830021251924336}, {"id": 1800, "seek": 1313276, "start": 13132.76, "end": 13139.0, "text": " will be made more apparent later when we try to compute f of matrices of larger sizes", "tokens": [50364, 486, 312, 1027, 544, 18335, 1780, 562, 321, 853, 281, 14722, 283, 295, 32284, 295, 4833, 11602, 50676], "temperature": 0.0, "avg_logprob": -0.041695513223346914, "compression_ratio": 1.645, "no_speech_prob": 0.004904937464743853}, {"id": 1801, "seek": 1313276, "start": 13139.0, "end": 13143.64, "text": " where it will be more difficult to do the simpler method and it's more reasonable", "tokens": [50676, 689, 309, 486, 312, 544, 2252, 281, 360, 264, 18587, 3170, 293, 309, 311, 544, 10585, 50908], "temperature": 0.0, "avg_logprob": -0.041695513223346914, "compression_ratio": 1.645, "no_speech_prob": 0.004904937464743853}, {"id": 1802, "seek": 1313276, "start": 13143.64, "end": 13148.28, "text": " to solve that system of linear equations using techniques of linear algebra", "tokens": [50908, 281, 5039, 300, 1185, 295, 8213, 11787, 1228, 7512, 295, 8213, 21989, 51140], "temperature": 0.0, "avg_logprob": -0.041695513223346914, "compression_ratio": 1.645, "no_speech_prob": 0.004904937464743853}, {"id": 1803, "seek": 1313276, "start": 13149.880000000001, "end": 13157.32, "text": " so when we set this up we write on this side since this is our y we have m lambda one", "tokens": [51220, 370, 562, 321, 992, 341, 493, 321, 2464, 322, 341, 1252, 1670, 341, 307, 527, 288, 321, 362, 275, 13607, 472, 51592], "temperature": 0.0, "avg_logprob": -0.041695513223346914, "compression_ratio": 1.645, "no_speech_prob": 0.004904937464743853}, {"id": 1804, "seek": 1315732, "start": 13157.32, "end": 13165.4, "text": " plus b and this equals m of lambda two plus b and our unknowns are m and b so if we set up our", "tokens": [50364, 1804, 272, 293, 341, 6915, 275, 295, 13607, 732, 1804, 272, 293, 527, 46048, 366, 275, 293, 272, 370, 498, 321, 992, 493, 527, 50768], "temperature": 0.0, "avg_logprob": -0.05194667623012881, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0043311286717653275}, {"id": 1805, "seek": 1315732, "start": 13165.4, "end": 13174.6, "text": " matrix system we get and what i'll do for convenience is i'll put the ones on the left", "tokens": [50768, 8141, 1185, 321, 483, 293, 437, 741, 603, 360, 337, 19283, 307, 741, 603, 829, 264, 2306, 322, 264, 1411, 51228], "temperature": 0.0, "avg_logprob": -0.05194667623012881, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0043311286717653275}, {"id": 1806, "seek": 1315732, "start": 13174.6, "end": 13183.0, "text": " so i'll put my b's on the left column so it's really b plus mx one one and then this is lambda one", "tokens": [51228, 370, 741, 603, 829, 452, 272, 311, 322, 264, 1411, 7738, 370, 309, 311, 534, 272, 1804, 275, 87, 472, 472, 293, 550, 341, 307, 13607, 472, 51648], "temperature": 0.0, "avg_logprob": -0.05194667623012881, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0043311286717653275}, {"id": 1807, "seek": 1318300, "start": 13183.0, "end": 13190.6, "text": " lambda two and our two corresponding values f of lambda one which in this case is two and four", "tokens": [50364, 13607, 732, 293, 527, 732, 11760, 4190, 283, 295, 13607, 472, 597, 294, 341, 1389, 307, 732, 293, 1451, 50744], "temperature": 0.0, "avg_logprob": -0.06686388479696738, "compression_ratio": 1.8253012048192772, "no_speech_prob": 0.0031723694410175085}, {"id": 1808, "seek": 1318300, "start": 13193.4, "end": 13197.72, "text": " and we know what lambda one and lambda two are they are four and sixteen", "tokens": [50884, 293, 321, 458, 437, 13607, 472, 293, 13607, 732, 366, 436, 366, 1451, 293, 27847, 51100], "temperature": 0.0, "avg_logprob": -0.06686388479696738, "compression_ratio": 1.8253012048192772, "no_speech_prob": 0.0031723694410175085}, {"id": 1809, "seek": 1318300, "start": 13197.72, "end": 13202.92, "text": " so really this is equal to one four one sixteen two four", "tokens": [51100, 370, 534, 341, 307, 2681, 281, 472, 1451, 472, 27847, 732, 1451, 51360], "temperature": 0.0, "avg_logprob": -0.06686388479696738, "compression_ratio": 1.8253012048192772, "no_speech_prob": 0.0031723694410175085}, {"id": 1810, "seek": 1318300, "start": 13205.24, "end": 13211.4, "text": " and if we try to row reduce this system and solve it what we end up getting is", "tokens": [51476, 293, 498, 321, 853, 281, 5386, 5407, 341, 1185, 293, 5039, 309, 437, 321, 917, 493, 1242, 307, 51784], "temperature": 0.0, "avg_logprob": -0.06686388479696738, "compression_ratio": 1.8253012048192772, "no_speech_prob": 0.0031723694410175085}, {"id": 1811, "seek": 1321140, "start": 13212.119999999999, "end": 13214.6, "text": " b equals four thirds", "tokens": [50400, 272, 6915, 1451, 34552, 50524], "temperature": 0.0, "avg_logprob": -0.1353780428568522, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0058194431476294994}, {"id": 1812, "seek": 1321140, "start": 13217.0, "end": 13219.56, "text": " and m equals", "tokens": [50644, 293, 275, 6915, 50772], "temperature": 0.0, "avg_logprob": -0.1353780428568522, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0058194431476294994}, {"id": 1813, "seek": 1321140, "start": 13222.039999999999, "end": 13232.52, "text": " one sixth so this line is of the form y equals four thirds plus one sixth x", "tokens": [50896, 472, 15102, 370, 341, 1622, 307, 295, 264, 1254, 288, 6915, 1451, 34552, 1804, 472, 15102, 2031, 51420], "temperature": 0.0, "avg_logprob": -0.1353780428568522, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0058194431476294994}, {"id": 1814, "seek": 1321140, "start": 13233.88, "end": 13237.0, "text": " and that's our polynomial this is our q of x", "tokens": [51488, 293, 300, 311, 527, 26110, 341, 307, 527, 9505, 295, 2031, 51644], "temperature": 0.0, "avg_logprob": -0.1353780428568522, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0058194431476294994}, {"id": 1815, "seek": 1323700, "start": 13237.08, "end": 13247.64, "text": " and what we'll do in the next video is we will actually apply this polynomial to our matrix", "tokens": [50368, 293, 437, 321, 603, 360, 294, 264, 958, 960, 307, 321, 486, 767, 3079, 341, 26110, 281, 527, 8141, 50896], "temperature": 0.0, "avg_logprob": -0.109099974999061, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.0012446963228285313}, {"id": 1816, "seek": 1323700, "start": 13247.64, "end": 13254.12, "text": " and see if it also satisfies the same equation so here's the polynomial that we found", "tokens": [50896, 293, 536, 498, 309, 611, 44271, 264, 912, 5367, 370, 510, 311, 264, 26110, 300, 321, 1352, 51220], "temperature": 0.0, "avg_logprob": -0.109099974999061, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.0012446963228285313}, {"id": 1817, "seek": 1323700, "start": 13254.84, "end": 13263.08, "text": " as a real valued function in this case and if we wanted to define q of any matrix i'm just", "tokens": [51256, 382, 257, 957, 22608, 2445, 294, 341, 1389, 293, 498, 321, 1415, 281, 6964, 9505, 295, 604, 8141, 741, 478, 445, 51668], "temperature": 0.0, "avg_logprob": -0.109099974999061, "compression_ratio": 1.6144578313253013, "no_speech_prob": 0.0012446963228285313}, {"id": 1818, "seek": 1326308, "start": 13263.08, "end": 13269.56, "text": " going to write a but it's for any matrix a we would the associated polynomial on matrices", "tokens": [50364, 516, 281, 2464, 257, 457, 309, 311, 337, 604, 8141, 257, 321, 576, 264, 6615, 26110, 322, 32284, 50688], "temperature": 0.0, "avg_logprob": -0.06252206973175505, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0018968450604006648}, {"id": 1819, "seek": 1326308, "start": 13269.56, "end": 13275.88, "text": " would be four thirds times the identity matrix which in this case is an n by n matrix well", "tokens": [50688, 576, 312, 1451, 34552, 1413, 264, 6575, 8141, 597, 294, 341, 1389, 307, 364, 297, 538, 297, 8141, 731, 51004], "temperature": 0.0, "avg_logprob": -0.06252206973175505, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0018968450604006648}, {"id": 1820, "seek": 1326308, "start": 13275.88, "end": 13284.28, "text": " in this case it's two by two matrix plus one sixth a so let's see what happens when we actually", "tokens": [51004, 294, 341, 1389, 309, 311, 732, 538, 732, 8141, 1804, 472, 15102, 257, 370, 718, 311, 536, 437, 2314, 562, 321, 767, 51424], "temperature": 0.0, "avg_logprob": -0.06252206973175505, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0018968450604006648}, {"id": 1821, "seek": 1328428, "start": 13284.36, "end": 13289.960000000001, "text": " compute this so we have four thirds of the identity", "tokens": [50368, 14722, 341, 370, 321, 362, 1451, 34552, 295, 264, 6575, 50648], "temperature": 0.0, "avg_logprob": -0.10842225358292863, "compression_ratio": 1.3125, "no_speech_prob": 0.0049052913673222065}, {"id": 1822, "seek": 1328428, "start": 13293.400000000001, "end": 13302.44, "text": " both along the diagonal plus one sixth of our matrix a so it's 10 over six which is five thirds", "tokens": [50820, 1293, 2051, 264, 21539, 1804, 472, 15102, 295, 527, 8141, 257, 370, 309, 311, 1266, 670, 2309, 597, 307, 1732, 34552, 51272], "temperature": 0.0, "avg_logprob": -0.10842225358292863, "compression_ratio": 1.3125, "no_speech_prob": 0.0049052913673222065}, {"id": 1823, "seek": 1330244, "start": 13302.6, "end": 13315.16, "text": " one one five thirds and if we add these two matrices what do we get nine thirds which is three", "tokens": [50372, 472, 472, 1732, 34552, 293, 498, 321, 909, 613, 732, 32284, 437, 360, 321, 483, 4949, 34552, 597, 307, 1045, 51000], "temperature": 0.0, "avg_logprob": -0.09799046302909281, "compression_ratio": 1.7125748502994012, "no_speech_prob": 0.008846793323755264}, {"id": 1824, "seek": 1330244, "start": 13315.960000000001, "end": 13323.720000000001, "text": " one one three which is exactly what we found for f of a before so we already know that when", "tokens": [51040, 472, 472, 1045, 597, 307, 2293, 437, 321, 1352, 337, 283, 295, 257, 949, 370, 321, 1217, 458, 300, 562, 51428], "temperature": 0.0, "avg_logprob": -0.09799046302909281, "compression_ratio": 1.7125748502994012, "no_speech_prob": 0.008846793323755264}, {"id": 1825, "seek": 1330244, "start": 13323.720000000001, "end": 13331.4, "text": " we square this matrix we get exactly our matrix a back now let's look at the more general situation", "tokens": [51428, 321, 3732, 341, 8141, 321, 483, 2293, 527, 8141, 257, 646, 586, 718, 311, 574, 412, 264, 544, 2674, 2590, 51812], "temperature": 0.0, "avg_logprob": -0.09799046302909281, "compression_ratio": 1.7125748502994012, "no_speech_prob": 0.008846793323755264}, {"id": 1826, "seek": 1333244, "start": 13333.16, "end": 13341.4, "text": " so we're going to go back to our setup where we have an n by n matrix a a function f on the", "tokens": [50400, 370, 321, 434, 516, 281, 352, 646, 281, 527, 8657, 689, 321, 362, 364, 297, 538, 297, 8141, 257, 257, 2445, 283, 322, 264, 50812], "temperature": 0.0, "avg_logprob": -0.0773143138525621, "compression_ratio": 1.5, "no_speech_prob": 0.0015010753413662314}, {"id": 1827, "seek": 1333244, "start": 13341.4, "end": 13351.880000000001, "text": " set of eigenvalues so we write if a is n by n and lambda one through lambda n are the eigenvalues", "tokens": [50812, 992, 295, 10446, 46033, 370, 321, 2464, 498, 257, 307, 297, 538, 297, 293, 13607, 472, 807, 13607, 297, 366, 264, 10446, 46033, 51336], "temperature": 0.0, "avg_logprob": -0.0773143138525621, "compression_ratio": 1.5, "no_speech_prob": 0.0015010753413662314}, {"id": 1828, "seek": 1335188, "start": 13351.96, "end": 13358.519999999999, "text": " and f is a function", "tokens": [50368, 293, 283, 307, 257, 2445, 50696], "temperature": 0.0, "avg_logprob": -0.12819209694862366, "compression_ratio": 1.492537313432836, "no_speech_prob": 0.0024725291877985}, {"id": 1829, "seek": 1335188, "start": 13361.88, "end": 13369.64, "text": " on the set of eigenvalues to let's say the complex numbers we're going to find a polynomial q", "tokens": [50864, 322, 264, 992, 295, 10446, 46033, 281, 718, 311, 584, 264, 3997, 3547, 321, 434, 516, 281, 915, 257, 26110, 9505, 51252], "temperature": 0.0, "avg_logprob": -0.12819209694862366, "compression_ratio": 1.492537313432836, "no_speech_prob": 0.0024725291877985}, {"id": 1830, "seek": 1335188, "start": 13370.519999999999, "end": 13375.96, "text": " that first satisfies the initial equation we wrote down for the associated eigenvalues", "tokens": [51296, 300, 700, 44271, 264, 5883, 5367, 321, 4114, 760, 337, 264, 6615, 10446, 46033, 51568], "temperature": 0.0, "avg_logprob": -0.12819209694862366, "compression_ratio": 1.492537313432836, "no_speech_prob": 0.0024725291877985}, {"id": 1831, "seek": 1337596, "start": 13375.96, "end": 13380.519999999999, "text": " so our goal is to find a polynomial", "tokens": [50364, 370, 527, 3387, 307, 281, 915, 257, 26110, 50592], "temperature": 0.0, "avg_logprob": -0.11118802317866573, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.001324957236647606}, {"id": 1832, "seek": 1337596, "start": 13384.519999999999, "end": 13398.199999999999, "text": " q such that q of when we plug in our corresponding eigenvalues we get f applied to those corresponding", "tokens": [50792, 9505, 1270, 300, 9505, 295, 562, 321, 5452, 294, 527, 11760, 10446, 46033, 321, 483, 283, 6456, 281, 729, 11760, 51476], "temperature": 0.0, "avg_logprob": -0.11118802317866573, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.001324957236647606}, {"id": 1833, "seek": 1337596, "start": 13398.199999999999, "end": 13405.08, "text": " eigenvalues and we already know that that's problem will help us solve this one by a", "tokens": [51476, 10446, 46033, 293, 321, 1217, 458, 300, 300, 311, 1154, 486, 854, 505, 5039, 341, 472, 538, 257, 51820], "temperature": 0.0, "avg_logprob": -0.11118802317866573, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.001324957236647606}, {"id": 1834, "seek": 1340508, "start": 13405.08, "end": 13410.68, "text": " similar analysis that's why we're reducing our problem to finding a polynomial on just a finite", "tokens": [50364, 2531, 5215, 300, 311, 983, 321, 434, 12245, 527, 1154, 281, 5006, 257, 26110, 322, 445, 257, 19362, 50644], "temperature": 0.0, "avg_logprob": -0.04358036216648146, "compression_ratio": 1.8502415458937198, "no_speech_prob": 0.0014101618435233831}, {"id": 1835, "seek": 1340508, "start": 13410.68, "end": 13418.12, "text": " set of numbers rather than trying to find the answer to our matrix problem and in fact when we", "tokens": [50644, 992, 295, 3547, 2831, 813, 1382, 281, 915, 264, 1867, 281, 527, 8141, 1154, 293, 294, 1186, 562, 321, 51016], "temperature": 0.0, "avg_logprob": -0.04358036216648146, "compression_ratio": 1.8502415458937198, "no_speech_prob": 0.0014101618435233831}, {"id": 1836, "seek": 1340508, "start": 13418.12, "end": 13423.56, "text": " look at the degree of this polynomial we notice that it was also matching the degree of the size", "tokens": [51016, 574, 412, 264, 4314, 295, 341, 26110, 321, 3449, 300, 309, 390, 611, 14324, 264, 4314, 295, 264, 2744, 51288], "temperature": 0.0, "avg_logprob": -0.04358036216648146, "compression_ratio": 1.8502415458937198, "no_speech_prob": 0.0014101618435233831}, {"id": 1837, "seek": 1340508, "start": 13423.56, "end": 13429.48, "text": " of our matrix and that's going to be true in general we'll be able to find the polynomial whose", "tokens": [51288, 295, 527, 8141, 293, 300, 311, 516, 281, 312, 2074, 294, 2674, 321, 603, 312, 1075, 281, 915, 264, 26110, 6104, 51584], "temperature": 0.0, "avg_logprob": -0.04358036216648146, "compression_ratio": 1.8502415458937198, "no_speech_prob": 0.0014101618435233831}, {"id": 1838, "seek": 1342948, "start": 13429.48, "end": 13438.279999999999, "text": " degree is at most the size of the matrix that will solve that problem namely q of a equals f of a", "tokens": [50364, 4314, 307, 412, 881, 264, 2744, 295, 264, 8141, 300, 486, 5039, 300, 1154, 20926, 9505, 295, 257, 6915, 283, 295, 257, 50804], "temperature": 0.0, "avg_logprob": -0.0623808476462293, "compression_ratio": 1.6432748538011697, "no_speech_prob": 0.0003053442342206836}, {"id": 1839, "seek": 1342948, "start": 13439.48, "end": 13446.199999999999, "text": " and why that happens is precisely because of this equation because there are going to be", "tokens": [50864, 293, 983, 300, 2314, 307, 13402, 570, 295, 341, 5367, 570, 456, 366, 516, 281, 312, 51200], "temperature": 0.0, "avg_logprob": -0.0623808476462293, "compression_ratio": 1.6432748538011697, "no_speech_prob": 0.0003053442342206836}, {"id": 1840, "seek": 1342948, "start": 13446.199999999999, "end": 13453.64, "text": " at most n distinct eigenvalues and so we only need to find a polynomial so let me draw this as", "tokens": [51200, 412, 881, 297, 10644, 10446, 46033, 293, 370, 321, 787, 643, 281, 915, 257, 26110, 370, 718, 385, 2642, 341, 382, 51572], "temperature": 0.0, "avg_logprob": -0.0623808476462293, "compression_ratio": 1.6432748538011697, "no_speech_prob": 0.0003053442342206836}, {"id": 1841, "seek": 1345364, "start": 13454.279999999999, "end": 13460.76, "text": " visually let's just assume everything is real so it's simple to draw this so if we have lambda 1", "tokens": [50396, 19622, 718, 311, 445, 6552, 1203, 307, 957, 370, 309, 311, 2199, 281, 2642, 341, 370, 498, 321, 362, 13607, 502, 50720], "temperature": 0.0, "avg_logprob": -0.06739026912744495, "compression_ratio": 1.744047619047619, "no_speech_prob": 0.01223993394523859}, {"id": 1842, "seek": 1345364, "start": 13460.76, "end": 13469.96, "text": " here lambda 3 here lambda 2 maybe another lambda 4 somewhere out here and let's say lambda 2 equals", "tokens": [50720, 510, 13607, 805, 510, 13607, 568, 1310, 1071, 13607, 1017, 4079, 484, 510, 293, 718, 311, 584, 13607, 568, 6915, 51180], "temperature": 0.0, "avg_logprob": -0.06739026912744495, "compression_ratio": 1.744047619047619, "no_speech_prob": 0.01223993394523859}, {"id": 1843, "seek": 1345364, "start": 13469.96, "end": 13477.16, "text": " lambda 5 for instance and if we apply f to these numbers let's say they look something like this", "tokens": [51180, 13607, 1025, 337, 5197, 293, 498, 321, 3079, 283, 281, 613, 3547, 718, 311, 584, 436, 574, 746, 411, 341, 51540], "temperature": 0.0, "avg_logprob": -0.06739026912744495, "compression_ratio": 1.744047619047619, "no_speech_prob": 0.01223993394523859}, {"id": 1844, "seek": 1347716, "start": 13478.119999999999, "end": 13486.6, "text": " what we're going to try to do is find the polynomial that fits through these in this case four points", "tokens": [50412, 437, 321, 434, 516, 281, 853, 281, 360, 307, 915, 264, 26110, 300, 9001, 807, 613, 294, 341, 1389, 1451, 2793, 50836], "temperature": 0.0, "avg_logprob": -0.10161794634426341, "compression_ratio": 1.8074534161490683, "no_speech_prob": 0.0007321664597839117}, {"id": 1845, "seek": 1347716, "start": 13486.6, "end": 13493.72, "text": " and the reason it's four is because two of our eigenvalues are repeated and so we have to find", "tokens": [50836, 293, 264, 1778, 309, 311, 1451, 307, 570, 732, 295, 527, 10446, 46033, 366, 10477, 293, 370, 321, 362, 281, 915, 51192], "temperature": 0.0, "avg_logprob": -0.10161794634426341, "compression_ratio": 1.8074534161490683, "no_speech_prob": 0.0007321664597839117}, {"id": 1846, "seek": 1347716, "start": 13493.72, "end": 13504.52, "text": " the polynomial through these four points so and if we had n distinct eigenvalues we would have", "tokens": [51192, 264, 26110, 807, 613, 1451, 2793, 370, 293, 498, 321, 632, 297, 10644, 10446, 46033, 321, 576, 362, 51732], "temperature": 0.0, "avg_logprob": -0.10161794634426341, "compression_ratio": 1.8074534161490683, "no_speech_prob": 0.0007321664597839117}, {"id": 1847, "seek": 1350452, "start": 13504.6, "end": 13509.720000000001, "text": " n distinct points through which we would have to find a polynomial sorry i misspoke i think i", "tokens": [50368, 297, 10644, 2793, 807, 597, 321, 576, 362, 281, 915, 257, 26110, 2597, 741, 1713, 48776, 741, 519, 741, 50624], "temperature": 0.0, "avg_logprob": -0.08350210636854172, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008061117492616177}, {"id": 1848, "seek": 1350452, "start": 13509.720000000001, "end": 13515.720000000001, "text": " said degree two i meant degree one because one is the highest power but it starts from zero", "tokens": [50624, 848, 4314, 732, 741, 4140, 4314, 472, 570, 472, 307, 264, 6343, 1347, 457, 309, 3719, 490, 4018, 50924], "temperature": 0.0, "avg_logprob": -0.08350210636854172, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008061117492616177}, {"id": 1849, "seek": 1350452, "start": 13516.68, "end": 13521.720000000001, "text": " so in this case we would find a degree in this case we would find a degree three polynomial", "tokens": [50972, 370, 294, 341, 1389, 321, 576, 915, 257, 4314, 294, 341, 1389, 321, 576, 915, 257, 4314, 1045, 26110, 51224], "temperature": 0.0, "avg_logprob": -0.08350210636854172, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008061117492616177}, {"id": 1850, "seek": 1352172, "start": 13522.279999999999, "end": 13535.08, "text": " and in general it would be at most n minus one degree so and again if we have multiplicity", "tokens": [50392, 293, 294, 2674, 309, 576, 312, 412, 881, 297, 3175, 472, 4314, 370, 293, 797, 498, 321, 362, 17596, 507, 51032], "temperature": 0.0, "avg_logprob": -0.10965259869893391, "compression_ratio": 1.5595238095238095, "no_speech_prob": 0.013635645620524883}, {"id": 1851, "seek": 1352172, "start": 13535.08, "end": 13540.599999999999, "text": " that's non z that's um bigger than one then the problem is going to be a little bit easier", "tokens": [51032, 300, 311, 2107, 710, 300, 311, 1105, 3801, 813, 472, 550, 264, 1154, 307, 516, 281, 312, 257, 707, 857, 3571, 51308], "temperature": 0.0, "avg_logprob": -0.10965259869893391, "compression_ratio": 1.5595238095238095, "no_speech_prob": 0.013635645620524883}, {"id": 1852, "seek": 1352172, "start": 13540.599999999999, "end": 13545.56, "text": " to solve because we can find a polynomial of a lower degree so let's just assume", "tokens": [51308, 281, 5039, 570, 321, 393, 915, 257, 26110, 295, 257, 3126, 4314, 370, 718, 311, 445, 6552, 51556], "temperature": 0.0, "avg_logprob": -0.10965259869893391, "compression_ratio": 1.5595238095238095, "no_speech_prob": 0.013635645620524883}, {"id": 1853, "seek": 1354556, "start": 13545.56, "end": 13551.16, "text": " that all eigenvalues", "tokens": [50364, 300, 439, 10446, 46033, 50644], "temperature": 0.0, "avg_logprob": -0.08169497081211635, "compression_ratio": 1.7094972067039107, "no_speech_prob": 0.0034832230303436518}, {"id": 1854, "seek": 1354556, "start": 13554.519999999999, "end": 13561.16, "text": " are distinct just it's not it's not actually making our problem easier it's making it a little bit", "tokens": [50812, 366, 10644, 445, 309, 311, 406, 309, 311, 406, 767, 1455, 527, 1154, 3571, 309, 311, 1455, 309, 257, 707, 857, 51144], "temperature": 0.0, "avg_logprob": -0.08169497081211635, "compression_ratio": 1.7094972067039107, "no_speech_prob": 0.0034832230303436518}, {"id": 1855, "seek": 1354556, "start": 13561.16, "end": 13566.84, "text": " harder because if some of them repeat then the problem is reduced to a smaller and simpler", "tokens": [51144, 6081, 570, 498, 512, 295, 552, 7149, 550, 264, 1154, 307, 9212, 281, 257, 4356, 293, 18587, 51428], "temperature": 0.0, "avg_logprob": -0.08169497081211635, "compression_ratio": 1.7094972067039107, "no_speech_prob": 0.0034832230303436518}, {"id": 1856, "seek": 1354556, "start": 13566.84, "end": 13572.279999999999, "text": " matrix algebra problem so if we assume all the eigenvalues that are distinct we're really doing", "tokens": [51428, 8141, 21989, 1154, 370, 498, 321, 6552, 439, 264, 10446, 46033, 300, 366, 10644, 321, 434, 534, 884, 51700], "temperature": 0.0, "avg_logprob": -0.08169497081211635, "compression_ratio": 1.7094972067039107, "no_speech_prob": 0.0034832230303436518}, {"id": 1857, "seek": 1357228, "start": 13572.28, "end": 13583.480000000001, "text": " the hardest case now when such a thing happens we can write our polynomial q of x as a zero plus", "tokens": [50364, 264, 13158, 1389, 586, 562, 1270, 257, 551, 2314, 321, 393, 2464, 527, 26110, 9505, 295, 2031, 382, 257, 4018, 1804, 50924], "temperature": 0.0, "avg_logprob": -0.04580932193332248, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0032727231737226248}, {"id": 1858, "seek": 1357228, "start": 13583.480000000001, "end": 13591.24, "text": " a one x plus a two x squared all the way up to the highest degree which you know just by", "tokens": [50924, 257, 472, 2031, 1804, 257, 732, 2031, 8889, 439, 264, 636, 493, 281, 264, 6343, 4314, 597, 291, 458, 445, 538, 51312], "temperature": 0.0, "avg_logprob": -0.04580932193332248, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0032727231737226248}, {"id": 1859, "seek": 1357228, "start": 13591.24, "end": 13597.640000000001, "text": " looking at the pictures we're assuming it's of the form a n minus one x to the n minus one", "tokens": [51312, 1237, 412, 264, 5242, 321, 434, 11926, 309, 311, 295, 264, 1254, 257, 297, 3175, 472, 2031, 281, 264, 297, 3175, 472, 51632], "temperature": 0.0, "avg_logprob": -0.04580932193332248, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.0032727231737226248}, {"id": 1860, "seek": 1359764, "start": 13597.64, "end": 13604.68, "text": " and if we write down all of these different equations we're going to get another linear system", "tokens": [50364, 293, 498, 321, 2464, 760, 439, 295, 613, 819, 11787, 321, 434, 516, 281, 483, 1071, 8213, 1185, 50716], "temperature": 0.0, "avg_logprob": -0.11932204605697037, "compression_ratio": 1.9216867469879517, "no_speech_prob": 0.0014103105058893561}, {"id": 1861, "seek": 1359764, "start": 13605.72, "end": 13608.84, "text": " and the unknowns of that linear system are these a's", "tokens": [50768, 293, 264, 46048, 295, 300, 8213, 1185, 366, 613, 257, 311, 50924], "temperature": 0.0, "avg_logprob": -0.11932204605697037, "compression_ratio": 1.9216867469879517, "no_speech_prob": 0.0014103105058893561}, {"id": 1862, "seek": 1359764, "start": 13612.84, "end": 13618.76, "text": " and we know the values of x's those are different eigenvalues and we know the q of those x's are", "tokens": [51124, 293, 321, 458, 264, 4190, 295, 2031, 311, 729, 366, 819, 10446, 46033, 293, 321, 458, 264, 9505, 295, 729, 2031, 311, 366, 51420], "temperature": 0.0, "avg_logprob": -0.11932204605697037, "compression_ratio": 1.9216867469879517, "no_speech_prob": 0.0014103105058893561}, {"id": 1863, "seek": 1359764, "start": 13618.76, "end": 13624.039999999999, "text": " it's f applied to those values so the associated linear system that we get", "tokens": [51420, 309, 311, 283, 6456, 281, 729, 4190, 370, 264, 6615, 8213, 1185, 300, 321, 483, 51684], "temperature": 0.0, "avg_logprob": -0.11932204605697037, "compression_ratio": 1.9216867469879517, "no_speech_prob": 0.0014103105058893561}, {"id": 1864, "seek": 1362404, "start": 13624.84, "end": 13633.240000000002, "text": " that looks like one ones along the vertical on the left side corresponding to the coefficient", "tokens": [50404, 300, 1542, 411, 472, 2306, 2051, 264, 9429, 322, 264, 1411, 1252, 11760, 281, 264, 17619, 50824], "temperature": 0.0, "avg_logprob": -0.11565567707193308, "compression_ratio": 2.007575757575758, "no_speech_prob": 0.0021155052818357944}, {"id": 1865, "seek": 1362404, "start": 13633.240000000002, "end": 13639.0, "text": " in front of a zero the coefficients in front of a one are the different eigenvalues", "tokens": [50824, 294, 1868, 295, 257, 4018, 264, 31994, 294, 1868, 295, 257, 472, 366, 264, 819, 10446, 46033, 51112], "temperature": 0.0, "avg_logprob": -0.11565567707193308, "compression_ratio": 2.007575757575758, "no_speech_prob": 0.0021155052818357944}, {"id": 1866, "seek": 1362404, "start": 13643.080000000002, "end": 13650.36, "text": " the coefficients in front of a in front of x squared are the squares of our eigenvalues", "tokens": [51316, 264, 31994, 294, 1868, 295, 257, 294, 1868, 295, 2031, 8889, 366, 264, 19368, 295, 527, 10446, 46033, 51680], "temperature": 0.0, "avg_logprob": -0.11565567707193308, "compression_ratio": 2.007575757575758, "no_speech_prob": 0.0021155052818357944}, {"id": 1867, "seek": 1365404, "start": 13654.28, "end": 13660.84, "text": " and then the coefficients in front of our highest degree are", "tokens": [50376, 293, 550, 264, 31994, 294, 1868, 295, 527, 6343, 4314, 366, 50704], "temperature": 0.0, "avg_logprob": -0.13180109511974247, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.00014425527479033917}, {"id": 1868, "seek": 1365404, "start": 13663.960000000001, "end": 13667.640000000001, "text": " our eigenvalues to the power of that highest degree", "tokens": [50860, 527, 10446, 46033, 281, 264, 1347, 295, 300, 6343, 4314, 51044], "temperature": 0.0, "avg_logprob": -0.13180109511974247, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.00014425527479033917}, {"id": 1869, "seek": 1365404, "start": 13673.320000000002, "end": 13679.800000000001, "text": " and the augmented side of our matrix is the value of those different eigenvalues", "tokens": [51328, 293, 264, 36155, 1252, 295, 527, 8141, 307, 264, 2158, 295, 729, 819, 10446, 46033, 51652], "temperature": 0.0, "avg_logprob": -0.13180109511974247, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.00014425527479033917}, {"id": 1870, "seek": 1368404, "start": 13684.68, "end": 13695.0, "text": " so our goal will be to try to solve this system well actually our goal is a little bit easier than", "tokens": [50396, 370, 527, 3387, 486, 312, 281, 853, 281, 5039, 341, 1185, 731, 767, 527, 3387, 307, 257, 707, 857, 3571, 813, 50912], "temperature": 0.0, "avg_logprob": -0.06855236081516042, "compression_ratio": 1.7515151515151515, "no_speech_prob": 0.0004878416075371206}, {"id": 1871, "seek": 1368404, "start": 13695.0, "end": 13703.320000000002, "text": " that the statement of the theorem says that there exists a polynomial q that satisfies the equation", "tokens": [50912, 300, 264, 5629, 295, 264, 20904, 1619, 300, 456, 8198, 257, 26110, 9505, 300, 44271, 264, 5367, 51328], "temperature": 0.0, "avg_logprob": -0.06855236081516042, "compression_ratio": 1.7515151515151515, "no_speech_prob": 0.0004878416075371206}, {"id": 1872, "seek": 1368404, "start": 13703.320000000002, "end": 13709.880000000001, "text": " q of a equals f of a and so all we really have to do is show that such a polynomial exists", "tokens": [51328, 9505, 295, 257, 6915, 283, 295, 257, 293, 370, 439, 321, 534, 362, 281, 360, 307, 855, 300, 1270, 257, 26110, 8198, 51656], "temperature": 0.0, "avg_logprob": -0.06855236081516042, "compression_ratio": 1.7515151515151515, "no_speech_prob": 0.0004878416075371206}, {"id": 1873, "seek": 1370988, "start": 13710.759999999998, "end": 13718.119999999999, "text": " so we don't have to solve this solving it is what is q so given a matrix a what is what is q", "tokens": [50408, 370, 321, 500, 380, 362, 281, 5039, 341, 12606, 309, 307, 437, 307, 9505, 370, 2212, 257, 8141, 257, 437, 307, 437, 307, 9505, 50776], "temperature": 0.0, "avg_logprob": -0.08151294787724812, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.001987631432712078}, {"id": 1874, "seek": 1370988, "start": 13718.119999999999, "end": 13723.16, "text": " the what is that polynomial q we're just trying to show that one exists in other words what we", "tokens": [50776, 264, 437, 307, 300, 26110, 9505, 321, 434, 445, 1382, 281, 855, 300, 472, 8198, 294, 661, 2283, 437, 321, 51028], "temperature": 0.0, "avg_logprob": -0.08151294787724812, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.001987631432712078}, {"id": 1875, "seek": 1370988, "start": 13723.16, "end": 13730.199999999999, "text": " want to do is answer the question does a solution to this system exist and if we want to know", "tokens": [51028, 528, 281, 360, 307, 1867, 264, 1168, 775, 257, 3827, 281, 341, 1185, 2514, 293, 498, 321, 528, 281, 458, 51380], "temperature": 0.0, "avg_logprob": -0.08151294787724812, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.001987631432712078}, {"id": 1876, "seek": 1373020, "start": 13730.36, "end": 13732.76, "text": " how a solution exists", "tokens": [50372, 577, 257, 3827, 8198, 50492], "temperature": 0.0, "avg_logprob": -0.12563493116846625, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.0028894804418087006}, {"id": 1877, "seek": 1373020, "start": 13736.28, "end": 13745.400000000001, "text": " if well if we can solve this system right and one criteria that allows us to solve this system", "tokens": [50668, 498, 731, 498, 321, 393, 5039, 341, 1185, 558, 293, 472, 11101, 300, 4045, 505, 281, 5039, 341, 1185, 51124], "temperature": 0.0, "avg_logprob": -0.12563493116846625, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.0028894804418087006}, {"id": 1878, "seek": 1373020, "start": 13745.960000000001, "end": 13753.720000000001, "text": " is that if this matrix here which is an n by an n minus what is this an n by n matrix", "tokens": [51152, 307, 300, 498, 341, 8141, 510, 597, 307, 364, 297, 538, 364, 297, 3175, 437, 307, 341, 364, 297, 538, 297, 8141, 51540], "temperature": 0.0, "avg_logprob": -0.12563493116846625, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.0028894804418087006}, {"id": 1879, "seek": 1375372, "start": 13754.439999999999, "end": 13761.96, "text": " right it's an n by n matrix and if this matrix is invertible and when is the matrix invertible", "tokens": [50400, 558, 309, 311, 364, 297, 538, 297, 8141, 293, 498, 341, 8141, 307, 33966, 964, 293, 562, 307, 264, 8141, 33966, 964, 50776], "temperature": 0.0, "avg_logprob": -0.117944702735314, "compression_ratio": 1.9699248120300752, "no_speech_prob": 0.002889233408495784}, {"id": 1880, "seek": 1375372, "start": 13761.96, "end": 13767.4, "text": " if the determinant of this matrix is non-zero so solution exists if the determinant of", "tokens": [50776, 498, 264, 41296, 295, 341, 8141, 307, 2107, 12, 32226, 370, 3827, 8198, 498, 264, 41296, 295, 51048], "temperature": 0.0, "avg_logprob": -0.117944702735314, "compression_ratio": 1.9699248120300752, "no_speech_prob": 0.002889233408495784}, {"id": 1881, "seek": 1375372, "start": 13768.279999999999, "end": 13772.359999999999, "text": " this matrix which is called a van der man matrix", "tokens": [51092, 341, 8141, 597, 307, 1219, 257, 3161, 1163, 587, 8141, 51296], "temperature": 0.0, "avg_logprob": -0.117944702735314, "compression_ratio": 1.9699248120300752, "no_speech_prob": 0.002889233408495784}, {"id": 1882, "seek": 1375372, "start": 13777.96, "end": 13780.84, "text": " if this determinant is non-zero", "tokens": [51576, 498, 341, 41296, 307, 2107, 12, 32226, 51720], "temperature": 0.0, "avg_logprob": -0.117944702735314, "compression_ratio": 1.9699248120300752, "no_speech_prob": 0.002889233408495784}, {"id": 1883, "seek": 1378372, "start": 13784.679999999998, "end": 13791.4, "text": " so what we're going to do is it's going to be a little bit of a brute force method", "tokens": [50412, 370, 437, 321, 434, 516, 281, 360, 307, 309, 311, 516, 281, 312, 257, 707, 857, 295, 257, 47909, 3464, 3170, 50748], "temperature": 0.0, "avg_logprob": -0.07509094552148747, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.00013134596520103514}, {"id": 1884, "seek": 1378372, "start": 13791.4, "end": 13797.32, "text": " but we will find one way to compute the determinant of this matrix and therefore", "tokens": [50748, 457, 321, 486, 915, 472, 636, 281, 14722, 264, 41296, 295, 341, 8141, 293, 4412, 51044], "temperature": 0.0, "avg_logprob": -0.07509094552148747, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.00013134596520103514}, {"id": 1885, "seek": 1378372, "start": 13797.96, "end": 13802.199999999999, "text": " show whether or not it's zero and see if we can answer our problem", "tokens": [51076, 855, 1968, 420, 406, 309, 311, 4018, 293, 536, 498, 321, 393, 1867, 527, 1154, 51288], "temperature": 0.0, "avg_logprob": -0.07509094552148747, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.00013134596520103514}, {"id": 1886, "seek": 1378372, "start": 13804.359999999999, "end": 13809.0, "text": " whenever we have a problem with arbitrary n it's a little bit difficult to see what the", "tokens": [51396, 5699, 321, 362, 257, 1154, 365, 23211, 297, 309, 311, 257, 707, 857, 2252, 281, 536, 437, 264, 51628], "temperature": 0.0, "avg_logprob": -0.07509094552148747, "compression_ratio": 1.7005347593582887, "no_speech_prob": 0.00013134596520103514}, {"id": 1887, "seek": 1380900, "start": 13809.08, "end": 13814.6, "text": " pattern is without doing an example so i think it's good to try out a simple example", "tokens": [50368, 5102, 307, 1553, 884, 364, 1365, 370, 741, 519, 309, 311, 665, 281, 853, 484, 257, 2199, 1365, 50644], "temperature": 0.0, "avg_logprob": -0.07555166218015882, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.0006666809204034507}, {"id": 1888, "seek": 1380900, "start": 13815.32, "end": 13823.24, "text": " or at least somewhat simpler by computing the determinant of the same matrix but where n equals", "tokens": [50680, 420, 412, 1935, 8344, 18587, 538, 15866, 264, 41296, 295, 264, 912, 8141, 457, 689, 297, 6915, 51076], "temperature": 0.0, "avg_logprob": -0.07555166218015882, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.0006666809204034507}, {"id": 1889, "seek": 1380900, "start": 13824.44, "end": 13827.96, "text": " let's say three so we have a three by three", "tokens": [51136, 718, 311, 584, 1045, 370, 321, 362, 257, 1045, 538, 1045, 51312], "temperature": 0.0, "avg_logprob": -0.07555166218015882, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.0006666809204034507}, {"id": 1890, "seek": 1380900, "start": 13831.48, "end": 13836.92, "text": " and we want to compute this determinant and we want to compute it in such a way", "tokens": [51488, 293, 321, 528, 281, 14722, 341, 41296, 293, 321, 528, 281, 14722, 309, 294, 1270, 257, 636, 51760], "temperature": 0.0, "avg_logprob": -0.07555166218015882, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.0006666809204034507}, {"id": 1891, "seek": 1383900, "start": 13839.16, "end": 13842.44, "text": " so that we can use some of the ideas for computing this determinant", "tokens": [50372, 370, 300, 321, 393, 764, 512, 295, 264, 3487, 337, 15866, 341, 41296, 50536], "temperature": 0.0, "avg_logprob": -0.05835417338779995, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00020341225899755955}, {"id": 1892, "seek": 1383900, "start": 13842.44, "end": 13849.96, "text": " and abstract it to that more general case now this isn't the most simplest way to do such a thing", "tokens": [50536, 293, 12649, 309, 281, 300, 544, 2674, 1389, 586, 341, 1943, 380, 264, 881, 22811, 636, 281, 360, 1270, 257, 551, 50912], "temperature": 0.0, "avg_logprob": -0.05835417338779995, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00020341225899755955}, {"id": 1893, "seek": 1383900, "start": 13849.96, "end": 13855.48, "text": " but it's one way and i'm sure there are many many other ways to compute this determinant", "tokens": [50912, 457, 309, 311, 472, 636, 293, 741, 478, 988, 456, 366, 867, 867, 661, 2098, 281, 14722, 341, 41296, 51188], "temperature": 0.0, "avg_logprob": -0.05835417338779995, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00020341225899755955}, {"id": 1894, "seek": 1383900, "start": 13856.2, "end": 13860.28, "text": " some of which may be certainly more clever than the approach that we'll take", "tokens": [51224, 512, 295, 597, 815, 312, 3297, 544, 13494, 813, 264, 3109, 300, 321, 603, 747, 51428], "temperature": 0.0, "avg_logprob": -0.05835417338779995, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00020341225899755955}, {"id": 1895, "seek": 1383900, "start": 13861.72, "end": 13864.76, "text": " so we're going to do this by essentially row reduction", "tokens": [51500, 370, 321, 434, 516, 281, 360, 341, 538, 4476, 5386, 11004, 51652], "temperature": 0.0, "avg_logprob": -0.05835417338779995, "compression_ratio": 1.7545454545454546, "no_speech_prob": 0.00020341225899755955}, {"id": 1896, "seek": 1386476, "start": 13864.76, "end": 13871.48, "text": " and for the first step we're going to get rid of the ones underneath the top left one", "tokens": [50364, 293, 337, 264, 700, 1823, 321, 434, 516, 281, 483, 3973, 295, 264, 2306, 7223, 264, 1192, 1411, 472, 50700], "temperature": 0.0, "avg_logprob": -0.10623476798074287, "compression_ratio": 1.5886524822695036, "no_speech_prob": 0.003172289812937379}, {"id": 1897, "seek": 1386476, "start": 13871.48, "end": 13875.72, "text": " and by just subtracting the first row from those", "tokens": [50700, 293, 538, 445, 16390, 278, 264, 700, 5386, 490, 729, 50912], "temperature": 0.0, "avg_logprob": -0.10623476798074287, "compression_ratio": 1.5886524822695036, "no_speech_prob": 0.003172289812937379}, {"id": 1898, "seek": 1386476, "start": 13877.32, "end": 13886.2, "text": " so if we do that that doesn't change the determinant and we get the top row is left alone", "tokens": [50992, 370, 498, 321, 360, 300, 300, 1177, 380, 1319, 264, 41296, 293, 321, 483, 264, 1192, 5386, 307, 1411, 3312, 51436], "temperature": 0.0, "avg_logprob": -0.10623476798074287, "compression_ratio": 1.5886524822695036, "no_speech_prob": 0.003172289812937379}, {"id": 1899, "seek": 1388620, "start": 13887.08, "end": 13895.0, "text": " and then the rows below it look like zero zero lambda two minus one", "tokens": [50408, 293, 550, 264, 13241, 2507, 309, 574, 411, 4018, 4018, 13607, 732, 3175, 472, 50804], "temperature": 0.0, "avg_logprob": -0.16647368928660516, "compression_ratio": 1.927927927927928, "no_speech_prob": 0.025954773649573326}, {"id": 1900, "seek": 1388620, "start": 13896.36, "end": 13907.08, "text": " lambda three minus one and this becomes lambda three cubed minus lambda one cubed uh sorry squared", "tokens": [50872, 13607, 1045, 3175, 472, 293, 341, 3643, 13607, 1045, 36510, 3175, 13607, 472, 36510, 2232, 2597, 8889, 51408], "temperature": 0.0, "avg_logprob": -0.16647368928660516, "compression_ratio": 1.927927927927928, "no_speech_prob": 0.025954773649573326}, {"id": 1901, "seek": 1388620, "start": 13909.320000000002, "end": 13912.52, "text": " and lambda two squared minus lambda one squared", "tokens": [51520, 293, 13607, 732, 8889, 3175, 13607, 472, 8889, 51680], "temperature": 0.0, "avg_logprob": -0.16647368928660516, "compression_ratio": 1.927927927927928, "no_speech_prob": 0.025954773649573326}, {"id": 1902, "seek": 1391620, "start": 13916.52, "end": 13924.12, "text": " now when we uh lambda two minus lambda one is actually a common factor in this second row", "tokens": [50380, 586, 562, 321, 2232, 13607, 732, 3175, 13607, 472, 307, 767, 257, 2689, 5952, 294, 341, 1150, 5386, 50760], "temperature": 0.0, "avg_logprob": -0.050292795354669746, "compression_ratio": 2.0843373493975905, "no_speech_prob": 0.00033532848465256393}, {"id": 1903, "seek": 1391620, "start": 13924.12, "end": 13927.720000000001, "text": " because this becomes lambda two plus lambda one when we pull that out", "tokens": [50760, 570, 341, 3643, 13607, 732, 1804, 13607, 472, 562, 321, 2235, 300, 484, 50940], "temperature": 0.0, "avg_logprob": -0.050292795354669746, "compression_ratio": 2.0843373493975905, "no_speech_prob": 0.00033532848465256393}, {"id": 1904, "seek": 1391620, "start": 13927.720000000001, "end": 13935.320000000002, "text": " and this is lambda three plus lambda one so when we distribute out we get lambda two minus lambda one", "tokens": [50940, 293, 341, 307, 13607, 1045, 1804, 13607, 472, 370, 562, 321, 20594, 484, 321, 483, 13607, 732, 3175, 13607, 472, 51320], "temperature": 0.0, "avg_logprob": -0.050292795354669746, "compression_ratio": 2.0843373493975905, "no_speech_prob": 0.00033532848465256393}, {"id": 1905, "seek": 1391620, "start": 13936.92, "end": 13944.28, "text": " lambda three minus lambda one times the determinant of what's left over which is one", "tokens": [51400, 13607, 1045, 3175, 13607, 472, 1413, 264, 41296, 295, 437, 311, 1411, 670, 597, 307, 472, 51768], "temperature": 0.0, "avg_logprob": -0.050292795354669746, "compression_ratio": 2.0843373493975905, "no_speech_prob": 0.00033532848465256393}, {"id": 1906, "seek": 1394428, "start": 13944.28, "end": 13945.800000000001, "text": " lambda one lambda one squared", "tokens": [50364, 13607, 472, 13607, 472, 8889, 50440], "temperature": 0.0, "avg_logprob": -0.06953953612934459, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.0001195966251543723}, {"id": 1907, "seek": 1394428, "start": 13949.480000000001, "end": 13954.92, "text": " zero one zero one lambda", "tokens": [50624, 4018, 472, 4018, 472, 13607, 50896], "temperature": 0.0, "avg_logprob": -0.06953953612934459, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.0001195966251543723}, {"id": 1908, "seek": 1394428, "start": 13958.28, "end": 13962.84, "text": " one plus lambda two lambda one plus lambda three", "tokens": [51064, 472, 1804, 13607, 732, 13607, 472, 1804, 13607, 1045, 51292], "temperature": 0.0, "avg_logprob": -0.06953953612934459, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.0001195966251543723}, {"id": 1909, "seek": 1394428, "start": 13965.960000000001, "end": 13971.0, "text": " and this happened because the determinant remember when you take the determinant and you multiply", "tokens": [51448, 293, 341, 2011, 570, 264, 41296, 1604, 562, 291, 747, 264, 41296, 293, 291, 12972, 51700], "temperature": 0.0, "avg_logprob": -0.06953953612934459, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.0001195966251543723}, {"id": 1910, "seek": 1397100, "start": 13971.0, "end": 13976.52, "text": " any row or any column by a number you can distribute out that one number for that one", "tokens": [50364, 604, 5386, 420, 604, 7738, 538, 257, 1230, 291, 393, 20594, 484, 300, 472, 1230, 337, 300, 472, 50640], "temperature": 0.0, "avg_logprob": -0.04055886221404123, "compression_ratio": 2.042056074766355, "no_speech_prob": 0.0005357548361644149}, {"id": 1911, "seek": 1397100, "start": 13976.52, "end": 13981.0, "text": " column in this determinant you can think of the volume if you scale one side of the room", "tokens": [50640, 7738, 294, 341, 41296, 291, 393, 519, 295, 264, 5523, 498, 291, 4373, 472, 1252, 295, 264, 1808, 50864], "temperature": 0.0, "avg_logprob": -0.04055886221404123, "compression_ratio": 2.042056074766355, "no_speech_prob": 0.0005357548361644149}, {"id": 1912, "seek": 1397100, "start": 13981.0, "end": 13985.88, "text": " by a factor and another side of the room by a different factor then the determinant is computing", "tokens": [50864, 538, 257, 5952, 293, 1071, 1252, 295, 264, 1808, 538, 257, 819, 5952, 550, 264, 41296, 307, 15866, 51108], "temperature": 0.0, "avg_logprob": -0.04055886221404123, "compression_ratio": 2.042056074766355, "no_speech_prob": 0.0005357548361644149}, {"id": 1913, "seek": 1397100, "start": 13985.88, "end": 13992.52, "text": " the area and you scale by both of those but for each side you only distribute one of them", "tokens": [51108, 264, 1859, 293, 291, 4373, 538, 1293, 295, 729, 457, 337, 1184, 1252, 291, 787, 20594, 472, 295, 552, 51440], "temperature": 0.0, "avg_logprob": -0.04055886221404123, "compression_ratio": 2.042056074766355, "no_speech_prob": 0.0005357548361644149}, {"id": 1914, "seek": 1397100, "start": 13995.72, "end": 13999.72, "text": " so now we're looking at this and we want to compute the determinant of this", "tokens": [51600, 370, 586, 321, 434, 1237, 412, 341, 293, 321, 528, 281, 14722, 264, 41296, 295, 341, 51800], "temperature": 0.0, "avg_logprob": -0.04055886221404123, "compression_ratio": 2.042056074766355, "no_speech_prob": 0.0005357548361644149}, {"id": 1915, "seek": 1399972, "start": 13999.72, "end": 14004.599999999999, "text": " now of course what's left over is a two by two so it's very easy to compute the determinant", "tokens": [50364, 586, 295, 1164, 437, 311, 1411, 670, 307, 257, 732, 538, 732, 370, 309, 311, 588, 1858, 281, 14722, 264, 41296, 50608], "temperature": 0.0, "avg_logprob": -0.04585934985767711, "compression_ratio": 1.9367088607594938, "no_speech_prob": 0.000882943975739181}, {"id": 1916, "seek": 1399972, "start": 14004.599999999999, "end": 14009.4, "text": " but if we wanted to have an inductive proof if we did a similar calculation here for a larger", "tokens": [50608, 457, 498, 321, 1415, 281, 362, 364, 31612, 488, 8177, 498, 321, 630, 257, 2531, 17108, 510, 337, 257, 4833, 50848], "temperature": 0.0, "avg_logprob": -0.04585934985767711, "compression_ratio": 1.9367088607594938, "no_speech_prob": 0.000882943975739181}, {"id": 1917, "seek": 1399972, "start": 14009.4, "end": 14015.56, "text": " matrix what we would have is lambda one through lambda one to the n minus first power up here", "tokens": [50848, 8141, 437, 321, 576, 362, 307, 13607, 472, 807, 13607, 472, 281, 264, 297, 3175, 700, 1347, 493, 510, 51156], "temperature": 0.0, "avg_logprob": -0.04585934985767711, "compression_ratio": 1.9367088607594938, "no_speech_prob": 0.000882943975739181}, {"id": 1918, "seek": 1399972, "start": 14015.56, "end": 14019.72, "text": " and we have a much larger matrix which isn't very easy to compute the determinant of", "tokens": [51156, 293, 321, 362, 257, 709, 4833, 8141, 597, 1943, 380, 588, 1858, 281, 14722, 264, 41296, 295, 51364], "temperature": 0.0, "avg_logprob": -0.04585934985767711, "compression_ratio": 1.9367088607594938, "no_speech_prob": 0.000882943975739181}, {"id": 1919, "seek": 1399972, "start": 14019.72, "end": 14026.519999999999, "text": " by some explicit formula it's sort of complicated to write so what we want to do is we want to", "tokens": [51364, 538, 512, 13691, 8513, 309, 311, 1333, 295, 6179, 281, 2464, 370, 437, 321, 528, 281, 360, 307, 321, 528, 281, 51704], "temperature": 0.0, "avg_logprob": -0.04585934985767711, "compression_ratio": 1.9367088607594938, "no_speech_prob": 0.000882943975739181}, {"id": 1920, "seek": 1402652, "start": 14026.52, "end": 14033.08, "text": " think of how to compute this maybe more conceptually and what we can do is notice that lambda one", "tokens": [50364, 519, 295, 577, 281, 14722, 341, 1310, 544, 3410, 671, 293, 437, 321, 393, 360, 307, 3449, 300, 13607, 472, 50692], "temperature": 0.0, "avg_logprob": -0.033100203181920425, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.005554032977670431}, {"id": 1921, "seek": 1402652, "start": 14033.08, "end": 14040.36, "text": " appears here in each of these two terms and if we multiply the second column by lambda one", "tokens": [50692, 7038, 510, 294, 1184, 295, 613, 732, 2115, 293, 498, 321, 12972, 264, 1150, 7738, 538, 13607, 472, 51056], "temperature": 0.0, "avg_logprob": -0.033100203181920425, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.005554032977670431}, {"id": 1922, "seek": 1402652, "start": 14041.32, "end": 14048.36, "text": " and subtract what happens is this cancels the lambda one cancels the lambda one cancels and", "tokens": [51104, 293, 16390, 437, 2314, 307, 341, 393, 66, 1625, 264, 13607, 472, 393, 66, 1625, 264, 13607, 472, 393, 66, 1625, 293, 51456], "temperature": 0.0, "avg_logprob": -0.033100203181920425, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.005554032977670431}, {"id": 1923, "seek": 1402652, "start": 14048.36, "end": 14054.12, "text": " you're only left with lambda two and lambda three and you also don't change the determinant because", "tokens": [51456, 291, 434, 787, 1411, 365, 13607, 732, 293, 13607, 1045, 293, 291, 611, 500, 380, 1319, 264, 41296, 570, 51744], "temperature": 0.0, "avg_logprob": -0.033100203181920425, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.005554032977670431}, {"id": 1924, "seek": 1405412, "start": 14054.12, "end": 14060.04, "text": " you're taking one column and adding it to another so this is also equal to", "tokens": [50364, 291, 434, 1940, 472, 7738, 293, 5127, 309, 281, 1071, 370, 341, 307, 611, 2681, 281, 50660], "temperature": 0.0, "avg_logprob": -0.05994340225502297, "compression_ratio": 1.60431654676259, "no_speech_prob": 0.000519290566444397}, {"id": 1925, "seek": 1405412, "start": 14065.08, "end": 14067.960000000001, "text": " the determinant of what's left over after you do that subtraction", "tokens": [50912, 264, 41296, 295, 437, 311, 1411, 670, 934, 291, 360, 300, 16390, 313, 51056], "temperature": 0.0, "avg_logprob": -0.05994340225502297, "compression_ratio": 1.60431654676259, "no_speech_prob": 0.000519290566444397}, {"id": 1926, "seek": 1405412, "start": 14072.28, "end": 14078.52, "text": " this is zero zero one zero one and then just lambda two and lambda three left over", "tokens": [51272, 341, 307, 4018, 4018, 472, 4018, 472, 293, 550, 445, 13607, 732, 293, 13607, 1045, 1411, 670, 51584], "temperature": 0.0, "avg_logprob": -0.05994340225502297, "compression_ratio": 1.60431654676259, "no_speech_prob": 0.000519290566444397}, {"id": 1927, "seek": 1407852, "start": 14079.24, "end": 14084.92, "text": " well you can even do something even a little bit more simpler now now you have a one here", "tokens": [50400, 731, 291, 393, 754, 360, 746, 754, 257, 707, 857, 544, 18587, 586, 586, 291, 362, 257, 472, 510, 50684], "temperature": 0.0, "avg_logprob": -0.09929591417312622, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.003945177420973778}, {"id": 1928, "seek": 1407852, "start": 14084.92, "end": 14089.32, "text": " you can multiply this by lambda one to get rid of that so i'm not even going to write that whole", "tokens": [50684, 291, 393, 12972, 341, 538, 13607, 472, 281, 483, 3973, 295, 300, 370, 741, 478, 406, 754, 516, 281, 2464, 300, 1379, 50904], "temperature": 0.0, "avg_logprob": -0.09929591417312622, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.003945177420973778}, {"id": 1929, "seek": 1407852, "start": 14089.32, "end": 14101.880000000001, "text": " step out we can just erase this and put a zero here and now here's the amazing part what's left over", "tokens": [50904, 1823, 484, 321, 393, 445, 23525, 341, 293, 829, 257, 4018, 510, 293, 586, 510, 311, 264, 2243, 644, 437, 311, 1411, 670, 51532], "temperature": 0.0, "avg_logprob": -0.09929591417312622, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.003945177420973778}, {"id": 1930, "seek": 1410188, "start": 14102.439999999999, "end": 14111.32, "text": " after you perform these operations is another van der man matrix on the bottom right corner", "tokens": [50392, 934, 291, 2042, 613, 7705, 307, 1071, 3161, 1163, 587, 8141, 322, 264, 2767, 558, 4538, 50836], "temperature": 0.0, "avg_logprob": -0.12403164086518464, "compression_ratio": 1.6802721088435375, "no_speech_prob": 0.001597767579369247}, {"id": 1931, "seek": 1410188, "start": 14112.839999999998, "end": 14120.039999999999, "text": " and we can continue this process now because the determinant of this because this is a one", "tokens": [50912, 293, 321, 393, 2354, 341, 1399, 586, 570, 264, 41296, 295, 341, 570, 341, 307, 257, 472, 51272], "temperature": 0.0, "avg_logprob": -0.12403164086518464, "compression_ratio": 1.6802721088435375, "no_speech_prob": 0.001597767579369247}, {"id": 1932, "seek": 1410188, "start": 14120.039999999999, "end": 14126.439999999999, "text": " is equal to the determinant of this so we've reduced our problem", "tokens": [51272, 307, 2681, 281, 264, 41296, 295, 341, 370, 321, 600, 9212, 527, 1154, 51592], "temperature": 0.0, "avg_logprob": -0.12403164086518464, "compression_ratio": 1.6802721088435375, "no_speech_prob": 0.001597767579369247}, {"id": 1933, "seek": 1412644, "start": 14126.68, "end": 14137.880000000001, "text": " from an n by n matrix to an n minus one by n minus one matrix of the same form", "tokens": [50376, 490, 364, 297, 538, 297, 8141, 281, 364, 297, 3175, 472, 538, 297, 3175, 472, 8141, 295, 264, 912, 1254, 50936], "temperature": 0.0, "avg_logprob": -0.050543175187221796, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.004468057304620743}, {"id": 1934, "seek": 1412644, "start": 14139.880000000001, "end": 14145.16, "text": " and if we keep going down further up until maybe this step or even further than that", "tokens": [51036, 293, 498, 321, 1066, 516, 760, 3052, 493, 1826, 1310, 341, 1823, 420, 754, 3052, 813, 300, 51300], "temperature": 0.0, "avg_logprob": -0.050543175187221796, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.004468057304620743}, {"id": 1935, "seek": 1412644, "start": 14145.800000000001, "end": 14151.480000000001, "text": " then we would find out what the determinant of this matrix is so if we did that procedure again", "tokens": [51332, 550, 321, 576, 915, 484, 437, 264, 41296, 295, 341, 8141, 307, 370, 498, 321, 630, 300, 10747, 797, 51616], "temperature": 0.0, "avg_logprob": -0.050543175187221796, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.004468057304620743}, {"id": 1936, "seek": 1412644, "start": 14151.480000000001, "end": 14155.24, "text": " of course you can compute the determinant of a two by two no problem but if you did that procedure", "tokens": [51616, 295, 1164, 291, 393, 14722, 264, 41296, 295, 257, 732, 538, 732, 572, 1154, 457, 498, 291, 630, 300, 10747, 51804], "temperature": 0.0, "avg_logprob": -0.050543175187221796, "compression_ratio": 1.8842105263157896, "no_speech_prob": 0.004468057304620743}, {"id": 1937, "seek": 1415524, "start": 14155.24, "end": 14162.6, "text": " again subtract you get a zero here move that over you end up getting lambda two minus lambda three", "tokens": [50364, 797, 16390, 291, 483, 257, 4018, 510, 1286, 300, 670, 291, 917, 493, 1242, 13607, 732, 3175, 13607, 1045, 50732], "temperature": 0.0, "avg_logprob": -0.058738476889474055, "compression_ratio": 1.8544303797468353, "no_speech_prob": 0.005219517275691032}, {"id": 1938, "seek": 1415524, "start": 14162.6, "end": 14170.68, "text": " it's already of that it already breaks up like that pretty easily and you get lambda two minus", "tokens": [50732, 309, 311, 1217, 295, 300, 309, 1217, 9857, 493, 411, 300, 1238, 3612, 293, 291, 483, 13607, 732, 3175, 51136], "temperature": 0.0, "avg_logprob": -0.058738476889474055, "compression_ratio": 1.8544303797468353, "no_speech_prob": 0.005219517275691032}, {"id": 1939, "seek": 1415524, "start": 14170.68, "end": 14179.08, "text": " lambda three that pops out so you end up getting is the product of i and j let's say i is less than", "tokens": [51136, 13607, 1045, 300, 16795, 484, 370, 291, 917, 493, 1242, 307, 264, 1674, 295, 741, 293, 361, 718, 311, 584, 741, 307, 1570, 813, 51556], "temperature": 0.0, "avg_logprob": -0.058738476889474055, "compression_ratio": 1.8544303797468353, "no_speech_prob": 0.005219517275691032}, {"id": 1940, "seek": 1417908, "start": 14179.08, "end": 14187.08, "text": " j and j is less than or equal to three and i is greater than or equal to one of lambda j minus", "tokens": [50364, 361, 293, 361, 307, 1570, 813, 420, 2681, 281, 1045, 293, 741, 307, 5044, 813, 420, 2681, 281, 472, 295, 13607, 361, 3175, 50764], "temperature": 0.0, "avg_logprob": -0.07324523356423449, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.010012517683207989}, {"id": 1941, "seek": 1417908, "start": 14187.08, "end": 14194.76, "text": " lambda i so you actually get the product of the differences of all of these different eigenvalues", "tokens": [50764, 13607, 741, 370, 291, 767, 483, 264, 1674, 295, 264, 7300, 295, 439, 295, 613, 819, 10446, 46033, 51148], "temperature": 0.0, "avg_logprob": -0.07324523356423449, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.010012517683207989}, {"id": 1942, "seek": 1417908, "start": 14196.36, "end": 14202.52, "text": " and because we're assuming that the eigenvalues are distinct all of these numbers are not zero", "tokens": [51228, 293, 570, 321, 434, 11926, 300, 264, 10446, 46033, 366, 10644, 439, 295, 613, 3547, 366, 406, 4018, 51536], "temperature": 0.0, "avg_logprob": -0.07324523356423449, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.010012517683207989}, {"id": 1943, "seek": 1420252, "start": 14203.16, "end": 14208.44, "text": " therefore this is not equal to zero and so we automatically know that the determinant of this", "tokens": [50396, 4412, 341, 307, 406, 2681, 281, 4018, 293, 370, 321, 6772, 458, 300, 264, 41296, 295, 341, 50660], "temperature": 0.0, "avg_logprob": -0.10687254724048433, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.019120914861559868}, {"id": 1944, "seek": 1420252, "start": 14208.44, "end": 14219.08, "text": " matrix is non-zero so we can make a guess that the determinant of that more general matrix", "tokens": [50660, 8141, 307, 2107, 12, 32226, 370, 321, 393, 652, 257, 2041, 300, 264, 41296, 295, 300, 544, 2674, 8141, 51192], "temperature": 0.0, "avg_logprob": -0.10687254724048433, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.019120914861559868}, {"id": 1945, "seek": 1421908, "start": 14219.8, "end": 14223.64, "text": " of that more general van der man matrix", "tokens": [50400, 295, 300, 544, 2674, 3161, 1163, 587, 8141, 50592], "temperature": 0.0, "avg_logprob": -0.3102597089914175, "compression_ratio": 1.2588235294117647, "no_speech_prob": 0.03788023069500923}, {"id": 1946, "seek": 1421908, "start": 14234.28, "end": 14239.64, "text": " is exactly the product of the differences of all of the eigenvalues", "tokens": [51124, 307, 2293, 264, 1674, 295, 264, 7300, 295, 439, 295, 264, 10446, 46033, 51392], "temperature": 0.0, "avg_logprob": -0.3102597089914175, "compression_ratio": 1.2588235294117647, "no_speech_prob": 0.03788023069500923}, {"id": 1947, "seek": 1424908, "start": 14249.8, "end": 14256.12, "text": " and therefore is not zero if they're distinct", "tokens": [50400, 293, 4412, 307, 406, 4018, 498, 436, 434, 10644, 50716], "temperature": 0.0, "avg_logprob": -0.08396465395703728, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0010004558134824038}, {"id": 1948, "seek": 1424908, "start": 14259.8, "end": 14263.16, "text": " and we can prove this by induction we already know what happens when n equals one", "tokens": [50900, 293, 321, 393, 7081, 341, 538, 33371, 321, 1217, 458, 437, 2314, 562, 297, 6915, 472, 51068], "temperature": 0.0, "avg_logprob": -0.08396465395703728, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0010004558134824038}, {"id": 1949, "seek": 1424908, "start": 14263.96, "end": 14270.84, "text": " or when n equals two and not even n equals three and so what we can do is if we assume that this", "tokens": [51108, 420, 562, 297, 6915, 732, 293, 406, 754, 297, 6915, 1045, 293, 370, 437, 321, 393, 360, 307, 498, 321, 6552, 300, 341, 51452], "temperature": 0.0, "avg_logprob": -0.08396465395703728, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0010004558134824038}, {"id": 1950, "seek": 1424908, "start": 14270.84, "end": 14278.6, "text": " formula is true for n and go to n plus one then what we want to do is reduce that problem to this", "tokens": [51452, 8513, 307, 2074, 337, 297, 293, 352, 281, 297, 1804, 472, 550, 437, 321, 528, 281, 360, 307, 5407, 300, 1154, 281, 341, 51840], "temperature": 0.0, "avg_logprob": -0.08396465395703728, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.0010004558134824038}, {"id": 1951, "seek": 1427860, "start": 14278.6, "end": 14285.4, "text": " one and show that those numbers factor out and then we can apply our induction hypothesis", "tokens": [50364, 472, 293, 855, 300, 729, 3547, 5952, 484, 293, 550, 321, 393, 3079, 527, 33371, 17291, 50704], "temperature": 0.0, "avg_logprob": -0.06238048606448703, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004305298498366028}, {"id": 1952, "seek": 1427860, "start": 14285.960000000001, "end": 14288.6, "text": " and prove that this formula holds more generally", "tokens": [50732, 293, 7081, 300, 341, 8513, 9190, 544, 5101, 50864], "temperature": 0.0, "avg_logprob": -0.06238048606448703, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004305298498366028}, {"id": 1953, "seek": 1427860, "start": 14292.04, "end": 14295.640000000001, "text": " and the way we do that is very similar to this so i'll put a question mark here", "tokens": [51036, 293, 264, 636, 321, 360, 300, 307, 588, 2531, 281, 341, 370, 741, 603, 829, 257, 1168, 1491, 510, 51216], "temperature": 0.0, "avg_logprob": -0.06238048606448703, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004305298498366028}, {"id": 1954, "seek": 1427860, "start": 14296.28, "end": 14303.08, "text": " and i'll write what this equals by doing this first step which was here sorry this first step", "tokens": [51248, 293, 741, 603, 2464, 437, 341, 6915, 538, 884, 341, 700, 1823, 597, 390, 510, 2597, 341, 700, 1823, 51588], "temperature": 0.0, "avg_logprob": -0.06238048606448703, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004305298498366028}, {"id": 1955, "seek": 1430308, "start": 14303.08, "end": 14309.16, "text": " in subtracting the first row from all of the rows below it what we end up getting is", "tokens": [50364, 294, 16390, 278, 264, 700, 5386, 490, 439, 295, 264, 13241, 2507, 309, 437, 321, 917, 493, 1242, 307, 50668], "temperature": 0.0, "avg_logprob": -0.07642629478551165, "compression_ratio": 1.7873563218390804, "no_speech_prob": 0.02716348133981228}, {"id": 1956, "seek": 1430308, "start": 14310.36, "end": 14315.56, "text": " the determinant of and here we have a bunch of zeros below the ones so we have one", "tokens": [50728, 264, 41296, 295, 293, 510, 321, 362, 257, 3840, 295, 35193, 2507, 264, 2306, 370, 321, 362, 472, 50988], "temperature": 0.0, "avg_logprob": -0.07642629478551165, "compression_ratio": 1.7873563218390804, "no_speech_prob": 0.02716348133981228}, {"id": 1957, "seek": 1430308, "start": 14316.76, "end": 14323.56, "text": " and i'll write two rows just so we see more of the pattern uh this is a zero sorry zero", "tokens": [51048, 293, 741, 603, 2464, 732, 13241, 445, 370, 321, 536, 544, 295, 264, 5102, 2232, 341, 307, 257, 4018, 2597, 4018, 51388], "temperature": 0.0, "avg_logprob": -0.07642629478551165, "compression_ratio": 1.7873563218390804, "no_speech_prob": 0.02716348133981228}, {"id": 1958, "seek": 1430308, "start": 14325.16, "end": 14329.32, "text": " lambda one and then this is lambda two minus lambda one", "tokens": [51468, 13607, 472, 293, 550, 341, 307, 13607, 732, 3175, 13607, 472, 51676], "temperature": 0.0, "avg_logprob": -0.07642629478551165, "compression_ratio": 1.7873563218390804, "no_speech_prob": 0.02716348133981228}, {"id": 1959, "seek": 1432932, "start": 14330.039999999999, "end": 14335.0, "text": " and this is all the way down to lambda n minus lambda one", "tokens": [50400, 293, 341, 307, 439, 264, 636, 760, 281, 13607, 297, 3175, 13607, 472, 50648], "temperature": 0.0, "avg_logprob": -0.0907358576039799, "compression_ratio": 1.9596774193548387, "no_speech_prob": 0.0020828049164265394}, {"id": 1960, "seek": 1432932, "start": 14337.24, "end": 14343.88, "text": " all the way up to and let me write two additional terms here this is going to be lambda n minus two", "tokens": [50760, 439, 264, 636, 493, 281, 293, 718, 385, 2464, 732, 4497, 2115, 510, 341, 307, 516, 281, 312, 13607, 297, 3175, 732, 51092], "temperature": 0.0, "avg_logprob": -0.0907358576039799, "compression_ratio": 1.9596774193548387, "no_speech_prob": 0.0020828049164265394}, {"id": 1961, "seek": 1432932, "start": 14344.68, "end": 14356.68, "text": " lambda one n minus one now this is lambda two to the n minus tooth power minus lambda", "tokens": [51132, 13607, 472, 297, 3175, 472, 586, 341, 307, 13607, 732, 281, 264, 297, 3175, 11680, 1347, 3175, 13607, 51732], "temperature": 0.0, "avg_logprob": -0.0907358576039799, "compression_ratio": 1.9596774193548387, "no_speech_prob": 0.0020828049164265394}, {"id": 1962, "seek": 1435668, "start": 14357.64, "end": 14359.720000000001, "text": " one to the n minus tooth power", "tokens": [50412, 472, 281, 264, 297, 3175, 11680, 1347, 50516], "temperature": 0.0, "avg_logprob": -0.2151492742391733, "compression_ratio": 1.295774647887324, "no_speech_prob": 0.007344931364059448}, {"id": 1963, "seek": 1435668, "start": 14362.36, "end": 14374.04, "text": " and here we have lambda n minus one minus sorry two minus one", "tokens": [50648, 293, 510, 321, 362, 13607, 297, 3175, 472, 3175, 2597, 732, 3175, 472, 51232], "temperature": 0.0, "avg_logprob": -0.2151492742391733, "compression_ratio": 1.295774647887324, "no_speech_prob": 0.007344931364059448}, {"id": 1964, "seek": 1437404, "start": 14374.52, "end": 14377.400000000001, "text": " so", "tokens": [50388, 370, 50532], "temperature": 0.0, "avg_logprob": -0.29811263806892163, "compression_ratio": 1.2183908045977012, "no_speech_prob": 0.0038239171262830496}, {"id": 1965, "seek": 1437404, "start": 14386.04, "end": 14386.6, "text": " that's a one", "tokens": [50964, 300, 311, 257, 472, 50992], "temperature": 0.0, "avg_logprob": -0.29811263806892163, "compression_ratio": 1.2183908045977012, "no_speech_prob": 0.0038239171262830496}, {"id": 1966, "seek": 1437404, "start": 14389.720000000001, "end": 14390.04, "text": " okay", "tokens": [51148, 1392, 51164], "temperature": 0.0, "avg_logprob": -0.29811263806892163, "compression_ratio": 1.2183908045977012, "no_speech_prob": 0.0038239171262830496}, {"id": 1967, "seek": 1437404, "start": 14394.68, "end": 14399.960000000001, "text": " now at this point we can follow a similar procedure by pulling out a lambda two minus", "tokens": [51396, 586, 412, 341, 935, 321, 393, 1524, 257, 2531, 10747, 538, 8407, 484, 257, 13607, 732, 3175, 51660], "temperature": 0.0, "avg_logprob": -0.29811263806892163, "compression_ratio": 1.2183908045977012, "no_speech_prob": 0.0038239171262830496}, {"id": 1968, "seek": 1439996, "start": 14399.96, "end": 14406.199999999999, "text": " lambda one from each of the terms but then we would have to figure out what is lambda two to some", "tokens": [50364, 13607, 472, 490, 1184, 295, 264, 2115, 457, 550, 321, 576, 362, 281, 2573, 484, 437, 307, 13607, 732, 281, 512, 50676], "temperature": 0.0, "avg_logprob": -0.045332387641624165, "compression_ratio": 1.8937007874015748, "no_speech_prob": 0.0010321246227249503}, {"id": 1969, "seek": 1439996, "start": 14406.199999999999, "end": 14412.919999999998, "text": " power minus lambda one to that same power divided by lambda two minus lambda one we could do that", "tokens": [50676, 1347, 3175, 13607, 472, 281, 300, 912, 1347, 6666, 538, 13607, 732, 3175, 13607, 472, 321, 727, 360, 300, 51012], "temperature": 0.0, "avg_logprob": -0.045332387641624165, "compression_ratio": 1.8937007874015748, "no_speech_prob": 0.0010321246227249503}, {"id": 1970, "seek": 1439996, "start": 14412.919999999998, "end": 14419.24, "text": " and factor it out by using um polynomial division find out what the corresponding factors are but", "tokens": [51012, 293, 5952, 309, 484, 538, 1228, 1105, 26110, 10044, 915, 484, 437, 264, 11760, 6771, 366, 457, 51328], "temperature": 0.0, "avg_logprob": -0.045332387641624165, "compression_ratio": 1.8937007874015748, "no_speech_prob": 0.0010321246227249503}, {"id": 1971, "seek": 1439996, "start": 14419.24, "end": 14424.839999999998, "text": " maybe that's not the best way to do it another option although that method of course you know", "tokens": [51328, 1310, 300, 311, 406, 264, 1151, 636, 281, 360, 309, 1071, 3614, 4878, 300, 3170, 295, 1164, 291, 458, 51608], "temperature": 0.0, "avg_logprob": -0.045332387641624165, "compression_ratio": 1.8937007874015748, "no_speech_prob": 0.0010321246227249503}, {"id": 1972, "seek": 1439996, "start": 14424.839999999998, "end": 14429.0, "text": " teaches you a lot about how to do polynomial division in case you haven't seen it before it's", "tokens": [51608, 16876, 291, 257, 688, 466, 577, 281, 360, 26110, 10044, 294, 1389, 291, 2378, 380, 1612, 309, 949, 309, 311, 51816], "temperature": 0.0, "avg_logprob": -0.045332387641624165, "compression_ratio": 1.8937007874015748, "no_speech_prob": 0.0010321246227249503}, {"id": 1973, "seek": 1442900, "start": 14429.24, "end": 14435.48, "text": " quite nice but maybe there's another easier way similar to what we did over here and what we did", "tokens": [50376, 1596, 1481, 457, 1310, 456, 311, 1071, 3571, 636, 2531, 281, 437, 321, 630, 670, 510, 293, 437, 321, 630, 50688], "temperature": 0.0, "avg_logprob": -0.048889510933010055, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0011693814303725958}, {"id": 1974, "seek": 1442900, "start": 14435.48, "end": 14441.56, "text": " here was we took the second last column and we multiplied it by lambda one and we took the", "tokens": [50688, 510, 390, 321, 1890, 264, 1150, 1036, 7738, 293, 321, 17207, 309, 538, 13607, 472, 293, 321, 1890, 264, 50992], "temperature": 0.0, "avg_logprob": -0.048889510933010055, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0011693814303725958}, {"id": 1975, "seek": 1442900, "start": 14441.56, "end": 14446.36, "text": " difference here we could have also done that in this step it just might have been a little bit it", "tokens": [50992, 2649, 510, 321, 727, 362, 611, 1096, 300, 294, 341, 1823, 309, 445, 1062, 362, 668, 257, 707, 857, 309, 51232], "temperature": 0.0, "avg_logprob": -0.048889510933010055, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0011693814303725958}, {"id": 1976, "seek": 1442900, "start": 14446.36, "end": 14450.84, "text": " might have looked a little bit more complicated because of the higher powers but let's try to", "tokens": [51232, 1062, 362, 2956, 257, 707, 857, 544, 6179, 570, 295, 264, 2946, 8674, 457, 718, 311, 853, 281, 51456], "temperature": 0.0, "avg_logprob": -0.048889510933010055, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0011693814303725958}, {"id": 1977, "seek": 1445084, "start": 14450.84, "end": 14460.76, "text": " do that anyway if we multiply the second last column by lambda one from the last column", "tokens": [50364, 360, 300, 4033, 498, 321, 12972, 264, 1150, 1036, 7738, 538, 13607, 472, 490, 264, 1036, 7738, 50860], "temperature": 0.0, "avg_logprob": -0.06678813251096812, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.05833647772669792}, {"id": 1978, "seek": 1445084, "start": 14462.28, "end": 14467.48, "text": " the power here will be n minus one which will match this one and these two terms will cancel and", "tokens": [50936, 264, 1347, 510, 486, 312, 297, 3175, 472, 597, 486, 2995, 341, 472, 293, 613, 732, 2115, 486, 10373, 293, 51196], "temperature": 0.0, "avg_logprob": -0.06678813251096812, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.05833647772669792}, {"id": 1979, "seek": 1445084, "start": 14467.48, "end": 14474.12, "text": " you'll just get zero what happens to this term if you multiply this by lambda one so let's write this", "tokens": [51196, 291, 603, 445, 483, 4018, 437, 2314, 281, 341, 1433, 498, 291, 12972, 341, 538, 13607, 472, 370, 718, 311, 2464, 341, 51528], "temperature": 0.0, "avg_logprob": -0.06678813251096812, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.05833647772669792}, {"id": 1980, "seek": 1447412, "start": 14474.12, "end": 14481.640000000001, "text": " out so we have lambda two n minus one minus lambda one to the n minus one minus multiply this whole", "tokens": [50364, 484, 370, 321, 362, 13607, 732, 297, 3175, 472, 3175, 13607, 472, 281, 264, 297, 3175, 472, 3175, 12972, 341, 1379, 50740], "temperature": 0.0, "avg_logprob": -0.04279081611072316, "compression_ratio": 2.079136690647482, "no_speech_prob": 0.04083945229649544}, {"id": 1981, "seek": 1447412, "start": 14481.640000000001, "end": 14492.36, "text": " term by lambda one that becomes a plus lambda one to the n minus one and then what's left over is", "tokens": [50740, 1433, 538, 13607, 472, 300, 3643, 257, 1804, 13607, 472, 281, 264, 297, 3175, 472, 293, 550, 437, 311, 1411, 670, 307, 51276], "temperature": 0.0, "avg_logprob": -0.04279081611072316, "compression_ratio": 2.079136690647482, "no_speech_prob": 0.04083945229649544}, {"id": 1982, "seek": 1447412, "start": 14492.36, "end": 14499.720000000001, "text": " minus lambda one lambda two to the n minus two these two terms conveniently cancel and what", "tokens": [51276, 3175, 13607, 472, 13607, 732, 281, 264, 297, 3175, 732, 613, 732, 2115, 44375, 10373, 293, 437, 51644], "temperature": 0.0, "avg_logprob": -0.04279081611072316, "compression_ratio": 2.079136690647482, "no_speech_prob": 0.04083945229649544}, {"id": 1983, "seek": 1449972, "start": 14499.72, "end": 14511.48, "text": " you're left over with is lambda two appears the highest common factor is lambda two to the n minus", "tokens": [50364, 291, 434, 1411, 670, 365, 307, 13607, 732, 7038, 264, 6343, 2689, 5952, 307, 13607, 732, 281, 264, 297, 3175, 50952], "temperature": 0.0, "avg_logprob": -0.031877203264098236, "compression_ratio": 1.872611464968153, "no_speech_prob": 0.0018100554589182138}, {"id": 1984, "seek": 1449972, "start": 14511.48, "end": 14519.48, "text": " two so we can pull that out and what's left over after we pull that out is lambda two minus lambda", "tokens": [50952, 732, 370, 321, 393, 2235, 300, 484, 293, 437, 311, 1411, 670, 934, 321, 2235, 300, 484, 307, 13607, 732, 3175, 13607, 51352], "temperature": 0.0, "avg_logprob": -0.031877203264098236, "compression_ratio": 1.872611464968153, "no_speech_prob": 0.0018100554589182138}, {"id": 1985, "seek": 1449972, "start": 14519.48, "end": 14528.119999999999, "text": " one and therefore we can much more easily see that this factors out after we do this subtraction", "tokens": [51352, 472, 293, 4412, 321, 393, 709, 544, 3612, 536, 300, 341, 6771, 484, 934, 321, 360, 341, 16390, 313, 51784], "temperature": 0.0, "avg_logprob": -0.031877203264098236, "compression_ratio": 1.872611464968153, "no_speech_prob": 0.0018100554589182138}, {"id": 1986, "seek": 1452812, "start": 14528.92, "end": 14534.84, "text": " now we've done imagine we've done that for the last column here now we have this second last", "tokens": [50404, 586, 321, 600, 1096, 3811, 321, 600, 1096, 300, 337, 264, 1036, 7738, 510, 586, 321, 362, 341, 1150, 1036, 50700], "temperature": 0.0, "avg_logprob": -0.05895762289724042, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.002251626458019018}, {"id": 1987, "seek": 1452812, "start": 14534.84, "end": 14539.240000000002, "text": " column which still has all of these complicated terms but what does this term before it look like", "tokens": [50700, 7738, 597, 920, 575, 439, 295, 613, 6179, 2115, 457, 437, 775, 341, 1433, 949, 309, 574, 411, 50920], "temperature": 0.0, "avg_logprob": -0.05895762289724042, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.002251626458019018}, {"id": 1988, "seek": 1452812, "start": 14541.320000000002, "end": 14550.28, "text": " lambda one to the n minus three and then it's lambda two to the n minus three minus lambda one", "tokens": [51024, 13607, 472, 281, 264, 297, 3175, 1045, 293, 550, 309, 311, 13607, 732, 281, 264, 297, 3175, 1045, 3175, 13607, 472, 51472], "temperature": 0.0, "avg_logprob": -0.05895762289724042, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.002251626458019018}, {"id": 1989, "seek": 1452812, "start": 14550.28, "end": 14557.560000000001, "text": " to the n minus three so you can just see it's of the form n minus j and if we multiply this by", "tokens": [51472, 281, 264, 297, 3175, 1045, 370, 291, 393, 445, 536, 309, 311, 295, 264, 1254, 297, 3175, 361, 293, 498, 321, 12972, 341, 538, 51836], "temperature": 0.0, "avg_logprob": -0.05895762289724042, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.002251626458019018}, {"id": 1990, "seek": 1455756, "start": 14557.56, "end": 14563.96, "text": " lambda one and subtract it well these two terms will cancel and a similar thing will happen here", "tokens": [50364, 13607, 472, 293, 16390, 309, 731, 613, 732, 2115, 486, 10373, 293, 257, 2531, 551, 486, 1051, 510, 50684], "temperature": 0.0, "avg_logprob": -0.040793356688126274, "compression_ratio": 1.755952380952381, "no_speech_prob": 0.0008558004046790302}, {"id": 1991, "seek": 1455756, "start": 14563.96, "end": 14569.96, "text": " it's just that the power will now be not lambda two to the n minus two but lambda two to the n minus", "tokens": [50684, 309, 311, 445, 300, 264, 1347, 486, 586, 312, 406, 13607, 732, 281, 264, 297, 3175, 732, 457, 13607, 732, 281, 264, 297, 3175, 50984], "temperature": 0.0, "avg_logprob": -0.040793356688126274, "compression_ratio": 1.755952380952381, "no_speech_prob": 0.0008558004046790302}, {"id": 1992, "seek": 1455756, "start": 14569.96, "end": 14578.199999999999, "text": " three after we take this difference and so if we keep going in this direction taking all of those", "tokens": [50984, 1045, 934, 321, 747, 341, 2649, 293, 370, 498, 321, 1066, 516, 294, 341, 3513, 1940, 439, 295, 729, 51396], "temperature": 0.0, "avg_logprob": -0.040793356688126274, "compression_ratio": 1.755952380952381, "no_speech_prob": 0.0008558004046790302}, {"id": 1993, "seek": 1457820, "start": 14578.28, "end": 14584.44, "text": " successive differences we will be left over with so this determinant equals", "tokens": [50368, 48043, 7300, 321, 486, 312, 1411, 670, 365, 370, 341, 41296, 6915, 50676], "temperature": 0.0, "avg_logprob": -0.08522548097552675, "compression_ratio": 1.3689320388349515, "no_speech_prob": 0.07584183663129807}, {"id": 1994, "seek": 1457820, "start": 14587.16, "end": 14596.52, "text": " the product of lambda j minus lambda one and j goes from two to n", "tokens": [50812, 264, 1674, 295, 13607, 361, 3175, 13607, 472, 293, 361, 1709, 490, 732, 281, 297, 51280], "temperature": 0.0, "avg_logprob": -0.08522548097552675, "compression_ratio": 1.3689320388349515, "no_speech_prob": 0.07584183663129807}, {"id": 1995, "seek": 1459652, "start": 14597.08, "end": 14606.68, "text": " and we're left over with the determinant of", "tokens": [50392, 293, 321, 434, 1411, 670, 365, 264, 41296, 295, 50872], "temperature": 0.0, "avg_logprob": -0.15061120119961827, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.004331096075475216}, {"id": 1996, "seek": 1459652, "start": 14607.720000000001, "end": 14615.24, "text": " a smaller bandermen matrix which looks like one zero zero and this term is one", "tokens": [50924, 257, 4356, 4116, 966, 268, 8141, 597, 1542, 411, 472, 4018, 4018, 293, 341, 1433, 307, 472, 51300], "temperature": 0.0, "avg_logprob": -0.15061120119961827, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.004331096075475216}, {"id": 1997, "seek": 1459652, "start": 14616.28, "end": 14621.640000000001, "text": " and it's all the way one's all the way down let me write just the first and last ones", "tokens": [51352, 293, 309, 311, 439, 264, 636, 472, 311, 439, 264, 636, 760, 718, 385, 2464, 445, 264, 700, 293, 1036, 2306, 51620], "temperature": 0.0, "avg_logprob": -0.15061120119961827, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.004331096075475216}, {"id": 1998, "seek": 1462164, "start": 14622.519999999999, "end": 14626.92, "text": " we also have zeros here up to the last term", "tokens": [50408, 321, 611, 362, 35193, 510, 493, 281, 264, 1036, 1433, 50628], "temperature": 0.0, "avg_logprob": -0.0938253016085238, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0002694699796847999}, {"id": 1999, "seek": 1462164, "start": 14630.119999999999, "end": 14635.4, "text": " now what is this term here it's lambda two to the n minus two now", "tokens": [50788, 586, 437, 307, 341, 1433, 510, 309, 311, 13607, 732, 281, 264, 297, 3175, 732, 586, 51052], "temperature": 0.0, "avg_logprob": -0.0938253016085238, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0002694699796847999}, {"id": 2000, "seek": 1462164, "start": 14637.56, "end": 14644.92, "text": " all the way down to lambda n to the n minus two and if we assume the induction hypothesis", "tokens": [51160, 439, 264, 636, 760, 281, 13607, 297, 281, 264, 297, 3175, 732, 293, 498, 321, 6552, 264, 33371, 17291, 51528], "temperature": 0.0, "avg_logprob": -0.0938253016085238, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0002694699796847999}, {"id": 2001, "seek": 1462164, "start": 14644.92, "end": 14650.68, "text": " then we know that the determinant here is the product of lambda let me use a different letter k", "tokens": [51528, 550, 321, 458, 300, 264, 41296, 510, 307, 264, 1674, 295, 13607, 718, 385, 764, 257, 819, 5063, 350, 51816], "temperature": 0.0, "avg_logprob": -0.0938253016085238, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0002694699796847999}, {"id": 2002, "seek": 1465068, "start": 14650.68, "end": 14659.16, "text": " and l so k minus l where k is greater than strictly greater than l and l runs from this", "tokens": [50364, 293, 287, 370, 350, 3175, 287, 689, 350, 307, 5044, 813, 20792, 5044, 813, 287, 293, 287, 6676, 490, 341, 50788], "temperature": 0.0, "avg_logprob": -0.10956029097239177, "compression_ratio": 1.525, "no_speech_prob": 0.0015485838521271944}, {"id": 2003, "seek": 1465068, "start": 14659.16, "end": 14669.4, "text": " time two to n and and and k so we end up getting after all of this work by using that induction", "tokens": [50788, 565, 732, 281, 297, 293, 293, 293, 350, 370, 321, 917, 493, 1242, 934, 439, 295, 341, 589, 538, 1228, 300, 33371, 51300], "temperature": 0.0, "avg_logprob": -0.10956029097239177, "compression_ratio": 1.525, "no_speech_prob": 0.0015485838521271944}, {"id": 2004, "seek": 1466940, "start": 14669.4, "end": 14675.64, "text": " hypothesis we get that this is this expression right here", "tokens": [50364, 17291, 321, 483, 300, 341, 307, 341, 6114, 558, 510, 50676], "temperature": 0.0, "avg_logprob": -0.07927483525769465, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.004399172496050596}, {"id": 2005, "seek": 1466940, "start": 14681.32, "end": 14687.16, "text": " and in particular this says that our determinant is non-zero so we can compute the inverse of", "tokens": [50960, 293, 294, 1729, 341, 1619, 300, 527, 41296, 307, 2107, 12, 32226, 370, 321, 393, 14722, 264, 17340, 295, 51252], "temperature": 0.0, "avg_logprob": -0.07927483525769465, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.004399172496050596}, {"id": 2006, "seek": 1466940, "start": 14687.16, "end": 14694.52, "text": " this matrix if we wanted to now that we have all of this set up we can prove our main theorem", "tokens": [51252, 341, 8141, 498, 321, 1415, 281, 586, 300, 321, 362, 439, 295, 341, 992, 493, 321, 393, 7081, 527, 2135, 20904, 51620], "temperature": 0.0, "avg_logprob": -0.07927483525769465, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.004399172496050596}, {"id": 2007, "seek": 1469452, "start": 14695.24, "end": 14708.04, "text": " which remember said that given any diagonalizable matrix a there exists and a function f on its", "tokens": [50400, 597, 1604, 848, 300, 2212, 604, 21539, 22395, 8141, 257, 456, 8198, 293, 257, 2445, 283, 322, 1080, 51040], "temperature": 0.0, "avg_logprob": -0.12187578413221571, "compression_ratio": 1.472, "no_speech_prob": 0.00382407009601593}, {"id": 2008, "seek": 1469452, "start": 14708.04, "end": 14718.36, "text": " set of eigenvalues there exists a polynomial q such that q of a equals f of a and so far", "tokens": [51040, 992, 295, 10446, 46033, 456, 8198, 257, 26110, 9505, 1270, 300, 9505, 295, 257, 6915, 283, 295, 257, 293, 370, 1400, 51556], "temperature": 0.0, "avg_logprob": -0.12187578413221571, "compression_ratio": 1.472, "no_speech_prob": 0.00382407009601593}, {"id": 2009, "seek": 1471836, "start": 14718.92, "end": 14729.800000000001, "text": " based on the facts that we just proved we know there exists a polynomial", "tokens": [50392, 2361, 322, 264, 9130, 300, 321, 445, 14617, 321, 458, 456, 8198, 257, 26110, 50936], "temperature": 0.0, "avg_logprob": -0.1174225932673404, "compression_ratio": 1.3904761904761904, "no_speech_prob": 0.012819717638194561}, {"id": 2010, "seek": 1471836, "start": 14733.16, "end": 14742.92, "text": " q such that q of lambda i equals f of lambda i for all of the eigenvalues", "tokens": [51104, 9505, 1270, 300, 9505, 295, 13607, 741, 6915, 283, 295, 13607, 741, 337, 439, 295, 264, 10446, 46033, 51592], "temperature": 0.0, "avg_logprob": -0.1174225932673404, "compression_ratio": 1.3904761904761904, "no_speech_prob": 0.012819717638194561}, {"id": 2011, "seek": 1474292, "start": 14743.56, "end": 14747.8, "text": " of that matrix therefore", "tokens": [50396, 295, 300, 8141, 4412, 50608], "temperature": 0.0, "avg_logprob": -0.18533198586825667, "compression_ratio": 1.3026315789473684, "no_speech_prob": 0.007345296908169985}, {"id": 2012, "seek": 1474292, "start": 14752.28, "end": 14761.88, "text": " if we compute f of d which was defined to be f of lambda one f of lambda n", "tokens": [50832, 498, 321, 14722, 283, 295, 274, 597, 390, 7642, 281, 312, 283, 295, 13607, 472, 283, 295, 13607, 297, 51312], "temperature": 0.0, "avg_logprob": -0.18533198586825667, "compression_ratio": 1.3026315789473684, "no_speech_prob": 0.007345296908169985}, {"id": 2013, "seek": 1476188, "start": 14762.199999999999, "end": 14773.56, "text": " of our diagonal matrix d then this is the same exact thing as q of lambda one", "tokens": [50380, 295, 527, 21539, 8141, 274, 550, 341, 307, 264, 912, 1900, 551, 382, 9505, 295, 13607, 472, 50948], "temperature": 0.0, "avg_logprob": -0.09504634425753639, "compression_ratio": 1.4132231404958677, "no_speech_prob": 0.005910676904022694}, {"id": 2014, "seek": 1476188, "start": 14775.32, "end": 14783.56, "text": " q of lambda n with zero everywhere else by this result we can find a single polynomial q that", "tokens": [51036, 9505, 295, 13607, 297, 365, 4018, 5315, 1646, 538, 341, 1874, 321, 393, 915, 257, 2167, 26110, 9505, 300, 51448], "temperature": 0.0, "avg_logprob": -0.09504634425753639, "compression_ratio": 1.4132231404958677, "no_speech_prob": 0.005910676904022694}, {"id": 2015, "seek": 1478356, "start": 14783.56, "end": 14798.92, "text": " satisfies this but this is exactly the same thing as q of d well why is that well if we", "tokens": [50364, 44271, 341, 457, 341, 307, 2293, 264, 912, 551, 382, 9505, 295, 274, 731, 983, 307, 300, 731, 498, 321, 51132], "temperature": 0.0, "avg_logprob": -0.05704273283481598, "compression_ratio": 1.4573643410852712, "no_speech_prob": 0.0059107402339577675}, {"id": 2016, "seek": 1478356, "start": 14798.92, "end": 14805.96, "text": " write our diagonal matrix d out and we apply the polynomial q to it right so let's just see why this", "tokens": [51132, 2464, 527, 21539, 8141, 274, 484, 293, 321, 3079, 264, 26110, 9505, 281, 309, 558, 370, 718, 311, 445, 536, 983, 341, 51484], "temperature": 0.0, "avg_logprob": -0.05704273283481598, "compression_ratio": 1.4573643410852712, "no_speech_prob": 0.0059107402339577675}, {"id": 2017, "seek": 1480596, "start": 14805.96, "end": 14816.759999999998, "text": " is true if we take our diagonal matrix and then we plug in our polynomial so we had what was it", "tokens": [50364, 307, 2074, 498, 321, 747, 527, 21539, 8141, 293, 550, 321, 5452, 294, 527, 26110, 370, 321, 632, 437, 390, 309, 50904], "temperature": 0.0, "avg_logprob": -0.0666673469543457, "compression_ratio": 1.528, "no_speech_prob": 0.003706955583766103}, {"id": 2018, "seek": 1480596, "start": 14816.759999999998, "end": 14825.64, "text": " it was a zero times the identity n by n matrix this is what if we view q as a polynomial and we", "tokens": [50904, 309, 390, 257, 4018, 1413, 264, 6575, 297, 538, 297, 8141, 341, 307, 437, 498, 321, 1910, 9505, 382, 257, 26110, 293, 321, 51348], "temperature": 0.0, "avg_logprob": -0.0666673469543457, "compression_ratio": 1.528, "no_speech_prob": 0.003706955583766103}, {"id": 2019, "seek": 1482564, "start": 14825.64, "end": 14835.4, "text": " plug in the formula for q of d this is by definition of a matrix applied to a polynomial", "tokens": [50364, 5452, 294, 264, 8513, 337, 9505, 295, 274, 341, 307, 538, 7123, 295, 257, 8141, 6456, 281, 257, 26110, 50852], "temperature": 0.0, "avg_logprob": -0.10436906676361526, "compression_ratio": 1.7086092715231789, "no_speech_prob": 0.0024724993854761124}, {"id": 2020, "seek": 1482564, "start": 14836.279999999999, "end": 14847.96, "text": " sorry a polynomial um with input a matrix plus a1d plus a2d squared plus a n minus 1", "tokens": [50896, 2597, 257, 26110, 1105, 365, 4846, 257, 8141, 1804, 257, 16, 67, 1804, 257, 17, 67, 8889, 1804, 257, 297, 3175, 502, 51480], "temperature": 0.0, "avg_logprob": -0.10436906676361526, "compression_ratio": 1.7086092715231789, "no_speech_prob": 0.0024724993854761124}, {"id": 2021, "seek": 1482564, "start": 14848.84, "end": 14855.32, "text": " d to the n minus 1 and we know what this looks like as a matrix this is the identity", "tokens": [51524, 274, 281, 264, 297, 3175, 502, 293, 321, 458, 437, 341, 1542, 411, 382, 257, 8141, 341, 307, 264, 6575, 51848], "temperature": 0.0, "avg_logprob": -0.10436906676361526, "compression_ratio": 1.7086092715231789, "no_speech_prob": 0.0024724993854761124}, {"id": 2022, "seek": 1485532, "start": 14855.32, "end": 14859.56, "text": " it looks like a zero all along the diagonals", "tokens": [50364, 309, 1542, 411, 257, 4018, 439, 2051, 264, 17405, 1124, 50576], "temperature": 0.0, "avg_logprob": -0.08613040017299965, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004582810215651989}, {"id": 2023, "seek": 1485532, "start": 14862.039999999999, "end": 14870.279999999999, "text": " and zero everywhere else this is a one times lambda one all the way down to a one times lambda", "tokens": [50700, 293, 4018, 5315, 1646, 341, 307, 257, 472, 1413, 13607, 472, 439, 264, 636, 760, 281, 257, 472, 1413, 13607, 51112], "temperature": 0.0, "avg_logprob": -0.08613040017299965, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004582810215651989}, {"id": 2024, "seek": 1485532, "start": 14870.92, "end": 14880.6, "text": " to the n lambda n and then here we have plus a2d squared now d squared since d is the diagonal", "tokens": [51144, 281, 264, 297, 13607, 297, 293, 550, 510, 321, 362, 1804, 257, 17, 67, 8889, 586, 274, 8889, 1670, 274, 307, 264, 21539, 51628], "temperature": 0.0, "avg_logprob": -0.08613040017299965, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0004582810215651989}, {"id": 2025, "seek": 1488060, "start": 14880.6, "end": 14888.6, "text": " matrix is just lambda i squared in each of the diagonal terms so it's a2 lambda one squared", "tokens": [50364, 8141, 307, 445, 13607, 741, 8889, 294, 1184, 295, 264, 21539, 2115, 370, 309, 311, 257, 17, 13607, 472, 8889, 50764], "temperature": 0.0, "avg_logprob": -0.06264827015635731, "compression_ratio": 1.9067357512953367, "no_speech_prob": 0.02886338159441948}, {"id": 2026, "seek": 1488060, "start": 14889.32, "end": 14895.24, "text": " all the way down to a2 lambda n squared and similarly for all of the other terms", "tokens": [50800, 439, 264, 636, 760, 281, 257, 17, 13607, 297, 8889, 293, 14138, 337, 439, 295, 264, 661, 2115, 51096], "temperature": 0.0, "avg_logprob": -0.06264827015635731, "compression_ratio": 1.9067357512953367, "no_speech_prob": 0.02886338159441948}, {"id": 2027, "seek": 1488060, "start": 14896.28, "end": 14901.640000000001, "text": " up until this last one then what happens when you add all of these matrices together well you get", "tokens": [51148, 493, 1826, 341, 1036, 472, 550, 437, 2314, 562, 291, 909, 439, 295, 613, 32284, 1214, 731, 291, 483, 51416], "temperature": 0.0, "avg_logprob": -0.06264827015635731, "compression_ratio": 1.9067357512953367, "no_speech_prob": 0.02886338159441948}, {"id": 2028, "seek": 1488060, "start": 14901.640000000001, "end": 14907.800000000001, "text": " a zero on the top left term you get a zero plus a1 lambda one plus a2 lambda one squared plus dot", "tokens": [51416, 257, 4018, 322, 264, 1192, 1411, 1433, 291, 483, 257, 4018, 1804, 257, 16, 13607, 472, 1804, 257, 17, 13607, 472, 8889, 1804, 5893, 51724], "temperature": 0.0, "avg_logprob": -0.06264827015635731, "compression_ratio": 1.9067357512953367, "no_speech_prob": 0.02886338159441948}, {"id": 2029, "seek": 1490780, "start": 14907.8, "end": 14914.679999999998, "text": " dot dot a n one minus lambda one to the n minus one that's exactly what q of lambda one is", "tokens": [50364, 5893, 5893, 257, 297, 472, 3175, 13607, 472, 281, 264, 297, 3175, 472, 300, 311, 2293, 437, 9505, 295, 13607, 472, 307, 50708], "temperature": 0.0, "avg_logprob": -0.07799235386634941, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.0021153870038688183}, {"id": 2030, "seek": 1490780, "start": 14915.64, "end": 14921.56, "text": " and similarly for all of the other terms so this justifies why this equality holds", "tokens": [50756, 293, 14138, 337, 439, 295, 264, 661, 2115, 370, 341, 445, 11221, 983, 341, 14949, 9190, 51052], "temperature": 0.0, "avg_logprob": -0.07799235386634941, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.0021153870038688183}, {"id": 2031, "seek": 1490780, "start": 14924.359999999999, "end": 14932.439999999999, "text": " and of course q of any matrix is defined similarly so in particular q of a equals a zero times the", "tokens": [51192, 293, 295, 1164, 9505, 295, 604, 8141, 307, 7642, 14138, 370, 294, 1729, 9505, 295, 257, 6915, 257, 4018, 1413, 264, 51596], "temperature": 0.0, "avg_logprob": -0.07799235386634941, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.0021153870038688183}, {"id": 2032, "seek": 1493244, "start": 14932.44, "end": 14943.640000000001, "text": " identity plus a1 times a plus a2 times a squared and so on so now let's show that f of a equals q", "tokens": [50364, 6575, 1804, 257, 16, 1413, 257, 1804, 257, 17, 1413, 257, 8889, 293, 370, 322, 370, 586, 718, 311, 855, 300, 283, 295, 257, 6915, 9505, 50924], "temperature": 0.0, "avg_logprob": -0.05017883202125286, "compression_ratio": 1.5873015873015872, "no_speech_prob": 0.0008830120204947889}, {"id": 2033, "seek": 1493244, "start": 14943.640000000001, "end": 14955.0, "text": " of a now f of a by definition of f of a is p times f of the diagonal matrix times p inverse where p is", "tokens": [50924, 295, 257, 586, 283, 295, 257, 538, 7123, 295, 283, 295, 257, 307, 280, 1413, 283, 295, 264, 21539, 8141, 1413, 280, 17340, 689, 280, 307, 51492], "temperature": 0.0, "avg_logprob": -0.05017883202125286, "compression_ratio": 1.5873015873015872, "no_speech_prob": 0.0008830120204947889}, {"id": 2034, "seek": 1495500, "start": 14955.0, "end": 14962.36, "text": " the matrix of eigen vectors corresponding to those eigen values is a matrix of eigen vectors", "tokens": [50364, 264, 8141, 295, 10446, 18875, 11760, 281, 729, 10446, 4190, 307, 257, 8141, 295, 10446, 18875, 50732], "temperature": 0.0, "avg_logprob": -0.08929842710494995, "compression_ratio": 1.6229508196721312, "no_speech_prob": 0.0055545419454574585}, {"id": 2035, "seek": 1495500, "start": 14964.2, "end": 14969.72, "text": " now f of d by this calculation is also q applied to d", "tokens": [50824, 586, 283, 295, 274, 538, 341, 17108, 307, 611, 9505, 6456, 281, 274, 51100], "temperature": 0.0, "avg_logprob": -0.08929842710494995, "compression_ratio": 1.6229508196721312, "no_speech_prob": 0.0055545419454574585}, {"id": 2036, "seek": 1495500, "start": 14975.24, "end": 14977.72, "text": " and so that equation is true by what we just showed", "tokens": [51376, 293, 370, 300, 5367, 307, 2074, 538, 437, 321, 445, 4712, 51500], "temperature": 0.0, "avg_logprob": -0.08929842710494995, "compression_ratio": 1.6229508196721312, "no_speech_prob": 0.0055545419454574585}, {"id": 2037, "seek": 1497772, "start": 14977.72, "end": 14984.359999999999, "text": " now we know what q of d looks like it looks like this and we also know what happens when", "tokens": [50364, 586, 321, 458, 437, 9505, 295, 274, 1542, 411, 309, 1542, 411, 341, 293, 321, 611, 458, 437, 2314, 562, 50696], "temperature": 0.0, "avg_logprob": -0.127634427764199, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.018261779099702835}, {"id": 2038, "seek": 1497772, "start": 14984.359999999999, "end": 14995.16, "text": " we distribute p throughout so we get something that looks like a zero p times p inverse plus", "tokens": [50696, 321, 20594, 280, 3710, 370, 321, 483, 746, 300, 1542, 411, 257, 4018, 280, 1413, 280, 17340, 1804, 51236], "temperature": 0.0, "avg_logprob": -0.127634427764199, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.018261779099702835}, {"id": 2039, "seek": 1499516, "start": 14995.72, "end": 15010.039999999999, "text": " a1 pd p inverse all the way up to a n minus one pd to the n minus one p inverse", "tokens": [50392, 257, 16, 280, 67, 280, 17340, 439, 264, 636, 493, 281, 257, 297, 3175, 472, 280, 67, 281, 264, 297, 3175, 472, 280, 17340, 51108], "temperature": 0.0, "avg_logprob": -0.07027028469329184, "compression_ratio": 1.4862385321100917, "no_speech_prob": 0.03409570828080177}, {"id": 2040, "seek": 1499516, "start": 15012.36, "end": 15017.4, "text": " that's just what that looks like when you distribute p and p inverse on both sides", "tokens": [51224, 300, 311, 445, 437, 300, 1542, 411, 562, 291, 20594, 280, 293, 280, 17340, 322, 1293, 4881, 51476], "temperature": 0.0, "avg_logprob": -0.07027028469329184, "compression_ratio": 1.4862385321100917, "no_speech_prob": 0.03409570828080177}, {"id": 2041, "seek": 1501740, "start": 15017.88, "end": 15029.72, "text": " now this is a and what is this expression and likewise for all of the terms in between well", "tokens": [50388, 586, 341, 307, 257, 293, 437, 307, 341, 6114, 293, 32407, 337, 439, 295, 264, 2115, 294, 1296, 731, 50980], "temperature": 0.0, "avg_logprob": -0.17127107114207987, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.006387831177562475}, {"id": 2042, "seek": 1501740, "start": 15032.52, "end": 15039.24, "text": " let's just let's just look at what happens if we um if we set f n is like three or something like", "tokens": [51120, 718, 311, 445, 718, 311, 445, 574, 412, 437, 2314, 498, 321, 1105, 498, 321, 992, 283, 297, 307, 411, 1045, 420, 746, 411, 51456], "temperature": 0.0, "avg_logprob": -0.17127107114207987, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.006387831177562475}, {"id": 2043, "seek": 1503924, "start": 15039.24, "end": 15048.039999999999, "text": " that or maybe even two is enough um so let's look at this term p d squared p inverse so p", "tokens": [50364, 300, 420, 1310, 754, 732, 307, 1547, 1105, 370, 718, 311, 574, 412, 341, 1433, 280, 274, 8889, 280, 17340, 370, 280, 50804], "temperature": 0.0, "avg_logprob": -0.07677738325936453, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.03021119348704815}, {"id": 2044, "seek": 1503924, "start": 15048.76, "end": 15060.68, "text": " d squared p inverse also equals p times d times d times p inverse and because p and p inverse are", "tokens": [50840, 274, 8889, 280, 17340, 611, 6915, 280, 1413, 274, 1413, 274, 1413, 280, 17340, 293, 570, 280, 293, 280, 17340, 366, 51436], "temperature": 0.0, "avg_logprob": -0.07677738325936453, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.03021119348704815}, {"id": 2045, "seek": 1503924, "start": 15060.68, "end": 15068.52, "text": " well inverses of each other we can plug in a p inverse p between these two d's and", "tokens": [51436, 731, 21378, 279, 295, 1184, 661, 321, 393, 5452, 294, 257, 280, 17340, 280, 1296, 613, 732, 274, 311, 293, 51828], "temperature": 0.0, "avg_logprob": -0.07677738325936453, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.03021119348704815}, {"id": 2046, "seek": 1506924, "start": 15069.48, "end": 15081.4, "text": " this gives us p d p inverse times p d p inverse again and this is just a and this is just a", "tokens": [50376, 341, 2709, 505, 280, 274, 280, 17340, 1413, 280, 274, 280, 17340, 797, 293, 341, 307, 445, 257, 293, 341, 307, 445, 257, 50972], "temperature": 0.0, "avg_logprob": -0.0428553968667984, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0008558413828723133}, {"id": 2047, "seek": 1506924, "start": 15082.039999999999, "end": 15089.32, "text": " so we get a squared therefore when we actually write out what all of these things equal we get", "tokens": [51004, 370, 321, 483, 257, 8889, 4412, 562, 321, 767, 2464, 484, 437, 439, 295, 613, 721, 2681, 321, 483, 51368], "temperature": 0.0, "avg_logprob": -0.0428553968667984, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0008558413828723133}, {"id": 2048, "seek": 1508932, "start": 15089.4, "end": 15099.32, "text": " a zero p p inverse plus a one which is the identity sorry this is the identity matrix", "tokens": [50368, 257, 4018, 280, 280, 17340, 1804, 257, 472, 597, 307, 264, 6575, 2597, 341, 307, 264, 6575, 8141, 50864], "temperature": 0.0, "avg_logprob": -0.12692912744016063, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.05499435216188431}, {"id": 2049, "seek": 1508932, "start": 15100.279999999999, "end": 15110.199999999999, "text": " and this is a plus a two a squared plus all the way up to a n minus one a to the n minus one", "tokens": [50912, 293, 341, 307, 257, 1804, 257, 732, 257, 8889, 1804, 439, 264, 636, 493, 281, 257, 297, 3175, 472, 257, 281, 264, 297, 3175, 472, 51408], "temperature": 0.0, "avg_logprob": -0.12692912744016063, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.05499435216188431}, {"id": 2050, "seek": 1511020, "start": 15110.28, "end": 15122.28, "text": " and this is the definition of q of a so this shows us that that theorem is true", "tokens": [50368, 293, 341, 307, 264, 7123, 295, 9505, 295, 257, 370, 341, 3110, 505, 300, 300, 20904, 307, 2074, 50968], "temperature": 0.0, "avg_logprob": -0.17980852127075195, "compression_ratio": 1.43, "no_speech_prob": 0.004069865681231022}, {"id": 2051, "seek": 1511020, "start": 15124.6, "end": 15126.44, "text": " so this has an interesting corollary", "tokens": [51084, 370, 341, 575, 364, 1880, 1181, 1833, 822, 51176], "temperature": 0.0, "avg_logprob": -0.17980852127075195, "compression_ratio": 1.43, "no_speech_prob": 0.004069865681231022}, {"id": 2052, "seek": 1511020, "start": 15131.16, "end": 15133.0, "text": " so let a be diagonalizable", "tokens": [51412, 370, 718, 257, 312, 21539, 22395, 51504], "temperature": 0.0, "avg_logprob": -0.17980852127075195, "compression_ratio": 1.43, "no_speech_prob": 0.004069865681231022}, {"id": 2053, "seek": 1513300, "start": 15133.56, "end": 15142.84, "text": " and let b be any square matrix of the same size", "tokens": [50392, 293, 718, 272, 312, 604, 3732, 8141, 295, 264, 912, 2744, 50856], "temperature": 0.0, "avg_logprob": -0.1362583453838642, "compression_ratio": 1.3873873873873874, "no_speech_prob": 0.0021825425792485476}, {"id": 2054, "seek": 1513300, "start": 15149.4, "end": 15151.0, "text": " and suppose that they satisfy", "tokens": [51184, 293, 7297, 300, 436, 19319, 51264], "temperature": 0.0, "avg_logprob": -0.1362583453838642, "compression_ratio": 1.3873873873873874, "no_speech_prob": 0.0021825425792485476}, {"id": 2055, "seek": 1513300, "start": 15155.48, "end": 15159.88, "text": " the fact that when we multiply them in any order they're equal to each other", "tokens": [51488, 264, 1186, 300, 562, 321, 12972, 552, 294, 604, 1668, 436, 434, 2681, 281, 1184, 661, 51708], "temperature": 0.0, "avg_logprob": -0.1362583453838642, "compression_ratio": 1.3873873873873874, "no_speech_prob": 0.0021825425792485476}, {"id": 2056, "seek": 1516300, "start": 15163.08, "end": 15167.32, "text": " then f of a", "tokens": [50368, 550, 283, 295, 257, 50580], "temperature": 0.0, "avg_logprob": -0.1552382787068685, "compression_ratio": 1.2054794520547945, "no_speech_prob": 0.002889025490731001}, {"id": 2057, "seek": 1516300, "start": 15169.8, "end": 15175.88, "text": " b equals b f of a for all functions", "tokens": [50704, 272, 6915, 272, 283, 295, 257, 337, 439, 6828, 51008], "temperature": 0.0, "avg_logprob": -0.1552382787068685, "compression_ratio": 1.2054794520547945, "no_speech_prob": 0.002889025490731001}, {"id": 2058, "seek": 1516300, "start": 15178.36, "end": 15184.12, "text": " that are defined on the eigenvalues of a", "tokens": [51132, 300, 366, 7642, 322, 264, 10446, 46033, 295, 257, 51420], "temperature": 0.0, "avg_logprob": -0.1552382787068685, "compression_ratio": 1.2054794520547945, "no_speech_prob": 0.002889025490731001}, {"id": 2059, "seek": 1518412, "start": 15184.12, "end": 15188.12, "text": " and how do we prove this", "tokens": [50364, 293, 577, 360, 321, 7081, 341, 50564], "temperature": 0.0, "avg_logprob": -0.14204285542170206, "compression_ratio": 1.4919354838709677, "no_speech_prob": 0.005554295610636473}, {"id": 2060, "seek": 1518412, "start": 15190.04, "end": 15199.720000000001, "text": " well because a is diagonalizable then f of a equals q of a for some polynomial", "tokens": [50660, 731, 570, 257, 307, 21539, 22395, 550, 283, 295, 257, 6915, 9505, 295, 257, 337, 512, 26110, 51144], "temperature": 0.0, "avg_logprob": -0.14204285542170206, "compression_ratio": 1.4919354838709677, "no_speech_prob": 0.005554295610636473}, {"id": 2061, "seek": 1518412, "start": 15203.880000000001, "end": 15213.320000000002, "text": " q and because it's a polynomial if we replace this expression with q of a times b", "tokens": [51352, 9505, 293, 570, 309, 311, 257, 26110, 498, 321, 7406, 341, 6114, 365, 9505, 295, 257, 1413, 272, 51824], "temperature": 0.0, "avg_logprob": -0.14204285542170206, "compression_ratio": 1.4919354838709677, "no_speech_prob": 0.005554295610636473}, {"id": 2062, "seek": 1521412, "start": 15214.84, "end": 15224.68, "text": " so if we have q of a times b this is a polynomial in a and each of the terms look like", "tokens": [50400, 370, 498, 321, 362, 9505, 295, 257, 1413, 272, 341, 307, 257, 26110, 294, 257, 293, 1184, 295, 264, 2115, 574, 411, 50892], "temperature": 0.0, "avg_logprob": -0.08317990138612945, "compression_ratio": 1.8782051282051282, "no_speech_prob": 0.00023049993615131825}, {"id": 2063, "seek": 1521412, "start": 15225.320000000002, "end": 15228.28, "text": " a to the jth power times b", "tokens": [50924, 257, 281, 264, 361, 392, 1347, 1413, 272, 51072], "temperature": 0.0, "avg_logprob": -0.08317990138612945, "compression_ratio": 1.8782051282051282, "no_speech_prob": 0.00023049993615131825}, {"id": 2064, "seek": 1521412, "start": 15230.76, "end": 15235.720000000001, "text": " right so you have a to the jth power times b now a to the jth power means you write the", "tokens": [51196, 558, 370, 291, 362, 257, 281, 264, 361, 392, 1347, 1413, 272, 586, 257, 281, 264, 361, 392, 1347, 1355, 291, 2464, 264, 51444], "temperature": 0.0, "avg_logprob": -0.08317990138612945, "compression_ratio": 1.8782051282051282, "no_speech_prob": 0.00023049993615131825}, {"id": 2065, "seek": 1521412, "start": 15235.720000000001, "end": 15241.960000000001, "text": " matrix a j times and if you have a b on one side you can use this to move each of those a's", "tokens": [51444, 8141, 257, 361, 1413, 293, 498, 291, 362, 257, 272, 322, 472, 1252, 291, 393, 764, 341, 281, 1286, 1184, 295, 729, 257, 311, 51756], "temperature": 0.0, "avg_logprob": -0.08317990138612945, "compression_ratio": 1.8782051282051282, "no_speech_prob": 0.00023049993615131825}, {"id": 2066, "seek": 1524196, "start": 15241.96, "end": 15245.56, "text": " one over at a time you can move them over one at a time", "tokens": [50364, 472, 670, 412, 257, 565, 291, 393, 1286, 552, 670, 472, 412, 257, 565, 50544], "temperature": 0.0, "avg_logprob": -0.0629231580873815, "compression_ratio": 1.8875739644970415, "no_speech_prob": 0.006902767810970545}, {"id": 2067, "seek": 1524196, "start": 15246.279999999999, "end": 15251.96, "text": " therefore a j a to the jth times b equals b times a to the jth therefore", "tokens": [50580, 4412, 257, 361, 257, 281, 264, 361, 392, 1413, 272, 6915, 272, 1413, 257, 281, 264, 361, 392, 4412, 50864], "temperature": 0.0, "avg_logprob": -0.0629231580873815, "compression_ratio": 1.8875739644970415, "no_speech_prob": 0.006902767810970545}, {"id": 2068, "seek": 1524196, "start": 15253.08, "end": 15261.56, "text": " it's immediate that this equals b times q of a and it immediately solves this problem because", "tokens": [50920, 309, 311, 11629, 300, 341, 6915, 272, 1413, 9505, 295, 257, 293, 309, 4258, 39890, 341, 1154, 570, 51344], "temperature": 0.0, "avg_logprob": -0.0629231580873815, "compression_ratio": 1.8875739644970415, "no_speech_prob": 0.006902767810970545}, {"id": 2069, "seek": 1524196, "start": 15261.56, "end": 15269.08, "text": " q of a equals f of a and the interesting thing about this is that b can be any matrix whatsoever", "tokens": [51344, 9505, 295, 257, 6915, 283, 295, 257, 293, 264, 1880, 551, 466, 341, 307, 300, 272, 393, 312, 604, 8141, 17076, 51720], "temperature": 0.0, "avg_logprob": -0.0629231580873815, "compression_ratio": 1.8875739644970415, "no_speech_prob": 0.006902767810970545}, {"id": 2070, "seek": 1526908, "start": 15269.08, "end": 15272.12, "text": " and a only has to be diagonalizable for this to be true", "tokens": [50364, 293, 257, 787, 575, 281, 312, 21539, 22395, 337, 341, 281, 312, 2074, 50516], "temperature": 0.0, "avg_logprob": -0.07576316236013389, "compression_ratio": 1.763819095477387, "no_speech_prob": 0.0006070153904147446}, {"id": 2071, "seek": 1526908, "start": 15274.52, "end": 15282.84, "text": " so hopefully this is an interesting fact namely that given any function at least that's defined", "tokens": [50636, 370, 4696, 341, 307, 364, 1880, 1186, 20926, 300, 2212, 604, 2445, 412, 1935, 300, 311, 7642, 51052], "temperature": 0.0, "avg_logprob": -0.07576316236013389, "compression_ratio": 1.763819095477387, "no_speech_prob": 0.0006070153904147446}, {"id": 2072, "seek": 1526908, "start": 15282.84, "end": 15290.52, "text": " on the set of eigenvalues of a it could be defined on a larger set of the subset of the complex numbers", "tokens": [51052, 322, 264, 992, 295, 10446, 46033, 295, 257, 309, 727, 312, 7642, 322, 257, 4833, 992, 295, 264, 25993, 295, 264, 3997, 3547, 51436], "temperature": 0.0, "avg_logprob": -0.07576316236013389, "compression_ratio": 1.763819095477387, "no_speech_prob": 0.0006070153904147446}, {"id": 2073, "seek": 1526908, "start": 15290.52, "end": 15296.84, "text": " but at the very least if it's defined on those eigenvalues then we can always find a polynomial", "tokens": [51436, 457, 412, 264, 588, 1935, 498, 309, 311, 7642, 322, 729, 10446, 46033, 550, 321, 393, 1009, 915, 257, 26110, 51752], "temperature": 0.0, "avg_logprob": -0.07576316236013389, "compression_ratio": 1.763819095477387, "no_speech_prob": 0.0006070153904147446}, {"id": 2074, "seek": 1529684, "start": 15296.84, "end": 15305.08, "text": " for which when we apply that function which could be completely wild such such as the", "tokens": [50364, 337, 597, 562, 321, 3079, 300, 2445, 597, 727, 312, 2584, 4868, 1270, 1270, 382, 264, 50776], "temperature": 0.0, "avg_logprob": -0.07508640173004895, "compression_ratio": 1.86, "no_speech_prob": 0.0013668282190337777}, {"id": 2075, "seek": 1529684, "start": 15305.08, "end": 15311.4, "text": " logarithm or something like that then there's a polynomial that gives us the same value for that", "tokens": [50776, 41473, 32674, 420, 746, 411, 300, 550, 456, 311, 257, 26110, 300, 2709, 505, 264, 912, 2158, 337, 300, 51092], "temperature": 0.0, "avg_logprob": -0.07508640173004895, "compression_ratio": 1.86, "no_speech_prob": 0.0013668282190337777}, {"id": 2076, "seek": 1529684, "start": 15311.4, "end": 15317.16, "text": " matrix if we apply the polynomials of the matrix versus if we apply the function to that matrix", "tokens": [51092, 8141, 498, 321, 3079, 264, 22560, 12356, 295, 264, 8141, 5717, 498, 321, 3079, 264, 2445, 281, 300, 8141, 51380], "temperature": 0.0, "avg_logprob": -0.07508640173004895, "compression_ratio": 1.86, "no_speech_prob": 0.0013668282190337777}, {"id": 2077, "seek": 1529684, "start": 15319.24, "end": 15325.56, "text": " and a lot of this has to do with the fact that we're working with finite dimensional matrices", "tokens": [51484, 293, 257, 688, 295, 341, 575, 281, 360, 365, 264, 1186, 300, 321, 434, 1364, 365, 19362, 18795, 32284, 51800], "temperature": 0.0, "avg_logprob": -0.07508640173004895, "compression_ratio": 1.86, "no_speech_prob": 0.0013668282190337777}, {"id": 2078, "seek": 1532684, "start": 15327.0, "end": 15333.16, "text": " one of the interesting things about linear algebra is what happens when your matrices become of", "tokens": [50372, 472, 295, 264, 1880, 721, 466, 8213, 21989, 307, 437, 2314, 562, 428, 32284, 1813, 295, 50680], "temperature": 0.0, "avg_logprob": -0.05784448623657226, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0015009043272584677}, {"id": 2079, "seek": 1532684, "start": 15333.16, "end": 15340.12, "text": " infinite order and then this really becomes a much more subtle issue and clearly the method that we've", "tokens": [50680, 13785, 1668, 293, 550, 341, 534, 3643, 257, 709, 544, 13743, 2734, 293, 4448, 264, 3170, 300, 321, 600, 51028], "temperature": 0.0, "avg_logprob": -0.05784448623657226, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0015009043272584677}, {"id": 2080, "seek": 1532684, "start": 15340.12, "end": 15344.76, "text": " used should probably break down for instance we're not working with polynomials anymore", "tokens": [51028, 1143, 820, 1391, 1821, 760, 337, 5197, 321, 434, 406, 1364, 365, 22560, 12356, 3602, 51260], "temperature": 0.0, "avg_logprob": -0.05784448623657226, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0015009043272584677}, {"id": 2081, "seek": 1532684, "start": 15345.4, "end": 15350.84, "text": " and a lot of this is explored for instance in functional analysis and spectral theory", "tokens": [51292, 293, 257, 688, 295, 341, 307, 24016, 337, 5197, 294, 11745, 5215, 293, 42761, 5261, 51564], "temperature": 0.0, "avg_logprob": -0.05784448623657226, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0015009043272584677}, {"id": 2082, "seek": 1535084, "start": 15351.64, "end": 15354.84, "text": " and the functional calculus for such operators", "tokens": [50404, 293, 264, 11745, 33400, 337, 1270, 19077, 50564], "temperature": 0.0, "avg_logprob": -0.060438948519089646, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.0017006461275741458}, {"id": 2083, "seek": 1535084, "start": 15357.08, "end": 15363.960000000001, "text": " in these next few videos we'll learn about affine subspaces affine combinations and affine", "tokens": [50676, 294, 613, 958, 1326, 2145, 321, 603, 1466, 466, 2096, 533, 2090, 79, 2116, 2096, 533, 21267, 293, 2096, 533, 51020], "temperature": 0.0, "avg_logprob": -0.060438948519089646, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.0017006461275741458}, {"id": 2084, "seek": 1535084, "start": 15363.960000000001, "end": 15369.64, "text": " transformations which are very slight generalizations of linear transformations as we'll see", "tokens": [51020, 34852, 597, 366, 588, 4036, 2674, 14455, 295, 8213, 34852, 382, 321, 603, 536, 51304], "temperature": 0.0, "avg_logprob": -0.060438948519089646, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.0017006461275741458}, {"id": 2085, "seek": 1535084, "start": 15371.24, "end": 15377.32, "text": " so the first definition that we'll need is what an affine combination of vectors is", "tokens": [51384, 370, 264, 700, 7123, 300, 321, 603, 643, 307, 437, 364, 2096, 533, 6562, 295, 18875, 307, 51688], "temperature": 0.0, "avg_logprob": -0.060438948519089646, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.0017006461275741458}, {"id": 2086, "seek": 1537732, "start": 15377.56, "end": 15384.119999999999, "text": " so but to do that we'll recall what a linear combination is so a linear combination", "tokens": [50376, 370, 457, 281, 360, 300, 321, 603, 9901, 437, 257, 8213, 6562, 307, 370, 257, 8213, 6562, 50704], "temperature": 0.0, "avg_logprob": -0.220111420280055, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0028894669376313686}, {"id": 2087, "seek": 1537732, "start": 15388.76, "end": 15400.36, "text": " of vectors v1 through vk in rn is a combination of the form", "tokens": [50936, 295, 18875, 371, 16, 807, 371, 74, 294, 367, 77, 307, 257, 6562, 295, 264, 1254, 51516], "temperature": 0.0, "avg_logprob": -0.220111420280055, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0028894669376313686}, {"id": 2088, "seek": 1540732, "start": 15407.48, "end": 15417.56, "text": " lambda 1 v1 so we add up all our vectors with some weights and these weights", "tokens": [50372, 13607, 502, 371, 16, 370, 321, 909, 493, 439, 527, 18875, 365, 512, 17443, 293, 613, 17443, 50876], "temperature": 0.0, "avg_logprob": -0.12427702728582889, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.003483298234641552}, {"id": 2089, "seek": 1540732, "start": 15418.6, "end": 15420.36, "text": " will take to be real numbers", "tokens": [50928, 486, 747, 281, 312, 957, 3547, 51016], "temperature": 0.0, "avg_logprob": -0.12427702728582889, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.003483298234641552}, {"id": 2090, "seek": 1540732, "start": 15423.72, "end": 15425.72, "text": " so that's what a linear combination is", "tokens": [51184, 370, 300, 311, 437, 257, 8213, 6562, 307, 51284], "temperature": 0.0, "avg_logprob": -0.12427702728582889, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.003483298234641552}, {"id": 2091, "seek": 1540732, "start": 15428.199999999999, "end": 15434.6, "text": " and closely related to this an affine combination", "tokens": [51408, 293, 8185, 4077, 281, 341, 364, 2096, 533, 6562, 51728], "temperature": 0.0, "avg_logprob": -0.12427702728582889, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.003483298234641552}, {"id": 2092, "seek": 1543732, "start": 15437.56, "end": 15439.88, "text": " of these same vectors", "tokens": [50376, 295, 613, 912, 18875, 50492], "temperature": 0.0, "avg_logprob": -0.2592345305851528, "compression_ratio": 1.2613636363636365, "no_speech_prob": 0.001501142862252891}, {"id": 2093, "seek": 1543732, "start": 15447.0, "end": 15448.279999999999, "text": " is a linear combination", "tokens": [50848, 307, 257, 8213, 6562, 50912], "temperature": 0.0, "avg_logprob": -0.2592345305851528, "compression_ratio": 1.2613636363636365, "no_speech_prob": 0.001501142862252891}, {"id": 2094, "seek": 1543732, "start": 15452.44, "end": 15457.48, "text": " and for short I may often write just using the summation notation", "tokens": [51120, 293, 337, 2099, 286, 815, 2049, 2464, 445, 1228, 264, 28811, 24657, 51372], "temperature": 0.0, "avg_logprob": -0.2592345305851528, "compression_ratio": 1.2613636363636365, "no_speech_prob": 0.001501142862252891}, {"id": 2095, "seek": 1545748, "start": 15457.88, "end": 15468.039999999999, "text": " oops let's call this not k but j and this goes from j equals one to k", "tokens": [50384, 34166, 718, 311, 818, 341, 406, 350, 457, 361, 293, 341, 1709, 490, 361, 6915, 472, 281, 350, 50892], "temperature": 0.0, "avg_logprob": -0.12701460948357216, "compression_ratio": 1.5072463768115942, "no_speech_prob": 0.004399214871227741}, {"id": 2096, "seek": 1545748, "start": 15471.56, "end": 15477.56, "text": " such that the sum of these coefficients is equal to one", "tokens": [51068, 1270, 300, 264, 2408, 295, 613, 31994, 307, 2681, 281, 472, 51368], "temperature": 0.0, "avg_logprob": -0.12701460948357216, "compression_ratio": 1.5072463768115942, "no_speech_prob": 0.004399214871227741}, {"id": 2097, "seek": 1545748, "start": 15480.76, "end": 15486.6, "text": " so it's basically a linear combination but we have an additional constraint on the", "tokens": [51528, 370, 309, 311, 1936, 257, 8213, 6562, 457, 321, 362, 364, 4497, 25534, 322, 264, 51820], "temperature": 0.0, "avg_logprob": -0.12701460948357216, "compression_ratio": 1.5072463768115942, "no_speech_prob": 0.004399214871227741}, {"id": 2098, "seek": 1548660, "start": 15486.68, "end": 15496.36, "text": " coefficients so for example when k equals two we have two vectors let's say v1 and v2", "tokens": [50368, 31994, 370, 337, 1365, 562, 350, 6915, 732, 321, 362, 732, 18875, 718, 311, 584, 371, 16, 293, 371, 17, 50852], "temperature": 0.0, "avg_logprob": -0.110865232679579, "compression_ratio": 1.3445378151260505, "no_speech_prob": 0.0026314735878258944}, {"id": 2099, "seek": 1548660, "start": 15498.36, "end": 15509.32, "text": " then every such affine combination is of the form t v2 plus one minus t v1", "tokens": [50952, 550, 633, 1270, 2096, 533, 6562, 307, 295, 264, 1254, 256, 371, 17, 1804, 472, 3175, 256, 371, 16, 51500], "temperature": 0.0, "avg_logprob": -0.110865232679579, "compression_ratio": 1.3445378151260505, "no_speech_prob": 0.0026314735878258944}, {"id": 2100, "seek": 1550932, "start": 15509.32, "end": 15518.199999999999, "text": " where t is a real number and you can look at what this says let's say these two vectors are", "tokens": [50364, 689, 256, 307, 257, 957, 1230, 293, 291, 393, 574, 412, 437, 341, 1619, 718, 311, 584, 613, 732, 18875, 366, 50808], "temperature": 0.0, "avg_logprob": -0.0822448338547798, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.01798447035253048}, {"id": 2101, "seek": 1550932, "start": 15518.199999999999, "end": 15527.56, "text": " different let's say v1 is here and v2 is here then at t equals zero so this right this is", "tokens": [50808, 819, 718, 311, 584, 371, 16, 307, 510, 293, 371, 17, 307, 510, 550, 412, 256, 6915, 4018, 370, 341, 558, 341, 307, 51276], "temperature": 0.0, "avg_logprob": -0.0822448338547798, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.01798447035253048}, {"id": 2102, "seek": 1550932, "start": 15527.56, "end": 15534.52, "text": " describing the set of all such combinations and when t equals zero this gives me v1 so at t equals", "tokens": [51276, 16141, 264, 992, 295, 439, 1270, 21267, 293, 562, 256, 6915, 4018, 341, 2709, 385, 371, 16, 370, 412, 256, 6915, 51624], "temperature": 0.0, "avg_logprob": -0.0822448338547798, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.01798447035253048}, {"id": 2103, "seek": 1553452, "start": 15534.52, "end": 15544.04, "text": " zero i'm here and when t equals one i'm at v2 and as you vary t over the set of real numbers", "tokens": [50364, 4018, 741, 478, 510, 293, 562, 256, 6915, 472, 741, 478, 412, 371, 17, 293, 382, 291, 10559, 256, 670, 264, 992, 295, 957, 3547, 50840], "temperature": 0.0, "avg_logprob": -0.04251235644022624, "compression_ratio": 1.6, "no_speech_prob": 0.005729840137064457}, {"id": 2104, "seek": 1553452, "start": 15544.68, "end": 15553.32, "text": " you get all the points along the straight line through v1 and v2 this is very different than", "tokens": [50872, 291, 483, 439, 264, 2793, 2051, 264, 2997, 1622, 807, 371, 16, 293, 371, 17, 341, 307, 588, 819, 813, 51304], "temperature": 0.0, "avg_logprob": -0.04251235644022624, "compression_ratio": 1.6, "no_speech_prob": 0.005729840137064457}, {"id": 2105, "seek": 1553452, "start": 15553.32, "end": 15559.24, "text": " the set of all linear combinations of v1 and v2 because if let's say the zero vector were here", "tokens": [51304, 264, 992, 295, 439, 8213, 21267, 295, 371, 16, 293, 371, 17, 570, 498, 718, 311, 584, 264, 4018, 8062, 645, 510, 51600], "temperature": 0.0, "avg_logprob": -0.04251235644022624, "compression_ratio": 1.6, "no_speech_prob": 0.005729840137064457}, {"id": 2106, "seek": 1555924, "start": 15559.24, "end": 15567.8, "text": " then v1 would be this corresponding vector v2 would be this corresponding vector and all", "tokens": [50364, 550, 371, 16, 576, 312, 341, 11760, 8062, 371, 17, 576, 312, 341, 11760, 8062, 293, 439, 50792], "temperature": 0.0, "avg_logprob": -0.06312065046341693, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.014955909922719002}, {"id": 2107, "seek": 1555924, "start": 15567.8, "end": 15576.199999999999, "text": " linear combinations of these two vectors is actually the plane obtained from v1 and v2", "tokens": [50792, 8213, 21267, 295, 613, 732, 18875, 307, 767, 264, 5720, 14879, 490, 371, 16, 293, 371, 17, 51212], "temperature": 0.0, "avg_logprob": -0.06312065046341693, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.014955909922719002}, {"id": 2108, "seek": 1555924, "start": 15577.88, "end": 15584.199999999999, "text": " that's what the span of these two vectors are but all affine combinations is just this line", "tokens": [51296, 300, 311, 437, 264, 16174, 295, 613, 732, 18875, 366, 457, 439, 2096, 533, 21267, 307, 445, 341, 1622, 51612], "temperature": 0.0, "avg_logprob": -0.06312065046341693, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.014955909922719002}, {"id": 2109, "seek": 1558420, "start": 15584.84, "end": 15593.720000000001, "text": " and so just like we can define the span of vectors we can also define the affine span of vectors", "tokens": [50396, 293, 370, 445, 411, 321, 393, 6964, 264, 16174, 295, 18875, 321, 393, 611, 6964, 264, 2096, 533, 16174, 295, 18875, 50840], "temperature": 0.0, "avg_logprob": -0.1339412021636963, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.006097223609685898}, {"id": 2110, "seek": 1558420, "start": 15594.52, "end": 15597.800000000001, "text": " so the affine span", "tokens": [50880, 370, 264, 2096, 533, 16174, 51044], "temperature": 0.0, "avg_logprob": -0.1339412021636963, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.006097223609685898}, {"id": 2111, "seek": 1558420, "start": 15601.720000000001, "end": 15608.2, "text": " of the vectors v1 through vk is and we denote it by aff", "tokens": [51240, 295, 264, 18875, 371, 16, 807, 371, 74, 307, 293, 321, 45708, 309, 538, 3238, 69, 51564], "temperature": 0.0, "avg_logprob": -0.1339412021636963, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.006097223609685898}, {"id": 2112, "seek": 1560820, "start": 15608.2, "end": 15620.2, "text": " and it's defined to be the set of all affine combinations so the set of all", "tokens": [50364, 293, 309, 311, 7642, 281, 312, 264, 992, 295, 439, 2096, 533, 21267, 370, 264, 992, 295, 439, 50964], "temperature": 0.0, "avg_logprob": -0.12985639572143554, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.004609288647770882}, {"id": 2113, "seek": 1560820, "start": 15622.44, "end": 15633.960000000001, "text": " lambda j vj such that all of the lambda j's are in r and the sum of them equals one", "tokens": [51076, 13607, 361, 371, 73, 1270, 300, 439, 295, 264, 13607, 361, 311, 366, 294, 367, 293, 264, 2408, 295, 552, 6915, 472, 51652], "temperature": 0.0, "avg_logprob": -0.12985639572143554, "compression_ratio": 1.5142857142857142, "no_speech_prob": 0.004609288647770882}, {"id": 2114, "seek": 1563820, "start": 15638.44, "end": 15648.68, "text": " so let's look at another example where we take three vectors so let's say v1 v2 v3", "tokens": [50376, 370, 718, 311, 574, 412, 1071, 1365, 689, 321, 747, 1045, 18875, 370, 718, 311, 584, 371, 16, 371, 17, 371, 18, 50888], "temperature": 0.0, "avg_logprob": -0.08499928443662581, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.00033534382237121463}, {"id": 2115, "seek": 1563820, "start": 15650.12, "end": 15655.08, "text": " and let's just be concrete and let's say we're in r3 so that we can visualize this a little bit", "tokens": [50960, 293, 718, 311, 445, 312, 9859, 293, 718, 311, 584, 321, 434, 294, 367, 18, 370, 300, 321, 393, 23273, 341, 257, 707, 857, 51208], "temperature": 0.0, "avg_logprob": -0.08499928443662581, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.00033534382237121463}, {"id": 2116, "seek": 1563820, "start": 15655.08, "end": 15664.04, "text": " better so there are several cases that we can take just like for linear combinations for instance if", "tokens": [51208, 1101, 370, 456, 366, 2940, 3331, 300, 321, 393, 747, 445, 411, 337, 8213, 21267, 337, 5197, 498, 51656], "temperature": 0.0, "avg_logprob": -0.08499928443662581, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.00033534382237121463}, {"id": 2117, "seek": 1563820, "start": 15664.04, "end": 15668.12, "text": " one of these vectors was a linear combination of the other then the span of this would be a plane", "tokens": [51656, 472, 295, 613, 18875, 390, 257, 8213, 6562, 295, 264, 661, 550, 264, 16174, 295, 341, 576, 312, 257, 5720, 51860], "temperature": 0.0, "avg_logprob": -0.08499928443662581, "compression_ratio": 1.8038277511961722, "no_speech_prob": 0.00033534382237121463}, {"id": 2118, "seek": 1566820, "start": 15668.52, "end": 15672.12, "text": " and if all of them are scaled on multiples of each other then the span is a line", "tokens": [50380, 293, 498, 439, 295, 552, 366, 36039, 322, 46099, 295, 1184, 661, 550, 264, 16174, 307, 257, 1622, 50560], "temperature": 0.0, "avg_logprob": -0.0644861117447957, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0021155248396098614}, {"id": 2119, "seek": 1566820, "start": 15672.68, "end": 15678.52, "text": " and if they are all the zero vector then we just get the zero vector and if they're all", "tokens": [50588, 293, 498, 436, 366, 439, 264, 4018, 8062, 550, 321, 445, 483, 264, 4018, 8062, 293, 498, 436, 434, 439, 50880], "temperature": 0.0, "avg_logprob": -0.0644861117447957, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0021155248396098614}, {"id": 2120, "seek": 1566820, "start": 15678.52, "end": 15682.52, "text": " linearly independent then we get all of r3 there are many different cases depending on the", "tokens": [50880, 43586, 6695, 550, 321, 483, 439, 295, 367, 18, 456, 366, 867, 819, 3331, 5413, 322, 264, 51080], "temperature": 0.0, "avg_logprob": -0.0644861117447957, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0021155248396098614}, {"id": 2121, "seek": 1566820, "start": 15682.52, "end": 15689.240000000002, "text": " relationships between v1 through v3 same thing happens for affine span in the sense that it", "tokens": [51080, 6159, 1296, 371, 16, 807, 371, 18, 912, 551, 2314, 337, 2096, 533, 16174, 294, 264, 2020, 300, 309, 51416], "temperature": 0.0, "avg_logprob": -0.0644861117447957, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0021155248396098614}, {"id": 2122, "seek": 1566820, "start": 15689.240000000002, "end": 15693.08, "text": " depends on how these vectors are related so let's look at three possible cases", "tokens": [51416, 5946, 322, 577, 613, 18875, 366, 4077, 370, 718, 311, 574, 412, 1045, 1944, 3331, 51608], "temperature": 0.0, "avg_logprob": -0.0644861117447957, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.0021155248396098614}, {"id": 2123, "seek": 1569308, "start": 15693.88, "end": 15699.4, "text": " so case one let's say v1 v2 and v3", "tokens": [50404, 370, 1389, 472, 718, 311, 584, 371, 16, 371, 17, 293, 371, 18, 50680], "temperature": 0.0, "avg_logprob": -0.10568823743222365, "compression_ratio": 1.52, "no_speech_prob": 0.0043313829228281975}, {"id": 2124, "seek": 1569308, "start": 15701.48, "end": 15711.08, "text": " are not collinear so this means that all these three points don't lie on the same line so maybe", "tokens": [50784, 366, 406, 1263, 533, 289, 370, 341, 1355, 300, 439, 613, 1045, 2793, 500, 380, 4544, 322, 264, 912, 1622, 370, 1310, 51264], "temperature": 0.0, "avg_logprob": -0.10568823743222365, "compression_ratio": 1.52, "no_speech_prob": 0.0043313829228281975}, {"id": 2125, "seek": 1569308, "start": 15711.08, "end": 15717.08, "text": " they look something like this like for instance you can take the unit vectors e1 e2 and e3 and r3", "tokens": [51264, 436, 574, 746, 411, 341, 411, 337, 5197, 291, 393, 747, 264, 4985, 18875, 308, 16, 308, 17, 293, 308, 18, 293, 367, 18, 51564], "temperature": 0.0, "avg_logprob": -0.10568823743222365, "compression_ratio": 1.52, "no_speech_prob": 0.0043313829228281975}, {"id": 2126, "seek": 1571708, "start": 15717.32, "end": 15728.2, "text": " then the affine span of these three vectors is equal to the two-dimensional plane", "tokens": [50376, 550, 264, 2096, 533, 16174, 295, 613, 1045, 18875, 307, 2681, 281, 264, 732, 12, 18759, 5720, 50920], "temperature": 0.0, "avg_logprob": -0.1443473534150557, "compression_ratio": 1.4330708661417322, "no_speech_prob": 0.010652020573616028}, {"id": 2127, "seek": 1571708, "start": 15731.96, "end": 15735.96, "text": " containing these vectors", "tokens": [51108, 19273, 613, 18875, 51308], "temperature": 0.0, "avg_logprob": -0.1443473534150557, "compression_ratio": 1.4330708661417322, "no_speech_prob": 0.010652020573616028}, {"id": 2128, "seek": 1571708, "start": 15741.0, "end": 15744.52, "text": " and it's not so immediately obvious that that's what happens but let's just", "tokens": [51560, 293, 309, 311, 406, 370, 4258, 6322, 300, 300, 311, 437, 2314, 457, 718, 311, 445, 51736], "temperature": 0.0, "avg_logprob": -0.1443473534150557, "compression_ratio": 1.4330708661417322, "no_speech_prob": 0.010652020573616028}, {"id": 2129, "seek": 1574452, "start": 15745.16, "end": 15751.4, "text": " think about this if we take v1 and v2 then it includes the affine span", "tokens": [50396, 519, 466, 341, 498, 321, 747, 371, 16, 293, 371, 17, 550, 309, 5974, 264, 2096, 533, 16174, 50708], "temperature": 0.0, "avg_logprob": -0.05732423994276259, "compression_ratio": 2.022598870056497, "no_speech_prob": 0.004609245341271162}, {"id": 2130, "seek": 1574452, "start": 15753.24, "end": 15760.84, "text": " of these two vectors which means we have this line through these two vectors is in our affine span", "tokens": [50800, 295, 613, 732, 18875, 597, 1355, 321, 362, 341, 1622, 807, 613, 732, 18875, 307, 294, 527, 2096, 533, 16174, 51180], "temperature": 0.0, "avg_logprob": -0.05732423994276259, "compression_ratio": 2.022598870056497, "no_speech_prob": 0.004609245341271162}, {"id": 2131, "seek": 1574452, "start": 15760.84, "end": 15768.6, "text": " and likewise the line through v2 and v3 is here likewise the line v1 through v3 is here", "tokens": [51180, 293, 32407, 264, 1622, 807, 371, 17, 293, 371, 18, 307, 510, 32407, 264, 1622, 371, 16, 807, 371, 18, 307, 510, 51568], "temperature": 0.0, "avg_logprob": -0.05732423994276259, "compression_ratio": 2.022598870056497, "no_speech_prob": 0.004609245341271162}, {"id": 2132, "seek": 1574452, "start": 15769.720000000001, "end": 15774.04, "text": " and now that we have all of these lines in here we can also take affine combinations of these points", "tokens": [51624, 293, 586, 300, 321, 362, 439, 295, 613, 3876, 294, 510, 321, 393, 611, 747, 2096, 533, 21267, 295, 613, 2793, 51840], "temperature": 0.0, "avg_logprob": -0.05732423994276259, "compression_ratio": 2.022598870056497, "no_speech_prob": 0.004609245341271162}, {"id": 2133, "seek": 1577452, "start": 15774.6, "end": 15777.720000000001, "text": " so you can take for instance the affine combination of this point with this point", "tokens": [50368, 370, 291, 393, 747, 337, 5197, 264, 2096, 533, 6562, 295, 341, 935, 365, 341, 935, 50524], "temperature": 0.0, "avg_logprob": -0.05881905882325891, "compression_ratio": 2.141025641025641, "no_speech_prob": 0.00041729724034667015}, {"id": 2134, "seek": 1577452, "start": 15777.720000000001, "end": 15782.36, "text": " which gives us this line this point with this point which gives us this line", "tokens": [50524, 597, 2709, 505, 341, 1622, 341, 935, 365, 341, 935, 597, 2709, 505, 341, 1622, 50756], "temperature": 0.0, "avg_logprob": -0.05881905882325891, "compression_ratio": 2.141025641025641, "no_speech_prob": 0.00041729724034667015}, {"id": 2135, "seek": 1577452, "start": 15782.36, "end": 15786.36, "text": " and you can see by taking all such combinations all such affine combinations", "tokens": [50756, 293, 291, 393, 536, 538, 1940, 439, 1270, 21267, 439, 1270, 2096, 533, 21267, 50956], "temperature": 0.0, "avg_logprob": -0.05881905882325891, "compression_ratio": 2.141025641025641, "no_speech_prob": 0.00041729724034667015}, {"id": 2136, "seek": 1577452, "start": 15786.36, "end": 15793.0, "text": " of these three vectors we can actually get any point in the plane that contains these three points", "tokens": [50956, 295, 613, 1045, 18875, 321, 393, 767, 483, 604, 935, 294, 264, 5720, 300, 8306, 613, 1045, 2793, 51288], "temperature": 0.0, "avg_logprob": -0.05881905882325891, "compression_ratio": 2.141025641025641, "no_speech_prob": 0.00041729724034667015}, {"id": 2137, "seek": 1579300, "start": 15793.24, "end": 15797.48, "text": " in case two", "tokens": [50376, 294, 1389, 732, 50588], "temperature": 0.0, "avg_logprob": -0.20225849151611328, "compression_ratio": 1.1066666666666667, "no_speech_prob": 0.024421442300081253}, {"id": 2138, "seek": 1579300, "start": 15800.04, "end": 15803.96, "text": " let's imagine that v1 v2 v3 are collinear", "tokens": [50716, 718, 311, 3811, 300, 371, 16, 371, 17, 371, 18, 366, 1263, 533, 289, 50912], "temperature": 0.0, "avg_logprob": -0.20225849151611328, "compression_ratio": 1.1066666666666667, "no_speech_prob": 0.024421442300081253}, {"id": 2139, "seek": 1579300, "start": 15808.04, "end": 15808.28, "text": " but", "tokens": [51116, 457, 51128], "temperature": 0.0, "avg_logprob": -0.20225849151611328, "compression_ratio": 1.1066666666666667, "no_speech_prob": 0.024421442300081253}, {"id": 2140, "seek": 1579300, "start": 15811.24, "end": 15812.04, "text": " at least two", "tokens": [51276, 412, 1935, 732, 51316], "temperature": 0.0, "avg_logprob": -0.20225849151611328, "compression_ratio": 1.1066666666666667, "no_speech_prob": 0.024421442300081253}, {"id": 2141, "seek": 1579300, "start": 15815.56, "end": 15816.28, "text": " are distinct", "tokens": [51492, 366, 10644, 51528], "temperature": 0.0, "avg_logprob": -0.20225849151611328, "compression_ratio": 1.1066666666666667, "no_speech_prob": 0.024421442300081253}, {"id": 2142, "seek": 1581628, "start": 15816.68, "end": 15826.12, "text": " so in this case so i'm assuming that at least two so either the possibilities are something like", "tokens": [50384, 370, 294, 341, 1389, 370, 741, 478, 11926, 300, 412, 1935, 732, 370, 2139, 264, 12178, 366, 746, 411, 50856], "temperature": 0.0, "avg_logprob": -0.1079662249638484, "compression_ratio": 1.7289156626506024, "no_speech_prob": 0.0015977687435224652}, {"id": 2143, "seek": 1581628, "start": 15826.12, "end": 15832.12, "text": " they're all different but they lie on the same line in which case the affine span of these three", "tokens": [50856, 436, 434, 439, 819, 457, 436, 4544, 322, 264, 912, 1622, 294, 597, 1389, 264, 2096, 533, 16174, 295, 613, 1045, 51156], "temperature": 0.0, "avg_logprob": -0.1079662249638484, "compression_ratio": 1.7289156626506024, "no_speech_prob": 0.0015977687435224652}, {"id": 2144, "seek": 1581628, "start": 15832.12, "end": 15839.400000000001, "text": " points is equal to the straight line through those two points those three points or the other", "tokens": [51156, 2793, 307, 2681, 281, 264, 2997, 1622, 807, 729, 732, 2793, 729, 1045, 2793, 420, 264, 661, 51520], "temperature": 0.0, "avg_logprob": -0.1079662249638484, "compression_ratio": 1.7289156626506024, "no_speech_prob": 0.0015977687435224652}, {"id": 2145, "seek": 1583940, "start": 15839.4, "end": 15846.039999999999, "text": " cases the affine span if two of them happen to coincide then we just have two points", "tokens": [50364, 3331, 264, 2096, 533, 16174, 498, 732, 295, 552, 1051, 281, 13001, 482, 550, 321, 445, 362, 732, 2793, 50696], "temperature": 0.0, "avg_logprob": -0.07105957137213813, "compression_ratio": 1.6723163841807909, "no_speech_prob": 0.009411890991032124}, {"id": 2146, "seek": 1583940, "start": 15846.92, "end": 15852.359999999999, "text": " but i'm assuming that they're collinear and at least two are distinct so we also get the", "tokens": [50740, 457, 741, 478, 11926, 300, 436, 434, 1263, 533, 289, 293, 412, 1935, 732, 366, 10644, 370, 321, 611, 483, 264, 51012], "temperature": 0.0, "avg_logprob": -0.07105957137213813, "compression_ratio": 1.6723163841807909, "no_speech_prob": 0.009411890991032124}, {"id": 2147, "seek": 1583940, "start": 15852.359999999999, "end": 15858.359999999999, "text": " straight line through those two points and the final case case three", "tokens": [51012, 2997, 1622, 807, 729, 732, 2793, 293, 264, 2572, 1389, 1389, 1045, 51312], "temperature": 0.0, "avg_logprob": -0.07105957137213813, "compression_ratio": 1.6723163841807909, "no_speech_prob": 0.009411890991032124}, {"id": 2148, "seek": 1583940, "start": 15860.68, "end": 15864.6, "text": " is when all those vectors are exactly the same vector", "tokens": [51428, 307, 562, 439, 729, 18875, 366, 2293, 264, 912, 8062, 51624], "temperature": 0.0, "avg_logprob": -0.07105957137213813, "compression_ratio": 1.6723163841807909, "no_speech_prob": 0.009411890991032124}, {"id": 2149, "seek": 1586460, "start": 15865.24, "end": 15874.6, "text": " and when this happens we only have a single point and all affine combinations of a single point", "tokens": [50396, 293, 562, 341, 2314, 321, 787, 362, 257, 2167, 935, 293, 439, 2096, 533, 21267, 295, 257, 2167, 935, 50864], "temperature": 0.0, "avg_logprob": -0.09094375948752126, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0018100646557286382}, {"id": 2150, "seek": 1586460, "start": 15879.32, "end": 15884.84, "text": " is just that point itself so these are some of the basic constructions that you can do with", "tokens": [51100, 307, 445, 300, 935, 2564, 370, 613, 366, 512, 295, 264, 3875, 7690, 626, 300, 291, 393, 360, 365, 51376], "temperature": 0.0, "avg_logprob": -0.09094375948752126, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0018100646557286382}, {"id": 2151, "seek": 1586460, "start": 15884.84, "end": 15890.12, "text": " vectors besides just taking linear combinations you can also take affine combinations there's yet", "tokens": [51376, 18875, 11868, 445, 1940, 8213, 21267, 291, 393, 611, 747, 2096, 533, 21267, 456, 311, 1939, 51640], "temperature": 0.0, "avg_logprob": -0.09094375948752126, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0018100646557286382}, {"id": 2152, "seek": 1589012, "start": 15890.12, "end": 15896.2, "text": " another type which we won't discuss is if you require that the sum of these coefficients adds", "tokens": [50364, 1071, 2010, 597, 321, 1582, 380, 2248, 307, 498, 291, 3651, 300, 264, 2408, 295, 613, 31994, 10860, 50668], "temperature": 0.0, "avg_logprob": -0.04953141384814159, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004467974416911602}, {"id": 2153, "seek": 1589012, "start": 15896.2, "end": 15903.240000000002, "text": " up to one but they're also not just real numbers but they're strictly non-negative so they have to", "tokens": [50668, 493, 281, 472, 457, 436, 434, 611, 406, 445, 957, 3547, 457, 436, 434, 20792, 2107, 12, 28561, 1166, 370, 436, 362, 281, 51020], "temperature": 0.0, "avg_logprob": -0.04953141384814159, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004467974416911602}, {"id": 2154, "seek": 1589012, "start": 15903.240000000002, "end": 15909.160000000002, "text": " be at least zero and that's called a convex combination which is a closely related idea", "tokens": [51020, 312, 412, 1935, 4018, 293, 300, 311, 1219, 257, 42432, 6562, 597, 307, 257, 8185, 4077, 1558, 51316], "temperature": 0.0, "avg_logprob": -0.04953141384814159, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004467974416911602}, {"id": 2155, "seek": 1589012, "start": 15910.44, "end": 15916.76, "text": " and in the case of these three vectors for instance it would be the triangle", "tokens": [51380, 293, 294, 264, 1389, 295, 613, 1045, 18875, 337, 5197, 309, 576, 312, 264, 13369, 51696], "temperature": 0.0, "avg_logprob": -0.04953141384814159, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.004467974416911602}, {"id": 2156, "seek": 1591676, "start": 15917.64, "end": 15926.92, "text": " who's three vertices are those three vectors that we had here and in this case if we took", "tokens": [50408, 567, 311, 1045, 32053, 366, 729, 1045, 18875, 300, 321, 632, 510, 293, 294, 341, 1389, 498, 321, 1890, 50872], "temperature": 0.0, "avg_logprob": -0.13811179569789342, "compression_ratio": 1.7579617834394905, "no_speech_prob": 0.0024724742397665977}, {"id": 2157, "seek": 1591676, "start": 15926.92, "end": 15935.64, "text": " convex combinations it would be the interval between these two farthest end points and in this case", "tokens": [50872, 42432, 21267, 309, 576, 312, 264, 15035, 1296, 613, 732, 1400, 36356, 917, 2793, 293, 294, 341, 1389, 51308], "temperature": 0.0, "avg_logprob": -0.13811179569789342, "compression_ratio": 1.7579617834394905, "no_speech_prob": 0.0024724742397665977}, {"id": 2158, "seek": 1591676, "start": 15936.76, "end": 15941.56, "text": " we would have the same situation as we had here where we would just get a single point", "tokens": [51364, 321, 576, 362, 264, 912, 2590, 382, 321, 632, 510, 689, 321, 576, 445, 483, 257, 2167, 935, 51604], "temperature": 0.0, "avg_logprob": -0.13811179569789342, "compression_ratio": 1.7579617834394905, "no_speech_prob": 0.0024724742397665977}, {"id": 2159, "seek": 1594156, "start": 15942.439999999999, "end": 15949.72, "text": " a common question that we ask given a set of vectors is if we have another vector when is", "tokens": [50408, 257, 2689, 1168, 300, 321, 1029, 2212, 257, 992, 295, 18875, 307, 498, 321, 362, 1071, 8062, 562, 307, 50772], "temperature": 0.0, "avg_logprob": -0.06674553627191587, "compression_ratio": 1.816425120772947, "no_speech_prob": 0.0012842128053307533}, {"id": 2160, "seek": 1594156, "start": 15949.72, "end": 15955.8, "text": " that vector in the span of those vectors and this shows up for instance if we solve a homogeneous", "tokens": [50772, 300, 8062, 294, 264, 16174, 295, 729, 18875, 293, 341, 3110, 493, 337, 5197, 498, 321, 5039, 257, 42632, 51076], "temperature": 0.0, "avg_logprob": -0.06674553627191587, "compression_ratio": 1.816425120772947, "no_speech_prob": 0.0012842128053307533}, {"id": 2161, "seek": 1594156, "start": 15955.8, "end": 15962.119999999999, "text": " linear system and we have a bunch of solutions that we know are actually solving that system", "tokens": [51076, 8213, 1185, 293, 321, 362, 257, 3840, 295, 6547, 300, 321, 458, 366, 767, 12606, 300, 1185, 51392], "temperature": 0.0, "avg_logprob": -0.06674553627191587, "compression_ratio": 1.816425120772947, "no_speech_prob": 0.0012842128053307533}, {"id": 2162, "seek": 1594156, "start": 15962.119999999999, "end": 15966.68, "text": " but let's say we don't know exactly what that system is we just know we have this collection of", "tokens": [51392, 457, 718, 311, 584, 321, 500, 380, 458, 2293, 437, 300, 1185, 307, 321, 445, 458, 321, 362, 341, 5765, 295, 51620], "temperature": 0.0, "avg_logprob": -0.06674553627191587, "compression_ratio": 1.816425120772947, "no_speech_prob": 0.0012842128053307533}, {"id": 2163, "seek": 1596668, "start": 15966.68, "end": 15972.76, "text": " solutions and if somebody hands us another vector then we can ask is that vector", "tokens": [50364, 6547, 293, 498, 2618, 2377, 505, 1071, 8062, 550, 321, 393, 1029, 307, 300, 8062, 50668], "temperature": 0.0, "avg_logprob": -0.04981799017299305, "compression_ratio": 2.1834319526627217, "no_speech_prob": 0.015422466211020947}, {"id": 2164, "seek": 1596668, "start": 15973.720000000001, "end": 15979.08, "text": " a definitely a solution of the system that we have and in this case since we don't know the", "tokens": [50716, 257, 2138, 257, 3827, 295, 264, 1185, 300, 321, 362, 293, 294, 341, 1389, 1670, 321, 500, 380, 458, 264, 50984], "temperature": 0.0, "avg_logprob": -0.04981799017299305, "compression_ratio": 2.1834319526627217, "no_speech_prob": 0.015422466211020947}, {"id": 2165, "seek": 1596668, "start": 15979.08, "end": 15985.4, "text": " system we can't plug in that vector to check instead what we have to do is check if that vector is", "tokens": [50984, 1185, 321, 393, 380, 5452, 294, 300, 8062, 281, 1520, 2602, 437, 321, 362, 281, 360, 307, 1520, 498, 300, 8062, 307, 51300], "temperature": 0.0, "avg_logprob": -0.04981799017299305, "compression_ratio": 2.1834319526627217, "no_speech_prob": 0.015422466211020947}, {"id": 2166, "seek": 1596668, "start": 15985.4, "end": 15991.4, "text": " in the span of the vectors that we have already if that vector is in the span of the vectors that", "tokens": [51300, 294, 264, 16174, 295, 264, 18875, 300, 321, 362, 1217, 498, 300, 8062, 307, 294, 264, 16174, 295, 264, 18875, 300, 51600], "temperature": 0.0, "avg_logprob": -0.04981799017299305, "compression_ratio": 2.1834319526627217, "no_speech_prob": 0.015422466211020947}, {"id": 2167, "seek": 1599140, "start": 15991.4, "end": 15998.44, "text": " we already have then that vector is definitely a solution but it doesn't tell us that if it's not", "tokens": [50364, 321, 1217, 362, 550, 300, 8062, 307, 2138, 257, 3827, 457, 309, 1177, 380, 980, 505, 300, 498, 309, 311, 406, 50716], "temperature": 0.0, "avg_logprob": -0.05020144852724942, "compression_ratio": 1.931937172774869, "no_speech_prob": 0.039631735533475876}, {"id": 2168, "seek": 1599140, "start": 15998.44, "end": 16002.119999999999, "text": " in the span of those vectors and it's not a solution because we might not have had", "tokens": [50716, 294, 264, 16174, 295, 729, 18875, 293, 309, 311, 406, 257, 3827, 570, 321, 1062, 406, 362, 632, 50900], "temperature": 0.0, "avg_logprob": -0.05020144852724942, "compression_ratio": 1.931937172774869, "no_speech_prob": 0.039631735533475876}, {"id": 2169, "seek": 1599140, "start": 16002.92, "end": 16007.48, "text": " a set of vectors that span the solution set but at the very least it gives us a criteria for", "tokens": [50940, 257, 992, 295, 18875, 300, 16174, 264, 3827, 992, 457, 412, 264, 588, 1935, 309, 2709, 505, 257, 11101, 337, 51168], "temperature": 0.0, "avg_logprob": -0.05020144852724942, "compression_ratio": 1.931937172774869, "no_speech_prob": 0.039631735533475876}, {"id": 2170, "seek": 1599140, "start": 16009.48, "end": 16016.359999999999, "text": " guaranteeing that if that vector is in the span it's definitely a solution and likewise you can", "tokens": [51268, 10815, 278, 300, 498, 300, 8062, 307, 294, 264, 16174, 309, 311, 2138, 257, 3827, 293, 32407, 291, 393, 51612], "temperature": 0.0, "avg_logprob": -0.05020144852724942, "compression_ratio": 1.931937172774869, "no_speech_prob": 0.039631735533475876}, {"id": 2171, "seek": 1601636, "start": 16016.36, "end": 16022.68, "text": " ask well if I have a bunch of vectors that I happen to know solve an inhomogeneous equation", "tokens": [50364, 1029, 731, 498, 286, 362, 257, 3840, 295, 18875, 300, 286, 1051, 281, 458, 5039, 364, 47707, 298, 31112, 5367, 50680], "temperature": 0.0, "avg_logprob": -0.05509158281179575, "compression_ratio": 1.6264367816091954, "no_speech_prob": 0.22262366116046906}, {"id": 2172, "seek": 1601636, "start": 16022.68, "end": 16028.52, "text": " and somebody hands me another vector is there a similar criteria and there is and that involves", "tokens": [50680, 293, 2618, 2377, 385, 1071, 8062, 307, 456, 257, 2531, 11101, 293, 456, 307, 293, 300, 11626, 50972], "temperature": 0.0, "avg_logprob": -0.05509158281179575, "compression_ratio": 1.6264367816091954, "no_speech_prob": 0.22262366116046906}, {"id": 2173, "seek": 1601636, "start": 16028.52, "end": 16035.08, "text": " the notion of affine span which we talked about in the last video so the question that we could", "tokens": [50972, 264, 10710, 295, 2096, 533, 16174, 597, 321, 2825, 466, 294, 264, 1036, 960, 370, 264, 1168, 300, 321, 727, 51300], "temperature": 0.0, "avg_logprob": -0.05509158281179575, "compression_ratio": 1.6264367816091954, "no_speech_prob": 0.22262366116046906}, {"id": 2174, "seek": 1603508, "start": 16035.16, "end": 16046.2, "text": " ask is given vectors v1 through vk and another vector u in rn", "tokens": [50368, 1029, 307, 2212, 18875, 371, 16, 807, 371, 74, 293, 1071, 8062, 344, 294, 367, 77, 50920], "temperature": 0.0, "avg_logprob": -0.09754814599689685, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.10373717546463013}, {"id": 2175, "seek": 1603508, "start": 16048.28, "end": 16058.44, "text": " when is u in the affine span of these vectors v1 through vk", "tokens": [51024, 562, 307, 344, 294, 264, 2096, 533, 16174, 295, 613, 18875, 371, 16, 807, 371, 74, 51532], "temperature": 0.0, "avg_logprob": -0.09754814599689685, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.10373717546463013}, {"id": 2176, "seek": 1605844, "start": 16059.32, "end": 16067.560000000001, "text": " now in order for us to solve this problem then we have to be able to write u as a linear combination", "tokens": [50408, 586, 294, 1668, 337, 505, 281, 5039, 341, 1154, 550, 321, 362, 281, 312, 1075, 281, 2464, 344, 382, 257, 8213, 6562, 50820], "temperature": 0.0, "avg_logprob": -0.11525000792283278, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.008061313070356846}, {"id": 2177, "seek": 1605844, "start": 16069.800000000001, "end": 16080.92, "text": " of v1 through vk right but because it's an affine combination we have an additional", "tokens": [50932, 295, 371, 16, 807, 371, 74, 558, 457, 570, 309, 311, 364, 2096, 533, 6562, 321, 362, 364, 4497, 51488], "temperature": 0.0, "avg_logprob": -0.11525000792283278, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.008061313070356846}, {"id": 2178, "seek": 1605844, "start": 16080.92, "end": 16087.720000000001, "text": " constraint on what these coefficients could be and that constraint is that lambda 1 plus lambda k", "tokens": [51488, 25534, 322, 437, 613, 31994, 727, 312, 293, 300, 25534, 307, 300, 13607, 502, 1804, 13607, 350, 51828], "temperature": 0.0, "avg_logprob": -0.11525000792283278, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.008061313070356846}, {"id": 2179, "seek": 1608844, "start": 16089.32, "end": 16096.12, "text": " equals 1 which is also a linear system in the unknowns lambda 1 through lambda k", "tokens": [50408, 6915, 502, 597, 307, 611, 257, 8213, 1185, 294, 264, 46048, 13607, 502, 807, 13607, 350, 50748], "temperature": 0.0, "avg_logprob": -0.09033104351588658, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.0046091764234006405}, {"id": 2180, "seek": 1608844, "start": 16097.0, "end": 16102.36, "text": " and therefore if we want to solve this system this question is equivalent to", "tokens": [50792, 293, 4412, 498, 321, 528, 281, 5039, 341, 1185, 341, 1168, 307, 10344, 281, 51060], "temperature": 0.0, "avg_logprob": -0.09033104351588658, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.0046091764234006405}, {"id": 2181, "seek": 1608844, "start": 16109.16, "end": 16117.24, "text": " the following one which is is the augmented matrix where we take our vectors v1 through vk", "tokens": [51400, 264, 3480, 472, 597, 307, 307, 264, 36155, 8141, 689, 321, 747, 527, 18875, 371, 16, 807, 371, 74, 51804], "temperature": 0.0, "avg_logprob": -0.09033104351588658, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.0046091764234006405}, {"id": 2182, "seek": 1611844, "start": 16118.52, "end": 16124.6, "text": " and we can also write vk through vk through vk through vk through vk through vk through vk", "tokens": [50368, 293, 321, 393, 611, 2464, 371, 74, 807, 371, 74, 807, 371, 74, 807, 371, 74, 807, 371, 74, 807, 371, 74, 807, 371, 74, 50672], "temperature": 0.2, "avg_logprob": -0.30541378063159985, "compression_ratio": 2.021857923497268, "no_speech_prob": 0.0008295531151816249}, {"id": 2183, "seek": 1611844, "start": 16124.6, "end": 16130.84, "text": " augmented with the vector u but in addition augment this further by one additional row", "tokens": [50672, 36155, 365, 264, 8062, 344, 457, 294, 4500, 29919, 341, 3052, 538, 472, 4497, 5386, 50984], "temperature": 0.2, "avg_logprob": -0.30541378063159985, "compression_ratio": 2.021857923497268, "no_speech_prob": 0.0008295531151816249}, {"id": 2184, "seek": 1611844, "start": 16131.480000000001, "end": 16139.880000000001, "text": " stating that one equals so now this is the number one equals one dot dot dot one let me write this", "tokens": [51016, 26688, 300, 472, 6915, 370, 586, 341, 307, 264, 1230, 472, 6915, 472, 5893, 5893, 5893, 472, 718, 385, 2464, 341, 51436], "temperature": 0.2, "avg_logprob": -0.30541378063159985, "compression_ratio": 2.021857923497268, "no_speech_prob": 0.0008295531151816249}, {"id": 2185, "seek": 1611844, "start": 16139.880000000001, "end": 16144.92, "text": " one so it's clear so this vector is just denoting the fact that it could have several entries", "tokens": [51436, 472, 370, 309, 311, 1850, 370, 341, 8062, 307, 445, 1441, 17001, 264, 1186, 300, 309, 727, 362, 2940, 23041, 51688], "temperature": 0.2, "avg_logprob": -0.30541378063159985, "compression_ratio": 2.021857923497268, "no_speech_prob": 0.0008295531151816249}, {"id": 2186, "seek": 1614492, "start": 16145.88, "end": 16151.48, "text": " so we have an additional row in our augmented matrix and the question is is this consistent", "tokens": [50412, 370, 321, 362, 364, 4497, 5386, 294, 527, 36155, 8141, 293, 264, 1168, 307, 307, 341, 8398, 50692], "temperature": 0.0, "avg_logprob": -0.04170306423042394, "compression_ratio": 1.6958762886597938, "no_speech_prob": 0.0004305461188778281}, {"id": 2187, "seek": 1614492, "start": 16156.12, "end": 16159.56, "text": " so this is actually how we would solve such a problem and", "tokens": [50924, 370, 341, 307, 767, 577, 321, 576, 5039, 1270, 257, 1154, 293, 51096], "temperature": 0.0, "avg_logprob": -0.04170306423042394, "compression_ratio": 1.6958762886597938, "no_speech_prob": 0.0004305461188778281}, {"id": 2188, "seek": 1614492, "start": 16161.960000000001, "end": 16167.4, "text": " how does it show up in solving inhomogeneous systems we'll get to that after we talk about", "tokens": [51216, 577, 775, 309, 855, 493, 294, 12606, 47707, 298, 31112, 3652, 321, 603, 483, 281, 300, 934, 321, 751, 466, 51488], "temperature": 0.0, "avg_logprob": -0.04170306423042394, "compression_ratio": 1.6958762886597938, "no_speech_prob": 0.0004305461188778281}, {"id": 2189, "seek": 1614492, "start": 16167.4, "end": 16173.08, "text": " what an affine subspace is and the fact that the solution set of an inhomogeneous system", "tokens": [51488, 437, 364, 2096, 533, 2090, 17940, 307, 293, 264, 1186, 300, 264, 3827, 992, 295, 364, 47707, 298, 31112, 1185, 51772], "temperature": 0.0, "avg_logprob": -0.04170306423042394, "compression_ratio": 1.6958762886597938, "no_speech_prob": 0.0004305461188778281}, {"id": 2190, "seek": 1617308, "start": 16173.08, "end": 16178.44, "text": " is an affine subspace so for this let's just briefly recall", "tokens": [50364, 307, 364, 2096, 533, 2090, 17940, 370, 337, 341, 718, 311, 445, 10515, 9901, 50632], "temperature": 0.0, "avg_logprob": -0.11546206924150575, "compression_ratio": 1.623931623931624, "no_speech_prob": 0.01048804447054863}, {"id": 2191, "seek": 1617308, "start": 16181.48, "end": 16188.76, "text": " a vector subspace i'll put vector usually in parentheses but a vector subspace", "tokens": [50784, 257, 8062, 2090, 17940, 741, 603, 829, 8062, 2673, 294, 34153, 457, 257, 8062, 2090, 17940, 51148], "temperature": 0.0, "avg_logprob": -0.11546206924150575, "compression_ratio": 1.623931623931624, "no_speech_prob": 0.01048804447054863}, {"id": 2192, "seek": 1617308, "start": 16190.28, "end": 16198.12, "text": " of our n is a first of all a subset let's call it v", "tokens": [51224, 295, 527, 297, 307, 257, 700, 295, 439, 257, 25993, 718, 311, 818, 309, 371, 51616], "temperature": 0.0, "avg_logprob": -0.11546206924150575, "compression_ratio": 1.623931623931624, "no_speech_prob": 0.01048804447054863}, {"id": 2193, "seek": 1619812, "start": 16198.52, "end": 16206.2, "text": " such that three conditions hold now there are many equivalent ways to define such a thing", "tokens": [50384, 1270, 300, 1045, 4487, 1797, 586, 456, 366, 867, 10344, 2098, 281, 6964, 1270, 257, 551, 50768], "temperature": 0.0, "avg_logprob": -0.07170593927777003, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.005384553223848343}, {"id": 2194, "seek": 1619812, "start": 16206.2, "end": 16213.640000000001, "text": " but this one seems pretty concise and simple and the first condition is that the zero vector is in v", "tokens": [50768, 457, 341, 472, 2544, 1238, 44882, 293, 2199, 293, 264, 700, 4188, 307, 300, 264, 4018, 8062, 307, 294, 371, 51140], "temperature": 0.0, "avg_logprob": -0.07170593927777003, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.005384553223848343}, {"id": 2195, "seek": 1619812, "start": 16215.960000000001, "end": 16222.44, "text": " the second condition is that if you take a vector in v and you scale it by any number", "tokens": [51256, 264, 1150, 4188, 307, 300, 498, 291, 747, 257, 8062, 294, 371, 293, 291, 4373, 309, 538, 604, 1230, 51580], "temperature": 0.0, "avg_logprob": -0.07170593927777003, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.005384553223848343}, {"id": 2196, "seek": 1622244, "start": 16222.44, "end": 16231.16, "text": " then that scalar multiple is also in v so lambda v is in v provided that the vector v was in v to", "tokens": [50364, 550, 300, 39684, 3866, 307, 611, 294, 371, 370, 13607, 371, 307, 294, 371, 5649, 300, 264, 8062, 371, 390, 294, 371, 281, 50800], "temperature": 0.0, "avg_logprob": -0.0698786735534668, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.003483172971755266}, {"id": 2197, "seek": 1622244, "start": 16231.16, "end": 16241.880000000001, "text": " begin with and lambda is a real number and three the third condition is that if i take any two", "tokens": [50800, 1841, 365, 293, 13607, 307, 257, 957, 1230, 293, 1045, 264, 2636, 4188, 307, 300, 498, 741, 747, 604, 732, 51336], "temperature": 0.0, "avg_logprob": -0.0698786735534668, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.003483172971755266}, {"id": 2198, "seek": 1622244, "start": 16241.880000000001, "end": 16250.76, "text": " vectors in v then the sum of them are in v so let's write u plus v is in v for all pairs", "tokens": [51336, 18875, 294, 371, 550, 264, 2408, 295, 552, 366, 294, 371, 370, 718, 311, 2464, 344, 1804, 371, 307, 294, 371, 337, 439, 15494, 51780], "temperature": 0.0, "avg_logprob": -0.0698786735534668, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.003483172971755266}, {"id": 2199, "seek": 1625076, "start": 16250.76, "end": 16257.4, "text": " u and v that are already in v and this is what a vector subspace is", "tokens": [50364, 344, 293, 371, 300, 366, 1217, 294, 371, 293, 341, 307, 437, 257, 8062, 2090, 17940, 307, 50696], "temperature": 0.0, "avg_logprob": -0.05561321122305734, "compression_ratio": 1.7191780821917808, "no_speech_prob": 0.000503323448356241}, {"id": 2200, "seek": 1625076, "start": 16260.76, "end": 16267.800000000001, "text": " now this definition of a vector space is a little bit algebraic it's telling us when", "tokens": [50864, 586, 341, 7123, 295, 257, 8062, 1901, 307, 257, 707, 857, 21989, 299, 309, 311, 3585, 505, 562, 51216], "temperature": 0.0, "avg_logprob": -0.05561321122305734, "compression_ratio": 1.7191780821917808, "no_speech_prob": 0.000503323448356241}, {"id": 2201, "seek": 1625076, "start": 16267.800000000001, "end": 16273.4, "text": " certain vectors are in v and we can have a little bit more of a geometric interpretation of a what", "tokens": [51216, 1629, 18875, 366, 294, 371, 293, 321, 393, 362, 257, 707, 857, 544, 295, 257, 33246, 14174, 295, 257, 437, 51496], "temperature": 0.0, "avg_logprob": -0.05561321122305734, "compression_ratio": 1.7191780821917808, "no_speech_prob": 0.000503323448356241}, {"id": 2202, "seek": 1627340, "start": 16273.4, "end": 16286.279999999999, "text": " a vector subspace is by using affine combinations so equivalently v satisfies", "tokens": [50364, 257, 8062, 2090, 17940, 307, 538, 1228, 2096, 533, 21267, 370, 9052, 2276, 371, 44271, 51008], "temperature": 0.0, "avg_logprob": -0.05182178570674016, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.003707178868353367}, {"id": 2203, "seek": 1627340, "start": 16288.119999999999, "end": 16291.8, "text": " which means that if v satisfies the following conditions i'm about to write then it satisfies", "tokens": [51100, 597, 1355, 300, 498, 371, 44271, 264, 3480, 4487, 741, 478, 466, 281, 2464, 550, 309, 44271, 51284], "temperature": 0.0, "avg_logprob": -0.05182178570674016, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.003707178868353367}, {"id": 2204, "seek": 1627340, "start": 16291.8, "end": 16299.08, "text": " this one and conversely let's call it instead of i and two so let's use i because the first one's the", "tokens": [51284, 341, 472, 293, 2615, 736, 718, 311, 818, 309, 2602, 295, 741, 293, 732, 370, 718, 311, 764, 741, 570, 264, 700, 472, 311, 264, 51648], "temperature": 0.0, "avg_logprob": -0.05182178570674016, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.003707178868353367}, {"id": 2205, "seek": 1629908, "start": 16299.08, "end": 16305.32, "text": " same the zero vector is in v and the second condition which is sort of a combination of these", "tokens": [50364, 912, 264, 4018, 8062, 307, 294, 371, 293, 264, 1150, 4188, 597, 307, 1333, 295, 257, 6562, 295, 613, 50676], "temperature": 0.0, "avg_logprob": -0.08660239922372918, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008577168919146061}, {"id": 2206, "seek": 1629908, "start": 16305.32, "end": 16320.039999999999, "text": " two is that t u plus one minus t v is in v for all t in real numbers and for all u and v in v", "tokens": [50676, 732, 307, 300, 256, 344, 1804, 472, 3175, 256, 371, 307, 294, 371, 337, 439, 256, 294, 957, 3547, 293, 337, 439, 344, 293, 371, 294, 371, 51412], "temperature": 0.0, "avg_logprob": -0.08660239922372918, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008577168919146061}, {"id": 2207, "seek": 1629908, "start": 16322.039999999999, "end": 16327.48, "text": " now this is exactly a linear combination of the vectors u and v so if i take two vectors u and v", "tokens": [51512, 586, 341, 307, 2293, 257, 8213, 6562, 295, 264, 18875, 344, 293, 371, 370, 498, 741, 747, 732, 18875, 344, 293, 371, 51784], "temperature": 0.0, "avg_logprob": -0.08660239922372918, "compression_ratio": 1.8205128205128205, "no_speech_prob": 0.008577168919146061}, {"id": 2208, "seek": 1632748, "start": 16328.279999999999, "end": 16333.48, "text": " inside of v then this affine combination is describing the set of all points", "tokens": [50404, 1854, 295, 371, 550, 341, 2096, 533, 6562, 307, 16141, 264, 992, 295, 439, 2793, 50664], "temperature": 0.0, "avg_logprob": -0.04450861200109705, "compression_ratio": 1.86096256684492, "no_speech_prob": 0.0019876351580023766}, {"id": 2209, "seek": 1632748, "start": 16334.279999999999, "end": 16339.96, "text": " along the straight line through those two vectors so this is saying that a subspace", "tokens": [50704, 2051, 264, 2997, 1622, 807, 729, 732, 18875, 370, 341, 307, 1566, 300, 257, 2090, 17940, 50988], "temperature": 0.0, "avg_logprob": -0.04450861200109705, "compression_ratio": 1.86096256684492, "no_speech_prob": 0.0019876351580023766}, {"id": 2210, "seek": 1632748, "start": 16340.52, "end": 16348.119999999999, "text": " can also be described as a plane that contains the zero vector and plane could mean hyper plane", "tokens": [51016, 393, 611, 312, 7619, 382, 257, 5720, 300, 8306, 264, 4018, 8062, 293, 5720, 727, 914, 9848, 5720, 51396], "temperature": 0.0, "avg_logprob": -0.04450861200109705, "compression_ratio": 1.86096256684492, "no_speech_prob": 0.0019876351580023766}, {"id": 2211, "seek": 1632748, "start": 16348.119999999999, "end": 16352.76, "text": " and this is because we always have the straight line through any two points in our subspace", "tokens": [51396, 293, 341, 307, 570, 321, 1009, 362, 264, 2997, 1622, 807, 604, 732, 2793, 294, 527, 2090, 17940, 51628], "temperature": 0.0, "avg_logprob": -0.04450861200109705, "compression_ratio": 1.86096256684492, "no_speech_prob": 0.0019876351580023766}, {"id": 2212, "seek": 1635276, "start": 16353.32, "end": 16358.92, "text": " now the fact that we've written it this way allows us to define an affine subspace", "tokens": [50392, 586, 264, 1186, 300, 321, 600, 3720, 309, 341, 636, 4045, 505, 281, 6964, 364, 2096, 533, 2090, 17940, 50672], "temperature": 0.0, "avg_logprob": -0.07611909779635342, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.0052198683843016624}, {"id": 2213, "seek": 1635276, "start": 16359.64, "end": 16365.24, "text": " in a much more closely related fashion to this definition because for an affine subspace we'll", "tokens": [50708, 294, 257, 709, 544, 8185, 4077, 6700, 281, 341, 7123, 570, 337, 364, 2096, 533, 2090, 17940, 321, 603, 50988], "temperature": 0.0, "avg_logprob": -0.07611909779635342, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.0052198683843016624}, {"id": 2214, "seek": 1635276, "start": 16365.24, "end": 16373.24, "text": " only be able to combine combine vectors in an affine way so we define an affine subspace", "tokens": [50988, 787, 312, 1075, 281, 10432, 10432, 18875, 294, 364, 2096, 533, 636, 370, 321, 6964, 364, 2096, 533, 2090, 17940, 51388], "temperature": 0.0, "avg_logprob": -0.07611909779635342, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.0052198683843016624}, {"id": 2215, "seek": 1637324, "start": 16373.8, "end": 16388.92, "text": " is a subset a of r n such that and now we drop this first condition so all we require", "tokens": [50392, 307, 257, 25993, 257, 295, 367, 297, 1270, 300, 293, 586, 321, 3270, 341, 700, 4188, 370, 439, 321, 3651, 51148], "temperature": 0.0, "avg_logprob": -0.13429152170817057, "compression_ratio": 1.4453781512605042, "no_speech_prob": 0.020963191986083984}, {"id": 2216, "seek": 1637324, "start": 16388.92, "end": 16396.6, "text": " is that affine combinations of two vectors are always inside so t u plus one minus t v", "tokens": [51148, 307, 300, 2096, 533, 21267, 295, 732, 18875, 366, 1009, 1854, 370, 256, 344, 1804, 472, 3175, 256, 371, 51532], "temperature": 0.0, "avg_logprob": -0.13429152170817057, "compression_ratio": 1.4453781512605042, "no_speech_prob": 0.020963191986083984}, {"id": 2217, "seek": 1639660, "start": 16396.6, "end": 16401.32, "text": " are in v for all same conditions as here", "tokens": [50364, 366, 294, 371, 337, 439, 912, 4487, 382, 510, 50600], "temperature": 0.0, "avg_logprob": -0.06999980228047975, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.002182641299441457}, {"id": 2218, "seek": 1639660, "start": 16404.28, "end": 16409.399999999998, "text": " and you can ask well maybe an affine subspace should be if i take any collection of points", "tokens": [50748, 293, 291, 393, 1029, 731, 1310, 364, 2096, 533, 2090, 17940, 820, 312, 498, 741, 747, 604, 5765, 295, 2793, 51004], "temperature": 0.0, "avg_logprob": -0.06999980228047975, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.002182641299441457}, {"id": 2219, "seek": 1639660, "start": 16409.399999999998, "end": 16415.719999999998, "text": " inside of it then the affine span of those points is inside of v and that actually follows", "tokens": [51004, 1854, 295, 309, 550, 264, 2096, 533, 16174, 295, 729, 2793, 307, 1854, 295, 371, 293, 300, 767, 10002, 51320], "temperature": 0.0, "avg_logprob": -0.06999980228047975, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.002182641299441457}, {"id": 2220, "seek": 1639660, "start": 16415.719999999998, "end": 16421.559999999998, "text": " from this condition and the usual properties of scalar multiplication and vector spaces", "tokens": [51320, 490, 341, 4188, 293, 264, 7713, 7221, 295, 39684, 27290, 293, 8062, 7673, 51612], "temperature": 0.0, "avg_logprob": -0.06999980228047975, "compression_ratio": 1.7318435754189945, "no_speech_prob": 0.002182641299441457}, {"id": 2221, "seek": 1642156, "start": 16421.56, "end": 16430.84, "text": " and how you add them so the main example that we want to illustrate is the solution set", "tokens": [50364, 293, 577, 291, 909, 552, 370, 264, 2135, 1365, 300, 321, 528, 281, 23221, 307, 264, 3827, 992, 50828], "temperature": 0.0, "avg_logprob": -0.0806187885563548, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.0044680992141366005}, {"id": 2222, "seek": 1642156, "start": 16434.2, "end": 16442.440000000002, "text": " of any linear system ax equals b this is just notation for a linear system where b", "tokens": [50996, 295, 604, 8213, 1185, 6360, 6915, 272, 341, 307, 445, 24657, 337, 257, 8213, 1185, 689, 272, 51408], "temperature": 0.0, "avg_logprob": -0.0806187885563548, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.0044680992141366005}, {"id": 2223, "seek": 1644244, "start": 16443.239999999998, "end": 16455.96, "text": " is a vector in r m and a is an m by n matrix", "tokens": [50404, 307, 257, 8062, 294, 367, 275, 293, 257, 307, 364, 275, 538, 297, 8141, 51040], "temperature": 0.0, "avg_logprob": -0.1777409166097641, "compression_ratio": 1.236842105263158, "no_speech_prob": 0.022975211963057518}, {"id": 2224, "seek": 1644244, "start": 16459.239999999998, "end": 16464.039999999997, "text": " so the solution set of this is an affine subspace", "tokens": [51204, 370, 264, 3827, 992, 295, 341, 307, 364, 2096, 533, 2090, 17940, 51444], "temperature": 0.0, "avg_logprob": -0.1777409166097641, "compression_ratio": 1.236842105263158, "no_speech_prob": 0.022975211963057518}, {"id": 2225, "seek": 1646404, "start": 16464.36, "end": 16471.0, "text": " of r n", "tokens": [50380, 295, 367, 297, 50712], "temperature": 0.0, "avg_logprob": -0.08929418155125209, "compression_ratio": 1.9078014184397163, "no_speech_prob": 0.004331252072006464}, {"id": 2226, "seek": 1646404, "start": 16474.36, "end": 16479.96, "text": " now the solution set of an inhomogeneous system is not a vector subspace because in", "tokens": [50880, 586, 264, 3827, 992, 295, 364, 47707, 298, 31112, 1185, 307, 406, 257, 8062, 2090, 17940, 570, 294, 51160], "temperature": 0.0, "avg_logprob": -0.08929418155125209, "compression_ratio": 1.9078014184397163, "no_speech_prob": 0.004331252072006464}, {"id": 2227, "seek": 1646404, "start": 16479.96, "end": 16487.16, "text": " general zero is not a solution in fact when zero is a solution then it exactly is a subspace", "tokens": [51160, 2674, 4018, 307, 406, 257, 3827, 294, 1186, 562, 4018, 307, 257, 3827, 550, 309, 2293, 307, 257, 2090, 17940, 51520], "temperature": 0.0, "avg_logprob": -0.08929418155125209, "compression_ratio": 1.9078014184397163, "no_speech_prob": 0.004331252072006464}, {"id": 2228, "seek": 1646404, "start": 16487.16, "end": 16492.04, "text": " and when zero is not a solution we get this more general notion of an affine subspace", "tokens": [51520, 293, 562, 4018, 307, 406, 257, 3827, 321, 483, 341, 544, 2674, 10710, 295, 364, 2096, 533, 2090, 17940, 51764], "temperature": 0.0, "avg_logprob": -0.08929418155125209, "compression_ratio": 1.9078014184397163, "no_speech_prob": 0.004331252072006464}, {"id": 2229, "seek": 1649204, "start": 16492.600000000002, "end": 16494.760000000002, "text": " and it's a fact", "tokens": [50392, 293, 309, 311, 257, 1186, 50500], "temperature": 0.0, "avg_logprob": -0.25665296448601616, "compression_ratio": 1.2375, "no_speech_prob": 0.008846575394272804}, {"id": 2230, "seek": 1649204, "start": 16497.96, "end": 16500.120000000003, "text": " that affine subspaces", "tokens": [50660, 300, 2096, 533, 2090, 79, 2116, 50768], "temperature": 0.0, "avg_logprob": -0.25665296448601616, "compression_ratio": 1.2375, "no_speech_prob": 0.008846575394272804}, {"id": 2231, "seek": 1649204, "start": 16504.68, "end": 16505.8, "text": " are translates", "tokens": [50996, 366, 28468, 51052], "temperature": 0.0, "avg_logprob": -0.25665296448601616, "compression_ratio": 1.2375, "no_speech_prob": 0.008846575394272804}, {"id": 2232, "seek": 1649204, "start": 16509.16, "end": 16510.920000000002, "text": " of vector subspaces", "tokens": [51220, 295, 8062, 2090, 79, 2116, 51308], "temperature": 0.0, "avg_logprob": -0.25665296448601616, "compression_ratio": 1.2375, "no_speech_prob": 0.008846575394272804}, {"id": 2233, "seek": 1649204, "start": 16517.0, "end": 16518.280000000002, "text": " and what do i mean by that", "tokens": [51612, 293, 437, 360, 741, 914, 538, 300, 51676], "temperature": 0.0, "avg_logprob": -0.25665296448601616, "compression_ratio": 1.2375, "no_speech_prob": 0.008846575394272804}, {"id": 2234, "seek": 1652204, "start": 16522.2, "end": 16528.280000000002, "text": " a is an affine subspace", "tokens": [50372, 257, 307, 364, 2096, 533, 2090, 17940, 50676], "temperature": 0.0, "avg_logprob": -0.10249879903960646, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.005729677155613899}, {"id": 2235, "seek": 1652204, "start": 16532.68, "end": 16541.96, "text": " if and only if there exists a vector v in r n such that if i take the subs", "tokens": [50896, 498, 293, 787, 498, 456, 8198, 257, 8062, 371, 294, 367, 297, 1270, 300, 498, 741, 747, 264, 2090, 51360], "temperature": 0.0, "avg_logprob": -0.10249879903960646, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.005729677155613899}, {"id": 2236, "seek": 1652204, "start": 16541.96, "end": 16550.280000000002, "text": " if i take this affine subspace a and subtract v from it now what this means is the set of all", "tokens": [51360, 498, 741, 747, 341, 2096, 533, 2090, 17940, 257, 293, 16390, 371, 490, 309, 586, 437, 341, 1355, 307, 264, 992, 295, 439, 51776], "temperature": 0.0, "avg_logprob": -0.10249879903960646, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.005729677155613899}, {"id": 2237, "seek": 1655028, "start": 16551.0, "end": 16555.719999999998, "text": " vectors of the form u minus v where u is in a", "tokens": [50400, 18875, 295, 264, 1254, 344, 3175, 371, 689, 344, 307, 294, 257, 50636], "temperature": 0.0, "avg_logprob": -0.11949244941153177, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.004331077449023724}, {"id": 2238, "seek": 1655028, "start": 16561.239999999998, "end": 16566.84, "text": " if this subset of r n is a subspace", "tokens": [50912, 498, 341, 25993, 295, 367, 297, 307, 257, 2090, 17940, 51192], "temperature": 0.0, "avg_logprob": -0.11949244941153177, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.004331077449023724}, {"id": 2239, "seek": 1655028, "start": 16569.32, "end": 16571.559999999998, "text": " in this sense is a vector subspace", "tokens": [51316, 294, 341, 2020, 307, 257, 8062, 2090, 17940, 51428], "temperature": 0.0, "avg_logprob": -0.11949244941153177, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.004331077449023724}, {"id": 2240, "seek": 1655028, "start": 16577.0, "end": 16577.719999999998, "text": " in fact", "tokens": [51700, 294, 1186, 51736], "temperature": 0.0, "avg_logprob": -0.11949244941153177, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.004331077449023724}, {"id": 2241, "seek": 1658028, "start": 16581.239999999998, "end": 16590.76, "text": " we can use any vector inside of a to translate it to the origin so in fact v", "tokens": [50412, 321, 393, 764, 604, 8062, 1854, 295, 257, 281, 13799, 309, 281, 264, 4957, 370, 294, 1186, 371, 50888], "temperature": 0.0, "avg_logprob": -0.11755122961821379, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.00041729805525392294}, {"id": 2242, "seek": 1658028, "start": 16593.96, "end": 16600.84, "text": " will be a vector in a in fact any vector in a will make this a vector subspace", "tokens": [51048, 486, 312, 257, 8062, 294, 257, 294, 1186, 604, 8062, 294, 257, 486, 652, 341, 257, 8062, 2090, 17940, 51392], "temperature": 0.0, "avg_logprob": -0.11755122961821379, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.00041729805525392294}, {"id": 2243, "seek": 1658028, "start": 16601.879999999997, "end": 16604.6, "text": " so the picture for this is actually really nice", "tokens": [51444, 370, 264, 3036, 337, 341, 307, 767, 534, 1481, 51580], "temperature": 0.0, "avg_logprob": -0.11755122961821379, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.00041729805525392294}, {"id": 2244, "seek": 1660460, "start": 16604.76, "end": 16612.519999999997, "text": " i guess i shouldn't have called it a because i called this linear system a that may be", "tokens": [50372, 741, 2041, 741, 4659, 380, 362, 1219, 309, 257, 570, 741, 1219, 341, 8213, 1185, 257, 300, 815, 312, 50760], "temperature": 0.0, "avg_logprob": -0.09320909059964694, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.005554474890232086}, {"id": 2245, "seek": 1660460, "start": 16612.519999999997, "end": 16620.199999999997, "text": " potentially confusing so maybe let's call this script a so let me use a script a here", "tokens": [50760, 7263, 13181, 370, 1310, 718, 311, 818, 341, 5755, 257, 370, 718, 385, 764, 257, 5755, 257, 510, 51144], "temperature": 0.0, "avg_logprob": -0.09320909059964694, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.005554474890232086}, {"id": 2246, "seek": 1660460, "start": 16622.68, "end": 16631.0, "text": " and fortunately the letter a was only used in this one example but let me write it like this here", "tokens": [51268, 293, 25511, 264, 5063, 257, 390, 787, 1143, 294, 341, 472, 1365, 457, 718, 385, 2464, 309, 411, 341, 510, 51684], "temperature": 0.0, "avg_logprob": -0.09320909059964694, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.005554474890232086}, {"id": 2247, "seek": 1663100, "start": 16631.0, "end": 16636.12, "text": " so it's the same so there's no conflicting notation", "tokens": [50364, 370, 309, 311, 264, 912, 370, 456, 311, 572, 43784, 24657, 50620], "temperature": 0.0, "avg_logprob": -0.06562169630136062, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0011878700461238623}, {"id": 2248, "seek": 1663100, "start": 16638.52, "end": 16648.36, "text": " okay so here's our affine subspace a and if we take any vector in here let's call it u no let's", "tokens": [50740, 1392, 370, 510, 311, 527, 2096, 533, 2090, 17940, 257, 293, 498, 321, 747, 604, 8062, 294, 510, 718, 311, 818, 309, 344, 572, 718, 311, 51232], "temperature": 0.0, "avg_logprob": -0.06562169630136062, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0011878700461238623}, {"id": 2249, "seek": 1663100, "start": 16648.36, "end": 16658.28, "text": " call it v so v points from zero up to where that vector is and if we take this vector and we", "tokens": [51232, 818, 309, 371, 370, 371, 2793, 490, 4018, 493, 281, 689, 300, 8062, 307, 293, 498, 321, 747, 341, 8062, 293, 321, 51728], "temperature": 0.0, "avg_logprob": -0.06562169630136062, "compression_ratio": 1.702127659574468, "no_speech_prob": 0.0011878700461238623}, {"id": 2250, "seek": 1665828, "start": 16658.28, "end": 16667.32, "text": " subtract it then v minus itself will be zero so i know that this plane is going to contain the zero", "tokens": [50364, 16390, 309, 550, 371, 3175, 2564, 486, 312, 4018, 370, 741, 458, 300, 341, 5720, 307, 516, 281, 5304, 264, 4018, 50816], "temperature": 0.0, "avg_logprob": -0.06410051399553326, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00781523808836937}, {"id": 2251, "seek": 1665828, "start": 16667.32, "end": 16676.68, "text": " vector and so here we have a minus v and no matter which v we picked right if we picked another one", "tokens": [50816, 8062, 293, 370, 510, 321, 362, 257, 3175, 371, 293, 572, 1871, 597, 371, 321, 6183, 558, 498, 321, 6183, 1071, 472, 51284], "temperature": 0.0, "avg_logprob": -0.06410051399553326, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00781523808836937}, {"id": 2252, "seek": 1665828, "start": 16678.92, "end": 16685.32, "text": " let's say we picked this vector right here let's call this one u then if we translate that", "tokens": [51396, 718, 311, 584, 321, 6183, 341, 8062, 558, 510, 718, 311, 818, 341, 472, 344, 550, 498, 321, 13799, 300, 51716], "temperature": 0.0, "avg_logprob": -0.06410051399553326, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.00781523808836937}, {"id": 2253, "seek": 1668532, "start": 16685.32, "end": 16689.32, "text": " u minus itself is zero so we also get this plane back as well", "tokens": [50364, 344, 3175, 2564, 307, 4018, 370, 321, 611, 483, 341, 5720, 646, 382, 731, 50564], "temperature": 0.0, "avg_logprob": -0.11746074093712701, "compression_ratio": 1.3535353535353536, "no_speech_prob": 0.002359473379328847}, {"id": 2254, "seek": 1668532, "start": 16692.92, "end": 16695.239999999998, "text": " and so a good application of this", "tokens": [50744, 293, 370, 257, 665, 3861, 295, 341, 50860], "temperature": 0.0, "avg_logprob": -0.11746074093712701, "compression_ratio": 1.3535353535353536, "no_speech_prob": 0.002359473379328847}, {"id": 2255, "seek": 1668532, "start": 16698.52, "end": 16702.84, "text": " of this sort of mathematical object is", "tokens": [51024, 295, 341, 1333, 295, 18894, 2657, 307, 51240], "temperature": 0.0, "avg_logprob": -0.11746074093712701, "compression_ratio": 1.3535353535353536, "no_speech_prob": 0.002359473379328847}, {"id": 2256, "seek": 1670284, "start": 16703.72, "end": 16717.48, "text": " if the vector xp p for particular is a solution to ax equals b for some linear system like in the", "tokens": [50408, 498, 264, 8062, 2031, 79, 280, 337, 1729, 307, 257, 3827, 281, 6360, 6915, 272, 337, 512, 8213, 1185, 411, 294, 264, 51096], "temperature": 0.0, "avg_logprob": -0.2476217379936805, "compression_ratio": 1.1975308641975309, "no_speech_prob": 0.053394462913274765}, {"id": 2257, "seek": 1671748, "start": 16718.2, "end": 16730.6, "text": " previous example then the solution set meaning all the solutions of ax equals b", "tokens": [50400, 3894, 1365, 550, 264, 3827, 992, 3620, 439, 264, 6547, 295, 6360, 6915, 272, 51020], "temperature": 0.0, "avg_logprob": -0.06946665812761356, "compression_ratio": 1.5495495495495495, "no_speech_prob": 0.047419022768735886}, {"id": 2258, "seek": 1671748, "start": 16733.079999999998, "end": 16740.84, "text": " is as we know the particular solution plus the homogeneous solution set so it's a set of all", "tokens": [51144, 307, 382, 321, 458, 264, 1729, 3827, 1804, 264, 42632, 3827, 992, 370, 309, 311, 257, 992, 295, 439, 51532], "temperature": 0.0, "avg_logprob": -0.06946665812761356, "compression_ratio": 1.5495495495495495, "no_speech_prob": 0.047419022768735886}, {"id": 2259, "seek": 1674084, "start": 16741.56, "end": 16750.76, "text": " all sums of particular solutions with homogeneous solutions so axp solves the system this and", "tokens": [50400, 439, 34499, 295, 1729, 6547, 365, 42632, 6547, 370, 6360, 79, 39890, 264, 1185, 341, 293, 50860], "temperature": 0.0, "avg_logprob": -0.18033030937457906, "compression_ratio": 2.1417910447761193, "no_speech_prob": 0.006487919017672539}, {"id": 2260, "seek": 1674084, "start": 16753.32, "end": 16763.0, "text": " ax homogeneous solves the associated homogeneous system so if a represented the solution set", "tokens": [50988, 6360, 42632, 39890, 264, 6615, 42632, 1185, 370, 498, 257, 10379, 264, 3827, 992, 51472], "temperature": 0.0, "avg_logprob": -0.18033030937457906, "compression_ratio": 2.1417910447761193, "no_speech_prob": 0.006487919017672539}, {"id": 2261, "seek": 1674084, "start": 16763.0, "end": 16769.48, "text": " of an inhomogeneous system and a minus v represents the solution set of a homogeneous system and all", "tokens": [51472, 295, 364, 47707, 298, 31112, 1185, 293, 257, 3175, 371, 8855, 264, 3827, 992, 295, 257, 42632, 1185, 293, 439, 51796], "temperature": 0.0, "avg_logprob": -0.18033030937457906, "compression_ratio": 2.1417910447761193, "no_speech_prob": 0.006487919017672539}, {"id": 2262, "seek": 1676948, "start": 16769.48, "end": 16775.88, "text": " we have to do is pick one of these solutions and then all of these solutions and then take that", "tokens": [50364, 321, 362, 281, 360, 307, 1888, 472, 295, 613, 6547, 293, 550, 439, 295, 613, 6547, 293, 550, 747, 300, 50684], "temperature": 0.0, "avg_logprob": -0.03677227899625704, "compression_ratio": 2.0268817204301075, "no_speech_prob": 0.0002531493955757469}, {"id": 2263, "seek": 1676948, "start": 16775.88, "end": 16783.48, "text": " solution and translate it by that vector which was a particular solution of the inhomogeneous system", "tokens": [50684, 3827, 293, 13799, 309, 538, 300, 8062, 597, 390, 257, 1729, 3827, 295, 264, 47707, 298, 31112, 1185, 51064], "temperature": 0.0, "avg_logprob": -0.03677227899625704, "compression_ratio": 2.0268817204301075, "no_speech_prob": 0.0002531493955757469}, {"id": 2264, "seek": 1676948, "start": 16785.32, "end": 16790.52, "text": " just as we can define linear transformations which are functions that take linear combinations", "tokens": [51156, 445, 382, 321, 393, 6964, 8213, 34852, 597, 366, 6828, 300, 747, 8213, 21267, 51416], "temperature": 0.0, "avg_logprob": -0.03677227899625704, "compression_ratio": 2.0268817204301075, "no_speech_prob": 0.0002531493955757469}, {"id": 2265, "seek": 1676948, "start": 16790.52, "end": 16795.399999999998, "text": " to linear combinations we can also define affine transformations and the idea is that", "tokens": [51416, 281, 8213, 21267, 321, 393, 611, 6964, 2096, 533, 34852, 293, 264, 1558, 307, 300, 51660], "temperature": 0.0, "avg_logprob": -0.03677227899625704, "compression_ratio": 2.0268817204301075, "no_speech_prob": 0.0002531493955757469}, {"id": 2266, "seek": 1679540, "start": 16795.4, "end": 16801.0, "text": " they take affine combinations to affine combinations which translates geometrically to", "tokens": [50364, 436, 747, 2096, 533, 21267, 281, 2096, 533, 21267, 597, 28468, 12956, 81, 984, 281, 50644], "temperature": 0.0, "avg_logprob": -0.08165308952331543, "compression_ratio": 1.6953125, "no_speech_prob": 0.008061060681939125}, {"id": 2267, "seek": 1679540, "start": 16801.0, "end": 16808.36, "text": " it takes lines or hyperplanes to other lines and hyperplanes as well so the definition", "tokens": [50644, 309, 2516, 3876, 420, 9848, 564, 12779, 281, 661, 3876, 293, 9848, 564, 12779, 382, 731, 370, 264, 7123, 51012], "temperature": 0.0, "avg_logprob": -0.08165308952331543, "compression_ratio": 1.6953125, "no_speech_prob": 0.008061060681939125}, {"id": 2268, "seek": 1679540, "start": 16809.4, "end": 16812.36, "text": " of an affine transformation is exactly that", "tokens": [51064, 295, 364, 2096, 533, 9887, 307, 2293, 300, 51212], "temperature": 0.0, "avg_logprob": -0.08165308952331543, "compression_ratio": 1.6953125, "no_speech_prob": 0.008061060681939125}, {"id": 2269, "seek": 1681236, "start": 16812.52, "end": 16832.12, "text": " an affine transformation in this case from rn to rm is a function first and foremost", "tokens": [50372, 364, 2096, 533, 9887, 294, 341, 1389, 490, 367, 77, 281, 367, 76, 307, 257, 2445, 700, 293, 18864, 51352], "temperature": 0.0, "avg_logprob": -0.1753991583119268, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.035676077008247375}, {"id": 2270, "seek": 1681236, "start": 16833.0, "end": 16840.68, "text": " and i will write my arrows as usual from right to left so it's a function let's call it s", "tokens": [51396, 293, 741, 486, 2464, 452, 19669, 382, 7713, 490, 558, 281, 1411, 370, 309, 311, 257, 2445, 718, 311, 818, 309, 262, 51780], "temperature": 0.0, "avg_logprob": -0.1753991583119268, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.035676077008247375}, {"id": 2271, "seek": 1684236, "start": 16842.84, "end": 16843.48, "text": " such that", "tokens": [50388, 1270, 300, 50420], "temperature": 0.0, "avg_logprob": -0.17168553670247397, "compression_ratio": 1.452054794520548, "no_speech_prob": 0.0715525895357132}, {"id": 2272, "seek": 1684236, "start": 16846.920000000002, "end": 16863.0, "text": " s of lambda u plus 1 minus lambda v is equal to lambda s of u plus 1 minus lambda s of v for all", "tokens": [50592, 262, 295, 13607, 344, 1804, 502, 3175, 13607, 371, 307, 2681, 281, 13607, 262, 295, 344, 1804, 502, 3175, 13607, 262, 295, 371, 337, 439, 51396], "temperature": 0.0, "avg_logprob": -0.17168553670247397, "compression_ratio": 1.452054794520548, "no_speech_prob": 0.0715525895357132}, {"id": 2273, "seek": 1686300, "start": 16863.4, "end": 16877.88, "text": " u and v in rn and for all lambda in r and it's a consequence of this definition that if we take any", "tokens": [50384, 344, 293, 371, 294, 367, 77, 293, 337, 439, 13607, 294, 367, 293, 309, 311, 257, 18326, 295, 341, 7123, 300, 498, 321, 747, 604, 51108], "temperature": 0.0, "avg_logprob": -0.1342075734898664, "compression_ratio": 1.8881118881118881, "no_speech_prob": 0.005139224696904421}, {"id": 2274, "seek": 1686300, "start": 16877.88, "end": 16883.48, "text": " affine transfer if we take any affine combination of vectors then s of that affine combination", "tokens": [51108, 2096, 533, 5003, 498, 321, 747, 604, 2096, 533, 6562, 295, 18875, 550, 262, 295, 300, 2096, 533, 6562, 51388], "temperature": 0.0, "avg_logprob": -0.1342075734898664, "compression_ratio": 1.8881118881118881, "no_speech_prob": 0.005139224696904421}, {"id": 2275, "seek": 1686300, "start": 16884.44, "end": 16885.24, "text": " is going to be", "tokens": [51436, 307, 516, 281, 312, 51476], "temperature": 0.0, "avg_logprob": -0.1342075734898664, "compression_ratio": 1.8881118881118881, "no_speech_prob": 0.005139224696904421}, {"id": 2276, "seek": 1686300, "start": 16887.72, "end": 16891.56, "text": " the affine combination of s applied to each of those vectors", "tokens": [51600, 264, 2096, 533, 6562, 295, 262, 6456, 281, 1184, 295, 729, 18875, 51792], "temperature": 0.0, "avg_logprob": -0.1342075734898664, "compression_ratio": 1.8881118881118881, "no_speech_prob": 0.005139224696904421}, {"id": 2277, "seek": 1689300, "start": 16893.48, "end": 16911.16, "text": " this is a little less obvious than it is if you take linear transformations and you show that", "tokens": [50388, 341, 307, 257, 707, 1570, 6322, 813, 309, 307, 498, 291, 747, 8213, 34852, 293, 291, 855, 300, 51272], "temperature": 0.0, "avg_logprob": -0.16630376012701736, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0005702869966626167}, {"id": 2278, "seek": 1689300, "start": 16911.16, "end": 16916.12, "text": " it follows from the assumptions of a linear transformation that it takes linear combinations", "tokens": [51272, 309, 10002, 490, 264, 17695, 295, 257, 8213, 9887, 300, 309, 2516, 8213, 21267, 51520], "temperature": 0.0, "avg_logprob": -0.16630376012701736, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0005702869966626167}, {"id": 2279, "seek": 1691612, "start": 16916.12, "end": 16924.039999999997, "text": " to linear combinations and the reason it's a little bit slightly more challenging is that", "tokens": [50364, 281, 8213, 21267, 293, 264, 1778, 309, 311, 257, 707, 857, 4748, 544, 7595, 307, 300, 50760], "temperature": 0.0, "avg_logprob": -0.06922104484156559, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.0038243518210947514}, {"id": 2280, "seek": 1691612, "start": 16924.039999999997, "end": 16929.48, "text": " if you apply this in a binary fashion right if you take two vectors u and v so you think of this", "tokens": [50760, 498, 291, 3079, 341, 294, 257, 17434, 6700, 558, 498, 291, 747, 732, 18875, 344, 293, 371, 370, 291, 519, 295, 341, 51032], "temperature": 0.0, "avg_logprob": -0.06922104484156559, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.0038243518210947514}, {"id": 2281, "seek": 1691612, "start": 16929.48, "end": 16937.559999999998, "text": " as a function from let's say r cross r to the n cross r to the n to r to the m then in order to", "tokens": [51032, 382, 257, 2445, 490, 718, 311, 584, 367, 3278, 367, 281, 264, 297, 3278, 367, 281, 264, 297, 281, 367, 281, 264, 275, 550, 294, 1668, 281, 51436], "temperature": 0.0, "avg_logprob": -0.06922104484156559, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.0038243518210947514}, {"id": 2282, "seek": 1691612, "start": 16937.559999999998, "end": 16943.0, "text": " apply this here you have to put parentheses in an appropriate place but in order to have an affine", "tokens": [51436, 3079, 341, 510, 291, 362, 281, 829, 34153, 294, 364, 6854, 1081, 457, 294, 1668, 281, 362, 364, 2096, 533, 51708], "temperature": 0.0, "avg_logprob": -0.06922104484156559, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.0038243518210947514}, {"id": 2283, "seek": 1694300, "start": 16943.08, "end": 16948.2, "text": " combination with the appropriate parentheses you have to be a little bit careful about what", "tokens": [50368, 6562, 365, 264, 6854, 34153, 291, 362, 281, 312, 257, 707, 857, 5026, 466, 437, 50624], "temperature": 0.0, "avg_logprob": -0.04201173193660783, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0009697136702015996}, {"id": 2284, "seek": 1694300, "start": 16948.2, "end": 16954.04, "text": " your resulting coefficients are and it's not so easy to see how to do that but it can be done", "tokens": [50624, 428, 16505, 31994, 366, 293, 309, 311, 406, 370, 1858, 281, 536, 577, 281, 360, 300, 457, 309, 393, 312, 1096, 50916], "temperature": 0.0, "avg_logprob": -0.04201173193660783, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0009697136702015996}, {"id": 2285, "seek": 1694300, "start": 16957.8, "end": 16962.76, "text": " and here's the example that I really like to think of when comparing linear transformations", "tokens": [51104, 293, 510, 311, 264, 1365, 300, 286, 534, 411, 281, 519, 295, 562, 15763, 8213, 34852, 51352], "temperature": 0.0, "avg_logprob": -0.04201173193660783, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0009697136702015996}, {"id": 2286, "seek": 1694300, "start": 16962.76, "end": 16969.96, "text": " to affine transformations and things you might have seen from a while back not in my lectures but", "tokens": [51352, 281, 2096, 533, 34852, 293, 721, 291, 1062, 362, 1612, 490, 257, 1339, 646, 406, 294, 452, 16564, 457, 51712], "temperature": 0.0, "avg_logprob": -0.04201173193660783, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0009697136702015996}, {"id": 2287, "seek": 1696996, "start": 16969.96, "end": 16977.239999999998, "text": " in your early learnings of math perhaps so if we take the usual equation of the form", "tokens": [50364, 294, 428, 2440, 2539, 82, 295, 5221, 4317, 370, 498, 321, 747, 264, 7713, 5367, 295, 264, 1254, 50728], "temperature": 0.0, "avg_logprob": -0.08491982618967692, "compression_ratio": 1.5735294117647058, "no_speech_prob": 0.0021826205775141716}, {"id": 2288, "seek": 1696996, "start": 16977.239999999998, "end": 16986.04, "text": " y of x equals mx plus b where m and b are both real numbers and x is a variable", "tokens": [50728, 288, 295, 2031, 6915, 275, 87, 1804, 272, 689, 275, 293, 272, 366, 1293, 957, 3547, 293, 2031, 307, 257, 7006, 51168], "temperature": 0.0, "avg_logprob": -0.08491982618967692, "compression_ratio": 1.5735294117647058, "no_speech_prob": 0.0021826205775141716}, {"id": 2289, "seek": 1696996, "start": 16987.48, "end": 16991.879999999997, "text": " and y is the function of x then this is an affine", "tokens": [51240, 293, 288, 307, 264, 2445, 295, 2031, 550, 341, 307, 364, 2096, 533, 51460], "temperature": 0.0, "avg_logprob": -0.08491982618967692, "compression_ratio": 1.5735294117647058, "no_speech_prob": 0.0021826205775141716}, {"id": 2290, "seek": 1699188, "start": 16991.88, "end": 16996.120000000003, "text": " transformation", "tokens": [50364, 9887, 50576], "temperature": 0.0, "avg_logprob": -0.13325732231140136, "compression_ratio": 1.598360655737705, "no_speech_prob": 0.014503130689263344}, {"id": 2291, "seek": 1699188, "start": 16998.600000000002, "end": 17005.960000000003, "text": " from r to r because it takes a real number r x and it gives us another real number", "tokens": [50700, 490, 367, 281, 367, 570, 309, 2516, 257, 957, 1230, 367, 2031, 293, 309, 2709, 505, 1071, 957, 1230, 51068], "temperature": 0.0, "avg_logprob": -0.13325732231140136, "compression_ratio": 1.598360655737705, "no_speech_prob": 0.014503130689263344}, {"id": 2292, "seek": 1699188, "start": 17007.64, "end": 17008.68, "text": " and it's linear", "tokens": [51152, 293, 309, 311, 8213, 51204], "temperature": 0.0, "avg_logprob": -0.13325732231140136, "compression_ratio": 1.598360655737705, "no_speech_prob": 0.014503130689263344}, {"id": 2293, "seek": 1699188, "start": 17013.0, "end": 17019.24, "text": " if and only if b equals zero linear in the sense of being a linear transformation", "tokens": [51420, 498, 293, 787, 498, 272, 6915, 4018, 8213, 294, 264, 2020, 295, 885, 257, 8213, 9887, 51732], "temperature": 0.0, "avg_logprob": -0.13325732231140136, "compression_ratio": 1.598360655737705, "no_speech_prob": 0.014503130689263344}, {"id": 2294, "seek": 1701924, "start": 17019.24, "end": 17026.760000000002, "text": " so this will help you perhaps relate the difference between an affine transformation", "tokens": [50364, 370, 341, 486, 854, 291, 4317, 10961, 264, 2649, 1296, 364, 2096, 533, 9887, 50740], "temperature": 0.0, "avg_logprob": -0.13649391060444846, "compression_ratio": 1.6702127659574468, "no_speech_prob": 0.0006666683475486934}, {"id": 2295, "seek": 1701924, "start": 17026.760000000002, "end": 17032.36, "text": " and a linear one and we'll later talk about a theorem that relates the two exactly together", "tokens": [50740, 293, 257, 8213, 472, 293, 321, 603, 1780, 751, 466, 257, 20904, 300, 16155, 264, 732, 2293, 1214, 51020], "temperature": 0.0, "avg_logprob": -0.13649391060444846, "compression_ratio": 1.6702127659574468, "no_speech_prob": 0.0006666683475486934}, {"id": 2296, "seek": 1701924, "start": 17033.72, "end": 17042.84, "text": " in fact we'll state that theorem now so the theorem says the following are equivalent for a function", "tokens": [51088, 294, 1186, 321, 603, 1785, 300, 20904, 586, 370, 264, 20904, 1619, 264, 3480, 366, 10344, 337, 257, 2445, 51544], "temperature": 0.0, "avg_logprob": -0.13649391060444846, "compression_ratio": 1.6702127659574468, "no_speech_prob": 0.0006666683475486934}, {"id": 2297, "seek": 1701924, "start": 17045.88, "end": 17047.320000000003, "text": " now we're just describing a function", "tokens": [51696, 586, 321, 434, 445, 16141, 257, 2445, 51768], "temperature": 0.0, "avg_logprob": -0.13649391060444846, "compression_ratio": 1.6702127659574468, "no_speech_prob": 0.0006666683475486934}, {"id": 2298, "seek": 1704924, "start": 17049.800000000003, "end": 17057.640000000003, "text": " and these conditions are that s is affine is an affine transformation", "tokens": [50392, 293, 613, 4487, 366, 300, 262, 307, 2096, 533, 307, 364, 2096, 533, 9887, 50784], "temperature": 0.0, "avg_logprob": -0.09340005450778538, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0006070573581382632}, {"id": 2299, "seek": 1704924, "start": 17059.800000000003, "end": 17063.960000000003, "text": " so i'm not assuming any linearity this is just an ordinary function so s is affine", "tokens": [50892, 370, 741, 478, 406, 11926, 604, 8213, 507, 341, 307, 445, 364, 10547, 2445, 370, 262, 307, 2096, 533, 51100], "temperature": 0.0, "avg_logprob": -0.09340005450778538, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0006070573581382632}, {"id": 2300, "seek": 1704924, "start": 17065.56, "end": 17076.120000000003, "text": " if i take the function s and subtract s of zero from it so if i take s minus s of zero", "tokens": [51180, 498, 741, 747, 264, 2445, 262, 293, 16390, 262, 295, 4018, 490, 309, 370, 498, 741, 747, 262, 3175, 262, 295, 4018, 51708], "temperature": 0.0, "avg_logprob": -0.09340005450778538, "compression_ratio": 1.7318840579710144, "no_speech_prob": 0.0006070573581382632}, {"id": 2301, "seek": 1707612, "start": 17076.12, "end": 17080.92, "text": " now this is a function in the sense that if i take any x the function associated to this is", "tokens": [50364, 586, 341, 307, 257, 2445, 294, 264, 2020, 300, 498, 741, 747, 604, 2031, 264, 2445, 6615, 281, 341, 307, 50604], "temperature": 0.0, "avg_logprob": -0.09336436711824857, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006263040704652667}, {"id": 2302, "seek": 1707612, "start": 17080.92, "end": 17090.36, "text": " defined by s of x minus s is s of zero so this is also a function from r into rm if this is linear", "tokens": [50604, 7642, 538, 262, 295, 2031, 3175, 262, 307, 262, 295, 4018, 370, 341, 307, 611, 257, 2445, 490, 367, 666, 367, 76, 498, 341, 307, 8213, 51076], "temperature": 0.0, "avg_logprob": -0.09336436711824857, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006263040704652667}, {"id": 2303, "seek": 1709036, "start": 17090.68, "end": 17093.48, "text": " and c", "tokens": [50380, 293, 269, 50520], "temperature": 0.0, "avg_logprob": -0.1390124029583401, "compression_ratio": 1.1948051948051948, "no_speech_prob": 0.22263199090957642}, {"id": 2304, "seek": 1709036, "start": 17096.12, "end": 17099.0, "text": " there exists an m by n matrix", "tokens": [50652, 456, 8198, 364, 275, 538, 297, 8141, 50796], "temperature": 0.0, "avg_logprob": -0.1390124029583401, "compression_ratio": 1.1948051948051948, "no_speech_prob": 0.22263199090957642}, {"id": 2305, "seek": 1709036, "start": 17102.600000000002, "end": 17106.28, "text": " m and a vector b", "tokens": [50976, 275, 293, 257, 8062, 272, 51160], "temperature": 0.0, "avg_logprob": -0.1390124029583401, "compression_ratio": 1.1948051948051948, "no_speech_prob": 0.22263199090957642}, {"id": 2306, "seek": 1709036, "start": 17110.04, "end": 17117.8, "text": " in rm such that s of x equals mx plus b", "tokens": [51348, 294, 367, 76, 1270, 300, 262, 295, 2031, 6915, 275, 87, 1804, 272, 51736], "temperature": 0.0, "avg_logprob": -0.1390124029583401, "compression_ratio": 1.1948051948051948, "no_speech_prob": 0.22263199090957642}, {"id": 2307, "seek": 1712036, "start": 17120.68, "end": 17127.16, "text": " and the reason i mentioned this example is precisely because of this theorem because it allows us to relate", "tokens": [50380, 293, 264, 1778, 741, 2835, 341, 1365, 307, 13402, 570, 295, 341, 20904, 570, 309, 4045, 505, 281, 10961, 50704], "temperature": 0.0, "avg_logprob": -0.11190356978450913, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.0009696859633550048}, {"id": 2308, "seek": 1712036, "start": 17129.16, "end": 17134.28, "text": " linear transfer affine transformations to transformations that we may have seen a long", "tokens": [50804, 8213, 5003, 2096, 533, 34852, 281, 34852, 300, 321, 815, 362, 1612, 257, 938, 51060], "temperature": 0.0, "avg_logprob": -0.11190356978450913, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.0009696859633550048}, {"id": 2309, "seek": 1712036, "start": 17134.28, "end": 17140.68, "text": " time ago and i personally think it's instructive to prove this theorem to get a feeling for how", "tokens": [51060, 565, 2057, 293, 741, 5665, 519, 309, 311, 7232, 488, 281, 7081, 341, 20904, 281, 483, 257, 2633, 337, 577, 51380], "temperature": 0.0, "avg_logprob": -0.11190356978450913, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.0009696859633550048}, {"id": 2310, "seek": 1712036, "start": 17140.68, "end": 17147.88, "text": " affine combinations work so let's actually prove it and we'll prove this by proving a implies b", "tokens": [51380, 2096, 533, 21267, 589, 370, 718, 311, 767, 7081, 309, 293, 321, 603, 7081, 341, 538, 27221, 257, 18779, 272, 51740], "temperature": 0.0, "avg_logprob": -0.11190356978450913, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.0009696859633550048}, {"id": 2311, "seek": 1714788, "start": 17147.88, "end": 17156.120000000003, "text": " implies c implies a so for the first part of this proof we're going to define we i don't want to", "tokens": [50364, 18779, 269, 18779, 257, 370, 337, 264, 700, 644, 295, 341, 8177, 321, 434, 516, 281, 6964, 321, 741, 500, 380, 528, 281, 50776], "temperature": 0.0, "avg_logprob": -0.06291941139433119, "compression_ratio": 1.8129032258064517, "no_speech_prob": 0.000646182568743825}, {"id": 2312, "seek": 1714788, "start": 17156.120000000003, "end": 17164.04, "text": " keep writing s minus s of zero so we're going to define l to be this function s minus s of zero", "tokens": [50776, 1066, 3579, 262, 3175, 262, 295, 4018, 370, 321, 434, 516, 281, 6964, 287, 281, 312, 341, 2445, 262, 3175, 262, 295, 4018, 51172], "temperature": 0.0, "avg_logprob": -0.06291941139433119, "compression_ratio": 1.8129032258064517, "no_speech_prob": 0.000646182568743825}, {"id": 2313, "seek": 1714788, "start": 17167.4, "end": 17173.08, "text": " and the goal is to prove that this function is linear so we have to check the associated", "tokens": [51340, 293, 264, 3387, 307, 281, 7081, 300, 341, 2445, 307, 8213, 370, 321, 362, 281, 1520, 264, 6615, 51624], "temperature": 0.0, "avg_logprob": -0.06291941139433119, "compression_ratio": 1.8129032258064517, "no_speech_prob": 0.000646182568743825}, {"id": 2314, "seek": 1717308, "start": 17173.08, "end": 17180.280000000002, "text": " conditions for linearity and before we do that let's just establish that if we apply zero to l", "tokens": [50364, 4487, 337, 8213, 507, 293, 949, 321, 360, 300, 718, 311, 445, 8327, 300, 498, 321, 3079, 4018, 281, 287, 50724], "temperature": 0.0, "avg_logprob": -0.054549168456684456, "compression_ratio": 1.8509615384615385, "no_speech_prob": 0.019121645018458366}, {"id": 2315, "seek": 1717308, "start": 17180.84, "end": 17186.280000000002, "text": " if we apply l to zero then we get exactly zero because this is s of zero minus s of zero so it", "tokens": [50752, 498, 321, 3079, 287, 281, 4018, 550, 321, 483, 2293, 4018, 570, 341, 307, 262, 295, 4018, 3175, 262, 295, 4018, 370, 309, 51024], "temperature": 0.0, "avg_logprob": -0.054549168456684456, "compression_ratio": 1.8509615384615385, "no_speech_prob": 0.019121645018458366}, {"id": 2316, "seek": 1717308, "start": 17186.280000000002, "end": 17192.120000000003, "text": " definitely preserved zero and we know that this doesn't give us a sufficient condition for linearity", "tokens": [51024, 2138, 22242, 4018, 293, 321, 458, 300, 341, 1177, 380, 976, 505, 257, 11563, 4188, 337, 8213, 507, 51316], "temperature": 0.0, "avg_logprob": -0.054549168456684456, "compression_ratio": 1.8509615384615385, "no_speech_prob": 0.019121645018458366}, {"id": 2317, "seek": 1717308, "start": 17192.120000000003, "end": 17201.480000000003, "text": " but it's definitely necessary so second if we take a coefficient lambda any real number lambda", "tokens": [51316, 457, 309, 311, 2138, 4818, 370, 1150, 498, 321, 747, 257, 17619, 13607, 604, 957, 1230, 13607, 51784], "temperature": 0.0, "avg_logprob": -0.054549168456684456, "compression_ratio": 1.8509615384615385, "no_speech_prob": 0.019121645018458366}, {"id": 2318, "seek": 1720148, "start": 17201.56, "end": 17210.52, "text": " and if we take a vector u that's inside of our n then by this definition this is s of lambda u", "tokens": [50368, 293, 498, 321, 747, 257, 8062, 344, 300, 311, 1854, 295, 527, 297, 550, 538, 341, 7123, 341, 307, 262, 295, 13607, 344, 50816], "temperature": 0.0, "avg_logprob": -0.08243192797121794, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.007344902493059635}, {"id": 2319, "seek": 1720148, "start": 17211.56, "end": 17224.12, "text": " minus s of zero and this is an interesting combination of lambda u and zero this also", "tokens": [50868, 3175, 262, 295, 4018, 293, 341, 307, 364, 1880, 6562, 295, 13607, 344, 293, 4018, 341, 611, 51496], "temperature": 0.0, "avg_logprob": -0.08243192797121794, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.007344902493059635}, {"id": 2320, "seek": 1722412, "start": 17224.12, "end": 17233.559999999998, "text": " equals s of lambda u plus one minus lambda of the zero vector right the zero vector is in the domain", "tokens": [50364, 6915, 262, 295, 13607, 344, 1804, 472, 3175, 13607, 295, 264, 4018, 8062, 558, 264, 4018, 8062, 307, 294, 264, 9274, 50836], "temperature": 0.0, "avg_logprob": -0.039676215337670365, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.04208337515592575}, {"id": 2321, "seek": 1722412, "start": 17233.559999999998, "end": 17239.399999999998, "text": " of s and so i can multiply by any number and i still get zero and now the interesting thing", "tokens": [50836, 295, 262, 293, 370, 741, 393, 12972, 538, 604, 1230, 293, 741, 920, 483, 4018, 293, 586, 264, 1880, 551, 51128], "temperature": 0.0, "avg_logprob": -0.039676215337670365, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.04208337515592575}, {"id": 2322, "seek": 1722412, "start": 17239.399999999998, "end": 17244.6, "text": " about this is that this is an affine combination of the vectors u and zero so that's what this", "tokens": [51128, 466, 341, 307, 300, 341, 307, 364, 2096, 533, 6562, 295, 264, 18875, 344, 293, 4018, 370, 300, 311, 437, 341, 51388], "temperature": 0.0, "avg_logprob": -0.039676215337670365, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.04208337515592575}, {"id": 2323, "seek": 1722412, "start": 17244.6, "end": 17251.96, "text": " term is and this just comes along for the ride because s is affine i can take these coefficients", "tokens": [51388, 1433, 307, 293, 341, 445, 1487, 2051, 337, 264, 5077, 570, 262, 307, 2096, 533, 741, 393, 747, 613, 31994, 51756], "temperature": 0.0, "avg_logprob": -0.039676215337670365, "compression_ratio": 1.8373205741626795, "no_speech_prob": 0.04208337515592575}, {"id": 2324, "seek": 1725196, "start": 17251.96, "end": 17255.719999999998, "text": " out", "tokens": [50364, 484, 50552], "temperature": 0.0, "avg_logprob": -0.09960152421678815, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.006487998180091381}, {"id": 2325, "seek": 1725196, "start": 17259.32, "end": 17267.96, "text": " and this is also an affine combination of itself so i can write minus lambda s of zero", "tokens": [50732, 293, 341, 307, 611, 364, 2096, 533, 6562, 295, 2564, 370, 741, 393, 2464, 3175, 13607, 262, 295, 4018, 51164], "temperature": 0.0, "avg_logprob": -0.09960152421678815, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.006487998180091381}, {"id": 2326, "seek": 1725196, "start": 17268.84, "end": 17272.12, "text": " minus one minus lambda s of zero", "tokens": [51208, 3175, 472, 3175, 13607, 262, 295, 4018, 51372], "temperature": 0.0, "avg_logprob": -0.09960152421678815, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.006487998180091381}, {"id": 2327, "seek": 1725196, "start": 17275.0, "end": 17280.36, "text": " and so what do we have we have lambda of s of u in parentheses minus s of zero", "tokens": [51516, 293, 370, 437, 360, 321, 362, 321, 362, 13607, 295, 262, 295, 344, 294, 34153, 3175, 262, 295, 4018, 51784], "temperature": 0.0, "avg_logprob": -0.09960152421678815, "compression_ratio": 1.7413793103448276, "no_speech_prob": 0.006487998180091381}, {"id": 2328, "seek": 1728036, "start": 17280.440000000002, "end": 17285.8, "text": " which is exactly l of u and these two terms cancel so we're left over with lambda", "tokens": [50368, 597, 307, 2293, 287, 295, 344, 293, 613, 732, 2115, 10373, 370, 321, 434, 1411, 670, 365, 13607, 50636], "temperature": 0.0, "avg_logprob": -0.05904146720623148, "compression_ratio": 1.839378238341969, "no_speech_prob": 0.0018100942252203822}, {"id": 2329, "seek": 1728036, "start": 17287.08, "end": 17293.0, "text": " l of u when we're done with this calculation so it's linear in this it's the first condition", "tokens": [50700, 287, 295, 344, 562, 321, 434, 1096, 365, 341, 17108, 370, 309, 311, 8213, 294, 341, 309, 311, 264, 700, 4188, 50996], "temperature": 0.0, "avg_logprob": -0.05904146720623148, "compression_ratio": 1.839378238341969, "no_speech_prob": 0.0018100942252203822}, {"id": 2330, "seek": 1728036, "start": 17293.0, "end": 17297.88, "text": " of linearity is proven and the second condition is if we take a linear combination", "tokens": [50996, 295, 8213, 507, 307, 12785, 293, 264, 1150, 4188, 307, 498, 321, 747, 257, 8213, 6562, 51240], "temperature": 0.0, "avg_logprob": -0.05904146720623148, "compression_ratio": 1.839378238341969, "no_speech_prob": 0.0018100942252203822}, {"id": 2331, "seek": 1728036, "start": 17299.88, "end": 17306.04, "text": " this also has to go to a linear combination as well so let's just use the definition this is s of", "tokens": [51340, 341, 611, 575, 281, 352, 281, 257, 8213, 6562, 382, 731, 370, 718, 311, 445, 764, 264, 7123, 341, 307, 262, 295, 51648], "temperature": 0.0, "avg_logprob": -0.05904146720623148, "compression_ratio": 1.839378238341969, "no_speech_prob": 0.0018100942252203822}, {"id": 2332, "seek": 1730604, "start": 17306.04, "end": 17315.0, "text": " u plus v minus s of zero and now let's draw a picture here because this is going to help", "tokens": [50364, 344, 1804, 371, 3175, 262, 295, 4018, 293, 586, 718, 311, 2642, 257, 3036, 510, 570, 341, 307, 516, 281, 854, 50812], "temperature": 0.0, "avg_logprob": -0.05284625908424114, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004198573995381594}, {"id": 2333, "seek": 1730604, "start": 17315.0, "end": 17321.72, "text": " let's say we have the vector u here and the vector v here and this is the zero vector", "tokens": [50812, 718, 311, 584, 321, 362, 264, 8062, 344, 510, 293, 264, 8062, 371, 510, 293, 341, 307, 264, 4018, 8062, 51148], "temperature": 0.0, "avg_logprob": -0.05284625908424114, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004198573995381594}, {"id": 2334, "seek": 1730604, "start": 17323.24, "end": 17328.280000000002, "text": " now the vector u plus v is somewhere here", "tokens": [51224, 586, 264, 8062, 344, 1804, 371, 307, 4079, 510, 51476], "temperature": 0.0, "avg_logprob": -0.05284625908424114, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.004198573995381594}, {"id": 2335, "seek": 1732828, "start": 17329.239999999998, "end": 17340.039999999997, "text": " now can we express u plus v as some convenient affine combination of vectors for which we know what s", "tokens": [50412, 586, 393, 321, 5109, 344, 1804, 371, 382, 512, 10851, 2096, 533, 6562, 295, 18875, 337, 597, 321, 458, 437, 262, 50952], "temperature": 0.0, "avg_logprob": -0.07561329229554134, "compression_ratio": 1.8724832214765101, "no_speech_prob": 0.0053847054950892925}, {"id": 2336, "seek": 1732828, "start": 17340.039999999997, "end": 17349.64, "text": " does to those vectors well if we extend u so we take combinations of u and combinations of v", "tokens": [50952, 775, 281, 729, 18875, 731, 498, 321, 10101, 344, 370, 321, 747, 21267, 295, 344, 293, 21267, 295, 371, 51432], "temperature": 0.0, "avg_logprob": -0.07561329229554134, "compression_ratio": 1.8724832214765101, "no_speech_prob": 0.0053847054950892925}, {"id": 2337, "seek": 1732828, "start": 17351.0, "end": 17356.12, "text": " then u plus v can be written as an affine combination of some multiple of u and some", "tokens": [51500, 550, 344, 1804, 371, 393, 312, 3720, 382, 364, 2096, 533, 6562, 295, 512, 3866, 295, 344, 293, 512, 51756], "temperature": 0.0, "avg_logprob": -0.07561329229554134, "compression_ratio": 1.8724832214765101, "no_speech_prob": 0.0053847054950892925}, {"id": 2338, "seek": 1735612, "start": 17356.12, "end": 17360.76, "text": " multiple of v in fact it can be written like that in many ways all i have to do is pick any", "tokens": [50364, 3866, 295, 371, 294, 1186, 309, 393, 312, 3720, 411, 300, 294, 867, 2098, 439, 741, 362, 281, 360, 307, 1888, 604, 50596], "temperature": 0.0, "avg_logprob": -0.04834471232649209, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.009411705657839775}, {"id": 2339, "seek": 1735612, "start": 17360.76, "end": 17368.52, "text": " point here and draw the straight line through this point and u plus v and then find out what", "tokens": [50596, 935, 510, 293, 2642, 264, 2997, 1622, 807, 341, 935, 293, 344, 1804, 371, 293, 550, 915, 484, 437, 50984], "temperature": 0.0, "avg_logprob": -0.04834471232649209, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.009411705657839775}, {"id": 2340, "seek": 1735612, "start": 17368.52, "end": 17375.16, "text": " that vector is or we can take a simple shortcut and just notice that if we multiply this by two", "tokens": [50984, 300, 8062, 307, 420, 321, 393, 747, 257, 2199, 24822, 293, 445, 3449, 300, 498, 321, 12972, 341, 538, 732, 51316], "temperature": 0.0, "avg_logprob": -0.04834471232649209, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.009411705657839775}, {"id": 2341, "seek": 1737516, "start": 17376.12, "end": 17378.2, "text": " this by two then", "tokens": [50412, 341, 538, 732, 550, 50516], "temperature": 0.0, "avg_logprob": -0.066921040929597, "compression_ratio": 1.664, "no_speech_prob": 0.09007822722196579}, {"id": 2342, "seek": 1737516, "start": 17381.32, "end": 17389.0, "text": " those two points to u and to v are on the same line that goes are on the line that goes through", "tokens": [50672, 729, 732, 2793, 281, 344, 293, 281, 371, 366, 322, 264, 912, 1622, 300, 1709, 366, 322, 264, 1622, 300, 1709, 807, 51056], "temperature": 0.0, "avg_logprob": -0.066921040929597, "compression_ratio": 1.664, "no_speech_prob": 0.09007822722196579}, {"id": 2343, "seek": 1737516, "start": 17389.0, "end": 17394.92, "text": " u plus v and how do i know that well if i take half of this and half of this i get exactly this", "tokens": [51056, 344, 1804, 371, 293, 577, 360, 741, 458, 300, 731, 498, 741, 747, 1922, 295, 341, 293, 1922, 295, 341, 741, 483, 2293, 341, 51352], "temperature": 0.0, "avg_logprob": -0.066921040929597, "compression_ratio": 1.664, "no_speech_prob": 0.09007822722196579}, {"id": 2344, "seek": 1739492, "start": 17394.92, "end": 17405.48, "text": " and half and half is an affine combination so this equals s of one half to u plus one half", "tokens": [50364, 293, 1922, 293, 1922, 307, 364, 2096, 533, 6562, 370, 341, 6915, 262, 295, 472, 1922, 281, 344, 1804, 472, 1922, 50892], "temperature": 0.0, "avg_logprob": -0.08110461429673799, "compression_ratio": 1.723809523809524, "no_speech_prob": 0.13292524218559265}, {"id": 2345, "seek": 1739492, "start": 17405.48, "end": 17414.679999999997, "text": " to v minus s of zero and because this is an affine combination we have one half s of two u", "tokens": [50892, 281, 371, 3175, 262, 295, 4018, 293, 570, 341, 307, 364, 2096, 533, 6562, 321, 362, 472, 1922, 262, 295, 732, 344, 51352], "temperature": 0.0, "avg_logprob": -0.08110461429673799, "compression_ratio": 1.723809523809524, "no_speech_prob": 0.13292524218559265}, {"id": 2346, "seek": 1741468, "start": 17415.08, "end": 17424.6, "text": " plus one half s of two v and now we can also subtract half of s of zero here", "tokens": [50384, 1804, 472, 1922, 262, 295, 732, 371, 293, 586, 321, 393, 611, 16390, 1922, 295, 262, 295, 4018, 510, 50860], "temperature": 0.0, "avg_logprob": -0.09933894745847012, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.08879352360963821}, {"id": 2347, "seek": 1741468, "start": 17427.48, "end": 17435.16, "text": " minus one half s of zero again and now one half is a common factor here so this gives us one half", "tokens": [51004, 3175, 472, 1922, 262, 295, 4018, 797, 293, 586, 472, 1922, 307, 257, 2689, 5952, 510, 370, 341, 2709, 505, 472, 1922, 51388], "temperature": 0.0, "avg_logprob": -0.09933894745847012, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.08879352360963821}, {"id": 2348, "seek": 1743516, "start": 17435.88, "end": 17447.0, "text": " l of two u plus one half l of two v but by the thing we just proved we know that we can pull out", "tokens": [50400, 287, 295, 732, 344, 1804, 472, 1922, 287, 295, 732, 371, 457, 538, 264, 551, 321, 445, 14617, 321, 458, 300, 321, 393, 2235, 484, 50956], "temperature": 0.0, "avg_logprob": -0.06809770738756335, "compression_ratio": 1.6626506024096386, "no_speech_prob": 0.02096165530383587}, {"id": 2349, "seek": 1743516, "start": 17447.0, "end": 17457.48, "text": " scalars from l so this gives us l of u plus l of v and this together proves the linearity", "tokens": [50956, 15664, 685, 490, 287, 370, 341, 2709, 505, 287, 295, 344, 1804, 287, 295, 371, 293, 341, 1214, 25019, 264, 8213, 507, 51480], "temperature": 0.0, "avg_logprob": -0.06809770738756335, "compression_ratio": 1.6626506024096386, "no_speech_prob": 0.02096165530383587}, {"id": 2350, "seek": 1743516, "start": 17457.48, "end": 17463.72, "text": " so this is the proof that a implies b but if we have an affine transformation we subtract", "tokens": [51480, 370, 341, 307, 264, 8177, 300, 257, 18779, 272, 457, 498, 321, 362, 364, 2096, 533, 9887, 321, 16390, 51792], "temperature": 0.0, "avg_logprob": -0.06809770738756335, "compression_ratio": 1.6626506024096386, "no_speech_prob": 0.02096165530383587}, {"id": 2351, "seek": 1746372, "start": 17463.72, "end": 17470.440000000002, "text": " by what it applies to when you plug in zero then we get a linear transformation now the rest of", "tokens": [50364, 538, 437, 309, 13165, 281, 562, 291, 5452, 294, 4018, 550, 321, 483, 257, 8213, 9887, 586, 264, 1472, 295, 50700], "temperature": 0.0, "avg_logprob": -0.04699011318019179, "compression_ratio": 1.69375, "no_speech_prob": 0.0010004753712564707}, {"id": 2352, "seek": 1746372, "start": 17470.440000000002, "end": 17482.920000000002, "text": " the proof is actually not bad afterwards because for b implies c if we have a linear transformation", "tokens": [50700, 264, 8177, 307, 767, 406, 1578, 10543, 570, 337, 272, 18779, 269, 498, 321, 362, 257, 8213, 9887, 51324], "temperature": 0.0, "avg_logprob": -0.04699011318019179, "compression_ratio": 1.69375, "no_speech_prob": 0.0010004753712564707}, {"id": 2353, "seek": 1746372, "start": 17482.920000000002, "end": 17488.440000000002, "text": " we already know we have a matrix corresponding to it so because l is linear", "tokens": [51324, 321, 1217, 458, 321, 362, 257, 8141, 11760, 281, 309, 370, 570, 287, 307, 8213, 51600], "temperature": 0.0, "avg_logprob": -0.04699011318019179, "compression_ratio": 1.69375, "no_speech_prob": 0.0010004753712564707}, {"id": 2354, "seek": 1748844, "start": 17489.32, "end": 17494.359999999997, "text": " we get an m by m matrix", "tokens": [50408, 321, 483, 364, 275, 538, 275, 8141, 50660], "temperature": 0.0, "avg_logprob": -0.1167832374572754, "compression_ratio": 1.3294117647058823, "no_speech_prob": 0.014502672478556633}, {"id": 2355, "seek": 1748844, "start": 17498.68, "end": 17500.84, "text": " such that l of x equals m of x", "tokens": [50876, 1270, 300, 287, 295, 2031, 6915, 275, 295, 2031, 50984], "temperature": 0.0, "avg_logprob": -0.1167832374572754, "compression_ratio": 1.3294117647058823, "no_speech_prob": 0.014502672478556633}, {"id": 2356, "seek": 1748844, "start": 17503.079999999998, "end": 17509.96, "text": " equals m times x for all x in the domain of s which is r n", "tokens": [51096, 6915, 275, 1413, 2031, 337, 439, 2031, 294, 264, 9274, 295, 262, 597, 307, 367, 297, 51440], "temperature": 0.0, "avg_logprob": -0.1167832374572754, "compression_ratio": 1.3294117647058823, "no_speech_prob": 0.014502672478556633}, {"id": 2357, "seek": 1750996, "start": 17510.6, "end": 17527.239999999998, "text": " so set b to be equal to s of zero and when we make when we set that to be that then since l is", "tokens": [50396, 370, 992, 272, 281, 312, 2681, 281, 262, 295, 4018, 293, 562, 321, 652, 562, 321, 992, 300, 281, 312, 300, 550, 1670, 287, 307, 51228], "temperature": 0.0, "avg_logprob": -0.13637175730296544, "compression_ratio": 1.766355140186916, "no_speech_prob": 0.02332650125026703}, {"id": 2358, "seek": 1750996, "start": 17527.239999999998, "end": 17537.719999999998, "text": " s minus s of zero then we take s equals l plus s zero which is b then we get y then we get the", "tokens": [51228, 262, 3175, 262, 295, 4018, 550, 321, 747, 262, 6915, 287, 1804, 262, 4018, 597, 307, 272, 550, 321, 483, 288, 550, 321, 483, 264, 51752], "temperature": 0.0, "avg_logprob": -0.13637175730296544, "compression_ratio": 1.766355140186916, "no_speech_prob": 0.02332650125026703}, {"id": 2359, "seek": 1753772, "start": 17537.72, "end": 17545.56, "text": " equation of the form s of x equals m x plus b so that that's what how b implies c and then", "tokens": [50364, 5367, 295, 264, 1254, 262, 295, 2031, 6915, 275, 2031, 1804, 272, 370, 300, 300, 311, 437, 577, 272, 18779, 269, 293, 550, 50756], "temperature": 0.0, "avg_logprob": -0.047962224229853204, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.0015486999182030559}, {"id": 2360, "seek": 1753772, "start": 17545.56, "end": 17551.0, "text": " if we have c to imply a this is much much it's very similar to these kinds of calculations of", "tokens": [50756, 498, 321, 362, 269, 281, 33616, 257, 341, 307, 709, 709, 309, 311, 588, 2531, 281, 613, 3685, 295, 20448, 295, 51028], "temperature": 0.0, "avg_logprob": -0.047962224229853204, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.0015486999182030559}, {"id": 2361, "seek": 1753772, "start": 17551.0, "end": 17560.52, "text": " taking affine combinations if we take s of like let's say lambda u plus one minus lambda v plug", "tokens": [51028, 1940, 2096, 533, 21267, 498, 321, 747, 262, 295, 411, 718, 311, 584, 13607, 344, 1804, 472, 3175, 13607, 371, 5452, 51504], "temperature": 0.0, "avg_logprob": -0.047962224229853204, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.0015486999182030559}, {"id": 2362, "seek": 1753772, "start": 17560.52, "end": 17565.4, "text": " that in here we know m acts in a linear way this is a matrix we apply matrix multiplication", "tokens": [51504, 300, 294, 510, 321, 458, 275, 10672, 294, 257, 8213, 636, 341, 307, 257, 8141, 321, 3079, 8141, 27290, 51748], "temperature": 0.0, "avg_logprob": -0.047962224229853204, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.0015486999182030559}, {"id": 2363, "seek": 1756540, "start": 17565.4, "end": 17570.920000000002, "text": " distributivity associativity of all these properties of addition of vectors and scalar", "tokens": [50364, 4400, 325, 4253, 4180, 30142, 295, 439, 613, 7221, 295, 4500, 295, 18875, 293, 39684, 50640], "temperature": 0.0, "avg_logprob": -0.05417830045105981, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.004331269767135382}, {"id": 2364, "seek": 1756540, "start": 17570.920000000002, "end": 17579.88, "text": " multiplication of vectors in r m and we get that s is affine from this assumption so these three", "tokens": [50640, 27290, 295, 18875, 294, 367, 275, 293, 321, 483, 300, 262, 307, 2096, 533, 490, 341, 15302, 370, 613, 1045, 51088], "temperature": 0.0, "avg_logprob": -0.05417830045105981, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.004331269767135382}, {"id": 2365, "seek": 1756540, "start": 17579.88, "end": 17587.72, "text": " conditions are equivalent for any function from r n to r m that characterize what it means for", "tokens": [51088, 4487, 366, 10344, 337, 604, 2445, 490, 367, 297, 281, 367, 275, 300, 38463, 437, 309, 1355, 337, 51480], "temperature": 0.0, "avg_logprob": -0.05417830045105981, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.004331269767135382}, {"id": 2366, "seek": 1758772, "start": 17587.800000000003, "end": 17595.4, "text": " transformation to be affine as we know functions can be composed provided that the domains and", "tokens": [50368, 9887, 281, 312, 2096, 533, 382, 321, 458, 6828, 393, 312, 18204, 5649, 300, 264, 25514, 293, 50748], "temperature": 0.0, "avg_logprob": -0.06091793241172001, "compression_ratio": 1.8129032258064517, "no_speech_prob": 0.05183631181716919}, {"id": 2367, "seek": 1758772, "start": 17595.4, "end": 17602.280000000002, "text": " codomains of these functions match up similarly affine transformations compose and the composition", "tokens": [50748, 17656, 298, 2315, 295, 613, 6828, 2995, 493, 14138, 2096, 533, 34852, 35925, 293, 264, 12686, 51092], "temperature": 0.0, "avg_logprob": -0.06091793241172001, "compression_ratio": 1.8129032258064517, "no_speech_prob": 0.05183631181716919}, {"id": 2368, "seek": 1758772, "start": 17602.280000000002, "end": 17607.72, "text": " is affine in an analogous way to how linear combinations are composed and the resulting", "tokens": [51092, 307, 2096, 533, 294, 364, 16660, 563, 636, 281, 577, 8213, 21267, 366, 18204, 293, 264, 16505, 51364], "temperature": 0.0, "avg_logprob": -0.06091793241172001, "compression_ratio": 1.8129032258064517, "no_speech_prob": 0.05183631181716919}, {"id": 2369, "seek": 1760772, "start": 17607.800000000003, "end": 17619.08, "text": " composition is also linear so we have a fact and this fact is that the composition", "tokens": [50368, 12686, 307, 611, 8213, 370, 321, 362, 257, 1186, 293, 341, 1186, 307, 300, 264, 12686, 50932], "temperature": 0.0, "avg_logprob": -0.14446459145381532, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.05833672732114792}, {"id": 2370, "seek": 1760772, "start": 17630.280000000002, "end": 17633.56, "text": " of two affine transformations s and t", "tokens": [51492, 295, 732, 2096, 533, 34852, 262, 293, 256, 51656], "temperature": 0.0, "avg_logprob": -0.14446459145381532, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.05833672732114792}, {"id": 2371, "seek": 1763772, "start": 17637.88, "end": 17642.600000000002, "text": " is also affine", "tokens": [50372, 307, 611, 2096, 533, 50608], "temperature": 0.0, "avg_logprob": -0.10927170865675982, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0002694743743631989}, {"id": 2372, "seek": 1763772, "start": 17648.920000000002, "end": 17654.68, "text": " and because it's affine and we know that each of these transformations can be written in the form", "tokens": [50924, 293, 570, 309, 311, 2096, 533, 293, 321, 458, 300, 1184, 295, 613, 34852, 393, 312, 3720, 294, 264, 1254, 51212], "temperature": 0.0, "avg_logprob": -0.10927170865675982, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0002694743743631989}, {"id": 2373, "seek": 1763772, "start": 17654.68, "end": 17660.600000000002, "text": " of mx plus b for some appropriate matrices and appropriate vectors b we can ask what is the", "tokens": [51212, 295, 275, 87, 1804, 272, 337, 512, 6854, 32284, 293, 6854, 18875, 272, 321, 393, 1029, 437, 307, 264, 51508], "temperature": 0.0, "avg_logprob": -0.10927170865675982, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0002694743743631989}, {"id": 2374, "seek": 1763772, "start": 17660.600000000002, "end": 17666.920000000002, "text": " resulting matrix for what is what are the resulting matrices and vectors for the composition", "tokens": [51508, 16505, 8141, 337, 437, 307, 437, 366, 264, 16505, 32284, 293, 18875, 337, 264, 12686, 51824], "temperature": 0.0, "avg_logprob": -0.10927170865675982, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0002694743743631989}, {"id": 2375, "seek": 1766692, "start": 17667.0, "end": 17683.8, "text": " of two affine transformations so let's write s of x as mx plus b and t of y as nx plus ny plus c", "tokens": [50368, 295, 732, 2096, 533, 34852, 370, 718, 311, 2464, 262, 295, 2031, 382, 275, 87, 1804, 272, 293, 256, 295, 288, 382, 297, 87, 1804, 18052, 1804, 269, 51208], "temperature": 0.0, "avg_logprob": -0.08110248817587798, "compression_ratio": 1.5118110236220472, "no_speech_prob": 0.0017820533830672503}, {"id": 2376, "seek": 1766692, "start": 17688.76, "end": 17695.8, "text": " and let's just be careful about composing these so if we take the composition s composed with t", "tokens": [51456, 293, 718, 311, 445, 312, 5026, 466, 715, 6110, 613, 370, 498, 321, 747, 264, 12686, 262, 18204, 365, 256, 51808], "temperature": 0.0, "avg_logprob": -0.08110248817587798, "compression_ratio": 1.5118110236220472, "no_speech_prob": 0.0017820533830672503}, {"id": 2377, "seek": 1769692, "start": 17696.92, "end": 17703.16, "text": " and we apply a vector y then this by definition is s applied to t of y", "tokens": [50364, 293, 321, 3079, 257, 8062, 288, 550, 341, 538, 7123, 307, 262, 6456, 281, 256, 295, 288, 50676], "temperature": 0.0, "avg_logprob": -0.09897537231445312, "compression_ratio": 1.3440860215053763, "no_speech_prob": 0.0007096496410667896}, {"id": 2378, "seek": 1769692, "start": 17705.879999999997, "end": 17707.48, "text": " and we know that t is of this form", "tokens": [50812, 293, 321, 458, 300, 256, 307, 295, 341, 1254, 50892], "temperature": 0.0, "avg_logprob": -0.09897537231445312, "compression_ratio": 1.3440860215053763, "no_speech_prob": 0.0007096496410667896}, {"id": 2379, "seek": 1769692, "start": 17711.399999999998, "end": 17712.92, "text": " so we get ny plus c", "tokens": [51088, 370, 321, 483, 18052, 1804, 269, 51164], "temperature": 0.0, "avg_logprob": -0.09897537231445312, "compression_ratio": 1.3440860215053763, "no_speech_prob": 0.0007096496410667896}, {"id": 2380, "seek": 1771292, "start": 17713.559999999998, "end": 17725.8, "text": " and this equals m times the input of this function which is ny", "tokens": [50396, 293, 341, 6915, 275, 1413, 264, 4846, 295, 341, 2445, 597, 307, 18052, 51008], "temperature": 0.0, "avg_logprob": -0.1444490568978446, "compression_ratio": 1.4343434343434343, "no_speech_prob": 0.01744058169424534}, {"id": 2381, "seek": 1771292, "start": 17730.039999999997, "end": 17736.359999999997, "text": " plus c plus the associated b oh this should be a plus from the transformation s", "tokens": [51220, 1804, 269, 1804, 264, 6615, 272, 1954, 341, 820, 312, 257, 1804, 490, 264, 9887, 262, 51536], "temperature": 0.0, "avg_logprob": -0.1444490568978446, "compression_ratio": 1.4343434343434343, "no_speech_prob": 0.01744058169424534}, {"id": 2382, "seek": 1773636, "start": 17737.08, "end": 17741.72, "text": " and if you distribute this all out we get mn", "tokens": [50400, 293, 498, 291, 20594, 341, 439, 484, 321, 483, 275, 77, 50632], "temperature": 0.0, "avg_logprob": -0.136749267578125, "compression_ratio": 1.6232876712328768, "no_speech_prob": 0.006797058042138815}, {"id": 2383, "seek": 1773636, "start": 17746.36, "end": 17747.0, "text": " times y", "tokens": [50864, 1413, 288, 50896], "temperature": 0.0, "avg_logprob": -0.136749267578125, "compression_ratio": 1.6232876712328768, "no_speech_prob": 0.006797058042138815}, {"id": 2384, "seek": 1773636, "start": 17749.32, "end": 17759.0, "text": " plus mc plus b so the associated matrix that we get is actually just the multiplication of", "tokens": [51012, 1804, 275, 66, 1804, 272, 370, 264, 6615, 8141, 300, 321, 483, 307, 767, 445, 264, 27290, 295, 51496], "temperature": 0.0, "avg_logprob": -0.136749267578125, "compression_ratio": 1.6232876712328768, "no_speech_prob": 0.006797058042138815}, {"id": 2385, "seek": 1773636, "start": 17759.0, "end": 17765.56, "text": " the matrices that we started with and the associated vector b is some interesting combination", "tokens": [51496, 264, 32284, 300, 321, 1409, 365, 293, 264, 6615, 8062, 272, 307, 512, 1880, 6562, 51824], "temperature": 0.0, "avg_logprob": -0.136749267578125, "compression_ratio": 1.6232876712328768, "no_speech_prob": 0.006797058042138815}, {"id": 2386, "seek": 1776556, "start": 17765.56, "end": 17773.56, "text": " of the original vectors b and c but also with the matrix m and in particular", "tokens": [50364, 295, 264, 3380, 18875, 272, 293, 269, 457, 611, 365, 264, 8141, 275, 293, 294, 1729, 50764], "temperature": 0.0, "avg_logprob": -0.10898323316831847, "compression_ratio": 1.3085106382978724, "no_speech_prob": 0.0025506524834781885}, {"id": 2387, "seek": 1776556, "start": 17779.72, "end": 17790.84, "text": " if s from same setup rm rn to rm is invertible", "tokens": [51072, 498, 262, 490, 912, 8657, 367, 76, 367, 77, 281, 367, 76, 307, 33966, 964, 51628], "temperature": 0.0, "avg_logprob": -0.10898323316831847, "compression_ratio": 1.3085106382978724, "no_speech_prob": 0.0025506524834781885}, {"id": 2388, "seek": 1779084, "start": 17791.56, "end": 17799.24, "text": " and we wrote our decomposition like this then we could ask what are the matrices and vectors", "tokens": [50400, 293, 321, 4114, 527, 48356, 411, 341, 550, 321, 727, 1029, 437, 366, 264, 32284, 293, 18875, 50784], "temperature": 0.0, "avg_logprob": -0.1289275360107422, "compression_ratio": 1.5140845070422535, "no_speech_prob": 0.0028894608840346336}, {"id": 2389, "seek": 1779084, "start": 17799.24, "end": 17804.52, "text": " associated to the inverse of this matrix and that is exactly", "tokens": [50784, 6615, 281, 264, 17340, 295, 341, 8141, 293, 300, 307, 2293, 51048], "temperature": 0.0, "avg_logprob": -0.1289275360107422, "compression_ratio": 1.5140845070422535, "no_speech_prob": 0.0028894608840346336}, {"id": 2390, "seek": 1779084, "start": 17807.8, "end": 17811.4, "text": " so s inverse let's write of y just because we're changing the", "tokens": [51212, 370, 262, 17340, 718, 311, 2464, 295, 288, 445, 570, 321, 434, 4473, 264, 51392], "temperature": 0.0, "avg_logprob": -0.1289275360107422, "compression_ratio": 1.5140845070422535, "no_speech_prob": 0.0028894608840346336}, {"id": 2391, "seek": 1781140, "start": 17812.2, "end": 17820.52, "text": " codomains with the domains we get the inverse of m plus well rather minus", "tokens": [50404, 17656, 298, 2315, 365, 264, 25514, 321, 483, 264, 17340, 295, 275, 1804, 731, 2831, 3175, 50820], "temperature": 0.0, "avg_logprob": -0.07323721779717339, "compression_ratio": 1.8923076923076922, "no_speech_prob": 0.02442142367362976}, {"id": 2392, "seek": 1781140, "start": 17821.32, "end": 17828.84, "text": " m inverse of the vector b and why does this work well if you just take s for instance and you", "tokens": [50860, 275, 17340, 295, 264, 8062, 272, 293, 983, 775, 341, 589, 731, 498, 291, 445, 747, 262, 337, 5197, 293, 291, 51236], "temperature": 0.0, "avg_logprob": -0.07323721779717339, "compression_ratio": 1.8923076923076922, "no_speech_prob": 0.02442142367362976}, {"id": 2393, "seek": 1781140, "start": 17828.84, "end": 17833.88, "text": " apply it to this result we know what this combination looks like we get m applied to this term which", "tokens": [51236, 3079, 309, 281, 341, 1874, 321, 458, 437, 341, 6562, 1542, 411, 321, 483, 275, 6456, 281, 341, 1433, 597, 51488], "temperature": 0.0, "avg_logprob": -0.07323721779717339, "compression_ratio": 1.8923076923076922, "no_speech_prob": 0.02442142367362976}, {"id": 2394, "seek": 1781140, "start": 17833.88, "end": 17839.480000000003, "text": " gives us just y back m applied to this term which gives us negative b but we have a plus b and those", "tokens": [51488, 2709, 505, 445, 288, 646, 275, 6456, 281, 341, 1433, 597, 2709, 505, 3671, 272, 457, 321, 362, 257, 1804, 272, 293, 729, 51768], "temperature": 0.0, "avg_logprob": -0.07323721779717339, "compression_ratio": 1.8923076923076922, "no_speech_prob": 0.02442142367362976}, {"id": 2395, "seek": 1783948, "start": 17839.48, "end": 17846.84, "text": " two cancel so just like the composition of linear transformations need not commute similarly the", "tokens": [50364, 732, 10373, 370, 445, 411, 264, 12686, 295, 8213, 34852, 643, 406, 36750, 14138, 264, 50732], "temperature": 0.0, "avg_logprob": -0.033851796633576695, "compression_ratio": 1.994413407821229, "no_speech_prob": 0.0026314465794712305}, {"id": 2396, "seek": 1783948, "start": 17846.84, "end": 17851.56, "text": " composition of affine transformations need not commute so let's look at an example", "tokens": [50732, 12686, 295, 2096, 533, 34852, 643, 406, 36750, 370, 718, 311, 574, 412, 364, 1365, 50968], "temperature": 0.0, "avg_logprob": -0.033851796633576695, "compression_ratio": 1.994413407821229, "no_speech_prob": 0.0026314465794712305}, {"id": 2397, "seek": 1783948, "start": 17854.12, "end": 17861.079999999998, "text": " and a common affine transformation is leave everything alone just translate by some vector", "tokens": [51096, 293, 257, 2689, 2096, 533, 9887, 307, 1856, 1203, 3312, 445, 13799, 538, 512, 8062, 51444], "temperature": 0.0, "avg_logprob": -0.033851796633576695, "compression_ratio": 1.994413407821229, "no_speech_prob": 0.0026314465794712305}, {"id": 2398, "seek": 1783948, "start": 17861.079999999998, "end": 17865.48, "text": " so let's just keep things very simple and let's assume that we translate by the vector", "tokens": [51444, 370, 718, 311, 445, 1066, 721, 588, 2199, 293, 718, 311, 6552, 300, 321, 13799, 538, 264, 8062, 51664], "temperature": 0.0, "avg_logprob": -0.033851796633576695, "compression_ratio": 1.994413407821229, "no_speech_prob": 0.0026314465794712305}, {"id": 2399, "seek": 1786548, "start": 17865.48, "end": 17868.36, "text": " one zero so we shift everything along the x axis", "tokens": [50364, 472, 4018, 370, 321, 5513, 1203, 2051, 264, 2031, 10298, 50508], "temperature": 0.0, "avg_logprob": -0.0965444842974345, "compression_ratio": 2.077720207253886, "no_speech_prob": 0.005554373376071453}, {"id": 2400, "seek": 1786548, "start": 17870.76, "end": 17877.16, "text": " in r2 so we shift everything along the x axis so let's say the vector let's draw a smiley face here", "tokens": [50628, 294, 367, 17, 370, 321, 5513, 1203, 2051, 264, 2031, 10298, 370, 718, 311, 584, 264, 8062, 718, 311, 2642, 257, 7563, 88, 1851, 510, 50948], "temperature": 0.0, "avg_logprob": -0.0965444842974345, "compression_ratio": 2.077720207253886, "no_speech_prob": 0.005554373376071453}, {"id": 2401, "seek": 1786548, "start": 17878.6, "end": 17883.32, "text": " this smiley face transforms under this transformation let's say smiley face is it", "tokens": [51020, 341, 7563, 88, 1851, 35592, 833, 341, 9887, 718, 311, 584, 7563, 88, 1851, 307, 309, 51256], "temperature": 0.0, "avg_logprob": -0.0965444842974345, "compression_ratio": 2.077720207253886, "no_speech_prob": 0.005554373376071453}, {"id": 2402, "seek": 1786548, "start": 17883.32, "end": 17888.2, "text": " contained in the unit box so i have to make this a little bit bigger and it gets translated along the", "tokens": [51256, 16212, 294, 264, 4985, 2424, 370, 741, 362, 281, 652, 341, 257, 707, 857, 3801, 293, 309, 2170, 16805, 2051, 264, 51500], "temperature": 0.0, "avg_logprob": -0.0965444842974345, "compression_ratio": 2.077720207253886, "no_speech_prob": 0.005554373376071453}, {"id": 2403, "seek": 1786548, "start": 17888.2, "end": 17893.399999999998, "text": " x axis in the positive direction so let's call this transformation t", "tokens": [51500, 2031, 10298, 294, 264, 3353, 3513, 370, 718, 311, 818, 341, 9887, 256, 51760], "temperature": 0.0, "avg_logprob": -0.0965444842974345, "compression_ratio": 2.077720207253886, "no_speech_prob": 0.005554373376071453}, {"id": 2404, "seek": 1789548, "start": 17895.48, "end": 17899.079999999998, "text": " another transformation that we can look at let's call this one s", "tokens": [50364, 1071, 9887, 300, 321, 393, 574, 412, 718, 311, 818, 341, 472, 262, 50544], "temperature": 0.0, "avg_logprob": -0.05689306008188348, "compression_ratio": 1.7945945945945947, "no_speech_prob": 0.0003053396940231323}, {"id": 2405, "seek": 1789548, "start": 17901.32, "end": 17909.079999999998, "text": " is rotation by 90 degrees so when we rotate the face looks something like this", "tokens": [50656, 307, 12447, 538, 4289, 5310, 370, 562, 321, 13121, 264, 1851, 1542, 746, 411, 341, 51044], "temperature": 0.0, "avg_logprob": -0.05689306008188348, "compression_ratio": 1.7945945945945947, "no_speech_prob": 0.0003053396940231323}, {"id": 2406, "seek": 1789548, "start": 17910.6, "end": 17917.0, "text": " and then we can ask what happens when we apply s and t in that order or if we apply t then s", "tokens": [51120, 293, 550, 321, 393, 1029, 437, 2314, 562, 321, 3079, 262, 293, 256, 294, 300, 1668, 420, 498, 321, 3079, 256, 550, 262, 51440], "temperature": 0.0, "avg_logprob": -0.05689306008188348, "compression_ratio": 1.7945945945945947, "no_speech_prob": 0.0003053396940231323}, {"id": 2407, "seek": 1789548, "start": 17917.72, "end": 17921.56, "text": " and what are the matrices and vectors associated to these transformations let's actually answer", "tokens": [51476, 293, 437, 366, 264, 32284, 293, 18875, 6615, 281, 613, 34852, 718, 311, 767, 1867, 51668], "temperature": 0.0, "avg_logprob": -0.05689306008188348, "compression_ratio": 1.7945945945945947, "no_speech_prob": 0.0003053396940231323}, {"id": 2408, "seek": 1792156, "start": 17921.56, "end": 17929.56, "text": " that question first so t of any vector x equals well it's just translate so it says", "tokens": [50364, 300, 1168, 700, 370, 256, 295, 604, 8062, 2031, 6915, 731, 309, 311, 445, 13799, 370, 309, 1619, 50764], "temperature": 0.0, "avg_logprob": -0.06254233419895172, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.0026315420400351286}, {"id": 2409, "seek": 1792156, "start": 17929.56, "end": 17935.48, "text": " leave everything in the plane alone so that's the matrix corresponding to the identity and", "tokens": [50764, 1856, 1203, 294, 264, 5720, 3312, 370, 300, 311, 264, 8141, 11760, 281, 264, 6575, 293, 51060], "temperature": 0.0, "avg_logprob": -0.06254233419895172, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.0026315420400351286}, {"id": 2410, "seek": 1792156, "start": 17935.48, "end": 17942.52, "text": " shift by the unit vector in the x direction so i call that e1 so remember e1 equals the vector", "tokens": [51060, 5513, 538, 264, 4985, 8062, 294, 264, 2031, 3513, 370, 741, 818, 300, 308, 16, 370, 1604, 308, 16, 6915, 264, 8062, 51412], "temperature": 0.0, "avg_logprob": -0.06254233419895172, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.0026315420400351286}, {"id": 2411, "seek": 1794252, "start": 17943.48, "end": 17954.2, "text": " 1 0 and s of x is the transformation that rotates by 90 degrees so i'm going to write", "tokens": [50412, 502, 1958, 293, 262, 295, 2031, 307, 264, 9887, 300, 42133, 538, 4289, 5310, 370, 741, 478, 516, 281, 2464, 50948], "temperature": 0.0, "avg_logprob": -0.12340225806603065, "compression_ratio": 1.7025316455696202, "no_speech_prob": 0.03114061802625656}, {"id": 2412, "seek": 1794252, "start": 17954.2, "end": 17963.08, "text": " that in matrix form because rotation by 90 degrees is 0 negative 1 1 0 applied to the", "tokens": [50948, 300, 294, 8141, 1254, 570, 12447, 538, 4289, 5310, 307, 1958, 3671, 502, 502, 1958, 6456, 281, 264, 51392], "temperature": 0.0, "avg_logprob": -0.12340225806603065, "compression_ratio": 1.7025316455696202, "no_speech_prob": 0.03114061802625656}, {"id": 2413, "seek": 1794252, "start": 17963.08, "end": 17969.64, "text": " vector x and the b here is 0 because this is in actually this is actually a linear transformation", "tokens": [51392, 8062, 2031, 293, 264, 272, 510, 307, 1958, 570, 341, 307, 294, 767, 341, 307, 767, 257, 8213, 9887, 51720], "temperature": 0.0, "avg_logprob": -0.12340225806603065, "compression_ratio": 1.7025316455696202, "no_speech_prob": 0.03114061802625656}, {"id": 2414, "seek": 1796964, "start": 17970.6, "end": 17978.68, "text": " so what happens when we compose these in different orders so let's just think about this imagine", "tokens": [50412, 370, 437, 2314, 562, 321, 35925, 613, 294, 819, 9470, 370, 718, 311, 445, 519, 466, 341, 3811, 50816], "temperature": 0.0, "avg_logprob": -0.13334430967058455, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0015010961797088385}, {"id": 2415, "seek": 1796964, "start": 17978.68, "end": 17987.32, "text": " you translate first and then you rotate this rotation is occurring about the origin so when", "tokens": [50816, 291, 13799, 700, 293, 550, 291, 13121, 341, 12447, 307, 18386, 466, 264, 4957, 370, 562, 51248], "temperature": 0.0, "avg_logprob": -0.13334430967058455, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0015010961797088385}, {"id": 2416, "seek": 1796964, "start": 17987.32, "end": 17994.12, "text": " we apply t first and then we apply s again we're rotating this picture by 90 degrees with respect", "tokens": [51248, 321, 3079, 256, 700, 293, 550, 321, 3079, 262, 797, 321, 434, 19627, 341, 3036, 538, 4289, 5310, 365, 3104, 51588], "temperature": 0.0, "avg_logprob": -0.13334430967058455, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0015010961797088385}, {"id": 2417, "seek": 1796964, "start": 17994.12, "end": 17999.16, "text": " to this origin so this face is actually going to be further out than it would have been if we", "tokens": [51588, 281, 341, 4957, 370, 341, 1851, 307, 767, 516, 281, 312, 3052, 484, 813, 309, 576, 362, 668, 498, 321, 51840], "temperature": 0.0, "avg_logprob": -0.13334430967058455, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0015010961797088385}, {"id": 2418, "seek": 1799916, "start": 17999.56, "end": 18004.28, "text": " applied the transfer if we apply the rotation initially and then translated you can already", "tokens": [50384, 6456, 264, 5003, 498, 321, 3079, 264, 12447, 9105, 293, 550, 16805, 291, 393, 1217, 50620], "temperature": 0.0, "avg_logprob": -0.07597151669588956, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.0008040464599616826}, {"id": 2419, "seek": 1799916, "start": 18004.28, "end": 18014.12, "text": " see the big difference between these two pictures so if we apply first t and s apply to this picture", "tokens": [50620, 536, 264, 955, 2649, 1296, 613, 732, 5242, 370, 498, 321, 3079, 700, 256, 293, 262, 3079, 281, 341, 3036, 51112], "temperature": 0.0, "avg_logprob": -0.07597151669588956, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.0008040464599616826}, {"id": 2420, "seek": 1799916, "start": 18014.12, "end": 18021.48, "text": " let's start with our initial configuration that what happens after you apply this will first you", "tokens": [51112, 718, 311, 722, 365, 527, 5883, 11694, 300, 437, 2314, 934, 291, 3079, 341, 486, 700, 291, 51480], "temperature": 0.0, "avg_logprob": -0.07597151669588956, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.0008040464599616826}, {"id": 2421, "seek": 1799916, "start": 18021.48, "end": 18027.4, "text": " rotate and then you translate so this translates everything to something that looks like this", "tokens": [51480, 13121, 293, 550, 291, 13799, 370, 341, 28468, 1203, 281, 746, 300, 1542, 411, 341, 51776], "temperature": 0.0, "avg_logprob": -0.07597151669588956, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.0008040464599616826}, {"id": 2422, "seek": 1802740, "start": 18027.56, "end": 18036.120000000003, "text": " but if instead we applied s after t to the same initial configuration", "tokens": [50372, 457, 498, 2602, 321, 6456, 262, 934, 256, 281, 264, 912, 5883, 11694, 50800], "temperature": 0.0, "avg_logprob": -0.09331387533268458, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0018675008323043585}, {"id": 2423, "seek": 1802740, "start": 18038.36, "end": 18043.08, "text": " well first we would translate and then we would rotate by 90 degrees that would look", "tokens": [50912, 731, 700, 321, 576, 13799, 293, 550, 321, 576, 13121, 538, 4289, 5310, 300, 576, 574, 51148], "temperature": 0.0, "avg_logprob": -0.09331387533268458, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0018675008323043585}, {"id": 2424, "seek": 1802740, "start": 18043.08, "end": 18046.600000000002, "text": " much much different so if i were to draw this as a unit grid", "tokens": [51148, 709, 709, 819, 370, 498, 741, 645, 281, 2642, 341, 382, 257, 4985, 10748, 51324], "temperature": 0.0, "avg_logprob": -0.09331387533268458, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0018675008323043585}, {"id": 2425, "seek": 1802740, "start": 18048.760000000002, "end": 18054.68, "text": " that face would now be in this box rotated by 90 degrees so it looks something like that", "tokens": [51432, 300, 1851, 576, 586, 312, 294, 341, 2424, 42146, 538, 4289, 5310, 370, 309, 1542, 746, 411, 300, 51728], "temperature": 0.0, "avg_logprob": -0.09331387533268458, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.0018675008323043585}, {"id": 2426, "seek": 1805468, "start": 18054.68, "end": 18061.8, "text": " so now let's just check the math out to make sure that this is consistent with these geometric", "tokens": [50364, 370, 586, 718, 311, 445, 1520, 264, 5221, 484, 281, 652, 988, 300, 341, 307, 8398, 365, 613, 33246, 50720], "temperature": 0.0, "avg_logprob": -0.09847681982475415, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0005033231573179364}, {"id": 2427, "seek": 1805468, "start": 18061.8, "end": 18068.760000000002, "text": " interpretations so if we apply t after s to any vector x", "tokens": [50720, 37547, 370, 498, 321, 3079, 256, 934, 262, 281, 604, 8062, 2031, 51068], "temperature": 0.0, "avg_logprob": -0.09847681982475415, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0005033231573179364}, {"id": 2428, "seek": 1805468, "start": 18071.56, "end": 18079.32, "text": " what do we get well t says first translate then rotate so we end up translating by x", "tokens": [51208, 437, 360, 321, 483, 731, 256, 1619, 700, 13799, 550, 13121, 370, 321, 917, 493, 35030, 538, 2031, 51596], "temperature": 0.0, "avg_logprob": -0.09847681982475415, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0005033231573179364}, {"id": 2429, "seek": 1807932, "start": 18079.88, "end": 18089.32, "text": " then rotating because we do matrix multiplication and the resulting vector b is just e1 so we get", "tokens": [50392, 550, 19627, 570, 321, 360, 8141, 27290, 293, 264, 16505, 8062, 272, 307, 445, 308, 16, 370, 321, 483, 50864], "temperature": 0.0, "avg_logprob": -0.1153887282026575, "compression_ratio": 1.4485294117647058, "no_speech_prob": 0.0019877024460583925}, {"id": 2430, "seek": 1807932, "start": 18089.32, "end": 18100.28, "text": " rotation apply to x plus e1 which is exactly what we expected from our picture here if we did it in", "tokens": [50864, 12447, 3079, 281, 2031, 1804, 308, 16, 597, 307, 2293, 437, 321, 5176, 490, 527, 3036, 510, 498, 321, 630, 309, 294, 51412], "temperature": 0.0, "avg_logprob": -0.1153887282026575, "compression_ratio": 1.4485294117647058, "no_speech_prob": 0.0019877024460583925}, {"id": 2431, "seek": 1810028, "start": 18100.28, "end": 18109.96, "text": " the other order well in that case first we translate and then we rotate and when we rotate", "tokens": [50364, 264, 661, 1668, 731, 294, 300, 1389, 700, 321, 13799, 293, 550, 321, 13121, 293, 562, 321, 13121, 50848], "temperature": 0.0, "avg_logprob": -0.04530681388965552, "compression_ratio": 1.8843537414965987, "no_speech_prob": 0.004198654554784298}, {"id": 2432, "seek": 1810028, "start": 18109.96, "end": 18114.92, "text": " we not only apply the rotation to our initial vector x but we also apply the rotation to the", "tokens": [50848, 321, 406, 787, 3079, 264, 12447, 281, 527, 5883, 8062, 2031, 457, 321, 611, 3079, 264, 12447, 281, 264, 51096], "temperature": 0.0, "avg_logprob": -0.04530681388965552, "compression_ratio": 1.8843537414965987, "no_speech_prob": 0.004198654554784298}, {"id": 2433, "seek": 1810028, "start": 18114.92, "end": 18123.0, "text": " vector e1 and e1 gets rotated by a 90 degree rotation to the vector e2 so in this case we get", "tokens": [51096, 8062, 308, 16, 293, 308, 16, 2170, 42146, 538, 257, 4289, 4314, 12447, 281, 264, 8062, 308, 17, 370, 294, 341, 1389, 321, 483, 51500], "temperature": 0.0, "avg_logprob": -0.04530681388965552, "compression_ratio": 1.8843537414965987, "no_speech_prob": 0.004198654554784298}, {"id": 2434, "seek": 1812300, "start": 18123.56, "end": 18136.68, "text": " this instead so and this is consistent with this picture because if we rotate first our face ends", "tokens": [50392, 341, 2602, 370, 293, 341, 307, 8398, 365, 341, 3036, 570, 498, 321, 13121, 700, 527, 1851, 5314, 51048], "temperature": 0.0, "avg_logprob": -0.08414180036904155, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.013635632582008839}, {"id": 2435, "seek": 1812300, "start": 18136.68, "end": 18141.16, "text": " up somewhere here like in this picture and then how do we get from this picture to this one we", "tokens": [51048, 493, 4079, 510, 411, 294, 341, 3036, 293, 550, 577, 360, 321, 483, 490, 341, 3036, 281, 341, 472, 321, 51272], "temperature": 0.0, "avg_logprob": -0.08414180036904155, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.013635632582008839}, {"id": 2436, "seek": 1812300, "start": 18141.16, "end": 18150.36, "text": " translate up by a unit vector by the unit vector e2 the next few videos are going to be a sort of", "tokens": [51272, 13799, 493, 538, 257, 4985, 8062, 538, 264, 4985, 8062, 308, 17, 264, 958, 1326, 2145, 366, 516, 281, 312, 257, 1333, 295, 51732], "temperature": 0.0, "avg_logprob": -0.08414180036904155, "compression_ratio": 1.7365269461077844, "no_speech_prob": 0.013635632582008839}, {"id": 2437, "seek": 1815036, "start": 18150.440000000002, "end": 18157.8, "text": " combination of probability theory and matrix algebra and we'll start by talking about finite", "tokens": [50368, 6562, 295, 8482, 5261, 293, 8141, 21989, 293, 321, 603, 722, 538, 1417, 466, 19362, 50736], "temperature": 0.0, "avg_logprob": -0.05663171268644787, "compression_ratio": 1.5706214689265536, "no_speech_prob": 0.008984144777059555}, {"id": 2438, "seek": 1815036, "start": 18157.8, "end": 18162.760000000002, "text": " sets and stochastic matrices or what I call stochastic maps and we'll try to get through", "tokens": [50736, 6352, 293, 342, 8997, 2750, 32284, 420, 437, 286, 818, 342, 8997, 2750, 11317, 293, 321, 603, 853, 281, 483, 807, 50984], "temperature": 0.0, "avg_logprob": -0.05663171268644787, "compression_ratio": 1.5706214689265536, "no_speech_prob": 0.008984144777059555}, {"id": 2439, "seek": 1815036, "start": 18162.760000000002, "end": 18170.04, "text": " a lot of interesting topics so first I just want to make sure that we have all these definitions", "tokens": [50984, 257, 688, 295, 1880, 8378, 370, 700, 286, 445, 528, 281, 652, 988, 300, 321, 362, 439, 613, 21988, 51348], "temperature": 0.0, "avg_logprob": -0.05663171268644787, "compression_ratio": 1.5706214689265536, "no_speech_prob": 0.008984144777059555}, {"id": 2440, "seek": 1817004, "start": 18170.04, "end": 18175.8, "text": " at hand and the first one that I want to make is a probability measure", "tokens": [50364, 412, 1011, 293, 264, 700, 472, 300, 286, 528, 281, 652, 307, 257, 8482, 3481, 50652], "temperature": 0.0, "avg_logprob": -0.042769987136125565, "compression_ratio": 1.6729559748427674, "no_speech_prob": 0.060080815106630325}, {"id": 2441, "seek": 1817004, "start": 18179.72, "end": 18186.68, "text": " and for simplicity we will be working with finite sets all the time so a probability measure on x", "tokens": [50848, 293, 337, 25632, 321, 486, 312, 1364, 365, 19362, 6352, 439, 264, 565, 370, 257, 8482, 3481, 322, 2031, 51196], "temperature": 0.0, "avg_logprob": -0.042769987136125565, "compression_ratio": 1.6729559748427674, "no_speech_prob": 0.060080815106630325}, {"id": 2442, "seek": 1817004, "start": 18186.68, "end": 18198.04, "text": " where here x is a finite set is a function that takes every element of x and it gives me a number", "tokens": [51196, 689, 510, 2031, 307, 257, 19362, 992, 307, 257, 2445, 300, 2516, 633, 4478, 295, 2031, 293, 309, 2709, 385, 257, 1230, 51764], "temperature": 0.0, "avg_logprob": -0.042769987136125565, "compression_ratio": 1.6729559748427674, "no_speech_prob": 0.060080815106630325}, {"id": 2443, "seek": 1819804, "start": 18198.440000000002, "end": 18203.8, "text": " and that number is between 0 and 1 and the sum of these numbers", "tokens": [50384, 293, 300, 1230, 307, 1296, 1958, 293, 502, 293, 264, 2408, 295, 613, 3547, 50652], "temperature": 0.0, "avg_logprob": -0.08897210634671725, "compression_ratio": 1.6163522012578617, "no_speech_prob": 0.010651827789843082}, {"id": 2444, "seek": 1819804, "start": 18208.04, "end": 18213.8, "text": " when I sum over all elements in x and let me just set notation that when I apply this probability", "tokens": [50864, 562, 286, 2408, 670, 439, 4959, 294, 2031, 293, 718, 385, 445, 992, 24657, 300, 562, 286, 3079, 341, 8482, 51152], "temperature": 0.0, "avg_logprob": -0.08897210634671725, "compression_ratio": 1.6163522012578617, "no_speech_prob": 0.010651827789843082}, {"id": 2445, "seek": 1819804, "start": 18213.8, "end": 18220.84, "text": " measure to x instead of writing p of x I will write p subscript x so such that the sum of these", "tokens": [51152, 3481, 281, 2031, 2602, 295, 3579, 280, 295, 2031, 286, 486, 2464, 280, 2325, 662, 2031, 370, 1270, 300, 264, 2408, 295, 613, 51504], "temperature": 0.0, "avg_logprob": -0.08897210634671725, "compression_ratio": 1.6163522012578617, "no_speech_prob": 0.010651827789843082}, {"id": 2446, "seek": 1822084, "start": 18220.84, "end": 18229.0, "text": " numbers equals 1 and a stochastic map is something very similar to this", "tokens": [50364, 3547, 6915, 502, 293, 257, 342, 8997, 2750, 4471, 307, 746, 588, 2531, 281, 341, 50772], "temperature": 0.0, "avg_logprob": -0.14432113700442845, "compression_ratio": 1.3545454545454545, "no_speech_prob": 0.008061553351581097}, {"id": 2447, "seek": 1822084, "start": 18238.12, "end": 18242.76, "text": " ah and let me even set some more notation the set of all probability measures", "tokens": [51228, 3716, 293, 718, 385, 754, 992, 512, 544, 24657, 264, 992, 295, 439, 8482, 8000, 51460], "temperature": 0.0, "avg_logprob": -0.14432113700442845, "compression_ratio": 1.3545454545454545, "no_speech_prob": 0.008061553351581097}, {"id": 2448, "seek": 1824276, "start": 18242.76, "end": 18255.879999999997, "text": " on x is denoted by px", "tokens": [50364, 322, 2031, 307, 1441, 23325, 538, 280, 87, 51020], "temperature": 0.0, "avg_logprob": -0.12748890538369456, "compression_ratio": 1.1710526315789473, "no_speech_prob": 0.013019855134189129}, {"id": 2449, "seek": 1824276, "start": 18258.199999999997, "end": 18267.719999999998, "text": " so a stochastic map from x to y so another finite set is a function", "tokens": [51136, 370, 257, 342, 8997, 2750, 4471, 490, 2031, 281, 288, 370, 1071, 19362, 992, 307, 257, 2445, 51612], "temperature": 0.0, "avg_logprob": -0.12748890538369456, "compression_ratio": 1.1710526315789473, "no_speech_prob": 0.013019855134189129}, {"id": 2450, "seek": 1826772, "start": 18267.72, "end": 18281.0, "text": " from x to probability measures on y let's call that f and", "tokens": [50364, 490, 2031, 281, 8482, 8000, 322, 288, 718, 311, 818, 300, 283, 293, 51028], "temperature": 0.0, "avg_logprob": -0.07458969463001598, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.002359563484787941}, {"id": 2451, "seek": 1826772, "start": 18283.4, "end": 18288.760000000002, "text": " we're going to introduce a convenient notation for such stochastic maps", "tokens": [51148, 321, 434, 516, 281, 5366, 257, 10851, 24657, 337, 1270, 342, 8997, 2750, 11317, 51416], "temperature": 0.0, "avg_logprob": -0.07458969463001598, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.002359563484787941}, {"id": 2452, "seek": 1826772, "start": 18290.2, "end": 18296.280000000002, "text": " so first let's explain a convenient notation for how to write f so if we take an element x", "tokens": [51488, 370, 700, 718, 311, 2903, 257, 10851, 24657, 337, 577, 281, 2464, 283, 370, 498, 321, 747, 364, 4478, 2031, 51792], "temperature": 0.0, "avg_logprob": -0.07458969463001598, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.002359563484787941}, {"id": 2453, "seek": 1829628, "start": 18296.28, "end": 18302.76, "text": " and we apply it we'll get a probability measure on y for now let's just call this f of x", "tokens": [50364, 293, 321, 3079, 309, 321, 603, 483, 257, 8482, 3481, 322, 288, 337, 586, 718, 311, 445, 818, 341, 283, 295, 2031, 50688], "temperature": 0.0, "avg_logprob": -0.04705682638529185, "compression_ratio": 1.73125, "no_speech_prob": 0.005728924181312323}, {"id": 2454, "seek": 1829628, "start": 18303.96, "end": 18308.92, "text": " because this is a probability measure it takes an element y and y and gives me a number between", "tokens": [50748, 570, 341, 307, 257, 8482, 3481, 309, 2516, 364, 4478, 288, 293, 288, 293, 2709, 385, 257, 1230, 1296, 50996], "temperature": 0.0, "avg_logprob": -0.04705682638529185, "compression_ratio": 1.73125, "no_speech_prob": 0.005728924181312323}, {"id": 2455, "seek": 1829628, "start": 18308.92, "end": 18321.719999999998, "text": " 0 and 1 so this takes an element y and maps it to f of x of y now it's a little bit annoying", "tokens": [50996, 1958, 293, 502, 370, 341, 2516, 364, 4478, 288, 293, 11317, 309, 281, 283, 295, 2031, 295, 288, 586, 309, 311, 257, 707, 857, 11304, 51636], "temperature": 0.0, "avg_logprob": -0.04705682638529185, "compression_ratio": 1.73125, "no_speech_prob": 0.005728924181312323}, {"id": 2456, "seek": 1832172, "start": 18321.72, "end": 18326.68, "text": " to write something like this and potentially confusing so instead of writing this we will write", "tokens": [50364, 281, 2464, 746, 411, 341, 293, 7263, 13181, 370, 2602, 295, 3579, 341, 321, 486, 2464, 50612], "temperature": 0.0, "avg_logprob": -0.05699418605059043, "compression_ratio": 1.728110599078341, "no_speech_prob": 0.05579814314842224}, {"id": 2457, "seek": 1832172, "start": 18327.72, "end": 18335.24, "text": " f subscript y x and the reason we write the y on the left is because we will end up in y", "tokens": [50664, 283, 2325, 662, 288, 2031, 293, 264, 1778, 321, 2464, 264, 288, 322, 264, 1411, 307, 570, 321, 486, 917, 493, 294, 288, 51040], "temperature": 0.0, "avg_logprob": -0.05699418605059043, "compression_ratio": 1.728110599078341, "no_speech_prob": 0.05579814314842224}, {"id": 2458, "seek": 1832172, "start": 18335.88, "end": 18340.84, "text": " and x on the right because we started in x we'll see why this is convenient in a moment when we", "tokens": [51072, 293, 2031, 322, 264, 558, 570, 321, 1409, 294, 2031, 321, 603, 536, 983, 341, 307, 10851, 294, 257, 1623, 562, 321, 51320], "temperature": 0.0, "avg_logprob": -0.05699418605059043, "compression_ratio": 1.728110599078341, "no_speech_prob": 0.05579814314842224}, {"id": 2459, "seek": 1832172, "start": 18340.84, "end": 18347.88, "text": " talk about composition of stochastic maps and we'll also introduce graphical notation for this", "tokens": [51320, 751, 466, 12686, 295, 342, 8997, 2750, 11317, 293, 321, 603, 611, 5366, 35942, 24657, 337, 341, 51672], "temperature": 0.0, "avg_logprob": -0.05699418605059043, "compression_ratio": 1.728110599078341, "no_speech_prob": 0.05579814314842224}, {"id": 2460, "seek": 1835172, "start": 18352.68, "end": 18359.64, "text": " instead of writing a map from x to py we will replace this by a map from x to y", "tokens": [50412, 2602, 295, 3579, 257, 4471, 490, 2031, 281, 10664, 321, 486, 7406, 341, 538, 257, 4471, 490, 2031, 281, 288, 50760], "temperature": 0.0, "avg_logprob": -0.08329742295401436, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.0008040479733608663}, {"id": 2461, "seek": 1835172, "start": 18360.68, "end": 18367.32, "text": " but we'll use slightly different notation for our arrows and we'll make them squiggly arrows like this", "tokens": [50812, 457, 321, 603, 764, 4748, 819, 24657, 337, 527, 19669, 293, 321, 603, 652, 552, 2339, 46737, 19669, 411, 341, 51144], "temperature": 0.0, "avg_logprob": -0.08329742295401436, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.0008040479733608663}, {"id": 2462, "seek": 1835172, "start": 18370.920000000002, "end": 18377.08, "text": " and the reason we want to do this is because there's a very nice example of a stochastic map", "tokens": [51324, 293, 264, 1778, 321, 528, 281, 360, 341, 307, 570, 456, 311, 257, 588, 1481, 1365, 295, 257, 342, 8997, 2750, 4471, 51632], "temperature": 0.0, "avg_logprob": -0.08329742295401436, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.0008040479733608663}, {"id": 2463, "seek": 1837708, "start": 18377.800000000003, "end": 18383.4, "text": " if we have a function so if x to y is a function", "tokens": [50400, 498, 321, 362, 257, 2445, 370, 498, 2031, 281, 288, 307, 257, 2445, 50680], "temperature": 0.0, "avg_logprob": -0.0767310094833374, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.004468129947781563}, {"id": 2464, "seek": 1837708, "start": 18386.760000000002, "end": 18389.320000000003, "text": " this actually gives us a natural stochastic map", "tokens": [50848, 341, 767, 2709, 505, 257, 3303, 342, 8997, 2750, 4471, 50976], "temperature": 0.0, "avg_logprob": -0.0767310094833374, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.004468129947781563}, {"id": 2465, "seek": 1837708, "start": 18395.56, "end": 18400.52, "text": " and just for this example we'll call it delta f oops these should be squiggly arrows now", "tokens": [51288, 293, 445, 337, 341, 1365, 321, 603, 818, 309, 8289, 283, 34166, 613, 820, 312, 2339, 46737, 19669, 586, 51536], "temperature": 0.0, "avg_logprob": -0.0767310094833374, "compression_ratio": 1.434108527131783, "no_speech_prob": 0.004468129947781563}, {"id": 2466, "seek": 1840052, "start": 18400.52, "end": 18411.4, "text": " so delta f to y which sends an element x to a probability measure on y and what should that", "tokens": [50364, 370, 8289, 283, 281, 288, 597, 14790, 364, 4478, 2031, 281, 257, 8482, 3481, 322, 288, 293, 437, 820, 300, 50908], "temperature": 0.0, "avg_logprob": -0.07917513363603232, "compression_ratio": 1.7806451612903227, "no_speech_prob": 0.013018922880291939}, {"id": 2467, "seek": 1840052, "start": 18411.4, "end": 18417.72, "text": " probability measure be well if i take let's call this delta f for now if i take an element in y", "tokens": [50908, 8482, 3481, 312, 731, 498, 741, 747, 718, 311, 818, 341, 8289, 283, 337, 586, 498, 741, 747, 364, 4478, 294, 288, 51224], "temperature": 0.0, "avg_logprob": -0.07917513363603232, "compression_ratio": 1.7806451612903227, "no_speech_prob": 0.013018922880291939}, {"id": 2468, "seek": 1840052, "start": 18418.920000000002, "end": 18424.28, "text": " and i plug in our initial element x so again we're using this notation here then this is", "tokens": [51284, 293, 741, 5452, 294, 527, 5883, 4478, 2031, 370, 797, 321, 434, 1228, 341, 24657, 510, 550, 341, 307, 51552], "temperature": 0.0, "avg_logprob": -0.07917513363603232, "compression_ratio": 1.7806451612903227, "no_speech_prob": 0.013018922880291939}, {"id": 2469, "seek": 1842428, "start": 18424.28, "end": 18433.559999999998, "text": " defined to be the chronicer delta so if we take the element x apply f to it we know what that is", "tokens": [50364, 7642, 281, 312, 264, 14493, 260, 8289, 370, 498, 321, 747, 264, 4478, 2031, 3079, 283, 281, 309, 321, 458, 437, 300, 307, 50828], "temperature": 0.0, "avg_logprob": -0.04190582978098016, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.013221971690654755}, {"id": 2470, "seek": 1842428, "start": 18433.559999999998, "end": 18439.8, "text": " because we have a function already and then we plug in y so visually how do i think of something", "tokens": [50828, 570, 321, 362, 257, 2445, 1217, 293, 550, 321, 5452, 294, 288, 370, 19622, 577, 360, 741, 519, 295, 746, 51140], "temperature": 0.0, "avg_logprob": -0.04190582978098016, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.013221971690654755}, {"id": 2471, "seek": 1842428, "start": 18439.8, "end": 18446.44, "text": " like this well a stochastic map is telling us if we start off in x let me draw the arrows", "tokens": [51140, 411, 341, 731, 257, 342, 8997, 2750, 4471, 307, 3585, 505, 498, 321, 722, 766, 294, 2031, 718, 385, 2642, 264, 19669, 51472], "temperature": 0.0, "avg_logprob": -0.04190582978098016, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.013221971690654755}, {"id": 2472, "seek": 1842428, "start": 18446.44, "end": 18453.32, "text": " backwards for a moment then it takes an element in x and it spreads that element out over y by", "tokens": [51472, 12204, 337, 257, 1623, 550, 309, 2516, 364, 4478, 294, 2031, 293, 309, 25728, 300, 4478, 484, 670, 288, 538, 51816], "temperature": 0.0, "avg_logprob": -0.04190582978098016, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.013221971690654755}, {"id": 2473, "seek": 1845332, "start": 18453.32, "end": 18460.04, "text": " giving us a probability distribution on y but if we already have a function then we know where", "tokens": [50364, 2902, 505, 257, 8482, 7316, 322, 288, 457, 498, 321, 1217, 362, 257, 2445, 550, 321, 458, 689, 50700], "temperature": 0.0, "avg_logprob": -0.05141256021898846, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0005033115739934146}, {"id": 2474, "seek": 1845332, "start": 18460.04, "end": 18467.56, "text": " that element x goes it goes to a specific element which we call f of x and therefore it does give", "tokens": [50700, 300, 4478, 2031, 1709, 309, 1709, 281, 257, 2685, 4478, 597, 321, 818, 283, 295, 2031, 293, 4412, 309, 775, 976, 51076], "temperature": 0.0, "avg_logprob": -0.05141256021898846, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0005033115739934146}, {"id": 2475, "seek": 1845332, "start": 18467.56, "end": 18474.84, "text": " us a probability distribution and that probability distribution is one when we evaluated at f of x", "tokens": [51076, 505, 257, 8482, 7316, 293, 300, 8482, 7316, 307, 472, 562, 321, 25509, 412, 283, 295, 2031, 51440], "temperature": 0.0, "avg_logprob": -0.05141256021898846, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0005033115739934146}, {"id": 2476, "seek": 1845332, "start": 18474.84, "end": 18481.4, "text": " and zero everywhere else so i think of this as a deterministic process in some sense because we know", "tokens": [51440, 293, 4018, 5315, 1646, 370, 741, 519, 295, 341, 382, 257, 15957, 3142, 1399, 294, 512, 2020, 570, 321, 458, 51768], "temperature": 0.0, "avg_logprob": -0.05141256021898846, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0005033115739934146}, {"id": 2477, "seek": 1848140, "start": 18481.4, "end": 18487.960000000003, "text": " given an input we know exactly what the output would be with 100 probability", "tokens": [50364, 2212, 364, 4846, 321, 458, 2293, 437, 264, 5598, 576, 312, 365, 2319, 8482, 50692], "temperature": 0.0, "avg_logprob": -0.07090918962345567, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.004904840141534805}, {"id": 2478, "seek": 1848140, "start": 18489.640000000003, "end": 18495.88, "text": " so we notice that there's this close relationship between functions and stochastic maps in fact", "tokens": [50776, 370, 321, 3449, 300, 456, 311, 341, 1998, 2480, 1296, 6828, 293, 342, 8997, 2750, 11317, 294, 1186, 51088], "temperature": 0.0, "avg_logprob": -0.07090918962345567, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.004904840141534805}, {"id": 2479, "seek": 1848140, "start": 18495.88, "end": 18500.760000000002, "text": " functions are special kinds of stochastic maps and instead of writing delta f all the time", "tokens": [51088, 6828, 366, 2121, 3685, 295, 342, 8997, 2750, 11317, 293, 2602, 295, 3579, 8289, 283, 439, 264, 565, 51332], "temperature": 0.0, "avg_logprob": -0.07090918962345567, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.004904840141534805}, {"id": 2480, "seek": 1848140, "start": 18500.760000000002, "end": 18511.16, "text": " we'll simply write xf and we will think of this as a stochastic map but we'll write it as a straight", "tokens": [51332, 321, 603, 2935, 2464, 2031, 69, 293, 321, 486, 519, 295, 341, 382, 257, 342, 8997, 2750, 4471, 457, 321, 603, 2464, 309, 382, 257, 2997, 51852], "temperature": 0.0, "avg_logprob": -0.07090918962345567, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.004904840141534805}, {"id": 2481, "seek": 1851116, "start": 18511.16, "end": 18516.52, "text": " arrow another example", "tokens": [50364, 11610, 1071, 1365, 50632], "temperature": 0.0, "avg_logprob": -0.1509070110321045, "compression_ratio": 1.1388888888888888, "no_speech_prob": 0.009706970304250717}, {"id": 2482, "seek": 1851116, "start": 18521.0, "end": 18526.76, "text": " there is a one-to-one correspondence between", "tokens": [50856, 456, 307, 257, 472, 12, 1353, 12, 546, 38135, 1296, 51144], "temperature": 0.0, "avg_logprob": -0.1509070110321045, "compression_ratio": 1.1388888888888888, "no_speech_prob": 0.009706970304250717}, {"id": 2483, "seek": 1851116, "start": 18529.079999999998, "end": 18530.28, "text": " stochastic maps", "tokens": [51260, 342, 8997, 2750, 11317, 51320], "temperature": 0.0, "avg_logprob": -0.1509070110321045, "compression_ratio": 1.1388888888888888, "no_speech_prob": 0.009706970304250717}, {"id": 2484, "seek": 1853028, "start": 18530.76, "end": 18542.039999999997, "text": " from a single element set into another finite set x so this is going to be my notation for", "tokens": [50388, 490, 257, 2167, 4478, 992, 666, 1071, 19362, 992, 2031, 370, 341, 307, 516, 281, 312, 452, 24657, 337, 50952], "temperature": 0.0, "avg_logprob": -0.18609368801116943, "compression_ratio": 1.4793388429752066, "no_speech_prob": 0.03621498495340347}, {"id": 2485, "seek": 1853028, "start": 18542.039999999997, "end": 18550.12, "text": " a set containing a single element which i'm just calling bullet and probability measures", "tokens": [50952, 257, 992, 19273, 257, 2167, 4478, 597, 741, 478, 445, 5141, 11632, 293, 8482, 8000, 51356], "temperature": 0.0, "avg_logprob": -0.18609368801116943, "compression_ratio": 1.4793388429752066, "no_speech_prob": 0.03621498495340347}, {"id": 2486, "seek": 1855012, "start": 18550.12, "end": 18562.84, "text": " on x why is that well if i have a stochastic map i apply an element of it i apply it to an element", "tokens": [50364, 322, 2031, 983, 307, 300, 731, 498, 741, 362, 257, 342, 8997, 2750, 4471, 741, 3079, 364, 4478, 295, 309, 741, 3079, 309, 281, 364, 4478, 51000], "temperature": 0.0, "avg_logprob": -0.0665169915000161, "compression_ratio": 2.0454545454545454, "no_speech_prob": 0.009558861143887043}, {"id": 2487, "seek": 1855012, "start": 18562.84, "end": 18567.719999999998, "text": " of the domain and that gives me a probability measure on x but this only has one element", "tokens": [51000, 295, 264, 9274, 293, 300, 2709, 385, 257, 8482, 3481, 322, 2031, 457, 341, 787, 575, 472, 4478, 51244], "temperature": 0.0, "avg_logprob": -0.0665169915000161, "compression_ratio": 2.0454545454545454, "no_speech_prob": 0.009558861143887043}, {"id": 2488, "seek": 1855012, "start": 18567.719999999998, "end": 18572.44, "text": " so i only get one probability measure so in general a stochastic map is you can think of", "tokens": [51244, 370, 741, 787, 483, 472, 8482, 3481, 370, 294, 2674, 257, 342, 8997, 2750, 4471, 307, 291, 393, 519, 295, 51480], "temperature": 0.0, "avg_logprob": -0.0665169915000161, "compression_ratio": 2.0454545454545454, "no_speech_prob": 0.009558861143887043}, {"id": 2489, "seek": 1855012, "start": 18572.44, "end": 18577.96, "text": " it as a family of probability measures indexed by the domain of that stochastic map", "tokens": [51480, 309, 382, 257, 1605, 295, 8482, 8000, 8186, 292, 538, 264, 9274, 295, 300, 342, 8997, 2750, 4471, 51756], "temperature": 0.0, "avg_logprob": -0.0665169915000161, "compression_ratio": 2.0454545454545454, "no_speech_prob": 0.009558861143887043}, {"id": 2490, "seek": 1858012, "start": 18580.12, "end": 18583.079999999998, "text": " stochastic maps define conditional probabilities", "tokens": [50364, 342, 8997, 2750, 11317, 6964, 27708, 33783, 50512], "temperature": 0.0, "avg_logprob": -0.18759101629257202, "compression_ratio": 1.5, "no_speech_prob": 0.0003569631662685424}, {"id": 2491, "seek": 1858012, "start": 18591.16, "end": 18595.559999999998, "text": " or at least some kind of restricted notion of conditional probabilities", "tokens": [50916, 420, 412, 1935, 512, 733, 295, 20608, 10710, 295, 27708, 33783, 51136], "temperature": 0.0, "avg_logprob": -0.18759101629257202, "compression_ratio": 1.5, "no_speech_prob": 0.0003569631662685424}, {"id": 2492, "seek": 1859556, "start": 18595.88, "end": 18614.52, "text": " and the reason is because f y x you can think of this as the probability of y occurring given", "tokens": [50380, 293, 264, 1778, 307, 570, 283, 288, 2031, 291, 393, 519, 295, 341, 382, 264, 8482, 295, 288, 18386, 2212, 51312], "temperature": 0.0, "avg_logprob": -0.10998762737620961, "compression_ratio": 1.575, "no_speech_prob": 0.03409546613693237}, {"id": 2493, "seek": 1859556, "start": 18614.52, "end": 18624.920000000002, "text": " that x has occurred and you can if you know if you have a definition of conditional probability", "tokens": [51312, 300, 2031, 575, 11068, 293, 291, 393, 498, 291, 458, 498, 291, 362, 257, 7123, 295, 27708, 8482, 51832], "temperature": 0.0, "avg_logprob": -0.10998762737620961, "compression_ratio": 1.575, "no_speech_prob": 0.03409546613693237}, {"id": 2494, "seek": 1862492, "start": 18624.92, "end": 18630.92, "text": " and you are looking at single element events then this definition coincides with the one", "tokens": [50364, 293, 291, 366, 1237, 412, 2167, 4478, 3931, 550, 341, 7123, 13001, 1875, 365, 264, 472, 50664], "temperature": 0.0, "avg_logprob": -0.052352718160122255, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.0015485858311876655}, {"id": 2495, "seek": 1862492, "start": 18630.92, "end": 18637.879999999997, "text": " you're thinking of for finite sets and again single element events but if you're not then", "tokens": [50664, 291, 434, 1953, 295, 337, 19362, 6352, 293, 797, 2167, 4478, 3931, 457, 498, 291, 434, 406, 550, 51012], "temperature": 0.0, "avg_logprob": -0.052352718160122255, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.0015485858311876655}, {"id": 2496, "seek": 1862492, "start": 18637.879999999997, "end": 18645.64, "text": " we're going to think of this as our notion of a conditional probability so for being very concrete", "tokens": [51012, 321, 434, 516, 281, 519, 295, 341, 382, 527, 10710, 295, 257, 27708, 8482, 370, 337, 885, 588, 9859, 51400], "temperature": 0.0, "avg_logprob": -0.052352718160122255, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.0015485858311876655}, {"id": 2497, "seek": 1862492, "start": 18647.079999999998, "end": 18653.32, "text": " let's take x to be the set whose elements are so pick your favorite supermarket", "tokens": [51472, 718, 311, 747, 2031, 281, 312, 264, 992, 6104, 4959, 366, 370, 1888, 428, 2954, 25180, 51784], "temperature": 0.0, "avg_logprob": -0.052352718160122255, "compression_ratio": 1.7673267326732673, "no_speech_prob": 0.0015485858311876655}, {"id": 2498, "seek": 1865332, "start": 18653.32, "end": 18657.239999999998, "text": " and let's say there's a good sale at that supermarket", "tokens": [50364, 293, 718, 311, 584, 456, 311, 257, 665, 8680, 412, 300, 25180, 50560], "temperature": 0.0, "avg_logprob": -0.06950037521228455, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.0031725054141134024}, {"id": 2499, "seek": 1865332, "start": 18661.16, "end": 18665.48, "text": " and let me think of that as one element of this set x and the other element is going to be", "tokens": [50756, 293, 718, 385, 519, 295, 300, 382, 472, 4478, 295, 341, 992, 2031, 293, 264, 661, 4478, 307, 516, 281, 312, 50972], "temperature": 0.0, "avg_logprob": -0.06950037521228455, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.0031725054141134024}, {"id": 2500, "seek": 1865332, "start": 18667.4, "end": 18673.64, "text": " a not great sale or a not good sale at that same supermarket so two elements", "tokens": [51068, 257, 406, 869, 8680, 420, 257, 406, 665, 8680, 412, 300, 912, 25180, 370, 732, 4959, 51380], "temperature": 0.0, "avg_logprob": -0.06950037521228455, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.0031725054141134024}, {"id": 2501, "seek": 1867364, "start": 18673.64, "end": 18678.36, "text": " and let y be", "tokens": [50364, 293, 718, 288, 312, 50600], "temperature": 0.0, "avg_logprob": -0.1176139363702738, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.042085200548172}, {"id": 2502, "seek": 1867364, "start": 18681.079999999998, "end": 18686.04, "text": " the elements that state whether I go to the supermarket this week or you go or whatever", "tokens": [50736, 264, 4959, 300, 1785, 1968, 286, 352, 281, 264, 25180, 341, 1243, 420, 291, 352, 420, 2035, 50984], "temperature": 0.0, "avg_logprob": -0.1176139363702738, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.042085200548172}, {"id": 2503, "seek": 1867364, "start": 18686.04, "end": 18695.96, "text": " or I don't go so I go to the supermarket let's say this week or something like that or I don't go", "tokens": [50984, 420, 286, 500, 380, 352, 370, 286, 352, 281, 264, 25180, 718, 311, 584, 341, 1243, 420, 746, 411, 300, 420, 286, 500, 380, 352, 51480], "temperature": 0.0, "avg_logprob": -0.1176139363702738, "compression_ratio": 1.6638655462184875, "no_speech_prob": 0.042085200548172}, {"id": 2504, "seek": 1870364, "start": 18703.8, "end": 18705.88, "text": " and let's say if there's a good sale", "tokens": [50372, 293, 718, 311, 584, 498, 456, 311, 257, 665, 8680, 50476], "temperature": 0.0, "avg_logprob": -0.0628156392805038, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.003376321168616414}, {"id": 2505, "seek": 1870364, "start": 18709.88, "end": 18716.36, "text": " let's say the probability right because I might have a lot of food stocked in my pantry I may or", "tokens": [50676, 718, 311, 584, 264, 8482, 558, 570, 286, 1062, 362, 257, 688, 295, 1755, 4127, 292, 294, 452, 40689, 286, 815, 420, 51000], "temperature": 0.0, "avg_logprob": -0.0628156392805038, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.003376321168616414}, {"id": 2506, "seek": 1870364, "start": 18716.36, "end": 18721.72, "text": " may not go to the grocery store this week but if there's a good sale maybe there's a good chance", "tokens": [51000, 815, 406, 352, 281, 264, 14410, 3531, 341, 1243, 457, 498, 456, 311, 257, 665, 8680, 1310, 456, 311, 257, 665, 2931, 51268], "temperature": 0.0, "avg_logprob": -0.0628156392805038, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.003376321168616414}, {"id": 2507, "seek": 1872172, "start": 18721.72, "end": 18726.920000000002, "text": " that I'll go let's say there's a 90% chance that I'll go", "tokens": [50364, 300, 286, 603, 352, 718, 311, 584, 456, 311, 257, 4289, 4, 2931, 300, 286, 603, 352, 50624], "temperature": 0.0, "avg_logprob": -0.06375853882895575, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.0791967436671257}, {"id": 2508, "seek": 1872172, "start": 18731.64, "end": 18738.920000000002, "text": " and if there isn't a good sale well it might be that I still need to get food so there's", "tokens": [50860, 293, 498, 456, 1943, 380, 257, 665, 8680, 731, 309, 1062, 312, 300, 286, 920, 643, 281, 483, 1755, 370, 456, 311, 51224], "temperature": 0.0, "avg_logprob": -0.06375853882895575, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.0791967436671257}, {"id": 2509, "seek": 1872172, "start": 18738.920000000002, "end": 18745.32, "text": " still going to be some chance that I go but perhaps it'll be less I'll be less enticed to go to that", "tokens": [51224, 920, 516, 281, 312, 512, 2931, 300, 286, 352, 457, 4317, 309, 603, 312, 1570, 286, 603, 312, 1570, 948, 4233, 281, 352, 281, 300, 51544], "temperature": 0.0, "avg_logprob": -0.06375853882895575, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.0791967436671257}, {"id": 2510, "seek": 1874532, "start": 18745.4, "end": 18750.68, "text": " supermarket this week let's just say that there is a 60% chance I'll go", "tokens": [50368, 25180, 341, 1243, 718, 311, 445, 584, 300, 456, 307, 257, 4060, 4, 2931, 286, 603, 352, 50632], "temperature": 0.0, "avg_logprob": -0.06259958771453507, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.001926677767187357}, {"id": 2511, "seek": 1874532, "start": 18755.88, "end": 18762.76, "text": " and with this information we can define a stochastic map from x to y so this actually", "tokens": [50892, 293, 365, 341, 1589, 321, 393, 6964, 257, 342, 8997, 2750, 4471, 490, 2031, 281, 288, 370, 341, 767, 51236], "temperature": 0.0, "avg_logprob": -0.06259958771453507, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.001926677767187357}, {"id": 2512, "seek": 1874532, "start": 18762.76, "end": 18767.72, "text": " defines the stochastic map and we'll come back to this in several examples that we'll look at", "tokens": [51236, 23122, 264, 342, 8997, 2750, 4471, 293, 321, 603, 808, 646, 281, 341, 294, 2940, 5110, 300, 321, 603, 574, 412, 51484], "temperature": 0.0, "avg_logprob": -0.06259958771453507, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.001926677767187357}, {"id": 2513, "seek": 1874532, "start": 18768.44, "end": 18773.88, "text": " later on because it's a nice simple example and the reason you can figure out what the rest of", "tokens": [51520, 1780, 322, 570, 309, 311, 257, 1481, 2199, 1365, 293, 264, 1778, 291, 393, 2573, 484, 437, 264, 1472, 295, 51792], "temperature": 0.0, "avg_logprob": -0.06259958771453507, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.001926677767187357}, {"id": 2514, "seek": 1877388, "start": 18773.88, "end": 18779.0, "text": " this is is just by using probabilities because if there is a good sale the chance that I go", "tokens": [50364, 341, 307, 307, 445, 538, 1228, 33783, 570, 498, 456, 307, 257, 665, 8680, 264, 2931, 300, 286, 352, 50620], "temperature": 0.0, "avg_logprob": -0.053814527939776986, "compression_ratio": 1.7641509433962264, "no_speech_prob": 9.027888881973922e-05}, {"id": 2515, "seek": 1877388, "start": 18779.0, "end": 18783.64, "text": " is 90% then there's a 10% chance I won't go and conversely if there isn't a good sale then there's", "tokens": [50620, 307, 4289, 4, 550, 456, 311, 257, 1266, 4, 2931, 286, 1582, 380, 352, 293, 2615, 736, 498, 456, 1943, 380, 257, 665, 8680, 550, 456, 311, 50852], "temperature": 0.0, "avg_logprob": -0.053814527939776986, "compression_ratio": 1.7641509433962264, "no_speech_prob": 9.027888881973922e-05}, {"id": 2516, "seek": 1877388, "start": 18783.64, "end": 18793.16, "text": " a 40% chance I don't go so that defines this stochastic map just like with functions we can", "tokens": [50852, 257, 3356, 4, 2931, 286, 500, 380, 352, 370, 300, 23122, 341, 342, 8997, 2750, 4471, 445, 411, 365, 6828, 321, 393, 51328], "temperature": 0.0, "avg_logprob": -0.053814527939776986, "compression_ratio": 1.7641509433962264, "no_speech_prob": 9.027888881973922e-05}, {"id": 2517, "seek": 1877388, "start": 18793.16, "end": 18799.32, "text": " compose stochastic maps as well but this is going to have a really nice picture so I rather", "tokens": [51328, 35925, 342, 8997, 2750, 11317, 382, 731, 457, 341, 307, 516, 281, 362, 257, 534, 1481, 3036, 370, 286, 2831, 51636], "temperature": 0.0, "avg_logprob": -0.053814527939776986, "compression_ratio": 1.7641509433962264, "no_speech_prob": 9.027888881973922e-05}, {"id": 2518, "seek": 1879932, "start": 18799.32, "end": 18805.32, "text": " give that its own video and we'll talk about compositions in a moment all right so if we", "tokens": [50364, 976, 300, 1080, 1065, 960, 293, 321, 603, 751, 466, 43401, 294, 257, 1623, 439, 558, 370, 498, 321, 50664], "temperature": 0.0, "avg_logprob": -0.08064456738923725, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.04884488880634308}, {"id": 2519, "seek": 1879932, "start": 18805.32, "end": 18814.28, "text": " have two finite sets rather three finite sets x y and z and a stochastic maps between them", "tokens": [50664, 362, 732, 19362, 6352, 2831, 1045, 19362, 6352, 2031, 288, 293, 710, 293, 257, 342, 8997, 2750, 11317, 1296, 552, 51112], "temperature": 0.0, "avg_logprob": -0.08064456738923725, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.04884488880634308}, {"id": 2520, "seek": 1879932, "start": 18815.64, "end": 18821.8, "text": " in such a way so that the codomain of f lines up with the domain of g and I really mean source", "tokens": [51180, 294, 1270, 257, 636, 370, 300, 264, 17656, 298, 491, 295, 283, 3876, 493, 365, 264, 9274, 295, 290, 293, 286, 534, 914, 4009, 51488], "temperature": 0.0, "avg_logprob": -0.08064456738923725, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.04884488880634308}, {"id": 2521, "seek": 1879932, "start": 18821.8, "end": 18827.239999999998, "text": " and target here because again if I really think of x as a function it's a map from x to probability", "tokens": [51488, 293, 3779, 510, 570, 797, 498, 286, 534, 519, 295, 2031, 382, 257, 2445, 309, 311, 257, 4471, 490, 2031, 281, 8482, 51760], "temperature": 0.0, "avg_logprob": -0.08064456738923725, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.04884488880634308}, {"id": 2522, "seek": 1882724, "start": 18827.24, "end": 18833.4, "text": " measures on y but the domain of g is not probability measures on y it's y itself so it's really", "tokens": [50364, 8000, 322, 288, 457, 264, 9274, 295, 290, 307, 406, 8482, 8000, 322, 288, 309, 311, 288, 2564, 370, 309, 311, 534, 50672], "temperature": 0.0, "avg_logprob": -0.05155843496322632, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0017006375128403306}, {"id": 2523, "seek": 1882724, "start": 18833.4, "end": 18839.16, "text": " better to think of this a little bit categorically where I'm thinking of the target of f and the", "tokens": [50672, 1101, 281, 519, 295, 341, 257, 707, 857, 19250, 984, 689, 286, 478, 1953, 295, 264, 3779, 295, 283, 293, 264, 50960], "temperature": 0.0, "avg_logprob": -0.05155843496322632, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0017006375128403306}, {"id": 2524, "seek": 1882724, "start": 18839.16, "end": 18853.320000000003, "text": " source of g so given this given stochastic maps we can define a composition of these two and before", "tokens": [50960, 4009, 295, 290, 370, 2212, 341, 2212, 342, 8997, 2750, 11317, 321, 393, 6964, 257, 12686, 295, 613, 732, 293, 949, 51668], "temperature": 0.0, "avg_logprob": -0.05155843496322632, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0017006375128403306}, {"id": 2525, "seek": 1885332, "start": 18853.32, "end": 18861.079999999998, "text": " I write down the formula let's think about how we would do this so here's x here's y here's z", "tokens": [50364, 286, 2464, 760, 264, 8513, 718, 311, 519, 466, 577, 321, 576, 360, 341, 370, 510, 311, 2031, 510, 311, 288, 510, 311, 710, 50752], "temperature": 0.0, "avg_logprob": -0.06695024490356445, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.00555446045473218}, {"id": 2526, "seek": 1885332, "start": 18864.68, "end": 18873.56, "text": " what we want to define is an ocean of composition which is determined by if I give if you give me", "tokens": [50932, 437, 321, 528, 281, 6964, 307, 364, 7810, 295, 12686, 597, 307, 9540, 538, 498, 286, 976, 498, 291, 976, 385, 51376], "temperature": 0.0, "avg_logprob": -0.06695024490356445, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.00555446045473218}, {"id": 2527, "seek": 1885332, "start": 18873.56, "end": 18882.6, "text": " an element in x and you give me an element in z I want to know given x what is the probability", "tokens": [51376, 364, 4478, 294, 2031, 293, 291, 976, 385, 364, 4478, 294, 710, 286, 528, 281, 458, 2212, 2031, 437, 307, 264, 8482, 51828], "temperature": 0.0, "avg_logprob": -0.06695024490356445, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.00555446045473218}, {"id": 2528, "seek": 1888260, "start": 18882.6, "end": 18892.039999999997, "text": " that z occurs and there's an intermediary y here so the way that you get that is well I look at", "tokens": [50364, 300, 710, 11843, 293, 456, 311, 364, 15184, 822, 288, 510, 370, 264, 636, 300, 291, 483, 300, 307, 731, 286, 574, 412, 50836], "temperature": 0.0, "avg_logprob": -0.05058799107869466, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.002714525442570448}, {"id": 2529, "seek": 1888260, "start": 18892.039999999997, "end": 18900.28, "text": " all the elements of y and I look at given x what is the probability of that element y occurring", "tokens": [50836, 439, 264, 4959, 295, 288, 293, 286, 574, 412, 2212, 2031, 437, 307, 264, 8482, 295, 300, 4478, 288, 18386, 51248], "temperature": 0.0, "avg_logprob": -0.05058799107869466, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.002714525442570448}, {"id": 2530, "seek": 1888260, "start": 18900.28, "end": 18907.559999999998, "text": " let's call this let's say that this is the element y then this is f y x so given x the probability", "tokens": [51248, 718, 311, 818, 341, 718, 311, 584, 300, 341, 307, 264, 4478, 288, 550, 341, 307, 283, 288, 2031, 370, 2212, 2031, 264, 8482, 51612], "temperature": 0.0, "avg_logprob": -0.05058799107869466, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.002714525442570448}, {"id": 2531, "seek": 1890756, "start": 18907.56, "end": 18913.960000000003, "text": " that y occurs and going from y what's the probability that z occurs that also has a probability which", "tokens": [50364, 300, 288, 11843, 293, 516, 490, 288, 437, 311, 264, 8482, 300, 710, 11843, 300, 611, 575, 257, 8482, 597, 50684], "temperature": 0.0, "avg_logprob": -0.05612904205918312, "compression_ratio": 1.8343949044585988, "no_speech_prob": 0.08266698569059372}, {"id": 2532, "seek": 1890756, "start": 18913.960000000003, "end": 18923.88, "text": " is gzy and so the probability of given x the probability of z given x is taking all of these", "tokens": [50684, 307, 290, 1229, 293, 370, 264, 8482, 295, 2212, 2031, 264, 8482, 295, 710, 2212, 2031, 307, 1940, 439, 295, 613, 51180], "temperature": 0.0, "avg_logprob": -0.05612904205918312, "compression_ratio": 1.8343949044585988, "no_speech_prob": 0.08266698569059372}, {"id": 2533, "seek": 1890756, "start": 18923.88, "end": 18932.440000000002, "text": " probabilities by varying y and multiplying the corresponding ones when they match up and then", "tokens": [51180, 33783, 538, 22984, 288, 293, 30955, 264, 11760, 2306, 562, 436, 2995, 493, 293, 550, 51608], "temperature": 0.0, "avg_logprob": -0.05612904205918312, "compression_ratio": 1.8343949044585988, "no_speech_prob": 0.08266698569059372}, {"id": 2534, "seek": 1893244, "start": 18932.52, "end": 18938.359999999997, "text": " adding them all so this is defined to be the sum over all elements in y", "tokens": [50368, 5127, 552, 439, 370, 341, 307, 7642, 281, 312, 264, 2408, 670, 439, 4959, 294, 288, 50660], "temperature": 0.0, "avg_logprob": -0.11311570080843839, "compression_ratio": 1.4369747899159664, "no_speech_prob": 0.010985665023326874}, {"id": 2535, "seek": 1893244, "start": 18940.92, "end": 18950.92, "text": " with their respective probabilities gzy f y x so this is what the composition of", "tokens": [50788, 365, 641, 23649, 33783, 290, 1229, 283, 288, 2031, 370, 341, 307, 437, 264, 12686, 295, 51288], "temperature": 0.0, "avg_logprob": -0.11311570080843839, "compression_ratio": 1.4369747899159664, "no_speech_prob": 0.010985665023326874}, {"id": 2536, "seek": 1893244, "start": 18953.079999999998, "end": 18956.92, "text": " stochastic maps is", "tokens": [51396, 342, 8997, 2750, 11317, 307, 51588], "temperature": 0.0, "avg_logprob": -0.11311570080843839, "compression_ratio": 1.4369747899159664, "no_speech_prob": 0.010985665023326874}, {"id": 2537, "seek": 1896244, "start": 18963.16, "end": 18973.64, "text": " and now you can see why I chose this notation earlier of writing our subscripts in this particular", "tokens": [50400, 293, 586, 291, 393, 536, 983, 286, 5111, 341, 24657, 3071, 295, 3579, 527, 2325, 39280, 294, 341, 1729, 50924], "temperature": 0.0, "avg_logprob": -0.08932729363441468, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.002050472190603614}, {"id": 2538, "seek": 1896244, "start": 18973.64, "end": 18979.719999999998, "text": " order because if I think of these as matrices indexed by the elements of these sets that we", "tokens": [50924, 1668, 570, 498, 286, 519, 295, 613, 382, 32284, 8186, 292, 538, 264, 4959, 295, 613, 6352, 300, 321, 51228], "temperature": 0.0, "avg_logprob": -0.08932729363441468, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.002050472190603614}, {"id": 2539, "seek": 1896244, "start": 18979.719999999998, "end": 18985.719999999998, "text": " have then this ends up just being matrix multiplication so sometimes these are also", "tokens": [51228, 362, 550, 341, 5314, 493, 445, 885, 8141, 27290, 370, 2171, 613, 366, 611, 51528], "temperature": 0.0, "avg_logprob": -0.08932729363441468, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.002050472190603614}, {"id": 2540, "seek": 1896244, "start": 18985.719999999998, "end": 18991.079999999998, "text": " called stochastic matrices but I'm going to stick to the calling them stochastic maps", "tokens": [51528, 1219, 342, 8997, 2750, 32284, 457, 286, 478, 516, 281, 2897, 281, 264, 5141, 552, 342, 8997, 2750, 11317, 51796], "temperature": 0.0, "avg_logprob": -0.08932729363441468, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.002050472190603614}, {"id": 2541, "seek": 1899244, "start": 18993.16, "end": 18999.8, "text": " so let's look at some interesting special cases of this definition so first let's look at the", "tokens": [50400, 370, 718, 311, 574, 412, 512, 1880, 2121, 3331, 295, 341, 7123, 370, 700, 718, 311, 574, 412, 264, 50732], "temperature": 0.0, "avg_logprob": -0.09265380586896624, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.00019109982531517744}, {"id": 2542, "seek": 1899244, "start": 18999.8, "end": 19008.6, "text": " special case where x is replaced by a single element set y is a set x and g is a function", "tokens": [50732, 2121, 1389, 689, 2031, 307, 10772, 538, 257, 2167, 4478, 992, 288, 307, 257, 992, 2031, 293, 290, 307, 257, 2445, 51172], "temperature": 0.0, "avg_logprob": -0.09265380586896624, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.00019109982531517744}, {"id": 2543, "seek": 1899244, "start": 19008.6, "end": 19018.12, "text": " not just a stochastic map so let's take this special example so let's take y a function f", "tokens": [51172, 406, 445, 257, 342, 8997, 2750, 4471, 370, 718, 311, 747, 341, 2121, 1365, 370, 718, 311, 747, 288, 257, 2445, 283, 51648], "temperature": 0.0, "avg_logprob": -0.09265380586896624, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.00019109982531517744}, {"id": 2544, "seek": 1901812, "start": 19018.12, "end": 19029.559999999998, "text": " and a probability measure on x so first of all what is a probability measure on x look like", "tokens": [50364, 293, 257, 8482, 3481, 322, 2031, 370, 700, 295, 439, 437, 307, 257, 8482, 3481, 322, 2031, 574, 411, 50936], "temperature": 0.0, "avg_logprob": -0.095433309674263, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.008315054699778557}, {"id": 2545, "seek": 1901812, "start": 19029.559999999998, "end": 19035.0, "text": " well if I think of x as a set so let's draw some of the elements of x here", "tokens": [50936, 731, 498, 286, 519, 295, 2031, 382, 257, 992, 370, 718, 311, 2642, 512, 295, 264, 4959, 295, 2031, 510, 51208], "temperature": 0.0, "avg_logprob": -0.095433309674263, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.008315054699778557}, {"id": 2546, "seek": 1901812, "start": 19039.32, "end": 19045.64, "text": " let's say here we have nine elements a probability measure sort of gives me a size", "tokens": [51424, 718, 311, 584, 510, 321, 362, 4949, 4959, 257, 8482, 3481, 1333, 295, 2709, 385, 257, 2744, 51740], "temperature": 0.0, "avg_logprob": -0.095433309674263, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.008315054699778557}, {"id": 2547, "seek": 1904564, "start": 19045.72, "end": 19053.079999999998, "text": " to each of these elements so I can think of these as water droplets each with a specific size", "tokens": [50368, 281, 1184, 295, 613, 4959, 370, 286, 393, 519, 295, 613, 382, 1281, 41573, 1184, 365, 257, 2685, 2744, 50736], "temperature": 0.0, "avg_logprob": -0.05841280922057137, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0017545379232615232}, {"id": 2548, "seek": 1904564, "start": 19058.68, "end": 19059.64, "text": " namely the volume", "tokens": [51016, 20926, 264, 5523, 51064], "temperature": 0.0, "avg_logprob": -0.05841280922057137, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0017545379232615232}, {"id": 2549, "seek": 1904564, "start": 19062.44, "end": 19068.2, "text": " so this is sort of what a generic x looks like with a probability measure on it", "tokens": [51204, 370, 341, 307, 1333, 295, 437, 257, 19577, 2031, 1542, 411, 365, 257, 8482, 3481, 322, 309, 51492], "temperature": 0.0, "avg_logprob": -0.05841280922057137, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0017545379232615232}, {"id": 2550, "seek": 1904564, "start": 19069.079999999998, "end": 19072.84, "text": " and the sum of the volumes of these water droplets is equal to one", "tokens": [51536, 293, 264, 2408, 295, 264, 22219, 295, 613, 1281, 41573, 307, 2681, 281, 472, 51724], "temperature": 0.0, "avg_logprob": -0.05841280922057137, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0017545379232615232}, {"id": 2551, "seek": 1907284, "start": 19072.84, "end": 19083.72, "text": " now if I have a function f from y to x then the composite here gives me a probability measure on", "tokens": [50364, 586, 498, 286, 362, 257, 2445, 283, 490, 288, 281, 2031, 550, 264, 25557, 510, 2709, 385, 257, 8482, 3481, 322, 50908], "temperature": 0.0, "avg_logprob": -0.11109320322672527, "compression_ratio": 1.6114649681528663, "no_speech_prob": 0.0007793164113536477}, {"id": 2552, "seek": 1907284, "start": 19083.72, "end": 19090.84, "text": " y what is that probability measure well if I just use the definition", "tokens": [50908, 288, 437, 307, 300, 8482, 3481, 731, 498, 286, 445, 764, 264, 7123, 51264], "temperature": 0.0, "avg_logprob": -0.11109320322672527, "compression_ratio": 1.6114649681528663, "no_speech_prob": 0.0007793164113536477}, {"id": 2553, "seek": 1907284, "start": 19093.96, "end": 19101.16, "text": " p followed by f and I evaluated at y this is equal to just straight from the definition", "tokens": [51420, 280, 6263, 538, 283, 293, 286, 25509, 412, 288, 341, 307, 2681, 281, 445, 2997, 490, 264, 7123, 51780], "temperature": 0.0, "avg_logprob": -0.11109320322672527, "compression_ratio": 1.6114649681528663, "no_speech_prob": 0.0007793164113536477}, {"id": 2554, "seek": 1910116, "start": 19101.16, "end": 19111.0, "text": " we know that this is the sum over all elements in x of the function on the left which is f", "tokens": [50364, 321, 458, 300, 341, 307, 264, 2408, 670, 439, 4959, 294, 2031, 295, 264, 2445, 322, 264, 1411, 597, 307, 283, 50856], "temperature": 0.0, "avg_logprob": -0.08564378213191377, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.002631531096994877}, {"id": 2555, "seek": 1910116, "start": 19111.0, "end": 19118.84, "text": " but f is a function so we know that it corresponds to the direct delta the chronicle delta f", "tokens": [50856, 457, 283, 307, 257, 2445, 370, 321, 458, 300, 309, 23249, 281, 264, 2047, 8289, 264, 19393, 3520, 8289, 283, 51248], "temperature": 0.0, "avg_logprob": -0.08564378213191377, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.002631531096994877}, {"id": 2556, "seek": 1910116, "start": 19121.32, "end": 19130.6, "text": " y f of x with the probability measure px now if I substitute what this looks like this says", "tokens": [51372, 288, 283, 295, 2031, 365, 264, 8482, 3481, 280, 87, 586, 498, 286, 15802, 437, 341, 1542, 411, 341, 1619, 51836], "temperature": 0.0, "avg_logprob": -0.08564378213191377, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.002631531096994877}, {"id": 2557, "seek": 1913060, "start": 19130.6, "end": 19136.6, "text": " this only gives me a non-zero contribution if f of x equals y in other words if y", "tokens": [50364, 341, 787, 2709, 385, 257, 2107, 12, 32226, 13150, 498, 283, 295, 2031, 6915, 288, 294, 661, 2283, 498, 288, 50664], "temperature": 0.0, "avg_logprob": -0.05327016657049006, "compression_ratio": 1.864321608040201, "no_speech_prob": 0.0008829685975797474}, {"id": 2558, "seek": 1913060, "start": 19137.64, "end": 19144.039999999997, "text": " is in the image of f of x is in the image of f and it comes from some x so if we look at the", "tokens": [50716, 307, 294, 264, 3256, 295, 283, 295, 2031, 307, 294, 264, 3256, 295, 283, 293, 309, 1487, 490, 512, 2031, 370, 498, 321, 574, 412, 264, 51036], "temperature": 0.0, "avg_logprob": -0.05327016657049006, "compression_ratio": 1.864321608040201, "no_speech_prob": 0.0008829685975797474}, {"id": 2559, "seek": 1913060, "start": 19144.039999999997, "end": 19149.48, "text": " inverse image of y that's going to give me a bunch of elements and that's the only case where this", "tokens": [51036, 17340, 3256, 295, 288, 300, 311, 516, 281, 976, 385, 257, 3840, 295, 4959, 293, 300, 311, 264, 787, 1389, 689, 341, 51308], "temperature": 0.0, "avg_logprob": -0.05327016657049006, "compression_ratio": 1.864321608040201, "no_speech_prob": 0.0008829685975797474}, {"id": 2560, "seek": 1913060, "start": 19149.48, "end": 19157.16, "text": " gives me a non-zero contribution and what that means is that this breaks down into the sum of all", "tokens": [51308, 2709, 385, 257, 2107, 12, 32226, 13150, 293, 437, 300, 1355, 307, 300, 341, 9857, 760, 666, 264, 2408, 295, 439, 51692], "temperature": 0.0, "avg_logprob": -0.05327016657049006, "compression_ratio": 1.864321608040201, "no_speech_prob": 0.0008829685975797474}, {"id": 2561, "seek": 1915716, "start": 19157.16, "end": 19167.72, "text": " elements x in the inverse image of y so here we have the sum of all the px's that are in the", "tokens": [50364, 4959, 2031, 294, 264, 17340, 3256, 295, 288, 370, 510, 321, 362, 264, 2408, 295, 439, 264, 280, 87, 311, 300, 366, 294, 264, 50892], "temperature": 0.0, "avg_logprob": -0.04245756732092963, "compression_ratio": 1.9861111111111112, "no_speech_prob": 0.0021826152224093676}, {"id": 2562, "seek": 1915716, "start": 19167.72, "end": 19175.16, "text": " inverse image of an element y so let's look at this element y here the inverse image of this", "tokens": [50892, 17340, 3256, 295, 364, 4478, 288, 370, 718, 311, 574, 412, 341, 4478, 288, 510, 264, 17340, 3256, 295, 341, 51264], "temperature": 0.0, "avg_logprob": -0.04245756732092963, "compression_ratio": 1.9861111111111112, "no_speech_prob": 0.0021826152224093676}, {"id": 2563, "seek": 1915716, "start": 19175.16, "end": 19184.28, "text": " under a map f so let's imagine that f identifies all the elements that are in the vertical direction", "tokens": [51264, 833, 257, 4471, 283, 370, 718, 311, 3811, 300, 283, 34597, 439, 264, 4959, 300, 366, 294, 264, 9429, 3513, 51720], "temperature": 0.0, "avg_logprob": -0.04245756732092963, "compression_ratio": 1.9861111111111112, "no_speech_prob": 0.0021826152224093676}, {"id": 2564, "seek": 1918428, "start": 19185.0, "end": 19191.48, "text": " so right because a function f might not be one to one so it might identify some of the elements", "tokens": [50400, 370, 558, 570, 257, 2445, 283, 1062, 406, 312, 472, 281, 472, 370, 309, 1062, 5876, 512, 295, 264, 4959, 50724], "temperature": 0.0, "avg_logprob": -0.05968059193004261, "compression_ratio": 1.8792270531400965, "no_speech_prob": 0.00669218460097909}, {"id": 2565, "seek": 1918428, "start": 19191.48, "end": 19196.44, "text": " and that's why I've drawn it this way it takes these four elements and gives me the single output y", "tokens": [50724, 293, 300, 311, 983, 286, 600, 10117, 309, 341, 636, 309, 2516, 613, 1451, 4959, 293, 2709, 385, 264, 2167, 5598, 288, 50972], "temperature": 0.0, "avg_logprob": -0.05968059193004261, "compression_ratio": 1.8792270531400965, "no_speech_prob": 0.00669218460097909}, {"id": 2566, "seek": 1918428, "start": 19198.039999999997, "end": 19205.32, "text": " and these two elements gives me another output and what this condition says is that the probability", "tokens": [51052, 293, 613, 732, 4959, 2709, 385, 1071, 5598, 293, 437, 341, 4188, 1619, 307, 300, 264, 8482, 51416], "temperature": 0.0, "avg_logprob": -0.05968059193004261, "compression_ratio": 1.8792270531400965, "no_speech_prob": 0.00669218460097909}, {"id": 2567, "seek": 1918428, "start": 19206.92, "end": 19212.28, "text": " here is the sum of these probabilities in other words the volume of this water droplet is the", "tokens": [51496, 510, 307, 264, 2408, 295, 613, 33783, 294, 661, 2283, 264, 5523, 295, 341, 1281, 3789, 14657, 307, 264, 51764], "temperature": 0.0, "avg_logprob": -0.05968059193004261, "compression_ratio": 1.8792270531400965, "no_speech_prob": 0.00669218460097909}, {"id": 2568, "seek": 1921228, "start": 19212.28, "end": 19218.44, "text": " sum of the volumes of those water droplets likewise here in order to make the volume somewhat", "tokens": [50364, 2408, 295, 264, 22219, 295, 729, 1281, 41573, 32407, 510, 294, 1668, 281, 652, 264, 5523, 8344, 50672], "temperature": 0.0, "avg_logprob": -0.04949824781302946, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.0003459826984908432}, {"id": 2569, "seek": 1921228, "start": 19218.44, "end": 19224.44, "text": " geometrically similar to these this would be the resulting volume after we apply this function f", "tokens": [50672, 12956, 81, 984, 2531, 281, 613, 341, 576, 312, 264, 16505, 5523, 934, 321, 3079, 341, 2445, 283, 50972], "temperature": 0.0, "avg_logprob": -0.04949824781302946, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.0003459826984908432}, {"id": 2570, "seek": 1921228, "start": 19224.44, "end": 19232.44, "text": " and here maybe it's this big so this gives us a nice picture of what compositions like this look like", "tokens": [50972, 293, 510, 1310, 309, 311, 341, 955, 370, 341, 2709, 505, 257, 1481, 3036, 295, 437, 43401, 411, 341, 574, 411, 51372], "temperature": 0.0, "avg_logprob": -0.04949824781302946, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.0003459826984908432}, {"id": 2571, "seek": 1921228, "start": 19234.12, "end": 19240.12, "text": " it essentially says that we take these water droplets and then we combine them and when you", "tokens": [51456, 309, 4476, 1619, 300, 321, 747, 613, 1281, 41573, 293, 550, 321, 10432, 552, 293, 562, 291, 51756], "temperature": 0.0, "avg_logprob": -0.04949824781302946, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.0003459826984908432}, {"id": 2572, "seek": 1924012, "start": 19240.12, "end": 19246.68, "text": " combine the associated water droplets their volumes add as another example let's go back to", "tokens": [50364, 10432, 264, 6615, 1281, 41573, 641, 22219, 909, 382, 1071, 1365, 718, 311, 352, 646, 281, 50692], "temperature": 0.0, "avg_logprob": -0.04623588762785259, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.0011694474378600717}, {"id": 2573, "seek": 1924012, "start": 19246.68, "end": 19251.559999999998, "text": " our previous situation in fact let me write that example here because it's a little bit it can fit", "tokens": [50692, 527, 3894, 2590, 294, 1186, 718, 385, 2464, 300, 1365, 510, 570, 309, 311, 257, 707, 857, 309, 393, 3318, 50936], "temperature": 0.0, "avg_logprob": -0.04623588762785259, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.0011694474378600717}, {"id": 2574, "seek": 1924012, "start": 19251.559999999998, "end": 19259.0, "text": " here so in this case we had that set x to be there's a good sale at the supermarket this week and", "tokens": [50936, 510, 370, 294, 341, 1389, 321, 632, 300, 992, 2031, 281, 312, 456, 311, 257, 665, 8680, 412, 264, 25180, 341, 1243, 293, 51308], "temperature": 0.0, "avg_logprob": -0.04623588762785259, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.0011694474378600717}, {"id": 2575, "seek": 1924012, "start": 19259.0, "end": 19266.52, "text": " there's not a good sale and the set y is I go to the supermarket or I don't now what if we happen to", "tokens": [51308, 456, 311, 406, 257, 665, 8680, 293, 264, 992, 288, 307, 286, 352, 281, 264, 25180, 420, 286, 500, 380, 586, 437, 498, 321, 1051, 281, 51684], "temperature": 0.0, "avg_logprob": -0.04623588762785259, "compression_ratio": 1.7762557077625571, "no_speech_prob": 0.0011694474378600717}, {"id": 2576, "seek": 1926652, "start": 19266.52, "end": 19273.0, "text": " know the statistics or the probabilities of whether there is a good sale or not at the specific", "tokens": [50364, 458, 264, 12523, 420, 264, 33783, 295, 1968, 456, 307, 257, 665, 8680, 420, 406, 412, 264, 2685, 50688], "temperature": 0.0, "avg_logprob": -0.03088802515074264, "compression_ratio": 1.8169014084507042, "no_speech_prob": 0.008846291340887547}, {"id": 2577, "seek": 1926652, "start": 19273.0, "end": 19278.760000000002, "text": " supermarket given that specific week so you compile all of your data over the course of a year for", "tokens": [50688, 25180, 2212, 300, 2685, 1243, 370, 291, 31413, 439, 295, 428, 1412, 670, 264, 1164, 295, 257, 1064, 337, 50976], "temperature": 0.0, "avg_logprob": -0.03088802515074264, "compression_ratio": 1.8169014084507042, "no_speech_prob": 0.008846291340887547}, {"id": 2578, "seek": 1926652, "start": 19278.760000000002, "end": 19283.96, "text": " instance and you just ignore the seasons you ignore the months you just look at when is there a good", "tokens": [50976, 5197, 293, 291, 445, 11200, 264, 15050, 291, 11200, 264, 2493, 291, 445, 574, 412, 562, 307, 456, 257, 665, 51236], "temperature": 0.0, "avg_logprob": -0.03088802515074264, "compression_ratio": 1.8169014084507042, "no_speech_prob": 0.008846291340887547}, {"id": 2579, "seek": 1926652, "start": 19283.96, "end": 19291.16, "text": " sale for whatever definition of good you might have for for you and let's just say that the", "tokens": [51236, 8680, 337, 2035, 7123, 295, 665, 291, 1062, 362, 337, 337, 291, 293, 718, 311, 445, 584, 300, 264, 51596], "temperature": 0.0, "avg_logprob": -0.03088802515074264, "compression_ratio": 1.8169014084507042, "no_speech_prob": 0.008846291340887547}, {"id": 2580, "seek": 1929116, "start": 19291.16, "end": 19301.72, "text": " probability of a good sale is maybe only 30 percent so roughly 30 percent of the time there's a good", "tokens": [50364, 8482, 295, 257, 665, 8680, 307, 1310, 787, 2217, 3043, 370, 9810, 2217, 3043, 295, 264, 565, 456, 311, 257, 665, 50892], "temperature": 0.0, "avg_logprob": -0.06265729495457241, "compression_ratio": 1.8159509202453987, "no_speech_prob": 0.0009109972161240876}, {"id": 2581, "seek": 1929116, "start": 19301.72, "end": 19309.24, "text": " sale on a given week and therefore the probability of a not so good sale is 70 percent and so you", "tokens": [50892, 8680, 322, 257, 2212, 1243, 293, 4412, 264, 8482, 295, 257, 406, 370, 665, 8680, 307, 5285, 3043, 293, 370, 291, 51268], "temperature": 0.0, "avg_logprob": -0.06265729495457241, "compression_ratio": 1.8159509202453987, "no_speech_prob": 0.0009109972161240876}, {"id": 2582, "seek": 1929116, "start": 19309.24, "end": 19317.079999999998, "text": " might ask what is the probability that I go to the supermarket question mark so that's the end of", "tokens": [51268, 1062, 1029, 437, 307, 264, 8482, 300, 286, 352, 281, 264, 25180, 1168, 1491, 370, 300, 311, 264, 917, 295, 51660], "temperature": 0.0, "avg_logprob": -0.06265729495457241, "compression_ratio": 1.8159509202453987, "no_speech_prob": 0.0009109972161240876}, {"id": 2583, "seek": 1931708, "start": 19317.08, "end": 19322.36, "text": " the statement so all we know is that if there's a good sale we already know what those probabilities", "tokens": [50364, 264, 5629, 370, 439, 321, 458, 307, 300, 498, 456, 311, 257, 665, 8680, 321, 1217, 458, 437, 729, 33783, 50628], "temperature": 0.0, "avg_logprob": -0.06617670792799729, "compression_ratio": 2.0104166666666665, "no_speech_prob": 0.051832593977451324}, {"id": 2584, "seek": 1931708, "start": 19322.36, "end": 19327.88, "text": " are I think they were 90 percent and if there is a good sale and 60 percent if there isn't a good sale", "tokens": [50628, 366, 286, 519, 436, 645, 4289, 3043, 293, 498, 456, 307, 257, 665, 8680, 293, 4060, 3043, 498, 456, 1943, 380, 257, 665, 8680, 50904], "temperature": 0.0, "avg_logprob": -0.06617670792799729, "compression_ratio": 2.0104166666666665, "no_speech_prob": 0.051832593977451324}, {"id": 2585, "seek": 1931708, "start": 19328.760000000002, "end": 19333.4, "text": " because I still need to eat and if we happen to know the probability that there's a good sale", "tokens": [50948, 570, 286, 920, 643, 281, 1862, 293, 498, 321, 1051, 281, 458, 264, 8482, 300, 456, 311, 257, 665, 8680, 51180], "temperature": 0.0, "avg_logprob": -0.06617670792799729, "compression_ratio": 2.0104166666666665, "no_speech_prob": 0.051832593977451324}, {"id": 2586, "seek": 1931708, "start": 19334.36, "end": 19341.960000000003, "text": " and therefore the probability of there being a bad sale or not good rather is 70 percent", "tokens": [51228, 293, 4412, 264, 8482, 295, 456, 885, 257, 1578, 8680, 420, 406, 665, 2831, 307, 5285, 3043, 51608], "temperature": 0.0, "avg_logprob": -0.06617670792799729, "compression_ratio": 2.0104166666666665, "no_speech_prob": 0.051832593977451324}, {"id": 2587, "seek": 1934196, "start": 19342.92, "end": 19346.04, "text": " then you could still ask what is the probability that I actually end up going", "tokens": [50412, 550, 291, 727, 920, 1029, 437, 307, 264, 8482, 300, 286, 767, 917, 493, 516, 50568], "temperature": 0.0, "avg_logprob": -0.06697294257936023, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.004905151668936014}, {"id": 2588, "seek": 1934196, "start": 19347.719999999998, "end": 19352.84, "text": " and that's where this composition comes in where instead of having an f like this", "tokens": [50652, 293, 300, 311, 689, 341, 12686, 1487, 294, 689, 2602, 295, 1419, 364, 283, 411, 341, 50908], "temperature": 0.0, "avg_logprob": -0.06697294257936023, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.004905151668936014}, {"id": 2589, "seek": 1934196, "start": 19354.2, "end": 19358.68, "text": " we instead have our f from our previous example but we also know the probabilities", "tokens": [50976, 321, 2602, 362, 527, 283, 490, 527, 3894, 1365, 457, 321, 611, 458, 264, 33783, 51200], "temperature": 0.0, "avg_logprob": -0.06697294257936023, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.004905151668936014}, {"id": 2590, "seek": 1934196, "start": 19358.68, "end": 19362.84, "text": " of whether or not there's a good sale so it's a slight generalization of this example", "tokens": [51200, 295, 1968, 420, 406, 456, 311, 257, 665, 8680, 370, 309, 311, 257, 4036, 2674, 2144, 295, 341, 1365, 51408], "temperature": 0.0, "avg_logprob": -0.06697294257936023, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.004905151668936014}, {"id": 2591, "seek": 1934196, "start": 19363.879999999997, "end": 19366.2, "text": " and therefore the probability that I go", "tokens": [51460, 293, 4412, 264, 8482, 300, 286, 352, 51576], "temperature": 0.0, "avg_logprob": -0.06697294257936023, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.004905151668936014}, {"id": 2592, "seek": 1936620, "start": 19366.760000000002, "end": 19376.440000000002, "text": " to the supermarket is equal to and in this case I'm going to take the probability", "tokens": [50392, 281, 264, 25180, 307, 2681, 281, 293, 294, 341, 1389, 286, 478, 516, 281, 747, 264, 8482, 50876], "temperature": 0.0, "avg_logprob": -0.09356727451086044, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.0007553842151537538}, {"id": 2593, "seek": 1936620, "start": 19377.72, "end": 19385.0, "text": " that there is a good sale times the probability that I go given that there's a good sale plus", "tokens": [50940, 300, 456, 307, 257, 665, 8680, 1413, 264, 8482, 300, 286, 352, 2212, 300, 456, 311, 257, 665, 8680, 1804, 51304], "temperature": 0.0, "avg_logprob": -0.09356727451086044, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.0007553842151537538}, {"id": 2594, "seek": 1936620, "start": 19385.72, "end": 19392.280000000002, "text": " so let me actually write that one down so that's 90 percent times 30 percent the probability that", "tokens": [51340, 370, 718, 385, 767, 2464, 300, 472, 760, 370, 300, 311, 4289, 3043, 1413, 2217, 3043, 264, 8482, 300, 51668], "temperature": 0.0, "avg_logprob": -0.09356727451086044, "compression_ratio": 1.7727272727272727, "no_speech_prob": 0.0007553842151537538}, {"id": 2595, "seek": 1939228, "start": 19392.36, "end": 19397.239999999998, "text": " there's a good sale times the probability that I go plus the probability that there isn't a good", "tokens": [50368, 456, 311, 257, 665, 8680, 1413, 264, 8482, 300, 286, 352, 1804, 264, 8482, 300, 456, 1943, 380, 257, 665, 50612], "temperature": 0.0, "avg_logprob": -0.05335032002309735, "compression_ratio": 2.388888888888889, "no_speech_prob": 0.00247250241227448}, {"id": 2596, "seek": 1939228, "start": 19397.239999999998, "end": 19403.48, "text": " sale but I still go and the probability that I go given that there isn't a good sale is 60 percent", "tokens": [50612, 8680, 457, 286, 920, 352, 293, 264, 8482, 300, 286, 352, 2212, 300, 456, 1943, 380, 257, 665, 8680, 307, 4060, 3043, 50924], "temperature": 0.0, "avg_logprob": -0.05335032002309735, "compression_ratio": 2.388888888888889, "no_speech_prob": 0.00247250241227448}, {"id": 2597, "seek": 1939228, "start": 19403.48, "end": 19409.96, "text": " and the probability that there is not a good sale is 70 percent and the resulting probability", "tokens": [50924, 293, 264, 8482, 300, 456, 307, 406, 257, 665, 8680, 307, 5285, 3043, 293, 264, 16505, 8482, 51248], "temperature": 0.0, "avg_logprob": -0.05335032002309735, "compression_ratio": 2.388888888888889, "no_speech_prob": 0.00247250241227448}, {"id": 2598, "seek": 1939228, "start": 19409.96, "end": 19419.559999999998, "text": " that I go is 69 percent so given those statistics we still know that if I just chose an arbitrary", "tokens": [51248, 300, 286, 352, 307, 28267, 3043, 370, 2212, 729, 12523, 321, 920, 458, 300, 498, 286, 445, 5111, 364, 23211, 51728], "temperature": 0.0, "avg_logprob": -0.05335032002309735, "compression_ratio": 2.388888888888889, "no_speech_prob": 0.00247250241227448}, {"id": 2599, "seek": 1941956, "start": 19419.56, "end": 19424.120000000003, "text": " week in the year there's a 69 chance that I'll go to the supermarket that week", "tokens": [50364, 1243, 294, 264, 1064, 456, 311, 257, 28267, 2931, 300, 286, 603, 352, 281, 264, 25180, 300, 1243, 50592], "temperature": 0.0, "avg_logprob": -0.07562224895923168, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.003272904083132744}, {"id": 2600, "seek": 1941956, "start": 19426.600000000002, "end": 19430.36, "text": " so now let's look at another example and this example again will come back", "tokens": [50716, 370, 586, 718, 311, 574, 412, 1071, 1365, 293, 341, 1365, 797, 486, 808, 646, 50904], "temperature": 0.0, "avg_logprob": -0.07562224895923168, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.003272904083132744}, {"id": 2601, "seek": 1941956, "start": 19430.920000000002, "end": 19436.280000000002, "text": " will come back to this perhaps a few more times so now let's look at another example", "tokens": [50932, 486, 808, 646, 281, 341, 4317, 257, 1326, 544, 1413, 370, 586, 718, 311, 574, 412, 1071, 1365, 51200], "temperature": 0.0, "avg_logprob": -0.07562224895923168, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.003272904083132744}, {"id": 2602, "seek": 1941956, "start": 19436.84, "end": 19442.84, "text": " this one may seem a little bit abstract but it's a very useful one anyway", "tokens": [51228, 341, 472, 815, 1643, 257, 707, 857, 12649, 457, 309, 311, 257, 588, 4420, 472, 4033, 51528], "temperature": 0.0, "avg_logprob": -0.07562224895923168, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.003272904083132744}, {"id": 2603, "seek": 1944284, "start": 19443.8, "end": 19451.72, "text": " so let's take the diagonal map from x to x cross x what this does is it takes an element x", "tokens": [50412, 370, 718, 311, 747, 264, 21539, 4471, 490, 2031, 281, 2031, 3278, 2031, 437, 341, 775, 307, 309, 2516, 364, 4478, 2031, 50808], "temperature": 0.0, "avg_logprob": -0.06939269667086394, "compression_ratio": 1.727699530516432, "no_speech_prob": 0.014954600483179092}, {"id": 2604, "seek": 1944284, "start": 19453.32, "end": 19458.68, "text": " so far we've talked about stochastic maps and how to compose them and how to view ordinary", "tokens": [50888, 370, 1400, 321, 600, 2825, 466, 342, 8997, 2750, 11317, 293, 577, 281, 35925, 552, 293, 577, 281, 1910, 10547, 51156], "temperature": 0.0, "avg_logprob": -0.06939269667086394, "compression_ratio": 1.727699530516432, "no_speech_prob": 0.014954600483179092}, {"id": 2605, "seek": 1944284, "start": 19458.68, "end": 19464.36, "text": " functions as specific examples of stochastic maps what we'll do now is describe how to take the", "tokens": [51156, 6828, 382, 2685, 5110, 295, 342, 8997, 2750, 11317, 437, 321, 603, 360, 586, 307, 6786, 577, 281, 747, 264, 51440], "temperature": 0.0, "avg_logprob": -0.06939269667086394, "compression_ratio": 1.727699530516432, "no_speech_prob": 0.014954600483179092}, {"id": 2606, "seek": 1944284, "start": 19464.36, "end": 19469.48, "text": " product of two stochastic maps in a way that generalizes the usual notion of the Cartesian", "tokens": [51440, 1674, 295, 732, 342, 8997, 2750, 11317, 294, 257, 636, 300, 2674, 5660, 264, 7713, 10710, 295, 264, 22478, 42434, 51696], "temperature": 0.0, "avg_logprob": -0.06939269667086394, "compression_ratio": 1.727699530516432, "no_speech_prob": 0.014954600483179092}, {"id": 2607, "seek": 1946948, "start": 19469.48, "end": 19483.079999999998, "text": " product of two functions so given stochastic maps f and g", "tokens": [50364, 1674, 295, 732, 6828, 370, 2212, 342, 8997, 2750, 11317, 283, 293, 290, 51044], "temperature": 0.0, "avg_logprob": -0.17096720139185587, "compression_ratio": 1.1690140845070423, "no_speech_prob": 0.019122526049613953}, {"id": 2608, "seek": 1946948, "start": 19488.92, "end": 19490.44, "text": " we can form their product", "tokens": [51336, 321, 393, 1254, 641, 1674, 51412], "temperature": 0.0, "avg_logprob": -0.17096720139185587, "compression_ratio": 1.1690140845070423, "no_speech_prob": 0.019122526049613953}, {"id": 2609, "seek": 1949044, "start": 19491.399999999998, "end": 19499.399999999998, "text": " and it's another stochastic map", "tokens": [50412, 293, 309, 311, 1071, 342, 8997, 2750, 4471, 50812], "temperature": 0.0, "avg_logprob": -0.18055513170030382, "compression_ratio": 1.3043478260869565, "no_speech_prob": 0.004331295844167471}, {"id": 2610, "seek": 1949044, "start": 19507.239999999998, "end": 19513.8, "text": " that essentially takes the product of these two problems of the associated probabilities", "tokens": [51204, 300, 4476, 2516, 264, 1674, 295, 613, 732, 2740, 295, 264, 6615, 33783, 51532], "temperature": 0.0, "avg_logprob": -0.18055513170030382, "compression_ratio": 1.3043478260869565, "no_speech_prob": 0.004331295844167471}, {"id": 2611, "seek": 1951380, "start": 19513.8, "end": 19524.52, "text": " point-wise so it's determined by the formula f cross g now remember what our notation is", "tokens": [50364, 935, 12, 3711, 370, 309, 311, 9540, 538, 264, 8513, 283, 3278, 290, 586, 1604, 437, 527, 24657, 307, 50900], "temperature": 0.0, "avg_logprob": -0.08130258780259353, "compression_ratio": 1.9157894736842105, "no_speech_prob": 0.012429033406078815}, {"id": 2612, "seek": 1951380, "start": 19524.52, "end": 19529.8, "text": " for each element in the domain we get a probability distribution on the co-domain", "tokens": [50900, 337, 1184, 4478, 294, 264, 9274, 321, 483, 257, 8482, 7316, 322, 264, 598, 12, 4121, 491, 51164], "temperature": 0.0, "avg_logprob": -0.08130258780259353, "compression_ratio": 1.9157894736842105, "no_speech_prob": 0.012429033406078815}, {"id": 2613, "seek": 1951380, "start": 19529.8, "end": 19535.64, "text": " and that probability distribution is determined by what it does to points because we're working", "tokens": [51164, 293, 300, 8482, 7316, 307, 9540, 538, 437, 309, 775, 281, 2793, 570, 321, 434, 1364, 51456], "temperature": 0.0, "avg_logprob": -0.08130258780259353, "compression_ratio": 1.9157894736842105, "no_speech_prob": 0.012429033406078815}, {"id": 2614, "seek": 1951380, "start": 19535.64, "end": 19542.2, "text": " with finite sets so that probability distribution is determined by the value of our initial input", "tokens": [51456, 365, 19362, 6352, 370, 300, 8482, 7316, 307, 9540, 538, 264, 2158, 295, 527, 5883, 4846, 51784], "temperature": 0.0, "avg_logprob": -0.08130258780259353, "compression_ratio": 1.9157894736842105, "no_speech_prob": 0.012429033406078815}, {"id": 2615, "seek": 1954220, "start": 19542.2, "end": 19549.56, "text": " with our our output and it's just the product of the associated probabilities from f and g", "tokens": [50364, 365, 527, 527, 5598, 293, 309, 311, 445, 264, 1674, 295, 264, 6615, 33783, 490, 283, 293, 290, 50732], "temperature": 0.0, "avg_logprob": -0.08931178060071222, "compression_ratio": 1.6149068322981366, "no_speech_prob": 0.001206511165946722}, {"id": 2616, "seek": 1954220, "start": 19557.88, "end": 19563.56, "text": " and let's just check that make sure that this coincides with our usual definition of Cartesian", "tokens": [51148, 293, 718, 311, 445, 1520, 300, 652, 988, 300, 341, 13001, 1875, 365, 527, 7713, 7123, 295, 22478, 42434, 51432], "temperature": 0.0, "avg_logprob": -0.08931178060071222, "compression_ratio": 1.6149068322981366, "no_speech_prob": 0.001206511165946722}, {"id": 2617, "seek": 1954220, "start": 19563.56, "end": 19567.56, "text": " product when we specify that these stochastic maps correspond to functions", "tokens": [51432, 1674, 562, 321, 16500, 300, 613, 342, 8997, 2750, 11317, 6805, 281, 6828, 51632], "temperature": 0.0, "avg_logprob": -0.08931178060071222, "compression_ratio": 1.6149068322981366, "no_speech_prob": 0.001206511165946722}, {"id": 2618, "seek": 1956756, "start": 19568.120000000003, "end": 19572.04, "text": " so if f and g are functions", "tokens": [50392, 370, 498, 283, 293, 290, 366, 6828, 50588], "temperature": 0.0, "avg_logprob": -0.15204414791531032, "compression_ratio": 1.4621848739495797, "no_speech_prob": 0.003172558266669512}, {"id": 2619, "seek": 1956756, "start": 19575.16, "end": 19580.920000000002, "text": " or how I think of them as being deterministic then this product", "tokens": [50744, 420, 577, 286, 519, 295, 552, 382, 885, 15957, 3142, 550, 341, 1674, 51032], "temperature": 0.0, "avg_logprob": -0.15204414791531032, "compression_ratio": 1.4621848739495797, "no_speech_prob": 0.003172558266669512}, {"id": 2620, "seek": 1956756, "start": 19590.2, "end": 19595.24, "text": " is given by well we know what happens when these are functions then we use the the", "tokens": [51496, 307, 2212, 538, 731, 321, 458, 437, 2314, 562, 613, 366, 6828, 550, 321, 764, 264, 264, 51748], "temperature": 0.0, "avg_logprob": -0.15204414791531032, "compression_ratio": 1.4621848739495797, "no_speech_prob": 0.003172558266669512}, {"id": 2621, "seek": 1959524, "start": 19595.320000000003, "end": 19603.640000000003, "text": " chronicle delta and this is x prime f of x while this is delta y prime g of y", "tokens": [50368, 19393, 3520, 8289, 293, 341, 307, 2031, 5835, 283, 295, 2031, 1339, 341, 307, 8289, 288, 5835, 290, 295, 288, 50784], "temperature": 0.0, "avg_logprob": -0.08900407701730728, "compression_ratio": 1.7753623188405796, "no_speech_prob": 0.007576195523142815}, {"id": 2622, "seek": 1959524, "start": 19606.36, "end": 19615.88, "text": " and this is nothing but it's the same exact thing as requiring that x prime coincides with", "tokens": [50920, 293, 341, 307, 1825, 457, 309, 311, 264, 912, 1900, 551, 382, 24165, 300, 2031, 5835, 13001, 1875, 365, 51396], "temperature": 0.0, "avg_logprob": -0.08900407701730728, "compression_ratio": 1.7753623188405796, "no_speech_prob": 0.007576195523142815}, {"id": 2623, "seek": 1959524, "start": 19616.52, "end": 19623.72, "text": " f of x simultaneously as g as y prime corresponds with coincides with g of y", "tokens": [51428, 283, 295, 2031, 16561, 382, 290, 382, 288, 5835, 23249, 365, 13001, 1875, 365, 290, 295, 288, 51788], "temperature": 0.0, "avg_logprob": -0.08900407701730728, "compression_ratio": 1.7753623188405796, "no_speech_prob": 0.007576195523142815}, {"id": 2624, "seek": 1962372, "start": 19624.68, "end": 19629.72, "text": " and this is the usual way we think about the Cartesian product because it says what is the", "tokens": [50412, 293, 341, 307, 264, 7713, 636, 321, 519, 466, 264, 22478, 42434, 1674, 570, 309, 1619, 437, 307, 264, 50664], "temperature": 0.0, "avg_logprob": -0.05081467682056213, "compression_ratio": 1.7053140096618358, "no_speech_prob": 0.0006070534000173211}, {"id": 2625, "seek": 1962372, "start": 19629.72, "end": 19636.52, "text": " value of f cross g at x y well it's f of x comma g of y and this is exactly what", "tokens": [50664, 2158, 295, 283, 3278, 290, 412, 2031, 288, 731, 309, 311, 283, 295, 2031, 22117, 290, 295, 288, 293, 341, 307, 2293, 437, 51004], "temperature": 0.0, "avg_logprob": -0.05081467682056213, "compression_ratio": 1.7053140096618358, "no_speech_prob": 0.0006070534000173211}, {"id": 2626, "seek": 1962372, "start": 19637.72, "end": 19645.4, "text": " encompasses that idea and all of the structure that we've defined so far the idea of this", "tokens": [51064, 49866, 300, 1558, 293, 439, 295, 264, 3877, 300, 321, 600, 7642, 370, 1400, 264, 1558, 295, 341, 51448], "temperature": 0.0, "avg_logprob": -0.05081467682056213, "compression_ratio": 1.7053140096618358, "no_speech_prob": 0.0006070534000173211}, {"id": 2627, "seek": 1962372, "start": 19645.4, "end": 19651.24, "text": " stochastic map it's definition how it composes the fact that functions are special cases in", "tokens": [51448, 342, 8997, 2750, 4471, 309, 311, 7123, 577, 309, 715, 4201, 264, 1186, 300, 6828, 366, 2121, 3331, 294, 51740], "temperature": 0.0, "avg_logprob": -0.05081467682056213, "compression_ratio": 1.7053140096618358, "no_speech_prob": 0.0006070534000173211}, {"id": 2628, "seek": 1965124, "start": 19651.320000000003, "end": 19656.2, "text": " particular the identity function is a special kind of stochastic map it turns out that", "tokens": [50368, 1729, 264, 6575, 2445, 307, 257, 2121, 733, 295, 342, 8997, 2750, 4471, 309, 4523, 484, 300, 50612], "temperature": 0.0, "avg_logprob": -0.07041426708823756, "compression_ratio": 1.9189189189189189, "no_speech_prob": 0.003706838935613632}, {"id": 2629, "seek": 1965124, "start": 19656.2, "end": 19663.320000000003, "text": " composition is associative the identity is an identity for the composition for any finite set", "tokens": [50612, 12686, 307, 4180, 1166, 264, 6575, 307, 364, 6575, 337, 264, 12686, 337, 604, 19362, 992, 50968], "temperature": 0.0, "avg_logprob": -0.07041426708823756, "compression_ratio": 1.9189189189189189, "no_speech_prob": 0.003706838935613632}, {"id": 2630, "seek": 1965124, "start": 19664.04, "end": 19670.04, "text": " and this Cartesian product it also satisfies the type of associativity condition", "tokens": [51004, 293, 341, 22478, 42434, 1674, 309, 611, 44271, 264, 2010, 295, 4180, 30142, 4188, 51304], "temperature": 0.0, "avg_logprob": -0.07041426708823756, "compression_ratio": 1.9189189189189189, "no_speech_prob": 0.003706838935613632}, {"id": 2631, "seek": 1965124, "start": 19671.08, "end": 19679.72, "text": " and together all of this all of these data give the collection of finite sets with stochastic", "tokens": [51356, 293, 1214, 439, 295, 341, 439, 295, 613, 1412, 976, 264, 5765, 295, 19362, 6352, 365, 342, 8997, 2750, 51788], "temperature": 0.0, "avg_logprob": -0.07041426708823756, "compression_ratio": 1.9189189189189189, "no_speech_prob": 0.003706838935613632}, {"id": 2632, "seek": 1967972, "start": 19679.72, "end": 19686.600000000002, "text": " maps and this associated product this it gives it the structure of a symmetric minoidal category", "tokens": [50364, 11317, 293, 341, 6615, 1674, 341, 309, 2709, 309, 264, 3877, 295, 257, 32330, 923, 17079, 304, 7719, 50708], "temperature": 0.0, "avg_logprob": -0.0519005298614502, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.0008558377157896757}, {"id": 2633, "seek": 1967972, "start": 19687.88, "end": 19693.32, "text": " but there's another thing that we haven't yet discussed which is a notion of almost everywhere", "tokens": [50772, 457, 456, 311, 1071, 551, 300, 321, 2378, 380, 1939, 7152, 597, 307, 257, 10710, 295, 1920, 5315, 51044], "temperature": 0.0, "avg_logprob": -0.0519005298614502, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.0008558377157896757}, {"id": 2634, "seek": 1967972, "start": 19693.32, "end": 19699.960000000003, "text": " equivalence or in other words an almost surely notion of equivalence and this essentially takes", "tokens": [51044, 9052, 655, 420, 294, 661, 2283, 364, 1920, 11468, 10710, 295, 9052, 655, 293, 341, 4476, 2516, 51376], "temperature": 0.0, "avg_logprob": -0.0519005298614502, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.0008558377157896757}, {"id": 2635, "seek": 1967972, "start": 19699.960000000003, "end": 19706.2, "text": " care of when probabilities happen to vanish and when such a thing happens we can have a", "tokens": [51376, 1127, 295, 562, 33783, 1051, 281, 43584, 293, 562, 1270, 257, 551, 2314, 321, 393, 362, 257, 51688], "temperature": 0.0, "avg_logprob": -0.0519005298614502, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.0008558377157896757}, {"id": 2636, "seek": 1970620, "start": 19706.2, "end": 19713.32, "text": " notion of equivalence between functions when their probabilities are equal versus when they're not", "tokens": [50364, 10710, 295, 9052, 655, 1296, 6828, 562, 641, 33783, 366, 2681, 5717, 562, 436, 434, 406, 50720], "temperature": 0.0, "avg_logprob": -0.06994721966405068, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0009110060054808855}, {"id": 2637, "seek": 1970620, "start": 19713.32, "end": 19719.88, "text": " when they're zero and so we get a very natural definition of what it means for two stochastic", "tokens": [50720, 562, 436, 434, 4018, 293, 370, 321, 483, 257, 588, 3303, 7123, 295, 437, 309, 1355, 337, 732, 342, 8997, 2750, 51048], "temperature": 0.0, "avg_logprob": -0.06994721966405068, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0009110060054808855}, {"id": 2638, "seek": 1970620, "start": 19719.88, "end": 19729.8, "text": " maps very similar to the way we define almost everywhere equivalence for functions so given two", "tokens": [51048, 11317, 588, 2531, 281, 264, 636, 321, 6964, 1920, 5315, 9052, 655, 337, 6828, 370, 2212, 732, 51544], "temperature": 0.0, "avg_logprob": -0.06994721966405068, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0009110060054808855}, {"id": 2639, "seek": 1972980, "start": 19729.8, "end": 19741.399999999998, "text": " stochastic maps so I'm using different notation than what's up here so given two stochastic maps", "tokens": [50364, 342, 8997, 2750, 11317, 370, 286, 478, 1228, 819, 24657, 813, 437, 311, 493, 510, 370, 2212, 732, 342, 8997, 2750, 11317, 50944], "temperature": 0.0, "avg_logprob": -0.1116111737031203, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.02128482796251774}, {"id": 2640, "seek": 1974140, "start": 19741.4, "end": 19743.640000000003, "text": " and a probability measure on x", "tokens": [50364, 293, 257, 8482, 3481, 322, 2031, 50476], "temperature": 0.0, "avg_logprob": -0.18129990317604758, "compression_ratio": 1.1095890410958904, "no_speech_prob": 0.17776821553707123}, {"id": 2641, "seek": 1974140, "start": 19752.68, "end": 19760.52, "text": " we say that f is p almost everywhere equivalent to", "tokens": [50928, 321, 584, 300, 283, 307, 280, 1920, 5315, 10344, 281, 51320], "temperature": 0.0, "avg_logprob": -0.18129990317604758, "compression_ratio": 1.1095890410958904, "no_speech_prob": 0.17776821553707123}, {"id": 2642, "seek": 1976052, "start": 19761.24, "end": 19773.24, "text": " g if and only if and the way we define equivalence is that these stochastic maps agree", "tokens": [50400, 290, 498, 293, 787, 498, 293, 264, 636, 321, 6964, 9052, 655, 307, 300, 613, 342, 8997, 2750, 11317, 3986, 51000], "temperature": 0.0, "avg_logprob": -0.07822488993406296, "compression_ratio": 1.8, "no_speech_prob": 0.012052294798195362}, {"id": 2643, "seek": 1976052, "start": 19774.04, "end": 19779.8, "text": " everywhere outside a set of measure zero so outside of events that have probability zero", "tokens": [51040, 5315, 2380, 257, 992, 295, 3481, 4018, 370, 2380, 295, 3931, 300, 362, 8482, 4018, 51328], "temperature": 0.0, "avg_logprob": -0.07822488993406296, "compression_ratio": 1.8, "no_speech_prob": 0.012052294798195362}, {"id": 2644, "seek": 1976052, "start": 19780.52, "end": 19787.72, "text": " so the way we write that is if and only if the probability of the set of points on the domains", "tokens": [51364, 370, 264, 636, 321, 2464, 300, 307, 498, 293, 787, 498, 264, 8482, 295, 264, 992, 295, 2793, 322, 264, 25514, 51724], "temperature": 0.0, "avg_logprob": -0.07822488993406296, "compression_ratio": 1.8, "no_speech_prob": 0.012052294798195362}, {"id": 2645, "seek": 1978772, "start": 19787.800000000003, "end": 19793.4, "text": " of these corresponding stochastic maps where these two stochastic maps differ", "tokens": [50368, 295, 613, 11760, 342, 8997, 2750, 11317, 689, 613, 732, 342, 8997, 2750, 11317, 743, 50648], "temperature": 0.0, "avg_logprob": -0.0703947894713458, "compression_ratio": 1.6604938271604939, "no_speech_prob": 0.004468046594411135}, {"id": 2646, "seek": 1978772, "start": 19797.960000000003, "end": 19806.120000000003, "text": " is equal to zero now what does this inequality mean now f of x and g of x are both probability", "tokens": [50876, 307, 2681, 281, 4018, 586, 437, 775, 341, 16970, 914, 586, 283, 295, 2031, 293, 290, 295, 2031, 366, 1293, 8482, 51284], "temperature": 0.0, "avg_logprob": -0.0703947894713458, "compression_ratio": 1.6604938271604939, "no_speech_prob": 0.004468046594411135}, {"id": 2647, "seek": 1978772, "start": 19806.120000000003, "end": 19814.52, "text": " measures on y so when I write that they're not equal that means f subscript y x is not is is not", "tokens": [51284, 8000, 322, 288, 370, 562, 286, 2464, 300, 436, 434, 406, 2681, 300, 1355, 283, 2325, 662, 288, 2031, 307, 406, 307, 307, 406, 51704], "temperature": 0.0, "avg_logprob": -0.0703947894713458, "compression_ratio": 1.6604938271604939, "no_speech_prob": 0.004468046594411135}, {"id": 2648, "seek": 1981452, "start": 19814.52, "end": 19822.920000000002, "text": " equal to g subscript y x for some y so this is a very intuitive notion of almost everywhere", "tokens": [50364, 2681, 281, 290, 2325, 662, 288, 2031, 337, 512, 288, 370, 341, 307, 257, 588, 21769, 10710, 295, 1920, 5315, 50784], "temperature": 0.0, "avg_logprob": -0.055883792138868765, "compression_ratio": 1.5266272189349113, "no_speech_prob": 0.0012447794433683157}, {"id": 2649, "seek": 1981452, "start": 19822.920000000002, "end": 19832.28, "text": " equivalence there's another sort of diagrammatic way that you can encompass these definitions as well", "tokens": [50784, 9052, 655, 456, 311, 1071, 1333, 295, 10686, 25915, 636, 300, 291, 393, 28268, 613, 21988, 382, 731, 51252], "temperature": 0.0, "avg_logprob": -0.055883792138868765, "compression_ratio": 1.5266272189349113, "no_speech_prob": 0.0012447794433683157}, {"id": 2650, "seek": 1981452, "start": 19834.920000000002, "end": 19839.08, "text": " so I'll write this as a theorem but we'll use this idea later on", "tokens": [51384, 370, 286, 603, 2464, 341, 382, 257, 20904, 457, 321, 603, 764, 341, 1558, 1780, 322, 51592], "temperature": 0.0, "avg_logprob": -0.055883792138868765, "compression_ratio": 1.5266272189349113, "no_speech_prob": 0.0012447794433683157}, {"id": 2651, "seek": 1983908, "start": 19839.640000000003, "end": 19847.640000000003, "text": " so it turns out that given f g and p as in this definition", "tokens": [50392, 370, 309, 4523, 484, 300, 2212, 283, 290, 293, 280, 382, 294, 341, 7123, 50792], "temperature": 0.0, "avg_logprob": -0.1362078274999346, "compression_ratio": 1.5586206896551724, "no_speech_prob": 0.003376413369551301}, {"id": 2652, "seek": 1983908, "start": 19854.760000000002, "end": 19861.640000000003, "text": " f is almost everywhere equivalent to g so this is the notation that we'll use if and only if", "tokens": [51148, 283, 307, 1920, 5315, 10344, 281, 290, 370, 341, 307, 264, 24657, 300, 321, 603, 764, 498, 293, 787, 498, 51492], "temperature": 0.0, "avg_logprob": -0.1362078274999346, "compression_ratio": 1.5586206896551724, "no_speech_prob": 0.003376413369551301}, {"id": 2653, "seek": 1983908, "start": 19863.4, "end": 19868.600000000002, "text": " the diagram now this is going to be a little bit of an interesting diagram", "tokens": [51580, 264, 10686, 586, 341, 307, 516, 281, 312, 257, 707, 857, 295, 364, 1880, 10686, 51840], "temperature": 0.0, "avg_logprob": -0.1362078274999346, "compression_ratio": 1.5586206896551724, "no_speech_prob": 0.003376413369551301}, {"id": 2654, "seek": 1986908, "start": 19869.88, "end": 19882.2, "text": " so we're going to produce our probability on x we're going to duplicate x using the map that we", "tokens": [50404, 370, 321, 434, 516, 281, 5258, 527, 8482, 322, 2031, 321, 434, 516, 281, 23976, 2031, 1228, 264, 4471, 300, 321, 51020], "temperature": 0.0, "avg_logprob": -0.08204320000439155, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.0007321381126530468}, {"id": 2655, "seek": 1986908, "start": 19882.2, "end": 19891.480000000003, "text": " introduced earlier and on each of these two factors we will apply our associated", "tokens": [51020, 7268, 3071, 293, 322, 1184, 295, 613, 732, 6771, 321, 486, 3079, 527, 6615, 51484], "temperature": 0.0, "avg_logprob": -0.08204320000439155, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.0007321381126530468}, {"id": 2656, "seek": 1989148, "start": 19891.64, "end": 19902.84, "text": " maps f and g on their corresponding terms so in this case we'll have the identity on x here cross", "tokens": [50372, 11317, 283, 293, 290, 322, 641, 11760, 2115, 370, 294, 341, 1389, 321, 603, 362, 264, 6575, 322, 2031, 510, 3278, 50932], "temperature": 0.0, "avg_logprob": -0.1177684699787813, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0020506593864411116}, {"id": 2657, "seek": 1989148, "start": 19903.72, "end": 19911.64, "text": " f and here it's the identity on x cross g where this product is the one that we justified so if", "tokens": [50976, 283, 293, 510, 309, 311, 264, 6575, 322, 2031, 3278, 290, 689, 341, 1674, 307, 264, 472, 300, 321, 27808, 370, 498, 51372], "temperature": 0.0, "avg_logprob": -0.1177684699787813, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0020506593864411116}, {"id": 2658, "seek": 1989148, "start": 19911.64, "end": 19920.6, "text": " and only if this diagram commutes so first of all this is a very interesting statement", "tokens": [51372, 293, 787, 498, 341, 10686, 800, 1819, 370, 700, 295, 439, 341, 307, 257, 588, 1880, 5629, 51820], "temperature": 0.0, "avg_logprob": -0.1177684699787813, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0020506593864411116}, {"id": 2659, "seek": 1992060, "start": 19920.6, "end": 19925.879999999997, "text": " it tells us that this notion of almost everywhere equivalence can be encompassed in some diagrammatic", "tokens": [50364, 309, 5112, 505, 300, 341, 10710, 295, 1920, 5315, 9052, 655, 393, 312, 28268, 292, 294, 512, 10686, 25915, 50628], "temperature": 0.0, "avg_logprob": -0.046949547390605126, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.0011693612905219197}, {"id": 2660, "seek": 1992060, "start": 19925.879999999997, "end": 19934.84, "text": " form and secondly if we ever discuss these in these videos we'll find out that this is very", "tokens": [50628, 1254, 293, 26246, 498, 321, 1562, 2248, 613, 294, 613, 2145, 321, 603, 915, 484, 300, 341, 307, 588, 51076], "temperature": 0.0, "avg_logprob": -0.046949547390605126, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.0011693612905219197}, {"id": 2661, "seek": 1992060, "start": 19934.84, "end": 19941.239999999998, "text": " closer related to a notion of almost everywhere equivalence in a non-commutative setting where", "tokens": [51076, 4966, 4077, 281, 257, 10710, 295, 1920, 5315, 9052, 655, 294, 257, 2107, 12, 13278, 325, 1166, 3287, 689, 51396], "temperature": 0.0, "avg_logprob": -0.046949547390605126, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.0011693612905219197}, {"id": 2662, "seek": 1992060, "start": 19941.239999999998, "end": 19947.16, "text": " we replace our finite sets and stochastic maps with certain kinds of c star algebras", "tokens": [51396, 321, 7406, 527, 19362, 6352, 293, 342, 8997, 2750, 11317, 365, 1629, 3685, 295, 269, 3543, 419, 432, 38182, 51692], "temperature": 0.0, "avg_logprob": -0.046949547390605126, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.0011693612905219197}, {"id": 2663, "seek": 1994716, "start": 19947.16, "end": 19953.72, "text": " and completely positive unital maps and these sorts of objects are relevant in quantum information", "tokens": [50364, 293, 2584, 3353, 517, 1686, 11317, 293, 613, 7527, 295, 6565, 366, 7340, 294, 13018, 1589, 50692], "temperature": 0.0, "avg_logprob": -0.04681730270385742, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.000883005210198462}, {"id": 2664, "seek": 1994716, "start": 19953.72, "end": 19963.0, "text": " theory okay so before we prove this we'll have a little bit of a lemma just to make the calculation", "tokens": [50692, 5261, 1392, 370, 949, 321, 7081, 341, 321, 603, 362, 257, 707, 857, 295, 257, 7495, 1696, 445, 281, 652, 264, 17108, 51156], "temperature": 0.0, "avg_logprob": -0.04681730270385742, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.000883005210198462}, {"id": 2665, "seek": 1994716, "start": 19963.0, "end": 19974.68, "text": " a little bit easier and that lemma is the composition of two maps of two stochastic maps", "tokens": [51156, 257, 707, 857, 3571, 293, 300, 7495, 1696, 307, 264, 12686, 295, 732, 11317, 295, 732, 342, 8997, 2750, 11317, 51740], "temperature": 0.0, "avg_logprob": -0.04681730270385742, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.000883005210198462}, {"id": 2666, "seek": 1997468, "start": 19974.68, "end": 19984.84, "text": " that are of this form so if i have a map phi from u into v and the map psi from u into v", "tokens": [50364, 300, 366, 295, 341, 1254, 370, 498, 741, 362, 257, 4471, 13107, 490, 344, 666, 371, 293, 264, 4471, 20304, 490, 344, 666, 371, 50872], "temperature": 0.0, "avg_logprob": -0.09307326131792211, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.0503176786005497}, {"id": 2667, "seek": 1997468, "start": 19988.12, "end": 19994.36, "text": " and i pre-compose with this diagonal map then this composition is given by", "tokens": [51036, 293, 741, 659, 12, 21541, 541, 365, 341, 21539, 4471, 550, 341, 12686, 307, 2212, 538, 51348], "temperature": 0.0, "avg_logprob": -0.09307326131792211, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.0503176786005497}, {"id": 2668, "seek": 1997468, "start": 19995.88, "end": 20004.36, "text": " the formula so we take phi cross psi composed with this diagonal and how do we evaluate this well", "tokens": [51424, 264, 8513, 370, 321, 747, 13107, 3278, 20304, 18204, 365, 341, 21539, 293, 577, 360, 321, 13059, 341, 731, 51848], "temperature": 0.0, "avg_logprob": -0.09307326131792211, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.0503176786005497}, {"id": 2669, "seek": 2000436, "start": 20004.36, "end": 20010.600000000002, "text": " the domain has a u and the codomain has a v and a w so we can evaluate it v comma w and u", "tokens": [50364, 264, 9274, 575, 257, 344, 293, 264, 17656, 298, 491, 575, 257, 371, 293, 257, 261, 370, 321, 393, 13059, 309, 371, 22117, 261, 293, 344, 50676], "temperature": 0.0, "avg_logprob": -0.07710851430892944, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.001000419375486672}, {"id": 2670, "seek": 2000436, "start": 20011.56, "end": 20016.760000000002, "text": " and the claim is that this is given by taking just the product of these where two of the points", "tokens": [50724, 293, 264, 3932, 307, 300, 341, 307, 2212, 538, 1940, 445, 264, 1674, 295, 613, 689, 732, 295, 264, 2793, 50984], "temperature": 0.0, "avg_logprob": -0.07710851430892944, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.001000419375486672}, {"id": 2671, "seek": 2000436, "start": 20016.760000000002, "end": 20028.04, "text": " happen to match up so this is phi v u psi w u for all v u and w so the proof of this is pretty", "tokens": [50984, 1051, 281, 2995, 493, 370, 341, 307, 13107, 371, 344, 20304, 261, 344, 337, 439, 371, 344, 293, 261, 370, 264, 8177, 295, 341, 307, 1238, 51548], "temperature": 0.0, "avg_logprob": -0.07710851430892944, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.001000419375486672}, {"id": 2672, "seek": 2002804, "start": 20029.0, "end": 20035.96, "text": " pretty easy once we have all of our definitions in place and the left hand side of this expression", "tokens": [50412, 1238, 1858, 1564, 321, 362, 439, 295, 527, 21988, 294, 1081, 293, 264, 1411, 1011, 1252, 295, 341, 6114, 50760], "temperature": 0.0, "avg_logprob": -0.07156835283551898, "compression_ratio": 1.8768472906403941, "no_speech_prob": 0.16230028867721558}, {"id": 2673, "seek": 2002804, "start": 20035.96, "end": 20044.2, "text": " by definition of the composition and by using the definition of the product is equal to a sum", "tokens": [50760, 538, 7123, 295, 264, 12686, 293, 538, 1228, 264, 7123, 295, 264, 1674, 307, 2681, 281, 257, 2408, 51172], "temperature": 0.0, "avg_logprob": -0.07156835283551898, "compression_ratio": 1.8768472906403941, "no_speech_prob": 0.16230028867721558}, {"id": 2674, "seek": 2002804, "start": 20044.2, "end": 20052.2, "text": " and what's our intermediary step it's the sum over u cross u and u cross u therefore we have", "tokens": [51172, 293, 437, 311, 527, 15184, 822, 1823, 309, 311, 264, 2408, 670, 344, 3278, 344, 293, 344, 3278, 344, 4412, 321, 362, 51572], "temperature": 0.0, "avg_logprob": -0.07156835283551898, "compression_ratio": 1.8768472906403941, "no_speech_prob": 0.16230028867721558}, {"id": 2675, "seek": 2002804, "start": 20052.2, "end": 20056.600000000002, "text": " to sum over two elements we've already we're already using a letter u so we're going to have to", "tokens": [51572, 281, 2408, 670, 732, 4959, 321, 600, 1217, 321, 434, 1217, 1228, 257, 5063, 344, 370, 321, 434, 516, 281, 362, 281, 51792], "temperature": 0.0, "avg_logprob": -0.07156835283551898, "compression_ratio": 1.8768472906403941, "no_speech_prob": 0.16230028867721558}, {"id": 2676, "seek": 2005660, "start": 20056.6, "end": 20062.359999999997, "text": " introduce u prime and u double prime for instance so it's going to be u prime u double prime both", "tokens": [50364, 5366, 344, 5835, 293, 344, 3834, 5835, 337, 5197, 370, 309, 311, 516, 281, 312, 344, 5835, 344, 3834, 5835, 1293, 50652], "temperature": 0.0, "avg_logprob": -0.056442880630493165, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.014501199126243591}, {"id": 2677, "seek": 2005660, "start": 20062.359999999997, "end": 20073.48, "text": " elements in u and the product here is going to be phi v u prime psi w u double prime because that's", "tokens": [50652, 4959, 294, 344, 293, 264, 1674, 510, 307, 516, 281, 312, 13107, 371, 344, 5835, 20304, 261, 344, 3834, 5835, 570, 300, 311, 51208], "temperature": 0.0, "avg_logprob": -0.056442880630493165, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.014501199126243591}, {"id": 2678, "seek": 2005660, "start": 20073.48, "end": 20082.44, "text": " the second coordinate and this is as we recall the direct the chronicle delta twice using the", "tokens": [51208, 264, 1150, 15670, 293, 341, 307, 382, 321, 9901, 264, 2047, 264, 19393, 3520, 8289, 6091, 1228, 264, 51656], "temperature": 0.0, "avg_logprob": -0.056442880630493165, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.014501199126243591}, {"id": 2679, "seek": 2008244, "start": 20082.44, "end": 20090.359999999997, "text": " coordinate u and u double prime and u prime so it's u prime u delta u double prime u so this", "tokens": [50364, 15670, 344, 293, 344, 3834, 5835, 293, 344, 5835, 370, 309, 311, 344, 5835, 344, 8289, 344, 3834, 5835, 344, 370, 341, 50760], "temperature": 0.0, "avg_logprob": -0.041774541991097584, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.011686576530337334}, {"id": 2680, "seek": 2008244, "start": 20090.359999999997, "end": 20097.079999999998, "text": " gives us two delta functions and we have a summation over those and as a result these two letters", "tokens": [50760, 2709, 505, 732, 8289, 6828, 293, 321, 362, 257, 28811, 670, 729, 293, 382, 257, 1874, 613, 732, 7825, 51096], "temperature": 0.0, "avg_logprob": -0.041774541991097584, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.011686576530337334}, {"id": 2681, "seek": 2008244, "start": 20097.079999999998, "end": 20104.12, "text": " coincide so this is exactly the right hand side quick and simple proof so this is the proof of the", "tokens": [51096, 13001, 482, 370, 341, 307, 2293, 264, 558, 1011, 1252, 1702, 293, 2199, 8177, 370, 341, 307, 264, 8177, 295, 264, 51448], "temperature": 0.0, "avg_logprob": -0.041774541991097584, "compression_ratio": 1.795031055900621, "no_speech_prob": 0.011686576530337334}, {"id": 2682, "seek": 2010412, "start": 20104.12, "end": 20115.399999999998, "text": " lemma and then the proof of the theorem we'll now talk about Bayes theorem and first we'll", "tokens": [50364, 7495, 1696, 293, 550, 264, 8177, 295, 264, 20904, 321, 603, 586, 751, 466, 7840, 279, 20904, 293, 700, 321, 603, 50928], "temperature": 0.0, "avg_logprob": -0.11116859647962782, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0566459484398365}, {"id": 2683, "seek": 2010412, "start": 20115.96, "end": 20121.32, "text": " state the theorem given a probability distribution on x", "tokens": [50956, 1785, 264, 20904, 2212, 257, 8482, 7316, 322, 2031, 51224], "temperature": 0.0, "avg_logprob": -0.11116859647962782, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0566459484398365}, {"id": 2684, "seek": 2012132, "start": 20121.72, "end": 20134.12, "text": " and a conditional probability from x to y call it f so it's the stochastic map", "tokens": [50384, 293, 257, 27708, 8482, 490, 2031, 281, 288, 818, 309, 283, 370, 309, 311, 264, 342, 8997, 2750, 4471, 51004], "temperature": 0.0, "avg_logprob": -0.16275560565111113, "compression_ratio": 1.4375, "no_speech_prob": 0.07368994504213333}, {"id": 2685, "seek": 2012132, "start": 20139.0, "end": 20148.28, "text": " there exists another map going in the opposite direction let's call it g such that", "tokens": [51248, 456, 8198, 1071, 4471, 516, 294, 264, 6182, 3513, 718, 311, 818, 309, 290, 1270, 300, 51712], "temperature": 0.0, "avg_logprob": -0.16275560565111113, "compression_ratio": 1.4375, "no_speech_prob": 0.07368994504213333}, {"id": 2686, "seek": 2014828, "start": 20148.76, "end": 20150.76, "text": " the diagram", "tokens": [50388, 264, 10686, 50488], "temperature": 0.0, "avg_logprob": -0.1265425601248014, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.008576801978051662}, {"id": 2687, "seek": 2014828, "start": 20153.719999999998, "end": 20160.76, "text": " now the diagram looks a little bit complicated but it's not too bad when we write out the equation", "tokens": [50636, 586, 264, 10686, 1542, 257, 707, 857, 6179, 457, 309, 311, 406, 886, 1578, 562, 321, 2464, 484, 264, 5367, 50988], "temperature": 0.0, "avg_logprob": -0.1265425601248014, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.008576801978051662}, {"id": 2688, "seek": 2014828, "start": 20160.76, "end": 20168.76, "text": " we'll see exactly what it means so here we'll have p and here notice we can compose p with f", "tokens": [50988, 321, 603, 536, 2293, 437, 309, 1355, 370, 510, 321, 603, 362, 280, 293, 510, 3449, 321, 393, 35925, 280, 365, 283, 51388], "temperature": 0.0, "avg_logprob": -0.1265425601248014, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.008576801978051662}, {"id": 2689, "seek": 2014828, "start": 20168.76, "end": 20170.76, "text": " to get another probability distribution", "tokens": [51388, 281, 483, 1071, 8482, 7316, 51488], "temperature": 0.0, "avg_logprob": -0.1265425601248014, "compression_ratio": 1.5576923076923077, "no_speech_prob": 0.008576801978051662}, {"id": 2690, "seek": 2017076, "start": 20171.239999999998, "end": 20181.719999999998, "text": " on y and we'll call that q so we have our probability distribution on x on one on y we duplicate x", "tokens": [50388, 322, 288, 293, 321, 603, 818, 300, 9505, 370, 321, 362, 527, 8482, 7316, 322, 2031, 322, 472, 322, 288, 321, 23976, 2031, 50912], "temperature": 0.0, "avg_logprob": -0.16640520095825195, "compression_ratio": 1.4491525423728813, "no_speech_prob": 0.04208149388432503}, {"id": 2691, "seek": 2017076, "start": 20185.559999999998, "end": 20191.879999999997, "text": " we duplicate y this almost reminds me of the definition of a equivalence", "tokens": [51104, 321, 23976, 288, 341, 1920, 12025, 385, 295, 264, 7123, 295, 257, 9052, 655, 51420], "temperature": 0.0, "avg_logprob": -0.16640520095825195, "compression_ratio": 1.4491525423728813, "no_speech_prob": 0.04208149388432503}, {"id": 2692, "seek": 2019188, "start": 20192.68, "end": 20202.52, "text": " x cross y and here we will apply the only maps we can and to go from x to y we apply f", "tokens": [50404, 2031, 3278, 288, 293, 510, 321, 486, 3079, 264, 787, 11317, 321, 393, 293, 281, 352, 490, 2031, 281, 288, 321, 3079, 283, 50896], "temperature": 0.0, "avg_logprob": -0.12844260822642933, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.03514035791158676}, {"id": 2693, "seek": 2019188, "start": 20205.0, "end": 20207.16, "text": " and to go from y to x we apply g", "tokens": [51020, 293, 281, 352, 490, 288, 281, 2031, 321, 3079, 290, 51128], "temperature": 0.0, "avg_logprob": -0.12844260822642933, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.03514035791158676}, {"id": 2694, "seek": 2019188, "start": 20209.8, "end": 20212.2, "text": " so the statement is that this diagram commutes", "tokens": [51260, 370, 264, 5629, 307, 300, 341, 10686, 800, 1819, 51380], "temperature": 0.0, "avg_logprob": -0.12844260822642933, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.03514035791158676}, {"id": 2695, "seek": 2019188, "start": 20214.440000000002, "end": 20215.56, "text": " and furthermore", "tokens": [51492, 293, 3052, 3138, 51548], "temperature": 0.0, "avg_logprob": -0.12844260822642933, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.03514035791158676}, {"id": 2696, "seek": 2021556, "start": 20216.36, "end": 20225.32, "text": " for any other stochastic map that also goes in the opposite direction let's call it g prime", "tokens": [50404, 337, 604, 661, 342, 8997, 2750, 4471, 300, 611, 1709, 294, 264, 6182, 3513, 718, 311, 818, 309, 290, 5835, 50852], "temperature": 0.0, "avg_logprob": -0.14518336032299287, "compression_ratio": 1.457142857142857, "no_speech_prob": 0.0017006511334329844}, {"id": 2697, "seek": 2021556, "start": 20227.960000000003, "end": 20228.920000000002, "text": " satisfying this", "tokens": [50984, 18348, 341, 51032], "temperature": 0.0, "avg_logprob": -0.14518336032299287, "compression_ratio": 1.457142857142857, "no_speech_prob": 0.0017006511334329844}, {"id": 2698, "seek": 2021556, "start": 20234.600000000002, "end": 20242.920000000002, "text": " then these two maps are q are almost everywhere equivalent and in the sense of our probability q", "tokens": [51316, 550, 613, 732, 11317, 366, 9505, 366, 1920, 5315, 10344, 293, 294, 264, 2020, 295, 527, 8482, 9505, 51732], "temperature": 0.0, "avg_logprob": -0.14518336032299287, "compression_ratio": 1.457142857142857, "no_speech_prob": 0.0017006511334329844}, {"id": 2699, "seek": 2024556, "start": 20246.440000000002, "end": 20252.2, "text": " so this is the formal statement of Bayes theorem and if you've seen if you've seen Bayes theorem in", "tokens": [50408, 370, 341, 307, 264, 9860, 5629, 295, 7840, 279, 20904, 293, 498, 291, 600, 1612, 498, 291, 600, 1612, 7840, 279, 20904, 294, 50696], "temperature": 0.0, "avg_logprob": -0.08631535371144612, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0005527501343749464}, {"id": 2700, "seek": 2024556, "start": 20252.2, "end": 20258.84, "text": " a different context this may seem totally strange but let's just see exactly what it says", "tokens": [50696, 257, 819, 4319, 341, 815, 1643, 3879, 5861, 457, 718, 311, 445, 536, 2293, 437, 309, 1619, 51028], "temperature": 0.0, "avg_logprob": -0.08631535371144612, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0005527501343749464}, {"id": 2701, "seek": 2024556, "start": 20263.32, "end": 20266.36, "text": " when we look at the composition of all of these arrows", "tokens": [51252, 562, 321, 574, 412, 264, 12686, 295, 439, 295, 613, 19669, 51404], "temperature": 0.0, "avg_logprob": -0.08631535371144612, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0005527501343749464}, {"id": 2702, "seek": 2024556, "start": 20268.440000000002, "end": 20271.48, "text": " we've actually computed expressions just like this if you remember", "tokens": [51508, 321, 600, 767, 40610, 15277, 445, 411, 341, 498, 291, 1604, 51660], "temperature": 0.0, "avg_logprob": -0.08631535371144612, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0005527501343749464}, {"id": 2703, "seek": 2027148, "start": 20272.04, "end": 20275.96, "text": " the this left hand side when we were doing the notion of almost everywhere equivalence", "tokens": [50392, 264, 341, 1411, 1011, 1252, 562, 321, 645, 884, 264, 10710, 295, 1920, 5315, 9052, 655, 50588], "temperature": 0.0, "avg_logprob": -0.1343548652973581, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.0007793315453454852}, {"id": 2704, "seek": 2027148, "start": 20275.96, "end": 20281.16, "text": " in that diagrammatic perspective we computed something I think it may have been exactly", "tokens": [50588, 294, 300, 10686, 25915, 4585, 321, 40610, 746, 286, 519, 309, 815, 362, 668, 2293, 50848], "temperature": 0.0, "avg_logprob": -0.1343548652973581, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.0007793315453454852}, {"id": 2705, "seek": 2027148, "start": 20281.16, "end": 20286.04, "text": " this expression actually so commutativity says", "tokens": [50848, 341, 6114, 767, 370, 800, 325, 30142, 1619, 51092], "temperature": 0.0, "avg_logprob": -0.1343548652973581, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.0007793315453454852}, {"id": 2706, "seek": 2028604, "start": 20286.120000000003, "end": 20301.48, "text": " says that f y x times p x equals and if we did that same calculation but on the right hand", "tokens": [50368, 1619, 300, 283, 288, 2031, 1413, 280, 2031, 6915, 293, 498, 321, 630, 300, 912, 17108, 457, 322, 264, 558, 1011, 51136], "temperature": 0.0, "avg_logprob": -0.11769051104784012, "compression_ratio": 1.5751633986928104, "no_speech_prob": 0.009412194602191448}, {"id": 2707, "seek": 2028604, "start": 20301.48, "end": 20306.760000000002, "text": " side of this diagram it looks almost the same it's just that the g is on the other side nevertheless", "tokens": [51136, 1252, 295, 341, 10686, 309, 1542, 1920, 264, 912, 309, 311, 445, 300, 264, 290, 307, 322, 264, 661, 1252, 26924, 51400], "temperature": 0.0, "avg_logprob": -0.11769051104784012, "compression_ratio": 1.5751633986928104, "no_speech_prob": 0.009412194602191448}, {"id": 2708, "seek": 2028604, "start": 20306.760000000002, "end": 20314.760000000002, "text": " we still get g x y q y and this holds for all x y", "tokens": [51400, 321, 920, 483, 290, 2031, 288, 9505, 288, 293, 341, 9190, 337, 439, 2031, 288, 51800], "temperature": 0.0, "avg_logprob": -0.11769051104784012, "compression_ratio": 1.5751633986928104, "no_speech_prob": 0.009412194602191448}, {"id": 2709, "seek": 2031604, "start": 20316.280000000002, "end": 20324.68, "text": " of course x is an x and y is in y now let's introduce some notation to see how to understand this", "tokens": [50376, 295, 1164, 2031, 307, 364, 2031, 293, 288, 307, 294, 288, 586, 718, 311, 5366, 512, 24657, 281, 536, 577, 281, 1223, 341, 50796], "temperature": 0.0, "avg_logprob": -0.10333691472592561, "compression_ratio": 1.6291390728476822, "no_speech_prob": 0.0005192828248254955}, {"id": 2710, "seek": 2031604, "start": 20326.920000000002, "end": 20336.2, "text": " let's define p of y given x so this is the probability of y given x to be exactly f y x", "tokens": [50908, 718, 311, 6964, 280, 295, 288, 2212, 2031, 370, 341, 307, 264, 8482, 295, 288, 2212, 2031, 281, 312, 2293, 283, 288, 2031, 51372], "temperature": 0.0, "avg_logprob": -0.10333691472592561, "compression_ratio": 1.6291390728476822, "no_speech_prob": 0.0005192828248254955}, {"id": 2711, "seek": 2031604, "start": 20338.600000000002, "end": 20341.72, "text": " that's exactly what f means f is this stochastic map it says", "tokens": [51492, 300, 311, 2293, 437, 283, 1355, 283, 307, 341, 342, 8997, 2750, 4471, 309, 1619, 51648], "temperature": 0.0, "avg_logprob": -0.10333691472592561, "compression_ratio": 1.6291390728476822, "no_speech_prob": 0.0005192828248254955}, {"id": 2712, "seek": 2034172, "start": 20342.440000000002, "end": 20347.24, "text": " it's not corresponding to a function it says if you give me x I will give you y with", "tokens": [50400, 309, 311, 406, 11760, 281, 257, 2445, 309, 1619, 498, 291, 976, 385, 2031, 286, 486, 976, 291, 288, 365, 50640], "temperature": 0.0, "avg_logprob": -0.05291708680086358, "compression_ratio": 2.1079545454545454, "no_speech_prob": 0.013220373541116714}, {"id": 2713, "seek": 2034172, "start": 20347.24, "end": 20352.760000000002, "text": " some probability the probability is exactly f y x so that's exactly what this conditional", "tokens": [50640, 512, 8482, 264, 8482, 307, 2293, 283, 288, 2031, 370, 300, 311, 2293, 437, 341, 27708, 50916], "temperature": 0.0, "avg_logprob": -0.05291708680086358, "compression_ratio": 2.1079545454545454, "no_speech_prob": 0.013220373541116714}, {"id": 2714, "seek": 2034172, "start": 20352.760000000002, "end": 20363.56, "text": " probability is and the probability of x is just little p x the conditional probability of x given", "tokens": [50916, 8482, 307, 293, 264, 8482, 295, 2031, 307, 445, 707, 280, 2031, 264, 27708, 8482, 295, 2031, 2212, 51456], "temperature": 0.0, "avg_logprob": -0.05291708680086358, "compression_ratio": 2.1079545454545454, "no_speech_prob": 0.013220373541116714}, {"id": 2715, "seek": 2034172, "start": 20363.56, "end": 20369.48, "text": " y now this is going in the opposite direction it says if you give me y what's the probability of x", "tokens": [51456, 288, 586, 341, 307, 516, 294, 264, 6182, 3513, 309, 1619, 498, 291, 976, 385, 288, 437, 311, 264, 8482, 295, 2031, 51752], "temperature": 0.0, "avg_logprob": -0.05291708680086358, "compression_ratio": 2.1079545454545454, "no_speech_prob": 0.013220373541116714}, {"id": 2716, "seek": 2036948, "start": 20369.48, "end": 20380.12, "text": " occurring that's exactly g x y and finally the probability of y occurring is q y and so if we", "tokens": [50364, 18386, 300, 311, 2293, 290, 2031, 288, 293, 2721, 264, 8482, 295, 288, 18386, 307, 9505, 288, 293, 370, 498, 321, 50896], "temperature": 0.0, "avg_logprob": -0.05111228530086688, "compression_ratio": 1.9060402684563758, "no_speech_prob": 0.007345074787735939}, {"id": 2717, "seek": 2036948, "start": 20380.12, "end": 20386.52, "text": " write down these expressions commutativity is of this diagram says nothing but the probability of", "tokens": [50896, 2464, 760, 613, 15277, 800, 325, 30142, 307, 295, 341, 10686, 1619, 1825, 457, 264, 8482, 295, 51216], "temperature": 0.0, "avg_logprob": -0.05111228530086688, "compression_ratio": 1.9060402684563758, "no_speech_prob": 0.007345074787735939}, {"id": 2718, "seek": 2036948, "start": 20386.52, "end": 20394.36, "text": " x given y times the probability of x is equal to the probability of y of x given y times the", "tokens": [51216, 2031, 2212, 288, 1413, 264, 8482, 295, 2031, 307, 2681, 281, 264, 8482, 295, 288, 295, 2031, 2212, 288, 1413, 264, 51608], "temperature": 0.0, "avg_logprob": -0.05111228530086688, "compression_ratio": 1.9060402684563758, "no_speech_prob": 0.007345074787735939}, {"id": 2719, "seek": 2039436, "start": 20394.36, "end": 20401.56, "text": " probability of y which is perhaps a slightly more familiar form of base theorem at least when", "tokens": [50364, 8482, 295, 288, 597, 307, 4317, 257, 4748, 544, 4963, 1254, 295, 3096, 20904, 412, 1935, 562, 50724], "temperature": 0.0, "avg_logprob": -0.04351060777097135, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0005527646280825138}, {"id": 2720, "seek": 2039436, "start": 20401.56, "end": 20408.12, "text": " your events are singleton sets and with the appropriate definitions you can also extend this", "tokens": [50724, 428, 3931, 366, 1522, 14806, 6352, 293, 365, 264, 6854, 21988, 291, 393, 611, 10101, 341, 51052], "temperature": 0.0, "avg_logprob": -0.04351060777097135, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0005527646280825138}, {"id": 2721, "seek": 2039436, "start": 20409.08, "end": 20413.24, "text": " you can look at what this diagram means because these are corresponding to probability measures", "tokens": [51100, 291, 393, 574, 412, 437, 341, 10686, 1355, 570, 613, 366, 11760, 281, 8482, 8000, 51308], "temperature": 0.0, "avg_logprob": -0.04351060777097135, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0005527646280825138}, {"id": 2722, "seek": 2039436, "start": 20413.24, "end": 20419.72, "text": " and you can also define a notion of conditional probability where you replace this point with", "tokens": [51308, 293, 291, 393, 611, 6964, 257, 10710, 295, 27708, 8482, 689, 291, 7406, 341, 935, 365, 51632], "temperature": 0.0, "avg_logprob": -0.04351060777097135, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0005527646280825138}, {"id": 2723, "seek": 2041972, "start": 20419.72, "end": 20425.24, "text": " a subset and you can use the probabilities on your corresponding spaces to make sense of what", "tokens": [50364, 257, 25993, 293, 291, 393, 764, 264, 33783, 322, 428, 11760, 7673, 281, 652, 2020, 295, 437, 50640], "temperature": 0.0, "avg_logprob": -0.04527468681335449, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.003272849600762129}, {"id": 2724, "seek": 2041972, "start": 20425.24, "end": 20431.32, "text": " this means when x is replaced by some event a perhaps and y is replaced by some event b", "tokens": [50640, 341, 1355, 562, 2031, 307, 10772, 538, 512, 2280, 257, 4317, 293, 288, 307, 10772, 538, 512, 2280, 272, 50944], "temperature": 0.0, "avg_logprob": -0.04527468681335449, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.003272849600762129}, {"id": 2725, "seek": 2041972, "start": 20431.960000000003, "end": 20436.280000000002, "text": " nevertheless the same equation still follows from commutativity of this diagram", "tokens": [50976, 26924, 264, 912, 5367, 920, 10002, 490, 800, 325, 30142, 295, 341, 10686, 51192], "temperature": 0.0, "avg_logprob": -0.04527468681335449, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.003272849600762129}, {"id": 2726, "seek": 2041972, "start": 20437.48, "end": 20444.2, "text": " so let's look at our earlier example just to see what this is saying and how to interpret it in", "tokens": [51252, 370, 718, 311, 574, 412, 527, 3071, 1365, 445, 281, 536, 437, 341, 307, 1566, 293, 577, 281, 7302, 309, 294, 51588], "temperature": 0.0, "avg_logprob": -0.04527468681335449, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.003272849600762129}, {"id": 2727, "seek": 2044420, "start": 20444.2, "end": 20453.96, "text": " sort of a real-life situation so if you remember we had x and y two sets with each of which contains", "tokens": [50364, 1333, 295, 257, 957, 12, 9073, 2590, 370, 498, 291, 1604, 321, 632, 2031, 293, 288, 732, 6352, 365, 1184, 295, 597, 8306, 50852], "temperature": 0.0, "avg_logprob": -0.040610674449375696, "compression_ratio": 1.771604938271605, "no_speech_prob": 0.13111643493175507}, {"id": 2728, "seek": 2044420, "start": 20453.96, "end": 20464.920000000002, "text": " two elements and x corresponded to the set where there's a good sale and the other element was", "tokens": [50852, 732, 4959, 293, 2031, 6805, 292, 281, 264, 992, 689, 456, 311, 257, 665, 8680, 293, 264, 661, 4478, 390, 51400], "temperature": 0.0, "avg_logprob": -0.040610674449375696, "compression_ratio": 1.771604938271605, "no_speech_prob": 0.13111643493175507}, {"id": 2729, "seek": 2044420, "start": 20464.920000000002, "end": 20472.440000000002, "text": " not a great sale not good sale and y is the set of elements the set containing the elements", "tokens": [51400, 406, 257, 869, 8680, 406, 665, 8680, 293, 288, 307, 264, 992, 295, 4959, 264, 992, 19273, 264, 4959, 51776], "temperature": 0.0, "avg_logprob": -0.040610674449375696, "compression_ratio": 1.771604938271605, "no_speech_prob": 0.13111643493175507}, {"id": 2730, "seek": 2047244, "start": 20472.44, "end": 20480.199999999997, "text": " i go to the store the grocery the grocery store or i don't go", "tokens": [50364, 741, 352, 281, 264, 3531, 264, 14410, 264, 14410, 3531, 420, 741, 500, 380, 352, 50752], "temperature": 0.0, "avg_logprob": -0.07959449486654313, "compression_ratio": 1.7482517482517483, "no_speech_prob": 0.0005527652101591229}, {"id": 2731, "seek": 2047244, "start": 20484.039999999997, "end": 20488.92, "text": " and we also had probabilities on each of these spaces and we also knew the probabilities that", "tokens": [50944, 293, 321, 611, 632, 33783, 322, 1184, 295, 613, 7673, 293, 321, 611, 2586, 264, 33783, 300, 51188], "temperature": 0.0, "avg_logprob": -0.07959449486654313, "compression_ratio": 1.7482517482517483, "no_speech_prob": 0.0005527652101591229}, {"id": 2732, "seek": 2047244, "start": 20488.92, "end": 20494.44, "text": " if there's a good sale how likely am i to go right that was nine nine ninety percent so ninety", "tokens": [51188, 498, 456, 311, 257, 665, 8680, 577, 3700, 669, 741, 281, 352, 558, 300, 390, 4949, 4949, 25063, 3043, 370, 25063, 51464], "temperature": 0.0, "avg_logprob": -0.07959449486654313, "compression_ratio": 1.7482517482517483, "no_speech_prob": 0.0005527652101591229}, {"id": 2733, "seek": 2049444, "start": 20494.44, "end": 20504.359999999997, "text": " percent if good i go with ninety percent probability and if not good then i still go", "tokens": [50364, 3043, 498, 665, 741, 352, 365, 25063, 3043, 8482, 293, 498, 406, 665, 550, 741, 920, 352, 50860], "temperature": 0.0, "avg_logprob": -0.06922545198534356, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.04467448592185974}, {"id": 2734, "seek": 2049444, "start": 20505.239999999998, "end": 20514.12, "text": " but with sixty percent chance and likewise the other probabilities are given by the fact that", "tokens": [50904, 457, 365, 21390, 3043, 2931, 293, 32407, 264, 661, 33783, 366, 2212, 538, 264, 1186, 300, 51348], "temperature": 0.0, "avg_logprob": -0.06922545198534356, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.04467448592185974}, {"id": 2735, "seek": 2049444, "start": 20514.12, "end": 20519.079999999998, "text": " it's one minus this one minus this and we also know the probability of there actually being a good", "tokens": [51348, 309, 311, 472, 3175, 341, 472, 3175, 341, 293, 321, 611, 458, 264, 8482, 295, 456, 767, 885, 257, 665, 51596], "temperature": 0.0, "avg_logprob": -0.06922545198534356, "compression_ratio": 1.7531645569620253, "no_speech_prob": 0.04467448592185974}, {"id": 2736, "seek": 2051908, "start": 20519.08, "end": 20524.920000000002, "text": " sale so we know what p of good sale is and the probability is thirty percent and the probability", "tokens": [50364, 8680, 370, 321, 458, 437, 280, 295, 665, 8680, 307, 293, 264, 8482, 307, 11790, 3043, 293, 264, 8482, 50656], "temperature": 0.0, "avg_logprob": -0.04702733910602072, "compression_ratio": 1.9607843137254901, "no_speech_prob": 0.03845895081758499}, {"id": 2737, "seek": 2051908, "start": 20524.920000000002, "end": 20533.0, "text": " of a not good sale is therefore seventy percent so we have all of this information now imagine you're", "tokens": [50656, 295, 257, 406, 665, 8680, 307, 4412, 25662, 3043, 370, 321, 362, 439, 295, 341, 1589, 586, 3811, 291, 434, 51060], "temperature": 0.0, "avg_logprob": -0.04702733910602072, "compression_ratio": 1.9607843137254901, "no_speech_prob": 0.03845895081758499}, {"id": 2738, "seek": 2051908, "start": 20533.0, "end": 20540.2, "text": " in that store this particular week and you happen to see me there so in that case you happen to know", "tokens": [51060, 294, 300, 3531, 341, 1729, 1243, 293, 291, 1051, 281, 536, 385, 456, 370, 294, 300, 1389, 291, 1051, 281, 458, 51420], "temperature": 0.0, "avg_logprob": -0.04702733910602072, "compression_ratio": 1.9607843137254901, "no_speech_prob": 0.03845895081758499}, {"id": 2739, "seek": 2051908, "start": 20540.2, "end": 20548.52, "text": " i'm already at the store then you can ask what is the probability that there's a good sale this week", "tokens": [51420, 741, 478, 1217, 412, 264, 3531, 550, 291, 393, 1029, 437, 307, 264, 8482, 300, 456, 311, 257, 665, 8680, 341, 1243, 51836], "temperature": 0.0, "avg_logprob": -0.04702733910602072, "compression_ratio": 1.9607843137254901, "no_speech_prob": 0.03845895081758499}, {"id": 2740, "seek": 2054852, "start": 20548.52, "end": 20553.56, "text": " given the information that you see and knowing this information as well so initially you also", "tokens": [50364, 2212, 264, 1589, 300, 291, 536, 293, 5276, 341, 1589, 382, 731, 370, 9105, 291, 611, 50616], "temperature": 0.0, "avg_logprob": -0.0475769762722951, "compression_ratio": 1.9148936170212767, "no_speech_prob": 0.002050511073321104}, {"id": 2741, "seek": 2054852, "start": 20553.56, "end": 20558.68, "text": " know the statistics that says the if i look over the entire year the probability that there's a", "tokens": [50616, 458, 264, 12523, 300, 1619, 264, 498, 741, 574, 670, 264, 2302, 1064, 264, 8482, 300, 456, 311, 257, 50872], "temperature": 0.0, "avg_logprob": -0.0475769762722951, "compression_ratio": 1.9148936170212767, "no_speech_prob": 0.002050511073321104}, {"id": 2742, "seek": 2054852, "start": 20558.68, "end": 20563.96, "text": " good sale is thirty percent but you also know that i'm more likely to go to the store if there is", "tokens": [50872, 665, 8680, 307, 11790, 3043, 457, 291, 611, 458, 300, 741, 478, 544, 3700, 281, 352, 281, 264, 3531, 498, 456, 307, 51136], "temperature": 0.0, "avg_logprob": -0.0475769762722951, "compression_ratio": 1.9148936170212767, "no_speech_prob": 0.002050511073321104}, {"id": 2743, "seek": 2054852, "start": 20563.96, "end": 20568.68, "text": " a sale so if you see me then there might be a better chance that there's a sale this week", "tokens": [51136, 257, 8680, 370, 498, 291, 536, 385, 550, 456, 1062, 312, 257, 1101, 2931, 300, 456, 311, 257, 8680, 341, 1243, 51372], "temperature": 0.0, "avg_logprob": -0.0475769762722951, "compression_ratio": 1.9148936170212767, "no_speech_prob": 0.002050511073321104}, {"id": 2744, "seek": 2054852, "start": 20570.04, "end": 20574.84, "text": " and how do you figure that out well if we look at this expression and we", "tokens": [51440, 293, 577, 360, 291, 2573, 300, 484, 731, 498, 321, 574, 412, 341, 6114, 293, 321, 51680], "temperature": 0.0, "avg_logprob": -0.0475769762722951, "compression_ratio": 1.9148936170212767, "no_speech_prob": 0.002050511073321104}, {"id": 2745, "seek": 2057484, "start": 20575.8, "end": 20578.44, "text": " compare these two sides then", "tokens": [50412, 6794, 613, 732, 4881, 550, 50544], "temperature": 0.0, "avg_logprob": -0.07824162549750749, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.004198548384010792}, {"id": 2746, "seek": 2057484, "start": 20580.84, "end": 20585.48, "text": " we can say that f corresponds to the if there's a good sale versus if there's not a good sale", "tokens": [50664, 321, 393, 584, 300, 283, 23249, 281, 264, 498, 456, 311, 257, 665, 8680, 5717, 498, 456, 311, 406, 257, 665, 8680, 50896], "temperature": 0.0, "avg_logprob": -0.07824162549750749, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.004198548384010792}, {"id": 2747, "seek": 2057484, "start": 20585.48, "end": 20592.12, "text": " how likely am i to go or not as f y x and the probability that there's a good sale", "tokens": [50896, 577, 3700, 669, 741, 281, 352, 420, 406, 382, 283, 288, 2031, 293, 264, 8482, 300, 456, 311, 257, 665, 8680, 51228], "temperature": 0.0, "avg_logprob": -0.07824162549750749, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.004198548384010792}, {"id": 2748, "seek": 2057484, "start": 20592.12, "end": 20601.32, "text": " is p x and if we wanted to know so let's say g is on the other side so g of x given y so this says", "tokens": [51228, 307, 280, 2031, 293, 498, 321, 1415, 281, 458, 370, 718, 311, 584, 290, 307, 322, 264, 661, 1252, 370, 290, 295, 2031, 2212, 288, 370, 341, 1619, 51688], "temperature": 0.0, "avg_logprob": -0.07824162549750749, "compression_ratio": 1.7674418604651163, "no_speech_prob": 0.004198548384010792}, {"id": 2749, "seek": 2060132, "start": 20601.32, "end": 20607.079999999998, "text": " if you see me at the store so here this element y is i'm at the store", "tokens": [50364, 498, 291, 536, 385, 412, 264, 3531, 370, 510, 341, 4478, 288, 307, 741, 478, 412, 264, 3531, 50652], "temperature": 0.0, "avg_logprob": -0.03735865305547845, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0010986934648826718}, {"id": 2750, "seek": 2060132, "start": 20611.48, "end": 20614.44, "text": " and x is there's a good sale", "tokens": [50872, 293, 2031, 307, 456, 311, 257, 665, 8680, 51020], "temperature": 0.0, "avg_logprob": -0.03735865305547845, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0010986934648826718}, {"id": 2751, "seek": 2060132, "start": 20618.68, "end": 20622.28, "text": " so if you see me at the store what's the probability of there being good sale", "tokens": [51232, 370, 498, 291, 536, 385, 412, 264, 3531, 437, 311, 264, 8482, 295, 456, 885, 665, 8680, 51412], "temperature": 0.0, "avg_logprob": -0.03735865305547845, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0010986934648826718}, {"id": 2752, "seek": 2060132, "start": 20622.28, "end": 20630.68, "text": " and we divide that by q y which we've already determined last time so q y was the probability", "tokens": [51412, 293, 321, 9845, 300, 538, 9505, 288, 597, 321, 600, 1217, 9540, 1036, 565, 370, 9505, 288, 390, 264, 8482, 51832], "temperature": 0.0, "avg_logprob": -0.03735865305547845, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0010986934648826718}, {"id": 2753, "seek": 2063068, "start": 20630.760000000002, "end": 20632.52, "text": " that i went to the store", "tokens": [50368, 300, 741, 1437, 281, 264, 3531, 50456], "temperature": 0.0, "avg_logprob": -0.07270969663347517, "compression_ratio": 1.8273381294964028, "no_speech_prob": 0.00011959491530433297}, {"id": 2754, "seek": 2063068, "start": 20639.24, "end": 20643.08, "text": " and we know that that equals the sum of the product of the probability of", "tokens": [50792, 293, 321, 458, 300, 300, 6915, 264, 2408, 295, 264, 1674, 295, 264, 8482, 295, 50984], "temperature": 0.0, "avg_logprob": -0.07270969663347517, "compression_ratio": 1.8273381294964028, "no_speech_prob": 0.00011959491530433297}, {"id": 2755, "seek": 2063068, "start": 20643.08, "end": 20645.56, "text": " if there's a good sale i go and if there's not a good sale i go", "tokens": [50984, 498, 456, 311, 257, 665, 8680, 741, 352, 293, 498, 456, 311, 406, 257, 665, 8680, 741, 352, 51108], "temperature": 0.0, "avg_logprob": -0.07270969663347517, "compression_ratio": 1.8273381294964028, "no_speech_prob": 0.00011959491530433297}, {"id": 2756, "seek": 2063068, "start": 20646.44, "end": 20650.84, "text": " multiplied by the corresponding probabilities corresponding to here and we found that to be", "tokens": [51152, 17207, 538, 264, 11760, 33783, 11760, 281, 510, 293, 321, 1352, 300, 281, 312, 51372], "temperature": 0.0, "avg_logprob": -0.07270969663347517, "compression_ratio": 1.8273381294964028, "no_speech_prob": 0.00011959491530433297}, {"id": 2757, "seek": 2065084, "start": 20650.84, "end": 20660.04, "text": " 69 percent so in this case this equals 90 percent 30 percent divided by 69 percent", "tokens": [50364, 28267, 3043, 370, 294, 341, 1389, 341, 6915, 4289, 3043, 2217, 3043, 6666, 538, 28267, 3043, 50824], "temperature": 0.0, "avg_logprob": -0.12997381359923119, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.13291536271572113}, {"id": 2758, "seek": 2065084, "start": 20661.08, "end": 20667.96, "text": " and when you write out what this equals it's roughly approximately equal to 39 percent", "tokens": [50876, 293, 562, 291, 2464, 484, 437, 341, 6915, 309, 311, 9810, 10447, 2681, 281, 15238, 3043, 51220], "temperature": 0.0, "avg_logprob": -0.12997381359923119, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.13291536271572113}, {"id": 2759, "seek": 2065084, "start": 20669.08, "end": 20672.920000000002, "text": " so you've updated your hypothesis based on what you see", "tokens": [51276, 370, 291, 600, 10588, 428, 17291, 2361, 322, 437, 291, 536, 51468], "temperature": 0.0, "avg_logprob": -0.12997381359923119, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.13291536271572113}, {"id": 2760, "seek": 2067292, "start": 20673.879999999997, "end": 20679.879999999997, "text": " and this is known as Bayesian inference", "tokens": [50412, 293, 341, 307, 2570, 382, 7840, 42434, 38253, 50712], "temperature": 0.0, "avg_logprob": -0.14074090032866507, "compression_ratio": 1.305263157894737, "no_speech_prob": 0.17542894184589386}, {"id": 2761, "seek": 2067292, "start": 20683.32, "end": 20691.879999999997, "text": " or inversion inversion and in fact the map g constructed here", "tokens": [50884, 420, 43576, 43576, 293, 294, 1186, 264, 4471, 290, 17083, 510, 51312], "temperature": 0.0, "avg_logprob": -0.14074090032866507, "compression_ratio": 1.305263157894737, "no_speech_prob": 0.17542894184589386}, {"id": 2762, "seek": 2067292, "start": 20695.0, "end": 20697.16, "text": " a g from Bayes theorem", "tokens": [51468, 257, 290, 490, 7840, 279, 20904, 51576], "temperature": 0.0, "avg_logprob": -0.14074090032866507, "compression_ratio": 1.305263157894737, "no_speech_prob": 0.17542894184589386}, {"id": 2763, "seek": 2069716, "start": 20697.56, "end": 20708.84, "text": " is called a Bayesian inverse", "tokens": [50384, 307, 1219, 257, 7840, 42434, 17340, 50948], "temperature": 0.0, "avg_logprob": -0.13316367921375094, "compression_ratio": 1.45, "no_speech_prob": 0.0023229471407830715}, {"id": 2764, "seek": 2069716, "start": 20712.68, "end": 20716.2, "text": " of f and it would be a little bit inappropriate to say", "tokens": [51140, 295, 283, 293, 309, 576, 312, 257, 707, 857, 26723, 281, 584, 51316], "temperature": 0.0, "avg_logprob": -0.13316367921375094, "compression_ratio": 1.45, "no_speech_prob": 0.0023229471407830715}, {"id": 2765, "seek": 2069716, "start": 20716.76, "end": 20723.16, "text": " that it only depends on f because it also depends on your prior probability distribution p", "tokens": [51344, 300, 309, 787, 5946, 322, 283, 570, 309, 611, 5946, 322, 428, 4059, 8482, 7316, 280, 51664], "temperature": 0.0, "avg_logprob": -0.13316367921375094, "compression_ratio": 1.45, "no_speech_prob": 0.0023229471407830715}, {"id": 2766, "seek": 2072316, "start": 20723.4, "end": 20734.04, "text": " so this is an interesting reformulation of Bayes theorem that seems to be totally in the", "tokens": [50376, 370, 341, 307, 364, 1880, 8290, 2776, 295, 7840, 279, 20904, 300, 2544, 281, 312, 3879, 294, 264, 50908], "temperature": 0.0, "avg_logprob": -0.08471616369778992, "compression_ratio": 1.601123595505618, "no_speech_prob": 0.0003053314285352826}, {"id": 2767, "seek": 2072316, "start": 20734.04, "end": 20741.72, "text": " language of category theory and it therefore makes it amenable to a wide range of techniques", "tokens": [50908, 2856, 295, 7719, 5261, 293, 309, 4412, 1669, 309, 18497, 712, 281, 257, 4874, 3613, 295, 7512, 51292], "temperature": 0.0, "avg_logprob": -0.08471616369778992, "compression_ratio": 1.601123595505618, "no_speech_prob": 0.0003053314285352826}, {"id": 2768, "seek": 2072316, "start": 20741.72, "end": 20747.16, "text": " that could be used to analyze and understand it and perhaps even generalize this idea to other contexts", "tokens": [51292, 300, 727, 312, 1143, 281, 12477, 293, 1223, 309, 293, 4317, 754, 2674, 1125, 341, 1558, 281, 661, 30628, 51564], "temperature": 0.0, "avg_logprob": -0.08471616369778992, "compression_ratio": 1.601123595505618, "no_speech_prob": 0.0003053314285352826}], "language": "en"}