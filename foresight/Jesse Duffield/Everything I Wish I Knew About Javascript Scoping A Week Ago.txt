Hi guys, welcome to my video on scoping in JavaScript.
So about a week ago I kind of started a deep dive into how JavaScript really works behind
the scenes and part of that was learning about scoping.
I made a blog post called Everything I Wish I Knew About JavaScript Scoping a Week Here
which kind of goes into details about a lot of these things, but the first kind of chunk
of that is really just about like, you know, var versus let versus const which are keywords
for declaring variables which to be honest, I wasn't really that interested in in the
first place and given that most people just don't use var anymore, I don't know how relevant
it is, but I still think that scoping in general is pretty important to learn about
and I learned some interesting things about static scoping, dynamic scoping and how it
relates to this binding.
So yeah, my plan with this video is to take you through what I learned and I'm going to
try and take an experimental approach where I'm not going to make any claims without having
some way of like backing it up, which is why I've got this, the Chrome Dev Tools open right
now.
We're going to try and understand how JavaScript works by actually observing what it does as
a program runs.
So we're starting with this program here, which basically declares a couple of variables
a and b and then declares this outer function, it itself declares two variables c and d,
then it declares a inner function which itself declares two more variables and then on the
inside here we just console log all four.
So a couple of these get overwritten, a does not get overwritten but c does, so in here
it's called shadowing when you've got a function where another variable is in scope outside
that function but we're kind of overriding its value here.
I mean, we're not overriding the value of this variable, we just have another variable
of the same name and therefore we can't really access this variable.
So we've got this function here, then we just call that function and then we call the
outer function.
So the way the program works is we go here, declare this guy, call this guy, then we go
inside here and declare this guy and then we call it.
So the point here is that we've got kind of nested scoping and we want to see how these
values end up coming out.
So I play this now, console log shows a is one, b is five, c is six and d is four.
So a is one because it gets started here and doesn't get overwritten or shadowed rather.
b starts as two but then over here we've got b is five so we shadow this guy and we just
say okay we've got our own b variable here which is equal to five so we use that.
c is three but then over here it gets shadowed and we get a new c variable whose value is
six so we end up saying c is six and finally d starts as four and does not get shadowed
so it's just four here.
So off the bat we can see that when you have a function declared inside another function
it has access to variables defined outside of its scope whether it's d in the outer function
or a in this global context.
Okay so let's have a look at what's actually happening here but a diagram that I made.
Basically JavaScript runs on an execution stack which is equivalent to a call stack.
At the bottom we've got the global execution context and so each of these little stack
frames is called an execution context so there's a global one at the bottom which is this
thing here this scope here then we've got the outer execution context which would be
everything that happens in here would be happening inside that context and then we've got the inner
one which would be this stuff so what an execution context does is it basically distores
information you need to be able to know where you are at in a function you know what the variables
are that you might be reading from and it's the kind of thing where if you know if you
turn the computer off and turn it back on again and this stack was still here
and almost up to the point or two then you should be able to just continue the program
from where you left off. So we've got our execution context on the execution stack
and each of these points to a I'd say points to you probably more accurately has a reference to
uh lexical environments so uh lexical environments uh when you see the word lexical it basically
means like letters or things you can you can see um in this case we're talking about actual variables
being defined so a lexical environment uh just contains two things it contains an environment
record and a pointer to the parent lexical environment so um uh this happens to be called a
declarative environment record but what an environment record is is is effectively just a
mapping of variables to their values so in the case of our inner function we've got b is five and c
is six so that's these two guys in our outer function we've got c is three and d is four
which are these two guys and then in our global lexical environment we actually have this is kind
of a it's a kind of weird edge case but um we've got a composite environment record consisting of
two things the declarative environment record um for which b is two and we have this other thing
called the object environment record so this is where things kind of get a bit weird um the uh
back in the day basically everything used these object environment records and they would all
have a thing called a binding object which was a literal javascript object that just contained
your variables as properties um it is still the case today that at the global level if you define
a variable with the um the var keyword then it actually ends up just being a property on the
global object um on the other hand if you use let or const it's going to be sitting in this
declarative environment record uh now what's the difference uh first of all uh when you actually
have an object environment record the binding object in this case global just can be accessed by
outside code um and uh it's not very efficient so these declarative ones um are there kind of
internally stored and it's not accessible from the outside um okay so uh the the fact that these
will point to each other allow us to create a scope chain where we can say you know i'm in the inner
function i'm looking for the a variable right now because i want to log it and it's not in my
declarative environment record it's so therefore i'll look to my parent it's not in there either
with my parent oh here it is on the global object so you can get the value of one and then you can
log that value so um it's probably also worth uh noting that um these uh functions when they
created they actually get a eternal internal reference to the scopes that they have access to
so let me go down here and actually gotta refresh the page if i go debugger and then play that okay so
if i look at the inner function you can see here this is just in my dev tools inspector
but in scope i've got my inner function it's got arguments it's got a prototype but it has this
internal thing and these uh internal things are denoted by these double square brackets um this
guy's called scopes and uh in this case uh we've got a few things i've got the value of d from
that outer function the value of b from a script uh anything that's defined at the top level with
let or const is considered to be script scoped um which is not the same as saying is actually
i only scoped to the we're talking about actual script tags here if i go for example
this thing would be a script tag um it's not actually scoped to the script tag it's just
any script will have access to it um and then we've got the global thing here so
we expand this guy we'll see that actually among the many properties of global object one is a
whose value is one so that's this guy here so kind of weird um but also pretty cool so let's move on
and i'm going to go to the next example so in this case we've got an inner and an outer function
but our inner function is actually defined outside the outer function so when this guy's defined um
uh the it references x but the x is actually defined in the uh global execution context
and the um outer function basically when it gets called it goes and creates a its own local
x variable and then it calls inner so the question here is which x will this inner function uh log
um and it turns out that when you run this guy it's going to log one which means logs this thing
so this kind of touches on the difference between static and dynamic scoping in static scoping
when a function is created um any uh variables that references from an outer scope um it looks
at okay like lexically or statically is what's called static scoping or lexical scoping uh what
have i got access to so i can just look on the page here and see okay well there's an x this
in scope here so that's what that's referring to um what actually you know is defined against
a function that might be calling my inner function um it doesn't matter so uh that's called static
scoping um which is to say that we you know you can just statically look at the page and know
uh which variables here are being referenced now you might ask yourself uh isn't this what
every programming language does and actually no it's not so here we have a bash script and
i'm just going to paste this in here so uh in this script we do the exact same thing we define x
we've got an inner function that just logs it an outer function that defines its own x and calls
the inner function and then we call the outer function so we're going to go x is one call the
outer function go in here create x equals two call it inner function and then echo x
press this uh if you play this okay so this actually logs two so what this means is that
bash does not use static scoping it uses dynamic scoping um dynamic scoping is where you care about
what variables are defined at call time um meaning you know at the time this guy's called
we look at okay what's uh what's the value of x so like we're in here we go okay we need the
value of x instead of looking electrically statically up to whatever was defined at the
point when this guy was created in which case x would be one we instead say well who called us
okay well we're being called by outer is there an x defined in this scope yes there is okay let's
log that so um a diagram that explains this discrepancy would be this so let's assume that
bash itself had a concept of lexical environments which it doesn't but if it did um then this is
the difference between how the two would operate so in this case we've got out inner function
doesn't have an x defined so uh in JavaScript we go well you know somehow we know that um
the uh parent lexical environment it's actually the global environment because when this guy was
defined uh i'm just gonna go back when this guy was defined it was uh lexically in scope here
this you know we didn't care about the outer function at the point this was created um so we
go here and find x is one and we log that on the other hand bash just follows the actual stack frame
so it goes okay nothing's defined here okay what about the guy that called me oh it is defined
there okay well i'll return that so um different languages have different approaches to this so
for example in pearl you can have both dynamic or static scoping depending on how you uh declare
your variables um they've got different benefits for different use cases but generally it's
considered that static scoping is superior because it enables uh there are a few reasons
one of which is you can more easily reason about how a function will behave so for example in this
case i don't need to care about you know once i've defined this function i know that this guy's
in scope and so it's referencing that i don't need to worry about whether in some other file
some other function is calling me and um it defines x in its own weird way so to understand
how a single function will work all i need to do is look at the page or look at the files defined
and look at the scope it's defined in and i'll understand um with dynamic scoping you need to
think about all the permutations and understand you know who knows what variables could be set
when i'm being called by some random outer function um dynamic scoping does have uh one benefit
which is that you um don't need to worry about storing variables on the heap so you know assuming
we're talking about primitives like booleans and integers you can just keep everything on the stack
here and as soon as you're done with the function you just you know drop down the stack pointer
throughout the memory when you put a new when you enter a new function you put a new stack frame on
the stack move the pointer up again and uh basically you know whenever you need to look for a variable
you just look down the stack until you find it um in JavaScript we need to kind of have some
additional uh metadata that we hold on to for example to say that you know this inner function
was really defined with this guy in scope we don't you know at the time we didn't care about the
outer function so we need to skip this guy because we've been static scoping you know the fact we
have to store those kinds of references means we can't do it all on the stack it's not as simple as
just looking from top to bottom um but let's continue so there is another way in which static
scoping um helps us and that is in how closures work so uh a closure it kind of has two definitions
the first definition of closure is a function that is paired with um a uh it's paired with this
environment so it's a function the client has knowledge about where it was for example created
and what variables were in scope at that point um there's another definition of closure which is
just referring to the environment part like you know the closure is just the things that are
captured the variables are captured so the two are kind of used interchangeably um but uh that
effectively referring to the same concept um so uh in this case we have a function we we define x
and we have an outer function now um that defines an inner function internally um outer has its own
x whose value is two and uh what happens here is the outer actually returns inner so it returns
a function so in javascript functions are first class which means that you can um pass them in
as arguments to functions and you can also return them from functions so you can treat them like
any other variable um so what's happening here is we're actually uh capturing this uh x value
here and we're capturing this one because lecicle scoping says that we first look at you know what's
the now immediate scope here all the values x okay well we'll just capture that guy um we return
the inner function and then we assign that to this variable foo so we call it outer it returns
inner so now foo's value is inner then we call foo which is the same as calling our inner function
and the question is what does it log so if you run this
we log the value of two so um okay what's interesting about this is that
that this variable two which is defining that outer function um really has no reason to exist
after we uh leave the called outer if not for our inner function we're trying to
capture that variable so I say capture another word will be close over the reason it's called
capture is because we need to hold on to this thing after the lifetime of that outer function
so if we for example we're just storing everything on the stack here
we'd have our outer function we'd have our inner function we'd have uh x equals two happening here
and uh we'd eventually have to pop off the stack and get back to our global execution
context for me down here but once we want to then call our inner function again um we need to have
some way of saying of keeping track of the fact that it uh has this variable x equals two which
isn't actually defined in its scope so um let me grab this diagram so what's happening here is that
by the time we get to foo which is really just a variable pointing it out inner function um
it has nothing to find in the statistical environment and because we use stack scoping it
just so happens that this uh function contained a reference to the electrical environment
of the outer function uh where x equals two and so we can say okay x equals two uh obviously that
also close to the global environment record now if we were if we were using dynamic scoping
what would happen here uh effectively we have a foo function here we'd be calling it in the
global context meaning this guy is in scope and the this guy is not and we'd be going console log x
and we just look down the call stack so foo we don't have it global context we do have it the
value is one um so we'll return one so um effectively dynamic scoping does not support
closures uh unlike static scoping which will allow you to kind of store these guys in memory
somehow and then later on you can access those uh variables and change them or just read from them
um so i'm just gonna start this again just as we can see what's actually happening here so
our foo function is has some scopes and we've got a closure here so it closes up x
then the next one up we've got our script for which x equals one and then the global object so these
two guys are kind of two parts of the composite environment record that happen in the global
execution context um so it's kind of interesting and if i go in here it's effectively the same
thing we have this uh well in this scope here actually now forget about function so just in
this scope um we're trying to console log this thing but access to this closure which we're saying
x equals two that's pretty cool um now uh let's look a little bit deeper into how for example
chrome which uses the v8 engine uh the javascript uh actually goes about uh creating these closures
now this is where we kind of diverge in terms of uh what ecma script says we should be doing
or what it's specifying and how the ecma script is actually implemented so ecma script is the
specification for the javascript language and um different browsers and for example node would
have their own implementations so for example the v8 engine that chrome uses is written in c plus
plus and it kind of compiles javascript on the fly while it runs it and tries to optimize things
as it goes um but as you can imagine the ecma script approach is a little bit um flawed so
you know if you have a bunch of variables defined in a function and only one of them gets captured
by an inner function and then you return from the outer function you don't really want to be
holding on to all of the variables in that electrical environment um past their jup uh their
their expiry date basically because no one's going to use them um if you've only captured one variable
so what we well what v8 does is kind of intelligent but i'm going to show you i'm going to show you
what it does so in this program we've got an outer function we define three different variables x y
and huge so huge let's just pretend this is a really big object and we have our uh we've got one
function here called bar which captures the huge variable so it references that doesn't reference
these two guys though then we have an inner function which captures x but doesn't capture these two
guys and then we return the inner function so bar is defined but doesn't actually get used
on the outside we did the same things before we call our outer function that gives us this
so you sign up for food and then we call food okay so let's have a look at how this actually
works so if i play this now um we've created a foo object so i can have a look in here and it's got
scopes now interestingly uh this guy is now it has a reference to a closure from the outer function
because the outer function is now returned and it actually refers to two different things so it
actually has a reference to x which it explicitly captured but also a huge object now uh it's good
to know that it doesn't have access to the y variable because that would be a waste of memory
because no one actually makes use of that but you know uh what does what does the inner function
care about the huge variable it doesn't make use of it in the case of the x variable so if we continue
again and we look at the actual closure that we have in our outer function um look at that so
we've got both of our things here that were captured so what this tells us is that in the v8
implementation of um closures effectively the way that it works is uh as soon as we probably actually
let me refresh this debugger save oops here we go
debugger oh i did it again okay this time will definitely work it's not only that you have
to do this save play all right so in here um let's have a look so we have debugger
we're being called script global bar you know this okay bar you know so this is just these
guys being hoisted uh as is y finally enough x and y sorry x is huge don't appear in my local
scope i can't see them in the they're not really in a um closure if i continue again
and they appear here interesting so what we'll do is later on i'm going to show
kind of what really happens on the actual heap because the dev chrome tools let you
so chrome dev tools let you actually inspect heap snatch odds um but for now i'm just going to
continue uh and we're going to talk about the this variable okay so um i have said so far that the
uh the JavaScript uses static scoping which is for the most part true but there is one notable
exception and that is the this binding um it's something a variable because it's its value
does not vary once you're inside the scope um it just kind of gets given a variable and that's what
it is um so the way that it works is it's effectively um well i'll show you an example so
here we said x to one then we create an object it's got a couple properties x and a a is a function
that just logs x and um this is really just a demonstration of how things get weird pretty
quick so we have a bar variable um and we're just setting that to the value of object dot a so this
is now going to be this function here and then we also can just call object dot a directly
funnily enough though this gives two different values i've played this get my console one or two
okay bizarre we've got the exact same function but depending on how we call it we get a different
value so in in uh the case of bar we get x and in the case of object dot a we get uh two so what's
going on here so the way that it works is if you have a function and it contains a this binding
the value that's passed in is actually based on the way in which you call that function so
if you just call it directly then it's going to be given the value of the
global object which is basically a object that contains this axis of property um whereas if
you call it so if on the left hand side of these brackets these parentheses you have what is called
a reference type then it's actually going to be given the um the this variable or this binding
will be given the value of the object itself meaning when we try and call the
x property on that it's going to be this guy so what's going on here so a reference type
is basically you can actually check these in brackets and it will still work hang on let me
copy this refresh do that save play same thing same thing yeah so what this actually is is a
it before it evaluates to the actual um uh like function it evaluates to a reference type
and a reference type is just when you have an object and then you're calling some property on
that object so in this case it's object dot a so whatever you do that and then you have the
parentheses here what it means is it'll it'll invoke this function but it will set the this
binding to the value of the actual object strange why would we uh violate static scoping in this way
right when this thing is defined uh it's with that the way you call it as a as opposed to the
way that you create it which is more of a dynamic scoping thing what influences value um and basically
what this enables is um sharing of code so we're going to have two objects here and a foo function
that makes use of the this dot x uh reference you can then assign that to both of these objects
and you can call them and you'll get different values because the different objects contain
different values for x so effectively because function is the first class it would be a shame
if we couldn't actually kind of uh make use of this neat functionality to have kind of uh
genericized logic that can be applied to different objects and different data um there is another
example of how this works which is um when creating prototypes so i'm going to too much detail about
prototypes here but prototypes are effectively the way the javascript enables inheritance so um
we've got a kind of constructor function here and it says okay you give me an object like an empty
object and i'll set x to one on that object and i'll set the blah property to this function
but just console log something and then i can say on here i can set the prototype of this function
which is a fancy way of saying you know when i create an object um from this guy using the the
new keyword um i want this object's prototype to have this additional functionality so in this case
i'm saying i've got a foo property and it has a function that console logs this dot x and if i go
and create my a object i'll get an object that just says x is one and then if i call foo on that um
because i'm making use of the this keyword here um i'll be referencing this x because i'm using a
reference type here so they play this one okay cool so um what this enables is basically inheritance
i can have multiple different objects here i can go b um and i can say a dot prototype equals b dot
prototype and make that two make that ha ha and i can go let's see um i can do object new b
and then there's a b2 and then it should log two so let me just save this
whoops oh no i've lost it oh that's all right i can just do it again so
okay i've got a b constructor by those two this says ha ha i'm going to say
b dot prototype equals a dot prototype and then make this a b it's going to be two
and save and play now it logs two okay cool so what this says is basically we've got two completely
different um constructors here but they both inherit from this same kind of prototype which
has this function on it where we can say just console log this dot x and there you go you can
create uh effectively we've created a taxonomy a and b both inherit from some prototype that
defines a behavior that we can call if the property itself doesn't exist on our base objects so um
through the this binding we basically enable these prototype chains to define um shared behavior
among the descendant objects um so uh pretty cool so this is what i mean so starting scoping on
the whole pretty good but sometimes it is worth it to go for the dynamic approach if it enables
things like in this case sharing code and uh inheritance okay so in this case this is just
an example of where it can get a bit weird and you might want to switch up what you're doing so
here we have a constructor function called foo set x to one and then we say set time out and
then when the time out when a second passes i'm going to console log this dot x okay there we go
f figures new foo so if you run this what's gonna happen one one let's have a look at that um console
x
why is it going one one let's try this again
oh because i hadn't i hadn't cleared my uh console okay good so it's logging undefined
kind of weird it's saying this dot x and this x is one so why would that be happening
the reason is because when we go set time out this guy gets added to our um our event queue
and when it finally gets popped off and gets ran it's ran on the global execution context
meaning it's not being called as you know f dot blah it's just being called directly
that means it gets past the global object as it's this and the global object does not define
ax if it did it would log that so if i go x equals two i think this will work maybe it won't
but let's find out um i'm gonna refresh i'm gonna paste i'm gonna save i'm gonna play
two okay cool so yeah it gets past the global object um so this is kind of weird because
we really wanted to just be able to reference the this this defined you know inside this scope
so what can we do let's go to the next example and what you can do is this is the exact same thing
we've just swapped out our function declaration for a uh lander expression
these are added in the es6 and basically now if you play this
yep one there you go so i had to wait a second um okay so what's the difference here so the
use of the lander expression is really a way of forcing static scoping um when otherwise the this
binding would be making use of dynamic scoping um to demonstrate let's have a look at what it
actually does behind the scenes so if we go to um this babel rebel it shows on the left hand side
this is the exact same thing we have here and we're saying set timeout we're using a lander
function and this is what it actually transpiles to so what we get is inside here we say first of all
let's just keep track of what our disc variable is inside this scope and then it means that when
we create this function here and so see how it's lambda here but it's not lambda here so it's really
just under the hood a regular function what we're doing here isn't it we're now instead of using
this directly because we know this thing is kind of unreliable and there's value changes let's
prefer to this um statically defined this variable and we'll call x on that and so then when we log
that that's how we get this value of one so um effectively what using a lander function does
is it basically forces JavaScript to make use of static scoping by under the hood going and
actually adding a um uh a variable to this classical scope and it means that you're not
worrying about what the value of this is when this guy's actually in vote so um yeah it's cool
so the this binding gives you some cool benefits when you want them when you don't want them there's
typically ways to get around having to use it um another way would be calling dot bind on a function
and passing it um the value of the current this um but i'm not going to go into that just uh just
now because i say the end but there's actually one more thing i want to show you guys okay so
here we're going to look at actually um what happens in terms of the heap when we are dealing
with closures so it's a similar function to what we had before we've got an outer we've got a inner
we've got a bar it doesn't really get used and we just call everything at the end so let's run this
guy see what happens okay so we've defined our outer function and actually let me just play through
here what actually happens here something's undefined okay what i'm going to do is i'm going to
every step of the way here i'm going to actually take a snapshot this is a heap snapshot and it
basically goes and tells you what are all the things that have been actually like all the
objects have been put on the heap um at this point in time so i'm going to play forwards i'm
going to take another snapshot i'm going to go again take another snapshot i'm going to go again
take another snapshot and then i'm going to go again i think one more snapshot okay cool now what
i'm going to do is i'm going to in each of these places only show the difference between the current
snapshot and the previous one so make sense okay cool so this is trying to see the difference in
what's been allocated what's been newly allocated between between um one snapshot and the next one
so okay snapshot two let's have a look at what happens inside here so we've got back to our sources
so that's looking at this guy so we create our outer function um okay so we've got a closure being
created here oh interesting so by the time we get to the end of um by the time we get to here
we've created this function and it has a closure object here so this is 124913 uh it's got a context
the preview okay that's got a lot of random stuff there okay so interesting all right let's look at
what snapshot three gives us okay so this is actually this is creating a closure this guy's
creating a context so in v8 this is there's a thing called a context capital c not to be confused
with an execution context and let me really um okay so uh let's see what we're actually creating here
okay so snapshot three that's one two three so at the very beginning when the code enters our
outer function we have already made a context object which is going to store the two things
which are being captured here so bar string and inner string okay let's have a look at this so
bar string is captured by bar down here inner string is captured by inner down here and uncaptured
string is actually not captured by anyone we just define that we don't use it so this is interesting
so as soon as we're here we actually JavaScript clearly goes ahead and before it actually goes
and continues writing the code it goes and says okay here's all the things to get to find in our
scope okay who's going to be using those things who's going to be capturing those things whoever
you know if anyone inside here if any function captures these variables then we need to actually
create a context object and put those variables on that context so here we've got one two five
one one nine okay interesting we move on and here we enter a block now this could this could
have just been like if you know true um but you actually don't need to have that you can actually
just enter a block directly um which is a it's a feature no one uses but i feel like maybe we should
use a bit more um to kind of limit variable scope but at any rate uh it's just here for
demonstration purposes so here we enter the block scope and here we have a block string
which is captured by bar so if i look in my memory on subject four we get another context here okay
and it's not really telling us much right now but it has as its previous context so it's like a
reference to the parent context um the uh same guy was over four one two five one one nine
so that's the same as this guy here and it's got uh both of these strings now have the whole
use by the time we get to this point uh in the code um so yeah funny that we don't have our um
this guy defined um but maybe it's slightly different behavior between functions and
blocks but at any rate let's go to the next snapshot so let's see the next snapshot is
the final one is this guy on the other side of bar okay so now we have a closure so that means
we've got a bar function and it now references this context so one two five three one three
that's the same as this guy and what's inside here okay so now it has funnily enough it has um
you know what the value of this thing is this um block string but doesn't doesn't say what the name
is i don't know why that is maybe it doesn't need it maybe it's going to be minified um but uh at
any rate it's been captured and then here we've got a point into our previous context which has
our other two things that are captured as well so what that tells us is that uh these context
objects exist in a given scope and they whatever variables from that scope get used by uh other
functions in that scope um or like descendant scopes those will be the ones that end up being
added to the context and then um when you actually you know return one of these functions for example
let me go here
and
run that
so right now uh in my scope is that's kind of weird why is F not in here
oh because i haven't right yes very good let's call it a const fresh paste say play
hmm quite the same thing outer
i think it's it's behaving differently because of the fact that
i need to just change the actual source code let's do that start again oh disconnected
and here we go okay that's better cool so now we have um we can see here we've got this closure
i think contains the things we cared about for our inner function it does not contain the closure
that was made for this guy because that's in its own uh block um but uh through this guy
does have access to this closure that was defined right up here it contains um not only
in a string which this guy explicitly captured but also bar string which is something that
captured so um something to keep in mind if you have a huge you know if you've got two functions
closing over a bunch of variables and one of them closes over some huge object and the other one
doesn't but the other one lives on past the lifetime of the parent function then uh you might
be holding onto that object in your in your heap in memory for longer than you want to
but that effectively wraps this up so um hopefully this was a good intro to JavaScript scoping and
how it balances static scoping with dynamic scoping how it supports closures and what actually
happens on the heap when we are dealing with creating closures so yeah thanks for thanks for
watching and um I'll add a link in the description to the original part which goes into some more
detail about what's going on behind the scenes thanks for watching
