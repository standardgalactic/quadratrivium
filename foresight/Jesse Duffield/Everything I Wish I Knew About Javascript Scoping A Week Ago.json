{"text": " Hi guys, welcome to my video on scoping in JavaScript. So about a week ago I kind of started a deep dive into how JavaScript really works behind the scenes and part of that was learning about scoping. I made a blog post called Everything I Wish I Knew About JavaScript Scoping a Week Here which kind of goes into details about a lot of these things, but the first kind of chunk of that is really just about like, you know, var versus let versus const which are keywords for declaring variables which to be honest, I wasn't really that interested in in the first place and given that most people just don't use var anymore, I don't know how relevant it is, but I still think that scoping in general is pretty important to learn about and I learned some interesting things about static scoping, dynamic scoping and how it relates to this binding. So yeah, my plan with this video is to take you through what I learned and I'm going to try and take an experimental approach where I'm not going to make any claims without having some way of like backing it up, which is why I've got this, the Chrome Dev Tools open right now. We're going to try and understand how JavaScript works by actually observing what it does as a program runs. So we're starting with this program here, which basically declares a couple of variables a and b and then declares this outer function, it itself declares two variables c and d, then it declares a inner function which itself declares two more variables and then on the inside here we just console log all four. So a couple of these get overwritten, a does not get overwritten but c does, so in here it's called shadowing when you've got a function where another variable is in scope outside that function but we're kind of overriding its value here. I mean, we're not overriding the value of this variable, we just have another variable of the same name and therefore we can't really access this variable. So we've got this function here, then we just call that function and then we call the outer function. So the way the program works is we go here, declare this guy, call this guy, then we go inside here and declare this guy and then we call it. So the point here is that we've got kind of nested scoping and we want to see how these values end up coming out. So I play this now, console log shows a is one, b is five, c is six and d is four. So a is one because it gets started here and doesn't get overwritten or shadowed rather. b starts as two but then over here we've got b is five so we shadow this guy and we just say okay we've got our own b variable here which is equal to five so we use that. c is three but then over here it gets shadowed and we get a new c variable whose value is six so we end up saying c is six and finally d starts as four and does not get shadowed so it's just four here. So off the bat we can see that when you have a function declared inside another function it has access to variables defined outside of its scope whether it's d in the outer function or a in this global context. Okay so let's have a look at what's actually happening here but a diagram that I made. Basically JavaScript runs on an execution stack which is equivalent to a call stack. At the bottom we've got the global execution context and so each of these little stack frames is called an execution context so there's a global one at the bottom which is this thing here this scope here then we've got the outer execution context which would be everything that happens in here would be happening inside that context and then we've got the inner one which would be this stuff so what an execution context does is it basically distores information you need to be able to know where you are at in a function you know what the variables are that you might be reading from and it's the kind of thing where if you know if you turn the computer off and turn it back on again and this stack was still here and almost up to the point or two then you should be able to just continue the program from where you left off. So we've got our execution context on the execution stack and each of these points to a I'd say points to you probably more accurately has a reference to uh lexical environments so uh lexical environments uh when you see the word lexical it basically means like letters or things you can you can see um in this case we're talking about actual variables being defined so a lexical environment uh just contains two things it contains an environment record and a pointer to the parent lexical environment so um uh this happens to be called a declarative environment record but what an environment record is is is effectively just a mapping of variables to their values so in the case of our inner function we've got b is five and c is six so that's these two guys in our outer function we've got c is three and d is four which are these two guys and then in our global lexical environment we actually have this is kind of a it's a kind of weird edge case but um we've got a composite environment record consisting of two things the declarative environment record um for which b is two and we have this other thing called the object environment record so this is where things kind of get a bit weird um the uh back in the day basically everything used these object environment records and they would all have a thing called a binding object which was a literal javascript object that just contained your variables as properties um it is still the case today that at the global level if you define a variable with the um the var keyword then it actually ends up just being a property on the global object um on the other hand if you use let or const it's going to be sitting in this declarative environment record uh now what's the difference uh first of all uh when you actually have an object environment record the binding object in this case global just can be accessed by outside code um and uh it's not very efficient so these declarative ones um are there kind of internally stored and it's not accessible from the outside um okay so uh the the fact that these will point to each other allow us to create a scope chain where we can say you know i'm in the inner function i'm looking for the a variable right now because i want to log it and it's not in my declarative environment record it's so therefore i'll look to my parent it's not in there either with my parent oh here it is on the global object so you can get the value of one and then you can log that value so um it's probably also worth uh noting that um these uh functions when they created they actually get a eternal internal reference to the scopes that they have access to so let me go down here and actually gotta refresh the page if i go debugger and then play that okay so if i look at the inner function you can see here this is just in my dev tools inspector but in scope i've got my inner function it's got arguments it's got a prototype but it has this internal thing and these uh internal things are denoted by these double square brackets um this guy's called scopes and uh in this case uh we've got a few things i've got the value of d from that outer function the value of b from a script uh anything that's defined at the top level with let or const is considered to be script scoped um which is not the same as saying is actually i only scoped to the we're talking about actual script tags here if i go for example this thing would be a script tag um it's not actually scoped to the script tag it's just any script will have access to it um and then we've got the global thing here so we expand this guy we'll see that actually among the many properties of global object one is a whose value is one so that's this guy here so kind of weird um but also pretty cool so let's move on and i'm going to go to the next example so in this case we've got an inner and an outer function but our inner function is actually defined outside the outer function so when this guy's defined um uh the it references x but the x is actually defined in the uh global execution context and the um outer function basically when it gets called it goes and creates a its own local x variable and then it calls inner so the question here is which x will this inner function uh log um and it turns out that when you run this guy it's going to log one which means logs this thing so this kind of touches on the difference between static and dynamic scoping in static scoping when a function is created um any uh variables that references from an outer scope um it looks at okay like lexically or statically is what's called static scoping or lexical scoping uh what have i got access to so i can just look on the page here and see okay well there's an x this in scope here so that's what that's referring to um what actually you know is defined against a function that might be calling my inner function um it doesn't matter so uh that's called static scoping um which is to say that we you know you can just statically look at the page and know uh which variables here are being referenced now you might ask yourself uh isn't this what every programming language does and actually no it's not so here we have a bash script and i'm just going to paste this in here so uh in this script we do the exact same thing we define x we've got an inner function that just logs it an outer function that defines its own x and calls the inner function and then we call the outer function so we're going to go x is one call the outer function go in here create x equals two call it inner function and then echo x press this uh if you play this okay so this actually logs two so what this means is that bash does not use static scoping it uses dynamic scoping um dynamic scoping is where you care about what variables are defined at call time um meaning you know at the time this guy's called we look at okay what's uh what's the value of x so like we're in here we go okay we need the value of x instead of looking electrically statically up to whatever was defined at the point when this guy was created in which case x would be one we instead say well who called us okay well we're being called by outer is there an x defined in this scope yes there is okay let's log that so um a diagram that explains this discrepancy would be this so let's assume that bash itself had a concept of lexical environments which it doesn't but if it did um then this is the difference between how the two would operate so in this case we've got out inner function doesn't have an x defined so uh in JavaScript we go well you know somehow we know that um the uh parent lexical environment it's actually the global environment because when this guy was defined uh i'm just gonna go back when this guy was defined it was uh lexically in scope here this you know we didn't care about the outer function at the point this was created um so we go here and find x is one and we log that on the other hand bash just follows the actual stack frame so it goes okay nothing's defined here okay what about the guy that called me oh it is defined there okay well i'll return that so um different languages have different approaches to this so for example in pearl you can have both dynamic or static scoping depending on how you uh declare your variables um they've got different benefits for different use cases but generally it's considered that static scoping is superior because it enables uh there are a few reasons one of which is you can more easily reason about how a function will behave so for example in this case i don't need to care about you know once i've defined this function i know that this guy's in scope and so it's referencing that i don't need to worry about whether in some other file some other function is calling me and um it defines x in its own weird way so to understand how a single function will work all i need to do is look at the page or look at the files defined and look at the scope it's defined in and i'll understand um with dynamic scoping you need to think about all the permutations and understand you know who knows what variables could be set when i'm being called by some random outer function um dynamic scoping does have uh one benefit which is that you um don't need to worry about storing variables on the heap so you know assuming we're talking about primitives like booleans and integers you can just keep everything on the stack here and as soon as you're done with the function you just you know drop down the stack pointer throughout the memory when you put a new when you enter a new function you put a new stack frame on the stack move the pointer up again and uh basically you know whenever you need to look for a variable you just look down the stack until you find it um in JavaScript we need to kind of have some additional uh metadata that we hold on to for example to say that you know this inner function was really defined with this guy in scope we don't you know at the time we didn't care about the outer function so we need to skip this guy because we've been static scoping you know the fact we have to store those kinds of references means we can't do it all on the stack it's not as simple as just looking from top to bottom um but let's continue so there is another way in which static scoping um helps us and that is in how closures work so uh a closure it kind of has two definitions the first definition of closure is a function that is paired with um a uh it's paired with this environment so it's a function the client has knowledge about where it was for example created and what variables were in scope at that point um there's another definition of closure which is just referring to the environment part like you know the closure is just the things that are captured the variables are captured so the two are kind of used interchangeably um but uh that effectively referring to the same concept um so uh in this case we have a function we we define x and we have an outer function now um that defines an inner function internally um outer has its own x whose value is two and uh what happens here is the outer actually returns inner so it returns a function so in javascript functions are first class which means that you can um pass them in as arguments to functions and you can also return them from functions so you can treat them like any other variable um so what's happening here is we're actually uh capturing this uh x value here and we're capturing this one because lecicle scoping says that we first look at you know what's the now immediate scope here all the values x okay well we'll just capture that guy um we return the inner function and then we assign that to this variable foo so we call it outer it returns inner so now foo's value is inner then we call foo which is the same as calling our inner function and the question is what does it log so if you run this we log the value of two so um okay what's interesting about this is that that this variable two which is defining that outer function um really has no reason to exist after we uh leave the called outer if not for our inner function we're trying to capture that variable so I say capture another word will be close over the reason it's called capture is because we need to hold on to this thing after the lifetime of that outer function so if we for example we're just storing everything on the stack here we'd have our outer function we'd have our inner function we'd have uh x equals two happening here and uh we'd eventually have to pop off the stack and get back to our global execution context for me down here but once we want to then call our inner function again um we need to have some way of saying of keeping track of the fact that it uh has this variable x equals two which isn't actually defined in its scope so um let me grab this diagram so what's happening here is that by the time we get to foo which is really just a variable pointing it out inner function um it has nothing to find in the statistical environment and because we use stack scoping it just so happens that this uh function contained a reference to the electrical environment of the outer function uh where x equals two and so we can say okay x equals two uh obviously that also close to the global environment record now if we were if we were using dynamic scoping what would happen here uh effectively we have a foo function here we'd be calling it in the global context meaning this guy is in scope and the this guy is not and we'd be going console log x and we just look down the call stack so foo we don't have it global context we do have it the value is one um so we'll return one so um effectively dynamic scoping does not support closures uh unlike static scoping which will allow you to kind of store these guys in memory somehow and then later on you can access those uh variables and change them or just read from them um so i'm just gonna start this again just as we can see what's actually happening here so our foo function is has some scopes and we've got a closure here so it closes up x then the next one up we've got our script for which x equals one and then the global object so these two guys are kind of two parts of the composite environment record that happen in the global execution context um so it's kind of interesting and if i go in here it's effectively the same thing we have this uh well in this scope here actually now forget about function so just in this scope um we're trying to console log this thing but access to this closure which we're saying x equals two that's pretty cool um now uh let's look a little bit deeper into how for example chrome which uses the v8 engine uh the javascript uh actually goes about uh creating these closures now this is where we kind of diverge in terms of uh what ecma script says we should be doing or what it's specifying and how the ecma script is actually implemented so ecma script is the specification for the javascript language and um different browsers and for example node would have their own implementations so for example the v8 engine that chrome uses is written in c plus plus and it kind of compiles javascript on the fly while it runs it and tries to optimize things as it goes um but as you can imagine the ecma script approach is a little bit um flawed so you know if you have a bunch of variables defined in a function and only one of them gets captured by an inner function and then you return from the outer function you don't really want to be holding on to all of the variables in that electrical environment um past their jup uh their their expiry date basically because no one's going to use them um if you've only captured one variable so what we well what v8 does is kind of intelligent but i'm going to show you i'm going to show you what it does so in this program we've got an outer function we define three different variables x y and huge so huge let's just pretend this is a really big object and we have our uh we've got one function here called bar which captures the huge variable so it references that doesn't reference these two guys though then we have an inner function which captures x but doesn't capture these two guys and then we return the inner function so bar is defined but doesn't actually get used on the outside we did the same things before we call our outer function that gives us this so you sign up for food and then we call food okay so let's have a look at how this actually works so if i play this now um we've created a foo object so i can have a look in here and it's got scopes now interestingly uh this guy is now it has a reference to a closure from the outer function because the outer function is now returned and it actually refers to two different things so it actually has a reference to x which it explicitly captured but also a huge object now uh it's good to know that it doesn't have access to the y variable because that would be a waste of memory because no one actually makes use of that but you know uh what does what does the inner function care about the huge variable it doesn't make use of it in the case of the x variable so if we continue again and we look at the actual closure that we have in our outer function um look at that so we've got both of our things here that were captured so what this tells us is that in the v8 implementation of um closures effectively the way that it works is uh as soon as we probably actually let me refresh this debugger save oops here we go debugger oh i did it again okay this time will definitely work it's not only that you have to do this save play all right so in here um let's have a look so we have debugger we're being called script global bar you know this okay bar you know so this is just these guys being hoisted uh as is y finally enough x and y sorry x is huge don't appear in my local scope i can't see them in the they're not really in a um closure if i continue again and they appear here interesting so what we'll do is later on i'm going to show kind of what really happens on the actual heap because the dev chrome tools let you so chrome dev tools let you actually inspect heap snatch odds um but for now i'm just going to continue uh and we're going to talk about the this variable okay so um i have said so far that the uh the JavaScript uses static scoping which is for the most part true but there is one notable exception and that is the this binding um it's something a variable because it's its value does not vary once you're inside the scope um it just kind of gets given a variable and that's what it is um so the way that it works is it's effectively um well i'll show you an example so here we said x to one then we create an object it's got a couple properties x and a a is a function that just logs x and um this is really just a demonstration of how things get weird pretty quick so we have a bar variable um and we're just setting that to the value of object dot a so this is now going to be this function here and then we also can just call object dot a directly funnily enough though this gives two different values i've played this get my console one or two okay bizarre we've got the exact same function but depending on how we call it we get a different value so in in uh the case of bar we get x and in the case of object dot a we get uh two so what's going on here so the way that it works is if you have a function and it contains a this binding the value that's passed in is actually based on the way in which you call that function so if you just call it directly then it's going to be given the value of the global object which is basically a object that contains this axis of property um whereas if you call it so if on the left hand side of these brackets these parentheses you have what is called a reference type then it's actually going to be given the um the this variable or this binding will be given the value of the object itself meaning when we try and call the x property on that it's going to be this guy so what's going on here so a reference type is basically you can actually check these in brackets and it will still work hang on let me copy this refresh do that save play same thing same thing yeah so what this actually is is a it before it evaluates to the actual um uh like function it evaluates to a reference type and a reference type is just when you have an object and then you're calling some property on that object so in this case it's object dot a so whatever you do that and then you have the parentheses here what it means is it'll it'll invoke this function but it will set the this binding to the value of the actual object strange why would we uh violate static scoping in this way right when this thing is defined uh it's with that the way you call it as a as opposed to the way that you create it which is more of a dynamic scoping thing what influences value um and basically what this enables is um sharing of code so we're going to have two objects here and a foo function that makes use of the this dot x uh reference you can then assign that to both of these objects and you can call them and you'll get different values because the different objects contain different values for x so effectively because function is the first class it would be a shame if we couldn't actually kind of uh make use of this neat functionality to have kind of uh genericized logic that can be applied to different objects and different data um there is another example of how this works which is um when creating prototypes so i'm going to too much detail about prototypes here but prototypes are effectively the way the javascript enables inheritance so um we've got a kind of constructor function here and it says okay you give me an object like an empty object and i'll set x to one on that object and i'll set the blah property to this function but just console log something and then i can say on here i can set the prototype of this function which is a fancy way of saying you know when i create an object um from this guy using the the new keyword um i want this object's prototype to have this additional functionality so in this case i'm saying i've got a foo property and it has a function that console logs this dot x and if i go and create my a object i'll get an object that just says x is one and then if i call foo on that um because i'm making use of the this keyword here um i'll be referencing this x because i'm using a reference type here so they play this one okay cool so um what this enables is basically inheritance i can have multiple different objects here i can go b um and i can say a dot prototype equals b dot prototype and make that two make that ha ha and i can go let's see um i can do object new b and then there's a b2 and then it should log two so let me just save this whoops oh no i've lost it oh that's all right i can just do it again so okay i've got a b constructor by those two this says ha ha i'm going to say b dot prototype equals a dot prototype and then make this a b it's going to be two and save and play now it logs two okay cool so what this says is basically we've got two completely different um constructors here but they both inherit from this same kind of prototype which has this function on it where we can say just console log this dot x and there you go you can create uh effectively we've created a taxonomy a and b both inherit from some prototype that defines a behavior that we can call if the property itself doesn't exist on our base objects so um through the this binding we basically enable these prototype chains to define um shared behavior among the descendant objects um so uh pretty cool so this is what i mean so starting scoping on the whole pretty good but sometimes it is worth it to go for the dynamic approach if it enables things like in this case sharing code and uh inheritance okay so in this case this is just an example of where it can get a bit weird and you might want to switch up what you're doing so here we have a constructor function called foo set x to one and then we say set time out and then when the time out when a second passes i'm going to console log this dot x okay there we go f figures new foo so if you run this what's gonna happen one one let's have a look at that um console x why is it going one one let's try this again oh because i hadn't i hadn't cleared my uh console okay good so it's logging undefined kind of weird it's saying this dot x and this x is one so why would that be happening the reason is because when we go set time out this guy gets added to our um our event queue and when it finally gets popped off and gets ran it's ran on the global execution context meaning it's not being called as you know f dot blah it's just being called directly that means it gets past the global object as it's this and the global object does not define ax if it did it would log that so if i go x equals two i think this will work maybe it won't but let's find out um i'm gonna refresh i'm gonna paste i'm gonna save i'm gonna play two okay cool so yeah it gets past the global object um so this is kind of weird because we really wanted to just be able to reference the this this defined you know inside this scope so what can we do let's go to the next example and what you can do is this is the exact same thing we've just swapped out our function declaration for a uh lander expression these are added in the es6 and basically now if you play this yep one there you go so i had to wait a second um okay so what's the difference here so the use of the lander expression is really a way of forcing static scoping um when otherwise the this binding would be making use of dynamic scoping um to demonstrate let's have a look at what it actually does behind the scenes so if we go to um this babel rebel it shows on the left hand side this is the exact same thing we have here and we're saying set timeout we're using a lander function and this is what it actually transpiles to so what we get is inside here we say first of all let's just keep track of what our disc variable is inside this scope and then it means that when we create this function here and so see how it's lambda here but it's not lambda here so it's really just under the hood a regular function what we're doing here isn't it we're now instead of using this directly because we know this thing is kind of unreliable and there's value changes let's prefer to this um statically defined this variable and we'll call x on that and so then when we log that that's how we get this value of one so um effectively what using a lander function does is it basically forces JavaScript to make use of static scoping by under the hood going and actually adding a um uh a variable to this classical scope and it means that you're not worrying about what the value of this is when this guy's actually in vote so um yeah it's cool so the this binding gives you some cool benefits when you want them when you don't want them there's typically ways to get around having to use it um another way would be calling dot bind on a function and passing it um the value of the current this um but i'm not going to go into that just uh just now because i say the end but there's actually one more thing i want to show you guys okay so here we're going to look at actually um what happens in terms of the heap when we are dealing with closures so it's a similar function to what we had before we've got an outer we've got a inner we've got a bar it doesn't really get used and we just call everything at the end so let's run this guy see what happens okay so we've defined our outer function and actually let me just play through here what actually happens here something's undefined okay what i'm going to do is i'm going to every step of the way here i'm going to actually take a snapshot this is a heap snapshot and it basically goes and tells you what are all the things that have been actually like all the objects have been put on the heap um at this point in time so i'm going to play forwards i'm going to take another snapshot i'm going to go again take another snapshot i'm going to go again take another snapshot and then i'm going to go again i think one more snapshot okay cool now what i'm going to do is i'm going to in each of these places only show the difference between the current snapshot and the previous one so make sense okay cool so this is trying to see the difference in what's been allocated what's been newly allocated between between um one snapshot and the next one so okay snapshot two let's have a look at what happens inside here so we've got back to our sources so that's looking at this guy so we create our outer function um okay so we've got a closure being created here oh interesting so by the time we get to the end of um by the time we get to here we've created this function and it has a closure object here so this is 124913 uh it's got a context the preview okay that's got a lot of random stuff there okay so interesting all right let's look at what snapshot three gives us okay so this is actually this is creating a closure this guy's creating a context so in v8 this is there's a thing called a context capital c not to be confused with an execution context and let me really um okay so uh let's see what we're actually creating here okay so snapshot three that's one two three so at the very beginning when the code enters our outer function we have already made a context object which is going to store the two things which are being captured here so bar string and inner string okay let's have a look at this so bar string is captured by bar down here inner string is captured by inner down here and uncaptured string is actually not captured by anyone we just define that we don't use it so this is interesting so as soon as we're here we actually JavaScript clearly goes ahead and before it actually goes and continues writing the code it goes and says okay here's all the things to get to find in our scope okay who's going to be using those things who's going to be capturing those things whoever you know if anyone inside here if any function captures these variables then we need to actually create a context object and put those variables on that context so here we've got one two five one one nine okay interesting we move on and here we enter a block now this could this could have just been like if you know true um but you actually don't need to have that you can actually just enter a block directly um which is a it's a feature no one uses but i feel like maybe we should use a bit more um to kind of limit variable scope but at any rate uh it's just here for demonstration purposes so here we enter the block scope and here we have a block string which is captured by bar so if i look in my memory on subject four we get another context here okay and it's not really telling us much right now but it has as its previous context so it's like a reference to the parent context um the uh same guy was over four one two five one one nine so that's the same as this guy here and it's got uh both of these strings now have the whole use by the time we get to this point uh in the code um so yeah funny that we don't have our um this guy defined um but maybe it's slightly different behavior between functions and blocks but at any rate let's go to the next snapshot so let's see the next snapshot is the final one is this guy on the other side of bar okay so now we have a closure so that means we've got a bar function and it now references this context so one two five three one three that's the same as this guy and what's inside here okay so now it has funnily enough it has um you know what the value of this thing is this um block string but doesn't doesn't say what the name is i don't know why that is maybe it doesn't need it maybe it's going to be minified um but uh at any rate it's been captured and then here we've got a point into our previous context which has our other two things that are captured as well so what that tells us is that uh these context objects exist in a given scope and they whatever variables from that scope get used by uh other functions in that scope um or like descendant scopes those will be the ones that end up being added to the context and then um when you actually you know return one of these functions for example let me go here and run that so right now uh in my scope is that's kind of weird why is F not in here oh because i haven't right yes very good let's call it a const fresh paste say play hmm quite the same thing outer i think it's it's behaving differently because of the fact that i need to just change the actual source code let's do that start again oh disconnected and here we go okay that's better cool so now we have um we can see here we've got this closure i think contains the things we cared about for our inner function it does not contain the closure that was made for this guy because that's in its own uh block um but uh through this guy does have access to this closure that was defined right up here it contains um not only in a string which this guy explicitly captured but also bar string which is something that captured so um something to keep in mind if you have a huge you know if you've got two functions closing over a bunch of variables and one of them closes over some huge object and the other one doesn't but the other one lives on past the lifetime of the parent function then uh you might be holding onto that object in your in your heap in memory for longer than you want to but that effectively wraps this up so um hopefully this was a good intro to JavaScript scoping and how it balances static scoping with dynamic scoping how it supports closures and what actually happens on the heap when we are dealing with creating closures so yeah thanks for thanks for watching and um I'll add a link in the description to the original part which goes into some more detail about what's going on behind the scenes thanks for watching", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.2, "text": " Hi guys, welcome to my video on scoping in JavaScript.", "tokens": [50364, 2421, 1074, 11, 2928, 281, 452, 960, 322, 795, 26125, 294, 15778, 13, 50724], "temperature": 0.0, "avg_logprob": -0.20448443624708387, "compression_ratio": 1.4922279792746114, "no_speech_prob": 0.06634782254695892}, {"id": 1, "seek": 0, "start": 7.2, "end": 14.280000000000001, "text": " So about a week ago I kind of started a deep dive into how JavaScript really works behind", "tokens": [50724, 407, 466, 257, 1243, 2057, 286, 733, 295, 1409, 257, 2452, 9192, 666, 577, 15778, 534, 1985, 2261, 51078], "temperature": 0.0, "avg_logprob": -0.20448443624708387, "compression_ratio": 1.4922279792746114, "no_speech_prob": 0.06634782254695892}, {"id": 2, "seek": 0, "start": 14.280000000000001, "end": 21.18, "text": " the scenes and part of that was learning about scoping.", "tokens": [51078, 264, 8026, 293, 644, 295, 300, 390, 2539, 466, 795, 26125, 13, 51423], "temperature": 0.0, "avg_logprob": -0.20448443624708387, "compression_ratio": 1.4922279792746114, "no_speech_prob": 0.06634782254695892}, {"id": 3, "seek": 0, "start": 21.18, "end": 26.400000000000002, "text": " I made a blog post called Everything I Wish I Knew About JavaScript Scoping a Week Here", "tokens": [51423, 286, 1027, 257, 6968, 2183, 1219, 5471, 286, 27697, 286, 591, 7686, 7769, 15778, 2747, 26125, 257, 12615, 1692, 51684], "temperature": 0.0, "avg_logprob": -0.20448443624708387, "compression_ratio": 1.4922279792746114, "no_speech_prob": 0.06634782254695892}, {"id": 4, "seek": 2640, "start": 26.4, "end": 31.24, "text": " which kind of goes into details about a lot of these things, but the first kind of chunk", "tokens": [50364, 597, 733, 295, 1709, 666, 4365, 466, 257, 688, 295, 613, 721, 11, 457, 264, 700, 733, 295, 16635, 50606], "temperature": 0.0, "avg_logprob": -0.22594479152134486, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.15786924958229065}, {"id": 5, "seek": 2640, "start": 31.24, "end": 36.92, "text": " of that is really just about like, you know, var versus let versus const which are keywords", "tokens": [50606, 295, 300, 307, 534, 445, 466, 411, 11, 291, 458, 11, 1374, 5717, 718, 5717, 1817, 597, 366, 21009, 50890], "temperature": 0.0, "avg_logprob": -0.22594479152134486, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.15786924958229065}, {"id": 6, "seek": 2640, "start": 36.92, "end": 41.8, "text": " for declaring variables which to be honest, I wasn't really that interested in in the", "tokens": [50890, 337, 40374, 9102, 597, 281, 312, 3245, 11, 286, 2067, 380, 534, 300, 3102, 294, 294, 264, 51134], "temperature": 0.0, "avg_logprob": -0.22594479152134486, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.15786924958229065}, {"id": 7, "seek": 2640, "start": 41.8, "end": 47.76, "text": " first place and given that most people just don't use var anymore, I don't know how relevant", "tokens": [51134, 700, 1081, 293, 2212, 300, 881, 561, 445, 500, 380, 764, 1374, 3602, 11, 286, 500, 380, 458, 577, 7340, 51432], "temperature": 0.0, "avg_logprob": -0.22594479152134486, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.15786924958229065}, {"id": 8, "seek": 2640, "start": 47.76, "end": 54.96, "text": " it is, but I still think that scoping in general is pretty important to learn about", "tokens": [51432, 309, 307, 11, 457, 286, 920, 519, 300, 795, 26125, 294, 2674, 307, 1238, 1021, 281, 1466, 466, 51792], "temperature": 0.0, "avg_logprob": -0.22594479152134486, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.15786924958229065}, {"id": 9, "seek": 5496, "start": 55.4, "end": 60.32, "text": " and I learned some interesting things about static scoping, dynamic scoping and how it", "tokens": [50386, 293, 286, 3264, 512, 1880, 721, 466, 13437, 795, 26125, 11, 8546, 795, 26125, 293, 577, 309, 50632], "temperature": 0.0, "avg_logprob": -0.2165061057882106, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.0017004283145070076}, {"id": 10, "seek": 5496, "start": 60.32, "end": 63.36, "text": " relates to this binding.", "tokens": [50632, 16155, 281, 341, 17359, 13, 50784], "temperature": 0.0, "avg_logprob": -0.2165061057882106, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.0017004283145070076}, {"id": 11, "seek": 5496, "start": 63.36, "end": 68.44, "text": " So yeah, my plan with this video is to take you through what I learned and I'm going to", "tokens": [50784, 407, 1338, 11, 452, 1393, 365, 341, 960, 307, 281, 747, 291, 807, 437, 286, 3264, 293, 286, 478, 516, 281, 51038], "temperature": 0.0, "avg_logprob": -0.2165061057882106, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.0017004283145070076}, {"id": 12, "seek": 5496, "start": 68.44, "end": 75.68, "text": " try and take an experimental approach where I'm not going to make any claims without having", "tokens": [51038, 853, 293, 747, 364, 17069, 3109, 689, 286, 478, 406, 516, 281, 652, 604, 9441, 1553, 1419, 51400], "temperature": 0.0, "avg_logprob": -0.2165061057882106, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.0017004283145070076}, {"id": 13, "seek": 5496, "start": 75.68, "end": 80.88, "text": " some way of like backing it up, which is why I've got this, the Chrome Dev Tools open right", "tokens": [51400, 512, 636, 295, 411, 19373, 309, 493, 11, 597, 307, 983, 286, 600, 658, 341, 11, 264, 15327, 9096, 30302, 1269, 558, 51660], "temperature": 0.0, "avg_logprob": -0.2165061057882106, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.0017004283145070076}, {"id": 14, "seek": 8088, "start": 80.88, "end": 81.88, "text": " now.", "tokens": [50364, 586, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1951373315626575, "compression_ratio": 1.8277511961722488, "no_speech_prob": 0.07582475990056992}, {"id": 15, "seek": 8088, "start": 81.88, "end": 87.52, "text": " We're going to try and understand how JavaScript works by actually observing what it does as", "tokens": [50414, 492, 434, 516, 281, 853, 293, 1223, 577, 15778, 1985, 538, 767, 22107, 437, 309, 775, 382, 50696], "temperature": 0.0, "avg_logprob": -0.1951373315626575, "compression_ratio": 1.8277511961722488, "no_speech_prob": 0.07582475990056992}, {"id": 16, "seek": 8088, "start": 87.52, "end": 89.8, "text": " a program runs.", "tokens": [50696, 257, 1461, 6676, 13, 50810], "temperature": 0.0, "avg_logprob": -0.1951373315626575, "compression_ratio": 1.8277511961722488, "no_speech_prob": 0.07582475990056992}, {"id": 17, "seek": 8088, "start": 89.8, "end": 95.72, "text": " So we're starting with this program here, which basically declares a couple of variables", "tokens": [50810, 407, 321, 434, 2891, 365, 341, 1461, 510, 11, 597, 1936, 979, 19415, 257, 1916, 295, 9102, 51106], "temperature": 0.0, "avg_logprob": -0.1951373315626575, "compression_ratio": 1.8277511961722488, "no_speech_prob": 0.07582475990056992}, {"id": 18, "seek": 8088, "start": 95.72, "end": 102.6, "text": " a and b and then declares this outer function, it itself declares two variables c and d,", "tokens": [51106, 257, 293, 272, 293, 550, 979, 19415, 341, 10847, 2445, 11, 309, 2564, 979, 19415, 732, 9102, 269, 293, 274, 11, 51450], "temperature": 0.0, "avg_logprob": -0.1951373315626575, "compression_ratio": 1.8277511961722488, "no_speech_prob": 0.07582475990056992}, {"id": 19, "seek": 8088, "start": 102.6, "end": 108.19999999999999, "text": " then it declares a inner function which itself declares two more variables and then on the", "tokens": [51450, 550, 309, 979, 19415, 257, 7284, 2445, 597, 2564, 979, 19415, 732, 544, 9102, 293, 550, 322, 264, 51730], "temperature": 0.0, "avg_logprob": -0.1951373315626575, "compression_ratio": 1.8277511961722488, "no_speech_prob": 0.07582475990056992}, {"id": 20, "seek": 10820, "start": 108.2, "end": 111.68, "text": " inside here we just console log all four.", "tokens": [50364, 1854, 510, 321, 445, 11076, 3565, 439, 1451, 13, 50538], "temperature": 0.0, "avg_logprob": -0.17582252433708123, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.006692192982882261}, {"id": 21, "seek": 10820, "start": 111.68, "end": 119.28, "text": " So a couple of these get overwritten, a does not get overwritten but c does, so in here", "tokens": [50538, 407, 257, 1916, 295, 613, 483, 670, 26859, 11, 257, 775, 406, 483, 670, 26859, 457, 269, 775, 11, 370, 294, 510, 50918], "temperature": 0.0, "avg_logprob": -0.17582252433708123, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.006692192982882261}, {"id": 22, "seek": 10820, "start": 119.28, "end": 125.76, "text": " it's called shadowing when you've got a function where another variable is in scope outside", "tokens": [50918, 309, 311, 1219, 8576, 278, 562, 291, 600, 658, 257, 2445, 689, 1071, 7006, 307, 294, 11923, 2380, 51242], "temperature": 0.0, "avg_logprob": -0.17582252433708123, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.006692192982882261}, {"id": 23, "seek": 10820, "start": 125.76, "end": 128.32, "text": " that function but we're kind of overriding its value here.", "tokens": [51242, 300, 2445, 457, 321, 434, 733, 295, 670, 81, 2819, 1080, 2158, 510, 13, 51370], "temperature": 0.0, "avg_logprob": -0.17582252433708123, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.006692192982882261}, {"id": 24, "seek": 10820, "start": 128.32, "end": 132.24, "text": " I mean, we're not overriding the value of this variable, we just have another variable", "tokens": [51370, 286, 914, 11, 321, 434, 406, 670, 81, 2819, 264, 2158, 295, 341, 7006, 11, 321, 445, 362, 1071, 7006, 51566], "temperature": 0.0, "avg_logprob": -0.17582252433708123, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.006692192982882261}, {"id": 25, "seek": 10820, "start": 132.24, "end": 137.08, "text": " of the same name and therefore we can't really access this variable.", "tokens": [51566, 295, 264, 912, 1315, 293, 4412, 321, 393, 380, 534, 2105, 341, 7006, 13, 51808], "temperature": 0.0, "avg_logprob": -0.17582252433708123, "compression_ratio": 1.839662447257384, "no_speech_prob": 0.006692192982882261}, {"id": 26, "seek": 13708, "start": 137.08, "end": 141.64000000000001, "text": " So we've got this function here, then we just call that function and then we call the", "tokens": [50364, 407, 321, 600, 658, 341, 2445, 510, 11, 550, 321, 445, 818, 300, 2445, 293, 550, 321, 818, 264, 50592], "temperature": 0.0, "avg_logprob": -0.1720317723799725, "compression_ratio": 1.898936170212766, "no_speech_prob": 0.00036828225711360574}, {"id": 27, "seek": 13708, "start": 141.64000000000001, "end": 142.64000000000001, "text": " outer function.", "tokens": [50592, 10847, 2445, 13, 50642], "temperature": 0.0, "avg_logprob": -0.1720317723799725, "compression_ratio": 1.898936170212766, "no_speech_prob": 0.00036828225711360574}, {"id": 28, "seek": 13708, "start": 142.64000000000001, "end": 148.08, "text": " So the way the program works is we go here, declare this guy, call this guy, then we go", "tokens": [50642, 407, 264, 636, 264, 1461, 1985, 307, 321, 352, 510, 11, 19710, 341, 2146, 11, 818, 341, 2146, 11, 550, 321, 352, 50914], "temperature": 0.0, "avg_logprob": -0.1720317723799725, "compression_ratio": 1.898936170212766, "no_speech_prob": 0.00036828225711360574}, {"id": 29, "seek": 13708, "start": 148.08, "end": 151.68, "text": " inside here and declare this guy and then we call it.", "tokens": [50914, 1854, 510, 293, 19710, 341, 2146, 293, 550, 321, 818, 309, 13, 51094], "temperature": 0.0, "avg_logprob": -0.1720317723799725, "compression_ratio": 1.898936170212766, "no_speech_prob": 0.00036828225711360574}, {"id": 30, "seek": 13708, "start": 151.68, "end": 158.28, "text": " So the point here is that we've got kind of nested scoping and we want to see how these", "tokens": [51094, 407, 264, 935, 510, 307, 300, 321, 600, 658, 733, 295, 15646, 292, 795, 26125, 293, 321, 528, 281, 536, 577, 613, 51424], "temperature": 0.0, "avg_logprob": -0.1720317723799725, "compression_ratio": 1.898936170212766, "no_speech_prob": 0.00036828225711360574}, {"id": 31, "seek": 13708, "start": 158.28, "end": 159.52, "text": " values end up coming out.", "tokens": [51424, 4190, 917, 493, 1348, 484, 13, 51486], "temperature": 0.0, "avg_logprob": -0.1720317723799725, "compression_ratio": 1.898936170212766, "no_speech_prob": 0.00036828225711360574}, {"id": 32, "seek": 15952, "start": 159.88000000000002, "end": 167.44, "text": " So I play this now, console log shows a is one, b is five, c is six and d is four.", "tokens": [50382, 407, 286, 862, 341, 586, 11, 11076, 3565, 3110, 257, 307, 472, 11, 272, 307, 1732, 11, 269, 307, 2309, 293, 274, 307, 1451, 13, 50760], "temperature": 0.0, "avg_logprob": -0.24358841807571882, "compression_ratio": 1.693069306930693, "no_speech_prob": 0.20171238481998444}, {"id": 33, "seek": 15952, "start": 167.44, "end": 173.64000000000001, "text": " So a is one because it gets started here and doesn't get overwritten or shadowed rather.", "tokens": [50760, 407, 257, 307, 472, 570, 309, 2170, 1409, 510, 293, 1177, 380, 483, 670, 26859, 420, 8576, 292, 2831, 13, 51070], "temperature": 0.0, "avg_logprob": -0.24358841807571882, "compression_ratio": 1.693069306930693, "no_speech_prob": 0.20171238481998444}, {"id": 34, "seek": 15952, "start": 173.64000000000001, "end": 179.72, "text": " b starts as two but then over here we've got b is five so we shadow this guy and we just", "tokens": [51070, 272, 3719, 382, 732, 457, 550, 670, 510, 321, 600, 658, 272, 307, 1732, 370, 321, 8576, 341, 2146, 293, 321, 445, 51374], "temperature": 0.0, "avg_logprob": -0.24358841807571882, "compression_ratio": 1.693069306930693, "no_speech_prob": 0.20171238481998444}, {"id": 35, "seek": 15952, "start": 179.72, "end": 185.4, "text": " say okay we've got our own b variable here which is equal to five so we use that.", "tokens": [51374, 584, 1392, 321, 600, 658, 527, 1065, 272, 7006, 510, 597, 307, 2681, 281, 1732, 370, 321, 764, 300, 13, 51658], "temperature": 0.0, "avg_logprob": -0.24358841807571882, "compression_ratio": 1.693069306930693, "no_speech_prob": 0.20171238481998444}, {"id": 36, "seek": 18540, "start": 185.4, "end": 191.16, "text": " c is three but then over here it gets shadowed and we get a new c variable whose value is", "tokens": [50364, 269, 307, 1045, 457, 550, 670, 510, 309, 2170, 8576, 292, 293, 321, 483, 257, 777, 269, 7006, 6104, 2158, 307, 50652], "temperature": 0.0, "avg_logprob": -0.20302736191522508, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.053390853106975555}, {"id": 37, "seek": 18540, "start": 191.16, "end": 198.8, "text": " six so we end up saying c is six and finally d starts as four and does not get shadowed", "tokens": [50652, 2309, 370, 321, 917, 493, 1566, 269, 307, 2309, 293, 2721, 274, 3719, 382, 1451, 293, 775, 406, 483, 8576, 292, 51034], "temperature": 0.0, "avg_logprob": -0.20302736191522508, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.053390853106975555}, {"id": 38, "seek": 18540, "start": 198.8, "end": 200.08, "text": " so it's just four here.", "tokens": [51034, 370, 309, 311, 445, 1451, 510, 13, 51098], "temperature": 0.0, "avg_logprob": -0.20302736191522508, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.053390853106975555}, {"id": 39, "seek": 18540, "start": 200.08, "end": 205.36, "text": " So off the bat we can see that when you have a function declared inside another function", "tokens": [51098, 407, 766, 264, 7362, 321, 393, 536, 300, 562, 291, 362, 257, 2445, 15489, 1854, 1071, 2445, 51362], "temperature": 0.0, "avg_logprob": -0.20302736191522508, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.053390853106975555}, {"id": 40, "seek": 18540, "start": 205.36, "end": 211.32, "text": " it has access to variables defined outside of its scope whether it's d in the outer function", "tokens": [51362, 309, 575, 2105, 281, 9102, 7642, 2380, 295, 1080, 11923, 1968, 309, 311, 274, 294, 264, 10847, 2445, 51660], "temperature": 0.0, "avg_logprob": -0.20302736191522508, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.053390853106975555}, {"id": 41, "seek": 18540, "start": 211.32, "end": 214.4, "text": " or a in this global context.", "tokens": [51660, 420, 257, 294, 341, 4338, 4319, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20302736191522508, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.053390853106975555}, {"id": 42, "seek": 21440, "start": 214.84, "end": 220.36, "text": " Okay so let's have a look at what's actually happening here but a diagram that I made.", "tokens": [50386, 1033, 370, 718, 311, 362, 257, 574, 412, 437, 311, 767, 2737, 510, 457, 257, 10686, 300, 286, 1027, 13, 50662], "temperature": 0.0, "avg_logprob": -0.22636072635650634, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0015977140283212066}, {"id": 43, "seek": 21440, "start": 220.36, "end": 227.20000000000002, "text": " Basically JavaScript runs on an execution stack which is equivalent to a call stack.", "tokens": [50662, 8537, 15778, 6676, 322, 364, 15058, 8630, 597, 307, 10344, 281, 257, 818, 8630, 13, 51004], "temperature": 0.0, "avg_logprob": -0.22636072635650634, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0015977140283212066}, {"id": 44, "seek": 21440, "start": 227.20000000000002, "end": 233.28, "text": " At the bottom we've got the global execution context and so each of these little stack", "tokens": [51004, 1711, 264, 2767, 321, 600, 658, 264, 4338, 15058, 4319, 293, 370, 1184, 295, 613, 707, 8630, 51308], "temperature": 0.0, "avg_logprob": -0.22636072635650634, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0015977140283212066}, {"id": 45, "seek": 21440, "start": 233.28, "end": 240.12, "text": " frames is called an execution context so there's a global one at the bottom which is this", "tokens": [51308, 12083, 307, 1219, 364, 15058, 4319, 370, 456, 311, 257, 4338, 472, 412, 264, 2767, 597, 307, 341, 51650], "temperature": 0.0, "avg_logprob": -0.22636072635650634, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0015977140283212066}, {"id": 46, "seek": 24012, "start": 240.20000000000002, "end": 246.44, "text": " thing here this scope here then we've got the outer execution context which would be", "tokens": [50368, 551, 510, 341, 11923, 510, 550, 321, 600, 658, 264, 10847, 15058, 4319, 597, 576, 312, 50680], "temperature": 0.0, "avg_logprob": -0.16650699874729785, "compression_ratio": 2.013157894736842, "no_speech_prob": 0.014061549678444862}, {"id": 47, "seek": 24012, "start": 247.72, "end": 251.24, "text": " everything that happens in here would be happening inside that context and then we've got the inner", "tokens": [50744, 1203, 300, 2314, 294, 510, 576, 312, 2737, 1854, 300, 4319, 293, 550, 321, 600, 658, 264, 7284, 50920], "temperature": 0.0, "avg_logprob": -0.16650699874729785, "compression_ratio": 2.013157894736842, "no_speech_prob": 0.014061549678444862}, {"id": 48, "seek": 24012, "start": 251.24, "end": 257.48, "text": " one which would be this stuff so what an execution context does is it basically distores", "tokens": [50920, 472, 597, 576, 312, 341, 1507, 370, 437, 364, 15058, 4319, 775, 307, 309, 1936, 1483, 2706, 51232], "temperature": 0.0, "avg_logprob": -0.16650699874729785, "compression_ratio": 2.013157894736842, "no_speech_prob": 0.014061549678444862}, {"id": 49, "seek": 24012, "start": 258.12, "end": 262.52, "text": " information you need to be able to know where you are at in a function you know what the variables", "tokens": [51264, 1589, 291, 643, 281, 312, 1075, 281, 458, 689, 291, 366, 412, 294, 257, 2445, 291, 458, 437, 264, 9102, 51484], "temperature": 0.0, "avg_logprob": -0.16650699874729785, "compression_ratio": 2.013157894736842, "no_speech_prob": 0.014061549678444862}, {"id": 50, "seek": 24012, "start": 262.52, "end": 267.8, "text": " are that you might be reading from and it's the kind of thing where if you know if you", "tokens": [51484, 366, 300, 291, 1062, 312, 3760, 490, 293, 309, 311, 264, 733, 295, 551, 689, 498, 291, 458, 498, 291, 51748], "temperature": 0.0, "avg_logprob": -0.16650699874729785, "compression_ratio": 2.013157894736842, "no_speech_prob": 0.014061549678444862}, {"id": 51, "seek": 26780, "start": 267.8, "end": 272.12, "text": " turn the computer off and turn it back on again and this stack was still here", "tokens": [50364, 1261, 264, 3820, 766, 293, 1261, 309, 646, 322, 797, 293, 341, 8630, 390, 920, 510, 50580], "temperature": 0.0, "avg_logprob": -0.1500438760828089, "compression_ratio": 1.6650485436893203, "no_speech_prob": 0.0026313269045203924}, {"id": 52, "seek": 26780, "start": 272.12, "end": 275.08, "text": " and almost up to the point or two then you should be able to just continue the program", "tokens": [50580, 293, 1920, 493, 281, 264, 935, 420, 732, 550, 291, 820, 312, 1075, 281, 445, 2354, 264, 1461, 50728], "temperature": 0.0, "avg_logprob": -0.1500438760828089, "compression_ratio": 1.6650485436893203, "no_speech_prob": 0.0026313269045203924}, {"id": 53, "seek": 26780, "start": 276.12, "end": 283.16, "text": " from where you left off. So we've got our execution context on the execution stack", "tokens": [50780, 490, 689, 291, 1411, 766, 13, 407, 321, 600, 658, 527, 15058, 4319, 322, 264, 15058, 8630, 51132], "temperature": 0.0, "avg_logprob": -0.1500438760828089, "compression_ratio": 1.6650485436893203, "no_speech_prob": 0.0026313269045203924}, {"id": 54, "seek": 26780, "start": 283.16, "end": 290.2, "text": " and each of these points to a I'd say points to you probably more accurately has a reference to", "tokens": [51132, 293, 1184, 295, 613, 2793, 281, 257, 286, 1116, 584, 2793, 281, 291, 1391, 544, 20095, 575, 257, 6408, 281, 51484], "temperature": 0.0, "avg_logprob": -0.1500438760828089, "compression_ratio": 1.6650485436893203, "no_speech_prob": 0.0026313269045203924}, {"id": 55, "seek": 29020, "start": 291.15999999999997, "end": 297.88, "text": " uh lexical environments so uh lexical environments uh when you see the word lexical it basically", "tokens": [50412, 2232, 476, 87, 804, 12388, 370, 2232, 476, 87, 804, 12388, 2232, 562, 291, 536, 264, 1349, 476, 87, 804, 309, 1936, 50748], "temperature": 0.0, "avg_logprob": -0.12658733196472854, "compression_ratio": 1.9492385786802031, "no_speech_prob": 0.005384483374655247}, {"id": 56, "seek": 29020, "start": 297.88, "end": 303.71999999999997, "text": " means like letters or things you can you can see um in this case we're talking about actual variables", "tokens": [50748, 1355, 411, 7825, 420, 721, 291, 393, 291, 393, 536, 1105, 294, 341, 1389, 321, 434, 1417, 466, 3539, 9102, 51040], "temperature": 0.0, "avg_logprob": -0.12658733196472854, "compression_ratio": 1.9492385786802031, "no_speech_prob": 0.005384483374655247}, {"id": 57, "seek": 29020, "start": 303.71999999999997, "end": 310.28, "text": " being defined so a lexical environment uh just contains two things it contains an environment", "tokens": [51040, 885, 7642, 370, 257, 476, 87, 804, 2823, 2232, 445, 8306, 732, 721, 309, 8306, 364, 2823, 51368], "temperature": 0.0, "avg_logprob": -0.12658733196472854, "compression_ratio": 1.9492385786802031, "no_speech_prob": 0.005384483374655247}, {"id": 58, "seek": 29020, "start": 310.28, "end": 317.08, "text": " record and a pointer to the parent lexical environment so um uh this happens to be called a", "tokens": [51368, 2136, 293, 257, 23918, 281, 264, 2596, 476, 87, 804, 2823, 370, 1105, 2232, 341, 2314, 281, 312, 1219, 257, 51708], "temperature": 0.0, "avg_logprob": -0.12658733196472854, "compression_ratio": 1.9492385786802031, "no_speech_prob": 0.005384483374655247}, {"id": 59, "seek": 31708, "start": 317.15999999999997, "end": 321.08, "text": " declarative environment record but what an environment record is is is effectively just a", "tokens": [50368, 16694, 1166, 2823, 2136, 457, 437, 364, 2823, 2136, 307, 307, 307, 8659, 445, 257, 50564], "temperature": 0.0, "avg_logprob": -0.08888021537235805, "compression_ratio": 1.9915966386554622, "no_speech_prob": 0.0038240402936935425}, {"id": 60, "seek": 31708, "start": 321.08, "end": 326.76, "text": " mapping of variables to their values so in the case of our inner function we've got b is five and c", "tokens": [50564, 18350, 295, 9102, 281, 641, 4190, 370, 294, 264, 1389, 295, 527, 7284, 2445, 321, 600, 658, 272, 307, 1732, 293, 269, 50848], "temperature": 0.0, "avg_logprob": -0.08888021537235805, "compression_ratio": 1.9915966386554622, "no_speech_prob": 0.0038240402936935425}, {"id": 61, "seek": 31708, "start": 326.76, "end": 331.47999999999996, "text": " is six so that's these two guys in our outer function we've got c is three and d is four", "tokens": [50848, 307, 2309, 370, 300, 311, 613, 732, 1074, 294, 527, 10847, 2445, 321, 600, 658, 269, 307, 1045, 293, 274, 307, 1451, 51084], "temperature": 0.0, "avg_logprob": -0.08888021537235805, "compression_ratio": 1.9915966386554622, "no_speech_prob": 0.0038240402936935425}, {"id": 62, "seek": 31708, "start": 332.03999999999996, "end": 338.84, "text": " which are these two guys and then in our global lexical environment we actually have this is kind", "tokens": [51112, 597, 366, 613, 732, 1074, 293, 550, 294, 527, 4338, 476, 87, 804, 2823, 321, 767, 362, 341, 307, 733, 51452], "temperature": 0.0, "avg_logprob": -0.08888021537235805, "compression_ratio": 1.9915966386554622, "no_speech_prob": 0.0038240402936935425}, {"id": 63, "seek": 31708, "start": 338.84, "end": 345.4, "text": " of a it's a kind of weird edge case but um we've got a composite environment record consisting of", "tokens": [51452, 295, 257, 309, 311, 257, 733, 295, 3657, 4691, 1389, 457, 1105, 321, 600, 658, 257, 25557, 2823, 2136, 33921, 295, 51780], "temperature": 0.0, "avg_logprob": -0.08888021537235805, "compression_ratio": 1.9915966386554622, "no_speech_prob": 0.0038240402936935425}, {"id": 64, "seek": 34540, "start": 345.4, "end": 352.84, "text": " two things the declarative environment record um for which b is two and we have this other thing", "tokens": [50364, 732, 721, 264, 16694, 1166, 2823, 2136, 1105, 337, 597, 272, 307, 732, 293, 321, 362, 341, 661, 551, 50736], "temperature": 0.0, "avg_logprob": -0.037808094495608485, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.00048783939564600587}, {"id": 65, "seek": 34540, "start": 352.84, "end": 358.84, "text": " called the object environment record so this is where things kind of get a bit weird um the uh", "tokens": [50736, 1219, 264, 2657, 2823, 2136, 370, 341, 307, 689, 721, 733, 295, 483, 257, 857, 3657, 1105, 264, 2232, 51036], "temperature": 0.0, "avg_logprob": -0.037808094495608485, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.00048783939564600587}, {"id": 66, "seek": 34540, "start": 358.84, "end": 363.96, "text": " back in the day basically everything used these object environment records and they would all", "tokens": [51036, 646, 294, 264, 786, 1936, 1203, 1143, 613, 2657, 2823, 7724, 293, 436, 576, 439, 51292], "temperature": 0.0, "avg_logprob": -0.037808094495608485, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.00048783939564600587}, {"id": 67, "seek": 34540, "start": 363.96, "end": 369.96, "text": " have a thing called a binding object which was a literal javascript object that just contained", "tokens": [51292, 362, 257, 551, 1219, 257, 17359, 2657, 597, 390, 257, 20411, 361, 37331, 5944, 2657, 300, 445, 16212, 51592], "temperature": 0.0, "avg_logprob": -0.037808094495608485, "compression_ratio": 1.9191919191919191, "no_speech_prob": 0.00048783939564600587}, {"id": 68, "seek": 36996, "start": 369.96, "end": 377.15999999999997, "text": " your variables as properties um it is still the case today that at the global level if you define", "tokens": [50364, 428, 9102, 382, 7221, 1105, 309, 307, 920, 264, 1389, 965, 300, 412, 264, 4338, 1496, 498, 291, 6964, 50724], "temperature": 0.0, "avg_logprob": -0.06631373262953484, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.0039448970928788185}, {"id": 69, "seek": 36996, "start": 377.15999999999997, "end": 385.96, "text": " a variable with the um the var keyword then it actually ends up just being a property on the", "tokens": [50724, 257, 7006, 365, 264, 1105, 264, 1374, 20428, 550, 309, 767, 5314, 493, 445, 885, 257, 4707, 322, 264, 51164], "temperature": 0.0, "avg_logprob": -0.06631373262953484, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.0039448970928788185}, {"id": 70, "seek": 36996, "start": 385.96, "end": 390.91999999999996, "text": " global object um on the other hand if you use let or const it's going to be sitting in this", "tokens": [51164, 4338, 2657, 1105, 322, 264, 661, 1011, 498, 291, 764, 718, 420, 1817, 309, 311, 516, 281, 312, 3798, 294, 341, 51412], "temperature": 0.0, "avg_logprob": -0.06631373262953484, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.0039448970928788185}, {"id": 71, "seek": 36996, "start": 390.91999999999996, "end": 397.0, "text": " declarative environment record uh now what's the difference uh first of all uh when you actually", "tokens": [51412, 16694, 1166, 2823, 2136, 2232, 586, 437, 311, 264, 2649, 2232, 700, 295, 439, 2232, 562, 291, 767, 51716], "temperature": 0.0, "avg_logprob": -0.06631373262953484, "compression_ratio": 1.7227272727272727, "no_speech_prob": 0.0039448970928788185}, {"id": 72, "seek": 39700, "start": 397.0, "end": 401.96, "text": " have an object environment record the binding object in this case global just can be accessed by", "tokens": [50364, 362, 364, 2657, 2823, 2136, 264, 17359, 2657, 294, 341, 1389, 4338, 445, 393, 312, 34211, 538, 50612], "temperature": 0.0, "avg_logprob": -0.059479686651337016, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.002800695365294814}, {"id": 73, "seek": 39700, "start": 401.96, "end": 410.2, "text": " outside code um and uh it's not very efficient so these declarative ones um are there kind of", "tokens": [50612, 2380, 3089, 1105, 293, 2232, 309, 311, 406, 588, 7148, 370, 613, 16694, 1166, 2306, 1105, 366, 456, 733, 295, 51024], "temperature": 0.0, "avg_logprob": -0.059479686651337016, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.002800695365294814}, {"id": 74, "seek": 39700, "start": 410.2, "end": 419.0, "text": " internally stored and it's not accessible from the outside um okay so uh the the fact that these", "tokens": [51024, 19501, 12187, 293, 309, 311, 406, 9515, 490, 264, 2380, 1105, 1392, 370, 2232, 264, 264, 1186, 300, 613, 51464], "temperature": 0.0, "avg_logprob": -0.059479686651337016, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.002800695365294814}, {"id": 75, "seek": 39700, "start": 419.0, "end": 424.2, "text": " will point to each other allow us to create a scope chain where we can say you know i'm in the inner", "tokens": [51464, 486, 935, 281, 1184, 661, 2089, 505, 281, 1884, 257, 11923, 5021, 689, 321, 393, 584, 291, 458, 741, 478, 294, 264, 7284, 51724], "temperature": 0.0, "avg_logprob": -0.059479686651337016, "compression_ratio": 1.6796536796536796, "no_speech_prob": 0.002800695365294814}, {"id": 76, "seek": 42420, "start": 424.2, "end": 429.64, "text": " function i'm looking for the a variable right now because i want to log it and it's not in my", "tokens": [50364, 2445, 741, 478, 1237, 337, 264, 257, 7006, 558, 586, 570, 741, 528, 281, 3565, 309, 293, 309, 311, 406, 294, 452, 50636], "temperature": 0.0, "avg_logprob": -0.0807805061340332, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.006486864294856787}, {"id": 77, "seek": 42420, "start": 429.64, "end": 435.15999999999997, "text": " declarative environment record it's so therefore i'll look to my parent it's not in there either", "tokens": [50636, 16694, 1166, 2823, 2136, 309, 311, 370, 4412, 741, 603, 574, 281, 452, 2596, 309, 311, 406, 294, 456, 2139, 50912], "temperature": 0.0, "avg_logprob": -0.0807805061340332, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.006486864294856787}, {"id": 78, "seek": 42420, "start": 435.15999999999997, "end": 441.24, "text": " with my parent oh here it is on the global object so you can get the value of one and then you can", "tokens": [50912, 365, 452, 2596, 1954, 510, 309, 307, 322, 264, 4338, 2657, 370, 291, 393, 483, 264, 2158, 295, 472, 293, 550, 291, 393, 51216], "temperature": 0.0, "avg_logprob": -0.0807805061340332, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.006486864294856787}, {"id": 79, "seek": 42420, "start": 442.12, "end": 451.96, "text": " log that value so um it's probably also worth uh noting that um these uh functions when they", "tokens": [51260, 3565, 300, 2158, 370, 1105, 309, 311, 1391, 611, 3163, 2232, 26801, 300, 1105, 613, 2232, 6828, 562, 436, 51752], "temperature": 0.0, "avg_logprob": -0.0807805061340332, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.006486864294856787}, {"id": 80, "seek": 45196, "start": 452.03999999999996, "end": 457.64, "text": " created they actually get a eternal internal reference to the scopes that they have access to", "tokens": [50368, 2942, 436, 767, 483, 257, 14503, 6920, 6408, 281, 264, 795, 30545, 300, 436, 362, 2105, 281, 50648], "temperature": 0.0, "avg_logprob": -0.14862016421645435, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.0017544650472700596}, {"id": 81, "seek": 45196, "start": 457.64, "end": 469.24, "text": " so let me go down here and actually gotta refresh the page if i go debugger and then play that okay so", "tokens": [50648, 370, 718, 385, 352, 760, 510, 293, 767, 3428, 15134, 264, 3028, 498, 741, 352, 24083, 1321, 293, 550, 862, 300, 1392, 370, 51228], "temperature": 0.0, "avg_logprob": -0.14862016421645435, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.0017544650472700596}, {"id": 82, "seek": 45196, "start": 471.08, "end": 476.52, "text": " if i look at the inner function you can see here this is just in my dev tools inspector", "tokens": [51320, 498, 741, 574, 412, 264, 7284, 2445, 291, 393, 536, 510, 341, 307, 445, 294, 452, 1905, 3873, 34564, 51592], "temperature": 0.0, "avg_logprob": -0.14862016421645435, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.0017544650472700596}, {"id": 83, "seek": 47652, "start": 477.47999999999996, "end": 483.4, "text": " but in scope i've got my inner function it's got arguments it's got a prototype but it has this", "tokens": [50412, 457, 294, 11923, 741, 600, 658, 452, 7284, 2445, 309, 311, 658, 12869, 309, 311, 658, 257, 19475, 457, 309, 575, 341, 50708], "temperature": 0.0, "avg_logprob": -0.15548397632355385, "compression_ratio": 1.8640776699029127, "no_speech_prob": 0.0009109847596846521}, {"id": 84, "seek": 47652, "start": 483.4, "end": 489.47999999999996, "text": " internal thing and these uh internal things are denoted by these double square brackets um this", "tokens": [50708, 6920, 551, 293, 613, 2232, 6920, 721, 366, 1441, 23325, 538, 613, 3834, 3732, 26179, 1105, 341, 51012], "temperature": 0.0, "avg_logprob": -0.15548397632355385, "compression_ratio": 1.8640776699029127, "no_speech_prob": 0.0009109847596846521}, {"id": 85, "seek": 47652, "start": 489.47999999999996, "end": 497.4, "text": " guy's called scopes and uh in this case uh we've got a few things i've got the value of d from", "tokens": [51012, 2146, 311, 1219, 795, 30545, 293, 2232, 294, 341, 1389, 2232, 321, 600, 658, 257, 1326, 721, 741, 600, 658, 264, 2158, 295, 274, 490, 51408], "temperature": 0.0, "avg_logprob": -0.15548397632355385, "compression_ratio": 1.8640776699029127, "no_speech_prob": 0.0009109847596846521}, {"id": 86, "seek": 47652, "start": 497.4, "end": 503.24, "text": " that outer function the value of b from a script uh anything that's defined at the top level with", "tokens": [51408, 300, 10847, 2445, 264, 2158, 295, 272, 490, 257, 5755, 2232, 1340, 300, 311, 7642, 412, 264, 1192, 1496, 365, 51700], "temperature": 0.0, "avg_logprob": -0.15548397632355385, "compression_ratio": 1.8640776699029127, "no_speech_prob": 0.0009109847596846521}, {"id": 87, "seek": 50324, "start": 503.32, "end": 508.84000000000003, "text": " let or const is considered to be script scoped um which is not the same as saying is actually", "tokens": [50368, 718, 420, 1817, 307, 4888, 281, 312, 5755, 795, 27277, 1105, 597, 307, 406, 264, 912, 382, 1566, 307, 767, 50644], "temperature": 0.0, "avg_logprob": -0.10561429370533336, "compression_ratio": 1.831578947368421, "no_speech_prob": 0.0029347010422497988}, {"id": 88, "seek": 50324, "start": 508.84000000000003, "end": 512.76, "text": " i only scoped to the we're talking about actual script tags here if i go for example", "tokens": [50644, 741, 787, 795, 27277, 281, 264, 321, 434, 1417, 466, 3539, 5755, 18632, 510, 498, 741, 352, 337, 1365, 50840], "temperature": 0.0, "avg_logprob": -0.10561429370533336, "compression_ratio": 1.831578947368421, "no_speech_prob": 0.0029347010422497988}, {"id": 89, "seek": 50324, "start": 515.8, "end": 522.36, "text": " this thing would be a script tag um it's not actually scoped to the script tag it's just", "tokens": [50992, 341, 551, 576, 312, 257, 5755, 6162, 1105, 309, 311, 406, 767, 795, 27277, 281, 264, 5755, 6162, 309, 311, 445, 51320], "temperature": 0.0, "avg_logprob": -0.10561429370533336, "compression_ratio": 1.831578947368421, "no_speech_prob": 0.0029347010422497988}, {"id": 90, "seek": 50324, "start": 524.6800000000001, "end": 528.76, "text": " any script will have access to it um and then we've got the global thing here so", "tokens": [51436, 604, 5755, 486, 362, 2105, 281, 309, 1105, 293, 550, 321, 600, 658, 264, 4338, 551, 510, 370, 51640], "temperature": 0.0, "avg_logprob": -0.10561429370533336, "compression_ratio": 1.831578947368421, "no_speech_prob": 0.0029347010422497988}, {"id": 91, "seek": 52876, "start": 529.72, "end": 535.24, "text": " we expand this guy we'll see that actually among the many properties of global object one is a", "tokens": [50412, 321, 5268, 341, 2146, 321, 603, 536, 300, 767, 3654, 264, 867, 7221, 295, 4338, 2657, 472, 307, 257, 50688], "temperature": 0.0, "avg_logprob": -0.10804376196353993, "compression_ratio": 1.7657657657657657, "no_speech_prob": 0.0001273077941732481}, {"id": 92, "seek": 52876, "start": 535.24, "end": 543.08, "text": " whose value is one so that's this guy here so kind of weird um but also pretty cool so let's move on", "tokens": [50688, 6104, 2158, 307, 472, 370, 300, 311, 341, 2146, 510, 370, 733, 295, 3657, 1105, 457, 611, 1238, 1627, 370, 718, 311, 1286, 322, 51080], "temperature": 0.0, "avg_logprob": -0.10804376196353993, "compression_ratio": 1.7657657657657657, "no_speech_prob": 0.0001273077941732481}, {"id": 93, "seek": 52876, "start": 543.08, "end": 548.68, "text": " and i'm going to go to the next example so in this case we've got an inner and an outer function", "tokens": [51080, 293, 741, 478, 516, 281, 352, 281, 264, 958, 1365, 370, 294, 341, 1389, 321, 600, 658, 364, 7284, 293, 364, 10847, 2445, 51360], "temperature": 0.0, "avg_logprob": -0.10804376196353993, "compression_ratio": 1.7657657657657657, "no_speech_prob": 0.0001273077941732481}, {"id": 94, "seek": 52876, "start": 548.68, "end": 555.24, "text": " but our inner function is actually defined outside the outer function so when this guy's defined um", "tokens": [51360, 457, 527, 7284, 2445, 307, 767, 7642, 2380, 264, 10847, 2445, 370, 562, 341, 2146, 311, 7642, 1105, 51688], "temperature": 0.0, "avg_logprob": -0.10804376196353993, "compression_ratio": 1.7657657657657657, "no_speech_prob": 0.0001273077941732481}, {"id": 95, "seek": 55524, "start": 556.2, "end": 566.04, "text": " uh the it references x but the x is actually defined in the uh global execution context", "tokens": [50412, 2232, 264, 309, 15400, 2031, 457, 264, 2031, 307, 767, 7642, 294, 264, 2232, 4338, 15058, 4319, 50904], "temperature": 0.0, "avg_logprob": -0.1333338873726981, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.0004728136118501425}, {"id": 96, "seek": 55524, "start": 567.0, "end": 574.6, "text": " and the um outer function basically when it gets called it goes and creates a its own local", "tokens": [50952, 293, 264, 1105, 10847, 2445, 1936, 562, 309, 2170, 1219, 309, 1709, 293, 7829, 257, 1080, 1065, 2654, 51332], "temperature": 0.0, "avg_logprob": -0.1333338873726981, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.0004728136118501425}, {"id": 97, "seek": 55524, "start": 574.6, "end": 582.04, "text": " x variable and then it calls inner so the question here is which x will this inner function uh log", "tokens": [51332, 2031, 7006, 293, 550, 309, 5498, 7284, 370, 264, 1168, 510, 307, 597, 2031, 486, 341, 7284, 2445, 2232, 3565, 51704], "temperature": 0.0, "avg_logprob": -0.1333338873726981, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.0004728136118501425}, {"id": 98, "seek": 58204, "start": 582.5999999999999, "end": 589.8, "text": " um and it turns out that when you run this guy it's going to log one which means logs this thing", "tokens": [50392, 1105, 293, 309, 4523, 484, 300, 562, 291, 1190, 341, 2146, 309, 311, 516, 281, 3565, 472, 597, 1355, 20820, 341, 551, 50752], "temperature": 0.0, "avg_logprob": -0.11103617061268199, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0010321781737729907}, {"id": 99, "seek": 58204, "start": 590.36, "end": 597.9599999999999, "text": " so this kind of touches on the difference between static and dynamic scoping in static scoping", "tokens": [50780, 370, 341, 733, 295, 17431, 322, 264, 2649, 1296, 13437, 293, 8546, 795, 26125, 294, 13437, 795, 26125, 51160], "temperature": 0.0, "avg_logprob": -0.11103617061268199, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0010321781737729907}, {"id": 100, "seek": 58204, "start": 597.9599999999999, "end": 606.52, "text": " when a function is created um any uh variables that references from an outer scope um it looks", "tokens": [51160, 562, 257, 2445, 307, 2942, 1105, 604, 2232, 9102, 300, 15400, 490, 364, 10847, 11923, 1105, 309, 1542, 51588], "temperature": 0.0, "avg_logprob": -0.11103617061268199, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0010321781737729907}, {"id": 101, "seek": 60652, "start": 606.6, "end": 612.84, "text": " at okay like lexically or statically is what's called static scoping or lexical scoping uh what", "tokens": [50368, 412, 1392, 411, 476, 87, 984, 420, 2219, 984, 307, 437, 311, 1219, 13437, 795, 26125, 420, 476, 87, 804, 795, 26125, 2232, 437, 50680], "temperature": 0.0, "avg_logprob": -0.09339733918507893, "compression_ratio": 1.9791666666666667, "no_speech_prob": 0.024418972432613373}, {"id": 102, "seek": 60652, "start": 612.84, "end": 617.24, "text": " have i got access to so i can just look on the page here and see okay well there's an x this", "tokens": [50680, 362, 741, 658, 2105, 281, 370, 741, 393, 445, 574, 322, 264, 3028, 510, 293, 536, 1392, 731, 456, 311, 364, 2031, 341, 50900], "temperature": 0.0, "avg_logprob": -0.09339733918507893, "compression_ratio": 1.9791666666666667, "no_speech_prob": 0.024418972432613373}, {"id": 103, "seek": 60652, "start": 617.24, "end": 622.36, "text": " in scope here so that's what that's referring to um what actually you know is defined against", "tokens": [50900, 294, 11923, 510, 370, 300, 311, 437, 300, 311, 13761, 281, 1105, 437, 767, 291, 458, 307, 7642, 1970, 51156], "temperature": 0.0, "avg_logprob": -0.09339733918507893, "compression_ratio": 1.9791666666666667, "no_speech_prob": 0.024418972432613373}, {"id": 104, "seek": 60652, "start": 622.36, "end": 627.96, "text": " a function that might be calling my inner function um it doesn't matter so uh that's called static", "tokens": [51156, 257, 2445, 300, 1062, 312, 5141, 452, 7284, 2445, 1105, 309, 1177, 380, 1871, 370, 2232, 300, 311, 1219, 13437, 51436], "temperature": 0.0, "avg_logprob": -0.09339733918507893, "compression_ratio": 1.9791666666666667, "no_speech_prob": 0.024418972432613373}, {"id": 105, "seek": 60652, "start": 627.96, "end": 632.6, "text": " scoping um which is to say that we you know you can just statically look at the page and know", "tokens": [51436, 795, 26125, 1105, 597, 307, 281, 584, 300, 321, 291, 458, 291, 393, 445, 2219, 984, 574, 412, 264, 3028, 293, 458, 51668], "temperature": 0.0, "avg_logprob": -0.09339733918507893, "compression_ratio": 1.9791666666666667, "no_speech_prob": 0.024418972432613373}, {"id": 106, "seek": 63260, "start": 633.24, "end": 639.96, "text": " uh which variables here are being referenced now you might ask yourself uh isn't this what", "tokens": [50396, 2232, 597, 9102, 510, 366, 885, 32734, 586, 291, 1062, 1029, 1803, 2232, 1943, 380, 341, 437, 50732], "temperature": 0.0, "avg_logprob": -0.07861824722977372, "compression_ratio": 1.8835341365461848, "no_speech_prob": 0.0018099927110597491}, {"id": 107, "seek": 63260, "start": 639.96, "end": 645.4, "text": " every programming language does and actually no it's not so here we have a bash script and", "tokens": [50732, 633, 9410, 2856, 775, 293, 767, 572, 309, 311, 406, 370, 510, 321, 362, 257, 46183, 5755, 293, 51004], "temperature": 0.0, "avg_logprob": -0.07861824722977372, "compression_ratio": 1.8835341365461848, "no_speech_prob": 0.0018099927110597491}, {"id": 108, "seek": 63260, "start": 645.4, "end": 651.5600000000001, "text": " i'm just going to paste this in here so uh in this script we do the exact same thing we define x", "tokens": [51004, 741, 478, 445, 516, 281, 9163, 341, 294, 510, 370, 2232, 294, 341, 5755, 321, 360, 264, 1900, 912, 551, 321, 6964, 2031, 51312], "temperature": 0.0, "avg_logprob": -0.07861824722977372, "compression_ratio": 1.8835341365461848, "no_speech_prob": 0.0018099927110597491}, {"id": 109, "seek": 63260, "start": 651.5600000000001, "end": 655.8000000000001, "text": " we've got an inner function that just logs it an outer function that defines its own x and calls", "tokens": [51312, 321, 600, 658, 364, 7284, 2445, 300, 445, 20820, 309, 364, 10847, 2445, 300, 23122, 1080, 1065, 2031, 293, 5498, 51524], "temperature": 0.0, "avg_logprob": -0.07861824722977372, "compression_ratio": 1.8835341365461848, "no_speech_prob": 0.0018099927110597491}, {"id": 110, "seek": 63260, "start": 655.8000000000001, "end": 659.88, "text": " the inner function and then we call the outer function so we're going to go x is one call the", "tokens": [51524, 264, 7284, 2445, 293, 550, 321, 818, 264, 10847, 2445, 370, 321, 434, 516, 281, 352, 2031, 307, 472, 818, 264, 51728], "temperature": 0.0, "avg_logprob": -0.07861824722977372, "compression_ratio": 1.8835341365461848, "no_speech_prob": 0.0018099927110597491}, {"id": 111, "seek": 65988, "start": 659.88, "end": 663.88, "text": " outer function go in here create x equals two call it inner function and then echo x", "tokens": [50364, 10847, 2445, 352, 294, 510, 1884, 2031, 6915, 732, 818, 309, 7284, 2445, 293, 550, 14300, 2031, 50564], "temperature": 0.0, "avg_logprob": -0.07573683772768293, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0018674226012080908}, {"id": 112, "seek": 65988, "start": 664.6, "end": 669.24, "text": " press this uh if you play this okay so this actually logs two so what this means is that", "tokens": [50600, 1886, 341, 2232, 498, 291, 862, 341, 1392, 370, 341, 767, 20820, 732, 370, 437, 341, 1355, 307, 300, 50832], "temperature": 0.0, "avg_logprob": -0.07573683772768293, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0018674226012080908}, {"id": 113, "seek": 65988, "start": 670.36, "end": 677.64, "text": " bash does not use static scoping it uses dynamic scoping um dynamic scoping is where you care about", "tokens": [50888, 46183, 775, 406, 764, 13437, 795, 26125, 309, 4960, 8546, 795, 26125, 1105, 8546, 795, 26125, 307, 689, 291, 1127, 466, 51252], "temperature": 0.0, "avg_logprob": -0.07573683772768293, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0018674226012080908}, {"id": 114, "seek": 65988, "start": 677.64, "end": 683.8, "text": " what variables are defined at call time um meaning you know at the time this guy's called", "tokens": [51252, 437, 9102, 366, 7642, 412, 818, 565, 1105, 3620, 291, 458, 412, 264, 565, 341, 2146, 311, 1219, 51560], "temperature": 0.0, "avg_logprob": -0.07573683772768293, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0018674226012080908}, {"id": 115, "seek": 65988, "start": 683.8, "end": 688.76, "text": " we look at okay what's uh what's the value of x so like we're in here we go okay we need the", "tokens": [51560, 321, 574, 412, 1392, 437, 311, 2232, 437, 311, 264, 2158, 295, 2031, 370, 411, 321, 434, 294, 510, 321, 352, 1392, 321, 643, 264, 51808], "temperature": 0.0, "avg_logprob": -0.07573683772768293, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0018674226012080908}, {"id": 116, "seek": 68876, "start": 688.76, "end": 694.84, "text": " value of x instead of looking electrically statically up to whatever was defined at the", "tokens": [50364, 2158, 295, 2031, 2602, 295, 1237, 7072, 984, 2219, 984, 493, 281, 2035, 390, 7642, 412, 264, 50668], "temperature": 0.0, "avg_logprob": -0.06371960723609255, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0007553606410510838}, {"id": 117, "seek": 68876, "start": 694.84, "end": 699.8, "text": " point when this guy was created in which case x would be one we instead say well who called us", "tokens": [50668, 935, 562, 341, 2146, 390, 2942, 294, 597, 1389, 2031, 576, 312, 472, 321, 2602, 584, 731, 567, 1219, 505, 50916], "temperature": 0.0, "avg_logprob": -0.06371960723609255, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0007553606410510838}, {"id": 118, "seek": 68876, "start": 699.8, "end": 704.4399999999999, "text": " okay well we're being called by outer is there an x defined in this scope yes there is okay let's", "tokens": [50916, 1392, 731, 321, 434, 885, 1219, 538, 10847, 307, 456, 364, 2031, 7642, 294, 341, 11923, 2086, 456, 307, 1392, 718, 311, 51148], "temperature": 0.0, "avg_logprob": -0.06371960723609255, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0007553606410510838}, {"id": 119, "seek": 68876, "start": 704.4399999999999, "end": 712.04, "text": " log that so um a diagram that explains this discrepancy would be this so let's assume that", "tokens": [51148, 3565, 300, 370, 1105, 257, 10686, 300, 13948, 341, 2983, 265, 6040, 1344, 576, 312, 341, 370, 718, 311, 6552, 300, 51528], "temperature": 0.0, "avg_logprob": -0.06371960723609255, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0007553606410510838}, {"id": 120, "seek": 68876, "start": 712.04, "end": 717.8, "text": " bash itself had a concept of lexical environments which it doesn't but if it did um then this is", "tokens": [51528, 46183, 2564, 632, 257, 3410, 295, 476, 87, 804, 12388, 597, 309, 1177, 380, 457, 498, 309, 630, 1105, 550, 341, 307, 51816], "temperature": 0.0, "avg_logprob": -0.06371960723609255, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0007553606410510838}, {"id": 121, "seek": 71780, "start": 717.8, "end": 721.3199999999999, "text": " the difference between how the two would operate so in this case we've got out inner function", "tokens": [50364, 264, 2649, 1296, 577, 264, 732, 576, 9651, 370, 294, 341, 1389, 321, 600, 658, 484, 7284, 2445, 50540], "temperature": 0.0, "avg_logprob": -0.08214776624332774, "compression_ratio": 1.7077625570776256, "no_speech_prob": 0.00027801989926956594}, {"id": 122, "seek": 71780, "start": 722.3599999999999, "end": 730.12, "text": " doesn't have an x defined so uh in JavaScript we go well you know somehow we know that um", "tokens": [50592, 1177, 380, 362, 364, 2031, 7642, 370, 2232, 294, 15778, 321, 352, 731, 291, 458, 6063, 321, 458, 300, 1105, 50980], "temperature": 0.0, "avg_logprob": -0.08214776624332774, "compression_ratio": 1.7077625570776256, "no_speech_prob": 0.00027801989926956594}, {"id": 123, "seek": 71780, "start": 731.3199999999999, "end": 735.56, "text": " the uh parent lexical environment it's actually the global environment because when this guy was", "tokens": [51040, 264, 2232, 2596, 476, 87, 804, 2823, 309, 311, 767, 264, 4338, 2823, 570, 562, 341, 2146, 390, 51252], "temperature": 0.0, "avg_logprob": -0.08214776624332774, "compression_ratio": 1.7077625570776256, "no_speech_prob": 0.00027801989926956594}, {"id": 124, "seek": 71780, "start": 735.56, "end": 743.9599999999999, "text": " defined uh i'm just gonna go back when this guy was defined it was uh lexically in scope here", "tokens": [51252, 7642, 2232, 741, 478, 445, 799, 352, 646, 562, 341, 2146, 390, 7642, 309, 390, 2232, 476, 87, 984, 294, 11923, 510, 51672], "temperature": 0.0, "avg_logprob": -0.08214776624332774, "compression_ratio": 1.7077625570776256, "no_speech_prob": 0.00027801989926956594}, {"id": 125, "seek": 74396, "start": 743.96, "end": 749.4000000000001, "text": " this you know we didn't care about the outer function at the point this was created um so we", "tokens": [50364, 341, 291, 458, 321, 994, 380, 1127, 466, 264, 10847, 2445, 412, 264, 935, 341, 390, 2942, 1105, 370, 321, 50636], "temperature": 0.0, "avg_logprob": -0.08561401152878664, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.002980694407597184}, {"id": 126, "seek": 74396, "start": 749.4000000000001, "end": 755.8000000000001, "text": " go here and find x is one and we log that on the other hand bash just follows the actual stack frame", "tokens": [50636, 352, 510, 293, 915, 2031, 307, 472, 293, 321, 3565, 300, 322, 264, 661, 1011, 46183, 445, 10002, 264, 3539, 8630, 3920, 50956], "temperature": 0.0, "avg_logprob": -0.08561401152878664, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.002980694407597184}, {"id": 127, "seek": 74396, "start": 755.8000000000001, "end": 760.6, "text": " so it goes okay nothing's defined here okay what about the guy that called me oh it is defined", "tokens": [50956, 370, 309, 1709, 1392, 1825, 311, 7642, 510, 1392, 437, 466, 264, 2146, 300, 1219, 385, 1954, 309, 307, 7642, 51196], "temperature": 0.0, "avg_logprob": -0.08561401152878664, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.002980694407597184}, {"id": 128, "seek": 74396, "start": 760.6, "end": 767.1600000000001, "text": " there okay well i'll return that so um different languages have different approaches to this so", "tokens": [51196, 456, 1392, 731, 741, 603, 2736, 300, 370, 1105, 819, 8650, 362, 819, 11587, 281, 341, 370, 51524], "temperature": 0.0, "avg_logprob": -0.08561401152878664, "compression_ratio": 1.761467889908257, "no_speech_prob": 0.002980694407597184}, {"id": 129, "seek": 76716, "start": 767.24, "end": 773.88, "text": " for example in pearl you can have both dynamic or static scoping depending on how you uh declare", "tokens": [50368, 337, 1365, 294, 20287, 291, 393, 362, 1293, 8546, 420, 13437, 795, 26125, 5413, 322, 577, 291, 2232, 19710, 50700], "temperature": 0.0, "avg_logprob": -0.06675413508474091, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.006903333589434624}, {"id": 130, "seek": 76716, "start": 773.88, "end": 779.88, "text": " your variables um they've got different benefits for different use cases but generally it's", "tokens": [50700, 428, 9102, 1105, 436, 600, 658, 819, 5311, 337, 819, 764, 3331, 457, 5101, 309, 311, 51000], "temperature": 0.0, "avg_logprob": -0.06675413508474091, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.006903333589434624}, {"id": 131, "seek": 76716, "start": 779.88, "end": 785.0, "text": " considered that static scoping is superior because it enables uh there are a few reasons", "tokens": [51000, 4888, 300, 13437, 795, 26125, 307, 13028, 570, 309, 17077, 2232, 456, 366, 257, 1326, 4112, 51256], "temperature": 0.0, "avg_logprob": -0.06675413508474091, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.006903333589434624}, {"id": 132, "seek": 76716, "start": 785.0, "end": 793.0, "text": " one of which is you can more easily reason about how a function will behave so for example in this", "tokens": [51256, 472, 295, 597, 307, 291, 393, 544, 3612, 1778, 466, 577, 257, 2445, 486, 15158, 370, 337, 1365, 294, 341, 51656], "temperature": 0.0, "avg_logprob": -0.06675413508474091, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.006903333589434624}, {"id": 133, "seek": 79300, "start": 793.0, "end": 797.72, "text": " case i don't need to care about you know once i've defined this function i know that this guy's", "tokens": [50364, 1389, 741, 500, 380, 643, 281, 1127, 466, 291, 458, 1564, 741, 600, 7642, 341, 2445, 741, 458, 300, 341, 2146, 311, 50600], "temperature": 0.0, "avg_logprob": -0.07079197620523386, "compression_ratio": 1.9831932773109244, "no_speech_prob": 0.007576223462820053}, {"id": 134, "seek": 79300, "start": 797.72, "end": 802.12, "text": " in scope and so it's referencing that i don't need to worry about whether in some other file", "tokens": [50600, 294, 11923, 293, 370, 309, 311, 40582, 300, 741, 500, 380, 643, 281, 3292, 466, 1968, 294, 512, 661, 3991, 50820], "temperature": 0.0, "avg_logprob": -0.07079197620523386, "compression_ratio": 1.9831932773109244, "no_speech_prob": 0.007576223462820053}, {"id": 135, "seek": 79300, "start": 802.12, "end": 810.84, "text": " some other function is calling me and um it defines x in its own weird way so to understand", "tokens": [50820, 512, 661, 2445, 307, 5141, 385, 293, 1105, 309, 23122, 2031, 294, 1080, 1065, 3657, 636, 370, 281, 1223, 51256], "temperature": 0.0, "avg_logprob": -0.07079197620523386, "compression_ratio": 1.9831932773109244, "no_speech_prob": 0.007576223462820053}, {"id": 136, "seek": 79300, "start": 810.84, "end": 815.4, "text": " how a single function will work all i need to do is look at the page or look at the files defined", "tokens": [51256, 577, 257, 2167, 2445, 486, 589, 439, 741, 643, 281, 360, 307, 574, 412, 264, 3028, 420, 574, 412, 264, 7098, 7642, 51484], "temperature": 0.0, "avg_logprob": -0.07079197620523386, "compression_ratio": 1.9831932773109244, "no_speech_prob": 0.007576223462820053}, {"id": 137, "seek": 79300, "start": 815.4, "end": 820.2, "text": " and look at the scope it's defined in and i'll understand um with dynamic scoping you need to", "tokens": [51484, 293, 574, 412, 264, 11923, 309, 311, 7642, 294, 293, 741, 603, 1223, 1105, 365, 8546, 795, 26125, 291, 643, 281, 51724], "temperature": 0.0, "avg_logprob": -0.07079197620523386, "compression_ratio": 1.9831932773109244, "no_speech_prob": 0.007576223462820053}, {"id": 138, "seek": 82020, "start": 820.2, "end": 825.5600000000001, "text": " think about all the permutations and understand you know who knows what variables could be set", "tokens": [50364, 519, 466, 439, 264, 4784, 325, 763, 293, 1223, 291, 458, 567, 3255, 437, 9102, 727, 312, 992, 50632], "temperature": 0.0, "avg_logprob": -0.05042408252584523, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.006486672442406416}, {"id": 139, "seek": 82020, "start": 825.5600000000001, "end": 832.9200000000001, "text": " when i'm being called by some random outer function um dynamic scoping does have uh one benefit", "tokens": [50632, 562, 741, 478, 885, 1219, 538, 512, 4974, 10847, 2445, 1105, 8546, 795, 26125, 775, 362, 2232, 472, 5121, 51000], "temperature": 0.0, "avg_logprob": -0.05042408252584523, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.006486672442406416}, {"id": 140, "seek": 82020, "start": 832.9200000000001, "end": 839.6400000000001, "text": " which is that you um don't need to worry about storing variables on the heap so you know assuming", "tokens": [51000, 597, 307, 300, 291, 1105, 500, 380, 643, 281, 3292, 466, 26085, 9102, 322, 264, 33591, 370, 291, 458, 11926, 51336], "temperature": 0.0, "avg_logprob": -0.05042408252584523, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.006486672442406416}, {"id": 141, "seek": 82020, "start": 839.6400000000001, "end": 844.12, "text": " we're talking about primitives like booleans and integers you can just keep everything on the stack", "tokens": [51336, 321, 434, 1417, 466, 2886, 38970, 411, 748, 4812, 599, 293, 41674, 291, 393, 445, 1066, 1203, 322, 264, 8630, 51560], "temperature": 0.0, "avg_logprob": -0.05042408252584523, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.006486672442406416}, {"id": 142, "seek": 84412, "start": 844.12, "end": 850.76, "text": " here and as soon as you're done with the function you just you know drop down the stack pointer", "tokens": [50364, 510, 293, 382, 2321, 382, 291, 434, 1096, 365, 264, 2445, 291, 445, 291, 458, 3270, 760, 264, 8630, 23918, 50696], "temperature": 0.0, "avg_logprob": -0.0500146805703103, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.01590324565768242}, {"id": 143, "seek": 84412, "start": 850.76, "end": 855.48, "text": " throughout the memory when you put a new when you enter a new function you put a new stack frame on", "tokens": [50696, 3710, 264, 4675, 562, 291, 829, 257, 777, 562, 291, 3242, 257, 777, 2445, 291, 829, 257, 777, 8630, 3920, 322, 50932], "temperature": 0.0, "avg_logprob": -0.0500146805703103, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.01590324565768242}, {"id": 144, "seek": 84412, "start": 855.48, "end": 861.5600000000001, "text": " the stack move the pointer up again and uh basically you know whenever you need to look for a variable", "tokens": [50932, 264, 8630, 1286, 264, 23918, 493, 797, 293, 2232, 1936, 291, 458, 5699, 291, 643, 281, 574, 337, 257, 7006, 51236], "temperature": 0.0, "avg_logprob": -0.0500146805703103, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.01590324565768242}, {"id": 145, "seek": 84412, "start": 861.5600000000001, "end": 867.24, "text": " you just look down the stack until you find it um in JavaScript we need to kind of have some", "tokens": [51236, 291, 445, 574, 760, 264, 8630, 1826, 291, 915, 309, 1105, 294, 15778, 321, 643, 281, 733, 295, 362, 512, 51520], "temperature": 0.0, "avg_logprob": -0.0500146805703103, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.01590324565768242}, {"id": 146, "seek": 84412, "start": 867.24, "end": 872.6800000000001, "text": " additional uh metadata that we hold on to for example to say that you know this inner function", "tokens": [51520, 4497, 2232, 26603, 300, 321, 1797, 322, 281, 337, 1365, 281, 584, 300, 291, 458, 341, 7284, 2445, 51792], "temperature": 0.0, "avg_logprob": -0.0500146805703103, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.01590324565768242}, {"id": 147, "seek": 87268, "start": 872.68, "end": 878.28, "text": " was really defined with this guy in scope we don't you know at the time we didn't care about the", "tokens": [50364, 390, 534, 7642, 365, 341, 2146, 294, 11923, 321, 500, 380, 291, 458, 412, 264, 565, 321, 994, 380, 1127, 466, 264, 50644], "temperature": 0.0, "avg_logprob": -0.053003948613217, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0008040228858590126}, {"id": 148, "seek": 87268, "start": 878.28, "end": 883.0799999999999, "text": " outer function so we need to skip this guy because we've been static scoping you know the fact we", "tokens": [50644, 10847, 2445, 370, 321, 643, 281, 10023, 341, 2146, 570, 321, 600, 668, 13437, 795, 26125, 291, 458, 264, 1186, 321, 50884], "temperature": 0.0, "avg_logprob": -0.053003948613217, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0008040228858590126}, {"id": 149, "seek": 87268, "start": 883.0799999999999, "end": 887.3199999999999, "text": " have to store those kinds of references means we can't do it all on the stack it's not as simple as", "tokens": [50884, 362, 281, 3531, 729, 3685, 295, 15400, 1355, 321, 393, 380, 360, 309, 439, 322, 264, 8630, 309, 311, 406, 382, 2199, 382, 51096], "temperature": 0.0, "avg_logprob": -0.053003948613217, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0008040228858590126}, {"id": 150, "seek": 87268, "start": 887.3199999999999, "end": 897.16, "text": " just looking from top to bottom um but let's continue so there is another way in which static", "tokens": [51096, 445, 1237, 490, 1192, 281, 2767, 1105, 457, 718, 311, 2354, 370, 456, 307, 1071, 636, 294, 597, 13437, 51588], "temperature": 0.0, "avg_logprob": -0.053003948613217, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.0008040228858590126}, {"id": 151, "seek": 89716, "start": 897.16, "end": 905.9599999999999, "text": " scoping um helps us and that is in how closures work so uh a closure it kind of has two definitions", "tokens": [50364, 795, 26125, 1105, 3665, 505, 293, 300, 307, 294, 577, 2611, 1303, 589, 370, 2232, 257, 24653, 309, 733, 295, 575, 732, 21988, 50804], "temperature": 0.0, "avg_logprob": -0.06681920181621205, "compression_ratio": 1.8695652173913044, "no_speech_prob": 0.02368011698126793}, {"id": 152, "seek": 89716, "start": 905.9599999999999, "end": 914.28, "text": " the first definition of closure is a function that is paired with um a uh it's paired with this", "tokens": [50804, 264, 700, 7123, 295, 24653, 307, 257, 2445, 300, 307, 25699, 365, 1105, 257, 2232, 309, 311, 25699, 365, 341, 51220], "temperature": 0.0, "avg_logprob": -0.06681920181621205, "compression_ratio": 1.8695652173913044, "no_speech_prob": 0.02368011698126793}, {"id": 153, "seek": 89716, "start": 914.28, "end": 919.48, "text": " environment so it's a function the client has knowledge about where it was for example created", "tokens": [51220, 2823, 370, 309, 311, 257, 2445, 264, 6423, 575, 3601, 466, 689, 309, 390, 337, 1365, 2942, 51480], "temperature": 0.0, "avg_logprob": -0.06681920181621205, "compression_ratio": 1.8695652173913044, "no_speech_prob": 0.02368011698126793}, {"id": 154, "seek": 89716, "start": 919.48, "end": 923.9599999999999, "text": " and what variables were in scope at that point um there's another definition of closure which is", "tokens": [51480, 293, 437, 9102, 645, 294, 11923, 412, 300, 935, 1105, 456, 311, 1071, 7123, 295, 24653, 597, 307, 51704], "temperature": 0.0, "avg_logprob": -0.06681920181621205, "compression_ratio": 1.8695652173913044, "no_speech_prob": 0.02368011698126793}, {"id": 155, "seek": 92396, "start": 923.96, "end": 927.72, "text": " just referring to the environment part like you know the closure is just the things that are", "tokens": [50364, 445, 13761, 281, 264, 2823, 644, 411, 291, 458, 264, 24653, 307, 445, 264, 721, 300, 366, 50552], "temperature": 0.0, "avg_logprob": -0.08418459211077009, "compression_ratio": 1.924, "no_speech_prob": 0.0018100132001563907}, {"id": 156, "seek": 92396, "start": 927.72, "end": 933.88, "text": " captured the variables are captured so the two are kind of used interchangeably um but uh that", "tokens": [50552, 11828, 264, 9102, 366, 11828, 370, 264, 732, 366, 733, 295, 1143, 30358, 1188, 1105, 457, 2232, 300, 50860], "temperature": 0.0, "avg_logprob": -0.08418459211077009, "compression_ratio": 1.924, "no_speech_prob": 0.0018100132001563907}, {"id": 157, "seek": 92396, "start": 933.88, "end": 940.6, "text": " effectively referring to the same concept um so uh in this case we have a function we we define x", "tokens": [50860, 8659, 13761, 281, 264, 912, 3410, 1105, 370, 2232, 294, 341, 1389, 321, 362, 257, 2445, 321, 321, 6964, 2031, 51196], "temperature": 0.0, "avg_logprob": -0.08418459211077009, "compression_ratio": 1.924, "no_speech_prob": 0.0018100132001563907}, {"id": 158, "seek": 92396, "start": 940.6, "end": 946.9200000000001, "text": " and we have an outer function now um that defines an inner function internally um outer has its own", "tokens": [51196, 293, 321, 362, 364, 10847, 2445, 586, 1105, 300, 23122, 364, 7284, 2445, 19501, 1105, 10847, 575, 1080, 1065, 51512], "temperature": 0.0, "avg_logprob": -0.08418459211077009, "compression_ratio": 1.924, "no_speech_prob": 0.0018100132001563907}, {"id": 159, "seek": 92396, "start": 946.9200000000001, "end": 951.96, "text": " x whose value is two and uh what happens here is the outer actually returns inner so it returns", "tokens": [51512, 2031, 6104, 2158, 307, 732, 293, 2232, 437, 2314, 510, 307, 264, 10847, 767, 11247, 7284, 370, 309, 11247, 51764], "temperature": 0.0, "avg_logprob": -0.08418459211077009, "compression_ratio": 1.924, "no_speech_prob": 0.0018100132001563907}, {"id": 160, "seek": 95196, "start": 951.96, "end": 957.96, "text": " a function so in javascript functions are first class which means that you can um pass them in", "tokens": [50364, 257, 2445, 370, 294, 361, 37331, 5944, 6828, 366, 700, 1508, 597, 1355, 300, 291, 393, 1105, 1320, 552, 294, 50664], "temperature": 0.0, "avg_logprob": -0.11476764508656093, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.001098616048693657}, {"id": 161, "seek": 95196, "start": 957.96, "end": 962.2800000000001, "text": " as arguments to functions and you can also return them from functions so you can treat them like", "tokens": [50664, 382, 12869, 281, 6828, 293, 291, 393, 611, 2736, 552, 490, 6828, 370, 291, 393, 2387, 552, 411, 50880], "temperature": 0.0, "avg_logprob": -0.11476764508656093, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.001098616048693657}, {"id": 162, "seek": 95196, "start": 962.2800000000001, "end": 969.72, "text": " any other variable um so what's happening here is we're actually uh capturing this uh x value", "tokens": [50880, 604, 661, 7006, 1105, 370, 437, 311, 2737, 510, 307, 321, 434, 767, 2232, 23384, 341, 2232, 2031, 2158, 51252], "temperature": 0.0, "avg_logprob": -0.11476764508656093, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.001098616048693657}, {"id": 163, "seek": 95196, "start": 969.72, "end": 974.2800000000001, "text": " here and we're capturing this one because lecicle scoping says that we first look at you know what's", "tokens": [51252, 510, 293, 321, 434, 23384, 341, 472, 570, 476, 66, 3520, 795, 26125, 1619, 300, 321, 700, 574, 412, 291, 458, 437, 311, 51480], "temperature": 0.0, "avg_logprob": -0.11476764508656093, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.001098616048693657}, {"id": 164, "seek": 95196, "start": 974.2800000000001, "end": 979.72, "text": " the now immediate scope here all the values x okay well we'll just capture that guy um we return", "tokens": [51480, 264, 586, 11629, 11923, 510, 439, 264, 4190, 2031, 1392, 731, 321, 603, 445, 7983, 300, 2146, 1105, 321, 2736, 51752], "temperature": 0.0, "avg_logprob": -0.11476764508656093, "compression_ratio": 1.9090909090909092, "no_speech_prob": 0.001098616048693657}, {"id": 165, "seek": 97972, "start": 979.72, "end": 986.36, "text": " the inner function and then we assign that to this variable foo so we call it outer it returns", "tokens": [50364, 264, 7284, 2445, 293, 550, 321, 6269, 300, 281, 341, 7006, 726, 78, 370, 321, 818, 309, 10847, 309, 11247, 50696], "temperature": 0.0, "avg_logprob": -0.08505363580657214, "compression_ratio": 1.8192090395480225, "no_speech_prob": 0.001810007612220943}, {"id": 166, "seek": 97972, "start": 986.36, "end": 990.76, "text": " inner so now foo's value is inner then we call foo which is the same as calling our inner function", "tokens": [50696, 7284, 370, 586, 726, 78, 311, 2158, 307, 7284, 550, 321, 818, 726, 78, 597, 307, 264, 912, 382, 5141, 527, 7284, 2445, 50916], "temperature": 0.0, "avg_logprob": -0.08505363580657214, "compression_ratio": 1.8192090395480225, "no_speech_prob": 0.001810007612220943}, {"id": 167, "seek": 97972, "start": 992.0400000000001, "end": 994.76, "text": " and the question is what does it log so if you run this", "tokens": [50980, 293, 264, 1168, 307, 437, 775, 309, 3565, 370, 498, 291, 1190, 341, 51116], "temperature": 0.0, "avg_logprob": -0.08505363580657214, "compression_ratio": 1.8192090395480225, "no_speech_prob": 0.001810007612220943}, {"id": 168, "seek": 97972, "start": 1000.12, "end": 1005.72, "text": " we log the value of two so um okay what's interesting about this is that", "tokens": [51384, 321, 3565, 264, 2158, 295, 732, 370, 1105, 1392, 437, 311, 1880, 466, 341, 307, 300, 51664], "temperature": 0.0, "avg_logprob": -0.08505363580657214, "compression_ratio": 1.8192090395480225, "no_speech_prob": 0.001810007612220943}, {"id": 169, "seek": 100572, "start": 1006.44, "end": 1013.24, "text": " that this variable two which is defining that outer function um really has no reason to exist", "tokens": [50400, 300, 341, 7006, 732, 597, 307, 17827, 300, 10847, 2445, 1105, 534, 575, 572, 1778, 281, 2514, 50740], "temperature": 0.0, "avg_logprob": -0.1440717101097107, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0009109877864830196}, {"id": 170, "seek": 100572, "start": 1013.96, "end": 1020.76, "text": " after we uh leave the called outer if not for our inner function we're trying to", "tokens": [50776, 934, 321, 2232, 1856, 264, 1219, 10847, 498, 406, 337, 527, 7284, 2445, 321, 434, 1382, 281, 51116], "temperature": 0.0, "avg_logprob": -0.1440717101097107, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0009109877864830196}, {"id": 171, "seek": 100572, "start": 1020.76, "end": 1027.4, "text": " capture that variable so I say capture another word will be close over the reason it's called", "tokens": [51116, 7983, 300, 7006, 370, 286, 584, 7983, 1071, 1349, 486, 312, 1998, 670, 264, 1778, 309, 311, 1219, 51448], "temperature": 0.0, "avg_logprob": -0.1440717101097107, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0009109877864830196}, {"id": 172, "seek": 100572, "start": 1027.4, "end": 1032.92, "text": " capture is because we need to hold on to this thing after the lifetime of that outer function", "tokens": [51448, 7983, 307, 570, 321, 643, 281, 1797, 322, 281, 341, 551, 934, 264, 11364, 295, 300, 10847, 2445, 51724], "temperature": 0.0, "avg_logprob": -0.1440717101097107, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0009109877864830196}, {"id": 173, "seek": 103292, "start": 1033.88, "end": 1037.48, "text": " so if we for example we're just storing everything on the stack here", "tokens": [50412, 370, 498, 321, 337, 1365, 321, 434, 445, 26085, 1203, 322, 264, 8630, 510, 50592], "temperature": 0.0, "avg_logprob": -0.0747876110531035, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.0010986773995682597}, {"id": 174, "seek": 103292, "start": 1038.04, "end": 1043.88, "text": " we'd have our outer function we'd have our inner function we'd have uh x equals two happening here", "tokens": [50620, 321, 1116, 362, 527, 10847, 2445, 321, 1116, 362, 527, 7284, 2445, 321, 1116, 362, 2232, 2031, 6915, 732, 2737, 510, 50912], "temperature": 0.0, "avg_logprob": -0.0747876110531035, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.0010986773995682597}, {"id": 175, "seek": 103292, "start": 1044.52, "end": 1049.88, "text": " and uh we'd eventually have to pop off the stack and get back to our global execution", "tokens": [50944, 293, 2232, 321, 1116, 4728, 362, 281, 1665, 766, 264, 8630, 293, 483, 646, 281, 527, 4338, 15058, 51212], "temperature": 0.0, "avg_logprob": -0.0747876110531035, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.0010986773995682597}, {"id": 176, "seek": 103292, "start": 1049.88, "end": 1056.1200000000001, "text": " context for me down here but once we want to then call our inner function again um we need to have", "tokens": [51212, 4319, 337, 385, 760, 510, 457, 1564, 321, 528, 281, 550, 818, 527, 7284, 2445, 797, 1105, 321, 643, 281, 362, 51524], "temperature": 0.0, "avg_logprob": -0.0747876110531035, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.0010986773995682597}, {"id": 177, "seek": 105612, "start": 1056.12, "end": 1062.9199999999998, "text": " some way of saying of keeping track of the fact that it uh has this variable x equals two which", "tokens": [50364, 512, 636, 295, 1566, 295, 5145, 2837, 295, 264, 1186, 300, 309, 2232, 575, 341, 7006, 2031, 6915, 732, 597, 50704], "temperature": 0.0, "avg_logprob": -0.09771756692366167, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.015423559583723545}, {"id": 178, "seek": 105612, "start": 1062.9199999999998, "end": 1072.12, "text": " isn't actually defined in its scope so um let me grab this diagram so what's happening here is that", "tokens": [50704, 1943, 380, 767, 7642, 294, 1080, 11923, 370, 1105, 718, 385, 4444, 341, 10686, 370, 437, 311, 2737, 510, 307, 300, 51164], "temperature": 0.0, "avg_logprob": -0.09771756692366167, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.015423559583723545}, {"id": 179, "seek": 105612, "start": 1072.12, "end": 1077.56, "text": " by the time we get to foo which is really just a variable pointing it out inner function um", "tokens": [51164, 538, 264, 565, 321, 483, 281, 726, 78, 597, 307, 534, 445, 257, 7006, 12166, 309, 484, 7284, 2445, 1105, 51436], "temperature": 0.0, "avg_logprob": -0.09771756692366167, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.015423559583723545}, {"id": 180, "seek": 105612, "start": 1077.56, "end": 1081.9599999999998, "text": " it has nothing to find in the statistical environment and because we use stack scoping it", "tokens": [51436, 309, 575, 1825, 281, 915, 294, 264, 22820, 2823, 293, 570, 321, 764, 8630, 795, 26125, 309, 51656], "temperature": 0.0, "avg_logprob": -0.09771756692366167, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.015423559583723545}, {"id": 181, "seek": 108196, "start": 1081.96, "end": 1086.92, "text": " just so happens that this uh function contained a reference to the electrical environment", "tokens": [50364, 445, 370, 2314, 300, 341, 2232, 2445, 16212, 257, 6408, 281, 264, 12147, 2823, 50612], "temperature": 0.0, "avg_logprob": -0.10052005375657126, "compression_ratio": 1.8991935483870968, "no_speech_prob": 0.00015355736832134426}, {"id": 182, "seek": 108196, "start": 1087.88, "end": 1093.88, "text": " of the outer function uh where x equals two and so we can say okay x equals two uh obviously that", "tokens": [50660, 295, 264, 10847, 2445, 2232, 689, 2031, 6915, 732, 293, 370, 321, 393, 584, 1392, 2031, 6915, 732, 2232, 2745, 300, 50960], "temperature": 0.0, "avg_logprob": -0.10052005375657126, "compression_ratio": 1.8991935483870968, "no_speech_prob": 0.00015355736832134426}, {"id": 183, "seek": 108196, "start": 1093.88, "end": 1098.1200000000001, "text": " also close to the global environment record now if we were if we were using dynamic scoping", "tokens": [50960, 611, 1998, 281, 264, 4338, 2823, 2136, 586, 498, 321, 645, 498, 321, 645, 1228, 8546, 795, 26125, 51172], "temperature": 0.0, "avg_logprob": -0.10052005375657126, "compression_ratio": 1.8991935483870968, "no_speech_prob": 0.00015355736832134426}, {"id": 184, "seek": 108196, "start": 1099.32, "end": 1104.44, "text": " what would happen here uh effectively we have a foo function here we'd be calling it in the", "tokens": [51232, 437, 576, 1051, 510, 2232, 8659, 321, 362, 257, 726, 78, 2445, 510, 321, 1116, 312, 5141, 309, 294, 264, 51488], "temperature": 0.0, "avg_logprob": -0.10052005375657126, "compression_ratio": 1.8991935483870968, "no_speech_prob": 0.00015355736832134426}, {"id": 185, "seek": 108196, "start": 1104.44, "end": 1110.8400000000001, "text": " global context meaning this guy is in scope and the this guy is not and we'd be going console log x", "tokens": [51488, 4338, 4319, 3620, 341, 2146, 307, 294, 11923, 293, 264, 341, 2146, 307, 406, 293, 321, 1116, 312, 516, 11076, 3565, 2031, 51808], "temperature": 0.0, "avg_logprob": -0.10052005375657126, "compression_ratio": 1.8991935483870968, "no_speech_prob": 0.00015355736832134426}, {"id": 186, "seek": 111084, "start": 1110.84, "end": 1115.1599999999999, "text": " and we just look down the call stack so foo we don't have it global context we do have it the", "tokens": [50364, 293, 321, 445, 574, 760, 264, 818, 8630, 370, 726, 78, 321, 500, 380, 362, 309, 4338, 4319, 321, 360, 362, 309, 264, 50580], "temperature": 0.0, "avg_logprob": -0.06978036044688707, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0015485994517803192}, {"id": 187, "seek": 111084, "start": 1115.1599999999999, "end": 1122.84, "text": " value is one um so we'll return one so um effectively dynamic scoping does not support", "tokens": [50580, 2158, 307, 472, 1105, 370, 321, 603, 2736, 472, 370, 1105, 8659, 8546, 795, 26125, 775, 406, 1406, 50964], "temperature": 0.0, "avg_logprob": -0.06978036044688707, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0015485994517803192}, {"id": 188, "seek": 111084, "start": 1122.84, "end": 1129.48, "text": " closures uh unlike static scoping which will allow you to kind of store these guys in memory", "tokens": [50964, 2611, 1303, 2232, 8343, 13437, 795, 26125, 597, 486, 2089, 291, 281, 733, 295, 3531, 613, 1074, 294, 4675, 51296], "temperature": 0.0, "avg_logprob": -0.06978036044688707, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0015485994517803192}, {"id": 189, "seek": 111084, "start": 1129.48, "end": 1136.4399999999998, "text": " somehow and then later on you can access those uh variables and change them or just read from them", "tokens": [51296, 6063, 293, 550, 1780, 322, 291, 393, 2105, 729, 2232, 9102, 293, 1319, 552, 420, 445, 1401, 490, 552, 51644], "temperature": 0.0, "avg_logprob": -0.06978036044688707, "compression_ratio": 1.6460176991150441, "no_speech_prob": 0.0015485994517803192}, {"id": 190, "seek": 113644, "start": 1137.4, "end": 1142.52, "text": " um so i'm just gonna start this again just as we can see what's actually happening here so", "tokens": [50412, 1105, 370, 741, 478, 445, 799, 722, 341, 797, 445, 382, 321, 393, 536, 437, 311, 767, 2737, 510, 370, 50668], "temperature": 0.0, "avg_logprob": -0.12265690697564019, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.0019568540155887604}, {"id": 191, "seek": 113644, "start": 1143.72, "end": 1149.16, "text": " our foo function is has some scopes and we've got a closure here so it closes up x", "tokens": [50728, 527, 726, 78, 2445, 307, 575, 512, 795, 30545, 293, 321, 600, 658, 257, 24653, 510, 370, 309, 24157, 493, 2031, 51000], "temperature": 0.0, "avg_logprob": -0.12265690697564019, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.0019568540155887604}, {"id": 192, "seek": 113644, "start": 1150.68, "end": 1155.24, "text": " then the next one up we've got our script for which x equals one and then the global object so these", "tokens": [51076, 550, 264, 958, 472, 493, 321, 600, 658, 527, 5755, 337, 597, 2031, 6915, 472, 293, 550, 264, 4338, 2657, 370, 613, 51304], "temperature": 0.0, "avg_logprob": -0.12265690697564019, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.0019568540155887604}, {"id": 193, "seek": 113644, "start": 1155.24, "end": 1159.64, "text": " two guys are kind of two parts of the composite environment record that happen in the global", "tokens": [51304, 732, 1074, 366, 733, 295, 732, 3166, 295, 264, 25557, 2823, 2136, 300, 1051, 294, 264, 4338, 51524], "temperature": 0.0, "avg_logprob": -0.12265690697564019, "compression_ratio": 1.7149532710280373, "no_speech_prob": 0.0019568540155887604}, {"id": 194, "seek": 115964, "start": 1159.64, "end": 1166.92, "text": " execution context um so it's kind of interesting and if i go in here it's effectively the same", "tokens": [50364, 15058, 4319, 1105, 370, 309, 311, 733, 295, 1880, 293, 498, 741, 352, 294, 510, 309, 311, 8659, 264, 912, 50728], "temperature": 0.0, "avg_logprob": -0.10437147804860318, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.006003175862133503}, {"id": 195, "seek": 115964, "start": 1166.92, "end": 1172.5200000000002, "text": " thing we have this uh well in this scope here actually now forget about function so just in", "tokens": [50728, 551, 321, 362, 341, 2232, 731, 294, 341, 11923, 510, 767, 586, 2870, 466, 2445, 370, 445, 294, 51008], "temperature": 0.0, "avg_logprob": -0.10437147804860318, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.006003175862133503}, {"id": 196, "seek": 115964, "start": 1172.5200000000002, "end": 1177.0800000000002, "text": " this scope um we're trying to console log this thing but access to this closure which we're saying", "tokens": [51008, 341, 11923, 1105, 321, 434, 1382, 281, 11076, 3565, 341, 551, 457, 2105, 281, 341, 24653, 597, 321, 434, 1566, 51236], "temperature": 0.0, "avg_logprob": -0.10437147804860318, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.006003175862133503}, {"id": 197, "seek": 115964, "start": 1177.0800000000002, "end": 1185.4, "text": " x equals two that's pretty cool um now uh let's look a little bit deeper into how for example", "tokens": [51236, 2031, 6915, 732, 300, 311, 1238, 1627, 1105, 586, 2232, 718, 311, 574, 257, 707, 857, 7731, 666, 577, 337, 1365, 51652], "temperature": 0.0, "avg_logprob": -0.10437147804860318, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.006003175862133503}, {"id": 198, "seek": 118540, "start": 1185.48, "end": 1193.48, "text": " chrome which uses the v8 engine uh the javascript uh actually goes about uh creating these closures", "tokens": [50368, 33120, 597, 4960, 264, 371, 23, 2848, 2232, 264, 361, 37331, 5944, 2232, 767, 1709, 466, 2232, 4084, 613, 2611, 1303, 50768], "temperature": 0.0, "avg_logprob": -0.14706186718410916, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.0034829445648938417}, {"id": 199, "seek": 118540, "start": 1194.6000000000001, "end": 1200.44, "text": " now this is where we kind of diverge in terms of uh what ecma script says we should be doing", "tokens": [50824, 586, 341, 307, 689, 321, 733, 295, 18558, 432, 294, 2115, 295, 2232, 437, 11437, 1696, 5755, 1619, 321, 820, 312, 884, 51116], "temperature": 0.0, "avg_logprob": -0.14706186718410916, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.0034829445648938417}, {"id": 200, "seek": 118540, "start": 1201.0, "end": 1207.4, "text": " or what it's specifying and how the ecma script is actually implemented so ecma script is the", "tokens": [51144, 420, 437, 309, 311, 1608, 5489, 293, 577, 264, 11437, 1696, 5755, 307, 767, 12270, 370, 11437, 1696, 5755, 307, 264, 51464], "temperature": 0.0, "avg_logprob": -0.14706186718410916, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.0034829445648938417}, {"id": 201, "seek": 118540, "start": 1207.4, "end": 1214.2, "text": " specification for the javascript language and um different browsers and for example node would", "tokens": [51464, 31256, 337, 264, 361, 37331, 5944, 2856, 293, 1105, 819, 36069, 293, 337, 1365, 9984, 576, 51804], "temperature": 0.0, "avg_logprob": -0.14706186718410916, "compression_ratio": 1.7477064220183487, "no_speech_prob": 0.0034829445648938417}, {"id": 202, "seek": 121420, "start": 1214.2, "end": 1218.44, "text": " have their own implementations so for example the v8 engine that chrome uses is written in c plus", "tokens": [50364, 362, 641, 1065, 4445, 763, 370, 337, 1365, 264, 371, 23, 2848, 300, 33120, 4960, 307, 3720, 294, 269, 1804, 50576], "temperature": 0.0, "avg_logprob": -0.05671072424503795, "compression_ratio": 1.7601476014760147, "no_speech_prob": 0.0012841918505728245}, {"id": 203, "seek": 121420, "start": 1218.44, "end": 1224.52, "text": " plus and it kind of compiles javascript on the fly while it runs it and tries to optimize things", "tokens": [50576, 1804, 293, 309, 733, 295, 715, 4680, 361, 37331, 5944, 322, 264, 3603, 1339, 309, 6676, 309, 293, 9898, 281, 19719, 721, 50880], "temperature": 0.0, "avg_logprob": -0.05671072424503795, "compression_ratio": 1.7601476014760147, "no_speech_prob": 0.0012841918505728245}, {"id": 204, "seek": 121420, "start": 1224.52, "end": 1232.1200000000001, "text": " as it goes um but as you can imagine the ecma script approach is a little bit um flawed so", "tokens": [50880, 382, 309, 1709, 1105, 457, 382, 291, 393, 3811, 264, 11437, 1696, 5755, 3109, 307, 257, 707, 857, 1105, 38823, 370, 51260], "temperature": 0.0, "avg_logprob": -0.05671072424503795, "compression_ratio": 1.7601476014760147, "no_speech_prob": 0.0012841918505728245}, {"id": 205, "seek": 121420, "start": 1232.92, "end": 1237.64, "text": " you know if you have a bunch of variables defined in a function and only one of them gets captured", "tokens": [51300, 291, 458, 498, 291, 362, 257, 3840, 295, 9102, 7642, 294, 257, 2445, 293, 787, 472, 295, 552, 2170, 11828, 51536], "temperature": 0.0, "avg_logprob": -0.05671072424503795, "compression_ratio": 1.7601476014760147, "no_speech_prob": 0.0012841918505728245}, {"id": 206, "seek": 121420, "start": 1237.64, "end": 1241.72, "text": " by an inner function and then you return from the outer function you don't really want to be", "tokens": [51536, 538, 364, 7284, 2445, 293, 550, 291, 2736, 490, 264, 10847, 2445, 291, 500, 380, 534, 528, 281, 312, 51740], "temperature": 0.0, "avg_logprob": -0.05671072424503795, "compression_ratio": 1.7601476014760147, "no_speech_prob": 0.0012841918505728245}, {"id": 207, "seek": 124172, "start": 1241.72, "end": 1248.84, "text": " holding on to all of the variables in that electrical environment um past their jup uh their", "tokens": [50364, 5061, 322, 281, 439, 295, 264, 9102, 294, 300, 12147, 2823, 1105, 1791, 641, 361, 1010, 2232, 641, 50720], "temperature": 0.0, "avg_logprob": -0.12423953604190907, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0009696764755062759}, {"id": 208, "seek": 124172, "start": 1248.84, "end": 1253.8, "text": " their expiry date basically because no one's going to use them um if you've only captured one variable", "tokens": [50720, 641, 1278, 12781, 4002, 1936, 570, 572, 472, 311, 516, 281, 764, 552, 1105, 498, 291, 600, 787, 11828, 472, 7006, 50968], "temperature": 0.0, "avg_logprob": -0.12423953604190907, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0009696764755062759}, {"id": 209, "seek": 124172, "start": 1254.6000000000001, "end": 1261.32, "text": " so what we well what v8 does is kind of intelligent but i'm going to show you i'm going to show you", "tokens": [51008, 370, 437, 321, 731, 437, 371, 23, 775, 307, 733, 295, 13232, 457, 741, 478, 516, 281, 855, 291, 741, 478, 516, 281, 855, 291, 51344], "temperature": 0.0, "avg_logprob": -0.12423953604190907, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0009696764755062759}, {"id": 210, "seek": 124172, "start": 1261.32, "end": 1266.84, "text": " what it does so in this program we've got an outer function we define three different variables x y", "tokens": [51344, 437, 309, 775, 370, 294, 341, 1461, 321, 600, 658, 364, 10847, 2445, 321, 6964, 1045, 819, 9102, 2031, 288, 51620], "temperature": 0.0, "avg_logprob": -0.12423953604190907, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0009696764755062759}, {"id": 211, "seek": 126684, "start": 1266.84, "end": 1274.9199999999998, "text": " and huge so huge let's just pretend this is a really big object and we have our uh we've got one", "tokens": [50364, 293, 2603, 370, 2603, 718, 311, 445, 11865, 341, 307, 257, 534, 955, 2657, 293, 321, 362, 527, 2232, 321, 600, 658, 472, 50768], "temperature": 0.0, "avg_logprob": -0.09511885553036097, "compression_ratio": 1.99163179916318, "no_speech_prob": 0.008846292272210121}, {"id": 212, "seek": 126684, "start": 1274.9199999999998, "end": 1280.52, "text": " function here called bar which captures the huge variable so it references that doesn't reference", "tokens": [50768, 2445, 510, 1219, 2159, 597, 27986, 264, 2603, 7006, 370, 309, 15400, 300, 1177, 380, 6408, 51048], "temperature": 0.0, "avg_logprob": -0.09511885553036097, "compression_ratio": 1.99163179916318, "no_speech_prob": 0.008846292272210121}, {"id": 213, "seek": 126684, "start": 1280.52, "end": 1285.08, "text": " these two guys though then we have an inner function which captures x but doesn't capture these two", "tokens": [51048, 613, 732, 1074, 1673, 550, 321, 362, 364, 7284, 2445, 597, 27986, 2031, 457, 1177, 380, 7983, 613, 732, 51276], "temperature": 0.0, "avg_logprob": -0.09511885553036097, "compression_ratio": 1.99163179916318, "no_speech_prob": 0.008846292272210121}, {"id": 214, "seek": 126684, "start": 1285.08, "end": 1289.9599999999998, "text": " guys and then we return the inner function so bar is defined but doesn't actually get used", "tokens": [51276, 1074, 293, 550, 321, 2736, 264, 7284, 2445, 370, 2159, 307, 7642, 457, 1177, 380, 767, 483, 1143, 51520], "temperature": 0.0, "avg_logprob": -0.09511885553036097, "compression_ratio": 1.99163179916318, "no_speech_prob": 0.008846292272210121}, {"id": 215, "seek": 126684, "start": 1291.1599999999999, "end": 1294.9199999999998, "text": " on the outside we did the same things before we call our outer function that gives us this", "tokens": [51580, 322, 264, 2380, 321, 630, 264, 912, 721, 949, 321, 818, 527, 10847, 2445, 300, 2709, 505, 341, 51768], "temperature": 0.0, "avg_logprob": -0.09511885553036097, "compression_ratio": 1.99163179916318, "no_speech_prob": 0.008846292272210121}, {"id": 216, "seek": 129492, "start": 1294.92, "end": 1301.0800000000002, "text": " so you sign up for food and then we call food okay so let's have a look at how this actually", "tokens": [50364, 370, 291, 1465, 493, 337, 1755, 293, 550, 321, 818, 1755, 1392, 370, 718, 311, 362, 257, 574, 412, 577, 341, 767, 50672], "temperature": 0.0, "avg_logprob": -0.06811382373174031, "compression_ratio": 1.8046511627906976, "no_speech_prob": 0.0006461629527620971}, {"id": 217, "seek": 129492, "start": 1301.0800000000002, "end": 1307.0, "text": " works so if i play this now um we've created a foo object so i can have a look in here and it's got", "tokens": [50672, 1985, 370, 498, 741, 862, 341, 586, 1105, 321, 600, 2942, 257, 726, 78, 2657, 370, 741, 393, 362, 257, 574, 294, 510, 293, 309, 311, 658, 50968], "temperature": 0.0, "avg_logprob": -0.06811382373174031, "compression_ratio": 1.8046511627906976, "no_speech_prob": 0.0006461629527620971}, {"id": 218, "seek": 129492, "start": 1307.0, "end": 1315.24, "text": " scopes now interestingly uh this guy is now it has a reference to a closure from the outer function", "tokens": [50968, 795, 30545, 586, 25873, 2232, 341, 2146, 307, 586, 309, 575, 257, 6408, 281, 257, 24653, 490, 264, 10847, 2445, 51380], "temperature": 0.0, "avg_logprob": -0.06811382373174031, "compression_ratio": 1.8046511627906976, "no_speech_prob": 0.0006461629527620971}, {"id": 219, "seek": 129492, "start": 1315.24, "end": 1319.4, "text": " because the outer function is now returned and it actually refers to two different things so it", "tokens": [51380, 570, 264, 10847, 2445, 307, 586, 8752, 293, 309, 767, 14942, 281, 732, 819, 721, 370, 309, 51588], "temperature": 0.0, "avg_logprob": -0.06811382373174031, "compression_ratio": 1.8046511627906976, "no_speech_prob": 0.0006461629527620971}, {"id": 220, "seek": 131940, "start": 1319.4, "end": 1325.3200000000002, "text": " actually has a reference to x which it explicitly captured but also a huge object now uh it's good", "tokens": [50364, 767, 575, 257, 6408, 281, 2031, 597, 309, 20803, 11828, 457, 611, 257, 2603, 2657, 586, 2232, 309, 311, 665, 50660], "temperature": 0.0, "avg_logprob": -0.06218507415369937, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.00025315210223197937}, {"id": 221, "seek": 131940, "start": 1325.3200000000002, "end": 1329.3200000000002, "text": " to know that it doesn't have access to the y variable because that would be a waste of memory", "tokens": [50660, 281, 458, 300, 309, 1177, 380, 362, 2105, 281, 264, 288, 7006, 570, 300, 576, 312, 257, 5964, 295, 4675, 50860], "temperature": 0.0, "avg_logprob": -0.06218507415369937, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.00025315210223197937}, {"id": 222, "seek": 131940, "start": 1329.3200000000002, "end": 1333.96, "text": " because no one actually makes use of that but you know uh what does what does the inner function", "tokens": [50860, 570, 572, 472, 767, 1669, 764, 295, 300, 457, 291, 458, 2232, 437, 775, 437, 775, 264, 7284, 2445, 51092], "temperature": 0.0, "avg_logprob": -0.06218507415369937, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.00025315210223197937}, {"id": 223, "seek": 131940, "start": 1333.96, "end": 1339.0, "text": " care about the huge variable it doesn't make use of it in the case of the x variable so if we continue", "tokens": [51092, 1127, 466, 264, 2603, 7006, 309, 1177, 380, 652, 764, 295, 309, 294, 264, 1389, 295, 264, 2031, 7006, 370, 498, 321, 2354, 51344], "temperature": 0.0, "avg_logprob": -0.06218507415369937, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.00025315210223197937}, {"id": 224, "seek": 131940, "start": 1339.0, "end": 1347.8000000000002, "text": " again and we look at the actual closure that we have in our outer function um look at that so", "tokens": [51344, 797, 293, 321, 574, 412, 264, 3539, 24653, 300, 321, 362, 294, 527, 10847, 2445, 1105, 574, 412, 300, 370, 51784], "temperature": 0.0, "avg_logprob": -0.06218507415369937, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.00025315210223197937}, {"id": 225, "seek": 134780, "start": 1348.76, "end": 1354.2, "text": " we've got both of our things here that were captured so what this tells us is that in the v8", "tokens": [50412, 321, 600, 658, 1293, 295, 527, 721, 510, 300, 645, 11828, 370, 437, 341, 5112, 505, 307, 300, 294, 264, 371, 23, 50684], "temperature": 0.0, "avg_logprob": -0.1400640163015812, "compression_ratio": 1.4370370370370371, "no_speech_prob": 0.0005976568791083992}, {"id": 226, "seek": 134780, "start": 1354.2, "end": 1362.84, "text": " implementation of um closures effectively the way that it works is uh as soon as we probably actually", "tokens": [50684, 11420, 295, 1105, 2611, 1303, 8659, 264, 636, 300, 309, 1985, 307, 2232, 382, 2321, 382, 321, 1391, 767, 51116], "temperature": 0.0, "avg_logprob": -0.1400640163015812, "compression_ratio": 1.4370370370370371, "no_speech_prob": 0.0005976568791083992}, {"id": 227, "seek": 136284, "start": 1363.3999999999999, "end": 1369.48, "text": " let me refresh this debugger save oops here we go", "tokens": [50392, 718, 385, 15134, 341, 24083, 1321, 3155, 34166, 510, 321, 352, 50696], "temperature": 0.0, "avg_logprob": -0.16379575729370116, "compression_ratio": 1.5928571428571427, "no_speech_prob": 0.05419204384088516}, {"id": 228, "seek": 136284, "start": 1372.12, "end": 1380.12, "text": " debugger oh i did it again okay this time will definitely work it's not only that you have", "tokens": [50828, 24083, 1321, 1954, 741, 630, 309, 797, 1392, 341, 565, 486, 2138, 589, 309, 311, 406, 787, 300, 291, 362, 51228], "temperature": 0.0, "avg_logprob": -0.16379575729370116, "compression_ratio": 1.5928571428571427, "no_speech_prob": 0.05419204384088516}, {"id": 229, "seek": 136284, "start": 1380.12, "end": 1387.6399999999999, "text": " to do this save play all right so in here um let's have a look so we have debugger", "tokens": [51228, 281, 360, 341, 3155, 862, 439, 558, 370, 294, 510, 1105, 718, 311, 362, 257, 574, 370, 321, 362, 24083, 1321, 51604], "temperature": 0.0, "avg_logprob": -0.16379575729370116, "compression_ratio": 1.5928571428571427, "no_speech_prob": 0.05419204384088516}, {"id": 230, "seek": 138764, "start": 1388.2, "end": 1395.24, "text": " we're being called script global bar you know this okay bar you know so this is just these", "tokens": [50392, 321, 434, 885, 1219, 5755, 4338, 2159, 291, 458, 341, 1392, 2159, 291, 458, 370, 341, 307, 445, 613, 50744], "temperature": 0.0, "avg_logprob": -0.1373471532549177, "compression_ratio": 1.5917159763313609, "no_speech_prob": 0.009409746155142784}, {"id": 231, "seek": 138764, "start": 1395.24, "end": 1401.96, "text": " guys being hoisted uh as is y finally enough x and y sorry x is huge don't appear in my local", "tokens": [50744, 1074, 885, 1106, 33250, 2232, 382, 307, 288, 2721, 1547, 2031, 293, 288, 2597, 2031, 307, 2603, 500, 380, 4204, 294, 452, 2654, 51080], "temperature": 0.0, "avg_logprob": -0.1373471532549177, "compression_ratio": 1.5917159763313609, "no_speech_prob": 0.009409746155142784}, {"id": 232, "seek": 138764, "start": 1401.96, "end": 1410.5200000000002, "text": " scope i can't see them in the they're not really in a um closure if i continue again", "tokens": [51080, 11923, 741, 393, 380, 536, 552, 294, 264, 436, 434, 406, 534, 294, 257, 1105, 24653, 498, 741, 2354, 797, 51508], "temperature": 0.0, "avg_logprob": -0.1373471532549177, "compression_ratio": 1.5917159763313609, "no_speech_prob": 0.009409746155142784}, {"id": 233, "seek": 141052, "start": 1411.24, "end": 1417.8799999999999, "text": " and they appear here interesting so what we'll do is later on i'm going to show", "tokens": [50400, 293, 436, 4204, 510, 1880, 370, 437, 321, 603, 360, 307, 1780, 322, 741, 478, 516, 281, 855, 50732], "temperature": 0.0, "avg_logprob": -0.10137825233991755, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.004133622627705336}, {"id": 234, "seek": 141052, "start": 1417.8799999999999, "end": 1422.04, "text": " kind of what really happens on the actual heap because the dev chrome tools let you", "tokens": [50732, 733, 295, 437, 534, 2314, 322, 264, 3539, 33591, 570, 264, 1905, 33120, 3873, 718, 291, 50940], "temperature": 0.0, "avg_logprob": -0.10137825233991755, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.004133622627705336}, {"id": 235, "seek": 141052, "start": 1422.04, "end": 1428.04, "text": " so chrome dev tools let you actually inspect heap snatch odds um but for now i'm just going to", "tokens": [50940, 370, 33120, 1905, 3873, 718, 291, 767, 15018, 33591, 46328, 17439, 1105, 457, 337, 586, 741, 478, 445, 516, 281, 51240], "temperature": 0.0, "avg_logprob": -0.10137825233991755, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.004133622627705336}, {"id": 236, "seek": 141052, "start": 1428.04, "end": 1435.08, "text": " continue uh and we're going to talk about the this variable okay so um i have said so far that the", "tokens": [51240, 2354, 2232, 293, 321, 434, 516, 281, 751, 466, 264, 341, 7006, 1392, 370, 1105, 741, 362, 848, 370, 1400, 300, 264, 51592], "temperature": 0.0, "avg_logprob": -0.10137825233991755, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.004133622627705336}, {"id": 237, "seek": 143508, "start": 1435.8799999999999, "end": 1443.32, "text": " uh the JavaScript uses static scoping which is for the most part true but there is one notable", "tokens": [50404, 2232, 264, 15778, 4960, 13437, 795, 26125, 597, 307, 337, 264, 881, 644, 2074, 457, 456, 307, 472, 22556, 50776], "temperature": 0.0, "avg_logprob": -0.10529166001539964, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.007815121673047543}, {"id": 238, "seek": 143508, "start": 1443.32, "end": 1448.04, "text": " exception and that is the this binding um it's something a variable because it's its value", "tokens": [50776, 11183, 293, 300, 307, 264, 341, 17359, 1105, 309, 311, 746, 257, 7006, 570, 309, 311, 1080, 2158, 51012], "temperature": 0.0, "avg_logprob": -0.10529166001539964, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.007815121673047543}, {"id": 239, "seek": 143508, "start": 1448.04, "end": 1452.4399999999998, "text": " does not vary once you're inside the scope um it just kind of gets given a variable and that's what", "tokens": [51012, 775, 406, 10559, 1564, 291, 434, 1854, 264, 11923, 1105, 309, 445, 733, 295, 2170, 2212, 257, 7006, 293, 300, 311, 437, 51232], "temperature": 0.0, "avg_logprob": -0.10529166001539964, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.007815121673047543}, {"id": 240, "seek": 143508, "start": 1452.4399999999998, "end": 1461.32, "text": " it is um so the way that it works is it's effectively um well i'll show you an example so", "tokens": [51232, 309, 307, 1105, 370, 264, 636, 300, 309, 1985, 307, 309, 311, 8659, 1105, 731, 741, 603, 855, 291, 364, 1365, 370, 51676], "temperature": 0.0, "avg_logprob": -0.10529166001539964, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.007815121673047543}, {"id": 241, "seek": 146132, "start": 1461.32, "end": 1466.28, "text": " here we said x to one then we create an object it's got a couple properties x and a a is a function", "tokens": [50364, 510, 321, 848, 2031, 281, 472, 550, 321, 1884, 364, 2657, 309, 311, 658, 257, 1916, 7221, 2031, 293, 257, 257, 307, 257, 2445, 50612], "temperature": 0.0, "avg_logprob": -0.0909201194500101, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.005553859751671553}, {"id": 242, "seek": 146132, "start": 1466.28, "end": 1472.04, "text": " that just logs x and um this is really just a demonstration of how things get weird pretty", "tokens": [50612, 300, 445, 20820, 2031, 293, 1105, 341, 307, 534, 445, 257, 16520, 295, 577, 721, 483, 3657, 1238, 50900], "temperature": 0.0, "avg_logprob": -0.0909201194500101, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.005553859751671553}, {"id": 243, "seek": 146132, "start": 1472.04, "end": 1479.3999999999999, "text": " quick so we have a bar variable um and we're just setting that to the value of object dot a so this", "tokens": [50900, 1702, 370, 321, 362, 257, 2159, 7006, 1105, 293, 321, 434, 445, 3287, 300, 281, 264, 2158, 295, 2657, 5893, 257, 370, 341, 51268], "temperature": 0.0, "avg_logprob": -0.0909201194500101, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.005553859751671553}, {"id": 244, "seek": 146132, "start": 1479.3999999999999, "end": 1483.1599999999999, "text": " is now going to be this function here and then we also can just call object dot a directly", "tokens": [51268, 307, 586, 516, 281, 312, 341, 2445, 510, 293, 550, 321, 611, 393, 445, 818, 2657, 5893, 257, 3838, 51456], "temperature": 0.0, "avg_logprob": -0.0909201194500101, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.005553859751671553}, {"id": 245, "seek": 146132, "start": 1483.1599999999999, "end": 1487.32, "text": " funnily enough though this gives two different values i've played this get my console one or two", "tokens": [51456, 1019, 77, 953, 1547, 1673, 341, 2709, 732, 819, 4190, 741, 600, 3737, 341, 483, 452, 11076, 472, 420, 732, 51664], "temperature": 0.0, "avg_logprob": -0.0909201194500101, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.005553859751671553}, {"id": 246, "seek": 148732, "start": 1487.32, "end": 1492.84, "text": " okay bizarre we've got the exact same function but depending on how we call it we get a different", "tokens": [50364, 1392, 18265, 321, 600, 658, 264, 1900, 912, 2445, 457, 5413, 322, 577, 321, 818, 309, 321, 483, 257, 819, 50640], "temperature": 0.0, "avg_logprob": -0.054908054391133415, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.0008558439440093935}, {"id": 247, "seek": 148732, "start": 1492.84, "end": 1501.8, "text": " value so in in uh the case of bar we get x and in the case of object dot a we get uh two so what's", "tokens": [50640, 2158, 370, 294, 294, 2232, 264, 1389, 295, 2159, 321, 483, 2031, 293, 294, 264, 1389, 295, 2657, 5893, 257, 321, 483, 2232, 732, 370, 437, 311, 51088], "temperature": 0.0, "avg_logprob": -0.054908054391133415, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.0008558439440093935}, {"id": 248, "seek": 148732, "start": 1501.8, "end": 1506.76, "text": " going on here so the way that it works is if you have a function and it contains a this binding", "tokens": [51088, 516, 322, 510, 370, 264, 636, 300, 309, 1985, 307, 498, 291, 362, 257, 2445, 293, 309, 8306, 257, 341, 17359, 51336], "temperature": 0.0, "avg_logprob": -0.054908054391133415, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.0008558439440093935}, {"id": 249, "seek": 148732, "start": 1507.96, "end": 1511.6399999999999, "text": " the value that's passed in is actually based on the way in which you call that function so", "tokens": [51396, 264, 2158, 300, 311, 4678, 294, 307, 767, 2361, 322, 264, 636, 294, 597, 291, 818, 300, 2445, 370, 51580], "temperature": 0.0, "avg_logprob": -0.054908054391133415, "compression_ratio": 1.7981220657276995, "no_speech_prob": 0.0008558439440093935}, {"id": 250, "seek": 151164, "start": 1512.44, "end": 1516.8400000000001, "text": " if you just call it directly then it's going to be given the value of the", "tokens": [50404, 498, 291, 445, 818, 309, 3838, 550, 309, 311, 516, 281, 312, 2212, 264, 2158, 295, 264, 50624], "temperature": 0.0, "avg_logprob": -0.0888151657290575, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0002694719296414405}, {"id": 251, "seek": 151164, "start": 1518.2, "end": 1526.0400000000002, "text": " global object which is basically a object that contains this axis of property um whereas if", "tokens": [50692, 4338, 2657, 597, 307, 1936, 257, 2657, 300, 8306, 341, 10298, 295, 4707, 1105, 9735, 498, 51084], "temperature": 0.0, "avg_logprob": -0.0888151657290575, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0002694719296414405}, {"id": 252, "seek": 151164, "start": 1526.0400000000002, "end": 1530.92, "text": " you call it so if on the left hand side of these brackets these parentheses you have what is called", "tokens": [51084, 291, 818, 309, 370, 498, 322, 264, 1411, 1011, 1252, 295, 613, 26179, 613, 34153, 291, 362, 437, 307, 1219, 51328], "temperature": 0.0, "avg_logprob": -0.0888151657290575, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0002694719296414405}, {"id": 253, "seek": 151164, "start": 1530.92, "end": 1538.3600000000001, "text": " a reference type then it's actually going to be given the um the this variable or this binding", "tokens": [51328, 257, 6408, 2010, 550, 309, 311, 767, 516, 281, 312, 2212, 264, 1105, 264, 341, 7006, 420, 341, 17359, 51700], "temperature": 0.0, "avg_logprob": -0.0888151657290575, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0002694719296414405}, {"id": 254, "seek": 153836, "start": 1538.36, "end": 1543.32, "text": " will be given the value of the object itself meaning when we try and call the", "tokens": [50364, 486, 312, 2212, 264, 2158, 295, 264, 2657, 2564, 3620, 562, 321, 853, 293, 818, 264, 50612], "temperature": 0.0, "avg_logprob": -0.07367926552182152, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.002396371215581894}, {"id": 255, "seek": 153836, "start": 1544.84, "end": 1549.8799999999999, "text": " x property on that it's going to be this guy so what's going on here so a reference type", "tokens": [50688, 2031, 4707, 322, 300, 309, 311, 516, 281, 312, 341, 2146, 370, 437, 311, 516, 322, 510, 370, 257, 6408, 2010, 50940], "temperature": 0.0, "avg_logprob": -0.07367926552182152, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.002396371215581894}, {"id": 256, "seek": 153836, "start": 1549.8799999999999, "end": 1553.6399999999999, "text": " is basically you can actually check these in brackets and it will still work hang on let me", "tokens": [50940, 307, 1936, 291, 393, 767, 1520, 613, 294, 26179, 293, 309, 486, 920, 589, 3967, 322, 718, 385, 51128], "temperature": 0.0, "avg_logprob": -0.07367926552182152, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.002396371215581894}, {"id": 257, "seek": 153836, "start": 1554.6, "end": 1563.56, "text": " copy this refresh do that save play same thing same thing yeah so what this actually is is a", "tokens": [51176, 5055, 341, 15134, 360, 300, 3155, 862, 912, 551, 912, 551, 1338, 370, 437, 341, 767, 307, 307, 257, 51624], "temperature": 0.0, "avg_logprob": -0.07367926552182152, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.002396371215581894}, {"id": 258, "seek": 156356, "start": 1564.52, "end": 1572.36, "text": " it before it evaluates to the actual um uh like function it evaluates to a reference type", "tokens": [50412, 309, 949, 309, 6133, 1024, 281, 264, 3539, 1105, 2232, 411, 2445, 309, 6133, 1024, 281, 257, 6408, 2010, 50804], "temperature": 0.0, "avg_logprob": -0.11197859157215465, "compression_ratio": 1.95, "no_speech_prob": 0.0018674235325306654}, {"id": 259, "seek": 156356, "start": 1572.36, "end": 1575.32, "text": " and a reference type is just when you have an object and then you're calling some property on", "tokens": [50804, 293, 257, 6408, 2010, 307, 445, 562, 291, 362, 364, 2657, 293, 550, 291, 434, 5141, 512, 4707, 322, 50952], "temperature": 0.0, "avg_logprob": -0.11197859157215465, "compression_ratio": 1.95, "no_speech_prob": 0.0018674235325306654}, {"id": 260, "seek": 156356, "start": 1575.32, "end": 1579.08, "text": " that object so in this case it's object dot a so whatever you do that and then you have the", "tokens": [50952, 300, 2657, 370, 294, 341, 1389, 309, 311, 2657, 5893, 257, 370, 2035, 291, 360, 300, 293, 550, 291, 362, 264, 51140], "temperature": 0.0, "avg_logprob": -0.11197859157215465, "compression_ratio": 1.95, "no_speech_prob": 0.0018674235325306654}, {"id": 261, "seek": 156356, "start": 1579.08, "end": 1584.84, "text": " parentheses here what it means is it'll it'll invoke this function but it will set the this", "tokens": [51140, 34153, 510, 437, 309, 1355, 307, 309, 603, 309, 603, 41117, 341, 2445, 457, 309, 486, 992, 264, 341, 51428], "temperature": 0.0, "avg_logprob": -0.11197859157215465, "compression_ratio": 1.95, "no_speech_prob": 0.0018674235325306654}, {"id": 262, "seek": 156356, "start": 1584.84, "end": 1593.1599999999999, "text": " binding to the value of the actual object strange why would we uh violate static scoping in this way", "tokens": [51428, 17359, 281, 264, 2158, 295, 264, 3539, 2657, 5861, 983, 576, 321, 2232, 37478, 13437, 795, 26125, 294, 341, 636, 51844], "temperature": 0.0, "avg_logprob": -0.11197859157215465, "compression_ratio": 1.95, "no_speech_prob": 0.0018674235325306654}, {"id": 263, "seek": 159316, "start": 1593.24, "end": 1599.5600000000002, "text": " right when this thing is defined uh it's with that the way you call it as a as opposed to the", "tokens": [50368, 558, 562, 341, 551, 307, 7642, 2232, 309, 311, 365, 300, 264, 636, 291, 818, 309, 382, 257, 382, 8851, 281, 264, 50684], "temperature": 0.0, "avg_logprob": -0.0862048864364624, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0015977155417203903}, {"id": 264, "seek": 159316, "start": 1599.5600000000002, "end": 1605.8000000000002, "text": " way that you create it which is more of a dynamic scoping thing what influences value um and basically", "tokens": [50684, 636, 300, 291, 1884, 309, 597, 307, 544, 295, 257, 8546, 795, 26125, 551, 437, 21222, 2158, 1105, 293, 1936, 50996], "temperature": 0.0, "avg_logprob": -0.0862048864364624, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0015977155417203903}, {"id": 265, "seek": 159316, "start": 1605.8000000000002, "end": 1612.52, "text": " what this enables is um sharing of code so we're going to have two objects here and a foo function", "tokens": [50996, 437, 341, 17077, 307, 1105, 5414, 295, 3089, 370, 321, 434, 516, 281, 362, 732, 6565, 510, 293, 257, 726, 78, 2445, 51332], "temperature": 0.0, "avg_logprob": -0.0862048864364624, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0015977155417203903}, {"id": 266, "seek": 159316, "start": 1612.52, "end": 1618.76, "text": " that makes use of the this dot x uh reference you can then assign that to both of these objects", "tokens": [51332, 300, 1669, 764, 295, 264, 341, 5893, 2031, 2232, 6408, 291, 393, 550, 6269, 300, 281, 1293, 295, 613, 6565, 51644], "temperature": 0.0, "avg_logprob": -0.0862048864364624, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0015977155417203903}, {"id": 267, "seek": 159316, "start": 1618.76, "end": 1622.2, "text": " and you can call them and you'll get different values because the different objects contain", "tokens": [51644, 293, 291, 393, 818, 552, 293, 291, 603, 483, 819, 4190, 570, 264, 819, 6565, 5304, 51816], "temperature": 0.0, "avg_logprob": -0.0862048864364624, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0015977155417203903}, {"id": 268, "seek": 162220, "start": 1622.2, "end": 1627.56, "text": " different values for x so effectively because function is the first class it would be a shame", "tokens": [50364, 819, 4190, 337, 2031, 370, 8659, 570, 2445, 307, 264, 700, 1508, 309, 576, 312, 257, 10069, 50632], "temperature": 0.0, "avg_logprob": -0.12188957398196301, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.000687800464220345}, {"id": 269, "seek": 162220, "start": 1627.56, "end": 1634.52, "text": " if we couldn't actually kind of uh make use of this neat functionality to have kind of uh", "tokens": [50632, 498, 321, 2809, 380, 767, 733, 295, 2232, 652, 764, 295, 341, 10654, 14980, 281, 362, 733, 295, 2232, 50980], "temperature": 0.0, "avg_logprob": -0.12188957398196301, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.000687800464220345}, {"id": 270, "seek": 162220, "start": 1635.16, "end": 1641.24, "text": " genericized logic that can be applied to different objects and different data um there is another", "tokens": [51012, 19577, 1602, 9952, 300, 393, 312, 6456, 281, 819, 6565, 293, 819, 1412, 1105, 456, 307, 1071, 51316], "temperature": 0.0, "avg_logprob": -0.12188957398196301, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.000687800464220345}, {"id": 271, "seek": 162220, "start": 1641.24, "end": 1648.04, "text": " example of how this works which is um when creating prototypes so i'm going to too much detail about", "tokens": [51316, 1365, 295, 577, 341, 1985, 597, 307, 1105, 562, 4084, 42197, 370, 741, 478, 516, 281, 886, 709, 2607, 466, 51656], "temperature": 0.0, "avg_logprob": -0.12188957398196301, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.000687800464220345}, {"id": 272, "seek": 164804, "start": 1648.04, "end": 1654.76, "text": " prototypes here but prototypes are effectively the way the javascript enables inheritance so um", "tokens": [50364, 42197, 510, 457, 42197, 366, 8659, 264, 636, 264, 361, 37331, 5944, 17077, 32122, 370, 1105, 50700], "temperature": 0.0, "avg_logprob": -0.11382365871120144, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.010326473973691463}, {"id": 273, "seek": 164804, "start": 1654.76, "end": 1658.92, "text": " we've got a kind of constructor function here and it says okay you give me an object like an empty", "tokens": [50700, 321, 600, 658, 257, 733, 295, 47479, 2445, 510, 293, 309, 1619, 1392, 291, 976, 385, 364, 2657, 411, 364, 6707, 50908], "temperature": 0.0, "avg_logprob": -0.11382365871120144, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.010326473973691463}, {"id": 274, "seek": 164804, "start": 1658.92, "end": 1664.04, "text": " object and i'll set x to one on that object and i'll set the blah property to this function", "tokens": [50908, 2657, 293, 741, 603, 992, 2031, 281, 472, 322, 300, 2657, 293, 741, 603, 992, 264, 12288, 4707, 281, 341, 2445, 51164], "temperature": 0.0, "avg_logprob": -0.11382365871120144, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.010326473973691463}, {"id": 275, "seek": 164804, "start": 1664.04, "end": 1670.68, "text": " but just console log something and then i can say on here i can set the prototype of this function", "tokens": [51164, 457, 445, 11076, 3565, 746, 293, 550, 741, 393, 584, 322, 510, 741, 393, 992, 264, 19475, 295, 341, 2445, 51496], "temperature": 0.0, "avg_logprob": -0.11382365871120144, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.010326473973691463}, {"id": 276, "seek": 164804, "start": 1670.68, "end": 1675.6399999999999, "text": " which is a fancy way of saying you know when i create an object um from this guy using the the", "tokens": [51496, 597, 307, 257, 10247, 636, 295, 1566, 291, 458, 562, 741, 1884, 364, 2657, 1105, 490, 341, 2146, 1228, 264, 264, 51744], "temperature": 0.0, "avg_logprob": -0.11382365871120144, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.010326473973691463}, {"id": 277, "seek": 167564, "start": 1675.64, "end": 1682.1200000000001, "text": " new keyword um i want this object's prototype to have this additional functionality so in this case", "tokens": [50364, 777, 20428, 1105, 741, 528, 341, 2657, 311, 19475, 281, 362, 341, 4497, 14980, 370, 294, 341, 1389, 50688], "temperature": 0.0, "avg_logprob": -0.0848070465692199, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.0008040463435463607}, {"id": 278, "seek": 167564, "start": 1682.1200000000001, "end": 1688.6000000000001, "text": " i'm saying i've got a foo property and it has a function that console logs this dot x and if i go", "tokens": [50688, 741, 478, 1566, 741, 600, 658, 257, 726, 78, 4707, 293, 309, 575, 257, 2445, 300, 11076, 20820, 341, 5893, 2031, 293, 498, 741, 352, 51012], "temperature": 0.0, "avg_logprob": -0.0848070465692199, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.0008040463435463607}, {"id": 279, "seek": 167564, "start": 1688.6000000000001, "end": 1695.0, "text": " and create my a object i'll get an object that just says x is one and then if i call foo on that um", "tokens": [51012, 293, 1884, 452, 257, 2657, 741, 603, 483, 364, 2657, 300, 445, 1619, 2031, 307, 472, 293, 550, 498, 741, 818, 726, 78, 322, 300, 1105, 51332], "temperature": 0.0, "avg_logprob": -0.0848070465692199, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.0008040463435463607}, {"id": 280, "seek": 167564, "start": 1695.0, "end": 1700.68, "text": " because i'm making use of the this keyword here um i'll be referencing this x because i'm using a", "tokens": [51332, 570, 741, 478, 1455, 764, 295, 264, 341, 20428, 510, 1105, 741, 603, 312, 40582, 341, 2031, 570, 741, 478, 1228, 257, 51616], "temperature": 0.0, "avg_logprob": -0.0848070465692199, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.0008040463435463607}, {"id": 281, "seek": 170068, "start": 1700.68, "end": 1710.04, "text": " reference type here so they play this one okay cool so um what this enables is basically inheritance", "tokens": [50364, 6408, 2010, 510, 370, 436, 862, 341, 472, 1392, 1627, 370, 1105, 437, 341, 17077, 307, 1936, 32122, 50832], "temperature": 0.0, "avg_logprob": -0.08851517801699431, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.032096296548843384}, {"id": 282, "seek": 170068, "start": 1710.04, "end": 1721.48, "text": " i can have multiple different objects here i can go b um and i can say a dot prototype equals b dot", "tokens": [50832, 741, 393, 362, 3866, 819, 6565, 510, 741, 393, 352, 272, 1105, 293, 741, 393, 584, 257, 5893, 19475, 6915, 272, 5893, 51404], "temperature": 0.0, "avg_logprob": -0.08851517801699431, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.032096296548843384}, {"id": 283, "seek": 172148, "start": 1721.48, "end": 1732.52, "text": " prototype and make that two make that ha ha and i can go let's see um i can do object new b", "tokens": [50364, 19475, 293, 652, 300, 732, 652, 300, 324, 324, 293, 741, 393, 352, 718, 311, 536, 1105, 741, 393, 360, 2657, 777, 272, 50916], "temperature": 0.0, "avg_logprob": -0.21049697058541433, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.06186823546886444}, {"id": 284, "seek": 172148, "start": 1733.32, "end": 1737.4, "text": " and then there's a b2 and then it should log two so let me just save this", "tokens": [50956, 293, 550, 456, 311, 257, 272, 17, 293, 550, 309, 820, 3565, 732, 370, 718, 385, 445, 3155, 341, 51160], "temperature": 0.0, "avg_logprob": -0.21049697058541433, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.06186823546886444}, {"id": 285, "seek": 172148, "start": 1739.24, "end": 1745.16, "text": " whoops oh no i've lost it oh that's all right i can just do it again so", "tokens": [51252, 567, 3370, 1954, 572, 741, 600, 2731, 309, 1954, 300, 311, 439, 558, 741, 393, 445, 360, 309, 797, 370, 51548], "temperature": 0.0, "avg_logprob": -0.21049697058541433, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.06186823546886444}, {"id": 286, "seek": 174516, "start": 1746.1200000000001, "end": 1755.96, "text": " okay i've got a b constructor by those two this says ha ha i'm going to say", "tokens": [50412, 1392, 741, 600, 658, 257, 272, 47479, 538, 729, 732, 341, 1619, 324, 324, 741, 478, 516, 281, 584, 50904], "temperature": 0.0, "avg_logprob": -0.16483334934010224, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00038595672231167555}, {"id": 287, "seek": 174516, "start": 1757.16, "end": 1762.3600000000001, "text": " b dot prototype equals a dot prototype and then make this a b it's going to be two", "tokens": [50964, 272, 5893, 19475, 6915, 257, 5893, 19475, 293, 550, 652, 341, 257, 272, 309, 311, 516, 281, 312, 732, 51224], "temperature": 0.0, "avg_logprob": -0.16483334934010224, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00038595672231167555}, {"id": 288, "seek": 174516, "start": 1763.24, "end": 1769.3200000000002, "text": " and save and play now it logs two okay cool so what this says is basically we've got two completely", "tokens": [51268, 293, 3155, 293, 862, 586, 309, 20820, 732, 1392, 1627, 370, 437, 341, 1619, 307, 1936, 321, 600, 658, 732, 2584, 51572], "temperature": 0.0, "avg_logprob": -0.16483334934010224, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00038595672231167555}, {"id": 289, "seek": 174516, "start": 1769.3200000000002, "end": 1774.0400000000002, "text": " different um constructors here but they both inherit from this same kind of prototype which", "tokens": [51572, 819, 1105, 7690, 830, 510, 457, 436, 1293, 21389, 490, 341, 912, 733, 295, 19475, 597, 51808], "temperature": 0.0, "avg_logprob": -0.16483334934010224, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.00038595672231167555}, {"id": 290, "seek": 177404, "start": 1774.04, "end": 1778.44, "text": " has this function on it where we can say just console log this dot x and there you go you can", "tokens": [50364, 575, 341, 2445, 322, 309, 689, 321, 393, 584, 445, 11076, 3565, 341, 5893, 2031, 293, 456, 291, 352, 291, 393, 50584], "temperature": 0.0, "avg_logprob": -0.08707246326264881, "compression_ratio": 1.6902654867256637, "no_speech_prob": 0.00016864429926499724}, {"id": 291, "seek": 177404, "start": 1778.44, "end": 1784.6, "text": " create uh effectively we've created a taxonomy a and b both inherit from some prototype that", "tokens": [50584, 1884, 2232, 8659, 321, 600, 2942, 257, 3366, 23423, 257, 293, 272, 1293, 21389, 490, 512, 19475, 300, 50892], "temperature": 0.0, "avg_logprob": -0.08707246326264881, "compression_ratio": 1.6902654867256637, "no_speech_prob": 0.00016864429926499724}, {"id": 292, "seek": 177404, "start": 1784.6, "end": 1791.56, "text": " defines a behavior that we can call if the property itself doesn't exist on our base objects so um", "tokens": [50892, 23122, 257, 5223, 300, 321, 393, 818, 498, 264, 4707, 2564, 1177, 380, 2514, 322, 527, 3096, 6565, 370, 1105, 51240], "temperature": 0.0, "avg_logprob": -0.08707246326264881, "compression_ratio": 1.6902654867256637, "no_speech_prob": 0.00016864429926499724}, {"id": 293, "seek": 177404, "start": 1791.56, "end": 1799.56, "text": " through the this binding we basically enable these prototype chains to define um shared behavior", "tokens": [51240, 807, 264, 341, 17359, 321, 1936, 9528, 613, 19475, 12626, 281, 6964, 1105, 5507, 5223, 51640], "temperature": 0.0, "avg_logprob": -0.08707246326264881, "compression_ratio": 1.6902654867256637, "no_speech_prob": 0.00016864429926499724}, {"id": 294, "seek": 179956, "start": 1799.56, "end": 1808.36, "text": " among the descendant objects um so uh pretty cool so this is what i mean so starting scoping on", "tokens": [50364, 3654, 264, 16333, 394, 6565, 1105, 370, 2232, 1238, 1627, 370, 341, 307, 437, 741, 914, 370, 2891, 795, 26125, 322, 50804], "temperature": 0.0, "avg_logprob": -0.07223285569085015, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.0013249332550913095}, {"id": 295, "seek": 179956, "start": 1808.36, "end": 1813.6399999999999, "text": " the whole pretty good but sometimes it is worth it to go for the dynamic approach if it enables", "tokens": [50804, 264, 1379, 1238, 665, 457, 2171, 309, 307, 3163, 309, 281, 352, 337, 264, 8546, 3109, 498, 309, 17077, 51068], "temperature": 0.0, "avg_logprob": -0.07223285569085015, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.0013249332550913095}, {"id": 296, "seek": 179956, "start": 1813.6399999999999, "end": 1819.96, "text": " things like in this case sharing code and uh inheritance okay so in this case this is just", "tokens": [51068, 721, 411, 294, 341, 1389, 5414, 3089, 293, 2232, 32122, 1392, 370, 294, 341, 1389, 341, 307, 445, 51384], "temperature": 0.0, "avg_logprob": -0.07223285569085015, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.0013249332550913095}, {"id": 297, "seek": 179956, "start": 1819.96, "end": 1825.8, "text": " an example of where it can get a bit weird and you might want to switch up what you're doing so", "tokens": [51384, 364, 1365, 295, 689, 309, 393, 483, 257, 857, 3657, 293, 291, 1062, 528, 281, 3679, 493, 437, 291, 434, 884, 370, 51676], "temperature": 0.0, "avg_logprob": -0.07223285569085015, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.0013249332550913095}, {"id": 298, "seek": 182580, "start": 1825.8799999999999, "end": 1830.84, "text": " here we have a constructor function called foo set x to one and then we say set time out and", "tokens": [50368, 510, 321, 362, 257, 47479, 2445, 1219, 726, 78, 992, 2031, 281, 472, 293, 550, 321, 584, 992, 565, 484, 293, 50616], "temperature": 0.0, "avg_logprob": -0.14613948370281019, "compression_ratio": 1.6820809248554913, "no_speech_prob": 0.022974813356995583}, {"id": 299, "seek": 182580, "start": 1830.84, "end": 1836.36, "text": " then when the time out when a second passes i'm going to console log this dot x okay there we go", "tokens": [50616, 550, 562, 264, 565, 484, 562, 257, 1150, 11335, 741, 478, 516, 281, 11076, 3565, 341, 5893, 2031, 1392, 456, 321, 352, 50892], "temperature": 0.0, "avg_logprob": -0.14613948370281019, "compression_ratio": 1.6820809248554913, "no_speech_prob": 0.022974813356995583}, {"id": 300, "seek": 182580, "start": 1836.36, "end": 1845.8799999999999, "text": " f figures new foo so if you run this what's gonna happen one one let's have a look at that um console", "tokens": [50892, 283, 9624, 777, 726, 78, 370, 498, 291, 1190, 341, 437, 311, 799, 1051, 472, 472, 718, 311, 362, 257, 574, 412, 300, 1105, 11076, 51368], "temperature": 0.0, "avg_logprob": -0.14613948370281019, "compression_ratio": 1.6820809248554913, "no_speech_prob": 0.022974813356995583}, {"id": 301, "seek": 184588, "start": 1846.8400000000001, "end": 1848.8400000000001, "text": " x", "tokens": [50412, 2031, 50512], "temperature": 0.0, "avg_logprob": -0.14900200787712545, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.010651426389813423}, {"id": 302, "seek": 184588, "start": 1849.24, "end": 1851.88, "text": " why is it going one one let's try this again", "tokens": [50532, 983, 307, 309, 516, 472, 472, 718, 311, 853, 341, 797, 50664], "temperature": 0.0, "avg_logprob": -0.14900200787712545, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.010651426389813423}, {"id": 303, "seek": 184588, "start": 1854.1200000000001, "end": 1859.0, "text": " oh because i hadn't i hadn't cleared my uh console okay good so it's logging undefined", "tokens": [50776, 1954, 570, 741, 8782, 380, 741, 8782, 380, 19725, 452, 2232, 11076, 1392, 665, 370, 309, 311, 27991, 674, 5666, 2001, 51020], "temperature": 0.0, "avg_logprob": -0.14900200787712545, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.010651426389813423}, {"id": 304, "seek": 184588, "start": 1860.1200000000001, "end": 1864.44, "text": " kind of weird it's saying this dot x and this x is one so why would that be happening", "tokens": [51076, 733, 295, 3657, 309, 311, 1566, 341, 5893, 2031, 293, 341, 2031, 307, 472, 370, 983, 576, 300, 312, 2737, 51292], "temperature": 0.0, "avg_logprob": -0.14900200787712545, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.010651426389813423}, {"id": 305, "seek": 184588, "start": 1864.44, "end": 1871.88, "text": " the reason is because when we go set time out this guy gets added to our um our event queue", "tokens": [51292, 264, 1778, 307, 570, 562, 321, 352, 992, 565, 484, 341, 2146, 2170, 3869, 281, 527, 1105, 527, 2280, 18639, 51664], "temperature": 0.0, "avg_logprob": -0.14900200787712545, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.010651426389813423}, {"id": 306, "seek": 187188, "start": 1871.88, "end": 1876.6000000000001, "text": " and when it finally gets popped off and gets ran it's ran on the global execution context", "tokens": [50364, 293, 562, 309, 2721, 2170, 21545, 766, 293, 2170, 5872, 309, 311, 5872, 322, 264, 4338, 15058, 4319, 50600], "temperature": 0.0, "avg_logprob": -0.11010317856006407, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.003075040178373456}, {"id": 307, "seek": 187188, "start": 1876.6000000000001, "end": 1883.48, "text": " meaning it's not being called as you know f dot blah it's just being called directly", "tokens": [50600, 3620, 309, 311, 406, 885, 1219, 382, 291, 458, 283, 5893, 12288, 309, 311, 445, 885, 1219, 3838, 50944], "temperature": 0.0, "avg_logprob": -0.11010317856006407, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.003075040178373456}, {"id": 308, "seek": 187188, "start": 1885.16, "end": 1890.68, "text": " that means it gets past the global object as it's this and the global object does not define", "tokens": [51028, 300, 1355, 309, 2170, 1791, 264, 4338, 2657, 382, 309, 311, 341, 293, 264, 4338, 2657, 775, 406, 6964, 51304], "temperature": 0.0, "avg_logprob": -0.11010317856006407, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.003075040178373456}, {"id": 309, "seek": 187188, "start": 1890.68, "end": 1895.88, "text": " ax if it did it would log that so if i go x equals two i think this will work maybe it won't", "tokens": [51304, 6360, 498, 309, 630, 309, 576, 3565, 300, 370, 498, 741, 352, 2031, 6915, 732, 741, 519, 341, 486, 589, 1310, 309, 1582, 380, 51564], "temperature": 0.0, "avg_logprob": -0.11010317856006407, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.003075040178373456}, {"id": 310, "seek": 189588, "start": 1895.88, "end": 1902.3600000000001, "text": " but let's find out um i'm gonna refresh i'm gonna paste i'm gonna save i'm gonna play", "tokens": [50364, 457, 718, 311, 915, 484, 1105, 741, 478, 799, 15134, 741, 478, 799, 9163, 741, 478, 799, 3155, 741, 478, 799, 862, 50688], "temperature": 0.0, "avg_logprob": -0.0878271137902496, "compression_ratio": 1.7862903225806452, "no_speech_prob": 0.006903102155774832}, {"id": 311, "seek": 189588, "start": 1903.3200000000002, "end": 1908.1200000000001, "text": " two okay cool so yeah it gets past the global object um so this is kind of weird because", "tokens": [50736, 732, 1392, 1627, 370, 1338, 309, 2170, 1791, 264, 4338, 2657, 1105, 370, 341, 307, 733, 295, 3657, 570, 50976], "temperature": 0.0, "avg_logprob": -0.0878271137902496, "compression_ratio": 1.7862903225806452, "no_speech_prob": 0.006903102155774832}, {"id": 312, "seek": 189588, "start": 1908.92, "end": 1913.8000000000002, "text": " we really wanted to just be able to reference the this this defined you know inside this scope", "tokens": [51016, 321, 534, 1415, 281, 445, 312, 1075, 281, 6408, 264, 341, 341, 7642, 291, 458, 1854, 341, 11923, 51260], "temperature": 0.0, "avg_logprob": -0.0878271137902496, "compression_ratio": 1.7862903225806452, "no_speech_prob": 0.006903102155774832}, {"id": 313, "seek": 189588, "start": 1914.7600000000002, "end": 1920.3600000000001, "text": " so what can we do let's go to the next example and what you can do is this is the exact same thing", "tokens": [51308, 370, 437, 393, 321, 360, 718, 311, 352, 281, 264, 958, 1365, 293, 437, 291, 393, 360, 307, 341, 307, 264, 1900, 912, 551, 51588], "temperature": 0.0, "avg_logprob": -0.0878271137902496, "compression_ratio": 1.7862903225806452, "no_speech_prob": 0.006903102155774832}, {"id": 314, "seek": 189588, "start": 1920.3600000000001, "end": 1924.2, "text": " we've just swapped out our function declaration for a uh lander expression", "tokens": [51588, 321, 600, 445, 50011, 484, 527, 2445, 27606, 337, 257, 2232, 2117, 260, 6114, 51780], "temperature": 0.0, "avg_logprob": -0.0878271137902496, "compression_ratio": 1.7862903225806452, "no_speech_prob": 0.006903102155774832}, {"id": 315, "seek": 192420, "start": 1924.44, "end": 1929.88, "text": " these are added in the es6 and basically now if you play this", "tokens": [50376, 613, 366, 3869, 294, 264, 785, 21, 293, 1936, 586, 498, 291, 862, 341, 50648], "temperature": 0.0, "avg_logprob": -0.16985197954399642, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0010816497961059213}, {"id": 316, "seek": 192420, "start": 1933.24, "end": 1939.8, "text": " yep one there you go so i had to wait a second um okay so what's the difference here so the", "tokens": [50816, 18633, 472, 456, 291, 352, 370, 741, 632, 281, 1699, 257, 1150, 1105, 1392, 370, 437, 311, 264, 2649, 510, 370, 264, 51144], "temperature": 0.0, "avg_logprob": -0.16985197954399642, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0010816497961059213}, {"id": 317, "seek": 192420, "start": 1939.8, "end": 1945.8, "text": " use of the lander expression is really a way of forcing static scoping um when otherwise the this", "tokens": [51144, 764, 295, 264, 2117, 260, 6114, 307, 534, 257, 636, 295, 19030, 13437, 795, 26125, 1105, 562, 5911, 264, 341, 51444], "temperature": 0.0, "avg_logprob": -0.16985197954399642, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0010816497961059213}, {"id": 318, "seek": 192420, "start": 1945.8, "end": 1950.3600000000001, "text": " binding would be making use of dynamic scoping um to demonstrate let's have a look at what it", "tokens": [51444, 17359, 576, 312, 1455, 764, 295, 8546, 795, 26125, 1105, 281, 11698, 718, 311, 362, 257, 574, 412, 437, 309, 51672], "temperature": 0.0, "avg_logprob": -0.16985197954399642, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0010816497961059213}, {"id": 319, "seek": 195036, "start": 1950.36, "end": 1957.08, "text": " actually does behind the scenes so if we go to um this babel rebel it shows on the left hand side", "tokens": [50364, 767, 775, 2261, 264, 8026, 370, 498, 321, 352, 281, 1105, 341, 7564, 338, 28293, 309, 3110, 322, 264, 1411, 1011, 1252, 50700], "temperature": 0.0, "avg_logprob": -0.08056055809840683, "compression_ratio": 1.8807692307692307, "no_speech_prob": 0.0032727993093430996}, {"id": 320, "seek": 195036, "start": 1957.08, "end": 1961.32, "text": " this is the exact same thing we have here and we're saying set timeout we're using a lander", "tokens": [50700, 341, 307, 264, 1900, 912, 551, 321, 362, 510, 293, 321, 434, 1566, 992, 565, 346, 321, 434, 1228, 257, 2117, 260, 50912], "temperature": 0.0, "avg_logprob": -0.08056055809840683, "compression_ratio": 1.8807692307692307, "no_speech_prob": 0.0032727993093430996}, {"id": 321, "seek": 195036, "start": 1961.32, "end": 1966.12, "text": " function and this is what it actually transpiles to so what we get is inside here we say first of all", "tokens": [50912, 2445, 293, 341, 307, 437, 309, 767, 7132, 4680, 281, 370, 437, 321, 483, 307, 1854, 510, 321, 584, 700, 295, 439, 51152], "temperature": 0.0, "avg_logprob": -0.08056055809840683, "compression_ratio": 1.8807692307692307, "no_speech_prob": 0.0032727993093430996}, {"id": 322, "seek": 195036, "start": 1966.12, "end": 1972.1999999999998, "text": " let's just keep track of what our disc variable is inside this scope and then it means that when", "tokens": [51152, 718, 311, 445, 1066, 2837, 295, 437, 527, 2983, 7006, 307, 1854, 341, 11923, 293, 550, 309, 1355, 300, 562, 51456], "temperature": 0.0, "avg_logprob": -0.08056055809840683, "compression_ratio": 1.8807692307692307, "no_speech_prob": 0.0032727993093430996}, {"id": 323, "seek": 195036, "start": 1972.1999999999998, "end": 1976.52, "text": " we create this function here and so see how it's lambda here but it's not lambda here so it's really", "tokens": [51456, 321, 1884, 341, 2445, 510, 293, 370, 536, 577, 309, 311, 13607, 510, 457, 309, 311, 406, 13607, 510, 370, 309, 311, 534, 51672], "temperature": 0.0, "avg_logprob": -0.08056055809840683, "compression_ratio": 1.8807692307692307, "no_speech_prob": 0.0032727993093430996}, {"id": 324, "seek": 197652, "start": 1976.52, "end": 1981.08, "text": " just under the hood a regular function what we're doing here isn't it we're now instead of using", "tokens": [50364, 445, 833, 264, 13376, 257, 3890, 2445, 437, 321, 434, 884, 510, 1943, 380, 309, 321, 434, 586, 2602, 295, 1228, 50592], "temperature": 0.0, "avg_logprob": -0.09933920666179825, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002115585608407855}, {"id": 325, "seek": 197652, "start": 1981.08, "end": 1985.48, "text": " this directly because we know this thing is kind of unreliable and there's value changes let's", "tokens": [50592, 341, 3838, 570, 321, 458, 341, 551, 307, 733, 295, 20584, 2081, 712, 293, 456, 311, 2158, 2962, 718, 311, 50812], "temperature": 0.0, "avg_logprob": -0.09933920666179825, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002115585608407855}, {"id": 326, "seek": 197652, "start": 1985.48, "end": 1992.6, "text": " prefer to this um statically defined this variable and we'll call x on that and so then when we log", "tokens": [50812, 4382, 281, 341, 1105, 2219, 984, 7642, 341, 7006, 293, 321, 603, 818, 2031, 322, 300, 293, 370, 550, 562, 321, 3565, 51168], "temperature": 0.0, "avg_logprob": -0.09933920666179825, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002115585608407855}, {"id": 327, "seek": 197652, "start": 1992.6, "end": 1999.72, "text": " that that's how we get this value of one so um effectively what using a lander function does", "tokens": [51168, 300, 300, 311, 577, 321, 483, 341, 2158, 295, 472, 370, 1105, 8659, 437, 1228, 257, 2117, 260, 2445, 775, 51524], "temperature": 0.0, "avg_logprob": -0.09933920666179825, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002115585608407855}, {"id": 328, "seek": 197652, "start": 1999.72, "end": 2005.8799999999999, "text": " is it basically forces JavaScript to make use of static scoping by under the hood going and", "tokens": [51524, 307, 309, 1936, 5874, 15778, 281, 652, 764, 295, 13437, 795, 26125, 538, 833, 264, 13376, 516, 293, 51832], "temperature": 0.0, "avg_logprob": -0.09933920666179825, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002115585608407855}, {"id": 329, "seek": 200588, "start": 2005.88, "end": 2012.6000000000001, "text": " actually adding a um uh a variable to this classical scope and it means that you're not", "tokens": [50364, 767, 5127, 257, 1105, 2232, 257, 7006, 281, 341, 13735, 11923, 293, 309, 1355, 300, 291, 434, 406, 50700], "temperature": 0.0, "avg_logprob": -0.09278683132595486, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.00033533151145093143}, {"id": 330, "seek": 200588, "start": 2012.6000000000001, "end": 2020.6000000000001, "text": " worrying about what the value of this is when this guy's actually in vote so um yeah it's cool", "tokens": [50700, 18788, 466, 437, 264, 2158, 295, 341, 307, 562, 341, 2146, 311, 767, 294, 4740, 370, 1105, 1338, 309, 311, 1627, 51100], "temperature": 0.0, "avg_logprob": -0.09278683132595486, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.00033533151145093143}, {"id": 331, "seek": 200588, "start": 2020.6000000000001, "end": 2026.5200000000002, "text": " so the this binding gives you some cool benefits when you want them when you don't want them there's", "tokens": [51100, 370, 264, 341, 17359, 2709, 291, 512, 1627, 5311, 562, 291, 528, 552, 562, 291, 500, 380, 528, 552, 456, 311, 51396], "temperature": 0.0, "avg_logprob": -0.09278683132595486, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.00033533151145093143}, {"id": 332, "seek": 200588, "start": 2026.5200000000002, "end": 2032.1200000000001, "text": " typically ways to get around having to use it um another way would be calling dot bind on a function", "tokens": [51396, 5850, 2098, 281, 483, 926, 1419, 281, 764, 309, 1105, 1071, 636, 576, 312, 5141, 5893, 14786, 322, 257, 2445, 51676], "temperature": 0.0, "avg_logprob": -0.09278683132595486, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.00033533151145093143}, {"id": 333, "seek": 203212, "start": 2032.12, "end": 2038.84, "text": " and passing it um the value of the current this um but i'm not going to go into that just uh just", "tokens": [50364, 293, 8437, 309, 1105, 264, 2158, 295, 264, 2190, 341, 1105, 457, 741, 478, 406, 516, 281, 352, 666, 300, 445, 2232, 445, 50700], "temperature": 0.0, "avg_logprob": -0.0542832004780672, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.0008693046402186155}, {"id": 334, "seek": 203212, "start": 2038.84, "end": 2046.28, "text": " now because i say the end but there's actually one more thing i want to show you guys okay so", "tokens": [50700, 586, 570, 741, 584, 264, 917, 457, 456, 311, 767, 472, 544, 551, 741, 528, 281, 855, 291, 1074, 1392, 370, 51072], "temperature": 0.0, "avg_logprob": -0.0542832004780672, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.0008693046402186155}, {"id": 335, "seek": 203212, "start": 2046.28, "end": 2053.08, "text": " here we're going to look at actually um what happens in terms of the heap when we are dealing", "tokens": [51072, 510, 321, 434, 516, 281, 574, 412, 767, 1105, 437, 2314, 294, 2115, 295, 264, 33591, 562, 321, 366, 6260, 51412], "temperature": 0.0, "avg_logprob": -0.0542832004780672, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.0008693046402186155}, {"id": 336, "seek": 203212, "start": 2053.08, "end": 2059.48, "text": " with closures so it's a similar function to what we had before we've got an outer we've got a inner", "tokens": [51412, 365, 2611, 1303, 370, 309, 311, 257, 2531, 2445, 281, 437, 321, 632, 949, 321, 600, 658, 364, 10847, 321, 600, 658, 257, 7284, 51732], "temperature": 0.0, "avg_logprob": -0.0542832004780672, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.0008693046402186155}, {"id": 337, "seek": 205948, "start": 2059.48, "end": 2066.44, "text": " we've got a bar it doesn't really get used and we just call everything at the end so let's run this", "tokens": [50364, 321, 600, 658, 257, 2159, 309, 1177, 380, 534, 483, 1143, 293, 321, 445, 818, 1203, 412, 264, 917, 370, 718, 311, 1190, 341, 50712], "temperature": 0.0, "avg_logprob": -0.08382773399353027, "compression_ratio": 1.8443396226415094, "no_speech_prob": 0.001926549943163991}, {"id": 338, "seek": 205948, "start": 2066.44, "end": 2074.28, "text": " guy see what happens okay so we've defined our outer function and actually let me just play through", "tokens": [50712, 2146, 536, 437, 2314, 1392, 370, 321, 600, 7642, 527, 10847, 2445, 293, 767, 718, 385, 445, 862, 807, 51104], "temperature": 0.0, "avg_logprob": -0.08382773399353027, "compression_ratio": 1.8443396226415094, "no_speech_prob": 0.001926549943163991}, {"id": 339, "seek": 205948, "start": 2074.28, "end": 2078.6, "text": " here what actually happens here something's undefined okay what i'm going to do is i'm going to", "tokens": [51104, 510, 437, 767, 2314, 510, 746, 311, 674, 5666, 2001, 1392, 437, 741, 478, 516, 281, 360, 307, 741, 478, 516, 281, 51320], "temperature": 0.0, "avg_logprob": -0.08382773399353027, "compression_ratio": 1.8443396226415094, "no_speech_prob": 0.001926549943163991}, {"id": 340, "seek": 205948, "start": 2079.4, "end": 2086.68, "text": " every step of the way here i'm going to actually take a snapshot this is a heap snapshot and it", "tokens": [51360, 633, 1823, 295, 264, 636, 510, 741, 478, 516, 281, 767, 747, 257, 30163, 341, 307, 257, 33591, 30163, 293, 309, 51724], "temperature": 0.0, "avg_logprob": -0.08382773399353027, "compression_ratio": 1.8443396226415094, "no_speech_prob": 0.001926549943163991}, {"id": 341, "seek": 208668, "start": 2086.68, "end": 2089.96, "text": " basically goes and tells you what are all the things that have been actually like all the", "tokens": [50364, 1936, 1709, 293, 5112, 291, 437, 366, 439, 264, 721, 300, 362, 668, 767, 411, 439, 264, 50528], "temperature": 0.0, "avg_logprob": -0.07379861848544231, "compression_ratio": 2.172727272727273, "no_speech_prob": 0.002251671627163887}, {"id": 342, "seek": 208668, "start": 2089.96, "end": 2094.2799999999997, "text": " objects have been put on the heap um at this point in time so i'm going to play forwards i'm", "tokens": [50528, 6565, 362, 668, 829, 322, 264, 33591, 1105, 412, 341, 935, 294, 565, 370, 741, 478, 516, 281, 862, 30126, 741, 478, 50744], "temperature": 0.0, "avg_logprob": -0.07379861848544231, "compression_ratio": 2.172727272727273, "no_speech_prob": 0.002251671627163887}, {"id": 343, "seek": 208668, "start": 2094.2799999999997, "end": 2100.8399999999997, "text": " going to take another snapshot i'm going to go again take another snapshot i'm going to go again", "tokens": [50744, 516, 281, 747, 1071, 30163, 741, 478, 516, 281, 352, 797, 747, 1071, 30163, 741, 478, 516, 281, 352, 797, 51072], "temperature": 0.0, "avg_logprob": -0.07379861848544231, "compression_ratio": 2.172727272727273, "no_speech_prob": 0.002251671627163887}, {"id": 344, "seek": 208668, "start": 2100.8399999999997, "end": 2108.12, "text": " take another snapshot and then i'm going to go again i think one more snapshot okay cool now what", "tokens": [51072, 747, 1071, 30163, 293, 550, 741, 478, 516, 281, 352, 797, 741, 519, 472, 544, 30163, 1392, 1627, 586, 437, 51436], "temperature": 0.0, "avg_logprob": -0.07379861848544231, "compression_ratio": 2.172727272727273, "no_speech_prob": 0.002251671627163887}, {"id": 345, "seek": 208668, "start": 2108.12, "end": 2115.96, "text": " i'm going to do is i'm going to in each of these places only show the difference between the current", "tokens": [51436, 741, 478, 516, 281, 360, 307, 741, 478, 516, 281, 294, 1184, 295, 613, 3190, 787, 855, 264, 2649, 1296, 264, 2190, 51828], "temperature": 0.0, "avg_logprob": -0.07379861848544231, "compression_ratio": 2.172727272727273, "no_speech_prob": 0.002251671627163887}, {"id": 346, "seek": 211596, "start": 2115.96, "end": 2124.44, "text": " snapshot and the previous one so make sense okay cool so this is trying to see the difference in", "tokens": [50364, 30163, 293, 264, 3894, 472, 370, 652, 2020, 1392, 1627, 370, 341, 307, 1382, 281, 536, 264, 2649, 294, 50788], "temperature": 0.0, "avg_logprob": -0.1114138418169164, "compression_ratio": 1.7251461988304093, "no_speech_prob": 0.004006868228316307}, {"id": 347, "seek": 211596, "start": 2124.44, "end": 2134.04, "text": " what's been allocated what's been newly allocated between between um one snapshot and the next one", "tokens": [50788, 437, 311, 668, 29772, 437, 311, 668, 15109, 29772, 1296, 1296, 1105, 472, 30163, 293, 264, 958, 472, 51268], "temperature": 0.0, "avg_logprob": -0.1114138418169164, "compression_ratio": 1.7251461988304093, "no_speech_prob": 0.004006868228316307}, {"id": 348, "seek": 211596, "start": 2134.04, "end": 2140.12, "text": " so okay snapshot two let's have a look at what happens inside here so we've got back to our sources", "tokens": [51268, 370, 1392, 30163, 732, 718, 311, 362, 257, 574, 412, 437, 2314, 1854, 510, 370, 321, 600, 658, 646, 281, 527, 7139, 51572], "temperature": 0.0, "avg_logprob": -0.1114138418169164, "compression_ratio": 1.7251461988304093, "no_speech_prob": 0.004006868228316307}, {"id": 349, "seek": 214012, "start": 2140.12, "end": 2147.4, "text": " so that's looking at this guy so we create our outer function um okay so we've got a closure being", "tokens": [50364, 370, 300, 311, 1237, 412, 341, 2146, 370, 321, 1884, 527, 10847, 2445, 1105, 1392, 370, 321, 600, 658, 257, 24653, 885, 50728], "temperature": 0.0, "avg_logprob": -0.14230173284357245, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.012052344158291817}, {"id": 350, "seek": 214012, "start": 2147.4, "end": 2152.44, "text": " created here oh interesting so by the time we get to the end of um by the time we get to here", "tokens": [50728, 2942, 510, 1954, 1880, 370, 538, 264, 565, 321, 483, 281, 264, 917, 295, 1105, 538, 264, 565, 321, 483, 281, 510, 50980], "temperature": 0.0, "avg_logprob": -0.14230173284357245, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.012052344158291817}, {"id": 351, "seek": 214012, "start": 2153.4, "end": 2160.7599999999998, "text": " we've created this function and it has a closure object here so this is 124913 uh it's got a context", "tokens": [51028, 321, 600, 2942, 341, 2445, 293, 309, 575, 257, 24653, 2657, 510, 370, 341, 307, 2272, 14938, 7668, 2232, 309, 311, 658, 257, 4319, 51396], "temperature": 0.0, "avg_logprob": -0.14230173284357245, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.012052344158291817}, {"id": 352, "seek": 214012, "start": 2162.04, "end": 2167.96, "text": " the preview okay that's got a lot of random stuff there okay so interesting all right let's look at", "tokens": [51460, 264, 14281, 1392, 300, 311, 658, 257, 688, 295, 4974, 1507, 456, 1392, 370, 1880, 439, 558, 718, 311, 574, 412, 51756], "temperature": 0.0, "avg_logprob": -0.14230173284357245, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.012052344158291817}, {"id": 353, "seek": 216796, "start": 2167.96, "end": 2172.84, "text": " what snapshot three gives us okay so this is actually this is creating a closure this guy's", "tokens": [50364, 437, 30163, 1045, 2709, 505, 1392, 370, 341, 307, 767, 341, 307, 4084, 257, 24653, 341, 2146, 311, 50608], "temperature": 0.0, "avg_logprob": -0.09960264629787868, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.0013249252224341035}, {"id": 354, "seek": 216796, "start": 2172.84, "end": 2178.36, "text": " creating a context so in v8 this is there's a thing called a context capital c not to be confused", "tokens": [50608, 4084, 257, 4319, 370, 294, 371, 23, 341, 307, 456, 311, 257, 551, 1219, 257, 4319, 4238, 269, 406, 281, 312, 9019, 50884], "temperature": 0.0, "avg_logprob": -0.09960264629787868, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.0013249252224341035}, {"id": 355, "seek": 216796, "start": 2178.36, "end": 2188.2, "text": " with an execution context and let me really um okay so uh let's see what we're actually creating here", "tokens": [50884, 365, 364, 15058, 4319, 293, 718, 385, 534, 1105, 1392, 370, 2232, 718, 311, 536, 437, 321, 434, 767, 4084, 510, 51376], "temperature": 0.0, "avg_logprob": -0.09960264629787868, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.0013249252224341035}, {"id": 356, "seek": 216796, "start": 2188.2, "end": 2194.68, "text": " okay so snapshot three that's one two three so at the very beginning when the code enters our", "tokens": [51376, 1392, 370, 30163, 1045, 300, 311, 472, 732, 1045, 370, 412, 264, 588, 2863, 562, 264, 3089, 18780, 527, 51700], "temperature": 0.0, "avg_logprob": -0.09960264629787868, "compression_ratio": 1.8780487804878048, "no_speech_prob": 0.0013249252224341035}, {"id": 357, "seek": 219468, "start": 2194.68, "end": 2202.44, "text": " outer function we have already made a context object which is going to store the two things", "tokens": [50364, 10847, 2445, 321, 362, 1217, 1027, 257, 4319, 2657, 597, 307, 516, 281, 3531, 264, 732, 721, 50752], "temperature": 0.0, "avg_logprob": -0.08023192665793678, "compression_ratio": 1.9494949494949494, "no_speech_prob": 0.0021156147122383118}, {"id": 358, "seek": 219468, "start": 2202.44, "end": 2206.12, "text": " which are being captured here so bar string and inner string okay let's have a look at this so", "tokens": [50752, 597, 366, 885, 11828, 510, 370, 2159, 6798, 293, 7284, 6798, 1392, 718, 311, 362, 257, 574, 412, 341, 370, 50936], "temperature": 0.0, "avg_logprob": -0.08023192665793678, "compression_ratio": 1.9494949494949494, "no_speech_prob": 0.0021156147122383118}, {"id": 359, "seek": 219468, "start": 2206.12, "end": 2213.16, "text": " bar string is captured by bar down here inner string is captured by inner down here and uncaptured", "tokens": [50936, 2159, 6798, 307, 11828, 538, 2159, 760, 510, 7284, 6798, 307, 11828, 538, 7284, 760, 510, 293, 517, 496, 662, 3831, 51288], "temperature": 0.0, "avg_logprob": -0.08023192665793678, "compression_ratio": 1.9494949494949494, "no_speech_prob": 0.0021156147122383118}, {"id": 360, "seek": 219468, "start": 2213.16, "end": 2219.24, "text": " string is actually not captured by anyone we just define that we don't use it so this is interesting", "tokens": [51288, 6798, 307, 767, 406, 11828, 538, 2878, 321, 445, 6964, 300, 321, 500, 380, 764, 309, 370, 341, 307, 1880, 51592], "temperature": 0.0, "avg_logprob": -0.08023192665793678, "compression_ratio": 1.9494949494949494, "no_speech_prob": 0.0021156147122383118}, {"id": 361, "seek": 221924, "start": 2219.24, "end": 2224.2799999999997, "text": " so as soon as we're here we actually JavaScript clearly goes ahead and before it actually goes", "tokens": [50364, 370, 382, 2321, 382, 321, 434, 510, 321, 767, 15778, 4448, 1709, 2286, 293, 949, 309, 767, 1709, 50616], "temperature": 0.0, "avg_logprob": -0.08755109894950434, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0047547644935548306}, {"id": 362, "seek": 221924, "start": 2224.2799999999997, "end": 2228.2799999999997, "text": " and continues writing the code it goes and says okay here's all the things to get to find in our", "tokens": [50616, 293, 6515, 3579, 264, 3089, 309, 1709, 293, 1619, 1392, 510, 311, 439, 264, 721, 281, 483, 281, 915, 294, 527, 50816], "temperature": 0.0, "avg_logprob": -0.08755109894950434, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0047547644935548306}, {"id": 363, "seek": 221924, "start": 2228.2799999999997, "end": 2233.16, "text": " scope okay who's going to be using those things who's going to be capturing those things whoever", "tokens": [50816, 11923, 1392, 567, 311, 516, 281, 312, 1228, 729, 721, 567, 311, 516, 281, 312, 23384, 729, 721, 11387, 51060], "temperature": 0.0, "avg_logprob": -0.08755109894950434, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0047547644935548306}, {"id": 364, "seek": 221924, "start": 2233.16, "end": 2240.04, "text": " you know if anyone inside here if any function captures these variables then we need to actually", "tokens": [51060, 291, 458, 498, 2878, 1854, 510, 498, 604, 2445, 27986, 613, 9102, 550, 321, 643, 281, 767, 51404], "temperature": 0.0, "avg_logprob": -0.08755109894950434, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0047547644935548306}, {"id": 365, "seek": 221924, "start": 2240.04, "end": 2244.2799999999997, "text": " create a context object and put those variables on that context so here we've got one two five", "tokens": [51404, 1884, 257, 4319, 2657, 293, 829, 729, 9102, 322, 300, 4319, 370, 510, 321, 600, 658, 472, 732, 1732, 51616], "temperature": 0.0, "avg_logprob": -0.08755109894950434, "compression_ratio": 1.927710843373494, "no_speech_prob": 0.0047547644935548306}, {"id": 366, "seek": 224428, "start": 2244.36, "end": 2249.88, "text": " one one nine okay interesting we move on and here we enter a block now this could this could", "tokens": [50368, 472, 472, 4949, 1392, 1880, 321, 1286, 322, 293, 510, 321, 3242, 257, 3461, 586, 341, 727, 341, 727, 50644], "temperature": 0.0, "avg_logprob": -0.07189357280731201, "compression_ratio": 1.8983739837398375, "no_speech_prob": 0.004468055907636881}, {"id": 367, "seek": 224428, "start": 2249.88, "end": 2255.1600000000003, "text": " have just been like if you know true um but you actually don't need to have that you can actually", "tokens": [50644, 362, 445, 668, 411, 498, 291, 458, 2074, 1105, 457, 291, 767, 500, 380, 643, 281, 362, 300, 291, 393, 767, 50908], "temperature": 0.0, "avg_logprob": -0.07189357280731201, "compression_ratio": 1.8983739837398375, "no_speech_prob": 0.004468055907636881}, {"id": 368, "seek": 224428, "start": 2255.1600000000003, "end": 2259.48, "text": " just enter a block directly um which is a it's a feature no one uses but i feel like maybe we should", "tokens": [50908, 445, 3242, 257, 3461, 3838, 1105, 597, 307, 257, 309, 311, 257, 4111, 572, 472, 4960, 457, 741, 841, 411, 1310, 321, 820, 51124], "temperature": 0.0, "avg_logprob": -0.07189357280731201, "compression_ratio": 1.8983739837398375, "no_speech_prob": 0.004468055907636881}, {"id": 369, "seek": 224428, "start": 2259.48, "end": 2264.36, "text": " use a bit more um to kind of limit variable scope but at any rate uh it's just here for", "tokens": [51124, 764, 257, 857, 544, 1105, 281, 733, 295, 4948, 7006, 11923, 457, 412, 604, 3314, 2232, 309, 311, 445, 510, 337, 51368], "temperature": 0.0, "avg_logprob": -0.07189357280731201, "compression_ratio": 1.8983739837398375, "no_speech_prob": 0.004468055907636881}, {"id": 370, "seek": 224428, "start": 2264.36, "end": 2271.1600000000003, "text": " demonstration purposes so here we enter the block scope and here we have a block string", "tokens": [51368, 16520, 9932, 370, 510, 321, 3242, 264, 3461, 11923, 293, 510, 321, 362, 257, 3461, 6798, 51708], "temperature": 0.0, "avg_logprob": -0.07189357280731201, "compression_ratio": 1.8983739837398375, "no_speech_prob": 0.004468055907636881}, {"id": 371, "seek": 227116, "start": 2271.16, "end": 2277.3999999999996, "text": " which is captured by bar so if i look in my memory on subject four we get another context here okay", "tokens": [50364, 597, 307, 11828, 538, 2159, 370, 498, 741, 574, 294, 452, 4675, 322, 3983, 1451, 321, 483, 1071, 4319, 510, 1392, 50676], "temperature": 0.0, "avg_logprob": -0.14117436713360726, "compression_ratio": 1.6844444444444444, "no_speech_prob": 0.00214874604716897}, {"id": 372, "seek": 227116, "start": 2278.04, "end": 2283.64, "text": " and it's not really telling us much right now but it has as its previous context so it's like a", "tokens": [50708, 293, 309, 311, 406, 534, 3585, 505, 709, 558, 586, 457, 309, 575, 382, 1080, 3894, 4319, 370, 309, 311, 411, 257, 50988], "temperature": 0.0, "avg_logprob": -0.14117436713360726, "compression_ratio": 1.6844444444444444, "no_speech_prob": 0.00214874604716897}, {"id": 373, "seek": 227116, "start": 2283.64, "end": 2290.7599999999998, "text": " reference to the parent context um the uh same guy was over four one two five one one nine", "tokens": [50988, 6408, 281, 264, 2596, 4319, 1105, 264, 2232, 912, 2146, 390, 670, 1451, 472, 732, 1732, 472, 472, 4949, 51344], "temperature": 0.0, "avg_logprob": -0.14117436713360726, "compression_ratio": 1.6844444444444444, "no_speech_prob": 0.00214874604716897}, {"id": 374, "seek": 227116, "start": 2290.7599999999998, "end": 2295.24, "text": " so that's the same as this guy here and it's got uh both of these strings now have the whole", "tokens": [51344, 370, 300, 311, 264, 912, 382, 341, 2146, 510, 293, 309, 311, 658, 2232, 1293, 295, 613, 13985, 586, 362, 264, 1379, 51568], "temperature": 0.0, "avg_logprob": -0.14117436713360726, "compression_ratio": 1.6844444444444444, "no_speech_prob": 0.00214874604716897}, {"id": 375, "seek": 229524, "start": 2295.24, "end": 2301.16, "text": " use by the time we get to this point uh in the code um so yeah funny that we don't have our um", "tokens": [50364, 764, 538, 264, 565, 321, 483, 281, 341, 935, 2232, 294, 264, 3089, 1105, 370, 1338, 4074, 300, 321, 500, 380, 362, 527, 1105, 50660], "temperature": 0.0, "avg_logprob": -0.06372423701816135, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.003945105709135532}, {"id": 376, "seek": 229524, "start": 2302.7599999999998, "end": 2307.56, "text": " this guy defined um but maybe it's slightly different behavior between functions and", "tokens": [50740, 341, 2146, 7642, 1105, 457, 1310, 309, 311, 4748, 819, 5223, 1296, 6828, 293, 50980], "temperature": 0.0, "avg_logprob": -0.06372423701816135, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.003945105709135532}, {"id": 377, "seek": 229524, "start": 2308.2, "end": 2314.2799999999997, "text": " blocks but at any rate let's go to the next snapshot so let's see the next snapshot is", "tokens": [51012, 8474, 457, 412, 604, 3314, 718, 311, 352, 281, 264, 958, 30163, 370, 718, 311, 536, 264, 958, 30163, 307, 51316], "temperature": 0.0, "avg_logprob": -0.06372423701816135, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.003945105709135532}, {"id": 378, "seek": 229524, "start": 2314.8399999999997, "end": 2320.8399999999997, "text": " the final one is this guy on the other side of bar okay so now we have a closure so that means", "tokens": [51344, 264, 2572, 472, 307, 341, 2146, 322, 264, 661, 1252, 295, 2159, 1392, 370, 586, 321, 362, 257, 24653, 370, 300, 1355, 51644], "temperature": 0.0, "avg_logprob": -0.06372423701816135, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.003945105709135532}, {"id": 379, "seek": 232084, "start": 2320.92, "end": 2327.08, "text": " we've got a bar function and it now references this context so one two five three one three", "tokens": [50368, 321, 600, 658, 257, 2159, 2445, 293, 309, 586, 15400, 341, 4319, 370, 472, 732, 1732, 1045, 472, 1045, 50676], "temperature": 0.0, "avg_logprob": -0.09573277388468827, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0018674941966310143}, {"id": 380, "seek": 232084, "start": 2327.08, "end": 2335.0, "text": " that's the same as this guy and what's inside here okay so now it has funnily enough it has um", "tokens": [50676, 300, 311, 264, 912, 382, 341, 2146, 293, 437, 311, 1854, 510, 1392, 370, 586, 309, 575, 1019, 77, 953, 1547, 309, 575, 1105, 51072], "temperature": 0.0, "avg_logprob": -0.09573277388468827, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0018674941966310143}, {"id": 381, "seek": 232084, "start": 2336.28, "end": 2341.56, "text": " you know what the value of this thing is this um block string but doesn't doesn't say what the name", "tokens": [51136, 291, 458, 437, 264, 2158, 295, 341, 551, 307, 341, 1105, 3461, 6798, 457, 1177, 380, 1177, 380, 584, 437, 264, 1315, 51400], "temperature": 0.0, "avg_logprob": -0.09573277388468827, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0018674941966310143}, {"id": 382, "seek": 232084, "start": 2341.56, "end": 2348.04, "text": " is i don't know why that is maybe it doesn't need it maybe it's going to be minified um but uh at", "tokens": [51400, 307, 741, 500, 380, 458, 983, 300, 307, 1310, 309, 1177, 380, 643, 309, 1310, 309, 311, 516, 281, 312, 923, 2587, 1105, 457, 2232, 412, 51724], "temperature": 0.0, "avg_logprob": -0.09573277388468827, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0018674941966310143}, {"id": 383, "seek": 234804, "start": 2348.04, "end": 2353.16, "text": " any rate it's been captured and then here we've got a point into our previous context which has", "tokens": [50364, 604, 3314, 309, 311, 668, 11828, 293, 550, 510, 321, 600, 658, 257, 935, 666, 527, 3894, 4319, 597, 575, 50620], "temperature": 0.0, "avg_logprob": -0.07551555098774278, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.0018674118909984827}, {"id": 384, "seek": 234804, "start": 2353.16, "end": 2359.96, "text": " our other two things that are captured as well so what that tells us is that uh these context", "tokens": [50620, 527, 661, 732, 721, 300, 366, 11828, 382, 731, 370, 437, 300, 5112, 505, 307, 300, 2232, 613, 4319, 50960], "temperature": 0.0, "avg_logprob": -0.07551555098774278, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.0018674118909984827}, {"id": 385, "seek": 234804, "start": 2359.96, "end": 2367.64, "text": " objects exist in a given scope and they whatever variables from that scope get used by uh other", "tokens": [50960, 6565, 2514, 294, 257, 2212, 11923, 293, 436, 2035, 9102, 490, 300, 11923, 483, 1143, 538, 2232, 661, 51344], "temperature": 0.0, "avg_logprob": -0.07551555098774278, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.0018674118909984827}, {"id": 386, "seek": 234804, "start": 2367.64, "end": 2372.2799999999997, "text": " functions in that scope um or like descendant scopes those will be the ones that end up being", "tokens": [51344, 6828, 294, 300, 11923, 1105, 420, 411, 16333, 394, 795, 30545, 729, 486, 312, 264, 2306, 300, 917, 493, 885, 51576], "temperature": 0.0, "avg_logprob": -0.07551555098774278, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.0018674118909984827}, {"id": 387, "seek": 234804, "start": 2372.2799999999997, "end": 2377.8, "text": " added to the context and then um when you actually you know return one of these functions for example", "tokens": [51576, 3869, 281, 264, 4319, 293, 550, 1105, 562, 291, 767, 291, 458, 2736, 472, 295, 613, 6828, 337, 1365, 51852], "temperature": 0.0, "avg_logprob": -0.07551555098774278, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.0018674118909984827}, {"id": 388, "seek": 237804, "start": 2379.0, "end": 2381.88, "text": " let me go here", "tokens": [50412, 718, 385, 352, 510, 50556], "temperature": 0.0, "avg_logprob": -0.2461259365081787, "compression_ratio": 1.1904761904761905, "no_speech_prob": 0.0034293411299586296}, {"id": 389, "seek": 237804, "start": 2384.12, "end": 2384.68, "text": " and", "tokens": [50668, 293, 50696], "temperature": 0.0, "avg_logprob": -0.2461259365081787, "compression_ratio": 1.1904761904761905, "no_speech_prob": 0.0034293411299586296}, {"id": 390, "seek": 237804, "start": 2388.2799999999997, "end": 2388.92, "text": " run that", "tokens": [50876, 1190, 300, 50908], "temperature": 0.0, "avg_logprob": -0.2461259365081787, "compression_ratio": 1.1904761904761905, "no_speech_prob": 0.0034293411299586296}, {"id": 391, "seek": 237804, "start": 2391.16, "end": 2397.0, "text": " so right now uh in my scope is that's kind of weird why is F not in here", "tokens": [51020, 370, 558, 586, 2232, 294, 452, 11923, 307, 300, 311, 733, 295, 3657, 983, 307, 479, 406, 294, 510, 51312], "temperature": 0.0, "avg_logprob": -0.2461259365081787, "compression_ratio": 1.1904761904761905, "no_speech_prob": 0.0034293411299586296}, {"id": 392, "seek": 239700, "start": 2397.24, "end": 2406.2, "text": " oh because i haven't right yes very good let's call it a const fresh paste say play", "tokens": [50376, 1954, 570, 741, 2378, 380, 558, 2086, 588, 665, 718, 311, 818, 309, 257, 1817, 4451, 9163, 584, 862, 50824], "temperature": 0.0, "avg_logprob": -0.3149707421012547, "compression_ratio": 1.424, "no_speech_prob": 0.006289371754974127}, {"id": 393, "seek": 239700, "start": 2410.2, "end": 2414.52, "text": " hmm quite the same thing outer", "tokens": [51024, 16478, 1596, 264, 912, 551, 10847, 51240], "temperature": 0.0, "avg_logprob": -0.3149707421012547, "compression_ratio": 1.424, "no_speech_prob": 0.006289371754974127}, {"id": 394, "seek": 239700, "start": 2418.12, "end": 2421.08, "text": " i think it's it's behaving differently because of the fact that", "tokens": [51420, 741, 519, 309, 311, 309, 311, 35263, 7614, 570, 295, 264, 1186, 300, 51568], "temperature": 0.0, "avg_logprob": -0.3149707421012547, "compression_ratio": 1.424, "no_speech_prob": 0.006289371754974127}, {"id": 395, "seek": 242108, "start": 2422.04, "end": 2427.16, "text": " i need to just change the actual source code let's do that start again oh disconnected", "tokens": [50412, 741, 643, 281, 445, 1319, 264, 3539, 4009, 3089, 718, 311, 360, 300, 722, 797, 1954, 29426, 50668], "temperature": 0.0, "avg_logprob": -0.12346237356012518, "compression_ratio": 1.7488151658767772, "no_speech_prob": 0.006691972259432077}, {"id": 396, "seek": 242108, "start": 2429.0, "end": 2439.24, "text": " and here we go okay that's better cool so now we have um we can see here we've got this closure", "tokens": [50760, 293, 510, 321, 352, 1392, 300, 311, 1101, 1627, 370, 586, 321, 362, 1105, 321, 393, 536, 510, 321, 600, 658, 341, 24653, 51272], "temperature": 0.0, "avg_logprob": -0.12346237356012518, "compression_ratio": 1.7488151658767772, "no_speech_prob": 0.006691972259432077}, {"id": 397, "seek": 242108, "start": 2439.24, "end": 2444.44, "text": " i think contains the things we cared about for our inner function it does not contain the closure", "tokens": [51272, 741, 519, 8306, 264, 721, 321, 19779, 466, 337, 527, 7284, 2445, 309, 775, 406, 5304, 264, 24653, 51532], "temperature": 0.0, "avg_logprob": -0.12346237356012518, "compression_ratio": 1.7488151658767772, "no_speech_prob": 0.006691972259432077}, {"id": 398, "seek": 242108, "start": 2444.44, "end": 2449.72, "text": " that was made for this guy because that's in its own uh block um but uh through this guy", "tokens": [51532, 300, 390, 1027, 337, 341, 2146, 570, 300, 311, 294, 1080, 1065, 2232, 3461, 1105, 457, 2232, 807, 341, 2146, 51796], "temperature": 0.0, "avg_logprob": -0.12346237356012518, "compression_ratio": 1.7488151658767772, "no_speech_prob": 0.006691972259432077}, {"id": 399, "seek": 244972, "start": 2449.7999999999997, "end": 2455.3199999999997, "text": " does have access to this closure that was defined right up here it contains um not only", "tokens": [50368, 775, 362, 2105, 281, 341, 24653, 300, 390, 7642, 558, 493, 510, 309, 8306, 1105, 406, 787, 50644], "temperature": 0.0, "avg_logprob": -0.12351698141831619, "compression_ratio": 1.864, "no_speech_prob": 0.0026310228276997805}, {"id": 400, "seek": 244972, "start": 2455.8799999999997, "end": 2460.04, "text": " in a string which this guy explicitly captured but also bar string which is something that", "tokens": [50672, 294, 257, 6798, 597, 341, 2146, 20803, 11828, 457, 611, 2159, 6798, 597, 307, 746, 300, 50880], "temperature": 0.0, "avg_logprob": -0.12351698141831619, "compression_ratio": 1.864, "no_speech_prob": 0.0026310228276997805}, {"id": 401, "seek": 244972, "start": 2460.04, "end": 2465.16, "text": " captured so um something to keep in mind if you have a huge you know if you've got two functions", "tokens": [50880, 11828, 370, 1105, 746, 281, 1066, 294, 1575, 498, 291, 362, 257, 2603, 291, 458, 498, 291, 600, 658, 732, 6828, 51136], "temperature": 0.0, "avg_logprob": -0.12351698141831619, "compression_ratio": 1.864, "no_speech_prob": 0.0026310228276997805}, {"id": 402, "seek": 244972, "start": 2465.16, "end": 2469.56, "text": " closing over a bunch of variables and one of them closes over some huge object and the other one", "tokens": [51136, 10377, 670, 257, 3840, 295, 9102, 293, 472, 295, 552, 24157, 670, 512, 2603, 2657, 293, 264, 661, 472, 51356], "temperature": 0.0, "avg_logprob": -0.12351698141831619, "compression_ratio": 1.864, "no_speech_prob": 0.0026310228276997805}, {"id": 403, "seek": 244972, "start": 2469.56, "end": 2475.56, "text": " doesn't but the other one lives on past the lifetime of the parent function then uh you might", "tokens": [51356, 1177, 380, 457, 264, 661, 472, 2909, 322, 1791, 264, 11364, 295, 264, 2596, 2445, 550, 2232, 291, 1062, 51656], "temperature": 0.0, "avg_logprob": -0.12351698141831619, "compression_ratio": 1.864, "no_speech_prob": 0.0026310228276997805}, {"id": 404, "seek": 247556, "start": 2475.56, "end": 2480.12, "text": " be holding onto that object in your in your heap in memory for longer than you want to", "tokens": [50364, 312, 5061, 3911, 300, 2657, 294, 428, 294, 428, 33591, 294, 4675, 337, 2854, 813, 291, 528, 281, 50592], "temperature": 0.0, "avg_logprob": -0.09500137581882706, "compression_ratio": 1.7429906542056075, "no_speech_prob": 0.010166634805500507}, {"id": 405, "seek": 247556, "start": 2481.4, "end": 2488.7599999999998, "text": " but that effectively wraps this up so um hopefully this was a good intro to JavaScript scoping and", "tokens": [50656, 457, 300, 8659, 25831, 341, 493, 370, 1105, 4696, 341, 390, 257, 665, 12897, 281, 15778, 795, 26125, 293, 51024], "temperature": 0.0, "avg_logprob": -0.09500137581882706, "compression_ratio": 1.7429906542056075, "no_speech_prob": 0.010166634805500507}, {"id": 406, "seek": 247556, "start": 2489.4, "end": 2496.52, "text": " how it balances static scoping with dynamic scoping how it supports closures and what actually", "tokens": [51056, 577, 309, 33993, 13437, 795, 26125, 365, 8546, 795, 26125, 577, 309, 9346, 2611, 1303, 293, 437, 767, 51412], "temperature": 0.0, "avg_logprob": -0.09500137581882706, "compression_ratio": 1.7429906542056075, "no_speech_prob": 0.010166634805500507}, {"id": 407, "seek": 247556, "start": 2496.52, "end": 2501.56, "text": " happens on the heap when we are dealing with creating closures so yeah thanks for thanks for", "tokens": [51412, 2314, 322, 264, 33591, 562, 321, 366, 6260, 365, 4084, 2611, 1303, 370, 1338, 3231, 337, 3231, 337, 51664], "temperature": 0.0, "avg_logprob": -0.09500137581882706, "compression_ratio": 1.7429906542056075, "no_speech_prob": 0.010166634805500507}, {"id": 408, "seek": 250156, "start": 2501.56, "end": 2507.48, "text": " watching and um I'll add a link in the description to the original part which goes into some more", "tokens": [50364, 1976, 293, 1105, 286, 603, 909, 257, 2113, 294, 264, 3855, 281, 264, 3380, 644, 597, 1709, 666, 512, 544, 50660], "temperature": 0.0, "avg_logprob": -0.19615813848134633, "compression_ratio": 1.3781512605042017, "no_speech_prob": 0.04205800220370293}, {"id": 409, "seek": 250156, "start": 2507.48, "end": 2511.24, "text": " detail about what's going on behind the scenes thanks for watching", "tokens": [50660, 2607, 466, 437, 311, 516, 322, 2261, 264, 8026, 3231, 337, 1976, 50848], "temperature": 0.0, "avg_logprob": -0.19615813848134633, "compression_ratio": 1.3781512605042017, "no_speech_prob": 0.04205800220370293}], "language": "en"}