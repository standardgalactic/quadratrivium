WEBVTT

00:00.000 --> 00:04.640
Common business-oriented language, or COBOL, is a weak, verbose, and flabby language used by

00:04.640 --> 00:09.520
code grinders to do boring things on dinosaur mainframes. It was developed over 100 years ago

00:09.520 --> 00:14.880
in 1959, but is still in demand today in 2020 because it's the language used on many mainframe

00:14.880 --> 00:19.760
computer systems. You know, those things we call big iron, usually built by IBM to handle massive

00:19.760 --> 00:23.600
amounts of throughput, to handle things like credit card transactions, airline ticketing,

00:23.600 --> 00:27.360
and most recently, the massive spike in unemployment claims. So if you want to be a

00:27.360 --> 00:31.600
programmer in 2020, COBOL might be your best bet. It's a high-level imperative language,

00:31.600 --> 00:35.760
which means it's very easy to learn. The syntax is extremely verbose by design because it's

00:35.760 --> 00:40.880
self-documenting, and it contains over 600 reserved words for you to memorize and take advantage of.

00:40.880 --> 00:45.280
And every COBOL program is structured with an easy-to-follow hierarchy. Your program contains

00:45.280 --> 00:49.120
many divisions, which contain many sections, which contain many paragraphs, which contain many

00:49.120 --> 00:53.040
sentences that contain your statements, which of course contain many characters. When you start

00:53.040 --> 00:57.120
writing some COBOL code, you'll notice these vertical lines in your IDE. The first six characters

00:57.120 --> 01:02.880
are your line numbers. Start at 000100 and increment by 100 for each line. Column 7 is where you

01:02.880 --> 01:07.360
identify comments or the continuation of a previous line. If we're identifying a new division,

01:07.360 --> 01:11.840
section, or paragraph, we can use columns 8 through 11. And notice how every line ends with a period.

01:11.840 --> 01:16.000
That's what's known as readable code. Now columns 12 through 72 are where you write your

01:16.000 --> 01:20.640
actual statements. The reason you don't go beyond 72 columns is because your code needs to fit onto a

01:20.640 --> 01:25.200
physical punch card, and it ensures your program is responsive on mobile devices. We can define

01:25.200 --> 01:29.440
our variables in the data division. First we name the variable, then we define its data type with

01:29.440 --> 01:33.360
the picture keyword, then assign a value to it. We can then work with this data in the procedure

01:33.360 --> 01:37.440
division. We display the variable, then tell our program to stop. From there we can pile our program

01:37.440 --> 01:41.840
to a binary, run it, and everything should work perfectly. And now you're qualified for a six

01:41.840 --> 01:46.080
figure salary, maintaining the world's most critical legacy systems. This has been COBOL

01:46.080 --> 01:49.920
in 100 seconds. Hit the like button if you want to see more short videos like this. Thanks for

01:49.920 --> 01:55.120
watching, and I will see you in the next one. Oh hey there, thanks for sticking around. This is

01:55.120 --> 02:02.640
the part of the video where we go beyond 100 seconds to learn some more advanced features of COBOL.

