{"text": " Common business-oriented language, or COBOL, is a weak, verbose, and flabby language used by code grinders to do boring things on dinosaur mainframes. It was developed over 100 years ago in 1959, but is still in demand today in 2020 because it's the language used on many mainframe computer systems. You know, those things we call big iron, usually built by IBM to handle massive amounts of throughput, to handle things like credit card transactions, airline ticketing, and most recently, the massive spike in unemployment claims. So if you want to be a programmer in 2020, COBOL might be your best bet. It's a high-level imperative language, which means it's very easy to learn. The syntax is extremely verbose by design because it's self-documenting, and it contains over 600 reserved words for you to memorize and take advantage of. And every COBOL program is structured with an easy-to-follow hierarchy. Your program contains many divisions, which contain many sections, which contain many paragraphs, which contain many sentences that contain your statements, which of course contain many characters. When you start writing some COBOL code, you'll notice these vertical lines in your IDE. The first six characters are your line numbers. Start at 000100 and increment by 100 for each line. Column 7 is where you identify comments or the continuation of a previous line. If we're identifying a new division, section, or paragraph, we can use columns 8 through 11. And notice how every line ends with a period. That's what's known as readable code. Now columns 12 through 72 are where you write your actual statements. The reason you don't go beyond 72 columns is because your code needs to fit onto a physical punch card, and it ensures your program is responsive on mobile devices. We can define our variables in the data division. First we name the variable, then we define its data type with the picture keyword, then assign a value to it. We can then work with this data in the procedure division. We display the variable, then tell our program to stop. From there we can pile our program to a binary, run it, and everything should work perfectly. And now you're qualified for a six figure salary, maintaining the world's most critical legacy systems. This has been COBOL in 100 seconds. Hit the like button if you want to see more short videos like this. Thanks for watching, and I will see you in the next one. Oh hey there, thanks for sticking around. This is the part of the video where we go beyond 100 seconds to learn some more advanced features of COBOL.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.64, "text": " Common business-oriented language, or COBOL, is a weak, verbose, and flabby language used by", "tokens": [50364, 18235, 1606, 12, 27414, 2856, 11, 420, 34812, 5046, 11, 307, 257, 5336, 11, 9595, 541, 11, 293, 932, 455, 2322, 2856, 1143, 538, 50596], "temperature": 0.0, "avg_logprob": -0.08253767996123343, "compression_ratio": 1.5982658959537572, "no_speech_prob": 0.004263562150299549}, {"id": 1, "seek": 0, "start": 4.64, "end": 9.52, "text": " code grinders to do boring things on dinosaur mainframes. It was developed over 100 years ago", "tokens": [50596, 3089, 16700, 433, 281, 360, 9989, 721, 322, 23627, 2135, 43277, 13, 467, 390, 4743, 670, 2319, 924, 2057, 50840], "temperature": 0.0, "avg_logprob": -0.08253767996123343, "compression_ratio": 1.5982658959537572, "no_speech_prob": 0.004263562150299549}, {"id": 2, "seek": 0, "start": 9.52, "end": 14.88, "text": " in 1959, but is still in demand today in 2020 because it's the language used on many mainframe", "tokens": [50840, 294, 45608, 11, 457, 307, 920, 294, 4733, 965, 294, 4808, 570, 309, 311, 264, 2856, 1143, 322, 867, 2135, 17265, 51108], "temperature": 0.0, "avg_logprob": -0.08253767996123343, "compression_ratio": 1.5982658959537572, "no_speech_prob": 0.004263562150299549}, {"id": 3, "seek": 0, "start": 14.88, "end": 19.76, "text": " computer systems. You know, those things we call big iron, usually built by IBM to handle massive", "tokens": [51108, 3820, 3652, 13, 509, 458, 11, 729, 721, 321, 818, 955, 6497, 11, 2673, 3094, 538, 23487, 281, 4813, 5994, 51352], "temperature": 0.0, "avg_logprob": -0.08253767996123343, "compression_ratio": 1.5982658959537572, "no_speech_prob": 0.004263562150299549}, {"id": 4, "seek": 0, "start": 19.76, "end": 23.6, "text": " amounts of throughput, to handle things like credit card transactions, airline ticketing,", "tokens": [51352, 11663, 295, 44629, 11, 281, 4813, 721, 411, 5397, 2920, 16856, 11, 29528, 5204, 9880, 11, 51544], "temperature": 0.0, "avg_logprob": -0.08253767996123343, "compression_ratio": 1.5982658959537572, "no_speech_prob": 0.004263562150299549}, {"id": 5, "seek": 0, "start": 23.6, "end": 27.36, "text": " and most recently, the massive spike in unemployment claims. So if you want to be a", "tokens": [51544, 293, 881, 3938, 11, 264, 5994, 21053, 294, 17438, 9441, 13, 407, 498, 291, 528, 281, 312, 257, 51732], "temperature": 0.0, "avg_logprob": -0.08253767996123343, "compression_ratio": 1.5982658959537572, "no_speech_prob": 0.004263562150299549}, {"id": 6, "seek": 2736, "start": 27.36, "end": 31.6, "text": " programmer in 2020, COBOL might be your best bet. It's a high-level imperative language,", "tokens": [50364, 32116, 294, 4808, 11, 34812, 5046, 1062, 312, 428, 1151, 778, 13, 467, 311, 257, 1090, 12, 12418, 32490, 2856, 11, 50576], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 7, "seek": 2736, "start": 31.6, "end": 35.76, "text": " which means it's very easy to learn. The syntax is extremely verbose by design because it's", "tokens": [50576, 597, 1355, 309, 311, 588, 1858, 281, 1466, 13, 440, 28431, 307, 4664, 9595, 541, 538, 1715, 570, 309, 311, 50784], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 8, "seek": 2736, "start": 35.76, "end": 40.879999999999995, "text": " self-documenting, and it contains over 600 reserved words for you to memorize and take advantage of.", "tokens": [50784, 2698, 12, 67, 30439, 278, 11, 293, 309, 8306, 670, 11849, 24819, 2283, 337, 291, 281, 27478, 293, 747, 5002, 295, 13, 51040], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 9, "seek": 2736, "start": 40.879999999999995, "end": 45.28, "text": " And every COBOL program is structured with an easy-to-follow hierarchy. Your program contains", "tokens": [51040, 400, 633, 34812, 5046, 1461, 307, 18519, 365, 364, 1858, 12, 1353, 12, 16931, 1202, 22333, 13, 2260, 1461, 8306, 51260], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 10, "seek": 2736, "start": 45.28, "end": 49.120000000000005, "text": " many divisions, which contain many sections, which contain many paragraphs, which contain many", "tokens": [51260, 867, 24328, 11, 597, 5304, 867, 10863, 11, 597, 5304, 867, 48910, 11, 597, 5304, 867, 51452], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 11, "seek": 2736, "start": 49.120000000000005, "end": 53.04, "text": " sentences that contain your statements, which of course contain many characters. When you start", "tokens": [51452, 16579, 300, 5304, 428, 12363, 11, 597, 295, 1164, 5304, 867, 4342, 13, 1133, 291, 722, 51648], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 12, "seek": 2736, "start": 53.04, "end": 57.120000000000005, "text": " writing some COBOL code, you'll notice these vertical lines in your IDE. The first six characters", "tokens": [51648, 3579, 512, 34812, 5046, 3089, 11, 291, 603, 3449, 613, 9429, 3876, 294, 428, 40930, 13, 440, 700, 2309, 4342, 51852], "temperature": 0.0, "avg_logprob": -0.06579553212551091, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.026755526661872864}, {"id": 13, "seek": 5712, "start": 57.12, "end": 62.879999999999995, "text": " are your line numbers. Start at 000100 and increment by 100 for each line. Column 7 is where you", "tokens": [50364, 366, 428, 1622, 3547, 13, 6481, 412, 13711, 6879, 293, 26200, 538, 2319, 337, 1184, 1622, 13, 4004, 16449, 1614, 307, 689, 291, 50652], "temperature": 0.0, "avg_logprob": -0.07606366101433248, "compression_ratio": 1.6524216524216524, "no_speech_prob": 0.010650763288140297}, {"id": 14, "seek": 5712, "start": 62.879999999999995, "end": 67.36, "text": " identify comments or the continuation of a previous line. If we're identifying a new division,", "tokens": [50652, 5876, 3053, 420, 264, 29357, 295, 257, 3894, 1622, 13, 759, 321, 434, 16696, 257, 777, 10044, 11, 50876], "temperature": 0.0, "avg_logprob": -0.07606366101433248, "compression_ratio": 1.6524216524216524, "no_speech_prob": 0.010650763288140297}, {"id": 15, "seek": 5712, "start": 67.36, "end": 71.84, "text": " section, or paragraph, we can use columns 8 through 11. And notice how every line ends with a period.", "tokens": [50876, 3541, 11, 420, 18865, 11, 321, 393, 764, 13766, 1649, 807, 2975, 13, 400, 3449, 577, 633, 1622, 5314, 365, 257, 2896, 13, 51100], "temperature": 0.0, "avg_logprob": -0.07606366101433248, "compression_ratio": 1.6524216524216524, "no_speech_prob": 0.010650763288140297}, {"id": 16, "seek": 5712, "start": 71.84, "end": 76.0, "text": " That's what's known as readable code. Now columns 12 through 72 are where you write your", "tokens": [51100, 663, 311, 437, 311, 2570, 382, 49857, 3089, 13, 823, 13766, 2272, 807, 18731, 366, 689, 291, 2464, 428, 51308], "temperature": 0.0, "avg_logprob": -0.07606366101433248, "compression_ratio": 1.6524216524216524, "no_speech_prob": 0.010650763288140297}, {"id": 17, "seek": 5712, "start": 76.0, "end": 80.64, "text": " actual statements. The reason you don't go beyond 72 columns is because your code needs to fit onto a", "tokens": [51308, 3539, 12363, 13, 440, 1778, 291, 500, 380, 352, 4399, 18731, 13766, 307, 570, 428, 3089, 2203, 281, 3318, 3911, 257, 51540], "temperature": 0.0, "avg_logprob": -0.07606366101433248, "compression_ratio": 1.6524216524216524, "no_speech_prob": 0.010650763288140297}, {"id": 18, "seek": 5712, "start": 80.64, "end": 85.2, "text": " physical punch card, and it ensures your program is responsive on mobile devices. We can define", "tokens": [51540, 4001, 8135, 2920, 11, 293, 309, 28111, 428, 1461, 307, 21826, 322, 6013, 5759, 13, 492, 393, 6964, 51768], "temperature": 0.0, "avg_logprob": -0.07606366101433248, "compression_ratio": 1.6524216524216524, "no_speech_prob": 0.010650763288140297}, {"id": 19, "seek": 8520, "start": 85.2, "end": 89.44, "text": " our variables in the data division. First we name the variable, then we define its data type with", "tokens": [50364, 527, 9102, 294, 264, 1412, 10044, 13, 2386, 321, 1315, 264, 7006, 11, 550, 321, 6964, 1080, 1412, 2010, 365, 50576], "temperature": 0.0, "avg_logprob": -0.05318062040540907, "compression_ratio": 1.7104477611940299, "no_speech_prob": 0.12588442862033844}, {"id": 20, "seek": 8520, "start": 89.44, "end": 93.36, "text": " the picture keyword, then assign a value to it. We can then work with this data in the procedure", "tokens": [50576, 264, 3036, 20428, 11, 550, 6269, 257, 2158, 281, 309, 13, 492, 393, 550, 589, 365, 341, 1412, 294, 264, 10747, 50772], "temperature": 0.0, "avg_logprob": -0.05318062040540907, "compression_ratio": 1.7104477611940299, "no_speech_prob": 0.12588442862033844}, {"id": 21, "seek": 8520, "start": 93.36, "end": 97.44, "text": " division. We display the variable, then tell our program to stop. From there we can pile our program", "tokens": [50772, 10044, 13, 492, 4674, 264, 7006, 11, 550, 980, 527, 1461, 281, 1590, 13, 3358, 456, 321, 393, 14375, 527, 1461, 50976], "temperature": 0.0, "avg_logprob": -0.05318062040540907, "compression_ratio": 1.7104477611940299, "no_speech_prob": 0.12588442862033844}, {"id": 22, "seek": 8520, "start": 97.44, "end": 101.84, "text": " to a binary, run it, and everything should work perfectly. And now you're qualified for a six", "tokens": [50976, 281, 257, 17434, 11, 1190, 309, 11, 293, 1203, 820, 589, 6239, 13, 400, 586, 291, 434, 15904, 337, 257, 2309, 51196], "temperature": 0.0, "avg_logprob": -0.05318062040540907, "compression_ratio": 1.7104477611940299, "no_speech_prob": 0.12588442862033844}, {"id": 23, "seek": 8520, "start": 101.84, "end": 106.08, "text": " figure salary, maintaining the world's most critical legacy systems. This has been COBOL", "tokens": [51196, 2573, 15360, 11, 14916, 264, 1002, 311, 881, 4924, 11711, 3652, 13, 639, 575, 668, 34812, 5046, 51408], "temperature": 0.0, "avg_logprob": -0.05318062040540907, "compression_ratio": 1.7104477611940299, "no_speech_prob": 0.12588442862033844}, {"id": 24, "seek": 8520, "start": 106.08, "end": 109.92, "text": " in 100 seconds. Hit the like button if you want to see more short videos like this. Thanks for", "tokens": [51408, 294, 2319, 3949, 13, 9217, 264, 411, 2960, 498, 291, 528, 281, 536, 544, 2099, 2145, 411, 341, 13, 2561, 337, 51600], "temperature": 0.0, "avg_logprob": -0.05318062040540907, "compression_ratio": 1.7104477611940299, "no_speech_prob": 0.12588442862033844}, {"id": 25, "seek": 10992, "start": 109.92, "end": 115.12, "text": " watching, and I will see you in the next one. Oh hey there, thanks for sticking around. This is", "tokens": [50364, 1976, 11, 293, 286, 486, 536, 291, 294, 264, 958, 472, 13, 876, 4177, 456, 11, 3231, 337, 13465, 926, 13, 639, 307, 50624], "temperature": 0.0, "avg_logprob": -0.1334698735451212, "compression_ratio": 1.2913907284768211, "no_speech_prob": 0.027583692222833633}, {"id": 26, "seek": 10992, "start": 115.12, "end": 122.64, "text": " the part of the video where we go beyond 100 seconds to learn some more advanced features of COBOL.", "tokens": [50624, 264, 644, 295, 264, 960, 689, 321, 352, 4399, 2319, 3949, 281, 1466, 512, 544, 7339, 4122, 295, 34812, 5046, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1334698735451212, "compression_ratio": 1.2913907284768211, "no_speech_prob": 0.027583692222833633}], "language": "en"}