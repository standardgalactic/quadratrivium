{"text": " All right. Welcome to this week's Non-Pictive Geometry and Topology Seminar. It's our pleasure today to have Petr Zeeman from the Technical University of Denmark, who will tell us about quantum automorphism groups of graphs. Thank you for inviting me. So in this talk, I will talk about, as you said, quantum automorphism groups of graphs, and this work is based on those two quite recent papers with those people that are listed here. And so I'm currently a postdoc with David Robertson, and the project we are working on is in the intersection of graph theory and quantum information theory. So somehow, graph theory is used to study some concepts in quantum information theory. In particular, the area of graph theory is graphomorphisms, which I will talk about a little bit. And at some point in some works, quantum groups of graphs occur, and these two works are sort of like a bridge between those two areas in some sense, since probably from the quantum group side, there are two groups of people that work on quantum groups and that work on graph theory, and those groups usually don't know much about the things that the other ones work on. And basically, what I would like to a lot focus on in this talk is to show you some techniques from combinatorics that we used to obtain some, like in combinatorics, the combinatorial analog would be some simple results about automorphism groups of graphs, but for some reason, these results did not at all exist in the relatively recent but not that recent field of quantum automorphism groups of graphs. So let's start with just the notion of the graph isomorphism. So two graphs are isomorphic. Basically, if we can find a permutation or a bijective mapping between the vertices of one graph to the other graph, such that this mapping preserves adjacencies and non-agencies. So in other words, the graphs are exactly the same up to some relabeling of the vertices. We denote it like this. And so alternatively, this alternative two points of view will play a role here. So alternatively, one could view it if you take the adjacency matrices of the corresponding graphs and you would have a permutation matrix that has to commute with those adjacency matrices. So that's an equivalent definition of isomorphism of graphs. And another very impressive theorem was given by Lova's in a previous century in 1967, which basically characterizes this relation of being isomorphic by the following counting of homomorphism. So homomorphism of between two graphs is like isomorphism, but you relax the condition a little bit. It's a mapping that only has to preserve adjacencies. So for example, you can have a homomorphism from a bipartite graph to an edge. So and this notation means that we count the number of possible homomorphisms from some graph F to the graph G. So the isomorphism relation between two graphs is characterized by homomorphism counting. So the homomorphism counts the number of homomorphism from each possible graphs to those two graphs. If it's the same, then the graphs are isomorphic and also the other way. Now it's not necessary to just restrict ourselves to all graphs. We can use various families of graphs. So there is a similar notion of homomorphism indistinguishability, where we take some family of graphs and do these homomorphism counts within that family of graphs. And then we get a notion of homomorphism indistinguishability, which depends on that particular cross of graphs. So here we have a table of some results. And this is the Lovaas theorem, where we take the family of graphs to be all graphs. And when you take various other, let's say, natural families of graphs, you get other similarity relation between those classes of graphs, like for cycles. If you just take cycles, then this corresponds to the cospectrality of adjacency matrices, which means that the multisets of eigenvalues of the adjacency matrices of graphs is the same. Cycles and paths would be cospectral components. Trees, this is actually fractional isomorphism. So fractional isomorphism, you get by relaxing this equation here. So instead of a permutation matrix, you would use something called doubly stochastic matrix, which is basically that the rows have to sum to one. And then there is a class of bounded trivids, trivided most k. And this corresponds to indistinguishability by something called k-dimensional Weisfer-Lehmann algorithm, which I will talk about later. But it's just some procedure on graphs, but I will talk about it. But trivid k is some parameter of graphs, which tells you how much the graph is close to a tree. And then tree depth is something similar. So for various classes, we have notions, and then this is the important one here, that if you take planar graphs, this is a quite recent result that actually corresponds to a notion of quantum isomorphism. So homomorphism indistinguishability, homomorphism indistinguishability when you restrict yourself to planar graphs. So in other words, what we will see being quantum isomorphic, the result is that it's like having the same homomorphism counts from planar graphs. So, okay, so just a little bit about what is this quantum isomorphism. So this that this small home, this is just numbers, numbers, yeah, yeah. Number of homomorphism, yes. So this notion of quantum isomorphism comes from the notion of a non-local game, which is an important concept in quantum information theory. I will just briefly introduce it. So in the game, you have two players, Alice and Bob, and a verifier. And both of the players have some finite input sets, X, A, X, B corresponding to those players, and some finite output sets, Y, A, Y, B. And then you have a Boolean predicate, which is basically a function, zero one function from this Cartesian product. And so basically the players are asked a question from the input, and they have to answer, and the players win if this is evaluated to one. They cannot communicate after receiving questions, but they can decide on a strategy, what they will do. And there is only one round of the game, and one is concerned with perfect strategies in which players win the probability one. And now what kind of strategies can you have? You can have deterministic strategies, where you have just some functions, which deterministically say what will be the answers for Alice and Bob. Then you can have randomized strategies, which are not that much better, but where you can use some randomness potentially. And then you can have quantum strategies, where this Alice and Bob will share some entangled quantum state and use it to get answers. So let's immediately look at this GH isomorphism game. So we have two graphs, G and H. And the intuition is that Alice and Bob want to convince the referee that the graphs are isomorphic. So here is the setup basically similar that the Alice and Bob are asked some questions. Well, now the questions are the input sets are the vertices of the graph, also the output set. And what must be satisfied is that the relation between H and H prime is the same as a relation between G and G prime. So relation in the sense adjacency, not adjacency. So again, the players cannot communicate, there is only one round, and they must win with the probability one. And the theorem is that basically these classical players can win classical in the sense that they have like a deterministic strategy, if and only if the graphs are isomorphic. And now to define the quantum isomorphism is to basically turn this definition around and say that the graphs are quantum isomorphic if quantum players can win this game. So that's basically a definition that the graphs are quantum isomorphic if quantum players can win this GH isomorphism game. What does it mean just briefly is that here we have a shared entangled state between those players. And basically, so Alice and Bob share this quantum system in some states psi, which is basically a unit vector in some Hilbert space. And upon receiving this vertex G, Alice performs some measurement e g and this e g is basically some set of operators satisfying these conditions, which is based on the quantum formalism. And the same same is done by Bob, that he he does the same, these operators can commute. And there is some probability probability that the players respond H H prime, given G G prime. So one can reformulate this in using the notion of quantum permutation matrix. So here we have this that a matrix whose entries are p i j. And these are elements of some sister algebra is a quantum permutation matrix also called magic unitary. If we have this that each p i j is a projection, so it must satisfy these relations. And these these matrices in the sort of in the row and column must sum up to one. And the theorem by Lupini-Manchi-Sky-Robertson is that this graph quantum graph isomorphism is equivalent with commuting with a quantum permutation permutation matrix. So so it's it's can be expressed in a similar framework as the other similarity notions like isomorphism is just commuting or fractional isomorphism with with doubly stochastic matrix. And here we have commuting with this quantum permutation matrix. So formally formally this this is just written out what does it mean formally that these things commute. Yes, and it's important to say that quantum isomorphism is actually undecidable problem compared to the graph isomorphism problem which is clearly decidable where you just can can try all bijections between two graphs. And there I'm not stating not showing it here but there is an example of graphs that are not isomorphic but are quantum isomorphic. Right now I want to get to the somehow into the quantum isomorphism groups of graphs and let's just recall that the isomorphism groups of graphs basically express the symmetries of graphs and so so basically an isomorphism is just an isomorphism from a graph to itself. So it's a bijective mapping with which again preserves adjacencies and similarly automorphisms form a group under composition and it can be equivalently expressed using such equation that the adjacency matrix has to commute with a permutation matrix. Yeah so this in particular graph has a dihedral group d5 as an automorphism group we can do just reflections and rotations here. Okay so you probably know much more about these things but I'm just mentioning here that we have the notion of compact groups there is a correspondence between compact groups and commutative sister algebras then when we take the sister algebras to be non commutative then from there we go to compact quantum groups. So we now immediately say what is a quantum automorphism group of a graph. So this is definition according to Banica and basically so we say what is this sister algebra in this case so the c of qg that's how we'll denote the quantum automorphism group of graph is the universal sister algebra generated by the elements pij and satisfying basically these following relations which we had similar relations before and these first two relations correspond to the fact that sort of the p made up of this entries pij is a quantum permutation matrix and this last one corresponds sort of to this commuting equation. So if we require those pij to commute then then we get that the c of algae the algebra of functions on the automorphism group of graph and the pij would be a function taking an automorphism to the ij entry of the matrix representation and this matrix p is then called a fundamental representation of qg. Now let's connect it to quantum isomorphisms and so let p be the fundamental representation of qg and we can define the following relation that ij corresponding to some vertices let's say of the graph i is in relation with j if pij is not a zero. Now the theorem or lemma is that this is actually an equivalent relation and the orbits of the or quantum orbits are defined to be these equivalence classes of this of this relation and so the how we connected with the isomorphism quantum isomorphism is that if g and h are connected graphs then they are quantum isomorphic if and only if there exists g one vertex in the first graph and one vertex in the second graph which are in the same orbit of the union of the graphs which is sort of mimicking what is expected in classical automorphism groups of graphs i will mention it also later. It is a very important theorem which will actually provide us with the combinatorial tools that can be used to study quantum automorphism groups of graphs and this is exactly the following so let g be a graph and now i will define this two-dimensional Weissfer-Lehmann algorithm shortly but it's some kind of algorithm that creates a partition on the graph which is automorphism invariant in the classical automorphism group so we have this partition of the vertices and which is constructed let's say by this two-dimensional Weissfer-Lehmann algorithm and if two vertices belong in two different colors or partitions then this pij is equal to zero so in other words they are in different quantum orbits so so this is very important very very useful tool in general and it's actually this result is due to also these people and this is very powerful tool powerful combinatorial tool to use and it appears in many many different areas so it's actually i think quite fascinating result and there is also and i will talk about this there is also a better version of this two-dimensional Weissfer-Lehmann algorithm but it is no longer useful for quantum groups because as far as i understand it's not really possible to define quantum quantum orbitals like analogs of orbitals which are basically the orbits of the action of the group induced on the Cartesian product of the set on which is acting so yeah so if you remember in the beginning we had this slide where this notion of k-dimensional Weissfer-Lehmann indistinguishability is equivalent to homomorphism counts into graphs of this bounded trivite so then there was the result by robertson manjiska which says that quantum isomorphism is equivalent to counting homomorphisms from planar graphs so this is another reason why higher dimensional Weissfer-Lehmann doesn't work here is this because all planar like all trivite graphs at most two are planar but trivite graphs at most three are not all planar so that's another let's say reason why this Weissfer-Lehmann doesn't work anymore in higher dimension now let's finally talk about this okay Weissfer-Lehmann in a bit so now i want to a little bit talk about the graph isomorphism problem because that's actually the motivation for this Weissfer-Lehmann algorithm so the graph isomorphism problem is just the computational variant of this graph isomorphism so basically we'd get two graphs and we want to answer yes if and only if the the graphs are isomorphic and there is actually a polynomial time equivalent problem which is computing the generating set of the automorphism group of the graph so actually this is very similar to what we said before about quantum groups and quantum isomorphism that to to see this why why this is equivalent or at least one direction is to just consider two connected graphs and then take the disjoint union and basically if there is an automorphism taking one to the other then then we know that they must be isomorphic when there is a generator in the generating set of the automorphism group so the currently best known algorithm for graph isomorphism runs in this time which is called quasi polynomial and it is actually heavily based on group theory and just why this problem is actually interesting is that from the complexity theory point of view actually you can have basically things that can happen and each of them would be very interesting like if so the goal is usually to solve some problem in polynomial time and if you could solve it in polynomial time then it means that you probably have to invent some new mathematics if it was mp complete which is like the notion of algorithmic hardness then then something called polynomial time hierarchy collapses which is basically part of complexity theory and if this collapses then many people believe that this doesn't collapse so they believe there is evidence so that it should not be mp complete and when it's intermediate somewhere in between then it would resolve the famous p versus mp question so so this problem originated from some practical applications but actually for practical applications it's pretty much solved actually by these vise or lemma that I will mention it works very well in most of the practical cases but yeah so why is this problem actually difficult is that these algorithms are actually heavily based on group theory and one of the one of the main parts is to do some recursive algorithm and the problem the problem are are different complication complicated actions of some large group like if we have this simple graph then it has the automorphism group Sn and it has the so-called natural action on the set one to five which basically doing what you expect to just permeate the vertices but if you care to guess okay I'm missing an edge here oh no what is the automorphism group of this graph which is the well-known peterson graph yeah it's also s5 sorry s5 yes it was s5 yeah it's s5 but now it's acting like on 10 points and actually you cannot find like partition into into non-trivial blocks so like partition that is preserved by the action you can only partition it trivially and this means that action is primitive and you cannot do recursion so the problem is in this isomorphism testing with large large groups which have not quasi-polynomial order but it is a large order and complicated action that you cannot decompose okay so let's get to this vise-for-lemon so first the simpler version of the vise-for-lemon is just a color refinement algorithm which is something that probably if you were given as a homework to solve the isomorphism problem then probably this would be the first thing that would occur to you is that you just take two graphs and you first color all the vertices uniformly and now you look at each vertex and see how many what is the degree of that vertex and if you know that the degree is different then you surely cannot map it to some other vertex with a different degree so then you can recall the graph based on this you see that the blue vertices have the same degrees and the red vertices have the same degrees now you iterate this process until you get something stable that no longer can be refined and then basically if you end up with a different colorings then you can say that these these things are definitely not isomorphic but if you end up with somehow the same colorings then you really do not know now the vise-for-lemon algorithm does something better so instead of just coloring the vertices it's coloring the pairs of vertices right so how does it how does it work so here we have just this very simple graph and if you want to depict the pairs of vertices we can just depict them by some arrows so here is the the pairs of vertices that occur in this graph and we give it some initial coloring or initial partition so this green color corresponds that there to the fact that there is no edge here and this red color corresponds to the to the pairs of the form uu let's say and this blue corresponds to the edges now we count we construct a new partition in the next step yes in the initial coloring we and actually it will be recolored as you will see so the in the initial coloring all pairs that correspond to the edges to the actual edges will be colored the same and all pairs that correspond to the non-edges and the diagonal of the yeah and in the next iteration we do the following counting so for each pair uv of some color k and every ij we count the number of vertices such that there is such a triangle in the graph so the base of the triangle is the uv with color k and we count the number of vertices w such that there is the first step in color i and the second step in color j of course this k ij can be possibly the same they don't have to be all distinct and then for each pair we do this count and then in the next step we recolor the pairs based on these counts so the next step here would look something like this so actually you will get some some new colors on on here and the color and the new colors here and this actually makes sense because it should be approximating the orbits of the automorphism group and this that this vertex got orange these two vertices got orange color and this remained red actually makes sense because these two vertices here should be in a different orbit and these vertex and of course it doesn't work perfectly but it works very well and of course you can construct some examples where it doesn't work but it's a very as i said the connection with the quantum groups is actually also approximates the quantum orbit so basically whatever is distinguished by the vise for lemma you can also use it when studying the quantum group okay so what we actually did we colored the aj-sense matrix and now the idea of this vise for lemma you can think of it as basically constructing invariants in mathematics we distinguished objects by constructing invariants like the dimension of a vector space of or more complicated like in algebraic topology some homology groups so this is something similar basically because we colored the aj-sense matrix and we actually constructed some coherent algebra which is generated by the following matrices so to each color you can actually assign a zero zero one matrix so like this uh so here you have uh some these these are basically zero one matrices where the ones are exactly at those places which are of the same color and so in this case this coordinate algebra would be generated by these five matrices and it is like a matrix algebra satisfying the following condition so the first condition is that all of the matrices so this generating matrices might sum up to all ones matrix so which is here clear that if you sum it all up you get the all ones matrix so then there has to be has to be some some subset of the matrices that sum up to identity so in this case it would be this orange matrix and this red matrix they sum up to the identity so this basically tells you that is actually also approximating not only the two orbits of the graph but also the orbits so it should be more powerful than just the degree refinement and then if you take any pair of matrices if you use the bad student product the component wise product or true product then then you get the zero matrix and then you have the transpose matrix there it's like for example here we have a pair of transpose matrices and then the last condition is that the product of the matrix can be expressed in such a in such a sum and this number c i j actually are some constants that corresponds to this counting of triangles when it's finally stable so we have this kind of matrix algebra on top of the graph and if these algebras are isomorphic then or non-isomorphic then we can distinguish the graphs by this Weisfer Lehmann and if they are the same then we cannot make a conclusion now you can go even yes yes it's like basically it's the Weisfer Lehmann actually doesn't only have to be applied for graphs you can start with any because each each each of these matrices zero matrices can be also interpreted as just some binary relation right so you are basically starting with a bunch of relations and the Weisfer Lehmann algorithm will find what is called a coherent closure so the smallest coordinate algebra satisfying these conditions that contains those relations so but when you want to apply it for graphs you start with the specific three relations that I depicted but it's not necessary to do that yeah yes in this case it's just the adjacency matrix but in general you can get you can start with any bunch of relations yeah and you can go further you can do k-dimensional Weisfer Lehmann so here instead of coloring k tuples sorry two tuples you will be coloring k tuples but I don't want to get too much in today's because as I said it's not anymore relevant for quantum groups but but there are some very interesting connections like for example the k-dimensional Weisfer Lehmann distinguishes two graphs if and only if these graphs are distinguishable by k plus one variable sentence with counting quantifiers so for example here you have two graphs that this cycle and these two triangles so these are all regular graphs so one-dimensional Weisfer which was the color refinement is actually also called one-dimensional Weisfer Lehmann algorithm this doesn't distinguish these two graphs because all the vertices are the same degree so it doesn't do anything basically but you can distinguish them with two-dimensional Weisfer Lehmann and this would correspond to some formula in three variables you can implement this distance formula between the two vertices with one extra variable so this would be like a three variable formula that also distinguishes those two graphs so that's a connection to logic and then there are many more very interesting connections like integer linear programming as I said in the beginning the homomorphism counting that this homomorphism in distinguishability for bounded three-width graphs is equivalent to to being distinguishable by k-dimensional Weisfer Lehmann okay let's go somehow back to the quantum groups and um so I uh what what we did in our work we basically did a quantum group quantum underwater group of graph version of two classical results and I will mention them now so first of all like uh Frux theorem is quite old and it says that for every graph there or sorry for every group there you can construct a graph with the isomorphic automorphism group and actually the quantum analog of this Frux theorem does not hold even for quantum permutation groups and so but we are still interested in some quantum automorphism groups of restricted classes of graphs because a lot of the results about quantum automorphism groups of graphs were were in the spirit of analyzing whether a given graph has or does not have quantum symmetry or maybe some calculations for for some for some specific graphs let's say but uh it's it's kind of interesting that uh the the quantum automorphism groups of trees which we looked at uh was was not so much now and so to do that I want to recall a first product of groups so first product of groups and we will need the quantum analog of that first product of groups uh is like when we want to determine the automorphism group of two graphs if they are not isomorphic we can just use a direct product to construct the automorphism group but if they are isomorphic no longer works with uh the uh direct product because if you look at the structure of the automorphism group uh it's actually uh not a direct product if it was a direct product then this uh front square and the back square is the Cayley graph would be different so sorry the same if it was a direct product so it's just a depiction nice depiction of the structure of the group uh but this uh is described by the rest product and by that I just mean the following so uh if I have two groups and uh a set omega on on which q is acting then I can take the direct product like for each for each element of the set omega I take a group a copy of the group D and take the direct product of this and um and then the rest product is actually naturally defined as a semi-direct product uh and the the semi-direct product is defined by this action of of of q on the coordinates of this let's say vectors or uh omega tuples in in in this direct product in a natural way so just by action on the coordinates so that's the rest product and what we can do with this red product is for example to determine the automorphism group of a disconnected graph by the following formula so if we have like a bunch of copies of some graph then this automorphism group will be just the automorphism group of the component uh rest producted with the symmetric group and so in general if we have a bunch of connected components xi then we can use the following formula to compute the whole automorphism group uh based on the automorphism groups of the individual graphs and this actually can already give us a proof of a very neat theorem and this is one of the result that we will have a quantum analog for so this maybe is a very interesting theorem that could probably be even in some undergraduate course which basically gives a description of all the automorphism groups of trees and it's and it's quite quite simple so it's basically just an inductive description so there is a trivial group in the class and if there are two groups then there is a direct product and if there is a group then there is it's worth product with a symmetric group no so how to see this so if if we have uh if we have a group g and h then we can construct a tree with the direct product just by putting those trees onto a common root and maybe if g and h is the same so g equals h we can just add one vertex to prevent swapping so that we have the direct product and if you want to construct the rest product it's also easy we just take a copy of one tree uh or n copies of the tree then attach it to the common root and we get the rest product with the symmetric group on the other hand if you want to prove that these are all the groups then we can just take any tree delete delete the root it's okay enough to consider root trees delete the root apply the formula from the previous slides for disconnected graphs and notice that only only rest products and direct products occur there so so so the group must be in this in this class so now we have um let so the class qt is the class of all quantum automorphism groups of trees that can be described as follows so here instead of the direct product we will have a free product of the of the quantum groups and instead of the rest product we'll just have uh the so-called free rest product with a quantum symmetry group s and plus there is which which contains the contains the classical symmetry group and here um yeah it's just mentioned what I already said and there was a result by Fulton in 2006 who actually showed that the automorphism that the trees which have classical automorphism group s2 to the k have quantum symmetry but uh yeah this is of course contained in our result as well and um only recently only recently uh there has been almost at the same time publish a paper by some other person who I forgot the name but he actually also arrived to this result that we have and also for maybe some other classes of graphs uh by using completely different methods so doesn't use vice for lemma or so on so here I have again the definition of the quantum automorphism group of a graph but I can just go quickly because here um we have um just what we need something more is to add some condition so because we want to work with colored graphs right so we want to have uh some colors on the vertices and we want to preserve these colors so we just there is just some extra condition for that here is mentioned again quantum isomorphism let's just go further and uh so with quantum automorphism groups something that is uh very easy in the classical automorphism groups has to be checked very carefully so we have some bunch of operations that we use and for each we have to prove that this actually preserves the quantum automorphism group uh but this may be very obvious in the classical way but still we need it so one of the operation is for example that if you have just an independent set which is a union of colors then we can add edges between all the pairs of vertices in s so just something like this right so you have two color classes and you just add all the edges between that uh I mean it's a very simple thing but it has to be checked carefully with quantum groups um or adding a complete bipartite graph between two disjoint sets that are also union of color classes so something like this you have some color classes and you add like a complete bipartite graph between these so this also preserves quantum automorphism group or changing this is like very very seems very trivial that changing the color of some monochromatic vertex set to a different color or adding an isolated vertex of a color that no longer existed so because what do what we want to do we want to with quantum groups we also want to use some similar kind of induction as is used for regular trees but um we need to transfer from regular trees um sorry regular automorphism groups of trees we need to transfer from under unrooted trees to rooted trees so that we have some option for an induction and we we basically use this simple operation that we proved that preserve quantum automorphism groups to to replace undirected trees with rooted trees so how is it done like using this operation is very simple so you just color the vertices then you remove an edge so you can also reverse the operation then you add a vertex of a different color then you add like the complete bipartite graph between two color classes and then you uncolor and so it seems very trivial but somehow with quantum groups one has to check everything carefully that it works so it's like the process of rotification you can just basically introduce a root to to an unrooted tree oh i forgot to mention that every tree has a center which is either a vertex and edge which is like a vertex and edge which is like a subset of vertices that is equally distant from the leaves of the tree and we do this this process that was depicted here with the center and that is also de-rotification so so really that the class of rooted trees is exactly the same as an unrooted tree so rooted trees are basically just like trees with one distinguished vertex with one colored vertex which has to be preserved so here we if we have a rooted tree what we can do is basically attach a very long path to it and then basically we force force the center to be somewhere on the path because it will be very very long longer than any path in the tree and then we then then we can unrooted and basically we we will get that the automorphism or quantum automorphism group is the same so then i will maybe not define everything just go over this probably you're familiar with free products of quantum groups and then there is a free breast product of a quantum group so it's basically this analog of the the direct product and and breast product of groups and we have two important lemmas that are also analog of what is what we proved for this or what is known for these classical automorphism groups that if we if we basically have a bunch of color color graphs that are all connected we have some components and these components are not quantum isomorphic in this case then actually the quantum automorphism group of this de-joint union of graphs can be just expressed as a free pre-product of this quantum automorphism groups and similarly if we have like a connected vertex color graph and if we take n copies of this graph then the quantum automorphism group of this digital union is expressed as a free breast product with the quantum symmetry group and i didn't actually mentioned how we are actually using the vice for lemma here but the vice for lemma here is used in such a way that basically vice for lemma can distinguish all trees so since it can distinguish all trees then it's enough to decide isomorphism for them so it's also enough to decide quantum automorphisms for them so in other words thanks to these trees are isomorphic if and only if there are quantum isomorph so that's why we can apply these things for trees and putting these things together we get this equivalent or equivalent the quantum version characterization of the quantum automorphism groups of trees another result that i will mention is the sabidusis theorem so this theorem says about lexicographic products of graphs so here is like some technical definition but it's very easy what is a lexicographic product of product of graphs so basically this is a lexicographic product of a cycle with k2 which is an edge so basically we take for each vertex of the outer graph we take a copy of the inner graph so like here we have four red edges and put all possible edges between the copies if there was an edge in the c4 so basically we just take a bunch of for each vertex of the outer graph we take a copy of the inner graph and and put complete bipartite graphs between those copies if there was an edge in the outer graph x and the sabidusis theorem says that the automorphism group of of this lexicographic product of two graphs is described as a breath product of the corresponding automorphism groups if and only if some condition holds what is the condition so this is actually two conditions written in one so if this inner graph is disconnected then the outer graphs should have no twins twins are vertices that have see exactly the same neighborhoods so you can imagine if this inner graph was disconnected and there were twins in the outer graph you can think of how you could create extra automorphisms that are actually not in this breath product so this breath product will be a subgroup always but the equality happens if this kind of condition is satisfied for for the graphs right so in this case this is like s2 breath product with d4 the dihedral group and the quantum version is just that we replace we replace automorphism groups with quantum automorphism groups and we get a free breath product in there and just in all proved the result by completely different methods some years ago just for regular graphs so just for graphs which have the same degree at every vertex so we obtained basically probably a much more elementary proof for this and we prove it for all graphs so we we make a quantum version of the sabidu CTRM and here we actually use the Weisner-Lehmann algorithm more deeply so I'm not going to now go into these counts let's just ignore that for now so but basically what we have to do we have to just follow the Weisner-Lehmann algorithm and see that the inner and outer edges so what we want to basically prove because what are these what are these automorphisms in a classical case what what should they do you should have if this is just an equality you should have just two types of automorphisms those that follow the structure of the outer graph and those that act inside the inner graphs this is just two types of automorphisms that should be there in case there is an equality and what we use the Weisner-Lehmann to do is that we prove that the Weisner-Lehmann actually distinguishes all the inner edges and all the outer edges so this is just a purely combinatorial result but thanks to the connection of Weisner-Lehmann and the quantum groups we can it actually helps to also analyze the quantum groups so it's not clear how actually Sabidouci proved it in his original paper because this is something from the 50s and it was there were several iterations for the papers there were several mistakes in it like it was at least three times corrected or two times and but he must have done something similar he must somehow distinguish the inner edges and outer edges but but the Weisner-Lehmann algorithm is much more elegant way to do it and we also not only update the quantum version of Sabidouci but I think we prove the Sabidouci theorem in an elegant way and maybe I'm coming to it to the end and okay let's just quickly go over this thing here so we could we could then actually also prove this yeah so we actually do the then do the same we could prove it by ourselves but it's easier to use this existing result by Banika and Bishon where they actually define yet another kind of product of graphs which is the free they call it free product of graphs but and they I'm not going to define it because it's not that important now and they prove that this quantum automorphism group of this free product of graphs is also the rest product so and for us to use the free product is actually exactly what we need from the Weisner-Lehmann is this partition of this inner and outer edges and non-edges and then we can just very simplifying it now then we can plug in to this Banika and Bishon and this is exactly what is doing just in all who proved this only for regular graphs he's also using this result by Banika and Bishon and yeah and just just yeah so we prove that under the sabidusi condition the quantum automorphism group of this lexicographic product of graphs what we what we want is exactly equal to the quantum automorphism group of this free product of these graphs where they are colored based on these colors that we obtained from Weisner-Lehmann and with this color because this free product of graphs by Banika and Bishon is by is using some colors and we use exactly these colors from Weisner-Lehmann to plug into their product basically and yeah so maybe I almost ran out of time here is just a very small cherry on top is that you can also you you can prove a version of this sabidusi TORM for vertex transitive graphs this means that the two the graphs have just one orbit in their automorphism group and yeah let's just not go over this anymore but the theorem is basically that if it's not the case that the equality occurs in the sabidusi theorem then for vertex transitive graphs you can still find a formula for the automorphism group and the quantum version happens to be exactly the same okay so let's just mention some problems at the end so something that we already have in progress is to and there we have to do much more quantum groups is to define inhomogeneous free rest product so you have this rest product of groups where you have a group acting on some set and now to each element of this set you assign a group now you can consider the orbits in this action and for each orbit you could pick a different group so in this way you get an inhomogeneous rest product of groups which somehow generalizes the rest product and it would be interesting to have a quantum group analog of that and see what it what can be done with it so maybe apply it for some further graph classes like planar graphs for example and planar graphs this there are some problems even in planar graphs that are not clear and it might be very interesting for people working in geometry because if you wanted to determine the automorphism groups of planar graphs there is a key case of so-called three connected planar graphs if you don't want to so three connected planar graphs basically corresponds to the graphs of polytopes and Mani's theorem says that they can be uniquely embedded into the sphere in such a way that the automorphisms of the three connected planar graphs exactly correspond to isometries of the sphere so the automorphism groups of three connected planar graphs are exactly the finite subgroups of O3 and so these are some infinite families of groups and the symmetric groups of platonic solids and so quantum Mani's theorem or or yeah or and maybe because there is a quantum group O plus three so there might be something there so look at maybe quantum automorphism groups of three connected planar graphs even that would be very interesting I think so that's it answer very much for that very interesting talk do we have any questions either in person or perhaps we have something yes How do they respond to this? Quantum on the resume group of a complete graph should be the SM plus, the quantum permutation group. Actually, I don't know much about the result, I just heard a talk which claimed this, but yeah, I think it should be definitely true that there is no quantum analog for proof theorem, but I don't know exactly the statement from the top of my head, what is exactly the statement that they proved in that. It was proven by, I think, Bishop McCarthy. And when you mentioned the flux sum and the failure in the quantum sense, what I was wondering is there, so if it fails for graphs, I mean, is there some other structure for which there is a version, a quantum version of. Yeah, I don't know, but yeah, it's an interesting question, but I don't know. Well, classically, the point is that every group is a permutation group. So every group acts on itself, but if you have a quantum group, then one group is not a classical space, and quantum permutation groups in this sense are symmetries of classical spaces. So if you want it, a quantum proof theorem, you actually should not consider classical graphs, but quantum graphs, some graph structure on quantum, on some algebra, non-quimitorial algebra. I wanted to ask, again, for the difference between the Weisfeller-Lehmann and the quantum isomorphism, so is the difference quantified somehow more precisely, how much is different? So in terms of computability, there's a huge difference, but for how many graphs, the orbits are different by Weisfeller-Lehmann or quantum automorphism, or do we know some examples of pairs of graphs that cannot be distinguished by Weisfeller-Lehmann, but they are not quantum isomorphic or something in this sense. Like, if I understand it correctly, like if you, so if they are not distinguished by two-dimensional Weisfeller-Lehmann, or because... I don't think it tries strongly regular graphs. Yeah, I... Because Weisfeller-Lehmann says classically, it tries strongly regular graphs, it stops in the beginning. That's like, yeah, maybe. Then maybe you want the other extreme where Weisfeller-Lehmann works fine, but the quantum algorithm or whatever... Isomorphism. Isomorphism. It is basically the same, but classically, more complex than these, but far from strongly regular graphs. Yeah, yeah, right. That would also be interesting to have some larger class of graphs where we know that Weisfeller-Lehmann would answer the question. Well, power graphs. Well, power graphs is not clear. For power graphs, it's not clear whether two-dimensional Weisfeller-Lehmann will answer the question. So power graphs is actually the open problem, whether two-dimensional Weisfeller-Lehmann will distinguish them, but currently it's known that three-dimensional Weisfeller-Lehmann distinguishes power graphs. And the open question is whether also two-dimensional distinguish them. And yeah, maybe. But people believe it's going to be true. Like you mean it's conjectured that it works even for the classical automobiles. Yes. Yeah, right. But for the classical, it is not clear whether two-dimensional, two-dimensional, three-dimensional, five-dimensional, about one-thousand. Yeah, well, if the classical conjecture was true, then it's not that interesting for the quantum place. But if it was not true, then maybe it is. Yeah. Yeah, that's a good question. Not any other. So can you explain where this undiscibility comes from? Why it is not decidable? Because in the classical case, you just check all the bijections. But why here there is problem that there is no algorithm? Yeah, I don't know the problem. But you must check, I mean, it should be the problem that you have to check infinitely many possibilities. Otherwise stupid algorithms would exist. Yep. What? So if there's nothing further, then maybe let's thank our speaker again. And next week, we will have somebody. I hope you will join us.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.72, "text": " All right. Welcome to this week's Non-Pictive Geometry and Topology Seminar. It's our pleasure", "tokens": [50364, 1057, 558, 13, 4027, 281, 341, 1243, 311, 8774, 12, 47, 985, 488, 2876, 34730, 293, 8840, 1793, 14421, 6470, 13, 467, 311, 527, 6834, 50750], "temperature": 0.0, "avg_logprob": -0.2734595454016397, "compression_ratio": 1.459090909090909, "no_speech_prob": 0.08089596033096313}, {"id": 1, "seek": 0, "start": 7.72, "end": 12.76, "text": " today to have Petr Zeeman from the Technical University of Denmark, who will tell us about", "tokens": [50750, 965, 281, 362, 10472, 81, 4853, 15023, 490, 264, 35512, 3535, 295, 28065, 11, 567, 486, 980, 505, 466, 51002], "temperature": 0.0, "avg_logprob": -0.2734595454016397, "compression_ratio": 1.459090909090909, "no_speech_prob": 0.08089596033096313}, {"id": 2, "seek": 0, "start": 12.76, "end": 16.28, "text": " quantum automorphism groups of graphs.", "tokens": [51002, 13018, 3553, 18191, 1434, 3935, 295, 24877, 13, 51178], "temperature": 0.0, "avg_logprob": -0.2734595454016397, "compression_ratio": 1.459090909090909, "no_speech_prob": 0.08089596033096313}, {"id": 3, "seek": 0, "start": 16.28, "end": 25.080000000000002, "text": " Thank you for inviting me. So in this talk, I will talk about, as you said, quantum automorphism", "tokens": [51178, 1044, 291, 337, 18202, 385, 13, 407, 294, 341, 751, 11, 286, 486, 751, 466, 11, 382, 291, 848, 11, 13018, 3553, 18191, 1434, 51618], "temperature": 0.0, "avg_logprob": -0.2734595454016397, "compression_ratio": 1.459090909090909, "no_speech_prob": 0.08089596033096313}, {"id": 4, "seek": 2508, "start": 25.08, "end": 38.48, "text": " groups of graphs, and this work is based on those two quite recent papers with those", "tokens": [50364, 3935, 295, 24877, 11, 293, 341, 589, 307, 2361, 322, 729, 732, 1596, 5162, 10577, 365, 729, 51034], "temperature": 0.0, "avg_logprob": -0.18843189239501953, "compression_ratio": 1.3680555555555556, "no_speech_prob": 0.16551099717617035}, {"id": 5, "seek": 2508, "start": 38.48, "end": 41.28, "text": " people that are listed here.", "tokens": [51034, 561, 300, 366, 10052, 510, 13, 51174], "temperature": 0.0, "avg_logprob": -0.18843189239501953, "compression_ratio": 1.3680555555555556, "no_speech_prob": 0.16551099717617035}, {"id": 6, "seek": 2508, "start": 41.28, "end": 50.72, "text": " And so I'm currently a postdoc with David Robertson, and the project we are working", "tokens": [51174, 400, 370, 286, 478, 4362, 257, 2183, 39966, 365, 4389, 20919, 266, 11, 293, 264, 1716, 321, 366, 1364, 51646], "temperature": 0.0, "avg_logprob": -0.18843189239501953, "compression_ratio": 1.3680555555555556, "no_speech_prob": 0.16551099717617035}, {"id": 7, "seek": 5072, "start": 50.72, "end": 56.96, "text": " on is in the intersection of graph theory and quantum information theory.", "tokens": [50364, 322, 307, 294, 264, 15236, 295, 4295, 5261, 293, 13018, 1589, 5261, 13, 50676], "temperature": 0.0, "avg_logprob": -0.16111019679478236, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.028751974925398827}, {"id": 8, "seek": 5072, "start": 56.96, "end": 64.24, "text": " So somehow, graph theory is used to study some concepts in quantum information theory.", "tokens": [50676, 407, 6063, 11, 4295, 5261, 307, 1143, 281, 2979, 512, 10392, 294, 13018, 1589, 5261, 13, 51040], "temperature": 0.0, "avg_logprob": -0.16111019679478236, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.028751974925398827}, {"id": 9, "seek": 5072, "start": 64.24, "end": 68.72, "text": " In particular, the area of graph theory is graphomorphisms, which I will talk about a", "tokens": [51040, 682, 1729, 11, 264, 1859, 295, 4295, 5261, 307, 4295, 32702, 13539, 11, 597, 286, 486, 751, 466, 257, 51264], "temperature": 0.0, "avg_logprob": -0.16111019679478236, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.028751974925398827}, {"id": 10, "seek": 6872, "start": 68.72, "end": 82.32, "text": " little bit. And at some point in some works, quantum groups of graphs occur, and these", "tokens": [50364, 707, 857, 13, 400, 412, 512, 935, 294, 512, 1985, 11, 13018, 3935, 295, 24877, 5160, 11, 293, 613, 51044], "temperature": 0.0, "avg_logprob": -0.21555474747058956, "compression_ratio": 1.3968253968253967, "no_speech_prob": 0.12778228521347046}, {"id": 11, "seek": 6872, "start": 82.32, "end": 95.48, "text": " two works are sort of like a bridge between those two areas in some sense, since probably", "tokens": [51044, 732, 1985, 366, 1333, 295, 411, 257, 7283, 1296, 729, 732, 3179, 294, 512, 2020, 11, 1670, 1391, 51702], "temperature": 0.0, "avg_logprob": -0.21555474747058956, "compression_ratio": 1.3968253968253967, "no_speech_prob": 0.12778228521347046}, {"id": 12, "seek": 9548, "start": 95.48, "end": 105.28, "text": " from the quantum group side, there are two groups of people that work on quantum groups", "tokens": [50364, 490, 264, 13018, 1594, 1252, 11, 456, 366, 732, 3935, 295, 561, 300, 589, 322, 13018, 3935, 50854], "temperature": 0.0, "avg_logprob": -0.14043043719397652, "compression_ratio": 1.6514285714285715, "no_speech_prob": 0.0596599318087101}, {"id": 13, "seek": 9548, "start": 105.28, "end": 111.76, "text": " and that work on graph theory, and those groups usually don't know much about the things", "tokens": [50854, 293, 300, 589, 322, 4295, 5261, 11, 293, 729, 3935, 2673, 500, 380, 458, 709, 466, 264, 721, 51178], "temperature": 0.0, "avg_logprob": -0.14043043719397652, "compression_ratio": 1.6514285714285715, "no_speech_prob": 0.0596599318087101}, {"id": 14, "seek": 9548, "start": 111.76, "end": 113.96000000000001, "text": " that the other ones work on.", "tokens": [51178, 300, 264, 661, 2306, 589, 322, 13, 51288], "temperature": 0.0, "avg_logprob": -0.14043043719397652, "compression_ratio": 1.6514285714285715, "no_speech_prob": 0.0596599318087101}, {"id": 15, "seek": 9548, "start": 113.96000000000001, "end": 119.4, "text": " And basically, what I would like to a lot focus on in this talk is to show you some", "tokens": [51288, 400, 1936, 11, 437, 286, 576, 411, 281, 257, 688, 1879, 322, 294, 341, 751, 307, 281, 855, 291, 512, 51560], "temperature": 0.0, "avg_logprob": -0.14043043719397652, "compression_ratio": 1.6514285714285715, "no_speech_prob": 0.0596599318087101}, {"id": 16, "seek": 11940, "start": 119.4, "end": 128.8, "text": " techniques from combinatorics that we used to obtain some, like in combinatorics, the", "tokens": [50364, 7512, 490, 2512, 31927, 1167, 300, 321, 1143, 281, 12701, 512, 11, 411, 294, 2512, 31927, 1167, 11, 264, 50834], "temperature": 0.0, "avg_logprob": -0.1518683809983103, "compression_ratio": 1.7637362637362637, "no_speech_prob": 0.11496902257204056}, {"id": 17, "seek": 11940, "start": 128.8, "end": 134.24, "text": " combinatorial analog would be some simple results about automorphism groups of graphs,", "tokens": [50834, 2512, 31927, 831, 16660, 576, 312, 512, 2199, 3542, 466, 3553, 18191, 1434, 3935, 295, 24877, 11, 51106], "temperature": 0.0, "avg_logprob": -0.1518683809983103, "compression_ratio": 1.7637362637362637, "no_speech_prob": 0.11496902257204056}, {"id": 18, "seek": 11940, "start": 134.24, "end": 141.32, "text": " but for some reason, these results did not at all exist in the relatively recent but", "tokens": [51106, 457, 337, 512, 1778, 11, 613, 3542, 630, 406, 412, 439, 2514, 294, 264, 7226, 5162, 457, 51460], "temperature": 0.0, "avg_logprob": -0.1518683809983103, "compression_ratio": 1.7637362637362637, "no_speech_prob": 0.11496902257204056}, {"id": 19, "seek": 11940, "start": 141.32, "end": 145.92000000000002, "text": " not that recent field of quantum automorphism groups of graphs.", "tokens": [51460, 406, 300, 5162, 2519, 295, 13018, 3553, 18191, 1434, 3935, 295, 24877, 13, 51690], "temperature": 0.0, "avg_logprob": -0.1518683809983103, "compression_ratio": 1.7637362637362637, "no_speech_prob": 0.11496902257204056}, {"id": 20, "seek": 14592, "start": 145.92, "end": 153.83999999999997, "text": " So let's start with just the notion of the graph isomorphism. So two graphs are isomorphic.", "tokens": [50364, 407, 718, 311, 722, 365, 445, 264, 10710, 295, 264, 4295, 307, 32702, 1434, 13, 407, 732, 24877, 366, 307, 32702, 299, 13, 50760], "temperature": 0.0, "avg_logprob": -0.15234957350061296, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.001471309456974268}, {"id": 21, "seek": 14592, "start": 153.83999999999997, "end": 159.6, "text": " Basically, if we can find a permutation or a bijective mapping between the vertices of", "tokens": [50760, 8537, 11, 498, 321, 393, 915, 257, 4784, 11380, 420, 257, 3228, 1020, 488, 18350, 1296, 264, 32053, 295, 51048], "temperature": 0.0, "avg_logprob": -0.15234957350061296, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.001471309456974268}, {"id": 22, "seek": 14592, "start": 159.6, "end": 166.64, "text": " one graph to the other graph, such that this mapping preserves adjacencies and non-agencies.", "tokens": [51048, 472, 4295, 281, 264, 661, 4295, 11, 1270, 300, 341, 18350, 1183, 9054, 22940, 6464, 293, 2107, 12, 4698, 4629, 13, 51400], "temperature": 0.0, "avg_logprob": -0.15234957350061296, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.001471309456974268}, {"id": 23, "seek": 14592, "start": 166.64, "end": 173.88, "text": " So in other words, the graphs are exactly the same up to some relabeling of the vertices.", "tokens": [51400, 407, 294, 661, 2283, 11, 264, 24877, 366, 2293, 264, 912, 493, 281, 512, 1039, 455, 11031, 295, 264, 32053, 13, 51762], "temperature": 0.0, "avg_logprob": -0.15234957350061296, "compression_ratio": 1.6869158878504673, "no_speech_prob": 0.001471309456974268}, {"id": 24, "seek": 17388, "start": 173.88, "end": 181.56, "text": " We denote it like this. And so alternatively, this alternative two points of view will play", "tokens": [50364, 492, 45708, 309, 411, 341, 13, 400, 370, 8535, 356, 11, 341, 8535, 732, 2793, 295, 1910, 486, 862, 50748], "temperature": 0.0, "avg_logprob": -0.16409836045230727, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.008697127923369408}, {"id": 25, "seek": 17388, "start": 181.56, "end": 189.24, "text": " a role here. So alternatively, one could view it if you take the adjacency matrices of the", "tokens": [50748, 257, 3090, 510, 13, 407, 8535, 356, 11, 472, 727, 1910, 309, 498, 291, 747, 264, 22940, 3020, 32284, 295, 264, 51132], "temperature": 0.0, "avg_logprob": -0.16409836045230727, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.008697127923369408}, {"id": 26, "seek": 17388, "start": 189.24, "end": 195.4, "text": " corresponding graphs and you would have a permutation matrix that has to commute with", "tokens": [51132, 11760, 24877, 293, 291, 576, 362, 257, 4784, 11380, 8141, 300, 575, 281, 36750, 365, 51440], "temperature": 0.0, "avg_logprob": -0.16409836045230727, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.008697127923369408}, {"id": 27, "seek": 17388, "start": 195.4, "end": 202.04, "text": " those adjacency matrices. So that's an equivalent definition of isomorphism of graphs.", "tokens": [51440, 729, 22940, 3020, 32284, 13, 407, 300, 311, 364, 10344, 7123, 295, 307, 32702, 1434, 295, 24877, 13, 51772], "temperature": 0.0, "avg_logprob": -0.16409836045230727, "compression_ratio": 1.7067307692307692, "no_speech_prob": 0.008697127923369408}, {"id": 28, "seek": 20204, "start": 202.04, "end": 210.44, "text": " And another very impressive theorem was given by Lova's in a previous century in 1967, which", "tokens": [50364, 400, 1071, 588, 8992, 20904, 390, 2212, 538, 6130, 2757, 311, 294, 257, 3894, 4901, 294, 33193, 11, 597, 50784], "temperature": 0.0, "avg_logprob": -0.17156219482421875, "compression_ratio": 1.5269709543568464, "no_speech_prob": 0.0009369476465508342}, {"id": 29, "seek": 20204, "start": 210.44, "end": 217.04, "text": " basically characterizes this relation of being isomorphic by the following counting of homomorphism.", "tokens": [50784, 1936, 2517, 5660, 341, 9721, 295, 885, 307, 32702, 299, 538, 264, 3480, 13251, 295, 3655, 32702, 1434, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17156219482421875, "compression_ratio": 1.5269709543568464, "no_speech_prob": 0.0009369476465508342}, {"id": 30, "seek": 20204, "start": 217.04, "end": 224.92, "text": " So homomorphism of between two graphs is like isomorphism, but you relax the condition a", "tokens": [51114, 407, 3655, 32702, 1434, 295, 1296, 732, 24877, 307, 411, 307, 32702, 1434, 11, 457, 291, 5789, 264, 4188, 257, 51508], "temperature": 0.0, "avg_logprob": -0.17156219482421875, "compression_ratio": 1.5269709543568464, "no_speech_prob": 0.0009369476465508342}, {"id": 31, "seek": 20204, "start": 224.92, "end": 231.79999999999998, "text": " little bit. It's a mapping that only has to preserve adjacencies. So for example, you", "tokens": [51508, 707, 857, 13, 467, 311, 257, 18350, 300, 787, 575, 281, 15665, 22940, 6464, 13, 407, 337, 1365, 11, 291, 51852], "temperature": 0.0, "avg_logprob": -0.17156219482421875, "compression_ratio": 1.5269709543568464, "no_speech_prob": 0.0009369476465508342}, {"id": 32, "seek": 23180, "start": 231.8, "end": 241.88000000000002, "text": " can have a homomorphism from a bipartite graph to an edge. So and this notation means that we", "tokens": [50364, 393, 362, 257, 3655, 32702, 1434, 490, 257, 28741, 642, 4295, 281, 364, 4691, 13, 407, 293, 341, 24657, 1355, 300, 321, 50868], "temperature": 0.0, "avg_logprob": -0.09361040464011572, "compression_ratio": 1.9435897435897436, "no_speech_prob": 0.0007864360231906176}, {"id": 33, "seek": 23180, "start": 241.88000000000002, "end": 251.0, "text": " count the number of possible homomorphisms from some graph F to the graph G. So the isomorphism", "tokens": [50868, 1207, 264, 1230, 295, 1944, 3655, 32702, 13539, 490, 512, 4295, 479, 281, 264, 4295, 460, 13, 407, 264, 307, 32702, 1434, 51324], "temperature": 0.0, "avg_logprob": -0.09361040464011572, "compression_ratio": 1.9435897435897436, "no_speech_prob": 0.0007864360231906176}, {"id": 34, "seek": 23180, "start": 251.0, "end": 256.28000000000003, "text": " relation between two graphs is characterized by homomorphism counting. So the homomorphism counts", "tokens": [51324, 9721, 1296, 732, 24877, 307, 29361, 538, 3655, 32702, 1434, 13251, 13, 407, 264, 3655, 32702, 1434, 14893, 51588], "temperature": 0.0, "avg_logprob": -0.09361040464011572, "compression_ratio": 1.9435897435897436, "no_speech_prob": 0.0007864360231906176}, {"id": 35, "seek": 23180, "start": 256.28000000000003, "end": 261.16, "text": " the number of homomorphism from each possible graphs to those two graphs. If it's the same,", "tokens": [51588, 264, 1230, 295, 3655, 32702, 1434, 490, 1184, 1944, 24877, 281, 729, 732, 24877, 13, 759, 309, 311, 264, 912, 11, 51832], "temperature": 0.0, "avg_logprob": -0.09361040464011572, "compression_ratio": 1.9435897435897436, "no_speech_prob": 0.0007864360231906176}, {"id": 36, "seek": 26116, "start": 261.16, "end": 269.56, "text": " then the graphs are isomorphic and also the other way. Now it's not necessary to just restrict", "tokens": [50364, 550, 264, 24877, 366, 307, 32702, 299, 293, 611, 264, 661, 636, 13, 823, 309, 311, 406, 4818, 281, 445, 7694, 50784], "temperature": 0.0, "avg_logprob": -0.08712823951945585, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0005945881712250412}, {"id": 37, "seek": 26116, "start": 269.56, "end": 278.44000000000005, "text": " ourselves to all graphs. We can use various families of graphs. So there is a similar", "tokens": [50784, 4175, 281, 439, 24877, 13, 492, 393, 764, 3683, 4466, 295, 24877, 13, 407, 456, 307, 257, 2531, 51228], "temperature": 0.0, "avg_logprob": -0.08712823951945585, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0005945881712250412}, {"id": 38, "seek": 26116, "start": 278.44000000000005, "end": 285.96000000000004, "text": " notion of homomorphism indistinguishability, where we take some family of graphs and do these", "tokens": [51228, 10710, 295, 3655, 32702, 1434, 1016, 468, 7050, 742, 2310, 11, 689, 321, 747, 512, 1605, 295, 24877, 293, 360, 613, 51604], "temperature": 0.0, "avg_logprob": -0.08712823951945585, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.0005945881712250412}, {"id": 39, "seek": 28596, "start": 285.96, "end": 294.2, "text": " homomorphism counts within that family of graphs. And then we get a notion of homomorphism", "tokens": [50364, 3655, 32702, 1434, 14893, 1951, 300, 1605, 295, 24877, 13, 400, 550, 321, 483, 257, 10710, 295, 3655, 32702, 1434, 50776], "temperature": 0.0, "avg_logprob": -0.13479119798411493, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.0019851913675665855}, {"id": 40, "seek": 28596, "start": 295.15999999999997, "end": 299.71999999999997, "text": " indistinguishability, which depends on that particular cross of graphs. So here we have", "tokens": [50824, 1016, 468, 7050, 742, 2310, 11, 597, 5946, 322, 300, 1729, 3278, 295, 24877, 13, 407, 510, 321, 362, 51052], "temperature": 0.0, "avg_logprob": -0.13479119798411493, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.0019851913675665855}, {"id": 41, "seek": 28596, "start": 299.71999999999997, "end": 307.64, "text": " a table of some results. And this is the Lovaas theorem, where we take the family of graphs", "tokens": [51052, 257, 3199, 295, 512, 3542, 13, 400, 341, 307, 264, 6130, 2757, 296, 20904, 11, 689, 321, 747, 264, 1605, 295, 24877, 51448], "temperature": 0.0, "avg_logprob": -0.13479119798411493, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.0019851913675665855}, {"id": 42, "seek": 28596, "start": 307.64, "end": 313.24, "text": " to be all graphs. And when you take various other, let's say, natural families of graphs,", "tokens": [51448, 281, 312, 439, 24877, 13, 400, 562, 291, 747, 3683, 661, 11, 718, 311, 584, 11, 3303, 4466, 295, 24877, 11, 51728], "temperature": 0.0, "avg_logprob": -0.13479119798411493, "compression_ratio": 1.722488038277512, "no_speech_prob": 0.0019851913675665855}, {"id": 43, "seek": 31324, "start": 313.24, "end": 318.84000000000003, "text": " you get other similarity relation between those classes of graphs, like for cycles. If you just", "tokens": [50364, 291, 483, 661, 32194, 9721, 1296, 729, 5359, 295, 24877, 11, 411, 337, 17796, 13, 759, 291, 445, 50644], "temperature": 0.0, "avg_logprob": -0.13629068953267645, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0020684220362454653}, {"id": 44, "seek": 31324, "start": 319.40000000000003, "end": 324.76, "text": " take cycles, then this corresponds to the cospectrality of adjacency matrices, which means", "tokens": [50672, 747, 17796, 11, 550, 341, 23249, 281, 264, 3792, 1043, 81, 1860, 295, 22940, 3020, 32284, 11, 597, 1355, 50940], "temperature": 0.0, "avg_logprob": -0.13629068953267645, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0020684220362454653}, {"id": 45, "seek": 31324, "start": 324.76, "end": 329.8, "text": " that the multisets of eigenvalues of the adjacency matrices of graphs is the same.", "tokens": [50940, 300, 264, 2120, 271, 1385, 295, 10446, 46033, 295, 264, 22940, 3020, 32284, 295, 24877, 307, 264, 912, 13, 51192], "temperature": 0.0, "avg_logprob": -0.13629068953267645, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0020684220362454653}, {"id": 46, "seek": 31324, "start": 330.52, "end": 337.56, "text": " Cycles and paths would be cospectral components. Trees, this is actually fractional isomorphism.", "tokens": [51228, 10295, 6520, 293, 14518, 576, 312, 3792, 1043, 2155, 6677, 13, 314, 4856, 11, 341, 307, 767, 17948, 1966, 307, 32702, 1434, 13, 51580], "temperature": 0.0, "avg_logprob": -0.13629068953267645, "compression_ratio": 1.6561085972850678, "no_speech_prob": 0.0020684220362454653}, {"id": 47, "seek": 33756, "start": 338.2, "end": 347.24, "text": " So fractional isomorphism, you get by relaxing this equation here. So instead of a permutation", "tokens": [50396, 407, 17948, 1966, 307, 32702, 1434, 11, 291, 483, 538, 20103, 341, 5367, 510, 13, 407, 2602, 295, 257, 4784, 11380, 50848], "temperature": 0.0, "avg_logprob": -0.19694496834114805, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.0010953417513519526}, {"id": 48, "seek": 33756, "start": 347.24, "end": 354.44, "text": " matrix, you would use something called doubly stochastic matrix, which is basically that the", "tokens": [50848, 8141, 11, 291, 576, 764, 746, 1219, 10831, 356, 342, 8997, 2750, 8141, 11, 597, 307, 1936, 300, 264, 51208], "temperature": 0.0, "avg_logprob": -0.19694496834114805, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.0010953417513519526}, {"id": 49, "seek": 33756, "start": 354.44, "end": 364.92, "text": " rows have to sum to one. And then there is a class of bounded trivids, trivided most k.", "tokens": [51208, 13241, 362, 281, 2408, 281, 472, 13, 400, 550, 456, 307, 257, 1508, 295, 37498, 1376, 85, 3742, 11, 1376, 85, 2112, 881, 350, 13, 51732], "temperature": 0.0, "avg_logprob": -0.19694496834114805, "compression_ratio": 1.5193370165745856, "no_speech_prob": 0.0010953417513519526}, {"id": 50, "seek": 36492, "start": 365.72, "end": 373.88, "text": " And this corresponds to indistinguishability by something called k-dimensional Weisfer-Lehmann", "tokens": [50404, 400, 341, 23249, 281, 1016, 468, 7050, 742, 2310, 538, 746, 1219, 350, 12, 18759, 492, 271, 612, 12, 11020, 8587, 969, 50812], "temperature": 0.0, "avg_logprob": -0.16003479276384627, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.005163196474313736}, {"id": 51, "seek": 36492, "start": 373.88, "end": 382.28000000000003, "text": " algorithm, which I will talk about later. But it's just some procedure on graphs, but I will", "tokens": [50812, 9284, 11, 597, 286, 486, 751, 466, 1780, 13, 583, 309, 311, 445, 512, 10747, 322, 24877, 11, 457, 286, 486, 51232], "temperature": 0.0, "avg_logprob": -0.16003479276384627, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.005163196474313736}, {"id": 52, "seek": 36492, "start": 382.28000000000003, "end": 387.72, "text": " talk about it. But trivid k is some parameter of graphs, which tells you how much the graph is", "tokens": [51232, 751, 466, 309, 13, 583, 1376, 85, 327, 350, 307, 512, 13075, 295, 24877, 11, 597, 5112, 291, 577, 709, 264, 4295, 307, 51504], "temperature": 0.0, "avg_logprob": -0.16003479276384627, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.005163196474313736}, {"id": 53, "seek": 36492, "start": 387.72, "end": 393.8, "text": " close to a tree. And then tree depth is something similar. So for various classes, we have notions,", "tokens": [51504, 1998, 281, 257, 4230, 13, 400, 550, 4230, 7161, 307, 746, 2531, 13, 407, 337, 3683, 5359, 11, 321, 362, 35799, 11, 51808], "temperature": 0.0, "avg_logprob": -0.16003479276384627, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.005163196474313736}, {"id": 54, "seek": 39380, "start": 393.8, "end": 400.36, "text": " and then this is the important one here, that if you take planar graphs, this is a quite recent", "tokens": [50364, 293, 550, 341, 307, 264, 1021, 472, 510, 11, 300, 498, 291, 747, 1393, 289, 24877, 11, 341, 307, 257, 1596, 5162, 50692], "temperature": 0.0, "avg_logprob": -0.10986799875895183, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0007641098345629871}, {"id": 55, "seek": 39380, "start": 400.36, "end": 410.12, "text": " result that actually corresponds to a notion of quantum isomorphism. So homomorphism indistinguishability,", "tokens": [50692, 1874, 300, 767, 23249, 281, 257, 10710, 295, 13018, 307, 32702, 1434, 13, 407, 3655, 32702, 1434, 1016, 468, 7050, 742, 2310, 11, 51180], "temperature": 0.0, "avg_logprob": -0.10986799875895183, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0007641098345629871}, {"id": 56, "seek": 39380, "start": 412.04, "end": 417.88, "text": " homomorphism indistinguishability when you restrict yourself to planar graphs. So in other words,", "tokens": [51276, 3655, 32702, 1434, 1016, 468, 7050, 742, 2310, 562, 291, 7694, 1803, 281, 1393, 289, 24877, 13, 407, 294, 661, 2283, 11, 51568], "temperature": 0.0, "avg_logprob": -0.10986799875895183, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.0007641098345629871}, {"id": 57, "seek": 41788, "start": 417.88, "end": 423.88, "text": " what we will see being quantum isomorphic, the result is that it's like having the same", "tokens": [50364, 437, 321, 486, 536, 885, 13018, 307, 32702, 299, 11, 264, 1874, 307, 300, 309, 311, 411, 1419, 264, 912, 50664], "temperature": 0.0, "avg_logprob": -0.191950145520662, "compression_ratio": 1.4609929078014185, "no_speech_prob": 0.013546076603233814}, {"id": 58, "seek": 41788, "start": 423.88, "end": 433.32, "text": " homomorphism counts from planar graphs. So, okay, so just a little bit about what is this", "tokens": [50664, 3655, 32702, 1434, 14893, 490, 1393, 289, 24877, 13, 407, 11, 1392, 11, 370, 445, 257, 707, 857, 466, 437, 307, 341, 51136], "temperature": 0.0, "avg_logprob": -0.191950145520662, "compression_ratio": 1.4609929078014185, "no_speech_prob": 0.013546076603233814}, {"id": 59, "seek": 41788, "start": 434.76, "end": 438.2, "text": " quantum isomorphism. So this", "tokens": [51208, 13018, 307, 32702, 1434, 13, 407, 341, 51380], "temperature": 0.0, "avg_logprob": -0.191950145520662, "compression_ratio": 1.4609929078014185, "no_speech_prob": 0.013546076603233814}, {"id": 60, "seek": 43820, "start": 438.92, "end": 445.0, "text": " that this small home, this is just numbers, numbers, yeah, yeah.", "tokens": [50400, 300, 341, 1359, 1280, 11, 341, 307, 445, 3547, 11, 3547, 11, 1338, 11, 1338, 13, 50704], "temperature": 0.0, "avg_logprob": -0.2761147238991477, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.010767827741801739}, {"id": 61, "seek": 43820, "start": 449.15999999999997, "end": 455.71999999999997, "text": " Number of homomorphism, yes. So this notion of quantum isomorphism comes from the notion of", "tokens": [50912, 5118, 295, 3655, 32702, 1434, 11, 2086, 13, 407, 341, 10710, 295, 13018, 307, 32702, 1434, 1487, 490, 264, 10710, 295, 51240], "temperature": 0.0, "avg_logprob": -0.2761147238991477, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.010767827741801739}, {"id": 62, "seek": 43820, "start": 455.71999999999997, "end": 462.84, "text": " a non-local game, which is an important concept in quantum information theory. I will just briefly", "tokens": [51240, 257, 2107, 12, 5842, 304, 1216, 11, 597, 307, 364, 1021, 3410, 294, 13018, 1589, 5261, 13, 286, 486, 445, 10515, 51596], "temperature": 0.0, "avg_logprob": -0.2761147238991477, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.010767827741801739}, {"id": 63, "seek": 46284, "start": 462.84, "end": 470.03999999999996, "text": " introduce it. So in the game, you have two players, Alice and Bob, and a verifier. And", "tokens": [50364, 5366, 309, 13, 407, 294, 264, 1216, 11, 291, 362, 732, 4150, 11, 16004, 293, 6085, 11, 293, 257, 1306, 9902, 13, 400, 50724], "temperature": 0.0, "avg_logprob": -0.13133669371652132, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.024564426392316818}, {"id": 64, "seek": 46284, "start": 470.03999999999996, "end": 476.12, "text": " both of the players have some finite input sets, X, A, X, B corresponding to those players,", "tokens": [50724, 1293, 295, 264, 4150, 362, 512, 19362, 4846, 6352, 11, 1783, 11, 316, 11, 1783, 11, 363, 11760, 281, 729, 4150, 11, 51028], "temperature": 0.0, "avg_logprob": -0.13133669371652132, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.024564426392316818}, {"id": 65, "seek": 46284, "start": 476.12, "end": 481.15999999999997, "text": " and some finite output sets, Y, A, Y, B. And then you have a Boolean predicate, which is basically", "tokens": [51028, 293, 512, 19362, 5598, 6352, 11, 398, 11, 316, 11, 398, 11, 363, 13, 400, 550, 291, 362, 257, 23351, 28499, 3852, 8700, 11, 597, 307, 1936, 51280], "temperature": 0.0, "avg_logprob": -0.13133669371652132, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.024564426392316818}, {"id": 66, "seek": 46284, "start": 481.15999999999997, "end": 490.28, "text": " a function, zero one function from this Cartesian product. And so basically the players are asked", "tokens": [51280, 257, 2445, 11, 4018, 472, 2445, 490, 341, 22478, 42434, 1674, 13, 400, 370, 1936, 264, 4150, 366, 2351, 51736], "temperature": 0.0, "avg_logprob": -0.13133669371652132, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.024564426392316818}, {"id": 67, "seek": 49028, "start": 490.28, "end": 498.2, "text": " a question from the input, and they have to answer, and the players win if this is evaluated to one.", "tokens": [50364, 257, 1168, 490, 264, 4846, 11, 293, 436, 362, 281, 1867, 11, 293, 264, 4150, 1942, 498, 341, 307, 25509, 281, 472, 13, 50760], "temperature": 0.0, "avg_logprob": -0.10024043646725742, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.007131972350180149}, {"id": 68, "seek": 49028, "start": 499.23999999999995, "end": 504.76, "text": " They cannot communicate after receiving questions, but they can decide on a strategy,", "tokens": [50812, 814, 2644, 7890, 934, 10040, 1651, 11, 457, 436, 393, 4536, 322, 257, 5206, 11, 51088], "temperature": 0.0, "avg_logprob": -0.10024043646725742, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.007131972350180149}, {"id": 69, "seek": 49028, "start": 504.76, "end": 511.4, "text": " what they will do. And there is only one round of the game, and one is concerned with perfect", "tokens": [51088, 437, 436, 486, 360, 13, 400, 456, 307, 787, 472, 3098, 295, 264, 1216, 11, 293, 472, 307, 5922, 365, 2176, 51420], "temperature": 0.0, "avg_logprob": -0.10024043646725742, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.007131972350180149}, {"id": 70, "seek": 49028, "start": 511.4, "end": 518.12, "text": " strategies in which players win the probability one. And now what kind of strategies can you have?", "tokens": [51420, 9029, 294, 597, 4150, 1942, 264, 8482, 472, 13, 400, 586, 437, 733, 295, 9029, 393, 291, 362, 30, 51756], "temperature": 0.0, "avg_logprob": -0.10024043646725742, "compression_ratio": 1.7149321266968325, "no_speech_prob": 0.007131972350180149}, {"id": 71, "seek": 51812, "start": 518.28, "end": 527.72, "text": " You can have deterministic strategies, where you have just some functions, which deterministically", "tokens": [50372, 509, 393, 362, 15957, 3142, 9029, 11, 689, 291, 362, 445, 512, 6828, 11, 597, 15957, 20458, 50844], "temperature": 0.0, "avg_logprob": -0.17154601216316223, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.004641074687242508}, {"id": 72, "seek": 51812, "start": 527.72, "end": 534.44, "text": " say what will be the answers for Alice and Bob. Then you can have randomized strategies, which", "tokens": [50844, 584, 437, 486, 312, 264, 6338, 337, 16004, 293, 6085, 13, 1396, 291, 393, 362, 38513, 9029, 11, 597, 51180], "temperature": 0.0, "avg_logprob": -0.17154601216316223, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.004641074687242508}, {"id": 73, "seek": 51812, "start": 536.68, "end": 541.4, "text": " are not that much better, but where you can use some randomness potentially. And then you can", "tokens": [51292, 366, 406, 300, 709, 1101, 11, 457, 689, 291, 393, 764, 512, 4974, 1287, 7263, 13, 400, 550, 291, 393, 51528], "temperature": 0.0, "avg_logprob": -0.17154601216316223, "compression_ratio": 1.6494252873563218, "no_speech_prob": 0.004641074687242508}, {"id": 74, "seek": 54140, "start": 541.48, "end": 548.84, "text": " have quantum strategies, where this Alice and Bob will share some entangled quantum state and", "tokens": [50368, 362, 13018, 9029, 11, 689, 341, 16004, 293, 6085, 486, 2073, 512, 948, 39101, 13018, 1785, 293, 50736], "temperature": 0.0, "avg_logprob": -0.10379343714032854, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.007305813953280449}, {"id": 75, "seek": 54140, "start": 548.84, "end": 559.56, "text": " use it to get answers. So let's immediately look at this GH isomorphism game. So we have two graphs,", "tokens": [50736, 764, 309, 281, 483, 6338, 13, 407, 718, 311, 4258, 574, 412, 341, 40690, 307, 32702, 1434, 1216, 13, 407, 321, 362, 732, 24877, 11, 51272], "temperature": 0.0, "avg_logprob": -0.10379343714032854, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.007305813953280449}, {"id": 76, "seek": 54140, "start": 559.56, "end": 565.96, "text": " G and H. And the intuition is that Alice and Bob want to convince the referee that the graphs", "tokens": [51272, 460, 293, 389, 13, 400, 264, 24002, 307, 300, 16004, 293, 6085, 528, 281, 13447, 264, 43096, 300, 264, 24877, 51592], "temperature": 0.0, "avg_logprob": -0.10379343714032854, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.007305813953280449}, {"id": 77, "seek": 56596, "start": 566.76, "end": 576.36, "text": " are isomorphic. So here is the setup basically similar that the Alice and Bob are asked some", "tokens": [50404, 366, 307, 32702, 299, 13, 407, 510, 307, 264, 8657, 1936, 2531, 300, 264, 16004, 293, 6085, 366, 2351, 512, 50884], "temperature": 0.0, "avg_logprob": -0.10194162824260655, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.003190075745806098}, {"id": 78, "seek": 56596, "start": 576.36, "end": 583.5600000000001, "text": " questions. Well, now the questions are the input sets are the vertices of the graph,", "tokens": [50884, 1651, 13, 1042, 11, 586, 264, 1651, 366, 264, 4846, 6352, 366, 264, 32053, 295, 264, 4295, 11, 51244], "temperature": 0.0, "avg_logprob": -0.10194162824260655, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.003190075745806098}, {"id": 79, "seek": 56596, "start": 583.5600000000001, "end": 590.12, "text": " also the output set. And what must be satisfied is that the relation between H and H prime is the", "tokens": [51244, 611, 264, 5598, 992, 13, 400, 437, 1633, 312, 11239, 307, 300, 264, 9721, 1296, 389, 293, 389, 5835, 307, 264, 51572], "temperature": 0.0, "avg_logprob": -0.10194162824260655, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.003190075745806098}, {"id": 80, "seek": 59012, "start": 590.12, "end": 598.68, "text": " same as a relation between G and G prime. So relation in the sense adjacency, not adjacency.", "tokens": [50364, 912, 382, 257, 9721, 1296, 460, 293, 460, 5835, 13, 407, 9721, 294, 264, 2020, 22940, 3020, 11, 406, 22940, 3020, 13, 50792], "temperature": 0.0, "avg_logprob": -0.1452253486799157, "compression_ratio": 1.7636363636363637, "no_speech_prob": 0.0029721674509346485}, {"id": 81, "seek": 59012, "start": 598.68, "end": 603.0, "text": " So again, the players cannot communicate, there is only one round, and they must win with the", "tokens": [50792, 407, 797, 11, 264, 4150, 2644, 7890, 11, 456, 307, 787, 472, 3098, 11, 293, 436, 1633, 1942, 365, 264, 51008], "temperature": 0.0, "avg_logprob": -0.1452253486799157, "compression_ratio": 1.7636363636363637, "no_speech_prob": 0.0029721674509346485}, {"id": 82, "seek": 59012, "start": 603.0, "end": 609.64, "text": " probability one. And the theorem is that basically these classical players can win classical in the", "tokens": [51008, 8482, 472, 13, 400, 264, 20904, 307, 300, 1936, 613, 13735, 4150, 393, 1942, 13735, 294, 264, 51340], "temperature": 0.0, "avg_logprob": -0.1452253486799157, "compression_ratio": 1.7636363636363637, "no_speech_prob": 0.0029721674509346485}, {"id": 83, "seek": 59012, "start": 609.64, "end": 615.64, "text": " sense that they have like a deterministic strategy, if and only if the graphs are isomorphic. And now", "tokens": [51340, 2020, 300, 436, 362, 411, 257, 15957, 3142, 5206, 11, 498, 293, 787, 498, 264, 24877, 366, 307, 32702, 299, 13, 400, 586, 51640], "temperature": 0.0, "avg_logprob": -0.1452253486799157, "compression_ratio": 1.7636363636363637, "no_speech_prob": 0.0029721674509346485}, {"id": 84, "seek": 61564, "start": 615.64, "end": 624.6, "text": " to define the quantum isomorphism is to basically turn this definition around and say that the graphs", "tokens": [50364, 281, 6964, 264, 13018, 307, 32702, 1434, 307, 281, 1936, 1261, 341, 7123, 926, 293, 584, 300, 264, 24877, 50812], "temperature": 0.0, "avg_logprob": -0.08008009014707623, "compression_ratio": 2.110294117647059, "no_speech_prob": 0.0015438508708029985}, {"id": 85, "seek": 61564, "start": 624.6, "end": 633.3199999999999, "text": " are quantum isomorphic if quantum players can win this game. So that's basically a definition that", "tokens": [50812, 366, 13018, 307, 32702, 299, 498, 13018, 4150, 393, 1942, 341, 1216, 13, 407, 300, 311, 1936, 257, 7123, 300, 51248], "temperature": 0.0, "avg_logprob": -0.08008009014707623, "compression_ratio": 2.110294117647059, "no_speech_prob": 0.0015438508708029985}, {"id": 86, "seek": 61564, "start": 633.3199999999999, "end": 639.3199999999999, "text": " the graphs are quantum isomorphic if quantum players can win this GH isomorphism game.", "tokens": [51248, 264, 24877, 366, 13018, 307, 32702, 299, 498, 13018, 4150, 393, 1942, 341, 40690, 307, 32702, 1434, 1216, 13, 51548], "temperature": 0.0, "avg_logprob": -0.08008009014707623, "compression_ratio": 2.110294117647059, "no_speech_prob": 0.0015438508708029985}, {"id": 87, "seek": 63932, "start": 640.0400000000001, "end": 646.6800000000001, "text": " What does it mean just briefly is that here we have a shared entangled state between those", "tokens": [50400, 708, 775, 309, 914, 445, 10515, 307, 300, 510, 321, 362, 257, 5507, 948, 39101, 1785, 1296, 729, 50732], "temperature": 0.0, "avg_logprob": -0.12019220739603043, "compression_ratio": 1.5082872928176796, "no_speech_prob": 0.00779171846807003}, {"id": 88, "seek": 63932, "start": 646.6800000000001, "end": 654.7600000000001, "text": " players. And basically, so Alice and Bob share this quantum system in some states psi,", "tokens": [50732, 4150, 13, 400, 1936, 11, 370, 16004, 293, 6085, 2073, 341, 13018, 1185, 294, 512, 4368, 20304, 11, 51136], "temperature": 0.0, "avg_logprob": -0.12019220739603043, "compression_ratio": 1.5082872928176796, "no_speech_prob": 0.00779171846807003}, {"id": 89, "seek": 63932, "start": 654.7600000000001, "end": 662.12, "text": " which is basically a unit vector in some Hilbert space. And upon receiving this vertex G, Alice", "tokens": [51136, 597, 307, 1936, 257, 4985, 8062, 294, 512, 19914, 4290, 1901, 13, 400, 3564, 10040, 341, 28162, 460, 11, 16004, 51504], "temperature": 0.0, "avg_logprob": -0.12019220739603043, "compression_ratio": 1.5082872928176796, "no_speech_prob": 0.00779171846807003}, {"id": 90, "seek": 66212, "start": 662.12, "end": 669.24, "text": " performs some measurement e g and this e g is basically some set of operators satisfying", "tokens": [50364, 26213, 512, 13160, 308, 290, 293, 341, 308, 290, 307, 1936, 512, 992, 295, 19077, 18348, 50720], "temperature": 0.0, "avg_logprob": -0.1474298354118101, "compression_ratio": 1.612121212121212, "no_speech_prob": 0.015079965814948082}, {"id": 91, "seek": 66212, "start": 669.24, "end": 675.32, "text": " these conditions, which is based on the quantum formalism. And the same same is done by Bob,", "tokens": [50720, 613, 4487, 11, 597, 307, 2361, 322, 264, 13018, 9860, 1434, 13, 400, 264, 912, 912, 307, 1096, 538, 6085, 11, 51024], "temperature": 0.0, "avg_logprob": -0.1474298354118101, "compression_ratio": 1.612121212121212, "no_speech_prob": 0.015079965814948082}, {"id": 92, "seek": 66212, "start": 676.04, "end": 683.24, "text": " that he he does the same, these operators can commute. And there is some probability", "tokens": [51060, 300, 415, 415, 775, 264, 912, 11, 613, 19077, 393, 36750, 13, 400, 456, 307, 512, 8482, 51420], "temperature": 0.0, "avg_logprob": -0.1474298354118101, "compression_ratio": 1.612121212121212, "no_speech_prob": 0.015079965814948082}, {"id": 93, "seek": 68324, "start": 684.04, "end": 692.92, "text": " probability that the players respond H H prime, given G G prime.", "tokens": [50404, 8482, 300, 264, 4150, 4196, 389, 389, 5835, 11, 2212, 460, 460, 5835, 13, 50848], "temperature": 0.0, "avg_logprob": -0.21688970705357993, "compression_ratio": 1.3442622950819672, "no_speech_prob": 0.0021704568061977625}, {"id": 94, "seek": 68324, "start": 696.6800000000001, "end": 705.5600000000001, "text": " So one can reformulate this in using the notion of quantum permutation matrix. So here we have this", "tokens": [51036, 407, 472, 393, 8290, 5256, 341, 294, 1228, 264, 10710, 295, 13018, 4784, 11380, 8141, 13, 407, 510, 321, 362, 341, 51480], "temperature": 0.0, "avg_logprob": -0.21688970705357993, "compression_ratio": 1.3442622950819672, "no_speech_prob": 0.0021704568061977625}, {"id": 95, "seek": 70556, "start": 706.52, "end": 715.88, "text": " that a matrix whose entries are p i j. And these are elements of some sister algebra is a quantum", "tokens": [50412, 300, 257, 8141, 6104, 23041, 366, 280, 741, 361, 13, 400, 613, 366, 4959, 295, 512, 4892, 21989, 307, 257, 13018, 50880], "temperature": 0.0, "avg_logprob": -0.17439979825701032, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.004114579409360886}, {"id": 96, "seek": 70556, "start": 716.52, "end": 724.52, "text": " permutation matrix also called magic unitary. If we have this that each p i j is a projection,", "tokens": [50912, 4784, 11380, 8141, 611, 1219, 5585, 517, 4109, 13, 759, 321, 362, 341, 300, 1184, 280, 741, 361, 307, 257, 22743, 11, 51312], "temperature": 0.0, "avg_logprob": -0.17439979825701032, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.004114579409360886}, {"id": 97, "seek": 70556, "start": 724.52, "end": 733.64, "text": " so it must satisfy these relations. And these these matrices in the sort of in the row and", "tokens": [51312, 370, 309, 1633, 19319, 613, 2299, 13, 400, 613, 613, 32284, 294, 264, 1333, 295, 294, 264, 5386, 293, 51768], "temperature": 0.0, "avg_logprob": -0.17439979825701032, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.004114579409360886}, {"id": 98, "seek": 73364, "start": 733.64, "end": 743.64, "text": " column must sum up to one. And the theorem by Lupini-Manchi-Sky-Robertson is that this", "tokens": [50364, 7738, 1633, 2408, 493, 281, 472, 13, 400, 264, 20904, 538, 44319, 3812, 12, 44, 4778, 72, 12, 50, 4133, 12, 49, 7243, 1373, 266, 307, 300, 341, 50864], "temperature": 0.0, "avg_logprob": -0.24481156137254503, "compression_ratio": 1.4858757062146892, "no_speech_prob": 0.0021171749103814363}, {"id": 99, "seek": 73364, "start": 744.84, "end": 753.16, "text": " graph quantum graph isomorphism is equivalent with commuting with a quantum permutation", "tokens": [50924, 4295, 13018, 4295, 307, 32702, 1434, 307, 10344, 365, 800, 10861, 365, 257, 13018, 4784, 11380, 51340], "temperature": 0.0, "avg_logprob": -0.24481156137254503, "compression_ratio": 1.4858757062146892, "no_speech_prob": 0.0021171749103814363}, {"id": 100, "seek": 73364, "start": 754.04, "end": 761.3199999999999, "text": " permutation matrix. So so it's it's can be expressed in a similar framework as the other", "tokens": [51384, 4784, 11380, 8141, 13, 407, 370, 309, 311, 309, 311, 393, 312, 12675, 294, 257, 2531, 8388, 382, 264, 661, 51748], "temperature": 0.0, "avg_logprob": -0.24481156137254503, "compression_ratio": 1.4858757062146892, "no_speech_prob": 0.0021171749103814363}, {"id": 101, "seek": 76132, "start": 761.32, "end": 766.5200000000001, "text": " similarity notions like isomorphism is just commuting or fractional isomorphism with", "tokens": [50364, 32194, 35799, 411, 307, 32702, 1434, 307, 445, 800, 10861, 420, 17948, 1966, 307, 32702, 1434, 365, 50624], "temperature": 0.0, "avg_logprob": -0.12137455164000045, "compression_ratio": 1.759433962264151, "no_speech_prob": 0.002633532742038369}, {"id": 102, "seek": 76132, "start": 766.5200000000001, "end": 773.1600000000001, "text": " with doubly stochastic matrix. And here we have commuting with this quantum permutation matrix.", "tokens": [50624, 365, 10831, 356, 342, 8997, 2750, 8141, 13, 400, 510, 321, 362, 800, 10861, 365, 341, 13018, 4784, 11380, 8141, 13, 50956], "temperature": 0.0, "avg_logprob": -0.12137455164000045, "compression_ratio": 1.759433962264151, "no_speech_prob": 0.002633532742038369}, {"id": 103, "seek": 76132, "start": 774.2, "end": 781.5600000000001, "text": " So formally formally this this is just written out what does it mean formally that these things", "tokens": [51008, 407, 25983, 25983, 341, 341, 307, 445, 3720, 484, 437, 775, 309, 914, 25983, 300, 613, 721, 51376], "temperature": 0.0, "avg_logprob": -0.12137455164000045, "compression_ratio": 1.759433962264151, "no_speech_prob": 0.002633532742038369}, {"id": 104, "seek": 76132, "start": 781.5600000000001, "end": 790.0400000000001, "text": " commute. Yes, and it's important to say that quantum isomorphism is actually undecidable problem", "tokens": [51376, 36750, 13, 1079, 11, 293, 309, 311, 1021, 281, 584, 300, 13018, 307, 32702, 1434, 307, 767, 674, 3045, 38089, 1154, 51800], "temperature": 0.0, "avg_logprob": -0.12137455164000045, "compression_ratio": 1.759433962264151, "no_speech_prob": 0.002633532742038369}, {"id": 105, "seek": 79004, "start": 791.0, "end": 796.92, "text": " compared to the graph isomorphism problem which is clearly decidable where you just can", "tokens": [50412, 5347, 281, 264, 4295, 307, 32702, 1434, 1154, 597, 307, 4448, 21937, 712, 689, 291, 445, 393, 50708], "temperature": 0.0, "avg_logprob": -0.1087692528963089, "compression_ratio": 1.5595238095238095, "no_speech_prob": 0.0033289992716163397}, {"id": 106, "seek": 79004, "start": 797.64, "end": 808.36, "text": " can try all bijections between two graphs. And there I'm not stating not showing it here but", "tokens": [50744, 393, 853, 439, 3228, 1020, 626, 1296, 732, 24877, 13, 400, 456, 286, 478, 406, 26688, 406, 4099, 309, 510, 457, 51280], "temperature": 0.0, "avg_logprob": -0.1087692528963089, "compression_ratio": 1.5595238095238095, "no_speech_prob": 0.0033289992716163397}, {"id": 107, "seek": 79004, "start": 808.36, "end": 815.88, "text": " there is an example of graphs that are not isomorphic but are quantum isomorphic.", "tokens": [51280, 456, 307, 364, 1365, 295, 24877, 300, 366, 406, 307, 32702, 299, 457, 366, 13018, 307, 32702, 299, 13, 51656], "temperature": 0.0, "avg_logprob": -0.1087692528963089, "compression_ratio": 1.5595238095238095, "no_speech_prob": 0.0033289992716163397}, {"id": 108, "seek": 82004, "start": 820.1999999999999, "end": 825.8, "text": " Right now I want to get to the somehow into the quantum isomorphism groups of graphs", "tokens": [50372, 1779, 586, 286, 528, 281, 483, 281, 264, 6063, 666, 264, 13018, 307, 32702, 1434, 3935, 295, 24877, 50652], "temperature": 0.0, "avg_logprob": -0.11682502613511196, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.0009959546150639653}, {"id": 109, "seek": 82004, "start": 827.0, "end": 831.88, "text": " and let's just recall that the isomorphism groups of graphs basically express the symmetries of", "tokens": [50712, 293, 718, 311, 445, 9901, 300, 264, 307, 32702, 1434, 3935, 295, 24877, 1936, 5109, 264, 14232, 302, 2244, 295, 50956], "temperature": 0.0, "avg_logprob": -0.11682502613511196, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.0009959546150639653}, {"id": 110, "seek": 82004, "start": 831.88, "end": 840.52, "text": " graphs and so so basically an isomorphism is just an isomorphism from a graph to itself.", "tokens": [50956, 24877, 293, 370, 370, 1936, 364, 307, 32702, 1434, 307, 445, 364, 307, 32702, 1434, 490, 257, 4295, 281, 2564, 13, 51388], "temperature": 0.0, "avg_logprob": -0.11682502613511196, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.0009959546150639653}, {"id": 111, "seek": 82004, "start": 841.24, "end": 847.9599999999999, "text": " So it's a bijective mapping with which again preserves adjacencies and similarly", "tokens": [51424, 407, 309, 311, 257, 3228, 1020, 488, 18350, 365, 597, 797, 1183, 9054, 22940, 6464, 293, 14138, 51760], "temperature": 0.0, "avg_logprob": -0.11682502613511196, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.0009959546150639653}, {"id": 112, "seek": 84796, "start": 848.0400000000001, "end": 858.2, "text": " automorphisms form a group under composition and it can be equivalently expressed using such equation", "tokens": [50368, 3553, 18191, 13539, 1254, 257, 1594, 833, 12686, 293, 309, 393, 312, 9052, 2276, 12675, 1228, 1270, 5367, 50876], "temperature": 0.0, "avg_logprob": -0.10912002623081207, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0009473466780036688}, {"id": 113, "seek": 84796, "start": 858.2, "end": 864.2, "text": " that the adjacency matrix has to commute with a permutation matrix.", "tokens": [50876, 300, 264, 22940, 3020, 8141, 575, 281, 36750, 365, 257, 4784, 11380, 8141, 13, 51176], "temperature": 0.0, "avg_logprob": -0.10912002623081207, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0009473466780036688}, {"id": 114, "seek": 84796, "start": 866.2800000000001, "end": 874.9200000000001, "text": " Yeah so this in particular graph has a dihedral group d5 as an automorphism group we can do just", "tokens": [51280, 865, 370, 341, 294, 1729, 4295, 575, 257, 1026, 71, 24764, 1594, 274, 20, 382, 364, 3553, 18191, 1434, 1594, 321, 393, 360, 445, 51712], "temperature": 0.0, "avg_logprob": -0.10912002623081207, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0009473466780036688}, {"id": 115, "seek": 87492, "start": 874.92, "end": 885.56, "text": " reflections and rotations here. Okay so you probably know much more about these things but", "tokens": [50364, 30679, 293, 44796, 510, 13, 1033, 370, 291, 1391, 458, 709, 544, 466, 613, 721, 457, 50896], "temperature": 0.0, "avg_logprob": -0.09966969868493458, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0021749953739345074}, {"id": 116, "seek": 87492, "start": 885.56, "end": 892.68, "text": " I'm just mentioning here that we have the notion of compact groups there is a correspondence between", "tokens": [50896, 286, 478, 445, 18315, 510, 300, 321, 362, 264, 10710, 295, 14679, 3935, 456, 307, 257, 38135, 1296, 51252], "temperature": 0.0, "avg_logprob": -0.09966969868493458, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0021749953739345074}, {"id": 117, "seek": 87492, "start": 892.68, "end": 900.04, "text": " compact groups and commutative sister algebras then when we take the sister algebras to be", "tokens": [51252, 14679, 3935, 293, 800, 325, 1166, 4892, 419, 432, 38182, 550, 562, 321, 747, 264, 4892, 419, 432, 38182, 281, 312, 51620], "temperature": 0.0, "avg_logprob": -0.09966969868493458, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0021749953739345074}, {"id": 118, "seek": 90004, "start": 900.04, "end": 909.56, "text": " non commutative then from there we go to compact quantum groups. So we now immediately", "tokens": [50364, 2107, 800, 325, 1166, 550, 490, 456, 321, 352, 281, 14679, 13018, 3935, 13, 407, 321, 586, 4258, 50840], "temperature": 0.0, "avg_logprob": -0.12851099635279456, "compression_ratio": 1.392, "no_speech_prob": 0.0019128613639622927}, {"id": 119, "seek": 90004, "start": 910.52, "end": 918.68, "text": " say what is a quantum automorphism group of a graph. So this is definition according to", "tokens": [50888, 584, 437, 307, 257, 13018, 3553, 18191, 1434, 1594, 295, 257, 4295, 13, 407, 341, 307, 7123, 4650, 281, 51296], "temperature": 0.0, "avg_logprob": -0.12851099635279456, "compression_ratio": 1.392, "no_speech_prob": 0.0019128613639622927}, {"id": 120, "seek": 91868, "start": 918.68, "end": 926.68, "text": " Banica and basically so we say what is this sister algebra in this case so the", "tokens": [50364, 13850, 2262, 293, 1936, 370, 321, 584, 437, 307, 341, 4892, 21989, 294, 341, 1389, 370, 264, 50764], "temperature": 0.0, "avg_logprob": -0.18236090773243016, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004434436559677124}, {"id": 121, "seek": 91868, "start": 929.0799999999999, "end": 934.76, "text": " c of qg that's how we'll denote the quantum automorphism group of graph is the universal", "tokens": [50884, 269, 295, 9505, 70, 300, 311, 577, 321, 603, 45708, 264, 13018, 3553, 18191, 1434, 1594, 295, 4295, 307, 264, 11455, 51168], "temperature": 0.0, "avg_logprob": -0.18236090773243016, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004434436559677124}, {"id": 122, "seek": 91868, "start": 934.76, "end": 941.3199999999999, "text": " sister algebra generated by the elements pij and satisfying basically these following", "tokens": [51168, 4892, 21989, 10833, 538, 264, 4959, 280, 1718, 293, 18348, 1936, 613, 3480, 51496], "temperature": 0.0, "avg_logprob": -0.18236090773243016, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.004434436559677124}, {"id": 123, "seek": 94132, "start": 941.32, "end": 948.6800000000001, "text": " relations which we had similar relations before and these first two relations correspond", "tokens": [50364, 2299, 597, 321, 632, 2531, 2299, 949, 293, 613, 700, 732, 2299, 6805, 50732], "temperature": 0.0, "avg_logprob": -0.0651234886863015, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.004694532603025436}, {"id": 124, "seek": 94132, "start": 948.6800000000001, "end": 957.1600000000001, "text": " to the fact that sort of the p made up of this entries pij is a quantum permutation matrix", "tokens": [50732, 281, 264, 1186, 300, 1333, 295, 264, 280, 1027, 493, 295, 341, 23041, 280, 1718, 307, 257, 13018, 4784, 11380, 8141, 51156], "temperature": 0.0, "avg_logprob": -0.0651234886863015, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.004694532603025436}, {"id": 125, "seek": 94132, "start": 957.8000000000001, "end": 965.24, "text": " and this last one corresponds sort of to this commuting equation.", "tokens": [51188, 293, 341, 1036, 472, 23249, 1333, 295, 281, 341, 800, 10861, 5367, 13, 51560], "temperature": 0.0, "avg_logprob": -0.0651234886863015, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.004694532603025436}, {"id": 126, "seek": 96524, "start": 965.4, "end": 978.2, "text": " So if we require those pij to commute then then we get that the c of algae the algebra of functions", "tokens": [50372, 407, 498, 321, 3651, 729, 280, 1718, 281, 36750, 550, 550, 321, 483, 300, 264, 269, 295, 32658, 264, 21989, 295, 6828, 51012], "temperature": 0.0, "avg_logprob": -0.11395235338072845, "compression_ratio": 1.7239263803680982, "no_speech_prob": 0.0008270502439700067}, {"id": 127, "seek": 96524, "start": 978.2, "end": 985.64, "text": " on the automorphism group of graph and the pij would be a function taking an automorphism", "tokens": [51012, 322, 264, 3553, 18191, 1434, 1594, 295, 4295, 293, 264, 280, 1718, 576, 312, 257, 2445, 1940, 364, 3553, 18191, 1434, 51384], "temperature": 0.0, "avg_logprob": -0.11395235338072845, "compression_ratio": 1.7239263803680982, "no_speech_prob": 0.0008270502439700067}, {"id": 128, "seek": 96524, "start": 985.64, "end": 993.16, "text": " to the ij entry of the matrix representation and this matrix p is then called a fundamental", "tokens": [51384, 281, 264, 741, 73, 8729, 295, 264, 8141, 10290, 293, 341, 8141, 280, 307, 550, 1219, 257, 8088, 51760], "temperature": 0.0, "avg_logprob": -0.11395235338072845, "compression_ratio": 1.7239263803680982, "no_speech_prob": 0.0008270502439700067}, {"id": 129, "seek": 99316, "start": 993.16, "end": 1006.52, "text": " representation of qg. Now let's connect it to quantum isomorphisms and so let p be the fundamental", "tokens": [50364, 10290, 295, 9505, 70, 13, 823, 718, 311, 1745, 309, 281, 13018, 307, 32702, 13539, 293, 370, 718, 280, 312, 264, 8088, 51032], "temperature": 0.0, "avg_logprob": -0.10440797805786133, "compression_ratio": 1.4960629921259843, "no_speech_prob": 0.0010632197372615337}, {"id": 130, "seek": 99316, "start": 1006.52, "end": 1016.12, "text": " representation of qg and we can define the following relation that ij corresponding to some", "tokens": [51032, 10290, 295, 9505, 70, 293, 321, 393, 6964, 264, 3480, 9721, 300, 741, 73, 11760, 281, 512, 51512], "temperature": 0.0, "avg_logprob": -0.10440797805786133, "compression_ratio": 1.4960629921259843, "no_speech_prob": 0.0010632197372615337}, {"id": 131, "seek": 101612, "start": 1016.12, "end": 1025.48, "text": " vertices let's say of the graph i is in relation with j if pij is not a zero.", "tokens": [50364, 32053, 718, 311, 584, 295, 264, 4295, 741, 307, 294, 9721, 365, 361, 498, 280, 1718, 307, 406, 257, 4018, 13, 50832], "temperature": 0.0, "avg_logprob": -0.12268005791357008, "compression_ratio": 1.5496688741721854, "no_speech_prob": 0.00620661024004221}, {"id": 132, "seek": 101612, "start": 1026.92, "end": 1031.8, "text": " Now the theorem or lemma is that this is actually an equivalent relation", "tokens": [50904, 823, 264, 20904, 420, 7495, 1696, 307, 300, 341, 307, 767, 364, 10344, 9721, 51148], "temperature": 0.0, "avg_logprob": -0.12268005791357008, "compression_ratio": 1.5496688741721854, "no_speech_prob": 0.00620661024004221}, {"id": 133, "seek": 101612, "start": 1033.0, "end": 1040.92, "text": " and the orbits of the or quantum orbits are defined to be these equivalence classes", "tokens": [51208, 293, 264, 43522, 295, 264, 420, 13018, 43522, 366, 7642, 281, 312, 613, 9052, 655, 5359, 51604], "temperature": 0.0, "avg_logprob": -0.12268005791357008, "compression_ratio": 1.5496688741721854, "no_speech_prob": 0.00620661024004221}, {"id": 134, "seek": 104092, "start": 1040.92, "end": 1050.44, "text": " of this of this relation and so the how we connected with the isomorphism quantum isomorphism is that", "tokens": [50364, 295, 341, 295, 341, 9721, 293, 370, 264, 577, 321, 4582, 365, 264, 307, 32702, 1434, 13018, 307, 32702, 1434, 307, 300, 50840], "temperature": 0.0, "avg_logprob": -0.07386514799935477, "compression_ratio": 1.913907284768212, "no_speech_prob": 0.0009673688327893615}, {"id": 135, "seek": 104092, "start": 1052.2, "end": 1060.92, "text": " if g and h are connected graphs then they are quantum isomorphic if and only if there exists g", "tokens": [50928, 498, 290, 293, 276, 366, 4582, 24877, 550, 436, 366, 13018, 307, 32702, 299, 498, 293, 787, 498, 456, 8198, 290, 51364], "temperature": 0.0, "avg_logprob": -0.07386514799935477, "compression_ratio": 1.913907284768212, "no_speech_prob": 0.0009673688327893615}, {"id": 136, "seek": 104092, "start": 1061.96, "end": 1067.4, "text": " one vertex in the first graph and one vertex in the second graph which are in the same orbit", "tokens": [51416, 472, 28162, 294, 264, 700, 4295, 293, 472, 28162, 294, 264, 1150, 4295, 597, 366, 294, 264, 912, 13991, 51688], "temperature": 0.0, "avg_logprob": -0.07386514799935477, "compression_ratio": 1.913907284768212, "no_speech_prob": 0.0009673688327893615}, {"id": 137, "seek": 106740, "start": 1067.4, "end": 1073.4, "text": " of the union of the graphs which is sort of mimicking what is expected in classical", "tokens": [50364, 295, 264, 11671, 295, 264, 24877, 597, 307, 1333, 295, 12247, 10401, 437, 307, 5176, 294, 13735, 50664], "temperature": 0.0, "avg_logprob": -0.09632670161235764, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.002496464177966118}, {"id": 138, "seek": 106740, "start": 1073.4, "end": 1078.44, "text": " automorphism groups of graphs i will mention it also later. It is a very important theorem", "tokens": [50664, 3553, 18191, 1434, 3935, 295, 24877, 741, 486, 2152, 309, 611, 1780, 13, 467, 307, 257, 588, 1021, 20904, 50916], "temperature": 0.0, "avg_logprob": -0.09632670161235764, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.002496464177966118}, {"id": 139, "seek": 106740, "start": 1078.44, "end": 1085.16, "text": " which will actually provide us with the combinatorial tools that can be used to study", "tokens": [50916, 597, 486, 767, 2893, 505, 365, 264, 2512, 31927, 831, 3873, 300, 393, 312, 1143, 281, 2979, 51252], "temperature": 0.0, "avg_logprob": -0.09632670161235764, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.002496464177966118}, {"id": 140, "seek": 106740, "start": 1085.16, "end": 1092.2, "text": " quantum automorphism groups of graphs and this is exactly the following so let g be a graph and", "tokens": [51252, 13018, 3553, 18191, 1434, 3935, 295, 24877, 293, 341, 307, 2293, 264, 3480, 370, 718, 290, 312, 257, 4295, 293, 51604], "temperature": 0.0, "avg_logprob": -0.09632670161235764, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.002496464177966118}, {"id": 141, "seek": 109220, "start": 1093.0, "end": 1096.8400000000001, "text": " now i will define this two-dimensional Weissfer-Lehmann algorithm shortly", "tokens": [50404, 586, 741, 486, 6964, 341, 732, 12, 18759, 492, 891, 612, 12, 11020, 8587, 969, 9284, 13392, 50596], "temperature": 0.0, "avg_logprob": -0.1178314025143543, "compression_ratio": 1.8128342245989304, "no_speech_prob": 0.0012668018462136388}, {"id": 142, "seek": 109220, "start": 1097.88, "end": 1103.24, "text": " but it's some kind of algorithm that creates a partition on the graph which is", "tokens": [50648, 457, 309, 311, 512, 733, 295, 9284, 300, 7829, 257, 24808, 322, 264, 4295, 597, 307, 50916], "temperature": 0.0, "avg_logprob": -0.1178314025143543, "compression_ratio": 1.8128342245989304, "no_speech_prob": 0.0012668018462136388}, {"id": 143, "seek": 109220, "start": 1103.88, "end": 1110.3600000000001, "text": " automorphism invariant in the classical automorphism group so we have this partition", "tokens": [50948, 3553, 18191, 1434, 33270, 394, 294, 264, 13735, 3553, 18191, 1434, 1594, 370, 321, 362, 341, 24808, 51272], "temperature": 0.0, "avg_logprob": -0.1178314025143543, "compression_ratio": 1.8128342245989304, "no_speech_prob": 0.0012668018462136388}, {"id": 144, "seek": 109220, "start": 1111.32, "end": 1118.6000000000001, "text": " of the vertices and which is constructed let's say by this two-dimensional Weissfer-Lehmann algorithm", "tokens": [51320, 295, 264, 32053, 293, 597, 307, 17083, 718, 311, 584, 538, 341, 732, 12, 18759, 492, 891, 612, 12, 11020, 8587, 969, 9284, 51684], "temperature": 0.0, "avg_logprob": -0.1178314025143543, "compression_ratio": 1.8128342245989304, "no_speech_prob": 0.0012668018462136388}, {"id": 145, "seek": 111860, "start": 1118.6, "end": 1123.1599999999999, "text": " and if two vertices belong in two different colors or partitions", "tokens": [50364, 293, 498, 732, 32053, 5784, 294, 732, 819, 4577, 420, 644, 2451, 50592], "temperature": 0.0, "avg_logprob": -0.08971290588378907, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.003994972910732031}, {"id": 146, "seek": 111860, "start": 1125.1599999999999, "end": 1131.1599999999999, "text": " then this pij is equal to zero so in other words they are in different quantum orbits", "tokens": [50692, 550, 341, 280, 1718, 307, 2681, 281, 4018, 370, 294, 661, 2283, 436, 366, 294, 819, 13018, 43522, 50992], "temperature": 0.0, "avg_logprob": -0.08971290588378907, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.003994972910732031}, {"id": 147, "seek": 111860, "start": 1132.4399999999998, "end": 1139.3999999999999, "text": " so so this is very important very very useful tool in general and it's actually", "tokens": [51056, 370, 370, 341, 307, 588, 1021, 588, 588, 4420, 2290, 294, 2674, 293, 309, 311, 767, 51404], "temperature": 0.0, "avg_logprob": -0.08971290588378907, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.003994972910732031}, {"id": 148, "seek": 111860, "start": 1140.52, "end": 1148.1999999999998, "text": " this result is due to also these people and this is very powerful tool powerful combinatorial tool", "tokens": [51460, 341, 1874, 307, 3462, 281, 611, 613, 561, 293, 341, 307, 588, 4005, 2290, 4005, 2512, 31927, 831, 2290, 51844], "temperature": 0.0, "avg_logprob": -0.08971290588378907, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.003994972910732031}, {"id": 149, "seek": 114820, "start": 1148.28, "end": 1155.56, "text": " to use and it appears in many many different areas so it's actually i think quite fascinating result", "tokens": [50368, 281, 764, 293, 309, 7038, 294, 867, 867, 819, 3179, 370, 309, 311, 767, 741, 519, 1596, 10343, 1874, 50732], "temperature": 0.0, "avg_logprob": -0.08316607475280761, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.0019111401634290814}, {"id": 150, "seek": 114820, "start": 1156.6000000000001, "end": 1161.72, "text": " and there is also and i will talk about this there is also a better version of this two-dimensional", "tokens": [50784, 293, 456, 307, 611, 293, 741, 486, 751, 466, 341, 456, 307, 611, 257, 1101, 3037, 295, 341, 732, 12, 18759, 51040], "temperature": 0.0, "avg_logprob": -0.08316607475280761, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.0019111401634290814}, {"id": 151, "seek": 114820, "start": 1161.72, "end": 1167.0, "text": " Weissfer-Lehmann algorithm but it is no longer useful for quantum groups because as far as i", "tokens": [51040, 492, 891, 612, 12, 11020, 8587, 969, 9284, 457, 309, 307, 572, 2854, 4420, 337, 13018, 3935, 570, 382, 1400, 382, 741, 51304], "temperature": 0.0, "avg_logprob": -0.08316607475280761, "compression_ratio": 1.5421052631578946, "no_speech_prob": 0.0019111401634290814}, {"id": 152, "seek": 116700, "start": 1167.0, "end": 1174.36, "text": " understand it's not really possible to define quantum quantum orbitals", "tokens": [50364, 1223, 309, 311, 406, 534, 1944, 281, 6964, 13018, 13018, 50015, 50732], "temperature": 0.0, "avg_logprob": -0.1708584415669344, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.011617912910878658}, {"id": 153, "seek": 116700, "start": 1178.12, "end": 1184.04, "text": " like analogs of orbitals which are basically the orbits of the action of the group induced", "tokens": [50920, 411, 16660, 82, 295, 50015, 597, 366, 1936, 264, 43522, 295, 264, 3069, 295, 264, 1594, 33991, 51216], "temperature": 0.0, "avg_logprob": -0.1708584415669344, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.011617912910878658}, {"id": 154, "seek": 116700, "start": 1184.04, "end": 1187.4, "text": " on the Cartesian product of the set on which is acting so", "tokens": [51216, 322, 264, 22478, 42434, 1674, 295, 264, 992, 322, 597, 307, 6577, 370, 51384], "temperature": 0.0, "avg_logprob": -0.1708584415669344, "compression_ratio": 1.6102941176470589, "no_speech_prob": 0.011617912910878658}, {"id": 155, "seek": 118740, "start": 1188.2800000000002, "end": 1196.76, "text": " yeah so if you remember in the beginning we had this slide where this notion of", "tokens": [50408, 1338, 370, 498, 291, 1604, 294, 264, 2863, 321, 632, 341, 4137, 689, 341, 10710, 295, 50832], "temperature": 0.0, "avg_logprob": -0.19642720456983223, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.0021243076771497726}, {"id": 156, "seek": 118740, "start": 1196.76, "end": 1200.8400000000001, "text": " k-dimensional Weissfer-Lehmann indistinguishability is equivalent to", "tokens": [50832, 350, 12, 18759, 492, 891, 612, 12, 11020, 8587, 969, 1016, 468, 7050, 742, 2310, 307, 10344, 281, 51036], "temperature": 0.0, "avg_logprob": -0.19642720456983223, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.0021243076771497726}, {"id": 157, "seek": 118740, "start": 1202.2800000000002, "end": 1210.3600000000001, "text": " homomorphism counts into graphs of this bounded trivite so then there was the result by", "tokens": [51108, 3655, 32702, 1434, 14893, 666, 24877, 295, 341, 37498, 1376, 85, 642, 370, 550, 456, 390, 264, 1874, 538, 51512], "temperature": 0.0, "avg_logprob": -0.19642720456983223, "compression_ratio": 1.4390243902439024, "no_speech_prob": 0.0021243076771497726}, {"id": 158, "seek": 121036, "start": 1210.36, "end": 1217.0, "text": " robertson manjiska which says that quantum isomorphism is equivalent to counting homomorphisms", "tokens": [50364, 744, 607, 1373, 266, 587, 73, 21945, 597, 1619, 300, 13018, 307, 32702, 1434, 307, 10344, 281, 13251, 3655, 32702, 13539, 50696], "temperature": 0.0, "avg_logprob": -0.13322886149088542, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.016087619587779045}, {"id": 159, "seek": 121036, "start": 1217.0, "end": 1224.28, "text": " from planar graphs so this is another reason why higher dimensional Weissfer-Lehmann doesn't work", "tokens": [50696, 490, 1393, 289, 24877, 370, 341, 307, 1071, 1778, 983, 2946, 18795, 492, 891, 612, 12, 11020, 8587, 969, 1177, 380, 589, 51060], "temperature": 0.0, "avg_logprob": -0.13322886149088542, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.016087619587779045}, {"id": 160, "seek": 121036, "start": 1224.28, "end": 1233.1599999999999, "text": " here is this because all planar like all trivite graphs at most two are planar but trivite graphs", "tokens": [51060, 510, 307, 341, 570, 439, 1393, 289, 411, 439, 1376, 85, 642, 24877, 412, 881, 732, 366, 1393, 289, 457, 1376, 85, 642, 24877, 51504], "temperature": 0.0, "avg_logprob": -0.13322886149088542, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.016087619587779045}, {"id": 161, "seek": 123316, "start": 1233.16, "end": 1241.88, "text": " at most three are not all planar so that's another let's say reason why this Weissfer-Lehmann", "tokens": [50364, 412, 881, 1045, 366, 406, 439, 1393, 289, 370, 300, 311, 1071, 718, 311, 584, 1778, 983, 341, 492, 891, 612, 12, 11020, 8587, 969, 50800], "temperature": 0.0, "avg_logprob": -0.07064036846160889, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.01275846641510725}, {"id": 162, "seek": 123316, "start": 1241.88, "end": 1248.2, "text": " doesn't work anymore in higher dimension now let's finally talk about this okay Weissfer-Lehmann", "tokens": [50800, 1177, 380, 589, 3602, 294, 2946, 10139, 586, 718, 311, 2721, 751, 466, 341, 1392, 492, 891, 612, 12, 11020, 8587, 969, 51116], "temperature": 0.0, "avg_logprob": -0.07064036846160889, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.01275846641510725}, {"id": 163, "seek": 123316, "start": 1248.2, "end": 1253.0800000000002, "text": " in a bit so now i want to a little bit talk about the graph isomorphism problem because that's", "tokens": [51116, 294, 257, 857, 370, 586, 741, 528, 281, 257, 707, 857, 751, 466, 264, 4295, 307, 32702, 1434, 1154, 570, 300, 311, 51360], "temperature": 0.0, "avg_logprob": -0.07064036846160889, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.01275846641510725}, {"id": 164, "seek": 123316, "start": 1253.0800000000002, "end": 1258.44, "text": " actually the motivation for this Weissfer-Lehmann algorithm so the graph isomorphism problem is", "tokens": [51360, 767, 264, 12335, 337, 341, 492, 891, 612, 12, 11020, 8587, 969, 9284, 370, 264, 4295, 307, 32702, 1434, 1154, 307, 51628], "temperature": 0.0, "avg_logprob": -0.07064036846160889, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.01275846641510725}, {"id": 165, "seek": 125844, "start": 1258.44, "end": 1265.0, "text": " just the computational variant of this graph isomorphism so basically we'd get two graphs and", "tokens": [50364, 445, 264, 28270, 17501, 295, 341, 4295, 307, 32702, 1434, 370, 1936, 321, 1116, 483, 732, 24877, 293, 50692], "temperature": 0.0, "avg_logprob": -0.06902238726615906, "compression_ratio": 1.7722772277227723, "no_speech_prob": 0.003485400229692459}, {"id": 166, "seek": 125844, "start": 1265.0, "end": 1271.56, "text": " we want to answer yes if and only if the the graphs are isomorphic and there is actually", "tokens": [50692, 321, 528, 281, 1867, 2086, 498, 293, 787, 498, 264, 264, 24877, 366, 307, 32702, 299, 293, 456, 307, 767, 51020], "temperature": 0.0, "avg_logprob": -0.06902238726615906, "compression_ratio": 1.7722772277227723, "no_speech_prob": 0.003485400229692459}, {"id": 167, "seek": 125844, "start": 1271.56, "end": 1277.48, "text": " a polynomial time equivalent problem which is computing the generating set of the", "tokens": [51020, 257, 26110, 565, 10344, 1154, 597, 307, 15866, 264, 17746, 992, 295, 264, 51316], "temperature": 0.0, "avg_logprob": -0.06902238726615906, "compression_ratio": 1.7722772277227723, "no_speech_prob": 0.003485400229692459}, {"id": 168, "seek": 125844, "start": 1277.48, "end": 1285.96, "text": " automorphism group of the graph so actually this is very similar to what we said before about", "tokens": [51316, 3553, 18191, 1434, 1594, 295, 264, 4295, 370, 767, 341, 307, 588, 2531, 281, 437, 321, 848, 949, 466, 51740], "temperature": 0.0, "avg_logprob": -0.06902238726615906, "compression_ratio": 1.7722772277227723, "no_speech_prob": 0.003485400229692459}, {"id": 169, "seek": 128596, "start": 1285.96, "end": 1294.44, "text": " quantum groups and quantum isomorphism that to to see this why why this is equivalent or at least", "tokens": [50364, 13018, 3935, 293, 13018, 307, 32702, 1434, 300, 281, 281, 536, 341, 983, 983, 341, 307, 10344, 420, 412, 1935, 50788], "temperature": 0.0, "avg_logprob": -0.08918548739233682, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.0014686565846204758}, {"id": 170, "seek": 128596, "start": 1294.44, "end": 1299.8, "text": " one direction is to just consider two connected graphs and then take the disjoint union and", "tokens": [50788, 472, 3513, 307, 281, 445, 1949, 732, 4582, 24877, 293, 550, 747, 264, 717, 48613, 11671, 293, 51056], "temperature": 0.0, "avg_logprob": -0.08918548739233682, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.0014686565846204758}, {"id": 171, "seek": 128596, "start": 1299.8, "end": 1307.48, "text": " basically if there is an automorphism taking one to the other then then we know that they", "tokens": [51056, 1936, 498, 456, 307, 364, 3553, 18191, 1434, 1940, 472, 281, 264, 661, 550, 550, 321, 458, 300, 436, 51440], "temperature": 0.0, "avg_logprob": -0.08918548739233682, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.0014686565846204758}, {"id": 172, "seek": 128596, "start": 1307.48, "end": 1312.28, "text": " must be isomorphic when there is a generator in the generating set of the automorphism group", "tokens": [51440, 1633, 312, 307, 32702, 299, 562, 456, 307, 257, 19265, 294, 264, 17746, 992, 295, 264, 3553, 18191, 1434, 1594, 51680], "temperature": 0.0, "avg_logprob": -0.08918548739233682, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.0014686565846204758}, {"id": 173, "seek": 131228, "start": 1312.52, "end": 1320.76, "text": " so the currently best known algorithm for graph isomorphism runs in this time which is called", "tokens": [50376, 370, 264, 4362, 1151, 2570, 9284, 337, 4295, 307, 32702, 1434, 6676, 294, 341, 565, 597, 307, 1219, 50788], "temperature": 0.0, "avg_logprob": -0.11882777941429008, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0007997864740900695}, {"id": 174, "seek": 131228, "start": 1320.76, "end": 1328.76, "text": " quasi polynomial and it is actually heavily based on group theory and just why this problem is", "tokens": [50788, 20954, 26110, 293, 309, 307, 767, 10950, 2361, 322, 1594, 5261, 293, 445, 983, 341, 1154, 307, 51188], "temperature": 0.0, "avg_logprob": -0.11882777941429008, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0007997864740900695}, {"id": 175, "seek": 131228, "start": 1328.76, "end": 1337.0, "text": " actually interesting is that from the complexity theory point of view actually you can have basically", "tokens": [51188, 767, 1880, 307, 300, 490, 264, 14024, 5261, 935, 295, 1910, 767, 291, 393, 362, 1936, 51600], "temperature": 0.0, "avg_logprob": -0.11882777941429008, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0007997864740900695}, {"id": 176, "seek": 133700, "start": 1337.8, "end": 1344.2, "text": " things that can happen and each of them would be very interesting like if so the goal is usually", "tokens": [50404, 721, 300, 393, 1051, 293, 1184, 295, 552, 576, 312, 588, 1880, 411, 498, 370, 264, 3387, 307, 2673, 50724], "temperature": 0.0, "avg_logprob": -0.08669324619014089, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.007860841229557991}, {"id": 177, "seek": 133700, "start": 1344.2, "end": 1350.28, "text": " to solve some problem in polynomial time and if you could solve it in polynomial time then it means", "tokens": [50724, 281, 5039, 512, 1154, 294, 26110, 565, 293, 498, 291, 727, 5039, 309, 294, 26110, 565, 550, 309, 1355, 51028], "temperature": 0.0, "avg_logprob": -0.08669324619014089, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.007860841229557991}, {"id": 178, "seek": 133700, "start": 1350.28, "end": 1357.56, "text": " that you probably have to invent some new mathematics if it was mp complete which is like the notion of", "tokens": [51028, 300, 291, 1391, 362, 281, 7962, 512, 777, 18666, 498, 309, 390, 275, 79, 3566, 597, 307, 411, 264, 10710, 295, 51392], "temperature": 0.0, "avg_logprob": -0.08669324619014089, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.007860841229557991}, {"id": 179, "seek": 133700, "start": 1357.56, "end": 1365.88, "text": " algorithmic hardness then then something called polynomial time hierarchy collapses which is", "tokens": [51392, 9284, 299, 44019, 550, 550, 746, 1219, 26110, 565, 22333, 48765, 597, 307, 51808], "temperature": 0.0, "avg_logprob": -0.08669324619014089, "compression_ratio": 1.8110599078341014, "no_speech_prob": 0.007860841229557991}, {"id": 180, "seek": 136588, "start": 1365.88, "end": 1372.0400000000002, "text": " basically part of complexity theory and if this collapses then many people believe that this doesn't", "tokens": [50364, 1936, 644, 295, 14024, 5261, 293, 498, 341, 48765, 550, 867, 561, 1697, 300, 341, 1177, 380, 50672], "temperature": 0.0, "avg_logprob": -0.0881163568207712, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0012994452845305204}, {"id": 181, "seek": 136588, "start": 1372.0400000000002, "end": 1378.5200000000002, "text": " collapse so they believe there is evidence so that it should not be mp complete and when it's", "tokens": [50672, 15584, 370, 436, 1697, 456, 307, 4467, 370, 300, 309, 820, 406, 312, 275, 79, 3566, 293, 562, 309, 311, 50996], "temperature": 0.0, "avg_logprob": -0.0881163568207712, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0012994452845305204}, {"id": 182, "seek": 136588, "start": 1378.5200000000002, "end": 1384.3600000000001, "text": " intermediate somewhere in between then it would resolve the famous p versus mp question so so this", "tokens": [50996, 19376, 4079, 294, 1296, 550, 309, 576, 14151, 264, 4618, 280, 5717, 275, 79, 1168, 370, 370, 341, 51288], "temperature": 0.0, "avg_logprob": -0.0881163568207712, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0012994452845305204}, {"id": 183, "seek": 136588, "start": 1384.3600000000001, "end": 1388.8400000000001, "text": " problem originated from some practical applications but actually for practical applications it's", "tokens": [51288, 1154, 31129, 490, 512, 8496, 5821, 457, 767, 337, 8496, 5821, 309, 311, 51512], "temperature": 0.0, "avg_logprob": -0.0881163568207712, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0012994452845305204}, {"id": 184, "seek": 136588, "start": 1388.8400000000001, "end": 1394.0400000000002, "text": " pretty much solved actually by these vise or lemma that I will mention it works very well", "tokens": [51512, 1238, 709, 13041, 767, 538, 613, 371, 908, 420, 7495, 1696, 300, 286, 486, 2152, 309, 1985, 588, 731, 51772], "temperature": 0.0, "avg_logprob": -0.0881163568207712, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0012994452845305204}, {"id": 185, "seek": 139404, "start": 1394.04, "end": 1403.96, "text": " in most of the practical cases but yeah so why is this problem actually difficult is that", "tokens": [50364, 294, 881, 295, 264, 8496, 3331, 457, 1338, 370, 983, 307, 341, 1154, 767, 2252, 307, 300, 50860], "temperature": 0.0, "avg_logprob": -0.09142328711117015, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0029101455584168434}, {"id": 186, "seek": 139404, "start": 1405.32, "end": 1410.92, "text": " these algorithms are actually heavily based on group theory and", "tokens": [50928, 613, 14642, 366, 767, 10950, 2361, 322, 1594, 5261, 293, 51208], "temperature": 0.0, "avg_logprob": -0.09142328711117015, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0029101455584168434}, {"id": 187, "seek": 139404, "start": 1414.36, "end": 1420.92, "text": " one of the one of the main parts is to do some recursive algorithm and", "tokens": [51380, 472, 295, 264, 472, 295, 264, 2135, 3166, 307, 281, 360, 512, 20560, 488, 9284, 293, 51708], "temperature": 0.0, "avg_logprob": -0.09142328711117015, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0029101455584168434}, {"id": 188, "seek": 142092, "start": 1421.3200000000002, "end": 1428.6000000000001, "text": " the problem the problem are are different complication complicated actions of some large group", "tokens": [50384, 264, 1154, 264, 1154, 366, 366, 819, 1209, 8758, 6179, 5909, 295, 512, 2416, 1594, 50748], "temperature": 0.0, "avg_logprob": -0.159419902535372, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016678259707987309}, {"id": 189, "seek": 142092, "start": 1428.6000000000001, "end": 1436.76, "text": " like if we have this simple graph then it has the automorphism group Sn and it has the so-called", "tokens": [50748, 411, 498, 321, 362, 341, 2199, 4295, 550, 309, 575, 264, 3553, 18191, 1434, 1594, 9264, 293, 309, 575, 264, 370, 12, 11880, 51156], "temperature": 0.0, "avg_logprob": -0.159419902535372, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016678259707987309}, {"id": 190, "seek": 142092, "start": 1436.76, "end": 1442.28, "text": " natural action on the set one to five which basically doing what you expect to just permeate", "tokens": [51156, 3303, 3069, 322, 264, 992, 472, 281, 1732, 597, 1936, 884, 437, 291, 2066, 281, 445, 30287, 473, 51432], "temperature": 0.0, "avg_logprob": -0.159419902535372, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016678259707987309}, {"id": 191, "seek": 142092, "start": 1442.28, "end": 1449.16, "text": " the vertices but if you care to guess okay I'm missing an edge here oh no what is the", "tokens": [51432, 264, 32053, 457, 498, 291, 1127, 281, 2041, 1392, 286, 478, 5361, 364, 4691, 510, 1954, 572, 437, 307, 264, 51776], "temperature": 0.0, "avg_logprob": -0.159419902535372, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0016678259707987309}, {"id": 192, "seek": 144916, "start": 1449.24, "end": 1452.6000000000001, "text": " automorphism group of this graph which is the well-known peterson graph", "tokens": [50368, 3553, 18191, 1434, 1594, 295, 341, 4295, 597, 307, 264, 731, 12, 6861, 3817, 3953, 4295, 50536], "temperature": 0.0, "avg_logprob": -0.1497535800933838, "compression_ratio": 1.38135593220339, "no_speech_prob": 0.0020430677104741335}, {"id": 193, "seek": 144916, "start": 1458.3600000000001, "end": 1466.0400000000002, "text": " yeah it's also s5 sorry s5 yes it was s5 yeah it's s5 but now it's acting like on 10 points", "tokens": [50824, 1338, 309, 311, 611, 262, 20, 2597, 262, 20, 2086, 309, 390, 262, 20, 1338, 309, 311, 262, 20, 457, 586, 309, 311, 6577, 411, 322, 1266, 2793, 51208], "temperature": 0.0, "avg_logprob": -0.1497535800933838, "compression_ratio": 1.38135593220339, "no_speech_prob": 0.0020430677104741335}, {"id": 194, "seek": 146604, "start": 1467.0, "end": 1477.72, "text": " and actually you cannot find like partition into into non-trivial blocks", "tokens": [50412, 293, 767, 291, 2644, 915, 411, 24808, 666, 666, 2107, 12, 83, 470, 22640, 8474, 50948], "temperature": 0.0, "avg_logprob": -0.15809810572657093, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.013794460333883762}, {"id": 195, "seek": 146604, "start": 1480.12, "end": 1488.76, "text": " so like partition that is preserved by the action you can only partition it trivially", "tokens": [51068, 370, 411, 24808, 300, 307, 22242, 538, 264, 3069, 291, 393, 787, 24808, 309, 1376, 85, 2270, 51500], "temperature": 0.0, "avg_logprob": -0.15809810572657093, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.013794460333883762}, {"id": 196, "seek": 146604, "start": 1489.32, "end": 1495.48, "text": " and this means that action is primitive and you cannot do recursion so the problem is in", "tokens": [51528, 293, 341, 1355, 300, 3069, 307, 28540, 293, 291, 2644, 360, 20560, 313, 370, 264, 1154, 307, 294, 51836], "temperature": 0.0, "avg_logprob": -0.15809810572657093, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.013794460333883762}, {"id": 197, "seek": 149548, "start": 1495.48, "end": 1502.6, "text": " this isomorphism testing with large large groups which have not quasi-polynomial order", "tokens": [50364, 341, 307, 32702, 1434, 4997, 365, 2416, 2416, 3935, 597, 362, 406, 20954, 12, 2259, 9896, 47429, 1668, 50720], "temperature": 0.0, "avg_logprob": -0.15148808645165485, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001161129679530859}, {"id": 198, "seek": 149548, "start": 1502.6, "end": 1511.88, "text": " but it is a large order and complicated action that you cannot decompose okay so let's get to this", "tokens": [50720, 457, 309, 307, 257, 2416, 1668, 293, 6179, 3069, 300, 291, 2644, 22867, 541, 1392, 370, 718, 311, 483, 281, 341, 51184], "temperature": 0.0, "avg_logprob": -0.15148808645165485, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001161129679530859}, {"id": 199, "seek": 149548, "start": 1512.6, "end": 1518.52, "text": " vise-for-lemon so first the simpler version of the vise-for-lemon is just a color refinement", "tokens": [51220, 371, 908, 12, 2994, 12, 306, 3317, 370, 700, 264, 18587, 3037, 295, 264, 371, 908, 12, 2994, 12, 306, 3317, 307, 445, 257, 2017, 1895, 30229, 51516], "temperature": 0.0, "avg_logprob": -0.15148808645165485, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001161129679530859}, {"id": 200, "seek": 149548, "start": 1518.52, "end": 1523.48, "text": " algorithm which is something that probably if you were given as a homework to solve the", "tokens": [51516, 9284, 597, 307, 746, 300, 1391, 498, 291, 645, 2212, 382, 257, 14578, 281, 5039, 264, 51764], "temperature": 0.0, "avg_logprob": -0.15148808645165485, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001161129679530859}, {"id": 201, "seek": 152348, "start": 1523.56, "end": 1529.56, "text": " isomorphism problem then probably this would be the first thing that would occur to you is that you", "tokens": [50368, 307, 32702, 1434, 1154, 550, 1391, 341, 576, 312, 264, 700, 551, 300, 576, 5160, 281, 291, 307, 300, 291, 50668], "temperature": 0.0, "avg_logprob": -0.05501633340662176, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.0025847936049103737}, {"id": 202, "seek": 152348, "start": 1529.56, "end": 1539.88, "text": " just take two graphs and you first color all the vertices uniformly and now you look at each vertex", "tokens": [50668, 445, 747, 732, 24877, 293, 291, 700, 2017, 439, 264, 32053, 48806, 293, 586, 291, 574, 412, 1184, 28162, 51184], "temperature": 0.0, "avg_logprob": -0.05501633340662176, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.0025847936049103737}, {"id": 203, "seek": 152348, "start": 1539.88, "end": 1546.3600000000001, "text": " and see how many what is the degree of that vertex and if you know that the degree is different then", "tokens": [51184, 293, 536, 577, 867, 437, 307, 264, 4314, 295, 300, 28162, 293, 498, 291, 458, 300, 264, 4314, 307, 819, 550, 51508], "temperature": 0.0, "avg_logprob": -0.05501633340662176, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.0025847936049103737}, {"id": 204, "seek": 152348, "start": 1546.3600000000001, "end": 1553.4, "text": " you surely cannot map it to some other vertex with a different degree so then you can recall", "tokens": [51508, 291, 11468, 2644, 4471, 309, 281, 512, 661, 28162, 365, 257, 819, 4314, 370, 550, 291, 393, 9901, 51860], "temperature": 0.0, "avg_logprob": -0.05501633340662176, "compression_ratio": 1.8625592417061612, "no_speech_prob": 0.0025847936049103737}, {"id": 205, "seek": 155340, "start": 1554.0400000000002, "end": 1559.24, "text": " the graph based on this you see that the blue vertices have the same degrees", "tokens": [50396, 264, 4295, 2361, 322, 341, 291, 536, 300, 264, 3344, 32053, 362, 264, 912, 5310, 50656], "temperature": 0.0, "avg_logprob": -0.06046713812876556, "compression_ratio": 1.735483870967742, "no_speech_prob": 0.0019406949868425727}, {"id": 206, "seek": 155340, "start": 1559.24, "end": 1569.3200000000002, "text": " and the red vertices have the same degrees now you iterate this process until you get something", "tokens": [50656, 293, 264, 2182, 32053, 362, 264, 912, 5310, 586, 291, 44497, 341, 1399, 1826, 291, 483, 746, 51160], "temperature": 0.0, "avg_logprob": -0.06046713812876556, "compression_ratio": 1.735483870967742, "no_speech_prob": 0.0019406949868425727}, {"id": 207, "seek": 155340, "start": 1569.3200000000002, "end": 1577.5600000000002, "text": " stable that no longer can be refined and then basically if you end up with a different colorings", "tokens": [51160, 8351, 300, 572, 2854, 393, 312, 26201, 293, 550, 1936, 498, 291, 917, 493, 365, 257, 819, 2017, 1109, 51572], "temperature": 0.0, "avg_logprob": -0.06046713812876556, "compression_ratio": 1.735483870967742, "no_speech_prob": 0.0019406949868425727}, {"id": 208, "seek": 157756, "start": 1577.6399999999999, "end": 1585.56, "text": " then you can say that these these things are definitely not isomorphic but if you end up", "tokens": [50368, 550, 291, 393, 584, 300, 613, 613, 721, 366, 2138, 406, 307, 32702, 299, 457, 498, 291, 917, 493, 50764], "temperature": 0.0, "avg_logprob": -0.07205814303773822, "compression_ratio": 1.6867469879518073, "no_speech_prob": 0.0025458636227995157}, {"id": 209, "seek": 157756, "start": 1585.56, "end": 1592.44, "text": " with somehow the same colorings then you really do not know now the vise-for-lemon algorithm", "tokens": [50764, 365, 6063, 264, 912, 2017, 1109, 550, 291, 534, 360, 406, 458, 586, 264, 371, 908, 12, 2994, 12, 306, 3317, 9284, 51108], "temperature": 0.0, "avg_logprob": -0.07205814303773822, "compression_ratio": 1.6867469879518073, "no_speech_prob": 0.0025458636227995157}, {"id": 210, "seek": 157756, "start": 1592.44, "end": 1600.28, "text": " does something better so instead of just coloring the vertices it's coloring the pairs of vertices", "tokens": [51108, 775, 746, 1101, 370, 2602, 295, 445, 23198, 264, 32053, 309, 311, 23198, 264, 15494, 295, 32053, 51500], "temperature": 0.0, "avg_logprob": -0.07205814303773822, "compression_ratio": 1.6867469879518073, "no_speech_prob": 0.0025458636227995157}, {"id": 211, "seek": 160028, "start": 1600.92, "end": 1606.36, "text": " right so how does it how does it work so here we have just this very simple", "tokens": [50396, 558, 370, 577, 775, 309, 577, 775, 309, 589, 370, 510, 321, 362, 445, 341, 588, 2199, 50668], "temperature": 0.0, "avg_logprob": -0.07870292663574219, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.009531616233289242}, {"id": 212, "seek": 160028, "start": 1606.92, "end": 1614.12, "text": " graph and if you want to depict the pairs of vertices we can just depict them by some arrows", "tokens": [50696, 4295, 293, 498, 291, 528, 281, 31553, 264, 15494, 295, 32053, 321, 393, 445, 31553, 552, 538, 512, 19669, 51056], "temperature": 0.0, "avg_logprob": -0.07870292663574219, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.009531616233289242}, {"id": 213, "seek": 160028, "start": 1615.72, "end": 1622.6, "text": " so here is the the pairs of vertices that occur in this graph and we give it some", "tokens": [51136, 370, 510, 307, 264, 264, 15494, 295, 32053, 300, 5160, 294, 341, 4295, 293, 321, 976, 309, 512, 51480], "temperature": 0.0, "avg_logprob": -0.07870292663574219, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.009531616233289242}, {"id": 214, "seek": 160028, "start": 1622.6, "end": 1628.76, "text": " initial coloring or initial partition so this green color corresponds that there to the fact", "tokens": [51480, 5883, 23198, 420, 5883, 24808, 370, 341, 3092, 2017, 23249, 300, 456, 281, 264, 1186, 51788], "temperature": 0.0, "avg_logprob": -0.07870292663574219, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.009531616233289242}, {"id": 215, "seek": 162876, "start": 1628.76, "end": 1635.72, "text": " that there is no edge here and this red color corresponds to the to the pairs of the form", "tokens": [50364, 300, 456, 307, 572, 4691, 510, 293, 341, 2182, 2017, 23249, 281, 264, 281, 264, 15494, 295, 264, 1254, 50712], "temperature": 0.0, "avg_logprob": -0.10282102544256981, "compression_ratio": 1.623931623931624, "no_speech_prob": 0.002743225544691086}, {"id": 216, "seek": 162876, "start": 1636.52, "end": 1646.12, "text": " uu let's say and this blue corresponds to the edges now we count we construct a new partition in the", "tokens": [50752, 344, 84, 718, 311, 584, 293, 341, 3344, 23249, 281, 264, 8819, 586, 321, 1207, 321, 7690, 257, 777, 24808, 294, 264, 51232], "temperature": 0.0, "avg_logprob": -0.10282102544256981, "compression_ratio": 1.623931623931624, "no_speech_prob": 0.002743225544691086}, {"id": 217, "seek": 164612, "start": 1646.12, "end": 1659.1599999999999, "text": " next step yes in the initial coloring we and actually it will be recolored as you will see", "tokens": [50364, 958, 1823, 2086, 294, 264, 5883, 23198, 321, 293, 767, 309, 486, 312, 850, 401, 2769, 382, 291, 486, 536, 51016], "temperature": 0.0, "avg_logprob": -0.09805497389573317, "compression_ratio": 2.0, "no_speech_prob": 0.0036972807720303535}, {"id": 218, "seek": 164612, "start": 1659.1599999999999, "end": 1666.76, "text": " so the in the initial coloring all pairs that correspond to the edges to the actual edges", "tokens": [51016, 370, 264, 294, 264, 5883, 23198, 439, 15494, 300, 6805, 281, 264, 8819, 281, 264, 3539, 8819, 51396], "temperature": 0.0, "avg_logprob": -0.09805497389573317, "compression_ratio": 2.0, "no_speech_prob": 0.0036972807720303535}, {"id": 219, "seek": 164612, "start": 1666.76, "end": 1672.12, "text": " will be colored the same and all pairs that correspond to the non-edges and the diagonal of the", "tokens": [51396, 486, 312, 14332, 264, 912, 293, 439, 15494, 300, 6805, 281, 264, 2107, 12, 292, 2880, 293, 264, 21539, 295, 264, 51664], "temperature": 0.0, "avg_logprob": -0.09805497389573317, "compression_ratio": 2.0, "no_speech_prob": 0.0036972807720303535}, {"id": 220, "seek": 167612, "start": 1676.52, "end": 1694.4399999999998, "text": " yeah and in the next iteration we do the following counting so for each pair uv of some color k", "tokens": [50384, 1338, 293, 294, 264, 958, 24784, 321, 360, 264, 3480, 13251, 370, 337, 1184, 6119, 344, 85, 295, 512, 2017, 350, 51280], "temperature": 0.0, "avg_logprob": -0.1433492417031146, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0015344214625656605}, {"id": 221, "seek": 167612, "start": 1695.8, "end": 1702.6, "text": " and every ij we count the number of vertices such that there is such a triangle in the graph", "tokens": [51348, 293, 633, 741, 73, 321, 1207, 264, 1230, 295, 32053, 1270, 300, 456, 307, 1270, 257, 13369, 294, 264, 4295, 51688], "temperature": 0.0, "avg_logprob": -0.1433492417031146, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0015344214625656605}, {"id": 222, "seek": 170260, "start": 1703.1599999999999, "end": 1712.4399999999998, "text": " so the base of the triangle is the uv with color k and we count the number of vertices w such that", "tokens": [50392, 370, 264, 3096, 295, 264, 13369, 307, 264, 344, 85, 365, 2017, 350, 293, 321, 1207, 264, 1230, 295, 32053, 261, 1270, 300, 50856], "temperature": 0.0, "avg_logprob": -0.06750055459829477, "compression_ratio": 1.7341040462427746, "no_speech_prob": 0.0024681612849235535}, {"id": 223, "seek": 170260, "start": 1712.4399999999998, "end": 1719.56, "text": " there is the first step in color i and the second step in color j of course this k ij can be possibly", "tokens": [50856, 456, 307, 264, 700, 1823, 294, 2017, 741, 293, 264, 1150, 1823, 294, 2017, 361, 295, 1164, 341, 350, 741, 73, 393, 312, 6264, 51212], "temperature": 0.0, "avg_logprob": -0.06750055459829477, "compression_ratio": 1.7341040462427746, "no_speech_prob": 0.0024681612849235535}, {"id": 224, "seek": 170260, "start": 1720.52, "end": 1727.32, "text": " the same they don't have to be all distinct and then for each pair we do this count and then in the", "tokens": [51260, 264, 912, 436, 500, 380, 362, 281, 312, 439, 10644, 293, 550, 337, 1184, 6119, 321, 360, 341, 1207, 293, 550, 294, 264, 51600], "temperature": 0.0, "avg_logprob": -0.06750055459829477, "compression_ratio": 1.7341040462427746, "no_speech_prob": 0.0024681612849235535}, {"id": 225, "seek": 172732, "start": 1727.32, "end": 1736.84, "text": " next step we recolor the pairs based on these counts so the next step here would look something", "tokens": [50364, 958, 1823, 321, 850, 36182, 264, 15494, 2361, 322, 613, 14893, 370, 264, 958, 1823, 510, 576, 574, 746, 50840], "temperature": 0.0, "avg_logprob": -0.053326346980991646, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0026779321487993}, {"id": 226, "seek": 172732, "start": 1736.84, "end": 1748.6, "text": " like this so actually you will get some some new colors on on here and the color and the new colors", "tokens": [50840, 411, 341, 370, 767, 291, 486, 483, 512, 512, 777, 4577, 322, 322, 510, 293, 264, 2017, 293, 264, 777, 4577, 51428], "temperature": 0.0, "avg_logprob": -0.053326346980991646, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0026779321487993}, {"id": 227, "seek": 172732, "start": 1748.6, "end": 1755.56, "text": " here and this actually makes sense because it should be approximating the orbits of the automorphism", "tokens": [51428, 510, 293, 341, 767, 1669, 2020, 570, 309, 820, 312, 8542, 990, 264, 43522, 295, 264, 3553, 18191, 1434, 51776], "temperature": 0.0, "avg_logprob": -0.053326346980991646, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.0026779321487993}, {"id": 228, "seek": 175556, "start": 1755.56, "end": 1761.8799999999999, "text": " group and this that this vertex got orange these two vertices got orange color and this", "tokens": [50364, 1594, 293, 341, 300, 341, 28162, 658, 7671, 613, 732, 32053, 658, 7671, 2017, 293, 341, 50680], "temperature": 0.0, "avg_logprob": -0.0924579891157739, "compression_ratio": 1.8838383838383839, "no_speech_prob": 0.006910943426191807}, {"id": 229, "seek": 175556, "start": 1761.8799999999999, "end": 1767.08, "text": " remained red actually makes sense because these two vertices here should be in a different orbit", "tokens": [50680, 12780, 2182, 767, 1669, 2020, 570, 613, 732, 32053, 510, 820, 312, 294, 257, 819, 13991, 50940], "temperature": 0.0, "avg_logprob": -0.0924579891157739, "compression_ratio": 1.8838383838383839, "no_speech_prob": 0.006910943426191807}, {"id": 230, "seek": 175556, "start": 1767.08, "end": 1774.12, "text": " and these vertex and of course it doesn't work perfectly but it works very well and of course", "tokens": [50940, 293, 613, 28162, 293, 295, 1164, 309, 1177, 380, 589, 6239, 457, 309, 1985, 588, 731, 293, 295, 1164, 51292], "temperature": 0.0, "avg_logprob": -0.0924579891157739, "compression_ratio": 1.8838383838383839, "no_speech_prob": 0.006910943426191807}, {"id": 231, "seek": 175556, "start": 1774.12, "end": 1780.6799999999998, "text": " you can construct some examples where it doesn't work but it's a very as i said the connection", "tokens": [51292, 291, 393, 7690, 512, 5110, 689, 309, 1177, 380, 589, 457, 309, 311, 257, 588, 382, 741, 848, 264, 4984, 51620], "temperature": 0.0, "avg_logprob": -0.0924579891157739, "compression_ratio": 1.8838383838383839, "no_speech_prob": 0.006910943426191807}, {"id": 232, "seek": 178068, "start": 1780.68, "end": 1786.2, "text": " with the quantum groups is actually also approximates the quantum orbit so basically whatever", "tokens": [50364, 365, 264, 13018, 3935, 307, 767, 611, 8542, 1024, 264, 13018, 13991, 370, 1936, 2035, 50640], "temperature": 0.0, "avg_logprob": -0.12017768766821885, "compression_ratio": 1.7772277227722773, "no_speech_prob": 0.0035604459699243307}, {"id": 233, "seek": 178068, "start": 1786.2, "end": 1792.44, "text": " is distinguished by the vise for lemma you can also use it when studying the quantum group", "tokens": [50640, 307, 21702, 538, 264, 371, 908, 337, 7495, 1696, 291, 393, 611, 764, 309, 562, 7601, 264, 13018, 1594, 50952], "temperature": 0.0, "avg_logprob": -0.12017768766821885, "compression_ratio": 1.7772277227722773, "no_speech_prob": 0.0035604459699243307}, {"id": 234, "seek": 178068, "start": 1793.72, "end": 1799.8, "text": " okay so what we actually did we colored the aj-sense matrix and now the idea of this vise", "tokens": [51016, 1392, 370, 437, 321, 767, 630, 321, 14332, 264, 17680, 12, 82, 1288, 8141, 293, 586, 264, 1558, 295, 341, 371, 908, 51320], "temperature": 0.0, "avg_logprob": -0.12017768766821885, "compression_ratio": 1.7772277227722773, "no_speech_prob": 0.0035604459699243307}, {"id": 235, "seek": 178068, "start": 1799.8, "end": 1804.1200000000001, "text": " for lemma you can think of it as basically constructing invariants in mathematics we", "tokens": [51320, 337, 7495, 1696, 291, 393, 519, 295, 309, 382, 1936, 39969, 33270, 1719, 294, 18666, 321, 51536], "temperature": 0.0, "avg_logprob": -0.12017768766821885, "compression_ratio": 1.7772277227722773, "no_speech_prob": 0.0035604459699243307}, {"id": 236, "seek": 180412, "start": 1804.12, "end": 1812.04, "text": " distinguished objects by constructing invariants like the dimension of a vector space of or more", "tokens": [50364, 21702, 6565, 538, 39969, 33270, 1719, 411, 264, 10139, 295, 257, 8062, 1901, 295, 420, 544, 50760], "temperature": 0.0, "avg_logprob": -0.08373072272852848, "compression_ratio": 1.595505617977528, "no_speech_prob": 0.0017645108746364713}, {"id": 237, "seek": 180412, "start": 1812.04, "end": 1818.6, "text": " complicated like in algebraic topology some homology groups so this is something similar", "tokens": [50760, 6179, 411, 294, 21989, 299, 1192, 1793, 512, 3655, 1793, 3935, 370, 341, 307, 746, 2531, 51088], "temperature": 0.0, "avg_logprob": -0.08373072272852848, "compression_ratio": 1.595505617977528, "no_speech_prob": 0.0017645108746364713}, {"id": 238, "seek": 180412, "start": 1818.6, "end": 1826.1999999999998, "text": " basically because we colored the aj-sense matrix and we actually constructed some coherent algebra", "tokens": [51088, 1936, 570, 321, 14332, 264, 17680, 12, 82, 1288, 8141, 293, 321, 767, 17083, 512, 36239, 21989, 51468], "temperature": 0.0, "avg_logprob": -0.08373072272852848, "compression_ratio": 1.595505617977528, "no_speech_prob": 0.0017645108746364713}, {"id": 239, "seek": 182620, "start": 1826.2, "end": 1833.0800000000002, "text": " which is generated by the following matrices so to each color you can actually assign a zero", "tokens": [50364, 597, 307, 10833, 538, 264, 3480, 32284, 370, 281, 1184, 2017, 291, 393, 767, 6269, 257, 4018, 50708], "temperature": 0.0, "avg_logprob": -0.08039488849869694, "compression_ratio": 1.900497512437811, "no_speech_prob": 0.0017797986511141062}, {"id": 240, "seek": 182620, "start": 1833.0800000000002, "end": 1842.2, "text": " zero one matrix so like this uh so here you have uh some these these are basically zero one matrices", "tokens": [50708, 4018, 472, 8141, 370, 411, 341, 2232, 370, 510, 291, 362, 2232, 512, 613, 613, 366, 1936, 4018, 472, 32284, 51164], "temperature": 0.0, "avg_logprob": -0.08039488849869694, "compression_ratio": 1.900497512437811, "no_speech_prob": 0.0017797986511141062}, {"id": 241, "seek": 182620, "start": 1842.2, "end": 1848.76, "text": " where the ones are exactly at those places which are of the same color and so in this case this", "tokens": [51164, 689, 264, 2306, 366, 2293, 412, 729, 3190, 597, 366, 295, 264, 912, 2017, 293, 370, 294, 341, 1389, 341, 51492], "temperature": 0.0, "avg_logprob": -0.08039488849869694, "compression_ratio": 1.900497512437811, "no_speech_prob": 0.0017797986511141062}, {"id": 242, "seek": 182620, "start": 1848.76, "end": 1855.0, "text": " coordinate algebra would be generated by these five matrices and it is like a matrix algebra", "tokens": [51492, 15670, 21989, 576, 312, 10833, 538, 613, 1732, 32284, 293, 309, 307, 411, 257, 8141, 21989, 51804], "temperature": 0.0, "avg_logprob": -0.08039488849869694, "compression_ratio": 1.900497512437811, "no_speech_prob": 0.0017797986511141062}, {"id": 243, "seek": 185500, "start": 1855.0, "end": 1861.88, "text": " satisfying the following condition so the first condition is that all of the matrices so this", "tokens": [50364, 18348, 264, 3480, 4188, 370, 264, 700, 4188, 307, 300, 439, 295, 264, 32284, 370, 341, 50708], "temperature": 0.0, "avg_logprob": -0.08384176456567013, "compression_ratio": 1.965986394557823, "no_speech_prob": 0.0013147093122825027}, {"id": 244, "seek": 185500, "start": 1861.88, "end": 1869.24, "text": " generating matrices might sum up to all ones matrix so which is here clear that if you sum it all up", "tokens": [50708, 17746, 32284, 1062, 2408, 493, 281, 439, 2306, 8141, 370, 597, 307, 510, 1850, 300, 498, 291, 2408, 309, 439, 493, 51076], "temperature": 0.0, "avg_logprob": -0.08384176456567013, "compression_ratio": 1.965986394557823, "no_speech_prob": 0.0013147093122825027}, {"id": 245, "seek": 185500, "start": 1869.24, "end": 1879.56, "text": " you get the all ones matrix so then there has to be has to be some some subset of the matrices", "tokens": [51076, 291, 483, 264, 439, 2306, 8141, 370, 550, 456, 575, 281, 312, 575, 281, 312, 512, 512, 25993, 295, 264, 32284, 51592], "temperature": 0.0, "avg_logprob": -0.08384176456567013, "compression_ratio": 1.965986394557823, "no_speech_prob": 0.0013147093122825027}, {"id": 246, "seek": 187956, "start": 1879.56, "end": 1885.3999999999999, "text": " that sum up to identity so in this case it would be this orange matrix and this red matrix they", "tokens": [50364, 300, 2408, 493, 281, 6575, 370, 294, 341, 1389, 309, 576, 312, 341, 7671, 8141, 293, 341, 2182, 8141, 436, 50656], "temperature": 0.0, "avg_logprob": -0.07576443135053262, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.0037524444051086903}, {"id": 247, "seek": 187956, "start": 1885.3999999999999, "end": 1892.36, "text": " sum up to the identity so this basically tells you that is actually also approximating not only the", "tokens": [50656, 2408, 493, 281, 264, 6575, 370, 341, 1936, 5112, 291, 300, 307, 767, 611, 8542, 990, 406, 787, 264, 51004], "temperature": 0.0, "avg_logprob": -0.07576443135053262, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.0037524444051086903}, {"id": 248, "seek": 187956, "start": 1892.36, "end": 1898.04, "text": " two orbits of the graph but also the orbits so it should be more powerful than just the degree", "tokens": [51004, 732, 43522, 295, 264, 4295, 457, 611, 264, 43522, 370, 309, 820, 312, 544, 4005, 813, 445, 264, 4314, 51288], "temperature": 0.0, "avg_logprob": -0.07576443135053262, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.0037524444051086903}, {"id": 249, "seek": 187956, "start": 1898.04, "end": 1907.72, "text": " refinement and then if you take any pair of matrices if you use the bad student product the", "tokens": [51288, 1895, 30229, 293, 550, 498, 291, 747, 604, 6119, 295, 32284, 498, 291, 764, 264, 1578, 3107, 1674, 264, 51772], "temperature": 0.0, "avg_logprob": -0.07576443135053262, "compression_ratio": 1.819047619047619, "no_speech_prob": 0.0037524444051086903}, {"id": 250, "seek": 190772, "start": 1907.72, "end": 1915.24, "text": " component wise product or true product then then you get the zero matrix and then you have the", "tokens": [50364, 6542, 10829, 1674, 420, 2074, 1674, 550, 550, 291, 483, 264, 4018, 8141, 293, 550, 291, 362, 264, 50740], "temperature": 0.0, "avg_logprob": -0.11510374397039413, "compression_ratio": 1.832258064516129, "no_speech_prob": 0.001241648686118424}, {"id": 251, "seek": 190772, "start": 1915.24, "end": 1923.56, "text": " transpose matrix there it's like for example here we have a pair of transpose matrices and", "tokens": [50740, 25167, 8141, 456, 309, 311, 411, 337, 1365, 510, 321, 362, 257, 6119, 295, 25167, 32284, 293, 51156], "temperature": 0.0, "avg_logprob": -0.11510374397039413, "compression_ratio": 1.832258064516129, "no_speech_prob": 0.001241648686118424}, {"id": 252, "seek": 190772, "start": 1924.2, "end": 1931.56, "text": " then the last condition is that the product of the matrix can be expressed in such a in such a sum", "tokens": [51188, 550, 264, 1036, 4188, 307, 300, 264, 1674, 295, 264, 8141, 393, 312, 12675, 294, 1270, 257, 294, 1270, 257, 2408, 51556], "temperature": 0.0, "avg_logprob": -0.11510374397039413, "compression_ratio": 1.832258064516129, "no_speech_prob": 0.001241648686118424}, {"id": 253, "seek": 193156, "start": 1931.56, "end": 1939.3999999999999, "text": " and this number c i j actually are some constants that corresponds to this counting of triangles", "tokens": [50364, 293, 341, 1230, 269, 741, 361, 767, 366, 512, 35870, 300, 23249, 281, 341, 13251, 295, 29896, 50756], "temperature": 0.0, "avg_logprob": -0.09868745242848116, "compression_ratio": 1.654970760233918, "no_speech_prob": 0.0012519767042249441}, {"id": 254, "seek": 193156, "start": 1939.3999999999999, "end": 1947.08, "text": " when it's finally stable so we have this kind of matrix algebra on top of the graph and if these", "tokens": [50756, 562, 309, 311, 2721, 8351, 370, 321, 362, 341, 733, 295, 8141, 21989, 322, 1192, 295, 264, 4295, 293, 498, 613, 51140], "temperature": 0.0, "avg_logprob": -0.09868745242848116, "compression_ratio": 1.654970760233918, "no_speech_prob": 0.0012519767042249441}, {"id": 255, "seek": 193156, "start": 1947.08, "end": 1952.9199999999998, "text": " algebras are isomorphic then or non-isomorphic then we can distinguish the graphs by this", "tokens": [51140, 419, 432, 38182, 366, 307, 32702, 299, 550, 420, 2107, 12, 271, 32702, 299, 550, 321, 393, 20206, 264, 24877, 538, 341, 51432], "temperature": 0.0, "avg_logprob": -0.09868745242848116, "compression_ratio": 1.654970760233918, "no_speech_prob": 0.0012519767042249441}, {"id": 256, "seek": 195292, "start": 1952.92, "end": 1961.8000000000002, "text": " Weisfer Lehmann and if they are the same then we cannot make a conclusion now you can go even", "tokens": [50364, 492, 271, 612, 1456, 8587, 969, 293, 498, 436, 366, 264, 912, 550, 321, 2644, 652, 257, 10063, 586, 291, 393, 352, 754, 50808], "temperature": 0.0, "avg_logprob": -0.22205171218285194, "compression_ratio": 1.449612403100775, "no_speech_prob": 0.02212616056203842}, {"id": 257, "seek": 195292, "start": 1973.48, "end": 1982.04, "text": " yes yes it's like basically it's the Weisfer Lehmann actually doesn't only have to be applied", "tokens": [51392, 2086, 2086, 309, 311, 411, 1936, 309, 311, 264, 492, 271, 612, 1456, 8587, 969, 767, 1177, 380, 787, 362, 281, 312, 6456, 51820], "temperature": 0.0, "avg_logprob": -0.22205171218285194, "compression_ratio": 1.449612403100775, "no_speech_prob": 0.02212616056203842}, {"id": 258, "seek": 198204, "start": 1982.12, "end": 1989.6399999999999, "text": " for graphs you can start with any because each each each of these matrices zero matrices can be", "tokens": [50368, 337, 24877, 291, 393, 722, 365, 604, 570, 1184, 1184, 1184, 295, 613, 32284, 4018, 32284, 393, 312, 50744], "temperature": 0.0, "avg_logprob": -0.10004064283872906, "compression_ratio": 1.7293577981651376, "no_speech_prob": 0.009871476329863071}, {"id": 259, "seek": 198204, "start": 1989.6399999999999, "end": 1995.8799999999999, "text": " also interpreted as just some binary relation right so you are basically starting with a bunch of", "tokens": [50744, 611, 26749, 382, 445, 512, 17434, 9721, 558, 370, 291, 366, 1936, 2891, 365, 257, 3840, 295, 51056], "temperature": 0.0, "avg_logprob": -0.10004064283872906, "compression_ratio": 1.7293577981651376, "no_speech_prob": 0.009871476329863071}, {"id": 260, "seek": 198204, "start": 1995.8799999999999, "end": 2001.72, "text": " relations and the Weisfer Lehmann algorithm will find what is called a coherent closure", "tokens": [51056, 2299, 293, 264, 492, 271, 612, 1456, 8587, 969, 9284, 486, 915, 437, 307, 1219, 257, 36239, 24653, 51348], "temperature": 0.0, "avg_logprob": -0.10004064283872906, "compression_ratio": 1.7293577981651376, "no_speech_prob": 0.009871476329863071}, {"id": 261, "seek": 198204, "start": 2003.08, "end": 2008.6, "text": " so the smallest coordinate algebra satisfying these conditions that contains those relations so", "tokens": [51416, 370, 264, 16998, 15670, 21989, 18348, 613, 4487, 300, 8306, 729, 2299, 370, 51692], "temperature": 0.0, "avg_logprob": -0.10004064283872906, "compression_ratio": 1.7293577981651376, "no_speech_prob": 0.009871476329863071}, {"id": 262, "seek": 200860, "start": 2008.6, "end": 2013.56, "text": " but when you want to apply it for graphs you start with the specific three relations that", "tokens": [50364, 457, 562, 291, 528, 281, 3079, 309, 337, 24877, 291, 722, 365, 264, 2685, 1045, 2299, 300, 50612], "temperature": 0.0, "avg_logprob": -0.14840848105294363, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0015558366430923343}, {"id": 263, "seek": 200860, "start": 2013.56, "end": 2015.8, "text": " I depicted but it's not necessary to do that", "tokens": [50612, 286, 30207, 457, 309, 311, 406, 4818, 281, 360, 300, 50724], "temperature": 0.0, "avg_logprob": -0.14840848105294363, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0015558366430923343}, {"id": 264, "seek": 200860, "start": 2026.6, "end": 2033.0, "text": " yeah yes in this case it's just the adjacency matrix but in general you can get you can start", "tokens": [51264, 1338, 2086, 294, 341, 1389, 309, 311, 445, 264, 22940, 3020, 8141, 457, 294, 2674, 291, 393, 483, 291, 393, 722, 51584], "temperature": 0.0, "avg_logprob": -0.14840848105294363, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0015558366430923343}, {"id": 265, "seek": 203300, "start": 2033.0, "end": 2039.64, "text": " with any bunch of relations yeah and you can go further you can do k-dimensional Weisfer Lehmann", "tokens": [50364, 365, 604, 3840, 295, 2299, 1338, 293, 291, 393, 352, 3052, 291, 393, 360, 350, 12, 18759, 492, 271, 612, 1456, 8587, 969, 50696], "temperature": 0.0, "avg_logprob": -0.09206577183045063, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.00978140626102686}, {"id": 266, "seek": 203300, "start": 2039.64, "end": 2047.56, "text": " so here instead of coloring k tuples sorry two tuples you will be coloring k tuples but I don't", "tokens": [50696, 370, 510, 2602, 295, 23198, 350, 2604, 2622, 2597, 732, 2604, 2622, 291, 486, 312, 23198, 350, 2604, 2622, 457, 286, 500, 380, 51092], "temperature": 0.0, "avg_logprob": -0.09206577183045063, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.00978140626102686}, {"id": 267, "seek": 203300, "start": 2047.56, "end": 2053.8, "text": " want to get too much in today's because as I said it's not anymore relevant for quantum groups but", "tokens": [51092, 528, 281, 483, 886, 709, 294, 965, 311, 570, 382, 286, 848, 309, 311, 406, 3602, 7340, 337, 13018, 3935, 457, 51404], "temperature": 0.0, "avg_logprob": -0.09206577183045063, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.00978140626102686}, {"id": 268, "seek": 203300, "start": 2055.08, "end": 2061.4, "text": " but there are some very interesting connections like for example the k-dimensional Weisfer Lehmann", "tokens": [51468, 457, 456, 366, 512, 588, 1880, 9271, 411, 337, 1365, 264, 350, 12, 18759, 492, 271, 612, 1456, 8587, 969, 51784], "temperature": 0.0, "avg_logprob": -0.09206577183045063, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.00978140626102686}, {"id": 269, "seek": 206140, "start": 2061.4, "end": 2068.12, "text": " distinguishes two graphs if and only if these graphs are distinguishable by k plus one", "tokens": [50364, 11365, 16423, 732, 24877, 498, 293, 787, 498, 613, 24877, 366, 20206, 712, 538, 350, 1804, 472, 50700], "temperature": 0.0, "avg_logprob": -0.09598135544081866, "compression_ratio": 1.6204819277108433, "no_speech_prob": 0.0019201078685000539}, {"id": 270, "seek": 206140, "start": 2068.84, "end": 2077.8, "text": " variable sentence with counting quantifiers so for example here you have two graphs that", "tokens": [50736, 7006, 8174, 365, 13251, 4426, 23463, 370, 337, 1365, 510, 291, 362, 732, 24877, 300, 51184], "temperature": 0.0, "avg_logprob": -0.09598135544081866, "compression_ratio": 1.6204819277108433, "no_speech_prob": 0.0019201078685000539}, {"id": 271, "seek": 206140, "start": 2079.64, "end": 2087.96, "text": " this cycle and these two triangles so these are all regular graphs so one-dimensional Weisfer", "tokens": [51276, 341, 6586, 293, 613, 732, 29896, 370, 613, 366, 439, 3890, 24877, 370, 472, 12, 18759, 492, 271, 612, 51692], "temperature": 0.0, "avg_logprob": -0.09598135544081866, "compression_ratio": 1.6204819277108433, "no_speech_prob": 0.0019201078685000539}, {"id": 272, "seek": 208796, "start": 2087.96, "end": 2092.68, "text": " which was the color refinement is actually also called one-dimensional Weisfer Lehmann algorithm", "tokens": [50364, 597, 390, 264, 2017, 1895, 30229, 307, 767, 611, 1219, 472, 12, 18759, 492, 271, 612, 1456, 8587, 969, 9284, 50600], "temperature": 0.0, "avg_logprob": -0.08688175523435915, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0037430895026773214}, {"id": 273, "seek": 208796, "start": 2094.52, "end": 2099.08, "text": " this doesn't distinguish these two graphs because all the vertices are the same degree", "tokens": [50692, 341, 1177, 380, 20206, 613, 732, 24877, 570, 439, 264, 32053, 366, 264, 912, 4314, 50920], "temperature": 0.0, "avg_logprob": -0.08688175523435915, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0037430895026773214}, {"id": 274, "seek": 208796, "start": 2099.08, "end": 2104.04, "text": " so it doesn't do anything basically but you can distinguish them with two-dimensional Weisfer Lehmann", "tokens": [50920, 370, 309, 1177, 380, 360, 1340, 1936, 457, 291, 393, 20206, 552, 365, 732, 12, 18759, 492, 271, 612, 1456, 8587, 969, 51168], "temperature": 0.0, "avg_logprob": -0.08688175523435915, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0037430895026773214}, {"id": 275, "seek": 208796, "start": 2105.48, "end": 2111.48, "text": " and this would correspond to some formula in three variables", "tokens": [51240, 293, 341, 576, 6805, 281, 512, 8513, 294, 1045, 9102, 51540], "temperature": 0.0, "avg_logprob": -0.08688175523435915, "compression_ratio": 1.696078431372549, "no_speech_prob": 0.0037430895026773214}, {"id": 276, "seek": 211148, "start": 2111.8, "end": 2119.2400000000002, "text": " you can implement this distance formula between the two vertices with one extra variable so this", "tokens": [50380, 291, 393, 4445, 341, 4560, 8513, 1296, 264, 732, 32053, 365, 472, 2857, 7006, 370, 341, 50752], "temperature": 0.0, "avg_logprob": -0.1284883649725663, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0025040057953447104}, {"id": 277, "seek": 211148, "start": 2119.2400000000002, "end": 2126.6, "text": " would be like a three variable formula that also distinguishes those two graphs so that's a", "tokens": [50752, 576, 312, 411, 257, 1045, 7006, 8513, 300, 611, 11365, 16423, 729, 732, 24877, 370, 300, 311, 257, 51120], "temperature": 0.0, "avg_logprob": -0.1284883649725663, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0025040057953447104}, {"id": 278, "seek": 211148, "start": 2126.6, "end": 2131.8, "text": " connection to logic and then there are many more very interesting connections like integer linear", "tokens": [51120, 4984, 281, 9952, 293, 550, 456, 366, 867, 544, 588, 1880, 9271, 411, 24922, 8213, 51380], "temperature": 0.0, "avg_logprob": -0.1284883649725663, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0025040057953447104}, {"id": 279, "seek": 211148, "start": 2131.8, "end": 2136.36, "text": " programming as I said in the beginning the homomorphism counting that this homomorphism", "tokens": [51380, 9410, 382, 286, 848, 294, 264, 2863, 264, 3655, 32702, 1434, 13251, 300, 341, 3655, 32702, 1434, 51608], "temperature": 0.0, "avg_logprob": -0.1284883649725663, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0025040057953447104}, {"id": 280, "seek": 213636, "start": 2136.36, "end": 2146.36, "text": " in distinguishability for bounded three-width graphs is equivalent to to being distinguishable", "tokens": [50364, 294, 20206, 2310, 337, 37498, 1045, 12, 21271, 24877, 307, 10344, 281, 281, 885, 20206, 712, 50864], "temperature": 0.0, "avg_logprob": -0.13546792850937955, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.003780815750360489}, {"id": 281, "seek": 213636, "start": 2146.36, "end": 2155.7200000000003, "text": " by k-dimensional Weisfer Lehmann okay let's go somehow back to the quantum groups and", "tokens": [50864, 538, 350, 12, 18759, 492, 271, 612, 1456, 8587, 969, 1392, 718, 311, 352, 6063, 646, 281, 264, 13018, 3935, 293, 51332], "temperature": 0.0, "avg_logprob": -0.13546792850937955, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.003780815750360489}, {"id": 282, "seek": 215572, "start": 2156.6, "end": 2163.3999999999996, "text": " um so I uh what what we did in our work we basically", "tokens": [50408, 1105, 370, 286, 2232, 437, 437, 321, 630, 294, 527, 589, 321, 1936, 50748], "temperature": 0.0, "avg_logprob": -0.2776104878571074, "compression_ratio": 1.5354838709677419, "no_speech_prob": 0.00466554518789053}, {"id": 283, "seek": 215572, "start": 2166.12, "end": 2173.72, "text": " did a quantum group quantum underwater group of graph version of two classical results", "tokens": [50884, 630, 257, 13018, 1594, 13018, 20967, 1594, 295, 4295, 3037, 295, 732, 13735, 3542, 51264], "temperature": 0.0, "avg_logprob": -0.2776104878571074, "compression_ratio": 1.5354838709677419, "no_speech_prob": 0.00466554518789053}, {"id": 284, "seek": 215572, "start": 2174.7599999999998, "end": 2181.24, "text": " and I will mention them now so first of all like uh Frux theorem is quite old and it says that for", "tokens": [51316, 293, 286, 486, 2152, 552, 586, 370, 700, 295, 439, 411, 2232, 479, 894, 87, 20904, 307, 1596, 1331, 293, 309, 1619, 300, 337, 51640], "temperature": 0.0, "avg_logprob": -0.2776104878571074, "compression_ratio": 1.5354838709677419, "no_speech_prob": 0.00466554518789053}, {"id": 285, "seek": 218124, "start": 2181.3199999999997, "end": 2188.3599999999997, "text": " every graph there or sorry for every group there you can construct a graph with the isomorphic", "tokens": [50368, 633, 4295, 456, 420, 2597, 337, 633, 1594, 456, 291, 393, 7690, 257, 4295, 365, 264, 307, 32702, 299, 50720], "temperature": 0.0, "avg_logprob": -0.0779941201210022, "compression_ratio": 1.8190954773869348, "no_speech_prob": 0.001130209187977016}, {"id": 286, "seek": 218124, "start": 2188.3599999999997, "end": 2194.2799999999997, "text": " automorphism group and actually the quantum analog of this Frux theorem does not hold", "tokens": [50720, 3553, 18191, 1434, 1594, 293, 767, 264, 13018, 16660, 295, 341, 479, 894, 87, 20904, 775, 406, 1797, 51016], "temperature": 0.0, "avg_logprob": -0.0779941201210022, "compression_ratio": 1.8190954773869348, "no_speech_prob": 0.001130209187977016}, {"id": 287, "seek": 218124, "start": 2194.9199999999996, "end": 2201.08, "text": " even for quantum permutation groups and so but we are still interested in some quantum", "tokens": [51048, 754, 337, 13018, 4784, 11380, 3935, 293, 370, 457, 321, 366, 920, 3102, 294, 512, 13018, 51356], "temperature": 0.0, "avg_logprob": -0.0779941201210022, "compression_ratio": 1.8190954773869348, "no_speech_prob": 0.001130209187977016}, {"id": 288, "seek": 218124, "start": 2201.08, "end": 2209.4799999999996, "text": " automorphism groups of restricted classes of graphs because a lot of the results about quantum", "tokens": [51356, 3553, 18191, 1434, 3935, 295, 20608, 5359, 295, 24877, 570, 257, 688, 295, 264, 3542, 466, 13018, 51776], "temperature": 0.0, "avg_logprob": -0.0779941201210022, "compression_ratio": 1.8190954773869348, "no_speech_prob": 0.001130209187977016}, {"id": 289, "seek": 220948, "start": 2209.48, "end": 2220.12, "text": " automorphism groups of graphs were were in the spirit of analyzing whether a given graph has", "tokens": [50364, 3553, 18191, 1434, 3935, 295, 24877, 645, 645, 294, 264, 3797, 295, 23663, 1968, 257, 2212, 4295, 575, 50896], "temperature": 0.0, "avg_logprob": -0.11279325485229492, "compression_ratio": 1.4603174603174602, "no_speech_prob": 0.003144259797409177}, {"id": 290, "seek": 220948, "start": 2220.12, "end": 2233.96, "text": " or does not have quantum symmetry or maybe some calculations for for some for some specific", "tokens": [50896, 420, 775, 406, 362, 13018, 25440, 420, 1310, 512, 20448, 337, 337, 512, 337, 512, 2685, 51588], "temperature": 0.0, "avg_logprob": -0.11279325485229492, "compression_ratio": 1.4603174603174602, "no_speech_prob": 0.003144259797409177}, {"id": 291, "seek": 223396, "start": 2233.96, "end": 2241.08, "text": " graphs let's say but uh it's it's kind of interesting that uh the the quantum", "tokens": [50364, 24877, 718, 311, 584, 457, 2232, 309, 311, 309, 311, 733, 295, 1880, 300, 2232, 264, 264, 13018, 50720], "temperature": 0.0, "avg_logprob": -0.12426608867859573, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.003580972319468856}, {"id": 292, "seek": 223396, "start": 2241.08, "end": 2250.36, "text": " automorphism groups of trees which we looked at uh was was not so much now and so to do that I want", "tokens": [50720, 3553, 18191, 1434, 3935, 295, 5852, 597, 321, 2956, 412, 2232, 390, 390, 406, 370, 709, 586, 293, 370, 281, 360, 300, 286, 528, 51184], "temperature": 0.0, "avg_logprob": -0.12426608867859573, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.003580972319468856}, {"id": 293, "seek": 223396, "start": 2250.36, "end": 2256.92, "text": " to recall a first product of groups so first product of groups and we will need the quantum", "tokens": [51184, 281, 9901, 257, 700, 1674, 295, 3935, 370, 700, 1674, 295, 3935, 293, 321, 486, 643, 264, 13018, 51512], "temperature": 0.0, "avg_logprob": -0.12426608867859573, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.003580972319468856}, {"id": 294, "seek": 223396, "start": 2256.92, "end": 2262.28, "text": " analog of that first product of groups uh is like when we want to determine the automorphism", "tokens": [51512, 16660, 295, 300, 700, 1674, 295, 3935, 2232, 307, 411, 562, 321, 528, 281, 6997, 264, 3553, 18191, 1434, 51780], "temperature": 0.0, "avg_logprob": -0.12426608867859573, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.003580972319468856}, {"id": 295, "seek": 226228, "start": 2262.28, "end": 2267.48, "text": " group of two graphs if they are not isomorphic we can just use a direct product to construct the", "tokens": [50364, 1594, 295, 732, 24877, 498, 436, 366, 406, 307, 32702, 299, 321, 393, 445, 764, 257, 2047, 1674, 281, 7690, 264, 50624], "temperature": 0.0, "avg_logprob": -0.08887884351942274, "compression_ratio": 1.9787234042553192, "no_speech_prob": 0.003695616265758872}, {"id": 296, "seek": 226228, "start": 2267.48, "end": 2275.6400000000003, "text": " automorphism group but if they are isomorphic no longer works with uh the uh direct product", "tokens": [50624, 3553, 18191, 1434, 1594, 457, 498, 436, 366, 307, 32702, 299, 572, 2854, 1985, 365, 2232, 264, 2232, 2047, 1674, 51032], "temperature": 0.0, "avg_logprob": -0.08887884351942274, "compression_ratio": 1.9787234042553192, "no_speech_prob": 0.003695616265758872}, {"id": 297, "seek": 226228, "start": 2275.6400000000003, "end": 2283.0, "text": " because if you look at the structure of the automorphism group uh it's actually uh not a", "tokens": [51032, 570, 498, 291, 574, 412, 264, 3877, 295, 264, 3553, 18191, 1434, 1594, 2232, 309, 311, 767, 2232, 406, 257, 51400], "temperature": 0.0, "avg_logprob": -0.08887884351942274, "compression_ratio": 1.9787234042553192, "no_speech_prob": 0.003695616265758872}, {"id": 298, "seek": 226228, "start": 2283.0, "end": 2288.44, "text": " direct product if it was a direct product then this uh front square and the back square is the", "tokens": [51400, 2047, 1674, 498, 309, 390, 257, 2047, 1674, 550, 341, 2232, 1868, 3732, 293, 264, 646, 3732, 307, 264, 51672], "temperature": 0.0, "avg_logprob": -0.08887884351942274, "compression_ratio": 1.9787234042553192, "no_speech_prob": 0.003695616265758872}, {"id": 299, "seek": 228844, "start": 2288.44, "end": 2295.4, "text": " Cayley graph would be different so sorry the same if it was a direct product so it's just a", "tokens": [50364, 38287, 3420, 4295, 576, 312, 819, 370, 2597, 264, 912, 498, 309, 390, 257, 2047, 1674, 370, 309, 311, 445, 257, 50712], "temperature": 0.0, "avg_logprob": -0.1286744861812382, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0016445640940219164}, {"id": 300, "seek": 228844, "start": 2295.4, "end": 2300.76, "text": " depiction nice depiction of the structure of the group uh but this uh is described by the", "tokens": [50712, 47740, 1481, 47740, 295, 264, 3877, 295, 264, 1594, 2232, 457, 341, 2232, 307, 7619, 538, 264, 50980], "temperature": 0.0, "avg_logprob": -0.1286744861812382, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0016445640940219164}, {"id": 301, "seek": 228844, "start": 2300.76, "end": 2310.36, "text": " rest product and by that I just mean the following so uh if I have two groups and uh a set omega on", "tokens": [50980, 1472, 1674, 293, 538, 300, 286, 445, 914, 264, 3480, 370, 2232, 498, 286, 362, 732, 3935, 293, 2232, 257, 992, 10498, 322, 51460], "temperature": 0.0, "avg_logprob": -0.1286744861812382, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0016445640940219164}, {"id": 302, "seek": 228844, "start": 2310.36, "end": 2318.04, "text": " on which q is acting then I can take the direct product like for each for each element of the", "tokens": [51460, 322, 597, 9505, 307, 6577, 550, 286, 393, 747, 264, 2047, 1674, 411, 337, 1184, 337, 1184, 4478, 295, 264, 51844], "temperature": 0.0, "avg_logprob": -0.1286744861812382, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0016445640940219164}, {"id": 303, "seek": 231804, "start": 2318.04, "end": 2328.68, "text": " set omega I take a group a copy of the group D and take the direct product of this and um", "tokens": [50364, 992, 10498, 286, 747, 257, 1594, 257, 5055, 295, 264, 1594, 413, 293, 747, 264, 2047, 1674, 295, 341, 293, 1105, 50896], "temperature": 0.0, "avg_logprob": -0.13285954793294272, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.000595474208239466}, {"id": 304, "seek": 231804, "start": 2330.92, "end": 2337.32, "text": " and then the rest product is actually naturally defined as a semi-direct product uh and the", "tokens": [51008, 293, 550, 264, 1472, 1674, 307, 767, 8195, 7642, 382, 257, 12909, 12, 44868, 1674, 2232, 293, 264, 51328], "temperature": 0.0, "avg_logprob": -0.13285954793294272, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.000595474208239466}, {"id": 305, "seek": 231804, "start": 2338.12, "end": 2346.6, "text": " the semi-direct product is defined by this action of of of q on the coordinates of this", "tokens": [51368, 264, 12909, 12, 44868, 1674, 307, 7642, 538, 341, 3069, 295, 295, 295, 9505, 322, 264, 21056, 295, 341, 51792], "temperature": 0.0, "avg_logprob": -0.13285954793294272, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.000595474208239466}, {"id": 306, "seek": 234660, "start": 2347.16, "end": 2354.68, "text": " let's say vectors or uh omega tuples in in in this direct product in a natural way", "tokens": [50392, 718, 311, 584, 18875, 420, 2232, 10498, 2604, 2622, 294, 294, 294, 341, 2047, 1674, 294, 257, 3303, 636, 50768], "temperature": 0.0, "avg_logprob": -0.0768766173397202, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0008410869049839675}, {"id": 307, "seek": 234660, "start": 2355.4, "end": 2362.44, "text": " so just by action on the coordinates so that's the rest product and what we can do with this", "tokens": [50804, 370, 445, 538, 3069, 322, 264, 21056, 370, 300, 311, 264, 1472, 1674, 293, 437, 321, 393, 360, 365, 341, 51156], "temperature": 0.0, "avg_logprob": -0.0768766173397202, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0008410869049839675}, {"id": 308, "seek": 234660, "start": 2362.44, "end": 2367.08, "text": " red product is for example to determine the automorphism group of a disconnected graph", "tokens": [51156, 2182, 1674, 307, 337, 1365, 281, 6997, 264, 3553, 18191, 1434, 1594, 295, 257, 29426, 4295, 51388], "temperature": 0.0, "avg_logprob": -0.0768766173397202, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0008410869049839675}, {"id": 309, "seek": 234660, "start": 2367.72, "end": 2374.2, "text": " by the following formula so if we have like a bunch of copies of some graph then this", "tokens": [51420, 538, 264, 3480, 8513, 370, 498, 321, 362, 411, 257, 3840, 295, 14341, 295, 512, 4295, 550, 341, 51744], "temperature": 0.0, "avg_logprob": -0.0768766173397202, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.0008410869049839675}, {"id": 310, "seek": 237420, "start": 2374.2, "end": 2381.3199999999997, "text": " automorphism group will be just the automorphism group of the component uh rest producted with", "tokens": [50364, 3553, 18191, 1434, 1594, 486, 312, 445, 264, 3553, 18191, 1434, 1594, 295, 264, 6542, 2232, 1472, 1674, 292, 365, 50720], "temperature": 0.0, "avg_logprob": -0.10711716160629735, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.0009320604731328785}, {"id": 311, "seek": 237420, "start": 2381.3199999999997, "end": 2391.16, "text": " the symmetric group and so in general if we have a bunch of connected components xi then we can use", "tokens": [50720, 264, 32330, 1594, 293, 370, 294, 2674, 498, 321, 362, 257, 3840, 295, 4582, 6677, 36800, 550, 321, 393, 764, 51212], "temperature": 0.0, "avg_logprob": -0.10711716160629735, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.0009320604731328785}, {"id": 312, "seek": 237420, "start": 2391.16, "end": 2397.24, "text": " the following formula to compute the whole automorphism group uh based on the automorphism", "tokens": [51212, 264, 3480, 8513, 281, 14722, 264, 1379, 3553, 18191, 1434, 1594, 2232, 2361, 322, 264, 3553, 18191, 1434, 51516], "temperature": 0.0, "avg_logprob": -0.10711716160629735, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.0009320604731328785}, {"id": 313, "seek": 239724, "start": 2397.24, "end": 2404.52, "text": " groups of the individual graphs and this actually can already give us a proof of a very neat theorem", "tokens": [50364, 3935, 295, 264, 2609, 24877, 293, 341, 767, 393, 1217, 976, 505, 257, 8177, 295, 257, 588, 10654, 20904, 50728], "temperature": 0.0, "avg_logprob": -0.10335289278338032, "compression_ratio": 1.6497175141242937, "no_speech_prob": 0.005082395393401384}, {"id": 314, "seek": 239724, "start": 2404.52, "end": 2414.04, "text": " and this is one of the result that we will have a quantum analog for so this maybe is a very", "tokens": [50728, 293, 341, 307, 472, 295, 264, 1874, 300, 321, 486, 362, 257, 13018, 16660, 337, 370, 341, 1310, 307, 257, 588, 51204], "temperature": 0.0, "avg_logprob": -0.10335289278338032, "compression_ratio": 1.6497175141242937, "no_speech_prob": 0.005082395393401384}, {"id": 315, "seek": 239724, "start": 2414.04, "end": 2420.3599999999997, "text": " interesting theorem that could probably be even in some undergraduate course which basically gives", "tokens": [51204, 1880, 20904, 300, 727, 1391, 312, 754, 294, 512, 19113, 1164, 597, 1936, 2709, 51520], "temperature": 0.0, "avg_logprob": -0.10335289278338032, "compression_ratio": 1.6497175141242937, "no_speech_prob": 0.005082395393401384}, {"id": 316, "seek": 242036, "start": 2420.36, "end": 2428.2000000000003, "text": " a description of all the automorphism groups of trees and it's and it's quite quite simple so", "tokens": [50364, 257, 3855, 295, 439, 264, 3553, 18191, 1434, 3935, 295, 5852, 293, 309, 311, 293, 309, 311, 1596, 1596, 2199, 370, 50756], "temperature": 0.0, "avg_logprob": -0.10810173198740969, "compression_ratio": 1.9946524064171123, "no_speech_prob": 0.00691366009414196}, {"id": 317, "seek": 242036, "start": 2428.2000000000003, "end": 2436.52, "text": " it's basically just an inductive description so there is a trivial group in the class and if", "tokens": [50756, 309, 311, 1936, 445, 364, 31612, 488, 3855, 370, 456, 307, 257, 26703, 1594, 294, 264, 1508, 293, 498, 51172], "temperature": 0.0, "avg_logprob": -0.10810173198740969, "compression_ratio": 1.9946524064171123, "no_speech_prob": 0.00691366009414196}, {"id": 318, "seek": 242036, "start": 2436.52, "end": 2440.28, "text": " there are two groups then there is a direct product and if there is a group then there is", "tokens": [51172, 456, 366, 732, 3935, 550, 456, 307, 257, 2047, 1674, 293, 498, 456, 307, 257, 1594, 550, 456, 307, 51360], "temperature": 0.0, "avg_logprob": -0.10810173198740969, "compression_ratio": 1.9946524064171123, "no_speech_prob": 0.00691366009414196}, {"id": 319, "seek": 242036, "start": 2440.28, "end": 2448.84, "text": " it's worth product with a symmetric group no so how to see this so if if we have uh if we have a", "tokens": [51360, 309, 311, 3163, 1674, 365, 257, 32330, 1594, 572, 370, 577, 281, 536, 341, 370, 498, 498, 321, 362, 2232, 498, 321, 362, 257, 51788], "temperature": 0.0, "avg_logprob": -0.10810173198740969, "compression_ratio": 1.9946524064171123, "no_speech_prob": 0.00691366009414196}, {"id": 320, "seek": 244884, "start": 2448.92, "end": 2454.6800000000003, "text": " group g and h then we can construct a tree with the direct product just by putting those trees", "tokens": [50368, 1594, 290, 293, 276, 550, 321, 393, 7690, 257, 4230, 365, 264, 2047, 1674, 445, 538, 3372, 729, 5852, 50656], "temperature": 0.0, "avg_logprob": -0.08103308928640265, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.004489088896661997}, {"id": 321, "seek": 244884, "start": 2454.6800000000003, "end": 2462.04, "text": " onto a common root and maybe if g and h is the same so g equals h we can just add one vertex to", "tokens": [50656, 3911, 257, 2689, 5593, 293, 1310, 498, 290, 293, 276, 307, 264, 912, 370, 290, 6915, 276, 321, 393, 445, 909, 472, 28162, 281, 51024], "temperature": 0.0, "avg_logprob": -0.08103308928640265, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.004489088896661997}, {"id": 322, "seek": 244884, "start": 2462.04, "end": 2467.7200000000003, "text": " prevent swapping so that we have the direct product and if you want to construct the rest", "tokens": [51024, 4871, 1693, 10534, 370, 300, 321, 362, 264, 2047, 1674, 293, 498, 291, 528, 281, 7690, 264, 1472, 51308], "temperature": 0.0, "avg_logprob": -0.08103308928640265, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.004489088896661997}, {"id": 323, "seek": 244884, "start": 2467.7200000000003, "end": 2474.6800000000003, "text": " product it's also easy we just take a copy of one tree uh or n copies of the tree then attach it to", "tokens": [51308, 1674, 309, 311, 611, 1858, 321, 445, 747, 257, 5055, 295, 472, 4230, 2232, 420, 297, 14341, 295, 264, 4230, 550, 5085, 309, 281, 51656], "temperature": 0.0, "avg_logprob": -0.08103308928640265, "compression_ratio": 1.8269230769230769, "no_speech_prob": 0.004489088896661997}, {"id": 324, "seek": 247468, "start": 2474.68, "end": 2483.3999999999996, "text": " the common root and we get the rest product with the symmetric group on the other hand if you want", "tokens": [50364, 264, 2689, 5593, 293, 321, 483, 264, 1472, 1674, 365, 264, 32330, 1594, 322, 264, 661, 1011, 498, 291, 528, 50800], "temperature": 0.0, "avg_logprob": -0.07342935800552368, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0022574050817638636}, {"id": 325, "seek": 247468, "start": 2483.3999999999996, "end": 2489.7999999999997, "text": " to prove that these are all the groups then we can just take any tree delete delete the root", "tokens": [50800, 281, 7081, 300, 613, 366, 439, 264, 3935, 550, 321, 393, 445, 747, 604, 4230, 12097, 12097, 264, 5593, 51120], "temperature": 0.0, "avg_logprob": -0.07342935800552368, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0022574050817638636}, {"id": 326, "seek": 247468, "start": 2490.6, "end": 2495.8799999999997, "text": " it's okay enough to consider root trees delete the root apply the formula from the previous", "tokens": [51160, 309, 311, 1392, 1547, 281, 1949, 5593, 5852, 12097, 264, 5593, 3079, 264, 8513, 490, 264, 3894, 51424], "temperature": 0.0, "avg_logprob": -0.07342935800552368, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0022574050817638636}, {"id": 327, "seek": 247468, "start": 2495.8799999999997, "end": 2502.6, "text": " slides for disconnected graphs and notice that only only rest products and direct products", "tokens": [51424, 9788, 337, 29426, 24877, 293, 3449, 300, 787, 787, 1472, 3383, 293, 2047, 3383, 51760], "temperature": 0.0, "avg_logprob": -0.07342935800552368, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0022574050817638636}, {"id": 328, "seek": 250260, "start": 2502.6, "end": 2508.04, "text": " occur there so so so the group must be in this in this class", "tokens": [50364, 5160, 456, 370, 370, 370, 264, 1594, 1633, 312, 294, 341, 294, 341, 1508, 50636], "temperature": 0.0, "avg_logprob": -0.07940261117343245, "compression_ratio": 1.901639344262295, "no_speech_prob": 0.0004945946857333183}, {"id": 329, "seek": 250260, "start": 2510.2, "end": 2517.08, "text": " so now we have um let so the class qt is the class of all quantum automorphism groups of trees", "tokens": [50744, 370, 586, 321, 362, 1105, 718, 370, 264, 1508, 9505, 83, 307, 264, 1508, 295, 439, 13018, 3553, 18191, 1434, 3935, 295, 5852, 51088], "temperature": 0.0, "avg_logprob": -0.07940261117343245, "compression_ratio": 1.901639344262295, "no_speech_prob": 0.0004945946857333183}, {"id": 330, "seek": 250260, "start": 2517.64, "end": 2523.3199999999997, "text": " that can be described as follows so here instead of the direct product we will have a free product", "tokens": [51116, 300, 393, 312, 7619, 382, 10002, 370, 510, 2602, 295, 264, 2047, 1674, 321, 486, 362, 257, 1737, 1674, 51400], "temperature": 0.0, "avg_logprob": -0.07940261117343245, "compression_ratio": 1.901639344262295, "no_speech_prob": 0.0004945946857333183}, {"id": 331, "seek": 250260, "start": 2523.3199999999997, "end": 2529.48, "text": " of the of the quantum groups and instead of the rest product we'll just have uh the so-called", "tokens": [51400, 295, 264, 295, 264, 13018, 3935, 293, 2602, 295, 264, 1472, 1674, 321, 603, 445, 362, 2232, 264, 370, 12, 11880, 51708], "temperature": 0.0, "avg_logprob": -0.07940261117343245, "compression_ratio": 1.901639344262295, "no_speech_prob": 0.0004945946857333183}, {"id": 332, "seek": 252948, "start": 2529.48, "end": 2536.92, "text": " free rest product with a quantum symmetry group s and plus there is which which contains the", "tokens": [50364, 1737, 1472, 1674, 365, 257, 13018, 25440, 1594, 262, 293, 1804, 456, 307, 597, 597, 8306, 264, 50736], "temperature": 0.0, "avg_logprob": -0.10974070382496667, "compression_ratio": 1.5852272727272727, "no_speech_prob": 0.0013472380815073848}, {"id": 333, "seek": 252948, "start": 2538.76, "end": 2547.16, "text": " contains the classical symmetry group and here um yeah it's just mentioned what I already said", "tokens": [50828, 8306, 264, 13735, 25440, 1594, 293, 510, 1105, 1338, 309, 311, 445, 2835, 437, 286, 1217, 848, 51248], "temperature": 0.0, "avg_logprob": -0.10974070382496667, "compression_ratio": 1.5852272727272727, "no_speech_prob": 0.0013472380815073848}, {"id": 334, "seek": 252948, "start": 2547.16, "end": 2553.64, "text": " and there was a result by Fulton in 2006 who actually showed that the automorphism that the", "tokens": [51248, 293, 456, 390, 257, 1874, 538, 479, 723, 266, 294, 14062, 567, 767, 4712, 300, 264, 3553, 18191, 1434, 300, 264, 51572], "temperature": 0.0, "avg_logprob": -0.10974070382496667, "compression_ratio": 1.5852272727272727, "no_speech_prob": 0.0013472380815073848}, {"id": 335, "seek": 255364, "start": 2553.64, "end": 2561.8799999999997, "text": " trees which have classical automorphism group s2 to the k have quantum symmetry but uh yeah this is", "tokens": [50364, 5852, 597, 362, 13735, 3553, 18191, 1434, 1594, 262, 17, 281, 264, 350, 362, 13018, 25440, 457, 2232, 1338, 341, 307, 50776], "temperature": 0.0, "avg_logprob": -0.08497697605806238, "compression_ratio": 1.6968325791855203, "no_speech_prob": 0.002008771989494562}, {"id": 336, "seek": 255364, "start": 2562.52, "end": 2571.8799999999997, "text": " of course contained in our result as well and um only recently only recently uh there has been", "tokens": [50808, 295, 1164, 16212, 294, 527, 1874, 382, 731, 293, 1105, 787, 3938, 787, 3938, 2232, 456, 575, 668, 51276], "temperature": 0.0, "avg_logprob": -0.08497697605806238, "compression_ratio": 1.6968325791855203, "no_speech_prob": 0.002008771989494562}, {"id": 337, "seek": 255364, "start": 2571.8799999999997, "end": 2576.2, "text": " almost at the same time publish a paper by some other person who I forgot the name", "tokens": [51276, 1920, 412, 264, 912, 565, 11374, 257, 3035, 538, 512, 661, 954, 567, 286, 5298, 264, 1315, 51492], "temperature": 0.0, "avg_logprob": -0.08497697605806238, "compression_ratio": 1.6968325791855203, "no_speech_prob": 0.002008771989494562}, {"id": 338, "seek": 255364, "start": 2576.2, "end": 2582.8399999999997, "text": " but he actually also arrived to this result that we have and also for maybe some other classes of", "tokens": [51492, 457, 415, 767, 611, 6678, 281, 341, 1874, 300, 321, 362, 293, 611, 337, 1310, 512, 661, 5359, 295, 51824], "temperature": 0.0, "avg_logprob": -0.08497697605806238, "compression_ratio": 1.6968325791855203, "no_speech_prob": 0.002008771989494562}, {"id": 339, "seek": 258284, "start": 2582.84, "end": 2592.04, "text": " graphs uh by using completely different methods so doesn't use vice for lemma or so on so here I", "tokens": [50364, 24877, 2232, 538, 1228, 2584, 819, 7150, 370, 1177, 380, 764, 11964, 337, 7495, 1696, 420, 370, 322, 370, 510, 286, 50824], "temperature": 0.0, "avg_logprob": -0.1003525862053259, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.0016620957758277655}, {"id": 340, "seek": 258284, "start": 2592.04, "end": 2599.48, "text": " have again the definition of the quantum automorphism group of a graph but I can just go quickly", "tokens": [50824, 362, 797, 264, 7123, 295, 264, 13018, 3553, 18191, 1434, 1594, 295, 257, 4295, 457, 286, 393, 445, 352, 2661, 51196], "temperature": 0.0, "avg_logprob": -0.1003525862053259, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.0016620957758277655}, {"id": 341, "seek": 258284, "start": 2599.48, "end": 2607.88, "text": " because here um we have um just what we need something more is to add some condition so", "tokens": [51196, 570, 510, 1105, 321, 362, 1105, 445, 437, 321, 643, 746, 544, 307, 281, 909, 512, 4188, 370, 51616], "temperature": 0.0, "avg_logprob": -0.1003525862053259, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.0016620957758277655}, {"id": 342, "seek": 260788, "start": 2607.88, "end": 2613.2400000000002, "text": " because we want to work with colored graphs right so we want to have uh some colors on the", "tokens": [50364, 570, 321, 528, 281, 589, 365, 14332, 24877, 558, 370, 321, 528, 281, 362, 2232, 512, 4577, 322, 264, 50632], "temperature": 0.0, "avg_logprob": -0.08629844909490542, "compression_ratio": 1.89, "no_speech_prob": 0.0006866469047963619}, {"id": 343, "seek": 260788, "start": 2613.2400000000002, "end": 2620.12, "text": " vertices and we want to preserve these colors so we just there is just some extra condition for that", "tokens": [50632, 32053, 293, 321, 528, 281, 15665, 613, 4577, 370, 321, 445, 456, 307, 445, 512, 2857, 4188, 337, 300, 50976], "temperature": 0.0, "avg_logprob": -0.08629844909490542, "compression_ratio": 1.89, "no_speech_prob": 0.0006866469047963619}, {"id": 344, "seek": 260788, "start": 2620.76, "end": 2626.6800000000003, "text": " here is mentioned again quantum isomorphism let's just go further and uh so with quantum", "tokens": [51008, 510, 307, 2835, 797, 13018, 307, 32702, 1434, 718, 311, 445, 352, 3052, 293, 2232, 370, 365, 13018, 51304], "temperature": 0.0, "avg_logprob": -0.08629844909490542, "compression_ratio": 1.89, "no_speech_prob": 0.0006866469047963619}, {"id": 345, "seek": 260788, "start": 2626.6800000000003, "end": 2633.08, "text": " automorphism groups something that is uh very easy in the classical automorphism groups has to be", "tokens": [51304, 3553, 18191, 1434, 3935, 746, 300, 307, 2232, 588, 1858, 294, 264, 13735, 3553, 18191, 1434, 3935, 575, 281, 312, 51624], "temperature": 0.0, "avg_logprob": -0.08629844909490542, "compression_ratio": 1.89, "no_speech_prob": 0.0006866469047963619}, {"id": 346, "seek": 263308, "start": 2633.08, "end": 2639.64, "text": " checked very carefully so we have some bunch of operations that we use and for each we have to", "tokens": [50364, 10033, 588, 7500, 370, 321, 362, 512, 3840, 295, 7705, 300, 321, 764, 293, 337, 1184, 321, 362, 281, 50692], "temperature": 0.0, "avg_logprob": -0.0348742517192712, "compression_ratio": 1.7092511013215859, "no_speech_prob": 0.0005876478971913457}, {"id": 347, "seek": 263308, "start": 2639.64, "end": 2645.48, "text": " prove that this actually preserves the quantum automorphism group uh but this may be very obvious", "tokens": [50692, 7081, 300, 341, 767, 1183, 9054, 264, 13018, 3553, 18191, 1434, 1594, 2232, 457, 341, 815, 312, 588, 6322, 50984], "temperature": 0.0, "avg_logprob": -0.0348742517192712, "compression_ratio": 1.7092511013215859, "no_speech_prob": 0.0005876478971913457}, {"id": 348, "seek": 263308, "start": 2645.48, "end": 2650.92, "text": " in the classical way but still we need it so one of the operation is for example that if you have", "tokens": [50984, 294, 264, 13735, 636, 457, 920, 321, 643, 309, 370, 472, 295, 264, 6916, 307, 337, 1365, 300, 498, 291, 362, 51256], "temperature": 0.0, "avg_logprob": -0.0348742517192712, "compression_ratio": 1.7092511013215859, "no_speech_prob": 0.0005876478971913457}, {"id": 349, "seek": 263308, "start": 2650.92, "end": 2657.64, "text": " just an independent set which is a union of colors then we can add edges between all the pairs of", "tokens": [51256, 445, 364, 6695, 992, 597, 307, 257, 11671, 295, 4577, 550, 321, 393, 909, 8819, 1296, 439, 264, 15494, 295, 51592], "temperature": 0.0, "avg_logprob": -0.0348742517192712, "compression_ratio": 1.7092511013215859, "no_speech_prob": 0.0005876478971913457}, {"id": 350, "seek": 265764, "start": 2657.64, "end": 2664.52, "text": " vertices in s so just something like this right so you have two color classes and you just add", "tokens": [50364, 32053, 294, 262, 370, 445, 746, 411, 341, 558, 370, 291, 362, 732, 2017, 5359, 293, 291, 445, 909, 50708], "temperature": 0.0, "avg_logprob": -0.07011691914048306, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.0012058267602697015}, {"id": 351, "seek": 265764, "start": 2664.52, "end": 2670.04, "text": " all the edges between that uh I mean it's a very simple thing but it has to be checked carefully", "tokens": [50708, 439, 264, 8819, 1296, 300, 2232, 286, 914, 309, 311, 257, 588, 2199, 551, 457, 309, 575, 281, 312, 10033, 7500, 50984], "temperature": 0.0, "avg_logprob": -0.07011691914048306, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.0012058267602697015}, {"id": 352, "seek": 265764, "start": 2670.04, "end": 2676.2, "text": " with quantum groups um or adding a complete bipartite graph between two disjoint sets that", "tokens": [50984, 365, 13018, 3935, 1105, 420, 5127, 257, 3566, 28741, 642, 4295, 1296, 732, 717, 48613, 6352, 300, 51292], "temperature": 0.0, "avg_logprob": -0.07011691914048306, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.0012058267602697015}, {"id": 353, "seek": 265764, "start": 2676.2, "end": 2683.8799999999997, "text": " are also union of color classes so something like this you have some color classes and you add like", "tokens": [51292, 366, 611, 11671, 295, 2017, 5359, 370, 746, 411, 341, 291, 362, 512, 2017, 5359, 293, 291, 909, 411, 51676], "temperature": 0.0, "avg_logprob": -0.07011691914048306, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.0012058267602697015}, {"id": 354, "seek": 268388, "start": 2683.88, "end": 2689.08, "text": " a complete bipartite graph between these so this also preserves quantum automorphism group", "tokens": [50364, 257, 3566, 28741, 642, 4295, 1296, 613, 370, 341, 611, 1183, 9054, 13018, 3553, 18191, 1434, 1594, 50624], "temperature": 0.0, "avg_logprob": -0.07292093232620595, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0025830341037362814}, {"id": 355, "seek": 268388, "start": 2689.88, "end": 2696.44, "text": " or changing this is like very very seems very trivial that changing the color of some monochromatic", "tokens": [50664, 420, 4473, 341, 307, 411, 588, 588, 2544, 588, 26703, 300, 4473, 264, 2017, 295, 512, 1108, 8997, 4397, 2399, 50992], "temperature": 0.0, "avg_logprob": -0.07292093232620595, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0025830341037362814}, {"id": 356, "seek": 268388, "start": 2696.44, "end": 2702.84, "text": " vertex set to a different color or adding an isolated vertex of a color that no longer existed", "tokens": [50992, 28162, 992, 281, 257, 819, 2017, 420, 5127, 364, 14621, 28162, 295, 257, 2017, 300, 572, 2854, 13135, 51312], "temperature": 0.0, "avg_logprob": -0.07292093232620595, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0025830341037362814}, {"id": 357, "seek": 268388, "start": 2703.56, "end": 2708.36, "text": " so because what do what we want to do we want to with quantum groups we also want to use some", "tokens": [51348, 370, 570, 437, 360, 437, 321, 528, 281, 360, 321, 528, 281, 365, 13018, 3935, 321, 611, 528, 281, 764, 512, 51588], "temperature": 0.0, "avg_logprob": -0.07292093232620595, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0025830341037362814}, {"id": 358, "seek": 270836, "start": 2708.36, "end": 2717.96, "text": " similar kind of induction as is used for regular trees but um we need to transfer from regular", "tokens": [50364, 2531, 733, 295, 33371, 382, 307, 1143, 337, 3890, 5852, 457, 1105, 321, 643, 281, 5003, 490, 3890, 50844], "temperature": 0.0, "avg_logprob": -0.08532778989701044, "compression_ratio": 1.9740932642487046, "no_speech_prob": 0.0037936184089630842}, {"id": 359, "seek": 270836, "start": 2717.96, "end": 2725.0, "text": " trees um sorry regular automorphism groups of trees we need to transfer from under unrooted", "tokens": [50844, 5852, 1105, 2597, 3890, 3553, 18191, 1434, 3935, 295, 5852, 321, 643, 281, 5003, 490, 833, 517, 340, 23325, 51196], "temperature": 0.0, "avg_logprob": -0.08532778989701044, "compression_ratio": 1.9740932642487046, "no_speech_prob": 0.0037936184089630842}, {"id": 360, "seek": 270836, "start": 2725.0, "end": 2731.48, "text": " trees to rooted trees so that we have some option for an induction and we we basically use this", "tokens": [51196, 5852, 281, 25277, 5852, 370, 300, 321, 362, 512, 3614, 337, 364, 33371, 293, 321, 321, 1936, 764, 341, 51520], "temperature": 0.0, "avg_logprob": -0.08532778989701044, "compression_ratio": 1.9740932642487046, "no_speech_prob": 0.0037936184089630842}, {"id": 361, "seek": 270836, "start": 2731.48, "end": 2738.04, "text": " simple operation that we proved that preserve quantum automorphism groups to to replace undirected", "tokens": [51520, 2199, 6916, 300, 321, 14617, 300, 15665, 13018, 3553, 18191, 1434, 3935, 281, 281, 7406, 674, 11890, 292, 51848], "temperature": 0.0, "avg_logprob": -0.08532778989701044, "compression_ratio": 1.9740932642487046, "no_speech_prob": 0.0037936184089630842}, {"id": 362, "seek": 273804, "start": 2738.04, "end": 2746.04, "text": " trees with rooted trees so how is it done like using this operation is very simple so you just", "tokens": [50364, 5852, 365, 25277, 5852, 370, 577, 307, 309, 1096, 411, 1228, 341, 6916, 307, 588, 2199, 370, 291, 445, 50764], "temperature": 0.0, "avg_logprob": -0.07117298671177455, "compression_ratio": 1.8229665071770336, "no_speech_prob": 0.0007541240192949772}, {"id": 363, "seek": 273804, "start": 2746.04, "end": 2752.44, "text": " color the vertices then you remove an edge so you can also reverse the operation then you add a", "tokens": [50764, 2017, 264, 32053, 550, 291, 4159, 364, 4691, 370, 291, 393, 611, 9943, 264, 6916, 550, 291, 909, 257, 51084], "temperature": 0.0, "avg_logprob": -0.07117298671177455, "compression_ratio": 1.8229665071770336, "no_speech_prob": 0.0007541240192949772}, {"id": 364, "seek": 273804, "start": 2752.44, "end": 2758.84, "text": " vertex of a different color then you add like the complete bipartite graph between two color", "tokens": [51084, 28162, 295, 257, 819, 2017, 550, 291, 909, 411, 264, 3566, 28741, 642, 4295, 1296, 732, 2017, 51404], "temperature": 0.0, "avg_logprob": -0.07117298671177455, "compression_ratio": 1.8229665071770336, "no_speech_prob": 0.0007541240192949772}, {"id": 365, "seek": 273804, "start": 2758.84, "end": 2764.84, "text": " classes and then you uncolor and so it seems very trivial but somehow with quantum groups one has", "tokens": [51404, 5359, 293, 550, 291, 517, 23851, 293, 370, 309, 2544, 588, 26703, 457, 6063, 365, 13018, 3935, 472, 575, 51704], "temperature": 0.0, "avg_logprob": -0.07117298671177455, "compression_ratio": 1.8229665071770336, "no_speech_prob": 0.0007541240192949772}, {"id": 366, "seek": 276484, "start": 2764.84, "end": 2770.52, "text": " to check everything carefully that it works so it's like the process of rotification you can just", "tokens": [50364, 281, 1520, 1203, 7500, 300, 309, 1985, 370, 309, 311, 411, 264, 1399, 295, 4297, 3774, 291, 393, 445, 50648], "temperature": 0.0, "avg_logprob": -0.10953517536540608, "compression_ratio": 1.8425925925925926, "no_speech_prob": 0.007438532076776028}, {"id": 367, "seek": 276484, "start": 2771.4, "end": 2778.52, "text": " basically introduce a root to to an unrooted tree oh i forgot to mention that every tree has a center", "tokens": [50692, 1936, 5366, 257, 5593, 281, 281, 364, 517, 340, 23325, 4230, 1954, 741, 5298, 281, 2152, 300, 633, 4230, 575, 257, 3056, 51048], "temperature": 0.0, "avg_logprob": -0.10953517536540608, "compression_ratio": 1.8425925925925926, "no_speech_prob": 0.007438532076776028}, {"id": 368, "seek": 276484, "start": 2779.32, "end": 2785.0, "text": " which is either a vertex and edge which is like a vertex and edge which is like a subset of vertices", "tokens": [51088, 597, 307, 2139, 257, 28162, 293, 4691, 597, 307, 411, 257, 28162, 293, 4691, 597, 307, 411, 257, 25993, 295, 32053, 51372], "temperature": 0.0, "avg_logprob": -0.10953517536540608, "compression_ratio": 1.8425925925925926, "no_speech_prob": 0.007438532076776028}, {"id": 369, "seek": 276484, "start": 2785.0, "end": 2793.96, "text": " that is equally distant from the leaves of the tree and we do this this process that was depicted", "tokens": [51372, 300, 307, 12309, 17275, 490, 264, 5510, 295, 264, 4230, 293, 321, 360, 341, 341, 1399, 300, 390, 30207, 51820], "temperature": 0.0, "avg_logprob": -0.10953517536540608, "compression_ratio": 1.8425925925925926, "no_speech_prob": 0.007438532076776028}, {"id": 370, "seek": 279396, "start": 2793.96, "end": 2800.76, "text": " here with the center and that is also de-rotification so so really that the class of rooted trees is", "tokens": [50364, 510, 365, 264, 3056, 293, 300, 307, 611, 368, 12, 10536, 3774, 370, 370, 534, 300, 264, 1508, 295, 25277, 5852, 307, 50704], "temperature": 0.0, "avg_logprob": -0.06827944851993176, "compression_ratio": 1.8872549019607843, "no_speech_prob": 0.0016975407488644123}, {"id": 371, "seek": 279396, "start": 2800.76, "end": 2806.36, "text": " exactly the same as an unrooted tree so rooted trees are basically just like trees with one", "tokens": [50704, 2293, 264, 912, 382, 364, 517, 340, 23325, 4230, 370, 25277, 5852, 366, 1936, 445, 411, 5852, 365, 472, 50984], "temperature": 0.0, "avg_logprob": -0.06827944851993176, "compression_ratio": 1.8872549019607843, "no_speech_prob": 0.0016975407488644123}, {"id": 372, "seek": 279396, "start": 2806.36, "end": 2813.2400000000002, "text": " distinguished vertex with one colored vertex which has to be preserved so here we if we have a rooted", "tokens": [50984, 21702, 28162, 365, 472, 14332, 28162, 597, 575, 281, 312, 22242, 370, 510, 321, 498, 321, 362, 257, 25277, 51328], "temperature": 0.0, "avg_logprob": -0.06827944851993176, "compression_ratio": 1.8872549019607843, "no_speech_prob": 0.0016975407488644123}, {"id": 373, "seek": 279396, "start": 2813.2400000000002, "end": 2819.32, "text": " tree what we can do is basically attach a very long path to it and then basically we force", "tokens": [51328, 4230, 437, 321, 393, 360, 307, 1936, 5085, 257, 588, 938, 3100, 281, 309, 293, 550, 1936, 321, 3464, 51632], "temperature": 0.0, "avg_logprob": -0.06827944851993176, "compression_ratio": 1.8872549019607843, "no_speech_prob": 0.0016975407488644123}, {"id": 374, "seek": 281932, "start": 2819.8, "end": 2824.2000000000003, "text": " force the center to be somewhere on the path because it will be very very long", "tokens": [50388, 3464, 264, 3056, 281, 312, 4079, 322, 264, 3100, 570, 309, 486, 312, 588, 588, 938, 50608], "temperature": 0.0, "avg_logprob": -0.11152819138538989, "compression_ratio": 1.7164948453608246, "no_speech_prob": 0.003250481327995658}, {"id": 375, "seek": 281932, "start": 2825.56, "end": 2830.44, "text": " longer than any path in the tree and then we then then we can", "tokens": [50676, 2854, 813, 604, 3100, 294, 264, 4230, 293, 550, 321, 550, 550, 321, 393, 50920], "temperature": 0.0, "avg_logprob": -0.11152819138538989, "compression_ratio": 1.7164948453608246, "no_speech_prob": 0.003250481327995658}, {"id": 376, "seek": 281932, "start": 2832.28, "end": 2838.1200000000003, "text": " unrooted and basically we we will get that the automorphism or quantum automorphism group is the same", "tokens": [51012, 517, 340, 23325, 293, 1936, 321, 321, 486, 483, 300, 264, 3553, 18191, 1434, 420, 13018, 3553, 18191, 1434, 1594, 307, 264, 912, 51304], "temperature": 0.0, "avg_logprob": -0.11152819138538989, "compression_ratio": 1.7164948453608246, "no_speech_prob": 0.003250481327995658}, {"id": 377, "seek": 281932, "start": 2840.1200000000003, "end": 2848.6800000000003, "text": " so then i will maybe not define everything just go over this probably you're familiar with", "tokens": [51404, 370, 550, 741, 486, 1310, 406, 6964, 1203, 445, 352, 670, 341, 1391, 291, 434, 4963, 365, 51832], "temperature": 0.0, "avg_logprob": -0.11152819138538989, "compression_ratio": 1.7164948453608246, "no_speech_prob": 0.003250481327995658}, {"id": 378, "seek": 284932, "start": 2849.32, "end": 2856.1200000000003, "text": " free products of quantum groups and then there is a free breast product of a quantum group so", "tokens": [50364, 1737, 3383, 295, 13018, 3935, 293, 550, 456, 307, 257, 1737, 9934, 1674, 295, 257, 13018, 1594, 370, 50704], "temperature": 0.0, "avg_logprob": -0.15707387595341124, "compression_ratio": 1.8, "no_speech_prob": 0.005926151759922504}, {"id": 379, "seek": 284932, "start": 2857.2400000000002, "end": 2865.7200000000003, "text": " it's basically this analog of the the direct product and and", "tokens": [50760, 309, 311, 1936, 341, 16660, 295, 264, 264, 2047, 1674, 293, 293, 51184], "temperature": 0.0, "avg_logprob": -0.15707387595341124, "compression_ratio": 1.8, "no_speech_prob": 0.005926151759922504}, {"id": 380, "seek": 284932, "start": 2867.6400000000003, "end": 2878.36, "text": " breast product of groups and we have two important lemmas that are also analog of what is what we", "tokens": [51280, 9934, 1674, 295, 3935, 293, 321, 362, 732, 1021, 7495, 3799, 300, 366, 611, 16660, 295, 437, 307, 437, 321, 51816], "temperature": 0.0, "avg_logprob": -0.15707387595341124, "compression_ratio": 1.8, "no_speech_prob": 0.005926151759922504}, {"id": 381, "seek": 287836, "start": 2878.36, "end": 2885.8, "text": " proved for this or what is known for these classical automorphism groups that if we if we", "tokens": [50364, 14617, 337, 341, 420, 437, 307, 2570, 337, 613, 13735, 3553, 18191, 1434, 3935, 300, 498, 321, 498, 321, 50736], "temperature": 0.0, "avg_logprob": -0.109202418607824, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.004209144506603479}, {"id": 382, "seek": 287836, "start": 2885.8, "end": 2892.1200000000003, "text": " basically have a bunch of color color graphs that are all connected we have some components", "tokens": [50736, 1936, 362, 257, 3840, 295, 2017, 2017, 24877, 300, 366, 439, 4582, 321, 362, 512, 6677, 51052], "temperature": 0.0, "avg_logprob": -0.109202418607824, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.004209144506603479}, {"id": 383, "seek": 287836, "start": 2893.0, "end": 2898.6800000000003, "text": " and these components are not quantum isomorphic in this case then actually the quantum automorphism", "tokens": [51096, 293, 613, 6677, 366, 406, 13018, 307, 32702, 299, 294, 341, 1389, 550, 767, 264, 13018, 3553, 18191, 1434, 51380], "temperature": 0.0, "avg_logprob": -0.109202418607824, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.004209144506603479}, {"id": 384, "seek": 287836, "start": 2898.6800000000003, "end": 2903.96, "text": " group of this de-joint union of graphs can be just expressed as a free pre-product of this", "tokens": [51380, 1594, 295, 341, 368, 12, 48613, 11671, 295, 24877, 393, 312, 445, 12675, 382, 257, 1737, 659, 12, 33244, 295, 341, 51644], "temperature": 0.0, "avg_logprob": -0.109202418607824, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.004209144506603479}, {"id": 385, "seek": 290396, "start": 2903.96, "end": 2913.88, "text": " quantum automorphism groups and similarly if we have like a connected vertex color graph and if", "tokens": [50364, 13018, 3553, 18191, 1434, 3935, 293, 14138, 498, 321, 362, 411, 257, 4582, 28162, 2017, 4295, 293, 498, 50860], "temperature": 0.0, "avg_logprob": -0.10960488092331659, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.002301280852407217}, {"id": 386, "seek": 290396, "start": 2913.88, "end": 2921.8, "text": " we take n copies of this graph then the quantum automorphism group of this digital union is", "tokens": [50860, 321, 747, 297, 14341, 295, 341, 4295, 550, 264, 13018, 3553, 18191, 1434, 1594, 295, 341, 4562, 11671, 307, 51256], "temperature": 0.0, "avg_logprob": -0.10960488092331659, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.002301280852407217}, {"id": 387, "seek": 290396, "start": 2921.8, "end": 2927.2400000000002, "text": " expressed as a free breast product with the quantum symmetry group and i didn't actually", "tokens": [51256, 12675, 382, 257, 1737, 9934, 1674, 365, 264, 13018, 25440, 1594, 293, 741, 994, 380, 767, 51528], "temperature": 0.0, "avg_logprob": -0.10960488092331659, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.002301280852407217}, {"id": 388, "seek": 290396, "start": 2927.2400000000002, "end": 2932.44, "text": " mentioned how we are actually using the vice for lemma here but the vice for lemma here is used", "tokens": [51528, 2835, 577, 321, 366, 767, 1228, 264, 11964, 337, 7495, 1696, 510, 457, 264, 11964, 337, 7495, 1696, 510, 307, 1143, 51788], "temperature": 0.0, "avg_logprob": -0.10960488092331659, "compression_ratio": 1.8693467336683418, "no_speech_prob": 0.002301280852407217}, {"id": 389, "seek": 293244, "start": 2932.44, "end": 2943.64, "text": " in such a way that basically vice for lemma can distinguish all trees so since it can distinguish", "tokens": [50364, 294, 1270, 257, 636, 300, 1936, 11964, 337, 7495, 1696, 393, 20206, 439, 5852, 370, 1670, 309, 393, 20206, 50924], "temperature": 0.0, "avg_logprob": -0.0619694641658238, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.001724331290461123}, {"id": 390, "seek": 293244, "start": 2943.64, "end": 2953.32, "text": " all trees then it's enough to decide isomorphism for them so it's also enough to decide quantum", "tokens": [50924, 439, 5852, 550, 309, 311, 1547, 281, 4536, 307, 32702, 1434, 337, 552, 370, 309, 311, 611, 1547, 281, 4536, 13018, 51408], "temperature": 0.0, "avg_logprob": -0.0619694641658238, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.001724331290461123}, {"id": 391, "seek": 293244, "start": 2953.32, "end": 2961.64, "text": " automorphisms for them so in other words thanks to these trees are isomorphic if and only if there", "tokens": [51408, 3553, 18191, 13539, 337, 552, 370, 294, 661, 2283, 3231, 281, 613, 5852, 366, 307, 32702, 299, 498, 293, 787, 498, 456, 51824], "temperature": 0.0, "avg_logprob": -0.0619694641658238, "compression_ratio": 1.8717948717948718, "no_speech_prob": 0.001724331290461123}, {"id": 392, "seek": 296164, "start": 2961.64, "end": 2969.64, "text": " are quantum isomorph so that's why we can apply these things for trees and putting these things", "tokens": [50364, 366, 13018, 307, 32702, 370, 300, 311, 983, 321, 393, 3079, 613, 721, 337, 5852, 293, 3372, 613, 721, 50764], "temperature": 0.0, "avg_logprob": -0.1279648462931315, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.0007071472355164587}, {"id": 393, "seek": 296164, "start": 2969.64, "end": 2976.7599999999998, "text": " together we get this equivalent or equivalent the quantum version characterization of the", "tokens": [50764, 1214, 321, 483, 341, 10344, 420, 10344, 264, 13018, 3037, 49246, 295, 264, 51120], "temperature": 0.0, "avg_logprob": -0.1279648462931315, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.0007071472355164587}, {"id": 394, "seek": 296164, "start": 2976.7599999999998, "end": 2986.92, "text": " quantum automorphism groups of trees another result that i will mention is the sabidusis theorem", "tokens": [51120, 13018, 3553, 18191, 1434, 3935, 295, 5852, 1071, 1874, 300, 741, 486, 2152, 307, 264, 5560, 327, 301, 271, 20904, 51628], "temperature": 0.0, "avg_logprob": -0.1279648462931315, "compression_ratio": 1.7300613496932515, "no_speech_prob": 0.0007071472355164587}, {"id": 395, "seek": 298692, "start": 2987.64, "end": 2996.52, "text": " so this theorem says about lexicographic products of graphs so here is like some", "tokens": [50400, 370, 341, 20904, 1619, 466, 476, 47228, 12295, 3383, 295, 24877, 370, 510, 307, 411, 512, 50844], "temperature": 0.0, "avg_logprob": -0.14530785357365844, "compression_ratio": 1.7762237762237763, "no_speech_prob": 0.005355286877602339}, {"id": 396, "seek": 298692, "start": 2997.2400000000002, "end": 3001.96, "text": " technical definition but it's very easy what is a lexicographic product of", "tokens": [50880, 6191, 7123, 457, 309, 311, 588, 1858, 437, 307, 257, 476, 47228, 12295, 1674, 295, 51116], "temperature": 0.0, "avg_logprob": -0.14530785357365844, "compression_ratio": 1.7762237762237763, "no_speech_prob": 0.005355286877602339}, {"id": 397, "seek": 298692, "start": 3001.96, "end": 3008.76, "text": " product of graphs so basically this is a lexicographic product of a cycle with k2 which is an edge", "tokens": [51116, 1674, 295, 24877, 370, 1936, 341, 307, 257, 476, 47228, 12295, 1674, 295, 257, 6586, 365, 350, 17, 597, 307, 364, 4691, 51456], "temperature": 0.0, "avg_logprob": -0.14530785357365844, "compression_ratio": 1.7762237762237763, "no_speech_prob": 0.005355286877602339}, {"id": 398, "seek": 300876, "start": 3009.5600000000004, "end": 3016.92, "text": " so basically we take for each vertex of the outer graph we take a copy of the inner graph so", "tokens": [50404, 370, 1936, 321, 747, 337, 1184, 28162, 295, 264, 10847, 4295, 321, 747, 257, 5055, 295, 264, 7284, 4295, 370, 50772], "temperature": 0.0, "avg_logprob": -0.0681650816504635, "compression_ratio": 1.8639455782312926, "no_speech_prob": 0.022862834855914116}, {"id": 399, "seek": 300876, "start": 3016.92, "end": 3026.76, "text": " like here we have four red edges and put all possible edges between the copies if there was", "tokens": [50772, 411, 510, 321, 362, 1451, 2182, 8819, 293, 829, 439, 1944, 8819, 1296, 264, 14341, 498, 456, 390, 51264], "temperature": 0.0, "avg_logprob": -0.0681650816504635, "compression_ratio": 1.8639455782312926, "no_speech_prob": 0.022862834855914116}, {"id": 400, "seek": 300876, "start": 3026.76, "end": 3033.48, "text": " an edge in the c4 so basically we just take a bunch of for each vertex of the outer graph", "tokens": [51264, 364, 4691, 294, 264, 269, 19, 370, 1936, 321, 445, 747, 257, 3840, 295, 337, 1184, 28162, 295, 264, 10847, 4295, 51600], "temperature": 0.0, "avg_logprob": -0.0681650816504635, "compression_ratio": 1.8639455782312926, "no_speech_prob": 0.022862834855914116}, {"id": 401, "seek": 303348, "start": 3033.48, "end": 3041.4, "text": " we take a copy of the inner graph and and put complete bipartite graphs between those copies", "tokens": [50364, 321, 747, 257, 5055, 295, 264, 7284, 4295, 293, 293, 829, 3566, 28741, 642, 24877, 1296, 729, 14341, 50760], "temperature": 0.0, "avg_logprob": -0.10815565136895663, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.0004161296528764069}, {"id": 402, "seek": 303348, "start": 3041.4, "end": 3049.64, "text": " if there was an edge in the outer graph x and the sabidusis theorem says that the automorphism group", "tokens": [50760, 498, 456, 390, 364, 4691, 294, 264, 10847, 4295, 2031, 293, 264, 5560, 327, 301, 271, 20904, 1619, 300, 264, 3553, 18191, 1434, 1594, 51172], "temperature": 0.0, "avg_logprob": -0.10815565136895663, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.0004161296528764069}, {"id": 403, "seek": 303348, "start": 3049.64, "end": 3059.16, "text": " of of this lexicographic product of two graphs is described as a breath product of the corresponding", "tokens": [51172, 295, 295, 341, 476, 47228, 12295, 1674, 295, 732, 24877, 307, 7619, 382, 257, 6045, 1674, 295, 264, 11760, 51648], "temperature": 0.0, "avg_logprob": -0.10815565136895663, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.0004161296528764069}, {"id": 404, "seek": 305916, "start": 3059.16, "end": 3067.56, "text": " automorphism groups if and only if some condition holds what is the condition so this is actually", "tokens": [50364, 3553, 18191, 1434, 3935, 498, 293, 787, 498, 512, 4188, 9190, 437, 307, 264, 4188, 370, 341, 307, 767, 50784], "temperature": 0.0, "avg_logprob": -0.06880285700813668, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0017748599639162421}, {"id": 405, "seek": 305916, "start": 3067.56, "end": 3076.44, "text": " two conditions written in one so if this inner graph is disconnected then the outer graphs should", "tokens": [50784, 732, 4487, 3720, 294, 472, 370, 498, 341, 7284, 4295, 307, 29426, 550, 264, 10847, 24877, 820, 51228], "temperature": 0.0, "avg_logprob": -0.06880285700813668, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0017748599639162421}, {"id": 406, "seek": 305916, "start": 3076.44, "end": 3084.44, "text": " have no twins twins are vertices that have see exactly the same neighborhoods so you can imagine", "tokens": [51228, 362, 572, 22555, 22555, 366, 32053, 300, 362, 536, 2293, 264, 912, 20052, 370, 291, 393, 3811, 51628], "temperature": 0.0, "avg_logprob": -0.06880285700813668, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0017748599639162421}, {"id": 407, "seek": 308444, "start": 3084.52, "end": 3091.16, "text": " if this inner graph was disconnected and there were twins in the outer graph you can think of", "tokens": [50368, 498, 341, 7284, 4295, 390, 29426, 293, 456, 645, 22555, 294, 264, 10847, 4295, 291, 393, 519, 295, 50700], "temperature": 0.0, "avg_logprob": -0.05234004202343169, "compression_ratio": 1.7714285714285714, "no_speech_prob": 0.002669332316145301}, {"id": 408, "seek": 308444, "start": 3091.16, "end": 3097.0, "text": " how you could create extra automorphisms that are actually not in this breath product so this", "tokens": [50700, 577, 291, 727, 1884, 2857, 3553, 18191, 13539, 300, 366, 767, 406, 294, 341, 6045, 1674, 370, 341, 50992], "temperature": 0.0, "avg_logprob": -0.05234004202343169, "compression_ratio": 1.7714285714285714, "no_speech_prob": 0.002669332316145301}, {"id": 409, "seek": 308444, "start": 3097.0, "end": 3103.08, "text": " breath product will be a subgroup always but the equality happens if this kind of condition is", "tokens": [50992, 6045, 1674, 486, 312, 257, 1422, 17377, 1009, 457, 264, 14949, 2314, 498, 341, 733, 295, 4188, 307, 51296], "temperature": 0.0, "avg_logprob": -0.05234004202343169, "compression_ratio": 1.7714285714285714, "no_speech_prob": 0.002669332316145301}, {"id": 410, "seek": 308444, "start": 3103.08, "end": 3113.16, "text": " satisfied for for the graphs right so in this case this is like s2 breath product with d4", "tokens": [51296, 11239, 337, 337, 264, 24877, 558, 370, 294, 341, 1389, 341, 307, 411, 262, 17, 6045, 1674, 365, 274, 19, 51800], "temperature": 0.0, "avg_logprob": -0.05234004202343169, "compression_ratio": 1.7714285714285714, "no_speech_prob": 0.002669332316145301}, {"id": 411, "seek": 311316, "start": 3113.16, "end": 3122.3599999999997, "text": " the dihedral group and the quantum version is just that we replace we replace automorphism groups", "tokens": [50364, 264, 1026, 71, 24764, 1594, 293, 264, 13018, 3037, 307, 445, 300, 321, 7406, 321, 7406, 3553, 18191, 1434, 3935, 50824], "temperature": 0.0, "avg_logprob": -0.15230489813763162, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.001916607958264649}, {"id": 412, "seek": 311316, "start": 3122.3599999999997, "end": 3133.8799999999997, "text": " with quantum automorphism groups and we get a free breath product in there and just in all proved", "tokens": [50824, 365, 13018, 3553, 18191, 1434, 3935, 293, 321, 483, 257, 1737, 6045, 1674, 294, 456, 293, 445, 294, 439, 14617, 51400], "temperature": 0.0, "avg_logprob": -0.15230489813763162, "compression_ratio": 1.6115702479338843, "no_speech_prob": 0.001916607958264649}, {"id": 413, "seek": 313388, "start": 3133.88, "end": 3143.88, "text": " the result by completely different methods some years ago just for regular graphs so just for", "tokens": [50364, 264, 1874, 538, 2584, 819, 7150, 512, 924, 2057, 445, 337, 3890, 24877, 370, 445, 337, 50864], "temperature": 0.0, "avg_logprob": -0.06287054937393939, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.026546059176325798}, {"id": 414, "seek": 313388, "start": 3143.88, "end": 3150.28, "text": " graphs which have the same degree at every vertex so we obtained basically probably a much more", "tokens": [50864, 24877, 597, 362, 264, 912, 4314, 412, 633, 28162, 370, 321, 14879, 1936, 1391, 257, 709, 544, 51184], "temperature": 0.0, "avg_logprob": -0.06287054937393939, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.026546059176325798}, {"id": 415, "seek": 313388, "start": 3150.28, "end": 3158.6800000000003, "text": " elementary proof for this and we prove it for all graphs so we we make a quantum version of the", "tokens": [51184, 16429, 8177, 337, 341, 293, 321, 7081, 309, 337, 439, 24877, 370, 321, 321, 652, 257, 13018, 3037, 295, 264, 51604], "temperature": 0.0, "avg_logprob": -0.06287054937393939, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.026546059176325798}, {"id": 416, "seek": 315868, "start": 3158.68, "end": 3167.3999999999996, "text": " sabidu CTRM and here we actually use the Weisner-Lehmann algorithm more deeply", "tokens": [50364, 5560, 327, 84, 19529, 49, 44, 293, 510, 321, 767, 764, 264, 492, 271, 1193, 12, 11020, 8587, 969, 9284, 544, 8760, 50800], "temperature": 0.0, "avg_logprob": -0.1886114800113371, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0035271490924060345}, {"id": 417, "seek": 315868, "start": 3169.56, "end": 3174.3599999999997, "text": " so I'm not going to now go into these counts let's just ignore that for now", "tokens": [50908, 370, 286, 478, 406, 516, 281, 586, 352, 666, 613, 14893, 718, 311, 445, 11200, 300, 337, 586, 51148], "temperature": 0.0, "avg_logprob": -0.1886114800113371, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0035271490924060345}, {"id": 418, "seek": 315868, "start": 3175.64, "end": 3180.52, "text": " so but basically what we have to do we have to just follow the Weisner-Lehmann algorithm", "tokens": [51212, 370, 457, 1936, 437, 321, 362, 281, 360, 321, 362, 281, 445, 1524, 264, 492, 271, 1193, 12, 11020, 8587, 969, 9284, 51456], "temperature": 0.0, "avg_logprob": -0.1886114800113371, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0035271490924060345}, {"id": 419, "seek": 315868, "start": 3180.52, "end": 3186.52, "text": " and see that the inner and outer edges so what we want to basically prove", "tokens": [51456, 293, 536, 300, 264, 7284, 293, 10847, 8819, 370, 437, 321, 528, 281, 1936, 7081, 51756], "temperature": 0.0, "avg_logprob": -0.1886114800113371, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0035271490924060345}, {"id": 420, "seek": 318652, "start": 3186.52, "end": 3193.64, "text": " because what are these what are these automorphisms in a classical case what what should they do", "tokens": [50364, 570, 437, 366, 613, 437, 366, 613, 3553, 18191, 13539, 294, 257, 13735, 1389, 437, 437, 820, 436, 360, 50720], "temperature": 0.0, "avg_logprob": -0.12221029069688585, "compression_ratio": 1.8675496688741722, "no_speech_prob": 0.0030602668412029743}, {"id": 421, "seek": 318652, "start": 3194.7599999999998, "end": 3200.52, "text": " you should have if this is just an equality you should have just two types of automorphisms those", "tokens": [50776, 291, 820, 362, 498, 341, 307, 445, 364, 14949, 291, 820, 362, 445, 732, 3467, 295, 3553, 18191, 13539, 729, 51064], "temperature": 0.0, "avg_logprob": -0.12221029069688585, "compression_ratio": 1.8675496688741722, "no_speech_prob": 0.0030602668412029743}, {"id": 422, "seek": 318652, "start": 3201.08, "end": 3209.08, "text": " that follow the structure of the outer graph and those that act inside the inner graphs", "tokens": [51092, 300, 1524, 264, 3877, 295, 264, 10847, 4295, 293, 729, 300, 605, 1854, 264, 7284, 24877, 51492], "temperature": 0.0, "avg_logprob": -0.12221029069688585, "compression_ratio": 1.8675496688741722, "no_speech_prob": 0.0030602668412029743}, {"id": 423, "seek": 320908, "start": 3210.04, "end": 3216.68, "text": " this is just two types of automorphisms that should be there in case there is an equality", "tokens": [50412, 341, 307, 445, 732, 3467, 295, 3553, 18191, 13539, 300, 820, 312, 456, 294, 1389, 456, 307, 364, 14949, 50744], "temperature": 0.0, "avg_logprob": -0.11566400527954102, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.003202367341145873}, {"id": 424, "seek": 320908, "start": 3217.96, "end": 3225.96, "text": " and what we use the Weisner-Lehmann to do is that we prove that the Weisner-Lehmann actually", "tokens": [50808, 293, 437, 321, 764, 264, 492, 271, 1193, 12, 11020, 8587, 969, 281, 360, 307, 300, 321, 7081, 300, 264, 492, 271, 1193, 12, 11020, 8587, 969, 767, 51208], "temperature": 0.0, "avg_logprob": -0.11566400527954102, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.003202367341145873}, {"id": 425, "seek": 320908, "start": 3225.96, "end": 3231.4, "text": " distinguishes all the inner edges and all the outer edges so this is just a purely", "tokens": [51208, 11365, 16423, 439, 264, 7284, 8819, 293, 439, 264, 10847, 8819, 370, 341, 307, 445, 257, 17491, 51480], "temperature": 0.0, "avg_logprob": -0.11566400527954102, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.003202367341145873}, {"id": 426, "seek": 320908, "start": 3231.4, "end": 3238.2, "text": " combinatorial result but thanks to the connection of Weisner-Lehmann and the quantum groups we can", "tokens": [51480, 2512, 31927, 831, 1874, 457, 3231, 281, 264, 4984, 295, 492, 271, 1193, 12, 11020, 8587, 969, 293, 264, 13018, 3935, 321, 393, 51820], "temperature": 0.0, "avg_logprob": -0.11566400527954102, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.003202367341145873}, {"id": 427, "seek": 323908, "start": 3239.4, "end": 3246.84, "text": " it actually helps to also analyze the quantum groups so it's not clear how actually Sabidouci", "tokens": [50380, 309, 767, 3665, 281, 611, 12477, 264, 13018, 3935, 370, 309, 311, 406, 1850, 577, 767, 13915, 327, 263, 537, 50752], "temperature": 0.0, "avg_logprob": -0.10680503609739704, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.006225954741239548}, {"id": 428, "seek": 323908, "start": 3246.84, "end": 3254.7599999999998, "text": " proved it in his original paper because this is something from the 50s and it was there were", "tokens": [50752, 14617, 309, 294, 702, 3380, 3035, 570, 341, 307, 746, 490, 264, 2625, 82, 293, 309, 390, 456, 645, 51148], "temperature": 0.0, "avg_logprob": -0.10680503609739704, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.006225954741239548}, {"id": 429, "seek": 323908, "start": 3254.7599999999998, "end": 3261.0, "text": " several iterations for the papers there were several mistakes in it like it was at least", "tokens": [51148, 2940, 36540, 337, 264, 10577, 456, 645, 2940, 8038, 294, 309, 411, 309, 390, 412, 1935, 51460], "temperature": 0.0, "avg_logprob": -0.10680503609739704, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.006225954741239548}, {"id": 430, "seek": 323908, "start": 3261.0, "end": 3267.24, "text": " three times corrected or two times and but he must have done something similar he must", "tokens": [51460, 1045, 1413, 31687, 420, 732, 1413, 293, 457, 415, 1633, 362, 1096, 746, 2531, 415, 1633, 51772], "temperature": 0.0, "avg_logprob": -0.10680503609739704, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.006225954741239548}, {"id": 431, "seek": 326724, "start": 3267.9599999999996, "end": 3271.16, "text": " somehow distinguish the inner edges and outer edges but", "tokens": [50400, 6063, 20206, 264, 7284, 8819, 293, 10847, 8819, 457, 50560], "temperature": 0.0, "avg_logprob": -0.10504466487515357, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.004441236611455679}, {"id": 432, "seek": 326724, "start": 3273.08, "end": 3278.7599999999998, "text": " but the Weisner-Lehmann algorithm is much more elegant way to do it and we also", "tokens": [50656, 457, 264, 492, 271, 1193, 12, 11020, 8587, 969, 9284, 307, 709, 544, 21117, 636, 281, 360, 309, 293, 321, 611, 50940], "temperature": 0.0, "avg_logprob": -0.10504466487515357, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.004441236611455679}, {"id": 433, "seek": 326724, "start": 3279.8799999999997, "end": 3285.7999999999997, "text": " not only update the quantum version of Sabidouci but I think we prove the Sabidouci theorem in an", "tokens": [50996, 406, 787, 5623, 264, 13018, 3037, 295, 13915, 327, 263, 537, 457, 286, 519, 321, 7081, 264, 13915, 327, 263, 537, 20904, 294, 364, 51292], "temperature": 0.0, "avg_logprob": -0.10504466487515357, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.004441236611455679}, {"id": 434, "seek": 328580, "start": 3285.8, "end": 3293.6400000000003, "text": " elegant way and maybe I'm coming to it to the end and", "tokens": [50364, 21117, 636, 293, 1310, 286, 478, 1348, 281, 309, 281, 264, 917, 293, 50756], "temperature": 0.0, "avg_logprob": -0.09845132981577227, "compression_ratio": 1.651006711409396, "no_speech_prob": 0.019627928733825684}, {"id": 435, "seek": 328580, "start": 3297.0, "end": 3305.6400000000003, "text": " okay let's just quickly go over this thing here so we could we could then actually also prove this", "tokens": [50924, 1392, 718, 311, 445, 2661, 352, 670, 341, 551, 510, 370, 321, 727, 321, 727, 550, 767, 611, 7081, 341, 51356], "temperature": 0.0, "avg_logprob": -0.09845132981577227, "compression_ratio": 1.651006711409396, "no_speech_prob": 0.019627928733825684}, {"id": 436, "seek": 328580, "start": 3308.2000000000003, "end": 3313.88, "text": " yeah so we actually do the then do the same we could prove it by ourselves but it's easier to", "tokens": [51484, 1338, 370, 321, 767, 360, 264, 550, 360, 264, 912, 321, 727, 7081, 309, 538, 4175, 457, 309, 311, 3571, 281, 51768], "temperature": 0.0, "avg_logprob": -0.09845132981577227, "compression_ratio": 1.651006711409396, "no_speech_prob": 0.019627928733825684}, {"id": 437, "seek": 331388, "start": 3313.88, "end": 3321.2400000000002, "text": " use this existing result by Banika and Bishon where they actually define yet another kind of", "tokens": [50364, 764, 341, 6741, 1874, 538, 13850, 5439, 293, 363, 742, 266, 689, 436, 767, 6964, 1939, 1071, 733, 295, 50732], "temperature": 0.0, "avg_logprob": -0.09750332302517362, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.008552580140531063}, {"id": 438, "seek": 331388, "start": 3321.2400000000002, "end": 3329.2400000000002, "text": " product of graphs which is the free they call it free product of graphs but and they I'm not going", "tokens": [50732, 1674, 295, 24877, 597, 307, 264, 1737, 436, 818, 309, 1737, 1674, 295, 24877, 457, 293, 436, 286, 478, 406, 516, 51132], "temperature": 0.0, "avg_logprob": -0.09750332302517362, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.008552580140531063}, {"id": 439, "seek": 331388, "start": 3329.2400000000002, "end": 3336.28, "text": " to define it because it's not that important now and they prove that this quantum automorphism group", "tokens": [51132, 281, 6964, 309, 570, 309, 311, 406, 300, 1021, 586, 293, 436, 7081, 300, 341, 13018, 3553, 18191, 1434, 1594, 51484], "temperature": 0.0, "avg_logprob": -0.09750332302517362, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.008552580140531063}, {"id": 440, "seek": 331388, "start": 3336.28, "end": 3343.0, "text": " of this free product of graphs is also the rest product so and for us to use the free product", "tokens": [51484, 295, 341, 1737, 1674, 295, 24877, 307, 611, 264, 1472, 1674, 370, 293, 337, 505, 281, 764, 264, 1737, 1674, 51820], "temperature": 0.0, "avg_logprob": -0.09750332302517362, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.008552580140531063}, {"id": 441, "seek": 334300, "start": 3343.08, "end": 3349.88, "text": " is actually exactly what we need from the Weisner-Lehmann is this partition of this inner", "tokens": [50368, 307, 767, 2293, 437, 321, 643, 490, 264, 492, 271, 1193, 12, 11020, 8587, 969, 307, 341, 24808, 295, 341, 7284, 50708], "temperature": 0.0, "avg_logprob": -0.12626472679344383, "compression_ratio": 1.658682634730539, "no_speech_prob": 0.0038510223384946585}, {"id": 442, "seek": 334300, "start": 3350.52, "end": 3357.24, "text": " and outer edges and non-edges and then we can just very simplifying it now then we can plug in", "tokens": [50740, 293, 10847, 8819, 293, 2107, 12, 292, 2880, 293, 550, 321, 393, 445, 588, 6883, 5489, 309, 586, 550, 321, 393, 5452, 294, 51076], "temperature": 0.0, "avg_logprob": -0.12626472679344383, "compression_ratio": 1.658682634730539, "no_speech_prob": 0.0038510223384946585}, {"id": 443, "seek": 334300, "start": 3357.24, "end": 3362.6, "text": " to this Banika and Bishon and this is exactly what is doing just in all who proved this only", "tokens": [51076, 281, 341, 13850, 5439, 293, 363, 742, 266, 293, 341, 307, 2293, 437, 307, 884, 445, 294, 439, 567, 14617, 341, 787, 51344], "temperature": 0.0, "avg_logprob": -0.12626472679344383, "compression_ratio": 1.658682634730539, "no_speech_prob": 0.0038510223384946585}, {"id": 444, "seek": 336260, "start": 3362.6, "end": 3371.16, "text": " for regular graphs he's also using this result by Banika and Bishon and yeah and just just", "tokens": [50364, 337, 3890, 24877, 415, 311, 611, 1228, 341, 1874, 538, 13850, 5439, 293, 363, 742, 266, 293, 1338, 293, 445, 445, 50792], "temperature": 0.0, "avg_logprob": -0.11854708011333759, "compression_ratio": 1.5680473372781065, "no_speech_prob": 0.00732444366440177}, {"id": 445, "seek": 336260, "start": 3374.7599999999998, "end": 3379.4, "text": " yeah so we prove that under the sabidusi condition the quantum automorphism group", "tokens": [50972, 1338, 370, 321, 7081, 300, 833, 264, 5560, 327, 33016, 4188, 264, 13018, 3553, 18191, 1434, 1594, 51204], "temperature": 0.0, "avg_logprob": -0.11854708011333759, "compression_ratio": 1.5680473372781065, "no_speech_prob": 0.00732444366440177}, {"id": 446, "seek": 336260, "start": 3380.12, "end": 3386.8399999999997, "text": " of this lexicographic product of graphs what we what we want is exactly equal to the quantum", "tokens": [51240, 295, 341, 476, 47228, 12295, 1674, 295, 24877, 437, 321, 437, 321, 528, 307, 2293, 2681, 281, 264, 13018, 51576], "temperature": 0.0, "avg_logprob": -0.11854708011333759, "compression_ratio": 1.5680473372781065, "no_speech_prob": 0.00732444366440177}, {"id": 447, "seek": 338684, "start": 3386.84, "end": 3394.6000000000004, "text": " automorphism group of this free product of these graphs where they are colored based on these colors", "tokens": [50364, 3553, 18191, 1434, 1594, 295, 341, 1737, 1674, 295, 613, 24877, 689, 436, 366, 14332, 2361, 322, 613, 4577, 50752], "temperature": 0.0, "avg_logprob": -0.08696041742960613, "compression_ratio": 1.7771084337349397, "no_speech_prob": 0.007769977208226919}, {"id": 448, "seek": 338684, "start": 3394.6000000000004, "end": 3401.96, "text": " that we obtained from Weisner-Lehmann and with this color because this free product of graphs by", "tokens": [50752, 300, 321, 14879, 490, 492, 271, 1193, 12, 11020, 8587, 969, 293, 365, 341, 2017, 570, 341, 1737, 1674, 295, 24877, 538, 51120], "temperature": 0.0, "avg_logprob": -0.08696041742960613, "compression_ratio": 1.7771084337349397, "no_speech_prob": 0.007769977208226919}, {"id": 449, "seek": 338684, "start": 3401.96, "end": 3409.1600000000003, "text": " Banika and Bishon is by is using some colors and we use exactly these colors from Weisner-Lehmann", "tokens": [51120, 13850, 5439, 293, 363, 742, 266, 307, 538, 307, 1228, 512, 4577, 293, 321, 764, 2293, 613, 4577, 490, 492, 271, 1193, 12, 11020, 8587, 969, 51480], "temperature": 0.0, "avg_logprob": -0.08696041742960613, "compression_ratio": 1.7771084337349397, "no_speech_prob": 0.007769977208226919}, {"id": 450, "seek": 340916, "start": 3409.16, "end": 3419.8799999999997, "text": " to plug into their product basically and yeah so maybe I almost ran out of time here is just", "tokens": [50364, 281, 5452, 666, 641, 1674, 1936, 293, 1338, 370, 1310, 286, 1920, 5872, 484, 295, 565, 510, 307, 445, 50900], "temperature": 0.0, "avg_logprob": -0.1981494146234849, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.020195307210087776}, {"id": 451, "seek": 340916, "start": 3421.24, "end": 3429.24, "text": " a very small cherry on top is that you can also you you can prove a version of this sabidusi", "tokens": [50968, 257, 588, 1359, 20164, 322, 1192, 307, 300, 291, 393, 611, 291, 291, 393, 7081, 257, 3037, 295, 341, 5560, 327, 33016, 51368], "temperature": 0.0, "avg_logprob": -0.1981494146234849, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.020195307210087776}, {"id": 452, "seek": 340916, "start": 3429.24, "end": 3436.3599999999997, "text": " TORM for vertex transitive graphs this means that the two the graphs have just one orbit", "tokens": [51368, 314, 2483, 44, 337, 28162, 1145, 2187, 24877, 341, 1355, 300, 264, 732, 264, 24877, 362, 445, 472, 13991, 51724], "temperature": 0.0, "avg_logprob": -0.1981494146234849, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.020195307210087776}, {"id": 453, "seek": 343636, "start": 3436.36, "end": 3445.7200000000003, "text": " in their automorphism group and yeah let's just not go over this anymore but the theorem is basically", "tokens": [50364, 294, 641, 3553, 18191, 1434, 1594, 293, 1338, 718, 311, 445, 406, 352, 670, 341, 3602, 457, 264, 20904, 307, 1936, 50832], "temperature": 0.0, "avg_logprob": -0.08035739730386172, "compression_ratio": 1.676300578034682, "no_speech_prob": 0.0031377479899674654}, {"id": 454, "seek": 343636, "start": 3445.7200000000003, "end": 3454.84, "text": " that if it's not the case that the equality occurs in the sabidusi theorem then for vertex", "tokens": [50832, 300, 498, 309, 311, 406, 264, 1389, 300, 264, 14949, 11843, 294, 264, 5560, 327, 33016, 20904, 550, 337, 28162, 51288], "temperature": 0.0, "avg_logprob": -0.08035739730386172, "compression_ratio": 1.676300578034682, "no_speech_prob": 0.0031377479899674654}, {"id": 455, "seek": 343636, "start": 3454.84, "end": 3461.7200000000003, "text": " transitive graphs you can still find a formula for the automorphism group and the quantum version", "tokens": [51288, 1145, 2187, 24877, 291, 393, 920, 915, 257, 8513, 337, 264, 3553, 18191, 1434, 1594, 293, 264, 13018, 3037, 51632], "temperature": 0.0, "avg_logprob": -0.08035739730386172, "compression_ratio": 1.676300578034682, "no_speech_prob": 0.0031377479899674654}, {"id": 456, "seek": 346172, "start": 3461.7999999999997, "end": 3471.16, "text": " happens to be exactly the same okay so let's just mention some problems at the end so something", "tokens": [50368, 2314, 281, 312, 2293, 264, 912, 1392, 370, 718, 311, 445, 2152, 512, 2740, 412, 264, 917, 370, 746, 50836], "temperature": 0.0, "avg_logprob": -0.07949926776270713, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0024239199701696634}, {"id": 457, "seek": 346172, "start": 3471.16, "end": 3478.68, "text": " that we already have in progress is to and there we have to do much more quantum groups", "tokens": [50836, 300, 321, 1217, 362, 294, 4205, 307, 281, 293, 456, 321, 362, 281, 360, 709, 544, 13018, 3935, 51212], "temperature": 0.0, "avg_logprob": -0.07949926776270713, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0024239199701696634}, {"id": 458, "seek": 346172, "start": 3479.3199999999997, "end": 3486.68, "text": " is to define inhomogeneous free rest product so you have this rest product of groups", "tokens": [51244, 307, 281, 6964, 47707, 298, 31112, 1737, 1472, 1674, 370, 291, 362, 341, 1472, 1674, 295, 3935, 51612], "temperature": 0.0, "avg_logprob": -0.07949926776270713, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0024239199701696634}, {"id": 459, "seek": 348668, "start": 3487.56, "end": 3495.72, "text": " where you have a group acting on some set and now to each element of this set you assign a group", "tokens": [50408, 689, 291, 362, 257, 1594, 6577, 322, 512, 992, 293, 586, 281, 1184, 4478, 295, 341, 992, 291, 6269, 257, 1594, 50816], "temperature": 0.0, "avg_logprob": -0.06090978134510129, "compression_ratio": 1.825242718446602, "no_speech_prob": 0.00409436970949173}, {"id": 460, "seek": 348668, "start": 3495.72, "end": 3503.16, "text": " now you can consider the orbits in this action and for each orbit you could pick a different group", "tokens": [50816, 586, 291, 393, 1949, 264, 43522, 294, 341, 3069, 293, 337, 1184, 13991, 291, 727, 1888, 257, 819, 1594, 51188], "temperature": 0.0, "avg_logprob": -0.06090978134510129, "compression_ratio": 1.825242718446602, "no_speech_prob": 0.00409436970949173}, {"id": 461, "seek": 348668, "start": 3503.16, "end": 3509.0, "text": " so in this way you get an inhomogeneous rest product of groups which somehow generalizes", "tokens": [51188, 370, 294, 341, 636, 291, 483, 364, 47707, 298, 31112, 1472, 1674, 295, 3935, 597, 6063, 2674, 5660, 51480], "temperature": 0.0, "avg_logprob": -0.06090978134510129, "compression_ratio": 1.825242718446602, "no_speech_prob": 0.00409436970949173}, {"id": 462, "seek": 348668, "start": 3509.0, "end": 3515.08, "text": " the rest product and it would be interesting to have a quantum group analog of that and see", "tokens": [51480, 264, 1472, 1674, 293, 309, 576, 312, 1880, 281, 362, 257, 13018, 1594, 16660, 295, 300, 293, 536, 51784], "temperature": 0.0, "avg_logprob": -0.06090978134510129, "compression_ratio": 1.825242718446602, "no_speech_prob": 0.00409436970949173}, {"id": 463, "seek": 351508, "start": 3515.7999999999997, "end": 3522.04, "text": " what it what can be done with it so maybe apply it for some further graph classes", "tokens": [50400, 437, 309, 437, 393, 312, 1096, 365, 309, 370, 1310, 3079, 309, 337, 512, 3052, 4295, 5359, 50712], "temperature": 0.0, "avg_logprob": -0.0682663801239758, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0012596460292115808}, {"id": 464, "seek": 351508, "start": 3523.16, "end": 3527.88, "text": " like planar graphs for example and planar graphs this there are some problems even in planar", "tokens": [50768, 411, 1393, 289, 24877, 337, 1365, 293, 1393, 289, 24877, 341, 456, 366, 512, 2740, 754, 294, 1393, 289, 51004], "temperature": 0.0, "avg_logprob": -0.0682663801239758, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0012596460292115808}, {"id": 465, "seek": 351508, "start": 3527.88, "end": 3533.4, "text": " graphs that are not clear and it might be very interesting for people working in geometry because", "tokens": [51004, 24877, 300, 366, 406, 1850, 293, 309, 1062, 312, 588, 1880, 337, 561, 1364, 294, 18426, 570, 51280], "temperature": 0.0, "avg_logprob": -0.0682663801239758, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0012596460292115808}, {"id": 466, "seek": 351508, "start": 3535.08, "end": 3540.52, "text": " if you wanted to determine the automorphism groups of planar graphs there is a key case", "tokens": [51364, 498, 291, 1415, 281, 6997, 264, 3553, 18191, 1434, 3935, 295, 1393, 289, 24877, 456, 307, 257, 2141, 1389, 51636], "temperature": 0.0, "avg_logprob": -0.0682663801239758, "compression_ratio": 1.7733990147783252, "no_speech_prob": 0.0012596460292115808}, {"id": 467, "seek": 354052, "start": 3540.52, "end": 3547.72, "text": " of so-called three connected planar graphs if you don't want to so three connected planar graphs", "tokens": [50364, 295, 370, 12, 11880, 1045, 4582, 1393, 289, 24877, 498, 291, 500, 380, 528, 281, 370, 1045, 4582, 1393, 289, 24877, 50724], "temperature": 0.0, "avg_logprob": -0.09522665630687367, "compression_ratio": 1.9842105263157894, "no_speech_prob": 0.0020088679157197475}, {"id": 468, "seek": 354052, "start": 3548.7599999999998, "end": 3557.8, "text": " basically corresponds to the graphs of polytopes and Mani's theorem says that they can be uniquely", "tokens": [50776, 1936, 23249, 281, 264, 24877, 295, 6754, 83, 30545, 293, 2458, 72, 311, 20904, 1619, 300, 436, 393, 312, 31474, 51228], "temperature": 0.0, "avg_logprob": -0.09522665630687367, "compression_ratio": 1.9842105263157894, "no_speech_prob": 0.0020088679157197475}, {"id": 469, "seek": 354052, "start": 3557.8, "end": 3562.6, "text": " embedded into the sphere in such a way that the automorphisms of the three connected planar", "tokens": [51228, 16741, 666, 264, 16687, 294, 1270, 257, 636, 300, 264, 3553, 18191, 13539, 295, 264, 1045, 4582, 1393, 289, 51468], "temperature": 0.0, "avg_logprob": -0.09522665630687367, "compression_ratio": 1.9842105263157894, "no_speech_prob": 0.0020088679157197475}, {"id": 470, "seek": 354052, "start": 3562.6, "end": 3568.2, "text": " graphs exactly correspond to isometries of the sphere so the automorphism groups of three", "tokens": [51468, 24877, 2293, 6805, 281, 307, 649, 2244, 295, 264, 16687, 370, 264, 3553, 18191, 1434, 3935, 295, 1045, 51748], "temperature": 0.0, "avg_logprob": -0.09522665630687367, "compression_ratio": 1.9842105263157894, "no_speech_prob": 0.0020088679157197475}, {"id": 471, "seek": 356820, "start": 3568.2, "end": 3575.8799999999997, "text": " connected planar graphs are exactly the finite subgroups of O3 and so these are some infinite", "tokens": [50364, 4582, 1393, 289, 24877, 366, 2293, 264, 19362, 1422, 17377, 82, 295, 422, 18, 293, 370, 613, 366, 512, 13785, 50748], "temperature": 0.0, "avg_logprob": -0.19445828331841364, "compression_ratio": 1.4651162790697674, "no_speech_prob": 0.001766214263625443}, {"id": 472, "seek": 356820, "start": 3575.8799999999997, "end": 3586.04, "text": " families of groups and the symmetric groups of platonic solids and so quantum Mani's theorem or", "tokens": [50748, 4466, 295, 3935, 293, 264, 32330, 3935, 295, 3403, 11630, 38536, 293, 370, 13018, 2458, 72, 311, 20904, 420, 51256], "temperature": 0.0, "avg_logprob": -0.19445828331841364, "compression_ratio": 1.4651162790697674, "no_speech_prob": 0.001766214263625443}, {"id": 473, "seek": 358604, "start": 3586.36, "end": 3597.96, "text": " or yeah or and maybe because there is a quantum group O plus three so there might be something", "tokens": [50380, 420, 1338, 420, 293, 1310, 570, 456, 307, 257, 13018, 1594, 422, 1804, 1045, 370, 456, 1062, 312, 746, 50960], "temperature": 0.0, "avg_logprob": -0.21745343641801315, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.0032341668847948313}, {"id": 474, "seek": 358604, "start": 3597.96, "end": 3604.7599999999998, "text": " there so look at maybe quantum automorphism groups of three connected planar graphs even that would", "tokens": [50960, 456, 370, 574, 412, 1310, 13018, 3553, 18191, 1434, 3935, 295, 1045, 4582, 1393, 289, 24877, 754, 300, 576, 51300], "temperature": 0.0, "avg_logprob": -0.21745343641801315, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.0032341668847948313}, {"id": 475, "seek": 360476, "start": 3604.76, "end": 3608.44, "text": " be very interesting I think so that's it", "tokens": [50364, 312, 588, 1880, 286, 519, 370, 300, 311, 309, 50548], "temperature": 0.0, "avg_logprob": -0.25264115767045453, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.0029347494710236788}, {"id": 476, "seek": 360476, "start": 3617.5600000000004, "end": 3623.32, "text": " answer very much for that very interesting talk do we have any questions either in person or perhaps", "tokens": [51004, 1867, 588, 709, 337, 300, 588, 1880, 751, 360, 321, 362, 604, 1651, 2139, 294, 954, 420, 4317, 51292], "temperature": 0.0, "avg_logprob": -0.25264115767045453, "compression_ratio": 1.396039603960396, "no_speech_prob": 0.0029347494710236788}, {"id": 477, "seek": 362332, "start": 3623.32, "end": 3628.92, "text": " we have something", "tokens": [50364, 321, 362, 746, 50644], "temperature": 1.0, "avg_logprob": -1.3283333778381348, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.06169562414288521}, {"id": 478, "seek": 362332, "start": 3639.7200000000003, "end": 3644.92, "text": " yes", "tokens": [51184, 2086, 51444], "temperature": 1.0, "avg_logprob": -1.3283333778381348, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.06169562414288521}, {"id": 479, "seek": 364492, "start": 3644.92, "end": 3649.92, "text": " How do they respond to this?", "tokens": [50364, 1012, 360, 436, 4196, 281, 341, 30, 50614], "temperature": 0.0, "avg_logprob": -0.764129638671875, "compression_ratio": 1.2264150943396226, "no_speech_prob": 0.2510785460472107}, {"id": 480, "seek": 364492, "start": 3649.92, "end": 3670.92, "text": " Quantum on the resume group of a complete graph should be the SM plus, the quantum permutation group.", "tokens": [50614, 26968, 449, 322, 264, 15358, 1594, 295, 257, 3566, 4295, 820, 312, 264, 13115, 1804, 11, 264, 13018, 4784, 11380, 1594, 13, 51664], "temperature": 0.0, "avg_logprob": -0.764129638671875, "compression_ratio": 1.2264150943396226, "no_speech_prob": 0.2510785460472107}, {"id": 481, "seek": 367092, "start": 3670.92, "end": 3690.92, "text": " Actually, I don't know much about the result, I just heard a talk which claimed this, but yeah, I think it should be definitely true that there is no quantum analog for proof theorem, but I don't know exactly the statement from the top of my head, what is exactly the statement that they proved in that.", "tokens": [50364, 5135, 11, 286, 500, 380, 458, 709, 466, 264, 1874, 11, 286, 445, 2198, 257, 751, 597, 12941, 341, 11, 457, 1338, 11, 286, 519, 309, 820, 312, 2138, 2074, 300, 456, 307, 572, 13018, 16660, 337, 8177, 20904, 11, 457, 286, 500, 380, 458, 2293, 264, 5629, 490, 264, 1192, 295, 452, 1378, 11, 437, 307, 2293, 264, 5629, 300, 436, 14617, 294, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2527585438319615, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.33502092957496643}, {"id": 482, "seek": 369092, "start": 3690.92, "end": 3700.92, "text": " It was proven by, I think, Bishop McCarthy.", "tokens": [50364, 467, 390, 12785, 538, 11, 286, 519, 11, 30113, 44085, 13, 50864], "temperature": 0.0, "avg_logprob": -0.41926561991373695, "compression_ratio": 0.8431372549019608, "no_speech_prob": 0.3235873281955719}, {"id": 483, "seek": 370092, "start": 3700.92, "end": 3715.92, "text": " And when you mentioned the flux sum and the failure in the quantum sense, what I was wondering is there, so if it fails for graphs, I mean, is there some other structure for which there is a version, a quantum version of.", "tokens": [50364, 400, 562, 291, 2835, 264, 19298, 2408, 293, 264, 7763, 294, 264, 13018, 2020, 11, 437, 286, 390, 6359, 307, 456, 11, 370, 498, 309, 18199, 337, 24877, 11, 286, 914, 11, 307, 456, 512, 661, 3877, 337, 597, 456, 307, 257, 3037, 11, 257, 13018, 3037, 295, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2443498388513342, "compression_ratio": 1.60752688172043, "no_speech_prob": 0.5293871760368347}, {"id": 484, "seek": 370092, "start": 3715.92, "end": 3724.92, "text": " Yeah, I don't know, but yeah, it's an interesting question, but I don't know.", "tokens": [51114, 865, 11, 286, 500, 380, 458, 11, 457, 1338, 11, 309, 311, 364, 1880, 1168, 11, 457, 286, 500, 380, 458, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2443498388513342, "compression_ratio": 1.60752688172043, "no_speech_prob": 0.5293871760368347}, {"id": 485, "seek": 372492, "start": 3725.92, "end": 3734.92, "text": " Well, classically, the point is that every group is a permutation group.", "tokens": [50414, 1042, 11, 1508, 984, 11, 264, 935, 307, 300, 633, 1594, 307, 257, 4784, 11380, 1594, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17642691778758215, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.00862514041364193}, {"id": 486, "seek": 372492, "start": 3734.92, "end": 3748.92, "text": " So every group acts on itself, but if you have a quantum group, then one group is not a classical space, and quantum permutation groups in this sense are symmetries of classical spaces.", "tokens": [50864, 407, 633, 1594, 10672, 322, 2564, 11, 457, 498, 291, 362, 257, 13018, 1594, 11, 550, 472, 1594, 307, 406, 257, 13735, 1901, 11, 293, 13018, 4784, 11380, 3935, 294, 341, 2020, 366, 14232, 302, 2244, 295, 13735, 7673, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17642691778758215, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.00862514041364193}, {"id": 487, "seek": 374892, "start": 3748.92, "end": 3772.92, "text": " So if you want it, a quantum proof theorem, you actually should not consider classical graphs, but quantum graphs, some graph structure on quantum, on some algebra, non-quimitorial algebra.", "tokens": [50364, 407, 498, 291, 528, 309, 11, 257, 13018, 8177, 20904, 11, 291, 767, 820, 406, 1949, 13735, 24877, 11, 457, 13018, 24877, 11, 512, 4295, 3877, 322, 13018, 11, 322, 512, 21989, 11, 2107, 12, 358, 332, 3029, 831, 21989, 13, 51564], "temperature": 0.0, "avg_logprob": -0.5203842163085938, "compression_ratio": 1.4765625, "no_speech_prob": 0.022027796134352684}, {"id": 488, "seek": 377292, "start": 3773.92, "end": 3791.92, "text": " I wanted to ask, again, for the difference between the Weisfeller-Lehmann and the quantum isomorphism, so is the difference quantified somehow more precisely, how much is different?", "tokens": [50414, 286, 1415, 281, 1029, 11, 797, 11, 337, 264, 2649, 1296, 264, 492, 271, 69, 14983, 12, 11020, 8587, 969, 293, 264, 13018, 307, 32702, 1434, 11, 370, 307, 264, 2649, 4426, 2587, 6063, 544, 13402, 11, 577, 709, 307, 819, 30, 51314], "temperature": 0.0, "avg_logprob": -0.28881933378136676, "compression_ratio": 1.4365079365079365, "no_speech_prob": 0.09456367045640945}, {"id": 489, "seek": 379192, "start": 3791.92, "end": 3818.92, "text": " So in terms of computability, there's a huge difference, but for how many graphs, the orbits are different by Weisfeller-Lehmann or quantum automorphism, or do we know some examples of pairs of graphs that cannot be distinguished by Weisfeller-Lehmann,", "tokens": [50364, 407, 294, 2115, 295, 2807, 2310, 11, 456, 311, 257, 2603, 2649, 11, 457, 337, 577, 867, 24877, 11, 264, 43522, 366, 819, 538, 492, 271, 69, 14983, 12, 11020, 8587, 969, 420, 13018, 3553, 18191, 1434, 11, 420, 360, 321, 458, 512, 5110, 295, 15494, 295, 24877, 300, 2644, 312, 21702, 538, 492, 271, 69, 14983, 12, 11020, 8587, 969, 11, 51714], "temperature": 0.0, "avg_logprob": -0.1329571550542658, "compression_ratio": 1.5272727272727273, "no_speech_prob": 0.005970973055809736}, {"id": 490, "seek": 381892, "start": 3818.92, "end": 3822.92, "text": " but they are not quantum isomorphic or something in this sense.", "tokens": [50364, 457, 436, 366, 406, 13018, 307, 32702, 299, 420, 746, 294, 341, 2020, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2869502173529731, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.3088386058807373}, {"id": 491, "seek": 381892, "start": 3822.92, "end": 3835.92, "text": " Like, if I understand it correctly, like if you, so if they are not distinguished by two-dimensional Weisfeller-Lehmann, or because...", "tokens": [50564, 1743, 11, 498, 286, 1223, 309, 8944, 11, 411, 498, 291, 11, 370, 498, 436, 366, 406, 21702, 538, 732, 12, 18759, 492, 271, 69, 14983, 12, 11020, 8587, 969, 11, 420, 570, 485, 51214], "temperature": 0.0, "avg_logprob": -0.2869502173529731, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.3088386058807373}, {"id": 492, "seek": 381892, "start": 3835.92, "end": 3839.92, "text": " I don't think it tries strongly regular graphs.", "tokens": [51214, 286, 500, 380, 519, 309, 9898, 10613, 3890, 24877, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2869502173529731, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.3088386058807373}, {"id": 493, "seek": 381892, "start": 3839.92, "end": 3840.92, "text": " Yeah, I...", "tokens": [51414, 865, 11, 286, 485, 51464], "temperature": 0.0, "avg_logprob": -0.2869502173529731, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.3088386058807373}, {"id": 494, "seek": 381892, "start": 3840.92, "end": 3847.92, "text": " Because Weisfeller-Lehmann says classically, it tries strongly regular graphs, it stops in the beginning.", "tokens": [51464, 1436, 492, 271, 69, 14983, 12, 11020, 8587, 969, 1619, 1508, 984, 11, 309, 9898, 10613, 3890, 24877, 11, 309, 10094, 294, 264, 2863, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2869502173529731, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.3088386058807373}, {"id": 495, "seek": 384792, "start": 3847.92, "end": 3853.92, "text": " That's like, yeah, maybe.", "tokens": [50364, 663, 311, 411, 11, 1338, 11, 1310, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24968877046004587, "compression_ratio": 1.232, "no_speech_prob": 0.04773833975195885}, {"id": 496, "seek": 384792, "start": 3853.92, "end": 3863.92, "text": " Then maybe you want the other extreme where Weisfeller-Lehmann works fine, but the quantum algorithm or whatever...", "tokens": [50664, 1396, 1310, 291, 528, 264, 661, 8084, 689, 492, 271, 69, 14983, 12, 11020, 8587, 969, 1985, 2489, 11, 457, 264, 13018, 9284, 420, 2035, 485, 51164], "temperature": 0.0, "avg_logprob": -0.24968877046004587, "compression_ratio": 1.232, "no_speech_prob": 0.04773833975195885}, {"id": 497, "seek": 384792, "start": 3863.92, "end": 3864.92, "text": " Isomorphism.", "tokens": [51164, 1119, 32702, 1434, 13, 51214], "temperature": 0.0, "avg_logprob": -0.24968877046004587, "compression_ratio": 1.232, "no_speech_prob": 0.04773833975195885}, {"id": 498, "seek": 386492, "start": 3864.92, "end": 3865.92, "text": " Isomorphism.", "tokens": [50364, 1119, 32702, 1434, 13, 50414], "temperature": 0.4, "avg_logprob": -0.3282937759008163, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.1304822862148285}, {"id": 499, "seek": 386492, "start": 3865.92, "end": 3880.92, "text": " It is basically the same, but classically, more complex than these, but far from strongly regular graphs.", "tokens": [50414, 467, 307, 1936, 264, 912, 11, 457, 1508, 984, 11, 544, 3997, 813, 613, 11, 457, 1400, 490, 10613, 3890, 24877, 13, 51164], "temperature": 0.4, "avg_logprob": -0.3282937759008163, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.1304822862148285}, {"id": 500, "seek": 386492, "start": 3880.92, "end": 3881.92, "text": " Yeah, yeah, right.", "tokens": [51164, 865, 11, 1338, 11, 558, 13, 51214], "temperature": 0.4, "avg_logprob": -0.3282937759008163, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.1304822862148285}, {"id": 501, "seek": 386492, "start": 3881.92, "end": 3889.92, "text": " That would also be interesting to have some larger class of graphs where we know that Weisfeller-Lehmann would answer the question.", "tokens": [51214, 663, 576, 611, 312, 1880, 281, 362, 512, 4833, 1508, 295, 24877, 689, 321, 458, 300, 492, 271, 69, 14983, 12, 11020, 8587, 969, 576, 1867, 264, 1168, 13, 51614], "temperature": 0.4, "avg_logprob": -0.3282937759008163, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.1304822862148285}, {"id": 502, "seek": 386492, "start": 3889.92, "end": 3891.92, "text": " Well, power graphs.", "tokens": [51614, 1042, 11, 1347, 24877, 13, 51714], "temperature": 0.4, "avg_logprob": -0.3282937759008163, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.1304822862148285}, {"id": 503, "seek": 389192, "start": 3891.92, "end": 3893.92, "text": " Well, power graphs is not clear.", "tokens": [50364, 1042, 11, 1347, 24877, 307, 406, 1850, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12621984204042305, "compression_ratio": 2.1968085106382977, "no_speech_prob": 0.013454001396894455}, {"id": 504, "seek": 389192, "start": 3893.92, "end": 3902.92, "text": " For power graphs, it's not clear whether two-dimensional Weisfeller-Lehmann will answer the question.", "tokens": [50464, 1171, 1347, 24877, 11, 309, 311, 406, 1850, 1968, 732, 12, 18759, 492, 271, 69, 14983, 12, 11020, 8587, 969, 486, 1867, 264, 1168, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12621984204042305, "compression_ratio": 2.1968085106382977, "no_speech_prob": 0.013454001396894455}, {"id": 505, "seek": 389192, "start": 3902.92, "end": 3915.92, "text": " So power graphs is actually the open problem, whether two-dimensional Weisfeller-Lehmann will distinguish them, but currently it's known that three-dimensional Weisfeller-Lehmann distinguishes power graphs.", "tokens": [50914, 407, 1347, 24877, 307, 767, 264, 1269, 1154, 11, 1968, 732, 12, 18759, 492, 271, 69, 14983, 12, 11020, 8587, 969, 486, 20206, 552, 11, 457, 4362, 309, 311, 2570, 300, 1045, 12, 18759, 492, 271, 69, 14983, 12, 11020, 8587, 969, 11365, 16423, 1347, 24877, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12621984204042305, "compression_ratio": 2.1968085106382977, "no_speech_prob": 0.013454001396894455}, {"id": 506, "seek": 389192, "start": 3915.92, "end": 3919.92, "text": " And the open question is whether also two-dimensional distinguish them.", "tokens": [51564, 400, 264, 1269, 1168, 307, 1968, 611, 732, 12, 18759, 20206, 552, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12621984204042305, "compression_ratio": 2.1968085106382977, "no_speech_prob": 0.013454001396894455}, {"id": 507, "seek": 391992, "start": 3919.92, "end": 3921.92, "text": " And yeah, maybe.", "tokens": [50364, 400, 1338, 11, 1310, 13, 50464], "temperature": 0.0, "avg_logprob": -0.2696641775277945, "compression_ratio": 1.246031746031746, "no_speech_prob": 0.04863433539867401}, {"id": 508, "seek": 391992, "start": 3921.92, "end": 3930.92, "text": " But people believe it's going to be true.", "tokens": [50464, 583, 561, 1697, 309, 311, 516, 281, 312, 2074, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2696641775277945, "compression_ratio": 1.246031746031746, "no_speech_prob": 0.04863433539867401}, {"id": 509, "seek": 391992, "start": 3930.92, "end": 3937.92, "text": " Like you mean it's conjectured that it works even for the classical automobiles.", "tokens": [50914, 1743, 291, 914, 309, 311, 416, 1020, 3831, 300, 309, 1985, 754, 337, 264, 13735, 3553, 996, 4680, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2696641775277945, "compression_ratio": 1.246031746031746, "no_speech_prob": 0.04863433539867401}, {"id": 510, "seek": 391992, "start": 3937.92, "end": 3938.92, "text": " Yes.", "tokens": [51264, 1079, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2696641775277945, "compression_ratio": 1.246031746031746, "no_speech_prob": 0.04863433539867401}, {"id": 511, "seek": 391992, "start": 3938.92, "end": 3939.92, "text": " Yeah, right.", "tokens": [51314, 865, 11, 558, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2696641775277945, "compression_ratio": 1.246031746031746, "no_speech_prob": 0.04863433539867401}, {"id": 512, "seek": 393992, "start": 3939.92, "end": 3952.92, "text": " But for the classical, it is not clear whether two-dimensional, two-dimensional, three-dimensional, five-dimensional, about one-thousand.", "tokens": [50364, 583, 337, 264, 13735, 11, 309, 307, 406, 1850, 1968, 732, 12, 18759, 11, 732, 12, 18759, 11, 1045, 12, 18759, 11, 1732, 12, 18759, 11, 466, 472, 12, 392, 563, 474, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3282068063924601, "compression_ratio": 1.8022598870056497, "no_speech_prob": 0.05844280496239662}, {"id": 513, "seek": 393992, "start": 3952.92, "end": 3960.92, "text": " Yeah, well, if the classical conjecture was true, then it's not that interesting for the quantum place.", "tokens": [51014, 865, 11, 731, 11, 498, 264, 13735, 416, 1020, 540, 390, 2074, 11, 550, 309, 311, 406, 300, 1880, 337, 264, 13018, 1081, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3282068063924601, "compression_ratio": 1.8022598870056497, "no_speech_prob": 0.05844280496239662}, {"id": 514, "seek": 393992, "start": 3960.92, "end": 3963.92, "text": " But if it was not true, then maybe it is.", "tokens": [51414, 583, 498, 309, 390, 406, 2074, 11, 550, 1310, 309, 307, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3282068063924601, "compression_ratio": 1.8022598870056497, "no_speech_prob": 0.05844280496239662}, {"id": 515, "seek": 393992, "start": 3963.92, "end": 3964.92, "text": " Yeah.", "tokens": [51564, 865, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3282068063924601, "compression_ratio": 1.8022598870056497, "no_speech_prob": 0.05844280496239662}, {"id": 516, "seek": 393992, "start": 3964.92, "end": 3968.92, "text": " Yeah, that's a good question.", "tokens": [51614, 865, 11, 300, 311, 257, 665, 1168, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3282068063924601, "compression_ratio": 1.8022598870056497, "no_speech_prob": 0.05844280496239662}, {"id": 517, "seek": 396892, "start": 3968.92, "end": 3979.92, "text": " Not any other.", "tokens": [50364, 1726, 604, 661, 13, 50914], "temperature": 0.0, "avg_logprob": -0.19758683159237816, "compression_ratio": 1.3860759493670887, "no_speech_prob": 0.04233979061245918}, {"id": 518, "seek": 396892, "start": 3979.92, "end": 3985.92, "text": " So can you explain where this undiscibility comes from?", "tokens": [50914, 407, 393, 291, 2903, 689, 341, 674, 271, 537, 39802, 1487, 490, 30, 51214], "temperature": 0.0, "avg_logprob": -0.19758683159237816, "compression_ratio": 1.3860759493670887, "no_speech_prob": 0.04233979061245918}, {"id": 519, "seek": 396892, "start": 3985.92, "end": 3987.92, "text": " Why it is not decidable?", "tokens": [51214, 1545, 309, 307, 406, 21937, 712, 30, 51314], "temperature": 0.0, "avg_logprob": -0.19758683159237816, "compression_ratio": 1.3860759493670887, "no_speech_prob": 0.04233979061245918}, {"id": 520, "seek": 396892, "start": 3987.92, "end": 3991.92, "text": " Because in the classical case, you just check all the bijections.", "tokens": [51314, 1436, 294, 264, 13735, 1389, 11, 291, 445, 1520, 439, 264, 3228, 1020, 626, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19758683159237816, "compression_ratio": 1.3860759493670887, "no_speech_prob": 0.04233979061245918}, {"id": 521, "seek": 396892, "start": 3991.92, "end": 3997.92, "text": " But why here there is problem that there is no algorithm?", "tokens": [51514, 583, 983, 510, 456, 307, 1154, 300, 456, 307, 572, 9284, 30, 51814], "temperature": 0.0, "avg_logprob": -0.19758683159237816, "compression_ratio": 1.3860759493670887, "no_speech_prob": 0.04233979061245918}, {"id": 522, "seek": 399792, "start": 3997.92, "end": 4002.92, "text": " Yeah, I don't know the problem.", "tokens": [50364, 865, 11, 286, 500, 380, 458, 264, 1154, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2333741457957142, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.04491980001330376}, {"id": 523, "seek": 399792, "start": 4002.92, "end": 4010.92, "text": " But you must check, I mean, it should be the problem that you have to check infinitely many possibilities.", "tokens": [50614, 583, 291, 1633, 1520, 11, 286, 914, 11, 309, 820, 312, 264, 1154, 300, 291, 362, 281, 1520, 36227, 867, 12178, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2333741457957142, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.04491980001330376}, {"id": 524, "seek": 399792, "start": 4010.92, "end": 4014.92, "text": " Otherwise stupid algorithms would exist.", "tokens": [51014, 10328, 6631, 14642, 576, 2514, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2333741457957142, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.04491980001330376}, {"id": 525, "seek": 399792, "start": 4014.92, "end": 4020.92, "text": " Yep.", "tokens": [51214, 7010, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2333741457957142, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.04491980001330376}, {"id": 526, "seek": 399792, "start": 4020.92, "end": 4021.92, "text": " What?", "tokens": [51514, 708, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2333741457957142, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.04491980001330376}, {"id": 527, "seek": 402192, "start": 4021.92, "end": 4030.92, "text": " So if there's nothing further, then maybe let's thank our speaker again.", "tokens": [50364, 407, 498, 456, 311, 1825, 3052, 11, 550, 1310, 718, 311, 1309, 527, 8145, 797, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2127617120742798, "compression_ratio": 0.9863013698630136, "no_speech_prob": 0.022889522835612297}, {"id": 528, "seek": 403092, "start": 4030.92, "end": 4036.92, "text": " And next week, we will have somebody.", "tokens": [50364, 400, 958, 1243, 11, 321, 486, 362, 2618, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3299821899050758, "compression_ratio": 0.96875, "no_speech_prob": 0.29370367527008057}, {"id": 529, "seek": 403092, "start": 4036.92, "end": 4038.92, "text": " I hope you will join us.", "tokens": [50664, 286, 1454, 291, 486, 3917, 505, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3299821899050758, "compression_ratio": 0.96875, "no_speech_prob": 0.29370367527008057}], "language": "en"}