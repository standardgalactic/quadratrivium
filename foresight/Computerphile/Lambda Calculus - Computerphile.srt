1
00:00:00,000 --> 00:00:03,840
Today we're going to talk about one of my favourite topics in computer science,

2
00:00:03,840 --> 00:00:08,560
which is the lambda calculus, and in particular we're going to talk about three things.

3
00:00:08,560 --> 00:00:15,440
We're going to think what actually is it, why is it useful, and where did it actually come from.

4
00:00:15,440 --> 00:00:20,240
So we're going to start with the last question here, where did it actually come from?

5
00:00:20,240 --> 00:00:30,320
This is Alonzo Church, who was a mathematician at Princeton University in the United States,

6
00:00:30,880 --> 00:00:37,120
and he was the person who invented the lambda calculus, and what he was interested in is

7
00:00:37,120 --> 00:00:42,560
what is the notion of a function from a computational perspective? And his answer

8
00:00:42,560 --> 00:00:48,480
to this question is what we now know as the lambda calculus. And there's an interesting piece of

9
00:00:48,480 --> 00:00:53,920
history here, which many people don't know, so it turns out that Alonzo Church was the PhD

10
00:00:53,920 --> 00:00:59,440
supervisor of someone very famous in computer science, Alan Turing. And of course Alan Turing,

11
00:00:59,440 --> 00:01:04,880
amongst many other things which he did, he invented Turing machines, which Computerphile has done a

12
00:01:04,880 --> 00:01:11,040
number of videos on, and Turing machines capture a basic state-based model of computation. And

13
00:01:11,040 --> 00:01:16,400
it's interesting that his PhD supervisor, Alonzo Church, he captured a basic functional notion

14
00:01:16,400 --> 00:01:22,480
of computation with his lambda calculus. And it turns out that these two quite different notions,

15
00:01:22,480 --> 00:01:27,680
one functional and one state-based, turn out to be equivalent. And this is what's called the Church

16
00:01:27,680 --> 00:01:33,440
Turing Hypothesis, or part of the Church Turing Hypothesis. So for Church, a function was a black

17
00:01:33,440 --> 00:01:39,040
box that you're not allowed to look inside, and what it does is it takes some input, so maybe it

18
00:01:39,040 --> 00:01:45,440
takes a number like x, and it's going to process it in some way, and it's going to produce an output.

19
00:01:45,440 --> 00:01:52,320
So maybe it produces the output x plus one. So this would be a function that takes a single input,

20
00:01:52,320 --> 00:01:58,400
a number called x, processes it in some way, and then produces a single output, which is the number

21
00:01:58,400 --> 00:02:03,600
x plus one. Then we could have a slightly more interesting example. Maybe we have a box with

22
00:02:03,600 --> 00:02:11,520
two inputs, x and y, and we process them in some way, and maybe we produce their sum as the output.

23
00:02:11,520 --> 00:02:16,640
So this would be a function which takes two inputs, x and y, processes them in some way,

24
00:02:16,640 --> 00:02:23,040
and then produces their sum x plus y. And there's two important things about functions in this sense.

25
00:02:23,040 --> 00:02:27,440
The first is that they're black boxes. You're not allowed to look inside them. You can't see

26
00:02:27,440 --> 00:02:31,360
the mechanics of what's going on inside this box. All you can do is put something in and

27
00:02:31,360 --> 00:02:35,840
observe what comes out the other side. And the second important thing is that these functions

28
00:02:35,840 --> 00:02:42,240
are pure. They have no internal state. So all that happens when you map x across to x plus one

29
00:02:42,240 --> 00:02:47,280
is the magic goes on inside the box, and there's no internal state. There's no hidden information

30
00:02:47,280 --> 00:02:52,000
that we can use. And this is quite different from the notion of computation that Alan Turing was

31
00:02:52,000 --> 00:02:56,880
interested in with his Turing machines. He had internal state. There's no internal state. These

32
00:02:56,880 --> 00:03:03,200
are pure mathematical functions. Now we can think how do you actually define functions in the lambda

33
00:03:03,200 --> 00:03:08,320
calculus? And there's a very, very simple syntax for this which I'll introduce to you now. So let's

34
00:03:08,320 --> 00:03:12,960
think about the increment function in the lambda calculus. What you do is you write down a lambda

35
00:03:12,960 --> 00:03:17,840
symbol. So this is the Greek lowercase letter lambda. And that says we're introducing a function at this

36
00:03:17,840 --> 00:03:23,440
point. And then you just write down the name of the input. So that was x. And then you have a dot.

37
00:03:23,440 --> 00:03:29,760
And then you say how the output is calculated in terms of the input. So that's x plus one. So

38
00:03:29,760 --> 00:03:35,760
we could do the same with addition. You just need two lambdas. You write lambda x dot lambda y

39
00:03:35,760 --> 00:03:42,960
dot x plus y. So this is the function that takes two inputs, x and y, and then delivers the result

40
00:03:42,960 --> 00:03:48,880
x plus y. And this is written down formally in Church's lambda calculus exactly like this. So

41
00:03:48,880 --> 00:03:54,240
when you've got a function, what can you do with it? Well, all you can do is give it some input,

42
00:03:54,240 --> 00:03:58,960
let it do its thing, and it will give you some output. So let's have a simple example of this.

43
00:03:58,960 --> 00:04:05,840
If we take a function like increment, which was lambda x, x plus one, and we apply it to a number

44
00:04:05,840 --> 00:04:12,000
like five, what actually happens? It's a basic process of substitution. We're essentially substituting

45
00:04:12,000 --> 00:04:18,800
the number five here into the body of this lambda expression. And then x becomes five. So we get five

46
00:04:18,800 --> 00:04:23,120
plus one. And then we get the result six on the other side. And this is basically all there is

47
00:04:23,120 --> 00:04:28,800
to the lambda calculus. It's only got three things. It's got variables like x, y and z. It's got a

48
00:04:28,800 --> 00:04:34,160
way of building functions, this lambda notation, and it's got a way of applying functions. This is

49
00:04:34,160 --> 00:04:38,880
the only three things that you have in this setting. What is actually the point of the

50
00:04:38,880 --> 00:04:42,800
lambda calculus? We've introduced this very simple notation. Why should you be interested

51
00:04:42,800 --> 00:04:47,120
in learning about it? I think there's three answers which I would give to this. The first

52
00:04:47,120 --> 00:04:52,480
point I'd make is that the lambda calculus can encode any computation. If you write a program

53
00:04:52,480 --> 00:04:57,360
in any programming language, which has ever been invented or ever will be invented or really any

54
00:04:57,360 --> 00:05:02,000
sequential programming language, it can in some way be encoded in the lambda calculus. And of

55
00:05:02,000 --> 00:05:06,720
course it may be extremely inefficient when you do that, but that's not the point. This is a basic

56
00:05:06,720 --> 00:05:11,680
idea of computation and we want to think how many, what kind of programs can we encode in this?

57
00:05:11,680 --> 00:05:16,320
And actually you can encode anything. And this is really the kind of church-turing hypothesis

58
00:05:16,320 --> 00:05:22,800
which I mentioned. Alan Turing, you can code anything in his Turing machines and in churches

59
00:05:22,800 --> 00:05:26,800
lambda calculus you can encode anything. And actually these two systems are formally equivalent.

60
00:05:26,800 --> 00:05:31,520
Any Turing machine program can be translated into equivalent lambda calculus program and vice

61
00:05:31,520 --> 00:05:36,960
versa. They're formally equivalent. The second point I would make is that lambda calculus can

62
00:05:36,960 --> 00:05:41,440
also be regarded as the basis for functional programming languages like Haskell. So these

63
00:05:41,440 --> 00:05:46,720
are becoming increasingly popular these days and actually a very sophisticated language like Haskell

64
00:05:46,720 --> 00:05:52,320
is compiled down to a very small core language which is essentially a glorified form of lambda

65
00:05:52,320 --> 00:05:56,480
calculus. So if you're interested in functional programming names like Haskell or the ML family,

66
00:05:56,480 --> 00:06:00,800
these are all fundamentally based on the lambda calculus. It's just kind of a glorified syntax

67
00:06:00,800 --> 00:06:06,800
on top of that. The third point which I would make is that the lambda calculus is actually now

68
00:06:06,800 --> 00:06:12,240
present in most major programming languages. So this wasn't the case 10 or 15 years ago,

69
00:06:12,240 --> 00:06:17,440
but it is the case today. So if you look at languages like Java, like C-sharp, even Visual

70
00:06:17,440 --> 00:06:23,520
Basic, F-sharp and so on, all of these languages now encode lambda calculus or include lambda

71
00:06:23,520 --> 00:06:28,960
calculus as a fundamental component. So every computer scientist today needs to know about

72
00:06:28,960 --> 00:06:34,720
lambda calculus. What I'd like to end up with is a couple of little examples of what you can do

73
00:06:34,720 --> 00:06:39,120
with it. So the lambda calculus has basically got nothing in it. It's got variables, it's got a way

74
00:06:39,120 --> 00:06:43,680
of building functions and it's got a way of applying functions. It doesn't have any built-in data types

75
00:06:43,680 --> 00:06:48,400
like numbers or logical values, recursion and things like that. So if you want to do these

76
00:06:48,400 --> 00:06:53,280
things in the lambda calculus, you need to encode them. So I'll end up showing you a simple

77
00:06:53,280 --> 00:06:58,240
encoding. And the encoding which I'm going to show you is the logical values, true and false.

78
00:06:59,040 --> 00:07:04,400
And the key to this is to think, what do you do with logical values in a programming language?

79
00:07:04,400 --> 00:07:09,600
And the basic observation is that you use them to make a choice between doing two things. You say,

80
00:07:09,600 --> 00:07:15,200
if something is true, do one thing. If something is false, do another thing. And we're going to use

81
00:07:15,200 --> 00:07:21,520
this idea of making a choice between two things to actually encode true and false. So the trick is

82
00:07:21,520 --> 00:07:28,320
for true, you write down this lambda expression. So what it does is it takes two things x and y

83
00:07:28,320 --> 00:07:33,200
and then it chooses the first. And false does the opposite. It's going to take two things

84
00:07:33,200 --> 00:07:38,000
and it's going to choose the second. So we've got two lambda expressions here, both of which take

85
00:07:38,000 --> 00:07:44,800
two inputs x and y, and one chooses the first one x and one chooses the second one y. So fair

86
00:07:44,800 --> 00:07:49,680
enough, what can we actually do with this? Well, let's think how we could define a little

87
00:07:49,680 --> 00:07:54,240
logical operator. So not is the most simple logical operator, which I could think of. It's

88
00:07:54,240 --> 00:08:00,320
going to flip true to false and false to true. It's logical negation. Based upon this encoding,

89
00:08:00,320 --> 00:08:05,440
how could I actually define the not operator or the not function? Well, it's very easy to do.

90
00:08:06,000 --> 00:08:11,040
I will take in a logical value or a Boolean, as it's normally called in computer science,

91
00:08:11,040 --> 00:08:16,480
after George Boo who first studied kind of formal logic. So we take a Boolean, which will be one

92
00:08:16,480 --> 00:08:22,960
of true or false. And here's what we do. We apply it to false and we apply it to true. And I claim

93
00:08:22,960 --> 00:08:28,400
that this is a valid definition for a not function. But I can very easily convince you that it's the

94
00:08:28,400 --> 00:08:34,400
case because I can do a little calculation. So let's check if we apply not to true that we actually

95
00:08:34,400 --> 00:08:38,800
get false. And just a few steps using the lambda calculus magic, we'll find that this actually

96
00:08:38,800 --> 00:08:43,840
works out. So what can we do here? Well, the only thing we can do is start to expand definitions.

97
00:08:43,840 --> 00:08:50,320
So we know what the definition of not is. It was lambda b, b applied to false and true,

98
00:08:50,320 --> 00:08:54,960
and then we just copy down the true. So all I've done in the first step here is I've expanded

99
00:08:54,960 --> 00:09:00,000
my definition of not. Not was defined to be this lambda calculus expression here. Now I've got a

100
00:09:00,000 --> 00:09:05,600
function, which is this thing, and it's applied to an input. So I can just apply it. Okay. And the

101
00:09:05,600 --> 00:09:10,960
function says if I take in a b, I just apply that b to false and true. So the thing I'm applying it to

102
00:09:10,960 --> 00:09:16,960
is true here. So I just do the little substitution, rather than b, I write true, and then I copy down

103
00:09:16,960 --> 00:09:21,360
the false and copy down the true, and I get down to here. And at this point, you might quite rightly

104
00:09:21,360 --> 00:09:24,800
be thinking this looks like complete rubbish. I mean, I've just written true, false, true. What

105
00:09:24,800 --> 00:09:28,240
does that mean? It means absolutely nothing. But it means something in the lambda calculus because

106
00:09:28,240 --> 00:09:34,800
we continue to expand. So what we can do now is expand the definition of true. We said that true

107
00:09:34,800 --> 00:09:42,080
takes two things and chooses the first one. So let's expand it out. So true is lambda x, lambda y,

108
00:09:42,080 --> 00:09:47,120
x. So it chooses the first thing of two things. And then we just copy down the two inputs, false

109
00:09:47,120 --> 00:09:51,040
and true. And you can see what's going to happen now. We've got a function here, which takes two

110
00:09:51,040 --> 00:09:55,840
things and chooses the first thing. Here, the first thing is false. So when we apply the function,

111
00:09:55,840 --> 00:10:01,680
we just get back false. So what you see has happened here. In just a few steps, we've shown how using

112
00:10:01,680 --> 00:10:07,120
this encoding of true and false and not, we can actually get the desired behavior. And it's very

113
00:10:07,120 --> 00:10:13,760
easy to check for yourself. If you apply not to false, you'll get true. And I'd like to set your

114
00:10:13,760 --> 00:10:19,600
little kind of puzzle at this point. Think how you could define logical and or logical or in this

115
00:10:19,600 --> 00:10:24,000
style as well. Okay, and I'm interested to see what kind of definitions people come up with in the

116
00:10:24,000 --> 00:10:32,080
comments. So the very last thing I'd like to show you is this lambda expression here, which is a

117
00:10:32,080 --> 00:10:38,240
very famous lambda calculus expression called the y combinator or the y operator. And actually,

118
00:10:38,240 --> 00:10:43,280
this is the key to doing recursion in the lambda calculus. So as I mentioned, lambda calculus

119
00:10:43,280 --> 00:10:48,240
has basically nothing in it, or it's only got three things in it, variables x, y and z, and so on,

120
00:10:48,240 --> 00:10:53,120
a way of building functions and a way of applying functions. It's got no other control structures,

121
00:10:53,120 --> 00:10:58,400
no other data types, no anything. So if you want to do recursion, which is the basic mechanism for

122
00:10:58,400 --> 00:11:03,200
defining things in terms of themselves, again, computer files had videos on this, you need to

123
00:11:03,200 --> 00:11:08,400
encode it. It turns out that this expression here is the key to encoding recursion in the lambda

124
00:11:08,400 --> 00:11:12,880
calculus. And this expression was invented by someone called Haskell Curry. And this is the

125
00:11:12,880 --> 00:11:17,600
Haskell that gives his name to the Haskell programming language. And he was a PhD student

126
00:11:17,600 --> 00:11:23,120
of David Hilbert, who's a very famous mathematician. The last observation I'd like to leave you with

127
00:11:23,120 --> 00:11:28,480
here is something that's interested me for many years. I think there's a connection between this

128
00:11:28,480 --> 00:11:33,920
piece of kind of abstract computer science or abstract mathematics and biology. If you look at

129
00:11:33,920 --> 00:11:39,440
human DNA, you have this double helix structure. You have two copies of the same thing side by

130
00:11:39,440 --> 00:11:45,040
side. And this is the key to allowing DNA to self replicate. If you look at the structure of this

131
00:11:45,040 --> 00:11:51,360
lambda expression here, you have two copies of the same thing side by side. You have lambda x f

132
00:11:51,360 --> 00:11:56,400
applied to xx and exactly the same here. And this is the key to doing recursion, which is kind of

133
00:11:56,400 --> 00:12:02,560
related to self replication in a programming language or in the lambda calculus. And for me,

134
00:12:02,560 --> 00:12:06,640
I don't think this is a coincidence. I think it's a kind of interesting philosophical observation.

135
00:12:06,640 --> 00:12:12,320
The lambda calculus has this kind of very clever way of doing recursion, which would take a video

136
00:12:12,320 --> 00:12:17,520
on its own to explain how it actually works. But you can look it up on Wikipedia. And there's a link

137
00:12:17,520 --> 00:12:26,080
here, I think, to biology. Somebody actually found the Y Combinator so interesting that they've had

138
00:12:26,080 --> 00:12:30,320
it tattooed permanently on their arm. And you can find the picture of this if you do a quick web search.

139
00:12:31,760 --> 00:12:37,040
What would people search for the Y Combinator? The Y Combinator in mathematics or computer science.

140
00:12:37,040 --> 00:12:38,240
And tattoo, I'm guessing.

