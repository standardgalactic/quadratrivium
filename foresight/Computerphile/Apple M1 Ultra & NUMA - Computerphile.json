{"text": " Last week, I think it was maybe the week before Apple had one of their usual press conferences and they announced their latest Possibly last version of the M1 chip, which was the M1 Ultra And one of the things that they said as they launched it was that they designed it using two M1 Max chips Basically stuck together using something called Ultra Fusion to join them together. Now, Ultra Fusion is just a marketing buzzword Literally all they've got is a high-speed interconnect between the two silicon dyes to transfer data between them But one of the things that they said which was interesting is that the reason they've done this Was so that you didn't have to write the software in a different way And I thought it was interesting just to pick up on that and to explain Why if they hadn't made that interconnect fast enough You would have to write the software in a different way because if you think about it All they seem to be doing is adding more cores to the CPU making it a 20-core CPU instead of a 10-core CPU And you think well if it's a multiprocessor system And if you watch the videos we've done previously on multiprocessor systems You're going to have to write the software to split the tasks up over the multiple cores to run So why are you not going to have to write things differently with this architecture of chip? So I thought we'd have a look at that today So to understand what Apple's done, we need to go back to basics and think about how a computer Actually works and we'll go with the von Neumann model I know technically most modern CPUs are modified Harvard architecture But the von Neumann model is good for what we want to look at. We have at the center of our system the CPU Whatever we want and that is then connected To some memory and I'm just going to write RAM here So it fits into the box Of course some of it would be ROM and other things and then the other thing that we have in there is we have the IO And things and that's basically the model we use for a computer We've got the CPU talking to the RAM where the instructions and data are stored and you can talk to the IO to talk to the rest of the world So that's things like your Disk controllers with a solid-state hard disk your graphics card your network card now what happens? When we have a multi-processor system the general way that we build multi-processor systems Certainly the ones that we use in laptops or using desktop computers is using what's called a shared memory model So just as before with the von Neumann architecture We're going to have a single block of RAM and that's going to be connected Not to one CPU now But we'll give it to CPUs. So we've got two CPUs that it's connected to so it's connected to a shared bus between them and then each of those CPUs are Connected to it now effectively. That's how you build a multi-processor system. There's a bit more Involved for example, you need some sort of logic here for bus Arbitrations will call that the ball the bus arbitration logic So you need something to sort of control well, which CPU can talk to the RAM at any one point now One thing I need to say here is that I've drawn this is the CPU talking directly to the RAM If you think about it, if you watch the video I did many years ago on CPU caches You need to have a cache here because otherwise Only one CPU can ever talk to RAM at the same time If there's no cache this CPU tries to talk to RAM this one can't If that's this CPU tries to talk to RAM that one can't at the same time It would effectively Result in serializing the operation so you wouldn't get any speed up. You need a cache in there and that Sort of leads us to the first part of the problem only one CPU can access the RAM at any one point Now if we've got a cache in our system and I'm going to draw that as a red line Which sits between the CPU and between the RAM? That's not a problem because as a CPU accesses data It stores a local copy in its cache So when it needs to try and fetch that data or those instructions again it can fetch them from the cache and not access the RAM So that's absolutely fine Most of the time we want to get it so the CPUs are satisfying their data and instruction fetches from the cache And then only occasionally they go to the RAM So that actually whenever one of the CPU goes to the RAM needs to go to the main memory to fetch a value Then effectively It's unlikely to be being used by the occasion that you'll get the situation where they both try and access a value main memory at The same time at which point that's why you have the bus arbitration logic to say this CPU is going to fetch the value Then that CPU is going to fetch the value So we can build a shared memory multiprocessor system like that I'm going to say relatively straightforwardly. There's a lot involved, but That's the basic idea of what's going on and we can extend that to have more CPUs So we can just add another CPU in Up here so we could have a three CPU system Normally you'd probably go up to four and things but I've run out of paper It's got its cache as well and you could extend that for as many CPUs as you like except There was a slight issue we said that There are occasions where one CPU might be trying to access the memory at the same time as another CPU Hopefully we can build the cache system We can load more data than we need each time we fetch things and so on we can build an intelligent memory system that can Satisfy this so that the probability of that happening is relatively low But if we think about it if we add more and more CPUs onto the same shared memory bus Then we're going to end up with more chance Of a collision happening of two CPUs trying to access memory at the same time And the caches on each CPU mitigate that to some effect so that they reduce the probability Of two things trying to access at a time But a bit like the old birthday problem, you know the sort of question you ask If you've got a class of school children What is the probability that two of them share a birthday in there? Turns out it's quite likely once you get a bit of about 20 or so children in the class The same thing applies here as you increase more CPUs the chance that two of them will try and access memory at the same time increases As you add more CPUs and so this will scale Scale, but it'll only scale up to a point once you get past a certain number of CPUs You will find that you're back to the point where actually more It's more likely than not that two of them will be trying to access memory at the same time So we can scale this up to a certain number of CPUs So does that form a limit? Is there a limit on how many CPUs we can have working together in the multiprocessor system? Well, not as such because there's another way We can design a multiprocessor system So this is what's known as a uniform memory access system And the reason it's known is that is that for any location in RAM Any of these CPUs can access it With the same sort of speed so it doesn't matter whether it's coming from CPU one up here or CPU three down here It'll take the same amount of time for them to access the value In that memory location Different memory locations may have different speeds your ROM might be slower than the RAM You may have things mapped in there which are slower still and so on But for any particular memory location each CPU can access it in the same time or within the same nanosecond ballpark So it makes no difference in reality as we said that will scale up to a certain number of CPUs But if we want to take it to beyond that Then we need to change that system. We need to build a system that no longer has Uniform memory access rather than from a memory location each CPU being able to access at the same speed For each memory location the speed it takes to access it or how long it takes for it to access the data value there Depends on which CPU core is trying to access it. So it might be that for one CPU core it takes I don't know let's say 100 nanoseconds just picking a time off the top of my head But for another CPU core it takes 200 nanoseconds They're just ballpark times and not all the magnitudes are just sort of show there's a difference Between the two. Okay, let's have a look at how we build a system like that. So what we're talking about is what's referred to as a non Uniform memory access system. So non uniform memory access system or Numa For short. So how does that differ? Well, let's think about it. It starts off in the same way. We have a block of ram I'm going to turn the diagram around Ram like that and that is connected To our CPUs just as before I'm missing out the caches and the arbitration logic from this diagram just for simplicity So this looks relatively similar to what we had before we've got a some ram and some CPU cores Sharing access to it. No difference there with a Numa system though. We also have some other ram That's part of our system connected to a different set of CPU cores Over here now at this point you've got effectively two computer systems. These CPUs can access this RAM These CPUs can access this RAM The difference in the Numa system is that there is actually a link between the two Systems here and you've got a distributed Shared memory system think of it like a sort of network, but it's often done at The CPU level and things even within on some between cores Now what this means is as far as the program's running there is one block of memory There is so this is if this was 16 gig And this was 16 gig the programs would see 32 gigabytes. They're not separate blocks of memory They they're seen by the programs as one block of memory But the difference is is if we've got a program running on this CPU over here It's got direct access to this block of memory here So let's say it takes I don't let's say it takes 100 nanoseconds again to access memory So we've got 100 nanoseconds to access memory if he wants to access memory in here It will take 100 nanoseconds to access that memory value But if the data it's trying to access is over in this memory over here A CPU over here could access it in 100 nanoseconds But for this CPU over here a CPU over here It's got to go over this distributed shared memory connection From this set of RAM and this set of CPUs to this set of RAM and this set of CPU cores over here And that would take A significant amount of time. I mean it would take 100 nanoseconds over here To get from here to here So to get from here to here plus this Let's say this is 200 nanoseconds. I'm just making a number up over here. It's a longer amount of time I'm making these numbers off of the top of my head So don't take them as any sort of things other than so it's longer to go from here over here So we'd have to go over here across the distributed shared memory link To get the value and then we could bring the value back So rather than taking 100 nanoseconds it would take in the order of 300 nanoseconds It would take a significantly longer amount of time. So if we build a computer system like this We have the situation where Depending where an instruction is in memory or where data is in memory It could either access it very very quickly on this CPU core if it can go directly to the RAM that it's directly connected to Or it would end up taking a long time This relatively to access it because it would have to go over the shared link And fetch it from the other block of RAM over there It would still appear to be the same memory system But we've now got the situation where the access to it depends On which cpu is trying to access it. So we have what's called a non uniform memory access system Now originally non uniform memory access systems were the sort of Domain of high-end cluster system and sort of sgi type workstations and things but these days You've actually seen it drop down on to sort of workstation type machines Some of the amd thread ripper some of the higher end intel clusters are all Numer based systems and what this means is if you want to run that cpu at the fastest possible speed You need to write your software to take into account Which cpus have fast access to which bits of ram So that you can put the data that those cpus are processing and you can put the instructions that they're running In that block of memory and have the cpu date the cpu instructions and the data that's being executed on these cpus In this block of memory over here So they can all access it very very quickly and you only have a very small amount of data Which is needed to synchronize things and keep things working passing over the shared memory network Now you can do it and it works great But you have to write your software knowing where things are and in fact if you look You can find papers and presentations from companies like netflix Where they're really trying to optimize the performance of their service to serve the videos to you I'm sure youtube's doing the same as well, but netflix have actually written about it Really optimized the speed of serving the videos to you So they actually have to take into all this account so that the network card is connected to one cpu gets that data and doesn't have to go and pass it over the shared memory link to another one which then passes it over to another one to fetch the data from a Hard disk and so on and feed it back to you and you get everything's passing over the slow link all the time You really have to take into account where things are Which brings us back to apple's marketing buzzword of m1 ultrafusion What have apple done with m1 ultrafusion? Well, effectively they have built a system like this. They've taken two m1 max chips And glued them together. So you've got two 10 core m1 max chips Each hacks to sing their own blocks of memory or two blocks each Which is why you can get up to 128 gig on there because you double the amount of cpu cause you can double the amount of memory That they can access and what they've built in the middle the thing they call ultrafusion It's just a very very fast distributed shared memory link between the two And I think what they've actually done is they've just made it so fast That actually the time it takes to go across from one cpu core to the other to get the value from the ram and Push it back into the cpu is so quick the latency is so low That effectively it behaves as if it was the uniform memory access system It's fast enough that when the cpu requests the data It gets it before it actually needs it in which point it doesn't slow it down So it's a nice system because it means as a programmer. We don't have to worry about where The data is in relation to the cpu cause which one's attached to which Core and things to make things run as fast as possible We can just write our programs and let the operating system and the design of the hardware Sort out the hard problems of executing it as fast as possible Chunks and do them all at the same time So one way for example to make sandwiches faster is that you butter the bread faster You put the filling in faster. You put the bread faster the other person It's also got an analysis of where I went wrong says Fred Brooks Why did he make his name with that and what was it all about?", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.5200000000000005, "text": " Last week, I think it was maybe the week before Apple had one of their usual press conferences and they announced their latest", "tokens": [50364, 5264, 1243, 11, 286, 519, 309, 390, 1310, 264, 1243, 949, 6373, 632, 472, 295, 641, 7713, 1886, 22032, 293, 436, 7548, 641, 6792, 50690], "temperature": 0.0, "avg_logprob": -0.25263267755508423, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.025386516004800797}, {"id": 1, "seek": 0, "start": 6.96, "end": 12.56, "text": " Possibly last version of the M1 chip, which was the M1 Ultra", "tokens": [50712, 33112, 3545, 1036, 3037, 295, 264, 376, 16, 11409, 11, 597, 390, 264, 376, 16, 20925, 50992], "temperature": 0.0, "avg_logprob": -0.25263267755508423, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.025386516004800797}, {"id": 2, "seek": 0, "start": 12.56, "end": 20.0, "text": " And one of the things that they said as they launched it was that they designed it using two M1 Max chips", "tokens": [50992, 400, 472, 295, 264, 721, 300, 436, 848, 382, 436, 8730, 309, 390, 300, 436, 4761, 309, 1228, 732, 376, 16, 7402, 11583, 51364], "temperature": 0.0, "avg_logprob": -0.25263267755508423, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.025386516004800797}, {"id": 3, "seek": 0, "start": 20.52, "end": 27.44, "text": " Basically stuck together using something called Ultra Fusion to join them together. Now, Ultra Fusion is just a marketing buzzword", "tokens": [51390, 8537, 5541, 1214, 1228, 746, 1219, 20925, 36721, 281, 3917, 552, 1214, 13, 823, 11, 20925, 36721, 307, 445, 257, 6370, 13036, 7462, 51736], "temperature": 0.0, "avg_logprob": -0.25263267755508423, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.025386516004800797}, {"id": 4, "seek": 2744, "start": 28.44, "end": 34.4, "text": " Literally all they've got is a high-speed interconnect between the two silicon dyes to transfer data between them", "tokens": [50414, 23768, 439, 436, 600, 658, 307, 257, 1090, 12, 22746, 26253, 1296, 264, 732, 22848, 274, 2346, 281, 5003, 1412, 1296, 552, 50712], "temperature": 0.0, "avg_logprob": -0.19591564791543142, "compression_ratio": 1.8773946360153257, "no_speech_prob": 0.01374627836048603}, {"id": 5, "seek": 2744, "start": 34.4, "end": 38.480000000000004, "text": " But one of the things that they said which was interesting is that the reason they've done this", "tokens": [50712, 583, 472, 295, 264, 721, 300, 436, 848, 597, 390, 1880, 307, 300, 264, 1778, 436, 600, 1096, 341, 50916], "temperature": 0.0, "avg_logprob": -0.19591564791543142, "compression_ratio": 1.8773946360153257, "no_speech_prob": 0.01374627836048603}, {"id": 6, "seek": 2744, "start": 38.92, "end": 42.64, "text": " Was so that you didn't have to write the software in a different way", "tokens": [50938, 3027, 370, 300, 291, 994, 380, 362, 281, 2464, 264, 4722, 294, 257, 819, 636, 51124], "temperature": 0.0, "avg_logprob": -0.19591564791543142, "compression_ratio": 1.8773946360153257, "no_speech_prob": 0.01374627836048603}, {"id": 7, "seek": 2744, "start": 42.64, "end": 45.96, "text": " And I thought it was interesting just to pick up on that and to explain", "tokens": [51124, 400, 286, 1194, 309, 390, 1880, 445, 281, 1888, 493, 322, 300, 293, 281, 2903, 51290], "temperature": 0.0, "avg_logprob": -0.19591564791543142, "compression_ratio": 1.8773946360153257, "no_speech_prob": 0.01374627836048603}, {"id": 8, "seek": 2744, "start": 46.36, "end": 49.64, "text": " Why if they hadn't made that interconnect fast enough", "tokens": [51310, 1545, 498, 436, 8782, 380, 1027, 300, 26253, 2370, 1547, 51474], "temperature": 0.0, "avg_logprob": -0.19591564791543142, "compression_ratio": 1.8773946360153257, "no_speech_prob": 0.01374627836048603}, {"id": 9, "seek": 2744, "start": 49.92, "end": 53.64, "text": " You would have to write the software in a different way because if you think about it", "tokens": [51488, 509, 576, 362, 281, 2464, 264, 4722, 294, 257, 819, 636, 570, 498, 291, 519, 466, 309, 51674], "temperature": 0.0, "avg_logprob": -0.19591564791543142, "compression_ratio": 1.8773946360153257, "no_speech_prob": 0.01374627836048603}, {"id": 10, "seek": 5364, "start": 53.76, "end": 60.44, "text": " All they seem to be doing is adding more cores to the CPU making it a 20-core CPU instead of a 10-core CPU", "tokens": [50370, 1057, 436, 1643, 281, 312, 884, 307, 5127, 544, 24826, 281, 264, 13199, 1455, 309, 257, 945, 12, 12352, 13199, 2602, 295, 257, 1266, 12, 12352, 13199, 50704], "temperature": 0.0, "avg_logprob": -0.1573433835282285, "compression_ratio": 1.7518796992481203, "no_speech_prob": 0.026400260627269745}, {"id": 11, "seek": 5364, "start": 60.44, "end": 63.24, "text": " And you think well if it's a multiprocessor system", "tokens": [50704, 400, 291, 519, 731, 498, 309, 311, 257, 3311, 340, 25432, 1185, 50844], "temperature": 0.0, "avg_logprob": -0.1573433835282285, "compression_ratio": 1.7518796992481203, "no_speech_prob": 0.026400260627269745}, {"id": 12, "seek": 5364, "start": 63.24, "end": 66.8, "text": " And if you watch the videos we've done previously on multiprocessor systems", "tokens": [50844, 400, 498, 291, 1159, 264, 2145, 321, 600, 1096, 8046, 322, 3311, 340, 25432, 3652, 51022], "temperature": 0.0, "avg_logprob": -0.1573433835282285, "compression_ratio": 1.7518796992481203, "no_speech_prob": 0.026400260627269745}, {"id": 13, "seek": 5364, "start": 67.0, "end": 71.48, "text": " You're going to have to write the software to split the tasks up over the multiple cores to run", "tokens": [51032, 509, 434, 516, 281, 362, 281, 2464, 264, 4722, 281, 7472, 264, 9608, 493, 670, 264, 3866, 24826, 281, 1190, 51256], "temperature": 0.0, "avg_logprob": -0.1573433835282285, "compression_ratio": 1.7518796992481203, "no_speech_prob": 0.026400260627269745}, {"id": 14, "seek": 5364, "start": 71.6, "end": 77.52, "text": " So why are you not going to have to write things differently with this architecture of chip?", "tokens": [51262, 407, 983, 366, 291, 406, 516, 281, 362, 281, 2464, 721, 7614, 365, 341, 9482, 295, 11409, 30, 51558], "temperature": 0.0, "avg_logprob": -0.1573433835282285, "compression_ratio": 1.7518796992481203, "no_speech_prob": 0.026400260627269745}, {"id": 15, "seek": 5364, "start": 77.52, "end": 79.52, "text": " So I thought we'd have a look at that today", "tokens": [51558, 407, 286, 1194, 321, 1116, 362, 257, 574, 412, 300, 965, 51658], "temperature": 0.0, "avg_logprob": -0.1573433835282285, "compression_ratio": 1.7518796992481203, "no_speech_prob": 0.026400260627269745}, {"id": 16, "seek": 7952, "start": 79.83999999999999, "end": 87.19999999999999, "text": " So to understand what Apple's done, we need to go back to basics and think about how a computer", "tokens": [50380, 407, 281, 1223, 437, 6373, 311, 1096, 11, 321, 643, 281, 352, 646, 281, 14688, 293, 519, 466, 577, 257, 3820, 50748], "temperature": 0.0, "avg_logprob": -0.27748047037327545, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0017903376137837768}, {"id": 17, "seek": 7952, "start": 87.72, "end": 89.96, "text": " Actually works and we'll go with the von Neumann model", "tokens": [50774, 5135, 1985, 293, 321, 603, 352, 365, 264, 2957, 1734, 449, 969, 2316, 50886], "temperature": 0.0, "avg_logprob": -0.27748047037327545, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0017903376137837768}, {"id": 18, "seek": 7952, "start": 89.96, "end": 93.88, "text": " I know technically most modern CPUs are modified Harvard architecture", "tokens": [50886, 286, 458, 12120, 881, 4363, 13199, 82, 366, 15873, 13378, 9482, 51082], "temperature": 0.0, "avg_logprob": -0.27748047037327545, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0017903376137837768}, {"id": 19, "seek": 7952, "start": 93.88, "end": 98.75999999999999, "text": " But the von Neumann model is good for what we want to look at. We have at the center of our system", "tokens": [51082, 583, 264, 2957, 1734, 449, 969, 2316, 307, 665, 337, 437, 321, 528, 281, 574, 412, 13, 492, 362, 412, 264, 3056, 295, 527, 1185, 51326], "temperature": 0.0, "avg_logprob": -0.27748047037327545, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0017903376137837768}, {"id": 20, "seek": 7952, "start": 99.12, "end": 100.8, "text": " the CPU", "tokens": [51344, 264, 13199, 51428], "temperature": 0.0, "avg_logprob": -0.27748047037327545, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0017903376137837768}, {"id": 21, "seek": 7952, "start": 100.8, "end": 103.84, "text": " Whatever we want and that is then connected", "tokens": [51428, 8541, 321, 528, 293, 300, 307, 550, 4582, 51580], "temperature": 0.0, "avg_logprob": -0.27748047037327545, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0017903376137837768}, {"id": 22, "seek": 10384, "start": 104.72, "end": 109.04, "text": " To some memory and I'm just going to write RAM here", "tokens": [50408, 1407, 512, 4675, 293, 286, 478, 445, 516, 281, 2464, 14561, 510, 50624], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 23, "seek": 10384, "start": 109.04, "end": 110.2, "text": " So it fits into the box", "tokens": [50624, 407, 309, 9001, 666, 264, 2424, 50682], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 24, "seek": 10384, "start": 110.2, "end": 115.88000000000001, "text": " Of course some of it would be ROM and other things and then the other thing that we have in there is we have the IO", "tokens": [50682, 2720, 1164, 512, 295, 309, 576, 312, 41678, 293, 661, 721, 293, 550, 264, 661, 551, 300, 321, 362, 294, 456, 307, 321, 362, 264, 39839, 50966], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 25, "seek": 10384, "start": 116.4, "end": 121.0, "text": " And things and that's basically the model we use for a computer", "tokens": [50992, 400, 721, 293, 300, 311, 1936, 264, 2316, 321, 764, 337, 257, 3820, 51222], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 26, "seek": 10384, "start": 121.0, "end": 127.36, "text": " We've got the CPU talking to the RAM where the instructions and data are stored and you can talk to the IO to talk to the rest of the world", "tokens": [51222, 492, 600, 658, 264, 13199, 1417, 281, 264, 14561, 689, 264, 9415, 293, 1412, 366, 12187, 293, 291, 393, 751, 281, 264, 39839, 281, 751, 281, 264, 1472, 295, 264, 1002, 51540], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 27, "seek": 10384, "start": 127.36, "end": 128.56, "text": " So that's things like your", "tokens": [51540, 407, 300, 311, 721, 411, 428, 51600], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 28, "seek": 10384, "start": 128.56, "end": 133.48000000000002, "text": " Disk controllers with a solid-state hard disk your graphics card your network card now what happens?", "tokens": [51600, 30609, 26903, 365, 257, 5100, 12, 15406, 1152, 12355, 428, 11837, 2920, 428, 3209, 2920, 586, 437, 2314, 30, 51846], "temperature": 0.0, "avg_logprob": -0.1918228417634964, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.0845518559217453}, {"id": 29, "seek": 13384, "start": 133.96, "end": 138.76, "text": " When we have a multi-processor system the general way that we build multi-processor systems", "tokens": [50370, 1133, 321, 362, 257, 4825, 12, 4318, 25432, 1185, 264, 2674, 636, 300, 321, 1322, 4825, 12, 4318, 25432, 3652, 50610], "temperature": 0.0, "avg_logprob": -0.22732128816492417, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0009112521074712276}, {"id": 30, "seek": 13384, "start": 138.76, "end": 144.64000000000001, "text": " Certainly the ones that we use in laptops or using desktop computers is using what's called a shared memory model", "tokens": [50610, 16628, 264, 2306, 300, 321, 764, 294, 27642, 420, 1228, 14502, 10807, 307, 1228, 437, 311, 1219, 257, 5507, 4675, 2316, 50904], "temperature": 0.0, "avg_logprob": -0.22732128816492417, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0009112521074712276}, {"id": 31, "seek": 13384, "start": 144.76, "end": 147.8, "text": " So just as before with the von Neumann architecture", "tokens": [50910, 407, 445, 382, 949, 365, 264, 2957, 1734, 449, 969, 9482, 51062], "temperature": 0.0, "avg_logprob": -0.22732128816492417, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0009112521074712276}, {"id": 32, "seek": 13384, "start": 148.08, "end": 153.16, "text": " We're going to have a single block of RAM and that's going to be connected", "tokens": [51076, 492, 434, 516, 281, 362, 257, 2167, 3461, 295, 14561, 293, 300, 311, 516, 281, 312, 4582, 51330], "temperature": 0.0, "avg_logprob": -0.22732128816492417, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0009112521074712276}, {"id": 33, "seek": 13384, "start": 153.8, "end": 155.96, "text": " Not to one CPU now", "tokens": [51362, 1726, 281, 472, 13199, 586, 51470], "temperature": 0.0, "avg_logprob": -0.22732128816492417, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0009112521074712276}, {"id": 34, "seek": 13384, "start": 157.16, "end": 160.64000000000001, "text": " But we'll give it to CPUs. So we've got two", "tokens": [51530, 583, 321, 603, 976, 309, 281, 13199, 82, 13, 407, 321, 600, 658, 732, 51704], "temperature": 0.0, "avg_logprob": -0.22732128816492417, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0009112521074712276}, {"id": 35, "seek": 16064, "start": 161.64, "end": 168.44, "text": " CPUs that it's connected to so it's connected to a shared bus between them and then each of those CPUs are", "tokens": [50414, 13199, 82, 300, 309, 311, 4582, 281, 370, 309, 311, 4582, 281, 257, 5507, 1255, 1296, 552, 293, 550, 1184, 295, 729, 13199, 82, 366, 50754], "temperature": 0.0, "avg_logprob": -0.21653177056993758, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.004563819617033005}, {"id": 36, "seek": 16064, "start": 169.04, "end": 174.51999999999998, "text": " Connected to it now effectively. That's how you build a multi-processor system. There's a bit more", "tokens": [50784, 11653, 292, 281, 309, 586, 8659, 13, 663, 311, 577, 291, 1322, 257, 4825, 12, 4318, 25432, 1185, 13, 821, 311, 257, 857, 544, 51058], "temperature": 0.0, "avg_logprob": -0.21653177056993758, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.004563819617033005}, {"id": 37, "seek": 16064, "start": 175.27999999999997, "end": 178.32, "text": " Involved for example, you need some sort of logic here", "tokens": [51096, 682, 9646, 937, 337, 1365, 11, 291, 643, 512, 1333, 295, 9952, 510, 51248], "temperature": 0.0, "avg_logprob": -0.21653177056993758, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.004563819617033005}, {"id": 38, "seek": 16064, "start": 178.95999999999998, "end": 181.04, "text": " for bus", "tokens": [51280, 337, 1255, 51384], "temperature": 0.0, "avg_logprob": -0.21653177056993758, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.004563819617033005}, {"id": 39, "seek": 16064, "start": 181.04, "end": 183.83999999999997, "text": " Arbitrations will call that the ball the bus arbitration logic", "tokens": [51384, 1587, 5260, 12154, 486, 818, 300, 264, 2594, 264, 1255, 14931, 2405, 9952, 51524], "temperature": 0.0, "avg_logprob": -0.21653177056993758, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.004563819617033005}, {"id": 40, "seek": 16064, "start": 183.83999999999997, "end": 189.94, "text": " So you need something to sort of control well, which CPU can talk to the RAM at any one point now", "tokens": [51524, 407, 291, 643, 746, 281, 1333, 295, 1969, 731, 11, 597, 13199, 393, 751, 281, 264, 14561, 412, 604, 472, 935, 586, 51829], "temperature": 0.0, "avg_logprob": -0.21653177056993758, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.004563819617033005}, {"id": 41, "seek": 19064, "start": 190.64, "end": 195.39999999999998, "text": " One thing I need to say here is that I've drawn this is the CPU talking directly to the RAM", "tokens": [50364, 1485, 551, 286, 643, 281, 584, 510, 307, 300, 286, 600, 10117, 341, 307, 264, 13199, 1417, 3838, 281, 264, 14561, 50602], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 42, "seek": 19064, "start": 195.39999999999998, "end": 200.27999999999997, "text": " If you think about it, if you watch the video I did many years ago on CPU caches", "tokens": [50602, 759, 291, 519, 466, 309, 11, 498, 291, 1159, 264, 960, 286, 630, 867, 924, 2057, 322, 13199, 269, 13272, 50846], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 43, "seek": 19064, "start": 200.64, "end": 202.88, "text": " You need to have a cache here because otherwise", "tokens": [50864, 509, 643, 281, 362, 257, 19459, 510, 570, 5911, 50976], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 44, "seek": 19064, "start": 203.64, "end": 206.23999999999998, "text": " Only one CPU can ever talk to RAM at the same time", "tokens": [51014, 5686, 472, 13199, 393, 1562, 751, 281, 14561, 412, 264, 912, 565, 51144], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 45, "seek": 19064, "start": 206.23999999999998, "end": 211.07999999999998, "text": " If there's no cache this CPU tries to talk to RAM this one can't", "tokens": [51144, 759, 456, 311, 572, 19459, 341, 13199, 9898, 281, 751, 281, 14561, 341, 472, 393, 380, 51386], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 46, "seek": 19064, "start": 211.44, "end": 214.67999999999998, "text": " If that's this CPU tries to talk to RAM that one can't at the same time", "tokens": [51404, 759, 300, 311, 341, 13199, 9898, 281, 751, 281, 14561, 300, 472, 393, 380, 412, 264, 912, 565, 51566], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 47, "seek": 19064, "start": 214.67999999999998, "end": 215.88, "text": " It would effectively", "tokens": [51566, 467, 576, 8659, 51626], "temperature": 0.0, "avg_logprob": -0.25089098059612774, "compression_ratio": 1.8177966101694916, "no_speech_prob": 0.001469226903282106}, {"id": 48, "seek": 21588, "start": 215.88, "end": 221.6, "text": " Result in serializing the operation so you wouldn't get any speed up. You need a cache in there and that", "tokens": [50364, 5015, 723, 294, 17436, 3319, 264, 6916, 370, 291, 2759, 380, 483, 604, 3073, 493, 13, 509, 643, 257, 19459, 294, 456, 293, 300, 50650], "temperature": 0.0, "avg_logprob": -0.20846196767446157, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.007935112342238426}, {"id": 49, "seek": 21588, "start": 221.88, "end": 228.07999999999998, "text": " Sort of leads us to the first part of the problem only one CPU can access the RAM at any one point", "tokens": [50664, 26149, 295, 6689, 505, 281, 264, 700, 644, 295, 264, 1154, 787, 472, 13199, 393, 2105, 264, 14561, 412, 604, 472, 935, 50974], "temperature": 0.0, "avg_logprob": -0.20846196767446157, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.007935112342238426}, {"id": 50, "seek": 21588, "start": 228.07999999999998, "end": 231.51999999999998, "text": " Now if we've got a cache in our system and I'm going to draw that as a red line", "tokens": [50974, 823, 498, 321, 600, 658, 257, 19459, 294, 527, 1185, 293, 286, 478, 516, 281, 2642, 300, 382, 257, 2182, 1622, 51146], "temperature": 0.0, "avg_logprob": -0.20846196767446157, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.007935112342238426}, {"id": 51, "seek": 21588, "start": 231.84, "end": 235.48, "text": " Which sits between the CPU and between the RAM?", "tokens": [51162, 3013, 12696, 1296, 264, 13199, 293, 1296, 264, 14561, 30, 51344], "temperature": 0.0, "avg_logprob": -0.20846196767446157, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.007935112342238426}, {"id": 52, "seek": 21588, "start": 235.64, "end": 238.64, "text": " That's not a problem because as a CPU accesses data", "tokens": [51352, 663, 311, 406, 257, 1154, 570, 382, 257, 13199, 2105, 279, 1412, 51502], "temperature": 0.0, "avg_logprob": -0.20846196767446157, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.007935112342238426}, {"id": 53, "seek": 21588, "start": 238.84, "end": 241.07999999999998, "text": " It stores a local copy in its cache", "tokens": [51512, 467, 9512, 257, 2654, 5055, 294, 1080, 19459, 51624], "temperature": 0.0, "avg_logprob": -0.20846196767446157, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.007935112342238426}, {"id": 54, "seek": 24108, "start": 241.08, "end": 248.04000000000002, "text": " So when it needs to try and fetch that data or those instructions again it can fetch them from the cache and not access the RAM", "tokens": [50364, 407, 562, 309, 2203, 281, 853, 293, 23673, 300, 1412, 420, 729, 9415, 797, 309, 393, 23673, 552, 490, 264, 19459, 293, 406, 2105, 264, 14561, 50712], "temperature": 0.0, "avg_logprob": -0.2196144178075698, "compression_ratio": 1.8270042194092826, "no_speech_prob": 0.01055825874209404}, {"id": 55, "seek": 24108, "start": 248.8, "end": 250.44, "text": " So that's absolutely fine", "tokens": [50750, 407, 300, 311, 3122, 2489, 50832], "temperature": 0.0, "avg_logprob": -0.2196144178075698, "compression_ratio": 1.8270042194092826, "no_speech_prob": 0.01055825874209404}, {"id": 56, "seek": 24108, "start": 250.44, "end": 256.36, "text": " Most of the time we want to get it so the CPUs are satisfying their data and instruction fetches from the cache", "tokens": [50832, 4534, 295, 264, 565, 321, 528, 281, 483, 309, 370, 264, 13199, 82, 366, 18348, 641, 1412, 293, 10951, 15136, 3781, 490, 264, 19459, 51128], "temperature": 0.0, "avg_logprob": -0.2196144178075698, "compression_ratio": 1.8270042194092826, "no_speech_prob": 0.01055825874209404}, {"id": 57, "seek": 24108, "start": 256.36, "end": 258.72, "text": " And then only occasionally they go to the RAM", "tokens": [51128, 400, 550, 787, 16895, 436, 352, 281, 264, 14561, 51246], "temperature": 0.0, "avg_logprob": -0.2196144178075698, "compression_ratio": 1.8270042194092826, "no_speech_prob": 0.01055825874209404}, {"id": 58, "seek": 24108, "start": 258.84000000000003, "end": 264.36, "text": " So that actually whenever one of the CPU goes to the RAM needs to go to the main memory to fetch a value", "tokens": [51252, 407, 300, 767, 5699, 472, 295, 264, 13199, 1709, 281, 264, 14561, 2203, 281, 352, 281, 264, 2135, 4675, 281, 23673, 257, 2158, 51528], "temperature": 0.0, "avg_logprob": -0.2196144178075698, "compression_ratio": 1.8270042194092826, "no_speech_prob": 0.01055825874209404}, {"id": 59, "seek": 24108, "start": 264.72, "end": 266.28000000000003, "text": " Then effectively", "tokens": [51546, 1396, 8659, 51624], "temperature": 0.0, "avg_logprob": -0.2196144178075698, "compression_ratio": 1.8270042194092826, "no_speech_prob": 0.01055825874209404}, {"id": 60, "seek": 26628, "start": 266.28, "end": 272.76, "text": " It's unlikely to be being used by the occasion that you'll get the situation where they both try and access a value main memory at", "tokens": [50364, 467, 311, 17518, 281, 312, 885, 1143, 538, 264, 9674, 300, 291, 603, 483, 264, 2590, 689, 436, 1293, 853, 293, 2105, 257, 2158, 2135, 4675, 412, 50688], "temperature": 0.0, "avg_logprob": -0.18842924914313752, "compression_ratio": 1.7063492063492063, "no_speech_prob": 0.003874004352837801}, {"id": 61, "seek": 26628, "start": 272.76, "end": 278.91999999999996, "text": " The same time at which point that's why you have the bus arbitration logic to say this CPU is going to fetch the value", "tokens": [50688, 440, 912, 565, 412, 597, 935, 300, 311, 983, 291, 362, 264, 1255, 14931, 2405, 9952, 281, 584, 341, 13199, 307, 516, 281, 23673, 264, 2158, 50996], "temperature": 0.0, "avg_logprob": -0.18842924914313752, "compression_ratio": 1.7063492063492063, "no_speech_prob": 0.003874004352837801}, {"id": 62, "seek": 26628, "start": 278.91999999999996, "end": 281.15999999999997, "text": " Then that CPU is going to fetch the value", "tokens": [50996, 1396, 300, 13199, 307, 516, 281, 23673, 264, 2158, 51108], "temperature": 0.0, "avg_logprob": -0.18842924914313752, "compression_ratio": 1.7063492063492063, "no_speech_prob": 0.003874004352837801}, {"id": 63, "seek": 26628, "start": 281.79999999999995, "end": 286.2, "text": " So we can build a shared memory multiprocessor system like that", "tokens": [51140, 407, 321, 393, 1322, 257, 5507, 4675, 3311, 340, 25432, 1185, 411, 300, 51360], "temperature": 0.0, "avg_logprob": -0.18842924914313752, "compression_ratio": 1.7063492063492063, "no_speech_prob": 0.003874004352837801}, {"id": 64, "seek": 26628, "start": 286.84, "end": 290.35999999999996, "text": " I'm going to say relatively straightforwardly. There's a lot involved, but", "tokens": [51392, 286, 478, 516, 281, 584, 7226, 15325, 356, 13, 821, 311, 257, 688, 3288, 11, 457, 51568], "temperature": 0.0, "avg_logprob": -0.18842924914313752, "compression_ratio": 1.7063492063492063, "no_speech_prob": 0.003874004352837801}, {"id": 65, "seek": 29036, "start": 290.92, "end": 296.12, "text": " That's the basic idea of what's going on and we can extend that to have more CPUs", "tokens": [50392, 663, 311, 264, 3875, 1558, 295, 437, 311, 516, 322, 293, 321, 393, 10101, 300, 281, 362, 544, 13199, 82, 50652], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 66, "seek": 29036, "start": 296.12, "end": 298.12, "text": " So we can just add another CPU in", "tokens": [50652, 407, 321, 393, 445, 909, 1071, 13199, 294, 50752], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 67, "seek": 29036, "start": 298.6, "end": 301.40000000000003, "text": " Up here so we could have a three CPU system", "tokens": [50776, 5858, 510, 370, 321, 727, 362, 257, 1045, 13199, 1185, 50916], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 68, "seek": 29036, "start": 301.8, "end": 304.36, "text": " Normally you'd probably go up to four and things but I've run out of paper", "tokens": [50936, 17424, 291, 1116, 1391, 352, 493, 281, 1451, 293, 721, 457, 286, 600, 1190, 484, 295, 3035, 51064], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 69, "seek": 29036, "start": 304.76, "end": 310.64, "text": " It's got its cache as well and you could extend that for as many CPUs as you like", "tokens": [51084, 467, 311, 658, 1080, 19459, 382, 731, 293, 291, 727, 10101, 300, 337, 382, 867, 13199, 82, 382, 291, 411, 51378], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 70, "seek": 29036, "start": 311.72, "end": 313.0, "text": " except", "tokens": [51432, 3993, 51496], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 71, "seek": 29036, "start": 313.0, "end": 314.92, "text": " There was a slight issue", "tokens": [51496, 821, 390, 257, 4036, 2734, 51592], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 72, "seek": 29036, "start": 314.92, "end": 316.92, "text": " we said that", "tokens": [51592, 321, 848, 300, 51692], "temperature": 0.0, "avg_logprob": -0.18695266574036842, "compression_ratio": 1.6334841628959276, "no_speech_prob": 0.031781598925590515}, {"id": 73, "seek": 31692, "start": 317.64000000000004, "end": 323.40000000000003, "text": " There are occasions where one CPU might be trying to access the memory at the same time as another CPU", "tokens": [50400, 821, 366, 20641, 689, 472, 13199, 1062, 312, 1382, 281, 2105, 264, 4675, 412, 264, 912, 565, 382, 1071, 13199, 50688], "temperature": 0.0, "avg_logprob": -0.12045767784118652, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.002455637324601412}, {"id": 74, "seek": 31692, "start": 324.44, "end": 326.36, "text": " Hopefully we can build the cache system", "tokens": [50740, 10429, 321, 393, 1322, 264, 19459, 1185, 50836], "temperature": 0.0, "avg_logprob": -0.12045767784118652, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.002455637324601412}, {"id": 75, "seek": 31692, "start": 326.36, "end": 331.88, "text": " We can load more data than we need each time we fetch things and so on we can build an intelligent memory system that can", "tokens": [50836, 492, 393, 3677, 544, 1412, 813, 321, 643, 1184, 565, 321, 23673, 721, 293, 370, 322, 321, 393, 1322, 364, 13232, 4675, 1185, 300, 393, 51112], "temperature": 0.0, "avg_logprob": -0.12045767784118652, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.002455637324601412}, {"id": 76, "seek": 31692, "start": 332.44, "end": 336.92, "text": " Satisfy this so that the probability of that happening is relatively low", "tokens": [51140, 5344, 4937, 88, 341, 370, 300, 264, 8482, 295, 300, 2737, 307, 7226, 2295, 51364], "temperature": 0.0, "avg_logprob": -0.12045767784118652, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.002455637324601412}, {"id": 77, "seek": 31692, "start": 338.04, "end": 340.92, "text": " But if we think about it if we add more and more CPUs", "tokens": [51420, 583, 498, 321, 519, 466, 309, 498, 321, 909, 544, 293, 544, 13199, 82, 51564], "temperature": 0.0, "avg_logprob": -0.12045767784118652, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.002455637324601412}, {"id": 78, "seek": 31692, "start": 341.56, "end": 343.56, "text": " onto the same shared memory bus", "tokens": [51596, 3911, 264, 912, 5507, 4675, 1255, 51696], "temperature": 0.0, "avg_logprob": -0.12045767784118652, "compression_ratio": 1.7407407407407407, "no_speech_prob": 0.002455637324601412}, {"id": 79, "seek": 34356, "start": 344.52, "end": 347.64, "text": " Then we're going to end up with more chance", "tokens": [50412, 1396, 321, 434, 516, 281, 917, 493, 365, 544, 2931, 50568], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 80, "seek": 34356, "start": 348.28000000000003, "end": 352.92, "text": " Of a collision happening of two CPUs trying to access memory at the same time", "tokens": [50600, 2720, 257, 24644, 2737, 295, 732, 13199, 82, 1382, 281, 2105, 4675, 412, 264, 912, 565, 50832], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 81, "seek": 34356, "start": 353.24, "end": 358.68, "text": " And the caches on each CPU mitigate that to some effect so that they reduce the probability", "tokens": [50848, 400, 264, 269, 13272, 322, 1184, 13199, 27336, 300, 281, 512, 1802, 370, 300, 436, 5407, 264, 8482, 51120], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 82, "seek": 34356, "start": 359.16, "end": 361.24, "text": " Of two things trying to access at a time", "tokens": [51144, 2720, 732, 721, 1382, 281, 2105, 412, 257, 565, 51248], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 83, "seek": 34356, "start": 362.12, "end": 365.8, "text": " But a bit like the old birthday problem, you know the sort of question you ask", "tokens": [51292, 583, 257, 857, 411, 264, 1331, 6154, 1154, 11, 291, 458, 264, 1333, 295, 1168, 291, 1029, 51476], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 84, "seek": 34356, "start": 366.12, "end": 367.48, "text": " If you've got a class of school children", "tokens": [51492, 759, 291, 600, 658, 257, 1508, 295, 1395, 2227, 51560], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 85, "seek": 34356, "start": 367.48, "end": 370.36, "text": " What is the probability that two of them share a birthday in there?", "tokens": [51560, 708, 307, 264, 8482, 300, 732, 295, 552, 2073, 257, 6154, 294, 456, 30, 51704], "temperature": 0.0, "avg_logprob": -0.11637780425745413, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.002504816045984626}, {"id": 86, "seek": 37036, "start": 370.6, "end": 374.6, "text": " Turns out it's quite likely once you get a bit of about 20 or so children in the class", "tokens": [50376, 29524, 484, 309, 311, 1596, 3700, 1564, 291, 483, 257, 857, 295, 466, 945, 420, 370, 2227, 294, 264, 1508, 50576], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 87, "seek": 37036, "start": 375.24, "end": 381.64, "text": " The same thing applies here as you increase more CPUs the chance that two of them will try and access memory at the same time", "tokens": [50608, 440, 912, 551, 13165, 510, 382, 291, 3488, 544, 13199, 82, 264, 2931, 300, 732, 295, 552, 486, 853, 293, 2105, 4675, 412, 264, 912, 565, 50928], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 88, "seek": 37036, "start": 382.28000000000003, "end": 383.56, "text": " increases", "tokens": [50960, 8637, 51024], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 89, "seek": 37036, "start": 383.56, "end": 386.52000000000004, "text": " As you add more CPUs and so this will scale", "tokens": [51024, 1018, 291, 909, 544, 13199, 82, 293, 370, 341, 486, 4373, 51172], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 90, "seek": 37036, "start": 386.92, "end": 391.32, "text": " Scale, but it'll only scale up to a point once you get past a certain number of CPUs", "tokens": [51192, 42999, 11, 457, 309, 603, 787, 4373, 493, 281, 257, 935, 1564, 291, 483, 1791, 257, 1629, 1230, 295, 13199, 82, 51412], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 91, "seek": 37036, "start": 391.96000000000004, "end": 394.36, "text": " You will find that you're back to the point where actually more", "tokens": [51444, 509, 486, 915, 300, 291, 434, 646, 281, 264, 935, 689, 767, 544, 51564], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 92, "seek": 37036, "start": 394.92, "end": 399.56, "text": " It's more likely than not that two of them will be trying to access memory at the same time", "tokens": [51592, 467, 311, 544, 3700, 813, 406, 300, 732, 295, 552, 486, 312, 1382, 281, 2105, 4675, 412, 264, 912, 565, 51824], "temperature": 0.0, "avg_logprob": -0.11312480235662986, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.005761288106441498}, {"id": 93, "seek": 40036, "start": 400.44, "end": 403.88, "text": " So we can scale this up to a certain number of CPUs", "tokens": [50368, 407, 321, 393, 4373, 341, 493, 281, 257, 1629, 1230, 295, 13199, 82, 50540], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 94, "seek": 40036, "start": 404.36, "end": 409.32, "text": " So does that form a limit? Is there a limit on how many CPUs we can have working together in the multiprocessor system?", "tokens": [50564, 407, 775, 300, 1254, 257, 4948, 30, 1119, 456, 257, 4948, 322, 577, 867, 13199, 82, 321, 393, 362, 1364, 1214, 294, 264, 3311, 340, 25432, 1185, 30, 50812], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 95, "seek": 40036, "start": 410.44, "end": 413.16, "text": " Well, not as such because there's another way", "tokens": [50868, 1042, 11, 406, 382, 1270, 570, 456, 311, 1071, 636, 51004], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 96, "seek": 40036, "start": 414.04, "end": 416.44, "text": " We can design a multiprocessor system", "tokens": [51048, 492, 393, 1715, 257, 3311, 340, 25432, 1185, 51168], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 97, "seek": 40036, "start": 416.76, "end": 419.88, "text": " So this is what's known as a uniform memory access system", "tokens": [51184, 407, 341, 307, 437, 311, 2570, 382, 257, 9452, 4675, 2105, 1185, 51340], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 98, "seek": 40036, "start": 420.28000000000003, "end": 422.68, "text": " And the reason it's known is that is that for any location", "tokens": [51360, 400, 264, 1778, 309, 311, 2570, 307, 300, 307, 300, 337, 604, 4914, 51480], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 99, "seek": 40036, "start": 423.56, "end": 425.56, "text": " in RAM", "tokens": [51524, 294, 14561, 51624], "temperature": 0.0, "avg_logprob": -0.10856324551152248, "compression_ratio": 1.662280701754386, "no_speech_prob": 0.0006258073262870312}, {"id": 100, "seek": 42556, "start": 425.8, "end": 427.8, "text": " Any of these CPUs can access it", "tokens": [50376, 2639, 295, 613, 13199, 82, 393, 2105, 309, 50476], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 101, "seek": 42556, "start": 428.36, "end": 433.64, "text": " With the same sort of speed so it doesn't matter whether it's coming from CPU one up here or CPU three down here", "tokens": [50504, 2022, 264, 912, 1333, 295, 3073, 370, 309, 1177, 380, 1871, 1968, 309, 311, 1348, 490, 13199, 472, 493, 510, 420, 13199, 1045, 760, 510, 50768], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 102, "seek": 42556, "start": 433.96, "end": 437.0, "text": " It'll take the same amount of time for them to access the value", "tokens": [50784, 467, 603, 747, 264, 912, 2372, 295, 565, 337, 552, 281, 2105, 264, 2158, 50936], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 103, "seek": 42556, "start": 437.56, "end": 439.56, "text": " In that memory location", "tokens": [50964, 682, 300, 4675, 4914, 51064], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 104, "seek": 42556, "start": 439.56, "end": 443.56, "text": " Different memory locations may have different speeds your ROM might be slower than the RAM", "tokens": [51064, 20825, 4675, 9253, 815, 362, 819, 16411, 428, 41678, 1062, 312, 14009, 813, 264, 14561, 51264], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 105, "seek": 42556, "start": 444.12, "end": 446.84000000000003, "text": " You may have things mapped in there which are slower still and so on", "tokens": [51292, 509, 815, 362, 721, 33318, 294, 456, 597, 366, 14009, 920, 293, 370, 322, 51428], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 106, "seek": 42556, "start": 447.0, "end": 453.8, "text": " But for any particular memory location each CPU can access it in the same time or within the same nanosecond ballpark", "tokens": [51436, 583, 337, 604, 1729, 4675, 4914, 1184, 13199, 393, 2105, 309, 294, 264, 912, 565, 420, 1951, 264, 912, 14067, 541, 18882, 2594, 31239, 51776], "temperature": 0.0, "avg_logprob": -0.10589298407236734, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.0021699259523302317}, {"id": 107, "seek": 45380, "start": 453.8, "end": 459.72, "text": " So it makes no difference in reality as we said that will scale up to a certain number of CPUs", "tokens": [50364, 407, 309, 1669, 572, 2649, 294, 4103, 382, 321, 848, 300, 486, 4373, 493, 281, 257, 1629, 1230, 295, 13199, 82, 50660], "temperature": 0.0, "avg_logprob": -0.11445086342947823, "compression_ratio": 1.7620967741935485, "no_speech_prob": 0.0020774397999048233}, {"id": 108, "seek": 45380, "start": 459.72, "end": 461.72, "text": " But if we want to take it to beyond that", "tokens": [50660, 583, 498, 321, 528, 281, 747, 309, 281, 4399, 300, 50760], "temperature": 0.0, "avg_logprob": -0.11445086342947823, "compression_ratio": 1.7620967741935485, "no_speech_prob": 0.0020774397999048233}, {"id": 109, "seek": 45380, "start": 462.04, "end": 466.76, "text": " Then we need to change that system. We need to build a system that no longer has", "tokens": [50776, 1396, 321, 643, 281, 1319, 300, 1185, 13, 492, 643, 281, 1322, 257, 1185, 300, 572, 2854, 575, 51012], "temperature": 0.0, "avg_logprob": -0.11445086342947823, "compression_ratio": 1.7620967741935485, "no_speech_prob": 0.0020774397999048233}, {"id": 110, "seek": 45380, "start": 467.40000000000003, "end": 473.24, "text": " Uniform memory access rather than from a memory location each CPU being able to access at the same speed", "tokens": [51044, 1156, 8629, 4675, 2105, 2831, 813, 490, 257, 4675, 4914, 1184, 13199, 885, 1075, 281, 2105, 412, 264, 912, 3073, 51336], "temperature": 0.0, "avg_logprob": -0.11445086342947823, "compression_ratio": 1.7620967741935485, "no_speech_prob": 0.0020774397999048233}, {"id": 111, "seek": 45380, "start": 473.8, "end": 479.08000000000004, "text": " For each memory location the speed it takes to access it or how long it takes for it to access the data value there", "tokens": [51364, 1171, 1184, 4675, 4914, 264, 3073, 309, 2516, 281, 2105, 309, 420, 577, 938, 309, 2516, 337, 309, 281, 2105, 264, 1412, 2158, 456, 51628], "temperature": 0.0, "avg_logprob": -0.11445086342947823, "compression_ratio": 1.7620967741935485, "no_speech_prob": 0.0020774397999048233}, {"id": 112, "seek": 47908, "start": 479.56, "end": 486.12, "text": " Depends on which CPU core is trying to access it. So it might be that for one CPU core it takes", "tokens": [50388, 4056, 2581, 322, 597, 13199, 4965, 307, 1382, 281, 2105, 309, 13, 407, 309, 1062, 312, 300, 337, 472, 13199, 4965, 309, 2516, 50716], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 113, "seek": 47908, "start": 486.84, "end": 488.84, "text": " I don't know let's say", "tokens": [50752, 286, 500, 380, 458, 718, 311, 584, 50852], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 114, "seek": 47908, "start": 488.91999999999996, "end": 491.4, "text": " 100 nanoseconds just picking a time off the top of my head", "tokens": [50856, 2319, 14067, 541, 28750, 445, 8867, 257, 565, 766, 264, 1192, 295, 452, 1378, 50980], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 115, "seek": 47908, "start": 491.88, "end": 495.08, "text": " But for another CPU core it takes 200 nanoseconds", "tokens": [51004, 583, 337, 1071, 13199, 4965, 309, 2516, 2331, 14067, 541, 28750, 51164], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 116, "seek": 47908, "start": 495.32, "end": 498.91999999999996, "text": " They're just ballpark times and not all the magnitudes are just sort of show there's a difference", "tokens": [51176, 814, 434, 445, 2594, 31239, 1413, 293, 406, 439, 264, 4944, 16451, 366, 445, 1333, 295, 855, 456, 311, 257, 2649, 51356], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 117, "seek": 47908, "start": 499.56, "end": 505.79999999999995, "text": " Between the two. Okay, let's have a look at how we build a system like that. So what we're talking about is what's referred to", "tokens": [51388, 18967, 264, 732, 13, 1033, 11, 718, 311, 362, 257, 574, 412, 577, 321, 1322, 257, 1185, 411, 300, 13, 407, 437, 321, 434, 1417, 466, 307, 437, 311, 10839, 281, 51700], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 118, "seek": 47908, "start": 506.76, "end": 508.28, "text": " as a non", "tokens": [51748, 382, 257, 2107, 51824], "temperature": 0.0, "avg_logprob": -0.13211427416120256, "compression_ratio": 1.6642599277978338, "no_speech_prob": 0.01230794657021761}, {"id": 119, "seek": 50828, "start": 508.28, "end": 513.16, "text": " Uniform memory access system. So non uniform memory access", "tokens": [50364, 1156, 8629, 4675, 2105, 1185, 13, 407, 2107, 9452, 4675, 2105, 50608], "temperature": 0.0, "avg_logprob": -0.18803369522094726, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0019764190074056387}, {"id": 120, "seek": 50828, "start": 514.04, "end": 515.8, "text": " system or Numa", "tokens": [50652, 1185, 420, 426, 5544, 50740], "temperature": 0.0, "avg_logprob": -0.18803369522094726, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0019764190074056387}, {"id": 121, "seek": 50828, "start": 515.8, "end": 521.16, "text": " For short. So how does that differ? Well, let's think about it. It starts off in the same way. We have a block of ram", "tokens": [50740, 1171, 2099, 13, 407, 577, 775, 300, 743, 30, 1042, 11, 718, 311, 519, 466, 309, 13, 467, 3719, 766, 294, 264, 912, 636, 13, 492, 362, 257, 3461, 295, 10211, 51008], "temperature": 0.0, "avg_logprob": -0.18803369522094726, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0019764190074056387}, {"id": 122, "seek": 50828, "start": 522.76, "end": 524.76, "text": " I'm going to turn the diagram around", "tokens": [51088, 286, 478, 516, 281, 1261, 264, 10686, 926, 51188], "temperature": 0.0, "avg_logprob": -0.18803369522094726, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0019764190074056387}, {"id": 123, "seek": 50828, "start": 525.48, "end": 527.9599999999999, "text": " Ram like that and that is connected", "tokens": [51224, 9078, 411, 300, 293, 300, 307, 4582, 51348], "temperature": 0.0, "avg_logprob": -0.18803369522094726, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0019764190074056387}, {"id": 124, "seek": 50828, "start": 528.52, "end": 535.4, "text": " To our CPUs just as before I'm missing out the caches and the arbitration logic from this diagram just for simplicity", "tokens": [51376, 1407, 527, 13199, 82, 445, 382, 949, 286, 478, 5361, 484, 264, 269, 13272, 293, 264, 14931, 2405, 9952, 490, 341, 10686, 445, 337, 25632, 51720], "temperature": 0.0, "avg_logprob": -0.18803369522094726, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0019764190074056387}, {"id": 125, "seek": 53540, "start": 535.48, "end": 540.04, "text": " So this looks relatively similar to what we had before we've got a some ram and some CPU cores", "tokens": [50368, 407, 341, 1542, 7226, 2531, 281, 437, 321, 632, 949, 321, 600, 658, 257, 512, 10211, 293, 512, 13199, 24826, 50596], "temperature": 0.0, "avg_logprob": -0.1313200856114293, "compression_ratio": 1.8293650793650793, "no_speech_prob": 0.004331701435148716}, {"id": 126, "seek": 53540, "start": 540.4399999999999, "end": 546.68, "text": " Sharing access to it. No difference there with a Numa system though. We also have some other ram", "tokens": [50616, 49060, 2105, 281, 309, 13, 883, 2649, 456, 365, 257, 426, 5544, 1185, 1673, 13, 492, 611, 362, 512, 661, 10211, 50928], "temperature": 0.0, "avg_logprob": -0.1313200856114293, "compression_ratio": 1.8293650793650793, "no_speech_prob": 0.004331701435148716}, {"id": 127, "seek": 53540, "start": 547.4, "end": 552.36, "text": " That's part of our system connected to a different set of CPU cores", "tokens": [50964, 663, 311, 644, 295, 527, 1185, 4582, 281, 257, 819, 992, 295, 13199, 24826, 51212], "temperature": 0.0, "avg_logprob": -0.1313200856114293, "compression_ratio": 1.8293650793650793, "no_speech_prob": 0.004331701435148716}, {"id": 128, "seek": 53540, "start": 552.92, "end": 558.1999999999999, "text": " Over here now at this point you've got effectively two computer systems. These CPUs can access this RAM", "tokens": [51240, 4886, 510, 586, 412, 341, 935, 291, 600, 658, 8659, 732, 3820, 3652, 13, 1981, 13199, 82, 393, 2105, 341, 14561, 51504], "temperature": 0.0, "avg_logprob": -0.1313200856114293, "compression_ratio": 1.8293650793650793, "no_speech_prob": 0.004331701435148716}, {"id": 129, "seek": 53540, "start": 558.52, "end": 560.52, "text": " These CPUs can access this RAM", "tokens": [51520, 1981, 13199, 82, 393, 2105, 341, 14561, 51620], "temperature": 0.0, "avg_logprob": -0.1313200856114293, "compression_ratio": 1.8293650793650793, "no_speech_prob": 0.004331701435148716}, {"id": 130, "seek": 53540, "start": 560.6, "end": 563.96, "text": " The difference in the Numa system is that there is actually a link", "tokens": [51624, 440, 2649, 294, 264, 426, 5544, 1185, 307, 300, 456, 307, 767, 257, 2113, 51792], "temperature": 0.0, "avg_logprob": -0.1313200856114293, "compression_ratio": 1.8293650793650793, "no_speech_prob": 0.004331701435148716}, {"id": 131, "seek": 56396, "start": 564.6800000000001, "end": 566.6800000000001, "text": " between the two", "tokens": [50400, 1296, 264, 732, 50500], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 132, "seek": 56396, "start": 566.76, "end": 568.76, "text": " Systems here and you've got a distributed", "tokens": [50504, 27059, 510, 293, 291, 600, 658, 257, 12631, 50604], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 133, "seek": 56396, "start": 569.32, "end": 573.4000000000001, "text": " Shared memory system think of it like a sort of network, but it's often done at", "tokens": [50632, 1160, 1642, 4675, 1185, 519, 295, 309, 411, 257, 1333, 295, 3209, 11, 457, 309, 311, 2049, 1096, 412, 50836], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 134, "seek": 56396, "start": 574.0400000000001, "end": 577.88, "text": " The CPU level and things even within on some between cores", "tokens": [50868, 440, 13199, 1496, 293, 721, 754, 1951, 322, 512, 1296, 24826, 51060], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 135, "seek": 56396, "start": 578.36, "end": 582.76, "text": " Now what this means is as far as the program's running there is one block of memory", "tokens": [51084, 823, 437, 341, 1355, 307, 382, 1400, 382, 264, 1461, 311, 2614, 456, 307, 472, 3461, 295, 4675, 51304], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 136, "seek": 56396, "start": 582.84, "end": 584.84, "text": " There is so this is if this was 16 gig", "tokens": [51308, 821, 307, 370, 341, 307, 498, 341, 390, 3165, 8741, 51408], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 137, "seek": 56396, "start": 585.48, "end": 590.9200000000001, "text": " And this was 16 gig the programs would see 32 gigabytes. They're not separate blocks of memory", "tokens": [51440, 400, 341, 390, 3165, 8741, 264, 4268, 576, 536, 8858, 42741, 13, 814, 434, 406, 4994, 8474, 295, 4675, 51712], "temperature": 0.0, "avg_logprob": -0.10334891539353591, "compression_ratio": 1.656, "no_speech_prob": 0.003567637177184224}, {"id": 138, "seek": 59092, "start": 591.56, "end": 594.36, "text": " They they're seen by the programs as one block of memory", "tokens": [50396, 814, 436, 434, 1612, 538, 264, 4268, 382, 472, 3461, 295, 4675, 50536], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 139, "seek": 59092, "start": 595.0799999999999, "end": 599.4799999999999, "text": " But the difference is is if we've got a program running on this CPU over here", "tokens": [50572, 583, 264, 2649, 307, 307, 498, 321, 600, 658, 257, 1461, 2614, 322, 341, 13199, 670, 510, 50792], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 140, "seek": 59092, "start": 600.92, "end": 603.8, "text": " It's got direct access to this block of memory here", "tokens": [50864, 467, 311, 658, 2047, 2105, 281, 341, 3461, 295, 4675, 510, 51008], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 141, "seek": 59092, "start": 604.52, "end": 607.0799999999999, "text": " So let's say it takes I don't let's say it takes", "tokens": [51044, 407, 718, 311, 584, 309, 2516, 286, 500, 380, 718, 311, 584, 309, 2516, 51172], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 142, "seek": 59092, "start": 607.64, "end": 609.88, "text": " 100 nanoseconds again to access memory", "tokens": [51200, 2319, 14067, 541, 28750, 797, 281, 2105, 4675, 51312], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 143, "seek": 59092, "start": 610.36, "end": 613.56, "text": " So we've got 100 nanoseconds to access memory if he wants to access memory in here", "tokens": [51336, 407, 321, 600, 658, 2319, 14067, 541, 28750, 281, 2105, 4675, 498, 415, 2738, 281, 2105, 4675, 294, 510, 51496], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 144, "seek": 59092, "start": 614.12, "end": 617.7199999999999, "text": " It will take 100 nanoseconds to access that memory value", "tokens": [51524, 467, 486, 747, 2319, 14067, 541, 28750, 281, 2105, 300, 4675, 2158, 51704], "temperature": 0.0, "avg_logprob": -0.1305973420449353, "compression_ratio": 1.9903846153846154, "no_speech_prob": 0.0006771496264263988}, {"id": 145, "seek": 61772, "start": 617.72, "end": 623.32, "text": " But if the data it's trying to access is over in this memory over here", "tokens": [50364, 583, 498, 264, 1412, 309, 311, 1382, 281, 2105, 307, 670, 294, 341, 4675, 670, 510, 50644], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 146, "seek": 61772, "start": 625.08, "end": 628.12, "text": " A CPU over here could access it in 100 nanoseconds", "tokens": [50732, 316, 13199, 670, 510, 727, 2105, 309, 294, 2319, 14067, 541, 28750, 50884], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 147, "seek": 61772, "start": 628.6, "end": 631.0, "text": " But for this CPU over here a CPU over here", "tokens": [50908, 583, 337, 341, 13199, 670, 510, 257, 13199, 670, 510, 51028], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 148, "seek": 61772, "start": 631.5600000000001, "end": 634.36, "text": " It's got to go over this distributed shared memory connection", "tokens": [51056, 467, 311, 658, 281, 352, 670, 341, 12631, 5507, 4675, 4984, 51196], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 149, "seek": 61772, "start": 634.9200000000001, "end": 640.44, "text": " From this set of RAM and this set of CPUs to this set of RAM and this set of CPU cores over here", "tokens": [51224, 3358, 341, 992, 295, 14561, 293, 341, 992, 295, 13199, 82, 281, 341, 992, 295, 14561, 293, 341, 992, 295, 13199, 24826, 670, 510, 51500], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 150, "seek": 61772, "start": 640.9200000000001, "end": 642.9200000000001, "text": " And that would take", "tokens": [51524, 400, 300, 576, 747, 51624], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 151, "seek": 61772, "start": 643.0, "end": 647.1600000000001, "text": " A significant amount of time. I mean it would take 100 nanoseconds over here", "tokens": [51628, 316, 4776, 2372, 295, 565, 13, 286, 914, 309, 576, 747, 2319, 14067, 541, 28750, 670, 510, 51836], "temperature": 0.0, "avg_logprob": -0.14178551665139855, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.0013130244333297014}, {"id": 152, "seek": 64772, "start": 647.72, "end": 649.72, "text": " To get from here to here", "tokens": [50364, 1407, 483, 490, 510, 281, 510, 50464], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 153, "seek": 64772, "start": 649.72, "end": 651.72, "text": " So to get from here to here plus this", "tokens": [50464, 407, 281, 483, 490, 510, 281, 510, 1804, 341, 50564], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 154, "seek": 64772, "start": 652.36, "end": 656.28, "text": " Let's say this is 200 nanoseconds. I'm just making a number up over here. It's a longer", "tokens": [50596, 961, 311, 584, 341, 307, 2331, 14067, 541, 28750, 13, 286, 478, 445, 1455, 257, 1230, 493, 670, 510, 13, 467, 311, 257, 2854, 50792], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 155, "seek": 64772, "start": 657.0, "end": 658.28, "text": " amount of time", "tokens": [50828, 2372, 295, 565, 50892], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 156, "seek": 64772, "start": 658.28, "end": 659.88, "text": " I'm making these numbers off of the top of my head", "tokens": [50892, 286, 478, 1455, 613, 3547, 766, 295, 264, 1192, 295, 452, 1378, 50972], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 157, "seek": 64772, "start": 659.88, "end": 663.88, "text": " So don't take them as any sort of things other than so it's longer to go from here over here", "tokens": [50972, 407, 500, 380, 747, 552, 382, 604, 1333, 295, 721, 661, 813, 370, 309, 311, 2854, 281, 352, 490, 510, 670, 510, 51172], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 158, "seek": 64772, "start": 664.0400000000001, "end": 666.0400000000001, "text": " So we'd have to go over here", "tokens": [51180, 407, 321, 1116, 362, 281, 352, 670, 510, 51280], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 159, "seek": 64772, "start": 666.2, "end": 668.2, "text": " across the distributed shared memory link", "tokens": [51288, 2108, 264, 12631, 5507, 4675, 2113, 51388], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 160, "seek": 64772, "start": 669.08, "end": 671.5600000000001, "text": " To get the value and then we could bring the value back", "tokens": [51432, 1407, 483, 264, 2158, 293, 550, 321, 727, 1565, 264, 2158, 646, 51556], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 161, "seek": 64772, "start": 671.5600000000001, "end": 676.12, "text": " So rather than taking 100 nanoseconds it would take in the order of 300 nanoseconds", "tokens": [51556, 407, 2831, 813, 1940, 2319, 14067, 541, 28750, 309, 576, 747, 294, 264, 1668, 295, 6641, 14067, 541, 28750, 51784], "temperature": 0.0, "avg_logprob": -0.10114515744722806, "compression_ratio": 1.897810218978102, "no_speech_prob": 0.0007604543352499604}, {"id": 162, "seek": 67612, "start": 676.2, "end": 680.76, "text": " It would take a significantly longer amount of time. So if we build a computer system like this", "tokens": [50368, 467, 576, 747, 257, 10591, 2854, 2372, 295, 565, 13, 407, 498, 321, 1322, 257, 3820, 1185, 411, 341, 50596], "temperature": 0.0, "avg_logprob": -0.1055556854399124, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.0005444192793220282}, {"id": 163, "seek": 67612, "start": 681.0, "end": 683.0, "text": " We have the situation where", "tokens": [50608, 492, 362, 264, 2590, 689, 50708], "temperature": 0.0, "avg_logprob": -0.1055556854399124, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.0005444192793220282}, {"id": 164, "seek": 67612, "start": 683.08, "end": 687.72, "text": " Depending where an instruction is in memory or where data is in memory", "tokens": [50712, 22539, 689, 364, 10951, 307, 294, 4675, 420, 689, 1412, 307, 294, 4675, 50944], "temperature": 0.0, "avg_logprob": -0.1055556854399124, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.0005444192793220282}, {"id": 165, "seek": 67612, "start": 688.36, "end": 694.84, "text": " It could either access it very very quickly on this CPU core if it can go directly to the RAM that it's directly connected to", "tokens": [50976, 467, 727, 2139, 2105, 309, 588, 588, 2661, 322, 341, 13199, 4965, 498, 309, 393, 352, 3838, 281, 264, 14561, 300, 309, 311, 3838, 4582, 281, 51300], "temperature": 0.0, "avg_logprob": -0.1055556854399124, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.0005444192793220282}, {"id": 166, "seek": 67612, "start": 695.48, "end": 697.48, "text": " Or it would end up taking a long time", "tokens": [51332, 1610, 309, 576, 917, 493, 1940, 257, 938, 565, 51432], "temperature": 0.0, "avg_logprob": -0.1055556854399124, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.0005444192793220282}, {"id": 167, "seek": 67612, "start": 698.28, "end": 701.96, "text": " This relatively to access it because it would have to go over the shared link", "tokens": [51472, 639, 7226, 281, 2105, 309, 570, 309, 576, 362, 281, 352, 670, 264, 5507, 2113, 51656], "temperature": 0.0, "avg_logprob": -0.1055556854399124, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.0005444192793220282}, {"id": 168, "seek": 70196, "start": 702.36, "end": 705.5600000000001, "text": " And fetch it from the other block of RAM over there", "tokens": [50384, 400, 23673, 309, 490, 264, 661, 3461, 295, 14561, 670, 456, 50544], "temperature": 0.0, "avg_logprob": -0.1296821797935708, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.0033189000096172094}, {"id": 169, "seek": 70196, "start": 705.96, "end": 708.2800000000001, "text": " It would still appear to be the same memory system", "tokens": [50564, 467, 576, 920, 4204, 281, 312, 264, 912, 4675, 1185, 50680], "temperature": 0.0, "avg_logprob": -0.1296821797935708, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.0033189000096172094}, {"id": 170, "seek": 70196, "start": 708.76, "end": 712.6800000000001, "text": " But we've now got the situation where the access to it depends", "tokens": [50704, 583, 321, 600, 586, 658, 264, 2590, 689, 264, 2105, 281, 309, 5946, 50900], "temperature": 0.0, "avg_logprob": -0.1296821797935708, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.0033189000096172094}, {"id": 171, "seek": 70196, "start": 713.24, "end": 718.6800000000001, "text": " On which cpu is trying to access it. So we have what's called a non uniform memory access system", "tokens": [50928, 1282, 597, 269, 34859, 307, 1382, 281, 2105, 309, 13, 407, 321, 362, 437, 311, 1219, 257, 2107, 9452, 4675, 2105, 1185, 51200], "temperature": 0.0, "avg_logprob": -0.1296821797935708, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.0033189000096172094}, {"id": 172, "seek": 70196, "start": 718.84, "end": 721.5600000000001, "text": " Now originally non uniform memory access systems were the sort of", "tokens": [51208, 823, 7993, 2107, 9452, 4675, 2105, 3652, 645, 264, 1333, 295, 51344], "temperature": 0.0, "avg_logprob": -0.1296821797935708, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.0033189000096172094}, {"id": 173, "seek": 70196, "start": 721.96, "end": 727.24, "text": " Domain of high-end cluster system and sort of sgi type workstations and things but these days", "tokens": [51364, 16674, 491, 295, 1090, 12, 521, 13630, 1185, 293, 1333, 295, 262, 7834, 2010, 589, 372, 763, 293, 721, 457, 613, 1708, 51628], "temperature": 0.0, "avg_logprob": -0.1296821797935708, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.0033189000096172094}, {"id": 174, "seek": 72724, "start": 727.32, "end": 730.6800000000001, "text": " You've actually seen it drop down on to sort of workstation type machines", "tokens": [50368, 509, 600, 767, 1612, 309, 3270, 760, 322, 281, 1333, 295, 589, 19159, 2010, 8379, 50536], "temperature": 0.0, "avg_logprob": -0.14923836503710067, "compression_ratio": 1.7259259259259259, "no_speech_prob": 0.012558834627270699}, {"id": 175, "seek": 72724, "start": 731.0, "end": 734.36, "text": " Some of the amd thread ripper some of the higher end intel clusters are all", "tokens": [50552, 2188, 295, 264, 669, 67, 7207, 367, 15124, 512, 295, 264, 2946, 917, 24777, 23313, 366, 439, 50720], "temperature": 0.0, "avg_logprob": -0.14923836503710067, "compression_ratio": 1.7259259259259259, "no_speech_prob": 0.012558834627270699}, {"id": 176, "seek": 72724, "start": 735.0, "end": 741.72, "text": " Numer based systems and what this means is if you want to run that cpu at the fastest possible speed", "tokens": [50752, 426, 15583, 2361, 3652, 293, 437, 341, 1355, 307, 498, 291, 528, 281, 1190, 300, 269, 34859, 412, 264, 14573, 1944, 3073, 51088], "temperature": 0.0, "avg_logprob": -0.14923836503710067, "compression_ratio": 1.7259259259259259, "no_speech_prob": 0.012558834627270699}, {"id": 177, "seek": 72724, "start": 742.36, "end": 745.72, "text": " You need to write your software to take into account", "tokens": [51120, 509, 643, 281, 2464, 428, 4722, 281, 747, 666, 2696, 51288], "temperature": 0.0, "avg_logprob": -0.14923836503710067, "compression_ratio": 1.7259259259259259, "no_speech_prob": 0.012558834627270699}, {"id": 178, "seek": 72724, "start": 746.36, "end": 749.16, "text": " Which cpus have fast access to which bits of ram", "tokens": [51320, 3013, 269, 31624, 362, 2370, 2105, 281, 597, 9239, 295, 10211, 51460], "temperature": 0.0, "avg_logprob": -0.14923836503710067, "compression_ratio": 1.7259259259259259, "no_speech_prob": 0.012558834627270699}, {"id": 179, "seek": 72724, "start": 749.64, "end": 754.44, "text": " So that you can put the data that those cpus are processing and you can put the instructions that they're running", "tokens": [51484, 407, 300, 291, 393, 829, 264, 1412, 300, 729, 269, 31624, 366, 9007, 293, 291, 393, 829, 264, 9415, 300, 436, 434, 2614, 51724], "temperature": 0.0, "avg_logprob": -0.14923836503710067, "compression_ratio": 1.7259259259259259, "no_speech_prob": 0.012558834627270699}, {"id": 180, "seek": 75444, "start": 754.9200000000001, "end": 762.0400000000001, "text": " In that block of memory and have the cpu date the cpu instructions and the data that's being executed on these cpus", "tokens": [50388, 682, 300, 3461, 295, 4675, 293, 362, 264, 269, 34859, 4002, 264, 269, 34859, 9415, 293, 264, 1412, 300, 311, 885, 17577, 322, 613, 269, 31624, 50744], "temperature": 0.0, "avg_logprob": -0.09444762588640966, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.004032805562019348}, {"id": 181, "seek": 75444, "start": 762.6, "end": 764.36, "text": " In this block of memory over here", "tokens": [50772, 682, 341, 3461, 295, 4675, 670, 510, 50860], "temperature": 0.0, "avg_logprob": -0.09444762588640966, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.004032805562019348}, {"id": 182, "seek": 75444, "start": 764.36, "end": 768.44, "text": " So they can all access it very very quickly and you only have a very small amount of data", "tokens": [50860, 407, 436, 393, 439, 2105, 309, 588, 588, 2661, 293, 291, 787, 362, 257, 588, 1359, 2372, 295, 1412, 51064], "temperature": 0.0, "avg_logprob": -0.09444762588640966, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.004032805562019348}, {"id": 183, "seek": 75444, "start": 768.7600000000001, "end": 773.72, "text": " Which is needed to synchronize things and keep things working passing over the shared memory network", "tokens": [51080, 3013, 307, 2978, 281, 19331, 1125, 721, 293, 1066, 721, 1364, 8437, 670, 264, 5507, 4675, 3209, 51328], "temperature": 0.0, "avg_logprob": -0.09444762588640966, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.004032805562019348}, {"id": 184, "seek": 75444, "start": 774.5200000000001, "end": 776.5200000000001, "text": " Now you can do it and it works great", "tokens": [51368, 823, 291, 393, 360, 309, 293, 309, 1985, 869, 51468], "temperature": 0.0, "avg_logprob": -0.09444762588640966, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.004032805562019348}, {"id": 185, "seek": 75444, "start": 776.84, "end": 780.9200000000001, "text": " But you have to write your software knowing where things are and in fact if you look", "tokens": [51484, 583, 291, 362, 281, 2464, 428, 4722, 5276, 689, 721, 366, 293, 294, 1186, 498, 291, 574, 51688], "temperature": 0.0, "avg_logprob": -0.09444762588640966, "compression_ratio": 1.7837837837837838, "no_speech_prob": 0.004032805562019348}, {"id": 186, "seek": 78092, "start": 781.24, "end": 784.28, "text": " You can find papers and presentations from companies like netflix", "tokens": [50380, 509, 393, 915, 10577, 293, 18964, 490, 3431, 411, 2533, 12336, 50532], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 187, "seek": 78092, "start": 784.52, "end": 789.16, "text": " Where they're really trying to optimize the performance of their service to serve the videos to you", "tokens": [50544, 2305, 436, 434, 534, 1382, 281, 19719, 264, 3389, 295, 641, 2643, 281, 4596, 264, 2145, 281, 291, 50776], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 188, "seek": 78092, "start": 789.4, "end": 792.8399999999999, "text": " I'm sure youtube's doing the same as well, but netflix have actually written about it", "tokens": [50788, 286, 478, 988, 12487, 311, 884, 264, 912, 382, 731, 11, 457, 2533, 12336, 362, 767, 3720, 466, 309, 50960], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 189, "seek": 78092, "start": 793.16, "end": 796.12, "text": " Really optimized the speed of serving the videos to you", "tokens": [50976, 4083, 26941, 264, 3073, 295, 8148, 264, 2145, 281, 291, 51124], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 190, "seek": 78092, "start": 796.52, "end": 801.0, "text": " So they actually have to take into all this account so that the network card is connected to one", "tokens": [51144, 407, 436, 767, 362, 281, 747, 666, 439, 341, 2696, 370, 300, 264, 3209, 2920, 307, 4582, 281, 472, 51368], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 191, "seek": 78092, "start": 801.7199999999999, "end": 802.8399999999999, "text": " cpu", "tokens": [51404, 269, 34859, 51460], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 192, "seek": 78092, "start": 802.8399999999999, "end": 807.7199999999999, "text": " gets that data and doesn't have to go and pass it over the shared memory link to another one which then passes it over", "tokens": [51460, 2170, 300, 1412, 293, 1177, 380, 362, 281, 352, 293, 1320, 309, 670, 264, 5507, 4675, 2113, 281, 1071, 472, 597, 550, 11335, 309, 670, 51704], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 193, "seek": 78092, "start": 808.1999999999999, "end": 810.1999999999999, "text": " to another one to fetch the data from a", "tokens": [51728, 281, 1071, 472, 281, 23673, 264, 1412, 490, 257, 51828], "temperature": 0.0, "avg_logprob": -0.090747620509221, "compression_ratio": 1.8469055374592833, "no_speech_prob": 0.012898719869554043}, {"id": 194, "seek": 81092, "start": 811.24, "end": 816.04, "text": " Hard disk and so on and feed it back to you and you get everything's passing over the slow link all the time", "tokens": [50380, 11817, 12355, 293, 370, 322, 293, 3154, 309, 646, 281, 291, 293, 291, 483, 1203, 311, 8437, 670, 264, 2964, 2113, 439, 264, 565, 50620], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 195, "seek": 81092, "start": 816.04, "end": 818.04, "text": " You really have to take into account", "tokens": [50620, 509, 534, 362, 281, 747, 666, 2696, 50720], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 196, "seek": 81092, "start": 818.04, "end": 820.04, "text": " where things are", "tokens": [50720, 689, 721, 366, 50820], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 197, "seek": 81092, "start": 820.1999999999999, "end": 824.52, "text": " Which brings us back to apple's marketing buzzword of m1 ultrafusion", "tokens": [50828, 3013, 5607, 505, 646, 281, 10606, 311, 6370, 13036, 7462, 295, 275, 16, 3725, 10437, 5704, 51044], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 198, "seek": 81092, "start": 825.16, "end": 827.88, "text": " What have apple done with m1 ultrafusion?", "tokens": [51076, 708, 362, 10606, 1096, 365, 275, 16, 3725, 10437, 5704, 30, 51212], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 199, "seek": 81092, "start": 828.36, "end": 833.56, "text": " Well, effectively they have built a system like this. They've taken two m1 max chips", "tokens": [51236, 1042, 11, 8659, 436, 362, 3094, 257, 1185, 411, 341, 13, 814, 600, 2726, 732, 275, 16, 11469, 11583, 51496], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 200, "seek": 81092, "start": 834.04, "end": 837.88, "text": " And glued them together. So you've got two 10 core m1 max chips", "tokens": [51520, 400, 28008, 552, 1214, 13, 407, 291, 600, 658, 732, 1266, 4965, 275, 16, 11469, 11583, 51712], "temperature": 0.0, "avg_logprob": -0.11440598113196236, "compression_ratio": 1.6106870229007633, "no_speech_prob": 0.0009488409268669784}, {"id": 201, "seek": 83788, "start": 838.04, "end": 841.0, "text": " Each hacks to sing their own blocks of memory or two blocks each", "tokens": [50372, 6947, 33617, 281, 1522, 641, 1065, 8474, 295, 4675, 420, 732, 8474, 1184, 50520], "temperature": 0.0, "avg_logprob": -0.11510333719179612, "compression_ratio": 1.8546712802768166, "no_speech_prob": 0.004140361677855253}, {"id": 202, "seek": 83788, "start": 841.0, "end": 846.2, "text": " Which is why you can get up to 128 gig on there because you double the amount of cpu cause you can double the amount of memory", "tokens": [50520, 3013, 307, 983, 291, 393, 483, 493, 281, 29810, 8741, 322, 456, 570, 291, 3834, 264, 2372, 295, 269, 34859, 3082, 291, 393, 3834, 264, 2372, 295, 4675, 50780], "temperature": 0.0, "avg_logprob": -0.11510333719179612, "compression_ratio": 1.8546712802768166, "no_speech_prob": 0.004140361677855253}, {"id": 203, "seek": 83788, "start": 846.76, "end": 852.12, "text": " That they can access and what they've built in the middle the thing they call ultrafusion", "tokens": [50808, 663, 436, 393, 2105, 293, 437, 436, 600, 3094, 294, 264, 2808, 264, 551, 436, 818, 3725, 10437, 5704, 51076], "temperature": 0.0, "avg_logprob": -0.11510333719179612, "compression_ratio": 1.8546712802768166, "no_speech_prob": 0.004140361677855253}, {"id": 204, "seek": 83788, "start": 852.12, "end": 855.96, "text": " It's just a very very fast distributed shared memory link between the two", "tokens": [51076, 467, 311, 445, 257, 588, 588, 2370, 12631, 5507, 4675, 2113, 1296, 264, 732, 51268], "temperature": 0.0, "avg_logprob": -0.11510333719179612, "compression_ratio": 1.8546712802768166, "no_speech_prob": 0.004140361677855253}, {"id": 205, "seek": 83788, "start": 856.52, "end": 859.32, "text": " And I think what they've actually done is they've just made it so fast", "tokens": [51296, 400, 286, 519, 437, 436, 600, 767, 1096, 307, 436, 600, 445, 1027, 309, 370, 2370, 51436], "temperature": 0.0, "avg_logprob": -0.11510333719179612, "compression_ratio": 1.8546712802768166, "no_speech_prob": 0.004140361677855253}, {"id": 206, "seek": 83788, "start": 859.88, "end": 865.64, "text": " That actually the time it takes to go across from one cpu core to the other to get the value from the ram and", "tokens": [51464, 663, 767, 264, 565, 309, 2516, 281, 352, 2108, 490, 472, 269, 34859, 4965, 281, 264, 661, 281, 483, 264, 2158, 490, 264, 10211, 293, 51752], "temperature": 0.0, "avg_logprob": -0.11510333719179612, "compression_ratio": 1.8546712802768166, "no_speech_prob": 0.004140361677855253}, {"id": 207, "seek": 86564, "start": 866.1999999999999, "end": 870.36, "text": " Push it back into the cpu is so quick the latency is so low", "tokens": [50392, 18229, 309, 646, 666, 264, 269, 34859, 307, 370, 1702, 264, 27043, 307, 370, 2295, 50600], "temperature": 0.0, "avg_logprob": -0.10967892187613028, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.0034663043916225433}, {"id": 208, "seek": 86564, "start": 870.92, "end": 875.24, "text": " That effectively it behaves as if it was the uniform memory access system", "tokens": [50628, 663, 8659, 309, 36896, 382, 498, 309, 390, 264, 9452, 4675, 2105, 1185, 50844], "temperature": 0.0, "avg_logprob": -0.10967892187613028, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.0034663043916225433}, {"id": 209, "seek": 86564, "start": 875.24, "end": 878.04, "text": " It's fast enough that when the cpu requests the data", "tokens": [50844, 467, 311, 2370, 1547, 300, 562, 264, 269, 34859, 12475, 264, 1412, 50984], "temperature": 0.0, "avg_logprob": -0.10967892187613028, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.0034663043916225433}, {"id": 210, "seek": 86564, "start": 878.4399999999999, "end": 882.12, "text": " It gets it before it actually needs it in which point it doesn't slow it down", "tokens": [51004, 467, 2170, 309, 949, 309, 767, 2203, 309, 294, 597, 935, 309, 1177, 380, 2964, 309, 760, 51188], "temperature": 0.0, "avg_logprob": -0.10967892187613028, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.0034663043916225433}, {"id": 211, "seek": 86564, "start": 882.76, "end": 887.16, "text": " So it's a nice system because it means as a programmer. We don't have to worry about where", "tokens": [51220, 407, 309, 311, 257, 1481, 1185, 570, 309, 1355, 382, 257, 32116, 13, 492, 500, 380, 362, 281, 3292, 466, 689, 51440], "temperature": 0.0, "avg_logprob": -0.10967892187613028, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.0034663043916225433}, {"id": 212, "seek": 86564, "start": 887.8, "end": 891.3199999999999, "text": " The data is in relation to the cpu cause which one's attached to which", "tokens": [51472, 440, 1412, 307, 294, 9721, 281, 264, 269, 34859, 3082, 597, 472, 311, 8570, 281, 597, 51648], "temperature": 0.0, "avg_logprob": -0.10967892187613028, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.0034663043916225433}, {"id": 213, "seek": 89132, "start": 891.72, "end": 894.7600000000001, "text": " Core and things to make things run as fast as possible", "tokens": [50384, 14798, 293, 721, 281, 652, 721, 1190, 382, 2370, 382, 1944, 50536], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 214, "seek": 89132, "start": 895.1600000000001, "end": 898.9200000000001, "text": " We can just write our programs and let the operating system and the design of the hardware", "tokens": [50556, 492, 393, 445, 2464, 527, 4268, 293, 718, 264, 7447, 1185, 293, 264, 1715, 295, 264, 8837, 50744], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 215, "seek": 89132, "start": 899.32, "end": 902.84, "text": " Sort out the hard problems of executing it as fast as possible", "tokens": [50764, 26149, 484, 264, 1152, 2740, 295, 32368, 309, 382, 2370, 382, 1944, 50940], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 216, "seek": 89132, "start": 904.5200000000001, "end": 907.0, "text": " Chunks and do them all at the same time", "tokens": [51024, 761, 17627, 293, 360, 552, 439, 412, 264, 912, 565, 51148], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 217, "seek": 89132, "start": 907.6400000000001, "end": 913.4000000000001, "text": " So one way for example to make sandwiches faster is that you butter the bread faster", "tokens": [51180, 407, 472, 636, 337, 1365, 281, 652, 29022, 4663, 307, 300, 291, 5517, 264, 5961, 4663, 51468], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 218, "seek": 89132, "start": 913.4000000000001, "end": 915.8800000000001, "text": " You put the filling in faster. You put the bread faster the other person", "tokens": [51468, 509, 829, 264, 10623, 294, 4663, 13, 509, 829, 264, 5961, 4663, 264, 661, 954, 51592], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 219, "seek": 89132, "start": 915.8800000000001, "end": 920.44, "text": " It's also got an analysis of where I went wrong says Fred Brooks", "tokens": [51592, 467, 311, 611, 658, 364, 5215, 295, 689, 286, 1437, 2085, 1619, 10112, 33493, 51820], "temperature": 0.0, "avg_logprob": -0.21549666464865744, "compression_ratio": 1.7840909090909092, "no_speech_prob": 0.020093267783522606}, {"id": 220, "seek": 92044, "start": 920.44, "end": 923.48, "text": " Why did he make his name with that and what was it all about?", "tokens": [50372, 1545, 630, 415, 652, 702, 1315, 365, 300, 293, 437, 390, 309, 439, 466, 30, 50516], "temperature": 0.0, "avg_logprob": -0.23274257447984484, "compression_ratio": 0.9682539682539683, "no_speech_prob": 0.009069717489182949}], "language": "en"}