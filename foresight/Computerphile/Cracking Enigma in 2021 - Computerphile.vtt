WEBVTT

00:00.000 --> 00:04.000
So it was in the news that there's a 50 pound note coming out with Alan Turing on it.

00:04.000 --> 00:08.000
Now Alan Turing has been featured from time to time on our channel and rightly so.

00:08.000 --> 00:13.000
Dave's done some fabulous videos on all the work that he and a lot of others were doing at Bletchley Park,

00:13.000 --> 00:19.000
you know, cracking enigma. And it got me thinking, you know, now that we're in the 21st century

00:19.000 --> 00:23.000
and I've got a laptop that's much more powerful than all the chewing bombs put together,

00:23.000 --> 00:26.000
how easy is it to break enigma like today?

00:26.000 --> 00:30.000
But let's code it up and find out.

00:30.000 --> 00:34.000
The first thing I should say is Dave's done some really interesting videos on the history of enigma

00:34.000 --> 00:38.000
and do go and watch those. And it'll give you an idea of the sort of things they were doing

00:38.000 --> 00:41.000
to try and break enigma back during the 40s.

00:41.000 --> 00:43.000
Not to trivialise it, but it's really difficult, isn't it?

00:43.000 --> 00:48.000
It's really, really difficult. You know, this isn't something one does by hand, right? Not quickly.

00:48.000 --> 00:52.000
The enigma machine is not a stupid idea, right? It's well designed.

00:52.000 --> 00:55.000
The only thing that we've got now is much, much more processing power.

00:55.000 --> 01:01.000
And so things that we couldn't possibly brute force back then, maybe we can start to begin to brute force now,

01:01.000 --> 01:03.000
and that's what we're looking at today.

01:03.000 --> 01:08.000
So let's look very briefly at what an enigma machine is, and then we'll have a go at actually breaking one

01:08.000 --> 01:09.000
and see whether it holds up.

01:09.000 --> 01:13.000
If you recall, it has some lights on some letters and it has, this is my technical description,

01:13.000 --> 01:16.000
has some buttons that you press, keys are they called sometimes?

01:16.000 --> 01:19.000
So you press an A, right? You press an A and it goes into the machine

01:19.000 --> 01:21.000
and it goes through something called a plug board.

01:21.000 --> 01:23.000
And the plug board will swap it. So this is the plug board here.

01:23.000 --> 01:26.000
Now plugs just swap certain letters in pairs.

01:26.000 --> 01:30.000
So maybe this A comes out as A and F, right? Or something like that.

01:30.000 --> 01:33.000
Then this goes into the first rotor.

01:33.000 --> 01:37.000
And so that maybe comes out as a Q or something like that.

01:37.000 --> 01:39.000
So, you know, it sort of just wiggles around in here.

01:39.000 --> 01:45.000
And then this comes in, this comes out as maybe, you know, a P making this up.

01:45.000 --> 01:47.000
And then this goes into the next rotor.

01:47.000 --> 01:50.000
So stick to three rotor enigmas for today, hey?

01:50.000 --> 01:52.000
Comes out as a sort of an S.

01:52.000 --> 01:54.000
And then it goes through something called a reflector.

01:54.000 --> 01:57.000
So this is getting quite complicated, but this is all mechanical, right?

01:57.000 --> 02:02.000
These rotors literally physically turn around and they just have wires soldered from one end to the other that connect up.

02:02.000 --> 02:05.000
So the reflector just bounces, S goes to something else.

02:05.000 --> 02:06.000
I can't remember which letter it is.

02:06.000 --> 02:08.000
And then it goes back through this, like this.

02:08.000 --> 02:10.000
And then it comes around through the plug board again.

02:10.000 --> 02:13.000
So maybe that D goes to, I mean, A's over here.

02:13.000 --> 02:15.000
That was a bit silly of me, wasn't it?

02:15.000 --> 02:20.000
For the purposes of this, it's all absolutely fine.

02:20.000 --> 02:23.000
And this comes out as a Z, right?

02:23.000 --> 02:29.000
So in my weird botched enigma diagram, the A went in and it came out as a Z.

02:29.000 --> 02:31.000
It was an encrypted as a Z.

02:31.000 --> 02:33.000
Now, what's hard about this problem?

02:33.000 --> 02:36.000
Well, you can take these rotors out, right?

02:36.000 --> 02:37.000
Each rotor has different wiring.

02:37.000 --> 02:42.000
There's usually five or eight rotors to choose from and you can put them in any position you like.

02:42.000 --> 02:46.000
The next one is that every time you press a letter, one of the rotors rotates

02:46.000 --> 02:48.000
and sometimes it rotates the next rotors along.

02:48.000 --> 02:54.000
And that means that this mapping, this transformation changes every time you press a character.

02:54.000 --> 02:56.000
So you press A, it's not going to do the same thing again?

02:56.000 --> 03:01.000
No, actually, if you press A, the rotor first turns and then lights up a letter, right?

03:01.000 --> 03:03.000
So it's not going to do the same thing again.

03:03.000 --> 03:07.000
If you press A, A, A, A, A, A, the only thing you're guaranteed due to one of the quirks of enigmas

03:07.000 --> 03:10.000
is you won't get any A's back, but you'll get a lot of random letters.

03:10.000 --> 03:15.000
Back during the war, they solved this by trying to find possible rotor configurations

03:15.000 --> 03:21.000
that definitely couldn't work or could work based on some guest plain text.

03:21.000 --> 03:26.000
So maybe they had this idea that the first part of the message contained the word weather report

03:26.000 --> 03:29.000
and so if they put that in and then they could find all the encryptions

03:29.000 --> 03:32.000
that couldn't possibly have come out as weather report and so on

03:32.000 --> 03:34.000
and they could start to narrow down what their options were.

03:34.000 --> 03:38.000
Now, that's called a known plain text attack,

03:38.000 --> 03:42.000
but during the war, if they hadn't known the plain text, they wouldn't be able to crack a enigma bit.

03:42.000 --> 03:44.000
They didn't have the brute force power to do it.

03:44.000 --> 03:47.000
Nowadays, we have pretty fast laptops, right?

03:47.000 --> 03:51.000
And, you know, beyond my laptop, other computers are even faster than that, would you believe?

03:51.000 --> 03:55.000
So theoretically, we could start to try out some of these combinations, even if we didn't know any plain text.

03:55.000 --> 04:00.000
What we're going to be looking at, at least to begin with, is a cipher text-only attack.

04:00.000 --> 04:02.000
That's an attack where we've only got the cipher text.

04:02.000 --> 04:05.000
We don't have any idea what the plain text is

04:05.000 --> 04:08.000
and we want to see if we can guess what some of these settings would be.

04:08.000 --> 04:14.000
There's a few interesting weaknesses of enigma that make it a little bit practical to brute force,

04:14.000 --> 04:16.000
but not actually as much as you think.

04:16.000 --> 04:20.000
We talk a lot about how a letter doesn't encrypt ever to itself

04:20.000 --> 04:23.000
and that's quite relevant for plain text attacks, known plain text,

04:23.000 --> 04:27.000
because you can then work out where plain text definitely can't or could be.

04:27.000 --> 04:31.000
We're not doing that today, so I'm less worried about that particular property of enigma.

04:31.000 --> 04:37.000
More interesting to me is the fact that if you get some of the settings right,

04:37.000 --> 04:39.000
like you get this row to correct but these two wrong,

04:39.000 --> 04:43.000
that will often be better at decrypting than if you get them all wrong.

04:43.000 --> 04:47.000
So as we start to move slowly towards a solution,

04:47.000 --> 04:51.000
we get a little hint that maybe this cipher text isn't quite as good as it was

04:51.000 --> 04:53.000
and we can start measuring it.

04:53.000 --> 05:00.000
So really what we need to do is find some way of putting some cipher text into an enigma machine with some configuration

05:00.000 --> 05:04.000
and then reading the output and saying is that a plausible sentence or not.

05:04.000 --> 05:08.000
And preferably we'd like to do it really, really quickly because otherwise this could take a long time.

05:08.000 --> 05:11.000
So we're not going to be doing any deep learning, can't be bothered with that.

05:11.000 --> 05:15.000
We're going to use very simple statistical properties of text

05:15.000 --> 05:19.000
to try and measure whether one sentence is better as English than another sentence.

05:19.000 --> 05:24.000
And there's a few of these and I've implemented all of them because I thought well, let's just test them out.

05:24.000 --> 05:27.000
The first one is something called indexive coincidence.

05:27.000 --> 05:29.000
So let's suppose you have a cipher text.

05:29.000 --> 05:31.000
So for example, here it is.

05:31.000 --> 05:33.000
I'm just looking at random text, right?

05:33.000 --> 05:35.000
So yeah, okay.

05:35.000 --> 05:37.000
I'm just going to copy some random cipher text from here.

05:37.000 --> 05:39.000
So why can't I just randomize my own cipher text?

05:39.000 --> 05:40.000
I don't know.

05:40.000 --> 05:44.000
But I feel more comfortable copying it than I do just thinking up clever, interesting letters on my own.

05:44.000 --> 05:49.000
Well, so isn't there a number of files on the fact that I don't pick as random as I think and stuff like that?

05:49.000 --> 05:54.000
Z, E, B, H, W.

05:54.000 --> 05:56.000
This is some actual cipher text that we'll be breaking later.

05:56.000 --> 05:59.000
Does it honestly start with zoos as in Conrad's zoos?

05:59.000 --> 06:00.000
Yeah.

06:00.000 --> 06:01.000
In the reality of random, is it?

06:01.000 --> 06:02.000
Yeah, yeah, yeah, yeah.

06:02.000 --> 06:08.000
You see all kinds of words in the random cipher text and they mean absolutely nothing because it hasn't been decrypted yet.

06:08.000 --> 06:10.000
Oh, gee, yeah.

06:10.000 --> 06:11.000
Well, exactly.

06:11.000 --> 06:13.000
E, U.

06:13.000 --> 06:15.000
So let's suppose we have some cipher text like this.

06:15.000 --> 06:21.000
We guess some rotor settings and we put it through our enigma machine and that will decrypt it.

06:21.000 --> 06:23.000
Now, it will probably decrypt it incorrectly.

06:23.000 --> 06:31.000
But where we accidentally stumble upon the right plugs or we stumble upon the right rotor configuration, even for a briefly,

06:31.000 --> 06:35.000
we'll find that this decryption is slightly better than completely random, right?

06:35.000 --> 06:39.000
Because actually, mostly, this is completely random, right?

06:39.000 --> 06:43.000
Yes, we have this stipulation that letters can't turn to themselves.

06:43.000 --> 06:45.000
But generally speaking, it looks completely random.

06:45.000 --> 06:46.000
So this is what we get out.

06:46.000 --> 06:48.000
H, F.

06:48.000 --> 06:50.000
My writing is bad today.

06:50.000 --> 06:54.000
V, V, F, L, I, N, G.

06:54.000 --> 06:58.000
Now, the interesting thing about this is, I mean, it's complete nonsense, right?

06:58.000 --> 07:02.000
I'm not cracking any words on this, but I do recognise ING.

07:02.000 --> 07:09.000
Now, ING is a fairly common trigram or set of three characters in the English language, right?

07:09.000 --> 07:15.000
Now, that doesn't necessarily mean this is correct, but it's slightly more English, should we say, than this one, right?

07:15.000 --> 07:20.000
If we're measuring some amount of how English is this sentence, then it's a little bit closer than this.

07:20.000 --> 07:24.000
So maybe one of our rotors is in the right position and the others are wrong, right?

07:24.000 --> 07:28.000
Or our rotors are in the correct position, but our plugs are wrong, or something like this, right?

07:28.000 --> 07:36.000
And the idea is that we slowly go through different configurations of our enigma machine, I say slowly as fast as we can, right?

07:36.000 --> 07:44.000
And we measure statistical properties of these output sentences to find the ones that most closely resemble correct, decrypted text, right?

07:44.000 --> 07:48.000
And we can do this without looking at them. We don't have to look at them and say, well, that's a real word.

07:48.000 --> 07:51.000
We just measure statistical properties.

07:51.000 --> 07:53.000
So what are some of these statistical properties?

07:53.000 --> 07:58.000
Well, the first one is called the index of coincidence, or IOC.

07:58.000 --> 08:03.000
This is the probability that when you pick two letters at random, they'll be the same.

08:03.000 --> 08:07.000
So for example, if we randomly pick P and then we randomly pick P, that's versus the same.

08:07.000 --> 08:09.000
If we pick P and then L, they're not the same.

08:09.000 --> 08:11.000
You know, we won't write the form out. The form is not that complicated.

08:11.000 --> 08:17.000
So what you have to do is go through and count every single character and how many of each one there are.

08:17.000 --> 08:21.000
You produce a histogram and then you can calculate the index of coincidence based on this.

08:21.000 --> 08:30.000
Now, for random text, that is text that's been put through an enigma machine and not decrypted, the index of coincidence is usually something like 0.038, right?

08:30.000 --> 08:35.000
Which is basically everything's evenly distributed. There's nothing interesting going on there at all.

08:35.000 --> 08:42.000
But for decrypted English text, we usually get a higher index of coincidence about 0.067.

08:42.000 --> 08:44.000
And I think it's something like 0.072 for German text.

08:44.000 --> 08:50.000
One way of looking at it is it measures the fact that some characters have more higher probabilities than others.

08:50.000 --> 08:52.000
If everything's equally likely, you get something like this.

08:52.000 --> 08:57.000
If some characters are quite common and so they tend to come up in pairs, it starts to look a little bit higher, right?

08:57.000 --> 08:58.000
It never goes higher than this.

08:58.000 --> 09:00.000
So, well, you're not really.

09:00.000 --> 09:05.000
What we can do is we can work through our rotors, different rotors, different positions, different settings,

09:05.000 --> 09:11.000
and we can calculate our index of coincidence and we take the best scoring texts, right?

09:11.000 --> 09:16.000
So where our output has a higher index of coincidence, we think maybe we've got the rotor settings correct, right?

09:16.000 --> 09:18.000
And that's basically how it works.

09:18.000 --> 09:22.000
There's been a number file, right, where they actually got to use an enigma machine and I'm super jealous.

09:22.000 --> 09:24.000
They talked about the number of different combinations.

09:24.000 --> 09:30.000
So it's all very well saying, OK, we'll just go through all the rotor settings and work out, you know, what the best one is, right?

09:30.000 --> 09:33.000
Maybe if I have, you know, a super, super, super computer.

09:33.000 --> 09:38.000
But actually, enigma has a nifty weakness in this sense, right?

09:38.000 --> 09:43.000
Which is that if you get some of the settings correct, this will improve, right?

09:43.000 --> 09:47.000
If I get the rotor positions correct, even though the rotors are in slightly the wrong position,

09:47.000 --> 09:51.000
the result will be better than if I've got the wrong rotors in place, right?

09:51.000 --> 09:56.000
If I get one of the plug board settings, right, the results will be better than if I've got none of the plug board settings, right?

09:56.000 --> 10:00.000
Because basically fewer characters will be incorrect, right?

10:00.000 --> 10:07.000
Suthily. So you've got three out of, let's say, five rotors or eight rotors.

10:07.000 --> 10:10.000
So that's physically the three that happen to be in the machine at the time.

10:10.000 --> 10:12.000
Yeah, and you've got very different positions, right?

10:12.000 --> 10:16.000
So if for today we just talk about five rotors just because I've always been sitting here a little bit longer,

10:16.000 --> 10:19.000
then we've got 60 possible positions.

10:19.000 --> 10:22.000
One, we've got to choose three out of five, and then they can all go in any slot.

10:22.000 --> 10:25.000
You don't tend to have the same rotor twice, right?

10:25.000 --> 10:28.000
Because, I mean, they didn't have those duplicates of rotors.

10:28.000 --> 10:29.000
One set of them.

10:29.000 --> 10:31.000
Yeah, yeah, yeah.

10:31.000 --> 10:33.000
Yeah. So we've got that.

10:33.000 --> 10:37.000
Then for each of these, we have a start position from one to 26,

10:37.000 --> 10:40.000
which is, you know, what letter is showing on the top, right?

10:40.000 --> 10:42.000
Basically how rotated it is.

10:42.000 --> 10:45.000
So you've got the start position or the indicator setting.

10:45.000 --> 10:50.000
So there's, you know, times, I said, 26 of those times by three of the different rotors, right?

10:50.000 --> 10:52.000
Then you've got the ring setting.

10:52.000 --> 10:56.000
Now, the ring setting is essentially rotating the internals of the rotor.

10:56.000 --> 11:00.000
Now, actually, if we ignore the notch for a minute, which I'll talk about,

11:00.000 --> 11:06.000
if you rotate the ring and you rotate the actual whole rotor, they kind of cancel each other out.

11:06.000 --> 11:09.000
So it's about the notch position, really.

11:09.000 --> 11:13.000
The notch is when the rotor turns, it turns the next one along.

11:13.000 --> 11:18.000
And so the combination of your start position and your ring setting will mean where your notch is and then when it turns around.

11:18.000 --> 11:20.000
So you've got the ring settings, right?

11:20.000 --> 11:22.000
Which is going to be 26 times three again.

11:22.000 --> 11:25.000
Then we've got the plug board, which, as you know, swaps random characters,

11:25.000 --> 11:30.000
and that's got something like 10 different pairs out of 13 possible pairs.

11:30.000 --> 11:33.000
That's 150 trillion, I think, different combinations.

11:33.000 --> 11:36.000
That's, you know, out of reach of my laptop.

11:36.000 --> 11:40.000
Certainly when I'm doing all these decryptions as well and we're multiplied by all these things, right?

11:40.000 --> 11:42.000
The number file goes into much better detail on this.

11:42.000 --> 11:46.000
We're looking at five today because, again, I don't want to be here all day.

11:46.000 --> 11:48.000
It does get harder to solve and we'll talk about that.

11:48.000 --> 11:49.000
So this is a lot of combinations.

11:49.000 --> 11:54.000
It's too many combinations for me to go through, even with this nice little indictical coincidence thing, right?

11:54.000 --> 11:57.000
Even though when I get this exactly right, I will just get the plain text out

11:57.000 --> 12:00.000
and it will have a very nice indictical coincidence and I might be able to find it.

12:00.000 --> 12:02.000
So what do we do?

12:02.000 --> 12:06.000
Well, the weakness of enigma is that if we get some of these things right,

12:06.000 --> 12:10.000
even if the others are wrong, we get a little bit closer to the answer, usually.

12:10.000 --> 12:15.000
So, for example, if you get the correct three rotors in the correct positions

12:15.000 --> 12:19.000
and you get their start positions roughly correct, if your ring settings are wrong,

12:19.000 --> 12:21.000
all that will do is mess around with the notches.

12:21.000 --> 12:26.000
So you'll get bits of your plain text correct and then bits of cypher text and then bits of plain text

12:26.000 --> 12:31.000
and you get these kind of pockets of valid characters coming out of into the decryption.

12:31.000 --> 12:34.000
It will still score better on IOC or any other metric.

12:34.000 --> 12:35.000
So that's what we're going to do.

12:35.000 --> 12:37.000
And this is the same with the plugs.

12:37.000 --> 12:41.000
If we get the rotors and the start positions and the ring settings correct,

12:41.000 --> 12:43.000
then we can start to guess plugs.

12:43.000 --> 12:47.000
And generally speaking, if we guess one correctly, the output would be better

12:47.000 --> 12:49.000
and we can then move towards a solution.

12:49.000 --> 12:53.000
There's a lot of possible variations, but the fact that we can deal with some of them at a time

12:53.000 --> 12:55.000
makes this practical.

12:55.000 --> 12:58.000
If we had to brute force through all the different variations, it wouldn't be possible.

12:58.000 --> 12:59.000
That's the idea.

12:59.000 --> 13:01.000
So I've written some code to do this.

13:01.000 --> 13:04.000
If you want to have a go, I'll make my code available,

13:04.000 --> 13:08.000
but also there's a really good online tool called Crypto, which lets you do this in a visual way.

13:08.000 --> 13:10.000
We'll put a link to that in the description.

13:10.000 --> 13:12.000
But I've written some pretty simple code here.

13:12.000 --> 13:14.000
I implemented enigma machine because it was fun.

13:14.000 --> 13:18.000
And then I implemented a number of different fitness functions,

13:18.000 --> 13:21.000
which is how good is our decryption.

13:21.000 --> 13:23.000
Index of coincidence is one.

13:23.000 --> 13:26.000
I also maybe can talk about some others another time.

13:26.000 --> 13:28.000
So you were kind of sending some cypher text.

13:28.000 --> 13:29.000
I don't know what it is.

13:29.000 --> 13:33.000
And it's been encrypted by some enigma configuration with, I think, five plugs.

13:33.000 --> 13:38.000
The first thing I do is I go through all the different rotor configurations.

13:38.000 --> 13:43.000
And I find the one that has the highest index of coincidence score when it decrypts that message.

13:43.000 --> 13:50.000
So this is five different rotors, each one tried in each position and each starting position.

13:50.000 --> 13:52.000
So that's 26 for each one.

13:52.000 --> 13:55.000
So that's quite a few combinations, about 17,000.

13:55.000 --> 13:59.000
But 17,000 for a laptop in 2021, not such a big deal.

13:59.000 --> 14:03.000
It takes somewhere around 10 seconds or something like that.

14:03.000 --> 14:06.000
So you can see what it's doing now is it's stepping through the different rotors.

14:06.000 --> 14:09.000
So one, two, three, one, two, four, one, two, five.

14:09.000 --> 14:12.000
And we've done about 10 or 15 configurations already.

14:12.000 --> 14:15.000
And for each of these, it's going through all the different starting positions.

14:15.000 --> 14:18.000
But we're not looking at ring settings and we're not looking at plug board

14:18.000 --> 14:22.000
because that would just multiply this astronomically by the number of things we have to do.

14:22.000 --> 14:25.000
So we're already on rotor three in the left-hand side.

14:25.000 --> 14:26.000
We're keeping going.

14:26.000 --> 14:29.000
This same thing works exactly the same for eight rotors.

14:29.000 --> 14:30.000
It doesn't really change anything.

14:30.000 --> 14:33.000
It just takes slightly longer and I'm a bit lazy.

14:33.000 --> 14:36.000
So I have actually coded up the other rotors as well.

14:36.000 --> 14:40.000
Interestingly enough, some of the later rotors have two notches on, right?

14:40.000 --> 14:43.000
Which is not, it doesn't make any difference in terms of the cracking because...

14:43.000 --> 14:46.000
So that just means it turns the next one twice as often, right?

14:46.000 --> 14:48.000
Yeah, yeah, twice as often.

14:48.000 --> 14:51.000
Only really affects the first two rotors.

14:51.000 --> 14:53.000
The last one doesn't ever really turn that often.

14:53.000 --> 14:55.000
And it doesn't have any other rotors to turn.

14:55.000 --> 14:58.000
So here what we've got is we've got a list of the top performing rotor configurations.

14:58.000 --> 15:01.000
So two, five, three is the best performing rotor configuration.

15:01.000 --> 15:04.000
We start positions at 21, three, and 25.

15:04.000 --> 15:06.000
I'm using zero indexing, right?

15:06.000 --> 15:08.000
Which is not how you would normally do it in Enigma,

15:08.000 --> 15:10.000
but it's easier for my ray indexing to do this, right?

15:10.000 --> 15:14.000
And that has an index of, for instance, of 0.043,

15:14.000 --> 15:16.000
which is a lot higher than 38.

15:16.000 --> 15:17.000
I say it's a lot higher.

15:17.000 --> 15:18.000
It's a little bit higher.

15:18.000 --> 15:19.000
Good enough.

15:19.000 --> 15:23.000
So that suggests to me, I mean, we actually, I listed the top 10 here

15:23.000 --> 15:25.000
because sometimes you might not get the one on the top one.

15:25.000 --> 15:28.000
You might get the next rotor configuration or something like this.

15:28.000 --> 15:31.000
It's worth maybe, if you were trying to really actually pay attention to this,

15:31.000 --> 15:35.000
what you would do is maybe start doing further attacks on the top three rotor configurations

15:35.000 --> 15:37.000
just to keep your options open.

15:37.000 --> 15:43.000
So we're going to fix at two, five, and three because, you know, it saves time, right?

15:43.000 --> 15:50.000
So given rotors two, five, three from left to right and their starting positions,

15:50.000 --> 15:53.000
what we now can do is we can start to brute force through the ring settings.

15:53.000 --> 15:56.000
So we can find the best possible ring settings, right?

15:56.000 --> 16:01.000
Now, this is almost instant because there's now only a 600 or so of those, right?

16:01.000 --> 16:05.000
We don't need to try the left-hand rotor because it doesn't really rotate.

16:05.000 --> 16:07.000
And so we do that and it's already happened.

16:07.000 --> 16:10.000
And the best ring positions were 0, 3, 23.

16:10.000 --> 16:11.000
Right.

16:11.000 --> 16:15.000
Now, for zero, we ignore because it's not the ring possessing, remember,

16:15.000 --> 16:19.000
affects where the notch is and the left rotor doesn't turn anything over.

16:19.000 --> 16:21.000
It doesn't have any effect.

16:21.000 --> 16:25.000
So given that, this is the ciphertext we've got out.

16:25.000 --> 16:31.000
This was our original ciphertext and this is our slightly better ciphertext.

16:31.000 --> 16:34.000
Now, it still looks like total nonsense, right?

16:34.000 --> 16:37.000
But it has a much higher index of coincidence score than the original,

16:37.000 --> 16:39.000
which means in some sense it's less random.

16:39.000 --> 16:44.000
So if you look, you might start to see groups of letters that might be a real word.

16:44.000 --> 16:45.000
They might not.

16:45.000 --> 16:46.000
I don't know, right?

16:46.000 --> 16:49.000
But some of the real letters are going to come out here.

16:49.000 --> 16:51.000
We might not be able to see what they are.

16:51.000 --> 16:55.000
So given this, we can finally start addressing this really problematic plug board situation.

16:55.000 --> 17:00.000
Remember, there's far too many plug board combinations to realistically just try them all.

17:00.000 --> 17:04.000
But again, we have this wonderful benefit that if we get one of the plugs correct,

17:04.000 --> 17:07.000
the result will probably be better than if we got none of them right.

17:07.000 --> 17:12.000
So all we do is we go through each of the first 300 and so different possible plugs,

17:12.000 --> 17:15.000
just one at a time, and we see which the best one is.

17:15.000 --> 17:19.000
And then we fix it, and we do the next for the next one, and that's two plugs.

17:19.000 --> 17:22.000
And then we do for the next for the next one, and that's three plugs, right?

17:22.000 --> 17:23.000
And so on.

17:23.000 --> 17:28.000
And if we do that, we very quickly come up with a few sets of plugs.

17:28.000 --> 17:31.000
And our ciphertext is starting to look a lot better.

17:31.000 --> 17:32.000
So this is our ciphertext here.

17:32.000 --> 17:38.000
The first letters are nonsense, but then it's proposed to consider the quest.

17:38.000 --> 17:39.000
Consider the quest.

17:39.000 --> 17:41.000
Can machines think?

17:41.000 --> 17:43.000
See, now I'm starting to guess what this might be.

17:43.000 --> 17:44.000
I see what you've done here.

17:44.000 --> 17:45.000
This is the Alan Turing paper.

17:45.000 --> 17:47.000
So some of the letters are wrong, right?

17:47.000 --> 17:53.000
So it should be I propose to consider, and it's J propose to consider, right?

17:53.000 --> 17:54.000
And we're nearly there.

17:54.000 --> 17:58.000
But that's because when we optimize the rotor configuration, we fix the rings at 0000.

17:58.000 --> 18:01.000
So it was never going to find the exact correct thing.

18:01.000 --> 18:03.000
So essentially the turnover is slightly wrong.

18:03.000 --> 18:06.000
Everything's slightly wrong, but it's still pretty good.

18:06.000 --> 18:10.000
Now, if we go back to our original question as to how secure is Enigma,

18:10.000 --> 18:13.000
the answer is not very secure, right?

18:13.000 --> 18:15.000
The reason is not because it's trivial to break, right?

18:15.000 --> 18:17.000
This took me a little bit of effort.

18:17.000 --> 18:20.000
And for short messages where these fitness functions start to break down

18:20.000 --> 18:24.000
because you don't have enough information, they're actually very robust, right?

18:24.000 --> 18:29.000
For a 50 character message, very, very difficult to break using something like an index of coincidence.

18:29.000 --> 18:33.000
Because even if some of the letters start to appear right, there's not very many of them.

18:33.000 --> 18:34.000
The index is just noise.

18:34.000 --> 18:39.000
In the war, they limited or they attempted to limit messages to something like 200, 250 characters

18:39.000 --> 18:42.000
for this reason, because index of coincidence was already known, right?

18:42.000 --> 18:46.000
And there's now more powerful metrics like trigram scores and quadram scores,

18:46.000 --> 18:50.000
which I've also implemented, which often work better, particularly for the plug board.

18:50.000 --> 18:55.000
And so if you have a short message, you don't get very much information

18:55.000 --> 18:58.000
on the different frequencies of different groups of letters.

18:58.000 --> 19:01.000
And so there's really no way to know what's going on at all.

19:01.000 --> 19:04.000
And you get very lucky where you don't, and most likely you don't.

19:04.000 --> 19:06.000
But the other issue is, of course, the number of plugs.

19:06.000 --> 19:09.000
I've only done five plugs here, so I've cheated a bit, right?

19:09.000 --> 19:15.000
For most German messages that are sent using 10 plugs, you're going to need 1200 to 1500 characters

19:15.000 --> 19:18.000
before fitness functions are going to start to give you something, right?

19:18.000 --> 19:23.000
If you know what the plain text might be, this becomes much, much easier, right?

19:23.000 --> 19:26.000
Because if you can fix these characters have to be exactly this,

19:26.000 --> 19:28.000
your fitness function is much less noisy, right?

19:28.000 --> 19:30.000
And actually, I've implemented that as well.

19:30.000 --> 19:33.000
And it just starts breaking it like nobody's business, right?

19:33.000 --> 19:35.000
So it is crackable, right?

19:35.000 --> 19:36.000
If you can guess what plain text is.

19:36.000 --> 19:41.000
And of course, modern cryptography assumes you know what the plain text is, right?

19:41.000 --> 19:43.000
At least for some of the message.

19:43.000 --> 19:46.000
For example, whenever you send an HTTP message to a web server,

19:46.000 --> 19:50.000
the beginning bit always says HTTP get or something similar, right?

19:50.000 --> 19:52.000
But there's a very known structure to these things.

19:52.000 --> 19:54.000
You can start to guess what they would be.

19:54.000 --> 19:58.000
We can't assume that you wouldn't know what any of the plain text was.

19:58.000 --> 20:01.000
But even if we don't, you can see that these index of coincidence

20:01.000 --> 20:05.000
and trigam scores and things can start to tease out some information.

20:06.000 --> 20:09.000
So, going back to the beginning.

20:09.000 --> 20:12.000
Enigma is actually harder to crack than I thought, right?

20:12.000 --> 20:15.000
People always talk about how hard it was to crack during the war.

20:15.000 --> 20:16.000
And that's absolutely fine.

20:16.000 --> 20:19.000
But you just kind of assume that now it's 2021.

20:19.000 --> 20:21.000
Laptops should be able to just click, go through all the settings,

20:21.000 --> 20:23.000
find yourself the ciphertext.

20:23.000 --> 20:25.000
It doesn't really work that way, right?

20:25.000 --> 20:27.000
You have to try and stumble your way towards it.

20:27.000 --> 20:28.000
And often it doesn't work.

20:28.000 --> 20:30.000
And there's noise in the output.

20:30.000 --> 20:32.000
And so you have to try and work out whether what you're seeing

20:32.000 --> 20:35.000
is actually improvement or not, and so on,

20:35.000 --> 20:36.000
which I think is quite interesting.

20:36.000 --> 20:38.000
Modern ciphers don't have this problem.

20:38.000 --> 20:41.000
If you have a 128-bit AES key,

20:41.000 --> 20:43.000
you can't brute-force the first bit

20:43.000 --> 20:49.000
because the zero or one won't give you any better or worse plain text.

20:49.000 --> 20:51.000
It will just be nonsense each time.

20:51.000 --> 20:52.000
And that's true of any amount.

20:52.000 --> 20:54.000
So you can't do the first half of the key

20:54.000 --> 20:55.000
and then the second half of the key,

20:55.000 --> 20:57.000
which is kind of what we're doing here.

20:57.000 --> 21:00.000
So modern ciphers don't have this problem.

21:02.000 --> 21:03.000
And so on.

21:03.000 --> 21:06.000
We can't do a lot of interesting things with this image

21:06.000 --> 21:08.000
after just one set of convolutions,

21:08.000 --> 21:09.000
but we're getting there.

21:09.000 --> 21:11.000
So this one is starting to be transformed.

21:11.000 --> 21:12.000
Some of them are noisier than others.

21:12.000 --> 21:14.000
Some of them were paint associated with it,

21:14.000 --> 21:17.000
showing which was the proper setting with A at the top

21:17.000 --> 21:19.000
and A against the dot of paint.

