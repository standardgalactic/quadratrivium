WEBVTT

00:00.000 --> 00:04.080
So what we should really talk about next is how teams use Git, because that's the other function.

00:04.080 --> 00:09.760
Git protects your code from other people in a way, right? So it's designed to stop, you know,

00:09.760 --> 00:13.600
say there's a company with like 100 developers in it and they're all working on different parts of

00:13.600 --> 00:20.000
the code base and that code base is stored in a Git repository. It's got to find a way to make sure

00:20.000 --> 00:24.960
that developer number 50 doesn't overwrite the code to developer number 12 when they're working on

00:24.960 --> 00:32.240
like the same area. So this involves a mixture of things. This involves Git protecting code when

00:32.240 --> 00:38.640
you're trying to do Git pushes and Git commits, but it also involves coordination between people.

00:38.640 --> 00:43.360
And so one thing, one of the main reasons you will see things like GitHub and Git labs being used

00:43.920 --> 00:49.200
is because those products, those sort of online websites provide you with lots of other features

00:49.200 --> 00:55.440
that are sort of added around Git functionality to help you communicate with each other and coordinate.

00:57.840 --> 01:02.160
So let's talk about first the Git pushes and Git commits and what would happen in practice.

01:03.120 --> 01:07.200
So if you have two developers and they're both being tasked on fixing a bug at the same time

01:07.760 --> 01:12.640
and to fix that bug, they both need to make a change to one particular file. So maybe I'm editing

01:12.720 --> 01:18.160
files one, two and four and he's editing files three, five and four, but we're both going to edit

01:18.160 --> 01:22.400
file four at some point. This becomes a situation that Git needs to manage for you.

01:23.600 --> 01:28.640
So if person one edits those three files, including file four, creates a Git commit

01:28.640 --> 01:32.240
and pushes them to the server, that's fine. The server will accept it because there hasn't been

01:32.240 --> 01:38.400
any updates from anybody else. It's fine with that. The second person will create their Git

01:38.400 --> 01:44.640
commits and then type in Git push and then the server will say, no, you can't do that because

01:44.640 --> 01:49.200
from the last time you downloaded the latest version, someone else has added more content.

01:49.200 --> 01:54.240
So your version is out of date basically and it will force you to get yours up to date

01:54.240 --> 01:59.280
before it will let you push. So there's a really handy feature is protecting the code by stopping

01:59.280 --> 02:06.160
one person overwriting someone else. So then what you have to do is type Git pull if you're that

02:06.240 --> 02:11.600
second person. You can do a couple of things. You can do Git fetch which downloads metadata about

02:11.600 --> 02:16.160
what has changed and then you can manually and carefully merge things or you can just type in

02:16.160 --> 02:20.480
Git pull and it will pull down the latest version and it will try to automatically merge everything.

02:21.280 --> 02:26.080
So for those separate files that you both edited and even if you're in one file and you edited

02:26.080 --> 02:30.160
different bits of the file, Git will say, when you download the latest version, it'll say, great,

02:30.160 --> 02:35.280
I can merge your changes with the latest version and just does it for you. But if you both edit

02:35.280 --> 02:40.800
the same sort of area and Git isn't sure, it's very good then it says, oh okay, I can't do that.

02:40.800 --> 02:47.120
I'm not smart enough. As a bit of software, we need a human who is more smart to tell me what

02:47.120 --> 02:52.560
should have happened here. So what it will do is it will add both of your lines of code into the

02:52.560 --> 02:58.400
file with like some metadata above it. You see a bunch of side arrows and then the word head

02:58.400 --> 03:03.520
and then you see the first person's code and then you see like a separator in the middle

03:03.520 --> 03:08.080
and the second person's code. And then some other line, the arrow is facing the other way

03:08.640 --> 03:13.840
to show you the last, the commit you've been making. And it will say, okay, as a human,

03:13.840 --> 03:20.160
you tell me which one to keep or if I should keep a bit of both, figure it out intelligently.

03:20.160 --> 03:24.880
And so your job then is to delete the metadata lines and delete the lines of code that don't

03:24.880 --> 03:32.400
need to be there anymore and do the merge cleverly as a human. So that's, it's sometimes a painful

03:32.400 --> 03:37.120
process. It involves you communicating maybe with the other human to make sure that, you know,

03:37.120 --> 03:40.640
why did you do that? Why did I do this? You know, do we need to keep both that sort of thing?

03:41.440 --> 03:44.880
And then once you've merged it, you can then create and you commit and then you can push

03:44.880 --> 03:49.440
the server, hoping that no one else has pushed something in the meantime. But it's your job

03:49.440 --> 03:52.800
as a developer to make sure that you're going to push something that doesn't break other people

03:52.800 --> 03:57.840
and get helps you do that by saying no. Because I can imagine that if you're two developers working

03:57.840 --> 04:02.960
for, say, someone like YouTube, and you're both working on the code base for YouTube servers,

04:02.960 --> 04:08.560
if you need to sort of subtly adjust that, that could affect nearly everybody working on all

04:08.560 --> 04:12.160
the different areas. So yeah, for sure, in principle, you're right that there's these bits

04:12.160 --> 04:16.800
that might get reused by lots of people. In practice, those bits would also be carefully

04:16.800 --> 04:20.960
protected either through procedure or through, because the one thing you can do is you can

04:22.480 --> 04:27.280
limit people to pulling areas of code, you know, or sub projects within Git on the server so that

04:27.840 --> 04:31.040
not everybody is doing. And some bits which are really crucial that are going to affect millions

04:31.040 --> 04:34.640
of users, they, you know, they will have serious protection lines. And that's actually the best

04:34.640 --> 04:39.520
thing we should talk about next is the kind of process that teams go through to make sure they

04:39.520 --> 04:46.400
coordinate who's doing what. So companies like GitHub and GitLab, they have added these extra

04:46.400 --> 04:53.440
features like milestones and issues, issues like tickets, things that need doing. And so

04:54.400 --> 04:57.680
what they'll say is, okay, here's a ticket that needs like a bug that needs fixing or a new

04:57.680 --> 05:03.040
feature we want to add, and we'll assign it to a person or a set of people. And those people will

05:03.040 --> 05:08.480
be responsible for writing the codes that will resolve that ticket. So what they'll do in practice,

05:08.480 --> 05:12.320
actually, is kind of interesting. The team is most likely to then create a temporary branch,

05:12.320 --> 05:16.400
which we've talked about before, with the idea of that ticket as this kind of name,

05:16.400 --> 05:20.160
because otherwise you'd have millions of tickets, millions of numbers. So you name the branch after

05:20.160 --> 05:25.280
the kind of ticket you're trying to fix, the issue you're trying to fix. And then as a group,

05:25.280 --> 05:29.360
you'll work only on that version that's set aside. So you're not disrupting the main version of your

05:29.360 --> 05:34.160
software, you're not disrupting the main branch, you're working on like this side developer branch,

05:34.160 --> 05:39.600
just for this particular issue. And then you will all kind of work on that, finish it, test it

05:39.600 --> 05:45.600
yourself probably. And then you will push that code onto the server. And then you will create

05:45.600 --> 05:48.960
what's called a merger request or a pull request, depending on what, whether you're using GitHub

05:48.960 --> 05:55.760
or GitHub. So they've got slightly different language. One that really then says is we want a

05:55.760 --> 06:01.280
senior developer to check it's all okay and then merge it if it's fine. And that's not that job

06:01.280 --> 06:05.840
is normally reserved for someone who's job that they've got the authority to check something and

06:05.840 --> 06:09.520
check it's good. And also to put it do something risky, like merge it with the product you're

06:09.520 --> 06:14.960
about to release, you know, some more senior people may be given that job. And so you can ask

06:15.680 --> 06:23.920
lab or GitHub to notify people that like a new set of code for an issue is ready to review.

06:23.920 --> 06:27.200
And companies will have review processes that are there required to do like someone will check that

06:27.200 --> 06:32.000
it meets legal standards. Someone will check that the code structure conforms to the company's

06:32.000 --> 06:35.200
standards and that sort of thing. And people will say, yes, this looks fine to me. Yes,

06:35.200 --> 06:39.120
it's fine to me or no, go back and do more. And it creates a conversation forces them to have a

06:39.120 --> 06:43.520
conversation. And then only when they're happy with it, the senior person will do the job of

06:43.600 --> 06:48.960
get merge and merge it into some sort of main main version of the software.

06:49.920 --> 06:53.040
What you'll find is some companies, they will have the main version, which is like

06:53.040 --> 06:58.480
their release product, not have like a release candidate branch. And the people who are doing

06:58.480 --> 07:03.840
their fixes are branching from that branch. And so they make sure the side one works. And then

07:03.840 --> 07:08.160
only then at some point in the future, this okay, this is a release ready version that we have

07:08.160 --> 07:13.120
collectively built. And then someone really important will carefully make that a public thing

07:13.120 --> 07:19.440
for someone to use. So lots of companies will protect what's the main branch or protect different

07:19.440 --> 07:25.200
versions. And they won't give permissions to types of users like developers to push directly to that

07:25.200 --> 07:30.400
because that will break it. So might break it, they're really worried that people will just

07:30.400 --> 07:33.600
push a version and delete, you know, delete something critical to the main version of the

07:33.600 --> 07:38.080
software. So all these protections and processes are put in place to help teams collaborate.

07:38.640 --> 07:42.240
But I mentioned earlier that sometimes they create like a beta version, and they name the

07:42.240 --> 07:47.280
version with the git tag like a beta release ready or release candidate. What they're doing is

07:47.280 --> 07:52.960
they're releasing the software to a set of authorized users who are able to download that beta version.

07:53.600 --> 08:00.320
And then hopefully there's more expert sort of known beta users will say, oh, I found something

08:00.320 --> 08:04.640
that breaks and then let you know before you release it to the whole world. And you can actually

08:04.640 --> 08:08.000
do that with Chromium, which we talked about before, because on Chromium, you can download

08:08.000 --> 08:12.160
the latest beta version, you can download the latest release candidates, you can download

08:12.160 --> 08:17.440
the final version they ended up with yesterday. So you can choose as a developer to go and get

08:17.440 --> 08:21.200
these potentially buggy versions and help them to debug it by being part of a sort of

08:22.000 --> 08:26.160
small unknown community. And all the people that don't know what a beta is in practice,

08:26.720 --> 08:32.080
they just download official releases that Chrome tells them to update when they're told to update.

08:32.080 --> 08:37.360
So it is handy having these kind of first set of people that will try something to show that it

08:37.360 --> 08:41.360
breaks, which is normally like your own developer community. And then a slightly broader community

08:41.360 --> 08:46.320
you're happy to have the beta version of. And then when it's been tested by lots of people,

08:46.320 --> 08:49.520
then it goes out. Because of course, there are benefits in having the beta version, it might

08:49.520 --> 08:53.760
have new features that, you know, nobody else has got right. Yeah. And so like, I know a lot of

08:53.760 --> 08:56.800
computer science students are always happy to get like the latest beta version. And for a while,

08:56.800 --> 09:03.680
I was subscribing to the latest release candidate of Mac OS X. And that was fine until like the

09:03.680 --> 09:09.520
first release candidate for two weeks, they broke Apple Mail, you know, and which, you know,

09:09.520 --> 09:12.640
if people were using this on test machines, that wouldn't matter because I was using it on my main

09:12.640 --> 09:16.640
work machine and suddenly I couldn't use Apple Mail for two weeks. But you know, as a person who's

09:16.640 --> 09:21.440
happy to test release candidates or beta versions, you expect that stuff maybe doesn't work entirely.

09:21.440 --> 09:25.600
You get early access to features. That's maybe exciting. And probably you're technically competent

09:25.600 --> 09:30.080
enough to not worry if something breaks or, you know, delete your beta version and then download

09:30.080 --> 09:35.680
the proper version if you really need it. So what happens is we so we'd have to go over here

09:36.560 --> 09:41.920
across the distributed shared memory link to get the value and then we could bring the value back.

09:41.920 --> 09:46.960
So rather than taking 100 nanoseconds, it would just trying to get packets from one lab to another.

09:46.960 --> 09:52.560
Now, obviously, by 1986, we've got lots of things in Europe.

