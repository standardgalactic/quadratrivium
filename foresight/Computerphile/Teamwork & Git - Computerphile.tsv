start	end	text
0	4080	So what we should really talk about next is how teams use Git, because that's the other function.
4080	9760	Git protects your code from other people in a way, right? So it's designed to stop, you know,
9760	13600	say there's a company with like 100 developers in it and they're all working on different parts of
13600	20000	the code base and that code base is stored in a Git repository. It's got to find a way to make sure
20000	24960	that developer number 50 doesn't overwrite the code to developer number 12 when they're working on
24960	32240	like the same area. So this involves a mixture of things. This involves Git protecting code when
32240	38640	you're trying to do Git pushes and Git commits, but it also involves coordination between people.
38640	43360	And so one thing, one of the main reasons you will see things like GitHub and Git labs being used
43920	49200	is because those products, those sort of online websites provide you with lots of other features
49200	55440	that are sort of added around Git functionality to help you communicate with each other and coordinate.
57840	62160	So let's talk about first the Git pushes and Git commits and what would happen in practice.
63120	67200	So if you have two developers and they're both being tasked on fixing a bug at the same time
67760	72640	and to fix that bug, they both need to make a change to one particular file. So maybe I'm editing
72720	78160	files one, two and four and he's editing files three, five and four, but we're both going to edit
78160	82400	file four at some point. This becomes a situation that Git needs to manage for you.
83600	88640	So if person one edits those three files, including file four, creates a Git commit
88640	92240	and pushes them to the server, that's fine. The server will accept it because there hasn't been
92240	98400	any updates from anybody else. It's fine with that. The second person will create their Git
98400	104640	commits and then type in Git push and then the server will say, no, you can't do that because
104640	109200	from the last time you downloaded the latest version, someone else has added more content.
109200	114240	So your version is out of date basically and it will force you to get yours up to date
114240	119280	before it will let you push. So there's a really handy feature is protecting the code by stopping
119280	126160	one person overwriting someone else. So then what you have to do is type Git pull if you're that
126240	131600	second person. You can do a couple of things. You can do Git fetch which downloads metadata about
131600	136160	what has changed and then you can manually and carefully merge things or you can just type in
136160	140480	Git pull and it will pull down the latest version and it will try to automatically merge everything.
141280	146080	So for those separate files that you both edited and even if you're in one file and you edited
146080	150160	different bits of the file, Git will say, when you download the latest version, it'll say, great,
150160	155280	I can merge your changes with the latest version and just does it for you. But if you both edit
155280	160800	the same sort of area and Git isn't sure, it's very good then it says, oh okay, I can't do that.
160800	167120	I'm not smart enough. As a bit of software, we need a human who is more smart to tell me what
167120	172560	should have happened here. So what it will do is it will add both of your lines of code into the
172560	178400	file with like some metadata above it. You see a bunch of side arrows and then the word head
178400	183520	and then you see the first person's code and then you see like a separator in the middle
183520	188080	and the second person's code. And then some other line, the arrow is facing the other way
188640	193840	to show you the last, the commit you've been making. And it will say, okay, as a human,
193840	200160	you tell me which one to keep or if I should keep a bit of both, figure it out intelligently.
200160	204880	And so your job then is to delete the metadata lines and delete the lines of code that don't
204880	212400	need to be there anymore and do the merge cleverly as a human. So that's, it's sometimes a painful
212400	217120	process. It involves you communicating maybe with the other human to make sure that, you know,
217120	220640	why did you do that? Why did I do this? You know, do we need to keep both that sort of thing?
221440	224880	And then once you've merged it, you can then create and you commit and then you can push
224880	229440	the server, hoping that no one else has pushed something in the meantime. But it's your job
229440	232800	as a developer to make sure that you're going to push something that doesn't break other people
232800	237840	and get helps you do that by saying no. Because I can imagine that if you're two developers working
237840	242960	for, say, someone like YouTube, and you're both working on the code base for YouTube servers,
242960	248560	if you need to sort of subtly adjust that, that could affect nearly everybody working on all
248560	252160	the different areas. So yeah, for sure, in principle, you're right that there's these bits
252160	256800	that might get reused by lots of people. In practice, those bits would also be carefully
256800	260960	protected either through procedure or through, because the one thing you can do is you can
262480	267280	limit people to pulling areas of code, you know, or sub projects within Git on the server so that
267840	271040	not everybody is doing. And some bits which are really crucial that are going to affect millions
271040	274640	of users, they, you know, they will have serious protection lines. And that's actually the best
274640	279520	thing we should talk about next is the kind of process that teams go through to make sure they
279520	286400	coordinate who's doing what. So companies like GitHub and GitLab, they have added these extra
286400	293440	features like milestones and issues, issues like tickets, things that need doing. And so
294400	297680	what they'll say is, okay, here's a ticket that needs like a bug that needs fixing or a new
297680	303040	feature we want to add, and we'll assign it to a person or a set of people. And those people will
303040	308480	be responsible for writing the codes that will resolve that ticket. So what they'll do in practice,
308480	312320	actually, is kind of interesting. The team is most likely to then create a temporary branch,
312320	316400	which we've talked about before, with the idea of that ticket as this kind of name,
316400	320160	because otherwise you'd have millions of tickets, millions of numbers. So you name the branch after
320160	325280	the kind of ticket you're trying to fix, the issue you're trying to fix. And then as a group,
325280	329360	you'll work only on that version that's set aside. So you're not disrupting the main version of your
329360	334160	software, you're not disrupting the main branch, you're working on like this side developer branch,
334160	339600	just for this particular issue. And then you will all kind of work on that, finish it, test it
339600	345600	yourself probably. And then you will push that code onto the server. And then you will create
345600	348960	what's called a merger request or a pull request, depending on what, whether you're using GitHub
348960	355760	or GitHub. So they've got slightly different language. One that really then says is we want a
355760	361280	senior developer to check it's all okay and then merge it if it's fine. And that's not that job
361280	365840	is normally reserved for someone who's job that they've got the authority to check something and
365840	369520	check it's good. And also to put it do something risky, like merge it with the product you're
369520	374960	about to release, you know, some more senior people may be given that job. And so you can ask
375680	383920	lab or GitHub to notify people that like a new set of code for an issue is ready to review.
383920	387200	And companies will have review processes that are there required to do like someone will check that
387200	392000	it meets legal standards. Someone will check that the code structure conforms to the company's
392000	395200	standards and that sort of thing. And people will say, yes, this looks fine to me. Yes,
395200	399120	it's fine to me or no, go back and do more. And it creates a conversation forces them to have a
399120	403520	conversation. And then only when they're happy with it, the senior person will do the job of
403600	408960	get merge and merge it into some sort of main main version of the software.
409920	413040	What you'll find is some companies, they will have the main version, which is like
413040	418480	their release product, not have like a release candidate branch. And the people who are doing
418480	423840	their fixes are branching from that branch. And so they make sure the side one works. And then
423840	428160	only then at some point in the future, this okay, this is a release ready version that we have
428160	433120	collectively built. And then someone really important will carefully make that a public thing
433120	439440	for someone to use. So lots of companies will protect what's the main branch or protect different
439440	445200	versions. And they won't give permissions to types of users like developers to push directly to that
445200	450400	because that will break it. So might break it, they're really worried that people will just
450400	453600	push a version and delete, you know, delete something critical to the main version of the
453600	458080	software. So all these protections and processes are put in place to help teams collaborate.
458640	462240	But I mentioned earlier that sometimes they create like a beta version, and they name the
462240	467280	version with the git tag like a beta release ready or release candidate. What they're doing is
467280	472960	they're releasing the software to a set of authorized users who are able to download that beta version.
473600	480320	And then hopefully there's more expert sort of known beta users will say, oh, I found something
480320	484640	that breaks and then let you know before you release it to the whole world. And you can actually
484640	488000	do that with Chromium, which we talked about before, because on Chromium, you can download
488000	492160	the latest beta version, you can download the latest release candidates, you can download
492160	497440	the final version they ended up with yesterday. So you can choose as a developer to go and get
497440	501200	these potentially buggy versions and help them to debug it by being part of a sort of
502000	506160	small unknown community. And all the people that don't know what a beta is in practice,
506720	512080	they just download official releases that Chrome tells them to update when they're told to update.
512080	517360	So it is handy having these kind of first set of people that will try something to show that it
517360	521360	breaks, which is normally like your own developer community. And then a slightly broader community
521360	526320	you're happy to have the beta version of. And then when it's been tested by lots of people,
526320	529520	then it goes out. Because of course, there are benefits in having the beta version, it might
529520	533760	have new features that, you know, nobody else has got right. Yeah. And so like, I know a lot of
533760	536800	computer science students are always happy to get like the latest beta version. And for a while,
536800	543680	I was subscribing to the latest release candidate of Mac OS X. And that was fine until like the
543680	549520	first release candidate for two weeks, they broke Apple Mail, you know, and which, you know,
549520	552640	if people were using this on test machines, that wouldn't matter because I was using it on my main
552640	556640	work machine and suddenly I couldn't use Apple Mail for two weeks. But you know, as a person who's
556640	561440	happy to test release candidates or beta versions, you expect that stuff maybe doesn't work entirely.
561440	565600	You get early access to features. That's maybe exciting. And probably you're technically competent
565600	570080	enough to not worry if something breaks or, you know, delete your beta version and then download
570080	575680	the proper version if you really need it. So what happens is we so we'd have to go over here
576560	581920	across the distributed shared memory link to get the value and then we could bring the value back.
581920	586960	So rather than taking 100 nanoseconds, it would just trying to get packets from one lab to another.
586960	592560	Now, obviously, by 1986, we've got lots of things in Europe.
