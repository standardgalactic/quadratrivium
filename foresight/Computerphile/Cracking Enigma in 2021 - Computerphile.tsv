start	end	text
0	4000	So it was in the news that there's a 50 pound note coming out with Alan Turing on it.
4000	8000	Now Alan Turing has been featured from time to time on our channel and rightly so.
8000	13000	Dave's done some fabulous videos on all the work that he and a lot of others were doing at Bletchley Park,
13000	19000	you know, cracking enigma. And it got me thinking, you know, now that we're in the 21st century
19000	23000	and I've got a laptop that's much more powerful than all the chewing bombs put together,
23000	26000	how easy is it to break enigma like today?
26000	30000	But let's code it up and find out.
30000	34000	The first thing I should say is Dave's done some really interesting videos on the history of enigma
34000	38000	and do go and watch those. And it'll give you an idea of the sort of things they were doing
38000	41000	to try and break enigma back during the 40s.
41000	43000	Not to trivialise it, but it's really difficult, isn't it?
43000	48000	It's really, really difficult. You know, this isn't something one does by hand, right? Not quickly.
48000	52000	The enigma machine is not a stupid idea, right? It's well designed.
52000	55000	The only thing that we've got now is much, much more processing power.
55000	61000	And so things that we couldn't possibly brute force back then, maybe we can start to begin to brute force now,
61000	63000	and that's what we're looking at today.
63000	68000	So let's look very briefly at what an enigma machine is, and then we'll have a go at actually breaking one
68000	69000	and see whether it holds up.
69000	73000	If you recall, it has some lights on some letters and it has, this is my technical description,
73000	76000	has some buttons that you press, keys are they called sometimes?
76000	79000	So you press an A, right? You press an A and it goes into the machine
79000	81000	and it goes through something called a plug board.
81000	83000	And the plug board will swap it. So this is the plug board here.
83000	86000	Now plugs just swap certain letters in pairs.
86000	90000	So maybe this A comes out as A and F, right? Or something like that.
90000	93000	Then this goes into the first rotor.
93000	97000	And so that maybe comes out as a Q or something like that.
97000	99000	So, you know, it sort of just wiggles around in here.
99000	105000	And then this comes in, this comes out as maybe, you know, a P making this up.
105000	107000	And then this goes into the next rotor.
107000	110000	So stick to three rotor enigmas for today, hey?
110000	112000	Comes out as a sort of an S.
112000	114000	And then it goes through something called a reflector.
114000	117000	So this is getting quite complicated, but this is all mechanical, right?
117000	122000	These rotors literally physically turn around and they just have wires soldered from one end to the other that connect up.
122000	125000	So the reflector just bounces, S goes to something else.
125000	126000	I can't remember which letter it is.
126000	128000	And then it goes back through this, like this.
128000	130000	And then it comes around through the plug board again.
130000	133000	So maybe that D goes to, I mean, A's over here.
133000	135000	That was a bit silly of me, wasn't it?
135000	140000	For the purposes of this, it's all absolutely fine.
140000	143000	And this comes out as a Z, right?
143000	149000	So in my weird botched enigma diagram, the A went in and it came out as a Z.
149000	151000	It was an encrypted as a Z.
151000	153000	Now, what's hard about this problem?
153000	156000	Well, you can take these rotors out, right?
156000	157000	Each rotor has different wiring.
157000	162000	There's usually five or eight rotors to choose from and you can put them in any position you like.
162000	166000	The next one is that every time you press a letter, one of the rotors rotates
166000	168000	and sometimes it rotates the next rotors along.
168000	174000	And that means that this mapping, this transformation changes every time you press a character.
174000	176000	So you press A, it's not going to do the same thing again?
176000	181000	No, actually, if you press A, the rotor first turns and then lights up a letter, right?
181000	183000	So it's not going to do the same thing again.
183000	187000	If you press A, A, A, A, A, A, the only thing you're guaranteed due to one of the quirks of enigmas
187000	190000	is you won't get any A's back, but you'll get a lot of random letters.
190000	195000	Back during the war, they solved this by trying to find possible rotor configurations
195000	201000	that definitely couldn't work or could work based on some guest plain text.
201000	206000	So maybe they had this idea that the first part of the message contained the word weather report
206000	209000	and so if they put that in and then they could find all the encryptions
209000	212000	that couldn't possibly have come out as weather report and so on
212000	214000	and they could start to narrow down what their options were.
214000	218000	Now, that's called a known plain text attack,
218000	222000	but during the war, if they hadn't known the plain text, they wouldn't be able to crack a enigma bit.
222000	224000	They didn't have the brute force power to do it.
224000	227000	Nowadays, we have pretty fast laptops, right?
227000	231000	And, you know, beyond my laptop, other computers are even faster than that, would you believe?
231000	235000	So theoretically, we could start to try out some of these combinations, even if we didn't know any plain text.
235000	240000	What we're going to be looking at, at least to begin with, is a cipher text-only attack.
240000	242000	That's an attack where we've only got the cipher text.
242000	245000	We don't have any idea what the plain text is
245000	248000	and we want to see if we can guess what some of these settings would be.
248000	254000	There's a few interesting weaknesses of enigma that make it a little bit practical to brute force,
254000	256000	but not actually as much as you think.
256000	260000	We talk a lot about how a letter doesn't encrypt ever to itself
260000	263000	and that's quite relevant for plain text attacks, known plain text,
263000	267000	because you can then work out where plain text definitely can't or could be.
267000	271000	We're not doing that today, so I'm less worried about that particular property of enigma.
271000	277000	More interesting to me is the fact that if you get some of the settings right,
277000	279000	like you get this row to correct but these two wrong,
279000	283000	that will often be better at decrypting than if you get them all wrong.
283000	287000	So as we start to move slowly towards a solution,
287000	291000	we get a little hint that maybe this cipher text isn't quite as good as it was
291000	293000	and we can start measuring it.
293000	300000	So really what we need to do is find some way of putting some cipher text into an enigma machine with some configuration
300000	304000	and then reading the output and saying is that a plausible sentence or not.
304000	308000	And preferably we'd like to do it really, really quickly because otherwise this could take a long time.
308000	311000	So we're not going to be doing any deep learning, can't be bothered with that.
311000	315000	We're going to use very simple statistical properties of text
315000	319000	to try and measure whether one sentence is better as English than another sentence.
319000	324000	And there's a few of these and I've implemented all of them because I thought well, let's just test them out.
324000	327000	The first one is something called indexive coincidence.
327000	329000	So let's suppose you have a cipher text.
329000	331000	So for example, here it is.
331000	333000	I'm just looking at random text, right?
333000	335000	So yeah, okay.
335000	337000	I'm just going to copy some random cipher text from here.
337000	339000	So why can't I just randomize my own cipher text?
339000	340000	I don't know.
340000	344000	But I feel more comfortable copying it than I do just thinking up clever, interesting letters on my own.
344000	349000	Well, so isn't there a number of files on the fact that I don't pick as random as I think and stuff like that?
349000	354000	Z, E, B, H, W.
354000	356000	This is some actual cipher text that we'll be breaking later.
356000	359000	Does it honestly start with zoos as in Conrad's zoos?
359000	360000	Yeah.
360000	361000	In the reality of random, is it?
361000	362000	Yeah, yeah, yeah, yeah.
362000	368000	You see all kinds of words in the random cipher text and they mean absolutely nothing because it hasn't been decrypted yet.
368000	370000	Oh, gee, yeah.
370000	371000	Well, exactly.
371000	373000	E, U.
373000	375000	So let's suppose we have some cipher text like this.
375000	381000	We guess some rotor settings and we put it through our enigma machine and that will decrypt it.
381000	383000	Now, it will probably decrypt it incorrectly.
383000	391000	But where we accidentally stumble upon the right plugs or we stumble upon the right rotor configuration, even for a briefly,
391000	395000	we'll find that this decryption is slightly better than completely random, right?
395000	399000	Because actually, mostly, this is completely random, right?
399000	403000	Yes, we have this stipulation that letters can't turn to themselves.
403000	405000	But generally speaking, it looks completely random.
405000	406000	So this is what we get out.
406000	408000	H, F.
408000	410000	My writing is bad today.
410000	414000	V, V, F, L, I, N, G.
414000	418000	Now, the interesting thing about this is, I mean, it's complete nonsense, right?
418000	422000	I'm not cracking any words on this, but I do recognise ING.
422000	429000	Now, ING is a fairly common trigram or set of three characters in the English language, right?
429000	435000	Now, that doesn't necessarily mean this is correct, but it's slightly more English, should we say, than this one, right?
435000	440000	If we're measuring some amount of how English is this sentence, then it's a little bit closer than this.
440000	444000	So maybe one of our rotors is in the right position and the others are wrong, right?
444000	448000	Or our rotors are in the correct position, but our plugs are wrong, or something like this, right?
448000	456000	And the idea is that we slowly go through different configurations of our enigma machine, I say slowly as fast as we can, right?
456000	464000	And we measure statistical properties of these output sentences to find the ones that most closely resemble correct, decrypted text, right?
464000	468000	And we can do this without looking at them. We don't have to look at them and say, well, that's a real word.
468000	471000	We just measure statistical properties.
471000	473000	So what are some of these statistical properties?
473000	478000	Well, the first one is called the index of coincidence, or IOC.
478000	483000	This is the probability that when you pick two letters at random, they'll be the same.
483000	487000	So for example, if we randomly pick P and then we randomly pick P, that's versus the same.
487000	489000	If we pick P and then L, they're not the same.
489000	491000	You know, we won't write the form out. The form is not that complicated.
491000	497000	So what you have to do is go through and count every single character and how many of each one there are.
497000	501000	You produce a histogram and then you can calculate the index of coincidence based on this.
501000	510000	Now, for random text, that is text that's been put through an enigma machine and not decrypted, the index of coincidence is usually something like 0.038, right?
510000	515000	Which is basically everything's evenly distributed. There's nothing interesting going on there at all.
515000	522000	But for decrypted English text, we usually get a higher index of coincidence about 0.067.
522000	524000	And I think it's something like 0.072 for German text.
524000	530000	One way of looking at it is it measures the fact that some characters have more higher probabilities than others.
530000	532000	If everything's equally likely, you get something like this.
532000	537000	If some characters are quite common and so they tend to come up in pairs, it starts to look a little bit higher, right?
537000	538000	It never goes higher than this.
538000	540000	So, well, you're not really.
540000	545000	What we can do is we can work through our rotors, different rotors, different positions, different settings,
545000	551000	and we can calculate our index of coincidence and we take the best scoring texts, right?
551000	556000	So where our output has a higher index of coincidence, we think maybe we've got the rotor settings correct, right?
556000	558000	And that's basically how it works.
558000	562000	There's been a number file, right, where they actually got to use an enigma machine and I'm super jealous.
562000	564000	They talked about the number of different combinations.
564000	570000	So it's all very well saying, OK, we'll just go through all the rotor settings and work out, you know, what the best one is, right?
570000	573000	Maybe if I have, you know, a super, super, super computer.
573000	578000	But actually, enigma has a nifty weakness in this sense, right?
578000	583000	Which is that if you get some of the settings correct, this will improve, right?
583000	587000	If I get the rotor positions correct, even though the rotors are in slightly the wrong position,
587000	591000	the result will be better than if I've got the wrong rotors in place, right?
591000	596000	If I get one of the plug board settings, right, the results will be better than if I've got none of the plug board settings, right?
596000	600000	Because basically fewer characters will be incorrect, right?
600000	607000	Suthily. So you've got three out of, let's say, five rotors or eight rotors.
607000	610000	So that's physically the three that happen to be in the machine at the time.
610000	612000	Yeah, and you've got very different positions, right?
612000	616000	So if for today we just talk about five rotors just because I've always been sitting here a little bit longer,
616000	619000	then we've got 60 possible positions.
619000	622000	One, we've got to choose three out of five, and then they can all go in any slot.
622000	625000	You don't tend to have the same rotor twice, right?
625000	628000	Because, I mean, they didn't have those duplicates of rotors.
628000	629000	One set of them.
629000	631000	Yeah, yeah, yeah.
631000	633000	Yeah. So we've got that.
633000	637000	Then for each of these, we have a start position from one to 26,
637000	640000	which is, you know, what letter is showing on the top, right?
640000	642000	Basically how rotated it is.
642000	645000	So you've got the start position or the indicator setting.
645000	650000	So there's, you know, times, I said, 26 of those times by three of the different rotors, right?
650000	652000	Then you've got the ring setting.
652000	656000	Now, the ring setting is essentially rotating the internals of the rotor.
656000	660000	Now, actually, if we ignore the notch for a minute, which I'll talk about,
660000	666000	if you rotate the ring and you rotate the actual whole rotor, they kind of cancel each other out.
666000	669000	So it's about the notch position, really.
669000	673000	The notch is when the rotor turns, it turns the next one along.
673000	678000	And so the combination of your start position and your ring setting will mean where your notch is and then when it turns around.
678000	680000	So you've got the ring settings, right?
680000	682000	Which is going to be 26 times three again.
682000	685000	Then we've got the plug board, which, as you know, swaps random characters,
685000	690000	and that's got something like 10 different pairs out of 13 possible pairs.
690000	693000	That's 150 trillion, I think, different combinations.
693000	696000	That's, you know, out of reach of my laptop.
696000	700000	Certainly when I'm doing all these decryptions as well and we're multiplied by all these things, right?
700000	702000	The number file goes into much better detail on this.
702000	706000	We're looking at five today because, again, I don't want to be here all day.
706000	708000	It does get harder to solve and we'll talk about that.
708000	709000	So this is a lot of combinations.
709000	714000	It's too many combinations for me to go through, even with this nice little indictical coincidence thing, right?
714000	717000	Even though when I get this exactly right, I will just get the plain text out
717000	720000	and it will have a very nice indictical coincidence and I might be able to find it.
720000	722000	So what do we do?
722000	726000	Well, the weakness of enigma is that if we get some of these things right,
726000	730000	even if the others are wrong, we get a little bit closer to the answer, usually.
730000	735000	So, for example, if you get the correct three rotors in the correct positions
735000	739000	and you get their start positions roughly correct, if your ring settings are wrong,
739000	741000	all that will do is mess around with the notches.
741000	746000	So you'll get bits of your plain text correct and then bits of cypher text and then bits of plain text
746000	751000	and you get these kind of pockets of valid characters coming out of into the decryption.
751000	754000	It will still score better on IOC or any other metric.
754000	755000	So that's what we're going to do.
755000	757000	And this is the same with the plugs.
757000	761000	If we get the rotors and the start positions and the ring settings correct,
761000	763000	then we can start to guess plugs.
763000	767000	And generally speaking, if we guess one correctly, the output would be better
767000	769000	and we can then move towards a solution.
769000	773000	There's a lot of possible variations, but the fact that we can deal with some of them at a time
773000	775000	makes this practical.
775000	778000	If we had to brute force through all the different variations, it wouldn't be possible.
778000	779000	That's the idea.
779000	781000	So I've written some code to do this.
781000	784000	If you want to have a go, I'll make my code available,
784000	788000	but also there's a really good online tool called Crypto, which lets you do this in a visual way.
788000	790000	We'll put a link to that in the description.
790000	792000	But I've written some pretty simple code here.
792000	794000	I implemented enigma machine because it was fun.
794000	798000	And then I implemented a number of different fitness functions,
798000	801000	which is how good is our decryption.
801000	803000	Index of coincidence is one.
803000	806000	I also maybe can talk about some others another time.
806000	808000	So you were kind of sending some cypher text.
808000	809000	I don't know what it is.
809000	813000	And it's been encrypted by some enigma configuration with, I think, five plugs.
813000	818000	The first thing I do is I go through all the different rotor configurations.
818000	823000	And I find the one that has the highest index of coincidence score when it decrypts that message.
823000	830000	So this is five different rotors, each one tried in each position and each starting position.
830000	832000	So that's 26 for each one.
832000	835000	So that's quite a few combinations, about 17,000.
835000	839000	But 17,000 for a laptop in 2021, not such a big deal.
839000	843000	It takes somewhere around 10 seconds or something like that.
843000	846000	So you can see what it's doing now is it's stepping through the different rotors.
846000	849000	So one, two, three, one, two, four, one, two, five.
849000	852000	And we've done about 10 or 15 configurations already.
852000	855000	And for each of these, it's going through all the different starting positions.
855000	858000	But we're not looking at ring settings and we're not looking at plug board
858000	862000	because that would just multiply this astronomically by the number of things we have to do.
862000	865000	So we're already on rotor three in the left-hand side.
865000	866000	We're keeping going.
866000	869000	This same thing works exactly the same for eight rotors.
869000	870000	It doesn't really change anything.
870000	873000	It just takes slightly longer and I'm a bit lazy.
873000	876000	So I have actually coded up the other rotors as well.
876000	880000	Interestingly enough, some of the later rotors have two notches on, right?
880000	883000	Which is not, it doesn't make any difference in terms of the cracking because...
883000	886000	So that just means it turns the next one twice as often, right?
886000	888000	Yeah, yeah, twice as often.
888000	891000	Only really affects the first two rotors.
891000	893000	The last one doesn't ever really turn that often.
893000	895000	And it doesn't have any other rotors to turn.
895000	898000	So here what we've got is we've got a list of the top performing rotor configurations.
898000	901000	So two, five, three is the best performing rotor configuration.
901000	904000	We start positions at 21, three, and 25.
904000	906000	I'm using zero indexing, right?
906000	908000	Which is not how you would normally do it in Enigma,
908000	910000	but it's easier for my ray indexing to do this, right?
910000	914000	And that has an index of, for instance, of 0.043,
914000	916000	which is a lot higher than 38.
916000	917000	I say it's a lot higher.
917000	918000	It's a little bit higher.
918000	919000	Good enough.
919000	923000	So that suggests to me, I mean, we actually, I listed the top 10 here
923000	925000	because sometimes you might not get the one on the top one.
925000	928000	You might get the next rotor configuration or something like this.
928000	931000	It's worth maybe, if you were trying to really actually pay attention to this,
931000	935000	what you would do is maybe start doing further attacks on the top three rotor configurations
935000	937000	just to keep your options open.
937000	943000	So we're going to fix at two, five, and three because, you know, it saves time, right?
943000	950000	So given rotors two, five, three from left to right and their starting positions,
950000	953000	what we now can do is we can start to brute force through the ring settings.
953000	956000	So we can find the best possible ring settings, right?
956000	961000	Now, this is almost instant because there's now only a 600 or so of those, right?
961000	965000	We don't need to try the left-hand rotor because it doesn't really rotate.
965000	967000	And so we do that and it's already happened.
967000	970000	And the best ring positions were 0, 3, 23.
970000	971000	Right.
971000	975000	Now, for zero, we ignore because it's not the ring possessing, remember,
975000	979000	affects where the notch is and the left rotor doesn't turn anything over.
979000	981000	It doesn't have any effect.
981000	985000	So given that, this is the ciphertext we've got out.
985000	991000	This was our original ciphertext and this is our slightly better ciphertext.
991000	994000	Now, it still looks like total nonsense, right?
994000	997000	But it has a much higher index of coincidence score than the original,
997000	999000	which means in some sense it's less random.
999000	1004000	So if you look, you might start to see groups of letters that might be a real word.
1004000	1005000	They might not.
1005000	1006000	I don't know, right?
1006000	1009000	But some of the real letters are going to come out here.
1009000	1011000	We might not be able to see what they are.
1011000	1015000	So given this, we can finally start addressing this really problematic plug board situation.
1015000	1020000	Remember, there's far too many plug board combinations to realistically just try them all.
1020000	1024000	But again, we have this wonderful benefit that if we get one of the plugs correct,
1024000	1027000	the result will probably be better than if we got none of them right.
1027000	1032000	So all we do is we go through each of the first 300 and so different possible plugs,
1032000	1035000	just one at a time, and we see which the best one is.
1035000	1039000	And then we fix it, and we do the next for the next one, and that's two plugs.
1039000	1042000	And then we do for the next for the next one, and that's three plugs, right?
1042000	1043000	And so on.
1043000	1048000	And if we do that, we very quickly come up with a few sets of plugs.
1048000	1051000	And our ciphertext is starting to look a lot better.
1051000	1052000	So this is our ciphertext here.
1052000	1058000	The first letters are nonsense, but then it's proposed to consider the quest.
1058000	1059000	Consider the quest.
1059000	1061000	Can machines think?
1061000	1063000	See, now I'm starting to guess what this might be.
1063000	1064000	I see what you've done here.
1064000	1065000	This is the Alan Turing paper.
1065000	1067000	So some of the letters are wrong, right?
1067000	1073000	So it should be I propose to consider, and it's J propose to consider, right?
1073000	1074000	And we're nearly there.
1074000	1078000	But that's because when we optimize the rotor configuration, we fix the rings at 0000.
1078000	1081000	So it was never going to find the exact correct thing.
1081000	1083000	So essentially the turnover is slightly wrong.
1083000	1086000	Everything's slightly wrong, but it's still pretty good.
1086000	1090000	Now, if we go back to our original question as to how secure is Enigma,
1090000	1093000	the answer is not very secure, right?
1093000	1095000	The reason is not because it's trivial to break, right?
1095000	1097000	This took me a little bit of effort.
1097000	1100000	And for short messages where these fitness functions start to break down
1100000	1104000	because you don't have enough information, they're actually very robust, right?
1104000	1109000	For a 50 character message, very, very difficult to break using something like an index of coincidence.
1109000	1113000	Because even if some of the letters start to appear right, there's not very many of them.
1113000	1114000	The index is just noise.
1114000	1119000	In the war, they limited or they attempted to limit messages to something like 200, 250 characters
1119000	1122000	for this reason, because index of coincidence was already known, right?
1122000	1126000	And there's now more powerful metrics like trigram scores and quadram scores,
1126000	1130000	which I've also implemented, which often work better, particularly for the plug board.
1130000	1135000	And so if you have a short message, you don't get very much information
1135000	1138000	on the different frequencies of different groups of letters.
1138000	1141000	And so there's really no way to know what's going on at all.
1141000	1144000	And you get very lucky where you don't, and most likely you don't.
1144000	1146000	But the other issue is, of course, the number of plugs.
1146000	1149000	I've only done five plugs here, so I've cheated a bit, right?
1149000	1155000	For most German messages that are sent using 10 plugs, you're going to need 1200 to 1500 characters
1155000	1158000	before fitness functions are going to start to give you something, right?
1158000	1163000	If you know what the plain text might be, this becomes much, much easier, right?
1163000	1166000	Because if you can fix these characters have to be exactly this,
1166000	1168000	your fitness function is much less noisy, right?
1168000	1170000	And actually, I've implemented that as well.
1170000	1173000	And it just starts breaking it like nobody's business, right?
1173000	1175000	So it is crackable, right?
1175000	1176000	If you can guess what plain text is.
1176000	1181000	And of course, modern cryptography assumes you know what the plain text is, right?
1181000	1183000	At least for some of the message.
1183000	1186000	For example, whenever you send an HTTP message to a web server,
1186000	1190000	the beginning bit always says HTTP get or something similar, right?
1190000	1192000	But there's a very known structure to these things.
1192000	1194000	You can start to guess what they would be.
1194000	1198000	We can't assume that you wouldn't know what any of the plain text was.
1198000	1201000	But even if we don't, you can see that these index of coincidence
1201000	1205000	and trigam scores and things can start to tease out some information.
1206000	1209000	So, going back to the beginning.
1209000	1212000	Enigma is actually harder to crack than I thought, right?
1212000	1215000	People always talk about how hard it was to crack during the war.
1215000	1216000	And that's absolutely fine.
1216000	1219000	But you just kind of assume that now it's 2021.
1219000	1221000	Laptops should be able to just click, go through all the settings,
1221000	1223000	find yourself the ciphertext.
1223000	1225000	It doesn't really work that way, right?
1225000	1227000	You have to try and stumble your way towards it.
1227000	1228000	And often it doesn't work.
1228000	1230000	And there's noise in the output.
1230000	1232000	And so you have to try and work out whether what you're seeing
1232000	1235000	is actually improvement or not, and so on,
1235000	1236000	which I think is quite interesting.
1236000	1238000	Modern ciphers don't have this problem.
1238000	1241000	If you have a 128-bit AES key,
1241000	1243000	you can't brute-force the first bit
1243000	1249000	because the zero or one won't give you any better or worse plain text.
1249000	1251000	It will just be nonsense each time.
1251000	1252000	And that's true of any amount.
1252000	1254000	So you can't do the first half of the key
1254000	1255000	and then the second half of the key,
1255000	1257000	which is kind of what we're doing here.
1257000	1260000	So modern ciphers don't have this problem.
1262000	1263000	And so on.
1263000	1266000	We can't do a lot of interesting things with this image
1266000	1268000	after just one set of convolutions,
1268000	1269000	but we're getting there.
1269000	1271000	So this one is starting to be transformed.
1271000	1272000	Some of them are noisier than others.
1272000	1274000	Some of them were paint associated with it,
1274000	1277000	showing which was the proper setting with A at the top
1277000	1279000	and A against the dot of paint.
