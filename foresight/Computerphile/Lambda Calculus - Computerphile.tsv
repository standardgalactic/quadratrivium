start	end	text
0	3840	Today we're going to talk about one of my favourite topics in computer science,
3840	8560	which is the lambda calculus, and in particular we're going to talk about three things.
8560	15440	We're going to think what actually is it, why is it useful, and where did it actually come from.
15440	20240	So we're going to start with the last question here, where did it actually come from?
20240	30320	This is Alonzo Church, who was a mathematician at Princeton University in the United States,
30880	37120	and he was the person who invented the lambda calculus, and what he was interested in is
37120	42560	what is the notion of a function from a computational perspective? And his answer
42560	48480	to this question is what we now know as the lambda calculus. And there's an interesting piece of
48480	53920	history here, which many people don't know, so it turns out that Alonzo Church was the PhD
53920	59440	supervisor of someone very famous in computer science, Alan Turing. And of course Alan Turing,
59440	64880	amongst many other things which he did, he invented Turing machines, which Computerphile has done a
64880	71040	number of videos on, and Turing machines capture a basic state-based model of computation. And
71040	76400	it's interesting that his PhD supervisor, Alonzo Church, he captured a basic functional notion
76400	82480	of computation with his lambda calculus. And it turns out that these two quite different notions,
82480	87680	one functional and one state-based, turn out to be equivalent. And this is what's called the Church
87680	93440	Turing Hypothesis, or part of the Church Turing Hypothesis. So for Church, a function was a black
93440	99040	box that you're not allowed to look inside, and what it does is it takes some input, so maybe it
99040	105440	takes a number like x, and it's going to process it in some way, and it's going to produce an output.
105440	112320	So maybe it produces the output x plus one. So this would be a function that takes a single input,
112320	118400	a number called x, processes it in some way, and then produces a single output, which is the number
118400	123600	x plus one. Then we could have a slightly more interesting example. Maybe we have a box with
123600	131520	two inputs, x and y, and we process them in some way, and maybe we produce their sum as the output.
131520	136640	So this would be a function which takes two inputs, x and y, processes them in some way,
136640	143040	and then produces their sum x plus y. And there's two important things about functions in this sense.
143040	147440	The first is that they're black boxes. You're not allowed to look inside them. You can't see
147440	151360	the mechanics of what's going on inside this box. All you can do is put something in and
151360	155840	observe what comes out the other side. And the second important thing is that these functions
155840	162240	are pure. They have no internal state. So all that happens when you map x across to x plus one
162240	167280	is the magic goes on inside the box, and there's no internal state. There's no hidden information
167280	172000	that we can use. And this is quite different from the notion of computation that Alan Turing was
172000	176880	interested in with his Turing machines. He had internal state. There's no internal state. These
176880	183200	are pure mathematical functions. Now we can think how do you actually define functions in the lambda
183200	188320	calculus? And there's a very, very simple syntax for this which I'll introduce to you now. So let's
188320	192960	think about the increment function in the lambda calculus. What you do is you write down a lambda
192960	197840	symbol. So this is the Greek lowercase letter lambda. And that says we're introducing a function at this
197840	203440	point. And then you just write down the name of the input. So that was x. And then you have a dot.
203440	209760	And then you say how the output is calculated in terms of the input. So that's x plus one. So
209760	215760	we could do the same with addition. You just need two lambdas. You write lambda x dot lambda y
215760	222960	dot x plus y. So this is the function that takes two inputs, x and y, and then delivers the result
222960	228880	x plus y. And this is written down formally in Church's lambda calculus exactly like this. So
228880	234240	when you've got a function, what can you do with it? Well, all you can do is give it some input,
234240	238960	let it do its thing, and it will give you some output. So let's have a simple example of this.
238960	245840	If we take a function like increment, which was lambda x, x plus one, and we apply it to a number
245840	252000	like five, what actually happens? It's a basic process of substitution. We're essentially substituting
252000	258800	the number five here into the body of this lambda expression. And then x becomes five. So we get five
258800	263120	plus one. And then we get the result six on the other side. And this is basically all there is
263120	268800	to the lambda calculus. It's only got three things. It's got variables like x, y and z. It's got a
268800	274160	way of building functions, this lambda notation, and it's got a way of applying functions. This is
274160	278880	the only three things that you have in this setting. What is actually the point of the
278880	282800	lambda calculus? We've introduced this very simple notation. Why should you be interested
282800	287120	in learning about it? I think there's three answers which I would give to this. The first
287120	292480	point I'd make is that the lambda calculus can encode any computation. If you write a program
292480	297360	in any programming language, which has ever been invented or ever will be invented or really any
297360	302000	sequential programming language, it can in some way be encoded in the lambda calculus. And of
302000	306720	course it may be extremely inefficient when you do that, but that's not the point. This is a basic
306720	311680	idea of computation and we want to think how many, what kind of programs can we encode in this?
311680	316320	And actually you can encode anything. And this is really the kind of church-turing hypothesis
316320	322800	which I mentioned. Alan Turing, you can code anything in his Turing machines and in churches
322800	326800	lambda calculus you can encode anything. And actually these two systems are formally equivalent.
326800	331520	Any Turing machine program can be translated into equivalent lambda calculus program and vice
331520	336960	versa. They're formally equivalent. The second point I would make is that lambda calculus can
336960	341440	also be regarded as the basis for functional programming languages like Haskell. So these
341440	346720	are becoming increasingly popular these days and actually a very sophisticated language like Haskell
346720	352320	is compiled down to a very small core language which is essentially a glorified form of lambda
352320	356480	calculus. So if you're interested in functional programming names like Haskell or the ML family,
356480	360800	these are all fundamentally based on the lambda calculus. It's just kind of a glorified syntax
360800	366800	on top of that. The third point which I would make is that the lambda calculus is actually now
366800	372240	present in most major programming languages. So this wasn't the case 10 or 15 years ago,
372240	377440	but it is the case today. So if you look at languages like Java, like C-sharp, even Visual
377440	383520	Basic, F-sharp and so on, all of these languages now encode lambda calculus or include lambda
383520	388960	calculus as a fundamental component. So every computer scientist today needs to know about
388960	394720	lambda calculus. What I'd like to end up with is a couple of little examples of what you can do
394720	399120	with it. So the lambda calculus has basically got nothing in it. It's got variables, it's got a way
399120	403680	of building functions and it's got a way of applying functions. It doesn't have any built-in data types
403680	408400	like numbers or logical values, recursion and things like that. So if you want to do these
408400	413280	things in the lambda calculus, you need to encode them. So I'll end up showing you a simple
413280	418240	encoding. And the encoding which I'm going to show you is the logical values, true and false.
419040	424400	And the key to this is to think, what do you do with logical values in a programming language?
424400	429600	And the basic observation is that you use them to make a choice between doing two things. You say,
429600	435200	if something is true, do one thing. If something is false, do another thing. And we're going to use
435200	441520	this idea of making a choice between two things to actually encode true and false. So the trick is
441520	448320	for true, you write down this lambda expression. So what it does is it takes two things x and y
448320	453200	and then it chooses the first. And false does the opposite. It's going to take two things
453200	458000	and it's going to choose the second. So we've got two lambda expressions here, both of which take
458000	464800	two inputs x and y, and one chooses the first one x and one chooses the second one y. So fair
464800	469680	enough, what can we actually do with this? Well, let's think how we could define a little
469680	474240	logical operator. So not is the most simple logical operator, which I could think of. It's
474240	480320	going to flip true to false and false to true. It's logical negation. Based upon this encoding,
480320	485440	how could I actually define the not operator or the not function? Well, it's very easy to do.
486000	491040	I will take in a logical value or a Boolean, as it's normally called in computer science,
491040	496480	after George Boo who first studied kind of formal logic. So we take a Boolean, which will be one
496480	502960	of true or false. And here's what we do. We apply it to false and we apply it to true. And I claim
502960	508400	that this is a valid definition for a not function. But I can very easily convince you that it's the
508400	514400	case because I can do a little calculation. So let's check if we apply not to true that we actually
514400	518800	get false. And just a few steps using the lambda calculus magic, we'll find that this actually
518800	523840	works out. So what can we do here? Well, the only thing we can do is start to expand definitions.
523840	530320	So we know what the definition of not is. It was lambda b, b applied to false and true,
530320	534960	and then we just copy down the true. So all I've done in the first step here is I've expanded
534960	540000	my definition of not. Not was defined to be this lambda calculus expression here. Now I've got a
540000	545600	function, which is this thing, and it's applied to an input. So I can just apply it. Okay. And the
545600	550960	function says if I take in a b, I just apply that b to false and true. So the thing I'm applying it to
550960	556960	is true here. So I just do the little substitution, rather than b, I write true, and then I copy down
556960	561360	the false and copy down the true, and I get down to here. And at this point, you might quite rightly
561360	564800	be thinking this looks like complete rubbish. I mean, I've just written true, false, true. What
564800	568240	does that mean? It means absolutely nothing. But it means something in the lambda calculus because
568240	574800	we continue to expand. So what we can do now is expand the definition of true. We said that true
574800	582080	takes two things and chooses the first one. So let's expand it out. So true is lambda x, lambda y,
582080	587120	x. So it chooses the first thing of two things. And then we just copy down the two inputs, false
587120	591040	and true. And you can see what's going to happen now. We've got a function here, which takes two
591040	595840	things and chooses the first thing. Here, the first thing is false. So when we apply the function,
595840	601680	we just get back false. So what you see has happened here. In just a few steps, we've shown how using
601680	607120	this encoding of true and false and not, we can actually get the desired behavior. And it's very
607120	613760	easy to check for yourself. If you apply not to false, you'll get true. And I'd like to set your
613760	619600	little kind of puzzle at this point. Think how you could define logical and or logical or in this
619600	624000	style as well. Okay, and I'm interested to see what kind of definitions people come up with in the
624000	632080	comments. So the very last thing I'd like to show you is this lambda expression here, which is a
632080	638240	very famous lambda calculus expression called the y combinator or the y operator. And actually,
638240	643280	this is the key to doing recursion in the lambda calculus. So as I mentioned, lambda calculus
643280	648240	has basically nothing in it, or it's only got three things in it, variables x, y and z, and so on,
648240	653120	a way of building functions and a way of applying functions. It's got no other control structures,
653120	658400	no other data types, no anything. So if you want to do recursion, which is the basic mechanism for
658400	663200	defining things in terms of themselves, again, computer files had videos on this, you need to
663200	668400	encode it. It turns out that this expression here is the key to encoding recursion in the lambda
668400	672880	calculus. And this expression was invented by someone called Haskell Curry. And this is the
672880	677600	Haskell that gives his name to the Haskell programming language. And he was a PhD student
677600	683120	of David Hilbert, who's a very famous mathematician. The last observation I'd like to leave you with
683120	688480	here is something that's interested me for many years. I think there's a connection between this
688480	693920	piece of kind of abstract computer science or abstract mathematics and biology. If you look at
693920	699440	human DNA, you have this double helix structure. You have two copies of the same thing side by
699440	705040	side. And this is the key to allowing DNA to self replicate. If you look at the structure of this
705040	711360	lambda expression here, you have two copies of the same thing side by side. You have lambda x f
711360	716400	applied to xx and exactly the same here. And this is the key to doing recursion, which is kind of
716400	722560	related to self replication in a programming language or in the lambda calculus. And for me,
722560	726640	I don't think this is a coincidence. I think it's a kind of interesting philosophical observation.
726640	732320	The lambda calculus has this kind of very clever way of doing recursion, which would take a video
732320	737520	on its own to explain how it actually works. But you can look it up on Wikipedia. And there's a link
737520	746080	here, I think, to biology. Somebody actually found the Y Combinator so interesting that they've had
746080	750320	it tattooed permanently on their arm. And you can find the picture of this if you do a quick web search.
751760	757040	What would people search for the Y Combinator? The Y Combinator in mathematics or computer science.
757040	758240	And tattoo, I'm guessing.
