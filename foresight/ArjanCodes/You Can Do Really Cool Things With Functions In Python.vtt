WEBVTT

00:00.000 --> 00:05.120
The most common use of functions in a piece of code is to group operations and then call

00:05.120 --> 00:08.400
that function one or more times from another place in the code.

00:08.400 --> 00:11.120
But functions are way more flexible than that.

00:11.120 --> 00:14.640
In Python, functions are objects of a type callable.

00:14.640 --> 00:16.840
You can define type aliases for them.

00:16.840 --> 00:20.280
You can pass functions as arguments to other functions.

00:20.280 --> 00:24.200
If you use a package like fun tools, you can even call functions partially.

00:24.200 --> 00:25.920
It's better than sliced bread.

00:25.920 --> 00:27.640
And I don't even like sliced bread.

00:27.640 --> 00:31.400
Have you noticed that in whatever country you are, the people living there think that

00:31.400 --> 00:34.720
their bread is better than in any other country?

00:34.720 --> 00:35.720
It's really weird.

00:35.720 --> 00:39.000
I mean, I live in the Netherlands, so for us it doesn't really apply because our bread

00:39.000 --> 00:40.320
is actually better.

00:40.320 --> 00:44.640
But if you live in one of those other countries, so basically living in a lie, how do you cope

00:44.640 --> 00:45.640
with that?

00:45.640 --> 00:49.720
Another thing we're really good at in the Netherlands is writing software design guides.

00:49.720 --> 00:53.920
For example, this one, ariancolds.com slash design guide.

00:53.920 --> 00:54.920
It's totally free.

00:54.920 --> 00:59.600
It contains the seven steps that I take whenever I design a new piece of software from scratch.

00:59.600 --> 01:03.560
I'm sharing it with you, so I hope it helps you to avoid some of the mistakes that I've

01:03.560 --> 01:04.560
made in the past.

01:04.560 --> 01:10.640
And while you're at it, order some Dutch bread or, you know, keep living in your bread

01:10.640 --> 01:11.640
fantasy world.

01:11.640 --> 01:16.320
The choice is yours, ariancolds.com slash design guide and link is also in the description

01:16.320 --> 01:17.320
of this video.

01:17.320 --> 01:21.880
Today, I'm going to show you a couple of not so common ways of using functions in your

01:21.880 --> 01:22.880
code.

01:22.880 --> 01:26.640
For example, I'm going to use a trading system with different trading strategies.

01:26.640 --> 01:31.200
So it's a bit like the strategy pattern, but we're going to do some cool stuff with functions.

01:31.200 --> 01:32.320
Let's dive in.

01:32.320 --> 01:38.480
So there's a trading strategy protocol class here that has a should buy and a should sell

01:38.480 --> 01:39.640
method.

01:39.640 --> 01:43.640
And both of these in the protocol, they're not implemented, so they raise a not implemented

01:43.640 --> 01:44.640
error.

01:44.640 --> 01:49.680
If scroll down, you see that we have an average trading strategy that looks at the last few

01:49.680 --> 01:55.320
prices and then checks whether it's below or above the average and then decides whether

01:55.320 --> 01:57.600
or not to buy based on that number.

01:57.600 --> 02:02.200
And then we also have a min max trading strategy that looks at a minimum price and a maximum

02:02.200 --> 02:03.200
price.

02:03.200 --> 02:07.160
If the price is below that minimum price, then we should buy it.

02:07.160 --> 02:11.760
If it's above a certain maximum price, then we should start selling the asset.

02:11.760 --> 02:13.840
So that's the whole idea of these two strategies.

02:13.840 --> 02:18.360
Of course, these strategies will never make you any money because the market is way more

02:18.360 --> 02:19.360
efficient than that.

02:19.360 --> 02:21.480
So don't use this for real trading.

02:21.480 --> 02:23.280
It's just meant as an example.

02:23.280 --> 02:25.200
Then we have a class trading bots.

02:25.200 --> 02:29.200
That's a data class and it has an exchange and a trading strategy.

02:29.200 --> 02:33.080
The exchange is something that I just built myself very simple.

02:33.080 --> 02:38.600
It has one constant with some price data, so it doesn't actually connect to an exchange

02:38.600 --> 02:44.360
and we have a method for getting particular market data that gets fake price data for

02:44.360 --> 02:45.360
us.

02:45.360 --> 02:48.440
It's something that simulates buying and simulates selling.

02:48.440 --> 02:53.200
So the trading bot has an exchange and it has a trading strategy, which is an instance

02:53.200 --> 02:56.700
of one of these classes, average or min max.

02:56.700 --> 03:01.320
And then there is a run method that gets a symbol, the type of currency that you want

03:01.320 --> 03:02.400
to buy or sell.

03:02.400 --> 03:03.640
That method does a few things.

03:03.640 --> 03:05.960
It gets the price data from the exchange.

03:05.960 --> 03:10.920
It determines whether we should buy or sell and then it's going to buy or sell a certain

03:10.920 --> 03:12.840
quantity of that symbol.

03:12.840 --> 03:15.600
Otherwise that's going to print no action needed.

03:15.600 --> 03:19.320
And then I have a simple main function that creates an exchange, connects to the exchange,

03:19.320 --> 03:24.720
creates a trading strategy and then a trading bot and then runs it for Bitcoin, my favorite

03:24.720 --> 03:25.720
cryptocurrency.

03:25.720 --> 03:30.280
I actually bought some Bitcoin and Ethereum again a while ago, so Bitcoin, Ethereum to

03:30.280 --> 03:31.280
the moon.

03:31.280 --> 03:34.080
Let's run this and see what happens.

03:34.080 --> 03:39.920
So in this case it's going to sell 10 Satoshi probably in the Bitcoin US dollar market.

03:39.920 --> 03:44.200
But I can also change now the trading strategy to something else.

03:44.200 --> 03:48.560
For example, let's use the average trading strategy and then what's going to happen is

03:48.560 --> 03:50.280
we're actually going to buy something.

03:50.280 --> 03:54.800
So these strategies, they have different effect on the behavior of the trading bot, which

03:54.800 --> 03:56.160
makes total sense, right?

03:56.160 --> 04:00.840
Now this is a traditional implementation of the strategy pattern.

04:00.840 --> 04:05.000
We have an abstract class or in this case a protocol class that defines the interface

04:05.000 --> 04:08.240
that has a method or in this case two methods.

04:08.240 --> 04:11.800
So it's not entirely traditional strategy pattern, but it's pretty close.

04:11.800 --> 04:17.640
Then we have subclasses or classes that implement the protocol that have these two methods should

04:17.640 --> 04:19.040
buy and should sell.

04:19.040 --> 04:21.000
And then there's another class that uses it.

04:21.000 --> 04:25.480
So that's the traditional object oriented approach of doing this.

04:25.480 --> 04:29.120
And because object oriented, it relies heavily on classes.

04:29.120 --> 04:33.440
If you're not too attached to using classes, if you don't store states, functions provide

04:33.440 --> 04:38.320
a great way to achieve the same effect as the strategy pattern in this example.

04:38.320 --> 04:44.320
In general, functions can replace or significantly simplify code that uses classes and object

04:44.320 --> 04:45.920
oriented design patterns.

04:45.920 --> 04:48.480
That doesn't mean that design patterns aren't needed anymore.

04:48.480 --> 04:53.280
That's still useful, but in many cases a functional approach might actually be much simpler.

04:53.280 --> 04:57.440
So let's change this code to use functions instead of classes.

04:57.440 --> 05:01.320
Basically if you look at the signature of these methods, each of them gets a bunch of

05:01.320 --> 05:05.240
prices and then returns a Boolean value.

05:05.240 --> 05:09.560
So in order to transform this example into using a more functional approach instead of

05:09.560 --> 05:14.240
all these classes, we should perhaps define this function type before we start doing that

05:14.240 --> 05:15.240
job.

05:15.240 --> 05:22.720
So what I'm going to do is create a trading strategy function, which is going to be our

05:22.720 --> 05:26.800
function type, and that's going to be a callable.

05:26.800 --> 05:33.640
And the input is going to be the list of prices, that's a list of integers.

05:33.640 --> 05:37.120
And what it's going to return is a Boolean value.

05:37.120 --> 05:41.160
So this is basically what any of the trading strategy functions are going to look like.

05:41.160 --> 05:46.400
So this class I'm going to delete because we're not going to use the class anymore.

05:46.400 --> 05:51.240
And then we have our average trading strategy functions and we have the min max trading

05:51.600 --> 05:57.060
strategy functions and we should simply transform them into functions that follow this signature.

05:57.060 --> 06:01.240
So let me also remove this class definition because we don't need that anymore.

06:01.240 --> 06:06.400
And I'm going to take these lines here and let's de-indent them.

06:06.400 --> 06:10.120
I'll remove the self and the same thing here.

06:10.120 --> 06:11.120
So remove the self.

06:11.120 --> 06:13.520
So we have should buy and should sell.

06:13.520 --> 06:18.080
And then let's also change the name so that we know that this is the average strategy.

06:18.080 --> 06:23.440
So this is should buy average and we have should sell average.

06:23.440 --> 06:27.340
And we can do the same thing for the min max trading strategy.

06:27.340 --> 06:36.160
So I'll just take again these function definitions, remove the self like so.

06:36.160 --> 06:45.000
And then we're going to call this min max instead like so.

06:45.000 --> 06:46.520
So now we have our functions.

06:46.520 --> 06:50.200
And now we need to change the trading bot class because no longer has a trading strategy,

06:50.200 --> 06:54.440
but it has a buy function and a sell strategy function.

06:54.440 --> 07:01.320
So let's call that the buy strategy, which is a trading strategy function.

07:01.320 --> 07:07.760
And we have the sell strategy, which is also trading strategy function.

07:07.760 --> 07:12.920
And in the run methods, we don't do this, but we call here the buy strategy.

07:12.920 --> 07:17.760
And here we call the sell strategy like so.

07:17.760 --> 07:20.680
And now we can create the trading strategy here.

07:20.680 --> 07:26.560
We can delete these lines and we simply provide the functions that the trading bot needs right

07:26.560 --> 07:27.660
here.

07:27.660 --> 07:35.900
So let's say we could have the should buy average and should sell average like so.

07:35.900 --> 07:39.080
And now let's run this code just to verify that this still works.

07:39.080 --> 07:41.280
So there is a problem here.

07:41.280 --> 07:44.360
One object has no attribute should buy.

07:44.360 --> 07:49.560
And that's of course, because we don't need to do the call here anymore because this is

07:49.560 --> 07:51.520
already a function.

07:51.520 --> 07:53.280
So let's remove that as well.

07:53.280 --> 07:56.560
Let's run this one more time and now we're getting exactly the same.

07:56.560 --> 08:01.040
But because we're using the more functional approach now, it's the code has become a bit

08:01.040 --> 08:04.000
shorter because we don't have all these classes everywhere.

08:04.000 --> 08:08.640
And another advantage is that in the trading bot, we can now supply different combinations

08:08.640 --> 08:09.640
of functions.

08:09.640 --> 08:15.440
We could have a buy strategy for average and we could have a sell strategy, which is min

08:15.440 --> 08:16.440
max.

08:16.440 --> 08:21.080
And then let me run this one more time and well, the result is the same, but you can

08:21.080 --> 08:26.000
imagine that we can make now any combination that we like.

08:26.000 --> 08:29.200
So like so, and then let's see what happens then.

08:29.200 --> 08:31.280
And now there is no action needed.

08:31.280 --> 08:35.440
So by using more functional approach here, we've also introduced some extra flexibility.

08:35.680 --> 08:40.600
Now, of course, you could also do this with the regular strategy pattern in a sense that

08:40.600 --> 08:45.600
instead of having a trading strategy that has both a should buy and should sell method,

08:45.600 --> 08:50.680
we could create classes for buying and for selling, leading to even more classes and

08:50.680 --> 08:51.920
subclasses by the way.

08:51.920 --> 08:56.400
So personally, I really prefer this type of approach where we're dealing with simple

08:56.400 --> 08:59.720
functions that we just pass to the training bot.

08:59.720 --> 09:04.440
In fact, even the trading bot, we could turn it into a function because at the moment it's

09:04.440 --> 09:06.320
a single method.

09:06.320 --> 09:10.760
We could actually turn this into a simple function that gets a symbol, an exchange,

09:10.760 --> 09:15.840
a buy strategy and a sell strategy and then just runs the strategy and there is no class

09:15.840 --> 09:16.920
needed anymore.

09:16.920 --> 09:19.000
But for now, I'll leave it like it is.

09:19.000 --> 09:23.240
It's also not a big issue that it's a class and we might want to add more methods to it

09:23.240 --> 09:24.240
in the future.

09:24.240 --> 09:28.080
One of the issues with the functional version of the strategy pattern that we use that there

09:28.080 --> 09:30.880
is no way to pass parameters to these functions.

09:30.880 --> 09:35.840
And that's because trading bot expects these functions to have a particular type, it expects

09:35.840 --> 09:39.680
these functions to accept a list of prices.

09:39.680 --> 09:44.000
But what if for the average trading strategy you want to pass parameters like the window

09:44.000 --> 09:48.880
size or for the min-max trading strategy you want to set the minimum and maximum price?

09:48.880 --> 09:50.520
Currently, we can't do that.

09:50.520 --> 09:54.280
In the original version of the code that used classes, you could pass these parameters to

09:54.280 --> 09:57.760
the class initializer and then store them as state.

09:57.760 --> 10:00.640
With functions, there are other ways to fix this.

10:00.640 --> 10:02.960
One of them is by using closures.

10:02.960 --> 10:04.680
So let's see how that works.

10:04.680 --> 10:11.320
What we're going to do is create a function that returns a trading strategy function.

10:11.320 --> 10:16.840
And then we can pass parameters to that particular function and then it can pass those parameters

10:16.840 --> 10:19.040
to the closure that it creates.

10:19.040 --> 10:22.800
And then it returns a function that we can still use in the trading strategy.

10:22.800 --> 10:28.000
So for example, here we have should buy average and we might want to change the window size

10:28.000 --> 10:29.000
here.

10:29.040 --> 10:31.080
We might want to make it bigger or smaller.

10:31.080 --> 10:34.160
So what we can do instead is use a closure.

10:34.160 --> 10:42.040
Let's call that should buy average closure.

10:42.040 --> 10:46.480
And that's going to get a window size, which is an integer.

10:46.480 --> 10:51.840
And what this is going to return is a trading strategy function.

10:51.840 --> 10:59.160
And then we define the should buy average function inside of this closure function.

10:59.160 --> 11:05.120
And here the minus three was setting that to the window size like so.

11:05.120 --> 11:13.360
And now what we're going to do is return should buy average stats are closure function.

11:13.360 --> 11:18.640
And because we're passing the window size as a parameter here, we can use it in should

11:18.640 --> 11:19.640
buy average.

11:19.640 --> 11:21.160
That's the whole idea of the closure.

11:21.160 --> 11:27.000
But the function that we return is still a function that only gets a list of prices.

11:27.000 --> 11:28.920
This is the closure mechanism.

11:28.920 --> 11:33.080
What you can now do in the main function is that instead of passing this function directly,

11:33.080 --> 11:36.240
we can pass a should buy average closure.

11:36.240 --> 11:38.280
And then we actually pass it the window size.

11:38.280 --> 11:41.120
So for example, I could not pass the window size of four.

11:41.120 --> 11:46.200
And this is going to return us the average function that takes a window size of four.

11:46.200 --> 11:50.880
And now let's run this and well, apparently we still need to buy more Bitcoin.

11:50.880 --> 11:52.600
So this is what a closure does.

11:52.600 --> 11:56.440
And you can basically use the closure for any of these other functions as well.

11:56.440 --> 12:00.960
So for example, for should sell min max, it's probably useful if we have a closure that

12:00.960 --> 12:03.120
allows to define what the price is.

12:03.120 --> 12:09.480
So let's create that should sell min max closure.

12:09.480 --> 12:14.960
So this is going to get a max price, which is an int.

12:14.960 --> 12:18.760
And this is also going to return a trading strategy function.

12:18.760 --> 12:22.680
And then this function here is going to be a part of the closure.

12:22.680 --> 12:27.840
And instead of having this fixed price, I'm going to replace it by the max price.

12:27.840 --> 12:33.040
And then it's going to return the function as a result.

12:33.040 --> 12:34.040
Like so.

12:34.040 --> 12:36.440
And this line doesn't make any sense anymore.

12:36.440 --> 12:39.280
So now we have this should sell min max closure.

12:39.280 --> 12:45.320
And then I can go here should sell min max closure and I provide a price.

12:45.320 --> 12:51.960
Let's say I only want to sell if the price is above 35,000, like so.

12:51.960 --> 12:54.320
And I need to put two additional zeros.

12:54.320 --> 13:00.080
This by the way, nice way in Python to make bigger numbers more clear in the interface

13:00.080 --> 13:01.200
actually does nothing.

13:01.200 --> 13:04.920
It doesn't change the value of this number, but it makes it a bit clearer what how many

13:04.920 --> 13:07.200
zeros there are and what exactly means.

13:07.200 --> 13:08.960
So that's why I'm using that here.

13:08.960 --> 13:15.120
So should buy and should sell now use a closure so we can set some parameters here and trading

13:15.120 --> 13:20.080
but still doesn't know anything about that because it simply gets a trading strategy

13:20.080 --> 13:21.400
function from it.

13:21.400 --> 13:26.720
So let's run this and now we're still buying 10 crypto currencies.

13:26.720 --> 13:31.360
If I change the window here to something else, let's see.

13:31.360 --> 13:35.440
Now I'm not buying anything because the window has changed and apparently we're just on

13:35.440 --> 13:37.640
the limit of whether we should buy or not.

13:37.640 --> 13:42.520
Using closure solve the problem of not being able to pass parameters to these functions.

13:42.520 --> 13:45.800
But it's a bit verbose and it's not very flexible.

13:45.800 --> 13:49.480
Instead a more elegant way of solving this is by using partial functions.

13:49.480 --> 13:55.840
A partial application or partial function application fixes a number of arguments in the original

13:55.840 --> 14:00.480
function and returns a new function without those arguments.

14:00.480 --> 14:03.640
This is different from couriering by the way, which is not a term you might have heard from

14:03.640 --> 14:05.960
the functional programming domain.

14:05.960 --> 14:09.880
Couriering means that you transform a function that takes multiple arguments into a sequence

14:09.880 --> 14:13.100
of functions that each take only a single argument.

14:13.100 --> 14:17.600
And because you can curry any function, this is very useful in theoretical computer science

14:17.600 --> 14:22.160
for example where you want to study functions with multiple arguments and then you can transform

14:22.160 --> 14:28.000
them into a simple theoretical model of function taking only a single argument.

14:28.000 --> 14:31.920
Partial functions are a way more practical approach and in this case they can really help

14:31.920 --> 14:35.160
to simplify the code and make it way more flexible.

14:35.160 --> 14:36.960
So let's see how that works.

14:36.960 --> 14:43.840
So let's first import partial from funtals because that's what we're going to use to

14:43.840 --> 14:45.760
make these functions a bit more flexible.

14:45.760 --> 14:49.600
And what I'm going to do now is really simplify these functions right here.

14:49.600 --> 14:54.760
So instead of making this a closure, what I'll do is simply add the parameter to the

14:54.760 --> 14:57.480
should buy average function instead.

14:57.480 --> 15:02.920
And then I'll delete this line, I'll delete this line and this we're going to de-indend.

15:02.920 --> 15:06.360
So now we have a simple should buy average function.

15:06.360 --> 15:14.280
And for should sell I can also add the window size in exactly the same way.

15:14.280 --> 15:17.640
So now should sell also expects a window size.

15:17.640 --> 15:19.760
For should buy I'm doing exactly the same thing.

15:19.760 --> 15:33.800
So here I'm going to provide a minimum price like so.

15:33.800 --> 15:36.640
And should sell is exactly the same.

15:36.640 --> 15:43.320
So I'm also going to add here a maximum price which is an int and then I'll delete the closure

15:43.320 --> 15:48.520
here and I'll de-indend this.

15:48.520 --> 15:54.320
And now we have our four functions back and these functions are still very simple.

15:54.320 --> 15:56.800
They just have a bunch of extra parameters.

15:56.800 --> 16:02.360
This does mean that now we can't directly use them in the trading agent because this

16:02.360 --> 16:07.880
expects a should buy and should sell method that follow exactly the trading strategy function

16:07.880 --> 16:12.480
type, which expects a list of prices and returns a boolean.

16:12.480 --> 16:16.080
And now these functions they don't adhere to this type anymore because well they expect

16:16.080 --> 16:21.080
other things as well such as this window size or the minimum and maximum price.

16:21.080 --> 16:26.280
I could get away with it in this particular example by supplying default values here and

16:26.280 --> 16:31.320
then you could still use them directly but then it would still be impossible to basically

16:31.320 --> 16:35.400
set it to a different value than the default value and we actually want to change these

16:35.400 --> 16:40.320
things so we need a better solution and partial can really help here.

16:40.320 --> 16:47.540
So what we can do with partial is create partially applied versions of these particular functions.

16:47.540 --> 16:54.400
So what you can do is and that's actually really neat, we can create a buy strategy

16:54.400 --> 17:00.440
which is then a partial application so I'm using partial here of the function which is

17:00.440 --> 17:05.400
let's say should buy average and we're going to supply the argument.

17:05.400 --> 17:13.520
So we're going to supply a window size of four and now what's interesting is that we

17:13.520 --> 17:21.160
get back from partial another function like the closure but with the window size of four.

17:21.160 --> 17:27.440
So now we can pass through the trading bot the buy strategy function like so and as you

17:27.440 --> 17:32.320
see the type errors are gone because well buy strategy is actually a function that returns

17:32.320 --> 17:39.120
a Boolean and that takes a list of prices and similarly we can create a sell strategy

17:39.120 --> 17:46.280
which is also partial application of let's say should sell average or let's do the min

17:46.280 --> 17:58.800
max actually and then we're going to supply a max price of let's say $35,000 like so and

17:58.800 --> 18:05.800
now what I can do here is supply the sell strategy and let's run this see what happens

18:05.800 --> 18:11.880
so we get some missing parenthesis somewhere oh I think this one doesn't need to be there

18:11.880 --> 18:16.840
let's run that again and now we're back at a working state of the code again so this

18:16.840 --> 18:22.000
is really powerful because now it means that we have flexibility in the way that we define

18:22.000 --> 18:28.240
our functions we can supply these extra arguments here maximum minimum price window sizes etc.

18:28.240 --> 18:35.320
But because of partial we can transform these functions into new functions with partially

18:35.320 --> 18:42.560
applied arguments so this is actually the should buy average function except it already

18:42.560 --> 18:47.480
gets a window size of four we've partially applied the function and this is really neat

18:47.480 --> 18:51.800
because this is way shorter than using the closure solution that I showed you before

18:51.800 --> 18:56.920
and it also allows you to create these functions a bit more independently of the type that's

18:56.920 --> 19:02.520
something like the trading bot expects because you can simply use partial application to

19:02.520 --> 19:08.160
resolve the rest of the arguments and then the trading bot doesn't have to know anything

19:08.160 --> 19:13.000
about that so I think this is a really neat way of allowing for more flexibility in your

19:13.000 --> 19:17.720
code while still keeping things relatively simple so partial function application I

19:17.720 --> 19:22.120
love it I think you should also experiment with it a bit more in your code if you have

19:22.120 --> 19:26.680
used partial functions already let me know in the comments what your thoughts are about

19:26.680 --> 19:31.720
this so anyway I hope you enjoyed this video and that it gave you some ideas of how you

19:31.720 --> 19:36.520
could use partial function application to your advantage give the video a like if you

19:36.520 --> 19:41.160
enjoyed it consider subscribing to my channel if you want to learn more about software design

19:41.160 --> 19:45.480
and development thanks for watching take care and see you soon

