1
00:00:00,000 --> 00:00:05,120
The most common use of functions in a piece of code is to group operations and then call

2
00:00:05,120 --> 00:00:08,400
that function one or more times from another place in the code.

3
00:00:08,400 --> 00:00:11,120
But functions are way more flexible than that.

4
00:00:11,120 --> 00:00:14,640
In Python, functions are objects of a type callable.

5
00:00:14,640 --> 00:00:16,840
You can define type aliases for them.

6
00:00:16,840 --> 00:00:20,280
You can pass functions as arguments to other functions.

7
00:00:20,280 --> 00:00:24,200
If you use a package like fun tools, you can even call functions partially.

8
00:00:24,200 --> 00:00:25,920
It's better than sliced bread.

9
00:00:25,920 --> 00:00:27,640
And I don't even like sliced bread.

10
00:00:27,640 --> 00:00:31,400
Have you noticed that in whatever country you are, the people living there think that

11
00:00:31,400 --> 00:00:34,720
their bread is better than in any other country?

12
00:00:34,720 --> 00:00:35,720
It's really weird.

13
00:00:35,720 --> 00:00:39,000
I mean, I live in the Netherlands, so for us it doesn't really apply because our bread

14
00:00:39,000 --> 00:00:40,320
is actually better.

15
00:00:40,320 --> 00:00:44,640
But if you live in one of those other countries, so basically living in a lie, how do you cope

16
00:00:44,640 --> 00:00:45,640
with that?

17
00:00:45,640 --> 00:00:49,720
Another thing we're really good at in the Netherlands is writing software design guides.

18
00:00:49,720 --> 00:00:53,920
For example, this one, ariancolds.com slash design guide.

19
00:00:53,920 --> 00:00:54,920
It's totally free.

20
00:00:54,920 --> 00:00:59,600
It contains the seven steps that I take whenever I design a new piece of software from scratch.

21
00:00:59,600 --> 00:01:03,560
I'm sharing it with you, so I hope it helps you to avoid some of the mistakes that I've

22
00:01:03,560 --> 00:01:04,560
made in the past.

23
00:01:04,560 --> 00:01:10,640
And while you're at it, order some Dutch bread or, you know, keep living in your bread

24
00:01:10,640 --> 00:01:11,640
fantasy world.

25
00:01:11,640 --> 00:01:16,320
The choice is yours, ariancolds.com slash design guide and link is also in the description

26
00:01:16,320 --> 00:01:17,320
of this video.

27
00:01:17,320 --> 00:01:21,880
Today, I'm going to show you a couple of not so common ways of using functions in your

28
00:01:21,880 --> 00:01:22,880
code.

29
00:01:22,880 --> 00:01:26,640
For example, I'm going to use a trading system with different trading strategies.

30
00:01:26,640 --> 00:01:31,200
So it's a bit like the strategy pattern, but we're going to do some cool stuff with functions.

31
00:01:31,200 --> 00:01:32,320
Let's dive in.

32
00:01:32,320 --> 00:01:38,480
So there's a trading strategy protocol class here that has a should buy and a should sell

33
00:01:38,480 --> 00:01:39,640
method.

34
00:01:39,640 --> 00:01:43,640
And both of these in the protocol, they're not implemented, so they raise a not implemented

35
00:01:43,640 --> 00:01:44,640
error.

36
00:01:44,640 --> 00:01:49,680
If scroll down, you see that we have an average trading strategy that looks at the last few

37
00:01:49,680 --> 00:01:55,320
prices and then checks whether it's below or above the average and then decides whether

38
00:01:55,320 --> 00:01:57,600
or not to buy based on that number.

39
00:01:57,600 --> 00:02:02,200
And then we also have a min max trading strategy that looks at a minimum price and a maximum

40
00:02:02,200 --> 00:02:03,200
price.

41
00:02:03,200 --> 00:02:07,160
If the price is below that minimum price, then we should buy it.

42
00:02:07,160 --> 00:02:11,760
If it's above a certain maximum price, then we should start selling the asset.

43
00:02:11,760 --> 00:02:13,840
So that's the whole idea of these two strategies.

44
00:02:13,840 --> 00:02:18,360
Of course, these strategies will never make you any money because the market is way more

45
00:02:18,360 --> 00:02:19,360
efficient than that.

46
00:02:19,360 --> 00:02:21,480
So don't use this for real trading.

47
00:02:21,480 --> 00:02:23,280
It's just meant as an example.

48
00:02:23,280 --> 00:02:25,200
Then we have a class trading bots.

49
00:02:25,200 --> 00:02:29,200
That's a data class and it has an exchange and a trading strategy.

50
00:02:29,200 --> 00:02:33,080
The exchange is something that I just built myself very simple.

51
00:02:33,080 --> 00:02:38,600
It has one constant with some price data, so it doesn't actually connect to an exchange

52
00:02:38,600 --> 00:02:44,360
and we have a method for getting particular market data that gets fake price data for

53
00:02:44,360 --> 00:02:45,360
us.

54
00:02:45,360 --> 00:02:48,440
It's something that simulates buying and simulates selling.

55
00:02:48,440 --> 00:02:53,200
So the trading bot has an exchange and it has a trading strategy, which is an instance

56
00:02:53,200 --> 00:02:56,700
of one of these classes, average or min max.

57
00:02:56,700 --> 00:03:01,320
And then there is a run method that gets a symbol, the type of currency that you want

58
00:03:01,320 --> 00:03:02,400
to buy or sell.

59
00:03:02,400 --> 00:03:03,640
That method does a few things.

60
00:03:03,640 --> 00:03:05,960
It gets the price data from the exchange.

61
00:03:05,960 --> 00:03:10,920
It determines whether we should buy or sell and then it's going to buy or sell a certain

62
00:03:10,920 --> 00:03:12,840
quantity of that symbol.

63
00:03:12,840 --> 00:03:15,600
Otherwise that's going to print no action needed.

64
00:03:15,600 --> 00:03:19,320
And then I have a simple main function that creates an exchange, connects to the exchange,

65
00:03:19,320 --> 00:03:24,720
creates a trading strategy and then a trading bot and then runs it for Bitcoin, my favorite

66
00:03:24,720 --> 00:03:25,720
cryptocurrency.

67
00:03:25,720 --> 00:03:30,280
I actually bought some Bitcoin and Ethereum again a while ago, so Bitcoin, Ethereum to

68
00:03:30,280 --> 00:03:31,280
the moon.

69
00:03:31,280 --> 00:03:34,080
Let's run this and see what happens.

70
00:03:34,080 --> 00:03:39,920
So in this case it's going to sell 10 Satoshi probably in the Bitcoin US dollar market.

71
00:03:39,920 --> 00:03:44,200
But I can also change now the trading strategy to something else.

72
00:03:44,200 --> 00:03:48,560
For example, let's use the average trading strategy and then what's going to happen is

73
00:03:48,560 --> 00:03:50,280
we're actually going to buy something.

74
00:03:50,280 --> 00:03:54,800
So these strategies, they have different effect on the behavior of the trading bot, which

75
00:03:54,800 --> 00:03:56,160
makes total sense, right?

76
00:03:56,160 --> 00:04:00,840
Now this is a traditional implementation of the strategy pattern.

77
00:04:00,840 --> 00:04:05,000
We have an abstract class or in this case a protocol class that defines the interface

78
00:04:05,000 --> 00:04:08,240
that has a method or in this case two methods.

79
00:04:08,240 --> 00:04:11,800
So it's not entirely traditional strategy pattern, but it's pretty close.

80
00:04:11,800 --> 00:04:17,640
Then we have subclasses or classes that implement the protocol that have these two methods should

81
00:04:17,640 --> 00:04:19,040
buy and should sell.

82
00:04:19,040 --> 00:04:21,000
And then there's another class that uses it.

83
00:04:21,000 --> 00:04:25,480
So that's the traditional object oriented approach of doing this.

84
00:04:25,480 --> 00:04:29,120
And because object oriented, it relies heavily on classes.

85
00:04:29,120 --> 00:04:33,440
If you're not too attached to using classes, if you don't store states, functions provide

86
00:04:33,440 --> 00:04:38,320
a great way to achieve the same effect as the strategy pattern in this example.

87
00:04:38,320 --> 00:04:44,320
In general, functions can replace or significantly simplify code that uses classes and object

88
00:04:44,320 --> 00:04:45,920
oriented design patterns.

89
00:04:45,920 --> 00:04:48,480
That doesn't mean that design patterns aren't needed anymore.

90
00:04:48,480 --> 00:04:53,280
That's still useful, but in many cases a functional approach might actually be much simpler.

91
00:04:53,280 --> 00:04:57,440
So let's change this code to use functions instead of classes.

92
00:04:57,440 --> 00:05:01,320
Basically if you look at the signature of these methods, each of them gets a bunch of

93
00:05:01,320 --> 00:05:05,240
prices and then returns a Boolean value.

94
00:05:05,240 --> 00:05:09,560
So in order to transform this example into using a more functional approach instead of

95
00:05:09,560 --> 00:05:14,240
all these classes, we should perhaps define this function type before we start doing that

96
00:05:14,240 --> 00:05:15,240
job.

97
00:05:15,240 --> 00:05:22,720
So what I'm going to do is create a trading strategy function, which is going to be our

98
00:05:22,720 --> 00:05:26,800
function type, and that's going to be a callable.

99
00:05:26,800 --> 00:05:33,640
And the input is going to be the list of prices, that's a list of integers.

100
00:05:33,640 --> 00:05:37,120
And what it's going to return is a Boolean value.

101
00:05:37,120 --> 00:05:41,160
So this is basically what any of the trading strategy functions are going to look like.

102
00:05:41,160 --> 00:05:46,400
So this class I'm going to delete because we're not going to use the class anymore.

103
00:05:46,400 --> 00:05:51,240
And then we have our average trading strategy functions and we have the min max trading

104
00:05:51,600 --> 00:05:57,060
strategy functions and we should simply transform them into functions that follow this signature.

105
00:05:57,060 --> 00:06:01,240
So let me also remove this class definition because we don't need that anymore.

106
00:06:01,240 --> 00:06:06,400
And I'm going to take these lines here and let's de-indent them.

107
00:06:06,400 --> 00:06:10,120
I'll remove the self and the same thing here.

108
00:06:10,120 --> 00:06:11,120
So remove the self.

109
00:06:11,120 --> 00:06:13,520
So we have should buy and should sell.

110
00:06:13,520 --> 00:06:18,080
And then let's also change the name so that we know that this is the average strategy.

111
00:06:18,080 --> 00:06:23,440
So this is should buy average and we have should sell average.

112
00:06:23,440 --> 00:06:27,340
And we can do the same thing for the min max trading strategy.

113
00:06:27,340 --> 00:06:36,160
So I'll just take again these function definitions, remove the self like so.

114
00:06:36,160 --> 00:06:45,000
And then we're going to call this min max instead like so.

115
00:06:45,000 --> 00:06:46,520
So now we have our functions.

116
00:06:46,520 --> 00:06:50,200
And now we need to change the trading bot class because no longer has a trading strategy,

117
00:06:50,200 --> 00:06:54,440
but it has a buy function and a sell strategy function.

118
00:06:54,440 --> 00:07:01,320
So let's call that the buy strategy, which is a trading strategy function.

119
00:07:01,320 --> 00:07:07,760
And we have the sell strategy, which is also trading strategy function.

120
00:07:07,760 --> 00:07:12,920
And in the run methods, we don't do this, but we call here the buy strategy.

121
00:07:12,920 --> 00:07:17,760
And here we call the sell strategy like so.

122
00:07:17,760 --> 00:07:20,680
And now we can create the trading strategy here.

123
00:07:20,680 --> 00:07:26,560
We can delete these lines and we simply provide the functions that the trading bot needs right

124
00:07:26,560 --> 00:07:27,660
here.

125
00:07:27,660 --> 00:07:35,900
So let's say we could have the should buy average and should sell average like so.

126
00:07:35,900 --> 00:07:39,080
And now let's run this code just to verify that this still works.

127
00:07:39,080 --> 00:07:41,280
So there is a problem here.

128
00:07:41,280 --> 00:07:44,360
One object has no attribute should buy.

129
00:07:44,360 --> 00:07:49,560
And that's of course, because we don't need to do the call here anymore because this is

130
00:07:49,560 --> 00:07:51,520
already a function.

131
00:07:51,520 --> 00:07:53,280
So let's remove that as well.

132
00:07:53,280 --> 00:07:56,560
Let's run this one more time and now we're getting exactly the same.

133
00:07:56,560 --> 00:08:01,040
But because we're using the more functional approach now, it's the code has become a bit

134
00:08:01,040 --> 00:08:04,000
shorter because we don't have all these classes everywhere.

135
00:08:04,000 --> 00:08:08,640
And another advantage is that in the trading bot, we can now supply different combinations

136
00:08:08,640 --> 00:08:09,640
of functions.

137
00:08:09,640 --> 00:08:15,440
We could have a buy strategy for average and we could have a sell strategy, which is min

138
00:08:15,440 --> 00:08:16,440
max.

139
00:08:16,440 --> 00:08:21,080
And then let me run this one more time and well, the result is the same, but you can

140
00:08:21,080 --> 00:08:26,000
imagine that we can make now any combination that we like.

141
00:08:26,000 --> 00:08:29,200
So like so, and then let's see what happens then.

142
00:08:29,200 --> 00:08:31,280
And now there is no action needed.

143
00:08:31,280 --> 00:08:35,440
So by using more functional approach here, we've also introduced some extra flexibility.

144
00:08:35,680 --> 00:08:40,600
Now, of course, you could also do this with the regular strategy pattern in a sense that

145
00:08:40,600 --> 00:08:45,600
instead of having a trading strategy that has both a should buy and should sell method,

146
00:08:45,600 --> 00:08:50,680
we could create classes for buying and for selling, leading to even more classes and

147
00:08:50,680 --> 00:08:51,920
subclasses by the way.

148
00:08:51,920 --> 00:08:56,400
So personally, I really prefer this type of approach where we're dealing with simple

149
00:08:56,400 --> 00:08:59,720
functions that we just pass to the training bot.

150
00:08:59,720 --> 00:09:04,440
In fact, even the trading bot, we could turn it into a function because at the moment it's

151
00:09:04,440 --> 00:09:06,320
a single method.

152
00:09:06,320 --> 00:09:10,760
We could actually turn this into a simple function that gets a symbol, an exchange,

153
00:09:10,760 --> 00:09:15,840
a buy strategy and a sell strategy and then just runs the strategy and there is no class

154
00:09:15,840 --> 00:09:16,920
needed anymore.

155
00:09:16,920 --> 00:09:19,000
But for now, I'll leave it like it is.

156
00:09:19,000 --> 00:09:23,240
It's also not a big issue that it's a class and we might want to add more methods to it

157
00:09:23,240 --> 00:09:24,240
in the future.

158
00:09:24,240 --> 00:09:28,080
One of the issues with the functional version of the strategy pattern that we use that there

159
00:09:28,080 --> 00:09:30,880
is no way to pass parameters to these functions.

160
00:09:30,880 --> 00:09:35,840
And that's because trading bot expects these functions to have a particular type, it expects

161
00:09:35,840 --> 00:09:39,680
these functions to accept a list of prices.

162
00:09:39,680 --> 00:09:44,000
But what if for the average trading strategy you want to pass parameters like the window

163
00:09:44,000 --> 00:09:48,880
size or for the min-max trading strategy you want to set the minimum and maximum price?

164
00:09:48,880 --> 00:09:50,520
Currently, we can't do that.

165
00:09:50,520 --> 00:09:54,280
In the original version of the code that used classes, you could pass these parameters to

166
00:09:54,280 --> 00:09:57,760
the class initializer and then store them as state.

167
00:09:57,760 --> 00:10:00,640
With functions, there are other ways to fix this.

168
00:10:00,640 --> 00:10:02,960
One of them is by using closures.

169
00:10:02,960 --> 00:10:04,680
So let's see how that works.

170
00:10:04,680 --> 00:10:11,320
What we're going to do is create a function that returns a trading strategy function.

171
00:10:11,320 --> 00:10:16,840
And then we can pass parameters to that particular function and then it can pass those parameters

172
00:10:16,840 --> 00:10:19,040
to the closure that it creates.

173
00:10:19,040 --> 00:10:22,800
And then it returns a function that we can still use in the trading strategy.

174
00:10:22,800 --> 00:10:28,000
So for example, here we have should buy average and we might want to change the window size

175
00:10:28,000 --> 00:10:29,000
here.

176
00:10:29,040 --> 00:10:31,080
We might want to make it bigger or smaller.

177
00:10:31,080 --> 00:10:34,160
So what we can do instead is use a closure.

178
00:10:34,160 --> 00:10:42,040
Let's call that should buy average closure.

179
00:10:42,040 --> 00:10:46,480
And that's going to get a window size, which is an integer.

180
00:10:46,480 --> 00:10:51,840
And what this is going to return is a trading strategy function.

181
00:10:51,840 --> 00:10:59,160
And then we define the should buy average function inside of this closure function.

182
00:10:59,160 --> 00:11:05,120
And here the minus three was setting that to the window size like so.

183
00:11:05,120 --> 00:11:13,360
And now what we're going to do is return should buy average stats are closure function.

184
00:11:13,360 --> 00:11:18,640
And because we're passing the window size as a parameter here, we can use it in should

185
00:11:18,640 --> 00:11:19,640
buy average.

186
00:11:19,640 --> 00:11:21,160
That's the whole idea of the closure.

187
00:11:21,160 --> 00:11:27,000
But the function that we return is still a function that only gets a list of prices.

188
00:11:27,000 --> 00:11:28,920
This is the closure mechanism.

189
00:11:28,920 --> 00:11:33,080
What you can now do in the main function is that instead of passing this function directly,

190
00:11:33,080 --> 00:11:36,240
we can pass a should buy average closure.

191
00:11:36,240 --> 00:11:38,280
And then we actually pass it the window size.

192
00:11:38,280 --> 00:11:41,120
So for example, I could not pass the window size of four.

193
00:11:41,120 --> 00:11:46,200
And this is going to return us the average function that takes a window size of four.

194
00:11:46,200 --> 00:11:50,880
And now let's run this and well, apparently we still need to buy more Bitcoin.

195
00:11:50,880 --> 00:11:52,600
So this is what a closure does.

196
00:11:52,600 --> 00:11:56,440
And you can basically use the closure for any of these other functions as well.

197
00:11:56,440 --> 00:12:00,960
So for example, for should sell min max, it's probably useful if we have a closure that

198
00:12:00,960 --> 00:12:03,120
allows to define what the price is.

199
00:12:03,120 --> 00:12:09,480
So let's create that should sell min max closure.

200
00:12:09,480 --> 00:12:14,960
So this is going to get a max price, which is an int.

201
00:12:14,960 --> 00:12:18,760
And this is also going to return a trading strategy function.

202
00:12:18,760 --> 00:12:22,680
And then this function here is going to be a part of the closure.

203
00:12:22,680 --> 00:12:27,840
And instead of having this fixed price, I'm going to replace it by the max price.

204
00:12:27,840 --> 00:12:33,040
And then it's going to return the function as a result.

205
00:12:33,040 --> 00:12:34,040
Like so.

206
00:12:34,040 --> 00:12:36,440
And this line doesn't make any sense anymore.

207
00:12:36,440 --> 00:12:39,280
So now we have this should sell min max closure.

208
00:12:39,280 --> 00:12:45,320
And then I can go here should sell min max closure and I provide a price.

209
00:12:45,320 --> 00:12:51,960
Let's say I only want to sell if the price is above 35,000, like so.

210
00:12:51,960 --> 00:12:54,320
And I need to put two additional zeros.

211
00:12:54,320 --> 00:13:00,080
This by the way, nice way in Python to make bigger numbers more clear in the interface

212
00:13:00,080 --> 00:13:01,200
actually does nothing.

213
00:13:01,200 --> 00:13:04,920
It doesn't change the value of this number, but it makes it a bit clearer what how many

214
00:13:04,920 --> 00:13:07,200
zeros there are and what exactly means.

215
00:13:07,200 --> 00:13:08,960
So that's why I'm using that here.

216
00:13:08,960 --> 00:13:15,120
So should buy and should sell now use a closure so we can set some parameters here and trading

217
00:13:15,120 --> 00:13:20,080
but still doesn't know anything about that because it simply gets a trading strategy

218
00:13:20,080 --> 00:13:21,400
function from it.

219
00:13:21,400 --> 00:13:26,720
So let's run this and now we're still buying 10 crypto currencies.

220
00:13:26,720 --> 00:13:31,360
If I change the window here to something else, let's see.

221
00:13:31,360 --> 00:13:35,440
Now I'm not buying anything because the window has changed and apparently we're just on

222
00:13:35,440 --> 00:13:37,640
the limit of whether we should buy or not.

223
00:13:37,640 --> 00:13:42,520
Using closure solve the problem of not being able to pass parameters to these functions.

224
00:13:42,520 --> 00:13:45,800
But it's a bit verbose and it's not very flexible.

225
00:13:45,800 --> 00:13:49,480
Instead a more elegant way of solving this is by using partial functions.

226
00:13:49,480 --> 00:13:55,840
A partial application or partial function application fixes a number of arguments in the original

227
00:13:55,840 --> 00:14:00,480
function and returns a new function without those arguments.

228
00:14:00,480 --> 00:14:03,640
This is different from couriering by the way, which is not a term you might have heard from

229
00:14:03,640 --> 00:14:05,960
the functional programming domain.

230
00:14:05,960 --> 00:14:09,880
Couriering means that you transform a function that takes multiple arguments into a sequence

231
00:14:09,880 --> 00:14:13,100
of functions that each take only a single argument.

232
00:14:13,100 --> 00:14:17,600
And because you can curry any function, this is very useful in theoretical computer science

233
00:14:17,600 --> 00:14:22,160
for example where you want to study functions with multiple arguments and then you can transform

234
00:14:22,160 --> 00:14:28,000
them into a simple theoretical model of function taking only a single argument.

235
00:14:28,000 --> 00:14:31,920
Partial functions are a way more practical approach and in this case they can really help

236
00:14:31,920 --> 00:14:35,160
to simplify the code and make it way more flexible.

237
00:14:35,160 --> 00:14:36,960
So let's see how that works.

238
00:14:36,960 --> 00:14:43,840
So let's first import partial from funtals because that's what we're going to use to

239
00:14:43,840 --> 00:14:45,760
make these functions a bit more flexible.

240
00:14:45,760 --> 00:14:49,600
And what I'm going to do now is really simplify these functions right here.

241
00:14:49,600 --> 00:14:54,760
So instead of making this a closure, what I'll do is simply add the parameter to the

242
00:14:54,760 --> 00:14:57,480
should buy average function instead.

243
00:14:57,480 --> 00:15:02,920
And then I'll delete this line, I'll delete this line and this we're going to de-indend.

244
00:15:02,920 --> 00:15:06,360
So now we have a simple should buy average function.

245
00:15:06,360 --> 00:15:14,280
And for should sell I can also add the window size in exactly the same way.

246
00:15:14,280 --> 00:15:17,640
So now should sell also expects a window size.

247
00:15:17,640 --> 00:15:19,760
For should buy I'm doing exactly the same thing.

248
00:15:19,760 --> 00:15:33,800
So here I'm going to provide a minimum price like so.

249
00:15:33,800 --> 00:15:36,640
And should sell is exactly the same.

250
00:15:36,640 --> 00:15:43,320
So I'm also going to add here a maximum price which is an int and then I'll delete the closure

251
00:15:43,320 --> 00:15:48,520
here and I'll de-indend this.

252
00:15:48,520 --> 00:15:54,320
And now we have our four functions back and these functions are still very simple.

253
00:15:54,320 --> 00:15:56,800
They just have a bunch of extra parameters.

254
00:15:56,800 --> 00:16:02,360
This does mean that now we can't directly use them in the trading agent because this

255
00:16:02,360 --> 00:16:07,880
expects a should buy and should sell method that follow exactly the trading strategy function

256
00:16:07,880 --> 00:16:12,480
type, which expects a list of prices and returns a boolean.

257
00:16:12,480 --> 00:16:16,080
And now these functions they don't adhere to this type anymore because well they expect

258
00:16:16,080 --> 00:16:21,080
other things as well such as this window size or the minimum and maximum price.

259
00:16:21,080 --> 00:16:26,280
I could get away with it in this particular example by supplying default values here and

260
00:16:26,280 --> 00:16:31,320
then you could still use them directly but then it would still be impossible to basically

261
00:16:31,320 --> 00:16:35,400
set it to a different value than the default value and we actually want to change these

262
00:16:35,400 --> 00:16:40,320
things so we need a better solution and partial can really help here.

263
00:16:40,320 --> 00:16:47,540
So what we can do with partial is create partially applied versions of these particular functions.

264
00:16:47,540 --> 00:16:54,400
So what you can do is and that's actually really neat, we can create a buy strategy

265
00:16:54,400 --> 00:17:00,440
which is then a partial application so I'm using partial here of the function which is

266
00:17:00,440 --> 00:17:05,400
let's say should buy average and we're going to supply the argument.

267
00:17:05,400 --> 00:17:13,520
So we're going to supply a window size of four and now what's interesting is that we

268
00:17:13,520 --> 00:17:21,160
get back from partial another function like the closure but with the window size of four.

269
00:17:21,160 --> 00:17:27,440
So now we can pass through the trading bot the buy strategy function like so and as you

270
00:17:27,440 --> 00:17:32,320
see the type errors are gone because well buy strategy is actually a function that returns

271
00:17:32,320 --> 00:17:39,120
a Boolean and that takes a list of prices and similarly we can create a sell strategy

272
00:17:39,120 --> 00:17:46,280
which is also partial application of let's say should sell average or let's do the min

273
00:17:46,280 --> 00:17:58,800
max actually and then we're going to supply a max price of let's say $35,000 like so and

274
00:17:58,800 --> 00:18:05,800
now what I can do here is supply the sell strategy and let's run this see what happens

275
00:18:05,800 --> 00:18:11,880
so we get some missing parenthesis somewhere oh I think this one doesn't need to be there

276
00:18:11,880 --> 00:18:16,840
let's run that again and now we're back at a working state of the code again so this

277
00:18:16,840 --> 00:18:22,000
is really powerful because now it means that we have flexibility in the way that we define

278
00:18:22,000 --> 00:18:28,240
our functions we can supply these extra arguments here maximum minimum price window sizes etc.

279
00:18:28,240 --> 00:18:35,320
But because of partial we can transform these functions into new functions with partially

280
00:18:35,320 --> 00:18:42,560
applied arguments so this is actually the should buy average function except it already

281
00:18:42,560 --> 00:18:47,480
gets a window size of four we've partially applied the function and this is really neat

282
00:18:47,480 --> 00:18:51,800
because this is way shorter than using the closure solution that I showed you before

283
00:18:51,800 --> 00:18:56,920
and it also allows you to create these functions a bit more independently of the type that's

284
00:18:56,920 --> 00:19:02,520
something like the trading bot expects because you can simply use partial application to

285
00:19:02,520 --> 00:19:08,160
resolve the rest of the arguments and then the trading bot doesn't have to know anything

286
00:19:08,160 --> 00:19:13,000
about that so I think this is a really neat way of allowing for more flexibility in your

287
00:19:13,000 --> 00:19:17,720
code while still keeping things relatively simple so partial function application I

288
00:19:17,720 --> 00:19:22,120
love it I think you should also experiment with it a bit more in your code if you have

289
00:19:22,120 --> 00:19:26,680
used partial functions already let me know in the comments what your thoughts are about

290
00:19:26,680 --> 00:19:31,720
this so anyway I hope you enjoyed this video and that it gave you some ideas of how you

291
00:19:31,720 --> 00:19:36,520
could use partial function application to your advantage give the video a like if you

292
00:19:36,520 --> 00:19:41,160
enjoyed it consider subscribing to my channel if you want to learn more about software design

293
00:19:41,160 --> 00:19:45,480
and development thanks for watching take care and see you soon

