{"text": " The most common use of functions in a piece of code is to group operations and then call that function one or more times from another place in the code. But functions are way more flexible than that. In Python, functions are objects of a type callable. You can define type aliases for them. You can pass functions as arguments to other functions. If you use a package like fun tools, you can even call functions partially. It's better than sliced bread. And I don't even like sliced bread. Have you noticed that in whatever country you are, the people living there think that their bread is better than in any other country? It's really weird. I mean, I live in the Netherlands, so for us it doesn't really apply because our bread is actually better. But if you live in one of those other countries, so basically living in a lie, how do you cope with that? Another thing we're really good at in the Netherlands is writing software design guides. For example, this one, ariancolds.com slash design guide. It's totally free. It contains the seven steps that I take whenever I design a new piece of software from scratch. I'm sharing it with you, so I hope it helps you to avoid some of the mistakes that I've made in the past. And while you're at it, order some Dutch bread or, you know, keep living in your bread fantasy world. The choice is yours, ariancolds.com slash design guide and link is also in the description of this video. Today, I'm going to show you a couple of not so common ways of using functions in your code. For example, I'm going to use a trading system with different trading strategies. So it's a bit like the strategy pattern, but we're going to do some cool stuff with functions. Let's dive in. So there's a trading strategy protocol class here that has a should buy and a should sell method. And both of these in the protocol, they're not implemented, so they raise a not implemented error. If scroll down, you see that we have an average trading strategy that looks at the last few prices and then checks whether it's below or above the average and then decides whether or not to buy based on that number. And then we also have a min max trading strategy that looks at a minimum price and a maximum price. If the price is below that minimum price, then we should buy it. If it's above a certain maximum price, then we should start selling the asset. So that's the whole idea of these two strategies. Of course, these strategies will never make you any money because the market is way more efficient than that. So don't use this for real trading. It's just meant as an example. Then we have a class trading bots. That's a data class and it has an exchange and a trading strategy. The exchange is something that I just built myself very simple. It has one constant with some price data, so it doesn't actually connect to an exchange and we have a method for getting particular market data that gets fake price data for us. It's something that simulates buying and simulates selling. So the trading bot has an exchange and it has a trading strategy, which is an instance of one of these classes, average or min max. And then there is a run method that gets a symbol, the type of currency that you want to buy or sell. That method does a few things. It gets the price data from the exchange. It determines whether we should buy or sell and then it's going to buy or sell a certain quantity of that symbol. Otherwise that's going to print no action needed. And then I have a simple main function that creates an exchange, connects to the exchange, creates a trading strategy and then a trading bot and then runs it for Bitcoin, my favorite cryptocurrency. I actually bought some Bitcoin and Ethereum again a while ago, so Bitcoin, Ethereum to the moon. Let's run this and see what happens. So in this case it's going to sell 10 Satoshi probably in the Bitcoin US dollar market. But I can also change now the trading strategy to something else. For example, let's use the average trading strategy and then what's going to happen is we're actually going to buy something. So these strategies, they have different effect on the behavior of the trading bot, which makes total sense, right? Now this is a traditional implementation of the strategy pattern. We have an abstract class or in this case a protocol class that defines the interface that has a method or in this case two methods. So it's not entirely traditional strategy pattern, but it's pretty close. Then we have subclasses or classes that implement the protocol that have these two methods should buy and should sell. And then there's another class that uses it. So that's the traditional object oriented approach of doing this. And because object oriented, it relies heavily on classes. If you're not too attached to using classes, if you don't store states, functions provide a great way to achieve the same effect as the strategy pattern in this example. In general, functions can replace or significantly simplify code that uses classes and object oriented design patterns. That doesn't mean that design patterns aren't needed anymore. That's still useful, but in many cases a functional approach might actually be much simpler. So let's change this code to use functions instead of classes. Basically if you look at the signature of these methods, each of them gets a bunch of prices and then returns a Boolean value. So in order to transform this example into using a more functional approach instead of all these classes, we should perhaps define this function type before we start doing that job. So what I'm going to do is create a trading strategy function, which is going to be our function type, and that's going to be a callable. And the input is going to be the list of prices, that's a list of integers. And what it's going to return is a Boolean value. So this is basically what any of the trading strategy functions are going to look like. So this class I'm going to delete because we're not going to use the class anymore. And then we have our average trading strategy functions and we have the min max trading strategy functions and we should simply transform them into functions that follow this signature. So let me also remove this class definition because we don't need that anymore. And I'm going to take these lines here and let's de-indent them. I'll remove the self and the same thing here. So remove the self. So we have should buy and should sell. And then let's also change the name so that we know that this is the average strategy. So this is should buy average and we have should sell average. And we can do the same thing for the min max trading strategy. So I'll just take again these function definitions, remove the self like so. And then we're going to call this min max instead like so. So now we have our functions. And now we need to change the trading bot class because no longer has a trading strategy, but it has a buy function and a sell strategy function. So let's call that the buy strategy, which is a trading strategy function. And we have the sell strategy, which is also trading strategy function. And in the run methods, we don't do this, but we call here the buy strategy. And here we call the sell strategy like so. And now we can create the trading strategy here. We can delete these lines and we simply provide the functions that the trading bot needs right here. So let's say we could have the should buy average and should sell average like so. And now let's run this code just to verify that this still works. So there is a problem here. One object has no attribute should buy. And that's of course, because we don't need to do the call here anymore because this is already a function. So let's remove that as well. Let's run this one more time and now we're getting exactly the same. But because we're using the more functional approach now, it's the code has become a bit shorter because we don't have all these classes everywhere. And another advantage is that in the trading bot, we can now supply different combinations of functions. We could have a buy strategy for average and we could have a sell strategy, which is min max. And then let me run this one more time and well, the result is the same, but you can imagine that we can make now any combination that we like. So like so, and then let's see what happens then. And now there is no action needed. So by using more functional approach here, we've also introduced some extra flexibility. Now, of course, you could also do this with the regular strategy pattern in a sense that instead of having a trading strategy that has both a should buy and should sell method, we could create classes for buying and for selling, leading to even more classes and subclasses by the way. So personally, I really prefer this type of approach where we're dealing with simple functions that we just pass to the training bot. In fact, even the trading bot, we could turn it into a function because at the moment it's a single method. We could actually turn this into a simple function that gets a symbol, an exchange, a buy strategy and a sell strategy and then just runs the strategy and there is no class needed anymore. But for now, I'll leave it like it is. It's also not a big issue that it's a class and we might want to add more methods to it in the future. One of the issues with the functional version of the strategy pattern that we use that there is no way to pass parameters to these functions. And that's because trading bot expects these functions to have a particular type, it expects these functions to accept a list of prices. But what if for the average trading strategy you want to pass parameters like the window size or for the min-max trading strategy you want to set the minimum and maximum price? Currently, we can't do that. In the original version of the code that used classes, you could pass these parameters to the class initializer and then store them as state. With functions, there are other ways to fix this. One of them is by using closures. So let's see how that works. What we're going to do is create a function that returns a trading strategy function. And then we can pass parameters to that particular function and then it can pass those parameters to the closure that it creates. And then it returns a function that we can still use in the trading strategy. So for example, here we have should buy average and we might want to change the window size here. We might want to make it bigger or smaller. So what we can do instead is use a closure. Let's call that should buy average closure. And that's going to get a window size, which is an integer. And what this is going to return is a trading strategy function. And then we define the should buy average function inside of this closure function. And here the minus three was setting that to the window size like so. And now what we're going to do is return should buy average stats are closure function. And because we're passing the window size as a parameter here, we can use it in should buy average. That's the whole idea of the closure. But the function that we return is still a function that only gets a list of prices. This is the closure mechanism. What you can now do in the main function is that instead of passing this function directly, we can pass a should buy average closure. And then we actually pass it the window size. So for example, I could not pass the window size of four. And this is going to return us the average function that takes a window size of four. And now let's run this and well, apparently we still need to buy more Bitcoin. So this is what a closure does. And you can basically use the closure for any of these other functions as well. So for example, for should sell min max, it's probably useful if we have a closure that allows to define what the price is. So let's create that should sell min max closure. So this is going to get a max price, which is an int. And this is also going to return a trading strategy function. And then this function here is going to be a part of the closure. And instead of having this fixed price, I'm going to replace it by the max price. And then it's going to return the function as a result. Like so. And this line doesn't make any sense anymore. So now we have this should sell min max closure. And then I can go here should sell min max closure and I provide a price. Let's say I only want to sell if the price is above 35,000, like so. And I need to put two additional zeros. This by the way, nice way in Python to make bigger numbers more clear in the interface actually does nothing. It doesn't change the value of this number, but it makes it a bit clearer what how many zeros there are and what exactly means. So that's why I'm using that here. So should buy and should sell now use a closure so we can set some parameters here and trading but still doesn't know anything about that because it simply gets a trading strategy function from it. So let's run this and now we're still buying 10 crypto currencies. If I change the window here to something else, let's see. Now I'm not buying anything because the window has changed and apparently we're just on the limit of whether we should buy or not. Using closure solve the problem of not being able to pass parameters to these functions. But it's a bit verbose and it's not very flexible. Instead a more elegant way of solving this is by using partial functions. A partial application or partial function application fixes a number of arguments in the original function and returns a new function without those arguments. This is different from couriering by the way, which is not a term you might have heard from the functional programming domain. Couriering means that you transform a function that takes multiple arguments into a sequence of functions that each take only a single argument. And because you can curry any function, this is very useful in theoretical computer science for example where you want to study functions with multiple arguments and then you can transform them into a simple theoretical model of function taking only a single argument. Partial functions are a way more practical approach and in this case they can really help to simplify the code and make it way more flexible. So let's see how that works. So let's first import partial from funtals because that's what we're going to use to make these functions a bit more flexible. And what I'm going to do now is really simplify these functions right here. So instead of making this a closure, what I'll do is simply add the parameter to the should buy average function instead. And then I'll delete this line, I'll delete this line and this we're going to de-indend. So now we have a simple should buy average function. And for should sell I can also add the window size in exactly the same way. So now should sell also expects a window size. For should buy I'm doing exactly the same thing. So here I'm going to provide a minimum price like so. And should sell is exactly the same. So I'm also going to add here a maximum price which is an int and then I'll delete the closure here and I'll de-indend this. And now we have our four functions back and these functions are still very simple. They just have a bunch of extra parameters. This does mean that now we can't directly use them in the trading agent because this expects a should buy and should sell method that follow exactly the trading strategy function type, which expects a list of prices and returns a boolean. And now these functions they don't adhere to this type anymore because well they expect other things as well such as this window size or the minimum and maximum price. I could get away with it in this particular example by supplying default values here and then you could still use them directly but then it would still be impossible to basically set it to a different value than the default value and we actually want to change these things so we need a better solution and partial can really help here. So what we can do with partial is create partially applied versions of these particular functions. So what you can do is and that's actually really neat, we can create a buy strategy which is then a partial application so I'm using partial here of the function which is let's say should buy average and we're going to supply the argument. So we're going to supply a window size of four and now what's interesting is that we get back from partial another function like the closure but with the window size of four. So now we can pass through the trading bot the buy strategy function like so and as you see the type errors are gone because well buy strategy is actually a function that returns a Boolean and that takes a list of prices and similarly we can create a sell strategy which is also partial application of let's say should sell average or let's do the min max actually and then we're going to supply a max price of let's say $35,000 like so and now what I can do here is supply the sell strategy and let's run this see what happens so we get some missing parenthesis somewhere oh I think this one doesn't need to be there let's run that again and now we're back at a working state of the code again so this is really powerful because now it means that we have flexibility in the way that we define our functions we can supply these extra arguments here maximum minimum price window sizes etc. But because of partial we can transform these functions into new functions with partially applied arguments so this is actually the should buy average function except it already gets a window size of four we've partially applied the function and this is really neat because this is way shorter than using the closure solution that I showed you before and it also allows you to create these functions a bit more independently of the type that's something like the trading bot expects because you can simply use partial application to resolve the rest of the arguments and then the trading bot doesn't have to know anything about that so I think this is a really neat way of allowing for more flexibility in your code while still keeping things relatively simple so partial function application I love it I think you should also experiment with it a bit more in your code if you have used partial functions already let me know in the comments what your thoughts are about this so anyway I hope you enjoyed this video and that it gave you some ideas of how you could use partial function application to your advantage give the video a like if you enjoyed it consider subscribing to my channel if you want to learn more about software design and development thanks for watching take care and see you soon", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.12, "text": " The most common use of functions in a piece of code is to group operations and then call", "tokens": [50364, 440, 881, 2689, 764, 295, 6828, 294, 257, 2522, 295, 3089, 307, 281, 1594, 7705, 293, 550, 818, 50620], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 1, "seek": 0, "start": 5.12, "end": 8.4, "text": " that function one or more times from another place in the code.", "tokens": [50620, 300, 2445, 472, 420, 544, 1413, 490, 1071, 1081, 294, 264, 3089, 13, 50784], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 2, "seek": 0, "start": 8.4, "end": 11.120000000000001, "text": " But functions are way more flexible than that.", "tokens": [50784, 583, 6828, 366, 636, 544, 11358, 813, 300, 13, 50920], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 3, "seek": 0, "start": 11.120000000000001, "end": 14.64, "text": " In Python, functions are objects of a type callable.", "tokens": [50920, 682, 15329, 11, 6828, 366, 6565, 295, 257, 2010, 818, 712, 13, 51096], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 4, "seek": 0, "start": 14.64, "end": 16.84, "text": " You can define type aliases for them.", "tokens": [51096, 509, 393, 6964, 2010, 10198, 1957, 337, 552, 13, 51206], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 5, "seek": 0, "start": 16.84, "end": 20.28, "text": " You can pass functions as arguments to other functions.", "tokens": [51206, 509, 393, 1320, 6828, 382, 12869, 281, 661, 6828, 13, 51378], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 6, "seek": 0, "start": 20.28, "end": 24.2, "text": " If you use a package like fun tools, you can even call functions partially.", "tokens": [51378, 759, 291, 764, 257, 7372, 411, 1019, 3873, 11, 291, 393, 754, 818, 6828, 18886, 13, 51574], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 7, "seek": 0, "start": 24.2, "end": 25.92, "text": " It's better than sliced bread.", "tokens": [51574, 467, 311, 1101, 813, 27098, 5961, 13, 51660], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 8, "seek": 0, "start": 25.92, "end": 27.64, "text": " And I don't even like sliced bread.", "tokens": [51660, 400, 286, 500, 380, 754, 411, 27098, 5961, 13, 51746], "temperature": 0.0, "avg_logprob": -0.14162139582440136, "compression_ratio": 1.8314606741573034, "no_speech_prob": 0.0016732561634853482}, {"id": 9, "seek": 2764, "start": 27.64, "end": 31.400000000000002, "text": " Have you noticed that in whatever country you are, the people living there think that", "tokens": [50364, 3560, 291, 5694, 300, 294, 2035, 1941, 291, 366, 11, 264, 561, 2647, 456, 519, 300, 50552], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 10, "seek": 2764, "start": 31.400000000000002, "end": 34.72, "text": " their bread is better than in any other country?", "tokens": [50552, 641, 5961, 307, 1101, 813, 294, 604, 661, 1941, 30, 50718], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 11, "seek": 2764, "start": 34.72, "end": 35.72, "text": " It's really weird.", "tokens": [50718, 467, 311, 534, 3657, 13, 50768], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 12, "seek": 2764, "start": 35.72, "end": 39.0, "text": " I mean, I live in the Netherlands, so for us it doesn't really apply because our bread", "tokens": [50768, 286, 914, 11, 286, 1621, 294, 264, 20873, 11, 370, 337, 505, 309, 1177, 380, 534, 3079, 570, 527, 5961, 50932], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 13, "seek": 2764, "start": 39.0, "end": 40.32, "text": " is actually better.", "tokens": [50932, 307, 767, 1101, 13, 50998], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 14, "seek": 2764, "start": 40.32, "end": 44.64, "text": " But if you live in one of those other countries, so basically living in a lie, how do you cope", "tokens": [50998, 583, 498, 291, 1621, 294, 472, 295, 729, 661, 3517, 11, 370, 1936, 2647, 294, 257, 4544, 11, 577, 360, 291, 22598, 51214], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 15, "seek": 2764, "start": 44.64, "end": 45.64, "text": " with that?", "tokens": [51214, 365, 300, 30, 51264], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 16, "seek": 2764, "start": 45.64, "end": 49.72, "text": " Another thing we're really good at in the Netherlands is writing software design guides.", "tokens": [51264, 3996, 551, 321, 434, 534, 665, 412, 294, 264, 20873, 307, 3579, 4722, 1715, 17007, 13, 51468], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 17, "seek": 2764, "start": 49.72, "end": 53.92, "text": " For example, this one, ariancolds.com slash design guide.", "tokens": [51468, 1171, 1365, 11, 341, 472, 11, 257, 5501, 1291, 348, 82, 13, 1112, 17330, 1715, 5934, 13, 51678], "temperature": 0.0, "avg_logprob": -0.16160613612124794, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.006467727944254875}, {"id": 18, "seek": 5392, "start": 53.92, "end": 54.92, "text": " It's totally free.", "tokens": [50364, 467, 311, 3879, 1737, 13, 50414], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 19, "seek": 5392, "start": 54.92, "end": 59.6, "text": " It contains the seven steps that I take whenever I design a new piece of software from scratch.", "tokens": [50414, 467, 8306, 264, 3407, 4439, 300, 286, 747, 5699, 286, 1715, 257, 777, 2522, 295, 4722, 490, 8459, 13, 50648], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 20, "seek": 5392, "start": 59.6, "end": 63.56, "text": " I'm sharing it with you, so I hope it helps you to avoid some of the mistakes that I've", "tokens": [50648, 286, 478, 5414, 309, 365, 291, 11, 370, 286, 1454, 309, 3665, 291, 281, 5042, 512, 295, 264, 8038, 300, 286, 600, 50846], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 21, "seek": 5392, "start": 63.56, "end": 64.56, "text": " made in the past.", "tokens": [50846, 1027, 294, 264, 1791, 13, 50896], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 22, "seek": 5392, "start": 64.56, "end": 70.64, "text": " And while you're at it, order some Dutch bread or, you know, keep living in your bread", "tokens": [50896, 400, 1339, 291, 434, 412, 309, 11, 1668, 512, 15719, 5961, 420, 11, 291, 458, 11, 1066, 2647, 294, 428, 5961, 51200], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 23, "seek": 5392, "start": 70.64, "end": 71.64, "text": " fantasy world.", "tokens": [51200, 13861, 1002, 13, 51250], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 24, "seek": 5392, "start": 71.64, "end": 76.32000000000001, "text": " The choice is yours, ariancolds.com slash design guide and link is also in the description", "tokens": [51250, 440, 3922, 307, 6342, 11, 257, 5501, 1291, 348, 82, 13, 1112, 17330, 1715, 5934, 293, 2113, 307, 611, 294, 264, 3855, 51484], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 25, "seek": 5392, "start": 76.32000000000001, "end": 77.32000000000001, "text": " of this video.", "tokens": [51484, 295, 341, 960, 13, 51534], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 26, "seek": 5392, "start": 77.32000000000001, "end": 81.88, "text": " Today, I'm going to show you a couple of not so common ways of using functions in your", "tokens": [51534, 2692, 11, 286, 478, 516, 281, 855, 291, 257, 1916, 295, 406, 370, 2689, 2098, 295, 1228, 6828, 294, 428, 51762], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 27, "seek": 5392, "start": 81.88, "end": 82.88, "text": " code.", "tokens": [51762, 3089, 13, 51812], "temperature": 0.0, "avg_logprob": -0.14673867061220366, "compression_ratio": 1.6806451612903226, "no_speech_prob": 0.48771509528160095}, {"id": 28, "seek": 8288, "start": 82.88, "end": 86.64, "text": " For example, I'm going to use a trading system with different trading strategies.", "tokens": [50364, 1171, 1365, 11, 286, 478, 516, 281, 764, 257, 9529, 1185, 365, 819, 9529, 9029, 13, 50552], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 29, "seek": 8288, "start": 86.64, "end": 91.19999999999999, "text": " So it's a bit like the strategy pattern, but we're going to do some cool stuff with functions.", "tokens": [50552, 407, 309, 311, 257, 857, 411, 264, 5206, 5102, 11, 457, 321, 434, 516, 281, 360, 512, 1627, 1507, 365, 6828, 13, 50780], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 30, "seek": 8288, "start": 91.19999999999999, "end": 92.32, "text": " Let's dive in.", "tokens": [50780, 961, 311, 9192, 294, 13, 50836], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 31, "seek": 8288, "start": 92.32, "end": 98.47999999999999, "text": " So there's a trading strategy protocol class here that has a should buy and a should sell", "tokens": [50836, 407, 456, 311, 257, 9529, 5206, 10336, 1508, 510, 300, 575, 257, 820, 2256, 293, 257, 820, 3607, 51144], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 32, "seek": 8288, "start": 98.47999999999999, "end": 99.64, "text": " method.", "tokens": [51144, 3170, 13, 51202], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 33, "seek": 8288, "start": 99.64, "end": 103.64, "text": " And both of these in the protocol, they're not implemented, so they raise a not implemented", "tokens": [51202, 400, 1293, 295, 613, 294, 264, 10336, 11, 436, 434, 406, 12270, 11, 370, 436, 5300, 257, 406, 12270, 51402], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 34, "seek": 8288, "start": 103.64, "end": 104.64, "text": " error.", "tokens": [51402, 6713, 13, 51452], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 35, "seek": 8288, "start": 104.64, "end": 109.67999999999999, "text": " If scroll down, you see that we have an average trading strategy that looks at the last few", "tokens": [51452, 759, 11369, 760, 11, 291, 536, 300, 321, 362, 364, 4274, 9529, 5206, 300, 1542, 412, 264, 1036, 1326, 51704], "temperature": 0.0, "avg_logprob": -0.1499212596042097, "compression_ratio": 1.8045112781954886, "no_speech_prob": 0.03011038899421692}, {"id": 36, "seek": 10968, "start": 109.68, "end": 115.32000000000001, "text": " prices and then checks whether it's below or above the average and then decides whether", "tokens": [50364, 7901, 293, 550, 13834, 1968, 309, 311, 2507, 420, 3673, 264, 4274, 293, 550, 14898, 1968, 50646], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 37, "seek": 10968, "start": 115.32000000000001, "end": 117.60000000000001, "text": " or not to buy based on that number.", "tokens": [50646, 420, 406, 281, 2256, 2361, 322, 300, 1230, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 38, "seek": 10968, "start": 117.60000000000001, "end": 122.2, "text": " And then we also have a min max trading strategy that looks at a minimum price and a maximum", "tokens": [50760, 400, 550, 321, 611, 362, 257, 923, 11469, 9529, 5206, 300, 1542, 412, 257, 7285, 3218, 293, 257, 6674, 50990], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 39, "seek": 10968, "start": 122.2, "end": 123.2, "text": " price.", "tokens": [50990, 3218, 13, 51040], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 40, "seek": 10968, "start": 123.2, "end": 127.16000000000001, "text": " If the price is below that minimum price, then we should buy it.", "tokens": [51040, 759, 264, 3218, 307, 2507, 300, 7285, 3218, 11, 550, 321, 820, 2256, 309, 13, 51238], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 41, "seek": 10968, "start": 127.16000000000001, "end": 131.76000000000002, "text": " If it's above a certain maximum price, then we should start selling the asset.", "tokens": [51238, 759, 309, 311, 3673, 257, 1629, 6674, 3218, 11, 550, 321, 820, 722, 6511, 264, 11999, 13, 51468], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 42, "seek": 10968, "start": 131.76000000000002, "end": 133.84, "text": " So that's the whole idea of these two strategies.", "tokens": [51468, 407, 300, 311, 264, 1379, 1558, 295, 613, 732, 9029, 13, 51572], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 43, "seek": 10968, "start": 133.84, "end": 138.36, "text": " Of course, these strategies will never make you any money because the market is way more", "tokens": [51572, 2720, 1164, 11, 613, 9029, 486, 1128, 652, 291, 604, 1460, 570, 264, 2142, 307, 636, 544, 51798], "temperature": 0.0, "avg_logprob": -0.1101005615726594, "compression_ratio": 1.9022556390977443, "no_speech_prob": 0.03351975977420807}, {"id": 44, "seek": 13836, "start": 138.36, "end": 139.36, "text": " efficient than that.", "tokens": [50364, 7148, 813, 300, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 45, "seek": 13836, "start": 139.36, "end": 141.48000000000002, "text": " So don't use this for real trading.", "tokens": [50414, 407, 500, 380, 764, 341, 337, 957, 9529, 13, 50520], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 46, "seek": 13836, "start": 141.48000000000002, "end": 143.28, "text": " It's just meant as an example.", "tokens": [50520, 467, 311, 445, 4140, 382, 364, 1365, 13, 50610], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 47, "seek": 13836, "start": 143.28, "end": 145.20000000000002, "text": " Then we have a class trading bots.", "tokens": [50610, 1396, 321, 362, 257, 1508, 9529, 35410, 13, 50706], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 48, "seek": 13836, "start": 145.20000000000002, "end": 149.20000000000002, "text": " That's a data class and it has an exchange and a trading strategy.", "tokens": [50706, 663, 311, 257, 1412, 1508, 293, 309, 575, 364, 7742, 293, 257, 9529, 5206, 13, 50906], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 49, "seek": 13836, "start": 149.20000000000002, "end": 153.08, "text": " The exchange is something that I just built myself very simple.", "tokens": [50906, 440, 7742, 307, 746, 300, 286, 445, 3094, 2059, 588, 2199, 13, 51100], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 50, "seek": 13836, "start": 153.08, "end": 158.60000000000002, "text": " It has one constant with some price data, so it doesn't actually connect to an exchange", "tokens": [51100, 467, 575, 472, 5754, 365, 512, 3218, 1412, 11, 370, 309, 1177, 380, 767, 1745, 281, 364, 7742, 51376], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 51, "seek": 13836, "start": 158.60000000000002, "end": 164.36, "text": " and we have a method for getting particular market data that gets fake price data for", "tokens": [51376, 293, 321, 362, 257, 3170, 337, 1242, 1729, 2142, 1412, 300, 2170, 7592, 3218, 1412, 337, 51664], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 52, "seek": 13836, "start": 164.36, "end": 165.36, "text": " us.", "tokens": [51664, 505, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1543210063661848, "compression_ratio": 1.7883817427385893, "no_speech_prob": 0.12075359374284744}, {"id": 53, "seek": 16536, "start": 165.36, "end": 168.44000000000003, "text": " It's something that simulates buying and simulates selling.", "tokens": [50364, 467, 311, 746, 300, 1034, 26192, 6382, 293, 1034, 26192, 6511, 13, 50518], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 54, "seek": 16536, "start": 168.44000000000003, "end": 173.20000000000002, "text": " So the trading bot has an exchange and it has a trading strategy, which is an instance", "tokens": [50518, 407, 264, 9529, 10592, 575, 364, 7742, 293, 309, 575, 257, 9529, 5206, 11, 597, 307, 364, 5197, 50756], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 55, "seek": 16536, "start": 173.20000000000002, "end": 176.70000000000002, "text": " of one of these classes, average or min max.", "tokens": [50756, 295, 472, 295, 613, 5359, 11, 4274, 420, 923, 11469, 13, 50931], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 56, "seek": 16536, "start": 176.70000000000002, "end": 181.32000000000002, "text": " And then there is a run method that gets a symbol, the type of currency that you want", "tokens": [50931, 400, 550, 456, 307, 257, 1190, 3170, 300, 2170, 257, 5986, 11, 264, 2010, 295, 13346, 300, 291, 528, 51162], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 57, "seek": 16536, "start": 181.32000000000002, "end": 182.4, "text": " to buy or sell.", "tokens": [51162, 281, 2256, 420, 3607, 13, 51216], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 58, "seek": 16536, "start": 182.4, "end": 183.64000000000001, "text": " That method does a few things.", "tokens": [51216, 663, 3170, 775, 257, 1326, 721, 13, 51278], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 59, "seek": 16536, "start": 183.64000000000001, "end": 185.96, "text": " It gets the price data from the exchange.", "tokens": [51278, 467, 2170, 264, 3218, 1412, 490, 264, 7742, 13, 51394], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 60, "seek": 16536, "start": 185.96, "end": 190.92000000000002, "text": " It determines whether we should buy or sell and then it's going to buy or sell a certain", "tokens": [51394, 467, 24799, 1968, 321, 820, 2256, 420, 3607, 293, 550, 309, 311, 516, 281, 2256, 420, 3607, 257, 1629, 51642], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 61, "seek": 16536, "start": 190.92000000000002, "end": 192.84, "text": " quantity of that symbol.", "tokens": [51642, 11275, 295, 300, 5986, 13, 51738], "temperature": 0.0, "avg_logprob": -0.13643109130859374, "compression_ratio": 1.797752808988764, "no_speech_prob": 0.005466544069349766}, {"id": 62, "seek": 19284, "start": 192.84, "end": 195.6, "text": " Otherwise that's going to print no action needed.", "tokens": [50364, 10328, 300, 311, 516, 281, 4482, 572, 3069, 2978, 13, 50502], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 63, "seek": 19284, "start": 195.6, "end": 199.32, "text": " And then I have a simple main function that creates an exchange, connects to the exchange,", "tokens": [50502, 400, 550, 286, 362, 257, 2199, 2135, 2445, 300, 7829, 364, 7742, 11, 16967, 281, 264, 7742, 11, 50688], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 64, "seek": 19284, "start": 199.32, "end": 204.72, "text": " creates a trading strategy and then a trading bot and then runs it for Bitcoin, my favorite", "tokens": [50688, 7829, 257, 9529, 5206, 293, 550, 257, 9529, 10592, 293, 550, 6676, 309, 337, 11414, 11, 452, 2954, 50958], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 65, "seek": 19284, "start": 204.72, "end": 205.72, "text": " cryptocurrency.", "tokens": [50958, 28809, 13, 51008], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 66, "seek": 19284, "start": 205.72, "end": 210.28, "text": " I actually bought some Bitcoin and Ethereum again a while ago, so Bitcoin, Ethereum to", "tokens": [51008, 286, 767, 4243, 512, 11414, 293, 26894, 797, 257, 1339, 2057, 11, 370, 11414, 11, 26894, 281, 51236], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 67, "seek": 19284, "start": 210.28, "end": 211.28, "text": " the moon.", "tokens": [51236, 264, 7135, 13, 51286], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 68, "seek": 19284, "start": 211.28, "end": 214.08, "text": " Let's run this and see what happens.", "tokens": [51286, 961, 311, 1190, 341, 293, 536, 437, 2314, 13, 51426], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 69, "seek": 19284, "start": 214.08, "end": 219.92000000000002, "text": " So in this case it's going to sell 10 Satoshi probably in the Bitcoin US dollar market.", "tokens": [51426, 407, 294, 341, 1389, 309, 311, 516, 281, 3607, 1266, 5344, 17392, 1391, 294, 264, 11414, 2546, 7241, 2142, 13, 51718], "temperature": 0.0, "avg_logprob": -0.16067965963612432, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.02867799624800682}, {"id": 70, "seek": 21992, "start": 219.92, "end": 224.2, "text": " But I can also change now the trading strategy to something else.", "tokens": [50364, 583, 286, 393, 611, 1319, 586, 264, 9529, 5206, 281, 746, 1646, 13, 50578], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 71, "seek": 21992, "start": 224.2, "end": 228.56, "text": " For example, let's use the average trading strategy and then what's going to happen is", "tokens": [50578, 1171, 1365, 11, 718, 311, 764, 264, 4274, 9529, 5206, 293, 550, 437, 311, 516, 281, 1051, 307, 50796], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 72, "seek": 21992, "start": 228.56, "end": 230.27999999999997, "text": " we're actually going to buy something.", "tokens": [50796, 321, 434, 767, 516, 281, 2256, 746, 13, 50882], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 73, "seek": 21992, "start": 230.27999999999997, "end": 234.79999999999998, "text": " So these strategies, they have different effect on the behavior of the trading bot, which", "tokens": [50882, 407, 613, 9029, 11, 436, 362, 819, 1802, 322, 264, 5223, 295, 264, 9529, 10592, 11, 597, 51108], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 74, "seek": 21992, "start": 234.79999999999998, "end": 236.16, "text": " makes total sense, right?", "tokens": [51108, 1669, 3217, 2020, 11, 558, 30, 51176], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 75, "seek": 21992, "start": 236.16, "end": 240.83999999999997, "text": " Now this is a traditional implementation of the strategy pattern.", "tokens": [51176, 823, 341, 307, 257, 5164, 11420, 295, 264, 5206, 5102, 13, 51410], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 76, "seek": 21992, "start": 240.83999999999997, "end": 245.0, "text": " We have an abstract class or in this case a protocol class that defines the interface", "tokens": [51410, 492, 362, 364, 12649, 1508, 420, 294, 341, 1389, 257, 10336, 1508, 300, 23122, 264, 9226, 51618], "temperature": 0.0, "avg_logprob": -0.12132154192243304, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.0030272342264652252}, {"id": 77, "seek": 24500, "start": 245.0, "end": 248.24, "text": " that has a method or in this case two methods.", "tokens": [50364, 300, 575, 257, 3170, 420, 294, 341, 1389, 732, 7150, 13, 50526], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 78, "seek": 24500, "start": 248.24, "end": 251.8, "text": " So it's not entirely traditional strategy pattern, but it's pretty close.", "tokens": [50526, 407, 309, 311, 406, 7696, 5164, 5206, 5102, 11, 457, 309, 311, 1238, 1998, 13, 50704], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 79, "seek": 24500, "start": 251.8, "end": 257.64, "text": " Then we have subclasses or classes that implement the protocol that have these two methods should", "tokens": [50704, 1396, 321, 362, 1422, 11665, 279, 420, 5359, 300, 4445, 264, 10336, 300, 362, 613, 732, 7150, 820, 50996], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 80, "seek": 24500, "start": 257.64, "end": 259.04, "text": " buy and should sell.", "tokens": [50996, 2256, 293, 820, 3607, 13, 51066], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 81, "seek": 24500, "start": 259.04, "end": 261.0, "text": " And then there's another class that uses it.", "tokens": [51066, 400, 550, 456, 311, 1071, 1508, 300, 4960, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 82, "seek": 24500, "start": 261.0, "end": 265.48, "text": " So that's the traditional object oriented approach of doing this.", "tokens": [51164, 407, 300, 311, 264, 5164, 2657, 21841, 3109, 295, 884, 341, 13, 51388], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 83, "seek": 24500, "start": 265.48, "end": 269.12, "text": " And because object oriented, it relies heavily on classes.", "tokens": [51388, 400, 570, 2657, 21841, 11, 309, 30910, 10950, 322, 5359, 13, 51570], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 84, "seek": 24500, "start": 269.12, "end": 273.44, "text": " If you're not too attached to using classes, if you don't store states, functions provide", "tokens": [51570, 759, 291, 434, 406, 886, 8570, 281, 1228, 5359, 11, 498, 291, 500, 380, 3531, 4368, 11, 6828, 2893, 51786], "temperature": 0.0, "avg_logprob": -0.1331890811439322, "compression_ratio": 1.7885304659498207, "no_speech_prob": 0.003764871973544359}, {"id": 85, "seek": 27344, "start": 273.44, "end": 278.32, "text": " a great way to achieve the same effect as the strategy pattern in this example.", "tokens": [50364, 257, 869, 636, 281, 4584, 264, 912, 1802, 382, 264, 5206, 5102, 294, 341, 1365, 13, 50608], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 86, "seek": 27344, "start": 278.32, "end": 284.32, "text": " In general, functions can replace or significantly simplify code that uses classes and object", "tokens": [50608, 682, 2674, 11, 6828, 393, 7406, 420, 10591, 20460, 3089, 300, 4960, 5359, 293, 2657, 50908], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 87, "seek": 27344, "start": 284.32, "end": 285.92, "text": " oriented design patterns.", "tokens": [50908, 21841, 1715, 8294, 13, 50988], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 88, "seek": 27344, "start": 285.92, "end": 288.48, "text": " That doesn't mean that design patterns aren't needed anymore.", "tokens": [50988, 663, 1177, 380, 914, 300, 1715, 8294, 3212, 380, 2978, 3602, 13, 51116], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 89, "seek": 27344, "start": 288.48, "end": 293.28, "text": " That's still useful, but in many cases a functional approach might actually be much simpler.", "tokens": [51116, 663, 311, 920, 4420, 11, 457, 294, 867, 3331, 257, 11745, 3109, 1062, 767, 312, 709, 18587, 13, 51356], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 90, "seek": 27344, "start": 293.28, "end": 297.44, "text": " So let's change this code to use functions instead of classes.", "tokens": [51356, 407, 718, 311, 1319, 341, 3089, 281, 764, 6828, 2602, 295, 5359, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 91, "seek": 27344, "start": 297.44, "end": 301.32, "text": " Basically if you look at the signature of these methods, each of them gets a bunch of", "tokens": [51564, 8537, 498, 291, 574, 412, 264, 13397, 295, 613, 7150, 11, 1184, 295, 552, 2170, 257, 3840, 295, 51758], "temperature": 0.0, "avg_logprob": -0.14803920473371232, "compression_ratio": 1.7285223367697595, "no_speech_prob": 0.015887318179011345}, {"id": 92, "seek": 30132, "start": 301.32, "end": 305.24, "text": " prices and then returns a Boolean value.", "tokens": [50364, 7901, 293, 550, 11247, 257, 23351, 28499, 2158, 13, 50560], "temperature": 0.0, "avg_logprob": -0.11544084013178108, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.12745414674282074}, {"id": 93, "seek": 30132, "start": 305.24, "end": 309.56, "text": " So in order to transform this example into using a more functional approach instead of", "tokens": [50560, 407, 294, 1668, 281, 4088, 341, 1365, 666, 1228, 257, 544, 11745, 3109, 2602, 295, 50776], "temperature": 0.0, "avg_logprob": -0.11544084013178108, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.12745414674282074}, {"id": 94, "seek": 30132, "start": 309.56, "end": 314.24, "text": " all these classes, we should perhaps define this function type before we start doing that", "tokens": [50776, 439, 613, 5359, 11, 321, 820, 4317, 6964, 341, 2445, 2010, 949, 321, 722, 884, 300, 51010], "temperature": 0.0, "avg_logprob": -0.11544084013178108, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.12745414674282074}, {"id": 95, "seek": 30132, "start": 314.24, "end": 315.24, "text": " job.", "tokens": [51010, 1691, 13, 51060], "temperature": 0.0, "avg_logprob": -0.11544084013178108, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.12745414674282074}, {"id": 96, "seek": 30132, "start": 315.24, "end": 322.71999999999997, "text": " So what I'm going to do is create a trading strategy function, which is going to be our", "tokens": [51060, 407, 437, 286, 478, 516, 281, 360, 307, 1884, 257, 9529, 5206, 2445, 11, 597, 307, 516, 281, 312, 527, 51434], "temperature": 0.0, "avg_logprob": -0.11544084013178108, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.12745414674282074}, {"id": 97, "seek": 30132, "start": 322.71999999999997, "end": 326.8, "text": " function type, and that's going to be a callable.", "tokens": [51434, 2445, 2010, 11, 293, 300, 311, 516, 281, 312, 257, 818, 712, 13, 51638], "temperature": 0.0, "avg_logprob": -0.11544084013178108, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.12745414674282074}, {"id": 98, "seek": 32680, "start": 326.8, "end": 333.64, "text": " And the input is going to be the list of prices, that's a list of integers.", "tokens": [50364, 400, 264, 4846, 307, 516, 281, 312, 264, 1329, 295, 7901, 11, 300, 311, 257, 1329, 295, 41674, 13, 50706], "temperature": 0.0, "avg_logprob": -0.11595223347345988, "compression_ratio": 1.8160377358490567, "no_speech_prob": 0.11253926903009415}, {"id": 99, "seek": 32680, "start": 333.64, "end": 337.12, "text": " And what it's going to return is a Boolean value.", "tokens": [50706, 400, 437, 309, 311, 516, 281, 2736, 307, 257, 23351, 28499, 2158, 13, 50880], "temperature": 0.0, "avg_logprob": -0.11595223347345988, "compression_ratio": 1.8160377358490567, "no_speech_prob": 0.11253926903009415}, {"id": 100, "seek": 32680, "start": 337.12, "end": 341.16, "text": " So this is basically what any of the trading strategy functions are going to look like.", "tokens": [50880, 407, 341, 307, 1936, 437, 604, 295, 264, 9529, 5206, 6828, 366, 516, 281, 574, 411, 13, 51082], "temperature": 0.0, "avg_logprob": -0.11595223347345988, "compression_ratio": 1.8160377358490567, "no_speech_prob": 0.11253926903009415}, {"id": 101, "seek": 32680, "start": 341.16, "end": 346.40000000000003, "text": " So this class I'm going to delete because we're not going to use the class anymore.", "tokens": [51082, 407, 341, 1508, 286, 478, 516, 281, 12097, 570, 321, 434, 406, 516, 281, 764, 264, 1508, 3602, 13, 51344], "temperature": 0.0, "avg_logprob": -0.11595223347345988, "compression_ratio": 1.8160377358490567, "no_speech_prob": 0.11253926903009415}, {"id": 102, "seek": 32680, "start": 346.40000000000003, "end": 351.24, "text": " And then we have our average trading strategy functions and we have the min max trading", "tokens": [51344, 400, 550, 321, 362, 527, 4274, 9529, 5206, 6828, 293, 321, 362, 264, 923, 11469, 9529, 51586], "temperature": 0.0, "avg_logprob": -0.11595223347345988, "compression_ratio": 1.8160377358490567, "no_speech_prob": 0.11253926903009415}, {"id": 103, "seek": 35124, "start": 351.6, "end": 357.06, "text": " strategy functions and we should simply transform them into functions that follow this signature.", "tokens": [50382, 5206, 6828, 293, 321, 820, 2935, 4088, 552, 666, 6828, 300, 1524, 341, 13397, 13, 50655], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 104, "seek": 35124, "start": 357.06, "end": 361.24, "text": " So let me also remove this class definition because we don't need that anymore.", "tokens": [50655, 407, 718, 385, 611, 4159, 341, 1508, 7123, 570, 321, 500, 380, 643, 300, 3602, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 105, "seek": 35124, "start": 361.24, "end": 366.40000000000003, "text": " And I'm going to take these lines here and let's de-indent them.", "tokens": [50864, 400, 286, 478, 516, 281, 747, 613, 3876, 510, 293, 718, 311, 368, 12, 471, 317, 552, 13, 51122], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 106, "seek": 35124, "start": 366.40000000000003, "end": 370.12, "text": " I'll remove the self and the same thing here.", "tokens": [51122, 286, 603, 4159, 264, 2698, 293, 264, 912, 551, 510, 13, 51308], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 107, "seek": 35124, "start": 370.12, "end": 371.12, "text": " So remove the self.", "tokens": [51308, 407, 4159, 264, 2698, 13, 51358], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 108, "seek": 35124, "start": 371.12, "end": 373.52, "text": " So we have should buy and should sell.", "tokens": [51358, 407, 321, 362, 820, 2256, 293, 820, 3607, 13, 51478], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 109, "seek": 35124, "start": 373.52, "end": 378.08, "text": " And then let's also change the name so that we know that this is the average strategy.", "tokens": [51478, 400, 550, 718, 311, 611, 1319, 264, 1315, 370, 300, 321, 458, 300, 341, 307, 264, 4274, 5206, 13, 51706], "temperature": 0.0, "avg_logprob": -0.14665427776651646, "compression_ratio": 1.786008230452675, "no_speech_prob": 0.0591883659362793}, {"id": 110, "seek": 37808, "start": 378.08, "end": 383.44, "text": " So this is should buy average and we have should sell average.", "tokens": [50364, 407, 341, 307, 820, 2256, 4274, 293, 321, 362, 820, 3607, 4274, 13, 50632], "temperature": 0.0, "avg_logprob": -0.18188051173561498, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.00426403759047389}, {"id": 111, "seek": 37808, "start": 383.44, "end": 387.34, "text": " And we can do the same thing for the min max trading strategy.", "tokens": [50632, 400, 321, 393, 360, 264, 912, 551, 337, 264, 923, 11469, 9529, 5206, 13, 50827], "temperature": 0.0, "avg_logprob": -0.18188051173561498, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.00426403759047389}, {"id": 112, "seek": 37808, "start": 387.34, "end": 396.15999999999997, "text": " So I'll just take again these function definitions, remove the self like so.", "tokens": [50827, 407, 286, 603, 445, 747, 797, 613, 2445, 21988, 11, 4159, 264, 2698, 411, 370, 13, 51268], "temperature": 0.0, "avg_logprob": -0.18188051173561498, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.00426403759047389}, {"id": 113, "seek": 37808, "start": 396.15999999999997, "end": 405.0, "text": " And then we're going to call this min max instead like so.", "tokens": [51268, 400, 550, 321, 434, 516, 281, 818, 341, 923, 11469, 2602, 411, 370, 13, 51710], "temperature": 0.0, "avg_logprob": -0.18188051173561498, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.00426403759047389}, {"id": 114, "seek": 37808, "start": 405.0, "end": 406.52, "text": " So now we have our functions.", "tokens": [51710, 407, 586, 321, 362, 527, 6828, 13, 51786], "temperature": 0.0, "avg_logprob": -0.18188051173561498, "compression_ratio": 1.6440677966101696, "no_speech_prob": 0.00426403759047389}, {"id": 115, "seek": 40652, "start": 406.52, "end": 410.2, "text": " And now we need to change the trading bot class because no longer has a trading strategy,", "tokens": [50364, 400, 586, 321, 643, 281, 1319, 264, 9529, 10592, 1508, 570, 572, 2854, 575, 257, 9529, 5206, 11, 50548], "temperature": 0.0, "avg_logprob": -0.15810728073120117, "compression_ratio": 2.0163934426229506, "no_speech_prob": 0.00208282470703125}, {"id": 116, "seek": 40652, "start": 410.2, "end": 414.44, "text": " but it has a buy function and a sell strategy function.", "tokens": [50548, 457, 309, 575, 257, 2256, 2445, 293, 257, 3607, 5206, 2445, 13, 50760], "temperature": 0.0, "avg_logprob": -0.15810728073120117, "compression_ratio": 2.0163934426229506, "no_speech_prob": 0.00208282470703125}, {"id": 117, "seek": 40652, "start": 414.44, "end": 421.32, "text": " So let's call that the buy strategy, which is a trading strategy function.", "tokens": [50760, 407, 718, 311, 818, 300, 264, 2256, 5206, 11, 597, 307, 257, 9529, 5206, 2445, 13, 51104], "temperature": 0.0, "avg_logprob": -0.15810728073120117, "compression_ratio": 2.0163934426229506, "no_speech_prob": 0.00208282470703125}, {"id": 118, "seek": 40652, "start": 421.32, "end": 427.76, "text": " And we have the sell strategy, which is also trading strategy function.", "tokens": [51104, 400, 321, 362, 264, 3607, 5206, 11, 597, 307, 611, 9529, 5206, 2445, 13, 51426], "temperature": 0.0, "avg_logprob": -0.15810728073120117, "compression_ratio": 2.0163934426229506, "no_speech_prob": 0.00208282470703125}, {"id": 119, "seek": 40652, "start": 427.76, "end": 432.91999999999996, "text": " And in the run methods, we don't do this, but we call here the buy strategy.", "tokens": [51426, 400, 294, 264, 1190, 7150, 11, 321, 500, 380, 360, 341, 11, 457, 321, 818, 510, 264, 2256, 5206, 13, 51684], "temperature": 0.0, "avg_logprob": -0.15810728073120117, "compression_ratio": 2.0163934426229506, "no_speech_prob": 0.00208282470703125}, {"id": 120, "seek": 43292, "start": 432.92, "end": 437.76, "text": " And here we call the sell strategy like so.", "tokens": [50364, 400, 510, 321, 818, 264, 3607, 5206, 411, 370, 13, 50606], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 121, "seek": 43292, "start": 437.76, "end": 440.68, "text": " And now we can create the trading strategy here.", "tokens": [50606, 400, 586, 321, 393, 1884, 264, 9529, 5206, 510, 13, 50752], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 122, "seek": 43292, "start": 440.68, "end": 446.56, "text": " We can delete these lines and we simply provide the functions that the trading bot needs right", "tokens": [50752, 492, 393, 12097, 613, 3876, 293, 321, 2935, 2893, 264, 6828, 300, 264, 9529, 10592, 2203, 558, 51046], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 123, "seek": 43292, "start": 446.56, "end": 447.66, "text": " here.", "tokens": [51046, 510, 13, 51101], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 124, "seek": 43292, "start": 447.66, "end": 455.90000000000003, "text": " So let's say we could have the should buy average and should sell average like so.", "tokens": [51101, 407, 718, 311, 584, 321, 727, 362, 264, 820, 2256, 4274, 293, 820, 3607, 4274, 411, 370, 13, 51513], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 125, "seek": 43292, "start": 455.90000000000003, "end": 459.08000000000004, "text": " And now let's run this code just to verify that this still works.", "tokens": [51513, 400, 586, 718, 311, 1190, 341, 3089, 445, 281, 16888, 300, 341, 920, 1985, 13, 51672], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 126, "seek": 43292, "start": 459.08000000000004, "end": 461.28000000000003, "text": " So there is a problem here.", "tokens": [51672, 407, 456, 307, 257, 1154, 510, 13, 51782], "temperature": 0.0, "avg_logprob": -0.13377825084485506, "compression_ratio": 1.796116504854369, "no_speech_prob": 0.016151010990142822}, {"id": 127, "seek": 46128, "start": 461.28, "end": 464.35999999999996, "text": " One object has no attribute should buy.", "tokens": [50364, 1485, 2657, 575, 572, 19667, 820, 2256, 13, 50518], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 128, "seek": 46128, "start": 464.35999999999996, "end": 469.55999999999995, "text": " And that's of course, because we don't need to do the call here anymore because this is", "tokens": [50518, 400, 300, 311, 295, 1164, 11, 570, 321, 500, 380, 643, 281, 360, 264, 818, 510, 3602, 570, 341, 307, 50778], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 129, "seek": 46128, "start": 469.55999999999995, "end": 471.52, "text": " already a function.", "tokens": [50778, 1217, 257, 2445, 13, 50876], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 130, "seek": 46128, "start": 471.52, "end": 473.28, "text": " So let's remove that as well.", "tokens": [50876, 407, 718, 311, 4159, 300, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 131, "seek": 46128, "start": 473.28, "end": 476.55999999999995, "text": " Let's run this one more time and now we're getting exactly the same.", "tokens": [50964, 961, 311, 1190, 341, 472, 544, 565, 293, 586, 321, 434, 1242, 2293, 264, 912, 13, 51128], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 132, "seek": 46128, "start": 476.55999999999995, "end": 481.03999999999996, "text": " But because we're using the more functional approach now, it's the code has become a bit", "tokens": [51128, 583, 570, 321, 434, 1228, 264, 544, 11745, 3109, 586, 11, 309, 311, 264, 3089, 575, 1813, 257, 857, 51352], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 133, "seek": 46128, "start": 481.03999999999996, "end": 484.0, "text": " shorter because we don't have all these classes everywhere.", "tokens": [51352, 11639, 570, 321, 500, 380, 362, 439, 613, 5359, 5315, 13, 51500], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 134, "seek": 46128, "start": 484.0, "end": 488.64, "text": " And another advantage is that in the trading bot, we can now supply different combinations", "tokens": [51500, 400, 1071, 5002, 307, 300, 294, 264, 9529, 10592, 11, 321, 393, 586, 5847, 819, 21267, 51732], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 135, "seek": 46128, "start": 488.64, "end": 489.64, "text": " of functions.", "tokens": [51732, 295, 6828, 13, 51782], "temperature": 0.0, "avg_logprob": -0.14335224914550782, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.013632135465741158}, {"id": 136, "seek": 48964, "start": 489.64, "end": 495.44, "text": " We could have a buy strategy for average and we could have a sell strategy, which is min", "tokens": [50364, 492, 727, 362, 257, 2256, 5206, 337, 4274, 293, 321, 727, 362, 257, 3607, 5206, 11, 597, 307, 923, 50654], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 137, "seek": 48964, "start": 495.44, "end": 496.44, "text": " max.", "tokens": [50654, 11469, 13, 50704], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 138, "seek": 48964, "start": 496.44, "end": 501.08, "text": " And then let me run this one more time and well, the result is the same, but you can", "tokens": [50704, 400, 550, 718, 385, 1190, 341, 472, 544, 565, 293, 731, 11, 264, 1874, 307, 264, 912, 11, 457, 291, 393, 50936], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 139, "seek": 48964, "start": 501.08, "end": 506.0, "text": " imagine that we can make now any combination that we like.", "tokens": [50936, 3811, 300, 321, 393, 652, 586, 604, 6562, 300, 321, 411, 13, 51182], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 140, "seek": 48964, "start": 506.0, "end": 509.2, "text": " So like so, and then let's see what happens then.", "tokens": [51182, 407, 411, 370, 11, 293, 550, 718, 311, 536, 437, 2314, 550, 13, 51342], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 141, "seek": 48964, "start": 509.2, "end": 511.28, "text": " And now there is no action needed.", "tokens": [51342, 400, 586, 456, 307, 572, 3069, 2978, 13, 51446], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 142, "seek": 48964, "start": 511.28, "end": 515.4399999999999, "text": " So by using more functional approach here, we've also introduced some extra flexibility.", "tokens": [51446, 407, 538, 1228, 544, 11745, 3109, 510, 11, 321, 600, 611, 7268, 512, 2857, 12635, 13, 51654], "temperature": 0.0, "avg_logprob": -0.15376910985073197, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.0010160683887079358}, {"id": 143, "seek": 51544, "start": 515.6800000000001, "end": 520.6, "text": " Now, of course, you could also do this with the regular strategy pattern in a sense that", "tokens": [50376, 823, 11, 295, 1164, 11, 291, 727, 611, 360, 341, 365, 264, 3890, 5206, 5102, 294, 257, 2020, 300, 50622], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 144, "seek": 51544, "start": 520.6, "end": 525.6, "text": " instead of having a trading strategy that has both a should buy and should sell method,", "tokens": [50622, 2602, 295, 1419, 257, 9529, 5206, 300, 575, 1293, 257, 820, 2256, 293, 820, 3607, 3170, 11, 50872], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 145, "seek": 51544, "start": 525.6, "end": 530.6800000000001, "text": " we could create classes for buying and for selling, leading to even more classes and", "tokens": [50872, 321, 727, 1884, 5359, 337, 6382, 293, 337, 6511, 11, 5775, 281, 754, 544, 5359, 293, 51126], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 146, "seek": 51544, "start": 530.6800000000001, "end": 531.9200000000001, "text": " subclasses by the way.", "tokens": [51126, 1422, 11665, 279, 538, 264, 636, 13, 51188], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 147, "seek": 51544, "start": 531.9200000000001, "end": 536.4000000000001, "text": " So personally, I really prefer this type of approach where we're dealing with simple", "tokens": [51188, 407, 5665, 11, 286, 534, 4382, 341, 2010, 295, 3109, 689, 321, 434, 6260, 365, 2199, 51412], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 148, "seek": 51544, "start": 536.4000000000001, "end": 539.72, "text": " functions that we just pass to the training bot.", "tokens": [51412, 6828, 300, 321, 445, 1320, 281, 264, 3097, 10592, 13, 51578], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 149, "seek": 51544, "start": 539.72, "end": 544.44, "text": " In fact, even the trading bot, we could turn it into a function because at the moment it's", "tokens": [51578, 682, 1186, 11, 754, 264, 9529, 10592, 11, 321, 727, 1261, 309, 666, 257, 2445, 570, 412, 264, 1623, 309, 311, 51814], "temperature": 0.0, "avg_logprob": -0.15248536281898373, "compression_ratio": 1.7735191637630663, "no_speech_prob": 0.021903375163674355}, {"id": 150, "seek": 54444, "start": 544.44, "end": 546.32, "text": " a single method.", "tokens": [50364, 257, 2167, 3170, 13, 50458], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 151, "seek": 54444, "start": 546.32, "end": 550.7600000000001, "text": " We could actually turn this into a simple function that gets a symbol, an exchange,", "tokens": [50458, 492, 727, 767, 1261, 341, 666, 257, 2199, 2445, 300, 2170, 257, 5986, 11, 364, 7742, 11, 50680], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 152, "seek": 54444, "start": 550.7600000000001, "end": 555.84, "text": " a buy strategy and a sell strategy and then just runs the strategy and there is no class", "tokens": [50680, 257, 2256, 5206, 293, 257, 3607, 5206, 293, 550, 445, 6676, 264, 5206, 293, 456, 307, 572, 1508, 50934], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 153, "seek": 54444, "start": 555.84, "end": 556.9200000000001, "text": " needed anymore.", "tokens": [50934, 2978, 3602, 13, 50988], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 154, "seek": 54444, "start": 556.9200000000001, "end": 559.0, "text": " But for now, I'll leave it like it is.", "tokens": [50988, 583, 337, 586, 11, 286, 603, 1856, 309, 411, 309, 307, 13, 51092], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 155, "seek": 54444, "start": 559.0, "end": 563.24, "text": " It's also not a big issue that it's a class and we might want to add more methods to it", "tokens": [51092, 467, 311, 611, 406, 257, 955, 2734, 300, 309, 311, 257, 1508, 293, 321, 1062, 528, 281, 909, 544, 7150, 281, 309, 51304], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 156, "seek": 54444, "start": 563.24, "end": 564.24, "text": " in the future.", "tokens": [51304, 294, 264, 2027, 13, 51354], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 157, "seek": 54444, "start": 564.24, "end": 568.08, "text": " One of the issues with the functional version of the strategy pattern that we use that there", "tokens": [51354, 1485, 295, 264, 2663, 365, 264, 11745, 3037, 295, 264, 5206, 5102, 300, 321, 764, 300, 456, 51546], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 158, "seek": 54444, "start": 568.08, "end": 570.8800000000001, "text": " is no way to pass parameters to these functions.", "tokens": [51546, 307, 572, 636, 281, 1320, 9834, 281, 613, 6828, 13, 51686], "temperature": 0.0, "avg_logprob": -0.1144404373769685, "compression_ratio": 1.8111111111111111, "no_speech_prob": 0.005907898303121328}, {"id": 159, "seek": 57088, "start": 570.88, "end": 575.84, "text": " And that's because trading bot expects these functions to have a particular type, it expects", "tokens": [50364, 400, 300, 311, 570, 9529, 10592, 33280, 613, 6828, 281, 362, 257, 1729, 2010, 11, 309, 33280, 50612], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 160, "seek": 57088, "start": 575.84, "end": 579.68, "text": " these functions to accept a list of prices.", "tokens": [50612, 613, 6828, 281, 3241, 257, 1329, 295, 7901, 13, 50804], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 161, "seek": 57088, "start": 579.68, "end": 584.0, "text": " But what if for the average trading strategy you want to pass parameters like the window", "tokens": [50804, 583, 437, 498, 337, 264, 4274, 9529, 5206, 291, 528, 281, 1320, 9834, 411, 264, 4910, 51020], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 162, "seek": 57088, "start": 584.0, "end": 588.88, "text": " size or for the min-max trading strategy you want to set the minimum and maximum price?", "tokens": [51020, 2744, 420, 337, 264, 923, 12, 41167, 9529, 5206, 291, 528, 281, 992, 264, 7285, 293, 6674, 3218, 30, 51264], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 163, "seek": 57088, "start": 588.88, "end": 590.52, "text": " Currently, we can't do that.", "tokens": [51264, 19964, 11, 321, 393, 380, 360, 300, 13, 51346], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 164, "seek": 57088, "start": 590.52, "end": 594.28, "text": " In the original version of the code that used classes, you could pass these parameters to", "tokens": [51346, 682, 264, 3380, 3037, 295, 264, 3089, 300, 1143, 5359, 11, 291, 727, 1320, 613, 9834, 281, 51534], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 165, "seek": 57088, "start": 594.28, "end": 597.76, "text": " the class initializer and then store them as state.", "tokens": [51534, 264, 1508, 5883, 6545, 293, 550, 3531, 552, 382, 1785, 13, 51708], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 166, "seek": 57088, "start": 597.76, "end": 600.64, "text": " With functions, there are other ways to fix this.", "tokens": [51708, 2022, 6828, 11, 456, 366, 661, 2098, 281, 3191, 341, 13, 51852], "temperature": 0.0, "avg_logprob": -0.16753622085329087, "compression_ratio": 1.8541666666666667, "no_speech_prob": 0.0004799337184522301}, {"id": 167, "seek": 60064, "start": 600.64, "end": 602.96, "text": " One of them is by using closures.", "tokens": [50364, 1485, 295, 552, 307, 538, 1228, 2611, 1303, 13, 50480], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 168, "seek": 60064, "start": 602.96, "end": 604.68, "text": " So let's see how that works.", "tokens": [50480, 407, 718, 311, 536, 577, 300, 1985, 13, 50566], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 169, "seek": 60064, "start": 604.68, "end": 611.3199999999999, "text": " What we're going to do is create a function that returns a trading strategy function.", "tokens": [50566, 708, 321, 434, 516, 281, 360, 307, 1884, 257, 2445, 300, 11247, 257, 9529, 5206, 2445, 13, 50898], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 170, "seek": 60064, "start": 611.3199999999999, "end": 616.84, "text": " And then we can pass parameters to that particular function and then it can pass those parameters", "tokens": [50898, 400, 550, 321, 393, 1320, 9834, 281, 300, 1729, 2445, 293, 550, 309, 393, 1320, 729, 9834, 51174], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 171, "seek": 60064, "start": 616.84, "end": 619.04, "text": " to the closure that it creates.", "tokens": [51174, 281, 264, 24653, 300, 309, 7829, 13, 51284], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 172, "seek": 60064, "start": 619.04, "end": 622.8, "text": " And then it returns a function that we can still use in the trading strategy.", "tokens": [51284, 400, 550, 309, 11247, 257, 2445, 300, 321, 393, 920, 764, 294, 264, 9529, 5206, 13, 51472], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 173, "seek": 60064, "start": 622.8, "end": 628.0, "text": " So for example, here we have should buy average and we might want to change the window size", "tokens": [51472, 407, 337, 1365, 11, 510, 321, 362, 820, 2256, 4274, 293, 321, 1062, 528, 281, 1319, 264, 4910, 2744, 51732], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 174, "seek": 60064, "start": 628.0, "end": 629.0, "text": " here.", "tokens": [51732, 510, 13, 51782], "temperature": 0.0, "avg_logprob": -0.13128761696604502, "compression_ratio": 1.8760330578512396, "no_speech_prob": 0.03157942742109299}, {"id": 175, "seek": 62900, "start": 629.04, "end": 631.08, "text": " We might want to make it bigger or smaller.", "tokens": [50366, 492, 1062, 528, 281, 652, 309, 3801, 420, 4356, 13, 50468], "temperature": 0.0, "avg_logprob": -0.14271719796316965, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.0023595199454575777}, {"id": 176, "seek": 62900, "start": 631.08, "end": 634.16, "text": " So what we can do instead is use a closure.", "tokens": [50468, 407, 437, 321, 393, 360, 2602, 307, 764, 257, 24653, 13, 50622], "temperature": 0.0, "avg_logprob": -0.14271719796316965, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.0023595199454575777}, {"id": 177, "seek": 62900, "start": 634.16, "end": 642.04, "text": " Let's call that should buy average closure.", "tokens": [50622, 961, 311, 818, 300, 820, 2256, 4274, 24653, 13, 51016], "temperature": 0.0, "avg_logprob": -0.14271719796316965, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.0023595199454575777}, {"id": 178, "seek": 62900, "start": 642.04, "end": 646.48, "text": " And that's going to get a window size, which is an integer.", "tokens": [51016, 400, 300, 311, 516, 281, 483, 257, 4910, 2744, 11, 597, 307, 364, 24922, 13, 51238], "temperature": 0.0, "avg_logprob": -0.14271719796316965, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.0023595199454575777}, {"id": 179, "seek": 62900, "start": 646.48, "end": 651.84, "text": " And what this is going to return is a trading strategy function.", "tokens": [51238, 400, 437, 341, 307, 516, 281, 2736, 307, 257, 9529, 5206, 2445, 13, 51506], "temperature": 0.0, "avg_logprob": -0.14271719796316965, "compression_ratio": 1.4883720930232558, "no_speech_prob": 0.0023595199454575777}, {"id": 180, "seek": 65184, "start": 651.84, "end": 659.1600000000001, "text": " And then we define the should buy average function inside of this closure function.", "tokens": [50364, 400, 550, 321, 6964, 264, 820, 2256, 4274, 2445, 1854, 295, 341, 24653, 2445, 13, 50730], "temperature": 0.0, "avg_logprob": -0.1194460673998761, "compression_ratio": 1.8669950738916257, "no_speech_prob": 0.0029348607640713453}, {"id": 181, "seek": 65184, "start": 659.1600000000001, "end": 665.12, "text": " And here the minus three was setting that to the window size like so.", "tokens": [50730, 400, 510, 264, 3175, 1045, 390, 3287, 300, 281, 264, 4910, 2744, 411, 370, 13, 51028], "temperature": 0.0, "avg_logprob": -0.1194460673998761, "compression_ratio": 1.8669950738916257, "no_speech_prob": 0.0029348607640713453}, {"id": 182, "seek": 65184, "start": 665.12, "end": 673.36, "text": " And now what we're going to do is return should buy average stats are closure function.", "tokens": [51028, 400, 586, 437, 321, 434, 516, 281, 360, 307, 2736, 820, 2256, 4274, 18152, 366, 24653, 2445, 13, 51440], "temperature": 0.0, "avg_logprob": -0.1194460673998761, "compression_ratio": 1.8669950738916257, "no_speech_prob": 0.0029348607640713453}, {"id": 183, "seek": 65184, "start": 673.36, "end": 678.64, "text": " And because we're passing the window size as a parameter here, we can use it in should", "tokens": [51440, 400, 570, 321, 434, 8437, 264, 4910, 2744, 382, 257, 13075, 510, 11, 321, 393, 764, 309, 294, 820, 51704], "temperature": 0.0, "avg_logprob": -0.1194460673998761, "compression_ratio": 1.8669950738916257, "no_speech_prob": 0.0029348607640713453}, {"id": 184, "seek": 65184, "start": 678.64, "end": 679.64, "text": " buy average.", "tokens": [51704, 2256, 4274, 13, 51754], "temperature": 0.0, "avg_logprob": -0.1194460673998761, "compression_ratio": 1.8669950738916257, "no_speech_prob": 0.0029348607640713453}, {"id": 185, "seek": 65184, "start": 679.64, "end": 681.1600000000001, "text": " That's the whole idea of the closure.", "tokens": [51754, 663, 311, 264, 1379, 1558, 295, 264, 24653, 13, 51830], "temperature": 0.0, "avg_logprob": -0.1194460673998761, "compression_ratio": 1.8669950738916257, "no_speech_prob": 0.0029348607640713453}, {"id": 186, "seek": 68116, "start": 681.16, "end": 687.0, "text": " But the function that we return is still a function that only gets a list of prices.", "tokens": [50364, 583, 264, 2445, 300, 321, 2736, 307, 920, 257, 2445, 300, 787, 2170, 257, 1329, 295, 7901, 13, 50656], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 187, "seek": 68116, "start": 687.0, "end": 688.92, "text": " This is the closure mechanism.", "tokens": [50656, 639, 307, 264, 24653, 7513, 13, 50752], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 188, "seek": 68116, "start": 688.92, "end": 693.0799999999999, "text": " What you can now do in the main function is that instead of passing this function directly,", "tokens": [50752, 708, 291, 393, 586, 360, 294, 264, 2135, 2445, 307, 300, 2602, 295, 8437, 341, 2445, 3838, 11, 50960], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 189, "seek": 68116, "start": 693.0799999999999, "end": 696.24, "text": " we can pass a should buy average closure.", "tokens": [50960, 321, 393, 1320, 257, 820, 2256, 4274, 24653, 13, 51118], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 190, "seek": 68116, "start": 696.24, "end": 698.28, "text": " And then we actually pass it the window size.", "tokens": [51118, 400, 550, 321, 767, 1320, 309, 264, 4910, 2744, 13, 51220], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 191, "seek": 68116, "start": 698.28, "end": 701.12, "text": " So for example, I could not pass the window size of four.", "tokens": [51220, 407, 337, 1365, 11, 286, 727, 406, 1320, 264, 4910, 2744, 295, 1451, 13, 51362], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 192, "seek": 68116, "start": 701.12, "end": 706.1999999999999, "text": " And this is going to return us the average function that takes a window size of four.", "tokens": [51362, 400, 341, 307, 516, 281, 2736, 505, 264, 4274, 2445, 300, 2516, 257, 4910, 2744, 295, 1451, 13, 51616], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 193, "seek": 68116, "start": 706.1999999999999, "end": 710.88, "text": " And now let's run this and well, apparently we still need to buy more Bitcoin.", "tokens": [51616, 400, 586, 718, 311, 1190, 341, 293, 731, 11, 7970, 321, 920, 643, 281, 2256, 544, 11414, 13, 51850], "temperature": 0.0, "avg_logprob": -0.12090522559114204, "compression_ratio": 1.8905109489051095, "no_speech_prob": 0.0018964046612381935}, {"id": 194, "seek": 71088, "start": 710.88, "end": 712.6, "text": " So this is what a closure does.", "tokens": [50364, 407, 341, 307, 437, 257, 24653, 775, 13, 50450], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 195, "seek": 71088, "start": 712.6, "end": 716.4399999999999, "text": " And you can basically use the closure for any of these other functions as well.", "tokens": [50450, 400, 291, 393, 1936, 764, 264, 24653, 337, 604, 295, 613, 661, 6828, 382, 731, 13, 50642], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 196, "seek": 71088, "start": 716.4399999999999, "end": 720.96, "text": " So for example, for should sell min max, it's probably useful if we have a closure that", "tokens": [50642, 407, 337, 1365, 11, 337, 820, 3607, 923, 11469, 11, 309, 311, 1391, 4420, 498, 321, 362, 257, 24653, 300, 50868], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 197, "seek": 71088, "start": 720.96, "end": 723.12, "text": " allows to define what the price is.", "tokens": [50868, 4045, 281, 6964, 437, 264, 3218, 307, 13, 50976], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 198, "seek": 71088, "start": 723.12, "end": 729.48, "text": " So let's create that should sell min max closure.", "tokens": [50976, 407, 718, 311, 1884, 300, 820, 3607, 923, 11469, 24653, 13, 51294], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 199, "seek": 71088, "start": 729.48, "end": 734.96, "text": " So this is going to get a max price, which is an int.", "tokens": [51294, 407, 341, 307, 516, 281, 483, 257, 11469, 3218, 11, 597, 307, 364, 560, 13, 51568], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 200, "seek": 71088, "start": 734.96, "end": 738.76, "text": " And this is also going to return a trading strategy function.", "tokens": [51568, 400, 341, 307, 611, 516, 281, 2736, 257, 9529, 5206, 2445, 13, 51758], "temperature": 0.0, "avg_logprob": -0.13740639416676648, "compression_ratio": 1.7822222222222222, "no_speech_prob": 0.007008743938058615}, {"id": 201, "seek": 73876, "start": 738.76, "end": 742.68, "text": " And then this function here is going to be a part of the closure.", "tokens": [50364, 400, 550, 341, 2445, 510, 307, 516, 281, 312, 257, 644, 295, 264, 24653, 13, 50560], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 202, "seek": 73876, "start": 742.68, "end": 747.84, "text": " And instead of having this fixed price, I'm going to replace it by the max price.", "tokens": [50560, 400, 2602, 295, 1419, 341, 6806, 3218, 11, 286, 478, 516, 281, 7406, 309, 538, 264, 11469, 3218, 13, 50818], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 203, "seek": 73876, "start": 747.84, "end": 753.04, "text": " And then it's going to return the function as a result.", "tokens": [50818, 400, 550, 309, 311, 516, 281, 2736, 264, 2445, 382, 257, 1874, 13, 51078], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 204, "seek": 73876, "start": 753.04, "end": 754.04, "text": " Like so.", "tokens": [51078, 1743, 370, 13, 51128], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 205, "seek": 73876, "start": 754.04, "end": 756.4399999999999, "text": " And this line doesn't make any sense anymore.", "tokens": [51128, 400, 341, 1622, 1177, 380, 652, 604, 2020, 3602, 13, 51248], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 206, "seek": 73876, "start": 756.4399999999999, "end": 759.28, "text": " So now we have this should sell min max closure.", "tokens": [51248, 407, 586, 321, 362, 341, 820, 3607, 923, 11469, 24653, 13, 51390], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 207, "seek": 73876, "start": 759.28, "end": 765.3199999999999, "text": " And then I can go here should sell min max closure and I provide a price.", "tokens": [51390, 400, 550, 286, 393, 352, 510, 820, 3607, 923, 11469, 24653, 293, 286, 2893, 257, 3218, 13, 51692], "temperature": 0.0, "avg_logprob": -0.12352739847623385, "compression_ratio": 1.7887323943661972, "no_speech_prob": 0.014500655233860016}, {"id": 208, "seek": 76532, "start": 765.32, "end": 771.96, "text": " Let's say I only want to sell if the price is above 35,000, like so.", "tokens": [50364, 961, 311, 584, 286, 787, 528, 281, 3607, 498, 264, 3218, 307, 3673, 6976, 11, 1360, 11, 411, 370, 13, 50696], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 209, "seek": 76532, "start": 771.96, "end": 774.32, "text": " And I need to put two additional zeros.", "tokens": [50696, 400, 286, 643, 281, 829, 732, 4497, 35193, 13, 50814], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 210, "seek": 76532, "start": 774.32, "end": 780.08, "text": " This by the way, nice way in Python to make bigger numbers more clear in the interface", "tokens": [50814, 639, 538, 264, 636, 11, 1481, 636, 294, 15329, 281, 652, 3801, 3547, 544, 1850, 294, 264, 9226, 51102], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 211, "seek": 76532, "start": 780.08, "end": 781.2, "text": " actually does nothing.", "tokens": [51102, 767, 775, 1825, 13, 51158], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 212, "seek": 76532, "start": 781.2, "end": 784.9200000000001, "text": " It doesn't change the value of this number, but it makes it a bit clearer what how many", "tokens": [51158, 467, 1177, 380, 1319, 264, 2158, 295, 341, 1230, 11, 457, 309, 1669, 309, 257, 857, 26131, 437, 577, 867, 51344], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 213, "seek": 76532, "start": 784.9200000000001, "end": 787.2, "text": " zeros there are and what exactly means.", "tokens": [51344, 35193, 456, 366, 293, 437, 2293, 1355, 13, 51458], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 214, "seek": 76532, "start": 787.2, "end": 788.96, "text": " So that's why I'm using that here.", "tokens": [51458, 407, 300, 311, 983, 286, 478, 1228, 300, 510, 13, 51546], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 215, "seek": 76532, "start": 788.96, "end": 795.12, "text": " So should buy and should sell now use a closure so we can set some parameters here and trading", "tokens": [51546, 407, 820, 2256, 293, 820, 3607, 586, 764, 257, 24653, 370, 321, 393, 992, 512, 9834, 510, 293, 9529, 51854], "temperature": 0.0, "avg_logprob": -0.135719238765656, "compression_ratio": 1.5973154362416107, "no_speech_prob": 0.12748238444328308}, {"id": 216, "seek": 79512, "start": 795.12, "end": 800.08, "text": " but still doesn't know anything about that because it simply gets a trading strategy", "tokens": [50364, 457, 920, 1177, 380, 458, 1340, 466, 300, 570, 309, 2935, 2170, 257, 9529, 5206, 50612], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 217, "seek": 79512, "start": 800.08, "end": 801.4, "text": " function from it.", "tokens": [50612, 2445, 490, 309, 13, 50678], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 218, "seek": 79512, "start": 801.4, "end": 806.72, "text": " So let's run this and now we're still buying 10 crypto currencies.", "tokens": [50678, 407, 718, 311, 1190, 341, 293, 586, 321, 434, 920, 6382, 1266, 17240, 36886, 13, 50944], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 219, "seek": 79512, "start": 806.72, "end": 811.36, "text": " If I change the window here to something else, let's see.", "tokens": [50944, 759, 286, 1319, 264, 4910, 510, 281, 746, 1646, 11, 718, 311, 536, 13, 51176], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 220, "seek": 79512, "start": 811.36, "end": 815.44, "text": " Now I'm not buying anything because the window has changed and apparently we're just on", "tokens": [51176, 823, 286, 478, 406, 6382, 1340, 570, 264, 4910, 575, 3105, 293, 7970, 321, 434, 445, 322, 51380], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 221, "seek": 79512, "start": 815.44, "end": 817.64, "text": " the limit of whether we should buy or not.", "tokens": [51380, 264, 4948, 295, 1968, 321, 820, 2256, 420, 406, 13, 51490], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 222, "seek": 79512, "start": 817.64, "end": 822.52, "text": " Using closure solve the problem of not being able to pass parameters to these functions.", "tokens": [51490, 11142, 24653, 5039, 264, 1154, 295, 406, 885, 1075, 281, 1320, 9834, 281, 613, 6828, 13, 51734], "temperature": 0.0, "avg_logprob": -0.1609737895359503, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.02672242932021618}, {"id": 223, "seek": 82252, "start": 822.52, "end": 825.8, "text": " But it's a bit verbose and it's not very flexible.", "tokens": [50364, 583, 309, 311, 257, 857, 9595, 541, 293, 309, 311, 406, 588, 11358, 13, 50528], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 224, "seek": 82252, "start": 825.8, "end": 829.48, "text": " Instead a more elegant way of solving this is by using partial functions.", "tokens": [50528, 7156, 257, 544, 21117, 636, 295, 12606, 341, 307, 538, 1228, 14641, 6828, 13, 50712], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 225, "seek": 82252, "start": 829.48, "end": 835.84, "text": " A partial application or partial function application fixes a number of arguments in the original", "tokens": [50712, 316, 14641, 3861, 420, 14641, 2445, 3861, 32539, 257, 1230, 295, 12869, 294, 264, 3380, 51030], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 226, "seek": 82252, "start": 835.84, "end": 840.48, "text": " function and returns a new function without those arguments.", "tokens": [51030, 2445, 293, 11247, 257, 777, 2445, 1553, 729, 12869, 13, 51262], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 227, "seek": 82252, "start": 840.48, "end": 843.64, "text": " This is different from couriering by the way, which is not a term you might have heard from", "tokens": [51262, 639, 307, 819, 490, 1005, 811, 278, 538, 264, 636, 11, 597, 307, 406, 257, 1433, 291, 1062, 362, 2198, 490, 51420], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 228, "seek": 82252, "start": 843.64, "end": 845.96, "text": " the functional programming domain.", "tokens": [51420, 264, 11745, 9410, 9274, 13, 51536], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 229, "seek": 82252, "start": 845.96, "end": 849.88, "text": " Couriering means that you transform a function that takes multiple arguments into a sequence", "tokens": [51536, 6413, 811, 278, 1355, 300, 291, 4088, 257, 2445, 300, 2516, 3866, 12869, 666, 257, 8310, 51732], "temperature": 0.0, "avg_logprob": -0.17733475968644424, "compression_ratio": 1.8224637681159421, "no_speech_prob": 0.0023227587807923555}, {"id": 230, "seek": 84988, "start": 849.88, "end": 853.1, "text": " of functions that each take only a single argument.", "tokens": [50364, 295, 6828, 300, 1184, 747, 787, 257, 2167, 6770, 13, 50525], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 231, "seek": 84988, "start": 853.1, "end": 857.6, "text": " And because you can curry any function, this is very useful in theoretical computer science", "tokens": [50525, 400, 570, 291, 393, 18123, 604, 2445, 11, 341, 307, 588, 4420, 294, 20864, 3820, 3497, 50750], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 232, "seek": 84988, "start": 857.6, "end": 862.16, "text": " for example where you want to study functions with multiple arguments and then you can transform", "tokens": [50750, 337, 1365, 689, 291, 528, 281, 2979, 6828, 365, 3866, 12869, 293, 550, 291, 393, 4088, 50978], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 233, "seek": 84988, "start": 862.16, "end": 868.0, "text": " them into a simple theoretical model of function taking only a single argument.", "tokens": [50978, 552, 666, 257, 2199, 20864, 2316, 295, 2445, 1940, 787, 257, 2167, 6770, 13, 51270], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 234, "seek": 84988, "start": 868.0, "end": 871.92, "text": " Partial functions are a way more practical approach and in this case they can really help", "tokens": [51270, 4100, 831, 6828, 366, 257, 636, 544, 8496, 3109, 293, 294, 341, 1389, 436, 393, 534, 854, 51466], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 235, "seek": 84988, "start": 871.92, "end": 875.16, "text": " to simplify the code and make it way more flexible.", "tokens": [51466, 281, 20460, 264, 3089, 293, 652, 309, 636, 544, 11358, 13, 51628], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 236, "seek": 84988, "start": 875.16, "end": 876.96, "text": " So let's see how that works.", "tokens": [51628, 407, 718, 311, 536, 577, 300, 1985, 13, 51718], "temperature": 0.0, "avg_logprob": -0.1189632150861952, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.04726385697722435}, {"id": 237, "seek": 87696, "start": 876.96, "end": 883.84, "text": " So let's first import partial from funtals because that's what we're going to use to", "tokens": [50364, 407, 718, 311, 700, 974, 14641, 490, 1019, 83, 1124, 570, 300, 311, 437, 321, 434, 516, 281, 764, 281, 50708], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 238, "seek": 87696, "start": 883.84, "end": 885.76, "text": " make these functions a bit more flexible.", "tokens": [50708, 652, 613, 6828, 257, 857, 544, 11358, 13, 50804], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 239, "seek": 87696, "start": 885.76, "end": 889.6, "text": " And what I'm going to do now is really simplify these functions right here.", "tokens": [50804, 400, 437, 286, 478, 516, 281, 360, 586, 307, 534, 20460, 613, 6828, 558, 510, 13, 50996], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 240, "seek": 87696, "start": 889.6, "end": 894.76, "text": " So instead of making this a closure, what I'll do is simply add the parameter to the", "tokens": [50996, 407, 2602, 295, 1455, 341, 257, 24653, 11, 437, 286, 603, 360, 307, 2935, 909, 264, 13075, 281, 264, 51254], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 241, "seek": 87696, "start": 894.76, "end": 897.48, "text": " should buy average function instead.", "tokens": [51254, 820, 2256, 4274, 2445, 2602, 13, 51390], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 242, "seek": 87696, "start": 897.48, "end": 902.9200000000001, "text": " And then I'll delete this line, I'll delete this line and this we're going to de-indend.", "tokens": [51390, 400, 550, 286, 603, 12097, 341, 1622, 11, 286, 603, 12097, 341, 1622, 293, 341, 321, 434, 516, 281, 368, 12, 471, 521, 13, 51662], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 243, "seek": 87696, "start": 902.9200000000001, "end": 906.36, "text": " So now we have a simple should buy average function.", "tokens": [51662, 407, 586, 321, 362, 257, 2199, 820, 2256, 4274, 2445, 13, 51834], "temperature": 0.0, "avg_logprob": -0.15750295321146648, "compression_ratio": 1.9098360655737705, "no_speech_prob": 0.01614658161997795}, {"id": 244, "seek": 90636, "start": 906.36, "end": 914.28, "text": " And for should sell I can also add the window size in exactly the same way.", "tokens": [50364, 400, 337, 820, 3607, 286, 393, 611, 909, 264, 4910, 2744, 294, 2293, 264, 912, 636, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1218404691727435, "compression_ratio": 1.5734265734265733, "no_speech_prob": 0.01341963466256857}, {"id": 245, "seek": 90636, "start": 914.28, "end": 917.64, "text": " So now should sell also expects a window size.", "tokens": [50760, 407, 586, 820, 3607, 611, 33280, 257, 4910, 2744, 13, 50928], "temperature": 0.0, "avg_logprob": -0.1218404691727435, "compression_ratio": 1.5734265734265733, "no_speech_prob": 0.01341963466256857}, {"id": 246, "seek": 90636, "start": 917.64, "end": 919.76, "text": " For should buy I'm doing exactly the same thing.", "tokens": [50928, 1171, 820, 2256, 286, 478, 884, 2293, 264, 912, 551, 13, 51034], "temperature": 0.0, "avg_logprob": -0.1218404691727435, "compression_ratio": 1.5734265734265733, "no_speech_prob": 0.01341963466256857}, {"id": 247, "seek": 90636, "start": 919.76, "end": 933.8000000000001, "text": " So here I'm going to provide a minimum price like so.", "tokens": [51034, 407, 510, 286, 478, 516, 281, 2893, 257, 7285, 3218, 411, 370, 13, 51736], "temperature": 0.0, "avg_logprob": -0.1218404691727435, "compression_ratio": 1.5734265734265733, "no_speech_prob": 0.01341963466256857}, {"id": 248, "seek": 93380, "start": 933.8, "end": 936.64, "text": " And should sell is exactly the same.", "tokens": [50364, 400, 820, 3607, 307, 2293, 264, 912, 13, 50506], "temperature": 0.0, "avg_logprob": -0.13445241252581278, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0850500538945198}, {"id": 249, "seek": 93380, "start": 936.64, "end": 943.3199999999999, "text": " So I'm also going to add here a maximum price which is an int and then I'll delete the closure", "tokens": [50506, 407, 286, 478, 611, 516, 281, 909, 510, 257, 6674, 3218, 597, 307, 364, 560, 293, 550, 286, 603, 12097, 264, 24653, 50840], "temperature": 0.0, "avg_logprob": -0.13445241252581278, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0850500538945198}, {"id": 250, "seek": 93380, "start": 943.3199999999999, "end": 948.52, "text": " here and I'll de-indend this.", "tokens": [50840, 510, 293, 286, 603, 368, 12, 471, 521, 341, 13, 51100], "temperature": 0.0, "avg_logprob": -0.13445241252581278, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0850500538945198}, {"id": 251, "seek": 93380, "start": 948.52, "end": 954.3199999999999, "text": " And now we have our four functions back and these functions are still very simple.", "tokens": [51100, 400, 586, 321, 362, 527, 1451, 6828, 646, 293, 613, 6828, 366, 920, 588, 2199, 13, 51390], "temperature": 0.0, "avg_logprob": -0.13445241252581278, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0850500538945198}, {"id": 252, "seek": 93380, "start": 954.3199999999999, "end": 956.8, "text": " They just have a bunch of extra parameters.", "tokens": [51390, 814, 445, 362, 257, 3840, 295, 2857, 9834, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13445241252581278, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0850500538945198}, {"id": 253, "seek": 93380, "start": 956.8, "end": 962.3599999999999, "text": " This does mean that now we can't directly use them in the trading agent because this", "tokens": [51514, 639, 775, 914, 300, 586, 321, 393, 380, 3838, 764, 552, 294, 264, 9529, 9461, 570, 341, 51792], "temperature": 0.0, "avg_logprob": -0.13445241252581278, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0850500538945198}, {"id": 254, "seek": 96236, "start": 962.36, "end": 967.88, "text": " expects a should buy and should sell method that follow exactly the trading strategy function", "tokens": [50364, 33280, 257, 820, 2256, 293, 820, 3607, 3170, 300, 1524, 2293, 264, 9529, 5206, 2445, 50640], "temperature": 0.0, "avg_logprob": -0.1498567263285319, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.003760572988539934}, {"id": 255, "seek": 96236, "start": 967.88, "end": 972.48, "text": " type, which expects a list of prices and returns a boolean.", "tokens": [50640, 2010, 11, 597, 33280, 257, 1329, 295, 7901, 293, 11247, 257, 748, 4812, 282, 13, 50870], "temperature": 0.0, "avg_logprob": -0.1498567263285319, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.003760572988539934}, {"id": 256, "seek": 96236, "start": 972.48, "end": 976.08, "text": " And now these functions they don't adhere to this type anymore because well they expect", "tokens": [50870, 400, 586, 613, 6828, 436, 500, 380, 33584, 281, 341, 2010, 3602, 570, 731, 436, 2066, 51050], "temperature": 0.0, "avg_logprob": -0.1498567263285319, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.003760572988539934}, {"id": 257, "seek": 96236, "start": 976.08, "end": 981.08, "text": " other things as well such as this window size or the minimum and maximum price.", "tokens": [51050, 661, 721, 382, 731, 1270, 382, 341, 4910, 2744, 420, 264, 7285, 293, 6674, 3218, 13, 51300], "temperature": 0.0, "avg_logprob": -0.1498567263285319, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.003760572988539934}, {"id": 258, "seek": 96236, "start": 981.08, "end": 986.28, "text": " I could get away with it in this particular example by supplying default values here and", "tokens": [51300, 286, 727, 483, 1314, 365, 309, 294, 341, 1729, 1365, 538, 46815, 7576, 4190, 510, 293, 51560], "temperature": 0.0, "avg_logprob": -0.1498567263285319, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.003760572988539934}, {"id": 259, "seek": 96236, "start": 986.28, "end": 991.32, "text": " then you could still use them directly but then it would still be impossible to basically", "tokens": [51560, 550, 291, 727, 920, 764, 552, 3838, 457, 550, 309, 576, 920, 312, 6243, 281, 1936, 51812], "temperature": 0.0, "avg_logprob": -0.1498567263285319, "compression_ratio": 1.7301038062283738, "no_speech_prob": 0.003760572988539934}, {"id": 260, "seek": 99132, "start": 991.32, "end": 995.4000000000001, "text": " set it to a different value than the default value and we actually want to change these", "tokens": [50364, 992, 309, 281, 257, 819, 2158, 813, 264, 7576, 2158, 293, 321, 767, 528, 281, 1319, 613, 50568], "temperature": 0.0, "avg_logprob": -0.11802797516187032, "compression_ratio": 1.90625, "no_speech_prob": 0.04396098852157593}, {"id": 261, "seek": 99132, "start": 995.4000000000001, "end": 1000.32, "text": " things so we need a better solution and partial can really help here.", "tokens": [50568, 721, 370, 321, 643, 257, 1101, 3827, 293, 14641, 393, 534, 854, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11802797516187032, "compression_ratio": 1.90625, "no_speech_prob": 0.04396098852157593}, {"id": 262, "seek": 99132, "start": 1000.32, "end": 1007.5400000000001, "text": " So what we can do with partial is create partially applied versions of these particular functions.", "tokens": [50814, 407, 437, 321, 393, 360, 365, 14641, 307, 1884, 18886, 6456, 9606, 295, 613, 1729, 6828, 13, 51175], "temperature": 0.0, "avg_logprob": -0.11802797516187032, "compression_ratio": 1.90625, "no_speech_prob": 0.04396098852157593}, {"id": 263, "seek": 99132, "start": 1007.5400000000001, "end": 1014.4000000000001, "text": " So what you can do is and that's actually really neat, we can create a buy strategy", "tokens": [51175, 407, 437, 291, 393, 360, 307, 293, 300, 311, 767, 534, 10654, 11, 321, 393, 1884, 257, 2256, 5206, 51518], "temperature": 0.0, "avg_logprob": -0.11802797516187032, "compression_ratio": 1.90625, "no_speech_prob": 0.04396098852157593}, {"id": 264, "seek": 99132, "start": 1014.4000000000001, "end": 1020.44, "text": " which is then a partial application so I'm using partial here of the function which is", "tokens": [51518, 597, 307, 550, 257, 14641, 3861, 370, 286, 478, 1228, 14641, 510, 295, 264, 2445, 597, 307, 51820], "temperature": 0.0, "avg_logprob": -0.11802797516187032, "compression_ratio": 1.90625, "no_speech_prob": 0.04396098852157593}, {"id": 265, "seek": 102044, "start": 1020.44, "end": 1025.4, "text": " let's say should buy average and we're going to supply the argument.", "tokens": [50364, 718, 311, 584, 820, 2256, 4274, 293, 321, 434, 516, 281, 5847, 264, 6770, 13, 50612], "temperature": 0.0, "avg_logprob": -0.12975855718685103, "compression_ratio": 1.7421052631578948, "no_speech_prob": 0.010009222663939}, {"id": 266, "seek": 102044, "start": 1025.4, "end": 1033.52, "text": " So we're going to supply a window size of four and now what's interesting is that we", "tokens": [50612, 407, 321, 434, 516, 281, 5847, 257, 4910, 2744, 295, 1451, 293, 586, 437, 311, 1880, 307, 300, 321, 51018], "temperature": 0.0, "avg_logprob": -0.12975855718685103, "compression_ratio": 1.7421052631578948, "no_speech_prob": 0.010009222663939}, {"id": 267, "seek": 102044, "start": 1033.52, "end": 1041.16, "text": " get back from partial another function like the closure but with the window size of four.", "tokens": [51018, 483, 646, 490, 14641, 1071, 2445, 411, 264, 24653, 457, 365, 264, 4910, 2744, 295, 1451, 13, 51400], "temperature": 0.0, "avg_logprob": -0.12975855718685103, "compression_ratio": 1.7421052631578948, "no_speech_prob": 0.010009222663939}, {"id": 268, "seek": 102044, "start": 1041.16, "end": 1047.44, "text": " So now we can pass through the trading bot the buy strategy function like so and as you", "tokens": [51400, 407, 586, 321, 393, 1320, 807, 264, 9529, 10592, 264, 2256, 5206, 2445, 411, 370, 293, 382, 291, 51714], "temperature": 0.0, "avg_logprob": -0.12975855718685103, "compression_ratio": 1.7421052631578948, "no_speech_prob": 0.010009222663939}, {"id": 269, "seek": 104744, "start": 1047.44, "end": 1052.3200000000002, "text": " see the type errors are gone because well buy strategy is actually a function that returns", "tokens": [50364, 536, 264, 2010, 13603, 366, 2780, 570, 731, 2256, 5206, 307, 767, 257, 2445, 300, 11247, 50608], "temperature": 0.0, "avg_logprob": -0.13653597831726075, "compression_ratio": 1.5562130177514792, "no_speech_prob": 0.08487184345722198}, {"id": 270, "seek": 104744, "start": 1052.3200000000002, "end": 1059.1200000000001, "text": " a Boolean and that takes a list of prices and similarly we can create a sell strategy", "tokens": [50608, 257, 23351, 28499, 293, 300, 2516, 257, 1329, 295, 7901, 293, 14138, 321, 393, 1884, 257, 3607, 5206, 50948], "temperature": 0.0, "avg_logprob": -0.13653597831726075, "compression_ratio": 1.5562130177514792, "no_speech_prob": 0.08487184345722198}, {"id": 271, "seek": 104744, "start": 1059.1200000000001, "end": 1066.28, "text": " which is also partial application of let's say should sell average or let's do the min", "tokens": [50948, 597, 307, 611, 14641, 3861, 295, 718, 311, 584, 820, 3607, 4274, 420, 718, 311, 360, 264, 923, 51306], "temperature": 0.0, "avg_logprob": -0.13653597831726075, "compression_ratio": 1.5562130177514792, "no_speech_prob": 0.08487184345722198}, {"id": 272, "seek": 106628, "start": 1066.28, "end": 1078.8, "text": " max actually and then we're going to supply a max price of let's say $35,000 like so and", "tokens": [50364, 11469, 767, 293, 550, 321, 434, 516, 281, 5847, 257, 11469, 3218, 295, 718, 311, 584, 1848, 8794, 11, 1360, 411, 370, 293, 50990], "temperature": 0.0, "avg_logprob": -0.11623969976452814, "compression_ratio": 1.5056818181818181, "no_speech_prob": 0.47244134545326233}, {"id": 273, "seek": 106628, "start": 1078.8, "end": 1085.8, "text": " now what I can do here is supply the sell strategy and let's run this see what happens", "tokens": [50990, 586, 437, 286, 393, 360, 510, 307, 5847, 264, 3607, 5206, 293, 718, 311, 1190, 341, 536, 437, 2314, 51340], "temperature": 0.0, "avg_logprob": -0.11623969976452814, "compression_ratio": 1.5056818181818181, "no_speech_prob": 0.47244134545326233}, {"id": 274, "seek": 106628, "start": 1085.8, "end": 1091.8799999999999, "text": " so we get some missing parenthesis somewhere oh I think this one doesn't need to be there", "tokens": [51340, 370, 321, 483, 512, 5361, 23350, 9374, 4079, 1954, 286, 519, 341, 472, 1177, 380, 643, 281, 312, 456, 51644], "temperature": 0.0, "avg_logprob": -0.11623969976452814, "compression_ratio": 1.5056818181818181, "no_speech_prob": 0.47244134545326233}, {"id": 275, "seek": 109188, "start": 1091.88, "end": 1096.8400000000001, "text": " let's run that again and now we're back at a working state of the code again so this", "tokens": [50364, 718, 311, 1190, 300, 797, 293, 586, 321, 434, 646, 412, 257, 1364, 1785, 295, 264, 3089, 797, 370, 341, 50612], "temperature": 0.0, "avg_logprob": -0.1348608685778333, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.11589150130748749}, {"id": 276, "seek": 109188, "start": 1096.8400000000001, "end": 1102.0, "text": " is really powerful because now it means that we have flexibility in the way that we define", "tokens": [50612, 307, 534, 4005, 570, 586, 309, 1355, 300, 321, 362, 12635, 294, 264, 636, 300, 321, 6964, 50870], "temperature": 0.0, "avg_logprob": -0.1348608685778333, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.11589150130748749}, {"id": 277, "seek": 109188, "start": 1102.0, "end": 1108.24, "text": " our functions we can supply these extra arguments here maximum minimum price window sizes etc.", "tokens": [50870, 527, 6828, 321, 393, 5847, 613, 2857, 12869, 510, 6674, 7285, 3218, 4910, 11602, 5183, 13, 51182], "temperature": 0.0, "avg_logprob": -0.1348608685778333, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.11589150130748749}, {"id": 278, "seek": 109188, "start": 1108.24, "end": 1115.3200000000002, "text": " But because of partial we can transform these functions into new functions with partially", "tokens": [51182, 583, 570, 295, 14641, 321, 393, 4088, 613, 6828, 666, 777, 6828, 365, 18886, 51536], "temperature": 0.0, "avg_logprob": -0.1348608685778333, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.11589150130748749}, {"id": 279, "seek": 111532, "start": 1115.32, "end": 1122.56, "text": " applied arguments so this is actually the should buy average function except it already", "tokens": [50364, 6456, 12869, 370, 341, 307, 767, 264, 820, 2256, 4274, 2445, 3993, 309, 1217, 50726], "temperature": 0.0, "avg_logprob": -0.0996018303765191, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.14211222529411316}, {"id": 280, "seek": 111532, "start": 1122.56, "end": 1127.48, "text": " gets a window size of four we've partially applied the function and this is really neat", "tokens": [50726, 2170, 257, 4910, 2744, 295, 1451, 321, 600, 18886, 6456, 264, 2445, 293, 341, 307, 534, 10654, 50972], "temperature": 0.0, "avg_logprob": -0.0996018303765191, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.14211222529411316}, {"id": 281, "seek": 111532, "start": 1127.48, "end": 1131.8, "text": " because this is way shorter than using the closure solution that I showed you before", "tokens": [50972, 570, 341, 307, 636, 11639, 813, 1228, 264, 24653, 3827, 300, 286, 4712, 291, 949, 51188], "temperature": 0.0, "avg_logprob": -0.0996018303765191, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.14211222529411316}, {"id": 282, "seek": 111532, "start": 1131.8, "end": 1136.9199999999998, "text": " and it also allows you to create these functions a bit more independently of the type that's", "tokens": [51188, 293, 309, 611, 4045, 291, 281, 1884, 613, 6828, 257, 857, 544, 21761, 295, 264, 2010, 300, 311, 51444], "temperature": 0.0, "avg_logprob": -0.0996018303765191, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.14211222529411316}, {"id": 283, "seek": 111532, "start": 1136.9199999999998, "end": 1142.52, "text": " something like the trading bot expects because you can simply use partial application to", "tokens": [51444, 746, 411, 264, 9529, 10592, 33280, 570, 291, 393, 2935, 764, 14641, 3861, 281, 51724], "temperature": 0.0, "avg_logprob": -0.0996018303765191, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.14211222529411316}, {"id": 284, "seek": 114252, "start": 1142.52, "end": 1148.16, "text": " resolve the rest of the arguments and then the trading bot doesn't have to know anything", "tokens": [50364, 14151, 264, 1472, 295, 264, 12869, 293, 550, 264, 9529, 10592, 1177, 380, 362, 281, 458, 1340, 50646], "temperature": 0.0, "avg_logprob": -0.10449296549746864, "compression_ratio": 1.806896551724138, "no_speech_prob": 0.02403668686747551}, {"id": 285, "seek": 114252, "start": 1148.16, "end": 1153.0, "text": " about that so I think this is a really neat way of allowing for more flexibility in your", "tokens": [50646, 466, 300, 370, 286, 519, 341, 307, 257, 534, 10654, 636, 295, 8293, 337, 544, 12635, 294, 428, 50888], "temperature": 0.0, "avg_logprob": -0.10449296549746864, "compression_ratio": 1.806896551724138, "no_speech_prob": 0.02403668686747551}, {"id": 286, "seek": 114252, "start": 1153.0, "end": 1157.72, "text": " code while still keeping things relatively simple so partial function application I", "tokens": [50888, 3089, 1339, 920, 5145, 721, 7226, 2199, 370, 14641, 2445, 3861, 286, 51124], "temperature": 0.0, "avg_logprob": -0.10449296549746864, "compression_ratio": 1.806896551724138, "no_speech_prob": 0.02403668686747551}, {"id": 287, "seek": 114252, "start": 1157.72, "end": 1162.12, "text": " love it I think you should also experiment with it a bit more in your code if you have", "tokens": [51124, 959, 309, 286, 519, 291, 820, 611, 5120, 365, 309, 257, 857, 544, 294, 428, 3089, 498, 291, 362, 51344], "temperature": 0.0, "avg_logprob": -0.10449296549746864, "compression_ratio": 1.806896551724138, "no_speech_prob": 0.02403668686747551}, {"id": 288, "seek": 114252, "start": 1162.12, "end": 1166.68, "text": " used partial functions already let me know in the comments what your thoughts are about", "tokens": [51344, 1143, 14641, 6828, 1217, 718, 385, 458, 294, 264, 3053, 437, 428, 4598, 366, 466, 51572], "temperature": 0.0, "avg_logprob": -0.10449296549746864, "compression_ratio": 1.806896551724138, "no_speech_prob": 0.02403668686747551}, {"id": 289, "seek": 114252, "start": 1166.68, "end": 1171.72, "text": " this so anyway I hope you enjoyed this video and that it gave you some ideas of how you", "tokens": [51572, 341, 370, 4033, 286, 1454, 291, 4626, 341, 960, 293, 300, 309, 2729, 291, 512, 3487, 295, 577, 291, 51824], "temperature": 0.0, "avg_logprob": -0.10449296549746864, "compression_ratio": 1.806896551724138, "no_speech_prob": 0.02403668686747551}, {"id": 290, "seek": 117172, "start": 1171.72, "end": 1176.52, "text": " could use partial function application to your advantage give the video a like if you", "tokens": [50364, 727, 764, 14641, 2445, 3861, 281, 428, 5002, 976, 264, 960, 257, 411, 498, 291, 50604], "temperature": 0.0, "avg_logprob": -0.15913053434722277, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.033003564924001694}, {"id": 291, "seek": 117172, "start": 1176.52, "end": 1181.16, "text": " enjoyed it consider subscribing to my channel if you want to learn more about software design", "tokens": [50604, 4626, 309, 1949, 19981, 281, 452, 2269, 498, 291, 528, 281, 1466, 544, 466, 4722, 1715, 50836], "temperature": 0.0, "avg_logprob": -0.15913053434722277, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.033003564924001694}, {"id": 292, "seek": 117172, "start": 1181.16, "end": 1185.48, "text": " and development thanks for watching take care and see you soon", "tokens": [50836, 293, 3250, 3231, 337, 1976, 747, 1127, 293, 536, 291, 2321, 51052], "temperature": 0.0, "avg_logprob": -0.15913053434722277, "compression_ratio": 1.5316455696202531, "no_speech_prob": 0.033003564924001694}], "language": "en"}