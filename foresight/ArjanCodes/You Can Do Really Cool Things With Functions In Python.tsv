start	end	text
0	5120	The most common use of functions in a piece of code is to group operations and then call
5120	8400	that function one or more times from another place in the code.
8400	11120	But functions are way more flexible than that.
11120	14640	In Python, functions are objects of a type callable.
14640	16840	You can define type aliases for them.
16840	20280	You can pass functions as arguments to other functions.
20280	24200	If you use a package like fun tools, you can even call functions partially.
24200	25920	It's better than sliced bread.
25920	27640	And I don't even like sliced bread.
27640	31400	Have you noticed that in whatever country you are, the people living there think that
31400	34720	their bread is better than in any other country?
34720	35720	It's really weird.
35720	39000	I mean, I live in the Netherlands, so for us it doesn't really apply because our bread
39000	40320	is actually better.
40320	44640	But if you live in one of those other countries, so basically living in a lie, how do you cope
44640	45640	with that?
45640	49720	Another thing we're really good at in the Netherlands is writing software design guides.
49720	53920	For example, this one, ariancolds.com slash design guide.
53920	54920	It's totally free.
54920	59600	It contains the seven steps that I take whenever I design a new piece of software from scratch.
59600	63560	I'm sharing it with you, so I hope it helps you to avoid some of the mistakes that I've
63560	64560	made in the past.
64560	70640	And while you're at it, order some Dutch bread or, you know, keep living in your bread
70640	71640	fantasy world.
71640	76320	The choice is yours, ariancolds.com slash design guide and link is also in the description
76320	77320	of this video.
77320	81880	Today, I'm going to show you a couple of not so common ways of using functions in your
81880	82880	code.
82880	86640	For example, I'm going to use a trading system with different trading strategies.
86640	91200	So it's a bit like the strategy pattern, but we're going to do some cool stuff with functions.
91200	92320	Let's dive in.
92320	98480	So there's a trading strategy protocol class here that has a should buy and a should sell
98480	99640	method.
99640	103640	And both of these in the protocol, they're not implemented, so they raise a not implemented
103640	104640	error.
104640	109680	If scroll down, you see that we have an average trading strategy that looks at the last few
109680	115320	prices and then checks whether it's below or above the average and then decides whether
115320	117600	or not to buy based on that number.
117600	122200	And then we also have a min max trading strategy that looks at a minimum price and a maximum
122200	123200	price.
123200	127160	If the price is below that minimum price, then we should buy it.
127160	131760	If it's above a certain maximum price, then we should start selling the asset.
131760	133840	So that's the whole idea of these two strategies.
133840	138360	Of course, these strategies will never make you any money because the market is way more
138360	139360	efficient than that.
139360	141480	So don't use this for real trading.
141480	143280	It's just meant as an example.
143280	145200	Then we have a class trading bots.
145200	149200	That's a data class and it has an exchange and a trading strategy.
149200	153080	The exchange is something that I just built myself very simple.
153080	158600	It has one constant with some price data, so it doesn't actually connect to an exchange
158600	164360	and we have a method for getting particular market data that gets fake price data for
164360	165360	us.
165360	168440	It's something that simulates buying and simulates selling.
168440	173200	So the trading bot has an exchange and it has a trading strategy, which is an instance
173200	176700	of one of these classes, average or min max.
176700	181320	And then there is a run method that gets a symbol, the type of currency that you want
181320	182400	to buy or sell.
182400	183640	That method does a few things.
183640	185960	It gets the price data from the exchange.
185960	190920	It determines whether we should buy or sell and then it's going to buy or sell a certain
190920	192840	quantity of that symbol.
192840	195600	Otherwise that's going to print no action needed.
195600	199320	And then I have a simple main function that creates an exchange, connects to the exchange,
199320	204720	creates a trading strategy and then a trading bot and then runs it for Bitcoin, my favorite
204720	205720	cryptocurrency.
205720	210280	I actually bought some Bitcoin and Ethereum again a while ago, so Bitcoin, Ethereum to
210280	211280	the moon.
211280	214080	Let's run this and see what happens.
214080	219920	So in this case it's going to sell 10 Satoshi probably in the Bitcoin US dollar market.
219920	224200	But I can also change now the trading strategy to something else.
224200	228560	For example, let's use the average trading strategy and then what's going to happen is
228560	230280	we're actually going to buy something.
230280	234800	So these strategies, they have different effect on the behavior of the trading bot, which
234800	236160	makes total sense, right?
236160	240840	Now this is a traditional implementation of the strategy pattern.
240840	245000	We have an abstract class or in this case a protocol class that defines the interface
245000	248240	that has a method or in this case two methods.
248240	251800	So it's not entirely traditional strategy pattern, but it's pretty close.
251800	257640	Then we have subclasses or classes that implement the protocol that have these two methods should
257640	259040	buy and should sell.
259040	261000	And then there's another class that uses it.
261000	265480	So that's the traditional object oriented approach of doing this.
265480	269120	And because object oriented, it relies heavily on classes.
269120	273440	If you're not too attached to using classes, if you don't store states, functions provide
273440	278320	a great way to achieve the same effect as the strategy pattern in this example.
278320	284320	In general, functions can replace or significantly simplify code that uses classes and object
284320	285920	oriented design patterns.
285920	288480	That doesn't mean that design patterns aren't needed anymore.
288480	293280	That's still useful, but in many cases a functional approach might actually be much simpler.
293280	297440	So let's change this code to use functions instead of classes.
297440	301320	Basically if you look at the signature of these methods, each of them gets a bunch of
301320	305240	prices and then returns a Boolean value.
305240	309560	So in order to transform this example into using a more functional approach instead of
309560	314240	all these classes, we should perhaps define this function type before we start doing that
314240	315240	job.
315240	322720	So what I'm going to do is create a trading strategy function, which is going to be our
322720	326800	function type, and that's going to be a callable.
326800	333640	And the input is going to be the list of prices, that's a list of integers.
333640	337120	And what it's going to return is a Boolean value.
337120	341160	So this is basically what any of the trading strategy functions are going to look like.
341160	346400	So this class I'm going to delete because we're not going to use the class anymore.
346400	351240	And then we have our average trading strategy functions and we have the min max trading
351600	357060	strategy functions and we should simply transform them into functions that follow this signature.
357060	361240	So let me also remove this class definition because we don't need that anymore.
361240	366400	And I'm going to take these lines here and let's de-indent them.
366400	370120	I'll remove the self and the same thing here.
370120	371120	So remove the self.
371120	373520	So we have should buy and should sell.
373520	378080	And then let's also change the name so that we know that this is the average strategy.
378080	383440	So this is should buy average and we have should sell average.
383440	387340	And we can do the same thing for the min max trading strategy.
387340	396160	So I'll just take again these function definitions, remove the self like so.
396160	405000	And then we're going to call this min max instead like so.
405000	406520	So now we have our functions.
406520	410200	And now we need to change the trading bot class because no longer has a trading strategy,
410200	414440	but it has a buy function and a sell strategy function.
414440	421320	So let's call that the buy strategy, which is a trading strategy function.
421320	427760	And we have the sell strategy, which is also trading strategy function.
427760	432920	And in the run methods, we don't do this, but we call here the buy strategy.
432920	437760	And here we call the sell strategy like so.
437760	440680	And now we can create the trading strategy here.
440680	446560	We can delete these lines and we simply provide the functions that the trading bot needs right
446560	447660	here.
447660	455900	So let's say we could have the should buy average and should sell average like so.
455900	459080	And now let's run this code just to verify that this still works.
459080	461280	So there is a problem here.
461280	464360	One object has no attribute should buy.
464360	469560	And that's of course, because we don't need to do the call here anymore because this is
469560	471520	already a function.
471520	473280	So let's remove that as well.
473280	476560	Let's run this one more time and now we're getting exactly the same.
476560	481040	But because we're using the more functional approach now, it's the code has become a bit
481040	484000	shorter because we don't have all these classes everywhere.
484000	488640	And another advantage is that in the trading bot, we can now supply different combinations
488640	489640	of functions.
489640	495440	We could have a buy strategy for average and we could have a sell strategy, which is min
495440	496440	max.
496440	501080	And then let me run this one more time and well, the result is the same, but you can
501080	506000	imagine that we can make now any combination that we like.
506000	509200	So like so, and then let's see what happens then.
509200	511280	And now there is no action needed.
511280	515440	So by using more functional approach here, we've also introduced some extra flexibility.
515680	520600	Now, of course, you could also do this with the regular strategy pattern in a sense that
520600	525600	instead of having a trading strategy that has both a should buy and should sell method,
525600	530680	we could create classes for buying and for selling, leading to even more classes and
530680	531920	subclasses by the way.
531920	536400	So personally, I really prefer this type of approach where we're dealing with simple
536400	539720	functions that we just pass to the training bot.
539720	544440	In fact, even the trading bot, we could turn it into a function because at the moment it's
544440	546320	a single method.
546320	550760	We could actually turn this into a simple function that gets a symbol, an exchange,
550760	555840	a buy strategy and a sell strategy and then just runs the strategy and there is no class
555840	556920	needed anymore.
556920	559000	But for now, I'll leave it like it is.
559000	563240	It's also not a big issue that it's a class and we might want to add more methods to it
563240	564240	in the future.
564240	568080	One of the issues with the functional version of the strategy pattern that we use that there
568080	570880	is no way to pass parameters to these functions.
570880	575840	And that's because trading bot expects these functions to have a particular type, it expects
575840	579680	these functions to accept a list of prices.
579680	584000	But what if for the average trading strategy you want to pass parameters like the window
584000	588880	size or for the min-max trading strategy you want to set the minimum and maximum price?
588880	590520	Currently, we can't do that.
590520	594280	In the original version of the code that used classes, you could pass these parameters to
594280	597760	the class initializer and then store them as state.
597760	600640	With functions, there are other ways to fix this.
600640	602960	One of them is by using closures.
602960	604680	So let's see how that works.
604680	611320	What we're going to do is create a function that returns a trading strategy function.
611320	616840	And then we can pass parameters to that particular function and then it can pass those parameters
616840	619040	to the closure that it creates.
619040	622800	And then it returns a function that we can still use in the trading strategy.
622800	628000	So for example, here we have should buy average and we might want to change the window size
628000	629000	here.
629040	631080	We might want to make it bigger or smaller.
631080	634160	So what we can do instead is use a closure.
634160	642040	Let's call that should buy average closure.
642040	646480	And that's going to get a window size, which is an integer.
646480	651840	And what this is going to return is a trading strategy function.
651840	659160	And then we define the should buy average function inside of this closure function.
659160	665120	And here the minus three was setting that to the window size like so.
665120	673360	And now what we're going to do is return should buy average stats are closure function.
673360	678640	And because we're passing the window size as a parameter here, we can use it in should
678640	679640	buy average.
679640	681160	That's the whole idea of the closure.
681160	687000	But the function that we return is still a function that only gets a list of prices.
687000	688920	This is the closure mechanism.
688920	693080	What you can now do in the main function is that instead of passing this function directly,
693080	696240	we can pass a should buy average closure.
696240	698280	And then we actually pass it the window size.
698280	701120	So for example, I could not pass the window size of four.
701120	706200	And this is going to return us the average function that takes a window size of four.
706200	710880	And now let's run this and well, apparently we still need to buy more Bitcoin.
710880	712600	So this is what a closure does.
712600	716440	And you can basically use the closure for any of these other functions as well.
716440	720960	So for example, for should sell min max, it's probably useful if we have a closure that
720960	723120	allows to define what the price is.
723120	729480	So let's create that should sell min max closure.
729480	734960	So this is going to get a max price, which is an int.
734960	738760	And this is also going to return a trading strategy function.
738760	742680	And then this function here is going to be a part of the closure.
742680	747840	And instead of having this fixed price, I'm going to replace it by the max price.
747840	753040	And then it's going to return the function as a result.
753040	754040	Like so.
754040	756440	And this line doesn't make any sense anymore.
756440	759280	So now we have this should sell min max closure.
759280	765320	And then I can go here should sell min max closure and I provide a price.
765320	771960	Let's say I only want to sell if the price is above 35,000, like so.
771960	774320	And I need to put two additional zeros.
774320	780080	This by the way, nice way in Python to make bigger numbers more clear in the interface
780080	781200	actually does nothing.
781200	784920	It doesn't change the value of this number, but it makes it a bit clearer what how many
784920	787200	zeros there are and what exactly means.
787200	788960	So that's why I'm using that here.
788960	795120	So should buy and should sell now use a closure so we can set some parameters here and trading
795120	800080	but still doesn't know anything about that because it simply gets a trading strategy
800080	801400	function from it.
801400	806720	So let's run this and now we're still buying 10 crypto currencies.
806720	811360	If I change the window here to something else, let's see.
811360	815440	Now I'm not buying anything because the window has changed and apparently we're just on
815440	817640	the limit of whether we should buy or not.
817640	822520	Using closure solve the problem of not being able to pass parameters to these functions.
822520	825800	But it's a bit verbose and it's not very flexible.
825800	829480	Instead a more elegant way of solving this is by using partial functions.
829480	835840	A partial application or partial function application fixes a number of arguments in the original
835840	840480	function and returns a new function without those arguments.
840480	843640	This is different from couriering by the way, which is not a term you might have heard from
843640	845960	the functional programming domain.
845960	849880	Couriering means that you transform a function that takes multiple arguments into a sequence
849880	853100	of functions that each take only a single argument.
853100	857600	And because you can curry any function, this is very useful in theoretical computer science
857600	862160	for example where you want to study functions with multiple arguments and then you can transform
862160	868000	them into a simple theoretical model of function taking only a single argument.
868000	871920	Partial functions are a way more practical approach and in this case they can really help
871920	875160	to simplify the code and make it way more flexible.
875160	876960	So let's see how that works.
876960	883840	So let's first import partial from funtals because that's what we're going to use to
883840	885760	make these functions a bit more flexible.
885760	889600	And what I'm going to do now is really simplify these functions right here.
889600	894760	So instead of making this a closure, what I'll do is simply add the parameter to the
894760	897480	should buy average function instead.
897480	902920	And then I'll delete this line, I'll delete this line and this we're going to de-indend.
902920	906360	So now we have a simple should buy average function.
906360	914280	And for should sell I can also add the window size in exactly the same way.
914280	917640	So now should sell also expects a window size.
917640	919760	For should buy I'm doing exactly the same thing.
919760	933800	So here I'm going to provide a minimum price like so.
933800	936640	And should sell is exactly the same.
936640	943320	So I'm also going to add here a maximum price which is an int and then I'll delete the closure
943320	948520	here and I'll de-indend this.
948520	954320	And now we have our four functions back and these functions are still very simple.
954320	956800	They just have a bunch of extra parameters.
956800	962360	This does mean that now we can't directly use them in the trading agent because this
962360	967880	expects a should buy and should sell method that follow exactly the trading strategy function
967880	972480	type, which expects a list of prices and returns a boolean.
972480	976080	And now these functions they don't adhere to this type anymore because well they expect
976080	981080	other things as well such as this window size or the minimum and maximum price.
981080	986280	I could get away with it in this particular example by supplying default values here and
986280	991320	then you could still use them directly but then it would still be impossible to basically
991320	995400	set it to a different value than the default value and we actually want to change these
995400	1000320	things so we need a better solution and partial can really help here.
1000320	1007540	So what we can do with partial is create partially applied versions of these particular functions.
1007540	1014400	So what you can do is and that's actually really neat, we can create a buy strategy
1014400	1020440	which is then a partial application so I'm using partial here of the function which is
1020440	1025400	let's say should buy average and we're going to supply the argument.
1025400	1033520	So we're going to supply a window size of four and now what's interesting is that we
1033520	1041160	get back from partial another function like the closure but with the window size of four.
1041160	1047440	So now we can pass through the trading bot the buy strategy function like so and as you
1047440	1052320	see the type errors are gone because well buy strategy is actually a function that returns
1052320	1059120	a Boolean and that takes a list of prices and similarly we can create a sell strategy
1059120	1066280	which is also partial application of let's say should sell average or let's do the min
1066280	1078800	max actually and then we're going to supply a max price of let's say $35,000 like so and
1078800	1085800	now what I can do here is supply the sell strategy and let's run this see what happens
1085800	1091880	so we get some missing parenthesis somewhere oh I think this one doesn't need to be there
1091880	1096840	let's run that again and now we're back at a working state of the code again so this
1096840	1102000	is really powerful because now it means that we have flexibility in the way that we define
1102000	1108240	our functions we can supply these extra arguments here maximum minimum price window sizes etc.
1108240	1115320	But because of partial we can transform these functions into new functions with partially
1115320	1122560	applied arguments so this is actually the should buy average function except it already
1122560	1127480	gets a window size of four we've partially applied the function and this is really neat
1127480	1131800	because this is way shorter than using the closure solution that I showed you before
1131800	1136920	and it also allows you to create these functions a bit more independently of the type that's
1136920	1142520	something like the trading bot expects because you can simply use partial application to
1142520	1148160	resolve the rest of the arguments and then the trading bot doesn't have to know anything
1148160	1153000	about that so I think this is a really neat way of allowing for more flexibility in your
1153000	1157720	code while still keeping things relatively simple so partial function application I
1157720	1162120	love it I think you should also experiment with it a bit more in your code if you have
1162120	1166680	used partial functions already let me know in the comments what your thoughts are about
1166680	1171720	this so anyway I hope you enjoyed this video and that it gave you some ideas of how you
1171720	1176520	could use partial function application to your advantage give the video a like if you
1176520	1181160	enjoyed it consider subscribing to my channel if you want to learn more about software design
1181160	1185480	and development thanks for watching take care and see you soon
