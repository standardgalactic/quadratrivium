start	end	text
0	4500	UML diagrams are pretty useful for visualizing aspects of your code.
4500	11000	Float your hearts for visualizing user interactions, class diagrams to explain the structure of your code, and so on.
11000	13300	The problem is, they're painted draw.
13300	20000	I don't like using these generic drawing tools where you have to choose between millions of different arrows to find the right one.
20000	28000	And when you draw a box and you have an arrow that you think is attached to it, but then you move the box and the arrow doesn't move along, it's just really frustrating.
28000	31500	And for this reason, I've not been using UML diagrams very much.
31500	36000	But recently, I discovered a tool called Mermaid that I think is going to change this.
36000	43000	So in today's video, I'm going to talk about four types of diagrams that I think are very useful for illustrating your design.
43000	48500	And then I'm going to show you how to draw them very quickly in Mermaid without all of the frustrations.
48500	51500	Now, before we start, I have something for you.
51500	56500	It's a free guide that's available at ariancodes.com slash design guide.
56500	61500	It contains the seven steps that I take when I design software from scratch.
61500	65500	So I hope that ultimately this is going to help you make better design decisions.
65500	68500	So ariancodes.com slash design guide.
68500	71500	I've also put the link in the description of this video.
71500	73500	Now, let's dive into UML.
73500	76500	When you install VS Coding, you start editing markdown files.
76500	79000	Mermaid is not supported out of the box.
79000	83500	For example, here I can open the preview of this particular markdown file.
83500	87500	And if I try to add some mermaid code to this like so,
87500	92500	and let's say we want to add a simple flowchart like this,
92500	96000	I'll talk more about the exact syntax later on the video.
96000	99000	So I see it simply displays the text right now.
99000	102500	In order for this to actually display the mermaid rendered chart,
102500	105000	we need to install plugin in VS Code.
105000	110500	And the one I'm using is, I'll scroll down here, is called markdown preview mermaid support.
110500	112500	Let me close this preview here.
112500	115500	I've disabled it now to show you what happens if you don't install this.
115500	119500	But if I enable this and now I go back to the markdown file,
119500	121500	let me open the preview again.
121500	124000	Now you see we get the actual mermaid diagram.
124000	126500	The problem with using mermaid in VS Code in this way
126500	130000	is that there's no easy way to export this to a PDF.
130000	133500	There is an extension that allows you to export these previews as PDFs,
133500	136000	but unfortunately it doesn't work with mermaid.
136000	141000	If you want to be able to export these diagrams as PDF files or images or whatever,
141000	145500	then you can actually use mermaid.live and that's this site.
145500	149500	And there you can basically edit your mermaid code right here.
149500	152500	Then it's going to create the diagram right here.
152500	155500	And then they have a couple of these export options.
155500	157500	You even have different themes.
157500	160500	So this is the default dark theme that I can change it to.
160500	161500	Well, let's see cupcake.
161500	163500	That sounds happy cupcake.
163500	165500	Ooh, I'm not sure I like that.
165500	169500	There is corporate for the, you know, serious diagramming needs.
169500	172000	We have a couple of our valentines.
172000	173000	Oh, that's nice.
173000	174000	That's soon.
174000	177000	Actually, I should get something for my wife.
177000	178000	There's a couple more here.
178000	181000	We have black, which is just simple black and white.
181000	182000	There's wireframe.
182000	184000	Oh my, is this comic sans?
184000	186000	I think it's comic sans.
186000	187000	Okay.
187000	188000	I have to get out of here.
188000	189000	Okay.
189000	190000	Close call.
190000	191000	All right.
191000	192000	So this is not an alternative.
192000	196000	So you can write your mermaid diagrams here and then you can simply export it as PNG
196000	199500	or SVG or I don't know what this is.
199500	200500	Some other format.
200500	205500	But the reason I like to do it in VS code is that I can integrate these diagrams directly
205500	207500	within my markdown files.
207500	212500	So for example, if I write a feature document where I want to talk about a new feature in
212500	216500	our platform in my company, then, you know, I write it down here.
216500	222500	I can add some diagrams to clarify things and it all works in a simple text format,
222500	223500	which I really like.
224000	229000	So I want to go through a couple of options in mermaids and show you a couple of things
229000	230000	that you can do with it.
230000	236000	And it can do lots of different things, lots of different types of charts and diagrams.
236000	239000	But there are a couple that I find particularly useful.
239000	242000	And the first one that I want to talk about is the flow chart.
242000	245000	And you already see an example of the flow chart right here.
245000	249500	So flow chart is basically used for modeling flows.
249500	255000	It's often useful if you want to model, let's say the way that a user interacts with your
255000	261000	application, and you can identify the various paths through the flow that the user is taking.
261000	266000	So for example, what you could do, let's say we create a flow chart like this, you can
266000	270500	now add different blocks in here with arrows between them and that then models the flow
270500	275500	or the path that the user takes flow chart also has some options to control the way that
275500	276500	it looks.
276500	280500	So we're going from top to bottom, but you can create a flow chart that goes from left
280500	281500	to right.
281500	285500	So it's really easy just change it in text and it updates the diagram on the right or
285500	287500	bottom to top if you want that.
287500	291500	So there's a couple of different options here that you can use.
291500	294000	So let's stay with the default one.
294000	298500	And this is the basic way that you describe a piece of the flow.
298500	299500	And you can add more of these.
299500	301500	For example, I could also add a second one.
301500	306500	Say we have a start block and that goes to a like so.
306500	310500	You can also put semicolons behind them if you feel so inclined.
310500	313000	These are the names of these different blocks.
313000	318000	You can actually also change the label on it because now it simply shows the name and
318000	320000	S doesn't really tell us very much.
320000	324500	So one thing you can do is simply rename the block to something like start.
324500	328000	But what you can also do is add a separate label like so.
328000	333000	And then you refer to this block in other parts of your flow charts by using the S
333000	334000	character.
334000	336500	But then this is the label that's displayed in the block itself.
336500	338000	It's what you see right here.
338000	339000	So we have no flow chart.
339000	340500	It goes from start to A.
340500	342500	Let's say we model a login flow.
342500	347500	So A is enter your email address, right?
347500	349500	And then it goes to B.
349500	352500	There's different ways in which you can display these blocks.
352500	355000	So here I'm using square brackets.
355000	358000	So that gives me this basically quite boring rectangle.
358000	361000	But you can also add rounded corners like so.
361000	363500	And now this block has rounded corners.
363500	366500	I like using this for most of the blocks in my flow charts.
366500	368000	And then it goes to B.
368000	372000	And let's say B is a check whether the user already exists or not.
372000	379000	And by using the braces like so, you can create this kind of diamond shape.
379000	380500	And this is often used for choice.
380500	382000	Like is this an existing user?
382000	384000	We can add a question mark here.
384000	387500	And now we can split the flow into a yes case and a no case.
387500	390500	So let's say it's not an existing user.
390500	398000	So then we need to go to a C state, which is enter name like so.
398000	401500	And I have to make this a bit smaller so we can actually see what's happening.
401500	402500	So like this.
402500	407500	And of course, we now need to put a label on top of this arrow to indicate that this is a no case.
407500	412500	And that you can do by adding no behind the arrow like so.
412500	414500	So I write no here.
414500	416500	Now you see the arrow gets a label no.
416500	419500	So if it's not an existing user, we've asked for the username.
419500	421500	Then we can continue the flow.
421500	429500	So we go from C to D and we want the user to accept the conditions.
429500	432500	So that's another choice block like this.
432500	436500	And then if the user says no.
436500	438500	So then this is basically what you get.
438500	441500	Let me make that again a bit smaller so we can see what's happening.
441500	447500	Or perhaps I could change this to a left to right flow chart and that will be a bit easier to see like so.
447500	449500	So enter email address is an existing user.
449500	452500	No, then we enter the name, we accept the conditions.
452500	454500	No, we go back to enter your email address.
454500	460500	If you do yes.
460500	465500	Then we can go to the end state and let's put a label ends over there like so.
465500	474500	And what we do in the end state is send email with a magic link, right?
474500	478500	And then the user can use that magic link to log in like so.
478500	484500	And then there's a couple of other cases like what happens if it is already an existing user.
484500	489500	So if the case here was yes, well, in that case, if it's an existing user.
489500	495500	So from B and the answer is yes, we can go directly to E.
495500	498500	And then it also sends an email with a magic link.
498500	502500	And I think it's somehow removed the no case for the accept conditions question.
502500	506500	So let's add that back here like so.
506500	508500	And then we go back to a.
508500	509500	There we go.
509500	518500	And then finally what we can do is that we have the estates and that goes to the end state so that we end up in an end state right here.
518500	520500	So this is the flow chat that we get them.
520500	523500	Let's try the top to bottom again.
523500	525500	And then this is what you see.
525500	529500	So you can see it's quite easy to create these flow charts right here in mermaid.
529500	537500	The disadvantage of using something like mermaid is that you don't have a lot of control over where these blocks in the diagram are located.
537500	543500	For example, perhaps it would be nicer to have this send email with magic link block aligned more to the left.
543500	551500	So this yes arrow right here could actually go through this place instead of going straight through the no arrow.
551500	554500	It might be a bit easier to understand the diagram in that way.
554500	565500	But still I find this way of drawing diagrams much faster than using a real drawing tool because I can just write it down in text and it appears right here on the right side of the screen.
565500	567500	So that's a flow chart.
567500	576500	So flow charts are very useful for modeling these kinds of flows and modeling alternative flows and defining what should happen in that case.
576500	580500	And it's helpful to have these kinds of visualizations in your design documents.
580500	585500	Now flow charts really focus on modeling the flow, which makes sense because they're flow charts.
585500	593500	But sometimes you want to do something a bit differently, especially if you have, let's say, multiple participants in a particular operation.
593500	600500	That also actually happens a lot in authentication flows where you might have a client that wants to authenticate itself.
600500	609500	You have a server that needs an authenticated client and you have an authentication provider that does the job of authentication.
609500	615500	So then you have three parties that are part of, let's say, a flow or a sequence to be authenticated.
615500	623500	And flow charts are not really that helpful for that because they don't really indicate who is where in which part of the flow.
623500	628500	This is really more suited for how a user would do things.
628500	637500	And if you want to have the participants in a certain operation to be shown more explicitly, then something like a sequence diagram is actually quite helpful.
637500	639500	Let me show you how that works.
639500	645500	So I'm going to add a sequence diagram here right in Mermaid.
645500	648500	And then we're going to have a number of participants.
648500	653500	So for each participant in this sequence, I'm going to define it right here.
653500	656500	And let's say we're going to model this authentication flow.
656500	662500	So we're going to have participants, clients.
662500	672500	We're going to have a participant OOF provider, which is the server that handles authentication requests.
672500	680500	And we're going to have a participant server that needs an authenticated client in order to do things.
680500	689500	So what you can do now is model the various steps in the sequence of authenticating and getting something from the server.
689500	696500	So the first thing that you're probably going to have is something like the client that's going to talk with the OOF provider to get authenticated.
696500	704500	And communication in a sequence diagram, I actually should add the A here, is done by using this type of error.
704500	709500	So we have the client and then we have the OOF provider.
709500	716500	And what this is going to do is request an access token like so.
716500	718500	And this should be in I as well.
718500	720500	So then this is what you get, right?
720500	725500	We have the client, OOF provider in the server and the client requests an access token.
725500	728500	And we can add more operations in the sequence.
728500	739500	So the OOF provider like this sends an access token back to the client,
739500	742500	assuming that the client provided the right credentials.
742500	751500	Then the client has the access token, so the client goes to the server and requests a resource.
751500	755500	Then the server has to verify that the client is properly authenticated.
755500	763500	So the server talks back to the OOF provider to validate the token.
763500	771500	Then the OOF provider sends back to the server that the token is valid.
771500	778500	And then finally the server goes back to the client and sends the resource.
778500	782500	And there we have a basic example of a sequence diagram in Mermaid.
782500	787500	The advantage of using a sequence diagram instead of a flowchart like we had before
787500	792500	is that it's really clear what the roles are of the different parties in this sequence.
792500	797500	So we have the client, OOF provider in the server and this really visualizes very clearly how they communicate.
797500	801500	So for these kinds of operations, a sequence diagram is actually quite helpful.
801500	808500	There's a couple of other things you can do to clarify when the operation is handled by which party.
808500	814500	So what you can do is activating and deactivating participants in the sequence diagram.
814500	817500	And that's then shown by adding rectangles to these lines.
817500	822500	So for example, what you can do is when the client sends something to the OOF provider right here,
822500	828500	we can activate the OOF provider.
828500	837500	And once the OOF provider sends things back to the client, we can deactivate the OOF provider again.
837500	842500	And now you see we get this little square here to indicate this is when the OOF provider is active.
842500	844500	And we can do that also for the server.
844500	855500	So let's say we activate the server here and here we activate the OOF provider again.
855500	867500	And here we deactivate the OOF provider and finally we also deactivate the server like so.
867500	869500	And then this is basically what you get.
869500	871500	Now I'm not sure why I'm seeing this twice.
871500	873500	Did I do something weird?
873500	874500	I don't know.
874500	876500	For some reason I'm seeing it twice.
876500	877500	I'm not sure why that is.
877500	879500	Maybe I should reopen the preview.
879500	880500	Oh, okay.
880500	882500	So it was apparently a rendering issue.
882500	883500	All right.
883500	885500	So this is your basic sequence diagram.
885500	888500	One more thing that you can do is add numbers to these things.
888500	894500	So often you may want to refer in your document to certain steps in the sequence.
894500	896500	And it's nice to be able to add numbers to this.
896500	899500	And sequence diagram has a auto number feature.
899500	902500	So you're just right here, auto number like this.
902500	907500	And now it's going to add these numbers so you can, in your text, refer to step three
907500	911500	or step four in the sequence and then you can easily find it back in the diagram.
911500	913500	So that's a sequence diagram.
913500	918500	Also quite helpful and also like that it's really easy to create this in Mermaid.
918500	922500	So next type of diagram that I want to talk about is the famous class diagram.
922500	926500	This is probably what UML is most known for.
926500	929500	And this is how you create it in Mermaid.
929500	935500	So we can have a class diagram and then you add your classes and your relationships below this line.
935500	940500	For example, let's create a class that's called order.
940500	946500	And it's going to have, let's say, an order status like so.
946500	951500	So it has one instance variable of type order status and what that is we'll look into that later.
951500	956500	But this is your basic diagram containing a simple class.
956500	959500	Personally, I don't use class diagrams all that much.
959500	967500	The main reason being that I'm moving more towards functional approaches and a class diagram doesn't allow you to define functions as separate objects.
967500	973500	Now you could, of course, create something here you call the class, but then it's actually a function.
973500	977500	But well, the question is whether it really makes a lot of sense.
977500	983500	Actually, there's another diagram type that I do use quite a lot that I find quite useful and I'll talk about that in a minute.
983500	986500	Let's first look a bit more closely at class diagrams.
986500	992500	They are quite useful if you want to model things like design patterns and visualize how design pattern works.
992500	996500	But when I write my applications, I generally don't create class diagrams.
996500	1001500	I just create the classes directly inside the code and for me that works just as well.
1001500	1007500	So class diagram, there's a couple of different things you can do in a class diagram in Mermaid.
1007500	1011500	One thing you can do is let's say this order status is an enumeration.
1011500	1013500	You can add a second class.
1013500	1018500	Let's call that order status and order status has a few options.
1018500	1021500	So we have, let's say, failed, pending and paid.
1021500	1027500	And you can indicate that this is an enumeration by using this in Mermaid.
1027500	1035500	So now it's an enumeration and we add a couple of states here like failed, pending and paid like so.
1035500	1036500	So that's our order status.
1036500	1042500	And let's say we have another class that is a payment processor that we use for processing payments.
1042500	1047500	So we have a class, let's call that a payment processor class.
1047500	1053500	And we want this to be an interface or in Python protocol class or an abstract class
1053500	1058500	because we're going to create subclasses for specific payment processors.
1058500	1060500	So Stripe, PayPal, et cetera, et cetera.
1060500	1067500	And in order to indicate that something is abstract or an interface, you write this in Mermaid.
1067500	1069500	And then what are we going to have?
1069500	1074500	Well, we're going to have an API key to connect to that particular processor.
1074500	1077500	So that's a string API key.
1077500	1087500	And we're going to have a method to connect so that gets a URL and perhaps some JSON data, whatever.
1087500	1093500	And we're going to have a method to process a payment.
1093500	1100500	And that's going to get an order and that's going to return the order status.
1100500	1103500	So this is our simple interface for payment processor.
1103500	1110500	Many object oriented programming languages have a mechanism to protect access to particular parts of class.
1110500	1113500	So you can make members private or protected or public.
1113500	1119500	Python doesn't have it, but in your class diagram, it's often useful to indicate this in some way.
1119500	1124500	So you know which parts are going to be internal and which parts are going to be used externally.
1124500	1130500	So for example, in the case of the payment processor, well, probably the API key, you don't want others to access this.
1130500	1137500	So you could make it private and making something private, you do that by putting a minus in front of the method name.
1137500	1140500	Processing the payment is probably something that's going to be public.
1140500	1146500	So you can put a plus in front of this and connect is probably something that's going to be internal,
1146500	1151500	but you might want to override that method and call it from the subclass as well.
1151500	1156500	So you could make it protected and a protected member we indicate by using this hash.
1156500	1160500	That's the kind of standard way to do it in UML.
1160500	1163500	And then order status, we can also make that public like so.
1163500	1168500	So these are the main classes in this particular example we have an order that has a status
1168500	1172500	and there's a payment processor that can process payments of an order.
1172500	1174500	Another thing you might have is a customer.
1174500	1181500	So let's also create a class customer and the customer is going to have a name like so.
1181500	1186500	And that's also going to be public and that's probably going to be address information and etc.
1186500	1188500	But let's leave that out for now.
1188500	1192500	So we have our four different concepts in the class diagram.
1192500	1196500	And now we can start modeling relationships between them.
1196500	1200500	There's a couple of relationships that are in particular important.
1200500	1203500	We have inheritance relationships.
1203500	1210500	We have composition relationships and we have aggregation relationships.
1210500	1213500	So these all look different and they are actually also different,
1213500	1217500	although composition and aggregation are really closely related.
1217500	1222500	So inheritance means that we have a class and a subclass relationship.
1222500	1225500	For example, here we have the customer class, which has a name,
1225500	1230500	but I could create a private customer and a business customer.
1230500	1237500	So we can model a relationship here, an inheritance relationship that goes from customer to
1237500	1244500	and this is how we indicate inheritance in Mermaid, a private customer.
1244500	1249500	And you also see that this inheritance relationship appears here directly in the diagram.
1249500	1255500	And let's do the same thing, but then let's create a business customer as well.
1255500	1261500	So we have the customer class that can have a private customer or a business customer subclass.
1261500	1263500	So that's inheritance relationships.
1263500	1268500	And we can do the same thing, for example, for the payment processor, like so.
1268500	1276500	And let's also create an inheritance relationship and we will have a stripe payment processor.
1276500	1283500	And we're going to have a PayPal payment processor like so.
1283500	1288500	So now we have our interface payment process that has implementation subclasses,
1288500	1292500	stripe payment processor and PayPal payment processor.
1292500	1295500	You can put these method definitions also again in this class.
1295500	1300500	You simply can add the stripe payment processor class here and add any instance variables
1300500	1302500	or methods that you like.
1302500	1306500	So what about the relationship between, let's say, the order and the customer
1306500	1310500	because every order should have a customer associated with it.
1310500	1312500	There's two options that come to mind.
1312500	1314500	There is composition and there's aggregation.
1314500	1315500	But what's the difference exactly?
1315500	1319500	There's actually a more generic term in UML that's called an association
1319500	1323500	that also describes a relationship between two objects.
1323500	1328500	And aggregation and composition are basically special cases of associations.
1328500	1334500	In both of these cases, it means that an object maintains a reference to an object of another class.
1334500	1341500	But the difference is that aggregation is a relationship where the child or the object
1341500	1347500	that you have a relationship with can, in principle, exist independently from the other object,
1347500	1348500	which is the case here.
1348500	1351500	We could have an order that has a customer.
1351500	1355500	But if we delete the order, we still might want to keep the customer
1355500	1359500	and actually have multiple orders over their customer lifetime, right?
1359500	1363500	So there the customer can exist independent of the order.
1363500	1367500	And the way to model this in Mermaid is using this type of error.
1367500	1373500	So we have an order and then we write the relationship like so.
1373500	1380500	And now you see that customer is actually attached to order via this aggregation relationship.
1380500	1385500	If you turn this into a composition, then you would use a star instead of an O.
1385500	1389500	And then this will be colored in and that means it's a composition.
1389500	1396500	But actually an aggregation makes more sense here because customer can exist independently from the order.
1396500	1402500	Suppose you have a car class, then you could have a composition of the car with the engine,
1402500	1404500	which is what you see here on the right.
1404500	1408500	And here composition makes more sense than aggregation because in principle,
1408500	1411500	the engine is simply part of the car.
1411500	1414500	There is no reason that an engine is in multiple cars or something.
1414500	1418500	So a car really has, it contains an engine.
1418500	1423500	And the child, the engine doesn't normally exist independently of the car.
1423500	1426500	If you're building software for a car repair facility,
1426500	1429500	then maybe you would have engine be a separate part of the car.
1429500	1433500	So it depends on the application that you're building, obviously.
1433500	1437500	I hope you can see that there's a difference between this type of relationship,
1437500	1440500	customers and orders and cars and engines.
1440500	1445500	So this is aggregation and this is composition and they're both specific versions
1445500	1448500	of a more generic relationship, which is called association.
1448500	1451500	Again, I don't use these class diagrams very much myself
1451500	1455500	because I rely less and less on classes and more functions nowadays in my code.
1455500	1460500	But still, it can be useful to draw this out in text, in mermaids really easily like this.
1460500	1462500	So the final type of diagram that I want to talk with you about,
1462500	1464500	and this one is actually quite useful,
1464500	1467500	this is called the entity relationship diagram.
1467500	1472500	And we write it in mermaid like so, er diagram.
1472500	1475500	And what I like about the entity relationship diagram
1475500	1477500	is that it's a bit more generic than the class diagram.
1477500	1482500	It simply talks about concepts that are related in some way.
1482500	1488500	And this is actually useful if you, let's say you're trying to build software in a particular domain
1488500	1491500	and you want to create a model of that domain.
1491500	1493500	You want to understand how things are related
1493500	1496500	and what the main concepts are in that domain.
1496500	1501500	So what you do is you create an entity relationship diagram that describes this domain.
1501500	1505500	And then normally what you do in this kind of diagram is that you have the concepts
1505500	1507500	and the relationships between the concepts
1507500	1512500	and often there's kind of like a verb associated with each relationship.
1512500	1515500	So for example, what you could have is a customer.
1515500	1518500	I'm kind of sticking with the customer order example
1518500	1521500	and customer is related to an order.
1521500	1526500	So we have the order and then between customer and order we have a relationship.
1526500	1533500	And in an entity relationship diagram, this is how we do it.
1533500	1536500	And then we write a verb behind it.
1536500	1539500	And as you can see this relationship, it looks a bit complicated.
1539500	1543500	What this actually means is that this identifies how many things
1543500	1546500	of something are connected with something else.
1546500	1548500	So in this case, a customer plays an order.
1548500	1554500	What this means right here is that the order is going to have exactly one customer.
1554500	1556500	So one order cannot have multiple customers.
1556500	1559500	And if you go to the mermaid documentation,
1559500	1564500	so let me scroll down for the entity relationship diagrams.
1564500	1567500	So these are the options for the arrows.
1567500	1570500	This means zero or one. This means exactly one.
1570500	1573500	This means zero or more with no upper limit.
1573500	1575500	And this means one or more.
1575500	1579500	And these are kind of the most commonly used relationships
1579500	1581500	in an entity relationship diagram.
1581500	1586500	So if we look at this example, so you can see that we have one customer
1586500	1590500	that places zero or more orders.
1590500	1593500	So a customer can exist independently of an order.
1593500	1595500	And we can add more relationships.
1595500	1598500	So we could also have an order.
1598500	1606500	So one order is going to have one or more line items.
1606500	1609500	And that's a contains relationship, right?
1609500	1613500	So an order without any line item whatsoever is not a valid order.
1613500	1617500	And then what you can do is also add some attributes.
1617500	1621500	So the main thing here is that we don't really care if customer is a class
1621500	1624500	or if it's a module containing a bunch of functions or whatever.
1624500	1628500	It's a concept and we're modeling the concepts and the relationships
1628500	1630500	between the concepts.
1630500	1633500	So that makes a difference from a class diagram in UML.
1633500	1638500	Now you can add instance variables or let's say data that belongs
1638500	1640500	to a particular concept.
1640500	1646500	So we could have a customer and perhaps we want the customer to have an ID
1646500	1650500	and we want the customer to have a name like so.
1650500	1653500	And you see it also appearing here on the right.
1653500	1658500	And we can do the same thing like, for example, the order, it might have an ID
1658500	1664500	and it might have a status, right, for being paid or not.
1664500	1666500	And line item, similar.
1666500	1671500	So we have line item that might have some kind of code.
1671500	1679500	It might have a description, a quantity and a price.
1679500	1683500	So the entity relationship diagram still allows you to associate data with concepts
1683500	1686500	to kind of indicate how concepts are structured.
1686500	1690500	But it's not about classes, it's really about concepts and how they're related.
1690500	1693500	And this is a diagram we also like to use from time to time
1693500	1697500	just to give a global overview of how things fit together.
1697500	1700500	So I hope you enjoyed this video and that has given you some ideas
1700500	1704500	for how to use Mermaid to write better software design documents.
1704500	1707500	If you enjoyed it, give it a like, consider subscribing to my channel
1707500	1710500	if you want to learn more about software design and development.
1710500	1713500	Thanks for watching. Take care. See you next time.
