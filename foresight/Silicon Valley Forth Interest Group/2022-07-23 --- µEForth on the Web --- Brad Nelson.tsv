start	end	text
0	3000	In the interest of time.
3000	5000	So,
5000	9000	Brett introduce yourself and on with the show.
9000	11000	Already.
11000	15000	Is that show up for folks.
15000	17000	I'm seeing nothing.
17000	19000	No, no dissent. All right.
19000	24000	Today, I'm going to talk about micro e fourth on the web.
24000	29000	I'm actually going to adjust.
29000	34000	I can see my slides are better yet.
34000	38000	Hide that entire.
38000	41000	All right.
41000	48000	So, micro e fourth is related to ESP 32 fourth,
48000	51000	which you've heard me talk a bunch about.
51000	56000	It's a version of it's a, they're really one in the same built from
56000	62000	the same source base ESP 32 fourth is the variant that targets ESP 32.
62000	68000	We branded it that way to make it clear to folks, but.
68000	73000	It's a, it's an e fourth with a minimal amount of non fourth code in it,
73000	78000	which is a weird thing to say for a fourth that's created in C.
78000	83000	It tries to have minimal redundancy so that you don't end up having to
83000	89000	describe an op code once in its code and another time in some table somewhere.
89000	95000	It tries to make it possible to add one line of code to add an op code.
95000	97000	To the system.
97000	102000	The kernel is compiled from inline fourth text.
102000	107000	So it start up, it does the sort of inefficient thing of booting up the system.
107000	112000	From fourth text, but it does this in service of the goal of having as little
112000	115000	non fourth as possible in the system.
115000	123000	And there's support for Windows Linux ESP 32 and finally after a long delay the web
123000	129000	originally when I had started working on this particular fourth kernel.
129000	134000	I had intended to have web support and a number of things got in the way,
134000	139000	not least of which is that I think that trying to do all those things in one
139000	142000	code base may not have been the best choice.
142000	146000	But I'll talk about that as we go through it.
146000	148000	Why the web.
148000	151000	The web is portable and powerful.
151000	157000	It offers a rich set of API's that let you do all sorts of things from
157000	163000	access, the graphics of your device to local files.
163000	170000	If there are API's for local files, there are API's for even serial access now.
170000	173000	So you can do quite a lot on the web.
173000	176000	It's also possible on the web to go fast.
176000	181000	The days of JavaScript as sort of the only path to do a thing on the web are
181000	185000	over and due to things like WebAssembly.
185000	192000	You can now in all the major browsers run very performant code.
192000	198000	There was a precursor to WebAssembly called Asm.js, which I've made some use of in
198000	208000	this application which I'll talk about and has the virtue that in Chrome at
208000	213000	least when you have Asm.js it actually will get converted underneath to WebAssembly.
213000	217000	I know this because I happened to have been the one that implemented the
217000	221000	version that lives in V8 now.
221000	225000	And it's similar but not exactly the same at least as I understand it in
225000	228000	Firefox and some of the other browsers.
228000	233000	The other great thing about the web is that it's easy to show people things.
233000	237000	I can hand out a URL and folks can go there.
237000	241000	And this relates to the second point, which is that people don't have to trust me.
241000	249000	If you download the version of Micro E4 for Windows, unfortunately you will
249000	252000	probably get some security alerts from running it.
252000	262000	And this is because I have not signed the binaries on Windows and the antivirus
262000	268000	systems that are out there look at the small headers on a piece of fourth code
268000	271000	and think that this looks kind of questionable and the combination of a
271000	276000	lack of a signature and all of that means that it will warn you about running it.
276000	283000	And unfortunately this is a problem that versions of Win32 fourth face as well.
283000	288000	In comparison, the web I can just show you a URL and actually at the end of this
288000	293000	presentation I'll encourage you all to check out what I put up.
293000	299000	So the overall approach in Micro E4 is that I try to make each op code be
299000	304000	something that I can define in just one or two lines of C code.
304000	308000	And the goal is to have a reasonable list of op codes.
308000	313000	Originally I kind of focused on the minimal set similar to classic E4, but
313000	317000	especially if you look at the current version, there's a number of additional
317000	319000	op codes that have been added.
319000	325000	I've added as many as I have partially because on ESP32 this has the advantage
325000	332000	that op codes implemented in C end up taking less of the RAM of the system.
332000	337000	They can end up in flash memory and so more memory becomes available for the
337000	339000	running application.
339000	344000	After you define those op codes, you're able to use a very small set of system
344000	351000	variables that sees in a structure.
351000	355000	And those same variables are accessible from forth.
355000	360000	And then the key idea is that there are five core op codes that are non-trivial,
360000	366000	that don't fit in one or two lines, that are implemented in larger C functions.
366000	372000	These are op codes that could be built from the other op codes because the
372000	375000	other op codes are sort of fully general.
375000	381000	But they're done in high level C code because they allow the fun trick that
381000	386000	with those five, you have enough of the fourth system in place that you can
386000	390000	boot the rest of the system from there on out with forth.
390000	396000	And so they're carefully chosen to be sort of the crucial building blocks to
396000	398000	have a full fourth system.
399000	404000	And they also sidestep another problem, which is that if you have to assemble
404000	411000	loops, you very quickly get into the problem that you now need an assembler
411000	413000	to bootstrap that part of your system.
413000	418000	So they both serve the purpose of being crucial to executing fourth code,
418000	427000	but also they avoid needing to have any kind of mechanism for assembly.
427000	430000	And then the rest of the system is in fourth.
430000	435000	So there are some design choices that are in micro e-forth that are not fundamental
435000	437000	to that model.
437000	441000	It happens to be indirect threaded just because that's what I did at the time.
441000	449000	Partially this is because it being a fourth implemented in C,
449000	455000	it needs some type of op code that's explicitly stored and I found it more
455000	457000	important to have these live in a cell.
457000	461000	I didn't want them to be direct threaded and live in line.
461000	467000	There isn't really, there isn't a real architecture underneath when you're
467000	470000	targeting C, you're targeting the sort of the C virtual machine.
470000	474000	And so it made sense to me to do an indirect threaded fourth.
474000	479000	Also it makes words like C and does a little bit simpler.
479000	484000	One other thing is that a truly direct threaded fourth would have challenges,
484000	488000	especially if I wanted to interoperate with machine code being done in C,
488000	494000	but an indirect threaded fourth in the Linux version and in the ESP 32 version
494000	500000	can use computer go-tos available in those compilers,
500000	503000	even though that isn't actually a standard C feature,
503000	506000	it's present in the vast majority of C compilers.
506000	510000	And that avoids there being any in the assembly language.
510000	513000	It's possible other models might go faster, especially on the web.
513000	518000	I've wondered if it's the right model, but that is what it is for now.
518000	520000	It uses unlimited stacks.
520000	525000	This is a place where I deviate from some of Dr. Ting's choices.
525000	527000	This is a mixed bag.
527000	533000	I did this because it was what was present in the originally fourth model.
533000	539000	One thing that it lacks, especially on ESP 32 that I sometimes regret,
539000	545000	especially when the thing crashes is that by allowing the stack to be anywhere in memory,
545000	548000	you can easily run them up with the stack.
548000	554000	Dr. Ting used a fun trick of using only a bite size pointer for the stacks
554000	561000	and having them wrap around, which avoids the stack getting off the rails.
561000	565000	I support 32-bit floating point values.
565000	570000	And this is primarily because this was a feature that ESP 32,
570000	576000	as I don't do 64-bit floats because ESP 32 doesn't have them in hardware.
576000	582000	Also, it's with an eye to eventually I plan to get back to my deep learning in fourth talk
582000	586000	and hope to make use of micro E4 for that.
587000	595000	And it tends to use avoid counted strings just because it happened to fall out that way.
595000	598000	So how does the system build up?
598000	602000	We'll go through the C version because as you'll see in a moment,
602000	606000	the web version is actually converted from that version.
606000	609000	There's a small set of registers that you have to decide.
609000	612000	And let's talk about what each of them are for.
612000	614000	There's an instruction pointer.
614000	616000	There's a return stack pointer.
616000	618000	There's a data stack pointer.
618000	625000	And then I keep the top of stack in a register or virtual register as it is all through a layer of abstraction.
625000	630000	There's a work register that as Next operates,
630000	640000	it first loads the address pointed to by the instruction pointer into the work register.
640000	645000	And so that can be useful for gluing things together, for example, and does.
645000	647000	There's a floating stack pointer.
647000	651000	And then I ended up needing a single template float value.
651000	661000	I define and see a bunch of convenience operations that implement some of the core stack manipulation.
661000	668000	These end up being reused in the op codes rather than sort of have less readable C code there.
668000	682000	Some of the variable length ones are more useful for ESP 32 forth where some of the bindings are for calling into libraries.
682000	687000	Make these useful. They're not actually that useful in the kernel.
687000	694000	The outer structure of the thing is really built, built around the idea that you want to run your fourth.
694000	707000	And then you might actually need to yield back to the system on ESP 32, you need to yield back to the system because some of the libraries assume that you will return control back to the thing that called in.
707000	716000	And on the web, this is even more important because the web has a sort of an event loop that if you don't return to a number of things, get gummed up.
716000	726000	And so for that reason, it's important to have the fourth be structured such that you can have a yield word that parks the interpreter and yields back out to the system.
726000	745000	So you everything when you enter is sitting on the return stack, you unpark things which work sort of like this, where you pull out the instruction pointer the stack pointer the floating pointer stack pointer and then unbox the top of the stack.
745000	761000	And then, if you need to yield, or when you do eventually need to yield you to you park everything so that you only have to hold on to that single return stack value to find your place back.
761000	777000	To be able to define the op codes in a single line I use a, a C trick called an X macro. This lets you define a list of a list inside of a series of macro calls and to encode a table of information.
777000	791000	You can then reuse portions of the list in multiple different places so the way this works is that I can define an op code, all on one line by describing the string that that is its name and forth.
791000	802000	I have to give it a C name because it's useful to be able to have it for defining lists of op code constants and things like that.
802000	814000	I wish I didn't have to do this because it's actually redundant, but I have not found a way around that. And then there is a, and then there's the code in C that implements the op code.
814000	833000	And I can use that a list of op codes described in that way, for example, a platform op code list for describe that way I can populate an enumerated type, holding out just the, the op code name and prefixing it with a name if I need to, or later in this is this
833000	851000	op code is actually from the Windows version. When I want to switch and dispatch in the, in the core of the interpreter, I can just describe my next operation, and then have all the op codes be played out and I end up not needing to list them each in each of these places because
851000	856000	I don't have that shared list.
856000	869000	I then for convenience, I'm able to define a set of alternate short names that let me define just the name and the code for a word.
869000	884000	One of the biggest distinction is that some words are valid. See identifiers and others are not. And so, to make things a little more pithy, I'll use this why label to define words like and that happen to be valid.
884000	896000	See identifiers, but for words like see at where it would not be a valid see identifier I have to make up some C name for it, and then I have the code in one line.
896000	902000	If I defined a dupe as a macro, it causes problems and so I end up having to treat dupe.
902000	913000	Especially, but it's very, very handy to have a dupe macro if I were really clever I suppose I come up with a different name for the dupe macro and used in this way.
913000	922000	But anyways, and in that way I'm able to describe all of the op codes that I need to define the core of the fourth.
922000	936000	And I do have some other variations. If you go looking at the source code for micro view forth. There's a little additional complexity I'm skipping over because of vocabularies I ended up originally it was just these x and y macros.
936000	955000	But when I, and I implemented vocabularies purely in high level for as I got, got along in ESP 32 forth it became useful to have more of the vocabulary mechanism live in the C code and so there's.
955000	966000	But I transitioned some of that into the C code because it was convenient to very sorry rather it more efficient for ESP 33 forth more of it ends up in flash memory.
966000	971000	Anyways, once you've defined your op codes.
971000	980000	All you need to do forth is is is this core loop you your quit is just a forever loop that evaluates a single word.
980000	989000	And now, of course, the challenge is how do you define that evaluate one operation so here are those five magic words I was talking about.
989000	1003000	They have a dependency each of them on some of the system variables, and so that on the right or the system variables on the left of the, the five magic words the first of these is a word to parse a number.
1003000	1011000	And it takes a string and attempts to parse it into a legitimate number for that it needs to know the base.
1011000	1022000	This is, as you'll see in a moment relatively straightforward to do in high level C code, and avoids having to describe that using using forth out.
1023000	1034000	parses and finds boundaries to the next word and updates the the end pointer and so on reading from the translation input block.
1034000	1044000	Creation of a word is a little bit more complex than one line line just because you have to hook things into place and build up the dictionary structure.
1044000	1060000	And then finding a word similarly, because it involves string comparisons and so on, it's, it's nice to have that as a high level word, and then those four words are used in to implement the value eight one, based on the current state.
1061000	1081000	And if a word is not found, they call into back into a deferred word that's stored in in not found, and that initially is drop, but later on turns into throw, which, which lets me avoid needing to have throw there, and the system is booting.
1081000	1093000	So I'm not going to show each of them but I'll show the parse word and the parse word relies on this little separate function which could be folded in but a word for matching.
1093000	1105000	It's deciding if two characters are a match, and then it walks down and finds the boundary to for the next word.
1105000	1114000	Once you have those five and that evaluation loop which please check out details in the source space, you can then boot from a string.
1114000	1131000	You can end up, you can set the trend that the the tip to point to a gigantic C string that contains all of your fourth bootstrapping code and everything else gets it's built up from there the first thing that gets defined as comments because initially comments aren't supported and you need
1131000	1135000	comments to be able to use comments and the rest of the code.
1135000	1145000	And I won't belabor that but it's a it's a there's a fascinating sort of ordering in which you can you can do things to bring the world up. Well, how do we bring this to the web.
1145000	1160000	Well, the simple answer is I convert this to asmjs now there there is a set of tooling that exists to do this a great tool by a person I actually know named Alonza Kai, called inscription.
1160000	1178000	But it's a big pile of tools and involves LLVM and is is a lot of stuff, especially for my my small program and so I tried something different I hand converted the five core words to to asmjs because they're just sort of special enough that
1178000	1186000	but there's only there you know they're only similar to what you saw with with parser they're basically each a screen full.
1186000	1197000	And then I tried to come up with a set of automation to convert the op codes and we'll talk about that in a sec. So, asmjs I should talk about it for a second.
1197000	1201000	It's definitely the best hack I've ever seen.
1201000	1215000	It's the idea of embedding C code in JavaScript, which seems counterintuitive and it's does this by representing C semantics in inside of JavaScript.
1215000	1227000	Inside of Chrome at least this gets converted to WebAssembly which is yet another format which I won't talk about today, which then gets converted actually into into real assembly and runs it with, you know, near native speeds.
1227000	1246000	The cleverness of the hack of asmjs is that JavaScript represents values with data types that are not strong but rather, rather weak and so they are able to.
1246000	1260000	They have a variable that can hold a string or can hold an integer can hold a floating point value. In fact, actually numbers in JavaScript are always double precision floating point values whether you sort of want them to be or not.
1260000	1279000	And in it with the trick of asmjs is that you use a sort of redundant syntax where you incessantly or things with zero for example to indicate that something is a 32 bit integer, or you use this operation f round which rounds to the precision of a 32 bit floating
1279000	1299000	point value to indicate that something is 32 bit floating point value and so in this way you're able to override the semantics of JavaScript such that you're making it clear throughout your code that that everything that a given variable is a is a 32 bit floating
1299000	1311000	point value, for example, so it looks wasteful, but to a JavaScript interpreter that knows how to decode it, it can be converted into efficient code.
1311000	1326000	It is largely get been superseded by WebAssembly but for the purpose of generating a thing by hand it's a little bit easier to generate by hand because it's human readable text and doesn't require additional tooling so that's what I ended up doing.
1326000	1342000	So here's that same parse code, re expressed in asmjs, the memory accesses are relative to some arrays that are contained the entire memory map, and a similar thing was done to each of these.
1342000	1350000	The rest of the system is blue and I noticed there's a question in the chat so I'll maybe take that. Oh, he's got a reference.
1350000	1367000	So this system could in C could be built up with includes, but I actually do it with a combination of make files and some scripts for gluing it together and the reason that I do this is that for the ESP 32 version of my career for it.
1367000	1387000	I don't have it one gigantic I know file. And I didn't want the sort of side effects that you get from using the C preprocessor to include a file. And so I structured using these scripts that ends up being useful because I can then use those same scripts to do some
1387000	1402000	replacement patterns to try to convert all of the op codes. And so I do something. I do something like this I go through and have a series of replacements and some of these these are actually all string replacements but a few of them are regular expressions, where
1402000	1420000	I use the C code with the equivalent as mjs JavaScript code, and the motivation here is that I hope to be able to avoid needing to update as mjs code when I change the C code.
1421000	1432000	I've really learned the lesson it's a classic lesson that a sort of a badly implemented compiler done with string substitution is not a good idea.
1432000	1439000	140 lines of replacements end up being required to handle all the op codes I have.
1439000	1455000	These op codes are there's 150 lines of them so it's not much of a win there are some additional op codes that are added to support the efficiency of bringing more of the system inside so it is a net win in total, but not by much of a margin and so probably this is
1455000	1469000	something that I should revisit probably would be worth just maintaining to two separate descriptions of the op codes that are that are do a proper compiler or use or use inscription.
1469000	1477000	Talking to the outside so on the web of course I have one more problem I've got my great interpreter it runs but now how do I talk to the outside world.
1477000	1492000	Well, I have a list of I have only a single op code that I use for this, I called it call confusingly and call calls into JavaScript, passing in the fourth stack as a parameter, which lets JavaScript decide how to interpret this.
1492000	1514000	And then I start out with a table of JavaScript objects that contain what I'll term system calls. And so the first of these is a thing called set eval, which takes a three, three values it takes the starting pointer of a string in the fourth memory space, a length of
1514000	1532000	string, and then the index of a slot in this objects array and JavaScript that I want to populate with the result of eval in that piece of JavaScript. So this lets me take a piece of JavaScript code in a string and forth, hand it over to to JavaScript,
1532000	1553000	and store it in this array. And when I make a call, I call into a particular index my system call number in this table and so this lets me from forth, define past strings into JavaScript to define the the remaining op codes.
1553000	1570000	And so, for example, this is the implementation of key question mark where I have a JavaScript function that interacts with sort of the outside world and JavaScript API's to to cope with trying to check the input buffer, if there's a key.
1570000	1581000	I have this little shortcut here for read line to modes of operation which I won't talk about at length but there's a way to run a JavaScript interpreter at the command line and I also support that.
1582000	1590000	And so I'm able to create this this system call binding all in fourth code and and hook things up.
1590000	1600000	And that's that I've done that for sort of terminal input and output and even a little bit of graphics as we'll see in a moment, and to use the interpreter.
1600000	1616000	I'm one giant JavaScript file. If you want to embed the interpreter somewhere you can specify a div tag with a particular ID and it will inject the interpreter there if it doesn't find that tag it will just happily embedded at the bottom of the page.
1616000	1624000	There are some caveats star slash mod as you'll see I'll show you in a second is a lie I have not implemented it properly.
1624000	1628000	It's on my list of things to fix but I haven't done it yet.
1628000	1630000	I'll talk about sec.
1631000	1642000	I think I picked maybe 16 megabytes of memories the little large but it's a can value which is not ideal by use WebAssembly WebAssembly does support a dynamic key.
1642000	1652000	The terminal is too slow and it's just because I haven't had time to optimize it I'm using the JavaScript that I'm using to update it is less than ideal.
1653000	1663000	Because of floating point support there's actually a sixth core opcode that's required that they conversion to from a string to a floating point value.
1663000	1669000	It's not strictly required if you were if you wanted to strip out the floating point support but it is required.
1669000	1672000	It is used in the current system.
1672000	1677000	Star slash mod is is implemented with this piece of JavaScript code right now.
1677000	1689000	And this is not right because what it's doing is it's, you know, star slash mod right should take a times be and then divide by C and return the, the division results in the modular result.
1689000	1704000	It's supposed to extend it to double word size, but unfortunately there is, although there is a, there is actually a brand new 64 bit, actually arbitrary precision type in JavaScript.
1704000	1718000	I'm not confident in the browser support to make use of it here I'll actually have to check up on that before I fix this problem so for now, I'm converting everything to 64 bit floating point and doing the division and so you can end up with some in precision.
1718000	1732000	So, the right way to fix this is either to use that arbitrary precision type, or I will probably need to eventually, or an alternative is you can you can sort of do the bit shifts and tricks to do divide correctly.
1732000	1740000	There are many happy things of this implementation one is that I was able to quickly throw in a little bit of graphics not quite as much.
1740000	1754000	And I hope to be able to run the heart game I demoed many times back but I'm not quite there yet, but I got some of the pieces. And the other great thing is that this implementation is likely to be reasonably fast and be able to do some interesting
1754000	1763000	graphics because the memory space is something that you can pass over to WebGL and do fun things. So with that I'm going to switch over and do a quick demo.
1763000	1776000	Maybe you can find this if you go to the easiest way to get there is just e4th.appspot.com. And if you click to the right on web, it will bring up the web version of the system.
1776000	1789000	I think it has the same underlying mechanisms as on the other platforms. I'll do vlist list at the dictionary here.
1789000	1808000	So all the plumbing is there so if I if I do, if I define a word, let's say I do test, and I'll do for I print next turn, I can print things out. I can do see on that word, and it will attempt to decompile it.
1809000	1827000	And the same is true of all the words in the system that are defined in higher level words. So for example, I've got this word fill 32, which is part of the system and you can decode and see the inner op codes for it.
1827000	1844000	In addition, there's there's a little bit of support for graphics. I took a little inspiration from from the Apple to Apple to and have a word set that GR will bring you into a mode where there's graphics above and you continue to have the terminal down below.
1844000	1865000	So you can set the color. Let's say we do a red, red is in the, the value color, and then I can draw a box. The coordinate system by default starts at 1000 by 1000.
1865000	1875000	You can use the words to redefine it which I'll never to document on the website at some point soon. But you can, for example, draw a box.
1875000	1885000	And there's, you can, you can disable the visibility of the show text.
1885000	1889000	You can hide the text and get to sort of a full graphic screen.
1889000	1899000	You can get the scrolling on the side there to go away. Actually here. Well, that page. I'm going to re enable.
1899000	1901000	See what I'm typing.
1901000	1905000	One show.
1905000	1909000	And you can go back to text mode with just the word text.
1909000	1914000	The more right now box is the only word that draws anything.
1914000	1919000	This this fourth has vocabularies and the works like, like the others.
1919000	1928000	If you go into the internals vocabulary, you can see some of the stuffing. So for example, there's that s float word that we were talking about earlier.
1928000	1940000	You can examine all sort of all of the inside. So if you examine, you can even see the insides of C. And if you want to see, see the insides of the words that are in there, you can go examine them.
1940000	1955000	We can very briefly look at the, if you go into the JavaScript console you can see the source code you can see the source code by the way on GitHub as well but to give you an idea the web page here contains very little to bootstrap things.
1955000	1966000	It's actually all plumbing for the menu at the top, but to actually embed it is just these two lines at the bottom. The interpreter itself lives down here.
1966000	1981000	And as you see it, it starts out with a few constants and then the very first thing is actually just this gigantic fourth string, which contains the, all of the bootstrapping code some of this of course looks like JavaScript because it's JavaScript
1981000	1998000	and you'll notice that it's actually embedded in this multi line string that I've defined in fourth to be passed over so sort of mixing JavaScript and, and forth, and then way down here you get to the point where you actually see the insides and the.
1998000	2012000	The result of having compiled the C, and then converted and so there is a or sorry compiled in C extracted the set of op codes. And so things are a little bit more splayed out than they are in the C version.
2012000	2028000	And there's a few helper words that are one line macros that are multi line in fourth but you'll see that, you know, you've got words like create here, and there is there are some, there's here's parse, here's convert which is that s convert and so on.
2028000	2043000	And then, most of the bottom of this is actually just a table to build up the set of words, and, and then some initialization code. I know and here's the here's the op codes splayed out and as mjs in a gigantic switch state.
2043000	2047000	In any event that there it is.
2048000	2056000	Check it out I'll be trying to bring it up to parody and support things like color and the terminal and stuff like that.
2056000	2065000	In future version of revisions. Are there any questions.
2065000	2068000	Very cool.
2068000	2073000	Check it out.
2073000	2080000	There I was operating in zombie mode.
2080000	2086000	The past three or four days unable to get the agenda posted.
2086000	2092000	When, fortuitously,
2092000	2098000	a talk appeared in the queue as if by magic.
2098000	2102000	Indirect credit code profiler.
2102000	2109000	So, how long do you estimate your talk to the last.
2109000	2114000	I think last time it took me half an hour.
2114000	2117000	I expect to be a little bit faster this time.
2117000	2123000	Okay, if you can get the ball across the plate in 20 minutes that will work out nicely.
2123000	2138000	What we're going to do is bump the doctor takes stuff you all have access to it on our YouTube channel. Does anybody not know where the YouTube channel that cares where the YouTube channel is.
2138000	2141000	All right, that's good. Good reaction.
2141000	2146000	Okay, so on with the show.
