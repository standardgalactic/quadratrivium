{"text": " In the interest of time. So, Brett introduce yourself and on with the show. Already. Is that show up for folks. I'm seeing nothing. No, no dissent. All right. Today, I'm going to talk about micro e fourth on the web. I'm actually going to adjust. I can see my slides are better yet. Hide that entire. All right. So, micro e fourth is related to ESP 32 fourth, which you've heard me talk a bunch about. It's a version of it's a, they're really one in the same built from the same source base ESP 32 fourth is the variant that targets ESP 32. We branded it that way to make it clear to folks, but. It's a, it's an e fourth with a minimal amount of non fourth code in it, which is a weird thing to say for a fourth that's created in C. It tries to have minimal redundancy so that you don't end up having to describe an op code once in its code and another time in some table somewhere. It tries to make it possible to add one line of code to add an op code. To the system. The kernel is compiled from inline fourth text. So it start up, it does the sort of inefficient thing of booting up the system. From fourth text, but it does this in service of the goal of having as little non fourth as possible in the system. And there's support for Windows Linux ESP 32 and finally after a long delay the web originally when I had started working on this particular fourth kernel. I had intended to have web support and a number of things got in the way, not least of which is that I think that trying to do all those things in one code base may not have been the best choice. But I'll talk about that as we go through it. Why the web. The web is portable and powerful. It offers a rich set of API's that let you do all sorts of things from access, the graphics of your device to local files. If there are API's for local files, there are API's for even serial access now. So you can do quite a lot on the web. It's also possible on the web to go fast. The days of JavaScript as sort of the only path to do a thing on the web are over and due to things like WebAssembly. You can now in all the major browsers run very performant code. There was a precursor to WebAssembly called Asm.js, which I've made some use of in this application which I'll talk about and has the virtue that in Chrome at least when you have Asm.js it actually will get converted underneath to WebAssembly. I know this because I happened to have been the one that implemented the version that lives in V8 now. And it's similar but not exactly the same at least as I understand it in Firefox and some of the other browsers. The other great thing about the web is that it's easy to show people things. I can hand out a URL and folks can go there. And this relates to the second point, which is that people don't have to trust me. If you download the version of Micro E4 for Windows, unfortunately you will probably get some security alerts from running it. And this is because I have not signed the binaries on Windows and the antivirus systems that are out there look at the small headers on a piece of fourth code and think that this looks kind of questionable and the combination of a lack of a signature and all of that means that it will warn you about running it. And unfortunately this is a problem that versions of Win32 fourth face as well. In comparison, the web I can just show you a URL and actually at the end of this presentation I'll encourage you all to check out what I put up. So the overall approach in Micro E4 is that I try to make each op code be something that I can define in just one or two lines of C code. And the goal is to have a reasonable list of op codes. Originally I kind of focused on the minimal set similar to classic E4, but especially if you look at the current version, there's a number of additional op codes that have been added. I've added as many as I have partially because on ESP32 this has the advantage that op codes implemented in C end up taking less of the RAM of the system. They can end up in flash memory and so more memory becomes available for the running application. After you define those op codes, you're able to use a very small set of system variables that sees in a structure. And those same variables are accessible from forth. And then the key idea is that there are five core op codes that are non-trivial, that don't fit in one or two lines, that are implemented in larger C functions. These are op codes that could be built from the other op codes because the other op codes are sort of fully general. But they're done in high level C code because they allow the fun trick that with those five, you have enough of the fourth system in place that you can boot the rest of the system from there on out with forth. And so they're carefully chosen to be sort of the crucial building blocks to have a full fourth system. And they also sidestep another problem, which is that if you have to assemble loops, you very quickly get into the problem that you now need an assembler to bootstrap that part of your system. So they both serve the purpose of being crucial to executing fourth code, but also they avoid needing to have any kind of mechanism for assembly. And then the rest of the system is in fourth. So there are some design choices that are in micro e-forth that are not fundamental to that model. It happens to be indirect threaded just because that's what I did at the time. Partially this is because it being a fourth implemented in C, it needs some type of op code that's explicitly stored and I found it more important to have these live in a cell. I didn't want them to be direct threaded and live in line. There isn't really, there isn't a real architecture underneath when you're targeting C, you're targeting the sort of the C virtual machine. And so it made sense to me to do an indirect threaded fourth. Also it makes words like C and does a little bit simpler. One other thing is that a truly direct threaded fourth would have challenges, especially if I wanted to interoperate with machine code being done in C, but an indirect threaded fourth in the Linux version and in the ESP 32 version can use computer go-tos available in those compilers, even though that isn't actually a standard C feature, it's present in the vast majority of C compilers. And that avoids there being any in the assembly language. It's possible other models might go faster, especially on the web. I've wondered if it's the right model, but that is what it is for now. It uses unlimited stacks. This is a place where I deviate from some of Dr. Ting's choices. This is a mixed bag. I did this because it was what was present in the originally fourth model. One thing that it lacks, especially on ESP 32 that I sometimes regret, especially when the thing crashes is that by allowing the stack to be anywhere in memory, you can easily run them up with the stack. Dr. Ting used a fun trick of using only a bite size pointer for the stacks and having them wrap around, which avoids the stack getting off the rails. I support 32-bit floating point values. And this is primarily because this was a feature that ESP 32, as I don't do 64-bit floats because ESP 32 doesn't have them in hardware. Also, it's with an eye to eventually I plan to get back to my deep learning in fourth talk and hope to make use of micro E4 for that. And it tends to use avoid counted strings just because it happened to fall out that way. So how does the system build up? We'll go through the C version because as you'll see in a moment, the web version is actually converted from that version. There's a small set of registers that you have to decide. And let's talk about what each of them are for. There's an instruction pointer. There's a return stack pointer. There's a data stack pointer. And then I keep the top of stack in a register or virtual register as it is all through a layer of abstraction. There's a work register that as Next operates, it first loads the address pointed to by the instruction pointer into the work register. And so that can be useful for gluing things together, for example, and does. There's a floating stack pointer. And then I ended up needing a single template float value. I define and see a bunch of convenience operations that implement some of the core stack manipulation. These end up being reused in the op codes rather than sort of have less readable C code there. Some of the variable length ones are more useful for ESP 32 forth where some of the bindings are for calling into libraries. Make these useful. They're not actually that useful in the kernel. The outer structure of the thing is really built, built around the idea that you want to run your fourth. And then you might actually need to yield back to the system on ESP 32, you need to yield back to the system because some of the libraries assume that you will return control back to the thing that called in. And on the web, this is even more important because the web has a sort of an event loop that if you don't return to a number of things, get gummed up. And so for that reason, it's important to have the fourth be structured such that you can have a yield word that parks the interpreter and yields back out to the system. So you everything when you enter is sitting on the return stack, you unpark things which work sort of like this, where you pull out the instruction pointer the stack pointer the floating pointer stack pointer and then unbox the top of the stack. And then, if you need to yield, or when you do eventually need to yield you to you park everything so that you only have to hold on to that single return stack value to find your place back. To be able to define the op codes in a single line I use a, a C trick called an X macro. This lets you define a list of a list inside of a series of macro calls and to encode a table of information. You can then reuse portions of the list in multiple different places so the way this works is that I can define an op code, all on one line by describing the string that that is its name and forth. I have to give it a C name because it's useful to be able to have it for defining lists of op code constants and things like that. I wish I didn't have to do this because it's actually redundant, but I have not found a way around that. And then there is a, and then there's the code in C that implements the op code. And I can use that a list of op codes described in that way, for example, a platform op code list for describe that way I can populate an enumerated type, holding out just the, the op code name and prefixing it with a name if I need to, or later in this is this op code is actually from the Windows version. When I want to switch and dispatch in the, in the core of the interpreter, I can just describe my next operation, and then have all the op codes be played out and I end up not needing to list them each in each of these places because I don't have that shared list. I then for convenience, I'm able to define a set of alternate short names that let me define just the name and the code for a word. One of the biggest distinction is that some words are valid. See identifiers and others are not. And so, to make things a little more pithy, I'll use this why label to define words like and that happen to be valid. See identifiers, but for words like see at where it would not be a valid see identifier I have to make up some C name for it, and then I have the code in one line. If I defined a dupe as a macro, it causes problems and so I end up having to treat dupe. Especially, but it's very, very handy to have a dupe macro if I were really clever I suppose I come up with a different name for the dupe macro and used in this way. But anyways, and in that way I'm able to describe all of the op codes that I need to define the core of the fourth. And I do have some other variations. If you go looking at the source code for micro view forth. There's a little additional complexity I'm skipping over because of vocabularies I ended up originally it was just these x and y macros. But when I, and I implemented vocabularies purely in high level for as I got, got along in ESP 32 forth it became useful to have more of the vocabulary mechanism live in the C code and so there's. But I transitioned some of that into the C code because it was convenient to very sorry rather it more efficient for ESP 33 forth more of it ends up in flash memory. Anyways, once you've defined your op codes. All you need to do forth is is is this core loop you your quit is just a forever loop that evaluates a single word. And now, of course, the challenge is how do you define that evaluate one operation so here are those five magic words I was talking about. They have a dependency each of them on some of the system variables, and so that on the right or the system variables on the left of the, the five magic words the first of these is a word to parse a number. And it takes a string and attempts to parse it into a legitimate number for that it needs to know the base. This is, as you'll see in a moment relatively straightforward to do in high level C code, and avoids having to describe that using using forth out. parses and finds boundaries to the next word and updates the the end pointer and so on reading from the translation input block. Creation of a word is a little bit more complex than one line line just because you have to hook things into place and build up the dictionary structure. And then finding a word similarly, because it involves string comparisons and so on, it's, it's nice to have that as a high level word, and then those four words are used in to implement the value eight one, based on the current state. And if a word is not found, they call into back into a deferred word that's stored in in not found, and that initially is drop, but later on turns into throw, which, which lets me avoid needing to have throw there, and the system is booting. So I'm not going to show each of them but I'll show the parse word and the parse word relies on this little separate function which could be folded in but a word for matching. It's deciding if two characters are a match, and then it walks down and finds the boundary to for the next word. Once you have those five and that evaluation loop which please check out details in the source space, you can then boot from a string. You can end up, you can set the trend that the the tip to point to a gigantic C string that contains all of your fourth bootstrapping code and everything else gets it's built up from there the first thing that gets defined as comments because initially comments aren't supported and you need comments to be able to use comments and the rest of the code. And I won't belabor that but it's a it's a there's a fascinating sort of ordering in which you can you can do things to bring the world up. Well, how do we bring this to the web. Well, the simple answer is I convert this to asmjs now there there is a set of tooling that exists to do this a great tool by a person I actually know named Alonza Kai, called inscription. But it's a big pile of tools and involves LLVM and is is a lot of stuff, especially for my my small program and so I tried something different I hand converted the five core words to to asmjs because they're just sort of special enough that but there's only there you know they're only similar to what you saw with with parser they're basically each a screen full. And then I tried to come up with a set of automation to convert the op codes and we'll talk about that in a sec. So, asmjs I should talk about it for a second. It's definitely the best hack I've ever seen. It's the idea of embedding C code in JavaScript, which seems counterintuitive and it's does this by representing C semantics in inside of JavaScript. Inside of Chrome at least this gets converted to WebAssembly which is yet another format which I won't talk about today, which then gets converted actually into into real assembly and runs it with, you know, near native speeds. The cleverness of the hack of asmjs is that JavaScript represents values with data types that are not strong but rather, rather weak and so they are able to. They have a variable that can hold a string or can hold an integer can hold a floating point value. In fact, actually numbers in JavaScript are always double precision floating point values whether you sort of want them to be or not. And in it with the trick of asmjs is that you use a sort of redundant syntax where you incessantly or things with zero for example to indicate that something is a 32 bit integer, or you use this operation f round which rounds to the precision of a 32 bit floating point value to indicate that something is 32 bit floating point value and so in this way you're able to override the semantics of JavaScript such that you're making it clear throughout your code that that everything that a given variable is a is a 32 bit floating point value, for example, so it looks wasteful, but to a JavaScript interpreter that knows how to decode it, it can be converted into efficient code. It is largely get been superseded by WebAssembly but for the purpose of generating a thing by hand it's a little bit easier to generate by hand because it's human readable text and doesn't require additional tooling so that's what I ended up doing. So here's that same parse code, re expressed in asmjs, the memory accesses are relative to some arrays that are contained the entire memory map, and a similar thing was done to each of these. The rest of the system is blue and I noticed there's a question in the chat so I'll maybe take that. Oh, he's got a reference. So this system could in C could be built up with includes, but I actually do it with a combination of make files and some scripts for gluing it together and the reason that I do this is that for the ESP 32 version of my career for it. I don't have it one gigantic I know file. And I didn't want the sort of side effects that you get from using the C preprocessor to include a file. And so I structured using these scripts that ends up being useful because I can then use those same scripts to do some replacement patterns to try to convert all of the op codes. And so I do something. I do something like this I go through and have a series of replacements and some of these these are actually all string replacements but a few of them are regular expressions, where I use the C code with the equivalent as mjs JavaScript code, and the motivation here is that I hope to be able to avoid needing to update as mjs code when I change the C code. I've really learned the lesson it's a classic lesson that a sort of a badly implemented compiler done with string substitution is not a good idea. 140 lines of replacements end up being required to handle all the op codes I have. These op codes are there's 150 lines of them so it's not much of a win there are some additional op codes that are added to support the efficiency of bringing more of the system inside so it is a net win in total, but not by much of a margin and so probably this is something that I should revisit probably would be worth just maintaining to two separate descriptions of the op codes that are that are do a proper compiler or use or use inscription. Talking to the outside so on the web of course I have one more problem I've got my great interpreter it runs but now how do I talk to the outside world. Well, I have a list of I have only a single op code that I use for this, I called it call confusingly and call calls into JavaScript, passing in the fourth stack as a parameter, which lets JavaScript decide how to interpret this. And then I start out with a table of JavaScript objects that contain what I'll term system calls. And so the first of these is a thing called set eval, which takes a three, three values it takes the starting pointer of a string in the fourth memory space, a length of string, and then the index of a slot in this objects array and JavaScript that I want to populate with the result of eval in that piece of JavaScript. So this lets me take a piece of JavaScript code in a string and forth, hand it over to to JavaScript, and store it in this array. And when I make a call, I call into a particular index my system call number in this table and so this lets me from forth, define past strings into JavaScript to define the the remaining op codes. And so, for example, this is the implementation of key question mark where I have a JavaScript function that interacts with sort of the outside world and JavaScript API's to to cope with trying to check the input buffer, if there's a key. I have this little shortcut here for read line to modes of operation which I won't talk about at length but there's a way to run a JavaScript interpreter at the command line and I also support that. And so I'm able to create this this system call binding all in fourth code and and hook things up. And that's that I've done that for sort of terminal input and output and even a little bit of graphics as we'll see in a moment, and to use the interpreter. I'm one giant JavaScript file. If you want to embed the interpreter somewhere you can specify a div tag with a particular ID and it will inject the interpreter there if it doesn't find that tag it will just happily embedded at the bottom of the page. There are some caveats star slash mod as you'll see I'll show you in a second is a lie I have not implemented it properly. It's on my list of things to fix but I haven't done it yet. I'll talk about sec. I think I picked maybe 16 megabytes of memories the little large but it's a can value which is not ideal by use WebAssembly WebAssembly does support a dynamic key. The terminal is too slow and it's just because I haven't had time to optimize it I'm using the JavaScript that I'm using to update it is less than ideal. Because of floating point support there's actually a sixth core opcode that's required that they conversion to from a string to a floating point value. It's not strictly required if you were if you wanted to strip out the floating point support but it is required. It is used in the current system. Star slash mod is is implemented with this piece of JavaScript code right now. And this is not right because what it's doing is it's, you know, star slash mod right should take a times be and then divide by C and return the, the division results in the modular result. It's supposed to extend it to double word size, but unfortunately there is, although there is a, there is actually a brand new 64 bit, actually arbitrary precision type in JavaScript. I'm not confident in the browser support to make use of it here I'll actually have to check up on that before I fix this problem so for now, I'm converting everything to 64 bit floating point and doing the division and so you can end up with some in precision. So, the right way to fix this is either to use that arbitrary precision type, or I will probably need to eventually, or an alternative is you can you can sort of do the bit shifts and tricks to do divide correctly. There are many happy things of this implementation one is that I was able to quickly throw in a little bit of graphics not quite as much. And I hope to be able to run the heart game I demoed many times back but I'm not quite there yet, but I got some of the pieces. And the other great thing is that this implementation is likely to be reasonably fast and be able to do some interesting graphics because the memory space is something that you can pass over to WebGL and do fun things. So with that I'm going to switch over and do a quick demo. Maybe you can find this if you go to the easiest way to get there is just e4th.appspot.com. And if you click to the right on web, it will bring up the web version of the system. I think it has the same underlying mechanisms as on the other platforms. I'll do vlist list at the dictionary here. So all the plumbing is there so if I if I do, if I define a word, let's say I do test, and I'll do for I print next turn, I can print things out. I can do see on that word, and it will attempt to decompile it. And the same is true of all the words in the system that are defined in higher level words. So for example, I've got this word fill 32, which is part of the system and you can decode and see the inner op codes for it. In addition, there's there's a little bit of support for graphics. I took a little inspiration from from the Apple to Apple to and have a word set that GR will bring you into a mode where there's graphics above and you continue to have the terminal down below. So you can set the color. Let's say we do a red, red is in the, the value color, and then I can draw a box. The coordinate system by default starts at 1000 by 1000. You can use the words to redefine it which I'll never to document on the website at some point soon. But you can, for example, draw a box. And there's, you can, you can disable the visibility of the show text. You can hide the text and get to sort of a full graphic screen. You can get the scrolling on the side there to go away. Actually here. Well, that page. I'm going to re enable. See what I'm typing. One show. And you can go back to text mode with just the word text. The more right now box is the only word that draws anything. This this fourth has vocabularies and the works like, like the others. If you go into the internals vocabulary, you can see some of the stuffing. So for example, there's that s float word that we were talking about earlier. You can examine all sort of all of the inside. So if you examine, you can even see the insides of C. And if you want to see, see the insides of the words that are in there, you can go examine them. We can very briefly look at the, if you go into the JavaScript console you can see the source code you can see the source code by the way on GitHub as well but to give you an idea the web page here contains very little to bootstrap things. It's actually all plumbing for the menu at the top, but to actually embed it is just these two lines at the bottom. The interpreter itself lives down here. And as you see it, it starts out with a few constants and then the very first thing is actually just this gigantic fourth string, which contains the, all of the bootstrapping code some of this of course looks like JavaScript because it's JavaScript and you'll notice that it's actually embedded in this multi line string that I've defined in fourth to be passed over so sort of mixing JavaScript and, and forth, and then way down here you get to the point where you actually see the insides and the. The result of having compiled the C, and then converted and so there is a or sorry compiled in C extracted the set of op codes. And so things are a little bit more splayed out than they are in the C version. And there's a few helper words that are one line macros that are multi line in fourth but you'll see that, you know, you've got words like create here, and there is there are some, there's here's parse, here's convert which is that s convert and so on. And then, most of the bottom of this is actually just a table to build up the set of words, and, and then some initialization code. I know and here's the here's the op codes splayed out and as mjs in a gigantic switch state. In any event that there it is. Check it out I'll be trying to bring it up to parody and support things like color and the terminal and stuff like that. In future version of revisions. Are there any questions. Very cool. Check it out. There I was operating in zombie mode. The past three or four days unable to get the agenda posted. When, fortuitously, a talk appeared in the queue as if by magic. Indirect credit code profiler. So, how long do you estimate your talk to the last. I think last time it took me half an hour. I expect to be a little bit faster this time. Okay, if you can get the ball across the plate in 20 minutes that will work out nicely. What we're going to do is bump the doctor takes stuff you all have access to it on our YouTube channel. Does anybody not know where the YouTube channel that cares where the YouTube channel is. All right, that's good. Good reaction. Okay, so on with the show.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 3.0, "text": " In the interest of time.", "tokens": [50364, 682, 264, 1179, 295, 565, 13, 50514], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 1, "seek": 0, "start": 3.0, "end": 5.0, "text": " So,", "tokens": [50514, 407, 11, 50614], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 2, "seek": 0, "start": 5.0, "end": 9.0, "text": " Brett introduce yourself and on with the show.", "tokens": [50614, 29447, 5366, 1803, 293, 322, 365, 264, 855, 13, 50814], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 3, "seek": 0, "start": 9.0, "end": 11.0, "text": " Already.", "tokens": [50814, 23741, 13, 50914], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 4, "seek": 0, "start": 11.0, "end": 15.0, "text": " Is that show up for folks.", "tokens": [50914, 1119, 300, 855, 493, 337, 4024, 13, 51114], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 5, "seek": 0, "start": 15.0, "end": 17.0, "text": " I'm seeing nothing.", "tokens": [51114, 286, 478, 2577, 1825, 13, 51214], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 6, "seek": 0, "start": 17.0, "end": 19.0, "text": " No, no dissent. All right.", "tokens": [51214, 883, 11, 572, 7802, 317, 13, 1057, 558, 13, 51314], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 7, "seek": 0, "start": 19.0, "end": 24.0, "text": " Today, I'm going to talk about micro e fourth on the web.", "tokens": [51314, 2692, 11, 286, 478, 516, 281, 751, 466, 4532, 308, 6409, 322, 264, 3670, 13, 51564], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 8, "seek": 0, "start": 24.0, "end": 29.0, "text": " I'm actually going to adjust.", "tokens": [51564, 286, 478, 767, 516, 281, 4369, 13, 51814], "temperature": 0.0, "avg_logprob": -0.25916108852479514, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.055750880390405655}, {"id": 9, "seek": 2900, "start": 29.0, "end": 34.0, "text": " I can see my slides are better yet.", "tokens": [50364, 286, 393, 536, 452, 9788, 366, 1101, 1939, 13, 50614], "temperature": 0.0, "avg_logprob": -0.3062236075307809, "compression_ratio": 1.2125984251968505, "no_speech_prob": 0.0013453286373987794}, {"id": 10, "seek": 2900, "start": 34.0, "end": 38.0, "text": " Hide that entire.", "tokens": [50614, 35118, 300, 2302, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3062236075307809, "compression_ratio": 1.2125984251968505, "no_speech_prob": 0.0013453286373987794}, {"id": 11, "seek": 2900, "start": 38.0, "end": 41.0, "text": " All right.", "tokens": [50814, 1057, 558, 13, 50964], "temperature": 0.0, "avg_logprob": -0.3062236075307809, "compression_ratio": 1.2125984251968505, "no_speech_prob": 0.0013453286373987794}, {"id": 12, "seek": 2900, "start": 41.0, "end": 48.0, "text": " So, micro e fourth is related to ESP 32 fourth,", "tokens": [50964, 407, 11, 4532, 308, 6409, 307, 4077, 281, 12564, 47, 8858, 6409, 11, 51314], "temperature": 0.0, "avg_logprob": -0.3062236075307809, "compression_ratio": 1.2125984251968505, "no_speech_prob": 0.0013453286373987794}, {"id": 13, "seek": 2900, "start": 48.0, "end": 51.0, "text": " which you've heard me talk a bunch about.", "tokens": [51314, 597, 291, 600, 2198, 385, 751, 257, 3840, 466, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3062236075307809, "compression_ratio": 1.2125984251968505, "no_speech_prob": 0.0013453286373987794}, {"id": 14, "seek": 5100, "start": 51.0, "end": 56.0, "text": " It's a version of it's a, they're really one in the same built from", "tokens": [50364, 467, 311, 257, 3037, 295, 309, 311, 257, 11, 436, 434, 534, 472, 294, 264, 912, 3094, 490, 50614], "temperature": 0.0, "avg_logprob": -0.21751527687937944, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.011501610279083252}, {"id": 15, "seek": 5100, "start": 56.0, "end": 62.0, "text": " the same source base ESP 32 fourth is the variant that targets ESP 32.", "tokens": [50614, 264, 912, 4009, 3096, 12564, 47, 8858, 6409, 307, 264, 17501, 300, 12911, 12564, 47, 8858, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21751527687937944, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.011501610279083252}, {"id": 16, "seek": 5100, "start": 62.0, "end": 68.0, "text": " We branded it that way to make it clear to folks, but.", "tokens": [50914, 492, 38510, 309, 300, 636, 281, 652, 309, 1850, 281, 4024, 11, 457, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21751527687937944, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.011501610279083252}, {"id": 17, "seek": 5100, "start": 68.0, "end": 73.0, "text": " It's a, it's an e fourth with a minimal amount of non fourth code in it,", "tokens": [51214, 467, 311, 257, 11, 309, 311, 364, 308, 6409, 365, 257, 13206, 2372, 295, 2107, 6409, 3089, 294, 309, 11, 51464], "temperature": 0.0, "avg_logprob": -0.21751527687937944, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.011501610279083252}, {"id": 18, "seek": 5100, "start": 73.0, "end": 78.0, "text": " which is a weird thing to say for a fourth that's created in C.", "tokens": [51464, 597, 307, 257, 3657, 551, 281, 584, 337, 257, 6409, 300, 311, 2942, 294, 383, 13, 51714], "temperature": 0.0, "avg_logprob": -0.21751527687937944, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.011501610279083252}, {"id": 19, "seek": 7800, "start": 78.0, "end": 83.0, "text": " It tries to have minimal redundancy so that you don't end up having to", "tokens": [50364, 467, 9898, 281, 362, 13206, 27830, 6717, 370, 300, 291, 500, 380, 917, 493, 1419, 281, 50614], "temperature": 0.0, "avg_logprob": -0.1464337424228066, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0035925174597650766}, {"id": 20, "seek": 7800, "start": 83.0, "end": 89.0, "text": " describe an op code once in its code and another time in some table somewhere.", "tokens": [50614, 6786, 364, 999, 3089, 1564, 294, 1080, 3089, 293, 1071, 565, 294, 512, 3199, 4079, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1464337424228066, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0035925174597650766}, {"id": 21, "seek": 7800, "start": 89.0, "end": 95.0, "text": " It tries to make it possible to add one line of code to add an op code.", "tokens": [50914, 467, 9898, 281, 652, 309, 1944, 281, 909, 472, 1622, 295, 3089, 281, 909, 364, 999, 3089, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1464337424228066, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0035925174597650766}, {"id": 22, "seek": 7800, "start": 95.0, "end": 97.0, "text": " To the system.", "tokens": [51214, 1407, 264, 1185, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1464337424228066, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0035925174597650766}, {"id": 23, "seek": 7800, "start": 97.0, "end": 102.0, "text": " The kernel is compiled from inline fourth text.", "tokens": [51314, 440, 28256, 307, 36548, 490, 294, 1889, 6409, 2487, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1464337424228066, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0035925174597650766}, {"id": 24, "seek": 10200, "start": 102.0, "end": 107.0, "text": " So it start up, it does the sort of inefficient thing of booting up the system.", "tokens": [50364, 407, 309, 722, 493, 11, 309, 775, 264, 1333, 295, 43495, 551, 295, 11450, 278, 493, 264, 1185, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15454719232958417, "compression_ratio": 1.56, "no_speech_prob": 0.003322590608149767}, {"id": 25, "seek": 10200, "start": 107.0, "end": 112.0, "text": " From fourth text, but it does this in service of the goal of having as little", "tokens": [50614, 3358, 6409, 2487, 11, 457, 309, 775, 341, 294, 2643, 295, 264, 3387, 295, 1419, 382, 707, 50864], "temperature": 0.0, "avg_logprob": -0.15454719232958417, "compression_ratio": 1.56, "no_speech_prob": 0.003322590608149767}, {"id": 26, "seek": 10200, "start": 112.0, "end": 115.0, "text": " non fourth as possible in the system.", "tokens": [50864, 2107, 6409, 382, 1944, 294, 264, 1185, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15454719232958417, "compression_ratio": 1.56, "no_speech_prob": 0.003322590608149767}, {"id": 27, "seek": 10200, "start": 115.0, "end": 123.0, "text": " And there's support for Windows Linux ESP 32 and finally after a long delay the web", "tokens": [51014, 400, 456, 311, 1406, 337, 8591, 18734, 12564, 47, 8858, 293, 2721, 934, 257, 938, 8577, 264, 3670, 51414], "temperature": 0.0, "avg_logprob": -0.15454719232958417, "compression_ratio": 1.56, "no_speech_prob": 0.003322590608149767}, {"id": 28, "seek": 10200, "start": 123.0, "end": 129.0, "text": " originally when I had started working on this particular fourth kernel.", "tokens": [51414, 7993, 562, 286, 632, 1409, 1364, 322, 341, 1729, 6409, 28256, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15454719232958417, "compression_ratio": 1.56, "no_speech_prob": 0.003322590608149767}, {"id": 29, "seek": 12900, "start": 129.0, "end": 134.0, "text": " I had intended to have web support and a number of things got in the way,", "tokens": [50364, 286, 632, 10226, 281, 362, 3670, 1406, 293, 257, 1230, 295, 721, 658, 294, 264, 636, 11, 50614], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 30, "seek": 12900, "start": 134.0, "end": 139.0, "text": " not least of which is that I think that trying to do all those things in one", "tokens": [50614, 406, 1935, 295, 597, 307, 300, 286, 519, 300, 1382, 281, 360, 439, 729, 721, 294, 472, 50864], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 31, "seek": 12900, "start": 139.0, "end": 142.0, "text": " code base may not have been the best choice.", "tokens": [50864, 3089, 3096, 815, 406, 362, 668, 264, 1151, 3922, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 32, "seek": 12900, "start": 142.0, "end": 146.0, "text": " But I'll talk about that as we go through it.", "tokens": [51014, 583, 286, 603, 751, 466, 300, 382, 321, 352, 807, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 33, "seek": 12900, "start": 146.0, "end": 148.0, "text": " Why the web.", "tokens": [51214, 1545, 264, 3670, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 34, "seek": 12900, "start": 148.0, "end": 151.0, "text": " The web is portable and powerful.", "tokens": [51314, 440, 3670, 307, 21800, 293, 4005, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 35, "seek": 12900, "start": 151.0, "end": 157.0, "text": " It offers a rich set of API's that let you do all sorts of things from", "tokens": [51464, 467, 7736, 257, 4593, 992, 295, 9362, 311, 300, 718, 291, 360, 439, 7527, 295, 721, 490, 51764], "temperature": 0.0, "avg_logprob": -0.12081991195678711, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.004466426093131304}, {"id": 36, "seek": 15700, "start": 157.0, "end": 163.0, "text": " access, the graphics of your device to local files.", "tokens": [50364, 2105, 11, 264, 11837, 295, 428, 4302, 281, 2654, 7098, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15722881479466216, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.002629508264362812}, {"id": 37, "seek": 15700, "start": 163.0, "end": 170.0, "text": " If there are API's for local files, there are API's for even serial access now.", "tokens": [50664, 759, 456, 366, 9362, 311, 337, 2654, 7098, 11, 456, 366, 9362, 311, 337, 754, 17436, 2105, 586, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15722881479466216, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.002629508264362812}, {"id": 38, "seek": 15700, "start": 170.0, "end": 173.0, "text": " So you can do quite a lot on the web.", "tokens": [51014, 407, 291, 393, 360, 1596, 257, 688, 322, 264, 3670, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15722881479466216, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.002629508264362812}, {"id": 39, "seek": 15700, "start": 173.0, "end": 176.0, "text": " It's also possible on the web to go fast.", "tokens": [51164, 467, 311, 611, 1944, 322, 264, 3670, 281, 352, 2370, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15722881479466216, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.002629508264362812}, {"id": 40, "seek": 15700, "start": 176.0, "end": 181.0, "text": " The days of JavaScript as sort of the only path to do a thing on the web are", "tokens": [51314, 440, 1708, 295, 15778, 382, 1333, 295, 264, 787, 3100, 281, 360, 257, 551, 322, 264, 3670, 366, 51564], "temperature": 0.0, "avg_logprob": -0.15722881479466216, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.002629508264362812}, {"id": 41, "seek": 15700, "start": 181.0, "end": 185.0, "text": " over and due to things like WebAssembly.", "tokens": [51564, 670, 293, 3462, 281, 721, 411, 9573, 10884, 19160, 13, 51764], "temperature": 0.0, "avg_logprob": -0.15722881479466216, "compression_ratio": 1.6287128712871286, "no_speech_prob": 0.002629508264362812}, {"id": 42, "seek": 18500, "start": 185.0, "end": 192.0, "text": " You can now in all the major browsers run very performant code.", "tokens": [50364, 509, 393, 586, 294, 439, 264, 2563, 36069, 1190, 588, 2042, 394, 3089, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16198834077811536, "compression_ratio": 1.4902912621359223, "no_speech_prob": 0.0078096347860991955}, {"id": 43, "seek": 18500, "start": 192.0, "end": 198.0, "text": " There was a precursor to WebAssembly called Asm.js, which I've made some use of in", "tokens": [50714, 821, 390, 257, 41736, 284, 281, 9573, 10884, 19160, 1219, 1018, 76, 13, 25530, 11, 597, 286, 600, 1027, 512, 764, 295, 294, 51014], "temperature": 0.0, "avg_logprob": -0.16198834077811536, "compression_ratio": 1.4902912621359223, "no_speech_prob": 0.0078096347860991955}, {"id": 44, "seek": 18500, "start": 198.0, "end": 208.0, "text": " this application which I'll talk about and has the virtue that in Chrome at", "tokens": [51014, 341, 3861, 597, 286, 603, 751, 466, 293, 575, 264, 20816, 300, 294, 15327, 412, 51514], "temperature": 0.0, "avg_logprob": -0.16198834077811536, "compression_ratio": 1.4902912621359223, "no_speech_prob": 0.0078096347860991955}, {"id": 45, "seek": 18500, "start": 208.0, "end": 213.0, "text": " least when you have Asm.js it actually will get converted underneath to WebAssembly.", "tokens": [51514, 1935, 562, 291, 362, 1018, 76, 13, 25530, 309, 767, 486, 483, 16424, 7223, 281, 9573, 10884, 19160, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16198834077811536, "compression_ratio": 1.4902912621359223, "no_speech_prob": 0.0078096347860991955}, {"id": 46, "seek": 21300, "start": 213.0, "end": 217.0, "text": " I know this because I happened to have been the one that implemented the", "tokens": [50364, 286, 458, 341, 570, 286, 2011, 281, 362, 668, 264, 472, 300, 12270, 264, 50564], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 47, "seek": 21300, "start": 217.0, "end": 221.0, "text": " version that lives in V8 now.", "tokens": [50564, 3037, 300, 2909, 294, 691, 23, 586, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 48, "seek": 21300, "start": 221.0, "end": 225.0, "text": " And it's similar but not exactly the same at least as I understand it in", "tokens": [50764, 400, 309, 311, 2531, 457, 406, 2293, 264, 912, 412, 1935, 382, 286, 1223, 309, 294, 50964], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 49, "seek": 21300, "start": 225.0, "end": 228.0, "text": " Firefox and some of the other browsers.", "tokens": [50964, 46613, 293, 512, 295, 264, 661, 36069, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 50, "seek": 21300, "start": 228.0, "end": 233.0, "text": " The other great thing about the web is that it's easy to show people things.", "tokens": [51114, 440, 661, 869, 551, 466, 264, 3670, 307, 300, 309, 311, 1858, 281, 855, 561, 721, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 51, "seek": 21300, "start": 233.0, "end": 237.0, "text": " I can hand out a URL and folks can go there.", "tokens": [51364, 286, 393, 1011, 484, 257, 12905, 293, 4024, 393, 352, 456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 52, "seek": 21300, "start": 237.0, "end": 241.0, "text": " And this relates to the second point, which is that people don't have to trust me.", "tokens": [51564, 400, 341, 16155, 281, 264, 1150, 935, 11, 597, 307, 300, 561, 500, 380, 362, 281, 3361, 385, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10073728561401367, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.0075692664831876755}, {"id": 53, "seek": 24100, "start": 241.0, "end": 249.0, "text": " If you download the version of Micro E4 for Windows, unfortunately you will", "tokens": [50364, 759, 291, 5484, 264, 3037, 295, 25642, 462, 19, 337, 8591, 11, 7015, 291, 486, 50764], "temperature": 0.0, "avg_logprob": -0.17563923667458928, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.017691858112812042}, {"id": 54, "seek": 24100, "start": 249.0, "end": 252.0, "text": " probably get some security alerts from running it.", "tokens": [50764, 1391, 483, 512, 3825, 28061, 490, 2614, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17563923667458928, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.017691858112812042}, {"id": 55, "seek": 24100, "start": 252.0, "end": 262.0, "text": " And this is because I have not signed the binaries on Windows and the antivirus", "tokens": [50914, 400, 341, 307, 570, 286, 362, 406, 8175, 264, 5171, 4889, 322, 8591, 293, 264, 2511, 592, 9619, 51414], "temperature": 0.0, "avg_logprob": -0.17563923667458928, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.017691858112812042}, {"id": 56, "seek": 24100, "start": 262.0, "end": 268.0, "text": " systems that are out there look at the small headers on a piece of fourth code", "tokens": [51414, 3652, 300, 366, 484, 456, 574, 412, 264, 1359, 45101, 322, 257, 2522, 295, 6409, 3089, 51714], "temperature": 0.0, "avg_logprob": -0.17563923667458928, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.017691858112812042}, {"id": 57, "seek": 26800, "start": 268.0, "end": 271.0, "text": " and think that this looks kind of questionable and the combination of a", "tokens": [50364, 293, 519, 300, 341, 1542, 733, 295, 37158, 293, 264, 6562, 295, 257, 50514], "temperature": 0.0, "avg_logprob": -0.1426508323006008, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014266228303313255}, {"id": 58, "seek": 26800, "start": 271.0, "end": 276.0, "text": " lack of a signature and all of that means that it will warn you about running it.", "tokens": [50514, 5011, 295, 257, 13397, 293, 439, 295, 300, 1355, 300, 309, 486, 12286, 291, 466, 2614, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1426508323006008, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014266228303313255}, {"id": 59, "seek": 26800, "start": 276.0, "end": 283.0, "text": " And unfortunately this is a problem that versions of Win32 fourth face as well.", "tokens": [50764, 400, 7015, 341, 307, 257, 1154, 300, 9606, 295, 10427, 11440, 6409, 1851, 382, 731, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1426508323006008, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014266228303313255}, {"id": 60, "seek": 26800, "start": 283.0, "end": 288.0, "text": " In comparison, the web I can just show you a URL and actually at the end of this", "tokens": [51114, 682, 9660, 11, 264, 3670, 286, 393, 445, 855, 291, 257, 12905, 293, 767, 412, 264, 917, 295, 341, 51364], "temperature": 0.0, "avg_logprob": -0.1426508323006008, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014266228303313255}, {"id": 61, "seek": 26800, "start": 288.0, "end": 293.0, "text": " presentation I'll encourage you all to check out what I put up.", "tokens": [51364, 5860, 286, 603, 5373, 291, 439, 281, 1520, 484, 437, 286, 829, 493, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1426508323006008, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014266228303313255}, {"id": 62, "seek": 29300, "start": 293.0, "end": 299.0, "text": " So the overall approach in Micro E4 is that I try to make each op code be", "tokens": [50364, 407, 264, 4787, 3109, 294, 25642, 462, 19, 307, 300, 286, 853, 281, 652, 1184, 999, 3089, 312, 50664], "temperature": 0.0, "avg_logprob": -0.12765836179926154, "compression_ratio": 1.513157894736842, "no_speech_prob": 0.008980996906757355}, {"id": 63, "seek": 29300, "start": 299.0, "end": 304.0, "text": " something that I can define in just one or two lines of C code.", "tokens": [50664, 746, 300, 286, 393, 6964, 294, 445, 472, 420, 732, 3876, 295, 383, 3089, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12765836179926154, "compression_ratio": 1.513157894736842, "no_speech_prob": 0.008980996906757355}, {"id": 64, "seek": 29300, "start": 304.0, "end": 308.0, "text": " And the goal is to have a reasonable list of op codes.", "tokens": [50914, 400, 264, 3387, 307, 281, 362, 257, 10585, 1329, 295, 999, 14211, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12765836179926154, "compression_ratio": 1.513157894736842, "no_speech_prob": 0.008980996906757355}, {"id": 65, "seek": 29300, "start": 308.0, "end": 313.0, "text": " Originally I kind of focused on the minimal set similar to classic E4, but", "tokens": [51114, 28696, 286, 733, 295, 5178, 322, 264, 13206, 992, 2531, 281, 7230, 462, 19, 11, 457, 51364], "temperature": 0.0, "avg_logprob": -0.12765836179926154, "compression_ratio": 1.513157894736842, "no_speech_prob": 0.008980996906757355}, {"id": 66, "seek": 29300, "start": 313.0, "end": 317.0, "text": " especially if you look at the current version, there's a number of additional", "tokens": [51364, 2318, 498, 291, 574, 412, 264, 2190, 3037, 11, 456, 311, 257, 1230, 295, 4497, 51564], "temperature": 0.0, "avg_logprob": -0.12765836179926154, "compression_ratio": 1.513157894736842, "no_speech_prob": 0.008980996906757355}, {"id": 67, "seek": 31700, "start": 317.0, "end": 319.0, "text": " op codes that have been added.", "tokens": [50364, 999, 14211, 300, 362, 668, 3869, 13, 50464], "temperature": 0.0, "avg_logprob": -0.093715180521426, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.08028297126293182}, {"id": 68, "seek": 31700, "start": 319.0, "end": 325.0, "text": " I've added as many as I have partially because on ESP32 this has the advantage", "tokens": [50464, 286, 600, 3869, 382, 867, 382, 286, 362, 18886, 570, 322, 12564, 47, 11440, 341, 575, 264, 5002, 50764], "temperature": 0.0, "avg_logprob": -0.093715180521426, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.08028297126293182}, {"id": 69, "seek": 31700, "start": 325.0, "end": 332.0, "text": " that op codes implemented in C end up taking less of the RAM of the system.", "tokens": [50764, 300, 999, 14211, 12270, 294, 383, 917, 493, 1940, 1570, 295, 264, 14561, 295, 264, 1185, 13, 51114], "temperature": 0.0, "avg_logprob": -0.093715180521426, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.08028297126293182}, {"id": 70, "seek": 31700, "start": 332.0, "end": 337.0, "text": " They can end up in flash memory and so more memory becomes available for the", "tokens": [51114, 814, 393, 917, 493, 294, 7319, 4675, 293, 370, 544, 4675, 3643, 2435, 337, 264, 51364], "temperature": 0.0, "avg_logprob": -0.093715180521426, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.08028297126293182}, {"id": 71, "seek": 31700, "start": 337.0, "end": 339.0, "text": " running application.", "tokens": [51364, 2614, 3861, 13, 51464], "temperature": 0.0, "avg_logprob": -0.093715180521426, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.08028297126293182}, {"id": 72, "seek": 31700, "start": 339.0, "end": 344.0, "text": " After you define those op codes, you're able to use a very small set of system", "tokens": [51464, 2381, 291, 6964, 729, 999, 14211, 11, 291, 434, 1075, 281, 764, 257, 588, 1359, 992, 295, 1185, 51714], "temperature": 0.0, "avg_logprob": -0.093715180521426, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.08028297126293182}, {"id": 73, "seek": 34400, "start": 344.0, "end": 351.0, "text": " variables that sees in a structure.", "tokens": [50364, 9102, 300, 8194, 294, 257, 3877, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11848899794787895, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.001866925973445177}, {"id": 74, "seek": 34400, "start": 351.0, "end": 355.0, "text": " And those same variables are accessible from forth.", "tokens": [50714, 400, 729, 912, 9102, 366, 9515, 490, 5220, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11848899794787895, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.001866925973445177}, {"id": 75, "seek": 34400, "start": 355.0, "end": 360.0, "text": " And then the key idea is that there are five core op codes that are non-trivial,", "tokens": [50914, 400, 550, 264, 2141, 1558, 307, 300, 456, 366, 1732, 4965, 999, 14211, 300, 366, 2107, 12, 83, 470, 22640, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11848899794787895, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.001866925973445177}, {"id": 76, "seek": 34400, "start": 360.0, "end": 366.0, "text": " that don't fit in one or two lines, that are implemented in larger C functions.", "tokens": [51164, 300, 500, 380, 3318, 294, 472, 420, 732, 3876, 11, 300, 366, 12270, 294, 4833, 383, 6828, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11848899794787895, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.001866925973445177}, {"id": 77, "seek": 34400, "start": 366.0, "end": 372.0, "text": " These are op codes that could be built from the other op codes because the", "tokens": [51464, 1981, 366, 999, 14211, 300, 727, 312, 3094, 490, 264, 661, 999, 14211, 570, 264, 51764], "temperature": 0.0, "avg_logprob": -0.11848899794787895, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.001866925973445177}, {"id": 78, "seek": 37200, "start": 372.0, "end": 375.0, "text": " other op codes are sort of fully general.", "tokens": [50364, 661, 999, 14211, 366, 1333, 295, 4498, 2674, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08385254292005903, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.0021813372150063515}, {"id": 79, "seek": 37200, "start": 375.0, "end": 381.0, "text": " But they're done in high level C code because they allow the fun trick that", "tokens": [50514, 583, 436, 434, 1096, 294, 1090, 1496, 383, 3089, 570, 436, 2089, 264, 1019, 4282, 300, 50814], "temperature": 0.0, "avg_logprob": -0.08385254292005903, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.0021813372150063515}, {"id": 80, "seek": 37200, "start": 381.0, "end": 386.0, "text": " with those five, you have enough of the fourth system in place that you can", "tokens": [50814, 365, 729, 1732, 11, 291, 362, 1547, 295, 264, 6409, 1185, 294, 1081, 300, 291, 393, 51064], "temperature": 0.0, "avg_logprob": -0.08385254292005903, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.0021813372150063515}, {"id": 81, "seek": 37200, "start": 386.0, "end": 390.0, "text": " boot the rest of the system from there on out with forth.", "tokens": [51064, 11450, 264, 1472, 295, 264, 1185, 490, 456, 322, 484, 365, 5220, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08385254292005903, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.0021813372150063515}, {"id": 82, "seek": 37200, "start": 390.0, "end": 396.0, "text": " And so they're carefully chosen to be sort of the crucial building blocks to", "tokens": [51264, 400, 370, 436, 434, 7500, 8614, 281, 312, 1333, 295, 264, 11462, 2390, 8474, 281, 51564], "temperature": 0.0, "avg_logprob": -0.08385254292005903, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.0021813372150063515}, {"id": 83, "seek": 37200, "start": 396.0, "end": 398.0, "text": " have a full fourth system.", "tokens": [51564, 362, 257, 1577, 6409, 1185, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08385254292005903, "compression_ratio": 1.6824644549763033, "no_speech_prob": 0.0021813372150063515}, {"id": 84, "seek": 39800, "start": 399.0, "end": 404.0, "text": " And they also sidestep another problem, which is that if you have to assemble", "tokens": [50414, 400, 436, 611, 20822, 377, 595, 1071, 1154, 11, 597, 307, 300, 498, 291, 362, 281, 22364, 50664], "temperature": 0.0, "avg_logprob": -0.06716335250670652, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0006876204861328006}, {"id": 85, "seek": 39800, "start": 404.0, "end": 411.0, "text": " loops, you very quickly get into the problem that you now need an assembler", "tokens": [50664, 16121, 11, 291, 588, 2661, 483, 666, 264, 1154, 300, 291, 586, 643, 364, 8438, 1918, 51014], "temperature": 0.0, "avg_logprob": -0.06716335250670652, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0006876204861328006}, {"id": 86, "seek": 39800, "start": 411.0, "end": 413.0, "text": " to bootstrap that part of your system.", "tokens": [51014, 281, 11450, 372, 4007, 300, 644, 295, 428, 1185, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06716335250670652, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0006876204861328006}, {"id": 87, "seek": 39800, "start": 413.0, "end": 418.0, "text": " So they both serve the purpose of being crucial to executing fourth code,", "tokens": [51114, 407, 436, 1293, 4596, 264, 4334, 295, 885, 11462, 281, 32368, 6409, 3089, 11, 51364], "temperature": 0.0, "avg_logprob": -0.06716335250670652, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0006876204861328006}, {"id": 88, "seek": 39800, "start": 418.0, "end": 427.0, "text": " but also they avoid needing to have any kind of mechanism for assembly.", "tokens": [51364, 457, 611, 436, 5042, 18006, 281, 362, 604, 733, 295, 7513, 337, 12103, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06716335250670652, "compression_ratio": 1.6328502415458936, "no_speech_prob": 0.0006876204861328006}, {"id": 89, "seek": 42700, "start": 427.0, "end": 430.0, "text": " And then the rest of the system is in fourth.", "tokens": [50364, 400, 550, 264, 1472, 295, 264, 1185, 307, 294, 6409, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13760896351026453, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0015972087858244777}, {"id": 90, "seek": 42700, "start": 430.0, "end": 435.0, "text": " So there are some design choices that are in micro e-forth that are not fundamental", "tokens": [50514, 407, 456, 366, 512, 1715, 7994, 300, 366, 294, 4532, 308, 12, 44779, 300, 366, 406, 8088, 50764], "temperature": 0.0, "avg_logprob": -0.13760896351026453, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0015972087858244777}, {"id": 91, "seek": 42700, "start": 435.0, "end": 437.0, "text": " to that model.", "tokens": [50764, 281, 300, 2316, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13760896351026453, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0015972087858244777}, {"id": 92, "seek": 42700, "start": 437.0, "end": 441.0, "text": " It happens to be indirect threaded just because that's what I did at the time.", "tokens": [50864, 467, 2314, 281, 312, 19523, 47493, 445, 570, 300, 311, 437, 286, 630, 412, 264, 565, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13760896351026453, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0015972087858244777}, {"id": 93, "seek": 42700, "start": 441.0, "end": 449.0, "text": " Partially this is because it being a fourth implemented in C,", "tokens": [51064, 4100, 2270, 341, 307, 570, 309, 885, 257, 6409, 12270, 294, 383, 11, 51464], "temperature": 0.0, "avg_logprob": -0.13760896351026453, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0015972087858244777}, {"id": 94, "seek": 42700, "start": 449.0, "end": 455.0, "text": " it needs some type of op code that's explicitly stored and I found it more", "tokens": [51464, 309, 2203, 512, 2010, 295, 999, 3089, 300, 311, 20803, 12187, 293, 286, 1352, 309, 544, 51764], "temperature": 0.0, "avg_logprob": -0.13760896351026453, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0015972087858244777}, {"id": 95, "seek": 45500, "start": 455.0, "end": 457.0, "text": " important to have these live in a cell.", "tokens": [50364, 1021, 281, 362, 613, 1621, 294, 257, 2815, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1769313196982107, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.009119507856667042}, {"id": 96, "seek": 45500, "start": 457.0, "end": 461.0, "text": " I didn't want them to be direct threaded and live in line.", "tokens": [50464, 286, 994, 380, 528, 552, 281, 312, 2047, 47493, 293, 1621, 294, 1622, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1769313196982107, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.009119507856667042}, {"id": 97, "seek": 45500, "start": 461.0, "end": 467.0, "text": " There isn't really, there isn't a real architecture underneath when you're", "tokens": [50664, 821, 1943, 380, 534, 11, 456, 1943, 380, 257, 957, 9482, 7223, 562, 291, 434, 50964], "temperature": 0.0, "avg_logprob": -0.1769313196982107, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.009119507856667042}, {"id": 98, "seek": 45500, "start": 467.0, "end": 470.0, "text": " targeting C, you're targeting the sort of the C virtual machine.", "tokens": [50964, 17918, 383, 11, 291, 434, 17918, 264, 1333, 295, 264, 383, 6374, 3479, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1769313196982107, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.009119507856667042}, {"id": 99, "seek": 45500, "start": 470.0, "end": 474.0, "text": " And so it made sense to me to do an indirect threaded fourth.", "tokens": [51114, 400, 370, 309, 1027, 2020, 281, 385, 281, 360, 364, 19523, 47493, 6409, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1769313196982107, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.009119507856667042}, {"id": 100, "seek": 45500, "start": 474.0, "end": 479.0, "text": " Also it makes words like C and does a little bit simpler.", "tokens": [51314, 2743, 309, 1669, 2283, 411, 383, 293, 775, 257, 707, 857, 18587, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1769313196982107, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.009119507856667042}, {"id": 101, "seek": 47900, "start": 479.0, "end": 484.0, "text": " One other thing is that a truly direct threaded fourth would have challenges,", "tokens": [50364, 1485, 661, 551, 307, 300, 257, 4908, 2047, 47493, 6409, 576, 362, 4759, 11, 50614], "temperature": 0.0, "avg_logprob": -0.16176410597197863, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.008308414369821548}, {"id": 102, "seek": 47900, "start": 484.0, "end": 488.0, "text": " especially if I wanted to interoperate with machine code being done in C,", "tokens": [50614, 2318, 498, 286, 1415, 281, 728, 7192, 473, 365, 3479, 3089, 885, 1096, 294, 383, 11, 50814], "temperature": 0.0, "avg_logprob": -0.16176410597197863, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.008308414369821548}, {"id": 103, "seek": 47900, "start": 488.0, "end": 494.0, "text": " but an indirect threaded fourth in the Linux version and in the ESP 32 version", "tokens": [50814, 457, 364, 19523, 47493, 6409, 294, 264, 18734, 3037, 293, 294, 264, 12564, 47, 8858, 3037, 51114], "temperature": 0.0, "avg_logprob": -0.16176410597197863, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.008308414369821548}, {"id": 104, "seek": 47900, "start": 494.0, "end": 500.0, "text": " can use computer go-tos available in those compilers,", "tokens": [51114, 393, 764, 3820, 352, 12, 83, 329, 2435, 294, 729, 715, 388, 433, 11, 51414], "temperature": 0.0, "avg_logprob": -0.16176410597197863, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.008308414369821548}, {"id": 105, "seek": 47900, "start": 500.0, "end": 503.0, "text": " even though that isn't actually a standard C feature,", "tokens": [51414, 754, 1673, 300, 1943, 380, 767, 257, 3832, 383, 4111, 11, 51564], "temperature": 0.0, "avg_logprob": -0.16176410597197863, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.008308414369821548}, {"id": 106, "seek": 47900, "start": 503.0, "end": 506.0, "text": " it's present in the vast majority of C compilers.", "tokens": [51564, 309, 311, 1974, 294, 264, 8369, 6286, 295, 383, 715, 388, 433, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16176410597197863, "compression_ratio": 1.6166666666666667, "no_speech_prob": 0.008308414369821548}, {"id": 107, "seek": 50600, "start": 506.0, "end": 510.0, "text": " And that avoids there being any in the assembly language.", "tokens": [50364, 400, 300, 3641, 3742, 456, 885, 604, 294, 264, 12103, 2856, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 108, "seek": 50600, "start": 510.0, "end": 513.0, "text": " It's possible other models might go faster, especially on the web.", "tokens": [50564, 467, 311, 1944, 661, 5245, 1062, 352, 4663, 11, 2318, 322, 264, 3670, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 109, "seek": 50600, "start": 513.0, "end": 518.0, "text": " I've wondered if it's the right model, but that is what it is for now.", "tokens": [50714, 286, 600, 17055, 498, 309, 311, 264, 558, 2316, 11, 457, 300, 307, 437, 309, 307, 337, 586, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 110, "seek": 50600, "start": 518.0, "end": 520.0, "text": " It uses unlimited stacks.", "tokens": [50964, 467, 4960, 21950, 30792, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 111, "seek": 50600, "start": 520.0, "end": 525.0, "text": " This is a place where I deviate from some of Dr. Ting's choices.", "tokens": [51064, 639, 307, 257, 1081, 689, 286, 1905, 13024, 490, 512, 295, 2491, 13, 43196, 311, 7994, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 112, "seek": 50600, "start": 525.0, "end": 527.0, "text": " This is a mixed bag.", "tokens": [51314, 639, 307, 257, 7467, 3411, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 113, "seek": 50600, "start": 527.0, "end": 533.0, "text": " I did this because it was what was present in the originally fourth model.", "tokens": [51414, 286, 630, 341, 570, 309, 390, 437, 390, 1974, 294, 264, 7993, 6409, 2316, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10273478581355168, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.004900542087852955}, {"id": 114, "seek": 53300, "start": 533.0, "end": 539.0, "text": " One thing that it lacks, especially on ESP 32 that I sometimes regret,", "tokens": [50364, 1485, 551, 300, 309, 31132, 11, 2318, 322, 12564, 47, 8858, 300, 286, 2171, 10879, 11, 50664], "temperature": 0.0, "avg_logprob": -0.10133950276808305, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.003591214306652546}, {"id": 115, "seek": 53300, "start": 539.0, "end": 545.0, "text": " especially when the thing crashes is that by allowing the stack to be anywhere in memory,", "tokens": [50664, 2318, 562, 264, 551, 28642, 307, 300, 538, 8293, 264, 8630, 281, 312, 4992, 294, 4675, 11, 50964], "temperature": 0.0, "avg_logprob": -0.10133950276808305, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.003591214306652546}, {"id": 116, "seek": 53300, "start": 545.0, "end": 548.0, "text": " you can easily run them up with the stack.", "tokens": [50964, 291, 393, 3612, 1190, 552, 493, 365, 264, 8630, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10133950276808305, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.003591214306652546}, {"id": 117, "seek": 53300, "start": 548.0, "end": 554.0, "text": " Dr. Ting used a fun trick of using only a bite size pointer for the stacks", "tokens": [51114, 2491, 13, 43196, 1143, 257, 1019, 4282, 295, 1228, 787, 257, 7988, 2744, 23918, 337, 264, 30792, 51414], "temperature": 0.0, "avg_logprob": -0.10133950276808305, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.003591214306652546}, {"id": 118, "seek": 53300, "start": 554.0, "end": 561.0, "text": " and having them wrap around, which avoids the stack getting off the rails.", "tokens": [51414, 293, 1419, 552, 7019, 926, 11, 597, 3641, 3742, 264, 8630, 1242, 766, 264, 27649, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10133950276808305, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.003591214306652546}, {"id": 119, "seek": 56100, "start": 561.0, "end": 565.0, "text": " I support 32-bit floating point values.", "tokens": [50364, 286, 1406, 8858, 12, 5260, 12607, 935, 4190, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13781445676630194, "compression_ratio": 1.4644549763033174, "no_speech_prob": 0.0006984705687500536}, {"id": 120, "seek": 56100, "start": 565.0, "end": 570.0, "text": " And this is primarily because this was a feature that ESP 32,", "tokens": [50564, 400, 341, 307, 10029, 570, 341, 390, 257, 4111, 300, 12564, 47, 8858, 11, 50814], "temperature": 0.0, "avg_logprob": -0.13781445676630194, "compression_ratio": 1.4644549763033174, "no_speech_prob": 0.0006984705687500536}, {"id": 121, "seek": 56100, "start": 570.0, "end": 576.0, "text": " as I don't do 64-bit floats because ESP 32 doesn't have them in hardware.", "tokens": [50814, 382, 286, 500, 380, 360, 12145, 12, 5260, 37878, 570, 12564, 47, 8858, 1177, 380, 362, 552, 294, 8837, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13781445676630194, "compression_ratio": 1.4644549763033174, "no_speech_prob": 0.0006984705687500536}, {"id": 122, "seek": 56100, "start": 576.0, "end": 582.0, "text": " Also, it's with an eye to eventually I plan to get back to my deep learning in fourth talk", "tokens": [51114, 2743, 11, 309, 311, 365, 364, 3313, 281, 4728, 286, 1393, 281, 483, 646, 281, 452, 2452, 2539, 294, 6409, 751, 51414], "temperature": 0.0, "avg_logprob": -0.13781445676630194, "compression_ratio": 1.4644549763033174, "no_speech_prob": 0.0006984705687500536}, {"id": 123, "seek": 56100, "start": 582.0, "end": 586.0, "text": " and hope to make use of micro E4 for that.", "tokens": [51414, 293, 1454, 281, 652, 764, 295, 4532, 462, 19, 337, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13781445676630194, "compression_ratio": 1.4644549763033174, "no_speech_prob": 0.0006984705687500536}, {"id": 124, "seek": 58600, "start": 587.0, "end": 595.0, "text": " And it tends to use avoid counted strings just because it happened to fall out that way.", "tokens": [50414, 400, 309, 12258, 281, 764, 5042, 20150, 13985, 445, 570, 309, 2011, 281, 2100, 484, 300, 636, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 125, "seek": 58600, "start": 595.0, "end": 598.0, "text": " So how does the system build up?", "tokens": [50814, 407, 577, 775, 264, 1185, 1322, 493, 30, 50964], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 126, "seek": 58600, "start": 598.0, "end": 602.0, "text": " We'll go through the C version because as you'll see in a moment,", "tokens": [50964, 492, 603, 352, 807, 264, 383, 3037, 570, 382, 291, 603, 536, 294, 257, 1623, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 127, "seek": 58600, "start": 602.0, "end": 606.0, "text": " the web version is actually converted from that version.", "tokens": [51164, 264, 3670, 3037, 307, 767, 16424, 490, 300, 3037, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 128, "seek": 58600, "start": 606.0, "end": 609.0, "text": " There's a small set of registers that you have to decide.", "tokens": [51364, 821, 311, 257, 1359, 992, 295, 38351, 300, 291, 362, 281, 4536, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 129, "seek": 58600, "start": 609.0, "end": 612.0, "text": " And let's talk about what each of them are for.", "tokens": [51514, 400, 718, 311, 751, 466, 437, 1184, 295, 552, 366, 337, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 130, "seek": 58600, "start": 612.0, "end": 614.0, "text": " There's an instruction pointer.", "tokens": [51664, 821, 311, 364, 10951, 23918, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09010115536776456, "compression_ratio": 1.5916666666666666, "no_speech_prob": 0.0011332988506183028}, {"id": 131, "seek": 61400, "start": 614.0, "end": 616.0, "text": " There's a return stack pointer.", "tokens": [50364, 821, 311, 257, 2736, 8630, 23918, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13885188102722168, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.0004652759525924921}, {"id": 132, "seek": 61400, "start": 616.0, "end": 618.0, "text": " There's a data stack pointer.", "tokens": [50464, 821, 311, 257, 1412, 8630, 23918, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13885188102722168, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.0004652759525924921}, {"id": 133, "seek": 61400, "start": 618.0, "end": 625.0, "text": " And then I keep the top of stack in a register or virtual register as it is all through a layer of abstraction.", "tokens": [50564, 400, 550, 286, 1066, 264, 1192, 295, 8630, 294, 257, 7280, 420, 6374, 7280, 382, 309, 307, 439, 807, 257, 4583, 295, 37765, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13885188102722168, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.0004652759525924921}, {"id": 134, "seek": 61400, "start": 625.0, "end": 630.0, "text": " There's a work register that as Next operates,", "tokens": [50914, 821, 311, 257, 589, 7280, 300, 382, 3087, 22577, 11, 51164], "temperature": 0.0, "avg_logprob": -0.13885188102722168, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.0004652759525924921}, {"id": 135, "seek": 61400, "start": 630.0, "end": 640.0, "text": " it first loads the address pointed to by the instruction pointer into the work register.", "tokens": [51164, 309, 700, 12668, 264, 2985, 10932, 281, 538, 264, 10951, 23918, 666, 264, 589, 7280, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13885188102722168, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.0004652759525924921}, {"id": 136, "seek": 64000, "start": 640.0, "end": 645.0, "text": " And so that can be useful for gluing things together, for example, and does.", "tokens": [50364, 400, 370, 300, 393, 312, 4420, 337, 1563, 9635, 721, 1214, 11, 337, 1365, 11, 293, 775, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10058464787223122, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.001597219961695373}, {"id": 137, "seek": 64000, "start": 645.0, "end": 647.0, "text": " There's a floating stack pointer.", "tokens": [50614, 821, 311, 257, 12607, 8630, 23918, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10058464787223122, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.001597219961695373}, {"id": 138, "seek": 64000, "start": 647.0, "end": 651.0, "text": " And then I ended up needing a single template float value.", "tokens": [50714, 400, 550, 286, 4590, 493, 18006, 257, 2167, 12379, 15706, 2158, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10058464787223122, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.001597219961695373}, {"id": 139, "seek": 64000, "start": 651.0, "end": 661.0, "text": " I define and see a bunch of convenience operations that implement some of the core stack manipulation.", "tokens": [50914, 286, 6964, 293, 536, 257, 3840, 295, 19283, 7705, 300, 4445, 512, 295, 264, 4965, 8630, 26475, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10058464787223122, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.001597219961695373}, {"id": 140, "seek": 64000, "start": 661.0, "end": 668.0, "text": " These end up being reused in the op codes rather than sort of have less readable C code there.", "tokens": [51414, 1981, 917, 493, 885, 319, 4717, 294, 264, 999, 14211, 2831, 813, 1333, 295, 362, 1570, 49857, 383, 3089, 456, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10058464787223122, "compression_ratio": 1.6311111111111112, "no_speech_prob": 0.001597219961695373}, {"id": 141, "seek": 66800, "start": 668.0, "end": 682.0, "text": " Some of the variable length ones are more useful for ESP 32 forth where some of the bindings are for calling into libraries.", "tokens": [50364, 2188, 295, 264, 7006, 4641, 2306, 366, 544, 4420, 337, 12564, 47, 8858, 5220, 689, 512, 295, 264, 14786, 1109, 366, 337, 5141, 666, 15148, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20164974876072095, "compression_ratio": 1.3741007194244603, "no_speech_prob": 0.0027137682773172855}, {"id": 142, "seek": 66800, "start": 682.0, "end": 687.0, "text": " Make these useful. They're not actually that useful in the kernel.", "tokens": [51064, 4387, 613, 4420, 13, 814, 434, 406, 767, 300, 4420, 294, 264, 28256, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20164974876072095, "compression_ratio": 1.3741007194244603, "no_speech_prob": 0.0027137682773172855}, {"id": 143, "seek": 68700, "start": 687.0, "end": 694.0, "text": " The outer structure of the thing is really built, built around the idea that you want to run your fourth.", "tokens": [50364, 440, 10847, 3877, 295, 264, 551, 307, 534, 3094, 11, 3094, 926, 264, 1558, 300, 291, 528, 281, 1190, 428, 6409, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07619623343149821, "compression_ratio": 1.715846994535519, "no_speech_prob": 0.11262194812297821}, {"id": 144, "seek": 68700, "start": 694.0, "end": 707.0, "text": " And then you might actually need to yield back to the system on ESP 32, you need to yield back to the system because some of the libraries assume that you will return control back to the thing that called in.", "tokens": [50714, 400, 550, 291, 1062, 767, 643, 281, 11257, 646, 281, 264, 1185, 322, 12564, 47, 8858, 11, 291, 643, 281, 11257, 646, 281, 264, 1185, 570, 512, 295, 264, 15148, 6552, 300, 291, 486, 2736, 1969, 646, 281, 264, 551, 300, 1219, 294, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07619623343149821, "compression_ratio": 1.715846994535519, "no_speech_prob": 0.11262194812297821}, {"id": 145, "seek": 70700, "start": 707.0, "end": 716.0, "text": " And on the web, this is even more important because the web has a sort of an event loop that if you don't return to a number of things, get gummed up.", "tokens": [50364, 400, 322, 264, 3670, 11, 341, 307, 754, 544, 1021, 570, 264, 3670, 575, 257, 1333, 295, 364, 2280, 6367, 300, 498, 291, 500, 380, 2736, 281, 257, 1230, 295, 721, 11, 483, 19973, 1912, 493, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08712429878039238, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.2090742588043213}, {"id": 146, "seek": 70700, "start": 716.0, "end": 726.0, "text": " And so for that reason, it's important to have the fourth be structured such that you can have a yield word that parks the interpreter and yields back out to the system.", "tokens": [50814, 400, 370, 337, 300, 1778, 11, 309, 311, 1021, 281, 362, 264, 6409, 312, 18519, 1270, 300, 291, 393, 362, 257, 11257, 1349, 300, 16213, 264, 34132, 293, 32168, 646, 484, 281, 264, 1185, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08712429878039238, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.2090742588043213}, {"id": 147, "seek": 72600, "start": 726.0, "end": 745.0, "text": " So you everything when you enter is sitting on the return stack, you unpark things which work sort of like this, where you pull out the instruction pointer the stack pointer the floating pointer stack pointer and then unbox the top of the stack.", "tokens": [50364, 407, 291, 1203, 562, 291, 3242, 307, 3798, 322, 264, 2736, 8630, 11, 291, 517, 31239, 721, 597, 589, 1333, 295, 411, 341, 11, 689, 291, 2235, 484, 264, 10951, 23918, 264, 8630, 23918, 264, 12607, 23918, 8630, 23918, 293, 550, 20242, 264, 1192, 295, 264, 8630, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17917853135329026, "compression_ratio": 1.7253521126760563, "no_speech_prob": 0.5268762707710266}, {"id": 148, "seek": 74500, "start": 745.0, "end": 761.0, "text": " And then, if you need to yield, or when you do eventually need to yield you to you park everything so that you only have to hold on to that single return stack value to find your place back.", "tokens": [50364, 400, 550, 11, 498, 291, 643, 281, 11257, 11, 420, 562, 291, 360, 4728, 643, 281, 11257, 291, 281, 291, 3884, 1203, 370, 300, 291, 787, 362, 281, 1797, 322, 281, 300, 2167, 2736, 8630, 2158, 281, 915, 428, 1081, 646, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13431333458941916, "compression_ratio": 1.52, "no_speech_prob": 0.03356482461094856}, {"id": 149, "seek": 76100, "start": 761.0, "end": 777.0, "text": " To be able to define the op codes in a single line I use a, a C trick called an X macro. This lets you define a list of a list inside of a series of macro calls and to encode a table of information.", "tokens": [50364, 1407, 312, 1075, 281, 6964, 264, 999, 14211, 294, 257, 2167, 1622, 286, 764, 257, 11, 257, 383, 4282, 1219, 364, 1783, 18887, 13, 639, 6653, 291, 6964, 257, 1329, 295, 257, 1329, 1854, 295, 257, 2638, 295, 18887, 5498, 293, 281, 2058, 1429, 257, 3199, 295, 1589, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12265705612470519, "compression_ratio": 1.4452554744525548, "no_speech_prob": 0.056549232453107834}, {"id": 150, "seek": 77700, "start": 777.0, "end": 791.0, "text": " You can then reuse portions of the list in multiple different places so the way this works is that I can define an op code, all on one line by describing the string that that is its name and forth.", "tokens": [50364, 509, 393, 550, 26225, 25070, 295, 264, 1329, 294, 3866, 819, 3190, 370, 264, 636, 341, 1985, 307, 300, 286, 393, 6964, 364, 999, 3089, 11, 439, 322, 472, 1622, 538, 16141, 264, 6798, 300, 300, 307, 1080, 1315, 293, 5220, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08752196874373998, "compression_ratio": 1.6157635467980296, "no_speech_prob": 0.14019343256950378}, {"id": 151, "seek": 77700, "start": 791.0, "end": 802.0, "text": " I have to give it a C name because it's useful to be able to have it for defining lists of op code constants and things like that.", "tokens": [51064, 286, 362, 281, 976, 309, 257, 383, 1315, 570, 309, 311, 4420, 281, 312, 1075, 281, 362, 309, 337, 17827, 14511, 295, 999, 3089, 35870, 293, 721, 411, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08752196874373998, "compression_ratio": 1.6157635467980296, "no_speech_prob": 0.14019343256950378}, {"id": 152, "seek": 80200, "start": 802.0, "end": 814.0, "text": " I wish I didn't have to do this because it's actually redundant, but I have not found a way around that. And then there is a, and then there's the code in C that implements the op code.", "tokens": [50364, 286, 3172, 286, 994, 380, 362, 281, 360, 341, 570, 309, 311, 767, 40997, 11, 457, 286, 362, 406, 1352, 257, 636, 926, 300, 13, 400, 550, 456, 307, 257, 11, 293, 550, 456, 311, 264, 3089, 294, 383, 300, 704, 17988, 264, 999, 3089, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07776830673217773, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.02367222309112549}, {"id": 153, "seek": 81400, "start": 814.0, "end": 833.0, "text": " And I can use that a list of op codes described in that way, for example, a platform op code list for describe that way I can populate an enumerated type, holding out just the, the op code name and prefixing it with a name if I need to, or later in this is this", "tokens": [50364, 400, 286, 393, 764, 300, 257, 1329, 295, 999, 14211, 7619, 294, 300, 636, 11, 337, 1365, 11, 257, 3663, 999, 3089, 1329, 337, 6786, 300, 636, 286, 393, 1665, 5256, 364, 465, 15583, 770, 2010, 11, 5061, 484, 445, 264, 11, 264, 999, 3089, 1315, 293, 18417, 970, 278, 309, 365, 257, 1315, 498, 286, 643, 281, 11, 420, 1780, 294, 341, 307, 341, 51314], "temperature": 0.0, "avg_logprob": -0.16640790303548178, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.19901345670223236}, {"id": 154, "seek": 83300, "start": 833.0, "end": 851.0, "text": " op code is actually from the Windows version. When I want to switch and dispatch in the, in the core of the interpreter, I can just describe my next operation, and then have all the op codes be played out and I end up not needing to list them each in each of these places because", "tokens": [50364, 999, 3089, 307, 767, 490, 264, 8591, 3037, 13, 1133, 286, 528, 281, 3679, 293, 36729, 294, 264, 11, 294, 264, 4965, 295, 264, 34132, 11, 286, 393, 445, 6786, 452, 958, 6916, 11, 293, 550, 362, 439, 264, 999, 14211, 312, 3737, 484, 293, 286, 917, 493, 406, 18006, 281, 1329, 552, 1184, 294, 1184, 295, 613, 3190, 570, 51264], "temperature": 0.0, "avg_logprob": -0.14593857526779175, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.235966756939888}, {"id": 155, "seek": 85100, "start": 851.0, "end": 856.0, "text": " I don't have that shared list.", "tokens": [50364, 286, 500, 380, 362, 300, 5507, 1329, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1569202488118952, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.18674108386039734}, {"id": 156, "seek": 85100, "start": 856.0, "end": 869.0, "text": " I then for convenience, I'm able to define a set of alternate short names that let me define just the name and the code for a word.", "tokens": [50614, 286, 550, 337, 19283, 11, 286, 478, 1075, 281, 6964, 257, 992, 295, 18873, 2099, 5288, 300, 718, 385, 6964, 445, 264, 1315, 293, 264, 3089, 337, 257, 1349, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1569202488118952, "compression_ratio": 1.3846153846153846, "no_speech_prob": 0.18674108386039734}, {"id": 157, "seek": 86900, "start": 869.0, "end": 884.0, "text": " One of the biggest distinction is that some words are valid. See identifiers and others are not. And so, to make things a little more pithy, I'll use this why label to define words like and that happen to be valid.", "tokens": [50364, 1485, 295, 264, 3880, 16844, 307, 300, 512, 2283, 366, 7363, 13, 3008, 2473, 23463, 293, 2357, 366, 406, 13, 400, 370, 11, 281, 652, 721, 257, 707, 544, 280, 355, 88, 11, 286, 603, 764, 341, 983, 7645, 281, 6964, 2283, 411, 293, 300, 1051, 281, 312, 7363, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19636273384094238, "compression_ratio": 1.7181818181818183, "no_speech_prob": 0.7360695600509644}, {"id": 158, "seek": 86900, "start": 884.0, "end": 896.0, "text": " See identifiers, but for words like see at where it would not be a valid see identifier I have to make up some C name for it, and then I have the code in one line.", "tokens": [51114, 3008, 2473, 23463, 11, 457, 337, 2283, 411, 536, 412, 689, 309, 576, 406, 312, 257, 7363, 536, 45690, 286, 362, 281, 652, 493, 512, 383, 1315, 337, 309, 11, 293, 550, 286, 362, 264, 3089, 294, 472, 1622, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19636273384094238, "compression_ratio": 1.7181818181818183, "no_speech_prob": 0.7360695600509644}, {"id": 159, "seek": 89600, "start": 896.0, "end": 902.0, "text": " If I defined a dupe as a macro, it causes problems and so I end up having to treat dupe.", "tokens": [50364, 759, 286, 7642, 257, 1581, 494, 382, 257, 18887, 11, 309, 7700, 2740, 293, 370, 286, 917, 493, 1419, 281, 2387, 1581, 494, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15220348358154298, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.014939808286726475}, {"id": 160, "seek": 89600, "start": 902.0, "end": 913.0, "text": " Especially, but it's very, very handy to have a dupe macro if I were really clever I suppose I come up with a different name for the dupe macro and used in this way.", "tokens": [50664, 8545, 11, 457, 309, 311, 588, 11, 588, 13239, 281, 362, 257, 1581, 494, 18887, 498, 286, 645, 534, 13494, 286, 7297, 286, 808, 493, 365, 257, 819, 1315, 337, 264, 1581, 494, 18887, 293, 1143, 294, 341, 636, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15220348358154298, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.014939808286726475}, {"id": 161, "seek": 89600, "start": 913.0, "end": 922.0, "text": " But anyways, and in that way I'm able to describe all of the op codes that I need to define the core of the fourth.", "tokens": [51214, 583, 13448, 11, 293, 294, 300, 636, 286, 478, 1075, 281, 6786, 439, 295, 264, 999, 14211, 300, 286, 643, 281, 6964, 264, 4965, 295, 264, 6409, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15220348358154298, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.014939808286726475}, {"id": 162, "seek": 92200, "start": 922.0, "end": 936.0, "text": " And I do have some other variations. If you go looking at the source code for micro view forth. There's a little additional complexity I'm skipping over because of vocabularies I ended up originally it was just these x and y macros.", "tokens": [50364, 400, 286, 360, 362, 512, 661, 17840, 13, 759, 291, 352, 1237, 412, 264, 4009, 3089, 337, 4532, 1910, 5220, 13, 821, 311, 257, 707, 4497, 14024, 286, 478, 31533, 670, 570, 295, 2329, 455, 1040, 530, 286, 4590, 493, 7993, 309, 390, 445, 613, 2031, 293, 288, 7912, 2635, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14707029516046696, "compression_ratio": 1.3892215568862276, "no_speech_prob": 0.03205432370305061}, {"id": 163, "seek": 93600, "start": 936.0, "end": 955.0, "text": " But when I, and I implemented vocabularies purely in high level for as I got, got along in ESP 32 forth it became useful to have more of the vocabulary mechanism live in the C code and so there's.", "tokens": [50364, 583, 562, 286, 11, 293, 286, 12270, 2329, 455, 1040, 530, 17491, 294, 1090, 1496, 337, 382, 286, 658, 11, 658, 2051, 294, 12564, 47, 8858, 5220, 309, 3062, 4420, 281, 362, 544, 295, 264, 19864, 7513, 1621, 294, 264, 383, 3089, 293, 370, 456, 311, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19093797721114814, "compression_ratio": 1.3243243243243243, "no_speech_prob": 0.1599123328924179}, {"id": 164, "seek": 95500, "start": 955.0, "end": 966.0, "text": " But I transitioned some of that into the C code because it was convenient to very sorry rather it more efficient for ESP 33 forth more of it ends up in flash memory.", "tokens": [50364, 583, 286, 47346, 512, 295, 300, 666, 264, 383, 3089, 570, 309, 390, 10851, 281, 588, 2597, 2831, 309, 544, 7148, 337, 12564, 47, 11816, 5220, 544, 295, 309, 5314, 493, 294, 7319, 4675, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1764185309410095, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.10358691215515137}, {"id": 165, "seek": 95500, "start": 966.0, "end": 971.0, "text": " Anyways, once you've defined your op codes.", "tokens": [50914, 15585, 11, 1564, 291, 600, 7642, 428, 999, 14211, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1764185309410095, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.10358691215515137}, {"id": 166, "seek": 95500, "start": 971.0, "end": 980.0, "text": " All you need to do forth is is is this core loop you your quit is just a forever loop that evaluates a single word.", "tokens": [51164, 1057, 291, 643, 281, 360, 5220, 307, 307, 307, 341, 4965, 6367, 291, 428, 10366, 307, 445, 257, 5680, 6367, 300, 6133, 1024, 257, 2167, 1349, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1764185309410095, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.10358691215515137}, {"id": 167, "seek": 98000, "start": 980.0, "end": 989.0, "text": " And now, of course, the challenge is how do you define that evaluate one operation so here are those five magic words I was talking about.", "tokens": [50364, 400, 586, 11, 295, 1164, 11, 264, 3430, 307, 577, 360, 291, 6964, 300, 13059, 472, 6916, 370, 510, 366, 729, 1732, 5585, 2283, 286, 390, 1417, 466, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10559735474763093, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02158845029771328}, {"id": 168, "seek": 98000, "start": 989.0, "end": 1003.0, "text": " They have a dependency each of them on some of the system variables, and so that on the right or the system variables on the left of the, the five magic words the first of these is a word to parse a number.", "tokens": [50814, 814, 362, 257, 33621, 1184, 295, 552, 322, 512, 295, 264, 1185, 9102, 11, 293, 370, 300, 322, 264, 558, 420, 264, 1185, 9102, 322, 264, 1411, 295, 264, 11, 264, 1732, 5585, 2283, 264, 700, 295, 613, 307, 257, 1349, 281, 48377, 257, 1230, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10559735474763093, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02158845029771328}, {"id": 169, "seek": 100300, "start": 1003.0, "end": 1011.0, "text": " And it takes a string and attempts to parse it into a legitimate number for that it needs to know the base.", "tokens": [50364, 400, 309, 2516, 257, 6798, 293, 15257, 281, 48377, 309, 666, 257, 17956, 1230, 337, 300, 309, 2203, 281, 458, 264, 3096, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15626497737696912, "compression_ratio": 1.4825581395348837, "no_speech_prob": 0.21174472570419312}, {"id": 170, "seek": 100300, "start": 1011.0, "end": 1022.0, "text": " This is, as you'll see in a moment relatively straightforward to do in high level C code, and avoids having to describe that using using forth out.", "tokens": [50764, 639, 307, 11, 382, 291, 603, 536, 294, 257, 1623, 7226, 15325, 281, 360, 294, 1090, 1496, 383, 3089, 11, 293, 3641, 3742, 1419, 281, 6786, 300, 1228, 1228, 5220, 484, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15626497737696912, "compression_ratio": 1.4825581395348837, "no_speech_prob": 0.21174472570419312}, {"id": 171, "seek": 102200, "start": 1023.0, "end": 1034.0, "text": " parses and finds boundaries to the next word and updates the the end pointer and so on reading from the translation input block.", "tokens": [50414, 21156, 279, 293, 10704, 13180, 281, 264, 958, 1349, 293, 9205, 264, 264, 917, 23918, 293, 370, 322, 3760, 490, 264, 12853, 4846, 3461, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13560684391709624, "compression_ratio": 1.558011049723757, "no_speech_prob": 0.27158883213996887}, {"id": 172, "seek": 102200, "start": 1034.0, "end": 1044.0, "text": " Creation of a word is a little bit more complex than one line line just because you have to hook things into place and build up the dictionary structure.", "tokens": [50964, 42874, 295, 257, 1349, 307, 257, 707, 857, 544, 3997, 813, 472, 1622, 1622, 445, 570, 291, 362, 281, 6328, 721, 666, 1081, 293, 1322, 493, 264, 25890, 3877, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13560684391709624, "compression_ratio": 1.558011049723757, "no_speech_prob": 0.27158883213996887}, {"id": 173, "seek": 104400, "start": 1044.0, "end": 1060.0, "text": " And then finding a word similarly, because it involves string comparisons and so on, it's, it's nice to have that as a high level word, and then those four words are used in to implement the value eight one, based on the current state.", "tokens": [50364, 400, 550, 5006, 257, 1349, 14138, 11, 570, 309, 11626, 6798, 33157, 293, 370, 322, 11, 309, 311, 11, 309, 311, 1481, 281, 362, 300, 382, 257, 1090, 1496, 1349, 11, 293, 550, 729, 1451, 2283, 366, 1143, 294, 281, 4445, 264, 2158, 3180, 472, 11, 2361, 322, 264, 2190, 1785, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12124241249901908, "compression_ratio": 1.5064102564102564, "no_speech_prob": 0.009408588521182537}, {"id": 174, "seek": 106000, "start": 1061.0, "end": 1081.0, "text": " And if a word is not found, they call into back into a deferred word that's stored in in not found, and that initially is drop, but later on turns into throw, which, which lets me avoid needing to have throw there, and the system is booting.", "tokens": [50414, 400, 498, 257, 1349, 307, 406, 1352, 11, 436, 818, 666, 646, 666, 257, 25704, 986, 1349, 300, 311, 12187, 294, 294, 406, 1352, 11, 293, 300, 9105, 307, 3270, 11, 457, 1780, 322, 4523, 666, 3507, 11, 597, 11, 597, 6653, 385, 5042, 18006, 281, 362, 3507, 456, 11, 293, 264, 1185, 307, 11450, 278, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1481190040463307, "compression_ratio": 1.5649350649350648, "no_speech_prob": 0.031588584184646606}, {"id": 175, "seek": 108100, "start": 1081.0, "end": 1093.0, "text": " So I'm not going to show each of them but I'll show the parse word and the parse word relies on this little separate function which could be folded in but a word for matching.", "tokens": [50364, 407, 286, 478, 406, 516, 281, 855, 1184, 295, 552, 457, 286, 603, 855, 264, 48377, 1349, 293, 264, 48377, 1349, 30910, 322, 341, 707, 4994, 2445, 597, 727, 312, 23940, 294, 457, 257, 1349, 337, 14324, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10771760387697081, "compression_ratio": 1.5824175824175823, "no_speech_prob": 0.0035921058151870966}, {"id": 176, "seek": 108100, "start": 1093.0, "end": 1105.0, "text": " It's deciding if two characters are a match, and then it walks down and finds the boundary to for the next word.", "tokens": [50964, 467, 311, 17990, 498, 732, 4342, 366, 257, 2995, 11, 293, 550, 309, 12896, 760, 293, 10704, 264, 12866, 281, 337, 264, 958, 1349, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10771760387697081, "compression_ratio": 1.5824175824175823, "no_speech_prob": 0.0035921058151870966}, {"id": 177, "seek": 110500, "start": 1105.0, "end": 1114.0, "text": " Once you have those five and that evaluation loop which please check out details in the source space, you can then boot from a string.", "tokens": [50364, 3443, 291, 362, 729, 1732, 293, 300, 13344, 6367, 597, 1767, 1520, 484, 4365, 294, 264, 4009, 1901, 11, 291, 393, 550, 11450, 490, 257, 6798, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16252522940164085, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.031115133315324783}, {"id": 178, "seek": 110500, "start": 1114.0, "end": 1131.0, "text": " You can end up, you can set the trend that the the tip to point to a gigantic C string that contains all of your fourth bootstrapping code and everything else gets it's built up from there the first thing that gets defined as comments because initially comments aren't supported and you need", "tokens": [50814, 509, 393, 917, 493, 11, 291, 393, 992, 264, 6028, 300, 264, 264, 4125, 281, 935, 281, 257, 26800, 383, 6798, 300, 8306, 439, 295, 428, 6409, 11450, 19639, 3759, 3089, 293, 1203, 1646, 2170, 309, 311, 3094, 493, 490, 456, 264, 700, 551, 300, 2170, 7642, 382, 3053, 570, 9105, 3053, 3212, 380, 8104, 293, 291, 643, 51664], "temperature": 0.0, "avg_logprob": -0.16252522940164085, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.031115133315324783}, {"id": 179, "seek": 113100, "start": 1131.0, "end": 1135.0, "text": " comments to be able to use comments and the rest of the code.", "tokens": [50364, 3053, 281, 312, 1075, 281, 764, 3053, 293, 264, 1472, 295, 264, 3089, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16180946145738875, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.07350550591945648}, {"id": 180, "seek": 113100, "start": 1135.0, "end": 1145.0, "text": " And I won't belabor that but it's a it's a there's a fascinating sort of ordering in which you can you can do things to bring the world up. Well, how do we bring this to the web.", "tokens": [50564, 400, 286, 1582, 380, 989, 3816, 300, 457, 309, 311, 257, 309, 311, 257, 456, 311, 257, 10343, 1333, 295, 21739, 294, 597, 291, 393, 291, 393, 360, 721, 281, 1565, 264, 1002, 493, 13, 1042, 11, 577, 360, 321, 1565, 341, 281, 264, 3670, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16180946145738875, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.07350550591945648}, {"id": 181, "seek": 113100, "start": 1145.0, "end": 1160.0, "text": " Well, the simple answer is I convert this to asmjs now there there is a set of tooling that exists to do this a great tool by a person I actually know named Alonza Kai, called inscription.", "tokens": [51064, 1042, 11, 264, 2199, 1867, 307, 286, 7620, 341, 281, 382, 76, 25530, 586, 456, 456, 307, 257, 992, 295, 46593, 300, 8198, 281, 360, 341, 257, 869, 2290, 538, 257, 954, 286, 767, 458, 4926, 967, 266, 2394, 20753, 11, 1219, 49882, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16180946145738875, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.07350550591945648}, {"id": 182, "seek": 116000, "start": 1160.0, "end": 1178.0, "text": " But it's a big pile of tools and involves LLVM and is is a lot of stuff, especially for my my small program and so I tried something different I hand converted the five core words to to asmjs because they're just sort of special enough that", "tokens": [50364, 583, 309, 311, 257, 955, 14375, 295, 3873, 293, 11626, 441, 43, 53, 44, 293, 307, 307, 257, 688, 295, 1507, 11, 2318, 337, 452, 452, 1359, 1461, 293, 370, 286, 3031, 746, 819, 286, 1011, 16424, 264, 1732, 4965, 2283, 281, 281, 382, 76, 25530, 570, 436, 434, 445, 1333, 295, 2121, 1547, 300, 51264], "temperature": 0.0, "avg_logprob": -0.1551949937464827, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.010971073992550373}, {"id": 183, "seek": 117800, "start": 1178.0, "end": 1186.0, "text": " but there's only there you know they're only similar to what you saw with with parser they're basically each a screen full.", "tokens": [50364, 457, 456, 311, 787, 456, 291, 458, 436, 434, 787, 2531, 281, 437, 291, 1866, 365, 365, 21156, 260, 436, 434, 1936, 1184, 257, 2568, 1577, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13815414583360827, "compression_ratio": 1.5635359116022098, "no_speech_prob": 0.26239654421806335}, {"id": 184, "seek": 117800, "start": 1186.0, "end": 1197.0, "text": " And then I tried to come up with a set of automation to convert the op codes and we'll talk about that in a sec. So, asmjs I should talk about it for a second.", "tokens": [50764, 400, 550, 286, 3031, 281, 808, 493, 365, 257, 992, 295, 17769, 281, 7620, 264, 999, 14211, 293, 321, 603, 751, 466, 300, 294, 257, 907, 13, 407, 11, 382, 76, 25530, 286, 820, 751, 466, 309, 337, 257, 1150, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13815414583360827, "compression_ratio": 1.5635359116022098, "no_speech_prob": 0.26239654421806335}, {"id": 185, "seek": 119700, "start": 1197.0, "end": 1201.0, "text": " It's definitely the best hack I've ever seen.", "tokens": [50364, 467, 311, 2138, 264, 1151, 10339, 286, 600, 1562, 1612, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13224015917096818, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.17744457721710205}, {"id": 186, "seek": 119700, "start": 1201.0, "end": 1215.0, "text": " It's the idea of embedding C code in JavaScript, which seems counterintuitive and it's does this by representing C semantics in inside of JavaScript.", "tokens": [50564, 467, 311, 264, 1558, 295, 12240, 3584, 383, 3089, 294, 15778, 11, 597, 2544, 5682, 686, 48314, 293, 309, 311, 775, 341, 538, 13460, 383, 4361, 45298, 294, 1854, 295, 15778, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13224015917096818, "compression_ratio": 1.3928571428571428, "no_speech_prob": 0.17744457721710205}, {"id": 187, "seek": 121500, "start": 1215.0, "end": 1227.0, "text": " Inside of Chrome at least this gets converted to WebAssembly which is yet another format which I won't talk about today, which then gets converted actually into into real assembly and runs it with, you know, near native speeds.", "tokens": [50364, 15123, 295, 15327, 412, 1935, 341, 2170, 16424, 281, 9573, 10884, 19160, 597, 307, 1939, 1071, 7877, 597, 286, 1582, 380, 751, 466, 965, 11, 597, 550, 2170, 16424, 767, 666, 666, 957, 12103, 293, 6676, 309, 365, 11, 291, 458, 11, 2651, 8470, 16411, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15218932151794434, "compression_ratio": 1.455128205128205, "no_speech_prob": 0.027570148929953575}, {"id": 188, "seek": 122700, "start": 1227.0, "end": 1246.0, "text": " The cleverness of the hack of asmjs is that JavaScript represents values with data types that are not strong but rather, rather weak and so they are able to.", "tokens": [50364, 440, 13494, 1287, 295, 264, 10339, 295, 382, 76, 25530, 307, 300, 15778, 8855, 4190, 365, 1412, 3467, 300, 366, 406, 2068, 457, 2831, 11, 2831, 5336, 293, 370, 436, 366, 1075, 281, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12123644979376542, "compression_ratio": 1.319327731092437, "no_speech_prob": 0.1080518513917923}, {"id": 189, "seek": 124600, "start": 1246.0, "end": 1260.0, "text": " They have a variable that can hold a string or can hold an integer can hold a floating point value. In fact, actually numbers in JavaScript are always double precision floating point values whether you sort of want them to be or not.", "tokens": [50364, 814, 362, 257, 7006, 300, 393, 1797, 257, 6798, 420, 393, 1797, 364, 24922, 393, 1797, 257, 12607, 935, 2158, 13, 682, 1186, 11, 767, 3547, 294, 15778, 366, 1009, 3834, 18356, 12607, 935, 4190, 1968, 291, 1333, 295, 528, 552, 281, 312, 420, 406, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18410854339599608, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.2685522437095642}, {"id": 190, "seek": 126000, "start": 1260.0, "end": 1279.0, "text": " And in it with the trick of asmjs is that you use a sort of redundant syntax where you incessantly or things with zero for example to indicate that something is a 32 bit integer, or you use this operation f round which rounds to the precision of a 32 bit floating", "tokens": [50364, 400, 294, 309, 365, 264, 4282, 295, 382, 76, 25530, 307, 300, 291, 764, 257, 1333, 295, 40997, 28431, 689, 291, 294, 780, 3627, 420, 721, 365, 4018, 337, 1365, 281, 13330, 300, 746, 307, 257, 8858, 857, 24922, 11, 420, 291, 764, 341, 6916, 283, 3098, 597, 13757, 281, 264, 18356, 295, 257, 8858, 857, 12607, 51314], "temperature": 0.0, "avg_logprob": -0.11262366029082752, "compression_ratio": 1.5470588235294118, "no_speech_prob": 0.07799279689788818}, {"id": 191, "seek": 127900, "start": 1279.0, "end": 1299.0, "text": " point value to indicate that something is 32 bit floating point value and so in this way you're able to override the semantics of JavaScript such that you're making it clear throughout your code that that everything that a given variable is a is a 32 bit floating", "tokens": [50364, 935, 2158, 281, 13330, 300, 746, 307, 8858, 857, 12607, 935, 2158, 293, 370, 294, 341, 636, 291, 434, 1075, 281, 42321, 264, 4361, 45298, 295, 15778, 1270, 300, 291, 434, 1455, 309, 1850, 3710, 428, 3089, 300, 300, 1203, 300, 257, 2212, 7006, 307, 257, 307, 257, 8858, 857, 12607, 51364], "temperature": 0.0, "avg_logprob": -0.09605725028298118, "compression_ratio": 1.623456790123457, "no_speech_prob": 0.3657624125480652}, {"id": 192, "seek": 129900, "start": 1299.0, "end": 1311.0, "text": " point value, for example, so it looks wasteful, but to a JavaScript interpreter that knows how to decode it, it can be converted into efficient code.", "tokens": [50364, 935, 2158, 11, 337, 1365, 11, 370, 309, 1542, 5964, 906, 11, 457, 281, 257, 15778, 34132, 300, 3255, 577, 281, 979, 1429, 309, 11, 309, 393, 312, 16424, 666, 7148, 3089, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10283653552715595, "compression_ratio": 1.5669291338582678, "no_speech_prob": 0.46387749910354614}, {"id": 193, "seek": 129900, "start": 1311.0, "end": 1326.0, "text": " It is largely get been superseded by WebAssembly but for the purpose of generating a thing by hand it's a little bit easier to generate by hand because it's human readable text and doesn't require additional tooling so that's what I ended up doing.", "tokens": [50964, 467, 307, 11611, 483, 668, 37906, 37679, 538, 9573, 10884, 19160, 457, 337, 264, 4334, 295, 17746, 257, 551, 538, 1011, 309, 311, 257, 707, 857, 3571, 281, 8460, 538, 1011, 570, 309, 311, 1952, 49857, 2487, 293, 1177, 380, 3651, 4497, 46593, 370, 300, 311, 437, 286, 4590, 493, 884, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10283653552715595, "compression_ratio": 1.5669291338582678, "no_speech_prob": 0.46387749910354614}, {"id": 194, "seek": 132600, "start": 1326.0, "end": 1342.0, "text": " So here's that same parse code, re expressed in asmjs, the memory accesses are relative to some arrays that are contained the entire memory map, and a similar thing was done to each of these.", "tokens": [50364, 407, 510, 311, 300, 912, 48377, 3089, 11, 319, 12675, 294, 382, 76, 25530, 11, 264, 4675, 2105, 279, 366, 4972, 281, 512, 41011, 300, 366, 16212, 264, 2302, 4675, 4471, 11, 293, 257, 2531, 551, 390, 1096, 281, 1184, 295, 613, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1180156425193504, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.010642166249454021}, {"id": 195, "seek": 132600, "start": 1342.0, "end": 1350.0, "text": " The rest of the system is blue and I noticed there's a question in the chat so I'll maybe take that. Oh, he's got a reference.", "tokens": [51164, 440, 1472, 295, 264, 1185, 307, 3344, 293, 286, 5694, 456, 311, 257, 1168, 294, 264, 5081, 370, 286, 603, 1310, 747, 300, 13, 876, 11, 415, 311, 658, 257, 6408, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1180156425193504, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.010642166249454021}, {"id": 196, "seek": 135000, "start": 1350.0, "end": 1367.0, "text": " So this system could in C could be built up with includes, but I actually do it with a combination of make files and some scripts for gluing it together and the reason that I do this is that for the ESP 32 version of my career for it.", "tokens": [50364, 407, 341, 1185, 727, 294, 383, 727, 312, 3094, 493, 365, 5974, 11, 457, 286, 767, 360, 309, 365, 257, 6562, 295, 652, 7098, 293, 512, 23294, 337, 1563, 9635, 309, 1214, 293, 264, 1778, 300, 286, 360, 341, 307, 300, 337, 264, 12564, 47, 8858, 3037, 295, 452, 3988, 337, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1875060566684656, "compression_ratio": 1.4355828220858895, "no_speech_prob": 0.44042766094207764}, {"id": 197, "seek": 136700, "start": 1367.0, "end": 1387.0, "text": " I don't have it one gigantic I know file. And I didn't want the sort of side effects that you get from using the C preprocessor to include a file. And so I structured using these scripts that ends up being useful because I can then use those same scripts to do some", "tokens": [50364, 286, 500, 380, 362, 309, 472, 26800, 286, 458, 3991, 13, 400, 286, 994, 380, 528, 264, 1333, 295, 1252, 5065, 300, 291, 483, 490, 1228, 264, 383, 2666, 340, 25432, 281, 4090, 257, 3991, 13, 400, 370, 286, 18519, 1228, 613, 23294, 300, 5314, 493, 885, 4420, 570, 286, 393, 550, 764, 729, 912, 23294, 281, 360, 512, 51364], "temperature": 0.0, "avg_logprob": -0.19168753851027714, "compression_ratio": 1.5773809523809523, "no_speech_prob": 0.5724328756332397}, {"id": 198, "seek": 138700, "start": 1387.0, "end": 1402.0, "text": " replacement patterns to try to convert all of the op codes. And so I do something. I do something like this I go through and have a series of replacements and some of these these are actually all string replacements but a few of them are regular expressions, where", "tokens": [50364, 14419, 8294, 281, 853, 281, 7620, 439, 295, 264, 999, 14211, 13, 400, 370, 286, 360, 746, 13, 286, 360, 746, 411, 341, 286, 352, 807, 293, 362, 257, 2638, 295, 3248, 41140, 293, 512, 295, 613, 613, 366, 767, 439, 6798, 3248, 41140, 457, 257, 1326, 295, 552, 366, 3890, 15277, 11, 689, 51114], "temperature": 0.0, "avg_logprob": -0.09981431632206358, "compression_ratio": 1.639751552795031, "no_speech_prob": 0.6429771780967712}, {"id": 199, "seek": 140200, "start": 1402.0, "end": 1420.0, "text": " I use the C code with the equivalent as mjs JavaScript code, and the motivation here is that I hope to be able to avoid needing to update as mjs code when I change the C code.", "tokens": [50364, 286, 764, 264, 383, 3089, 365, 264, 10344, 382, 275, 25530, 15778, 3089, 11, 293, 264, 12335, 510, 307, 300, 286, 1454, 281, 312, 1075, 281, 5042, 18006, 281, 5623, 382, 275, 25530, 3089, 562, 286, 1319, 264, 383, 3089, 13, 51264], "temperature": 0.0, "avg_logprob": -0.26169361538357205, "compression_ratio": 1.4, "no_speech_prob": 0.2561666667461395}, {"id": 200, "seek": 142000, "start": 1421.0, "end": 1432.0, "text": " I've really learned the lesson it's a classic lesson that a sort of a badly implemented compiler done with string substitution is not a good idea.", "tokens": [50414, 286, 600, 534, 3264, 264, 6898, 309, 311, 257, 7230, 6898, 300, 257, 1333, 295, 257, 13425, 12270, 31958, 1096, 365, 6798, 35827, 307, 406, 257, 665, 1558, 13, 50964], "temperature": 0.0, "avg_logprob": -0.23933981049735592, "compression_ratio": 1.4223602484472049, "no_speech_prob": 0.4485679268836975}, {"id": 201, "seek": 142000, "start": 1432.0, "end": 1439.0, "text": " 140 lines of replacements end up being required to handle all the op codes I have.", "tokens": [50964, 21548, 3876, 295, 3248, 41140, 917, 493, 885, 4739, 281, 4813, 439, 264, 999, 14211, 286, 362, 13, 51314], "temperature": 0.0, "avg_logprob": -0.23933981049735592, "compression_ratio": 1.4223602484472049, "no_speech_prob": 0.4485679268836975}, {"id": 202, "seek": 143900, "start": 1439.0, "end": 1455.0, "text": " These op codes are there's 150 lines of them so it's not much of a win there are some additional op codes that are added to support the efficiency of bringing more of the system inside so it is a net win in total, but not by much of a margin and so probably this is", "tokens": [50364, 1981, 999, 14211, 366, 456, 311, 8451, 3876, 295, 552, 370, 309, 311, 406, 709, 295, 257, 1942, 456, 366, 512, 4497, 999, 14211, 300, 366, 3869, 281, 1406, 264, 10493, 295, 5062, 544, 295, 264, 1185, 1854, 370, 309, 307, 257, 2533, 1942, 294, 3217, 11, 457, 406, 538, 709, 295, 257, 10270, 293, 370, 1391, 341, 307, 51164], "temperature": 0.0, "avg_logprob": -0.10149119392273918, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.0952867865562439}, {"id": 203, "seek": 145500, "start": 1455.0, "end": 1469.0, "text": " something that I should revisit probably would be worth just maintaining to two separate descriptions of the op codes that are that are do a proper compiler or use or use inscription.", "tokens": [50364, 746, 300, 286, 820, 32676, 1391, 576, 312, 3163, 445, 14916, 281, 732, 4994, 24406, 295, 264, 999, 14211, 300, 366, 300, 366, 360, 257, 2296, 31958, 420, 764, 420, 764, 49882, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19241099161644504, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.09260480850934982}, {"id": 204, "seek": 145500, "start": 1469.0, "end": 1477.0, "text": " Talking to the outside so on the web of course I have one more problem I've got my great interpreter it runs but now how do I talk to the outside world.", "tokens": [51064, 22445, 281, 264, 2380, 370, 322, 264, 3670, 295, 1164, 286, 362, 472, 544, 1154, 286, 600, 658, 452, 869, 34132, 309, 6676, 457, 586, 577, 360, 286, 751, 281, 264, 2380, 1002, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19241099161644504, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.09260480850934982}, {"id": 205, "seek": 147700, "start": 1477.0, "end": 1492.0, "text": " Well, I have a list of I have only a single op code that I use for this, I called it call confusingly and call calls into JavaScript, passing in the fourth stack as a parameter, which lets JavaScript decide how to interpret this.", "tokens": [50364, 1042, 11, 286, 362, 257, 1329, 295, 286, 362, 787, 257, 2167, 999, 3089, 300, 286, 764, 337, 341, 11, 286, 1219, 309, 818, 13181, 356, 293, 818, 5498, 666, 15778, 11, 8437, 294, 264, 6409, 8630, 382, 257, 13075, 11, 597, 6653, 15778, 4536, 577, 281, 7302, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15837415059407553, "compression_ratio": 1.4870129870129871, "no_speech_prob": 0.13450147211551666}, {"id": 206, "seek": 149200, "start": 1492.0, "end": 1514.0, "text": " And then I start out with a table of JavaScript objects that contain what I'll term system calls. And so the first of these is a thing called set eval, which takes a three, three values it takes the starting pointer of a string in the fourth memory space, a length of", "tokens": [50364, 400, 550, 286, 722, 484, 365, 257, 3199, 295, 15778, 6565, 300, 5304, 437, 286, 603, 1433, 1185, 5498, 13, 400, 370, 264, 700, 295, 613, 307, 257, 551, 1219, 992, 1073, 304, 11, 597, 2516, 257, 1045, 11, 1045, 4190, 309, 2516, 264, 2891, 23918, 295, 257, 6798, 294, 264, 6409, 4675, 1901, 11, 257, 4641, 295, 51464], "temperature": 0.0, "avg_logprob": -0.1642337768308578, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.5723157525062561}, {"id": 207, "seek": 151400, "start": 1514.0, "end": 1532.0, "text": " string, and then the index of a slot in this objects array and JavaScript that I want to populate with the result of eval in that piece of JavaScript. So this lets me take a piece of JavaScript code in a string and forth, hand it over to to JavaScript,", "tokens": [50364, 6798, 11, 293, 550, 264, 8186, 295, 257, 14747, 294, 341, 6565, 10225, 293, 15778, 300, 286, 528, 281, 1665, 5256, 365, 264, 1874, 295, 1073, 304, 294, 300, 2522, 295, 15778, 13, 407, 341, 6653, 385, 747, 257, 2522, 295, 15778, 3089, 294, 257, 6798, 293, 5220, 11, 1011, 309, 670, 281, 281, 15778, 11, 51264], "temperature": 0.0, "avg_logprob": -0.21387778917948405, "compression_ratio": 1.605095541401274, "no_speech_prob": 0.533879280090332}, {"id": 208, "seek": 153200, "start": 1532.0, "end": 1553.0, "text": " and store it in this array. And when I make a call, I call into a particular index my system call number in this table and so this lets me from forth, define past strings into JavaScript to define the the remaining op codes.", "tokens": [50364, 293, 3531, 309, 294, 341, 10225, 13, 400, 562, 286, 652, 257, 818, 11, 286, 818, 666, 257, 1729, 8186, 452, 1185, 818, 1230, 294, 341, 3199, 293, 370, 341, 6653, 385, 490, 5220, 11, 6964, 1791, 13985, 666, 15778, 281, 6964, 264, 264, 8877, 999, 14211, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11907493151151217, "compression_ratio": 1.4640522875816993, "no_speech_prob": 0.5646988749504089}, {"id": 209, "seek": 155300, "start": 1553.0, "end": 1570.0, "text": " And so, for example, this is the implementation of key question mark where I have a JavaScript function that interacts with sort of the outside world and JavaScript API's to to cope with trying to check the input buffer, if there's a key.", "tokens": [50364, 400, 370, 11, 337, 1365, 11, 341, 307, 264, 11420, 295, 2141, 1168, 1491, 689, 286, 362, 257, 15778, 2445, 300, 43582, 365, 1333, 295, 264, 2380, 1002, 293, 15778, 9362, 311, 281, 281, 22598, 365, 1382, 281, 1520, 264, 4846, 21762, 11, 498, 456, 311, 257, 2141, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14123577872912088, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.1576487272977829}, {"id": 210, "seek": 155300, "start": 1570.0, "end": 1581.0, "text": " I have this little shortcut here for read line to modes of operation which I won't talk about at length but there's a way to run a JavaScript interpreter at the command line and I also support that.", "tokens": [51214, 286, 362, 341, 707, 24822, 510, 337, 1401, 1622, 281, 14068, 295, 6916, 597, 286, 1582, 380, 751, 466, 412, 4641, 457, 456, 311, 257, 636, 281, 1190, 257, 15778, 34132, 412, 264, 5622, 1622, 293, 286, 611, 1406, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.14123577872912088, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.1576487272977829}, {"id": 211, "seek": 158100, "start": 1582.0, "end": 1590.0, "text": " And so I'm able to create this this system call binding all in fourth code and and hook things up.", "tokens": [50414, 400, 370, 286, 478, 1075, 281, 1884, 341, 341, 1185, 818, 17359, 439, 294, 6409, 3089, 293, 293, 6328, 721, 493, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09785635769367218, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.01016019657254219}, {"id": 212, "seek": 158100, "start": 1590.0, "end": 1600.0, "text": " And that's that I've done that for sort of terminal input and output and even a little bit of graphics as we'll see in a moment, and to use the interpreter.", "tokens": [50814, 400, 300, 311, 300, 286, 600, 1096, 300, 337, 1333, 295, 14709, 4846, 293, 5598, 293, 754, 257, 707, 857, 295, 11837, 382, 321, 603, 536, 294, 257, 1623, 11, 293, 281, 764, 264, 34132, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09785635769367218, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.01016019657254219}, {"id": 213, "seek": 160000, "start": 1600.0, "end": 1616.0, "text": " I'm one giant JavaScript file. If you want to embed the interpreter somewhere you can specify a div tag with a particular ID and it will inject the interpreter there if it doesn't find that tag it will just happily embedded at the bottom of the page.", "tokens": [50364, 286, 478, 472, 7410, 15778, 3991, 13, 759, 291, 528, 281, 12240, 264, 34132, 4079, 291, 393, 16500, 257, 3414, 6162, 365, 257, 1729, 7348, 293, 309, 486, 10711, 264, 34132, 456, 498, 309, 1177, 380, 915, 300, 6162, 309, 486, 445, 19909, 16741, 412, 264, 2767, 295, 264, 3028, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14363554174249824, "compression_ratio": 1.5151515151515151, "no_speech_prob": 0.1687168926000595}, {"id": 214, "seek": 161600, "start": 1616.0, "end": 1624.0, "text": " There are some caveats star slash mod as you'll see I'll show you in a second is a lie I have not implemented it properly.", "tokens": [50364, 821, 366, 512, 11730, 1720, 3543, 17330, 1072, 382, 291, 603, 536, 286, 603, 855, 291, 294, 257, 1150, 307, 257, 4544, 286, 362, 406, 12270, 309, 6108, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14697426160176594, "compression_ratio": 1.4, "no_speech_prob": 0.030187273398041725}, {"id": 215, "seek": 161600, "start": 1624.0, "end": 1628.0, "text": " It's on my list of things to fix but I haven't done it yet.", "tokens": [50764, 467, 311, 322, 452, 1329, 295, 721, 281, 3191, 457, 286, 2378, 380, 1096, 309, 1939, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14697426160176594, "compression_ratio": 1.4, "no_speech_prob": 0.030187273398041725}, {"id": 216, "seek": 161600, "start": 1628.0, "end": 1630.0, "text": " I'll talk about sec.", "tokens": [50964, 286, 603, 751, 466, 907, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14697426160176594, "compression_ratio": 1.4, "no_speech_prob": 0.030187273398041725}, {"id": 217, "seek": 163000, "start": 1631.0, "end": 1642.0, "text": " I think I picked maybe 16 megabytes of memories the little large but it's a can value which is not ideal by use WebAssembly WebAssembly does support a dynamic key.", "tokens": [50414, 286, 519, 286, 6183, 1310, 3165, 10816, 24538, 295, 8495, 264, 707, 2416, 457, 309, 311, 257, 393, 2158, 597, 307, 406, 7157, 538, 764, 9573, 10884, 19160, 9573, 10884, 19160, 775, 1406, 257, 8546, 2141, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18962895564543894, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.13463559746742249}, {"id": 218, "seek": 163000, "start": 1642.0, "end": 1652.0, "text": " The terminal is too slow and it's just because I haven't had time to optimize it I'm using the JavaScript that I'm using to update it is less than ideal.", "tokens": [50964, 440, 14709, 307, 886, 2964, 293, 309, 311, 445, 570, 286, 2378, 380, 632, 565, 281, 19719, 309, 286, 478, 1228, 264, 15778, 300, 286, 478, 1228, 281, 5623, 309, 307, 1570, 813, 7157, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18962895564543894, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.13463559746742249}, {"id": 219, "seek": 165200, "start": 1653.0, "end": 1663.0, "text": " Because of floating point support there's actually a sixth core opcode that's required that they conversion to from a string to a floating point value.", "tokens": [50414, 1436, 295, 12607, 935, 1406, 456, 311, 767, 257, 15102, 4965, 999, 22332, 300, 311, 4739, 300, 436, 14298, 281, 490, 257, 6798, 281, 257, 12607, 935, 2158, 13, 50914], "temperature": 0.0, "avg_logprob": -0.20528575953315287, "compression_ratio": 1.7426900584795322, "no_speech_prob": 0.2594050168991089}, {"id": 220, "seek": 165200, "start": 1663.0, "end": 1669.0, "text": " It's not strictly required if you were if you wanted to strip out the floating point support but it is required.", "tokens": [50914, 467, 311, 406, 20792, 4739, 498, 291, 645, 498, 291, 1415, 281, 12828, 484, 264, 12607, 935, 1406, 457, 309, 307, 4739, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20528575953315287, "compression_ratio": 1.7426900584795322, "no_speech_prob": 0.2594050168991089}, {"id": 221, "seek": 165200, "start": 1669.0, "end": 1672.0, "text": " It is used in the current system.", "tokens": [51214, 467, 307, 1143, 294, 264, 2190, 1185, 13, 51364], "temperature": 0.0, "avg_logprob": -0.20528575953315287, "compression_ratio": 1.7426900584795322, "no_speech_prob": 0.2594050168991089}, {"id": 222, "seek": 167200, "start": 1672.0, "end": 1677.0, "text": " Star slash mod is is implemented with this piece of JavaScript code right now.", "tokens": [50364, 5705, 17330, 1072, 307, 307, 12270, 365, 341, 2522, 295, 15778, 3089, 558, 586, 13, 50614], "temperature": 0.0, "avg_logprob": -0.19853277504444122, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.3168698847293854}, {"id": 223, "seek": 167200, "start": 1677.0, "end": 1689.0, "text": " And this is not right because what it's doing is it's, you know, star slash mod right should take a times be and then divide by C and return the, the division results in the modular result.", "tokens": [50614, 400, 341, 307, 406, 558, 570, 437, 309, 311, 884, 307, 309, 311, 11, 291, 458, 11, 3543, 17330, 1072, 558, 820, 747, 257, 1413, 312, 293, 550, 9845, 538, 383, 293, 2736, 264, 11, 264, 10044, 3542, 294, 264, 31111, 1874, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19853277504444122, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.3168698847293854}, {"id": 224, "seek": 168900, "start": 1689.0, "end": 1704.0, "text": " It's supposed to extend it to double word size, but unfortunately there is, although there is a, there is actually a brand new 64 bit, actually arbitrary precision type in JavaScript.", "tokens": [50364, 467, 311, 3442, 281, 10101, 309, 281, 3834, 1349, 2744, 11, 457, 7015, 456, 307, 11, 4878, 456, 307, 257, 11, 456, 307, 767, 257, 3360, 777, 12145, 857, 11, 767, 23211, 18356, 2010, 294, 15778, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09218245804911912, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.12930303812026978}, {"id": 225, "seek": 168900, "start": 1704.0, "end": 1718.0, "text": " I'm not confident in the browser support to make use of it here I'll actually have to check up on that before I fix this problem so for now, I'm converting everything to 64 bit floating point and doing the division and so you can end up with some in precision.", "tokens": [51114, 286, 478, 406, 6679, 294, 264, 11185, 1406, 281, 652, 764, 295, 309, 510, 286, 603, 767, 362, 281, 1520, 493, 322, 300, 949, 286, 3191, 341, 1154, 370, 337, 586, 11, 286, 478, 29942, 1203, 281, 12145, 857, 12607, 935, 293, 884, 264, 10044, 293, 370, 291, 393, 917, 493, 365, 512, 294, 18356, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09218245804911912, "compression_ratio": 1.6629213483146068, "no_speech_prob": 0.12930303812026978}, {"id": 226, "seek": 171800, "start": 1718.0, "end": 1732.0, "text": " So, the right way to fix this is either to use that arbitrary precision type, or I will probably need to eventually, or an alternative is you can you can sort of do the bit shifts and tricks to do divide correctly.", "tokens": [50364, 407, 11, 264, 558, 636, 281, 3191, 341, 307, 2139, 281, 764, 300, 23211, 18356, 2010, 11, 420, 286, 486, 1391, 643, 281, 4728, 11, 420, 364, 8535, 307, 291, 393, 291, 393, 1333, 295, 360, 264, 857, 19201, 293, 11733, 281, 360, 9845, 8944, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08837823867797852, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.007806141395121813}, {"id": 227, "seek": 171800, "start": 1732.0, "end": 1740.0, "text": " There are many happy things of this implementation one is that I was able to quickly throw in a little bit of graphics not quite as much.", "tokens": [51064, 821, 366, 867, 2055, 721, 295, 341, 11420, 472, 307, 300, 286, 390, 1075, 281, 2661, 3507, 294, 257, 707, 857, 295, 11837, 406, 1596, 382, 709, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08837823867797852, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.007806141395121813}, {"id": 228, "seek": 174000, "start": 1740.0, "end": 1754.0, "text": " And I hope to be able to run the heart game I demoed many times back but I'm not quite there yet, but I got some of the pieces. And the other great thing is that this implementation is likely to be reasonably fast and be able to do some interesting", "tokens": [50364, 400, 286, 1454, 281, 312, 1075, 281, 1190, 264, 1917, 1216, 286, 10723, 292, 867, 1413, 646, 457, 286, 478, 406, 1596, 456, 1939, 11, 457, 286, 658, 512, 295, 264, 3755, 13, 400, 264, 661, 869, 551, 307, 300, 341, 11420, 307, 3700, 281, 312, 23551, 2370, 293, 312, 1075, 281, 360, 512, 1880, 51064], "temperature": 0.0, "avg_logprob": -0.08439802130063374, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.21175339818000793}, {"id": 229, "seek": 174000, "start": 1754.0, "end": 1763.0, "text": " graphics because the memory space is something that you can pass over to WebGL and do fun things. So with that I'm going to switch over and do a quick demo.", "tokens": [51064, 11837, 570, 264, 4675, 1901, 307, 746, 300, 291, 393, 1320, 670, 281, 9573, 19440, 293, 360, 1019, 721, 13, 407, 365, 300, 286, 478, 516, 281, 3679, 670, 293, 360, 257, 1702, 10723, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08439802130063374, "compression_ratio": 1.6735537190082646, "no_speech_prob": 0.21175339818000793}, {"id": 230, "seek": 176300, "start": 1763.0, "end": 1776.0, "text": " Maybe you can find this if you go to the easiest way to get there is just e4th.appspot.com. And if you click to the right on web, it will bring up the web version of the system.", "tokens": [50364, 2704, 291, 393, 915, 341, 498, 291, 352, 281, 264, 12889, 636, 281, 483, 456, 307, 445, 308, 19, 392, 13, 1746, 4952, 310, 13, 1112, 13, 400, 498, 291, 2052, 281, 264, 558, 322, 3670, 11, 309, 486, 1565, 493, 264, 3670, 3037, 295, 264, 1185, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15691854403569147, "compression_ratio": 1.3615384615384616, "no_speech_prob": 0.2902769148349762}, {"id": 231, "seek": 177600, "start": 1776.0, "end": 1789.0, "text": " I think it has the same underlying mechanisms as on the other platforms. I'll do vlist list at the dictionary here.", "tokens": [50364, 286, 519, 309, 575, 264, 912, 14217, 15902, 382, 322, 264, 661, 9473, 13, 286, 603, 360, 371, 8264, 1329, 412, 264, 25890, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.215187039868585, "compression_ratio": 1.2234042553191489, "no_speech_prob": 0.4059399664402008}, {"id": 232, "seek": 178900, "start": 1789.0, "end": 1808.0, "text": " So all the plumbing is there so if I if I do, if I define a word, let's say I do test, and I'll do for I print next turn, I can print things out. I can do see on that word, and it will attempt to decompile it.", "tokens": [50364, 407, 439, 264, 39993, 307, 456, 370, 498, 286, 498, 286, 360, 11, 498, 286, 6964, 257, 1349, 11, 718, 311, 584, 286, 360, 1500, 11, 293, 286, 603, 360, 337, 286, 4482, 958, 1261, 11, 286, 393, 4482, 721, 484, 13, 286, 393, 360, 536, 322, 300, 1349, 11, 293, 309, 486, 5217, 281, 22867, 794, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19386942424471415, "compression_ratio": 1.4928571428571429, "no_speech_prob": 0.33766815066337585}, {"id": 233, "seek": 180800, "start": 1809.0, "end": 1827.0, "text": " And the same is true of all the words in the system that are defined in higher level words. So for example, I've got this word fill 32, which is part of the system and you can decode and see the inner op codes for it.", "tokens": [50414, 400, 264, 912, 307, 2074, 295, 439, 264, 2283, 294, 264, 1185, 300, 366, 7642, 294, 2946, 1496, 2283, 13, 407, 337, 1365, 11, 286, 600, 658, 341, 1349, 2836, 8858, 11, 597, 307, 644, 295, 264, 1185, 293, 291, 393, 979, 1429, 293, 536, 264, 7284, 999, 14211, 337, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13718186106000627, "compression_ratio": 1.4370860927152318, "no_speech_prob": 0.07568512111902237}, {"id": 234, "seek": 182700, "start": 1827.0, "end": 1844.0, "text": " In addition, there's there's a little bit of support for graphics. I took a little inspiration from from the Apple to Apple to and have a word set that GR will bring you into a mode where there's graphics above and you continue to have the terminal down below.", "tokens": [50364, 682, 4500, 11, 456, 311, 456, 311, 257, 707, 857, 295, 1406, 337, 11837, 13, 286, 1890, 257, 707, 10249, 490, 490, 264, 6373, 281, 6373, 281, 293, 362, 257, 1349, 992, 300, 10903, 486, 1565, 291, 666, 257, 4391, 689, 456, 311, 11837, 3673, 293, 291, 2354, 281, 362, 264, 14709, 760, 2507, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13762700355659097, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.09518345445394516}, {"id": 235, "seek": 184400, "start": 1844.0, "end": 1865.0, "text": " So you can set the color. Let's say we do a red, red is in the, the value color, and then I can draw a box. The coordinate system by default starts at 1000 by 1000.", "tokens": [50364, 407, 291, 393, 992, 264, 2017, 13, 961, 311, 584, 321, 360, 257, 2182, 11, 2182, 307, 294, 264, 11, 264, 2158, 2017, 11, 293, 550, 286, 393, 2642, 257, 2424, 13, 440, 15670, 1185, 538, 7576, 3719, 412, 9714, 538, 9714, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1440744602933843, "compression_ratio": 1.3225806451612903, "no_speech_prob": 0.1240604966878891}, {"id": 236, "seek": 186500, "start": 1865.0, "end": 1875.0, "text": " You can use the words to redefine it which I'll never to document on the website at some point soon. But you can, for example, draw a box.", "tokens": [50364, 509, 393, 764, 264, 2283, 281, 38818, 533, 309, 597, 286, 603, 1128, 281, 4166, 322, 264, 3144, 412, 512, 935, 2321, 13, 583, 291, 393, 11, 337, 1365, 11, 2642, 257, 2424, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18113060255308408, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.17979498207569122}, {"id": 237, "seek": 186500, "start": 1875.0, "end": 1885.0, "text": " And there's, you can, you can disable the visibility of the show text.", "tokens": [50864, 400, 456, 311, 11, 291, 393, 11, 291, 393, 28362, 264, 19883, 295, 264, 855, 2487, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18113060255308408, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.17979498207569122}, {"id": 238, "seek": 186500, "start": 1885.0, "end": 1889.0, "text": " You can hide the text and get to sort of a full graphic screen.", "tokens": [51364, 509, 393, 6479, 264, 2487, 293, 483, 281, 1333, 295, 257, 1577, 14089, 2568, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18113060255308408, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.17979498207569122}, {"id": 239, "seek": 188900, "start": 1889.0, "end": 1899.0, "text": " You can get the scrolling on the side there to go away. Actually here. Well, that page. I'm going to re enable.", "tokens": [50364, 509, 393, 483, 264, 29053, 322, 264, 1252, 456, 281, 352, 1314, 13, 5135, 510, 13, 1042, 11, 300, 3028, 13, 286, 478, 516, 281, 319, 9528, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24246461274193937, "compression_ratio": 1.36986301369863, "no_speech_prob": 0.015416846610605717}, {"id": 240, "seek": 188900, "start": 1899.0, "end": 1901.0, "text": " See what I'm typing.", "tokens": [50864, 3008, 437, 286, 478, 18444, 13, 50964], "temperature": 0.0, "avg_logprob": -0.24246461274193937, "compression_ratio": 1.36986301369863, "no_speech_prob": 0.015416846610605717}, {"id": 241, "seek": 188900, "start": 1901.0, "end": 1905.0, "text": " One show.", "tokens": [50964, 1485, 855, 13, 51164], "temperature": 0.0, "avg_logprob": -0.24246461274193937, "compression_ratio": 1.36986301369863, "no_speech_prob": 0.015416846610605717}, {"id": 242, "seek": 188900, "start": 1905.0, "end": 1909.0, "text": " And you can go back to text mode with just the word text.", "tokens": [51164, 400, 291, 393, 352, 646, 281, 2487, 4391, 365, 445, 264, 1349, 2487, 13, 51364], "temperature": 0.0, "avg_logprob": -0.24246461274193937, "compression_ratio": 1.36986301369863, "no_speech_prob": 0.015416846610605717}, {"id": 243, "seek": 190900, "start": 1909.0, "end": 1914.0, "text": " The more right now box is the only word that draws anything.", "tokens": [50364, 440, 544, 558, 586, 2424, 307, 264, 787, 1349, 300, 20045, 1340, 13, 50614], "temperature": 0.0, "avg_logprob": -0.17077691025204128, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.19166642427444458}, {"id": 244, "seek": 190900, "start": 1914.0, "end": 1919.0, "text": " This this fourth has vocabularies and the works like, like the others.", "tokens": [50614, 639, 341, 6409, 575, 2329, 455, 1040, 530, 293, 264, 1985, 411, 11, 411, 264, 2357, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17077691025204128, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.19166642427444458}, {"id": 245, "seek": 190900, "start": 1919.0, "end": 1928.0, "text": " If you go into the internals vocabulary, you can see some of the stuffing. So for example, there's that s float word that we were talking about earlier.", "tokens": [50864, 759, 291, 352, 666, 264, 2154, 1124, 19864, 11, 291, 393, 536, 512, 295, 264, 36046, 13, 407, 337, 1365, 11, 456, 311, 300, 262, 15706, 1349, 300, 321, 645, 1417, 466, 3071, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17077691025204128, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.19166642427444458}, {"id": 246, "seek": 192800, "start": 1928.0, "end": 1940.0, "text": " You can examine all sort of all of the inside. So if you examine, you can even see the insides of C. And if you want to see, see the insides of the words that are in there, you can go examine them.", "tokens": [50364, 509, 393, 17496, 439, 1333, 295, 439, 295, 264, 1854, 13, 407, 498, 291, 17496, 11, 291, 393, 754, 536, 264, 1028, 1875, 295, 383, 13, 400, 498, 291, 528, 281, 536, 11, 536, 264, 1028, 1875, 295, 264, 2283, 300, 366, 294, 456, 11, 291, 393, 352, 17496, 552, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11599917845292525, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.2417835295200348}, {"id": 247, "seek": 192800, "start": 1940.0, "end": 1955.0, "text": " We can very briefly look at the, if you go into the JavaScript console you can see the source code you can see the source code by the way on GitHub as well but to give you an idea the web page here contains very little to bootstrap things.", "tokens": [50964, 492, 393, 588, 10515, 574, 412, 264, 11, 498, 291, 352, 666, 264, 15778, 11076, 291, 393, 536, 264, 4009, 3089, 291, 393, 536, 264, 4009, 3089, 538, 264, 636, 322, 23331, 382, 731, 457, 281, 976, 291, 364, 1558, 264, 3670, 3028, 510, 8306, 588, 707, 281, 11450, 372, 4007, 721, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11599917845292525, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.2417835295200348}, {"id": 248, "seek": 195500, "start": 1955.0, "end": 1966.0, "text": " It's actually all plumbing for the menu at the top, but to actually embed it is just these two lines at the bottom. The interpreter itself lives down here.", "tokens": [50364, 467, 311, 767, 439, 39993, 337, 264, 6510, 412, 264, 1192, 11, 457, 281, 767, 12240, 309, 307, 445, 613, 732, 3876, 412, 264, 2767, 13, 440, 34132, 2564, 2909, 760, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11485855231124363, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.06359109282493591}, {"id": 249, "seek": 195500, "start": 1966.0, "end": 1981.0, "text": " And as you see it, it starts out with a few constants and then the very first thing is actually just this gigantic fourth string, which contains the, all of the bootstrapping code some of this of course looks like JavaScript because it's JavaScript", "tokens": [50914, 400, 382, 291, 536, 309, 11, 309, 3719, 484, 365, 257, 1326, 35870, 293, 550, 264, 588, 700, 551, 307, 767, 445, 341, 26800, 6409, 6798, 11, 597, 8306, 264, 11, 439, 295, 264, 11450, 19639, 3759, 3089, 512, 295, 341, 295, 1164, 1542, 411, 15778, 570, 309, 311, 15778, 51664], "temperature": 0.0, "avg_logprob": -0.11485855231124363, "compression_ratio": 1.6422764227642277, "no_speech_prob": 0.06359109282493591}, {"id": 250, "seek": 198100, "start": 1981.0, "end": 1998.0, "text": " and you'll notice that it's actually embedded in this multi line string that I've defined in fourth to be passed over so sort of mixing JavaScript and, and forth, and then way down here you get to the point where you actually see the insides and the.", "tokens": [50364, 293, 291, 603, 3449, 300, 309, 311, 767, 16741, 294, 341, 4825, 1622, 6798, 300, 286, 600, 7642, 294, 6409, 281, 312, 4678, 670, 370, 1333, 295, 11983, 15778, 293, 11, 293, 5220, 11, 293, 550, 636, 760, 510, 291, 483, 281, 264, 935, 689, 291, 767, 536, 264, 1028, 1875, 293, 264, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20077120024582434, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.05826743319630623}, {"id": 251, "seek": 199800, "start": 1998.0, "end": 2012.0, "text": " The result of having compiled the C, and then converted and so there is a or sorry compiled in C extracted the set of op codes. And so things are a little bit more splayed out than they are in the C version.", "tokens": [50364, 440, 1874, 295, 1419, 36548, 264, 383, 11, 293, 550, 16424, 293, 370, 456, 307, 257, 420, 2597, 36548, 294, 383, 34086, 264, 992, 295, 999, 14211, 13, 400, 370, 721, 366, 257, 707, 857, 544, 262, 2858, 292, 484, 813, 436, 366, 294, 264, 383, 3037, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22580726330096906, "compression_ratio": 1.5, "no_speech_prob": 0.4370657503604889}, {"id": 252, "seek": 201200, "start": 2012.0, "end": 2028.0, "text": " And there's a few helper words that are one line macros that are multi line in fourth but you'll see that, you know, you've got words like create here, and there is there are some, there's here's parse, here's convert which is that s convert and so on.", "tokens": [50364, 400, 456, 311, 257, 1326, 36133, 2283, 300, 366, 472, 1622, 7912, 2635, 300, 366, 4825, 1622, 294, 6409, 457, 291, 603, 536, 300, 11, 291, 458, 11, 291, 600, 658, 2283, 411, 1884, 510, 11, 293, 456, 307, 456, 366, 512, 11, 456, 311, 510, 311, 48377, 11, 510, 311, 7620, 597, 307, 300, 262, 7620, 293, 370, 322, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15097857255202074, "compression_ratio": 1.6688741721854305, "no_speech_prob": 0.10361393541097641}, {"id": 253, "seek": 202800, "start": 2028.0, "end": 2043.0, "text": " And then, most of the bottom of this is actually just a table to build up the set of words, and, and then some initialization code. I know and here's the here's the op codes splayed out and as mjs in a gigantic switch state.", "tokens": [50364, 400, 550, 11, 881, 295, 264, 2767, 295, 341, 307, 767, 445, 257, 3199, 281, 1322, 493, 264, 992, 295, 2283, 11, 293, 11, 293, 550, 512, 5883, 2144, 3089, 13, 286, 458, 293, 510, 311, 264, 510, 311, 264, 999, 14211, 262, 2858, 292, 484, 293, 382, 275, 25530, 294, 257, 26800, 3679, 1785, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1870978627886091, "compression_ratio": 1.526946107784431, "no_speech_prob": 0.02593378722667694}, {"id": 254, "seek": 202800, "start": 2043.0, "end": 2047.0, "text": " In any event that there it is.", "tokens": [51114, 682, 604, 2280, 300, 456, 309, 307, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1870978627886091, "compression_ratio": 1.526946107784431, "no_speech_prob": 0.02593378722667694}, {"id": 255, "seek": 204700, "start": 2048.0, "end": 2056.0, "text": " Check it out I'll be trying to bring it up to parody and support things like color and the terminal and stuff like that.", "tokens": [50414, 6881, 309, 484, 286, 603, 312, 1382, 281, 1565, 309, 493, 281, 43386, 293, 1406, 721, 411, 2017, 293, 264, 14709, 293, 1507, 411, 300, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14168591065840289, "compression_ratio": 1.4125874125874125, "no_speech_prob": 0.019404219463467598}, {"id": 256, "seek": 204700, "start": 2056.0, "end": 2065.0, "text": " In future version of revisions. Are there any questions.", "tokens": [50814, 682, 2027, 3037, 295, 3698, 4252, 13, 2014, 456, 604, 1651, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14168591065840289, "compression_ratio": 1.4125874125874125, "no_speech_prob": 0.019404219463467598}, {"id": 257, "seek": 204700, "start": 2065.0, "end": 2068.0, "text": " Very cool.", "tokens": [51264, 4372, 1627, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14168591065840289, "compression_ratio": 1.4125874125874125, "no_speech_prob": 0.019404219463467598}, {"id": 258, "seek": 204700, "start": 2068.0, "end": 2073.0, "text": " Check it out.", "tokens": [51414, 6881, 309, 484, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14168591065840289, "compression_ratio": 1.4125874125874125, "no_speech_prob": 0.019404219463467598}, {"id": 259, "seek": 207300, "start": 2073.0, "end": 2080.0, "text": " There I was operating in zombie mode.", "tokens": [50364, 821, 286, 390, 7447, 294, 20310, 4391, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1666173537572225, "compression_ratio": 1.2834645669291338, "no_speech_prob": 0.0035917339846491814}, {"id": 260, "seek": 207300, "start": 2080.0, "end": 2086.0, "text": " The past three or four days unable to get the agenda posted.", "tokens": [50714, 440, 1791, 1045, 420, 1451, 1708, 11299, 281, 483, 264, 9829, 9437, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1666173537572225, "compression_ratio": 1.2834645669291338, "no_speech_prob": 0.0035917339846491814}, {"id": 261, "seek": 207300, "start": 2086.0, "end": 2092.0, "text": " When, fortuitously,", "tokens": [51014, 1133, 11, 5009, 1983, 5098, 11, 51314], "temperature": 0.0, "avg_logprob": -0.1666173537572225, "compression_ratio": 1.2834645669291338, "no_speech_prob": 0.0035917339846491814}, {"id": 262, "seek": 207300, "start": 2092.0, "end": 2098.0, "text": " a talk appeared in the queue as if by magic.", "tokens": [51314, 257, 751, 8516, 294, 264, 18639, 382, 498, 538, 5585, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1666173537572225, "compression_ratio": 1.2834645669291338, "no_speech_prob": 0.0035917339846491814}, {"id": 263, "seek": 209800, "start": 2098.0, "end": 2102.0, "text": " Indirect credit code profiler.", "tokens": [50364, 2333, 11890, 5397, 3089, 1740, 5441, 13, 50564], "temperature": 0.0, "avg_logprob": -0.15533257819510796, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.05494021996855736}, {"id": 264, "seek": 209800, "start": 2102.0, "end": 2109.0, "text": " So, how long do you estimate your talk to the last.", "tokens": [50564, 407, 11, 577, 938, 360, 291, 12539, 428, 751, 281, 264, 1036, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15533257819510796, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.05494021996855736}, {"id": 265, "seek": 209800, "start": 2109.0, "end": 2114.0, "text": " I think last time it took me half an hour.", "tokens": [50914, 286, 519, 1036, 565, 309, 1890, 385, 1922, 364, 1773, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15533257819510796, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.05494021996855736}, {"id": 266, "seek": 209800, "start": 2114.0, "end": 2117.0, "text": " I expect to be a little bit faster this time.", "tokens": [51164, 286, 2066, 281, 312, 257, 707, 857, 4663, 341, 565, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15533257819510796, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.05494021996855736}, {"id": 267, "seek": 209800, "start": 2117.0, "end": 2123.0, "text": " Okay, if you can get the ball across the plate in 20 minutes that will work out nicely.", "tokens": [51314, 1033, 11, 498, 291, 393, 483, 264, 2594, 2108, 264, 5924, 294, 945, 2077, 300, 486, 589, 484, 9594, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15533257819510796, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.05494021996855736}, {"id": 268, "seek": 212300, "start": 2123.0, "end": 2138.0, "text": " What we're going to do is bump the doctor takes stuff you all have access to it on our YouTube channel. Does anybody not know where the YouTube channel that cares where the YouTube channel is.", "tokens": [50364, 708, 321, 434, 516, 281, 360, 307, 9961, 264, 4631, 2516, 1507, 291, 439, 362, 2105, 281, 309, 322, 527, 3088, 2269, 13, 4402, 4472, 406, 458, 689, 264, 3088, 2269, 300, 12310, 689, 264, 3088, 2269, 307, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18394288149746982, "compression_ratio": 1.4903225806451612, "no_speech_prob": 0.09386350214481354}, {"id": 269, "seek": 212300, "start": 2138.0, "end": 2141.0, "text": " All right, that's good. Good reaction.", "tokens": [51114, 1057, 558, 11, 300, 311, 665, 13, 2205, 5480, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18394288149746982, "compression_ratio": 1.4903225806451612, "no_speech_prob": 0.09386350214481354}, {"id": 270, "seek": 214100, "start": 2141.0, "end": 2146.0, "text": " Okay, so on with the show.", "tokens": [50414, 1033, 11, 370, 322, 365, 264, 855, 13, 50614], "temperature": 0.0, "avg_logprob": -0.41746980493718927, "compression_ratio": 0.7647058823529411, "no_speech_prob": 0.8814774751663208}], "language": "en"}