1
00:00:00,000 --> 00:00:03,000
In the interest of time.

2
00:00:03,000 --> 00:00:05,000
So,

3
00:00:05,000 --> 00:00:09,000
Brett introduce yourself and on with the show.

4
00:00:09,000 --> 00:00:11,000
Already.

5
00:00:11,000 --> 00:00:15,000
Is that show up for folks.

6
00:00:15,000 --> 00:00:17,000
I'm seeing nothing.

7
00:00:17,000 --> 00:00:19,000
No, no dissent. All right.

8
00:00:19,000 --> 00:00:24,000
Today, I'm going to talk about micro e fourth on the web.

9
00:00:24,000 --> 00:00:29,000
I'm actually going to adjust.

10
00:00:29,000 --> 00:00:34,000
I can see my slides are better yet.

11
00:00:34,000 --> 00:00:38,000
Hide that entire.

12
00:00:38,000 --> 00:00:41,000
All right.

13
00:00:41,000 --> 00:00:48,000
So, micro e fourth is related to ESP 32 fourth,

14
00:00:48,000 --> 00:00:51,000
which you've heard me talk a bunch about.

15
00:00:51,000 --> 00:00:56,000
It's a version of it's a, they're really one in the same built from

16
00:00:56,000 --> 00:01:02,000
the same source base ESP 32 fourth is the variant that targets ESP 32.

17
00:01:02,000 --> 00:01:08,000
We branded it that way to make it clear to folks, but.

18
00:01:08,000 --> 00:01:13,000
It's a, it's an e fourth with a minimal amount of non fourth code in it,

19
00:01:13,000 --> 00:01:18,000
which is a weird thing to say for a fourth that's created in C.

20
00:01:18,000 --> 00:01:23,000
It tries to have minimal redundancy so that you don't end up having to

21
00:01:23,000 --> 00:01:29,000
describe an op code once in its code and another time in some table somewhere.

22
00:01:29,000 --> 00:01:35,000
It tries to make it possible to add one line of code to add an op code.

23
00:01:35,000 --> 00:01:37,000
To the system.

24
00:01:37,000 --> 00:01:42,000
The kernel is compiled from inline fourth text.

25
00:01:42,000 --> 00:01:47,000
So it start up, it does the sort of inefficient thing of booting up the system.

26
00:01:47,000 --> 00:01:52,000
From fourth text, but it does this in service of the goal of having as little

27
00:01:52,000 --> 00:01:55,000
non fourth as possible in the system.

28
00:01:55,000 --> 00:02:03,000
And there's support for Windows Linux ESP 32 and finally after a long delay the web

29
00:02:03,000 --> 00:02:09,000
originally when I had started working on this particular fourth kernel.

30
00:02:09,000 --> 00:02:14,000
I had intended to have web support and a number of things got in the way,

31
00:02:14,000 --> 00:02:19,000
not least of which is that I think that trying to do all those things in one

32
00:02:19,000 --> 00:02:22,000
code base may not have been the best choice.

33
00:02:22,000 --> 00:02:26,000
But I'll talk about that as we go through it.

34
00:02:26,000 --> 00:02:28,000
Why the web.

35
00:02:28,000 --> 00:02:31,000
The web is portable and powerful.

36
00:02:31,000 --> 00:02:37,000
It offers a rich set of API's that let you do all sorts of things from

37
00:02:37,000 --> 00:02:43,000
access, the graphics of your device to local files.

38
00:02:43,000 --> 00:02:50,000
If there are API's for local files, there are API's for even serial access now.

39
00:02:50,000 --> 00:02:53,000
So you can do quite a lot on the web.

40
00:02:53,000 --> 00:02:56,000
It's also possible on the web to go fast.

41
00:02:56,000 --> 00:03:01,000
The days of JavaScript as sort of the only path to do a thing on the web are

42
00:03:01,000 --> 00:03:05,000
over and due to things like WebAssembly.

43
00:03:05,000 --> 00:03:12,000
You can now in all the major browsers run very performant code.

44
00:03:12,000 --> 00:03:18,000
There was a precursor to WebAssembly called Asm.js, which I've made some use of in

45
00:03:18,000 --> 00:03:28,000
this application which I'll talk about and has the virtue that in Chrome at

46
00:03:28,000 --> 00:03:33,000
least when you have Asm.js it actually will get converted underneath to WebAssembly.

47
00:03:33,000 --> 00:03:37,000
I know this because I happened to have been the one that implemented the

48
00:03:37,000 --> 00:03:41,000
version that lives in V8 now.

49
00:03:41,000 --> 00:03:45,000
And it's similar but not exactly the same at least as I understand it in

50
00:03:45,000 --> 00:03:48,000
Firefox and some of the other browsers.

51
00:03:48,000 --> 00:03:53,000
The other great thing about the web is that it's easy to show people things.

52
00:03:53,000 --> 00:03:57,000
I can hand out a URL and folks can go there.

53
00:03:57,000 --> 00:04:01,000
And this relates to the second point, which is that people don't have to trust me.

54
00:04:01,000 --> 00:04:09,000
If you download the version of Micro E4 for Windows, unfortunately you will

55
00:04:09,000 --> 00:04:12,000
probably get some security alerts from running it.

56
00:04:12,000 --> 00:04:22,000
And this is because I have not signed the binaries on Windows and the antivirus

57
00:04:22,000 --> 00:04:28,000
systems that are out there look at the small headers on a piece of fourth code

58
00:04:28,000 --> 00:04:31,000
and think that this looks kind of questionable and the combination of a

59
00:04:31,000 --> 00:04:36,000
lack of a signature and all of that means that it will warn you about running it.

60
00:04:36,000 --> 00:04:43,000
And unfortunately this is a problem that versions of Win32 fourth face as well.

61
00:04:43,000 --> 00:04:48,000
In comparison, the web I can just show you a URL and actually at the end of this

62
00:04:48,000 --> 00:04:53,000
presentation I'll encourage you all to check out what I put up.

63
00:04:53,000 --> 00:04:59,000
So the overall approach in Micro E4 is that I try to make each op code be

64
00:04:59,000 --> 00:05:04,000
something that I can define in just one or two lines of C code.

65
00:05:04,000 --> 00:05:08,000
And the goal is to have a reasonable list of op codes.

66
00:05:08,000 --> 00:05:13,000
Originally I kind of focused on the minimal set similar to classic E4, but

67
00:05:13,000 --> 00:05:17,000
especially if you look at the current version, there's a number of additional

68
00:05:17,000 --> 00:05:19,000
op codes that have been added.

69
00:05:19,000 --> 00:05:25,000
I've added as many as I have partially because on ESP32 this has the advantage

70
00:05:25,000 --> 00:05:32,000
that op codes implemented in C end up taking less of the RAM of the system.

71
00:05:32,000 --> 00:05:37,000
They can end up in flash memory and so more memory becomes available for the

72
00:05:37,000 --> 00:05:39,000
running application.

73
00:05:39,000 --> 00:05:44,000
After you define those op codes, you're able to use a very small set of system

74
00:05:44,000 --> 00:05:51,000
variables that sees in a structure.

75
00:05:51,000 --> 00:05:55,000
And those same variables are accessible from forth.

76
00:05:55,000 --> 00:06:00,000
And then the key idea is that there are five core op codes that are non-trivial,

77
00:06:00,000 --> 00:06:06,000
that don't fit in one or two lines, that are implemented in larger C functions.

78
00:06:06,000 --> 00:06:12,000
These are op codes that could be built from the other op codes because the

79
00:06:12,000 --> 00:06:15,000
other op codes are sort of fully general.

80
00:06:15,000 --> 00:06:21,000
But they're done in high level C code because they allow the fun trick that

81
00:06:21,000 --> 00:06:26,000
with those five, you have enough of the fourth system in place that you can

82
00:06:26,000 --> 00:06:30,000
boot the rest of the system from there on out with forth.

83
00:06:30,000 --> 00:06:36,000
And so they're carefully chosen to be sort of the crucial building blocks to

84
00:06:36,000 --> 00:06:38,000
have a full fourth system.

85
00:06:39,000 --> 00:06:44,000
And they also sidestep another problem, which is that if you have to assemble

86
00:06:44,000 --> 00:06:51,000
loops, you very quickly get into the problem that you now need an assembler

87
00:06:51,000 --> 00:06:53,000
to bootstrap that part of your system.

88
00:06:53,000 --> 00:06:58,000
So they both serve the purpose of being crucial to executing fourth code,

89
00:06:58,000 --> 00:07:07,000
but also they avoid needing to have any kind of mechanism for assembly.

90
00:07:07,000 --> 00:07:10,000
And then the rest of the system is in fourth.

91
00:07:10,000 --> 00:07:15,000
So there are some design choices that are in micro e-forth that are not fundamental

92
00:07:15,000 --> 00:07:17,000
to that model.

93
00:07:17,000 --> 00:07:21,000
It happens to be indirect threaded just because that's what I did at the time.

94
00:07:21,000 --> 00:07:29,000
Partially this is because it being a fourth implemented in C,

95
00:07:29,000 --> 00:07:35,000
it needs some type of op code that's explicitly stored and I found it more

96
00:07:35,000 --> 00:07:37,000
important to have these live in a cell.

97
00:07:37,000 --> 00:07:41,000
I didn't want them to be direct threaded and live in line.

98
00:07:41,000 --> 00:07:47,000
There isn't really, there isn't a real architecture underneath when you're

99
00:07:47,000 --> 00:07:50,000
targeting C, you're targeting the sort of the C virtual machine.

100
00:07:50,000 --> 00:07:54,000
And so it made sense to me to do an indirect threaded fourth.

101
00:07:54,000 --> 00:07:59,000
Also it makes words like C and does a little bit simpler.

102
00:07:59,000 --> 00:08:04,000
One other thing is that a truly direct threaded fourth would have challenges,

103
00:08:04,000 --> 00:08:08,000
especially if I wanted to interoperate with machine code being done in C,

104
00:08:08,000 --> 00:08:14,000
but an indirect threaded fourth in the Linux version and in the ESP 32 version

105
00:08:14,000 --> 00:08:20,000
can use computer go-tos available in those compilers,

106
00:08:20,000 --> 00:08:23,000
even though that isn't actually a standard C feature,

107
00:08:23,000 --> 00:08:26,000
it's present in the vast majority of C compilers.

108
00:08:26,000 --> 00:08:30,000
And that avoids there being any in the assembly language.

109
00:08:30,000 --> 00:08:33,000
It's possible other models might go faster, especially on the web.

110
00:08:33,000 --> 00:08:38,000
I've wondered if it's the right model, but that is what it is for now.

111
00:08:38,000 --> 00:08:40,000
It uses unlimited stacks.

112
00:08:40,000 --> 00:08:45,000
This is a place where I deviate from some of Dr. Ting's choices.

113
00:08:45,000 --> 00:08:47,000
This is a mixed bag.

114
00:08:47,000 --> 00:08:53,000
I did this because it was what was present in the originally fourth model.

115
00:08:53,000 --> 00:08:59,000
One thing that it lacks, especially on ESP 32 that I sometimes regret,

116
00:08:59,000 --> 00:09:05,000
especially when the thing crashes is that by allowing the stack to be anywhere in memory,

117
00:09:05,000 --> 00:09:08,000
you can easily run them up with the stack.

118
00:09:08,000 --> 00:09:14,000
Dr. Ting used a fun trick of using only a bite size pointer for the stacks

119
00:09:14,000 --> 00:09:21,000
and having them wrap around, which avoids the stack getting off the rails.

120
00:09:21,000 --> 00:09:25,000
I support 32-bit floating point values.

121
00:09:25,000 --> 00:09:30,000
And this is primarily because this was a feature that ESP 32,

122
00:09:30,000 --> 00:09:36,000
as I don't do 64-bit floats because ESP 32 doesn't have them in hardware.

123
00:09:36,000 --> 00:09:42,000
Also, it's with an eye to eventually I plan to get back to my deep learning in fourth talk

124
00:09:42,000 --> 00:09:46,000
and hope to make use of micro E4 for that.

125
00:09:47,000 --> 00:09:55,000
And it tends to use avoid counted strings just because it happened to fall out that way.

126
00:09:55,000 --> 00:09:58,000
So how does the system build up?

127
00:09:58,000 --> 00:10:02,000
We'll go through the C version because as you'll see in a moment,

128
00:10:02,000 --> 00:10:06,000
the web version is actually converted from that version.

129
00:10:06,000 --> 00:10:09,000
There's a small set of registers that you have to decide.

130
00:10:09,000 --> 00:10:12,000
And let's talk about what each of them are for.

131
00:10:12,000 --> 00:10:14,000
There's an instruction pointer.

132
00:10:14,000 --> 00:10:16,000
There's a return stack pointer.

133
00:10:16,000 --> 00:10:18,000
There's a data stack pointer.

134
00:10:18,000 --> 00:10:25,000
And then I keep the top of stack in a register or virtual register as it is all through a layer of abstraction.

135
00:10:25,000 --> 00:10:30,000
There's a work register that as Next operates,

136
00:10:30,000 --> 00:10:40,000
it first loads the address pointed to by the instruction pointer into the work register.

137
00:10:40,000 --> 00:10:45,000
And so that can be useful for gluing things together, for example, and does.

138
00:10:45,000 --> 00:10:47,000
There's a floating stack pointer.

139
00:10:47,000 --> 00:10:51,000
And then I ended up needing a single template float value.

140
00:10:51,000 --> 00:11:01,000
I define and see a bunch of convenience operations that implement some of the core stack manipulation.

141
00:11:01,000 --> 00:11:08,000
These end up being reused in the op codes rather than sort of have less readable C code there.

142
00:11:08,000 --> 00:11:22,000
Some of the variable length ones are more useful for ESP 32 forth where some of the bindings are for calling into libraries.

143
00:11:22,000 --> 00:11:27,000
Make these useful. They're not actually that useful in the kernel.

144
00:11:27,000 --> 00:11:34,000
The outer structure of the thing is really built, built around the idea that you want to run your fourth.

145
00:11:34,000 --> 00:11:47,000
And then you might actually need to yield back to the system on ESP 32, you need to yield back to the system because some of the libraries assume that you will return control back to the thing that called in.

146
00:11:47,000 --> 00:11:56,000
And on the web, this is even more important because the web has a sort of an event loop that if you don't return to a number of things, get gummed up.

147
00:11:56,000 --> 00:12:06,000
And so for that reason, it's important to have the fourth be structured such that you can have a yield word that parks the interpreter and yields back out to the system.

148
00:12:06,000 --> 00:12:25,000
So you everything when you enter is sitting on the return stack, you unpark things which work sort of like this, where you pull out the instruction pointer the stack pointer the floating pointer stack pointer and then unbox the top of the stack.

149
00:12:25,000 --> 00:12:41,000
And then, if you need to yield, or when you do eventually need to yield you to you park everything so that you only have to hold on to that single return stack value to find your place back.

150
00:12:41,000 --> 00:12:57,000
To be able to define the op codes in a single line I use a, a C trick called an X macro. This lets you define a list of a list inside of a series of macro calls and to encode a table of information.

151
00:12:57,000 --> 00:13:11,000
You can then reuse portions of the list in multiple different places so the way this works is that I can define an op code, all on one line by describing the string that that is its name and forth.

152
00:13:11,000 --> 00:13:22,000
I have to give it a C name because it's useful to be able to have it for defining lists of op code constants and things like that.

153
00:13:22,000 --> 00:13:34,000
I wish I didn't have to do this because it's actually redundant, but I have not found a way around that. And then there is a, and then there's the code in C that implements the op code.

154
00:13:34,000 --> 00:13:53,000
And I can use that a list of op codes described in that way, for example, a platform op code list for describe that way I can populate an enumerated type, holding out just the, the op code name and prefixing it with a name if I need to, or later in this is this

155
00:13:53,000 --> 00:14:11,000
op code is actually from the Windows version. When I want to switch and dispatch in the, in the core of the interpreter, I can just describe my next operation, and then have all the op codes be played out and I end up not needing to list them each in each of these places because

156
00:14:11,000 --> 00:14:16,000
I don't have that shared list.

157
00:14:16,000 --> 00:14:29,000
I then for convenience, I'm able to define a set of alternate short names that let me define just the name and the code for a word.

158
00:14:29,000 --> 00:14:44,000
One of the biggest distinction is that some words are valid. See identifiers and others are not. And so, to make things a little more pithy, I'll use this why label to define words like and that happen to be valid.

159
00:14:44,000 --> 00:14:56,000
See identifiers, but for words like see at where it would not be a valid see identifier I have to make up some C name for it, and then I have the code in one line.

160
00:14:56,000 --> 00:15:02,000
If I defined a dupe as a macro, it causes problems and so I end up having to treat dupe.

161
00:15:02,000 --> 00:15:13,000
Especially, but it's very, very handy to have a dupe macro if I were really clever I suppose I come up with a different name for the dupe macro and used in this way.

162
00:15:13,000 --> 00:15:22,000
But anyways, and in that way I'm able to describe all of the op codes that I need to define the core of the fourth.

163
00:15:22,000 --> 00:15:36,000
And I do have some other variations. If you go looking at the source code for micro view forth. There's a little additional complexity I'm skipping over because of vocabularies I ended up originally it was just these x and y macros.

164
00:15:36,000 --> 00:15:55,000
But when I, and I implemented vocabularies purely in high level for as I got, got along in ESP 32 forth it became useful to have more of the vocabulary mechanism live in the C code and so there's.

165
00:15:55,000 --> 00:16:06,000
But I transitioned some of that into the C code because it was convenient to very sorry rather it more efficient for ESP 33 forth more of it ends up in flash memory.

166
00:16:06,000 --> 00:16:11,000
Anyways, once you've defined your op codes.

167
00:16:11,000 --> 00:16:20,000
All you need to do forth is is is this core loop you your quit is just a forever loop that evaluates a single word.

168
00:16:20,000 --> 00:16:29,000
And now, of course, the challenge is how do you define that evaluate one operation so here are those five magic words I was talking about.

169
00:16:29,000 --> 00:16:43,000
They have a dependency each of them on some of the system variables, and so that on the right or the system variables on the left of the, the five magic words the first of these is a word to parse a number.

170
00:16:43,000 --> 00:16:51,000
And it takes a string and attempts to parse it into a legitimate number for that it needs to know the base.

171
00:16:51,000 --> 00:17:02,000
This is, as you'll see in a moment relatively straightforward to do in high level C code, and avoids having to describe that using using forth out.

172
00:17:03,000 --> 00:17:14,000
parses and finds boundaries to the next word and updates the the end pointer and so on reading from the translation input block.

173
00:17:14,000 --> 00:17:24,000
Creation of a word is a little bit more complex than one line line just because you have to hook things into place and build up the dictionary structure.

174
00:17:24,000 --> 00:17:40,000
And then finding a word similarly, because it involves string comparisons and so on, it's, it's nice to have that as a high level word, and then those four words are used in to implement the value eight one, based on the current state.

175
00:17:41,000 --> 00:18:01,000
And if a word is not found, they call into back into a deferred word that's stored in in not found, and that initially is drop, but later on turns into throw, which, which lets me avoid needing to have throw there, and the system is booting.

176
00:18:01,000 --> 00:18:13,000
So I'm not going to show each of them but I'll show the parse word and the parse word relies on this little separate function which could be folded in but a word for matching.

177
00:18:13,000 --> 00:18:25,000
It's deciding if two characters are a match, and then it walks down and finds the boundary to for the next word.

178
00:18:25,000 --> 00:18:34,000
Once you have those five and that evaluation loop which please check out details in the source space, you can then boot from a string.

179
00:18:34,000 --> 00:18:51,000
You can end up, you can set the trend that the the tip to point to a gigantic C string that contains all of your fourth bootstrapping code and everything else gets it's built up from there the first thing that gets defined as comments because initially comments aren't supported and you need

180
00:18:51,000 --> 00:18:55,000
comments to be able to use comments and the rest of the code.

181
00:18:55,000 --> 00:19:05,000
And I won't belabor that but it's a it's a there's a fascinating sort of ordering in which you can you can do things to bring the world up. Well, how do we bring this to the web.

182
00:19:05,000 --> 00:19:20,000
Well, the simple answer is I convert this to asmjs now there there is a set of tooling that exists to do this a great tool by a person I actually know named Alonza Kai, called inscription.

183
00:19:20,000 --> 00:19:38,000
But it's a big pile of tools and involves LLVM and is is a lot of stuff, especially for my my small program and so I tried something different I hand converted the five core words to to asmjs because they're just sort of special enough that

184
00:19:38,000 --> 00:19:46,000
but there's only there you know they're only similar to what you saw with with parser they're basically each a screen full.

185
00:19:46,000 --> 00:19:57,000
And then I tried to come up with a set of automation to convert the op codes and we'll talk about that in a sec. So, asmjs I should talk about it for a second.

186
00:19:57,000 --> 00:20:01,000
It's definitely the best hack I've ever seen.

187
00:20:01,000 --> 00:20:15,000
It's the idea of embedding C code in JavaScript, which seems counterintuitive and it's does this by representing C semantics in inside of JavaScript.

188
00:20:15,000 --> 00:20:27,000
Inside of Chrome at least this gets converted to WebAssembly which is yet another format which I won't talk about today, which then gets converted actually into into real assembly and runs it with, you know, near native speeds.

189
00:20:27,000 --> 00:20:46,000
The cleverness of the hack of asmjs is that JavaScript represents values with data types that are not strong but rather, rather weak and so they are able to.

190
00:20:46,000 --> 00:21:00,000
They have a variable that can hold a string or can hold an integer can hold a floating point value. In fact, actually numbers in JavaScript are always double precision floating point values whether you sort of want them to be or not.

191
00:21:00,000 --> 00:21:19,000
And in it with the trick of asmjs is that you use a sort of redundant syntax where you incessantly or things with zero for example to indicate that something is a 32 bit integer, or you use this operation f round which rounds to the precision of a 32 bit floating

192
00:21:19,000 --> 00:21:39,000
point value to indicate that something is 32 bit floating point value and so in this way you're able to override the semantics of JavaScript such that you're making it clear throughout your code that that everything that a given variable is a is a 32 bit floating

193
00:21:39,000 --> 00:21:51,000
point value, for example, so it looks wasteful, but to a JavaScript interpreter that knows how to decode it, it can be converted into efficient code.

194
00:21:51,000 --> 00:22:06,000
It is largely get been superseded by WebAssembly but for the purpose of generating a thing by hand it's a little bit easier to generate by hand because it's human readable text and doesn't require additional tooling so that's what I ended up doing.

195
00:22:06,000 --> 00:22:22,000
So here's that same parse code, re expressed in asmjs, the memory accesses are relative to some arrays that are contained the entire memory map, and a similar thing was done to each of these.

196
00:22:22,000 --> 00:22:30,000
The rest of the system is blue and I noticed there's a question in the chat so I'll maybe take that. Oh, he's got a reference.

197
00:22:30,000 --> 00:22:47,000
So this system could in C could be built up with includes, but I actually do it with a combination of make files and some scripts for gluing it together and the reason that I do this is that for the ESP 32 version of my career for it.

198
00:22:47,000 --> 00:23:07,000
I don't have it one gigantic I know file. And I didn't want the sort of side effects that you get from using the C preprocessor to include a file. And so I structured using these scripts that ends up being useful because I can then use those same scripts to do some

199
00:23:07,000 --> 00:23:22,000
replacement patterns to try to convert all of the op codes. And so I do something. I do something like this I go through and have a series of replacements and some of these these are actually all string replacements but a few of them are regular expressions, where

200
00:23:22,000 --> 00:23:40,000
I use the C code with the equivalent as mjs JavaScript code, and the motivation here is that I hope to be able to avoid needing to update as mjs code when I change the C code.

201
00:23:41,000 --> 00:23:52,000
I've really learned the lesson it's a classic lesson that a sort of a badly implemented compiler done with string substitution is not a good idea.

202
00:23:52,000 --> 00:23:59,000
140 lines of replacements end up being required to handle all the op codes I have.

203
00:23:59,000 --> 00:24:15,000
These op codes are there's 150 lines of them so it's not much of a win there are some additional op codes that are added to support the efficiency of bringing more of the system inside so it is a net win in total, but not by much of a margin and so probably this is

204
00:24:15,000 --> 00:24:29,000
something that I should revisit probably would be worth just maintaining to two separate descriptions of the op codes that are that are do a proper compiler or use or use inscription.

205
00:24:29,000 --> 00:24:37,000
Talking to the outside so on the web of course I have one more problem I've got my great interpreter it runs but now how do I talk to the outside world.

206
00:24:37,000 --> 00:24:52,000
Well, I have a list of I have only a single op code that I use for this, I called it call confusingly and call calls into JavaScript, passing in the fourth stack as a parameter, which lets JavaScript decide how to interpret this.

207
00:24:52,000 --> 00:25:14,000
And then I start out with a table of JavaScript objects that contain what I'll term system calls. And so the first of these is a thing called set eval, which takes a three, three values it takes the starting pointer of a string in the fourth memory space, a length of

208
00:25:14,000 --> 00:25:32,000
string, and then the index of a slot in this objects array and JavaScript that I want to populate with the result of eval in that piece of JavaScript. So this lets me take a piece of JavaScript code in a string and forth, hand it over to to JavaScript,

209
00:25:32,000 --> 00:25:53,000
and store it in this array. And when I make a call, I call into a particular index my system call number in this table and so this lets me from forth, define past strings into JavaScript to define the the remaining op codes.

210
00:25:53,000 --> 00:26:10,000
And so, for example, this is the implementation of key question mark where I have a JavaScript function that interacts with sort of the outside world and JavaScript API's to to cope with trying to check the input buffer, if there's a key.

211
00:26:10,000 --> 00:26:21,000
I have this little shortcut here for read line to modes of operation which I won't talk about at length but there's a way to run a JavaScript interpreter at the command line and I also support that.

212
00:26:22,000 --> 00:26:30,000
And so I'm able to create this this system call binding all in fourth code and and hook things up.

213
00:26:30,000 --> 00:26:40,000
And that's that I've done that for sort of terminal input and output and even a little bit of graphics as we'll see in a moment, and to use the interpreter.

214
00:26:40,000 --> 00:26:56,000
I'm one giant JavaScript file. If you want to embed the interpreter somewhere you can specify a div tag with a particular ID and it will inject the interpreter there if it doesn't find that tag it will just happily embedded at the bottom of the page.

215
00:26:56,000 --> 00:27:04,000
There are some caveats star slash mod as you'll see I'll show you in a second is a lie I have not implemented it properly.

216
00:27:04,000 --> 00:27:08,000
It's on my list of things to fix but I haven't done it yet.

217
00:27:08,000 --> 00:27:10,000
I'll talk about sec.

218
00:27:11,000 --> 00:27:22,000
I think I picked maybe 16 megabytes of memories the little large but it's a can value which is not ideal by use WebAssembly WebAssembly does support a dynamic key.

219
00:27:22,000 --> 00:27:32,000
The terminal is too slow and it's just because I haven't had time to optimize it I'm using the JavaScript that I'm using to update it is less than ideal.

220
00:27:33,000 --> 00:27:43,000
Because of floating point support there's actually a sixth core opcode that's required that they conversion to from a string to a floating point value.

221
00:27:43,000 --> 00:27:49,000
It's not strictly required if you were if you wanted to strip out the floating point support but it is required.

222
00:27:49,000 --> 00:27:52,000
It is used in the current system.

223
00:27:52,000 --> 00:27:57,000
Star slash mod is is implemented with this piece of JavaScript code right now.

224
00:27:57,000 --> 00:28:09,000
And this is not right because what it's doing is it's, you know, star slash mod right should take a times be and then divide by C and return the, the division results in the modular result.

225
00:28:09,000 --> 00:28:24,000
It's supposed to extend it to double word size, but unfortunately there is, although there is a, there is actually a brand new 64 bit, actually arbitrary precision type in JavaScript.

226
00:28:24,000 --> 00:28:38,000
I'm not confident in the browser support to make use of it here I'll actually have to check up on that before I fix this problem so for now, I'm converting everything to 64 bit floating point and doing the division and so you can end up with some in precision.

227
00:28:38,000 --> 00:28:52,000
So, the right way to fix this is either to use that arbitrary precision type, or I will probably need to eventually, or an alternative is you can you can sort of do the bit shifts and tricks to do divide correctly.

228
00:28:52,000 --> 00:29:00,000
There are many happy things of this implementation one is that I was able to quickly throw in a little bit of graphics not quite as much.

229
00:29:00,000 --> 00:29:14,000
And I hope to be able to run the heart game I demoed many times back but I'm not quite there yet, but I got some of the pieces. And the other great thing is that this implementation is likely to be reasonably fast and be able to do some interesting

230
00:29:14,000 --> 00:29:23,000
graphics because the memory space is something that you can pass over to WebGL and do fun things. So with that I'm going to switch over and do a quick demo.

231
00:29:23,000 --> 00:29:36,000
Maybe you can find this if you go to the easiest way to get there is just e4th.appspot.com. And if you click to the right on web, it will bring up the web version of the system.

232
00:29:36,000 --> 00:29:49,000
I think it has the same underlying mechanisms as on the other platforms. I'll do vlist list at the dictionary here.

233
00:29:49,000 --> 00:30:08,000
So all the plumbing is there so if I if I do, if I define a word, let's say I do test, and I'll do for I print next turn, I can print things out. I can do see on that word, and it will attempt to decompile it.

234
00:30:09,000 --> 00:30:27,000
And the same is true of all the words in the system that are defined in higher level words. So for example, I've got this word fill 32, which is part of the system and you can decode and see the inner op codes for it.

235
00:30:27,000 --> 00:30:44,000
In addition, there's there's a little bit of support for graphics. I took a little inspiration from from the Apple to Apple to and have a word set that GR will bring you into a mode where there's graphics above and you continue to have the terminal down below.

236
00:30:44,000 --> 00:31:05,000
So you can set the color. Let's say we do a red, red is in the, the value color, and then I can draw a box. The coordinate system by default starts at 1000 by 1000.

237
00:31:05,000 --> 00:31:15,000
You can use the words to redefine it which I'll never to document on the website at some point soon. But you can, for example, draw a box.

238
00:31:15,000 --> 00:31:25,000
And there's, you can, you can disable the visibility of the show text.

239
00:31:25,000 --> 00:31:29,000
You can hide the text and get to sort of a full graphic screen.

240
00:31:29,000 --> 00:31:39,000
You can get the scrolling on the side there to go away. Actually here. Well, that page. I'm going to re enable.

241
00:31:39,000 --> 00:31:41,000
See what I'm typing.

242
00:31:41,000 --> 00:31:45,000
One show.

243
00:31:45,000 --> 00:31:49,000
And you can go back to text mode with just the word text.

244
00:31:49,000 --> 00:31:54,000
The more right now box is the only word that draws anything.

245
00:31:54,000 --> 00:31:59,000
This this fourth has vocabularies and the works like, like the others.

246
00:31:59,000 --> 00:32:08,000
If you go into the internals vocabulary, you can see some of the stuffing. So for example, there's that s float word that we were talking about earlier.

247
00:32:08,000 --> 00:32:20,000
You can examine all sort of all of the inside. So if you examine, you can even see the insides of C. And if you want to see, see the insides of the words that are in there, you can go examine them.

248
00:32:20,000 --> 00:32:35,000
We can very briefly look at the, if you go into the JavaScript console you can see the source code you can see the source code by the way on GitHub as well but to give you an idea the web page here contains very little to bootstrap things.

249
00:32:35,000 --> 00:32:46,000
It's actually all plumbing for the menu at the top, but to actually embed it is just these two lines at the bottom. The interpreter itself lives down here.

250
00:32:46,000 --> 00:33:01,000
And as you see it, it starts out with a few constants and then the very first thing is actually just this gigantic fourth string, which contains the, all of the bootstrapping code some of this of course looks like JavaScript because it's JavaScript

251
00:33:01,000 --> 00:33:18,000
and you'll notice that it's actually embedded in this multi line string that I've defined in fourth to be passed over so sort of mixing JavaScript and, and forth, and then way down here you get to the point where you actually see the insides and the.

252
00:33:18,000 --> 00:33:32,000
The result of having compiled the C, and then converted and so there is a or sorry compiled in C extracted the set of op codes. And so things are a little bit more splayed out than they are in the C version.

253
00:33:32,000 --> 00:33:48,000
And there's a few helper words that are one line macros that are multi line in fourth but you'll see that, you know, you've got words like create here, and there is there are some, there's here's parse, here's convert which is that s convert and so on.

254
00:33:48,000 --> 00:34:03,000
And then, most of the bottom of this is actually just a table to build up the set of words, and, and then some initialization code. I know and here's the here's the op codes splayed out and as mjs in a gigantic switch state.

255
00:34:03,000 --> 00:34:07,000
In any event that there it is.

256
00:34:08,000 --> 00:34:16,000
Check it out I'll be trying to bring it up to parody and support things like color and the terminal and stuff like that.

257
00:34:16,000 --> 00:34:25,000
In future version of revisions. Are there any questions.

258
00:34:25,000 --> 00:34:28,000
Very cool.

259
00:34:28,000 --> 00:34:33,000
Check it out.

260
00:34:33,000 --> 00:34:40,000
There I was operating in zombie mode.

261
00:34:40,000 --> 00:34:46,000
The past three or four days unable to get the agenda posted.

262
00:34:46,000 --> 00:34:52,000
When, fortuitously,

263
00:34:52,000 --> 00:34:58,000
a talk appeared in the queue as if by magic.

264
00:34:58,000 --> 00:35:02,000
Indirect credit code profiler.

265
00:35:02,000 --> 00:35:09,000
So, how long do you estimate your talk to the last.

266
00:35:09,000 --> 00:35:14,000
I think last time it took me half an hour.

267
00:35:14,000 --> 00:35:17,000
I expect to be a little bit faster this time.

268
00:35:17,000 --> 00:35:23,000
Okay, if you can get the ball across the plate in 20 minutes that will work out nicely.

269
00:35:23,000 --> 00:35:38,000
What we're going to do is bump the doctor takes stuff you all have access to it on our YouTube channel. Does anybody not know where the YouTube channel that cares where the YouTube channel is.

270
00:35:38,000 --> 00:35:41,000
All right, that's good. Good reaction.

271
00:35:41,000 --> 00:35:46,000
Okay, so on with the show.

