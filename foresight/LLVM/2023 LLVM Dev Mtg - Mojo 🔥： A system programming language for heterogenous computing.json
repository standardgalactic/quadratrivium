{"text": " We're very happy to be here and talk a little bit about what we've been up to. So we'll start with what is Mojo? At a glance, the top-level points of Mojo is that it's a Pythonic systems programming language. So what does that mean? That means we're here to do really cool things with systems and compilers, and it happens to look like Python, but forget everything you know about Python, please, please. So this thing is about one year old, so it's still pretty early, it's still in development. It's still quite interesting and doing some cool stuff, though. We also have a vibrant community. We have over 150,000 users. We have a big community in Discord, and there's a bunch of excitement around this. So we'll dive today into why did we do this in the first place? That's often something we're asked. We'll talk about how we approach designing a new language from scratch. We'll talk about internal implementation details, including some of the horrible things we did to LLVM. Talk about what this means for accelerators and compute, and then wrap things up. So first, why? Why, why, why, why, why? So many of you are working on AI, and if you work on AI, the question I will ask of you all is, if AI is so important to the world, why is all this offer so bad? This is a huge question, a huge problem, and I think that many of us who have been working in this industry for a while have been struggling with solving this problem in many different ways. And so for me, when I look at this, I think that the challenge is really fragmentation, complexity. It's all these systems that do not work very well together, that are being built by well meaning people in different groups and areas, but they don't really actually work together. And so for a user, this is a huge pain point. And why is this? I'll speak for myself. If you're enabling a chip, you're focused on the chip. So many of us are paid to solve one specific problem, we're not here to solve an industry scale problem, and you can't afford to do it. You don't have the time, you don't have the schedule, you don't have the headcount, whatever. Often the organization that you're within, in my experience, makes it very difficult to solve some of these problems. And so our approach at Modular is that we need fewer things that work better. And so that's what led us to building Modular in the first place. It's really kind of an organization that can span across many different of these problems and invest for the long term in building and hopefully lifting the industry over time. So how do we do this specifically? Well, we're building what we call the AI engine. Well, the AI engine, if you look at modern ML stack, a lot of folks are trying to throw layers of Python on top of all this AI tech that has been built up. We're tackling it at the Herber software boundary, reinvesting, no surprise, and compilers. And so what we want to do is we want to unify and integrate all these low level technology systems so that innovation can happen up on top with programming models and frameworks and all that kind of stuff. Our approach is to meet people where they are. So people use PyTorch, people use Jax, people use TensorFlow. That's awesome. These all have pros and cons, and there's other stuff as well. And very few people actually want to rewrite all their code. And for us, it's very important to be drop and compatible, meet people where they are, and work with their existing systems. The other thing is that this is not a research project, like there's a lot of really interesting and cool things that have been built over the last eight-ish years of AI infrastructure. It often gets fragmented out into all these different systems. We've learned from many of them, and so what we're doing is we're pulling this back together and doing hardcore engineering, not research, to build a production quality system that we hope can scale for the world. I'll go through this super quickly. It was an AI engine. Well, it's really two things. One is this operator graph. The operator graph in the interesting case is heterogeneous. So people often focus on, for example, the GPU, and how do I make matrix multiplications go fast? And that's a super important problem. But often folks forget that AI today is a distributed problem, involves the host, involves the accelerator, involves pre-processing, data loading, this whole thing. And so you can't really solve the AI problem for a user unless you really tackle this whole problem. And furthermore, this is really heterogeneous. As we've seen, there's all kinds of different accelerators, there's all kinds of different hardware. When you have a cluster, lots of machines, micro-architectures don't always match. There's a lot of complexity in this space. So many of us have been working on this, again, for a long time. And so we've seen the rise of kernel libraries. This is how many of these systems were first built. And one of the challenges that I won't go into in depth, many of you probably already agree, is that kernel libraries don't scale. And so many of us, for multiple years now, have been building AI compilers. And so there's lots of these, lots of different approaches, online kernel fusion, lots of cool algorithms getting vented and used. We can talk about all the different pros and cons of trade-offs. But the thing I want to claim is that neither of these approaches scale. Kernels don't scale, hopefully many people understand that, but neither do ML compilers. And to a compiler audience that maybe is more controversial than to a kernel audience. So I thought I'd dive a little bit into why this is and the challenges that we see with this led us to our approach with Mojo and the system. So the first is generality. I mean, empirically today, ML compilers are not very general, right? Generality includes not just matrix multiplication, again, data loading, preprocessing, all this stuff, but also dynamic shapes, varsity. There's better and worse systems out there, and there's definitely progress in this area. But if you're coming at it from a user's perspective, they want things to just work. And if they don't just work, then they'll move on and spend their time something else. Generality is also important because if you're, again, coming from a hardware enablement perspective, you don't really have time to invest in all the other parts of the problem. And so it makes sense that many of us working on bring up the chip don't actually focus on the big picture parts of the problem. Another one is community. So you all are wonderful compiler nerds. I love you all, obviously. And myself, a pretty big compiler nerd. But the problem is that nobody can hire a compiler engineer. This is pretty well known. And so with AI compilers, this becomes even worse, because how do you hire somebody who knows compilers, who knows AI modeling and all the different exotic new model of the day, who knows all the numerics and the data types and knows all the specialized hardware, and how do you find that unicorn person that knows all of these things together? It's very, very difficult out there. And if you need a compiler engineer to be in the loop of novel research, there's very few companies in the world that can afford or attract to do that. And so I believe that you cannot have a compiler-first approach to this problem simply because there's enough talent out there. I mean, I love you all, and you're all very valuable, but this is very difficult, particularly for the scale of what AI research is today. Second, if you're a compiler engineer, it seems really weird that we're re-encoding all of compute into IR builders and sanding out all this stuff. And so you feel like there must be a problem here at some point. Finally, there's this fragmentation problem. If you want to solve and build a heterogeneous compute system, we have to face the reality that AI developers, researchers, are in Python. The frameworks, the host-side compute, it's all in C++. The device-side is in CUDA, in SQL, and other things. And so if you want to build a system that can scale across all these different levels of abstraction, there's a huge fragmentation problem here, and we need to be able to unify this. Otherwise, we can't have one system that can reason about it. And so if you want to be able to build this and solve this problem, you have to kind of come back and look at the big picture of what's going on here. And the nature of compute has changed. So this is what has led us to Mojo. Now how do we approach building Mojo? I mean, you know the outcome, and we'll talk a lot more about how it works, but how do we even get here? Well, when we started Modular, we started with a thesis, a hypothesis. We believed that we could get to state-of-the-art performance against a lot of vendor systems and do so with a single source of truth in our code for numerics. This hasn't really been done before. There's definitely systems that have been around in the space. But this thesis, if true, can enable and unlock a huge amount of innovation in the industry. And so what we did was we said, okay, let's go invest in some very fancy compiler stuff, generalized fusion, and caching integrated distributed compilation, like lots of cool stuff. Let's figure out what we want to do, and then let's go validate that. But for validation, we didn't actually care about syntax. So what did we do? Well, we went, and we actually went and built the thing. We went and built a compiler and completely ignored syntax. All right, why? Well, MLR is great. You can write MLR by hand. You don't need a front-end. And so what we could do is we could actually go build major kernel libraries and things like this and validate. Architecturally, we could deliver the performance that we wanted to, show that the compiler worked, iterate rapidly on the compiler without having to change a dependency, and go and do this. And what we found, fortunately, is that it works. The technology we built actually is good. It worked. It was proven out. And then immediately, we figured out that writing large amounts of MLR by hand is maddening and doesn't scale, and there's no way a real normal user could actually do this. And so, but this validation of the algorithms of the compiler tech of the low-level system, which is very novel, and Jeff will talk about later, was really important to building our system and doing so without being anchored on syntax. I think it was very good for both focus, but also for the ability to iterate. So once you get that, you get to the point of saying, what about syntax? Syntax actually does matter. And so the three major approaches we looked at are, do we take an existing language like C++ or Swift or something like that? Do we do an EDSL? Do we do a new language? And so when we were talking about this, we came back to our core principles, our values, our goals, which is that we wanted to meet people where they are. And whether you like it or not, AI developers, but also most software engineers are all in Python. Right? Python is pretty arguably the most popular programming language in the world. And so if you're coming from a Python viewpoint, arguing with people, trust me, I've been there, to try to get them to switch to a different thing, is a huge amount of work and it doesn't really go anywhere. And so we realize and believe we had to go with Python, and what that meant is that meant that suddenly a bunch of existing systems are just off the table, like C++ is not Python, Swift is not Python. These things are not Python. And so that really allows us to focus our frame. What about EDSLs? Well, EDSLs are super common. They're super popular and they exist for lots of good reasons. They're relatively easy to implement. We've had several talks at the conference about how to use Python so that you can extract and build IR from Python ASTs and things like this. It means you don't have to build tooling, you don't have to retrain, you can get to market fast. The problem is that they provide a really bad developer experience. You don't get a debugger. This really can't fit into the existing systems. If you care about host performance and generality, Python's not there, at least not the level of performance that we care about. And so what we really want is we want a system that allows us to innovate at all layers of this stack. Okay, well, how about a new language? Again, you know kind of where we're going with this, but a new language has the advantage of you get the best quality result, you can control everything, you can invest in things, you can target CPUs with high performance, which is quite important to us. But what you need is a strong vision for what you're trying to do. You need a long-term commitment because the demo is easy, but production quality thing is hard. You need to be able to pay for it, you need to be able to track people, you need to be able to have a big target of developers that makes it worth doing in the first place. And so this is actually well known to be ridiculously expensive, like building new programming language is not a simple thing that you should reach for as your first outcome. But as you know, yes, we want a baby little mojo to be built and what we decide to do is actually do this. And why? Well, it's because it's the only way to achieve our goals, to achieve the best quality of result for AI developers and many other developers worldwide and be able to lift the industry. There are many point solutions that demonstrate many different capabilities, but we really want to go beyond this and integrate and unify the world. And so if you come back to what we need to do, we think that we have all the constituent ingredients here with a good vision, we think we know what we're doing. We also know how hard this is. So I personally built several major programming languages that are used in production and have seen the entire journey and made many mistakes and have learned from them. And so with full knowledge, we step into this and say, okay, let's do this. So I'll give you the high level design points of mojo. As you know, it's a member of the Python family. Over time, it will grow into being a full superset because we don't want to do a Python two to three thing anymore to Python programmers. As we said before, it's focused on system programming, high performance, working backwards from the capability, the speed of light of hardware, definitely not working forwards from what Python can do today. Also lots of hardware, anything with the program counter can apply. But coming back to this also, and we'll talk about this a little bit, it's about unlocking the modular compiler stack. And so instead of talking about the high level fluffy stuff, I'll introduce Jeff and he can tell you a little bit more about how it actually works. Thanks Chris for the introduction. So we are started off by de-risking the core hypothesis and we have an MLIR based compiler that is different a little bit from the systems that predated it. And we've proven that we can be state of the art. The problem is that we've got like 50,000 lines of handwritten MLIR. And handwritten MLIR is like write once, read never. It's so verbose, you have to write the types every time you use an SSA value. It's pretty hard to actually write incorrect code, but then it's not readable, it's unmaintainable and the new people being brought into the company are like, what is this? So we need syntax. We need a programming language for MLIR. Why all MLIR? Well it turns out that modern computers are getting really complicated. Modern types are getting really complicated. Look at just floating points. Most languages, give or take, have a flow and a double. But MLIR has things like float 8, E4, M3, FNUS. I'm sure it's useful, okay? And that means that we need to have access to it. There's probably a piece of hardware somewhere on it that uses this data type and it's very fast. That's just the tip of the iceberg. MLIR is such a vast ecosystem with many different kinds of hardware targets, domain specific dialects and so on. And we would like Mojo to be able to take advantage of all of that. So we need syntax trigger for MLIR in general. And then how do we approach something like that? Well we start with the types. In a programming language, types tend to be the most load bearing element. You need types to do computations on them after all. So let's start by focusing on a library-based language. That means that we write all the parts of the language in the library. And the good news is anybody can write libraries. So this scales the effort of engineering to everyone in the world who can write Mojo. Not just a couple of people who work on the language. And that's really important because we don't want built-in types in the language to be special or be more performant than what you can enable in the library because that bottlenecks performance and the scalability of the system to the people who work on the language. So we need to give people who use the programming language library authors the same power as language engineers. It turns out actually that Python has a really extensible type system. You could argue that user-defined types in Python are actually much more powerful than the built-in types like interfloat. And the reason is because Python provides this kind of ability to encapsulate type semantics behind Dunder methods, which are really syntactic wrappers. So let's just use that in Mojo. We use a struct, which is like a class, but it's densely packed in performance, to wrap an MLR type. And then we use Dunder methods as well as class methods to wrap MLR operations. And what you get is any MLR type will work. Any MLR operation will work. And so now we have 1 plus 2, Dsugar is to an MLR op index.add. The other important aspect is we need to make sure that these user-defined abstractions feel native, that they're zero cost. So how does Mojo do that? Well, it has a couple of bells and whistles to tell the compiler that treat this type in a specific way, effectively giving a built-in-like experience. And one of these is they always inline no debug, which will always inline the function, no question about it. And for a better debugging experience, it nukes out all the debug info, so you don't step into a plus of an integer. So we put this all together, just these pieces of basic types, so you have a simple while loop in Mojo. Well, the parser will then spit a bunch of source-level IR, right? But then Mojo has guaranteed optimizations that run all the time, such as the always-inliner and memtoreg. And then this gets desugarred down to IR that is pretty close to what we would have written by hand. And that's important because it, from the get-go, provides a predictable IR-gen model for the programmer, and it helps us get an off-ramp from all the handwritten MLIR. But so it turns out we've actually discovered what MLIR really stands for. It's Mojo Fire Emoji Language Intermediate Representation. And the best part is your dialect works, too. So this is zero cost abstraction around any MLIR, so let's say you have a shape dialect with a mosh.ape type, and it implements plus to concat and subscript to getDim. Well, now you can write shape functions in Mojo. It spits out some IR that's been desugarred to, and then you can ingest this IR and do cool compiler stuff like shape inference. And the best part is all of the language tooling just works. So you get code completion, you get doc generation, you get syntax highlighting, and even debugging if that's relevant. But MLIR just forms the bottom level of the language. It's how we talk to the hardware, it's how we talk to the various dialects. Building on top of that requires high-level abstractions, and the way you do that in Mojo was metaprogramming. So Mojo needs to build hardware generality, and the way we do that is with metaprogramming. So you can write a kernel without caring about what the vector length is, and then, say, in this example, ask the compiler to pick one for you. It turns out that metaprogramming is also pretty cool. Texts are nice, code reuse is great, and it allows to have scalable development. So where can we look at for a metaprogramming system? Well, I actually like C++, I don't know about you, and C++ has templates. And duct typing in C++ is really powerful. Let's see, write some pretty crazy generic code. The problem with that is that the usability is poor. I think template error messages get better every year, but there's still some room to go. And it turns out that for the kind of metaprogramming, high-performance programming needs, C++ just aren't good enough. So imagine you have a tensor type. It has a static or dynamic rank. It has a static or dynamic d-type. It has partially dynamic shape, partially dynamic stride. It gets ugly pretty quickly. So it's not good enough, and let's see if we can build something better. So it turns out, once again, Python actually has really powerful metaprogramming. Decorators can arbitrarily modify objects and return a function where there is a type. And with full AST reflection in Python is what enabled all these crazy libraries, such as the ML frameworks like PyTorch, Jaxx, and TensorFlow, as well as things like Numba. The problem with the Python metaprogramming is that it happens at runtime, which means it's slow, it's not going to run an accelerator, and it gives zero control over the generated code. So the challenge for us is let's try to do it at compile time. So that brings us to mojo parameters. Mojo parameters are compile time values that form the backbone of the metaprogramming system. So structs can have parameters. These are compile time values. Functions can have input parameters, and then you can declare name parameter values with alias declarations. So you can kind of think of them as being like C++ templates, but they're a little bit different. For example, in C++ you have using declarations for type aliases and constexpr declarations for compile time values. But in mojo, types are just compile time values, and so aliases and, say, compile time floats and compile time ints are the same thing. The most important thing that gives is that the meta language is the same as the actual language. And Zig really blaze the trail here by having no distinction between the metaprogram and the actual program. In mojo, we strive to ensure that almost any user-defined type and function can be used and called in a parameter expression at compile time. And the way we do that is with an MLI interpreter that has a full memory model. So to really drive this point home, we have an example here. It's fill a vector with a bunch of integers, OK, not too bad. This function can be called in either compile or runtime. And if it was called compile time, you can even return a type instance. And this vector has heap allocation that is computed at compile time and then used at runtime. So when does this happen? When do we do, say, instantiation of parameter values, function specialization, and interpreting of code? Well, it doesn't happen in the parser like in C++. So in mojo, we do parameter instantiation in a process called elaboration, and it happens later in the compiler pipeline. What that means is that now mojo needs a IR representation for parametric code. So in this example, we have a piece of IR, and we have a parameter in the IR called value. Importantly, this parametric IR is target agnostic. It's portable. So that means something like size of lives directly in the IR, and it is resolved by the elaborator. So this enables something like split compilation like CUDA, and perhaps one day separate compilation of generics like Swift. So the elaboration pass is an MLIR pass that performs function instantiation as an IR transformation. So in this piece of IR, we've got two calls to the function print int with two different parameters. It gets stamped out into two new functions, and the callers are replaced appropriately. One consequence of a pass to do elaboration is that the language is late bound by design. That poses a couple of language design challenges, but that means that you can do cool stuff like autotuning, where any parameter value can be autotuned, i.e., the elaborator says, oh, OK, width can be 2, 4, 8, 16, or 32. Then we just go have five instantiations of this function, and then use some benchmarking to pick the best one for you. So this is how we get the very bottom layer of hardware abstraction, where the programmer can write an algorithm, and then we let the programming language pick the best parameter for you. And this also allows us to avoid some of the performance problems of C++ templates. For example, let's see, you have a generic function, add. And for generality, we pass the arguments by const reference. Passing it by const reference is fine for a large struct type thing that doesn't fit nicely in registers like a string. But then for something like an integer, this ends up becoming const reference to an int, which for a trivial type like int is not very performant. And so if this function doesn't end up getting inlined, what ends up happening is the ints get pinned to the stack. This is bad for performance. With late elaboration and mojo, we can have late ABI lowering, which basically means that the source code is not the same as the ABI. And this makes language interop slightly more involved, but it's not that big of a deal. But what it means is that for a generic function, like add in mojo, when the elaborator instantiates the generic types, it can then change the calling conventions of the types to respect the guarantees that it has. So for a heavy type like string, it stays in memory, it gets passed around as a pointer, it's nice and efficient. But for an integer, it gets passed around in registers, in SSA registers, and returned out as a function result. So that's just an introduction to how mojo metaprogramming works. Let's talk now about more how the cogent architecture works and some of the more unique details of that. One of them is that the entire mojo compiler stack is driven by the ORCJIT from bottom to top. And this gives us lazy on-demand compilations so you don't compile things you don't have to. It enables responsive tooling, and it turns out that having a JIT is important for something like auto tuning in search. And we get compiler caching at each stage of the pipeline, meaning that you don't need something like Ccache to get code compilation caching. Well we also use ORCJIT not actually as a JIT, we use it to generate static code, like static archives and executables. And in the ORCJIT, we've built a really dumb but fast linker that just takes a bunch of object files, pulls out the symbols, and slams them together into a static archive. For a linker, we do call into the system linker. As we mentioned before, we have a pre-elaboration portable IR, but that also means that we can serialize this into MLR bytecode, and that makes mojo packages architecturally portable. A mojo package will contain this parser-level, source-level IR, as well as the pre-elaboration IR, and optionally, you have the post-elaboration and pre-compiled code for various targets. So what this means is you can ship mojo packages without source code, with just the bytecode. The parser is able to take out this source-level IR and reconstruct metadata, like function signatures and type members and so on. And with optimized and pre-compiled code in the packages, mojo packages become portable build caches. So if you're on a common system like an M1 Mac and you pull a mojo package, it will probably already have the pre-built code for you. So what does a compilation with a package look like? Well, if you start by importing a function from a package, the parser goes and reads out the declarations from the package, it will then lower into the full pre-elaboration IR, and the reason why you need the full parametric IR so that you can instantiate the function again, and so that the elaborate can call the interpreter on pre-compiled code. During elaboration, we don't re-optimize and re-stantiate all the functions, we just drop them out with the post-elaboration IR into the MLIR module. So that gives us LTO and MLIR, but I mean MLIR is pretty far away from link time, but it's a similar idea. But we actually trash these pre-compiled functions out of the IR before we go to LLVM, and that has some interesting implications. So mojo is a bit of an unusual, probably slightly controversial user of LLVM. So LLVM is fantastic. We love LLVM, we love everyone here. But it's got a couple of issues. The most standout of these is that it's single-threaded. And what that means is on a modern system like an AWS 192 core machine, you get arbitrary slowdown for compilation speeds. You only use one core. The other problem with LLVM is it's got a couple of passes that don't tend to be strong enough for our use cases, and they're difficult to control and predict. A lot of the stuff in LLVM was built for something like Clang, but in mojo, we'd really love to be able to autotune and unroll factor. So the good news is that MLIR is a thing. So let's focus on the excellent strengths of LLVM. LLVM is great at stuff like scalar optimizations from instance to combine, and other function level optimizations like loop strength reduction. We ended up disabling passes like the vectorizer, the loop unroller, and even the inliner, as well as a couple of the other IPO passes. And the solution is to replace them in MLIR where we get intrapass parallelism and push many of these optimizations out into the library, which is something that Abdul will talk about in a bit. So what happens when you get rid of all of the IPO passes while you get to use LLVM as a perfunction code generator, this gives you full code gen parallelism at a function level across the entire stack. And what that means is that pretty much the entire mojo compiler pipeline is fully paralyzed except for the linker and the parser. Parser could be paralyzed one day. And that's really just the tip of the iceberg and what we could fit into one presentation. There's so much more to mojo, and there'll probably be more talks coming in the future, but for now I'll pass it over to Abdul to show you all how to write some fast code in mojo. So going back to what Chris said at the very beginning, we had a hypothesis to begin with. We want to write fast code. That's why mojo was written to begin with. We wrote things when MLIR, we've proven a lot of the tech. Let's write things in mojo and let's show the performance. So let's step back. How does existing performance libraries, how are they built today? Well, the short answer is whatever it takes to get performance. There's no style guide or anything like that that's usually maintained. That also means there's a lot of suffering because there's lack of tooling, et cetera. So what people do is they write things in assembly. Oh, great. Please don't. It's not a super productive programming language. Others build compilers as C++ templates. And God forbid, you mess like one of the sevens becomes a six, and you get some nasty error message. Others build C++ DSLs that generate ASMs. Others write Python programs that generate assembly. Others write Python templates that generate C++ templates that you feed into client. And these are not research projects. These are production libraries that are used today. You probably used one already. These are by the big companies. And as a result, you're kind of losing a lot of things. You lose on maintainability, debugging, tooling, and becomes hard to develop and iterates on these performance libraries. And that's why they call them performance ninjas, right? You lock them in a room, give them some coffee, and then they give you speed up. And we don't want to do that. We want to reduce suffering. The other thing is what happens is these performance libraries are pre-built and shipped as kind of black box binaries. And what that means is you've encoded, when you built ahead of time, you've encoded all the hardware semantics, tile factors, etc. In the library, you've made it into a black box, so other higher level things in the stack, like a graph compiler, cannot reason about what the library is doing. You've also encoded specialized patterns, popular things like a resonant block or a transformer block into your library. And what happens if there's a transformer version two or a resonant 53? You're kind of screwed in that domain. There's other things, like there's no consistent API. There's BLOSS, there's BLIS, there's 1DNN, etc. And the distribution store is even worse. There's a 1DNN and there's a ZNDNN. But then if you are on ARM, you have to use something else as well. So we want to solve all of these things. And that's the reason why we built Mojo. We built it to solve our problem of writing high performance libraries. And the first thing we want to make sure is the developer is happy. And they have all the tools that they need to be productive. So rather than, as kind of Chris mentioned, a lot of developers are not compiler engineers. They can write libraries, they probably cannot go and write a pass and so on. So let's put optimizations in the library and I'll have some examples later on. Let's also leverage what computers are good at. So when I was in grad school, a lot of grad students were essentially grid searchers. They would just enumerate everything, try 50 things. You lock them again in a room for a month and they say, oh, the best tile factor is six and four and so on. Let's not do that, let's use computers. Computers are great at these sort of things. They can scan things, you can do smart searches and so on. So let's use auto tuning. Let's use algorithmic selection and let's build that in the language. And let's make sure that we have tooling to make these people productive. Debuggers, how do you debug the Python template that generates C++ template that does something else? It's hard to begin with to debug C++ templates. Let's also build a language that's aware of the 21st century. So SIMDs are a thing. So let's be SIMD first. Let's have scalars to be a degenerate form of SIMD, a SIMD of length one. And make the SIMD parametric. Let's also make the library, the one we ship, the standard library. Have first class support for SIMD types. Also multi-core is a thing. So let's build parallelism and asynchronous into the language as well. And finally, we can have these nice things. But sometimes people are like, I want my assembly back. Or I want to use the LLVM intrinsic. Well, all of this is built on top of MLIR and LLVM. So you can get any of the intrinsics that you want. You can reach into them. You can also write inline assembly, which is kind of interesting given that you're in a Python syntax language. And you can target any LLVM back end. So we're not like, we're standing on the shoulders of giants. So we're leveraging all LLVM and MLIR back end infra to do that. Let's also not build a DSL. So even though some of our use cases is AI, the programming language should be general. I should be able to do some operations in Mojo, but then do the plotting through our Python integration. And that requires a general purpose programming language. So one of the things that we made a decision on is let's make the kind of compiler lean and let's move a lot of the optimizations and the infra to be kind of functions in the Mojo library. So we use very limited number of dialects in MLIR core. And I know this might be controversial. So we're not using vector, arith, lin-alg, or any of these dialects. MVVM, any of these dialects. We're only using the LLVM and index dialect. And there's a bunch of reasons for them. Sometimes they're not general enough. Sometimes they don't fit in our use case. They bring in a lot of code that we don't care about. And there's like, for the lack of better terms, sometimes like cyclic dependencies and so on. And we, having a lot of the functionality in Mojo code means you could iterate a lot more quickly. So let's implement something like a vector dialect type of thing in Mojo. So we have the simd type and we have a function called reduce max. And if the size of the width of the simd vector is one, we're just gonna return the scalar directly. If we're on x86, it ends up like there's a LVM has an instruction for horizontal addition or horizontal max. That's not great for Intel. So we could do a kind of a tree reduction thing. But if it's floating points, we use a different algorithm and we call it directly to an LLVM intrinsic. This is compared to how the vector dialect lowers. You're writing essentially the same stuff minus the special case for x86 in essentially C++ code. So we'll lower our directory to the LLVM dialect. We could also do similar things like transforms. So as Jeff mentioned, we disabled the LLVM vectorizer. And instead, we have folks be kind of opt in to the vectorizer. And we've implemented a vectorizer in these five lines of code. So in one case, we've parameterized the function on the simd width. And we're gonna call it for the specific simd width. And in the leftovers, we're gonna call the function with a value of one. So what does this mean to the developers? It means that when you're trying to do an optimization, when you're trying to add a new feature or target a new hardware, the first thing is not, I'm gonna need to write a dialect or I'm gonna reach into TableGen. The first thing is, I'm gonna reach into Mojo and I'm gonna do experiments and so on. You can invent new optimizations, weird ones, incorrect ones. Or maybe even point to optimizations that only works in this function, in this domain, in this context. This is all fine, but I care about performance. I'm also a compiler engineer, but I ultimately care about performance. So let's look at the performance of Mojo. So one thing that people anchor on is the Mandelbrot set. The Mandelbrot set, we have a blog post that was recently published. But essentially, at the end of the blog post, you end up with this 10 lines of code. And if you run this 10 lines of code, you get 68,000 times faster than Python. And you can kind of see the progression. You can look at the blog post after this presentation. There's a progression how to go to 90x faster all the way to 68,000 faster. But at the end of the day, this is the code that you're gonna see. But nobody cares about Mandelbrot. You can just waste a cheat in Mandelbrot. We're not cheating here, but nobody cares about Mandelbrot. So let's solve a hard problem. So let's look at matrix multiplication. So matrix multiplication has been studied since a lot of us have been born. There's also a lot more papers that were published this year about matrix multiplication. It's also difficult. The problem is dependent on the cache size and micro-architecture. It's also a core part of LA-PAC and the ML system, which means hardware companies to go in the top 500 supercomputers, they have to optimize MathMol. Or to be on the top of the ML perf, they need to optimize MathMol. So a lot of effort goes into optimizing MathMol. And these libraries have been developed for decades before some of us were born as well. But we also don't want to write the Python template that generates C++ template that maybe goes to Python again and so on. Let's be principled. So let's have a few kind of core things that we want from our MathMol. We want a single source of truth. We don't want to have multiple files. We want to have one implementation. We want it to be as fast or compete with state of the art. Even though we can read assembly and we can program C++, let's not do that. Let's write everything in mojo. Let's make it fusible and do fancy stuff, support dynamic shape, and work on multiple architectures, et cetera. Our core hypothesis from the very beginning. And here's what we ended up with. So this is, again, a blog post from a few months ago. We're actually faster than this now. But we can compare against the best in class on their hardware. So we're 1.4x faster than Intel on Skylake systems. And this is fully dynamic. We're not specializing on shape. We're not doing prepacking. I wish we were doing tricks. It's easy to get these results if we were doing tricks. But that's what we're doing. And we have no inline assembly. Unless we run the same code, but now on Intel, or sorry, on AMD, we're 1.6x faster. Do the same thing, but on ARM, we're 1.2x faster. In fact, our implementation is about 2,000 lines of code. This is a toy implementation, but this is putting everything together. The interesting thing about this toy implementation is this is what the llama.mojo, there's a public GitHub repo that's using this. And this implementation, using this, they are beating the llama.cpp implementation that's public. So with that, we've validated our hypothesis. You can build portable performance libraries with less suffering. And with that, I'm going to hand it off to Chris. Right. Give it to him. Awesome. So to wrap things up, Mojo is still early in development, as we talked about. There's still a lot more that is yet to be done. One of the things we're doing that's, I think, pretty cool is we're developing this all in public. And so we have a roadmap. You can go see what we're doing. We have new releases that come out very frequently. Now, one of the questions we get asked all the time is, does a modular open source anything, right? And so the answer comes in twofold. One is yes. We have upstream stuff all of the time, including tons of core improvements to MLR. Apparently, the interpreter that Jeff was talking about on Tuesday is very popular, and so we can work on that. And so we're very good open source systems from that respect. Mojo itself, I think we'll take a little bit longer, but we want to start the open source process later this year. And so we'll start working on that. And I expect that to take some time, because we want to make sure that we get the core design really right. And not everything is best done with design by committee, but we really want to see this thing scale and go and have a big impact for the world. So coming back all the way to the beginning, we talked about AI and the AI engine and this kind of stuff. Now, we don't have time to talk about it today, but the cool thing about what Mojo means for the AI engine is that you can actually tackle these heterogeneous compute problems, because you can finally scale across lots of different hardware. And this is really cool. We don't have time to talk about it today. If you're interested, we have a keynote at the NURPS conference later this year, where we'll talk about more about this in detail. So with that, I think that's the end of our talk, and we're very happy to take any questions. If you'd like to check out Mojo, you can go to the web page, read about it, download it, and use it today. Thank you. Thank you. Thank you, Chris, Abdul, and Jeff. Are there any questions? Do you have mics in the alleys? Good timing. Yeah, thanks. Thanks for the great talk. My question is, I haven't seen anything about GPU offloading in your slide. Is that in plan, or what are you intent to do with it? So there is one bullet point, actually, on that there's so much more. And yeah, Mojo does actually support GPU offloading and split compilation like CUDA, but it's something that we did not talk about in the presentation, which we'd like to talk about in the future. Yeah. Thank you. Hi. You mentioned that you don't need to use Ccache, because you kind of mentioned that. Can you elaborate that a little bit? How are you guys dealing with caching? So it turns out that MLIR has a nice serializable format called bytecode. But bytecode provides a predictable hashing. And so we can use MLIR bytecode as the form to hash and cache compiler transformations across the stack. OK. Thank you. We also didn't have time to talk about this whole distributed cache backing this thing. And there's a whole bunch of fancy stuff put into it. How are you doing the autotuning? Is it offline, or is it dynamically online? And how do you define the objective function for the search? Yeah, so you have a choice. You could do it offline or online. If you compile to that O file, you've done it offline. The objective function right now is something that the user provides, because it's data size, dependent, hardware dependent, and so on. So it's up to you to define that. We do provide a benchmark module so that it makes benchmarking a lot simpler. And that allows you to do that. If you're doing it online, how do you control for variation in data, or do you rely on? So the benchmark library that we provide has a good number of iterations and so on until you get stability and so on. So it handles that. Oh, so it's not actually in production autotuning? We use autotuning today, so I don't know what. So there's core capabilities, then there's future stuff also. I mean, one of the things that it's designed for, but we haven't actually done, is send the IR to an FPGA and do evaluation remotely, and then pull it back, and things like this. Or a simulator. Exactly. There was a point in the slide about optimization in the, providing optimization in the library, as opposed to the compiler. Are there any, maybe I misunderstood this, but from my understanding, it's possible to come into performance pitfalls, because C++ has built in likely, built in unlikely, and then you can, it's really easy to misuse those and end up in a situation where your code is slower than without these kinds of annotations. So my question would be, what happens if a user-provided annotation conflicts with something that the compiler would also have done at the same time? Well, so from a compiler design perspective, one of the things Jeff was talking about is we've removed, not all, but a lot of the super unpredictable things in the LVM optimizer. So our goal is to give full control and predictability to the programmer, which is very different from the make-spec-go-fast kind of approach to compiler design. And what that does is that gives you the ability to then go and design library features that do things like, you know, you can, Julian, you can talk about some of the crazy stuff you've done. What's also important is that we have these abilities to say, please vectorize this loop, please unroll this loop, and so on. But not everyone who's writing, say, application code is going to think about vectorizing every single loop and auto-tuning every other loop. So what's important is that we provide control to the users who care, but also provide a default experience that is good and optimal and the compiler does its best. But the important thing is what the user says will always take precedent. And that's how you get control. Sometimes a compiler does things and you end up with code that says, you know, optimize, compile the section of code with dash O zero type of stuff. And you kind of want to opt out of compiler optimization because it's interfering with how you laid out your code. Are there any plans? I have a follow-up question. Sure. Okay, come afterwards. Last question, please. Hi, so you mentioned that you only use two dialects in Mojo, LLVM and index dialect. Two upstream dialects. Two upstream. Okay, so you don't use other things like affine and stuff, which means that if you want to use hardware specialized libraries, then the programmer has to do different tiling for ampere versus hopper versus Volta and so on. So isn't that just pushing the burden out from the compiler and high level stuff into the programmer? Because you're going to now have very hardware specialized performance libraries and then people who write this thing would have to understand the architecture really, really well. I think the thing is that they're more likely to understand the architecture really well than the compiler engineer, right? The compiler engineer has to have two things, writing C++ on CPUs that target GPUs. This is like, I'm a CUDA programmer, I'm laser focused, let me target hopper. So that means that the people writing high performance libraries for very specialized accelerators, they need to be experts at those accelerators, right? Right, so they need to be expert in one area, not two areas. So the goal is give the current programmer superpowers. But that's our approach to it. As Jeff talked about, Mojo can talk to any dialect if you want to. You can use that find in Mojo. We can plug and extend the system with dialects as well. So that's always an option. So that is a conscious decision. That's really the conscious decision you're making is that you're going to get experts to do the performance library and they will just work. Well, so this is the thing. Current libraries don't scale because of the magnitude of the problem and the cross product of all the different integrations and all of the stuff that current libraries struggle with. But there are more current programmers and performance engineers than there are compiler engineers by far, right? And so it's really about enabling the talent that actually knows how to do all this kind of stuff versus having a compiler engineer in the loop that becomes a bottleneck. Thanks. We'll be around as well throughout the conference, so feel free to yank any of us. Thank you, Chris, Abul and Jeff. So let's thank the speaker again. Thank you. Thank you. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.88, "text": " We're very happy to be here and talk a little bit about what we've been up to.", "tokens": [50364, 492, 434, 588, 2055, 281, 312, 510, 293, 751, 257, 707, 857, 466, 437, 321, 600, 668, 493, 281, 13, 50858], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 1, "seek": 0, "start": 9.88, "end": 12.780000000000001, "text": " So we'll start with what is Mojo?", "tokens": [50858, 407, 321, 603, 722, 365, 437, 307, 3335, 5134, 30, 51003], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 2, "seek": 0, "start": 12.780000000000001, "end": 18.240000000000002, "text": " At a glance, the top-level points of Mojo is that it's a Pythonic systems programming", "tokens": [51003, 1711, 257, 21094, 11, 264, 1192, 12, 12418, 2793, 295, 3335, 5134, 307, 300, 309, 311, 257, 15329, 299, 3652, 9410, 51276], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 3, "seek": 0, "start": 18.240000000000002, "end": 19.6, "text": " language.", "tokens": [51276, 2856, 13, 51344], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 4, "seek": 0, "start": 19.6, "end": 20.6, "text": " So what does that mean?", "tokens": [51344, 407, 437, 775, 300, 914, 30, 51394], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 5, "seek": 0, "start": 20.6, "end": 23.96, "text": " That means we're here to do really cool things with systems and compilers, and it happens", "tokens": [51394, 663, 1355, 321, 434, 510, 281, 360, 534, 1627, 721, 365, 3652, 293, 715, 388, 433, 11, 293, 309, 2314, 51562], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 6, "seek": 0, "start": 23.96, "end": 28.46, "text": " to look like Python, but forget everything you know about Python, please, please.", "tokens": [51562, 281, 574, 411, 15329, 11, 457, 2870, 1203, 291, 458, 466, 15329, 11, 1767, 11, 1767, 13, 51787], "temperature": 0.0, "avg_logprob": -0.21233705111912318, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.03664970025420189}, {"id": 7, "seek": 2846, "start": 28.46, "end": 31.740000000000002, "text": " So this thing is about one year old, so it's still pretty early, it's still in development.", "tokens": [50364, 407, 341, 551, 307, 466, 472, 1064, 1331, 11, 370, 309, 311, 920, 1238, 2440, 11, 309, 311, 920, 294, 3250, 13, 50528], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 8, "seek": 2846, "start": 31.740000000000002, "end": 35.54, "text": " It's still quite interesting and doing some cool stuff, though.", "tokens": [50528, 467, 311, 920, 1596, 1880, 293, 884, 512, 1627, 1507, 11, 1673, 13, 50718], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 9, "seek": 2846, "start": 35.54, "end": 36.7, "text": " We also have a vibrant community.", "tokens": [50718, 492, 611, 362, 257, 21571, 1768, 13, 50776], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 10, "seek": 2846, "start": 36.7, "end": 38.5, "text": " We have over 150,000 users.", "tokens": [50776, 492, 362, 670, 8451, 11, 1360, 5022, 13, 50866], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 11, "seek": 2846, "start": 38.5, "end": 42.96, "text": " We have a big community in Discord, and there's a bunch of excitement around this.", "tokens": [50866, 492, 362, 257, 955, 1768, 294, 32623, 11, 293, 456, 311, 257, 3840, 295, 14755, 926, 341, 13, 51089], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 12, "seek": 2846, "start": 42.96, "end": 47.019999999999996, "text": " So we'll dive today into why did we do this in the first place?", "tokens": [51089, 407, 321, 603, 9192, 965, 666, 983, 630, 321, 360, 341, 294, 264, 700, 1081, 30, 51292], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 13, "seek": 2846, "start": 47.019999999999996, "end": 48.94, "text": " That's often something we're asked.", "tokens": [51292, 663, 311, 2049, 746, 321, 434, 2351, 13, 51388], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 14, "seek": 2846, "start": 48.94, "end": 51.7, "text": " We'll talk about how we approach designing a new language from scratch.", "tokens": [51388, 492, 603, 751, 466, 577, 321, 3109, 14685, 257, 777, 2856, 490, 8459, 13, 51526], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 15, "seek": 2846, "start": 51.7, "end": 55.02, "text": " We'll talk about internal implementation details, including some of the horrible things we did", "tokens": [51526, 492, 603, 751, 466, 6920, 11420, 4365, 11, 3009, 512, 295, 264, 9263, 721, 321, 630, 51692], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 16, "seek": 2846, "start": 55.02, "end": 56.46, "text": " to LLVM.", "tokens": [51692, 281, 441, 43, 53, 44, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1593566640218099, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.0003798983816523105}, {"id": 17, "seek": 5646, "start": 56.46, "end": 61.1, "text": " Talk about what this means for accelerators and compute, and then wrap things up.", "tokens": [50364, 8780, 466, 437, 341, 1355, 337, 10172, 3391, 293, 14722, 11, 293, 550, 7019, 721, 493, 13, 50596], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 18, "seek": 5646, "start": 61.1, "end": 63.22, "text": " So first, why?", "tokens": [50596, 407, 700, 11, 983, 30, 50702], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 19, "seek": 5646, "start": 63.22, "end": 64.5, "text": " Why, why, why, why, why?", "tokens": [50702, 1545, 11, 983, 11, 983, 11, 983, 11, 983, 30, 50766], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 20, "seek": 5646, "start": 64.5, "end": 68.94, "text": " So many of you are working on AI, and if you work on AI, the question I will ask of you", "tokens": [50766, 407, 867, 295, 291, 366, 1364, 322, 7318, 11, 293, 498, 291, 589, 322, 7318, 11, 264, 1168, 286, 486, 1029, 295, 291, 50988], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 21, "seek": 5646, "start": 68.94, "end": 75.42, "text": " all is, if AI is so important to the world, why is all this offer so bad?", "tokens": [50988, 439, 307, 11, 498, 7318, 307, 370, 1021, 281, 264, 1002, 11, 983, 307, 439, 341, 2626, 370, 1578, 30, 51312], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 22, "seek": 5646, "start": 75.42, "end": 78.9, "text": " This is a huge question, a huge problem, and I think that many of us who have been working", "tokens": [51312, 639, 307, 257, 2603, 1168, 11, 257, 2603, 1154, 11, 293, 286, 519, 300, 867, 295, 505, 567, 362, 668, 1364, 51486], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 23, "seek": 5646, "start": 78.9, "end": 82.62, "text": " in this industry for a while have been struggling with solving this problem in many different", "tokens": [51486, 294, 341, 3518, 337, 257, 1339, 362, 668, 9314, 365, 12606, 341, 1154, 294, 867, 819, 51672], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 24, "seek": 5646, "start": 82.62, "end": 83.62, "text": " ways.", "tokens": [51672, 2098, 13, 51722], "temperature": 0.0, "avg_logprob": -0.13903911185987067, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.005551968235522509}, {"id": 25, "seek": 8362, "start": 83.98, "end": 88.62, "text": " And so for me, when I look at this, I think that the challenge is really fragmentation,", "tokens": [50382, 400, 370, 337, 385, 11, 562, 286, 574, 412, 341, 11, 286, 519, 300, 264, 3430, 307, 534, 9241, 19631, 11, 50614], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 26, "seek": 8362, "start": 88.62, "end": 89.62, "text": " complexity.", "tokens": [50614, 14024, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 27, "seek": 8362, "start": 89.62, "end": 93.26, "text": " It's all these systems that do not work very well together, that are being built by well", "tokens": [50664, 467, 311, 439, 613, 3652, 300, 360, 406, 589, 588, 731, 1214, 11, 300, 366, 885, 3094, 538, 731, 50846], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 28, "seek": 8362, "start": 93.26, "end": 98.38000000000001, "text": " meaning people in different groups and areas, but they don't really actually work together.", "tokens": [50846, 3620, 561, 294, 819, 3935, 293, 3179, 11, 457, 436, 500, 380, 534, 767, 589, 1214, 13, 51102], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 29, "seek": 8362, "start": 98.38000000000001, "end": 101.42, "text": " And so for a user, this is a huge pain point.", "tokens": [51102, 400, 370, 337, 257, 4195, 11, 341, 307, 257, 2603, 1822, 935, 13, 51254], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 30, "seek": 8362, "start": 101.42, "end": 102.42, "text": " And why is this?", "tokens": [51254, 400, 983, 307, 341, 30, 51304], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 31, "seek": 8362, "start": 102.42, "end": 103.42, "text": " I'll speak for myself.", "tokens": [51304, 286, 603, 1710, 337, 2059, 13, 51354], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 32, "seek": 8362, "start": 103.42, "end": 107.06, "text": " If you're enabling a chip, you're focused on the chip.", "tokens": [51354, 759, 291, 434, 23148, 257, 11409, 11, 291, 434, 5178, 322, 264, 11409, 13, 51536], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 33, "seek": 8362, "start": 107.06, "end": 111.22, "text": " So many of us are paid to solve one specific problem, we're not here to solve an industry", "tokens": [51536, 407, 867, 295, 505, 366, 4835, 281, 5039, 472, 2685, 1154, 11, 321, 434, 406, 510, 281, 5039, 364, 3518, 51744], "temperature": 0.0, "avg_logprob": -0.11402100890222257, "compression_ratio": 1.6920529801324504, "no_speech_prob": 0.0019253203645348549}, {"id": 34, "seek": 11122, "start": 111.22, "end": 113.5, "text": " scale problem, and you can't afford to do it.", "tokens": [50364, 4373, 1154, 11, 293, 291, 393, 380, 6157, 281, 360, 309, 13, 50478], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 35, "seek": 11122, "start": 113.5, "end": 117.02, "text": " You don't have the time, you don't have the schedule, you don't have the headcount, whatever.", "tokens": [50478, 509, 500, 380, 362, 264, 565, 11, 291, 500, 380, 362, 264, 7567, 11, 291, 500, 380, 362, 264, 1378, 26050, 11, 2035, 13, 50654], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 36, "seek": 11122, "start": 117.02, "end": 120.7, "text": " Often the organization that you're within, in my experience, makes it very difficult", "tokens": [50654, 20043, 264, 4475, 300, 291, 434, 1951, 11, 294, 452, 1752, 11, 1669, 309, 588, 2252, 50838], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 37, "seek": 11122, "start": 120.7, "end": 122.62, "text": " to solve some of these problems.", "tokens": [50838, 281, 5039, 512, 295, 613, 2740, 13, 50934], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 38, "seek": 11122, "start": 122.62, "end": 128.74, "text": " And so our approach at Modular is that we need fewer things that work better.", "tokens": [50934, 400, 370, 527, 3109, 412, 6583, 1040, 307, 300, 321, 643, 13366, 721, 300, 589, 1101, 13, 51240], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 39, "seek": 11122, "start": 128.74, "end": 131.38, "text": " And so that's what led us to building Modular in the first place.", "tokens": [51240, 400, 370, 300, 311, 437, 4684, 505, 281, 2390, 6583, 1040, 294, 264, 700, 1081, 13, 51372], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 40, "seek": 11122, "start": 131.38, "end": 135.5, "text": " It's really kind of an organization that can span across many different of these problems", "tokens": [51372, 467, 311, 534, 733, 295, 364, 4475, 300, 393, 16174, 2108, 867, 819, 295, 613, 2740, 51578], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 41, "seek": 11122, "start": 135.5, "end": 140.18, "text": " and invest for the long term in building and hopefully lifting the industry over time.", "tokens": [51578, 293, 1963, 337, 264, 938, 1433, 294, 2390, 293, 4696, 15798, 264, 3518, 670, 565, 13, 51812], "temperature": 0.0, "avg_logprob": -0.11964159952083105, "compression_ratio": 1.8349206349206348, "no_speech_prob": 0.0023955132346600294}, {"id": 42, "seek": 14018, "start": 140.18, "end": 141.18, "text": " So how do we do this specifically?", "tokens": [50364, 407, 577, 360, 321, 360, 341, 4682, 30, 50414], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 43, "seek": 14018, "start": 141.18, "end": 143.58, "text": " Well, we're building what we call the AI engine.", "tokens": [50414, 1042, 11, 321, 434, 2390, 437, 321, 818, 264, 7318, 2848, 13, 50534], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 44, "seek": 14018, "start": 143.58, "end": 148.86, "text": " Well, the AI engine, if you look at modern ML stack, a lot of folks are trying to throw", "tokens": [50534, 1042, 11, 264, 7318, 2848, 11, 498, 291, 574, 412, 4363, 21601, 8630, 11, 257, 688, 295, 4024, 366, 1382, 281, 3507, 50798], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 45, "seek": 14018, "start": 148.86, "end": 152.38, "text": " layers of Python on top of all this AI tech that has been built up.", "tokens": [50798, 7914, 295, 15329, 322, 1192, 295, 439, 341, 7318, 7553, 300, 575, 668, 3094, 493, 13, 50974], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 46, "seek": 14018, "start": 152.38, "end": 157.38, "text": " We're tackling it at the Herber software boundary, reinvesting, no surprise, and compilers.", "tokens": [50974, 492, 434, 34415, 309, 412, 264, 3204, 607, 4722, 12866, 11, 6561, 5571, 278, 11, 572, 6365, 11, 293, 715, 388, 433, 13, 51224], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 47, "seek": 14018, "start": 157.38, "end": 161.5, "text": " And so what we want to do is we want to unify and integrate all these low level technology", "tokens": [51224, 400, 370, 437, 321, 528, 281, 360, 307, 321, 528, 281, 517, 2505, 293, 13365, 439, 613, 2295, 1496, 2899, 51430], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 48, "seek": 14018, "start": 161.5, "end": 165.5, "text": " systems so that innovation can happen up on top with programming models and frameworks", "tokens": [51430, 3652, 370, 300, 8504, 393, 1051, 493, 322, 1192, 365, 9410, 5245, 293, 29834, 51630], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 49, "seek": 14018, "start": 165.5, "end": 167.46, "text": " and all that kind of stuff.", "tokens": [51630, 293, 439, 300, 733, 295, 1507, 13, 51728], "temperature": 0.0, "avg_logprob": -0.13714829853602817, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.006094668991863728}, {"id": 50, "seek": 16746, "start": 167.46, "end": 169.74, "text": " Our approach is to meet people where they are.", "tokens": [50364, 2621, 3109, 307, 281, 1677, 561, 689, 436, 366, 13, 50478], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 51, "seek": 16746, "start": 169.74, "end": 172.3, "text": " So people use PyTorch, people use Jax, people use TensorFlow.", "tokens": [50478, 407, 561, 764, 9953, 51, 284, 339, 11, 561, 764, 508, 2797, 11, 561, 764, 37624, 13, 50606], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 52, "seek": 16746, "start": 172.3, "end": 173.3, "text": " That's awesome.", "tokens": [50606, 663, 311, 3476, 13, 50656], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 53, "seek": 16746, "start": 173.3, "end": 176.66, "text": " These all have pros and cons, and there's other stuff as well.", "tokens": [50656, 1981, 439, 362, 6267, 293, 1014, 11, 293, 456, 311, 661, 1507, 382, 731, 13, 50824], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 54, "seek": 16746, "start": 176.66, "end": 179.42000000000002, "text": " And very few people actually want to rewrite all their code.", "tokens": [50824, 400, 588, 1326, 561, 767, 528, 281, 28132, 439, 641, 3089, 13, 50962], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 55, "seek": 16746, "start": 179.42000000000002, "end": 182.86, "text": " And for us, it's very important to be drop and compatible, meet people where they are,", "tokens": [50962, 400, 337, 505, 11, 309, 311, 588, 1021, 281, 312, 3270, 293, 18218, 11, 1677, 561, 689, 436, 366, 11, 51134], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 56, "seek": 16746, "start": 182.86, "end": 185.14000000000001, "text": " and work with their existing systems.", "tokens": [51134, 293, 589, 365, 641, 6741, 3652, 13, 51248], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 57, "seek": 16746, "start": 185.14000000000001, "end": 188.82, "text": " The other thing is that this is not a research project, like there's a lot of really interesting", "tokens": [51248, 440, 661, 551, 307, 300, 341, 307, 406, 257, 2132, 1716, 11, 411, 456, 311, 257, 688, 295, 534, 1880, 51432], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 58, "seek": 16746, "start": 188.82, "end": 193.06, "text": " and cool things that have been built over the last eight-ish years of AI infrastructure.", "tokens": [51432, 293, 1627, 721, 300, 362, 668, 3094, 670, 264, 1036, 3180, 12, 742, 924, 295, 7318, 6896, 13, 51644], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 59, "seek": 16746, "start": 193.06, "end": 196.18, "text": " It often gets fragmented out into all these different systems.", "tokens": [51644, 467, 2049, 2170, 9241, 14684, 484, 666, 439, 613, 819, 3652, 13, 51800], "temperature": 0.0, "avg_logprob": -0.13814222736723103, "compression_ratio": 1.8294117647058823, "no_speech_prob": 0.0006262919632717967}, {"id": 60, "seek": 19618, "start": 196.18, "end": 199.42000000000002, "text": " We've learned from many of them, and so what we're doing is we're pulling this back together", "tokens": [50364, 492, 600, 3264, 490, 867, 295, 552, 11, 293, 370, 437, 321, 434, 884, 307, 321, 434, 8407, 341, 646, 1214, 50526], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 61, "seek": 19618, "start": 199.42000000000002, "end": 204.34, "text": " and doing hardcore engineering, not research, to build a production quality system that", "tokens": [50526, 293, 884, 28196, 7043, 11, 406, 2132, 11, 281, 1322, 257, 4265, 3125, 1185, 300, 50772], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 62, "seek": 19618, "start": 204.34, "end": 206.9, "text": " we hope can scale for the world.", "tokens": [50772, 321, 1454, 393, 4373, 337, 264, 1002, 13, 50900], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 63, "seek": 19618, "start": 206.9, "end": 207.9, "text": " I'll go through this super quickly.", "tokens": [50900, 286, 603, 352, 807, 341, 1687, 2661, 13, 50950], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 64, "seek": 19618, "start": 207.9, "end": 208.9, "text": " It was an AI engine.", "tokens": [50950, 467, 390, 364, 7318, 2848, 13, 51000], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 65, "seek": 19618, "start": 208.9, "end": 210.70000000000002, "text": " Well, it's really two things.", "tokens": [51000, 1042, 11, 309, 311, 534, 732, 721, 13, 51090], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 66, "seek": 19618, "start": 210.70000000000002, "end": 213.22, "text": " One is this operator graph.", "tokens": [51090, 1485, 307, 341, 12973, 4295, 13, 51216], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 67, "seek": 19618, "start": 213.22, "end": 217.66, "text": " The operator graph in the interesting case is heterogeneous.", "tokens": [51216, 440, 12973, 4295, 294, 264, 1880, 1389, 307, 20789, 31112, 13, 51438], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 68, "seek": 19618, "start": 217.66, "end": 221.58, "text": " So people often focus on, for example, the GPU, and how do I make matrix multiplications", "tokens": [51438, 407, 561, 2049, 1879, 322, 11, 337, 1365, 11, 264, 18407, 11, 293, 577, 360, 286, 652, 8141, 17596, 763, 51634], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 69, "seek": 19618, "start": 221.58, "end": 222.58, "text": " go fast?", "tokens": [51634, 352, 2370, 30, 51684], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 70, "seek": 19618, "start": 222.58, "end": 224.18, "text": " And that's a super important problem.", "tokens": [51684, 400, 300, 311, 257, 1687, 1021, 1154, 13, 51764], "temperature": 0.0, "avg_logprob": -0.14431202929952872, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0026308505330234766}, {"id": 71, "seek": 22418, "start": 224.18, "end": 230.14000000000001, "text": " But often folks forget that AI today is a distributed problem, involves the host, involves", "tokens": [50364, 583, 2049, 4024, 2870, 300, 7318, 965, 307, 257, 12631, 1154, 11, 11626, 264, 3975, 11, 11626, 50662], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 72, "seek": 22418, "start": 230.14000000000001, "end": 233.38, "text": " the accelerator, involves pre-processing, data loading, this whole thing.", "tokens": [50662, 264, 39889, 11, 11626, 659, 12, 41075, 278, 11, 1412, 15114, 11, 341, 1379, 551, 13, 50824], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 73, "seek": 22418, "start": 233.38, "end": 237.1, "text": " And so you can't really solve the AI problem for a user unless you really tackle this whole", "tokens": [50824, 400, 370, 291, 393, 380, 534, 5039, 264, 7318, 1154, 337, 257, 4195, 5969, 291, 534, 14896, 341, 1379, 51010], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 74, "seek": 22418, "start": 237.1, "end": 238.1, "text": " problem.", "tokens": [51010, 1154, 13, 51060], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 75, "seek": 22418, "start": 238.1, "end": 241.26000000000002, "text": " And furthermore, this is really heterogeneous.", "tokens": [51060, 400, 3052, 3138, 11, 341, 307, 534, 20789, 31112, 13, 51218], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 76, "seek": 22418, "start": 241.26000000000002, "end": 244.18, "text": " As we've seen, there's all kinds of different accelerators, there's all kinds of different", "tokens": [51218, 1018, 321, 600, 1612, 11, 456, 311, 439, 3685, 295, 819, 10172, 3391, 11, 456, 311, 439, 3685, 295, 819, 51364], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 77, "seek": 22418, "start": 244.18, "end": 245.18, "text": " hardware.", "tokens": [51364, 8837, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 78, "seek": 22418, "start": 245.18, "end": 249.82, "text": " When you have a cluster, lots of machines, micro-architectures don't always match.", "tokens": [51414, 1133, 291, 362, 257, 13630, 11, 3195, 295, 8379, 11, 4532, 12, 1178, 5739, 1303, 500, 380, 1009, 2995, 13, 51646], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 79, "seek": 22418, "start": 249.82, "end": 252.3, "text": " There's a lot of complexity in this space.", "tokens": [51646, 821, 311, 257, 688, 295, 14024, 294, 341, 1901, 13, 51770], "temperature": 0.0, "avg_logprob": -0.15206555759205537, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0008556633838452399}, {"id": 80, "seek": 25230, "start": 252.3, "end": 255.98000000000002, "text": " So many of us have been working on this, again, for a long time.", "tokens": [50364, 407, 867, 295, 505, 362, 668, 1364, 322, 341, 11, 797, 11, 337, 257, 938, 565, 13, 50548], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 81, "seek": 25230, "start": 255.98000000000002, "end": 257.86, "text": " And so we've seen the rise of kernel libraries.", "tokens": [50548, 400, 370, 321, 600, 1612, 264, 6272, 295, 28256, 15148, 13, 50642], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 82, "seek": 25230, "start": 257.86, "end": 260.58, "text": " This is how many of these systems were first built.", "tokens": [50642, 639, 307, 577, 867, 295, 613, 3652, 645, 700, 3094, 13, 50778], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 83, "seek": 25230, "start": 260.58, "end": 263.90000000000003, "text": " And one of the challenges that I won't go into in depth, many of you probably already", "tokens": [50778, 400, 472, 295, 264, 4759, 300, 286, 1582, 380, 352, 666, 294, 7161, 11, 867, 295, 291, 1391, 1217, 50944], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 84, "seek": 25230, "start": 263.90000000000003, "end": 267.34000000000003, "text": " agree, is that kernel libraries don't scale.", "tokens": [50944, 3986, 11, 307, 300, 28256, 15148, 500, 380, 4373, 13, 51116], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 85, "seek": 25230, "start": 267.34000000000003, "end": 271.86, "text": " And so many of us, for multiple years now, have been building AI compilers.", "tokens": [51116, 400, 370, 867, 295, 505, 11, 337, 3866, 924, 586, 11, 362, 668, 2390, 7318, 715, 388, 433, 13, 51342], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 86, "seek": 25230, "start": 271.86, "end": 276.22, "text": " And so there's lots of these, lots of different approaches, online kernel fusion, lots of", "tokens": [51342, 400, 370, 456, 311, 3195, 295, 613, 11, 3195, 295, 819, 11587, 11, 2950, 28256, 23100, 11, 3195, 295, 51560], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 87, "seek": 25230, "start": 276.22, "end": 278.54, "text": " cool algorithms getting vented and used.", "tokens": [51560, 1627, 14642, 1242, 371, 6003, 293, 1143, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 88, "seek": 25230, "start": 278.54, "end": 280.7, "text": " We can talk about all the different pros and cons of trade-offs.", "tokens": [51676, 492, 393, 751, 466, 439, 264, 819, 6267, 293, 1014, 295, 4923, 12, 19231, 13, 51784], "temperature": 0.0, "avg_logprob": -0.1501199223051135, "compression_ratio": 1.8, "no_speech_prob": 0.00013981036318000406}, {"id": 89, "seek": 28070, "start": 281.14, "end": 286.3, "text": " But the thing I want to claim is that neither of these approaches scale.", "tokens": [50386, 583, 264, 551, 286, 528, 281, 3932, 307, 300, 9662, 295, 613, 11587, 4373, 13, 50644], "temperature": 0.0, "avg_logprob": -0.17454319908505395, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.0012062054593116045}, {"id": 90, "seek": 28070, "start": 286.3, "end": 290.7, "text": " Kernels don't scale, hopefully many people understand that, but neither do ML compilers.", "tokens": [50644, 40224, 1625, 500, 380, 4373, 11, 4696, 867, 561, 1223, 300, 11, 457, 9662, 360, 21601, 715, 388, 433, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17454319908505395, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.0012062054593116045}, {"id": 91, "seek": 28070, "start": 290.7, "end": 295.14, "text": " And to a compiler audience that maybe is more controversial than to a kernel audience.", "tokens": [50864, 400, 281, 257, 31958, 4034, 300, 1310, 307, 544, 17323, 813, 281, 257, 28256, 4034, 13, 51086], "temperature": 0.0, "avg_logprob": -0.17454319908505395, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.0012062054593116045}, {"id": 92, "seek": 28070, "start": 295.14, "end": 298.94, "text": " So I thought I'd dive a little bit into why this is and the challenges that we see with", "tokens": [51086, 407, 286, 1194, 286, 1116, 9192, 257, 707, 857, 666, 983, 341, 307, 293, 264, 4759, 300, 321, 536, 365, 51276], "temperature": 0.0, "avg_logprob": -0.17454319908505395, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.0012062054593116045}, {"id": 93, "seek": 28070, "start": 298.94, "end": 303.21999999999997, "text": " this led us to our approach with Mojo and the system.", "tokens": [51276, 341, 4684, 505, 281, 527, 3109, 365, 3335, 5134, 293, 264, 1185, 13, 51490], "temperature": 0.0, "avg_logprob": -0.17454319908505395, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.0012062054593116045}, {"id": 94, "seek": 28070, "start": 303.21999999999997, "end": 305.18, "text": " So the first is generality.", "tokens": [51490, 407, 264, 700, 307, 1337, 1860, 13, 51588], "temperature": 0.0, "avg_logprob": -0.17454319908505395, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.0012062054593116045}, {"id": 95, "seek": 30518, "start": 305.18, "end": 310.98, "text": " I mean, empirically today, ML compilers are not very general, right?", "tokens": [50364, 286, 914, 11, 25790, 984, 965, 11, 21601, 715, 388, 433, 366, 406, 588, 2674, 11, 558, 30, 50654], "temperature": 0.0, "avg_logprob": -0.16630040804545085, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.0011693183332681656}, {"id": 96, "seek": 30518, "start": 310.98, "end": 315.26, "text": " Generality includes not just matrix multiplication, again, data loading, preprocessing, all this", "tokens": [50654, 15409, 1860, 5974, 406, 445, 8141, 27290, 11, 797, 11, 1412, 15114, 11, 2666, 340, 780, 278, 11, 439, 341, 50868], "temperature": 0.0, "avg_logprob": -0.16630040804545085, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.0011693183332681656}, {"id": 97, "seek": 30518, "start": 315.26, "end": 317.86, "text": " stuff, but also dynamic shapes, varsity.", "tokens": [50868, 1507, 11, 457, 611, 8546, 10854, 11, 46130, 507, 13, 50998], "temperature": 0.0, "avg_logprob": -0.16630040804545085, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.0011693183332681656}, {"id": 98, "seek": 30518, "start": 317.86, "end": 322.98, "text": " There's better and worse systems out there, and there's definitely progress in this area.", "tokens": [50998, 821, 311, 1101, 293, 5324, 3652, 484, 456, 11, 293, 456, 311, 2138, 4205, 294, 341, 1859, 13, 51254], "temperature": 0.0, "avg_logprob": -0.16630040804545085, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.0011693183332681656}, {"id": 99, "seek": 30518, "start": 322.98, "end": 327.54, "text": " But if you're coming at it from a user's perspective, they want things to just work.", "tokens": [51254, 583, 498, 291, 434, 1348, 412, 309, 490, 257, 4195, 311, 4585, 11, 436, 528, 721, 281, 445, 589, 13, 51482], "temperature": 0.0, "avg_logprob": -0.16630040804545085, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.0011693183332681656}, {"id": 100, "seek": 30518, "start": 327.54, "end": 334.02, "text": " And if they don't just work, then they'll move on and spend their time something else.", "tokens": [51482, 400, 498, 436, 500, 380, 445, 589, 11, 550, 436, 603, 1286, 322, 293, 3496, 641, 565, 746, 1646, 13, 51806], "temperature": 0.0, "avg_logprob": -0.16630040804545085, "compression_ratio": 1.6137931034482758, "no_speech_prob": 0.0011693183332681656}, {"id": 101, "seek": 33402, "start": 334.02, "end": 339.82, "text": " Generality is also important because if you're, again, coming from a hardware enablement perspective,", "tokens": [50364, 15409, 1860, 307, 611, 1021, 570, 498, 291, 434, 11, 797, 11, 1348, 490, 257, 8837, 9528, 518, 4585, 11, 50654], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 102, "seek": 33402, "start": 339.82, "end": 343.78, "text": " you don't really have time to invest in all the other parts of the problem.", "tokens": [50654, 291, 500, 380, 534, 362, 565, 281, 1963, 294, 439, 264, 661, 3166, 295, 264, 1154, 13, 50852], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 103, "seek": 33402, "start": 343.78, "end": 347.38, "text": " And so it makes sense that many of us working on bring up the chip don't actually focus", "tokens": [50852, 400, 370, 309, 1669, 2020, 300, 867, 295, 505, 1364, 322, 1565, 493, 264, 11409, 500, 380, 767, 1879, 51032], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 104, "seek": 33402, "start": 347.38, "end": 350.74, "text": " on the big picture parts of the problem.", "tokens": [51032, 322, 264, 955, 3036, 3166, 295, 264, 1154, 13, 51200], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 105, "seek": 33402, "start": 350.74, "end": 351.9, "text": " Another one is community.", "tokens": [51200, 3996, 472, 307, 1768, 13, 51258], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 106, "seek": 33402, "start": 351.9, "end": 354.21999999999997, "text": " So you all are wonderful compiler nerds.", "tokens": [51258, 407, 291, 439, 366, 3715, 31958, 23229, 82, 13, 51374], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 107, "seek": 33402, "start": 354.21999999999997, "end": 356.41999999999996, "text": " I love you all, obviously.", "tokens": [51374, 286, 959, 291, 439, 11, 2745, 13, 51484], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 108, "seek": 33402, "start": 356.41999999999996, "end": 359.41999999999996, "text": " And myself, a pretty big compiler nerd.", "tokens": [51484, 400, 2059, 11, 257, 1238, 955, 31958, 23229, 13, 51634], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 109, "seek": 33402, "start": 359.41999999999996, "end": 362.06, "text": " But the problem is that nobody can hire a compiler engineer.", "tokens": [51634, 583, 264, 1154, 307, 300, 5079, 393, 11158, 257, 31958, 11403, 13, 51766], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 110, "seek": 33402, "start": 362.06, "end": 363.78, "text": " This is pretty well known.", "tokens": [51766, 639, 307, 1238, 731, 2570, 13, 51852], "temperature": 0.0, "avg_logprob": -0.19384724652325666, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0006666008848696947}, {"id": 111, "seek": 36378, "start": 363.78, "end": 368.41999999999996, "text": " And so with AI compilers, this becomes even worse, because how do you hire somebody who", "tokens": [50364, 400, 370, 365, 7318, 715, 388, 433, 11, 341, 3643, 754, 5324, 11, 570, 577, 360, 291, 11158, 2618, 567, 50596], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 112, "seek": 36378, "start": 368.41999999999996, "end": 373.46, "text": " knows compilers, who knows AI modeling and all the different exotic new model of the", "tokens": [50596, 3255, 715, 388, 433, 11, 567, 3255, 7318, 15983, 293, 439, 264, 819, 27063, 777, 2316, 295, 264, 50848], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 113, "seek": 36378, "start": 373.46, "end": 376.82, "text": " day, who knows all the numerics and the data types and knows all the specialized hardware,", "tokens": [50848, 786, 11, 567, 3255, 439, 264, 7866, 1167, 293, 264, 1412, 3467, 293, 3255, 439, 264, 19813, 8837, 11, 51016], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 114, "seek": 36378, "start": 376.82, "end": 381.38, "text": " and how do you find that unicorn person that knows all of these things together?", "tokens": [51016, 293, 577, 360, 291, 915, 300, 28122, 954, 300, 3255, 439, 295, 613, 721, 1214, 30, 51244], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 115, "seek": 36378, "start": 381.38, "end": 383.29999999999995, "text": " It's very, very difficult out there.", "tokens": [51244, 467, 311, 588, 11, 588, 2252, 484, 456, 13, 51340], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 116, "seek": 36378, "start": 383.29999999999995, "end": 388.09999999999997, "text": " And if you need a compiler engineer to be in the loop of novel research, there's very", "tokens": [51340, 400, 498, 291, 643, 257, 31958, 11403, 281, 312, 294, 264, 6367, 295, 7613, 2132, 11, 456, 311, 588, 51580], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 117, "seek": 36378, "start": 388.09999999999997, "end": 392.09999999999997, "text": " few companies in the world that can afford or attract to do that.", "tokens": [51580, 1326, 3431, 294, 264, 1002, 300, 393, 6157, 420, 5049, 281, 360, 300, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1562903309596404, "compression_ratio": 1.8506944444444444, "no_speech_prob": 0.000203378323931247}, {"id": 118, "seek": 39210, "start": 392.1, "end": 397.42, "text": " And so I believe that you cannot have a compiler-first approach to this problem simply because there's", "tokens": [50364, 400, 370, 286, 1697, 300, 291, 2644, 362, 257, 31958, 12, 29581, 3109, 281, 341, 1154, 2935, 570, 456, 311, 50630], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 119, "seek": 39210, "start": 397.42, "end": 398.58000000000004, "text": " enough talent out there.", "tokens": [50630, 1547, 8301, 484, 456, 13, 50688], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 120, "seek": 39210, "start": 398.58000000000004, "end": 402.58000000000004, "text": " I mean, I love you all, and you're all very valuable, but this is very difficult, particularly", "tokens": [50688, 286, 914, 11, 286, 959, 291, 439, 11, 293, 291, 434, 439, 588, 8263, 11, 457, 341, 307, 588, 2252, 11, 4098, 50888], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 121, "seek": 39210, "start": 402.58000000000004, "end": 405.26000000000005, "text": " for the scale of what AI research is today.", "tokens": [50888, 337, 264, 4373, 295, 437, 7318, 2132, 307, 965, 13, 51022], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 122, "seek": 39210, "start": 405.26000000000005, "end": 408.5, "text": " Second, if you're a compiler engineer, it seems really weird that we're re-encoding", "tokens": [51022, 5736, 11, 498, 291, 434, 257, 31958, 11403, 11, 309, 2544, 534, 3657, 300, 321, 434, 319, 12, 22660, 8616, 51184], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 123, "seek": 39210, "start": 408.5, "end": 411.90000000000003, "text": " all of compute into IR builders and sanding out all this stuff.", "tokens": [51184, 439, 295, 14722, 666, 16486, 36281, 293, 44338, 484, 439, 341, 1507, 13, 51354], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 124, "seek": 39210, "start": 411.90000000000003, "end": 414.42, "text": " And so you feel like there must be a problem here at some point.", "tokens": [51354, 400, 370, 291, 841, 411, 456, 1633, 312, 257, 1154, 510, 412, 512, 935, 13, 51480], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 125, "seek": 39210, "start": 414.42, "end": 417.18, "text": " Finally, there's this fragmentation problem.", "tokens": [51480, 6288, 11, 456, 311, 341, 9241, 19631, 1154, 13, 51618], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 126, "seek": 39210, "start": 417.18, "end": 420.86, "text": " If you want to solve and build a heterogeneous compute system, we have to face the reality", "tokens": [51618, 759, 291, 528, 281, 5039, 293, 1322, 257, 20789, 31112, 14722, 1185, 11, 321, 362, 281, 1851, 264, 4103, 51802], "temperature": 0.0, "avg_logprob": -0.14074477650760825, "compression_ratio": 1.7372881355932204, "no_speech_prob": 0.00025313583319075406}, {"id": 127, "seek": 42086, "start": 420.86, "end": 425.5, "text": " that AI developers, researchers, are in Python.", "tokens": [50364, 300, 7318, 8849, 11, 10309, 11, 366, 294, 15329, 13, 50596], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 128, "seek": 42086, "start": 425.5, "end": 428.58000000000004, "text": " The frameworks, the host-side compute, it's all in C++.", "tokens": [50596, 440, 29834, 11, 264, 3975, 12, 1812, 14722, 11, 309, 311, 439, 294, 383, 25472, 13, 50750], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 129, "seek": 42086, "start": 428.58000000000004, "end": 432.5, "text": " The device-side is in CUDA, in SQL, and other things.", "tokens": [50750, 440, 4302, 12, 1812, 307, 294, 29777, 7509, 11, 294, 19200, 11, 293, 661, 721, 13, 50946], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 130, "seek": 42086, "start": 432.5, "end": 435.54, "text": " And so if you want to build a system that can scale across all these different levels", "tokens": [50946, 400, 370, 498, 291, 528, 281, 1322, 257, 1185, 300, 393, 4373, 2108, 439, 613, 819, 4358, 51098], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 131, "seek": 42086, "start": 435.54, "end": 439.90000000000003, "text": " of abstraction, there's a huge fragmentation problem here, and we need to be able to unify", "tokens": [51098, 295, 37765, 11, 456, 311, 257, 2603, 9241, 19631, 1154, 510, 11, 293, 321, 643, 281, 312, 1075, 281, 517, 2505, 51316], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 132, "seek": 42086, "start": 439.90000000000003, "end": 440.90000000000003, "text": " this.", "tokens": [51316, 341, 13, 51366], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 133, "seek": 42086, "start": 440.90000000000003, "end": 443.74, "text": " Otherwise, we can't have one system that can reason about it.", "tokens": [51366, 10328, 11, 321, 393, 380, 362, 472, 1185, 300, 393, 1778, 466, 309, 13, 51508], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 134, "seek": 42086, "start": 443.74, "end": 446.98, "text": " And so if you want to be able to build this and solve this problem, you have to kind of", "tokens": [51508, 400, 370, 498, 291, 528, 281, 312, 1075, 281, 1322, 341, 293, 5039, 341, 1154, 11, 291, 362, 281, 733, 295, 51670], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 135, "seek": 42086, "start": 446.98, "end": 449.74, "text": " come back and look at the big picture of what's going on here.", "tokens": [51670, 808, 646, 293, 574, 412, 264, 955, 3036, 295, 437, 311, 516, 322, 510, 13, 51808], "temperature": 0.0, "avg_logprob": -0.14695471211483604, "compression_ratio": 1.7389937106918238, "no_speech_prob": 0.004068754147738218}, {"id": 136, "seek": 44974, "start": 449.74, "end": 452.26, "text": " And the nature of compute has changed.", "tokens": [50364, 400, 264, 3687, 295, 14722, 575, 3105, 13, 50490], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 137, "seek": 44974, "start": 452.26, "end": 455.46000000000004, "text": " So this is what has led us to Mojo.", "tokens": [50490, 407, 341, 307, 437, 575, 4684, 505, 281, 3335, 5134, 13, 50650], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 138, "seek": 44974, "start": 455.46000000000004, "end": 457.18, "text": " Now how do we approach building Mojo?", "tokens": [50650, 823, 577, 360, 321, 3109, 2390, 3335, 5134, 30, 50736], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 139, "seek": 44974, "start": 457.18, "end": 460.46000000000004, "text": " I mean, you know the outcome, and we'll talk a lot more about how it works, but how do", "tokens": [50736, 286, 914, 11, 291, 458, 264, 9700, 11, 293, 321, 603, 751, 257, 688, 544, 466, 577, 309, 1985, 11, 457, 577, 360, 50900], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 140, "seek": 44974, "start": 460.46000000000004, "end": 461.46000000000004, "text": " we even get here?", "tokens": [50900, 321, 754, 483, 510, 30, 50950], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 141, "seek": 44974, "start": 461.46000000000004, "end": 467.14, "text": " Well, when we started Modular, we started with a thesis, a hypothesis.", "tokens": [50950, 1042, 11, 562, 321, 1409, 6583, 1040, 11, 321, 1409, 365, 257, 22288, 11, 257, 17291, 13, 51234], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 142, "seek": 44974, "start": 467.14, "end": 474.06, "text": " We believed that we could get to state-of-the-art performance against a lot of vendor systems", "tokens": [51234, 492, 7847, 300, 321, 727, 483, 281, 1785, 12, 2670, 12, 3322, 12, 446, 3389, 1970, 257, 688, 295, 24321, 3652, 51580], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 143, "seek": 44974, "start": 474.06, "end": 478.22, "text": " and do so with a single source of truth in our code for numerics.", "tokens": [51580, 293, 360, 370, 365, 257, 2167, 4009, 295, 3494, 294, 527, 3089, 337, 7866, 1167, 13, 51788], "temperature": 0.0, "avg_logprob": -0.16309446096420288, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.0007320496370084584}, {"id": 144, "seek": 47822, "start": 478.22, "end": 479.82000000000005, "text": " This hasn't really been done before.", "tokens": [50364, 639, 6132, 380, 534, 668, 1096, 949, 13, 50444], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 145, "seek": 47822, "start": 479.82000000000005, "end": 482.42, "text": " There's definitely systems that have been around in the space.", "tokens": [50444, 821, 311, 2138, 3652, 300, 362, 668, 926, 294, 264, 1901, 13, 50574], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 146, "seek": 47822, "start": 482.42, "end": 488.82000000000005, "text": " But this thesis, if true, can enable and unlock a huge amount of innovation in the industry.", "tokens": [50574, 583, 341, 22288, 11, 498, 2074, 11, 393, 9528, 293, 11634, 257, 2603, 2372, 295, 8504, 294, 264, 3518, 13, 50894], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 147, "seek": 47822, "start": 488.82000000000005, "end": 493.42, "text": " And so what we did was we said, okay, let's go invest in some very fancy compiler stuff,", "tokens": [50894, 400, 370, 437, 321, 630, 390, 321, 848, 11, 1392, 11, 718, 311, 352, 1963, 294, 512, 588, 10247, 31958, 1507, 11, 51124], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 148, "seek": 47822, "start": 493.42, "end": 498.62, "text": " generalized fusion, and caching integrated distributed compilation, like lots of cool", "tokens": [51124, 44498, 23100, 11, 293, 269, 2834, 10919, 12631, 40261, 11, 411, 3195, 295, 1627, 51384], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 149, "seek": 47822, "start": 498.62, "end": 499.62, "text": " stuff.", "tokens": [51384, 1507, 13, 51434], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 150, "seek": 47822, "start": 499.62, "end": 503.3, "text": " Let's figure out what we want to do, and then let's go validate that.", "tokens": [51434, 961, 311, 2573, 484, 437, 321, 528, 281, 360, 11, 293, 550, 718, 311, 352, 29562, 300, 13, 51618], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 151, "seek": 47822, "start": 503.3, "end": 507.58000000000004, "text": " But for validation, we didn't actually care about syntax.", "tokens": [51618, 583, 337, 24071, 11, 321, 994, 380, 767, 1127, 466, 28431, 13, 51832], "temperature": 0.0, "avg_logprob": -0.1592036353217231, "compression_ratio": 1.6733333333333333, "no_speech_prob": 0.001648233155719936}, {"id": 152, "seek": 50758, "start": 507.58, "end": 508.58, "text": " So what did we do?", "tokens": [50364, 407, 437, 630, 321, 360, 30, 50414], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 153, "seek": 50758, "start": 508.58, "end": 510.85999999999996, "text": " Well, we went, and we actually went and built the thing.", "tokens": [50414, 1042, 11, 321, 1437, 11, 293, 321, 767, 1437, 293, 3094, 264, 551, 13, 50528], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 154, "seek": 50758, "start": 510.85999999999996, "end": 514.1, "text": " We went and built a compiler and completely ignored syntax.", "tokens": [50528, 492, 1437, 293, 3094, 257, 31958, 293, 2584, 19735, 28431, 13, 50690], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 155, "seek": 50758, "start": 514.1, "end": 515.1, "text": " All right, why?", "tokens": [50690, 1057, 558, 11, 983, 30, 50740], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 156, "seek": 50758, "start": 515.1, "end": 516.6, "text": " Well, MLR is great.", "tokens": [50740, 1042, 11, 21601, 49, 307, 869, 13, 50815], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 157, "seek": 50758, "start": 516.6, "end": 517.78, "text": " You can write MLR by hand.", "tokens": [50815, 509, 393, 2464, 21601, 49, 538, 1011, 13, 50874], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 158, "seek": 50758, "start": 517.78, "end": 519.28, "text": " You don't need a front-end.", "tokens": [50874, 509, 500, 380, 643, 257, 1868, 12, 521, 13, 50949], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 159, "seek": 50758, "start": 519.28, "end": 522.62, "text": " And so what we could do is we could actually go build major kernel libraries and things", "tokens": [50949, 400, 370, 437, 321, 727, 360, 307, 321, 727, 767, 352, 1322, 2563, 28256, 15148, 293, 721, 51116], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 160, "seek": 50758, "start": 522.62, "end": 523.62, "text": " like this and validate.", "tokens": [51116, 411, 341, 293, 29562, 13, 51166], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 161, "seek": 50758, "start": 523.62, "end": 527.54, "text": " Architecturally, we could deliver the performance that we wanted to, show that the compiler", "tokens": [51166, 29306, 6512, 11, 321, 727, 4239, 264, 3389, 300, 321, 1415, 281, 11, 855, 300, 264, 31958, 51362], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 162, "seek": 50758, "start": 527.54, "end": 532.26, "text": " worked, iterate rapidly on the compiler without having to change a dependency, and go and", "tokens": [51362, 2732, 11, 44497, 12910, 322, 264, 31958, 1553, 1419, 281, 1319, 257, 33621, 11, 293, 352, 293, 51598], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 163, "seek": 50758, "start": 532.26, "end": 533.26, "text": " do this.", "tokens": [51598, 360, 341, 13, 51648], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 164, "seek": 50758, "start": 533.26, "end": 535.5799999999999, "text": " And what we found, fortunately, is that it works.", "tokens": [51648, 400, 437, 321, 1352, 11, 25511, 11, 307, 300, 309, 1985, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1741601716047563, "compression_ratio": 1.8037383177570094, "no_speech_prob": 0.0015977411530911922}, {"id": 165, "seek": 53558, "start": 535.58, "end": 537.62, "text": " The technology we built actually is good.", "tokens": [50364, 440, 2899, 321, 3094, 767, 307, 665, 13, 50466], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 166, "seek": 53558, "start": 537.62, "end": 538.62, "text": " It worked.", "tokens": [50466, 467, 2732, 13, 50516], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 167, "seek": 53558, "start": 538.62, "end": 539.74, "text": " It was proven out.", "tokens": [50516, 467, 390, 12785, 484, 13, 50572], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 168, "seek": 53558, "start": 539.74, "end": 543.5, "text": " And then immediately, we figured out that writing large amounts of MLR by hand is maddening", "tokens": [50572, 400, 550, 4258, 11, 321, 8932, 484, 300, 3579, 2416, 11663, 295, 21601, 49, 538, 1011, 307, 5244, 1556, 278, 50760], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 169, "seek": 53558, "start": 543.5, "end": 548.1, "text": " and doesn't scale, and there's no way a real normal user could actually do this.", "tokens": [50760, 293, 1177, 380, 4373, 11, 293, 456, 311, 572, 636, 257, 957, 2710, 4195, 727, 767, 360, 341, 13, 50990], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 170, "seek": 53558, "start": 548.1, "end": 552.46, "text": " And so, but this validation of the algorithms of the compiler tech of the low-level system,", "tokens": [50990, 400, 370, 11, 457, 341, 24071, 295, 264, 14642, 295, 264, 31958, 7553, 295, 264, 2295, 12, 12418, 1185, 11, 51208], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 171, "seek": 53558, "start": 552.46, "end": 557.14, "text": " which is very novel, and Jeff will talk about later, was really important to building our", "tokens": [51208, 597, 307, 588, 7613, 11, 293, 7506, 486, 751, 466, 1780, 11, 390, 534, 1021, 281, 2390, 527, 51442], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 172, "seek": 53558, "start": 557.14, "end": 559.6600000000001, "text": " system and doing so without being anchored on syntax.", "tokens": [51442, 1185, 293, 884, 370, 1553, 885, 12723, 2769, 322, 28431, 13, 51568], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 173, "seek": 53558, "start": 559.6600000000001, "end": 565.0600000000001, "text": " I think it was very good for both focus, but also for the ability to iterate.", "tokens": [51568, 286, 519, 309, 390, 588, 665, 337, 1293, 1879, 11, 457, 611, 337, 264, 3485, 281, 44497, 13, 51838], "temperature": 0.0, "avg_logprob": -0.16243291236984897, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.0009398279362358153}, {"id": 174, "seek": 56506, "start": 565.06, "end": 568.3, "text": " So once you get that, you get to the point of saying, what about syntax?", "tokens": [50364, 407, 1564, 291, 483, 300, 11, 291, 483, 281, 264, 935, 295, 1566, 11, 437, 466, 28431, 30, 50526], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 175, "seek": 56506, "start": 568.3, "end": 570.02, "text": " Syntax actually does matter.", "tokens": [50526, 3902, 580, 2797, 767, 775, 1871, 13, 50612], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 176, "seek": 56506, "start": 570.02, "end": 574.06, "text": " And so the three major approaches we looked at are, do we take an existing language like", "tokens": [50612, 400, 370, 264, 1045, 2563, 11587, 321, 2956, 412, 366, 11, 360, 321, 747, 364, 6741, 2856, 411, 50814], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 177, "seek": 56506, "start": 574.06, "end": 576.5799999999999, "text": " C++ or Swift or something like that?", "tokens": [50814, 383, 25472, 420, 25539, 420, 746, 411, 300, 30, 50940], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 178, "seek": 56506, "start": 576.5799999999999, "end": 578.18, "text": " Do we do an EDSL?", "tokens": [50940, 1144, 321, 360, 364, 462, 11844, 43, 30, 51020], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 179, "seek": 56506, "start": 578.18, "end": 580.02, "text": " Do we do a new language?", "tokens": [51020, 1144, 321, 360, 257, 777, 2856, 30, 51112], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 180, "seek": 56506, "start": 580.02, "end": 585.3, "text": " And so when we were talking about this, we came back to our core principles, our values,", "tokens": [51112, 400, 370, 562, 321, 645, 1417, 466, 341, 11, 321, 1361, 646, 281, 527, 4965, 9156, 11, 527, 4190, 11, 51376], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 181, "seek": 56506, "start": 585.3, "end": 588.5799999999999, "text": " our goals, which is that we wanted to meet people where they are.", "tokens": [51376, 527, 5493, 11, 597, 307, 300, 321, 1415, 281, 1677, 561, 689, 436, 366, 13, 51540], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 182, "seek": 56506, "start": 588.5799999999999, "end": 594.18, "text": " And whether you like it or not, AI developers, but also most software engineers are all in", "tokens": [51540, 400, 1968, 291, 411, 309, 420, 406, 11, 7318, 8849, 11, 457, 611, 881, 4722, 11955, 366, 439, 294, 51820], "temperature": 0.0, "avg_logprob": -0.14391253856902428, "compression_ratio": 1.6918032786885246, "no_speech_prob": 0.015899835154414177}, {"id": 183, "seek": 59418, "start": 594.18, "end": 595.18, "text": " Python.", "tokens": [50364, 15329, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 184, "seek": 59418, "start": 595.18, "end": 596.18, "text": " Right?", "tokens": [50414, 1779, 30, 50464], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 185, "seek": 59418, "start": 596.18, "end": 601.38, "text": " Python is pretty arguably the most popular programming language in the world.", "tokens": [50464, 15329, 307, 1238, 26771, 264, 881, 3743, 9410, 2856, 294, 264, 1002, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 186, "seek": 59418, "start": 601.38, "end": 605.66, "text": " And so if you're coming from a Python viewpoint, arguing with people, trust me, I've been there,", "tokens": [50724, 400, 370, 498, 291, 434, 1348, 490, 257, 15329, 35248, 11, 19697, 365, 561, 11, 3361, 385, 11, 286, 600, 668, 456, 11, 50938], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 187, "seek": 59418, "start": 605.66, "end": 608.78, "text": " to try to get them to switch to a different thing, is a huge amount of work and it doesn't", "tokens": [50938, 281, 853, 281, 483, 552, 281, 3679, 281, 257, 819, 551, 11, 307, 257, 2603, 2372, 295, 589, 293, 309, 1177, 380, 51094], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 188, "seek": 59418, "start": 608.78, "end": 609.9, "text": " really go anywhere.", "tokens": [51094, 534, 352, 4992, 13, 51150], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 189, "seek": 59418, "start": 609.9, "end": 614.3399999999999, "text": " And so we realize and believe we had to go with Python, and what that meant is that", "tokens": [51150, 400, 370, 321, 4325, 293, 1697, 321, 632, 281, 352, 365, 15329, 11, 293, 437, 300, 4140, 307, 300, 51372], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 190, "seek": 59418, "start": 614.3399999999999, "end": 619.9399999999999, "text": " meant that suddenly a bunch of existing systems are just off the table, like C++ is not Python,", "tokens": [51372, 4140, 300, 5800, 257, 3840, 295, 6741, 3652, 366, 445, 766, 264, 3199, 11, 411, 383, 25472, 307, 406, 15329, 11, 51652], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 191, "seek": 59418, "start": 619.9399999999999, "end": 620.9399999999999, "text": " Swift is not Python.", "tokens": [51652, 25539, 307, 406, 15329, 13, 51702], "temperature": 0.0, "avg_logprob": -0.1775970458984375, "compression_ratio": 1.6925675675675675, "no_speech_prob": 0.015416731126606464}, {"id": 192, "seek": 62094, "start": 620.94, "end": 622.1, "text": " These things are not Python.", "tokens": [50364, 1981, 721, 366, 406, 15329, 13, 50422], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 193, "seek": 62094, "start": 622.1, "end": 627.3000000000001, "text": " And so that really allows us to focus our frame.", "tokens": [50422, 400, 370, 300, 534, 4045, 505, 281, 1879, 527, 3920, 13, 50682], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 194, "seek": 62094, "start": 627.3000000000001, "end": 628.3000000000001, "text": " What about EDSLs?", "tokens": [50682, 708, 466, 462, 11844, 43, 82, 30, 50732], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 195, "seek": 62094, "start": 628.3000000000001, "end": 629.82, "text": " Well, EDSLs are super common.", "tokens": [50732, 1042, 11, 462, 11844, 43, 82, 366, 1687, 2689, 13, 50808], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 196, "seek": 62094, "start": 629.82, "end": 632.3800000000001, "text": " They're super popular and they exist for lots of good reasons.", "tokens": [50808, 814, 434, 1687, 3743, 293, 436, 2514, 337, 3195, 295, 665, 4112, 13, 50936], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 197, "seek": 62094, "start": 632.3800000000001, "end": 633.94, "text": " They're relatively easy to implement.", "tokens": [50936, 814, 434, 7226, 1858, 281, 4445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 198, "seek": 62094, "start": 633.94, "end": 639.1800000000001, "text": " We've had several talks at the conference about how to use Python so that you can extract", "tokens": [51014, 492, 600, 632, 2940, 6686, 412, 264, 7586, 466, 577, 281, 764, 15329, 370, 300, 291, 393, 8947, 51276], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 199, "seek": 62094, "start": 639.1800000000001, "end": 641.98, "text": " and build IR from Python ASTs and things like this.", "tokens": [51276, 293, 1322, 16486, 490, 15329, 316, 6840, 82, 293, 721, 411, 341, 13, 51416], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 200, "seek": 62094, "start": 641.98, "end": 645.0600000000001, "text": " It means you don't have to build tooling, you don't have to retrain, you can get to", "tokens": [51416, 467, 1355, 291, 500, 380, 362, 281, 1322, 46593, 11, 291, 500, 380, 362, 281, 1533, 7146, 11, 291, 393, 483, 281, 51570], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 201, "seek": 62094, "start": 645.0600000000001, "end": 646.86, "text": " market fast.", "tokens": [51570, 2142, 2370, 13, 51660], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 202, "seek": 62094, "start": 646.86, "end": 650.0600000000001, "text": " The problem is that they provide a really bad developer experience.", "tokens": [51660, 440, 1154, 307, 300, 436, 2893, 257, 534, 1578, 10754, 1752, 13, 51820], "temperature": 0.0, "avg_logprob": -0.163536254673788, "compression_ratio": 1.697452229299363, "no_speech_prob": 0.01064974069595337}, {"id": 203, "seek": 65006, "start": 650.8199999999999, "end": 652.3399999999999, "text": " You don't get a debugger.", "tokens": [50402, 509, 500, 380, 483, 257, 24083, 1321, 13, 50478], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 204, "seek": 65006, "start": 652.3399999999999, "end": 655.3399999999999, "text": " This really can't fit into the existing systems.", "tokens": [50478, 639, 534, 393, 380, 3318, 666, 264, 6741, 3652, 13, 50628], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 205, "seek": 65006, "start": 655.3399999999999, "end": 659.9799999999999, "text": " If you care about host performance and generality, Python's not there, at least not the level", "tokens": [50628, 759, 291, 1127, 466, 3975, 3389, 293, 1337, 1860, 11, 15329, 311, 406, 456, 11, 412, 1935, 406, 264, 1496, 50860], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 206, "seek": 65006, "start": 659.9799999999999, "end": 662.02, "text": " of performance that we care about.", "tokens": [50860, 295, 3389, 300, 321, 1127, 466, 13, 50962], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 207, "seek": 65006, "start": 662.02, "end": 667.66, "text": " And so what we really want is we want a system that allows us to innovate at all layers of", "tokens": [50962, 400, 370, 437, 321, 534, 528, 307, 321, 528, 257, 1185, 300, 4045, 505, 281, 33444, 412, 439, 7914, 295, 51244], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 208, "seek": 65006, "start": 667.66, "end": 668.66, "text": " this stack.", "tokens": [51244, 341, 8630, 13, 51294], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 209, "seek": 65006, "start": 668.66, "end": 670.66, "text": " Okay, well, how about a new language?", "tokens": [51294, 1033, 11, 731, 11, 577, 466, 257, 777, 2856, 30, 51394], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 210, "seek": 65006, "start": 670.66, "end": 674.0999999999999, "text": " Again, you know kind of where we're going with this, but a new language has the advantage", "tokens": [51394, 3764, 11, 291, 458, 733, 295, 689, 321, 434, 516, 365, 341, 11, 457, 257, 777, 2856, 575, 264, 5002, 51566], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 211, "seek": 65006, "start": 674.0999999999999, "end": 678.3399999999999, "text": " of you get the best quality result, you can control everything, you can invest in things,", "tokens": [51566, 295, 291, 483, 264, 1151, 3125, 1874, 11, 291, 393, 1969, 1203, 11, 291, 393, 1963, 294, 721, 11, 51778], "temperature": 0.0, "avg_logprob": -0.15640004011836364, "compression_ratio": 1.7525083612040133, "no_speech_prob": 0.004197291564196348}, {"id": 212, "seek": 67834, "start": 678.34, "end": 682.14, "text": " you can target CPUs with high performance, which is quite important to us.", "tokens": [50364, 291, 393, 3779, 13199, 82, 365, 1090, 3389, 11, 597, 307, 1596, 1021, 281, 505, 13, 50554], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 213, "seek": 67834, "start": 682.14, "end": 685.14, "text": " But what you need is a strong vision for what you're trying to do.", "tokens": [50554, 583, 437, 291, 643, 307, 257, 2068, 5201, 337, 437, 291, 434, 1382, 281, 360, 13, 50704], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 214, "seek": 67834, "start": 685.14, "end": 688.94, "text": " You need a long-term commitment because the demo is easy, but production quality thing", "tokens": [50704, 509, 643, 257, 938, 12, 7039, 8371, 570, 264, 10723, 307, 1858, 11, 457, 4265, 3125, 551, 50894], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 215, "seek": 67834, "start": 688.94, "end": 689.94, "text": " is hard.", "tokens": [50894, 307, 1152, 13, 50944], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 216, "seek": 67834, "start": 689.94, "end": 692.34, "text": " You need to be able to pay for it, you need to be able to track people, you need to be", "tokens": [50944, 509, 643, 281, 312, 1075, 281, 1689, 337, 309, 11, 291, 643, 281, 312, 1075, 281, 2837, 561, 11, 291, 643, 281, 312, 51064], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 217, "seek": 67834, "start": 692.34, "end": 697.82, "text": " able to have a big target of developers that makes it worth doing in the first place.", "tokens": [51064, 1075, 281, 362, 257, 955, 3779, 295, 8849, 300, 1669, 309, 3163, 884, 294, 264, 700, 1081, 13, 51338], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 218, "seek": 67834, "start": 697.82, "end": 704.0600000000001, "text": " And so this is actually well known to be ridiculously expensive, like building new programming", "tokens": [51338, 400, 370, 341, 307, 767, 731, 2570, 281, 312, 41358, 5124, 11, 411, 2390, 777, 9410, 51650], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 219, "seek": 67834, "start": 704.0600000000001, "end": 707.9000000000001, "text": " language is not a simple thing that you should reach for as your first outcome.", "tokens": [51650, 2856, 307, 406, 257, 2199, 551, 300, 291, 820, 2524, 337, 382, 428, 700, 9700, 13, 51842], "temperature": 0.0, "avg_logprob": -0.15623013956563456, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00044410332338884473}, {"id": 220, "seek": 70790, "start": 707.9, "end": 712.42, "text": " But as you know, yes, we want a baby little mojo to be built and what we decide to do", "tokens": [50364, 583, 382, 291, 458, 11, 2086, 11, 321, 528, 257, 3186, 707, 705, 5134, 281, 312, 3094, 293, 437, 321, 4536, 281, 360, 50590], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 221, "seek": 70790, "start": 712.42, "end": 714.5, "text": " is actually do this.", "tokens": [50590, 307, 767, 360, 341, 13, 50694], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 222, "seek": 70790, "start": 714.5, "end": 715.5, "text": " And why?", "tokens": [50694, 400, 983, 30, 50744], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 223, "seek": 70790, "start": 715.5, "end": 719.3, "text": " Well, it's because it's the only way to achieve our goals, to achieve the best quality of", "tokens": [50744, 1042, 11, 309, 311, 570, 309, 311, 264, 787, 636, 281, 4584, 527, 5493, 11, 281, 4584, 264, 1151, 3125, 295, 50934], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 224, "seek": 70790, "start": 719.3, "end": 725.38, "text": " result for AI developers and many other developers worldwide and be able to lift the industry.", "tokens": [50934, 1874, 337, 7318, 8849, 293, 867, 661, 8849, 13485, 293, 312, 1075, 281, 5533, 264, 3518, 13, 51238], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 225, "seek": 70790, "start": 725.38, "end": 728.6999999999999, "text": " There are many point solutions that demonstrate many different capabilities, but we really", "tokens": [51238, 821, 366, 867, 935, 6547, 300, 11698, 867, 819, 10862, 11, 457, 321, 534, 51404], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 226, "seek": 70790, "start": 728.6999999999999, "end": 732.38, "text": " want to go beyond this and integrate and unify the world.", "tokens": [51404, 528, 281, 352, 4399, 341, 293, 13365, 293, 517, 2505, 264, 1002, 13, 51588], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 227, "seek": 70790, "start": 732.38, "end": 736.14, "text": " And so if you come back to what we need to do, we think that we have all the constituent", "tokens": [51588, 400, 370, 498, 291, 808, 646, 281, 437, 321, 643, 281, 360, 11, 321, 519, 300, 321, 362, 439, 264, 16085, 317, 51776], "temperature": 0.0, "avg_logprob": -0.1295313835144043, "compression_ratio": 1.718849840255591, "no_speech_prob": 0.00911765731871128}, {"id": 228, "seek": 73614, "start": 736.14, "end": 739.54, "text": " ingredients here with a good vision, we think we know what we're doing.", "tokens": [50364, 6952, 510, 365, 257, 665, 5201, 11, 321, 519, 321, 458, 437, 321, 434, 884, 13, 50534], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 229, "seek": 73614, "start": 739.54, "end": 741.18, "text": " We also know how hard this is.", "tokens": [50534, 492, 611, 458, 577, 1152, 341, 307, 13, 50616], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 230, "seek": 73614, "start": 741.18, "end": 746.14, "text": " So I personally built several major programming languages that are used in production and", "tokens": [50616, 407, 286, 5665, 3094, 2940, 2563, 9410, 8650, 300, 366, 1143, 294, 4265, 293, 50864], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 231, "seek": 73614, "start": 746.14, "end": 749.42, "text": " have seen the entire journey and made many mistakes and have learned from them.", "tokens": [50864, 362, 1612, 264, 2302, 4671, 293, 1027, 867, 8038, 293, 362, 3264, 490, 552, 13, 51028], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 232, "seek": 73614, "start": 749.42, "end": 755.18, "text": " And so with full knowledge, we step into this and say, okay, let's do this.", "tokens": [51028, 400, 370, 365, 1577, 3601, 11, 321, 1823, 666, 341, 293, 584, 11, 1392, 11, 718, 311, 360, 341, 13, 51316], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 233, "seek": 73614, "start": 755.18, "end": 757.22, "text": " So I'll give you the high level design points of mojo.", "tokens": [51316, 407, 286, 603, 976, 291, 264, 1090, 1496, 1715, 2793, 295, 705, 5134, 13, 51418], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 234, "seek": 73614, "start": 757.22, "end": 759.5, "text": " As you know, it's a member of the Python family.", "tokens": [51418, 1018, 291, 458, 11, 309, 311, 257, 4006, 295, 264, 15329, 1605, 13, 51532], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 235, "seek": 73614, "start": 759.5, "end": 763.1, "text": " Over time, it will grow into being a full superset because we don't want to do a Python", "tokens": [51532, 4886, 565, 11, 309, 486, 1852, 666, 885, 257, 1577, 37906, 302, 570, 321, 500, 380, 528, 281, 360, 257, 15329, 51712], "temperature": 0.0, "avg_logprob": -0.12753182006396835, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.029287369921803474}, {"id": 236, "seek": 76310, "start": 763.1, "end": 766.62, "text": " two to three thing anymore to Python programmers.", "tokens": [50364, 732, 281, 1045, 551, 3602, 281, 15329, 41504, 13, 50540], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 237, "seek": 76310, "start": 766.62, "end": 771.26, "text": " As we said before, it's focused on system programming, high performance, working backwards", "tokens": [50540, 1018, 321, 848, 949, 11, 309, 311, 5178, 322, 1185, 9410, 11, 1090, 3389, 11, 1364, 12204, 50772], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 238, "seek": 76310, "start": 771.26, "end": 775.26, "text": " from the capability, the speed of light of hardware, definitely not working forwards", "tokens": [50772, 490, 264, 13759, 11, 264, 3073, 295, 1442, 295, 8837, 11, 2138, 406, 1364, 30126, 50972], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 239, "seek": 76310, "start": 775.26, "end": 778.38, "text": " from what Python can do today.", "tokens": [50972, 490, 437, 15329, 393, 360, 965, 13, 51128], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 240, "seek": 76310, "start": 778.38, "end": 782.7, "text": " Also lots of hardware, anything with the program counter can apply.", "tokens": [51128, 2743, 3195, 295, 8837, 11, 1340, 365, 264, 1461, 5682, 393, 3079, 13, 51344], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 241, "seek": 76310, "start": 782.7, "end": 786.1, "text": " But coming back to this also, and we'll talk about this a little bit, it's about unlocking", "tokens": [51344, 583, 1348, 646, 281, 341, 611, 11, 293, 321, 603, 751, 466, 341, 257, 707, 857, 11, 309, 311, 466, 49620, 51514], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 242, "seek": 76310, "start": 786.1, "end": 788.38, "text": " the modular compiler stack.", "tokens": [51514, 264, 31111, 31958, 8630, 13, 51628], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 243, "seek": 76310, "start": 788.38, "end": 792.62, "text": " And so instead of talking about the high level fluffy stuff, I'll introduce Jeff and he can", "tokens": [51628, 400, 370, 2602, 295, 1417, 466, 264, 1090, 1496, 22778, 1507, 11, 286, 603, 5366, 7506, 293, 415, 393, 51840], "temperature": 0.0, "avg_logprob": -0.1551236952504804, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.006690361071377993}, {"id": 244, "seek": 79262, "start": 792.62, "end": 795.5, "text": " tell you a little bit more about how it actually works.", "tokens": [50364, 980, 291, 257, 707, 857, 544, 466, 577, 309, 767, 1985, 13, 50508], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 245, "seek": 79262, "start": 795.5, "end": 798.38, "text": " Thanks Chris for the introduction.", "tokens": [50508, 2561, 6688, 337, 264, 9339, 13, 50652], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 246, "seek": 79262, "start": 798.38, "end": 803.5, "text": " So we are started off by de-risking the core hypothesis and we have an MLIR based compiler", "tokens": [50652, 407, 321, 366, 1409, 766, 538, 368, 12, 5714, 5092, 264, 4965, 17291, 293, 321, 362, 364, 21601, 7740, 2361, 31958, 50908], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 247, "seek": 79262, "start": 803.5, "end": 807.22, "text": " that is different a little bit from the systems that predated it.", "tokens": [50908, 300, 307, 819, 257, 707, 857, 490, 264, 3652, 300, 3852, 770, 309, 13, 51094], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 248, "seek": 79262, "start": 807.22, "end": 809.42, "text": " And we've proven that we can be state of the art.", "tokens": [51094, 400, 321, 600, 12785, 300, 321, 393, 312, 1785, 295, 264, 1523, 13, 51204], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 249, "seek": 79262, "start": 809.42, "end": 814.54, "text": " The problem is that we've got like 50,000 lines of handwritten MLIR.", "tokens": [51204, 440, 1154, 307, 300, 321, 600, 658, 411, 2625, 11, 1360, 3876, 295, 1011, 26859, 21601, 7740, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 250, "seek": 79262, "start": 814.54, "end": 818.46, "text": " And handwritten MLIR is like write once, read never.", "tokens": [51460, 400, 1011, 26859, 21601, 7740, 307, 411, 2464, 1564, 11, 1401, 1128, 13, 51656], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 251, "seek": 79262, "start": 818.46, "end": 822.26, "text": " It's so verbose, you have to write the types every time you use an SSA value.", "tokens": [51656, 467, 311, 370, 9595, 541, 11, 291, 362, 281, 2464, 264, 3467, 633, 565, 291, 764, 364, 318, 8886, 2158, 13, 51846], "temperature": 0.0, "avg_logprob": -0.2000564126407399, "compression_ratio": 1.6734006734006734, "no_speech_prob": 0.0016478366451337934}, {"id": 252, "seek": 82226, "start": 822.26, "end": 827.42, "text": " It's pretty hard to actually write incorrect code, but then it's not readable, it's unmaintainable", "tokens": [50364, 467, 311, 1238, 1152, 281, 767, 2464, 18424, 3089, 11, 457, 550, 309, 311, 406, 49857, 11, 309, 311, 19334, 5114, 491, 712, 50622], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 253, "seek": 82226, "start": 827.42, "end": 831.42, "text": " and the new people being brought into the company are like, what is this?", "tokens": [50622, 293, 264, 777, 561, 885, 3038, 666, 264, 2237, 366, 411, 11, 437, 307, 341, 30, 50822], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 254, "seek": 82226, "start": 831.42, "end": 832.42, "text": " So we need syntax.", "tokens": [50822, 407, 321, 643, 28431, 13, 50872], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 255, "seek": 82226, "start": 832.42, "end": 836.06, "text": " We need a programming language for MLIR.", "tokens": [50872, 492, 643, 257, 9410, 2856, 337, 21601, 7740, 13, 51054], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 256, "seek": 82226, "start": 836.06, "end": 837.54, "text": " Why all MLIR?", "tokens": [51054, 1545, 439, 21601, 7740, 30, 51128], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 257, "seek": 82226, "start": 837.54, "end": 841.46, "text": " Well it turns out that modern computers are getting really complicated.", "tokens": [51128, 1042, 309, 4523, 484, 300, 4363, 10807, 366, 1242, 534, 6179, 13, 51324], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 258, "seek": 82226, "start": 841.46, "end": 843.18, "text": " Modern types are getting really complicated.", "tokens": [51324, 19814, 3467, 366, 1242, 534, 6179, 13, 51410], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 259, "seek": 82226, "start": 843.18, "end": 844.74, "text": " Look at just floating points.", "tokens": [51410, 2053, 412, 445, 12607, 2793, 13, 51488], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 260, "seek": 82226, "start": 844.74, "end": 847.42, "text": " Most languages, give or take, have a flow and a double.", "tokens": [51488, 4534, 8650, 11, 976, 420, 747, 11, 362, 257, 3095, 293, 257, 3834, 13, 51622], "temperature": 0.0, "avg_logprob": -0.13038565154768464, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.010648210532963276}, {"id": 261, "seek": 84742, "start": 847.42, "end": 852.62, "text": " But MLIR has things like float 8, E4, M3, FNUS.", "tokens": [50364, 583, 21601, 7740, 575, 721, 411, 15706, 1649, 11, 462, 19, 11, 376, 18, 11, 479, 45, 3447, 13, 50624], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 262, "seek": 84742, "start": 852.62, "end": 854.86, "text": " I'm sure it's useful, okay?", "tokens": [50624, 286, 478, 988, 309, 311, 4420, 11, 1392, 30, 50736], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 263, "seek": 84742, "start": 854.86, "end": 856.74, "text": " And that means that we need to have access to it.", "tokens": [50736, 400, 300, 1355, 300, 321, 643, 281, 362, 2105, 281, 309, 13, 50830], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 264, "seek": 84742, "start": 856.74, "end": 859.9399999999999, "text": " There's probably a piece of hardware somewhere on it that uses this data type and it's very", "tokens": [50830, 821, 311, 1391, 257, 2522, 295, 8837, 4079, 322, 309, 300, 4960, 341, 1412, 2010, 293, 309, 311, 588, 50990], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 265, "seek": 84742, "start": 859.9399999999999, "end": 860.9399999999999, "text": " fast.", "tokens": [50990, 2370, 13, 51040], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 266, "seek": 84742, "start": 860.9399999999999, "end": 863.14, "text": " That's just the tip of the iceberg.", "tokens": [51040, 663, 311, 445, 264, 4125, 295, 264, 38880, 13, 51150], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 267, "seek": 84742, "start": 863.14, "end": 867.9399999999999, "text": " MLIR is such a vast ecosystem with many different kinds of hardware targets, domain specific", "tokens": [51150, 21601, 7740, 307, 1270, 257, 8369, 11311, 365, 867, 819, 3685, 295, 8837, 12911, 11, 9274, 2685, 51390], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 268, "seek": 84742, "start": 867.9399999999999, "end": 869.4599999999999, "text": " dialects and so on.", "tokens": [51390, 24652, 82, 293, 370, 322, 13, 51466], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 269, "seek": 84742, "start": 869.4599999999999, "end": 872.42, "text": " And we would like Mojo to be able to take advantage of all of that.", "tokens": [51466, 400, 321, 576, 411, 3335, 5134, 281, 312, 1075, 281, 747, 5002, 295, 439, 295, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 270, "seek": 84742, "start": 872.42, "end": 876.3399999999999, "text": " So we need syntax trigger for MLIR in general.", "tokens": [51614, 407, 321, 643, 28431, 7875, 337, 21601, 7740, 294, 2674, 13, 51810], "temperature": 0.0, "avg_logprob": -0.20569489218971945, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.0008295151637867093}, {"id": 271, "seek": 87634, "start": 876.34, "end": 878.7, "text": " And then how do we approach something like that?", "tokens": [50364, 400, 550, 577, 360, 321, 3109, 746, 411, 300, 30, 50482], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 272, "seek": 87634, "start": 878.7, "end": 880.7, "text": " Well we start with the types.", "tokens": [50482, 1042, 321, 722, 365, 264, 3467, 13, 50582], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 273, "seek": 87634, "start": 880.7, "end": 884.7, "text": " In a programming language, types tend to be the most load bearing element.", "tokens": [50582, 682, 257, 9410, 2856, 11, 3467, 3928, 281, 312, 264, 881, 3677, 17350, 4478, 13, 50782], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 274, "seek": 87634, "start": 884.7, "end": 887.38, "text": " You need types to do computations on them after all.", "tokens": [50782, 509, 643, 3467, 281, 360, 2807, 763, 322, 552, 934, 439, 13, 50916], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 275, "seek": 87634, "start": 887.38, "end": 890.9, "text": " So let's start by focusing on a library-based language.", "tokens": [50916, 407, 718, 311, 722, 538, 8416, 322, 257, 6405, 12, 6032, 2856, 13, 51092], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 276, "seek": 87634, "start": 890.9, "end": 894.86, "text": " That means that we write all the parts of the language in the library.", "tokens": [51092, 663, 1355, 300, 321, 2464, 439, 264, 3166, 295, 264, 2856, 294, 264, 6405, 13, 51290], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 277, "seek": 87634, "start": 894.86, "end": 897.74, "text": " And the good news is anybody can write libraries.", "tokens": [51290, 400, 264, 665, 2583, 307, 4472, 393, 2464, 15148, 13, 51434], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 278, "seek": 87634, "start": 897.74, "end": 902.38, "text": " So this scales the effort of engineering to everyone in the world who can write Mojo.", "tokens": [51434, 407, 341, 17408, 264, 4630, 295, 7043, 281, 1518, 294, 264, 1002, 567, 393, 2464, 3335, 5134, 13, 51666], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 279, "seek": 87634, "start": 902.38, "end": 904.62, "text": " Not just a couple of people who work on the language.", "tokens": [51666, 1726, 445, 257, 1916, 295, 561, 567, 589, 322, 264, 2856, 13, 51778], "temperature": 0.0, "avg_logprob": -0.13305557135379675, "compression_ratio": 1.7317880794701987, "no_speech_prob": 0.006486200727522373}, {"id": 280, "seek": 90462, "start": 904.62, "end": 907.66, "text": " And that's really important because we don't want built-in types in the language to be", "tokens": [50364, 400, 300, 311, 534, 1021, 570, 321, 500, 380, 528, 3094, 12, 259, 3467, 294, 264, 2856, 281, 312, 50516], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 281, "seek": 90462, "start": 907.66, "end": 912.18, "text": " special or be more performant than what you can enable in the library because that bottlenecks", "tokens": [50516, 2121, 420, 312, 544, 2042, 394, 813, 437, 291, 393, 9528, 294, 264, 6405, 570, 300, 44641, 2761, 50742], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 282, "seek": 90462, "start": 912.18, "end": 916.02, "text": " performance and the scalability of the system to the people who work on the language.", "tokens": [50742, 3389, 293, 264, 15664, 2310, 295, 264, 1185, 281, 264, 561, 567, 589, 322, 264, 2856, 13, 50934], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 283, "seek": 90462, "start": 916.02, "end": 921.78, "text": " So we need to give people who use the programming language library authors the same power as", "tokens": [50934, 407, 321, 643, 281, 976, 561, 567, 764, 264, 9410, 2856, 6405, 16552, 264, 912, 1347, 382, 51222], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 284, "seek": 90462, "start": 921.78, "end": 924.62, "text": " language engineers.", "tokens": [51222, 2856, 11955, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 285, "seek": 90462, "start": 924.62, "end": 929.14, "text": " It turns out actually that Python has a really extensible type system.", "tokens": [51364, 467, 4523, 484, 767, 300, 15329, 575, 257, 534, 1279, 30633, 2010, 1185, 13, 51590], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 286, "seek": 90462, "start": 929.14, "end": 933.74, "text": " You could argue that user-defined types in Python are actually much more powerful than", "tokens": [51590, 509, 727, 9695, 300, 4195, 12, 37716, 3467, 294, 15329, 366, 767, 709, 544, 4005, 813, 51820], "temperature": 0.0, "avg_logprob": -0.09225670496622722, "compression_ratio": 1.8551724137931034, "no_speech_prob": 0.0007552881725132465}, {"id": 287, "seek": 93374, "start": 933.74, "end": 936.78, "text": " the built-in types like interfloat.", "tokens": [50364, 264, 3094, 12, 259, 3467, 411, 728, 43645, 267, 13, 50516], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 288, "seek": 93374, "start": 936.78, "end": 942.46, "text": " And the reason is because Python provides this kind of ability to encapsulate type semantics", "tokens": [50516, 400, 264, 1778, 307, 570, 15329, 6417, 341, 733, 295, 3485, 281, 38745, 5256, 2010, 4361, 45298, 50800], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 289, "seek": 93374, "start": 942.46, "end": 946.0600000000001, "text": " behind Dunder methods, which are really syntactic wrappers.", "tokens": [50800, 2261, 413, 6617, 7150, 11, 597, 366, 534, 23980, 19892, 7843, 15226, 13, 50980], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 290, "seek": 93374, "start": 946.0600000000001, "end": 948.14, "text": " So let's just use that in Mojo.", "tokens": [50980, 407, 718, 311, 445, 764, 300, 294, 3335, 5134, 13, 51084], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 291, "seek": 93374, "start": 948.14, "end": 952.22, "text": " We use a struct, which is like a class, but it's densely packed in performance, to wrap", "tokens": [51084, 492, 764, 257, 6594, 11, 597, 307, 411, 257, 1508, 11, 457, 309, 311, 24505, 736, 13265, 294, 3389, 11, 281, 7019, 51288], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 292, "seek": 93374, "start": 952.22, "end": 953.22, "text": " an MLR type.", "tokens": [51288, 364, 21601, 49, 2010, 13, 51338], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 293, "seek": 93374, "start": 953.22, "end": 958.9, "text": " And then we use Dunder methods as well as class methods to wrap MLR operations.", "tokens": [51338, 400, 550, 321, 764, 413, 6617, 7150, 382, 731, 382, 1508, 7150, 281, 7019, 21601, 49, 7705, 13, 51622], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 294, "seek": 93374, "start": 958.9, "end": 961.66, "text": " And what you get is any MLR type will work.", "tokens": [51622, 400, 437, 291, 483, 307, 604, 21601, 49, 2010, 486, 589, 13, 51760], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 295, "seek": 93374, "start": 961.66, "end": 963.62, "text": " Any MLR operation will work.", "tokens": [51760, 2639, 21601, 49, 6916, 486, 589, 13, 51858], "temperature": 0.0, "avg_logprob": -0.11863382538752769, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.00043726051808334887}, {"id": 296, "seek": 96362, "start": 963.62, "end": 969.58, "text": " And so now we have 1 plus 2, Dsugar is to an MLR op index.add.", "tokens": [50364, 400, 370, 586, 321, 362, 502, 1804, 568, 11, 413, 82, 8307, 307, 281, 364, 21601, 49, 999, 8186, 13, 25224, 13, 50662], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 297, "seek": 96362, "start": 969.58, "end": 972.9, "text": " The other important aspect is we need to make sure that these user-defined abstractions", "tokens": [50662, 440, 661, 1021, 4171, 307, 321, 643, 281, 652, 988, 300, 613, 4195, 12, 37716, 12649, 626, 50828], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 298, "seek": 96362, "start": 972.9, "end": 975.82, "text": " feel native, that they're zero cost.", "tokens": [50828, 841, 8470, 11, 300, 436, 434, 4018, 2063, 13, 50974], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 299, "seek": 96362, "start": 975.82, "end": 977.34, "text": " So how does Mojo do that?", "tokens": [50974, 407, 577, 775, 3335, 5134, 360, 300, 30, 51050], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 300, "seek": 96362, "start": 977.34, "end": 981.7, "text": " Well, it has a couple of bells and whistles to tell the compiler that treat this type in", "tokens": [51050, 1042, 11, 309, 575, 257, 1916, 295, 25474, 293, 49282, 281, 980, 264, 31958, 300, 2387, 341, 2010, 294, 51268], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 301, "seek": 96362, "start": 981.7, "end": 985.74, "text": " a specific way, effectively giving a built-in-like experience.", "tokens": [51268, 257, 2685, 636, 11, 8659, 2902, 257, 3094, 12, 259, 12, 4092, 1752, 13, 51470], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 302, "seek": 96362, "start": 985.74, "end": 989.98, "text": " And one of these is they always inline no debug, which will always inline the function,", "tokens": [51470, 400, 472, 295, 613, 307, 436, 1009, 294, 1889, 572, 24083, 11, 597, 486, 1009, 294, 1889, 264, 2445, 11, 51682], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 303, "seek": 96362, "start": 989.98, "end": 991.46, "text": " no question about it.", "tokens": [51682, 572, 1168, 466, 309, 13, 51756], "temperature": 0.0, "avg_logprob": -0.17547631986213452, "compression_ratio": 1.5522875816993464, "no_speech_prob": 0.000855797145050019}, {"id": 304, "seek": 99146, "start": 991.46, "end": 994.7800000000001, "text": " And for a better debugging experience, it nukes out all the debug info, so you don't", "tokens": [50364, 400, 337, 257, 1101, 45592, 1752, 11, 309, 297, 2034, 279, 484, 439, 264, 24083, 13614, 11, 370, 291, 500, 380, 50530], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 305, "seek": 99146, "start": 994.7800000000001, "end": 998.02, "text": " step into a plus of an integer.", "tokens": [50530, 1823, 666, 257, 1804, 295, 364, 24922, 13, 50692], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 306, "seek": 99146, "start": 998.02, "end": 1003.02, "text": " So we put this all together, just these pieces of basic types, so you have a simple while", "tokens": [50692, 407, 321, 829, 341, 439, 1214, 11, 445, 613, 3755, 295, 3875, 3467, 11, 370, 291, 362, 257, 2199, 1339, 50942], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 307, "seek": 99146, "start": 1003.02, "end": 1004.02, "text": " loop in Mojo.", "tokens": [50942, 6367, 294, 3335, 5134, 13, 50992], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 308, "seek": 99146, "start": 1004.02, "end": 1008.22, "text": " Well, the parser will then spit a bunch of source-level IR, right?", "tokens": [50992, 1042, 11, 264, 21156, 260, 486, 550, 22127, 257, 3840, 295, 4009, 12, 12418, 16486, 11, 558, 30, 51202], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 309, "seek": 99146, "start": 1008.22, "end": 1012.38, "text": " But then Mojo has guaranteed optimizations that run all the time, such as the always-inliner", "tokens": [51202, 583, 550, 3335, 5134, 575, 18031, 5028, 14455, 300, 1190, 439, 264, 565, 11, 1270, 382, 264, 1009, 12, 259, 36849, 51410], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 310, "seek": 99146, "start": 1012.38, "end": 1014.1800000000001, "text": " and memtoreg.", "tokens": [51410, 293, 1334, 83, 418, 70, 13, 51500], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 311, "seek": 99146, "start": 1014.1800000000001, "end": 1018.98, "text": " And then this gets desugarred down to IR that is pretty close to what we would have written", "tokens": [51500, 400, 550, 341, 2170, 730, 8307, 986, 760, 281, 16486, 300, 307, 1238, 1998, 281, 437, 321, 576, 362, 3720, 51740], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 312, "seek": 99146, "start": 1018.98, "end": 1019.98, "text": " by hand.", "tokens": [51740, 538, 1011, 13, 51790], "temperature": 0.0, "avg_logprob": -0.16224937707605497, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.002251662779599428}, {"id": 313, "seek": 101998, "start": 1019.98, "end": 1024.66, "text": " And that's important because it, from the get-go, provides a predictable IR-gen model", "tokens": [50364, 400, 300, 311, 1021, 570, 309, 11, 490, 264, 483, 12, 1571, 11, 6417, 257, 27737, 16486, 12, 1766, 2316, 50598], "temperature": 0.0, "avg_logprob": -0.15695560584634038, "compression_ratio": 1.5298245614035089, "no_speech_prob": 0.0002611539966892451}, {"id": 314, "seek": 101998, "start": 1024.66, "end": 1030.78, "text": " for the programmer, and it helps us get an off-ramp from all the handwritten MLIR.", "tokens": [50598, 337, 264, 32116, 11, 293, 309, 3665, 505, 483, 364, 766, 12, 81, 1215, 490, 439, 264, 1011, 26859, 21601, 7740, 13, 50904], "temperature": 0.0, "avg_logprob": -0.15695560584634038, "compression_ratio": 1.5298245614035089, "no_speech_prob": 0.0002611539966892451}, {"id": 315, "seek": 101998, "start": 1030.78, "end": 1034.98, "text": " But so it turns out we've actually discovered what MLIR really stands for.", "tokens": [50904, 583, 370, 309, 4523, 484, 321, 600, 767, 6941, 437, 21601, 7740, 534, 7382, 337, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15695560584634038, "compression_ratio": 1.5298245614035089, "no_speech_prob": 0.0002611539966892451}, {"id": 316, "seek": 101998, "start": 1034.98, "end": 1039.78, "text": " It's Mojo Fire Emoji Language Intermediate Representation.", "tokens": [51114, 467, 311, 3335, 5134, 7652, 462, 3280, 4013, 24445, 5751, 3130, 473, 19945, 399, 13, 51354], "temperature": 0.0, "avg_logprob": -0.15695560584634038, "compression_ratio": 1.5298245614035089, "no_speech_prob": 0.0002611539966892451}, {"id": 317, "seek": 101998, "start": 1039.78, "end": 1042.7, "text": " And the best part is your dialect works, too.", "tokens": [51354, 400, 264, 1151, 644, 307, 428, 24652, 1985, 11, 886, 13, 51500], "temperature": 0.0, "avg_logprob": -0.15695560584634038, "compression_ratio": 1.5298245614035089, "no_speech_prob": 0.0002611539966892451}, {"id": 318, "seek": 101998, "start": 1042.7, "end": 1047.34, "text": " So this is zero cost abstraction around any MLIR, so let's say you have a shape dialect", "tokens": [51500, 407, 341, 307, 4018, 2063, 37765, 926, 604, 21601, 7740, 11, 370, 718, 311, 584, 291, 362, 257, 3909, 24652, 51732], "temperature": 0.0, "avg_logprob": -0.15695560584634038, "compression_ratio": 1.5298245614035089, "no_speech_prob": 0.0002611539966892451}, {"id": 319, "seek": 104734, "start": 1047.4199999999998, "end": 1054.02, "text": " with a mosh.ape type, and it implements plus to concat and subscript to getDim.", "tokens": [50368, 365, 257, 275, 3019, 13, 64, 494, 2010, 11, 293, 309, 704, 17988, 1804, 281, 1588, 267, 293, 2325, 662, 281, 483, 35, 332, 13, 50698], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 320, "seek": 104734, "start": 1054.02, "end": 1057.06, "text": " Well, now you can write shape functions in Mojo.", "tokens": [50698, 1042, 11, 586, 291, 393, 2464, 3909, 6828, 294, 3335, 5134, 13, 50850], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 321, "seek": 104734, "start": 1057.06, "end": 1060.6599999999999, "text": " It spits out some IR that's been desugarred to, and then you can ingest this IR and do", "tokens": [50850, 467, 637, 1208, 484, 512, 16486, 300, 311, 668, 730, 8307, 986, 281, 11, 293, 550, 291, 393, 3957, 377, 341, 16486, 293, 360, 51030], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 322, "seek": 104734, "start": 1060.6599999999999, "end": 1063.62, "text": " cool compiler stuff like shape inference.", "tokens": [51030, 1627, 31958, 1507, 411, 3909, 38253, 13, 51178], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 323, "seek": 104734, "start": 1063.62, "end": 1066.6999999999998, "text": " And the best part is all of the language tooling just works.", "tokens": [51178, 400, 264, 1151, 644, 307, 439, 295, 264, 2856, 46593, 445, 1985, 13, 51332], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 324, "seek": 104734, "start": 1066.6999999999998, "end": 1071.9399999999998, "text": " So you get code completion, you get doc generation, you get syntax highlighting, and even debugging", "tokens": [51332, 407, 291, 483, 3089, 19372, 11, 291, 483, 3211, 5125, 11, 291, 483, 28431, 26551, 11, 293, 754, 45592, 51594], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 325, "seek": 104734, "start": 1071.9399999999998, "end": 1074.3, "text": " if that's relevant.", "tokens": [51594, 498, 300, 311, 7340, 13, 51712], "temperature": 0.0, "avg_logprob": -0.17597285183993253, "compression_ratio": 1.6162361623616237, "no_speech_prob": 0.009408889338374138}, {"id": 326, "seek": 107430, "start": 1074.3, "end": 1077.3799999999999, "text": " But MLIR just forms the bottom level of the language.", "tokens": [50364, 583, 21601, 7740, 445, 6422, 264, 2767, 1496, 295, 264, 2856, 13, 50518], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 327, "seek": 107430, "start": 1077.3799999999999, "end": 1081.22, "text": " It's how we talk to the hardware, it's how we talk to the various dialects.", "tokens": [50518, 467, 311, 577, 321, 751, 281, 264, 8837, 11, 309, 311, 577, 321, 751, 281, 264, 3683, 24652, 82, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 328, "seek": 107430, "start": 1081.22, "end": 1084.98, "text": " Building on top of that requires high-level abstractions, and the way you do that in Mojo", "tokens": [50710, 18974, 322, 1192, 295, 300, 7029, 1090, 12, 12418, 12649, 626, 11, 293, 264, 636, 291, 360, 300, 294, 3335, 5134, 50898], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 329, "seek": 107430, "start": 1084.98, "end": 1086.78, "text": " was metaprogramming.", "tokens": [50898, 390, 1131, 569, 340, 1342, 2810, 13, 50988], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 330, "seek": 107430, "start": 1086.78, "end": 1091.02, "text": " So Mojo needs to build hardware generality, and the way we do that is with metaprogramming.", "tokens": [50988, 407, 3335, 5134, 2203, 281, 1322, 8837, 1337, 1860, 11, 293, 264, 636, 321, 360, 300, 307, 365, 1131, 569, 340, 1342, 2810, 13, 51200], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 331, "seek": 107430, "start": 1091.02, "end": 1095.54, "text": " So you can write a kernel without caring about what the vector length is, and then, say,", "tokens": [51200, 407, 291, 393, 2464, 257, 28256, 1553, 15365, 466, 437, 264, 8062, 4641, 307, 11, 293, 550, 11, 584, 11, 51426], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 332, "seek": 107430, "start": 1095.54, "end": 1098.74, "text": " in this example, ask the compiler to pick one for you.", "tokens": [51426, 294, 341, 1365, 11, 1029, 264, 31958, 281, 1888, 472, 337, 291, 13, 51586], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 333, "seek": 107430, "start": 1098.74, "end": 1101.5, "text": " It turns out that metaprogramming is also pretty cool.", "tokens": [51586, 467, 4523, 484, 300, 1131, 569, 340, 1342, 2810, 307, 611, 1238, 1627, 13, 51724], "temperature": 0.0, "avg_logprob": -0.1344721237285025, "compression_ratio": 1.7878787878787878, "no_speech_prob": 0.0006986067746765912}, {"id": 334, "seek": 110150, "start": 1101.5, "end": 1106.3, "text": " Texts are nice, code reuse is great, and it allows to have scalable development.", "tokens": [50364, 18643, 82, 366, 1481, 11, 3089, 26225, 307, 869, 11, 293, 309, 4045, 281, 362, 38481, 3250, 13, 50604], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 335, "seek": 110150, "start": 1106.3, "end": 1108.66, "text": " So where can we look at for a metaprogramming system?", "tokens": [50604, 407, 689, 393, 321, 574, 412, 337, 257, 1131, 569, 340, 1342, 2810, 1185, 30, 50722], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 336, "seek": 110150, "start": 1108.66, "end": 1113.1, "text": " Well, I actually like C++, I don't know about you, and C++ has templates.", "tokens": [50722, 1042, 11, 286, 767, 411, 383, 25472, 11, 286, 500, 380, 458, 466, 291, 11, 293, 383, 25472, 575, 21165, 13, 50944], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 337, "seek": 110150, "start": 1113.1, "end": 1115.1, "text": " And duct typing in C++ is really powerful.", "tokens": [50944, 400, 25954, 18444, 294, 383, 25472, 307, 534, 4005, 13, 51044], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 338, "seek": 110150, "start": 1115.1, "end": 1117.62, "text": " Let's see, write some pretty crazy generic code.", "tokens": [51044, 961, 311, 536, 11, 2464, 512, 1238, 3219, 19577, 3089, 13, 51170], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 339, "seek": 110150, "start": 1117.62, "end": 1120.74, "text": " The problem with that is that the usability is poor.", "tokens": [51170, 440, 1154, 365, 300, 307, 300, 264, 46878, 307, 4716, 13, 51326], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 340, "seek": 110150, "start": 1120.74, "end": 1124.58, "text": " I think template error messages get better every year, but there's still some room to", "tokens": [51326, 286, 519, 12379, 6713, 7897, 483, 1101, 633, 1064, 11, 457, 456, 311, 920, 512, 1808, 281, 51518], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 341, "seek": 110150, "start": 1124.58, "end": 1125.78, "text": " go.", "tokens": [51518, 352, 13, 51578], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 342, "seek": 110150, "start": 1125.78, "end": 1131.22, "text": " And it turns out that for the kind of metaprogramming, high-performance programming needs, C++", "tokens": [51578, 400, 309, 4523, 484, 300, 337, 264, 733, 295, 1131, 569, 340, 1342, 2810, 11, 1090, 12, 50242, 9410, 2203, 11, 383, 25472, 51850], "temperature": 0.0, "avg_logprob": -0.16397567697473475, "compression_ratio": 1.6156156156156156, "no_speech_prob": 0.007343778386712074}, {"id": 343, "seek": 113122, "start": 1131.42, "end": 1132.94, "text": " just aren't good enough.", "tokens": [50374, 445, 3212, 380, 665, 1547, 13, 50450], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 344, "seek": 113122, "start": 1132.94, "end": 1134.66, "text": " So imagine you have a tensor type.", "tokens": [50450, 407, 3811, 291, 362, 257, 40863, 2010, 13, 50536], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 345, "seek": 113122, "start": 1134.66, "end": 1136.9, "text": " It has a static or dynamic rank.", "tokens": [50536, 467, 575, 257, 13437, 420, 8546, 6181, 13, 50648], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 346, "seek": 113122, "start": 1136.9, "end": 1138.5, "text": " It has a static or dynamic d-type.", "tokens": [50648, 467, 575, 257, 13437, 420, 8546, 274, 12, 20467, 13, 50728], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 347, "seek": 113122, "start": 1138.5, "end": 1141.22, "text": " It has partially dynamic shape, partially dynamic stride.", "tokens": [50728, 467, 575, 18886, 8546, 3909, 11, 18886, 8546, 1056, 482, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 348, "seek": 113122, "start": 1141.22, "end": 1142.94, "text": " It gets ugly pretty quickly.", "tokens": [50864, 467, 2170, 12246, 1238, 2661, 13, 50950], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 349, "seek": 113122, "start": 1142.94, "end": 1146.22, "text": " So it's not good enough, and let's see if we can build something better.", "tokens": [50950, 407, 309, 311, 406, 665, 1547, 11, 293, 718, 311, 536, 498, 321, 393, 1322, 746, 1101, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 350, "seek": 113122, "start": 1146.22, "end": 1151.78, "text": " So it turns out, once again, Python actually has really powerful metaprogramming.", "tokens": [51114, 407, 309, 4523, 484, 11, 1564, 797, 11, 15329, 767, 575, 534, 4005, 1131, 569, 340, 1342, 2810, 13, 51392], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 351, "seek": 113122, "start": 1151.78, "end": 1157.6200000000001, "text": " Decorators can arbitrarily modify objects and return a function where there is a type.", "tokens": [51392, 12427, 284, 3391, 393, 19071, 3289, 16927, 6565, 293, 2736, 257, 2445, 689, 456, 307, 257, 2010, 13, 51684], "temperature": 0.0, "avg_logprob": -0.16607686012021958, "compression_ratio": 1.7538461538461538, "no_speech_prob": 0.0075746579095721245}, {"id": 352, "seek": 115762, "start": 1157.6999999999998, "end": 1162.26, "text": " And with full AST reflection in Python is what enabled all these crazy libraries, such", "tokens": [50368, 400, 365, 1577, 316, 6840, 12914, 294, 15329, 307, 437, 15172, 439, 613, 3219, 15148, 11, 1270, 50596], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 353, "seek": 115762, "start": 1162.26, "end": 1166.9399999999998, "text": " as the ML frameworks like PyTorch, Jaxx, and TensorFlow, as well as things like Numba.", "tokens": [50596, 382, 264, 21601, 29834, 411, 9953, 51, 284, 339, 11, 508, 2797, 87, 11, 293, 37624, 11, 382, 731, 382, 721, 411, 426, 49353, 13, 50830], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 354, "seek": 115762, "start": 1166.9399999999998, "end": 1170.58, "text": " The problem with the Python metaprogramming is that it happens at runtime, which means", "tokens": [50830, 440, 1154, 365, 264, 15329, 1131, 569, 340, 1342, 2810, 307, 300, 309, 2314, 412, 34474, 11, 597, 1355, 51012], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 355, "seek": 115762, "start": 1170.58, "end": 1175.5, "text": " it's slow, it's not going to run an accelerator, and it gives zero control over the generated", "tokens": [51012, 309, 311, 2964, 11, 309, 311, 406, 516, 281, 1190, 364, 39889, 11, 293, 309, 2709, 4018, 1969, 670, 264, 10833, 51258], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 356, "seek": 115762, "start": 1175.5, "end": 1176.82, "text": " code.", "tokens": [51258, 3089, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 357, "seek": 115762, "start": 1176.82, "end": 1180.2199999999998, "text": " So the challenge for us is let's try to do it at compile time.", "tokens": [51324, 407, 264, 3430, 337, 505, 307, 718, 311, 853, 281, 360, 309, 412, 31413, 565, 13, 51494], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 358, "seek": 115762, "start": 1180.2199999999998, "end": 1182.02, "text": " So that brings us to mojo parameters.", "tokens": [51494, 407, 300, 5607, 505, 281, 705, 5134, 9834, 13, 51584], "temperature": 0.0, "avg_logprob": -0.1664272003173828, "compression_ratio": 1.589655172413793, "no_speech_prob": 0.0019264703150838614}, {"id": 359, "seek": 118202, "start": 1182.02, "end": 1188.26, "text": " Mojo parameters are compile time values that form the backbone of the metaprogramming system.", "tokens": [50364, 3335, 5134, 9834, 366, 31413, 565, 4190, 300, 1254, 264, 34889, 295, 264, 1131, 569, 340, 1342, 2810, 1185, 13, 50676], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 360, "seek": 118202, "start": 1188.26, "end": 1189.74, "text": " So structs can have parameters.", "tokens": [50676, 407, 6594, 82, 393, 362, 9834, 13, 50750], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 361, "seek": 118202, "start": 1189.74, "end": 1191.5, "text": " These are compile time values.", "tokens": [50750, 1981, 366, 31413, 565, 4190, 13, 50838], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 362, "seek": 118202, "start": 1191.5, "end": 1195.26, "text": " Functions can have input parameters, and then you can declare name parameter values with", "tokens": [50838, 11166, 3916, 393, 362, 4846, 9834, 11, 293, 550, 291, 393, 19710, 1315, 13075, 4190, 365, 51026], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 363, "seek": 118202, "start": 1195.26, "end": 1196.26, "text": " alias declarations.", "tokens": [51026, 419, 4609, 16694, 763, 13, 51076], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 364, "seek": 118202, "start": 1196.26, "end": 1200.7, "text": " So you can kind of think of them as being like C++ templates, but they're a little bit", "tokens": [51076, 407, 291, 393, 733, 295, 519, 295, 552, 382, 885, 411, 383, 25472, 21165, 11, 457, 436, 434, 257, 707, 857, 51298], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 365, "seek": 118202, "start": 1200.7, "end": 1201.7, "text": " different.", "tokens": [51298, 819, 13, 51348], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 366, "seek": 118202, "start": 1201.7, "end": 1206.3, "text": " For example, in C++ you have using declarations for type aliases and constexpr declarations", "tokens": [51348, 1171, 1365, 11, 294, 383, 25472, 291, 362, 1228, 16694, 763, 337, 2010, 10198, 1957, 293, 1817, 3121, 1424, 16694, 763, 51578], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 367, "seek": 118202, "start": 1206.3, "end": 1207.82, "text": " for compile time values.", "tokens": [51578, 337, 31413, 565, 4190, 13, 51654], "temperature": 0.0, "avg_logprob": -0.12227567036946614, "compression_ratio": 1.92, "no_speech_prob": 0.010984238237142563}, {"id": 368, "seek": 120782, "start": 1207.82, "end": 1213.6599999999999, "text": " But in mojo, types are just compile time values, and so aliases and, say, compile time floats", "tokens": [50364, 583, 294, 705, 5134, 11, 3467, 366, 445, 31413, 565, 4190, 11, 293, 370, 10198, 1957, 293, 11, 584, 11, 31413, 565, 37878, 50656], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 369, "seek": 120782, "start": 1213.6599999999999, "end": 1217.3, "text": " and compile time ints are the same thing.", "tokens": [50656, 293, 31413, 565, 560, 82, 366, 264, 912, 551, 13, 50838], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 370, "seek": 120782, "start": 1217.3, "end": 1221.06, "text": " The most important thing that gives is that the meta language is the same as the actual", "tokens": [50838, 440, 881, 1021, 551, 300, 2709, 307, 300, 264, 19616, 2856, 307, 264, 912, 382, 264, 3539, 51026], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 371, "seek": 120782, "start": 1221.06, "end": 1222.06, "text": " language.", "tokens": [51026, 2856, 13, 51076], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 372, "seek": 120782, "start": 1222.06, "end": 1225.98, "text": " And Zig really blaze the trail here by having no distinction between the metaprogram and", "tokens": [51076, 400, 50004, 534, 16379, 1381, 264, 9924, 510, 538, 1419, 572, 16844, 1296, 264, 1131, 569, 340, 1342, 293, 51272], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 373, "seek": 120782, "start": 1225.98, "end": 1227.4199999999998, "text": " the actual program.", "tokens": [51272, 264, 3539, 1461, 13, 51344], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 374, "seek": 120782, "start": 1227.4199999999998, "end": 1232.46, "text": " In mojo, we strive to ensure that almost any user-defined type and function can be used", "tokens": [51344, 682, 705, 5134, 11, 321, 23829, 281, 5586, 300, 1920, 604, 4195, 12, 37716, 2010, 293, 2445, 393, 312, 1143, 51596], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 375, "seek": 120782, "start": 1232.46, "end": 1235.5, "text": " and called in a parameter expression at compile time.", "tokens": [51596, 293, 1219, 294, 257, 13075, 6114, 412, 31413, 565, 13, 51748], "temperature": 0.0, "avg_logprob": -0.13535014206801005, "compression_ratio": 1.8264150943396227, "no_speech_prob": 0.0002694623835850507}, {"id": 376, "seek": 123550, "start": 1235.5, "end": 1241.22, "text": " And the way we do that is with an MLI interpreter that has a full memory model.", "tokens": [50364, 400, 264, 636, 321, 360, 300, 307, 365, 364, 21601, 40, 34132, 300, 575, 257, 1577, 4675, 2316, 13, 50650], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 377, "seek": 123550, "start": 1241.22, "end": 1243.94, "text": " So to really drive this point home, we have an example here.", "tokens": [50650, 407, 281, 534, 3332, 341, 935, 1280, 11, 321, 362, 364, 1365, 510, 13, 50786], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 378, "seek": 123550, "start": 1243.94, "end": 1247.66, "text": " It's fill a vector with a bunch of integers, OK, not too bad.", "tokens": [50786, 467, 311, 2836, 257, 8062, 365, 257, 3840, 295, 41674, 11, 2264, 11, 406, 886, 1578, 13, 50972], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 379, "seek": 123550, "start": 1247.66, "end": 1250.82, "text": " This function can be called in either compile or runtime.", "tokens": [50972, 639, 2445, 393, 312, 1219, 294, 2139, 31413, 420, 34474, 13, 51130], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 380, "seek": 123550, "start": 1250.82, "end": 1255.22, "text": " And if it was called compile time, you can even return a type instance.", "tokens": [51130, 400, 498, 309, 390, 1219, 31413, 565, 11, 291, 393, 754, 2736, 257, 2010, 5197, 13, 51350], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 381, "seek": 123550, "start": 1255.22, "end": 1260.38, "text": " And this vector has heap allocation that is computed at compile time and then used at", "tokens": [51350, 400, 341, 8062, 575, 33591, 27599, 300, 307, 40610, 412, 31413, 565, 293, 550, 1143, 412, 51608], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 382, "seek": 123550, "start": 1260.38, "end": 1262.6, "text": " runtime.", "tokens": [51608, 34474, 13, 51719], "temperature": 0.0, "avg_logprob": -0.17935417793892525, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.0009109939564950764}, {"id": 383, "seek": 126260, "start": 1262.6, "end": 1263.6, "text": " So when does this happen?", "tokens": [50364, 407, 562, 775, 341, 1051, 30, 50414], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 384, "seek": 126260, "start": 1263.6, "end": 1268.8799999999999, "text": " When do we do, say, instantiation of parameter values, function specialization, and interpreting", "tokens": [50414, 1133, 360, 321, 360, 11, 584, 11, 9836, 6642, 295, 13075, 4190, 11, 2445, 2121, 2144, 11, 293, 37395, 50678], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 385, "seek": 126260, "start": 1268.8799999999999, "end": 1269.8799999999999, "text": " of code?", "tokens": [50678, 295, 3089, 30, 50728], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 386, "seek": 126260, "start": 1269.8799999999999, "end": 1273.0, "text": " Well, it doesn't happen in the parser like in C++.", "tokens": [50728, 1042, 11, 309, 1177, 380, 1051, 294, 264, 21156, 260, 411, 294, 383, 25472, 13, 50884], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 387, "seek": 126260, "start": 1273.0, "end": 1278.04, "text": " So in mojo, we do parameter instantiation in a process called elaboration, and it happens", "tokens": [50884, 407, 294, 705, 5134, 11, 321, 360, 13075, 9836, 6642, 294, 257, 1399, 1219, 16298, 399, 11, 293, 309, 2314, 51136], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 388, "seek": 126260, "start": 1278.04, "end": 1280.08, "text": " later in the compiler pipeline.", "tokens": [51136, 1780, 294, 264, 31958, 15517, 13, 51238], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 389, "seek": 126260, "start": 1280.08, "end": 1285.24, "text": " What that means is that now mojo needs a IR representation for parametric code.", "tokens": [51238, 708, 300, 1355, 307, 300, 586, 705, 5134, 2203, 257, 16486, 10290, 337, 6220, 17475, 3089, 13, 51496], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 390, "seek": 126260, "start": 1285.24, "end": 1291.0, "text": " So in this example, we have a piece of IR, and we have a parameter in the IR called value.", "tokens": [51496, 407, 294, 341, 1365, 11, 321, 362, 257, 2522, 295, 16486, 11, 293, 321, 362, 257, 13075, 294, 264, 16486, 1219, 2158, 13, 51784], "temperature": 0.0, "avg_logprob": -0.1119459257351132, "compression_ratio": 1.8129770992366412, "no_speech_prob": 0.00021653130534105003}, {"id": 391, "seek": 129100, "start": 1291.68, "end": 1294.52, "text": " Importantly, this parametric IR is target agnostic.", "tokens": [50398, 26391, 3627, 11, 341, 6220, 17475, 16486, 307, 3779, 623, 77, 19634, 13, 50540], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 392, "seek": 129100, "start": 1294.52, "end": 1295.52, "text": " It's portable.", "tokens": [50540, 467, 311, 21800, 13, 50590], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 393, "seek": 129100, "start": 1295.52, "end": 1299.52, "text": " So that means something like size of lives directly in the IR, and it is resolved by the", "tokens": [50590, 407, 300, 1355, 746, 411, 2744, 295, 2909, 3838, 294, 264, 16486, 11, 293, 309, 307, 20772, 538, 264, 50790], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 394, "seek": 129100, "start": 1299.52, "end": 1300.68, "text": " elaborator.", "tokens": [50790, 16298, 1639, 13, 50848], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 395, "seek": 129100, "start": 1300.68, "end": 1305.32, "text": " So this enables something like split compilation like CUDA, and perhaps one day separate compilation", "tokens": [50848, 407, 341, 17077, 746, 411, 7472, 40261, 411, 29777, 7509, 11, 293, 4317, 472, 786, 4994, 40261, 51080], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 396, "seek": 129100, "start": 1305.32, "end": 1307.88, "text": " of generics like Swift.", "tokens": [51080, 295, 1337, 1167, 411, 25539, 13, 51208], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 397, "seek": 129100, "start": 1307.88, "end": 1314.8, "text": " So the elaboration pass is an MLIR pass that performs function instantiation as an IR transformation.", "tokens": [51208, 407, 264, 16298, 399, 1320, 307, 364, 21601, 7740, 1320, 300, 26213, 2445, 9836, 6642, 382, 364, 16486, 9887, 13, 51554], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 398, "seek": 129100, "start": 1314.8, "end": 1318.64, "text": " So in this piece of IR, we've got two calls to the function print int with two different", "tokens": [51554, 407, 294, 341, 2522, 295, 16486, 11, 321, 600, 658, 732, 5498, 281, 264, 2445, 4482, 560, 365, 732, 819, 51746], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 399, "seek": 129100, "start": 1318.64, "end": 1319.64, "text": " parameters.", "tokens": [51746, 9834, 13, 51796], "temperature": 0.0, "avg_logprob": -0.15161354311050906, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.00023780771880410612}, {"id": 400, "seek": 131964, "start": 1319.64, "end": 1326.24, "text": " It gets stamped out into two new functions, and the callers are replaced appropriately.", "tokens": [50364, 467, 2170, 39111, 484, 666, 732, 777, 6828, 11, 293, 264, 818, 433, 366, 10772, 23505, 13, 50694], "temperature": 0.0, "avg_logprob": -0.13765376585501213, "compression_ratio": 1.5770750988142292, "no_speech_prob": 0.0006070069503039122}, {"id": 401, "seek": 131964, "start": 1326.24, "end": 1332.6000000000001, "text": " One consequence of a pass to do elaboration is that the language is late bound by design.", "tokens": [50694, 1485, 18326, 295, 257, 1320, 281, 360, 16298, 399, 307, 300, 264, 2856, 307, 3469, 5472, 538, 1715, 13, 51012], "temperature": 0.0, "avg_logprob": -0.13765376585501213, "compression_ratio": 1.5770750988142292, "no_speech_prob": 0.0006070069503039122}, {"id": 402, "seek": 131964, "start": 1332.6000000000001, "end": 1336.3200000000002, "text": " That poses a couple of language design challenges, but that means that you can do cool stuff", "tokens": [51012, 663, 26059, 257, 1916, 295, 2856, 1715, 4759, 11, 457, 300, 1355, 300, 291, 393, 360, 1627, 1507, 51198], "temperature": 0.0, "avg_logprob": -0.13765376585501213, "compression_ratio": 1.5770750988142292, "no_speech_prob": 0.0006070069503039122}, {"id": 403, "seek": 131964, "start": 1336.3200000000002, "end": 1341.88, "text": " like autotuning, where any parameter value can be autotuned, i.e., the elaborator says,", "tokens": [51198, 411, 1476, 310, 37726, 11, 689, 604, 13075, 2158, 393, 312, 1476, 310, 43703, 11, 741, 13, 68, 7933, 264, 16298, 1639, 1619, 11, 51476], "temperature": 0.0, "avg_logprob": -0.13765376585501213, "compression_ratio": 1.5770750988142292, "no_speech_prob": 0.0006070069503039122}, {"id": 404, "seek": 131964, "start": 1341.88, "end": 1345.4, "text": " oh, OK, width can be 2, 4, 8, 16, or 32.", "tokens": [51476, 1954, 11, 2264, 11, 11402, 393, 312, 568, 11, 1017, 11, 1649, 11, 3165, 11, 420, 8858, 13, 51652], "temperature": 0.0, "avg_logprob": -0.13765376585501213, "compression_ratio": 1.5770750988142292, "no_speech_prob": 0.0006070069503039122}, {"id": 405, "seek": 134540, "start": 1345.4, "end": 1351.0800000000002, "text": " Then we just go have five instantiations of this function, and then use some benchmarking", "tokens": [50364, 1396, 321, 445, 352, 362, 1732, 9836, 72, 763, 295, 341, 2445, 11, 293, 550, 764, 512, 18927, 278, 50648], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 406, "seek": 134540, "start": 1351.0800000000002, "end": 1352.6000000000001, "text": " to pick the best one for you.", "tokens": [50648, 281, 1888, 264, 1151, 472, 337, 291, 13, 50724], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 407, "seek": 134540, "start": 1352.6000000000001, "end": 1356.48, "text": " So this is how we get the very bottom layer of hardware abstraction, where the programmer", "tokens": [50724, 407, 341, 307, 577, 321, 483, 264, 588, 2767, 4583, 295, 8837, 37765, 11, 689, 264, 32116, 50918], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 408, "seek": 134540, "start": 1356.48, "end": 1361.64, "text": " can write an algorithm, and then we let the programming language pick the best parameter", "tokens": [50918, 393, 2464, 364, 9284, 11, 293, 550, 321, 718, 264, 9410, 2856, 1888, 264, 1151, 13075, 51176], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 409, "seek": 134540, "start": 1361.64, "end": 1364.3200000000002, "text": " for you.", "tokens": [51176, 337, 291, 13, 51310], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 410, "seek": 134540, "start": 1364.3200000000002, "end": 1368.48, "text": " And this also allows us to avoid some of the performance problems of C++ templates.", "tokens": [51310, 400, 341, 611, 4045, 505, 281, 5042, 512, 295, 264, 3389, 2740, 295, 383, 25472, 21165, 13, 51518], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 411, "seek": 134540, "start": 1368.48, "end": 1371.76, "text": " For example, let's see, you have a generic function, add.", "tokens": [51518, 1171, 1365, 11, 718, 311, 536, 11, 291, 362, 257, 19577, 2445, 11, 909, 13, 51682], "temperature": 0.0, "avg_logprob": -0.13066987733583194, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.0032725229393690825}, {"id": 412, "seek": 137176, "start": 1371.76, "end": 1375.36, "text": " And for generality, we pass the arguments by const reference.", "tokens": [50364, 400, 337, 1337, 1860, 11, 321, 1320, 264, 12869, 538, 1817, 6408, 13, 50544], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 413, "seek": 137176, "start": 1375.36, "end": 1379.6, "text": " Passing it by const reference is fine for a large struct type thing that doesn't fit", "tokens": [50544, 10319, 278, 309, 538, 1817, 6408, 307, 2489, 337, 257, 2416, 6594, 2010, 551, 300, 1177, 380, 3318, 50756], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 414, "seek": 137176, "start": 1379.6, "end": 1382.16, "text": " nicely in registers like a string.", "tokens": [50756, 9594, 294, 38351, 411, 257, 6798, 13, 50884], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 415, "seek": 137176, "start": 1382.16, "end": 1386.68, "text": " But then for something like an integer, this ends up becoming const reference to an int,", "tokens": [50884, 583, 550, 337, 746, 411, 364, 24922, 11, 341, 5314, 493, 5617, 1817, 6408, 281, 364, 560, 11, 51110], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 416, "seek": 137176, "start": 1386.68, "end": 1389.28, "text": " which for a trivial type like int is not very performant.", "tokens": [51110, 597, 337, 257, 26703, 2010, 411, 560, 307, 406, 588, 2042, 394, 13, 51240], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 417, "seek": 137176, "start": 1389.28, "end": 1392.8, "text": " And so if this function doesn't end up getting inlined, what ends up happening is the ints", "tokens": [51240, 400, 370, 498, 341, 2445, 1177, 380, 917, 493, 1242, 294, 13564, 11, 437, 5314, 493, 2737, 307, 264, 560, 82, 51416], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 418, "seek": 137176, "start": 1392.8, "end": 1393.8, "text": " get pinned to the stack.", "tokens": [51416, 483, 33802, 281, 264, 8630, 13, 51466], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 419, "seek": 137176, "start": 1393.8, "end": 1397.0, "text": " This is bad for performance.", "tokens": [51466, 639, 307, 1578, 337, 3389, 13, 51626], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 420, "seek": 137176, "start": 1397.0, "end": 1401.36, "text": " With late elaboration and mojo, we can have late ABI lowering, which basically means that", "tokens": [51626, 2022, 3469, 16298, 399, 293, 705, 5134, 11, 321, 393, 362, 3469, 316, 11291, 28124, 11, 597, 1936, 1355, 300, 51844], "temperature": 0.0, "avg_logprob": -0.12356478731397172, "compression_ratio": 1.7987220447284344, "no_speech_prob": 0.006691829301416874}, {"id": 421, "seek": 140136, "start": 1401.36, "end": 1404.1999999999998, "text": " the source code is not the same as the ABI.", "tokens": [50364, 264, 4009, 3089, 307, 406, 264, 912, 382, 264, 316, 11291, 13, 50506], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 422, "seek": 140136, "start": 1404.1999999999998, "end": 1409.08, "text": " And this makes language interop slightly more involved, but it's not that big of a deal.", "tokens": [50506, 400, 341, 1669, 2856, 728, 404, 4748, 544, 3288, 11, 457, 309, 311, 406, 300, 955, 295, 257, 2028, 13, 50750], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 423, "seek": 140136, "start": 1409.08, "end": 1413.6399999999999, "text": " But what it means is that for a generic function, like add in mojo, when the elaborator instantiates", "tokens": [50750, 583, 437, 309, 1355, 307, 300, 337, 257, 19577, 2445, 11, 411, 909, 294, 705, 5134, 11, 562, 264, 16298, 1639, 9836, 72, 1024, 50978], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 424, "seek": 140136, "start": 1413.6399999999999, "end": 1417.6799999999998, "text": " the generic types, it can then change the calling conventions of the types to respect", "tokens": [50978, 264, 19577, 3467, 11, 309, 393, 550, 1319, 264, 5141, 33520, 295, 264, 3467, 281, 3104, 51180], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 425, "seek": 140136, "start": 1417.6799999999998, "end": 1419.6799999999998, "text": " the guarantees that it has.", "tokens": [51180, 264, 32567, 300, 309, 575, 13, 51280], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 426, "seek": 140136, "start": 1419.6799999999998, "end": 1424.36, "text": " So for a heavy type like string, it stays in memory, it gets passed around as a pointer,", "tokens": [51280, 407, 337, 257, 4676, 2010, 411, 6798, 11, 309, 10834, 294, 4675, 11, 309, 2170, 4678, 926, 382, 257, 23918, 11, 51514], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 427, "seek": 140136, "start": 1424.36, "end": 1425.36, "text": " it's nice and efficient.", "tokens": [51514, 309, 311, 1481, 293, 7148, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 428, "seek": 140136, "start": 1425.36, "end": 1429.8799999999999, "text": " But for an integer, it gets passed around in registers, in SSA registers, and returned", "tokens": [51564, 583, 337, 364, 24922, 11, 309, 2170, 4678, 926, 294, 38351, 11, 294, 318, 8886, 38351, 11, 293, 8752, 51790], "temperature": 0.0, "avg_logprob": -0.1144271367032763, "compression_ratio": 1.79672131147541, "no_speech_prob": 0.0010319964494556189}, {"id": 429, "seek": 142988, "start": 1429.88, "end": 1433.2, "text": " out as a function result.", "tokens": [50364, 484, 382, 257, 2445, 1874, 13, 50530], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 430, "seek": 142988, "start": 1433.2, "end": 1436.92, "text": " So that's just an introduction to how mojo metaprogramming works.", "tokens": [50530, 407, 300, 311, 445, 364, 9339, 281, 577, 705, 5134, 1131, 569, 340, 1342, 2810, 1985, 13, 50716], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 431, "seek": 142988, "start": 1436.92, "end": 1441.3200000000002, "text": " Let's talk now about more how the cogent architecture works and some of the more unique details", "tokens": [50716, 961, 311, 751, 586, 466, 544, 577, 264, 598, 6930, 9482, 1985, 293, 512, 295, 264, 544, 3845, 4365, 50936], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 432, "seek": 142988, "start": 1441.3200000000002, "end": 1442.3200000000002, "text": " of that.", "tokens": [50936, 295, 300, 13, 50986], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 433, "seek": 142988, "start": 1442.3200000000002, "end": 1446.7600000000002, "text": " One of them is that the entire mojo compiler stack is driven by the ORCJIT from bottom to", "tokens": [50986, 1485, 295, 552, 307, 300, 264, 2302, 705, 5134, 31958, 8630, 307, 9555, 538, 264, 19654, 34, 41, 3927, 490, 2767, 281, 51208], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 434, "seek": 142988, "start": 1446.7600000000002, "end": 1447.7600000000002, "text": " top.", "tokens": [51208, 1192, 13, 51258], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 435, "seek": 142988, "start": 1447.7600000000002, "end": 1451.3200000000002, "text": " And this gives us lazy on-demand compilations so you don't compile things you don't have", "tokens": [51258, 400, 341, 2709, 505, 14847, 322, 12, 10730, 474, 715, 388, 763, 370, 291, 500, 380, 31413, 721, 291, 500, 380, 362, 51436], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 436, "seek": 142988, "start": 1451.3200000000002, "end": 1452.3200000000002, "text": " to.", "tokens": [51436, 281, 13, 51486], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 437, "seek": 142988, "start": 1452.3200000000002, "end": 1456.0800000000002, "text": " It enables responsive tooling, and it turns out that having a JIT is important for something", "tokens": [51486, 467, 17077, 21826, 46593, 11, 293, 309, 4523, 484, 300, 1419, 257, 508, 3927, 307, 1021, 337, 746, 51674], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 438, "seek": 142988, "start": 1456.0800000000002, "end": 1458.44, "text": " like auto tuning in search.", "tokens": [51674, 411, 8399, 15164, 294, 3164, 13, 51792], "temperature": 0.0, "avg_logprob": -0.1484942127474778, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0060960398986935616}, {"id": 439, "seek": 145844, "start": 1458.44, "end": 1462.44, "text": " And we get compiler caching at each stage of the pipeline, meaning that you don't need", "tokens": [50364, 400, 321, 483, 31958, 269, 2834, 412, 1184, 3233, 295, 264, 15517, 11, 3620, 300, 291, 500, 380, 643, 50564], "temperature": 0.0, "avg_logprob": -0.12617733947232238, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.0017004400724545121}, {"id": 440, "seek": 145844, "start": 1462.44, "end": 1469.52, "text": " something like Ccache to get code compilation caching.", "tokens": [50564, 746, 411, 383, 66, 6000, 281, 483, 3089, 40261, 269, 2834, 13, 50918], "temperature": 0.0, "avg_logprob": -0.12617733947232238, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.0017004400724545121}, {"id": 441, "seek": 145844, "start": 1469.52, "end": 1475.48, "text": " Well we also use ORCJIT not actually as a JIT, we use it to generate static code, like", "tokens": [50918, 1042, 321, 611, 764, 19654, 34, 41, 3927, 406, 767, 382, 257, 508, 3927, 11, 321, 764, 309, 281, 8460, 13437, 3089, 11, 411, 51216], "temperature": 0.0, "avg_logprob": -0.12617733947232238, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.0017004400724545121}, {"id": 442, "seek": 145844, "start": 1475.48, "end": 1477.8400000000001, "text": " static archives and executables.", "tokens": [51216, 13437, 25607, 293, 7568, 2965, 13, 51334], "temperature": 0.0, "avg_logprob": -0.12617733947232238, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.0017004400724545121}, {"id": 443, "seek": 145844, "start": 1477.8400000000001, "end": 1482.24, "text": " And in the ORCJIT, we've built a really dumb but fast linker that just takes a bunch of", "tokens": [51334, 400, 294, 264, 19654, 34, 41, 3927, 11, 321, 600, 3094, 257, 534, 10316, 457, 2370, 2113, 260, 300, 445, 2516, 257, 3840, 295, 51554], "temperature": 0.0, "avg_logprob": -0.12617733947232238, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.0017004400724545121}, {"id": 444, "seek": 145844, "start": 1482.24, "end": 1487.8400000000001, "text": " object files, pulls out the symbols, and slams them together into a static archive.", "tokens": [51554, 2657, 7098, 11, 16982, 484, 264, 16944, 11, 293, 1061, 4070, 552, 1214, 666, 257, 13437, 23507, 13, 51834], "temperature": 0.0, "avg_logprob": -0.12617733947232238, "compression_ratio": 1.6463878326996197, "no_speech_prob": 0.0017004400724545121}, {"id": 445, "seek": 148784, "start": 1487.84, "end": 1491.9199999999998, "text": " For a linker, we do call into the system linker.", "tokens": [50364, 1171, 257, 2113, 260, 11, 321, 360, 818, 666, 264, 1185, 2113, 260, 13, 50568], "temperature": 0.0, "avg_logprob": -0.12320908045364638, "compression_ratio": 1.721311475409836, "no_speech_prob": 0.017171921208500862}, {"id": 446, "seek": 148784, "start": 1491.9199999999998, "end": 1497.6, "text": " As we mentioned before, we have a pre-elaboration portable IR, but that also means that we can", "tokens": [50568, 1018, 321, 2835, 949, 11, 321, 362, 257, 659, 12, 338, 3816, 399, 21800, 16486, 11, 457, 300, 611, 1355, 300, 321, 393, 50852], "temperature": 0.0, "avg_logprob": -0.12320908045364638, "compression_ratio": 1.721311475409836, "no_speech_prob": 0.017171921208500862}, {"id": 447, "seek": 148784, "start": 1497.6, "end": 1502.52, "text": " serialize this into MLR bytecode, and that makes mojo packages architecturally portable.", "tokens": [50852, 17436, 1125, 341, 666, 21601, 49, 40846, 22332, 11, 293, 300, 1669, 705, 5134, 17401, 6331, 6512, 21800, 13, 51098], "temperature": 0.0, "avg_logprob": -0.12320908045364638, "compression_ratio": 1.721311475409836, "no_speech_prob": 0.017171921208500862}, {"id": 448, "seek": 148784, "start": 1502.52, "end": 1508.1999999999998, "text": " A mojo package will contain this parser-level, source-level IR, as well as the pre-elaboration", "tokens": [51098, 316, 705, 5134, 7372, 486, 5304, 341, 21156, 260, 12, 12418, 11, 4009, 12, 12418, 16486, 11, 382, 731, 382, 264, 659, 12, 338, 3816, 399, 51382], "temperature": 0.0, "avg_logprob": -0.12320908045364638, "compression_ratio": 1.721311475409836, "no_speech_prob": 0.017171921208500862}, {"id": 449, "seek": 148784, "start": 1508.1999999999998, "end": 1514.08, "text": " IR, and optionally, you have the post-elaboration and pre-compiled code for various targets.", "tokens": [51382, 16486, 11, 293, 3614, 379, 11, 291, 362, 264, 2183, 12, 338, 3816, 399, 293, 659, 12, 21541, 7292, 3089, 337, 3683, 12911, 13, 51676], "temperature": 0.0, "avg_logprob": -0.12320908045364638, "compression_ratio": 1.721311475409836, "no_speech_prob": 0.017171921208500862}, {"id": 450, "seek": 151408, "start": 1514.08, "end": 1518.96, "text": " So what this means is you can ship mojo packages without source code, with just the bytecode.", "tokens": [50364, 407, 437, 341, 1355, 307, 291, 393, 5374, 705, 5134, 17401, 1553, 4009, 3089, 11, 365, 445, 264, 40846, 22332, 13, 50608], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 451, "seek": 151408, "start": 1518.96, "end": 1523.48, "text": " The parser is able to take out this source-level IR and reconstruct metadata, like function", "tokens": [50608, 440, 21156, 260, 307, 1075, 281, 747, 484, 341, 4009, 12, 12418, 16486, 293, 31499, 26603, 11, 411, 2445, 50834], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 452, "seek": 151408, "start": 1523.48, "end": 1527.0, "text": " signatures and type members and so on.", "tokens": [50834, 32322, 293, 2010, 2679, 293, 370, 322, 13, 51010], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 453, "seek": 151408, "start": 1527.0, "end": 1532.36, "text": " And with optimized and pre-compiled code in the packages, mojo packages become portable", "tokens": [51010, 400, 365, 26941, 293, 659, 12, 21541, 7292, 3089, 294, 264, 17401, 11, 705, 5134, 17401, 1813, 21800, 51278], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 454, "seek": 151408, "start": 1532.36, "end": 1533.8, "text": " build caches.", "tokens": [51278, 1322, 269, 13272, 13, 51350], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 455, "seek": 151408, "start": 1533.8, "end": 1538.28, "text": " So if you're on a common system like an M1 Mac and you pull a mojo package, it will probably", "tokens": [51350, 407, 498, 291, 434, 322, 257, 2689, 1185, 411, 364, 376, 16, 5707, 293, 291, 2235, 257, 705, 5134, 7372, 11, 309, 486, 1391, 51574], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 456, "seek": 151408, "start": 1538.28, "end": 1542.6, "text": " already have the pre-built code for you.", "tokens": [51574, 1217, 362, 264, 659, 12, 23018, 3089, 337, 291, 13, 51790], "temperature": 0.0, "avg_logprob": -0.1269242525100708, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.004609259311109781}, {"id": 457, "seek": 154260, "start": 1542.6, "end": 1544.84, "text": " So what does a compilation with a package look like?", "tokens": [50364, 407, 437, 775, 257, 40261, 365, 257, 7372, 574, 411, 30, 50476], "temperature": 0.0, "avg_logprob": -0.15443403889813762, "compression_ratio": 1.811808118081181, "no_speech_prob": 0.04670677334070206}, {"id": 458, "seek": 154260, "start": 1544.84, "end": 1549.1599999999999, "text": " Well, if you start by importing a function from a package, the parser goes and reads out", "tokens": [50476, 1042, 11, 498, 291, 722, 538, 43866, 257, 2445, 490, 257, 7372, 11, 264, 21156, 260, 1709, 293, 15700, 484, 50692], "temperature": 0.0, "avg_logprob": -0.15443403889813762, "compression_ratio": 1.811808118081181, "no_speech_prob": 0.04670677334070206}, {"id": 459, "seek": 154260, "start": 1549.1599999999999, "end": 1554.52, "text": " the declarations from the package, it will then lower into the full pre-elaboration IR,", "tokens": [50692, 264, 16694, 763, 490, 264, 7372, 11, 309, 486, 550, 3126, 666, 264, 1577, 659, 12, 338, 3816, 399, 16486, 11, 50960], "temperature": 0.0, "avg_logprob": -0.15443403889813762, "compression_ratio": 1.811808118081181, "no_speech_prob": 0.04670677334070206}, {"id": 460, "seek": 154260, "start": 1554.52, "end": 1558.32, "text": " and the reason why you need the full parametric IR so that you can instantiate the function", "tokens": [50960, 293, 264, 1778, 983, 291, 643, 264, 1577, 6220, 17475, 16486, 370, 300, 291, 393, 9836, 13024, 264, 2445, 51150], "temperature": 0.0, "avg_logprob": -0.15443403889813762, "compression_ratio": 1.811808118081181, "no_speech_prob": 0.04670677334070206}, {"id": 461, "seek": 154260, "start": 1558.32, "end": 1564.08, "text": " again, and so that the elaborate can call the interpreter on pre-compiled code.", "tokens": [51150, 797, 11, 293, 370, 300, 264, 20945, 393, 818, 264, 34132, 322, 659, 12, 21541, 7292, 3089, 13, 51438], "temperature": 0.0, "avg_logprob": -0.15443403889813762, "compression_ratio": 1.811808118081181, "no_speech_prob": 0.04670677334070206}, {"id": 462, "seek": 154260, "start": 1564.08, "end": 1568.24, "text": " During elaboration, we don't re-optimize and re-stantiate all the functions, we just drop", "tokens": [51438, 6842, 16298, 399, 11, 321, 500, 380, 319, 12, 5747, 43890, 293, 319, 12, 372, 11520, 473, 439, 264, 6828, 11, 321, 445, 3270, 51646], "temperature": 0.0, "avg_logprob": -0.15443403889813762, "compression_ratio": 1.811808118081181, "no_speech_prob": 0.04670677334070206}, {"id": 463, "seek": 156824, "start": 1568.24, "end": 1573.44, "text": " them out with the post-elaboration IR into the MLIR module.", "tokens": [50364, 552, 484, 365, 264, 2183, 12, 338, 3816, 399, 16486, 666, 264, 21601, 7740, 10088, 13, 50624], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 464, "seek": 156824, "start": 1573.44, "end": 1578.2, "text": " So that gives us LTO and MLIR, but I mean MLIR is pretty far away from link time, but", "tokens": [50624, 407, 300, 2709, 505, 441, 15427, 293, 21601, 7740, 11, 457, 286, 914, 21601, 7740, 307, 1238, 1400, 1314, 490, 2113, 565, 11, 457, 50862], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 465, "seek": 156824, "start": 1578.2, "end": 1579.8, "text": " it's a similar idea.", "tokens": [50862, 309, 311, 257, 2531, 1558, 13, 50942], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 466, "seek": 156824, "start": 1579.8, "end": 1584.36, "text": " But we actually trash these pre-compiled functions out of the IR before we go to LLVM,", "tokens": [50942, 583, 321, 767, 11321, 613, 659, 12, 21541, 7292, 6828, 484, 295, 264, 16486, 949, 321, 352, 281, 441, 43, 53, 44, 11, 51170], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 467, "seek": 156824, "start": 1584.36, "end": 1586.1200000000001, "text": " and that has some interesting implications.", "tokens": [51170, 293, 300, 575, 512, 1880, 16602, 13, 51258], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 468, "seek": 156824, "start": 1586.1200000000001, "end": 1593.52, "text": " So mojo is a bit of an unusual, probably slightly controversial user of LLVM.", "tokens": [51258, 407, 705, 5134, 307, 257, 857, 295, 364, 10901, 11, 1391, 4748, 17323, 4195, 295, 441, 43, 53, 44, 13, 51628], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 469, "seek": 156824, "start": 1593.52, "end": 1595.08, "text": " So LLVM is fantastic.", "tokens": [51628, 407, 441, 43, 53, 44, 307, 5456, 13, 51706], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 470, "seek": 156824, "start": 1595.08, "end": 1597.36, "text": " We love LLVM, we love everyone here.", "tokens": [51706, 492, 959, 441, 43, 53, 44, 11, 321, 959, 1518, 510, 13, 51820], "temperature": 0.0, "avg_logprob": -0.11249917300779429, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03409283235669136}, {"id": 471, "seek": 159736, "start": 1597.36, "end": 1599.28, "text": " But it's got a couple of issues.", "tokens": [50364, 583, 309, 311, 658, 257, 1916, 295, 2663, 13, 50460], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 472, "seek": 159736, "start": 1599.28, "end": 1602.52, "text": " The most standout of these is that it's single-threaded.", "tokens": [50460, 440, 881, 1463, 346, 295, 613, 307, 300, 309, 311, 2167, 12, 392, 2538, 292, 13, 50622], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 473, "seek": 159736, "start": 1602.52, "end": 1607.4799999999998, "text": " And what that means is on a modern system like an AWS 192 core machine, you get arbitrary", "tokens": [50622, 400, 437, 300, 1355, 307, 322, 257, 4363, 1185, 411, 364, 17650, 1294, 17, 4965, 3479, 11, 291, 483, 23211, 50870], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 474, "seek": 159736, "start": 1607.4799999999998, "end": 1609.04, "text": " slowdown for compilation speeds.", "tokens": [50870, 2964, 5093, 337, 40261, 16411, 13, 50948], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 475, "seek": 159736, "start": 1609.04, "end": 1611.04, "text": " You only use one core.", "tokens": [50948, 509, 787, 764, 472, 4965, 13, 51048], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 476, "seek": 159736, "start": 1611.04, "end": 1614.52, "text": " The other problem with LLVM is it's got a couple of passes that don't tend to be strong", "tokens": [51048, 440, 661, 1154, 365, 441, 43, 53, 44, 307, 309, 311, 658, 257, 1916, 295, 11335, 300, 500, 380, 3928, 281, 312, 2068, 51222], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 477, "seek": 159736, "start": 1614.52, "end": 1618.32, "text": " enough for our use cases, and they're difficult to control and predict.", "tokens": [51222, 1547, 337, 527, 764, 3331, 11, 293, 436, 434, 2252, 281, 1969, 293, 6069, 13, 51412], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 478, "seek": 159736, "start": 1618.32, "end": 1621.9599999999998, "text": " A lot of the stuff in LLVM was built for something like Clang, but in mojo, we'd really love", "tokens": [51412, 316, 688, 295, 264, 1507, 294, 441, 43, 53, 44, 390, 3094, 337, 746, 411, 2033, 656, 11, 457, 294, 705, 5134, 11, 321, 1116, 534, 959, 51594], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 479, "seek": 159736, "start": 1621.9599999999998, "end": 1626.0, "text": " to be able to autotune and unroll factor.", "tokens": [51594, 281, 312, 1075, 281, 1476, 310, 2613, 293, 517, 3970, 5952, 13, 51796], "temperature": 0.0, "avg_logprob": -0.14106626634473923, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.010009752586483955}, {"id": 480, "seek": 162600, "start": 1626.0, "end": 1628.12, "text": " So the good news is that MLIR is a thing.", "tokens": [50364, 407, 264, 665, 2583, 307, 300, 21601, 7740, 307, 257, 551, 13, 50470], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 481, "seek": 162600, "start": 1628.12, "end": 1630.52, "text": " So let's focus on the excellent strengths of LLVM.", "tokens": [50470, 407, 718, 311, 1879, 322, 264, 7103, 16986, 295, 441, 43, 53, 44, 13, 50590], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 482, "seek": 162600, "start": 1630.52, "end": 1635.32, "text": " LLVM is great at stuff like scalar optimizations from instance to combine, and other function", "tokens": [50590, 441, 43, 53, 44, 307, 869, 412, 1507, 411, 39684, 5028, 14455, 490, 5197, 281, 10432, 11, 293, 661, 2445, 50830], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 483, "seek": 162600, "start": 1635.32, "end": 1638.44, "text": " level optimizations like loop strength reduction.", "tokens": [50830, 1496, 5028, 14455, 411, 6367, 3800, 11004, 13, 50986], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 484, "seek": 162600, "start": 1638.44, "end": 1643.56, "text": " We ended up disabling passes like the vectorizer, the loop unroller, and even the inliner, as", "tokens": [50986, 492, 4590, 493, 717, 20112, 11335, 411, 264, 8062, 6545, 11, 264, 6367, 517, 22922, 11, 293, 754, 264, 294, 36849, 11, 382, 51242], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 485, "seek": 162600, "start": 1643.56, "end": 1645.68, "text": " well as a couple of the other IPO passes.", "tokens": [51242, 731, 382, 257, 1916, 295, 264, 661, 50220, 11335, 13, 51348], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 486, "seek": 162600, "start": 1645.68, "end": 1650.2, "text": " And the solution is to replace them in MLIR where we get intrapass parallelism and push", "tokens": [51348, 400, 264, 3827, 307, 281, 7406, 552, 294, 21601, 7740, 689, 321, 483, 560, 4007, 640, 8952, 1434, 293, 2944, 51574], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 487, "seek": 162600, "start": 1650.2, "end": 1653.56, "text": " many of these optimizations out into the library, which is something that Abdul will", "tokens": [51574, 867, 295, 613, 5028, 14455, 484, 666, 264, 6405, 11, 597, 307, 746, 300, 42591, 486, 51742], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 488, "seek": 162600, "start": 1653.56, "end": 1655.96, "text": " talk about in a bit.", "tokens": [51742, 751, 466, 294, 257, 857, 13, 51862], "temperature": 0.0, "avg_logprob": -0.16805115002113702, "compression_ratio": 1.730886850152905, "no_speech_prob": 0.002182507421821356}, {"id": 489, "seek": 165596, "start": 1655.96, "end": 1660.4, "text": " So what happens when you get rid of all of the IPO passes while you get to use LLVM", "tokens": [50364, 407, 437, 2314, 562, 291, 483, 3973, 295, 439, 295, 264, 50220, 11335, 1339, 291, 483, 281, 764, 441, 43, 53, 44, 50586], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 490, "seek": 165596, "start": 1660.4, "end": 1665.0, "text": " as a perfunction code generator, this gives you full code gen parallelism at a function", "tokens": [50586, 382, 257, 13826, 32627, 3089, 19265, 11, 341, 2709, 291, 1577, 3089, 1049, 8952, 1434, 412, 257, 2445, 50816], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 491, "seek": 165596, "start": 1665.0, "end": 1667.52, "text": " level across the entire stack.", "tokens": [50816, 1496, 2108, 264, 2302, 8630, 13, 50942], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 492, "seek": 165596, "start": 1667.52, "end": 1671.3600000000001, "text": " And what that means is that pretty much the entire mojo compiler pipeline is fully paralyzed", "tokens": [50942, 400, 437, 300, 1355, 307, 300, 1238, 709, 264, 2302, 705, 5134, 31958, 15517, 307, 4498, 41919, 51134], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 493, "seek": 165596, "start": 1671.3600000000001, "end": 1673.64, "text": " except for the linker and the parser.", "tokens": [51134, 3993, 337, 264, 2113, 260, 293, 264, 21156, 260, 13, 51248], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 494, "seek": 165596, "start": 1673.64, "end": 1676.6000000000001, "text": " Parser could be paralyzed one day.", "tokens": [51248, 49691, 260, 727, 312, 41919, 472, 786, 13, 51396], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 495, "seek": 165596, "start": 1676.6000000000001, "end": 1680.6000000000001, "text": " And that's really just the tip of the iceberg and what we could fit into one presentation.", "tokens": [51396, 400, 300, 311, 534, 445, 264, 4125, 295, 264, 38880, 293, 437, 321, 727, 3318, 666, 472, 5860, 13, 51596], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 496, "seek": 165596, "start": 1680.6000000000001, "end": 1684.4, "text": " There's so much more to mojo, and there'll probably be more talks coming in the future,", "tokens": [51596, 821, 311, 370, 709, 544, 281, 705, 5134, 11, 293, 456, 603, 1391, 312, 544, 6686, 1348, 294, 264, 2027, 11, 51786], "temperature": 0.0, "avg_logprob": -0.16259777974739348, "compression_ratio": 1.7588424437299035, "no_speech_prob": 0.00015355469076894224}, {"id": 497, "seek": 168440, "start": 1684.44, "end": 1695.68, "text": " but for now I'll pass it over to Abdul to show you all how to write some fast code in mojo.", "tokens": [50366, 457, 337, 586, 286, 603, 1320, 309, 670, 281, 42591, 281, 855, 291, 439, 577, 281, 2464, 512, 2370, 3089, 294, 705, 5134, 13, 50928], "temperature": 0.0, "avg_logprob": -0.14143424663903578, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.008183109574019909}, {"id": 498, "seek": 168440, "start": 1695.68, "end": 1701.52, "text": " So going back to what Chris said at the very beginning, we had a hypothesis to begin with.", "tokens": [50928, 407, 516, 646, 281, 437, 6688, 848, 412, 264, 588, 2863, 11, 321, 632, 257, 17291, 281, 1841, 365, 13, 51220], "temperature": 0.0, "avg_logprob": -0.14143424663903578, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.008183109574019909}, {"id": 499, "seek": 168440, "start": 1701.52, "end": 1702.92, "text": " We want to write fast code.", "tokens": [51220, 492, 528, 281, 2464, 2370, 3089, 13, 51290], "temperature": 0.0, "avg_logprob": -0.14143424663903578, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.008183109574019909}, {"id": 500, "seek": 168440, "start": 1702.92, "end": 1706.1200000000001, "text": " That's why mojo was written to begin with.", "tokens": [51290, 663, 311, 983, 705, 5134, 390, 3720, 281, 1841, 365, 13, 51450], "temperature": 0.0, "avg_logprob": -0.14143424663903578, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.008183109574019909}, {"id": 501, "seek": 168440, "start": 1706.1200000000001, "end": 1710.44, "text": " We wrote things when MLIR, we've proven a lot of the tech.", "tokens": [51450, 492, 4114, 721, 562, 21601, 7740, 11, 321, 600, 12785, 257, 688, 295, 264, 7553, 13, 51666], "temperature": 0.0, "avg_logprob": -0.14143424663903578, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.008183109574019909}, {"id": 502, "seek": 168440, "start": 1710.44, "end": 1714.3600000000001, "text": " Let's write things in mojo and let's show the performance.", "tokens": [51666, 961, 311, 2464, 721, 294, 705, 5134, 293, 718, 311, 855, 264, 3389, 13, 51862], "temperature": 0.0, "avg_logprob": -0.14143424663903578, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.008183109574019909}, {"id": 503, "seek": 171436, "start": 1714.36, "end": 1715.6, "text": " So let's step back.", "tokens": [50364, 407, 718, 311, 1823, 646, 13, 50426], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 504, "seek": 171436, "start": 1715.6, "end": 1721.1999999999998, "text": " How does existing performance libraries, how are they built today?", "tokens": [50426, 1012, 775, 6741, 3389, 15148, 11, 577, 366, 436, 3094, 965, 30, 50706], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 505, "seek": 171436, "start": 1721.1999999999998, "end": 1725.6799999999998, "text": " Well, the short answer is whatever it takes to get performance.", "tokens": [50706, 1042, 11, 264, 2099, 1867, 307, 2035, 309, 2516, 281, 483, 3389, 13, 50930], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 506, "seek": 171436, "start": 1725.6799999999998, "end": 1733.36, "text": " There's no style guide or anything like that that's usually maintained.", "tokens": [50930, 821, 311, 572, 3758, 5934, 420, 1340, 411, 300, 300, 311, 2673, 17578, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 507, "seek": 171436, "start": 1733.36, "end": 1738.12, "text": " That also means there's a lot of suffering because there's lack of tooling, et cetera.", "tokens": [51314, 663, 611, 1355, 456, 311, 257, 688, 295, 7755, 570, 456, 311, 5011, 295, 46593, 11, 1030, 11458, 13, 51552], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 508, "seek": 171436, "start": 1738.12, "end": 1740.6799999999998, "text": " So what people do is they write things in assembly.", "tokens": [51552, 407, 437, 561, 360, 307, 436, 2464, 721, 294, 12103, 13, 51680], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 509, "seek": 171436, "start": 1740.6799999999998, "end": 1742.32, "text": " Oh, great.", "tokens": [51680, 876, 11, 869, 13, 51762], "temperature": 0.0, "avg_logprob": -0.22209970574629934, "compression_ratio": 1.55, "no_speech_prob": 0.00022677208471577615}, {"id": 510, "seek": 174232, "start": 1742.6399999999999, "end": 1743.96, "text": " Please don't.", "tokens": [50380, 2555, 500, 380, 13, 50446], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 511, "seek": 174232, "start": 1743.96, "end": 1747.96, "text": " It's not a super productive programming language.", "tokens": [50446, 467, 311, 406, 257, 1687, 13304, 9410, 2856, 13, 50646], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 512, "seek": 174232, "start": 1747.96, "end": 1751.76, "text": " Others build compilers as C++ templates.", "tokens": [50646, 20277, 1322, 715, 388, 433, 382, 383, 25472, 21165, 13, 50836], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 513, "seek": 174232, "start": 1751.76, "end": 1756.56, "text": " And God forbid, you mess like one of the sevens becomes a six,", "tokens": [50836, 400, 1265, 34117, 11, 291, 2082, 411, 472, 295, 264, 3407, 82, 3643, 257, 2309, 11, 51076], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 514, "seek": 174232, "start": 1756.56, "end": 1761.36, "text": " and you get some nasty error message.", "tokens": [51076, 293, 291, 483, 512, 17923, 6713, 3636, 13, 51316], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 515, "seek": 174232, "start": 1761.36, "end": 1766.6799999999998, "text": " Others build C++ DSLs that generate ASMs.", "tokens": [51316, 20277, 1322, 383, 25472, 15816, 43, 82, 300, 8460, 7469, 26386, 13, 51582], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 516, "seek": 174232, "start": 1766.6799999999998, "end": 1771.56, "text": " Others write Python programs that generate assembly.", "tokens": [51582, 20277, 2464, 15329, 4268, 300, 8460, 12103, 13, 51826], "temperature": 0.0, "avg_logprob": -0.15912360455616412, "compression_ratio": 1.5075376884422111, "no_speech_prob": 0.002282482571899891}, {"id": 517, "seek": 177156, "start": 1771.6, "end": 1777.08, "text": " Others write Python templates that generate C++ templates that you feed into client.", "tokens": [50366, 20277, 2464, 15329, 21165, 300, 8460, 383, 25472, 21165, 300, 291, 3154, 666, 6423, 13, 50640], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 518, "seek": 177156, "start": 1778.3999999999999, "end": 1781.2, "text": " And these are not research projects.", "tokens": [50706, 400, 613, 366, 406, 2132, 4455, 13, 50846], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 519, "seek": 177156, "start": 1781.2, "end": 1784.12, "text": " These are production libraries that are used today.", "tokens": [50846, 1981, 366, 4265, 15148, 300, 366, 1143, 965, 13, 50992], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 520, "seek": 177156, "start": 1784.12, "end": 1786.28, "text": " You probably used one already.", "tokens": [50992, 509, 1391, 1143, 472, 1217, 13, 51100], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 521, "seek": 177156, "start": 1786.28, "end": 1788.8, "text": " These are by the big companies.", "tokens": [51100, 1981, 366, 538, 264, 955, 3431, 13, 51226], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 522, "seek": 177156, "start": 1791.08, "end": 1793.8, "text": " And as a result, you're kind of losing a lot of things.", "tokens": [51340, 400, 382, 257, 1874, 11, 291, 434, 733, 295, 7027, 257, 688, 295, 721, 13, 51476], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 523, "seek": 177156, "start": 1793.8, "end": 1797.56, "text": " You lose on maintainability, debugging, tooling, and", "tokens": [51476, 509, 3624, 322, 6909, 2310, 11, 45592, 11, 46593, 11, 293, 51664], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 524, "seek": 177156, "start": 1797.56, "end": 1801.04, "text": " becomes hard to develop and iterates on these performance libraries.", "tokens": [51664, 3643, 1152, 281, 1499, 293, 17138, 1024, 322, 613, 3389, 15148, 13, 51838], "temperature": 0.0, "avg_logprob": -0.16988536834716797, "compression_ratio": 1.6693548387096775, "no_speech_prob": 8.090841583907604e-05}, {"id": 525, "seek": 180104, "start": 1801.04, "end": 1803.56, "text": " And that's why they call them performance ninjas, right?", "tokens": [50364, 400, 300, 311, 983, 436, 818, 552, 3389, 9616, 19221, 11, 558, 30, 50490], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 526, "seek": 180104, "start": 1803.56, "end": 1808.08, "text": " You lock them in a room, give them some coffee, and then they give you speed up.", "tokens": [50490, 509, 4017, 552, 294, 257, 1808, 11, 976, 552, 512, 4982, 11, 293, 550, 436, 976, 291, 3073, 493, 13, 50716], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 527, "seek": 180104, "start": 1809.28, "end": 1810.36, "text": " And we don't want to do that.", "tokens": [50776, 400, 321, 500, 380, 528, 281, 360, 300, 13, 50830], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 528, "seek": 180104, "start": 1810.36, "end": 1811.52, "text": " We want to reduce suffering.", "tokens": [50830, 492, 528, 281, 5407, 7755, 13, 50888], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 529, "seek": 180104, "start": 1812.8, "end": 1816.76, "text": " The other thing is what happens is these performance libraries are pre-built and", "tokens": [50952, 440, 661, 551, 307, 437, 2314, 307, 613, 3389, 15148, 366, 659, 12, 23018, 293, 51150], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 530, "seek": 180104, "start": 1816.76, "end": 1821.12, "text": " shipped as kind of black box binaries.", "tokens": [51150, 25312, 382, 733, 295, 2211, 2424, 5171, 4889, 13, 51368], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 531, "seek": 180104, "start": 1821.12, "end": 1825.3999999999999, "text": " And what that means is you've encoded, when you built ahead of time,", "tokens": [51368, 400, 437, 300, 1355, 307, 291, 600, 2058, 12340, 11, 562, 291, 3094, 2286, 295, 565, 11, 51582], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 532, "seek": 180104, "start": 1825.3999999999999, "end": 1830.08, "text": " you've encoded all the hardware semantics, tile factors, etc.", "tokens": [51582, 291, 600, 2058, 12340, 439, 264, 8837, 4361, 45298, 11, 20590, 6771, 11, 5183, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16681345955270235, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.00012927547504659742}, {"id": 533, "seek": 183008, "start": 1830.12, "end": 1833.4399999999998, "text": " In the library, you've made it into a black box, so", "tokens": [50366, 682, 264, 6405, 11, 291, 600, 1027, 309, 666, 257, 2211, 2424, 11, 370, 50532], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 534, "seek": 183008, "start": 1833.4399999999998, "end": 1837.8, "text": " other higher level things in the stack, like a graph compiler,", "tokens": [50532, 661, 2946, 1496, 721, 294, 264, 8630, 11, 411, 257, 4295, 31958, 11, 50750], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 535, "seek": 183008, "start": 1837.8, "end": 1841.1999999999998, "text": " cannot reason about what the library is doing.", "tokens": [50750, 2644, 1778, 466, 437, 264, 6405, 307, 884, 13, 50920], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 536, "seek": 183008, "start": 1842.1999999999998, "end": 1847.48, "text": " You've also encoded specialized patterns, popular things like a resonant block or", "tokens": [50970, 509, 600, 611, 2058, 12340, 19813, 8294, 11, 3743, 721, 411, 257, 12544, 394, 3461, 420, 51234], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 537, "seek": 183008, "start": 1847.48, "end": 1849.96, "text": " a transformer block into your library.", "tokens": [51234, 257, 31782, 3461, 666, 428, 6405, 13, 51358], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 538, "seek": 183008, "start": 1849.96, "end": 1856.0, "text": " And what happens if there's a transformer version two or a resonant 53?", "tokens": [51358, 400, 437, 2314, 498, 456, 311, 257, 31782, 3037, 732, 420, 257, 12544, 394, 21860, 30, 51660], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 539, "seek": 183008, "start": 1856.0, "end": 1857.76, "text": " You're kind of screwed in that domain.", "tokens": [51660, 509, 434, 733, 295, 20331, 294, 300, 9274, 13, 51748], "temperature": 0.0, "avg_logprob": -0.23789913177490235, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.00018519448349252343}, {"id": 540, "seek": 185776, "start": 1858.12, "end": 1861.44, "text": " There's other things, like there's no consistent API.", "tokens": [50382, 821, 311, 661, 721, 11, 411, 456, 311, 572, 8398, 9362, 13, 50548], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 541, "seek": 185776, "start": 1861.44, "end": 1866.44, "text": " There's BLOSS, there's BLIS, there's 1DNN, etc.", "tokens": [50548, 821, 311, 15132, 35683, 11, 456, 311, 15132, 2343, 11, 456, 311, 502, 35, 45, 45, 11, 5183, 13, 50798], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 542, "seek": 185776, "start": 1866.44, "end": 1868.68, "text": " And the distribution store is even worse.", "tokens": [50798, 400, 264, 7316, 3531, 307, 754, 5324, 13, 50910], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 543, "seek": 185776, "start": 1868.68, "end": 1871.12, "text": " There's a 1DNN and there's a ZNDNN.", "tokens": [50910, 821, 311, 257, 502, 35, 45, 45, 293, 456, 311, 257, 1176, 45, 35, 45, 45, 13, 51032], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 544, "seek": 185776, "start": 1871.12, "end": 1875.76, "text": " But then if you are on ARM, you have to use something else as well.", "tokens": [51032, 583, 550, 498, 291, 366, 322, 45209, 11, 291, 362, 281, 764, 746, 1646, 382, 731, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 545, "seek": 185776, "start": 1875.76, "end": 1877.96, "text": " So we want to solve all of these things.", "tokens": [51264, 407, 321, 528, 281, 5039, 439, 295, 613, 721, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 546, "seek": 185776, "start": 1877.96, "end": 1880.2, "text": " And that's the reason why we built Mojo.", "tokens": [51374, 400, 300, 311, 264, 1778, 983, 321, 3094, 3335, 5134, 13, 51486], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 547, "seek": 185776, "start": 1880.2, "end": 1884.24, "text": " We built it to solve our problem of writing high performance libraries.", "tokens": [51486, 492, 3094, 309, 281, 5039, 527, 1154, 295, 3579, 1090, 3389, 15148, 13, 51688], "temperature": 0.0, "avg_logprob": -0.2046042938232422, "compression_ratio": 1.6104417670682731, "no_speech_prob": 6.707897409796715e-05}, {"id": 548, "seek": 188424, "start": 1884.8, "end": 1890.0, "text": " And the first thing we want to make sure is the developer is happy.", "tokens": [50392, 400, 264, 700, 551, 321, 528, 281, 652, 988, 307, 264, 10754, 307, 2055, 13, 50652], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 549, "seek": 188424, "start": 1891.44, "end": 1894.96, "text": " And they have all the tools that they need to be productive.", "tokens": [50724, 400, 436, 362, 439, 264, 3873, 300, 436, 643, 281, 312, 13304, 13, 50900], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 550, "seek": 188424, "start": 1894.96, "end": 1898.1200000000001, "text": " So rather than, as kind of Chris mentioned,", "tokens": [50900, 407, 2831, 813, 11, 382, 733, 295, 6688, 2835, 11, 51058], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 551, "seek": 188424, "start": 1898.1200000000001, "end": 1901.08, "text": " a lot of developers are not compiler engineers.", "tokens": [51058, 257, 688, 295, 8849, 366, 406, 31958, 11955, 13, 51206], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 552, "seek": 188424, "start": 1901.08, "end": 1907.24, "text": " They can write libraries, they probably cannot go and write a pass and so on.", "tokens": [51206, 814, 393, 2464, 15148, 11, 436, 1391, 2644, 352, 293, 2464, 257, 1320, 293, 370, 322, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 553, "seek": 188424, "start": 1907.24, "end": 1909.16, "text": " So let's put optimizations in the library and", "tokens": [51514, 407, 718, 311, 829, 5028, 14455, 294, 264, 6405, 293, 51610], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 554, "seek": 188424, "start": 1909.16, "end": 1911.44, "text": " I'll have some examples later on.", "tokens": [51610, 286, 603, 362, 512, 5110, 1780, 322, 13, 51724], "temperature": 0.0, "avg_logprob": -0.15835911887032644, "compression_ratio": 1.6085106382978724, "no_speech_prob": 5.475419675349258e-05}, {"id": 555, "seek": 191144, "start": 1911.44, "end": 1914.44, "text": " Let's also leverage what computers are good at.", "tokens": [50364, 961, 311, 611, 13982, 437, 10807, 366, 665, 412, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 556, "seek": 191144, "start": 1914.44, "end": 1920.16, "text": " So when I was in grad school, a lot of grad students were essentially", "tokens": [50514, 407, 562, 286, 390, 294, 2771, 1395, 11, 257, 688, 295, 2771, 1731, 645, 4476, 50800], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 557, "seek": 191144, "start": 1920.16, "end": 1921.6000000000001, "text": " grid searchers.", "tokens": [50800, 10748, 3164, 433, 13, 50872], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 558, "seek": 191144, "start": 1921.6000000000001, "end": 1924.64, "text": " They would just enumerate everything, try 50 things.", "tokens": [50872, 814, 576, 445, 465, 15583, 473, 1203, 11, 853, 2625, 721, 13, 51024], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 559, "seek": 191144, "start": 1924.64, "end": 1927.52, "text": " You lock them again in a room for a month and", "tokens": [51024, 509, 4017, 552, 797, 294, 257, 1808, 337, 257, 1618, 293, 51168], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 560, "seek": 191144, "start": 1927.52, "end": 1930.92, "text": " they say, oh, the best tile factor is six and four and so on.", "tokens": [51168, 436, 584, 11, 1954, 11, 264, 1151, 20590, 5952, 307, 2309, 293, 1451, 293, 370, 322, 13, 51338], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 561, "seek": 191144, "start": 1931.96, "end": 1933.76, "text": " Let's not do that, let's use computers.", "tokens": [51390, 961, 311, 406, 360, 300, 11, 718, 311, 764, 10807, 13, 51480], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 562, "seek": 191144, "start": 1933.76, "end": 1935.8, "text": " Computers are great at these sort of things.", "tokens": [51480, 37804, 433, 366, 869, 412, 613, 1333, 295, 721, 13, 51582], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 563, "seek": 191144, "start": 1935.8, "end": 1939.16, "text": " They can scan things, you can do smart searches and so on.", "tokens": [51582, 814, 393, 11049, 721, 11, 291, 393, 360, 4069, 26701, 293, 370, 322, 13, 51750], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 564, "seek": 191144, "start": 1939.16, "end": 1940.64, "text": " So let's use auto tuning.", "tokens": [51750, 407, 718, 311, 764, 8399, 15164, 13, 51824], "temperature": 0.0, "avg_logprob": -0.1449508810401859, "compression_ratio": 1.6934306569343065, "no_speech_prob": 0.00033527478808537126}, {"id": 565, "seek": 194064, "start": 1940.64, "end": 1943.88, "text": " Let's use algorithmic selection and let's build that in the language.", "tokens": [50364, 961, 311, 764, 9284, 299, 9450, 293, 718, 311, 1322, 300, 294, 264, 2856, 13, 50526], "temperature": 0.0, "avg_logprob": -0.1684090987495754, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.747205720283091e-05}, {"id": 566, "seek": 194064, "start": 1945.0, "end": 1949.8000000000002, "text": " And let's make sure that we have tooling to make these people productive.", "tokens": [50582, 400, 718, 311, 652, 988, 300, 321, 362, 46593, 281, 652, 613, 561, 13304, 13, 50822], "temperature": 0.0, "avg_logprob": -0.1684090987495754, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.747205720283091e-05}, {"id": 567, "seek": 194064, "start": 1949.8000000000002, "end": 1955.6000000000001, "text": " Debuggers, how do you debug the Python template that generates C++", "tokens": [50822, 27347, 3562, 433, 11, 577, 360, 291, 24083, 264, 15329, 12379, 300, 23815, 383, 25472, 51112], "temperature": 0.0, "avg_logprob": -0.1684090987495754, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.747205720283091e-05}, {"id": 568, "seek": 194064, "start": 1955.6000000000001, "end": 1958.5600000000002, "text": " template that does something else?", "tokens": [51112, 12379, 300, 775, 746, 1646, 30, 51260], "temperature": 0.0, "avg_logprob": -0.1684090987495754, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.747205720283091e-05}, {"id": 569, "seek": 194064, "start": 1958.5600000000002, "end": 1961.96, "text": " It's hard to begin with to debug C++ templates.", "tokens": [51260, 467, 311, 1152, 281, 1841, 365, 281, 24083, 383, 25472, 21165, 13, 51430], "temperature": 0.0, "avg_logprob": -0.1684090987495754, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.747205720283091e-05}, {"id": 570, "seek": 194064, "start": 1965.0, "end": 1969.76, "text": " Let's also build a language that's aware of the 21st century.", "tokens": [51582, 961, 311, 611, 1322, 257, 2856, 300, 311, 3650, 295, 264, 5080, 372, 4901, 13, 51820], "temperature": 0.0, "avg_logprob": -0.1684090987495754, "compression_ratio": 1.6210045662100456, "no_speech_prob": 8.747205720283091e-05}, {"id": 571, "seek": 196976, "start": 1969.76, "end": 1973.24, "text": " So SIMDs are a thing.", "tokens": [50364, 407, 24738, 35, 82, 366, 257, 551, 13, 50538], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 572, "seek": 196976, "start": 1973.24, "end": 1975.28, "text": " So let's be SIMD first.", "tokens": [50538, 407, 718, 311, 312, 24738, 35, 700, 13, 50640], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 573, "seek": 196976, "start": 1975.28, "end": 1980.32, "text": " Let's have scalars to be a degenerate form of SIMD, a SIMD of length one.", "tokens": [50640, 961, 311, 362, 15664, 685, 281, 312, 257, 40520, 473, 1254, 295, 24738, 35, 11, 257, 24738, 35, 295, 4641, 472, 13, 50892], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 574, "seek": 196976, "start": 1980.32, "end": 1981.76, "text": " And make the SIMD parametric.", "tokens": [50892, 400, 652, 264, 24738, 35, 6220, 17475, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 575, "seek": 196976, "start": 1981.76, "end": 1986.36, "text": " Let's also make the library, the one we ship, the standard library.", "tokens": [50964, 961, 311, 611, 652, 264, 6405, 11, 264, 472, 321, 5374, 11, 264, 3832, 6405, 13, 51194], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 576, "seek": 196976, "start": 1986.36, "end": 1989.52, "text": " Have first class support for SIMD types.", "tokens": [51194, 3560, 700, 1508, 1406, 337, 24738, 35, 3467, 13, 51352], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 577, "seek": 196976, "start": 1989.52, "end": 1991.68, "text": " Also multi-core is a thing.", "tokens": [51352, 2743, 4825, 12, 12352, 307, 257, 551, 13, 51460], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 578, "seek": 196976, "start": 1991.68, "end": 1993.44, "text": " So let's build parallelism and", "tokens": [51460, 407, 718, 311, 1322, 8952, 1434, 293, 51548], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 579, "seek": 196976, "start": 1993.44, "end": 1995.2, "text": " asynchronous into the language as well.", "tokens": [51548, 49174, 666, 264, 2856, 382, 731, 13, 51636], "temperature": 0.0, "avg_logprob": -0.22297492913440264, "compression_ratio": 1.6451612903225807, "no_speech_prob": 6.920243322383612e-05}, {"id": 580, "seek": 199520, "start": 1995.2, "end": 2001.28, "text": " And finally, we can have these nice things.", "tokens": [50364, 400, 2721, 11, 321, 393, 362, 613, 1481, 721, 13, 50668], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 581, "seek": 199520, "start": 2001.28, "end": 2005.88, "text": " But sometimes people are like, I want my assembly back.", "tokens": [50668, 583, 2171, 561, 366, 411, 11, 286, 528, 452, 12103, 646, 13, 50898], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 582, "seek": 199520, "start": 2005.88, "end": 2008.0, "text": " Or I want to use the LLVM intrinsic.", "tokens": [50898, 1610, 286, 528, 281, 764, 264, 441, 43, 53, 44, 35698, 13, 51004], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 583, "seek": 199520, "start": 2008.0, "end": 2011.8, "text": " Well, all of this is built on top of MLIR and LLVM.", "tokens": [51004, 1042, 11, 439, 295, 341, 307, 3094, 322, 1192, 295, 21601, 7740, 293, 441, 43, 53, 44, 13, 51194], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 584, "seek": 199520, "start": 2011.8, "end": 2015.8400000000001, "text": " So you can get any of the intrinsics that you want.", "tokens": [51194, 407, 291, 393, 483, 604, 295, 264, 28621, 1167, 300, 291, 528, 13, 51396], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 585, "seek": 199520, "start": 2015.8400000000001, "end": 2017.8, "text": " You can reach into them.", "tokens": [51396, 509, 393, 2524, 666, 552, 13, 51494], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 586, "seek": 199520, "start": 2017.8, "end": 2022.3600000000001, "text": " You can also write inline assembly, which is kind of interesting given that", "tokens": [51494, 509, 393, 611, 2464, 294, 1889, 12103, 11, 597, 307, 733, 295, 1880, 2212, 300, 51722], "temperature": 0.0, "avg_logprob": -0.1666567372340782, "compression_ratio": 1.5570776255707763, "no_speech_prob": 0.00019107607658952475}, {"id": 587, "seek": 202236, "start": 2022.36, "end": 2025.6399999999999, "text": " you're in a Python syntax language.", "tokens": [50364, 291, 434, 294, 257, 15329, 28431, 2856, 13, 50528], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 588, "seek": 202236, "start": 2027.24, "end": 2029.04, "text": " And you can target any LLVM back end.", "tokens": [50608, 400, 291, 393, 3779, 604, 441, 43, 53, 44, 646, 917, 13, 50698], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 589, "seek": 202236, "start": 2029.04, "end": 2032.0, "text": " So we're not like, we're standing on the shoulders of giants.", "tokens": [50698, 407, 321, 434, 406, 411, 11, 321, 434, 4877, 322, 264, 10245, 295, 31894, 13, 50846], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 590, "seek": 202236, "start": 2032.0, "end": 2037.28, "text": " So we're leveraging all LLVM and MLIR back end infra to do that.", "tokens": [50846, 407, 321, 434, 32666, 439, 441, 43, 53, 44, 293, 21601, 7740, 646, 917, 23654, 281, 360, 300, 13, 51110], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 591, "seek": 202236, "start": 2037.28, "end": 2038.7199999999998, "text": " Let's also not build a DSL.", "tokens": [51110, 961, 311, 611, 406, 1322, 257, 15816, 43, 13, 51182], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 592, "seek": 202236, "start": 2038.7199999999998, "end": 2042.32, "text": " So even though some of our use cases is AI,", "tokens": [51182, 407, 754, 1673, 512, 295, 527, 764, 3331, 307, 7318, 11, 51362], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 593, "seek": 202236, "start": 2042.32, "end": 2044.24, "text": " the programming language should be general.", "tokens": [51362, 264, 9410, 2856, 820, 312, 2674, 13, 51458], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 594, "seek": 202236, "start": 2044.24, "end": 2048.56, "text": " I should be able to do some operations in Mojo, but", "tokens": [51458, 286, 820, 312, 1075, 281, 360, 512, 7705, 294, 3335, 5134, 11, 457, 51674], "temperature": 0.0, "avg_logprob": -0.1640927450997489, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.00016862833581399173}, {"id": 595, "seek": 204856, "start": 2048.56, "end": 2053.36, "text": " then do the plotting through our Python integration.", "tokens": [50364, 550, 360, 264, 41178, 807, 527, 15329, 10980, 13, 50604], "temperature": 0.0, "avg_logprob": -0.2013401879204644, "compression_ratio": 1.5919282511210762, "no_speech_prob": 5.920061084907502e-05}, {"id": 596, "seek": 204856, "start": 2053.36, "end": 2055.64, "text": " And that requires a general purpose programming language.", "tokens": [50604, 400, 300, 7029, 257, 2674, 4334, 9410, 2856, 13, 50718], "temperature": 0.0, "avg_logprob": -0.2013401879204644, "compression_ratio": 1.5919282511210762, "no_speech_prob": 5.920061084907502e-05}, {"id": 597, "seek": 204856, "start": 2057.84, "end": 2062.04, "text": " So one of the things that we made a decision on is let's make the kind of", "tokens": [50828, 407, 472, 295, 264, 721, 300, 321, 1027, 257, 3537, 322, 307, 718, 311, 652, 264, 733, 295, 51038], "temperature": 0.0, "avg_logprob": -0.2013401879204644, "compression_ratio": 1.5919282511210762, "no_speech_prob": 5.920061084907502e-05}, {"id": 598, "seek": 204856, "start": 2062.04, "end": 2066.2799999999997, "text": " compiler lean and let's move a lot of the optimizations and", "tokens": [51038, 31958, 11659, 293, 718, 311, 1286, 257, 688, 295, 264, 5028, 14455, 293, 51250], "temperature": 0.0, "avg_logprob": -0.2013401879204644, "compression_ratio": 1.5919282511210762, "no_speech_prob": 5.920061084907502e-05}, {"id": 599, "seek": 204856, "start": 2066.2799999999997, "end": 2072.36, "text": " the infra to be kind of functions in the Mojo library.", "tokens": [51250, 264, 23654, 281, 312, 733, 295, 6828, 294, 264, 3335, 5134, 6405, 13, 51554], "temperature": 0.0, "avg_logprob": -0.2013401879204644, "compression_ratio": 1.5919282511210762, "no_speech_prob": 5.920061084907502e-05}, {"id": 600, "seek": 204856, "start": 2073.48, "end": 2077.2799999999997, "text": " So we use very limited number of dialects in MLIR core.", "tokens": [51610, 407, 321, 764, 588, 5567, 1230, 295, 24652, 82, 294, 21601, 7740, 4965, 13, 51800], "temperature": 0.0, "avg_logprob": -0.2013401879204644, "compression_ratio": 1.5919282511210762, "no_speech_prob": 5.920061084907502e-05}, {"id": 601, "seek": 207728, "start": 2077.28, "end": 2079.6400000000003, "text": " And I know this might be controversial.", "tokens": [50364, 400, 286, 458, 341, 1062, 312, 17323, 13, 50482], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 602, "seek": 207728, "start": 2079.6400000000003, "end": 2083.96, "text": " So we're not using vector, arith, lin-alg, or any of these dialects.", "tokens": [50482, 407, 321, 434, 406, 1228, 8062, 11, 594, 355, 11, 22896, 12, 20422, 11, 420, 604, 295, 613, 24652, 82, 13, 50698], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 603, "seek": 207728, "start": 2083.96, "end": 2086.2400000000002, "text": " MVVM, any of these dialects.", "tokens": [50698, 17663, 53, 44, 11, 604, 295, 613, 24652, 82, 13, 50812], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 604, "seek": 207728, "start": 2086.2400000000002, "end": 2088.36, "text": " We're only using the LLVM and index dialect.", "tokens": [50812, 492, 434, 787, 1228, 264, 441, 43, 53, 44, 293, 8186, 24652, 13, 50918], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 605, "seek": 207728, "start": 2089.6400000000003, "end": 2091.6000000000004, "text": " And there's a bunch of reasons for them.", "tokens": [50982, 400, 456, 311, 257, 3840, 295, 4112, 337, 552, 13, 51080], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 606, "seek": 207728, "start": 2091.6000000000004, "end": 2093.6800000000003, "text": " Sometimes they're not general enough.", "tokens": [51080, 4803, 436, 434, 406, 2674, 1547, 13, 51184], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 607, "seek": 207728, "start": 2093.6800000000003, "end": 2096.4, "text": " Sometimes they don't fit in our use case.", "tokens": [51184, 4803, 436, 500, 380, 3318, 294, 527, 764, 1389, 13, 51320], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 608, "seek": 207728, "start": 2096.4, "end": 2098.5600000000004, "text": " They bring in a lot of code that we don't care about.", "tokens": [51320, 814, 1565, 294, 257, 688, 295, 3089, 300, 321, 500, 380, 1127, 466, 13, 51428], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 609, "seek": 207728, "start": 2098.5600000000004, "end": 2102.7200000000003, "text": " And there's like, for the lack of better terms, sometimes like cyclic", "tokens": [51428, 400, 456, 311, 411, 11, 337, 264, 5011, 295, 1101, 2115, 11, 2171, 411, 38154, 1050, 51636], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 610, "seek": 207728, "start": 2102.7200000000003, "end": 2103.6800000000003, "text": " dependencies and so on.", "tokens": [51636, 36606, 293, 370, 322, 13, 51684], "temperature": 0.0, "avg_logprob": -0.2045900821685791, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.00015841030108276755}, {"id": 611, "seek": 210368, "start": 2104.64, "end": 2108.96, "text": " And we, having a lot of the functionality in Mojo code means you", "tokens": [50412, 400, 321, 11, 1419, 257, 688, 295, 264, 14980, 294, 3335, 5134, 3089, 1355, 291, 50628], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 612, "seek": 210368, "start": 2108.96, "end": 2110.3999999999996, "text": " could iterate a lot more quickly.", "tokens": [50628, 727, 44497, 257, 688, 544, 2661, 13, 50700], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 613, "seek": 210368, "start": 2111.44, "end": 2116.7599999999998, "text": " So let's implement something like a vector dialect type of thing in Mojo.", "tokens": [50752, 407, 718, 311, 4445, 746, 411, 257, 8062, 24652, 2010, 295, 551, 294, 3335, 5134, 13, 51018], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 614, "seek": 210368, "start": 2116.7599999999998, "end": 2121.44, "text": " So we have the simd type and we have a function called reduce max.", "tokens": [51018, 407, 321, 362, 264, 1034, 67, 2010, 293, 321, 362, 257, 2445, 1219, 5407, 11469, 13, 51252], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 615, "seek": 210368, "start": 2121.44, "end": 2125.12, "text": " And if the size of the width of the simd vector is one,", "tokens": [51252, 400, 498, 264, 2744, 295, 264, 11402, 295, 264, 1034, 67, 8062, 307, 472, 11, 51436], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 616, "seek": 210368, "start": 2125.12, "end": 2126.64, "text": " we're just gonna return the scalar directly.", "tokens": [51436, 321, 434, 445, 799, 2736, 264, 39684, 3838, 13, 51512], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 617, "seek": 210368, "start": 2127.7599999999998, "end": 2132.2799999999997, "text": " If we're on x86, it ends up like there's a LVM has an instruction for", "tokens": [51568, 759, 321, 434, 322, 2031, 22193, 11, 309, 5314, 493, 411, 456, 311, 257, 441, 53, 44, 575, 364, 10951, 337, 51794], "temperature": 0.0, "avg_logprob": -0.2509930983833645, "compression_ratio": 1.6465863453815262, "no_speech_prob": 5.143879752722569e-05}, {"id": 618, "seek": 213228, "start": 2132.28, "end": 2135.2400000000002, "text": " horizontal addition or horizontal max.", "tokens": [50364, 12750, 4500, 420, 12750, 11469, 13, 50512], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 619, "seek": 213228, "start": 2135.2400000000002, "end": 2137.96, "text": " That's not great for Intel.", "tokens": [50512, 663, 311, 406, 869, 337, 19762, 13, 50648], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 620, "seek": 213228, "start": 2137.96, "end": 2140.0400000000004, "text": " So we could do a kind of a tree reduction thing.", "tokens": [50648, 407, 321, 727, 360, 257, 733, 295, 257, 4230, 11004, 551, 13, 50752], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 621, "seek": 213228, "start": 2141.36, "end": 2144.32, "text": " But if it's floating points, we use a different algorithm and", "tokens": [50818, 583, 498, 309, 311, 12607, 2793, 11, 321, 764, 257, 819, 9284, 293, 50966], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 622, "seek": 213228, "start": 2144.32, "end": 2146.1200000000003, "text": " we call it directly to an LLVM intrinsic.", "tokens": [50966, 321, 818, 309, 3838, 281, 364, 441, 43, 53, 44, 35698, 13, 51056], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 623, "seek": 213228, "start": 2147.6400000000003, "end": 2151.52, "text": " This is compared to how the vector dialect lowers.", "tokens": [51132, 639, 307, 5347, 281, 577, 264, 8062, 24652, 44936, 13, 51326], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 624, "seek": 213228, "start": 2151.52, "end": 2155.2400000000002, "text": " You're writing essentially the same stuff minus the special case for", "tokens": [51326, 509, 434, 3579, 4476, 264, 912, 1507, 3175, 264, 2121, 1389, 337, 51512], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 625, "seek": 213228, "start": 2155.2400000000002, "end": 2158.5600000000004, "text": " x86 in essentially C++ code.", "tokens": [51512, 2031, 22193, 294, 4476, 383, 25472, 3089, 13, 51678], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 626, "seek": 213228, "start": 2158.5600000000004, "end": 2160.36, "text": " So we'll lower our directory to the LLVM dialect.", "tokens": [51678, 407, 321, 603, 3126, 527, 21120, 281, 264, 441, 43, 53, 44, 24652, 13, 51768], "temperature": 0.0, "avg_logprob": -0.23052336040296054, "compression_ratio": 1.5893536121673004, "no_speech_prob": 7.030396955087781e-05}, {"id": 627, "seek": 216036, "start": 2160.76, "end": 2165.56, "text": " We could also do similar things like transforms.", "tokens": [50384, 492, 727, 611, 360, 2531, 721, 411, 35592, 13, 50624], "temperature": 0.0, "avg_logprob": -0.22077529284418845, "compression_ratio": 1.6372093023255814, "no_speech_prob": 3.4805958421202376e-05}, {"id": 628, "seek": 216036, "start": 2165.56, "end": 2169.1600000000003, "text": " So as Jeff mentioned, we disabled the LLVM vectorizer.", "tokens": [50624, 407, 382, 7506, 2835, 11, 321, 15191, 264, 441, 43, 53, 44, 8062, 6545, 13, 50804], "temperature": 0.0, "avg_logprob": -0.22077529284418845, "compression_ratio": 1.6372093023255814, "no_speech_prob": 3.4805958421202376e-05}, {"id": 629, "seek": 216036, "start": 2169.1600000000003, "end": 2174.08, "text": " And instead, we have folks be kind of opt in to the vectorizer.", "tokens": [50804, 400, 2602, 11, 321, 362, 4024, 312, 733, 295, 2427, 294, 281, 264, 8062, 6545, 13, 51050], "temperature": 0.0, "avg_logprob": -0.22077529284418845, "compression_ratio": 1.6372093023255814, "no_speech_prob": 3.4805958421202376e-05}, {"id": 630, "seek": 216036, "start": 2174.08, "end": 2178.2400000000002, "text": " And we've implemented a vectorizer in these five lines of code.", "tokens": [51050, 400, 321, 600, 12270, 257, 8062, 6545, 294, 613, 1732, 3876, 295, 3089, 13, 51258], "temperature": 0.0, "avg_logprob": -0.22077529284418845, "compression_ratio": 1.6372093023255814, "no_speech_prob": 3.4805958421202376e-05}, {"id": 631, "seek": 216036, "start": 2179.2400000000002, "end": 2185.1200000000003, "text": " So in one case, we've parameterized the function on the simd width.", "tokens": [51308, 407, 294, 472, 1389, 11, 321, 600, 13075, 1602, 264, 2445, 322, 264, 1034, 67, 11402, 13, 51602], "temperature": 0.0, "avg_logprob": -0.22077529284418845, "compression_ratio": 1.6372093023255814, "no_speech_prob": 3.4805958421202376e-05}, {"id": 632, "seek": 216036, "start": 2185.1200000000003, "end": 2188.88, "text": " And we're gonna call it for the specific simd width.", "tokens": [51602, 400, 321, 434, 799, 818, 309, 337, 264, 2685, 1034, 67, 11402, 13, 51790], "temperature": 0.0, "avg_logprob": -0.22077529284418845, "compression_ratio": 1.6372093023255814, "no_speech_prob": 3.4805958421202376e-05}, {"id": 633, "seek": 218888, "start": 2188.88, "end": 2192.6800000000003, "text": " And in the leftovers, we're gonna call the function with a value of one.", "tokens": [50364, 400, 294, 264, 43011, 11, 321, 434, 799, 818, 264, 2445, 365, 257, 2158, 295, 472, 13, 50554], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 634, "seek": 218888, "start": 2195.96, "end": 2198.32, "text": " So what does this mean to the developers?", "tokens": [50718, 407, 437, 775, 341, 914, 281, 264, 8849, 30, 50836], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 635, "seek": 218888, "start": 2198.32, "end": 2201.0, "text": " It means that when you're trying to do an optimization,", "tokens": [50836, 467, 1355, 300, 562, 291, 434, 1382, 281, 360, 364, 19618, 11, 50970], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 636, "seek": 218888, "start": 2201.0, "end": 2204.44, "text": " when you're trying to add a new feature or target a new hardware,", "tokens": [50970, 562, 291, 434, 1382, 281, 909, 257, 777, 4111, 420, 3779, 257, 777, 8837, 11, 51142], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 637, "seek": 218888, "start": 2204.44, "end": 2207.28, "text": " the first thing is not, I'm gonna need to write a dialect or", "tokens": [51142, 264, 700, 551, 307, 406, 11, 286, 478, 799, 643, 281, 2464, 257, 24652, 420, 51284], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 638, "seek": 218888, "start": 2207.28, "end": 2208.96, "text": " I'm gonna reach into TableGen.", "tokens": [51284, 286, 478, 799, 2524, 666, 25535, 26647, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 639, "seek": 218888, "start": 2208.96, "end": 2211.4, "text": " The first thing is, I'm gonna reach into Mojo and", "tokens": [51368, 440, 700, 551, 307, 11, 286, 478, 799, 2524, 666, 3335, 5134, 293, 51490], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 640, "seek": 218888, "start": 2211.4, "end": 2213.36, "text": " I'm gonna do experiments and so on.", "tokens": [51490, 286, 478, 799, 360, 12050, 293, 370, 322, 13, 51588], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 641, "seek": 218888, "start": 2213.36, "end": 2217.2000000000003, "text": " You can invent new optimizations, weird ones, incorrect ones.", "tokens": [51588, 509, 393, 7962, 777, 5028, 14455, 11, 3657, 2306, 11, 18424, 2306, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1613455328322549, "compression_ratio": 1.803030303030303, "no_speech_prob": 7.601810648338869e-05}, {"id": 642, "seek": 221720, "start": 2217.2, "end": 2220.8799999999997, "text": " Or maybe even point to optimizations that only works in this function,", "tokens": [50364, 1610, 1310, 754, 935, 281, 5028, 14455, 300, 787, 1985, 294, 341, 2445, 11, 50548], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 643, "seek": 221720, "start": 2220.8799999999997, "end": 2222.3199999999997, "text": " in this domain, in this context.", "tokens": [50548, 294, 341, 9274, 11, 294, 341, 4319, 13, 50620], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 644, "seek": 221720, "start": 2224.6, "end": 2228.3199999999997, "text": " This is all fine, but I care about performance.", "tokens": [50734, 639, 307, 439, 2489, 11, 457, 286, 1127, 466, 3389, 13, 50920], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 645, "seek": 221720, "start": 2228.3199999999997, "end": 2231.7599999999998, "text": " I'm also a compiler engineer, but I ultimately care about performance.", "tokens": [50920, 286, 478, 611, 257, 31958, 11403, 11, 457, 286, 6284, 1127, 466, 3389, 13, 51092], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 646, "seek": 221720, "start": 2231.7599999999998, "end": 2233.3199999999997, "text": " So let's look at the performance of Mojo.", "tokens": [51092, 407, 718, 311, 574, 412, 264, 3389, 295, 3335, 5134, 13, 51170], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 647, "seek": 221720, "start": 2234.96, "end": 2238.16, "text": " So one thing that people anchor on is the Mandelbrot set.", "tokens": [51252, 407, 472, 551, 300, 561, 18487, 322, 307, 264, 15458, 338, 1443, 310, 992, 13, 51412], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 648, "seek": 221720, "start": 2238.16, "end": 2243.16, "text": " The Mandelbrot set, we have a blog post that was recently published.", "tokens": [51412, 440, 15458, 338, 1443, 310, 992, 11, 321, 362, 257, 6968, 2183, 300, 390, 3938, 6572, 13, 51662], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 649, "seek": 221720, "start": 2243.16, "end": 2245.24, "text": " But essentially, at the end of the blog post,", "tokens": [51662, 583, 4476, 11, 412, 264, 917, 295, 264, 6968, 2183, 11, 51766], "temperature": 0.0, "avg_logprob": -0.14450353734633503, "compression_ratio": 1.7272727272727273, "no_speech_prob": 7.141441165003926e-05}, {"id": 650, "seek": 224524, "start": 2245.24, "end": 2248.3199999999997, "text": " you end up with this 10 lines of code.", "tokens": [50364, 291, 917, 493, 365, 341, 1266, 3876, 295, 3089, 13, 50518], "temperature": 0.0, "avg_logprob": -0.1872895873419129, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000398134725401178}, {"id": 651, "seek": 224524, "start": 2248.3199999999997, "end": 2254.2, "text": " And if you run this 10 lines of code, you get 68,000 times faster than Python.", "tokens": [50518, 400, 498, 291, 1190, 341, 1266, 3876, 295, 3089, 11, 291, 483, 23317, 11, 1360, 1413, 4663, 813, 15329, 13, 50812], "temperature": 0.0, "avg_logprob": -0.1872895873419129, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000398134725401178}, {"id": 652, "seek": 224524, "start": 2256.12, "end": 2258.2, "text": " And you can kind of see the progression.", "tokens": [50908, 400, 291, 393, 733, 295, 536, 264, 18733, 13, 51012], "temperature": 0.0, "avg_logprob": -0.1872895873419129, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000398134725401178}, {"id": 653, "seek": 224524, "start": 2258.2, "end": 2262.8799999999997, "text": " You can look at the blog post after this presentation.", "tokens": [51012, 509, 393, 574, 412, 264, 6968, 2183, 934, 341, 5860, 13, 51246], "temperature": 0.0, "avg_logprob": -0.1872895873419129, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000398134725401178}, {"id": 654, "seek": 224524, "start": 2262.8799999999997, "end": 2270.72, "text": " There's a progression how to go to 90x faster all the way to 68,000 faster.", "tokens": [51246, 821, 311, 257, 18733, 577, 281, 352, 281, 4289, 87, 4663, 439, 264, 636, 281, 23317, 11, 1360, 4663, 13, 51638], "temperature": 0.0, "avg_logprob": -0.1872895873419129, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000398134725401178}, {"id": 655, "seek": 224524, "start": 2270.72, "end": 2273.6, "text": " But at the end of the day, this is the code that you're gonna see.", "tokens": [51638, 583, 412, 264, 917, 295, 264, 786, 11, 341, 307, 264, 3089, 300, 291, 434, 799, 536, 13, 51782], "temperature": 0.0, "avg_logprob": -0.1872895873419129, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000398134725401178}, {"id": 656, "seek": 227524, "start": 2275.3199999999997, "end": 2277.64, "text": " But nobody cares about Mandelbrot.", "tokens": [50368, 583, 5079, 12310, 466, 15458, 338, 1443, 310, 13, 50484], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 657, "seek": 227524, "start": 2277.64, "end": 2279.8799999999997, "text": " You can just waste a cheat in Mandelbrot.", "tokens": [50484, 509, 393, 445, 5964, 257, 17470, 294, 15458, 338, 1443, 310, 13, 50596], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 658, "seek": 227524, "start": 2279.8799999999997, "end": 2282.7599999999998, "text": " We're not cheating here, but nobody cares about Mandelbrot.", "tokens": [50596, 492, 434, 406, 18309, 510, 11, 457, 5079, 12310, 466, 15458, 338, 1443, 310, 13, 50740], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 659, "seek": 227524, "start": 2282.7599999999998, "end": 2284.4799999999996, "text": " So let's solve a hard problem.", "tokens": [50740, 407, 718, 311, 5039, 257, 1152, 1154, 13, 50826], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 660, "seek": 227524, "start": 2285.68, "end": 2287.8399999999997, "text": " So let's look at matrix multiplication.", "tokens": [50886, 407, 718, 311, 574, 412, 8141, 27290, 13, 50994], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 661, "seek": 227524, "start": 2287.8399999999997, "end": 2292.6, "text": " So matrix multiplication has been studied since a lot of us have been born.", "tokens": [50994, 407, 8141, 27290, 575, 668, 9454, 1670, 257, 688, 295, 505, 362, 668, 4232, 13, 51232], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 662, "seek": 227524, "start": 2292.6, "end": 2299.24, "text": " There's also a lot more papers that were published this year about matrix multiplication.", "tokens": [51232, 821, 311, 611, 257, 688, 544, 10577, 300, 645, 6572, 341, 1064, 466, 8141, 27290, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 663, "seek": 227524, "start": 2299.24, "end": 2300.3999999999996, "text": " It's also difficult.", "tokens": [51564, 467, 311, 611, 2252, 13, 51622], "temperature": 0.0, "avg_logprob": -0.16157771056553102, "compression_ratio": 1.8497652582159625, "no_speech_prob": 4.26439983129967e-05}, {"id": 664, "seek": 230040, "start": 2300.4, "end": 2305.7200000000003, "text": " The problem is dependent on the cache size and micro-architecture.", "tokens": [50364, 440, 1154, 307, 12334, 322, 264, 19459, 2744, 293, 4532, 12, 1178, 5739, 540, 13, 50630], "temperature": 0.0, "avg_logprob": -0.2032652679754763, "compression_ratio": 1.5514018691588785, "no_speech_prob": 0.0003513296542223543}, {"id": 665, "seek": 230040, "start": 2305.7200000000003, "end": 2310.52, "text": " It's also a core part of LA-PAC and the ML system,", "tokens": [50630, 467, 311, 611, 257, 4965, 644, 295, 9855, 12, 47, 4378, 293, 264, 21601, 1185, 11, 50870], "temperature": 0.0, "avg_logprob": -0.2032652679754763, "compression_ratio": 1.5514018691588785, "no_speech_prob": 0.0003513296542223543}, {"id": 666, "seek": 230040, "start": 2310.52, "end": 2314.6, "text": " which means hardware companies to go in the top 500 supercomputers,", "tokens": [50870, 597, 1355, 8837, 3431, 281, 352, 294, 264, 1192, 5923, 27839, 2582, 433, 11, 51074], "temperature": 0.0, "avg_logprob": -0.2032652679754763, "compression_ratio": 1.5514018691588785, "no_speech_prob": 0.0003513296542223543}, {"id": 667, "seek": 230040, "start": 2314.6, "end": 2316.32, "text": " they have to optimize MathMol.", "tokens": [51074, 436, 362, 281, 19719, 15776, 44, 401, 13, 51160], "temperature": 0.0, "avg_logprob": -0.2032652679754763, "compression_ratio": 1.5514018691588785, "no_speech_prob": 0.0003513296542223543}, {"id": 668, "seek": 230040, "start": 2316.32, "end": 2320.6, "text": " Or to be on the top of the ML perf, they need to optimize MathMol.", "tokens": [51160, 1610, 281, 312, 322, 264, 1192, 295, 264, 21601, 13826, 11, 436, 643, 281, 19719, 15776, 44, 401, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2032652679754763, "compression_ratio": 1.5514018691588785, "no_speech_prob": 0.0003513296542223543}, {"id": 669, "seek": 230040, "start": 2320.6, "end": 2325.6800000000003, "text": " So a lot of effort goes into optimizing MathMol.", "tokens": [51374, 407, 257, 688, 295, 4630, 1709, 666, 40425, 15776, 44, 401, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2032652679754763, "compression_ratio": 1.5514018691588785, "no_speech_prob": 0.0003513296542223543}, {"id": 670, "seek": 232568, "start": 2326.24, "end": 2332.52, "text": " And these libraries have been developed for decades before some of us were born as well.", "tokens": [50392, 400, 613, 15148, 362, 668, 4743, 337, 7878, 949, 512, 295, 505, 645, 4232, 382, 731, 13, 50706], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 671, "seek": 232568, "start": 2332.52, "end": 2339.96, "text": " But we also don't want to write the Python template that generates C++ template that", "tokens": [50706, 583, 321, 611, 500, 380, 528, 281, 2464, 264, 15329, 12379, 300, 23815, 383, 25472, 12379, 300, 51078], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 672, "seek": 232568, "start": 2339.96, "end": 2342.6, "text": " maybe goes to Python again and so on.", "tokens": [51078, 1310, 1709, 281, 15329, 797, 293, 370, 322, 13, 51210], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 673, "seek": 232568, "start": 2342.6, "end": 2345.12, "text": " Let's be principled.", "tokens": [51210, 961, 311, 312, 3681, 15551, 13, 51336], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 674, "seek": 232568, "start": 2345.12, "end": 2349.0, "text": " So let's have a few kind of core things that we want from our MathMol.", "tokens": [51336, 407, 718, 311, 362, 257, 1326, 733, 295, 4965, 721, 300, 321, 528, 490, 527, 15776, 44, 401, 13, 51530], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 675, "seek": 232568, "start": 2349.0, "end": 2351.04, "text": " We want a single source of truth.", "tokens": [51530, 492, 528, 257, 2167, 4009, 295, 3494, 13, 51632], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 676, "seek": 232568, "start": 2351.04, "end": 2354.24, "text": " We don't want to have multiple files.", "tokens": [51632, 492, 500, 380, 528, 281, 362, 3866, 7098, 13, 51792], "temperature": 0.0, "avg_logprob": -0.2231106710906076, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.0002959198609460145}, {"id": 677, "seek": 235424, "start": 2354.7999999999997, "end": 2358.04, "text": " We want to have one implementation.", "tokens": [50392, 492, 528, 281, 362, 472, 11420, 13, 50554], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 678, "seek": 235424, "start": 2358.04, "end": 2363.08, "text": " We want it to be as fast or compete with state of the art.", "tokens": [50554, 492, 528, 309, 281, 312, 382, 2370, 420, 11831, 365, 1785, 295, 264, 1523, 13, 50806], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 679, "seek": 235424, "start": 2363.08, "end": 2367.3199999999997, "text": " Even though we can read assembly and we can program C++, let's not do that.", "tokens": [50806, 2754, 1673, 321, 393, 1401, 12103, 293, 321, 393, 1461, 383, 25472, 11, 718, 311, 406, 360, 300, 13, 51018], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 680, "seek": 235424, "start": 2367.3199999999997, "end": 2369.3199999999997, "text": " Let's write everything in mojo.", "tokens": [51018, 961, 311, 2464, 1203, 294, 705, 5134, 13, 51118], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 681, "seek": 235424, "start": 2369.3199999999997, "end": 2374.4399999999996, "text": " Let's make it fusible and do fancy stuff, support dynamic shape,", "tokens": [51118, 961, 311, 652, 309, 34326, 964, 293, 360, 10247, 1507, 11, 1406, 8546, 3909, 11, 51374], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 682, "seek": 235424, "start": 2374.4399999999996, "end": 2376.72, "text": " and work on multiple architectures, et cetera.", "tokens": [51374, 293, 589, 322, 3866, 6331, 1303, 11, 1030, 11458, 13, 51488], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 683, "seek": 235424, "start": 2376.72, "end": 2380.16, "text": " Our core hypothesis from the very beginning.", "tokens": [51488, 2621, 4965, 17291, 490, 264, 588, 2863, 13, 51660], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 684, "seek": 235424, "start": 2380.16, "end": 2382.64, "text": " And here's what we ended up with.", "tokens": [51660, 400, 510, 311, 437, 321, 4590, 493, 365, 13, 51784], "temperature": 0.0, "avg_logprob": -0.1424846036718526, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.0004440633929334581}, {"id": 685, "seek": 238264, "start": 2382.64, "end": 2385.7999999999997, "text": " So this is, again, a blog post from a few months ago.", "tokens": [50364, 407, 341, 307, 11, 797, 11, 257, 6968, 2183, 490, 257, 1326, 2493, 2057, 13, 50522], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 686, "seek": 238264, "start": 2385.7999999999997, "end": 2387.3199999999997, "text": " We're actually faster than this now.", "tokens": [50522, 492, 434, 767, 4663, 813, 341, 586, 13, 50598], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 687, "seek": 238264, "start": 2387.3199999999997, "end": 2392.92, "text": " But we can compare against the best in class on their hardware.", "tokens": [50598, 583, 321, 393, 6794, 1970, 264, 1151, 294, 1508, 322, 641, 8837, 13, 50878], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 688, "seek": 238264, "start": 2392.92, "end": 2399.3199999999997, "text": " So we're 1.4x faster than Intel on Skylake systems.", "tokens": [50878, 407, 321, 434, 502, 13, 19, 87, 4663, 813, 19762, 322, 9879, 75, 619, 3652, 13, 51198], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 689, "seek": 238264, "start": 2399.3199999999997, "end": 2400.7999999999997, "text": " And this is fully dynamic.", "tokens": [51198, 400, 341, 307, 4498, 8546, 13, 51272], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 690, "seek": 238264, "start": 2400.7999999999997, "end": 2402.24, "text": " We're not specializing on shape.", "tokens": [51272, 492, 434, 406, 2121, 3319, 322, 3909, 13, 51344], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 691, "seek": 238264, "start": 2402.24, "end": 2404.56, "text": " We're not doing prepacking.", "tokens": [51344, 492, 434, 406, 884, 2666, 14134, 13, 51460], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 692, "seek": 238264, "start": 2404.56, "end": 2408.0, "text": " I wish we were doing tricks.", "tokens": [51460, 286, 3172, 321, 645, 884, 11733, 13, 51632], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 693, "seek": 238264, "start": 2408.0, "end": 2410.4, "text": " It's easy to get these results if we were doing tricks.", "tokens": [51632, 467, 311, 1858, 281, 483, 613, 3542, 498, 321, 645, 884, 11733, 13, 51752], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 694, "seek": 238264, "start": 2410.4, "end": 2412.08, "text": " But that's what we're doing.", "tokens": [51752, 583, 300, 311, 437, 321, 434, 884, 13, 51836], "temperature": 0.0, "avg_logprob": -0.1311091446295017, "compression_ratio": 1.6721311475409837, "no_speech_prob": 0.00011059935059165582}, {"id": 695, "seek": 241208, "start": 2412.08, "end": 2414.0, "text": " And we have no inline assembly.", "tokens": [50364, 400, 321, 362, 572, 294, 1889, 12103, 13, 50460], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 696, "seek": 241208, "start": 2414.0, "end": 2418.68, "text": " Unless we run the same code, but now on Intel, or sorry, on AMD,", "tokens": [50460, 16581, 321, 1190, 264, 912, 3089, 11, 457, 586, 322, 19762, 11, 420, 2597, 11, 322, 34808, 11, 50694], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 697, "seek": 241208, "start": 2418.68, "end": 2420.56, "text": " we're 1.6x faster.", "tokens": [50694, 321, 434, 502, 13, 21, 87, 4663, 13, 50788], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 698, "seek": 241208, "start": 2420.56, "end": 2426.2799999999997, "text": " Do the same thing, but on ARM, we're 1.2x faster.", "tokens": [50788, 1144, 264, 912, 551, 11, 457, 322, 45209, 11, 321, 434, 502, 13, 17, 87, 4663, 13, 51074], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 699, "seek": 241208, "start": 2426.2799999999997, "end": 2431.04, "text": " In fact, our implementation is about 2,000 lines of code.", "tokens": [51074, 682, 1186, 11, 527, 11420, 307, 466, 568, 11, 1360, 3876, 295, 3089, 13, 51312], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 700, "seek": 241208, "start": 2431.04, "end": 2434.7999999999997, "text": " This is a toy implementation, but this is putting everything together.", "tokens": [51312, 639, 307, 257, 12058, 11420, 11, 457, 341, 307, 3372, 1203, 1214, 13, 51500], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 701, "seek": 241208, "start": 2434.7999999999997, "end": 2437.3199999999997, "text": " The interesting thing about this toy implementation", "tokens": [51500, 440, 1880, 551, 466, 341, 12058, 11420, 51626], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 702, "seek": 241208, "start": 2437.3199999999997, "end": 2441.2799999999997, "text": " is this is what the llama.mojo, there's a public GitHub", "tokens": [51626, 307, 341, 307, 437, 264, 23272, 13, 3280, 5134, 11, 456, 311, 257, 1908, 23331, 51824], "temperature": 0.0, "avg_logprob": -0.19261689913474908, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00013133531319908798}, {"id": 703, "seek": 244128, "start": 2441.32, "end": 2443.84, "text": " repo that's using this.", "tokens": [50366, 49040, 300, 311, 1228, 341, 13, 50492], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 704, "seek": 244128, "start": 2443.84, "end": 2446.28, "text": " And this implementation, using this,", "tokens": [50492, 400, 341, 11420, 11, 1228, 341, 11, 50614], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 705, "seek": 244128, "start": 2446.28, "end": 2450.88, "text": " they are beating the llama.cpp implementation that's public.", "tokens": [50614, 436, 366, 13497, 264, 23272, 13, 66, 427, 11420, 300, 311, 1908, 13, 50844], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 706, "seek": 244128, "start": 2450.88, "end": 2455.0800000000004, "text": " So with that, we've validated our hypothesis.", "tokens": [50844, 407, 365, 300, 11, 321, 600, 40693, 527, 17291, 13, 51054], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 707, "seek": 244128, "start": 2455.0800000000004, "end": 2462.1600000000003, "text": " You can build portable performance libraries with less suffering.", "tokens": [51054, 509, 393, 1322, 21800, 3389, 15148, 365, 1570, 7755, 13, 51408], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 708, "seek": 244128, "start": 2462.1600000000003, "end": 2465.96, "text": " And with that, I'm going to hand it off to Chris.", "tokens": [51408, 400, 365, 300, 11, 286, 478, 516, 281, 1011, 309, 766, 281, 6688, 13, 51598], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 709, "seek": 244128, "start": 2465.96, "end": 2466.46, "text": " Right.", "tokens": [51598, 1779, 13, 51623], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 710, "seek": 244128, "start": 2466.46, "end": 2468.1600000000003, "text": " Give it to him.", "tokens": [51623, 5303, 309, 281, 796, 13, 51708], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 711, "seek": 244128, "start": 2468.1600000000003, "end": 2469.1600000000003, "text": " Awesome.", "tokens": [51708, 10391, 13, 51758], "temperature": 0.0, "avg_logprob": -0.19885583941856128, "compression_ratio": 1.5594059405940595, "no_speech_prob": 0.0005701171467080712}, {"id": 712, "seek": 246916, "start": 2469.16, "end": 2472.96, "text": " So to wrap things up, Mojo is still early in development,", "tokens": [50364, 407, 281, 7019, 721, 493, 11, 3335, 5134, 307, 920, 2440, 294, 3250, 11, 50554], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 713, "seek": 246916, "start": 2472.96, "end": 2473.7599999999998, "text": " as we talked about.", "tokens": [50554, 382, 321, 2825, 466, 13, 50594], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 714, "seek": 246916, "start": 2473.7599999999998, "end": 2476.2799999999997, "text": " There's still a lot more that is yet to be done.", "tokens": [50594, 821, 311, 920, 257, 688, 544, 300, 307, 1939, 281, 312, 1096, 13, 50720], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 715, "seek": 246916, "start": 2476.2799999999997, "end": 2478.48, "text": " One of the things we're doing that's, I think, pretty cool", "tokens": [50720, 1485, 295, 264, 721, 321, 434, 884, 300, 311, 11, 286, 519, 11, 1238, 1627, 50830], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 716, "seek": 246916, "start": 2478.48, "end": 2480.12, "text": " is we're developing this all in public.", "tokens": [50830, 307, 321, 434, 6416, 341, 439, 294, 1908, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 717, "seek": 246916, "start": 2480.12, "end": 2481.12, "text": " And so we have a roadmap.", "tokens": [50912, 400, 370, 321, 362, 257, 35738, 13, 50962], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 718, "seek": 246916, "start": 2481.12, "end": 2482.7999999999997, "text": " You can go see what we're doing.", "tokens": [50962, 509, 393, 352, 536, 437, 321, 434, 884, 13, 51046], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 719, "seek": 246916, "start": 2482.7999999999997, "end": 2485.2799999999997, "text": " We have new releases that come out very frequently.", "tokens": [51046, 492, 362, 777, 16952, 300, 808, 484, 588, 10374, 13, 51170], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 720, "seek": 246916, "start": 2485.2799999999997, "end": 2487.24, "text": " Now, one of the questions we get asked all the time", "tokens": [51170, 823, 11, 472, 295, 264, 1651, 321, 483, 2351, 439, 264, 565, 51268], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 721, "seek": 246916, "start": 2487.24, "end": 2490.7599999999998, "text": " is, does a modular open source anything, right?", "tokens": [51268, 307, 11, 775, 257, 31111, 1269, 4009, 1340, 11, 558, 30, 51444], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 722, "seek": 246916, "start": 2490.7599999999998, "end": 2492.96, "text": " And so the answer comes in twofold.", "tokens": [51444, 400, 370, 264, 1867, 1487, 294, 732, 18353, 13, 51554], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 723, "seek": 246916, "start": 2492.96, "end": 2494.04, "text": " One is yes.", "tokens": [51554, 1485, 307, 2086, 13, 51608], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 724, "seek": 246916, "start": 2494.04, "end": 2496.0, "text": " We have upstream stuff all of the time,", "tokens": [51608, 492, 362, 33915, 1507, 439, 295, 264, 565, 11, 51706], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 725, "seek": 246916, "start": 2496.0, "end": 2499.0, "text": " including tons of core improvements to MLR.", "tokens": [51706, 3009, 9131, 295, 4965, 13797, 281, 21601, 49, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1919102611311947, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.0008038132218644023}, {"id": 726, "seek": 249900, "start": 2499.0, "end": 2501.96, "text": " Apparently, the interpreter that Jeff was talking about on Tuesday", "tokens": [50364, 16755, 11, 264, 34132, 300, 7506, 390, 1417, 466, 322, 10017, 50512], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 727, "seek": 249900, "start": 2501.96, "end": 2504.2, "text": " is very popular, and so we can work on that.", "tokens": [50512, 307, 588, 3743, 11, 293, 370, 321, 393, 589, 322, 300, 13, 50624], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 728, "seek": 249900, "start": 2504.2, "end": 2509.36, "text": " And so we're very good open source systems from that respect.", "tokens": [50624, 400, 370, 321, 434, 588, 665, 1269, 4009, 3652, 490, 300, 3104, 13, 50882], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 729, "seek": 249900, "start": 2509.36, "end": 2512.4, "text": " Mojo itself, I think we'll take a little bit longer,", "tokens": [50882, 3335, 5134, 2564, 11, 286, 519, 321, 603, 747, 257, 707, 857, 2854, 11, 51034], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 730, "seek": 249900, "start": 2512.4, "end": 2515.12, "text": " but we want to start the open source process later this year.", "tokens": [51034, 457, 321, 528, 281, 722, 264, 1269, 4009, 1399, 1780, 341, 1064, 13, 51170], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 731, "seek": 249900, "start": 2515.12, "end": 2516.44, "text": " And so we'll start working on that.", "tokens": [51170, 400, 370, 321, 603, 722, 1364, 322, 300, 13, 51236], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 732, "seek": 249900, "start": 2516.44, "end": 2518.2, "text": " And I expect that to take some time,", "tokens": [51236, 400, 286, 2066, 300, 281, 747, 512, 565, 11, 51324], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 733, "seek": 249900, "start": 2518.2, "end": 2520.4, "text": " because we want to make sure that we get the core design really", "tokens": [51324, 570, 321, 528, 281, 652, 988, 300, 321, 483, 264, 4965, 1715, 534, 51434], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 734, "seek": 249900, "start": 2520.4, "end": 2520.76, "text": " right.", "tokens": [51434, 558, 13, 51452], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 735, "seek": 249900, "start": 2520.76, "end": 2523.56, "text": " And not everything is best done with design by committee,", "tokens": [51452, 400, 406, 1203, 307, 1151, 1096, 365, 1715, 538, 7482, 11, 51592], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 736, "seek": 249900, "start": 2523.56, "end": 2525.52, "text": " but we really want to see this thing scale and go", "tokens": [51592, 457, 321, 534, 528, 281, 536, 341, 551, 4373, 293, 352, 51690], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 737, "seek": 249900, "start": 2525.52, "end": 2528.36, "text": " and have a big impact for the world.", "tokens": [51690, 293, 362, 257, 955, 2712, 337, 264, 1002, 13, 51832], "temperature": 0.0, "avg_logprob": -0.20904450011409187, "compression_ratio": 1.7975077881619939, "no_speech_prob": 0.00024529878282919526}, {"id": 738, "seek": 252836, "start": 2528.4, "end": 2530.08, "text": " So coming back all the way to the beginning,", "tokens": [50366, 407, 1348, 646, 439, 264, 636, 281, 264, 2863, 11, 50450], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 739, "seek": 252836, "start": 2530.08, "end": 2532.92, "text": " we talked about AI and the AI engine and this kind of stuff.", "tokens": [50450, 321, 2825, 466, 7318, 293, 264, 7318, 2848, 293, 341, 733, 295, 1507, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 740, "seek": 252836, "start": 2532.92, "end": 2534.88, "text": " Now, we don't have time to talk about it today,", "tokens": [50592, 823, 11, 321, 500, 380, 362, 565, 281, 751, 466, 309, 965, 11, 50690], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 741, "seek": 252836, "start": 2534.88, "end": 2538.04, "text": " but the cool thing about what Mojo means for the AI engine", "tokens": [50690, 457, 264, 1627, 551, 466, 437, 3335, 5134, 1355, 337, 264, 7318, 2848, 50848], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 742, "seek": 252836, "start": 2538.04, "end": 2540.2400000000002, "text": " is that you can actually tackle these heterogeneous compute", "tokens": [50848, 307, 300, 291, 393, 767, 14896, 613, 20789, 31112, 14722, 50958], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 743, "seek": 252836, "start": 2540.2400000000002, "end": 2542.52, "text": " problems, because you can finally scale across lots", "tokens": [50958, 2740, 11, 570, 291, 393, 2721, 4373, 2108, 3195, 51072], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 744, "seek": 252836, "start": 2542.52, "end": 2544.08, "text": " of different hardware.", "tokens": [51072, 295, 819, 8837, 13, 51150], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 745, "seek": 252836, "start": 2544.08, "end": 2546.0, "text": " And this is really cool.", "tokens": [51150, 400, 341, 307, 534, 1627, 13, 51246], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 746, "seek": 252836, "start": 2546.0, "end": 2547.6400000000003, "text": " We don't have time to talk about it today.", "tokens": [51246, 492, 500, 380, 362, 565, 281, 751, 466, 309, 965, 13, 51328], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 747, "seek": 252836, "start": 2547.6400000000003, "end": 2550.32, "text": " If you're interested, we have a keynote at the NURPS conference", "tokens": [51328, 759, 291, 434, 3102, 11, 321, 362, 257, 33896, 412, 264, 426, 7932, 6273, 7586, 51462], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 748, "seek": 252836, "start": 2550.32, "end": 2554.04, "text": " later this year, where we'll talk about more about this in detail.", "tokens": [51462, 1780, 341, 1064, 11, 689, 321, 603, 751, 466, 544, 466, 341, 294, 2607, 13, 51648], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 749, "seek": 252836, "start": 2554.04, "end": 2555.76, "text": " So with that, I think that's the end of our talk,", "tokens": [51648, 407, 365, 300, 11, 286, 519, 300, 311, 264, 917, 295, 527, 751, 11, 51734], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 750, "seek": 252836, "start": 2555.76, "end": 2557.7200000000003, "text": " and we're very happy to take any questions.", "tokens": [51734, 293, 321, 434, 588, 2055, 281, 747, 604, 1651, 13, 51832], "temperature": 0.0, "avg_logprob": -0.1576869099639183, "compression_ratio": 1.8285714285714285, "no_speech_prob": 0.00014422590902540833}, {"id": 751, "seek": 255772, "start": 2557.72, "end": 2559.72, "text": " If you'd like to check out Mojo, you can go to the web page,", "tokens": [50364, 759, 291, 1116, 411, 281, 1520, 484, 3335, 5134, 11, 291, 393, 352, 281, 264, 3670, 3028, 11, 50464], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 752, "seek": 255772, "start": 2559.72, "end": 2562.16, "text": " read about it, download it, and use it today.", "tokens": [50464, 1401, 466, 309, 11, 5484, 309, 11, 293, 764, 309, 965, 13, 50586], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 753, "seek": 255772, "start": 2562.16, "end": 2562.66, "text": " Thank you.", "tokens": [50586, 1044, 291, 13, 50611], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 754, "seek": 255772, "start": 2562.66, "end": 2563.16, "text": " Thank you.", "tokens": [50611, 1044, 291, 13, 50636], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 755, "seek": 255772, "start": 2569.8799999999997, "end": 2572.2, "text": " Thank you, Chris, Abdul, and Jeff.", "tokens": [50972, 1044, 291, 11, 6688, 11, 42591, 11, 293, 7506, 13, 51088], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 756, "seek": 255772, "start": 2572.2, "end": 2573.2, "text": " Are there any questions?", "tokens": [51088, 2014, 456, 604, 1651, 30, 51138], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 757, "seek": 255772, "start": 2573.2, "end": 2575.72, "text": " Do you have mics in the alleys?", "tokens": [51138, 1144, 291, 362, 45481, 294, 264, 5430, 749, 30, 51264], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 758, "seek": 255772, "start": 2575.72, "end": 2576.72, "text": " Good timing.", "tokens": [51264, 2205, 10822, 13, 51314], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 759, "seek": 255772, "start": 2576.72, "end": 2579.2, "text": " Yeah, thanks.", "tokens": [51314, 865, 11, 3231, 13, 51438], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 760, "seek": 255772, "start": 2579.2, "end": 2584.48, "text": " Thanks for the great talk.", "tokens": [51438, 2561, 337, 264, 869, 751, 13, 51702], "temperature": 0.0, "avg_logprob": -0.32781327900133633, "compression_ratio": 1.481081081081081, "no_speech_prob": 0.0007765971822664142}, {"id": 761, "seek": 258448, "start": 2584.48, "end": 2587.16, "text": " My question is, I haven't seen anything", "tokens": [50364, 1222, 1168, 307, 11, 286, 2378, 380, 1612, 1340, 50498], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 762, "seek": 258448, "start": 2587.16, "end": 2589.88, "text": " about GPU offloading in your slide.", "tokens": [50498, 466, 18407, 766, 2907, 278, 294, 428, 4137, 13, 50634], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 763, "seek": 258448, "start": 2589.88, "end": 2595.48, "text": " Is that in plan, or what are you intent to do with it?", "tokens": [50634, 1119, 300, 294, 1393, 11, 420, 437, 366, 291, 8446, 281, 360, 365, 309, 30, 50914], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 764, "seek": 258448, "start": 2595.48, "end": 2597.6, "text": " So there is one bullet point, actually,", "tokens": [50914, 407, 456, 307, 472, 11632, 935, 11, 767, 11, 51020], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 765, "seek": 258448, "start": 2597.6, "end": 2599.32, "text": " on that there's so much more.", "tokens": [51020, 322, 300, 456, 311, 370, 709, 544, 13, 51106], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 766, "seek": 258448, "start": 2599.32, "end": 2603.16, "text": " And yeah, Mojo does actually support GPU offloading", "tokens": [51106, 400, 1338, 11, 3335, 5134, 775, 767, 1406, 18407, 766, 2907, 278, 51298], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 767, "seek": 258448, "start": 2603.16, "end": 2605.48, "text": " and split compilation like CUDA, but it's something", "tokens": [51298, 293, 7472, 40261, 411, 29777, 7509, 11, 457, 309, 311, 746, 51414], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 768, "seek": 258448, "start": 2605.48, "end": 2607.48, "text": " that we did not talk about in the presentation,", "tokens": [51414, 300, 321, 630, 406, 751, 466, 294, 264, 5860, 11, 51514], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 769, "seek": 258448, "start": 2607.48, "end": 2609.76, "text": " which we'd like to talk about in the future.", "tokens": [51514, 597, 321, 1116, 411, 281, 751, 466, 294, 264, 2027, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 770, "seek": 258448, "start": 2609.76, "end": 2610.26, "text": " Yeah.", "tokens": [51628, 865, 13, 51653], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 771, "seek": 258448, "start": 2610.26, "end": 2612.88, "text": " Thank you.", "tokens": [51653, 1044, 291, 13, 51784], "temperature": 0.0, "avg_logprob": -0.2371256758527058, "compression_ratio": 1.6108949416342413, "no_speech_prob": 0.01848294958472252}, {"id": 772, "seek": 261288, "start": 2612.92, "end": 2613.76, "text": " Hi.", "tokens": [50366, 2421, 13, 50408], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 773, "seek": 261288, "start": 2613.76, "end": 2616.36, "text": " You mentioned that you don't need to use Ccache,", "tokens": [50408, 509, 2835, 300, 291, 500, 380, 643, 281, 764, 383, 66, 6000, 11, 50538], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 774, "seek": 261288, "start": 2616.36, "end": 2618.88, "text": " because you kind of mentioned that.", "tokens": [50538, 570, 291, 733, 295, 2835, 300, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 775, "seek": 261288, "start": 2618.88, "end": 2620.44, "text": " Can you elaborate that a little bit?", "tokens": [50664, 1664, 291, 20945, 300, 257, 707, 857, 30, 50742], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 776, "seek": 261288, "start": 2620.44, "end": 2622.52, "text": " How are you guys dealing with caching?", "tokens": [50742, 1012, 366, 291, 1074, 6260, 365, 269, 2834, 30, 50846], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 777, "seek": 261288, "start": 2622.52, "end": 2625.56, "text": " So it turns out that MLIR has a nice serializable format", "tokens": [50846, 407, 309, 4523, 484, 300, 21601, 7740, 575, 257, 1481, 17436, 22395, 7877, 50998], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 778, "seek": 261288, "start": 2625.56, "end": 2627.56, "text": " called bytecode.", "tokens": [50998, 1219, 40846, 22332, 13, 51098], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 779, "seek": 261288, "start": 2627.56, "end": 2629.88, "text": " But bytecode provides a predictable hashing.", "tokens": [51098, 583, 40846, 22332, 6417, 257, 27737, 575, 571, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 780, "seek": 261288, "start": 2629.88, "end": 2632.0, "text": " And so we can use MLIR bytecode as the form", "tokens": [51214, 400, 370, 321, 393, 764, 21601, 7740, 40846, 22332, 382, 264, 1254, 51320], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 781, "seek": 261288, "start": 2632.0, "end": 2636.04, "text": " to hash and cache compiler transformations across the stack.", "tokens": [51320, 281, 22019, 293, 19459, 31958, 34852, 2108, 264, 8630, 13, 51522], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 782, "seek": 261288, "start": 2636.04, "end": 2636.54, "text": " OK.", "tokens": [51522, 2264, 13, 51547], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 783, "seek": 261288, "start": 2636.54, "end": 2637.04, "text": " Thank you.", "tokens": [51547, 1044, 291, 13, 51572], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 784, "seek": 261288, "start": 2637.04, "end": 2639.6, "text": " We also didn't have time to talk about this whole distributed", "tokens": [51572, 492, 611, 994, 380, 362, 565, 281, 751, 466, 341, 1379, 12631, 51700], "temperature": 0.0, "avg_logprob": -0.2454772140040542, "compression_ratio": 1.6202090592334495, "no_speech_prob": 0.0009393251384608448}, {"id": 785, "seek": 263960, "start": 2639.6, "end": 2641.52, "text": " cache backing this thing.", "tokens": [50364, 19459, 19373, 341, 551, 13, 50460], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 786, "seek": 263960, "start": 2641.52, "end": 2644.36, "text": " And there's a whole bunch of fancy stuff put into it.", "tokens": [50460, 400, 456, 311, 257, 1379, 3840, 295, 10247, 1507, 829, 666, 309, 13, 50602], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 787, "seek": 263960, "start": 2648.3199999999997, "end": 2650.48, "text": " How are you doing the autotuning?", "tokens": [50800, 1012, 366, 291, 884, 264, 1476, 310, 37726, 30, 50908], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 788, "seek": 263960, "start": 2650.48, "end": 2653.36, "text": " Is it offline, or is it dynamically online?", "tokens": [50908, 1119, 309, 21857, 11, 420, 307, 309, 43492, 2950, 30, 51052], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 789, "seek": 263960, "start": 2653.36, "end": 2658.16, "text": " And how do you define the objective function for the search?", "tokens": [51052, 400, 577, 360, 291, 6964, 264, 10024, 2445, 337, 264, 3164, 30, 51292], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 790, "seek": 263960, "start": 2658.16, "end": 2659.88, "text": " Yeah, so you have a choice.", "tokens": [51292, 865, 11, 370, 291, 362, 257, 3922, 13, 51378], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 791, "seek": 263960, "start": 2659.88, "end": 2661.64, "text": " You could do it offline or online.", "tokens": [51378, 509, 727, 360, 309, 21857, 420, 2950, 13, 51466], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 792, "seek": 263960, "start": 2661.64, "end": 2665.56, "text": " If you compile to that O file, you've done it offline.", "tokens": [51466, 759, 291, 31413, 281, 300, 422, 3991, 11, 291, 600, 1096, 309, 21857, 13, 51662], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 793, "seek": 263960, "start": 2665.56, "end": 2668.68, "text": " The objective function right now is something", "tokens": [51662, 440, 10024, 2445, 558, 586, 307, 746, 51818], "temperature": 0.0, "avg_logprob": -0.20961126291526938, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0003919911978300661}, {"id": 794, "seek": 266868, "start": 2668.72, "end": 2672.72, "text": " that the user provides, because it's data size,", "tokens": [50366, 300, 264, 4195, 6417, 11, 570, 309, 311, 1412, 2744, 11, 50566], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 795, "seek": 266868, "start": 2672.72, "end": 2676.08, "text": " dependent, hardware dependent, and so on.", "tokens": [50566, 12334, 11, 8837, 12334, 11, 293, 370, 322, 13, 50734], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 796, "seek": 266868, "start": 2676.08, "end": 2677.96, "text": " So it's up to you to define that.", "tokens": [50734, 407, 309, 311, 493, 281, 291, 281, 6964, 300, 13, 50828], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 797, "seek": 266868, "start": 2677.96, "end": 2681.24, "text": " We do provide a benchmark module so that it", "tokens": [50828, 492, 360, 2893, 257, 18927, 10088, 370, 300, 309, 50992], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 798, "seek": 266868, "start": 2681.24, "end": 2684.3599999999997, "text": " makes benchmarking a lot simpler.", "tokens": [50992, 1669, 18927, 278, 257, 688, 18587, 13, 51148], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 799, "seek": 266868, "start": 2684.3599999999997, "end": 2686.7999999999997, "text": " And that allows you to do that.", "tokens": [51148, 400, 300, 4045, 291, 281, 360, 300, 13, 51270], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 800, "seek": 266868, "start": 2686.7999999999997, "end": 2690.3599999999997, "text": " If you're doing it online, how do you control for variation", "tokens": [51270, 759, 291, 434, 884, 309, 2950, 11, 577, 360, 291, 1969, 337, 12990, 51448], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 801, "seek": 266868, "start": 2690.3599999999997, "end": 2691.7599999999998, "text": " in data, or do you rely on?", "tokens": [51448, 294, 1412, 11, 420, 360, 291, 10687, 322, 30, 51518], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 802, "seek": 266868, "start": 2691.7599999999998, "end": 2694.2, "text": " So the benchmark library that we provide", "tokens": [51518, 407, 264, 18927, 6405, 300, 321, 2893, 51640], "temperature": 0.0, "avg_logprob": -0.189218872959174, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.00018812053895089775}, {"id": 803, "seek": 269420, "start": 2694.2, "end": 2700.0, "text": " has a good number of iterations and so on", "tokens": [50364, 575, 257, 665, 1230, 295, 36540, 293, 370, 322, 50654], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 804, "seek": 269420, "start": 2700.0, "end": 2702.12, "text": " until you get stability and so on.", "tokens": [50654, 1826, 291, 483, 11826, 293, 370, 322, 13, 50760], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 805, "seek": 269420, "start": 2702.12, "end": 2703.72, "text": " So it handles that.", "tokens": [50760, 407, 309, 18722, 300, 13, 50840], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 806, "seek": 269420, "start": 2703.72, "end": 2707.3999999999996, "text": " Oh, so it's not actually in production autotuning?", "tokens": [50840, 876, 11, 370, 309, 311, 406, 767, 294, 4265, 1476, 310, 37726, 30, 51024], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 807, "seek": 269420, "start": 2707.3999999999996, "end": 2711.7999999999997, "text": " We use autotuning today, so I don't know what.", "tokens": [51024, 492, 764, 1476, 310, 37726, 965, 11, 370, 286, 500, 380, 458, 437, 13, 51244], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 808, "seek": 269420, "start": 2711.7999999999997, "end": 2714.8799999999997, "text": " So there's core capabilities, then there's future stuff also.", "tokens": [51244, 407, 456, 311, 4965, 10862, 11, 550, 456, 311, 2027, 1507, 611, 13, 51398], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 809, "seek": 269420, "start": 2714.8799999999997, "end": 2716.68, "text": " I mean, one of the things that it's designed for,", "tokens": [51398, 286, 914, 11, 472, 295, 264, 721, 300, 309, 311, 4761, 337, 11, 51488], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 810, "seek": 269420, "start": 2716.68, "end": 2720.2799999999997, "text": " but we haven't actually done, is send the IR to an FPGA", "tokens": [51488, 457, 321, 2378, 380, 767, 1096, 11, 307, 2845, 264, 16486, 281, 364, 36655, 12570, 51668], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 811, "seek": 269420, "start": 2720.2799999999997, "end": 2722.68, "text": " and do evaluation remotely, and then pull it back,", "tokens": [51668, 293, 360, 13344, 20824, 11, 293, 550, 2235, 309, 646, 11, 51788], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 812, "seek": 269420, "start": 2722.68, "end": 2723.56, "text": " and things like this.", "tokens": [51788, 293, 721, 411, 341, 13, 51832], "temperature": 0.0, "avg_logprob": -0.2213154286146164, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.0005192050011828542}, {"id": 813, "seek": 272356, "start": 2723.84, "end": 2725.52, "text": " Or a simulator.", "tokens": [50378, 1610, 257, 32974, 13, 50462], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 814, "seek": 272356, "start": 2725.52, "end": 2726.52, "text": " Exactly.", "tokens": [50462, 7587, 13, 50512], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 815, "seek": 272356, "start": 2730.52, "end": 2734.64, "text": " There was a point in the slide about optimization in the,", "tokens": [50712, 821, 390, 257, 935, 294, 264, 4137, 466, 19618, 294, 264, 11, 50918], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 816, "seek": 272356, "start": 2734.64, "end": 2736.6, "text": " providing optimization in the library,", "tokens": [50918, 6530, 19618, 294, 264, 6405, 11, 51016], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 817, "seek": 272356, "start": 2736.6, "end": 2738.48, "text": " as opposed to the compiler.", "tokens": [51016, 382, 8851, 281, 264, 31958, 13, 51110], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 818, "seek": 272356, "start": 2738.48, "end": 2743.0, "text": " Are there any, maybe I misunderstood this,", "tokens": [51110, 2014, 456, 604, 11, 1310, 286, 33870, 341, 11, 51336], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 819, "seek": 272356, "start": 2743.0, "end": 2746.56, "text": " but from my understanding, it's possible", "tokens": [51336, 457, 490, 452, 3701, 11, 309, 311, 1944, 51514], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 820, "seek": 272356, "start": 2746.56, "end": 2748.44, "text": " to come into performance pitfalls,", "tokens": [51514, 281, 808, 666, 3389, 10147, 18542, 11, 51608], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 821, "seek": 272356, "start": 2748.44, "end": 2752.2, "text": " because C++ has built in likely, built in unlikely,", "tokens": [51608, 570, 383, 25472, 575, 3094, 294, 3700, 11, 3094, 294, 17518, 11, 51796], "temperature": 0.0, "avg_logprob": -0.2886644851329715, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.0005960901617072523}, {"id": 822, "seek": 275220, "start": 2752.2, "end": 2755.7999999999997, "text": " and then you can, it's really easy to misuse those", "tokens": [50364, 293, 550, 291, 393, 11, 309, 311, 534, 1858, 281, 3346, 438, 729, 50544], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 823, "seek": 275220, "start": 2755.7999999999997, "end": 2758.24, "text": " and end up in a situation where your code is slower", "tokens": [50544, 293, 917, 493, 294, 257, 2590, 689, 428, 3089, 307, 14009, 50666], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 824, "seek": 275220, "start": 2758.24, "end": 2761.08, "text": " than without these kinds of annotations.", "tokens": [50666, 813, 1553, 613, 3685, 295, 25339, 763, 13, 50808], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 825, "seek": 275220, "start": 2761.08, "end": 2763.2, "text": " So my question would be, what happens", "tokens": [50808, 407, 452, 1168, 576, 312, 11, 437, 2314, 50914], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 826, "seek": 275220, "start": 2763.2, "end": 2766.3599999999997, "text": " if a user-provided annotation conflicts", "tokens": [50914, 498, 257, 4195, 12, 49911, 2112, 48654, 19807, 51072], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 827, "seek": 275220, "start": 2766.3599999999997, "end": 2767.8399999999997, "text": " with something that the compiler", "tokens": [51072, 365, 746, 300, 264, 31958, 51146], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 828, "seek": 275220, "start": 2767.8399999999997, "end": 2770.0, "text": " would also have done at the same time?", "tokens": [51146, 576, 611, 362, 1096, 412, 264, 912, 565, 30, 51254], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 829, "seek": 275220, "start": 2770.0, "end": 2772.3999999999996, "text": " Well, so from a compiler design perspective,", "tokens": [51254, 1042, 11, 370, 490, 257, 31958, 1715, 4585, 11, 51374], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 830, "seek": 275220, "start": 2772.3999999999996, "end": 2773.52, "text": " one of the things Jeff was talking about", "tokens": [51374, 472, 295, 264, 721, 7506, 390, 1417, 466, 51430], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 831, "seek": 275220, "start": 2773.52, "end": 2776.0, "text": " is we've removed, not all, but a lot", "tokens": [51430, 307, 321, 600, 7261, 11, 406, 439, 11, 457, 257, 688, 51554], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 832, "seek": 275220, "start": 2776.0, "end": 2779.7599999999998, "text": " of the super unpredictable things in the LVM optimizer.", "tokens": [51554, 295, 264, 1687, 31160, 721, 294, 264, 441, 53, 44, 5028, 6545, 13, 51742], "temperature": 0.0, "avg_logprob": -0.127586124450203, "compression_ratio": 1.6332179930795847, "no_speech_prob": 0.00036784104304388165}, {"id": 833, "seek": 277976, "start": 2779.8, "end": 2781.7200000000003, "text": " So our goal is to give full control", "tokens": [50366, 407, 527, 3387, 307, 281, 976, 1577, 1969, 50462], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 834, "seek": 277976, "start": 2781.7200000000003, "end": 2783.6000000000004, "text": " and predictability to the programmer,", "tokens": [50462, 293, 6069, 2310, 281, 264, 32116, 11, 50556], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 835, "seek": 277976, "start": 2783.6000000000004, "end": 2786.6000000000004, "text": " which is very different from the make-spec-go-fast", "tokens": [50556, 597, 307, 588, 819, 490, 264, 652, 12, 7053, 66, 12, 1571, 12, 7011, 50706], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 836, "seek": 277976, "start": 2786.6000000000004, "end": 2788.36, "text": " kind of approach to compiler design.", "tokens": [50706, 733, 295, 3109, 281, 31958, 1715, 13, 50794], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 837, "seek": 277976, "start": 2788.36, "end": 2790.0400000000004, "text": " And what that does is that gives you the ability", "tokens": [50794, 400, 437, 300, 775, 307, 300, 2709, 291, 264, 3485, 50878], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 838, "seek": 277976, "start": 2790.0400000000004, "end": 2791.96, "text": " to then go and design library features", "tokens": [50878, 281, 550, 352, 293, 1715, 6405, 4122, 50974], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 839, "seek": 277976, "start": 2791.96, "end": 2794.44, "text": " that do things like, you know, you can,", "tokens": [50974, 300, 360, 721, 411, 11, 291, 458, 11, 291, 393, 11, 51098], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 840, "seek": 277976, "start": 2794.44, "end": 2795.28, "text": " Julian, you can talk about", "tokens": [51098, 25151, 11, 291, 393, 751, 466, 51140], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 841, "seek": 277976, "start": 2795.28, "end": 2797.48, "text": " some of the crazy stuff you've done.", "tokens": [51140, 512, 295, 264, 3219, 1507, 291, 600, 1096, 13, 51250], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 842, "seek": 277976, "start": 2797.48, "end": 2801.36, "text": " What's also important is that we have these abilities", "tokens": [51250, 708, 311, 611, 1021, 307, 300, 321, 362, 613, 11582, 51444], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 843, "seek": 277976, "start": 2801.36, "end": 2802.6800000000003, "text": " to say, please vectorize this loop,", "tokens": [51444, 281, 584, 11, 1767, 8062, 1125, 341, 6367, 11, 51510], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 844, "seek": 277976, "start": 2802.6800000000003, "end": 2804.44, "text": " please unroll this loop, and so on.", "tokens": [51510, 1767, 517, 3970, 341, 6367, 11, 293, 370, 322, 13, 51598], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 845, "seek": 277976, "start": 2804.44, "end": 2806.92, "text": " But not everyone who's writing, say, application code", "tokens": [51598, 583, 406, 1518, 567, 311, 3579, 11, 584, 11, 3861, 3089, 51722], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 846, "seek": 277976, "start": 2806.92, "end": 2809.0400000000004, "text": " is going to think about vectorizing every single loop", "tokens": [51722, 307, 516, 281, 519, 466, 8062, 3319, 633, 2167, 6367, 51828], "temperature": 0.0, "avg_logprob": -0.17269224490759508, "compression_ratio": 1.7627627627627627, "no_speech_prob": 5.649029480991885e-05}, {"id": 847, "seek": 280904, "start": 2809.04, "end": 2810.52, "text": " and auto-tuning every other loop.", "tokens": [50364, 293, 8399, 12, 83, 37726, 633, 661, 6367, 13, 50438], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 848, "seek": 280904, "start": 2810.52, "end": 2812.64, "text": " So what's important is that we provide control", "tokens": [50438, 407, 437, 311, 1021, 307, 300, 321, 2893, 1969, 50544], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 849, "seek": 280904, "start": 2812.64, "end": 2815.04, "text": " to the users who care, but also provide", "tokens": [50544, 281, 264, 5022, 567, 1127, 11, 457, 611, 2893, 50664], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 850, "seek": 280904, "start": 2815.04, "end": 2818.84, "text": " a default experience that is good and optimal", "tokens": [50664, 257, 7576, 1752, 300, 307, 665, 293, 16252, 50854], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 851, "seek": 280904, "start": 2818.84, "end": 2820.36, "text": " and the compiler does its best.", "tokens": [50854, 293, 264, 31958, 775, 1080, 1151, 13, 50930], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 852, "seek": 280904, "start": 2820.36, "end": 2821.88, "text": " But the important thing is what the user says", "tokens": [50930, 583, 264, 1021, 551, 307, 437, 264, 4195, 1619, 51006], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 853, "seek": 280904, "start": 2821.88, "end": 2823.08, "text": " will always take precedent.", "tokens": [51006, 486, 1009, 747, 37388, 13, 51066], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 854, "seek": 280904, "start": 2823.08, "end": 2824.6, "text": " And that's how you get control.", "tokens": [51066, 400, 300, 311, 577, 291, 483, 1969, 13, 51142], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 855, "seek": 280904, "start": 2824.6, "end": 2826.24, "text": " Sometimes a compiler does things", "tokens": [51142, 4803, 257, 31958, 775, 721, 51224], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 856, "seek": 280904, "start": 2826.24, "end": 2828.92, "text": " and you end up with code that says, you know,", "tokens": [51224, 293, 291, 917, 493, 365, 3089, 300, 1619, 11, 291, 458, 11, 51358], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 857, "seek": 280904, "start": 2828.92, "end": 2832.6, "text": " optimize, compile the section of code with dash O zero", "tokens": [51358, 19719, 11, 31413, 264, 3541, 295, 3089, 365, 8240, 422, 4018, 51542], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 858, "seek": 280904, "start": 2832.6, "end": 2833.44, "text": " type of stuff.", "tokens": [51542, 2010, 295, 1507, 13, 51584], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 859, "seek": 280904, "start": 2833.44, "end": 2837.08, "text": " And you kind of want to opt out of compiler optimization", "tokens": [51584, 400, 291, 733, 295, 528, 281, 2427, 484, 295, 31958, 19618, 51766], "temperature": 0.0, "avg_logprob": -0.15350193447536892, "compression_ratio": 1.795774647887324, "no_speech_prob": 0.0002066052838927135}, {"id": 860, "seek": 283708, "start": 2837.08, "end": 2840.04, "text": " because it's interfering with how you laid out your code.", "tokens": [50364, 570, 309, 311, 48721, 365, 577, 291, 9897, 484, 428, 3089, 13, 50512], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 861, "seek": 283708, "start": 2842.52, "end": 2844.24, "text": " Are there any plans?", "tokens": [50636, 2014, 456, 604, 5482, 30, 50722], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 862, "seek": 283708, "start": 2844.24, "end": 2845.56, "text": " I have a follow-up question.", "tokens": [50722, 286, 362, 257, 1524, 12, 1010, 1168, 13, 50788], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 863, "seek": 283708, "start": 2845.56, "end": 2846.4, "text": " Sure.", "tokens": [50788, 4894, 13, 50830], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 864, "seek": 283708, "start": 2846.4, "end": 2847.6, "text": " Okay, come afterwards.", "tokens": [50830, 1033, 11, 808, 10543, 13, 50890], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 865, "seek": 283708, "start": 2847.6, "end": 2848.7999999999997, "text": " Last question, please.", "tokens": [50890, 5264, 1168, 11, 1767, 13, 50950], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 866, "seek": 283708, "start": 2848.7999999999997, "end": 2852.56, "text": " Hi, so you mentioned that you only use two dialects", "tokens": [50950, 2421, 11, 370, 291, 2835, 300, 291, 787, 764, 732, 24652, 82, 51138], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 867, "seek": 283708, "start": 2852.56, "end": 2855.96, "text": " in Mojo, LLVM and index dialect.", "tokens": [51138, 294, 3335, 5134, 11, 441, 43, 53, 44, 293, 8186, 24652, 13, 51308], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 868, "seek": 283708, "start": 2855.96, "end": 2857.68, "text": " Two upstream dialects.", "tokens": [51308, 4453, 33915, 24652, 82, 13, 51394], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 869, "seek": 283708, "start": 2857.68, "end": 2858.52, "text": " Two upstream.", "tokens": [51394, 4453, 33915, 13, 51436], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 870, "seek": 283708, "start": 2858.52, "end": 2860.2799999999997, "text": " Okay, so you don't use other things", "tokens": [51436, 1033, 11, 370, 291, 500, 380, 764, 661, 721, 51524], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 871, "seek": 283708, "start": 2860.2799999999997, "end": 2862.52, "text": " like affine and stuff, which means that", "tokens": [51524, 411, 2096, 533, 293, 1507, 11, 597, 1355, 300, 51636], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 872, "seek": 283708, "start": 2862.52, "end": 2866.52, "text": " if you want to use hardware specialized libraries,", "tokens": [51636, 498, 291, 528, 281, 764, 8837, 19813, 15148, 11, 51836], "temperature": 0.0, "avg_logprob": -0.25853233952676097, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.003466129070147872}, {"id": 873, "seek": 286652, "start": 2866.52, "end": 2868.88, "text": " then the programmer has to do different tiling", "tokens": [50364, 550, 264, 32116, 575, 281, 360, 819, 256, 4883, 50482], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 874, "seek": 286652, "start": 2868.88, "end": 2873.16, "text": " for ampere versus hopper versus Volta and so on.", "tokens": [50482, 337, 18648, 323, 5717, 3818, 610, 5717, 8911, 1328, 293, 370, 322, 13, 50696], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 875, "seek": 286652, "start": 2873.16, "end": 2875.08, "text": " So isn't that just pushing the burden out", "tokens": [50696, 407, 1943, 380, 300, 445, 7380, 264, 12578, 484, 50792], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 876, "seek": 286652, "start": 2875.08, "end": 2877.4, "text": " from the compiler and high level stuff", "tokens": [50792, 490, 264, 31958, 293, 1090, 1496, 1507, 50908], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 877, "seek": 286652, "start": 2877.4, "end": 2879.64, "text": " into the programmer?", "tokens": [50908, 666, 264, 32116, 30, 51020], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 878, "seek": 286652, "start": 2879.64, "end": 2883.48, "text": " Because you're going to now have very hardware specialized", "tokens": [51020, 1436, 291, 434, 516, 281, 586, 362, 588, 8837, 19813, 51212], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 879, "seek": 286652, "start": 2883.48, "end": 2886.64, "text": " performance libraries and then people who write this thing", "tokens": [51212, 3389, 15148, 293, 550, 561, 567, 2464, 341, 551, 51370], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 880, "seek": 286652, "start": 2886.64, "end": 2888.36, "text": " would have to understand the architecture really,", "tokens": [51370, 576, 362, 281, 1223, 264, 9482, 534, 11, 51456], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 881, "seek": 286652, "start": 2888.36, "end": 2889.88, "text": " really well.", "tokens": [51456, 534, 731, 13, 51532], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 882, "seek": 286652, "start": 2889.88, "end": 2893.12, "text": " I think the thing is that they're more likely", "tokens": [51532, 286, 519, 264, 551, 307, 300, 436, 434, 544, 3700, 51694], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 883, "seek": 286652, "start": 2893.12, "end": 2895.0, "text": " to understand the architecture really well", "tokens": [51694, 281, 1223, 264, 9482, 534, 731, 51788], "temperature": 0.0, "avg_logprob": -0.15636662074497767, "compression_ratio": 1.7360594795539033, "no_speech_prob": 0.001406002789735794}, {"id": 884, "seek": 289500, "start": 2895.0, "end": 2897.72, "text": " than the compiler engineer, right?", "tokens": [50364, 813, 264, 31958, 11403, 11, 558, 30, 50500], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 885, "seek": 289500, "start": 2897.72, "end": 2900.72, "text": " The compiler engineer has to have two things,", "tokens": [50500, 440, 31958, 11403, 575, 281, 362, 732, 721, 11, 50650], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 886, "seek": 289500, "start": 2900.72, "end": 2905.24, "text": " writing C++ on CPUs that target GPUs.", "tokens": [50650, 3579, 383, 25472, 322, 13199, 82, 300, 3779, 18407, 82, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 887, "seek": 289500, "start": 2905.24, "end": 2909.36, "text": " This is like, I'm a CUDA programmer, I'm laser focused,", "tokens": [50876, 639, 307, 411, 11, 286, 478, 257, 29777, 7509, 32116, 11, 286, 478, 12530, 5178, 11, 51082], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 888, "seek": 289500, "start": 2909.36, "end": 2910.68, "text": " let me target hopper.", "tokens": [51082, 718, 385, 3779, 3818, 610, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 889, "seek": 289500, "start": 2910.68, "end": 2912.88, "text": " So that means that the people writing high performance libraries", "tokens": [51148, 407, 300, 1355, 300, 264, 561, 3579, 1090, 3389, 15148, 51258], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 890, "seek": 289500, "start": 2912.88, "end": 2914.84, "text": " for very specialized accelerators,", "tokens": [51258, 337, 588, 19813, 10172, 3391, 11, 51356], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 891, "seek": 289500, "start": 2914.84, "end": 2917.68, "text": " they need to be experts at those accelerators, right?", "tokens": [51356, 436, 643, 281, 312, 8572, 412, 729, 10172, 3391, 11, 558, 30, 51498], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 892, "seek": 289500, "start": 2917.68, "end": 2919.88, "text": " Right, so they need to be expert in one area,", "tokens": [51498, 1779, 11, 370, 436, 643, 281, 312, 5844, 294, 472, 1859, 11, 51608], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 893, "seek": 289500, "start": 2919.88, "end": 2920.92, "text": " not two areas.", "tokens": [51608, 406, 732, 3179, 13, 51660], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 894, "seek": 289500, "start": 2920.92, "end": 2924.36, "text": " So the goal is give the current programmer superpowers.", "tokens": [51660, 407, 264, 3387, 307, 976, 264, 2190, 32116, 1687, 47953, 13, 51832], "temperature": 0.0, "avg_logprob": -0.2698458433151245, "compression_ratio": 1.7232472324723247, "no_speech_prob": 0.0036430524196475744}, {"id": 895, "seek": 292436, "start": 2924.92, "end": 2928.2000000000003, "text": " But that's our approach to it.", "tokens": [50392, 583, 300, 311, 527, 3109, 281, 309, 13, 50556], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 896, "seek": 292436, "start": 2928.2000000000003, "end": 2930.28, "text": " As Jeff talked about, Mojo can talk to any dialect", "tokens": [50556, 1018, 7506, 2825, 466, 11, 3335, 5134, 393, 751, 281, 604, 24652, 50660], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 897, "seek": 292436, "start": 2930.28, "end": 2931.2400000000002, "text": " if you want to.", "tokens": [50660, 498, 291, 528, 281, 13, 50708], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 898, "seek": 292436, "start": 2931.2400000000002, "end": 2933.36, "text": " You can use that find in Mojo.", "tokens": [50708, 509, 393, 764, 300, 915, 294, 3335, 5134, 13, 50814], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 899, "seek": 292436, "start": 2933.36, "end": 2935.6, "text": " We can plug and extend the system with dialects as well.", "tokens": [50814, 492, 393, 5452, 293, 10101, 264, 1185, 365, 24652, 82, 382, 731, 13, 50926], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 900, "seek": 292436, "start": 2935.6, "end": 2936.8, "text": " So that's always an option.", "tokens": [50926, 407, 300, 311, 1009, 364, 3614, 13, 50986], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 901, "seek": 292436, "start": 2936.8, "end": 2938.92, "text": " So that is a conscious decision.", "tokens": [50986, 407, 300, 307, 257, 6648, 3537, 13, 51092], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 902, "seek": 292436, "start": 2938.92, "end": 2940.96, "text": " That's really the conscious decision you're making", "tokens": [51092, 663, 311, 534, 264, 6648, 3537, 291, 434, 1455, 51194], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 903, "seek": 292436, "start": 2940.96, "end": 2944.04, "text": " is that you're going to get experts to do the performance", "tokens": [51194, 307, 300, 291, 434, 516, 281, 483, 8572, 281, 360, 264, 3389, 51348], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 904, "seek": 292436, "start": 2944.04, "end": 2947.44, "text": " library and they will just work.", "tokens": [51348, 6405, 293, 436, 486, 445, 589, 13, 51518], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 905, "seek": 292436, "start": 2947.44, "end": 2950.2000000000003, "text": " Well, so this is the thing.", "tokens": [51518, 1042, 11, 370, 341, 307, 264, 551, 13, 51656], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 906, "seek": 292436, "start": 2950.2000000000003, "end": 2952.8, "text": " Current libraries don't scale because of the magnitude", "tokens": [51656, 15629, 15148, 500, 380, 4373, 570, 295, 264, 15668, 51786], "temperature": 0.0, "avg_logprob": -0.27339660760128137, "compression_ratio": 1.6821428571428572, "no_speech_prob": 0.000996031449176371}, {"id": 907, "seek": 295280, "start": 2952.84, "end": 2955.1200000000003, "text": " of the problem and the cross product", "tokens": [50366, 295, 264, 1154, 293, 264, 3278, 1674, 50480], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 908, "seek": 295280, "start": 2955.1200000000003, "end": 2957.36, "text": " of all the different integrations and all of the stuff", "tokens": [50480, 295, 439, 264, 819, 3572, 763, 293, 439, 295, 264, 1507, 50592], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 909, "seek": 295280, "start": 2957.36, "end": 2959.32, "text": " that current libraries struggle with.", "tokens": [50592, 300, 2190, 15148, 7799, 365, 13, 50690], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 910, "seek": 295280, "start": 2959.32, "end": 2961.1600000000003, "text": " But there are more current programmers", "tokens": [50690, 583, 456, 366, 544, 2190, 41504, 50782], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 911, "seek": 295280, "start": 2961.1600000000003, "end": 2963.52, "text": " and performance engineers than there are compiler engineers", "tokens": [50782, 293, 3389, 11955, 813, 456, 366, 31958, 11955, 50900], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 912, "seek": 295280, "start": 2963.52, "end": 2964.96, "text": " by far, right?", "tokens": [50900, 538, 1400, 11, 558, 30, 50972], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 913, "seek": 295280, "start": 2964.96, "end": 2968.1200000000003, "text": " And so it's really about enabling the talent", "tokens": [50972, 400, 370, 309, 311, 534, 466, 23148, 264, 8301, 51130], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 914, "seek": 295280, "start": 2968.1200000000003, "end": 2969.6800000000003, "text": " that actually knows how to do all this kind of stuff", "tokens": [51130, 300, 767, 3255, 577, 281, 360, 439, 341, 733, 295, 1507, 51208], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 915, "seek": 295280, "start": 2969.6800000000003, "end": 2971.6400000000003, "text": " versus having a compiler engineer in the loop", "tokens": [51208, 5717, 1419, 257, 31958, 11403, 294, 264, 6367, 51306], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 916, "seek": 295280, "start": 2971.6400000000003, "end": 2973.04, "text": " that becomes a bottleneck.", "tokens": [51306, 300, 3643, 257, 44641, 547, 13, 51376], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 917, "seek": 295280, "start": 2973.04, "end": 2974.44, "text": " Thanks.", "tokens": [51376, 2561, 13, 51446], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 918, "seek": 295280, "start": 2974.44, "end": 2977.2400000000002, "text": " We'll be around as well throughout the conference,", "tokens": [51446, 492, 603, 312, 926, 382, 731, 3710, 264, 7586, 11, 51586], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 919, "seek": 295280, "start": 2977.2400000000002, "end": 2981.0, "text": " so feel free to yank any of us.", "tokens": [51586, 370, 841, 1737, 281, 288, 657, 604, 295, 505, 13, 51774], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 920, "seek": 295280, "start": 2981.0, "end": 2982.4, "text": " Thank you, Chris, Abul and Jeff.", "tokens": [51774, 1044, 291, 11, 6688, 11, 2847, 425, 293, 7506, 13, 51844], "temperature": 0.0, "avg_logprob": -0.16494491632036168, "compression_ratio": 1.7467532467532467, "no_speech_prob": 0.00167078769300133}, {"id": 921, "seek": 298240, "start": 2982.52, "end": 2983.92, "text": " So let's thank the speaker again.", "tokens": [50370, 407, 718, 311, 1309, 264, 8145, 797, 13, 50440], "temperature": 0.8, "avg_logprob": -0.8232332865397135, "compression_ratio": 0.8461538461538461, "no_speech_prob": 0.02436763048171997}, {"id": 922, "seek": 298392, "start": 2983.92, "end": 2984.92, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.5465291341145834, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.22023490071296692}, {"id": 923, "seek": 298392, "start": 2984.92, "end": 2985.92, "text": " Thank you.", "tokens": [50414, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.5465291341145834, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.22023490071296692}, {"id": 924, "seek": 298392, "start": 2985.92, "end": 2986.92, "text": " Thank you.", "tokens": [50464, 1044, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.5465291341145834, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.22023490071296692}, {"id": 925, "seek": 298392, "start": 2986.92, "end": 2987.42, "text": " Thank you.", "tokens": [50514, 1044, 291, 13, 50539], "temperature": 0.0, "avg_logprob": -0.5465291341145834, "compression_ratio": 1.9545454545454546, "no_speech_prob": 0.22023490071296692}], "language": "en"}