start	end	text
0	5680	The world of algorithms is vast, but we can often split them into two distinct classes.
5680	10080	The first class is those that are inherently useful. Think of your standard graph algorithms
10080	15280	like DFS or BFS. These algorithms show up all over the place, they are efficient,
15280	19360	and as a result we like to understand them. The second class of algorithms we study are
19360	24400	ones that are just purely beautiful. Think of the first time you saw the incredibly simple
24400	30080	recursive implementation of towers of annoy. If you have a soul, you feel a sense of wonder,
30080	35440	a sense of awe at the elegance of such an algorithm. It happens to not actually be that
35440	40400	useful or efficient as a matter of fact, but we still study it just as we like to read a work
40400	46720	of fiction. It inspires us and motivates out-of-the-box thinking. Today I want to talk about an algorithm
46720	52160	that rightfully belongs in both classes and my personal favorite algorithm, the fast Fourier
52160	59120	transform. The fast Fourier transform or FFT is without exaggeration one of the most important
59120	63840	algorithms created in the last century. So much of the modern technology that we have today such as
63840	69520	wireless communication, GPS, and in fact anything related to the vast field of signal processing
69520	76640	relies on the insights of the FFT. But it's also one of the most beautiful algorithms you ever see.
76640	81600	The depth and sheer number of brilliant ideas that went into it is just astounding.
82960	88160	It's easy to miss the beauty aspect of the FFT since it's often introduced in fairly complex
88160	92960	settings that require a lot of prerequisite knowledge such as the discrete Fourier transform,
92960	99040	time domain to frequency domain conversions, and much more. And to be fair, to get a full
99040	103520	appreciation of the applications of the FFT you can't really avoid any of these ideas.
104080	108880	But I want to do something a little different. We'll take a discovery-based approach to learning
108880	114480	about the FFT in a context that you are all familiar with, polynomial multiplication.
114480	119360	The way I see the structure of this video, it's all about starting with some common ground and
119360	125120	then slowly asking questions that will hopefully prompt you to discover the truly ingenious ideas
125200	128800	behind the FFT. Alright, let's get started.
138960	144400	The setup here is simple. We're given two polynomials and want to find the product.
144400	149120	Our task will be to design an efficient algorithm for this problem. Mathematically,
149120	154640	we know one algorithm to multiply polynomials by repeatedly applying the distributed property.
154640	158800	All of you have perhaps instinctively been applying this algorithm since any algebra class.
159600	164240	Before we try this idea though, the first question we have to address is representation
164240	170240	of polynomials in a computer. The most natural way to represent them is through coefficients,
170240	175840	where we map coefficients to lists. It helps to arrange our coefficients in the following order,
175840	181520	mainly because now the coefficient of the kth index is mapped to the coefficient of the kth
181520	187200	degree term. We will refer to this representation as the coefficient representation of polynomials.
191520	197120	In general, given 2d degree polynomials, the product will have a degree of 2 times d.
197120	201840	And the running time of this algorithm, if we actually went about implementing it with the most
201840	208320	natural distributed property approach, will be O of d squared, since each term in polynomial a will
208320	214480	have to be multiplied by all terms in polynomial b. The question now is, can we do better?
216080	221120	The first really clever idea comes from thinking about polynomials a little bit differently.
221760	226000	To see the key inside here, let's take a look at one of the simplest polynomials,
226000	231760	a degree 1 polynomial or a linear function. We can represent any line with exactly two
231760	237760	coefficients, one for the degree 0 term and one for the degree 1 term. The key part that makes
237760	244000	this representation valid is that every representation has a one to one mapping to a unique line.
244000	249120	What other representations of a line have this property? There are actually several
249120	254960	reasonable representations, but the one that we are going to use is the two point representation.
254960	259280	We know from geometry that any line can be represented by two distinct points.
259280	263920	And turns out that there is a neat extension of this for general polynomials, which I will state here.
264800	271600	Any polynomial of degree d can be uniquely represented by d plus one points. For example,
271600	277040	if I gave you three random points, this means that there is exactly one quadratic function
277040	282560	that goes through all three of these points. If I give you four points, there is exactly one
282560	287200	cubic function that goes through all these points. This statement is perhaps a little surprising,
287200	293280	so it deserves a proof. Suppose I give you d plus one unique points of a d degree polynomial p of x.
293280	297280	We want to show that for these set of points, there is only one set of coefficients.
297840	301760	So if we actually evaluate our polynomial at each of these points,
301760	306960	we get the following set of system of equations. Whenever you have a system of equations,
306960	311040	writing it as a matrix vector product is almost always helpful for analysis.
312240	316880	One nice property of this matrix is that if each of our original points is unique,
316880	320560	as it is in this case, the matrix will always be invertible.
320560	326160	The easiest way to show this is by calculating the determinant, which you will find is non-zero,
326160	331440	but I'll link a nice linear algebraic proof of this fact in the description as well for those
331440	337600	interested. Anyways, what this means is that for every set of points, there exists a unique set
337600	345200	of coefficients and consequently a unique polynomial. Taking a step back, what this means
345200	350240	is that there are actually two ways to represent polynomials of degree d, the first of which is
350240	356000	the coefficient representation and the second with just d plus one points, which we will call
356000	363040	the value representation. A nice property of using the value representation is multiplication
363040	369280	of polynomials is much easier. Let's say I ask you to multiply these two polynomials a of x
369280	376240	and b of x. We know the resulting polynomial c of x will be of degree four, so we'll need five
376240	382320	points to uniquely represent the product. What we can now do is take five points from each of the
382320	387600	two polynomials and then simply multiply the function values one by one to get the value
387600	394480	representation of the product of the two polynomials. Following our earlier rule,
394480	399520	there is only one degree four polynomial that passes through these points. That polynomial
399520	404160	happens to be the following in the coefficient representation and this is indeed the product
404160	410640	of our original a of x and b of x polynomials. With the multiplication operation being performed
410640	416160	using the value representation, we've now reduced the time for multiplication from our original
416160	424720	d squared operations to the order of only degree d operations. Okay, so let's propose a plan for
424720	429840	an improvement to polynomial multiplication. We are given two polynomials in the coefficient
429840	435920	representation of degree d each. We know multiplication is faster using the value representation,
435920	441680	so what we'll do is evaluate each of these polynomials at 2d plus one points, multiply each
441680	446480	of these points pairwise to get the value representation of the product polynomial,
446480	452720	and then finally somehow convert the value representation back to the final coefficient
452720	457920	representation. This is the grand plan, but there are several pieces of the puzzle we haven't figured
457920	463360	out. What we're missing is really some sort of magic box that could take polynomials in the
463360	469120	coefficient representation and convert them to the value representation and then vice versa.
469120	474800	That magic box my friends and trust me it is truly magical is the fast Fourier transform.
476240	481280	Let's first focus on taking polynomials from the coefficient representation to the value
481280	487680	representation, which we will call evaluation. We have a degree d polynomial and we want to
487680	493280	evaluate the polynomial at n points where n is some number greater than d plus one.
493280	498880	Let's think about the most straightforward way to do this. We can pick n random x coordinates
498880	505040	and simply calculate the respective y coordinate. This works, but when we deconstruct what's
505040	511760	actually going on here, we run into our old foe. Each evaluation will take o of d operations,
511760	517920	making this method run in o of n times d time, which ends up being o of d squared to evaluate
517920	523600	all n points. So we're back to where we started. Can we find a way to optimize this?
525040	530000	Let's try to simplify the problem. Let's say instead of considering a general polynomial,
530000	534720	we wanted to instead just evaluate a simple polynomial like p of x is equal to x squared
534720	540400	at eight points. The question now is, which points should we pick? Is there any set of
540400	544960	points when knowing the value of one point immediately implies the value of another?
546480	551600	In fact, there is. If we pick the point x equals one, we immediately know the value
551600	557360	of the point x equals negative one. Similarly, if we pick x equals two, we automatically know x
557360	562800	equals negative two will have the same value. Extending this idea, the key property we want
562800	568160	here is that our eight points should be positive negative pairs. The reason this works is due to
568160	573120	the property of even functions where a function evaluated at negative x is going to equal the
573120	579760	function evaluated at positive x. Okay, but then the next immediate question is, what about functions
579760	586240	like x cubed? Does the same trick work? It actually kind of does, but with one caveat.
586240	591680	Each positive x value will have the same value as the negative x value, but with the sign flipped.
592560	598080	So in these two cases of odd and even degree single term polynomials, instead of evaluating
598080	604400	eight individual points, we can actually get away with evaluating exactly four positive points,
604400	608480	from which we immediately know the value of the respective negative points.
610080	613680	Let's see if we can extend this idea to a more general polynomial,
614320	619360	taking inspiration from our early exploration, let's split our polynomial into even and odd
619360	625760	degree terms. If we factor an x from the odd degree terms, we end up having two new polynomials,
625760	630560	where these new polynomials have only even degree terms. Let's actually give these
630560	636000	polynomials formal names, the first representing the even terms and the second representing
636000	642480	odd terms after factoring out x. This fact allows us to recycle a lot of computation between positive
642480	647920	and negative pairs of points. A bonus fact is that since these even and odd polynomials are
647920	653280	functions of x squared, they are polynomials of degree two, which is a much simpler problem than
653280	660800	our original degree five polynomial. Generalizing these observations, if we have an n minus one
660800	667120	degree polynomial that we want to evaluate at n points, we can split the polynomial into even
667120	673520	and odd terms with these two smaller polynomials now having degree n over two minus one. So,
673520	678160	how do we evaluate these polynomials with half the degree of our original polynomial?
678160	683760	Well, what's beautiful here is that this is just another evaluation problem, but this time
683760	689600	we need to evaluate the polynomials at each of our original inputs squared. And this works out
689600	695440	nicely since our original points were positive negative pairs, so if we originally had n points,
695520	700960	we now only end up having n over two points. This is starting to smell like the start of
700960	707600	a recursive algorithm. Let's take a look at the bigger picture. We want to evaluate a polynomial
707600	714960	p of x at n points where the n points are positive negative paired. We split the polynomial into odd
714960	721120	and even degree components where we now have two simpler polynomials of degree n over two minus one
721120	727280	that only need n over two points to evaluate. Once we recursively evaluate these smaller
727280	732080	polynomials, we can then go through every point in our original set of n points and calculate the
732080	737200	respective values by utilizing the relationship between the positive and negative paired points.
738640	745040	This gives us the value representation of our original polynomial. If we can get this to work,
745040	750960	this means we have an O of n log n recursive algorithm since the two recursive sub problems
750960	756640	have half the size of the original problem and take linear time to evaluate the n points.
756640	760320	This would be a huge improvement from our earlier quadratic running time,
760320	763760	but there is one major problem. Can you spot the issue?
766000	771120	The problem occurs at the recursive step. The entire scheme relies on the fact
771120	775600	that the polynomial will have positive and negative paired points for evaluation.
776160	781520	This works at the top level, but the next level we are evaluating n over two points where each
781520	788320	point is a squared value. These all end up being positive so the recursion breaks. So then the natural
788320	795040	question is, can we make these new set of points positive negative paired? Some of you may already
795040	800400	see it, but this actually leads to the third absolutely ingenious idea behind the FFT.
800960	807680	The only way this is possible is if we expand the domain of possible initial points to include
807680	814160	complex numbers. For a special choice of complex numbers, the recursive relation works perfectly
814160	818400	where every subsequent set of points will contain positive negative pairs.
819360	822480	What possible set of initial n points has this property?
823360	827440	This is a hard question and to answer it we are going to do a little bit of reverse
827440	832720	engineering with an example. Let's say we have a degree 3 polynomial which requires at least
832720	838400	n equals 4 points for its value representation. These points need to be positive negative pairs
838400	845520	so we can write them as x1, negative x1, x2, and negative x2. We know that the recursive step
845520	850800	will require that we evaluate the odd and even splits of the polynomial at two points,
850880	857200	x1 squared and x2 squared. Now the key constraint here is that for the recursion to work,
857200	863520	these two points also have to be positive negative pairs. So we have an equivalence between x2
863520	870320	squared and negative x1 squared. At the bottom level of the recursion we'll have a single point
870320	877120	x1 to the power of 4. Now what's nice is that we get to choose these points. Let's see what happens
877120	884480	if we pick our initial x1 to be 1. This means two of our initial points are 1 and negative 1
884480	890160	which at the next level of recursion means that x1 squared and negative x1 squared also have to be
890160	896800	1 and negative 1 respectively. And at the bottom layer we have only one point which ends up being
896800	904240	1. Now the question becomes what x2 should we choose so that when we square x2 we end up with
904240	909520	negative 1. The answer to that is the complex number i which means that the four points that
909520	915040	we need to evaluate this polynomial at are 1, negative 1, i and negative i.
917280	922480	An alternate perspective to what we just did here is that we essentially just solved the equation
922480	927920	x to the power of 4 equals 1. Since at the bottom layer of the recursion the value of any of our
927920	935360	original points to the power of 4 was 1. We know this equation has four solutions all of which
935360	942000	are encompassed by a special set of points called the fourth roots of unity. Let's see if this
942000	949120	generalizes. If given a degree 5 polynomial we'll need n is greater than or equal to six points.
949120	954000	Since our recursive method is splitting each problem in half it's convenient to just pick
954000	959440	a power of 2 so let's pick n equals 8. Now what we need to do is to find eight points that are
959440	965360	positive negative paired such that each of these points when raised to the eighth power is equal
965360	972480	to 1. We see that the right points are the eighth roots of unity. Generalizing this to any d degree
972480	978480	polynomial what we will do is pick n is greater than or equal to d plus 1 points such that n is
978480	984560	the power of 2 and the points that we should choose are the nth roots of unity. This fact
984560	990320	deserves a little bit more explanation. Why does this work? Before we answer that question let's
990320	995440	formalize a few things. The nth roots of unity are the solution to the following equation
995440	1000320	and they are best visualized as equally spaced points on the unit circle. The angle between
1000320	1007200	these points is 2 pi over n. With this fact a nice way to compactly write these points is with
1007200	1012960	complex exponential notation through Euler's formula. One standard way to define the roots of
1012960	1019760	unity is by defining this omega term as e to the power of 2 pi i over n and then what this allows
1019760	1025360	us to do is define individual roots of unity quite compactly. Here are some examples.
1028240	1033920	So now when we say we want to evaluate a polynomial at the nth roots of unity what that really means
1033920	1039520	is we want to evaluate it at omega to the power of 0, omega to the power of 1, so on and so forth
1039520	1047680	until omega to the power of n minus 1. So going back to our original question of why evaluating
1047680	1053520	the polynomial p of x at the nth roots of unity works for a recursive algorithm there are two
1053520	1059360	key properties at play here. For one our original set of points are positive negative paired where
1059360	1065520	for the jth root omega to the power of j omega to the power of j plus n over 2 is going to be the
1065520	1071920	corresponding pair. Now in our recursive step we will be squaring each of these points and passing
1071920	1077920	them on to the even and odd degree polynomials. This is what happens when we square our original
1077920	1084800	nth roots of unity. This reveals the second key property of the nth roots of unity. When we square
1084800	1090720	the nth roots of unity we end up with the n over 2 roots of unity which are also positive negative
1090720	1096080	paired and are just the right number of points for the two new polynomials of half the degree.
1096080	1101440	This same pattern holds at every level of the recursion until we end up with just one point.
1101440	1102560	How beautiful is that?
1108480	1113600	All right we are now ready to outline the core fast Fourier transform algorithm. The
1113600	1119440	FFT will take in a coefficient representation of a degree n minus one polynomial where n is the power
1119440	1126800	of two. We will define omega as e to the power of two pi i over n to allow us to define roots of
1126800	1132640	unity easily. The first case we need to handle is the base case which is going to be when n is equal
1132640	1139040	to one. All this means is that we are evaluating the polynomial at one point. Our recursive case is
1139040	1145760	two calls to the FFT. One on even degree terms and one on odd degree terms. The intention is that
1145760	1151120	these polynomials are now half the degree of our original polynomial so they only need to be evaluated
1151120	1156800	at n over two roots of unity. Assuming the recursion works the output of these calls will be the
1156800	1162400	corresponding value representation of these even and odd degree term polynomials which we will label
1162400	1169760	as y e and y o. Now on to the tricky part which is to take the output from these recursive calls
1169760	1176000	and combine them to get the value representation of our original degree n minus one polynomial.
1176640	1181760	We saw earlier that the key idea was to use the relationship between positive and negative pairs
1181760	1187760	but now we have to slightly modify this logic for our roots of unity inputs. As a quick note
1187760	1192800	yes I did modify the indexing to zero indexing because we're getting ready to write some code.
1192800	1198080	We know the jth input point will correspond to jth root of unity which results in the following
1198080	1205600	relationship. We also saw earlier that the paired point negative omega to the power of j is equal
1205600	1211680	to omega to the power of j plus n over two due to the properties of the roots of unity. Using this
1211680	1218320	fact we can modify the second equation as follows. And lastly one more fact that's nice is that the
1218320	1226560	jth index in our y e and y o list correspond to the even and odd polynomials evaluated at omega
1226560	1232560	to the power of two times j. What this allows us to do is rewrite our equations as follows
1232560	1238240	which makes it much easier to implement code. As mentioned this part is tricky so I encourage
1238240	1244800	you to take your time and verify that each of these steps is indeed true. The final step in the
1244800	1251360	FFT algorithm is to then return the values of a polynomial p evaluated at the nth roots of unity.
1252000	1258400	Let's now translate this outlined logic into code. Our function FFT will take an input p which is
1258400	1265680	the coefficient representation of a polynomial p. We first define n as the length of p and we will
1265680	1272240	assume that n is a power of two. Just to be clear there are implementations of the FFT that can handle
1272240	1278800	n not being a power of two but those are way more complicated. The power of two cases encompass the
1278800	1284800	core ideas of the algorithm. We now handle the base case which is just a matter of returning our
1284800	1291360	original p. This makes sense since we only have one element making p a degree zero polynomial
1291360	1297440	or constant. Otherwise we define omega as we have outlined and then proceed with the recursive step.
1297440	1302240	The first part of the recursive step requires splitting the polynomial into even and odd
1302240	1307600	degree terms which is quite easy to do. Then we recursively call our FFT function on these
1307600	1312880	polynomials that now have half the degree of our original polynomial. We denote the outputs as
1312880	1319920	y e and y o as we have done in the outline. Now it's time to put this all together. We initialize
1319920	1327440	our output list which will contain the final value representation. Then for all j up to n over two
1327440	1333440	we calculate the value representations as we have outlined. After populating all values in our list
1333440	1339840	we then return that list and that's the FFT. Overall pretty crazy how all the ideas we talked
1339840	1346960	about end up coming together in eleven lines of truly elegant code. Let's now take a larger
1346960	1351760	look at our original problem of polynomial multiplication and see where we are. We now
1351760	1358080	have a way to convert coefficient representations to value representations efficiently using the FFT.
1358080	1363280	So now the only missing piece is the reverse process of converting from value representations
1363280	1368880	to coefficient representations which is formally called interpolation. This is where things get
1368880	1376400	really wild. On the surface the idea of reversing evaluation feels like a significantly harder task.
1376400	1379760	Let's take a step back and look at this problem from another perspective.
1380400	1385920	Evaluation and interpolation are closely connected and as we saw earlier we can express
1385920	1393680	evaluation as a matrix vector product. We have a vector of coefficients multiplied by a matrix
1393680	1400320	of our evaluation points to give us the value representation. Now in the FFT algorithm the
1400320	1406320	kth evaluation point was a corresponding root of unity which allows us to rewrite the matrix
1406320	1413600	vector product as follows. This particular matrix has a special name the discrete Fourier transform
1413600	1421520	or DFT matrix. In most textbooks and references the FFT at its core is an algorithm for calculating
1421520	1428000	these types of matrix vector products efficiently. Polynomial evaluation at the roots of unity happens
1428000	1433200	to be one case where this type of matrix vector product shows up so that's why we can use the
1433200	1439840	FFT. Anyways the nice fact about the FFT and evaluation in this context is that interpolation
1439840	1447520	is much easier to understand. Interpolation requires inversing this DFT matrix. For interpolation we are
1447520	1453360	given a value representation of our polynomial and we want to find the coefficient representation
1453360	1459120	which means we have to multiply the value representation by the inverse of the DFT matrix.
1460000	1464560	So let me show you what the inverse of this matrix looks like. I'm purposefully skipping
1464560	1469440	a lot of important linear algebra facts here since that would be an entirely different video
1469440	1473520	but given that this is the inverse matrix what stands out to you?
1476160	1481200	It's really quite amazing but this inverse matrix looks almost the same as our original
1481200	1487840	DFT matrix. In fact the only difference is that every single omega in our original DFT matrix
1487840	1494000	is now just replaced with omega to the power of negative 1 with a normalization factor of 1 over
1494000	1500400	n. This indicates a potential to reuse the FFT logic for interpolation since the matrix structure
1500400	1506400	is basically the same. Let's formalize this suspicion by doing a direct comparison. In
1506400	1512240	evaluation which involved the FFT we are given a set of coefficients and evaluate the polynomial
1512240	1517680	at the roots of unity to get a value representation. This involved the following matrix vector product
1517680	1524320	where we define omega as e to the power of 2 pi i divided by n. Looking at interpolation we now
1524320	1530800	want to define what is formally called the inverse FFT algorithm. The inverse FFT will take a value
1530880	1536160	representation where each value was evaluated at the roots of unity and gives you a set of
1536160	1541360	coefficients for the original polynomial basically reversing what the original FFT did.
1541360	1547280	As we just saw this requires multiplying by the inverse of the DFT matrix. We noted that each
1547280	1554000	omega in our original DFT matrix now corresponds to 1 over n times omega to the power of negative 1.
1554000	1560000	Now the punchline here is that what this means is we can define the inverse FFT
1560000	1567440	as the same FFT function but now called on the value representation with omega defined as 1 over
1567440	1574640	n times e to the negative 2 pi i divided by n. That's it. With those small changes we have
1574640	1581040	an inverse FFT that performs interpolation. Just so we are super clear on what sorcery just happened
1581040	1585840	let me remind you of the original FFT implementation and now let me show you the
1585840	1590640	inverse FFT implementation which takes the value representation as an input.
1591920	1597680	What we literally do is copy our FFT implementation, change the name of the recursive calls to
1597680	1603680	match and then literally change one line of code. One line and that's all there is to it.
1604640	1609680	So if your mind isn't blown you haven't been paying attention. Let's take a look at what we just
1609680	1615440	did. We motivated the FFT through the problem of polynomial multiplication where the first
1615440	1620640	brilliant idea came from representing and multiplying polynomials using the value representation.
1621360	1625680	Converting polynomials to a value representation required us to come up with an appropriate
1625680	1631680	set of evaluation points. Our first attempts at solving this problem inspired the clever idea of
1631680	1637440	using positive negative pairs but the recursion didn't quite work unless we expanded the domain
1637440	1643120	to complex numbers. The next brilliant idea came from using the nth roots of unity where the points
1643120	1648480	at every level of recursion are positive negative paired. This evaluation scheme using the roots
1648480	1653920	of unity encompassed the essence of the FFT algorithm. When confronted with the problem
1653920	1659040	of reversing the process using interpolation we discovered something truly astounding.
1659040	1666000	The inverse FFT is the same algorithm but with one minor adjustment. So if we take a look at what
1666000	1672240	we just did here there's not one, not two, not three, but four absolutely mind-blowing ideas
1672240	1677680	that come together to make this work. Do I really need to say more on why this is my favorite algorithm?
1681280	1685360	That's all for this video and thanks for watching. If you enjoyed the content please
1685360	1690000	hit the like button so that this content will be recommended to more people. If you want to
1690000	1694480	see more content like this please don't forget to hit the subscribe button and if you want to
1694480	1698960	more directly support the work of this channel please check out the Patreon page linked in the
1698960	1702240	description below. I'll see you all in the next video.
