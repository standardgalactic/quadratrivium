start	end	text
0	3680	Good, without further ado, I'd like to present our next speaker, Sebastian.
3680	6400	Sebastian will be talking about writing faster code.
6400	7880	Give him a big hand.
7880	9880	APPLAUSE
14680	17080	OK, hi, everyone. Can you hear me?
20080	23680	OK, so I would like to talk with you about writing faster code.
23680	26200	And last time I was giving a short talk,
26200	28400	short lightning talk about writing faster code,
28400	31320	I remember someone pointed out that, well, basically,
31320	34240	you can take your Python code, rewrite it in CRC++,
34240	36800	and it will be faster.
36800	39400	And I mean, the guy was right.
39400	42400	So take any piece of Python code, rewrite it in CRC++,
42400	45520	and probably it will be automatically faster.
45520	48640	So I was thinking, hmm, if I say just writing faster code,
48640	51440	it might not be clear if I mean only Python or not.
51440	53680	So I had to fix the title of my presentation.
54680	56680	LAUGHTER
56680	58680	And I was very happy with the new title.
58680	62680	I mean, it makes it clear we are not going to talk about C or Java today.
62680	64680	But then I realized the title is too long.
64680	67680	I mean, even though it's very clear, it barely fits on the slide.
67680	69680	So I had to change it again.
69680	73680	So I got the version that means exactly the same thing, but it's shorter.
73680	75680	So this is how I ended up with writing faster Python
75680	77680	as a title for my today's talk.
77680	81680	So let's put aside the flame war about which programming language is better.
81680	85680	We all know the answer. That's why you're here.
85680	87680	Python was not created to be a fast language
87680	91680	that you would use for some computations where every nanosecond counts.
91680	93680	And that's fine with me.
93680	97680	Python is a great programming language that is very easy and fun to use.
97680	99680	Python is very easy to learn.
99680	102680	The fact that it's so easy to read and write code in Python,
102680	107680	it's very encouraging for people new to software development.
107680	110680	I see that it's getting more and more popular in schools
110680	113680	or at the universities as the first programming language.
113680	115680	And I am not surprised.
115680	118680	I mean, imagine you're completely new to programming
118680	123680	and someone tells you, hey, let me show you how much fun programming is
123680	125680	and let's start with something super simple.
125680	127680	Let's just print some text to the screen.
127680	130680	And then he shows you those two examples.
130680	134680	I mean, one of them is clearly not something that you want to show
134680	138680	to a beginner to encourage him or her to start programming.
138680	142680	But also, Python is not only useful for learning.
142680	144680	There are many big companies that are using Python.
144680	147680	Companies with millions of users and billions of requests per month.
147680	151680	So your website is going to be fun using Python.
151680	153680	So Python is usually fast enough.
153680	156680	But what if you decide that it's not fast enough anymore?
156680	159680	For example, your website starts giving you timeouts
159680	162680	or maybe a faster code will bring more money to your company.
162680	164680	So it's time for optimization.
164680	166680	But how do we optimize the code?
166680	168680	Well, probably you need to follow some rules.
168680	170680	So let's try to Google for that.
170680	174680	And if we open the first link, we see that there are only three rules.
174680	176680	Wow, it's going to be easier than we expected.
176680	179680	So let's take a closer look at those rules.
179680	182680	First rule of optimization, don't.
182680	184680	Okay, that was easy. Any questions?
184680	187680	Well, actually, now there is more to that.
187680	189680	So what does it mean, don't?
189680	193680	Well, nine out of ten times when you think that you need optimization,
193680	197680	you don't, especially in the early stage of your product's life.
197680	200680	You might think it would be nice to optimize your code a bit,
200680	204680	but first of all, you will waste time doing something that is probably not needed.
204680	207680	If you want your code to run faster,
207680	210680	you can start with getting a faster hardware in the first place.
210680	213680	And second of all, optimization comes with a cost.
213680	218680	Most often, the only cost is the time that you spend optimizing your code.
218680	221680	Well, sometimes it's also the time that you need to fix
221680	224680	what you just broke with your optimization.
224680	227680	But also optimize it, the optimized code might not be as readable
227680	229680	as it was in the first place.
229680	232680	And maybe your code is running faster, but it's now using more memory.
232680	236680	So unless you have really good reasons to optimize, don't do this.
236680	239680	And if you know that you have reasons to optimize,
239680	242680	then we can move to the second rule of optimization.
242680	244680	Don't do this yet.
244680	247680	And this is how I understand this rule.
247680	250680	So first, make sure your code works,
250680	253680	then make sure you have a good test suit,
253680	255680	and only then you're ready for optimization.
255680	257680	I love this rule.
257680	259680	It always reminds me how many times I broke it.
259680	262680	I mean, so many times I was working on a piece of software,
262680	266680	and I started thinking, hmm, maybe I can change this piece of code,
266680	268680	and it will be faster,
268680	271680	and maybe I will save like two lines of code.
271680	273680	Was it a good idea?
273680	275680	No.
275680	277680	I ended up breaking things.
277680	279680	Most often I did end up breaking things,
279680	282680	but also I started jumping around the code,
282680	286680	and at some point I got confused what I was writing in the first place.
286680	288680	Did it make my code faster?
288680	292680	I have no idea, because I had nothing to compare it to in the first place.
292680	296680	If I would finish writing the code and then try to improve it,
296680	299680	I could measure both solutions and compare them.
299680	302680	But in that scenario, I could only guess.
302680	305680	And that brings me to the last rule of optimization.
305680	308680	Don't guess. Always profile your code.
308680	311680	Human are terrible in predicting the bottlenecks of your code,
311680	315680	so if you think that your code is slow,
315680	320680	first profile it and then see what part of it takes most of the time.
320680	326680	Otherwise, you may end up spending time rewriting one piece of your code
326680	329680	to just get like 1% of speed improvement,
329680	331680	while there are other parts of your software
331680	336680	where you can gain way more improvement with less effort.
336680	338680	So there are plenty of profiling tools.
338680	341680	There were already quite a few talks during EuroPython about profiling,
341680	343680	so I will not go into the details,
343680	347680	but if you don't know where to start, you can take a look at the C-profile module.
347680	351680	It will show you a clear overview of how many times each function is called
351680	353680	and where the code is spent,
353680	357680	and if you want to have some more advanced formatting,
357680	359680	you can have the PSTADS module.
359680	361680	Also, if you prefer the graphic interface,
361680	365680	you can take a look at the Run Snake Run or SnakeVis libraries.
365680	367680	So once we're ready for optimization,
367680	369680	we have to decide on which area we want to focus.
369680	372680	So there are different levels of optimization.
372680	376680	Starting from the highest level, you have the design level optimization.
376680	379680	So depending on the constraints and priorities of your system,
379680	381680	you can optimize it by redesigning it.
381680	385680	It might require rewriting your software in a different programming language
385680	387680	or changing the database type
387680	390680	or changing the architecture to perform less database queries.
390680	394680	So this kind of optimization will usually give you the best improvement,
394680	397680	but it also takes most time to do this.
397680	400680	So I don't encourage you to rewrite your software from the scratch,
400680	404680	but if you have some critical parts of your code that are run often,
404680	408680	you can optimize them by rewriting them in C or C++.
408680	412680	Because C is faster, you will have some good speed improvement for free.
412680	416680	Well, not really for free, now you will have Python and C code in the same project.
420680	424680	So one level lower, we have algorithms and data structures.
424680	427680	So knowing good algorithms together with their complexity
427680	432680	definitely helps you creating a good and efficient software.
432680	436680	For example, if you want to get the sum of numbers from 1 to n,
436680	440680	the first idea might be to get a loop that goes through all the elements and adds them.
440680	443680	It will work, but it won't be fast.
443680	446680	Instead, you can use the algorithm for the arithmetic sum,
446680	451680	which will give you the same results and it will be more efficient.
451680	454680	So the next level is the source code optimization.
454680	458680	And this is something that I will talk about in the second part of the presentation.
458680	460680	Now we're moving to the build level,
460680	463680	which involves setting up some specific build flags.
463680	467680	So in your daily work, it's not something that you will do often.
467680	469680	You can optimize Python for a specific architecture,
469680	471680	but if you're a web developer like me,
471680	474680	this is either something that you will do once per machine
474680	476680	or you won't bother at all.
476680	478680	Next, we have the compile level.
478680	484680	So you can make some optimizations if your programming language has an ahead-of-time compiler.
484680	486680	And since I'm talking about C Python today,
486680	488680	which doesn't really have a head-of-time compiler,
488680	491680	we're going to skip that part as well.
491680	494680	And last but not least, we have the runtime level.
494680	497680	So it's related with a specific compiler that you're using.
497680	499680	Some compilers are faster than the others.
499680	502680	So, for example, if you replace C Python with PyPy,
502680	506680	you can get some improvements depending on the use case of your software.
508680	512680	But it really depends on what kind of piece of code you're writing.
512680	516680	So most of the time, once you set up on a specific language implementation,
516680	519680	there's nothing you have to do to benefit from this kind of optimization.
519680	522680	It's usually up to the creators of the compilers to optimize them.
522680	526680	So simply updating to the new version of the programming language you're using
526680	530680	can make your code run a bit faster.
530680	534680	So when you optimize, you probably want your code to run faster.
534680	537680	And also use less memory.
537680	540680	And basically less of everything.
540680	543680	The bad news is you can't have all of it.
543680	547680	Optimization in one area will usually cause deterioration in other areas.
547680	551680	So you always have to decide which resources are crucial
551680	554680	and you have to optimize in that direction.
554680	558680	So it's possible that optimization will have nothing to do with the speed
558680	561680	because there are other resources more important than the raw speed.
561680	566680	For example, who cares that your program is now 10 times faster
566680	570680	when it's crashing half of the time because it's running out of memory?
571680	576680	Also, another important resource that people are often forgetting is the sanity.
576680	579680	A sanity of a person that will be maintaining your code.
579680	583680	So please be nice to that person. You never know who that might be.
583680	587680	Yeah, so unless you're really writing a throwaway code,
587680	590680	if you're making your code harder to read and maintain,
590680	593680	then you're probably doing it wrong.
593680	597680	So having those things clear, let's jump straight to how you can write faster Python.
597680	600680	Also known as source code optimization.
604680	608680	In my examples, I'm using the version 3.5.1 of Python.
608680	610680	Together with iPython.
610680	613680	Although the examples should work in both Python 2 and Python 3.
613680	616680	So for measuring the execution time of my code,
616680	618680	I will be using the magic timing function.
618680	621680	It has some overhead comparing to the standard timing library,
621680	625680	but it doesn't really matter because as long as we use the same method
625680	628680	to measure execution time of different functions,
628680	631680	we only need to know which method is faster than and by how much.
631680	635680	So for each of my examples, I will write different versions of code,
635680	639680	measure the execution time, and compare them.
639680	642680	So let's start with something simple.
642680	645680	Let's say you want to count the number of elements in a list.
645680	648680	You can easily write a simple loop that will increment the counter,
648680	651680	and while this will work, it will be very slow.
651680	654680	You can achieve the same results using the built-in LAN function.
654680	657680	And as you can see, for only one million of results,
657680	659680	the difference is insanely huge.
659680	662680	So my first advice is not to reinvent the wheel,
662680	665680	but first check if there is a function that you can use.
665680	668680	Python 3.5 has 68 built-in functions,
668680	670680	so it's nice to take a look at them
670680	672680	and keep them in the back of your head
672680	674680	because they might be handy at some point.
674680	678680	Also, before you start writing your own version of order dictionary
678680	680680	or a dictionary with default values,
680680	683680	take a look at the collection module from the standard library.
683680	687680	Even though it contains only like 10 different data types,
687680	690680	those are probably the data types you are looking for
690680	692680	if the standard ones are not enough.
694680	697680	So let's say you have a list of one million elements,
697680	699680	and you want to select only the odd numbers.
699680	702680	So the naive version would be to use the for loop.
702680	705680	So for each element of the list, you check if it's odd,
705680	707680	and if it is, you add it to another list.
707680	710680	But I already show you in the previous example
710680	714680	that in most cases, for loops can be replaced with something better.
714680	718680	In this case, you could use the built-in filter function instead.
718680	721680	And in Python 2, filter was returning a list directly.
721680	723680	In Python 3, it's returning an iterator.
723680	725680	So I have to call the list function
725680	729680	to get the same results as in case of the for loop.
729680	733680	And even though the list function has some impact on the performance,
733680	736680	it's negligible comparing to the time spent in the filter function.
736680	740680	Yet, you can see that filter performs even slower than the for loop.
741680	742680	Why does this happen?
742680	745680	Well, the fact that filter is returning now an iterator
745680	749680	is a clear sign that it's a wrong use case for this kind of function.
749680	753680	So if you want to get the whole list as a result,
753680	755680	it's better to use the list comprehension.
755680	759680	It's around 75% times faster than the for loop,
759680	761680	and at least for me, it looks more clear.
766680	768680	When you want to execute a piece of code,
768680	771680	but you are not sure if it will be successful.
771680	773680	Maybe some variables are not set,
773680	776680	like in this case, the class might be missing some attribute.
776680	778680	So you want to protect yourself somehow.
778680	781680	The first way you can do this is called look before you leave
781680	783680	or ask for permissions.
783680	787680	What it means is that you first check if the class has a specific attribute,
787680	789680	and then you perform the operations.
789680	792680	Usually, this checking is done with the if statement.
792680	794680	However, there's different approach that you could use,
794680	796680	and it's called back for forgiveness.
796680	799680	So in this scenario, you perform the operation
799680	801680	without checking the conditions first.
801680	804680	But in case you expect that something might break,
804680	807680	you wrap your code in a try except block,
807680	809680	and you catch the exceptions that were raised.
809680	811680	And as you can see in the simple example,
811680	814680	begging for forgiveness is like three times faster.
814680	817680	But it gets even better if you're checking for more conditions.
817680	820680	So here we are checking if three attributes are present.
820680	823680	And asking for permission is still slower,
823680	826680	and now it's also getting more difficult to read.
826680	828680	So following the back for forgiveness approach
828680	830680	will result in a faster and more readable code.
830680	833680	So we could say that asking for forgiveness
833680	836680	instead of checking the permissions is always a better way.
836680	839680	But we won't say that because it's not true.
839680	841680	Exceptional handling is still quite expensive.
841680	844680	So if the attribute is actually missing,
844680	848680	then begging for forgiveness will be slower than asking for permissions.
848680	852680	So as a rule of thumb, you can use the ask for permissions way
852680	855680	if you know that it's very likely that the attribute will be missing,
855680	858680	or there will be some other problems that you can predict.
858680	862680	Otherwise, if you're expecting that your code will work in most of the times,
862680	868680	try using try accept will result in a faster and quite often more readable code.
868680	871680	So for example, if you're fetching some files from the internet,
871680	873680	and you expect that everything will be fine
873680	875680	unless there is no internet connection.
875680	877680	So instead of checking if there is internet connection,
877680	879680	if it's fast enough, if there are no timeouts,
879680	881680	just go for the try accept.
881680	884680	But then again, I strongly advise you to measure both solutions
884680	887680	and see maybe in your case it will be different.
888680	892680	So let's tackle another problem, the membership testing.
892680	896680	So if you have a list and you want to check if it contains a specific element,
896680	898680	you can use a for loop.
898680	901680	But the problem is you are iterating over the whole list
901680	905680	even though you're not really doing anything with all those elements.
905680	908680	So you can replace the for loop with the in statement.
908680	912680	It will check if a specific element belongs to a given set of data,
912680	915680	and it will do this twice as fast.
915680	917680	But there is still one big problem with this approach.
917680	921680	The lookup time depends on where your element is located in that list.
921680	924680	If it's at the beginning of the list, you're lucky and you will get it fast.
924680	927680	If it's at the end of the list, you have to wait.
927680	930680	So what would be really nice here if we had the data structure
930680	932680	that would have a constant lookup time.
932680	936680	And actually in Python we have, we have both sets and dictionary
936680	938680	that have constant lookup time.
938680	941680	So if we replace the list with a set,
941680	943680	then the lookup time becomes faster,
943680	947680	from just a few times faster to hundreds of thousand times faster.
947680	949680	So where's the catch?
949680	952680	Well, you pay some time to convert the list to a set.
952680	955680	And in this scenario, converting this list to a set
955680	958680	takes more time than any of the lookups in that list.
958680	960680	So it doesn't really make sense.
960680	964680	However, if you're checking membership of different elements,
964680	968680	quite often it makes sense to first convert it to a set.
968680	971680	So speaking of sets, they have another interesting feature.
971680	973680	They don't contain duplicates.
973680	975680	So basically if you have a list of elements
975680	977680	and you want to remove the duplicates,
977680	981680	the fastest way to do this is to convert this list to a set.
981680	984680	But be aware that sets are not ordered.
984680	986680	So if you need to preserve the order,
986680	991680	take a look at the order dictionary from the collection module.
991680	993680	So if you want to sort your list,
993680	997680	you can either do this in place using the list.sort function,
997680	1001680	or you can call the sorted function that will create a new list.
1001680	1003680	And unless you really need to have a new list,
1003680	1007680	sorting in place will be like six times faster in this scenario.
1007680	1012680	This is for one million of random numbers.
1012680	1016680	If you want to perform the same operation on a large set of data,
1016680	1018680	then you have two options.
1018680	1021680	You can write a function that performs the operation
1021680	1024680	and call this function 1,000 times.
1024680	1027680	Or you can call a function that takes this set of data
1027680	1029680	and performs the operation inside.
1029680	1032680	And the second approach will be faster.
1032680	1036680	So if you can in an easy way replace multiple calls to one function
1036680	1040680	with just one function, then quite often it's a good idea.
1042680	1045680	So what's the best way to check if a variable expression is true?
1045680	1048680	Well, you can explicitly compare this variable to true,
1048680	1051680	but in most cases you're adding additional redundancy.
1051680	1055680	So you can simplify your condition to just if variable.
1055680	1059680	And it will return true unless the variable is false,
1059680	1063680	non-zero, empty string, empty list, or other false expression.
1063680	1067680	And by doing that, your comparison gets faster by like 70%.
1067680	1070680	And the same rule applies when checking for false.
1070680	1074680	So the fastest way to do this is to use if not variable,
1074680	1078680	unless you really need to distinguish false from, let's say,
1078680	1081680	non or zero or other false values.
1081680	1084680	It also applies to empty data structures.
1084680	1087680	So simply doing if not a list
1087680	1090680	will be almost three times faster
1090680	1093680	than explicitly checking the length of a list.
1097680	1100680	So let's take a look at different ways of defining functions in Python.
1100680	1104680	The most common one is to create a function with def keyword.
1104680	1107680	The other way is to declare an anonymous function with lambda.
1107680	1109680	If you assign this lambda to a variable,
1109680	1113680	it will act in the same way as the function created with a def keyword.
1113680	1116680	And as you can see, they are both equally fast.
1116680	1120680	Why? Because both versions do exactly the same thing.
1120680	1124680	We can disassemble the code of both versions with the disk library,
1124680	1126680	and we'll see that inside is the same code.
1126680	1128680	So is there any difference?
1128680	1131680	Well, if your function has more than one line, you can't use lambda.
1131680	1134680	And you can't really put documentation inside of lambda.
1135680	1138680	Also, if you have Pepeit enabled in your code editor,
1138680	1141680	it will complain each time you try to assign lambda to a variable.
1141680	1143680	And in his right,
1143680	1147680	lambdas work really nice when you need a simple one-liner callback
1147680	1150680	for your functions, especially for functions like filter, mabel, reduce.
1150680	1154680	And there are also some quite few narrow use cases
1154680	1157680	where it might be necessary to use lambda as a callback.
1157680	1160680	So if you want to read more, you can check the link at the bottom.
1160680	1164680	In any other case, I would definitely recommend to use that.
1164680	1167680	It's much cleaner, you can document it properly,
1167680	1169680	and the performance is exactly the same.
1171680	1174680	So there are two ways how you can create an empty list.
1174680	1176680	So you can either call a list function,
1176680	1178680	or you can just use the list literal syntax.
1178680	1181680	And as you can see, the literal syntax is faster.
1181680	1183680	Why is it faster?
1183680	1186680	Because if you call a function, Python first needs to resolve this function.
1186680	1189680	And with the literal syntax, there is no overhead for that.
1190680	1193680	And the exact same thing happens for creating a dictionary.
1197680	1200680	Okay, I have two more examples that should be treated with quotient.
1200680	1203680	Even though the code can run faster,
1203680	1206680	I would not advise you to do this kind of optimization.
1206680	1210680	So sometimes, even though you can squeeze some additional performance from your code,
1210680	1213680	it doesn't mean that you should do this.
1216680	1218680	So one thing is a variable assignment.
1219680	1222680	If you have a bunch of variables that you need to assign,
1222680	1224680	you can do this the normal sequential way,
1224680	1227680	or you can go for this crazy parallel assignment.
1227680	1230680	And I mean, you can gain some speed,
1230680	1233680	but with this speed comes the hate of your colleagues
1233680	1235680	that will be reading this code later.
1235680	1238680	So in my opinion, it's not worth it.
1239680	1241680	Okay, and another interesting property of Python
1241680	1243680	is that the lookup for local variables
1243680	1246680	is faster than the lookup for globals or buildings.
1246680	1250680	So you can save some time if you store the reference to a building function
1250680	1253680	or a global function in a local variable.
1253680	1256680	So in this example, the only difference is on the line 3,
1256680	1261680	where I'm storing the reference to the global append in a local append variable.
1261680	1265680	And thanks to that, this function is like 35% faster.
1265680	1268680	But then again, if you see this code for the first time,
1268680	1272680	it's not very clear what it is supposed to do.
1272680	1275680	It might be confusing to see this kind of append function
1275680	1279680	because we are most used to see the list.append version.
1282680	1285680	To sum up, there are different kind of optimizations.
1285680	1288680	It's quite often about the speed, but not always.
1288680	1291680	And there are also different levels of optimization.
1291680	1295680	So sometimes if you cannot rewrite your whole application,
1295680	1298680	maybe you can use a different approach.
1298680	1300680	Even though the source code optimization
1300680	1303680	is not the fastest way to optimize your code,
1303680	1305680	those small improvements will add up.
1305680	1308680	And the main advantage of it is cheap.
1308680	1313680	So you can optimize the code at the moment of writing.
1313680	1316680	You don't really need to rewrite something.
1316680	1318680	And as long as you're writing idiomatic code
1318680	1320680	and you don't reinvent the wheel
1320680	1324680	but already use the existing functions and data structures in Python,
1324680	1327680	then you're already doing it correctly.
1327680	1329680	So be curious when you're coding.
1329680	1333680	If you think that the different code structure can be faster,
1333680	1335680	you can quickly check it with the time it,
1335680	1338680	and then you can improve it.
1338680	1340680	All right, my name is Sebastian Witowski, and I work at CERN.
1340680	1342680	So if you guys want to talk about physics,
1342680	1345680	then you're probably on the wrong conference.
1345680	1347680	But if you want to talk about Python,
1347680	1349680	you can catch me somewhere on the corridor.
1349680	1350680	Thank you.
1350680	1360680	All right, brilliant.
1360680	1363680	We have about two minutes for questions.
1363680	1365680	Sebastian, if you're happy to take one or two questions,
1365680	1366680	shall we have them?
1366680	1371680	Fantastic. Who's got a question? You, sir.
1371680	1373680	Awesome talk. I have a quick question.
1373680	1377680	You showed us some profilers, code profilers.
1377680	1383680	Do you have any preference, any favorites?
1383680	1386680	It really depends what you want to profile.
1386680	1389680	Because if you care about the speed, then the basic ones are fine.
1389680	1391680	But if you want to profile the memory users,
1391680	1393680	then you might need to use different profilers.
1393680	1397680	So it really depends what you want to profile.
1397680	1403680	Any other questions? Yep.
1403680	1405680	Do you have any recommendation on books or source
1405680	1408680	where we can find best practices regarding this
1408680	1411680	idiomatic Python?
1411680	1414680	Not from the top of my head,
1414680	1418680	but, well, definitely there is some guides
1418680	1420680	on the official Python documentation.
1420680	1423680	But also, for me, it's a lot of Googling
1423680	1426680	for best practices, also reading a lot of Stack Overflow.
1426680	1431680	There are some books, but I can't give you the names right now.
1431680	1433680	Any more questions?
1433680	1435680	Yes?
1435680	1437680	Was that you sticking your hand up, sir,
1437680	1439680	or just explaining something excitedly?
1439680	1441680	Pretty really not a question.
1441680	1443680	Any more questions? No?
1443680	1445680	In that case, let's thank our speaker for a fantastic talking.
1445680	1447680	Nice to ask you.
