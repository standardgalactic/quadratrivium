1
00:00:00,000 --> 00:00:03,680
Good, without further ado, I'd like to present our next speaker, Sebastian.

2
00:00:03,680 --> 00:00:06,400
Sebastian will be talking about writing faster code.

3
00:00:06,400 --> 00:00:07,880
Give him a big hand.

4
00:00:07,880 --> 00:00:09,880
APPLAUSE

5
00:00:14,680 --> 00:00:17,080
OK, hi, everyone. Can you hear me?

6
00:00:20,080 --> 00:00:23,680
OK, so I would like to talk with you about writing faster code.

7
00:00:23,680 --> 00:00:26,200
And last time I was giving a short talk,

8
00:00:26,200 --> 00:00:28,400
short lightning talk about writing faster code,

9
00:00:28,400 --> 00:00:31,320
I remember someone pointed out that, well, basically,

10
00:00:31,320 --> 00:00:34,240
you can take your Python code, rewrite it in CRC++,

11
00:00:34,240 --> 00:00:36,800
and it will be faster.

12
00:00:36,800 --> 00:00:39,400
And I mean, the guy was right.

13
00:00:39,400 --> 00:00:42,400
So take any piece of Python code, rewrite it in CRC++,

14
00:00:42,400 --> 00:00:45,520
and probably it will be automatically faster.

15
00:00:45,520 --> 00:00:48,640
So I was thinking, hmm, if I say just writing faster code,

16
00:00:48,640 --> 00:00:51,440
it might not be clear if I mean only Python or not.

17
00:00:51,440 --> 00:00:53,680
So I had to fix the title of my presentation.

18
00:00:54,680 --> 00:00:56,680
LAUGHTER

19
00:00:56,680 --> 00:00:58,680
And I was very happy with the new title.

20
00:00:58,680 --> 00:01:02,680
I mean, it makes it clear we are not going to talk about C or Java today.

21
00:01:02,680 --> 00:01:04,680
But then I realized the title is too long.

22
00:01:04,680 --> 00:01:07,680
I mean, even though it's very clear, it barely fits on the slide.

23
00:01:07,680 --> 00:01:09,680
So I had to change it again.

24
00:01:09,680 --> 00:01:13,680
So I got the version that means exactly the same thing, but it's shorter.

25
00:01:13,680 --> 00:01:15,680
So this is how I ended up with writing faster Python

26
00:01:15,680 --> 00:01:17,680
as a title for my today's talk.

27
00:01:17,680 --> 00:01:21,680
So let's put aside the flame war about which programming language is better.

28
00:01:21,680 --> 00:01:25,680
We all know the answer. That's why you're here.

29
00:01:25,680 --> 00:01:27,680
Python was not created to be a fast language

30
00:01:27,680 --> 00:01:31,680
that you would use for some computations where every nanosecond counts.

31
00:01:31,680 --> 00:01:33,680
And that's fine with me.

32
00:01:33,680 --> 00:01:37,680
Python is a great programming language that is very easy and fun to use.

33
00:01:37,680 --> 00:01:39,680
Python is very easy to learn.

34
00:01:39,680 --> 00:01:42,680
The fact that it's so easy to read and write code in Python,

35
00:01:42,680 --> 00:01:47,680
it's very encouraging for people new to software development.

36
00:01:47,680 --> 00:01:50,680
I see that it's getting more and more popular in schools

37
00:01:50,680 --> 00:01:53,680
or at the universities as the first programming language.

38
00:01:53,680 --> 00:01:55,680
And I am not surprised.

39
00:01:55,680 --> 00:01:58,680
I mean, imagine you're completely new to programming

40
00:01:58,680 --> 00:02:03,680
and someone tells you, hey, let me show you how much fun programming is

41
00:02:03,680 --> 00:02:05,680
and let's start with something super simple.

42
00:02:05,680 --> 00:02:07,680
Let's just print some text to the screen.

43
00:02:07,680 --> 00:02:10,680
And then he shows you those two examples.

44
00:02:10,680 --> 00:02:14,680
I mean, one of them is clearly not something that you want to show

45
00:02:14,680 --> 00:02:18,680
to a beginner to encourage him or her to start programming.

46
00:02:18,680 --> 00:02:22,680
But also, Python is not only useful for learning.

47
00:02:22,680 --> 00:02:24,680
There are many big companies that are using Python.

48
00:02:24,680 --> 00:02:27,680
Companies with millions of users and billions of requests per month.

49
00:02:27,680 --> 00:02:31,680
So your website is going to be fun using Python.

50
00:02:31,680 --> 00:02:33,680
So Python is usually fast enough.

51
00:02:33,680 --> 00:02:36,680
But what if you decide that it's not fast enough anymore?

52
00:02:36,680 --> 00:02:39,680
For example, your website starts giving you timeouts

53
00:02:39,680 --> 00:02:42,680
or maybe a faster code will bring more money to your company.

54
00:02:42,680 --> 00:02:44,680
So it's time for optimization.

55
00:02:44,680 --> 00:02:46,680
But how do we optimize the code?

56
00:02:46,680 --> 00:02:48,680
Well, probably you need to follow some rules.

57
00:02:48,680 --> 00:02:50,680
So let's try to Google for that.

58
00:02:50,680 --> 00:02:54,680
And if we open the first link, we see that there are only three rules.

59
00:02:54,680 --> 00:02:56,680
Wow, it's going to be easier than we expected.

60
00:02:56,680 --> 00:02:59,680
So let's take a closer look at those rules.

61
00:02:59,680 --> 00:03:02,680
First rule of optimization, don't.

62
00:03:02,680 --> 00:03:04,680
Okay, that was easy. Any questions?

63
00:03:04,680 --> 00:03:07,680
Well, actually, now there is more to that.

64
00:03:07,680 --> 00:03:09,680
So what does it mean, don't?

65
00:03:09,680 --> 00:03:13,680
Well, nine out of ten times when you think that you need optimization,

66
00:03:13,680 --> 00:03:17,680
you don't, especially in the early stage of your product's life.

67
00:03:17,680 --> 00:03:20,680
You might think it would be nice to optimize your code a bit,

68
00:03:20,680 --> 00:03:24,680
but first of all, you will waste time doing something that is probably not needed.

69
00:03:24,680 --> 00:03:27,680
If you want your code to run faster,

70
00:03:27,680 --> 00:03:30,680
you can start with getting a faster hardware in the first place.

71
00:03:30,680 --> 00:03:33,680
And second of all, optimization comes with a cost.

72
00:03:33,680 --> 00:03:38,680
Most often, the only cost is the time that you spend optimizing your code.

73
00:03:38,680 --> 00:03:41,680
Well, sometimes it's also the time that you need to fix

74
00:03:41,680 --> 00:03:44,680
what you just broke with your optimization.

75
00:03:44,680 --> 00:03:47,680
But also optimize it, the optimized code might not be as readable

76
00:03:47,680 --> 00:03:49,680
as it was in the first place.

77
00:03:49,680 --> 00:03:52,680
And maybe your code is running faster, but it's now using more memory.

78
00:03:52,680 --> 00:03:56,680
So unless you have really good reasons to optimize, don't do this.

79
00:03:56,680 --> 00:03:59,680
And if you know that you have reasons to optimize,

80
00:03:59,680 --> 00:04:02,680
then we can move to the second rule of optimization.

81
00:04:02,680 --> 00:04:04,680
Don't do this yet.

82
00:04:04,680 --> 00:04:07,680
And this is how I understand this rule.

83
00:04:07,680 --> 00:04:10,680
So first, make sure your code works,

84
00:04:10,680 --> 00:04:13,680
then make sure you have a good test suit,

85
00:04:13,680 --> 00:04:15,680
and only then you're ready for optimization.

86
00:04:15,680 --> 00:04:17,680
I love this rule.

87
00:04:17,680 --> 00:04:19,680
It always reminds me how many times I broke it.

88
00:04:19,680 --> 00:04:22,680
I mean, so many times I was working on a piece of software,

89
00:04:22,680 --> 00:04:26,680
and I started thinking, hmm, maybe I can change this piece of code,

90
00:04:26,680 --> 00:04:28,680
and it will be faster,

91
00:04:28,680 --> 00:04:31,680
and maybe I will save like two lines of code.

92
00:04:31,680 --> 00:04:33,680
Was it a good idea?

93
00:04:33,680 --> 00:04:35,680
No.

94
00:04:35,680 --> 00:04:37,680
I ended up breaking things.

95
00:04:37,680 --> 00:04:39,680
Most often I did end up breaking things,

96
00:04:39,680 --> 00:04:42,680
but also I started jumping around the code,

97
00:04:42,680 --> 00:04:46,680
and at some point I got confused what I was writing in the first place.

98
00:04:46,680 --> 00:04:48,680
Did it make my code faster?

99
00:04:48,680 --> 00:04:52,680
I have no idea, because I had nothing to compare it to in the first place.

100
00:04:52,680 --> 00:04:56,680
If I would finish writing the code and then try to improve it,

101
00:04:56,680 --> 00:04:59,680
I could measure both solutions and compare them.

102
00:04:59,680 --> 00:05:02,680
But in that scenario, I could only guess.

103
00:05:02,680 --> 00:05:05,680
And that brings me to the last rule of optimization.

104
00:05:05,680 --> 00:05:08,680
Don't guess. Always profile your code.

105
00:05:08,680 --> 00:05:11,680
Human are terrible in predicting the bottlenecks of your code,

106
00:05:11,680 --> 00:05:15,680
so if you think that your code is slow,

107
00:05:15,680 --> 00:05:20,680
first profile it and then see what part of it takes most of the time.

108
00:05:20,680 --> 00:05:26,680
Otherwise, you may end up spending time rewriting one piece of your code

109
00:05:26,680 --> 00:05:29,680
to just get like 1% of speed improvement,

110
00:05:29,680 --> 00:05:31,680
while there are other parts of your software

111
00:05:31,680 --> 00:05:36,680
where you can gain way more improvement with less effort.

112
00:05:36,680 --> 00:05:38,680
So there are plenty of profiling tools.

113
00:05:38,680 --> 00:05:41,680
There were already quite a few talks during EuroPython about profiling,

114
00:05:41,680 --> 00:05:43,680
so I will not go into the details,

115
00:05:43,680 --> 00:05:47,680
but if you don't know where to start, you can take a look at the C-profile module.

116
00:05:47,680 --> 00:05:51,680
It will show you a clear overview of how many times each function is called

117
00:05:51,680 --> 00:05:53,680
and where the code is spent,

118
00:05:53,680 --> 00:05:57,680
and if you want to have some more advanced formatting,

119
00:05:57,680 --> 00:05:59,680
you can have the PSTADS module.

120
00:05:59,680 --> 00:06:01,680
Also, if you prefer the graphic interface,

121
00:06:01,680 --> 00:06:05,680
you can take a look at the Run Snake Run or SnakeVis libraries.

122
00:06:05,680 --> 00:06:07,680
So once we're ready for optimization,

123
00:06:07,680 --> 00:06:09,680
we have to decide on which area we want to focus.

124
00:06:09,680 --> 00:06:12,680
So there are different levels of optimization.

125
00:06:12,680 --> 00:06:16,680
Starting from the highest level, you have the design level optimization.

126
00:06:16,680 --> 00:06:19,680
So depending on the constraints and priorities of your system,

127
00:06:19,680 --> 00:06:21,680
you can optimize it by redesigning it.

128
00:06:21,680 --> 00:06:25,680
It might require rewriting your software in a different programming language

129
00:06:25,680 --> 00:06:27,680
or changing the database type

130
00:06:27,680 --> 00:06:30,680
or changing the architecture to perform less database queries.

131
00:06:30,680 --> 00:06:34,680
So this kind of optimization will usually give you the best improvement,

132
00:06:34,680 --> 00:06:37,680
but it also takes most time to do this.

133
00:06:37,680 --> 00:06:40,680
So I don't encourage you to rewrite your software from the scratch,

134
00:06:40,680 --> 00:06:44,680
but if you have some critical parts of your code that are run often,

135
00:06:44,680 --> 00:06:48,680
you can optimize them by rewriting them in C or C++.

136
00:06:48,680 --> 00:06:52,680
Because C is faster, you will have some good speed improvement for free.

137
00:06:52,680 --> 00:06:56,680
Well, not really for free, now you will have Python and C code in the same project.

138
00:07:00,680 --> 00:07:04,680
So one level lower, we have algorithms and data structures.

139
00:07:04,680 --> 00:07:07,680
So knowing good algorithms together with their complexity

140
00:07:07,680 --> 00:07:12,680
definitely helps you creating a good and efficient software.

141
00:07:12,680 --> 00:07:16,680
For example, if you want to get the sum of numbers from 1 to n,

142
00:07:16,680 --> 00:07:20,680
the first idea might be to get a loop that goes through all the elements and adds them.

143
00:07:20,680 --> 00:07:23,680
It will work, but it won't be fast.

144
00:07:23,680 --> 00:07:26,680
Instead, you can use the algorithm for the arithmetic sum,

145
00:07:26,680 --> 00:07:31,680
which will give you the same results and it will be more efficient.

146
00:07:31,680 --> 00:07:34,680
So the next level is the source code optimization.

147
00:07:34,680 --> 00:07:38,680
And this is something that I will talk about in the second part of the presentation.

148
00:07:38,680 --> 00:07:40,680
Now we're moving to the build level,

149
00:07:40,680 --> 00:07:43,680
which involves setting up some specific build flags.

150
00:07:43,680 --> 00:07:47,680
So in your daily work, it's not something that you will do often.

151
00:07:47,680 --> 00:07:49,680
You can optimize Python for a specific architecture,

152
00:07:49,680 --> 00:07:51,680
but if you're a web developer like me,

153
00:07:51,680 --> 00:07:54,680
this is either something that you will do once per machine

154
00:07:54,680 --> 00:07:56,680
or you won't bother at all.

155
00:07:56,680 --> 00:07:58,680
Next, we have the compile level.

156
00:07:58,680 --> 00:08:04,680
So you can make some optimizations if your programming language has an ahead-of-time compiler.

157
00:08:04,680 --> 00:08:06,680
And since I'm talking about C Python today,

158
00:08:06,680 --> 00:08:08,680
which doesn't really have a head-of-time compiler,

159
00:08:08,680 --> 00:08:11,680
we're going to skip that part as well.

160
00:08:11,680 --> 00:08:14,680
And last but not least, we have the runtime level.

161
00:08:14,680 --> 00:08:17,680
So it's related with a specific compiler that you're using.

162
00:08:17,680 --> 00:08:19,680
Some compilers are faster than the others.

163
00:08:19,680 --> 00:08:22,680
So, for example, if you replace C Python with PyPy,

164
00:08:22,680 --> 00:08:26,680
you can get some improvements depending on the use case of your software.

165
00:08:28,680 --> 00:08:32,680
But it really depends on what kind of piece of code you're writing.

166
00:08:32,680 --> 00:08:36,680
So most of the time, once you set up on a specific language implementation,

167
00:08:36,680 --> 00:08:39,680
there's nothing you have to do to benefit from this kind of optimization.

168
00:08:39,680 --> 00:08:42,680
It's usually up to the creators of the compilers to optimize them.

169
00:08:42,680 --> 00:08:46,680
So simply updating to the new version of the programming language you're using

170
00:08:46,680 --> 00:08:50,680
can make your code run a bit faster.

171
00:08:50,680 --> 00:08:54,680
So when you optimize, you probably want your code to run faster.

172
00:08:54,680 --> 00:08:57,680
And also use less memory.

173
00:08:57,680 --> 00:09:00,680
And basically less of everything.

174
00:09:00,680 --> 00:09:03,680
The bad news is you can't have all of it.

175
00:09:03,680 --> 00:09:07,680
Optimization in one area will usually cause deterioration in other areas.

176
00:09:07,680 --> 00:09:11,680
So you always have to decide which resources are crucial

177
00:09:11,680 --> 00:09:14,680
and you have to optimize in that direction.

178
00:09:14,680 --> 00:09:18,680
So it's possible that optimization will have nothing to do with the speed

179
00:09:18,680 --> 00:09:21,680
because there are other resources more important than the raw speed.

180
00:09:21,680 --> 00:09:26,680
For example, who cares that your program is now 10 times faster

181
00:09:26,680 --> 00:09:30,680
when it's crashing half of the time because it's running out of memory?

182
00:09:31,680 --> 00:09:36,680
Also, another important resource that people are often forgetting is the sanity.

183
00:09:36,680 --> 00:09:39,680
A sanity of a person that will be maintaining your code.

184
00:09:39,680 --> 00:09:43,680
So please be nice to that person. You never know who that might be.

185
00:09:43,680 --> 00:09:47,680
Yeah, so unless you're really writing a throwaway code,

186
00:09:47,680 --> 00:09:50,680
if you're making your code harder to read and maintain,

187
00:09:50,680 --> 00:09:53,680
then you're probably doing it wrong.

188
00:09:53,680 --> 00:09:57,680
So having those things clear, let's jump straight to how you can write faster Python.

189
00:09:57,680 --> 00:10:00,680
Also known as source code optimization.

190
00:10:04,680 --> 00:10:08,680
In my examples, I'm using the version 3.5.1 of Python.

191
00:10:08,680 --> 00:10:10,680
Together with iPython.

192
00:10:10,680 --> 00:10:13,680
Although the examples should work in both Python 2 and Python 3.

193
00:10:13,680 --> 00:10:16,680
So for measuring the execution time of my code,

194
00:10:16,680 --> 00:10:18,680
I will be using the magic timing function.

195
00:10:18,680 --> 00:10:21,680
It has some overhead comparing to the standard timing library,

196
00:10:21,680 --> 00:10:25,680
but it doesn't really matter because as long as we use the same method

197
00:10:25,680 --> 00:10:28,680
to measure execution time of different functions,

198
00:10:28,680 --> 00:10:31,680
we only need to know which method is faster than and by how much.

199
00:10:31,680 --> 00:10:35,680
So for each of my examples, I will write different versions of code,

200
00:10:35,680 --> 00:10:39,680
measure the execution time, and compare them.

201
00:10:39,680 --> 00:10:42,680
So let's start with something simple.

202
00:10:42,680 --> 00:10:45,680
Let's say you want to count the number of elements in a list.

203
00:10:45,680 --> 00:10:48,680
You can easily write a simple loop that will increment the counter,

204
00:10:48,680 --> 00:10:51,680
and while this will work, it will be very slow.

205
00:10:51,680 --> 00:10:54,680
You can achieve the same results using the built-in LAN function.

206
00:10:54,680 --> 00:10:57,680
And as you can see, for only one million of results,

207
00:10:57,680 --> 00:10:59,680
the difference is insanely huge.

208
00:10:59,680 --> 00:11:02,680
So my first advice is not to reinvent the wheel,

209
00:11:02,680 --> 00:11:05,680
but first check if there is a function that you can use.

210
00:11:05,680 --> 00:11:08,680
Python 3.5 has 68 built-in functions,

211
00:11:08,680 --> 00:11:10,680
so it's nice to take a look at them

212
00:11:10,680 --> 00:11:12,680
and keep them in the back of your head

213
00:11:12,680 --> 00:11:14,680
because they might be handy at some point.

214
00:11:14,680 --> 00:11:18,680
Also, before you start writing your own version of order dictionary

215
00:11:18,680 --> 00:11:20,680
or a dictionary with default values,

216
00:11:20,680 --> 00:11:23,680
take a look at the collection module from the standard library.

217
00:11:23,680 --> 00:11:27,680
Even though it contains only like 10 different data types,

218
00:11:27,680 --> 00:11:30,680
those are probably the data types you are looking for

219
00:11:30,680 --> 00:11:32,680
if the standard ones are not enough.

220
00:11:34,680 --> 00:11:37,680
So let's say you have a list of one million elements,

221
00:11:37,680 --> 00:11:39,680
and you want to select only the odd numbers.

222
00:11:39,680 --> 00:11:42,680
So the naive version would be to use the for loop.

223
00:11:42,680 --> 00:11:45,680
So for each element of the list, you check if it's odd,

224
00:11:45,680 --> 00:11:47,680
and if it is, you add it to another list.

225
00:11:47,680 --> 00:11:50,680
But I already show you in the previous example

226
00:11:50,680 --> 00:11:54,680
that in most cases, for loops can be replaced with something better.

227
00:11:54,680 --> 00:11:58,680
In this case, you could use the built-in filter function instead.

228
00:11:58,680 --> 00:12:01,680
And in Python 2, filter was returning a list directly.

229
00:12:01,680 --> 00:12:03,680
In Python 3, it's returning an iterator.

230
00:12:03,680 --> 00:12:05,680
So I have to call the list function

231
00:12:05,680 --> 00:12:09,680
to get the same results as in case of the for loop.

232
00:12:09,680 --> 00:12:13,680
And even though the list function has some impact on the performance,

233
00:12:13,680 --> 00:12:16,680
it's negligible comparing to the time spent in the filter function.

234
00:12:16,680 --> 00:12:20,680
Yet, you can see that filter performs even slower than the for loop.

235
00:12:21,680 --> 00:12:22,680
Why does this happen?

236
00:12:22,680 --> 00:12:25,680
Well, the fact that filter is returning now an iterator

237
00:12:25,680 --> 00:12:29,680
is a clear sign that it's a wrong use case for this kind of function.

238
00:12:29,680 --> 00:12:33,680
So if you want to get the whole list as a result,

239
00:12:33,680 --> 00:12:35,680
it's better to use the list comprehension.

240
00:12:35,680 --> 00:12:39,680
It's around 75% times faster than the for loop,

241
00:12:39,680 --> 00:12:41,680
and at least for me, it looks more clear.

242
00:12:46,680 --> 00:12:48,680
When you want to execute a piece of code,

243
00:12:48,680 --> 00:12:51,680
but you are not sure if it will be successful.

244
00:12:51,680 --> 00:12:53,680
Maybe some variables are not set,

245
00:12:53,680 --> 00:12:56,680
like in this case, the class might be missing some attribute.

246
00:12:56,680 --> 00:12:58,680
So you want to protect yourself somehow.

247
00:12:58,680 --> 00:13:01,680
The first way you can do this is called look before you leave

248
00:13:01,680 --> 00:13:03,680
or ask for permissions.

249
00:13:03,680 --> 00:13:07,680
What it means is that you first check if the class has a specific attribute,

250
00:13:07,680 --> 00:13:09,680
and then you perform the operations.

251
00:13:09,680 --> 00:13:12,680
Usually, this checking is done with the if statement.

252
00:13:12,680 --> 00:13:14,680
However, there's different approach that you could use,

253
00:13:14,680 --> 00:13:16,680
and it's called back for forgiveness.

254
00:13:16,680 --> 00:13:19,680
So in this scenario, you perform the operation

255
00:13:19,680 --> 00:13:21,680
without checking the conditions first.

256
00:13:21,680 --> 00:13:24,680
But in case you expect that something might break,

257
00:13:24,680 --> 00:13:27,680
you wrap your code in a try except block,

258
00:13:27,680 --> 00:13:29,680
and you catch the exceptions that were raised.

259
00:13:29,680 --> 00:13:31,680
And as you can see in the simple example,

260
00:13:31,680 --> 00:13:34,680
begging for forgiveness is like three times faster.

261
00:13:34,680 --> 00:13:37,680
But it gets even better if you're checking for more conditions.

262
00:13:37,680 --> 00:13:40,680
So here we are checking if three attributes are present.

263
00:13:40,680 --> 00:13:43,680
And asking for permission is still slower,

264
00:13:43,680 --> 00:13:46,680
and now it's also getting more difficult to read.

265
00:13:46,680 --> 00:13:48,680
So following the back for forgiveness approach

266
00:13:48,680 --> 00:13:50,680
will result in a faster and more readable code.

267
00:13:50,680 --> 00:13:53,680
So we could say that asking for forgiveness

268
00:13:53,680 --> 00:13:56,680
instead of checking the permissions is always a better way.

269
00:13:56,680 --> 00:13:59,680
But we won't say that because it's not true.

270
00:13:59,680 --> 00:14:01,680
Exceptional handling is still quite expensive.

271
00:14:01,680 --> 00:14:04,680
So if the attribute is actually missing,

272
00:14:04,680 --> 00:14:08,680
then begging for forgiveness will be slower than asking for permissions.

273
00:14:08,680 --> 00:14:12,680
So as a rule of thumb, you can use the ask for permissions way

274
00:14:12,680 --> 00:14:15,680
if you know that it's very likely that the attribute will be missing,

275
00:14:15,680 --> 00:14:18,680
or there will be some other problems that you can predict.

276
00:14:18,680 --> 00:14:22,680
Otherwise, if you're expecting that your code will work in most of the times,

277
00:14:22,680 --> 00:14:28,680
try using try accept will result in a faster and quite often more readable code.

278
00:14:28,680 --> 00:14:31,680
So for example, if you're fetching some files from the internet,

279
00:14:31,680 --> 00:14:33,680
and you expect that everything will be fine

280
00:14:33,680 --> 00:14:35,680
unless there is no internet connection.

281
00:14:35,680 --> 00:14:37,680
So instead of checking if there is internet connection,

282
00:14:37,680 --> 00:14:39,680
if it's fast enough, if there are no timeouts,

283
00:14:39,680 --> 00:14:41,680
just go for the try accept.

284
00:14:41,680 --> 00:14:44,680
But then again, I strongly advise you to measure both solutions

285
00:14:44,680 --> 00:14:47,680
and see maybe in your case it will be different.

286
00:14:48,680 --> 00:14:52,680
So let's tackle another problem, the membership testing.

287
00:14:52,680 --> 00:14:56,680
So if you have a list and you want to check if it contains a specific element,

288
00:14:56,680 --> 00:14:58,680
you can use a for loop.

289
00:14:58,680 --> 00:15:01,680
But the problem is you are iterating over the whole list

290
00:15:01,680 --> 00:15:05,680
even though you're not really doing anything with all those elements.

291
00:15:05,680 --> 00:15:08,680
So you can replace the for loop with the in statement.

292
00:15:08,680 --> 00:15:12,680
It will check if a specific element belongs to a given set of data,

293
00:15:12,680 --> 00:15:15,680
and it will do this twice as fast.

294
00:15:15,680 --> 00:15:17,680
But there is still one big problem with this approach.

295
00:15:17,680 --> 00:15:21,680
The lookup time depends on where your element is located in that list.

296
00:15:21,680 --> 00:15:24,680
If it's at the beginning of the list, you're lucky and you will get it fast.

297
00:15:24,680 --> 00:15:27,680
If it's at the end of the list, you have to wait.

298
00:15:27,680 --> 00:15:30,680
So what would be really nice here if we had the data structure

299
00:15:30,680 --> 00:15:32,680
that would have a constant lookup time.

300
00:15:32,680 --> 00:15:36,680
And actually in Python we have, we have both sets and dictionary

301
00:15:36,680 --> 00:15:38,680
that have constant lookup time.

302
00:15:38,680 --> 00:15:41,680
So if we replace the list with a set,

303
00:15:41,680 --> 00:15:43,680
then the lookup time becomes faster,

304
00:15:43,680 --> 00:15:47,680
from just a few times faster to hundreds of thousand times faster.

305
00:15:47,680 --> 00:15:49,680
So where's the catch?

306
00:15:49,680 --> 00:15:52,680
Well, you pay some time to convert the list to a set.

307
00:15:52,680 --> 00:15:55,680
And in this scenario, converting this list to a set

308
00:15:55,680 --> 00:15:58,680
takes more time than any of the lookups in that list.

309
00:15:58,680 --> 00:16:00,680
So it doesn't really make sense.

310
00:16:00,680 --> 00:16:04,680
However, if you're checking membership of different elements,

311
00:16:04,680 --> 00:16:08,680
quite often it makes sense to first convert it to a set.

312
00:16:08,680 --> 00:16:11,680
So speaking of sets, they have another interesting feature.

313
00:16:11,680 --> 00:16:13,680
They don't contain duplicates.

314
00:16:13,680 --> 00:16:15,680
So basically if you have a list of elements

315
00:16:15,680 --> 00:16:17,680
and you want to remove the duplicates,

316
00:16:17,680 --> 00:16:21,680
the fastest way to do this is to convert this list to a set.

317
00:16:21,680 --> 00:16:24,680
But be aware that sets are not ordered.

318
00:16:24,680 --> 00:16:26,680
So if you need to preserve the order,

319
00:16:26,680 --> 00:16:31,680
take a look at the order dictionary from the collection module.

320
00:16:31,680 --> 00:16:33,680
So if you want to sort your list,

321
00:16:33,680 --> 00:16:37,680
you can either do this in place using the list.sort function,

322
00:16:37,680 --> 00:16:41,680
or you can call the sorted function that will create a new list.

323
00:16:41,680 --> 00:16:43,680
And unless you really need to have a new list,

324
00:16:43,680 --> 00:16:47,680
sorting in place will be like six times faster in this scenario.

325
00:16:47,680 --> 00:16:52,680
This is for one million of random numbers.

326
00:16:52,680 --> 00:16:56,680
If you want to perform the same operation on a large set of data,

327
00:16:56,680 --> 00:16:58,680
then you have two options.

328
00:16:58,680 --> 00:17:01,680
You can write a function that performs the operation

329
00:17:01,680 --> 00:17:04,680
and call this function 1,000 times.

330
00:17:04,680 --> 00:17:07,680
Or you can call a function that takes this set of data

331
00:17:07,680 --> 00:17:09,680
and performs the operation inside.

332
00:17:09,680 --> 00:17:12,680
And the second approach will be faster.

333
00:17:12,680 --> 00:17:16,680
So if you can in an easy way replace multiple calls to one function

334
00:17:16,680 --> 00:17:20,680
with just one function, then quite often it's a good idea.

335
00:17:22,680 --> 00:17:25,680
So what's the best way to check if a variable expression is true?

336
00:17:25,680 --> 00:17:28,680
Well, you can explicitly compare this variable to true,

337
00:17:28,680 --> 00:17:31,680
but in most cases you're adding additional redundancy.

338
00:17:31,680 --> 00:17:35,680
So you can simplify your condition to just if variable.

339
00:17:35,680 --> 00:17:39,680
And it will return true unless the variable is false,

340
00:17:39,680 --> 00:17:43,680
non-zero, empty string, empty list, or other false expression.

341
00:17:43,680 --> 00:17:47,680
And by doing that, your comparison gets faster by like 70%.

342
00:17:47,680 --> 00:17:50,680
And the same rule applies when checking for false.

343
00:17:50,680 --> 00:17:54,680
So the fastest way to do this is to use if not variable,

344
00:17:54,680 --> 00:17:58,680
unless you really need to distinguish false from, let's say,

345
00:17:58,680 --> 00:18:01,680
non or zero or other false values.

346
00:18:01,680 --> 00:18:04,680
It also applies to empty data structures.

347
00:18:04,680 --> 00:18:07,680
So simply doing if not a list

348
00:18:07,680 --> 00:18:10,680
will be almost three times faster

349
00:18:10,680 --> 00:18:13,680
than explicitly checking the length of a list.

350
00:18:17,680 --> 00:18:20,680
So let's take a look at different ways of defining functions in Python.

351
00:18:20,680 --> 00:18:24,680
The most common one is to create a function with def keyword.

352
00:18:24,680 --> 00:18:27,680
The other way is to declare an anonymous function with lambda.

353
00:18:27,680 --> 00:18:29,680
If you assign this lambda to a variable,

354
00:18:29,680 --> 00:18:33,680
it will act in the same way as the function created with a def keyword.

355
00:18:33,680 --> 00:18:36,680
And as you can see, they are both equally fast.

356
00:18:36,680 --> 00:18:40,680
Why? Because both versions do exactly the same thing.

357
00:18:40,680 --> 00:18:44,680
We can disassemble the code of both versions with the disk library,

358
00:18:44,680 --> 00:18:46,680
and we'll see that inside is the same code.

359
00:18:46,680 --> 00:18:48,680
So is there any difference?

360
00:18:48,680 --> 00:18:51,680
Well, if your function has more than one line, you can't use lambda.

361
00:18:51,680 --> 00:18:54,680
And you can't really put documentation inside of lambda.

362
00:18:55,680 --> 00:18:58,680
Also, if you have Pepeit enabled in your code editor,

363
00:18:58,680 --> 00:19:01,680
it will complain each time you try to assign lambda to a variable.

364
00:19:01,680 --> 00:19:03,680
And in his right,

365
00:19:03,680 --> 00:19:07,680
lambdas work really nice when you need a simple one-liner callback

366
00:19:07,680 --> 00:19:10,680
for your functions, especially for functions like filter, mabel, reduce.

367
00:19:10,680 --> 00:19:14,680
And there are also some quite few narrow use cases

368
00:19:14,680 --> 00:19:17,680
where it might be necessary to use lambda as a callback.

369
00:19:17,680 --> 00:19:20,680
So if you want to read more, you can check the link at the bottom.

370
00:19:20,680 --> 00:19:24,680
In any other case, I would definitely recommend to use that.

371
00:19:24,680 --> 00:19:27,680
It's much cleaner, you can document it properly,

372
00:19:27,680 --> 00:19:29,680
and the performance is exactly the same.

373
00:19:31,680 --> 00:19:34,680
So there are two ways how you can create an empty list.

374
00:19:34,680 --> 00:19:36,680
So you can either call a list function,

375
00:19:36,680 --> 00:19:38,680
or you can just use the list literal syntax.

376
00:19:38,680 --> 00:19:41,680
And as you can see, the literal syntax is faster.

377
00:19:41,680 --> 00:19:43,680
Why is it faster?

378
00:19:43,680 --> 00:19:46,680
Because if you call a function, Python first needs to resolve this function.

379
00:19:46,680 --> 00:19:49,680
And with the literal syntax, there is no overhead for that.

380
00:19:50,680 --> 00:19:53,680
And the exact same thing happens for creating a dictionary.

381
00:19:57,680 --> 00:20:00,680
Okay, I have two more examples that should be treated with quotient.

382
00:20:00,680 --> 00:20:03,680
Even though the code can run faster,

383
00:20:03,680 --> 00:20:06,680
I would not advise you to do this kind of optimization.

384
00:20:06,680 --> 00:20:10,680
So sometimes, even though you can squeeze some additional performance from your code,

385
00:20:10,680 --> 00:20:13,680
it doesn't mean that you should do this.

386
00:20:16,680 --> 00:20:18,680
So one thing is a variable assignment.

387
00:20:19,680 --> 00:20:22,680
If you have a bunch of variables that you need to assign,

388
00:20:22,680 --> 00:20:24,680
you can do this the normal sequential way,

389
00:20:24,680 --> 00:20:27,680
or you can go for this crazy parallel assignment.

390
00:20:27,680 --> 00:20:30,680
And I mean, you can gain some speed,

391
00:20:30,680 --> 00:20:33,680
but with this speed comes the hate of your colleagues

392
00:20:33,680 --> 00:20:35,680
that will be reading this code later.

393
00:20:35,680 --> 00:20:38,680
So in my opinion, it's not worth it.

394
00:20:39,680 --> 00:20:41,680
Okay, and another interesting property of Python

395
00:20:41,680 --> 00:20:43,680
is that the lookup for local variables

396
00:20:43,680 --> 00:20:46,680
is faster than the lookup for globals or buildings.

397
00:20:46,680 --> 00:20:50,680
So you can save some time if you store the reference to a building function

398
00:20:50,680 --> 00:20:53,680
or a global function in a local variable.

399
00:20:53,680 --> 00:20:56,680
So in this example, the only difference is on the line 3,

400
00:20:56,680 --> 00:21:01,680
where I'm storing the reference to the global append in a local append variable.

401
00:21:01,680 --> 00:21:05,680
And thanks to that, this function is like 35% faster.

402
00:21:05,680 --> 00:21:08,680
But then again, if you see this code for the first time,

403
00:21:08,680 --> 00:21:12,680
it's not very clear what it is supposed to do.

404
00:21:12,680 --> 00:21:15,680
It might be confusing to see this kind of append function

405
00:21:15,680 --> 00:21:19,680
because we are most used to see the list.append version.

406
00:21:22,680 --> 00:21:25,680
To sum up, there are different kind of optimizations.

407
00:21:25,680 --> 00:21:28,680
It's quite often about the speed, but not always.

408
00:21:28,680 --> 00:21:31,680
And there are also different levels of optimization.

409
00:21:31,680 --> 00:21:35,680
So sometimes if you cannot rewrite your whole application,

410
00:21:35,680 --> 00:21:38,680
maybe you can use a different approach.

411
00:21:38,680 --> 00:21:40,680
Even though the source code optimization

412
00:21:40,680 --> 00:21:43,680
is not the fastest way to optimize your code,

413
00:21:43,680 --> 00:21:45,680
those small improvements will add up.

414
00:21:45,680 --> 00:21:48,680
And the main advantage of it is cheap.

415
00:21:48,680 --> 00:21:53,680
So you can optimize the code at the moment of writing.

416
00:21:53,680 --> 00:21:56,680
You don't really need to rewrite something.

417
00:21:56,680 --> 00:21:58,680
And as long as you're writing idiomatic code

418
00:21:58,680 --> 00:22:00,680
and you don't reinvent the wheel

419
00:22:00,680 --> 00:22:04,680
but already use the existing functions and data structures in Python,

420
00:22:04,680 --> 00:22:07,680
then you're already doing it correctly.

421
00:22:07,680 --> 00:22:09,680
So be curious when you're coding.

422
00:22:09,680 --> 00:22:13,680
If you think that the different code structure can be faster,

423
00:22:13,680 --> 00:22:15,680
you can quickly check it with the time it,

424
00:22:15,680 --> 00:22:18,680
and then you can improve it.

425
00:22:18,680 --> 00:22:20,680
All right, my name is Sebastian Witowski, and I work at CERN.

426
00:22:20,680 --> 00:22:22,680
So if you guys want to talk about physics,

427
00:22:22,680 --> 00:22:25,680
then you're probably on the wrong conference.

428
00:22:25,680 --> 00:22:27,680
But if you want to talk about Python,

429
00:22:27,680 --> 00:22:29,680
you can catch me somewhere on the corridor.

430
00:22:29,680 --> 00:22:30,680
Thank you.

431
00:22:30,680 --> 00:22:40,680
All right, brilliant.

432
00:22:40,680 --> 00:22:43,680
We have about two minutes for questions.

433
00:22:43,680 --> 00:22:45,680
Sebastian, if you're happy to take one or two questions,

434
00:22:45,680 --> 00:22:46,680
shall we have them?

435
00:22:46,680 --> 00:22:51,680
Fantastic. Who's got a question? You, sir.

436
00:22:51,680 --> 00:22:53,680
Awesome talk. I have a quick question.

437
00:22:53,680 --> 00:22:57,680
You showed us some profilers, code profilers.

438
00:22:57,680 --> 00:23:03,680
Do you have any preference, any favorites?

439
00:23:03,680 --> 00:23:06,680
It really depends what you want to profile.

440
00:23:06,680 --> 00:23:09,680
Because if you care about the speed, then the basic ones are fine.

441
00:23:09,680 --> 00:23:11,680
But if you want to profile the memory users,

442
00:23:11,680 --> 00:23:13,680
then you might need to use different profilers.

443
00:23:13,680 --> 00:23:17,680
So it really depends what you want to profile.

444
00:23:17,680 --> 00:23:23,680
Any other questions? Yep.

445
00:23:23,680 --> 00:23:25,680
Do you have any recommendation on books or source

446
00:23:25,680 --> 00:23:28,680
where we can find best practices regarding this

447
00:23:28,680 --> 00:23:31,680
idiomatic Python?

448
00:23:31,680 --> 00:23:34,680
Not from the top of my head,

449
00:23:34,680 --> 00:23:38,680
but, well, definitely there is some guides

450
00:23:38,680 --> 00:23:40,680
on the official Python documentation.

451
00:23:40,680 --> 00:23:43,680
But also, for me, it's a lot of Googling

452
00:23:43,680 --> 00:23:46,680
for best practices, also reading a lot of Stack Overflow.

453
00:23:46,680 --> 00:23:51,680
There are some books, but I can't give you the names right now.

454
00:23:51,680 --> 00:23:53,680
Any more questions?

455
00:23:53,680 --> 00:23:55,680
Yes?

456
00:23:55,680 --> 00:23:57,680
Was that you sticking your hand up, sir,

457
00:23:57,680 --> 00:23:59,680
or just explaining something excitedly?

458
00:23:59,680 --> 00:24:01,680
Pretty really not a question.

459
00:24:01,680 --> 00:24:03,680
Any more questions? No?

460
00:24:03,680 --> 00:24:05,680
In that case, let's thank our speaker for a fantastic talking.

461
00:24:05,680 --> 00:24:07,680
Nice to ask you.

