Processing Overview for EuroPython Conference
============================
Checking EuroPython Conference/Sebastian Witowski - Writing faster Python.txt
1. **Creating Lists and Dictionaries**: In Python, creating an empty list or dictionary using the literal syntax (`my_list = []` or `my_dict = {}`) is generally faster than calling the `list()` or `dict()` functions (`my_list = list()` or `my_dict = dict()`), because there's no overhead for function resolution.

2. **Parallel Assignment**: You can assign multiple variables at once in Python, but it's generally not recommended for the sake of code readability.

3. **Local vs Global Variable Access**: Accessing local variables is faster than accessing global or built-in variables because of the way Python's lookup table works.

4. **Optimization**: Optimization can be done at different levelsâ€”from simple source code optimizations to more complex algorithmic changes. Source code optimization can be done without rewriting the entire application and is often idiomatic and uses existing functions and data structures in Python.

5. **Profiling**: The choice of profiler depends on what you want to profile. For performance, basic profilers are fine, but for memory usage, different tools might be needed.

6. **Best Practices**: While there are official Python documentation guides, Sebastian personally relies on Google searches and Stack Overflow for best practices. There are also books available that can provide insights into idiomatic Python practices.

7. **Community Resources**: The Python community is vast, with a rich set of resources such as the Python documentation, Stack Overflow, and various Python-focused forums and communities where you can learn about best practices and performance optimizations.

