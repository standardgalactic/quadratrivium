WEBVTT

00:00.000 --> 00:03.680
Good, without further ado, I'd like to present our next speaker, Sebastian.

00:03.680 --> 00:06.400
Sebastian will be talking about writing faster code.

00:06.400 --> 00:07.880
Give him a big hand.

00:07.880 --> 00:09.880
APPLAUSE

00:14.680 --> 00:17.080
OK, hi, everyone. Can you hear me?

00:20.080 --> 00:23.680
OK, so I would like to talk with you about writing faster code.

00:23.680 --> 00:26.200
And last time I was giving a short talk,

00:26.200 --> 00:28.400
short lightning talk about writing faster code,

00:28.400 --> 00:31.320
I remember someone pointed out that, well, basically,

00:31.320 --> 00:34.240
you can take your Python code, rewrite it in CRC++,

00:34.240 --> 00:36.800
and it will be faster.

00:36.800 --> 00:39.400
And I mean, the guy was right.

00:39.400 --> 00:42.400
So take any piece of Python code, rewrite it in CRC++,

00:42.400 --> 00:45.520
and probably it will be automatically faster.

00:45.520 --> 00:48.640
So I was thinking, hmm, if I say just writing faster code,

00:48.640 --> 00:51.440
it might not be clear if I mean only Python or not.

00:51.440 --> 00:53.680
So I had to fix the title of my presentation.

00:54.680 --> 00:56.680
LAUGHTER

00:56.680 --> 00:58.680
And I was very happy with the new title.

00:58.680 --> 01:02.680
I mean, it makes it clear we are not going to talk about C or Java today.

01:02.680 --> 01:04.680
But then I realized the title is too long.

01:04.680 --> 01:07.680
I mean, even though it's very clear, it barely fits on the slide.

01:07.680 --> 01:09.680
So I had to change it again.

01:09.680 --> 01:13.680
So I got the version that means exactly the same thing, but it's shorter.

01:13.680 --> 01:15.680
So this is how I ended up with writing faster Python

01:15.680 --> 01:17.680
as a title for my today's talk.

01:17.680 --> 01:21.680
So let's put aside the flame war about which programming language is better.

01:21.680 --> 01:25.680
We all know the answer. That's why you're here.

01:25.680 --> 01:27.680
Python was not created to be a fast language

01:27.680 --> 01:31.680
that you would use for some computations where every nanosecond counts.

01:31.680 --> 01:33.680
And that's fine with me.

01:33.680 --> 01:37.680
Python is a great programming language that is very easy and fun to use.

01:37.680 --> 01:39.680
Python is very easy to learn.

01:39.680 --> 01:42.680
The fact that it's so easy to read and write code in Python,

01:42.680 --> 01:47.680
it's very encouraging for people new to software development.

01:47.680 --> 01:50.680
I see that it's getting more and more popular in schools

01:50.680 --> 01:53.680
or at the universities as the first programming language.

01:53.680 --> 01:55.680
And I am not surprised.

01:55.680 --> 01:58.680
I mean, imagine you're completely new to programming

01:58.680 --> 02:03.680
and someone tells you, hey, let me show you how much fun programming is

02:03.680 --> 02:05.680
and let's start with something super simple.

02:05.680 --> 02:07.680
Let's just print some text to the screen.

02:07.680 --> 02:10.680
And then he shows you those two examples.

02:10.680 --> 02:14.680
I mean, one of them is clearly not something that you want to show

02:14.680 --> 02:18.680
to a beginner to encourage him or her to start programming.

02:18.680 --> 02:22.680
But also, Python is not only useful for learning.

02:22.680 --> 02:24.680
There are many big companies that are using Python.

02:24.680 --> 02:27.680
Companies with millions of users and billions of requests per month.

02:27.680 --> 02:31.680
So your website is going to be fun using Python.

02:31.680 --> 02:33.680
So Python is usually fast enough.

02:33.680 --> 02:36.680
But what if you decide that it's not fast enough anymore?

02:36.680 --> 02:39.680
For example, your website starts giving you timeouts

02:39.680 --> 02:42.680
or maybe a faster code will bring more money to your company.

02:42.680 --> 02:44.680
So it's time for optimization.

02:44.680 --> 02:46.680
But how do we optimize the code?

02:46.680 --> 02:48.680
Well, probably you need to follow some rules.

02:48.680 --> 02:50.680
So let's try to Google for that.

02:50.680 --> 02:54.680
And if we open the first link, we see that there are only three rules.

02:54.680 --> 02:56.680
Wow, it's going to be easier than we expected.

02:56.680 --> 02:59.680
So let's take a closer look at those rules.

02:59.680 --> 03:02.680
First rule of optimization, don't.

03:02.680 --> 03:04.680
Okay, that was easy. Any questions?

03:04.680 --> 03:07.680
Well, actually, now there is more to that.

03:07.680 --> 03:09.680
So what does it mean, don't?

03:09.680 --> 03:13.680
Well, nine out of ten times when you think that you need optimization,

03:13.680 --> 03:17.680
you don't, especially in the early stage of your product's life.

03:17.680 --> 03:20.680
You might think it would be nice to optimize your code a bit,

03:20.680 --> 03:24.680
but first of all, you will waste time doing something that is probably not needed.

03:24.680 --> 03:27.680
If you want your code to run faster,

03:27.680 --> 03:30.680
you can start with getting a faster hardware in the first place.

03:30.680 --> 03:33.680
And second of all, optimization comes with a cost.

03:33.680 --> 03:38.680
Most often, the only cost is the time that you spend optimizing your code.

03:38.680 --> 03:41.680
Well, sometimes it's also the time that you need to fix

03:41.680 --> 03:44.680
what you just broke with your optimization.

03:44.680 --> 03:47.680
But also optimize it, the optimized code might not be as readable

03:47.680 --> 03:49.680
as it was in the first place.

03:49.680 --> 03:52.680
And maybe your code is running faster, but it's now using more memory.

03:52.680 --> 03:56.680
So unless you have really good reasons to optimize, don't do this.

03:56.680 --> 03:59.680
And if you know that you have reasons to optimize,

03:59.680 --> 04:02.680
then we can move to the second rule of optimization.

04:02.680 --> 04:04.680
Don't do this yet.

04:04.680 --> 04:07.680
And this is how I understand this rule.

04:07.680 --> 04:10.680
So first, make sure your code works,

04:10.680 --> 04:13.680
then make sure you have a good test suit,

04:13.680 --> 04:15.680
and only then you're ready for optimization.

04:15.680 --> 04:17.680
I love this rule.

04:17.680 --> 04:19.680
It always reminds me how many times I broke it.

04:19.680 --> 04:22.680
I mean, so many times I was working on a piece of software,

04:22.680 --> 04:26.680
and I started thinking, hmm, maybe I can change this piece of code,

04:26.680 --> 04:28.680
and it will be faster,

04:28.680 --> 04:31.680
and maybe I will save like two lines of code.

04:31.680 --> 04:33.680
Was it a good idea?

04:33.680 --> 04:35.680
No.

04:35.680 --> 04:37.680
I ended up breaking things.

04:37.680 --> 04:39.680
Most often I did end up breaking things,

04:39.680 --> 04:42.680
but also I started jumping around the code,

04:42.680 --> 04:46.680
and at some point I got confused what I was writing in the first place.

04:46.680 --> 04:48.680
Did it make my code faster?

04:48.680 --> 04:52.680
I have no idea, because I had nothing to compare it to in the first place.

04:52.680 --> 04:56.680
If I would finish writing the code and then try to improve it,

04:56.680 --> 04:59.680
I could measure both solutions and compare them.

04:59.680 --> 05:02.680
But in that scenario, I could only guess.

05:02.680 --> 05:05.680
And that brings me to the last rule of optimization.

05:05.680 --> 05:08.680
Don't guess. Always profile your code.

05:08.680 --> 05:11.680
Human are terrible in predicting the bottlenecks of your code,

05:11.680 --> 05:15.680
so if you think that your code is slow,

05:15.680 --> 05:20.680
first profile it and then see what part of it takes most of the time.

05:20.680 --> 05:26.680
Otherwise, you may end up spending time rewriting one piece of your code

05:26.680 --> 05:29.680
to just get like 1% of speed improvement,

05:29.680 --> 05:31.680
while there are other parts of your software

05:31.680 --> 05:36.680
where you can gain way more improvement with less effort.

05:36.680 --> 05:38.680
So there are plenty of profiling tools.

05:38.680 --> 05:41.680
There were already quite a few talks during EuroPython about profiling,

05:41.680 --> 05:43.680
so I will not go into the details,

05:43.680 --> 05:47.680
but if you don't know where to start, you can take a look at the C-profile module.

05:47.680 --> 05:51.680
It will show you a clear overview of how many times each function is called

05:51.680 --> 05:53.680
and where the code is spent,

05:53.680 --> 05:57.680
and if you want to have some more advanced formatting,

05:57.680 --> 05:59.680
you can have the PSTADS module.

05:59.680 --> 06:01.680
Also, if you prefer the graphic interface,

06:01.680 --> 06:05.680
you can take a look at the Run Snake Run or SnakeVis libraries.

06:05.680 --> 06:07.680
So once we're ready for optimization,

06:07.680 --> 06:09.680
we have to decide on which area we want to focus.

06:09.680 --> 06:12.680
So there are different levels of optimization.

06:12.680 --> 06:16.680
Starting from the highest level, you have the design level optimization.

06:16.680 --> 06:19.680
So depending on the constraints and priorities of your system,

06:19.680 --> 06:21.680
you can optimize it by redesigning it.

06:21.680 --> 06:25.680
It might require rewriting your software in a different programming language

06:25.680 --> 06:27.680
or changing the database type

06:27.680 --> 06:30.680
or changing the architecture to perform less database queries.

06:30.680 --> 06:34.680
So this kind of optimization will usually give you the best improvement,

06:34.680 --> 06:37.680
but it also takes most time to do this.

06:37.680 --> 06:40.680
So I don't encourage you to rewrite your software from the scratch,

06:40.680 --> 06:44.680
but if you have some critical parts of your code that are run often,

06:44.680 --> 06:48.680
you can optimize them by rewriting them in C or C++.

06:48.680 --> 06:52.680
Because C is faster, you will have some good speed improvement for free.

06:52.680 --> 06:56.680
Well, not really for free, now you will have Python and C code in the same project.

07:00.680 --> 07:04.680
So one level lower, we have algorithms and data structures.

07:04.680 --> 07:07.680
So knowing good algorithms together with their complexity

07:07.680 --> 07:12.680
definitely helps you creating a good and efficient software.

07:12.680 --> 07:16.680
For example, if you want to get the sum of numbers from 1 to n,

07:16.680 --> 07:20.680
the first idea might be to get a loop that goes through all the elements and adds them.

07:20.680 --> 07:23.680
It will work, but it won't be fast.

07:23.680 --> 07:26.680
Instead, you can use the algorithm for the arithmetic sum,

07:26.680 --> 07:31.680
which will give you the same results and it will be more efficient.

07:31.680 --> 07:34.680
So the next level is the source code optimization.

07:34.680 --> 07:38.680
And this is something that I will talk about in the second part of the presentation.

07:38.680 --> 07:40.680
Now we're moving to the build level,

07:40.680 --> 07:43.680
which involves setting up some specific build flags.

07:43.680 --> 07:47.680
So in your daily work, it's not something that you will do often.

07:47.680 --> 07:49.680
You can optimize Python for a specific architecture,

07:49.680 --> 07:51.680
but if you're a web developer like me,

07:51.680 --> 07:54.680
this is either something that you will do once per machine

07:54.680 --> 07:56.680
or you won't bother at all.

07:56.680 --> 07:58.680
Next, we have the compile level.

07:58.680 --> 08:04.680
So you can make some optimizations if your programming language has an ahead-of-time compiler.

08:04.680 --> 08:06.680
And since I'm talking about C Python today,

08:06.680 --> 08:08.680
which doesn't really have a head-of-time compiler,

08:08.680 --> 08:11.680
we're going to skip that part as well.

08:11.680 --> 08:14.680
And last but not least, we have the runtime level.

08:14.680 --> 08:17.680
So it's related with a specific compiler that you're using.

08:17.680 --> 08:19.680
Some compilers are faster than the others.

08:19.680 --> 08:22.680
So, for example, if you replace C Python with PyPy,

08:22.680 --> 08:26.680
you can get some improvements depending on the use case of your software.

08:28.680 --> 08:32.680
But it really depends on what kind of piece of code you're writing.

08:32.680 --> 08:36.680
So most of the time, once you set up on a specific language implementation,

08:36.680 --> 08:39.680
there's nothing you have to do to benefit from this kind of optimization.

08:39.680 --> 08:42.680
It's usually up to the creators of the compilers to optimize them.

08:42.680 --> 08:46.680
So simply updating to the new version of the programming language you're using

08:46.680 --> 08:50.680
can make your code run a bit faster.

08:50.680 --> 08:54.680
So when you optimize, you probably want your code to run faster.

08:54.680 --> 08:57.680
And also use less memory.

08:57.680 --> 09:00.680
And basically less of everything.

09:00.680 --> 09:03.680
The bad news is you can't have all of it.

09:03.680 --> 09:07.680
Optimization in one area will usually cause deterioration in other areas.

09:07.680 --> 09:11.680
So you always have to decide which resources are crucial

09:11.680 --> 09:14.680
and you have to optimize in that direction.

09:14.680 --> 09:18.680
So it's possible that optimization will have nothing to do with the speed

09:18.680 --> 09:21.680
because there are other resources more important than the raw speed.

09:21.680 --> 09:26.680
For example, who cares that your program is now 10 times faster

09:26.680 --> 09:30.680
when it's crashing half of the time because it's running out of memory?

09:31.680 --> 09:36.680
Also, another important resource that people are often forgetting is the sanity.

09:36.680 --> 09:39.680
A sanity of a person that will be maintaining your code.

09:39.680 --> 09:43.680
So please be nice to that person. You never know who that might be.

09:43.680 --> 09:47.680
Yeah, so unless you're really writing a throwaway code,

09:47.680 --> 09:50.680
if you're making your code harder to read and maintain,

09:50.680 --> 09:53.680
then you're probably doing it wrong.

09:53.680 --> 09:57.680
So having those things clear, let's jump straight to how you can write faster Python.

09:57.680 --> 10:00.680
Also known as source code optimization.

10:04.680 --> 10:08.680
In my examples, I'm using the version 3.5.1 of Python.

10:08.680 --> 10:10.680
Together with iPython.

10:10.680 --> 10:13.680
Although the examples should work in both Python 2 and Python 3.

10:13.680 --> 10:16.680
So for measuring the execution time of my code,

10:16.680 --> 10:18.680
I will be using the magic timing function.

10:18.680 --> 10:21.680
It has some overhead comparing to the standard timing library,

10:21.680 --> 10:25.680
but it doesn't really matter because as long as we use the same method

10:25.680 --> 10:28.680
to measure execution time of different functions,

10:28.680 --> 10:31.680
we only need to know which method is faster than and by how much.

10:31.680 --> 10:35.680
So for each of my examples, I will write different versions of code,

10:35.680 --> 10:39.680
measure the execution time, and compare them.

10:39.680 --> 10:42.680
So let's start with something simple.

10:42.680 --> 10:45.680
Let's say you want to count the number of elements in a list.

10:45.680 --> 10:48.680
You can easily write a simple loop that will increment the counter,

10:48.680 --> 10:51.680
and while this will work, it will be very slow.

10:51.680 --> 10:54.680
You can achieve the same results using the built-in LAN function.

10:54.680 --> 10:57.680
And as you can see, for only one million of results,

10:57.680 --> 10:59.680
the difference is insanely huge.

10:59.680 --> 11:02.680
So my first advice is not to reinvent the wheel,

11:02.680 --> 11:05.680
but first check if there is a function that you can use.

11:05.680 --> 11:08.680
Python 3.5 has 68 built-in functions,

11:08.680 --> 11:10.680
so it's nice to take a look at them

11:10.680 --> 11:12.680
and keep them in the back of your head

11:12.680 --> 11:14.680
because they might be handy at some point.

11:14.680 --> 11:18.680
Also, before you start writing your own version of order dictionary

11:18.680 --> 11:20.680
or a dictionary with default values,

11:20.680 --> 11:23.680
take a look at the collection module from the standard library.

11:23.680 --> 11:27.680
Even though it contains only like 10 different data types,

11:27.680 --> 11:30.680
those are probably the data types you are looking for

11:30.680 --> 11:32.680
if the standard ones are not enough.

11:34.680 --> 11:37.680
So let's say you have a list of one million elements,

11:37.680 --> 11:39.680
and you want to select only the odd numbers.

11:39.680 --> 11:42.680
So the naive version would be to use the for loop.

11:42.680 --> 11:45.680
So for each element of the list, you check if it's odd,

11:45.680 --> 11:47.680
and if it is, you add it to another list.

11:47.680 --> 11:50.680
But I already show you in the previous example

11:50.680 --> 11:54.680
that in most cases, for loops can be replaced with something better.

11:54.680 --> 11:58.680
In this case, you could use the built-in filter function instead.

11:58.680 --> 12:01.680
And in Python 2, filter was returning a list directly.

12:01.680 --> 12:03.680
In Python 3, it's returning an iterator.

12:03.680 --> 12:05.680
So I have to call the list function

12:05.680 --> 12:09.680
to get the same results as in case of the for loop.

12:09.680 --> 12:13.680
And even though the list function has some impact on the performance,

12:13.680 --> 12:16.680
it's negligible comparing to the time spent in the filter function.

12:16.680 --> 12:20.680
Yet, you can see that filter performs even slower than the for loop.

12:21.680 --> 12:22.680
Why does this happen?

12:22.680 --> 12:25.680
Well, the fact that filter is returning now an iterator

12:25.680 --> 12:29.680
is a clear sign that it's a wrong use case for this kind of function.

12:29.680 --> 12:33.680
So if you want to get the whole list as a result,

12:33.680 --> 12:35.680
it's better to use the list comprehension.

12:35.680 --> 12:39.680
It's around 75% times faster than the for loop,

12:39.680 --> 12:41.680
and at least for me, it looks more clear.

12:46.680 --> 12:48.680
When you want to execute a piece of code,

12:48.680 --> 12:51.680
but you are not sure if it will be successful.

12:51.680 --> 12:53.680
Maybe some variables are not set,

12:53.680 --> 12:56.680
like in this case, the class might be missing some attribute.

12:56.680 --> 12:58.680
So you want to protect yourself somehow.

12:58.680 --> 13:01.680
The first way you can do this is called look before you leave

13:01.680 --> 13:03.680
or ask for permissions.

13:03.680 --> 13:07.680
What it means is that you first check if the class has a specific attribute,

13:07.680 --> 13:09.680
and then you perform the operations.

13:09.680 --> 13:12.680
Usually, this checking is done with the if statement.

13:12.680 --> 13:14.680
However, there's different approach that you could use,

13:14.680 --> 13:16.680
and it's called back for forgiveness.

13:16.680 --> 13:19.680
So in this scenario, you perform the operation

13:19.680 --> 13:21.680
without checking the conditions first.

13:21.680 --> 13:24.680
But in case you expect that something might break,

13:24.680 --> 13:27.680
you wrap your code in a try except block,

13:27.680 --> 13:29.680
and you catch the exceptions that were raised.

13:29.680 --> 13:31.680
And as you can see in the simple example,

13:31.680 --> 13:34.680
begging for forgiveness is like three times faster.

13:34.680 --> 13:37.680
But it gets even better if you're checking for more conditions.

13:37.680 --> 13:40.680
So here we are checking if three attributes are present.

13:40.680 --> 13:43.680
And asking for permission is still slower,

13:43.680 --> 13:46.680
and now it's also getting more difficult to read.

13:46.680 --> 13:48.680
So following the back for forgiveness approach

13:48.680 --> 13:50.680
will result in a faster and more readable code.

13:50.680 --> 13:53.680
So we could say that asking for forgiveness

13:53.680 --> 13:56.680
instead of checking the permissions is always a better way.

13:56.680 --> 13:59.680
But we won't say that because it's not true.

13:59.680 --> 14:01.680
Exceptional handling is still quite expensive.

14:01.680 --> 14:04.680
So if the attribute is actually missing,

14:04.680 --> 14:08.680
then begging for forgiveness will be slower than asking for permissions.

14:08.680 --> 14:12.680
So as a rule of thumb, you can use the ask for permissions way

14:12.680 --> 14:15.680
if you know that it's very likely that the attribute will be missing,

14:15.680 --> 14:18.680
or there will be some other problems that you can predict.

14:18.680 --> 14:22.680
Otherwise, if you're expecting that your code will work in most of the times,

14:22.680 --> 14:28.680
try using try accept will result in a faster and quite often more readable code.

14:28.680 --> 14:31.680
So for example, if you're fetching some files from the internet,

14:31.680 --> 14:33.680
and you expect that everything will be fine

14:33.680 --> 14:35.680
unless there is no internet connection.

14:35.680 --> 14:37.680
So instead of checking if there is internet connection,

14:37.680 --> 14:39.680
if it's fast enough, if there are no timeouts,

14:39.680 --> 14:41.680
just go for the try accept.

14:41.680 --> 14:44.680
But then again, I strongly advise you to measure both solutions

14:44.680 --> 14:47.680
and see maybe in your case it will be different.

14:48.680 --> 14:52.680
So let's tackle another problem, the membership testing.

14:52.680 --> 14:56.680
So if you have a list and you want to check if it contains a specific element,

14:56.680 --> 14:58.680
you can use a for loop.

14:58.680 --> 15:01.680
But the problem is you are iterating over the whole list

15:01.680 --> 15:05.680
even though you're not really doing anything with all those elements.

15:05.680 --> 15:08.680
So you can replace the for loop with the in statement.

15:08.680 --> 15:12.680
It will check if a specific element belongs to a given set of data,

15:12.680 --> 15:15.680
and it will do this twice as fast.

15:15.680 --> 15:17.680
But there is still one big problem with this approach.

15:17.680 --> 15:21.680
The lookup time depends on where your element is located in that list.

15:21.680 --> 15:24.680
If it's at the beginning of the list, you're lucky and you will get it fast.

15:24.680 --> 15:27.680
If it's at the end of the list, you have to wait.

15:27.680 --> 15:30.680
So what would be really nice here if we had the data structure

15:30.680 --> 15:32.680
that would have a constant lookup time.

15:32.680 --> 15:36.680
And actually in Python we have, we have both sets and dictionary

15:36.680 --> 15:38.680
that have constant lookup time.

15:38.680 --> 15:41.680
So if we replace the list with a set,

15:41.680 --> 15:43.680
then the lookup time becomes faster,

15:43.680 --> 15:47.680
from just a few times faster to hundreds of thousand times faster.

15:47.680 --> 15:49.680
So where's the catch?

15:49.680 --> 15:52.680
Well, you pay some time to convert the list to a set.

15:52.680 --> 15:55.680
And in this scenario, converting this list to a set

15:55.680 --> 15:58.680
takes more time than any of the lookups in that list.

15:58.680 --> 16:00.680
So it doesn't really make sense.

16:00.680 --> 16:04.680
However, if you're checking membership of different elements,

16:04.680 --> 16:08.680
quite often it makes sense to first convert it to a set.

16:08.680 --> 16:11.680
So speaking of sets, they have another interesting feature.

16:11.680 --> 16:13.680
They don't contain duplicates.

16:13.680 --> 16:15.680
So basically if you have a list of elements

16:15.680 --> 16:17.680
and you want to remove the duplicates,

16:17.680 --> 16:21.680
the fastest way to do this is to convert this list to a set.

16:21.680 --> 16:24.680
But be aware that sets are not ordered.

16:24.680 --> 16:26.680
So if you need to preserve the order,

16:26.680 --> 16:31.680
take a look at the order dictionary from the collection module.

16:31.680 --> 16:33.680
So if you want to sort your list,

16:33.680 --> 16:37.680
you can either do this in place using the list.sort function,

16:37.680 --> 16:41.680
or you can call the sorted function that will create a new list.

16:41.680 --> 16:43.680
And unless you really need to have a new list,

16:43.680 --> 16:47.680
sorting in place will be like six times faster in this scenario.

16:47.680 --> 16:52.680
This is for one million of random numbers.

16:52.680 --> 16:56.680
If you want to perform the same operation on a large set of data,

16:56.680 --> 16:58.680
then you have two options.

16:58.680 --> 17:01.680
You can write a function that performs the operation

17:01.680 --> 17:04.680
and call this function 1,000 times.

17:04.680 --> 17:07.680
Or you can call a function that takes this set of data

17:07.680 --> 17:09.680
and performs the operation inside.

17:09.680 --> 17:12.680
And the second approach will be faster.

17:12.680 --> 17:16.680
So if you can in an easy way replace multiple calls to one function

17:16.680 --> 17:20.680
with just one function, then quite often it's a good idea.

17:22.680 --> 17:25.680
So what's the best way to check if a variable expression is true?

17:25.680 --> 17:28.680
Well, you can explicitly compare this variable to true,

17:28.680 --> 17:31.680
but in most cases you're adding additional redundancy.

17:31.680 --> 17:35.680
So you can simplify your condition to just if variable.

17:35.680 --> 17:39.680
And it will return true unless the variable is false,

17:39.680 --> 17:43.680
non-zero, empty string, empty list, or other false expression.

17:43.680 --> 17:47.680
And by doing that, your comparison gets faster by like 70%.

17:47.680 --> 17:50.680
And the same rule applies when checking for false.

17:50.680 --> 17:54.680
So the fastest way to do this is to use if not variable,

17:54.680 --> 17:58.680
unless you really need to distinguish false from, let's say,

17:58.680 --> 18:01.680
non or zero or other false values.

18:01.680 --> 18:04.680
It also applies to empty data structures.

18:04.680 --> 18:07.680
So simply doing if not a list

18:07.680 --> 18:10.680
will be almost three times faster

18:10.680 --> 18:13.680
than explicitly checking the length of a list.

18:17.680 --> 18:20.680
So let's take a look at different ways of defining functions in Python.

18:20.680 --> 18:24.680
The most common one is to create a function with def keyword.

18:24.680 --> 18:27.680
The other way is to declare an anonymous function with lambda.

18:27.680 --> 18:29.680
If you assign this lambda to a variable,

18:29.680 --> 18:33.680
it will act in the same way as the function created with a def keyword.

18:33.680 --> 18:36.680
And as you can see, they are both equally fast.

18:36.680 --> 18:40.680
Why? Because both versions do exactly the same thing.

18:40.680 --> 18:44.680
We can disassemble the code of both versions with the disk library,

18:44.680 --> 18:46.680
and we'll see that inside is the same code.

18:46.680 --> 18:48.680
So is there any difference?

18:48.680 --> 18:51.680
Well, if your function has more than one line, you can't use lambda.

18:51.680 --> 18:54.680
And you can't really put documentation inside of lambda.

18:55.680 --> 18:58.680
Also, if you have Pepeit enabled in your code editor,

18:58.680 --> 19:01.680
it will complain each time you try to assign lambda to a variable.

19:01.680 --> 19:03.680
And in his right,

19:03.680 --> 19:07.680
lambdas work really nice when you need a simple one-liner callback

19:07.680 --> 19:10.680
for your functions, especially for functions like filter, mabel, reduce.

19:10.680 --> 19:14.680
And there are also some quite few narrow use cases

19:14.680 --> 19:17.680
where it might be necessary to use lambda as a callback.

19:17.680 --> 19:20.680
So if you want to read more, you can check the link at the bottom.

19:20.680 --> 19:24.680
In any other case, I would definitely recommend to use that.

19:24.680 --> 19:27.680
It's much cleaner, you can document it properly,

19:27.680 --> 19:29.680
and the performance is exactly the same.

19:31.680 --> 19:34.680
So there are two ways how you can create an empty list.

19:34.680 --> 19:36.680
So you can either call a list function,

19:36.680 --> 19:38.680
or you can just use the list literal syntax.

19:38.680 --> 19:41.680
And as you can see, the literal syntax is faster.

19:41.680 --> 19:43.680
Why is it faster?

19:43.680 --> 19:46.680
Because if you call a function, Python first needs to resolve this function.

19:46.680 --> 19:49.680
And with the literal syntax, there is no overhead for that.

19:50.680 --> 19:53.680
And the exact same thing happens for creating a dictionary.

19:57.680 --> 20:00.680
Okay, I have two more examples that should be treated with quotient.

20:00.680 --> 20:03.680
Even though the code can run faster,

20:03.680 --> 20:06.680
I would not advise you to do this kind of optimization.

20:06.680 --> 20:10.680
So sometimes, even though you can squeeze some additional performance from your code,

20:10.680 --> 20:13.680
it doesn't mean that you should do this.

20:16.680 --> 20:18.680
So one thing is a variable assignment.

20:19.680 --> 20:22.680
If you have a bunch of variables that you need to assign,

20:22.680 --> 20:24.680
you can do this the normal sequential way,

20:24.680 --> 20:27.680
or you can go for this crazy parallel assignment.

20:27.680 --> 20:30.680
And I mean, you can gain some speed,

20:30.680 --> 20:33.680
but with this speed comes the hate of your colleagues

20:33.680 --> 20:35.680
that will be reading this code later.

20:35.680 --> 20:38.680
So in my opinion, it's not worth it.

20:39.680 --> 20:41.680
Okay, and another interesting property of Python

20:41.680 --> 20:43.680
is that the lookup for local variables

20:43.680 --> 20:46.680
is faster than the lookup for globals or buildings.

20:46.680 --> 20:50.680
So you can save some time if you store the reference to a building function

20:50.680 --> 20:53.680
or a global function in a local variable.

20:53.680 --> 20:56.680
So in this example, the only difference is on the line 3,

20:56.680 --> 21:01.680
where I'm storing the reference to the global append in a local append variable.

21:01.680 --> 21:05.680
And thanks to that, this function is like 35% faster.

21:05.680 --> 21:08.680
But then again, if you see this code for the first time,

21:08.680 --> 21:12.680
it's not very clear what it is supposed to do.

21:12.680 --> 21:15.680
It might be confusing to see this kind of append function

21:15.680 --> 21:19.680
because we are most used to see the list.append version.

21:22.680 --> 21:25.680
To sum up, there are different kind of optimizations.

21:25.680 --> 21:28.680
It's quite often about the speed, but not always.

21:28.680 --> 21:31.680
And there are also different levels of optimization.

21:31.680 --> 21:35.680
So sometimes if you cannot rewrite your whole application,

21:35.680 --> 21:38.680
maybe you can use a different approach.

21:38.680 --> 21:40.680
Even though the source code optimization

21:40.680 --> 21:43.680
is not the fastest way to optimize your code,

21:43.680 --> 21:45.680
those small improvements will add up.

21:45.680 --> 21:48.680
And the main advantage of it is cheap.

21:48.680 --> 21:53.680
So you can optimize the code at the moment of writing.

21:53.680 --> 21:56.680
You don't really need to rewrite something.

21:56.680 --> 21:58.680
And as long as you're writing idiomatic code

21:58.680 --> 22:00.680
and you don't reinvent the wheel

22:00.680 --> 22:04.680
but already use the existing functions and data structures in Python,

22:04.680 --> 22:07.680
then you're already doing it correctly.

22:07.680 --> 22:09.680
So be curious when you're coding.

22:09.680 --> 22:13.680
If you think that the different code structure can be faster,

22:13.680 --> 22:15.680
you can quickly check it with the time it,

22:15.680 --> 22:18.680
and then you can improve it.

22:18.680 --> 22:20.680
All right, my name is Sebastian Witowski, and I work at CERN.

22:20.680 --> 22:22.680
So if you guys want to talk about physics,

22:22.680 --> 22:25.680
then you're probably on the wrong conference.

22:25.680 --> 22:27.680
But if you want to talk about Python,

22:27.680 --> 22:29.680
you can catch me somewhere on the corridor.

22:29.680 --> 22:30.680
Thank you.

22:30.680 --> 22:40.680
All right, brilliant.

22:40.680 --> 22:43.680
We have about two minutes for questions.

22:43.680 --> 22:45.680
Sebastian, if you're happy to take one or two questions,

22:45.680 --> 22:46.680
shall we have them?

22:46.680 --> 22:51.680
Fantastic. Who's got a question? You, sir.

22:51.680 --> 22:53.680
Awesome talk. I have a quick question.

22:53.680 --> 22:57.680
You showed us some profilers, code profilers.

22:57.680 --> 23:03.680
Do you have any preference, any favorites?

23:03.680 --> 23:06.680
It really depends what you want to profile.

23:06.680 --> 23:09.680
Because if you care about the speed, then the basic ones are fine.

23:09.680 --> 23:11.680
But if you want to profile the memory users,

23:11.680 --> 23:13.680
then you might need to use different profilers.

23:13.680 --> 23:17.680
So it really depends what you want to profile.

23:17.680 --> 23:23.680
Any other questions? Yep.

23:23.680 --> 23:25.680
Do you have any recommendation on books or source

23:25.680 --> 23:28.680
where we can find best practices regarding this

23:28.680 --> 23:31.680
idiomatic Python?

23:31.680 --> 23:34.680
Not from the top of my head,

23:34.680 --> 23:38.680
but, well, definitely there is some guides

23:38.680 --> 23:40.680
on the official Python documentation.

23:40.680 --> 23:43.680
But also, for me, it's a lot of Googling

23:43.680 --> 23:46.680
for best practices, also reading a lot of Stack Overflow.

23:46.680 --> 23:51.680
There are some books, but I can't give you the names right now.

23:51.680 --> 23:53.680
Any more questions?

23:53.680 --> 23:55.680
Yes?

23:55.680 --> 23:57.680
Was that you sticking your hand up, sir,

23:57.680 --> 23:59.680
or just explaining something excitedly?

23:59.680 --> 24:01.680
Pretty really not a question.

24:01.680 --> 24:03.680
Any more questions? No?

24:03.680 --> 24:05.680
In that case, let's thank our speaker for a fantastic talking.

24:05.680 --> 24:07.680
Nice to ask you.

