start	end	text
0	5000	Almost all microprocessors we have today started off with the idea of one processor.
5000	9000	It would be the CPU, the one chip that is running everything.
9000	12000	And although multiprocessor submissions are quite common these days,
12000	15000	each processor in the system is basically a copy of the other one.
15000	19000	There are all processors that were designed to run by themselves, but we just have more than one.
19000	25000	However, there is a processor that from its initial design was not intended to be there by itself.
25000	29000	It was designed from the outset to be part of a cluster of processors.
29000	32000	Yep, we're going to talk about the Transputer.
32000	35000	Now in this video we're going to talk about the Transputer in its history,
35000	40000	and also have a look at this weird little development box you can see in the background of shots here.
40000	45000	And towards the end of the video we'll talk about what might be one of Atari's least successful computers ever.
45000	49000	In fact, I'm pretty sure it is the least successful thing they've ever made.
49000	52000	And I'm even concluding a Jaguar in its CD player.
52000	54000	In fact, why don't we all play a little game together?
54000	56000	You have a guess at what you think the machine might be?
56000	61000	Make a comment in the section below, and at the end of the video you can see whether you guessed the right one or not.
61000	64000	Control-Alt-Risk, we already know you know the answer.
64000	70000	Now, as I mentioned in the introduction, most CPUs design with the idea that they're the one CPU.
70000	74000	When the design is created, they're not thinking about other processors, or at least they weren't initially.
74000	77000	These days, it's a little different.
77000	81000	When the Transputer was created, they were thinking about parallel processing from the start.
81000	85000	There was never going to be a system that had just one of these things.
85000	88000	And that makes the Transputer pretty unique.
88000	92000	And in a little bit, we're going to look at some of the architectural features that ended up in the Transputer.
92000	95000	So it can be this fairly unique design goal.
95000	100000	But first, we're going to look at the circumstances that caused the Transputer to come into existence in the first place.
100000	106000	In 1978, the UK's then Labour government was devising its industrial strategy for the IT sector.
106000	112000	And between that and the National Enterprise Board, they landed on the idea that they should create a new microprocessor design company.
112000	117000	Thus, a MOS was established by Ian Barron, Dick Petrus, and Paul Schroeder.
117000	120000	Those last two names should be familiar for anyone who knows about MOSTech,
120000	126000	because, well, they just sold MOSTech for basically a small fortune, and decided to get involved in this.
126000	132000	Now, the strategy the National Enterprise Board had was initially that they'd start a joint venture where they'd be manufacturing stuff in the US,
132000	138000	where it was already done, and then transfer that technology to the UK and set up manufacturing there.
138000	141000	And by the time that manufacturing was established and ready,
141000	146000	well then, MOS would have a chip design ready to be manufactured in the UK.
146000	151000	And the idea is, after that, this whole thing would have bootstrapped the technology industry in Bristol,
151000	155000	which it did actually manage to do, and is still there to this day, doing stuff.
155000	158000	So that's the why, guess we'd best get onto the whoo-hoo.
158000	161000	Now, why Ian MOS were getting on with manufacturing static RAM,
161000	164000	which eventually they managed to capture 60% of the market for,
164000	167000	they hired themselves Robert Milne and David May,
167000	170000	and not Brian May, like my friend thinks that they did,
170000	175000	and surprisingly the globally renowned astrophysicist Brian May, an occasional guitarist,
175000	178000	was not particularly useful when it came to processor design.
178000	181000	He's more of a stereo photography kind of a guy,
181000	185000	and of course guitarist for Smile and Queen, we probably shouldn't forget to mention that,
185000	187000	and of course patron saint of all badgers.
187000	192000	Barron had a vision to create a microprocessor explicitly for parallel computing,
192000	195000	and as in fact, the person who came up with the name Transputer.
195000	200000	The idea being that the transistor was pretty common and ubiquitous for making all logic work,
200000	205000	and well, he wanted this chip to be equally as ubiquitous and common as the transistor was,
205000	208000	but for computing, hence, Transputer.
208000	214000	Now, you might be surprised to know that Milne and May didn't jump straight into designing the processor itself.
214000	217000	Where they started is with the programming language Occum.
217000	222000	Before we get into discussing Occum though, I should mention that today's video is sponsored by PCBWay.
222000	226000	A company whose primary occupation seems to be sponsoring YouTube channels,
226000	229000	but when they're not doing that, they also make printed circuit boards,
229000	231000	they do surface mount type stuff for your pick and place.
231000	234000	They'll also do CNCing, freely printing.
234000	239000	Basically, if you need to make it, they can do quite a lot of it for you and send it to you in the post.
240000	245000	Occum was named after 13th slash 14th century razor blade manufacturer William of Occum,
245000	249000	and now, having just made that joke, I realize a number of you are reaching for the comments section saying
249000	251000	he didn't make razor blade.
251000	255000	I know, it's not that kind of razor.
255000	257000	Anyway, quickly back to the language.
257000	263000	Now, both Occum's creators had quite a lot of experience with creating or working on compilers before,
263000	266000	with David May having done a fair bit of work on BCPL,
266000	269000	and Tony Hoor, of course, being famous for creating alcohol 60,
269000	272000	and the quicksort algorithm, and basically a whole bunch of things.
272000	275000	Actually, I believe he's Sir Tony Hoor these days.
275000	279000	Now, this language wasn't going to be like any of the others they'd come up with before,
279000	285000	because the idea of Occum was to create a language that you could develop parallel programs in from the ground up.
285000	288000	It wasn't an idea that's bolted into the language later on.
288000	293000	And you'll see this from one of Occum's major two keywords, par and seek.
293000	296000	Each block of code would need to be labeled with either par,
296000	298000	for you can run all these instructions in parallel,
298000	301000	or seek these instructions must run in sequence.
301000	304000	There is also a third keyword like this, alt,
304000	307000	which means that if it's ready to do one thing, you can do that.
307000	310000	If it's ready to do another thing, either hardware is ready, you can do that.
310000	314000	It's all about listening on a channel and waiting for stuff to be ready on the channel,
314000	316000	and then you can do some work.
316000	320000	And the blocks after that can either be in sequence or in parallel.
320000	324000	Mostly they're in sequences, you're waiting for something to do some work upon.
324000	328000	Now, I should probably mention channels, because this is one of the key ideas in Occum as well.
328000	331000	In Occum, you don't have shared variables.
331000	337000	Two things that run in parallel cannot access the same memory or variable, if you will, at the same time.
337000	341000	Now, if you've done any development with anything that uses threads or does any parallel stuff,
341000	343000	you know that not all languages are like that.
343000	346000	But the reason both May and Hall were trying to avoid shared variables
346000	349000	is they knew that that's where deadlock lies.
349000	351000	If a parallel program is going to go wrong,
351000	357000	it's usually around something failing to lock a variable properly before it uses it or Reddit it.
357000	361000	Or a bunch of things fighting over access and deadlocking the whole system.
361000	367000	So they had a pretty good plan to avoid that, which is just not to let that be a feature of the language.
367000	371000	But obviously, information does need to be passed between bits of code executing in parallel,
371000	373000	and this is where the channel's idea comes from.
373000	377000	Essentially a message-passing system where the thing that owns the variable
377000	383000	can indeed pass that data along a channel to another process running in parallel so that it can use it.
383000	385000	And that's why that alt keyword was handy.
385000	388000	You'd have a bunch of things in parallel computing things and shoving them down a channel.
388000	393000	When you hit the alt statement, as soon as you can think of like a first-pass-the-post type system,
393000	395000	whichever channel delivers something first,
395000	401000	well, that alt statement means the blocker code attached to whatever channel is the first one ready gets to execute.
401000	405000	After having developed the language back, they then created the compiler for Ockham.
405000	409000	Now, you may be thinking, wait a minute, didn't he skip over to step when he designed the transputer?
409000	410000	And the answer is no.
410000	416000	I know it's quite common to go, designer CPU, making compiler for various languages, forcehead CPU.
416000	418000	But they deliberately went the other way round.
418000	424000	They created the language, then they created the compiler to get it down into the smallest number of instructions they thought were viable.
424000	428000	And then when they knew what instructions they'd need their processor to execute,
428000	431000	well, that's when they started work on the processor.
431000	433000	Now, in a few talks, David May has given.
433000	437000	He stated a few times that someone shouldn't be allowed to design a CPU
437000	441000	unless first they've had to create a compiler or two for somebody else's.
441000	448000	And the reason that lies behind that is a lot of CPUs that were created around the time or before David was working on the transputer
448000	452000	had some pretty, let's say, bat poop instruction sets.
452000	457000	Lots of these earlier CPU designs had an awful lot of instructions, and I mean a lot.
457000	461000	Basically, instruction almost for anything you might want to do.
461000	467000	And the reason things ended up that way is the CPU designers are not really thinking about compilers at this point.
467000	470000	They're thinking about people who are writing programs in Assembler.
470000	476000	Essentially, they're trying to make life easier for human beings who are going to use CPU instructions almost directly.
476000	480000	Problem is, by the time we get to languages that use a compiler,
480000	486000	well, most of the instructions a human being might reach for on a CPU are not the ones that a compiler's going to,
486000	489000	because they're a lot less optimal in some cases.
489000	495000	With Sysc Processes, this gets to the point where with Vax, you've almost got if, then, else in hardware.
495000	501000	And as most programs start to be written in a higher level language that's compiled rather than Assembler,
501000	506000	some of the very infrequently used CPU operations don't get used at all.
506000	515000	In fact, there's a famous study that went on to show that most applications use a relatively small subset of the instruction set on the CPU.
515000	518000	And this is what gives rise to the risk movement.
518000	526000	The reason I'm talking about all of this is to show you just what a good idea it was to go from language, compiler, then CPU,
526000	529000	because you know which instructions you need to implement.
529000	533000	You don't need to implement a CPU with thousands of instructions.
533000	537000	And this is why Occam and the transmitter are so interlinked with each other.
537000	541000	Occam was created to target the thing that became the transmitter,
541000	545000	and the transmitter was built to implement what Occam's compiler outputted.
545000	550000	And design features from the language also ended up essentially getting implemented in hardware.
550000	552000	We'll come to that later on.
552000	556000	Right, now we talked a lot about how we got to having transporters and why.
556000	560000	We've not actually talked a lot about the hardware yet, so let's do so.
560000	564000	And the first actual hardware became available in 1984.
564000	569000	And to say the transmitter is an odd fish was kind of underselling it, really.
569000	572000	Now, let's start with just the processing type bits.
572000	578000	First of all, it uses micro-encoded instructions, like a CISC processor, but it's not a CISC processor.
578000	586000	And most of those micro-coded instructions, well, they run in one clock cycle, very much unlike most CISC processors.
586000	590000	Then we come onto the fact that it's a stack processor, but it's a stack processor with registers,
590000	594000	which is a thing that normal CPUs have, and stack processors generally don't.
594000	598000	And then we come to the un-processor-like bits that are on the transmitter chip.
598000	603000	See, the transmitter includes its own built-in RAM, and of course, RAM controller as well.
603000	608000	And I don't mean that it had some cache memory, I mean, this is actual RAM-RAM.
608000	614000	The idea being that you could run a number of transporters together and you wouldn't have to connect up external memory.
614000	618000	I mean, obviously, when people started building machines, yeah, sure, they connected up external memory,
618000	621000	but they didn't have to, and not every dev board did.
621000	624000	Now, there's not a lot of RAM on the first implementation of this,
624000	630000	so the first-ever hardware, it's a 16-bit processor, comes with a grand total of 2 kilobytes of memory,
630000	635000	which is not a lot of RAM, but it's a heck of a lot of RAM for on the processor,
635000	640000	particularly in 1984, when my whole computer at the time had 32K of memory.
640000	645000	And that initial hardware chip was very quickly followed up by one with 4K of memory on board.
645000	649000	And it also added some breakpoint debugging support directly into the chip as well,
649000	651000	which made life a heck of a lot easier.
651000	658000	Now, this chip was very quickly followed up in 1985 by a 32-bit version, known as the T414,
658000	664000	and again, that version shipped with 2K built-in, and then there was a 4K version of it that followed later on.
664000	671000	Now, these early 16-bit and 32-bit chips, they were the ones that the first system builders started to get their hands on.
671000	674000	Now, so far, I've only talked about these things like they were normal processors,
674000	677000	but there's one big architectural feature I've not mentioned yet,
677000	683000	and if you know anything about the transputer, you're probably wondering why, because it is its most notable feature.
683000	687000	But I did foreshadow it when I was talking about channels in Occam earlier and said,
687000	690000	we'll come back to this later, well, we're coming back to it.
690000	696000	Transputer chips had a link feature that was just there to connect one transputer chip to another transputer chip.
696000	701000	The very early ones came with two links, but later on, by the time we get into the 32-bit ones,
701000	706000	we've got four links coming out of each chip, so you can build a grid array of transputer chips.
706000	709000	Now, this makes total sense to the chip designed for parallel computing.
709000	714000	After all, you can't just have one, because if you do, nothing's happening in parallel, is it?
714000	718000	And this is where we get the modelling in hardware of that channel system we were talking about before,
718000	722000	as the channels are essentially the inter-chip links, if you like.
722000	725000	And because that hardware element comes directly from the language we're using,
725000	728000	well, we get to make a pretty efficient use of them.
728000	733000	As your programmers are already thinking about having chips waiting on messages through channels,
733000	738000	and can see where the bottlenecks in their code, and therefore, when implemented in hardware, in the hardware would be.
738000	745000	Now, this whole chip link thing, as we end up with more and more and even more powerful transputer chips, all in one grid.
745000	751000	Well, four soon becomes not enough, and you eventually end up with ImOS actually implementing the first ever on-silicon switch.
751000	757000	And using that means that a transputer doesn't have to root to another transputer through a number of transputers to get to it.
757000	762000	The message can be switched to the right transputer using the silicon switch.
762000	766000	I mean, this is an idea that Ethernet really embraced and ran with later on.
766000	773000	But let's get back to the next major development of the transputer line, and that's with the T8 that gets introduced in 1987.
773000	780000	Now, this is a pretty big leap forward for transputer kind, because we get an extended instruction set, which provides floating point support.
780000	788000	Now, up until this point, if any computer had done any floating point maps, it'd done it to its own, well, standard unique to that computer, more or less.
788000	796000	And the reason why ImOS had waited up until this point to introduce floating point support was that finally it had been standardized by the IEEE.
796000	805000	This meant that floating point maps would work the same way on any machine implementing that IEEE floating point specification, which was a pretty big deal.
805000	814000	Now, first of all, ImOS and making these chips to go into the high-performance parallel computing space, which is, you know, mostly scientists and engineers, that sort of thing, universities.
814000	817000	So, they're being used for pretty mass-intensive tasks.
817000	823000	So, not having floating point, well, that was not as helpful as you might think.
823000	835000	But also, you needed a well-understood floating point standard that the mathematicians involved in this stuff knew understood and could get what the limitations were and whether what they were doing would fit into it well.
835000	843000	Now, this is where they actually took a bit of departure on how they went about implementing a standard compared to others, as ImOS decided to go full formal methods.
844000	849000	This means that it did take ImOS a fair chunk more time to do their IEEE implementation.
849000	857000	In fact, it added about six months on to it, is what they estimate, but it meant, come the end of it, they had a provably correct implementation of the IEEE standard.
857000	870000	And when you're selling a very high-ended expensive system to scientists, it helps to be able to tell them that it will definitely get its mass right, because there were other CPU manufacturers that did not get floating point right.
870000	873000	Yes, Intel, we're looking at you.
873000	879000	Yes, famously when Intel released the Pentium, they actually got a bug in their floating point division instruction.
879000	882000	Yeah, didn't actually divide things correctly.
882000	885000	Bit of a bummer when you write software that relies on that, really.
885000	888000	There were actually software work-arounds to these problems.
888000	891000	It wasn't so bugged that you couldn't work around it.
891000	894000	But it did mean that some poor seller actually did have to work around it.
894000	899000	And when you're a scientist who's buying a new expensive computer to do whatever it is you're going to do with it,
899000	902000	you kind of want it just to get its mass right.
902000	907000	Now, around the time the T8 was introduced, there was an excitement around the transputer had really built up.
907000	912000	And this is like its key commercial period where it's really leading its field at this point.
912000	918000	It must have been taking transputer-based systems to segraphs and really showing off what the machine could do,
918000	924000	to the point where some people didn't believe that the little box they were seeing the few transputers in was actually doing what they were seeing on-screen
924000	928000	and assumed that somewhere they must be hiding a massive mini-system somewhere.
928000	936000	It's in the same year in 1986 that Edinburgh University puts in their first experimental system using transputers to see what they can do.
936000	941000	This was regarded as a little system, only having 40 transputer chips in it.
941000	946000	Admittedly, that's more processing power than all the machines I'd ever seen at that point in my life added together.
946000	949000	But still, as supercomputers go relatively small,
949000	954000	but they were suitably impressed with it and installed a much larger system based on the T800
954000	961000	and using a microfax as the file server, because transputer systems didn't really do file IO particularly.
961000	968000	And that was completed and installed by 1987 and was effectively one of the most powerful supercomputers in the UK at that time.
968000	970000	Or, more or less anywhere, to be honest.
970000	973000	In fact, Edinburgh still is a major centre of supercomputing.
973000	977000	And this transputer-based system, which peaked at around 400 processors,
977000	986000	that stayed into its original form until about 1992, where it was reconfigured to add a spark-based machine from Sun to act as the host machine,
986000	989000	and then finally was decommissioned in 1994.
989000	995000	So, they got seven years' use of it, which for a supercomputer at that time, yeah, that was a good long lifespan.
995000	999000	Now, you may have noticed me using the phrase host system.
999000	1006000	And that brings me onto one of the odd things about the world of transputers and also helps explain this machine I've got here.
1006000	1012000	Yes, this is a transputer-based system, but you might notice that it doesn't look a lot like other computers.
1012000	1018000	In fact, if I turn it round to the rear, you'll see a number of pretty important ports missing.
1018000	1025000	There's nowhere for a keyboard to go in, or attach a hard drive, or a floppy drive, or in fact any IO at all.
1025000	1027000	Now, there's a couple of decent reasons for that.
1027000	1034000	And the first thing comes down to the design feature of the transputer itself, in that it does not have a memory management unit,
1034000	1041000	or support for virtual memory at all, which for almost every high-end operating system at the time was a big no-no.
1041000	1046000	You were not going to port Unix to this thing, or even Windows NT for that matter.
1046000	1052000	Now, there was eventually a Unix-like operating system, if not Unix developed for the transputer,
1052000	1057000	but we'll come back to that later, and even that does involve a host system of some description.
1057000	1060000	Again, we'll get into the details of that one in a bit.
1060000	1064000	So, without an operating system readily portable, if you'd wanted to run this like a normal computer,
1064000	1070000	well, you would have needed to produce your own operating system, and then all your own drivers for every bit of hardware you want to plug into it.
1070000	1075000	And that starts consuming a lot of resource for, well, not much purpose.
1075000	1079000	Because no one was going to use a transputer as their usual workstation.
1079000	1083000	You're not going to word process or email on this thing. This is for supercomputing.
1083000	1088000	You don't care if it doesn't run a word processor. You want to get it to do an awful lot of maths.
1088000	1093000	Most transputer systems sold were kind of like the one in front of me here, a development system
1093000	1096000	that hangs off another system as the host computer.
1096000	1103000	The host computer would be the terminal, do all your file I owe, and they would just communicate with the transputer system
1103000	1108000	like a CPU accelerator almost, only it didn't, you know, run the same instruction set.
1108000	1111000	Kind of like a modern GPU, if you will.
1111000	1117000	In fact, this is what this ICER cards for. This would go in the host IBM PC, the software would run on there,
1117000	1120000	and this ribbon cable would connect it up to the transputer box.
1120000	1125000	You would then run your software under DOS, for example, in this particular case.
1125000	1129000	And that would provide you with your basic I owe in and out of the transputer system.
1129000	1132000	So that's where you'd see your terminal where you command it to do stuff.
1132000	1137000	And the transputer system will be able to request files and stuff back through that cable.
1137000	1142000	It would then use the application, pull it from the DOS filing system, return the file back to the transputer.
1142000	1145000	And file writes work in the same way, just in reverse.
1145000	1150000	Now, if you're wondering how the transputer system boots up, well, ordinarily when a transputer hits power on,
1150000	1156000	it just sits there and waits for messages to be passed over those inter-process links we talked about earlier.
1156000	1159000	It essentially just sits there and does absolutely nothing.
1159000	1163000	However, there is a pin on the transputer, and if you short it to ground,
1163000	1171000	well, instead of powering up in its normal state, the transputer chip will power up and read in a chunk of software from a ROM.
1171000	1175000	What's read in from the ROM gets dumped on the chip stack, and then it starts executing it,
1175000	1179000	and it will message all the other processors to essentially wake them up and get them to do something.
1179000	1184000	So inside this rack here is a ROM that the one boot transputer reads,
1184000	1187000	and it contains enough software so the transputer system sits there,
1187000	1192000	waiting to be told what to do via that ribbon cable that's linked to the PC.
1192000	1195000	Now, this isn't the only transputer development system for the IBM PC.
1195000	1198000	You would actually get ICER cards that had a couple of transputers on,
1198000	1204000	and essentially a chip that would sit there, talk to the ICER bus, pretend to be some form of serial interface,
1204000	1208000	and the PC would communicate with the transputers in more or less the same way it does with an external system.
1208000	1212000	Just it all happens to be on one card and there's a lot less transputers in there.
1212000	1217000	Now, this box is a little different in that there is also a graphics card in here.
1217000	1222000	This particular development system was used by a friend's dad for his medical physics PhD,
1222000	1228000	so the graphics card was used to display the output of what was being computed on the transputer system,
1228000	1232000	in a resolution and color depth that your average IBM PC was going to get nowhere near,
1232000	1236000	hence the graphics card costing nearly as much as the whole transputer system put together.
1236000	1238000	This also feels like a good chance to say,
1238000	1240000	ah, thanks for letting us have the system, Theo, very kind of you.
1240000	1244000	I should also mention, you're not going to see me power this thing up in the video,
1244000	1248000	apart from the fact that I don't have the software to run on the IBM PC side of things,
1248000	1251000	so it would be an extremely uneventful thing to watch.
1251000	1255000	This thing has also sat in the cupboard for a very long time since Theo's dad finished his PhD,
1255000	1259000	so I don't just want to switch it on and, you know, set fire to it.
1259000	1263000	And while I have checked out that a lot of the resistors, you know, resist the right amount
1263000	1267000	and capacitors still capacitor enough for it and haven't leaked out the smelly fish juice,
1267000	1271000	there is still a lot for me to check over on this machine before I apply power to it,
1271000	1275000	including the PSU itself, which I haven't got round to looking over,
1275000	1278000	or in fact testing any of the output voltages off first,
1278000	1280000	so there's a lot of work to be done before it can just be powered up.
1280000	1284000	I also still need to find the software from somewhere, so it, you know, does something.
1284000	1289000	But the kind of machine you see here represents the majority case of usage of the transputer,
1289000	1291000	back at that point in time.
1291000	1294000	People used it like a big parallel CPU accelerator,
1294000	1297000	you could bolt onto the end of another computer and, you know,
1297000	1301000	get it to do some serious computation with the sort of thing that your little host machine
1301000	1304000	couldn't really manage, even if your host machine was, you know,
1304000	1307000	a fairly decent sunwork station.
1307000	1311000	By the way, if anyone out there watching this video happens to have a copy of the software
1311000	1314000	for the transputer side, well, the PC side of the transputer system,
1314000	1318000	please do get in contact, because I am having no luck finding this stuff.
1318000	1321000	Commercially speaking, it must have been doing pretty darn well
1321000	1324000	with its range of chips it had available,
1324000	1327000	even from when it first got some chips out there into the market.
1327000	1331000	But being state-owned meant that shortly into its existence,
1331000	1333000	when there was a change of government,
1333000	1339000	that political party was ideologically opposed to the idea of the state owning basically anything.
1339000	1343000	So for most of its existence, the government had been looking for someone to sell it off to,
1343000	1346000	and eventually it did find a company to sell it to,
1346000	1350000	and it was probably not the most suitable company in the world.
1350000	1357000	It was Fawn EMI, a company at that point that can best be described as a sprawling basket case of an organization.
1357000	1362000	It seemed to have a finger in everything it made surprisingly rubbish record players.
1362000	1364000	I know we owned one.
1364000	1366000	Video recorders, TVs.
1366000	1368000	It was even into games publishing.
1368000	1373000	Fire EMI, it was a fairly big record label with a healthy film and TV business.
1373000	1376000	It owned part of ITV's Thames television.
1376000	1379000	It had TV and film studios.
1379000	1382000	It owned a big chunk of a cinema chain.
1382000	1384000	It was even invested into HBO,
1384000	1387000	and for some reason also owned a chain of bingo halls.
1387000	1388000	Of course it did.
1388000	1393000	And now it was the proud owner of a supercomputing processor manufacturing company.
1393000	1395000	Yeah, that fitted well.
1395000	1399000	I mean, you definitely can see the parallels between designing supercomputing chips,
1399000	1402000	and owning the winter gardens in Blackpool, for example.
1402000	1407000	Now, none of you will be surprised to hear that a forced wedding between Fawn and Imos
1407000	1409000	did not work out well for Imos.
1409000	1413000	It kind of struggled to get the funding it needed to do what it needed to do,
1413000	1415000	in order to keep the transputer line moving forwards.
1415000	1417000	And for all the time that Fawn owned them,
1417000	1420000	they seemed to be trying to find someone else to sell them to.
1420000	1426000	And eventually, they sold them to the sprawling basket case of a French organization that was Thompson.
1426000	1428000	Of course, Thompson quickly went bust,
1428000	1432000	ended up selling that bit of itself off to ST Microelectronics,
1432000	1435000	where finally the transputer did actually get some use,
1435000	1438000	unfortunately in set-top boxes of all things.
1438000	1440000	Now, during this period of being owned by Fawn,
1440000	1442000	the government did try and help Imos out,
1442000	1446000	and the transputer, and created the Transputer Support Center in Chaffield,
1446000	1450000	that was there to support people developing applications and uses for the transputer.
1450000	1454000	And for a brief while, they did a pretty good job.
1454000	1457000	The problem wasn't so much finding applications for the transputer,
1457000	1461000	it was that Imos' underfunding when it was being owned by Fawn
1461000	1464000	stopped them from really keeping ahead of where they needed to be,
1464000	1467000	to keep the individual power of each chip up where it needs to be,
1467000	1470000	and also hitting scales and costs that would be useful.
1470000	1474000	But during its time, the transputer was commercially very successful
1474000	1476000	and did achieve what it intended to do.
1476000	1481000	It brought parallel computing to a much wider audience in a useful way.
1481000	1486000	I wouldn't want you to come away from this video feeling that the transputer was a failed idea,
1486000	1488000	because it really, really wasn't.
1488000	1490000	It's just under the ownership of Fawn,
1490000	1493000	it just didn't receive the kind of money it should have done
1493000	1498000	because Fawn was busy circling the drain and turning into an absolute basket case of a company.
1498000	1501000	And then, unfortunately, Imos was then sold to another basket case,
1501000	1503000	doing exactly the same thing.
1503000	1506000	By the time ST Microelectronics got their hands on it,
1506000	1511000	well, it was a little too late and costly to get back into the high-performance computer space with it.
1511000	1515000	But ST did base a number of products on the transputer,
1515000	1519000	and he had a nice second life in set-top boxes and there's microcontrollers.
1519000	1521000	Which to be fair, was ST's wheelhouse.
1521000	1525000	Now, I'm going to end this video talking about one of the, well,
1525000	1528000	oddest moments of the transputer's history, or at least to me.
1528000	1533000	Remember I mentioned before that there was a Unix-like operating system for it?
1533000	1537000	Well, we're going to discuss that, and the Atari Transputer Workstation.
1537000	1541000	Which is, of course, the answer to the question I posed at the beginning of the video of,
1541000	1544000	what do you think Atari's least successful computer product is?
1544000	1548000	Hands up, how many of you had actually heard of the Atari Transputer Workstation?
1548000	1551000	I mean, if you had, you could probably guess that this was the answer,
1551000	1553000	given that this is a video about transputers.
1553000	1557000	So Atari, the people responsible for the ST in the 2600,
1557000	1561000	decided they would make a high-end workstation based on the transputer,
1561000	1566000	because no brand screams high-performance workstation like Atari.
1566000	1571000	Yeah, this must be Atari's, like, most obscure product, the Transputer Workstation,
1571000	1575000	and probably the one that sold the least quantity of anything they ever made.
1575000	1578000	And this is the company that brought us the Jaguar.
1578000	1582000	And more impressively, the Jaguar CD add-on.
1582000	1585000	Because what a failed console really needs is an add-on,
1585000	1588000	even if you did get armoured to chanks in to help with the design work.
1588000	1591000	Now, this story begins with Dr. Tim King,
1591000	1593000	a name that some of you will probably recognise,
1593000	1597000	and a few of you apparently know based on what you said in the comment section.
1597000	1601000	He worked for Metacomco, the people who did the operating system for the Amiga,
1601000	1607000	and when he left it, he started a new company with the aim to make a Unix-like operating system for the transputer.
1607000	1612000	Now, I say Unix-like, and that's because he was going to implement the POSIX standard for it,
1612000	1615000	so you could compile and run Unix software for it.
1615000	1620000	But it couldn't be Unix, because there's no MMU in the transputer.
1620000	1622000	It doesn't do memory management,
1622000	1627000	so you couldn't have a full Unix operating system on there with all the memory protection.
1627000	1632000	Now, that's not as important as it might sound for making a Unix-like operating system,
1632000	1636000	because thanks to the transputer being a stack-based system with stack registers,
1636000	1640000	not being able to do memory protection the way that Unix normally would with the MMU
1640000	1642000	is not as big a killer as you might think.
1642000	1646000	We weren't going to create a, you know, pre-OS10 Apple Mac here.
1646000	1651000	Applications would have to go out of their way to mess with the memory space of another application.
1651000	1655000	It isn't just a case of forgetting to put a null byte on the end of a string,
1655000	1659000	and all look, the word processor somehow overrope the operating system.
1659000	1662000	And if one task happens to hug an entire CPU,
1662000	1665000	well, in a transputer system, that's not really such a big deal
1665000	1668000	as it would be in, say, a single processor Mac.
1668000	1671000	Also, another transputer chip could just tell it to stop.
1671000	1675000	So, you know, process management is a real thing in this operating system.
1675000	1677000	So, the idea was to create this operating system.
1677000	1678000	He lost.
1678000	1683000	There'd be Unix-like, or Unix-like enough, and running on the transputer.
1683000	1686000	Of course, then they decided that they should split part of the company off
1686000	1690000	to start looking at building hardware that this could run on.
1690000	1694000	But as almost everyone who worked for the company was former Metacon Co. people,
1694000	1699000	they had contacts in both Commodore and Atari, as they'd worked on stuff for both of them in the past.
1699000	1705000	And one of the things they initially tried was making a hardware card to go inside the Amiga 2000.
1705000	1709000	So, the Amiga 2000 would act as a boot system, help bring up the card,
1709000	1712000	he lost would run on there, and IO would be handled by the Amiga.
1712000	1717000	Now, it seems Commodore did what Commodore does and just randomly lose interest in this,
1717000	1719000	so they started talking to Atari.
1719000	1722000	And that's where we get the Atari Transputer Workstation.
1722000	1725000	And it works on a very similar idea.
1725000	1729000	What we essentially have is an Atari ST Mega that acts much like a host system does
1729000	1731000	for all the other ways we run the transputer.
1731000	1735000	It does the IO, it provides it with floppy and hard drive controller,
1735000	1737000	and is what boots he lost.
1737000	1740000	Once he lost his booted and running on the transputers,
1740000	1744000	the 68000 on the Mega ST board just becomes an IO controller at this point.
1744000	1749000	Now, you may have noticed that at no point have I mentioned the Atari ST's graphics chips getting used.
1749000	1755000	And that's because the Transputer Workstation's got its own graphics card that's driven from the transputer side of things.
1755000	1758000	And that's known as the Blossom Board.
1758000	1763000	Now, this meant that Helix could run X-Window, so regular X-Window software would compile and work on it.
1763000	1769000	And the Blossom Board gives us the kind of resolution you'd expect on a high-end Unix workstation of the time.
1769000	1774000	So we've got 1280 by 690 at 16 colors, palette 4096.
1774000	1781000	We've got 1024 by 768 with 256 colors, and that's driven out of a palette of 16.7 million.
1781000	1788000	And then we've got modes that are more in your lower-end workstation than PC range, so we can do 640 by 480.
1788000	1791000	And again, that's limited to 256 colors at once.
1791000	1798000	And then we have a 512 by 480, in which we can use the whole 16.7 million colors at once.
1798000	1803000	There are also a number of sort of hardware acceleration features in there that X can make use of,
1803000	1807000	so we've got a Blitter that allows us to move sort of tiles and windows around and other things.
1807000	1814000	Now, oddly, for a transputer-based workstation, as it comes, it chips with one whole transputer chip,
1814000	1818000	which for a system designed to do stuff in parallel is less than ideal,
1818000	1822000	but the motherboard does have four slots to add what they refer to as farm cards,
1822000	1825000	which is a card containing four additional transputer chips,
1825000	1832000	which means that with a fully-expanded system, you could have 17 transputers in there, which is, you know, not bad.
1832000	1839000	And it actually has one of those InMOS switch chips we talked about earlier, so the internship performance was actually pretty good.
1839000	1845000	Originally Atari were going to call this thing the Abac, but then decided that they call it the Atari Transputer Workstation,
1845000	1849000	as that gave people a clue as to what it was and why you might want it.
1849000	1856000	And Atari can't have been expecting a lot of people to buy one of these, I mean, it's a very high-end system.
1856000	1861000	But you've got to think that Atari were hoping that they were going to sell more than 350 of them,
1861000	1869000	because that's the total number that were produced, and apparently somewhere between 50 to 100 of those were prototype machines as well.
1869000	1873000	Now, I am told this machine was actually designed in Sheffield, the city that I live in,
1873000	1879000	but I can't find any hard documenting evidence to say, yeah, 100% that was true,
1879000	1887000	but given that the transputer support centre was based in Sheffield, and Department of Computer Science Sheffield was one of the leading research groups for the transputer,
1887000	1890000	yeah, I'm not going to die of shock if that was true.
1890000	1895000	Now, one of the interesting spin-offs from the whole Transputer Workstation thing was the blossom graphics card,
1895000	1902000	apparently the team that were responsible for that, then would later go on to work on the Atari Jaguar and properly kill Atari this time.
1902000	1911000	But I think the Atari Transputer Workstation is probably the rarest of all Atari computers, because even the Falcon outsold this thing, and the Stacey.
1911000	1918000	Now, with all that said, would I like to get my hands on one? Yeah, of course, I'd absolutely love to. Who wouldn't want to?
1918000	1924000	Well, I suppose people who only want to play games on their Atari, because there were no games released for the Atari Transputer Workstation,
1924000	1932000	although you could actually get the Mega ST that was built in as the IO processor to actually boot TOS and then run whatever game you wanted to on it.
1932000	1937000	It's just, it's a heck of a lot of electricity to run a standard ST game.
1937000	1942000	If you've got all the way to the end, I would like to say thank you very much for watching.
1942000	1949000	I would also like to give a huge thank you to FIO, one of Sheffield's more talented instrument makers, musical instruments that is, not scientific,
1949000	1953000	for giving me the transputer system to set this whole video off on course.
1953000	1958000	If you enjoyed the video, please click that thumbs up buttony thing that YouTube's given us to indicate that that's a fact.
1958000	1965000	And as ever, please feel free to chat away in the comments, because it is quite nice to fully nerd out with all of you.
1965000	1973000	And if you'd like to help the channel out, please click the subscribe button, because that way YouTube actually believes that it's worth telling people that the videos exist.
