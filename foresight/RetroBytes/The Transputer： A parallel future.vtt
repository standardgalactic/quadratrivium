WEBVTT

00:00.000 --> 00:05.000
Almost all microprocessors we have today started off with the idea of one processor.

00:05.000 --> 00:09.000
It would be the CPU, the one chip that is running everything.

00:09.000 --> 00:12.000
And although multiprocessor submissions are quite common these days,

00:12.000 --> 00:15.000
each processor in the system is basically a copy of the other one.

00:15.000 --> 00:19.000
There are all processors that were designed to run by themselves, but we just have more than one.

00:19.000 --> 00:25.000
However, there is a processor that from its initial design was not intended to be there by itself.

00:25.000 --> 00:29.000
It was designed from the outset to be part of a cluster of processors.

00:29.000 --> 00:32.000
Yep, we're going to talk about the Transputer.

00:32.000 --> 00:35.000
Now in this video we're going to talk about the Transputer in its history,

00:35.000 --> 00:40.000
and also have a look at this weird little development box you can see in the background of shots here.

00:40.000 --> 00:45.000
And towards the end of the video we'll talk about what might be one of Atari's least successful computers ever.

00:45.000 --> 00:49.000
In fact, I'm pretty sure it is the least successful thing they've ever made.

00:49.000 --> 00:52.000
And I'm even concluding a Jaguar in its CD player.

00:52.000 --> 00:54.000
In fact, why don't we all play a little game together?

00:54.000 --> 00:56.000
You have a guess at what you think the machine might be?

00:56.000 --> 01:01.000
Make a comment in the section below, and at the end of the video you can see whether you guessed the right one or not.

01:01.000 --> 01:04.000
Control-Alt-Risk, we already know you know the answer.

01:04.000 --> 01:10.000
Now, as I mentioned in the introduction, most CPUs design with the idea that they're the one CPU.

01:10.000 --> 01:14.000
When the design is created, they're not thinking about other processors, or at least they weren't initially.

01:14.000 --> 01:17.000
These days, it's a little different.

01:17.000 --> 01:21.000
When the Transputer was created, they were thinking about parallel processing from the start.

01:21.000 --> 01:25.000
There was never going to be a system that had just one of these things.

01:25.000 --> 01:28.000
And that makes the Transputer pretty unique.

01:28.000 --> 01:32.000
And in a little bit, we're going to look at some of the architectural features that ended up in the Transputer.

01:32.000 --> 01:35.000
So it can be this fairly unique design goal.

01:35.000 --> 01:40.000
But first, we're going to look at the circumstances that caused the Transputer to come into existence in the first place.

01:40.000 --> 01:46.000
In 1978, the UK's then Labour government was devising its industrial strategy for the IT sector.

01:46.000 --> 01:52.000
And between that and the National Enterprise Board, they landed on the idea that they should create a new microprocessor design company.

01:52.000 --> 01:57.000
Thus, a MOS was established by Ian Barron, Dick Petrus, and Paul Schroeder.

01:57.000 --> 02:00.000
Those last two names should be familiar for anyone who knows about MOSTech,

02:00.000 --> 02:06.000
because, well, they just sold MOSTech for basically a small fortune, and decided to get involved in this.

02:06.000 --> 02:12.000
Now, the strategy the National Enterprise Board had was initially that they'd start a joint venture where they'd be manufacturing stuff in the US,

02:12.000 --> 02:18.000
where it was already done, and then transfer that technology to the UK and set up manufacturing there.

02:18.000 --> 02:21.000
And by the time that manufacturing was established and ready,

02:21.000 --> 02:26.000
well then, MOS would have a chip design ready to be manufactured in the UK.

02:26.000 --> 02:31.000
And the idea is, after that, this whole thing would have bootstrapped the technology industry in Bristol,

02:31.000 --> 02:35.000
which it did actually manage to do, and is still there to this day, doing stuff.

02:35.000 --> 02:38.000
So that's the why, guess we'd best get onto the whoo-hoo.

02:38.000 --> 02:41.000
Now, why Ian MOS were getting on with manufacturing static RAM,

02:41.000 --> 02:44.000
which eventually they managed to capture 60% of the market for,

02:44.000 --> 02:47.000
they hired themselves Robert Milne and David May,

02:47.000 --> 02:50.000
and not Brian May, like my friend thinks that they did,

02:50.000 --> 02:55.000
and surprisingly the globally renowned astrophysicist Brian May, an occasional guitarist,

02:55.000 --> 02:58.000
was not particularly useful when it came to processor design.

02:58.000 --> 03:01.000
He's more of a stereo photography kind of a guy,

03:01.000 --> 03:05.000
and of course guitarist for Smile and Queen, we probably shouldn't forget to mention that,

03:05.000 --> 03:07.000
and of course patron saint of all badgers.

03:07.000 --> 03:12.000
Barron had a vision to create a microprocessor explicitly for parallel computing,

03:12.000 --> 03:15.000
and as in fact, the person who came up with the name Transputer.

03:15.000 --> 03:20.000
The idea being that the transistor was pretty common and ubiquitous for making all logic work,

03:20.000 --> 03:25.000
and well, he wanted this chip to be equally as ubiquitous and common as the transistor was,

03:25.000 --> 03:28.000
but for computing, hence, Transputer.

03:28.000 --> 03:34.000
Now, you might be surprised to know that Milne and May didn't jump straight into designing the processor itself.

03:34.000 --> 03:37.000
Where they started is with the programming language Occum.

03:37.000 --> 03:42.000
Before we get into discussing Occum though, I should mention that today's video is sponsored by PCBWay.

03:42.000 --> 03:46.000
A company whose primary occupation seems to be sponsoring YouTube channels,

03:46.000 --> 03:49.000
but when they're not doing that, they also make printed circuit boards,

03:49.000 --> 03:51.000
they do surface mount type stuff for your pick and place.

03:51.000 --> 03:54.000
They'll also do CNCing, freely printing.

03:54.000 --> 03:59.000
Basically, if you need to make it, they can do quite a lot of it for you and send it to you in the post.

04:00.000 --> 04:05.000
Occum was named after 13th slash 14th century razor blade manufacturer William of Occum,

04:05.000 --> 04:09.000
and now, having just made that joke, I realize a number of you are reaching for the comments section saying

04:09.000 --> 04:11.000
he didn't make razor blade.

04:11.000 --> 04:15.000
I know, it's not that kind of razor.

04:15.000 --> 04:17.000
Anyway, quickly back to the language.

04:17.000 --> 04:23.000
Now, both Occum's creators had quite a lot of experience with creating or working on compilers before,

04:23.000 --> 04:26.000
with David May having done a fair bit of work on BCPL,

04:26.000 --> 04:29.000
and Tony Hoor, of course, being famous for creating alcohol 60,

04:29.000 --> 04:32.000
and the quicksort algorithm, and basically a whole bunch of things.

04:32.000 --> 04:35.000
Actually, I believe he's Sir Tony Hoor these days.

04:35.000 --> 04:39.000
Now, this language wasn't going to be like any of the others they'd come up with before,

04:39.000 --> 04:45.000
because the idea of Occum was to create a language that you could develop parallel programs in from the ground up.

04:45.000 --> 04:48.000
It wasn't an idea that's bolted into the language later on.

04:48.000 --> 04:53.000
And you'll see this from one of Occum's major two keywords, par and seek.

04:53.000 --> 04:56.000
Each block of code would need to be labeled with either par,

04:56.000 --> 04:58.000
for you can run all these instructions in parallel,

04:58.000 --> 05:01.000
or seek these instructions must run in sequence.

05:01.000 --> 05:04.000
There is also a third keyword like this, alt,

05:04.000 --> 05:07.000
which means that if it's ready to do one thing, you can do that.

05:07.000 --> 05:10.000
If it's ready to do another thing, either hardware is ready, you can do that.

05:10.000 --> 05:14.000
It's all about listening on a channel and waiting for stuff to be ready on the channel,

05:14.000 --> 05:16.000
and then you can do some work.

05:16.000 --> 05:20.000
And the blocks after that can either be in sequence or in parallel.

05:20.000 --> 05:24.000
Mostly they're in sequences, you're waiting for something to do some work upon.

05:24.000 --> 05:28.000
Now, I should probably mention channels, because this is one of the key ideas in Occum as well.

05:28.000 --> 05:31.000
In Occum, you don't have shared variables.

05:31.000 --> 05:37.000
Two things that run in parallel cannot access the same memory or variable, if you will, at the same time.

05:37.000 --> 05:41.000
Now, if you've done any development with anything that uses threads or does any parallel stuff,

05:41.000 --> 05:43.000
you know that not all languages are like that.

05:43.000 --> 05:46.000
But the reason both May and Hall were trying to avoid shared variables

05:46.000 --> 05:49.000
is they knew that that's where deadlock lies.

05:49.000 --> 05:51.000
If a parallel program is going to go wrong,

05:51.000 --> 05:57.000
it's usually around something failing to lock a variable properly before it uses it or Reddit it.

05:57.000 --> 06:01.000
Or a bunch of things fighting over access and deadlocking the whole system.

06:01.000 --> 06:07.000
So they had a pretty good plan to avoid that, which is just not to let that be a feature of the language.

06:07.000 --> 06:11.000
But obviously, information does need to be passed between bits of code executing in parallel,

06:11.000 --> 06:13.000
and this is where the channel's idea comes from.

06:13.000 --> 06:17.000
Essentially a message-passing system where the thing that owns the variable

06:17.000 --> 06:23.000
can indeed pass that data along a channel to another process running in parallel so that it can use it.

06:23.000 --> 06:25.000
And that's why that alt keyword was handy.

06:25.000 --> 06:28.000
You'd have a bunch of things in parallel computing things and shoving them down a channel.

06:28.000 --> 06:33.000
When you hit the alt statement, as soon as you can think of like a first-pass-the-post type system,

06:33.000 --> 06:35.000
whichever channel delivers something first,

06:35.000 --> 06:41.000
well, that alt statement means the blocker code attached to whatever channel is the first one ready gets to execute.

06:41.000 --> 06:45.000
After having developed the language back, they then created the compiler for Ockham.

06:45.000 --> 06:49.000
Now, you may be thinking, wait a minute, didn't he skip over to step when he designed the transputer?

06:49.000 --> 06:50.000
And the answer is no.

06:50.000 --> 06:56.000
I know it's quite common to go, designer CPU, making compiler for various languages, forcehead CPU.

06:56.000 --> 06:58.000
But they deliberately went the other way round.

06:58.000 --> 07:04.000
They created the language, then they created the compiler to get it down into the smallest number of instructions they thought were viable.

07:04.000 --> 07:08.000
And then when they knew what instructions they'd need their processor to execute,

07:08.000 --> 07:11.000
well, that's when they started work on the processor.

07:11.000 --> 07:13.000
Now, in a few talks, David May has given.

07:13.000 --> 07:17.000
He stated a few times that someone shouldn't be allowed to design a CPU

07:17.000 --> 07:21.000
unless first they've had to create a compiler or two for somebody else's.

07:21.000 --> 07:28.000
And the reason that lies behind that is a lot of CPUs that were created around the time or before David was working on the transputer

07:28.000 --> 07:32.000
had some pretty, let's say, bat poop instruction sets.

07:32.000 --> 07:37.000
Lots of these earlier CPU designs had an awful lot of instructions, and I mean a lot.

07:37.000 --> 07:41.000
Basically, instruction almost for anything you might want to do.

07:41.000 --> 07:47.000
And the reason things ended up that way is the CPU designers are not really thinking about compilers at this point.

07:47.000 --> 07:50.000
They're thinking about people who are writing programs in Assembler.

07:50.000 --> 07:56.000
Essentially, they're trying to make life easier for human beings who are going to use CPU instructions almost directly.

07:56.000 --> 08:00.000
Problem is, by the time we get to languages that use a compiler,

08:00.000 --> 08:06.000
well, most of the instructions a human being might reach for on a CPU are not the ones that a compiler's going to,

08:06.000 --> 08:09.000
because they're a lot less optimal in some cases.

08:09.000 --> 08:15.000
With Sysc Processes, this gets to the point where with Vax, you've almost got if, then, else in hardware.

08:15.000 --> 08:21.000
And as most programs start to be written in a higher level language that's compiled rather than Assembler,

08:21.000 --> 08:26.000
some of the very infrequently used CPU operations don't get used at all.

08:26.000 --> 08:35.000
In fact, there's a famous study that went on to show that most applications use a relatively small subset of the instruction set on the CPU.

08:35.000 --> 08:38.000
And this is what gives rise to the risk movement.

08:38.000 --> 08:46.000
The reason I'm talking about all of this is to show you just what a good idea it was to go from language, compiler, then CPU,

08:46.000 --> 08:49.000
because you know which instructions you need to implement.

08:49.000 --> 08:53.000
You don't need to implement a CPU with thousands of instructions.

08:53.000 --> 08:57.000
And this is why Occam and the transmitter are so interlinked with each other.

08:57.000 --> 09:01.000
Occam was created to target the thing that became the transmitter,

09:01.000 --> 09:05.000
and the transmitter was built to implement what Occam's compiler outputted.

09:05.000 --> 09:10.000
And design features from the language also ended up essentially getting implemented in hardware.

09:10.000 --> 09:12.000
We'll come to that later on.

09:12.000 --> 09:16.000
Right, now we talked a lot about how we got to having transporters and why.

09:16.000 --> 09:20.000
We've not actually talked a lot about the hardware yet, so let's do so.

09:20.000 --> 09:24.000
And the first actual hardware became available in 1984.

09:24.000 --> 09:29.000
And to say the transmitter is an odd fish was kind of underselling it, really.

09:29.000 --> 09:32.000
Now, let's start with just the processing type bits.

09:32.000 --> 09:38.000
First of all, it uses micro-encoded instructions, like a CISC processor, but it's not a CISC processor.

09:38.000 --> 09:46.000
And most of those micro-coded instructions, well, they run in one clock cycle, very much unlike most CISC processors.

09:46.000 --> 09:50.000
Then we come onto the fact that it's a stack processor, but it's a stack processor with registers,

09:50.000 --> 09:54.000
which is a thing that normal CPUs have, and stack processors generally don't.

09:54.000 --> 09:58.000
And then we come to the un-processor-like bits that are on the transmitter chip.

09:58.000 --> 10:03.000
See, the transmitter includes its own built-in RAM, and of course, RAM controller as well.

10:03.000 --> 10:08.000
And I don't mean that it had some cache memory, I mean, this is actual RAM-RAM.

10:08.000 --> 10:14.000
The idea being that you could run a number of transporters together and you wouldn't have to connect up external memory.

10:14.000 --> 10:18.000
I mean, obviously, when people started building machines, yeah, sure, they connected up external memory,

10:18.000 --> 10:21.000
but they didn't have to, and not every dev board did.

10:21.000 --> 10:24.000
Now, there's not a lot of RAM on the first implementation of this,

10:24.000 --> 10:30.000
so the first-ever hardware, it's a 16-bit processor, comes with a grand total of 2 kilobytes of memory,

10:30.000 --> 10:35.000
which is not a lot of RAM, but it's a heck of a lot of RAM for on the processor,

10:35.000 --> 10:40.000
particularly in 1984, when my whole computer at the time had 32K of memory.

10:40.000 --> 10:45.000
And that initial hardware chip was very quickly followed up by one with 4K of memory on board.

10:45.000 --> 10:49.000
And it also added some breakpoint debugging support directly into the chip as well,

10:49.000 --> 10:51.000
which made life a heck of a lot easier.

10:51.000 --> 10:58.000
Now, this chip was very quickly followed up in 1985 by a 32-bit version, known as the T414,

10:58.000 --> 11:04.000
and again, that version shipped with 2K built-in, and then there was a 4K version of it that followed later on.

11:04.000 --> 11:11.000
Now, these early 16-bit and 32-bit chips, they were the ones that the first system builders started to get their hands on.

11:11.000 --> 11:14.000
Now, so far, I've only talked about these things like they were normal processors,

11:14.000 --> 11:17.000
but there's one big architectural feature I've not mentioned yet,

11:17.000 --> 11:23.000
and if you know anything about the transputer, you're probably wondering why, because it is its most notable feature.

11:23.000 --> 11:27.000
But I did foreshadow it when I was talking about channels in Occam earlier and said,

11:27.000 --> 11:30.000
we'll come back to this later, well, we're coming back to it.

11:30.000 --> 11:36.000
Transputer chips had a link feature that was just there to connect one transputer chip to another transputer chip.

11:36.000 --> 11:41.000
The very early ones came with two links, but later on, by the time we get into the 32-bit ones,

11:41.000 --> 11:46.000
we've got four links coming out of each chip, so you can build a grid array of transputer chips.

11:46.000 --> 11:49.000
Now, this makes total sense to the chip designed for parallel computing.

11:49.000 --> 11:54.000
After all, you can't just have one, because if you do, nothing's happening in parallel, is it?

11:54.000 --> 11:58.000
And this is where we get the modelling in hardware of that channel system we were talking about before,

11:58.000 --> 12:02.000
as the channels are essentially the inter-chip links, if you like.

12:02.000 --> 12:05.000
And because that hardware element comes directly from the language we're using,

12:05.000 --> 12:08.000
well, we get to make a pretty efficient use of them.

12:08.000 --> 12:13.000
As your programmers are already thinking about having chips waiting on messages through channels,

12:13.000 --> 12:18.000
and can see where the bottlenecks in their code, and therefore, when implemented in hardware, in the hardware would be.

12:18.000 --> 12:25.000
Now, this whole chip link thing, as we end up with more and more and even more powerful transputer chips, all in one grid.

12:25.000 --> 12:31.000
Well, four soon becomes not enough, and you eventually end up with ImOS actually implementing the first ever on-silicon switch.

12:31.000 --> 12:37.000
And using that means that a transputer doesn't have to root to another transputer through a number of transputers to get to it.

12:37.000 --> 12:42.000
The message can be switched to the right transputer using the silicon switch.

12:42.000 --> 12:46.000
I mean, this is an idea that Ethernet really embraced and ran with later on.

12:46.000 --> 12:53.000
But let's get back to the next major development of the transputer line, and that's with the T8 that gets introduced in 1987.

12:53.000 --> 13:00.000
Now, this is a pretty big leap forward for transputer kind, because we get an extended instruction set, which provides floating point support.

13:00.000 --> 13:08.000
Now, up until this point, if any computer had done any floating point maps, it'd done it to its own, well, standard unique to that computer, more or less.

13:08.000 --> 13:16.000
And the reason why ImOS had waited up until this point to introduce floating point support was that finally it had been standardized by the IEEE.

13:16.000 --> 13:25.000
This meant that floating point maps would work the same way on any machine implementing that IEEE floating point specification, which was a pretty big deal.

13:25.000 --> 13:34.000
Now, first of all, ImOS and making these chips to go into the high-performance parallel computing space, which is, you know, mostly scientists and engineers, that sort of thing, universities.

13:34.000 --> 13:37.000
So, they're being used for pretty mass-intensive tasks.

13:37.000 --> 13:43.000
So, not having floating point, well, that was not as helpful as you might think.

13:43.000 --> 13:55.000
But also, you needed a well-understood floating point standard that the mathematicians involved in this stuff knew understood and could get what the limitations were and whether what they were doing would fit into it well.

13:55.000 --> 14:03.000
Now, this is where they actually took a bit of departure on how they went about implementing a standard compared to others, as ImOS decided to go full formal methods.

14:04.000 --> 14:09.000
This means that it did take ImOS a fair chunk more time to do their IEEE implementation.

14:09.000 --> 14:17.000
In fact, it added about six months on to it, is what they estimate, but it meant, come the end of it, they had a provably correct implementation of the IEEE standard.

14:17.000 --> 14:30.000
And when you're selling a very high-ended expensive system to scientists, it helps to be able to tell them that it will definitely get its mass right, because there were other CPU manufacturers that did not get floating point right.

14:30.000 --> 14:33.000
Yes, Intel, we're looking at you.

14:33.000 --> 14:39.000
Yes, famously when Intel released the Pentium, they actually got a bug in their floating point division instruction.

14:39.000 --> 14:42.000
Yeah, didn't actually divide things correctly.

14:42.000 --> 14:45.000
Bit of a bummer when you write software that relies on that, really.

14:45.000 --> 14:48.000
There were actually software work-arounds to these problems.

14:48.000 --> 14:51.000
It wasn't so bugged that you couldn't work around it.

14:51.000 --> 14:54.000
But it did mean that some poor seller actually did have to work around it.

14:54.000 --> 14:59.000
And when you're a scientist who's buying a new expensive computer to do whatever it is you're going to do with it,

14:59.000 --> 15:02.000
you kind of want it just to get its mass right.

15:02.000 --> 15:07.000
Now, around the time the T8 was introduced, there was an excitement around the transputer had really built up.

15:07.000 --> 15:12.000
And this is like its key commercial period where it's really leading its field at this point.

15:12.000 --> 15:18.000
It must have been taking transputer-based systems to segraphs and really showing off what the machine could do,

15:18.000 --> 15:24.000
to the point where some people didn't believe that the little box they were seeing the few transputers in was actually doing what they were seeing on-screen

15:24.000 --> 15:28.000
and assumed that somewhere they must be hiding a massive mini-system somewhere.

15:28.000 --> 15:36.000
It's in the same year in 1986 that Edinburgh University puts in their first experimental system using transputers to see what they can do.

15:36.000 --> 15:41.000
This was regarded as a little system, only having 40 transputer chips in it.

15:41.000 --> 15:46.000
Admittedly, that's more processing power than all the machines I'd ever seen at that point in my life added together.

15:46.000 --> 15:49.000
But still, as supercomputers go relatively small,

15:49.000 --> 15:54.000
but they were suitably impressed with it and installed a much larger system based on the T800

15:54.000 --> 16:01.000
and using a microfax as the file server, because transputer systems didn't really do file IO particularly.

16:01.000 --> 16:08.000
And that was completed and installed by 1987 and was effectively one of the most powerful supercomputers in the UK at that time.

16:08.000 --> 16:10.000
Or, more or less anywhere, to be honest.

16:10.000 --> 16:13.000
In fact, Edinburgh still is a major centre of supercomputing.

16:13.000 --> 16:17.000
And this transputer-based system, which peaked at around 400 processors,

16:17.000 --> 16:26.000
that stayed into its original form until about 1992, where it was reconfigured to add a spark-based machine from Sun to act as the host machine,

16:26.000 --> 16:29.000
and then finally was decommissioned in 1994.

16:29.000 --> 16:35.000
So, they got seven years' use of it, which for a supercomputer at that time, yeah, that was a good long lifespan.

16:35.000 --> 16:39.000
Now, you may have noticed me using the phrase host system.

16:39.000 --> 16:46.000
And that brings me onto one of the odd things about the world of transputers and also helps explain this machine I've got here.

16:46.000 --> 16:52.000
Yes, this is a transputer-based system, but you might notice that it doesn't look a lot like other computers.

16:52.000 --> 16:58.000
In fact, if I turn it round to the rear, you'll see a number of pretty important ports missing.

16:58.000 --> 17:05.000
There's nowhere for a keyboard to go in, or attach a hard drive, or a floppy drive, or in fact any IO at all.

17:05.000 --> 17:07.000
Now, there's a couple of decent reasons for that.

17:07.000 --> 17:14.000
And the first thing comes down to the design feature of the transputer itself, in that it does not have a memory management unit,

17:14.000 --> 17:21.000
or support for virtual memory at all, which for almost every high-end operating system at the time was a big no-no.

17:21.000 --> 17:26.000
You were not going to port Unix to this thing, or even Windows NT for that matter.

17:26.000 --> 17:32.000
Now, there was eventually a Unix-like operating system, if not Unix developed for the transputer,

17:32.000 --> 17:37.000
but we'll come back to that later, and even that does involve a host system of some description.

17:37.000 --> 17:40.000
Again, we'll get into the details of that one in a bit.

17:40.000 --> 17:44.000
So, without an operating system readily portable, if you'd wanted to run this like a normal computer,

17:44.000 --> 17:50.000
well, you would have needed to produce your own operating system, and then all your own drivers for every bit of hardware you want to plug into it.

17:50.000 --> 17:55.000
And that starts consuming a lot of resource for, well, not much purpose.

17:55.000 --> 17:59.000
Because no one was going to use a transputer as their usual workstation.

17:59.000 --> 18:03.000
You're not going to word process or email on this thing. This is for supercomputing.

18:03.000 --> 18:08.000
You don't care if it doesn't run a word processor. You want to get it to do an awful lot of maths.

18:08.000 --> 18:13.000
Most transputer systems sold were kind of like the one in front of me here, a development system

18:13.000 --> 18:16.000
that hangs off another system as the host computer.

18:16.000 --> 18:23.000
The host computer would be the terminal, do all your file I owe, and they would just communicate with the transputer system

18:23.000 --> 18:28.000
like a CPU accelerator almost, only it didn't, you know, run the same instruction set.

18:28.000 --> 18:31.000
Kind of like a modern GPU, if you will.

18:31.000 --> 18:37.000
In fact, this is what this ICER cards for. This would go in the host IBM PC, the software would run on there,

18:37.000 --> 18:40.000
and this ribbon cable would connect it up to the transputer box.

18:40.000 --> 18:45.000
You would then run your software under DOS, for example, in this particular case.

18:45.000 --> 18:49.000
And that would provide you with your basic I owe in and out of the transputer system.

18:49.000 --> 18:52.000
So that's where you'd see your terminal where you command it to do stuff.

18:52.000 --> 18:57.000
And the transputer system will be able to request files and stuff back through that cable.

18:57.000 --> 19:02.000
It would then use the application, pull it from the DOS filing system, return the file back to the transputer.

19:02.000 --> 19:05.000
And file writes work in the same way, just in reverse.

19:05.000 --> 19:10.000
Now, if you're wondering how the transputer system boots up, well, ordinarily when a transputer hits power on,

19:10.000 --> 19:16.000
it just sits there and waits for messages to be passed over those inter-process links we talked about earlier.

19:16.000 --> 19:19.000
It essentially just sits there and does absolutely nothing.

19:19.000 --> 19:23.000
However, there is a pin on the transputer, and if you short it to ground,

19:23.000 --> 19:31.000
well, instead of powering up in its normal state, the transputer chip will power up and read in a chunk of software from a ROM.

19:31.000 --> 19:35.000
What's read in from the ROM gets dumped on the chip stack, and then it starts executing it,

19:35.000 --> 19:39.000
and it will message all the other processors to essentially wake them up and get them to do something.

19:39.000 --> 19:44.000
So inside this rack here is a ROM that the one boot transputer reads,

19:44.000 --> 19:47.000
and it contains enough software so the transputer system sits there,

19:47.000 --> 19:52.000
waiting to be told what to do via that ribbon cable that's linked to the PC.

19:52.000 --> 19:55.000
Now, this isn't the only transputer development system for the IBM PC.

19:55.000 --> 19:58.000
You would actually get ICER cards that had a couple of transputers on,

19:58.000 --> 20:04.000
and essentially a chip that would sit there, talk to the ICER bus, pretend to be some form of serial interface,

20:04.000 --> 20:08.000
and the PC would communicate with the transputers in more or less the same way it does with an external system.

20:08.000 --> 20:12.000
Just it all happens to be on one card and there's a lot less transputers in there.

20:12.000 --> 20:17.000
Now, this box is a little different in that there is also a graphics card in here.

20:17.000 --> 20:22.000
This particular development system was used by a friend's dad for his medical physics PhD,

20:22.000 --> 20:28.000
so the graphics card was used to display the output of what was being computed on the transputer system,

20:28.000 --> 20:32.000
in a resolution and color depth that your average IBM PC was going to get nowhere near,

20:32.000 --> 20:36.000
hence the graphics card costing nearly as much as the whole transputer system put together.

20:36.000 --> 20:38.000
This also feels like a good chance to say,

20:38.000 --> 20:40.000
ah, thanks for letting us have the system, Theo, very kind of you.

20:40.000 --> 20:44.000
I should also mention, you're not going to see me power this thing up in the video,

20:44.000 --> 20:48.000
apart from the fact that I don't have the software to run on the IBM PC side of things,

20:48.000 --> 20:51.000
so it would be an extremely uneventful thing to watch.

20:51.000 --> 20:55.000
This thing has also sat in the cupboard for a very long time since Theo's dad finished his PhD,

20:55.000 --> 20:59.000
so I don't just want to switch it on and, you know, set fire to it.

20:59.000 --> 21:03.000
And while I have checked out that a lot of the resistors, you know, resist the right amount

21:03.000 --> 21:07.000
and capacitors still capacitor enough for it and haven't leaked out the smelly fish juice,

21:07.000 --> 21:11.000
there is still a lot for me to check over on this machine before I apply power to it,

21:11.000 --> 21:15.000
including the PSU itself, which I haven't got round to looking over,

21:15.000 --> 21:18.000
or in fact testing any of the output voltages off first,

21:18.000 --> 21:20.000
so there's a lot of work to be done before it can just be powered up.

21:20.000 --> 21:24.000
I also still need to find the software from somewhere, so it, you know, does something.

21:24.000 --> 21:29.000
But the kind of machine you see here represents the majority case of usage of the transputer,

21:29.000 --> 21:31.000
back at that point in time.

21:31.000 --> 21:34.000
People used it like a big parallel CPU accelerator,

21:34.000 --> 21:37.000
you could bolt onto the end of another computer and, you know,

21:37.000 --> 21:41.000
get it to do some serious computation with the sort of thing that your little host machine

21:41.000 --> 21:44.000
couldn't really manage, even if your host machine was, you know,

21:44.000 --> 21:47.000
a fairly decent sunwork station.

21:47.000 --> 21:51.000
By the way, if anyone out there watching this video happens to have a copy of the software

21:51.000 --> 21:54.000
for the transputer side, well, the PC side of the transputer system,

21:54.000 --> 21:58.000
please do get in contact, because I am having no luck finding this stuff.

21:58.000 --> 22:01.000
Commercially speaking, it must have been doing pretty darn well

22:01.000 --> 22:04.000
with its range of chips it had available,

22:04.000 --> 22:07.000
even from when it first got some chips out there into the market.

22:07.000 --> 22:11.000
But being state-owned meant that shortly into its existence,

22:11.000 --> 22:13.000
when there was a change of government,

22:13.000 --> 22:19.000
that political party was ideologically opposed to the idea of the state owning basically anything.

22:19.000 --> 22:23.000
So for most of its existence, the government had been looking for someone to sell it off to,

22:23.000 --> 22:26.000
and eventually it did find a company to sell it to,

22:26.000 --> 22:30.000
and it was probably not the most suitable company in the world.

22:30.000 --> 22:37.000
It was Fawn EMI, a company at that point that can best be described as a sprawling basket case of an organization.

22:37.000 --> 22:42.000
It seemed to have a finger in everything it made surprisingly rubbish record players.

22:42.000 --> 22:44.000
I know we owned one.

22:44.000 --> 22:46.000
Video recorders, TVs.

22:46.000 --> 22:48.000
It was even into games publishing.

22:48.000 --> 22:53.000
Fire EMI, it was a fairly big record label with a healthy film and TV business.

22:53.000 --> 22:56.000
It owned part of ITV's Thames television.

22:56.000 --> 22:59.000
It had TV and film studios.

22:59.000 --> 23:02.000
It owned a big chunk of a cinema chain.

23:02.000 --> 23:04.000
It was even invested into HBO,

23:04.000 --> 23:07.000
and for some reason also owned a chain of bingo halls.

23:07.000 --> 23:08.000
Of course it did.

23:08.000 --> 23:13.000
And now it was the proud owner of a supercomputing processor manufacturing company.

23:13.000 --> 23:15.000
Yeah, that fitted well.

23:15.000 --> 23:19.000
I mean, you definitely can see the parallels between designing supercomputing chips,

23:19.000 --> 23:22.000
and owning the winter gardens in Blackpool, for example.

23:22.000 --> 23:27.000
Now, none of you will be surprised to hear that a forced wedding between Fawn and Imos

23:27.000 --> 23:29.000
did not work out well for Imos.

23:29.000 --> 23:33.000
It kind of struggled to get the funding it needed to do what it needed to do,

23:33.000 --> 23:35.000
in order to keep the transputer line moving forwards.

23:35.000 --> 23:37.000
And for all the time that Fawn owned them,

23:37.000 --> 23:40.000
they seemed to be trying to find someone else to sell them to.

23:40.000 --> 23:46.000
And eventually, they sold them to the sprawling basket case of a French organization that was Thompson.

23:46.000 --> 23:48.000
Of course, Thompson quickly went bust,

23:48.000 --> 23:52.000
ended up selling that bit of itself off to ST Microelectronics,

23:52.000 --> 23:55.000
where finally the transputer did actually get some use,

23:55.000 --> 23:58.000
unfortunately in set-top boxes of all things.

23:58.000 --> 24:00.000
Now, during this period of being owned by Fawn,

24:00.000 --> 24:02.000
the government did try and help Imos out,

24:02.000 --> 24:06.000
and the transputer, and created the Transputer Support Center in Chaffield,

24:06.000 --> 24:10.000
that was there to support people developing applications and uses for the transputer.

24:10.000 --> 24:14.000
And for a brief while, they did a pretty good job.

24:14.000 --> 24:17.000
The problem wasn't so much finding applications for the transputer,

24:17.000 --> 24:21.000
it was that Imos' underfunding when it was being owned by Fawn

24:21.000 --> 24:24.000
stopped them from really keeping ahead of where they needed to be,

24:24.000 --> 24:27.000
to keep the individual power of each chip up where it needs to be,

24:27.000 --> 24:30.000
and also hitting scales and costs that would be useful.

24:30.000 --> 24:34.000
But during its time, the transputer was commercially very successful

24:34.000 --> 24:36.000
and did achieve what it intended to do.

24:36.000 --> 24:41.000
It brought parallel computing to a much wider audience in a useful way.

24:41.000 --> 24:46.000
I wouldn't want you to come away from this video feeling that the transputer was a failed idea,

24:46.000 --> 24:48.000
because it really, really wasn't.

24:48.000 --> 24:50.000
It's just under the ownership of Fawn,

24:50.000 --> 24:53.000
it just didn't receive the kind of money it should have done

24:53.000 --> 24:58.000
because Fawn was busy circling the drain and turning into an absolute basket case of a company.

24:58.000 --> 25:01.000
And then, unfortunately, Imos was then sold to another basket case,

25:01.000 --> 25:03.000
doing exactly the same thing.

25:03.000 --> 25:06.000
By the time ST Microelectronics got their hands on it,

25:06.000 --> 25:11.000
well, it was a little too late and costly to get back into the high-performance computer space with it.

25:11.000 --> 25:15.000
But ST did base a number of products on the transputer,

25:15.000 --> 25:19.000
and he had a nice second life in set-top boxes and there's microcontrollers.

25:19.000 --> 25:21.000
Which to be fair, was ST's wheelhouse.

25:21.000 --> 25:25.000
Now, I'm going to end this video talking about one of the, well,

25:25.000 --> 25:28.000
oddest moments of the transputer's history, or at least to me.

25:28.000 --> 25:33.000
Remember I mentioned before that there was a Unix-like operating system for it?

25:33.000 --> 25:37.000
Well, we're going to discuss that, and the Atari Transputer Workstation.

25:37.000 --> 25:41.000
Which is, of course, the answer to the question I posed at the beginning of the video of,

25:41.000 --> 25:44.000
what do you think Atari's least successful computer product is?

25:44.000 --> 25:48.000
Hands up, how many of you had actually heard of the Atari Transputer Workstation?

25:48.000 --> 25:51.000
I mean, if you had, you could probably guess that this was the answer,

25:51.000 --> 25:53.000
given that this is a video about transputers.

25:53.000 --> 25:57.000
So Atari, the people responsible for the ST in the 2600,

25:57.000 --> 26:01.000
decided they would make a high-end workstation based on the transputer,

26:01.000 --> 26:06.000
because no brand screams high-performance workstation like Atari.

26:06.000 --> 26:11.000
Yeah, this must be Atari's, like, most obscure product, the Transputer Workstation,

26:11.000 --> 26:15.000
and probably the one that sold the least quantity of anything they ever made.

26:15.000 --> 26:18.000
And this is the company that brought us the Jaguar.

26:18.000 --> 26:22.000
And more impressively, the Jaguar CD add-on.

26:22.000 --> 26:25.000
Because what a failed console really needs is an add-on,

26:25.000 --> 26:28.000
even if you did get armoured to chanks in to help with the design work.

26:28.000 --> 26:31.000
Now, this story begins with Dr. Tim King,

26:31.000 --> 26:33.000
a name that some of you will probably recognise,

26:33.000 --> 26:37.000
and a few of you apparently know based on what you said in the comment section.

26:37.000 --> 26:41.000
He worked for Metacomco, the people who did the operating system for the Amiga,

26:41.000 --> 26:47.000
and when he left it, he started a new company with the aim to make a Unix-like operating system for the transputer.

26:47.000 --> 26:52.000
Now, I say Unix-like, and that's because he was going to implement the POSIX standard for it,

26:52.000 --> 26:55.000
so you could compile and run Unix software for it.

26:55.000 --> 27:00.000
But it couldn't be Unix, because there's no MMU in the transputer.

27:00.000 --> 27:02.000
It doesn't do memory management,

27:02.000 --> 27:07.000
so you couldn't have a full Unix operating system on there with all the memory protection.

27:07.000 --> 27:12.000
Now, that's not as important as it might sound for making a Unix-like operating system,

27:12.000 --> 27:16.000
because thanks to the transputer being a stack-based system with stack registers,

27:16.000 --> 27:20.000
not being able to do memory protection the way that Unix normally would with the MMU

27:20.000 --> 27:22.000
is not as big a killer as you might think.

27:22.000 --> 27:26.000
We weren't going to create a, you know, pre-OS10 Apple Mac here.

27:26.000 --> 27:31.000
Applications would have to go out of their way to mess with the memory space of another application.

27:31.000 --> 27:35.000
It isn't just a case of forgetting to put a null byte on the end of a string,

27:35.000 --> 27:39.000
and all look, the word processor somehow overrope the operating system.

27:39.000 --> 27:42.000
And if one task happens to hug an entire CPU,

27:42.000 --> 27:45.000
well, in a transputer system, that's not really such a big deal

27:45.000 --> 27:48.000
as it would be in, say, a single processor Mac.

27:48.000 --> 27:51.000
Also, another transputer chip could just tell it to stop.

27:51.000 --> 27:55.000
So, you know, process management is a real thing in this operating system.

27:55.000 --> 27:57.000
So, the idea was to create this operating system.

27:57.000 --> 27:58.000
He lost.

27:58.000 --> 28:03.000
There'd be Unix-like, or Unix-like enough, and running on the transputer.

28:03.000 --> 28:06.000
Of course, then they decided that they should split part of the company off

28:06.000 --> 28:10.000
to start looking at building hardware that this could run on.

28:10.000 --> 28:14.000
But as almost everyone who worked for the company was former Metacon Co. people,

28:14.000 --> 28:19.000
they had contacts in both Commodore and Atari, as they'd worked on stuff for both of them in the past.

28:19.000 --> 28:25.000
And one of the things they initially tried was making a hardware card to go inside the Amiga 2000.

28:25.000 --> 28:29.000
So, the Amiga 2000 would act as a boot system, help bring up the card,

28:29.000 --> 28:32.000
he lost would run on there, and IO would be handled by the Amiga.

28:32.000 --> 28:37.000
Now, it seems Commodore did what Commodore does and just randomly lose interest in this,

28:37.000 --> 28:39.000
so they started talking to Atari.

28:39.000 --> 28:42.000
And that's where we get the Atari Transputer Workstation.

28:42.000 --> 28:45.000
And it works on a very similar idea.

28:45.000 --> 28:49.000
What we essentially have is an Atari ST Mega that acts much like a host system does

28:49.000 --> 28:51.000
for all the other ways we run the transputer.

28:51.000 --> 28:55.000
It does the IO, it provides it with floppy and hard drive controller,

28:55.000 --> 28:57.000
and is what boots he lost.

28:57.000 --> 29:00.000
Once he lost his booted and running on the transputers,

29:00.000 --> 29:04.000
the 68000 on the Mega ST board just becomes an IO controller at this point.

29:04.000 --> 29:09.000
Now, you may have noticed that at no point have I mentioned the Atari ST's graphics chips getting used.

29:09.000 --> 29:15.000
And that's because the Transputer Workstation's got its own graphics card that's driven from the transputer side of things.

29:15.000 --> 29:18.000
And that's known as the Blossom Board.

29:18.000 --> 29:23.000
Now, this meant that Helix could run X-Window, so regular X-Window software would compile and work on it.

29:23.000 --> 29:29.000
And the Blossom Board gives us the kind of resolution you'd expect on a high-end Unix workstation of the time.

29:29.000 --> 29:34.000
So we've got 1280 by 690 at 16 colors, palette 4096.

29:34.000 --> 29:41.000
We've got 1024 by 768 with 256 colors, and that's driven out of a palette of 16.7 million.

29:41.000 --> 29:48.000
And then we've got modes that are more in your lower-end workstation than PC range, so we can do 640 by 480.

29:48.000 --> 29:51.000
And again, that's limited to 256 colors at once.

29:51.000 --> 29:58.000
And then we have a 512 by 480, in which we can use the whole 16.7 million colors at once.

29:58.000 --> 30:03.000
There are also a number of sort of hardware acceleration features in there that X can make use of,

30:03.000 --> 30:07.000
so we've got a Blitter that allows us to move sort of tiles and windows around and other things.

30:07.000 --> 30:14.000
Now, oddly, for a transputer-based workstation, as it comes, it chips with one whole transputer chip,

30:14.000 --> 30:18.000
which for a system designed to do stuff in parallel is less than ideal,

30:18.000 --> 30:22.000
but the motherboard does have four slots to add what they refer to as farm cards,

30:22.000 --> 30:25.000
which is a card containing four additional transputer chips,

30:25.000 --> 30:32.000
which means that with a fully-expanded system, you could have 17 transputers in there, which is, you know, not bad.

30:32.000 --> 30:39.000
And it actually has one of those InMOS switch chips we talked about earlier, so the internship performance was actually pretty good.

30:39.000 --> 30:45.000
Originally Atari were going to call this thing the Abac, but then decided that they call it the Atari Transputer Workstation,

30:45.000 --> 30:49.000
as that gave people a clue as to what it was and why you might want it.

30:49.000 --> 30:56.000
And Atari can't have been expecting a lot of people to buy one of these, I mean, it's a very high-end system.

30:56.000 --> 31:01.000
But you've got to think that Atari were hoping that they were going to sell more than 350 of them,

31:01.000 --> 31:09.000
because that's the total number that were produced, and apparently somewhere between 50 to 100 of those were prototype machines as well.

31:09.000 --> 31:13.000
Now, I am told this machine was actually designed in Sheffield, the city that I live in,

31:13.000 --> 31:19.000
but I can't find any hard documenting evidence to say, yeah, 100% that was true,

31:19.000 --> 31:27.000
but given that the transputer support centre was based in Sheffield, and Department of Computer Science Sheffield was one of the leading research groups for the transputer,

31:27.000 --> 31:30.000
yeah, I'm not going to die of shock if that was true.

31:30.000 --> 31:35.000
Now, one of the interesting spin-offs from the whole Transputer Workstation thing was the blossom graphics card,

31:35.000 --> 31:42.000
apparently the team that were responsible for that, then would later go on to work on the Atari Jaguar and properly kill Atari this time.

31:42.000 --> 31:51.000
But I think the Atari Transputer Workstation is probably the rarest of all Atari computers, because even the Falcon outsold this thing, and the Stacey.

31:51.000 --> 31:58.000
Now, with all that said, would I like to get my hands on one? Yeah, of course, I'd absolutely love to. Who wouldn't want to?

31:58.000 --> 32:04.000
Well, I suppose people who only want to play games on their Atari, because there were no games released for the Atari Transputer Workstation,

32:04.000 --> 32:12.000
although you could actually get the Mega ST that was built in as the IO processor to actually boot TOS and then run whatever game you wanted to on it.

32:12.000 --> 32:17.000
It's just, it's a heck of a lot of electricity to run a standard ST game.

32:17.000 --> 32:22.000
If you've got all the way to the end, I would like to say thank you very much for watching.

32:22.000 --> 32:29.000
I would also like to give a huge thank you to FIO, one of Sheffield's more talented instrument makers, musical instruments that is, not scientific,

32:29.000 --> 32:33.000
for giving me the transputer system to set this whole video off on course.

32:33.000 --> 32:38.000
If you enjoyed the video, please click that thumbs up buttony thing that YouTube's given us to indicate that that's a fact.

32:38.000 --> 32:45.000
And as ever, please feel free to chat away in the comments, because it is quite nice to fully nerd out with all of you.

32:45.000 --> 32:53.000
And if you'd like to help the channel out, please click the subscribe button, because that way YouTube actually believes that it's worth telling people that the videos exist.

