1
00:00:00,000 --> 00:00:07,640
So, what have you learned about the human abstractions from individual functional human

2
00:00:07,640 --> 00:00:12,480
units to the broader organization?

3
00:00:12,480 --> 00:00:15,360
What does it take to create something special?

4
00:00:15,360 --> 00:00:20,840
Well, most people don't think simple enough, all right?

5
00:00:20,840 --> 00:00:26,560
So do you know the difference between a recipe and the understanding?

6
00:00:26,560 --> 00:00:29,040
There's probably a philosophical description of this.

7
00:00:29,280 --> 00:00:31,280
So imagine you're going to make a loaf of bread.

8
00:00:31,280 --> 00:00:36,920
The recipe says, get some flour, add some water, add some yeast, mix it up, let it rise,

9
00:00:36,920 --> 00:00:39,520
put it in a pan, put it in the oven.

10
00:00:39,520 --> 00:00:41,480
It's a recipe, right?

11
00:00:41,480 --> 00:00:43,440
Understanding bread.

12
00:00:43,440 --> 00:00:52,280
You can understand biology, supply chains, you know, rain grinders, yeast, physics, you

13
00:00:52,280 --> 00:00:57,360
know, thermodynamics, like there's so many levels of understanding there.

14
00:00:57,440 --> 00:01:02,880
And then when people build and design things, they frequently are executing some stack of

15
00:01:02,880 --> 00:01:05,360
recipes, right?

16
00:01:05,360 --> 00:01:09,080
And the problem with that is the recipes all have limited scope.

17
00:01:09,080 --> 00:01:12,480
Look, if you have a really good recipe book for making bread, it won't tell you anything

18
00:01:12,480 --> 00:01:15,040
about how to make an omelet, right?

19
00:01:15,040 --> 00:01:22,320
But if you have a deep understanding of cooking, right, then bread, omelets, you know,

20
00:01:22,320 --> 00:01:27,840
sandwich, you know, there's a different, you know, way of viewing everything.

21
00:01:27,840 --> 00:01:34,680
And most people, when you get to be an expert at something, you know, you're hoping to

22
00:01:34,680 --> 00:01:41,280
achieve deeper understanding, not just a large set of recipes to go execute.

23
00:01:41,280 --> 00:01:46,000
And it's interesting to walk groups of people because executing recipes is unbelievably

24
00:01:46,000 --> 00:01:50,720
efficient if it's what you want to do.

25
00:01:50,720 --> 00:01:55,320
If it's not what you want to do, you're really stuck.

26
00:01:55,320 --> 00:01:57,320
And that difference is crucial.

27
00:01:57,320 --> 00:02:01,120
And everybody has a balance of, let's say, deeper understanding of recipes.

28
00:02:01,120 --> 00:02:06,040
And some people are really good at recognizing when the problem is to understand something

29
00:02:06,040 --> 00:02:07,040
deeply.

30
00:02:07,040 --> 00:02:09,040
Does that make sense?

31
00:02:09,040 --> 00:02:10,840
It totally makes sense.

32
00:02:10,840 --> 00:02:15,200
Does it, every stage of development, deep understanding on the team needed?

33
00:02:15,200 --> 00:02:18,280
Oh, this goes back to the art versus science question.

34
00:02:18,280 --> 00:02:19,280
Sure.

35
00:02:19,400 --> 00:02:23,560
If you constantly unpack everything for deeper understanding, you never get anything done.

36
00:02:23,560 --> 00:02:24,560
Right.

37
00:02:24,560 --> 00:02:29,760
And if you don't unpack understanding when you need to, you'll do the wrong thing.

38
00:02:29,760 --> 00:02:34,760
And then at every juncture, like human beings are these really weird things because everything

39
00:02:34,760 --> 00:02:38,560
you tell them has a million possible outputs, right?

40
00:02:38,560 --> 00:02:41,840
And then they all interact in a hilarious way.

41
00:02:41,840 --> 00:02:46,120
And then having some intuition about what you tell them, what you do, when do you intervene,

42
00:02:46,120 --> 00:02:48,400
when do you not, it's, it's complicated.

43
00:02:48,840 --> 00:02:49,320
Right.

44
00:02:49,320 --> 00:02:53,280
So it's, it's, you know, essentially computationally unsolvable.

45
00:02:53,320 --> 00:02:53,640
Yeah.

46
00:02:53,640 --> 00:02:55,000
It's an intractable problem.

47
00:02:55,000 --> 00:02:55,320
Sure.

48
00:02:56,760 --> 00:03:04,720
Humans are a mess, but, uh, deep understanding, do you mean also sort of fundamental questions

49
00:03:04,720 --> 00:03:09,920
of, uh, things like, what is a computer?

50
00:03:10,920 --> 00:03:16,800
Like, or why, like the, the why questions, why are we even building this?

51
00:03:17,600 --> 00:03:24,400
Like of purpose, or do you mean more like going towards the fundamental limits of physics,

52
00:03:24,400 --> 00:03:27,560
sort of really getting into the core of the science?

53
00:03:27,560 --> 00:03:31,320
Well, in terms of building a computer, I think simple, think a little simpler.

54
00:03:32,320 --> 00:03:36,120
So common practices, you build a computer and then when somebody says, I want to make

55
00:03:36,120 --> 00:03:40,880
it 10% faster, you'll go in and say, all right, I need to make this buffer bigger.

56
00:03:40,960 --> 00:03:45,200
And maybe I'll add an ad unit or, you know, I have this thing that's three instructions

57
00:03:45,200 --> 00:03:47,320
wide, I'm going to make it four instructions wide.

58
00:03:47,760 --> 00:03:52,680
And what you see is each piece gets incrementally more complicated.

59
00:03:53,520 --> 00:03:53,920
Right.

60
00:03:54,360 --> 00:03:59,200
And then at some point you hit this limit, like adding another feature or buffer, it

61
00:03:59,200 --> 00:04:01,000
doesn't seem to make it any faster.

62
00:04:01,320 --> 00:04:04,680
And then people will say, well, that's because it's a fundamental limit.

63
00:04:05,520 --> 00:04:08,600
And then somebody else will look at it and say, well, actually the way you divided the

64
00:04:08,600 --> 00:04:13,120
problem up and the way that different features are interacting is limiting you.

65
00:04:13,120 --> 00:04:14,960
And it has to be rethought, rewritten.

66
00:04:15,800 --> 00:04:16,120
Right.

67
00:04:16,400 --> 00:04:18,280
So then you refactor and rewrite it.

68
00:04:18,280 --> 00:04:23,560
And what people commonly find is the rewrite is not only faster, but half is complicated.

69
00:04:23,720 --> 00:04:24,440
From scratch?

70
00:04:24,520 --> 00:04:25,000
Yes.

71
00:04:25,200 --> 00:04:31,880
So how often in your career, but just have you seen as needed, maybe more generally, to

72
00:04:31,880 --> 00:04:34,400
just throw the whole out, the whole thing out.

73
00:04:34,400 --> 00:04:38,280
This is where I'm on one end of it every three to five years.

74
00:04:39,240 --> 00:04:40,360
Which end are you on?

75
00:04:40,960 --> 00:04:41,200
Wait.

76
00:04:41,240 --> 00:04:42,360
Rewrite more often.

77
00:04:42,840 --> 00:04:44,800
Rewrite and three to five years is.

78
00:04:45,320 --> 00:04:48,800
So if you want to really make a lot of progress on computer architecture, every five

79
00:04:48,800 --> 00:04:50,320
years you should do one from scratch.

80
00:04:52,080 --> 00:04:56,320
So where does the x86-64 standard come in?

81
00:04:56,440 --> 00:04:58,040
Well, how often do you?

82
00:04:58,880 --> 00:05:01,920
I wrote the, I was the co-author of that spec in 98.

83
00:05:02,480 --> 00:05:03,400
That's 20 years ago.

84
00:05:03,960 --> 00:05:04,320
Yeah.

85
00:05:04,360 --> 00:05:05,440
So that's still around.

86
00:05:05,960 --> 00:05:09,280
The instruction set itself has been extended quite a few times.

87
00:05:09,280 --> 00:05:09,600
Yes.

88
00:05:10,120 --> 00:05:14,160
And instruction sets are less interesting than the implementation underneath.

89
00:05:14,880 --> 00:05:20,440
There's been, on x86 architecture, Intel's designed a few, designed a few, very

90
00:05:20,440 --> 00:05:21,880
different architectures.

91
00:05:22,640 --> 00:05:30,200
And I don't want to go into too much of the detail about how often, but there's a

92
00:05:30,200 --> 00:05:34,080
tendency to rewrite it every, you know, 10 years and it really should be every five.

93
00:05:35,280 --> 00:05:37,960
So you're saying you're an outlier in that sense in the.

94
00:05:37,960 --> 00:05:38,960
Rewrite more often.

95
00:05:39,080 --> 00:05:40,080
Rewrite more often.

96
00:05:40,200 --> 00:05:41,600
Well, and here's, isn't it scary?

97
00:05:42,240 --> 00:05:42,880
Yeah, of course.

98
00:05:43,800 --> 00:05:44,800
Well, scary to who?

99
00:05:45,320 --> 00:05:50,040
To everybody involved, because like you said, repeating the recipe is efficient.

100
00:05:50,800 --> 00:05:56,440
Companies want to make money, well, no, individual engineers want to succeed.

101
00:05:56,440 --> 00:06:00,840
So you want to incrementally improve, increase the buffer from three to four.

102
00:06:01,440 --> 00:06:04,880
Well, this is where you get into diminishing return curves.

103
00:06:05,560 --> 00:06:07,040
I think Steve Jobs said this, right?

104
00:06:07,080 --> 00:06:11,080
So every, you have a project and you start here and it goes up and they have

105
00:06:11,080 --> 00:06:12,040
diminishing return.

106
00:06:12,520 --> 00:06:16,240
And to get to the next level, you have to do a new one and the initial starting

107
00:06:16,240 --> 00:06:21,360
point will be lower than the old optimization point, but it'll get higher.

108
00:06:22,000 --> 00:06:26,840
So now you have two kinds of fear, short-term disaster and long-term disaster.

109
00:06:27,720 --> 00:06:30,920
And you're, you're, you're, right?

110
00:06:31,280 --> 00:06:31,640
Yes.

111
00:06:32,000 --> 00:06:36,600
You know, people with a quarter by quarter business objective are terrified about

112
00:06:36,600 --> 00:06:41,920
changing everything and people who are trying to run a business or build a

113
00:06:41,920 --> 00:06:47,160
computer for a long-term objective, know that the short-term limitations block

114
00:06:47,160 --> 00:06:48,840
them from the long-term success.

115
00:06:49,480 --> 00:06:54,920
So if you look at leaders of companies that had really good long-term success,

116
00:06:55,360 --> 00:06:58,240
every time they saw that they had to redo something, they did.

117
00:06:59,160 --> 00:07:00,720
And so somebody has to speak up.

118
00:07:01,200 --> 00:07:03,080
Or you do multiple projects in parallel.

119
00:07:03,200 --> 00:07:05,720
Like you optimize the old one while you build a new one.

120
00:07:05,720 --> 00:07:09,680
And, but the marketing guys are always like, make promise me that the new

121
00:07:09,680 --> 00:07:12,240
computer is faster on every single thing.

122
00:07:12,840 --> 00:07:16,200
And the computer architect says, well, the new computer will be faster on the average,

123
00:07:16,840 --> 00:07:20,280
but there's a distribution of results and performance and you'll have some

124
00:07:20,280 --> 00:07:21,560
outliers that are slower.

125
00:07:22,040 --> 00:07:24,760
And that's very hard because they have one customer who cares about that one.

