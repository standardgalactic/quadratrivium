start	end	text
0	7640	So, what have you learned about the human abstractions from individual functional human
7640	12480	units to the broader organization?
12480	15360	What does it take to create something special?
15360	20840	Well, most people don't think simple enough, all right?
20840	26560	So do you know the difference between a recipe and the understanding?
26560	29040	There's probably a philosophical description of this.
29280	31280	So imagine you're going to make a loaf of bread.
31280	36920	The recipe says, get some flour, add some water, add some yeast, mix it up, let it rise,
36920	39520	put it in a pan, put it in the oven.
39520	41480	It's a recipe, right?
41480	43440	Understanding bread.
43440	52280	You can understand biology, supply chains, you know, rain grinders, yeast, physics, you
52280	57360	know, thermodynamics, like there's so many levels of understanding there.
57440	62880	And then when people build and design things, they frequently are executing some stack of
62880	65360	recipes, right?
65360	69080	And the problem with that is the recipes all have limited scope.
69080	72480	Look, if you have a really good recipe book for making bread, it won't tell you anything
72480	75040	about how to make an omelet, right?
75040	82320	But if you have a deep understanding of cooking, right, then bread, omelets, you know,
82320	87840	sandwich, you know, there's a different, you know, way of viewing everything.
87840	94680	And most people, when you get to be an expert at something, you know, you're hoping to
94680	101280	achieve deeper understanding, not just a large set of recipes to go execute.
101280	106000	And it's interesting to walk groups of people because executing recipes is unbelievably
106000	110720	efficient if it's what you want to do.
110720	115320	If it's not what you want to do, you're really stuck.
115320	117320	And that difference is crucial.
117320	121120	And everybody has a balance of, let's say, deeper understanding of recipes.
121120	126040	And some people are really good at recognizing when the problem is to understand something
126040	127040	deeply.
127040	129040	Does that make sense?
129040	130840	It totally makes sense.
130840	135200	Does it, every stage of development, deep understanding on the team needed?
135200	138280	Oh, this goes back to the art versus science question.
138280	139280	Sure.
139400	143560	If you constantly unpack everything for deeper understanding, you never get anything done.
143560	144560	Right.
144560	149760	And if you don't unpack understanding when you need to, you'll do the wrong thing.
149760	154760	And then at every juncture, like human beings are these really weird things because everything
154760	158560	you tell them has a million possible outputs, right?
158560	161840	And then they all interact in a hilarious way.
161840	166120	And then having some intuition about what you tell them, what you do, when do you intervene,
166120	168400	when do you not, it's, it's complicated.
168840	169320	Right.
169320	173280	So it's, it's, you know, essentially computationally unsolvable.
173320	173640	Yeah.
173640	175000	It's an intractable problem.
175000	175320	Sure.
176760	184720	Humans are a mess, but, uh, deep understanding, do you mean also sort of fundamental questions
184720	189920	of, uh, things like, what is a computer?
190920	196800	Like, or why, like the, the why questions, why are we even building this?
197600	204400	Like of purpose, or do you mean more like going towards the fundamental limits of physics,
204400	207560	sort of really getting into the core of the science?
207560	211320	Well, in terms of building a computer, I think simple, think a little simpler.
212320	216120	So common practices, you build a computer and then when somebody says, I want to make
216120	220880	it 10% faster, you'll go in and say, all right, I need to make this buffer bigger.
220960	225200	And maybe I'll add an ad unit or, you know, I have this thing that's three instructions
225200	227320	wide, I'm going to make it four instructions wide.
227760	232680	And what you see is each piece gets incrementally more complicated.
233520	233920	Right.
234360	239200	And then at some point you hit this limit, like adding another feature or buffer, it
239200	241000	doesn't seem to make it any faster.
241320	244680	And then people will say, well, that's because it's a fundamental limit.
245520	248600	And then somebody else will look at it and say, well, actually the way you divided the
248600	253120	problem up and the way that different features are interacting is limiting you.
253120	254960	And it has to be rethought, rewritten.
255800	256120	Right.
256400	258280	So then you refactor and rewrite it.
258280	263560	And what people commonly find is the rewrite is not only faster, but half is complicated.
263720	264440	From scratch?
264520	265000	Yes.
265200	271880	So how often in your career, but just have you seen as needed, maybe more generally, to
271880	274400	just throw the whole out, the whole thing out.
274400	278280	This is where I'm on one end of it every three to five years.
279240	280360	Which end are you on?
280960	281200	Wait.
281240	282360	Rewrite more often.
282840	284800	Rewrite and three to five years is.
285320	288800	So if you want to really make a lot of progress on computer architecture, every five
288800	290320	years you should do one from scratch.
292080	296320	So where does the x86-64 standard come in?
296440	298040	Well, how often do you?
298880	301920	I wrote the, I was the co-author of that spec in 98.
302480	303400	That's 20 years ago.
303960	304320	Yeah.
304360	305440	So that's still around.
305960	309280	The instruction set itself has been extended quite a few times.
309280	309600	Yes.
310120	314160	And instruction sets are less interesting than the implementation underneath.
314880	320440	There's been, on x86 architecture, Intel's designed a few, designed a few, very
320440	321880	different architectures.
322640	330200	And I don't want to go into too much of the detail about how often, but there's a
330200	334080	tendency to rewrite it every, you know, 10 years and it really should be every five.
335280	337960	So you're saying you're an outlier in that sense in the.
337960	338960	Rewrite more often.
339080	340080	Rewrite more often.
340200	341600	Well, and here's, isn't it scary?
342240	342880	Yeah, of course.
343800	344800	Well, scary to who?
345320	350040	To everybody involved, because like you said, repeating the recipe is efficient.
350800	356440	Companies want to make money, well, no, individual engineers want to succeed.
356440	360840	So you want to incrementally improve, increase the buffer from three to four.
361440	364880	Well, this is where you get into diminishing return curves.
365560	367040	I think Steve Jobs said this, right?
367080	371080	So every, you have a project and you start here and it goes up and they have
371080	372040	diminishing return.
372520	376240	And to get to the next level, you have to do a new one and the initial starting
376240	381360	point will be lower than the old optimization point, but it'll get higher.
382000	386840	So now you have two kinds of fear, short-term disaster and long-term disaster.
387720	390920	And you're, you're, you're, right?
391280	391640	Yes.
392000	396600	You know, people with a quarter by quarter business objective are terrified about
396600	401920	changing everything and people who are trying to run a business or build a
401920	407160	computer for a long-term objective, know that the short-term limitations block
407160	408840	them from the long-term success.
409480	414920	So if you look at leaders of companies that had really good long-term success,
415360	418240	every time they saw that they had to redo something, they did.
419160	420720	And so somebody has to speak up.
421200	423080	Or you do multiple projects in parallel.
423200	425720	Like you optimize the old one while you build a new one.
425720	429680	And, but the marketing guys are always like, make promise me that the new
429680	432240	computer is faster on every single thing.
432840	436200	And the computer architect says, well, the new computer will be faster on the average,
436840	440280	but there's a distribution of results and performance and you'll have some
440280	441560	outliers that are slower.
442040	444760	And that's very hard because they have one customer who cares about that one.
