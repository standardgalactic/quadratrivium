WEBVTT

00:00.000 --> 00:07.640
So, what have you learned about the human abstractions from individual functional human

00:07.640 --> 00:12.480
units to the broader organization?

00:12.480 --> 00:15.360
What does it take to create something special?

00:15.360 --> 00:20.840
Well, most people don't think simple enough, all right?

00:20.840 --> 00:26.560
So do you know the difference between a recipe and the understanding?

00:26.560 --> 00:29.040
There's probably a philosophical description of this.

00:29.280 --> 00:31.280
So imagine you're going to make a loaf of bread.

00:31.280 --> 00:36.920
The recipe says, get some flour, add some water, add some yeast, mix it up, let it rise,

00:36.920 --> 00:39.520
put it in a pan, put it in the oven.

00:39.520 --> 00:41.480
It's a recipe, right?

00:41.480 --> 00:43.440
Understanding bread.

00:43.440 --> 00:52.280
You can understand biology, supply chains, you know, rain grinders, yeast, physics, you

00:52.280 --> 00:57.360
know, thermodynamics, like there's so many levels of understanding there.

00:57.440 --> 01:02.880
And then when people build and design things, they frequently are executing some stack of

01:02.880 --> 01:05.360
recipes, right?

01:05.360 --> 01:09.080
And the problem with that is the recipes all have limited scope.

01:09.080 --> 01:12.480
Look, if you have a really good recipe book for making bread, it won't tell you anything

01:12.480 --> 01:15.040
about how to make an omelet, right?

01:15.040 --> 01:22.320
But if you have a deep understanding of cooking, right, then bread, omelets, you know,

01:22.320 --> 01:27.840
sandwich, you know, there's a different, you know, way of viewing everything.

01:27.840 --> 01:34.680
And most people, when you get to be an expert at something, you know, you're hoping to

01:34.680 --> 01:41.280
achieve deeper understanding, not just a large set of recipes to go execute.

01:41.280 --> 01:46.000
And it's interesting to walk groups of people because executing recipes is unbelievably

01:46.000 --> 01:50.720
efficient if it's what you want to do.

01:50.720 --> 01:55.320
If it's not what you want to do, you're really stuck.

01:55.320 --> 01:57.320
And that difference is crucial.

01:57.320 --> 02:01.120
And everybody has a balance of, let's say, deeper understanding of recipes.

02:01.120 --> 02:06.040
And some people are really good at recognizing when the problem is to understand something

02:06.040 --> 02:07.040
deeply.

02:07.040 --> 02:09.040
Does that make sense?

02:09.040 --> 02:10.840
It totally makes sense.

02:10.840 --> 02:15.200
Does it, every stage of development, deep understanding on the team needed?

02:15.200 --> 02:18.280
Oh, this goes back to the art versus science question.

02:18.280 --> 02:19.280
Sure.

02:19.400 --> 02:23.560
If you constantly unpack everything for deeper understanding, you never get anything done.

02:23.560 --> 02:24.560
Right.

02:24.560 --> 02:29.760
And if you don't unpack understanding when you need to, you'll do the wrong thing.

02:29.760 --> 02:34.760
And then at every juncture, like human beings are these really weird things because everything

02:34.760 --> 02:38.560
you tell them has a million possible outputs, right?

02:38.560 --> 02:41.840
And then they all interact in a hilarious way.

02:41.840 --> 02:46.120
And then having some intuition about what you tell them, what you do, when do you intervene,

02:46.120 --> 02:48.400
when do you not, it's, it's complicated.

02:48.840 --> 02:49.320
Right.

02:49.320 --> 02:53.280
So it's, it's, you know, essentially computationally unsolvable.

02:53.320 --> 02:53.640
Yeah.

02:53.640 --> 02:55.000
It's an intractable problem.

02:55.000 --> 02:55.320
Sure.

02:56.760 --> 03:04.720
Humans are a mess, but, uh, deep understanding, do you mean also sort of fundamental questions

03:04.720 --> 03:09.920
of, uh, things like, what is a computer?

03:10.920 --> 03:16.800
Like, or why, like the, the why questions, why are we even building this?

03:17.600 --> 03:24.400
Like of purpose, or do you mean more like going towards the fundamental limits of physics,

03:24.400 --> 03:27.560
sort of really getting into the core of the science?

03:27.560 --> 03:31.320
Well, in terms of building a computer, I think simple, think a little simpler.

03:32.320 --> 03:36.120
So common practices, you build a computer and then when somebody says, I want to make

03:36.120 --> 03:40.880
it 10% faster, you'll go in and say, all right, I need to make this buffer bigger.

03:40.960 --> 03:45.200
And maybe I'll add an ad unit or, you know, I have this thing that's three instructions

03:45.200 --> 03:47.320
wide, I'm going to make it four instructions wide.

03:47.760 --> 03:52.680
And what you see is each piece gets incrementally more complicated.

03:53.520 --> 03:53.920
Right.

03:54.360 --> 03:59.200
And then at some point you hit this limit, like adding another feature or buffer, it

03:59.200 --> 04:01.000
doesn't seem to make it any faster.

04:01.320 --> 04:04.680
And then people will say, well, that's because it's a fundamental limit.

04:05.520 --> 04:08.600
And then somebody else will look at it and say, well, actually the way you divided the

04:08.600 --> 04:13.120
problem up and the way that different features are interacting is limiting you.

04:13.120 --> 04:14.960
And it has to be rethought, rewritten.

04:15.800 --> 04:16.120
Right.

04:16.400 --> 04:18.280
So then you refactor and rewrite it.

04:18.280 --> 04:23.560
And what people commonly find is the rewrite is not only faster, but half is complicated.

04:23.720 --> 04:24.440
From scratch?

04:24.520 --> 04:25.000
Yes.

04:25.200 --> 04:31.880
So how often in your career, but just have you seen as needed, maybe more generally, to

04:31.880 --> 04:34.400
just throw the whole out, the whole thing out.

04:34.400 --> 04:38.280
This is where I'm on one end of it every three to five years.

04:39.240 --> 04:40.360
Which end are you on?

04:40.960 --> 04:41.200
Wait.

04:41.240 --> 04:42.360
Rewrite more often.

04:42.840 --> 04:44.800
Rewrite and three to five years is.

04:45.320 --> 04:48.800
So if you want to really make a lot of progress on computer architecture, every five

04:48.800 --> 04:50.320
years you should do one from scratch.

04:52.080 --> 04:56.320
So where does the x86-64 standard come in?

04:56.440 --> 04:58.040
Well, how often do you?

04:58.880 --> 05:01.920
I wrote the, I was the co-author of that spec in 98.

05:02.480 --> 05:03.400
That's 20 years ago.

05:03.960 --> 05:04.320
Yeah.

05:04.360 --> 05:05.440
So that's still around.

05:05.960 --> 05:09.280
The instruction set itself has been extended quite a few times.

05:09.280 --> 05:09.600
Yes.

05:10.120 --> 05:14.160
And instruction sets are less interesting than the implementation underneath.

05:14.880 --> 05:20.440
There's been, on x86 architecture, Intel's designed a few, designed a few, very

05:20.440 --> 05:21.880
different architectures.

05:22.640 --> 05:30.200
And I don't want to go into too much of the detail about how often, but there's a

05:30.200 --> 05:34.080
tendency to rewrite it every, you know, 10 years and it really should be every five.

05:35.280 --> 05:37.960
So you're saying you're an outlier in that sense in the.

05:37.960 --> 05:38.960
Rewrite more often.

05:39.080 --> 05:40.080
Rewrite more often.

05:40.200 --> 05:41.600
Well, and here's, isn't it scary?

05:42.240 --> 05:42.880
Yeah, of course.

05:43.800 --> 05:44.800
Well, scary to who?

05:45.320 --> 05:50.040
To everybody involved, because like you said, repeating the recipe is efficient.

05:50.800 --> 05:56.440
Companies want to make money, well, no, individual engineers want to succeed.

05:56.440 --> 06:00.840
So you want to incrementally improve, increase the buffer from three to four.

06:01.440 --> 06:04.880
Well, this is where you get into diminishing return curves.

06:05.560 --> 06:07.040
I think Steve Jobs said this, right?

06:07.080 --> 06:11.080
So every, you have a project and you start here and it goes up and they have

06:11.080 --> 06:12.040
diminishing return.

06:12.520 --> 06:16.240
And to get to the next level, you have to do a new one and the initial starting

06:16.240 --> 06:21.360
point will be lower than the old optimization point, but it'll get higher.

06:22.000 --> 06:26.840
So now you have two kinds of fear, short-term disaster and long-term disaster.

06:27.720 --> 06:30.920
And you're, you're, you're, right?

06:31.280 --> 06:31.640
Yes.

06:32.000 --> 06:36.600
You know, people with a quarter by quarter business objective are terrified about

06:36.600 --> 06:41.920
changing everything and people who are trying to run a business or build a

06:41.920 --> 06:47.160
computer for a long-term objective, know that the short-term limitations block

06:47.160 --> 06:48.840
them from the long-term success.

06:49.480 --> 06:54.920
So if you look at leaders of companies that had really good long-term success,

06:55.360 --> 06:58.240
every time they saw that they had to redo something, they did.

06:59.160 --> 07:00.720
And so somebody has to speak up.

07:01.200 --> 07:03.080
Or you do multiple projects in parallel.

07:03.200 --> 07:05.720
Like you optimize the old one while you build a new one.

07:05.720 --> 07:09.680
And, but the marketing guys are always like, make promise me that the new

07:09.680 --> 07:12.240
computer is faster on every single thing.

07:12.840 --> 07:16.200
And the computer architect says, well, the new computer will be faster on the average,

07:16.840 --> 07:20.280
but there's a distribution of results and performance and you'll have some

07:20.280 --> 07:21.560
outliers that are slower.

07:22.040 --> 07:24.760
And that's very hard because they have one customer who cares about that one.

