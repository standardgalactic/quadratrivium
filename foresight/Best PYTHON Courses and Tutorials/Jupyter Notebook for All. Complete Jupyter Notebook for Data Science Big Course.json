{"text": " Hi, and welcome to my course on the Jupyter Notebook for Data Science Teams. I'll just give you a brief overview of the course so you can know what you're getting into. So we'll start off by doing what you expect, getting Jupyter Notebook set up on your machines. The second thing I'll go over then is Jupyter Notebook features. So there's a lot of really interesting things going on with the Jupyter Notebook. Some of the most useful functionality comes from what's called Notebook Extensions. So I'll be going over a lot of those. I'll be showing you how you can use both Python and R in the same Notebook. So if you have some piece of your analysis that needs to be done on R, it's very easy to actually do part of it in R, send it back to Python, or even use R natively as the entire kernel that runs your Jupyter Notebook. Also, different things like using SQL in the Notebook to query databases, some really nice post-save hook functionality and widgets, which I'll just demonstrate right here. This is an example of a widget where I've created a function that generates data according to some line, and the green line shows you the actual function with some noise, and the blue dots are data that gets drawn from this distribution. So the total number of points is 10, and as I click and drag this off to the right, increase the number of points, and you can see that the fit dynamically moves around as I add data points and actually slowly but surely converges on the underlying distribution. So this is an example of a widget which is very easy to do and provides lots of functionality for all kinds of data exploration. Finally, I'll get into sharing the notebooks on a data science team, so there's a lot of questions you have to consider for your particular situation, so I'll try to give you a strategic framework so that you can actually identify what kind of workflow makes sense for your situation. There's various other things about conceptually breaking up your notebook structure into lab notebooks and deliverable notebooks, and a lot more that goes into that. Finally, I'll go through two different data science projects, which will just demonstrate the principles I talked about above, and you get to see it in an environment where I'm explaining and going through how to actually do a data science project from end to end using all the different techniques I was already talking about. In this lesson, we'll be installing the R version of Python, iPython, and Jupyter so that we can run the Jupyter notebook. The way we run this is by installing the Anaconda distribution. There are other ways of installing the iPython notebook, but I recommend the Anaconda for its ease of use. We'll first go over to any web browser and search for Anaconda Python. What you'll see here is that the top link is the continuum Anaconda distribution. Clicking on that takes you right to the downloads page, and you see that you have different options. You can get it with Windows, OSX, or Linux, whichever one you prefer. Since I'm using OSX, I'll click on OSX. The choice between using Python 2.7 and 3.4 is a tough one. I'll be using 2.7 just because many of the legacy code bases still use 2.7, but feel free to, if you're feeling experimental, to go to Python 3.4. I'll be using this Mac OSX 64-bit one. If you have a different system, please use that one. Okay, great. Now that that package has downloaded, install it by following the instructions on the screen. So, clicking through and agreeing to various licenses. And hopefully you get to this stage where it says the installation was successful. Click Close. We can close our browser as well. At this stage, if we typed IPython, it still won't work. One thing that the graphical interface does is actually adds a command to your bash profile. So if I were to actually go into vi.bash underscore profile, the first piece of the profile has been there from before, but this was added by the Anaconda 2.3 installer, which exports this path, shows you that the Anaconda folder has been created in my home directory, and adds that to my path. So if I type ls, you actually do see the Anaconda directory right here. This makes it really easy to uninstall Anaconda if you want. You can remove that line from that path in your bash profile, and you can delete this folder, and everything should be gone off your system, and you can use the old system defaults. But now that we have this, we have to source our bash profile, and we should now be able to type IPython. Now that we've run IPython, we see we are running Python 2.7, in this case 0.10. It's the Anaconda distribution, and this is IPython version 3.2. So a lot of different numbers here. The ones that are important are the Python version, which is 2.7, and the IPython version, which is 3.2. Now this is actually a bit behind. So what we're going to do is hit Ctrl-D, and it says, do you really want to exit? You can either type yes in return, or you can type Ctrl-D a second time to actually exit it. But what we'd like to do now is actually update to the most recent version of Anaconda, so that we have the most recent version. The way to do this is to type conda. This is a new command line argument that you have. The way that we update the Anaconda distribution is by typing conda in various packages. So in this case, we want to conda, install conda. What this should do is check to see various things. This tells us the following packages will be updated. Conda will go from this version 3.14 to 3.18, conda environment, and so on. And we would like to set this up, and we will hit yes to this. It actually takes quite a bit of time to install all of these things from source, but most of these things are actually pre-compiled, so everything's already completed. We'd like to also update a number of packages. So let's conda install Jupyter, and now you can actually chain which packages you'd like to see. So in this case, we'll install Jupyter, the pandas package, and scikit-learn. So these are the packages to be updated. We see that a number of things are going from ipython, which is important, going from version 3.2 to version 4.0. We'd like to proceed with that. I'd like to just say a few words about why I find the Anaconda package to be a useful thing to use. They make sure that all the packages you've installed will play nicely with each other. So sometimes if you're using pip by itself, you can actually install dependencies that overlap each other out of place, so they end up with a conflict when you're trying to import these libraries, and Anaconda does a really nice job of making sure, checking those dependencies really well. So now if we type ipython, we should see that we are running ipython 4.0, which we are. Now we would like to actually check out the ipython notebook, because that's the part where it really gets interesting. So let's create an example directory, and from here we can type Jupyter notebook. Just typing Jupyter notebook, a couple of things happened. First of all, go back to the terminal. I typed Jupyter notebook, and ran it. And a notebook server started from the directory we are in, so a user's jbw example in this case. So an ipython notebook, which has been started with a Jupyter, is now at this location. HTTP colon slash slash localhost, in this case, quadruple 8. And it says here this useful thing, control C to stop this server and shut down all kernels, and you have to do it twice to skip the confirmation. Now this starts the server running, and this terminal needs to stay open. If we go back to this, what it runs is a web server, and it automatically by default opens your default browser. So in this case, here we are at this location, localhost, quadruple 8, underscore 3. And if we'd like to start a new notebook, we can click new, Python 2 notebook. And again, this is referring to which version of Python you're running. This is a 2 version 3 versus 3. And we see now that we're running a Jupyter notebook, and we can start typing valid Python code, and see the output from it right there. Let's do something a little bit more interesting. So we import the NumPy library as np, and then print numpy.a range 10. So we see the first bit of Python code, and we know that we have the installation working just as we hoped. In this video, we're going to start a GitHub repo to house a data science project. First, we have to go to github.com. If you don't have GitHub or Git setup, I highly recommend starting out by picking a username, by giving your email and creating a GitHub account. Now, if you have Windows or Linux or Mac operating system, GitHub itself has a really nice tutorial for how to actually set up Git on your machine and for your setup. So I recommend doing that. So once you have a GitHub account, which is free, or if you already have one, click sign in, let's go to the next step. So you've signed into GitHub, click the plus next to your name in the upper right hand corner, and start a new repository. I prefer to start a new repository through the GitHub website itself, and then clone it to my local machine. So that way, the remote connection has already set up. And that's usually a stumbling block that can be a little bit annoying to overcome if you try to do it the other way around. In this case, I'm going to be looking at some cold data. So I'm going to call it cold exploration. I'm going to give it a quick description. I'm giving it the description a first look at the cold data. I'm going to let it be public so anyone can see this repository. So afterward, you can also see this if you'd like to go to it. I will initialize this repository with a readme and I will add a gitignore. A .gitignore file will let you ignore the machine generated code that comes along with various programming languages. Now Python doesn't have that many, but there is usually a .pyc if you're running a Python file. I also recommend having a license, especially if it's going to be public, so that you can share your repositories with others. If you work for a company, obviously you have different licensing concerns. So then click create repository. It's as easy as that. So now I have the cold exploration repository in my GitHub account. From here, we would like to actually tie this account to our local machine. So we can copy this text that's just to the right of this SSH tab. Now, if it doesn't say SSH, if it says HTTPS, I would recommend clicking it to SSH. And once you do that, copy the text that's in this text box. Navigate with your terminal to a place that you think is an appropriate spot for this repository. Type in git clone and paste the text that you just copied from the website itself. So now we see the license and the readme files that we created on the website itself. All right, so we have set up our GitHub repository and we've cloned it to our local machine and we're ready to start doing some data science. In this lesson, I'm going to give you some extra intuition so you can understand what's happening when the Jupyter Notebook is running. So in my terminal, if I type ls, I get to see the directories now underneath this current directory. I see deliver, dev and source. By typing Jupyter Notebook, I again start the Jupyter server. My default browser is Chrome. So again, we see those same three directories deliver, dev and source. If we toggle back to the terminal, we can see several messages. The first is the directory under which the notebook server has been started. The second message is the number of active kernels. The third message is the location that you can point your browser to to find this notebook. And finally a message to say how to stop this server. So going back to the notebook itself, if we click on the development branch, we see that there's no notebooks in here. We can start a notebook by clicking on new and then clicking on Python 2. So after clicking new, we see a new tab appear. It's currently named untitled and the last checkpoint comes from a few seconds ago. So let's type a few things. So let's just say first as a variable is equal to the 5.0. I execute that cell by holding down shift and hitting return. When I do that, a new cell appears beneath it. And as I type a second variable and label it say 23.0, again hitting return with the shift key produces another cell beneath it. So I now have two variables, one named first and one named second. And there's unsaved changes, which means if I lose this current browser, I will lose the changes that happened from the last time it was saved. In this case, there's nothing that's been saved. So let me go ahead and save this right now. There's two ways of doing this. One, typing command S if you're on the Mac or control S on Windows, which I just did. Or you can click this save disk and it will also save it. Now that it's been saved and there's no unsaved changes. If I close this tab, or if I even close the whole browser by quitting the Chrome browser, all of the actual information has been stored in the kernel itself. In other words, there's this kernel and everything that's happened with the kernel is being stored in state by this kernel. This means if I open up a brand new version of Chrome and I go to where the notebook is running from the previous message before. I copied that with control C, go back to Chrome browser and type it in here. I go back to the exact view we had before. Clicking on Dev, because that's where we were. We actually see that the untitled IPython notebook is actually still running. So if we click on this, we reattach the browser to the underlying kernel. So if you have saved your notebook as you work and you close the browser, the work still remains in memory. So if I say print first comma second, now we see the actual results is here. So this is all been saved. And that's one interesting thing that you should know is that the browser itself is a front end to what's really going on in the kernel. Now, the converse to this is what happens if I completely close and shut down the server. So I hit control C twice and shut down the kernels. So all the kernels have been shutting down. So going back to the browser, you see a message that says connection to the notebook server cannot be established. Let's continue to try to reconnect, but you won't be able to run any code. So in this case, if I try to do something, say I want to say first times second and execute this and shift enter, nothing happens. And this is what you see when it's trying to connect to the kernel and it's failing to. So this is the part where it actually needs to be running and needs to be continually talking to your browser. Unfortunately, restarting the kernel does not give us back to where we were before. So here I can try to reload this notebook and we still see what we had previously done, but watch what happens when I try to run this third cell. The name first is not defined and the input name of the cell one to one. So the kernel has completely restarted as you saw me do in the terminal, which means that now we have to start from the beginning. And now everything has been stored in state saving it keeps it so that the kernel is now running in the background. Hopefully that gave you a little bit of insight into what's happening. The browser acts as a front end to this process that's running in the back end on this terminal. The browser can be closed or blown away after you've saved all of the changes that you've made, but the kernel cannot be the kernel has to stay running if you want to keep the changes that you've done in memory. In this lesson, we'll be talking about Jupyter notebook extensions. Notebook extensions, as the name suggests, are extensions to the capabilities that the Jupyter notebook already comes with. Now there's many different ways that you can actually extend the behavior of a Jupyter notebook. I'm going to show you just two. The first extension that I'll show you is called Jupyter Pivot Tables. And if you click on this link here, you'll see that you go to this website. Nicholas.crucian.com slash content 2015-09 Jupyter Pivot Tables. And this allows for drag and drop pivot tables and charts. And this write-up he has is actually a really nice write-up. I recommend you reading and watching this video as well because he explains in some detail how you can actually use his extension. To install this, all you have to do is go to this pip install command. So copy pip install pivot table JS and run that command in your terminal. So it's successfully installed the pivot table JS. We go back to our notebook. We can now run the cells that import both pandas and numpy and this command, which is from pivot table JS import pivot UI. So that loaded correctly without any errors. So we have now loaded this extension. As of Jupyter 4.0, the preferred way of installing notebook extensions is through a pip install of the extension. There are other ways of doing it as well and I'll show you a second way at the end of this video. So let's actually take a look at some data with this pivot table extension. Go to HTTPS colon slash slash data dot austintexas.gov. In this website, we're going to go down and look at the restaurant inspection scores. From this, we will export data. The format we want is CSV. We do want it to go into our data folder and it's called restaurant inspection scores. Return to save that. You can now close this tab and go back to our notebook. Now that we've downloaded the CSV file, let's read it into pandas data frame. I'm going to split the cell at the current place where it's blinking by typing control shift minus because I want to run this on just one cell by itself. So reselecting that cell, I now hit shift and return and it correctly loads in the data frame. So ways to check that is actually look at what the top of this data frame looks like. We see that the restaurant name, the zip code, inspection date, the score, the address, facility ID and the process description actually looks like it's been read in correctly. One thing you will notice is that the address has return characters in it because standard address has multiple lines. And I'm actually going to be okay with that. I'm going to say I would like to keep the address on one line in the data frame, not have that split up in different ways. So let's take a look at what we get when we look at just the data frame itself is pivot underscore UI. So we've imported pivot underscore UI up here in the first cell. Let's execute the cell here. Now a number of things happened in the background. But what you end up seeing, we close this window down here that shows what we downloaded. And I will actually toggle this toolbar for now. So we can actually see a bit more. We have the various columns of the data frame available on the top here. So zip code, inspection date, score. They are now dragable into these two places. So let's do that. Let's actually drag score along the top. Let's see if there's a relationship between the zip code of a restaurant and the score. So just by dragging those two columns in, we see that there are, for each of these zip codes, different scores that have been given to the restaurant. Of course, a really good score is a 100 for the health score. And we can actually scroll down and take a look at this data in a really intuitive way. This looks pretty neat, but there's a lot of numbers going on. It's actually kind of hard to read. So one thing we can do is actually change the output type from table to something else like a heat map. So this does the same data as we saw before, but it actually highlights the outlying points that are large with a darker color. So now by eye, you can visually see the different relationships between these two variables. I still think this is actually a little bit too big. So I'll give one extra hint of taking data that actually has a lot of different granular pieces. So let's take this very granular number across the top and bin it by something, let's say five to give us a little bit less granularity. So here's some code that will actually do that. So we're going to create a new column in this data frame called bin score for bin to score. I'm going to use a pandas function called cut, which will now cut up these column df.score into bins that go from 30 to 100, because no b.a range is not inclusive of the last data point and stepping by five. So I'm going to run this cell. It's going to create a data frame column named bin score. And let's see what this one looks like. We can drag bin score along the x-axis here and zip code along the y-axis. We now see that the binned scores are now counting everything that has a zip code off to the left and any score within a certain range. In a range of five. We can then also take a look at this. Instead of a table, we can look at it as a heat map. You can also see if it looks okay in terms of a bar chart, for example. And this doesn't quite make sense, but there's many different things that are different here. You can actually look at tree map, for example. So the various visualizations that are available to you may or may not make sense to the data that you're looking at. But the availability of this is actually a really nice extension to the notebook capability that Jupyter already comes with. Alright, so picking up on where the last video left off, notebook extensions. We've already installed one extension. This is the pivot table extension. It's one of the extensions that I'd like to highlight for this video. And it actually comes from this URL here. I want to turn this into, let me just show you this real quick. This code block is currently set as code. I'd like to actually change it to mark down. There's two ways to do that. By clicking on the toolbar like I just did, or by typing M when this cell is selected in this gray circle right now. If I type Y, it would turn back to code. So I just typed Y, you saw the drop down menu turned to code. And since it's still selected with a gray box, I can type M and it goes to mark down. So I want it marked down so that when I click this, I can actually open a new tab. So the Jupyter slideshow extension is this GitHub repo right here. It has a lot of really interesting capabilities that I will be showing you at the very end of this course. I'll be using the rise Jupyter slideshow extension to help us make a final slideshow presentation out of some of our data science projects. To install this notebook extension, it says to simply run python setup.py install from the rise repository. Now this means we actually have to first download this extension code. So this isn't done in the usual PIP install way. This is done by choosing the SSH version here at the top of the page. Selecting this by clicking once. GitHub actually makes it so that the entire thing is highlighted so you can now command C to copy this. Go to your terminal. And at this point, if you don't have a folder for your GitHub repositories that you just grabbed from wild, basically, I would recommend creating one. So we type git clone and then paste in the code we had copied from GitHub web page. So it clones into this thing called rise. Let's CD into this. We see various things here, the live reveal package, Jason and so on. Let's go back to the GitHub page. This is we simply run python setup.py install. So I'll copy that code and paste. Okay, so we have now installed this live reveal.js notebook extension. So we go back to our notebook. We see that there's an extra toolbar cell here, which has something different than we normally see, including a slideshow option. And we actually need to restart this notebook to actually get the ability to make this look like a slideshow. So let me go ahead and do that. I'll do save and checkpoint and then close and halt. I'll go back to where it's running in the terminal and hit control C once. It says it's currently running, shut down the server, yes or no. If you wait too long, it'll actually say I didn't see an answer. So I'm just going to assume you did that by mistake. We actually do want to quit this. So we'll do control C twice. You can have also selected why. So we shut down all the kernels. And this thing, if I reload this should not be available. Let's rerun Jupyter notebook and it will give us a new version of this exact thing. Click notebook extensions. And now you still see this toolbar here with the currently being non the slideshow option, but you also have a new button off to the right. So let's actually click this and click the slideshow option. If you'd actually like to turn one of your notebooks into a slideshow, the functionality is now at your fingertips. And if you don't want to see all these extra cell toolbars, you can always put this back to none. They should be saved. So any clicking slideshow again, the fact that these are all slides has been preserved. To look at the slideshow itself, we just click this button and type into the right gives you the different slides. And one interesting thing about this or one thing that I think is very, very useful is that this is not just a rendered notebook of this. This is actually a live cell that we can actually import and actually run new code. So I just ran that piece of Python code during the slideshow while it's up. So this is very nice for interactive demonstrations. In this video, I'll be showing you how to actually query SQL databases from the Jupyter notebook itself. A lot of enterprise data is stored in databases, so dealing with them will be part of your everyday job. The Jupyter notebook makes it really nice to be able to document very clearly the SQL queries that you are creating. So I recommend if you're going to be using SQL connections using a Jupyter notebook extension called ipython SQL. It's installed by typing pip install ipython dash SQL. Once you install that, you then have access to an extension that you can load by simply typing percent load extension space SQL. When you run this cell, it actually loads in this magic extension. It gives you a number of warning signs, but these are just warnings. The package will still work just fine. This next line percent config will actually configure our ipython SQL extension. And what this configuration does, we say SQL magic, we would like to automatically return results that are a table as a pandas data frame. You don't have to do this, but I recommend it because most of the time you'd actually like to take the data you've queried the database from and transform it and use it in the standard data science tools. So I'll run that command as well. Next import pandas and for this demonstration, I'll be using SQL lite. You can use any of the standard SQL engine connections. I'm just using SQL lite because it's a simple and easy database to run with for an example. This next cell, I'm actually going to create a table and put some data into it. So if you're familiar with SQL, you'll notice that everything below the first line of this cell is SQL commands that leaves this top line to be explained. So what we have here is a double percent sign and then SQL. This is how you call what's called a cell magic. If I hit tab while I'm at the end of these double percent sign, I will see a little pop up that tells us of all the different options we can have to change this into a cell magic. When I say cell magic, what this means is that this is a special flag that tells ipython that something different is going to happen for this entire cell. In this case, we're telling it everything after this first line is going to be a SQL query. As you can tell, there's other ways you can do this as well. You can have HTML, you can have bash. There's various other options as well, but I'm just showing you right now the SQL one. Now this is how you connect to a SQL database that's just stored in memory. If you have a different package, a different engine, then you can use the various documentation to tell you which connection you should use. So we're going to create a very simple small table called presidents. We're going to have first and last name and we're going to include the year that they were born. And I just have a random sampling of about 10 US presidents here. So running this cell, we get some output here that says one row is affected. We've inserted values into this table. And now we can actually run a SQL command that's in inline again with a single percent. When you have this command here, it says everything after it will be SQL. So we're going to store an object called later presidents, the SQL command and the results that come from the SQL query. The SQL query being select everything from the presidents table where the year of birth was later than 1825. And then I'm going to show you what that looks like by typing it there. So we see that there were three presidents that were born in that table after 1825. And if we took a look at the type of this return, we will see that it is actually a pandas core data frame. So we have returned a SQL query into a pandas data frame. And now we can use all of the normal tools and functionality of pandas directly. If we would like to write out this into a file, we can do that by doing this SQL three command here. So we make a connection to a new file. And then you run the pandas data frame method to SQL and say, we'll write out the presidents table to the connection. Now, if you don't want to use cell magic in this way, you can also use pandas directly to query our SQL database. So I'll show you how to do that from reading in that file that we just wrote out. So we're going to connect it out to this presidents SQL output. We're going to now create a cursor that connects to that connection. And we will create a new data frame by doing the pandas function read SQL. If you hit shift tab while your cursor is inside the parentheses, you get to see the various calls here. So we have the SQL command, you're giving it the SQL, then you're following it with the connection. And then everything else can be these many other options that you have to really customize it. And once you've done that, be sure to remember to close the connection by doing com.close. So the new data frame should have everything that we stored in the previous query. So the three presidents that we saved from above. And again, this is a data frame that was returned from that. So I just showed you two different ways that you can query databases. You can query them with an inline magic, or you can query them through pandas directly. And either one will return to a pandas data frame so that you can actually use the output in some exploratory data analysis or your full-fledged project. In this video, we'll be talking about how to actually use R in the Jupyter Notebook ecosystem. Previously, we talked about how we can actually set up different Python and R environments. To set up a unique conda environment for Python 2, for example, we can do conda create minus n for name pi2, for example, just as a descriptive name that you could use. We set the Python version to be equal to 2, and then the other packages that we would like to install. So anaconda, Jupyter itself, notebook. We do the same thing for the Python 3 environment. So conda create with a different name, Python 3, for example, and setting the Python version equaling to 3. We also do the same thing when we want to do an R environment. So in this case, conda create minus n, and we're going to call this Jupyter underscore R. And with creating the channel by minus C, R tells Jupyter and tells conda that you're actually creating an R kernel as well as the default other ones. And this creates the R kernel so that the Jupyter Notebook can actually run R natively, as well as installing a number of different packages that it thinks are both recommended and essential. And finally, a Python package called rpi2. The way to activate these commands is you say source activate and then the name of the environment that you created. And when you're done with it, source deactivate. And if you ever forget which environments you've actually installed or what the names you used were, you can do conda environment list. Let's do that to start with conda env list. And we see that there are four different environments installed. There's the root one, which doesn't really qualify as an environment, but then we have pi2, pi3, and Jupyter R. So let's source activate pi3 and say Jupyter Notebook. Once we start that, we can start a Python Notebook. And we see in the upper right-hand corner, not only a blue flag that says using the pi3 kernel just for a second before it flashed away, you actually see that it types Python 3 in the upper right-hand corner. Let's verify that by doing a print 5 plus 5 as a statement and as we can do in Python 2. And this doesn't work in Python 3. The syntax for Python 3 is with parentheses. All right, so we are using Python 3. Let's close and halt this and shut down the server by hitting control C twice. We can tell that we're using Python 3 because pi3 is at the beginning of our terminal screen right there. So I have to say source deactivate. Again, conda env list. Let's switch to Jupyter. The command is the same Jupyter Notebook. Now we can click this pure R example and it loads up R. Just in case you're curious, we can go back to this home directory and create a new, in this case, R. And this is an R kernel running natively. So you can tell again, look in the upper right-hand corner, not only is it not using Python, it's actually using the R kernel natively for this entire notebook. Let's go back to this pure R example. So what is it that R can do? R is a language that has some design choices that are slightly different than Python, but it does have a huge statistics library packages. So you load them in and everything you'll be done in this notebook will be actual R code itself. And again, just looking in the upper-hand corner, this is now R code. I loaded a few libraries here. These are some standard, actually really nice libraries in R, the plier package and ggplot2. This economics data comes when you load in the plier library and you see the head of this economics data. You can create a ggplot command by doing this R code here. And just like with the Jupyter Notebook, we're using Python, we see inline plotting so that all of the workflow is in the same really nice way where you can do this piecemeal exploring by looking at a single piece of R code in the output. Let's close and save this. And now let's open up this Rpy2 example. We are now running again a Python 2 kernel and we're actually using the Jupyter R environment. So Jupyter R environment can run Python and it can run R itself. It's running either one depending on what you started the notebook as. So we're running this one as a Python notebook. But here's a really nice feature of the Jupyter Notebook. You can intermingle Python code and R code in the same notebook. I'll show you how this works. So the top here importing numpy as NP. So again, just Python code, we're creating X and Y where X is this a range. Let's just look at what X is an array from zero to nine and Y is some random number plus the X variable. We import this library Rpy2 and load this extension Rpy2.ipython. So we load it by doing this percent magic percent load extension Rpy2.ipython. And you can do this in a cell that has other code. You don't have to make this a single cell. Just wrote it five plus five just so you can see that we've loaded in an extension and we have this other code running as well. So we have these two numpy arrays, a capital X and a capital Y. If we would actually like to do some analysis in R and then push something back into Python, we do that by now doing a thing called a cell magic. So cell magics are known by having a double percent sign at the very beginning of a cell. That means that this top line is a special thing that in this case we're having it. There's HTML and bash and various other options. We are using the R option and we are sending in with this input X and Y from the Python environment. So we are sending to R the two numpy arrays and we would like to get back from R this thing called XY coefficient. Everything else in this cell is R code. So XYLM is equal to linear model of Y goes as X. XY coefficient which we will be returning back to Python after this cell completes is the coefficients of this model. We're going to print the summary and we're going to make a plot. So run that cell and we see the formula call here, the residual, some intercept and X coefficients. And we have some plots that are displayed in our Python notebook. And again, we actually get our XY coefficient out back into our Python environment. So if you're a person who actually likes to use R just as much as you like to use Python or you like to use R for particular tasks or you like to use Python for lots of it, the Jupyter notebook is very, very flexible. It lets you work in whichever environment you prefer while dropping into the alternate Python or R environment to do just even a few pieces of it. So if you're in the middle of a long piece of data science analysis and you need one functionality from R, you can keep that not only in the notebook but passing it back and forth through native types. In this video, we'll be doing a somewhat more advanced topic and it's definitely 100% optional. We'll be talking about how to get into the guts of the Jupyter notebook system itself and create a post save hook, which will, for our purposes, save a script and an HTML file version of our Jupyter notebooks themselves. So how do we do this? The first step is to actually create a notebook configuration file. Now you can do that if you're interested in doing it in just your root environment or having this behavior be copied everywhere you are actually working on anything to do with the Jupyter notebook. Just go ahead and run Jupyter notebook generate config and I will copy and paste this into the terminal. So you can see what it looks like when you run this. The key takeaway here is this writing default config to now this should be your home directory dot Jupyter slash and then it's going to be this file called Jupyter notebook config. There's another way you can do this if you want to make this for a specific type of analysis. So maybe only the analysis you do involving housing data. Do you want to have a special behavior happen? You can do that in a somewhat roundabout way. You set this Jupyter config directory. It's an environment variable and set that to be a thing that doesn't exist yet. A home directory so tilde slash dot Jupyter save. You run a command that starts like this and then you generate the config. So I will show you what this looks like. So it wrote the default configuration file to dot Jupyter underscore save, which is the name of this profile and then the same Jupyter notebook config file. Now, running it in this way, you have Jupyter and configure before you do the actual command sets it as a temporary environment variable, meaning it's only set for that one command. If I try to echo this, I won't have anything stored in it. So I'm not exporting this as an environment variable. Now, I have a bit of code here that I'm going to actually toggle this header and this toolbar just to give us a little bit of extra space. I have some code here that I would like you to add to your Jupyter config profile file. So this Jupyter notebook config dot pi and instead of trying to type it off the screen, you can actually access it by typing HTTP colon slash slash b i t dot l y so bit dot l y and then Jupyter underscore profile. You click on that, you will go to the same exact code I have that I typed out here. In this case, I will actually copy this code and we're going to open up the file that we would like to modify. So in this case, we're going to be modifying this Jupyter save underscore Jupyter notebook config file. You can do with any text editor, I'm going to use sublime text, so sublime text open it up. Now, here's what the file looks like. It's actually a whole lot of things you can do to modify the behavior of your Jupyter notebook and they're almost all commented out. So you can read through this if you want to actually make different changes than what I'm going to recommend. But this is where we post just at the top this code, just a brief overview what's happening. It defines a function called post save, and it basically grabs the path of the notebook that's currently running, and it actually tries to run this command ipython nb convert to script, which means it's going to be a .py file if it's a Python file or a .r file if it's a r notebook, and an HTML file, which means that it'll just be the rendered HTML version of it. And the C dot file contents manager post save hook equals post save. So this is a way that Jupyter developers have allowed a person to make changes after every save that they do. So let's save that, and let's go back to our notebook. So let's list what's in this directory. We see the name of this current notebook is autosave other formats. I'm going to toggle that away again. So we see it here when I type ls. We can also do exclamation mark ls to do a command like this. And we see that when we save this, we see a checkpoint is created, but no other new files are being created. If we would like to see what happens when we run Jupyter notebook with this new Jupyter save configuration file, we'll have to run a command that looks like this. Jupyterconfigure equals this with Jupyter notebook. And in this case, I would actually like to save this entire thing as an alias, and then you can add this to your bash RC, or you can simply run this in a single line on your terminal. If you just want it in your terminal, however, it will not set it as a thing. So if you restart your computer or open up a new terminal, typing Jupyter save won't work. If you add this to your dot bash RC, then this special way of opening Jupyter notebook will be saved. So let's close this current notebook and let's type Jupyter save. And let's reopen it again in this new way. So we just opened it up. The list function down here should show us what we saw before. So we see the same files in this directory. When I click save, if our post save hook worked correctly, we will see autosaveotherformats.py and autosaveotherformats.html. So I'm going to do that after I click save type ls again. And we see that we do have two other forms. I have html and .py. Just to show you what those html and py versions look like, let's open that up. Oh, one last note. Every time you hit save, it will overwrite the same file a bunch of times. So it's not going to create new versions of this. It's going to just continually overwrite this and always keep the .html and the .py files completely up to date. Let's look at one of these html files actually looks like. So let's go back to the terminal to open a new one. So by typing open autosaveotherformats.html, we actually have the fully rendered notebook here. So what we see here is what we saw on the other page. And this is now the html version of this. This can be emailed somewhere. This can be posted online somewhere and people can see this. Now the links work like you'd expect and the code is all formatted and looks like it looks in the notebook. But since it's just an html file and it's not an actual notebook running, none of these cells are actually computable. I can't actually rerun these cells. So now we have a way of creating a post-save hook that lets us save out automatically html and script versions of any notebook that you're saving. If you would like to commit this to your GitHub repository for fellow members of the team to review in different ways, then having a post-save hook like this can save you tons of time and keep everything up to date. In this video, we'll be talking about a really fun topic called widgets. Widgets is an entire aspect of the Jupyter Notebook ecosystem that lets you do interactive things with the notebook. Let's go over to the notebook. This top cell has various imports, matplotlib, numpy, and so forth. This last line in this cell actually imports the ipython widgets. And we're going to import a number of sliders, a float slider, the integer slider, a toggle button, and this interactive thing as well. So let's execute that by typing shift enter. Now this next cell contains a simple formula. We define a Python function named polynomial. It takes three arguments, which has default values, so slope of 2.0 and intercept of 5 and show points, which can be either true or false. We're going to create some x values, which is just a linear spacing from negative 10 to 10 using 50 points. We're having a y value, which is just the slope times x plus the intercept. Everything else in this function is actually going to be plotting something. So this tells us the figure size we're going to use. The next line tells you that we're going to actually use a figure. The next two lines actually talk about whether or not the show points is true or false. If it says show points, we'll see what this actually does in a second, but it'll add the actual data points we are plotting up when we define this x at the top line here. Finally, we plot x and y and we set some window parameters and give ourselves some axes. The last thing we do is add this tight layout call at the very bottom. This just helps clean up the map plotlib plots before they're finally ready. So after executing this cell, we now have defined polynomial. Let's scroll down to this next cell. I'm defining a thing called a slope slider. This slope slider is called a float slider, which means it can actually take float values. That's what it's actually sweeping across. The value is 2.0, meaning that that's the starting value for the slope. Let's actually start this at minus 10 at the maximum of plus 10 and step size of, oh, let's say 1.0. The next line defines this object called w, which is interactive. The first argument you give interactive is actually the function that you want to be interacting with. In this case, the function we just defined polynomial and any other widgets that need to be connected to it. So in this case, we're going to connect the slope parameter that's given to the polynomial function to the slope slider. Now we call it slope slider, which is because we want to have a descriptive name. You can name it anything you want. The last thing we do is actually execute this w. Let's see what we see. We see three widgets that we can interact with, the slope, the intercept, and show points, which is toggle. Let's scroll down and I'm going to actually hide this toolbar so we have a little extra space. We have the slope, which is 2, and now you can actually click and drag this to different values. As you drag it to the right, you're increasing the slope and we can see that it's actually correspondingly increasing the slope of that line in the plot. We can also move the intercept point up and down. And as we know, an intercept just changes the y-positioning, shifting these things linearly up and down. And of course, the last thing is to toggle on and off show points. If you want to change this, we can actually make this much more sensitive by saying let's make the minimum minus 100, the maximum plus 100, step size of, oh, let's say five. Now, as we change the slope, it should be much more sensitive than it is because we're now at slope of 75. And as we go negative, we can see that as well. So as you can tell, having this kind of functionality at your fingertips is actually incredibly useful during all phases of doing a data science project, especially during the exploratory data analysis stage. So you can imagine if you did something like k-means to look at your data. You can set k, the number of clusters you're fitting for, the number of centroids. And as you can move that back and forth with the integer slider, for example, you can see how well the algorithm is actually clustering on that number of centroids. So being able to do that in an interactive way can speed things up quite a bit, and it's really nice. So this is a somewhat simple example that I just showed. Here is a much more complicated example, but just to give you a sense of what is possible with this kind of a thing. So I'm not expecting you to actually read this and understand the code that goes behind it, but let's just execute this real fast. This is one of the projects I was working on just on my own, where I want to actually have some random points in a small area, and I would like to interpolate with a spline interpolate those random points, and I wanted to see what that looked like at the end. So I can say the number of points that I'm randomly generating and splining between. And as I slide this to the right, you can see the pattern becomes more and more complicated. And as I slide this to the left, we get much simpler shapes. We also have a smoothing parameter here, which can give you a smoothing factor to these kind of more complicated shapes. It sort of unwinds the and rewinds up the knots and the alpha value, for example, like how dark this is. Or if I want to have a slight jitter to each of these strokes, I can add the number of brush strokes and then increase or decrease the jitter for this. So obviously there's a lot going on here, but this is one aspect that shows you just how, first of all, how quickly this can refresh, but also how useful it is. In this video, we saw how we can use interactive capabilities of the Jupyter Notebook to help us plot and look at data and change the values by sliding sliders around. In this video, I'll be talking about some bleeding edge developments in the Jupyter project. A specific thing called Jupyter Hub. If we were to go to Google, let's just search for it by saying Jupyter, then HUB, the top link will be this GitHub repository, which is Jupyter slash Jupyter Hub. And this allows, as it says, multi-user servers for Jupyter Notebooks. In other words, if you have a server where there's data being held for a data science team, you can run a single instance of this thing called Jupyter Hub. And it allows many different data scientists to log in and start a Jupyter Notebook on that server co-located with the data. Now, this is an active development. It's changing on weekly time scales. So if I were to actually show you how to set it up today, by the time you saw this video, it would probably be different from how you're supposed to be setting it up then. So for right now, I'll point you to this documentation and mention that it's actually very much bleeding edge, but I think it will be the future for data science teams. Just to give you a sense of what it looks like when you were to use Jupyter Hub, you can go to try.jupyter.org and hit Return. And what you're actually interfacing with here is a Jupyter Hub server somewhere in the back end, currently being hosted by Rackspace, apparently. And you can start a new notebook in any of these different styles, so Bash, Haskell, Julia, Python 2, or Python 3, R, Ruby, and Scala. So you can start a notebook here, and this is just letting you run a temporary quick one. You can also start one of these notebooks, like this Python one. And it starts with this warning. Don't rely on this server for anything you want to last. The server will be deleted after 10 minutes of inactivity. So that's important. This is just a demonstration area, so it's not for long-term storage of some sort of data science analysis, but it gives you a flavor of what the Jupyter Hub will be doing if you were to install this for your own sake. Now you can actually run this Jupyter Python 3 notebook, and you can actually see the fun results that come out from this. So we see some plots here, and everything works just like you expected to when you're running the Jupyter server locally, which is how all the videos I'm doing in this lesson are. Separating the server from the notebook aspect is that you can do something like this in the future, have the server being hosted on some server somewhere, and being able to access it just through the browser, and having the same exact functionality that I've been showing you for the entire course so far. And one last thing just to show you how fun this is, let's navigate back to our initials-try.jupyter thing. There's a couple other things you can do besides notebooks. This is true for the local server as well, but just to give you a sense of this, you can add a new folder, which is kind of unexciting. You just have a new unentitled folder here. Then you can do this new text file. So if you click text file, instead of starting a new notebook, you're starting a new file. And this is a lightweight in-browser text editor that has various options. You can choose what kind of key mapping you'd like. So I prefer sublime text these days as ways of interfacing with your text editor. So from here, you can do your standard Python, and you can both create and edit Python scripts or any kind of text file that you want to that's located on the server. And of course, renaming the file is as simple as clicking this top thing, calling it startup.py, for example. And once you do that, syntax highlighting gets turned on. You can save this and rename it, and then navigate back to the main server page. And the last thing to show you is that you can also start a terminal. And here you actually have the terminal for your tri-Jupiter. And this is the same case for if you're running this on a server. So you can actually have access to the terminal with all the functionality of a standard bash terminal there. So we see the startup thing we can copy that startup.py folder and call it something else. And going back, we should be able to see this. It's a very cool thing, and it will definitely be the way of the future if you have data science teams working and needing access to a single server somewhere that has the data in some database, for example. So Jupyter Hub, it will be the future. It is bleeding edge. So try it out. It should be pretty usable, but the exact instructions will be different from what I would say today. In this lesson, we'll be taking a look at organizing the overall structure for a data science team to be working on their various projects. So in this notebook, I'm going to use the slideshow button that we installed in a different video. And I make this full screen by clicking shift command F. The initial topic is questions to ask to organize the workflow of a data science team. So the first question is how many data scientists will be working on a single problem? And the high level view of this is to basically break this up into thinking about this in terms of Git repositories. What I mean by that is, if you have different data sources and different problems working in a single company, let's say, then you should definitely use different Git repositories. If you have fewer than 10 data scientists working on the same data, but working on different problems, it also probably makes sense to keep everything in a single Git repository, although it doesn't have to. If you have different concerns, feel free to break that up. And if you have more than 10 data scientists and they're working on the same data, but they're working on different problems, fundamentally addressing different data science issues, then I recommend using different Git repositories. And all of my recommendations will be within context of a single Git repository. The second main question to be asked is where is the data actually hosted? If it's small enough data to be loaded onto a data scientist's personal laptop, then it's very simple to actually just use the data on the laptop locally. So I would recommend just running the Jupyter Notebook as I'm doing in most of the videos for this course, where you just open up a terminal on your local laptop or local desktop and just run Jupyter Notebook. However, many data science projects actually use big data. They access the data on some other server or something like this. And in this case, you have a couple of options. The obvious one is to say, if you can access this server data via SSH and you can actually do work in a server, then you can actually run a Jupyter server on that server and you can SSH tunnel and forward your connection to that server. That way, both the data and the Jupyter server are on the same machine. Another option is to consider using a thing called Jupyter Hub. The Jupyter Hub would have to be installed on the server where the data is actually being held. And if I click this link, you go to this GitHub page here. So it can be found at github.com slash Jupyter slash Jupyter Hub. And you can see it's a bit more work than we can go into. It's a bit outside the scope of this class. But Jupyter Hub is a multi-user server for Jupyter Notebooks. And there's actually some really nice documentation to explain how this can be set up on a server or some AWS instance, for example. There's lots of installation instructions and things to work on here. So those are the main questions to be asking. At what level do you set the Git repository? And where are you going to be running this server? Are you going to be running it on a server somewhere? Or will you be running it locally on your local laptop or something else? Once you have those two questions settled, then the mechanics of actually how do you work on a Jupyter Notebook in a single repository or what we'll deal with next? In this lesson, we'll be organizing our work into two different types of notebooks. Conceptually, there are two types of notebooks I'd like to introduce. One called a laboratory notebook and one called a deliverable notebook. The difference here, a laboratory notebook is in the same style as lab notebooks that are actually in science labs throughout the world. And by that, a lab notebook keeps a historical record of the analysis that's been explored. So each day, a person goes to a lab bench, writes down the date at the top of the page, writes down what happened in lab that day for that particular experiment. And this record just continually gets amended to. It is also meant to be a place where there's development or scratch ideas or initial analyses, and it's very much not a polished piece of work. It is meant for record keeping of scratch pad type nature. And each notebook is controlled by a single data scientist. And by this, I'm talking about a Jupyter notebook where it is a single person single data scientists record of what they were doing that day and it is not shared by anyone else. Now, it's not secret people can look at it and you can upload it as well, but it's not meant to be viewed by other people necessarily. A few more final points on lab notebooks. Split the notebook when it gets too long and too long is just sort of a personal preference. As you start scrolling down the page as a point when a lab notebook or any notebook gets to the point where, okay, this is too much of a document to look at at one time. So then split it. There's no cost in splitting it. And you can think of this as just turning the page in a lab notebook. And finally, if you're working on a single day, you can actually split notebooks into different topics. So for the same day, you can actually have two different or more notebooks. And if you're splitting by topic, that makes sense as well. On contrast to a lab notebook, there's another idea of a deliverable notebook. As I work as a consultant, most of my work is actually going to be delivered either to a project manager or to a client. And these notebooks are different from lab notebooks in the sense that these will be delivered to someone to consume besides myself. Now candidates for deliverable notebooks can be any notebook that will be referenced in the future. By this, I mean, if I expect someone else to also use the same data cleaning notebook, for example, so I might have a notebook that explains how I took raw data and transformed it into the clean data that I use for the rest of the analysis. And I might provide a single link to a deliverable notebook, which is simply the data cleaning of the raw data. And in that notebook, I'll have things like what the actual transformations were, but also reasoning behind it and some documentation around it. So this is for anyone who wants to know how is this data actually cleaned? There's a single spot for it to look at. And obviously, of course, the final fully polished and final analysis of a data science piece of work will also be considered a deliverable notebook. I also recommend that deliverable notebooks should be peer reviewed via pull requests, which means other members will actually review the notebook before it's accepted. Other members can be other data scientists or it can be a manager or something else. And these notebooks are controlled by the whole data science team. If we think about these notebooks as living in a certain repository, for example, then the whole data science team will have these deliverable notebooks, which are in the same topic scope as the problem that they're all together trying to solve. So how do we organize the directories so that the lab notebooks and deliverable notebooks all are in their proper place? So these are the minimum directories, and I think it can be expanded by a few or taken away by a few. So I have listed here the directories I think belong at the top level of a data science git repository. The first one is data. This is optional. If you have very small data and you want to have it locally, it's possible to include it in a git repository. Generally, though, data science data is actually backed up outside of version control. It's in a different environment. So this is definitely an optional directory to have. The second one is the deliver directory. This is where the final polished notebooks for consumption. If a new data scientist is coming onto the project, they will look in the deliver directory to see what has been done before. In the develop directory, we store the lab notebooks, and I will explain the naming convention in a further video, but this will say all the scratch work that has been done by each of the data scientists working on this problem. The directory called figures will contain the figures that have been the output from both to develop and the deliver notebooks. I will be expressing a bit more on that in the future. And finally, a source directory where as you come up with various scripts or modules or anything else that needs to be, that's actual computer code that doesn't belong in a notebook directory, goes in a source directory. Again, you can add to this or you can modify this as you want to, but I think this is a good starting structure to work from and modify it as your needs evolve. In this video, I'll be telling you about my recommended convention for naming lab notebooks. So naming a lab notebook can be a more difficult problem than you might expect, especially if there's many different data scientists working on a similar problem. So to help with that, the following convention is what I recommend. You can obviously change this to fit your own needs. I recommend prepending each file name with the current date that you started the work on that notebook. So in this case, it was started 2015 dash 11 dash 21. I also recommend it in that format where it's the year dash the two digit month, meaning if it's three, it'd be dash zero three dash the two digit day like the month in zero four and so on. This is called an ISO 8601 formatted date, and it just helps with keeping everything so that it's sortable in a nice way. So the initial part of the name is the date that you started working on that particular notebook. The second piece immediately after that is the data scientists initials. So in my case, my initials are JBW. So I put dash after the date my initials, or you can put it if you have a data scientists with the same initials, you can just put some unique signifier that's the same every time. So that if you want to look at a directory that has many different data scientists notebooks, you can do an LS for that person's initials and find their notebooks. And finally, I recommend putting a two to forward description that describes what goes in that notebook. So in this case, Cole predict RF for random forest regression. So looking through this later on, I can think back, okay, what was I doing two months ago, something with random forest, and it was a regression. And on a classifier, seeing this in the title helps pick this out. In this video, we'll be talking about version control. One of the key questions you have when dealing with a data science team is how do you peer review code? How do you store analysis in version control like get? And I'm going to assume a number of further constraints. And I think this is probably the most restrictive constraints I can think of. This might not apply to you. But I think if it does apply to you, I have reasonable work rounds for each of the possible concerns. For example, imagine you have a project manager who would like to see the notebooks you're working on, but they don't want to install Python or I Python or anything like this, or consider that you might not be using GitHub for whatever reason. And some of the nice tools that GitHub has for showing diffs aren't available to you. Or if you would want to review the Python code itself and don't want to have to look at it in a notebook environment. How do I recommend dealing with these kinds of constraints while also maintaining a peer review of the code stored in the version control? The standard practice for my answer is that each data scientist who's working on the same problem in the same repo should have their own development branch. And each day or even more frequently than each day, but at minimum work is saved and pushed to the dev branch that they have daily, which means that anyone can then check out another data scientist development branch. When ready to merge to master, you have to do a pull request. So a data scientist says, OK, I think the deliverable notebooks as well as my laboratory notebooks are ready to be reviewed and pulled into master. Now the question of what exactly to commit. This is a question that people who come from a more software engineering background might start to recoil at my suggestions here. I say this after a lot of thought and there might be a better way of doing it, but this is the best way that I can come up with. So I recommend committing the .ipynb files, which are the notebook files, the .py and the .html of all notebooks, both develop and deliver. And I'll also say any of the figures that are saved should also be committed. Now, when I say the .py and the .html, what am I referring to? So I'll go to an open notebook right now. This is a notebook for making a prediction about call production. And this is in the develop folder of a certain directory. And I have this notebook that's currently running and you can tell it's running by the green symbol here and the words running green all the way to the right. So let's go to this running notebook and actually save it, save in checkpoint and download as a Python file. Let's download it to the same directory of develop, save that, and let's download this as an .html file and save it in the same spot. So if we take a look at what this is, it has taken all of the Python code and none of the output, but it's shipped out everything else in this file that's not Python code. And so you see this input three, input four, and so on. This is delineating the cells in the notebook, but everything you see here is actually Python code. So this can actually run as a .py or you can run it as Python, this file name. And this .html file, if we open up this file, we actually see the HTML representation of the notebook. So this is not executable. This is just a .html file. And so this can be copied into an email and read by anyone who opens this with a web browser. You don't need to run Python or IPython to actually see the output here. Again, the limitation, though, is you cannot actually edit this code and make a new plot, but this is great for being able to share a particular notebook. So I recommend saving both of those file types to your Git repository. And of course, all of the figures as well if you create separate figures. The reasoning behind that is that the .py files allows a person to make easy changes to the actual Python code itself, as well as to track those changes. The .html file allows a person to see the fully rendered notebook without having to run a notebook themselves. So the benefits of structuring your repository this way are several fold. First of all, you have a complete record of the analysis that includes dead ends. So if one day you worked down a single hypothesis and turned out that it wasn't very useful, that is still saved in the lab notebook directory. It also allows for easy peer review of the analysis and of the dead ends. If in the future, a different team member has an idea to try to do a random forest regression on the data, they can actually see if someone else has done the same type of analysis, and if so, what led to a dead end, for example. And finally, project managers can easily see and read the analysis with GitHub because GitHub itself renders IP, UI, and Bs natively. Or if you don't have GitHub access or not rendering it for whatever reason, if you save the .html files, anyone can actually see the rendered notebook without having to run any code themselves, or installing IPython or anything else. Some final organization thoughts of this whole structure. So organizing the workflow for teams is actually a difficult problem, and I think this is a very good framework for having some standards. And this bullet point about the wrong thing solves the problem. Often with version control, software engineering types think we need the source that's version control and we don't need to track the output, or that output is something that's blown away. In data science work, the output is often the thing we need to look at. For example, if there is a plot that shows some deviation, that plot is best viewed in the peer review process, actually in the notebook itself, or in an .html rendering of that notebook, because that gives rise to any sort of correction or reinterpretation that needs to happen. So the output actually is the thing that matters in a lot of data science work. So storing that in version control is actually the right thing to do, even though in typical practice it's the wrong to actually store the output. Finally, I am open to new ideas if you have a better way of solving these problems, or if your situation is completely different so that such that you will always be using GitHub, you never have to worry about seeing a rendered .html file. You can make these modifications by doing your own version of this kind of organization. So hopefully this gave you some structure to organize how a team of data scientists would work in a Git environment. In this lesson, we'll be getting some data that we can actually do some data science with. I recommend having a data folder in your projects directory that actually is at the same level as your deliver directory, your development directory, and your source directory. In my case, I have about 10 files in here that are coal data from the U.S. government. If you'd like to grab this same data set so you can follow along, go to www.eia.gov. This is the government's energy information administration website, and if you go to the data tab, you can scroll down to where it says production, give that a click. And there's lots of different data available here, but we're looking at the historical detailed coal production data available from 1983 to 2013. Select which year you'd like to do, and in case I picked 10 of them, click the arrow here and save it into that data directory. Once you do that, you'll then have the data that we'll need for this upcoming lessons. In this lesson, we're going to take our very first look at the data. We might even do some initial data cleaning. I'm currently in this directory where you can see we have data, deliver, development, and source directories. I'm going to start the Jupyter Notebook by, again, typing Jupyter Notebook. From here, we see the same directories I just saw in that directory. Let's open up the development list and start a new notebook by going over to new Python 2 notebook. From here, we see the familiar text box where you can type in code. In here, we see the code box is actually surrounded by green, which means as we type, it should be typing in text into that cell. We're going to need the pandas library, and we're going to import it as import pandas as pd. This can create alias for the pandas library to actually be called pd. This is a standard way of calling pandas, and I recommend you following the standards as often as possible. This lets you share your code with other people in the most seamless way possible. To run the cell, I can click the run cell button in the toolbar, or I can have done the shift enter technique, which, as you can see, increments which input number it is by one. The pandas version that I'm actually running is done by doing a print double underscore and then hitting the tab button. Hitting tab is a thing you should be thinking about doing quite often, because it often lets you make sure you don't have to type everything out. It's faster, but also make sure you are in the right vicinity of what you're hoping to do. There's a version, I'm going to hit return here, and then shift return, and it prints the pandas version that we're using, which is 0.17.0. From here, let's actually take a look at our very first data file. The way we can read this in, we happen to know, and here's an interesting side note, if you type ls and execute that, you actually see all the folders in the directory you're currently in. If you type ls up one, we see the parent directory, and if you'd like to look at what's in data, we see the files that we just downloaded in the previous video. Let's load in one of these Excel files and take a look at what's actually in them. I'm going to create a variable called df for data frame, and I'm going to df1 for the first one. I'm going to do pd.read, and I think it's going to be Excel, but I type the tab and I see an option pull up, and it is. It is pd.read underscore Excel, open parentheses. At this point, if you're not sure what a function does, there's a function called tooltip, which is generated by holding down shift and hitting tab once. Here it tells you the signature for this function, which has an input output, a sheet name, header, and so on. A lot of different options available for reading in Excel files. There's actually a longer version of this, where if you do shift tab tab in rapid succession, so it's a double tab, then you have the full doc string and the examples that go along with it. This is a very useful feature, so you can actually look up documentation on the fly, and it's very useful. In this case, we're going to try to load in the data from above. Again, tab completing commands will make your life much easier. As I start typing out this, I can hit tab and it actually produces again a list of possible data sources. Let's just see if this works. Head is a function on a data frame, and it lets you show the various options. We see that a number of things have happened here. First, we have the year, the MSHA ID, the mine name, the mine state. We actually see some of the data, and this is just the first few rows by doing head. I recommend doing head because it actually stores the full output of this. It's a separate thing that you can actually call. In future lessons, I'll explain exactly why using .head as best practices, but for now, let's just use .head to look into the contents of our pandas data frames. At this point, we've taken a first look at loading in some Excel data files, and we're going to start looking at this and playing around with it. In this lesson, we're going to take a look at how we can start to manipulate the data that we've read in in ways that are useful for analysis. Last time, we read in the CoalPublic2013 file and took a look at the header. The heading had an interesting, well, let's call it a problem. The historical Coal production data is the title here. There's a source function. There's also a bunch of nans, and all the columns are unnamed. This is most useful when this line, line 2, which is our row 2, is actually year MSHA ID, mine name. This is supposed to be the headers or the column names, and all the rest of it should be the actual rows of data. We're going to put the second row here up to the columns at the top. We'd also like to make this ID the index for the pandas data frame. We'll go into exactly why in the future, but for now, let's merge the reading in of the data frame with the printing out of what the head of that data frame looks like. We're going up here and clicking Edit, Merge Cell Below, because we've actually selected the above cell. So merge the cell below into one. So now that I execute this cell, we see that there is in one cell both reading the file and looking at the head of the file. Now, this is, again, wrong. We would like to remove this top part. So the way to remove this is we're actually going to use a thing called header and start giving it a number. Because if we look at this, we can see that it actually takes a header equals zero as the default value. So if we do header equals one, it actually deletes that top row. And so this is a way of telling the pandas that, hey, you don't have to modify that Excel file. You can just, when you read it in, know that there's two lines of header files. Now, there was two lines that had data in it, and there was a third NAN line that just, it knew it could not possibly be the header. So it removed that. So now the column names are these bolded ones are at the top. We're getting very close to what we actually want. Another thing we'd like to actually do is set the index. So we set the index by typing index and hitting tab because we think it's going to be something like set index or index set. And it's index columns equals, if this type, we like the name of it. So we would like to do the MSHA ID as the index column. And doing that, we see that the MSHA ID is indeed the index for this data and the columns are all appropriately named. This is one way to interact with the pandas library. But it actually applies to all Python libraries that have any sort of documentation strings. Just to give you an example of that, I'm going to save this currently and just show you example function, right? We define a function by typing def. We'll do it test function. Let's say it takes two values first equals five and second equals 10 and it will return first plus second. Let's give it a doc string and we execute that line. If we start typing test underscore f and then hit tab, it will automatically complete that because we have a defined function here called def function. We do the initial parentheses and hit shift tab. You actually see the doc string that we wrote just above. This is an example and it has the signature of it to the first equals five second equals 10. If you want to redefine what actually we give it, we can say first equals three and the test function gives us 13, which is what we'd expect. So that's just a fun side note on how the interaction with Jupiter notebook lets you look into the doc strings of functions that you define yourself as well as any of the libraries that you'll be using your data science day to day. In this lesson, we'll be making a new GitHub repository for a new data science project. So let's go over to GitHub and from GitHub, if you go all the way over to the right, you can create new repository. Give the repository some name that you think makes sense. So we'll do some coal exploration. So let's make a coal exploration repository name. You can give it a description if you'd like to. You don't need to decide whether it will be public or private. I'll let it be public so that you can see this as well. And generally, I like to initialize the repository with a read me. It get ignore file that's Python because I use a lot of Python code. And I add an MIT license. After doing all this, click create repository. Once you click create repository, you can go over to this place here where you can click SSH. You can have HTTPS or SSH. I just use SSH most of the time. Clicking once in here highlights everything. Command C will copy this. And going back into a terminal, type git clone and then command V to paste the required link. Hit return. And you will now clone the GitHub repository to your local machine. And from here, we see a new coal exploration folder being created. And if we CD into coal exploration, we see that it has a license and a read me file that we've made previously. In this lesson, we'll be taking our GitHub repository that we've just started. We'll first look at the data. So the directory as we last left, it has two files in it, a license and a read me file. We're going to create some extra directories and some structure around here. And I'll go through the reasoning behind this in other videos. But we're going to create using the make directory command, a data directory, a deliver directory, which is going to house the final deliverable important Jupyter notebooks, a develop directory, which is where we're going to mostly do our development place, place to put our source code if we have any scripts that we'll end up using. So separate from ipython notebooks, usually Python files or other kinds of scripts, we'll go in a source directory and a figures directory running that command. The folder structure that we have now has a data deliver develop figures and source directories. So let's actually get that data and put it into this directory. You might have already downloaded it. If not, again, the way to get this is to go to eia.gov slash coal. Go to the data tab down to production. And we go to the historical detailed coal production data. And let's just use the year 2013 for now. We're going to go into this coal exploration, navigate to the data folder and save. That is done downloading. You can see it in this folder as coal public 2013. Great. So let's take a look at this. We'll open up a Jupyter notebook and take a look. So from this top level directory, I will start Jupyter notebook. You can now close this download file. And you can navigate this structure similarly to the terminal itself. So you can actually click data and you see the coal public data that we had before. We can navigate back and let's go into the develop and start a new Python to notebook. It starts off being called untitled. And that is a not very helpful name. So I recommend using the date in ISO 8601 format. And the reason for that is that it helps with sorting. But basically it goes year dash month dash dates today is the 21st. After you do the date, I recommend, especially if you're working in teams to have your initials or some other identifier that creates it so that people know it's your notebook. And so I'm going to type my initials here. And then I recommend having a couple words that describe what you think you're doing in this notebook. So I think I'll just say a first look. So now I've renamed that notebook and it helpfully tells us when it lasted the last checkpoint. This means when it's been saved auto saves every once in a while. You can also click this button, but you just see that the last checkpoint saved. And you can also do command s, which is how I normally do it. So this means that it's keeping auto saved versions of this as we go along. All right. So there's a number of libraries that we'd like to import. And I import these almost every time and it starts off with matplotlib inline. So this percent sign at the top of the line means it's a magic import. And we also have to import matplotlib like so importing it as PLT is the standard best practice for doing that next we import pandas. And we should also import seaborne, which is a package that wraps matplotlib. Interestingly, you're supposed to import seaborne as SNS. I don't know exactly why, but importing it as SNS is the standard way of doing it. Also, if you do SNS dot set, it actually sets a number of the default parameters for matplotlib. So it already looks nicer if you just use it from there. So let's go ahead and start with that. And now let's read into a data frame, the data file that we just downloaded. So we say df equals pandas library dot read hit tab to see the options go to Excel. And we navigate to the directory by going up one directory by doing dot dot slash. If we hit tab, we also get the possible navigation options. It's in the data and if you tap again, it will have complete to say cold public 2013. If we actually execute that and take a look at the head, we notice that we again have this unnamed part at the top. So we actually wouldn't like to remember that it has a header. Set the headers equal to two and that correctly gets the column types labeled in there. And we want to set the index to the MSH ID. So if it's annoying, you set index by doing index something hit tab and its index column equals MSHA space ID. Excelling those two cells, you have the ID of the mine setting as the index of this data frame and all the data in here correctly parsed from that Excel file. Okay, so I'm going to stop it here and we'll begin to actually start to plot this and take a look at what this data actually looks like. In this lesson, we'll take a look at the data and do some data cleaning and maybe do some visualizations. Let's go back into this notebook and rerun the first cell here, load everything in that warning that we've seen before. Load in the data and take a look at the data dot head. So everything here looks normal. And the day to day data science work, you often take a look at what's in each of these columns. So we can just do a very quick look, for example, at a data frame and take a look at the company type. Now, if we have thousands of rows, we don't want to look at all of them, but we do want to look at the unique ones. In here, we see that there's three types of unique companies according into our file right now. We have what I think the word is supposed to be independent producer operator. The next one is operating subsidiary and contractor. Now, obviously, this first piece of information is that the data has some data quality issues. So let's go ahead and actually make a correction here for this data. We'd actually like to replace all of the independent producer operators with independent producer operators. So the way to do this in place is to actually do a company type to replace it. And if you don't remember the syntax for replacing, if you do a shift tab, you can actually see the tool tip come up. There's two ways to do this. You can say to replace equals x, the value in place, everything else. And we can also do it by giving it a dictionary. I'm actually going to do it the standard way. So to replace should be equal to, we'll just copy the words from above. And the value I would like to replace it with is going to be the independent producer operator. This cell is already becoming wider than the screen. So I'm going to actually hit return here so that it's lined up with the beginning of this. So you can say one later on can actually read this in a much nicer way. Suppose a DF company replace this thing and then do head on this. It should show us that it is indeed replacing the independent producer, but it hasn't replaced it in the actual data frame itself. To do that, we have to add an extra command here, which is in place equals true. One extra interesting, let's call it a quirk of the Jupiter system. If you're in line with the beginning of this command, if you do a tool tip by doing a shift tab, it appears. If you're not on that first line and it's broken up across multiple lines, then doing the shift tab in the middle here will not work. If you're thinking, is it in place one word or is it in underscore place? You have to do it up here to get the tool tip help. So it's in place one word. So I typed it down here. This will in place change the DF company type to be independent. So this has now been replaced in place. Now we also see that even though I could actually hit tab, which is a very useful thing to be able to call the column heading by just typing the beginning of it. Having these spaces is going to just make life a little bit more difficult than it should be. So what I'd like to do is actually go through all of the columns in this data frame and replace every single space with an underscore. So it's still readable, but I'd just like to actually do that. So to do that, we actually would like to do a name of the columns. So we DF dot rename index columns equals and keyword arguments. So you can say columns equals. Now this is a really fun trick because you actually pass a Lambda function. Lambda function says for everything in that columns, I'd like to do X dot replace. So similar syntax as above, but I replace all of the spaces with underscores. So the thing that's being quoted is the thing that's being found single space replacing that space with is the underscore. So I'd like to rename the data frame where every column space will be turned into an underscore. And of course, I would also like to actually make this happen to the data frame in place. So I say in place equals true now to check if that actually worked as we hope we can look at the DF dot head. And we see that underscore name mine underscore state mine underscore county and so on. So this with one line and very quickly typing it out replaced all of the spaces here with underscores. And this will just make life much easier as we go on from here. Let's also take a look at how big is this data frame. We have 1400 data points. And let's take a first look at just what's in here. So we just read this off as my name all the way through regions and average employees and labor hours. Let's see what the relationship between the number of employees for a mine and the number of labor hours looks like. There's a couple of ways we can do this. Let's see the simplest way I can think of is to do a scatter plot. So we can do PLT dot scatter and DF dot average employees. So now I've indexed the data frames column by simply doing a dot before it because it has a space in it. I would have to have done it the DF bracket space labor hours, for example. So this will actually work. You see that the plot actually works as expected. But now instead of having to type out labor hours previously with a space there, I can actually do dot labor hours. And that just makes my life just ever so slightly bit better. Let's label this. Okay, so just as we expect, number of employees goes up. The total number of hours worked at that mine goes up in a pretty linear fashion. Another way of doing this would actually be linear regression plot on this. And you can use Seaborn for that. So SNS dot regression plot. And I'll do, I'll pass it the X and Y this way. And so when you can see here, the regression plot does the same thing as above, but it actually fits aligned in the data and gives it a bootstrapping in the middle of it. This bootstrap is done by a confidence interval of 95%. And it bootstraps a thousand times the underlying data to actually figure out what the variance is. So this is a kind of neat, very quick way of getting an initial look at two variables that you think might have a relationship and they clearly do. Now, if you'd like to actually save this figure as in this isn't just to look at and have it for later on, you should actually save this figure into the figures directory. So I would do PLT dot save fig figures. And I like to actually have the same beginning date structure for these figures so that if I am looking through the figures directory later on across all the different notebooks that I'll be looking at, I can easily re-correspond which figure came from which notebook. So this is just a little bit of mental accounting to get this straightforward. And let's do employees versus hours. Let's keep our underscores and spaces being the same. All right, so that's our first look at the data and it is a quick linear regression plot against two of the features that we found inside, as well as a bit of data frame manipulation using pandas. We've seen a very first look at this and we see that there's at least some trends in this data. There's probably something pretty interesting in here. So I'll keep going with this data set and seeing what I can come out with this. Now I will actually remove this header and I will toggle the toolbar as well as I need space. So let me go ahead and do that. So previously we saw with seaborne a really nice regression of the average number of employees versus labor hours. Let's keep seeing what's in this data set. Let's take a look at the columns for column in. So these are the columns in the data frame. We have year and then various things about the mind itself, the name, the state, the county, its status and its type, the company type, union code. There's a coal supply region, the production in short tons and the number of employees in labor hours. So see if the amount people work, like the labor hours total is very predictive of the production in short tons. Let's take a look at that scatter plot. Let's take a look here. So it doesn't appear to be a fantastic relationship here. Let's take a look at the actual histogram of this. So I'll do df production short tons dot hist, which is a function on pandas. And we see a very bad looking histogram. So it looks like a lot of things in this first one, which is either typical of a power law or some other kind of problem. Let's do a few transformations on this production. Let's see if we can find the minimum value or yeah, let's take a look at the minimum value zero. Let's take the length of the data frame where this is equal to zero. So if we did first, let's just look at this where the production short tons is equal to zero. We have what's returned as a series that tells us false false true true false and so forth. So this tells us whether or not the production is equal to zero. So we say df where you actually give this as an argument to data frame saying where this is equal to zero. We get the full data frame where all of the production values are equal to zero. And it looks to be like quite a few of these things produced zero tons of coal. In the interest of how much a coal mine is producing, let's take the ones that have produced at least one ton. We will say the data frame where the production of short tons is greater than zero. This has, okay, values that are not zero. This is good. From here, we will now set the data frame equal to this. Now we are at this point doing a slice. So I will make a note here. We are removing data here. That's okay as long as you're keeping track of what you're doing and why. So the reasoning behind this is if we're going to try to predict, let's say the production of mines and use things like what state the mine is in as a predictive indicator. Let's actually restrict ourselves to mines that produced something more than zero. And that's the reasoning behind how I choose something like this. So now data frame is equal to where the data frame production values is over zero. So let's see what the length of data frame is now. Okay, so we have 1061 data points. Let's redo this one. I'm going to copy this and place it down here just so that we can do a comparison. And it appears to still have quite the skew distribution. So I will try to do something now where I will actually take the log of this. So let's create a new column. And the way to create a new column in pandas is to actually just create a column as though it exists and set it equal to a function of this. So I don't know if I have NumPy installed just yet. So I'll give this a try. So let's go to the top of the page. And in all of our imports at the top of the notebook, I recommend keeping them together so that if and everyone later on can see where things were imported, import NumPy as NPs. Now this input is 30. I've imported it and I should be able to rerun this one all the way to the bottom here and create a new one. So let's look at df.logproduction.hist. So what we see here is a very close to a log normal distribution. So the production of coal mines follows a log normal distribution, which is reasonable from first guesses. All right, great. So I think I'm going to stick with this as a thing we're going to be interested in predicting. So we have our prediction variable. Now at this point, we've done quite a few things to the data frame itself. So we loaded it in, we renamed the columns. We actually created what's going to be my target variable is going to be the production of these mines and did a transformation, which is the log of this value. So after doing all this, I think I would like to actually save out this data frame that I can load it into any future analysis. So I'll do df.2. Let's save it as a CSV. So I'll call it, let's find it in the data directory, coal public this thing. We'll do cleaned version of this. And it's a CSV. So now that I've done this exploratory analysis, I would have this first look that I've taken at and I've saved the data out into this CSV file. I'm going to copy this into a new one that's going to be called data cleaning. And in the future, all I'll have to do is load in this CSV file and all the transformations will have already been done. And I'll have a link back to the reasoning behind it as well as the actual code that does this process. In this video, I'll be cleaning up the data cleaning notebook and I'll be doing our first commits to a new branch to keep everything organized. I last laughed off with this first look and their develop directory. So what we're going to do now is actually make a copy of this and I will toggle the header for this. Make a copy. And the first thing it does is it opens a new tab with everything copied in the previous one. And none of the code has been run here even though all of the inputs have been copied. What we're going to do here is actually call this something completely different which is data cleaning. I didn't put a date in front of it because this is the notebook that's going to be the one that people look at if they actually want to see how we changed the data. So I'm going to actually close this from this directory, go over to my actual terminal here and move from the develop the data cleaning ipython nb which we just created into the deliver. So we move the file from develop into deliver because deliver is the directory that people should be looking at if they're actually interested in seeing the final analysis that matters. In this case, we don't want to hide data cleaning in this development directory which has many, many files. So we've moved it into deliver and if we go back to our browser here go up into deliver and open up the data cleaning. Now we should actually start to do things like actually creating the markdown file changing the code from code to markdown giving it a nice title and continuing on with this. So we can say Jonathan by Jonathan to say like who actually did this and then you can look it up in the get repo cleaned up the data removed zero production coal mines. You can actually do a bit more of that in the end but for now that should suffice. We don't need to actually have any of these plots in here. So I'm going to be cleaning this up as quickly as I can. So numpy as NP pandas as PD. We need to read in the file still. We don't need to see the head. We know what that looks like. This can be left in because it tells us the transformation we made and why the head part doesn't need to be here for the second one but we can add a note above it that says mistake renaming indipedent to independent. Now we're in here changing spaces to underscores double check that still looks right. Okay, it does and we will now delete this head, delete the different plots here and give an extra sentence here. Coal mines without any coal production are removed. The length is 1061 and we are now creating a new column called log production which is the log of the production of the data frame. And we can put we don't have any histograms here. We need that out and now the output file is this guy and I will actually move this to the top here to the output file. The very first thing you see here will be the name of the output file and the last thing we'll do is actually write that CSV to that output file. So now when I load in this cleaned coal public 2013 and notice that I did not overwrite the old file. So I strongly recommend keeping the raw files and creating a new file. That's the cleaned version of it so that if you ever made a mistake in your cleaning which has happened before, you can easily revert and change that back. And if someone says, oh, something happened in the cleaning process, you have a full documentation of what happened here. So we've created the final document that went through and cleaned up what actually happened in the cleaning process. So anyone looking in the future can easily follow what happened. So I will now close and halt this directory and I'm going to actually do our first commit and we are in the master branch as it sits. So I will actually check out a new branch. The branch will be called JBW underscore predict production. And so we're here. There's two theories here on adding the data. So the data here is actually pretty small. So I'm going to add it to this. This is also so that you can actually get the data as well. Generally in a production environment, you don't add the data to your Git repository. This is stored and tracked in some other way. So I'll add the data cleaning. I'll add develop and not going to add the figures just yet. I usually will only add this when I actually have something interesting there. So this figures is going to be kept on my own directory for now, not put into the branch just yet. Let's look at the status one more time. So we have a number of new files, the actual data file, the cleaned data file, the data cleaning that is the official way of actually making this file and this develop one. So let's commit this. Let's not call it that then. And I have to actually configure this. So I will configure my Git. Do this commit and continue this on in just a second. So commit the data and I will be pushing it to GitHub. So the final command I ran was git push origin JBW predict production. And this means that I have now sent this off to GitHub. Go back to the GitHub of the coal exploration, reload this. What we see here is the master branch where you can actually go to the JBW production branch and see the various things we've done here. Let's actually look at the deliver and click this IPYNB. And we'll notice that GitHub does a fantastically nice job of actually rendering the notebook as it looks correctly. And this is even more dramatic when you actually look at the develop one. So we can see this and you can see in here if you're browsing with GitHub, the figures are faithfully reproduced here. And this is a very useful thing to be able to look at the files being used and especially when we do a pull request in the future. Okay, so we've cleaned the data. We have the way that we cleaned it separated out so that anyone else can look at it in a reproducible way. And so let's actually try to predict something. So I'll go back into this develop directory and it will make a copy of the first look notebook that we had. So I'll make a copy of this and I'm going to call it CoalPredict. I'm going to go back to the previous tab and actually finish closing this and halting it. And just to give you a sense of how everything is standing, I'm now back at the home of this develop thing. You can see the first look notebook and it's currently black because it's not running. This one is green because you can see on the right here it says running. So this is a notebook that's currently being run. There's a couple of things I want to do different here since this is now the prediction one. When I start off by saying what the goal of this notebook is going to be and because everything that's here is a direct copy of the previous notebook, most of this stuff I'll just be able to delete. So I'm going to toggle the header, give us a little bit more space and the changes I'm going to make are basically going to drive me toward being able to make this new prediction. So first of all, I don't want to reproduce all this cleaning I did before. So I will actually instead of reading in the previous raw data, I'll actually go into and read the CSV that we saved. And this is up into the data directory and it's the cleaned public CSV. And we still need to set the index column to be the MSHA ID. So that's loaded in and actually one thing I like to do is look at the head of the data frame and read it in at the same time in case I need to make any changes. So the way to do this is since the four is selected with a gray box, if I hold down shift and type K, I'm selecting both the second and third cell which are index three and four. If I type shift M, they are now combined into a single merged cell. So let me just run this one cell and I read in the CSV and then you are seeing the head of that data frame as well. So we can see that we're loading in the cleaned CSV and the head is looking nice. I'm going to now delete a number of these things because we don't need them. One thing I will remain is that we initially did this LEN of the data frame before. This was on the first one that you saw on the raw data. So since this is the clean data, I expect this to be just over a thousand. Yep, it went to 1061. Simply delete these. I'll leave the number of columns in here so we can actually think about what's in each of these columns a bit. Alright, so as we see, this is the production. Longer the production is the thing that we're going to be trying to predict. And let's take a look at just a high level view of the different categories that might be able to help us. So let me get the columns here. I think that the mine status might be a predictive variable. So I do df.mine status. You see that there's an active men working, not producing, permanently abandoned, active, temporarily closed and new under construction of the different status types. I suspect this will give me a pretty good predictor into how productive the mine actually is. So I will actually do a group by on this to see what is in here. So df.mine status. Let's do production. What I did here was I said, take all the ones that have the same status of active and take the average or the mean of the production in short tons. And we can see that the active ones are much more productive than the temporarily closed ones or the permanently abandoned ones. It's interesting to me that permanently abandoned has on average 60,000 tons. Let's look at it in terms of the log of the production though. This will be what I think we're going to be going against. So huge difference in the overall production capabilities, but we'll see how good this is at making a final prediction. So from here is we would like to predict the log of coal mines. And we'd also like to know what actually leads to the production, higher production and lower production. If we look again at all the columns in our data frame, the data that we have year is the same for all of them. And various things that shouldn't matter at all. Like the union code is just going to be a code that's given to the mine from a, let's just look at that. Actually, that might be predictive. So I'm going to try to throw as many of these things as we can into a predictive model. So I'll call these features. And let's start with this as our list of features. We'll have our target be log production. So year is going to be entirely unpredictable because it's a single thing. Mine name, I suspect will not be predictive because it's simply the mine. The state might be what state is it in, what county is it in that could be useful. The mine status, I'm sure will be predictive. Mine type will probably be it's possible that the operating type, the address of the operating company probably isn't because we already have the geographic things done with the county and the state. Though it's interesting, we'll definitely have some collinearity between the state and the county. So it's possible that particular county and the state's good. We'll leave those in. Leave in the union code, the coal supply region. We can't give it the production of short tons as a prediction of the log of the production because that's cheating. The number of employees that are employed and the number of labor hours. Just to clean this up. So I hold down shift and push the down arrow key and I've highlighted everything to indent. I'm going to hold down command and hit the right bracket key, which is the square brackets. So the parentheses are curved all the way around. There's curly braces, which have a lot of curls in the square brackets. So holding down command and typing the right one will indent an entire block of text. If you do the left bracket, it unindents. This is a quick way of formatting lists. So the features that we're going to be giving our model are going to be all of these features here. The target's going to be the log of the production. Now of these, I think only two of these are actually numbers to start with. So I think average employees and labor hours are the only ones that are proper features. And the rest of them are what I'm going to call categorical. So the categoricals are these minus the average employees in the labor hours. And having a trailing comma here is actually okay. We need commas between all the rest of them otherwise. But this is one of my favorite features of Python. And I don't know why it makes me so happy. But having a trailing comma and having it not have a problem just makes me really happy. So the features, which I'm going to just call the ones that are numeric, are the average employees and labor hours. The categoricals are the ones that are category variables. So mine state, county, status, type, company type, operating type, union code, and coal supply region are all categoricals. One thing that we'll have to do is create, because we'll be using scikit-learn, we'll have to turn these categoricals into numbers or into some sort of numerical thing. And we'll be doing that with what's called a one-hot encoding. Also called dummy variables. There's probably a few other names as well. So we split this up into numeric features. So things that have numbers representing how long people worked, how many employees a mine has, categorical, which is what state or some other thing that actually has a category, and the target variable, which is log of the production. From here, we need to do a bit more data munging after it's all been cleaned. We now have to do some munging to make this into a form that scikit-learn can actually predict with. In this lesson, we'll be looking at the final data munging and the final prediction for this data. So I've actually changed up this slightly. So the features that we'll be looking at, these are numeric features to start with. The average number of employees per mine and the number of labor hours total worked for that mine. And also a categorical list. This categorical list contains features which have a small number of string representations instead of actual numbers. And again, the target we're looking at is the log value of the production in tons. So one thing that I recommend you doing is taking a look at the interplay between each of the variables and the target variable. So I'll do a quick example of this. So let's take a look at the relationship between mine status, which is a categorical variable, and the log of the production. I'll be doing that with this Seaborn code here, which I just executed. And the set context has to be run twice the first time. What this is doing is doing a violin plot. So this is the Seaborn library SNS, and it's creating this. It's using the violin plot function. And what we see here on the y-axis is the mine status, the five possible values, active with men working but not producing, permanently abandoned, active, temporarily closed, and new under construction. And on the x-axis, we see the log of the production. So you see that each of these mine status types corresponds to a different log of the production value of that mine. But also the distribution has this interesting shape, and it changes between these categories. This kind of a plot is a very nice high level view of what these variables interactions look like. I'll do just one more. How does company type corresponds to the production? So we see that there are three company types here, independent producer, operating subsidiary and contractor, and each of those corresponds to a very different distribution. So you can do this for all of the variables, and I recommend doing that, especially before and getting a sense of what the data actually looks like. But for us, we just look at this company type a little bit more closely. So if we do a DF company type dot unique, we return all the unique values. Of course, we see the three that we see in the plot above. An independent producer operator operating subsidiary and contractor. The scikit-learn functions don't take in these strings as separate category variables. We actually have to encode this ourselves. Now one way to encode this would be to do something like assign independent producer to be one, operating subsidiary to be two, and contractor to be three. And that would work except that we are then implicitly telling, let's say a scikit-learn random forest function that three is greater than two, which is also greater than one. And there's an implicit ordering there. And it might start to try to cut the features in a way that doesn't make sense. A more safe way to do this is to actually create what's called dummy variables. Pandas has a built-in dummy variable function. So we do PD dot get dummies on the data frame with just, we're looking at the single column of company type. And I'm taking a sample of 50 so that we get a mix of types, because it's actually ordered in this data set, and just taking a look at the top 10. So I'm going to run this a couple of times. This sample will actually re-sample every time I run it. So what we see here is the contractor independent and operating subsidiary, this MSHA ID corresponds to an independent producer operator, because it has a one in that column, and zeros in each of the other columns. And if you go down to this 4407123 ID, it is an operating subsidiary company, and it has zeros in the rest of the column. So this is what the get dummies function does with pandas. Now what we want to do is actually turn each of the categorical variables that we're looking at into dummy variables. And then we'll actually learn to drop one of the variables to avoid the dummy variable trap. We're then going to concat the data frames together. So we're taking the data frame and the temporary data frame together. And axis equals 1 means it will add it as columns to the existing data frames. And we will then drop the drop variable from the data frame and call that to list function on the columns of the temporary data frame so that we have a final list of what the dummy categories look like. Let's run that real fast. It completes very quickly. We see that there are 29 mine states, 164 mine counties. So this might be a little bit high. We might have to come back and look at that. The mine status, there's five, mine type 3, company type 3, and so on. And the actual value of the dummy variables themselves, let's take a look at say the first 10. We see mine state, Alabama, mine state, Alaska, and so on. So these are the different state variables that have been created. Let's actually start to build a model. So we'll say, so I created this as a markdown by typing escape to make me into select mode instead of insert mode and typing m, m for markdown. You can also go up here and click it. So if I could go back to code, this is simply commented out Python code as far as the notebook is concerned. We actually want this to be markdown. So we click markdown and you can see it pre-rendered before we actually execute the cell. And it looks like this nice bold font. We're going to need to import a couple of things from scikit-learn itself. So we're going to say from scikit-learn dot cross validation. So this is the sub module of scikit-learn. We're going to import the test train split function, which is labeled here. And we're also going to use a random force regressor as our algorithm. Loading that in, you look at total length of the dummy categoricals is 213. The train and test is going to be the names of the data frames that's going to be split by this test train split function. The function takes in our data frame. And you tell it how large you'd like the test size to be. So in this case, we're going to have a 30% of the data frame is going to be the holdout set. And the nice thing about this function is that we actually retain the data frame structure of these variables. Scikit-learn likes to think in terms of native numpy arrays, but many of the features can actually read in a pandas data frame as well. And the utility of having a pandas data frame around just makes it really nice to keep it, to stay in data frames as long as you can. So we can actually do it the whole way through. So that's really nice. Our train is a data frame. Our test is a data frame. And they've been split from the data frame that contains all of our data. So now we're going to create a random forest. And I would like to run these separately. So I'm going to split this cell here by typing control shift minus splits the cells into two. And I will execute this one. This says RF is an instantiation of this random forest regressor, which we imported above. And there's two things we're going to initialize it with. Number of estimators is 100. This is a number of trees that we're going to be building a random forest out of. And whether or not we're going to be using the out of bag score, which we are in this case. So we have an RF model and we'd like to fit on this by giving it x comma y and sample equals non as default. So the x value is the design matrix. The y is the target variable. So in our case, we're going to do the train data frame. And we're going to give it all the features, which is just those two average employees and the total laborer, as well as the dummy categoricals. Now, these two things together is just adding them together. It creates a large Python list. We can see the top two things up here at the top, average employees and labor hours, and then everything else is dummy categoricals. We then run the fit method on the random forest and we can get the design matrix of train features plus dummy categoricals and the target, which is train just selected on the target variable, which we defined above as log production. So it tells us some features or it gives us a little summary where it talks about the bootstrap, the criterion as mean squared error, various other things here. So this is all the variables that you can change very easily. If you'd like to actually tweak this for your own problems. So let's take a look at how well this does. And we're going to do this by giving a seaborne plot again, a regression plot, but except the train, we're going to be using the test data frame. So I test the target and the regression plot here is going to be in target versus what we actually predict this to be. So the actual is along the x-axis here. This is what the actual production is. And the y-axis is the predicted value. I can actually add that in. I think it should be there. So we say predicted production. So predicted production is on the y-axis and the actual production is along the x-axis. So perfectly calibrated and perfectly predictive thing. Everything would line along this one to one ratio line here. We see that there's some scatter around it, but actually it looks like it's a pretty good overall predictor of the actual production. We'd like to actually see how good is this fit rather than just look at the plot and say, oh, it looks pretty good. So let's import a few of the test metrics that we can actually look at. So we can say we can import explained variance score, the R2 scored, and the mean squared error. So the way these functions work, they always take in the true and then they take in the predicted. So this is going to be test target and then the predicted test target. And actually I think this way of writing it is a little bit too verbose. So I'm going to call it predicted equals this. And I'm going to say predicted here. So the R squared score is 0.88. Explained variance score is 0.88 as well. The mean squared error is 0.54. And now because this is a random forest, we actually have the feature importance of the model. And I don't know of a good way that's naturally given by scikit-learn to actually report this, but here's a little bit of code that I have written to make it so that I can actually read this in a way that I actually think is useful. So I'm going to create a new pandas data frame called rf underscore importances, which actually takes out the features and the importances from the fit model. And I'm going to look at that at the top 20 here. All of the importances of every variable we give it to in total adds up to one. So we can think of this as fractional importance in terms of what the random forest has decided is going to be discriminative in giving us a final regression score. So of utmost importance is the labor hours and then average employees is down from there. The mine type being surface is predictive. The mine county being campel and coal supply region powder river basin is apparently moderately predictive. And then it goes down from there. So this is just the first 20. And we have not only a final fit with a nice plot, we also have some diagnostics and metrics, as well as a list of what's important. In this video, I'll be showing you how to take a development lab notebook and turn it into a deliverable notebook. So let's go into our directory and we go to the develop folder. Clicking that we navigate into that folder and we see we had our first look notebook and then this coal prediction notebook. And what we'd like to do is make a copy of this notebook. So you can select it by clicking this checkbox here and clicking duplicate. When we do that, we have a second copy of this, which is added to the end of the name copy one. Now this file should exist in this directory and we see it here. Copy one. Because it's going to be a deliverable notebook, we should actually move this into the delivery folder. So let's move 2015 coal predict copy into the deliver directory. Go over to the deliver directory and let's navigate there with the notebook server itself. Let's open this up. Okay, so let's first give this a title that we think is an appropriate title. And because it's going to be a deliverable notebook, it shouldn't start with a date. So it should start with something like coal prediction of production. So we have a new name for this. You can save this and I'm going to toggle that header bar. So I have a little bit more space and I'm going to toggle this toolbar as well because I'll mostly be using keyboard shortcuts. So at this stage, we have this long notebook that went through and it's a complete copy of our lab notebook style. So we can delete things here pretty freely and just focus on the main story that you'd like to tell to either your teammates or your manager or whoever is going to be consuming this. So keep in mind with your audience what you think they would like to see and cut out the extraneous stuff and adding in as much text as you think is useful. And in that keyboard shortcuts, especially are going to be make your life a lot easier and make this whole process really fast. All right, so let's just go through this. And initially what I'd like to do is give a good title and you can just call it coal production in mines 2013, let's say. And so we have our first setup here and you can also give a little abstracts. You can say we did a lot of analysis, came to some interesting conclusions. Now, of course, fill that out with more verbiage as you see fit. Keeping the code in this notebook is useful so that someone else looking down the road can actually reproduce all the key results that you think you can find. Now, this isn't always possible, but as far as it is possible, I recommend trying to do it. So try to keep the imports neat and tidy. Keep only the imports that are required and remove the ones that are extraneous. I think we actually use all of these. I would recommend keeping these magic imports on their own line at the top. So having matplotlib inline at the top, that is good. Put a space between that. The Pepe convention is to have one of the standard libraries, like import string, let's say. That would be next and any of the other ones here, and then another blank line before third-party libraries, which is what these are. And finally, we have an actual plotting change that we make with this SNS command here. So we execute that cell and make sure everything is making sense. Yes, we see this warning, we've seen this before, so we're not too worried about it. Now, from here on out, we should be making decisions about whether this actually improves the story for the person reading this or if it becomes just tedious. And when you have data that's being imported and it's changed from the raw data, there's this clean data set here. I think it needs to have some extra commentary around it so that people know what's going on. So I might say... I might give it a description about where exactly it is in this repo, and let's just type an ls here. The name of the notebook is data underscore cleaning. So we will say the same thing. Double click, drag over, command C to copy that, command V to paste. And this ls command, which is handy, we can be deleted. So typing escape to get out of the insert mode so that the cell is now surrounded by a gray box. And then typing D twice, it deletes that cell. And in this cell, we are starting to write some markdown. We can tell it's markdown because it's just a text for people to look at. But also, we've put a double header marking too. So let's just change this cell type to be markdown. So we're currently in a code cell. We can change it to be markdown by typing M. And as soon as you type M, it switches into markdown and gives you a preview of what this will look like when you render it. So let's render it real fast, shift, enter. And we see that this is indeed bolded. This two pound signs, or hash signs, means it's a H2 heading. So this is H1, this is H2, and it keeps getting smaller as you go down. So in this case, I think clean data just deserves a second level heading. We said we clean this data in the notebook stored in this. So deliver slash data cleaning IPYB. So we've told people where this cleaned data file actually sits. And we actually know the exact steps that went through to take it from the raw data into this cleaned data, which we've pointed to here. This head is actually quite a bit of text, even though it should be the top five lines. So if we're going to include something here to make sure that the data is read in correctly, we might select a few columns that we think are useful. So in this case, maybe we have year and maybe mine name. And so we read in just the heading with those two columns. Okay, just to give people a flavor of what's in that data frame. This length we don't need to worry about. This column thing we don't need to worry about. So we delete with 2Ds. Now, consider the different plots that you have included. And is this something that tells a story? If so, leave it in and clean it up so that the axes and the colors all look right. If not, you can go ahead and just delete it. So I think this is deleteable, also deleteable, and finally deleteable. Okay, so we get to the point where we're predicting the production of coal mines. Again, we're just looking at what the columns are. We don't need this. Don't need to know what unique year it is. So this is required code, so we need to leave this in. Again, clean it up if it needs to be broken up into different cells or if you think it needs to be changed in some other way. So let's delete a few of these empty ones. And let's say we want to like to keep this. Let's decide one of these violin plots to keep. So let's keep the second one. So I'm going to delete this one. And to save this, I will say plt.savefig and using tab complete and it'll help us know where proper structure to put this in here. And as I said before, I like to give the same name, beginning of the figure that the notebook itself has. So in this case, it starts with coal prediction as the starting of this notebook name. So that looking at this figures folder separately later on, someone knows which notebook it came from. And then what it's actually being plotted here. So we have company type versus log of production. So company type versus log production. Again, we get a warning, but this should work out just fine. Let's run this a second time to make sure everything. Okay, so that looks better. Running at the second time with the set context actually lets the font sizes get to a nice reasonable size. Okay, so we are saving this output. We think it's useful for our story. We again don't need this or looking at this. So just typing DD to delete these cells. We need to create the dummy categoricals. This is required for our analysis. We don't necessarily need to actually print the categoricals each time. So let's run this comment out that line and just double check that that is the same answer as before. Okay, let's delete that. And we've made a note here about avoiding dummy variable trap. You might decide that that needs to be elevated from a comment and to mark down cell above it. Okay, so let's leave it as a comment here. And we don't need to actually look at the categoricals for the final report. So let's just delete that. Build our model. Let's call it a little bit something more descriptive. So it's going to be a random forest regressor. And we should always put all of the imports all the way at the top of the notebook. And so let's move this to the top. But first let's combine a few of the other imports. I think I have a few more imports down here I do. So let's move this, I'm going to turn on the toolbar and move this up so that it's next to the previous one. I'll scroll back down and see if I can find another import. It looks like it should be everything. A keyboard shortcut that I find that I'm using all the time and really saves me time is knowing how to merge and split cells with keyboard shortcuts. Knowing this will save you tons of time with moving your mouse around. So we currently have input cell 30 selected. We can type shift and hold it down and then type K. We will now select the cell above it. We can select as many cells like this as we'd like or unselected by typing J to go back down. Also, if we go J from here, we can select down from the current cell that's selected. But let's go up shift K. We have selected two cells to merge this type shift M. So we've now merged those two cells together. Again, you can do that for 10, 20 cells, or you can easily split them again. I've said multiple times, control shift minus, splits in part, escape, shift K, shift M, merges them back together again. So this needs to go at the top of the notebook. So I will put this to the top by typing this up arrow. So bear with me for a second. And we need to merge these two cells and then do some recombination. So shift K, shift M, type return to get a cursor in the cell. And we're importing things from sklearn, which should go after C-Born, for this set command. Execute that, and everything looks good again. Let's scroll back down to where we've made our progress. Down to here, we don't need the length of our demi-categoricals. We do need to test train, split our data. Let's merge these two cells by typing shift J, shift M, and let's just leave that middle line. Execute, shift enter. And look at our final plot here. And this looks like a reasonable good plot. Thing looks nice. Let's save it out again into the figures directory. Let's call this coal production RF prediction. Great. So we've now saved this out. And we can do our various scores that we'd like to do. If we're going to be printing out this output for consumption, we should make this look a little bit prettier. So let's just do this first one. And let's combine these two cells. So now we have the R-squared score and our mean-squared error scores. And finally, our random forest importances. And let's just look at the top five. So the top five are labor hours all the way down. Cool. So we've done a lot of rearranging of the code. So at this point, I think it's crucial to restart the kernel and try to run the entire notebook again. If you have some process that actually takes a very long time, you can decide not to do that. But this, you'd have to take a little bit more care into making sure that each piece runs correctly. But in this case, this entire analysis runs very quickly. So we have no problem clearing all outputs and restarting. And clicking cell run all should run every single cell. If we've deleted some piece of code that was necessary, we'll have an error and we have to go back and correct that. Let's go through all the way down to the bottom thing was actually done. If there was an error, so let's say it would stop at this fifth cell here. It would have an error printout here and nothing else would be executed below that when you do this run all cells. That's a good way of identifying where the error happened. We don't have an error, thankfully, so that's good. We do have something that is somewhat annoying to me that this has to be run twice. As we can tell, we run this a second time we get our font gets bigger. So I think I know what happened. I set the context after I set the figure. So I'm going to re-align the order of these two pieces of code. Save this, restart the kernel, clear all outputs, cell run all. And now we see that the font size is the correct size and we've run all the way to the bottom. And each time we run this, do note that we are overwriting these figure files, which is what we were hoping to do, but also keep track that is what you indeed want to do when you're running this. I guess a good thing to add at the end, of course, would be some sort of conclusion, so we can just add a conclusion statement. Okay, so a detailed and amazing conclusion goes there. So we're done with this. We will close and halt and we need to submit this to GitHub. So we can do a get status back at our terminal. We've modified a figure. We have added a figure and we've created a new file. So let's add those type get status to make sure we know what we're doing. We are adding two new files or modifying another file. This looks good. So get commit, get push, origin, Jonathan prediction production. And this should be sent up to GitHub and everything is now up to date. So let's go to our get repository. So in my case, JBWit Coal Exploration. And there is a new branch which we can click on. And if we click on the deliver, we should be able to see our Coal Prediction Production Notebook, including all of the code and everything else in here. In this video, we'll be talking about how to do a pull request and how to merge this back into a final branch so the team members can review it and check off on it. All right. So we last left us. We had just put in our deliverable notebook that talks about the Coal Prediction Production. And so at this point, after pushing it to master, we have this branch. If you go back to the home directory under your username and whatever you've named your data science project, you can actually see this button here called new pull request. And I like to switch to the branch that I'm going to generate the pull request from. So this is all predicated on using GitHub as your repository of choice. So after you click new pull request, you'll ask you to do one last step here where it'll say you're creating a new pull request by comparing changes across two branches. You're going to be taking stuff from this Jonathan Predict Production branch and putting it into master. And GitHub does this nice thing which says it's able to be merged, which means that if it's approved, it can just be approved at the single button click. That's always nice. So give your commit an extra bit of detail here. So say something like final review. And then if you want to leave a few more comments, create pull request. So now what this does is it creates a pull request and lets you see the various commits that have happened in this branch and allows a person who can possibly merge this to review the pull request. So a person coming into this would see who's not me, for example, would look at the pull request and see that there's one open pull request. And it was open 25 seconds ago by me. So if you click on this, then you'll see the comment here. Please check the figures especially. They're going to be put into a slideshow. Okay, so this must be pretty important. And so I'll take a look at the different files that were committed. So I'll click to the files changed. I see that we have a couple of notebooks and we have a couple of figures. So let's take a look at, let's say this current figure here. This one was added. Let's say we want to change that color. So in the pull request, you can actually make changes. And this is where you actually wanted to be doing this. You click in the conversation part of the pull request, say, I need a few changes. Add a comment. Now, of course, I'm commenting on my own pull request. Normally what happens is you make a pull request and your team members or your manager will be actually the one reviewing the pull request. But in this case, just for demonstration purposes, I'm both the submitter and the reviewer just so that it's easy to see what needs to happen. So added a comment. I need a few changes. Please change the figure to be green. Okay. Now that we go back to our terminal, we see that still on the Jonathan prediction production branch, so we'll need to make some changes to the pull request. So this is actually pretty simple. So I'm going to switch tabs back to our deliver directory that is running under the Jupyter Notebook server. And so let's go into this cold predict production and make the requisite changes. Now we'll have to actually shift return and work our way through this so that everything is loaded into the namespace. So that one is probably the one that should stay the same. We get down to this one here where sure enough, the figure itself is printing something that's blue. We want to change this color to be green. Okay. In this plot, we will actually make the color equal to green. C is not what it takes as a thing. So we'll see if color works and color is indeed the keyword. Okay. So changing the color to be green, the figure is now green and we have overwritten that figure file. So cold production RF prediction is now a green plot rather than blue. And so we can want to redo everything just to make sure that you haven't made any catastrophic changes. You can do this one more time. Takes just a few seconds to go through the entire pipeline and save this file close and halt. Go back to your terminal, get status. Two things have been changed. And that's as we expect. They changed the notebook itself that created this figure and the figure itself. So let's add those two files. Those two files have been modified. So we then get push origin, your branch name, and it's now updated on GitHub. The nice thing about how GitHub handles these pull requests as a tab back to this Chrome tab, this commit is already added now. You actually can see the commit that was done here. And if you click on that commit, you get to see that things that were changed. So the few things were changed in the IPYNB, which is not shown partly because the actual changes in the notebook don't look so great. But the change in the figures has been changed. So this figure, the blue one was deleted. And the one on the right, the green one was added. So this is one of the reasons that changing it in the notebook, which it actually did. So it changed the embedded figure in the notebook. It's hard to see the differences there. This is why I advocate creating these figures in a separate folder and a separate PNG file for each of them. So you see the diffs in the figures if you have feedback on the output. Now, as an extra piece of sugar or something nice that GitHub has given us, there's this to side by side approach where you can see what was deleted and see what was added. You can also choose the swipe option where as you swipe this thing across the figure that you've just done, you can actually see the changes that have been made, which is turning the figure green. Last one is onion skin where it fades from the entire thing from behind. So this is what it currently is. And previously it was blue. You can see this. So having this functionality is actually really nice. And another reason why I advocate for this figures being submitted separately. Just a final note, you saw that the points are slightly different in this swipe. And that's because during our test train split, we were taking a random selection of points that were going to be the testing set and the training set. So those differences, well, shouldn't matter much and they don't change the actual scatter points, but the fit itself, as you can tell is almost completely unchanged. It's actually a nice robustness check to look at this as well. So once I've looked at these changes, I can now go back to this pull request branch. So I need a few changes. Please make the figure green. I committed made the figure green. The only thing I need to do to update this whole threat of changes was to just say get push origin branch title. So I'll say it looks good to me plus one. And then clicking merge pull request will take everything from this branch and pull it into the master branch. So I'll say figures ready to be put into a slideshow. So once you pull request is successfully merged and accepted, then you should delete the branch to keep these branches from floating around. So I just deleted the branch on GitHub and should now do the same thing in your local environment. So first I'm going to check out master and I'll say get pull origin master to pull everything down from GitHub and all these changes have been made and say get branch minus D Jonathan predict. So I've deleted the prediction branch and get does a final check to make sure that any of the changes that have been made on that prediction branch have been already pulled into master. So if you just try to do this and it doesn't think it's been fully merged, you get an error at that point and you have to figure out what happened at that stage. In this video, we just over reviewed the basic process of going through a pull request and how the peer review process works in a pull request. So we saw how to merge our development branch into master after doing a pull request. In this video, we'll start our data science project number two. And in this project, our main focus will be to focus on various plotting and statistical libraries that I think you should know about. All right, so to start a new data science project, let's start out by going to GitHub and signing in going up to the plus by our little icon and clicking on a new repository. So we can call this data vis project to in this case and give it a description that says I will make it public. So you can see this project as you go forward. We'll initialize with a read me. We will include a Python dot get ignore. We'll add an MIT license and create the repository. Once we've created it, go to this SSH option, click in this box. It'll select all the text by default command C copies it, go back to our terminal, say get clone and then command V to paste that URL. All right, so let's CD into data vis projects and look at what we have here. And we're currently on the master branch. So first step, let's create a development branch and we'll call it Jonathan vis and let's create our normal directory structure. So we have data deliver develop figures start with and I happen to know that I've already started a few of these notebooks. So I'll move them from a previous location into our develop folder. So let's look at our develop folder. Okay, we got some stuff there. And now that we have a new branch and we have a new directory structure and some stuff to look at. Let's start up the Jupyter notebook server. All right, so we see the same directories we were just looking at in the terminal. I will now right click on this tab and pin this tab so that it goes all the way to the left and stays in place so that if I have a lot of tabs because I'm searching for a bunch of different things, I always know where to go back to find the home server directory. And I just find that useful to pin that tab all the way to the left. All right, so let's take a look at some of the notebooks. I've already pre populated what I'll do here is I only have my usual date and then my initials at the top of the page from the actual name of my notebook, just including your short description, which is exploratory data analysis, which is pretty long title. So I'll do all caps EDA and that is a standard way of talking about that. So I'll view and toggle the header and toggle the toolbar just so that we have some extra space. Remember, if you want to save it when you're in this kind of configuration, you just command S to save it. So one more time, I'll just give you a brief overview of what I'm hoping to do here. So this isn't to teach you how to do data science. It's more of an exposure to the tools that I think most people haven't seen all of them or haven't seen enough of them. And I just think these tools will allow you to do your data science much more efficiently and usefully. I'll go over a few of these plotting and statistical packages that you might not know about. So the first thing we have is importing map plot lib inline. Almost all these plotting libraries uses map plot lib. So I'll be using that for now. And I'm importing map plot lib dot pie plot as PLT, which is the standard way of doing that. Seaborn as SNS, which is the standard way of importing Seaborn, importing pandas as PD, NumPy as NP. I'll also load in some data sets from scikit-learn and importing some stats models, which I'll be talking about at length in a later video. Execute this cell. Now, if I do shift return, it will execute it and go to the next cell. If I hold down control and hit return, it will execute the cell in place, and it won't go to the next cell. So I can continue to stay in the same cell if I hit control and return. I've used Seaborn in other videos, but I would really like to just double emphasize how useful this is. You can find the main library for this by Google searching Seaborn, and Seaborn Python should do it. And the top result is the statistical data visualization library here. This is what you should see, something like this, unless he's updated the page. And this website has a lot of really good information on it. The documentation is excellent. The features with these different tutorials is also excellent. These images that you can click on here will show you different capability, the tutorial and the gallery. If you click on gallery, you get to see many different visualization types that Seaborn makes really easy, especially like heat map. That's a nice one. Look through the example gallery. If you have some data and you have some sense that you should be able to visualize it in a way, see if Seaborn has a response to that. So let's go back to our notebook and load in some data. So Seaborn SNS has data sets that you can load in by default. We will load in the Titanic data set. This is actually the data of passengers on the ill-fated Titanic. And it has various information about them, their age, their sex, their class of ticket. So first class, second class, third class. And it talks about whether or not they survived the crash. So doing a factor plot like this where you set this G object to be equal to this factor plot and then modify the G label like this. This is modified from a Seaborn example, commenting out this hue equals sex line. And I'll talk about that in a second. But I will shift return and execute this cell. What you see here is the survival probability against the class of passengers on Titanic held. You can see that first class had by far the best survival probability, followed by second, followed finally by third class. So this is a very nice high level summary of the data that underlies this. Some of the nice things about Seaborn is that you can actually give it dimensions to also give you the same plot. So let's uncomment this hue equals sex line and see what that does. So what you see here is each of these classes is now been split out by sex. So male and female, survivability for first class. You can tell the very high difference in probability for surviving in each of those, whether you're male or female in each of the classes. So this tells you a more rich and deeper story of the underlying data set than the previous plot. And you can see the first, second, third class, all of the different responses here. So this is just one aspect of Seaborn. I recommend getting to know it and use it as much as you can. And that's going to be all for this video. We've set up in this video a new Git repository. We've started a new development branch. We have our directory structure set up as we like to do it for our data science projects. And we've taken a look at the Seaborn visualization library. In this video, we'll continue to look at some visualization methods and techniques. So let's go on to exploratory data analysis two. Again, it starts off the same way with Matplotlib inline and the various other things being imported. This warning message, which we can ignore for now. So we will load in this Boston data from the scikit-learn data sets. And we will first of all print what the data dictionary describes it as. The way this load Boston gets imported, I'm calling it a data frame dictionary and just calling this description key. So let's toggle the top header and the top toolbar to give us some extra space. And we see that this is the Boston house prices data set. Now, it's worth reading through this data set and knowing what each of these attributes actually means because if we're doing a deep data science project, it's really important to know the attributes, especially if there's only 13 of them. But what the main takeaway will be trying to predict the median value of the house and by looking at the 13 categories that predict this house, we have 506 total instances of this data set. The different attributes are crime, we've written as CRIM, all caps. Zone or the proportion of residential land zone for lots over 25,000 square feet. Indus, which is a proportion of non-retail business acres per town. A dummy variable where if you're next to the Charles River, then you're equaling to one, otherwise you're zero. The nitric oxides concentration in parts per 10 million. The average number of rooms per dwelling. The proportion of owner occupied units built prior to 1940, which is age, weighted distances to five Boston employment centers, distance. Rad is index of accessibility to radial highways. Tax, the full value property tax per $10,000. People to teacher ratio by town. The B, which is the formula that says the BK is the proportion of blacks by town. L stat, which is percentage of lower status of the population. And median value, the thing we are tending to be predicting, which is median value of the owner occupied home in terms of 1000s. This is the information that the data comes from. So it's from Harrison and Rubenfeld. And this is all the information about exactly where it was taken from the stat lab library maintained at Carnegie Mellon University. So this data dictionary as it comes from scikit-learn is not in my favorite format. It's this weird data dictionary. If we actually say type on this, it'll be this weird like data set bunch. So instead of using it in the form that it's given to us, I like to convert this into a panda's data frame because those in my view are much easier to use. So we'll create a data frame called features. I'll create a data frame called target. Now features will take the DF underscore dict, which is the the scikit-learn bunch thing. And the dot data element and assign the columns to this data frame to be the feature names. We'll also do this with target. So we'll do this with another create another pandas dot data frame to create the data frame. And then it'll be this DF dict dot target. So run this and we can look at the head of the features by doing dot head on it. So here are the different values of the different features for the first five elements of our data set. We have the crime number here, zone, the industry. Are you close to the Charles River, the nitrous oxide, average number of rooms, the age, all the different features that we're reading about before. If we look at the target, we would see that it's a single element or a single column data frame. So what we'll like to do is actually for most of our visualization, we will like to put these two things together side by side. Well, we can use concat for that pandas dot concat. We give it a list of the data frames you'd like to concatenate together. And we have to tell it which axis that we would like to use. Now, I'm sure there's some very useful mnemonic that will tell us the right way to do it every time, but I prefer to not trust that I remembered it correctly, but always test that I have it right. So if we start out with axis equals zero and look at the head, we will see that it's trying to combine it in a way that they're stacked on top of each other. And there's two ways to know this. One is that everything has a value except for medv, which is the target data frame. All of them have nans. And if we were to look at the tail, we will see that everything else has nans and medv has values. That's one way to know that we've done it wrong. So this is trying to do some sort of concatenating the two data frames vertically. And if we do it axis equals one, we will see that we've put them side by side, which is what we actually want. And let's look at the head. We will see that all of them are here, including medv being the very final column in this data frame. So we now have a new data frame called df. It contains a target and the feature variables underneath it. Now to give you a sense of the data underneath it, there's many different ways you can slice and dice this. One very simple quick way to start with is to iterate over all of the columns of the data frame and to print both the column name and the number of unique values in that column. For column in df, the data frame columns, print the column name and df of the column, the number of unique values. This n unique is a method you can call on a data frame. So there are 504 unique values in crime and there's two totally unique values in chance, which is a boolean value. Makes sense, we'd expect that. Some of them are pretty low. So our ad, for example, is at nine. Some of these have many values and they're continuous values. Other of them have smaller numbers of possible values. You can see rad here is this kind of numbers here. One thing you might not know is that pandas not only has fantastic data frame support, but also has some very useful plotting tools. So in this case, we will be importing a thing called scatter matrix from pandas. And this can be done in a couple of libraries as well, but let's just look at the pandas version of this. Recreating a figure with some plots in pi plot, making a large figure 12 by 12 fig size. And we're going to call it on this data frame with some see-through value of alpha and the diagonal will be KDE, which is this kernel density estimation plot that we see here. Again, we see a warning that we can safely ignore, but this is a very information dense plot. There's no way to go over all of it in this video as we look at it. But this, if you have your own data set, will give you a lot of things to look at. What is being plotted here on the x-axis and the y-axis is every possible pair of the two columns in this data frame, which is why it took a while to actually plot this. Along the diagonal, this KDE plot, it's showing interactions with itself or basically the histogram of that variable itself. So this is what medv looks like. It's just this histogram here. Along the diagonal, it's just a histogram of the values of that variable. Everything else is going to be what the response from this variable looks like with every other variable on the x-axis. So you can see a number of really nice trends here. You can see some kind of this U-shaped trend here. We see something that's basically a straight line, which means there's not much information there at all. That's from the Boolean value. We can see some of these have very fuzzy relationships where it's not really showing anything very interesting. But spending some time looking at plots like this, getting to know your data set is a vital part of data science. And I highly recommend looking at this. If you have far too many columns to look at it in one, I would say this is probably too many. If you have even more than this, though, you can take subsets of this and plot this with the same command, but you would be giving it a list inside of double brackets of feature one, feature two, and so on. And this will plot just those features against each other. So there's a downside of that is that you're not getting all of the interaction terms, but if it's a trade-off between possible to view in one screen or not look at it at all, I recommend that. Okay, in the last video, we last looked at this scatterplot functionality within Pandas. In this video, we're going to continue taking a look at this data and some of the plotting functionality that's built into the Pandas library itself. Just as a brief overview, again, this scatterplot gives you a very nice, fast way of looking at all of the interactions between the terms in your data frame. If you suspect that there might be something interesting going on with, let's say, rad, we see something happening here, or this diagonal term for rad, the intersection of rad and rad on the X and Y axis. You see a histogram plot or a KDE plot that shows a very bimodal distribution. So you can take a deeper look into that and see what it looks like by selecting that column by saying df of rad.hist. And we will see this bimodal shape really appear again. So it's really values that are greater than 20 and then a bunch of different values that are around 10 and lower. You can also, of course, select it if you have a nice column name. In other words, there's no spaces or any other characters in that column name. You do the same exact thing by doing df.rad.hist. See the same exact plot. When you see a feature like this, in this case, it might not make sense, but if you have the thought that, you know what, let's actually consider this as two separate groups. This bimodal characteristic should actually be characterized as really a high group and a low group. One way to do this is to apply a lambda function, which will create a Boolean value of these values. So everything down here gets one flag of the low group and everything up here gets the high group. And so we will build up this command below by getting some intuition here. So let's grab our data frame like this. This apply function is a method that goes to the column that you've selected in your data frame. And there's a number of ways you can actually call this apply. You give it a function and the default axis is zero. You can do it in various other ways, so you can access equals one. But in this case, most of the time you'll end up doing a lambda function, which is an anonymous function. It's like you define a function in Python, but you don't give it a name. You're giving it via this apply method every value in the RAD column. And you're saying for each of those values in that column, is it greater than say 15? So 15 is clearly going to split us into the low and high group. And let's just take a look at the first few values of that. So I did not head on that to give us the first values and we see that is this X value greater than 15? It was false, false, false, false, false. And if we want to look at just what that head value looks like without the Boolean, we see that it's 1, 1, 2, 2, 3, 3. So everything here is indeed less than 15. So we have this function call, which will return a Boolean series false. And what we'd like to do is say we want a new column in this data frame. We're not going to overwrite this column, but we're going to give a new data frame that we're going to call radian underscore bool, because we want to have a nice descriptive name of where it came from. And the way you create a new column in a pandas data frame is you give a column that doesn't quite exist yet or doesn't exist yet in the data frame and assign it equaling to something else. So in this case, we have this rad dot apply lambda greater than or equal to 15. And I'm just adding this as type bool. Just to give you a sense that if it doesn't automatically get incurred into a type of bool, which we see right here, the d type is boolean. You can force it by doing this as type. There's other times when this is useful as well. So I'll just leave it in here as kind of a best practices or a hint for future ways if you're trying to do something similar and having some problems with it. So we've just created a new column in the data frame of rad underscore bool. And if we look at what the type of this single value is this I location of zero is a boolean. Let's take a look at the histogram on that now that we've created this new column. And we see this perfect bimolality of 0 and 1. That's one way if you have different features that you want to create. It's very flexible to say if it's greater than 15, give it as bool. You can also do something if you had a trimol tool or so three different groups or various other ways of slicing this. Any function you can think of that can be written down in Python. You can then use to filter out the columns and I recommend creating new columns, but sometimes you can overwrite columns if that makes more sense. So after doing this we have another seaborne plot that's called a pair plot and let's execute this and then explain what's happening here. This is very similar to what's happening above in the scatter plot where we're having the same x value versus y value and the where they intersect. So this medium value here is the same intersection of medium value on the x and y axis. Instead of a KDE or a kernel density estimation, which is that line, we did it with a histogram and that is a flag given right here. I guess it's just the default value. It's under dyag kind equals hist. And if we did KDE it would give us the KDE plot as before. There's one difference here though where we've given an extra character of hue. So there is a Boolean value which is are you near the Charles River and this is similar to splitting the Titanic data set into male and female for each class. So it says give us the pairwise interactions between these variables. I just picked four of them. And for each of these though I would like to see the differences whether you're close to this river split up by a different color. So we have this hue value can take a zero or a one and we see if there's possibly different distributions behavior conditioned on whether it's actually close to the river. So this gives you an extra dimension of interaction and interpretability so you can see like oh I see that there's a behavior but it only exists if there's let's say the green dots had a nice tight relationship here and the blue dots were all kind of all vague and all over the place. And so if you looked at this without splitting by this Boolean value you might say oh there's not much of a relationship here but turns out that this underlying feature could have been the really important thing. Now I don't actually see anything that jumps out at me in this case but having this availability is something that's worth noting. So we'll do sms.kde plot and it'll be df.nox. So we're seeing here it's not a histogram it's a kernel density estimation of the distribution of this underlying feature here. So this is like a histogram but it's more of a smoothed out version of that. This is what happens if you give this kde plot method in seaborne single column of values. If you gave it two values let's give kde plot the Boolean value of rad versus the Knox value which we just plotted above. And we'll get a two dimensional plot which shows the distribution of these two values together. So radian is a Boolean value when split it's in the x and y and you can see that if Boolean is true then the Knox values are actually conditioned higher. If it's zero then it's conditioned lower with a little bit of data points up here in the upper one. So giving two dimensions to a kde plot you get this 2d map which shows you some contour plots some really nice things. One final thing for the pandas plotting thing is a thing called Andrew's curves. Now I haven't used them much myself but in Wikipedia it has this as their answer of what Andrew's plots are. It's a way apparently to visualize structured high dimensional data. They show it with the iris data set and the iris data set is the ubiquitous data set from Fisher way back in the day. And if we import this we can take a look at a specific value of a data frame. So let's look at this whether this Boolean value has much structure to it and it doesn't look like it but perhaps this Knox value does. And looks like there's too much to that one. Let's go with rad which is only a nine values for that. So you can try to see if there's clustering of behavior. Now the actual numbers here I think aren't so easy to read but the fact that this should give you a sense of if there's different behaviors going on. Too many data points overlying each other I will do a sample like this and a sample is another built-in function of data frames where you can say give me only a hundred values and then do the same exact plot. And it'll pick out randomly a hundred values from this data frame and then you're doing the same kind of estimation here. And so at this point you might say hey this value of 24 for the data framework is rad. That looks like it's having fundamentally different behavior than the other values which seem to be clustered together. I don't know that this actually tells us much in this case but it's another piece of functionality that I think is worth knowing about. I'll go through the last few bits here and just talk about them really quickly. So here's another KDE plot of this median value for the houses which is what we've seen before but this is going to be the target like how much the price of the house is actually going to be sold for. And we can add to that by saying we want to also see what's called this rug being true. So instead of doing a KDE plot we can give it a distribution plot and add the fringe kind of rug thing at the bottom which adds the actual density of points at these different values. So you can see that it is actually very dense here as we go across these values. So sometimes if you've chosen a kernel that's too wide or too narrow for your underlying dataset seeing the rug along the bottom here gives you extra clues into what's going on. And one last look here at two variables that might actually be more useful for looking at relationships. The median value versus the L stat and you can see that there's this kind of banana shaped curve here going on in the relationships. Okay so that's going to be it for this video. What we did in this video is we showed a number of different visualization techniques. We took a value that had a clear bimodality of a low and a high group and created a new data frame column to encode that. Went through also and saw various methods of doing kernel density estimations, scatter plots and various other features. In this video we'll be talking about stats models. Stats models is a library that you can use that allows for a lot of statistical machinery that can help you with your data science work. So we'll continue with the same Boston housing dataset as before which we were just looking at in the last video. And take a look at some of these Boston housing prices. Let me toggle this header in this toolbar real fast. Make this full screen so we have a little extra room to look at. So we will load in the scikit-learn dataset load Boston which again has the same attributes as we saw in the previous videos. We will construct our pandas data frame from this scikit-learn dataset so that we can use the standard tools we've learned over the years. We've combined the features and the target into one data frame and here's that scatter matrix plot we made in the previous video as well. This is a pandas call. So with this function call we get all of the pairwise interaction terms for this dataset. And from this we see a number of features that look like they have some strong trends with the thing we would try to predict which is the median value of the house. There's a trend here with this RM. It looks like there's this kind of banana shaped L-stat curve that we talked about at the end of the previous video. So we have a few things that we think you might be able to combine into some sort of model that will predict our median value. Again, let's look at the columns and the number of unique values for each of these. In particular, Rad has nine values. We previously made that a Boolean. Let's actually take a look at what the values comprise it. So there are nine values and these are the values. And then 24 is obviously the outlier here. And we previously made a Boolean variable, which we can do again right now. So we'll split everything from less than 15, which means everything up to here, 1, 2, 3, 4, 5, 6, 7, 8 will be labeled as 0 and 24 will be labeled as 1. Let's look at the target variable, which is this median value plot just done as a distribution plot with a rug at the bottom. And so this will be the target variable and we see some interesting structure going on here. So plot again L-stat, which we identified just a second ago, versus median value. We have again this kind of weird shaped banana plot. This is sort of a tapering off effect of this thing. So stats models. Let's actually go and take a look at this as a Google search. So stats models for Python. The current documentation for this sits at statsmodels.sourceforge.net. And it has, as it says, it's a Python module that allows users to look at data to estimate statistical models and perform statistical tests as many different modeling choices. So our options, we have linear regression, generalized linear models and all the things listed here, and also some nice examples that explain more. This is definitely a package that's geared more toward the statistical side of data science than the machine learning side, which is how I'd classify scikit-learn. So with that comes a number of useful tools that if you haven't used them, it can be very powerful. So this is where the documentation resides. I recommend looking at that. We imported this at the top. So I'll scroll up to the top real fast. We imported statsmodels.api as SM, which is not a typical way of importing Python modules. This is one of the standard ways of doing stats models. And then there's this formula.api, from which we're going to import ordinary least squares, which is just OLS in this case. So let's scroll back down. The formulas work in a way that's very similar to R. So if you've used R before, or if you've used the Python package Patsy or various other ones, what you end up writing is the dependent variables. Or the thing you're trying to predict. So in this case, the median value, this tilde, which goes as Lstat, which is this thing that we're just plotting up here. So Lstat versus medv median value. So we've given the formula in terms of the relationship between these different variables. I have to tell the model where the data comes from. So we say this data frame. When you give it this data frame, it says, okay, I'm going to look in this data source, df, four columns that are named in the same way that you've written it out in this formula here. So we've said, okay, we've rewritten out medv and Lstat are actual columns. And at the end, we will fit this with the dot fit function. And the end, you have a model, which we've written down as mod. And running the method dot summary tells us the output of trying to fit this data. So we have the results from that. So the dependent variable is median value. The model is ordinarily squares method least squares tells you a bunch of different pieces of information that are pretty good. These pieces of information that are pretty useful here. So we have r squared, adjusted r squared, f statistics, log likelihood, AIC, the Ikeke information criteria, or however you say that. Of course, the values of the coefficients and the intercepts, standard error, the 95% confidence intervals and so on. If you're looking at this and wanting to evaluate this model statistically, you have all kinds of things at your fingertips here to look at. Now, the relationship between Lstat and median value of the houses does not look linear to me. This looks like a weird shape here and we can actually plot this with the river. We can reverse this and see how this kind of tapering off of the median value versus Lstat can be a combination of features. So I'm going to add an extra term here. I'll actually take the log of the value and you can actually write it in this way in this string. So you say numpy.log or np.log of the variable that you want to look at. And you have to wrap it in this extra I for wrapping up because this doesn't actually exist as a column. You have to wrap it in this I. There's other ways you can wrap this as well. But I think having this and this both be in this linear model is likely to give a much better fit than just the Lstat by itself. Or even Lstat squared, which we could also do simply by just instead of it numpy.log, we do Lstat star star squared. So let's run this and we see our summary comes out and we have our R squared and AIC and all these different various intercepts and log values. So let's actually compare the two. So one way to compare it is to look at the AIC. So this one from 3200 down to 3100, which is a pretty substantial decrease in the AIC. So we think this is actually a better fit statistically, although we have to look at the residuals and do many other tests to make sure that this is actually is a viable model. So that we're nowhere near done and like to double emphasize that what I'm showing you here is not a final rigorous data science result. This is more of a sketch of what's possible with the tools that I think are useful. Don't be taking directly from this lessons on how to do data science. This is more of a sketch of how the tools should work. Let's make this a little bit bigger so we have more room again. One way to start to evaluate how good this fit is to actually look at this graphics from the stats models. So statsmodels.graphics has a lot of different plotting options. And there's these component and component plus residual plots, which is the CCPR plots, which you feed it the model itself contained within this model object is the underlying formula. And so you can tell it, I want to know this one term here, the term that went with the log of the LSTAT score. How does that look versus the residuals of this plus the I squared? So we can see that the component actually does a decent job at this log stat versus residuals plus log stat. So this line actually does a pretty good job of fitting this. And for some reason that I don't quite understand, it actually plots it twice to the same exact plot, but was just LSTAT by itself. So the first term in that model, we can see a little bit wonky behavior where it's not quite as good as the previous one where the residuals has some extra structure here in the low end, especially. But we can start to have various goodness of fits and start to model out how good our model is at capturing the underlying data. Again, it shows it twice. And again, I don't know why. We can also add more terms to this model. So previously we had LSTAT and this the log of LSTAT plus one for the intercept. We can also add the RM category. We can also add the Boolean value, which is whether it's in the higher low of the RAD variable. And because it's a categorical, you can feed it to the model with this C value, and it will properly take into account the fact that what's in this column should be considered a category. And it won't get you in trouble with the dummy variable trap that I had to mention at the last time. So if we look at this, we see a number of things, including the fact that it starts off with the categorical variable radian bool, the categorical value where the default value is false. And if it's true, what the change in the coefficient is for that value and the various other values as well. Another thing to look at, depending on what you prefer to look at the BIC or the AIC or log likelihood F statistics. To compare this to the previous models, this again has lowered the AIC substantially so that in terms of is it a better fit or not, it has some statistical basis for saying that this is a better fit. We still have to do a lot of work still before we decide this is actually a reasonable fit and all the assumptions behind an ordinarily squares fit are holding true. But just as a first pass, we have a lot of really nice information here. In this video, I would like to continue from the previous video where we had just run a model to find the intercept and the categorical RAD value. We can also run the same exact model as before deciding that this RAD values that are doing the boolean version of this, we can actually run on the entire column itself and telling stats models that we're actually using a categorical variable here as well. So now we're trying to predict the median value of the house using all of these possible variables where these each have a coefficient in front of it. We run a dot fit method on that and save it as a model as MOD and we're going to output the summary of that fit ran just then. And again, dependent variable is this MED V variable. And we see in the output here various goodness of fit and metrics about how the fit actually worked out. We see an R squared of 0.73 and ASC of 3040, which is a slight improvement from the previous one, meaning that encoding the RAD variable where each value is independently stored. So since it's a categorical, this is all with a baseline of one, which is why it doesn't appear here. These coefficients are all based off of comparing each of these terms with the baseline of RAD equals to one. If that doesn't make sense to you, don't worry about it. Don't worry about this kind of statistical model. And if it does make sense to you, then you understand what I just said. So anyway, you get the output from this, but we actually want to see some plots to see how good this fit actually is. Because just looking at the diagnostics and the metrics that come out from these fits isn't enough to tell us whether we're making a good model here. So let's start to look at how we can assess fit quality. One of the easy things you can do is to look at a thing called leverage. StatsModels gives us a nice way to see this and visualize this by using the sm.graphics.influence plot and the plot leverage residual squared plots. So let's take a look at these two plots. I will first do this one. So what we see here is on the y-axis, studentized residuals versus the x-axis, the h-leverage is using the cooks method for influence. What you see on the leverage corresponds to an outside influence on the overall fit for its values. So if you see something with high residuals and high leverage, that's something that we should possibly consider looking at that point and figuring out what's going on at that exact point. So like 368, for example, would be a candidate to be looking at here because it has high residuals and high leverage. That's one way of looking at it. Another way is to look at it through this leverage residual squared. And you give it simply the model object that you just fit above. You just give it mod and it will give normalized residuals squared versus the leverage. Again, 368, 365, 372, 371 are all outliers in terms of points that we should possibly take another look at again. That corresponds to those four points up here. So this leverage plots is one way of assessing the fit and the data points to make sure something isn't going crazy. There's also a way of doing partial regression and I've quoted a bit from the documentation stats models here. It says the slope of the fitted line is that of the exogenous in the full multiple regressions. That's what's going on here. The individual points can be used to assess the influence of points on the estimated coefficient. So let's take a look at what this means visually. I think it's easier to see what's happening this way. So we have a partial regression plot and we're evaluating the expectation value of L-stat given the values that we have and same plotting against the dependent variable, the median value that we're trying to predict. And in this, we see that a lot of the points are kind of in a mass right here and the outliers are sitting here at this very low end. And the same culprits appear again and you can actually see the effect that it's having on this. It's pulling the slope up a bit. So that's with a plot partial regression and giving various features as you're holding constant. You can give it the entire model and see what that looks like. When we get an entire grid, you're going to have a lot more involved to look at this grid of plots. But it's the various features here so that the RAD variable is a feature three given X versus the median value on the X and the Y axis. And so you can look at the various categorical variables and how they are being fit with the lines and how they are interacting with the overall fit as well as the values that clearly are more continuous and having a nicer time of it. So there's two ways to do this partial regression plot and both give you different ways of looking at this data. Again, this is plotted twice for reasons unknown. Finally, we have regression. We can do this as a plot regress exogenous. It gives you this four panel plot of median value versus L-stat and residuals versus L-stat. So this is the data minus the fit itself. And what you're hoping to see is noise pretty symmetrically about this axis here, the estimated variables and the CCPR plots. So we see fit versus the actual values in this plot here. And then we can also do it versus any other term in that model, which is, in this case, the natural log of the L-stat. And then we get this plot here, which shows much tighter fit to this instance. If you've built up a model, then again, I'm not saying I've built up some amazing model at this point. This is definitely more descriptive of how this kind of process can work. But if you would like to build up a model and look through a lot of diagnostic plots and have a true statistics, robust package manager behind you, look into stats models and really try to dive into this because there's a lot of really good stuff in this. So with that, I am concluding the second data science project. And what I really try to focus on this time was a little bit of some more advanced features of using the plotting features of pandas, really taking a deep dive into how one aspect of the stats models library and there's many aspects of it. So I highlighted the ordinarily squares and how fitting linear model there with the statistical analysis and output that comes out of every fit, as well as fitting the diagnostics and doing a quality of fit. I also spent a lot of time on the visuals of this diving a little bit deeper into Seaborn and a few of the other options there. So just as a kind of a wrap up of this, using map plot live and Seaborn stats models and pandas, these data sets can be explored and manipulated and fit. And these tools give a lot of flexibility and exploring and analyzing data in a notebook lets someone else take a look at what you did through your analysis. So if you've made some horrendous error as you went through, that is something that's easy to point out and point to the plot. As I said, this was a decent fit, for example. This is clearly bad because of reason X and you can point to it and circle it. And it's not just a bunch of random files sitting in a directory somewhere. To close off this project, the last thing that remains to do is to save this and to close it and push it back to GitHub so that you guys can also look at the same data sets and follow along yourself. So I'm going to file, close and halt, go back to the terminal. Git status has only this develop directory that has any changes in it. So git add, develop, git status, we have three new files. Okay. And I've closed down all of them. Just double check the server here. Yep. Everything looks to be closed and say git commit. Give a commit message that makes sense. Git push origin Jonathan viz, which is the name of this branch. Go back to GitHub, see that we've already made a change this we can compare and pull request and create a pull request. I'll go ahead and actually merge this pull request because I've demonstrated how to do the full pull request and peer review aspect of it before. And going back to the data viz project, what we have here is don't save that. So the data viz project to will have the notebooks that I went through during this project available right there. Just to recap what happened in this video, finished up looking at the plots from stats models and finished up the second data science project for this course. Let's talk about some of the security issues with using the Jupiter notebook as is out of the box. The notebook only listens to requests on local host. This means that it ignores requests from the Internet. People connecting from the Internet can't see your server and they won't be able to connect. In order to allow them to connect, you have to explicitly configure the notebook to listen to the correct IP. Once you do, anybody can access your notebook server. The notebook server has no password by default and permissions of the users that are connecting are the same as the permissions of the user who had launched the server. So this means if you launch the server, everybody who connects to the notebook will be executing things as if they were you. The second main problem with using the notebook is it's using an insecure line. So typically, the notebook is broken into three pieces, the kernel, the web server, and the client. The client is what you see in the web browser. It's the notebook as you know it. And the web server is the thing that relays messages from the kernel to the client. The web server communicates with the kernel using ZMQ. Usually, the kernel and the web server exist on the same machine. The kernel is the server that executes code and runs requests. The line between the kernel and the web server you don't have to worry about usually because it's on the same machine. However, the line between the web server and the client you have to worry about because it's over the open Internet. This means that it's available for people to listen to and inject messages. However, there are some setups where it makes sense to separate the kernel onto its own machine. For example, you may have a cluster of computers running kernels, one computer running the web server. In this case, you also have to worry about the ZMQ communication between the kernel and the web server if the kernel and the web server are not on a VPN or in a secured network. I'd just like to note, we aren't security experts, but we do have experts in the community and they do help us. If you spot a problem, I ask you, please email us at our security mailing list. The address is security at ipython.org. Once you do, we'll work quickly to open a CVE. In the next set of slides, I'll talk about how you can mitigate some of these problems and rest assured that your notebook deployment is as secure as can be. In the last video, we talked about some of the limitations of running the notebook server publicly. Specifically, we talked about security vulnerabilities. In this video, I'll describe to you some of the solutions provided by the notebook software and some of the limitations of the notebook software. First, in the last video, I showed you this diagram and told you that the communication between the web server and client was insecure by default. The notebook actually provides support for HTTPS, industry grade encryption, for this communication line. I'll show you how to configure this. However, the notebook does not provide support out of the box for encrypting the line between the kernel and the web server. Therefore, I recommend you either run the kernel and the web server on the same machine, if possible, or run them within a VPN. The latest version of ZMQ does support encryption. However, the notebook is not using that version of ZMQ currently. Before we secure the notebook server, we need to be able to launch it so that people on the internet can connect to it. In the previous chapter, you learned about Tralits. We can configure the notebook to listen to all IP addresses using Tralits. If I do jupiter, notebook, double dash help, I can list all the configuration options of the notebook. The third to last configuration option is double dash IP. That allows me to change the IP that the notebook server is listening on. Just to cement the idea that this is a Tralit, I'll show you in the notebook source where this Tralit can be found. In parentheses next to the configuration value, you see that notebook app.ip is listed. This means that IP is a Tralit inside the notebook app class. So opening up the notebook subfolder of the notebook repository and then the notebook app module inside that, we should be able to find the IP trait. I'll use the search function of Adam to find IP. Here's the definition of the IP trait. If you want to configure something of the application and you don't see the option in the help string, it's a good skill to be able to look through the source code and see if there's a Tralit that isn't being listed. So we have two ways to set this IP trait. We can either pass it in at the command line, like so, or we can specify it via config, so it's the new default. By specifying IP to asterisk, we're telling the server to listen to requests on all IP addresses. You may get two warnings, one from your system firewall prompting for Python to have the ability to accept incoming network connection. This is because the notebook server is written in Python. The other warning you'll see is in your terminal output from the notebook server itself, warning you that the server is listening on all IP addresses and is not using encryption or authentication. Don't worry, I'll show you how to set these up. But first, let's try setting IP equals asterisk in the config. If you recall from the earlier Tralits video, the config is stored inside the .jupiter folder inside my home directory. Opening the folder up in Adam, we see that the config files from the earlier weekend and weekday demonstration still exist. We'll go ahead and erase that here inside the jupiter notebook config.py file. Now, recalling what the help text said in the terminal, we'll set notebook app.ip equal to asterisk. Go ahead and save the file and we'll try launching the notebook server again. This time, however, we won't specify the double-dash IP equals asterisk on the command line because it's already specified inside our config. It looks like the launch was a success. We still received the warnings about the server listening on all IP addresses, even though we didn't specify the IP equals asterisk flag in the command line. This means that the line that we added to the config file worked as expected. In the last video, we added password security to the notebook. However, we did not encrypt the line between the web browser and the notebook web server. This means that the notebook is vulnerable to people eavesdropping on the communication between it and you or any other users of your server. In this video, we'll add HTTPS encryption to your notebook web server. To get the notebook to start using HTTPS, all you have to do is point it to your key file and cert file. If you don't have a key file and cert file, you can generate one yourself. Before I show you how to tell the notebook to use your key file and cert file, I'll show you how to generate one using OpenSSL. If you already have a key, you can skip this step. Anaconda already comes with OpenSSL installed. However, OpenSSL frequently releases security updates, so I highly recommend that you update to the latest version. To do so, you can run conda space update OpenSSL. I'm currently inside my Jupyter config directory. I'm going to run OpenSSL to generate the key insert file. I'm going to generate the cert so it lasts for one year. To do so, I'm going to pass in 365 days into the days argument. I'm going to output both the key and the cert file into the same file. Once I run the command, an interactive wizard will start. I'll answer some of these questions. However, if you want, you can skip any of the questions just by hitting return to accept the default value. Once that is done, we'll have to configure the notebook to use this key insert file. To do so, I'm going to open up Adam inside the Jupyter configuration directory. After the shaw from the password trait, I'm going to create a new line. I'm going to specify the cert file first. The cert file is a trait of the notebook app. It's important that I pass the full path to the cert file. Next, I'm going to specify the key file. The key file is a trait of the session class. Since we output it the key into the cert file, we can just specify the same file here. Now I'm going to save the config. Back in the terminal, I'm going to try launching the notebook. When the notebook launches, you'll probably see this security error from your web browser, saying that your connection is not private and that the authority is invalid. This is because you self-generated the cert. You can get around this by having a third party generate your cert. For now, let's just click Advanced and proceed the local host. Now our connection is being encrypted. If you are interested in getting a cert that's verified by a third party, I recommend using StartSSL. They'll do it for free. You can visit their website at www.startssl.com. The StartSSL free cert should be fine for basic setups. The other two offer slightly more features that are verified, whereas the most expensive gives your site a green bar inside the address bar when the user is connected. You can see that in the screenshot in the side column of their website. In the last chapter, we talked about how you could deploy the notebook securely. In this chapter, we'll change gears. We'll start looking at NB Viewer. Before I discuss installing NB Viewer, I'm going to show you what NB Viewer looks like in the wild. I'm currently on the Jupyter public deployment of NB Viewer, which is accessible at nbviewer.jupyter.org. NB Viewer is a web application that is used to render static views of notebooks online. In the back end, NB Viewer uses NB Convert, the application that I showed you in chapter one, which can be used to convert notebooks to various static formats. NB Viewer just uses NB Convert to convert notebooks to static HTML representations. NB Viewer itself is a simple website that has a title and then an address bar where you can paste the link to your notebook file. After pasting the link, you click Go and it will render that notebook file. Below that, there's a showcase of notebooks for various categories. Here, for example, we can click on this iRuby notebook to see what iRuby is. This is what a rendered notebook looks like. You can see it looks quite different than the notebook client that you're used to. It's quite a bit more bare, but it still bears some resemblance to pieces of the interactive notebook, such as these prompts and cell formatting. At the top, there are links to download the notebook, view the notebook on GitHub if it is a GitHub hosted file, and a link to go to the top of the file. At the bottom of the page, you can see the version of NB Viewer that we're running, the notebooks version, and the version of NB Convert that NB Viewer is running against. NB Viewer tries to be aggressive about caching notebooks, so you also get a status of when the notebook was last rendered. Because NB Viewer is not a user application and it's actually a web application, it's not included with Anaconda. Therefore, I'll have to show you how to install it. The easiest way to install NB Viewer is using Docker. Docker is not included with Anaconda either, so I'll also have to show you how to install that. Docker is an emulation platform. It allows you to run applications inside an isolated environment called containers. Docker containers differ from virtual machines in that the containers share the host OS. Containers can also share dependencies with each other. This minimizes the distance between the container and the system hardware, which makes containers faster and smaller to install. To install Docker, first go to Docker's website at www.docker.com. Then click on the Get Started link in the top right hand corner. The instructions for getting started are operating system dependent. Because I'm running a Mac, I'll show you how to get started with Docker on a Mac. If you're running Linux or Windows, this page will look a little different for you. The first step is to install Docker tools. You can click on Install Docker on OS X. Scroll down to step two, where you'll see Install Docker Toolbox. Click on that and then scroll down. Click the Download button for Mac if you're on OS X. Once you have the Toolbox installer, run it. Follow the prompts in the wizard. Select a hard drive to install to. Enter your password when prompted. When done, click Continue. Then click Close. Now launch the Docker Quick Start Terminal. It takes a little while for it to start the machine. Once the process finishes, you can run Docker space run space hello dash world. You should see a Hello from Docker message, which confirms that your installation is working. In the last video, I introduced you to NBViewer and Docker. We then installed Docker on your machine. In this video, we'll install the NBViewer Docker image. To get started, open the Docker Quick Terminal. Your terminal may take a while to start. Once the terminal has started, pay attention to the IP address listed in green. Mine's 192.168.99.100. That is the IP address of the Docker image. You'll use that IP address to access your NBViewer server once it's started. The first step is to download NBViewer. Now, I've already done this ahead of time. So mine will download fairly quick because it will just be verifying that I have the latest version. But the first time you run this command, it may take a while. Next, let's try launching NBViewer. Once the server starts, it should tell you the port it's listening on. In a new web browser, go ahead and try accessing that IP address that you remember that was in green, followed by colon 8080. If all worked well, you should see NBViewer. Go ahead and try to open up a notebook. Once the notebook opens, go back to your terminal. You should see output from the NBViewer server verifying your request. Without this, it would be hard to tell if you were actually running the server or not, or if you were just accessing the public NBViewer deployment by Jupyter. NBViewer has this wonderful feature that allows you to access notebooks on GitHub using short URLs. To demonstrate this, I'll access a notebook that's stored as a gist under my GitHub account. So here's a simple notebook I created for PyData. It's stored under my account as this gist. I'm going to just copy this URL. Because NBViewer has support for gist, I can just paste it directly in and click go. Alternatively, I can use an even shorter form, which is just the gist ID. To do so, I'll remove all the stuff before the last forward slash. This is my gist ID. You can see NBViewer still renders it. The GitHub public APIs have rate limiting. So if you plan on supporting this feature, it's a good idea to generate an access token for NBViewer. Doing so is relatively painless. Log on to github.com using your account. Then in the top right hand corner, click view profile and more. Next, select your profile. Click edit profile. Then click personal access tokens in the left hand column. Next, click generate new token. Give the token a name. And then change the scopes that you want to use to restrict the token. When you're done, click generate token. Your token will be displayed in the green bar. I've blurred a couple of the numbers of my token for security. Click the copy button to copy the token to your clipboard. Now in the terminal that's running NBViewer, hit ctrl C to stop NBViewer. Now let's relaunch NBViewer, adding our new access token to the command line. Because we're running NBViewer as a Docker image, we can't specify arguments directly to NBViewer. Instead, we have to set environment variables to cause NBViewer to change its behavior. Here, I'm telling Docker to set the github underscore api underscore token variable to the token that I just copied from github. Now when I try accessing NBViewer, it should be using that token. Let's paste the same gist id from earlier. Now let's go to github.com to see if the api token was used. We can see that it was just used because github says it was used within the last day. Using this token should help lift some of the rate limits for github access. And it's also nice because it allows github to control who's accessing their APIs. In the last video, we installed NBViewer using Docker. This is great for most use cases. However, sometimes it's necessary to maintain more control over the distribution. To do this, you can install NBViewer from source. This will allow you to do two things. One, it will allow you to control what dependencies NBViewer is using. And two, it will allow you to modify NBViewer's source code directly, including installing additional extensions without having to recompile the Docker image. The first step is to clone the NBViewer repository. You can either clone the upstream fork, like I will do here, or you can clone your own fork. Once NBViewer has finished cloning, cd into that directory. Now run pip install-r requirements dev.txt. Next run npm space install, then run invoke bower. This is installing the static assets. Next run invoke less, which will compile the less into CSS. CSS is what styles NBViewer. I've cleared my console. Now I'm going to run pip install markdown. Once that finishes, I should be able to launch NBViewer. Now I can access NBViewer using localhost. To verify that this is actually running locally, let's try changing some of the code. Let's change the title. I'm going to hit ctrl-c to stop the server. I'm going to open up Adam in the NBViewer repository. Once Adam opens, I'm going to open the NBViewer sub directory, the template sub folder, and then the index.html file. Let's change the title of the website. We'll change NBViewer to myNBViewer. We'll go ahead and save. Editing these templates directly is actually not the best way to modify NBViewer, but we'll do it for now just to verify that we've installed from source. Now back at the terminal, go ahead and relaunch the server. Back in your web browser, refresh the page. When you see the title update to myNBViewer, you know that the changes that we made to the template file were loaded. If when you refresh the page, the title doesn't change, try emptying your web browser's cache. If you want a quicker way to see if this is the problem, open an incognito tab and then navigate to the NBViewer web page. The incognito tab should prevent the web browser from caching. Often when you do web app development, caching causes problems because it doesn't let you see your most recent changes to the code. Earlier, I had mentioned that modifying the template directly in NBViewer's source was not the right way to modify the template. A better way would be to configure NBViewer's template directory to a different directory, have it load from one of your own custom templates, which inherit it from the template included with NBViewer. In the following videos, we'll look at how we can do that in addition to customizing NBViewer different ways. In this video, we'll look at what we can do just by extending the NBViewer templates. Before we get started, we need to remove the hack that we added in the last video. I'm going to go ahead and launch Adam from within the NBViewer repository. Once Adam's launched, I'll open the NBViewer subfolder, then the template subfolder, and then index.html. In there, I'll remove my space. Now, I'll save the file. Let's see who loads this index.html file. I'm going to open the find in project dialog by hitting command shift F, which is control shift F on Linux and Windows. Looks like the template is rendered here in the index handler method. Let's see where the render template method searches for index.html. Looks like the definition of render template is in the NBViewer provider's base.py class. The get template method is used to load the template. Inside the get template method, which is above the render template method, we can see that the Jinja2 environment has another get template method defined, which we call out to. Let's see where this Jinja2 environment comes from. Looks like it's defined in app.py. Scrolling up to see where nv is defined, we see nv is an instance of environment, which is imported from Jinja2. The template loader is a file system loader, which loads from template paths. Template paths is hard coded to the repository directory template subdirectory. However, if you specify a custom template path using the nbViewer underscore template underscore path environment variable, it gets propended to a list of paths, which then is used as the higher priority path. So we can set a custom template search path just by setting that environment variable. Knowing this, we can set the nbViewer template path. I'm going to set it to the nbViewer underscore templates subfolder of my home directory. Now I'm going to create that directory. I'll cd into it and open Adam. In Adam, I'll create an index.html file. This file will override the index.html file in the nbViewer templates folder. For now, I'll just write hello world and save the file. Now, switching back to the terminal, I'll cd back into the nbViewer repository. I'll launch nbViewer using the same command from earlier. Now when I try to access nbViewer, the page just says hello world. This means that our template was loaded successfully. Let's try to complicate things. Back inside the Adam that is opened in the nbViewer repository, I'm going to go to the templates folder and open index.html again. nbViewer uses the Jinja templating library to render its HTML pages. This funky syntax extends and block body. Those are Jinja 2 specific keywords. The rest of the code that you see is vanilla HTML. Let's go ahead and copy all the contents of this file. Back into our index.html file inside the nbViewer templates folder. Now let's change the title here and save. If we've done this correctly, we'll have changed the look of the nbViewer landing page without actually modifying nbViewer's source code. I refreshed the nbViewer page and it looks like our custom template was loaded. To give ourselves a target, let's try to set up an O'Reilly themed nbViewer. Our O'Reilly nbViewer should look like its O'Reilly's nbViewer, but also host O'Reilly content. First, let's change the basic index template that we created in the last video. To do so, I'll open up the nbViewer templates folder that we created in my home directory. Now I'll open Adam in that directory. I'll change the title to O'Reilly notebooks. We'll also change the descriptive paragraph below. Eventually, we won't want to be hosting notebooks from GitHub, so let's change the placeholder text to reflect that. Now I'll save and see how it looks. We can launch nbViewer using the same command that we used in the previous video. I'll create a new tab of my terminal. Before starting nbViewer, I need to set the environment variable again for the custom templates. Now I can launch the server. It looks like our change is rendered. However, we should probably change this logo in the top left, and also remove this link to Jupyter. Let's scroll down to see if there's anything else we need to change. We'll have to change this section of showcased notebooks. And at the very bottom, it looks like we'll want to change the footer. Lastly, we should probably change the styling and maybe use JavaScript to spiff up the page a bit. First, let's see if we can change the header and footer. Let's go back to the index.html file in our custom template folder. Looking at the index.html file, it looks like layout.html is extended for the basic layout of the page. Let's open that. It should be inside the nbViewer directory. Inside the nbViewer repository in the nbViewer subfolder, under templates, we can find layout.html. Like we did with index, let's copy everything in here. Then, back inside our custom nbViewer templates folder, let's create a layout.html. Here, I'll paste all the contents from the other layout.html. Let's remove this link to Google Analytics, because this is the Google Analytics for the Jupyter deployment of nbViewer. Also, we'll want to get rid of these links to Fastly and change the Rackspace link to O'Reilly. Scrolling up, let's get rid of the text that says this website does not host notebooks. It only renders notebooks available on other websites, because we're going to be using this pseudo-website to host O'Reilly notebooks. Here's the link to Jupyter that we wanted to remove. Lastly, we'll want to change the nav logo to O'Reilly's logo. Let's go to O'Reilly's website to see if we can get the link to their logo. I'm on O'Reilly's website now at www.oreilly.com. I like this logo in the top left-hand corner. I'm going to right-click on it and click Copy Image URL. Back inside the layout.html file, I'm then going to paste that URL over the image URL for the existing nav logo. We'll also get rid of the New Relic reference. Let's save what we have and go back to the browser to see how it renders. Awesome! This is already looking a little more O'Reilly-like. We'll probably still want to change the color scheme, because I noticed when I roll over FAQ, it highlights orange, which doesn't match O'Reilly's red. Looking at the bottom of the page, it looks like our footer updated it correctly. Let's check out the FAQ page. It looks like there's some questions that shouldn't be here. Let's remove them. Back inside the nbviewer repository, it looks like the FAQ.md file might be the file that's getting rendered. Let's open that. It looks like this file does indeed extend the layout.html file and uses a special markdown filter to convert itself from markdown to html. In the process, it automatically generates its table of contents. Let's do what we did for index.html and layout.html in our custom templates folder. Let's create an FAQ.md file and copy the contents from the FAQ.md file in nbviewer. Let's get rid of the first two questions, because they are completely specific to Jupyter's nbviewer. We'll defer them to nbviewer for this information. This paragraph doesn't relate at all to our viewer, nor does the one below or the one below that. This paragraph also doesn't relate. This is related, though. We just need to update it to point to our email address. The last few before the final one also don't relate, and we'll replace the text of the final one with an email link to the O'Reilly administrator. Now let's save and see if the FAQ page renders how we want. Back in the web browser, I'm going to refresh the page. Looks like we should remove the first question as well. Let's refresh the page again. Ah, much better. Let's try clicking on the O'Reilly image to go back to the homepage. Sweet, it worked. In the next tutorial, we'll look at adding custom CSS to style it more like O'Reilly's main website. In this video, we'll talk about how nbviewer compiles its less into CSS. We'll then look at adding our own CSS to our custom nbviewer templates. I've still left the nbviewer server running from the last video. This is because I do not need to restart it. As long as I'm only changing static files, all I have to do is refresh the webpage to update the contents. If I were working on server-side files, for example the Python files, then I would have to restart the server. Let's go ahead and open up Adam inside the nbviewer repository. When you installed nbviewer from source code, you had to run a command called invoke less. When you ran that command, what it did was run a function called less inside the tasks.py file. Here's that function. What this function does is compile the less into CSS using the less compiler. It outputs the compiled CSS into a build subdirectory. It outputs a styles.css, notebook.css, and slides.css. Likewise, the source files used are styles, notebook, and slides.less. Let's open the nbviewer static directory. In here, you see the folder less and the build folder. The build folder is grayed out here because it's not included in the git repository. That's because we don't want to check in the built files. That would just be including changes twice. The less folder is where the less is stored. We can open up the notebook.less to get an idea of how notebooks are styled. A major difference between less and CSS is that less allows you to import. Here you can see that bootstrap is imported and styling from ipython. Let's go ahead and see where the build files are referenced. In the layout template, inside the header, we see that styles.css is referenced. Inside notebook.html, we can see where notebook.css is referenced. Let's go ahead and add our own styling to our custom templates. Going back to the terminal, I'm going to cd into our custom templates directory. Here I'll open Adam. Inside our layout.html, below the existing CSS import, let's add our own. It's important that you do this below the existing because this will cause your style to override the existing. Unfortunately, nbviewer doesn't support pulling files from directories outside of its own, so we have two options. We could either place our custom style inside the nbviewer repository, which I'd rather not do, or we can use the ginga templating to load it from our nbviewer templates directory and then inline it directly into the html. First, let me show you what it would look like if you were to put the CSS inside the nbviewer repository. You would change build to CSS and then give your CSS file a name, like custom. You would then save this file and inside the nbviewer repository under the static directory in CSS, you would right-click, create a new file called custom.css. And then inside here, you would put whatever custom CSS you want. Moving back into our nbviewer templates directory, the alternative, I think, makes more sense because then you can keep your CSS next to your templates. For this, instead of using a link tag, you'll use a style tag. Then inside style tags, use the ginga include to include your style file. The only downside to using this method is that you're disabling the browser's ability to cache your style, which means that every time a page is requested, client will have to download the CSS again. That's usually not a problem with small CSS files, and if it is a problem, you can use the other method that I just showed you. So now let's save this file and create our own custom CSS. To test to see if our custom CSS is working, let's try setting the body background color. I'm going to use important just to make sure it overrides any other values. However, it's important to note that important isn't the best practice. Using important disables you from later overriding styles. In a new browser window, let's navigate to our NB viewer page to see if our style gets loaded. Awesome, it looks like the style loaded successfully. Now, instead of applying such a hideous style, let's try to override the orange highlight color that's applied to buttons. Let's inspect the FAQ button to see how we can select it using CSS. Looks like a good selector would be to use the navbar right class and then the anchor tag. Back inside our custom CSS, let's do that. To specify that we want to change the styling when it is hovered over, add the hover sudo selector. For now, let's just try changing the background color. Again, let's use the important tag just to make sure that what we're doing gets applied. Looks like that worked. So now, let's change the font color instead of changing the background color and let's actually use O'Reilly's red. Let's go to O'Reilly's website and we'll right click on the home link to look at its color. Now, I'll just double click this and copy it. Back inside our custom CSS, I'm going to change background color to color and paste this new color. Let's save the file, then go back to the web browser where I'll open our MB Viewer tab and refresh the page. Looks like that works. Now back inside the custom CSS, let's try to move the important flag. Like I said earlier, it's better to not use important when you can get away with it. Back in the browser, let's refresh the page and see if it still works. Looks like it's no longer working. We have two options. We can either stick with the important flag or we can try to make our selector more specific. Because I know that I'm applying the top most level styling and nobody's going to come in and inherit from the O'Reilly page and add their own styling, it's okay for me to use important. If, however, you were writing something that would later be styled by somebody else, you'd want to make the selector more specific. To do so, you could inspect the element and either A, add more levels of elements to your selector, or B, in the templates, actually add an ID to this anchor tag and then address the anchor tag by ID. Addressing an element by ID has a higher specificity than addressing it otherwise. Back inside the custom CSS, let's re-add the important. I'm going to refresh the browser page. Looks like that's still working. Let's scroll down to the bottom of the page. Maybe we should use one of O'Reilly's grays for this bottom. We could also use O'Reilly's red for the links. This gray looks nice. We'll copy the background color. Now back on the Jupyter NB viewer tab, let's try styling this footer. The font doesn't have enough contrast now. Let's change it to black. That seems like it has too much contrast. Let's see what O'Reilly does. Looks like they use an off black. We'll use that too. I'd also like to add a top border. Let's copy the border color that O'Reilly uses. Looks like they use this off-shaded gray. Now we can just copy this CSS that we've designed in the browser and paste it into our custom CSS in a footer selector. Now let's refresh the page. Scrolling to the bottom, we see that our new styling has been applied. Lastly, we need to change the default link color to that red. Back on our custom CSS, let's define an anchor selector. We have four C problems with this anchor tag and this anchor tag. Let's define a color for when the FAQ anchor tag is not hovered on. We'll use the color that we used for text. I'm going to save and then go back to the browser and refresh the page one more time. The FAQ button is still working. Scroll to the bottom. And it looks like our links are formatted correctly now. In the last video, we looked at customizing our MbViewer deployments CSS. In this video, we used JavaScript to spiff up the website a little bit. I found this really cool carousel on Bootstrap's website. Here it is. Bootstrap is a component that MbViewer already uses, so we should be able to just drag and drop this code into place. What I want to do is replace the notebook listing in the showcase on our MbViewer with a carousel. So I'm going to go back to the Bootstrap website and copy and paste the code here. Inside the index template in our custom templates folder, scrolling down towards the bottom, you can see where the showcase is built. The JINJA templating for loop is used to iterate over each section and then it's used again to iterate over each link in each section. We'll use this logic to compile the different slides for our carousel. For now, I'm going to insert the carousel code above this existing code in between the header and the showcase, pasting what we copied from Bootstrap's website. I'm going to remove the indicator dots on the carousel. Also, from experience, I know that we're not loading glyph icon on MbViewer by default, and I don't feel like adding that dependency. Instead, we're using font awesome. Equivalent icons would be icon-prev and icon-next. Now, what we need to do is use that JINJA code that iterates through each item to construct our carousel slides. It looks like each individual unit is an item. The first item is active. Let's go ahead and delete the ellipses. Now, let's move the JINJA templating loop logic below this first item to create the latter items. We're going to just ignore the notion of sections, so we'll group both the loops next to each other. Now, let's copy the item template into the loop. Then we'll copy the image source into the item's image. We'll also copy the link text as the alternative text and use it as the caption. Then we'll take the anchor tag and put it around the caption. This will make the caption clickable. Now, finally, we'll remove the original code from the gallery. We'll save our changes and refresh the page to see how it renders. So here's the page. You can see it doesn't have the gallery below anymore. Now it just has this carousel that rotates through images. And each image has a link that we can click to open that notebook. However, you may notice the size is constantly changing. It must depend on the image height. Let's fix the size of the carousel. We'll do so using CSS. First, let's get the ID of the carousel. Copy that. Then in your custom CSS, add a selector for the carousel. To select an ID, prefix with the hashtag. Now set the height to 300 pixels and the width to 300 pixels. Save. And let's go back to the web browser to see how that renders. We're going to refresh the page. Here's what our smaller carousel looks like. We should probably center it in the page and add a margin. It looks kind of weird hugging the bottom so closely in the top. Let's try centering it in the web browser. By setting margin left and right to auto, the element will center. Now let's add a top margin to give it some distance from this horizontal line. 40 pixels looks good. Let's do the same with the bottom. Now take one last look. That looks good. Let's copy and paste this style back to our CSS. Oops, looks like I forgot to copy margin left and right auto. Now we need to get rid of that placeholder for the first active item. In index.html, in the carousel code, you can see that item here. Go ahead and remove that. What we need to do is only add active to the first class. To do that, let's create a flag. Once that flag is used once, we'll set it the false. We can use the ginger set command to set this flag. Then we'll test for that in class. Lastly, let's make sure we set first the false. When we set first the false here, we're actually declaring a new variable first within the scope of this for loop that overrides the first declared in the outer scope. This means when we get to the next for loop, first will be set to true again. So we have to set first the false twice. Let's refresh the page. Ah, looks like that worked. Awesome. In the last video, we talked about adding custom CSS and custom JavaScript to your NB viewer deployment. In this video, we'll talk about changing what NB viewer is hosting to the user. NB viewer has a notion of providers, which are the things that dictate what NB viewer can host. There are two types of providers, URI rewrites and handlers. URI rewrites take textual content that's entered into the go bar of NB viewer and translate it to a canonical NB viewer URL, a URL that NB viewer understands and is capable of rendering. Handlers are things that are designed to interpret and load from NB viewer URLs. The handler is the thing that actually fetches the resources from the local or remote location. For example, the GitHub handler accesses notebook content directly from GitHub using GitHub's API instead of standard HTTP. Let's start by configuring NB viewer to host local files. Sticking to our O'Reilly themed example, let's pretend that O'Reilly wants to host files from a network-attached storage device. Let's say that that storage device is SimLink into the home directory. We'll pretend that that SimLink is called network. I'm going to create this folder just as an example that we can use to demonstrate this feature of NB viewer. Let's pretend that in the network-attached storage drive, there's a subfolder called notebooks. And then inside the notebooks folder, there are author folders. For now, I'll just create an authored folder for myself. I have some example notebooks that are sitting inside my home folder. I'm going to copy those over to here. Now let's take a look at the NB viewer source code. I'm going to CD into the NB viewer repository and open Adam. Inside the NB viewer subfolder, I'm going to open app.py. Scrolling down to the very bottom of app.py, we see all the command line arguments that we can pass to NB viewer. One of the command line arguments is local files. This tells NB viewer to host files from the local file system. Let's use this. I've closed the NB viewer server. I'll relaunch it with this new command. But before I launch, remember that we need to set the correct environment variable in order for our custom templates to be loaded. Now let's launch NB viewer. Let's switch to the web browser to see if we can load files from the local files system. I'm going to try accessing the notebook using the go bar. I'll type in the subpath to the notebook from its location inside network. Doing that didn't work. This would make you want to jump to the conclusion that the local files setting isn't working. However, this is an invalid conclusion. If you pay attention to the URL, you'll see that URL for slash was prefixed to what we tried to access. This is telling NB viewer to use the URL handler to load the following content. Of course, notebooks for slash jd frederick four slash one dot ipynb is not a domain name and is not located within a public top level domain name. So it makes sense that URL would fail to load this content. Instead, what we need to do is change the URL prefix to local file. And that will get the notebook to load. We want to automate this though. We don't want the go bar to not work and we would like the go bar to automatically translate to this canonical and be viewer local file format. In the last video, we got the NB viewer local files provider working. However, we weren't able to access it via the go bar. In this video, we'll write a URI rewrite provider that will allow us to access local files easily from the go bar. The first step is to open up Adam inside your NB viewer repository. Next, open the NB viewer sub folder and inside that open providers. Here, you'll see a list of the providers that are default with NB viewer. The Dropbox provider has a URI rewrite, which is a good example for the rewrite that we're going to do. Let's copy the handlers dot py file and create a sub folder inside the providers folder called X for X for is going to be the name of our plugin. Paste the file inside there. You can also copy the init file. Now open the handlers dot py file that you copied. Go ahead and remove the ipython header. We want this URI rewrite to accept URIs of the form author forward slash notebook name. We'll accept the notebook name either with or without an IPYNB extension. The first step is to replace the first string in the tuple. This string is the string that is used to search. The second string is the string that replaces the search string. Each group of the regular expression where a group is defined by parentheses can be accessed in the replacement string by using curly brackets. So this zero refers to this first item here, whereas the one refers to this second group here. Without explaining too much of regular expressions, I'll tell you that this matches a set of characters of variable length. I'll remove this text here where this first group will match the author. Add a forward slash. Copy this first group. This second group will match the notebook name. And at the end, I'll add dot ipynb. And I have to escape the dot because dot has a special meaning in regular expressions. And add a question mark because we don't know if the user is going to write dot ipynb or not. Now in the replacement string, I'll replace the URL with local file because local file is the canonical form of the URI accepted by the local file provider. I'll also add notebooks because notebooks is the subfolder that sits inside the network folder. The first value will be the author name, followed by the notebook name, and then we'll append a dot ipynb file extension. Now let's save this and we'll go back to the terminal and try launching nbviewer. But first make sure to set the environment variable that uses the custom templates that we created earlier. Now let's try launching nbviewer. To get nbviewer to use our URI rewrite, we use the double dash provider underscore rewrites. The provider rewrites flag takes a full Python namespace to a rewrite provider. You may be wondering why we had to edit nbviewer directly. Well, we actually didn't have to. We could have wrote our own Python package and then reference that Python namespace here. However, writing a Python package is outside of the scope of this video series. So for simplicity, we edit it nbviewer directly. That allows us to piggyback on nbviewer's namespace here. So to access our rewrite, we can use nbviewer.providers.exfer. Lastly, we'll want to disable github and gis providers. To do so, we'll set the URL provider as the only provider used by nbviewer. We can do that using the double dash providers flag and setting that to nbviewer.providers.url. Now that the server is launched, let's go to our web browser. Let's try accessing the first notebook under my name here. Looks like that worked correctly. Let's go back to the homepage and try accessing it without the ipynb to make sure it still works. Looks like that worked too. The last thing we'll want to do is change the showcase so it shows notebooks that are actually hosted by us. To understand how this is done, let's look at the source code of nbviewer. Back inside Adam in the nbviewer repository, open up app.py. If you scroll towards the bottom, you'll see where all the command line arguments are defined. The command line argument that we're interested in is this front page argument. This argument points to a JSON file which defines the content that will be used on the front page to render the showcase. The default used by nbviewer sits inside the nbviewer repository under frontpage.json. Let's open that. Here you can see the links that we see when nbviewer runs. Let's copy all the contents of this file. And then in a new terminal window, let's cd into our custom nbviewer templates directory. The reason why I had you open this directory is because it's where we're storing a lot of other custom things for our server. We might as well store other content in here just to keep it all grouped in one place. Create a new file called gallery.json. Inside that file, paste the contents from the front page.json that we copied out of the nbviewer repository. Now, looking at this file, we see that it has groups defined by this header attribute. Since we're ignoring the notion of groups, let's get rid of all the other groups below. When we set up the dummy directory, I only copied two files into my author directory. So let's get rid of the third entry. We'll give the first two names. And then change the target to the canonical URL that points to the correct notebook. The URL for the second notebook is almost the same, just the notebook file is different. Now we could change the image as well, but I don't have any nice images for my test notebooks. So I'm just going to leave the images as is. I'm going to save this file and go back to the terminal. Opening the tab of the terminal that's running nbviewer, I'm going to stop nbviewer by hitting Ctrl C. I'm going to rerun the same command except this time I'll change front page to the full path of the JSON that specifies our gallery. Now let's open the web browser to see if that worked. Refreshing the home page, we see that my JSON was loaded. Does this URL now points to the Jons notebook, even though it's still using the old screenshot? Jons notebook 2 is also available, even though it's using the old screenshot. Let's click on the link to see if it works. Awesome, it looks like that worked. If you want to find out more about nbviewer, visit the nbviewer repository at www.github.com forward slash Jupiter forward slash nbviewer. In this chapter, I'm going to talk about temp nb. It stands for Temporary Notebook Server. Temp nb is a service that launches sandboxed ephemeral notebook servers on demand, where ephemeral is defined as something lasting for a short time. It's kind of like an interactive version of nbviewer. Temp nb is useful for cases where you need to share notebooks that lose importance if they're not interactive. Temp nb users can interact with your notebooks to see what they have to provide. They can explore the data sets and write their own code inside the notebooks. The changes that they make won't be persistent anywhere, so it's okay to open a Temp nb service to the public. In my web browser, I'm going to navigate to Temp nb's website at www.github.com forward slash Jupiter Temp nb. I'm now going to scroll down to the readme. At the top of the readme, there's this very useful diagram for describing how Temp nb works. Temp nb can be broken into a few pieces. The user-facing piece is the configurable HTTP proxy. This piece routes traffic to the correct sub-pieces. The Temp nb orchestrator is what is used to launch the temporary notebook servers. Docker is the technology that is used to containerize them. Once a server is launched, the Temp nb orchestrator communicates to the configurable HTTP proxy, telling it to route a certain subset of addresses to the correct Temp nb container. Jupiter runs and maintains its own instance of Temp nb. You can access it at try.jupiter.org. The notebook itself is the same notebook that you're used to running on your local machine. You can see that this notebook comes pre-populated with example notebook files. In this video chapter, I'll show you how to do this. I'll also show you how to customize your notebook server image so that it reflects your organization's needs. In this video, I'll talk about installing Temp nb. Temp nb, like nbViewer, can be installed either using a Docker image or in development mode from source code. However, unlike nbViewer, it doesn't really make sense to install Temp nb from source code unless you're planning on developing Temp nb. That's because all the common configuration that one would want to do can be done through custom Docker images, the images that are launched by Temp nb as temporary servers. First, let's open up the Docker quick terminal. As we did in the last chapter, remember the IP address that's printed by Docker in green. This is the IP address to use to access your server later. The first step is to tell Docker to download Temp nb. You can do that by running Docker pull Jupyter minimal. Once that is finished downloading, you should have a full copy of the Jupyter minimal image. Now you'll need to generate a random token. This token will be used to authenticate with configurable HTTP proxy. This command works on Linux and Mac operating systems to generate a random string of 30 characters. However, you can use any random string you'd like for your token. So on a Windows machine, you can use the equivalent command provided by that operating system. Copy the random token. Now we'll launch the configurable HTTP proxy. To do so, I'll start with Docker run. And then I'm going to tell Docker to use the network adapter of the host. To do that, I'll use double dash net equals host. Then I'll tell Docker to run in the background and print its ID using the dash D flag. Next, I'll pass in the proxy token as an environment variable within the image. To do that, I'll use the dash E flag, specify the environment variable, and I'll paste the token that I generated in the last step. I'll set the name of this container to proxy. Then I'll specify the name of the container I want to launch. And I'll specify default target. Since this is the first time I've ran the command, Docker will load the image from its repository. Once that is finished downloading and has launched, we'll launch the tempnb orchestrator. To do so, we'll use the same type of command except we'll change the last couple pieces of it. The name will change to tempnb. And then we'll use the special dash V flag to tell the Docker image to bind the Docker client within itself. This will allow the Docker image to spawn other Docker images. Specifically, we'll bind the Docker sock. And lastly, we'll specify the name of the image. The orchestrator's name is tempnb. Since this is the first time I've ran this command too, Docker will download the image. Once that finishes, you should be able to visit your tempnb service. In the web browser, navigate to the IP address you remembered from earlier. At the end, append colon 8000 to visit port 8000. This is the port that tempnb is listening on by default. If all is well, tempnb should just work. And accessing that address will spawn a notebook server for you in a Docker image. In the top right hand corner, you'll see a hosted by Rackspace logo. This is not actually being hosted by Rackspace. This is being hosted on your machine. It's just that the image that you downloaded, Jupyter 4 slash minimal, is based on the same image that we use in the Jupyter deployment. In this video, we'll look at how we can use custom Docker notebook images with tempnb. Jupyter has a bunch of notebook images predefined in the Jupyter organization. In your web browser, open up the Jupyter organization GitHub page at github.com forward slash Jupyter. Once the page loads, scroll down and you'll see a repository called Docker stacks. Open that. This repository contains a bunch of Docker images for various tasks. Let's go ahead and clone this repository. To do so, copy the clone URL in the right hand column. Now, in a terminal, navigate to your home directory. Run, get, space, clone, and then paste the URL. Once the cloning is finished, CD into that directory. And let's open Adam. Once Adam opens, open the minimal notebook directory. This minimal notebook image is actually different than the minimal notebook image you used in the last video, but the one that we used in the last video is actually deprecated. And this is the modern replacement. This image doesn't have a racks based logo in the top right hand corner. Let's open up the Docker file. This is the file that tells Docker how to build the image. This from line is how Docker knows what this image inherits from. The Debbie and Jesse image is used as a base. You can see the list of Docker commands used to build this image. At the end, we specify that the start notebook dot shell file should be executed. Let's open that. Here you can see how the notebook is launched. The config file used for the notebook is stored under jupiter underscore notebook underscore config. This is the same kind of config file that we looked at in the second chapter. The files as they are in this repository are not a Docker image. We have to first build them. The build process is described in the make file. Let's open that. The help section describes how the build make file is used. To build the minimal notebook, we just need to run build forward slash minimal dash notebook. Let's try that within this directory. First, Docker will download the base image. It will take a while, but once it's done, your image will be built. Now let's try using this image with Tempenby. Start a Docker quick terminal. Once the terminal starts, pay attention to the IP address like you did before. We're going to run the same commands that we did in the video before the last video, skipping the Docker pull command and changing some of the contents of the last command. If you're continuing on from the last video, make sure that you close all the existing Docker containers before trying to do this. To do so, you can run the following command. Docker space stop, dollar sign, and then in parentheses Docker space PS space dash a space dash Q. I don't have any Docker containers running right now, so I get the help output. After running that command, you want to run almost the same command, but replacing stop with RM. The last command is almost identical, just changing from the name forward. Once again, we'll tell it to connect to itself, so it's capable of launching other Docker images. And here's where the command will start to change significantly from the last video, in addition to the omitted name flag. We'll start specifying the Python command that launches the orchestrator. We'll specify the image that we just built. Now the tricky part is that we'll have to tell the image how to launch the notebook server. We do so using the double dash command flag. We have to tell the notebook app what its base URL is. The image will format the string and you can insert special variables using curly brackets. Base path is one of those special variables that you can insert. We'll tell it to listen to IP0.0.0.0, which will allow it to listen to anything. Lastly, we'll specify the port that it's listening on. Once you run that command, in your web browser, try accessing the Docker image. If everything works, you should see a new notebook server. This notebook server won't have a Rackspace logo in the top right-hand corner. If you have troubles, most likely you mistyped something. If you need to debug why it's not working, open up another Docker quick terminal. When the Docker quick terminal launches, you can run docker ps-a. This will list all the Docker processes that are running. If you see one that says exit it with an exit code in parentheses, you can look at the logs of that Docker image. To do so, run docker logs and then copy the container ID, which is in the far left column, and paste it. In one of the attempts I made earlier to run this long command, I misspelled orchestrate. This caused the server to not run and me to receive gateway errors. By looking at the logs, I could tell that that was the problem and was able to correct it quickly. In the last couple of videos, we looked at launching TempNB using custom notebook image. In the following videos, including this one, we'll look at creating our own custom notebook image for use with TempNB. To get started, launch the Docker quick start terminal. Once the terminal launches, pay attention to the IP address like you did before. We'll be using that IP address to access TempNB. In the last couple of videos, we used the Jupyter Docker stacks minimal notebook image. We'll use that image as a base for our new custom image. To do so, let's copy the image out of the repository. I'll copy it into a directory called custom notebook. This will be the name of the custom image that I'm going to create. I'll then cd into custom notebook and I'll open Adam. Once Adam opens, I'll open the config file inside custom notebook Jupyter notebook underscore config.py. This is the configuration file that will be loaded by the Jupyter notebook inside the notebook image. Recalling from an earlier chapter, I'm going to set the untitled notebook name. This is an easy variable to set that we can use to quickly judge whether or not our config file is being loaded. The variable is c.contentsManager.untitled notebook. I'll set that to test. Now I'll save the file. Next, I'm going to create a shell file that we'll use to build this image. I'm going to copy the shebang from the start notebook file. We'll call the new file build.sh. I'm going to go back to my Docker quick start terminal. I'm going to open Adam up inside the Docker stacks repository. When Adam opens, I'm going to open the make file. I'm going to scroll down to the build line so I can see how images are built. I'll go ahead and copy this line. I'm going to go back to the Adam that we opened up inside the custom notebook directory. I'm going to paste this line inside the build.sh file. I'm going to remove drgs and replace owner with JD Fredder. You can use whatever you want here to identify yourself. And I'm going to replace this notdir $at with the name of my notebook image. I'll also get rid of the notdir $at at the end and the forward slash. This tells Docker to build the contents inside the current directory. Now I'm going to copy this shebang again. And create a new file for testing this image with tempnb. I'll call this file test.sh. I'll paste the shebang. And then I'll enter a command that causes all the images that are currently running in Docker to close. It's important to note that this command is inside this file. We don't want to run this file if there are Docker images on our system that we don't want to close. The reason I'm adding this line is because it becomes tedious to constantly close Docker images each time you want to run your test. To close all the images that are currently running, I'll use docker stop and dollar parentheses docker ps-a-q. What this does is runs docker stop on every docker image that's currently running. I'm going to copy this line, paste it below, and replace stop with rm. This will do the same thing but remove the images instead of stopping them. Next, I'm going to create a token for use with the HTTP config proxy. I'll use export to define the variable token as head 30 characters long of dev urandom piped with xxd-p. Next, I'll run the configurable HTTP proxy image. To do so, I'll use docker run. Double dash net equals host dash d dash e config proxy auth token equal the token variable. Double dash name equals proxy image name jupiter configurable HTTP proxy space. Double dash default dash target 127.0.0.1 port 9999. I'm going to turn on word wrap so you can see the whole command. Next, I'm going to launch the tempnb orchestrator image. I'll start with the same command but deviate once I get to the name. I'll use dash v bar run docker dot sock colon four slash docker dot sock to cause the image to connect to the docker client. Next, I'll specify the jupiter tempnb image and the command python orchestrate dot pi. I'll specify the image to jd fredder custom notebook and the command to start dash notebook dot sh. This part's really important. The minimal notebook image requires you to start the notebook server using start dash notebook dot sh instead of running ipython space notebook or jupiter space notebook. That's because if you run either of those, the notebook will be launched as root and the notebook will be looking for the configuration file inside the root home directory. However, the configuration file is installed into the jovian user's home directory. So running start dash notebook dot sh does some special things that causes the notebook to launch the server as the jovian user. I'll have to pass some commands into the start notebook shell script. To do so, I'll escape quotes. Inside those quotes, I'll set the base URL, allow origin, and the port. I'll save this file and go back to the docker terminal. Now I'll navigate to the custom notebook directory that I created earlier and I'll try running the build dot sh file I just created. If you get a permission denied, it's probably because permissions aren't set correctly on the file. You can do so by running chmod plus x build dot sh. Looks like the image built successfully. Now let's try running the test shell file. We'll have to change the permissions of that as well. Looks like that worked. We get these help outputs because no images were running at the time. The last two outputs are the grids for the images that were launched. Let's go to the web browser. Try accessing the tempnb server via the ip address that docker printed. Looks like the server launched successfully. Now let's see if the config worked. Awesome. It looks like the default notebook name is no longer untitled, but is test, which implies that our config is being loaded. In this video, we'll add custom content to our tempnb notebook custom image. This process is very similar to the process that you use for adding custom content to your nb viewer deployment. That's because the notebook itself uses ginga2, like nb viewer, to do its templating. First, let's start the docker quick start terminal. Pay attention to the ip address that is listed, for that's the ip you'll use to access docker. Let's go ahead and navigate into our custom notebook directory and open atom. The first thing we'll do is create a page.html template. This template will override the page.html template of the notebook. Inside the page.html template, we'll extend the base template of the notebook. Next, we'll override the header underscore buttons block. This block exists at the top of the notebook pages. We can use this to add our own logo. We'll go ahead and add an O'Reilly logo here. We have two options to do this. We could either add the O'Reilly picture to our custom notebook image, or we could host it externally and reference it here. For tempnb, it's better to host your images and other static content externally to the images that are launched by the orchestrator. That's because the notebook server uses tornado to host its files, and tornado isn't as fast as other servers like engine x or Apache, which are even slower than services like CDNs. So what we'll do is open our web browser and get the link for the O'Reilly image. www.oreilly.com Once the page loads, right-click on the image and say copy image URL. Then go back to atom. Now on the header buttons block, add an image tag. Set the source of that image tag to the link that you copied from O'Reilly. Save the page. Now we'll need to copy this template into our image. To do so, open your docker file. Scroll down to the bottom. The first thing you'll need to do is create a directory that contains templates. To do so, we're going to copy this line that creates the dot Jupyter directory inside the user directory. We'll put our template directory inside that. We'll call it custom. We'll then need to copy the file into that directory. Go ahead and copy the line that does the notebook config. Change notebook config.py to page.html and update the path to custom. Save the file. Lastly, you'll need to go into your Jupyter notebook config.py file. Inside here, below the untitled notebook line, set the extra template paths variable of the notebook app. This variable accepts a list, a path. Give it the path to your custom template folder. And then save the file. Now go back to your docker terminal. And inside here, run the build script again. Once the build script finishes, you can run the test script. Now go back to your web browser. Try accessing tempnb. If all goes well, you should see the O'Reilly logo on the top of the header bar. You could style this better by using css in your template page. But the point here is not to make something that looks good. It's just to show you how to get static content into your tempnb images. In this video, I'm going to talk to you about setting limits on your tempnb service. And then briefly, I'll talk about security. To get started, open up a terminal. Then navigate into the custom notebook directory. This is the directory that contains the custom image we've created. Now open Adam. Once Adam opens, open the test.sh file. This is the file that contains the lines that can launch this image in tempnb. In a real deployment, you could use these same lines. Just remove the two docker stop and docker rn lines. I'm going to enable word wrap so you can see the whole commands. The last command is the command that launches the orchestrator. We pass in a command into the image using the double dash command flag. You can tell the orchestrator what image to use using the double dash image flag. There are also additional flags. For example, if you need to limit the number of CPUs any particular container can use, you can use the double dash CPU underscore shares flag. And this accepts an integer value for how many CPUs are allowed. For example, we could limit each image to using two CPUs at most by doing equals two. The next useful flag for limiting is the coal period flag. This flag accepts an integer in seconds that determines how often containers are examined for their age and then collect it if old enough. The default for this is 600 seconds. This is 10 minutes. We could make this faster, for example, by doing 300 seconds. Cold timeout is the variable that sets how long it takes for a container to be sitting idle that it will get cold. The default for this is 3600 seconds. This variable is also an integer specified in seconds. We can half that time by setting it to 1800 seconds. We can also set a limit on the amount of memory each container is allowed to use by setting mem underscore limit. This accepts a string specifying the amount of memory that each container is allowed to use. It defaults to 512M for our 512 megabytes. We can half this by setting it to 256M. The last important flag I would like to mention is the pool size flag. This flag accepts an integer which specifies how many child docker containers can be launched by the orchestrator. We can think of this as a limit as how many users can use Temp Add B at any given time. The default for this is 10. We can limit it to half that by setting it to 5. Note that these flags are all set outside of the double dash command because they're not actually getting passed into the image but to the orchestrator itself. Lastly, let's talk a little bit about security. Go ahead and open up your Jupyter underscore notebook underscore config. You see here in this configuration file that there's a flag for HTTPS encryption and password. This is the same HTTPS encryption and password that you used in the earlier chapter where you learned how to deploy the Jupyter notebook. This may be useful to you but take note that this is not affecting the orchestrator itself. So any random user can still access your deployment of Temp Add B and launch containers. They just may not be able to take advantage of those containers if they don't have the appropriate credentials to log on to them. This means that those people could still spawn up a bunch of containers and use your entire pool even if they're not authenticated. This is a limitation of Temp Add B as the Temp Add B orchestrator does not yet have a password mechanism. You could, however, wrap the orchestrator in your own password at Proxy. In this chapter, I'll teach you about Jupyter Hub. The technical definition of Jupyter Hub is that it's a multi-user server that manages in Proxy's multiple instances of the single user Jupyter notebook server. A less technical definition is that Jupyter Hub is a multi-user version of the Jupyter notebook. Jupyter Hub is a Python 3 only application, but that doesn't mean that the kernels that are ran by the notebook servers launched by Jupyter Hub are restricted to Python 3 only. In other words, the user isn't restricted to Python 3. Jupyter Hub is comprised of three main pieces, the multi-user hub, the configurable HTTP proxy, and the multiple single user notebook servers that are launched by the hub. When you start Jupyter Hub, you're actually starting the hub application. The hub application then spawns the configurable proxy. The proxy forwards all requests on the root domain to the hub. The proxy is what's exposed to the internet. The hub then authenticates the user when the user connects, and the hub will launch a single user notebook server for that user. It then configures the proxy to route all requests on the root domain forward slash the username to that new single user notebook server that it launched. Jupyter Hub is highly configurable. The authentication is configurable. We're going to look specifically at the O authenticator extension, which allows you to use GitHub authentication with Jupyter Hub, but you could write your own authenticator. This is useful if your organization uses a specialized authentication scheme. Second, you can configure the spawning. In other words, you can configure how single user notebook servers are launched. We're going to look specifically at the Docker spawner, which is a tool that allows Jupyter Hub to spawn the single user notebook servers using Docker. And lastly, you can configure the spawn notebook itself. By default, Jupyter Hub launches the notebook that's installed on the local machine. If you're using something like the Docker spawner, you can customize the notebook by using the techniques described in the last chapter where we created a custom Jupyter notebook Docker image. In the following videos, we'll look at three ways to install Jupyter Hub. The first is a completely vanilla installed directly from package managers. The second is a vanilla install with the Docker launcher extension. And the last is a more complex install that uses a combination of the Docker launcher extension and Docker swarm to handle more users to redistribute the demand across multiple machines in order to handle a higher user load. First, let's remove the dot Jupyter folder that we created in the earlier chapter where we examined installing the vanilla notebook. We need to do this because Jupyter Hub relies on the local notebook install. We don't want to dirty our new Jupyter Hub install with the config options that we set earlier. On the other hand, later you'll find configuration of Jupyter Hub to be easy because configuring the notebook servers that get launched by Jupyter Hub is the exact same procedure that we examined earlier using traitlets in the config machinery to config the vanilla notebook. All the configuration that you have for the vanilla notebook will apply to the vanilla notebook that's launched by Jupyter Hub. You'll want to verify that you have Python 3 on your machine. You can do so by running Python double-dash version. If your system does not print Python 3, try Python 3 double-dash version. If that too does not work or does not print version 3, then you'll want to revisit chapter 1 video 3 where we talk about prerequisites and you'll want to make sure that you have Python 3 installed on your machine. Next, let's look at the version of Node that we have installed. You can do so by running npm-v. I have version 3.4.1 installed on my machine. If your version is lesser than that, you can update it by running sudo npm install-g npm. What this will do is cause npm to uninstall itself and then install the latest version of itself in its place. If this command fails partway through, you'll find that you need to reinstall Node and npm. The first thing we'll install is the configurable HTTP proxy. You'll recognize that name from the earlier chapter where we looked at deploying tempnb. However, in that chapter, we used a configurable HTTP proxy docker image. So we didn't actually install the configurable HTTP proxy on the local machine. Because we're installing Jupyter Hub on the local machine, we'll need to do that here. Go ahead and run sudo npm install-g where this dash-g flag installs the software globally configurable HTTP proxy. Once that is finished, you'll want to install Jupyter Hub. You can do so by running pip3 install Jupyter Hub. By running pip3, we force the python3 pip to be used. If you receive a permission denied error, go ahead and prepend the command with sudo. Now you can try launching Jupyter Hub. If you have an error like this, go ahead and uninstall Jupyter Hub and then reinstall it. When you first run the hub, you may get an error that there's a bad configuration file. You can fix this by running the command that is recommended. This command will generate a configuration file for you. Say yes when asked if you want to override the file. Now try launching the hub. If everything is successful, you should get a message saying that the hub is now running at localhost 8000. In your web browser, try accessing that. Awesome, looks like that worked. Now you should be able to log on using your local system credentials. Now that Jupyter Hub is installed, let's see how it works. You can launch Jupyter Hub by running Jupyter Hub. When Jupyter Hub launches, you'll notice a couple warnings. The first warning is that the config proxy auth token had to be generated by Jupyter Hub. You can bypass this warning by setting that variable explicitly. In the future, when you decide to use extensions with Jupyter Hub, such as NBGrader, you'll need to set this token. This token is how applications can communicate with the configurable HTTP proxy. NBGrader, for example, adds a handle to the configurable HTTP proxy that allows graders to access notebooks with a special interface. The second warning you'll see is that no admin users are defined, so the admin interface will not be accessible. We'll go ahead and ignore that for now. Switch to your web browser. We'll access the address listed here. It should be available at localhost8000. When you access that address, you'll be presented with a login screen. Jupyter Hub uses PAM as a default authentication method. This means that to access Jupyter Hub, you use credentials on the host machine. In other words, you use your current account name if you're running it locally. The password is the same password for the account on the host operating system. When you sign in, you'll be presented with your own notebook server. In the top right-hand corner, you'll see a button for a control panel and a button to log out. Go ahead and click on control panel. In the control panel, you'll see an option to stop your server or access your server. Go ahead and stop your server. You'll also see an option to administrate Jupyter Hub. Click on that. Here, you'll see a screen that allows you to define new users and remove users. Here, I'm going to remove JD Fredder. You can also change users from admin to normal users. Go ahead and log out. In this video, I'll show you how to install the Jupyter Hub Docker Launcher extension. Jupyter Hub is a highly configurable application. Even the way that Jupyter Hub launches single-user notebook servers is configurable. The Docker Launcher extension allows you to force Jupyter Hub to launch the single-user notebook servers as Docker images. With this extension, you can launch any custom Docker image that you have that contains a Jupyter notebook server. If you want Jupyter Hub to launch the single-user notebook servers using something other than Docker, you can write your own extension to do so. To get started, open up a Docker Quick Term. Once the Docker Quick Terminal launches, pay attention to the IP address. You'll need that IP address for later during configuration. Before we get started, we should close all existing Docker images, just to make sure that none are running that will conflict with what we're trying to do. To do so, you can run Docker, stop, and then dollar parentheses, Docker PS-A-Q, semicolon, Docker RM, dollar parentheses, Docker PS-A-Q. Now, you can get the Docker Spawner extension source code by cloning it from GitHub. To do so, run git clone, HTTPS, github.com, Jupyter Docker Spawner.git. You want to run this inside the directory that you want to install the source code to. I'm doing it inside my home directory. Now, CD into that repository. Run pip3 install-r requirements.txt. This will install the requirements of the Docker Spawner. Don't forget to add a sudo in front if your permissions require it. Next, run python3 setup.py install. Lastly, run sudo pip3 install-e. Now, we'll need to change our Jupyter Hub config file so it launches using the Docker Spawner. CD back out into your home directory or whatever directory that you launched Jupyter Hub from. I launched Jupyter Hub from my home directory. Once there, open up Jupyter Hub underscore config.py file in your text editor. I'm going to open it in Adam. Below the first line, add c.jupyterhub.spawner underscore class equals dockerspawner.dockerspawner. Pay attention to the capitalization. This tells Jupyter Hub to use the Docker Spawner. Next, add c.dockerspawner.use underscore docker underscore client underscore env equal to true. This allows the Docker Spawner to work with the Docker Quick Terminal. Next, add c.dockerspawner.tls assert underscore hostname equal to false. This is also required to use the Docker Quick Term in your custom image with Docker Spawner. Next, add c.dockerspawner.container underscore image equal the name of your custom image. I'm going to use the image that I created earlier in the tempnb chapter. Use your custom image here too. Now go ahead and save the file. Now cd into your custom notebook image directory. This is the same directory from the chapter where we investigate at tempnb. Open Adam. Open up your Jupyter underscore notebook config file. Inside here, add c.notebookapp.baseurl equals os.environ.jpy underscore base underscore url. This configures the notebook server to listen to the URL that's a subset of Jupyter Hub. Go ahead and click save and then close Adam. Now you should be able to launch Jupyter Hub. Navigate back to the directory that you launched Jupyter Hub from. Mine is the home directory. Type Jupyter Hub double dash Docker Spawner.container underscore ip equals 192.168.99.100. Replace this IP address with the IP address that was listed by Docker when you launched the Quick Term. Click return. Once the server launches, go to your web browser. You should be prompted with a login. Login using your local credentials. Once you log in, you should see your custom notebook image running. This means that everything we did worked. In the last video, we set up Jupyter Hub with the Docker Spawner extension. This made Jupyter Hub spawn notebook servers inside Docker images. In this video, we'll take it a step further and customize how Jupyter Hub does authentication. Jupyter Hub has a notion of authenticators, which allow you to change how users authenticate with Jupyter Hub. You can use authentication methods ranging from traditional, used in academia and in the industry, to more specialized methods, like using social networking or social media authentication. In this video, we'll look at using GitHub's authentication system. There's an extension called the O authenticator, which was written for Jupyter Hub to allow us to do this. First, open up a Docker Quick Terminal. Once the Quick Terminal launches, make sure to close all images that are already running on the machine. Include it in the Docker Spawner extension repository is an example of how they use the Docker Spawner with the O authenticator. We'll use that as a starting point. First, you want to copy your Jupyter Hub config into that directory. My Jupyter Hub config is located in my home directory because that's where I launched Jupyter Hub. So I'm going to copy that from my home directory into that repository example folder. Next, cd into that directory. Now run sudo pip3 install get plus HTTPS forward slash forward slash github.com forward slash Jupyter forward slash O authenticator dot get. When that finishes, you want to create a user list file. Let's open up Adam inside this directory. Once Adam opens, go ahead and right click and create a user list file. Inside the user list, add GitHub user names that you want to have access to your server. Don't forget to add your own. I'm going to add Brian and Kyle, my colleagues. Make yourself an admin by adding a space and admin after your account name. Save the file and go ahead and close Adam for now. In your web browser, go to github.com forward slash settings forward slash applications forward slash new. When that page loads, give your application a name. I'm going to call mine Jupyter Hub. This is the name that users will see when authenticating while connecting to your Jupyter Hub instance. Set the homepage URL to the Jupyter Hub URL. This should be for now local host 8000. Go ahead and copy that URL. Paste it below where it says authorization callback URL. Then append hub forward slash OAuth underscore callback. Now click register application. Go back to your desktop. Launch a Docker quick start terminal. Once the quick start terminal launches, pay attention to the IP address that's listed. You'll need this later. Now let's CD into the Docker Spanner directory. Inside that, CD into the OAuth examples directory. Now open Adam. Once Adam opens in that directory, open the Jupyter Hub config file. Below the container image line, you're going to need to add a new line. Add C dot Jupyter Hub dot authenticator underscore class equal to in quotes OAuth.github OAuth. Now below that line, add C dot GitHub OAuth authenticator dot OAuth underscore callback underscore URL equal to the URL that you provided for the authentication callback while creating the application on github.com. I'm going to go back to my web browser to show you what that URL is. At the bottom of the page, you'll see it. Go ahead and copy that. Now below that line, add C dot GitHub OAuth authenticator dot client underscore ID equal to the client ID provided to you by github. It's located at the top of the page. Now below that line, add C dot GitHub OAuth authenticator dot client underscore secret equal to the secret provided to you by github. Lastly, on the line below that, you'll need to set yourself as an administrator. To do so, set C dot authenticator dot admin underscore users equal to and then in square brackets and quotes your account name. This is your GitHub account name. Now save the file. Back in the terminal run dash run dot sh double dash Docker spawner dot container IP equal to the IP address listed in green. Now in your web browser, navigate to the Jupyter Hub instance. It should be at local host colon 8000. Once you arrive on that page, click the sign in with GitHub button. You should be asked to authorize the application. Click authorize. You'll then be redirected back to your Jupyter Hub instance. You can click my server to access your server or admin to administrate Jupyter Hub. I'm going to click on my server. Note that our custom image is still being loaded. In the previous videos, we were able to get Jupyter Hub working with GitHub OAuth and a custom Docker image. In this video, we'll look at how we can enable our users to share files across their different accounts inside the Jupyter Hub instance. To do so, we'll mount a shared directory on the host operating system. We'll do this two ways. One, we'll mount it as read only for content that all users should be able to see, but not necessarily edit. Two, we'll mount it as read write so users can have a shared directory from which they can save files and fetch files. To get started, open up a Docker quick terminal. Once your Docker quick terminal launches, go ahead and make sure no Docker images are currently running. Inside my home directory, I'm going to create two shared folders. One will be called shared underscore RW for shared read write, and the other shared underscore R for read only shared. You can use any directory that's accessible on your file system. I'm using my home directory as a convenience. Now, I'm going to copy two example notebooks into each of those folders. I'm going to CD into the shared read write folder and launch a normal Jupyter notebook server. When the notebook server launches, I'm going to go ahead and create a new Python notebook. First, I'm going to change the name of this notebook. I'll change it to test one. Now, I'll give the notebook some content. I'll make the first cell a markdown cell. In the second cell, I'll add some code. Now, I'm going to save this notebook. Now, close the web browser and go back to the terminal. In the terminal, I'll hit Ctrl C twice to close the server. Now, I'll CD into the read only directory. I'll launch the notebook server here too. Once the notebook server launches, I'm going to create a new notebook. I'll call this notebook test two. I'll make the first cell a markdown cell. In the second cell, I'll add some code. Now, I'll save the file and close the web browser. Next, I'll close the Jupyter notebook server by hitting Ctrl C twice. Now, CD into the Docker spawner directory. Inside there, I'll CD into the example's OAuth directory and open Adam. Once Adam opens, I'll make sure my Jupyter Hub underscore config file is opened. Then, below the admin users line, I'll add c.dockersponer.volumes equals a mapping of volumes. The volume mapping is path on the local machine as the key and as the value path that it should be mounted inside the Docker image. I'll mount the read-write directory. I'll have it mounted to home jovian for slash work for slash shared. That's because home jovian work is the directory that's loaded by default inside the Docker image. To mount read-only directories, the syntax is almost the same. Go ahead and copy that line and paste a copy of it below. On this line, we'll change the name of the path that's mounted. Let's change it to read-only. Likewise, we'll change the path on the parent system to the read-only directory. The important part is that the key is not docersponer.volumes, it's actually dot read underscore only underscore volumes. Once you make that change, go ahead and save the file. Go back to the terminal. Now, launch the server like you did before. Don't forget to set the Docker spawner container IP trait. The IP address is the IP listed by the Docker quick terminal in green when you launched it. Once your server is launched, go back to your web browser. In your web browser, navigate to your Jupyter Hub instance. You may still be logged on to your other session from the earlier videos. That's okay. Go ahead and click on my server. When my server loads, you should see two folders, read-only and shared. Go ahead and open shared. Inside shared, you should see the test one notebook. Go ahead and open that. Make a change to this notebook. It doesn't matter what change, just a change that you can see. Then go ahead and try saving the notebook. When you save, you should have seen the checkpoint flash up to the left of the kernel name. Go ahead and close the notebook. And try reopening it. Looks like that worked. Go ahead and close the notebook. Go back to your home directory. Then go inside the read-only directory. Open up the test to that notebook. When you open this notebook, you should see a notification that flashes quickly to the left of the kernel that says auto-save disabled. You should also see an icon of a floppy with a red circle above it indicating that saving is disabled. Try making changes to this file. Any changes, it doesn't matter. I'm going to remove this read-only. Now I'm going to try saving. When I save, I should see another notification in yellow that says the notebook is read-only. Go ahead and close the notebook. Reopen the notebook. And you should notice your changes weren't saved. This means that the read-only is working correctly. In this video, we'll talk about how you can increase the performance of your Jupyter Hub deployment using EngineX. EngineX will be used to host the static files of the Jupyter notebook. The Jupyter notebook uses Tornado to host its web content. Tornado is great for templating and hosting dynamic content. However, it's slower than things like EngineX or Apache to host static files. The methods described in this video can also be extended to redirect and host the static content on CDNs. First, we're going to launch Jupyter Hub. Go ahead and open up a Docker quick terminal. Pay attention to the IP in green. Then make sure that all Docker images are closed. Next, navigate into the OAuth example folder inside the Docker spawner directory. Launch Jupyter Hub by running the run.sh script. Once Jupyter Hub launches, open up your web browser and verify that Jupyter Hub is running. This should be available at localhost colon 8000. Now, go back to the terminal. Open up a new tab by hitting command T. If you're on a machine that doesn't support tabs in your terminal, open up a new terminal. Now, we'll install EngineX. On OS X, you can do this using brew. On Linux operating systems, you'll want to use the package manager of that system. Typically, this is apt-get or yum. If you're on OS X, go to your web browser. Go to brew.sh. This is the home page for brew. If you don't have brew installed already, copy the line under the install home brew section inside the text box. Paste that line in your terminal and execute it to install home brew. I've already installed home brew on my machine, so I'm not going to demonstrate this for you. Go back to your terminal. Now, make sure that brew is up to date. To do so, you're going to run brew update. Now, we'll use brew to install EngineX. Once brew is finished installing EngineX, run EngineX. Now, go back to your web browser. Access localhost 8080 to see if EngineX is running. If EngineX is running, you should see a welcome to EngineX page. Now, go back to your terminal. Run EngineX-S to stop the EngineX service. Now, go back to your web browser. Go to github.com. You should see the Jupyter Hub application that you registered earlier. Click on that. Now, change the port on the home page and the authentication callback URL to 8080. Go back to your terminal. Now, change the EngineX configuration file so that it proxies all requests to Jupyter Hub. We'll also proxy the web socket connections to Jupyter Hub. However, we'll intercept requests to static assets and host those directly using EngineX. To edit the EngineX configuration file on OS X, run atom or open up forward slash usr forward slash local forward slash Etsy forward slash EngineX forward slash EngineX.conf. This is the path to the configuration file for EngineX. If you're running EngineX on a machine other than OS X, this path may be different. You'll have to refer to your installation method to figure out where the configuration file lives by default. I'm going to open this file in atom. The first thing we'll do is trim a lot of the comments and access lines. This will allow us to focus better on what the contents of the configuration file should be. I'm going to go ahead and remove this userNobody comment. And also the log comments and process ID comment below. I'll leave the events block and remove the log format comment, access log comment, send file, TCP push, keep a live time out, gzip, all the way down to the server block. Inside the server block, I'll leave the listen to port 8080 and server name local host lines. I'll remove the lines down to the location forward slash. Everything from here on out, I'll remove. Now we'll configure all requests on root to forward to Jupyter Hub. To do so, remove the lines inside the root block. The first line you'll need is proxy underscore pass space, the address to Jupyter Hub. Next, proxy underscore set underscore header, capital X dash capital R real dash all caps IP space dollar remote underscore add semicolon. Next, you'll want proxy underscore set underscore header host with the capital H dollar HTTP underscore host semicolon. In the last line you'll want in the root section proxy underscore set underscore header space capital X dash capital F forward it dash capital F four space dollar proxy underscore add underscore X underscore forward it underscore four. Now copy these four lines that you just wrote. Below the location root block, we'll need to add another location block, which will only intercept attempts to connect to WebSockets. We have to handle WebSocket forwarding specially. This is a detail of engine X configuration. To do so, write location space till day asterisk. Then we're going to add a long regular expression that will look kind of funky. This regular expression will be used to match the request path for WebSocket connections. This first group is matching the user forward slash account name section of the URL. The second group matches the WebSocket request specific to the notebook server. Then suffix with forward slash question mark, and that's all you need for the regular expression that identifies WebSocket requests. I'll turn on word wrap so you can see this whole line. Inside that group, paste the four lines that you copied earlier. You'll need to add some additional lines to get WebSocket forwarding the work. First, you'll want to add proxy underscore HTTP underscore version space one point one. Next, you'll want to add proxy underscore set underscore header space capital U upgrade space dollar HTTP underscore upgrade semicolon. Next, add proxy underscore set underscore header space capital C connection space upgrade in quotes semicolon. Last, you'll want to add proxy underscore read underscore timeout space 86,400 semicolon. This is all you need to get content to forward to Jupyter Hub using engine X. The last piece we'll want to add is to intercept request for static assets. We'll want to host directly from the notebook directory. But first, let's make sure that this is working. Save the file. Go back to your terminal. Launch engine X. If you get a message like this, it means there's something wrong with your configuration file. It looks like mine has a typo. Remote underscore add was supposed to be remote underscore adder. I'm going to add an R and then save the file. Now I'm going to go back to the terminal. I'm going to try launching engine X again. It looks like I missed another instance of remote add. Also down here where I copied that content from the root. I'm going to save the file. I'll try launching engine X again. Looks like it launched successfully. Now I'm going to go to my web browser to verify that it launched. I'm going to try accessing engine X. If you recall correctly, it's at localhost 8080. When I first access it, it looks as if what I did had no effect on engine X. However, this is because my web browser is caching the contents of the last request. By refreshing the page, I should see the right contents. If refreshing the page doesn't fix the problem for you, you may need to clear your web browser's cache. To do so, you'll have to follow steps specific to your web browser. I'm going to go ahead and click on my server. I need to validate that the proxy for the web sockets is working. I'm going to open up the shared folder. And then the test one notebook. I'm going to try to run the cell with a change. If it works, I know that the web sockets are forwarding correctly because the notebook is able to execute code. I'm going to save and close this notebook. Now I want to try to speed up this Jupyter Hub instance. To do so, I'll have to intercept request the static. I'm going to go back to my terminal. The first thing I need to do is make sure that I have the static notebook files somewhere on my computer. That way, Nginx can host them. I'm going to navigate to my root directory. Here, to clone the notebook, I'm going to run getClone, space, HTTPS, github.com, forward slash Jupyter, forward slash notebook. Once the notebook clones successfully, I'm going to go back to the atom instance that I used to open the Nginx configuration. Above the location root block, I'm going to add a new block. This block will recognize requests for static assets. To do so, I'll have to use a regular expression again. This time, just use tilde, no asterisk. The regular expression is as follows. Forward slash. And the first group is the user block, just like we did earlier. And then the next block is forward slash static forward slash. Lastly, parentheses dot asterisk to match all characters, forward slash, question, v equals, and then parentheses dot asterisk to match all characters. Now, you're going to specify the root directory to the directory that we clone the notebook repository to. When that is finished, save the file and return to your terminal. Make sure to stop Nginx if it's already running by running Nginx, dash s, stop. Then run Nginx to launch Nginx again. Now let's go back to the web browser. Navigate back to the root page, refresh the page. If everything worked, the page shouldn't look any different. However, this Jupyter logo, for example, is being hosted by Nginx.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.0, "text": " Hi, and welcome to my course on the Jupyter Notebook for Data Science Teams.", "tokens": [50364, 2421, 11, 293, 2928, 281, 452, 1164, 322, 264, 22125, 88, 391, 11633, 2939, 337, 11888, 8976, 24702, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 1, "seek": 0, "start": 5.0, "end": 9.0, "text": " I'll just give you a brief overview of the course so you can know what you're getting into.", "tokens": [50614, 286, 603, 445, 976, 291, 257, 5353, 12492, 295, 264, 1164, 370, 291, 393, 458, 437, 291, 434, 1242, 666, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 2, "seek": 0, "start": 9.0, "end": 14.0, "text": " So we'll start off by doing what you expect, getting Jupyter Notebook set up on your machines.", "tokens": [50814, 407, 321, 603, 722, 766, 538, 884, 437, 291, 2066, 11, 1242, 22125, 88, 391, 11633, 2939, 992, 493, 322, 428, 8379, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 3, "seek": 0, "start": 14.0, "end": 18.0, "text": " The second thing I'll go over then is Jupyter Notebook features.", "tokens": [51064, 440, 1150, 551, 286, 603, 352, 670, 550, 307, 22125, 88, 391, 11633, 2939, 4122, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 4, "seek": 0, "start": 18.0, "end": 21.0, "text": " So there's a lot of really interesting things going on with the Jupyter Notebook.", "tokens": [51264, 407, 456, 311, 257, 688, 295, 534, 1880, 721, 516, 322, 365, 264, 22125, 88, 391, 11633, 2939, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 5, "seek": 0, "start": 21.0, "end": 25.0, "text": " Some of the most useful functionality comes from what's called Notebook Extensions.", "tokens": [51414, 2188, 295, 264, 881, 4420, 14980, 1487, 490, 437, 311, 1219, 11633, 2939, 9881, 8302, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 6, "seek": 0, "start": 25.0, "end": 27.0, "text": " So I'll be going over a lot of those.", "tokens": [51614, 407, 286, 603, 312, 516, 670, 257, 688, 295, 729, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09533492555009558, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.12569399178028107}, {"id": 7, "seek": 2700, "start": 27.0, "end": 30.0, "text": " I'll be showing you how you can use both Python and R in the same Notebook.", "tokens": [50364, 286, 603, 312, 4099, 291, 577, 291, 393, 764, 1293, 15329, 293, 497, 294, 264, 912, 11633, 2939, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 8, "seek": 2700, "start": 30.0, "end": 33.0, "text": " So if you have some piece of your analysis that needs to be done on R,", "tokens": [50514, 407, 498, 291, 362, 512, 2522, 295, 428, 5215, 300, 2203, 281, 312, 1096, 322, 497, 11, 50664], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 9, "seek": 2700, "start": 33.0, "end": 36.0, "text": " it's very easy to actually do part of it in R, send it back to Python,", "tokens": [50664, 309, 311, 588, 1858, 281, 767, 360, 644, 295, 309, 294, 497, 11, 2845, 309, 646, 281, 15329, 11, 50814], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 10, "seek": 2700, "start": 36.0, "end": 41.0, "text": " or even use R natively as the entire kernel that runs your Jupyter Notebook.", "tokens": [50814, 420, 754, 764, 497, 8470, 356, 382, 264, 2302, 28256, 300, 6676, 428, 22125, 88, 391, 11633, 2939, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 11, "seek": 2700, "start": 41.0, "end": 45.0, "text": " Also, different things like using SQL in the Notebook to query databases,", "tokens": [51064, 2743, 11, 819, 721, 411, 1228, 19200, 294, 264, 11633, 2939, 281, 14581, 22380, 11, 51264], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 12, "seek": 2700, "start": 45.0, "end": 49.0, "text": " some really nice post-save hook functionality and widgets,", "tokens": [51264, 512, 534, 1481, 2183, 12, 82, 946, 6328, 14980, 293, 43355, 11, 51464], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 13, "seek": 2700, "start": 49.0, "end": 51.0, "text": " which I'll just demonstrate right here.", "tokens": [51464, 597, 286, 603, 445, 11698, 558, 510, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 14, "seek": 2700, "start": 51.0, "end": 56.0, "text": " This is an example of a widget where I've created a function that generates data", "tokens": [51564, 639, 307, 364, 1365, 295, 257, 34047, 689, 286, 600, 2942, 257, 2445, 300, 23815, 1412, 51814], "temperature": 0.0, "avg_logprob": -0.05558278343894265, "compression_ratio": 1.670731707317073, "no_speech_prob": 0.002714649075642228}, {"id": 15, "seek": 5600, "start": 56.0, "end": 59.0, "text": " according to some line, and the green line shows you the actual function", "tokens": [50364, 4650, 281, 512, 1622, 11, 293, 264, 3092, 1622, 3110, 291, 264, 3539, 2445, 50514], "temperature": 0.0, "avg_logprob": -0.06831210060457213, "compression_ratio": 1.7835820895522387, "no_speech_prob": 0.0019261285196989775}, {"id": 16, "seek": 5600, "start": 59.0, "end": 64.0, "text": " with some noise, and the blue dots are data that gets drawn from this distribution.", "tokens": [50514, 365, 512, 5658, 11, 293, 264, 3344, 15026, 366, 1412, 300, 2170, 10117, 490, 341, 7316, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06831210060457213, "compression_ratio": 1.7835820895522387, "no_speech_prob": 0.0019261285196989775}, {"id": 17, "seek": 5600, "start": 64.0, "end": 68.0, "text": " So the total number of points is 10, and as I click and drag this off to the right,", "tokens": [50764, 407, 264, 3217, 1230, 295, 2793, 307, 1266, 11, 293, 382, 286, 2052, 293, 5286, 341, 766, 281, 264, 558, 11, 50964], "temperature": 0.0, "avg_logprob": -0.06831210060457213, "compression_ratio": 1.7835820895522387, "no_speech_prob": 0.0019261285196989775}, {"id": 18, "seek": 5600, "start": 68.0, "end": 72.0, "text": " increase the number of points, and you can see that the fit dynamically moves around", "tokens": [50964, 3488, 264, 1230, 295, 2793, 11, 293, 291, 393, 536, 300, 264, 3318, 43492, 6067, 926, 51164], "temperature": 0.0, "avg_logprob": -0.06831210060457213, "compression_ratio": 1.7835820895522387, "no_speech_prob": 0.0019261285196989775}, {"id": 19, "seek": 5600, "start": 72.0, "end": 78.0, "text": " as I add data points and actually slowly but surely converges on the underlying distribution.", "tokens": [51164, 382, 286, 909, 1412, 2793, 293, 767, 5692, 457, 11468, 9652, 2880, 322, 264, 14217, 7316, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06831210060457213, "compression_ratio": 1.7835820895522387, "no_speech_prob": 0.0019261285196989775}, {"id": 20, "seek": 5600, "start": 78.0, "end": 82.0, "text": " So this is an example of a widget which is very easy to do", "tokens": [51464, 407, 341, 307, 364, 1365, 295, 257, 34047, 597, 307, 588, 1858, 281, 360, 51664], "temperature": 0.0, "avg_logprob": -0.06831210060457213, "compression_ratio": 1.7835820895522387, "no_speech_prob": 0.0019261285196989775}, {"id": 21, "seek": 8200, "start": 82.0, "end": 86.0, "text": " and provides lots of functionality for all kinds of data exploration.", "tokens": [50364, 293, 6417, 3195, 295, 14980, 337, 439, 3685, 295, 1412, 16197, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 22, "seek": 8200, "start": 86.0, "end": 91.0, "text": " Finally, I'll get into sharing the notebooks on a data science team,", "tokens": [50564, 6288, 11, 286, 603, 483, 666, 5414, 264, 43782, 322, 257, 1412, 3497, 1469, 11, 50814], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 23, "seek": 8200, "start": 91.0, "end": 95.0, "text": " so there's a lot of questions you have to consider for your particular situation,", "tokens": [50814, 370, 456, 311, 257, 688, 295, 1651, 291, 362, 281, 1949, 337, 428, 1729, 2590, 11, 51014], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 24, "seek": 8200, "start": 95.0, "end": 99.0, "text": " so I'll try to give you a strategic framework so that you can actually identify", "tokens": [51014, 370, 286, 603, 853, 281, 976, 291, 257, 10924, 8388, 370, 300, 291, 393, 767, 5876, 51214], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 25, "seek": 8200, "start": 99.0, "end": 102.0, "text": " what kind of workflow makes sense for your situation.", "tokens": [51214, 437, 733, 295, 20993, 1669, 2020, 337, 428, 2590, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 26, "seek": 8200, "start": 102.0, "end": 106.0, "text": " There's various other things about conceptually breaking up your notebook structure", "tokens": [51364, 821, 311, 3683, 661, 721, 466, 3410, 671, 7697, 493, 428, 21060, 3877, 51564], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 27, "seek": 8200, "start": 106.0, "end": 110.0, "text": " into lab notebooks and deliverable notebooks, and a lot more that goes into that.", "tokens": [51564, 666, 2715, 43782, 293, 4239, 712, 43782, 11, 293, 257, 688, 544, 300, 1709, 666, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05549445359603218, "compression_ratio": 1.7687074829931972, "no_speech_prob": 0.02841963618993759}, {"id": 28, "seek": 11000, "start": 110.0, "end": 113.0, "text": " Finally, I'll go through two different data science projects,", "tokens": [50364, 6288, 11, 286, 603, 352, 807, 732, 819, 1412, 3497, 4455, 11, 50514], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 29, "seek": 11000, "start": 113.0, "end": 116.0, "text": " which will just demonstrate the principles I talked about above,", "tokens": [50514, 597, 486, 445, 11698, 264, 9156, 286, 2825, 466, 3673, 11, 50664], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 30, "seek": 11000, "start": 116.0, "end": 120.0, "text": " and you get to see it in an environment where I'm explaining and going through", "tokens": [50664, 293, 291, 483, 281, 536, 309, 294, 364, 2823, 689, 286, 478, 13468, 293, 516, 807, 50864], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 31, "seek": 11000, "start": 120.0, "end": 123.0, "text": " how to actually do a data science project from end to end", "tokens": [50864, 577, 281, 767, 360, 257, 1412, 3497, 1716, 490, 917, 281, 917, 51014], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 32, "seek": 11000, "start": 123.0, "end": 127.0, "text": " using all the different techniques I was already talking about.", "tokens": [51014, 1228, 439, 264, 819, 7512, 286, 390, 1217, 1417, 466, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 33, "seek": 11000, "start": 127.0, "end": 131.0, "text": " In this lesson, we'll be installing the R version of Python,", "tokens": [51214, 682, 341, 6898, 11, 321, 603, 312, 20762, 264, 497, 3037, 295, 15329, 11, 51414], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 34, "seek": 11000, "start": 131.0, "end": 134.0, "text": " iPython, and Jupyter so that we can run the Jupyter notebook.", "tokens": [51414, 5180, 88, 11943, 11, 293, 22125, 88, 391, 370, 300, 321, 393, 1190, 264, 22125, 88, 391, 21060, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 35, "seek": 11000, "start": 134.0, "end": 138.0, "text": " The way we run this is by installing the Anaconda distribution.", "tokens": [51564, 440, 636, 321, 1190, 341, 307, 538, 20762, 264, 1107, 326, 12233, 7316, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05502640731691375, "compression_ratio": 1.7019867549668874, "no_speech_prob": 0.002395970979705453}, {"id": 36, "seek": 13800, "start": 138.0, "end": 141.0, "text": " There are other ways of installing the iPython notebook,", "tokens": [50364, 821, 366, 661, 2098, 295, 20762, 264, 5180, 88, 11943, 21060, 11, 50514], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 37, "seek": 13800, "start": 141.0, "end": 144.0, "text": " but I recommend the Anaconda for its ease of use.", "tokens": [50514, 457, 286, 2748, 264, 1107, 326, 12233, 337, 1080, 12708, 295, 764, 13, 50664], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 38, "seek": 13800, "start": 144.0, "end": 149.0, "text": " We'll first go over to any web browser and search for Anaconda Python.", "tokens": [50664, 492, 603, 700, 352, 670, 281, 604, 3670, 11185, 293, 3164, 337, 1107, 326, 12233, 15329, 13, 50914], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 39, "seek": 13800, "start": 149.0, "end": 154.0, "text": " What you'll see here is that the top link is the continuum Anaconda distribution.", "tokens": [50914, 708, 291, 603, 536, 510, 307, 300, 264, 1192, 2113, 307, 264, 36120, 1107, 326, 12233, 7316, 13, 51164], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 40, "seek": 13800, "start": 154.0, "end": 156.0, "text": " Clicking on that takes you right to the downloads page,", "tokens": [51164, 8230, 278, 322, 300, 2516, 291, 558, 281, 264, 36553, 3028, 11, 51264], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 41, "seek": 13800, "start": 156.0, "end": 158.0, "text": " and you see that you have different options.", "tokens": [51264, 293, 291, 536, 300, 291, 362, 819, 3956, 13, 51364], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 42, "seek": 13800, "start": 158.0, "end": 163.0, "text": " You can get it with Windows, OSX, or Linux, whichever one you prefer.", "tokens": [51364, 509, 393, 483, 309, 365, 8591, 11, 12731, 55, 11, 420, 18734, 11, 24123, 472, 291, 4382, 13, 51614], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 43, "seek": 13800, "start": 163.0, "end": 166.0, "text": " Since I'm using OSX, I'll click on OSX.", "tokens": [51614, 4162, 286, 478, 1228, 12731, 55, 11, 286, 603, 2052, 322, 12731, 55, 13, 51764], "temperature": 0.0, "avg_logprob": -0.039825934490174734, "compression_ratio": 1.6095890410958904, "no_speech_prob": 0.01186381559818983}, {"id": 44, "seek": 16600, "start": 166.0, "end": 170.0, "text": " The choice between using Python 2.7 and 3.4 is a tough one.", "tokens": [50364, 440, 3922, 1296, 1228, 15329, 568, 13, 22, 293, 805, 13, 19, 307, 257, 4930, 472, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 45, "seek": 16600, "start": 170.0, "end": 175.0, "text": " I'll be using 2.7 just because many of the legacy code bases still use 2.7,", "tokens": [50564, 286, 603, 312, 1228, 568, 13, 22, 445, 570, 867, 295, 264, 11711, 3089, 17949, 920, 764, 568, 13, 22, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 46, "seek": 16600, "start": 175.0, "end": 179.0, "text": " but feel free to, if you're feeling experimental, to go to Python 3.4.", "tokens": [50814, 457, 841, 1737, 281, 11, 498, 291, 434, 2633, 17069, 11, 281, 352, 281, 15329, 805, 13, 19, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 47, "seek": 16600, "start": 179.0, "end": 182.0, "text": " I'll be using this Mac OSX 64-bit one.", "tokens": [51014, 286, 603, 312, 1228, 341, 5707, 12731, 55, 12145, 12, 5260, 472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 48, "seek": 16600, "start": 182.0, "end": 185.0, "text": " If you have a different system, please use that one.", "tokens": [51164, 759, 291, 362, 257, 819, 1185, 11, 1767, 764, 300, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 49, "seek": 16600, "start": 185.0, "end": 188.0, "text": " Okay, great. Now that that package has downloaded,", "tokens": [51314, 1033, 11, 869, 13, 823, 300, 300, 7372, 575, 21748, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 50, "seek": 16600, "start": 188.0, "end": 192.0, "text": " install it by following the instructions on the screen.", "tokens": [51464, 3625, 309, 538, 3480, 264, 9415, 322, 264, 2568, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1067909753623129, "compression_ratio": 1.569767441860465, "no_speech_prob": 0.0012839575065299869}, {"id": 51, "seek": 19200, "start": 192.0, "end": 196.0, "text": " So, clicking through and agreeing to various licenses.", "tokens": [50364, 407, 11, 9697, 807, 293, 36900, 281, 3683, 32821, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 52, "seek": 19200, "start": 196.0, "end": 200.0, "text": " And hopefully you get to this stage where it says the installation was successful.", "tokens": [50564, 400, 4696, 291, 483, 281, 341, 3233, 689, 309, 1619, 264, 13260, 390, 4406, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 53, "seek": 19200, "start": 200.0, "end": 202.0, "text": " Click Close.", "tokens": [50764, 8230, 16346, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 54, "seek": 19200, "start": 202.0, "end": 204.0, "text": " We can close our browser as well.", "tokens": [50864, 492, 393, 1998, 527, 11185, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 55, "seek": 19200, "start": 204.0, "end": 208.0, "text": " At this stage, if we typed IPython, it still won't work.", "tokens": [50964, 1711, 341, 3233, 11, 498, 321, 33941, 8671, 88, 11943, 11, 309, 920, 1582, 380, 589, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 56, "seek": 19200, "start": 208.0, "end": 212.0, "text": " One thing that the graphical interface does is actually adds a command to your bash profile.", "tokens": [51164, 1485, 551, 300, 264, 35942, 9226, 775, 307, 767, 10860, 257, 5622, 281, 428, 46183, 7964, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 57, "seek": 19200, "start": 212.0, "end": 216.0, "text": " So if I were to actually go into vi.bash underscore profile,", "tokens": [51364, 407, 498, 286, 645, 281, 767, 352, 666, 1932, 13, 65, 1299, 37556, 7964, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1585046371611038, "compression_ratio": 1.5612648221343874, "no_speech_prob": 0.013422180898487568}, {"id": 58, "seek": 21600, "start": 216.0, "end": 219.0, "text": " the first piece of the profile has been there from before,", "tokens": [50364, 264, 700, 2522, 295, 264, 7964, 575, 668, 456, 490, 949, 11, 50514], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 59, "seek": 21600, "start": 219.0, "end": 222.0, "text": " but this was added by the Anaconda 2.3 installer,", "tokens": [50514, 457, 341, 390, 3869, 538, 264, 1107, 326, 12233, 568, 13, 18, 46620, 11, 50664], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 60, "seek": 21600, "start": 222.0, "end": 227.0, "text": " which exports this path, shows you that the Anaconda folder has been created in my home directory,", "tokens": [50664, 597, 31428, 341, 3100, 11, 3110, 291, 300, 264, 1107, 326, 12233, 10820, 575, 668, 2942, 294, 452, 1280, 21120, 11, 50914], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 61, "seek": 21600, "start": 227.0, "end": 229.0, "text": " and adds that to my path.", "tokens": [50914, 293, 10860, 300, 281, 452, 3100, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 62, "seek": 21600, "start": 229.0, "end": 233.0, "text": " So if I type ls, you actually do see the Anaconda directory right here.", "tokens": [51014, 407, 498, 286, 2010, 287, 82, 11, 291, 767, 360, 536, 264, 1107, 326, 12233, 21120, 558, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 63, "seek": 21600, "start": 233.0, "end": 236.0, "text": " This makes it really easy to uninstall Anaconda if you want.", "tokens": [51214, 639, 1669, 309, 534, 1858, 281, 517, 40166, 1107, 326, 12233, 498, 291, 528, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 64, "seek": 21600, "start": 236.0, "end": 240.0, "text": " You can remove that line from that path in your bash profile,", "tokens": [51364, 509, 393, 4159, 300, 1622, 490, 300, 3100, 294, 428, 46183, 7964, 11, 51564], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 65, "seek": 21600, "start": 240.0, "end": 243.0, "text": " and you can delete this folder, and everything should be gone off your system,", "tokens": [51564, 293, 291, 393, 12097, 341, 10820, 11, 293, 1203, 820, 312, 2780, 766, 428, 1185, 11, 51714], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 66, "seek": 21600, "start": 243.0, "end": 245.0, "text": " and you can use the old system defaults.", "tokens": [51714, 293, 291, 393, 764, 264, 1331, 1185, 7576, 82, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06436741108797034, "compression_ratio": 1.8451178451178452, "no_speech_prob": 0.017704550176858902}, {"id": 67, "seek": 24500, "start": 245.0, "end": 249.0, "text": " But now that we have this, we have to source our bash profile,", "tokens": [50364, 583, 586, 300, 321, 362, 341, 11, 321, 362, 281, 4009, 527, 46183, 7964, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 68, "seek": 24500, "start": 249.0, "end": 252.0, "text": " and we should now be able to type IPython.", "tokens": [50564, 293, 321, 820, 586, 312, 1075, 281, 2010, 8671, 88, 11943, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 69, "seek": 24500, "start": 252.0, "end": 257.0, "text": " Now that we've run IPython, we see we are running Python 2.7, in this case 0.10.", "tokens": [50714, 823, 300, 321, 600, 1190, 8671, 88, 11943, 11, 321, 536, 321, 366, 2614, 15329, 568, 13, 22, 11, 294, 341, 1389, 1958, 13, 3279, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 70, "seek": 24500, "start": 257.0, "end": 262.0, "text": " It's the Anaconda distribution, and this is IPython version 3.2.", "tokens": [50964, 467, 311, 264, 1107, 326, 12233, 7316, 11, 293, 341, 307, 8671, 88, 11943, 3037, 805, 13, 17, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 71, "seek": 24500, "start": 262.0, "end": 264.0, "text": " So a lot of different numbers here.", "tokens": [51214, 407, 257, 688, 295, 819, 3547, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 72, "seek": 24500, "start": 264.0, "end": 267.0, "text": " The ones that are important are the Python version, which is 2.7,", "tokens": [51314, 440, 2306, 300, 366, 1021, 366, 264, 15329, 3037, 11, 597, 307, 568, 13, 22, 11, 51464], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 73, "seek": 24500, "start": 267.0, "end": 269.0, "text": " and the IPython version, which is 3.2.", "tokens": [51464, 293, 264, 8671, 88, 11943, 3037, 11, 597, 307, 805, 13, 17, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 74, "seek": 24500, "start": 269.0, "end": 271.0, "text": " Now this is actually a bit behind.", "tokens": [51564, 823, 341, 307, 767, 257, 857, 2261, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07232783282244647, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.001867174287326634}, {"id": 75, "seek": 27100, "start": 271.0, "end": 274.0, "text": " So what we're going to do is hit Ctrl-D, and it says, do you really want to exit?", "tokens": [50364, 407, 437, 321, 434, 516, 281, 360, 307, 2045, 35233, 12, 35, 11, 293, 309, 1619, 11, 360, 291, 534, 528, 281, 11043, 30, 50514], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 76, "seek": 27100, "start": 274.0, "end": 276.0, "text": " You can either type yes in return,", "tokens": [50514, 509, 393, 2139, 2010, 2086, 294, 2736, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 77, "seek": 27100, "start": 276.0, "end": 279.0, "text": " or you can type Ctrl-D a second time to actually exit it.", "tokens": [50614, 420, 291, 393, 2010, 35233, 12, 35, 257, 1150, 565, 281, 767, 11043, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 78, "seek": 27100, "start": 279.0, "end": 283.0, "text": " But what we'd like to do now is actually update to the most recent version of Anaconda,", "tokens": [50764, 583, 437, 321, 1116, 411, 281, 360, 586, 307, 767, 5623, 281, 264, 881, 5162, 3037, 295, 1107, 326, 12233, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 79, "seek": 27100, "start": 283.0, "end": 285.0, "text": " so that we have the most recent version.", "tokens": [50964, 370, 300, 321, 362, 264, 881, 5162, 3037, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 80, "seek": 27100, "start": 285.0, "end": 287.0, "text": " The way to do this is to type conda.", "tokens": [51064, 440, 636, 281, 360, 341, 307, 281, 2010, 2224, 64, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 81, "seek": 27100, "start": 287.0, "end": 289.0, "text": " This is a new command line argument that you have.", "tokens": [51164, 639, 307, 257, 777, 5622, 1622, 6770, 300, 291, 362, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 82, "seek": 27100, "start": 289.0, "end": 294.0, "text": " The way that we update the Anaconda distribution is by typing conda in various packages.", "tokens": [51264, 440, 636, 300, 321, 5623, 264, 1107, 326, 12233, 7316, 307, 538, 18444, 2224, 64, 294, 3683, 17401, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 83, "seek": 27100, "start": 294.0, "end": 297.0, "text": " So in this case, we want to conda, install conda.", "tokens": [51514, 407, 294, 341, 1389, 11, 321, 528, 281, 2224, 64, 11, 3625, 2224, 64, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 84, "seek": 27100, "start": 297.0, "end": 300.0, "text": " What this should do is check to see various things.", "tokens": [51664, 708, 341, 820, 360, 307, 1520, 281, 536, 3683, 721, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08793863043727645, "compression_ratio": 1.8713826366559485, "no_speech_prob": 0.0070104137994349}, {"id": 85, "seek": 30000, "start": 300.0, "end": 302.0, "text": " This tells us the following packages will be updated.", "tokens": [50364, 639, 5112, 505, 264, 3480, 17401, 486, 312, 10588, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 86, "seek": 30000, "start": 302.0, "end": 307.0, "text": " Conda will go from this version 3.14 to 3.18, conda environment, and so on.", "tokens": [50464, 21793, 64, 486, 352, 490, 341, 3037, 805, 13, 7271, 281, 805, 13, 6494, 11, 2224, 64, 2823, 11, 293, 370, 322, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 87, "seek": 30000, "start": 307.0, "end": 311.0, "text": " And we would like to set this up, and we will hit yes to this.", "tokens": [50714, 400, 321, 576, 411, 281, 992, 341, 493, 11, 293, 321, 486, 2045, 2086, 281, 341, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 88, "seek": 30000, "start": 311.0, "end": 315.0, "text": " It actually takes quite a bit of time to install all of these things from source,", "tokens": [50914, 467, 767, 2516, 1596, 257, 857, 295, 565, 281, 3625, 439, 295, 613, 721, 490, 4009, 11, 51114], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 89, "seek": 30000, "start": 315.0, "end": 319.0, "text": " but most of these things are actually pre-compiled, so everything's already completed.", "tokens": [51114, 457, 881, 295, 613, 721, 366, 767, 659, 12, 21541, 7292, 11, 370, 1203, 311, 1217, 7365, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 90, "seek": 30000, "start": 319.0, "end": 322.0, "text": " We'd like to also update a number of packages.", "tokens": [51314, 492, 1116, 411, 281, 611, 5623, 257, 1230, 295, 17401, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 91, "seek": 30000, "start": 322.0, "end": 328.0, "text": " So let's conda install Jupyter, and now you can actually chain which packages you'd like to see.", "tokens": [51464, 407, 718, 311, 2224, 64, 3625, 22125, 88, 391, 11, 293, 586, 291, 393, 767, 5021, 597, 17401, 291, 1116, 411, 281, 536, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08578515754026525, "compression_ratio": 1.7294520547945205, "no_speech_prob": 0.005059441085904837}, {"id": 92, "seek": 32800, "start": 328.0, "end": 335.0, "text": " So in this case, we'll install Jupyter, the pandas package, and scikit-learn.", "tokens": [50364, 407, 294, 341, 1389, 11, 321, 603, 3625, 22125, 88, 391, 11, 264, 4565, 296, 7372, 11, 293, 2180, 22681, 12, 306, 1083, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 93, "seek": 32800, "start": 335.0, "end": 337.0, "text": " So these are the packages to be updated.", "tokens": [50714, 407, 613, 366, 264, 17401, 281, 312, 10588, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 94, "seek": 32800, "start": 337.0, "end": 341.0, "text": " We see that a number of things are going from ipython, which is important,", "tokens": [50814, 492, 536, 300, 257, 1230, 295, 721, 366, 516, 490, 28501, 88, 11943, 11, 597, 307, 1021, 11, 51014], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 95, "seek": 32800, "start": 341.0, "end": 343.0, "text": " going from version 3.2 to version 4.0.", "tokens": [51014, 516, 490, 3037, 805, 13, 17, 281, 3037, 1017, 13, 15, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 96, "seek": 32800, "start": 343.0, "end": 346.0, "text": " We'd like to proceed with that.", "tokens": [51114, 492, 1116, 411, 281, 8991, 365, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 97, "seek": 32800, "start": 346.0, "end": 351.0, "text": " I'd like to just say a few words about why I find the Anaconda package to be a useful thing to use.", "tokens": [51264, 286, 1116, 411, 281, 445, 584, 257, 1326, 2283, 466, 983, 286, 915, 264, 1107, 326, 12233, 7372, 281, 312, 257, 4420, 551, 281, 764, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 98, "seek": 32800, "start": 351.0, "end": 355.0, "text": " They make sure that all the packages you've installed will play nicely with each other.", "tokens": [51514, 814, 652, 988, 300, 439, 264, 17401, 291, 600, 8899, 486, 862, 9594, 365, 1184, 661, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08037471037644606, "compression_ratio": 1.6678966789667897, "no_speech_prob": 0.004537538159638643}, {"id": 99, "seek": 35500, "start": 355.0, "end": 361.0, "text": " So sometimes if you're using pip by itself, you can actually install dependencies that overlap each other out of place,", "tokens": [50364, 407, 2171, 498, 291, 434, 1228, 8489, 538, 2564, 11, 291, 393, 767, 3625, 36606, 300, 19959, 1184, 661, 484, 295, 1081, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 100, "seek": 35500, "start": 361.0, "end": 364.0, "text": " so they end up with a conflict when you're trying to import these libraries,", "tokens": [50664, 370, 436, 917, 493, 365, 257, 6596, 562, 291, 434, 1382, 281, 974, 613, 15148, 11, 50814], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 101, "seek": 35500, "start": 364.0, "end": 368.0, "text": " and Anaconda does a really nice job of making sure, checking those dependencies really well.", "tokens": [50814, 293, 1107, 326, 12233, 775, 257, 534, 1481, 1691, 295, 1455, 988, 11, 8568, 729, 36606, 534, 731, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 102, "seek": 35500, "start": 368.0, "end": 374.0, "text": " So now if we type ipython, we should see that we are running ipython 4.0, which we are.", "tokens": [51014, 407, 586, 498, 321, 2010, 28501, 88, 11943, 11, 321, 820, 536, 300, 321, 366, 2614, 28501, 88, 11943, 1017, 13, 15, 11, 597, 321, 366, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 103, "seek": 35500, "start": 374.0, "end": 377.0, "text": " Now we would like to actually check out the ipython notebook,", "tokens": [51314, 823, 321, 576, 411, 281, 767, 1520, 484, 264, 28501, 88, 11943, 21060, 11, 51464], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 104, "seek": 35500, "start": 377.0, "end": 379.0, "text": " because that's the part where it really gets interesting.", "tokens": [51464, 570, 300, 311, 264, 644, 689, 309, 534, 2170, 1880, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 105, "seek": 35500, "start": 379.0, "end": 384.0, "text": " So let's create an example directory, and from here we can type Jupyter notebook.", "tokens": [51564, 407, 718, 311, 1884, 364, 1365, 21120, 11, 293, 490, 510, 321, 393, 2010, 22125, 88, 391, 21060, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08436456877609778, "compression_ratio": 1.7335329341317365, "no_speech_prob": 0.013015451841056347}, {"id": 106, "seek": 38400, "start": 385.0, "end": 387.0, "text": " Just typing Jupyter notebook, a couple of things happened.", "tokens": [50414, 1449, 18444, 22125, 88, 391, 21060, 11, 257, 1916, 295, 721, 2011, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 107, "seek": 38400, "start": 387.0, "end": 389.0, "text": " First of all, go back to the terminal.", "tokens": [50514, 2386, 295, 439, 11, 352, 646, 281, 264, 14709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 108, "seek": 38400, "start": 389.0, "end": 392.0, "text": " I typed Jupyter notebook, and ran it.", "tokens": [50614, 286, 33941, 22125, 88, 391, 21060, 11, 293, 5872, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 109, "seek": 38400, "start": 392.0, "end": 397.0, "text": " And a notebook server started from the directory we are in, so a user's jbw example in this case.", "tokens": [50764, 400, 257, 21060, 7154, 1409, 490, 264, 21120, 321, 366, 294, 11, 370, 257, 4195, 311, 361, 65, 86, 1365, 294, 341, 1389, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 110, "seek": 38400, "start": 397.0, "end": 401.0, "text": " So an ipython notebook, which has been started with a Jupyter, is now at this location.", "tokens": [51014, 407, 364, 28501, 88, 11943, 21060, 11, 597, 575, 668, 1409, 365, 257, 22125, 88, 391, 11, 307, 586, 412, 341, 4914, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 111, "seek": 38400, "start": 401.0, "end": 405.0, "text": " HTTP colon slash slash localhost, in this case, quadruple 8.", "tokens": [51214, 33283, 8255, 17330, 17330, 2654, 6037, 11, 294, 341, 1389, 11, 10787, 894, 781, 1649, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 112, "seek": 38400, "start": 405.0, "end": 409.0, "text": " And it says here this useful thing, control C to stop this server and shut down all kernels,", "tokens": [51414, 400, 309, 1619, 510, 341, 4420, 551, 11, 1969, 383, 281, 1590, 341, 7154, 293, 5309, 760, 439, 23434, 1625, 11, 51614], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 113, "seek": 38400, "start": 409.0, "end": 411.0, "text": " and you have to do it twice to skip the confirmation.", "tokens": [51614, 293, 291, 362, 281, 360, 309, 6091, 281, 10023, 264, 21871, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12937014811747782, "compression_ratio": 1.7119741100323624, "no_speech_prob": 0.004006175324320793}, {"id": 114, "seek": 41100, "start": 411.0, "end": 415.0, "text": " Now this starts the server running, and this terminal needs to stay open.", "tokens": [50364, 823, 341, 3719, 264, 7154, 2614, 11, 293, 341, 14709, 2203, 281, 1754, 1269, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13592459938742898, "compression_ratio": 1.6509090909090909, "no_speech_prob": 0.005301253404468298}, {"id": 115, "seek": 41100, "start": 415.0, "end": 421.0, "text": " If we go back to this, what it runs is a web server, and it automatically by default opens your default browser.", "tokens": [50564, 759, 321, 352, 646, 281, 341, 11, 437, 309, 6676, 307, 257, 3670, 7154, 11, 293, 309, 6772, 538, 7576, 9870, 428, 7576, 11185, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13592459938742898, "compression_ratio": 1.6509090909090909, "no_speech_prob": 0.005301253404468298}, {"id": 116, "seek": 41100, "start": 421.0, "end": 425.0, "text": " So in this case, here we are at this location, localhost, quadruple 8, underscore 3.", "tokens": [50864, 407, 294, 341, 1389, 11, 510, 321, 366, 412, 341, 4914, 11, 2654, 6037, 11, 10787, 894, 781, 1649, 11, 37556, 805, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13592459938742898, "compression_ratio": 1.6509090909090909, "no_speech_prob": 0.005301253404468298}, {"id": 117, "seek": 41100, "start": 425.0, "end": 430.0, "text": " And if we'd like to start a new notebook, we can click new, Python 2 notebook.", "tokens": [51064, 400, 498, 321, 1116, 411, 281, 722, 257, 777, 21060, 11, 321, 393, 2052, 777, 11, 15329, 568, 21060, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13592459938742898, "compression_ratio": 1.6509090909090909, "no_speech_prob": 0.005301253404468298}, {"id": 118, "seek": 41100, "start": 430.0, "end": 432.0, "text": " And again, this is referring to which version of Python you're running.", "tokens": [51314, 400, 797, 11, 341, 307, 13761, 281, 597, 3037, 295, 15329, 291, 434, 2614, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13592459938742898, "compression_ratio": 1.6509090909090909, "no_speech_prob": 0.005301253404468298}, {"id": 119, "seek": 41100, "start": 432.0, "end": 435.0, "text": " This is a 2 version 3 versus 3.", "tokens": [51414, 639, 307, 257, 568, 3037, 805, 5717, 805, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13592459938742898, "compression_ratio": 1.6509090909090909, "no_speech_prob": 0.005301253404468298}, {"id": 120, "seek": 43500, "start": 435.0, "end": 441.0, "text": " And we see now that we're running a Jupyter notebook, and we can start typing valid Python code,", "tokens": [50364, 400, 321, 536, 586, 300, 321, 434, 2614, 257, 22125, 88, 391, 21060, 11, 293, 321, 393, 722, 18444, 7363, 15329, 3089, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12356020224214805, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.09522955119609833}, {"id": 121, "seek": 43500, "start": 441.0, "end": 444.0, "text": " and see the output from it right there.", "tokens": [50664, 293, 536, 264, 5598, 490, 309, 558, 456, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12356020224214805, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.09522955119609833}, {"id": 122, "seek": 43500, "start": 444.0, "end": 446.0, "text": " Let's do something a little bit more interesting.", "tokens": [50814, 961, 311, 360, 746, 257, 707, 857, 544, 1880, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12356020224214805, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.09522955119609833}, {"id": 123, "seek": 43500, "start": 446.0, "end": 451.0, "text": " So we import the NumPy library as np, and then print numpy.a range 10.", "tokens": [50914, 407, 321, 974, 264, 22592, 47, 88, 6405, 382, 33808, 11, 293, 550, 4482, 1031, 8200, 13, 64, 3613, 1266, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12356020224214805, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.09522955119609833}, {"id": 124, "seek": 43500, "start": 451.0, "end": 460.0, "text": " So we see the first bit of Python code, and we know that we have the installation working just as we hoped.", "tokens": [51164, 407, 321, 536, 264, 700, 857, 295, 15329, 3089, 11, 293, 321, 458, 300, 321, 362, 264, 13260, 1364, 445, 382, 321, 19737, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12356020224214805, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.09522955119609833}, {"id": 125, "seek": 46000, "start": 460.0, "end": 465.0, "text": " In this video, we're going to start a GitHub repo to house a data science project.", "tokens": [50364, 682, 341, 960, 11, 321, 434, 516, 281, 722, 257, 23331, 49040, 281, 1782, 257, 1412, 3497, 1716, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 126, "seek": 46000, "start": 465.0, "end": 468.0, "text": " First, we have to go to github.com.", "tokens": [50614, 2386, 11, 321, 362, 281, 352, 281, 290, 355, 836, 13, 1112, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 127, "seek": 46000, "start": 468.0, "end": 474.0, "text": " If you don't have GitHub or Git setup, I highly recommend starting out by picking a username,", "tokens": [50764, 759, 291, 500, 380, 362, 23331, 420, 16939, 8657, 11, 286, 5405, 2748, 2891, 484, 538, 8867, 257, 30351, 11, 51064], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 128, "seek": 46000, "start": 474.0, "end": 477.0, "text": " by giving your email and creating a GitHub account.", "tokens": [51064, 538, 2902, 428, 3796, 293, 4084, 257, 23331, 2696, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 129, "seek": 46000, "start": 477.0, "end": 482.0, "text": " Now, if you have Windows or Linux or Mac operating system,", "tokens": [51214, 823, 11, 498, 291, 362, 8591, 420, 18734, 420, 5707, 7447, 1185, 11, 51464], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 130, "seek": 46000, "start": 482.0, "end": 488.0, "text": " GitHub itself has a really nice tutorial for how to actually set up Git on your machine and for your setup.", "tokens": [51464, 23331, 2564, 575, 257, 534, 1481, 7073, 337, 577, 281, 767, 992, 493, 16939, 322, 428, 3479, 293, 337, 428, 8657, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 131, "seek": 46000, "start": 488.0, "end": 489.0, "text": " So I recommend doing that.", "tokens": [51764, 407, 286, 2748, 884, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0778177966590689, "compression_ratio": 1.6474820143884892, "no_speech_prob": 0.1964976191520691}, {"id": 132, "seek": 48900, "start": 489.0, "end": 496.0, "text": " So once you have a GitHub account, which is free, or if you already have one, click sign in, let's go to the next step.", "tokens": [50364, 407, 1564, 291, 362, 257, 23331, 2696, 11, 597, 307, 1737, 11, 420, 498, 291, 1217, 362, 472, 11, 2052, 1465, 294, 11, 718, 311, 352, 281, 264, 958, 1823, 13, 50714], "temperature": 0.0, "avg_logprob": -0.081406932888609, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.006690239999443293}, {"id": 133, "seek": 48900, "start": 496.0, "end": 503.0, "text": " So you've signed into GitHub, click the plus next to your name in the upper right hand corner, and start a new repository.", "tokens": [50714, 407, 291, 600, 8175, 666, 23331, 11, 2052, 264, 1804, 958, 281, 428, 1315, 294, 264, 6597, 558, 1011, 4538, 11, 293, 722, 257, 777, 25841, 13, 51064], "temperature": 0.0, "avg_logprob": -0.081406932888609, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.006690239999443293}, {"id": 134, "seek": 48900, "start": 503.0, "end": 508.0, "text": " I prefer to start a new repository through the GitHub website itself, and then clone it to my local machine.", "tokens": [51064, 286, 4382, 281, 722, 257, 777, 25841, 807, 264, 23331, 3144, 2564, 11, 293, 550, 26506, 309, 281, 452, 2654, 3479, 13, 51314], "temperature": 0.0, "avg_logprob": -0.081406932888609, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.006690239999443293}, {"id": 135, "seek": 48900, "start": 508.0, "end": 511.0, "text": " So that way, the remote connection has already set up.", "tokens": [51314, 407, 300, 636, 11, 264, 8607, 4984, 575, 1217, 992, 493, 13, 51464], "temperature": 0.0, "avg_logprob": -0.081406932888609, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.006690239999443293}, {"id": 136, "seek": 48900, "start": 511.0, "end": 517.0, "text": " And that's usually a stumbling block that can be a little bit annoying to overcome if you try to do it the other way around.", "tokens": [51464, 400, 300, 311, 2673, 257, 342, 14188, 3461, 300, 393, 312, 257, 707, 857, 11304, 281, 10473, 498, 291, 853, 281, 360, 309, 264, 661, 636, 926, 13, 51764], "temperature": 0.0, "avg_logprob": -0.081406932888609, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.006690239999443293}, {"id": 137, "seek": 51700, "start": 517.0, "end": 520.0, "text": " In this case, I'm going to be looking at some cold data.", "tokens": [50364, 682, 341, 1389, 11, 286, 478, 516, 281, 312, 1237, 412, 512, 3554, 1412, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 138, "seek": 51700, "start": 520.0, "end": 523.0, "text": " So I'm going to call it cold exploration.", "tokens": [50514, 407, 286, 478, 516, 281, 818, 309, 3554, 16197, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 139, "seek": 51700, "start": 523.0, "end": 526.0, "text": " I'm going to give it a quick description.", "tokens": [50664, 286, 478, 516, 281, 976, 309, 257, 1702, 3855, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 140, "seek": 51700, "start": 526.0, "end": 529.0, "text": " I'm giving it the description a first look at the cold data.", "tokens": [50814, 286, 478, 2902, 309, 264, 3855, 257, 700, 574, 412, 264, 3554, 1412, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 141, "seek": 51700, "start": 529.0, "end": 532.0, "text": " I'm going to let it be public so anyone can see this repository.", "tokens": [50964, 286, 478, 516, 281, 718, 309, 312, 1908, 370, 2878, 393, 536, 341, 25841, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 142, "seek": 51700, "start": 532.0, "end": 535.0, "text": " So afterward, you can also see this if you'd like to go to it.", "tokens": [51114, 407, 40411, 11, 291, 393, 611, 536, 341, 498, 291, 1116, 411, 281, 352, 281, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 143, "seek": 51700, "start": 535.0, "end": 540.0, "text": " I will initialize this repository with a readme and I will add a gitignore.", "tokens": [51264, 286, 486, 5883, 1125, 341, 25841, 365, 257, 1401, 1398, 293, 286, 486, 909, 257, 18331, 788, 418, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12157927710434487, "compression_ratio": 1.8409090909090908, "no_speech_prob": 0.030193254351615906}, {"id": 144, "seek": 54000, "start": 540.0, "end": 547.0, "text": " A .gitignore file will let you ignore the machine generated code that comes along with various programming languages.", "tokens": [50364, 316, 2411, 70, 270, 788, 418, 3991, 486, 718, 291, 11200, 264, 3479, 10833, 3089, 300, 1487, 2051, 365, 3683, 9410, 8650, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07348144365393597, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1065979152917862}, {"id": 145, "seek": 54000, "start": 547.0, "end": 553.0, "text": " Now Python doesn't have that many, but there is usually a .pyc if you're running a Python file.", "tokens": [50714, 823, 15329, 1177, 380, 362, 300, 867, 11, 457, 456, 307, 2673, 257, 2411, 8200, 66, 498, 291, 434, 2614, 257, 15329, 3991, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07348144365393597, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1065979152917862}, {"id": 146, "seek": 54000, "start": 553.0, "end": 559.0, "text": " I also recommend having a license, especially if it's going to be public, so that you can share your repositories with others.", "tokens": [51014, 286, 611, 2748, 1419, 257, 10476, 11, 2318, 498, 309, 311, 516, 281, 312, 1908, 11, 370, 300, 291, 393, 2073, 428, 22283, 2083, 365, 2357, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07348144365393597, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1065979152917862}, {"id": 147, "seek": 54000, "start": 559.0, "end": 562.0, "text": " If you work for a company, obviously you have different licensing concerns.", "tokens": [51314, 759, 291, 589, 337, 257, 2237, 11, 2745, 291, 362, 819, 29759, 7389, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07348144365393597, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1065979152917862}, {"id": 148, "seek": 54000, "start": 562.0, "end": 564.0, "text": " So then click create repository.", "tokens": [51464, 407, 550, 2052, 1884, 25841, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07348144365393597, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1065979152917862}, {"id": 149, "seek": 54000, "start": 564.0, "end": 565.0, "text": " It's as easy as that.", "tokens": [51564, 467, 311, 382, 1858, 382, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07348144365393597, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1065979152917862}, {"id": 150, "seek": 56500, "start": 565.0, "end": 570.0, "text": " So now I have the cold exploration repository in my GitHub account.", "tokens": [50364, 407, 586, 286, 362, 264, 3554, 16197, 25841, 294, 452, 23331, 2696, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06028102176024182, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.03513147309422493}, {"id": 151, "seek": 56500, "start": 570.0, "end": 575.0, "text": " From here, we would like to actually tie this account to our local machine.", "tokens": [50614, 3358, 510, 11, 321, 576, 411, 281, 767, 7582, 341, 2696, 281, 527, 2654, 3479, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06028102176024182, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.03513147309422493}, {"id": 152, "seek": 56500, "start": 575.0, "end": 580.0, "text": " So we can copy this text that's just to the right of this SSH tab.", "tokens": [50864, 407, 321, 393, 5055, 341, 2487, 300, 311, 445, 281, 264, 558, 295, 341, 12238, 39, 4421, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06028102176024182, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.03513147309422493}, {"id": 153, "seek": 56500, "start": 580.0, "end": 586.0, "text": " Now, if it doesn't say SSH, if it says HTTPS, I would recommend clicking it to SSH.", "tokens": [51114, 823, 11, 498, 309, 1177, 380, 584, 12238, 39, 11, 498, 309, 1619, 11751, 51, 6273, 11, 286, 576, 2748, 9697, 309, 281, 12238, 39, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06028102176024182, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.03513147309422493}, {"id": 154, "seek": 56500, "start": 586.0, "end": 590.0, "text": " And once you do that, copy the text that's in this text box.", "tokens": [51414, 400, 1564, 291, 360, 300, 11, 5055, 264, 2487, 300, 311, 294, 341, 2487, 2424, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06028102176024182, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.03513147309422493}, {"id": 155, "seek": 59000, "start": 590.0, "end": 596.0, "text": " Navigate with your terminal to a place that you think is an appropriate spot for this repository.", "tokens": [50364, 9219, 328, 473, 365, 428, 14709, 281, 257, 1081, 300, 291, 519, 307, 364, 6854, 4008, 337, 341, 25841, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09710808189547791, "compression_ratio": 1.6859504132231404, "no_speech_prob": 0.012816337868571281}, {"id": 156, "seek": 59000, "start": 596.0, "end": 603.0, "text": " Type in git clone and paste the text that you just copied from the website itself.", "tokens": [50664, 15576, 294, 18331, 26506, 293, 9163, 264, 2487, 300, 291, 445, 25365, 490, 264, 3144, 2564, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09710808189547791, "compression_ratio": 1.6859504132231404, "no_speech_prob": 0.012816337868571281}, {"id": 157, "seek": 59000, "start": 603.0, "end": 608.0, "text": " So now we see the license and the readme files that we created on the website itself.", "tokens": [51014, 407, 586, 321, 536, 264, 10476, 293, 264, 1401, 1398, 7098, 300, 321, 2942, 322, 264, 3144, 2564, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09710808189547791, "compression_ratio": 1.6859504132231404, "no_speech_prob": 0.012816337868571281}, {"id": 158, "seek": 59000, "start": 608.0, "end": 617.0, "text": " All right, so we have set up our GitHub repository and we've cloned it to our local machine and we're ready to start doing some data science.", "tokens": [51264, 1057, 558, 11, 370, 321, 362, 992, 493, 527, 23331, 25841, 293, 321, 600, 596, 19009, 309, 281, 527, 2654, 3479, 293, 321, 434, 1919, 281, 722, 884, 512, 1412, 3497, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09710808189547791, "compression_ratio": 1.6859504132231404, "no_speech_prob": 0.012816337868571281}, {"id": 159, "seek": 61700, "start": 617.0, "end": 624.0, "text": " In this lesson, I'm going to give you some extra intuition so you can understand what's happening when the Jupyter Notebook is running.", "tokens": [50364, 682, 341, 6898, 11, 286, 478, 516, 281, 976, 291, 512, 2857, 24002, 370, 291, 393, 1223, 437, 311, 2737, 562, 264, 22125, 88, 391, 11633, 2939, 307, 2614, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09737785173499065, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.00970429740846157}, {"id": 160, "seek": 61700, "start": 624.0, "end": 629.0, "text": " So in my terminal, if I type ls, I get to see the directories now underneath this current directory.", "tokens": [50714, 407, 294, 452, 14709, 11, 498, 286, 2010, 287, 82, 11, 286, 483, 281, 536, 264, 5391, 530, 586, 7223, 341, 2190, 21120, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09737785173499065, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.00970429740846157}, {"id": 161, "seek": 61700, "start": 629.0, "end": 631.0, "text": " I see deliver, dev and source.", "tokens": [50964, 286, 536, 4239, 11, 1905, 293, 4009, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09737785173499065, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.00970429740846157}, {"id": 162, "seek": 61700, "start": 631.0, "end": 636.0, "text": " By typing Jupyter Notebook, I again start the Jupyter server.", "tokens": [51064, 3146, 18444, 22125, 88, 391, 11633, 2939, 11, 286, 797, 722, 264, 22125, 88, 391, 7154, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09737785173499065, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.00970429740846157}, {"id": 163, "seek": 61700, "start": 636.0, "end": 638.0, "text": " My default browser is Chrome.", "tokens": [51314, 1222, 7576, 11185, 307, 15327, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09737785173499065, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.00970429740846157}, {"id": 164, "seek": 61700, "start": 638.0, "end": 641.0, "text": " So again, we see those same three directories deliver, dev and source.", "tokens": [51414, 407, 797, 11, 321, 536, 729, 912, 1045, 5391, 530, 4239, 11, 1905, 293, 4009, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09737785173499065, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.00970429740846157}, {"id": 165, "seek": 64100, "start": 641.0, "end": 645.0, "text": " If we toggle back to the terminal, we can see several messages.", "tokens": [50364, 759, 321, 31225, 646, 281, 264, 14709, 11, 321, 393, 536, 2940, 7897, 13, 50564], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 166, "seek": 64100, "start": 645.0, "end": 649.0, "text": " The first is the directory under which the notebook server has been started.", "tokens": [50564, 440, 700, 307, 264, 21120, 833, 597, 264, 21060, 7154, 575, 668, 1409, 13, 50764], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 167, "seek": 64100, "start": 649.0, "end": 651.0, "text": " The second message is the number of active kernels.", "tokens": [50764, 440, 1150, 3636, 307, 264, 1230, 295, 4967, 23434, 1625, 13, 50864], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 168, "seek": 64100, "start": 651.0, "end": 656.0, "text": " The third message is the location that you can point your browser to to find this notebook.", "tokens": [50864, 440, 2636, 3636, 307, 264, 4914, 300, 291, 393, 935, 428, 11185, 281, 281, 915, 341, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 169, "seek": 64100, "start": 656.0, "end": 659.0, "text": " And finally a message to say how to stop this server.", "tokens": [51114, 400, 2721, 257, 3636, 281, 584, 577, 281, 1590, 341, 7154, 13, 51264], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 170, "seek": 64100, "start": 659.0, "end": 666.0, "text": " So going back to the notebook itself, if we click on the development branch, we see that there's no notebooks in here.", "tokens": [51264, 407, 516, 646, 281, 264, 21060, 2564, 11, 498, 321, 2052, 322, 264, 3250, 9819, 11, 321, 536, 300, 456, 311, 572, 43782, 294, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 171, "seek": 64100, "start": 666.0, "end": 670.0, "text": " We can start a notebook by clicking on new and then clicking on Python 2.", "tokens": [51614, 492, 393, 722, 257, 21060, 538, 9697, 322, 777, 293, 550, 9697, 322, 15329, 568, 13, 51814], "temperature": 0.0, "avg_logprob": -0.048949012606162724, "compression_ratio": 1.8373702422145328, "no_speech_prob": 0.27478712797164917}, {"id": 172, "seek": 67000, "start": 670.0, "end": 673.0, "text": " So after clicking new, we see a new tab appear.", "tokens": [50364, 407, 934, 9697, 777, 11, 321, 536, 257, 777, 4421, 4204, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 173, "seek": 67000, "start": 673.0, "end": 678.0, "text": " It's currently named untitled and the last checkpoint comes from a few seconds ago.", "tokens": [50514, 467, 311, 4362, 4926, 1701, 270, 1493, 293, 264, 1036, 42269, 1487, 490, 257, 1326, 3949, 2057, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 174, "seek": 67000, "start": 678.0, "end": 679.0, "text": " So let's type a few things.", "tokens": [50764, 407, 718, 311, 2010, 257, 1326, 721, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 175, "seek": 67000, "start": 679.0, "end": 683.0, "text": " So let's just say first as a variable is equal to the 5.0.", "tokens": [50814, 407, 718, 311, 445, 584, 700, 382, 257, 7006, 307, 2681, 281, 264, 1025, 13, 15, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 176, "seek": 67000, "start": 683.0, "end": 687.0, "text": " I execute that cell by holding down shift and hitting return.", "tokens": [51014, 286, 14483, 300, 2815, 538, 5061, 760, 5513, 293, 8850, 2736, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 177, "seek": 67000, "start": 687.0, "end": 690.0, "text": " When I do that, a new cell appears beneath it.", "tokens": [51214, 1133, 286, 360, 300, 11, 257, 777, 2815, 7038, 17149, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 178, "seek": 67000, "start": 690.0, "end": 699.0, "text": " And as I type a second variable and label it say 23.0, again hitting return with the shift key produces another cell beneath it.", "tokens": [51364, 400, 382, 286, 2010, 257, 1150, 7006, 293, 7645, 309, 584, 6673, 13, 15, 11, 797, 8850, 2736, 365, 264, 5513, 2141, 14725, 1071, 2815, 17149, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07442243312432514, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.00590830622240901}, {"id": 179, "seek": 69900, "start": 699.0, "end": 703.0, "text": " So I now have two variables, one named first and one named second.", "tokens": [50364, 407, 286, 586, 362, 732, 9102, 11, 472, 4926, 700, 293, 472, 4926, 1150, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 180, "seek": 69900, "start": 703.0, "end": 709.0, "text": " And there's unsaved changes, which means if I lose this current browser, I will lose the changes that happened from the last time it was saved.", "tokens": [50564, 400, 456, 311, 2693, 12865, 2962, 11, 597, 1355, 498, 286, 3624, 341, 2190, 11185, 11, 286, 486, 3624, 264, 2962, 300, 2011, 490, 264, 1036, 565, 309, 390, 6624, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 181, "seek": 69900, "start": 709.0, "end": 711.0, "text": " In this case, there's nothing that's been saved.", "tokens": [50864, 682, 341, 1389, 11, 456, 311, 1825, 300, 311, 668, 6624, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 182, "seek": 69900, "start": 711.0, "end": 713.0, "text": " So let me go ahead and save this right now.", "tokens": [50964, 407, 718, 385, 352, 2286, 293, 3155, 341, 558, 586, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 183, "seek": 69900, "start": 713.0, "end": 714.0, "text": " There's two ways of doing this.", "tokens": [51064, 821, 311, 732, 2098, 295, 884, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 184, "seek": 69900, "start": 714.0, "end": 719.0, "text": " One, typing command S if you're on the Mac or control S on Windows, which I just did.", "tokens": [51114, 1485, 11, 18444, 5622, 318, 498, 291, 434, 322, 264, 5707, 420, 1969, 318, 322, 8591, 11, 597, 286, 445, 630, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 185, "seek": 69900, "start": 719.0, "end": 723.0, "text": " Or you can click this save disk and it will also save it.", "tokens": [51364, 1610, 291, 393, 2052, 341, 3155, 12355, 293, 309, 486, 611, 3155, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 186, "seek": 69900, "start": 723.0, "end": 727.0, "text": " Now that it's been saved and there's no unsaved changes.", "tokens": [51564, 823, 300, 309, 311, 668, 6624, 293, 456, 311, 572, 2693, 12865, 2962, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11067126043911638, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.010324869304895401}, {"id": 187, "seek": 72700, "start": 727.0, "end": 738.0, "text": " If I close this tab, or if I even close the whole browser by quitting the Chrome browser, all of the actual information has been stored in the kernel itself.", "tokens": [50364, 759, 286, 1998, 341, 4421, 11, 420, 498, 286, 754, 1998, 264, 1379, 11185, 538, 42789, 264, 15327, 11185, 11, 439, 295, 264, 3539, 1589, 575, 668, 12187, 294, 264, 28256, 2564, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06204793305523627, "compression_ratio": 1.8208955223880596, "no_speech_prob": 0.11585922539234161}, {"id": 188, "seek": 72700, "start": 738.0, "end": 744.0, "text": " In other words, there's this kernel and everything that's happened with the kernel is being stored in state by this kernel.", "tokens": [50914, 682, 661, 2283, 11, 456, 311, 341, 28256, 293, 1203, 300, 311, 2011, 365, 264, 28256, 307, 885, 12187, 294, 1785, 538, 341, 28256, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06204793305523627, "compression_ratio": 1.8208955223880596, "no_speech_prob": 0.11585922539234161}, {"id": 189, "seek": 72700, "start": 744.0, "end": 751.0, "text": " This means if I open up a brand new version of Chrome and I go to where the notebook is running from the previous message before.", "tokens": [51214, 639, 1355, 498, 286, 1269, 493, 257, 3360, 777, 3037, 295, 15327, 293, 286, 352, 281, 689, 264, 21060, 307, 2614, 490, 264, 3894, 3636, 949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06204793305523627, "compression_ratio": 1.8208955223880596, "no_speech_prob": 0.11585922539234161}, {"id": 190, "seek": 72700, "start": 751.0, "end": 756.0, "text": " I copied that with control C, go back to Chrome browser and type it in here.", "tokens": [51564, 286, 25365, 300, 365, 1969, 383, 11, 352, 646, 281, 15327, 11185, 293, 2010, 309, 294, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06204793305523627, "compression_ratio": 1.8208955223880596, "no_speech_prob": 0.11585922539234161}, {"id": 191, "seek": 75600, "start": 756.0, "end": 759.0, "text": " I go back to the exact view we had before.", "tokens": [50364, 286, 352, 646, 281, 264, 1900, 1910, 321, 632, 949, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12059485173858372, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.025166749954223633}, {"id": 192, "seek": 75600, "start": 759.0, "end": 761.0, "text": " Clicking on Dev, because that's where we were.", "tokens": [50514, 8230, 278, 322, 9096, 11, 570, 300, 311, 689, 321, 645, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12059485173858372, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.025166749954223633}, {"id": 193, "seek": 75600, "start": 761.0, "end": 765.0, "text": " We actually see that the untitled IPython notebook is actually still running.", "tokens": [50614, 492, 767, 536, 300, 264, 1701, 270, 1493, 8671, 88, 11943, 21060, 307, 767, 920, 2614, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12059485173858372, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.025166749954223633}, {"id": 194, "seek": 75600, "start": 765.0, "end": 770.0, "text": " So if we click on this, we reattach the browser to the underlying kernel.", "tokens": [50814, 407, 498, 321, 2052, 322, 341, 11, 321, 319, 1591, 608, 264, 11185, 281, 264, 14217, 28256, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12059485173858372, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.025166749954223633}, {"id": 195, "seek": 75600, "start": 770.0, "end": 776.0, "text": " So if you have saved your notebook as you work and you close the browser, the work still remains in memory.", "tokens": [51064, 407, 498, 291, 362, 6624, 428, 21060, 382, 291, 589, 293, 291, 1998, 264, 11185, 11, 264, 589, 920, 7023, 294, 4675, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12059485173858372, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.025166749954223633}, {"id": 196, "seek": 75600, "start": 776.0, "end": 781.0, "text": " So if I say print first comma second, now we see the actual results is here.", "tokens": [51364, 407, 498, 286, 584, 4482, 700, 22117, 1150, 11, 586, 321, 536, 264, 3539, 3542, 307, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12059485173858372, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.025166749954223633}, {"id": 197, "seek": 78100, "start": 781.0, "end": 783.0, "text": " So this is all been saved.", "tokens": [50364, 407, 341, 307, 439, 668, 6624, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 198, "seek": 78100, "start": 783.0, "end": 789.0, "text": " And that's one interesting thing that you should know is that the browser itself is a front end to what's really going on in the kernel.", "tokens": [50464, 400, 300, 311, 472, 1880, 551, 300, 291, 820, 458, 307, 300, 264, 11185, 2564, 307, 257, 1868, 917, 281, 437, 311, 534, 516, 322, 294, 264, 28256, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 199, "seek": 78100, "start": 789.0, "end": 796.0, "text": " Now, the converse to this is what happens if I completely close and shut down the server.", "tokens": [50764, 823, 11, 264, 416, 4308, 281, 341, 307, 437, 2314, 498, 286, 2584, 1998, 293, 5309, 760, 264, 7154, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 200, "seek": 78100, "start": 796.0, "end": 799.0, "text": " So I hit control C twice and shut down the kernels.", "tokens": [51114, 407, 286, 2045, 1969, 383, 6091, 293, 5309, 760, 264, 23434, 1625, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 201, "seek": 78100, "start": 799.0, "end": 801.0, "text": " So all the kernels have been shutting down.", "tokens": [51264, 407, 439, 264, 23434, 1625, 362, 668, 36057, 760, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 202, "seek": 78100, "start": 801.0, "end": 806.0, "text": " So going back to the browser, you see a message that says connection to the notebook server cannot be established.", "tokens": [51364, 407, 516, 646, 281, 264, 11185, 11, 291, 536, 257, 3636, 300, 1619, 4984, 281, 264, 21060, 7154, 2644, 312, 7545, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 203, "seek": 78100, "start": 806.0, "end": 810.0, "text": " Let's continue to try to reconnect, but you won't be able to run any code.", "tokens": [51614, 961, 311, 2354, 281, 853, 281, 30095, 11, 457, 291, 1582, 380, 312, 1075, 281, 1190, 604, 3089, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08613892863778506, "compression_ratio": 1.820945945945946, "no_speech_prob": 0.2506786286830902}, {"id": 204, "seek": 81000, "start": 810.0, "end": 820.0, "text": " So in this case, if I try to do something, say I want to say first times second and execute this and shift enter, nothing happens.", "tokens": [50364, 407, 294, 341, 1389, 11, 498, 286, 853, 281, 360, 746, 11, 584, 286, 528, 281, 584, 700, 1413, 1150, 293, 14483, 341, 293, 5513, 3242, 11, 1825, 2314, 13, 50864], "temperature": 0.0, "avg_logprob": -0.061134033203125, "compression_ratio": 1.699588477366255, "no_speech_prob": 0.0022867643274366856}, {"id": 205, "seek": 81000, "start": 820.0, "end": 823.0, "text": " And this is what you see when it's trying to connect to the kernel and it's failing to.", "tokens": [50864, 400, 341, 307, 437, 291, 536, 562, 309, 311, 1382, 281, 1745, 281, 264, 28256, 293, 309, 311, 18223, 281, 13, 51014], "temperature": 0.0, "avg_logprob": -0.061134033203125, "compression_ratio": 1.699588477366255, "no_speech_prob": 0.0022867643274366856}, {"id": 206, "seek": 81000, "start": 823.0, "end": 829.0, "text": " So this is the part where it actually needs to be running and needs to be continually talking to your browser.", "tokens": [51014, 407, 341, 307, 264, 644, 689, 309, 767, 2203, 281, 312, 2614, 293, 2203, 281, 312, 22277, 1417, 281, 428, 11185, 13, 51314], "temperature": 0.0, "avg_logprob": -0.061134033203125, "compression_ratio": 1.699588477366255, "no_speech_prob": 0.0022867643274366856}, {"id": 207, "seek": 81000, "start": 829.0, "end": 834.0, "text": " Unfortunately, restarting the kernel does not give us back to where we were before.", "tokens": [51314, 8590, 11, 21022, 278, 264, 28256, 775, 406, 976, 505, 646, 281, 689, 321, 645, 949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.061134033203125, "compression_ratio": 1.699588477366255, "no_speech_prob": 0.0022867643274366856}, {"id": 208, "seek": 83400, "start": 834.0, "end": 844.0, "text": " So here I can try to reload this notebook and we still see what we had previously done, but watch what happens when I try to run this third cell.", "tokens": [50364, 407, 510, 286, 393, 853, 281, 25628, 341, 21060, 293, 321, 920, 536, 437, 321, 632, 8046, 1096, 11, 457, 1159, 437, 2314, 562, 286, 853, 281, 1190, 341, 2636, 2815, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07725229717436291, "compression_ratio": 1.7234726688102895, "no_speech_prob": 0.14793266355991364}, {"id": 209, "seek": 83400, "start": 844.0, "end": 848.0, "text": " The name first is not defined and the input name of the cell one to one.", "tokens": [50864, 440, 1315, 700, 307, 406, 7642, 293, 264, 4846, 1315, 295, 264, 2815, 472, 281, 472, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07725229717436291, "compression_ratio": 1.7234726688102895, "no_speech_prob": 0.14793266355991364}, {"id": 210, "seek": 83400, "start": 848.0, "end": 854.0, "text": " So the kernel has completely restarted as you saw me do in the terminal, which means that now we have to start from the beginning.", "tokens": [51064, 407, 264, 28256, 575, 2584, 21022, 292, 382, 291, 1866, 385, 360, 294, 264, 14709, 11, 597, 1355, 300, 586, 321, 362, 281, 722, 490, 264, 2863, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07725229717436291, "compression_ratio": 1.7234726688102895, "no_speech_prob": 0.14793266355991364}, {"id": 211, "seek": 83400, "start": 854.0, "end": 861.0, "text": " And now everything has been stored in state saving it keeps it so that the kernel is now running in the background.", "tokens": [51364, 400, 586, 1203, 575, 668, 12187, 294, 1785, 6816, 309, 5965, 309, 370, 300, 264, 28256, 307, 586, 2614, 294, 264, 3678, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07725229717436291, "compression_ratio": 1.7234726688102895, "no_speech_prob": 0.14793266355991364}, {"id": 212, "seek": 83400, "start": 861.0, "end": 863.0, "text": " Hopefully that gave you a little bit of insight into what's happening.", "tokens": [51714, 10429, 300, 2729, 291, 257, 707, 857, 295, 11269, 666, 437, 311, 2737, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07725229717436291, "compression_ratio": 1.7234726688102895, "no_speech_prob": 0.14793266355991364}, {"id": 213, "seek": 86300, "start": 863.0, "end": 868.0, "text": " The browser acts as a front end to this process that's running in the back end on this terminal.", "tokens": [50364, 440, 11185, 10672, 382, 257, 1868, 917, 281, 341, 1399, 300, 311, 2614, 294, 264, 646, 917, 322, 341, 14709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.068648009830051, "compression_ratio": 1.7013574660633484, "no_speech_prob": 0.010979808866977692}, {"id": 214, "seek": 86300, "start": 868.0, "end": 881.0, "text": " The browser can be closed or blown away after you've saved all of the changes that you've made, but the kernel cannot be the kernel has to stay running if you want to keep the changes that you've done in memory.", "tokens": [50614, 440, 11185, 393, 312, 5395, 420, 16479, 1314, 934, 291, 600, 6624, 439, 295, 264, 2962, 300, 291, 600, 1027, 11, 457, 264, 28256, 2644, 312, 264, 28256, 575, 281, 1754, 2614, 498, 291, 528, 281, 1066, 264, 2962, 300, 291, 600, 1096, 294, 4675, 13, 51264], "temperature": 0.0, "avg_logprob": -0.068648009830051, "compression_ratio": 1.7013574660633484, "no_speech_prob": 0.010979808866977692}, {"id": 215, "seek": 86300, "start": 881.0, "end": 885.0, "text": " In this lesson, we'll be talking about Jupyter notebook extensions.", "tokens": [51264, 682, 341, 6898, 11, 321, 603, 312, 1417, 466, 22125, 88, 391, 21060, 25129, 13, 51464], "temperature": 0.0, "avg_logprob": -0.068648009830051, "compression_ratio": 1.7013574660633484, "no_speech_prob": 0.010979808866977692}, {"id": 216, "seek": 88500, "start": 886.0, "end": 893.0, "text": " Notebook extensions, as the name suggests, are extensions to the capabilities that the Jupyter notebook already comes with.", "tokens": [50414, 11633, 2939, 25129, 11, 382, 264, 1315, 13409, 11, 366, 25129, 281, 264, 10862, 300, 264, 22125, 88, 391, 21060, 1217, 1487, 365, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10481667986103133, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.7298054099082947}, {"id": 217, "seek": 88500, "start": 893.0, "end": 897.0, "text": " Now there's many different ways that you can actually extend the behavior of a Jupyter notebook.", "tokens": [50764, 823, 456, 311, 867, 819, 2098, 300, 291, 393, 767, 10101, 264, 5223, 295, 257, 22125, 88, 391, 21060, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10481667986103133, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.7298054099082947}, {"id": 218, "seek": 88500, "start": 897.0, "end": 899.0, "text": " I'm going to show you just two.", "tokens": [50964, 286, 478, 516, 281, 855, 291, 445, 732, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10481667986103133, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.7298054099082947}, {"id": 219, "seek": 88500, "start": 899.0, "end": 903.0, "text": " The first extension that I'll show you is called Jupyter Pivot Tables.", "tokens": [51064, 440, 700, 10320, 300, 286, 603, 855, 291, 307, 1219, 22125, 88, 391, 430, 13142, 314, 2965, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10481667986103133, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.7298054099082947}, {"id": 220, "seek": 88500, "start": 903.0, "end": 907.0, "text": " And if you click on this link here, you'll see that you go to this website.", "tokens": [51264, 400, 498, 291, 2052, 322, 341, 2113, 510, 11, 291, 603, 536, 300, 291, 352, 281, 341, 3144, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10481667986103133, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.7298054099082947}, {"id": 221, "seek": 90700, "start": 907.0, "end": 913.0, "text": " Nicholas.crucian.com slash content 2015-09 Jupyter Pivot Tables.", "tokens": [50364, 22924, 13, 66, 894, 537, 282, 13, 1112, 17330, 2701, 7546, 12, 13811, 22125, 88, 391, 430, 13142, 314, 2965, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16005529141893574, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.16012641787528992}, {"id": 222, "seek": 90700, "start": 913.0, "end": 917.0, "text": " And this allows for drag and drop pivot tables and charts.", "tokens": [50664, 400, 341, 4045, 337, 5286, 293, 3270, 14538, 8020, 293, 17767, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16005529141893574, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.16012641787528992}, {"id": 223, "seek": 90700, "start": 917.0, "end": 920.0, "text": " And this write-up he has is actually a really nice write-up.", "tokens": [50864, 400, 341, 2464, 12, 1010, 415, 575, 307, 767, 257, 534, 1481, 2464, 12, 1010, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16005529141893574, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.16012641787528992}, {"id": 224, "seek": 90700, "start": 920.0, "end": 927.0, "text": " I recommend you reading and watching this video as well because he explains in some detail how you can actually use his extension.", "tokens": [51014, 286, 2748, 291, 3760, 293, 1976, 341, 960, 382, 731, 570, 415, 13948, 294, 512, 2607, 577, 291, 393, 767, 764, 702, 10320, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16005529141893574, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.16012641787528992}, {"id": 225, "seek": 90700, "start": 927.0, "end": 933.0, "text": " To install this, all you have to do is go to this pip install command.", "tokens": [51364, 1407, 3625, 341, 11, 439, 291, 362, 281, 360, 307, 352, 281, 341, 8489, 3625, 5622, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16005529141893574, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.16012641787528992}, {"id": 226, "seek": 93300, "start": 933.0, "end": 940.0, "text": " So copy pip install pivot table JS and run that command in your terminal.", "tokens": [50364, 407, 5055, 8489, 3625, 14538, 3199, 33063, 293, 1190, 300, 5622, 294, 428, 14709, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11594892077975803, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.014725501649081707}, {"id": 227, "seek": 93300, "start": 940.0, "end": 943.0, "text": " So it's successfully installed the pivot table JS.", "tokens": [50714, 407, 309, 311, 10727, 8899, 264, 14538, 3199, 33063, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11594892077975803, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.014725501649081707}, {"id": 228, "seek": 93300, "start": 943.0, "end": 945.0, "text": " We go back to our notebook.", "tokens": [50864, 492, 352, 646, 281, 527, 21060, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11594892077975803, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.014725501649081707}, {"id": 229, "seek": 93300, "start": 945.0, "end": 955.0, "text": " We can now run the cells that import both pandas and numpy and this command, which is from pivot table JS import pivot UI.", "tokens": [50964, 492, 393, 586, 1190, 264, 5438, 300, 974, 1293, 4565, 296, 293, 1031, 8200, 293, 341, 5622, 11, 597, 307, 490, 14538, 3199, 33063, 974, 14538, 15682, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11594892077975803, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.014725501649081707}, {"id": 230, "seek": 93300, "start": 955.0, "end": 958.0, "text": " So that loaded correctly without any errors.", "tokens": [51464, 407, 300, 13210, 8944, 1553, 604, 13603, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11594892077975803, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.014725501649081707}, {"id": 231, "seek": 93300, "start": 958.0, "end": 961.0, "text": " So we have now loaded this extension.", "tokens": [51614, 407, 321, 362, 586, 13210, 341, 10320, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11594892077975803, "compression_ratio": 1.6886792452830188, "no_speech_prob": 0.014725501649081707}, {"id": 232, "seek": 96100, "start": 961.0, "end": 969.0, "text": " As of Jupyter 4.0, the preferred way of installing notebook extensions is through a pip install of the extension.", "tokens": [50364, 1018, 295, 22125, 88, 391, 1017, 13, 15, 11, 264, 16494, 636, 295, 20762, 21060, 25129, 307, 807, 257, 8489, 3625, 295, 264, 10320, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07886195182800293, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.01853867806494236}, {"id": 233, "seek": 96100, "start": 969.0, "end": 973.0, "text": " There are other ways of doing it as well and I'll show you a second way at the end of this video.", "tokens": [50764, 821, 366, 661, 2098, 295, 884, 309, 382, 731, 293, 286, 603, 855, 291, 257, 1150, 636, 412, 264, 917, 295, 341, 960, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07886195182800293, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.01853867806494236}, {"id": 234, "seek": 96100, "start": 973.0, "end": 978.0, "text": " So let's actually take a look at some data with this pivot table extension.", "tokens": [50964, 407, 718, 311, 767, 747, 257, 574, 412, 512, 1412, 365, 341, 14538, 3199, 10320, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07886195182800293, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.01853867806494236}, {"id": 235, "seek": 96100, "start": 978.0, "end": 984.0, "text": " Go to HTTPS colon slash slash data dot austintexas.gov.", "tokens": [51214, 1037, 281, 11751, 51, 6273, 8255, 17330, 17330, 1412, 5893, 34916, 686, 3121, 296, 13, 16089, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07886195182800293, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.01853867806494236}, {"id": 236, "seek": 96100, "start": 984.0, "end": 990.0, "text": " In this website, we're going to go down and look at the restaurant inspection scores.", "tokens": [51514, 682, 341, 3144, 11, 321, 434, 516, 281, 352, 760, 293, 574, 412, 264, 6383, 22085, 13444, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07886195182800293, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.01853867806494236}, {"id": 237, "seek": 99000, "start": 990.0, "end": 993.0, "text": " From this, we will export data.", "tokens": [50364, 3358, 341, 11, 321, 486, 10725, 1412, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 238, "seek": 99000, "start": 993.0, "end": 995.0, "text": " The format we want is CSV.", "tokens": [50514, 440, 7877, 321, 528, 307, 48814, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 239, "seek": 99000, "start": 995.0, "end": 1000.0, "text": " We do want it to go into our data folder and it's called restaurant inspection scores.", "tokens": [50614, 492, 360, 528, 309, 281, 352, 666, 527, 1412, 10820, 293, 309, 311, 1219, 6383, 22085, 13444, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 240, "seek": 99000, "start": 1000.0, "end": 1002.0, "text": " Return to save that.", "tokens": [50864, 24350, 281, 3155, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 241, "seek": 99000, "start": 1002.0, "end": 1005.0, "text": " You can now close this tab and go back to our notebook.", "tokens": [50964, 509, 393, 586, 1998, 341, 4421, 293, 352, 646, 281, 527, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 242, "seek": 99000, "start": 1005.0, "end": 1010.0, "text": " Now that we've downloaded the CSV file, let's read it into pandas data frame.", "tokens": [51114, 823, 300, 321, 600, 21748, 264, 48814, 3991, 11, 718, 311, 1401, 309, 666, 4565, 296, 1412, 3920, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 243, "seek": 99000, "start": 1010.0, "end": 1019.0, "text": " I'm going to split the cell at the current place where it's blinking by typing control shift minus because I want to run this on just one cell by itself.", "tokens": [51364, 286, 478, 516, 281, 7472, 264, 2815, 412, 264, 2190, 1081, 689, 309, 311, 45879, 538, 18444, 1969, 5513, 3175, 570, 286, 528, 281, 1190, 341, 322, 445, 472, 2815, 538, 2564, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08068827621075285, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0062884981743991375}, {"id": 244, "seek": 101900, "start": 1019.0, "end": 1025.0, "text": " So reselecting that cell, I now hit shift and return and it correctly loads in the data frame.", "tokens": [50364, 407, 2025, 1809, 278, 300, 2815, 11, 286, 586, 2045, 5513, 293, 2736, 293, 309, 8944, 12668, 294, 264, 1412, 3920, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08634678522745769, "compression_ratio": 1.7564575645756457, "no_speech_prob": 0.0016482035862281919}, {"id": 245, "seek": 101900, "start": 1025.0, "end": 1030.0, "text": " So ways to check that is actually look at what the top of this data frame looks like.", "tokens": [50664, 407, 2098, 281, 1520, 300, 307, 767, 574, 412, 437, 264, 1192, 295, 341, 1412, 3920, 1542, 411, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08634678522745769, "compression_ratio": 1.7564575645756457, "no_speech_prob": 0.0016482035862281919}, {"id": 246, "seek": 101900, "start": 1030.0, "end": 1039.0, "text": " We see that the restaurant name, the zip code, inspection date, the score, the address, facility ID and the process description actually looks like it's been read in correctly.", "tokens": [50914, 492, 536, 300, 264, 6383, 1315, 11, 264, 20730, 3089, 11, 22085, 4002, 11, 264, 6175, 11, 264, 2985, 11, 8973, 7348, 293, 264, 1399, 3855, 767, 1542, 411, 309, 311, 668, 1401, 294, 8944, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08634678522745769, "compression_ratio": 1.7564575645756457, "no_speech_prob": 0.0016482035862281919}, {"id": 247, "seek": 101900, "start": 1039.0, "end": 1045.0, "text": " One thing you will notice is that the address has return characters in it because standard address has multiple lines.", "tokens": [51364, 1485, 551, 291, 486, 3449, 307, 300, 264, 2985, 575, 2736, 4342, 294, 309, 570, 3832, 2985, 575, 3866, 3876, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08634678522745769, "compression_ratio": 1.7564575645756457, "no_speech_prob": 0.0016482035862281919}, {"id": 248, "seek": 104500, "start": 1045.0, "end": 1047.0, "text": " And I'm actually going to be okay with that.", "tokens": [50364, 400, 286, 478, 767, 516, 281, 312, 1392, 365, 300, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10139780307034833, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.23636049032211304}, {"id": 249, "seek": 104500, "start": 1047.0, "end": 1052.0, "text": " I'm going to say I would like to keep the address on one line in the data frame, not have that split up in different ways.", "tokens": [50464, 286, 478, 516, 281, 584, 286, 576, 411, 281, 1066, 264, 2985, 322, 472, 1622, 294, 264, 1412, 3920, 11, 406, 362, 300, 7472, 493, 294, 819, 2098, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10139780307034833, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.23636049032211304}, {"id": 250, "seek": 104500, "start": 1052.0, "end": 1059.0, "text": " So let's take a look at what we get when we look at just the data frame itself is pivot underscore UI.", "tokens": [50714, 407, 718, 311, 747, 257, 574, 412, 437, 321, 483, 562, 321, 574, 412, 445, 264, 1412, 3920, 2564, 307, 14538, 37556, 15682, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10139780307034833, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.23636049032211304}, {"id": 251, "seek": 104500, "start": 1059.0, "end": 1063.0, "text": " So we've imported pivot underscore UI up here in the first cell.", "tokens": [51064, 407, 321, 600, 25524, 14538, 37556, 15682, 493, 510, 294, 264, 700, 2815, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10139780307034833, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.23636049032211304}, {"id": 252, "seek": 104500, "start": 1063.0, "end": 1065.0, "text": " Let's execute the cell here.", "tokens": [51264, 961, 311, 14483, 264, 2815, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10139780307034833, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.23636049032211304}, {"id": 253, "seek": 104500, "start": 1065.0, "end": 1067.0, "text": " Now a number of things happened in the background.", "tokens": [51364, 823, 257, 1230, 295, 721, 2011, 294, 264, 3678, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10139780307034833, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.23636049032211304}, {"id": 254, "seek": 106700, "start": 1067.0, "end": 1072.0, "text": " But what you end up seeing, we close this window down here that shows what we downloaded.", "tokens": [50364, 583, 437, 291, 917, 493, 2577, 11, 321, 1998, 341, 4910, 760, 510, 300, 3110, 437, 321, 21748, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 255, "seek": 106700, "start": 1072.0, "end": 1076.0, "text": " And I will actually toggle this toolbar for now.", "tokens": [50614, 400, 286, 486, 767, 31225, 341, 47715, 337, 586, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 256, "seek": 106700, "start": 1076.0, "end": 1078.0, "text": " So we can actually see a bit more.", "tokens": [50814, 407, 321, 393, 767, 536, 257, 857, 544, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 257, "seek": 106700, "start": 1078.0, "end": 1082.0, "text": " We have the various columns of the data frame available on the top here.", "tokens": [50914, 492, 362, 264, 3683, 13766, 295, 264, 1412, 3920, 2435, 322, 264, 1192, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 258, "seek": 106700, "start": 1082.0, "end": 1084.0, "text": " So zip code, inspection date, score.", "tokens": [51114, 407, 20730, 3089, 11, 22085, 4002, 11, 6175, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 259, "seek": 106700, "start": 1084.0, "end": 1087.0, "text": " They are now dragable into these two places.", "tokens": [51214, 814, 366, 586, 5286, 712, 666, 613, 732, 3190, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 260, "seek": 106700, "start": 1087.0, "end": 1088.0, "text": " So let's do that.", "tokens": [51364, 407, 718, 311, 360, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 261, "seek": 106700, "start": 1088.0, "end": 1092.0, "text": " Let's actually drag score along the top.", "tokens": [51414, 961, 311, 767, 5286, 6175, 2051, 264, 1192, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12551878974551245, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.5772698521614075}, {"id": 262, "seek": 109200, "start": 1092.0, "end": 1097.0, "text": " Let's see if there's a relationship between the zip code of a restaurant and the score.", "tokens": [50364, 961, 311, 536, 498, 456, 311, 257, 2480, 1296, 264, 20730, 3089, 295, 257, 6383, 293, 264, 6175, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06734863529360391, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.024413984268903732}, {"id": 263, "seek": 109200, "start": 1097.0, "end": 1104.0, "text": " So just by dragging those two columns in, we see that there are, for each of these zip codes, different scores that have been given to the restaurant.", "tokens": [50614, 407, 445, 538, 24385, 729, 732, 13766, 294, 11, 321, 536, 300, 456, 366, 11, 337, 1184, 295, 613, 20730, 14211, 11, 819, 13444, 300, 362, 668, 2212, 281, 264, 6383, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06734863529360391, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.024413984268903732}, {"id": 264, "seek": 109200, "start": 1104.0, "end": 1108.0, "text": " Of course, a really good score is a 100 for the health score.", "tokens": [50964, 2720, 1164, 11, 257, 534, 665, 6175, 307, 257, 2319, 337, 264, 1585, 6175, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06734863529360391, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.024413984268903732}, {"id": 265, "seek": 109200, "start": 1108.0, "end": 1113.0, "text": " And we can actually scroll down and take a look at this data in a really intuitive way.", "tokens": [51164, 400, 321, 393, 767, 11369, 760, 293, 747, 257, 574, 412, 341, 1412, 294, 257, 534, 21769, 636, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06734863529360391, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.024413984268903732}, {"id": 266, "seek": 109200, "start": 1113.0, "end": 1117.0, "text": " This looks pretty neat, but there's a lot of numbers going on.", "tokens": [51414, 639, 1542, 1238, 10654, 11, 457, 456, 311, 257, 688, 295, 3547, 516, 322, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06734863529360391, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.024413984268903732}, {"id": 267, "seek": 109200, "start": 1117.0, "end": 1119.0, "text": " It's actually kind of hard to read.", "tokens": [51614, 467, 311, 767, 733, 295, 1152, 281, 1401, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06734863529360391, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.024413984268903732}, {"id": 268, "seek": 111900, "start": 1119.0, "end": 1124.0, "text": " So one thing we can do is actually change the output type from table to something else like a heat map.", "tokens": [50364, 407, 472, 551, 321, 393, 360, 307, 767, 1319, 264, 5598, 2010, 490, 3199, 281, 746, 1646, 411, 257, 3738, 4471, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04524161598899148, "compression_ratio": 1.72992700729927, "no_speech_prob": 0.00711999274790287}, {"id": 269, "seek": 111900, "start": 1124.0, "end": 1131.0, "text": " So this does the same data as we saw before, but it actually highlights the outlying points that are large with a darker color.", "tokens": [50614, 407, 341, 775, 264, 912, 1412, 382, 321, 1866, 949, 11, 457, 309, 767, 14254, 264, 484, 7310, 2793, 300, 366, 2416, 365, 257, 12741, 2017, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04524161598899148, "compression_ratio": 1.72992700729927, "no_speech_prob": 0.00711999274790287}, {"id": 270, "seek": 111900, "start": 1131.0, "end": 1136.0, "text": " So now by eye, you can visually see the different relationships between these two variables.", "tokens": [50964, 407, 586, 538, 3313, 11, 291, 393, 19622, 536, 264, 819, 6159, 1296, 613, 732, 9102, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04524161598899148, "compression_ratio": 1.72992700729927, "no_speech_prob": 0.00711999274790287}, {"id": 271, "seek": 111900, "start": 1136.0, "end": 1138.0, "text": " I still think this is actually a little bit too big.", "tokens": [51214, 286, 920, 519, 341, 307, 767, 257, 707, 857, 886, 955, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04524161598899148, "compression_ratio": 1.72992700729927, "no_speech_prob": 0.00711999274790287}, {"id": 272, "seek": 111900, "start": 1138.0, "end": 1145.0, "text": " So I'll give one extra hint of taking data that actually has a lot of different granular pieces.", "tokens": [51314, 407, 286, 603, 976, 472, 2857, 12075, 295, 1940, 1412, 300, 767, 575, 257, 688, 295, 819, 39962, 3755, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04524161598899148, "compression_ratio": 1.72992700729927, "no_speech_prob": 0.00711999274790287}, {"id": 273, "seek": 114500, "start": 1145.0, "end": 1154.0, "text": " So let's take this very granular number across the top and bin it by something, let's say five to give us a little bit less granularity.", "tokens": [50364, 407, 718, 311, 747, 341, 588, 39962, 1230, 2108, 264, 1192, 293, 5171, 309, 538, 746, 11, 718, 311, 584, 1732, 281, 976, 505, 257, 707, 857, 1570, 39962, 507, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11018266317979344, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.08752812445163727}, {"id": 274, "seek": 114500, "start": 1154.0, "end": 1156.0, "text": " So here's some code that will actually do that.", "tokens": [50814, 407, 510, 311, 512, 3089, 300, 486, 767, 360, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11018266317979344, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.08752812445163727}, {"id": 275, "seek": 114500, "start": 1156.0, "end": 1161.0, "text": " So we're going to create a new column in this data frame called bin score for bin to score.", "tokens": [50914, 407, 321, 434, 516, 281, 1884, 257, 777, 7738, 294, 341, 1412, 3920, 1219, 5171, 6175, 337, 5171, 281, 6175, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11018266317979344, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.08752812445163727}, {"id": 276, "seek": 114500, "start": 1161.0, "end": 1171.0, "text": " I'm going to use a pandas function called cut, which will now cut up these column df.score into bins that go from 30 to 100,", "tokens": [51164, 286, 478, 516, 281, 764, 257, 4565, 296, 2445, 1219, 1723, 11, 597, 486, 586, 1723, 493, 613, 7738, 274, 69, 13, 4417, 418, 666, 41275, 300, 352, 490, 2217, 281, 2319, 11, 51664], "temperature": 0.0, "avg_logprob": -0.11018266317979344, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.08752812445163727}, {"id": 277, "seek": 117100, "start": 1171.0, "end": 1177.0, "text": " because no b.a range is not inclusive of the last data point and stepping by five.", "tokens": [50364, 570, 572, 272, 13, 64, 3613, 307, 406, 13429, 295, 264, 1036, 1412, 935, 293, 16821, 538, 1732, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10393799396983364, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.016398204490542412}, {"id": 278, "seek": 117100, "start": 1177.0, "end": 1179.0, "text": " So I'm going to run this cell.", "tokens": [50664, 407, 286, 478, 516, 281, 1190, 341, 2815, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10393799396983364, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.016398204490542412}, {"id": 279, "seek": 117100, "start": 1179.0, "end": 1183.0, "text": " It's going to create a data frame column named bin score.", "tokens": [50764, 467, 311, 516, 281, 1884, 257, 1412, 3920, 7738, 4926, 5171, 6175, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10393799396983364, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.016398204490542412}, {"id": 280, "seek": 117100, "start": 1183.0, "end": 1186.0, "text": " And let's see what this one looks like.", "tokens": [50964, 400, 718, 311, 536, 437, 341, 472, 1542, 411, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10393799396983364, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.016398204490542412}, {"id": 281, "seek": 117100, "start": 1186.0, "end": 1191.0, "text": " We can drag bin score along the x-axis here and zip code along the y-axis.", "tokens": [51114, 492, 393, 5286, 5171, 6175, 2051, 264, 2031, 12, 24633, 510, 293, 20730, 3089, 2051, 264, 288, 12, 24633, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10393799396983364, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.016398204490542412}, {"id": 282, "seek": 117100, "start": 1191.0, "end": 1200.0, "text": " We now see that the binned scores are now counting everything that has a zip code off to the left and any score within a certain range.", "tokens": [51364, 492, 586, 536, 300, 264, 5171, 9232, 13444, 366, 586, 13251, 1203, 300, 575, 257, 20730, 3089, 766, 281, 264, 1411, 293, 604, 6175, 1951, 257, 1629, 3613, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10393799396983364, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.016398204490542412}, {"id": 283, "seek": 120000, "start": 1200.0, "end": 1202.0, "text": " In a range of five.", "tokens": [50364, 682, 257, 3613, 295, 1732, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 284, "seek": 120000, "start": 1202.0, "end": 1204.0, "text": " We can then also take a look at this.", "tokens": [50464, 492, 393, 550, 611, 747, 257, 574, 412, 341, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 285, "seek": 120000, "start": 1204.0, "end": 1206.0, "text": " Instead of a table, we can look at it as a heat map.", "tokens": [50564, 7156, 295, 257, 3199, 11, 321, 393, 574, 412, 309, 382, 257, 3738, 4471, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 286, "seek": 120000, "start": 1206.0, "end": 1211.0, "text": " You can also see if it looks okay in terms of a bar chart, for example.", "tokens": [50664, 509, 393, 611, 536, 498, 309, 1542, 1392, 294, 2115, 295, 257, 2159, 6927, 11, 337, 1365, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 287, "seek": 120000, "start": 1211.0, "end": 1215.0, "text": " And this doesn't quite make sense, but there's many different things that are different here.", "tokens": [50914, 400, 341, 1177, 380, 1596, 652, 2020, 11, 457, 456, 311, 867, 819, 721, 300, 366, 819, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 288, "seek": 120000, "start": 1215.0, "end": 1219.0, "text": " You can actually look at tree map, for example.", "tokens": [51114, 509, 393, 767, 574, 412, 4230, 4471, 11, 337, 1365, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 289, "seek": 120000, "start": 1219.0, "end": 1225.0, "text": " So the various visualizations that are available to you may or may not make sense to the data that you're looking at.", "tokens": [51314, 407, 264, 3683, 5056, 14455, 300, 366, 2435, 281, 291, 815, 420, 815, 406, 652, 2020, 281, 264, 1412, 300, 291, 434, 1237, 412, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08046935399373373, "compression_ratio": 1.7609561752988048, "no_speech_prob": 0.017434164881706238}, {"id": 290, "seek": 122500, "start": 1225.0, "end": 1234.0, "text": " But the availability of this is actually a really nice extension to the notebook capability that Jupyter already comes with.", "tokens": [50364, 583, 264, 17945, 295, 341, 307, 767, 257, 534, 1481, 10320, 281, 264, 21060, 13759, 300, 22125, 88, 391, 1217, 1487, 365, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10677372890969981, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.05496920272707939}, {"id": 291, "seek": 122500, "start": 1234.0, "end": 1239.0, "text": " Alright, so picking up on where the last video left off, notebook extensions.", "tokens": [50814, 2798, 11, 370, 8867, 493, 322, 689, 264, 1036, 960, 1411, 766, 11, 21060, 25129, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10677372890969981, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.05496920272707939}, {"id": 292, "seek": 122500, "start": 1239.0, "end": 1241.0, "text": " We've already installed one extension.", "tokens": [51064, 492, 600, 1217, 8899, 472, 10320, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10677372890969981, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.05496920272707939}, {"id": 293, "seek": 122500, "start": 1241.0, "end": 1243.0, "text": " This is the pivot table extension.", "tokens": [51164, 639, 307, 264, 14538, 3199, 10320, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10677372890969981, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.05496920272707939}, {"id": 294, "seek": 122500, "start": 1243.0, "end": 1247.0, "text": " It's one of the extensions that I'd like to highlight for this video.", "tokens": [51264, 467, 311, 472, 295, 264, 25129, 300, 286, 1116, 411, 281, 5078, 337, 341, 960, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10677372890969981, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.05496920272707939}, {"id": 295, "seek": 122500, "start": 1247.0, "end": 1251.0, "text": " And it actually comes from this URL here.", "tokens": [51464, 400, 309, 767, 1487, 490, 341, 12905, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10677372890969981, "compression_ratio": 1.6943231441048034, "no_speech_prob": 0.05496920272707939}, {"id": 296, "seek": 125100, "start": 1251.0, "end": 1255.0, "text": " I want to turn this into, let me just show you this real quick.", "tokens": [50364, 286, 528, 281, 1261, 341, 666, 11, 718, 385, 445, 855, 291, 341, 957, 1702, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 297, "seek": 125100, "start": 1255.0, "end": 1259.0, "text": " This code block is currently set as code.", "tokens": [50564, 639, 3089, 3461, 307, 4362, 992, 382, 3089, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 298, "seek": 125100, "start": 1259.0, "end": 1261.0, "text": " I'd like to actually change it to mark down.", "tokens": [50764, 286, 1116, 411, 281, 767, 1319, 309, 281, 1491, 760, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 299, "seek": 125100, "start": 1261.0, "end": 1262.0, "text": " There's two ways to do that.", "tokens": [50864, 821, 311, 732, 2098, 281, 360, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 300, "seek": 125100, "start": 1262.0, "end": 1270.0, "text": " By clicking on the toolbar like I just did, or by typing M when this cell is selected in this gray circle right now.", "tokens": [50914, 3146, 9697, 322, 264, 47715, 411, 286, 445, 630, 11, 420, 538, 18444, 376, 562, 341, 2815, 307, 8209, 294, 341, 10855, 6329, 558, 586, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 301, "seek": 125100, "start": 1270.0, "end": 1273.0, "text": " If I type Y, it would turn back to code.", "tokens": [51314, 759, 286, 2010, 398, 11, 309, 576, 1261, 646, 281, 3089, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 302, "seek": 125100, "start": 1273.0, "end": 1277.0, "text": " So I just typed Y, you saw the drop down menu turned to code.", "tokens": [51464, 407, 286, 445, 33941, 398, 11, 291, 1866, 264, 3270, 760, 6510, 3574, 281, 3089, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09071012128863418, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.12571671605110168}, {"id": 303, "seek": 127700, "start": 1277.0, "end": 1283.0, "text": " And since it's still selected with a gray box, I can type M and it goes to mark down.", "tokens": [50364, 400, 1670, 309, 311, 920, 8209, 365, 257, 10855, 2424, 11, 286, 393, 2010, 376, 293, 309, 1709, 281, 1491, 760, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0693083922068278, "compression_ratio": 1.52, "no_speech_prob": 0.021277057006955147}, {"id": 304, "seek": 127700, "start": 1283.0, "end": 1289.0, "text": " So I want it marked down so that when I click this, I can actually open a new tab.", "tokens": [50664, 407, 286, 528, 309, 12658, 760, 370, 300, 562, 286, 2052, 341, 11, 286, 393, 767, 1269, 257, 777, 4421, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0693083922068278, "compression_ratio": 1.52, "no_speech_prob": 0.021277057006955147}, {"id": 305, "seek": 127700, "start": 1289.0, "end": 1293.0, "text": " So the Jupyter slideshow extension is this GitHub repo right here.", "tokens": [50964, 407, 264, 22125, 88, 391, 9788, 4286, 10320, 307, 341, 23331, 49040, 558, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0693083922068278, "compression_ratio": 1.52, "no_speech_prob": 0.021277057006955147}, {"id": 306, "seek": 127700, "start": 1293.0, "end": 1299.0, "text": " It has a lot of really interesting capabilities that I will be showing you at the very end of this course.", "tokens": [51164, 467, 575, 257, 688, 295, 534, 1880, 10862, 300, 286, 486, 312, 4099, 291, 412, 264, 588, 917, 295, 341, 1164, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0693083922068278, "compression_ratio": 1.52, "no_speech_prob": 0.021277057006955147}, {"id": 307, "seek": 129900, "start": 1299.0, "end": 1309.0, "text": " I'll be using the rise Jupyter slideshow extension to help us make a final slideshow presentation out of some of our data science projects.", "tokens": [50364, 286, 603, 312, 1228, 264, 6272, 22125, 88, 391, 9788, 4286, 10320, 281, 854, 505, 652, 257, 2572, 9788, 4286, 5860, 484, 295, 512, 295, 527, 1412, 3497, 4455, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08273713093883586, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.5960175395011902}, {"id": 308, "seek": 129900, "start": 1309.0, "end": 1316.0, "text": " To install this notebook extension, it says to simply run python setup.py install from the rise repository.", "tokens": [50864, 1407, 3625, 341, 21060, 10320, 11, 309, 1619, 281, 2935, 1190, 38797, 8657, 13, 8200, 3625, 490, 264, 6272, 25841, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08273713093883586, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.5960175395011902}, {"id": 309, "seek": 129900, "start": 1316.0, "end": 1320.0, "text": " Now this means we actually have to first download this extension code.", "tokens": [51214, 823, 341, 1355, 321, 767, 362, 281, 700, 5484, 341, 10320, 3089, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08273713093883586, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.5960175395011902}, {"id": 310, "seek": 129900, "start": 1320.0, "end": 1323.0, "text": " So this isn't done in the usual PIP install way.", "tokens": [51414, 407, 341, 1943, 380, 1096, 294, 264, 7713, 430, 9139, 3625, 636, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08273713093883586, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.5960175395011902}, {"id": 311, "seek": 129900, "start": 1323.0, "end": 1327.0, "text": " This is done by choosing the SSH version here at the top of the page.", "tokens": [51564, 639, 307, 1096, 538, 10875, 264, 12238, 39, 3037, 510, 412, 264, 1192, 295, 264, 3028, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08273713093883586, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.5960175395011902}, {"id": 312, "seek": 132700, "start": 1327.0, "end": 1329.0, "text": " Selecting this by clicking once.", "tokens": [50364, 13638, 278, 341, 538, 9697, 1564, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10357206066449483, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.022969385609030724}, {"id": 313, "seek": 132700, "start": 1329.0, "end": 1334.0, "text": " GitHub actually makes it so that the entire thing is highlighted so you can now command C to copy this.", "tokens": [50464, 23331, 767, 1669, 309, 370, 300, 264, 2302, 551, 307, 17173, 370, 291, 393, 586, 5622, 383, 281, 5055, 341, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10357206066449483, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.022969385609030724}, {"id": 314, "seek": 132700, "start": 1334.0, "end": 1337.0, "text": " Go to your terminal.", "tokens": [50714, 1037, 281, 428, 14709, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10357206066449483, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.022969385609030724}, {"id": 315, "seek": 132700, "start": 1337.0, "end": 1349.0, "text": " And at this point, if you don't have a folder for your GitHub repositories that you just grabbed from wild, basically, I would recommend creating one.", "tokens": [50864, 400, 412, 341, 935, 11, 498, 291, 500, 380, 362, 257, 10820, 337, 428, 23331, 22283, 2083, 300, 291, 445, 18607, 490, 4868, 11, 1936, 11, 286, 576, 2748, 4084, 472, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10357206066449483, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.022969385609030724}, {"id": 316, "seek": 132700, "start": 1349.0, "end": 1355.0, "text": " So we type git clone and then paste in the code we had copied from GitHub web page.", "tokens": [51464, 407, 321, 2010, 18331, 26506, 293, 550, 9163, 294, 264, 3089, 321, 632, 25365, 490, 23331, 3670, 3028, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10357206066449483, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.022969385609030724}, {"id": 317, "seek": 135500, "start": 1355.0, "end": 1358.0, "text": " So it clones into this thing called rise.", "tokens": [50364, 407, 309, 43803, 666, 341, 551, 1219, 6272, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 318, "seek": 135500, "start": 1358.0, "end": 1360.0, "text": " Let's CD into this.", "tokens": [50514, 961, 311, 6743, 666, 341, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 319, "seek": 135500, "start": 1360.0, "end": 1363.0, "text": " We see various things here, the live reveal package, Jason and so on.", "tokens": [50614, 492, 536, 3683, 721, 510, 11, 264, 1621, 10658, 7372, 11, 11181, 293, 370, 322, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 320, "seek": 135500, "start": 1363.0, "end": 1366.0, "text": " Let's go back to the GitHub page.", "tokens": [50764, 961, 311, 352, 646, 281, 264, 23331, 3028, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 321, "seek": 135500, "start": 1366.0, "end": 1369.0, "text": " This is we simply run python setup.py install.", "tokens": [50914, 639, 307, 321, 2935, 1190, 38797, 8657, 13, 8200, 3625, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 322, "seek": 135500, "start": 1369.0, "end": 1372.0, "text": " So I'll copy that code and paste.", "tokens": [51064, 407, 286, 603, 5055, 300, 3089, 293, 9163, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 323, "seek": 135500, "start": 1372.0, "end": 1378.0, "text": " Okay, so we have now installed this live reveal.js notebook extension.", "tokens": [51214, 1033, 11, 370, 321, 362, 586, 8899, 341, 1621, 10658, 13, 25530, 21060, 10320, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14423353593428057, "compression_ratio": 1.4952830188679245, "no_speech_prob": 0.007458922453224659}, {"id": 324, "seek": 137800, "start": 1378.0, "end": 1380.0, "text": " So we go back to our notebook.", "tokens": [50364, 407, 321, 352, 646, 281, 527, 21060, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07268224506203187, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.11111722141504288}, {"id": 325, "seek": 137800, "start": 1380.0, "end": 1387.0, "text": " We see that there's an extra toolbar cell here, which has something different than we normally see, including a slideshow option.", "tokens": [50464, 492, 536, 300, 456, 311, 364, 2857, 47715, 2815, 510, 11, 597, 575, 746, 819, 813, 321, 5646, 536, 11, 3009, 257, 9788, 4286, 3614, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07268224506203187, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.11111722141504288}, {"id": 326, "seek": 137800, "start": 1387.0, "end": 1393.0, "text": " And we actually need to restart this notebook to actually get the ability to make this look like a slideshow.", "tokens": [50814, 400, 321, 767, 643, 281, 21022, 341, 21060, 281, 767, 483, 264, 3485, 281, 652, 341, 574, 411, 257, 9788, 4286, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07268224506203187, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.11111722141504288}, {"id": 327, "seek": 137800, "start": 1393.0, "end": 1396.0, "text": " So let me go ahead and do that.", "tokens": [51114, 407, 718, 385, 352, 2286, 293, 360, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07268224506203187, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.11111722141504288}, {"id": 328, "seek": 137800, "start": 1396.0, "end": 1401.0, "text": " I'll do save and checkpoint and then close and halt.", "tokens": [51264, 286, 603, 360, 3155, 293, 42269, 293, 550, 1998, 293, 12479, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07268224506203187, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.11111722141504288}, {"id": 329, "seek": 137800, "start": 1401.0, "end": 1406.0, "text": " I'll go back to where it's running in the terminal and hit control C once.", "tokens": [51514, 286, 603, 352, 646, 281, 689, 309, 311, 2614, 294, 264, 14709, 293, 2045, 1969, 383, 1564, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07268224506203187, "compression_ratio": 1.699604743083004, "no_speech_prob": 0.11111722141504288}, {"id": 330, "seek": 140600, "start": 1406.0, "end": 1409.0, "text": " It says it's currently running, shut down the server, yes or no.", "tokens": [50364, 467, 1619, 309, 311, 4362, 2614, 11, 5309, 760, 264, 7154, 11, 2086, 420, 572, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 331, "seek": 140600, "start": 1409.0, "end": 1412.0, "text": " If you wait too long, it'll actually say I didn't see an answer.", "tokens": [50514, 759, 291, 1699, 886, 938, 11, 309, 603, 767, 584, 286, 994, 380, 536, 364, 1867, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 332, "seek": 140600, "start": 1412.0, "end": 1414.0, "text": " So I'm just going to assume you did that by mistake.", "tokens": [50664, 407, 286, 478, 445, 516, 281, 6552, 291, 630, 300, 538, 6146, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 333, "seek": 140600, "start": 1414.0, "end": 1417.0, "text": " We actually do want to quit this.", "tokens": [50764, 492, 767, 360, 528, 281, 10366, 341, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 334, "seek": 140600, "start": 1417.0, "end": 1419.0, "text": " So we'll do control C twice.", "tokens": [50914, 407, 321, 603, 360, 1969, 383, 6091, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 335, "seek": 140600, "start": 1419.0, "end": 1421.0, "text": " You can have also selected why.", "tokens": [51014, 509, 393, 362, 611, 8209, 983, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 336, "seek": 140600, "start": 1421.0, "end": 1423.0, "text": " So we shut down all the kernels.", "tokens": [51114, 407, 321, 5309, 760, 439, 264, 23434, 1625, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 337, "seek": 140600, "start": 1423.0, "end": 1426.0, "text": " And this thing, if I reload this should not be available.", "tokens": [51214, 400, 341, 551, 11, 498, 286, 25628, 341, 820, 406, 312, 2435, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 338, "seek": 140600, "start": 1426.0, "end": 1431.0, "text": " Let's rerun Jupyter notebook and it will give us a new version of this exact thing.", "tokens": [51364, 961, 311, 43819, 409, 22125, 88, 391, 21060, 293, 309, 486, 976, 505, 257, 777, 3037, 295, 341, 1900, 551, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 339, "seek": 140600, "start": 1431.0, "end": 1433.0, "text": " Click notebook extensions.", "tokens": [51614, 8230, 21060, 25129, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11432116964588994, "compression_ratio": 1.623728813559322, "no_speech_prob": 0.008060007356107235}, {"id": 340, "seek": 143300, "start": 1433.0, "end": 1438.0, "text": " And now you still see this toolbar here with the currently being non the slideshow option,", "tokens": [50364, 400, 586, 291, 920, 536, 341, 47715, 510, 365, 264, 4362, 885, 2107, 264, 9788, 4286, 3614, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 341, "seek": 143300, "start": 1438.0, "end": 1441.0, "text": " but you also have a new button off to the right.", "tokens": [50614, 457, 291, 611, 362, 257, 777, 2960, 766, 281, 264, 558, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 342, "seek": 143300, "start": 1441.0, "end": 1445.0, "text": " So let's actually click this and click the slideshow option.", "tokens": [50764, 407, 718, 311, 767, 2052, 341, 293, 2052, 264, 9788, 4286, 3614, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 343, "seek": 143300, "start": 1445.0, "end": 1452.0, "text": " If you'd actually like to turn one of your notebooks into a slideshow, the functionality is now at your fingertips.", "tokens": [50964, 759, 291, 1116, 767, 411, 281, 1261, 472, 295, 428, 43782, 666, 257, 9788, 4286, 11, 264, 14980, 307, 586, 412, 428, 27715, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 344, "seek": 143300, "start": 1452.0, "end": 1457.0, "text": " And if you don't want to see all these extra cell toolbars, you can always put this back to none.", "tokens": [51314, 400, 498, 291, 500, 380, 528, 281, 536, 439, 613, 2857, 2815, 2290, 42162, 11, 291, 393, 1009, 829, 341, 646, 281, 6022, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 345, "seek": 143300, "start": 1457.0, "end": 1458.0, "text": " They should be saved.", "tokens": [51564, 814, 820, 312, 6624, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 346, "seek": 143300, "start": 1458.0, "end": 1462.0, "text": " So any clicking slideshow again, the fact that these are all slides has been preserved.", "tokens": [51614, 407, 604, 9697, 9788, 4286, 797, 11, 264, 1186, 300, 613, 366, 439, 9788, 575, 668, 22242, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07498037631695087, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.01797986961901188}, {"id": 347, "seek": 146200, "start": 1462.0, "end": 1469.0, "text": " To look at the slideshow itself, we just click this button and type into the right gives you the different slides.", "tokens": [50364, 1407, 574, 412, 264, 9788, 4286, 2564, 11, 321, 445, 2052, 341, 2960, 293, 2010, 666, 264, 558, 2709, 291, 264, 819, 9788, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06262814557110821, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.01341702975332737}, {"id": 348, "seek": 146200, "start": 1469.0, "end": 1476.0, "text": " And one interesting thing about this or one thing that I think is very, very useful is that this is not just a rendered notebook of this.", "tokens": [50714, 400, 472, 1880, 551, 466, 341, 420, 472, 551, 300, 286, 519, 307, 588, 11, 588, 4420, 307, 300, 341, 307, 406, 445, 257, 28748, 21060, 295, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06262814557110821, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.01341702975332737}, {"id": 349, "seek": 146200, "start": 1476.0, "end": 1481.0, "text": " This is actually a live cell that we can actually import and actually run new code.", "tokens": [51064, 639, 307, 767, 257, 1621, 2815, 300, 321, 393, 767, 974, 293, 767, 1190, 777, 3089, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06262814557110821, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.01341702975332737}, {"id": 350, "seek": 146200, "start": 1481.0, "end": 1486.0, "text": " So I just ran that piece of Python code during the slideshow while it's up.", "tokens": [51314, 407, 286, 445, 5872, 300, 2522, 295, 15329, 3089, 1830, 264, 9788, 4286, 1339, 309, 311, 493, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06262814557110821, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.01341702975332737}, {"id": 351, "seek": 146200, "start": 1486.0, "end": 1491.0, "text": " So this is very nice for interactive demonstrations.", "tokens": [51564, 407, 341, 307, 588, 1481, 337, 15141, 34714, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06262814557110821, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.01341702975332737}, {"id": 352, "seek": 149200, "start": 1492.0, "end": 1499.0, "text": " In this video, I'll be showing you how to actually query SQL databases from the Jupyter notebook itself.", "tokens": [50364, 682, 341, 960, 11, 286, 603, 312, 4099, 291, 577, 281, 767, 14581, 19200, 22380, 490, 264, 22125, 88, 391, 21060, 2564, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06127350146953876, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.007117023691534996}, {"id": 353, "seek": 149200, "start": 1499.0, "end": 1504.0, "text": " A lot of enterprise data is stored in databases, so dealing with them will be part of your everyday job.", "tokens": [50714, 316, 688, 295, 14132, 1412, 307, 12187, 294, 22380, 11, 370, 6260, 365, 552, 486, 312, 644, 295, 428, 7429, 1691, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06127350146953876, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.007117023691534996}, {"id": 354, "seek": 149200, "start": 1504.0, "end": 1511.0, "text": " The Jupyter notebook makes it really nice to be able to document very clearly the SQL queries that you are creating.", "tokens": [50964, 440, 22125, 88, 391, 21060, 1669, 309, 534, 1481, 281, 312, 1075, 281, 4166, 588, 4448, 264, 19200, 24109, 300, 291, 366, 4084, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06127350146953876, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.007117023691534996}, {"id": 355, "seek": 149200, "start": 1511.0, "end": 1519.0, "text": " So I recommend if you're going to be using SQL connections using a Jupyter notebook extension called ipython SQL.", "tokens": [51314, 407, 286, 2748, 498, 291, 434, 516, 281, 312, 1228, 19200, 9271, 1228, 257, 22125, 88, 391, 21060, 10320, 1219, 28501, 88, 11943, 19200, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06127350146953876, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.007117023691534996}, {"id": 356, "seek": 151900, "start": 1519.0, "end": 1524.0, "text": " It's installed by typing pip install ipython dash SQL.", "tokens": [50364, 467, 311, 8899, 538, 18444, 8489, 3625, 28501, 88, 11943, 8240, 19200, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06291536256378773, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.1686907559633255}, {"id": 357, "seek": 151900, "start": 1524.0, "end": 1533.0, "text": " Once you install that, you then have access to an extension that you can load by simply typing percent load extension space SQL.", "tokens": [50614, 3443, 291, 3625, 300, 11, 291, 550, 362, 2105, 281, 364, 10320, 300, 291, 393, 3677, 538, 2935, 18444, 3043, 3677, 10320, 1901, 19200, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06291536256378773, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.1686907559633255}, {"id": 358, "seek": 151900, "start": 1533.0, "end": 1537.0, "text": " When you run this cell, it actually loads in this magic extension.", "tokens": [51064, 1133, 291, 1190, 341, 2815, 11, 309, 767, 12668, 294, 341, 5585, 10320, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06291536256378773, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.1686907559633255}, {"id": 359, "seek": 151900, "start": 1537.0, "end": 1542.0, "text": " It gives you a number of warning signs, but these are just warnings. The package will still work just fine.", "tokens": [51264, 467, 2709, 291, 257, 1230, 295, 9164, 7880, 11, 457, 613, 366, 445, 30009, 13, 440, 7372, 486, 920, 589, 445, 2489, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06291536256378773, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.1686907559633255}, {"id": 360, "seek": 151900, "start": 1542.0, "end": 1548.0, "text": " This next line percent config will actually configure our ipython SQL extension.", "tokens": [51514, 639, 958, 1622, 3043, 6662, 486, 767, 22162, 527, 28501, 88, 11943, 19200, 10320, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06291536256378773, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.1686907559633255}, {"id": 361, "seek": 154800, "start": 1548.0, "end": 1557.0, "text": " And what this configuration does, we say SQL magic, we would like to automatically return results that are a table as a pandas data frame.", "tokens": [50364, 400, 437, 341, 11694, 775, 11, 321, 584, 19200, 5585, 11, 321, 576, 411, 281, 6772, 2736, 3542, 300, 366, 257, 3199, 382, 257, 4565, 296, 1412, 3920, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11066583755913131, "compression_ratio": 1.6290909090909091, "no_speech_prob": 0.005136930383741856}, {"id": 362, "seek": 154800, "start": 1557.0, "end": 1567.0, "text": " You don't have to do this, but I recommend it because most of the time you'd actually like to take the data you've queried the database from and transform it and use it in the standard data science tools.", "tokens": [50814, 509, 500, 380, 362, 281, 360, 341, 11, 457, 286, 2748, 309, 570, 881, 295, 264, 565, 291, 1116, 767, 411, 281, 747, 264, 1412, 291, 600, 7083, 1091, 264, 8149, 490, 293, 4088, 309, 293, 764, 309, 294, 264, 3832, 1412, 3497, 3873, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11066583755913131, "compression_ratio": 1.6290909090909091, "no_speech_prob": 0.005136930383741856}, {"id": 363, "seek": 154800, "start": 1567.0, "end": 1569.0, "text": " So I'll run that command as well.", "tokens": [51314, 407, 286, 603, 1190, 300, 5622, 382, 731, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11066583755913131, "compression_ratio": 1.6290909090909091, "no_speech_prob": 0.005136930383741856}, {"id": 364, "seek": 154800, "start": 1569.0, "end": 1575.0, "text": " Next import pandas and for this demonstration, I'll be using SQL lite.", "tokens": [51414, 3087, 974, 4565, 296, 293, 337, 341, 16520, 11, 286, 603, 312, 1228, 19200, 15100, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11066583755913131, "compression_ratio": 1.6290909090909091, "no_speech_prob": 0.005136930383741856}, {"id": 365, "seek": 157500, "start": 1575.0, "end": 1579.0, "text": " You can use any of the standard SQL engine connections.", "tokens": [50364, 509, 393, 764, 604, 295, 264, 3832, 19200, 2848, 9271, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07985989765454364, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.007342938333749771}, {"id": 366, "seek": 157500, "start": 1579.0, "end": 1584.0, "text": " I'm just using SQL lite because it's a simple and easy database to run with for an example.", "tokens": [50564, 286, 478, 445, 1228, 19200, 15100, 570, 309, 311, 257, 2199, 293, 1858, 8149, 281, 1190, 365, 337, 364, 1365, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07985989765454364, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.007342938333749771}, {"id": 367, "seek": 157500, "start": 1584.0, "end": 1589.0, "text": " This next cell, I'm actually going to create a table and put some data into it.", "tokens": [50814, 639, 958, 2815, 11, 286, 478, 767, 516, 281, 1884, 257, 3199, 293, 829, 512, 1412, 666, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07985989765454364, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.007342938333749771}, {"id": 368, "seek": 157500, "start": 1589.0, "end": 1598.0, "text": " So if you're familiar with SQL, you'll notice that everything below the first line of this cell is SQL commands that leaves this top line to be explained.", "tokens": [51064, 407, 498, 291, 434, 4963, 365, 19200, 11, 291, 603, 3449, 300, 1203, 2507, 264, 700, 1622, 295, 341, 2815, 307, 19200, 16901, 300, 5510, 341, 1192, 1622, 281, 312, 8825, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07985989765454364, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.007342938333749771}, {"id": 369, "seek": 159800, "start": 1598.0, "end": 1602.0, "text": " So what we have here is a double percent sign and then SQL.", "tokens": [50364, 407, 437, 321, 362, 510, 307, 257, 3834, 3043, 1465, 293, 550, 19200, 13, 50564], "temperature": 0.0, "avg_logprob": -0.062393971343538655, "compression_ratio": 1.832191780821918, "no_speech_prob": 0.2686912715435028}, {"id": 370, "seek": 159800, "start": 1602.0, "end": 1605.0, "text": " This is how you call what's called a cell magic.", "tokens": [50564, 639, 307, 577, 291, 818, 437, 311, 1219, 257, 2815, 5585, 13, 50714], "temperature": 0.0, "avg_logprob": -0.062393971343538655, "compression_ratio": 1.832191780821918, "no_speech_prob": 0.2686912715435028}, {"id": 371, "seek": 159800, "start": 1605.0, "end": 1616.0, "text": " If I hit tab while I'm at the end of these double percent sign, I will see a little pop up that tells us of all the different options we can have to change this into a cell magic.", "tokens": [50714, 759, 286, 2045, 4421, 1339, 286, 478, 412, 264, 917, 295, 613, 3834, 3043, 1465, 11, 286, 486, 536, 257, 707, 1665, 493, 300, 5112, 505, 295, 439, 264, 819, 3956, 321, 393, 362, 281, 1319, 341, 666, 257, 2815, 5585, 13, 51264], "temperature": 0.0, "avg_logprob": -0.062393971343538655, "compression_ratio": 1.832191780821918, "no_speech_prob": 0.2686912715435028}, {"id": 372, "seek": 159800, "start": 1616.0, "end": 1623.0, "text": " When I say cell magic, what this means is that this is a special flag that tells ipython that something different is going to happen for this entire cell.", "tokens": [51264, 1133, 286, 584, 2815, 5585, 11, 437, 341, 1355, 307, 300, 341, 307, 257, 2121, 7166, 300, 5112, 28501, 88, 11943, 300, 746, 819, 307, 516, 281, 1051, 337, 341, 2302, 2815, 13, 51614], "temperature": 0.0, "avg_logprob": -0.062393971343538655, "compression_ratio": 1.832191780821918, "no_speech_prob": 0.2686912715435028}, {"id": 373, "seek": 159800, "start": 1623.0, "end": 1627.0, "text": " In this case, we're telling it everything after this first line is going to be a SQL query.", "tokens": [51614, 682, 341, 1389, 11, 321, 434, 3585, 309, 1203, 934, 341, 700, 1622, 307, 516, 281, 312, 257, 19200, 14581, 13, 51814], "temperature": 0.0, "avg_logprob": -0.062393971343538655, "compression_ratio": 1.832191780821918, "no_speech_prob": 0.2686912715435028}, {"id": 374, "seek": 162700, "start": 1627.0, "end": 1629.0, "text": " As you can tell, there's other ways you can do this as well.", "tokens": [50364, 1018, 291, 393, 980, 11, 456, 311, 661, 2098, 291, 393, 360, 341, 382, 731, 13, 50464], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 375, "seek": 162700, "start": 1629.0, "end": 1631.0, "text": " You can have HTML, you can have bash.", "tokens": [50464, 509, 393, 362, 17995, 11, 291, 393, 362, 46183, 13, 50564], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 376, "seek": 162700, "start": 1631.0, "end": 1635.0, "text": " There's various other options as well, but I'm just showing you right now the SQL one.", "tokens": [50564, 821, 311, 3683, 661, 3956, 382, 731, 11, 457, 286, 478, 445, 4099, 291, 558, 586, 264, 19200, 472, 13, 50764], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 377, "seek": 162700, "start": 1635.0, "end": 1639.0, "text": " Now this is how you connect to a SQL database that's just stored in memory.", "tokens": [50764, 823, 341, 307, 577, 291, 1745, 281, 257, 19200, 8149, 300, 311, 445, 12187, 294, 4675, 13, 50964], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 378, "seek": 162700, "start": 1639.0, "end": 1647.0, "text": " If you have a different package, a different engine, then you can use the various documentation to tell you which connection you should use.", "tokens": [50964, 759, 291, 362, 257, 819, 7372, 11, 257, 819, 2848, 11, 550, 291, 393, 764, 264, 3683, 14333, 281, 980, 291, 597, 4984, 291, 820, 764, 13, 51364], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 379, "seek": 162700, "start": 1647.0, "end": 1650.0, "text": " So we're going to create a very simple small table called presidents.", "tokens": [51364, 407, 321, 434, 516, 281, 1884, 257, 588, 2199, 1359, 3199, 1219, 27611, 13, 51514], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 380, "seek": 162700, "start": 1650.0, "end": 1655.0, "text": " We're going to have first and last name and we're going to include the year that they were born.", "tokens": [51514, 492, 434, 516, 281, 362, 700, 293, 1036, 1315, 293, 321, 434, 516, 281, 4090, 264, 1064, 300, 436, 645, 4232, 13, 51764], "temperature": 0.0, "avg_logprob": -0.060898391293807766, "compression_ratio": 1.817891373801917, "no_speech_prob": 0.06749345362186432}, {"id": 381, "seek": 165500, "start": 1655.0, "end": 1660.0, "text": " And I just have a random sampling of about 10 US presidents here.", "tokens": [50364, 400, 286, 445, 362, 257, 4974, 21179, 295, 466, 1266, 2546, 27611, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0823898566396613, "compression_ratio": 1.6280701754385964, "no_speech_prob": 0.03407740965485573}, {"id": 382, "seek": 165500, "start": 1660.0, "end": 1664.0, "text": " So running this cell, we get some output here that says one row is affected.", "tokens": [50614, 407, 2614, 341, 2815, 11, 321, 483, 512, 5598, 510, 300, 1619, 472, 5386, 307, 8028, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0823898566396613, "compression_ratio": 1.6280701754385964, "no_speech_prob": 0.03407740965485573}, {"id": 383, "seek": 165500, "start": 1664.0, "end": 1666.0, "text": " We've inserted values into this table.", "tokens": [50814, 492, 600, 27992, 4190, 666, 341, 3199, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0823898566396613, "compression_ratio": 1.6280701754385964, "no_speech_prob": 0.03407740965485573}, {"id": 384, "seek": 165500, "start": 1666.0, "end": 1672.0, "text": " And now we can actually run a SQL command that's in inline again with a single percent.", "tokens": [50914, 400, 586, 321, 393, 767, 1190, 257, 19200, 5622, 300, 311, 294, 294, 1889, 797, 365, 257, 2167, 3043, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0823898566396613, "compression_ratio": 1.6280701754385964, "no_speech_prob": 0.03407740965485573}, {"id": 385, "seek": 165500, "start": 1672.0, "end": 1675.0, "text": " When you have this command here, it says everything after it will be SQL.", "tokens": [51214, 1133, 291, 362, 341, 5622, 510, 11, 309, 1619, 1203, 934, 309, 486, 312, 19200, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0823898566396613, "compression_ratio": 1.6280701754385964, "no_speech_prob": 0.03407740965485573}, {"id": 386, "seek": 165500, "start": 1675.0, "end": 1682.0, "text": " So we're going to store an object called later presidents, the SQL command and the results that come from the SQL query.", "tokens": [51364, 407, 321, 434, 516, 281, 3531, 364, 2657, 1219, 1780, 27611, 11, 264, 19200, 5622, 293, 264, 3542, 300, 808, 490, 264, 19200, 14581, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0823898566396613, "compression_ratio": 1.6280701754385964, "no_speech_prob": 0.03407740965485573}, {"id": 387, "seek": 168200, "start": 1682.0, "end": 1689.0, "text": " The SQL query being select everything from the presidents table where the year of birth was later than 1825.", "tokens": [50364, 440, 19200, 14581, 885, 3048, 1203, 490, 264, 27611, 3199, 689, 264, 1064, 295, 3965, 390, 1780, 813, 2443, 6074, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0656781940285219, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.004331010859459639}, {"id": 388, "seek": 168200, "start": 1689.0, "end": 1692.0, "text": " And then I'm going to show you what that looks like by typing it there.", "tokens": [50714, 400, 550, 286, 478, 516, 281, 855, 291, 437, 300, 1542, 411, 538, 18444, 309, 456, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0656781940285219, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.004331010859459639}, {"id": 389, "seek": 168200, "start": 1692.0, "end": 1698.0, "text": " So we see that there were three presidents that were born in that table after 1825.", "tokens": [50864, 407, 321, 536, 300, 456, 645, 1045, 27611, 300, 645, 4232, 294, 300, 3199, 934, 2443, 6074, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0656781940285219, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.004331010859459639}, {"id": 390, "seek": 168200, "start": 1698.0, "end": 1704.0, "text": " And if we took a look at the type of this return, we will see that it is actually a pandas core data frame.", "tokens": [51164, 400, 498, 321, 1890, 257, 574, 412, 264, 2010, 295, 341, 2736, 11, 321, 486, 536, 300, 309, 307, 767, 257, 4565, 296, 4965, 1412, 3920, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0656781940285219, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.004331010859459639}, {"id": 391, "seek": 168200, "start": 1704.0, "end": 1708.0, "text": " So we have returned a SQL query into a pandas data frame.", "tokens": [51464, 407, 321, 362, 8752, 257, 19200, 14581, 666, 257, 4565, 296, 1412, 3920, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0656781940285219, "compression_ratio": 1.7338709677419355, "no_speech_prob": 0.004331010859459639}, {"id": 392, "seek": 170800, "start": 1708.0, "end": 1713.0, "text": " And now we can use all of the normal tools and functionality of pandas directly.", "tokens": [50364, 400, 586, 321, 393, 764, 439, 295, 264, 2710, 3873, 293, 14980, 295, 4565, 296, 3838, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07967727204673311, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.0814785361289978}, {"id": 393, "seek": 170800, "start": 1713.0, "end": 1719.0, "text": " If we would like to write out this into a file, we can do that by doing this SQL three command here.", "tokens": [50614, 759, 321, 576, 411, 281, 2464, 484, 341, 666, 257, 3991, 11, 321, 393, 360, 300, 538, 884, 341, 19200, 1045, 5622, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07967727204673311, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.0814785361289978}, {"id": 394, "seek": 170800, "start": 1719.0, "end": 1721.0, "text": " So we make a connection to a new file.", "tokens": [50914, 407, 321, 652, 257, 4984, 281, 257, 777, 3991, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07967727204673311, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.0814785361289978}, {"id": 395, "seek": 170800, "start": 1721.0, "end": 1729.0, "text": " And then you run the pandas data frame method to SQL and say, we'll write out the presidents table to the connection.", "tokens": [51014, 400, 550, 291, 1190, 264, 4565, 296, 1412, 3920, 3170, 281, 19200, 293, 584, 11, 321, 603, 2464, 484, 264, 27611, 3199, 281, 264, 4984, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07967727204673311, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.0814785361289978}, {"id": 396, "seek": 170800, "start": 1729.0, "end": 1737.0, "text": " Now, if you don't want to use cell magic in this way, you can also use pandas directly to query our SQL database.", "tokens": [51414, 823, 11, 498, 291, 500, 380, 528, 281, 764, 2815, 5585, 294, 341, 636, 11, 291, 393, 611, 764, 4565, 296, 3838, 281, 14581, 527, 19200, 8149, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07967727204673311, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.0814785361289978}, {"id": 397, "seek": 173700, "start": 1737.0, "end": 1741.0, "text": " So I'll show you how to do that from reading in that file that we just wrote out.", "tokens": [50364, 407, 286, 603, 855, 291, 577, 281, 360, 300, 490, 3760, 294, 300, 3991, 300, 321, 445, 4114, 484, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08526512115232406, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.011503327637910843}, {"id": 398, "seek": 173700, "start": 1741.0, "end": 1745.0, "text": " So we're going to connect it out to this presidents SQL output.", "tokens": [50564, 407, 321, 434, 516, 281, 1745, 309, 484, 281, 341, 27611, 19200, 5598, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08526512115232406, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.011503327637910843}, {"id": 399, "seek": 173700, "start": 1745.0, "end": 1748.0, "text": " We're going to now create a cursor that connects to that connection.", "tokens": [50764, 492, 434, 516, 281, 586, 1884, 257, 28169, 300, 16967, 281, 300, 4984, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08526512115232406, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.011503327637910843}, {"id": 400, "seek": 173700, "start": 1748.0, "end": 1754.0, "text": " And we will create a new data frame by doing the pandas function read SQL.", "tokens": [50914, 400, 321, 486, 1884, 257, 777, 1412, 3920, 538, 884, 264, 4565, 296, 2445, 1401, 19200, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08526512115232406, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.011503327637910843}, {"id": 401, "seek": 173700, "start": 1754.0, "end": 1759.0, "text": " If you hit shift tab while your cursor is inside the parentheses, you get to see the various calls here.", "tokens": [51214, 759, 291, 2045, 5513, 4421, 1339, 428, 28169, 307, 1854, 264, 34153, 11, 291, 483, 281, 536, 264, 3683, 5498, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08526512115232406, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.011503327637910843}, {"id": 402, "seek": 173700, "start": 1759.0, "end": 1765.0, "text": " So we have the SQL command, you're giving it the SQL, then you're following it with the connection.", "tokens": [51464, 407, 321, 362, 264, 19200, 5622, 11, 291, 434, 2902, 309, 264, 19200, 11, 550, 291, 434, 3480, 309, 365, 264, 4984, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08526512115232406, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.011503327637910843}, {"id": 403, "seek": 176500, "start": 1765.0, "end": 1770.0, "text": " And then everything else can be these many other options that you have to really customize it.", "tokens": [50364, 400, 550, 1203, 1646, 393, 312, 613, 867, 661, 3956, 300, 291, 362, 281, 534, 19734, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.044249101921364116, "compression_ratio": 1.774703557312253, "no_speech_prob": 0.004608532879501581}, {"id": 404, "seek": 176500, "start": 1770.0, "end": 1776.0, "text": " And once you've done that, be sure to remember to close the connection by doing com.close.", "tokens": [50614, 400, 1564, 291, 600, 1096, 300, 11, 312, 988, 281, 1604, 281, 1998, 264, 4984, 538, 884, 395, 13, 3474, 541, 13, 50914], "temperature": 0.0, "avg_logprob": -0.044249101921364116, "compression_ratio": 1.774703557312253, "no_speech_prob": 0.004608532879501581}, {"id": 405, "seek": 176500, "start": 1776.0, "end": 1781.0, "text": " So the new data frame should have everything that we stored in the previous query.", "tokens": [50914, 407, 264, 777, 1412, 3920, 820, 362, 1203, 300, 321, 12187, 294, 264, 3894, 14581, 13, 51164], "temperature": 0.0, "avg_logprob": -0.044249101921364116, "compression_ratio": 1.774703557312253, "no_speech_prob": 0.004608532879501581}, {"id": 406, "seek": 176500, "start": 1781.0, "end": 1785.0, "text": " So the three presidents that we saved from above.", "tokens": [51164, 407, 264, 1045, 27611, 300, 321, 6624, 490, 3673, 13, 51364], "temperature": 0.0, "avg_logprob": -0.044249101921364116, "compression_ratio": 1.774703557312253, "no_speech_prob": 0.004608532879501581}, {"id": 407, "seek": 176500, "start": 1785.0, "end": 1789.0, "text": " And again, this is a data frame that was returned from that.", "tokens": [51364, 400, 797, 11, 341, 307, 257, 1412, 3920, 300, 390, 8752, 490, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.044249101921364116, "compression_ratio": 1.774703557312253, "no_speech_prob": 0.004608532879501581}, {"id": 408, "seek": 176500, "start": 1789.0, "end": 1794.0, "text": " So I just showed you two different ways that you can query databases.", "tokens": [51564, 407, 286, 445, 4712, 291, 732, 819, 2098, 300, 291, 393, 14581, 22380, 13, 51814], "temperature": 0.0, "avg_logprob": -0.044249101921364116, "compression_ratio": 1.774703557312253, "no_speech_prob": 0.004608532879501581}, {"id": 409, "seek": 179400, "start": 1794.0, "end": 1799.0, "text": " You can query them with an inline magic, or you can query them through pandas directly.", "tokens": [50364, 509, 393, 14581, 552, 365, 364, 294, 1889, 5585, 11, 420, 291, 393, 14581, 552, 807, 4565, 296, 3838, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11300384998321533, "compression_ratio": 1.6525096525096525, "no_speech_prob": 0.00711794150993228}, {"id": 410, "seek": 179400, "start": 1799.0, "end": 1810.0, "text": " And either one will return to a pandas data frame so that you can actually use the output in some exploratory data analysis or your full-fledged project.", "tokens": [50614, 400, 2139, 472, 486, 2736, 281, 257, 4565, 296, 1412, 3920, 370, 300, 291, 393, 767, 764, 264, 5598, 294, 512, 24765, 4745, 1412, 5215, 420, 428, 1577, 12, 69, 1493, 3004, 1716, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11300384998321533, "compression_ratio": 1.6525096525096525, "no_speech_prob": 0.00711794150993228}, {"id": 411, "seek": 179400, "start": 1810.0, "end": 1816.0, "text": " In this video, we'll be talking about how to actually use R in the Jupyter Notebook ecosystem.", "tokens": [51164, 682, 341, 960, 11, 321, 603, 312, 1417, 466, 577, 281, 767, 764, 497, 294, 264, 22125, 88, 391, 11633, 2939, 11311, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11300384998321533, "compression_ratio": 1.6525096525096525, "no_speech_prob": 0.00711794150993228}, {"id": 412, "seek": 179400, "start": 1816.0, "end": 1822.0, "text": " Previously, we talked about how we can actually set up different Python and R environments.", "tokens": [51464, 33606, 11, 321, 2825, 466, 577, 321, 393, 767, 992, 493, 819, 15329, 293, 497, 12388, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11300384998321533, "compression_ratio": 1.6525096525096525, "no_speech_prob": 0.00711794150993228}, {"id": 413, "seek": 182200, "start": 1822.0, "end": 1826.0, "text": " To set up a unique conda environment for Python 2, for example,", "tokens": [50364, 1407, 992, 493, 257, 3845, 2224, 64, 2823, 337, 15329, 568, 11, 337, 1365, 11, 50564], "temperature": 0.0, "avg_logprob": -0.12808269924587673, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.028849121183156967}, {"id": 414, "seek": 182200, "start": 1826.0, "end": 1833.0, "text": " we can do conda create minus n for name pi2, for example, just as a descriptive name that you could use.", "tokens": [50564, 321, 393, 360, 2224, 64, 1884, 3175, 297, 337, 1315, 3895, 17, 11, 337, 1365, 11, 445, 382, 257, 42585, 1315, 300, 291, 727, 764, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12808269924587673, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.028849121183156967}, {"id": 415, "seek": 182200, "start": 1833.0, "end": 1838.0, "text": " We set the Python version to be equal to 2, and then the other packages that we would like to install.", "tokens": [50914, 492, 992, 264, 15329, 3037, 281, 312, 2681, 281, 568, 11, 293, 550, 264, 661, 17401, 300, 321, 576, 411, 281, 3625, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12808269924587673, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.028849121183156967}, {"id": 416, "seek": 182200, "start": 1838.0, "end": 1841.0, "text": " So anaconda, Jupyter itself, notebook.", "tokens": [51164, 407, 364, 326, 12233, 11, 22125, 88, 391, 2564, 11, 21060, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12808269924587673, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.028849121183156967}, {"id": 417, "seek": 182200, "start": 1841.0, "end": 1844.0, "text": " We do the same thing for the Python 3 environment.", "tokens": [51314, 492, 360, 264, 912, 551, 337, 264, 15329, 805, 2823, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12808269924587673, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.028849121183156967}, {"id": 418, "seek": 182200, "start": 1844.0, "end": 1850.0, "text": " So conda create with a different name, Python 3, for example, and setting the Python version equaling to 3.", "tokens": [51464, 407, 2224, 64, 1884, 365, 257, 819, 1315, 11, 15329, 805, 11, 337, 1365, 11, 293, 3287, 264, 15329, 3037, 2681, 278, 281, 805, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12808269924587673, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.028849121183156967}, {"id": 419, "seek": 185000, "start": 1850.0, "end": 1853.0, "text": " We also do the same thing when we want to do an R environment.", "tokens": [50364, 492, 611, 360, 264, 912, 551, 562, 321, 528, 281, 360, 364, 497, 2823, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07693879835067256, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.017977625131607056}, {"id": 420, "seek": 185000, "start": 1853.0, "end": 1857.0, "text": " So in this case, conda create minus n, and we're going to call this Jupyter underscore R.", "tokens": [50514, 407, 294, 341, 1389, 11, 2224, 64, 1884, 3175, 297, 11, 293, 321, 434, 516, 281, 818, 341, 22125, 88, 391, 37556, 497, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07693879835067256, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.017977625131607056}, {"id": 421, "seek": 185000, "start": 1857.0, "end": 1866.0, "text": " And with creating the channel by minus C, R tells Jupyter and tells conda that you're actually creating an R kernel as well as the default other ones.", "tokens": [50714, 400, 365, 4084, 264, 2269, 538, 3175, 383, 11, 497, 5112, 22125, 88, 391, 293, 5112, 2224, 64, 300, 291, 434, 767, 4084, 364, 497, 28256, 382, 731, 382, 264, 7576, 661, 2306, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07693879835067256, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.017977625131607056}, {"id": 422, "seek": 185000, "start": 1866.0, "end": 1872.0, "text": " And this creates the R kernel so that the Jupyter Notebook can actually run R natively,", "tokens": [51164, 400, 341, 7829, 264, 497, 28256, 370, 300, 264, 22125, 88, 391, 11633, 2939, 393, 767, 1190, 497, 8470, 356, 11, 51464], "temperature": 0.0, "avg_logprob": -0.07693879835067256, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.017977625131607056}, {"id": 423, "seek": 185000, "start": 1872.0, "end": 1877.0, "text": " as well as installing a number of different packages that it thinks are both recommended and essential.", "tokens": [51464, 382, 731, 382, 20762, 257, 1230, 295, 819, 17401, 300, 309, 7309, 366, 1293, 9628, 293, 7115, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07693879835067256, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.017977625131607056}, {"id": 424, "seek": 187700, "start": 1877.0, "end": 1880.0, "text": " And finally, a Python package called rpi2.", "tokens": [50364, 400, 2721, 11, 257, 15329, 7372, 1219, 367, 22630, 17, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10244378256141592, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.010815742425620556}, {"id": 425, "seek": 187700, "start": 1880.0, "end": 1887.0, "text": " The way to activate these commands is you say source activate and then the name of the environment that you created.", "tokens": [50514, 440, 636, 281, 13615, 613, 16901, 307, 291, 584, 4009, 13615, 293, 550, 264, 1315, 295, 264, 2823, 300, 291, 2942, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10244378256141592, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.010815742425620556}, {"id": 426, "seek": 187700, "start": 1887.0, "end": 1890.0, "text": " And when you're done with it, source deactivate.", "tokens": [50864, 400, 562, 291, 434, 1096, 365, 309, 11, 4009, 45428, 473, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10244378256141592, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.010815742425620556}, {"id": 427, "seek": 187700, "start": 1890.0, "end": 1896.0, "text": " And if you ever forget which environments you've actually installed or what the names you used were, you can do conda environment list.", "tokens": [51014, 400, 498, 291, 1562, 2870, 597, 12388, 291, 600, 767, 8899, 420, 437, 264, 5288, 291, 1143, 645, 11, 291, 393, 360, 2224, 64, 2823, 1329, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10244378256141592, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.010815742425620556}, {"id": 428, "seek": 187700, "start": 1896.0, "end": 1900.0, "text": " Let's do that to start with conda env list.", "tokens": [51314, 961, 311, 360, 300, 281, 722, 365, 2224, 64, 2267, 1329, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10244378256141592, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.010815742425620556}, {"id": 429, "seek": 187700, "start": 1900.0, "end": 1904.0, "text": " And we see that there are four different environments installed.", "tokens": [51514, 400, 321, 536, 300, 456, 366, 1451, 819, 12388, 8899, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10244378256141592, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.010815742425620556}, {"id": 430, "seek": 190400, "start": 1904.0, "end": 1909.0, "text": " There's the root one, which doesn't really qualify as an environment, but then we have pi2, pi3, and Jupyter R.", "tokens": [50364, 821, 311, 264, 5593, 472, 11, 597, 1177, 380, 534, 20276, 382, 364, 2823, 11, 457, 550, 321, 362, 3895, 17, 11, 3895, 18, 11, 293, 22125, 88, 391, 497, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10845688978830974, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.012818356044590473}, {"id": 431, "seek": 190400, "start": 1909.0, "end": 1916.0, "text": " So let's source activate pi3 and say Jupyter Notebook.", "tokens": [50614, 407, 718, 311, 4009, 13615, 3895, 18, 293, 584, 22125, 88, 391, 11633, 2939, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10845688978830974, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.012818356044590473}, {"id": 432, "seek": 190400, "start": 1916.0, "end": 1919.0, "text": " Once we start that, we can start a Python Notebook.", "tokens": [50964, 3443, 321, 722, 300, 11, 321, 393, 722, 257, 15329, 11633, 2939, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10845688978830974, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.012818356044590473}, {"id": 433, "seek": 190400, "start": 1919.0, "end": 1926.0, "text": " And we see in the upper right-hand corner, not only a blue flag that says using the pi3 kernel just for a second before it flashed away,", "tokens": [51114, 400, 321, 536, 294, 264, 6597, 558, 12, 5543, 4538, 11, 406, 787, 257, 3344, 7166, 300, 1619, 1228, 264, 3895, 18, 28256, 445, 337, 257, 1150, 949, 309, 7319, 292, 1314, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10845688978830974, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.012818356044590473}, {"id": 434, "seek": 190400, "start": 1926.0, "end": 1930.0, "text": " you actually see that it types Python 3 in the upper right-hand corner.", "tokens": [51464, 291, 767, 536, 300, 309, 3467, 15329, 805, 294, 264, 6597, 558, 12, 5543, 4538, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10845688978830974, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.012818356044590473}, {"id": 435, "seek": 193000, "start": 1930.0, "end": 1935.0, "text": " Let's verify that by doing a print 5 plus 5 as a statement and as we can do in Python 2.", "tokens": [50364, 961, 311, 16888, 300, 538, 884, 257, 4482, 1025, 1804, 1025, 382, 257, 5629, 293, 382, 321, 393, 360, 294, 15329, 568, 13, 50614], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 436, "seek": 193000, "start": 1935.0, "end": 1937.0, "text": " And this doesn't work in Python 3.", "tokens": [50614, 400, 341, 1177, 380, 589, 294, 15329, 805, 13, 50714], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 437, "seek": 193000, "start": 1937.0, "end": 1940.0, "text": " The syntax for Python 3 is with parentheses.", "tokens": [50714, 440, 28431, 337, 15329, 805, 307, 365, 34153, 13, 50864], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 438, "seek": 193000, "start": 1940.0, "end": 1943.0, "text": " All right, so we are using Python 3.", "tokens": [50864, 1057, 558, 11, 370, 321, 366, 1228, 15329, 805, 13, 51014], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 439, "seek": 193000, "start": 1943.0, "end": 1948.0, "text": " Let's close and halt this and shut down the server by hitting control C twice.", "tokens": [51014, 961, 311, 1998, 293, 12479, 341, 293, 5309, 760, 264, 7154, 538, 8850, 1969, 383, 6091, 13, 51264], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 440, "seek": 193000, "start": 1948.0, "end": 1953.0, "text": " We can tell that we're using Python 3 because pi3 is at the beginning of our terminal screen right there.", "tokens": [51264, 492, 393, 980, 300, 321, 434, 1228, 15329, 805, 570, 3895, 18, 307, 412, 264, 2863, 295, 527, 14709, 2568, 558, 456, 13, 51514], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 441, "seek": 193000, "start": 1953.0, "end": 1956.0, "text": " So I have to say source deactivate.", "tokens": [51514, 407, 286, 362, 281, 584, 4009, 45428, 473, 13, 51664], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 442, "seek": 193000, "start": 1956.0, "end": 1958.0, "text": " Again, conda env list.", "tokens": [51664, 3764, 11, 2224, 64, 2267, 1329, 13, 51764], "temperature": 0.0, "avg_logprob": -0.114935791015625, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.05497267097234726}, {"id": 443, "seek": 195800, "start": 1958.0, "end": 1963.0, "text": " Let's switch to Jupyter.", "tokens": [50364, 961, 311, 3679, 281, 22125, 88, 391, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0839280182460569, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.009123562835156918}, {"id": 444, "seek": 195800, "start": 1963.0, "end": 1966.0, "text": " The command is the same Jupyter Notebook.", "tokens": [50614, 440, 5622, 307, 264, 912, 22125, 88, 391, 11633, 2939, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0839280182460569, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.009123562835156918}, {"id": 445, "seek": 195800, "start": 1966.0, "end": 1970.0, "text": " Now we can click this pure R example and it loads up R.", "tokens": [50764, 823, 321, 393, 2052, 341, 6075, 497, 1365, 293, 309, 12668, 493, 497, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0839280182460569, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.009123562835156918}, {"id": 446, "seek": 195800, "start": 1970.0, "end": 1976.0, "text": " Just in case you're curious, we can go back to this home directory and create a new, in this case, R.", "tokens": [50964, 1449, 294, 1389, 291, 434, 6369, 11, 321, 393, 352, 646, 281, 341, 1280, 21120, 293, 1884, 257, 777, 11, 294, 341, 1389, 11, 497, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0839280182460569, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.009123562835156918}, {"id": 447, "seek": 195800, "start": 1976.0, "end": 1980.0, "text": " And this is an R kernel running natively.", "tokens": [51264, 400, 341, 307, 364, 497, 28256, 2614, 8470, 356, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0839280182460569, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.009123562835156918}, {"id": 448, "seek": 195800, "start": 1980.0, "end": 1984.0, "text": " So you can tell again, look in the upper right-hand corner, not only is it not using Python,", "tokens": [51464, 407, 291, 393, 980, 797, 11, 574, 294, 264, 6597, 558, 12, 5543, 4538, 11, 406, 787, 307, 309, 406, 1228, 15329, 11, 51664], "temperature": 0.0, "avg_logprob": -0.0839280182460569, "compression_ratio": 1.5474137931034482, "no_speech_prob": 0.009123562835156918}, {"id": 449, "seek": 198400, "start": 1984.0, "end": 1988.0, "text": " it's actually using the R kernel natively for this entire notebook.", "tokens": [50364, 309, 311, 767, 1228, 264, 497, 28256, 8470, 356, 337, 341, 2302, 21060, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 450, "seek": 198400, "start": 1988.0, "end": 1990.0, "text": " Let's go back to this pure R example.", "tokens": [50564, 961, 311, 352, 646, 281, 341, 6075, 497, 1365, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 451, "seek": 198400, "start": 1990.0, "end": 1992.0, "text": " So what is it that R can do?", "tokens": [50664, 407, 437, 307, 309, 300, 497, 393, 360, 30, 50764], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 452, "seek": 198400, "start": 1992.0, "end": 1996.0, "text": " R is a language that has some design choices that are slightly different than Python,", "tokens": [50764, 497, 307, 257, 2856, 300, 575, 512, 1715, 7994, 300, 366, 4748, 819, 813, 15329, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 453, "seek": 198400, "start": 1996.0, "end": 2000.0, "text": " but it does have a huge statistics library packages.", "tokens": [50964, 457, 309, 775, 362, 257, 2603, 12523, 6405, 17401, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 454, "seek": 198400, "start": 2000.0, "end": 2005.0, "text": " So you load them in and everything you'll be done in this notebook will be actual R code itself.", "tokens": [51164, 407, 291, 3677, 552, 294, 293, 1203, 291, 603, 312, 1096, 294, 341, 21060, 486, 312, 3539, 497, 3089, 2564, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 455, "seek": 198400, "start": 2005.0, "end": 2008.0, "text": " And again, just looking in the upper-hand corner, this is now R code.", "tokens": [51414, 400, 797, 11, 445, 1237, 294, 264, 6597, 12, 5543, 4538, 11, 341, 307, 586, 497, 3089, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 456, "seek": 198400, "start": 2008.0, "end": 2010.0, "text": " I loaded a few libraries here.", "tokens": [51564, 286, 13210, 257, 1326, 15148, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07318826225714956, "compression_ratio": 1.6241379310344828, "no_speech_prob": 0.026747463271021843}, {"id": 457, "seek": 201000, "start": 2010.0, "end": 2016.0, "text": " These are some standard, actually really nice libraries in R, the plier package and ggplot2.", "tokens": [50364, 1981, 366, 512, 3832, 11, 767, 534, 1481, 15148, 294, 497, 11, 264, 499, 811, 7372, 293, 290, 70, 564, 310, 17, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11565678006126767, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.03730210289359093}, {"id": 458, "seek": 201000, "start": 2016.0, "end": 2023.0, "text": " This economics data comes when you load in the plier library and you see the head of this economics data.", "tokens": [50664, 639, 14564, 1412, 1487, 562, 291, 3677, 294, 264, 499, 811, 6405, 293, 291, 536, 264, 1378, 295, 341, 14564, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11565678006126767, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.03730210289359093}, {"id": 459, "seek": 201000, "start": 2023.0, "end": 2028.0, "text": " You can create a ggplot command by doing this R code here.", "tokens": [51014, 509, 393, 1884, 257, 290, 70, 564, 310, 5622, 538, 884, 341, 497, 3089, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11565678006126767, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.03730210289359093}, {"id": 460, "seek": 201000, "start": 2028.0, "end": 2038.0, "text": " And just like with the Jupyter Notebook, we're using Python, we see inline plotting so that all of the workflow is in the same really nice way", "tokens": [51264, 400, 445, 411, 365, 264, 22125, 88, 391, 11633, 2939, 11, 321, 434, 1228, 15329, 11, 321, 536, 294, 1889, 41178, 370, 300, 439, 295, 264, 20993, 307, 294, 264, 912, 534, 1481, 636, 51764], "temperature": 0.0, "avg_logprob": -0.11565678006126767, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.03730210289359093}, {"id": 461, "seek": 203800, "start": 2038.0, "end": 2045.0, "text": " where you can do this piecemeal exploring by looking at a single piece of R code in the output.", "tokens": [50364, 689, 291, 393, 360, 341, 2522, 32914, 12736, 538, 1237, 412, 257, 2167, 2522, 295, 497, 3089, 294, 264, 5598, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 462, "seek": 203800, "start": 2045.0, "end": 2047.0, "text": " Let's close and save this.", "tokens": [50714, 961, 311, 1998, 293, 3155, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 463, "seek": 203800, "start": 2047.0, "end": 2051.0, "text": " And now let's open up this Rpy2 example.", "tokens": [50814, 400, 586, 718, 311, 1269, 493, 341, 497, 8200, 17, 1365, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 464, "seek": 203800, "start": 2051.0, "end": 2058.0, "text": " We are now running again a Python 2 kernel and we're actually using the Jupyter R environment.", "tokens": [51014, 492, 366, 586, 2614, 797, 257, 15329, 568, 28256, 293, 321, 434, 767, 1228, 264, 22125, 88, 391, 497, 2823, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 465, "seek": 203800, "start": 2058.0, "end": 2062.0, "text": " So Jupyter R environment can run Python and it can run R itself.", "tokens": [51364, 407, 22125, 88, 391, 497, 2823, 393, 1190, 15329, 293, 309, 393, 1190, 497, 2564, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 466, "seek": 203800, "start": 2062.0, "end": 2065.0, "text": " It's running either one depending on what you started the notebook as.", "tokens": [51564, 467, 311, 2614, 2139, 472, 5413, 322, 437, 291, 1409, 264, 21060, 382, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 467, "seek": 203800, "start": 2065.0, "end": 2067.0, "text": " So we're running this one as a Python notebook.", "tokens": [51714, 407, 321, 434, 2614, 341, 472, 382, 257, 15329, 21060, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07775018174769514, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.020956432446837425}, {"id": 468, "seek": 206700, "start": 2067.0, "end": 2071.0, "text": " But here's a really nice feature of the Jupyter Notebook.", "tokens": [50364, 583, 510, 311, 257, 534, 1481, 4111, 295, 264, 22125, 88, 391, 11633, 2939, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10779061718521832, "compression_ratio": 1.55, "no_speech_prob": 0.01743628829717636}, {"id": 469, "seek": 206700, "start": 2071.0, "end": 2076.0, "text": " You can intermingle Python code and R code in the same notebook.", "tokens": [50564, 509, 393, 728, 2810, 306, 15329, 3089, 293, 497, 3089, 294, 264, 912, 21060, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10779061718521832, "compression_ratio": 1.55, "no_speech_prob": 0.01743628829717636}, {"id": 470, "seek": 206700, "start": 2076.0, "end": 2078.0, "text": " I'll show you how this works.", "tokens": [50814, 286, 603, 855, 291, 577, 341, 1985, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10779061718521832, "compression_ratio": 1.55, "no_speech_prob": 0.01743628829717636}, {"id": 471, "seek": 206700, "start": 2078.0, "end": 2080.0, "text": " So the top here importing numpy as NP.", "tokens": [50914, 407, 264, 1192, 510, 43866, 1031, 8200, 382, 38611, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10779061718521832, "compression_ratio": 1.55, "no_speech_prob": 0.01743628829717636}, {"id": 472, "seek": 206700, "start": 2080.0, "end": 2086.0, "text": " So again, just Python code, we're creating X and Y where X is this a range.", "tokens": [51014, 407, 797, 11, 445, 15329, 3089, 11, 321, 434, 4084, 1783, 293, 398, 689, 1783, 307, 341, 257, 3613, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10779061718521832, "compression_ratio": 1.55, "no_speech_prob": 0.01743628829717636}, {"id": 473, "seek": 206700, "start": 2086.0, "end": 2093.0, "text": " Let's just look at what X is an array from zero to nine and Y is some random number plus the X variable.", "tokens": [51314, 961, 311, 445, 574, 412, 437, 1783, 307, 364, 10225, 490, 4018, 281, 4949, 293, 398, 307, 512, 4974, 1230, 1804, 264, 1783, 7006, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10779061718521832, "compression_ratio": 1.55, "no_speech_prob": 0.01743628829717636}, {"id": 474, "seek": 209300, "start": 2093.0, "end": 2099.0, "text": " We import this library Rpy2 and load this extension Rpy2.ipython.", "tokens": [50364, 492, 974, 341, 6405, 497, 8200, 17, 293, 3677, 341, 10320, 497, 8200, 17, 13, 647, 88, 11943, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09422288957189341, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.013218613341450691}, {"id": 475, "seek": 209300, "start": 2099.0, "end": 2105.0, "text": " So we load it by doing this percent magic percent load extension Rpy2.ipython.", "tokens": [50664, 407, 321, 3677, 309, 538, 884, 341, 3043, 5585, 3043, 3677, 10320, 497, 8200, 17, 13, 647, 88, 11943, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09422288957189341, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.013218613341450691}, {"id": 476, "seek": 209300, "start": 2105.0, "end": 2108.0, "text": " And you can do this in a cell that has other code.", "tokens": [50964, 400, 291, 393, 360, 341, 294, 257, 2815, 300, 575, 661, 3089, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09422288957189341, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.013218613341450691}, {"id": 477, "seek": 209300, "start": 2108.0, "end": 2110.0, "text": " You don't have to make this a single cell.", "tokens": [51114, 509, 500, 380, 362, 281, 652, 341, 257, 2167, 2815, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09422288957189341, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.013218613341450691}, {"id": 478, "seek": 209300, "start": 2110.0, "end": 2117.0, "text": " Just wrote it five plus five just so you can see that we've loaded in an extension and we have this other code running as well.", "tokens": [51214, 1449, 4114, 309, 1732, 1804, 1732, 445, 370, 291, 393, 536, 300, 321, 600, 13210, 294, 364, 10320, 293, 321, 362, 341, 661, 3089, 2614, 382, 731, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09422288957189341, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.013218613341450691}, {"id": 479, "seek": 209300, "start": 2117.0, "end": 2122.0, "text": " So we have these two numpy arrays, a capital X and a capital Y.", "tokens": [51564, 407, 321, 362, 613, 732, 1031, 8200, 41011, 11, 257, 4238, 1783, 293, 257, 4238, 398, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09422288957189341, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.013218613341450691}, {"id": 480, "seek": 212200, "start": 2122.0, "end": 2128.0, "text": " If we would actually like to do some analysis in R and then push something back into Python,", "tokens": [50364, 759, 321, 576, 767, 411, 281, 360, 512, 5215, 294, 497, 293, 550, 2944, 746, 646, 666, 15329, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07700479132497412, "compression_ratio": 1.6870503597122302, "no_speech_prob": 0.008059375919401646}, {"id": 481, "seek": 212200, "start": 2128.0, "end": 2131.0, "text": " we do that by now doing a thing called a cell magic.", "tokens": [50664, 321, 360, 300, 538, 586, 884, 257, 551, 1219, 257, 2815, 5585, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07700479132497412, "compression_ratio": 1.6870503597122302, "no_speech_prob": 0.008059375919401646}, {"id": 482, "seek": 212200, "start": 2131.0, "end": 2136.0, "text": " So cell magics are known by having a double percent sign at the very beginning of a cell.", "tokens": [50814, 407, 2815, 2258, 1167, 366, 2570, 538, 1419, 257, 3834, 3043, 1465, 412, 264, 588, 2863, 295, 257, 2815, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07700479132497412, "compression_ratio": 1.6870503597122302, "no_speech_prob": 0.008059375919401646}, {"id": 483, "seek": 212200, "start": 2136.0, "end": 2141.0, "text": " That means that this top line is a special thing that in this case we're having it.", "tokens": [51064, 663, 1355, 300, 341, 1192, 1622, 307, 257, 2121, 551, 300, 294, 341, 1389, 321, 434, 1419, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07700479132497412, "compression_ratio": 1.6870503597122302, "no_speech_prob": 0.008059375919401646}, {"id": 484, "seek": 212200, "start": 2141.0, "end": 2143.0, "text": " There's HTML and bash and various other options.", "tokens": [51314, 821, 311, 17995, 293, 46183, 293, 3683, 661, 3956, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07700479132497412, "compression_ratio": 1.6870503597122302, "no_speech_prob": 0.008059375919401646}, {"id": 485, "seek": 212200, "start": 2143.0, "end": 2150.0, "text": " We are using the R option and we are sending in with this input X and Y from the Python environment.", "tokens": [51414, 492, 366, 1228, 264, 497, 3614, 293, 321, 366, 7750, 294, 365, 341, 4846, 1783, 293, 398, 490, 264, 15329, 2823, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07700479132497412, "compression_ratio": 1.6870503597122302, "no_speech_prob": 0.008059375919401646}, {"id": 486, "seek": 215000, "start": 2150.0, "end": 2158.0, "text": " So we are sending to R the two numpy arrays and we would like to get back from R this thing called XY coefficient.", "tokens": [50364, 407, 321, 366, 7750, 281, 497, 264, 732, 1031, 8200, 41011, 293, 321, 576, 411, 281, 483, 646, 490, 497, 341, 551, 1219, 48826, 17619, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09139647628321793, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.034085482358932495}, {"id": 487, "seek": 215000, "start": 2158.0, "end": 2161.0, "text": " Everything else in this cell is R code.", "tokens": [50764, 5471, 1646, 294, 341, 2815, 307, 497, 3089, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09139647628321793, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.034085482358932495}, {"id": 488, "seek": 215000, "start": 2161.0, "end": 2166.0, "text": " So XYLM is equal to linear model of Y goes as X.", "tokens": [50914, 407, 48826, 43, 44, 307, 2681, 281, 8213, 2316, 295, 398, 1709, 382, 1783, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09139647628321793, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.034085482358932495}, {"id": 489, "seek": 215000, "start": 2166.0, "end": 2174.0, "text": " XY coefficient which we will be returning back to Python after this cell completes is the coefficients of this model.", "tokens": [51164, 48826, 17619, 597, 321, 486, 312, 12678, 646, 281, 15329, 934, 341, 2815, 36362, 307, 264, 31994, 295, 341, 2316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09139647628321793, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.034085482358932495}, {"id": 490, "seek": 215000, "start": 2174.0, "end": 2177.0, "text": " We're going to print the summary and we're going to make a plot.", "tokens": [51564, 492, 434, 516, 281, 4482, 264, 12691, 293, 321, 434, 516, 281, 652, 257, 7542, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09139647628321793, "compression_ratio": 1.670995670995671, "no_speech_prob": 0.034085482358932495}, {"id": 491, "seek": 217700, "start": 2177.0, "end": 2185.0, "text": " So run that cell and we see the formula call here, the residual, some intercept and X coefficients.", "tokens": [50364, 407, 1190, 300, 2815, 293, 321, 536, 264, 8513, 818, 510, 11, 264, 27980, 11, 512, 24700, 293, 1783, 31994, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08738609949747721, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.025948908179998398}, {"id": 492, "seek": 217700, "start": 2185.0, "end": 2190.0, "text": " And we have some plots that are displayed in our Python notebook.", "tokens": [50764, 400, 321, 362, 512, 28609, 300, 366, 16372, 294, 527, 15329, 21060, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08738609949747721, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.025948908179998398}, {"id": 493, "seek": 217700, "start": 2190.0, "end": 2197.0, "text": " And again, we actually get our XY coefficient out back into our Python environment.", "tokens": [51014, 400, 797, 11, 321, 767, 483, 527, 48826, 17619, 484, 646, 666, 527, 15329, 2823, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08738609949747721, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.025948908179998398}, {"id": 494, "seek": 217700, "start": 2197.0, "end": 2205.0, "text": " So if you're a person who actually likes to use R just as much as you like to use Python or you like to use R for particular tasks", "tokens": [51364, 407, 498, 291, 434, 257, 954, 567, 767, 5902, 281, 764, 497, 445, 382, 709, 382, 291, 411, 281, 764, 15329, 420, 291, 411, 281, 764, 497, 337, 1729, 9608, 51764], "temperature": 0.0, "avg_logprob": -0.08738609949747721, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.025948908179998398}, {"id": 495, "seek": 220500, "start": 2205.0, "end": 2209.0, "text": " or you like to use Python for lots of it, the Jupyter notebook is very, very flexible.", "tokens": [50364, 420, 291, 411, 281, 764, 15329, 337, 3195, 295, 309, 11, 264, 22125, 88, 391, 21060, 307, 588, 11, 588, 11358, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05062763363707299, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.036748986691236496}, {"id": 496, "seek": 220500, "start": 2209.0, "end": 2217.0, "text": " It lets you work in whichever environment you prefer while dropping into the alternate Python or R environment to do just even a few pieces of it.", "tokens": [50564, 467, 6653, 291, 589, 294, 24123, 2823, 291, 4382, 1339, 13601, 666, 264, 18873, 15329, 420, 497, 2823, 281, 360, 445, 754, 257, 1326, 3755, 295, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05062763363707299, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.036748986691236496}, {"id": 497, "seek": 220500, "start": 2217.0, "end": 2222.0, "text": " So if you're in the middle of a long piece of data science analysis and you need one functionality from R,", "tokens": [50964, 407, 498, 291, 434, 294, 264, 2808, 295, 257, 938, 2522, 295, 1412, 3497, 5215, 293, 291, 643, 472, 14980, 490, 497, 11, 51214], "temperature": 0.0, "avg_logprob": -0.05062763363707299, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.036748986691236496}, {"id": 498, "seek": 220500, "start": 2222.0, "end": 2231.0, "text": " you can keep that not only in the notebook but passing it back and forth through native types.", "tokens": [51214, 291, 393, 1066, 300, 406, 787, 294, 264, 21060, 457, 8437, 309, 646, 293, 5220, 807, 8470, 3467, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05062763363707299, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.036748986691236496}, {"id": 499, "seek": 223100, "start": 2231.0, "end": 2236.0, "text": " In this video, we'll be doing a somewhat more advanced topic and it's definitely 100% optional.", "tokens": [50364, 682, 341, 960, 11, 321, 603, 312, 884, 257, 8344, 544, 7339, 4829, 293, 309, 311, 2138, 2319, 4, 17312, 13, 50614], "temperature": 0.0, "avg_logprob": -0.054094021863276415, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.16006536781787872}, {"id": 500, "seek": 223100, "start": 2236.0, "end": 2243.0, "text": " We'll be talking about how to get into the guts of the Jupyter notebook system itself and create a post save hook,", "tokens": [50614, 492, 603, 312, 1417, 466, 577, 281, 483, 666, 264, 28560, 295, 264, 22125, 88, 391, 21060, 1185, 2564, 293, 1884, 257, 2183, 3155, 6328, 11, 50964], "temperature": 0.0, "avg_logprob": -0.054094021863276415, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.16006536781787872}, {"id": 501, "seek": 223100, "start": 2243.0, "end": 2251.0, "text": " which will, for our purposes, save a script and an HTML file version of our Jupyter notebooks themselves.", "tokens": [50964, 597, 486, 11, 337, 527, 9932, 11, 3155, 257, 5755, 293, 364, 17995, 3991, 3037, 295, 527, 22125, 88, 391, 43782, 2969, 13, 51364], "temperature": 0.0, "avg_logprob": -0.054094021863276415, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.16006536781787872}, {"id": 502, "seek": 223100, "start": 2251.0, "end": 2252.0, "text": " So how do we do this?", "tokens": [51364, 407, 577, 360, 321, 360, 341, 30, 51414], "temperature": 0.0, "avg_logprob": -0.054094021863276415, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.16006536781787872}, {"id": 503, "seek": 223100, "start": 2252.0, "end": 2257.0, "text": " The first step is to actually create a notebook configuration file.", "tokens": [51414, 440, 700, 1823, 307, 281, 767, 1884, 257, 21060, 11694, 3991, 13, 51664], "temperature": 0.0, "avg_logprob": -0.054094021863276415, "compression_ratio": 1.5615384615384615, "no_speech_prob": 0.16006536781787872}, {"id": 504, "seek": 225700, "start": 2257.0, "end": 2261.0, "text": " Now you can do that if you're interested in doing it in just your root environment", "tokens": [50364, 823, 291, 393, 360, 300, 498, 291, 434, 3102, 294, 884, 309, 294, 445, 428, 5593, 2823, 50564], "temperature": 0.0, "avg_logprob": -0.09179451352074033, "compression_ratio": 1.8047138047138047, "no_speech_prob": 0.05337778851389885}, {"id": 505, "seek": 225700, "start": 2261.0, "end": 2267.0, "text": " or having this behavior be copied everywhere you are actually working on anything to do with the Jupyter notebook.", "tokens": [50564, 420, 1419, 341, 5223, 312, 25365, 5315, 291, 366, 767, 1364, 322, 1340, 281, 360, 365, 264, 22125, 88, 391, 21060, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09179451352074033, "compression_ratio": 1.8047138047138047, "no_speech_prob": 0.05337778851389885}, {"id": 506, "seek": 225700, "start": 2267.0, "end": 2273.0, "text": " Just go ahead and run Jupyter notebook generate config and I will copy and paste this into the terminal.", "tokens": [50864, 1449, 352, 2286, 293, 1190, 22125, 88, 391, 21060, 8460, 6662, 293, 286, 486, 5055, 293, 9163, 341, 666, 264, 14709, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09179451352074033, "compression_ratio": 1.8047138047138047, "no_speech_prob": 0.05337778851389885}, {"id": 507, "seek": 225700, "start": 2273.0, "end": 2275.0, "text": " So you can see what it looks like when you run this.", "tokens": [51164, 407, 291, 393, 536, 437, 309, 1542, 411, 562, 291, 1190, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09179451352074033, "compression_ratio": 1.8047138047138047, "no_speech_prob": 0.05337778851389885}, {"id": 508, "seek": 225700, "start": 2275.0, "end": 2283.0, "text": " The key takeaway here is this writing default config to now this should be your home directory dot Jupyter slash", "tokens": [51264, 440, 2141, 30681, 510, 307, 341, 3579, 7576, 6662, 281, 586, 341, 820, 312, 428, 1280, 21120, 5893, 22125, 88, 391, 17330, 51664], "temperature": 0.0, "avg_logprob": -0.09179451352074033, "compression_ratio": 1.8047138047138047, "no_speech_prob": 0.05337778851389885}, {"id": 509, "seek": 225700, "start": 2283.0, "end": 2286.0, "text": " and then it's going to be this file called Jupyter notebook config.", "tokens": [51664, 293, 550, 309, 311, 516, 281, 312, 341, 3991, 1219, 22125, 88, 391, 21060, 6662, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09179451352074033, "compression_ratio": 1.8047138047138047, "no_speech_prob": 0.05337778851389885}, {"id": 510, "seek": 228600, "start": 2286.0, "end": 2291.0, "text": " There's another way you can do this if you want to make this for a specific type of analysis.", "tokens": [50364, 821, 311, 1071, 636, 291, 393, 360, 341, 498, 291, 528, 281, 652, 341, 337, 257, 2685, 2010, 295, 5215, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 511, "seek": 228600, "start": 2291.0, "end": 2294.0, "text": " So maybe only the analysis you do involving housing data.", "tokens": [50614, 407, 1310, 787, 264, 5215, 291, 360, 17030, 6849, 1412, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 512, "seek": 228600, "start": 2294.0, "end": 2297.0, "text": " Do you want to have a special behavior happen?", "tokens": [50764, 1144, 291, 528, 281, 362, 257, 2121, 5223, 1051, 30, 50914], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 513, "seek": 228600, "start": 2297.0, "end": 2299.0, "text": " You can do that in a somewhat roundabout way.", "tokens": [50914, 509, 393, 360, 300, 294, 257, 8344, 3098, 21970, 636, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 514, "seek": 228600, "start": 2299.0, "end": 2302.0, "text": " You set this Jupyter config directory.", "tokens": [51014, 509, 992, 341, 22125, 88, 391, 6662, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 515, "seek": 228600, "start": 2302.0, "end": 2306.0, "text": " It's an environment variable and set that to be a thing that doesn't exist yet.", "tokens": [51164, 467, 311, 364, 2823, 7006, 293, 992, 300, 281, 312, 257, 551, 300, 1177, 380, 2514, 1939, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 516, "seek": 228600, "start": 2306.0, "end": 2311.0, "text": " A home directory so tilde slash dot Jupyter save.", "tokens": [51364, 316, 1280, 21120, 370, 45046, 17330, 5893, 22125, 88, 391, 3155, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 517, "seek": 228600, "start": 2311.0, "end": 2315.0, "text": " You run a command that starts like this and then you generate the config.", "tokens": [51614, 509, 1190, 257, 5622, 300, 3719, 411, 341, 293, 550, 291, 8460, 264, 6662, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08701361846923829, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.010649271309375763}, {"id": 518, "seek": 231500, "start": 2315.0, "end": 2317.0, "text": " So I will show you what this looks like.", "tokens": [50364, 407, 286, 486, 855, 291, 437, 341, 1542, 411, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11219852311270577, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0012841068673878908}, {"id": 519, "seek": 231500, "start": 2317.0, "end": 2321.0, "text": " So it wrote the default configuration file to dot Jupyter underscore save,", "tokens": [50464, 407, 309, 4114, 264, 7576, 11694, 3991, 281, 5893, 22125, 88, 391, 37556, 3155, 11, 50664], "temperature": 0.0, "avg_logprob": -0.11219852311270577, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0012841068673878908}, {"id": 520, "seek": 231500, "start": 2321.0, "end": 2327.0, "text": " which is the name of this profile and then the same Jupyter notebook config file.", "tokens": [50664, 597, 307, 264, 1315, 295, 341, 7964, 293, 550, 264, 912, 22125, 88, 391, 21060, 6662, 3991, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11219852311270577, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0012841068673878908}, {"id": 521, "seek": 231500, "start": 2327.0, "end": 2335.0, "text": " Now, running it in this way, you have Jupyter and configure before you do the actual command sets it as a temporary environment variable,", "tokens": [50964, 823, 11, 2614, 309, 294, 341, 636, 11, 291, 362, 22125, 88, 391, 293, 22162, 949, 291, 360, 264, 3539, 5622, 6352, 309, 382, 257, 13413, 2823, 7006, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11219852311270577, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0012841068673878908}, {"id": 522, "seek": 231500, "start": 2335.0, "end": 2338.0, "text": " meaning it's only set for that one command.", "tokens": [51364, 3620, 309, 311, 787, 992, 337, 300, 472, 5622, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11219852311270577, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0012841068673878908}, {"id": 523, "seek": 231500, "start": 2338.0, "end": 2341.0, "text": " If I try to echo this, I won't have anything stored in it.", "tokens": [51514, 759, 286, 853, 281, 14300, 341, 11, 286, 1582, 380, 362, 1340, 12187, 294, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11219852311270577, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0012841068673878908}, {"id": 524, "seek": 234100, "start": 2341.0, "end": 2344.0, "text": " So I'm not exporting this as an environment variable.", "tokens": [50364, 407, 286, 478, 406, 44686, 341, 382, 364, 2823, 7006, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07351673917567476, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.03513539955019951}, {"id": 525, "seek": 234100, "start": 2344.0, "end": 2352.0, "text": " Now, I have a bit of code here that I'm going to actually toggle this header and this toolbar just to give us a little bit of extra space.", "tokens": [50514, 823, 11, 286, 362, 257, 857, 295, 3089, 510, 300, 286, 478, 516, 281, 767, 31225, 341, 23117, 293, 341, 47715, 445, 281, 976, 505, 257, 707, 857, 295, 2857, 1901, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07351673917567476, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.03513539955019951}, {"id": 526, "seek": 234100, "start": 2352.0, "end": 2359.0, "text": " I have some code here that I would like you to add to your Jupyter config profile file.", "tokens": [50914, 286, 362, 512, 3089, 510, 300, 286, 576, 411, 291, 281, 909, 281, 428, 22125, 88, 391, 6662, 7964, 3991, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07351673917567476, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.03513539955019951}, {"id": 527, "seek": 234100, "start": 2359.0, "end": 2364.0, "text": " So this Jupyter notebook config dot pi and instead of trying to type it off the screen,", "tokens": [51264, 407, 341, 22125, 88, 391, 21060, 6662, 5893, 3895, 293, 2602, 295, 1382, 281, 2010, 309, 766, 264, 2568, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07351673917567476, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.03513539955019951}, {"id": 528, "seek": 236400, "start": 2364.0, "end": 2374.0, "text": " you can actually access it by typing HTTP colon slash slash b i t dot l y so bit dot l y and then Jupyter underscore profile.", "tokens": [50364, 291, 393, 767, 2105, 309, 538, 18444, 33283, 8255, 17330, 17330, 272, 741, 256, 5893, 287, 288, 370, 857, 5893, 287, 288, 293, 550, 22125, 88, 391, 37556, 7964, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09153311961405985, "compression_ratio": 1.7377049180327868, "no_speech_prob": 0.6182527542114258}, {"id": 529, "seek": 236400, "start": 2374.0, "end": 2380.0, "text": " You click on that, you will go to the same exact code I have that I typed out here.", "tokens": [50864, 509, 2052, 322, 300, 11, 291, 486, 352, 281, 264, 912, 1900, 3089, 286, 362, 300, 286, 33941, 484, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09153311961405985, "compression_ratio": 1.7377049180327868, "no_speech_prob": 0.6182527542114258}, {"id": 530, "seek": 236400, "start": 2380.0, "end": 2387.0, "text": " In this case, I will actually copy this code and we're going to open up the file that we would like to modify.", "tokens": [51164, 682, 341, 1389, 11, 286, 486, 767, 5055, 341, 3089, 293, 321, 434, 516, 281, 1269, 493, 264, 3991, 300, 321, 576, 411, 281, 16927, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09153311961405985, "compression_ratio": 1.7377049180327868, "no_speech_prob": 0.6182527542114258}, {"id": 531, "seek": 236400, "start": 2387.0, "end": 2393.0, "text": " So in this case, we're going to be modifying this Jupyter save underscore Jupyter notebook config file.", "tokens": [51514, 407, 294, 341, 1389, 11, 321, 434, 516, 281, 312, 42626, 341, 22125, 88, 391, 3155, 37556, 22125, 88, 391, 21060, 6662, 3991, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09153311961405985, "compression_ratio": 1.7377049180327868, "no_speech_prob": 0.6182527542114258}, {"id": 532, "seek": 239300, "start": 2393.0, "end": 2398.0, "text": " You can do with any text editor, I'm going to use sublime text, so sublime text open it up.", "tokens": [50364, 509, 393, 360, 365, 604, 2487, 9839, 11, 286, 478, 516, 281, 764, 1422, 40941, 2487, 11, 370, 1422, 40941, 2487, 1269, 309, 493, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09774353924919577, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.026744885370135307}, {"id": 533, "seek": 239300, "start": 2398.0, "end": 2400.0, "text": " Now, here's what the file looks like.", "tokens": [50614, 823, 11, 510, 311, 437, 264, 3991, 1542, 411, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09774353924919577, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.026744885370135307}, {"id": 534, "seek": 239300, "start": 2400.0, "end": 2407.0, "text": " It's actually a whole lot of things you can do to modify the behavior of your Jupyter notebook and they're almost all commented out.", "tokens": [50714, 467, 311, 767, 257, 1379, 688, 295, 721, 291, 393, 360, 281, 16927, 264, 5223, 295, 428, 22125, 88, 391, 21060, 293, 436, 434, 1920, 439, 26940, 484, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09774353924919577, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.026744885370135307}, {"id": 535, "seek": 239300, "start": 2407.0, "end": 2411.0, "text": " So you can read through this if you want to actually make different changes than what I'm going to recommend.", "tokens": [51064, 407, 291, 393, 1401, 807, 341, 498, 291, 528, 281, 767, 652, 819, 2962, 813, 437, 286, 478, 516, 281, 2748, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09774353924919577, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.026744885370135307}, {"id": 536, "seek": 239300, "start": 2411.0, "end": 2417.0, "text": " But this is where we post just at the top this code, just a brief overview what's happening.", "tokens": [51264, 583, 341, 307, 689, 321, 2183, 445, 412, 264, 1192, 341, 3089, 11, 445, 257, 5353, 12492, 437, 311, 2737, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09774353924919577, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.026744885370135307}, {"id": 537, "seek": 241700, "start": 2417.0, "end": 2424.0, "text": " It defines a function called post save, and it basically grabs the path of the notebook that's currently running,", "tokens": [50364, 467, 23122, 257, 2445, 1219, 2183, 3155, 11, 293, 309, 1936, 30028, 264, 3100, 295, 264, 21060, 300, 311, 4362, 2614, 11, 50714], "temperature": 0.0, "avg_logprob": -0.12724185200919091, "compression_ratio": 1.7250996015936255, "no_speech_prob": 0.7846930027008057}, {"id": 538, "seek": 241700, "start": 2424.0, "end": 2429.0, "text": " and it actually tries to run this command ipython nb convert to script,", "tokens": [50714, 293, 309, 767, 9898, 281, 1190, 341, 5622, 28501, 88, 11943, 297, 65, 7620, 281, 5755, 11, 50964], "temperature": 0.0, "avg_logprob": -0.12724185200919091, "compression_ratio": 1.7250996015936255, "no_speech_prob": 0.7846930027008057}, {"id": 539, "seek": 241700, "start": 2429.0, "end": 2435.0, "text": " which means it's going to be a .py file if it's a Python file or a .r file if it's a r notebook,", "tokens": [50964, 597, 1355, 309, 311, 516, 281, 312, 257, 2411, 8200, 3991, 498, 309, 311, 257, 15329, 3991, 420, 257, 2411, 81, 3991, 498, 309, 311, 257, 367, 21060, 11, 51264], "temperature": 0.0, "avg_logprob": -0.12724185200919091, "compression_ratio": 1.7250996015936255, "no_speech_prob": 0.7846930027008057}, {"id": 540, "seek": 241700, "start": 2435.0, "end": 2440.0, "text": " and an HTML file, which means that it'll just be the rendered HTML version of it.", "tokens": [51264, 293, 364, 17995, 3991, 11, 597, 1355, 300, 309, 603, 445, 312, 264, 28748, 17995, 3037, 295, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12724185200919091, "compression_ratio": 1.7250996015936255, "no_speech_prob": 0.7846930027008057}, {"id": 541, "seek": 241700, "start": 2440.0, "end": 2445.0, "text": " And the C dot file contents manager post save hook equals post save.", "tokens": [51514, 400, 264, 383, 5893, 3991, 15768, 6598, 2183, 3155, 6328, 6915, 2183, 3155, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12724185200919091, "compression_ratio": 1.7250996015936255, "no_speech_prob": 0.7846930027008057}, {"id": 542, "seek": 244500, "start": 2445.0, "end": 2452.0, "text": " So this is a way that Jupyter developers have allowed a person to make changes after every save that they do.", "tokens": [50364, 407, 341, 307, 257, 636, 300, 22125, 88, 391, 8849, 362, 4350, 257, 954, 281, 652, 2962, 934, 633, 3155, 300, 436, 360, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 543, "seek": 244500, "start": 2452.0, "end": 2457.0, "text": " So let's save that, and let's go back to our notebook.", "tokens": [50714, 407, 718, 311, 3155, 300, 11, 293, 718, 311, 352, 646, 281, 527, 21060, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 544, "seek": 244500, "start": 2457.0, "end": 2459.0, "text": " So let's list what's in this directory.", "tokens": [50964, 407, 718, 311, 1329, 437, 311, 294, 341, 21120, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 545, "seek": 244500, "start": 2459.0, "end": 2465.0, "text": " We see the name of this current notebook is autosave other formats.", "tokens": [51064, 492, 536, 264, 1315, 295, 341, 2190, 21060, 307, 1476, 329, 946, 661, 25879, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 546, "seek": 244500, "start": 2465.0, "end": 2467.0, "text": " I'm going to toggle that away again.", "tokens": [51364, 286, 478, 516, 281, 31225, 300, 1314, 797, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 547, "seek": 244500, "start": 2467.0, "end": 2469.0, "text": " So we see it here when I type ls.", "tokens": [51464, 407, 321, 536, 309, 510, 562, 286, 2010, 287, 82, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 548, "seek": 244500, "start": 2469.0, "end": 2474.0, "text": " We can also do exclamation mark ls to do a command like this.", "tokens": [51564, 492, 393, 611, 360, 1624, 43233, 1491, 287, 82, 281, 360, 257, 5622, 411, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08221898407771669, "compression_ratio": 1.6598360655737705, "no_speech_prob": 0.006487012375146151}, {"id": 549, "seek": 247400, "start": 2474.0, "end": 2478.0, "text": " And we see that when we save this, we see a checkpoint is created,", "tokens": [50364, 400, 321, 536, 300, 562, 321, 3155, 341, 11, 321, 536, 257, 42269, 307, 2942, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07693476195729107, "compression_ratio": 1.8026905829596414, "no_speech_prob": 0.0015975960996001959}, {"id": 550, "seek": 247400, "start": 2478.0, "end": 2481.0, "text": " but no other new files are being created.", "tokens": [50564, 457, 572, 661, 777, 7098, 366, 885, 2942, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07693476195729107, "compression_ratio": 1.8026905829596414, "no_speech_prob": 0.0015975960996001959}, {"id": 551, "seek": 247400, "start": 2481.0, "end": 2488.0, "text": " If we would like to see what happens when we run Jupyter notebook with this new Jupyter save configuration file,", "tokens": [50714, 759, 321, 576, 411, 281, 536, 437, 2314, 562, 321, 1190, 22125, 88, 391, 21060, 365, 341, 777, 22125, 88, 391, 3155, 11694, 3991, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07693476195729107, "compression_ratio": 1.8026905829596414, "no_speech_prob": 0.0015975960996001959}, {"id": 552, "seek": 247400, "start": 2488.0, "end": 2490.0, "text": " we'll have to run a command that looks like this.", "tokens": [51064, 321, 603, 362, 281, 1190, 257, 5622, 300, 1542, 411, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07693476195729107, "compression_ratio": 1.8026905829596414, "no_speech_prob": 0.0015975960996001959}, {"id": 553, "seek": 247400, "start": 2490.0, "end": 2494.0, "text": " Jupyterconfigure equals this with Jupyter notebook.", "tokens": [51164, 22125, 88, 391, 1671, 20646, 540, 6915, 341, 365, 22125, 88, 391, 21060, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07693476195729107, "compression_ratio": 1.8026905829596414, "no_speech_prob": 0.0015975960996001959}, {"id": 554, "seek": 247400, "start": 2494.0, "end": 2500.0, "text": " And in this case, I would actually like to save this entire thing as an alias,", "tokens": [51364, 400, 294, 341, 1389, 11, 286, 576, 767, 411, 281, 3155, 341, 2302, 551, 382, 364, 419, 4609, 11, 51664], "temperature": 0.0, "avg_logprob": -0.07693476195729107, "compression_ratio": 1.8026905829596414, "no_speech_prob": 0.0015975960996001959}, {"id": 555, "seek": 250000, "start": 2500.0, "end": 2505.0, "text": " and then you can add this to your bash RC, or you can simply run this in a single line on your terminal.", "tokens": [50364, 293, 550, 291, 393, 909, 341, 281, 428, 46183, 28987, 11, 420, 291, 393, 2935, 1190, 341, 294, 257, 2167, 1622, 322, 428, 14709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08579198051901425, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.06950394809246063}, {"id": 556, "seek": 250000, "start": 2505.0, "end": 2509.0, "text": " If you just want it in your terminal, however, it will not set it as a thing.", "tokens": [50614, 759, 291, 445, 528, 309, 294, 428, 14709, 11, 4461, 11, 309, 486, 406, 992, 309, 382, 257, 551, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08579198051901425, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.06950394809246063}, {"id": 557, "seek": 250000, "start": 2509.0, "end": 2513.0, "text": " So if you restart your computer or open up a new terminal, typing Jupyter save won't work.", "tokens": [50814, 407, 498, 291, 21022, 428, 3820, 420, 1269, 493, 257, 777, 14709, 11, 18444, 22125, 88, 391, 3155, 1582, 380, 589, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08579198051901425, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.06950394809246063}, {"id": 558, "seek": 250000, "start": 2513.0, "end": 2519.0, "text": " If you add this to your dot bash RC, then this special way of opening Jupyter notebook will be saved.", "tokens": [51014, 759, 291, 909, 341, 281, 428, 5893, 46183, 28987, 11, 550, 341, 2121, 636, 295, 5193, 22125, 88, 391, 21060, 486, 312, 6624, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08579198051901425, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.06950394809246063}, {"id": 559, "seek": 250000, "start": 2519.0, "end": 2527.0, "text": " So let's close this current notebook and let's type Jupyter save.", "tokens": [51314, 407, 718, 311, 1998, 341, 2190, 21060, 293, 718, 311, 2010, 22125, 88, 391, 3155, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08579198051901425, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.06950394809246063}, {"id": 560, "seek": 252700, "start": 2528.0, "end": 2531.0, "text": " And let's reopen it again in this new way.", "tokens": [50414, 400, 718, 311, 33861, 309, 797, 294, 341, 777, 636, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 561, "seek": 252700, "start": 2531.0, "end": 2533.0, "text": " So we just opened it up.", "tokens": [50564, 407, 321, 445, 5625, 309, 493, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 562, "seek": 252700, "start": 2533.0, "end": 2536.0, "text": " The list function down here should show us what we saw before.", "tokens": [50664, 440, 1329, 2445, 760, 510, 820, 855, 505, 437, 321, 1866, 949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 563, "seek": 252700, "start": 2536.0, "end": 2539.0, "text": " So we see the same files in this directory.", "tokens": [50814, 407, 321, 536, 264, 912, 7098, 294, 341, 21120, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 564, "seek": 252700, "start": 2539.0, "end": 2543.0, "text": " When I click save, if our post save hook worked correctly,", "tokens": [50964, 1133, 286, 2052, 3155, 11, 498, 527, 2183, 3155, 6328, 2732, 8944, 11, 51164], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 565, "seek": 252700, "start": 2543.0, "end": 2549.0, "text": " we will see autosaveotherformats.py and autosaveotherformats.html.", "tokens": [51164, 321, 486, 536, 1476, 329, 946, 802, 837, 1720, 13, 8200, 293, 1476, 329, 946, 802, 837, 1720, 13, 357, 15480, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 566, "seek": 252700, "start": 2549.0, "end": 2554.0, "text": " So I'm going to do that after I click save type ls again.", "tokens": [51464, 407, 286, 478, 516, 281, 360, 300, 934, 286, 2052, 3155, 2010, 287, 82, 797, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0990341239505344, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.005909793544560671}, {"id": 567, "seek": 255400, "start": 2554.0, "end": 2557.0, "text": " And we see that we do have two other forms.", "tokens": [50364, 400, 321, 536, 300, 321, 360, 362, 732, 661, 6422, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 568, "seek": 255400, "start": 2557.0, "end": 2559.0, "text": " I have html and .py.", "tokens": [50514, 286, 362, 276, 83, 15480, 293, 2411, 8200, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 569, "seek": 255400, "start": 2559.0, "end": 2563.0, "text": " Just to show you what those html and py versions look like, let's open that up.", "tokens": [50614, 1449, 281, 855, 291, 437, 729, 276, 83, 15480, 293, 10664, 9606, 574, 411, 11, 718, 311, 1269, 300, 493, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 570, "seek": 255400, "start": 2563.0, "end": 2565.0, "text": " Oh, one last note.", "tokens": [50814, 876, 11, 472, 1036, 3637, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 571, "seek": 255400, "start": 2565.0, "end": 2568.0, "text": " Every time you hit save, it will overwrite the same file a bunch of times.", "tokens": [50914, 2048, 565, 291, 2045, 3155, 11, 309, 486, 670, 21561, 264, 912, 3991, 257, 3840, 295, 1413, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 572, "seek": 255400, "start": 2568.0, "end": 2570.0, "text": " So it's not going to create new versions of this.", "tokens": [51064, 407, 309, 311, 406, 516, 281, 1884, 777, 9606, 295, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 573, "seek": 255400, "start": 2570.0, "end": 2576.0, "text": " It's going to just continually overwrite this and always keep the .html and the .py files completely up to date.", "tokens": [51164, 467, 311, 516, 281, 445, 22277, 670, 21561, 341, 293, 1009, 1066, 264, 2411, 357, 15480, 293, 264, 2411, 8200, 7098, 2584, 493, 281, 4002, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 574, "seek": 255400, "start": 2576.0, "end": 2578.0, "text": " Let's look at one of these html files actually looks like.", "tokens": [51464, 961, 311, 574, 412, 472, 295, 613, 276, 83, 15480, 7098, 767, 1542, 411, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 575, "seek": 255400, "start": 2578.0, "end": 2581.0, "text": " So let's go back to the terminal to open a new one.", "tokens": [51564, 407, 718, 311, 352, 646, 281, 264, 14709, 281, 1269, 257, 777, 472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09321434246866327, "compression_ratio": 1.78397212543554, "no_speech_prob": 0.006386661436408758}, {"id": 576, "seek": 258100, "start": 2581.0, "end": 2588.0, "text": " So by typing open autosaveotherformats.html, we actually have the fully rendered notebook here.", "tokens": [50364, 407, 538, 18444, 1269, 1476, 329, 946, 802, 837, 1720, 13, 357, 15480, 11, 321, 767, 362, 264, 4498, 28748, 21060, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 577, "seek": 258100, "start": 2588.0, "end": 2591.0, "text": " So what we see here is what we saw on the other page.", "tokens": [50714, 407, 437, 321, 536, 510, 307, 437, 321, 1866, 322, 264, 661, 3028, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 578, "seek": 258100, "start": 2591.0, "end": 2593.0, "text": " And this is now the html version of this.", "tokens": [50864, 400, 341, 307, 586, 264, 276, 83, 15480, 3037, 295, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 579, "seek": 258100, "start": 2593.0, "end": 2595.0, "text": " This can be emailed somewhere.", "tokens": [50964, 639, 393, 312, 45460, 4079, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 580, "seek": 258100, "start": 2595.0, "end": 2598.0, "text": " This can be posted online somewhere and people can see this.", "tokens": [51064, 639, 393, 312, 9437, 2950, 4079, 293, 561, 393, 536, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 581, "seek": 258100, "start": 2598.0, "end": 2606.0, "text": " Now the links work like you'd expect and the code is all formatted and looks like it looks in the notebook.", "tokens": [51214, 823, 264, 6123, 589, 411, 291, 1116, 2066, 293, 264, 3089, 307, 439, 1254, 32509, 293, 1542, 411, 309, 1542, 294, 264, 21060, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 582, "seek": 258100, "start": 2606.0, "end": 2609.0, "text": " But since it's just an html file and it's not an actual notebook running,", "tokens": [51614, 583, 1670, 309, 311, 445, 364, 276, 83, 15480, 3991, 293, 309, 311, 406, 364, 3539, 21060, 2614, 11, 51764], "temperature": 0.0, "avg_logprob": -0.0711525281270345, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.006096873432397842}, {"id": 583, "seek": 260900, "start": 2609.0, "end": 2612.0, "text": " none of these cells are actually computable.", "tokens": [50364, 6022, 295, 613, 5438, 366, 767, 2807, 712, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0524125489321622, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.01427248865365982}, {"id": 584, "seek": 260900, "start": 2612.0, "end": 2614.0, "text": " I can't actually rerun these cells.", "tokens": [50514, 286, 393, 380, 767, 43819, 409, 613, 5438, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0524125489321622, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.01427248865365982}, {"id": 585, "seek": 260900, "start": 2614.0, "end": 2627.0, "text": " So now we have a way of creating a post-save hook that lets us save out automatically html and script versions of any notebook that you're saving.", "tokens": [50614, 407, 586, 321, 362, 257, 636, 295, 4084, 257, 2183, 12, 82, 946, 6328, 300, 6653, 505, 3155, 484, 6772, 276, 83, 15480, 293, 5755, 9606, 295, 604, 21060, 300, 291, 434, 6816, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0524125489321622, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.01427248865365982}, {"id": 586, "seek": 260900, "start": 2627.0, "end": 2633.0, "text": " If you would like to commit this to your GitHub repository for fellow members of the team to review in different ways,", "tokens": [51264, 759, 291, 576, 411, 281, 5599, 341, 281, 428, 23331, 25841, 337, 7177, 2679, 295, 264, 1469, 281, 3131, 294, 819, 2098, 11, 51564], "temperature": 0.0, "avg_logprob": -0.0524125489321622, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.01427248865365982}, {"id": 587, "seek": 260900, "start": 2633.0, "end": 2638.0, "text": " then having a post-save hook like this can save you tons of time and keep everything up to date.", "tokens": [51564, 550, 1419, 257, 2183, 12, 82, 946, 6328, 411, 341, 393, 3155, 291, 9131, 295, 565, 293, 1066, 1203, 493, 281, 4002, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0524125489321622, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.01427248865365982}, {"id": 588, "seek": 263800, "start": 2639.0, "end": 2644.0, "text": " In this video, we'll be talking about a really fun topic called widgets.", "tokens": [50414, 682, 341, 960, 11, 321, 603, 312, 1417, 466, 257, 534, 1019, 4829, 1219, 43355, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10347052543394027, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.01449514739215374}, {"id": 589, "seek": 263800, "start": 2644.0, "end": 2651.0, "text": " Widgets is an entire aspect of the Jupyter Notebook ecosystem that lets you do interactive things with the notebook.", "tokens": [50664, 28331, 16284, 307, 364, 2302, 4171, 295, 264, 22125, 88, 391, 11633, 2939, 11311, 300, 6653, 291, 360, 15141, 721, 365, 264, 21060, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10347052543394027, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.01449514739215374}, {"id": 590, "seek": 263800, "start": 2651.0, "end": 2653.0, "text": " Let's go over to the notebook.", "tokens": [51014, 961, 311, 352, 670, 281, 264, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10347052543394027, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.01449514739215374}, {"id": 591, "seek": 263800, "start": 2653.0, "end": 2658.0, "text": " This top cell has various imports, matplotlib, numpy, and so forth.", "tokens": [51114, 639, 1192, 2815, 575, 3683, 41596, 11, 3803, 564, 310, 38270, 11, 1031, 8200, 11, 293, 370, 5220, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10347052543394027, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.01449514739215374}, {"id": 592, "seek": 263800, "start": 2658.0, "end": 2662.0, "text": " This last line in this cell actually imports the ipython widgets.", "tokens": [51364, 639, 1036, 1622, 294, 341, 2815, 767, 41596, 264, 28501, 88, 11943, 43355, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10347052543394027, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.01449514739215374}, {"id": 593, "seek": 266200, "start": 2662.0, "end": 2670.0, "text": " And we're going to import a number of sliders, a float slider, the integer slider, a toggle button, and this interactive thing as well.", "tokens": [50364, 400, 321, 434, 516, 281, 974, 257, 1230, 295, 1061, 6936, 11, 257, 15706, 26046, 11, 264, 24922, 26046, 11, 257, 31225, 2960, 11, 293, 341, 15141, 551, 382, 731, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10345776875813802, "compression_ratio": 1.5451127819548873, "no_speech_prob": 0.008443789556622505}, {"id": 594, "seek": 266200, "start": 2670.0, "end": 2673.0, "text": " So let's execute that by typing shift enter.", "tokens": [50764, 407, 718, 311, 14483, 300, 538, 18444, 5513, 3242, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10345776875813802, "compression_ratio": 1.5451127819548873, "no_speech_prob": 0.008443789556622505}, {"id": 595, "seek": 266200, "start": 2673.0, "end": 2675.0, "text": " Now this next cell contains a simple formula.", "tokens": [50914, 823, 341, 958, 2815, 8306, 257, 2199, 8513, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10345776875813802, "compression_ratio": 1.5451127819548873, "no_speech_prob": 0.008443789556622505}, {"id": 596, "seek": 266200, "start": 2675.0, "end": 2678.0, "text": " We define a Python function named polynomial.", "tokens": [51014, 492, 6964, 257, 15329, 2445, 4926, 26110, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10345776875813802, "compression_ratio": 1.5451127819548873, "no_speech_prob": 0.008443789556622505}, {"id": 597, "seek": 266200, "start": 2678.0, "end": 2686.0, "text": " It takes three arguments, which has default values, so slope of 2.0 and intercept of 5 and show points, which can be either true or false.", "tokens": [51164, 467, 2516, 1045, 12869, 11, 597, 575, 7576, 4190, 11, 370, 13525, 295, 568, 13, 15, 293, 24700, 295, 1025, 293, 855, 2793, 11, 597, 393, 312, 2139, 2074, 420, 7908, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10345776875813802, "compression_ratio": 1.5451127819548873, "no_speech_prob": 0.008443789556622505}, {"id": 598, "seek": 268600, "start": 2686.0, "end": 2692.0, "text": " We're going to create some x values, which is just a linear spacing from negative 10 to 10 using 50 points.", "tokens": [50364, 492, 434, 516, 281, 1884, 512, 2031, 4190, 11, 597, 307, 445, 257, 8213, 27739, 490, 3671, 1266, 281, 1266, 1228, 2625, 2793, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0727684435637101, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.03903067111968994}, {"id": 599, "seek": 268600, "start": 2692.0, "end": 2697.0, "text": " We're having a y value, which is just the slope times x plus the intercept.", "tokens": [50664, 492, 434, 1419, 257, 288, 2158, 11, 597, 307, 445, 264, 13525, 1413, 2031, 1804, 264, 24700, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0727684435637101, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.03903067111968994}, {"id": 600, "seek": 268600, "start": 2697.0, "end": 2701.0, "text": " Everything else in this function is actually going to be plotting something.", "tokens": [50914, 5471, 1646, 294, 341, 2445, 307, 767, 516, 281, 312, 41178, 746, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0727684435637101, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.03903067111968994}, {"id": 601, "seek": 268600, "start": 2701.0, "end": 2704.0, "text": " So this tells us the figure size we're going to use.", "tokens": [51114, 407, 341, 5112, 505, 264, 2573, 2744, 321, 434, 516, 281, 764, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0727684435637101, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.03903067111968994}, {"id": 602, "seek": 268600, "start": 2704.0, "end": 2707.0, "text": " The next line tells you that we're going to actually use a figure.", "tokens": [51264, 440, 958, 1622, 5112, 291, 300, 321, 434, 516, 281, 767, 764, 257, 2573, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0727684435637101, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.03903067111968994}, {"id": 603, "seek": 268600, "start": 2707.0, "end": 2712.0, "text": " The next two lines actually talk about whether or not the show points is true or false.", "tokens": [51414, 440, 958, 732, 3876, 767, 751, 466, 1968, 420, 406, 264, 855, 2793, 307, 2074, 420, 7908, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0727684435637101, "compression_ratio": 1.813953488372093, "no_speech_prob": 0.03903067111968994}, {"id": 604, "seek": 271200, "start": 2712.0, "end": 2721.0, "text": " If it says show points, we'll see what this actually does in a second, but it'll add the actual data points we are plotting up when we define this x at the top line here.", "tokens": [50364, 759, 309, 1619, 855, 2793, 11, 321, 603, 536, 437, 341, 767, 775, 294, 257, 1150, 11, 457, 309, 603, 909, 264, 3539, 1412, 2793, 321, 366, 41178, 493, 562, 321, 6964, 341, 2031, 412, 264, 1192, 1622, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06404590606689453, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.01168553251773119}, {"id": 605, "seek": 271200, "start": 2721.0, "end": 2727.0, "text": " Finally, we plot x and y and we set some window parameters and give ourselves some axes.", "tokens": [50814, 6288, 11, 321, 7542, 2031, 293, 288, 293, 321, 992, 512, 4910, 9834, 293, 976, 4175, 512, 35387, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06404590606689453, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.01168553251773119}, {"id": 606, "seek": 271200, "start": 2727.0, "end": 2730.0, "text": " The last thing we do is add this tight layout call at the very bottom.", "tokens": [51114, 440, 1036, 551, 321, 360, 307, 909, 341, 4524, 13333, 818, 412, 264, 588, 2767, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06404590606689453, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.01168553251773119}, {"id": 607, "seek": 271200, "start": 2730.0, "end": 2735.0, "text": " This just helps clean up the map plotlib plots before they're finally ready.", "tokens": [51264, 639, 445, 3665, 2541, 493, 264, 4471, 7542, 38270, 28609, 949, 436, 434, 2721, 1919, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06404590606689453, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.01168553251773119}, {"id": 608, "seek": 271200, "start": 2735.0, "end": 2739.0, "text": " So after executing this cell, we now have defined polynomial.", "tokens": [51514, 407, 934, 32368, 341, 2815, 11, 321, 586, 362, 7642, 26110, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06404590606689453, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.01168553251773119}, {"id": 609, "seek": 271200, "start": 2739.0, "end": 2741.0, "text": " Let's scroll down to this next cell.", "tokens": [51714, 961, 311, 11369, 760, 281, 341, 958, 2815, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06404590606689453, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.01168553251773119}, {"id": 610, "seek": 274100, "start": 2741.0, "end": 2744.0, "text": " I'm defining a thing called a slope slider.", "tokens": [50364, 286, 478, 17827, 257, 551, 1219, 257, 13525, 26046, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08659843098033558, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.005728689022362232}, {"id": 611, "seek": 274100, "start": 2744.0, "end": 2748.0, "text": " This slope slider is called a float slider, which means it can actually take float values.", "tokens": [50514, 639, 13525, 26046, 307, 1219, 257, 15706, 26046, 11, 597, 1355, 309, 393, 767, 747, 15706, 4190, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08659843098033558, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.005728689022362232}, {"id": 612, "seek": 274100, "start": 2748.0, "end": 2750.0, "text": " That's what it's actually sweeping across.", "tokens": [50714, 663, 311, 437, 309, 311, 767, 33285, 2108, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08659843098033558, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.005728689022362232}, {"id": 613, "seek": 274100, "start": 2750.0, "end": 2754.0, "text": " The value is 2.0, meaning that that's the starting value for the slope.", "tokens": [50814, 440, 2158, 307, 568, 13, 15, 11, 3620, 300, 300, 311, 264, 2891, 2158, 337, 264, 13525, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08659843098033558, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.005728689022362232}, {"id": 614, "seek": 274100, "start": 2754.0, "end": 2761.0, "text": " Let's actually start this at minus 10 at the maximum of plus 10 and step size of, oh, let's say 1.0.", "tokens": [51014, 961, 311, 767, 722, 341, 412, 3175, 1266, 412, 264, 6674, 295, 1804, 1266, 293, 1823, 2744, 295, 11, 1954, 11, 718, 311, 584, 502, 13, 15, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08659843098033558, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.005728689022362232}, {"id": 615, "seek": 274100, "start": 2761.0, "end": 2766.0, "text": " The next line defines this object called w, which is interactive.", "tokens": [51364, 440, 958, 1622, 23122, 341, 2657, 1219, 261, 11, 597, 307, 15141, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08659843098033558, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.005728689022362232}, {"id": 616, "seek": 276600, "start": 2766.0, "end": 2771.0, "text": " The first argument you give interactive is actually the function that you want to be interacting with.", "tokens": [50364, 440, 700, 6770, 291, 976, 15141, 307, 767, 264, 2445, 300, 291, 528, 281, 312, 18017, 365, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05993299561787427, "compression_ratio": 1.8741007194244603, "no_speech_prob": 0.06749747693538666}, {"id": 617, "seek": 276600, "start": 2771.0, "end": 2777.0, "text": " In this case, the function we just defined polynomial and any other widgets that need to be connected to it.", "tokens": [50614, 682, 341, 1389, 11, 264, 2445, 321, 445, 7642, 26110, 293, 604, 661, 43355, 300, 643, 281, 312, 4582, 281, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05993299561787427, "compression_ratio": 1.8741007194244603, "no_speech_prob": 0.06749747693538666}, {"id": 618, "seek": 276600, "start": 2777.0, "end": 2785.0, "text": " So in this case, we're going to connect the slope parameter that's given to the polynomial function to the slope slider.", "tokens": [50914, 407, 294, 341, 1389, 11, 321, 434, 516, 281, 1745, 264, 13525, 13075, 300, 311, 2212, 281, 264, 26110, 2445, 281, 264, 13525, 26046, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05993299561787427, "compression_ratio": 1.8741007194244603, "no_speech_prob": 0.06749747693538666}, {"id": 619, "seek": 276600, "start": 2785.0, "end": 2788.0, "text": " Now we call it slope slider, which is because we want to have a descriptive name.", "tokens": [51314, 823, 321, 818, 309, 13525, 26046, 11, 597, 307, 570, 321, 528, 281, 362, 257, 42585, 1315, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05993299561787427, "compression_ratio": 1.8741007194244603, "no_speech_prob": 0.06749747693538666}, {"id": 620, "seek": 276600, "start": 2788.0, "end": 2790.0, "text": " You can name it anything you want.", "tokens": [51464, 509, 393, 1315, 309, 1340, 291, 528, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05993299561787427, "compression_ratio": 1.8741007194244603, "no_speech_prob": 0.06749747693538666}, {"id": 621, "seek": 276600, "start": 2790.0, "end": 2794.0, "text": " The last thing we do is actually execute this w. Let's see what we see.", "tokens": [51564, 440, 1036, 551, 321, 360, 307, 767, 14483, 341, 261, 13, 961, 311, 536, 437, 321, 536, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05993299561787427, "compression_ratio": 1.8741007194244603, "no_speech_prob": 0.06749747693538666}, {"id": 622, "seek": 279400, "start": 2794.0, "end": 2801.0, "text": " We see three widgets that we can interact with, the slope, the intercept, and show points, which is toggle.", "tokens": [50364, 492, 536, 1045, 43355, 300, 321, 393, 4648, 365, 11, 264, 13525, 11, 264, 24700, 11, 293, 855, 2793, 11, 597, 307, 31225, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08005559227683327, "compression_ratio": 1.8047808764940239, "no_speech_prob": 0.004198242444545031}, {"id": 623, "seek": 279400, "start": 2801.0, "end": 2807.0, "text": " Let's scroll down and I'm going to actually hide this toolbar so we have a little extra space.", "tokens": [50714, 961, 311, 11369, 760, 293, 286, 478, 516, 281, 767, 6479, 341, 47715, 370, 321, 362, 257, 707, 2857, 1901, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08005559227683327, "compression_ratio": 1.8047808764940239, "no_speech_prob": 0.004198242444545031}, {"id": 624, "seek": 279400, "start": 2807.0, "end": 2814.0, "text": " We have the slope, which is 2, and now you can actually click and drag this to different values.", "tokens": [51014, 492, 362, 264, 13525, 11, 597, 307, 568, 11, 293, 586, 291, 393, 767, 2052, 293, 5286, 341, 281, 819, 4190, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08005559227683327, "compression_ratio": 1.8047808764940239, "no_speech_prob": 0.004198242444545031}, {"id": 625, "seek": 279400, "start": 2814.0, "end": 2823.0, "text": " As you drag it to the right, you're increasing the slope and we can see that it's actually correspondingly increasing the slope of that line in the plot.", "tokens": [51364, 1018, 291, 5286, 309, 281, 264, 558, 11, 291, 434, 5662, 264, 13525, 293, 321, 393, 536, 300, 309, 311, 767, 11760, 356, 5662, 264, 13525, 295, 300, 1622, 294, 264, 7542, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08005559227683327, "compression_ratio": 1.8047808764940239, "no_speech_prob": 0.004198242444545031}, {"id": 626, "seek": 282300, "start": 2823.0, "end": 2826.0, "text": " We can also move the intercept point up and down.", "tokens": [50364, 492, 393, 611, 1286, 264, 24700, 935, 493, 293, 760, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1268678591089341, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00970606692135334}, {"id": 627, "seek": 282300, "start": 2826.0, "end": 2832.0, "text": " And as we know, an intercept just changes the y-positioning, shifting these things linearly up and down.", "tokens": [50514, 400, 382, 321, 458, 11, 364, 24700, 445, 2962, 264, 288, 12, 38078, 278, 11, 17573, 613, 721, 43586, 493, 293, 760, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1268678591089341, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00970606692135334}, {"id": 628, "seek": 282300, "start": 2832.0, "end": 2837.0, "text": " And of course, the last thing is to toggle on and off show points.", "tokens": [50814, 400, 295, 1164, 11, 264, 1036, 551, 307, 281, 31225, 322, 293, 766, 855, 2793, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1268678591089341, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00970606692135334}, {"id": 629, "seek": 282300, "start": 2837.0, "end": 2844.0, "text": " If you want to change this, we can actually make this much more sensitive by saying let's make the minimum minus 100, the maximum plus 100,", "tokens": [51064, 759, 291, 528, 281, 1319, 341, 11, 321, 393, 767, 652, 341, 709, 544, 9477, 538, 1566, 718, 311, 652, 264, 7285, 3175, 2319, 11, 264, 6674, 1804, 2319, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1268678591089341, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00970606692135334}, {"id": 630, "seek": 282300, "start": 2844.0, "end": 2847.0, "text": " step size of, oh, let's say five.", "tokens": [51414, 1823, 2744, 295, 11, 1954, 11, 718, 311, 584, 1732, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1268678591089341, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00970606692135334}, {"id": 631, "seek": 284700, "start": 2847.0, "end": 2855.0, "text": " Now, as we change the slope, it should be much more sensitive than it is because we're now at slope of 75.", "tokens": [50364, 823, 11, 382, 321, 1319, 264, 13525, 11, 309, 820, 312, 709, 544, 9477, 813, 309, 307, 570, 321, 434, 586, 412, 13525, 295, 9562, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08562497112238518, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.19670149683952332}, {"id": 632, "seek": 284700, "start": 2855.0, "end": 2858.0, "text": " And as we go negative, we can see that as well.", "tokens": [50764, 400, 382, 321, 352, 3671, 11, 321, 393, 536, 300, 382, 731, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08562497112238518, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.19670149683952332}, {"id": 633, "seek": 284700, "start": 2858.0, "end": 2865.0, "text": " So as you can tell, having this kind of functionality at your fingertips is actually incredibly useful during all phases of doing a data science project,", "tokens": [50914, 407, 382, 291, 393, 980, 11, 1419, 341, 733, 295, 14980, 412, 428, 27715, 307, 767, 6252, 4420, 1830, 439, 18764, 295, 884, 257, 1412, 3497, 1716, 11, 51264], "temperature": 0.0, "avg_logprob": -0.08562497112238518, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.19670149683952332}, {"id": 634, "seek": 284700, "start": 2865.0, "end": 2868.0, "text": " especially during the exploratory data analysis stage.", "tokens": [51264, 2318, 1830, 264, 24765, 4745, 1412, 5215, 3233, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08562497112238518, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.19670149683952332}, {"id": 635, "seek": 284700, "start": 2868.0, "end": 2873.0, "text": " So you can imagine if you did something like k-means to look at your data.", "tokens": [51414, 407, 291, 393, 3811, 498, 291, 630, 746, 411, 350, 12, 1398, 599, 281, 574, 412, 428, 1412, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08562497112238518, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.19670149683952332}, {"id": 636, "seek": 287300, "start": 2873.0, "end": 2877.0, "text": " You can set k, the number of clusters you're fitting for, the number of centroids.", "tokens": [50364, 509, 393, 992, 350, 11, 264, 1230, 295, 23313, 291, 434, 15669, 337, 11, 264, 1230, 295, 24607, 3742, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06800925824069237, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.14022457599639893}, {"id": 637, "seek": 287300, "start": 2877.0, "end": 2887.0, "text": " And as you can move that back and forth with the integer slider, for example, you can see how well the algorithm is actually clustering on that number of centroids.", "tokens": [50564, 400, 382, 291, 393, 1286, 300, 646, 293, 5220, 365, 264, 24922, 26046, 11, 337, 1365, 11, 291, 393, 536, 577, 731, 264, 9284, 307, 767, 596, 48673, 322, 300, 1230, 295, 24607, 3742, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06800925824069237, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.14022457599639893}, {"id": 638, "seek": 287300, "start": 2887.0, "end": 2892.0, "text": " So being able to do that in an interactive way can speed things up quite a bit, and it's really nice.", "tokens": [51064, 407, 885, 1075, 281, 360, 300, 294, 364, 15141, 636, 393, 3073, 721, 493, 1596, 257, 857, 11, 293, 309, 311, 534, 1481, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06800925824069237, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.14022457599639893}, {"id": 639, "seek": 287300, "start": 2892.0, "end": 2895.0, "text": " So this is a somewhat simple example that I just showed.", "tokens": [51314, 407, 341, 307, 257, 8344, 2199, 1365, 300, 286, 445, 4712, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06800925824069237, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.14022457599639893}, {"id": 640, "seek": 287300, "start": 2895.0, "end": 2902.0, "text": " Here is a much more complicated example, but just to give you a sense of what is possible with this kind of a thing.", "tokens": [51464, 1692, 307, 257, 709, 544, 6179, 1365, 11, 457, 445, 281, 976, 291, 257, 2020, 295, 437, 307, 1944, 365, 341, 733, 295, 257, 551, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06800925824069237, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.14022457599639893}, {"id": 641, "seek": 290200, "start": 2902.0, "end": 2908.0, "text": " So I'm not expecting you to actually read this and understand the code that goes behind it, but let's just execute this real fast.", "tokens": [50364, 407, 286, 478, 406, 9650, 291, 281, 767, 1401, 341, 293, 1223, 264, 3089, 300, 1709, 2261, 309, 11, 457, 718, 311, 445, 14483, 341, 957, 2370, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06799907405881116, "compression_ratio": 1.780564263322884, "no_speech_prob": 0.01797536388039589}, {"id": 642, "seek": 290200, "start": 2908.0, "end": 2915.0, "text": " This is one of the projects I was working on just on my own, where I want to actually have some random points in a small area,", "tokens": [50664, 639, 307, 472, 295, 264, 4455, 286, 390, 1364, 322, 445, 322, 452, 1065, 11, 689, 286, 528, 281, 767, 362, 512, 4974, 2793, 294, 257, 1359, 1859, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06799907405881116, "compression_ratio": 1.780564263322884, "no_speech_prob": 0.01797536388039589}, {"id": 643, "seek": 290200, "start": 2915.0, "end": 2922.0, "text": " and I would like to interpolate with a spline interpolate those random points, and I wanted to see what that looked like at the end.", "tokens": [51014, 293, 286, 576, 411, 281, 44902, 473, 365, 257, 4732, 533, 44902, 473, 729, 4974, 2793, 11, 293, 286, 1415, 281, 536, 437, 300, 2956, 411, 412, 264, 917, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06799907405881116, "compression_ratio": 1.780564263322884, "no_speech_prob": 0.01797536388039589}, {"id": 644, "seek": 290200, "start": 2922.0, "end": 2927.0, "text": " So I can say the number of points that I'm randomly generating and splining between.", "tokens": [51364, 407, 286, 393, 584, 264, 1230, 295, 2793, 300, 286, 478, 16979, 17746, 293, 4732, 1760, 1296, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06799907405881116, "compression_ratio": 1.780564263322884, "no_speech_prob": 0.01797536388039589}, {"id": 645, "seek": 290200, "start": 2927.0, "end": 2931.0, "text": " And as I slide this to the right, you can see the pattern becomes more and more complicated.", "tokens": [51614, 400, 382, 286, 4137, 341, 281, 264, 558, 11, 291, 393, 536, 264, 5102, 3643, 544, 293, 544, 6179, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06799907405881116, "compression_ratio": 1.780564263322884, "no_speech_prob": 0.01797536388039589}, {"id": 646, "seek": 293100, "start": 2931.0, "end": 2935.0, "text": " And as I slide this to the left, we get much simpler shapes.", "tokens": [50364, 400, 382, 286, 4137, 341, 281, 264, 1411, 11, 321, 483, 709, 18587, 10854, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06480000730146442, "compression_ratio": 1.7109375, "no_speech_prob": 0.024408763274550438}, {"id": 647, "seek": 293100, "start": 2935.0, "end": 2941.0, "text": " We also have a smoothing parameter here, which can give you a smoothing factor to these kind of more complicated shapes.", "tokens": [50564, 492, 611, 362, 257, 899, 6259, 571, 13075, 510, 11, 597, 393, 976, 291, 257, 899, 6259, 571, 5952, 281, 613, 733, 295, 544, 6179, 10854, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06480000730146442, "compression_ratio": 1.7109375, "no_speech_prob": 0.024408763274550438}, {"id": 648, "seek": 293100, "start": 2941.0, "end": 2949.0, "text": " It sort of unwinds the and rewinds up the knots and the alpha value, for example, like how dark this is.", "tokens": [50864, 467, 1333, 295, 517, 12199, 82, 264, 293, 41458, 82, 493, 264, 27426, 293, 264, 8961, 2158, 11, 337, 1365, 11, 411, 577, 2877, 341, 307, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06480000730146442, "compression_ratio": 1.7109375, "no_speech_prob": 0.024408763274550438}, {"id": 649, "seek": 293100, "start": 2949.0, "end": 2957.0, "text": " Or if I want to have a slight jitter to each of these strokes, I can add the number of brush strokes and then increase or decrease the jitter for this.", "tokens": [51264, 1610, 498, 286, 528, 281, 362, 257, 4036, 361, 3904, 281, 1184, 295, 613, 24493, 11, 286, 393, 909, 264, 1230, 295, 5287, 24493, 293, 550, 3488, 420, 11514, 264, 361, 3904, 337, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06480000730146442, "compression_ratio": 1.7109375, "no_speech_prob": 0.024408763274550438}, {"id": 650, "seek": 295700, "start": 2957.0, "end": 2966.0, "text": " So obviously there's a lot going on here, but this is one aspect that shows you just how, first of all, how quickly this can refresh, but also how useful it is.", "tokens": [50364, 407, 2745, 456, 311, 257, 688, 516, 322, 510, 11, 457, 341, 307, 472, 4171, 300, 3110, 291, 445, 577, 11, 700, 295, 439, 11, 577, 2661, 341, 393, 15134, 11, 457, 611, 577, 4420, 309, 307, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07823575584633836, "compression_ratio": 1.64453125, "no_speech_prob": 0.030651777982711792}, {"id": 651, "seek": 295700, "start": 2966.0, "end": 2979.0, "text": " In this video, we saw how we can use interactive capabilities of the Jupyter Notebook to help us plot and look at data and change the values by sliding sliders around.", "tokens": [50814, 682, 341, 960, 11, 321, 1866, 577, 321, 393, 764, 15141, 10862, 295, 264, 22125, 88, 391, 11633, 2939, 281, 854, 505, 7542, 293, 574, 412, 1412, 293, 1319, 264, 4190, 538, 21169, 1061, 6936, 926, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07823575584633836, "compression_ratio": 1.64453125, "no_speech_prob": 0.030651777982711792}, {"id": 652, "seek": 295700, "start": 2979.0, "end": 2984.0, "text": " In this video, I'll be talking about some bleeding edge developments in the Jupyter project.", "tokens": [51464, 682, 341, 960, 11, 286, 603, 312, 1417, 466, 512, 19312, 4691, 20862, 294, 264, 22125, 88, 391, 1716, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07823575584633836, "compression_ratio": 1.64453125, "no_speech_prob": 0.030651777982711792}, {"id": 653, "seek": 298400, "start": 2984.0, "end": 2987.0, "text": " A specific thing called Jupyter Hub.", "tokens": [50364, 316, 2685, 551, 1219, 22125, 88, 391, 18986, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0857026051666777, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.2448679804801941}, {"id": 654, "seek": 298400, "start": 2987.0, "end": 2999.0, "text": " If we were to go to Google, let's just search for it by saying Jupyter, then HUB, the top link will be this GitHub repository, which is Jupyter slash Jupyter Hub.", "tokens": [50514, 759, 321, 645, 281, 352, 281, 3329, 11, 718, 311, 445, 3164, 337, 309, 538, 1566, 22125, 88, 391, 11, 550, 389, 23553, 11, 264, 1192, 2113, 486, 312, 341, 23331, 25841, 11, 597, 307, 22125, 88, 391, 17330, 22125, 88, 391, 18986, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0857026051666777, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.2448679804801941}, {"id": 655, "seek": 298400, "start": 2999.0, "end": 3004.0, "text": " And this allows, as it says, multi-user servers for Jupyter Notebooks.", "tokens": [51114, 400, 341, 4045, 11, 382, 309, 1619, 11, 4825, 12, 18088, 15909, 337, 22125, 88, 391, 11633, 15170, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0857026051666777, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.2448679804801941}, {"id": 656, "seek": 298400, "start": 3004.0, "end": 3013.0, "text": " In other words, if you have a server where there's data being held for a data science team, you can run a single instance of this thing called Jupyter Hub.", "tokens": [51364, 682, 661, 2283, 11, 498, 291, 362, 257, 7154, 689, 456, 311, 1412, 885, 5167, 337, 257, 1412, 3497, 1469, 11, 291, 393, 1190, 257, 2167, 5197, 295, 341, 551, 1219, 22125, 88, 391, 18986, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0857026051666777, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.2448679804801941}, {"id": 657, "seek": 301300, "start": 3013.0, "end": 3021.0, "text": " And it allows many different data scientists to log in and start a Jupyter Notebook on that server co-located with the data.", "tokens": [50364, 400, 309, 4045, 867, 819, 1412, 7708, 281, 3565, 294, 293, 722, 257, 22125, 88, 391, 11633, 2939, 322, 300, 7154, 598, 12, 5842, 770, 365, 264, 1412, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05557606238445253, "compression_ratio": 1.6865203761755485, "no_speech_prob": 0.009408977814018726}, {"id": 658, "seek": 301300, "start": 3021.0, "end": 3025.0, "text": " Now, this is an active development. It's changing on weekly time scales.", "tokens": [50764, 823, 11, 341, 307, 364, 4967, 3250, 13, 467, 311, 4473, 322, 12460, 565, 17408, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05557606238445253, "compression_ratio": 1.6865203761755485, "no_speech_prob": 0.009408977814018726}, {"id": 659, "seek": 301300, "start": 3025.0, "end": 3032.0, "text": " So if I were to actually show you how to set it up today, by the time you saw this video, it would probably be different from how you're supposed to be setting it up then.", "tokens": [50964, 407, 498, 286, 645, 281, 767, 855, 291, 577, 281, 992, 309, 493, 965, 11, 538, 264, 565, 291, 1866, 341, 960, 11, 309, 576, 1391, 312, 819, 490, 577, 291, 434, 3442, 281, 312, 3287, 309, 493, 550, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05557606238445253, "compression_ratio": 1.6865203761755485, "no_speech_prob": 0.009408977814018726}, {"id": 660, "seek": 301300, "start": 3032.0, "end": 3041.0, "text": " So for right now, I'll point you to this documentation and mention that it's actually very much bleeding edge, but I think it will be the future for data science teams.", "tokens": [51314, 407, 337, 558, 586, 11, 286, 603, 935, 291, 281, 341, 14333, 293, 2152, 300, 309, 311, 767, 588, 709, 19312, 4691, 11, 457, 286, 519, 309, 486, 312, 264, 2027, 337, 1412, 3497, 5491, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05557606238445253, "compression_ratio": 1.6865203761755485, "no_speech_prob": 0.009408977814018726}, {"id": 661, "seek": 304100, "start": 3041.0, "end": 3050.0, "text": " Just to give you a sense of what it looks like when you were to use Jupyter Hub, you can go to try.jupyter.org and hit Return.", "tokens": [50364, 1449, 281, 976, 291, 257, 2020, 295, 437, 309, 1542, 411, 562, 291, 645, 281, 764, 22125, 88, 391, 18986, 11, 291, 393, 352, 281, 853, 13, 73, 1010, 88, 391, 13, 4646, 293, 2045, 24350, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09697366179081432, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.0900219976902008}, {"id": 662, "seek": 304100, "start": 3050.0, "end": 3059.0, "text": " And what you're actually interfacing with here is a Jupyter Hub server somewhere in the back end, currently being hosted by Rackspace, apparently.", "tokens": [50814, 400, 437, 291, 434, 767, 14510, 5615, 365, 510, 307, 257, 22125, 88, 391, 18986, 7154, 4079, 294, 264, 646, 917, 11, 4362, 885, 19204, 538, 497, 501, 24824, 11, 7970, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09697366179081432, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.0900219976902008}, {"id": 663, "seek": 304100, "start": 3059.0, "end": 3069.0, "text": " And you can start a new notebook in any of these different styles, so Bash, Haskell, Julia, Python 2, or Python 3, R, Ruby, and Scala.", "tokens": [51264, 400, 291, 393, 722, 257, 777, 21060, 294, 604, 295, 613, 819, 13273, 11, 370, 43068, 11, 8646, 43723, 11, 18551, 11, 15329, 568, 11, 420, 15329, 805, 11, 497, 11, 19907, 11, 293, 2747, 5159, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09697366179081432, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.0900219976902008}, {"id": 664, "seek": 306900, "start": 3069.0, "end": 3076.0, "text": " So you can start a notebook here, and this is just letting you run a temporary quick one. You can also start one of these notebooks, like this Python one.", "tokens": [50364, 407, 291, 393, 722, 257, 21060, 510, 11, 293, 341, 307, 445, 8295, 291, 1190, 257, 13413, 1702, 472, 13, 509, 393, 611, 722, 472, 295, 613, 43782, 11, 411, 341, 15329, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0664669138784627, "compression_ratio": 1.6707692307692308, "no_speech_prob": 0.009705130010843277}, {"id": 665, "seek": 306900, "start": 3076.0, "end": 3082.0, "text": " And it starts with this warning. Don't rely on this server for anything you want to last. The server will be deleted after 10 minutes of inactivity.", "tokens": [50714, 400, 309, 3719, 365, 341, 9164, 13, 1468, 380, 10687, 322, 341, 7154, 337, 1340, 291, 528, 281, 1036, 13, 440, 7154, 486, 312, 22981, 934, 1266, 2077, 295, 294, 578, 4253, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0664669138784627, "compression_ratio": 1.6707692307692308, "no_speech_prob": 0.009705130010843277}, {"id": 666, "seek": 306900, "start": 3082.0, "end": 3095.0, "text": " So that's important. This is just a demonstration area, so it's not for long-term storage of some sort of data science analysis, but it gives you a flavor of what the Jupyter Hub will be doing if you were to install this for your own sake.", "tokens": [51014, 407, 300, 311, 1021, 13, 639, 307, 445, 257, 16520, 1859, 11, 370, 309, 311, 406, 337, 938, 12, 7039, 6725, 295, 512, 1333, 295, 1412, 3497, 5215, 11, 457, 309, 2709, 291, 257, 6813, 295, 437, 264, 22125, 88, 391, 18986, 486, 312, 884, 498, 291, 645, 281, 3625, 341, 337, 428, 1065, 9717, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0664669138784627, "compression_ratio": 1.6707692307692308, "no_speech_prob": 0.009705130010843277}, {"id": 667, "seek": 309500, "start": 3095.0, "end": 3102.0, "text": " Now you can actually run this Jupyter Python 3 notebook, and you can actually see the fun results that come out from this.", "tokens": [50364, 823, 291, 393, 767, 1190, 341, 22125, 88, 391, 15329, 805, 21060, 11, 293, 291, 393, 767, 536, 264, 1019, 3542, 300, 808, 484, 490, 341, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06836535590035575, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.08261169493198395}, {"id": 668, "seek": 309500, "start": 3102.0, "end": 3112.0, "text": " So we see some plots here, and everything works just like you expected to when you're running the Jupyter server locally, which is how all the videos I'm doing in this lesson are.", "tokens": [50714, 407, 321, 536, 512, 28609, 510, 11, 293, 1203, 1985, 445, 411, 291, 5176, 281, 562, 291, 434, 2614, 264, 22125, 88, 391, 7154, 16143, 11, 597, 307, 577, 439, 264, 2145, 286, 478, 884, 294, 341, 6898, 366, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06836535590035575, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.08261169493198395}, {"id": 669, "seek": 309500, "start": 3112.0, "end": 3120.0, "text": " Separating the server from the notebook aspect is that you can do something like this in the future, have the server being hosted on some server somewhere,", "tokens": [51214, 43480, 990, 264, 7154, 490, 264, 21060, 4171, 307, 300, 291, 393, 360, 746, 411, 341, 294, 264, 2027, 11, 362, 264, 7154, 885, 19204, 322, 512, 7154, 4079, 11, 51614], "temperature": 0.0, "avg_logprob": -0.06836535590035575, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.08261169493198395}, {"id": 670, "seek": 312000, "start": 3120.0, "end": 3127.0, "text": " and being able to access it just through the browser, and having the same exact functionality that I've been showing you for the entire course so far.", "tokens": [50364, 293, 885, 1075, 281, 2105, 309, 445, 807, 264, 11185, 11, 293, 1419, 264, 912, 1900, 14980, 300, 286, 600, 668, 4099, 291, 337, 264, 2302, 1164, 370, 1400, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08288802771732726, "compression_ratio": 1.6752767527675276, "no_speech_prob": 0.22251512110233307}, {"id": 671, "seek": 312000, "start": 3127.0, "end": 3134.0, "text": " And one last thing just to show you how fun this is, let's navigate back to our initials-try.jupyter thing.", "tokens": [50714, 400, 472, 1036, 551, 445, 281, 855, 291, 577, 1019, 341, 307, 11, 718, 311, 12350, 646, 281, 527, 5883, 82, 12, 83, 627, 13, 73, 1010, 88, 391, 551, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08288802771732726, "compression_ratio": 1.6752767527675276, "no_speech_prob": 0.22251512110233307}, {"id": 672, "seek": 312000, "start": 3134.0, "end": 3144.0, "text": " There's a couple other things you can do besides notebooks. This is true for the local server as well, but just to give you a sense of this, you can add a new folder, which is kind of unexciting.", "tokens": [51064, 821, 311, 257, 1916, 661, 721, 291, 393, 360, 11868, 43782, 13, 639, 307, 2074, 337, 264, 2654, 7154, 382, 731, 11, 457, 445, 281, 976, 291, 257, 2020, 295, 341, 11, 291, 393, 909, 257, 777, 10820, 11, 597, 307, 733, 295, 11572, 66, 1748, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08288802771732726, "compression_ratio": 1.6752767527675276, "no_speech_prob": 0.22251512110233307}, {"id": 673, "seek": 314400, "start": 3144.0, "end": 3154.0, "text": " You just have a new unentitled folder here. Then you can do this new text file. So if you click text file, instead of starting a new notebook, you're starting a new file.", "tokens": [50364, 509, 445, 362, 257, 777, 517, 317, 270, 1493, 10820, 510, 13, 1396, 291, 393, 360, 341, 777, 2487, 3991, 13, 407, 498, 291, 2052, 2487, 3991, 11, 2602, 295, 2891, 257, 777, 21060, 11, 291, 434, 2891, 257, 777, 3991, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08905999859174092, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.5035169124603271}, {"id": 674, "seek": 314400, "start": 3154.0, "end": 3160.0, "text": " And this is a lightweight in-browser text editor that has various options. You can choose what kind of key mapping you'd like.", "tokens": [50864, 400, 341, 307, 257, 22052, 294, 12, 1443, 30947, 2487, 9839, 300, 575, 3683, 3956, 13, 509, 393, 2826, 437, 733, 295, 2141, 18350, 291, 1116, 411, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08905999859174092, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.5035169124603271}, {"id": 675, "seek": 314400, "start": 3160.0, "end": 3167.0, "text": " So I prefer sublime text these days as ways of interfacing with your text editor.", "tokens": [51164, 407, 286, 4382, 1422, 40941, 2487, 613, 1708, 382, 2098, 295, 14510, 5615, 365, 428, 2487, 9839, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08905999859174092, "compression_ratio": 1.6550218340611353, "no_speech_prob": 0.5035169124603271}, {"id": 676, "seek": 316700, "start": 3167.0, "end": 3178.0, "text": " So from here, you can do your standard Python, and you can both create and edit Python scripts or any kind of text file that you want to that's located on the server.", "tokens": [50364, 407, 490, 510, 11, 291, 393, 360, 428, 3832, 15329, 11, 293, 291, 393, 1293, 1884, 293, 8129, 15329, 23294, 420, 604, 733, 295, 2487, 3991, 300, 291, 528, 281, 300, 311, 6870, 322, 264, 7154, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07889208463158938, "compression_ratio": 1.6733870967741935, "no_speech_prob": 0.1293274462223053}, {"id": 677, "seek": 316700, "start": 3178.0, "end": 3185.0, "text": " And of course, renaming the file is as simple as clicking this top thing, calling it startup.py, for example.", "tokens": [50914, 400, 295, 1164, 11, 8124, 5184, 264, 3991, 307, 382, 2199, 382, 9697, 341, 1192, 551, 11, 5141, 309, 18578, 13, 8200, 11, 337, 1365, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07889208463158938, "compression_ratio": 1.6733870967741935, "no_speech_prob": 0.1293274462223053}, {"id": 678, "seek": 316700, "start": 3185.0, "end": 3194.0, "text": " And once you do that, syntax highlighting gets turned on. You can save this and rename it, and then navigate back to the main server page.", "tokens": [51264, 400, 1564, 291, 360, 300, 11, 28431, 26551, 2170, 3574, 322, 13, 509, 393, 3155, 341, 293, 36741, 309, 11, 293, 550, 12350, 646, 281, 264, 2135, 7154, 3028, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07889208463158938, "compression_ratio": 1.6733870967741935, "no_speech_prob": 0.1293274462223053}, {"id": 679, "seek": 319400, "start": 3194.0, "end": 3199.0, "text": " And the last thing to show you is that you can also start a terminal.", "tokens": [50364, 400, 264, 1036, 551, 281, 855, 291, 307, 300, 291, 393, 611, 722, 257, 14709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12452768542102932, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.023680444806814194}, {"id": 680, "seek": 319400, "start": 3199.0, "end": 3205.0, "text": " And here you actually have the terminal for your tri-Jupiter. And this is the same case for if you're running this on a server.", "tokens": [50614, 400, 510, 291, 767, 362, 264, 14709, 337, 428, 1376, 12, 41, 1010, 1681, 13, 400, 341, 307, 264, 912, 1389, 337, 498, 291, 434, 2614, 341, 322, 257, 7154, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12452768542102932, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.023680444806814194}, {"id": 681, "seek": 319400, "start": 3205.0, "end": 3211.0, "text": " So you can actually have access to the terminal with all the functionality of a standard bash terminal there.", "tokens": [50914, 407, 291, 393, 767, 362, 2105, 281, 264, 14709, 365, 439, 264, 14980, 295, 257, 3832, 46183, 14709, 456, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12452768542102932, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.023680444806814194}, {"id": 682, "seek": 319400, "start": 3211.0, "end": 3216.0, "text": " So we see the startup thing we can copy that startup.py folder and call it something else.", "tokens": [51214, 407, 321, 536, 264, 18578, 551, 321, 393, 5055, 300, 18578, 13, 8200, 10820, 293, 818, 309, 746, 1646, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12452768542102932, "compression_ratio": 1.8009049773755657, "no_speech_prob": 0.023680444806814194}, {"id": 683, "seek": 321600, "start": 3216.0, "end": 3219.0, "text": " And going back, we should be able to see this.", "tokens": [50364, 400, 516, 646, 11, 321, 820, 312, 1075, 281, 536, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08720524197533017, "compression_ratio": 1.6513409961685823, "no_speech_prob": 0.5996326208114624}, {"id": 684, "seek": 321600, "start": 3219.0, "end": 3231.0, "text": " It's a very cool thing, and it will definitely be the way of the future if you have data science teams working and needing access to a single server somewhere that has the data in some database, for example.", "tokens": [50514, 467, 311, 257, 588, 1627, 551, 11, 293, 309, 486, 2138, 312, 264, 636, 295, 264, 2027, 498, 291, 362, 1412, 3497, 5491, 1364, 293, 18006, 2105, 281, 257, 2167, 7154, 4079, 300, 575, 264, 1412, 294, 512, 8149, 11, 337, 1365, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08720524197533017, "compression_ratio": 1.6513409961685823, "no_speech_prob": 0.5996326208114624}, {"id": 685, "seek": 321600, "start": 3231.0, "end": 3242.0, "text": " So Jupyter Hub, it will be the future. It is bleeding edge. So try it out. It should be pretty usable, but the exact instructions will be different from what I would say today.", "tokens": [51114, 407, 22125, 88, 391, 18986, 11, 309, 486, 312, 264, 2027, 13, 467, 307, 19312, 4691, 13, 407, 853, 309, 484, 13, 467, 820, 312, 1238, 29975, 11, 457, 264, 1900, 9415, 486, 312, 819, 490, 437, 286, 576, 584, 965, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08720524197533017, "compression_ratio": 1.6513409961685823, "no_speech_prob": 0.5996326208114624}, {"id": 686, "seek": 324200, "start": 3242.0, "end": 3249.0, "text": " In this lesson, we'll be taking a look at organizing the overall structure for a data science team to be working on their various projects.", "tokens": [50364, 682, 341, 6898, 11, 321, 603, 312, 1940, 257, 574, 412, 17608, 264, 4787, 3877, 337, 257, 1412, 3497, 1469, 281, 312, 1364, 322, 641, 3683, 4455, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08308344417148167, "compression_ratio": 1.6931407942238268, "no_speech_prob": 0.10799604654312134}, {"id": 687, "seek": 324200, "start": 3249.0, "end": 3254.0, "text": " So in this notebook, I'm going to use the slideshow button that we installed in a different video.", "tokens": [50714, 407, 294, 341, 21060, 11, 286, 478, 516, 281, 764, 264, 9788, 4286, 2960, 300, 321, 8899, 294, 257, 819, 960, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08308344417148167, "compression_ratio": 1.6931407942238268, "no_speech_prob": 0.10799604654312134}, {"id": 688, "seek": 324200, "start": 3254.0, "end": 3258.0, "text": " And I make this full screen by clicking shift command F.", "tokens": [50964, 400, 286, 652, 341, 1577, 2568, 538, 9697, 5513, 5622, 479, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08308344417148167, "compression_ratio": 1.6931407942238268, "no_speech_prob": 0.10799604654312134}, {"id": 689, "seek": 324200, "start": 3258.0, "end": 3264.0, "text": " The initial topic is questions to ask to organize the workflow of a data science team.", "tokens": [51164, 440, 5883, 4829, 307, 1651, 281, 1029, 281, 13859, 264, 20993, 295, 257, 1412, 3497, 1469, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08308344417148167, "compression_ratio": 1.6931407942238268, "no_speech_prob": 0.10799604654312134}, {"id": 690, "seek": 324200, "start": 3264.0, "end": 3269.0, "text": " So the first question is how many data scientists will be working on a single problem?", "tokens": [51464, 407, 264, 700, 1168, 307, 577, 867, 1412, 7708, 486, 312, 1364, 322, 257, 2167, 1154, 30, 51714], "temperature": 0.0, "avg_logprob": -0.08308344417148167, "compression_ratio": 1.6931407942238268, "no_speech_prob": 0.10799604654312134}, {"id": 691, "seek": 326900, "start": 3269.0, "end": 3276.0, "text": " And the high level view of this is to basically break this up into thinking about this in terms of Git repositories.", "tokens": [50364, 400, 264, 1090, 1496, 1910, 295, 341, 307, 281, 1936, 1821, 341, 493, 666, 1953, 466, 341, 294, 2115, 295, 16939, 22283, 2083, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05073543133274201, "compression_ratio": 1.895973154362416, "no_speech_prob": 0.11573103070259094}, {"id": 692, "seek": 326900, "start": 3276.0, "end": 3285.0, "text": " What I mean by that is, if you have different data sources and different problems working in a single company, let's say, then you should definitely use different Git repositories.", "tokens": [50714, 708, 286, 914, 538, 300, 307, 11, 498, 291, 362, 819, 1412, 7139, 293, 819, 2740, 1364, 294, 257, 2167, 2237, 11, 718, 311, 584, 11, 550, 291, 820, 2138, 764, 819, 16939, 22283, 2083, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05073543133274201, "compression_ratio": 1.895973154362416, "no_speech_prob": 0.11573103070259094}, {"id": 693, "seek": 326900, "start": 3285.0, "end": 3294.0, "text": " If you have fewer than 10 data scientists working on the same data, but working on different problems, it also probably makes sense to keep everything in a single Git repository, although it doesn't have to.", "tokens": [51164, 759, 291, 362, 13366, 813, 1266, 1412, 7708, 1364, 322, 264, 912, 1412, 11, 457, 1364, 322, 819, 2740, 11, 309, 611, 1391, 1669, 2020, 281, 1066, 1203, 294, 257, 2167, 16939, 25841, 11, 4878, 309, 1177, 380, 362, 281, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05073543133274201, "compression_ratio": 1.895973154362416, "no_speech_prob": 0.11573103070259094}, {"id": 694, "seek": 326900, "start": 3294.0, "end": 3297.0, "text": " If you have different concerns, feel free to break that up.", "tokens": [51614, 759, 291, 362, 819, 7389, 11, 841, 1737, 281, 1821, 300, 493, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05073543133274201, "compression_ratio": 1.895973154362416, "no_speech_prob": 0.11573103070259094}, {"id": 695, "seek": 329700, "start": 3297.0, "end": 3308.0, "text": " And if you have more than 10 data scientists and they're working on the same data, but they're working on different problems, fundamentally addressing different data science issues, then I recommend using different Git repositories.", "tokens": [50364, 400, 498, 291, 362, 544, 813, 1266, 1412, 7708, 293, 436, 434, 1364, 322, 264, 912, 1412, 11, 457, 436, 434, 1364, 322, 819, 2740, 11, 17879, 14329, 819, 1412, 3497, 2663, 11, 550, 286, 2748, 1228, 819, 16939, 22283, 2083, 13, 50914], "temperature": 0.0, "avg_logprob": -0.054156407066013504, "compression_ratio": 1.8344594594594594, "no_speech_prob": 0.011682530865073204}, {"id": 696, "seek": 329700, "start": 3308.0, "end": 3313.0, "text": " And all of my recommendations will be within context of a single Git repository.", "tokens": [50914, 400, 439, 295, 452, 10434, 486, 312, 1951, 4319, 295, 257, 2167, 16939, 25841, 13, 51164], "temperature": 0.0, "avg_logprob": -0.054156407066013504, "compression_ratio": 1.8344594594594594, "no_speech_prob": 0.011682530865073204}, {"id": 697, "seek": 329700, "start": 3313.0, "end": 3317.0, "text": " The second main question to be asked is where is the data actually hosted?", "tokens": [51164, 440, 1150, 2135, 1168, 281, 312, 2351, 307, 689, 307, 264, 1412, 767, 19204, 30, 51364], "temperature": 0.0, "avg_logprob": -0.054156407066013504, "compression_ratio": 1.8344594594594594, "no_speech_prob": 0.011682530865073204}, {"id": 698, "seek": 329700, "start": 3317.0, "end": 3326.0, "text": " If it's small enough data to be loaded onto a data scientist's personal laptop, then it's very simple to actually just use the data on the laptop locally.", "tokens": [51364, 759, 309, 311, 1359, 1547, 1412, 281, 312, 13210, 3911, 257, 1412, 12662, 311, 2973, 10732, 11, 550, 309, 311, 588, 2199, 281, 767, 445, 764, 264, 1412, 322, 264, 10732, 16143, 13, 51814], "temperature": 0.0, "avg_logprob": -0.054156407066013504, "compression_ratio": 1.8344594594594594, "no_speech_prob": 0.011682530865073204}, {"id": 699, "seek": 332600, "start": 3326.0, "end": 3336.0, "text": " So I would recommend just running the Jupyter Notebook as I'm doing in most of the videos for this course, where you just open up a terminal on your local laptop or local desktop and just run Jupyter Notebook.", "tokens": [50364, 407, 286, 576, 2748, 445, 2614, 264, 22125, 88, 391, 11633, 2939, 382, 286, 478, 884, 294, 881, 295, 264, 2145, 337, 341, 1164, 11, 689, 291, 445, 1269, 493, 257, 14709, 322, 428, 2654, 10732, 420, 2654, 14502, 293, 445, 1190, 22125, 88, 391, 11633, 2939, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07470941543579102, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.028419863432645798}, {"id": 700, "seek": 332600, "start": 3336.0, "end": 3339.0, "text": " However, many data science projects actually use big data.", "tokens": [50864, 2908, 11, 867, 1412, 3497, 4455, 767, 764, 955, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07470941543579102, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.028419863432645798}, {"id": 701, "seek": 332600, "start": 3339.0, "end": 3342.0, "text": " They access the data on some other server or something like this.", "tokens": [51014, 814, 2105, 264, 1412, 322, 512, 661, 7154, 420, 746, 411, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07470941543579102, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.028419863432645798}, {"id": 702, "seek": 332600, "start": 3342.0, "end": 3345.0, "text": " And in this case, you have a couple of options.", "tokens": [51164, 400, 294, 341, 1389, 11, 291, 362, 257, 1916, 295, 3956, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07470941543579102, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.028419863432645798}, {"id": 703, "seek": 334500, "start": 3345.0, "end": 3360.0, "text": " The obvious one is to say, if you can access this server data via SSH and you can actually do work in a server, then you can actually run a Jupyter server on that server and you can SSH tunnel and forward your connection to that server.", "tokens": [50364, 440, 6322, 472, 307, 281, 584, 11, 498, 291, 393, 2105, 341, 7154, 1412, 5766, 12238, 39, 293, 291, 393, 767, 360, 589, 294, 257, 7154, 11, 550, 291, 393, 767, 1190, 257, 22125, 88, 391, 7154, 322, 300, 7154, 293, 291, 393, 12238, 39, 13186, 293, 2128, 428, 4984, 281, 300, 7154, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07994694405413688, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.9386183023452759}, {"id": 704, "seek": 334500, "start": 3360.0, "end": 3365.0, "text": " That way, both the data and the Jupyter server are on the same machine.", "tokens": [51114, 663, 636, 11, 1293, 264, 1412, 293, 264, 22125, 88, 391, 7154, 366, 322, 264, 912, 3479, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07994694405413688, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.9386183023452759}, {"id": 705, "seek": 334500, "start": 3365.0, "end": 3368.0, "text": " Another option is to consider using a thing called Jupyter Hub.", "tokens": [51364, 3996, 3614, 307, 281, 1949, 1228, 257, 551, 1219, 22125, 88, 391, 18986, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07994694405413688, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.9386183023452759}, {"id": 706, "seek": 336800, "start": 3368.0, "end": 3373.0, "text": " The Jupyter Hub would have to be installed on the server where the data is actually being held.", "tokens": [50364, 440, 22125, 88, 391, 18986, 576, 362, 281, 312, 8899, 322, 264, 7154, 689, 264, 1412, 307, 767, 885, 5167, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 707, "seek": 336800, "start": 3373.0, "end": 3376.0, "text": " And if I click this link, you go to this GitHub page here.", "tokens": [50614, 400, 498, 286, 2052, 341, 2113, 11, 291, 352, 281, 341, 23331, 3028, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 708, "seek": 336800, "start": 3376.0, "end": 3381.0, "text": " So it can be found at github.com slash Jupyter slash Jupyter Hub.", "tokens": [50764, 407, 309, 393, 312, 1352, 412, 290, 355, 836, 13, 1112, 17330, 22125, 88, 391, 17330, 22125, 88, 391, 18986, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 709, "seek": 336800, "start": 3381.0, "end": 3384.0, "text": " And you can see it's a bit more work than we can go into.", "tokens": [51014, 400, 291, 393, 536, 309, 311, 257, 857, 544, 589, 813, 321, 393, 352, 666, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 710, "seek": 336800, "start": 3384.0, "end": 3386.0, "text": " It's a bit outside the scope of this class.", "tokens": [51164, 467, 311, 257, 857, 2380, 264, 11923, 295, 341, 1508, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 711, "seek": 336800, "start": 3386.0, "end": 3390.0, "text": " But Jupyter Hub is a multi-user server for Jupyter Notebooks.", "tokens": [51264, 583, 22125, 88, 391, 18986, 307, 257, 4825, 12, 18088, 7154, 337, 22125, 88, 391, 11633, 15170, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 712, "seek": 336800, "start": 3390.0, "end": 3397.0, "text": " And there's actually some really nice documentation to explain how this can be set up on a server or some AWS instance, for example.", "tokens": [51464, 400, 456, 311, 767, 512, 534, 1481, 14333, 281, 2903, 577, 341, 393, 312, 992, 493, 322, 257, 7154, 420, 512, 17650, 5197, 11, 337, 1365, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07675283366236194, "compression_ratio": 1.7348993288590604, "no_speech_prob": 0.7952094674110413}, {"id": 713, "seek": 339700, "start": 3397.0, "end": 3401.0, "text": " There's lots of installation instructions and things to work on here.", "tokens": [50364, 821, 311, 3195, 295, 13260, 9415, 293, 721, 281, 589, 322, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 714, "seek": 339700, "start": 3401.0, "end": 3403.0, "text": " So those are the main questions to be asking.", "tokens": [50564, 407, 729, 366, 264, 2135, 1651, 281, 312, 3365, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 715, "seek": 339700, "start": 3403.0, "end": 3406.0, "text": " At what level do you set the Git repository?", "tokens": [50664, 1711, 437, 1496, 360, 291, 992, 264, 16939, 25841, 30, 50814], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 716, "seek": 339700, "start": 3406.0, "end": 3408.0, "text": " And where are you going to be running this server?", "tokens": [50814, 400, 689, 366, 291, 516, 281, 312, 2614, 341, 7154, 30, 50914], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 717, "seek": 339700, "start": 3408.0, "end": 3410.0, "text": " Are you going to be running it on a server somewhere?", "tokens": [50914, 2014, 291, 516, 281, 312, 2614, 309, 322, 257, 7154, 4079, 30, 51014], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 718, "seek": 339700, "start": 3410.0, "end": 3414.0, "text": " Or will you be running it locally on your local laptop or something else?", "tokens": [51014, 1610, 486, 291, 312, 2614, 309, 16143, 322, 428, 2654, 10732, 420, 746, 1646, 30, 51214], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 719, "seek": 339700, "start": 3414.0, "end": 3424.0, "text": " Once you have those two questions settled, then the mechanics of actually how do you work on a Jupyter Notebook in a single repository or what we'll deal with next?", "tokens": [51214, 3443, 291, 362, 729, 732, 1651, 14819, 11, 550, 264, 12939, 295, 767, 577, 360, 291, 589, 322, 257, 22125, 88, 391, 11633, 2939, 294, 257, 2167, 25841, 420, 437, 321, 603, 2028, 365, 958, 30, 51714], "temperature": 0.0, "avg_logprob": -0.07951386248479124, "compression_ratio": 1.8194945848375452, "no_speech_prob": 0.0065862699411809444}, {"id": 720, "seek": 342700, "start": 3427.0, "end": 3432.0, "text": " In this lesson, we'll be organizing our work into two different types of notebooks.", "tokens": [50364, 682, 341, 6898, 11, 321, 603, 312, 17608, 527, 589, 666, 732, 819, 3467, 295, 43782, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04283520726874323, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.09793391823768616}, {"id": 721, "seek": 342700, "start": 3432.0, "end": 3436.0, "text": " Conceptually, there are two types of notebooks I'd like to introduce.", "tokens": [50614, 47482, 671, 11, 456, 366, 732, 3467, 295, 43782, 286, 1116, 411, 281, 5366, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04283520726874323, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.09793391823768616}, {"id": 722, "seek": 342700, "start": 3436.0, "end": 3440.0, "text": " One called a laboratory notebook and one called a deliverable notebook.", "tokens": [50814, 1485, 1219, 257, 16523, 21060, 293, 472, 1219, 257, 4239, 712, 21060, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04283520726874323, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.09793391823768616}, {"id": 723, "seek": 342700, "start": 3440.0, "end": 3448.0, "text": " The difference here, a laboratory notebook is in the same style as lab notebooks that are actually in science labs throughout the world.", "tokens": [51014, 440, 2649, 510, 11, 257, 16523, 21060, 307, 294, 264, 912, 3758, 382, 2715, 43782, 300, 366, 767, 294, 3497, 20339, 3710, 264, 1002, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04283520726874323, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.09793391823768616}, {"id": 724, "seek": 342700, "start": 3448.0, "end": 3454.0, "text": " And by that, a lab notebook keeps a historical record of the analysis that's been explored.", "tokens": [51414, 400, 538, 300, 11, 257, 2715, 21060, 5965, 257, 8584, 2136, 295, 264, 5215, 300, 311, 668, 24016, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04283520726874323, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.09793391823768616}, {"id": 725, "seek": 345400, "start": 3454.0, "end": 3463.0, "text": " So each day, a person goes to a lab bench, writes down the date at the top of the page, writes down what happened in lab that day for that particular experiment.", "tokens": [50364, 407, 1184, 786, 11, 257, 954, 1709, 281, 257, 2715, 10638, 11, 13657, 760, 264, 4002, 412, 264, 1192, 295, 264, 3028, 11, 13657, 760, 437, 2011, 294, 2715, 300, 786, 337, 300, 1729, 5120, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08330297040509747, "compression_ratio": 1.686832740213523, "no_speech_prob": 0.014058086089789867}, {"id": 726, "seek": 345400, "start": 3463.0, "end": 3466.0, "text": " And this record just continually gets amended to.", "tokens": [50814, 400, 341, 2136, 445, 22277, 2170, 43641, 281, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08330297040509747, "compression_ratio": 1.686832740213523, "no_speech_prob": 0.014058086089789867}, {"id": 727, "seek": 345400, "start": 3466.0, "end": 3475.0, "text": " It is also meant to be a place where there's development or scratch ideas or initial analyses, and it's very much not a polished piece of work.", "tokens": [50964, 467, 307, 611, 4140, 281, 312, 257, 1081, 689, 456, 311, 3250, 420, 8459, 3487, 420, 5883, 37560, 11, 293, 309, 311, 588, 709, 406, 257, 29079, 2522, 295, 589, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08330297040509747, "compression_ratio": 1.686832740213523, "no_speech_prob": 0.014058086089789867}, {"id": 728, "seek": 345400, "start": 3475.0, "end": 3479.0, "text": " It is meant for record keeping of scratch pad type nature.", "tokens": [51414, 467, 307, 4140, 337, 2136, 5145, 295, 8459, 6887, 2010, 3687, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08330297040509747, "compression_ratio": 1.686832740213523, "no_speech_prob": 0.014058086089789867}, {"id": 729, "seek": 345400, "start": 3479.0, "end": 3482.0, "text": " And each notebook is controlled by a single data scientist.", "tokens": [51614, 400, 1184, 21060, 307, 10164, 538, 257, 2167, 1412, 12662, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08330297040509747, "compression_ratio": 1.686832740213523, "no_speech_prob": 0.014058086089789867}, {"id": 730, "seek": 348200, "start": 3482.0, "end": 3492.0, "text": " And by this, I'm talking about a Jupyter notebook where it is a single person single data scientists record of what they were doing that day and it is not shared by anyone else.", "tokens": [50364, 400, 538, 341, 11, 286, 478, 1417, 466, 257, 22125, 88, 391, 21060, 689, 309, 307, 257, 2167, 954, 2167, 1412, 7708, 2136, 295, 437, 436, 645, 884, 300, 786, 293, 309, 307, 406, 5507, 538, 2878, 1646, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1055966473500663, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.008573366329073906}, {"id": 731, "seek": 348200, "start": 3492.0, "end": 3500.0, "text": " Now, it's not secret people can look at it and you can upload it as well, but it's not meant to be viewed by other people necessarily.", "tokens": [50864, 823, 11, 309, 311, 406, 4054, 561, 393, 574, 412, 309, 293, 291, 393, 6580, 309, 382, 731, 11, 457, 309, 311, 406, 4140, 281, 312, 19174, 538, 661, 561, 4725, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1055966473500663, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.008573366329073906}, {"id": 732, "seek": 348200, "start": 3500.0, "end": 3502.0, "text": " A few more final points on lab notebooks.", "tokens": [51264, 316, 1326, 544, 2572, 2793, 322, 2715, 43782, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1055966473500663, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.008573366329073906}, {"id": 733, "seek": 348200, "start": 3502.0, "end": 3507.0, "text": " Split the notebook when it gets too long and too long is just sort of a personal preference.", "tokens": [51364, 45111, 264, 21060, 562, 309, 2170, 886, 938, 293, 886, 938, 307, 445, 1333, 295, 257, 2973, 17502, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1055966473500663, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.008573366329073906}, {"id": 734, "seek": 350700, "start": 3507.0, "end": 3515.0, "text": " As you start scrolling down the page as a point when a lab notebook or any notebook gets to the point where, okay, this is too much of a document to look at at one time.", "tokens": [50364, 1018, 291, 722, 29053, 760, 264, 3028, 382, 257, 935, 562, 257, 2715, 21060, 420, 604, 21060, 2170, 281, 264, 935, 689, 11, 1392, 11, 341, 307, 886, 709, 295, 257, 4166, 281, 574, 412, 412, 472, 565, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 735, "seek": 350700, "start": 3515.0, "end": 3516.0, "text": " So then split it.", "tokens": [50764, 407, 550, 7472, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 736, "seek": 350700, "start": 3516.0, "end": 3517.0, "text": " There's no cost in splitting it.", "tokens": [50814, 821, 311, 572, 2063, 294, 30348, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 737, "seek": 350700, "start": 3517.0, "end": 3520.0, "text": " And you can think of this as just turning the page in a lab notebook.", "tokens": [50864, 400, 291, 393, 519, 295, 341, 382, 445, 6246, 264, 3028, 294, 257, 2715, 21060, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 738, "seek": 350700, "start": 3520.0, "end": 3525.0, "text": " And finally, if you're working on a single day, you can actually split notebooks into different topics.", "tokens": [51014, 400, 2721, 11, 498, 291, 434, 1364, 322, 257, 2167, 786, 11, 291, 393, 767, 7472, 43782, 666, 819, 8378, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 739, "seek": 350700, "start": 3525.0, "end": 3529.0, "text": " So for the same day, you can actually have two different or more notebooks.", "tokens": [51264, 407, 337, 264, 912, 786, 11, 291, 393, 767, 362, 732, 819, 420, 544, 43782, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 740, "seek": 350700, "start": 3529.0, "end": 3532.0, "text": " And if you're splitting by topic, that makes sense as well.", "tokens": [51464, 400, 498, 291, 434, 30348, 538, 4829, 11, 300, 1669, 2020, 382, 731, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07221670503969546, "compression_ratio": 1.9202898550724639, "no_speech_prob": 0.348410040140152}, {"id": 741, "seek": 353200, "start": 3532.0, "end": 3536.0, "text": " On contrast to a lab notebook, there's another idea of a deliverable notebook.", "tokens": [50364, 1282, 8712, 281, 257, 2715, 21060, 11, 456, 311, 1071, 1558, 295, 257, 4239, 712, 21060, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05476871289704975, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.11908639222383499}, {"id": 742, "seek": 353200, "start": 3536.0, "end": 3542.0, "text": " As I work as a consultant, most of my work is actually going to be delivered either to a project manager or to a client.", "tokens": [50564, 1018, 286, 589, 382, 257, 24676, 11, 881, 295, 452, 589, 307, 767, 516, 281, 312, 10144, 2139, 281, 257, 1716, 6598, 420, 281, 257, 6423, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05476871289704975, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.11908639222383499}, {"id": 743, "seek": 353200, "start": 3542.0, "end": 3550.0, "text": " And these notebooks are different from lab notebooks in the sense that these will be delivered to someone to consume besides myself.", "tokens": [50864, 400, 613, 43782, 366, 819, 490, 2715, 43782, 294, 264, 2020, 300, 613, 486, 312, 10144, 281, 1580, 281, 14732, 11868, 2059, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05476871289704975, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.11908639222383499}, {"id": 744, "seek": 353200, "start": 3550.0, "end": 3555.0, "text": " Now candidates for deliverable notebooks can be any notebook that will be referenced in the future.", "tokens": [51264, 823, 11255, 337, 4239, 712, 43782, 393, 312, 604, 21060, 300, 486, 312, 32734, 294, 264, 2027, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05476871289704975, "compression_ratio": 1.8227848101265822, "no_speech_prob": 0.11908639222383499}, {"id": 745, "seek": 355500, "start": 3555.0, "end": 3561.0, "text": " By this, I mean, if I expect someone else to also use the same data cleaning notebook, for example,", "tokens": [50364, 3146, 341, 11, 286, 914, 11, 498, 286, 2066, 1580, 1646, 281, 611, 764, 264, 912, 1412, 8924, 21060, 11, 337, 1365, 11, 50664], "temperature": 0.0, "avg_logprob": -0.045854949114615455, "compression_ratio": 1.813868613138686, "no_speech_prob": 0.7052863240242004}, {"id": 746, "seek": 355500, "start": 3561.0, "end": 3569.0, "text": " so I might have a notebook that explains how I took raw data and transformed it into the clean data that I use for the rest of the analysis.", "tokens": [50664, 370, 286, 1062, 362, 257, 21060, 300, 13948, 577, 286, 1890, 8936, 1412, 293, 16894, 309, 666, 264, 2541, 1412, 300, 286, 764, 337, 264, 1472, 295, 264, 5215, 13, 51064], "temperature": 0.0, "avg_logprob": -0.045854949114615455, "compression_ratio": 1.813868613138686, "no_speech_prob": 0.7052863240242004}, {"id": 747, "seek": 355500, "start": 3569.0, "end": 3575.0, "text": " And I might provide a single link to a deliverable notebook, which is simply the data cleaning of the raw data.", "tokens": [51064, 400, 286, 1062, 2893, 257, 2167, 2113, 281, 257, 4239, 712, 21060, 11, 597, 307, 2935, 264, 1412, 8924, 295, 264, 8936, 1412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.045854949114615455, "compression_ratio": 1.813868613138686, "no_speech_prob": 0.7052863240242004}, {"id": 748, "seek": 355500, "start": 3575.0, "end": 3582.0, "text": " And in that notebook, I'll have things like what the actual transformations were, but also reasoning behind it and some documentation around it.", "tokens": [51364, 400, 294, 300, 21060, 11, 286, 603, 362, 721, 411, 437, 264, 3539, 34852, 645, 11, 457, 611, 21577, 2261, 309, 293, 512, 14333, 926, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.045854949114615455, "compression_ratio": 1.813868613138686, "no_speech_prob": 0.7052863240242004}, {"id": 749, "seek": 358200, "start": 3582.0, "end": 3585.0, "text": " So this is for anyone who wants to know how is this data actually cleaned?", "tokens": [50364, 407, 341, 307, 337, 2878, 567, 2738, 281, 458, 577, 307, 341, 1412, 767, 16146, 30, 50514], "temperature": 0.0, "avg_logprob": -0.05344919500679805, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.020956508815288544}, {"id": 750, "seek": 358200, "start": 3585.0, "end": 3587.0, "text": " There's a single spot for it to look at.", "tokens": [50514, 821, 311, 257, 2167, 4008, 337, 309, 281, 574, 412, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05344919500679805, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.020956508815288544}, {"id": 751, "seek": 358200, "start": 3587.0, "end": 3597.0, "text": " And obviously, of course, the final fully polished and final analysis of a data science piece of work will also be considered a deliverable notebook.", "tokens": [50614, 400, 2745, 11, 295, 1164, 11, 264, 2572, 4498, 29079, 293, 2572, 5215, 295, 257, 1412, 3497, 2522, 295, 589, 486, 611, 312, 4888, 257, 4239, 712, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05344919500679805, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.020956508815288544}, {"id": 752, "seek": 358200, "start": 3597.0, "end": 3602.0, "text": " I also recommend that deliverable notebooks should be peer reviewed via pull requests,", "tokens": [51114, 286, 611, 2748, 300, 4239, 712, 43782, 820, 312, 15108, 18429, 5766, 2235, 12475, 11, 51364], "temperature": 0.0, "avg_logprob": -0.05344919500679805, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.020956508815288544}, {"id": 753, "seek": 358200, "start": 3602.0, "end": 3606.0, "text": " which means other members will actually review the notebook before it's accepted.", "tokens": [51364, 597, 1355, 661, 2679, 486, 767, 3131, 264, 21060, 949, 309, 311, 9035, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05344919500679805, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.020956508815288544}, {"id": 754, "seek": 358200, "start": 3606.0, "end": 3610.0, "text": " Other members can be other data scientists or it can be a manager or something else.", "tokens": [51564, 5358, 2679, 393, 312, 661, 1412, 7708, 420, 309, 393, 312, 257, 6598, 420, 746, 1646, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05344919500679805, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.020956508815288544}, {"id": 755, "seek": 361000, "start": 3610.0, "end": 3613.0, "text": " And these notebooks are controlled by the whole data science team.", "tokens": [50364, 400, 613, 43782, 366, 10164, 538, 264, 1379, 1412, 3497, 1469, 13, 50514], "temperature": 0.0, "avg_logprob": -0.03840970217697019, "compression_ratio": 1.903914590747331, "no_speech_prob": 0.014498468488454819}, {"id": 756, "seek": 361000, "start": 3613.0, "end": 3618.0, "text": " If we think about these notebooks as living in a certain repository, for example,", "tokens": [50514, 759, 321, 519, 466, 613, 43782, 382, 2647, 294, 257, 1629, 25841, 11, 337, 1365, 11, 50764], "temperature": 0.0, "avg_logprob": -0.03840970217697019, "compression_ratio": 1.903914590747331, "no_speech_prob": 0.014498468488454819}, {"id": 757, "seek": 361000, "start": 3618.0, "end": 3621.0, "text": " then the whole data science team will have these deliverable notebooks,", "tokens": [50764, 550, 264, 1379, 1412, 3497, 1469, 486, 362, 613, 4239, 712, 43782, 11, 50914], "temperature": 0.0, "avg_logprob": -0.03840970217697019, "compression_ratio": 1.903914590747331, "no_speech_prob": 0.014498468488454819}, {"id": 758, "seek": 361000, "start": 3621.0, "end": 3626.0, "text": " which are in the same topic scope as the problem that they're all together trying to solve.", "tokens": [50914, 597, 366, 294, 264, 912, 4829, 11923, 382, 264, 1154, 300, 436, 434, 439, 1214, 1382, 281, 5039, 13, 51164], "temperature": 0.0, "avg_logprob": -0.03840970217697019, "compression_ratio": 1.903914590747331, "no_speech_prob": 0.014498468488454819}, {"id": 759, "seek": 361000, "start": 3626.0, "end": 3633.0, "text": " So how do we organize the directories so that the lab notebooks and deliverable notebooks all are in their proper place?", "tokens": [51164, 407, 577, 360, 321, 13859, 264, 5391, 530, 370, 300, 264, 2715, 43782, 293, 4239, 712, 43782, 439, 366, 294, 641, 2296, 1081, 30, 51514], "temperature": 0.0, "avg_logprob": -0.03840970217697019, "compression_ratio": 1.903914590747331, "no_speech_prob": 0.014498468488454819}, {"id": 760, "seek": 361000, "start": 3633.0, "end": 3638.0, "text": " So these are the minimum directories, and I think it can be expanded by a few or taken away by a few.", "tokens": [51514, 407, 613, 366, 264, 7285, 5391, 530, 11, 293, 286, 519, 309, 393, 312, 14342, 538, 257, 1326, 420, 2726, 1314, 538, 257, 1326, 13, 51764], "temperature": 0.0, "avg_logprob": -0.03840970217697019, "compression_ratio": 1.903914590747331, "no_speech_prob": 0.014498468488454819}, {"id": 761, "seek": 363800, "start": 3638.0, "end": 3645.0, "text": " So I have listed here the directories I think belong at the top level of a data science git repository.", "tokens": [50364, 407, 286, 362, 10052, 510, 264, 5391, 530, 286, 519, 5784, 412, 264, 1192, 1496, 295, 257, 1412, 3497, 18331, 25841, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 762, "seek": 363800, "start": 3645.0, "end": 3647.0, "text": " The first one is data. This is optional.", "tokens": [50714, 440, 700, 472, 307, 1412, 13, 639, 307, 17312, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 763, "seek": 363800, "start": 3647.0, "end": 3653.0, "text": " If you have very small data and you want to have it locally, it's possible to include it in a git repository.", "tokens": [50814, 759, 291, 362, 588, 1359, 1412, 293, 291, 528, 281, 362, 309, 16143, 11, 309, 311, 1944, 281, 4090, 309, 294, 257, 18331, 25841, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 764, "seek": 363800, "start": 3653.0, "end": 3657.0, "text": " Generally, though, data science data is actually backed up outside of version control.", "tokens": [51114, 21082, 11, 1673, 11, 1412, 3497, 1412, 307, 767, 20391, 493, 2380, 295, 3037, 1969, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 765, "seek": 363800, "start": 3657.0, "end": 3659.0, "text": " It's in a different environment.", "tokens": [51314, 467, 311, 294, 257, 819, 2823, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 766, "seek": 363800, "start": 3659.0, "end": 3662.0, "text": " So this is definitely an optional directory to have.", "tokens": [51414, 407, 341, 307, 2138, 364, 17312, 21120, 281, 362, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 767, "seek": 363800, "start": 3662.0, "end": 3664.0, "text": " The second one is the deliver directory.", "tokens": [51564, 440, 1150, 472, 307, 264, 4239, 21120, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07102402469568085, "compression_ratio": 1.7660377358490567, "no_speech_prob": 0.017430389299988747}, {"id": 768, "seek": 366400, "start": 3664.0, "end": 3668.0, "text": " This is where the final polished notebooks for consumption.", "tokens": [50364, 639, 307, 689, 264, 2572, 29079, 43782, 337, 12126, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07022400006004002, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.06459653377532959}, {"id": 769, "seek": 366400, "start": 3668.0, "end": 3676.0, "text": " If a new data scientist is coming onto the project, they will look in the deliver directory to see what has been done before.", "tokens": [50564, 759, 257, 777, 1412, 12662, 307, 1348, 3911, 264, 1716, 11, 436, 486, 574, 294, 264, 4239, 21120, 281, 536, 437, 575, 668, 1096, 949, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07022400006004002, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.06459653377532959}, {"id": 770, "seek": 366400, "start": 3676.0, "end": 3682.0, "text": " In the develop directory, we store the lab notebooks, and I will explain the naming convention in a further video,", "tokens": [50964, 682, 264, 1499, 21120, 11, 321, 3531, 264, 2715, 43782, 11, 293, 286, 486, 2903, 264, 25290, 10286, 294, 257, 3052, 960, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07022400006004002, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.06459653377532959}, {"id": 771, "seek": 366400, "start": 3682.0, "end": 3688.0, "text": " but this will say all the scratch work that has been done by each of the data scientists working on this problem.", "tokens": [51264, 457, 341, 486, 584, 439, 264, 8459, 589, 300, 575, 668, 1096, 538, 1184, 295, 264, 1412, 7708, 1364, 322, 341, 1154, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07022400006004002, "compression_ratio": 1.7394957983193278, "no_speech_prob": 0.06459653377532959}, {"id": 772, "seek": 368800, "start": 3688.0, "end": 3696.0, "text": " The directory called figures will contain the figures that have been the output from both to develop and the deliver notebooks.", "tokens": [50364, 440, 21120, 1219, 9624, 486, 5304, 264, 9624, 300, 362, 668, 264, 5598, 490, 1293, 281, 1499, 293, 264, 4239, 43782, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07213592529296875, "compression_ratio": 1.7832699619771863, "no_speech_prob": 0.02975054457783699}, {"id": 773, "seek": 368800, "start": 3696.0, "end": 3699.0, "text": " I will be expressing a bit more on that in the future.", "tokens": [50764, 286, 486, 312, 22171, 257, 857, 544, 322, 300, 294, 264, 2027, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07213592529296875, "compression_ratio": 1.7832699619771863, "no_speech_prob": 0.02975054457783699}, {"id": 774, "seek": 368800, "start": 3699.0, "end": 3705.0, "text": " And finally, a source directory where as you come up with various scripts or modules or anything else that needs to be,", "tokens": [50914, 400, 2721, 11, 257, 4009, 21120, 689, 382, 291, 808, 493, 365, 3683, 23294, 420, 16679, 420, 1340, 1646, 300, 2203, 281, 312, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07213592529296875, "compression_ratio": 1.7832699619771863, "no_speech_prob": 0.02975054457783699}, {"id": 775, "seek": 368800, "start": 3705.0, "end": 3710.0, "text": " that's actual computer code that doesn't belong in a notebook directory, goes in a source directory.", "tokens": [51214, 300, 311, 3539, 3820, 3089, 300, 1177, 380, 5784, 294, 257, 21060, 21120, 11, 1709, 294, 257, 4009, 21120, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07213592529296875, "compression_ratio": 1.7832699619771863, "no_speech_prob": 0.02975054457783699}, {"id": 776, "seek": 368800, "start": 3710.0, "end": 3713.0, "text": " Again, you can add to this or you can modify this as you want to,", "tokens": [51464, 3764, 11, 291, 393, 909, 281, 341, 420, 291, 393, 16927, 341, 382, 291, 528, 281, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07213592529296875, "compression_ratio": 1.7832699619771863, "no_speech_prob": 0.02975054457783699}, {"id": 777, "seek": 371300, "start": 3713.0, "end": 3720.0, "text": " but I think this is a good starting structure to work from and modify it as your needs evolve.", "tokens": [50364, 457, 286, 519, 341, 307, 257, 665, 2891, 3877, 281, 589, 490, 293, 16927, 309, 382, 428, 2203, 16693, 13, 50714], "temperature": 0.0, "avg_logprob": -0.03223701949431517, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.006288358010351658}, {"id": 778, "seek": 371300, "start": 3720.0, "end": 3726.0, "text": " In this video, I'll be telling you about my recommended convention for naming lab notebooks.", "tokens": [50714, 682, 341, 960, 11, 286, 603, 312, 3585, 291, 466, 452, 9628, 10286, 337, 25290, 2715, 43782, 13, 51014], "temperature": 0.0, "avg_logprob": -0.03223701949431517, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.006288358010351658}, {"id": 779, "seek": 371300, "start": 3726.0, "end": 3730.0, "text": " So naming a lab notebook can be a more difficult problem than you might expect,", "tokens": [51014, 407, 25290, 257, 2715, 21060, 393, 312, 257, 544, 2252, 1154, 813, 291, 1062, 2066, 11, 51214], "temperature": 0.0, "avg_logprob": -0.03223701949431517, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.006288358010351658}, {"id": 780, "seek": 371300, "start": 3730.0, "end": 3734.0, "text": " especially if there's many different data scientists working on a similar problem.", "tokens": [51214, 2318, 498, 456, 311, 867, 819, 1412, 7708, 1364, 322, 257, 2531, 1154, 13, 51414], "temperature": 0.0, "avg_logprob": -0.03223701949431517, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.006288358010351658}, {"id": 781, "seek": 371300, "start": 3734.0, "end": 3737.0, "text": " So to help with that, the following convention is what I recommend.", "tokens": [51414, 407, 281, 854, 365, 300, 11, 264, 3480, 10286, 307, 437, 286, 2748, 13, 51564], "temperature": 0.0, "avg_logprob": -0.03223701949431517, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.006288358010351658}, {"id": 782, "seek": 371300, "start": 3737.0, "end": 3740.0, "text": " You can obviously change this to fit your own needs.", "tokens": [51564, 509, 393, 2745, 1319, 341, 281, 3318, 428, 1065, 2203, 13, 51714], "temperature": 0.0, "avg_logprob": -0.03223701949431517, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.006288358010351658}, {"id": 783, "seek": 374000, "start": 3740.0, "end": 3746.0, "text": " I recommend prepending each file name with the current date that you started the work on that notebook.", "tokens": [50364, 286, 2748, 2666, 2029, 1184, 3991, 1315, 365, 264, 2190, 4002, 300, 291, 1409, 264, 589, 322, 300, 21060, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1323401847582185, "compression_ratio": 1.6763285024154588, "no_speech_prob": 0.031126458197832108}, {"id": 784, "seek": 374000, "start": 3746.0, "end": 3751.0, "text": " So in this case, it was started 2015 dash 11 dash 21.", "tokens": [50664, 407, 294, 341, 1389, 11, 309, 390, 1409, 7546, 8240, 2975, 8240, 5080, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1323401847582185, "compression_ratio": 1.6763285024154588, "no_speech_prob": 0.031126458197832108}, {"id": 785, "seek": 374000, "start": 3751.0, "end": 3756.0, "text": " I also recommend it in that format where it's the year dash the two digit month,", "tokens": [50914, 286, 611, 2748, 309, 294, 300, 7877, 689, 309, 311, 264, 1064, 8240, 264, 732, 14293, 1618, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1323401847582185, "compression_ratio": 1.6763285024154588, "no_speech_prob": 0.031126458197832108}, {"id": 786, "seek": 374000, "start": 3756.0, "end": 3763.0, "text": " meaning if it's three, it'd be dash zero three dash the two digit day like the month in zero four and so on.", "tokens": [51164, 3620, 498, 309, 311, 1045, 11, 309, 1116, 312, 8240, 4018, 1045, 8240, 264, 732, 14293, 786, 411, 264, 1618, 294, 4018, 1451, 293, 370, 322, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1323401847582185, "compression_ratio": 1.6763285024154588, "no_speech_prob": 0.031126458197832108}, {"id": 787, "seek": 376300, "start": 3763.0, "end": 3771.0, "text": " This is called an ISO 8601 formatted date, and it just helps with keeping everything so that it's sortable in a nice way.", "tokens": [50364, 639, 307, 1219, 364, 25042, 1649, 4550, 16, 1254, 32509, 4002, 11, 293, 309, 445, 3665, 365, 5145, 1203, 370, 300, 309, 311, 1333, 712, 294, 257, 1481, 636, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09179911697119997, "compression_ratio": 1.7, "no_speech_prob": 0.18944361805915833}, {"id": 788, "seek": 376300, "start": 3771.0, "end": 3777.0, "text": " So the initial part of the name is the date that you started working on that particular notebook.", "tokens": [50764, 407, 264, 5883, 644, 295, 264, 1315, 307, 264, 4002, 300, 291, 1409, 1364, 322, 300, 1729, 21060, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09179911697119997, "compression_ratio": 1.7, "no_speech_prob": 0.18944361805915833}, {"id": 789, "seek": 376300, "start": 3777.0, "end": 3781.0, "text": " The second piece immediately after that is the data scientists initials.", "tokens": [51064, 440, 1150, 2522, 4258, 934, 300, 307, 264, 1412, 7708, 5883, 82, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09179911697119997, "compression_ratio": 1.7, "no_speech_prob": 0.18944361805915833}, {"id": 790, "seek": 376300, "start": 3781.0, "end": 3783.0, "text": " So in my case, my initials are JBW.", "tokens": [51264, 407, 294, 452, 1389, 11, 452, 5883, 82, 366, 43019, 54, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09179911697119997, "compression_ratio": 1.7, "no_speech_prob": 0.18944361805915833}, {"id": 791, "seek": 376300, "start": 3783.0, "end": 3789.0, "text": " So I put dash after the date my initials, or you can put it if you have a data scientists with the same initials,", "tokens": [51364, 407, 286, 829, 8240, 934, 264, 4002, 452, 5883, 82, 11, 420, 291, 393, 829, 309, 498, 291, 362, 257, 1412, 7708, 365, 264, 912, 5883, 82, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09179911697119997, "compression_ratio": 1.7, "no_speech_prob": 0.18944361805915833}, {"id": 792, "seek": 378900, "start": 3789.0, "end": 3792.0, "text": " you can just put some unique signifier that's the same every time.", "tokens": [50364, 291, 393, 445, 829, 512, 3845, 1465, 9902, 300, 311, 264, 912, 633, 565, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08172441140199319, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.15399612486362457}, {"id": 793, "seek": 378900, "start": 3792.0, "end": 3796.0, "text": " So that if you want to look at a directory that has many different data scientists notebooks,", "tokens": [50514, 407, 300, 498, 291, 528, 281, 574, 412, 257, 21120, 300, 575, 867, 819, 1412, 7708, 43782, 11, 50714], "temperature": 0.0, "avg_logprob": -0.08172441140199319, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.15399612486362457}, {"id": 794, "seek": 378900, "start": 3796.0, "end": 3801.0, "text": " you can do an LS for that person's initials and find their notebooks.", "tokens": [50714, 291, 393, 360, 364, 36657, 337, 300, 954, 311, 5883, 82, 293, 915, 641, 43782, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08172441140199319, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.15399612486362457}, {"id": 795, "seek": 378900, "start": 3801.0, "end": 3807.0, "text": " And finally, I recommend putting a two to forward description that describes what goes in that notebook.", "tokens": [50964, 400, 2721, 11, 286, 2748, 3372, 257, 732, 281, 2128, 3855, 300, 15626, 437, 1709, 294, 300, 21060, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08172441140199319, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.15399612486362457}, {"id": 796, "seek": 378900, "start": 3807.0, "end": 3812.0, "text": " So in this case, Cole predict RF for random forest regression.", "tokens": [51264, 407, 294, 341, 1389, 11, 20394, 6069, 26204, 337, 4974, 6719, 24590, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08172441140199319, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.15399612486362457}, {"id": 797, "seek": 378900, "start": 3812.0, "end": 3816.0, "text": " So looking through this later on, I can think back, okay, what was I doing two months ago,", "tokens": [51514, 407, 1237, 807, 341, 1780, 322, 11, 286, 393, 519, 646, 11, 1392, 11, 437, 390, 286, 884, 732, 2493, 2057, 11, 51714], "temperature": 0.0, "avg_logprob": -0.08172441140199319, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.15399612486362457}, {"id": 798, "seek": 381600, "start": 3816.0, "end": 3818.0, "text": " something with random forest, and it was a regression.", "tokens": [50364, 746, 365, 4974, 6719, 11, 293, 309, 390, 257, 24590, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 799, "seek": 381600, "start": 3818.0, "end": 3824.0, "text": " And on a classifier, seeing this in the title helps pick this out.", "tokens": [50464, 400, 322, 257, 1508, 9902, 11, 2577, 341, 294, 264, 4876, 3665, 1888, 341, 484, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 800, "seek": 381600, "start": 3824.0, "end": 3827.0, "text": " In this video, we'll be talking about version control.", "tokens": [50764, 682, 341, 960, 11, 321, 603, 312, 1417, 466, 3037, 1969, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 801, "seek": 381600, "start": 3827.0, "end": 3833.0, "text": " One of the key questions you have when dealing with a data science team is how do you peer review code?", "tokens": [50914, 1485, 295, 264, 2141, 1651, 291, 362, 562, 6260, 365, 257, 1412, 3497, 1469, 307, 577, 360, 291, 15108, 3131, 3089, 30, 51214], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 802, "seek": 381600, "start": 3833.0, "end": 3837.0, "text": " How do you store analysis in version control like get?", "tokens": [51214, 1012, 360, 291, 3531, 5215, 294, 3037, 1969, 411, 483, 30, 51414], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 803, "seek": 381600, "start": 3837.0, "end": 3839.0, "text": " And I'm going to assume a number of further constraints.", "tokens": [51414, 400, 286, 478, 516, 281, 6552, 257, 1230, 295, 3052, 18491, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 804, "seek": 381600, "start": 3839.0, "end": 3843.0, "text": " And I think this is probably the most restrictive constraints I can think of.", "tokens": [51514, 400, 286, 519, 341, 307, 1391, 264, 881, 43220, 18491, 286, 393, 519, 295, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12613357875658118, "compression_ratio": 1.6725978647686832, "no_speech_prob": 0.01590132899582386}, {"id": 805, "seek": 384300, "start": 3843.0, "end": 3845.0, "text": " This might not apply to you.", "tokens": [50364, 639, 1062, 406, 3079, 281, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07331636122294835, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06555958092212677}, {"id": 806, "seek": 384300, "start": 3845.0, "end": 3850.0, "text": " But I think if it does apply to you, I have reasonable work rounds for each of the possible concerns.", "tokens": [50464, 583, 286, 519, 498, 309, 775, 3079, 281, 291, 11, 286, 362, 10585, 589, 13757, 337, 1184, 295, 264, 1944, 7389, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07331636122294835, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06555958092212677}, {"id": 807, "seek": 384300, "start": 3850.0, "end": 3855.0, "text": " For example, imagine you have a project manager who would like to see the notebooks you're working on,", "tokens": [50714, 1171, 1365, 11, 3811, 291, 362, 257, 1716, 6598, 567, 576, 411, 281, 536, 264, 43782, 291, 434, 1364, 322, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07331636122294835, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06555958092212677}, {"id": 808, "seek": 384300, "start": 3855.0, "end": 3858.0, "text": " but they don't want to install Python or I Python or anything like this,", "tokens": [50964, 457, 436, 500, 380, 528, 281, 3625, 15329, 420, 286, 15329, 420, 1340, 411, 341, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07331636122294835, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06555958092212677}, {"id": 809, "seek": 384300, "start": 3858.0, "end": 3862.0, "text": " or consider that you might not be using GitHub for whatever reason.", "tokens": [51114, 420, 1949, 300, 291, 1062, 406, 312, 1228, 23331, 337, 2035, 1778, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07331636122294835, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06555958092212677}, {"id": 810, "seek": 384300, "start": 3862.0, "end": 3867.0, "text": " And some of the nice tools that GitHub has for showing diffs aren't available to you.", "tokens": [51314, 400, 512, 295, 264, 1481, 3873, 300, 23331, 575, 337, 4099, 7593, 82, 3212, 380, 2435, 281, 291, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07331636122294835, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06555958092212677}, {"id": 811, "seek": 386700, "start": 3867.0, "end": 3873.0, "text": " Or if you would want to review the Python code itself and don't want to have to look at it in a notebook environment.", "tokens": [50364, 1610, 498, 291, 576, 528, 281, 3131, 264, 15329, 3089, 2564, 293, 500, 380, 528, 281, 362, 281, 574, 412, 309, 294, 257, 21060, 2823, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08070383720027591, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.07470585405826569}, {"id": 812, "seek": 386700, "start": 3873.0, "end": 3880.0, "text": " How do I recommend dealing with these kinds of constraints while also maintaining a peer review of the code stored in the version control?", "tokens": [50664, 1012, 360, 286, 2748, 6260, 365, 613, 3685, 295, 18491, 1339, 611, 14916, 257, 15108, 3131, 295, 264, 3089, 12187, 294, 264, 3037, 1969, 30, 51014], "temperature": 0.0, "avg_logprob": -0.08070383720027591, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.07470585405826569}, {"id": 813, "seek": 386700, "start": 3880.0, "end": 3886.0, "text": " The standard practice for my answer is that each data scientist who's working on the same problem in the same repo", "tokens": [51014, 440, 3832, 3124, 337, 452, 1867, 307, 300, 1184, 1412, 12662, 567, 311, 1364, 322, 264, 912, 1154, 294, 264, 912, 49040, 51314], "temperature": 0.0, "avg_logprob": -0.08070383720027591, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.07470585405826569}, {"id": 814, "seek": 386700, "start": 3886.0, "end": 3888.0, "text": " should have their own development branch.", "tokens": [51314, 820, 362, 641, 1065, 3250, 9819, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08070383720027591, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.07470585405826569}, {"id": 815, "seek": 386700, "start": 3888.0, "end": 3892.0, "text": " And each day or even more frequently than each day,", "tokens": [51414, 400, 1184, 786, 420, 754, 544, 10374, 813, 1184, 786, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08070383720027591, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.07470585405826569}, {"id": 816, "seek": 389200, "start": 3892.0, "end": 3897.0, "text": " but at minimum work is saved and pushed to the dev branch that they have daily,", "tokens": [50364, 457, 412, 7285, 589, 307, 6624, 293, 9152, 281, 264, 1905, 9819, 300, 436, 362, 5212, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08866476275257229, "compression_ratio": 1.6827309236947792, "no_speech_prob": 0.027147091925144196}, {"id": 817, "seek": 389200, "start": 3897.0, "end": 3902.0, "text": " which means that anyone can then check out another data scientist development branch.", "tokens": [50614, 597, 1355, 300, 2878, 393, 550, 1520, 484, 1071, 1412, 12662, 3250, 9819, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08866476275257229, "compression_ratio": 1.6827309236947792, "no_speech_prob": 0.027147091925144196}, {"id": 818, "seek": 389200, "start": 3902.0, "end": 3905.0, "text": " When ready to merge to master, you have to do a pull request.", "tokens": [50864, 1133, 1919, 281, 22183, 281, 4505, 11, 291, 362, 281, 360, 257, 2235, 5308, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08866476275257229, "compression_ratio": 1.6827309236947792, "no_speech_prob": 0.027147091925144196}, {"id": 819, "seek": 389200, "start": 3905.0, "end": 3914.0, "text": " So a data scientist says, OK, I think the deliverable notebooks as well as my laboratory notebooks are ready to be reviewed and pulled into master.", "tokens": [51014, 407, 257, 1412, 12662, 1619, 11, 2264, 11, 286, 519, 264, 4239, 712, 43782, 382, 731, 382, 452, 16523, 43782, 366, 1919, 281, 312, 18429, 293, 7373, 666, 4505, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08866476275257229, "compression_ratio": 1.6827309236947792, "no_speech_prob": 0.027147091925144196}, {"id": 820, "seek": 389200, "start": 3914.0, "end": 3917.0, "text": " Now the question of what exactly to commit.", "tokens": [51464, 823, 264, 1168, 295, 437, 2293, 281, 5599, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08866476275257229, "compression_ratio": 1.6827309236947792, "no_speech_prob": 0.027147091925144196}, {"id": 821, "seek": 391700, "start": 3917.0, "end": 3924.0, "text": " This is a question that people who come from a more software engineering background might start to recoil at my suggestions here.", "tokens": [50364, 639, 307, 257, 1168, 300, 561, 567, 808, 490, 257, 544, 4722, 7043, 3678, 1062, 722, 281, 42053, 412, 452, 13396, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06172811162882838, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.2656244933605194}, {"id": 822, "seek": 391700, "start": 3924.0, "end": 3929.0, "text": " I say this after a lot of thought and there might be a better way of doing it, but this is the best way that I can come up with.", "tokens": [50714, 286, 584, 341, 934, 257, 688, 295, 1194, 293, 456, 1062, 312, 257, 1101, 636, 295, 884, 309, 11, 457, 341, 307, 264, 1151, 636, 300, 286, 393, 808, 493, 365, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06172811162882838, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.2656244933605194}, {"id": 823, "seek": 391700, "start": 3929.0, "end": 3940.0, "text": " So I recommend committing the .ipynb files, which are the notebook files, the .py and the .html of all notebooks, both develop and deliver.", "tokens": [50964, 407, 286, 2748, 26659, 264, 2411, 647, 2534, 65, 7098, 11, 597, 366, 264, 21060, 7098, 11, 264, 2411, 8200, 293, 264, 2411, 357, 15480, 295, 439, 43782, 11, 1293, 1499, 293, 4239, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06172811162882838, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.2656244933605194}, {"id": 824, "seek": 391700, "start": 3940.0, "end": 3944.0, "text": " And I'll also say any of the figures that are saved should also be committed.", "tokens": [51514, 400, 286, 603, 611, 584, 604, 295, 264, 9624, 300, 366, 6624, 820, 611, 312, 7784, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06172811162882838, "compression_ratio": 1.6819787985865724, "no_speech_prob": 0.2656244933605194}, {"id": 825, "seek": 394400, "start": 3944.0, "end": 3948.0, "text": " Now, when I say the .py and the .html, what am I referring to?", "tokens": [50364, 823, 11, 562, 286, 584, 264, 2411, 8200, 293, 264, 2411, 357, 15480, 11, 437, 669, 286, 13761, 281, 30, 50564], "temperature": 0.0, "avg_logprob": -0.08018136024475098, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.06749517470598221}, {"id": 826, "seek": 394400, "start": 3948.0, "end": 3951.0, "text": " So I'll go to an open notebook right now.", "tokens": [50564, 407, 286, 603, 352, 281, 364, 1269, 21060, 558, 586, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08018136024475098, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.06749517470598221}, {"id": 827, "seek": 394400, "start": 3951.0, "end": 3955.0, "text": " This is a notebook for making a prediction about call production.", "tokens": [50714, 639, 307, 257, 21060, 337, 1455, 257, 17630, 466, 818, 4265, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08018136024475098, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.06749517470598221}, {"id": 828, "seek": 394400, "start": 3955.0, "end": 3958.0, "text": " And this is in the develop folder of a certain directory.", "tokens": [50914, 400, 341, 307, 294, 264, 1499, 10820, 295, 257, 1629, 21120, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08018136024475098, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.06749517470598221}, {"id": 829, "seek": 394400, "start": 3958.0, "end": 3965.0, "text": " And I have this notebook that's currently running and you can tell it's running by the green symbol here and the words running green all the way to the right.", "tokens": [51064, 400, 286, 362, 341, 21060, 300, 311, 4362, 2614, 293, 291, 393, 980, 309, 311, 2614, 538, 264, 3092, 5986, 510, 293, 264, 2283, 2614, 3092, 439, 264, 636, 281, 264, 558, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08018136024475098, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.06749517470598221}, {"id": 830, "seek": 396500, "start": 3965.0, "end": 3974.0, "text": " So let's go to this running notebook and actually save it, save in checkpoint and download as a Python file.", "tokens": [50364, 407, 718, 311, 352, 281, 341, 2614, 21060, 293, 767, 3155, 309, 11, 3155, 294, 42269, 293, 5484, 382, 257, 15329, 3991, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1264955649215184, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.6034110188484192}, {"id": 831, "seek": 396500, "start": 3974.0, "end": 3984.0, "text": " Let's download it to the same directory of develop, save that, and let's download this as an .html file and save it in the same spot.", "tokens": [50814, 961, 311, 5484, 309, 281, 264, 912, 21120, 295, 1499, 11, 3155, 300, 11, 293, 718, 311, 5484, 341, 382, 364, 2411, 357, 15480, 3991, 293, 3155, 309, 294, 264, 912, 4008, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1264955649215184, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.6034110188484192}, {"id": 832, "seek": 396500, "start": 3984.0, "end": 3991.0, "text": " So if we take a look at what this is, it has taken all of the Python code and none of the output,", "tokens": [51314, 407, 498, 321, 747, 257, 574, 412, 437, 341, 307, 11, 309, 575, 2726, 439, 295, 264, 15329, 3089, 293, 6022, 295, 264, 5598, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1264955649215184, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.6034110188484192}, {"id": 833, "seek": 399100, "start": 3991.0, "end": 3995.0, "text": " but it's shipped out everything else in this file that's not Python code.", "tokens": [50364, 457, 309, 311, 25312, 484, 1203, 1646, 294, 341, 3991, 300, 311, 406, 15329, 3089, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 834, "seek": 399100, "start": 3995.0, "end": 3998.0, "text": " And so you see this input three, input four, and so on.", "tokens": [50564, 400, 370, 291, 536, 341, 4846, 1045, 11, 4846, 1451, 11, 293, 370, 322, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 835, "seek": 399100, "start": 3998.0, "end": 4004.0, "text": " This is delineating the cells in the notebook, but everything you see here is actually Python code.", "tokens": [50714, 639, 307, 1103, 533, 990, 264, 5438, 294, 264, 21060, 11, 457, 1203, 291, 536, 510, 307, 767, 15329, 3089, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 836, "seek": 399100, "start": 4004.0, "end": 4009.0, "text": " So this can actually run as a .py or you can run it as Python, this file name.", "tokens": [51014, 407, 341, 393, 767, 1190, 382, 257, 2411, 8200, 420, 291, 393, 1190, 309, 382, 15329, 11, 341, 3991, 1315, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 837, "seek": 399100, "start": 4009.0, "end": 4016.0, "text": " And this .html file, if we open up this file, we actually see the HTML representation of the notebook.", "tokens": [51264, 400, 341, 2411, 357, 15480, 3991, 11, 498, 321, 1269, 493, 341, 3991, 11, 321, 767, 536, 264, 17995, 10290, 295, 264, 21060, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 838, "seek": 399100, "start": 4016.0, "end": 4018.0, "text": " So this is not executable.", "tokens": [51614, 407, 341, 307, 406, 7568, 712, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 839, "seek": 399100, "start": 4018.0, "end": 4020.0, "text": " This is just a .html file.", "tokens": [51714, 639, 307, 445, 257, 2411, 357, 15480, 3991, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08528819564701051, "compression_ratio": 1.921487603305785, "no_speech_prob": 0.3660360872745514}, {"id": 840, "seek": 402000, "start": 4020.0, "end": 4026.0, "text": " And so this can be copied into an email and read by anyone who opens this with a web browser.", "tokens": [50364, 400, 370, 341, 393, 312, 25365, 666, 364, 3796, 293, 1401, 538, 2878, 567, 9870, 341, 365, 257, 3670, 11185, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06743580308453791, "compression_ratio": 1.6408450704225352, "no_speech_prob": 0.012047411873936653}, {"id": 841, "seek": 402000, "start": 4026.0, "end": 4030.0, "text": " You don't need to run Python or IPython to actually see the output here.", "tokens": [50664, 509, 500, 380, 643, 281, 1190, 15329, 420, 8671, 88, 11943, 281, 767, 536, 264, 5598, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06743580308453791, "compression_ratio": 1.6408450704225352, "no_speech_prob": 0.012047411873936653}, {"id": 842, "seek": 402000, "start": 4030.0, "end": 4034.0, "text": " Again, the limitation, though, is you cannot actually edit this code and make a new plot,", "tokens": [50864, 3764, 11, 264, 27432, 11, 1673, 11, 307, 291, 2644, 767, 8129, 341, 3089, 293, 652, 257, 777, 7542, 11, 51064], "temperature": 0.0, "avg_logprob": -0.06743580308453791, "compression_ratio": 1.6408450704225352, "no_speech_prob": 0.012047411873936653}, {"id": 843, "seek": 402000, "start": 4034.0, "end": 4038.0, "text": " but this is great for being able to share a particular notebook.", "tokens": [51064, 457, 341, 307, 869, 337, 885, 1075, 281, 2073, 257, 1729, 21060, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06743580308453791, "compression_ratio": 1.6408450704225352, "no_speech_prob": 0.012047411873936653}, {"id": 844, "seek": 402000, "start": 4038.0, "end": 4044.0, "text": " So I recommend saving both of those file types to your Git repository.", "tokens": [51264, 407, 286, 2748, 6816, 1293, 295, 729, 3991, 3467, 281, 428, 16939, 25841, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06743580308453791, "compression_ratio": 1.6408450704225352, "no_speech_prob": 0.012047411873936653}, {"id": 845, "seek": 402000, "start": 4044.0, "end": 4048.0, "text": " And of course, all of the figures as well if you create separate figures.", "tokens": [51564, 400, 295, 1164, 11, 439, 295, 264, 9624, 382, 731, 498, 291, 1884, 4994, 9624, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06743580308453791, "compression_ratio": 1.6408450704225352, "no_speech_prob": 0.012047411873936653}, {"id": 846, "seek": 404800, "start": 4048.0, "end": 4056.0, "text": " The reasoning behind that is that the .py files allows a person to make easy changes to the actual Python code itself,", "tokens": [50364, 440, 21577, 2261, 300, 307, 300, 264, 2411, 8200, 7098, 4045, 257, 954, 281, 652, 1858, 2962, 281, 264, 3539, 15329, 3089, 2564, 11, 50764], "temperature": 0.0, "avg_logprob": -0.04796488545521969, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.01132878940552473}, {"id": 847, "seek": 404800, "start": 4056.0, "end": 4058.0, "text": " as well as to track those changes.", "tokens": [50764, 382, 731, 382, 281, 2837, 729, 2962, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04796488545521969, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.01132878940552473}, {"id": 848, "seek": 404800, "start": 4058.0, "end": 4064.0, "text": " The .html file allows a person to see the fully rendered notebook without having to run a notebook themselves.", "tokens": [50864, 440, 2411, 357, 15480, 3991, 4045, 257, 954, 281, 536, 264, 4498, 28748, 21060, 1553, 1419, 281, 1190, 257, 21060, 2969, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04796488545521969, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.01132878940552473}, {"id": 849, "seek": 404800, "start": 4064.0, "end": 4068.0, "text": " So the benefits of structuring your repository this way are several fold.", "tokens": [51164, 407, 264, 5311, 295, 6594, 1345, 428, 25841, 341, 636, 366, 2940, 4860, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04796488545521969, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.01132878940552473}, {"id": 850, "seek": 404800, "start": 4068.0, "end": 4072.0, "text": " First of all, you have a complete record of the analysis that includes dead ends.", "tokens": [51364, 2386, 295, 439, 11, 291, 362, 257, 3566, 2136, 295, 264, 5215, 300, 5974, 3116, 5314, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04796488545521969, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.01132878940552473}, {"id": 851, "seek": 404800, "start": 4072.0, "end": 4077.0, "text": " So if one day you worked down a single hypothesis and turned out that it wasn't very useful,", "tokens": [51564, 407, 498, 472, 786, 291, 2732, 760, 257, 2167, 17291, 293, 3574, 484, 300, 309, 2067, 380, 588, 4420, 11, 51814], "temperature": 0.0, "avg_logprob": -0.04796488545521969, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.01132878940552473}, {"id": 852, "seek": 407700, "start": 4077.0, "end": 4080.0, "text": " that is still saved in the lab notebook directory.", "tokens": [50364, 300, 307, 920, 6624, 294, 264, 2715, 21060, 21120, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0629339619217632, "compression_ratio": 1.7007874015748032, "no_speech_prob": 0.010980203747749329}, {"id": 853, "seek": 407700, "start": 4080.0, "end": 4085.0, "text": " It also allows for easy peer review of the analysis and of the dead ends.", "tokens": [50514, 467, 611, 4045, 337, 1858, 15108, 3131, 295, 264, 5215, 293, 295, 264, 3116, 5314, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0629339619217632, "compression_ratio": 1.7007874015748032, "no_speech_prob": 0.010980203747749329}, {"id": 854, "seek": 407700, "start": 4085.0, "end": 4091.0, "text": " If in the future, a different team member has an idea to try to do a random forest regression on the data,", "tokens": [50764, 759, 294, 264, 2027, 11, 257, 819, 1469, 4006, 575, 364, 1558, 281, 853, 281, 360, 257, 4974, 6719, 24590, 322, 264, 1412, 11, 51064], "temperature": 0.0, "avg_logprob": -0.0629339619217632, "compression_ratio": 1.7007874015748032, "no_speech_prob": 0.010980203747749329}, {"id": 855, "seek": 407700, "start": 4091.0, "end": 4094.0, "text": " they can actually see if someone else has done the same type of analysis,", "tokens": [51064, 436, 393, 767, 536, 498, 1580, 1646, 575, 1096, 264, 912, 2010, 295, 5215, 11, 51214], "temperature": 0.0, "avg_logprob": -0.0629339619217632, "compression_ratio": 1.7007874015748032, "no_speech_prob": 0.010980203747749329}, {"id": 856, "seek": 407700, "start": 4094.0, "end": 4097.0, "text": " and if so, what led to a dead end, for example.", "tokens": [51214, 293, 498, 370, 11, 437, 4684, 281, 257, 3116, 917, 11, 337, 1365, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0629339619217632, "compression_ratio": 1.7007874015748032, "no_speech_prob": 0.010980203747749329}, {"id": 857, "seek": 407700, "start": 4097.0, "end": 4102.0, "text": " And finally, project managers can easily see and read the analysis with GitHub", "tokens": [51364, 400, 2721, 11, 1716, 14084, 393, 3612, 536, 293, 1401, 264, 5215, 365, 23331, 51614], "temperature": 0.0, "avg_logprob": -0.0629339619217632, "compression_ratio": 1.7007874015748032, "no_speech_prob": 0.010980203747749329}, {"id": 858, "seek": 410200, "start": 4102.0, "end": 4105.0, "text": " because GitHub itself renders IP, UI, and Bs natively.", "tokens": [50364, 570, 23331, 2564, 6125, 433, 8671, 11, 15682, 11, 293, 363, 82, 8470, 356, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 859, "seek": 410200, "start": 4105.0, "end": 4109.0, "text": " Or if you don't have GitHub access or not rendering it for whatever reason,", "tokens": [50514, 1610, 498, 291, 500, 380, 362, 23331, 2105, 420, 406, 22407, 309, 337, 2035, 1778, 11, 50714], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 860, "seek": 410200, "start": 4109.0, "end": 4115.0, "text": " if you save the .html files, anyone can actually see the rendered notebook without having to run any code themselves,", "tokens": [50714, 498, 291, 3155, 264, 2411, 357, 15480, 7098, 11, 2878, 393, 767, 536, 264, 28748, 21060, 1553, 1419, 281, 1190, 604, 3089, 2969, 11, 51014], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 861, "seek": 410200, "start": 4115.0, "end": 4118.0, "text": " or installing IPython or anything else.", "tokens": [51014, 420, 20762, 8671, 88, 11943, 420, 1340, 1646, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 862, "seek": 410200, "start": 4118.0, "end": 4121.0, "text": " Some final organization thoughts of this whole structure.", "tokens": [51164, 2188, 2572, 4475, 4598, 295, 341, 1379, 3877, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 863, "seek": 410200, "start": 4121.0, "end": 4124.0, "text": " So organizing the workflow for teams is actually a difficult problem,", "tokens": [51314, 407, 17608, 264, 20993, 337, 5491, 307, 767, 257, 2252, 1154, 11, 51464], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 864, "seek": 410200, "start": 4124.0, "end": 4128.0, "text": " and I think this is a very good framework for having some standards.", "tokens": [51464, 293, 286, 519, 341, 307, 257, 588, 665, 8388, 337, 1419, 512, 7787, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0969761143559995, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.07049575448036194}, {"id": 865, "seek": 412800, "start": 4128.0, "end": 4131.0, "text": " And this bullet point about the wrong thing solves the problem.", "tokens": [50364, 400, 341, 11632, 935, 466, 264, 2085, 551, 39890, 264, 1154, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0673133980144154, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.22244472801685333}, {"id": 866, "seek": 412800, "start": 4131.0, "end": 4136.0, "text": " Often with version control, software engineering types think we need the source that's version control", "tokens": [50514, 20043, 365, 3037, 1969, 11, 4722, 7043, 3467, 519, 321, 643, 264, 4009, 300, 311, 3037, 1969, 50764], "temperature": 0.0, "avg_logprob": -0.0673133980144154, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.22244472801685333}, {"id": 867, "seek": 412800, "start": 4136.0, "end": 4140.0, "text": " and we don't need to track the output, or that output is something that's blown away.", "tokens": [50764, 293, 321, 500, 380, 643, 281, 2837, 264, 5598, 11, 420, 300, 5598, 307, 746, 300, 311, 16479, 1314, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0673133980144154, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.22244472801685333}, {"id": 868, "seek": 412800, "start": 4140.0, "end": 4144.0, "text": " In data science work, the output is often the thing we need to look at.", "tokens": [50964, 682, 1412, 3497, 589, 11, 264, 5598, 307, 2049, 264, 551, 321, 643, 281, 574, 412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0673133980144154, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.22244472801685333}, {"id": 869, "seek": 412800, "start": 4144.0, "end": 4147.0, "text": " For example, if there is a plot that shows some deviation,", "tokens": [51164, 1171, 1365, 11, 498, 456, 307, 257, 7542, 300, 3110, 512, 25163, 11, 51314], "temperature": 0.0, "avg_logprob": -0.0673133980144154, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.22244472801685333}, {"id": 870, "seek": 412800, "start": 4147.0, "end": 4153.0, "text": " that plot is best viewed in the peer review process, actually in the notebook itself,", "tokens": [51314, 300, 7542, 307, 1151, 19174, 294, 264, 15108, 3131, 1399, 11, 767, 294, 264, 21060, 2564, 11, 51614], "temperature": 0.0, "avg_logprob": -0.0673133980144154, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.22244472801685333}, {"id": 871, "seek": 415300, "start": 4153.0, "end": 4159.0, "text": " or in an .html rendering of that notebook, because that gives rise to any sort of correction", "tokens": [50364, 420, 294, 364, 2411, 357, 15480, 22407, 295, 300, 21060, 11, 570, 300, 2709, 6272, 281, 604, 1333, 295, 19984, 50664], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 872, "seek": 415300, "start": 4159.0, "end": 4161.0, "text": " or reinterpretation that needs to happen.", "tokens": [50664, 420, 319, 41935, 399, 300, 2203, 281, 1051, 13, 50764], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 873, "seek": 415300, "start": 4161.0, "end": 4165.0, "text": " So the output actually is the thing that matters in a lot of data science work.", "tokens": [50764, 407, 264, 5598, 767, 307, 264, 551, 300, 7001, 294, 257, 688, 295, 1412, 3497, 589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 874, "seek": 415300, "start": 4165.0, "end": 4168.0, "text": " So storing that in version control is actually the right thing to do,", "tokens": [50964, 407, 26085, 300, 294, 3037, 1969, 307, 767, 264, 558, 551, 281, 360, 11, 51114], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 875, "seek": 415300, "start": 4168.0, "end": 4172.0, "text": " even though in typical practice it's the wrong to actually store the output.", "tokens": [51114, 754, 1673, 294, 7476, 3124, 309, 311, 264, 2085, 281, 767, 3531, 264, 5598, 13, 51314], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 876, "seek": 415300, "start": 4172.0, "end": 4176.0, "text": " Finally, I am open to new ideas if you have a better way of solving these problems,", "tokens": [51314, 6288, 11, 286, 669, 1269, 281, 777, 3487, 498, 291, 362, 257, 1101, 636, 295, 12606, 613, 2740, 11, 51514], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 877, "seek": 415300, "start": 4176.0, "end": 4180.0, "text": " or if your situation is completely different so that such that you will always be using GitHub,", "tokens": [51514, 420, 498, 428, 2590, 307, 2584, 819, 370, 300, 1270, 300, 291, 486, 1009, 312, 1228, 23331, 11, 51714], "temperature": 0.0, "avg_logprob": -0.064422108232975, "compression_ratio": 1.7679738562091503, "no_speech_prob": 0.23347355425357819}, {"id": 878, "seek": 418000, "start": 4180.0, "end": 4184.0, "text": " you never have to worry about seeing a rendered .html file.", "tokens": [50364, 291, 1128, 362, 281, 3292, 466, 2577, 257, 28748, 2411, 357, 15480, 3991, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0797200804775201, "compression_ratio": 1.6703703703703703, "no_speech_prob": 0.018823424354195595}, {"id": 879, "seek": 418000, "start": 4184.0, "end": 4189.0, "text": " You can make these modifications by doing your own version of this kind of organization.", "tokens": [50564, 509, 393, 652, 613, 26881, 538, 884, 428, 1065, 3037, 295, 341, 733, 295, 4475, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0797200804775201, "compression_ratio": 1.6703703703703703, "no_speech_prob": 0.018823424354195595}, {"id": 880, "seek": 418000, "start": 4189.0, "end": 4194.0, "text": " So hopefully this gave you some structure to organize how a team of data scientists", "tokens": [50814, 407, 4696, 341, 2729, 291, 512, 3877, 281, 13859, 577, 257, 1469, 295, 1412, 7708, 51064], "temperature": 0.0, "avg_logprob": -0.0797200804775201, "compression_ratio": 1.6703703703703703, "no_speech_prob": 0.018823424354195595}, {"id": 881, "seek": 418000, "start": 4194.0, "end": 4197.0, "text": " would work in a Git environment.", "tokens": [51064, 576, 589, 294, 257, 16939, 2823, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0797200804775201, "compression_ratio": 1.6703703703703703, "no_speech_prob": 0.018823424354195595}, {"id": 882, "seek": 418000, "start": 4199.0, "end": 4203.0, "text": " In this lesson, we'll be getting some data that we can actually do some data science with.", "tokens": [51314, 682, 341, 6898, 11, 321, 603, 312, 1242, 512, 1412, 300, 321, 393, 767, 360, 512, 1412, 3497, 365, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0797200804775201, "compression_ratio": 1.6703703703703703, "no_speech_prob": 0.018823424354195595}, {"id": 883, "seek": 418000, "start": 4203.0, "end": 4208.0, "text": " I recommend having a data folder in your projects directory that actually is at the same level", "tokens": [51514, 286, 2748, 1419, 257, 1412, 10820, 294, 428, 4455, 21120, 300, 767, 307, 412, 264, 912, 1496, 51764], "temperature": 0.0, "avg_logprob": -0.0797200804775201, "compression_ratio": 1.6703703703703703, "no_speech_prob": 0.018823424354195595}, {"id": 884, "seek": 420800, "start": 4208.0, "end": 4212.0, "text": " as your deliver directory, your development directory, and your source directory.", "tokens": [50364, 382, 428, 4239, 21120, 11, 428, 3250, 21120, 11, 293, 428, 4009, 21120, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13103838320131656, "compression_ratio": 1.6733067729083666, "no_speech_prob": 0.04954523593187332}, {"id": 885, "seek": 420800, "start": 4212.0, "end": 4217.0, "text": " In my case, I have about 10 files in here that are coal data from the U.S. government.", "tokens": [50564, 682, 452, 1389, 11, 286, 362, 466, 1266, 7098, 294, 510, 300, 366, 10209, 1412, 490, 264, 624, 13, 50, 13, 2463, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13103838320131656, "compression_ratio": 1.6733067729083666, "no_speech_prob": 0.04954523593187332}, {"id": 886, "seek": 420800, "start": 4217.0, "end": 4224.0, "text": " If you'd like to grab this same data set so you can follow along, go to www.eia.gov.", "tokens": [50814, 759, 291, 1116, 411, 281, 4444, 341, 912, 1412, 992, 370, 291, 393, 1524, 2051, 11, 352, 281, 12520, 13, 68, 654, 13, 16089, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13103838320131656, "compression_ratio": 1.6733067729083666, "no_speech_prob": 0.04954523593187332}, {"id": 887, "seek": 420800, "start": 4224.0, "end": 4228.0, "text": " This is the government's energy information administration website,", "tokens": [51164, 639, 307, 264, 2463, 311, 2281, 1589, 7236, 3144, 11, 51364], "temperature": 0.0, "avg_logprob": -0.13103838320131656, "compression_ratio": 1.6733067729083666, "no_speech_prob": 0.04954523593187332}, {"id": 888, "seek": 420800, "start": 4228.0, "end": 4234.0, "text": " and if you go to the data tab, you can scroll down to where it says production, give that a click.", "tokens": [51364, 293, 498, 291, 352, 281, 264, 1412, 4421, 11, 291, 393, 11369, 760, 281, 689, 309, 1619, 4265, 11, 976, 300, 257, 2052, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13103838320131656, "compression_ratio": 1.6733067729083666, "no_speech_prob": 0.04954523593187332}, {"id": 889, "seek": 423400, "start": 4234.0, "end": 4237.0, "text": " And there's lots of different data available here,", "tokens": [50364, 400, 456, 311, 3195, 295, 819, 1412, 2435, 510, 11, 50514], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 890, "seek": 423400, "start": 4237.0, "end": 4243.0, "text": " but we're looking at the historical detailed coal production data available from 1983 to 2013.", "tokens": [50514, 457, 321, 434, 1237, 412, 264, 8584, 9942, 10209, 4265, 1412, 2435, 490, 31758, 281, 9012, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 891, "seek": 423400, "start": 4243.0, "end": 4247.0, "text": " Select which year you'd like to do, and in case I picked 10 of them,", "tokens": [50814, 13638, 597, 1064, 291, 1116, 411, 281, 360, 11, 293, 294, 1389, 286, 6183, 1266, 295, 552, 11, 51014], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 892, "seek": 423400, "start": 4247.0, "end": 4250.0, "text": " click the arrow here and save it into that data directory.", "tokens": [51014, 2052, 264, 11610, 510, 293, 3155, 309, 666, 300, 1412, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 893, "seek": 423400, "start": 4250.0, "end": 4255.0, "text": " Once you do that, you'll then have the data that we'll need for this upcoming lessons.", "tokens": [51164, 3443, 291, 360, 300, 11, 291, 603, 550, 362, 264, 1412, 300, 321, 603, 643, 337, 341, 11500, 8820, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 894, "seek": 423400, "start": 4257.0, "end": 4260.0, "text": " In this lesson, we're going to take our very first look at the data.", "tokens": [51514, 682, 341, 6898, 11, 321, 434, 516, 281, 747, 527, 588, 700, 574, 412, 264, 1412, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 895, "seek": 423400, "start": 4260.0, "end": 4263.0, "text": " We might even do some initial data cleaning.", "tokens": [51664, 492, 1062, 754, 360, 512, 5883, 1412, 8924, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05362311130812188, "compression_ratio": 1.6344827586206896, "no_speech_prob": 0.001000368152745068}, {"id": 896, "seek": 426300, "start": 4263.0, "end": 4269.0, "text": " I'm currently in this directory where you can see we have data, deliver, development, and source directories.", "tokens": [50364, 286, 478, 4362, 294, 341, 21120, 689, 291, 393, 536, 321, 362, 1412, 11, 4239, 11, 3250, 11, 293, 4009, 5391, 530, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10716371687631758, "compression_ratio": 1.8615384615384616, "no_speech_prob": 0.0008039898239076138}, {"id": 897, "seek": 426300, "start": 4269.0, "end": 4273.0, "text": " I'm going to start the Jupyter Notebook by, again, typing Jupyter Notebook.", "tokens": [50664, 286, 478, 516, 281, 722, 264, 22125, 88, 391, 11633, 2939, 538, 11, 797, 11, 18444, 22125, 88, 391, 11633, 2939, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10716371687631758, "compression_ratio": 1.8615384615384616, "no_speech_prob": 0.0008039898239076138}, {"id": 898, "seek": 426300, "start": 4273.0, "end": 4276.0, "text": " From here, we see the same directories I just saw in that directory.", "tokens": [50864, 3358, 510, 11, 321, 536, 264, 912, 5391, 530, 286, 445, 1866, 294, 300, 21120, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10716371687631758, "compression_ratio": 1.8615384615384616, "no_speech_prob": 0.0008039898239076138}, {"id": 899, "seek": 426300, "start": 4276.0, "end": 4283.0, "text": " Let's open up the development list and start a new notebook by going over to new Python 2 notebook.", "tokens": [51014, 961, 311, 1269, 493, 264, 3250, 1329, 293, 722, 257, 777, 21060, 538, 516, 670, 281, 777, 15329, 568, 21060, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10716371687631758, "compression_ratio": 1.8615384615384616, "no_speech_prob": 0.0008039898239076138}, {"id": 900, "seek": 426300, "start": 4283.0, "end": 4286.0, "text": " From here, we see the familiar text box where you can type in code.", "tokens": [51364, 3358, 510, 11, 321, 536, 264, 4963, 2487, 2424, 689, 291, 393, 2010, 294, 3089, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10716371687631758, "compression_ratio": 1.8615384615384616, "no_speech_prob": 0.0008039898239076138}, {"id": 901, "seek": 426300, "start": 4286.0, "end": 4289.0, "text": " In here, we see the code box is actually surrounded by green,", "tokens": [51514, 682, 510, 11, 321, 536, 264, 3089, 2424, 307, 767, 13221, 538, 3092, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10716371687631758, "compression_ratio": 1.8615384615384616, "no_speech_prob": 0.0008039898239076138}, {"id": 902, "seek": 428900, "start": 4289.0, "end": 4293.0, "text": " which means as we type, it should be typing in text into that cell.", "tokens": [50364, 597, 1355, 382, 321, 2010, 11, 309, 820, 312, 18444, 294, 2487, 666, 300, 2815, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07966281497289264, "compression_ratio": 1.830827067669173, "no_speech_prob": 0.013844745233654976}, {"id": 903, "seek": 428900, "start": 4293.0, "end": 4298.0, "text": " We're going to need the pandas library, and we're going to import it as import pandas as pd.", "tokens": [50564, 492, 434, 516, 281, 643, 264, 4565, 296, 6405, 11, 293, 321, 434, 516, 281, 974, 309, 382, 974, 4565, 296, 382, 280, 67, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07966281497289264, "compression_ratio": 1.830827067669173, "no_speech_prob": 0.013844745233654976}, {"id": 904, "seek": 428900, "start": 4298.0, "end": 4303.0, "text": " This can create alias for the pandas library to actually be called pd.", "tokens": [50814, 639, 393, 1884, 419, 4609, 337, 264, 4565, 296, 6405, 281, 767, 312, 1219, 280, 67, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07966281497289264, "compression_ratio": 1.830827067669173, "no_speech_prob": 0.013844745233654976}, {"id": 905, "seek": 428900, "start": 4303.0, "end": 4308.0, "text": " This is a standard way of calling pandas, and I recommend you following the standards as often as possible.", "tokens": [51064, 639, 307, 257, 3832, 636, 295, 5141, 4565, 296, 11, 293, 286, 2748, 291, 3480, 264, 7787, 382, 2049, 382, 1944, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07966281497289264, "compression_ratio": 1.830827067669173, "no_speech_prob": 0.013844745233654976}, {"id": 906, "seek": 428900, "start": 4308.0, "end": 4312.0, "text": " This lets you share your code with other people in the most seamless way possible.", "tokens": [51314, 639, 6653, 291, 2073, 428, 3089, 365, 661, 561, 294, 264, 881, 28677, 636, 1944, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07966281497289264, "compression_ratio": 1.830827067669173, "no_speech_prob": 0.013844745233654976}, {"id": 907, "seek": 428900, "start": 4312.0, "end": 4316.0, "text": " To run the cell, I can click the run cell button in the toolbar,", "tokens": [51514, 1407, 1190, 264, 2815, 11, 286, 393, 2052, 264, 1190, 2815, 2960, 294, 264, 47715, 11, 51714], "temperature": 0.0, "avg_logprob": -0.07966281497289264, "compression_ratio": 1.830827067669173, "no_speech_prob": 0.013844745233654976}, {"id": 908, "seek": 431600, "start": 4316.0, "end": 4323.0, "text": " or I can have done the shift enter technique, which, as you can see, increments which input number it is by one.", "tokens": [50364, 420, 286, 393, 362, 1096, 264, 5513, 3242, 6532, 11, 597, 11, 382, 291, 393, 536, 11, 1946, 1117, 597, 4846, 1230, 309, 307, 538, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07492875230723414, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.06093451380729675}, {"id": 909, "seek": 431600, "start": 4323.0, "end": 4330.0, "text": " The pandas version that I'm actually running is done by doing a print double underscore and then hitting the tab button.", "tokens": [50714, 440, 4565, 296, 3037, 300, 286, 478, 767, 2614, 307, 1096, 538, 884, 257, 4482, 3834, 37556, 293, 550, 8850, 264, 4421, 2960, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07492875230723414, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.06093451380729675}, {"id": 910, "seek": 431600, "start": 4330.0, "end": 4334.0, "text": " Hitting tab is a thing you should be thinking about doing quite often,", "tokens": [51064, 389, 2414, 4421, 307, 257, 551, 291, 820, 312, 1953, 466, 884, 1596, 2049, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07492875230723414, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.06093451380729675}, {"id": 911, "seek": 431600, "start": 4334.0, "end": 4337.0, "text": " because it often lets you make sure you don't have to type everything out.", "tokens": [51264, 570, 309, 2049, 6653, 291, 652, 988, 291, 500, 380, 362, 281, 2010, 1203, 484, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07492875230723414, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.06093451380729675}, {"id": 912, "seek": 431600, "start": 4337.0, "end": 4342.0, "text": " It's faster, but also make sure you are in the right vicinity of what you're hoping to do.", "tokens": [51414, 467, 311, 4663, 11, 457, 611, 652, 988, 291, 366, 294, 264, 558, 42387, 295, 437, 291, 434, 7159, 281, 360, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07492875230723414, "compression_ratio": 1.7028985507246377, "no_speech_prob": 0.06093451380729675}, {"id": 913, "seek": 434200, "start": 4342.0, "end": 4345.0, "text": " There's a version, I'm going to hit return here, and then shift return,", "tokens": [50364, 821, 311, 257, 3037, 11, 286, 478, 516, 281, 2045, 2736, 510, 11, 293, 550, 5513, 2736, 11, 50514], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 914, "seek": 434200, "start": 4345.0, "end": 4350.0, "text": " and it prints the pandas version that we're using, which is 0.17.0.", "tokens": [50514, 293, 309, 22305, 264, 4565, 296, 3037, 300, 321, 434, 1228, 11, 597, 307, 1958, 13, 7773, 13, 15, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 915, "seek": 434200, "start": 4350.0, "end": 4354.0, "text": " From here, let's actually take a look at our very first data file.", "tokens": [50764, 3358, 510, 11, 718, 311, 767, 747, 257, 574, 412, 527, 588, 700, 1412, 3991, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 916, "seek": 434200, "start": 4354.0, "end": 4358.0, "text": " The way we can read this in, we happen to know, and here's an interesting side note,", "tokens": [50964, 440, 636, 321, 393, 1401, 341, 294, 11, 321, 1051, 281, 458, 11, 293, 510, 311, 364, 1880, 1252, 3637, 11, 51164], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 917, "seek": 434200, "start": 4358.0, "end": 4363.0, "text": " if you type ls and execute that, you actually see all the folders in the directory you're currently in.", "tokens": [51164, 498, 291, 2010, 287, 82, 293, 14483, 300, 11, 291, 767, 536, 439, 264, 31082, 294, 264, 21120, 291, 434, 4362, 294, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 918, "seek": 434200, "start": 4363.0, "end": 4367.0, "text": " If you type ls up one, we see the parent directory,", "tokens": [51414, 759, 291, 2010, 287, 82, 493, 472, 11, 321, 536, 264, 2596, 21120, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 919, "seek": 434200, "start": 4367.0, "end": 4370.0, "text": " and if you'd like to look at what's in data,", "tokens": [51614, 293, 498, 291, 1116, 411, 281, 574, 412, 437, 311, 294, 1412, 11, 51764], "temperature": 0.0, "avg_logprob": -0.08526171691028785, "compression_ratio": 1.7385159010600706, "no_speech_prob": 0.1142764687538147}, {"id": 920, "seek": 437000, "start": 4370.0, "end": 4374.0, "text": " we see the files that we just downloaded in the previous video.", "tokens": [50364, 321, 536, 264, 7098, 300, 321, 445, 21748, 294, 264, 3894, 960, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10933873711562739, "compression_ratio": 1.75, "no_speech_prob": 0.0034287339076399803}, {"id": 921, "seek": 437000, "start": 4374.0, "end": 4379.0, "text": " Let's load in one of these Excel files and take a look at what's actually in them.", "tokens": [50564, 961, 311, 3677, 294, 472, 295, 613, 19060, 7098, 293, 747, 257, 574, 412, 437, 311, 767, 294, 552, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10933873711562739, "compression_ratio": 1.75, "no_speech_prob": 0.0034287339076399803}, {"id": 922, "seek": 437000, "start": 4379.0, "end": 4385.0, "text": " I'm going to create a variable called df for data frame, and I'm going to df1 for the first one.", "tokens": [50814, 286, 478, 516, 281, 1884, 257, 7006, 1219, 274, 69, 337, 1412, 3920, 11, 293, 286, 478, 516, 281, 274, 69, 16, 337, 264, 700, 472, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10933873711562739, "compression_ratio": 1.75, "no_speech_prob": 0.0034287339076399803}, {"id": 923, "seek": 437000, "start": 4385.0, "end": 4389.0, "text": " I'm going to do pd.read, and I think it's going to be Excel,", "tokens": [51114, 286, 478, 516, 281, 360, 280, 67, 13, 2538, 11, 293, 286, 519, 309, 311, 516, 281, 312, 19060, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10933873711562739, "compression_ratio": 1.75, "no_speech_prob": 0.0034287339076399803}, {"id": 924, "seek": 437000, "start": 4389.0, "end": 4392.0, "text": " but I type the tab and I see an option pull up, and it is.", "tokens": [51314, 457, 286, 2010, 264, 4421, 293, 286, 536, 364, 3614, 2235, 493, 11, 293, 309, 307, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10933873711562739, "compression_ratio": 1.75, "no_speech_prob": 0.0034287339076399803}, {"id": 925, "seek": 437000, "start": 4392.0, "end": 4396.0, "text": " It is pd.read underscore Excel, open parentheses.", "tokens": [51464, 467, 307, 280, 67, 13, 2538, 37556, 19060, 11, 1269, 34153, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10933873711562739, "compression_ratio": 1.75, "no_speech_prob": 0.0034287339076399803}, {"id": 926, "seek": 439600, "start": 4396.0, "end": 4401.0, "text": " At this point, if you're not sure what a function does, there's a function called tooltip,", "tokens": [50364, 1711, 341, 935, 11, 498, 291, 434, 406, 988, 437, 257, 2445, 775, 11, 456, 311, 257, 2445, 1219, 2290, 83, 647, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07751326194176307, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.028428366407752037}, {"id": 927, "seek": 439600, "start": 4401.0, "end": 4404.0, "text": " which is generated by holding down shift and hitting tab once.", "tokens": [50614, 597, 307, 10833, 538, 5061, 760, 5513, 293, 8850, 4421, 1564, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07751326194176307, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.028428366407752037}, {"id": 928, "seek": 439600, "start": 4404.0, "end": 4410.0, "text": " Here it tells you the signature for this function, which has an input output, a sheet name, header, and so on.", "tokens": [50764, 1692, 309, 5112, 291, 264, 13397, 337, 341, 2445, 11, 597, 575, 364, 4846, 5598, 11, 257, 8193, 1315, 11, 23117, 11, 293, 370, 322, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07751326194176307, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.028428366407752037}, {"id": 929, "seek": 439600, "start": 4410.0, "end": 4414.0, "text": " A lot of different options available for reading in Excel files.", "tokens": [51064, 316, 688, 295, 819, 3956, 2435, 337, 3760, 294, 19060, 7098, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07751326194176307, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.028428366407752037}, {"id": 930, "seek": 439600, "start": 4414.0, "end": 4419.0, "text": " There's actually a longer version of this, where if you do shift tab tab in rapid succession,", "tokens": [51264, 821, 311, 767, 257, 2854, 3037, 295, 341, 11, 689, 498, 291, 360, 5513, 4421, 4421, 294, 7558, 36624, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07751326194176307, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.028428366407752037}, {"id": 931, "seek": 439600, "start": 4419.0, "end": 4424.0, "text": " so it's a double tab, then you have the full doc string and the examples that go along with it.", "tokens": [51514, 370, 309, 311, 257, 3834, 4421, 11, 550, 291, 362, 264, 1577, 3211, 6798, 293, 264, 5110, 300, 352, 2051, 365, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07751326194176307, "compression_ratio": 1.6850649350649352, "no_speech_prob": 0.028428366407752037}, {"id": 932, "seek": 442400, "start": 4424.0, "end": 4429.0, "text": " This is a very useful feature, so you can actually look up documentation on the fly, and it's very useful.", "tokens": [50364, 639, 307, 257, 588, 4420, 4111, 11, 370, 291, 393, 767, 574, 493, 14333, 322, 264, 3603, 11, 293, 309, 311, 588, 4420, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 933, "seek": 442400, "start": 4429.0, "end": 4433.0, "text": " In this case, we're going to try to load in the data from above.", "tokens": [50614, 682, 341, 1389, 11, 321, 434, 516, 281, 853, 281, 3677, 294, 264, 1412, 490, 3673, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 934, "seek": 442400, "start": 4433.0, "end": 4437.0, "text": " Again, tab completing commands will make your life much easier.", "tokens": [50814, 3764, 11, 4421, 19472, 16901, 486, 652, 428, 993, 709, 3571, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 935, "seek": 442400, "start": 4437.0, "end": 4443.0, "text": " As I start typing out this, I can hit tab and it actually produces again a list of possible data sources.", "tokens": [51014, 1018, 286, 722, 18444, 484, 341, 11, 286, 393, 2045, 4421, 293, 309, 767, 14725, 797, 257, 1329, 295, 1944, 1412, 7139, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 936, "seek": 442400, "start": 4443.0, "end": 4445.0, "text": " Let's just see if this works.", "tokens": [51314, 961, 311, 445, 536, 498, 341, 1985, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 937, "seek": 442400, "start": 4445.0, "end": 4450.0, "text": " Head is a function on a data frame, and it lets you show the various options.", "tokens": [51414, 11398, 307, 257, 2445, 322, 257, 1412, 3920, 11, 293, 309, 6653, 291, 855, 264, 3683, 3956, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 938, "seek": 442400, "start": 4450.0, "end": 4452.0, "text": " We see that a number of things have happened here.", "tokens": [51664, 492, 536, 300, 257, 1230, 295, 721, 362, 2011, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08120275098224018, "compression_ratio": 1.6722408026755853, "no_speech_prob": 0.0028005465865135193}, {"id": 939, "seek": 445200, "start": 4452.0, "end": 4457.0, "text": " First, we have the year, the MSHA ID, the mine name, the mine state.", "tokens": [50364, 2386, 11, 321, 362, 264, 1064, 11, 264, 7395, 4983, 7348, 11, 264, 3892, 1315, 11, 264, 3892, 1785, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09723911937485394, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.07912931591272354}, {"id": 940, "seek": 445200, "start": 4457.0, "end": 4461.0, "text": " We actually see some of the data, and this is just the first few rows by doing head.", "tokens": [50614, 492, 767, 536, 512, 295, 264, 1412, 11, 293, 341, 307, 445, 264, 700, 1326, 13241, 538, 884, 1378, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09723911937485394, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.07912931591272354}, {"id": 941, "seek": 445200, "start": 4461.0, "end": 4466.0, "text": " I recommend doing head because it actually stores the full output of this.", "tokens": [50814, 286, 2748, 884, 1378, 570, 309, 767, 9512, 264, 1577, 5598, 295, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09723911937485394, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.07912931591272354}, {"id": 942, "seek": 445200, "start": 4466.0, "end": 4468.0, "text": " It's a separate thing that you can actually call.", "tokens": [51064, 467, 311, 257, 4994, 551, 300, 291, 393, 767, 818, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09723911937485394, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.07912931591272354}, {"id": 943, "seek": 445200, "start": 4468.0, "end": 4473.0, "text": " In future lessons, I'll explain exactly why using .head as best practices,", "tokens": [51164, 682, 2027, 8820, 11, 286, 603, 2903, 2293, 983, 1228, 2411, 1934, 382, 1151, 7525, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09723911937485394, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.07912931591272354}, {"id": 944, "seek": 445200, "start": 4473.0, "end": 4479.0, "text": " but for now, let's just use .head to look into the contents of our pandas data frames.", "tokens": [51414, 457, 337, 586, 11, 718, 311, 445, 764, 2411, 1934, 281, 574, 666, 264, 15768, 295, 527, 4565, 296, 1412, 12083, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09723911937485394, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.07912931591272354}, {"id": 945, "seek": 447900, "start": 4479.0, "end": 4484.0, "text": " At this point, we've taken a first look at loading in some Excel data files,", "tokens": [50364, 1711, 341, 935, 11, 321, 600, 2726, 257, 700, 574, 412, 15114, 294, 512, 19060, 1412, 7098, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0889987293471638, "compression_ratio": 1.671875, "no_speech_prob": 0.001454679062590003}, {"id": 946, "seek": 447900, "start": 4484.0, "end": 4487.0, "text": " and we're going to start looking at this and playing around with it.", "tokens": [50614, 293, 321, 434, 516, 281, 722, 1237, 412, 341, 293, 2433, 926, 365, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0889987293471638, "compression_ratio": 1.671875, "no_speech_prob": 0.001454679062590003}, {"id": 947, "seek": 447900, "start": 4489.0, "end": 4494.0, "text": " In this lesson, we're going to take a look at how we can start to manipulate the data that we've read in", "tokens": [50864, 682, 341, 6898, 11, 321, 434, 516, 281, 747, 257, 574, 412, 577, 321, 393, 722, 281, 20459, 264, 1412, 300, 321, 600, 1401, 294, 51114], "temperature": 0.0, "avg_logprob": -0.0889987293471638, "compression_ratio": 1.671875, "no_speech_prob": 0.001454679062590003}, {"id": 948, "seek": 447900, "start": 4494.0, "end": 4496.0, "text": " in ways that are useful for analysis.", "tokens": [51114, 294, 2098, 300, 366, 4420, 337, 5215, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0889987293471638, "compression_ratio": 1.671875, "no_speech_prob": 0.001454679062590003}, {"id": 949, "seek": 447900, "start": 4496.0, "end": 4501.0, "text": " Last time, we read in the CoalPublic2013 file and took a look at the header.", "tokens": [51214, 5264, 565, 11, 321, 1401, 294, 264, 3066, 304, 47, 3865, 2009, 7668, 3991, 293, 1890, 257, 574, 412, 264, 23117, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0889987293471638, "compression_ratio": 1.671875, "no_speech_prob": 0.001454679062590003}, {"id": 950, "seek": 447900, "start": 4501.0, "end": 4504.0, "text": " The heading had an interesting, well, let's call it a problem.", "tokens": [51464, 440, 9864, 632, 364, 1880, 11, 731, 11, 718, 311, 818, 309, 257, 1154, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0889987293471638, "compression_ratio": 1.671875, "no_speech_prob": 0.001454679062590003}, {"id": 951, "seek": 450400, "start": 4504.0, "end": 4507.0, "text": " The historical Coal production data is the title here.", "tokens": [50364, 440, 8584, 3066, 304, 4265, 1412, 307, 264, 4876, 510, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10559142783836083, "compression_ratio": 1.7588652482269505, "no_speech_prob": 0.08266517519950867}, {"id": 952, "seek": 450400, "start": 4507.0, "end": 4512.0, "text": " There's a source function. There's also a bunch of nans, and all the columns are unnamed.", "tokens": [50514, 821, 311, 257, 4009, 2445, 13, 821, 311, 611, 257, 3840, 295, 297, 599, 11, 293, 439, 264, 13766, 366, 517, 33465, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10559142783836083, "compression_ratio": 1.7588652482269505, "no_speech_prob": 0.08266517519950867}, {"id": 953, "seek": 450400, "start": 4512.0, "end": 4520.0, "text": " This is most useful when this line, line 2, which is our row 2, is actually year MSHA ID, mine name.", "tokens": [50764, 639, 307, 881, 4420, 562, 341, 1622, 11, 1622, 568, 11, 597, 307, 527, 5386, 568, 11, 307, 767, 1064, 7395, 4983, 7348, 11, 3892, 1315, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10559142783836083, "compression_ratio": 1.7588652482269505, "no_speech_prob": 0.08266517519950867}, {"id": 954, "seek": 450400, "start": 4520.0, "end": 4526.0, "text": " This is supposed to be the headers or the column names, and all the rest of it should be the actual rows of data.", "tokens": [51164, 639, 307, 3442, 281, 312, 264, 45101, 420, 264, 7738, 5288, 11, 293, 439, 264, 1472, 295, 309, 820, 312, 264, 3539, 13241, 295, 1412, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10559142783836083, "compression_ratio": 1.7588652482269505, "no_speech_prob": 0.08266517519950867}, {"id": 955, "seek": 450400, "start": 4526.0, "end": 4530.0, "text": " We're going to put the second row here up to the columns at the top.", "tokens": [51464, 492, 434, 516, 281, 829, 264, 1150, 5386, 510, 493, 281, 264, 13766, 412, 264, 1192, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10559142783836083, "compression_ratio": 1.7588652482269505, "no_speech_prob": 0.08266517519950867}, {"id": 956, "seek": 450400, "start": 4530.0, "end": 4533.0, "text": " We'd also like to make this ID the index for the pandas data frame.", "tokens": [51664, 492, 1116, 611, 411, 281, 652, 341, 7348, 264, 8186, 337, 264, 4565, 296, 1412, 3920, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10559142783836083, "compression_ratio": 1.7588652482269505, "no_speech_prob": 0.08266517519950867}, {"id": 957, "seek": 453300, "start": 4533.0, "end": 4538.0, "text": " We'll go into exactly why in the future, but for now, let's merge the reading in of the data frame", "tokens": [50364, 492, 603, 352, 666, 2293, 983, 294, 264, 2027, 11, 457, 337, 586, 11, 718, 311, 22183, 264, 3760, 294, 295, 264, 1412, 3920, 50614], "temperature": 0.0, "avg_logprob": -0.09606429820752325, "compression_ratio": 1.7758007117437722, "no_speech_prob": 0.006190666928887367}, {"id": 958, "seek": 453300, "start": 4538.0, "end": 4542.0, "text": " with the printing out of what the head of that data frame looks like.", "tokens": [50614, 365, 264, 14699, 484, 295, 437, 264, 1378, 295, 300, 1412, 3920, 1542, 411, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09606429820752325, "compression_ratio": 1.7758007117437722, "no_speech_prob": 0.006190666928887367}, {"id": 959, "seek": 453300, "start": 4542.0, "end": 4548.0, "text": " We're going up here and clicking Edit, Merge Cell Below, because we've actually selected the above cell.", "tokens": [50814, 492, 434, 516, 493, 510, 293, 9697, 33241, 11, 6124, 432, 28859, 36261, 11, 570, 321, 600, 767, 8209, 264, 3673, 2815, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09606429820752325, "compression_ratio": 1.7758007117437722, "no_speech_prob": 0.006190666928887367}, {"id": 960, "seek": 453300, "start": 4548.0, "end": 4550.0, "text": " So merge the cell below into one.", "tokens": [51114, 407, 22183, 264, 2815, 2507, 666, 472, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09606429820752325, "compression_ratio": 1.7758007117437722, "no_speech_prob": 0.006190666928887367}, {"id": 961, "seek": 453300, "start": 4550.0, "end": 4558.0, "text": " So now that I execute this cell, we see that there is in one cell both reading the file and looking at the head of the file.", "tokens": [51214, 407, 586, 300, 286, 14483, 341, 2815, 11, 321, 536, 300, 456, 307, 294, 472, 2815, 1293, 3760, 264, 3991, 293, 1237, 412, 264, 1378, 295, 264, 3991, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09606429820752325, "compression_ratio": 1.7758007117437722, "no_speech_prob": 0.006190666928887367}, {"id": 962, "seek": 453300, "start": 4558.0, "end": 4562.0, "text": " Now, this is, again, wrong. We would like to remove this top part.", "tokens": [51614, 823, 11, 341, 307, 11, 797, 11, 2085, 13, 492, 576, 411, 281, 4159, 341, 1192, 644, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09606429820752325, "compression_ratio": 1.7758007117437722, "no_speech_prob": 0.006190666928887367}, {"id": 963, "seek": 456200, "start": 4562.0, "end": 4567.0, "text": " So the way to remove this is we're actually going to use a thing called header and start giving it a number.", "tokens": [50364, 407, 264, 636, 281, 4159, 341, 307, 321, 434, 767, 516, 281, 764, 257, 551, 1219, 23117, 293, 722, 2902, 309, 257, 1230, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09956504452613092, "compression_ratio": 1.8229813664596273, "no_speech_prob": 0.0031718455720692873}, {"id": 964, "seek": 456200, "start": 4567.0, "end": 4572.0, "text": " Because if we look at this, we can see that it actually takes a header equals zero as the default value.", "tokens": [50614, 1436, 498, 321, 574, 412, 341, 11, 321, 393, 536, 300, 309, 767, 2516, 257, 23117, 6915, 4018, 382, 264, 7576, 2158, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09956504452613092, "compression_ratio": 1.8229813664596273, "no_speech_prob": 0.0031718455720692873}, {"id": 965, "seek": 456200, "start": 4572.0, "end": 4576.0, "text": " So if we do header equals one, it actually deletes that top row.", "tokens": [50864, 407, 498, 321, 360, 23117, 6915, 472, 11, 309, 767, 1103, 37996, 300, 1192, 5386, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09956504452613092, "compression_ratio": 1.8229813664596273, "no_speech_prob": 0.0031718455720692873}, {"id": 966, "seek": 456200, "start": 4576.0, "end": 4581.0, "text": " And so this is a way of telling the pandas that, hey, you don't have to modify that Excel file.", "tokens": [51064, 400, 370, 341, 307, 257, 636, 295, 3585, 264, 4565, 296, 300, 11, 4177, 11, 291, 500, 380, 362, 281, 16927, 300, 19060, 3991, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09956504452613092, "compression_ratio": 1.8229813664596273, "no_speech_prob": 0.0031718455720692873}, {"id": 967, "seek": 456200, "start": 4581.0, "end": 4585.0, "text": " You can just, when you read it in, know that there's two lines of header files.", "tokens": [51314, 509, 393, 445, 11, 562, 291, 1401, 309, 294, 11, 458, 300, 456, 311, 732, 3876, 295, 23117, 7098, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09956504452613092, "compression_ratio": 1.8229813664596273, "no_speech_prob": 0.0031718455720692873}, {"id": 968, "seek": 456200, "start": 4585.0, "end": 4590.0, "text": " Now, there was two lines that had data in it, and there was a third NAN line that just, it knew it could not possibly be the header.", "tokens": [51514, 823, 11, 456, 390, 732, 3876, 300, 632, 1412, 294, 309, 11, 293, 456, 390, 257, 2636, 426, 1770, 1622, 300, 445, 11, 309, 2586, 309, 727, 406, 6264, 312, 264, 23117, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09956504452613092, "compression_ratio": 1.8229813664596273, "no_speech_prob": 0.0031718455720692873}, {"id": 969, "seek": 459000, "start": 4590.0, "end": 4591.0, "text": " So it removed that.", "tokens": [50364, 407, 309, 7261, 300, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 970, "seek": 459000, "start": 4591.0, "end": 4595.0, "text": " So now the column names are these bolded ones are at the top.", "tokens": [50414, 407, 586, 264, 7738, 5288, 366, 613, 11928, 292, 2306, 366, 412, 264, 1192, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 971, "seek": 459000, "start": 4595.0, "end": 4597.0, "text": " We're getting very close to what we actually want.", "tokens": [50614, 492, 434, 1242, 588, 1998, 281, 437, 321, 767, 528, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 972, "seek": 459000, "start": 4597.0, "end": 4600.0, "text": " Another thing we'd like to actually do is set the index.", "tokens": [50714, 3996, 551, 321, 1116, 411, 281, 767, 360, 307, 992, 264, 8186, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 973, "seek": 459000, "start": 4600.0, "end": 4606.0, "text": " So we set the index by typing index and hitting tab because we think it's going to be something like set index or index set.", "tokens": [50864, 407, 321, 992, 264, 8186, 538, 18444, 8186, 293, 8850, 4421, 570, 321, 519, 309, 311, 516, 281, 312, 746, 411, 992, 8186, 420, 8186, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 974, "seek": 459000, "start": 4606.0, "end": 4610.0, "text": " And it's index columns equals, if this type, we like the name of it.", "tokens": [51164, 400, 309, 311, 8186, 13766, 6915, 11, 498, 341, 2010, 11, 321, 411, 264, 1315, 295, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 975, "seek": 459000, "start": 4610.0, "end": 4614.0, "text": " So we would like to do the MSHA ID as the index column.", "tokens": [51364, 407, 321, 576, 411, 281, 360, 264, 7395, 4983, 7348, 382, 264, 8186, 7738, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09125576814015707, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.010012258775532246}, {"id": 976, "seek": 461400, "start": 4614.0, "end": 4624.0, "text": " And doing that, we see that the MSHA ID is indeed the index for this data and the columns are all appropriately named.", "tokens": [50364, 400, 884, 300, 11, 321, 536, 300, 264, 7395, 4983, 7348, 307, 6451, 264, 8186, 337, 341, 1412, 293, 264, 13766, 366, 439, 23505, 4926, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10659152490121347, "compression_ratio": 1.6, "no_speech_prob": 0.11431830376386642}, {"id": 977, "seek": 461400, "start": 4624.0, "end": 4627.0, "text": " This is one way to interact with the pandas library.", "tokens": [50864, 639, 307, 472, 636, 281, 4648, 365, 264, 4565, 296, 6405, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10659152490121347, "compression_ratio": 1.6, "no_speech_prob": 0.11431830376386642}, {"id": 978, "seek": 461400, "start": 4627.0, "end": 4632.0, "text": " But it actually applies to all Python libraries that have any sort of documentation strings.", "tokens": [51014, 583, 309, 767, 13165, 281, 439, 15329, 15148, 300, 362, 604, 1333, 295, 14333, 13985, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10659152490121347, "compression_ratio": 1.6, "no_speech_prob": 0.11431830376386642}, {"id": 979, "seek": 461400, "start": 4632.0, "end": 4638.0, "text": " Just to give you an example of that, I'm going to save this currently and just show you example function, right?", "tokens": [51264, 1449, 281, 976, 291, 364, 1365, 295, 300, 11, 286, 478, 516, 281, 3155, 341, 4362, 293, 445, 855, 291, 1365, 2445, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10659152490121347, "compression_ratio": 1.6, "no_speech_prob": 0.11431830376386642}, {"id": 980, "seek": 461400, "start": 4638.0, "end": 4640.0, "text": " We define a function by typing def.", "tokens": [51564, 492, 6964, 257, 2445, 538, 18444, 1060, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10659152490121347, "compression_ratio": 1.6, "no_speech_prob": 0.11431830376386642}, {"id": 981, "seek": 461400, "start": 4640.0, "end": 4642.0, "text": " We'll do it test function.", "tokens": [51664, 492, 603, 360, 309, 1500, 2445, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10659152490121347, "compression_ratio": 1.6, "no_speech_prob": 0.11431830376386642}, {"id": 982, "seek": 464200, "start": 4642.0, "end": 4651.0, "text": " Let's say it takes two values first equals five and second equals 10 and it will return first plus second.", "tokens": [50364, 961, 311, 584, 309, 2516, 732, 4190, 700, 6915, 1732, 293, 1150, 6915, 1266, 293, 309, 486, 2736, 700, 1804, 1150, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09610239992436674, "compression_ratio": 1.672, "no_speech_prob": 0.00581891555339098}, {"id": 983, "seek": 464200, "start": 4651.0, "end": 4655.0, "text": " Let's give it a doc string and we execute that line.", "tokens": [50814, 961, 311, 976, 309, 257, 3211, 6798, 293, 321, 14483, 300, 1622, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09610239992436674, "compression_ratio": 1.672, "no_speech_prob": 0.00581891555339098}, {"id": 984, "seek": 464200, "start": 4655.0, "end": 4664.0, "text": " If we start typing test underscore f and then hit tab, it will automatically complete that because we have a defined function here called def function.", "tokens": [51014, 759, 321, 722, 18444, 1500, 37556, 283, 293, 550, 2045, 4421, 11, 309, 486, 6772, 3566, 300, 570, 321, 362, 257, 7642, 2445, 510, 1219, 1060, 2445, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09610239992436674, "compression_ratio": 1.672, "no_speech_prob": 0.00581891555339098}, {"id": 985, "seek": 464200, "start": 4664.0, "end": 4667.0, "text": " We do the initial parentheses and hit shift tab.", "tokens": [51464, 492, 360, 264, 5883, 34153, 293, 2045, 5513, 4421, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09610239992436674, "compression_ratio": 1.672, "no_speech_prob": 0.00581891555339098}, {"id": 986, "seek": 464200, "start": 4667.0, "end": 4670.0, "text": " You actually see the doc string that we wrote just above.", "tokens": [51614, 509, 767, 536, 264, 3211, 6798, 300, 321, 4114, 445, 3673, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09610239992436674, "compression_ratio": 1.672, "no_speech_prob": 0.00581891555339098}, {"id": 987, "seek": 467000, "start": 4670.0, "end": 4676.0, "text": " This is an example and it has the signature of it to the first equals five second equals 10.", "tokens": [50364, 639, 307, 364, 1365, 293, 309, 575, 264, 13397, 295, 309, 281, 264, 700, 6915, 1732, 1150, 6915, 1266, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09082443625838668, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.017435843124985695}, {"id": 988, "seek": 467000, "start": 4676.0, "end": 4682.0, "text": " If you want to redefine what actually we give it, we can say first equals three and the test function gives us 13, which is what we'd expect.", "tokens": [50664, 759, 291, 528, 281, 38818, 533, 437, 767, 321, 976, 309, 11, 321, 393, 584, 700, 6915, 1045, 293, 264, 1500, 2445, 2709, 505, 3705, 11, 597, 307, 437, 321, 1116, 2066, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09082443625838668, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.017435843124985695}, {"id": 989, "seek": 467000, "start": 4682.0, "end": 4696.0, "text": " So that's just a fun side note on how the interaction with Jupiter notebook lets you look into the doc strings of functions that you define yourself as well as any of the libraries that you'll be using your data science day to day.", "tokens": [50964, 407, 300, 311, 445, 257, 1019, 1252, 3637, 322, 577, 264, 9285, 365, 24567, 21060, 6653, 291, 574, 666, 264, 3211, 13985, 295, 6828, 300, 291, 6964, 1803, 382, 731, 382, 604, 295, 264, 15148, 300, 291, 603, 312, 1228, 428, 1412, 3497, 786, 281, 786, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09082443625838668, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.017435843124985695}, {"id": 990, "seek": 469600, "start": 4696.0, "end": 4701.0, "text": " In this lesson, we'll be making a new GitHub repository for a new data science project.", "tokens": [50364, 682, 341, 6898, 11, 321, 603, 312, 1455, 257, 777, 23331, 25841, 337, 257, 777, 1412, 3497, 1716, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 991, "seek": 469600, "start": 4701.0, "end": 4708.0, "text": " So let's go over to GitHub and from GitHub, if you go all the way over to the right, you can create new repository.", "tokens": [50614, 407, 718, 311, 352, 670, 281, 23331, 293, 490, 23331, 11, 498, 291, 352, 439, 264, 636, 670, 281, 264, 558, 11, 291, 393, 1884, 777, 25841, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 992, "seek": 469600, "start": 4708.0, "end": 4711.0, "text": " Give the repository some name that you think makes sense.", "tokens": [50964, 5303, 264, 25841, 512, 1315, 300, 291, 519, 1669, 2020, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 993, "seek": 469600, "start": 4711.0, "end": 4713.0, "text": " So we'll do some coal exploration.", "tokens": [51114, 407, 321, 603, 360, 512, 10209, 16197, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 994, "seek": 469600, "start": 4713.0, "end": 4717.0, "text": " So let's make a coal exploration repository name.", "tokens": [51214, 407, 718, 311, 652, 257, 10209, 16197, 25841, 1315, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 995, "seek": 469600, "start": 4717.0, "end": 4719.0, "text": " You can give it a description if you'd like to.", "tokens": [51414, 509, 393, 976, 309, 257, 3855, 498, 291, 1116, 411, 281, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 996, "seek": 469600, "start": 4719.0, "end": 4722.0, "text": " You don't need to decide whether it will be public or private.", "tokens": [51514, 509, 500, 380, 643, 281, 4536, 1968, 309, 486, 312, 1908, 420, 4551, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 997, "seek": 469600, "start": 4722.0, "end": 4725.0, "text": " I'll let it be public so that you can see this as well.", "tokens": [51664, 286, 603, 718, 309, 312, 1908, 370, 300, 291, 393, 536, 341, 382, 731, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06551745379412616, "compression_ratio": 1.8654545454545455, "no_speech_prob": 0.31351417303085327}, {"id": 998, "seek": 472500, "start": 4725.0, "end": 4728.0, "text": " And generally, I like to initialize the repository with a read me.", "tokens": [50364, 400, 5101, 11, 286, 411, 281, 5883, 1125, 264, 25841, 365, 257, 1401, 385, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 999, "seek": 472500, "start": 4728.0, "end": 4732.0, "text": " It get ignore file that's Python because I use a lot of Python code.", "tokens": [50514, 467, 483, 11200, 3991, 300, 311, 15329, 570, 286, 764, 257, 688, 295, 15329, 3089, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1000, "seek": 472500, "start": 4732.0, "end": 4735.0, "text": " And I add an MIT license.", "tokens": [50714, 400, 286, 909, 364, 13100, 10476, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1001, "seek": 472500, "start": 4735.0, "end": 4738.0, "text": " After doing all this, click create repository.", "tokens": [50864, 2381, 884, 439, 341, 11, 2052, 1884, 25841, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1002, "seek": 472500, "start": 4738.0, "end": 4744.0, "text": " Once you click create repository, you can go over to this place here where you can click SSH.", "tokens": [51014, 3443, 291, 2052, 1884, 25841, 11, 291, 393, 352, 670, 281, 341, 1081, 510, 689, 291, 393, 2052, 12238, 39, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1003, "seek": 472500, "start": 4744.0, "end": 4747.0, "text": " You can have HTTPS or SSH.", "tokens": [51314, 509, 393, 362, 11751, 51, 6273, 420, 12238, 39, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1004, "seek": 472500, "start": 4747.0, "end": 4749.0, "text": " I just use SSH most of the time.", "tokens": [51464, 286, 445, 764, 12238, 39, 881, 295, 264, 565, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1005, "seek": 472500, "start": 4749.0, "end": 4751.0, "text": " Clicking once in here highlights everything.", "tokens": [51564, 8230, 278, 1564, 294, 510, 14254, 1203, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1006, "seek": 472500, "start": 4751.0, "end": 4753.0, "text": " Command C will copy this.", "tokens": [51664, 17901, 383, 486, 5055, 341, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1203584592850482, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.03960372507572174}, {"id": 1007, "seek": 475300, "start": 4753.0, "end": 4761.0, "text": " And going back into a terminal, type git clone and then command V to paste the required link.", "tokens": [50364, 400, 516, 646, 666, 257, 14709, 11, 2010, 18331, 26506, 293, 550, 5622, 691, 281, 9163, 264, 4739, 2113, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10476966337724165, "compression_ratio": 1.5784753363228698, "no_speech_prob": 0.01665075123310089}, {"id": 1008, "seek": 475300, "start": 4761.0, "end": 4762.0, "text": " Hit return.", "tokens": [50764, 9217, 2736, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10476966337724165, "compression_ratio": 1.5784753363228698, "no_speech_prob": 0.01665075123310089}, {"id": 1009, "seek": 475300, "start": 4762.0, "end": 4767.0, "text": " And you will now clone the GitHub repository to your local machine.", "tokens": [50814, 400, 291, 486, 586, 26506, 264, 23331, 25841, 281, 428, 2654, 3479, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10476966337724165, "compression_ratio": 1.5784753363228698, "no_speech_prob": 0.01665075123310089}, {"id": 1010, "seek": 475300, "start": 4767.0, "end": 4772.0, "text": " And from here, we see a new coal exploration folder being created.", "tokens": [51064, 400, 490, 510, 11, 321, 536, 257, 777, 10209, 16197, 10820, 885, 2942, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10476966337724165, "compression_ratio": 1.5784753363228698, "no_speech_prob": 0.01665075123310089}, {"id": 1011, "seek": 475300, "start": 4772.0, "end": 4782.0, "text": " And if we CD into coal exploration, we see that it has a license and a read me file that we've made previously.", "tokens": [51314, 400, 498, 321, 6743, 666, 10209, 16197, 11, 321, 536, 300, 309, 575, 257, 10476, 293, 257, 1401, 385, 3991, 300, 321, 600, 1027, 8046, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10476966337724165, "compression_ratio": 1.5784753363228698, "no_speech_prob": 0.01665075123310089}, {"id": 1012, "seek": 478200, "start": 4782.0, "end": 4785.0, "text": " In this lesson, we'll be taking our GitHub repository that we've just started.", "tokens": [50364, 682, 341, 6898, 11, 321, 603, 312, 1940, 527, 23331, 25841, 300, 321, 600, 445, 1409, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0851502852006392, "compression_ratio": 1.7469879518072289, "no_speech_prob": 0.019408931955695152}, {"id": 1013, "seek": 478200, "start": 4785.0, "end": 4787.0, "text": " We'll first look at the data.", "tokens": [50514, 492, 603, 700, 574, 412, 264, 1412, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0851502852006392, "compression_ratio": 1.7469879518072289, "no_speech_prob": 0.019408931955695152}, {"id": 1014, "seek": 478200, "start": 4787.0, "end": 4792.0, "text": " So the directory as we last left, it has two files in it, a license and a read me file.", "tokens": [50614, 407, 264, 21120, 382, 321, 1036, 1411, 11, 309, 575, 732, 7098, 294, 309, 11, 257, 10476, 293, 257, 1401, 385, 3991, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0851502852006392, "compression_ratio": 1.7469879518072289, "no_speech_prob": 0.019408931955695152}, {"id": 1015, "seek": 478200, "start": 4792.0, "end": 4795.0, "text": " We're going to create some extra directories and some structure around here.", "tokens": [50864, 492, 434, 516, 281, 1884, 512, 2857, 5391, 530, 293, 512, 3877, 926, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0851502852006392, "compression_ratio": 1.7469879518072289, "no_speech_prob": 0.019408931955695152}, {"id": 1016, "seek": 478200, "start": 4795.0, "end": 4798.0, "text": " And I'll go through the reasoning behind this in other videos.", "tokens": [51014, 400, 286, 603, 352, 807, 264, 21577, 2261, 341, 294, 661, 2145, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0851502852006392, "compression_ratio": 1.7469879518072289, "no_speech_prob": 0.019408931955695152}, {"id": 1017, "seek": 478200, "start": 4798.0, "end": 4805.0, "text": " But we're going to create using the make directory command, a data directory, a deliver directory,", "tokens": [51164, 583, 321, 434, 516, 281, 1884, 1228, 264, 652, 21120, 5622, 11, 257, 1412, 21120, 11, 257, 4239, 21120, 11, 51514], "temperature": 0.0, "avg_logprob": -0.0851502852006392, "compression_ratio": 1.7469879518072289, "no_speech_prob": 0.019408931955695152}, {"id": 1018, "seek": 480500, "start": 4805.0, "end": 4812.0, "text": " which is going to house the final deliverable important Jupyter notebooks, a develop directory,", "tokens": [50364, 597, 307, 516, 281, 1782, 264, 2572, 4239, 712, 1021, 22125, 88, 391, 43782, 11, 257, 1499, 21120, 11, 50714], "temperature": 0.0, "avg_logprob": -0.13068295361702903, "compression_ratio": 1.8058608058608059, "no_speech_prob": 0.41823679208755493}, {"id": 1019, "seek": 480500, "start": 4812.0, "end": 4815.0, "text": " which is where we're going to mostly do our development place,", "tokens": [50714, 597, 307, 689, 321, 434, 516, 281, 5240, 360, 527, 3250, 1081, 11, 50864], "temperature": 0.0, "avg_logprob": -0.13068295361702903, "compression_ratio": 1.8058608058608059, "no_speech_prob": 0.41823679208755493}, {"id": 1020, "seek": 480500, "start": 4815.0, "end": 4819.0, "text": " place to put our source code if we have any scripts that we'll end up using.", "tokens": [50864, 1081, 281, 829, 527, 4009, 3089, 498, 321, 362, 604, 23294, 300, 321, 603, 917, 493, 1228, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13068295361702903, "compression_ratio": 1.8058608058608059, "no_speech_prob": 0.41823679208755493}, {"id": 1021, "seek": 480500, "start": 4819.0, "end": 4823.0, "text": " So separate from ipython notebooks, usually Python files or other kinds of scripts,", "tokens": [51064, 407, 4994, 490, 28501, 88, 11943, 43782, 11, 2673, 15329, 7098, 420, 661, 3685, 295, 23294, 11, 51264], "temperature": 0.0, "avg_logprob": -0.13068295361702903, "compression_ratio": 1.8058608058608059, "no_speech_prob": 0.41823679208755493}, {"id": 1022, "seek": 480500, "start": 4823.0, "end": 4828.0, "text": " we'll go in a source directory and a figures directory running that command.", "tokens": [51264, 321, 603, 352, 294, 257, 4009, 21120, 293, 257, 9624, 21120, 2614, 300, 5622, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13068295361702903, "compression_ratio": 1.8058608058608059, "no_speech_prob": 0.41823679208755493}, {"id": 1023, "seek": 480500, "start": 4828.0, "end": 4833.0, "text": " The folder structure that we have now has a data deliver develop figures and source directories.", "tokens": [51514, 440, 10820, 3877, 300, 321, 362, 586, 575, 257, 1412, 4239, 1499, 9624, 293, 4009, 5391, 530, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13068295361702903, "compression_ratio": 1.8058608058608059, "no_speech_prob": 0.41823679208755493}, {"id": 1024, "seek": 483300, "start": 4833.0, "end": 4836.0, "text": " So let's actually get that data and put it into this directory.", "tokens": [50364, 407, 718, 311, 767, 483, 300, 1412, 293, 829, 309, 666, 341, 21120, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1025, "seek": 483300, "start": 4836.0, "end": 4837.0, "text": " You might have already downloaded it.", "tokens": [50514, 509, 1062, 362, 1217, 21748, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1026, "seek": 483300, "start": 4837.0, "end": 4842.0, "text": " If not, again, the way to get this is to go to eia.gov slash coal.", "tokens": [50564, 759, 406, 11, 797, 11, 264, 636, 281, 483, 341, 307, 281, 352, 281, 308, 654, 13, 16089, 17330, 10209, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1027, "seek": 483300, "start": 4842.0, "end": 4846.0, "text": " Go to the data tab down to production.", "tokens": [50814, 1037, 281, 264, 1412, 4421, 760, 281, 4265, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1028, "seek": 483300, "start": 4846.0, "end": 4849.0, "text": " And we go to the historical detailed coal production data.", "tokens": [51014, 400, 321, 352, 281, 264, 8584, 9942, 10209, 4265, 1412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1029, "seek": 483300, "start": 4849.0, "end": 4852.0, "text": " And let's just use the year 2013 for now.", "tokens": [51164, 400, 718, 311, 445, 764, 264, 1064, 9012, 337, 586, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1030, "seek": 483300, "start": 4852.0, "end": 4857.0, "text": " We're going to go into this coal exploration, navigate to the data folder and save.", "tokens": [51314, 492, 434, 516, 281, 352, 666, 341, 10209, 16197, 11, 12350, 281, 264, 1412, 10820, 293, 3155, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1031, "seek": 483300, "start": 4857.0, "end": 4860.0, "text": " That is done downloading.", "tokens": [51564, 663, 307, 1096, 32529, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12286719104699921, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.014059518463909626}, {"id": 1032, "seek": 486000, "start": 4860.0, "end": 4864.0, "text": " You can see it in this folder as coal public 2013.", "tokens": [50364, 509, 393, 536, 309, 294, 341, 10820, 382, 10209, 1908, 9012, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1033, "seek": 486000, "start": 4864.0, "end": 4865.0, "text": " Great.", "tokens": [50564, 3769, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1034, "seek": 486000, "start": 4865.0, "end": 4866.0, "text": " So let's take a look at this.", "tokens": [50614, 407, 718, 311, 747, 257, 574, 412, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1035, "seek": 486000, "start": 4866.0, "end": 4868.0, "text": " We'll open up a Jupyter notebook and take a look.", "tokens": [50664, 492, 603, 1269, 493, 257, 22125, 88, 391, 21060, 293, 747, 257, 574, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1036, "seek": 486000, "start": 4868.0, "end": 4872.0, "text": " So from this top level directory, I will start Jupyter notebook.", "tokens": [50764, 407, 490, 341, 1192, 1496, 21120, 11, 286, 486, 722, 22125, 88, 391, 21060, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1037, "seek": 486000, "start": 4872.0, "end": 4875.0, "text": " You can now close this download file.", "tokens": [50964, 509, 393, 586, 1998, 341, 5484, 3991, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1038, "seek": 486000, "start": 4875.0, "end": 4879.0, "text": " And you can navigate this structure similarly to the terminal itself.", "tokens": [51114, 400, 291, 393, 12350, 341, 3877, 14138, 281, 264, 14709, 2564, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1039, "seek": 486000, "start": 4879.0, "end": 4882.0, "text": " So you can actually click data and you see the coal public data that we had before.", "tokens": [51314, 407, 291, 393, 767, 2052, 1412, 293, 291, 536, 264, 10209, 1908, 1412, 300, 321, 632, 949, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1040, "seek": 486000, "start": 4882.0, "end": 4889.0, "text": " We can navigate back and let's go into the develop and start a new Python to notebook.", "tokens": [51464, 492, 393, 12350, 646, 293, 718, 311, 352, 666, 264, 1499, 293, 722, 257, 777, 15329, 281, 21060, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09145830583202746, "compression_ratio": 1.7554744525547445, "no_speech_prob": 0.01081661693751812}, {"id": 1041, "seek": 488900, "start": 4889.0, "end": 4891.0, "text": " It starts off being called untitled.", "tokens": [50364, 467, 3719, 766, 885, 1219, 1701, 270, 1493, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1042, "seek": 488900, "start": 4891.0, "end": 4893.0, "text": " And that is a not very helpful name.", "tokens": [50464, 400, 300, 307, 257, 406, 588, 4961, 1315, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1043, "seek": 488900, "start": 4893.0, "end": 4898.0, "text": " So I recommend using the date in ISO 8601 format.", "tokens": [50564, 407, 286, 2748, 1228, 264, 4002, 294, 25042, 1649, 4550, 16, 7877, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1044, "seek": 488900, "start": 4898.0, "end": 4901.0, "text": " And the reason for that is that it helps with sorting.", "tokens": [50814, 400, 264, 1778, 337, 300, 307, 300, 309, 3665, 365, 32411, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1045, "seek": 488900, "start": 4901.0, "end": 4906.0, "text": " But basically it goes year dash month dash dates today is the 21st.", "tokens": [50964, 583, 1936, 309, 1709, 1064, 8240, 1618, 8240, 11691, 965, 307, 264, 5080, 372, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1046, "seek": 488900, "start": 4906.0, "end": 4915.0, "text": " After you do the date, I recommend, especially if you're working in teams to have your initials or some other identifier that creates it so that people know it's your notebook.", "tokens": [51214, 2381, 291, 360, 264, 4002, 11, 286, 2748, 11, 2318, 498, 291, 434, 1364, 294, 5491, 281, 362, 428, 5883, 82, 420, 512, 661, 45690, 300, 7829, 309, 370, 300, 561, 458, 309, 311, 428, 21060, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1047, "seek": 488900, "start": 4915.0, "end": 4917.0, "text": " And so I'm going to type my initials here.", "tokens": [51664, 400, 370, 286, 478, 516, 281, 2010, 452, 5883, 82, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11350222331721609, "compression_ratio": 1.6823104693140793, "no_speech_prob": 0.025546416640281677}, {"id": 1048, "seek": 491700, "start": 4917.0, "end": 4923.0, "text": " And then I recommend having a couple words that describe what you think you're doing in this notebook.", "tokens": [50364, 400, 550, 286, 2748, 1419, 257, 1916, 2283, 300, 6786, 437, 291, 519, 291, 434, 884, 294, 341, 21060, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1145786606105028, "compression_ratio": 1.722007722007722, "no_speech_prob": 0.048830676823854446}, {"id": 1049, "seek": 491700, "start": 4923.0, "end": 4926.0, "text": " So I think I'll just say a first look.", "tokens": [50664, 407, 286, 519, 286, 603, 445, 584, 257, 700, 574, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1145786606105028, "compression_ratio": 1.722007722007722, "no_speech_prob": 0.048830676823854446}, {"id": 1050, "seek": 491700, "start": 4926.0, "end": 4932.0, "text": " So now I've renamed that notebook and it helpfully tells us when it lasted the last checkpoint.", "tokens": [50814, 407, 586, 286, 600, 40949, 300, 21060, 293, 309, 854, 2277, 5112, 505, 562, 309, 21116, 264, 1036, 42269, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1145786606105028, "compression_ratio": 1.722007722007722, "no_speech_prob": 0.048830676823854446}, {"id": 1051, "seek": 491700, "start": 4932.0, "end": 4935.0, "text": " This means when it's been saved auto saves every once in a while.", "tokens": [51114, 639, 1355, 562, 309, 311, 668, 6624, 8399, 19155, 633, 1564, 294, 257, 1339, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1145786606105028, "compression_ratio": 1.722007722007722, "no_speech_prob": 0.048830676823854446}, {"id": 1052, "seek": 491700, "start": 4935.0, "end": 4940.0, "text": " You can also click this button, but you just see that the last checkpoint saved.", "tokens": [51264, 509, 393, 611, 2052, 341, 2960, 11, 457, 291, 445, 536, 300, 264, 1036, 42269, 6624, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1145786606105028, "compression_ratio": 1.722007722007722, "no_speech_prob": 0.048830676823854446}, {"id": 1053, "seek": 491700, "start": 4940.0, "end": 4942.0, "text": " And you can also do command s, which is how I normally do it.", "tokens": [51514, 400, 291, 393, 611, 360, 5622, 262, 11, 597, 307, 577, 286, 5646, 360, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1145786606105028, "compression_ratio": 1.722007722007722, "no_speech_prob": 0.048830676823854446}, {"id": 1054, "seek": 494200, "start": 4942.0, "end": 4947.0, "text": " So this means that it's keeping auto saved versions of this as we go along.", "tokens": [50364, 407, 341, 1355, 300, 309, 311, 5145, 8399, 6624, 9606, 295, 341, 382, 321, 352, 2051, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1091899705969769, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.30716222524642944}, {"id": 1055, "seek": 494200, "start": 4947.0, "end": 4948.0, "text": " All right.", "tokens": [50614, 1057, 558, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1091899705969769, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.30716222524642944}, {"id": 1056, "seek": 494200, "start": 4948.0, "end": 4951.0, "text": " So there's a number of libraries that we'd like to import.", "tokens": [50664, 407, 456, 311, 257, 1230, 295, 15148, 300, 321, 1116, 411, 281, 974, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1091899705969769, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.30716222524642944}, {"id": 1057, "seek": 494200, "start": 4951.0, "end": 4955.0, "text": " And I import these almost every time and it starts off with matplotlib inline.", "tokens": [50814, 400, 286, 974, 613, 1920, 633, 565, 293, 309, 3719, 766, 365, 3803, 564, 310, 38270, 294, 1889, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1091899705969769, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.30716222524642944}, {"id": 1058, "seek": 494200, "start": 4955.0, "end": 4959.0, "text": " So this percent sign at the top of the line means it's a magic import.", "tokens": [51014, 407, 341, 3043, 1465, 412, 264, 1192, 295, 264, 1622, 1355, 309, 311, 257, 5585, 974, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1091899705969769, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.30716222524642944}, {"id": 1059, "seek": 494200, "start": 4959.0, "end": 4968.0, "text": " And we also have to import matplotlib like so importing it as PLT is the standard best practice for doing that next we import pandas.", "tokens": [51214, 400, 321, 611, 362, 281, 974, 3803, 564, 310, 38270, 411, 370, 43866, 309, 382, 6999, 51, 307, 264, 3832, 1151, 3124, 337, 884, 300, 958, 321, 974, 4565, 296, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1091899705969769, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.30716222524642944}, {"id": 1060, "seek": 496800, "start": 4968.0, "end": 4972.0, "text": " And we should also import seaborne, which is a package that wraps matplotlib.", "tokens": [50364, 400, 321, 820, 611, 974, 369, 3816, 716, 11, 597, 307, 257, 7372, 300, 25831, 3803, 564, 310, 38270, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1061, "seek": 496800, "start": 4972.0, "end": 4976.0, "text": " Interestingly, you're supposed to import seaborne as SNS.", "tokens": [50564, 30564, 11, 291, 434, 3442, 281, 974, 369, 3816, 716, 382, 13955, 50, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1062, "seek": 496800, "start": 4976.0, "end": 4980.0, "text": " I don't know exactly why, but importing it as SNS is the standard way of doing it.", "tokens": [50764, 286, 500, 380, 458, 2293, 983, 11, 457, 43866, 309, 382, 13955, 50, 307, 264, 3832, 636, 295, 884, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1063, "seek": 496800, "start": 4980.0, "end": 4984.0, "text": " Also, if you do SNS dot set, it actually sets a number of the default parameters for matplotlib.", "tokens": [50964, 2743, 11, 498, 291, 360, 13955, 50, 5893, 992, 11, 309, 767, 6352, 257, 1230, 295, 264, 7576, 9834, 337, 3803, 564, 310, 38270, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1064, "seek": 496800, "start": 4984.0, "end": 4987.0, "text": " So it already looks nicer if you just use it from there.", "tokens": [51164, 407, 309, 1217, 1542, 22842, 498, 291, 445, 764, 309, 490, 456, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1065, "seek": 496800, "start": 4987.0, "end": 4989.0, "text": " So let's go ahead and start with that.", "tokens": [51314, 407, 718, 311, 352, 2286, 293, 722, 365, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1066, "seek": 496800, "start": 4989.0, "end": 4994.0, "text": " And now let's read into a data frame, the data file that we just downloaded.", "tokens": [51414, 400, 586, 718, 311, 1401, 666, 257, 1412, 3920, 11, 264, 1412, 3991, 300, 321, 445, 21748, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06554682933501084, "compression_ratio": 1.712280701754386, "no_speech_prob": 0.054174672812223434}, {"id": 1067, "seek": 499400, "start": 4994.0, "end": 5001.0, "text": " So we say df equals pandas library dot read hit tab to see the options go to Excel.", "tokens": [50364, 407, 321, 584, 274, 69, 6915, 4565, 296, 6405, 5893, 1401, 2045, 4421, 281, 536, 264, 3956, 352, 281, 19060, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1674543672853762, "compression_ratio": 1.671875, "no_speech_prob": 0.28104886412620544}, {"id": 1068, "seek": 499400, "start": 5001.0, "end": 5006.0, "text": " And we navigate to the directory by going up one directory by doing dot dot slash.", "tokens": [50714, 400, 321, 12350, 281, 264, 21120, 538, 516, 493, 472, 21120, 538, 884, 5893, 5893, 17330, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1674543672853762, "compression_ratio": 1.671875, "no_speech_prob": 0.28104886412620544}, {"id": 1069, "seek": 499400, "start": 5006.0, "end": 5010.0, "text": " If we hit tab, we also get the possible navigation options.", "tokens": [50964, 759, 321, 2045, 4421, 11, 321, 611, 483, 264, 1944, 17346, 3956, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1674543672853762, "compression_ratio": 1.671875, "no_speech_prob": 0.28104886412620544}, {"id": 1070, "seek": 499400, "start": 5010.0, "end": 5014.0, "text": " It's in the data and if you tap again, it will have complete to say cold public 2013.", "tokens": [51164, 467, 311, 294, 264, 1412, 293, 498, 291, 5119, 797, 11, 309, 486, 362, 3566, 281, 584, 3554, 1908, 9012, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1674543672853762, "compression_ratio": 1.671875, "no_speech_prob": 0.28104886412620544}, {"id": 1071, "seek": 499400, "start": 5014.0, "end": 5020.0, "text": " If we actually execute that and take a look at the head, we notice that we again have this unnamed part at the top.", "tokens": [51364, 759, 321, 767, 14483, 300, 293, 747, 257, 574, 412, 264, 1378, 11, 321, 3449, 300, 321, 797, 362, 341, 517, 33465, 644, 412, 264, 1192, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1674543672853762, "compression_ratio": 1.671875, "no_speech_prob": 0.28104886412620544}, {"id": 1072, "seek": 502000, "start": 5020.0, "end": 5023.0, "text": " So we actually wouldn't like to remember that it has a header.", "tokens": [50364, 407, 321, 767, 2759, 380, 411, 281, 1604, 300, 309, 575, 257, 23117, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1663996872392673, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.170941561460495}, {"id": 1073, "seek": 502000, "start": 5023.0, "end": 5028.0, "text": " Set the headers equal to two and that correctly gets the column types labeled in there.", "tokens": [50514, 8928, 264, 45101, 2681, 281, 732, 293, 300, 8944, 2170, 264, 7738, 3467, 21335, 294, 456, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1663996872392673, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.170941561460495}, {"id": 1074, "seek": 502000, "start": 5028.0, "end": 5032.0, "text": " And we want to set the index to the MSH ID.", "tokens": [50764, 400, 321, 528, 281, 992, 264, 8186, 281, 264, 7395, 39, 7348, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1663996872392673, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.170941561460495}, {"id": 1075, "seek": 502000, "start": 5032.0, "end": 5041.0, "text": " So if it's annoying, you set index by doing index something hit tab and its index column equals MSHA space ID.", "tokens": [50964, 407, 498, 309, 311, 11304, 11, 291, 992, 8186, 538, 884, 8186, 746, 2045, 4421, 293, 1080, 8186, 7738, 6915, 7395, 4983, 1901, 7348, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1663996872392673, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.170941561460495}, {"id": 1076, "seek": 502000, "start": 5041.0, "end": 5047.0, "text": " Excelling those two cells, you have the ID of the mine setting as the index of this data frame", "tokens": [51414, 2111, 384, 2669, 729, 732, 5438, 11, 291, 362, 264, 7348, 295, 264, 3892, 3287, 382, 264, 8186, 295, 341, 1412, 3920, 51714], "temperature": 0.0, "avg_logprob": -0.1663996872392673, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.170941561460495}, {"id": 1077, "seek": 504700, "start": 5047.0, "end": 5051.0, "text": " and all the data in here correctly parsed from that Excel file.", "tokens": [50364, 293, 439, 264, 1412, 294, 510, 8944, 21156, 292, 490, 300, 19060, 3991, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06081903957929768, "compression_ratio": 1.801498127340824, "no_speech_prob": 0.006486705504357815}, {"id": 1078, "seek": 504700, "start": 5051.0, "end": 5060.0, "text": " Okay, so I'm going to stop it here and we'll begin to actually start to plot this and take a look at what this data actually looks like.", "tokens": [50564, 1033, 11, 370, 286, 478, 516, 281, 1590, 309, 510, 293, 321, 603, 1841, 281, 767, 722, 281, 7542, 341, 293, 747, 257, 574, 412, 437, 341, 1412, 767, 1542, 411, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06081903957929768, "compression_ratio": 1.801498127340824, "no_speech_prob": 0.006486705504357815}, {"id": 1079, "seek": 504700, "start": 5060.0, "end": 5065.0, "text": " In this lesson, we'll take a look at the data and do some data cleaning and maybe do some visualizations.", "tokens": [51014, 682, 341, 6898, 11, 321, 603, 747, 257, 574, 412, 264, 1412, 293, 360, 512, 1412, 8924, 293, 1310, 360, 512, 5056, 14455, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06081903957929768, "compression_ratio": 1.801498127340824, "no_speech_prob": 0.006486705504357815}, {"id": 1080, "seek": 504700, "start": 5065.0, "end": 5072.0, "text": " Let's go back into this notebook and rerun the first cell here, load everything in that warning that we've seen before.", "tokens": [51264, 961, 311, 352, 646, 666, 341, 21060, 293, 43819, 409, 264, 700, 2815, 510, 11, 3677, 1203, 294, 300, 9164, 300, 321, 600, 1612, 949, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06081903957929768, "compression_ratio": 1.801498127340824, "no_speech_prob": 0.006486705504357815}, {"id": 1081, "seek": 504700, "start": 5072.0, "end": 5076.0, "text": " Load in the data and take a look at the data dot head.", "tokens": [51614, 48408, 294, 264, 1412, 293, 747, 257, 574, 412, 264, 1412, 5893, 1378, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06081903957929768, "compression_ratio": 1.801498127340824, "no_speech_prob": 0.006486705504357815}, {"id": 1082, "seek": 507600, "start": 5076.0, "end": 5078.0, "text": " So everything here looks normal.", "tokens": [50364, 407, 1203, 510, 1542, 2710, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08134442668850139, "compression_ratio": 1.6908396946564885, "no_speech_prob": 0.006095730699598789}, {"id": 1083, "seek": 507600, "start": 5078.0, "end": 5084.0, "text": " And the day to day data science work, you often take a look at what's in each of these columns.", "tokens": [50464, 400, 264, 786, 281, 786, 1412, 3497, 589, 11, 291, 2049, 747, 257, 574, 412, 437, 311, 294, 1184, 295, 613, 13766, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08134442668850139, "compression_ratio": 1.6908396946564885, "no_speech_prob": 0.006095730699598789}, {"id": 1084, "seek": 507600, "start": 5084.0, "end": 5090.0, "text": " So we can just do a very quick look, for example, at a data frame and take a look at the company type.", "tokens": [50764, 407, 321, 393, 445, 360, 257, 588, 1702, 574, 11, 337, 1365, 11, 412, 257, 1412, 3920, 293, 747, 257, 574, 412, 264, 2237, 2010, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08134442668850139, "compression_ratio": 1.6908396946564885, "no_speech_prob": 0.006095730699598789}, {"id": 1085, "seek": 507600, "start": 5090.0, "end": 5097.0, "text": " Now, if we have thousands of rows, we don't want to look at all of them, but we do want to look at the unique ones.", "tokens": [51064, 823, 11, 498, 321, 362, 5383, 295, 13241, 11, 321, 500, 380, 528, 281, 574, 412, 439, 295, 552, 11, 457, 321, 360, 528, 281, 574, 412, 264, 3845, 2306, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08134442668850139, "compression_ratio": 1.6908396946564885, "no_speech_prob": 0.006095730699598789}, {"id": 1086, "seek": 507600, "start": 5097.0, "end": 5102.0, "text": " In here, we see that there's three types of unique companies according into our file right now.", "tokens": [51414, 682, 510, 11, 321, 536, 300, 456, 311, 1045, 3467, 295, 3845, 3431, 4650, 666, 527, 3991, 558, 586, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08134442668850139, "compression_ratio": 1.6908396946564885, "no_speech_prob": 0.006095730699598789}, {"id": 1087, "seek": 510200, "start": 5102.0, "end": 5106.0, "text": " We have what I think the word is supposed to be independent producer operator.", "tokens": [50364, 492, 362, 437, 286, 519, 264, 1349, 307, 3442, 281, 312, 6695, 12314, 12973, 13, 50564], "temperature": 0.0, "avg_logprob": -0.047065794467926025, "compression_ratio": 1.748917748917749, "no_speech_prob": 0.0939391478896141}, {"id": 1088, "seek": 510200, "start": 5106.0, "end": 5110.0, "text": " The next one is operating subsidiary and contractor.", "tokens": [50564, 440, 958, 472, 307, 7447, 48296, 822, 293, 26463, 13, 50764], "temperature": 0.0, "avg_logprob": -0.047065794467926025, "compression_ratio": 1.748917748917749, "no_speech_prob": 0.0939391478896141}, {"id": 1089, "seek": 510200, "start": 5110.0, "end": 5116.0, "text": " Now, obviously, this first piece of information is that the data has some data quality issues.", "tokens": [50764, 823, 11, 2745, 11, 341, 700, 2522, 295, 1589, 307, 300, 264, 1412, 575, 512, 1412, 3125, 2663, 13, 51064], "temperature": 0.0, "avg_logprob": -0.047065794467926025, "compression_ratio": 1.748917748917749, "no_speech_prob": 0.0939391478896141}, {"id": 1090, "seek": 510200, "start": 5116.0, "end": 5119.0, "text": " So let's go ahead and actually make a correction here for this data.", "tokens": [51064, 407, 718, 311, 352, 2286, 293, 767, 652, 257, 19984, 510, 337, 341, 1412, 13, 51214], "temperature": 0.0, "avg_logprob": -0.047065794467926025, "compression_ratio": 1.748917748917749, "no_speech_prob": 0.0939391478896141}, {"id": 1091, "seek": 510200, "start": 5119.0, "end": 5126.0, "text": " We'd actually like to replace all of the independent producer operators with independent producer operators.", "tokens": [51214, 492, 1116, 767, 411, 281, 7406, 439, 295, 264, 6695, 12314, 19077, 365, 6695, 12314, 19077, 13, 51564], "temperature": 0.0, "avg_logprob": -0.047065794467926025, "compression_ratio": 1.748917748917749, "no_speech_prob": 0.0939391478896141}, {"id": 1092, "seek": 512600, "start": 5126.0, "end": 5133.0, "text": " So the way to do this in place is to actually do a company type to replace it.", "tokens": [50364, 407, 264, 636, 281, 360, 341, 294, 1081, 307, 281, 767, 360, 257, 2237, 2010, 281, 7406, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1006358817771629, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.027154328301548958}, {"id": 1093, "seek": 512600, "start": 5133.0, "end": 5138.0, "text": " And if you don't remember the syntax for replacing, if you do a shift tab, you can actually see the tool tip come up.", "tokens": [50714, 400, 498, 291, 500, 380, 1604, 264, 28431, 337, 19139, 11, 498, 291, 360, 257, 5513, 4421, 11, 291, 393, 767, 536, 264, 2290, 4125, 808, 493, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1006358817771629, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.027154328301548958}, {"id": 1094, "seek": 512600, "start": 5138.0, "end": 5140.0, "text": " There's two ways to do this.", "tokens": [50964, 821, 311, 732, 2098, 281, 360, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1006358817771629, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.027154328301548958}, {"id": 1095, "seek": 512600, "start": 5140.0, "end": 5144.0, "text": " You can say to replace equals x, the value in place, everything else.", "tokens": [51064, 509, 393, 584, 281, 7406, 6915, 2031, 11, 264, 2158, 294, 1081, 11, 1203, 1646, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1006358817771629, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.027154328301548958}, {"id": 1096, "seek": 512600, "start": 5144.0, "end": 5147.0, "text": " And we can also do it by giving it a dictionary.", "tokens": [51264, 400, 321, 393, 611, 360, 309, 538, 2902, 309, 257, 25890, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1006358817771629, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.027154328301548958}, {"id": 1097, "seek": 512600, "start": 5147.0, "end": 5149.0, "text": " I'm actually going to do it the standard way.", "tokens": [51414, 286, 478, 767, 516, 281, 360, 309, 264, 3832, 636, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1006358817771629, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.027154328301548958}, {"id": 1098, "seek": 514900, "start": 5149.0, "end": 5156.0, "text": " So to replace should be equal to, we'll just copy the words from above.", "tokens": [50364, 407, 281, 7406, 820, 312, 2681, 281, 11, 321, 603, 445, 5055, 264, 2283, 490, 3673, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1307581663131714, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.45683351159095764}, {"id": 1099, "seek": 514900, "start": 5156.0, "end": 5162.0, "text": " And the value I would like to replace it with is going to be the independent producer operator.", "tokens": [50714, 400, 264, 2158, 286, 576, 411, 281, 7406, 309, 365, 307, 516, 281, 312, 264, 6695, 12314, 12973, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1307581663131714, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.45683351159095764}, {"id": 1100, "seek": 514900, "start": 5162.0, "end": 5165.0, "text": " This cell is already becoming wider than the screen.", "tokens": [51014, 639, 2815, 307, 1217, 5617, 11842, 813, 264, 2568, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1307581663131714, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.45683351159095764}, {"id": 1101, "seek": 514900, "start": 5165.0, "end": 5169.0, "text": " So I'm going to actually hit return here so that it's lined up with the beginning of this.", "tokens": [51164, 407, 286, 478, 516, 281, 767, 2045, 2736, 510, 370, 300, 309, 311, 17189, 493, 365, 264, 2863, 295, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1307581663131714, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.45683351159095764}, {"id": 1102, "seek": 514900, "start": 5169.0, "end": 5172.0, "text": " So you can say one later on can actually read this in a much nicer way.", "tokens": [51364, 407, 291, 393, 584, 472, 1780, 322, 393, 767, 1401, 341, 294, 257, 709, 22842, 636, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1307581663131714, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.45683351159095764}, {"id": 1103, "seek": 514900, "start": 5172.0, "end": 5177.0, "text": " Suppose a DF company replace this thing and then do head on this.", "tokens": [51514, 21360, 257, 48336, 2237, 7406, 341, 551, 293, 550, 360, 1378, 322, 341, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1307581663131714, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.45683351159095764}, {"id": 1104, "seek": 517700, "start": 5177.0, "end": 5184.0, "text": " It should show us that it is indeed replacing the independent producer, but it hasn't replaced it in the actual data frame itself.", "tokens": [50364, 467, 820, 855, 505, 300, 309, 307, 6451, 19139, 264, 6695, 12314, 11, 457, 309, 6132, 380, 10772, 309, 294, 264, 3539, 1412, 3920, 2564, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06477163766176645, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.028861477971076965}, {"id": 1105, "seek": 517700, "start": 5184.0, "end": 5190.0, "text": " To do that, we have to add an extra command here, which is in place equals true.", "tokens": [50714, 1407, 360, 300, 11, 321, 362, 281, 909, 364, 2857, 5622, 510, 11, 597, 307, 294, 1081, 6915, 2074, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06477163766176645, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.028861477971076965}, {"id": 1106, "seek": 517700, "start": 5190.0, "end": 5194.0, "text": " One extra interesting, let's call it a quirk of the Jupiter system.", "tokens": [51014, 1485, 2857, 1880, 11, 718, 311, 818, 309, 257, 421, 18610, 295, 264, 24567, 1185, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06477163766176645, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.028861477971076965}, {"id": 1107, "seek": 517700, "start": 5194.0, "end": 5200.0, "text": " If you're in line with the beginning of this command, if you do a tool tip by doing a shift tab, it appears.", "tokens": [51214, 759, 291, 434, 294, 1622, 365, 264, 2863, 295, 341, 5622, 11, 498, 291, 360, 257, 2290, 4125, 538, 884, 257, 5513, 4421, 11, 309, 7038, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06477163766176645, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.028861477971076965}, {"id": 1108, "seek": 517700, "start": 5200.0, "end": 5205.0, "text": " If you're not on that first line and it's broken up across multiple lines, then doing the shift tab in the middle here will not work.", "tokens": [51514, 759, 291, 434, 406, 322, 300, 700, 1622, 293, 309, 311, 5463, 493, 2108, 3866, 3876, 11, 550, 884, 264, 5513, 4421, 294, 264, 2808, 510, 486, 406, 589, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06477163766176645, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.028861477971076965}, {"id": 1109, "seek": 520500, "start": 5205.0, "end": 5208.0, "text": " If you're thinking, is it in place one word or is it in underscore place?", "tokens": [50364, 759, 291, 434, 1953, 11, 307, 309, 294, 1081, 472, 1349, 420, 307, 309, 294, 37556, 1081, 30, 50514], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1110, "seek": 520500, "start": 5208.0, "end": 5210.0, "text": " You have to do it up here to get the tool tip help.", "tokens": [50514, 509, 362, 281, 360, 309, 493, 510, 281, 483, 264, 2290, 4125, 854, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1111, "seek": 520500, "start": 5210.0, "end": 5212.0, "text": " So it's in place one word.", "tokens": [50614, 407, 309, 311, 294, 1081, 472, 1349, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1112, "seek": 520500, "start": 5212.0, "end": 5213.0, "text": " So I typed it down here.", "tokens": [50714, 407, 286, 33941, 309, 760, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1113, "seek": 520500, "start": 5213.0, "end": 5219.0, "text": " This will in place change the DF company type to be independent.", "tokens": [50764, 639, 486, 294, 1081, 1319, 264, 48336, 2237, 2010, 281, 312, 6695, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1114, "seek": 520500, "start": 5219.0, "end": 5222.0, "text": " So this has now been replaced in place.", "tokens": [51064, 407, 341, 575, 586, 668, 10772, 294, 1081, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1115, "seek": 520500, "start": 5222.0, "end": 5230.0, "text": " Now we also see that even though I could actually hit tab, which is a very useful thing to be able to call the column heading by just typing the beginning of it.", "tokens": [51214, 823, 321, 611, 536, 300, 754, 1673, 286, 727, 767, 2045, 4421, 11, 597, 307, 257, 588, 4420, 551, 281, 312, 1075, 281, 818, 264, 7738, 9864, 538, 445, 18444, 264, 2863, 295, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1063429594039917, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.036206163465976715}, {"id": 1116, "seek": 523000, "start": 5231.0, "end": 5237.0, "text": " Having these spaces is going to just make life a little bit more difficult than it should be.", "tokens": [50414, 10222, 613, 7673, 307, 516, 281, 445, 652, 993, 257, 707, 857, 544, 2252, 813, 309, 820, 312, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11154922155233529, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.43743637204170227}, {"id": 1117, "seek": 523000, "start": 5237.0, "end": 5244.0, "text": " So what I'd like to do is actually go through all of the columns in this data frame and replace every single space with an underscore.", "tokens": [50714, 407, 437, 286, 1116, 411, 281, 360, 307, 767, 352, 807, 439, 295, 264, 13766, 294, 341, 1412, 3920, 293, 7406, 633, 2167, 1901, 365, 364, 37556, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11154922155233529, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.43743637204170227}, {"id": 1118, "seek": 523000, "start": 5244.0, "end": 5247.0, "text": " So it's still readable, but I'd just like to actually do that.", "tokens": [51064, 407, 309, 311, 920, 49857, 11, 457, 286, 1116, 445, 411, 281, 767, 360, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11154922155233529, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.43743637204170227}, {"id": 1119, "seek": 523000, "start": 5247.0, "end": 5250.0, "text": " So to do that, we actually would like to do a name of the columns.", "tokens": [51214, 407, 281, 360, 300, 11, 321, 767, 576, 411, 281, 360, 257, 1315, 295, 264, 13766, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11154922155233529, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.43743637204170227}, {"id": 1120, "seek": 523000, "start": 5250.0, "end": 5255.0, "text": " So we DF dot rename index columns equals and keyword arguments.", "tokens": [51364, 407, 321, 48336, 5893, 36741, 8186, 13766, 6915, 293, 20428, 12869, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11154922155233529, "compression_ratio": 1.7154471544715446, "no_speech_prob": 0.43743637204170227}, {"id": 1121, "seek": 525500, "start": 5255.0, "end": 5257.0, "text": " So you can say columns equals.", "tokens": [50364, 407, 291, 393, 584, 13766, 6915, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10938230473944481, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.013633997179567814}, {"id": 1122, "seek": 525500, "start": 5257.0, "end": 5261.0, "text": " Now this is a really fun trick because you actually pass a Lambda function.", "tokens": [50464, 823, 341, 307, 257, 534, 1019, 4282, 570, 291, 767, 1320, 257, 45691, 2445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10938230473944481, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.013633997179567814}, {"id": 1123, "seek": 525500, "start": 5261.0, "end": 5266.0, "text": " Lambda function says for everything in that columns, I'd like to do X dot replace.", "tokens": [50664, 45691, 2445, 1619, 337, 1203, 294, 300, 13766, 11, 286, 1116, 411, 281, 360, 1783, 5893, 7406, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10938230473944481, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.013633997179567814}, {"id": 1124, "seek": 525500, "start": 5266.0, "end": 5273.0, "text": " So similar syntax as above, but I replace all of the spaces with underscores.", "tokens": [50914, 407, 2531, 28431, 382, 3673, 11, 457, 286, 7406, 439, 295, 264, 7673, 365, 16692, 66, 2706, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10938230473944481, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.013633997179567814}, {"id": 1125, "seek": 525500, "start": 5273.0, "end": 5280.0, "text": " So the thing that's being quoted is the thing that's being found single space replacing that space with is the underscore.", "tokens": [51264, 407, 264, 551, 300, 311, 885, 30047, 307, 264, 551, 300, 311, 885, 1352, 2167, 1901, 19139, 300, 1901, 365, 307, 264, 37556, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10938230473944481, "compression_ratio": 1.7410714285714286, "no_speech_prob": 0.013633997179567814}, {"id": 1126, "seek": 528000, "start": 5280.0, "end": 5286.0, "text": " So I'd like to rename the data frame where every column space will be turned into an underscore.", "tokens": [50364, 407, 286, 1116, 411, 281, 36741, 264, 1412, 3920, 689, 633, 7738, 1901, 486, 312, 3574, 666, 364, 37556, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09186647678243703, "compression_ratio": 1.7904411764705883, "no_speech_prob": 0.017984114587306976}, {"id": 1127, "seek": 528000, "start": 5286.0, "end": 5290.0, "text": " And of course, I would also like to actually make this happen to the data frame in place.", "tokens": [50664, 400, 295, 1164, 11, 286, 576, 611, 411, 281, 767, 652, 341, 1051, 281, 264, 1412, 3920, 294, 1081, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09186647678243703, "compression_ratio": 1.7904411764705883, "no_speech_prob": 0.017984114587306976}, {"id": 1128, "seek": 528000, "start": 5290.0, "end": 5296.0, "text": " So I say in place equals true now to check if that actually worked as we hope we can look at the DF dot head.", "tokens": [50864, 407, 286, 584, 294, 1081, 6915, 2074, 586, 281, 1520, 498, 300, 767, 2732, 382, 321, 1454, 321, 393, 574, 412, 264, 48336, 5893, 1378, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09186647678243703, "compression_ratio": 1.7904411764705883, "no_speech_prob": 0.017984114587306976}, {"id": 1129, "seek": 528000, "start": 5296.0, "end": 5301.0, "text": " And we see that underscore name mine underscore state mine underscore county and so on.", "tokens": [51164, 400, 321, 536, 300, 37556, 1315, 3892, 37556, 1785, 3892, 37556, 9928, 293, 370, 322, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09186647678243703, "compression_ratio": 1.7904411764705883, "no_speech_prob": 0.017984114587306976}, {"id": 1130, "seek": 528000, "start": 5301.0, "end": 5307.0, "text": " So this with one line and very quickly typing it out replaced all of the spaces here with underscores.", "tokens": [51414, 407, 341, 365, 472, 1622, 293, 588, 2661, 18444, 309, 484, 10772, 439, 295, 264, 7673, 510, 365, 16692, 66, 2706, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09186647678243703, "compression_ratio": 1.7904411764705883, "no_speech_prob": 0.017984114587306976}, {"id": 1131, "seek": 530700, "start": 5307.0, "end": 5311.0, "text": " And this will just make life much easier as we go on from here.", "tokens": [50364, 400, 341, 486, 445, 652, 993, 709, 3571, 382, 321, 352, 322, 490, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1132, "seek": 530700, "start": 5311.0, "end": 5313.0, "text": " Let's also take a look at how big is this data frame.", "tokens": [50564, 961, 311, 611, 747, 257, 574, 412, 577, 955, 307, 341, 1412, 3920, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1133, "seek": 530700, "start": 5313.0, "end": 5315.0, "text": " We have 1400 data points.", "tokens": [50664, 492, 362, 46795, 1412, 2793, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1134, "seek": 530700, "start": 5315.0, "end": 5318.0, "text": " And let's take a first look at just what's in here.", "tokens": [50764, 400, 718, 311, 747, 257, 700, 574, 412, 445, 437, 311, 294, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1135, "seek": 530700, "start": 5318.0, "end": 5325.0, "text": " So we just read this off as my name all the way through regions and average employees and labor hours.", "tokens": [50914, 407, 321, 445, 1401, 341, 766, 382, 452, 1315, 439, 264, 636, 807, 10682, 293, 4274, 6619, 293, 5938, 2496, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1136, "seek": 530700, "start": 5325.0, "end": 5331.0, "text": " Let's see what the relationship between the number of employees for a mine and the number of labor hours looks like.", "tokens": [51264, 961, 311, 536, 437, 264, 2480, 1296, 264, 1230, 295, 6619, 337, 257, 3892, 293, 264, 1230, 295, 5938, 2496, 1542, 411, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1137, "seek": 530700, "start": 5331.0, "end": 5333.0, "text": " There's a couple of ways we can do this.", "tokens": [51564, 821, 311, 257, 1916, 295, 2098, 321, 393, 360, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07138354778289795, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.04812317341566086}, {"id": 1138, "seek": 533300, "start": 5333.0, "end": 5335.0, "text": " Let's see the simplest way I can think of is to do a scatter plot.", "tokens": [50364, 961, 311, 536, 264, 22811, 636, 286, 393, 519, 295, 307, 281, 360, 257, 34951, 7542, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08701579084674131, "compression_ratio": 1.6, "no_speech_prob": 0.016911299899220467}, {"id": 1139, "seek": 533300, "start": 5335.0, "end": 5340.0, "text": " So we can do PLT dot scatter and DF dot average employees.", "tokens": [50464, 407, 321, 393, 360, 6999, 51, 5893, 34951, 293, 48336, 5893, 4274, 6619, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08701579084674131, "compression_ratio": 1.6, "no_speech_prob": 0.016911299899220467}, {"id": 1140, "seek": 533300, "start": 5340.0, "end": 5348.0, "text": " So now I've indexed the data frames column by simply doing a dot before it because it has a space in it.", "tokens": [50714, 407, 586, 286, 600, 8186, 292, 264, 1412, 12083, 7738, 538, 2935, 884, 257, 5893, 949, 309, 570, 309, 575, 257, 1901, 294, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08701579084674131, "compression_ratio": 1.6, "no_speech_prob": 0.016911299899220467}, {"id": 1141, "seek": 533300, "start": 5348.0, "end": 5353.0, "text": " I would have to have done it the DF bracket space labor hours, for example.", "tokens": [51114, 286, 576, 362, 281, 362, 1096, 309, 264, 48336, 16904, 1901, 5938, 2496, 11, 337, 1365, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08701579084674131, "compression_ratio": 1.6, "no_speech_prob": 0.016911299899220467}, {"id": 1142, "seek": 533300, "start": 5353.0, "end": 5355.0, "text": " So this will actually work.", "tokens": [51364, 407, 341, 486, 767, 589, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08701579084674131, "compression_ratio": 1.6, "no_speech_prob": 0.016911299899220467}, {"id": 1143, "seek": 533300, "start": 5355.0, "end": 5357.0, "text": " You see that the plot actually works as expected.", "tokens": [51464, 509, 536, 300, 264, 7542, 767, 1985, 382, 5176, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08701579084674131, "compression_ratio": 1.6, "no_speech_prob": 0.016911299899220467}, {"id": 1144, "seek": 535700, "start": 5357.0, "end": 5364.0, "text": " But now instead of having to type out labor hours previously with a space there, I can actually do dot labor hours.", "tokens": [50364, 583, 586, 2602, 295, 1419, 281, 2010, 484, 5938, 2496, 8046, 365, 257, 1901, 456, 11, 286, 393, 767, 360, 5893, 5938, 2496, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1096096416511158, "compression_ratio": 1.6141732283464567, "no_speech_prob": 0.0618492029607296}, {"id": 1145, "seek": 535700, "start": 5364.0, "end": 5368.0, "text": " And that just makes my life just ever so slightly bit better.", "tokens": [50714, 400, 300, 445, 1669, 452, 993, 445, 1562, 370, 4748, 857, 1101, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1096096416511158, "compression_ratio": 1.6141732283464567, "no_speech_prob": 0.0618492029607296}, {"id": 1146, "seek": 535700, "start": 5368.0, "end": 5372.0, "text": " Let's label this.", "tokens": [50914, 961, 311, 7645, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1096096416511158, "compression_ratio": 1.6141732283464567, "no_speech_prob": 0.0618492029607296}, {"id": 1147, "seek": 535700, "start": 5372.0, "end": 5375.0, "text": " Okay, so just as we expect, number of employees goes up.", "tokens": [51114, 1033, 11, 370, 445, 382, 321, 2066, 11, 1230, 295, 6619, 1709, 493, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1096096416511158, "compression_ratio": 1.6141732283464567, "no_speech_prob": 0.0618492029607296}, {"id": 1148, "seek": 535700, "start": 5375.0, "end": 5379.0, "text": " The total number of hours worked at that mine goes up in a pretty linear fashion.", "tokens": [51264, 440, 3217, 1230, 295, 2496, 2732, 412, 300, 3892, 1709, 493, 294, 257, 1238, 8213, 6700, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1096096416511158, "compression_ratio": 1.6141732283464567, "no_speech_prob": 0.0618492029607296}, {"id": 1149, "seek": 535700, "start": 5379.0, "end": 5383.0, "text": " Another way of doing this would actually be linear regression plot on this.", "tokens": [51464, 3996, 636, 295, 884, 341, 576, 767, 312, 8213, 24590, 7542, 322, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1096096416511158, "compression_ratio": 1.6141732283464567, "no_speech_prob": 0.0618492029607296}, {"id": 1150, "seek": 538300, "start": 5383.0, "end": 5385.0, "text": " And you can use Seaborn for that.", "tokens": [50364, 400, 291, 393, 764, 1100, 455, 1865, 337, 300, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1151, "seek": 538300, "start": 5385.0, "end": 5387.0, "text": " So SNS dot regression plot.", "tokens": [50464, 407, 13955, 50, 5893, 24590, 7542, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1152, "seek": 538300, "start": 5387.0, "end": 5391.0, "text": " And I'll do, I'll pass it the X and Y this way.", "tokens": [50564, 400, 286, 603, 360, 11, 286, 603, 1320, 309, 264, 1783, 293, 398, 341, 636, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1153, "seek": 538300, "start": 5391.0, "end": 5395.0, "text": " And so when you can see here, the regression plot does the same thing as above,", "tokens": [50764, 400, 370, 562, 291, 393, 536, 510, 11, 264, 24590, 7542, 775, 264, 912, 551, 382, 3673, 11, 50964], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1154, "seek": 538300, "start": 5395.0, "end": 5400.0, "text": " but it actually fits aligned in the data and gives it a bootstrapping in the middle of it.", "tokens": [50964, 457, 309, 767, 9001, 17962, 294, 264, 1412, 293, 2709, 309, 257, 11450, 19639, 3759, 294, 264, 2808, 295, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1155, "seek": 538300, "start": 5400.0, "end": 5403.0, "text": " This bootstrap is done by a confidence interval of 95%.", "tokens": [51214, 639, 11450, 372, 4007, 307, 1096, 538, 257, 6687, 15035, 295, 13420, 6856, 51364], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1156, "seek": 538300, "start": 5403.0, "end": 5409.0, "text": " And it bootstraps a thousand times the underlying data to actually figure out what the variance is.", "tokens": [51364, 400, 309, 11450, 19639, 1878, 257, 4714, 1413, 264, 14217, 1412, 281, 767, 2573, 484, 437, 264, 21977, 307, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11206163453661706, "compression_ratio": 1.689922480620155, "no_speech_prob": 0.07471685856580734}, {"id": 1157, "seek": 540900, "start": 5409.0, "end": 5415.0, "text": " So this is a kind of neat, very quick way of getting an initial look at two variables that you think might have a relationship and they clearly do.", "tokens": [50364, 407, 341, 307, 257, 733, 295, 10654, 11, 588, 1702, 636, 295, 1242, 364, 5883, 574, 412, 732, 9102, 300, 291, 519, 1062, 362, 257, 2480, 293, 436, 4448, 360, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08270620087445793, "compression_ratio": 1.8254545454545454, "no_speech_prob": 0.04335169494152069}, {"id": 1158, "seek": 540900, "start": 5415.0, "end": 5421.0, "text": " Now, if you'd like to actually save this figure as in this isn't just to look at and have it for later on,", "tokens": [50664, 823, 11, 498, 291, 1116, 411, 281, 767, 3155, 341, 2573, 382, 294, 341, 1943, 380, 445, 281, 574, 412, 293, 362, 309, 337, 1780, 322, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08270620087445793, "compression_ratio": 1.8254545454545454, "no_speech_prob": 0.04335169494152069}, {"id": 1159, "seek": 540900, "start": 5421.0, "end": 5425.0, "text": " you should actually save this figure into the figures directory.", "tokens": [50964, 291, 820, 767, 3155, 341, 2573, 666, 264, 9624, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08270620087445793, "compression_ratio": 1.8254545454545454, "no_speech_prob": 0.04335169494152069}, {"id": 1160, "seek": 540900, "start": 5425.0, "end": 5429.0, "text": " So I would do PLT dot save fig figures.", "tokens": [51164, 407, 286, 576, 360, 6999, 51, 5893, 3155, 2147, 9624, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08270620087445793, "compression_ratio": 1.8254545454545454, "no_speech_prob": 0.04335169494152069}, {"id": 1161, "seek": 540900, "start": 5429.0, "end": 5438.0, "text": " And I like to actually have the same beginning date structure for these figures so that if I am looking through the figures directory later on", "tokens": [51364, 400, 286, 411, 281, 767, 362, 264, 912, 2863, 4002, 3877, 337, 613, 9624, 370, 300, 498, 286, 669, 1237, 807, 264, 9624, 21120, 1780, 322, 51814], "temperature": 0.0, "avg_logprob": -0.08270620087445793, "compression_ratio": 1.8254545454545454, "no_speech_prob": 0.04335169494152069}, {"id": 1162, "seek": 543800, "start": 5438.0, "end": 5445.0, "text": " across all the different notebooks that I'll be looking at, I can easily re-correspond which figure came from which notebook.", "tokens": [50364, 2108, 439, 264, 819, 43782, 300, 286, 603, 312, 1237, 412, 11, 286, 393, 3612, 319, 12, 19558, 6663, 597, 2573, 1361, 490, 597, 21060, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0875104940854586, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.012050474993884563}, {"id": 1163, "seek": 543800, "start": 5445.0, "end": 5450.0, "text": " So this is just a little bit of mental accounting to get this straightforward.", "tokens": [50714, 407, 341, 307, 445, 257, 707, 857, 295, 4973, 19163, 281, 483, 341, 15325, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0875104940854586, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.012050474993884563}, {"id": 1164, "seek": 543800, "start": 5450.0, "end": 5455.0, "text": " And let's do employees versus hours.", "tokens": [50964, 400, 718, 311, 360, 6619, 5717, 2496, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0875104940854586, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.012050474993884563}, {"id": 1165, "seek": 543800, "start": 5455.0, "end": 5458.0, "text": " Let's keep our underscores and spaces being the same.", "tokens": [51214, 961, 311, 1066, 527, 16692, 66, 2706, 293, 7673, 885, 264, 912, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0875104940854586, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.012050474993884563}, {"id": 1166, "seek": 543800, "start": 5458.0, "end": 5465.0, "text": " All right, so that's our first look at the data and it is a quick linear regression plot against two of the features that we found inside,", "tokens": [51364, 1057, 558, 11, 370, 300, 311, 527, 700, 574, 412, 264, 1412, 293, 309, 307, 257, 1702, 8213, 24590, 7542, 1970, 732, 295, 264, 4122, 300, 321, 1352, 1854, 11, 51714], "temperature": 0.0, "avg_logprob": -0.0875104940854586, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.012050474993884563}, {"id": 1167, "seek": 546500, "start": 5465.0, "end": 5471.0, "text": " as well as a bit of data frame manipulation using pandas.", "tokens": [50364, 382, 731, 382, 257, 857, 295, 1412, 3920, 26475, 1228, 4565, 296, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0729473015972387, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.02368023805320263}, {"id": 1168, "seek": 546500, "start": 5471.0, "end": 5475.0, "text": " We've seen a very first look at this and we see that there's at least some trends in this data.", "tokens": [50664, 492, 600, 1612, 257, 588, 700, 574, 412, 341, 293, 321, 536, 300, 456, 311, 412, 1935, 512, 13892, 294, 341, 1412, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0729473015972387, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.02368023805320263}, {"id": 1169, "seek": 546500, "start": 5475.0, "end": 5477.0, "text": " There's probably something pretty interesting in here.", "tokens": [50864, 821, 311, 1391, 746, 1238, 1880, 294, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0729473015972387, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.02368023805320263}, {"id": 1170, "seek": 546500, "start": 5477.0, "end": 5481.0, "text": " So I'll keep going with this data set and seeing what I can come out with this.", "tokens": [50964, 407, 286, 603, 1066, 516, 365, 341, 1412, 992, 293, 2577, 437, 286, 393, 808, 484, 365, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0729473015972387, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.02368023805320263}, {"id": 1171, "seek": 546500, "start": 5481.0, "end": 5488.0, "text": " Now I will actually remove this header and I will toggle the toolbar as well as I need space.", "tokens": [51164, 823, 286, 486, 767, 4159, 341, 23117, 293, 286, 486, 31225, 264, 47715, 382, 731, 382, 286, 643, 1901, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0729473015972387, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.02368023805320263}, {"id": 1172, "seek": 546500, "start": 5488.0, "end": 5490.0, "text": " So let me go ahead and do that.", "tokens": [51514, 407, 718, 385, 352, 2286, 293, 360, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0729473015972387, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.02368023805320263}, {"id": 1173, "seek": 549000, "start": 5490.0, "end": 5496.0, "text": " So previously we saw with seaborne a really nice regression of the average number of employees versus labor hours.", "tokens": [50364, 407, 8046, 321, 1866, 365, 369, 3816, 716, 257, 534, 1481, 24590, 295, 264, 4274, 1230, 295, 6619, 5717, 5938, 2496, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11495196434759325, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.006691392045468092}, {"id": 1174, "seek": 549000, "start": 5496.0, "end": 5498.0, "text": " Let's keep seeing what's in this data set.", "tokens": [50664, 961, 311, 1066, 2577, 437, 311, 294, 341, 1412, 992, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11495196434759325, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.006691392045468092}, {"id": 1175, "seek": 549000, "start": 5498.0, "end": 5501.0, "text": " Let's take a look at the columns for column in.", "tokens": [50764, 961, 311, 747, 257, 574, 412, 264, 13766, 337, 7738, 294, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11495196434759325, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.006691392045468092}, {"id": 1176, "seek": 549000, "start": 5501.0, "end": 5503.0, "text": " So these are the columns in the data frame.", "tokens": [50914, 407, 613, 366, 264, 13766, 294, 264, 1412, 3920, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11495196434759325, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.006691392045468092}, {"id": 1177, "seek": 549000, "start": 5503.0, "end": 5511.0, "text": " We have year and then various things about the mind itself, the name, the state, the county, its status and its type, the company type, union code.", "tokens": [51014, 492, 362, 1064, 293, 550, 3683, 721, 466, 264, 1575, 2564, 11, 264, 1315, 11, 264, 1785, 11, 264, 9928, 11, 1080, 6558, 293, 1080, 2010, 11, 264, 2237, 2010, 11, 11671, 3089, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11495196434759325, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.006691392045468092}, {"id": 1178, "seek": 549000, "start": 5511.0, "end": 5517.0, "text": " There's a coal supply region, the production in short tons and the number of employees in labor hours.", "tokens": [51414, 821, 311, 257, 10209, 5847, 4458, 11, 264, 4265, 294, 2099, 9131, 293, 264, 1230, 295, 6619, 294, 5938, 2496, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11495196434759325, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.006691392045468092}, {"id": 1179, "seek": 551700, "start": 5517.0, "end": 5524.0, "text": " So see if the amount people work, like the labor hours total is very predictive of the production in short tons.", "tokens": [50364, 407, 536, 498, 264, 2372, 561, 589, 11, 411, 264, 5938, 2496, 3217, 307, 588, 35521, 295, 264, 4265, 294, 2099, 9131, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1180, "seek": 551700, "start": 5524.0, "end": 5526.0, "text": " Let's take a look at that scatter plot.", "tokens": [50714, 961, 311, 747, 257, 574, 412, 300, 34951, 7542, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1181, "seek": 551700, "start": 5528.0, "end": 5529.0, "text": " Let's take a look here.", "tokens": [50914, 961, 311, 747, 257, 574, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1182, "seek": 551700, "start": 5529.0, "end": 5533.0, "text": " So it doesn't appear to be a fantastic relationship here.", "tokens": [50964, 407, 309, 1177, 380, 4204, 281, 312, 257, 5456, 2480, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1183, "seek": 551700, "start": 5533.0, "end": 5535.0, "text": " Let's take a look at the actual histogram of this.", "tokens": [51164, 961, 311, 747, 257, 574, 412, 264, 3539, 49816, 295, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1184, "seek": 551700, "start": 5535.0, "end": 5541.0, "text": " So I'll do df production short tons dot hist, which is a function on pandas.", "tokens": [51264, 407, 286, 603, 360, 274, 69, 4265, 2099, 9131, 5893, 1758, 11, 597, 307, 257, 2445, 322, 4565, 296, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1185, "seek": 551700, "start": 5541.0, "end": 5545.0, "text": " And we see a very bad looking histogram.", "tokens": [51564, 400, 321, 536, 257, 588, 1578, 1237, 49816, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1329000980482189, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.006691875401884317}, {"id": 1186, "seek": 554500, "start": 5545.0, "end": 5551.0, "text": " So it looks like a lot of things in this first one, which is either typical of a power law or some other kind of problem.", "tokens": [50364, 407, 309, 1542, 411, 257, 688, 295, 721, 294, 341, 700, 472, 11, 597, 307, 2139, 7476, 295, 257, 1347, 2101, 420, 512, 661, 733, 295, 1154, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07290571127364885, "compression_ratio": 1.8781362007168458, "no_speech_prob": 0.010011597536504269}, {"id": 1187, "seek": 554500, "start": 5551.0, "end": 5553.0, "text": " Let's do a few transformations on this production.", "tokens": [50664, 961, 311, 360, 257, 1326, 34852, 322, 341, 4265, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07290571127364885, "compression_ratio": 1.8781362007168458, "no_speech_prob": 0.010011597536504269}, {"id": 1188, "seek": 554500, "start": 5553.0, "end": 5560.0, "text": " Let's see if we can find the minimum value or yeah, let's take a look at the minimum value zero.", "tokens": [50764, 961, 311, 536, 498, 321, 393, 915, 264, 7285, 2158, 420, 1338, 11, 718, 311, 747, 257, 574, 412, 264, 7285, 2158, 4018, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07290571127364885, "compression_ratio": 1.8781362007168458, "no_speech_prob": 0.010011597536504269}, {"id": 1189, "seek": 554500, "start": 5560.0, "end": 5564.0, "text": " Let's take the length of the data frame where this is equal to zero.", "tokens": [51114, 961, 311, 747, 264, 4641, 295, 264, 1412, 3920, 689, 341, 307, 2681, 281, 4018, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07290571127364885, "compression_ratio": 1.8781362007168458, "no_speech_prob": 0.010011597536504269}, {"id": 1190, "seek": 554500, "start": 5564.0, "end": 5569.0, "text": " So if we did first, let's just look at this where the production short tons is equal to zero.", "tokens": [51314, 407, 498, 321, 630, 700, 11, 718, 311, 445, 574, 412, 341, 689, 264, 4265, 2099, 9131, 307, 2681, 281, 4018, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07290571127364885, "compression_ratio": 1.8781362007168458, "no_speech_prob": 0.010011597536504269}, {"id": 1191, "seek": 554500, "start": 5569.0, "end": 5574.0, "text": " We have what's returned as a series that tells us false false true true false and so forth.", "tokens": [51564, 492, 362, 437, 311, 8752, 382, 257, 2638, 300, 5112, 505, 7908, 7908, 2074, 2074, 7908, 293, 370, 5220, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07290571127364885, "compression_ratio": 1.8781362007168458, "no_speech_prob": 0.010011597536504269}, {"id": 1192, "seek": 557400, "start": 5574.0, "end": 5576.0, "text": " So this tells us whether or not the production is equal to zero.", "tokens": [50364, 407, 341, 5112, 505, 1968, 420, 406, 264, 4265, 307, 2681, 281, 4018, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0700698970824249, "compression_ratio": 1.944649446494465, "no_speech_prob": 0.0017543808789923787}, {"id": 1193, "seek": 557400, "start": 5576.0, "end": 5583.0, "text": " So we say df where you actually give this as an argument to data frame saying where this is equal to zero.", "tokens": [50464, 407, 321, 584, 274, 69, 689, 291, 767, 976, 341, 382, 364, 6770, 281, 1412, 3920, 1566, 689, 341, 307, 2681, 281, 4018, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0700698970824249, "compression_ratio": 1.944649446494465, "no_speech_prob": 0.0017543808789923787}, {"id": 1194, "seek": 557400, "start": 5583.0, "end": 5587.0, "text": " We get the full data frame where all of the production values are equal to zero.", "tokens": [50814, 492, 483, 264, 1577, 1412, 3920, 689, 439, 295, 264, 4265, 4190, 366, 2681, 281, 4018, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0700698970824249, "compression_ratio": 1.944649446494465, "no_speech_prob": 0.0017543808789923787}, {"id": 1195, "seek": 557400, "start": 5587.0, "end": 5591.0, "text": " And it looks to be like quite a few of these things produced zero tons of coal.", "tokens": [51014, 400, 309, 1542, 281, 312, 411, 1596, 257, 1326, 295, 613, 721, 7126, 4018, 9131, 295, 10209, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0700698970824249, "compression_ratio": 1.944649446494465, "no_speech_prob": 0.0017543808789923787}, {"id": 1196, "seek": 557400, "start": 5591.0, "end": 5597.0, "text": " In the interest of how much a coal mine is producing, let's take the ones that have produced at least one ton.", "tokens": [51214, 682, 264, 1179, 295, 577, 709, 257, 10209, 3892, 307, 10501, 11, 718, 311, 747, 264, 2306, 300, 362, 7126, 412, 1935, 472, 2952, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0700698970824249, "compression_ratio": 1.944649446494465, "no_speech_prob": 0.0017543808789923787}, {"id": 1197, "seek": 557400, "start": 5597.0, "end": 5602.0, "text": " We will say the data frame where the production of short tons is greater than zero.", "tokens": [51514, 492, 486, 584, 264, 1412, 3920, 689, 264, 4265, 295, 2099, 9131, 307, 5044, 813, 4018, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0700698970824249, "compression_ratio": 1.944649446494465, "no_speech_prob": 0.0017543808789923787}, {"id": 1198, "seek": 560200, "start": 5602.0, "end": 5606.0, "text": " This has, okay, values that are not zero. This is good.", "tokens": [50364, 639, 575, 11, 1392, 11, 4190, 300, 366, 406, 4018, 13, 639, 307, 665, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1199, "seek": 560200, "start": 5606.0, "end": 5608.0, "text": " From here, we will now set the data frame equal to this.", "tokens": [50564, 3358, 510, 11, 321, 486, 586, 992, 264, 1412, 3920, 2681, 281, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1200, "seek": 560200, "start": 5608.0, "end": 5610.0, "text": " Now we are at this point doing a slice.", "tokens": [50664, 823, 321, 366, 412, 341, 935, 884, 257, 13153, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1201, "seek": 560200, "start": 5610.0, "end": 5611.0, "text": " So I will make a note here.", "tokens": [50764, 407, 286, 486, 652, 257, 3637, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1202, "seek": 560200, "start": 5611.0, "end": 5614.0, "text": " We are removing data here.", "tokens": [50814, 492, 366, 12720, 1412, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1203, "seek": 560200, "start": 5614.0, "end": 5617.0, "text": " That's okay as long as you're keeping track of what you're doing and why.", "tokens": [50964, 663, 311, 1392, 382, 938, 382, 291, 434, 5145, 2837, 295, 437, 291, 434, 884, 293, 983, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1204, "seek": 560200, "start": 5617.0, "end": 5621.0, "text": " So the reasoning behind this is if we're going to try to predict, let's say the production of mines", "tokens": [51114, 407, 264, 21577, 2261, 341, 307, 498, 321, 434, 516, 281, 853, 281, 6069, 11, 718, 311, 584, 264, 4265, 295, 25398, 51314], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1205, "seek": 560200, "start": 5621.0, "end": 5625.0, "text": " and use things like what state the mine is in as a predictive indicator.", "tokens": [51314, 293, 764, 721, 411, 437, 1785, 264, 3892, 307, 294, 382, 257, 35521, 16961, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1206, "seek": 560200, "start": 5625.0, "end": 5629.0, "text": " Let's actually restrict ourselves to mines that produced something more than zero.", "tokens": [51514, 961, 311, 767, 7694, 4175, 281, 25398, 300, 7126, 746, 544, 813, 4018, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09724231505058181, "compression_ratio": 1.7549019607843137, "no_speech_prob": 0.02930455654859543}, {"id": 1207, "seek": 562900, "start": 5629.0, "end": 5632.0, "text": " And that's the reasoning behind how I choose something like this.", "tokens": [50364, 400, 300, 311, 264, 21577, 2261, 577, 286, 2826, 746, 411, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1208, "seek": 562900, "start": 5632.0, "end": 5638.0, "text": " So now data frame is equal to where the data frame production values is over zero.", "tokens": [50514, 407, 586, 1412, 3920, 307, 2681, 281, 689, 264, 1412, 3920, 4265, 4190, 307, 670, 4018, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1209, "seek": 562900, "start": 5638.0, "end": 5640.0, "text": " So let's see what the length of data frame is now.", "tokens": [50814, 407, 718, 311, 536, 437, 264, 4641, 295, 1412, 3920, 307, 586, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1210, "seek": 562900, "start": 5640.0, "end": 5643.0, "text": " Okay, so we have 1061 data points.", "tokens": [50914, 1033, 11, 370, 321, 362, 1266, 31537, 1412, 2793, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1211, "seek": 562900, "start": 5643.0, "end": 5645.0, "text": " Let's redo this one.", "tokens": [51064, 961, 311, 29956, 341, 472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1212, "seek": 562900, "start": 5645.0, "end": 5648.0, "text": " I'm going to copy this and place it down here just so that we can do a comparison.", "tokens": [51164, 286, 478, 516, 281, 5055, 341, 293, 1081, 309, 760, 510, 445, 370, 300, 321, 393, 360, 257, 9660, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1213, "seek": 562900, "start": 5648.0, "end": 5653.0, "text": " And it appears to still have quite the skew distribution.", "tokens": [51314, 400, 309, 7038, 281, 920, 362, 1596, 264, 8756, 86, 7316, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1214, "seek": 562900, "start": 5653.0, "end": 5658.0, "text": " So I will try to do something now where I will actually take the log of this.", "tokens": [51564, 407, 286, 486, 853, 281, 360, 746, 586, 689, 286, 486, 767, 747, 264, 3565, 295, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09500715300792784, "compression_ratio": 1.6690140845070423, "no_speech_prob": 0.015903562307357788}, {"id": 1215, "seek": 565800, "start": 5658.0, "end": 5660.0, "text": " So let's create a new column.", "tokens": [50364, 407, 718, 311, 1884, 257, 777, 7738, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1216, "seek": 565800, "start": 5660.0, "end": 5666.0, "text": " And the way to create a new column in pandas is to actually just create a column as though it exists", "tokens": [50464, 400, 264, 636, 281, 1884, 257, 777, 7738, 294, 4565, 296, 307, 281, 767, 445, 1884, 257, 7738, 382, 1673, 309, 8198, 50764], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1217, "seek": 565800, "start": 5666.0, "end": 5669.0, "text": " and set it equal to a function of this.", "tokens": [50764, 293, 992, 309, 2681, 281, 257, 2445, 295, 341, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1218, "seek": 565800, "start": 5669.0, "end": 5672.0, "text": " So I don't know if I have NumPy installed just yet.", "tokens": [50914, 407, 286, 500, 380, 458, 498, 286, 362, 22592, 47, 88, 8899, 445, 1939, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1219, "seek": 565800, "start": 5672.0, "end": 5674.0, "text": " So I'll give this a try.", "tokens": [51064, 407, 286, 603, 976, 341, 257, 853, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1220, "seek": 565800, "start": 5674.0, "end": 5676.0, "text": " So let's go to the top of the page.", "tokens": [51164, 407, 718, 311, 352, 281, 264, 1192, 295, 264, 3028, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1221, "seek": 565800, "start": 5676.0, "end": 5680.0, "text": " And in all of our imports at the top of the notebook, I recommend keeping them together", "tokens": [51264, 400, 294, 439, 295, 527, 41596, 412, 264, 1192, 295, 264, 21060, 11, 286, 2748, 5145, 552, 1214, 51464], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1222, "seek": 565800, "start": 5680.0, "end": 5685.0, "text": " so that if and everyone later on can see where things were imported, import NumPy as NPs.", "tokens": [51464, 370, 300, 498, 293, 1518, 1780, 322, 393, 536, 689, 721, 645, 25524, 11, 974, 22592, 47, 88, 382, 426, 23043, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09486002633065889, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.005729025695472956}, {"id": 1223, "seek": 568500, "start": 5685.0, "end": 5687.0, "text": " Now this input is 30.", "tokens": [50364, 823, 341, 4846, 307, 2217, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1224, "seek": 568500, "start": 5687.0, "end": 5690.0, "text": " I've imported it and I should be able to rerun this one all the way to the bottom here", "tokens": [50464, 286, 600, 25524, 309, 293, 286, 820, 312, 1075, 281, 43819, 409, 341, 472, 439, 264, 636, 281, 264, 2767, 510, 50614], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1225, "seek": 568500, "start": 5690.0, "end": 5691.0, "text": " and create a new one.", "tokens": [50614, 293, 1884, 257, 777, 472, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1226, "seek": 568500, "start": 5691.0, "end": 5695.0, "text": " So let's look at df.logproduction.hist.", "tokens": [50664, 407, 718, 311, 574, 412, 274, 69, 13, 4987, 40827, 13, 33236, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1227, "seek": 568500, "start": 5695.0, "end": 5699.0, "text": " So what we see here is a very close to a log normal distribution.", "tokens": [50864, 407, 437, 321, 536, 510, 307, 257, 588, 1998, 281, 257, 3565, 2710, 7316, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1228, "seek": 568500, "start": 5699.0, "end": 5703.0, "text": " So the production of coal mines follows a log normal distribution,", "tokens": [51064, 407, 264, 4265, 295, 10209, 25398, 10002, 257, 3565, 2710, 7316, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1229, "seek": 568500, "start": 5703.0, "end": 5706.0, "text": " which is reasonable from first guesses.", "tokens": [51264, 597, 307, 10585, 490, 700, 42703, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1230, "seek": 568500, "start": 5706.0, "end": 5707.0, "text": " All right, great.", "tokens": [51414, 1057, 558, 11, 869, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1231, "seek": 568500, "start": 5707.0, "end": 5711.0, "text": " So I think I'm going to stick with this as a thing we're going to be interested in predicting.", "tokens": [51464, 407, 286, 519, 286, 478, 516, 281, 2897, 365, 341, 382, 257, 551, 321, 434, 516, 281, 312, 3102, 294, 32884, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1232, "seek": 568500, "start": 5711.0, "end": 5713.0, "text": " So we have our prediction variable.", "tokens": [51664, 407, 321, 362, 527, 17630, 7006, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07644521488862879, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.04207530617713928}, {"id": 1233, "seek": 571300, "start": 5713.0, "end": 5717.0, "text": " Now at this point, we've done quite a few things to the data frame itself.", "tokens": [50364, 823, 412, 341, 935, 11, 321, 600, 1096, 1596, 257, 1326, 721, 281, 264, 1412, 3920, 2564, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1234, "seek": 571300, "start": 5717.0, "end": 5720.0, "text": " So we loaded it in, we renamed the columns.", "tokens": [50564, 407, 321, 13210, 309, 294, 11, 321, 40949, 264, 13766, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1235, "seek": 571300, "start": 5720.0, "end": 5724.0, "text": " We actually created what's going to be my target variable is going to be the production of these mines", "tokens": [50714, 492, 767, 2942, 437, 311, 516, 281, 312, 452, 3779, 7006, 307, 516, 281, 312, 264, 4265, 295, 613, 25398, 50914], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1236, "seek": 571300, "start": 5724.0, "end": 5727.0, "text": " and did a transformation, which is the log of this value.", "tokens": [50914, 293, 630, 257, 9887, 11, 597, 307, 264, 3565, 295, 341, 2158, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1237, "seek": 571300, "start": 5727.0, "end": 5731.0, "text": " So after doing all this, I think I would like to actually save out this data frame", "tokens": [51064, 407, 934, 884, 439, 341, 11, 286, 519, 286, 576, 411, 281, 767, 3155, 484, 341, 1412, 3920, 51264], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1238, "seek": 571300, "start": 5731.0, "end": 5734.0, "text": " that I can load it into any future analysis.", "tokens": [51264, 300, 286, 393, 3677, 309, 666, 604, 2027, 5215, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1239, "seek": 571300, "start": 5734.0, "end": 5736.0, "text": " So I'll do df.2.", "tokens": [51414, 407, 286, 603, 360, 274, 69, 13, 17, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1240, "seek": 571300, "start": 5736.0, "end": 5738.0, "text": " Let's save it as a CSV.", "tokens": [51514, 961, 311, 3155, 309, 382, 257, 48814, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1241, "seek": 571300, "start": 5738.0, "end": 5742.0, "text": " So I'll call it, let's find it in the data directory, coal public this thing.", "tokens": [51614, 407, 286, 603, 818, 309, 11, 718, 311, 915, 309, 294, 264, 1412, 21120, 11, 10209, 1908, 341, 551, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08895345285636228, "compression_ratio": 1.7077922077922079, "no_speech_prob": 0.0028006862848997116}, {"id": 1242, "seek": 574200, "start": 5742.0, "end": 5744.0, "text": " We'll do cleaned version of this.", "tokens": [50364, 492, 603, 360, 16146, 3037, 295, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1243, "seek": 574200, "start": 5744.0, "end": 5746.0, "text": " And it's a CSV.", "tokens": [50464, 400, 309, 311, 257, 48814, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1244, "seek": 574200, "start": 5746.0, "end": 5751.0, "text": " So now that I've done this exploratory analysis, I would have this first look that I've taken at", "tokens": [50564, 407, 586, 300, 286, 600, 1096, 341, 24765, 4745, 5215, 11, 286, 576, 362, 341, 700, 574, 300, 286, 600, 2726, 412, 50814], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1245, "seek": 574200, "start": 5751.0, "end": 5753.0, "text": " and I've saved the data out into this CSV file.", "tokens": [50814, 293, 286, 600, 6624, 264, 1412, 484, 666, 341, 48814, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1246, "seek": 574200, "start": 5753.0, "end": 5756.0, "text": " I'm going to copy this into a new one that's going to be called data cleaning.", "tokens": [50914, 286, 478, 516, 281, 5055, 341, 666, 257, 777, 472, 300, 311, 516, 281, 312, 1219, 1412, 8924, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1247, "seek": 574200, "start": 5756.0, "end": 5760.0, "text": " And in the future, all I'll have to do is load in this CSV file", "tokens": [51064, 400, 294, 264, 2027, 11, 439, 286, 603, 362, 281, 360, 307, 3677, 294, 341, 48814, 3991, 51264], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1248, "seek": 574200, "start": 5760.0, "end": 5762.0, "text": " and all the transformations will have already been done.", "tokens": [51264, 293, 439, 264, 34852, 486, 362, 1217, 668, 1096, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1249, "seek": 574200, "start": 5762.0, "end": 5769.0, "text": " And I'll have a link back to the reasoning behind it as well as the actual code that does this process.", "tokens": [51364, 400, 286, 603, 362, 257, 2113, 646, 281, 264, 21577, 2261, 309, 382, 731, 382, 264, 3539, 3089, 300, 775, 341, 1399, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09688112470838758, "compression_ratio": 1.79136690647482, "no_speech_prob": 0.011327827349305153}, {"id": 1250, "seek": 576900, "start": 5769.0, "end": 5773.0, "text": " In this video, I'll be cleaning up the data cleaning notebook", "tokens": [50364, 682, 341, 960, 11, 286, 603, 312, 8924, 493, 264, 1412, 8924, 21060, 50564], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1251, "seek": 576900, "start": 5773.0, "end": 5779.0, "text": " and I'll be doing our first commits to a new branch to keep everything organized.", "tokens": [50564, 293, 286, 603, 312, 884, 527, 700, 48311, 281, 257, 777, 9819, 281, 1066, 1203, 9983, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1252, "seek": 576900, "start": 5779.0, "end": 5783.0, "text": " I last laughed off with this first look and their develop directory.", "tokens": [50864, 286, 1036, 20881, 766, 365, 341, 700, 574, 293, 641, 1499, 21120, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1253, "seek": 576900, "start": 5783.0, "end": 5787.0, "text": " So what we're going to do now is actually make a copy of this", "tokens": [51064, 407, 437, 321, 434, 516, 281, 360, 586, 307, 767, 652, 257, 5055, 295, 341, 51264], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1254, "seek": 576900, "start": 5787.0, "end": 5789.0, "text": " and I will toggle the header for this.", "tokens": [51264, 293, 286, 486, 31225, 264, 23117, 337, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1255, "seek": 576900, "start": 5789.0, "end": 5791.0, "text": " Make a copy.", "tokens": [51364, 4387, 257, 5055, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1256, "seek": 576900, "start": 5791.0, "end": 5794.0, "text": " And the first thing it does is it opens a new tab with everything copied in the previous one.", "tokens": [51464, 400, 264, 700, 551, 309, 775, 307, 309, 9870, 257, 777, 4421, 365, 1203, 25365, 294, 264, 3894, 472, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1257, "seek": 576900, "start": 5794.0, "end": 5798.0, "text": " And none of the code has been run here even though all of the inputs have been copied.", "tokens": [51614, 400, 6022, 295, 264, 3089, 575, 668, 1190, 510, 754, 1673, 439, 295, 264, 15743, 362, 668, 25365, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07568041980266571, "compression_ratio": 1.7604166666666667, "no_speech_prob": 0.006691428832709789}, {"id": 1258, "seek": 579800, "start": 5798.0, "end": 5801.0, "text": " What we're going to do here is actually call this something completely different", "tokens": [50364, 708, 321, 434, 516, 281, 360, 510, 307, 767, 818, 341, 746, 2584, 819, 50514], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1259, "seek": 579800, "start": 5801.0, "end": 5803.0, "text": " which is data cleaning.", "tokens": [50514, 597, 307, 1412, 8924, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1260, "seek": 579800, "start": 5803.0, "end": 5806.0, "text": " I didn't put a date in front of it because this is the notebook", "tokens": [50614, 286, 994, 380, 829, 257, 4002, 294, 1868, 295, 309, 570, 341, 307, 264, 21060, 50764], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1261, "seek": 579800, "start": 5806.0, "end": 5811.0, "text": " that's going to be the one that people look at if they actually want to see how we changed the data.", "tokens": [50764, 300, 311, 516, 281, 312, 264, 472, 300, 561, 574, 412, 498, 436, 767, 528, 281, 536, 577, 321, 3105, 264, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1262, "seek": 579800, "start": 5811.0, "end": 5815.0, "text": " So I'm going to actually close this from this directory,", "tokens": [51014, 407, 286, 478, 516, 281, 767, 1998, 341, 490, 341, 21120, 11, 51214], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1263, "seek": 579800, "start": 5815.0, "end": 5818.0, "text": " go over to my actual terminal here", "tokens": [51214, 352, 670, 281, 452, 3539, 14709, 510, 51364], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1264, "seek": 579800, "start": 5818.0, "end": 5822.0, "text": " and move from the develop the data cleaning ipython nb", "tokens": [51364, 293, 1286, 490, 264, 1499, 264, 1412, 8924, 28501, 88, 11943, 297, 65, 51564], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1265, "seek": 579800, "start": 5822.0, "end": 5824.0, "text": " which we just created into the deliver.", "tokens": [51564, 597, 321, 445, 2942, 666, 264, 4239, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08797077510667883, "compression_ratio": 1.78125, "no_speech_prob": 0.022268587723374367}, {"id": 1266, "seek": 582400, "start": 5824.0, "end": 5827.0, "text": " So we move the file from develop into deliver", "tokens": [50364, 407, 321, 1286, 264, 3991, 490, 1499, 666, 4239, 50514], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1267, "seek": 582400, "start": 5827.0, "end": 5830.0, "text": " because deliver is the directory that people should be looking at", "tokens": [50514, 570, 4239, 307, 264, 21120, 300, 561, 820, 312, 1237, 412, 50664], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1268, "seek": 582400, "start": 5830.0, "end": 5834.0, "text": " if they're actually interested in seeing the final analysis that matters.", "tokens": [50664, 498, 436, 434, 767, 3102, 294, 2577, 264, 2572, 5215, 300, 7001, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1269, "seek": 582400, "start": 5834.0, "end": 5838.0, "text": " In this case, we don't want to hide data cleaning in this development directory", "tokens": [50864, 682, 341, 1389, 11, 321, 500, 380, 528, 281, 6479, 1412, 8924, 294, 341, 3250, 21120, 51064], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1270, "seek": 582400, "start": 5838.0, "end": 5840.0, "text": " which has many, many files.", "tokens": [51064, 597, 575, 867, 11, 867, 7098, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1271, "seek": 582400, "start": 5840.0, "end": 5844.0, "text": " So we've moved it into deliver and if we go back to our browser here", "tokens": [51164, 407, 321, 600, 4259, 309, 666, 4239, 293, 498, 321, 352, 646, 281, 527, 11185, 510, 51364], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1272, "seek": 582400, "start": 5844.0, "end": 5847.0, "text": " go up into deliver and open up the data cleaning.", "tokens": [51364, 352, 493, 666, 4239, 293, 1269, 493, 264, 1412, 8924, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1273, "seek": 582400, "start": 5847.0, "end": 5851.0, "text": " Now we should actually start to do things like actually creating the markdown file", "tokens": [51514, 823, 321, 820, 767, 722, 281, 360, 721, 411, 767, 4084, 264, 1491, 5093, 3991, 51714], "temperature": 0.0, "avg_logprob": -0.07381765595797835, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.0066910842433571815}, {"id": 1274, "seek": 585100, "start": 5851.0, "end": 5854.0, "text": " changing the code from code to markdown", "tokens": [50364, 4473, 264, 3089, 490, 3089, 281, 1491, 5093, 50514], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1275, "seek": 585100, "start": 5854.0, "end": 5857.0, "text": " giving it a nice title and continuing on with this.", "tokens": [50514, 2902, 309, 257, 1481, 4876, 293, 9289, 322, 365, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1276, "seek": 585100, "start": 5857.0, "end": 5861.0, "text": " So we can say Jonathan by Jonathan to say like who actually did this", "tokens": [50664, 407, 321, 393, 584, 15471, 538, 15471, 281, 584, 411, 567, 767, 630, 341, 50864], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1277, "seek": 585100, "start": 5861.0, "end": 5865.0, "text": " and then you can look it up in the get repo cleaned up the data", "tokens": [50864, 293, 550, 291, 393, 574, 309, 493, 294, 264, 483, 49040, 16146, 493, 264, 1412, 51064], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1278, "seek": 585100, "start": 5865.0, "end": 5869.0, "text": " removed zero production coal mines.", "tokens": [51064, 7261, 4018, 4265, 10209, 25398, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1279, "seek": 585100, "start": 5869.0, "end": 5871.0, "text": " You can actually do a bit more of that in the end", "tokens": [51264, 509, 393, 767, 360, 257, 857, 544, 295, 300, 294, 264, 917, 51364], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1280, "seek": 585100, "start": 5871.0, "end": 5873.0, "text": " but for now that should suffice.", "tokens": [51364, 457, 337, 586, 300, 820, 3889, 573, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1281, "seek": 585100, "start": 5873.0, "end": 5875.0, "text": " We don't need to actually have any of these plots in here.", "tokens": [51464, 492, 500, 380, 643, 281, 767, 362, 604, 295, 613, 28609, 294, 510, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1282, "seek": 585100, "start": 5875.0, "end": 5878.0, "text": " So I'm going to be cleaning this up as quickly as I can.", "tokens": [51564, 407, 286, 478, 516, 281, 312, 8924, 341, 493, 382, 2661, 382, 286, 393, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08367840836687786, "compression_ratio": 1.7, "no_speech_prob": 0.11271053552627563}, {"id": 1283, "seek": 587800, "start": 5878.0, "end": 5881.0, "text": " So numpy as NP pandas as PD.", "tokens": [50364, 407, 1031, 8200, 382, 38611, 4565, 296, 382, 10464, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1284, "seek": 587800, "start": 5881.0, "end": 5883.0, "text": " We need to read in the file still.", "tokens": [50514, 492, 643, 281, 1401, 294, 264, 3991, 920, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1285, "seek": 587800, "start": 5883.0, "end": 5884.0, "text": " We don't need to see the head.", "tokens": [50614, 492, 500, 380, 643, 281, 536, 264, 1378, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1286, "seek": 587800, "start": 5884.0, "end": 5885.0, "text": " We know what that looks like.", "tokens": [50664, 492, 458, 437, 300, 1542, 411, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1287, "seek": 587800, "start": 5885.0, "end": 5889.0, "text": " This can be left in because it tells us the transformation we made and why", "tokens": [50714, 639, 393, 312, 1411, 294, 570, 309, 5112, 505, 264, 9887, 321, 1027, 293, 983, 50914], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1288, "seek": 587800, "start": 5889.0, "end": 5892.0, "text": " the head part doesn't need to be here for the second one", "tokens": [50914, 264, 1378, 644, 1177, 380, 643, 281, 312, 510, 337, 264, 1150, 472, 51064], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1289, "seek": 587800, "start": 5892.0, "end": 5895.0, "text": " but we can add a note above it that says mistake", "tokens": [51064, 457, 321, 393, 909, 257, 3637, 3673, 309, 300, 1619, 6146, 51214], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1290, "seek": 587800, "start": 5895.0, "end": 5898.0, "text": " renaming indipedent to independent.", "tokens": [51214, 8124, 5184, 1016, 647, 292, 317, 281, 6695, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1291, "seek": 587800, "start": 5898.0, "end": 5904.0, "text": " Now we're in here changing spaces to underscores", "tokens": [51364, 823, 321, 434, 294, 510, 4473, 7673, 281, 16692, 66, 2706, 51664], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1292, "seek": 587800, "start": 5904.0, "end": 5906.0, "text": " double check that still looks right.", "tokens": [51664, 3834, 1520, 300, 920, 1542, 558, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13498949810741392, "compression_ratio": 1.66147859922179, "no_speech_prob": 0.07803504914045334}, {"id": 1293, "seek": 590600, "start": 5906.0, "end": 5909.0, "text": " Okay, it does and we will now delete this head,", "tokens": [50364, 1033, 11, 309, 775, 293, 321, 486, 586, 12097, 341, 1378, 11, 50514], "temperature": 0.0, "avg_logprob": -0.15924445162998158, "compression_ratio": 1.6168224299065421, "no_speech_prob": 0.11589580774307251}, {"id": 1294, "seek": 590600, "start": 5909.0, "end": 5915.0, "text": " delete the different plots here and give an extra sentence here.", "tokens": [50514, 12097, 264, 819, 28609, 510, 293, 976, 364, 2857, 8174, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15924445162998158, "compression_ratio": 1.6168224299065421, "no_speech_prob": 0.11589580774307251}, {"id": 1295, "seek": 590600, "start": 5915.0, "end": 5921.0, "text": " Coal mines without any coal production are removed.", "tokens": [50814, 3066, 304, 25398, 1553, 604, 10209, 4265, 366, 7261, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15924445162998158, "compression_ratio": 1.6168224299065421, "no_speech_prob": 0.11589580774307251}, {"id": 1296, "seek": 590600, "start": 5921.0, "end": 5925.0, "text": " The length is 1061 and we are now creating a new column called log", "tokens": [51114, 440, 4641, 307, 1266, 31537, 293, 321, 366, 586, 4084, 257, 777, 7738, 1219, 3565, 51314], "temperature": 0.0, "avg_logprob": -0.15924445162998158, "compression_ratio": 1.6168224299065421, "no_speech_prob": 0.11589580774307251}, {"id": 1297, "seek": 590600, "start": 5925.0, "end": 5930.0, "text": " production which is the log of the production of the data frame.", "tokens": [51314, 4265, 597, 307, 264, 3565, 295, 264, 4265, 295, 264, 1412, 3920, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15924445162998158, "compression_ratio": 1.6168224299065421, "no_speech_prob": 0.11589580774307251}, {"id": 1298, "seek": 590600, "start": 5930.0, "end": 5933.0, "text": " And we can put we don't have any histograms here.", "tokens": [51564, 400, 321, 393, 829, 321, 500, 380, 362, 604, 49816, 82, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15924445162998158, "compression_ratio": 1.6168224299065421, "no_speech_prob": 0.11589580774307251}, {"id": 1299, "seek": 593300, "start": 5933.0, "end": 5937.0, "text": " We need that out and now the output file is this guy and I will", "tokens": [50364, 492, 643, 300, 484, 293, 586, 264, 5598, 3991, 307, 341, 2146, 293, 286, 486, 50564], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1300, "seek": 593300, "start": 5937.0, "end": 5942.0, "text": " actually move this to the top here to the output file.", "tokens": [50564, 767, 1286, 341, 281, 264, 1192, 510, 281, 264, 5598, 3991, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1301, "seek": 593300, "start": 5942.0, "end": 5945.0, "text": " The very first thing you see here will be the name of the output file", "tokens": [50814, 440, 588, 700, 551, 291, 536, 510, 486, 312, 264, 1315, 295, 264, 5598, 3991, 50964], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1302, "seek": 593300, "start": 5945.0, "end": 5949.0, "text": " and the last thing we'll do is actually write that CSV to that output file.", "tokens": [50964, 293, 264, 1036, 551, 321, 603, 360, 307, 767, 2464, 300, 48814, 281, 300, 5598, 3991, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1303, "seek": 593300, "start": 5949.0, "end": 5953.0, "text": " So now when I load in this cleaned coal public 2013 and notice", "tokens": [51164, 407, 586, 562, 286, 3677, 294, 341, 16146, 10209, 1908, 9012, 293, 3449, 51364], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1304, "seek": 593300, "start": 5953.0, "end": 5955.0, "text": " that I did not overwrite the old file.", "tokens": [51364, 300, 286, 630, 406, 670, 21561, 264, 1331, 3991, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1305, "seek": 593300, "start": 5955.0, "end": 5958.0, "text": " So I strongly recommend keeping the raw files and creating a new file.", "tokens": [51464, 407, 286, 10613, 2748, 5145, 264, 8936, 7098, 293, 4084, 257, 777, 3991, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1306, "seek": 593300, "start": 5958.0, "end": 5961.0, "text": " That's the cleaned version of it so that if you ever made a mistake", "tokens": [51614, 663, 311, 264, 16146, 3037, 295, 309, 370, 300, 498, 291, 1562, 1027, 257, 6146, 51764], "temperature": 0.0, "avg_logprob": -0.10047482335290243, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.028422487899661064}, {"id": 1307, "seek": 596100, "start": 5961.0, "end": 5963.0, "text": " in your cleaning which has happened before,", "tokens": [50364, 294, 428, 8924, 597, 575, 2011, 949, 11, 50464], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1308, "seek": 596100, "start": 5963.0, "end": 5965.0, "text": " you can easily revert and change that back.", "tokens": [50464, 291, 393, 3612, 319, 3281, 293, 1319, 300, 646, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1309, "seek": 596100, "start": 5965.0, "end": 5968.0, "text": " And if someone says, oh, something happened in the cleaning process,", "tokens": [50564, 400, 498, 1580, 1619, 11, 1954, 11, 746, 2011, 294, 264, 8924, 1399, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1310, "seek": 596100, "start": 5968.0, "end": 5970.0, "text": " you have a full documentation of what happened here.", "tokens": [50714, 291, 362, 257, 1577, 14333, 295, 437, 2011, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1311, "seek": 596100, "start": 5970.0, "end": 5974.0, "text": " So we've created the final document that went through and cleaned up", "tokens": [50814, 407, 321, 600, 2942, 264, 2572, 4166, 300, 1437, 807, 293, 16146, 493, 51014], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1312, "seek": 596100, "start": 5974.0, "end": 5977.0, "text": " what actually happened in the cleaning process.", "tokens": [51014, 437, 767, 2011, 294, 264, 8924, 1399, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1313, "seek": 596100, "start": 5977.0, "end": 5980.0, "text": " So anyone looking in the future can easily follow what happened.", "tokens": [51164, 407, 2878, 1237, 294, 264, 2027, 393, 3612, 1524, 437, 2011, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1314, "seek": 596100, "start": 5980.0, "end": 5984.0, "text": " So I will now close and halt this directory and I'm going to actually", "tokens": [51314, 407, 286, 486, 586, 1998, 293, 12479, 341, 21120, 293, 286, 478, 516, 281, 767, 51514], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1315, "seek": 596100, "start": 5984.0, "end": 5988.0, "text": " do our first commit and we are in the master branch as it sits.", "tokens": [51514, 360, 527, 700, 5599, 293, 321, 366, 294, 264, 4505, 9819, 382, 309, 12696, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07312172698974609, "compression_ratio": 1.8683274021352314, "no_speech_prob": 0.0736488550901413}, {"id": 1316, "seek": 598800, "start": 5988.0, "end": 5991.0, "text": " So I will actually check out a new branch.", "tokens": [50364, 407, 286, 486, 767, 1520, 484, 257, 777, 9819, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1317, "seek": 598800, "start": 5991.0, "end": 5998.0, "text": " The branch will be called JBW underscore predict production.", "tokens": [50514, 440, 9819, 486, 312, 1219, 43019, 54, 37556, 6069, 4265, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1318, "seek": 598800, "start": 5998.0, "end": 5999.0, "text": " And so we're here.", "tokens": [50864, 400, 370, 321, 434, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1319, "seek": 598800, "start": 5999.0, "end": 6002.0, "text": " There's two theories here on adding the data.", "tokens": [50914, 821, 311, 732, 13667, 510, 322, 5127, 264, 1412, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1320, "seek": 598800, "start": 6002.0, "end": 6004.0, "text": " So the data here is actually pretty small.", "tokens": [51064, 407, 264, 1412, 510, 307, 767, 1238, 1359, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1321, "seek": 598800, "start": 6004.0, "end": 6006.0, "text": " So I'm going to add it to this.", "tokens": [51164, 407, 286, 478, 516, 281, 909, 309, 281, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1322, "seek": 598800, "start": 6006.0, "end": 6009.0, "text": " This is also so that you can actually get the data as well.", "tokens": [51264, 639, 307, 611, 370, 300, 291, 393, 767, 483, 264, 1412, 382, 731, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1323, "seek": 598800, "start": 6009.0, "end": 6010.0, "text": " Generally in a production environment,", "tokens": [51414, 21082, 294, 257, 4265, 2823, 11, 51464], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1324, "seek": 598800, "start": 6010.0, "end": 6012.0, "text": " you don't add the data to your Git repository.", "tokens": [51464, 291, 500, 380, 909, 264, 1412, 281, 428, 16939, 25841, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1325, "seek": 598800, "start": 6012.0, "end": 6014.0, "text": " This is stored and tracked in some other way.", "tokens": [51564, 639, 307, 12187, 293, 31703, 294, 512, 661, 636, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1326, "seek": 598800, "start": 6014.0, "end": 6016.0, "text": " So I'll add the data cleaning.", "tokens": [51664, 407, 286, 603, 909, 264, 1412, 8924, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08262688244960105, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.006902866996824741}, {"id": 1327, "seek": 601600, "start": 6016.0, "end": 6021.0, "text": " I'll add develop and not going to add the figures just yet.", "tokens": [50364, 286, 603, 909, 1499, 293, 406, 516, 281, 909, 264, 9624, 445, 1939, 13, 50614], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1328, "seek": 601600, "start": 6021.0, "end": 6025.0, "text": " I usually will only add this when I actually have something interesting there.", "tokens": [50614, 286, 2673, 486, 787, 909, 341, 562, 286, 767, 362, 746, 1880, 456, 13, 50814], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1329, "seek": 601600, "start": 6025.0, "end": 6028.0, "text": " So this figures is going to be kept on my own directory for now,", "tokens": [50814, 407, 341, 9624, 307, 516, 281, 312, 4305, 322, 452, 1065, 21120, 337, 586, 11, 50964], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1330, "seek": 601600, "start": 6028.0, "end": 6030.0, "text": " not put into the branch just yet.", "tokens": [50964, 406, 829, 666, 264, 9819, 445, 1939, 13, 51064], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1331, "seek": 601600, "start": 6030.0, "end": 6032.0, "text": " Let's look at the status one more time.", "tokens": [51064, 961, 311, 574, 412, 264, 6558, 472, 544, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1332, "seek": 601600, "start": 6032.0, "end": 6036.0, "text": " So we have a number of new files, the actual data file, the cleaned data file,", "tokens": [51164, 407, 321, 362, 257, 1230, 295, 777, 7098, 11, 264, 3539, 1412, 3991, 11, 264, 16146, 1412, 3991, 11, 51364], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1333, "seek": 601600, "start": 6036.0, "end": 6040.0, "text": " the data cleaning that is the official way of actually making this file", "tokens": [51364, 264, 1412, 8924, 300, 307, 264, 4783, 636, 295, 767, 1455, 341, 3991, 51564], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1334, "seek": 601600, "start": 6040.0, "end": 6042.0, "text": " and this develop one.", "tokens": [51564, 293, 341, 1499, 472, 13, 51664], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1335, "seek": 601600, "start": 6042.0, "end": 6045.0, "text": " So let's commit this.", "tokens": [51664, 407, 718, 311, 5599, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.076219420279226, "compression_ratio": 1.8294573643410852, "no_speech_prob": 0.010983753018081188}, {"id": 1336, "seek": 604500, "start": 6045.0, "end": 6047.0, "text": " Let's not call it that then.", "tokens": [50364, 961, 311, 406, 818, 309, 300, 550, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1337, "seek": 604500, "start": 6047.0, "end": 6050.0, "text": " And I have to actually configure this.", "tokens": [50464, 400, 286, 362, 281, 767, 22162, 341, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1338, "seek": 604500, "start": 6050.0, "end": 6052.0, "text": " So I will configure my Git.", "tokens": [50614, 407, 286, 486, 22162, 452, 16939, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1339, "seek": 604500, "start": 6052.0, "end": 6058.0, "text": " Do this commit and continue this on in just a second.", "tokens": [50714, 1144, 341, 5599, 293, 2354, 341, 322, 294, 445, 257, 1150, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1340, "seek": 604500, "start": 6058.0, "end": 6066.0, "text": " So commit the data and I will be pushing it to GitHub.", "tokens": [51014, 407, 5599, 264, 1412, 293, 286, 486, 312, 7380, 309, 281, 23331, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1341, "seek": 604500, "start": 6066.0, "end": 6070.0, "text": " So the final command I ran was git push origin JBW predict production.", "tokens": [51414, 407, 264, 2572, 5622, 286, 5872, 390, 18331, 2944, 4957, 43019, 54, 6069, 4265, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1342, "seek": 604500, "start": 6070.0, "end": 6073.0, "text": " And this means that I have now sent this off to GitHub.", "tokens": [51614, 400, 341, 1355, 300, 286, 362, 586, 2279, 341, 766, 281, 23331, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1286273728246274, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.0027142229955643415}, {"id": 1343, "seek": 607300, "start": 6073.0, "end": 6077.0, "text": " Go back to the GitHub of the coal exploration, reload this.", "tokens": [50364, 1037, 646, 281, 264, 23331, 295, 264, 10209, 16197, 11, 25628, 341, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1344, "seek": 607300, "start": 6077.0, "end": 6081.0, "text": " What we see here is the master branch where you can actually go to the", "tokens": [50564, 708, 321, 536, 510, 307, 264, 4505, 9819, 689, 291, 393, 767, 352, 281, 264, 50764], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1345, "seek": 607300, "start": 6081.0, "end": 6085.0, "text": " JBW production branch and see the various things we've done here.", "tokens": [50764, 43019, 54, 4265, 9819, 293, 536, 264, 3683, 721, 321, 600, 1096, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1346, "seek": 607300, "start": 6085.0, "end": 6089.0, "text": " Let's actually look at the deliver and click this IPYNB.", "tokens": [50964, 961, 311, 767, 574, 412, 264, 4239, 293, 2052, 341, 8671, 22315, 33, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1347, "seek": 607300, "start": 6089.0, "end": 6093.0, "text": " And we'll notice that GitHub does a fantastically nice job of actually rendering", "tokens": [51164, 400, 321, 603, 3449, 300, 23331, 775, 257, 4115, 22808, 1481, 1691, 295, 767, 22407, 51364], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1348, "seek": 607300, "start": 6093.0, "end": 6096.0, "text": " the notebook as it looks correctly.", "tokens": [51364, 264, 21060, 382, 309, 1542, 8944, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1349, "seek": 607300, "start": 6096.0, "end": 6100.0, "text": " And this is even more dramatic when you actually look at the develop one.", "tokens": [51514, 400, 341, 307, 754, 544, 12023, 562, 291, 767, 574, 412, 264, 1499, 472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10723735214373388, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.08382527530193329}, {"id": 1350, "seek": 610000, "start": 6100.0, "end": 6104.0, "text": " So we can see this and you can see in here if you're browsing with GitHub,", "tokens": [50364, 407, 321, 393, 536, 341, 293, 291, 393, 536, 294, 510, 498, 291, 434, 38602, 365, 23331, 11, 50564], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1351, "seek": 610000, "start": 6104.0, "end": 6106.0, "text": " the figures are faithfully reproduced here.", "tokens": [50564, 264, 9624, 366, 4522, 2277, 11408, 1232, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1352, "seek": 610000, "start": 6106.0, "end": 6110.0, "text": " And this is a very useful thing to be able to look at the files being used", "tokens": [50664, 400, 341, 307, 257, 588, 4420, 551, 281, 312, 1075, 281, 574, 412, 264, 7098, 885, 1143, 50864], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1353, "seek": 610000, "start": 6110.0, "end": 6114.0, "text": " and especially when we do a pull request in the future.", "tokens": [50864, 293, 2318, 562, 321, 360, 257, 2235, 5308, 294, 264, 2027, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1354, "seek": 610000, "start": 6114.0, "end": 6116.0, "text": " Okay, so we've cleaned the data.", "tokens": [51064, 1033, 11, 370, 321, 600, 16146, 264, 1412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1355, "seek": 610000, "start": 6116.0, "end": 6119.0, "text": " We have the way that we cleaned it separated out so that anyone else", "tokens": [51164, 492, 362, 264, 636, 300, 321, 16146, 309, 12005, 484, 370, 300, 2878, 1646, 51314], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1356, "seek": 610000, "start": 6119.0, "end": 6121.0, "text": " can look at it in a reproducible way.", "tokens": [51314, 393, 574, 412, 309, 294, 257, 11408, 32128, 636, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1357, "seek": 610000, "start": 6121.0, "end": 6124.0, "text": " And so let's actually try to predict something.", "tokens": [51414, 400, 370, 718, 311, 767, 853, 281, 6069, 746, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1358, "seek": 610000, "start": 6124.0, "end": 6128.0, "text": " So I'll go back into this develop directory and it will make a copy", "tokens": [51564, 407, 286, 603, 352, 646, 666, 341, 1499, 21120, 293, 309, 486, 652, 257, 5055, 51764], "temperature": 0.0, "avg_logprob": -0.08853959325534194, "compression_ratio": 1.6946308724832215, "no_speech_prob": 0.009703092277050018}, {"id": 1359, "seek": 612800, "start": 6128.0, "end": 6131.0, "text": " of the first look notebook that we had.", "tokens": [50364, 295, 264, 700, 574, 21060, 300, 321, 632, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1360, "seek": 612800, "start": 6131.0, "end": 6135.0, "text": " So I'll make a copy of this and I'm going to call it CoalPredict.", "tokens": [50514, 407, 286, 603, 652, 257, 5055, 295, 341, 293, 286, 478, 516, 281, 818, 309, 3066, 304, 47, 24945, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1361, "seek": 612800, "start": 6135.0, "end": 6139.0, "text": " I'm going to go back to the previous tab and actually finish closing this", "tokens": [50714, 286, 478, 516, 281, 352, 646, 281, 264, 3894, 4421, 293, 767, 2413, 10377, 341, 50914], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1362, "seek": 612800, "start": 6139.0, "end": 6140.0, "text": " and halting it.", "tokens": [50914, 293, 7523, 783, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1363, "seek": 612800, "start": 6140.0, "end": 6144.0, "text": " And just to give you a sense of how everything is standing,", "tokens": [50964, 400, 445, 281, 976, 291, 257, 2020, 295, 577, 1203, 307, 4877, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1364, "seek": 612800, "start": 6144.0, "end": 6147.0, "text": " I'm now back at the home of this develop thing.", "tokens": [51164, 286, 478, 586, 646, 412, 264, 1280, 295, 341, 1499, 551, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1365, "seek": 612800, "start": 6147.0, "end": 6151.0, "text": " You can see the first look notebook and it's currently black because it's not running.", "tokens": [51314, 509, 393, 536, 264, 700, 574, 21060, 293, 309, 311, 4362, 2211, 570, 309, 311, 406, 2614, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1366, "seek": 612800, "start": 6151.0, "end": 6154.0, "text": " This one is green because you can see on the right here it says running.", "tokens": [51514, 639, 472, 307, 3092, 570, 291, 393, 536, 322, 264, 558, 510, 309, 1619, 2614, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1367, "seek": 612800, "start": 6154.0, "end": 6157.0, "text": " So this is a notebook that's currently being run.", "tokens": [51664, 407, 341, 307, 257, 21060, 300, 311, 4362, 885, 1190, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07787651638332889, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.02160583809018135}, {"id": 1368, "seek": 615700, "start": 6157.0, "end": 6160.0, "text": " There's a couple of things I want to do different here since this is now the prediction one.", "tokens": [50364, 821, 311, 257, 1916, 295, 721, 286, 528, 281, 360, 819, 510, 1670, 341, 307, 586, 264, 17630, 472, 13, 50514], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1369, "seek": 615700, "start": 6160.0, "end": 6166.0, "text": " When I start off by saying what the goal of this notebook is going to be", "tokens": [50514, 1133, 286, 722, 766, 538, 1566, 437, 264, 3387, 295, 341, 21060, 307, 516, 281, 312, 50814], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1370, "seek": 615700, "start": 6166.0, "end": 6170.0, "text": " and because everything that's here is a direct copy of the previous notebook,", "tokens": [50814, 293, 570, 1203, 300, 311, 510, 307, 257, 2047, 5055, 295, 264, 3894, 21060, 11, 51014], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1371, "seek": 615700, "start": 6170.0, "end": 6172.0, "text": " most of this stuff I'll just be able to delete.", "tokens": [51014, 881, 295, 341, 1507, 286, 603, 445, 312, 1075, 281, 12097, 13, 51114], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1372, "seek": 615700, "start": 6172.0, "end": 6176.0, "text": " So I'm going to toggle the header, give us a little bit more space", "tokens": [51114, 407, 286, 478, 516, 281, 31225, 264, 23117, 11, 976, 505, 257, 707, 857, 544, 1901, 51314], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1373, "seek": 615700, "start": 6176.0, "end": 6181.0, "text": " and the changes I'm going to make are basically going to drive me toward being able to make this new prediction.", "tokens": [51314, 293, 264, 2962, 286, 478, 516, 281, 652, 366, 1936, 516, 281, 3332, 385, 7361, 885, 1075, 281, 652, 341, 777, 17630, 13, 51564], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1374, "seek": 615700, "start": 6181.0, "end": 6185.0, "text": " So first of all, I don't want to reproduce all this cleaning I did before.", "tokens": [51564, 407, 700, 295, 439, 11, 286, 500, 380, 528, 281, 29501, 439, 341, 8924, 286, 630, 949, 13, 51764], "temperature": 0.0, "avg_logprob": -0.062364788616404813, "compression_ratio": 1.8079470198675496, "no_speech_prob": 0.0013668187893927097}, {"id": 1375, "seek": 618500, "start": 6185.0, "end": 6188.0, "text": " So I will actually instead of reading in the previous raw data,", "tokens": [50364, 407, 286, 486, 767, 2602, 295, 3760, 294, 264, 3894, 8936, 1412, 11, 50514], "temperature": 0.0, "avg_logprob": -0.07834655314952403, "compression_ratio": 1.6954732510288066, "no_speech_prob": 0.007120138965547085}, {"id": 1376, "seek": 618500, "start": 6188.0, "end": 6191.0, "text": " I'll actually go into and read the CSV that we saved.", "tokens": [50514, 286, 603, 767, 352, 666, 293, 1401, 264, 48814, 300, 321, 6624, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07834655314952403, "compression_ratio": 1.6954732510288066, "no_speech_prob": 0.007120138965547085}, {"id": 1377, "seek": 618500, "start": 6191.0, "end": 6197.0, "text": " And this is up into the data directory and it's the cleaned public CSV.", "tokens": [50664, 400, 341, 307, 493, 666, 264, 1412, 21120, 293, 309, 311, 264, 16146, 1908, 48814, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07834655314952403, "compression_ratio": 1.6954732510288066, "no_speech_prob": 0.007120138965547085}, {"id": 1378, "seek": 618500, "start": 6197.0, "end": 6202.0, "text": " And we still need to set the index column to be the MSHA ID.", "tokens": [50964, 400, 321, 920, 643, 281, 992, 264, 8186, 7738, 281, 312, 264, 7395, 4983, 7348, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07834655314952403, "compression_ratio": 1.6954732510288066, "no_speech_prob": 0.007120138965547085}, {"id": 1379, "seek": 618500, "start": 6202.0, "end": 6207.0, "text": " So that's loaded in and actually one thing I like to do is look at the head of the data frame", "tokens": [51214, 407, 300, 311, 13210, 294, 293, 767, 472, 551, 286, 411, 281, 360, 307, 574, 412, 264, 1378, 295, 264, 1412, 3920, 51464], "temperature": 0.0, "avg_logprob": -0.07834655314952403, "compression_ratio": 1.6954732510288066, "no_speech_prob": 0.007120138965547085}, {"id": 1380, "seek": 618500, "start": 6207.0, "end": 6211.0, "text": " and read it in at the same time in case I need to make any changes.", "tokens": [51464, 293, 1401, 309, 294, 412, 264, 912, 565, 294, 1389, 286, 643, 281, 652, 604, 2962, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07834655314952403, "compression_ratio": 1.6954732510288066, "no_speech_prob": 0.007120138965547085}, {"id": 1381, "seek": 621100, "start": 6211.0, "end": 6215.0, "text": " So the way to do this is since the four is selected with a gray box,", "tokens": [50364, 407, 264, 636, 281, 360, 341, 307, 1670, 264, 1451, 307, 8209, 365, 257, 10855, 2424, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07602329743214142, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.020328374579548836}, {"id": 1382, "seek": 621100, "start": 6215.0, "end": 6221.0, "text": " if I hold down shift and type K, I'm selecting both the second and third cell which are index three and four.", "tokens": [50564, 498, 286, 1797, 760, 5513, 293, 2010, 591, 11, 286, 478, 18182, 1293, 264, 1150, 293, 2636, 2815, 597, 366, 8186, 1045, 293, 1451, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07602329743214142, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.020328374579548836}, {"id": 1383, "seek": 621100, "start": 6221.0, "end": 6226.0, "text": " If I type shift M, they are now combined into a single merged cell.", "tokens": [50864, 759, 286, 2010, 5513, 376, 11, 436, 366, 586, 9354, 666, 257, 2167, 36427, 2815, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07602329743214142, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.020328374579548836}, {"id": 1384, "seek": 621100, "start": 6226.0, "end": 6233.0, "text": " So let me just run this one cell and I read in the CSV and then you are seeing the head of that data frame as well.", "tokens": [51114, 407, 718, 385, 445, 1190, 341, 472, 2815, 293, 286, 1401, 294, 264, 48814, 293, 550, 291, 366, 2577, 264, 1378, 295, 300, 1412, 3920, 382, 731, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07602329743214142, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.020328374579548836}, {"id": 1385, "seek": 621100, "start": 6233.0, "end": 6238.0, "text": " So we can see that we're loading in the cleaned CSV and the head is looking nice.", "tokens": [51464, 407, 321, 393, 536, 300, 321, 434, 15114, 294, 264, 16146, 48814, 293, 264, 1378, 307, 1237, 1481, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07602329743214142, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.020328374579548836}, {"id": 1386, "seek": 623800, "start": 6238.0, "end": 6242.0, "text": " I'm going to now delete a number of these things because we don't need them.", "tokens": [50364, 286, 478, 516, 281, 586, 12097, 257, 1230, 295, 613, 721, 570, 321, 500, 380, 643, 552, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1387, "seek": 623800, "start": 6242.0, "end": 6247.0, "text": " One thing I will remain is that we initially did this LEN of the data frame before.", "tokens": [50564, 1485, 551, 286, 486, 6222, 307, 300, 321, 9105, 630, 341, 441, 2195, 295, 264, 1412, 3920, 949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1388, "seek": 623800, "start": 6247.0, "end": 6250.0, "text": " This was on the first one that you saw on the raw data.", "tokens": [50814, 639, 390, 322, 264, 700, 472, 300, 291, 1866, 322, 264, 8936, 1412, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1389, "seek": 623800, "start": 6250.0, "end": 6253.0, "text": " So since this is the clean data, I expect this to be just over a thousand.", "tokens": [50964, 407, 1670, 341, 307, 264, 2541, 1412, 11, 286, 2066, 341, 281, 312, 445, 670, 257, 4714, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1390, "seek": 623800, "start": 6253.0, "end": 6256.0, "text": " Yep, it went to 1061.", "tokens": [51114, 7010, 11, 309, 1437, 281, 1266, 31537, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1391, "seek": 623800, "start": 6256.0, "end": 6258.0, "text": " Simply delete these.", "tokens": [51264, 19596, 12097, 613, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1392, "seek": 623800, "start": 6258.0, "end": 6264.0, "text": " I'll leave the number of columns in here so we can actually think about what's in each of these columns a bit.", "tokens": [51364, 286, 603, 1856, 264, 1230, 295, 13766, 294, 510, 370, 321, 393, 767, 519, 466, 437, 311, 294, 1184, 295, 613, 13766, 257, 857, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13195747625632365, "compression_ratio": 1.6420664206642066, "no_speech_prob": 0.0301995687186718}, {"id": 1393, "seek": 626400, "start": 6264.0, "end": 6267.0, "text": " Alright, so as we see, this is the production.", "tokens": [50364, 2798, 11, 370, 382, 321, 536, 11, 341, 307, 264, 4265, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1394, "seek": 626400, "start": 6267.0, "end": 6271.0, "text": " Longer the production is the thing that we're going to be trying to predict.", "tokens": [50514, 8282, 260, 264, 4265, 307, 264, 551, 300, 321, 434, 516, 281, 312, 1382, 281, 6069, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1395, "seek": 626400, "start": 6271.0, "end": 6276.0, "text": " And let's take a look at just a high level view of the different categories that might be able to help us.", "tokens": [50714, 400, 718, 311, 747, 257, 574, 412, 445, 257, 1090, 1496, 1910, 295, 264, 819, 10479, 300, 1062, 312, 1075, 281, 854, 505, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1396, "seek": 626400, "start": 6276.0, "end": 6278.0, "text": " So let me get the columns here.", "tokens": [50964, 407, 718, 385, 483, 264, 13766, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1397, "seek": 626400, "start": 6278.0, "end": 6282.0, "text": " I think that the mine status might be a predictive variable.", "tokens": [51064, 286, 519, 300, 264, 3892, 6558, 1062, 312, 257, 35521, 7006, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1398, "seek": 626400, "start": 6282.0, "end": 6285.0, "text": " So I do df.mine status.", "tokens": [51264, 407, 286, 360, 274, 69, 13, 76, 533, 6558, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1399, "seek": 626400, "start": 6285.0, "end": 6291.0, "text": " You see that there's an active men working, not producing, permanently abandoned, active,", "tokens": [51414, 509, 536, 300, 456, 311, 364, 4967, 1706, 1364, 11, 406, 10501, 11, 24042, 13732, 11, 4967, 11, 51714], "temperature": 0.0, "avg_logprob": -0.13192247733091697, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.01363288052380085}, {"id": 1400, "seek": 629100, "start": 6291.0, "end": 6295.0, "text": " temporarily closed and new under construction of the different status types.", "tokens": [50364, 23750, 5395, 293, 777, 833, 6435, 295, 264, 819, 6558, 3467, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07869369689732382, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.005729311145842075}, {"id": 1401, "seek": 629100, "start": 6295.0, "end": 6300.0, "text": " I suspect this will give me a pretty good predictor into how productive the mine actually is.", "tokens": [50564, 286, 9091, 341, 486, 976, 385, 257, 1238, 665, 6069, 284, 666, 577, 13304, 264, 3892, 767, 307, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07869369689732382, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.005729311145842075}, {"id": 1402, "seek": 629100, "start": 6300.0, "end": 6304.0, "text": " So I will actually do a group by on this to see what is in here.", "tokens": [50814, 407, 286, 486, 767, 360, 257, 1594, 538, 322, 341, 281, 536, 437, 307, 294, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07869369689732382, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.005729311145842075}, {"id": 1403, "seek": 629100, "start": 6304.0, "end": 6308.0, "text": " So df.mine status.", "tokens": [51014, 407, 274, 69, 13, 76, 533, 6558, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07869369689732382, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.005729311145842075}, {"id": 1404, "seek": 629100, "start": 6308.0, "end": 6316.0, "text": " Let's do production.", "tokens": [51214, 961, 311, 360, 4265, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07869369689732382, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.005729311145842075}, {"id": 1405, "seek": 631600, "start": 6316.0, "end": 6325.0, "text": " What I did here was I said, take all the ones that have the same status of active and take the average or the mean of the production in short tons.", "tokens": [50364, 708, 286, 630, 510, 390, 286, 848, 11, 747, 439, 264, 2306, 300, 362, 264, 912, 6558, 295, 4967, 293, 747, 264, 4274, 420, 264, 914, 295, 264, 4265, 294, 2099, 9131, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08900676997361985, "compression_ratio": 1.803030303030303, "no_speech_prob": 0.11743614822626114}, {"id": 1406, "seek": 631600, "start": 6325.0, "end": 6331.0, "text": " And we can see that the active ones are much more productive than the temporarily closed ones or the permanently abandoned ones.", "tokens": [50814, 400, 321, 393, 536, 300, 264, 4967, 2306, 366, 709, 544, 13304, 813, 264, 23750, 5395, 2306, 420, 264, 24042, 13732, 2306, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08900676997361985, "compression_ratio": 1.803030303030303, "no_speech_prob": 0.11743614822626114}, {"id": 1407, "seek": 631600, "start": 6331.0, "end": 6336.0, "text": " It's interesting to me that permanently abandoned has on average 60,000 tons.", "tokens": [51114, 467, 311, 1880, 281, 385, 300, 24042, 13732, 575, 322, 4274, 4060, 11, 1360, 9131, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08900676997361985, "compression_ratio": 1.803030303030303, "no_speech_prob": 0.11743614822626114}, {"id": 1408, "seek": 631600, "start": 6336.0, "end": 6340.0, "text": " Let's look at it in terms of the log of the production though.", "tokens": [51364, 961, 311, 574, 412, 309, 294, 2115, 295, 264, 3565, 295, 264, 4265, 1673, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08900676997361985, "compression_ratio": 1.803030303030303, "no_speech_prob": 0.11743614822626114}, {"id": 1409, "seek": 631600, "start": 6340.0, "end": 6343.0, "text": " This will be what I think we're going to be going against.", "tokens": [51564, 639, 486, 312, 437, 286, 519, 321, 434, 516, 281, 312, 516, 1970, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08900676997361985, "compression_ratio": 1.803030303030303, "no_speech_prob": 0.11743614822626114}, {"id": 1410, "seek": 634300, "start": 6343.0, "end": 6350.0, "text": " So huge difference in the overall production capabilities, but we'll see how good this is at making a final prediction.", "tokens": [50364, 407, 2603, 2649, 294, 264, 4787, 4265, 10862, 11, 457, 321, 603, 536, 577, 665, 341, 307, 412, 1455, 257, 2572, 17630, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07889256728322883, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.019116725772619247}, {"id": 1411, "seek": 634300, "start": 6350.0, "end": 6356.0, "text": " So from here is we would like to predict the log of coal mines.", "tokens": [50714, 407, 490, 510, 307, 321, 576, 411, 281, 6069, 264, 3565, 295, 10209, 25398, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07889256728322883, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.019116725772619247}, {"id": 1412, "seek": 634300, "start": 6356.0, "end": 6362.0, "text": " And we'd also like to know what actually leads to the production, higher production and lower production.", "tokens": [51014, 400, 321, 1116, 611, 411, 281, 458, 437, 767, 6689, 281, 264, 4265, 11, 2946, 4265, 293, 3126, 4265, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07889256728322883, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.019116725772619247}, {"id": 1413, "seek": 634300, "start": 6362.0, "end": 6368.0, "text": " If we look again at all the columns in our data frame, the data that we have year is the same for all of them.", "tokens": [51314, 759, 321, 574, 797, 412, 439, 264, 13766, 294, 527, 1412, 3920, 11, 264, 1412, 300, 321, 362, 1064, 307, 264, 912, 337, 439, 295, 552, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07889256728322883, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.019116725772619247}, {"id": 1414, "seek": 636800, "start": 6368.0, "end": 6371.0, "text": " And various things that shouldn't matter at all.", "tokens": [50364, 400, 3683, 721, 300, 4659, 380, 1871, 412, 439, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1415, "seek": 636800, "start": 6371.0, "end": 6380.0, "text": " Like the union code is just going to be a code that's given to the mine from a, let's just look at that.", "tokens": [50514, 1743, 264, 11671, 3089, 307, 445, 516, 281, 312, 257, 3089, 300, 311, 2212, 281, 264, 3892, 490, 257, 11, 718, 311, 445, 574, 412, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1416, "seek": 636800, "start": 6380.0, "end": 6382.0, "text": " Actually, that might be predictive.", "tokens": [50964, 5135, 11, 300, 1062, 312, 35521, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1417, "seek": 636800, "start": 6382.0, "end": 6387.0, "text": " So I'm going to try to throw as many of these things as we can into a predictive model.", "tokens": [51064, 407, 286, 478, 516, 281, 853, 281, 3507, 382, 867, 295, 613, 721, 382, 321, 393, 666, 257, 35521, 2316, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1418, "seek": 636800, "start": 6387.0, "end": 6389.0, "text": " So I'll call these features.", "tokens": [51314, 407, 286, 603, 818, 613, 4122, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1419, "seek": 636800, "start": 6389.0, "end": 6392.0, "text": " And let's start with this as our list of features.", "tokens": [51414, 400, 718, 311, 722, 365, 341, 382, 527, 1329, 295, 4122, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1420, "seek": 636800, "start": 6392.0, "end": 6396.0, "text": " We'll have our target be log production.", "tokens": [51564, 492, 603, 362, 527, 3779, 312, 3565, 4265, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0991598356754408, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.07153178006410599}, {"id": 1421, "seek": 639600, "start": 6396.0, "end": 6402.0, "text": " So year is going to be entirely unpredictable because it's a single thing.", "tokens": [50364, 407, 1064, 307, 516, 281, 312, 7696, 31160, 570, 309, 311, 257, 2167, 551, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1025369575431755, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.008314352482557297}, {"id": 1422, "seek": 639600, "start": 6402.0, "end": 6406.0, "text": " Mine name, I suspect will not be predictive because it's simply the mine.", "tokens": [50664, 11620, 1315, 11, 286, 9091, 486, 406, 312, 35521, 570, 309, 311, 2935, 264, 3892, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1025369575431755, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.008314352482557297}, {"id": 1423, "seek": 639600, "start": 6406.0, "end": 6411.0, "text": " The state might be what state is it in, what county is it in that could be useful.", "tokens": [50864, 440, 1785, 1062, 312, 437, 1785, 307, 309, 294, 11, 437, 9928, 307, 309, 294, 300, 727, 312, 4420, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1025369575431755, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.008314352482557297}, {"id": 1424, "seek": 639600, "start": 6411.0, "end": 6414.0, "text": " The mine status, I'm sure will be predictive.", "tokens": [51114, 440, 3892, 6558, 11, 286, 478, 988, 486, 312, 35521, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1025369575431755, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.008314352482557297}, {"id": 1425, "seek": 639600, "start": 6414.0, "end": 6425.0, "text": " Mine type will probably be it's possible that the operating type, the address of the operating company probably isn't because we already have the geographic things done with the county and the state.", "tokens": [51264, 11620, 2010, 486, 1391, 312, 309, 311, 1944, 300, 264, 7447, 2010, 11, 264, 2985, 295, 264, 7447, 2237, 1391, 1943, 380, 570, 321, 1217, 362, 264, 32318, 721, 1096, 365, 264, 9928, 293, 264, 1785, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1025369575431755, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.008314352482557297}, {"id": 1426, "seek": 642500, "start": 6425.0, "end": 6429.0, "text": " Though it's interesting, we'll definitely have some collinearity between the state and the county.", "tokens": [50364, 10404, 309, 311, 1880, 11, 321, 603, 2138, 362, 512, 1263, 533, 17409, 1296, 264, 1785, 293, 264, 9928, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1427, "seek": 642500, "start": 6429.0, "end": 6431.0, "text": " So it's possible that particular county and the state's good.", "tokens": [50564, 407, 309, 311, 1944, 300, 1729, 9928, 293, 264, 1785, 311, 665, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1428, "seek": 642500, "start": 6431.0, "end": 6432.0, "text": " We'll leave those in.", "tokens": [50664, 492, 603, 1856, 729, 294, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1429, "seek": 642500, "start": 6432.0, "end": 6436.0, "text": " Leave in the union code, the coal supply region.", "tokens": [50714, 9825, 294, 264, 11671, 3089, 11, 264, 10209, 5847, 4458, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1430, "seek": 642500, "start": 6436.0, "end": 6442.0, "text": " We can't give it the production of short tons as a prediction of the log of the production because that's cheating.", "tokens": [50914, 492, 393, 380, 976, 309, 264, 4265, 295, 2099, 9131, 382, 257, 17630, 295, 264, 3565, 295, 264, 4265, 570, 300, 311, 18309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1431, "seek": 642500, "start": 6442.0, "end": 6446.0, "text": " The number of employees that are employed and the number of labor hours.", "tokens": [51214, 440, 1230, 295, 6619, 300, 366, 20115, 293, 264, 1230, 295, 5938, 2496, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1432, "seek": 642500, "start": 6446.0, "end": 6447.0, "text": " Just to clean this up.", "tokens": [51414, 1449, 281, 2541, 341, 493, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1433, "seek": 642500, "start": 6447.0, "end": 6452.0, "text": " So I hold down shift and push the down arrow key and I've highlighted everything to indent.", "tokens": [51464, 407, 286, 1797, 760, 5513, 293, 2944, 264, 760, 11610, 2141, 293, 286, 600, 17173, 1203, 281, 44494, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1528137148791597, "compression_ratio": 1.7598684210526316, "no_speech_prob": 0.0209585502743721}, {"id": 1434, "seek": 645200, "start": 6452.0, "end": 6456.0, "text": " I'm going to hold down command and hit the right bracket key, which is the square brackets.", "tokens": [50364, 286, 478, 516, 281, 1797, 760, 5622, 293, 2045, 264, 558, 16904, 2141, 11, 597, 307, 264, 3732, 26179, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1435, "seek": 645200, "start": 6456.0, "end": 6458.0, "text": " So the parentheses are curved all the way around.", "tokens": [50564, 407, 264, 34153, 366, 24991, 439, 264, 636, 926, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1436, "seek": 645200, "start": 6458.0, "end": 6462.0, "text": " There's curly braces, which have a lot of curls in the square brackets.", "tokens": [50664, 821, 311, 32066, 41537, 11, 597, 362, 257, 688, 295, 36950, 294, 264, 3732, 26179, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1437, "seek": 645200, "start": 6462.0, "end": 6466.0, "text": " So holding down command and typing the right one will indent an entire block of text.", "tokens": [50864, 407, 5061, 760, 5622, 293, 18444, 264, 558, 472, 486, 44494, 364, 2302, 3461, 295, 2487, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1438, "seek": 645200, "start": 6466.0, "end": 6469.0, "text": " If you do the left bracket, it unindents.", "tokens": [51064, 759, 291, 360, 264, 1411, 16904, 11, 309, 517, 471, 791, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1439, "seek": 645200, "start": 6469.0, "end": 6472.0, "text": " This is a quick way of formatting lists.", "tokens": [51214, 639, 307, 257, 1702, 636, 295, 39366, 14511, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1440, "seek": 645200, "start": 6472.0, "end": 6477.0, "text": " So the features that we're going to be giving our model are going to be all of these features here.", "tokens": [51364, 407, 264, 4122, 300, 321, 434, 516, 281, 312, 2902, 527, 2316, 366, 516, 281, 312, 439, 295, 613, 4122, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1441, "seek": 645200, "start": 6477.0, "end": 6480.0, "text": " The target's going to be the log of the production.", "tokens": [51614, 440, 3779, 311, 516, 281, 312, 264, 3565, 295, 264, 4265, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1046590805053711, "compression_ratio": 1.9071428571428573, "no_speech_prob": 0.07581473886966705}, {"id": 1442, "seek": 648000, "start": 6480.0, "end": 6486.0, "text": " Now of these, I think only two of these are actually numbers to start with.", "tokens": [50364, 823, 295, 613, 11, 286, 519, 787, 732, 295, 613, 366, 767, 3547, 281, 722, 365, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08969894109987746, "compression_ratio": 1.8177777777777777, "no_speech_prob": 0.0037067406810820103}, {"id": 1443, "seek": 648000, "start": 6486.0, "end": 6491.0, "text": " So I think average employees and labor hours are the only ones that are proper features.", "tokens": [50664, 407, 286, 519, 4274, 6619, 293, 5938, 2496, 366, 264, 787, 2306, 300, 366, 2296, 4122, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08969894109987746, "compression_ratio": 1.8177777777777777, "no_speech_prob": 0.0037067406810820103}, {"id": 1444, "seek": 648000, "start": 6491.0, "end": 6494.0, "text": " And the rest of them are what I'm going to call categorical.", "tokens": [50914, 400, 264, 1472, 295, 552, 366, 437, 286, 478, 516, 281, 818, 19250, 804, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08969894109987746, "compression_ratio": 1.8177777777777777, "no_speech_prob": 0.0037067406810820103}, {"id": 1445, "seek": 648000, "start": 6494.0, "end": 6503.0, "text": " So the categoricals are these minus the average employees in the labor hours.", "tokens": [51064, 407, 264, 19250, 804, 82, 366, 613, 3175, 264, 4274, 6619, 294, 264, 5938, 2496, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08969894109987746, "compression_ratio": 1.8177777777777777, "no_speech_prob": 0.0037067406810820103}, {"id": 1446, "seek": 648000, "start": 6503.0, "end": 6506.0, "text": " And having a trailing comma here is actually okay.", "tokens": [51514, 400, 1419, 257, 944, 4883, 22117, 510, 307, 767, 1392, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08969894109987746, "compression_ratio": 1.8177777777777777, "no_speech_prob": 0.0037067406810820103}, {"id": 1447, "seek": 648000, "start": 6506.0, "end": 6508.0, "text": " We need commas between all the rest of them otherwise.", "tokens": [51664, 492, 643, 800, 296, 1296, 439, 264, 1472, 295, 552, 5911, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08969894109987746, "compression_ratio": 1.8177777777777777, "no_speech_prob": 0.0037067406810820103}, {"id": 1448, "seek": 650800, "start": 6508.0, "end": 6510.0, "text": " But this is one of my favorite features of Python.", "tokens": [50364, 583, 341, 307, 472, 295, 452, 2954, 4122, 295, 15329, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1449, "seek": 650800, "start": 6510.0, "end": 6512.0, "text": " And I don't know why it makes me so happy.", "tokens": [50464, 400, 286, 500, 380, 458, 983, 309, 1669, 385, 370, 2055, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1450, "seek": 650800, "start": 6512.0, "end": 6516.0, "text": " But having a trailing comma and having it not have a problem just makes me really happy.", "tokens": [50564, 583, 1419, 257, 944, 4883, 22117, 293, 1419, 309, 406, 362, 257, 1154, 445, 1669, 385, 534, 2055, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1451, "seek": 650800, "start": 6516.0, "end": 6520.0, "text": " So the features, which I'm going to just call the ones that are numeric,", "tokens": [50764, 407, 264, 4122, 11, 597, 286, 478, 516, 281, 445, 818, 264, 2306, 300, 366, 7866, 299, 11, 50964], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1452, "seek": 650800, "start": 6520.0, "end": 6523.0, "text": " are the average employees and labor hours.", "tokens": [50964, 366, 264, 4274, 6619, 293, 5938, 2496, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1453, "seek": 650800, "start": 6523.0, "end": 6526.0, "text": " The categoricals are the ones that are category variables.", "tokens": [51114, 440, 19250, 804, 82, 366, 264, 2306, 300, 366, 7719, 9102, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1454, "seek": 650800, "start": 6526.0, "end": 6531.0, "text": " So mine state, county, status, type, company type, operating type, union code,", "tokens": [51264, 407, 3892, 1785, 11, 9928, 11, 6558, 11, 2010, 11, 2237, 2010, 11, 7447, 2010, 11, 11671, 3089, 11, 51514], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1455, "seek": 650800, "start": 6531.0, "end": 6534.0, "text": " and coal supply region are all categoricals.", "tokens": [51514, 293, 10209, 5847, 4458, 366, 439, 19250, 804, 82, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0892206402275506, "compression_ratio": 1.7427536231884058, "no_speech_prob": 0.007813550531864166}, {"id": 1456, "seek": 653400, "start": 6534.0, "end": 6538.0, "text": " One thing that we'll have to do is create, because we'll be using scikit-learn,", "tokens": [50364, 1485, 551, 300, 321, 603, 362, 281, 360, 307, 1884, 11, 570, 321, 603, 312, 1228, 2180, 22681, 12, 306, 1083, 11, 50564], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1457, "seek": 653400, "start": 6538.0, "end": 6543.0, "text": " we'll have to turn these categoricals into numbers or into some sort of numerical thing.", "tokens": [50564, 321, 603, 362, 281, 1261, 613, 19250, 804, 82, 666, 3547, 420, 666, 512, 1333, 295, 29054, 551, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1458, "seek": 653400, "start": 6543.0, "end": 6546.0, "text": " And we'll be doing that with what's called a one-hot encoding.", "tokens": [50814, 400, 321, 603, 312, 884, 300, 365, 437, 311, 1219, 257, 472, 12, 12194, 43430, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1459, "seek": 653400, "start": 6546.0, "end": 6549.0, "text": " Also called dummy variables. There's probably a few other names as well.", "tokens": [50964, 2743, 1219, 35064, 9102, 13, 821, 311, 1391, 257, 1326, 661, 5288, 382, 731, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1460, "seek": 653400, "start": 6549.0, "end": 6551.0, "text": " So we split this up into numeric features.", "tokens": [51114, 407, 321, 7472, 341, 493, 666, 7866, 299, 4122, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1461, "seek": 653400, "start": 6551.0, "end": 6554.0, "text": " So things that have numbers representing how long people worked,", "tokens": [51214, 407, 721, 300, 362, 3547, 13460, 577, 938, 561, 2732, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1462, "seek": 653400, "start": 6554.0, "end": 6558.0, "text": " how many employees a mine has, categorical, which is what state", "tokens": [51364, 577, 867, 6619, 257, 3892, 575, 11, 19250, 804, 11, 597, 307, 437, 1785, 51564], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1463, "seek": 653400, "start": 6558.0, "end": 6560.0, "text": " or some other thing that actually has a category,", "tokens": [51564, 420, 512, 661, 551, 300, 767, 575, 257, 7719, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1464, "seek": 653400, "start": 6560.0, "end": 6563.0, "text": " and the target variable, which is log of the production.", "tokens": [51664, 293, 264, 3779, 7006, 11, 597, 307, 3565, 295, 264, 4265, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10270861171235975, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.02594616450369358}, {"id": 1465, "seek": 656300, "start": 6563.0, "end": 6566.0, "text": " From here, we need to do a bit more data munging after it's all been cleaned.", "tokens": [50364, 3358, 510, 11, 321, 643, 281, 360, 257, 857, 544, 1412, 275, 1063, 278, 934, 309, 311, 439, 668, 16146, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06249227596603277, "compression_ratio": 1.8357664233576643, "no_speech_prob": 0.0010647656163200736}, {"id": 1466, "seek": 656300, "start": 6566.0, "end": 6574.0, "text": " We now have to do some munging to make this into a form that scikit-learn can actually predict with.", "tokens": [50514, 492, 586, 362, 281, 360, 512, 275, 1063, 278, 281, 652, 341, 666, 257, 1254, 300, 2180, 22681, 12, 306, 1083, 393, 767, 6069, 365, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06249227596603277, "compression_ratio": 1.8357664233576643, "no_speech_prob": 0.0010647656163200736}, {"id": 1467, "seek": 656300, "start": 6574.0, "end": 6580.0, "text": " In this lesson, we'll be looking at the final data munging and the final prediction for this data.", "tokens": [50914, 682, 341, 6898, 11, 321, 603, 312, 1237, 412, 264, 2572, 1412, 275, 1063, 278, 293, 264, 2572, 17630, 337, 341, 1412, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06249227596603277, "compression_ratio": 1.8357664233576643, "no_speech_prob": 0.0010647656163200736}, {"id": 1468, "seek": 656300, "start": 6580.0, "end": 6582.0, "text": " So I've actually changed up this slightly.", "tokens": [51214, 407, 286, 600, 767, 3105, 493, 341, 4748, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06249227596603277, "compression_ratio": 1.8357664233576643, "no_speech_prob": 0.0010647656163200736}, {"id": 1469, "seek": 656300, "start": 6582.0, "end": 6585.0, "text": " So the features that we'll be looking at, these are numeric features to start with.", "tokens": [51314, 407, 264, 4122, 300, 321, 603, 312, 1237, 412, 11, 613, 366, 7866, 299, 4122, 281, 722, 365, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06249227596603277, "compression_ratio": 1.8357664233576643, "no_speech_prob": 0.0010647656163200736}, {"id": 1470, "seek": 656300, "start": 6585.0, "end": 6590.0, "text": " The average number of employees per mine and the number of labor hours total worked for that mine.", "tokens": [51464, 440, 4274, 1230, 295, 6619, 680, 3892, 293, 264, 1230, 295, 5938, 2496, 3217, 2732, 337, 300, 3892, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06249227596603277, "compression_ratio": 1.8357664233576643, "no_speech_prob": 0.0010647656163200736}, {"id": 1471, "seek": 659000, "start": 6590.0, "end": 6594.0, "text": " And also a categorical list. This categorical list contains features", "tokens": [50364, 400, 611, 257, 19250, 804, 1329, 13, 639, 19250, 804, 1329, 8306, 4122, 50564], "temperature": 0.0, "avg_logprob": -0.07052345275878906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009262962266802788}, {"id": 1472, "seek": 659000, "start": 6594.0, "end": 6600.0, "text": " which have a small number of string representations instead of actual numbers.", "tokens": [50564, 597, 362, 257, 1359, 1230, 295, 6798, 33358, 2602, 295, 3539, 3547, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07052345275878906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009262962266802788}, {"id": 1473, "seek": 659000, "start": 6600.0, "end": 6606.0, "text": " And again, the target we're looking at is the log value of the production in tons.", "tokens": [50864, 400, 797, 11, 264, 3779, 321, 434, 1237, 412, 307, 264, 3565, 2158, 295, 264, 4265, 294, 9131, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07052345275878906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009262962266802788}, {"id": 1474, "seek": 659000, "start": 6606.0, "end": 6610.0, "text": " So one thing that I recommend you doing is taking a look at the interplay", "tokens": [51164, 407, 472, 551, 300, 286, 2748, 291, 884, 307, 1940, 257, 574, 412, 264, 728, 2858, 51364], "temperature": 0.0, "avg_logprob": -0.07052345275878906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009262962266802788}, {"id": 1475, "seek": 659000, "start": 6610.0, "end": 6613.0, "text": " between each of the variables and the target variable.", "tokens": [51364, 1296, 1184, 295, 264, 9102, 293, 264, 3779, 7006, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07052345275878906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009262962266802788}, {"id": 1476, "seek": 659000, "start": 6613.0, "end": 6616.0, "text": " So I'll do a quick example of this.", "tokens": [51514, 407, 286, 603, 360, 257, 1702, 1365, 295, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07052345275878906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009262962266802788}, {"id": 1477, "seek": 661600, "start": 6616.0, "end": 6620.0, "text": " So let's take a look at the relationship between mine status,", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 264, 2480, 1296, 3892, 6558, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1478, "seek": 661600, "start": 6620.0, "end": 6623.0, "text": " which is a categorical variable, and the log of the production.", "tokens": [50564, 597, 307, 257, 19250, 804, 7006, 11, 293, 264, 3565, 295, 264, 4265, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1479, "seek": 661600, "start": 6623.0, "end": 6628.0, "text": " I'll be doing that with this Seaborn code here, which I just executed.", "tokens": [50714, 286, 603, 312, 884, 300, 365, 341, 1100, 455, 1865, 3089, 510, 11, 597, 286, 445, 17577, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1480, "seek": 661600, "start": 6628.0, "end": 6632.0, "text": " And the set context has to be run twice the first time.", "tokens": [50964, 400, 264, 992, 4319, 575, 281, 312, 1190, 6091, 264, 700, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1481, "seek": 661600, "start": 6632.0, "end": 6635.0, "text": " What this is doing is doing a violin plot.", "tokens": [51164, 708, 341, 307, 884, 307, 884, 257, 22878, 7542, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1482, "seek": 661600, "start": 6635.0, "end": 6638.0, "text": " So this is the Seaborn library SNS, and it's creating this.", "tokens": [51314, 407, 341, 307, 264, 1100, 455, 1865, 6405, 13955, 50, 11, 293, 309, 311, 4084, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1483, "seek": 661600, "start": 6638.0, "end": 6640.0, "text": " It's using the violin plot function.", "tokens": [51464, 467, 311, 1228, 264, 22878, 7542, 2445, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1484, "seek": 661600, "start": 6640.0, "end": 6645.0, "text": " And what we see here on the y-axis is the mine status, the five possible values,", "tokens": [51564, 400, 437, 321, 536, 510, 322, 264, 288, 12, 24633, 307, 264, 3892, 6558, 11, 264, 1732, 1944, 4190, 11, 51814], "temperature": 0.0, "avg_logprob": -0.09673573588596955, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.0017003882676362991}, {"id": 1485, "seek": 664500, "start": 6645.0, "end": 6649.0, "text": " active with men working but not producing, permanently abandoned, active,", "tokens": [50364, 4967, 365, 1706, 1364, 457, 406, 10501, 11, 24042, 13732, 11, 4967, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1486, "seek": 664500, "start": 6649.0, "end": 6652.0, "text": " temporarily closed, and new under construction.", "tokens": [50564, 23750, 5395, 11, 293, 777, 833, 6435, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1487, "seek": 664500, "start": 6652.0, "end": 6656.0, "text": " And on the x-axis, we see the log of the production.", "tokens": [50714, 400, 322, 264, 2031, 12, 24633, 11, 321, 536, 264, 3565, 295, 264, 4265, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1488, "seek": 664500, "start": 6656.0, "end": 6661.0, "text": " So you see that each of these mine status types corresponds to a different log", "tokens": [50914, 407, 291, 536, 300, 1184, 295, 613, 3892, 6558, 3467, 23249, 281, 257, 819, 3565, 51164], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1489, "seek": 664500, "start": 6661.0, "end": 6663.0, "text": " of the production value of that mine.", "tokens": [51164, 295, 264, 4265, 2158, 295, 300, 3892, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1490, "seek": 664500, "start": 6663.0, "end": 6666.0, "text": " But also the distribution has this interesting shape,", "tokens": [51264, 583, 611, 264, 7316, 575, 341, 1880, 3909, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1491, "seek": 664500, "start": 6666.0, "end": 6668.0, "text": " and it changes between these categories.", "tokens": [51414, 293, 309, 2962, 1296, 613, 10479, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1492, "seek": 664500, "start": 6668.0, "end": 6671.0, "text": " This kind of a plot is a very nice high level view of what these variables", "tokens": [51514, 639, 733, 295, 257, 7542, 307, 257, 588, 1481, 1090, 1496, 1910, 295, 437, 613, 9102, 51664], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1493, "seek": 664500, "start": 6671.0, "end": 6673.0, "text": " interactions look like.", "tokens": [51664, 13280, 574, 411, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07432022924008577, "compression_ratio": 1.7321428571428572, "no_speech_prob": 0.004197857808321714}, {"id": 1494, "seek": 667300, "start": 6673.0, "end": 6674.0, "text": " I'll do just one more.", "tokens": [50364, 286, 603, 360, 445, 472, 544, 13, 50414], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1495, "seek": 667300, "start": 6674.0, "end": 6677.0, "text": " How does company type corresponds to the production?", "tokens": [50414, 1012, 775, 2237, 2010, 23249, 281, 264, 4265, 30, 50564], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1496, "seek": 667300, "start": 6677.0, "end": 6680.0, "text": " So we see that there are three company types here, independent producer,", "tokens": [50564, 407, 321, 536, 300, 456, 366, 1045, 2237, 3467, 510, 11, 6695, 12314, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1497, "seek": 667300, "start": 6680.0, "end": 6683.0, "text": " operating subsidiary and contractor, and each of those corresponds", "tokens": [50714, 7447, 48296, 822, 293, 26463, 11, 293, 1184, 295, 729, 23249, 50864], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1498, "seek": 667300, "start": 6683.0, "end": 6685.0, "text": " to a very different distribution.", "tokens": [50864, 281, 257, 588, 819, 7316, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1499, "seek": 667300, "start": 6685.0, "end": 6688.0, "text": " So you can do this for all of the variables, and I recommend doing that,", "tokens": [50964, 407, 291, 393, 360, 341, 337, 439, 295, 264, 9102, 11, 293, 286, 2748, 884, 300, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1500, "seek": 667300, "start": 6688.0, "end": 6691.0, "text": " especially before and getting a sense of what the data actually looks like.", "tokens": [51114, 2318, 949, 293, 1242, 257, 2020, 295, 437, 264, 1412, 767, 1542, 411, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1501, "seek": 667300, "start": 6691.0, "end": 6695.0, "text": " But for us, we just look at this company type a little bit more closely.", "tokens": [51264, 583, 337, 505, 11, 321, 445, 574, 412, 341, 2237, 2010, 257, 707, 857, 544, 8185, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1502, "seek": 667300, "start": 6695.0, "end": 6700.0, "text": " So if we do a DF company type dot unique, we return all the unique values.", "tokens": [51464, 407, 498, 321, 360, 257, 48336, 2237, 2010, 5893, 3845, 11, 321, 2736, 439, 264, 3845, 4190, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1503, "seek": 667300, "start": 6700.0, "end": 6702.0, "text": " Of course, we see the three that we see in the plot above.", "tokens": [51714, 2720, 1164, 11, 321, 536, 264, 1045, 300, 321, 536, 294, 264, 7542, 3673, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07299926122029622, "compression_ratio": 1.8168168168168168, "no_speech_prob": 0.008575457148253918}, {"id": 1504, "seek": 670200, "start": 6702.0, "end": 6706.0, "text": " An independent producer operator operating subsidiary and contractor.", "tokens": [50364, 1107, 6695, 12314, 12973, 7447, 48296, 822, 293, 26463, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1505, "seek": 670200, "start": 6706.0, "end": 6711.0, "text": " The scikit-learn functions don't take in these strings as separate", "tokens": [50564, 440, 2180, 22681, 12, 306, 1083, 6828, 500, 380, 747, 294, 613, 13985, 382, 4994, 50814], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1506, "seek": 670200, "start": 6711.0, "end": 6713.0, "text": " category variables.", "tokens": [50814, 7719, 9102, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1507, "seek": 670200, "start": 6713.0, "end": 6715.0, "text": " We actually have to encode this ourselves.", "tokens": [50914, 492, 767, 362, 281, 2058, 1429, 341, 4175, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1508, "seek": 670200, "start": 6715.0, "end": 6718.0, "text": " Now one way to encode this would be to do something like assign", "tokens": [51014, 823, 472, 636, 281, 2058, 1429, 341, 576, 312, 281, 360, 746, 411, 6269, 51164], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1509, "seek": 670200, "start": 6718.0, "end": 6722.0, "text": " independent producer to be one, operating subsidiary to be two,", "tokens": [51164, 6695, 12314, 281, 312, 472, 11, 7447, 48296, 822, 281, 312, 732, 11, 51364], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1510, "seek": 670200, "start": 6722.0, "end": 6723.0, "text": " and contractor to be three.", "tokens": [51364, 293, 26463, 281, 312, 1045, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1511, "seek": 670200, "start": 6723.0, "end": 6726.0, "text": " And that would work except that we are then implicitly telling,", "tokens": [51414, 400, 300, 576, 589, 3993, 300, 321, 366, 550, 26947, 356, 3585, 11, 51564], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1512, "seek": 670200, "start": 6726.0, "end": 6730.0, "text": " let's say a scikit-learn random forest function that three is greater than two,", "tokens": [51564, 718, 311, 584, 257, 2180, 22681, 12, 306, 1083, 4974, 6719, 2445, 300, 1045, 307, 5044, 813, 732, 11, 51764], "temperature": 0.0, "avg_logprob": -0.14594573661929272, "compression_ratio": 1.848148148148148, "no_speech_prob": 0.02095894142985344}, {"id": 1513, "seek": 673000, "start": 6730.0, "end": 6731.0, "text": " which is also greater than one.", "tokens": [50364, 597, 307, 611, 5044, 813, 472, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1514, "seek": 673000, "start": 6731.0, "end": 6733.0, "text": " And there's an implicit ordering there.", "tokens": [50414, 400, 456, 311, 364, 26947, 21739, 456, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1515, "seek": 673000, "start": 6733.0, "end": 6737.0, "text": " And it might start to try to cut the features in a way that doesn't make sense.", "tokens": [50514, 400, 309, 1062, 722, 281, 853, 281, 1723, 264, 4122, 294, 257, 636, 300, 1177, 380, 652, 2020, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1516, "seek": 673000, "start": 6737.0, "end": 6741.0, "text": " A more safe way to do this is to actually create what's called dummy variables.", "tokens": [50714, 316, 544, 3273, 636, 281, 360, 341, 307, 281, 767, 1884, 437, 311, 1219, 35064, 9102, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1517, "seek": 673000, "start": 6741.0, "end": 6744.0, "text": " Pandas has a built-in dummy variable function.", "tokens": [50914, 16995, 296, 575, 257, 3094, 12, 259, 35064, 7006, 2445, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1518, "seek": 673000, "start": 6744.0, "end": 6748.0, "text": " So we do PD dot get dummies on the data frame with just,", "tokens": [51064, 407, 321, 360, 10464, 5893, 483, 16784, 38374, 322, 264, 1412, 3920, 365, 445, 11, 51264], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1519, "seek": 673000, "start": 6748.0, "end": 6751.0, "text": " we're looking at the single column of company type.", "tokens": [51264, 321, 434, 1237, 412, 264, 2167, 7738, 295, 2237, 2010, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1520, "seek": 673000, "start": 6751.0, "end": 6753.0, "text": " And I'm taking a sample of 50 so that we get a mix of types,", "tokens": [51414, 400, 286, 478, 1940, 257, 6889, 295, 2625, 370, 300, 321, 483, 257, 2890, 295, 3467, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1521, "seek": 673000, "start": 6753.0, "end": 6755.0, "text": " because it's actually ordered in this data set,", "tokens": [51514, 570, 309, 311, 767, 8866, 294, 341, 1412, 992, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1522, "seek": 673000, "start": 6755.0, "end": 6757.0, "text": " and just taking a look at the top 10.", "tokens": [51614, 293, 445, 1940, 257, 574, 412, 264, 1192, 1266, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09174260639009021, "compression_ratio": 1.6845425867507886, "no_speech_prob": 0.014500215649604797}, {"id": 1523, "seek": 675700, "start": 6757.0, "end": 6759.0, "text": " So I'm going to run this a couple of times.", "tokens": [50364, 407, 286, 478, 516, 281, 1190, 341, 257, 1916, 295, 1413, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1524, "seek": 675700, "start": 6759.0, "end": 6761.0, "text": " This sample will actually re-sample every time I run it.", "tokens": [50464, 639, 6889, 486, 767, 319, 12, 19988, 781, 633, 565, 286, 1190, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1525, "seek": 675700, "start": 6761.0, "end": 6765.0, "text": " So what we see here is the contractor independent and operating subsidiary,", "tokens": [50564, 407, 437, 321, 536, 510, 307, 264, 26463, 6695, 293, 7447, 48296, 822, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1526, "seek": 675700, "start": 6765.0, "end": 6768.0, "text": " this MSHA ID corresponds to an independent producer operator,", "tokens": [50764, 341, 7395, 4983, 7348, 23249, 281, 364, 6695, 12314, 12973, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1527, "seek": 675700, "start": 6768.0, "end": 6770.0, "text": " because it has a one in that column,", "tokens": [50914, 570, 309, 575, 257, 472, 294, 300, 7738, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1528, "seek": 675700, "start": 6770.0, "end": 6772.0, "text": " and zeros in each of the other columns.", "tokens": [51014, 293, 35193, 294, 1184, 295, 264, 661, 13766, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1529, "seek": 675700, "start": 6772.0, "end": 6775.0, "text": " And if you go down to this 4407123 ID,", "tokens": [51114, 400, 498, 291, 352, 760, 281, 341, 1017, 5254, 22, 4762, 18, 7348, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1530, "seek": 675700, "start": 6775.0, "end": 6777.0, "text": " it is an operating subsidiary company,", "tokens": [51264, 309, 307, 364, 7447, 48296, 822, 2237, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1531, "seek": 675700, "start": 6777.0, "end": 6779.0, "text": " and it has zeros in the rest of the column.", "tokens": [51364, 293, 309, 575, 35193, 294, 264, 1472, 295, 264, 7738, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1532, "seek": 675700, "start": 6779.0, "end": 6782.0, "text": " So this is what the get dummies function does with pandas.", "tokens": [51464, 407, 341, 307, 437, 264, 483, 16784, 38374, 2445, 775, 365, 4565, 296, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1533, "seek": 675700, "start": 6782.0, "end": 6785.0, "text": " Now what we want to do is actually turn each of the categorical variables", "tokens": [51614, 823, 437, 321, 528, 281, 360, 307, 767, 1261, 1184, 295, 264, 19250, 804, 9102, 51764], "temperature": 0.0, "avg_logprob": -0.10820755497101814, "compression_ratio": 1.7484662576687116, "no_speech_prob": 0.019713355228304863}, {"id": 1534, "seek": 678500, "start": 6785.0, "end": 6787.0, "text": " that we're looking at into dummy variables.", "tokens": [50364, 300, 321, 434, 1237, 412, 666, 35064, 9102, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1535, "seek": 678500, "start": 6787.0, "end": 6790.0, "text": " And then we'll actually learn to drop one of the variables", "tokens": [50464, 400, 550, 321, 603, 767, 1466, 281, 3270, 472, 295, 264, 9102, 50614], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1536, "seek": 678500, "start": 6790.0, "end": 6792.0, "text": " to avoid the dummy variable trap.", "tokens": [50614, 281, 5042, 264, 35064, 7006, 11487, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1537, "seek": 678500, "start": 6792.0, "end": 6795.0, "text": " We're then going to concat the data frames together.", "tokens": [50714, 492, 434, 550, 516, 281, 1588, 267, 264, 1412, 12083, 1214, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1538, "seek": 678500, "start": 6795.0, "end": 6798.0, "text": " So we're taking the data frame and the temporary data frame together.", "tokens": [50864, 407, 321, 434, 1940, 264, 1412, 3920, 293, 264, 13413, 1412, 3920, 1214, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1539, "seek": 678500, "start": 6798.0, "end": 6803.0, "text": " And axis equals 1 means it will add it as columns to the existing data frames.", "tokens": [51014, 400, 10298, 6915, 502, 1355, 309, 486, 909, 309, 382, 13766, 281, 264, 6741, 1412, 12083, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1540, "seek": 678500, "start": 6803.0, "end": 6807.0, "text": " And we will then drop the drop variable from the data frame", "tokens": [51264, 400, 321, 486, 550, 3270, 264, 3270, 7006, 490, 264, 1412, 3920, 51464], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1541, "seek": 678500, "start": 6807.0, "end": 6813.0, "text": " and call that to list function on the columns of the temporary data frame", "tokens": [51464, 293, 818, 300, 281, 1329, 2445, 322, 264, 13766, 295, 264, 13413, 1412, 3920, 51764], "temperature": 0.0, "avg_logprob": -0.07487196714981742, "compression_ratio": 2.0344827586206895, "no_speech_prob": 0.03620315343141556}, {"id": 1542, "seek": 681300, "start": 6813.0, "end": 6817.0, "text": " so that we have a final list of what the dummy categories look like.", "tokens": [50364, 370, 300, 321, 362, 257, 2572, 1329, 295, 437, 264, 35064, 10479, 574, 411, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1543, "seek": 681300, "start": 6817.0, "end": 6819.0, "text": " Let's run that real fast.", "tokens": [50564, 961, 311, 1190, 300, 957, 2370, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1544, "seek": 681300, "start": 6819.0, "end": 6820.0, "text": " It completes very quickly.", "tokens": [50664, 467, 36362, 588, 2661, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1545, "seek": 681300, "start": 6820.0, "end": 6824.0, "text": " We see that there are 29 mine states, 164 mine counties.", "tokens": [50714, 492, 536, 300, 456, 366, 9413, 3892, 4368, 11, 3165, 19, 3892, 20583, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1546, "seek": 681300, "start": 6824.0, "end": 6825.0, "text": " So this might be a little bit high.", "tokens": [50914, 407, 341, 1062, 312, 257, 707, 857, 1090, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1547, "seek": 681300, "start": 6825.0, "end": 6827.0, "text": " We might have to come back and look at that.", "tokens": [50964, 492, 1062, 362, 281, 808, 646, 293, 574, 412, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1548, "seek": 681300, "start": 6827.0, "end": 6831.0, "text": " The mine status, there's five, mine type 3, company type 3, and so on.", "tokens": [51064, 440, 3892, 6558, 11, 456, 311, 1732, 11, 3892, 2010, 805, 11, 2237, 2010, 805, 11, 293, 370, 322, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1549, "seek": 681300, "start": 6831.0, "end": 6833.0, "text": " And the actual value of the dummy variables themselves,", "tokens": [51264, 400, 264, 3539, 2158, 295, 264, 35064, 9102, 2969, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1550, "seek": 681300, "start": 6833.0, "end": 6835.0, "text": " let's take a look at say the first 10.", "tokens": [51364, 718, 311, 747, 257, 574, 412, 584, 264, 700, 1266, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1551, "seek": 681300, "start": 6835.0, "end": 6839.0, "text": " We see mine state, Alabama, mine state, Alaska, and so on.", "tokens": [51464, 492, 536, 3892, 1785, 11, 20898, 11, 3892, 1785, 11, 19553, 11, 293, 370, 322, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1552, "seek": 681300, "start": 6839.0, "end": 6841.0, "text": " So these are the different state variables", "tokens": [51664, 407, 613, 366, 264, 819, 1785, 9102, 51764], "temperature": 0.0, "avg_logprob": -0.11505681236318294, "compression_ratio": 1.7864406779661017, "no_speech_prob": 0.00884589459747076}, {"id": 1553, "seek": 684100, "start": 6841.0, "end": 6843.0, "text": " that have been created.", "tokens": [50364, 300, 362, 668, 2942, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1554, "seek": 684100, "start": 6843.0, "end": 6845.0, "text": " Let's actually start to build a model.", "tokens": [50464, 961, 311, 767, 722, 281, 1322, 257, 2316, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1555, "seek": 684100, "start": 6845.0, "end": 6849.0, "text": " So we'll say, so I created this as a markdown", "tokens": [50564, 407, 321, 603, 584, 11, 370, 286, 2942, 341, 382, 257, 1491, 5093, 50764], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1556, "seek": 684100, "start": 6849.0, "end": 6853.0, "text": " by typing escape to make me into select mode instead of insert mode", "tokens": [50764, 538, 18444, 7615, 281, 652, 385, 666, 3048, 4391, 2602, 295, 8969, 4391, 50964], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1557, "seek": 684100, "start": 6853.0, "end": 6855.0, "text": " and typing m, m for markdown.", "tokens": [50964, 293, 18444, 275, 11, 275, 337, 1491, 5093, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1558, "seek": 684100, "start": 6855.0, "end": 6857.0, "text": " You can also go up here and click it.", "tokens": [51064, 509, 393, 611, 352, 493, 510, 293, 2052, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1559, "seek": 684100, "start": 6857.0, "end": 6860.0, "text": " So if I could go back to code, this is simply commented out Python code", "tokens": [51164, 407, 498, 286, 727, 352, 646, 281, 3089, 11, 341, 307, 2935, 26940, 484, 15329, 3089, 51314], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1560, "seek": 684100, "start": 6860.0, "end": 6861.0, "text": " as far as the notebook is concerned.", "tokens": [51314, 382, 1400, 382, 264, 21060, 307, 5922, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1561, "seek": 684100, "start": 6861.0, "end": 6863.0, "text": " We actually want this to be markdown.", "tokens": [51364, 492, 767, 528, 341, 281, 312, 1491, 5093, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1562, "seek": 684100, "start": 6863.0, "end": 6866.0, "text": " So we click markdown and you can see it pre-rendered", "tokens": [51464, 407, 321, 2052, 1491, 5093, 293, 291, 393, 536, 309, 659, 12, 4542, 4073, 51614], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1563, "seek": 684100, "start": 6866.0, "end": 6867.0, "text": " before we actually execute the cell.", "tokens": [51614, 949, 321, 767, 14483, 264, 2815, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1564, "seek": 684100, "start": 6867.0, "end": 6869.0, "text": " And it looks like this nice bold font.", "tokens": [51664, 400, 309, 1542, 411, 341, 1481, 11928, 10703, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08953653799520957, "compression_ratio": 1.716171617161716, "no_speech_prob": 0.010984845459461212}, {"id": 1565, "seek": 686900, "start": 6869.0, "end": 6872.0, "text": " We're going to need to import a couple of things from scikit-learn itself.", "tokens": [50364, 492, 434, 516, 281, 643, 281, 974, 257, 1916, 295, 721, 490, 2180, 22681, 12, 306, 1083, 2564, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1566, "seek": 686900, "start": 6872.0, "end": 6875.0, "text": " So we're going to say from scikit-learn dot cross validation.", "tokens": [50514, 407, 321, 434, 516, 281, 584, 490, 2180, 22681, 12, 306, 1083, 5893, 3278, 24071, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1567, "seek": 686900, "start": 6875.0, "end": 6878.0, "text": " So this is the sub module of scikit-learn.", "tokens": [50664, 407, 341, 307, 264, 1422, 10088, 295, 2180, 22681, 12, 306, 1083, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1568, "seek": 686900, "start": 6878.0, "end": 6882.0, "text": " We're going to import the test train split function, which is labeled here.", "tokens": [50814, 492, 434, 516, 281, 974, 264, 1500, 3847, 7472, 2445, 11, 597, 307, 21335, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1569, "seek": 686900, "start": 6882.0, "end": 6886.0, "text": " And we're also going to use a random force regressor as our algorithm.", "tokens": [51014, 400, 321, 434, 611, 516, 281, 764, 257, 4974, 3464, 1121, 735, 284, 382, 527, 9284, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1570, "seek": 686900, "start": 6886.0, "end": 6891.0, "text": " Loading that in, you look at total length of the dummy categoricals is 213.", "tokens": [51214, 6130, 8166, 300, 294, 11, 291, 574, 412, 3217, 4641, 295, 264, 35064, 19250, 804, 82, 307, 5080, 18, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1571, "seek": 686900, "start": 6891.0, "end": 6895.0, "text": " The train and test is going to be the names of the data frames", "tokens": [51464, 440, 3847, 293, 1500, 307, 516, 281, 312, 264, 5288, 295, 264, 1412, 12083, 51664], "temperature": 0.0, "avg_logprob": -0.10779050288309577, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.0035931847523897886}, {"id": 1572, "seek": 689500, "start": 6895.0, "end": 6899.0, "text": " that's going to be split by this test train split function.", "tokens": [50364, 300, 311, 516, 281, 312, 7472, 538, 341, 1500, 3847, 7472, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1573, "seek": 689500, "start": 6899.0, "end": 6902.0, "text": " The function takes in our data frame.", "tokens": [50564, 440, 2445, 2516, 294, 527, 1412, 3920, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1574, "seek": 689500, "start": 6902.0, "end": 6905.0, "text": " And you tell it how large you'd like the test size to be.", "tokens": [50714, 400, 291, 980, 309, 577, 2416, 291, 1116, 411, 264, 1500, 2744, 281, 312, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1575, "seek": 689500, "start": 6905.0, "end": 6909.0, "text": " So in this case, we're going to have a 30% of the data frame is going to be the holdout set.", "tokens": [50864, 407, 294, 341, 1389, 11, 321, 434, 516, 281, 362, 257, 2217, 4, 295, 264, 1412, 3920, 307, 516, 281, 312, 264, 1797, 346, 992, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1576, "seek": 689500, "start": 6909.0, "end": 6913.0, "text": " And the nice thing about this function is that we actually retain", "tokens": [51064, 400, 264, 1481, 551, 466, 341, 2445, 307, 300, 321, 767, 18340, 51264], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1577, "seek": 689500, "start": 6913.0, "end": 6916.0, "text": " the data frame structure of these variables.", "tokens": [51264, 264, 1412, 3920, 3877, 295, 613, 9102, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1578, "seek": 689500, "start": 6916.0, "end": 6919.0, "text": " Scikit-learn likes to think in terms of native numpy arrays,", "tokens": [51414, 16942, 22681, 12, 306, 1083, 5902, 281, 519, 294, 2115, 295, 8470, 1031, 8200, 41011, 11, 51564], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1579, "seek": 689500, "start": 6919.0, "end": 6923.0, "text": " but many of the features can actually read in a pandas data frame as well.", "tokens": [51564, 457, 867, 295, 264, 4122, 393, 767, 1401, 294, 257, 4565, 296, 1412, 3920, 382, 731, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08515108438362752, "compression_ratio": 1.8198529411764706, "no_speech_prob": 0.01971341483294964}, {"id": 1580, "seek": 692300, "start": 6923.0, "end": 6927.0, "text": " And the utility of having a pandas data frame around just makes it really nice to keep it,", "tokens": [50364, 400, 264, 14877, 295, 1419, 257, 4565, 296, 1412, 3920, 926, 445, 1669, 309, 534, 1481, 281, 1066, 309, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1581, "seek": 692300, "start": 6927.0, "end": 6929.0, "text": " to stay in data frames as long as you can.", "tokens": [50564, 281, 1754, 294, 1412, 12083, 382, 938, 382, 291, 393, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1582, "seek": 692300, "start": 6929.0, "end": 6932.0, "text": " So we can actually do it the whole way through. So that's really nice.", "tokens": [50664, 407, 321, 393, 767, 360, 309, 264, 1379, 636, 807, 13, 407, 300, 311, 534, 1481, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1583, "seek": 692300, "start": 6932.0, "end": 6935.0, "text": " Our train is a data frame. Our test is a data frame.", "tokens": [50814, 2621, 3847, 307, 257, 1412, 3920, 13, 2621, 1500, 307, 257, 1412, 3920, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1584, "seek": 692300, "start": 6935.0, "end": 6939.0, "text": " And they've been split from the data frame that contains all of our data.", "tokens": [50964, 400, 436, 600, 668, 7472, 490, 264, 1412, 3920, 300, 8306, 439, 295, 527, 1412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1585, "seek": 692300, "start": 6939.0, "end": 6941.0, "text": " So now we're going to create a random forest.", "tokens": [51164, 407, 586, 321, 434, 516, 281, 1884, 257, 4974, 6719, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1586, "seek": 692300, "start": 6941.0, "end": 6943.0, "text": " And I would like to run these separately.", "tokens": [51264, 400, 286, 576, 411, 281, 1190, 613, 14759, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1587, "seek": 692300, "start": 6943.0, "end": 6949.0, "text": " So I'm going to split this cell here by typing control shift minus splits the cells into two.", "tokens": [51364, 407, 286, 478, 516, 281, 7472, 341, 2815, 510, 538, 18444, 1969, 5513, 3175, 37741, 264, 5438, 666, 732, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1588, "seek": 692300, "start": 6949.0, "end": 6951.0, "text": " And I will execute this one.", "tokens": [51664, 400, 286, 486, 14483, 341, 472, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07106657357051455, "compression_ratio": 1.8006644518272426, "no_speech_prob": 0.012050842866301537}, {"id": 1589, "seek": 695100, "start": 6951.0, "end": 6954.0, "text": " This says RF is an instantiation of this random forest regressor,", "tokens": [50364, 639, 1619, 26204, 307, 364, 9836, 6642, 295, 341, 4974, 6719, 1121, 735, 284, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1590, "seek": 695100, "start": 6954.0, "end": 6956.0, "text": " which we imported above.", "tokens": [50514, 597, 321, 25524, 3673, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1591, "seek": 695100, "start": 6956.0, "end": 6958.0, "text": " And there's two things we're going to initialize it with.", "tokens": [50614, 400, 456, 311, 732, 721, 321, 434, 516, 281, 5883, 1125, 309, 365, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1592, "seek": 695100, "start": 6958.0, "end": 6960.0, "text": " Number of estimators is 100.", "tokens": [50714, 5118, 295, 8017, 3391, 307, 2319, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1593, "seek": 695100, "start": 6960.0, "end": 6963.0, "text": " This is a number of trees that we're going to be building a random forest out of.", "tokens": [50814, 639, 307, 257, 1230, 295, 5852, 300, 321, 434, 516, 281, 312, 2390, 257, 4974, 6719, 484, 295, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1594, "seek": 695100, "start": 6963.0, "end": 6965.0, "text": " And whether or not we're going to be using the out of bag score,", "tokens": [50964, 400, 1968, 420, 406, 321, 434, 516, 281, 312, 1228, 264, 484, 295, 3411, 6175, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1595, "seek": 695100, "start": 6965.0, "end": 6967.0, "text": " which we are in this case.", "tokens": [51064, 597, 321, 366, 294, 341, 1389, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1596, "seek": 695100, "start": 6967.0, "end": 6971.0, "text": " So we have an RF model and we'd like to fit on this by giving it", "tokens": [51164, 407, 321, 362, 364, 26204, 2316, 293, 321, 1116, 411, 281, 3318, 322, 341, 538, 2902, 309, 51364], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1597, "seek": 695100, "start": 6971.0, "end": 6975.0, "text": " x comma y and sample equals non as default.", "tokens": [51364, 2031, 22117, 288, 293, 6889, 6915, 2107, 382, 7576, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1598, "seek": 695100, "start": 6975.0, "end": 6979.0, "text": " So the x value is the design matrix.", "tokens": [51564, 407, 264, 2031, 2158, 307, 264, 1715, 8141, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09124616528233738, "compression_ratio": 1.7377622377622377, "no_speech_prob": 0.008574597537517548}, {"id": 1599, "seek": 697900, "start": 6979.0, "end": 6981.0, "text": " The y is the target variable.", "tokens": [50364, 440, 288, 307, 264, 3779, 7006, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1600, "seek": 697900, "start": 6981.0, "end": 6984.0, "text": " So in our case, we're going to do the train data frame.", "tokens": [50464, 407, 294, 527, 1389, 11, 321, 434, 516, 281, 360, 264, 3847, 1412, 3920, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1601, "seek": 697900, "start": 6984.0, "end": 6986.0, "text": " And we're going to give it all the features,", "tokens": [50614, 400, 321, 434, 516, 281, 976, 309, 439, 264, 4122, 11, 50714], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1602, "seek": 697900, "start": 6986.0, "end": 6990.0, "text": " which is just those two average employees and the total laborer,", "tokens": [50714, 597, 307, 445, 729, 732, 4274, 6619, 293, 264, 3217, 5938, 260, 11, 50914], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1603, "seek": 697900, "start": 6990.0, "end": 6992.0, "text": " as well as the dummy categoricals.", "tokens": [50914, 382, 731, 382, 264, 35064, 19250, 804, 82, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1604, "seek": 697900, "start": 6992.0, "end": 6995.0, "text": " Now, these two things together is just adding them together.", "tokens": [51014, 823, 11, 613, 732, 721, 1214, 307, 445, 5127, 552, 1214, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1605, "seek": 697900, "start": 6995.0, "end": 6997.0, "text": " It creates a large Python list.", "tokens": [51164, 467, 7829, 257, 2416, 15329, 1329, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1606, "seek": 697900, "start": 6997.0, "end": 7000.0, "text": " We can see the top two things up here at the top,", "tokens": [51264, 492, 393, 536, 264, 1192, 732, 721, 493, 510, 412, 264, 1192, 11, 51414], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1607, "seek": 697900, "start": 7000.0, "end": 7002.0, "text": " average employees and labor hours,", "tokens": [51414, 4274, 6619, 293, 5938, 2496, 11, 51514], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1608, "seek": 697900, "start": 7002.0, "end": 7004.0, "text": " and then everything else is dummy categoricals.", "tokens": [51514, 293, 550, 1203, 1646, 307, 35064, 19250, 804, 82, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1609, "seek": 697900, "start": 7004.0, "end": 7007.0, "text": " We then run the fit method on the random forest", "tokens": [51614, 492, 550, 1190, 264, 3318, 3170, 322, 264, 4974, 6719, 51764], "temperature": 0.0, "avg_logprob": -0.08740666660949262, "compression_ratio": 1.8394160583941606, "no_speech_prob": 0.003074825741350651}, {"id": 1610, "seek": 700700, "start": 7007.0, "end": 7010.0, "text": " and we can get the design matrix of train features", "tokens": [50364, 293, 321, 393, 483, 264, 1715, 8141, 295, 3847, 4122, 50514], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1611, "seek": 700700, "start": 7010.0, "end": 7013.0, "text": " plus dummy categoricals and the target,", "tokens": [50514, 1804, 35064, 19250, 804, 82, 293, 264, 3779, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1612, "seek": 700700, "start": 7013.0, "end": 7016.0, "text": " which is train just selected on the target variable,", "tokens": [50664, 597, 307, 3847, 445, 8209, 322, 264, 3779, 7006, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1613, "seek": 700700, "start": 7016.0, "end": 7018.0, "text": " which we defined above as log production.", "tokens": [50814, 597, 321, 7642, 3673, 382, 3565, 4265, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1614, "seek": 700700, "start": 7018.0, "end": 7022.0, "text": " So it tells us some features or it gives us a little summary", "tokens": [50914, 407, 309, 5112, 505, 512, 4122, 420, 309, 2709, 505, 257, 707, 12691, 51114], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1615, "seek": 700700, "start": 7022.0, "end": 7025.0, "text": " where it talks about the bootstrap, the criterion as mean squared error,", "tokens": [51114, 689, 309, 6686, 466, 264, 11450, 372, 4007, 11, 264, 46691, 382, 914, 8889, 6713, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1616, "seek": 700700, "start": 7025.0, "end": 7026.0, "text": " various other things here.", "tokens": [51264, 3683, 661, 721, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1617, "seek": 700700, "start": 7026.0, "end": 7028.0, "text": " So this is all the variables that you can change very easily.", "tokens": [51314, 407, 341, 307, 439, 264, 9102, 300, 291, 393, 1319, 588, 3612, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1618, "seek": 700700, "start": 7028.0, "end": 7031.0, "text": " If you'd like to actually tweak this for your own problems.", "tokens": [51414, 759, 291, 1116, 411, 281, 767, 29879, 341, 337, 428, 1065, 2740, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1619, "seek": 700700, "start": 7031.0, "end": 7033.0, "text": " So let's take a look at how well this does.", "tokens": [51564, 407, 718, 311, 747, 257, 574, 412, 577, 731, 341, 775, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1620, "seek": 700700, "start": 7033.0, "end": 7036.0, "text": " And we're going to do this by giving a seaborne plot again,", "tokens": [51664, 400, 321, 434, 516, 281, 360, 341, 538, 2902, 257, 369, 3816, 716, 7542, 797, 11, 51814], "temperature": 0.0, "avg_logprob": -0.1186323485918493, "compression_ratio": 1.7228915662650603, "no_speech_prob": 0.004330795723944902}, {"id": 1621, "seek": 703600, "start": 7036.0, "end": 7038.0, "text": " a regression plot, but except the train,", "tokens": [50364, 257, 24590, 7542, 11, 457, 3993, 264, 3847, 11, 50464], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1622, "seek": 703600, "start": 7038.0, "end": 7041.0, "text": " we're going to be using the test data frame.", "tokens": [50464, 321, 434, 516, 281, 312, 1228, 264, 1500, 1412, 3920, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1623, "seek": 703600, "start": 7041.0, "end": 7044.0, "text": " So I test the target and the regression plot here is going to be", "tokens": [50614, 407, 286, 1500, 264, 3779, 293, 264, 24590, 7542, 510, 307, 516, 281, 312, 50764], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1624, "seek": 703600, "start": 7044.0, "end": 7049.0, "text": " in target versus what we actually predict this to be.", "tokens": [50764, 294, 3779, 5717, 437, 321, 767, 6069, 341, 281, 312, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1625, "seek": 703600, "start": 7049.0, "end": 7051.0, "text": " So the actual is along the x-axis here.", "tokens": [51014, 407, 264, 3539, 307, 2051, 264, 2031, 12, 24633, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1626, "seek": 703600, "start": 7051.0, "end": 7053.0, "text": " This is what the actual production is.", "tokens": [51114, 639, 307, 437, 264, 3539, 4265, 307, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1627, "seek": 703600, "start": 7053.0, "end": 7057.0, "text": " And the y-axis is the predicted value.", "tokens": [51214, 400, 264, 288, 12, 24633, 307, 264, 19147, 2158, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1628, "seek": 703600, "start": 7057.0, "end": 7059.0, "text": " I can actually add that in.", "tokens": [51414, 286, 393, 767, 909, 300, 294, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1629, "seek": 703600, "start": 7059.0, "end": 7060.0, "text": " I think it should be there.", "tokens": [51514, 286, 519, 309, 820, 312, 456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1630, "seek": 703600, "start": 7060.0, "end": 7063.0, "text": " So we say predicted production.", "tokens": [51564, 407, 321, 584, 19147, 4265, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1631, "seek": 703600, "start": 7063.0, "end": 7065.0, "text": " So predicted production is on the y-axis", "tokens": [51714, 407, 19147, 4265, 307, 322, 264, 288, 12, 24633, 51814], "temperature": 0.0, "avg_logprob": -0.12799884766105593, "compression_ratio": 1.9608695652173913, "no_speech_prob": 0.032568760216236115}, {"id": 1632, "seek": 706500, "start": 7065.0, "end": 7067.0, "text": " and the actual production is along the x-axis.", "tokens": [50364, 293, 264, 3539, 4265, 307, 2051, 264, 2031, 12, 24633, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1633, "seek": 706500, "start": 7067.0, "end": 7070.0, "text": " So perfectly calibrated and perfectly predictive thing.", "tokens": [50464, 407, 6239, 21583, 5468, 293, 6239, 35521, 551, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1634, "seek": 706500, "start": 7070.0, "end": 7074.0, "text": " Everything would line along this one to one ratio line here.", "tokens": [50614, 5471, 576, 1622, 2051, 341, 472, 281, 472, 8509, 1622, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1635, "seek": 706500, "start": 7074.0, "end": 7075.0, "text": " We see that there's some scatter around it,", "tokens": [50814, 492, 536, 300, 456, 311, 512, 34951, 926, 309, 11, 50864], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1636, "seek": 706500, "start": 7075.0, "end": 7078.0, "text": " but actually it looks like it's a pretty good overall predictor", "tokens": [50864, 457, 767, 309, 1542, 411, 309, 311, 257, 1238, 665, 4787, 6069, 284, 51014], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1637, "seek": 706500, "start": 7078.0, "end": 7080.0, "text": " of the actual production.", "tokens": [51014, 295, 264, 3539, 4265, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1638, "seek": 706500, "start": 7080.0, "end": 7082.0, "text": " We'd like to actually see how good is this fit", "tokens": [51114, 492, 1116, 411, 281, 767, 536, 577, 665, 307, 341, 3318, 51214], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1639, "seek": 706500, "start": 7082.0, "end": 7083.0, "text": " rather than just look at the plot and say,", "tokens": [51214, 2831, 813, 445, 574, 412, 264, 7542, 293, 584, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1640, "seek": 706500, "start": 7083.0, "end": 7084.0, "text": " oh, it looks pretty good.", "tokens": [51264, 1954, 11, 309, 1542, 1238, 665, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1641, "seek": 706500, "start": 7084.0, "end": 7088.0, "text": " So let's import a few of the test metrics that we can actually look at.", "tokens": [51314, 407, 718, 311, 974, 257, 1326, 295, 264, 1500, 16367, 300, 321, 393, 767, 574, 412, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1642, "seek": 706500, "start": 7088.0, "end": 7092.0, "text": " So we can say we can import explained variance score,", "tokens": [51514, 407, 321, 393, 584, 321, 393, 974, 8825, 21977, 6175, 11, 51714], "temperature": 0.0, "avg_logprob": -0.10611393792288644, "compression_ratio": 1.897887323943662, "no_speech_prob": 0.010010945610702038}, {"id": 1643, "seek": 709200, "start": 7092.0, "end": 7095.0, "text": " the R2 scored, and the mean squared error.", "tokens": [50364, 264, 497, 17, 18139, 11, 293, 264, 914, 8889, 6713, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1644, "seek": 709200, "start": 7095.0, "end": 7097.0, "text": " So the way these functions work,", "tokens": [50514, 407, 264, 636, 613, 6828, 589, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1645, "seek": 709200, "start": 7097.0, "end": 7101.0, "text": " they always take in the true and then they take in the predicted.", "tokens": [50614, 436, 1009, 747, 294, 264, 2074, 293, 550, 436, 747, 294, 264, 19147, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1646, "seek": 709200, "start": 7101.0, "end": 7103.0, "text": " So this is going to be test target", "tokens": [50814, 407, 341, 307, 516, 281, 312, 1500, 3779, 50914], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1647, "seek": 709200, "start": 7103.0, "end": 7105.0, "text": " and then the predicted test target.", "tokens": [50914, 293, 550, 264, 19147, 1500, 3779, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1648, "seek": 709200, "start": 7105.0, "end": 7109.0, "text": " And actually I think this way of writing it is a little bit too verbose.", "tokens": [51014, 400, 767, 286, 519, 341, 636, 295, 3579, 309, 307, 257, 707, 857, 886, 9595, 541, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1649, "seek": 709200, "start": 7109.0, "end": 7112.0, "text": " So I'm going to call it predicted equals this.", "tokens": [51214, 407, 286, 478, 516, 281, 818, 309, 19147, 6915, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1650, "seek": 709200, "start": 7112.0, "end": 7115.0, "text": " And I'm going to say predicted here.", "tokens": [51364, 400, 286, 478, 516, 281, 584, 19147, 510, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1651, "seek": 709200, "start": 7115.0, "end": 7118.0, "text": " So the R squared score is 0.88.", "tokens": [51514, 407, 264, 497, 8889, 6175, 307, 1958, 13, 16919, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08152295832048383, "compression_ratio": 1.847926267281106, "no_speech_prob": 0.019713032990694046}, {"id": 1652, "seek": 711800, "start": 7118.0, "end": 7122.0, "text": " Explained variance score is 0.88 as well.", "tokens": [50364, 12514, 3563, 21977, 6175, 307, 1958, 13, 16919, 382, 731, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1653, "seek": 711800, "start": 7122.0, "end": 7125.0, "text": " The mean squared error is 0.54.", "tokens": [50564, 440, 914, 8889, 6713, 307, 1958, 13, 19563, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1654, "seek": 711800, "start": 7125.0, "end": 7127.0, "text": " And now because this is a random forest,", "tokens": [50714, 400, 586, 570, 341, 307, 257, 4974, 6719, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1655, "seek": 711800, "start": 7127.0, "end": 7130.0, "text": " we actually have the feature importance of the model.", "tokens": [50814, 321, 767, 362, 264, 4111, 7379, 295, 264, 2316, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1656, "seek": 711800, "start": 7130.0, "end": 7134.0, "text": " And I don't know of a good way that's naturally given by scikit-learn", "tokens": [50964, 400, 286, 500, 380, 458, 295, 257, 665, 636, 300, 311, 8195, 2212, 538, 2180, 22681, 12, 306, 1083, 51164], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1657, "seek": 711800, "start": 7134.0, "end": 7135.0, "text": " to actually report this,", "tokens": [51164, 281, 767, 2275, 341, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1658, "seek": 711800, "start": 7135.0, "end": 7137.0, "text": " but here's a little bit of code that I have written to make it", "tokens": [51214, 457, 510, 311, 257, 707, 857, 295, 3089, 300, 286, 362, 3720, 281, 652, 309, 51314], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1659, "seek": 711800, "start": 7137.0, "end": 7140.0, "text": " so that I can actually read this in a way that I actually think is useful.", "tokens": [51314, 370, 300, 286, 393, 767, 1401, 341, 294, 257, 636, 300, 286, 767, 519, 307, 4420, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1660, "seek": 711800, "start": 7140.0, "end": 7142.0, "text": " So I'm going to create a new pandas data frame", "tokens": [51464, 407, 286, 478, 516, 281, 1884, 257, 777, 4565, 296, 1412, 3920, 51564], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1661, "seek": 711800, "start": 7142.0, "end": 7144.0, "text": " called rf underscore importances,", "tokens": [51564, 1219, 367, 69, 37556, 974, 2676, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09085338957169477, "compression_ratio": 1.6620689655172414, "no_speech_prob": 0.004330857656896114}, {"id": 1662, "seek": 714400, "start": 7144.0, "end": 7149.0, "text": " which actually takes out the features and the importances from the fit model.", "tokens": [50364, 597, 767, 2516, 484, 264, 4122, 293, 264, 974, 2676, 490, 264, 3318, 2316, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1663, "seek": 714400, "start": 7149.0, "end": 7152.0, "text": " And I'm going to look at that at the top 20 here.", "tokens": [50614, 400, 286, 478, 516, 281, 574, 412, 300, 412, 264, 1192, 945, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1664, "seek": 714400, "start": 7152.0, "end": 7156.0, "text": " All of the importances of every variable we give it to in total adds up to one.", "tokens": [50764, 1057, 295, 264, 974, 2676, 295, 633, 7006, 321, 976, 309, 281, 294, 3217, 10860, 493, 281, 472, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1665, "seek": 714400, "start": 7156.0, "end": 7159.0, "text": " So we can think of this as fractional importance", "tokens": [50964, 407, 321, 393, 519, 295, 341, 382, 17948, 1966, 7379, 51114], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1666, "seek": 714400, "start": 7159.0, "end": 7161.0, "text": " in terms of what the random forest has decided", "tokens": [51114, 294, 2115, 295, 437, 264, 4974, 6719, 575, 3047, 51214], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1667, "seek": 714400, "start": 7161.0, "end": 7165.0, "text": " is going to be discriminative in giving us a final regression score.", "tokens": [51214, 307, 516, 281, 312, 20828, 1166, 294, 2902, 505, 257, 2572, 24590, 6175, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1668, "seek": 714400, "start": 7165.0, "end": 7168.0, "text": " So of utmost importance is the labor hours", "tokens": [51414, 407, 295, 42777, 7379, 307, 264, 5938, 2496, 51564], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1669, "seek": 714400, "start": 7168.0, "end": 7170.0, "text": " and then average employees is down from there.", "tokens": [51564, 293, 550, 4274, 6619, 307, 760, 490, 456, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1670, "seek": 714400, "start": 7170.0, "end": 7173.0, "text": " The mine type being surface is predictive.", "tokens": [51664, 440, 3892, 2010, 885, 3753, 307, 35521, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07973210016886394, "compression_ratio": 1.759581881533101, "no_speech_prob": 0.006900875363498926}, {"id": 1671, "seek": 717300, "start": 7173.0, "end": 7175.0, "text": " The mine county being campel", "tokens": [50364, 440, 3892, 9928, 885, 2255, 338, 50464], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1672, "seek": 717300, "start": 7175.0, "end": 7179.0, "text": " and coal supply region powder river basin is apparently moderately predictive.", "tokens": [50464, 293, 10209, 5847, 4458, 6341, 6810, 34863, 307, 7970, 10494, 1592, 35521, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1673, "seek": 717300, "start": 7179.0, "end": 7181.0, "text": " And then it goes down from there.", "tokens": [50664, 400, 550, 309, 1709, 760, 490, 456, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1674, "seek": 717300, "start": 7181.0, "end": 7182.0, "text": " So this is just the first 20.", "tokens": [50764, 407, 341, 307, 445, 264, 700, 945, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1675, "seek": 717300, "start": 7182.0, "end": 7186.0, "text": " And we have not only a final fit with a nice plot,", "tokens": [50814, 400, 321, 362, 406, 787, 257, 2572, 3318, 365, 257, 1481, 7542, 11, 51014], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1676, "seek": 717300, "start": 7186.0, "end": 7188.0, "text": " we also have some diagnostics and metrics,", "tokens": [51014, 321, 611, 362, 512, 43215, 1167, 293, 16367, 11, 51114], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1677, "seek": 717300, "start": 7188.0, "end": 7191.0, "text": " as well as a list of what's important.", "tokens": [51114, 382, 731, 382, 257, 1329, 295, 437, 311, 1021, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1678, "seek": 717300, "start": 7193.0, "end": 7194.0, "text": " In this video,", "tokens": [51364, 682, 341, 960, 11, 51414], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1679, "seek": 717300, "start": 7194.0, "end": 7198.0, "text": " I'll be showing you how to take a development lab notebook", "tokens": [51414, 286, 603, 312, 4099, 291, 577, 281, 747, 257, 3250, 2715, 21060, 51614], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1680, "seek": 717300, "start": 7198.0, "end": 7201.0, "text": " and turn it into a deliverable notebook.", "tokens": [51614, 293, 1261, 309, 666, 257, 4239, 712, 21060, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11409107007478413, "compression_ratio": 1.5692883895131087, "no_speech_prob": 0.0009545946377329528}, {"id": 1681, "seek": 720100, "start": 7201.0, "end": 7206.0, "text": " So let's go into our directory and we go to the develop folder.", "tokens": [50364, 407, 718, 311, 352, 666, 527, 21120, 293, 321, 352, 281, 264, 1499, 10820, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1682, "seek": 720100, "start": 7206.0, "end": 7208.0, "text": " Clicking that we navigate into that folder", "tokens": [50614, 8230, 278, 300, 321, 12350, 666, 300, 10820, 50714], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1683, "seek": 720100, "start": 7208.0, "end": 7210.0, "text": " and we see we had our first look notebook", "tokens": [50714, 293, 321, 536, 321, 632, 527, 700, 574, 21060, 50814], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1684, "seek": 720100, "start": 7210.0, "end": 7212.0, "text": " and then this coal prediction notebook.", "tokens": [50814, 293, 550, 341, 10209, 17630, 21060, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1685, "seek": 720100, "start": 7212.0, "end": 7215.0, "text": " And what we'd like to do is make a copy of this notebook.", "tokens": [50914, 400, 437, 321, 1116, 411, 281, 360, 307, 652, 257, 5055, 295, 341, 21060, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1686, "seek": 720100, "start": 7215.0, "end": 7219.0, "text": " So you can select it by clicking this checkbox here", "tokens": [51064, 407, 291, 393, 3048, 309, 538, 9697, 341, 1520, 4995, 510, 51264], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1687, "seek": 720100, "start": 7219.0, "end": 7221.0, "text": " and clicking duplicate.", "tokens": [51264, 293, 9697, 23976, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1688, "seek": 720100, "start": 7221.0, "end": 7224.0, "text": " When we do that, we have a second copy of this,", "tokens": [51364, 1133, 321, 360, 300, 11, 321, 362, 257, 1150, 5055, 295, 341, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1689, "seek": 720100, "start": 7224.0, "end": 7227.0, "text": " which is added to the end of the name copy one.", "tokens": [51514, 597, 307, 3869, 281, 264, 917, 295, 264, 1315, 5055, 472, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07982806155556127, "compression_ratio": 1.771186440677966, "no_speech_prob": 0.0021153734996914864}, {"id": 1690, "seek": 722700, "start": 7227.0, "end": 7231.0, "text": " Now this file should exist in this directory and we see it here.", "tokens": [50364, 823, 341, 3991, 820, 2514, 294, 341, 21120, 293, 321, 536, 309, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1691, "seek": 722700, "start": 7231.0, "end": 7232.0, "text": " Copy one.", "tokens": [50564, 25653, 472, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1692, "seek": 722700, "start": 7232.0, "end": 7234.0, "text": " Because it's going to be a deliverable notebook,", "tokens": [50614, 1436, 309, 311, 516, 281, 312, 257, 4239, 712, 21060, 11, 50714], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1693, "seek": 722700, "start": 7234.0, "end": 7237.0, "text": " we should actually move this into the delivery folder.", "tokens": [50714, 321, 820, 767, 1286, 341, 666, 264, 8982, 10820, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1694, "seek": 722700, "start": 7237.0, "end": 7244.0, "text": " So let's move 2015 coal predict copy into the deliver directory.", "tokens": [50864, 407, 718, 311, 1286, 7546, 10209, 6069, 5055, 666, 264, 4239, 21120, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1695, "seek": 722700, "start": 7244.0, "end": 7246.0, "text": " Go over to the deliver directory", "tokens": [51214, 1037, 670, 281, 264, 4239, 21120, 51314], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1696, "seek": 722700, "start": 7246.0, "end": 7250.0, "text": " and let's navigate there with the notebook server itself.", "tokens": [51314, 293, 718, 311, 12350, 456, 365, 264, 21060, 7154, 2564, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1697, "seek": 722700, "start": 7250.0, "end": 7252.0, "text": " Let's open this up.", "tokens": [51514, 961, 311, 1269, 341, 493, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1698, "seek": 722700, "start": 7252.0, "end": 7254.0, "text": " Okay, so let's first give this a title", "tokens": [51614, 1033, 11, 370, 718, 311, 700, 976, 341, 257, 4876, 51714], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1699, "seek": 722700, "start": 7254.0, "end": 7256.0, "text": " that we think is an appropriate title.", "tokens": [51714, 300, 321, 519, 307, 364, 6854, 4876, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10283952846861723, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.0012841869611293077}, {"id": 1700, "seek": 725600, "start": 7256.0, "end": 7258.0, "text": " And because it's going to be a deliverable notebook,", "tokens": [50364, 400, 570, 309, 311, 516, 281, 312, 257, 4239, 712, 21060, 11, 50464], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1701, "seek": 725600, "start": 7258.0, "end": 7260.0, "text": " it shouldn't start with a date.", "tokens": [50464, 309, 4659, 380, 722, 365, 257, 4002, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1702, "seek": 725600, "start": 7260.0, "end": 7266.0, "text": " So it should start with something like coal prediction of production.", "tokens": [50564, 407, 309, 820, 722, 365, 746, 411, 10209, 17630, 295, 4265, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1703, "seek": 725600, "start": 7266.0, "end": 7268.0, "text": " So we have a new name for this.", "tokens": [50864, 407, 321, 362, 257, 777, 1315, 337, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1704, "seek": 725600, "start": 7268.0, "end": 7271.0, "text": " You can save this and I'm going to toggle that header bar.", "tokens": [50964, 509, 393, 3155, 341, 293, 286, 478, 516, 281, 31225, 300, 23117, 2159, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1705, "seek": 725600, "start": 7271.0, "end": 7273.0, "text": " So I have a little bit more space", "tokens": [51114, 407, 286, 362, 257, 707, 857, 544, 1901, 51214], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1706, "seek": 725600, "start": 7273.0, "end": 7276.0, "text": " and I'm going to toggle this toolbar as well", "tokens": [51214, 293, 286, 478, 516, 281, 31225, 341, 47715, 382, 731, 51364], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1707, "seek": 725600, "start": 7276.0, "end": 7279.0, "text": " because I'll mostly be using keyboard shortcuts.", "tokens": [51364, 570, 286, 603, 5240, 312, 1228, 10186, 34620, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1708, "seek": 725600, "start": 7279.0, "end": 7283.0, "text": " So at this stage, we have this long notebook that went through", "tokens": [51514, 407, 412, 341, 3233, 11, 321, 362, 341, 938, 21060, 300, 1437, 807, 51714], "temperature": 0.0, "avg_logprob": -0.05396249190620754, "compression_ratio": 1.7868852459016393, "no_speech_prob": 0.00757397897541523}, {"id": 1709, "seek": 728300, "start": 7283.0, "end": 7286.0, "text": " and it's a complete copy of our lab notebook style.", "tokens": [50364, 293, 309, 311, 257, 3566, 5055, 295, 527, 2715, 21060, 3758, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1710, "seek": 728300, "start": 7286.0, "end": 7289.0, "text": " So we can delete things here pretty freely", "tokens": [50514, 407, 321, 393, 12097, 721, 510, 1238, 16433, 50664], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1711, "seek": 728300, "start": 7289.0, "end": 7292.0, "text": " and just focus on the main story that you'd like to tell", "tokens": [50664, 293, 445, 1879, 322, 264, 2135, 1657, 300, 291, 1116, 411, 281, 980, 50814], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1712, "seek": 728300, "start": 7292.0, "end": 7294.0, "text": " to either your teammates or your manager", "tokens": [50814, 281, 2139, 428, 20461, 420, 428, 6598, 50914], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1713, "seek": 728300, "start": 7294.0, "end": 7296.0, "text": " or whoever is going to be consuming this.", "tokens": [50914, 420, 11387, 307, 516, 281, 312, 19867, 341, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1714, "seek": 728300, "start": 7296.0, "end": 7299.0, "text": " So keep in mind with your audience what you think they would like to see", "tokens": [51014, 407, 1066, 294, 1575, 365, 428, 4034, 437, 291, 519, 436, 576, 411, 281, 536, 51164], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1715, "seek": 728300, "start": 7299.0, "end": 7301.0, "text": " and cut out the extraneous stuff", "tokens": [51164, 293, 1723, 484, 264, 16455, 15447, 1507, 51264], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1716, "seek": 728300, "start": 7301.0, "end": 7303.0, "text": " and adding in as much text as you think is useful.", "tokens": [51264, 293, 5127, 294, 382, 709, 2487, 382, 291, 519, 307, 4420, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1717, "seek": 728300, "start": 7303.0, "end": 7305.0, "text": " And in that keyboard shortcuts,", "tokens": [51364, 400, 294, 300, 10186, 34620, 11, 51464], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1718, "seek": 728300, "start": 7305.0, "end": 7308.0, "text": " especially are going to be make your life a lot easier", "tokens": [51464, 2318, 366, 516, 281, 312, 652, 428, 993, 257, 688, 3571, 51614], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1719, "seek": 728300, "start": 7308.0, "end": 7310.0, "text": " and make this whole process really fast.", "tokens": [51614, 293, 652, 341, 1379, 1399, 534, 2370, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06530158447496819, "compression_ratio": 1.73, "no_speech_prob": 0.029286909848451614}, {"id": 1720, "seek": 731000, "start": 7310.0, "end": 7312.0, "text": " All right, so let's just go through this.", "tokens": [50364, 1057, 558, 11, 370, 718, 311, 445, 352, 807, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1721, "seek": 731000, "start": 7312.0, "end": 7315.0, "text": " And initially what I'd like to do is give a good title", "tokens": [50464, 400, 9105, 437, 286, 1116, 411, 281, 360, 307, 976, 257, 665, 4876, 50614], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1722, "seek": 731000, "start": 7315.0, "end": 7320.0, "text": " and you can just call it coal production in mines 2013, let's say.", "tokens": [50614, 293, 291, 393, 445, 818, 309, 10209, 4265, 294, 25398, 9012, 11, 718, 311, 584, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1723, "seek": 731000, "start": 7320.0, "end": 7323.0, "text": " And so we have our first setup here", "tokens": [50864, 400, 370, 321, 362, 527, 700, 8657, 510, 51014], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1724, "seek": 731000, "start": 7323.0, "end": 7325.0, "text": " and you can also give a little abstracts.", "tokens": [51014, 293, 291, 393, 611, 976, 257, 707, 12649, 82, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1725, "seek": 731000, "start": 7325.0, "end": 7327.0, "text": " You can say we did a lot of analysis,", "tokens": [51114, 509, 393, 584, 321, 630, 257, 688, 295, 5215, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1726, "seek": 731000, "start": 7327.0, "end": 7329.0, "text": " came to some interesting conclusions.", "tokens": [51214, 1361, 281, 512, 1880, 22865, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1727, "seek": 731000, "start": 7329.0, "end": 7333.0, "text": " Now, of course, fill that out with more verbiage as you see fit.", "tokens": [51314, 823, 11, 295, 1164, 11, 2836, 300, 484, 365, 544, 1306, 5614, 609, 382, 291, 536, 3318, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1728, "seek": 731000, "start": 7333.0, "end": 7335.0, "text": " Keeping the code in this notebook is useful", "tokens": [51514, 30187, 264, 3089, 294, 341, 21060, 307, 4420, 51614], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1729, "seek": 731000, "start": 7335.0, "end": 7337.0, "text": " so that someone else looking down the road", "tokens": [51614, 370, 300, 1580, 1646, 1237, 760, 264, 3060, 51714], "temperature": 0.0, "avg_logprob": -0.1210492941049429, "compression_ratio": 1.6398601398601398, "no_speech_prob": 0.002888990333303809}, {"id": 1730, "seek": 733700, "start": 7337.0, "end": 7339.0, "text": " can actually reproduce all the key results", "tokens": [50364, 393, 767, 29501, 439, 264, 2141, 3542, 50464], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1731, "seek": 733700, "start": 7339.0, "end": 7341.0, "text": " that you think you can find.", "tokens": [50464, 300, 291, 519, 291, 393, 915, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1732, "seek": 733700, "start": 7341.0, "end": 7343.0, "text": " Now, this isn't always possible, but as far as it is possible,", "tokens": [50564, 823, 11, 341, 1943, 380, 1009, 1944, 11, 457, 382, 1400, 382, 309, 307, 1944, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1733, "seek": 733700, "start": 7343.0, "end": 7345.0, "text": " I recommend trying to do it.", "tokens": [50664, 286, 2748, 1382, 281, 360, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1734, "seek": 733700, "start": 7345.0, "end": 7347.0, "text": " So try to keep the imports neat and tidy.", "tokens": [50764, 407, 853, 281, 1066, 264, 41596, 10654, 293, 34646, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1735, "seek": 733700, "start": 7347.0, "end": 7349.0, "text": " Keep only the imports that are required", "tokens": [50864, 5527, 787, 264, 41596, 300, 366, 4739, 50964], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1736, "seek": 733700, "start": 7349.0, "end": 7351.0, "text": " and remove the ones that are extraneous.", "tokens": [50964, 293, 4159, 264, 2306, 300, 366, 16455, 15447, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1737, "seek": 733700, "start": 7351.0, "end": 7353.0, "text": " I think we actually use all of these.", "tokens": [51064, 286, 519, 321, 767, 764, 439, 295, 613, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1738, "seek": 733700, "start": 7353.0, "end": 7355.0, "text": " I would recommend keeping these magic imports", "tokens": [51164, 286, 576, 2748, 5145, 613, 5585, 41596, 51264], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1739, "seek": 733700, "start": 7355.0, "end": 7357.0, "text": " on their own line at the top.", "tokens": [51264, 322, 641, 1065, 1622, 412, 264, 1192, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1740, "seek": 733700, "start": 7357.0, "end": 7360.0, "text": " So having matplotlib inline at the top, that is good.", "tokens": [51364, 407, 1419, 3803, 564, 310, 38270, 294, 1889, 412, 264, 1192, 11, 300, 307, 665, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1741, "seek": 733700, "start": 7360.0, "end": 7362.0, "text": " Put a space between that.", "tokens": [51514, 4935, 257, 1901, 1296, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1742, "seek": 733700, "start": 7362.0, "end": 7364.0, "text": " The Pepe convention is to have one of the standard libraries,", "tokens": [51614, 440, 2396, 494, 10286, 307, 281, 362, 472, 295, 264, 3832, 15148, 11, 51714], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1743, "seek": 733700, "start": 7364.0, "end": 7366.0, "text": " like import string, let's say.", "tokens": [51714, 411, 974, 6798, 11, 718, 311, 584, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07605526447296143, "compression_ratio": 1.8132911392405062, "no_speech_prob": 0.014058980159461498}, {"id": 1744, "seek": 736600, "start": 7366.0, "end": 7368.0, "text": " That would be next and any of the other ones here,", "tokens": [50364, 663, 576, 312, 958, 293, 604, 295, 264, 661, 2306, 510, 11, 50464], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1745, "seek": 736600, "start": 7368.0, "end": 7371.0, "text": " and then another blank line before third-party libraries,", "tokens": [50464, 293, 550, 1071, 8247, 1622, 949, 2636, 12, 23409, 15148, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1746, "seek": 736600, "start": 7371.0, "end": 7373.0, "text": " which is what these are.", "tokens": [50614, 597, 307, 437, 613, 366, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1747, "seek": 736600, "start": 7373.0, "end": 7376.0, "text": " And finally, we have an actual plotting change", "tokens": [50714, 400, 2721, 11, 321, 362, 364, 3539, 41178, 1319, 50864], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1748, "seek": 736600, "start": 7376.0, "end": 7379.0, "text": " that we make with this SNS command here.", "tokens": [50864, 300, 321, 652, 365, 341, 13955, 50, 5622, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1749, "seek": 736600, "start": 7379.0, "end": 7382.0, "text": " So we execute that cell and make sure everything is making sense.", "tokens": [51014, 407, 321, 14483, 300, 2815, 293, 652, 988, 1203, 307, 1455, 2020, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1750, "seek": 736600, "start": 7382.0, "end": 7384.0, "text": " Yes, we see this warning, we've seen this before,", "tokens": [51164, 1079, 11, 321, 536, 341, 9164, 11, 321, 600, 1612, 341, 949, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1751, "seek": 736600, "start": 7384.0, "end": 7386.0, "text": " so we're not too worried about it.", "tokens": [51264, 370, 321, 434, 406, 886, 5804, 466, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1752, "seek": 736600, "start": 7386.0, "end": 7388.0, "text": " Now, from here on out, we should be making decisions", "tokens": [51364, 823, 11, 490, 510, 322, 484, 11, 321, 820, 312, 1455, 5327, 51464], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1753, "seek": 736600, "start": 7388.0, "end": 7390.0, "text": " about whether this actually improves the story", "tokens": [51464, 466, 1968, 341, 767, 24771, 264, 1657, 51564], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1754, "seek": 736600, "start": 7390.0, "end": 7393.0, "text": " for the person reading this or if it becomes just tedious.", "tokens": [51564, 337, 264, 954, 3760, 341, 420, 498, 309, 3643, 445, 38284, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07845716200013092, "compression_ratio": 1.707395498392283, "no_speech_prob": 0.0053820922039449215}, {"id": 1755, "seek": 739300, "start": 7393.0, "end": 7396.0, "text": " And when you have data that's being imported", "tokens": [50364, 400, 562, 291, 362, 1412, 300, 311, 885, 25524, 50514], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1756, "seek": 739300, "start": 7396.0, "end": 7398.0, "text": " and it's changed from the raw data,", "tokens": [50514, 293, 309, 311, 3105, 490, 264, 8936, 1412, 11, 50614], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1757, "seek": 739300, "start": 7398.0, "end": 7400.0, "text": " there's this clean data set here.", "tokens": [50614, 456, 311, 341, 2541, 1412, 992, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1758, "seek": 739300, "start": 7400.0, "end": 7403.0, "text": " I think it needs to have some extra commentary around it", "tokens": [50714, 286, 519, 309, 2203, 281, 362, 512, 2857, 23527, 926, 309, 50864], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1759, "seek": 739300, "start": 7403.0, "end": 7405.0, "text": " so that people know what's going on.", "tokens": [50864, 370, 300, 561, 458, 437, 311, 516, 322, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1760, "seek": 739300, "start": 7405.0, "end": 7407.0, "text": " So I might say...", "tokens": [50964, 407, 286, 1062, 584, 485, 51064], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1761, "seek": 739300, "start": 7410.0, "end": 7412.0, "text": " I might give it a description about where exactly it is", "tokens": [51214, 286, 1062, 976, 309, 257, 3855, 466, 689, 2293, 309, 307, 51314], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1762, "seek": 739300, "start": 7412.0, "end": 7415.0, "text": " in this repo, and let's just type an ls here.", "tokens": [51314, 294, 341, 49040, 11, 293, 718, 311, 445, 2010, 364, 287, 82, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1763, "seek": 739300, "start": 7415.0, "end": 7418.0, "text": " The name of the notebook is data underscore cleaning.", "tokens": [51464, 440, 1315, 295, 264, 21060, 307, 1412, 37556, 8924, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1764, "seek": 739300, "start": 7418.0, "end": 7421.0, "text": " So we will say the same thing.", "tokens": [51614, 407, 321, 486, 584, 264, 912, 551, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09039868979618468, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.032077983021736145}, {"id": 1765, "seek": 742100, "start": 7421.0, "end": 7424.0, "text": " Double click, drag over, command C to copy that,", "tokens": [50364, 16633, 2052, 11, 5286, 670, 11, 5622, 383, 281, 5055, 300, 11, 50514], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1766, "seek": 742100, "start": 7424.0, "end": 7426.0, "text": " command V to paste.", "tokens": [50514, 5622, 691, 281, 9163, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1767, "seek": 742100, "start": 7426.0, "end": 7429.0, "text": " And this ls command, which is handy, we can be deleted.", "tokens": [50614, 400, 341, 287, 82, 5622, 11, 597, 307, 13239, 11, 321, 393, 312, 22981, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1768, "seek": 742100, "start": 7429.0, "end": 7432.0, "text": " So typing escape to get out of the insert mode", "tokens": [50764, 407, 18444, 7615, 281, 483, 484, 295, 264, 8969, 4391, 50914], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1769, "seek": 742100, "start": 7432.0, "end": 7435.0, "text": " so that the cell is now surrounded by a gray box.", "tokens": [50914, 370, 300, 264, 2815, 307, 586, 13221, 538, 257, 10855, 2424, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1770, "seek": 742100, "start": 7435.0, "end": 7438.0, "text": " And then typing D twice, it deletes that cell.", "tokens": [51064, 400, 550, 18444, 413, 6091, 11, 309, 1103, 37996, 300, 2815, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1771, "seek": 742100, "start": 7438.0, "end": 7441.0, "text": " And in this cell, we are starting to write some markdown.", "tokens": [51214, 400, 294, 341, 2815, 11, 321, 366, 2891, 281, 2464, 512, 1491, 5093, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1772, "seek": 742100, "start": 7441.0, "end": 7443.0, "text": " We can tell it's markdown because it's just a text", "tokens": [51364, 492, 393, 980, 309, 311, 1491, 5093, 570, 309, 311, 445, 257, 2487, 51464], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1773, "seek": 742100, "start": 7443.0, "end": 7445.0, "text": " for people to look at.", "tokens": [51464, 337, 561, 281, 574, 412, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1774, "seek": 742100, "start": 7445.0, "end": 7447.0, "text": " But also, we've put a double header marking too.", "tokens": [51564, 583, 611, 11, 321, 600, 829, 257, 3834, 23117, 25482, 886, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1775, "seek": 742100, "start": 7447.0, "end": 7450.0, "text": " So let's just change this cell type to be markdown.", "tokens": [51664, 407, 718, 311, 445, 1319, 341, 2815, 2010, 281, 312, 1491, 5093, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11232882577019769, "compression_ratio": 1.7765957446808511, "no_speech_prob": 0.015659157186746597}, {"id": 1776, "seek": 745000, "start": 7450.0, "end": 7452.0, "text": " So we're currently in a code cell.", "tokens": [50364, 407, 321, 434, 4362, 294, 257, 3089, 2815, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1777, "seek": 745000, "start": 7452.0, "end": 7454.0, "text": " We can change it to be markdown by typing M.", "tokens": [50464, 492, 393, 1319, 309, 281, 312, 1491, 5093, 538, 18444, 376, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1778, "seek": 745000, "start": 7454.0, "end": 7457.0, "text": " And as soon as you type M, it switches into markdown", "tokens": [50564, 400, 382, 2321, 382, 291, 2010, 376, 11, 309, 19458, 666, 1491, 5093, 50714], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1779, "seek": 745000, "start": 7457.0, "end": 7459.0, "text": " and gives you a preview of what this will look like", "tokens": [50714, 293, 2709, 291, 257, 14281, 295, 437, 341, 486, 574, 411, 50814], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1780, "seek": 745000, "start": 7459.0, "end": 7460.0, "text": " when you render it.", "tokens": [50814, 562, 291, 15529, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1781, "seek": 745000, "start": 7460.0, "end": 7462.0, "text": " So let's render it real fast, shift, enter.", "tokens": [50864, 407, 718, 311, 15529, 309, 957, 2370, 11, 5513, 11, 3242, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1782, "seek": 745000, "start": 7462.0, "end": 7464.0, "text": " And we see that this is indeed bolded.", "tokens": [50964, 400, 321, 536, 300, 341, 307, 6451, 11928, 292, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1783, "seek": 745000, "start": 7464.0, "end": 7467.0, "text": " This two pound signs, or hash signs,", "tokens": [51064, 639, 732, 12013, 7880, 11, 420, 22019, 7880, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1784, "seek": 745000, "start": 7467.0, "end": 7469.0, "text": " means it's a H2 heading.", "tokens": [51214, 1355, 309, 311, 257, 389, 17, 9864, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1785, "seek": 745000, "start": 7469.0, "end": 7472.0, "text": " So this is H1, this is H2,", "tokens": [51314, 407, 341, 307, 389, 16, 11, 341, 307, 389, 17, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1786, "seek": 745000, "start": 7472.0, "end": 7475.0, "text": " and it keeps getting smaller as you go down.", "tokens": [51464, 293, 309, 5965, 1242, 4356, 382, 291, 352, 760, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1787, "seek": 745000, "start": 7475.0, "end": 7477.0, "text": " So in this case, I think clean data just deserves", "tokens": [51614, 407, 294, 341, 1389, 11, 286, 519, 2541, 1412, 445, 17037, 51714], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1788, "seek": 745000, "start": 7477.0, "end": 7479.0, "text": " a second level heading.", "tokens": [51714, 257, 1150, 1496, 9864, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09586082805286754, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0011693910928443074}, {"id": 1789, "seek": 747900, "start": 7479.0, "end": 7481.0, "text": " We said we clean this data in the notebook stored in this.", "tokens": [50364, 492, 848, 321, 2541, 341, 1412, 294, 264, 21060, 12187, 294, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1790, "seek": 747900, "start": 7481.0, "end": 7484.0, "text": " So deliver slash data cleaning IPYB.", "tokens": [50464, 407, 4239, 17330, 1412, 8924, 8671, 56, 33, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1791, "seek": 747900, "start": 7484.0, "end": 7486.0, "text": " So we've told people where this cleaned data file", "tokens": [50614, 407, 321, 600, 1907, 561, 689, 341, 16146, 1412, 3991, 50714], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1792, "seek": 747900, "start": 7486.0, "end": 7488.0, "text": " actually sits.", "tokens": [50714, 767, 12696, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1793, "seek": 747900, "start": 7488.0, "end": 7491.0, "text": " And we actually know the exact steps that went through", "tokens": [50814, 400, 321, 767, 458, 264, 1900, 4439, 300, 1437, 807, 50964], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1794, "seek": 747900, "start": 7491.0, "end": 7493.0, "text": " to take it from the raw data into this cleaned data,", "tokens": [50964, 281, 747, 309, 490, 264, 8936, 1412, 666, 341, 16146, 1412, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1795, "seek": 747900, "start": 7493.0, "end": 7495.0, "text": " which we've pointed to here.", "tokens": [51064, 597, 321, 600, 10932, 281, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1796, "seek": 747900, "start": 7495.0, "end": 7498.0, "text": " This head is actually quite a bit of text,", "tokens": [51164, 639, 1378, 307, 767, 1596, 257, 857, 295, 2487, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1797, "seek": 747900, "start": 7498.0, "end": 7500.0, "text": " even though it should be the top five lines.", "tokens": [51314, 754, 1673, 309, 820, 312, 264, 1192, 1732, 3876, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1798, "seek": 747900, "start": 7500.0, "end": 7503.0, "text": " So if we're going to include something here to make sure", "tokens": [51414, 407, 498, 321, 434, 516, 281, 4090, 746, 510, 281, 652, 988, 51564], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1799, "seek": 747900, "start": 7503.0, "end": 7505.0, "text": " that the data is read in correctly,", "tokens": [51564, 300, 264, 1412, 307, 1401, 294, 8944, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1800, "seek": 747900, "start": 7505.0, "end": 7508.0, "text": " we might select a few columns that we think are useful.", "tokens": [51664, 321, 1062, 3048, 257, 1326, 13766, 300, 321, 519, 366, 4420, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10726126818589761, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.0015484909527003765}, {"id": 1801, "seek": 750800, "start": 7508.0, "end": 7513.0, "text": " So in this case, maybe we have year and maybe mine name.", "tokens": [50364, 407, 294, 341, 1389, 11, 1310, 321, 362, 1064, 293, 1310, 3892, 1315, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1802, "seek": 750800, "start": 7513.0, "end": 7516.0, "text": " And so we read in just the heading with those two columns.", "tokens": [50614, 400, 370, 321, 1401, 294, 445, 264, 9864, 365, 729, 732, 13766, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1803, "seek": 750800, "start": 7516.0, "end": 7519.0, "text": " Okay, just to give people a flavor of what's in that data frame.", "tokens": [50764, 1033, 11, 445, 281, 976, 561, 257, 6813, 295, 437, 311, 294, 300, 1412, 3920, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1804, "seek": 750800, "start": 7519.0, "end": 7521.0, "text": " This length we don't need to worry about.", "tokens": [50914, 639, 4641, 321, 500, 380, 643, 281, 3292, 466, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1805, "seek": 750800, "start": 7521.0, "end": 7523.0, "text": " This column thing we don't need to worry about.", "tokens": [51014, 639, 7738, 551, 321, 500, 380, 643, 281, 3292, 466, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1806, "seek": 750800, "start": 7523.0, "end": 7525.0, "text": " So we delete with 2Ds.", "tokens": [51114, 407, 321, 12097, 365, 568, 35, 82, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1807, "seek": 750800, "start": 7525.0, "end": 7527.0, "text": " Now, consider the different plots that you have included.", "tokens": [51214, 823, 11, 1949, 264, 819, 28609, 300, 291, 362, 5556, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1808, "seek": 750800, "start": 7527.0, "end": 7529.0, "text": " And is this something that tells a story?", "tokens": [51314, 400, 307, 341, 746, 300, 5112, 257, 1657, 30, 51414], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1809, "seek": 750800, "start": 7529.0, "end": 7531.0, "text": " If so, leave it in and clean it up so that the axes", "tokens": [51414, 759, 370, 11, 1856, 309, 294, 293, 2541, 309, 493, 370, 300, 264, 35387, 51514], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1810, "seek": 750800, "start": 7531.0, "end": 7533.0, "text": " and the colors all look right.", "tokens": [51514, 293, 264, 4577, 439, 574, 558, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1811, "seek": 750800, "start": 7533.0, "end": 7535.0, "text": " If not, you can go ahead and just delete it.", "tokens": [51614, 759, 406, 11, 291, 393, 352, 2286, 293, 445, 12097, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1812, "seek": 750800, "start": 7535.0, "end": 7537.0, "text": " So I think this is deleteable, also deleteable,", "tokens": [51714, 407, 286, 519, 341, 307, 12097, 712, 11, 611, 12097, 712, 11, 51814], "temperature": 0.0, "avg_logprob": -0.09883296709119177, "compression_ratio": 1.8006329113924051, "no_speech_prob": 0.005383727606385946}, {"id": 1813, "seek": 753700, "start": 7537.0, "end": 7539.0, "text": " and finally deleteable.", "tokens": [50364, 293, 2721, 12097, 712, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1814, "seek": 753700, "start": 7539.0, "end": 7541.0, "text": " Okay, so we get to the point where we're predicting", "tokens": [50464, 1033, 11, 370, 321, 483, 281, 264, 935, 689, 321, 434, 32884, 50564], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1815, "seek": 753700, "start": 7541.0, "end": 7542.0, "text": " the production of coal mines.", "tokens": [50564, 264, 4265, 295, 10209, 25398, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1816, "seek": 753700, "start": 7542.0, "end": 7544.0, "text": " Again, we're just looking at what the columns are.", "tokens": [50614, 3764, 11, 321, 434, 445, 1237, 412, 437, 264, 13766, 366, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1817, "seek": 753700, "start": 7544.0, "end": 7545.0, "text": " We don't need this.", "tokens": [50714, 492, 500, 380, 643, 341, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1818, "seek": 753700, "start": 7545.0, "end": 7547.0, "text": " Don't need to know what unique year it is.", "tokens": [50764, 1468, 380, 643, 281, 458, 437, 3845, 1064, 309, 307, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1819, "seek": 753700, "start": 7547.0, "end": 7550.0, "text": " So this is required code, so we need to leave this in.", "tokens": [50864, 407, 341, 307, 4739, 3089, 11, 370, 321, 643, 281, 1856, 341, 294, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1820, "seek": 753700, "start": 7550.0, "end": 7553.0, "text": " Again, clean it up if it needs to be broken up into different cells", "tokens": [51014, 3764, 11, 2541, 309, 493, 498, 309, 2203, 281, 312, 5463, 493, 666, 819, 5438, 51164], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1821, "seek": 753700, "start": 7553.0, "end": 7556.0, "text": " or if you think it needs to be changed in some other way.", "tokens": [51164, 420, 498, 291, 519, 309, 2203, 281, 312, 3105, 294, 512, 661, 636, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1822, "seek": 753700, "start": 7556.0, "end": 7558.0, "text": " So let's delete a few of these empty ones.", "tokens": [51314, 407, 718, 311, 12097, 257, 1326, 295, 613, 6707, 2306, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1823, "seek": 753700, "start": 7558.0, "end": 7560.0, "text": " And let's say we want to like to keep this.", "tokens": [51414, 400, 718, 311, 584, 321, 528, 281, 411, 281, 1066, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1824, "seek": 753700, "start": 7560.0, "end": 7564.0, "text": " Let's decide one of these violin plots to keep.", "tokens": [51514, 961, 311, 4536, 472, 295, 613, 22878, 28609, 281, 1066, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1825, "seek": 753700, "start": 7564.0, "end": 7566.0, "text": " So let's keep the second one.", "tokens": [51714, 407, 718, 311, 1066, 264, 1150, 472, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07691859620990175, "compression_ratio": 1.8225806451612903, "no_speech_prob": 0.008057176135480404}, {"id": 1826, "seek": 756600, "start": 7566.0, "end": 7568.0, "text": " So I'm going to delete this one.", "tokens": [50364, 407, 286, 478, 516, 281, 12097, 341, 472, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1827, "seek": 756600, "start": 7568.0, "end": 7571.0, "text": " And to save this, I will say plt.savefig", "tokens": [50464, 400, 281, 3155, 341, 11, 286, 486, 584, 499, 83, 13, 82, 946, 20646, 50614], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1828, "seek": 756600, "start": 7571.0, "end": 7574.0, "text": " and using tab complete and it'll help us know", "tokens": [50614, 293, 1228, 4421, 3566, 293, 309, 603, 854, 505, 458, 50764], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1829, "seek": 756600, "start": 7574.0, "end": 7577.0, "text": " where proper structure to put this in here.", "tokens": [50764, 689, 2296, 3877, 281, 829, 341, 294, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1830, "seek": 756600, "start": 7577.0, "end": 7580.0, "text": " And as I said before, I like to give the same name,", "tokens": [50914, 400, 382, 286, 848, 949, 11, 286, 411, 281, 976, 264, 912, 1315, 11, 51064], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1831, "seek": 756600, "start": 7580.0, "end": 7583.0, "text": " beginning of the figure that the notebook itself has.", "tokens": [51064, 2863, 295, 264, 2573, 300, 264, 21060, 2564, 575, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1832, "seek": 756600, "start": 7583.0, "end": 7587.0, "text": " So in this case, it starts with coal prediction", "tokens": [51214, 407, 294, 341, 1389, 11, 309, 3719, 365, 10209, 17630, 51414], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1833, "seek": 756600, "start": 7587.0, "end": 7589.0, "text": " as the starting of this notebook name.", "tokens": [51414, 382, 264, 2891, 295, 341, 21060, 1315, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1834, "seek": 756600, "start": 7589.0, "end": 7592.0, "text": " So that looking at this figures folder separately later on,", "tokens": [51514, 407, 300, 1237, 412, 341, 9624, 10820, 14759, 1780, 322, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1835, "seek": 756600, "start": 7592.0, "end": 7594.0, "text": " someone knows which notebook it came from.", "tokens": [51664, 1580, 3255, 597, 21060, 309, 1361, 490, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12933673095703124, "compression_ratio": 1.7320754716981133, "no_speech_prob": 0.010983207263052464}, {"id": 1836, "seek": 759400, "start": 7594.0, "end": 7597.0, "text": " And then what it's actually being plotted here.", "tokens": [50364, 400, 550, 437, 309, 311, 767, 885, 43288, 510, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1837, "seek": 759400, "start": 7597.0, "end": 7600.0, "text": " So we have company type versus log of production.", "tokens": [50514, 407, 321, 362, 2237, 2010, 5717, 3565, 295, 4265, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1838, "seek": 759400, "start": 7600.0, "end": 7603.0, "text": " So company type versus log production.", "tokens": [50664, 407, 2237, 2010, 5717, 3565, 4265, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1839, "seek": 759400, "start": 7603.0, "end": 7606.0, "text": " Again, we get a warning, but this should work out just fine.", "tokens": [50814, 3764, 11, 321, 483, 257, 9164, 11, 457, 341, 820, 589, 484, 445, 2489, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1840, "seek": 759400, "start": 7606.0, "end": 7609.0, "text": " Let's run this a second time to make sure everything.", "tokens": [50964, 961, 311, 1190, 341, 257, 1150, 565, 281, 652, 988, 1203, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1841, "seek": 759400, "start": 7609.0, "end": 7611.0, "text": " Okay, so that looks better.", "tokens": [51114, 1033, 11, 370, 300, 1542, 1101, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1842, "seek": 759400, "start": 7611.0, "end": 7613.0, "text": " Running at the second time with the set context", "tokens": [51214, 28136, 412, 264, 1150, 565, 365, 264, 992, 4319, 51314], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1843, "seek": 759400, "start": 7613.0, "end": 7617.0, "text": " actually lets the font sizes get to a nice reasonable size.", "tokens": [51314, 767, 6653, 264, 10703, 11602, 483, 281, 257, 1481, 10585, 2744, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1844, "seek": 759400, "start": 7617.0, "end": 7619.0, "text": " Okay, so we are saving this output.", "tokens": [51514, 1033, 11, 370, 321, 366, 6816, 341, 5598, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1845, "seek": 759400, "start": 7619.0, "end": 7621.0, "text": " We think it's useful for our story.", "tokens": [51614, 492, 519, 309, 311, 4420, 337, 527, 1657, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09812686482413871, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.00970606878399849}, {"id": 1846, "seek": 762100, "start": 7621.0, "end": 7624.0, "text": " We again don't need this or looking at this.", "tokens": [50364, 492, 797, 500, 380, 643, 341, 420, 1237, 412, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1847, "seek": 762100, "start": 7624.0, "end": 7626.0, "text": " So just typing DD to delete these cells.", "tokens": [50514, 407, 445, 18444, 30778, 281, 12097, 613, 5438, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1848, "seek": 762100, "start": 7626.0, "end": 7628.0, "text": " We need to create the dummy categoricals.", "tokens": [50614, 492, 643, 281, 1884, 264, 35064, 19250, 804, 82, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1849, "seek": 762100, "start": 7628.0, "end": 7630.0, "text": " This is required for our analysis.", "tokens": [50714, 639, 307, 4739, 337, 527, 5215, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1850, "seek": 762100, "start": 7630.0, "end": 7634.0, "text": " We don't necessarily need to actually print the categoricals each time.", "tokens": [50814, 492, 500, 380, 4725, 643, 281, 767, 4482, 264, 19250, 804, 82, 1184, 565, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1851, "seek": 762100, "start": 7634.0, "end": 7636.0, "text": " So let's run this comment out that line", "tokens": [51014, 407, 718, 311, 1190, 341, 2871, 484, 300, 1622, 51114], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1852, "seek": 762100, "start": 7636.0, "end": 7639.0, "text": " and just double check that that is the same answer as before.", "tokens": [51114, 293, 445, 3834, 1520, 300, 300, 307, 264, 912, 1867, 382, 949, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1853, "seek": 762100, "start": 7639.0, "end": 7641.0, "text": " Okay, let's delete that.", "tokens": [51264, 1033, 11, 718, 311, 12097, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1854, "seek": 762100, "start": 7641.0, "end": 7644.0, "text": " And we've made a note here about avoiding dummy variable trap.", "tokens": [51364, 400, 321, 600, 1027, 257, 3637, 510, 466, 20220, 35064, 7006, 11487, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1855, "seek": 762100, "start": 7644.0, "end": 7647.0, "text": " You might decide that that needs to be elevated from a comment", "tokens": [51514, 509, 1062, 4536, 300, 300, 2203, 281, 312, 23457, 490, 257, 2871, 51664], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1856, "seek": 762100, "start": 7647.0, "end": 7649.0, "text": " and to mark down cell above it.", "tokens": [51664, 293, 281, 1491, 760, 2815, 3673, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09536814344102058, "compression_ratio": 1.7242524916943522, "no_speech_prob": 0.007813586853444576}, {"id": 1857, "seek": 764900, "start": 7649.0, "end": 7651.0, "text": " Okay, so let's leave it as a comment here.", "tokens": [50364, 1033, 11, 370, 718, 311, 1856, 309, 382, 257, 2871, 510, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1858, "seek": 764900, "start": 7651.0, "end": 7654.0, "text": " And we don't need to actually look at the categoricals for the final report.", "tokens": [50464, 400, 321, 500, 380, 643, 281, 767, 574, 412, 264, 19250, 804, 82, 337, 264, 2572, 2275, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1859, "seek": 764900, "start": 7654.0, "end": 7656.0, "text": " So let's just delete that.", "tokens": [50614, 407, 718, 311, 445, 12097, 300, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1860, "seek": 764900, "start": 7656.0, "end": 7657.0, "text": " Build our model.", "tokens": [50714, 11875, 527, 2316, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1861, "seek": 764900, "start": 7657.0, "end": 7659.0, "text": " Let's call it a little bit something more descriptive.", "tokens": [50764, 961, 311, 818, 309, 257, 707, 857, 746, 544, 42585, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1862, "seek": 764900, "start": 7659.0, "end": 7662.0, "text": " So it's going to be a random forest regressor.", "tokens": [50864, 407, 309, 311, 516, 281, 312, 257, 4974, 6719, 1121, 735, 284, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1863, "seek": 764900, "start": 7662.0, "end": 7665.0, "text": " And we should always put all of the imports", "tokens": [51014, 400, 321, 820, 1009, 829, 439, 295, 264, 41596, 51164], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1864, "seek": 764900, "start": 7665.0, "end": 7667.0, "text": " all the way at the top of the notebook.", "tokens": [51164, 439, 264, 636, 412, 264, 1192, 295, 264, 21060, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1865, "seek": 764900, "start": 7667.0, "end": 7670.0, "text": " And so let's move this to the top.", "tokens": [51264, 400, 370, 718, 311, 1286, 341, 281, 264, 1192, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1866, "seek": 764900, "start": 7670.0, "end": 7673.0, "text": " But first let's combine a few of the other imports.", "tokens": [51414, 583, 700, 718, 311, 10432, 257, 1326, 295, 264, 661, 41596, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1867, "seek": 764900, "start": 7673.0, "end": 7675.0, "text": " I think I have a few more imports down here I do.", "tokens": [51564, 286, 519, 286, 362, 257, 1326, 544, 41596, 760, 510, 286, 360, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1868, "seek": 764900, "start": 7675.0, "end": 7678.0, "text": " So let's move this, I'm going to turn on the toolbar", "tokens": [51664, 407, 718, 311, 1286, 341, 11, 286, 478, 516, 281, 1261, 322, 264, 47715, 51814], "temperature": 0.0, "avg_logprob": -0.07662037783448801, "compression_ratio": 1.8026755852842808, "no_speech_prob": 0.0083137983456254}, {"id": 1869, "seek": 767800, "start": 7678.0, "end": 7682.0, "text": " and move this up so that it's next to the previous one.", "tokens": [50364, 293, 1286, 341, 493, 370, 300, 309, 311, 958, 281, 264, 3894, 472, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1870, "seek": 767800, "start": 7682.0, "end": 7687.0, "text": " I'll scroll back down and see if I can find another import.", "tokens": [50564, 286, 603, 11369, 646, 760, 293, 536, 498, 286, 393, 915, 1071, 974, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1871, "seek": 767800, "start": 7687.0, "end": 7690.0, "text": " It looks like it should be everything.", "tokens": [50814, 467, 1542, 411, 309, 820, 312, 1203, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1872, "seek": 767800, "start": 7690.0, "end": 7693.0, "text": " A keyboard shortcut that I find that I'm using all the time", "tokens": [50964, 316, 10186, 24822, 300, 286, 915, 300, 286, 478, 1228, 439, 264, 565, 51114], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1873, "seek": 767800, "start": 7693.0, "end": 7696.0, "text": " and really saves me time is knowing how to merge and split cells", "tokens": [51114, 293, 534, 19155, 385, 565, 307, 5276, 577, 281, 22183, 293, 7472, 5438, 51264], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1874, "seek": 767800, "start": 7696.0, "end": 7698.0, "text": " with keyboard shortcuts.", "tokens": [51264, 365, 10186, 34620, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1875, "seek": 767800, "start": 7698.0, "end": 7701.0, "text": " Knowing this will save you tons of time with moving your mouse around.", "tokens": [51364, 25499, 341, 486, 3155, 291, 9131, 295, 565, 365, 2684, 428, 9719, 926, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1876, "seek": 767800, "start": 7701.0, "end": 7704.0, "text": " So we currently have input cell 30 selected.", "tokens": [51514, 407, 321, 4362, 362, 4846, 2815, 2217, 8209, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08497475240832177, "compression_ratio": 1.6535433070866141, "no_speech_prob": 0.003272696863859892}, {"id": 1877, "seek": 770400, "start": 7704.0, "end": 7707.0, "text": " We can type shift and hold it down and then type K.", "tokens": [50364, 492, 393, 2010, 5513, 293, 1797, 309, 760, 293, 550, 2010, 591, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1878, "seek": 770400, "start": 7707.0, "end": 7709.0, "text": " We will now select the cell above it.", "tokens": [50514, 492, 486, 586, 3048, 264, 2815, 3673, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1879, "seek": 770400, "start": 7709.0, "end": 7712.0, "text": " We can select as many cells like this as we'd like", "tokens": [50614, 492, 393, 3048, 382, 867, 5438, 411, 341, 382, 321, 1116, 411, 50764], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1880, "seek": 770400, "start": 7712.0, "end": 7715.0, "text": " or unselected by typing J to go back down.", "tokens": [50764, 420, 517, 405, 1809, 292, 538, 18444, 508, 281, 352, 646, 760, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1881, "seek": 770400, "start": 7715.0, "end": 7717.0, "text": " Also, if we go J from here,", "tokens": [50914, 2743, 11, 498, 321, 352, 508, 490, 510, 11, 51014], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1882, "seek": 770400, "start": 7717.0, "end": 7720.0, "text": " we can select down from the current cell that's selected.", "tokens": [51014, 321, 393, 3048, 760, 490, 264, 2190, 2815, 300, 311, 8209, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1883, "seek": 770400, "start": 7720.0, "end": 7722.0, "text": " But let's go up shift K.", "tokens": [51164, 583, 718, 311, 352, 493, 5513, 591, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1884, "seek": 770400, "start": 7722.0, "end": 7726.0, "text": " We have selected two cells to merge this type shift M.", "tokens": [51264, 492, 362, 8209, 732, 5438, 281, 22183, 341, 2010, 5513, 376, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1885, "seek": 770400, "start": 7726.0, "end": 7728.0, "text": " So we've now merged those two cells together.", "tokens": [51464, 407, 321, 600, 586, 36427, 729, 732, 5438, 1214, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1886, "seek": 770400, "start": 7728.0, "end": 7730.0, "text": " Again, you can do that for 10, 20 cells,", "tokens": [51564, 3764, 11, 291, 393, 360, 300, 337, 1266, 11, 945, 5438, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1887, "seek": 770400, "start": 7730.0, "end": 7732.0, "text": " or you can easily split them again.", "tokens": [51664, 420, 291, 393, 3612, 7472, 552, 797, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12604299733336544, "compression_ratio": 1.8015267175572518, "no_speech_prob": 0.27800077199935913}, {"id": 1888, "seek": 773200, "start": 7732.0, "end": 7735.0, "text": " I've said multiple times, control shift minus, splits in part,", "tokens": [50364, 286, 600, 848, 3866, 1413, 11, 1969, 5513, 3175, 11, 37741, 294, 644, 11, 50514], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1889, "seek": 773200, "start": 7735.0, "end": 7739.0, "text": " escape, shift K, shift M, merges them back together again.", "tokens": [50514, 7615, 11, 5513, 591, 11, 5513, 376, 11, 3551, 2880, 552, 646, 1214, 797, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1890, "seek": 773200, "start": 7739.0, "end": 7742.0, "text": " So this needs to go at the top of the notebook.", "tokens": [50714, 407, 341, 2203, 281, 352, 412, 264, 1192, 295, 264, 21060, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1891, "seek": 773200, "start": 7742.0, "end": 7745.0, "text": " So I will put this to the top by typing this up arrow.", "tokens": [50864, 407, 286, 486, 829, 341, 281, 264, 1192, 538, 18444, 341, 493, 11610, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1892, "seek": 773200, "start": 7745.0, "end": 7747.0, "text": " So bear with me for a second.", "tokens": [51014, 407, 6155, 365, 385, 337, 257, 1150, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1893, "seek": 773200, "start": 7747.0, "end": 7749.0, "text": " And we need to merge these two cells", "tokens": [51114, 400, 321, 643, 281, 22183, 613, 732, 5438, 51214], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1894, "seek": 773200, "start": 7749.0, "end": 7751.0, "text": " and then do some recombination.", "tokens": [51214, 293, 550, 360, 512, 850, 3548, 2486, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1895, "seek": 773200, "start": 7751.0, "end": 7755.0, "text": " So shift K, shift M, type return to get a cursor in the cell.", "tokens": [51314, 407, 5513, 591, 11, 5513, 376, 11, 2010, 2736, 281, 483, 257, 28169, 294, 264, 2815, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1896, "seek": 773200, "start": 7755.0, "end": 7757.0, "text": " And we're importing things from sklearn,", "tokens": [51514, 400, 321, 434, 43866, 721, 490, 1110, 306, 1083, 11, 51614], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1897, "seek": 773200, "start": 7757.0, "end": 7759.0, "text": " which should go after C-Born,", "tokens": [51614, 597, 820, 352, 934, 383, 12, 33, 1865, 11, 51714], "temperature": 0.0, "avg_logprob": -0.1276126778038749, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.0016483786748722196}, {"id": 1898, "seek": 775900, "start": 7759.0, "end": 7761.0, "text": " for this set command.", "tokens": [50364, 337, 341, 992, 5622, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1899, "seek": 775900, "start": 7761.0, "end": 7764.0, "text": " Execute that, and everything looks good again.", "tokens": [50464, 17662, 1169, 300, 11, 293, 1203, 1542, 665, 797, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1900, "seek": 775900, "start": 7764.0, "end": 7767.0, "text": " Let's scroll back down to where we've made our progress.", "tokens": [50614, 961, 311, 11369, 646, 760, 281, 689, 321, 600, 1027, 527, 4205, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1901, "seek": 775900, "start": 7767.0, "end": 7770.0, "text": " Down to here, we don't need the length of our demi-categoricals.", "tokens": [50764, 9506, 281, 510, 11, 321, 500, 380, 643, 264, 4641, 295, 527, 42188, 12, 66, 2968, 284, 804, 82, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1902, "seek": 775900, "start": 7770.0, "end": 7773.0, "text": " We do need to test train, split our data.", "tokens": [50914, 492, 360, 643, 281, 1500, 3847, 11, 7472, 527, 1412, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1903, "seek": 775900, "start": 7773.0, "end": 7775.0, "text": " Let's merge these two cells by typing shift J,", "tokens": [51064, 961, 311, 22183, 613, 732, 5438, 538, 18444, 5513, 508, 11, 51164], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1904, "seek": 775900, "start": 7775.0, "end": 7778.0, "text": " shift M, and let's just leave that middle line.", "tokens": [51164, 5513, 376, 11, 293, 718, 311, 445, 1856, 300, 2808, 1622, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1905, "seek": 775900, "start": 7778.0, "end": 7780.0, "text": " Execute, shift enter.", "tokens": [51314, 17662, 1169, 11, 5513, 3242, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1906, "seek": 775900, "start": 7780.0, "end": 7783.0, "text": " And look at our final plot here.", "tokens": [51414, 400, 574, 412, 527, 2572, 7542, 510, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1907, "seek": 775900, "start": 7783.0, "end": 7785.0, "text": " And this looks like a reasonable good plot.", "tokens": [51564, 400, 341, 1542, 411, 257, 10585, 665, 7542, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1908, "seek": 775900, "start": 7785.0, "end": 7786.0, "text": " Thing looks nice.", "tokens": [51664, 30902, 1542, 1481, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12732877229389392, "compression_ratio": 1.6567164179104477, "no_speech_prob": 0.017439037561416626}, {"id": 1909, "seek": 778600, "start": 7786.0, "end": 7789.0, "text": " Let's save it out again into the figures directory.", "tokens": [50364, 961, 311, 3155, 309, 484, 797, 666, 264, 9624, 21120, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1910, "seek": 778600, "start": 7789.0, "end": 7792.0, "text": " Let's call this coal production RF prediction.", "tokens": [50514, 961, 311, 818, 341, 10209, 4265, 26204, 17630, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1911, "seek": 778600, "start": 7792.0, "end": 7795.0, "text": " Great. So we've now saved this out.", "tokens": [50664, 3769, 13, 407, 321, 600, 586, 6624, 341, 484, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1912, "seek": 778600, "start": 7795.0, "end": 7798.0, "text": " And we can do our various scores that we'd like to do.", "tokens": [50814, 400, 321, 393, 360, 527, 3683, 13444, 300, 321, 1116, 411, 281, 360, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1913, "seek": 778600, "start": 7798.0, "end": 7801.0, "text": " If we're going to be printing out this output for consumption,", "tokens": [50964, 759, 321, 434, 516, 281, 312, 14699, 484, 341, 5598, 337, 12126, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1914, "seek": 778600, "start": 7801.0, "end": 7803.0, "text": " we should make this look a little bit prettier.", "tokens": [51114, 321, 820, 652, 341, 574, 257, 707, 857, 36825, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1915, "seek": 778600, "start": 7803.0, "end": 7806.0, "text": " So let's just do this first one.", "tokens": [51214, 407, 718, 311, 445, 360, 341, 700, 472, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1916, "seek": 778600, "start": 7806.0, "end": 7810.0, "text": " And let's combine these two cells.", "tokens": [51364, 400, 718, 311, 10432, 613, 732, 5438, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1917, "seek": 778600, "start": 7810.0, "end": 7812.0, "text": " So now we have the R-squared score", "tokens": [51564, 407, 586, 321, 362, 264, 497, 12, 33292, 1642, 6175, 51664], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1918, "seek": 778600, "start": 7812.0, "end": 7814.0, "text": " and our mean-squared error scores.", "tokens": [51664, 293, 527, 914, 12, 33292, 1642, 6713, 13444, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09264710998535156, "compression_ratio": 1.6528301886792454, "no_speech_prob": 0.006096419878304005}, {"id": 1919, "seek": 781400, "start": 7814.0, "end": 7816.0, "text": " And finally, our random forest importances.", "tokens": [50364, 400, 2721, 11, 527, 4974, 6719, 974, 2676, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1920, "seek": 781400, "start": 7816.0, "end": 7818.0, "text": " And let's just look at the top five.", "tokens": [50464, 400, 718, 311, 445, 574, 412, 264, 1192, 1732, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1921, "seek": 781400, "start": 7818.0, "end": 7820.0, "text": " So the top five are labor hours all the way down.", "tokens": [50564, 407, 264, 1192, 1732, 366, 5938, 2496, 439, 264, 636, 760, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1922, "seek": 781400, "start": 7820.0, "end": 7821.0, "text": " Cool.", "tokens": [50664, 8561, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1923, "seek": 781400, "start": 7821.0, "end": 7823.0, "text": " So we've done a lot of rearranging of the code.", "tokens": [50714, 407, 321, 600, 1096, 257, 688, 295, 29875, 9741, 295, 264, 3089, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1924, "seek": 781400, "start": 7823.0, "end": 7827.0, "text": " So at this point, I think it's crucial to restart the kernel", "tokens": [50814, 407, 412, 341, 935, 11, 286, 519, 309, 311, 11462, 281, 21022, 264, 28256, 51014], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1925, "seek": 781400, "start": 7827.0, "end": 7829.0, "text": " and try to run the entire notebook again.", "tokens": [51014, 293, 853, 281, 1190, 264, 2302, 21060, 797, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1926, "seek": 781400, "start": 7829.0, "end": 7832.0, "text": " If you have some process that actually takes a very long time,", "tokens": [51114, 759, 291, 362, 512, 1399, 300, 767, 2516, 257, 588, 938, 565, 11, 51264], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1927, "seek": 781400, "start": 7832.0, "end": 7833.0, "text": " you can decide not to do that.", "tokens": [51264, 291, 393, 4536, 406, 281, 360, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1928, "seek": 781400, "start": 7833.0, "end": 7835.0, "text": " But this, you'd have to take a little bit more care", "tokens": [51314, 583, 341, 11, 291, 1116, 362, 281, 747, 257, 707, 857, 544, 1127, 51414], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1929, "seek": 781400, "start": 7835.0, "end": 7838.0, "text": " into making sure that each piece runs correctly.", "tokens": [51414, 666, 1455, 988, 300, 1184, 2522, 6676, 8944, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1930, "seek": 781400, "start": 7838.0, "end": 7841.0, "text": " But in this case, this entire analysis runs very quickly.", "tokens": [51564, 583, 294, 341, 1389, 11, 341, 2302, 5215, 6676, 588, 2661, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05416896820068359, "compression_ratio": 1.7252396166134185, "no_speech_prob": 0.0014102108543738723}, {"id": 1931, "seek": 784100, "start": 7841.0, "end": 7845.0, "text": " So we have no problem clearing all outputs and restarting.", "tokens": [50364, 407, 321, 362, 572, 1154, 23937, 439, 23930, 293, 21022, 278, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1932, "seek": 784100, "start": 7845.0, "end": 7849.0, "text": " And clicking cell run all should run every single cell.", "tokens": [50564, 400, 9697, 2815, 1190, 439, 820, 1190, 633, 2167, 2815, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1933, "seek": 784100, "start": 7849.0, "end": 7852.0, "text": " If we've deleted some piece of code that was necessary,", "tokens": [50764, 759, 321, 600, 22981, 512, 2522, 295, 3089, 300, 390, 4818, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1934, "seek": 784100, "start": 7852.0, "end": 7855.0, "text": " we'll have an error and we have to go back and correct that.", "tokens": [50914, 321, 603, 362, 364, 6713, 293, 321, 362, 281, 352, 646, 293, 3006, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1935, "seek": 784100, "start": 7855.0, "end": 7859.0, "text": " Let's go through all the way down to the bottom thing was actually done.", "tokens": [51064, 961, 311, 352, 807, 439, 264, 636, 760, 281, 264, 2767, 551, 390, 767, 1096, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1936, "seek": 784100, "start": 7859.0, "end": 7863.0, "text": " If there was an error, so let's say it would stop at this fifth cell here.", "tokens": [51264, 759, 456, 390, 364, 6713, 11, 370, 718, 311, 584, 309, 576, 1590, 412, 341, 9266, 2815, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1937, "seek": 784100, "start": 7863.0, "end": 7866.0, "text": " It would have an error printout here and nothing else would be executed", "tokens": [51464, 467, 576, 362, 364, 6713, 4482, 346, 510, 293, 1825, 1646, 576, 312, 17577, 51614], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1938, "seek": 784100, "start": 7866.0, "end": 7868.0, "text": " below that when you do this run all cells.", "tokens": [51614, 2507, 300, 562, 291, 360, 341, 1190, 439, 5438, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09313062983235036, "compression_ratio": 1.7642857142857142, "no_speech_prob": 0.0030748662538826466}, {"id": 1939, "seek": 786800, "start": 7868.0, "end": 7871.0, "text": " That's a good way of identifying where the error happened.", "tokens": [50364, 663, 311, 257, 665, 636, 295, 16696, 689, 264, 6713, 2011, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1940, "seek": 786800, "start": 7871.0, "end": 7873.0, "text": " We don't have an error, thankfully, so that's good.", "tokens": [50514, 492, 500, 380, 362, 364, 6713, 11, 27352, 11, 370, 300, 311, 665, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1941, "seek": 786800, "start": 7873.0, "end": 7877.0, "text": " We do have something that is somewhat annoying to me that this has to be run twice.", "tokens": [50614, 492, 360, 362, 746, 300, 307, 8344, 11304, 281, 385, 300, 341, 575, 281, 312, 1190, 6091, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1942, "seek": 786800, "start": 7877.0, "end": 7881.0, "text": " As we can tell, we run this a second time we get our font gets bigger.", "tokens": [50814, 1018, 321, 393, 980, 11, 321, 1190, 341, 257, 1150, 565, 321, 483, 527, 10703, 2170, 3801, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1943, "seek": 786800, "start": 7881.0, "end": 7883.0, "text": " So I think I know what happened.", "tokens": [51014, 407, 286, 519, 286, 458, 437, 2011, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1944, "seek": 786800, "start": 7883.0, "end": 7886.0, "text": " I set the context after I set the figure.", "tokens": [51114, 286, 992, 264, 4319, 934, 286, 992, 264, 2573, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1945, "seek": 786800, "start": 7886.0, "end": 7889.0, "text": " So I'm going to re-align the order of these two pieces of code.", "tokens": [51264, 407, 286, 478, 516, 281, 319, 12, 304, 788, 264, 1668, 295, 613, 732, 3755, 295, 3089, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1946, "seek": 786800, "start": 7889.0, "end": 7895.0, "text": " Save this, restart the kernel, clear all outputs, cell run all.", "tokens": [51414, 15541, 341, 11, 21022, 264, 28256, 11, 1850, 439, 23930, 11, 2815, 1190, 439, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10481713564341305, "compression_ratio": 1.7080291970802919, "no_speech_prob": 0.013633483089506626}, {"id": 1947, "seek": 789500, "start": 7895.0, "end": 7898.0, "text": " And now we see that the font size is the correct size", "tokens": [50364, 400, 586, 321, 536, 300, 264, 10703, 2744, 307, 264, 3006, 2744, 50514], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1948, "seek": 789500, "start": 7898.0, "end": 7900.0, "text": " and we've run all the way to the bottom.", "tokens": [50514, 293, 321, 600, 1190, 439, 264, 636, 281, 264, 2767, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1949, "seek": 789500, "start": 7900.0, "end": 7903.0, "text": " And each time we run this, do note that we are overwriting these figure files,", "tokens": [50614, 400, 1184, 565, 321, 1190, 341, 11, 360, 3637, 300, 321, 366, 670, 19868, 613, 2573, 7098, 11, 50764], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1950, "seek": 789500, "start": 7903.0, "end": 7905.0, "text": " which is what we were hoping to do,", "tokens": [50764, 597, 307, 437, 321, 645, 7159, 281, 360, 11, 50864], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1951, "seek": 789500, "start": 7905.0, "end": 7909.0, "text": " but also keep track that is what you indeed want to do when you're running this.", "tokens": [50864, 457, 611, 1066, 2837, 300, 307, 437, 291, 6451, 528, 281, 360, 562, 291, 434, 2614, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1952, "seek": 789500, "start": 7909.0, "end": 7912.0, "text": " I guess a good thing to add at the end, of course, would be some sort of conclusion,", "tokens": [51064, 286, 2041, 257, 665, 551, 281, 909, 412, 264, 917, 11, 295, 1164, 11, 576, 312, 512, 1333, 295, 10063, 11, 51214], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1953, "seek": 789500, "start": 7912.0, "end": 7916.0, "text": " so we can just add a conclusion statement.", "tokens": [51214, 370, 321, 393, 445, 909, 257, 10063, 5629, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1954, "seek": 789500, "start": 7916.0, "end": 7919.0, "text": " Okay, so a detailed and amazing conclusion goes there.", "tokens": [51414, 1033, 11, 370, 257, 9942, 293, 2243, 10063, 1709, 456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1955, "seek": 789500, "start": 7919.0, "end": 7920.0, "text": " So we're done with this.", "tokens": [51564, 407, 321, 434, 1096, 365, 341, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1956, "seek": 789500, "start": 7920.0, "end": 7924.0, "text": " We will close and halt and we need to submit this to GitHub.", "tokens": [51614, 492, 486, 1998, 293, 12479, 293, 321, 643, 281, 10315, 341, 281, 23331, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11459447208203767, "compression_ratio": 1.7578616352201257, "no_speech_prob": 0.00648620305582881}, {"id": 1957, "seek": 792400, "start": 7924.0, "end": 7927.0, "text": " So we can do a get status back at our terminal.", "tokens": [50364, 407, 321, 393, 360, 257, 483, 6558, 646, 412, 527, 14709, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1958, "seek": 792400, "start": 7927.0, "end": 7929.0, "text": " We've modified a figure.", "tokens": [50514, 492, 600, 15873, 257, 2573, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1959, "seek": 792400, "start": 7929.0, "end": 7932.0, "text": " We have added a figure and we've created a new file.", "tokens": [50614, 492, 362, 3869, 257, 2573, 293, 321, 600, 2942, 257, 777, 3991, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1960, "seek": 792400, "start": 7932.0, "end": 7939.0, "text": " So let's add those type get status to make sure we know what we're doing.", "tokens": [50764, 407, 718, 311, 909, 729, 2010, 483, 6558, 281, 652, 988, 321, 458, 437, 321, 434, 884, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1961, "seek": 792400, "start": 7939.0, "end": 7941.0, "text": " We are adding two new files or modifying another file.", "tokens": [51114, 492, 366, 5127, 732, 777, 7098, 420, 42626, 1071, 3991, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1962, "seek": 792400, "start": 7941.0, "end": 7942.0, "text": " This looks good.", "tokens": [51214, 639, 1542, 665, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1963, "seek": 792400, "start": 7942.0, "end": 7950.0, "text": " So get commit, get push, origin, Jonathan prediction production.", "tokens": [51264, 407, 483, 5599, 11, 483, 2944, 11, 4957, 11, 15471, 17630, 4265, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1964, "seek": 792400, "start": 7950.0, "end": 7953.0, "text": " And this should be sent up to GitHub and everything is now", "tokens": [51664, 400, 341, 820, 312, 2279, 493, 281, 23331, 293, 1203, 307, 586, 51814], "temperature": 0.0, "avg_logprob": -0.13826320327330974, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.01614491268992424}, {"id": 1965, "seek": 795300, "start": 7953.0, "end": 7954.0, "text": " up to date.", "tokens": [50364, 493, 281, 4002, 13, 50414], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1966, "seek": 795300, "start": 7954.0, "end": 7956.0, "text": " So let's go to our get repository.", "tokens": [50414, 407, 718, 311, 352, 281, 527, 483, 25841, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1967, "seek": 795300, "start": 7956.0, "end": 7959.0, "text": " So in my case, JBWit Coal Exploration.", "tokens": [50514, 407, 294, 452, 1389, 11, 43019, 54, 270, 3066, 304, 12514, 9357, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1968, "seek": 795300, "start": 7959.0, "end": 7962.0, "text": " And there is a new branch which we can click on.", "tokens": [50664, 400, 456, 307, 257, 777, 9819, 597, 321, 393, 2052, 322, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1969, "seek": 795300, "start": 7962.0, "end": 7968.0, "text": " And if we click on the deliver, we should be able to see our Coal Prediction Production Notebook,", "tokens": [50814, 400, 498, 321, 2052, 322, 264, 4239, 11, 321, 820, 312, 1075, 281, 536, 527, 3066, 304, 32969, 4105, 30088, 11633, 2939, 11, 51114], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1970, "seek": 795300, "start": 7968.0, "end": 7974.0, "text": " including all of the code and everything else in here.", "tokens": [51114, 3009, 439, 295, 264, 3089, 293, 1203, 1646, 294, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1971, "seek": 795300, "start": 7974.0, "end": 7981.0, "text": " In this video, we'll be talking about how to do a pull request and how to merge this back into a final branch", "tokens": [51414, 682, 341, 960, 11, 321, 603, 312, 1417, 466, 577, 281, 360, 257, 2235, 5308, 293, 577, 281, 22183, 341, 646, 666, 257, 2572, 9819, 51764], "temperature": 0.0, "avg_logprob": -0.14308529406522227, "compression_ratio": 1.5753968253968254, "no_speech_prob": 0.03158367797732353}, {"id": 1972, "seek": 798100, "start": 7981.0, "end": 7984.0, "text": " so the team members can review it and check off on it.", "tokens": [50364, 370, 264, 1469, 2679, 393, 3131, 309, 293, 1520, 766, 322, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1973, "seek": 798100, "start": 7984.0, "end": 7985.0, "text": " All right.", "tokens": [50514, 1057, 558, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1974, "seek": 798100, "start": 7985.0, "end": 7987.0, "text": " So we last left us.", "tokens": [50564, 407, 321, 1036, 1411, 505, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1975, "seek": 798100, "start": 7987.0, "end": 7992.0, "text": " We had just put in our deliverable notebook that talks about the Coal Prediction Production.", "tokens": [50664, 492, 632, 445, 829, 294, 527, 4239, 712, 21060, 300, 6686, 466, 264, 3066, 304, 32969, 4105, 30088, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1976, "seek": 798100, "start": 7992.0, "end": 7997.0, "text": " And so at this point, after pushing it to master, we have this branch.", "tokens": [50914, 400, 370, 412, 341, 935, 11, 934, 7380, 309, 281, 4505, 11, 321, 362, 341, 9819, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1977, "seek": 798100, "start": 7997.0, "end": 8003.0, "text": " If you go back to the home directory under your username and whatever you've named your data science project,", "tokens": [51164, 759, 291, 352, 646, 281, 264, 1280, 21120, 833, 428, 30351, 293, 2035, 291, 600, 4926, 428, 1412, 3497, 1716, 11, 51464], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1978, "seek": 798100, "start": 8003.0, "end": 8006.0, "text": " you can actually see this button here called new pull request.", "tokens": [51464, 291, 393, 767, 536, 341, 2960, 510, 1219, 777, 2235, 5308, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08675129614143728, "compression_ratio": 1.5571955719557196, "no_speech_prob": 0.02594393491744995}, {"id": 1979, "seek": 800600, "start": 8006.0, "end": 8011.0, "text": " And I like to switch to the branch that I'm going to generate the pull request from.", "tokens": [50364, 400, 286, 411, 281, 3679, 281, 264, 9819, 300, 286, 478, 516, 281, 8460, 264, 2235, 5308, 490, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07165495287470457, "compression_ratio": 1.6996587030716723, "no_speech_prob": 0.0655829980969429}, {"id": 1980, "seek": 800600, "start": 8011.0, "end": 8016.0, "text": " So this is all predicated on using GitHub as your repository of choice.", "tokens": [50614, 407, 341, 307, 439, 3852, 3587, 322, 1228, 23331, 382, 428, 25841, 295, 3922, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07165495287470457, "compression_ratio": 1.6996587030716723, "no_speech_prob": 0.0655829980969429}, {"id": 1981, "seek": 800600, "start": 8016.0, "end": 8023.0, "text": " So after you click new pull request, you'll ask you to do one last step here where it'll say you're creating a new pull request", "tokens": [50864, 407, 934, 291, 2052, 777, 2235, 5308, 11, 291, 603, 1029, 291, 281, 360, 472, 1036, 1823, 510, 689, 309, 603, 584, 291, 434, 4084, 257, 777, 2235, 5308, 51214], "temperature": 0.0, "avg_logprob": -0.07165495287470457, "compression_ratio": 1.6996587030716723, "no_speech_prob": 0.0655829980969429}, {"id": 1982, "seek": 800600, "start": 8023.0, "end": 8025.0, "text": " by comparing changes across two branches.", "tokens": [51214, 538, 15763, 2962, 2108, 732, 14770, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07165495287470457, "compression_ratio": 1.6996587030716723, "no_speech_prob": 0.0655829980969429}, {"id": 1983, "seek": 800600, "start": 8025.0, "end": 8031.0, "text": " You're going to be taking stuff from this Jonathan Predict Production branch and putting it into master.", "tokens": [51314, 509, 434, 516, 281, 312, 1940, 1507, 490, 341, 15471, 430, 24945, 30088, 9819, 293, 3372, 309, 666, 4505, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07165495287470457, "compression_ratio": 1.6996587030716723, "no_speech_prob": 0.0655829980969429}, {"id": 1984, "seek": 800600, "start": 8031.0, "end": 8034.0, "text": " And GitHub does this nice thing which says it's able to be merged,", "tokens": [51614, 400, 23331, 775, 341, 1481, 551, 597, 1619, 309, 311, 1075, 281, 312, 36427, 11, 51764], "temperature": 0.0, "avg_logprob": -0.07165495287470457, "compression_ratio": 1.6996587030716723, "no_speech_prob": 0.0655829980969429}, {"id": 1985, "seek": 803400, "start": 8034.0, "end": 8038.0, "text": " which means that if it's approved, it can just be approved at the single button click.", "tokens": [50364, 597, 1355, 300, 498, 309, 311, 10826, 11, 309, 393, 445, 312, 10826, 412, 264, 2167, 2960, 2052, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1986, "seek": 803400, "start": 8038.0, "end": 8039.0, "text": " That's always nice.", "tokens": [50564, 663, 311, 1009, 1481, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1987, "seek": 803400, "start": 8039.0, "end": 8043.0, "text": " So give your commit an extra bit of detail here.", "tokens": [50614, 407, 976, 428, 5599, 364, 2857, 857, 295, 2607, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1988, "seek": 803400, "start": 8043.0, "end": 8046.0, "text": " So say something like final review.", "tokens": [50814, 407, 584, 746, 411, 2572, 3131, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1989, "seek": 803400, "start": 8046.0, "end": 8051.0, "text": " And then if you want to leave a few more comments, create pull request.", "tokens": [50964, 400, 550, 498, 291, 528, 281, 1856, 257, 1326, 544, 3053, 11, 1884, 2235, 5308, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1990, "seek": 803400, "start": 8051.0, "end": 8058.0, "text": " So now what this does is it creates a pull request and lets you see the various commits that have happened in this branch", "tokens": [51214, 407, 586, 437, 341, 775, 307, 309, 7829, 257, 2235, 5308, 293, 6653, 291, 536, 264, 3683, 48311, 300, 362, 2011, 294, 341, 9819, 51564], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1991, "seek": 803400, "start": 8058.0, "end": 8063.0, "text": " and allows a person who can possibly merge this to review the pull request.", "tokens": [51564, 293, 4045, 257, 954, 567, 393, 6264, 22183, 341, 281, 3131, 264, 2235, 5308, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06305254877141092, "compression_ratio": 1.7011070110701108, "no_speech_prob": 0.00970659963786602}, {"id": 1992, "seek": 806300, "start": 8063.0, "end": 8071.0, "text": " So a person coming into this would see who's not me, for example, would look at the pull request and see that there's one open pull request.", "tokens": [50364, 407, 257, 954, 1348, 666, 341, 576, 536, 567, 311, 406, 385, 11, 337, 1365, 11, 576, 574, 412, 264, 2235, 5308, 293, 536, 300, 456, 311, 472, 1269, 2235, 5308, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1993, "seek": 806300, "start": 8071.0, "end": 8074.0, "text": " And it was open 25 seconds ago by me.", "tokens": [50764, 400, 309, 390, 1269, 3552, 3949, 2057, 538, 385, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1994, "seek": 806300, "start": 8074.0, "end": 8077.0, "text": " So if you click on this, then you'll see the comment here.", "tokens": [50914, 407, 498, 291, 2052, 322, 341, 11, 550, 291, 603, 536, 264, 2871, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1995, "seek": 806300, "start": 8077.0, "end": 8078.0, "text": " Please check the figures especially.", "tokens": [51064, 2555, 1520, 264, 9624, 2318, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1996, "seek": 806300, "start": 8078.0, "end": 8080.0, "text": " They're going to be put into a slideshow.", "tokens": [51114, 814, 434, 516, 281, 312, 829, 666, 257, 9788, 4286, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1997, "seek": 806300, "start": 8080.0, "end": 8081.0, "text": " Okay, so this must be pretty important.", "tokens": [51214, 1033, 11, 370, 341, 1633, 312, 1238, 1021, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1998, "seek": 806300, "start": 8081.0, "end": 8085.0, "text": " And so I'll take a look at the different files that were committed.", "tokens": [51264, 400, 370, 286, 603, 747, 257, 574, 412, 264, 819, 7098, 300, 645, 7784, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 1999, "seek": 806300, "start": 8085.0, "end": 8087.0, "text": " So I'll click to the files changed.", "tokens": [51464, 407, 286, 603, 2052, 281, 264, 7098, 3105, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 2000, "seek": 806300, "start": 8087.0, "end": 8092.0, "text": " I see that we have a couple of notebooks and we have a couple of figures.", "tokens": [51564, 286, 536, 300, 321, 362, 257, 1916, 295, 43782, 293, 321, 362, 257, 1916, 295, 9624, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0852816899617513, "compression_ratio": 1.7623762376237624, "no_speech_prob": 0.011681733652949333}, {"id": 2001, "seek": 809200, "start": 8092.0, "end": 8096.0, "text": " So let's take a look at, let's say this current figure here.", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 11, 718, 311, 584, 341, 2190, 2573, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2002, "seek": 809200, "start": 8096.0, "end": 8097.0, "text": " This one was added.", "tokens": [50564, 639, 472, 390, 3869, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2003, "seek": 809200, "start": 8097.0, "end": 8100.0, "text": " Let's say we want to change that color.", "tokens": [50614, 961, 311, 584, 321, 528, 281, 1319, 300, 2017, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2004, "seek": 809200, "start": 8100.0, "end": 8103.0, "text": " So in the pull request, you can actually make changes.", "tokens": [50764, 407, 294, 264, 2235, 5308, 11, 291, 393, 767, 652, 2962, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2005, "seek": 809200, "start": 8103.0, "end": 8105.0, "text": " And this is where you actually wanted to be doing this.", "tokens": [50914, 400, 341, 307, 689, 291, 767, 1415, 281, 312, 884, 341, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2006, "seek": 809200, "start": 8105.0, "end": 8113.0, "text": " You click in the conversation part of the pull request, say, I need a few changes.", "tokens": [51014, 509, 2052, 294, 264, 3761, 644, 295, 264, 2235, 5308, 11, 584, 11, 286, 643, 257, 1326, 2962, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2007, "seek": 809200, "start": 8113.0, "end": 8114.0, "text": " Add a comment.", "tokens": [51414, 5349, 257, 2871, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2008, "seek": 809200, "start": 8114.0, "end": 8117.0, "text": " Now, of course, I'm commenting on my own pull request.", "tokens": [51464, 823, 11, 295, 1164, 11, 286, 478, 29590, 322, 452, 1065, 2235, 5308, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09885597229003906, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.0035926224663853645}, {"id": 2009, "seek": 811700, "start": 8117.0, "end": 8121.0, "text": " Normally what happens is you make a pull request and your team members or your", "tokens": [50364, 17424, 437, 2314, 307, 291, 652, 257, 2235, 5308, 293, 428, 1469, 2679, 420, 428, 50564], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2010, "seek": 811700, "start": 8121.0, "end": 8124.0, "text": " manager will be actually the one reviewing the pull request.", "tokens": [50564, 6598, 486, 312, 767, 264, 472, 19576, 264, 2235, 5308, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2011, "seek": 811700, "start": 8124.0, "end": 8128.0, "text": " But in this case, just for demonstration purposes, I'm both the submitter and the", "tokens": [50714, 583, 294, 341, 1389, 11, 445, 337, 16520, 9932, 11, 286, 478, 1293, 264, 10315, 391, 293, 264, 50914], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2012, "seek": 811700, "start": 8128.0, "end": 8131.0, "text": " reviewer just so that it's easy to see what needs to happen.", "tokens": [50914, 3131, 260, 445, 370, 300, 309, 311, 1858, 281, 536, 437, 2203, 281, 1051, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2013, "seek": 811700, "start": 8131.0, "end": 8132.0, "text": " So added a comment.", "tokens": [51064, 407, 3869, 257, 2871, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2014, "seek": 811700, "start": 8132.0, "end": 8133.0, "text": " I need a few changes.", "tokens": [51114, 286, 643, 257, 1326, 2962, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2015, "seek": 811700, "start": 8133.0, "end": 8135.0, "text": " Please change the figure to be green.", "tokens": [51164, 2555, 1319, 264, 2573, 281, 312, 3092, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2016, "seek": 811700, "start": 8135.0, "end": 8136.0, "text": " Okay.", "tokens": [51264, 1033, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2017, "seek": 811700, "start": 8136.0, "end": 8141.0, "text": " Now that we go back to our terminal, we see that still on the Jonathan prediction", "tokens": [51314, 823, 300, 321, 352, 646, 281, 527, 14709, 11, 321, 536, 300, 920, 322, 264, 15471, 17630, 51564], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2018, "seek": 811700, "start": 8141.0, "end": 8146.0, "text": " production branch, so we'll need to make some changes to the pull request.", "tokens": [51564, 4265, 9819, 11, 370, 321, 603, 643, 281, 652, 512, 2962, 281, 264, 2235, 5308, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10056639777289497, "compression_ratio": 1.7326732673267327, "no_speech_prob": 0.11585643142461777}, {"id": 2019, "seek": 814600, "start": 8146.0, "end": 8148.0, "text": " So this is actually pretty simple.", "tokens": [50364, 407, 341, 307, 767, 1238, 2199, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2020, "seek": 814600, "start": 8148.0, "end": 8153.0, "text": " So I'm going to switch tabs back to our deliver directory that is running under the", "tokens": [50464, 407, 286, 478, 516, 281, 3679, 20743, 646, 281, 527, 4239, 21120, 300, 307, 2614, 833, 264, 50714], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2021, "seek": 814600, "start": 8153.0, "end": 8155.0, "text": " Jupyter Notebook server.", "tokens": [50714, 22125, 88, 391, 11633, 2939, 7154, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2022, "seek": 814600, "start": 8155.0, "end": 8159.0, "text": " And so let's go into this cold predict production and make the requisite changes.", "tokens": [50814, 400, 370, 718, 311, 352, 666, 341, 3554, 6069, 4265, 293, 652, 264, 49878, 642, 2962, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2023, "seek": 814600, "start": 8159.0, "end": 8163.0, "text": " Now we'll have to actually shift return and work our way through this so that", "tokens": [51014, 823, 321, 603, 362, 281, 767, 5513, 2736, 293, 589, 527, 636, 807, 341, 370, 300, 51214], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2024, "seek": 814600, "start": 8163.0, "end": 8165.0, "text": " everything is loaded into the namespace.", "tokens": [51214, 1203, 307, 13210, 666, 264, 5288, 17940, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2025, "seek": 814600, "start": 8165.0, "end": 8169.0, "text": " So that one is probably the one that should stay the same.", "tokens": [51314, 407, 300, 472, 307, 1391, 264, 472, 300, 820, 1754, 264, 912, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2026, "seek": 814600, "start": 8169.0, "end": 8174.0, "text": " We get down to this one here where sure enough, the figure itself is printing", "tokens": [51514, 492, 483, 760, 281, 341, 472, 510, 689, 988, 1547, 11, 264, 2573, 2564, 307, 14699, 51764], "temperature": 0.0, "avg_logprob": -0.09788148543413948, "compression_ratio": 1.6701388888888888, "no_speech_prob": 0.02297004871070385}, {"id": 2027, "seek": 817400, "start": 8175.0, "end": 8176.0, "text": " something that's blue.", "tokens": [50414, 746, 300, 311, 3344, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2028, "seek": 817400, "start": 8176.0, "end": 8179.0, "text": " We want to change this color to be green.", "tokens": [50464, 492, 528, 281, 1319, 341, 2017, 281, 312, 3092, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2029, "seek": 817400, "start": 8179.0, "end": 8180.0, "text": " Okay.", "tokens": [50614, 1033, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2030, "seek": 817400, "start": 8180.0, "end": 8184.0, "text": " In this plot, we will actually make the color equal to green.", "tokens": [50664, 682, 341, 7542, 11, 321, 486, 767, 652, 264, 2017, 2681, 281, 3092, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2031, "seek": 817400, "start": 8184.0, "end": 8187.0, "text": " C is not what it takes as a thing.", "tokens": [50864, 383, 307, 406, 437, 309, 2516, 382, 257, 551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2032, "seek": 817400, "start": 8187.0, "end": 8190.0, "text": " So we'll see if color works and color is indeed the keyword.", "tokens": [51014, 407, 321, 603, 536, 498, 2017, 1985, 293, 2017, 307, 6451, 264, 20428, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2033, "seek": 817400, "start": 8190.0, "end": 8191.0, "text": " Okay.", "tokens": [51164, 1033, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2034, "seek": 817400, "start": 8191.0, "end": 8195.0, "text": " So changing the color to be green, the figure is now green and we have", "tokens": [51214, 407, 4473, 264, 2017, 281, 312, 3092, 11, 264, 2573, 307, 586, 3092, 293, 321, 362, 51414], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2035, "seek": 817400, "start": 8195.0, "end": 8197.0, "text": " overwritten that figure file.", "tokens": [51414, 670, 26859, 300, 2573, 3991, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2036, "seek": 817400, "start": 8197.0, "end": 8202.0, "text": " So cold production RF prediction is now a green plot rather than blue.", "tokens": [51514, 407, 3554, 4265, 26204, 17630, 307, 586, 257, 3092, 7542, 2831, 813, 3344, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08906534443730893, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.0038240510039031506}, {"id": 2037, "seek": 820200, "start": 8202.0, "end": 8207.0, "text": " And so we can want to redo everything just to make sure that you haven't made", "tokens": [50364, 400, 370, 321, 393, 528, 281, 29956, 1203, 445, 281, 652, 988, 300, 291, 2378, 380, 1027, 50614], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2038, "seek": 820200, "start": 8207.0, "end": 8208.0, "text": " any catastrophic changes.", "tokens": [50614, 604, 34915, 2962, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2039, "seek": 820200, "start": 8208.0, "end": 8210.0, "text": " You can do this one more time.", "tokens": [50664, 509, 393, 360, 341, 472, 544, 565, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2040, "seek": 820200, "start": 8210.0, "end": 8217.0, "text": " Takes just a few seconds to go through the entire pipeline and save this file", "tokens": [50764, 44347, 445, 257, 1326, 3949, 281, 352, 807, 264, 2302, 15517, 293, 3155, 341, 3991, 51114], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2041, "seek": 820200, "start": 8217.0, "end": 8218.0, "text": " close and halt.", "tokens": [51114, 1998, 293, 12479, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2042, "seek": 820200, "start": 8218.0, "end": 8221.0, "text": " Go back to your terminal, get status.", "tokens": [51164, 1037, 646, 281, 428, 14709, 11, 483, 6558, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2043, "seek": 820200, "start": 8221.0, "end": 8222.0, "text": " Two things have been changed.", "tokens": [51314, 4453, 721, 362, 668, 3105, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2044, "seek": 820200, "start": 8222.0, "end": 8223.0, "text": " And that's as we expect.", "tokens": [51364, 400, 300, 311, 382, 321, 2066, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2045, "seek": 820200, "start": 8223.0, "end": 8227.0, "text": " They changed the notebook itself that created this figure and the figure", "tokens": [51414, 814, 3105, 264, 21060, 2564, 300, 2942, 341, 2573, 293, 264, 2573, 51614], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2046, "seek": 820200, "start": 8227.0, "end": 8228.0, "text": " itself.", "tokens": [51614, 2564, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2047, "seek": 820200, "start": 8228.0, "end": 8230.0, "text": " So let's add those two files.", "tokens": [51664, 407, 718, 311, 909, 729, 732, 7098, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12882807337004562, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.002251559868454933}, {"id": 2048, "seek": 823000, "start": 8230.0, "end": 8234.0, "text": " Those two files have been modified.", "tokens": [50364, 3950, 732, 7098, 362, 668, 15873, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2049, "seek": 823000, "start": 8234.0, "end": 8240.0, "text": " So we then get push origin, your branch name, and it's now updated on GitHub.", "tokens": [50564, 407, 321, 550, 483, 2944, 4957, 11, 428, 9819, 1315, 11, 293, 309, 311, 586, 10588, 322, 23331, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2050, "seek": 823000, "start": 8240.0, "end": 8244.0, "text": " The nice thing about how GitHub handles these pull requests as a tab back to this", "tokens": [50864, 440, 1481, 551, 466, 577, 23331, 18722, 613, 2235, 12475, 382, 257, 4421, 646, 281, 341, 51064], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2051, "seek": 823000, "start": 8244.0, "end": 8247.0, "text": " Chrome tab, this commit is already added now.", "tokens": [51064, 15327, 4421, 11, 341, 5599, 307, 1217, 3869, 586, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2052, "seek": 823000, "start": 8247.0, "end": 8249.0, "text": " You actually can see the commit that was done here.", "tokens": [51214, 509, 767, 393, 536, 264, 5599, 300, 390, 1096, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2053, "seek": 823000, "start": 8249.0, "end": 8252.0, "text": " And if you click on that commit, you get to see that things that were changed.", "tokens": [51314, 400, 498, 291, 2052, 322, 300, 5599, 11, 291, 483, 281, 536, 300, 721, 300, 645, 3105, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2054, "seek": 823000, "start": 8252.0, "end": 8256.0, "text": " So the few things were changed in the IPYNB, which is not shown partly because", "tokens": [51464, 407, 264, 1326, 721, 645, 3105, 294, 264, 8671, 22315, 33, 11, 597, 307, 406, 4898, 17031, 570, 51664], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2055, "seek": 823000, "start": 8256.0, "end": 8259.0, "text": " the actual changes in the notebook don't look so great.", "tokens": [51664, 264, 3539, 2962, 294, 264, 21060, 500, 380, 574, 370, 869, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1268720552902813, "compression_ratio": 1.6843853820598007, "no_speech_prob": 0.0023229410871863365}, {"id": 2056, "seek": 825900, "start": 8259.0, "end": 8263.0, "text": " But the change in the figures has been changed.", "tokens": [50364, 583, 264, 1319, 294, 264, 9624, 575, 668, 3105, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2057, "seek": 825900, "start": 8263.0, "end": 8265.0, "text": " So this figure, the blue one was deleted.", "tokens": [50564, 407, 341, 2573, 11, 264, 3344, 472, 390, 22981, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2058, "seek": 825900, "start": 8265.0, "end": 8268.0, "text": " And the one on the right, the green one was added.", "tokens": [50664, 400, 264, 472, 322, 264, 558, 11, 264, 3092, 472, 390, 3869, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2059, "seek": 825900, "start": 8268.0, "end": 8271.0, "text": " So this is one of the reasons that changing it in the notebook, which it", "tokens": [50814, 407, 341, 307, 472, 295, 264, 4112, 300, 4473, 309, 294, 264, 21060, 11, 597, 309, 50964], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2060, "seek": 825900, "start": 8271.0, "end": 8272.0, "text": " actually did.", "tokens": [50964, 767, 630, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2061, "seek": 825900, "start": 8272.0, "end": 8274.0, "text": " So it changed the embedded figure in the notebook.", "tokens": [51014, 407, 309, 3105, 264, 16741, 2573, 294, 264, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2062, "seek": 825900, "start": 8274.0, "end": 8276.0, "text": " It's hard to see the differences there.", "tokens": [51114, 467, 311, 1152, 281, 536, 264, 7300, 456, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2063, "seek": 825900, "start": 8276.0, "end": 8280.0, "text": " This is why I advocate creating these figures in a separate folder and a separate", "tokens": [51214, 639, 307, 983, 286, 14608, 4084, 613, 9624, 294, 257, 4994, 10820, 293, 257, 4994, 51414], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2064, "seek": 825900, "start": 8280.0, "end": 8282.0, "text": " PNG file for each of them.", "tokens": [51414, 430, 30237, 3991, 337, 1184, 295, 552, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2065, "seek": 825900, "start": 8282.0, "end": 8286.0, "text": " So you see the diffs in the figures if you have feedback on the output.", "tokens": [51514, 407, 291, 536, 264, 7593, 82, 294, 264, 9624, 498, 291, 362, 5824, 322, 264, 5598, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06956531409930466, "compression_ratio": 1.9118773946360152, "no_speech_prob": 0.012046882882714272}, {"id": 2066, "seek": 828600, "start": 8286.0, "end": 8290.0, "text": " Now, as an extra piece of sugar or something nice that GitHub has given us,", "tokens": [50364, 823, 11, 382, 364, 2857, 2522, 295, 5076, 420, 746, 1481, 300, 23331, 575, 2212, 505, 11, 50564], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2067, "seek": 828600, "start": 8290.0, "end": 8294.0, "text": " there's this to side by side approach where you can see what was deleted and", "tokens": [50564, 456, 311, 341, 281, 1252, 538, 1252, 3109, 689, 291, 393, 536, 437, 390, 22981, 293, 50764], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2068, "seek": 828600, "start": 8294.0, "end": 8295.0, "text": " see what was added.", "tokens": [50764, 536, 437, 390, 3869, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2069, "seek": 828600, "start": 8295.0, "end": 8300.0, "text": " You can also choose the swipe option where as you swipe this thing across the", "tokens": [50814, 509, 393, 611, 2826, 264, 28170, 3614, 689, 382, 291, 28170, 341, 551, 2108, 264, 51064], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2070, "seek": 828600, "start": 8300.0, "end": 8303.0, "text": " figure that you've just done, you can actually see the changes that have been", "tokens": [51064, 2573, 300, 291, 600, 445, 1096, 11, 291, 393, 767, 536, 264, 2962, 300, 362, 668, 51214], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2071, "seek": 828600, "start": 8303.0, "end": 8305.0, "text": " made, which is turning the figure green.", "tokens": [51214, 1027, 11, 597, 307, 6246, 264, 2573, 3092, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2072, "seek": 828600, "start": 8305.0, "end": 8309.0, "text": " Last one is onion skin where it fades from the entire thing from behind.", "tokens": [51314, 5264, 472, 307, 10916, 3178, 689, 309, 32679, 490, 264, 2302, 551, 490, 2261, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2073, "seek": 828600, "start": 8309.0, "end": 8311.0, "text": " So this is what it currently is.", "tokens": [51514, 407, 341, 307, 437, 309, 4362, 307, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2074, "seek": 828600, "start": 8311.0, "end": 8313.0, "text": " And previously it was blue.", "tokens": [51614, 400, 8046, 309, 390, 3344, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2075, "seek": 828600, "start": 8313.0, "end": 8314.0, "text": " You can see this.", "tokens": [51714, 509, 393, 536, 341, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0858982997154122, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0017543575959280133}, {"id": 2076, "seek": 831400, "start": 8314.0, "end": 8317.0, "text": " So having this functionality is actually really nice.", "tokens": [50364, 407, 1419, 341, 14980, 307, 767, 534, 1481, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2077, "seek": 831400, "start": 8317.0, "end": 8323.0, "text": " And another reason why I advocate for this figures being submitted separately.", "tokens": [50514, 400, 1071, 1778, 983, 286, 14608, 337, 341, 9624, 885, 14405, 14759, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2078, "seek": 831400, "start": 8323.0, "end": 8327.0, "text": " Just a final note, you saw that the points are slightly different in this swipe.", "tokens": [50814, 1449, 257, 2572, 3637, 11, 291, 1866, 300, 264, 2793, 366, 4748, 819, 294, 341, 28170, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2079, "seek": 831400, "start": 8327.0, "end": 8331.0, "text": " And that's because during our test train split, we were taking a random selection", "tokens": [51014, 400, 300, 311, 570, 1830, 527, 1500, 3847, 7472, 11, 321, 645, 1940, 257, 4974, 9450, 51214], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2080, "seek": 831400, "start": 8331.0, "end": 8335.0, "text": " of points that were going to be the testing set and the training set.", "tokens": [51214, 295, 2793, 300, 645, 516, 281, 312, 264, 4997, 992, 293, 264, 3097, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2081, "seek": 831400, "start": 8335.0, "end": 8339.0, "text": " So those differences, well, shouldn't matter much and they don't change the", "tokens": [51414, 407, 729, 7300, 11, 731, 11, 4659, 380, 1871, 709, 293, 436, 500, 380, 1319, 264, 51614], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2082, "seek": 831400, "start": 8339.0, "end": 8342.0, "text": " actual scatter points, but the fit itself, as you can tell is almost completely", "tokens": [51614, 3539, 34951, 2793, 11, 457, 264, 3318, 2564, 11, 382, 291, 393, 980, 307, 1920, 2584, 51764], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2083, "seek": 831400, "start": 8342.0, "end": 8343.0, "text": " unchanged.", "tokens": [51764, 44553, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08346262916189726, "compression_ratio": 1.732899022801303, "no_speech_prob": 0.002322615124285221}, {"id": 2084, "seek": 834300, "start": 8343.0, "end": 8346.0, "text": " It's actually a nice robustness check to look at this as well.", "tokens": [50364, 467, 311, 767, 257, 1481, 13956, 1287, 1520, 281, 574, 412, 341, 382, 731, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2085, "seek": 834300, "start": 8346.0, "end": 8352.0, "text": " So once I've looked at these changes, I can now go back to this pull request", "tokens": [50514, 407, 1564, 286, 600, 2956, 412, 613, 2962, 11, 286, 393, 586, 352, 646, 281, 341, 2235, 5308, 50814], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2086, "seek": 834300, "start": 8352.0, "end": 8353.0, "text": " branch.", "tokens": [50814, 9819, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2087, "seek": 834300, "start": 8353.0, "end": 8354.0, "text": " So I need a few changes.", "tokens": [50864, 407, 286, 643, 257, 1326, 2962, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2088, "seek": 834300, "start": 8354.0, "end": 8355.0, "text": " Please make the figure green.", "tokens": [50914, 2555, 652, 264, 2573, 3092, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2089, "seek": 834300, "start": 8355.0, "end": 8357.0, "text": " I committed made the figure green.", "tokens": [50964, 286, 7784, 1027, 264, 2573, 3092, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2090, "seek": 834300, "start": 8357.0, "end": 8362.0, "text": " The only thing I need to do to update this whole threat of changes was to just", "tokens": [51064, 440, 787, 551, 286, 643, 281, 360, 281, 5623, 341, 1379, 4734, 295, 2962, 390, 281, 445, 51314], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2091, "seek": 834300, "start": 8362.0, "end": 8365.0, "text": " say get push origin branch title.", "tokens": [51314, 584, 483, 2944, 4957, 9819, 4876, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2092, "seek": 834300, "start": 8365.0, "end": 8369.0, "text": " So I'll say it looks good to me plus one.", "tokens": [51464, 407, 286, 603, 584, 309, 1542, 665, 281, 385, 1804, 472, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12894862406962626, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.036202721297740936}, {"id": 2093, "seek": 836900, "start": 8370.0, "end": 8374.0, "text": " And then clicking merge pull request will take everything from this branch", "tokens": [50414, 400, 550, 9697, 22183, 2235, 5308, 486, 747, 1203, 490, 341, 9819, 50614], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2094, "seek": 836900, "start": 8374.0, "end": 8376.0, "text": " and pull it into the master branch.", "tokens": [50614, 293, 2235, 309, 666, 264, 4505, 9819, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2095, "seek": 836900, "start": 8376.0, "end": 8381.0, "text": " So I'll say figures ready to be put into a slideshow.", "tokens": [50714, 407, 286, 603, 584, 9624, 1919, 281, 312, 829, 666, 257, 9788, 4286, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2096, "seek": 836900, "start": 8381.0, "end": 8386.0, "text": " So once you pull request is successfully merged and accepted, then you should", "tokens": [50964, 407, 1564, 291, 2235, 5308, 307, 10727, 36427, 293, 9035, 11, 550, 291, 820, 51214], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2097, "seek": 836900, "start": 8386.0, "end": 8389.0, "text": " delete the branch to keep these branches from floating around.", "tokens": [51214, 12097, 264, 9819, 281, 1066, 613, 14770, 490, 12607, 926, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2098, "seek": 836900, "start": 8389.0, "end": 8393.0, "text": " So I just deleted the branch on GitHub and should now do the same thing", "tokens": [51364, 407, 286, 445, 22981, 264, 9819, 322, 23331, 293, 820, 586, 360, 264, 912, 551, 51564], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2099, "seek": 836900, "start": 8393.0, "end": 8395.0, "text": " in your local environment.", "tokens": [51564, 294, 428, 2654, 2823, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12645314869127774, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.1966569721698761}, {"id": 2100, "seek": 839500, "start": 8395.0, "end": 8399.0, "text": " So first I'm going to check out master and I'll say get pull origin master", "tokens": [50364, 407, 700, 286, 478, 516, 281, 1520, 484, 4505, 293, 286, 603, 584, 483, 2235, 4957, 4505, 50564], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2101, "seek": 839500, "start": 8399.0, "end": 8403.0, "text": " to pull everything down from GitHub and all these changes have been made", "tokens": [50564, 281, 2235, 1203, 760, 490, 23331, 293, 439, 613, 2962, 362, 668, 1027, 50764], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2102, "seek": 839500, "start": 8403.0, "end": 8407.0, "text": " and say get branch minus D Jonathan predict.", "tokens": [50764, 293, 584, 483, 9819, 3175, 413, 15471, 6069, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2103, "seek": 839500, "start": 8407.0, "end": 8411.0, "text": " So I've deleted the prediction branch and get does a final check to make sure", "tokens": [50964, 407, 286, 600, 22981, 264, 17630, 9819, 293, 483, 775, 257, 2572, 1520, 281, 652, 988, 51164], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2104, "seek": 839500, "start": 8411.0, "end": 8414.0, "text": " that any of the changes that have been made on that prediction branch have", "tokens": [51164, 300, 604, 295, 264, 2962, 300, 362, 668, 1027, 322, 300, 17630, 9819, 362, 51314], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2105, "seek": 839500, "start": 8414.0, "end": 8415.0, "text": " been already pulled into master.", "tokens": [51314, 668, 1217, 7373, 666, 4505, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2106, "seek": 839500, "start": 8415.0, "end": 8418.0, "text": " So if you just try to do this and it doesn't think it's been fully merged,", "tokens": [51364, 407, 498, 291, 445, 853, 281, 360, 341, 293, 309, 1177, 380, 519, 309, 311, 668, 4498, 36427, 11, 51514], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2107, "seek": 839500, "start": 8418.0, "end": 8421.0, "text": " you get an error at that point and you have to figure out what happened at", "tokens": [51514, 291, 483, 364, 6713, 412, 300, 935, 293, 291, 362, 281, 2573, 484, 437, 2011, 412, 51664], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2108, "seek": 839500, "start": 8421.0, "end": 8422.0, "text": " that stage.", "tokens": [51664, 300, 3233, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08409363882882255, "compression_ratio": 1.8556701030927836, "no_speech_prob": 0.04884319007396698}, {"id": 2109, "seek": 842200, "start": 8422.0, "end": 8426.0, "text": " In this video, we just over reviewed the basic process of going through a", "tokens": [50364, 682, 341, 960, 11, 321, 445, 670, 18429, 264, 3875, 1399, 295, 516, 807, 257, 50564], "temperature": 0.0, "avg_logprob": -0.09395399093627929, "compression_ratio": 1.7398373983739837, "no_speech_prob": 0.003823200473561883}, {"id": 2110, "seek": 842200, "start": 8426.0, "end": 8430.0, "text": " pull request and how the peer review process works in a pull request.", "tokens": [50564, 2235, 5308, 293, 577, 264, 15108, 3131, 1399, 1985, 294, 257, 2235, 5308, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09395399093627929, "compression_ratio": 1.7398373983739837, "no_speech_prob": 0.003823200473561883}, {"id": 2111, "seek": 842200, "start": 8430.0, "end": 8438.0, "text": " So we saw how to merge our development branch into master after doing a pull request.", "tokens": [50764, 407, 321, 1866, 577, 281, 22183, 527, 3250, 9819, 666, 4505, 934, 884, 257, 2235, 5308, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09395399093627929, "compression_ratio": 1.7398373983739837, "no_speech_prob": 0.003823200473561883}, {"id": 2112, "seek": 842200, "start": 8438.0, "end": 8443.0, "text": " In this video, we'll start our data science project number two.", "tokens": [51164, 682, 341, 960, 11, 321, 603, 722, 527, 1412, 3497, 1716, 1230, 732, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09395399093627929, "compression_ratio": 1.7398373983739837, "no_speech_prob": 0.003823200473561883}, {"id": 2113, "seek": 842200, "start": 8443.0, "end": 8447.0, "text": " And in this project, our main focus will be to focus on various plotting", "tokens": [51414, 400, 294, 341, 1716, 11, 527, 2135, 1879, 486, 312, 281, 1879, 322, 3683, 41178, 51614], "temperature": 0.0, "avg_logprob": -0.09395399093627929, "compression_ratio": 1.7398373983739837, "no_speech_prob": 0.003823200473561883}, {"id": 2114, "seek": 842200, "start": 8447.0, "end": 8450.0, "text": " and statistical libraries that I think you should know about.", "tokens": [51614, 293, 22820, 15148, 300, 286, 519, 291, 820, 458, 466, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09395399093627929, "compression_ratio": 1.7398373983739837, "no_speech_prob": 0.003823200473561883}, {"id": 2115, "seek": 845000, "start": 8450.0, "end": 8455.0, "text": " All right, so to start a new data science project, let's start out by", "tokens": [50364, 1057, 558, 11, 370, 281, 722, 257, 777, 1412, 3497, 1716, 11, 718, 311, 722, 484, 538, 50614], "temperature": 0.0, "avg_logprob": -0.13121082005875834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.04465501382946968}, {"id": 2116, "seek": 845000, "start": 8455.0, "end": 8461.0, "text": " going to GitHub and signing in going up to the plus by our little icon and", "tokens": [50614, 516, 281, 23331, 293, 13393, 294, 516, 493, 281, 264, 1804, 538, 527, 707, 6528, 293, 50914], "temperature": 0.0, "avg_logprob": -0.13121082005875834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.04465501382946968}, {"id": 2117, "seek": 845000, "start": 8461.0, "end": 8463.0, "text": " clicking on a new repository.", "tokens": [50914, 9697, 322, 257, 777, 25841, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13121082005875834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.04465501382946968}, {"id": 2118, "seek": 845000, "start": 8463.0, "end": 8471.0, "text": " So we can call this data vis project to in this case and give it a", "tokens": [51014, 407, 321, 393, 818, 341, 1412, 1452, 1716, 281, 294, 341, 1389, 293, 976, 309, 257, 51414], "temperature": 0.0, "avg_logprob": -0.13121082005875834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.04465501382946968}, {"id": 2119, "seek": 845000, "start": 8471.0, "end": 8475.0, "text": " description that says I will make it public.", "tokens": [51414, 3855, 300, 1619, 286, 486, 652, 309, 1908, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13121082005875834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.04465501382946968}, {"id": 2120, "seek": 845000, "start": 8475.0, "end": 8478.0, "text": " So you can see this project as you go forward.", "tokens": [51614, 407, 291, 393, 536, 341, 1716, 382, 291, 352, 2128, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13121082005875834, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.04465501382946968}, {"id": 2121, "seek": 847800, "start": 8478.0, "end": 8480.0, "text": " We'll initialize with a read me.", "tokens": [50364, 492, 603, 5883, 1125, 365, 257, 1401, 385, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2122, "seek": 847800, "start": 8480.0, "end": 8483.0, "text": " We will include a Python dot get ignore.", "tokens": [50464, 492, 486, 4090, 257, 15329, 5893, 483, 11200, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2123, "seek": 847800, "start": 8483.0, "end": 8488.0, "text": " We'll add an MIT license and create the repository.", "tokens": [50614, 492, 603, 909, 364, 13100, 10476, 293, 1884, 264, 25841, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2124, "seek": 847800, "start": 8488.0, "end": 8493.0, "text": " Once we've created it, go to this SSH option, click in this box.", "tokens": [50864, 3443, 321, 600, 2942, 309, 11, 352, 281, 341, 12238, 39, 3614, 11, 2052, 294, 341, 2424, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2125, "seek": 847800, "start": 8493.0, "end": 8497.0, "text": " It'll select all the text by default command C copies it, go back to our", "tokens": [51114, 467, 603, 3048, 439, 264, 2487, 538, 7576, 5622, 383, 14341, 309, 11, 352, 646, 281, 527, 51314], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2126, "seek": 847800, "start": 8497.0, "end": 8502.0, "text": " terminal, say get clone and then command V to paste that URL.", "tokens": [51314, 14709, 11, 584, 483, 26506, 293, 550, 5622, 691, 281, 9163, 300, 12905, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2127, "seek": 847800, "start": 8502.0, "end": 8507.0, "text": " All right, so let's CD into data vis projects and look at what we have here.", "tokens": [51564, 1057, 558, 11, 370, 718, 311, 6743, 666, 1412, 1452, 4455, 293, 574, 412, 437, 321, 362, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15671625390516974, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.12409590929746628}, {"id": 2128, "seek": 850700, "start": 8507.0, "end": 8509.0, "text": " And we're currently on the master branch.", "tokens": [50364, 400, 321, 434, 4362, 322, 264, 4505, 9819, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10585367679595947, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.012424830347299576}, {"id": 2129, "seek": 850700, "start": 8509.0, "end": 8514.0, "text": " So first step, let's create a development branch and we'll call it", "tokens": [50464, 407, 700, 1823, 11, 718, 311, 1884, 257, 3250, 9819, 293, 321, 603, 818, 309, 50714], "temperature": 0.0, "avg_logprob": -0.10585367679595947, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.012424830347299576}, {"id": 2130, "seek": 850700, "start": 8514.0, "end": 8519.0, "text": " Jonathan vis and let's create our normal directory structure.", "tokens": [50714, 15471, 1452, 293, 718, 311, 1884, 527, 2710, 21120, 3877, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10585367679595947, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.012424830347299576}, {"id": 2131, "seek": 850700, "start": 8519.0, "end": 8525.0, "text": " So we have data deliver develop figures start with and I happen to", "tokens": [50964, 407, 321, 362, 1412, 4239, 1499, 9624, 722, 365, 293, 286, 1051, 281, 51264], "temperature": 0.0, "avg_logprob": -0.10585367679595947, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.012424830347299576}, {"id": 2132, "seek": 850700, "start": 8525.0, "end": 8529.0, "text": " know that I've already started a few of these notebooks.", "tokens": [51264, 458, 300, 286, 600, 1217, 1409, 257, 1326, 295, 613, 43782, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10585367679595947, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.012424830347299576}, {"id": 2133, "seek": 850700, "start": 8529.0, "end": 8534.0, "text": " So I'll move them from a previous location into our develop folder.", "tokens": [51464, 407, 286, 603, 1286, 552, 490, 257, 3894, 4914, 666, 527, 1499, 10820, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10585367679595947, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.012424830347299576}, {"id": 2134, "seek": 853400, "start": 8534.0, "end": 8536.0, "text": " So let's look at our develop folder.", "tokens": [50364, 407, 718, 311, 574, 412, 527, 1499, 10820, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2135, "seek": 853400, "start": 8536.0, "end": 8537.0, "text": " Okay, we got some stuff there.", "tokens": [50464, 1033, 11, 321, 658, 512, 1507, 456, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2136, "seek": 853400, "start": 8537.0, "end": 8541.0, "text": " And now that we have a new branch and we have a new directory structure", "tokens": [50514, 400, 586, 300, 321, 362, 257, 777, 9819, 293, 321, 362, 257, 777, 21120, 3877, 50714], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2137, "seek": 853400, "start": 8541.0, "end": 8542.0, "text": " and some stuff to look at.", "tokens": [50714, 293, 512, 1507, 281, 574, 412, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2138, "seek": 853400, "start": 8542.0, "end": 8545.0, "text": " Let's start up the Jupyter notebook server.", "tokens": [50764, 961, 311, 722, 493, 264, 22125, 88, 391, 21060, 7154, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2139, "seek": 853400, "start": 8545.0, "end": 8548.0, "text": " All right, so we see the same directories we were just looking at in the", "tokens": [50914, 1057, 558, 11, 370, 321, 536, 264, 912, 5391, 530, 321, 645, 445, 1237, 412, 294, 264, 51064], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2140, "seek": 853400, "start": 8548.0, "end": 8549.0, "text": " terminal.", "tokens": [51064, 14709, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2141, "seek": 853400, "start": 8549.0, "end": 8553.0, "text": " I will now right click on this tab and pin this tab so that it goes all the", "tokens": [51114, 286, 486, 586, 558, 2052, 322, 341, 4421, 293, 5447, 341, 4421, 370, 300, 309, 1709, 439, 264, 51314], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2142, "seek": 853400, "start": 8553.0, "end": 8556.0, "text": " way to the left and stays in place so that if I have a lot of tabs because", "tokens": [51314, 636, 281, 264, 1411, 293, 10834, 294, 1081, 370, 300, 498, 286, 362, 257, 688, 295, 20743, 570, 51464], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2143, "seek": 853400, "start": 8556.0, "end": 8559.0, "text": " I'm searching for a bunch of different things, I always know where to go", "tokens": [51464, 286, 478, 10808, 337, 257, 3840, 295, 819, 721, 11, 286, 1009, 458, 689, 281, 352, 51614], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2144, "seek": 853400, "start": 8559.0, "end": 8561.0, "text": " back to find the home server directory.", "tokens": [51614, 646, 281, 915, 264, 1280, 7154, 21120, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08008539910409965, "compression_ratio": 1.7738853503184713, "no_speech_prob": 0.0025505758821964264}, {"id": 2145, "seek": 856100, "start": 8561.0, "end": 8564.0, "text": " And I just find that useful to pin that tab all the way to the left.", "tokens": [50364, 400, 286, 445, 915, 300, 4420, 281, 5447, 300, 4421, 439, 264, 636, 281, 264, 1411, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2146, "seek": 856100, "start": 8564.0, "end": 8567.0, "text": " All right, so let's take a look at some of the notebooks.", "tokens": [50514, 1057, 558, 11, 370, 718, 311, 747, 257, 574, 412, 512, 295, 264, 43782, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2147, "seek": 856100, "start": 8567.0, "end": 8573.0, "text": " I've already pre populated what I'll do here is I only have my usual date", "tokens": [50664, 286, 600, 1217, 659, 32998, 437, 286, 603, 360, 510, 307, 286, 787, 362, 452, 7713, 4002, 50964], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2148, "seek": 856100, "start": 8573.0, "end": 8577.0, "text": " and then my initials at the top of the page from the actual name of my", "tokens": [50964, 293, 550, 452, 5883, 82, 412, 264, 1192, 295, 264, 3028, 490, 264, 3539, 1315, 295, 452, 51164], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2149, "seek": 856100, "start": 8577.0, "end": 8580.0, "text": " notebook, just including your short description, which is exploratory", "tokens": [51164, 21060, 11, 445, 3009, 428, 2099, 3855, 11, 597, 307, 24765, 4745, 51314], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2150, "seek": 856100, "start": 8580.0, "end": 8582.0, "text": " data analysis, which is pretty long title.", "tokens": [51314, 1412, 5215, 11, 597, 307, 1238, 938, 4876, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2151, "seek": 856100, "start": 8582.0, "end": 8586.0, "text": " So I'll do all caps EDA and that is a standard way of talking about that.", "tokens": [51414, 407, 286, 603, 360, 439, 13855, 462, 7509, 293, 300, 307, 257, 3832, 636, 295, 1417, 466, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09292494664426709, "compression_ratio": 1.6534296028880866, "no_speech_prob": 0.008314184844493866}, {"id": 2152, "seek": 858600, "start": 8586.0, "end": 8591.0, "text": " So I'll view and toggle the header and toggle the toolbar just so that we", "tokens": [50364, 407, 286, 603, 1910, 293, 31225, 264, 23117, 293, 31225, 264, 47715, 445, 370, 300, 321, 50614], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2153, "seek": 858600, "start": 8591.0, "end": 8592.0, "text": " have some extra space.", "tokens": [50614, 362, 512, 2857, 1901, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2154, "seek": 858600, "start": 8592.0, "end": 8595.0, "text": " Remember, if you want to save it when you're in this kind of configuration,", "tokens": [50664, 5459, 11, 498, 291, 528, 281, 3155, 309, 562, 291, 434, 294, 341, 733, 295, 11694, 11, 50814], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2155, "seek": 858600, "start": 8595.0, "end": 8597.0, "text": " you just command S to save it.", "tokens": [50814, 291, 445, 5622, 318, 281, 3155, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2156, "seek": 858600, "start": 8597.0, "end": 8600.0, "text": " So one more time, I'll just give you a brief overview of what I'm hoping to", "tokens": [50914, 407, 472, 544, 565, 11, 286, 603, 445, 976, 291, 257, 5353, 12492, 295, 437, 286, 478, 7159, 281, 51064], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2157, "seek": 858600, "start": 8600.0, "end": 8601.0, "text": " do here.", "tokens": [51064, 360, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2158, "seek": 858600, "start": 8601.0, "end": 8603.0, "text": " So this isn't to teach you how to do data science.", "tokens": [51114, 407, 341, 1943, 380, 281, 2924, 291, 577, 281, 360, 1412, 3497, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2159, "seek": 858600, "start": 8603.0, "end": 8607.0, "text": " It's more of an exposure to the tools that I think most people haven't seen", "tokens": [51214, 467, 311, 544, 295, 364, 10420, 281, 264, 3873, 300, 286, 519, 881, 561, 2378, 380, 1612, 51414], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2160, "seek": 858600, "start": 8607.0, "end": 8609.0, "text": " all of them or haven't seen enough of them.", "tokens": [51414, 439, 295, 552, 420, 2378, 380, 1612, 1547, 295, 552, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2161, "seek": 858600, "start": 8609.0, "end": 8614.0, "text": " And I just think these tools will allow you to do your data science much", "tokens": [51514, 400, 286, 445, 519, 613, 3873, 486, 2089, 291, 281, 360, 428, 1412, 3497, 709, 51764], "temperature": 0.0, "avg_logprob": -0.06432695258153628, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.3735496699810028}, {"id": 2162, "seek": 861400, "start": 8614.0, "end": 8617.0, "text": " more efficiently and usefully.", "tokens": [50364, 544, 19621, 293, 764, 2277, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2163, "seek": 861400, "start": 8617.0, "end": 8620.0, "text": " I'll go over a few of these plotting and statistical packages that you might", "tokens": [50514, 286, 603, 352, 670, 257, 1326, 295, 613, 41178, 293, 22820, 17401, 300, 291, 1062, 50664], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2164, "seek": 861400, "start": 8620.0, "end": 8621.0, "text": " not know about.", "tokens": [50664, 406, 458, 466, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2165, "seek": 861400, "start": 8621.0, "end": 8624.0, "text": " So the first thing we have is importing map plot lib inline.", "tokens": [50714, 407, 264, 700, 551, 321, 362, 307, 43866, 4471, 7542, 22854, 294, 1889, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2166, "seek": 861400, "start": 8624.0, "end": 8627.0, "text": " Almost all these plotting libraries uses map plot lib.", "tokens": [50864, 12627, 439, 613, 41178, 15148, 4960, 4471, 7542, 22854, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2167, "seek": 861400, "start": 8627.0, "end": 8628.0, "text": " So I'll be using that for now.", "tokens": [51014, 407, 286, 603, 312, 1228, 300, 337, 586, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2168, "seek": 861400, "start": 8628.0, "end": 8632.0, "text": " And I'm importing map plot lib dot pie plot as PLT, which is the", "tokens": [51064, 400, 286, 478, 43866, 4471, 7542, 22854, 5893, 1730, 7542, 382, 6999, 51, 11, 597, 307, 264, 51264], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2169, "seek": 861400, "start": 8632.0, "end": 8633.0, "text": " standard way of doing that.", "tokens": [51264, 3832, 636, 295, 884, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2170, "seek": 861400, "start": 8633.0, "end": 8637.0, "text": " Seaborn as SNS, which is the standard way of importing Seaborn,", "tokens": [51314, 1100, 455, 1865, 382, 13955, 50, 11, 597, 307, 264, 3832, 636, 295, 43866, 1100, 455, 1865, 11, 51514], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2171, "seek": 861400, "start": 8637.0, "end": 8640.0, "text": " importing pandas as PD, NumPy as NP.", "tokens": [51514, 43866, 4565, 296, 382, 10464, 11, 22592, 47, 88, 382, 38611, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13835673224657102, "compression_ratio": 1.8267716535433072, "no_speech_prob": 0.03257213532924652}, {"id": 2172, "seek": 864000, "start": 8640.0, "end": 8644.0, "text": " I'll also load in some data sets from scikit-learn and importing some", "tokens": [50364, 286, 603, 611, 3677, 294, 512, 1412, 6352, 490, 2180, 22681, 12, 306, 1083, 293, 43866, 512, 50564], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2173, "seek": 864000, "start": 8644.0, "end": 8648.0, "text": " stats models, which I'll be talking about at length in a later video.", "tokens": [50564, 18152, 5245, 11, 597, 286, 603, 312, 1417, 466, 412, 4641, 294, 257, 1780, 960, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2174, "seek": 864000, "start": 8648.0, "end": 8649.0, "text": " Execute this cell.", "tokens": [50764, 17662, 1169, 341, 2815, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2175, "seek": 864000, "start": 8649.0, "end": 8652.0, "text": " Now, if I do shift return, it will execute it and go to the next cell.", "tokens": [50814, 823, 11, 498, 286, 360, 5513, 2736, 11, 309, 486, 14483, 309, 293, 352, 281, 264, 958, 2815, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2176, "seek": 864000, "start": 8652.0, "end": 8656.0, "text": " If I hold down control and hit return, it will execute the cell in place,", "tokens": [50964, 759, 286, 1797, 760, 1969, 293, 2045, 2736, 11, 309, 486, 14483, 264, 2815, 294, 1081, 11, 51164], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2177, "seek": 864000, "start": 8656.0, "end": 8658.0, "text": " and it won't go to the next cell.", "tokens": [51164, 293, 309, 1582, 380, 352, 281, 264, 958, 2815, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2178, "seek": 864000, "start": 8658.0, "end": 8662.0, "text": " So I can continue to stay in the same cell if I hit control and return.", "tokens": [51264, 407, 286, 393, 2354, 281, 1754, 294, 264, 912, 2815, 498, 286, 2045, 1969, 293, 2736, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2179, "seek": 864000, "start": 8662.0, "end": 8666.0, "text": " I've used Seaborn in other videos, but I would really like to just double", "tokens": [51464, 286, 600, 1143, 1100, 455, 1865, 294, 661, 2145, 11, 457, 286, 576, 534, 411, 281, 445, 3834, 51664], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2180, "seek": 864000, "start": 8666.0, "end": 8668.0, "text": " emphasize how useful this is.", "tokens": [51664, 16078, 577, 4420, 341, 307, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08204191799821525, "compression_ratio": 1.78125, "no_speech_prob": 0.03113541193306446}, {"id": 2181, "seek": 866800, "start": 8668.0, "end": 8672.0, "text": " You can find the main library for this by Google searching Seaborn,", "tokens": [50364, 509, 393, 915, 264, 2135, 6405, 337, 341, 538, 3329, 10808, 1100, 455, 1865, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2182, "seek": 866800, "start": 8672.0, "end": 8675.0, "text": " and Seaborn Python should do it.", "tokens": [50564, 293, 1100, 455, 1865, 15329, 820, 360, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2183, "seek": 866800, "start": 8675.0, "end": 8679.0, "text": " And the top result is the statistical data visualization library here.", "tokens": [50714, 400, 264, 1192, 1874, 307, 264, 22820, 1412, 25801, 6405, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2184, "seek": 866800, "start": 8679.0, "end": 8682.0, "text": " This is what you should see, something like this, unless he's updated the page.", "tokens": [50914, 639, 307, 437, 291, 820, 536, 11, 746, 411, 341, 11, 5969, 415, 311, 10588, 264, 3028, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2185, "seek": 866800, "start": 8682.0, "end": 8685.0, "text": " And this website has a lot of really good information on it.", "tokens": [51064, 400, 341, 3144, 575, 257, 688, 295, 534, 665, 1589, 322, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2186, "seek": 866800, "start": 8685.0, "end": 8686.0, "text": " The documentation is excellent.", "tokens": [51214, 440, 14333, 307, 7103, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2187, "seek": 866800, "start": 8686.0, "end": 8689.0, "text": " The features with these different tutorials is also excellent.", "tokens": [51264, 440, 4122, 365, 613, 819, 17616, 307, 611, 7103, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2188, "seek": 866800, "start": 8689.0, "end": 8693.0, "text": " These images that you can click on here will show you different capability,", "tokens": [51414, 1981, 5267, 300, 291, 393, 2052, 322, 510, 486, 855, 291, 819, 13759, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2189, "seek": 866800, "start": 8693.0, "end": 8695.0, "text": " the tutorial and the gallery.", "tokens": [51614, 264, 7073, 293, 264, 18378, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09505003788432137, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.036194149404764175}, {"id": 2190, "seek": 869500, "start": 8695.0, "end": 8698.0, "text": " If you click on gallery, you get to see many different visualization types", "tokens": [50364, 759, 291, 2052, 322, 18378, 11, 291, 483, 281, 536, 867, 819, 25801, 3467, 50514], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2191, "seek": 869500, "start": 8698.0, "end": 8701.0, "text": " that Seaborn makes really easy, especially like heat map.", "tokens": [50514, 300, 1100, 455, 1865, 1669, 534, 1858, 11, 2318, 411, 3738, 4471, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2192, "seek": 869500, "start": 8701.0, "end": 8703.0, "text": " That's a nice one.", "tokens": [50664, 663, 311, 257, 1481, 472, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2193, "seek": 869500, "start": 8703.0, "end": 8705.0, "text": " Look through the example gallery.", "tokens": [50764, 2053, 807, 264, 1365, 18378, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2194, "seek": 869500, "start": 8705.0, "end": 8708.0, "text": " If you have some data and you have some sense that you should be able to visualize it in a way,", "tokens": [50864, 759, 291, 362, 512, 1412, 293, 291, 362, 512, 2020, 300, 291, 820, 312, 1075, 281, 23273, 309, 294, 257, 636, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2195, "seek": 869500, "start": 8708.0, "end": 8711.0, "text": " see if Seaborn has a response to that.", "tokens": [51014, 536, 498, 1100, 455, 1865, 575, 257, 4134, 281, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2196, "seek": 869500, "start": 8711.0, "end": 8714.0, "text": " So let's go back to our notebook and load in some data.", "tokens": [51164, 407, 718, 311, 352, 646, 281, 527, 21060, 293, 3677, 294, 512, 1412, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2197, "seek": 869500, "start": 8714.0, "end": 8718.0, "text": " So Seaborn SNS has data sets that you can load in by default.", "tokens": [51314, 407, 1100, 455, 1865, 13955, 50, 575, 1412, 6352, 300, 291, 393, 3677, 294, 538, 7576, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2198, "seek": 869500, "start": 8718.0, "end": 8721.0, "text": " We will load in the Titanic data set.", "tokens": [51514, 492, 486, 3677, 294, 264, 42183, 1412, 992, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06868360981796727, "compression_ratio": 1.762962962962963, "no_speech_prob": 0.022965025156736374}, {"id": 2199, "seek": 872100, "start": 8721.0, "end": 8725.0, "text": " This is actually the data of passengers on the ill-fated Titanic.", "tokens": [50364, 639, 307, 767, 264, 1412, 295, 18436, 322, 264, 3171, 12, 69, 770, 42183, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2200, "seek": 872100, "start": 8725.0, "end": 8731.0, "text": " And it has various information about them, their age, their sex, their class of ticket.", "tokens": [50564, 400, 309, 575, 3683, 1589, 466, 552, 11, 641, 3205, 11, 641, 3260, 11, 641, 1508, 295, 10550, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2201, "seek": 872100, "start": 8731.0, "end": 8733.0, "text": " So first class, second class, third class.", "tokens": [50864, 407, 700, 1508, 11, 1150, 1508, 11, 2636, 1508, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2202, "seek": 872100, "start": 8733.0, "end": 8736.0, "text": " And it talks about whether or not they survived the crash.", "tokens": [50964, 400, 309, 6686, 466, 1968, 420, 406, 436, 14433, 264, 8252, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2203, "seek": 872100, "start": 8736.0, "end": 8742.0, "text": " So doing a factor plot like this where you set this G object to be equal to this factor plot", "tokens": [51114, 407, 884, 257, 5952, 7542, 411, 341, 689, 291, 992, 341, 460, 2657, 281, 312, 2681, 281, 341, 5952, 7542, 51414], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2204, "seek": 872100, "start": 8742.0, "end": 8745.0, "text": " and then modify the G label like this.", "tokens": [51414, 293, 550, 16927, 264, 460, 7645, 411, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2205, "seek": 872100, "start": 8745.0, "end": 8750.0, "text": " This is modified from a Seaborn example, commenting out this hue equals sex line.", "tokens": [51564, 639, 307, 15873, 490, 257, 1100, 455, 1865, 1365, 11, 29590, 484, 341, 24967, 6915, 3260, 1622, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09842472717541606, "compression_ratio": 1.737037037037037, "no_speech_prob": 0.12064170092344284}, {"id": 2206, "seek": 875000, "start": 8750.0, "end": 8752.0, "text": " And I'll talk about that in a second.", "tokens": [50364, 400, 286, 603, 751, 466, 300, 294, 257, 1150, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2207, "seek": 875000, "start": 8752.0, "end": 8755.0, "text": " But I will shift return and execute this cell.", "tokens": [50464, 583, 286, 486, 5513, 2736, 293, 14483, 341, 2815, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2208, "seek": 875000, "start": 8755.0, "end": 8762.0, "text": " What you see here is the survival probability against the class of passengers on Titanic held.", "tokens": [50614, 708, 291, 536, 510, 307, 264, 12559, 8482, 1970, 264, 1508, 295, 18436, 322, 42183, 5167, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2209, "seek": 875000, "start": 8762.0, "end": 8765.0, "text": " You can see that first class had by far the best survival probability,", "tokens": [50964, 509, 393, 536, 300, 700, 1508, 632, 538, 1400, 264, 1151, 12559, 8482, 11, 51114], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2210, "seek": 875000, "start": 8765.0, "end": 8768.0, "text": " followed by second, followed finally by third class.", "tokens": [51114, 6263, 538, 1150, 11, 6263, 2721, 538, 2636, 1508, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2211, "seek": 875000, "start": 8768.0, "end": 8773.0, "text": " So this is a very nice high level summary of the data that underlies this.", "tokens": [51264, 407, 341, 307, 257, 588, 1481, 1090, 1496, 12691, 295, 264, 1412, 300, 833, 24119, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2212, "seek": 875000, "start": 8773.0, "end": 8779.0, "text": " Some of the nice things about Seaborn is that you can actually give it dimensions to also give you the same plot.", "tokens": [51514, 2188, 295, 264, 1481, 721, 466, 1100, 455, 1865, 307, 300, 291, 393, 767, 976, 309, 12819, 281, 611, 976, 291, 264, 912, 7542, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06484229624772272, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.006901250220835209}, {"id": 2213, "seek": 877900, "start": 8779.0, "end": 8782.0, "text": " So let's uncomment this hue equals sex line and see what that does.", "tokens": [50364, 407, 718, 311, 8585, 518, 341, 24967, 6915, 3260, 1622, 293, 536, 437, 300, 775, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2214, "seek": 877900, "start": 8782.0, "end": 8786.0, "text": " So what you see here is each of these classes is now been split out by sex.", "tokens": [50514, 407, 437, 291, 536, 510, 307, 1184, 295, 613, 5359, 307, 586, 668, 7472, 484, 538, 3260, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2215, "seek": 877900, "start": 8786.0, "end": 8789.0, "text": " So male and female, survivability for first class.", "tokens": [50714, 407, 7133, 293, 6556, 11, 12324, 2310, 337, 700, 1508, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2216, "seek": 877900, "start": 8789.0, "end": 8793.0, "text": " You can tell the very high difference in probability for surviving in each of those,", "tokens": [50864, 509, 393, 980, 264, 588, 1090, 2649, 294, 8482, 337, 24948, 294, 1184, 295, 729, 11, 51064], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2217, "seek": 877900, "start": 8793.0, "end": 8796.0, "text": " whether you're male or female in each of the classes.", "tokens": [51064, 1968, 291, 434, 7133, 420, 6556, 294, 1184, 295, 264, 5359, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2218, "seek": 877900, "start": 8796.0, "end": 8801.0, "text": " So this tells you a more rich and deeper story of the underlying data set than the previous plot.", "tokens": [51214, 407, 341, 5112, 291, 257, 544, 4593, 293, 7731, 1657, 295, 264, 14217, 1412, 992, 813, 264, 3894, 7542, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2219, "seek": 877900, "start": 8801.0, "end": 8805.0, "text": " And you can see the first, second, third class, all of the different responses here.", "tokens": [51464, 400, 291, 393, 536, 264, 700, 11, 1150, 11, 2636, 1508, 11, 439, 295, 264, 819, 13019, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2220, "seek": 877900, "start": 8805.0, "end": 8808.0, "text": " So this is just one aspect of Seaborn.", "tokens": [51664, 407, 341, 307, 445, 472, 4171, 295, 1100, 455, 1865, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06946135581807887, "compression_ratio": 1.8078175895765471, "no_speech_prob": 0.0028888722881674767}, {"id": 2221, "seek": 880800, "start": 8808.0, "end": 8811.0, "text": " I recommend getting to know it and use it as much as you can.", "tokens": [50364, 286, 2748, 1242, 281, 458, 309, 293, 764, 309, 382, 709, 382, 291, 393, 13, 50514], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2222, "seek": 880800, "start": 8811.0, "end": 8814.0, "text": " And that's going to be all for this video.", "tokens": [50514, 400, 300, 311, 516, 281, 312, 439, 337, 341, 960, 13, 50664], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2223, "seek": 880800, "start": 8814.0, "end": 8817.0, "text": " We've set up in this video a new Git repository.", "tokens": [50664, 492, 600, 992, 493, 294, 341, 960, 257, 777, 16939, 25841, 13, 50814], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2224, "seek": 880800, "start": 8817.0, "end": 8819.0, "text": " We've started a new development branch.", "tokens": [50814, 492, 600, 1409, 257, 777, 3250, 9819, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2225, "seek": 880800, "start": 8819.0, "end": 8823.0, "text": " We have our directory structure set up as we like to do it for our data science projects.", "tokens": [50914, 492, 362, 527, 21120, 3877, 992, 493, 382, 321, 411, 281, 360, 309, 337, 527, 1412, 3497, 4455, 13, 51114], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2226, "seek": 880800, "start": 8823.0, "end": 8829.0, "text": " And we've taken a look at the Seaborn visualization library.", "tokens": [51114, 400, 321, 600, 2726, 257, 574, 412, 264, 1100, 455, 1865, 25801, 6405, 13, 51414], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2227, "seek": 880800, "start": 8829.0, "end": 8834.0, "text": " In this video, we'll continue to look at some visualization methods and techniques.", "tokens": [51414, 682, 341, 960, 11, 321, 603, 2354, 281, 574, 412, 512, 25801, 7150, 293, 7512, 13, 51664], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2228, "seek": 880800, "start": 8834.0, "end": 8837.0, "text": " So let's go on to exploratory data analysis two.", "tokens": [51664, 407, 718, 311, 352, 322, 281, 24765, 4745, 1412, 5215, 732, 13, 51814], "temperature": 0.0, "avg_logprob": -0.056695621490478514, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.012047214433550835}, {"id": 2229, "seek": 883700, "start": 8837.0, "end": 8844.0, "text": " Again, it starts off the same way with Matplotlib inline and the various other things being imported.", "tokens": [50364, 3764, 11, 309, 3719, 766, 264, 912, 636, 365, 6789, 564, 310, 38270, 294, 1889, 293, 264, 3683, 661, 721, 885, 25524, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08067152133354774, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.010648037306964397}, {"id": 2230, "seek": 883700, "start": 8844.0, "end": 8846.0, "text": " This warning message, which we can ignore for now.", "tokens": [50714, 639, 9164, 3636, 11, 597, 321, 393, 11200, 337, 586, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08067152133354774, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.010648037306964397}, {"id": 2231, "seek": 883700, "start": 8846.0, "end": 8850.0, "text": " So we will load in this Boston data from the scikit-learn data sets.", "tokens": [50814, 407, 321, 486, 3677, 294, 341, 12333, 1412, 490, 264, 2180, 22681, 12, 306, 1083, 1412, 6352, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08067152133354774, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.010648037306964397}, {"id": 2232, "seek": 883700, "start": 8850.0, "end": 8855.0, "text": " And we will first of all print what the data dictionary describes it as.", "tokens": [51014, 400, 321, 486, 700, 295, 439, 4482, 437, 264, 1412, 25890, 15626, 309, 382, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08067152133354774, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.010648037306964397}, {"id": 2233, "seek": 883700, "start": 8855.0, "end": 8860.0, "text": " The way this load Boston gets imported, I'm calling it a data frame dictionary", "tokens": [51264, 440, 636, 341, 3677, 12333, 2170, 25524, 11, 286, 478, 5141, 309, 257, 1412, 3920, 25890, 51514], "temperature": 0.0, "avg_logprob": -0.08067152133354774, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.010648037306964397}, {"id": 2234, "seek": 883700, "start": 8860.0, "end": 8863.0, "text": " and just calling this description key.", "tokens": [51514, 293, 445, 5141, 341, 3855, 2141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08067152133354774, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.010648037306964397}, {"id": 2235, "seek": 886300, "start": 8863.0, "end": 8869.0, "text": " So let's toggle the top header and the top toolbar to give us some extra space.", "tokens": [50364, 407, 718, 311, 31225, 264, 1192, 23117, 293, 264, 1192, 47715, 281, 976, 505, 512, 2857, 1901, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06850294673114742, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.0036489523481577635}, {"id": 2236, "seek": 886300, "start": 8869.0, "end": 8873.0, "text": " And we see that this is the Boston house prices data set.", "tokens": [50664, 400, 321, 536, 300, 341, 307, 264, 12333, 1782, 7901, 1412, 992, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06850294673114742, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.0036489523481577635}, {"id": 2237, "seek": 886300, "start": 8873.0, "end": 8878.0, "text": " Now, it's worth reading through this data set and knowing what each of these attributes actually means", "tokens": [50864, 823, 11, 309, 311, 3163, 3760, 807, 341, 1412, 992, 293, 5276, 437, 1184, 295, 613, 17212, 767, 1355, 51114], "temperature": 0.0, "avg_logprob": -0.06850294673114742, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.0036489523481577635}, {"id": 2238, "seek": 886300, "start": 8878.0, "end": 8882.0, "text": " because if we're doing a deep data science project, it's really important to know the attributes,", "tokens": [51114, 570, 498, 321, 434, 884, 257, 2452, 1412, 3497, 1716, 11, 309, 311, 534, 1021, 281, 458, 264, 17212, 11, 51314], "temperature": 0.0, "avg_logprob": -0.06850294673114742, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.0036489523481577635}, {"id": 2239, "seek": 886300, "start": 8882.0, "end": 8884.0, "text": " especially if there's only 13 of them.", "tokens": [51314, 2318, 498, 456, 311, 787, 3705, 295, 552, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06850294673114742, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.0036489523481577635}, {"id": 2240, "seek": 886300, "start": 8884.0, "end": 8889.0, "text": " But what the main takeaway will be trying to predict the median value of the house", "tokens": [51414, 583, 437, 264, 2135, 30681, 486, 312, 1382, 281, 6069, 264, 26779, 2158, 295, 264, 1782, 51664], "temperature": 0.0, "avg_logprob": -0.06850294673114742, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.0036489523481577635}, {"id": 2241, "seek": 888900, "start": 8889.0, "end": 8894.0, "text": " and by looking at the 13 categories that predict this house,", "tokens": [50364, 293, 538, 1237, 412, 264, 3705, 10479, 300, 6069, 341, 1782, 11, 50614], "temperature": 0.0, "avg_logprob": -0.13209015500229015, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.02367721125483513}, {"id": 2242, "seek": 888900, "start": 8894.0, "end": 8897.0, "text": " we have 506 total instances of this data set.", "tokens": [50614, 321, 362, 2625, 21, 3217, 14519, 295, 341, 1412, 992, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13209015500229015, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.02367721125483513}, {"id": 2243, "seek": 888900, "start": 8897.0, "end": 8902.0, "text": " The different attributes are crime, we've written as CRIM, all caps.", "tokens": [50764, 440, 819, 17212, 366, 7206, 11, 321, 600, 3720, 382, 14123, 6324, 11, 439, 13855, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13209015500229015, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.02367721125483513}, {"id": 2244, "seek": 888900, "start": 8902.0, "end": 8907.0, "text": " Zone or the proportion of residential land zone for lots over 25,000 square feet.", "tokens": [51014, 22800, 420, 264, 16068, 295, 17389, 2117, 6668, 337, 3195, 670, 3552, 11, 1360, 3732, 3521, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13209015500229015, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.02367721125483513}, {"id": 2245, "seek": 888900, "start": 8907.0, "end": 8912.0, "text": " Indus, which is a proportion of non-retail business acres per town.", "tokens": [51264, 2333, 301, 11, 597, 307, 257, 16068, 295, 2107, 12, 1505, 864, 1606, 19852, 680, 3954, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13209015500229015, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.02367721125483513}, {"id": 2246, "seek": 888900, "start": 8912.0, "end": 8918.0, "text": " A dummy variable where if you're next to the Charles River, then you're equaling to one, otherwise you're zero.", "tokens": [51514, 316, 35064, 7006, 689, 498, 291, 434, 958, 281, 264, 10523, 8640, 11, 550, 291, 434, 2681, 278, 281, 472, 11, 5911, 291, 434, 4018, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13209015500229015, "compression_ratio": 1.527972027972028, "no_speech_prob": 0.02367721125483513}, {"id": 2247, "seek": 891800, "start": 8918.0, "end": 8921.0, "text": " The nitric oxides concentration in parts per 10 million.", "tokens": [50364, 440, 10900, 1341, 5976, 1875, 9856, 294, 3166, 680, 1266, 2459, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2248, "seek": 891800, "start": 8921.0, "end": 8923.0, "text": " The average number of rooms per dwelling.", "tokens": [50514, 440, 4274, 1230, 295, 9396, 680, 41750, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2249, "seek": 891800, "start": 8923.0, "end": 8928.0, "text": " The proportion of owner occupied units built prior to 1940, which is age,", "tokens": [50614, 440, 16068, 295, 7289, 19629, 6815, 3094, 4059, 281, 24158, 11, 597, 307, 3205, 11, 50864], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2250, "seek": 891800, "start": 8928.0, "end": 8933.0, "text": " weighted distances to five Boston employment centers, distance.", "tokens": [50864, 32807, 22182, 281, 1732, 12333, 11949, 10898, 11, 4560, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2251, "seek": 891800, "start": 8933.0, "end": 8936.0, "text": " Rad is index of accessibility to radial highways.", "tokens": [51114, 9654, 307, 8186, 295, 15002, 281, 38783, 43747, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2252, "seek": 891800, "start": 8936.0, "end": 8941.0, "text": " Tax, the full value property tax per $10,000.", "tokens": [51264, 23263, 11, 264, 1577, 2158, 4707, 3366, 680, 1848, 3279, 11, 1360, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2253, "seek": 891800, "start": 8941.0, "end": 8944.0, "text": " People to teacher ratio by town.", "tokens": [51514, 3432, 281, 5027, 8509, 538, 3954, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12399820751614041, "compression_ratio": 1.5082644628099173, "no_speech_prob": 0.051794666796922684}, {"id": 2254, "seek": 894400, "start": 8944.0, "end": 8949.0, "text": " The B, which is the formula that says the BK is the proportion of blacks by town.", "tokens": [50364, 440, 363, 11, 597, 307, 264, 8513, 300, 1619, 264, 363, 42, 307, 264, 16068, 295, 30720, 538, 3954, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2255, "seek": 894400, "start": 8949.0, "end": 8952.0, "text": " L stat, which is percentage of lower status of the population.", "tokens": [50614, 441, 2219, 11, 597, 307, 9668, 295, 3126, 6558, 295, 264, 4415, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2256, "seek": 894400, "start": 8952.0, "end": 8956.0, "text": " And median value, the thing we are tending to be predicting,", "tokens": [50764, 400, 26779, 2158, 11, 264, 551, 321, 366, 256, 2029, 281, 312, 32884, 11, 50964], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2257, "seek": 894400, "start": 8956.0, "end": 8960.0, "text": " which is median value of the owner occupied home in terms of 1000s.", "tokens": [50964, 597, 307, 26779, 2158, 295, 264, 7289, 19629, 1280, 294, 2115, 295, 9714, 82, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2258, "seek": 894400, "start": 8960.0, "end": 8962.0, "text": " This is the information that the data comes from.", "tokens": [51164, 639, 307, 264, 1589, 300, 264, 1412, 1487, 490, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2259, "seek": 894400, "start": 8962.0, "end": 8964.0, "text": " So it's from Harrison and Rubenfeld.", "tokens": [51264, 407, 309, 311, 490, 34272, 293, 10518, 268, 25115, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2260, "seek": 894400, "start": 8964.0, "end": 8971.0, "text": " And this is all the information about exactly where it was taken from the stat lab library maintained at Carnegie Mellon University.", "tokens": [51364, 400, 341, 307, 439, 264, 1589, 466, 2293, 689, 309, 390, 2726, 490, 264, 2219, 2715, 6405, 17578, 412, 47301, 376, 898, 266, 3535, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11595600407298018, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.022960467264056206}, {"id": 2261, "seek": 897100, "start": 8971.0, "end": 8976.0, "text": " So this data dictionary as it comes from scikit-learn is not in my favorite format.", "tokens": [50364, 407, 341, 1412, 25890, 382, 309, 1487, 490, 2180, 22681, 12, 306, 1083, 307, 406, 294, 452, 2954, 7877, 13, 50614], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2262, "seek": 897100, "start": 8976.0, "end": 8978.0, "text": " It's this weird data dictionary.", "tokens": [50614, 467, 311, 341, 3657, 1412, 25890, 13, 50714], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2263, "seek": 897100, "start": 8978.0, "end": 8981.0, "text": " If we actually say type on this, it'll be this weird like data set bunch.", "tokens": [50714, 759, 321, 767, 584, 2010, 322, 341, 11, 309, 603, 312, 341, 3657, 411, 1412, 992, 3840, 13, 50864], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2264, "seek": 897100, "start": 8981.0, "end": 8984.0, "text": " So instead of using it in the form that it's given to us,", "tokens": [50864, 407, 2602, 295, 1228, 309, 294, 264, 1254, 300, 309, 311, 2212, 281, 505, 11, 51014], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2265, "seek": 897100, "start": 8984.0, "end": 8989.0, "text": " I like to convert this into a panda's data frame because those in my view are much easier to use.", "tokens": [51014, 286, 411, 281, 7620, 341, 666, 257, 46685, 311, 1412, 3920, 570, 729, 294, 452, 1910, 366, 709, 3571, 281, 764, 13, 51264], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2266, "seek": 897100, "start": 8989.0, "end": 8992.0, "text": " So we'll create a data frame called features.", "tokens": [51264, 407, 321, 603, 1884, 257, 1412, 3920, 1219, 4122, 13, 51414], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2267, "seek": 897100, "start": 8992.0, "end": 8994.0, "text": " I'll create a data frame called target.", "tokens": [51414, 286, 603, 1884, 257, 1412, 3920, 1219, 3779, 13, 51514], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2268, "seek": 897100, "start": 8994.0, "end": 8999.0, "text": " Now features will take the DF underscore dict, which is the the scikit-learn bunch thing.", "tokens": [51514, 823, 4122, 486, 747, 264, 48336, 37556, 12569, 11, 597, 307, 264, 264, 2180, 22681, 12, 306, 1083, 3840, 551, 13, 51764], "temperature": 0.0, "avg_logprob": -0.116621276310512, "compression_ratio": 1.8251748251748252, "no_speech_prob": 0.010983375832438469}, {"id": 2269, "seek": 899900, "start": 8999.0, "end": 9005.0, "text": " And the dot data element and assign the columns to this data frame to be the feature names.", "tokens": [50364, 400, 264, 5893, 1412, 4478, 293, 6269, 264, 13766, 281, 341, 1412, 3920, 281, 312, 264, 4111, 5288, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14328292437962123, "compression_ratio": 1.9559471365638768, "no_speech_prob": 0.008844698779284954}, {"id": 2270, "seek": 899900, "start": 9005.0, "end": 9007.0, "text": " We'll also do this with target.", "tokens": [50664, 492, 603, 611, 360, 341, 365, 3779, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14328292437962123, "compression_ratio": 1.9559471365638768, "no_speech_prob": 0.008844698779284954}, {"id": 2271, "seek": 899900, "start": 9007.0, "end": 9011.0, "text": " So we'll do this with another create another pandas dot data frame to create the data frame.", "tokens": [50764, 407, 321, 603, 360, 341, 365, 1071, 1884, 1071, 4565, 296, 5893, 1412, 3920, 281, 1884, 264, 1412, 3920, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14328292437962123, "compression_ratio": 1.9559471365638768, "no_speech_prob": 0.008844698779284954}, {"id": 2272, "seek": 899900, "start": 9011.0, "end": 9014.0, "text": " And then it'll be this DF dict dot target.", "tokens": [50964, 400, 550, 309, 603, 312, 341, 48336, 12569, 5893, 3779, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14328292437962123, "compression_ratio": 1.9559471365638768, "no_speech_prob": 0.008844698779284954}, {"id": 2273, "seek": 899900, "start": 9014.0, "end": 9018.0, "text": " So run this and we can look at the head of the features by doing dot head on it.", "tokens": [51114, 407, 1190, 341, 293, 321, 393, 574, 412, 264, 1378, 295, 264, 4122, 538, 884, 5893, 1378, 322, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14328292437962123, "compression_ratio": 1.9559471365638768, "no_speech_prob": 0.008844698779284954}, {"id": 2274, "seek": 899900, "start": 9018.0, "end": 9024.0, "text": " So here are the different values of the different features for the first five elements of our data set.", "tokens": [51314, 407, 510, 366, 264, 819, 4190, 295, 264, 819, 4122, 337, 264, 700, 1732, 4959, 295, 527, 1412, 992, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14328292437962123, "compression_ratio": 1.9559471365638768, "no_speech_prob": 0.008844698779284954}, {"id": 2275, "seek": 902400, "start": 9024.0, "end": 9028.0, "text": " We have the crime number here, zone, the industry.", "tokens": [50364, 492, 362, 264, 7206, 1230, 510, 11, 6668, 11, 264, 3518, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2276, "seek": 902400, "start": 9028.0, "end": 9033.0, "text": " Are you close to the Charles River, the nitrous oxide, average number of rooms, the age,", "tokens": [50564, 2014, 291, 1998, 281, 264, 10523, 8640, 11, 264, 10900, 21189, 28421, 11, 4274, 1230, 295, 9396, 11, 264, 3205, 11, 50814], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2277, "seek": 902400, "start": 9033.0, "end": 9036.0, "text": " all the different features that we're reading about before.", "tokens": [50814, 439, 264, 819, 4122, 300, 321, 434, 3760, 466, 949, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2278, "seek": 902400, "start": 9036.0, "end": 9042.0, "text": " If we look at the target, we would see that it's a single element or a single column data frame.", "tokens": [50964, 759, 321, 574, 412, 264, 3779, 11, 321, 576, 536, 300, 309, 311, 257, 2167, 4478, 420, 257, 2167, 7738, 1412, 3920, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2279, "seek": 902400, "start": 9042.0, "end": 9045.0, "text": " So what we'll like to do is actually for most of our visualization,", "tokens": [51264, 407, 437, 321, 603, 411, 281, 360, 307, 767, 337, 881, 295, 527, 25801, 11, 51414], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2280, "seek": 902400, "start": 9045.0, "end": 9048.0, "text": " we will like to put these two things together side by side.", "tokens": [51414, 321, 486, 411, 281, 829, 613, 732, 721, 1214, 1252, 538, 1252, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2281, "seek": 902400, "start": 9048.0, "end": 9051.0, "text": " Well, we can use concat for that pandas dot concat.", "tokens": [51564, 1042, 11, 321, 393, 764, 1588, 267, 337, 300, 4565, 296, 5893, 1588, 267, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12863451337057447, "compression_ratio": 1.6701754385964913, "no_speech_prob": 0.09804057329893112}, {"id": 2282, "seek": 905100, "start": 9051.0, "end": 9054.0, "text": " We give it a list of the data frames you'd like to concatenate together.", "tokens": [50364, 492, 976, 309, 257, 1329, 295, 264, 1412, 12083, 291, 1116, 411, 281, 1588, 7186, 473, 1214, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2283, "seek": 905100, "start": 9054.0, "end": 9057.0, "text": " And we have to tell it which axis that we would like to use.", "tokens": [50514, 400, 321, 362, 281, 980, 309, 597, 10298, 300, 321, 576, 411, 281, 764, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2284, "seek": 905100, "start": 9057.0, "end": 9062.0, "text": " Now, I'm sure there's some very useful mnemonic that will tell us the right way to do it every time,", "tokens": [50664, 823, 11, 286, 478, 988, 456, 311, 512, 588, 4420, 275, 25989, 11630, 300, 486, 980, 505, 264, 558, 636, 281, 360, 309, 633, 565, 11, 50914], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2285, "seek": 905100, "start": 9062.0, "end": 9067.0, "text": " but I prefer to not trust that I remembered it correctly, but always test that I have it right.", "tokens": [50914, 457, 286, 4382, 281, 406, 3361, 300, 286, 13745, 309, 8944, 11, 457, 1009, 1500, 300, 286, 362, 309, 558, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2286, "seek": 905100, "start": 9067.0, "end": 9070.0, "text": " So if we start out with axis equals zero and look at the head,", "tokens": [51164, 407, 498, 321, 722, 484, 365, 10298, 6915, 4018, 293, 574, 412, 264, 1378, 11, 51314], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2287, "seek": 905100, "start": 9070.0, "end": 9075.0, "text": " we will see that it's trying to combine it in a way that they're stacked on top of each other.", "tokens": [51314, 321, 486, 536, 300, 309, 311, 1382, 281, 10432, 309, 294, 257, 636, 300, 436, 434, 28867, 322, 1192, 295, 1184, 661, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2288, "seek": 905100, "start": 9075.0, "end": 9076.0, "text": " And there's two ways to know this.", "tokens": [51564, 400, 456, 311, 732, 2098, 281, 458, 341, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0660781393517981, "compression_ratio": 1.7203947368421053, "no_speech_prob": 0.02842569909989834}, {"id": 2289, "seek": 907600, "start": 9076.0, "end": 9081.0, "text": " One is that everything has a value except for medv, which is the target data frame.", "tokens": [50364, 1485, 307, 300, 1203, 575, 257, 2158, 3993, 337, 1205, 85, 11, 597, 307, 264, 3779, 1412, 3920, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2290, "seek": 907600, "start": 9081.0, "end": 9082.0, "text": " All of them have nans.", "tokens": [50614, 1057, 295, 552, 362, 297, 599, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2291, "seek": 907600, "start": 9082.0, "end": 9089.0, "text": " And if we were to look at the tail, we will see that everything else has nans and medv has values.", "tokens": [50664, 400, 498, 321, 645, 281, 574, 412, 264, 6838, 11, 321, 486, 536, 300, 1203, 1646, 575, 297, 599, 293, 1205, 85, 575, 4190, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2292, "seek": 907600, "start": 9089.0, "end": 9091.0, "text": " That's one way to know that we've done it wrong.", "tokens": [51014, 663, 311, 472, 636, 281, 458, 300, 321, 600, 1096, 309, 2085, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2293, "seek": 907600, "start": 9091.0, "end": 9095.0, "text": " So this is trying to do some sort of concatenating the two data frames vertically.", "tokens": [51114, 407, 341, 307, 1382, 281, 360, 512, 1333, 295, 1588, 7186, 990, 264, 732, 1412, 12083, 28450, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2294, "seek": 907600, "start": 9095.0, "end": 9100.0, "text": " And if we do it axis equals one, we will see that we've put them side by side,", "tokens": [51314, 400, 498, 321, 360, 309, 10298, 6915, 472, 11, 321, 486, 536, 300, 321, 600, 829, 552, 1252, 538, 1252, 11, 51564], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2295, "seek": 907600, "start": 9100.0, "end": 9101.0, "text": " which is what we actually want.", "tokens": [51564, 597, 307, 437, 321, 767, 528, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2296, "seek": 907600, "start": 9101.0, "end": 9102.0, "text": " And let's look at the head.", "tokens": [51614, 400, 718, 311, 574, 412, 264, 1378, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0744645876042983, "compression_ratio": 1.8449612403100775, "no_speech_prob": 0.042076967656612396}, {"id": 2297, "seek": 910200, "start": 9102.0, "end": 9107.0, "text": " We will see that all of them are here, including medv being the very final column in this data frame.", "tokens": [50364, 492, 486, 536, 300, 439, 295, 552, 366, 510, 11, 3009, 1205, 85, 885, 264, 588, 2572, 7738, 294, 341, 1412, 3920, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09369045446726902, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.06553791463375092}, {"id": 2298, "seek": 910200, "start": 9107.0, "end": 9109.0, "text": " So we now have a new data frame called df.", "tokens": [50614, 407, 321, 586, 362, 257, 777, 1412, 3920, 1219, 274, 69, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09369045446726902, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.06553791463375092}, {"id": 2299, "seek": 910200, "start": 9109.0, "end": 9113.0, "text": " It contains a target and the feature variables underneath it.", "tokens": [50714, 467, 8306, 257, 3779, 293, 264, 4111, 9102, 7223, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09369045446726902, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.06553791463375092}, {"id": 2300, "seek": 910200, "start": 9113.0, "end": 9118.0, "text": " Now to give you a sense of the data underneath it, there's many different ways you can slice and dice this.", "tokens": [50914, 823, 281, 976, 291, 257, 2020, 295, 264, 1412, 7223, 309, 11, 456, 311, 867, 819, 2098, 291, 393, 13153, 293, 10313, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09369045446726902, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.06553791463375092}, {"id": 2301, "seek": 910200, "start": 9118.0, "end": 9123.0, "text": " One very simple quick way to start with is to iterate over all of the columns of the data frame", "tokens": [51164, 1485, 588, 2199, 1702, 636, 281, 722, 365, 307, 281, 44497, 670, 439, 295, 264, 13766, 295, 264, 1412, 3920, 51414], "temperature": 0.0, "avg_logprob": -0.09369045446726902, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.06553791463375092}, {"id": 2302, "seek": 910200, "start": 9123.0, "end": 9128.0, "text": " and to print both the column name and the number of unique values in that column.", "tokens": [51414, 293, 281, 4482, 1293, 264, 7738, 1315, 293, 264, 1230, 295, 3845, 4190, 294, 300, 7738, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09369045446726902, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.06553791463375092}, {"id": 2303, "seek": 912800, "start": 9128.0, "end": 9136.0, "text": " For column in df, the data frame columns, print the column name and df of the column, the number of unique values.", "tokens": [50364, 1171, 7738, 294, 274, 69, 11, 264, 1412, 3920, 13766, 11, 4482, 264, 7738, 1315, 293, 274, 69, 295, 264, 7738, 11, 264, 1230, 295, 3845, 4190, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17223874363330527, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.010985316708683968}, {"id": 2304, "seek": 912800, "start": 9136.0, "end": 9140.0, "text": " This n unique is a method you can call on a data frame.", "tokens": [50764, 639, 297, 3845, 307, 257, 3170, 291, 393, 818, 322, 257, 1412, 3920, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17223874363330527, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.010985316708683968}, {"id": 2305, "seek": 912800, "start": 9140.0, "end": 9147.0, "text": " So there are 504 unique values in crime and there's two totally unique values in chance, which is a boolean value.", "tokens": [50964, 407, 456, 366, 2625, 19, 3845, 4190, 294, 7206, 293, 456, 311, 732, 3879, 3845, 4190, 294, 2931, 11, 597, 307, 257, 748, 4812, 282, 2158, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17223874363330527, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.010985316708683968}, {"id": 2306, "seek": 912800, "start": 9147.0, "end": 9149.0, "text": " Makes sense, we'd expect that.", "tokens": [51314, 25245, 2020, 11, 321, 1116, 2066, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17223874363330527, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.010985316708683968}, {"id": 2307, "seek": 912800, "start": 9149.0, "end": 9150.0, "text": " Some of them are pretty low.", "tokens": [51414, 2188, 295, 552, 366, 1238, 2295, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17223874363330527, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.010985316708683968}, {"id": 2308, "seek": 912800, "start": 9150.0, "end": 9152.0, "text": " So our ad, for example, is at nine.", "tokens": [51464, 407, 527, 614, 11, 337, 1365, 11, 307, 412, 4949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17223874363330527, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.010985316708683968}, {"id": 2309, "seek": 915200, "start": 9152.0, "end": 9155.0, "text": " Some of these have many values and they're continuous values.", "tokens": [50364, 2188, 295, 613, 362, 867, 4190, 293, 436, 434, 10957, 4190, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08758324534953141, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.20671141147613525}, {"id": 2310, "seek": 915200, "start": 9155.0, "end": 9158.0, "text": " Other of them have smaller numbers of possible values.", "tokens": [50514, 5358, 295, 552, 362, 4356, 3547, 295, 1944, 4190, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08758324534953141, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.20671141147613525}, {"id": 2311, "seek": 915200, "start": 9158.0, "end": 9161.0, "text": " You can see rad here is this kind of numbers here.", "tokens": [50664, 509, 393, 536, 2843, 510, 307, 341, 733, 295, 3547, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08758324534953141, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.20671141147613525}, {"id": 2312, "seek": 915200, "start": 9161.0, "end": 9168.0, "text": " One thing you might not know is that pandas not only has fantastic data frame support, but also has some very useful plotting tools.", "tokens": [50814, 1485, 551, 291, 1062, 406, 458, 307, 300, 4565, 296, 406, 787, 575, 5456, 1412, 3920, 1406, 11, 457, 611, 575, 512, 588, 4420, 41178, 3873, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08758324534953141, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.20671141147613525}, {"id": 2313, "seek": 915200, "start": 9168.0, "end": 9174.0, "text": " So in this case, we will be importing a thing called scatter matrix from pandas.", "tokens": [51164, 407, 294, 341, 1389, 11, 321, 486, 312, 43866, 257, 551, 1219, 34951, 8141, 490, 4565, 296, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08758324534953141, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.20671141147613525}, {"id": 2314, "seek": 915200, "start": 9174.0, "end": 9178.0, "text": " And this can be done in a couple of libraries as well, but let's just look at the pandas version of this.", "tokens": [51464, 400, 341, 393, 312, 1096, 294, 257, 1916, 295, 15148, 382, 731, 11, 457, 718, 311, 445, 574, 412, 264, 4565, 296, 3037, 295, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08758324534953141, "compression_ratio": 1.6968641114982579, "no_speech_prob": 0.20671141147613525}, {"id": 2315, "seek": 917800, "start": 9178.0, "end": 9184.0, "text": " Recreating a figure with some plots in pi plot, making a large figure 12 by 12 fig size.", "tokens": [50364, 9647, 44613, 257, 2573, 365, 512, 28609, 294, 3895, 7542, 11, 1455, 257, 2416, 2573, 2272, 538, 2272, 2147, 2744, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12883487181230024, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.13462844491004944}, {"id": 2316, "seek": 917800, "start": 9184.0, "end": 9195.0, "text": " And we're going to call it on this data frame with some see-through value of alpha and the diagonal will be KDE, which is this kernel density estimation plot that we see here.", "tokens": [50664, 400, 321, 434, 516, 281, 818, 309, 322, 341, 1412, 3920, 365, 512, 536, 12, 11529, 2158, 295, 8961, 293, 264, 21539, 486, 312, 591, 22296, 11, 597, 307, 341, 28256, 10305, 35701, 7542, 300, 321, 536, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12883487181230024, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.13462844491004944}, {"id": 2317, "seek": 917800, "start": 9195.0, "end": 9202.0, "text": " Again, we see a warning that we can safely ignore, but this is a very information dense plot.", "tokens": [51214, 3764, 11, 321, 536, 257, 9164, 300, 321, 393, 11750, 11200, 11, 457, 341, 307, 257, 588, 1589, 18011, 7542, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12883487181230024, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.13462844491004944}, {"id": 2318, "seek": 917800, "start": 9202.0, "end": 9205.0, "text": " There's no way to go over all of it in this video as we look at it.", "tokens": [51564, 821, 311, 572, 636, 281, 352, 670, 439, 295, 309, 294, 341, 960, 382, 321, 574, 412, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12883487181230024, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.13462844491004944}, {"id": 2319, "seek": 920500, "start": 9205.0, "end": 9209.0, "text": " But this, if you have your own data set, will give you a lot of things to look at.", "tokens": [50364, 583, 341, 11, 498, 291, 362, 428, 1065, 1412, 992, 11, 486, 976, 291, 257, 688, 295, 721, 281, 574, 412, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09092926127570015, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.09004559367895126}, {"id": 2320, "seek": 920500, "start": 9209.0, "end": 9217.0, "text": " What is being plotted here on the x-axis and the y-axis is every possible pair of the two columns in this data frame, which is why it took a while to actually plot this.", "tokens": [50564, 708, 307, 885, 43288, 510, 322, 264, 2031, 12, 24633, 293, 264, 288, 12, 24633, 307, 633, 1944, 6119, 295, 264, 732, 13766, 294, 341, 1412, 3920, 11, 597, 307, 983, 309, 1890, 257, 1339, 281, 767, 7542, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09092926127570015, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.09004559367895126}, {"id": 2321, "seek": 920500, "start": 9217.0, "end": 9225.0, "text": " Along the diagonal, this KDE plot, it's showing interactions with itself or basically the histogram of that variable itself.", "tokens": [50964, 17457, 264, 21539, 11, 341, 591, 22296, 7542, 11, 309, 311, 4099, 13280, 365, 2564, 420, 1936, 264, 49816, 295, 300, 7006, 2564, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09092926127570015, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.09004559367895126}, {"id": 2322, "seek": 920500, "start": 9225.0, "end": 9229.0, "text": " So this is what medv looks like. It's just this histogram here.", "tokens": [51364, 407, 341, 307, 437, 1205, 85, 1542, 411, 13, 467, 311, 445, 341, 49816, 510, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09092926127570015, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.09004559367895126}, {"id": 2323, "seek": 922900, "start": 9229.0, "end": 9233.0, "text": " Along the diagonal, it's just a histogram of the values of that variable.", "tokens": [50364, 17457, 264, 21539, 11, 309, 311, 445, 257, 49816, 295, 264, 4190, 295, 300, 7006, 13, 50564], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2324, "seek": 922900, "start": 9233.0, "end": 9241.0, "text": " Everything else is going to be what the response from this variable looks like with every other variable on the x-axis.", "tokens": [50564, 5471, 1646, 307, 516, 281, 312, 437, 264, 4134, 490, 341, 7006, 1542, 411, 365, 633, 661, 7006, 322, 264, 2031, 12, 24633, 13, 50964], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2325, "seek": 922900, "start": 9241.0, "end": 9243.0, "text": " So you can see a number of really nice trends here.", "tokens": [50964, 407, 291, 393, 536, 257, 1230, 295, 534, 1481, 13892, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2326, "seek": 922900, "start": 9243.0, "end": 9245.0, "text": " You can see some kind of this U-shaped trend here.", "tokens": [51064, 509, 393, 536, 512, 733, 295, 341, 624, 12, 23103, 6028, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2327, "seek": 922900, "start": 9245.0, "end": 9249.0, "text": " We see something that's basically a straight line, which means there's not much information there at all.", "tokens": [51164, 492, 536, 746, 300, 311, 1936, 257, 2997, 1622, 11, 597, 1355, 456, 311, 406, 709, 1589, 456, 412, 439, 13, 51364], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2328, "seek": 922900, "start": 9249.0, "end": 9251.0, "text": " That's from the Boolean value.", "tokens": [51364, 663, 311, 490, 264, 23351, 28499, 2158, 13, 51464], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2329, "seek": 922900, "start": 9251.0, "end": 9257.0, "text": " We can see some of these have very fuzzy relationships where it's not really showing anything very interesting.", "tokens": [51464, 492, 393, 536, 512, 295, 613, 362, 588, 34710, 6159, 689, 309, 311, 406, 534, 4099, 1340, 588, 1880, 13, 51764], "temperature": 0.0, "avg_logprob": -0.049863012020404524, "compression_ratio": 1.7637540453074434, "no_speech_prob": 0.3037967383861542}, {"id": 2330, "seek": 925700, "start": 9257.0, "end": 9263.0, "text": " But spending some time looking at plots like this, getting to know your data set is a vital part of data science.", "tokens": [50364, 583, 6434, 512, 565, 1237, 412, 28609, 411, 341, 11, 1242, 281, 458, 428, 1412, 992, 307, 257, 11707, 644, 295, 1412, 3497, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05710988491773605, "compression_ratio": 1.7874564459930313, "no_speech_prob": 0.02478632889688015}, {"id": 2331, "seek": 925700, "start": 9263.0, "end": 9265.0, "text": " And I highly recommend looking at this.", "tokens": [50664, 400, 286, 5405, 2748, 1237, 412, 341, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05710988491773605, "compression_ratio": 1.7874564459930313, "no_speech_prob": 0.02478632889688015}, {"id": 2332, "seek": 925700, "start": 9265.0, "end": 9269.0, "text": " If you have far too many columns to look at it in one, I would say this is probably too many.", "tokens": [50764, 759, 291, 362, 1400, 886, 867, 13766, 281, 574, 412, 309, 294, 472, 11, 286, 576, 584, 341, 307, 1391, 886, 867, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05710988491773605, "compression_ratio": 1.7874564459930313, "no_speech_prob": 0.02478632889688015}, {"id": 2333, "seek": 925700, "start": 9269.0, "end": 9274.0, "text": " If you have even more than this, though, you can take subsets of this and plot this with the same command,", "tokens": [50964, 759, 291, 362, 754, 544, 813, 341, 11, 1673, 11, 291, 393, 747, 2090, 1385, 295, 341, 293, 7542, 341, 365, 264, 912, 5622, 11, 51214], "temperature": 0.0, "avg_logprob": -0.05710988491773605, "compression_ratio": 1.7874564459930313, "no_speech_prob": 0.02478632889688015}, {"id": 2334, "seek": 925700, "start": 9274.0, "end": 9281.0, "text": " but you would be giving it a list inside of double brackets of feature one, feature two, and so on.", "tokens": [51214, 457, 291, 576, 312, 2902, 309, 257, 1329, 1854, 295, 3834, 26179, 295, 4111, 472, 11, 4111, 732, 11, 293, 370, 322, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05710988491773605, "compression_ratio": 1.7874564459930313, "no_speech_prob": 0.02478632889688015}, {"id": 2335, "seek": 925700, "start": 9281.0, "end": 9283.0, "text": " And this will plot just those features against each other.", "tokens": [51564, 400, 341, 486, 7542, 445, 729, 4122, 1970, 1184, 661, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05710988491773605, "compression_ratio": 1.7874564459930313, "no_speech_prob": 0.02478632889688015}, {"id": 2336, "seek": 928300, "start": 9283.0, "end": 9286.0, "text": " So there's a downside of that is that you're not getting all of the interaction terms,", "tokens": [50364, 407, 456, 311, 257, 25060, 295, 300, 307, 300, 291, 434, 406, 1242, 439, 295, 264, 9285, 2115, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09160526667799905, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.024414541199803352}, {"id": 2337, "seek": 928300, "start": 9286.0, "end": 9293.0, "text": " but if it's a trade-off between possible to view in one screen or not look at it at all, I recommend that.", "tokens": [50514, 457, 498, 309, 311, 257, 4923, 12, 4506, 1296, 1944, 281, 1910, 294, 472, 2568, 420, 406, 574, 412, 309, 412, 439, 11, 286, 2748, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09160526667799905, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.024414541199803352}, {"id": 2338, "seek": 928300, "start": 9295.0, "end": 9299.0, "text": " Okay, in the last video, we last looked at this scatterplot functionality within Pandas.", "tokens": [50964, 1033, 11, 294, 264, 1036, 960, 11, 321, 1036, 2956, 412, 341, 34951, 564, 310, 14980, 1951, 16995, 296, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09160526667799905, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.024414541199803352}, {"id": 2339, "seek": 928300, "start": 9299.0, "end": 9307.0, "text": " In this video, we're going to continue taking a look at this data and some of the plotting functionality that's built into the Pandas library itself.", "tokens": [51164, 682, 341, 960, 11, 321, 434, 516, 281, 2354, 1940, 257, 574, 412, 341, 1412, 293, 512, 295, 264, 41178, 14980, 300, 311, 3094, 666, 264, 16995, 296, 6405, 2564, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09160526667799905, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.024414541199803352}, {"id": 2340, "seek": 930700, "start": 9307.0, "end": 9316.0, "text": " Just as a brief overview, again, this scatterplot gives you a very nice, fast way of looking at all of the interactions between the terms in your data frame.", "tokens": [50364, 1449, 382, 257, 5353, 12492, 11, 797, 11, 341, 34951, 564, 310, 2709, 291, 257, 588, 1481, 11, 2370, 636, 295, 1237, 412, 439, 295, 264, 13280, 1296, 264, 2115, 294, 428, 1412, 3920, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07220664457841353, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.021609220653772354}, {"id": 2341, "seek": 930700, "start": 9316.0, "end": 9322.0, "text": " If you suspect that there might be something interesting going on with, let's say, rad, we see something happening here,", "tokens": [50814, 759, 291, 9091, 300, 456, 1062, 312, 746, 1880, 516, 322, 365, 11, 718, 311, 584, 11, 2843, 11, 321, 536, 746, 2737, 510, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07220664457841353, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.021609220653772354}, {"id": 2342, "seek": 930700, "start": 9322.0, "end": 9326.0, "text": " or this diagonal term for rad, the intersection of rad and rad on the X and Y axis.", "tokens": [51114, 420, 341, 21539, 1433, 337, 2843, 11, 264, 15236, 295, 2843, 293, 2843, 322, 264, 1783, 293, 398, 10298, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07220664457841353, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.021609220653772354}, {"id": 2343, "seek": 930700, "start": 9326.0, "end": 9332.0, "text": " You see a histogram plot or a KDE plot that shows a very bimodal distribution.", "tokens": [51314, 509, 536, 257, 49816, 7542, 420, 257, 591, 22296, 7542, 300, 3110, 257, 588, 272, 332, 378, 304, 7316, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07220664457841353, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.021609220653772354}, {"id": 2344, "seek": 933200, "start": 9332.0, "end": 9340.0, "text": " So you can take a deeper look into that and see what it looks like by selecting that column by saying df of rad.hist.", "tokens": [50364, 407, 291, 393, 747, 257, 7731, 574, 666, 300, 293, 536, 437, 309, 1542, 411, 538, 18182, 300, 7738, 538, 1566, 274, 69, 295, 2843, 13, 33236, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07451305093691331, "compression_ratio": 1.725, "no_speech_prob": 0.00857503991574049}, {"id": 2345, "seek": 933200, "start": 9340.0, "end": 9344.0, "text": " And we will see this bimodal shape really appear again.", "tokens": [50764, 400, 321, 486, 536, 341, 272, 332, 378, 304, 3909, 534, 4204, 797, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07451305093691331, "compression_ratio": 1.725, "no_speech_prob": 0.00857503991574049}, {"id": 2346, "seek": 933200, "start": 9344.0, "end": 9349.0, "text": " So it's really values that are greater than 20 and then a bunch of different values that are around 10 and lower.", "tokens": [50964, 407, 309, 311, 534, 4190, 300, 366, 5044, 813, 945, 293, 550, 257, 3840, 295, 819, 4190, 300, 366, 926, 1266, 293, 3126, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07451305093691331, "compression_ratio": 1.725, "no_speech_prob": 0.00857503991574049}, {"id": 2347, "seek": 933200, "start": 9349.0, "end": 9353.0, "text": " You can also, of course, select it if you have a nice column name.", "tokens": [51214, 509, 393, 611, 11, 295, 1164, 11, 3048, 309, 498, 291, 362, 257, 1481, 7738, 1315, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07451305093691331, "compression_ratio": 1.725, "no_speech_prob": 0.00857503991574049}, {"id": 2348, "seek": 933200, "start": 9353.0, "end": 9356.0, "text": " In other words, there's no spaces or any other characters in that column name.", "tokens": [51414, 682, 661, 2283, 11, 456, 311, 572, 7673, 420, 604, 661, 4342, 294, 300, 7738, 1315, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07451305093691331, "compression_ratio": 1.725, "no_speech_prob": 0.00857503991574049}, {"id": 2349, "seek": 933200, "start": 9356.0, "end": 9360.0, "text": " You do the same exact thing by doing df.rad.hist.", "tokens": [51564, 509, 360, 264, 912, 1900, 551, 538, 884, 274, 69, 13, 6206, 13, 33236, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07451305093691331, "compression_ratio": 1.725, "no_speech_prob": 0.00857503991574049}, {"id": 2350, "seek": 936000, "start": 9360.0, "end": 9362.0, "text": " See the same exact plot.", "tokens": [50364, 3008, 264, 912, 1900, 7542, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08760001795078681, "compression_ratio": 1.7667844522968197, "no_speech_prob": 0.08142711222171783}, {"id": 2351, "seek": 936000, "start": 9362.0, "end": 9367.0, "text": " When you see a feature like this, in this case, it might not make sense, but if you have the thought that,", "tokens": [50464, 1133, 291, 536, 257, 4111, 411, 341, 11, 294, 341, 1389, 11, 309, 1062, 406, 652, 2020, 11, 457, 498, 291, 362, 264, 1194, 300, 11, 50714], "temperature": 0.0, "avg_logprob": -0.08760001795078681, "compression_ratio": 1.7667844522968197, "no_speech_prob": 0.08142711222171783}, {"id": 2352, "seek": 936000, "start": 9367.0, "end": 9370.0, "text": " you know what, let's actually consider this as two separate groups.", "tokens": [50714, 291, 458, 437, 11, 718, 311, 767, 1949, 341, 382, 732, 4994, 3935, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08760001795078681, "compression_ratio": 1.7667844522968197, "no_speech_prob": 0.08142711222171783}, {"id": 2353, "seek": 936000, "start": 9370.0, "end": 9375.0, "text": " This bimodal characteristic should actually be characterized as really a high group and a low group.", "tokens": [50864, 639, 272, 332, 378, 304, 16282, 820, 767, 312, 29361, 382, 534, 257, 1090, 1594, 293, 257, 2295, 1594, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08760001795078681, "compression_ratio": 1.7667844522968197, "no_speech_prob": 0.08142711222171783}, {"id": 2354, "seek": 936000, "start": 9375.0, "end": 9381.0, "text": " One way to do this is to apply a lambda function, which will create a Boolean value of these values.", "tokens": [51114, 1485, 636, 281, 360, 341, 307, 281, 3079, 257, 13607, 2445, 11, 597, 486, 1884, 257, 23351, 28499, 2158, 295, 613, 4190, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08760001795078681, "compression_ratio": 1.7667844522968197, "no_speech_prob": 0.08142711222171783}, {"id": 2355, "seek": 936000, "start": 9381.0, "end": 9385.0, "text": " So everything down here gets one flag of the low group and everything up here gets the high group.", "tokens": [51414, 407, 1203, 760, 510, 2170, 472, 7166, 295, 264, 2295, 1594, 293, 1203, 493, 510, 2170, 264, 1090, 1594, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08760001795078681, "compression_ratio": 1.7667844522968197, "no_speech_prob": 0.08142711222171783}, {"id": 2356, "seek": 938500, "start": 9385.0, "end": 9391.0, "text": " And so we will build up this command below by getting some intuition here.", "tokens": [50364, 400, 370, 321, 486, 1322, 493, 341, 5622, 2507, 538, 1242, 512, 24002, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2357, "seek": 938500, "start": 9391.0, "end": 9394.0, "text": " So let's grab our data frame like this.", "tokens": [50664, 407, 718, 311, 4444, 527, 1412, 3920, 411, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2358, "seek": 938500, "start": 9394.0, "end": 9399.0, "text": " This apply function is a method that goes to the column that you've selected in your data frame.", "tokens": [50814, 639, 3079, 2445, 307, 257, 3170, 300, 1709, 281, 264, 7738, 300, 291, 600, 8209, 294, 428, 1412, 3920, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2359, "seek": 938500, "start": 9399.0, "end": 9402.0, "text": " And there's a number of ways you can actually call this apply.", "tokens": [51064, 400, 456, 311, 257, 1230, 295, 2098, 291, 393, 767, 818, 341, 3079, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2360, "seek": 938500, "start": 9402.0, "end": 9405.0, "text": " You give it a function and the default axis is zero.", "tokens": [51214, 509, 976, 309, 257, 2445, 293, 264, 7576, 10298, 307, 4018, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2361, "seek": 938500, "start": 9405.0, "end": 9408.0, "text": " You can do it in various other ways, so you can access equals one.", "tokens": [51364, 509, 393, 360, 309, 294, 3683, 661, 2098, 11, 370, 291, 393, 2105, 6915, 472, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2362, "seek": 938500, "start": 9408.0, "end": 9413.0, "text": " But in this case, most of the time you'll end up doing a lambda function, which is an anonymous function.", "tokens": [51514, 583, 294, 341, 1389, 11, 881, 295, 264, 565, 291, 603, 917, 493, 884, 257, 13607, 2445, 11, 597, 307, 364, 24932, 2445, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0765600429745171, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.08627346903085709}, {"id": 2363, "seek": 941300, "start": 9413.0, "end": 9418.0, "text": " It's like you define a function in Python, but you don't give it a name.", "tokens": [50364, 467, 311, 411, 291, 6964, 257, 2445, 294, 15329, 11, 457, 291, 500, 380, 976, 309, 257, 1315, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2364, "seek": 941300, "start": 9418.0, "end": 9423.0, "text": " You're giving it via this apply method every value in the RAD column.", "tokens": [50614, 509, 434, 2902, 309, 5766, 341, 3079, 3170, 633, 2158, 294, 264, 497, 6112, 7738, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2365, "seek": 941300, "start": 9423.0, "end": 9428.0, "text": " And you're saying for each of those values in that column, is it greater than say 15?", "tokens": [50864, 400, 291, 434, 1566, 337, 1184, 295, 729, 4190, 294, 300, 7738, 11, 307, 309, 5044, 813, 584, 2119, 30, 51114], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2366, "seek": 941300, "start": 9428.0, "end": 9432.0, "text": " So 15 is clearly going to split us into the low and high group.", "tokens": [51114, 407, 2119, 307, 4448, 516, 281, 7472, 505, 666, 264, 2295, 293, 1090, 1594, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2367, "seek": 941300, "start": 9432.0, "end": 9434.0, "text": " And let's just take a look at the first few values of that.", "tokens": [51314, 400, 718, 311, 445, 747, 257, 574, 412, 264, 700, 1326, 4190, 295, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2368, "seek": 941300, "start": 9434.0, "end": 9440.0, "text": " So I did not head on that to give us the first values and we see that is this X value greater than 15?", "tokens": [51414, 407, 286, 630, 406, 1378, 322, 300, 281, 976, 505, 264, 700, 4190, 293, 321, 536, 300, 307, 341, 1783, 2158, 5044, 813, 2119, 30, 51714], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2369, "seek": 941300, "start": 9440.0, "end": 9442.0, "text": " It was false, false, false, false, false.", "tokens": [51714, 467, 390, 7908, 11, 7908, 11, 7908, 11, 7908, 11, 7908, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08917605358621349, "compression_ratio": 1.7624113475177305, "no_speech_prob": 0.020959239453077316}, {"id": 2370, "seek": 944200, "start": 9442.0, "end": 9449.0, "text": " And if we want to look at just what that head value looks like without the Boolean, we see that it's 1, 1, 2, 2, 3, 3.", "tokens": [50364, 400, 498, 321, 528, 281, 574, 412, 445, 437, 300, 1378, 2158, 1542, 411, 1553, 264, 23351, 28499, 11, 321, 536, 300, 309, 311, 502, 11, 502, 11, 568, 11, 568, 11, 805, 11, 805, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09425494747777138, "compression_ratio": 1.71484375, "no_speech_prob": 0.004197418689727783}, {"id": 2371, "seek": 944200, "start": 9449.0, "end": 9452.0, "text": " So everything here is indeed less than 15.", "tokens": [50714, 407, 1203, 510, 307, 6451, 1570, 813, 2119, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09425494747777138, "compression_ratio": 1.71484375, "no_speech_prob": 0.004197418689727783}, {"id": 2372, "seek": 944200, "start": 9452.0, "end": 9459.0, "text": " So we have this function call, which will return a Boolean series false.", "tokens": [50864, 407, 321, 362, 341, 2445, 818, 11, 597, 486, 2736, 257, 23351, 28499, 2638, 7908, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09425494747777138, "compression_ratio": 1.71484375, "no_speech_prob": 0.004197418689727783}, {"id": 2373, "seek": 944200, "start": 9459.0, "end": 9463.0, "text": " And what we'd like to do is say we want a new column in this data frame.", "tokens": [51214, 400, 437, 321, 1116, 411, 281, 360, 307, 584, 321, 528, 257, 777, 7738, 294, 341, 1412, 3920, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09425494747777138, "compression_ratio": 1.71484375, "no_speech_prob": 0.004197418689727783}, {"id": 2374, "seek": 944200, "start": 9463.0, "end": 9469.0, "text": " We're not going to overwrite this column, but we're going to give a new data frame that we're going to call radian underscore bool,", "tokens": [51414, 492, 434, 406, 516, 281, 670, 21561, 341, 7738, 11, 457, 321, 434, 516, 281, 976, 257, 777, 1412, 3920, 300, 321, 434, 516, 281, 818, 2843, 952, 37556, 748, 401, 11, 51714], "temperature": 0.0, "avg_logprob": -0.09425494747777138, "compression_ratio": 1.71484375, "no_speech_prob": 0.004197418689727783}, {"id": 2375, "seek": 946900, "start": 9469.0, "end": 9472.0, "text": " because we want to have a nice descriptive name of where it came from.", "tokens": [50364, 570, 321, 528, 281, 362, 257, 1481, 42585, 1315, 295, 689, 309, 1361, 490, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09449170292287633, "compression_ratio": 1.7357859531772575, "no_speech_prob": 0.18702997267246246}, {"id": 2376, "seek": 946900, "start": 9472.0, "end": 9479.0, "text": " And the way you create a new column in a pandas data frame is you give a column that doesn't quite exist yet or doesn't exist yet in the data frame", "tokens": [50514, 400, 264, 636, 291, 1884, 257, 777, 7738, 294, 257, 4565, 296, 1412, 3920, 307, 291, 976, 257, 7738, 300, 1177, 380, 1596, 2514, 1939, 420, 1177, 380, 2514, 1939, 294, 264, 1412, 3920, 50864], "temperature": 0.0, "avg_logprob": -0.09449170292287633, "compression_ratio": 1.7357859531772575, "no_speech_prob": 0.18702997267246246}, {"id": 2377, "seek": 946900, "start": 9479.0, "end": 9482.0, "text": " and assign it equaling to something else.", "tokens": [50864, 293, 6269, 309, 2681, 278, 281, 746, 1646, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09449170292287633, "compression_ratio": 1.7357859531772575, "no_speech_prob": 0.18702997267246246}, {"id": 2378, "seek": 946900, "start": 9482.0, "end": 9487.0, "text": " So in this case, we have this rad dot apply lambda greater than or equal to 15.", "tokens": [51014, 407, 294, 341, 1389, 11, 321, 362, 341, 2843, 5893, 3079, 13607, 5044, 813, 420, 2681, 281, 2119, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09449170292287633, "compression_ratio": 1.7357859531772575, "no_speech_prob": 0.18702997267246246}, {"id": 2379, "seek": 946900, "start": 9487.0, "end": 9489.0, "text": " And I'm just adding this as type bool.", "tokens": [51264, 400, 286, 478, 445, 5127, 341, 382, 2010, 748, 401, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09449170292287633, "compression_ratio": 1.7357859531772575, "no_speech_prob": 0.18702997267246246}, {"id": 2380, "seek": 946900, "start": 9489.0, "end": 9496.0, "text": " Just to give you a sense that if it doesn't automatically get incurred into a type of bool, which we see right here, the d type is boolean.", "tokens": [51364, 1449, 281, 976, 291, 257, 2020, 300, 498, 309, 1177, 380, 6772, 483, 35774, 986, 666, 257, 2010, 295, 748, 401, 11, 597, 321, 536, 558, 510, 11, 264, 274, 2010, 307, 748, 4812, 282, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09449170292287633, "compression_ratio": 1.7357859531772575, "no_speech_prob": 0.18702997267246246}, {"id": 2381, "seek": 949600, "start": 9496.0, "end": 9499.0, "text": " You can force it by doing this as type.", "tokens": [50364, 509, 393, 3464, 309, 538, 884, 341, 382, 2010, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2382, "seek": 949600, "start": 9499.0, "end": 9501.0, "text": " There's other times when this is useful as well.", "tokens": [50514, 821, 311, 661, 1413, 562, 341, 307, 4420, 382, 731, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2383, "seek": 949600, "start": 9501.0, "end": 9508.0, "text": " So I'll just leave it in here as kind of a best practices or a hint for future ways if you're trying to do something similar and having some problems with it.", "tokens": [50614, 407, 286, 603, 445, 1856, 309, 294, 510, 382, 733, 295, 257, 1151, 7525, 420, 257, 12075, 337, 2027, 2098, 498, 291, 434, 1382, 281, 360, 746, 2531, 293, 1419, 512, 2740, 365, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2384, "seek": 949600, "start": 9508.0, "end": 9513.0, "text": " So we've just created a new column in the data frame of rad underscore bool.", "tokens": [50964, 407, 321, 600, 445, 2942, 257, 777, 7738, 294, 264, 1412, 3920, 295, 2843, 37556, 748, 401, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2385, "seek": 949600, "start": 9513.0, "end": 9518.0, "text": " And if we look at what the type of this single value is this I location of zero is a boolean.", "tokens": [51214, 400, 498, 321, 574, 412, 437, 264, 2010, 295, 341, 2167, 2158, 307, 341, 286, 4914, 295, 4018, 307, 257, 748, 4812, 282, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2386, "seek": 949600, "start": 9518.0, "end": 9522.0, "text": " Let's take a look at the histogram on that now that we've created this new column.", "tokens": [51464, 961, 311, 747, 257, 574, 412, 264, 49816, 322, 300, 586, 300, 321, 600, 2942, 341, 777, 7738, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2387, "seek": 949600, "start": 9522.0, "end": 9525.0, "text": " And we see this perfect bimolality of 0 and 1.", "tokens": [51664, 400, 321, 536, 341, 2176, 272, 332, 401, 1860, 295, 1958, 293, 502, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08394099254997409, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.027578625828027725}, {"id": 2388, "seek": 952500, "start": 9525.0, "end": 9528.0, "text": " That's one way if you have different features that you want to create.", "tokens": [50364, 663, 311, 472, 636, 498, 291, 362, 819, 4122, 300, 291, 528, 281, 1884, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11941198266070822, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.007119578775018454}, {"id": 2389, "seek": 952500, "start": 9528.0, "end": 9532.0, "text": " It's very flexible to say if it's greater than 15, give it as bool.", "tokens": [50514, 467, 311, 588, 11358, 281, 584, 498, 309, 311, 5044, 813, 2119, 11, 976, 309, 382, 748, 401, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11941198266070822, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.007119578775018454}, {"id": 2390, "seek": 952500, "start": 9532.0, "end": 9537.0, "text": " You can also do something if you had a trimol tool or so three different groups or various other ways of slicing this.", "tokens": [50714, 509, 393, 611, 360, 746, 498, 291, 632, 257, 504, 332, 401, 2290, 420, 370, 1045, 819, 3935, 420, 3683, 661, 2098, 295, 46586, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11941198266070822, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.007119578775018454}, {"id": 2391, "seek": 952500, "start": 9537.0, "end": 9540.0, "text": " Any function you can think of that can be written down in Python.", "tokens": [50964, 2639, 2445, 291, 393, 519, 295, 300, 393, 312, 3720, 760, 294, 15329, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11941198266070822, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.007119578775018454}, {"id": 2392, "seek": 952500, "start": 9540.0, "end": 9548.0, "text": " You can then use to filter out the columns and I recommend creating new columns, but sometimes you can overwrite columns if that makes more sense.", "tokens": [51114, 509, 393, 550, 764, 281, 6608, 484, 264, 13766, 293, 286, 2748, 4084, 777, 13766, 11, 457, 2171, 291, 393, 670, 21561, 13766, 498, 300, 1669, 544, 2020, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11941198266070822, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.007119578775018454}, {"id": 2393, "seek": 954800, "start": 9548.0, "end": 9557.0, "text": " So after doing this we have another seaborne plot that's called a pair plot and let's execute this and then explain what's happening here.", "tokens": [50364, 407, 934, 884, 341, 321, 362, 1071, 369, 3816, 716, 7542, 300, 311, 1219, 257, 6119, 7542, 293, 718, 311, 14483, 341, 293, 550, 2903, 437, 311, 2737, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11036229407650301, "compression_ratio": 1.824390243902439, "no_speech_prob": 0.01262214221060276}, {"id": 2394, "seek": 954800, "start": 9557.0, "end": 9566.0, "text": " This is very similar to what's happening above in the scatter plot where we're having the same x value versus y value and the where they intersect.", "tokens": [50814, 639, 307, 588, 2531, 281, 437, 311, 2737, 3673, 294, 264, 34951, 7542, 689, 321, 434, 1419, 264, 912, 2031, 2158, 5717, 288, 2158, 293, 264, 689, 436, 27815, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11036229407650301, "compression_ratio": 1.824390243902439, "no_speech_prob": 0.01262214221060276}, {"id": 2395, "seek": 954800, "start": 9566.0, "end": 9571.0, "text": " So this medium value here is the same intersection of medium value on the x and y axis.", "tokens": [51264, 407, 341, 6399, 2158, 510, 307, 264, 912, 15236, 295, 6399, 2158, 322, 264, 2031, 293, 288, 10298, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11036229407650301, "compression_ratio": 1.824390243902439, "no_speech_prob": 0.01262214221060276}, {"id": 2396, "seek": 957100, "start": 9571.0, "end": 9579.0, "text": " Instead of a KDE or a kernel density estimation, which is that line, we did it with a histogram and that is a flag given right here.", "tokens": [50364, 7156, 295, 257, 591, 22296, 420, 257, 28256, 10305, 35701, 11, 597, 307, 300, 1622, 11, 321, 630, 309, 365, 257, 49816, 293, 300, 307, 257, 7166, 2212, 558, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12999030818109927, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.3698509633541107}, {"id": 2397, "seek": 957100, "start": 9579.0, "end": 9584.0, "text": " I guess it's just the default value. It's under dyag kind equals hist.", "tokens": [50764, 286, 2041, 309, 311, 445, 264, 7576, 2158, 13, 467, 311, 833, 14584, 559, 733, 6915, 1758, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12999030818109927, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.3698509633541107}, {"id": 2398, "seek": 957100, "start": 9584.0, "end": 9589.0, "text": " And if we did KDE it would give us the KDE plot as before.", "tokens": [51014, 400, 498, 321, 630, 591, 22296, 309, 576, 976, 505, 264, 591, 22296, 7542, 382, 949, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12999030818109927, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.3698509633541107}, {"id": 2399, "seek": 957100, "start": 9589.0, "end": 9594.0, "text": " There's one difference here though where we've given an extra character of hue.", "tokens": [51264, 821, 311, 472, 2649, 510, 1673, 689, 321, 600, 2212, 364, 2857, 2517, 295, 24967, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12999030818109927, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.3698509633541107}, {"id": 2400, "seek": 959400, "start": 9594.0, "end": 9602.0, "text": " So there is a Boolean value which is are you near the Charles River and this is similar to splitting the Titanic data set into male and female for each class.", "tokens": [50364, 407, 456, 307, 257, 23351, 28499, 2158, 597, 307, 366, 291, 2651, 264, 10523, 8640, 293, 341, 307, 2531, 281, 30348, 264, 42183, 1412, 992, 666, 7133, 293, 6556, 337, 1184, 1508, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12276748093691739, "compression_ratio": 1.6125, "no_speech_prob": 0.3205244541168213}, {"id": 2401, "seek": 959400, "start": 9602.0, "end": 9608.0, "text": " So it says give us the pairwise interactions between these variables. I just picked four of them.", "tokens": [50764, 407, 309, 1619, 976, 505, 264, 6119, 3711, 13280, 1296, 613, 9102, 13, 286, 445, 6183, 1451, 295, 552, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12276748093691739, "compression_ratio": 1.6125, "no_speech_prob": 0.3205244541168213}, {"id": 2402, "seek": 959400, "start": 9608.0, "end": 9616.0, "text": " And for each of these though I would like to see the differences whether you're close to this river split up by a different color.", "tokens": [51064, 400, 337, 1184, 295, 613, 1673, 286, 576, 411, 281, 536, 264, 7300, 1968, 291, 434, 1998, 281, 341, 6810, 7472, 493, 538, 257, 819, 2017, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12276748093691739, "compression_ratio": 1.6125, "no_speech_prob": 0.3205244541168213}, {"id": 2403, "seek": 961600, "start": 9616.0, "end": 9625.0, "text": " So we have this hue value can take a zero or a one and we see if there's possibly different distributions behavior conditioned on whether it's actually close to the river.", "tokens": [50364, 407, 321, 362, 341, 24967, 2158, 393, 747, 257, 4018, 420, 257, 472, 293, 321, 536, 498, 456, 311, 6264, 819, 37870, 5223, 35833, 322, 1968, 309, 311, 767, 1998, 281, 264, 6810, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09813768386840821, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.21191704273223877}, {"id": 2404, "seek": 961600, "start": 9625.0, "end": 9640.0, "text": " So this gives you an extra dimension of interaction and interpretability so you can see like oh I see that there's a behavior but it only exists if there's let's say the green dots had a nice tight relationship here and the blue dots were all kind of all vague and all over the place.", "tokens": [50814, 407, 341, 2709, 291, 364, 2857, 10139, 295, 9285, 293, 7302, 2310, 370, 291, 393, 536, 411, 1954, 286, 536, 300, 456, 311, 257, 5223, 457, 309, 787, 8198, 498, 456, 311, 718, 311, 584, 264, 3092, 15026, 632, 257, 1481, 4524, 2480, 510, 293, 264, 3344, 15026, 645, 439, 733, 295, 439, 24247, 293, 439, 670, 264, 1081, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09813768386840821, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.21191704273223877}, {"id": 2405, "seek": 964000, "start": 9640.0, "end": 9650.0, "text": " And so if you looked at this without splitting by this Boolean value you might say oh there's not much of a relationship here but turns out that this underlying feature could have been the really important thing.", "tokens": [50364, 400, 370, 498, 291, 2956, 412, 341, 1553, 30348, 538, 341, 23351, 28499, 2158, 291, 1062, 584, 1954, 456, 311, 406, 709, 295, 257, 2480, 510, 457, 4523, 484, 300, 341, 14217, 4111, 727, 362, 668, 264, 534, 1021, 551, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09459211471232962, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.3447504937648773}, {"id": 2406, "seek": 964000, "start": 9650.0, "end": 9657.0, "text": " Now I don't actually see anything that jumps out at me in this case but having this availability is something that's worth noting.", "tokens": [50864, 823, 286, 500, 380, 767, 536, 1340, 300, 16704, 484, 412, 385, 294, 341, 1389, 457, 1419, 341, 17945, 307, 746, 300, 311, 3163, 26801, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09459211471232962, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.3447504937648773}, {"id": 2407, "seek": 964000, "start": 9657.0, "end": 9662.0, "text": " So we'll do sms.kde plot and it'll be df.nox.", "tokens": [51214, 407, 321, 603, 360, 899, 82, 13, 74, 1479, 7542, 293, 309, 603, 312, 274, 69, 13, 29129, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09459211471232962, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.3447504937648773}, {"id": 2408, "seek": 966200, "start": 9662.0, "end": 9669.0, "text": " So we're seeing here it's not a histogram it's a kernel density estimation of the distribution of this underlying feature here.", "tokens": [50364, 407, 321, 434, 2577, 510, 309, 311, 406, 257, 49816, 309, 311, 257, 28256, 10305, 35701, 295, 264, 7316, 295, 341, 14217, 4111, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0921740670805996, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.3412570655345917}, {"id": 2409, "seek": 966200, "start": 9669.0, "end": 9673.0, "text": " So this is like a histogram but it's more of a smoothed out version of that.", "tokens": [50714, 407, 341, 307, 411, 257, 49816, 457, 309, 311, 544, 295, 257, 5508, 292, 484, 3037, 295, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0921740670805996, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.3412570655345917}, {"id": 2410, "seek": 966200, "start": 9673.0, "end": 9678.0, "text": " This is what happens if you give this kde plot method in seaborne single column of values.", "tokens": [50914, 639, 307, 437, 2314, 498, 291, 976, 341, 350, 1479, 7542, 3170, 294, 369, 3816, 716, 2167, 7738, 295, 4190, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0921740670805996, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.3412570655345917}, {"id": 2411, "seek": 966200, "start": 9678.0, "end": 9686.0, "text": " If you gave it two values let's give kde plot the Boolean value of rad versus the Knox value which we just plotted above.", "tokens": [51164, 759, 291, 2729, 309, 732, 4190, 718, 311, 976, 350, 1479, 7542, 264, 23351, 28499, 2158, 295, 2843, 5717, 264, 48510, 2158, 597, 321, 445, 43288, 3673, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0921740670805996, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.3412570655345917}, {"id": 2412, "seek": 968600, "start": 9686.0, "end": 9692.0, "text": " And we'll get a two dimensional plot which shows the distribution of these two values together.", "tokens": [50364, 400, 321, 603, 483, 257, 732, 18795, 7542, 597, 3110, 264, 7316, 295, 613, 732, 4190, 1214, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07861672460505392, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.05031101778149605}, {"id": 2413, "seek": 968600, "start": 9692.0, "end": 9700.0, "text": " So radian is a Boolean value when split it's in the x and y and you can see that if Boolean is true then the Knox values are actually conditioned higher.", "tokens": [50664, 407, 2843, 952, 307, 257, 23351, 28499, 2158, 562, 7472, 309, 311, 294, 264, 2031, 293, 288, 293, 291, 393, 536, 300, 498, 23351, 28499, 307, 2074, 550, 264, 48510, 4190, 366, 767, 35833, 2946, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07861672460505392, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.05031101778149605}, {"id": 2414, "seek": 968600, "start": 9700.0, "end": 9705.0, "text": " If it's zero then it's conditioned lower with a little bit of data points up here in the upper one.", "tokens": [51064, 759, 309, 311, 4018, 550, 309, 311, 35833, 3126, 365, 257, 707, 857, 295, 1412, 2793, 493, 510, 294, 264, 6597, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07861672460505392, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.05031101778149605}, {"id": 2415, "seek": 968600, "start": 9705.0, "end": 9712.0, "text": " So giving two dimensions to a kde plot you get this 2d map which shows you some contour plots some really nice things.", "tokens": [51314, 407, 2902, 732, 12819, 281, 257, 350, 1479, 7542, 291, 483, 341, 568, 67, 4471, 597, 3110, 291, 512, 21234, 28609, 512, 534, 1481, 721, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07861672460505392, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.05031101778149605}, {"id": 2416, "seek": 971200, "start": 9712.0, "end": 9717.0, "text": " One final thing for the pandas plotting thing is a thing called Andrew's curves.", "tokens": [50364, 1485, 2572, 551, 337, 264, 4565, 296, 41178, 551, 307, 257, 551, 1219, 10110, 311, 19490, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13036177469336468, "compression_ratio": 1.5864978902953586, "no_speech_prob": 0.057458993047475815}, {"id": 2417, "seek": 971200, "start": 9717.0, "end": 9724.0, "text": " Now I haven't used them much myself but in Wikipedia it has this as their answer of what Andrew's plots are.", "tokens": [50614, 823, 286, 2378, 380, 1143, 552, 709, 2059, 457, 294, 28999, 309, 575, 341, 382, 641, 1867, 295, 437, 10110, 311, 28609, 366, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13036177469336468, "compression_ratio": 1.5864978902953586, "no_speech_prob": 0.057458993047475815}, {"id": 2418, "seek": 971200, "start": 9724.0, "end": 9727.0, "text": " It's a way apparently to visualize structured high dimensional data.", "tokens": [50964, 467, 311, 257, 636, 7970, 281, 23273, 18519, 1090, 18795, 1412, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13036177469336468, "compression_ratio": 1.5864978902953586, "no_speech_prob": 0.057458993047475815}, {"id": 2419, "seek": 971200, "start": 9727.0, "end": 9734.0, "text": " They show it with the iris data set and the iris data set is the ubiquitous data set from Fisher way back in the day.", "tokens": [51114, 814, 855, 309, 365, 264, 3418, 271, 1412, 992, 293, 264, 3418, 271, 1412, 992, 307, 264, 43868, 39831, 1412, 992, 490, 26676, 636, 646, 294, 264, 786, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13036177469336468, "compression_ratio": 1.5864978902953586, "no_speech_prob": 0.057458993047475815}, {"id": 2420, "seek": 973400, "start": 9735.0, "end": 9740.0, "text": " And if we import this we can take a look at a specific value of a data frame.", "tokens": [50414, 400, 498, 321, 974, 341, 321, 393, 747, 257, 574, 412, 257, 2685, 2158, 295, 257, 1412, 3920, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10931232667738391, "compression_ratio": 1.708185053380783, "no_speech_prob": 0.5848509073257446}, {"id": 2421, "seek": 973400, "start": 9740.0, "end": 9748.0, "text": " So let's look at this whether this Boolean value has much structure to it and it doesn't look like it but perhaps this Knox value does.", "tokens": [50664, 407, 718, 311, 574, 412, 341, 1968, 341, 23351, 28499, 2158, 575, 709, 3877, 281, 309, 293, 309, 1177, 380, 574, 411, 309, 457, 4317, 341, 48510, 2158, 775, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10931232667738391, "compression_ratio": 1.708185053380783, "no_speech_prob": 0.5848509073257446}, {"id": 2422, "seek": 973400, "start": 9748.0, "end": 9754.0, "text": " And looks like there's too much to that one. Let's go with rad which is only a nine values for that.", "tokens": [51064, 400, 1542, 411, 456, 311, 886, 709, 281, 300, 472, 13, 961, 311, 352, 365, 2843, 597, 307, 787, 257, 4949, 4190, 337, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10931232667738391, "compression_ratio": 1.708185053380783, "no_speech_prob": 0.5848509073257446}, {"id": 2423, "seek": 973400, "start": 9754.0, "end": 9757.0, "text": " So you can try to see if there's clustering of behavior.", "tokens": [51364, 407, 291, 393, 853, 281, 536, 498, 456, 311, 596, 48673, 295, 5223, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10931232667738391, "compression_ratio": 1.708185053380783, "no_speech_prob": 0.5848509073257446}, {"id": 2424, "seek": 973400, "start": 9757.0, "end": 9763.0, "text": " Now the actual numbers here I think aren't so easy to read but the fact that this should give you a sense of", "tokens": [51514, 823, 264, 3539, 3547, 510, 286, 519, 3212, 380, 370, 1858, 281, 1401, 457, 264, 1186, 300, 341, 820, 976, 291, 257, 2020, 295, 51814], "temperature": 0.0, "avg_logprob": -0.10931232667738391, "compression_ratio": 1.708185053380783, "no_speech_prob": 0.5848509073257446}, {"id": 2425, "seek": 976300, "start": 9763.0, "end": 9768.0, "text": " if there's different behaviors going on. Too many data points overlying each other I will do a sample like this", "tokens": [50364, 498, 456, 311, 819, 15501, 516, 322, 13, 11395, 867, 1412, 2793, 670, 7310, 1184, 661, 286, 486, 360, 257, 6889, 411, 341, 50614], "temperature": 0.0, "avg_logprob": -0.09542626097002102, "compression_ratio": 1.8466453674121406, "no_speech_prob": 0.03619382902979851}, {"id": 2426, "seek": 976300, "start": 9768.0, "end": 9774.0, "text": " and a sample is another built-in function of data frames where you can say give me only a hundred values and then do the same exact plot.", "tokens": [50614, 293, 257, 6889, 307, 1071, 3094, 12, 259, 2445, 295, 1412, 12083, 689, 291, 393, 584, 976, 385, 787, 257, 3262, 4190, 293, 550, 360, 264, 912, 1900, 7542, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09542626097002102, "compression_ratio": 1.8466453674121406, "no_speech_prob": 0.03619382902979851}, {"id": 2427, "seek": 976300, "start": 9774.0, "end": 9781.0, "text": " And it'll pick out randomly a hundred values from this data frame and then you're doing the same kind of estimation here.", "tokens": [50914, 400, 309, 603, 1888, 484, 16979, 257, 3262, 4190, 490, 341, 1412, 3920, 293, 550, 291, 434, 884, 264, 912, 733, 295, 35701, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09542626097002102, "compression_ratio": 1.8466453674121406, "no_speech_prob": 0.03619382902979851}, {"id": 2428, "seek": 976300, "start": 9781.0, "end": 9786.0, "text": " And so at this point you might say hey this value of 24 for the data framework is rad.", "tokens": [51264, 400, 370, 412, 341, 935, 291, 1062, 584, 4177, 341, 2158, 295, 4022, 337, 264, 1412, 8388, 307, 2843, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09542626097002102, "compression_ratio": 1.8466453674121406, "no_speech_prob": 0.03619382902979851}, {"id": 2429, "seek": 976300, "start": 9786.0, "end": 9791.0, "text": " That looks like it's having fundamentally different behavior than the other values which seem to be clustered together.", "tokens": [51514, 663, 1542, 411, 309, 311, 1419, 17879, 819, 5223, 813, 264, 661, 4190, 597, 1643, 281, 312, 596, 38624, 1214, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09542626097002102, "compression_ratio": 1.8466453674121406, "no_speech_prob": 0.03619382902979851}, {"id": 2430, "seek": 979100, "start": 9791.0, "end": 9797.0, "text": " I don't know that this actually tells us much in this case but it's another piece of functionality that I think is worth knowing about.", "tokens": [50364, 286, 500, 380, 458, 300, 341, 767, 5112, 505, 709, 294, 341, 1389, 457, 309, 311, 1071, 2522, 295, 14980, 300, 286, 519, 307, 3163, 5276, 466, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05332139255554696, "compression_ratio": 1.7439446366782008, "no_speech_prob": 0.031133700162172318}, {"id": 2431, "seek": 979100, "start": 9797.0, "end": 9802.0, "text": " I'll go through the last few bits here and just talk about them really quickly.", "tokens": [50664, 286, 603, 352, 807, 264, 1036, 1326, 9239, 510, 293, 445, 751, 466, 552, 534, 2661, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05332139255554696, "compression_ratio": 1.7439446366782008, "no_speech_prob": 0.031133700162172318}, {"id": 2432, "seek": 979100, "start": 9802.0, "end": 9809.0, "text": " So here's another KDE plot of this median value for the houses which is what we've seen before but this is going to be the target", "tokens": [50914, 407, 510, 311, 1071, 591, 22296, 7542, 295, 341, 26779, 2158, 337, 264, 8078, 597, 307, 437, 321, 600, 1612, 949, 457, 341, 307, 516, 281, 312, 264, 3779, 51264], "temperature": 0.0, "avg_logprob": -0.05332139255554696, "compression_ratio": 1.7439446366782008, "no_speech_prob": 0.031133700162172318}, {"id": 2433, "seek": 979100, "start": 9809.0, "end": 9813.0, "text": " like how much the price of the house is actually going to be sold for.", "tokens": [51264, 411, 577, 709, 264, 3218, 295, 264, 1782, 307, 767, 516, 281, 312, 3718, 337, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05332139255554696, "compression_ratio": 1.7439446366782008, "no_speech_prob": 0.031133700162172318}, {"id": 2434, "seek": 979100, "start": 9813.0, "end": 9818.0, "text": " And we can add to that by saying we want to also see what's called this rug being true.", "tokens": [51464, 400, 321, 393, 909, 281, 300, 538, 1566, 321, 528, 281, 611, 536, 437, 311, 1219, 341, 18329, 885, 2074, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05332139255554696, "compression_ratio": 1.7439446366782008, "no_speech_prob": 0.031133700162172318}, {"id": 2435, "seek": 981800, "start": 9818.0, "end": 9825.0, "text": " So instead of doing a KDE plot we can give it a distribution plot and add the fringe kind of rug thing at the bottom", "tokens": [50364, 407, 2602, 295, 884, 257, 591, 22296, 7542, 321, 393, 976, 309, 257, 7316, 7542, 293, 909, 264, 38764, 733, 295, 18329, 551, 412, 264, 2767, 50714], "temperature": 0.0, "avg_logprob": -0.0593909529539255, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.007576195523142815}, {"id": 2436, "seek": 981800, "start": 9825.0, "end": 9829.0, "text": " which adds the actual density of points at these different values.", "tokens": [50714, 597, 10860, 264, 3539, 10305, 295, 2793, 412, 613, 819, 4190, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0593909529539255, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.007576195523142815}, {"id": 2437, "seek": 981800, "start": 9829.0, "end": 9833.0, "text": " So you can see that it is actually very dense here as we go across these values.", "tokens": [50914, 407, 291, 393, 536, 300, 309, 307, 767, 588, 18011, 510, 382, 321, 352, 2108, 613, 4190, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0593909529539255, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.007576195523142815}, {"id": 2438, "seek": 981800, "start": 9833.0, "end": 9838.0, "text": " So sometimes if you've chosen a kernel that's too wide or too narrow for your underlying dataset", "tokens": [51114, 407, 2171, 498, 291, 600, 8614, 257, 28256, 300, 311, 886, 4874, 420, 886, 9432, 337, 428, 14217, 28872, 51364], "temperature": 0.0, "avg_logprob": -0.0593909529539255, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.007576195523142815}, {"id": 2439, "seek": 981800, "start": 9838.0, "end": 9843.0, "text": " seeing the rug along the bottom here gives you extra clues into what's going on.", "tokens": [51364, 2577, 264, 18329, 2051, 264, 2767, 510, 2709, 291, 2857, 20936, 666, 437, 311, 516, 322, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0593909529539255, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.007576195523142815}, {"id": 2440, "seek": 984300, "start": 9843.0, "end": 9849.0, "text": " And one last look here at two variables that might actually be more useful for looking at relationships.", "tokens": [50364, 400, 472, 1036, 574, 510, 412, 732, 9102, 300, 1062, 767, 312, 544, 4420, 337, 1237, 412, 6159, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08969387641319862, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.07581500709056854}, {"id": 2441, "seek": 984300, "start": 9849.0, "end": 9857.0, "text": " The median value versus the L stat and you can see that there's this kind of banana shaped curve here going on in the relationships.", "tokens": [50664, 440, 26779, 2158, 5717, 264, 441, 2219, 293, 291, 393, 536, 300, 456, 311, 341, 733, 295, 14194, 13475, 7605, 510, 516, 322, 294, 264, 6159, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08969387641319862, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.07581500709056854}, {"id": 2442, "seek": 984300, "start": 9857.0, "end": 9860.0, "text": " Okay so that's going to be it for this video.", "tokens": [51064, 1033, 370, 300, 311, 516, 281, 312, 309, 337, 341, 960, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08969387641319862, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.07581500709056854}, {"id": 2443, "seek": 984300, "start": 9860.0, "end": 9864.0, "text": " What we did in this video is we showed a number of different visualization techniques.", "tokens": [51214, 708, 321, 630, 294, 341, 960, 307, 321, 4712, 257, 1230, 295, 819, 25801, 7512, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08969387641319862, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.07581500709056854}, {"id": 2444, "seek": 984300, "start": 9864.0, "end": 9871.0, "text": " We took a value that had a clear bimodality of a low and a high group and created a new data frame column to encode that.", "tokens": [51414, 492, 1890, 257, 2158, 300, 632, 257, 1850, 272, 332, 378, 1860, 295, 257, 2295, 293, 257, 1090, 1594, 293, 2942, 257, 777, 1412, 3920, 7738, 281, 2058, 1429, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08969387641319862, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.07581500709056854}, {"id": 2445, "seek": 987100, "start": 9871.0, "end": 9881.0, "text": " Went through also and saw various methods of doing kernel density estimations, scatter plots and various other features.", "tokens": [50364, 31809, 807, 611, 293, 1866, 3683, 7150, 295, 884, 28256, 10305, 8017, 763, 11, 34951, 28609, 293, 3683, 661, 4122, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07069621034847792, "compression_ratio": 1.6484375, "no_speech_prob": 0.005218841601163149}, {"id": 2446, "seek": 987100, "start": 9881.0, "end": 9884.0, "text": " In this video we'll be talking about stats models.", "tokens": [50864, 682, 341, 960, 321, 603, 312, 1417, 466, 18152, 5245, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07069621034847792, "compression_ratio": 1.6484375, "no_speech_prob": 0.005218841601163149}, {"id": 2447, "seek": 987100, "start": 9884.0, "end": 9892.0, "text": " Stats models is a library that you can use that allows for a lot of statistical machinery that can help you with your data science work.", "tokens": [51014, 745, 1720, 5245, 307, 257, 6405, 300, 291, 393, 764, 300, 4045, 337, 257, 688, 295, 22820, 27302, 300, 393, 854, 291, 365, 428, 1412, 3497, 589, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07069621034847792, "compression_ratio": 1.6484375, "no_speech_prob": 0.005218841601163149}, {"id": 2448, "seek": 987100, "start": 9892.0, "end": 9899.0, "text": " So we'll continue with the same Boston housing dataset as before which we were just looking at in the last video.", "tokens": [51414, 407, 321, 603, 2354, 365, 264, 912, 12333, 6849, 28872, 382, 949, 597, 321, 645, 445, 1237, 412, 294, 264, 1036, 960, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07069621034847792, "compression_ratio": 1.6484375, "no_speech_prob": 0.005218841601163149}, {"id": 2449, "seek": 989900, "start": 9899.0, "end": 9903.0, "text": " And take a look at some of these Boston housing prices.", "tokens": [50364, 400, 747, 257, 574, 412, 512, 295, 613, 12333, 6849, 7901, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07476765518888422, "compression_ratio": 1.7109375, "no_speech_prob": 0.016648486256599426}, {"id": 2450, "seek": 989900, "start": 9903.0, "end": 9907.0, "text": " Let me toggle this header in this toolbar real fast.", "tokens": [50564, 961, 385, 31225, 341, 23117, 294, 341, 47715, 957, 2370, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07476765518888422, "compression_ratio": 1.7109375, "no_speech_prob": 0.016648486256599426}, {"id": 2451, "seek": 989900, "start": 9907.0, "end": 9910.0, "text": " Make this full screen so we have a little extra room to look at.", "tokens": [50764, 4387, 341, 1577, 2568, 370, 321, 362, 257, 707, 2857, 1808, 281, 574, 412, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07476765518888422, "compression_ratio": 1.7109375, "no_speech_prob": 0.016648486256599426}, {"id": 2452, "seek": 989900, "start": 9910.0, "end": 9917.0, "text": " So we will load in the scikit-learn dataset load Boston which again has the same attributes as we saw in the previous videos.", "tokens": [50914, 407, 321, 486, 3677, 294, 264, 2180, 22681, 12, 306, 1083, 28872, 3677, 12333, 597, 797, 575, 264, 912, 17212, 382, 321, 1866, 294, 264, 3894, 2145, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07476765518888422, "compression_ratio": 1.7109375, "no_speech_prob": 0.016648486256599426}, {"id": 2453, "seek": 989900, "start": 9917.0, "end": 9926.0, "text": " We will construct our pandas data frame from this scikit-learn dataset so that we can use the standard tools we've learned over the years.", "tokens": [51264, 492, 486, 7690, 527, 4565, 296, 1412, 3920, 490, 341, 2180, 22681, 12, 306, 1083, 28872, 370, 300, 321, 393, 764, 264, 3832, 3873, 321, 600, 3264, 670, 264, 924, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07476765518888422, "compression_ratio": 1.7109375, "no_speech_prob": 0.016648486256599426}, {"id": 2454, "seek": 992600, "start": 9926.0, "end": 9934.0, "text": " We've combined the features and the target into one data frame and here's that scatter matrix plot we made in the previous video as well.", "tokens": [50364, 492, 600, 9354, 264, 4122, 293, 264, 3779, 666, 472, 1412, 3920, 293, 510, 311, 300, 34951, 8141, 7542, 321, 1027, 294, 264, 3894, 960, 382, 731, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08450573006856073, "compression_ratio": 1.66, "no_speech_prob": 0.033070098608732224}, {"id": 2455, "seek": 992600, "start": 9934.0, "end": 9936.0, "text": " This is a pandas call.", "tokens": [50764, 639, 307, 257, 4565, 296, 818, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08450573006856073, "compression_ratio": 1.66, "no_speech_prob": 0.033070098608732224}, {"id": 2456, "seek": 992600, "start": 9936.0, "end": 9941.0, "text": " So with this function call we get all of the pairwise interaction terms for this dataset.", "tokens": [50864, 407, 365, 341, 2445, 818, 321, 483, 439, 295, 264, 6119, 3711, 9285, 2115, 337, 341, 28872, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08450573006856073, "compression_ratio": 1.66, "no_speech_prob": 0.033070098608732224}, {"id": 2457, "seek": 992600, "start": 9941.0, "end": 9949.0, "text": " And from this we see a number of features that look like they have some strong trends with the thing we would try to predict which is the median value of the house.", "tokens": [51114, 400, 490, 341, 321, 536, 257, 1230, 295, 4122, 300, 574, 411, 436, 362, 512, 2068, 13892, 365, 264, 551, 321, 576, 853, 281, 6069, 597, 307, 264, 26779, 2158, 295, 264, 1782, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08450573006856073, "compression_ratio": 1.66, "no_speech_prob": 0.033070098608732224}, {"id": 2458, "seek": 994900, "start": 9949.0, "end": 9951.0, "text": " There's a trend here with this RM.", "tokens": [50364, 821, 311, 257, 6028, 510, 365, 341, 23790, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2459, "seek": 994900, "start": 9951.0, "end": 9956.0, "text": " It looks like there's this kind of banana shaped L-stat curve that we talked about at the end of the previous video.", "tokens": [50464, 467, 1542, 411, 456, 311, 341, 733, 295, 14194, 13475, 441, 12, 19435, 7605, 300, 321, 2825, 466, 412, 264, 917, 295, 264, 3894, 960, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2460, "seek": 994900, "start": 9956.0, "end": 9963.0, "text": " So we have a few things that we think you might be able to combine into some sort of model that will predict our median value.", "tokens": [50714, 407, 321, 362, 257, 1326, 721, 300, 321, 519, 291, 1062, 312, 1075, 281, 10432, 666, 512, 1333, 295, 2316, 300, 486, 6069, 527, 26779, 2158, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2461, "seek": 994900, "start": 9963.0, "end": 9967.0, "text": " Again, let's look at the columns and the number of unique values for each of these.", "tokens": [51064, 3764, 11, 718, 311, 574, 412, 264, 13766, 293, 264, 1230, 295, 3845, 4190, 337, 1184, 295, 613, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2462, "seek": 994900, "start": 9967.0, "end": 9969.0, "text": " In particular, Rad has nine values.", "tokens": [51264, 682, 1729, 11, 9654, 575, 4949, 4190, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2463, "seek": 994900, "start": 9969.0, "end": 9970.0, "text": " We previously made that a Boolean.", "tokens": [51364, 492, 8046, 1027, 300, 257, 23351, 28499, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2464, "seek": 994900, "start": 9970.0, "end": 9973.0, "text": " Let's actually take a look at what the values comprise it.", "tokens": [51414, 961, 311, 767, 747, 257, 574, 412, 437, 264, 4190, 16802, 908, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13222595274917723, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.7790168523788452}, {"id": 2465, "seek": 997300, "start": 9973.0, "end": 9977.0, "text": " So there are nine values and these are the values.", "tokens": [50364, 407, 456, 366, 4949, 4190, 293, 613, 366, 264, 4190, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09017412779761143, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.02594902738928795}, {"id": 2466, "seek": 997300, "start": 9977.0, "end": 9980.0, "text": " And then 24 is obviously the outlier here.", "tokens": [50564, 400, 550, 4022, 307, 2745, 264, 484, 2753, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09017412779761143, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.02594902738928795}, {"id": 2467, "seek": 997300, "start": 9980.0, "end": 9983.0, "text": " And we previously made a Boolean variable, which we can do again right now.", "tokens": [50714, 400, 321, 8046, 1027, 257, 23351, 28499, 7006, 11, 597, 321, 393, 360, 797, 558, 586, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09017412779761143, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.02594902738928795}, {"id": 2468, "seek": 997300, "start": 9983.0, "end": 9995.0, "text": " So we'll split everything from less than 15, which means everything up to here, 1, 2, 3, 4, 5, 6, 7, 8 will be labeled as 0 and 24 will be labeled as 1.", "tokens": [50864, 407, 321, 603, 7472, 1203, 490, 1570, 813, 2119, 11, 597, 1355, 1203, 493, 281, 510, 11, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 11, 1386, 11, 1614, 11, 1649, 486, 312, 21335, 382, 1958, 293, 4022, 486, 312, 21335, 382, 502, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09017412779761143, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.02594902738928795}, {"id": 2469, "seek": 997300, "start": 9995.0, "end": 10002.0, "text": " Let's look at the target variable, which is this median value plot just done as a distribution plot with a rug at the bottom.", "tokens": [51464, 961, 311, 574, 412, 264, 3779, 7006, 11, 597, 307, 341, 26779, 2158, 7542, 445, 1096, 382, 257, 7316, 7542, 365, 257, 18329, 412, 264, 2767, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09017412779761143, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.02594902738928795}, {"id": 2470, "seek": 1000200, "start": 10002.0, "end": 10007.0, "text": " And so this will be the target variable and we see some interesting structure going on here.", "tokens": [50364, 400, 370, 341, 486, 312, 264, 3779, 7006, 293, 321, 536, 512, 1880, 3877, 516, 322, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2471, "seek": 1000200, "start": 10007.0, "end": 10013.0, "text": " So plot again L-stat, which we identified just a second ago, versus median value.", "tokens": [50614, 407, 7542, 797, 441, 12, 19435, 11, 597, 321, 9234, 445, 257, 1150, 2057, 11, 5717, 26779, 2158, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2472, "seek": 1000200, "start": 10013.0, "end": 10016.0, "text": " We have again this kind of weird shaped banana plot.", "tokens": [50914, 492, 362, 797, 341, 733, 295, 3657, 13475, 14194, 7542, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2473, "seek": 1000200, "start": 10016.0, "end": 10019.0, "text": " This is sort of a tapering off effect of this thing.", "tokens": [51064, 639, 307, 1333, 295, 257, 5119, 1794, 766, 1802, 295, 341, 551, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2474, "seek": 1000200, "start": 10019.0, "end": 10021.0, "text": " So stats models.", "tokens": [51214, 407, 18152, 5245, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2475, "seek": 1000200, "start": 10021.0, "end": 10026.0, "text": " Let's actually go and take a look at this as a Google search.", "tokens": [51314, 961, 311, 767, 352, 293, 747, 257, 574, 412, 341, 382, 257, 3329, 3164, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2476, "seek": 1000200, "start": 10026.0, "end": 10029.0, "text": " So stats models for Python.", "tokens": [51564, 407, 18152, 5245, 337, 15329, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10993320801678826, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.014059345237910748}, {"id": 2477, "seek": 1002900, "start": 10029.0, "end": 10035.0, "text": " The current documentation for this sits at statsmodels.sourceforge.net.", "tokens": [50364, 440, 2190, 14333, 337, 341, 12696, 412, 18152, 8014, 1625, 13, 41676, 2994, 432, 13, 7129, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10814423396669585, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.02160603553056717}, {"id": 2478, "seek": 1002900, "start": 10035.0, "end": 10045.0, "text": " And it has, as it says, it's a Python module that allows users to look at data to estimate statistical models and perform statistical tests as many different modeling choices.", "tokens": [50664, 400, 309, 575, 11, 382, 309, 1619, 11, 309, 311, 257, 15329, 10088, 300, 4045, 5022, 281, 574, 412, 1412, 281, 12539, 22820, 5245, 293, 2042, 22820, 6921, 382, 867, 819, 15983, 7994, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10814423396669585, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.02160603553056717}, {"id": 2479, "seek": 1002900, "start": 10045.0, "end": 10054.0, "text": " So our options, we have linear regression, generalized linear models and all the things listed here, and also some nice examples that explain more.", "tokens": [51164, 407, 527, 3956, 11, 321, 362, 8213, 24590, 11, 44498, 8213, 5245, 293, 439, 264, 721, 10052, 510, 11, 293, 611, 512, 1481, 5110, 300, 2903, 544, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10814423396669585, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.02160603553056717}, {"id": 2480, "seek": 1005400, "start": 10054.0, "end": 10063.0, "text": " This is definitely a package that's geared more toward the statistical side of data science than the machine learning side, which is how I'd classify scikit-learn.", "tokens": [50364, 639, 307, 2138, 257, 7372, 300, 311, 35924, 544, 7361, 264, 22820, 1252, 295, 1412, 3497, 813, 264, 3479, 2539, 1252, 11, 597, 307, 577, 286, 1116, 33872, 2180, 22681, 12, 306, 1083, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07748533915547491, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.1966753900051117}, {"id": 2481, "seek": 1005400, "start": 10063.0, "end": 10069.0, "text": " So with that comes a number of useful tools that if you haven't used them, it can be very powerful.", "tokens": [50814, 407, 365, 300, 1487, 257, 1230, 295, 4420, 3873, 300, 498, 291, 2378, 380, 1143, 552, 11, 309, 393, 312, 588, 4005, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07748533915547491, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.1966753900051117}, {"id": 2482, "seek": 1005400, "start": 10069.0, "end": 10072.0, "text": " So this is where the documentation resides.", "tokens": [51114, 407, 341, 307, 689, 264, 14333, 47157, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07748533915547491, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.1966753900051117}, {"id": 2483, "seek": 1005400, "start": 10072.0, "end": 10074.0, "text": " I recommend looking at that.", "tokens": [51264, 286, 2748, 1237, 412, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07748533915547491, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.1966753900051117}, {"id": 2484, "seek": 1005400, "start": 10074.0, "end": 10076.0, "text": " We imported this at the top.", "tokens": [51364, 492, 25524, 341, 412, 264, 1192, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07748533915547491, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.1966753900051117}, {"id": 2485, "seek": 1005400, "start": 10076.0, "end": 10078.0, "text": " So I'll scroll up to the top real fast.", "tokens": [51464, 407, 286, 603, 11369, 493, 281, 264, 1192, 957, 2370, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07748533915547491, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.1966753900051117}, {"id": 2486, "seek": 1007800, "start": 10078.0, "end": 10084.0, "text": " We imported statsmodels.api as SM, which is not a typical way of importing Python modules.", "tokens": [50364, 492, 25524, 18152, 8014, 1625, 13, 35891, 382, 13115, 11, 597, 307, 406, 257, 7476, 636, 295, 43866, 15329, 16679, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09508047103881836, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.060050830245018005}, {"id": 2487, "seek": 1007800, "start": 10084.0, "end": 10087.0, "text": " This is one of the standard ways of doing stats models.", "tokens": [50664, 639, 307, 472, 295, 264, 3832, 2098, 295, 884, 18152, 5245, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09508047103881836, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.060050830245018005}, {"id": 2488, "seek": 1007800, "start": 10087.0, "end": 10094.0, "text": " And then there's this formula.api, from which we're going to import ordinary least squares, which is just OLS in this case.", "tokens": [50814, 400, 550, 456, 311, 341, 8513, 13, 35891, 11, 490, 597, 321, 434, 516, 281, 974, 10547, 1935, 19368, 11, 597, 307, 445, 422, 19198, 294, 341, 1389, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09508047103881836, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.060050830245018005}, {"id": 2489, "seek": 1007800, "start": 10094.0, "end": 10096.0, "text": " So let's scroll back down.", "tokens": [51164, 407, 718, 311, 11369, 646, 760, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09508047103881836, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.060050830245018005}, {"id": 2490, "seek": 1007800, "start": 10096.0, "end": 10099.0, "text": " The formulas work in a way that's very similar to R.", "tokens": [51264, 440, 30546, 589, 294, 257, 636, 300, 311, 588, 2531, 281, 497, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09508047103881836, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.060050830245018005}, {"id": 2491, "seek": 1007800, "start": 10099.0, "end": 10107.0, "text": " So if you've used R before, or if you've used the Python package Patsy or various other ones, what you end up writing is the dependent variables.", "tokens": [51414, 407, 498, 291, 600, 1143, 497, 949, 11, 420, 498, 291, 600, 1143, 264, 15329, 7372, 430, 1720, 88, 420, 3683, 661, 2306, 11, 437, 291, 917, 493, 3579, 307, 264, 12334, 9102, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09508047103881836, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.060050830245018005}, {"id": 2492, "seek": 1010700, "start": 10108.0, "end": 10110.0, "text": " Or the thing you're trying to predict.", "tokens": [50414, 1610, 264, 551, 291, 434, 1382, 281, 6069, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2493, "seek": 1010700, "start": 10110.0, "end": 10116.0, "text": " So in this case, the median value, this tilde, which goes as Lstat, which is this thing that we're just plotting up here.", "tokens": [50514, 407, 294, 341, 1389, 11, 264, 26779, 2158, 11, 341, 45046, 11, 597, 1709, 382, 441, 19435, 11, 597, 307, 341, 551, 300, 321, 434, 445, 41178, 493, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2494, "seek": 1010700, "start": 10116.0, "end": 10119.0, "text": " So Lstat versus medv median value.", "tokens": [50814, 407, 441, 19435, 5717, 1205, 85, 26779, 2158, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2495, "seek": 1010700, "start": 10119.0, "end": 10123.0, "text": " So we've given the formula in terms of the relationship between these different variables.", "tokens": [50964, 407, 321, 600, 2212, 264, 8513, 294, 2115, 295, 264, 2480, 1296, 613, 819, 9102, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2496, "seek": 1010700, "start": 10123.0, "end": 10126.0, "text": " I have to tell the model where the data comes from.", "tokens": [51164, 286, 362, 281, 980, 264, 2316, 689, 264, 1412, 1487, 490, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2497, "seek": 1010700, "start": 10126.0, "end": 10127.0, "text": " So we say this data frame.", "tokens": [51314, 407, 321, 584, 341, 1412, 3920, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2498, "seek": 1010700, "start": 10127.0, "end": 10136.0, "text": " When you give it this data frame, it says, okay, I'm going to look in this data source, df, four columns that are named in the same way that you've written it out in this formula here.", "tokens": [51364, 1133, 291, 976, 309, 341, 1412, 3920, 11, 309, 1619, 11, 1392, 11, 286, 478, 516, 281, 574, 294, 341, 1412, 4009, 11, 274, 69, 11, 1451, 13766, 300, 366, 4926, 294, 264, 912, 636, 300, 291, 600, 3720, 309, 484, 294, 341, 8513, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1106145661452721, "compression_ratio": 1.7973856209150327, "no_speech_prob": 0.00857541337609291}, {"id": 2499, "seek": 1013600, "start": 10136.0, "end": 10142.0, "text": " So we've said, okay, we've rewritten out medv and Lstat are actual columns.", "tokens": [50364, 407, 321, 600, 848, 11, 1392, 11, 321, 600, 319, 26859, 484, 1205, 85, 293, 441, 19435, 366, 3539, 13766, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2500, "seek": 1013600, "start": 10142.0, "end": 10145.0, "text": " And at the end, we will fit this with the dot fit function.", "tokens": [50664, 400, 412, 264, 917, 11, 321, 486, 3318, 341, 365, 264, 5893, 3318, 2445, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2501, "seek": 1013600, "start": 10145.0, "end": 10149.0, "text": " And the end, you have a model, which we've written down as mod.", "tokens": [50814, 400, 264, 917, 11, 291, 362, 257, 2316, 11, 597, 321, 600, 3720, 760, 382, 1072, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2502, "seek": 1013600, "start": 10149.0, "end": 10155.0, "text": " And running the method dot summary tells us the output of trying to fit this data.", "tokens": [51014, 400, 2614, 264, 3170, 5893, 12691, 5112, 505, 264, 5598, 295, 1382, 281, 3318, 341, 1412, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2503, "seek": 1013600, "start": 10155.0, "end": 10157.0, "text": " So we have the results from that.", "tokens": [51314, 407, 321, 362, 264, 3542, 490, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2504, "seek": 1013600, "start": 10157.0, "end": 10159.0, "text": " So the dependent variable is median value.", "tokens": [51414, 407, 264, 12334, 7006, 307, 26779, 2158, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2505, "seek": 1013600, "start": 10159.0, "end": 10165.0, "text": " The model is ordinarily squares method least squares tells you a bunch of different pieces of information that are pretty good.", "tokens": [51514, 440, 2316, 307, 25376, 3289, 19368, 3170, 1935, 19368, 5112, 291, 257, 3840, 295, 819, 3755, 295, 1589, 300, 366, 1238, 665, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11216173553466798, "compression_ratio": 1.7455197132616487, "no_speech_prob": 0.004904423840343952}, {"id": 2506, "seek": 1016500, "start": 10165.0, "end": 10167.0, "text": " These pieces of information that are pretty useful here.", "tokens": [50364, 1981, 3755, 295, 1589, 300, 366, 1238, 4420, 510, 13, 50464], "temperature": 0.0, "avg_logprob": -0.14727201987439253, "compression_ratio": 1.6947040498442367, "no_speech_prob": 0.041431788355112076}, {"id": 2507, "seek": 1016500, "start": 10167.0, "end": 10175.0, "text": " So we have r squared, adjusted r squared, f statistics, log likelihood, AIC, the Ikeke information criteria, or however you say that.", "tokens": [50464, 407, 321, 362, 367, 8889, 11, 19871, 367, 8889, 11, 283, 12523, 11, 3565, 22119, 11, 316, 2532, 11, 264, 286, 330, 330, 1589, 11101, 11, 420, 4461, 291, 584, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14727201987439253, "compression_ratio": 1.6947040498442367, "no_speech_prob": 0.041431788355112076}, {"id": 2508, "seek": 1016500, "start": 10175.0, "end": 10181.0, "text": " Of course, the values of the coefficients and the intercepts, standard error, the 95% confidence intervals and so on.", "tokens": [50864, 2720, 1164, 11, 264, 4190, 295, 264, 31994, 293, 264, 24700, 82, 11, 3832, 6713, 11, 264, 13420, 4, 6687, 26651, 293, 370, 322, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14727201987439253, "compression_ratio": 1.6947040498442367, "no_speech_prob": 0.041431788355112076}, {"id": 2509, "seek": 1016500, "start": 10181.0, "end": 10188.0, "text": " If you're looking at this and wanting to evaluate this model statistically, you have all kinds of things at your fingertips here to look at.", "tokens": [51164, 759, 291, 434, 1237, 412, 341, 293, 7935, 281, 13059, 341, 2316, 36478, 11, 291, 362, 439, 3685, 295, 721, 412, 428, 27715, 510, 281, 574, 412, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14727201987439253, "compression_ratio": 1.6947040498442367, "no_speech_prob": 0.041431788355112076}, {"id": 2510, "seek": 1016500, "start": 10188.0, "end": 10194.0, "text": " Now, the relationship between Lstat and median value of the houses does not look linear to me.", "tokens": [51514, 823, 11, 264, 2480, 1296, 441, 19435, 293, 26779, 2158, 295, 264, 8078, 775, 406, 574, 8213, 281, 385, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14727201987439253, "compression_ratio": 1.6947040498442367, "no_speech_prob": 0.041431788355112076}, {"id": 2511, "seek": 1019400, "start": 10194.0, "end": 10198.0, "text": " This looks like a weird shape here and we can actually plot this with the river.", "tokens": [50364, 639, 1542, 411, 257, 3657, 3909, 510, 293, 321, 393, 767, 7542, 341, 365, 264, 6810, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10173196902220276, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.022276051342487335}, {"id": 2512, "seek": 1019400, "start": 10198.0, "end": 10208.0, "text": " We can reverse this and see how this kind of tapering off of the median value versus Lstat can be a combination of features.", "tokens": [50564, 492, 393, 9943, 341, 293, 536, 577, 341, 733, 295, 5119, 1794, 766, 295, 264, 26779, 2158, 5717, 441, 19435, 393, 312, 257, 6562, 295, 4122, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10173196902220276, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.022276051342487335}, {"id": 2513, "seek": 1019400, "start": 10208.0, "end": 10212.0, "text": " So I'm going to add an extra term here.", "tokens": [51064, 407, 286, 478, 516, 281, 909, 364, 2857, 1433, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10173196902220276, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.022276051342487335}, {"id": 2514, "seek": 1019400, "start": 10212.0, "end": 10218.0, "text": " I'll actually take the log of the value and you can actually write it in this way in this string.", "tokens": [51264, 286, 603, 767, 747, 264, 3565, 295, 264, 2158, 293, 291, 393, 767, 2464, 309, 294, 341, 636, 294, 341, 6798, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10173196902220276, "compression_ratio": 1.6570048309178744, "no_speech_prob": 0.022276051342487335}, {"id": 2515, "seek": 1021800, "start": 10218.0, "end": 10223.0, "text": " So you say numpy.log or np.log of the variable that you want to look at.", "tokens": [50364, 407, 291, 584, 1031, 8200, 13, 4987, 420, 33808, 13, 4987, 295, 264, 7006, 300, 291, 528, 281, 574, 412, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10638759047896773, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.3553673326969147}, {"id": 2516, "seek": 1021800, "start": 10223.0, "end": 10229.0, "text": " And you have to wrap it in this extra I for wrapping up because this doesn't actually exist as a column.", "tokens": [50614, 400, 291, 362, 281, 7019, 309, 294, 341, 2857, 286, 337, 21993, 493, 570, 341, 1177, 380, 767, 2514, 382, 257, 7738, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10638759047896773, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.3553673326969147}, {"id": 2517, "seek": 1021800, "start": 10229.0, "end": 10232.0, "text": " You have to wrap it in this I. There's other ways you can wrap this as well.", "tokens": [50914, 509, 362, 281, 7019, 309, 294, 341, 286, 13, 821, 311, 661, 2098, 291, 393, 7019, 341, 382, 731, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10638759047896773, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.3553673326969147}, {"id": 2518, "seek": 1021800, "start": 10232.0, "end": 10240.0, "text": " But I think having this and this both be in this linear model is likely to give a much better fit than just the Lstat by itself.", "tokens": [51064, 583, 286, 519, 1419, 341, 293, 341, 1293, 312, 294, 341, 8213, 2316, 307, 3700, 281, 976, 257, 709, 1101, 3318, 813, 445, 264, 441, 19435, 538, 2564, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10638759047896773, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.3553673326969147}, {"id": 2519, "seek": 1021800, "start": 10240.0, "end": 10247.0, "text": " Or even Lstat squared, which we could also do simply by just instead of it numpy.log, we do Lstat star star squared.", "tokens": [51464, 1610, 754, 441, 19435, 8889, 11, 597, 321, 727, 611, 360, 2935, 538, 445, 2602, 295, 309, 1031, 8200, 13, 4987, 11, 321, 360, 441, 19435, 3543, 3543, 8889, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10638759047896773, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.3553673326969147}, {"id": 2520, "seek": 1024700, "start": 10247.0, "end": 10256.0, "text": " So let's run this and we see our summary comes out and we have our R squared and AIC and all these different various intercepts and log values.", "tokens": [50364, 407, 718, 311, 1190, 341, 293, 321, 536, 527, 12691, 1487, 484, 293, 321, 362, 527, 497, 8889, 293, 316, 2532, 293, 439, 613, 819, 3683, 24700, 82, 293, 3565, 4190, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08308388519287109, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.01589970663189888}, {"id": 2521, "seek": 1024700, "start": 10256.0, "end": 10258.0, "text": " So let's actually compare the two.", "tokens": [50814, 407, 718, 311, 767, 6794, 264, 732, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08308388519287109, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.01589970663189888}, {"id": 2522, "seek": 1024700, "start": 10258.0, "end": 10260.0, "text": " So one way to compare it is to look at the AIC.", "tokens": [50914, 407, 472, 636, 281, 6794, 309, 307, 281, 574, 412, 264, 316, 2532, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08308388519287109, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.01589970663189888}, {"id": 2523, "seek": 1024700, "start": 10260.0, "end": 10267.0, "text": " So this one from 3200 down to 3100, which is a pretty substantial decrease in the AIC.", "tokens": [51014, 407, 341, 472, 490, 805, 7629, 760, 281, 805, 6879, 11, 597, 307, 257, 1238, 16726, 11514, 294, 264, 316, 2532, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08308388519287109, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.01589970663189888}, {"id": 2524, "seek": 1024700, "start": 10267.0, "end": 10274.0, "text": " So we think this is actually a better fit statistically, although we have to look at the residuals and do many other tests to make sure that this is actually is a viable model.", "tokens": [51364, 407, 321, 519, 341, 307, 767, 257, 1101, 3318, 36478, 11, 4878, 321, 362, 281, 574, 412, 264, 27980, 82, 293, 360, 867, 661, 6921, 281, 652, 988, 300, 341, 307, 767, 307, 257, 22024, 2316, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08308388519287109, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.01589970663189888}, {"id": 2525, "seek": 1027400, "start": 10274.0, "end": 10281.0, "text": " So that we're nowhere near done and like to double emphasize that what I'm showing you here is not a final rigorous data science result.", "tokens": [50364, 407, 300, 321, 434, 11159, 2651, 1096, 293, 411, 281, 3834, 16078, 300, 437, 286, 478, 4099, 291, 510, 307, 406, 257, 2572, 29882, 1412, 3497, 1874, 13, 50714], "temperature": 0.0, "avg_logprob": -0.059172497855292425, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.03621140494942665}, {"id": 2526, "seek": 1027400, "start": 10281.0, "end": 10286.0, "text": " This is more of a sketch of what's possible with the tools that I think are useful.", "tokens": [50714, 639, 307, 544, 295, 257, 12325, 295, 437, 311, 1944, 365, 264, 3873, 300, 286, 519, 366, 4420, 13, 50964], "temperature": 0.0, "avg_logprob": -0.059172497855292425, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.03621140494942665}, {"id": 2527, "seek": 1027400, "start": 10286.0, "end": 10289.0, "text": " Don't be taking directly from this lessons on how to do data science.", "tokens": [50964, 1468, 380, 312, 1940, 3838, 490, 341, 8820, 322, 577, 281, 360, 1412, 3497, 13, 51114], "temperature": 0.0, "avg_logprob": -0.059172497855292425, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.03621140494942665}, {"id": 2528, "seek": 1027400, "start": 10289.0, "end": 10292.0, "text": " This is more of a sketch of how the tools should work.", "tokens": [51114, 639, 307, 544, 295, 257, 12325, 295, 577, 264, 3873, 820, 589, 13, 51264], "temperature": 0.0, "avg_logprob": -0.059172497855292425, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.03621140494942665}, {"id": 2529, "seek": 1027400, "start": 10292.0, "end": 10294.0, "text": " Let's make this a little bit bigger so we have more room again.", "tokens": [51264, 961, 311, 652, 341, 257, 707, 857, 3801, 370, 321, 362, 544, 1808, 797, 13, 51364], "temperature": 0.0, "avg_logprob": -0.059172497855292425, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.03621140494942665}, {"id": 2530, "seek": 1027400, "start": 10294.0, "end": 10301.0, "text": " One way to start to evaluate how good this fit is to actually look at this graphics from the stats models.", "tokens": [51364, 1485, 636, 281, 722, 281, 13059, 577, 665, 341, 3318, 307, 281, 767, 574, 412, 341, 11837, 490, 264, 18152, 5245, 13, 51714], "temperature": 0.0, "avg_logprob": -0.059172497855292425, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.03621140494942665}, {"id": 2531, "seek": 1030100, "start": 10301.0, "end": 10305.0, "text": " So statsmodels.graphics has a lot of different plotting options.", "tokens": [50364, 407, 18152, 8014, 1625, 13, 34091, 1167, 575, 257, 688, 295, 819, 41178, 3956, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11478963579450335, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.2016376107931137}, {"id": 2532, "seek": 1030100, "start": 10305.0, "end": 10316.0, "text": " And there's these component and component plus residual plots, which is the CCPR plots, which you feed it the model itself contained within this model object is the underlying formula.", "tokens": [50564, 400, 456, 311, 613, 6542, 293, 6542, 1804, 27980, 28609, 11, 597, 307, 264, 12630, 15958, 28609, 11, 597, 291, 3154, 309, 264, 2316, 2564, 16212, 1951, 341, 2316, 2657, 307, 264, 14217, 8513, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11478963579450335, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.2016376107931137}, {"id": 2533, "seek": 1030100, "start": 10316.0, "end": 10322.0, "text": " And so you can tell it, I want to know this one term here, the term that went with the log of the LSTAT score.", "tokens": [51114, 400, 370, 291, 393, 980, 309, 11, 286, 528, 281, 458, 341, 472, 1433, 510, 11, 264, 1433, 300, 1437, 365, 264, 3565, 295, 264, 441, 6840, 2218, 6175, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11478963579450335, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.2016376107931137}, {"id": 2534, "seek": 1030100, "start": 10322.0, "end": 10327.0, "text": " How does that look versus the residuals of this plus the I squared?", "tokens": [51414, 1012, 775, 300, 574, 5717, 264, 27980, 82, 295, 341, 1804, 264, 286, 8889, 30, 51664], "temperature": 0.0, "avg_logprob": -0.11478963579450335, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.2016376107931137}, {"id": 2535, "seek": 1032700, "start": 10327.0, "end": 10333.0, "text": " So we can see that the component actually does a decent job at this log stat versus residuals plus log stat.", "tokens": [50364, 407, 321, 393, 536, 300, 264, 6542, 767, 775, 257, 8681, 1691, 412, 341, 3565, 2219, 5717, 27980, 82, 1804, 3565, 2219, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07916530892868673, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.09799503535032272}, {"id": 2536, "seek": 1032700, "start": 10333.0, "end": 10337.0, "text": " So this line actually does a pretty good job of fitting this.", "tokens": [50664, 407, 341, 1622, 767, 775, 257, 1238, 665, 1691, 295, 15669, 341, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07916530892868673, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.09799503535032272}, {"id": 2537, "seek": 1032700, "start": 10337.0, "end": 10344.0, "text": " And for some reason that I don't quite understand, it actually plots it twice to the same exact plot, but was just LSTAT by itself.", "tokens": [50864, 400, 337, 512, 1778, 300, 286, 500, 380, 1596, 1223, 11, 309, 767, 28609, 309, 6091, 281, 264, 912, 1900, 7542, 11, 457, 390, 445, 441, 6840, 2218, 538, 2564, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07916530892868673, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.09799503535032272}, {"id": 2538, "seek": 1032700, "start": 10344.0, "end": 10354.0, "text": " So the first term in that model, we can see a little bit wonky behavior where it's not quite as good as the previous one where the residuals has some extra structure here in the low end, especially.", "tokens": [51214, 407, 264, 700, 1433, 294, 300, 2316, 11, 321, 393, 536, 257, 707, 857, 1582, 4133, 5223, 689, 309, 311, 406, 1596, 382, 665, 382, 264, 3894, 472, 689, 264, 27980, 82, 575, 512, 2857, 3877, 510, 294, 264, 2295, 917, 11, 2318, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07916530892868673, "compression_ratio": 1.7578947368421052, "no_speech_prob": 0.09799503535032272}, {"id": 2539, "seek": 1035400, "start": 10354.0, "end": 10361.0, "text": " But we can start to have various goodness of fits and start to model out how good our model is at capturing the underlying data.", "tokens": [50364, 583, 321, 393, 722, 281, 362, 3683, 8387, 295, 9001, 293, 722, 281, 2316, 484, 577, 665, 527, 2316, 307, 412, 23384, 264, 14217, 1412, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06752446118523092, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0952930748462677}, {"id": 2540, "seek": 1035400, "start": 10361.0, "end": 10364.0, "text": " Again, it shows it twice. And again, I don't know why.", "tokens": [50714, 3764, 11, 309, 3110, 309, 6091, 13, 400, 797, 11, 286, 500, 380, 458, 983, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06752446118523092, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0952930748462677}, {"id": 2541, "seek": 1035400, "start": 10364.0, "end": 10367.0, "text": " We can also add more terms to this model.", "tokens": [50864, 492, 393, 611, 909, 544, 2115, 281, 341, 2316, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06752446118523092, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0952930748462677}, {"id": 2542, "seek": 1035400, "start": 10367.0, "end": 10372.0, "text": " So previously we had LSTAT and this the log of LSTAT plus one for the intercept.", "tokens": [51014, 407, 8046, 321, 632, 441, 6840, 2218, 293, 341, 264, 3565, 295, 441, 6840, 2218, 1804, 472, 337, 264, 24700, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06752446118523092, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0952930748462677}, {"id": 2543, "seek": 1035400, "start": 10372.0, "end": 10375.0, "text": " We can also add the RM category.", "tokens": [51264, 492, 393, 611, 909, 264, 23790, 7719, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06752446118523092, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0952930748462677}, {"id": 2544, "seek": 1035400, "start": 10375.0, "end": 10381.0, "text": " We can also add the Boolean value, which is whether it's in the higher low of the RAD variable.", "tokens": [51414, 492, 393, 611, 909, 264, 23351, 28499, 2158, 11, 597, 307, 1968, 309, 311, 294, 264, 2946, 2295, 295, 264, 497, 6112, 7006, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06752446118523092, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0952930748462677}, {"id": 2545, "seek": 1038100, "start": 10381.0, "end": 10393.0, "text": " And because it's a categorical, you can feed it to the model with this C value, and it will properly take into account the fact that what's in this column should be considered a category.", "tokens": [50364, 400, 570, 309, 311, 257, 19250, 804, 11, 291, 393, 3154, 309, 281, 264, 2316, 365, 341, 383, 2158, 11, 293, 309, 486, 6108, 747, 666, 2696, 264, 1186, 300, 437, 311, 294, 341, 7738, 820, 312, 4888, 257, 7719, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07897657260560152, "compression_ratio": 1.7790262172284643, "no_speech_prob": 0.023676719516515732}, {"id": 2546, "seek": 1038100, "start": 10393.0, "end": 10397.0, "text": " And it won't get you in trouble with the dummy variable trap that I had to mention at the last time.", "tokens": [50964, 400, 309, 1582, 380, 483, 291, 294, 5253, 365, 264, 35064, 7006, 11487, 300, 286, 632, 281, 2152, 412, 264, 1036, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07897657260560152, "compression_ratio": 1.7790262172284643, "no_speech_prob": 0.023676719516515732}, {"id": 2547, "seek": 1038100, "start": 10397.0, "end": 10410.0, "text": " So if we look at this, we see a number of things, including the fact that it starts off with the categorical variable radian bool, the categorical value where the default value is false.", "tokens": [51164, 407, 498, 321, 574, 412, 341, 11, 321, 536, 257, 1230, 295, 721, 11, 3009, 264, 1186, 300, 309, 3719, 766, 365, 264, 19250, 804, 7006, 2843, 952, 748, 401, 11, 264, 19250, 804, 2158, 689, 264, 7576, 2158, 307, 7908, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07897657260560152, "compression_ratio": 1.7790262172284643, "no_speech_prob": 0.023676719516515732}, {"id": 2548, "seek": 1041000, "start": 10410.0, "end": 10416.0, "text": " And if it's true, what the change in the coefficient is for that value and the various other values as well.", "tokens": [50364, 400, 498, 309, 311, 2074, 11, 437, 264, 1319, 294, 264, 17619, 307, 337, 300, 2158, 293, 264, 3683, 661, 4190, 382, 731, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08971852882235658, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.031119409948587418}, {"id": 2549, "seek": 1041000, "start": 10416.0, "end": 10422.0, "text": " Another thing to look at, depending on what you prefer to look at the BIC or the AIC or log likelihood F statistics.", "tokens": [50664, 3996, 551, 281, 574, 412, 11, 5413, 322, 437, 291, 4382, 281, 574, 412, 264, 363, 2532, 420, 264, 316, 2532, 420, 3565, 22119, 479, 12523, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08971852882235658, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.031119409948587418}, {"id": 2550, "seek": 1041000, "start": 10422.0, "end": 10433.0, "text": " To compare this to the previous models, this again has lowered the AIC substantially so that in terms of is it a better fit or not, it has some statistical basis for saying that this is a better fit.", "tokens": [50964, 1407, 6794, 341, 281, 264, 3894, 5245, 11, 341, 797, 575, 28466, 264, 316, 2532, 30797, 370, 300, 294, 2115, 295, 307, 309, 257, 1101, 3318, 420, 406, 11, 309, 575, 512, 22820, 5143, 337, 1566, 300, 341, 307, 257, 1101, 3318, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08971852882235658, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.031119409948587418}, {"id": 2551, "seek": 1043300, "start": 10433.0, "end": 10441.0, "text": " We still have to do a lot of work still before we decide this is actually a reasonable fit and all the assumptions behind an ordinarily squares fit are holding true.", "tokens": [50364, 492, 920, 362, 281, 360, 257, 688, 295, 589, 920, 949, 321, 4536, 341, 307, 767, 257, 10585, 3318, 293, 439, 264, 17695, 2261, 364, 25376, 3289, 19368, 3318, 366, 5061, 2074, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06511864662170411, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.23032377660274506}, {"id": 2552, "seek": 1043300, "start": 10441.0, "end": 10448.0, "text": " But just as a first pass, we have a lot of really nice information here.", "tokens": [50764, 583, 445, 382, 257, 700, 1320, 11, 321, 362, 257, 688, 295, 534, 1481, 1589, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06511864662170411, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.23032377660274506}, {"id": 2553, "seek": 1043300, "start": 10448.0, "end": 10458.0, "text": " In this video, I would like to continue from the previous video where we had just run a model to find the intercept and the categorical RAD value.", "tokens": [51114, 682, 341, 960, 11, 286, 576, 411, 281, 2354, 490, 264, 3894, 960, 689, 321, 632, 445, 1190, 257, 2316, 281, 915, 264, 24700, 293, 264, 19250, 804, 497, 6112, 2158, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06511864662170411, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.23032377660274506}, {"id": 2554, "seek": 1045800, "start": 10458.0, "end": 10471.0, "text": " We can also run the same exact model as before deciding that this RAD values that are doing the boolean version of this, we can actually run on the entire column itself and telling stats models that we're actually using a categorical variable here as well.", "tokens": [50364, 492, 393, 611, 1190, 264, 912, 1900, 2316, 382, 949, 17990, 300, 341, 497, 6112, 4190, 300, 366, 884, 264, 748, 4812, 282, 3037, 295, 341, 11, 321, 393, 767, 1190, 322, 264, 2302, 7738, 2564, 293, 3585, 18152, 5245, 300, 321, 434, 767, 1228, 257, 19250, 804, 7006, 510, 382, 731, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08787540907270452, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.2969919443130493}, {"id": 2555, "seek": 1045800, "start": 10471.0, "end": 10480.0, "text": " So now we're trying to predict the median value of the house using all of these possible variables where these each have a coefficient in front of it.", "tokens": [51014, 407, 586, 321, 434, 1382, 281, 6069, 264, 26779, 2158, 295, 264, 1782, 1228, 439, 295, 613, 1944, 9102, 689, 613, 1184, 362, 257, 17619, 294, 1868, 295, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08787540907270452, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.2969919443130493}, {"id": 2556, "seek": 1048000, "start": 10480.0, "end": 10489.0, "text": " We run a dot fit method on that and save it as a model as MOD and we're going to output the summary of that fit ran just then.", "tokens": [50364, 492, 1190, 257, 5893, 3318, 3170, 322, 300, 293, 3155, 309, 382, 257, 2316, 382, 38113, 293, 321, 434, 516, 281, 5598, 264, 12691, 295, 300, 3318, 5872, 445, 550, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1845096614625719, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.7012236714363098}, {"id": 2557, "seek": 1048000, "start": 10489.0, "end": 10493.0, "text": " And again, dependent variable is this MED V variable.", "tokens": [50814, 400, 797, 11, 12334, 7006, 307, 341, 376, 4731, 691, 7006, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1845096614625719, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.7012236714363098}, {"id": 2558, "seek": 1048000, "start": 10493.0, "end": 10499.0, "text": " And we see in the output here various goodness of fit and metrics about how the fit actually worked out.", "tokens": [51014, 400, 321, 536, 294, 264, 5598, 510, 3683, 8387, 295, 3318, 293, 16367, 466, 577, 264, 3318, 767, 2732, 484, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1845096614625719, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.7012236714363098}, {"id": 2559, "seek": 1049900, "start": 10499.0, "end": 10512.0, "text": " We see an R squared of 0.73 and ASC of 3040, which is a slight improvement from the previous one, meaning that encoding the RAD variable where each value is independently stored.", "tokens": [50364, 492, 536, 364, 497, 8889, 295, 1958, 13, 33396, 293, 7469, 34, 295, 2217, 5254, 11, 597, 307, 257, 4036, 10444, 490, 264, 3894, 472, 11, 3620, 300, 43430, 264, 497, 6112, 7006, 689, 1184, 2158, 307, 21761, 12187, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1280529984330709, "compression_ratio": 1.568421052631579, "no_speech_prob": 0.8591042160987854}, {"id": 2560, "seek": 1049900, "start": 10512.0, "end": 10517.0, "text": " So since it's a categorical, this is all with a baseline of one, which is why it doesn't appear here.", "tokens": [51014, 407, 1670, 309, 311, 257, 19250, 804, 11, 341, 307, 439, 365, 257, 20518, 295, 472, 11, 597, 307, 983, 309, 1177, 380, 4204, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1280529984330709, "compression_ratio": 1.568421052631579, "no_speech_prob": 0.8591042160987854}, {"id": 2561, "seek": 1049900, "start": 10517.0, "end": 10524.0, "text": " These coefficients are all based off of comparing each of these terms with the baseline of RAD equals to one.", "tokens": [51264, 1981, 31994, 366, 439, 2361, 766, 295, 15763, 1184, 295, 613, 2115, 365, 264, 20518, 295, 497, 6112, 6915, 281, 472, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1280529984330709, "compression_ratio": 1.568421052631579, "no_speech_prob": 0.8591042160987854}, {"id": 2562, "seek": 1049900, "start": 10524.0, "end": 10526.0, "text": " If that doesn't make sense to you, don't worry about it.", "tokens": [51614, 759, 300, 1177, 380, 652, 2020, 281, 291, 11, 500, 380, 3292, 466, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1280529984330709, "compression_ratio": 1.568421052631579, "no_speech_prob": 0.8591042160987854}, {"id": 2563, "seek": 1052600, "start": 10526.0, "end": 10528.0, "text": " Don't worry about this kind of statistical model.", "tokens": [50364, 1468, 380, 3292, 466, 341, 733, 295, 22820, 2316, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05577835303086501, "compression_ratio": 1.73, "no_speech_prob": 0.14022187888622284}, {"id": 2564, "seek": 1052600, "start": 10528.0, "end": 10531.0, "text": " And if it does make sense to you, then you understand what I just said.", "tokens": [50464, 400, 498, 309, 775, 652, 2020, 281, 291, 11, 550, 291, 1223, 437, 286, 445, 848, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05577835303086501, "compression_ratio": 1.73, "no_speech_prob": 0.14022187888622284}, {"id": 2565, "seek": 1052600, "start": 10531.0, "end": 10538.0, "text": " So anyway, you get the output from this, but we actually want to see some plots to see how good this fit actually is.", "tokens": [50614, 407, 4033, 11, 291, 483, 264, 5598, 490, 341, 11, 457, 321, 767, 528, 281, 536, 512, 28609, 281, 536, 577, 665, 341, 3318, 767, 307, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05577835303086501, "compression_ratio": 1.73, "no_speech_prob": 0.14022187888622284}, {"id": 2566, "seek": 1052600, "start": 10538.0, "end": 10545.0, "text": " Because just looking at the diagnostics and the metrics that come out from these fits isn't enough to tell us whether we're making a good model here.", "tokens": [50964, 1436, 445, 1237, 412, 264, 43215, 1167, 293, 264, 16367, 300, 808, 484, 490, 613, 9001, 1943, 380, 1547, 281, 980, 505, 1968, 321, 434, 1455, 257, 665, 2316, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05577835303086501, "compression_ratio": 1.73, "no_speech_prob": 0.14022187888622284}, {"id": 2567, "seek": 1052600, "start": 10545.0, "end": 10548.0, "text": " So let's start to look at how we can assess fit quality.", "tokens": [51314, 407, 718, 311, 722, 281, 574, 412, 577, 321, 393, 5877, 3318, 3125, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05577835303086501, "compression_ratio": 1.73, "no_speech_prob": 0.14022187888622284}, {"id": 2568, "seek": 1052600, "start": 10548.0, "end": 10551.0, "text": " One of the easy things you can do is to look at a thing called leverage.", "tokens": [51464, 1485, 295, 264, 1858, 721, 291, 393, 360, 307, 281, 574, 412, 257, 551, 1219, 13982, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05577835303086501, "compression_ratio": 1.73, "no_speech_prob": 0.14022187888622284}, {"id": 2569, "seek": 1055100, "start": 10551.0, "end": 10562.0, "text": " StatsModels gives us a nice way to see this and visualize this by using the sm.graphics.influence plot and the plot leverage residual squared plots.", "tokens": [50364, 745, 1720, 44, 378, 1625, 2709, 505, 257, 1481, 636, 281, 536, 341, 293, 23273, 341, 538, 1228, 264, 899, 13, 34091, 1167, 13, 19920, 40432, 7542, 293, 264, 7542, 13982, 27980, 8889, 28609, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09762888538594149, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.09002165496349335}, {"id": 2570, "seek": 1055100, "start": 10562.0, "end": 10564.0, "text": " So let's take a look at these two plots.", "tokens": [50914, 407, 718, 311, 747, 257, 574, 412, 613, 732, 28609, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09762888538594149, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.09002165496349335}, {"id": 2571, "seek": 1055100, "start": 10564.0, "end": 10566.0, "text": " I will first do this one.", "tokens": [51014, 286, 486, 700, 360, 341, 472, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09762888538594149, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.09002165496349335}, {"id": 2572, "seek": 1055100, "start": 10566.0, "end": 10575.0, "text": " So what we see here is on the y-axis, studentized residuals versus the x-axis, the h-leverage is using the cooks method for influence.", "tokens": [51114, 407, 437, 321, 536, 510, 307, 322, 264, 288, 12, 24633, 11, 3107, 1602, 27980, 82, 5717, 264, 2031, 12, 24633, 11, 264, 276, 12, 306, 3623, 307, 1228, 264, 30709, 3170, 337, 6503, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09762888538594149, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.09002165496349335}, {"id": 2573, "seek": 1057500, "start": 10575.0, "end": 10583.0, "text": " What you see on the leverage corresponds to an outside influence on the overall fit for its values.", "tokens": [50364, 708, 291, 536, 322, 264, 13982, 23249, 281, 364, 2380, 6503, 322, 264, 4787, 3318, 337, 1080, 4190, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0510618299500555, "compression_ratio": 1.8814814814814815, "no_speech_prob": 0.281191885471344}, {"id": 2574, "seek": 1057500, "start": 10583.0, "end": 10590.0, "text": " So if you see something with high residuals and high leverage, that's something that we should possibly consider looking at that point and figuring out what's going on at that exact point.", "tokens": [50764, 407, 498, 291, 536, 746, 365, 1090, 27980, 82, 293, 1090, 13982, 11, 300, 311, 746, 300, 321, 820, 6264, 1949, 1237, 412, 300, 935, 293, 15213, 484, 437, 311, 516, 322, 412, 300, 1900, 935, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0510618299500555, "compression_ratio": 1.8814814814814815, "no_speech_prob": 0.281191885471344}, {"id": 2575, "seek": 1057500, "start": 10590.0, "end": 10597.0, "text": " So like 368, for example, would be a candidate to be looking at here because it has high residuals and high leverage.", "tokens": [51114, 407, 411, 8652, 23, 11, 337, 1365, 11, 576, 312, 257, 11532, 281, 312, 1237, 412, 510, 570, 309, 575, 1090, 27980, 82, 293, 1090, 13982, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0510618299500555, "compression_ratio": 1.8814814814814815, "no_speech_prob": 0.281191885471344}, {"id": 2576, "seek": 1057500, "start": 10597.0, "end": 10598.0, "text": " That's one way of looking at it.", "tokens": [51464, 663, 311, 472, 636, 295, 1237, 412, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0510618299500555, "compression_ratio": 1.8814814814814815, "no_speech_prob": 0.281191885471344}, {"id": 2577, "seek": 1057500, "start": 10598.0, "end": 10602.0, "text": " Another way is to look at it through this leverage residual squared.", "tokens": [51514, 3996, 636, 307, 281, 574, 412, 309, 807, 341, 13982, 27980, 8889, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0510618299500555, "compression_ratio": 1.8814814814814815, "no_speech_prob": 0.281191885471344}, {"id": 2578, "seek": 1060200, "start": 10602.0, "end": 10606.0, "text": " And you give it simply the model object that you just fit above.", "tokens": [50364, 400, 291, 976, 309, 2935, 264, 2316, 2657, 300, 291, 445, 3318, 3673, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05639100974460818, "compression_ratio": 1.628787878787879, "no_speech_prob": 0.07802119106054306}, {"id": 2579, "seek": 1060200, "start": 10606.0, "end": 10611.0, "text": " You just give it mod and it will give normalized residuals squared versus the leverage.", "tokens": [50564, 509, 445, 976, 309, 1072, 293, 309, 486, 976, 48704, 27980, 82, 8889, 5717, 264, 13982, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05639100974460818, "compression_ratio": 1.628787878787879, "no_speech_prob": 0.07802119106054306}, {"id": 2580, "seek": 1060200, "start": 10611.0, "end": 10619.0, "text": " Again, 368, 365, 372, 371 are all outliers in terms of points that we should possibly take another look at again.", "tokens": [50814, 3764, 11, 8652, 23, 11, 22046, 11, 13435, 17, 11, 13435, 16, 366, 439, 484, 23646, 294, 2115, 295, 2793, 300, 321, 820, 6264, 747, 1071, 574, 412, 797, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05639100974460818, "compression_ratio": 1.628787878787879, "no_speech_prob": 0.07802119106054306}, {"id": 2581, "seek": 1060200, "start": 10619.0, "end": 10622.0, "text": " That corresponds to those four points up here.", "tokens": [51214, 663, 23249, 281, 729, 1451, 2793, 493, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05639100974460818, "compression_ratio": 1.628787878787879, "no_speech_prob": 0.07802119106054306}, {"id": 2582, "seek": 1060200, "start": 10622.0, "end": 10629.0, "text": " So this leverage plots is one way of assessing the fit and the data points to make sure something isn't going crazy.", "tokens": [51364, 407, 341, 13982, 28609, 307, 472, 636, 295, 34348, 264, 3318, 293, 264, 1412, 2793, 281, 652, 988, 746, 1943, 380, 516, 3219, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05639100974460818, "compression_ratio": 1.628787878787879, "no_speech_prob": 0.07802119106054306}, {"id": 2583, "seek": 1062900, "start": 10629.0, "end": 10635.0, "text": " There's also a way of doing partial regression and I've quoted a bit from the documentation stats models here.", "tokens": [50364, 821, 311, 611, 257, 636, 295, 884, 14641, 24590, 293, 286, 600, 30047, 257, 857, 490, 264, 14333, 18152, 5245, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06429728313728615, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.013218381442129612}, {"id": 2584, "seek": 1062900, "start": 10635.0, "end": 10641.0, "text": " It says the slope of the fitted line is that of the exogenous in the full multiple regressions.", "tokens": [50664, 467, 1619, 264, 13525, 295, 264, 26321, 1622, 307, 300, 295, 264, 454, 45519, 294, 264, 1577, 3866, 1121, 735, 626, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06429728313728615, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.013218381442129612}, {"id": 2585, "seek": 1062900, "start": 10641.0, "end": 10642.0, "text": " That's what's going on here.", "tokens": [50964, 663, 311, 437, 311, 516, 322, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06429728313728615, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.013218381442129612}, {"id": 2586, "seek": 1062900, "start": 10642.0, "end": 10647.0, "text": " The individual points can be used to assess the influence of points on the estimated coefficient.", "tokens": [51014, 440, 2609, 2793, 393, 312, 1143, 281, 5877, 264, 6503, 295, 2793, 322, 264, 14109, 17619, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06429728313728615, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.013218381442129612}, {"id": 2587, "seek": 1062900, "start": 10647.0, "end": 10649.0, "text": " So let's take a look at what this means visually.", "tokens": [51264, 407, 718, 311, 747, 257, 574, 412, 437, 341, 1355, 19622, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06429728313728615, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.013218381442129612}, {"id": 2588, "seek": 1062900, "start": 10649.0, "end": 10652.0, "text": " I think it's easier to see what's happening this way.", "tokens": [51364, 286, 519, 309, 311, 3571, 281, 536, 437, 311, 2737, 341, 636, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06429728313728615, "compression_ratio": 1.6743295019157087, "no_speech_prob": 0.013218381442129612}, {"id": 2589, "seek": 1065200, "start": 10652.0, "end": 10659.0, "text": " So we have a partial regression plot and we're evaluating the expectation value of L-stat given the values that we have", "tokens": [50364, 407, 321, 362, 257, 14641, 24590, 7542, 293, 321, 434, 27479, 264, 14334, 2158, 295, 441, 12, 19435, 2212, 264, 4190, 300, 321, 362, 50714], "temperature": 0.0, "avg_logprob": -0.09636893514859474, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.26880142092704773}, {"id": 2590, "seek": 1065200, "start": 10659.0, "end": 10663.0, "text": " and same plotting against the dependent variable, the median value that we're trying to predict.", "tokens": [50714, 293, 912, 41178, 1970, 264, 12334, 7006, 11, 264, 26779, 2158, 300, 321, 434, 1382, 281, 6069, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09636893514859474, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.26880142092704773}, {"id": 2591, "seek": 1065200, "start": 10663.0, "end": 10672.0, "text": " And in this, we see that a lot of the points are kind of in a mass right here and the outliers are sitting here at this very low end.", "tokens": [50914, 400, 294, 341, 11, 321, 536, 300, 257, 688, 295, 264, 2793, 366, 733, 295, 294, 257, 2758, 558, 510, 293, 264, 484, 23646, 366, 3798, 510, 412, 341, 588, 2295, 917, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09636893514859474, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.26880142092704773}, {"id": 2592, "seek": 1065200, "start": 10672.0, "end": 10675.0, "text": " And the same culprits appear again and you can actually see the effect that it's having on this.", "tokens": [51364, 400, 264, 912, 11021, 1424, 1208, 4204, 797, 293, 291, 393, 767, 536, 264, 1802, 300, 309, 311, 1419, 322, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09636893514859474, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.26880142092704773}, {"id": 2593, "seek": 1065200, "start": 10675.0, "end": 10677.0, "text": " It's pulling the slope up a bit.", "tokens": [51514, 467, 311, 8407, 264, 13525, 493, 257, 857, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09636893514859474, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.26880142092704773}, {"id": 2594, "seek": 1067700, "start": 10677.0, "end": 10683.0, "text": " So that's with a plot partial regression and giving various features as you're holding constant.", "tokens": [50364, 407, 300, 311, 365, 257, 7542, 14641, 24590, 293, 2902, 3683, 4122, 382, 291, 434, 5061, 5754, 13, 50664], "temperature": 0.0, "avg_logprob": -0.104556211491221, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.1275896430015564}, {"id": 2595, "seek": 1067700, "start": 10683.0, "end": 10686.0, "text": " You can give it the entire model and see what that looks like.", "tokens": [50664, 509, 393, 976, 309, 264, 2302, 2316, 293, 536, 437, 300, 1542, 411, 13, 50814], "temperature": 0.0, "avg_logprob": -0.104556211491221, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.1275896430015564}, {"id": 2596, "seek": 1067700, "start": 10686.0, "end": 10692.0, "text": " When we get an entire grid, you're going to have a lot more involved to look at this grid of plots.", "tokens": [50814, 1133, 321, 483, 364, 2302, 10748, 11, 291, 434, 516, 281, 362, 257, 688, 544, 3288, 281, 574, 412, 341, 10748, 295, 28609, 13, 51114], "temperature": 0.0, "avg_logprob": -0.104556211491221, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.1275896430015564}, {"id": 2597, "seek": 1067700, "start": 10692.0, "end": 10701.0, "text": " But it's the various features here so that the RAD variable is a feature three given X versus the median value on the X and the Y axis.", "tokens": [51114, 583, 309, 311, 264, 3683, 4122, 510, 370, 300, 264, 497, 6112, 7006, 307, 257, 4111, 1045, 2212, 1783, 5717, 264, 26779, 2158, 322, 264, 1783, 293, 264, 398, 10298, 13, 51564], "temperature": 0.0, "avg_logprob": -0.104556211491221, "compression_ratio": 1.673728813559322, "no_speech_prob": 0.1275896430015564}, {"id": 2598, "seek": 1070100, "start": 10701.0, "end": 10706.0, "text": " And so you can look at the various categorical variables and how they are being fit with the lines", "tokens": [50364, 400, 370, 291, 393, 574, 412, 264, 3683, 19250, 804, 9102, 293, 577, 436, 366, 885, 3318, 365, 264, 3876, 50614], "temperature": 0.0, "avg_logprob": -0.06802606582641602, "compression_ratio": 1.717741935483871, "no_speech_prob": 0.10961190611124039}, {"id": 2599, "seek": 1070100, "start": 10706.0, "end": 10714.0, "text": " and how they are interacting with the overall fit as well as the values that clearly are more continuous and having a nicer time of it.", "tokens": [50614, 293, 577, 436, 366, 18017, 365, 264, 4787, 3318, 382, 731, 382, 264, 4190, 300, 4448, 366, 544, 10957, 293, 1419, 257, 22842, 565, 295, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06802606582641602, "compression_ratio": 1.717741935483871, "no_speech_prob": 0.10961190611124039}, {"id": 2600, "seek": 1070100, "start": 10714.0, "end": 10719.0, "text": " So there's two ways to do this partial regression plot and both give you different ways of looking at this data.", "tokens": [51014, 407, 456, 311, 732, 2098, 281, 360, 341, 14641, 24590, 7542, 293, 1293, 976, 291, 819, 2098, 295, 1237, 412, 341, 1412, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06802606582641602, "compression_ratio": 1.717741935483871, "no_speech_prob": 0.10961190611124039}, {"id": 2601, "seek": 1070100, "start": 10719.0, "end": 10722.0, "text": " Again, this is plotted twice for reasons unknown.", "tokens": [51264, 3764, 11, 341, 307, 43288, 6091, 337, 4112, 9841, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06802606582641602, "compression_ratio": 1.717741935483871, "no_speech_prob": 0.10961190611124039}, {"id": 2602, "seek": 1070100, "start": 10722.0, "end": 10724.0, "text": " Finally, we have regression.", "tokens": [51414, 6288, 11, 321, 362, 24590, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06802606582641602, "compression_ratio": 1.717741935483871, "no_speech_prob": 0.10961190611124039}, {"id": 2603, "seek": 1072400, "start": 10724.0, "end": 10727.0, "text": " We can do this as a plot regress exogenous.", "tokens": [50364, 492, 393, 360, 341, 382, 257, 7542, 1121, 735, 454, 45519, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12250199913978577, "compression_ratio": 1.587719298245614, "no_speech_prob": 0.3624638020992279}, {"id": 2604, "seek": 1072400, "start": 10727.0, "end": 10734.0, "text": " It gives you this four panel plot of median value versus L-stat and residuals versus L-stat.", "tokens": [50514, 467, 2709, 291, 341, 1451, 4831, 7542, 295, 26779, 2158, 5717, 441, 12, 19435, 293, 27980, 82, 5717, 441, 12, 19435, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12250199913978577, "compression_ratio": 1.587719298245614, "no_speech_prob": 0.3624638020992279}, {"id": 2605, "seek": 1072400, "start": 10734.0, "end": 10736.0, "text": " So this is the data minus the fit itself.", "tokens": [50864, 407, 341, 307, 264, 1412, 3175, 264, 3318, 2564, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12250199913978577, "compression_ratio": 1.587719298245614, "no_speech_prob": 0.3624638020992279}, {"id": 2606, "seek": 1072400, "start": 10736.0, "end": 10744.0, "text": " And what you're hoping to see is noise pretty symmetrically about this axis here, the estimated variables and the CCPR plots.", "tokens": [50964, 400, 437, 291, 434, 7159, 281, 536, 307, 5658, 1238, 14232, 27965, 984, 466, 341, 10298, 510, 11, 264, 14109, 9102, 293, 264, 12630, 15958, 28609, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12250199913978577, "compression_ratio": 1.587719298245614, "no_speech_prob": 0.3624638020992279}, {"id": 2607, "seek": 1072400, "start": 10744.0, "end": 10749.0, "text": " So we see fit versus the actual values in this plot here.", "tokens": [51364, 407, 321, 536, 3318, 5717, 264, 3539, 4190, 294, 341, 7542, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12250199913978577, "compression_ratio": 1.587719298245614, "no_speech_prob": 0.3624638020992279}, {"id": 2608, "seek": 1074900, "start": 10749.0, "end": 10755.0, "text": " And then we can also do it versus any other term in that model, which is, in this case, the natural log of the L-stat.", "tokens": [50364, 400, 550, 321, 393, 611, 360, 309, 5717, 604, 661, 1433, 294, 300, 2316, 11, 597, 307, 11, 294, 341, 1389, 11, 264, 3303, 3565, 295, 264, 441, 12, 19435, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09353464476916255, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13285601139068604}, {"id": 2609, "seek": 1074900, "start": 10755.0, "end": 10761.0, "text": " And then we get this plot here, which shows much tighter fit to this instance.", "tokens": [50664, 400, 550, 321, 483, 341, 7542, 510, 11, 597, 3110, 709, 30443, 3318, 281, 341, 5197, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09353464476916255, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13285601139068604}, {"id": 2610, "seek": 1074900, "start": 10761.0, "end": 10766.0, "text": " If you've built up a model, then again, I'm not saying I've built up some amazing model at this point.", "tokens": [50964, 759, 291, 600, 3094, 493, 257, 2316, 11, 550, 797, 11, 286, 478, 406, 1566, 286, 600, 3094, 493, 512, 2243, 2316, 412, 341, 935, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09353464476916255, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13285601139068604}, {"id": 2611, "seek": 1074900, "start": 10766.0, "end": 10769.0, "text": " This is definitely more descriptive of how this kind of process can work.", "tokens": [51214, 639, 307, 2138, 544, 42585, 295, 577, 341, 733, 295, 1399, 393, 589, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09353464476916255, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13285601139068604}, {"id": 2612, "seek": 1076900, "start": 10769.0, "end": 10779.0, "text": " But if you would like to build up a model and look through a lot of diagnostic plots and have a true statistics, robust package manager behind you,", "tokens": [50364, 583, 498, 291, 576, 411, 281, 1322, 493, 257, 2316, 293, 574, 807, 257, 688, 295, 27897, 28609, 293, 362, 257, 2074, 12523, 11, 13956, 7372, 6598, 2261, 291, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07333078384399414, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.6986475586891174}, {"id": 2613, "seek": 1076900, "start": 10779.0, "end": 10784.0, "text": " look into stats models and really try to dive into this because there's a lot of really good stuff in this.", "tokens": [50864, 574, 666, 18152, 5245, 293, 534, 853, 281, 9192, 666, 341, 570, 456, 311, 257, 688, 295, 534, 665, 1507, 294, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07333078384399414, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.6986475586891174}, {"id": 2614, "seek": 1076900, "start": 10784.0, "end": 10789.0, "text": " So with that, I am concluding the second data science project.", "tokens": [51114, 407, 365, 300, 11, 286, 669, 9312, 278, 264, 1150, 1412, 3497, 1716, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07333078384399414, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.6986475586891174}, {"id": 2615, "seek": 1076900, "start": 10789.0, "end": 10798.0, "text": " And what I really try to focus on this time was a little bit of some more advanced features of using the plotting features of pandas,", "tokens": [51364, 400, 437, 286, 534, 853, 281, 1879, 322, 341, 565, 390, 257, 707, 857, 295, 512, 544, 7339, 4122, 295, 1228, 264, 41178, 4122, 295, 4565, 296, 11, 51814], "temperature": 0.0, "avg_logprob": -0.07333078384399414, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.6986475586891174}, {"id": 2616, "seek": 1079800, "start": 10798.0, "end": 10804.0, "text": " really taking a deep dive into how one aspect of the stats models library and there's many aspects of it.", "tokens": [50364, 534, 1940, 257, 2452, 9192, 666, 577, 472, 4171, 295, 264, 18152, 5245, 6405, 293, 456, 311, 867, 7270, 295, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07580697770212211, "compression_ratio": 1.743083003952569, "no_speech_prob": 0.03112414851784706}, {"id": 2617, "seek": 1079800, "start": 10804.0, "end": 10812.0, "text": " So I highlighted the ordinarily squares and how fitting linear model there with the statistical analysis and output that comes out of every fit,", "tokens": [50664, 407, 286, 17173, 264, 25376, 3289, 19368, 293, 577, 15669, 8213, 2316, 456, 365, 264, 22820, 5215, 293, 5598, 300, 1487, 484, 295, 633, 3318, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07580697770212211, "compression_ratio": 1.743083003952569, "no_speech_prob": 0.03112414851784706}, {"id": 2618, "seek": 1079800, "start": 10812.0, "end": 10816.0, "text": " as well as fitting the diagnostics and doing a quality of fit.", "tokens": [51064, 382, 731, 382, 15669, 264, 43215, 1167, 293, 884, 257, 3125, 295, 3318, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07580697770212211, "compression_ratio": 1.743083003952569, "no_speech_prob": 0.03112414851784706}, {"id": 2619, "seek": 1079800, "start": 10816.0, "end": 10824.0, "text": " I also spent a lot of time on the visuals of this diving a little bit deeper into Seaborn and a few of the other options there.", "tokens": [51264, 286, 611, 4418, 257, 688, 295, 565, 322, 264, 26035, 295, 341, 20241, 257, 707, 857, 7731, 666, 1100, 455, 1865, 293, 257, 1326, 295, 264, 661, 3956, 456, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07580697770212211, "compression_ratio": 1.743083003952569, "no_speech_prob": 0.03112414851784706}, {"id": 2620, "seek": 1082400, "start": 10824.0, "end": 10831.0, "text": " So just as a kind of a wrap up of this, using map plot live and Seaborn stats models and pandas,", "tokens": [50364, 407, 445, 382, 257, 733, 295, 257, 7019, 493, 295, 341, 11, 1228, 4471, 7542, 1621, 293, 1100, 455, 1865, 18152, 5245, 293, 4565, 296, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09844157380877801, "compression_ratio": 1.7042801556420233, "no_speech_prob": 0.019709903746843338}, {"id": 2621, "seek": 1082400, "start": 10831.0, "end": 10835.0, "text": " these data sets can be explored and manipulated and fit.", "tokens": [50714, 613, 1412, 6352, 393, 312, 24016, 293, 37161, 293, 3318, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09844157380877801, "compression_ratio": 1.7042801556420233, "no_speech_prob": 0.019709903746843338}, {"id": 2622, "seek": 1082400, "start": 10835.0, "end": 10844.0, "text": " And these tools give a lot of flexibility and exploring and analyzing data in a notebook lets someone else take a look at what you did through your analysis.", "tokens": [50914, 400, 613, 3873, 976, 257, 688, 295, 12635, 293, 12736, 293, 23663, 1412, 294, 257, 21060, 6653, 1580, 1646, 747, 257, 574, 412, 437, 291, 630, 807, 428, 5215, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09844157380877801, "compression_ratio": 1.7042801556420233, "no_speech_prob": 0.019709903746843338}, {"id": 2623, "seek": 1082400, "start": 10844.0, "end": 10851.0, "text": " So if you've made some horrendous error as you went through, that is something that's easy to point out and point to the plot.", "tokens": [51364, 407, 498, 291, 600, 1027, 512, 49520, 563, 6713, 382, 291, 1437, 807, 11, 300, 307, 746, 300, 311, 1858, 281, 935, 484, 293, 935, 281, 264, 7542, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09844157380877801, "compression_ratio": 1.7042801556420233, "no_speech_prob": 0.019709903746843338}, {"id": 2624, "seek": 1085100, "start": 10851.0, "end": 10857.0, "text": " As I said, this was a decent fit, for example. This is clearly bad because of reason X and you can point to it and circle it.", "tokens": [50364, 1018, 286, 848, 11, 341, 390, 257, 8681, 3318, 11, 337, 1365, 13, 639, 307, 4448, 1578, 570, 295, 1778, 1783, 293, 291, 393, 935, 281, 309, 293, 6329, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12227151851461392, "compression_ratio": 1.604, "no_speech_prob": 0.43324682116508484}, {"id": 2625, "seek": 1085100, "start": 10857.0, "end": 10862.0, "text": " And it's not just a bunch of random files sitting in a directory somewhere.", "tokens": [50664, 400, 309, 311, 406, 445, 257, 3840, 295, 4974, 7098, 3798, 294, 257, 21120, 4079, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12227151851461392, "compression_ratio": 1.604, "no_speech_prob": 0.43324682116508484}, {"id": 2626, "seek": 1085100, "start": 10862.0, "end": 10873.0, "text": " To close off this project, the last thing that remains to do is to save this and to close it and push it back to GitHub so that you guys can also look at the same data sets and follow along yourself.", "tokens": [50914, 1407, 1998, 766, 341, 1716, 11, 264, 1036, 551, 300, 7023, 281, 360, 307, 281, 3155, 341, 293, 281, 1998, 309, 293, 2944, 309, 646, 281, 23331, 370, 300, 291, 1074, 393, 611, 574, 412, 264, 912, 1412, 6352, 293, 1524, 2051, 1803, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12227151851461392, "compression_ratio": 1.604, "no_speech_prob": 0.43324682116508484}, {"id": 2627, "seek": 1087300, "start": 10873.0, "end": 10878.0, "text": " So I'm going to file, close and halt, go back to the terminal.", "tokens": [50364, 407, 286, 478, 516, 281, 3991, 11, 1998, 293, 12479, 11, 352, 646, 281, 264, 14709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1858518340370872, "compression_ratio": 1.4792626728110598, "no_speech_prob": 0.47580569982528687}, {"id": 2628, "seek": 1087300, "start": 10878.0, "end": 10882.0, "text": " Git status has only this develop directory that has any changes in it.", "tokens": [50614, 16939, 6558, 575, 787, 341, 1499, 21120, 300, 575, 604, 2962, 294, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1858518340370872, "compression_ratio": 1.4792626728110598, "no_speech_prob": 0.47580569982528687}, {"id": 2629, "seek": 1087300, "start": 10882.0, "end": 10887.0, "text": " So git add, develop, git status, we have three new files.", "tokens": [50814, 407, 18331, 909, 11, 1499, 11, 18331, 6558, 11, 321, 362, 1045, 777, 7098, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1858518340370872, "compression_ratio": 1.4792626728110598, "no_speech_prob": 0.47580569982528687}, {"id": 2630, "seek": 1087300, "start": 10887.0, "end": 10891.0, "text": " Okay. And I've closed down all of them. Just double check the server here.", "tokens": [51064, 1033, 13, 400, 286, 600, 5395, 760, 439, 295, 552, 13, 1449, 3834, 1520, 264, 7154, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1858518340370872, "compression_ratio": 1.4792626728110598, "no_speech_prob": 0.47580569982528687}, {"id": 2631, "seek": 1087300, "start": 10891.0, "end": 10898.0, "text": " Yep. Everything looks to be closed and say git commit.", "tokens": [51264, 7010, 13, 5471, 1542, 281, 312, 5395, 293, 584, 18331, 5599, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1858518340370872, "compression_ratio": 1.4792626728110598, "no_speech_prob": 0.47580569982528687}, {"id": 2632, "seek": 1089800, "start": 10898.0, "end": 10900.0, "text": " Give a commit message that makes sense.", "tokens": [50364, 5303, 257, 5599, 3636, 300, 1669, 2020, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12754328467629172, "compression_ratio": 1.7126436781609196, "no_speech_prob": 0.14018096029758453}, {"id": 2633, "seek": 1089800, "start": 10900.0, "end": 10905.0, "text": " Git push origin Jonathan viz, which is the name of this branch.", "tokens": [50464, 16939, 2944, 4957, 15471, 371, 590, 11, 597, 307, 264, 1315, 295, 341, 9819, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12754328467629172, "compression_ratio": 1.7126436781609196, "no_speech_prob": 0.14018096029758453}, {"id": 2634, "seek": 1089800, "start": 10905.0, "end": 10914.0, "text": " Go back to GitHub, see that we've already made a change this we can compare and pull request and create a pull request.", "tokens": [50714, 1037, 646, 281, 23331, 11, 536, 300, 321, 600, 1217, 1027, 257, 1319, 341, 321, 393, 6794, 293, 2235, 5308, 293, 1884, 257, 2235, 5308, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12754328467629172, "compression_ratio": 1.7126436781609196, "no_speech_prob": 0.14018096029758453}, {"id": 2635, "seek": 1089800, "start": 10914.0, "end": 10922.0, "text": " I'll go ahead and actually merge this pull request because I've demonstrated how to do the full pull request and peer review aspect of it before.", "tokens": [51164, 286, 603, 352, 2286, 293, 767, 22183, 341, 2235, 5308, 570, 286, 600, 18772, 577, 281, 360, 264, 1577, 2235, 5308, 293, 15108, 3131, 4171, 295, 309, 949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12754328467629172, "compression_ratio": 1.7126436781609196, "no_speech_prob": 0.14018096029758453}, {"id": 2636, "seek": 1089800, "start": 10922.0, "end": 10927.0, "text": " And going back to the data viz project, what we have here is don't save that.", "tokens": [51564, 400, 516, 646, 281, 264, 1412, 371, 590, 1716, 11, 437, 321, 362, 510, 307, 500, 380, 3155, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12754328467629172, "compression_ratio": 1.7126436781609196, "no_speech_prob": 0.14018096029758453}, {"id": 2637, "seek": 1092700, "start": 10927.0, "end": 10935.0, "text": " So the data viz project to will have the notebooks that I went through during this project available right there.", "tokens": [50364, 407, 264, 1412, 371, 590, 1716, 281, 486, 362, 264, 43782, 300, 286, 1437, 807, 1830, 341, 1716, 2435, 558, 456, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08867360338752653, "compression_ratio": 1.65625, "no_speech_prob": 0.006287597119808197}, {"id": 2638, "seek": 1092700, "start": 10935.0, "end": 10947.0, "text": " Just to recap what happened in this video, finished up looking at the plots from stats models and finished up the second data science project for this course.", "tokens": [50764, 1449, 281, 20928, 437, 2011, 294, 341, 960, 11, 4335, 493, 1237, 412, 264, 28609, 490, 18152, 5245, 293, 4335, 493, 264, 1150, 1412, 3497, 1716, 337, 341, 1164, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08867360338752653, "compression_ratio": 1.65625, "no_speech_prob": 0.006287597119808197}, {"id": 2639, "seek": 1092700, "start": 10947.0, "end": 10953.0, "text": " Let's talk about some of the security issues with using the Jupiter notebook as is out of the box.", "tokens": [51364, 961, 311, 751, 466, 512, 295, 264, 3825, 2663, 365, 1228, 264, 24567, 21060, 382, 307, 484, 295, 264, 2424, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08867360338752653, "compression_ratio": 1.65625, "no_speech_prob": 0.006287597119808197}, {"id": 2640, "seek": 1095300, "start": 10953.0, "end": 10956.0, "text": " The notebook only listens to requests on local host.", "tokens": [50364, 440, 21060, 787, 35959, 281, 12475, 322, 2654, 3975, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0723663992800955, "compression_ratio": 1.9035714285714285, "no_speech_prob": 0.5343759059906006}, {"id": 2641, "seek": 1095300, "start": 10956.0, "end": 10959.0, "text": " This means that it ignores requests from the Internet.", "tokens": [50514, 639, 1355, 300, 309, 5335, 2706, 12475, 490, 264, 7703, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0723663992800955, "compression_ratio": 1.9035714285714285, "no_speech_prob": 0.5343759059906006}, {"id": 2642, "seek": 1095300, "start": 10959.0, "end": 10964.0, "text": " People connecting from the Internet can't see your server and they won't be able to connect.", "tokens": [50664, 3432, 11015, 490, 264, 7703, 393, 380, 536, 428, 7154, 293, 436, 1582, 380, 312, 1075, 281, 1745, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0723663992800955, "compression_ratio": 1.9035714285714285, "no_speech_prob": 0.5343759059906006}, {"id": 2643, "seek": 1095300, "start": 10964.0, "end": 10970.0, "text": " In order to allow them to connect, you have to explicitly configure the notebook to listen to the correct IP.", "tokens": [50914, 682, 1668, 281, 2089, 552, 281, 1745, 11, 291, 362, 281, 20803, 22162, 264, 21060, 281, 2140, 281, 264, 3006, 8671, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0723663992800955, "compression_ratio": 1.9035714285714285, "no_speech_prob": 0.5343759059906006}, {"id": 2644, "seek": 1095300, "start": 10970.0, "end": 10973.0, "text": " Once you do, anybody can access your notebook server.", "tokens": [51214, 3443, 291, 360, 11, 4472, 393, 2105, 428, 21060, 7154, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0723663992800955, "compression_ratio": 1.9035714285714285, "no_speech_prob": 0.5343759059906006}, {"id": 2645, "seek": 1095300, "start": 10973.0, "end": 10982.0, "text": " The notebook server has no password by default and permissions of the users that are connecting are the same as the permissions of the user who had launched the server.", "tokens": [51364, 440, 21060, 7154, 575, 572, 11524, 538, 7576, 293, 32723, 295, 264, 5022, 300, 366, 11015, 366, 264, 912, 382, 264, 32723, 295, 264, 4195, 567, 632, 8730, 264, 7154, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0723663992800955, "compression_ratio": 1.9035714285714285, "no_speech_prob": 0.5343759059906006}, {"id": 2646, "seek": 1098200, "start": 10982.0, "end": 10989.0, "text": " So this means if you launch the server, everybody who connects to the notebook will be executing things as if they were you.", "tokens": [50364, 407, 341, 1355, 498, 291, 4025, 264, 7154, 11, 2201, 567, 16967, 281, 264, 21060, 486, 312, 32368, 721, 382, 498, 436, 645, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05285096790479577, "compression_ratio": 1.83203125, "no_speech_prob": 0.008575070649385452}, {"id": 2647, "seek": 1098200, "start": 10989.0, "end": 10993.0, "text": " The second main problem with using the notebook is it's using an insecure line.", "tokens": [50714, 440, 1150, 2135, 1154, 365, 1228, 264, 21060, 307, 309, 311, 1228, 364, 32215, 1622, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05285096790479577, "compression_ratio": 1.83203125, "no_speech_prob": 0.008575070649385452}, {"id": 2648, "seek": 1098200, "start": 10993.0, "end": 10999.0, "text": " So typically, the notebook is broken into three pieces, the kernel, the web server, and the client.", "tokens": [50914, 407, 5850, 11, 264, 21060, 307, 5463, 666, 1045, 3755, 11, 264, 28256, 11, 264, 3670, 7154, 11, 293, 264, 6423, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05285096790479577, "compression_ratio": 1.83203125, "no_speech_prob": 0.008575070649385452}, {"id": 2649, "seek": 1098200, "start": 10999.0, "end": 11002.0, "text": " The client is what you see in the web browser.", "tokens": [51214, 440, 6423, 307, 437, 291, 536, 294, 264, 3670, 11185, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05285096790479577, "compression_ratio": 1.83203125, "no_speech_prob": 0.008575070649385452}, {"id": 2650, "seek": 1098200, "start": 11002.0, "end": 11004.0, "text": " It's the notebook as you know it.", "tokens": [51364, 467, 311, 264, 21060, 382, 291, 458, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05285096790479577, "compression_ratio": 1.83203125, "no_speech_prob": 0.008575070649385452}, {"id": 2651, "seek": 1098200, "start": 11004.0, "end": 11009.0, "text": " And the web server is the thing that relays messages from the kernel to the client.", "tokens": [51464, 400, 264, 3670, 7154, 307, 264, 551, 300, 1039, 3772, 7897, 490, 264, 28256, 281, 264, 6423, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05285096790479577, "compression_ratio": 1.83203125, "no_speech_prob": 0.008575070649385452}, {"id": 2652, "seek": 1100900, "start": 11009.0, "end": 11012.0, "text": " The web server communicates with the kernel using ZMQ.", "tokens": [50364, 440, 3670, 7154, 3363, 1024, 365, 264, 28256, 1228, 1176, 44, 48, 13, 50514], "temperature": 0.0, "avg_logprob": -0.04295977091385146, "compression_ratio": 2.0121951219512195, "no_speech_prob": 0.03512037545442581}, {"id": 2653, "seek": 1100900, "start": 11012.0, "end": 11015.0, "text": " Usually, the kernel and the web server exist on the same machine.", "tokens": [50514, 11419, 11, 264, 28256, 293, 264, 3670, 7154, 2514, 322, 264, 912, 3479, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04295977091385146, "compression_ratio": 2.0121951219512195, "no_speech_prob": 0.03512037545442581}, {"id": 2654, "seek": 1100900, "start": 11015.0, "end": 11020.0, "text": " The kernel is the server that executes code and runs requests.", "tokens": [50664, 440, 28256, 307, 264, 7154, 300, 4454, 1819, 3089, 293, 6676, 12475, 13, 50914], "temperature": 0.0, "avg_logprob": -0.04295977091385146, "compression_ratio": 2.0121951219512195, "no_speech_prob": 0.03512037545442581}, {"id": 2655, "seek": 1100900, "start": 11020.0, "end": 11025.0, "text": " The line between the kernel and the web server you don't have to worry about usually because it's on the same machine.", "tokens": [50914, 440, 1622, 1296, 264, 28256, 293, 264, 3670, 7154, 291, 500, 380, 362, 281, 3292, 466, 2673, 570, 309, 311, 322, 264, 912, 3479, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04295977091385146, "compression_ratio": 2.0121951219512195, "no_speech_prob": 0.03512037545442581}, {"id": 2656, "seek": 1100900, "start": 11025.0, "end": 11031.0, "text": " However, the line between the web server and the client you have to worry about because it's over the open Internet.", "tokens": [51164, 2908, 11, 264, 1622, 1296, 264, 3670, 7154, 293, 264, 6423, 291, 362, 281, 3292, 466, 570, 309, 311, 670, 264, 1269, 7703, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04295977091385146, "compression_ratio": 2.0121951219512195, "no_speech_prob": 0.03512037545442581}, {"id": 2657, "seek": 1100900, "start": 11031.0, "end": 11037.0, "text": " This means that it's available for people to listen to and inject messages.", "tokens": [51464, 639, 1355, 300, 309, 311, 2435, 337, 561, 281, 2140, 281, 293, 10711, 7897, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04295977091385146, "compression_ratio": 2.0121951219512195, "no_speech_prob": 0.03512037545442581}, {"id": 2658, "seek": 1103700, "start": 11037.0, "end": 11043.0, "text": " However, there are some setups where it makes sense to separate the kernel onto its own machine.", "tokens": [50364, 2908, 11, 456, 366, 512, 46832, 689, 309, 1669, 2020, 281, 4994, 264, 28256, 3911, 1080, 1065, 3479, 13, 50664], "temperature": 0.0, "avg_logprob": -0.049232270982530385, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.0015009961789473891}, {"id": 2659, "seek": 1103700, "start": 11043.0, "end": 11049.0, "text": " For example, you may have a cluster of computers running kernels, one computer running the web server.", "tokens": [50664, 1171, 1365, 11, 291, 815, 362, 257, 13630, 295, 10807, 2614, 23434, 1625, 11, 472, 3820, 2614, 264, 3670, 7154, 13, 50964], "temperature": 0.0, "avg_logprob": -0.049232270982530385, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.0015009961789473891}, {"id": 2660, "seek": 1103700, "start": 11049.0, "end": 11055.0, "text": " In this case, you also have to worry about the ZMQ communication between the kernel and the web server", "tokens": [50964, 682, 341, 1389, 11, 291, 611, 362, 281, 3292, 466, 264, 1176, 44, 48, 6101, 1296, 264, 28256, 293, 264, 3670, 7154, 51264], "temperature": 0.0, "avg_logprob": -0.049232270982530385, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.0015009961789473891}, {"id": 2661, "seek": 1103700, "start": 11055.0, "end": 11060.0, "text": " if the kernel and the web server are not on a VPN or in a secured network.", "tokens": [51264, 498, 264, 28256, 293, 264, 3670, 7154, 366, 406, 322, 257, 24512, 420, 294, 257, 22905, 3209, 13, 51514], "temperature": 0.0, "avg_logprob": -0.049232270982530385, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.0015009961789473891}, {"id": 2662, "seek": 1106000, "start": 11060.0, "end": 11067.0, "text": " I'd just like to note, we aren't security experts, but we do have experts in the community and they do help us.", "tokens": [50364, 286, 1116, 445, 411, 281, 3637, 11, 321, 3212, 380, 3825, 8572, 11, 457, 321, 360, 362, 8572, 294, 264, 1768, 293, 436, 360, 854, 505, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08753883427587049, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.11264048516750336}, {"id": 2663, "seek": 1106000, "start": 11067.0, "end": 11072.0, "text": " If you spot a problem, I ask you, please email us at our security mailing list.", "tokens": [50714, 759, 291, 4008, 257, 1154, 11, 286, 1029, 291, 11, 1767, 3796, 505, 412, 527, 3825, 41612, 1329, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08753883427587049, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.11264048516750336}, {"id": 2664, "seek": 1106000, "start": 11072.0, "end": 11075.0, "text": " The address is security at ipython.org.", "tokens": [50964, 440, 2985, 307, 3825, 412, 28501, 88, 11943, 13, 4646, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08753883427587049, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.11264048516750336}, {"id": 2665, "seek": 1106000, "start": 11075.0, "end": 11078.0, "text": " Once you do, we'll work quickly to open a CVE.", "tokens": [51114, 3443, 291, 360, 11, 321, 603, 589, 2661, 281, 1269, 257, 383, 7540, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08753883427587049, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.11264048516750336}, {"id": 2666, "seek": 1106000, "start": 11078.0, "end": 11089.0, "text": " In the next set of slides, I'll talk about how you can mitigate some of these problems and rest assured that your notebook deployment is as secure as can be.", "tokens": [51264, 682, 264, 958, 992, 295, 9788, 11, 286, 603, 751, 466, 577, 291, 393, 27336, 512, 295, 613, 2740, 293, 1472, 23426, 300, 428, 21060, 19317, 307, 382, 7144, 382, 393, 312, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08753883427587049, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.11264048516750336}, {"id": 2667, "seek": 1108900, "start": 11089.0, "end": 11094.0, "text": " In the last video, we talked about some of the limitations of running the notebook server publicly.", "tokens": [50364, 682, 264, 1036, 960, 11, 321, 2825, 466, 512, 295, 264, 15705, 295, 2614, 264, 21060, 7154, 14843, 13, 50614], "temperature": 0.0, "avg_logprob": -0.025516370509533173, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.010323300026357174}, {"id": 2668, "seek": 1108900, "start": 11094.0, "end": 11098.0, "text": " Specifically, we talked about security vulnerabilities.", "tokens": [50614, 26058, 11, 321, 2825, 466, 3825, 37633, 13, 50814], "temperature": 0.0, "avg_logprob": -0.025516370509533173, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.010323300026357174}, {"id": 2669, "seek": 1108900, "start": 11098.0, "end": 11105.0, "text": " In this video, I'll describe to you some of the solutions provided by the notebook software and some of the limitations of the notebook software.", "tokens": [50814, 682, 341, 960, 11, 286, 603, 6786, 281, 291, 512, 295, 264, 6547, 5649, 538, 264, 21060, 4722, 293, 512, 295, 264, 15705, 295, 264, 21060, 4722, 13, 51164], "temperature": 0.0, "avg_logprob": -0.025516370509533173, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.010323300026357174}, {"id": 2670, "seek": 1108900, "start": 11105.0, "end": 11113.0, "text": " First, in the last video, I showed you this diagram and told you that the communication between the web server and client was insecure by default.", "tokens": [51164, 2386, 11, 294, 264, 1036, 960, 11, 286, 4712, 291, 341, 10686, 293, 1907, 291, 300, 264, 6101, 1296, 264, 3670, 7154, 293, 6423, 390, 32215, 538, 7576, 13, 51564], "temperature": 0.0, "avg_logprob": -0.025516370509533173, "compression_ratio": 1.9478260869565218, "no_speech_prob": 0.010323300026357174}, {"id": 2671, "seek": 1111300, "start": 11113.0, "end": 11120.0, "text": " The notebook actually provides support for HTTPS, industry grade encryption, for this communication line.", "tokens": [50364, 440, 21060, 767, 6417, 1406, 337, 11751, 51, 6273, 11, 3518, 7204, 29575, 11, 337, 341, 6101, 1622, 13, 50714], "temperature": 0.0, "avg_logprob": -0.049098517583764115, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.2656599283218384}, {"id": 2672, "seek": 1111300, "start": 11120.0, "end": 11122.0, "text": " I'll show you how to configure this.", "tokens": [50714, 286, 603, 855, 291, 577, 281, 22162, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.049098517583764115, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.2656599283218384}, {"id": 2673, "seek": 1111300, "start": 11122.0, "end": 11128.0, "text": " However, the notebook does not provide support out of the box for encrypting the line between the kernel and the web server.", "tokens": [50814, 2908, 11, 264, 21060, 775, 406, 2893, 1406, 484, 295, 264, 2424, 337, 17972, 662, 278, 264, 1622, 1296, 264, 28256, 293, 264, 3670, 7154, 13, 51114], "temperature": 0.0, "avg_logprob": -0.049098517583764115, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.2656599283218384}, {"id": 2674, "seek": 1111300, "start": 11128.0, "end": 11137.0, "text": " Therefore, I recommend you either run the kernel and the web server on the same machine, if possible, or run them within a VPN.", "tokens": [51114, 7504, 11, 286, 2748, 291, 2139, 1190, 264, 28256, 293, 264, 3670, 7154, 322, 264, 912, 3479, 11, 498, 1944, 11, 420, 1190, 552, 1951, 257, 24512, 13, 51564], "temperature": 0.0, "avg_logprob": -0.049098517583764115, "compression_ratio": 1.7025862068965518, "no_speech_prob": 0.2656599283218384}, {"id": 2675, "seek": 1113700, "start": 11137.0, "end": 11140.0, "text": " The latest version of ZMQ does support encryption.", "tokens": [50364, 440, 6792, 3037, 295, 1176, 44, 48, 775, 1406, 29575, 13, 50514], "temperature": 0.0, "avg_logprob": -0.081663701845252, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.06949296593666077}, {"id": 2676, "seek": 1113700, "start": 11140.0, "end": 11144.0, "text": " However, the notebook is not using that version of ZMQ currently.", "tokens": [50514, 2908, 11, 264, 21060, 307, 406, 1228, 300, 3037, 295, 1176, 44, 48, 4362, 13, 50714], "temperature": 0.0, "avg_logprob": -0.081663701845252, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.06949296593666077}, {"id": 2677, "seek": 1113700, "start": 11144.0, "end": 11150.0, "text": " Before we secure the notebook server, we need to be able to launch it so that people on the internet can connect to it.", "tokens": [50714, 4546, 321, 7144, 264, 21060, 7154, 11, 321, 643, 281, 312, 1075, 281, 4025, 309, 370, 300, 561, 322, 264, 4705, 393, 1745, 281, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.081663701845252, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.06949296593666077}, {"id": 2678, "seek": 1113700, "start": 11150.0, "end": 11153.0, "text": " In the previous chapter, you learned about Tralits.", "tokens": [51014, 682, 264, 3894, 7187, 11, 291, 3264, 466, 1765, 304, 1208, 13, 51164], "temperature": 0.0, "avg_logprob": -0.081663701845252, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.06949296593666077}, {"id": 2679, "seek": 1113700, "start": 11153.0, "end": 11158.0, "text": " We can configure the notebook to listen to all IP addresses using Tralits.", "tokens": [51164, 492, 393, 22162, 264, 21060, 281, 2140, 281, 439, 8671, 16862, 1228, 1765, 304, 1208, 13, 51414], "temperature": 0.0, "avg_logprob": -0.081663701845252, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.06949296593666077}, {"id": 2680, "seek": 1115800, "start": 11158.0, "end": 11167.0, "text": " If I do jupiter, notebook, double dash help, I can list all the configuration options of the notebook.", "tokens": [50364, 759, 286, 360, 361, 1010, 1681, 11, 21060, 11, 3834, 8240, 854, 11, 286, 393, 1329, 439, 264, 11694, 3956, 295, 264, 21060, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10448022418551975, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.3004363477230072}, {"id": 2681, "seek": 1115800, "start": 11167.0, "end": 11172.0, "text": " The third to last configuration option is double dash IP.", "tokens": [50814, 440, 2636, 281, 1036, 11694, 3614, 307, 3834, 8240, 8671, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10448022418551975, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.3004363477230072}, {"id": 2682, "seek": 1115800, "start": 11172.0, "end": 11176.0, "text": " That allows me to change the IP that the notebook server is listening on.", "tokens": [51064, 663, 4045, 385, 281, 1319, 264, 8671, 300, 264, 21060, 7154, 307, 4764, 322, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10448022418551975, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.3004363477230072}, {"id": 2683, "seek": 1115800, "start": 11176.0, "end": 11182.0, "text": " Just to cement the idea that this is a Tralit, I'll show you in the notebook source where this Tralit can be found.", "tokens": [51264, 1449, 281, 19729, 264, 1558, 300, 341, 307, 257, 1765, 304, 270, 11, 286, 603, 855, 291, 294, 264, 21060, 4009, 689, 341, 1765, 304, 270, 393, 312, 1352, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10448022418551975, "compression_ratio": 1.7241379310344827, "no_speech_prob": 0.3004363477230072}, {"id": 2684, "seek": 1118200, "start": 11182.0, "end": 11188.0, "text": " In parentheses next to the configuration value, you see that notebook app.ip is listed.", "tokens": [50364, 682, 34153, 958, 281, 264, 11694, 2158, 11, 291, 536, 300, 21060, 724, 13, 647, 307, 10052, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09556964009078507, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.10662657022476196}, {"id": 2685, "seek": 1118200, "start": 11188.0, "end": 11193.0, "text": " This means that IP is a Tralit inside the notebook app class.", "tokens": [50664, 639, 1355, 300, 8671, 307, 257, 1765, 304, 270, 1854, 264, 21060, 724, 1508, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09556964009078507, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.10662657022476196}, {"id": 2686, "seek": 1118200, "start": 11193.0, "end": 11203.0, "text": " So opening up the notebook subfolder of the notebook repository and then the notebook app module inside that, we should be able to find the IP trait.", "tokens": [50914, 407, 5193, 493, 264, 21060, 1422, 18353, 260, 295, 264, 21060, 25841, 293, 550, 264, 21060, 724, 10088, 1854, 300, 11, 321, 820, 312, 1075, 281, 915, 264, 8671, 22538, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09556964009078507, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.10662657022476196}, {"id": 2687, "seek": 1118200, "start": 11203.0, "end": 11206.0, "text": " I'll use the search function of Adam to find IP.", "tokens": [51414, 286, 603, 764, 264, 3164, 2445, 295, 7938, 281, 915, 8671, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09556964009078507, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.10662657022476196}, {"id": 2688, "seek": 1118200, "start": 11206.0, "end": 11209.0, "text": " Here's the definition of the IP trait.", "tokens": [51564, 1692, 311, 264, 7123, 295, 264, 8671, 22538, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09556964009078507, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.10662657022476196}, {"id": 2689, "seek": 1120900, "start": 11209.0, "end": 11214.0, "text": " If you want to configure something of the application and you don't see the option in the help string,", "tokens": [50364, 759, 291, 528, 281, 22162, 746, 295, 264, 3861, 293, 291, 500, 380, 536, 264, 3614, 294, 264, 854, 6798, 11, 50614], "temperature": 0.0, "avg_logprob": -0.059889702796936034, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.008843455463647842}, {"id": 2690, "seek": 1120900, "start": 11214.0, "end": 11220.0, "text": " it's a good skill to be able to look through the source code and see if there's a Tralit that isn't being listed.", "tokens": [50614, 309, 311, 257, 665, 5389, 281, 312, 1075, 281, 574, 807, 264, 4009, 3089, 293, 536, 498, 456, 311, 257, 1765, 304, 270, 300, 1943, 380, 885, 10052, 13, 50914], "temperature": 0.0, "avg_logprob": -0.059889702796936034, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.008843455463647842}, {"id": 2691, "seek": 1120900, "start": 11220.0, "end": 11223.0, "text": " So we have two ways to set this IP trait.", "tokens": [50914, 407, 321, 362, 732, 2098, 281, 992, 341, 8671, 22538, 13, 51064], "temperature": 0.0, "avg_logprob": -0.059889702796936034, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.008843455463647842}, {"id": 2692, "seek": 1120900, "start": 11223.0, "end": 11232.0, "text": " We can either pass it in at the command line, like so, or we can specify it via config, so it's the new default.", "tokens": [51064, 492, 393, 2139, 1320, 309, 294, 412, 264, 5622, 1622, 11, 411, 370, 11, 420, 321, 393, 16500, 309, 5766, 6662, 11, 370, 309, 311, 264, 777, 7576, 13, 51514], "temperature": 0.0, "avg_logprob": -0.059889702796936034, "compression_ratio": 1.592274678111588, "no_speech_prob": 0.008843455463647842}, {"id": 2693, "seek": 1123200, "start": 11232.0, "end": 11239.0, "text": " By specifying IP to asterisk, we're telling the server to listen to requests on all IP addresses.", "tokens": [50364, 3146, 1608, 5489, 8671, 281, 257, 3120, 7797, 11, 321, 434, 3585, 264, 7154, 281, 2140, 281, 12475, 322, 439, 8671, 16862, 13, 50714], "temperature": 0.0, "avg_logprob": -0.056993678558704464, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.34468400478363037}, {"id": 2694, "seek": 1123200, "start": 11239.0, "end": 11247.0, "text": " You may get two warnings, one from your system firewall prompting for Python to have the ability to accept incoming network connection.", "tokens": [50714, 509, 815, 483, 732, 30009, 11, 472, 490, 428, 1185, 36109, 12391, 278, 337, 15329, 281, 362, 264, 3485, 281, 3241, 22341, 3209, 4984, 13, 51114], "temperature": 0.0, "avg_logprob": -0.056993678558704464, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.34468400478363037}, {"id": 2695, "seek": 1123200, "start": 11247.0, "end": 11250.0, "text": " This is because the notebook server is written in Python.", "tokens": [51114, 639, 307, 570, 264, 21060, 7154, 307, 3720, 294, 15329, 13, 51264], "temperature": 0.0, "avg_logprob": -0.056993678558704464, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.34468400478363037}, {"id": 2696, "seek": 1123200, "start": 11250.0, "end": 11255.0, "text": " The other warning you'll see is in your terminal output from the notebook server itself,", "tokens": [51264, 440, 661, 9164, 291, 603, 536, 307, 294, 428, 14709, 5598, 490, 264, 21060, 7154, 2564, 11, 51514], "temperature": 0.0, "avg_logprob": -0.056993678558704464, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.34468400478363037}, {"id": 2697, "seek": 1125500, "start": 11255.0, "end": 11262.0, "text": " warning you that the server is listening on all IP addresses and is not using encryption or authentication.", "tokens": [50364, 9164, 291, 300, 264, 7154, 307, 4764, 322, 439, 8671, 16862, 293, 307, 406, 1228, 29575, 420, 26643, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07060605426167332, "compression_ratio": 1.5363636363636364, "no_speech_prob": 0.09940887987613678}, {"id": 2698, "seek": 1125500, "start": 11262.0, "end": 11265.0, "text": " Don't worry, I'll show you how to set these up.", "tokens": [50714, 1468, 380, 3292, 11, 286, 603, 855, 291, 577, 281, 992, 613, 493, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07060605426167332, "compression_ratio": 1.5363636363636364, "no_speech_prob": 0.09940887987613678}, {"id": 2699, "seek": 1125500, "start": 11265.0, "end": 11269.0, "text": " But first, let's try setting IP equals asterisk in the config.", "tokens": [50864, 583, 700, 11, 718, 311, 853, 3287, 8671, 6915, 257, 3120, 7797, 294, 264, 6662, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07060605426167332, "compression_ratio": 1.5363636363636364, "no_speech_prob": 0.09940887987613678}, {"id": 2700, "seek": 1125500, "start": 11269.0, "end": 11277.0, "text": " If you recall from the earlier Tralits video, the config is stored inside the .jupiter folder inside my home directory.", "tokens": [51064, 759, 291, 9901, 490, 264, 3071, 1765, 304, 1208, 960, 11, 264, 6662, 307, 12187, 1854, 264, 2411, 73, 1010, 1681, 10820, 1854, 452, 1280, 21120, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07060605426167332, "compression_ratio": 1.5363636363636364, "no_speech_prob": 0.09940887987613678}, {"id": 2701, "seek": 1127700, "start": 11277.0, "end": 11285.0, "text": " Opening the folder up in Adam, we see that the config files from the earlier weekend and weekday demonstration still exist.", "tokens": [50364, 41137, 264, 10820, 493, 294, 7938, 11, 321, 536, 300, 264, 6662, 7098, 490, 264, 3071, 6711, 293, 1243, 810, 16520, 920, 2514, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13299756235890575, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.01717141643166542}, {"id": 2702, "seek": 1127700, "start": 11285.0, "end": 11290.0, "text": " We'll go ahead and erase that here inside the jupiter notebook config.py file.", "tokens": [50764, 492, 603, 352, 2286, 293, 23525, 300, 510, 1854, 264, 361, 1010, 1681, 21060, 6662, 13, 8200, 3991, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13299756235890575, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.01717141643166542}, {"id": 2703, "seek": 1127700, "start": 11290.0, "end": 11301.0, "text": " Now, recalling what the help text said in the terminal, we'll set notebook app.ip equal to asterisk.", "tokens": [51014, 823, 11, 9901, 278, 437, 264, 854, 2487, 848, 294, 264, 14709, 11, 321, 603, 992, 21060, 724, 13, 647, 2681, 281, 257, 3120, 7797, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13299756235890575, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.01717141643166542}, {"id": 2704, "seek": 1130100, "start": 11301.0, "end": 11307.0, "text": " Go ahead and save the file and we'll try launching the notebook server again.", "tokens": [50364, 1037, 2286, 293, 3155, 264, 3991, 293, 321, 603, 853, 18354, 264, 21060, 7154, 797, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08239303935657848, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.028422551229596138}, {"id": 2705, "seek": 1130100, "start": 11307.0, "end": 11315.0, "text": " This time, however, we won't specify the double-dash IP equals asterisk on the command line because it's already specified inside our config.", "tokens": [50664, 639, 565, 11, 4461, 11, 321, 1582, 380, 16500, 264, 3834, 12, 67, 1299, 8671, 6915, 257, 3120, 7797, 322, 264, 5622, 1622, 570, 309, 311, 1217, 22206, 1854, 527, 6662, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08239303935657848, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.028422551229596138}, {"id": 2706, "seek": 1130100, "start": 11315.0, "end": 11317.0, "text": " It looks like the launch was a success.", "tokens": [51064, 467, 1542, 411, 264, 4025, 390, 257, 2245, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08239303935657848, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.028422551229596138}, {"id": 2707, "seek": 1130100, "start": 11317.0, "end": 11326.0, "text": " We still received the warnings about the server listening on all IP addresses, even though we didn't specify the IP equals asterisk flag in the command line.", "tokens": [51164, 492, 920, 4613, 264, 30009, 466, 264, 7154, 4764, 322, 439, 8671, 16862, 11, 754, 1673, 321, 994, 380, 16500, 264, 8671, 6915, 257, 3120, 7797, 7166, 294, 264, 5622, 1622, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08239303935657848, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.028422551229596138}, {"id": 2708, "seek": 1132600, "start": 11326.0, "end": 11332.0, "text": " This means that the line that we added to the config file worked as expected.", "tokens": [50364, 639, 1355, 300, 264, 1622, 300, 321, 3869, 281, 264, 6662, 3991, 2732, 382, 5176, 13, 50664], "temperature": 0.0, "avg_logprob": -0.02230262075151716, "compression_ratio": 1.869198312236287, "no_speech_prob": 0.018257711082696915}, {"id": 2709, "seek": 1132600, "start": 11332.0, "end": 11336.0, "text": " In the last video, we added password security to the notebook.", "tokens": [50664, 682, 264, 1036, 960, 11, 321, 3869, 11524, 3825, 281, 264, 21060, 13, 50864], "temperature": 0.0, "avg_logprob": -0.02230262075151716, "compression_ratio": 1.869198312236287, "no_speech_prob": 0.018257711082696915}, {"id": 2710, "seek": 1132600, "start": 11336.0, "end": 11341.0, "text": " However, we did not encrypt the line between the web browser and the notebook web server.", "tokens": [50864, 2908, 11, 321, 630, 406, 17972, 662, 264, 1622, 1296, 264, 3670, 11185, 293, 264, 21060, 3670, 7154, 13, 51114], "temperature": 0.0, "avg_logprob": -0.02230262075151716, "compression_ratio": 1.869198312236287, "no_speech_prob": 0.018257711082696915}, {"id": 2711, "seek": 1132600, "start": 11341.0, "end": 11350.0, "text": " This means that the notebook is vulnerable to people eavesdropping on the communication between it and you or any other users of your server.", "tokens": [51114, 639, 1355, 300, 264, 21060, 307, 10955, 281, 561, 308, 5423, 45869, 3759, 322, 264, 6101, 1296, 309, 293, 291, 420, 604, 661, 5022, 295, 428, 7154, 13, 51564], "temperature": 0.0, "avg_logprob": -0.02230262075151716, "compression_ratio": 1.869198312236287, "no_speech_prob": 0.018257711082696915}, {"id": 2712, "seek": 1132600, "start": 11350.0, "end": 11355.0, "text": " In this video, we'll add HTTPS encryption to your notebook web server.", "tokens": [51564, 682, 341, 960, 11, 321, 603, 909, 11751, 51, 6273, 29575, 281, 428, 21060, 3670, 7154, 13, 51814], "temperature": 0.0, "avg_logprob": -0.02230262075151716, "compression_ratio": 1.869198312236287, "no_speech_prob": 0.018257711082696915}, {"id": 2713, "seek": 1135500, "start": 11355.0, "end": 11362.0, "text": " To get the notebook to start using HTTPS, all you have to do is point it to your key file and cert file.", "tokens": [50364, 1407, 483, 264, 21060, 281, 722, 1228, 11751, 51, 6273, 11, 439, 291, 362, 281, 360, 307, 935, 309, 281, 428, 2141, 3991, 293, 5351, 3991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.03840718524796622, "compression_ratio": 1.8837209302325582, "no_speech_prob": 0.023312188684940338}, {"id": 2714, "seek": 1135500, "start": 11362.0, "end": 11367.0, "text": " If you don't have a key file and cert file, you can generate one yourself.", "tokens": [50714, 759, 291, 500, 380, 362, 257, 2141, 3991, 293, 5351, 3991, 11, 291, 393, 8460, 472, 1803, 13, 50964], "temperature": 0.0, "avg_logprob": -0.03840718524796622, "compression_ratio": 1.8837209302325582, "no_speech_prob": 0.023312188684940338}, {"id": 2715, "seek": 1135500, "start": 11367.0, "end": 11375.0, "text": " Before I show you how to tell the notebook to use your key file and cert file, I'll show you how to generate one using OpenSSL.", "tokens": [50964, 4546, 286, 855, 291, 577, 281, 980, 264, 21060, 281, 764, 428, 2141, 3991, 293, 5351, 3991, 11, 286, 603, 855, 291, 577, 281, 8460, 472, 1228, 7238, 21929, 43, 13, 51364], "temperature": 0.0, "avg_logprob": -0.03840718524796622, "compression_ratio": 1.8837209302325582, "no_speech_prob": 0.023312188684940338}, {"id": 2716, "seek": 1135500, "start": 11375.0, "end": 11378.0, "text": " If you already have a key, you can skip this step.", "tokens": [51364, 759, 291, 1217, 362, 257, 2141, 11, 291, 393, 10023, 341, 1823, 13, 51514], "temperature": 0.0, "avg_logprob": -0.03840718524796622, "compression_ratio": 1.8837209302325582, "no_speech_prob": 0.023312188684940338}, {"id": 2717, "seek": 1135500, "start": 11378.0, "end": 11381.0, "text": " Anaconda already comes with OpenSSL installed.", "tokens": [51514, 1107, 326, 12233, 1217, 1487, 365, 7238, 21929, 43, 8899, 13, 51664], "temperature": 0.0, "avg_logprob": -0.03840718524796622, "compression_ratio": 1.8837209302325582, "no_speech_prob": 0.023312188684940338}, {"id": 2718, "seek": 1138100, "start": 11381.0, "end": 11389.0, "text": " However, OpenSSL frequently releases security updates, so I highly recommend that you update to the latest version.", "tokens": [50364, 2908, 11, 7238, 21929, 43, 10374, 16952, 3825, 9205, 11, 370, 286, 5405, 2748, 300, 291, 5623, 281, 264, 6792, 3037, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08553163657027683, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.014719663187861443}, {"id": 2719, "seek": 1138100, "start": 11389.0, "end": 11394.0, "text": " To do so, you can run conda space update OpenSSL.", "tokens": [50764, 1407, 360, 370, 11, 291, 393, 1190, 2224, 64, 1901, 5623, 7238, 21929, 43, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08553163657027683, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.014719663187861443}, {"id": 2720, "seek": 1138100, "start": 11394.0, "end": 11397.0, "text": " I'm currently inside my Jupyter config directory.", "tokens": [51014, 286, 478, 4362, 1854, 452, 22125, 88, 391, 6662, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08553163657027683, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.014719663187861443}, {"id": 2721, "seek": 1138100, "start": 11397.0, "end": 11403.0, "text": " I'm going to run OpenSSL to generate the key insert file.", "tokens": [51164, 286, 478, 516, 281, 1190, 7238, 21929, 43, 281, 8460, 264, 2141, 8969, 3991, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08553163657027683, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.014719663187861443}, {"id": 2722, "seek": 1138100, "start": 11403.0, "end": 11406.0, "text": " I'm going to generate the cert so it lasts for one year.", "tokens": [51464, 286, 478, 516, 281, 8460, 264, 5351, 370, 309, 20669, 337, 472, 1064, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08553163657027683, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.014719663187861443}, {"id": 2723, "seek": 1140600, "start": 11406.0, "end": 11414.0, "text": " To do so, I'm going to pass in 365 days into the days argument.", "tokens": [50364, 1407, 360, 370, 11, 286, 478, 516, 281, 1320, 294, 22046, 1708, 666, 264, 1708, 6770, 13, 50764], "temperature": 0.0, "avg_logprob": -0.038663821273975156, "compression_ratio": 1.5674418604651164, "no_speech_prob": 0.03902929648756981}, {"id": 2724, "seek": 1140600, "start": 11414.0, "end": 11422.0, "text": " I'm going to output both the key and the cert file into the same file.", "tokens": [50764, 286, 478, 516, 281, 5598, 1293, 264, 2141, 293, 264, 5351, 3991, 666, 264, 912, 3991, 13, 51164], "temperature": 0.0, "avg_logprob": -0.038663821273975156, "compression_ratio": 1.5674418604651164, "no_speech_prob": 0.03902929648756981}, {"id": 2725, "seek": 1140600, "start": 11422.0, "end": 11425.0, "text": " Once I run the command, an interactive wizard will start.", "tokens": [51164, 3443, 286, 1190, 264, 5622, 11, 364, 15141, 25807, 486, 722, 13, 51314], "temperature": 0.0, "avg_logprob": -0.038663821273975156, "compression_ratio": 1.5674418604651164, "no_speech_prob": 0.03902929648756981}, {"id": 2726, "seek": 1140600, "start": 11425.0, "end": 11427.0, "text": " I'll answer some of these questions.", "tokens": [51314, 286, 603, 1867, 512, 295, 613, 1651, 13, 51414], "temperature": 0.0, "avg_logprob": -0.038663821273975156, "compression_ratio": 1.5674418604651164, "no_speech_prob": 0.03902929648756981}, {"id": 2727, "seek": 1140600, "start": 11427.0, "end": 11435.0, "text": " However, if you want, you can skip any of the questions just by hitting return to accept the default value.", "tokens": [51414, 2908, 11, 498, 291, 528, 11, 291, 393, 10023, 604, 295, 264, 1651, 445, 538, 8850, 2736, 281, 3241, 264, 7576, 2158, 13, 51814], "temperature": 0.0, "avg_logprob": -0.038663821273975156, "compression_ratio": 1.5674418604651164, "no_speech_prob": 0.03902929648756981}, {"id": 2728, "seek": 1143500, "start": 11435.0, "end": 11440.0, "text": " Once that is done, we'll have to configure the notebook to use this key insert file.", "tokens": [50364, 3443, 300, 307, 1096, 11, 321, 603, 362, 281, 22162, 264, 21060, 281, 764, 341, 2141, 8969, 3991, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2729, "seek": 1143500, "start": 11440.0, "end": 11446.0, "text": " To do so, I'm going to open up Adam inside the Jupyter configuration directory.", "tokens": [50614, 1407, 360, 370, 11, 286, 478, 516, 281, 1269, 493, 7938, 1854, 264, 22125, 88, 391, 11694, 21120, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2730, "seek": 1143500, "start": 11446.0, "end": 11450.0, "text": " After the shaw from the password trait, I'm going to create a new line.", "tokens": [50914, 2381, 264, 402, 1607, 490, 264, 11524, 22538, 11, 286, 478, 516, 281, 1884, 257, 777, 1622, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2731, "seek": 1143500, "start": 11450.0, "end": 11452.0, "text": " I'm going to specify the cert file first.", "tokens": [51114, 286, 478, 516, 281, 16500, 264, 5351, 3991, 700, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2732, "seek": 1143500, "start": 11452.0, "end": 11455.0, "text": " The cert file is a trait of the notebook app.", "tokens": [51214, 440, 5351, 3991, 307, 257, 22538, 295, 264, 21060, 724, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2733, "seek": 1143500, "start": 11455.0, "end": 11462.0, "text": " It's important that I pass the full path to the cert file.", "tokens": [51364, 467, 311, 1021, 300, 286, 1320, 264, 1577, 3100, 281, 264, 5351, 3991, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2734, "seek": 1143500, "start": 11462.0, "end": 11464.0, "text": " Next, I'm going to specify the key file.", "tokens": [51714, 3087, 11, 286, 478, 516, 281, 16500, 264, 2141, 3991, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05826858746803413, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.004068199545145035}, {"id": 2735, "seek": 1146400, "start": 11464.0, "end": 11469.0, "text": " The key file is a trait of the session class.", "tokens": [50364, 440, 2141, 3991, 307, 257, 22538, 295, 264, 5481, 1508, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2736, "seek": 1146400, "start": 11469.0, "end": 11474.0, "text": " Since we output it the key into the cert file, we can just specify the same file here.", "tokens": [50614, 4162, 321, 5598, 309, 264, 2141, 666, 264, 5351, 3991, 11, 321, 393, 445, 16500, 264, 912, 3991, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2737, "seek": 1146400, "start": 11474.0, "end": 11477.0, "text": " Now I'm going to save the config.", "tokens": [50864, 823, 286, 478, 516, 281, 3155, 264, 6662, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2738, "seek": 1146400, "start": 11477.0, "end": 11482.0, "text": " Back in the terminal, I'm going to try launching the notebook.", "tokens": [51014, 5833, 294, 264, 14709, 11, 286, 478, 516, 281, 853, 18354, 264, 21060, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2739, "seek": 1146400, "start": 11482.0, "end": 11486.0, "text": " When the notebook launches, you'll probably see this security error from your web browser,", "tokens": [51264, 1133, 264, 21060, 31841, 11, 291, 603, 1391, 536, 341, 3825, 6713, 490, 428, 3670, 11185, 11, 51464], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2740, "seek": 1146400, "start": 11486.0, "end": 11490.0, "text": " saying that your connection is not private and that the authority is invalid.", "tokens": [51464, 1566, 300, 428, 4984, 307, 406, 4551, 293, 300, 264, 8281, 307, 34702, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2741, "seek": 1146400, "start": 11490.0, "end": 11493.0, "text": " This is because you self-generated the cert.", "tokens": [51664, 639, 307, 570, 291, 2698, 12, 21848, 770, 264, 5351, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06027830498559134, "compression_ratio": 1.6654135338345866, "no_speech_prob": 0.0021820510737597942}, {"id": 2742, "seek": 1149300, "start": 11493.0, "end": 11496.0, "text": " You can get around this by having a third party generate your cert.", "tokens": [50364, 509, 393, 483, 926, 341, 538, 1419, 257, 2636, 3595, 8460, 428, 5351, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2743, "seek": 1149300, "start": 11496.0, "end": 11501.0, "text": " For now, let's just click Advanced and proceed the local host.", "tokens": [50514, 1171, 586, 11, 718, 311, 445, 2052, 26951, 293, 8991, 264, 2654, 3975, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2744, "seek": 1149300, "start": 11501.0, "end": 11503.0, "text": " Now our connection is being encrypted.", "tokens": [50764, 823, 527, 4984, 307, 885, 36663, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2745, "seek": 1149300, "start": 11503.0, "end": 11507.0, "text": " If you are interested in getting a cert that's verified by a third party,", "tokens": [50864, 759, 291, 366, 3102, 294, 1242, 257, 5351, 300, 311, 31197, 538, 257, 2636, 3595, 11, 51064], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2746, "seek": 1149300, "start": 11507.0, "end": 11509.0, "text": " I recommend using StartSSL.", "tokens": [51064, 286, 2748, 1228, 6481, 21929, 43, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2747, "seek": 1149300, "start": 11509.0, "end": 11511.0, "text": " They'll do it for free.", "tokens": [51164, 814, 603, 360, 309, 337, 1737, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2748, "seek": 1149300, "start": 11511.0, "end": 11516.0, "text": " You can visit their website at www.startssl.com.", "tokens": [51264, 509, 393, 3441, 641, 3144, 412, 12520, 13, 24419, 3810, 75, 13, 1112, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2749, "seek": 1149300, "start": 11516.0, "end": 11520.0, "text": " The StartSSL free cert should be fine for basic setups.", "tokens": [51514, 440, 6481, 21929, 43, 1737, 5351, 820, 312, 2489, 337, 3875, 46832, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06000840447165749, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.01716546155512333}, {"id": 2750, "seek": 1152000, "start": 11520.0, "end": 11524.0, "text": " The other two offer slightly more features that are verified,", "tokens": [50364, 440, 661, 732, 2626, 4748, 544, 4122, 300, 366, 31197, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07161686545924137, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.0023226733319461346}, {"id": 2751, "seek": 1152000, "start": 11524.0, "end": 11530.0, "text": " whereas the most expensive gives your site a green bar inside the address bar when the user is connected.", "tokens": [50564, 9735, 264, 881, 5124, 2709, 428, 3621, 257, 3092, 2159, 1854, 264, 2985, 2159, 562, 264, 4195, 307, 4582, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07161686545924137, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.0023226733319461346}, {"id": 2752, "seek": 1152000, "start": 11530.0, "end": 11537.0, "text": " You can see that in the screenshot in the side column of their website.", "tokens": [50864, 509, 393, 536, 300, 294, 264, 27712, 294, 264, 1252, 7738, 295, 641, 3144, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07161686545924137, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.0023226733319461346}, {"id": 2753, "seek": 1152000, "start": 11537.0, "end": 11542.0, "text": " In the last chapter, we talked about how you could deploy the notebook securely.", "tokens": [51214, 682, 264, 1036, 7187, 11, 321, 2825, 466, 577, 291, 727, 7274, 264, 21060, 38348, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07161686545924137, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.0023226733319461346}, {"id": 2754, "seek": 1152000, "start": 11542.0, "end": 11544.0, "text": " In this chapter, we'll change gears.", "tokens": [51464, 682, 341, 7187, 11, 321, 603, 1319, 20915, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07161686545924137, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.0023226733319461346}, {"id": 2755, "seek": 1152000, "start": 11544.0, "end": 11546.0, "text": " We'll start looking at NB Viewer.", "tokens": [51564, 492, 603, 722, 1237, 412, 426, 33, 13909, 260, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07161686545924137, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.0023226733319461346}, {"id": 2756, "seek": 1154600, "start": 11546.0, "end": 11552.0, "text": " Before I discuss installing NB Viewer, I'm going to show you what NB Viewer looks like in the wild.", "tokens": [50364, 4546, 286, 2248, 20762, 426, 33, 13909, 260, 11, 286, 478, 516, 281, 855, 291, 437, 426, 33, 13909, 260, 1542, 411, 294, 264, 4868, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06573185411471764, "compression_ratio": 1.6201923076923077, "no_speech_prob": 0.053328987210989}, {"id": 2757, "seek": 1154600, "start": 11552.0, "end": 11556.0, "text": " I'm currently on the Jupyter public deployment of NB Viewer,", "tokens": [50664, 286, 478, 4362, 322, 264, 22125, 88, 391, 1908, 19317, 295, 426, 33, 13909, 260, 11, 50864], "temperature": 0.0, "avg_logprob": -0.06573185411471764, "compression_ratio": 1.6201923076923077, "no_speech_prob": 0.053328987210989}, {"id": 2758, "seek": 1154600, "start": 11556.0, "end": 11561.0, "text": " which is accessible at nbviewer.jupyter.org.", "tokens": [50864, 597, 307, 9515, 412, 297, 65, 13457, 13, 73, 1010, 88, 391, 13, 4646, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06573185411471764, "compression_ratio": 1.6201923076923077, "no_speech_prob": 0.053328987210989}, {"id": 2759, "seek": 1154600, "start": 11561.0, "end": 11568.0, "text": " NB Viewer is a web application that is used to render static views of notebooks online.", "tokens": [51114, 426, 33, 13909, 260, 307, 257, 3670, 3861, 300, 307, 1143, 281, 15529, 13437, 6809, 295, 43782, 2950, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06573185411471764, "compression_ratio": 1.6201923076923077, "no_speech_prob": 0.053328987210989}, {"id": 2760, "seek": 1154600, "start": 11568.0, "end": 11571.0, "text": " In the back end, NB Viewer uses NB Convert,", "tokens": [51464, 682, 264, 646, 917, 11, 426, 33, 13909, 260, 4960, 426, 33, 2656, 3281, 11, 51614], "temperature": 0.0, "avg_logprob": -0.06573185411471764, "compression_ratio": 1.6201923076923077, "no_speech_prob": 0.053328987210989}, {"id": 2761, "seek": 1157100, "start": 11571.0, "end": 11578.0, "text": " the application that I showed you in chapter one, which can be used to convert notebooks to various static formats.", "tokens": [50364, 264, 3861, 300, 286, 4712, 291, 294, 7187, 472, 11, 597, 393, 312, 1143, 281, 7620, 43782, 281, 3683, 13437, 25879, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04014640438313387, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.028415346518158913}, {"id": 2762, "seek": 1157100, "start": 11578.0, "end": 11584.0, "text": " NB Viewer just uses NB Convert to convert notebooks to static HTML representations.", "tokens": [50714, 426, 33, 13909, 260, 445, 4960, 426, 33, 2656, 3281, 281, 7620, 43782, 281, 13437, 17995, 33358, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04014640438313387, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.028415346518158913}, {"id": 2763, "seek": 1157100, "start": 11584.0, "end": 11590.0, "text": " NB Viewer itself is a simple website that has a title and then an address bar", "tokens": [51014, 426, 33, 13909, 260, 2564, 307, 257, 2199, 3144, 300, 575, 257, 4876, 293, 550, 364, 2985, 2159, 51314], "temperature": 0.0, "avg_logprob": -0.04014640438313387, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.028415346518158913}, {"id": 2764, "seek": 1157100, "start": 11590.0, "end": 11593.0, "text": " where you can paste the link to your notebook file.", "tokens": [51314, 689, 291, 393, 9163, 264, 2113, 281, 428, 21060, 3991, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04014640438313387, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.028415346518158913}, {"id": 2765, "seek": 1157100, "start": 11593.0, "end": 11597.0, "text": " After pasting the link, you click Go and it will render that notebook file.", "tokens": [51464, 2381, 1791, 278, 264, 2113, 11, 291, 2052, 1037, 293, 309, 486, 15529, 300, 21060, 3991, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04014640438313387, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.028415346518158913}, {"id": 2766, "seek": 1159700, "start": 11597.0, "end": 11601.0, "text": " Below that, there's a showcase of notebooks for various categories.", "tokens": [50364, 36261, 300, 11, 456, 311, 257, 20388, 295, 43782, 337, 3683, 10479, 13, 50564], "temperature": 0.0, "avg_logprob": -0.03590824002417448, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.027148891240358353}, {"id": 2767, "seek": 1159700, "start": 11601.0, "end": 11607.0, "text": " Here, for example, we can click on this iRuby notebook to see what iRuby is.", "tokens": [50564, 1692, 11, 337, 1365, 11, 321, 393, 2052, 322, 341, 741, 49, 836, 88, 21060, 281, 536, 437, 741, 49, 836, 88, 307, 13, 50864], "temperature": 0.0, "avg_logprob": -0.03590824002417448, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.027148891240358353}, {"id": 2768, "seek": 1159700, "start": 11607.0, "end": 11609.0, "text": " This is what a rendered notebook looks like.", "tokens": [50864, 639, 307, 437, 257, 28748, 21060, 1542, 411, 13, 50964], "temperature": 0.0, "avg_logprob": -0.03590824002417448, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.027148891240358353}, {"id": 2769, "seek": 1159700, "start": 11609.0, "end": 11613.0, "text": " You can see it looks quite different than the notebook client that you're used to.", "tokens": [50964, 509, 393, 536, 309, 1542, 1596, 819, 813, 264, 21060, 6423, 300, 291, 434, 1143, 281, 13, 51164], "temperature": 0.0, "avg_logprob": -0.03590824002417448, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.027148891240358353}, {"id": 2770, "seek": 1159700, "start": 11613.0, "end": 11619.0, "text": " It's quite a bit more bare, but it still bears some resemblance to pieces of the interactive notebook,", "tokens": [51164, 467, 311, 1596, 257, 857, 544, 6949, 11, 457, 309, 920, 17276, 512, 20695, 37271, 281, 3755, 295, 264, 15141, 21060, 11, 51464], "temperature": 0.0, "avg_logprob": -0.03590824002417448, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.027148891240358353}, {"id": 2771, "seek": 1159700, "start": 11619.0, "end": 11623.0, "text": " such as these prompts and cell formatting.", "tokens": [51464, 1270, 382, 613, 41095, 293, 2815, 39366, 13, 51664], "temperature": 0.0, "avg_logprob": -0.03590824002417448, "compression_ratio": 1.6587301587301588, "no_speech_prob": 0.027148891240358353}, {"id": 2772, "seek": 1162300, "start": 11623.0, "end": 11631.0, "text": " At the top, there are links to download the notebook, view the notebook on GitHub if it is a GitHub hosted file,", "tokens": [50364, 1711, 264, 1192, 11, 456, 366, 6123, 281, 5484, 264, 21060, 11, 1910, 264, 21060, 322, 23331, 498, 309, 307, 257, 23331, 19204, 3991, 11, 50764], "temperature": 0.0, "avg_logprob": -0.04420291676240809, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.023677343502640724}, {"id": 2773, "seek": 1162300, "start": 11631.0, "end": 11633.0, "text": " and a link to go to the top of the file.", "tokens": [50764, 293, 257, 2113, 281, 352, 281, 264, 1192, 295, 264, 3991, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04420291676240809, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.023677343502640724}, {"id": 2774, "seek": 1162300, "start": 11633.0, "end": 11638.0, "text": " At the bottom of the page, you can see the version of NB Viewer that we're running,", "tokens": [50864, 1711, 264, 2767, 295, 264, 3028, 11, 291, 393, 536, 264, 3037, 295, 426, 33, 13909, 260, 300, 321, 434, 2614, 11, 51114], "temperature": 0.0, "avg_logprob": -0.04420291676240809, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.023677343502640724}, {"id": 2775, "seek": 1162300, "start": 11638.0, "end": 11643.0, "text": " the notebooks version, and the version of NB Convert that NB Viewer is running against.", "tokens": [51114, 264, 43782, 3037, 11, 293, 264, 3037, 295, 426, 33, 2656, 3281, 300, 426, 33, 13909, 260, 307, 2614, 1970, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04420291676240809, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.023677343502640724}, {"id": 2776, "seek": 1162300, "start": 11643.0, "end": 11651.0, "text": " NB Viewer tries to be aggressive about caching notebooks, so you also get a status of when the notebook was last rendered.", "tokens": [51364, 426, 33, 13909, 260, 9898, 281, 312, 10762, 466, 269, 2834, 43782, 11, 370, 291, 611, 483, 257, 6558, 295, 562, 264, 21060, 390, 1036, 28748, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04420291676240809, "compression_ratio": 1.8512396694214877, "no_speech_prob": 0.023677343502640724}, {"id": 2777, "seek": 1165100, "start": 11651.0, "end": 11659.0, "text": " Because NB Viewer is not a user application and it's actually a web application, it's not included with Anaconda.", "tokens": [50364, 1436, 426, 33, 13909, 260, 307, 406, 257, 4195, 3861, 293, 309, 311, 767, 257, 3670, 3861, 11, 309, 311, 406, 5556, 365, 1107, 326, 12233, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04622387886047363, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.006795370951294899}, {"id": 2778, "seek": 1165100, "start": 11659.0, "end": 11661.0, "text": " Therefore, I'll have to show you how to install it.", "tokens": [50764, 7504, 11, 286, 603, 362, 281, 855, 291, 577, 281, 3625, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04622387886047363, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.006795370951294899}, {"id": 2779, "seek": 1165100, "start": 11661.0, "end": 11665.0, "text": " The easiest way to install NB Viewer is using Docker.", "tokens": [50864, 440, 12889, 636, 281, 3625, 426, 33, 13909, 260, 307, 1228, 33772, 13, 51064], "temperature": 0.0, "avg_logprob": -0.04622387886047363, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.006795370951294899}, {"id": 2780, "seek": 1165100, "start": 11665.0, "end": 11671.0, "text": " Docker is not included with Anaconda either, so I'll also have to show you how to install that.", "tokens": [51064, 33772, 307, 406, 5556, 365, 1107, 326, 12233, 2139, 11, 370, 286, 603, 611, 362, 281, 855, 291, 577, 281, 3625, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04622387886047363, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.006795370951294899}, {"id": 2781, "seek": 1165100, "start": 11671.0, "end": 11673.0, "text": " Docker is an emulation platform.", "tokens": [51364, 33772, 307, 364, 846, 2776, 3663, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04622387886047363, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.006795370951294899}, {"id": 2782, "seek": 1165100, "start": 11673.0, "end": 11679.0, "text": " It allows you to run applications inside an isolated environment called containers.", "tokens": [51464, 467, 4045, 291, 281, 1190, 5821, 1854, 364, 14621, 2823, 1219, 17089, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04622387886047363, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.006795370951294899}, {"id": 2783, "seek": 1167900, "start": 11679.0, "end": 11685.0, "text": " Docker containers differ from virtual machines in that the containers share the host OS.", "tokens": [50364, 33772, 17089, 743, 490, 6374, 8379, 294, 300, 264, 17089, 2073, 264, 3975, 12731, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06217262903849284, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.01970740407705307}, {"id": 2784, "seek": 1167900, "start": 11685.0, "end": 11689.0, "text": " Containers can also share dependencies with each other.", "tokens": [50664, 43732, 433, 393, 611, 2073, 36606, 365, 1184, 661, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06217262903849284, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.01970740407705307}, {"id": 2785, "seek": 1167900, "start": 11689.0, "end": 11698.0, "text": " This minimizes the distance between the container and the system hardware, which makes containers faster and smaller to install.", "tokens": [50864, 639, 4464, 5660, 264, 4560, 1296, 264, 10129, 293, 264, 1185, 8837, 11, 597, 1669, 17089, 4663, 293, 4356, 281, 3625, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06217262903849284, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.01970740407705307}, {"id": 2786, "seek": 1167900, "start": 11698.0, "end": 11705.0, "text": " To install Docker, first go to Docker's website at www.docker.com.", "tokens": [51314, 1407, 3625, 33772, 11, 700, 352, 281, 33772, 311, 3144, 412, 12520, 13, 48341, 260, 13, 1112, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06217262903849284, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.01970740407705307}, {"id": 2787, "seek": 1170500, "start": 11705.0, "end": 11709.0, "text": " Then click on the Get Started link in the top right hand corner.", "tokens": [50364, 1396, 2052, 322, 264, 3240, 39715, 2113, 294, 264, 1192, 558, 1011, 4538, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2788, "seek": 1170500, "start": 11709.0, "end": 11713.0, "text": " The instructions for getting started are operating system dependent.", "tokens": [50564, 440, 9415, 337, 1242, 1409, 366, 7447, 1185, 12334, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2789, "seek": 1170500, "start": 11713.0, "end": 11717.0, "text": " Because I'm running a Mac, I'll show you how to get started with Docker on a Mac.", "tokens": [50764, 1436, 286, 478, 2614, 257, 5707, 11, 286, 603, 855, 291, 577, 281, 483, 1409, 365, 33772, 322, 257, 5707, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2790, "seek": 1170500, "start": 11717.0, "end": 11722.0, "text": " If you're running Linux or Windows, this page will look a little different for you.", "tokens": [50964, 759, 291, 434, 2614, 18734, 420, 8591, 11, 341, 3028, 486, 574, 257, 707, 819, 337, 291, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2791, "seek": 1170500, "start": 11722.0, "end": 11725.0, "text": " The first step is to install Docker tools.", "tokens": [51214, 440, 700, 1823, 307, 281, 3625, 33772, 3873, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2792, "seek": 1170500, "start": 11725.0, "end": 11728.0, "text": " You can click on Install Docker on OS X.", "tokens": [51364, 509, 393, 2052, 322, 31982, 33772, 322, 12731, 1783, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2793, "seek": 1170500, "start": 11728.0, "end": 11734.0, "text": " Scroll down to step two, where you'll see Install Docker Toolbox.", "tokens": [51514, 35395, 760, 281, 1823, 732, 11, 689, 291, 603, 536, 31982, 33772, 15934, 4995, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07644216993213755, "compression_ratio": 1.662962962962963, "no_speech_prob": 0.1776323765516281}, {"id": 2794, "seek": 1173400, "start": 11734.0, "end": 11736.0, "text": " Click on that and then scroll down.", "tokens": [50364, 8230, 322, 300, 293, 550, 11369, 760, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2795, "seek": 1173400, "start": 11736.0, "end": 11740.0, "text": " Click the Download button for Mac if you're on OS X.", "tokens": [50464, 8230, 264, 32282, 2960, 337, 5707, 498, 291, 434, 322, 12731, 1783, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2796, "seek": 1173400, "start": 11740.0, "end": 11743.0, "text": " Once you have the Toolbox installer, run it.", "tokens": [50664, 3443, 291, 362, 264, 15934, 4995, 46620, 11, 1190, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2797, "seek": 1173400, "start": 11743.0, "end": 11745.0, "text": " Follow the prompts in the wizard.", "tokens": [50814, 9876, 264, 41095, 294, 264, 25807, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2798, "seek": 1173400, "start": 11745.0, "end": 11748.0, "text": " Select a hard drive to install to.", "tokens": [50914, 13638, 257, 1152, 3332, 281, 3625, 281, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2799, "seek": 1173400, "start": 11748.0, "end": 11751.0, "text": " Enter your password when prompted.", "tokens": [51064, 10399, 428, 11524, 562, 31042, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2800, "seek": 1173400, "start": 11751.0, "end": 11753.0, "text": " When done, click Continue.", "tokens": [51214, 1133, 1096, 11, 2052, 24472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2801, "seek": 1173400, "start": 11753.0, "end": 11755.0, "text": " Then click Close.", "tokens": [51314, 1396, 2052, 16346, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2802, "seek": 1173400, "start": 11755.0, "end": 11759.0, "text": " Now launch the Docker Quick Start Terminal.", "tokens": [51414, 823, 4025, 264, 33772, 12101, 6481, 19835, 2071, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2803, "seek": 1173400, "start": 11759.0, "end": 11762.0, "text": " It takes a little while for it to start the machine.", "tokens": [51614, 467, 2516, 257, 707, 1339, 337, 309, 281, 722, 264, 3479, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06782611810936118, "compression_ratio": 1.534412955465587, "no_speech_prob": 0.0033756608609110117}, {"id": 2804, "seek": 1176200, "start": 11762.0, "end": 11773.0, "text": " Once the process finishes, you can run Docker space run space hello dash world.", "tokens": [50364, 3443, 264, 1399, 23615, 11, 291, 393, 1190, 33772, 1901, 1190, 1901, 7751, 8240, 1002, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1021636894771031, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.003375923028215766}, {"id": 2805, "seek": 1176200, "start": 11773.0, "end": 11781.0, "text": " You should see a Hello from Docker message, which confirms that your installation is working.", "tokens": [50914, 509, 820, 536, 257, 2425, 490, 33772, 3636, 11, 597, 39982, 300, 428, 13260, 307, 1364, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1021636894771031, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.003375923028215766}, {"id": 2806, "seek": 1176200, "start": 11781.0, "end": 11785.0, "text": " In the last video, I introduced you to NBViewer and Docker.", "tokens": [51314, 682, 264, 1036, 960, 11, 286, 7268, 291, 281, 426, 33, 30203, 260, 293, 33772, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1021636894771031, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.003375923028215766}, {"id": 2807, "seek": 1176200, "start": 11785.0, "end": 11788.0, "text": " We then installed Docker on your machine.", "tokens": [51514, 492, 550, 8899, 33772, 322, 428, 3479, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1021636894771031, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.003375923028215766}, {"id": 2808, "seek": 1176200, "start": 11788.0, "end": 11791.0, "text": " In this video, we'll install the NBViewer Docker image.", "tokens": [51664, 682, 341, 960, 11, 321, 603, 3625, 264, 426, 33, 30203, 260, 33772, 3256, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1021636894771031, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.003375923028215766}, {"id": 2809, "seek": 1179100, "start": 11791.0, "end": 11795.0, "text": " To get started, open the Docker Quick Terminal.", "tokens": [50364, 1407, 483, 1409, 11, 1269, 264, 33772, 12101, 19835, 2071, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2810, "seek": 1179100, "start": 11795.0, "end": 11797.0, "text": " Your terminal may take a while to start.", "tokens": [50564, 2260, 14709, 815, 747, 257, 1339, 281, 722, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2811, "seek": 1179100, "start": 11797.0, "end": 11802.0, "text": " Once the terminal has started, pay attention to the IP address listed in green.", "tokens": [50664, 3443, 264, 14709, 575, 1409, 11, 1689, 3202, 281, 264, 8671, 2985, 10052, 294, 3092, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2812, "seek": 1179100, "start": 11802.0, "end": 11806.0, "text": " Mine's 192.168.99.100.", "tokens": [50914, 11620, 311, 1294, 17, 13, 6866, 23, 13, 8494, 13, 6879, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2813, "seek": 1179100, "start": 11806.0, "end": 11809.0, "text": " That is the IP address of the Docker image.", "tokens": [51114, 663, 307, 264, 8671, 2985, 295, 264, 33772, 3256, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2814, "seek": 1179100, "start": 11809.0, "end": 11815.0, "text": " You'll use that IP address to access your NBViewer server once it's started.", "tokens": [51264, 509, 603, 764, 300, 8671, 2985, 281, 2105, 428, 426, 33, 30203, 260, 7154, 1564, 309, 311, 1409, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2815, "seek": 1179100, "start": 11815.0, "end": 11817.0, "text": " The first step is to download NBViewer.", "tokens": [51564, 440, 700, 1823, 307, 281, 5484, 426, 33, 30203, 260, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2816, "seek": 1179100, "start": 11817.0, "end": 11819.0, "text": " Now, I've already done this ahead of time.", "tokens": [51664, 823, 11, 286, 600, 1217, 1096, 341, 2286, 295, 565, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05277127486008864, "compression_ratio": 1.6056910569105691, "no_speech_prob": 0.013217076659202576}, {"id": 2817, "seek": 1181900, "start": 11819.0, "end": 11824.0, "text": " So mine will download fairly quick because it will just be verifying that I have the latest version.", "tokens": [50364, 407, 3892, 486, 5484, 6457, 1702, 570, 309, 486, 445, 312, 1306, 5489, 300, 286, 362, 264, 6792, 3037, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0615792324145635, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.0011334409937262535}, {"id": 2818, "seek": 1181900, "start": 11824.0, "end": 11830.0, "text": " But the first time you run this command, it may take a while.", "tokens": [50614, 583, 264, 700, 565, 291, 1190, 341, 5622, 11, 309, 815, 747, 257, 1339, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0615792324145635, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.0011334409937262535}, {"id": 2819, "seek": 1181900, "start": 11830.0, "end": 11838.0, "text": " Next, let's try launching NBViewer.", "tokens": [50914, 3087, 11, 718, 311, 853, 18354, 426, 33, 30203, 260, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0615792324145635, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.0011334409937262535}, {"id": 2820, "seek": 1181900, "start": 11838.0, "end": 11842.0, "text": " Once the server starts, it should tell you the port it's listening on.", "tokens": [51314, 3443, 264, 7154, 3719, 11, 309, 820, 980, 291, 264, 2436, 309, 311, 4764, 322, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0615792324145635, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.0011334409937262535}, {"id": 2821, "seek": 1181900, "start": 11842.0, "end": 11847.0, "text": " In a new web browser, go ahead and try accessing that IP address that you remember that was in green,", "tokens": [51514, 682, 257, 777, 3670, 11185, 11, 352, 2286, 293, 853, 26440, 300, 8671, 2985, 300, 291, 1604, 300, 390, 294, 3092, 11, 51764], "temperature": 0.0, "avg_logprob": -0.0615792324145635, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.0011334409937262535}, {"id": 2822, "seek": 1184700, "start": 11847.0, "end": 11852.0, "text": " followed by colon 8080.", "tokens": [50364, 6263, 538, 8255, 4688, 4702, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2823, "seek": 1184700, "start": 11852.0, "end": 11855.0, "text": " If all worked well, you should see NBViewer.", "tokens": [50614, 759, 439, 2732, 731, 11, 291, 820, 536, 426, 33, 30203, 260, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2824, "seek": 1184700, "start": 11855.0, "end": 11858.0, "text": " Go ahead and try to open up a notebook.", "tokens": [50764, 1037, 2286, 293, 853, 281, 1269, 493, 257, 21060, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2825, "seek": 1184700, "start": 11858.0, "end": 11861.0, "text": " Once the notebook opens, go back to your terminal.", "tokens": [50914, 3443, 264, 21060, 9870, 11, 352, 646, 281, 428, 14709, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2826, "seek": 1184700, "start": 11861.0, "end": 11866.0, "text": " You should see output from the NBViewer server verifying your request.", "tokens": [51064, 509, 820, 536, 5598, 490, 264, 426, 33, 30203, 260, 7154, 1306, 5489, 428, 5308, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2827, "seek": 1184700, "start": 11866.0, "end": 11869.0, "text": " Without this, it would be hard to tell if you were actually running the server or not,", "tokens": [51314, 9129, 341, 11, 309, 576, 312, 1152, 281, 980, 498, 291, 645, 767, 2614, 264, 7154, 420, 406, 11, 51464], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2828, "seek": 1184700, "start": 11869.0, "end": 11873.0, "text": " or if you were just accessing the public NBViewer deployment by Jupyter.", "tokens": [51464, 420, 498, 291, 645, 445, 26440, 264, 1908, 426, 33, 30203, 260, 19317, 538, 22125, 88, 391, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05462308761176713, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.014058633707463741}, {"id": 2829, "seek": 1187300, "start": 11873.0, "end": 11879.0, "text": " NBViewer has this wonderful feature that allows you to access notebooks on GitHub using short URLs.", "tokens": [50364, 426, 33, 30203, 260, 575, 341, 3715, 4111, 300, 4045, 291, 281, 2105, 43782, 322, 23331, 1228, 2099, 43267, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07061783183704723, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.07802479714155197}, {"id": 2830, "seek": 1187300, "start": 11879.0, "end": 11885.0, "text": " To demonstrate this, I'll access a notebook that's stored as a gist under my GitHub account.", "tokens": [50664, 1407, 11698, 341, 11, 286, 603, 2105, 257, 21060, 300, 311, 12187, 382, 257, 290, 468, 833, 452, 23331, 2696, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07061783183704723, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.07802479714155197}, {"id": 2831, "seek": 1187300, "start": 11885.0, "end": 11888.0, "text": " So here's a simple notebook I created for PyData.", "tokens": [50964, 407, 510, 311, 257, 2199, 21060, 286, 2942, 337, 9953, 35, 3274, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07061783183704723, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.07802479714155197}, {"id": 2832, "seek": 1187300, "start": 11888.0, "end": 11892.0, "text": " It's stored under my account as this gist.", "tokens": [51114, 467, 311, 12187, 833, 452, 2696, 382, 341, 290, 468, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07061783183704723, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.07802479714155197}, {"id": 2833, "seek": 1187300, "start": 11892.0, "end": 11894.0, "text": " I'm going to just copy this URL.", "tokens": [51314, 286, 478, 516, 281, 445, 5055, 341, 12905, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07061783183704723, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.07802479714155197}, {"id": 2834, "seek": 1187300, "start": 11894.0, "end": 11900.0, "text": " Because NBViewer has support for gist, I can just paste it directly in and click go.", "tokens": [51414, 1436, 426, 33, 30203, 260, 575, 1406, 337, 290, 468, 11, 286, 393, 445, 9163, 309, 3838, 294, 293, 2052, 352, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07061783183704723, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.07802479714155197}, {"id": 2835, "seek": 1190000, "start": 11900.0, "end": 11906.0, "text": " Alternatively, I can use an even shorter form, which is just the gist ID.", "tokens": [50364, 46167, 11, 286, 393, 764, 364, 754, 11639, 1254, 11, 597, 307, 445, 264, 290, 468, 7348, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2836, "seek": 1190000, "start": 11906.0, "end": 11910.0, "text": " To do so, I'll remove all the stuff before the last forward slash.", "tokens": [50664, 1407, 360, 370, 11, 286, 603, 4159, 439, 264, 1507, 949, 264, 1036, 2128, 17330, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2837, "seek": 1190000, "start": 11910.0, "end": 11912.0, "text": " This is my gist ID.", "tokens": [50864, 639, 307, 452, 290, 468, 7348, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2838, "seek": 1190000, "start": 11912.0, "end": 11914.0, "text": " You can see NBViewer still renders it.", "tokens": [50964, 509, 393, 536, 426, 33, 30203, 260, 920, 6125, 433, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2839, "seek": 1190000, "start": 11914.0, "end": 11917.0, "text": " The GitHub public APIs have rate limiting.", "tokens": [51064, 440, 23331, 1908, 21445, 362, 3314, 22083, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2840, "seek": 1190000, "start": 11917.0, "end": 11923.0, "text": " So if you plan on supporting this feature, it's a good idea to generate an access token for NBViewer.", "tokens": [51214, 407, 498, 291, 1393, 322, 7231, 341, 4111, 11, 309, 311, 257, 665, 1558, 281, 8460, 364, 2105, 14862, 337, 426, 33, 30203, 260, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2841, "seek": 1190000, "start": 11923.0, "end": 11925.0, "text": " Doing so is relatively painless.", "tokens": [51514, 18496, 370, 307, 7226, 1822, 1832, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2842, "seek": 1190000, "start": 11925.0, "end": 11928.0, "text": " Log on to github.com using your account.", "tokens": [51614, 10824, 322, 281, 290, 355, 836, 13, 1112, 1228, 428, 2696, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05132564684239829, "compression_ratio": 1.531135531135531, "no_speech_prob": 0.0030749726574867964}, {"id": 2843, "seek": 1192800, "start": 11928.0, "end": 11932.0, "text": " Then in the top right hand corner, click view profile and more.", "tokens": [50364, 1396, 294, 264, 1192, 558, 1011, 4538, 11, 2052, 1910, 7964, 293, 544, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2844, "seek": 1192800, "start": 11932.0, "end": 11936.0, "text": " Next, select your profile.", "tokens": [50564, 3087, 11, 3048, 428, 7964, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2845, "seek": 1192800, "start": 11936.0, "end": 11938.0, "text": " Click edit profile.", "tokens": [50764, 8230, 8129, 7964, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2846, "seek": 1192800, "start": 11938.0, "end": 11943.0, "text": " Then click personal access tokens in the left hand column.", "tokens": [50864, 1396, 2052, 2973, 2105, 22667, 294, 264, 1411, 1011, 7738, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2847, "seek": 1192800, "start": 11943.0, "end": 11946.0, "text": " Next, click generate new token.", "tokens": [51114, 3087, 11, 2052, 8460, 777, 14862, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2848, "seek": 1192800, "start": 11946.0, "end": 11948.0, "text": " Give the token a name.", "tokens": [51264, 5303, 264, 14862, 257, 1315, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2849, "seek": 1192800, "start": 11948.0, "end": 11952.0, "text": " And then change the scopes that you want to use to restrict the token.", "tokens": [51364, 400, 550, 1319, 264, 795, 30545, 300, 291, 528, 281, 764, 281, 7694, 264, 14862, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2850, "seek": 1192800, "start": 11952.0, "end": 11954.0, "text": " When you're done, click generate token.", "tokens": [51564, 1133, 291, 434, 1096, 11, 2052, 8460, 14862, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2851, "seek": 1192800, "start": 11954.0, "end": 11957.0, "text": " Your token will be displayed in the green bar.", "tokens": [51664, 2260, 14862, 486, 312, 16372, 294, 264, 3092, 2159, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07364417974231313, "compression_ratio": 1.7285067873303168, "no_speech_prob": 0.06950047612190247}, {"id": 2852, "seek": 1195700, "start": 11957.0, "end": 11960.0, "text": " I've blurred a couple of the numbers of my token for security.", "tokens": [50364, 286, 600, 43525, 257, 1916, 295, 264, 3547, 295, 452, 14862, 337, 3825, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06102909105960454, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0010648316238075495}, {"id": 2853, "seek": 1195700, "start": 11960.0, "end": 11964.0, "text": " Click the copy button to copy the token to your clipboard.", "tokens": [50514, 8230, 264, 5055, 2960, 281, 5055, 264, 14862, 281, 428, 7353, 3787, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06102909105960454, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0010648316238075495}, {"id": 2854, "seek": 1195700, "start": 11964.0, "end": 11969.0, "text": " Now in the terminal that's running NBViewer, hit ctrl C to stop NBViewer.", "tokens": [50714, 823, 294, 264, 14709, 300, 311, 2614, 426, 33, 30203, 260, 11, 2045, 269, 28269, 383, 281, 1590, 426, 33, 30203, 260, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06102909105960454, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0010648316238075495}, {"id": 2855, "seek": 1195700, "start": 11969.0, "end": 11977.0, "text": " Now let's relaunch NBViewer, adding our new access token to the command line.", "tokens": [50964, 823, 718, 311, 5195, 1680, 426, 33, 30203, 260, 11, 5127, 527, 777, 2105, 14862, 281, 264, 5622, 1622, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06102909105960454, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0010648316238075495}, {"id": 2856, "seek": 1195700, "start": 11977.0, "end": 11984.0, "text": " Because we're running NBViewer as a Docker image, we can't specify arguments directly to NBViewer.", "tokens": [51364, 1436, 321, 434, 2614, 426, 33, 30203, 260, 382, 257, 33772, 3256, 11, 321, 393, 380, 16500, 12869, 3838, 281, 426, 33, 30203, 260, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06102909105960454, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.0010648316238075495}, {"id": 2857, "seek": 1198400, "start": 11984.0, "end": 11989.0, "text": " Instead, we have to set environment variables to cause NBViewer to change its behavior.", "tokens": [50364, 7156, 11, 321, 362, 281, 992, 2823, 9102, 281, 3082, 426, 33, 30203, 260, 281, 1319, 1080, 5223, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06123231747828492, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.0012842196738347411}, {"id": 2858, "seek": 1198400, "start": 11989.0, "end": 11999.0, "text": " Here, I'm telling Docker to set the github underscore api underscore token variable to the token that I just copied from github.", "tokens": [50614, 1692, 11, 286, 478, 3585, 33772, 281, 992, 264, 290, 355, 836, 37556, 1882, 72, 37556, 14862, 7006, 281, 264, 14862, 300, 286, 445, 25365, 490, 290, 355, 836, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06123231747828492, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.0012842196738347411}, {"id": 2859, "seek": 1198400, "start": 11999.0, "end": 12003.0, "text": " Now when I try accessing NBViewer, it should be using that token.", "tokens": [51114, 823, 562, 286, 853, 26440, 426, 33, 30203, 260, 11, 309, 820, 312, 1228, 300, 14862, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06123231747828492, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.0012842196738347411}, {"id": 2860, "seek": 1198400, "start": 12003.0, "end": 12006.0, "text": " Let's paste the same gist id from earlier.", "tokens": [51314, 961, 311, 9163, 264, 912, 290, 468, 4496, 490, 3071, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06123231747828492, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.0012842196738347411}, {"id": 2861, "seek": 1198400, "start": 12006.0, "end": 12012.0, "text": " Now let's go to github.com to see if the api token was used.", "tokens": [51464, 823, 718, 311, 352, 281, 290, 355, 836, 13, 1112, 281, 536, 498, 264, 1882, 72, 14862, 390, 1143, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06123231747828492, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.0012842196738347411}, {"id": 2862, "seek": 1201200, "start": 12012.0, "end": 12016.0, "text": " We can see that it was just used because github says it was used within the last day.", "tokens": [50364, 492, 393, 536, 300, 309, 390, 445, 1143, 570, 290, 355, 836, 1619, 309, 390, 1143, 1951, 264, 1036, 786, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04574651361625885, "compression_ratio": 1.6186770428015564, "no_speech_prob": 0.0028004604391753674}, {"id": 2863, "seek": 1201200, "start": 12016.0, "end": 12021.0, "text": " Using this token should help lift some of the rate limits for github access.", "tokens": [50564, 11142, 341, 14862, 820, 854, 5533, 512, 295, 264, 3314, 10406, 337, 290, 355, 836, 2105, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04574651361625885, "compression_ratio": 1.6186770428015564, "no_speech_prob": 0.0028004604391753674}, {"id": 2864, "seek": 1201200, "start": 12021.0, "end": 12028.0, "text": " And it's also nice because it allows github to control who's accessing their APIs.", "tokens": [50814, 400, 309, 311, 611, 1481, 570, 309, 4045, 290, 355, 836, 281, 1969, 567, 311, 26440, 641, 21445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04574651361625885, "compression_ratio": 1.6186770428015564, "no_speech_prob": 0.0028004604391753674}, {"id": 2865, "seek": 1201200, "start": 12028.0, "end": 12032.0, "text": " In the last video, we installed NBViewer using Docker.", "tokens": [51164, 682, 264, 1036, 960, 11, 321, 8899, 426, 33, 30203, 260, 1228, 33772, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04574651361625885, "compression_ratio": 1.6186770428015564, "no_speech_prob": 0.0028004604391753674}, {"id": 2866, "seek": 1201200, "start": 12032.0, "end": 12034.0, "text": " This is great for most use cases.", "tokens": [51364, 639, 307, 869, 337, 881, 764, 3331, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04574651361625885, "compression_ratio": 1.6186770428015564, "no_speech_prob": 0.0028004604391753674}, {"id": 2867, "seek": 1201200, "start": 12034.0, "end": 12039.0, "text": " However, sometimes it's necessary to maintain more control over the distribution.", "tokens": [51464, 2908, 11, 2171, 309, 311, 4818, 281, 6909, 544, 1969, 670, 264, 7316, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04574651361625885, "compression_ratio": 1.6186770428015564, "no_speech_prob": 0.0028004604391753674}, {"id": 2868, "seek": 1203900, "start": 12039.0, "end": 12043.0, "text": " To do this, you can install NBViewer from source.", "tokens": [50364, 1407, 360, 341, 11, 291, 393, 3625, 426, 33, 30203, 260, 490, 4009, 13, 50564], "temperature": 0.0, "avg_logprob": -0.052117884159088135, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.04669762775301933}, {"id": 2869, "seek": 1203900, "start": 12043.0, "end": 12045.0, "text": " This will allow you to do two things.", "tokens": [50564, 639, 486, 2089, 291, 281, 360, 732, 721, 13, 50664], "temperature": 0.0, "avg_logprob": -0.052117884159088135, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.04669762775301933}, {"id": 2870, "seek": 1203900, "start": 12045.0, "end": 12050.0, "text": " One, it will allow you to control what dependencies NBViewer is using.", "tokens": [50664, 1485, 11, 309, 486, 2089, 291, 281, 1969, 437, 36606, 426, 33, 30203, 260, 307, 1228, 13, 50914], "temperature": 0.0, "avg_logprob": -0.052117884159088135, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.04669762775301933}, {"id": 2871, "seek": 1203900, "start": 12050.0, "end": 12060.0, "text": " And two, it will allow you to modify NBViewer's source code directly, including installing additional extensions without having to recompile the Docker image.", "tokens": [50914, 400, 732, 11, 309, 486, 2089, 291, 281, 16927, 426, 33, 30203, 260, 311, 4009, 3089, 3838, 11, 3009, 20762, 4497, 25129, 1553, 1419, 281, 48000, 794, 264, 33772, 3256, 13, 51414], "temperature": 0.0, "avg_logprob": -0.052117884159088135, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.04669762775301933}, {"id": 2872, "seek": 1203900, "start": 12060.0, "end": 12063.0, "text": " The first step is to clone the NBViewer repository.", "tokens": [51414, 440, 700, 1823, 307, 281, 26506, 264, 426, 33, 30203, 260, 25841, 13, 51564], "temperature": 0.0, "avg_logprob": -0.052117884159088135, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.04669762775301933}, {"id": 2873, "seek": 1206300, "start": 12063.0, "end": 12073.0, "text": " You can either clone the upstream fork, like I will do here, or you can clone your own fork.", "tokens": [50364, 509, 393, 2139, 26506, 264, 33915, 17716, 11, 411, 286, 486, 360, 510, 11, 420, 291, 393, 26506, 428, 1065, 17716, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1167000025919039, "compression_ratio": 1.4277456647398843, "no_speech_prob": 0.03258081153035164}, {"id": 2874, "seek": 1206300, "start": 12073.0, "end": 12077.0, "text": " Once NBViewer has finished cloning, cd into that directory.", "tokens": [50864, 3443, 426, 33, 30203, 260, 575, 4335, 596, 16638, 11, 269, 67, 666, 300, 21120, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1167000025919039, "compression_ratio": 1.4277456647398843, "no_speech_prob": 0.03258081153035164}, {"id": 2875, "seek": 1206300, "start": 12077.0, "end": 12085.0, "text": " Now run pip install-r requirements dev.txt.", "tokens": [51064, 823, 1190, 8489, 3625, 12, 81, 7728, 1905, 13, 83, 734, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1167000025919039, "compression_ratio": 1.4277456647398843, "no_speech_prob": 0.03258081153035164}, {"id": 2876, "seek": 1206300, "start": 12085.0, "end": 12092.0, "text": " Next run npm space install, then run invoke bower.", "tokens": [51464, 3087, 1190, 297, 14395, 1901, 3625, 11, 550, 1190, 41117, 272, 968, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1167000025919039, "compression_ratio": 1.4277456647398843, "no_speech_prob": 0.03258081153035164}, {"id": 2877, "seek": 1209200, "start": 12092.0, "end": 12094.0, "text": " This is installing the static assets.", "tokens": [50364, 639, 307, 20762, 264, 13437, 9769, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2878, "seek": 1209200, "start": 12094.0, "end": 12099.0, "text": " Next run invoke less, which will compile the less into CSS.", "tokens": [50464, 3087, 1190, 41117, 1570, 11, 597, 486, 31413, 264, 1570, 666, 24387, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2879, "seek": 1209200, "start": 12099.0, "end": 12101.0, "text": " CSS is what styles NBViewer.", "tokens": [50714, 24387, 307, 437, 13273, 426, 33, 30203, 260, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2880, "seek": 1209200, "start": 12101.0, "end": 12103.0, "text": " I've cleared my console.", "tokens": [50814, 286, 600, 19725, 452, 11076, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2881, "seek": 1209200, "start": 12103.0, "end": 12106.0, "text": " Now I'm going to run pip install markdown.", "tokens": [50914, 823, 286, 478, 516, 281, 1190, 8489, 3625, 1491, 5093, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2882, "seek": 1209200, "start": 12106.0, "end": 12111.0, "text": " Once that finishes, I should be able to launch NBViewer.", "tokens": [51064, 3443, 300, 23615, 11, 286, 820, 312, 1075, 281, 4025, 426, 33, 30203, 260, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2883, "seek": 1209200, "start": 12111.0, "end": 12115.0, "text": " Now I can access NBViewer using localhost.", "tokens": [51314, 823, 286, 393, 2105, 426, 33, 30203, 260, 1228, 2654, 6037, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2884, "seek": 1209200, "start": 12115.0, "end": 12119.0, "text": " To verify that this is actually running locally, let's try changing some of the code.", "tokens": [51514, 1407, 16888, 300, 341, 307, 767, 2614, 16143, 11, 718, 311, 853, 4473, 512, 295, 264, 3089, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2885, "seek": 1209200, "start": 12119.0, "end": 12121.0, "text": " Let's change the title.", "tokens": [51714, 961, 311, 1319, 264, 4876, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05896809162237705, "compression_ratio": 1.5905511811023623, "no_speech_prob": 0.0033757647033780813}, {"id": 2886, "seek": 1212100, "start": 12121.0, "end": 12124.0, "text": " I'm going to hit ctrl-c to stop the server.", "tokens": [50364, 286, 478, 516, 281, 2045, 269, 28269, 12, 66, 281, 1590, 264, 7154, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2887, "seek": 1212100, "start": 12124.0, "end": 12127.0, "text": " I'm going to open up Adam in the NBViewer repository.", "tokens": [50514, 286, 478, 516, 281, 1269, 493, 7938, 294, 264, 426, 33, 30203, 260, 25841, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2888, "seek": 1212100, "start": 12127.0, "end": 12136.0, "text": " Once Adam opens, I'm going to open the NBViewer sub directory, the template sub folder, and then the index.html file.", "tokens": [50664, 3443, 7938, 9870, 11, 286, 478, 516, 281, 1269, 264, 426, 33, 30203, 260, 1422, 21120, 11, 264, 12379, 1422, 10820, 11, 293, 550, 264, 8186, 13, 357, 15480, 3991, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2889, "seek": 1212100, "start": 12136.0, "end": 12138.0, "text": " Let's change the title of the website.", "tokens": [51114, 961, 311, 1319, 264, 4876, 295, 264, 3144, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2890, "seek": 1212100, "start": 12138.0, "end": 12141.0, "text": " We'll change NBViewer to myNBViewer.", "tokens": [51214, 492, 603, 1319, 426, 33, 30203, 260, 281, 452, 45, 33, 30203, 260, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2891, "seek": 1212100, "start": 12141.0, "end": 12143.0, "text": " We'll go ahead and save.", "tokens": [51364, 492, 603, 352, 2286, 293, 3155, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2892, "seek": 1212100, "start": 12143.0, "end": 12147.0, "text": " Editing these templates directly is actually not the best way to modify NBViewer,", "tokens": [51464, 3977, 1748, 613, 21165, 3838, 307, 767, 406, 264, 1151, 636, 281, 16927, 426, 33, 30203, 260, 11, 51664], "temperature": 0.0, "avg_logprob": -0.08261886719734438, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.009409253485500813}, {"id": 2893, "seek": 1214700, "start": 12147.0, "end": 12151.0, "text": " but we'll do it for now just to verify that we've installed from source.", "tokens": [50364, 457, 321, 603, 360, 309, 337, 586, 445, 281, 16888, 300, 321, 600, 8899, 490, 4009, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04832167301363158, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.0229713823646307}, {"id": 2894, "seek": 1214700, "start": 12151.0, "end": 12155.0, "text": " Now back at the terminal, go ahead and relaunch the server.", "tokens": [50564, 823, 646, 412, 264, 14709, 11, 352, 2286, 293, 5195, 1680, 264, 7154, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04832167301363158, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.0229713823646307}, {"id": 2895, "seek": 1214700, "start": 12155.0, "end": 12159.0, "text": " Back in your web browser, refresh the page.", "tokens": [50764, 5833, 294, 428, 3670, 11185, 11, 15134, 264, 3028, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04832167301363158, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.0229713823646307}, {"id": 2896, "seek": 1214700, "start": 12159.0, "end": 12166.0, "text": " When you see the title update to myNBViewer, you know that the changes that we made to the template file were loaded.", "tokens": [50964, 1133, 291, 536, 264, 4876, 5623, 281, 452, 45, 33, 30203, 260, 11, 291, 458, 300, 264, 2962, 300, 321, 1027, 281, 264, 12379, 3991, 645, 13210, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04832167301363158, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.0229713823646307}, {"id": 2897, "seek": 1214700, "start": 12166.0, "end": 12171.0, "text": " If when you refresh the page, the title doesn't change, try emptying your web browser's cache.", "tokens": [51314, 759, 562, 291, 15134, 264, 3028, 11, 264, 4876, 1177, 380, 1319, 11, 853, 6113, 1840, 428, 3670, 11185, 311, 19459, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04832167301363158, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.0229713823646307}, {"id": 2898, "seek": 1217100, "start": 12171.0, "end": 12178.0, "text": " If you want a quicker way to see if this is the problem, open an incognito tab and then navigate to the NBViewer web page.", "tokens": [50364, 759, 291, 528, 257, 16255, 636, 281, 536, 498, 341, 307, 264, 1154, 11, 1269, 364, 834, 2912, 3528, 4421, 293, 550, 12350, 281, 264, 426, 33, 30203, 260, 3670, 3028, 13, 50714], "temperature": 0.0, "avg_logprob": -0.050254019823941315, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.3071240782737732}, {"id": 2899, "seek": 1217100, "start": 12178.0, "end": 12181.0, "text": " The incognito tab should prevent the web browser from caching.", "tokens": [50714, 440, 834, 2912, 3528, 4421, 820, 4871, 264, 3670, 11185, 490, 269, 2834, 13, 50864], "temperature": 0.0, "avg_logprob": -0.050254019823941315, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.3071240782737732}, {"id": 2900, "seek": 1217100, "start": 12181.0, "end": 12189.0, "text": " Often when you do web app development, caching causes problems because it doesn't let you see your most recent changes to the code.", "tokens": [50864, 20043, 562, 291, 360, 3670, 724, 3250, 11, 269, 2834, 7700, 2740, 570, 309, 1177, 380, 718, 291, 536, 428, 881, 5162, 2962, 281, 264, 3089, 13, 51264], "temperature": 0.0, "avg_logprob": -0.050254019823941315, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.3071240782737732}, {"id": 2901, "seek": 1217100, "start": 12189.0, "end": 12196.0, "text": " Earlier, I had mentioned that modifying the template directly in NBViewer's source was not the right way to modify the template.", "tokens": [51264, 24552, 11, 286, 632, 2835, 300, 42626, 264, 12379, 3838, 294, 426, 33, 30203, 260, 311, 4009, 390, 406, 264, 558, 636, 281, 16927, 264, 12379, 13, 51614], "temperature": 0.0, "avg_logprob": -0.050254019823941315, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.3071240782737732}, {"id": 2902, "seek": 1219600, "start": 12196.0, "end": 12202.0, "text": " A better way would be to configure NBViewer's template directory to a different directory,", "tokens": [50364, 316, 1101, 636, 576, 312, 281, 22162, 426, 33, 30203, 260, 311, 12379, 21120, 281, 257, 819, 21120, 11, 50664], "temperature": 0.0, "avg_logprob": -0.040131516975931605, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.07367072999477386}, {"id": 2903, "seek": 1219600, "start": 12202.0, "end": 12209.0, "text": " have it load from one of your own custom templates, which inherit it from the template included with NBViewer.", "tokens": [50664, 362, 309, 3677, 490, 472, 295, 428, 1065, 2375, 21165, 11, 597, 21389, 309, 490, 264, 12379, 5556, 365, 426, 33, 30203, 260, 13, 51014], "temperature": 0.0, "avg_logprob": -0.040131516975931605, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.07367072999477386}, {"id": 2904, "seek": 1219600, "start": 12209.0, "end": 12217.0, "text": " In the following videos, we'll look at how we can do that in addition to customizing NBViewer different ways.", "tokens": [51014, 682, 264, 3480, 2145, 11, 321, 603, 574, 412, 577, 321, 393, 360, 300, 294, 4500, 281, 2375, 3319, 426, 33, 30203, 260, 819, 2098, 13, 51414], "temperature": 0.0, "avg_logprob": -0.040131516975931605, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.07367072999477386}, {"id": 2905, "seek": 1219600, "start": 12217.0, "end": 12223.0, "text": " In this video, we'll look at what we can do just by extending the NBViewer templates.", "tokens": [51414, 682, 341, 960, 11, 321, 603, 574, 412, 437, 321, 393, 360, 445, 538, 24360, 264, 426, 33, 30203, 260, 21165, 13, 51714], "temperature": 0.0, "avg_logprob": -0.040131516975931605, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.07367072999477386}, {"id": 2906, "seek": 1222300, "start": 12223.0, "end": 12227.0, "text": " Before we get started, we need to remove the hack that we added in the last video.", "tokens": [50364, 4546, 321, 483, 1409, 11, 321, 643, 281, 4159, 264, 10339, 300, 321, 3869, 294, 264, 1036, 960, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0696984712068025, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.05660809949040413}, {"id": 2907, "seek": 1222300, "start": 12227.0, "end": 12231.0, "text": " I'm going to go ahead and launch Adam from within the NBViewer repository.", "tokens": [50564, 286, 478, 516, 281, 352, 2286, 293, 4025, 7938, 490, 1951, 264, 426, 33, 30203, 260, 25841, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0696984712068025, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.05660809949040413}, {"id": 2908, "seek": 1222300, "start": 12231.0, "end": 12239.0, "text": " Once Adam's launched, I'll open the NBViewer subfolder, then the template subfolder, and then index.html.", "tokens": [50764, 3443, 7938, 311, 8730, 11, 286, 603, 1269, 264, 426, 33, 30203, 260, 1422, 18353, 260, 11, 550, 264, 12379, 1422, 18353, 260, 11, 293, 550, 8186, 13, 357, 15480, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0696984712068025, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.05660809949040413}, {"id": 2909, "seek": 1222300, "start": 12239.0, "end": 12242.0, "text": " In there, I'll remove my space.", "tokens": [51164, 682, 456, 11, 286, 603, 4159, 452, 1901, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0696984712068025, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.05660809949040413}, {"id": 2910, "seek": 1222300, "start": 12242.0, "end": 12244.0, "text": " Now, I'll save the file.", "tokens": [51314, 823, 11, 286, 603, 3155, 264, 3991, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0696984712068025, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.05660809949040413}, {"id": 2911, "seek": 1222300, "start": 12244.0, "end": 12247.0, "text": " Let's see who loads this index.html file.", "tokens": [51414, 961, 311, 536, 567, 12668, 341, 8186, 13, 357, 15480, 3991, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0696984712068025, "compression_ratio": 1.6837209302325582, "no_speech_prob": 0.05660809949040413}, {"id": 2912, "seek": 1224700, "start": 12247.0, "end": 12256.0, "text": " I'm going to open the find in project dialog by hitting command shift F, which is control shift F on Linux and Windows.", "tokens": [50364, 286, 478, 516, 281, 1269, 264, 915, 294, 1716, 19308, 538, 8850, 5622, 5513, 479, 11, 597, 307, 1969, 5513, 479, 322, 18734, 293, 8591, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07900634653428022, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.0075761559419333935}, {"id": 2913, "seek": 1224700, "start": 12256.0, "end": 12261.0, "text": " Looks like the template is rendered here in the index handler method.", "tokens": [50814, 10027, 411, 264, 12379, 307, 28748, 510, 294, 264, 8186, 41967, 3170, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07900634653428022, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.0075761559419333935}, {"id": 2914, "seek": 1224700, "start": 12261.0, "end": 12267.0, "text": " Let's see where the render template method searches for index.html.", "tokens": [51064, 961, 311, 536, 689, 264, 15529, 12379, 3170, 26701, 337, 8186, 13, 357, 15480, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07900634653428022, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.0075761559419333935}, {"id": 2915, "seek": 1224700, "start": 12267.0, "end": 12273.0, "text": " Looks like the definition of render template is in the NBViewer provider's base.py class.", "tokens": [51364, 10027, 411, 264, 7123, 295, 15529, 12379, 307, 294, 264, 426, 33, 30203, 260, 12398, 311, 3096, 13, 8200, 1508, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07900634653428022, "compression_ratio": 1.6367924528301887, "no_speech_prob": 0.0075761559419333935}, {"id": 2916, "seek": 1227300, "start": 12273.0, "end": 12276.0, "text": " The get template method is used to load the template.", "tokens": [50364, 440, 483, 12379, 3170, 307, 1143, 281, 3677, 264, 12379, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08617689779826573, "compression_ratio": 1.9724770642201834, "no_speech_prob": 0.006486940197646618}, {"id": 2917, "seek": 1227300, "start": 12276.0, "end": 12280.0, "text": " Inside the get template method, which is above the render template method,", "tokens": [50514, 15123, 264, 483, 12379, 3170, 11, 597, 307, 3673, 264, 15529, 12379, 3170, 11, 50714], "temperature": 0.0, "avg_logprob": -0.08617689779826573, "compression_ratio": 1.9724770642201834, "no_speech_prob": 0.006486940197646618}, {"id": 2918, "seek": 1227300, "start": 12280.0, "end": 12286.0, "text": " we can see that the Jinja2 environment has another get template method defined, which we call out to.", "tokens": [50714, 321, 393, 536, 300, 264, 10617, 2938, 17, 2823, 575, 1071, 483, 12379, 3170, 7642, 11, 597, 321, 818, 484, 281, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08617689779826573, "compression_ratio": 1.9724770642201834, "no_speech_prob": 0.006486940197646618}, {"id": 2919, "seek": 1227300, "start": 12286.0, "end": 12290.0, "text": " Let's see where this Jinja2 environment comes from.", "tokens": [51014, 961, 311, 536, 689, 341, 10617, 2938, 17, 2823, 1487, 490, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08617689779826573, "compression_ratio": 1.9724770642201834, "no_speech_prob": 0.006486940197646618}, {"id": 2920, "seek": 1227300, "start": 12290.0, "end": 12293.0, "text": " Looks like it's defined in app.py.", "tokens": [51214, 10027, 411, 309, 311, 7642, 294, 724, 13, 8200, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08617689779826573, "compression_ratio": 1.9724770642201834, "no_speech_prob": 0.006486940197646618}, {"id": 2921, "seek": 1227300, "start": 12293.0, "end": 12302.0, "text": " Scrolling up to see where nv is defined, we see nv is an instance of environment, which is imported from Jinja2.", "tokens": [51364, 2747, 18688, 493, 281, 536, 689, 297, 85, 307, 7642, 11, 321, 536, 297, 85, 307, 364, 5197, 295, 2823, 11, 597, 307, 25524, 490, 10617, 2938, 17, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08617689779826573, "compression_ratio": 1.9724770642201834, "no_speech_prob": 0.006486940197646618}, {"id": 2922, "seek": 1230200, "start": 12303.0, "end": 12308.0, "text": " The template loader is a file system loader, which loads from template paths.", "tokens": [50414, 440, 12379, 3677, 260, 307, 257, 3991, 1185, 3677, 260, 11, 597, 12668, 490, 12379, 14518, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07633696851276216, "compression_ratio": 1.7815533980582525, "no_speech_prob": 0.000910979404579848}, {"id": 2923, "seek": 1230200, "start": 12308.0, "end": 12313.0, "text": " Template paths is hard coded to the repository directory template subdirectory.", "tokens": [50664, 39563, 473, 14518, 307, 1152, 34874, 281, 264, 25841, 21120, 12379, 31662, 11890, 827, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07633696851276216, "compression_ratio": 1.7815533980582525, "no_speech_prob": 0.000910979404579848}, {"id": 2924, "seek": 1230200, "start": 12313.0, "end": 12321.0, "text": " However, if you specify a custom template path using the nbViewer underscore template underscore path environment variable,", "tokens": [50914, 2908, 11, 498, 291, 16500, 257, 2375, 12379, 3100, 1228, 264, 297, 65, 30203, 260, 37556, 12379, 37556, 3100, 2823, 7006, 11, 51314], "temperature": 0.0, "avg_logprob": -0.07633696851276216, "compression_ratio": 1.7815533980582525, "no_speech_prob": 0.000910979404579848}, {"id": 2925, "seek": 1230200, "start": 12321.0, "end": 12328.0, "text": " it gets propended to a list of paths, which then is used as the higher priority path.", "tokens": [51314, 309, 2170, 2365, 3502, 281, 257, 1329, 295, 14518, 11, 597, 550, 307, 1143, 382, 264, 2946, 9365, 3100, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07633696851276216, "compression_ratio": 1.7815533980582525, "no_speech_prob": 0.000910979404579848}, {"id": 2926, "seek": 1232800, "start": 12328.0, "end": 12333.0, "text": " So we can set a custom template search path just by setting that environment variable.", "tokens": [50364, 407, 321, 393, 992, 257, 2375, 12379, 3164, 3100, 445, 538, 3287, 300, 2823, 7006, 13, 50614], "temperature": 0.0, "avg_logprob": -0.059197542618732064, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.001324881799519062}, {"id": 2927, "seek": 1232800, "start": 12333.0, "end": 12337.0, "text": " Knowing this, we can set the nbViewer template path.", "tokens": [50614, 25499, 341, 11, 321, 393, 992, 264, 297, 65, 30203, 260, 12379, 3100, 13, 50814], "temperature": 0.0, "avg_logprob": -0.059197542618732064, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.001324881799519062}, {"id": 2928, "seek": 1232800, "start": 12337.0, "end": 12344.0, "text": " I'm going to set it to the nbViewer underscore templates subfolder of my home directory.", "tokens": [50814, 286, 478, 516, 281, 992, 309, 281, 264, 297, 65, 30203, 260, 37556, 21165, 1422, 18353, 260, 295, 452, 1280, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.059197542618732064, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.001324881799519062}, {"id": 2929, "seek": 1232800, "start": 12344.0, "end": 12347.0, "text": " Now I'm going to create that directory.", "tokens": [51164, 823, 286, 478, 516, 281, 1884, 300, 21120, 13, 51314], "temperature": 0.0, "avg_logprob": -0.059197542618732064, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.001324881799519062}, {"id": 2930, "seek": 1232800, "start": 12347.0, "end": 12351.0, "text": " I'll cd into it and open Adam.", "tokens": [51314, 286, 603, 269, 67, 666, 309, 293, 1269, 7938, 13, 51514], "temperature": 0.0, "avg_logprob": -0.059197542618732064, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.001324881799519062}, {"id": 2931, "seek": 1232800, "start": 12351.0, "end": 12355.0, "text": " In Adam, I'll create an index.html file.", "tokens": [51514, 682, 7938, 11, 286, 603, 1884, 364, 8186, 13, 357, 15480, 3991, 13, 51714], "temperature": 0.0, "avg_logprob": -0.059197542618732064, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.001324881799519062}, {"id": 2932, "seek": 1235500, "start": 12355.0, "end": 12362.0, "text": " This file will override the index.html file in the nbViewer templates folder.", "tokens": [50364, 639, 3991, 486, 42321, 264, 8186, 13, 357, 15480, 3991, 294, 264, 297, 65, 30203, 260, 21165, 10820, 13, 50714], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2933, "seek": 1235500, "start": 12362.0, "end": 12365.0, "text": " For now, I'll just write hello world and save the file.", "tokens": [50714, 1171, 586, 11, 286, 603, 445, 2464, 7751, 1002, 293, 3155, 264, 3991, 13, 50864], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2934, "seek": 1235500, "start": 12365.0, "end": 12371.0, "text": " Now, switching back to the terminal, I'll cd back into the nbViewer repository.", "tokens": [50864, 823, 11, 16493, 646, 281, 264, 14709, 11, 286, 603, 269, 67, 646, 666, 264, 297, 65, 30203, 260, 25841, 13, 51164], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2935, "seek": 1235500, "start": 12371.0, "end": 12375.0, "text": " I'll launch nbViewer using the same command from earlier.", "tokens": [51164, 286, 603, 4025, 297, 65, 30203, 260, 1228, 264, 912, 5622, 490, 3071, 13, 51364], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2936, "seek": 1235500, "start": 12375.0, "end": 12379.0, "text": " Now when I try to access nbViewer, the page just says hello world.", "tokens": [51364, 823, 562, 286, 853, 281, 2105, 297, 65, 30203, 260, 11, 264, 3028, 445, 1619, 7751, 1002, 13, 51564], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2937, "seek": 1235500, "start": 12379.0, "end": 12381.0, "text": " This means that our template was loaded successfully.", "tokens": [51564, 639, 1355, 300, 527, 12379, 390, 13210, 10727, 13, 51664], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2938, "seek": 1235500, "start": 12381.0, "end": 12383.0, "text": " Let's try to complicate things.", "tokens": [51664, 961, 311, 853, 281, 1209, 8700, 721, 13, 51764], "temperature": 0.0, "avg_logprob": -0.052351795324758324, "compression_ratio": 1.7028112449799198, "no_speech_prob": 0.0010321232257410884}, {"id": 2939, "seek": 1238300, "start": 12383.0, "end": 12388.0, "text": " Back inside the Adam that is opened in the nbViewer repository,", "tokens": [50364, 5833, 1854, 264, 7938, 300, 307, 5625, 294, 264, 297, 65, 30203, 260, 25841, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2940, "seek": 1238300, "start": 12388.0, "end": 12393.0, "text": " I'm going to go to the templates folder and open index.html again.", "tokens": [50614, 286, 478, 516, 281, 352, 281, 264, 21165, 10820, 293, 1269, 8186, 13, 357, 15480, 797, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2941, "seek": 1238300, "start": 12393.0, "end": 12398.0, "text": " nbViewer uses the Jinja templating library to render its HTML pages.", "tokens": [50864, 297, 65, 30203, 260, 4960, 264, 10617, 2938, 9100, 990, 6405, 281, 15529, 1080, 17995, 7183, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2942, "seek": 1238300, "start": 12398.0, "end": 12401.0, "text": " This funky syntax extends and block body.", "tokens": [51114, 639, 33499, 28431, 26448, 293, 3461, 1772, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2943, "seek": 1238300, "start": 12401.0, "end": 12404.0, "text": " Those are Jinja 2 specific keywords.", "tokens": [51264, 3950, 366, 10617, 2938, 568, 2685, 21009, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2944, "seek": 1238300, "start": 12404.0, "end": 12407.0, "text": " The rest of the code that you see is vanilla HTML.", "tokens": [51414, 440, 1472, 295, 264, 3089, 300, 291, 536, 307, 17528, 17995, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2945, "seek": 1238300, "start": 12407.0, "end": 12410.0, "text": " Let's go ahead and copy all the contents of this file.", "tokens": [51564, 961, 311, 352, 2286, 293, 5055, 439, 264, 15768, 295, 341, 3991, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10414065954820165, "compression_ratio": 1.5609756097560976, "no_speech_prob": 0.0034828323405236006}, {"id": 2946, "seek": 1241000, "start": 12410.0, "end": 12417.0, "text": " Back into our index.html file inside the nbViewer templates folder.", "tokens": [50364, 5833, 666, 527, 8186, 13, 357, 15480, 3991, 1854, 264, 297, 65, 30203, 260, 21165, 10820, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06168719088093618, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00628808094188571}, {"id": 2947, "seek": 1241000, "start": 12417.0, "end": 12421.0, "text": " Now let's change the title here and save.", "tokens": [50714, 823, 718, 311, 1319, 264, 4876, 510, 293, 3155, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06168719088093618, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00628808094188571}, {"id": 2948, "seek": 1241000, "start": 12421.0, "end": 12426.0, "text": " If we've done this correctly, we'll have changed the look of the nbViewer landing page", "tokens": [50914, 759, 321, 600, 1096, 341, 8944, 11, 321, 603, 362, 3105, 264, 574, 295, 264, 297, 65, 30203, 260, 11202, 3028, 51164], "temperature": 0.0, "avg_logprob": -0.06168719088093618, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00628808094188571}, {"id": 2949, "seek": 1241000, "start": 12426.0, "end": 12429.0, "text": " without actually modifying nbViewer's source code.", "tokens": [51164, 1553, 767, 42626, 297, 65, 30203, 260, 311, 4009, 3089, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06168719088093618, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00628808094188571}, {"id": 2950, "seek": 1241000, "start": 12429.0, "end": 12436.0, "text": " I refreshed the nbViewer page and it looks like our custom template was loaded.", "tokens": [51314, 286, 46330, 264, 297, 65, 30203, 260, 3028, 293, 309, 1542, 411, 527, 2375, 12379, 390, 13210, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06168719088093618, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.00628808094188571}, {"id": 2951, "seek": 1243600, "start": 12436.0, "end": 12441.0, "text": " To give ourselves a target, let's try to set up an O'Reilly themed nbViewer.", "tokens": [50364, 1407, 976, 4175, 257, 3779, 11, 718, 311, 853, 281, 992, 493, 364, 422, 6, 8524, 6917, 33920, 297, 65, 30203, 260, 13, 50614], "temperature": 0.0, "avg_logprob": -0.070129847122451, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.004006506875157356}, {"id": 2952, "seek": 1243600, "start": 12441.0, "end": 12445.0, "text": " Our O'Reilly nbViewer should look like its O'Reilly's nbViewer,", "tokens": [50614, 2621, 422, 6, 8524, 6917, 297, 65, 30203, 260, 820, 574, 411, 1080, 422, 6, 8524, 6917, 311, 297, 65, 30203, 260, 11, 50814], "temperature": 0.0, "avg_logprob": -0.070129847122451, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.004006506875157356}, {"id": 2953, "seek": 1243600, "start": 12445.0, "end": 12448.0, "text": " but also host O'Reilly content.", "tokens": [50814, 457, 611, 3975, 422, 6, 8524, 6917, 2701, 13, 50964], "temperature": 0.0, "avg_logprob": -0.070129847122451, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.004006506875157356}, {"id": 2954, "seek": 1243600, "start": 12448.0, "end": 12453.0, "text": " First, let's change the basic index template that we created in the last video.", "tokens": [50964, 2386, 11, 718, 311, 1319, 264, 3875, 8186, 12379, 300, 321, 2942, 294, 264, 1036, 960, 13, 51214], "temperature": 0.0, "avg_logprob": -0.070129847122451, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.004006506875157356}, {"id": 2955, "seek": 1243600, "start": 12453.0, "end": 12459.0, "text": " To do so, I'll open up the nbViewer templates folder that we created in my home directory.", "tokens": [51214, 1407, 360, 370, 11, 286, 603, 1269, 493, 264, 297, 65, 30203, 260, 21165, 10820, 300, 321, 2942, 294, 452, 1280, 21120, 13, 51514], "temperature": 0.0, "avg_logprob": -0.070129847122451, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.004006506875157356}, {"id": 2956, "seek": 1243600, "start": 12459.0, "end": 12463.0, "text": " Now I'll open Adam in that directory.", "tokens": [51514, 823, 286, 603, 1269, 7938, 294, 300, 21120, 13, 51714], "temperature": 0.0, "avg_logprob": -0.070129847122451, "compression_ratio": 1.7397260273972603, "no_speech_prob": 0.004006506875157356}, {"id": 2957, "seek": 1246300, "start": 12463.0, "end": 12467.0, "text": " I'll change the title to O'Reilly notebooks.", "tokens": [50364, 286, 603, 1319, 264, 4876, 281, 422, 6, 8524, 6917, 43782, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2958, "seek": 1246300, "start": 12467.0, "end": 12471.0, "text": " We'll also change the descriptive paragraph below.", "tokens": [50564, 492, 603, 611, 1319, 264, 42585, 18865, 2507, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2959, "seek": 1246300, "start": 12471.0, "end": 12474.0, "text": " Eventually, we won't want to be hosting notebooks from GitHub,", "tokens": [50764, 17586, 11, 321, 1582, 380, 528, 281, 312, 16058, 43782, 490, 23331, 11, 50914], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2960, "seek": 1246300, "start": 12474.0, "end": 12478.0, "text": " so let's change the placeholder text to reflect that.", "tokens": [50914, 370, 718, 311, 1319, 264, 1081, 20480, 2487, 281, 5031, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2961, "seek": 1246300, "start": 12478.0, "end": 12480.0, "text": " Now I'll save and see how it looks.", "tokens": [51114, 823, 286, 603, 3155, 293, 536, 577, 309, 1542, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2962, "seek": 1246300, "start": 12480.0, "end": 12484.0, "text": " We can launch nbViewer using the same command that we used in the previous video.", "tokens": [51214, 492, 393, 4025, 297, 65, 30203, 260, 1228, 264, 912, 5622, 300, 321, 1143, 294, 264, 3894, 960, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2963, "seek": 1246300, "start": 12484.0, "end": 12486.0, "text": " I'll create a new tab of my terminal.", "tokens": [51414, 286, 603, 1884, 257, 777, 4421, 295, 452, 14709, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2964, "seek": 1246300, "start": 12486.0, "end": 12492.0, "text": " Before starting nbViewer, I need to set the environment variable again for the custom templates.", "tokens": [51514, 4546, 2891, 297, 65, 30203, 260, 11, 286, 643, 281, 992, 264, 2823, 7006, 797, 337, 264, 2375, 21165, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04322816492096195, "compression_ratio": 1.6089965397923875, "no_speech_prob": 0.00018521249876357615}, {"id": 2965, "seek": 1249200, "start": 12493.0, "end": 12496.0, "text": " Now I can launch the server.", "tokens": [50414, 823, 286, 393, 4025, 264, 7154, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2966, "seek": 1249200, "start": 12496.0, "end": 12498.0, "text": " It looks like our change is rendered.", "tokens": [50564, 467, 1542, 411, 527, 1319, 307, 28748, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2967, "seek": 1249200, "start": 12498.0, "end": 12501.0, "text": " However, we should probably change this logo in the top left,", "tokens": [50664, 2908, 11, 321, 820, 1391, 1319, 341, 9699, 294, 264, 1192, 1411, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2968, "seek": 1249200, "start": 12501.0, "end": 12504.0, "text": " and also remove this link to Jupyter.", "tokens": [50814, 293, 611, 4159, 341, 2113, 281, 22125, 88, 391, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2969, "seek": 1249200, "start": 12504.0, "end": 12507.0, "text": " Let's scroll down to see if there's anything else we need to change.", "tokens": [50964, 961, 311, 11369, 760, 281, 536, 498, 456, 311, 1340, 1646, 321, 643, 281, 1319, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2970, "seek": 1249200, "start": 12507.0, "end": 12512.0, "text": " We'll have to change this section of showcased notebooks.", "tokens": [51114, 492, 603, 362, 281, 1319, 341, 3541, 295, 29794, 1937, 43782, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2971, "seek": 1249200, "start": 12512.0, "end": 12516.0, "text": " And at the very bottom, it looks like we'll want to change the footer.", "tokens": [51364, 400, 412, 264, 588, 2767, 11, 309, 1542, 411, 321, 603, 528, 281, 1319, 264, 2671, 260, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2972, "seek": 1249200, "start": 12516.0, "end": 12519.0, "text": " Lastly, we should probably change the styling", "tokens": [51564, 18072, 11, 321, 820, 1391, 1319, 264, 27944, 51714], "temperature": 0.0, "avg_logprob": -0.09303660826249556, "compression_ratio": 1.7521367521367521, "no_speech_prob": 0.0007671879138797522}, {"id": 2973, "seek": 1251900, "start": 12519.0, "end": 12522.0, "text": " and maybe use JavaScript to spiff up the page a bit.", "tokens": [50364, 293, 1310, 764, 15778, 281, 637, 3661, 493, 264, 3028, 257, 857, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2974, "seek": 1251900, "start": 12522.0, "end": 12525.0, "text": " First, let's see if we can change the header and footer.", "tokens": [50514, 2386, 11, 718, 311, 536, 498, 321, 393, 1319, 264, 23117, 293, 2671, 260, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2975, "seek": 1251900, "start": 12525.0, "end": 12529.0, "text": " Let's go back to the index.html file in our custom template folder.", "tokens": [50664, 961, 311, 352, 646, 281, 264, 8186, 13, 357, 15480, 3991, 294, 527, 2375, 12379, 10820, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2976, "seek": 1251900, "start": 12529.0, "end": 12534.0, "text": " Looking at the index.html file, it looks like layout.html is extended", "tokens": [50864, 11053, 412, 264, 8186, 13, 357, 15480, 3991, 11, 309, 1542, 411, 13333, 13, 357, 15480, 307, 10913, 51114], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2977, "seek": 1251900, "start": 12534.0, "end": 12536.0, "text": " for the basic layout of the page.", "tokens": [51114, 337, 264, 3875, 13333, 295, 264, 3028, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2978, "seek": 1251900, "start": 12536.0, "end": 12537.0, "text": " Let's open that.", "tokens": [51214, 961, 311, 1269, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2979, "seek": 1251900, "start": 12537.0, "end": 12540.0, "text": " It should be inside the nbViewer directory.", "tokens": [51264, 467, 820, 312, 1854, 264, 297, 65, 30203, 260, 21120, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2980, "seek": 1251900, "start": 12540.0, "end": 12544.0, "text": " Inside the nbViewer repository in the nbViewer subfolder,", "tokens": [51414, 15123, 264, 297, 65, 30203, 260, 25841, 294, 264, 297, 65, 30203, 260, 1422, 18353, 260, 11, 51614], "temperature": 0.0, "avg_logprob": -0.05655956659160676, "compression_ratio": 1.7316017316017316, "no_speech_prob": 0.0071196663193404675}, {"id": 2981, "seek": 1254400, "start": 12545.0, "end": 12549.0, "text": " under templates, we can find layout.html.", "tokens": [50414, 833, 21165, 11, 321, 393, 915, 13333, 13, 357, 15480, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2982, "seek": 1254400, "start": 12549.0, "end": 12552.0, "text": " Like we did with index, let's copy everything in here.", "tokens": [50614, 1743, 321, 630, 365, 8186, 11, 718, 311, 5055, 1203, 294, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2983, "seek": 1254400, "start": 12552.0, "end": 12556.0, "text": " Then, back inside our custom nbViewer templates folder,", "tokens": [50764, 1396, 11, 646, 1854, 527, 2375, 297, 65, 30203, 260, 21165, 10820, 11, 50964], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2984, "seek": 1254400, "start": 12556.0, "end": 12559.0, "text": " let's create a layout.html.", "tokens": [50964, 718, 311, 1884, 257, 13333, 13, 357, 15480, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2985, "seek": 1254400, "start": 12559.0, "end": 12563.0, "text": " Here, I'll paste all the contents from the other layout.html.", "tokens": [51114, 1692, 11, 286, 603, 9163, 439, 264, 15768, 490, 264, 661, 13333, 13, 357, 15480, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2986, "seek": 1254400, "start": 12563.0, "end": 12565.0, "text": " Let's remove this link to Google Analytics,", "tokens": [51314, 961, 311, 4159, 341, 2113, 281, 3329, 25944, 11, 51414], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2987, "seek": 1254400, "start": 12565.0, "end": 12571.0, "text": " because this is the Google Analytics for the Jupyter deployment of nbViewer.", "tokens": [51414, 570, 341, 307, 264, 3329, 25944, 337, 264, 22125, 88, 391, 19317, 295, 297, 65, 30203, 260, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06034173965454102, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.019120847806334496}, {"id": 2988, "seek": 1257100, "start": 12571.0, "end": 12574.0, "text": " Also, we'll want to get rid of these links to Fastly", "tokens": [50364, 2743, 11, 321, 603, 528, 281, 483, 3973, 295, 613, 6123, 281, 15968, 356, 50514], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2989, "seek": 1257100, "start": 12574.0, "end": 12579.0, "text": " and change the Rackspace link to O'Reilly.", "tokens": [50514, 293, 1319, 264, 497, 501, 24824, 2113, 281, 422, 6, 8524, 6917, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2990, "seek": 1257100, "start": 12579.0, "end": 12583.0, "text": " Scrolling up, let's get rid of the text that says this website does not host notebooks.", "tokens": [50764, 2747, 18688, 493, 11, 718, 311, 483, 3973, 295, 264, 2487, 300, 1619, 341, 3144, 775, 406, 3975, 43782, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2991, "seek": 1257100, "start": 12583.0, "end": 12586.0, "text": " It only renders notebooks available on other websites,", "tokens": [50964, 467, 787, 6125, 433, 43782, 2435, 322, 661, 12891, 11, 51114], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2992, "seek": 1257100, "start": 12586.0, "end": 12591.0, "text": " because we're going to be using this pseudo-website to host O'Reilly notebooks.", "tokens": [51114, 570, 321, 434, 516, 281, 312, 1228, 341, 35899, 12, 826, 929, 642, 281, 3975, 422, 6, 8524, 6917, 43782, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2993, "seek": 1257100, "start": 12591.0, "end": 12595.0, "text": " Here's the link to Jupyter that we wanted to remove.", "tokens": [51364, 1692, 311, 264, 2113, 281, 22125, 88, 391, 300, 321, 1415, 281, 4159, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2994, "seek": 1257100, "start": 12595.0, "end": 12599.0, "text": " Lastly, we'll want to change the nav logo to O'Reilly's logo.", "tokens": [51564, 18072, 11, 321, 603, 528, 281, 1319, 264, 5947, 9699, 281, 422, 6, 8524, 6917, 311, 9699, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0910544546823653, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.008708379231393337}, {"id": 2995, "seek": 1259900, "start": 12599.0, "end": 12603.0, "text": " Let's go to O'Reilly's website to see if we can get the link to their logo.", "tokens": [50364, 961, 311, 352, 281, 422, 6, 8524, 6917, 311, 3144, 281, 536, 498, 321, 393, 483, 264, 2113, 281, 641, 9699, 13, 50564], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 2996, "seek": 1259900, "start": 12603.0, "end": 12607.0, "text": " I'm on O'Reilly's website now at www.oreilly.com.", "tokens": [50564, 286, 478, 322, 422, 6, 8524, 6917, 311, 3144, 586, 412, 12520, 13, 418, 6917, 13, 1112, 13, 50764], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 2997, "seek": 1259900, "start": 12607.0, "end": 12609.0, "text": " I like this logo in the top left-hand corner.", "tokens": [50764, 286, 411, 341, 9699, 294, 264, 1192, 1411, 12, 5543, 4538, 13, 50864], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 2998, "seek": 1259900, "start": 12609.0, "end": 12613.0, "text": " I'm going to right-click on it and click Copy Image URL.", "tokens": [50864, 286, 478, 516, 281, 558, 12, 18548, 322, 309, 293, 2052, 25653, 29903, 12905, 13, 51064], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 2999, "seek": 1259900, "start": 12613.0, "end": 12616.0, "text": " Back inside the layout.html file,", "tokens": [51064, 5833, 1854, 264, 13333, 13, 357, 15480, 3991, 11, 51214], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 3000, "seek": 1259900, "start": 12616.0, "end": 12623.0, "text": " I'm then going to paste that URL over the image URL for the existing nav logo.", "tokens": [51214, 286, 478, 550, 516, 281, 9163, 300, 12905, 670, 264, 3256, 12905, 337, 264, 6741, 5947, 9699, 13, 51564], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 3001, "seek": 1259900, "start": 12623.0, "end": 12626.0, "text": " We'll also get rid of the New Relic reference.", "tokens": [51564, 492, 603, 611, 483, 3973, 295, 264, 1873, 8738, 299, 6408, 13, 51714], "temperature": 0.0, "avg_logprob": -0.061857493197331664, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.006002032198011875}, {"id": 3002, "seek": 1262600, "start": 12626.0, "end": 12631.0, "text": " Let's save what we have and go back to the browser to see how it renders.", "tokens": [50364, 961, 311, 3155, 437, 321, 362, 293, 352, 646, 281, 264, 11185, 281, 536, 577, 309, 6125, 433, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3003, "seek": 1262600, "start": 12631.0, "end": 12635.0, "text": " Awesome! This is already looking a little more O'Reilly-like.", "tokens": [50614, 10391, 0, 639, 307, 1217, 1237, 257, 707, 544, 422, 6, 8524, 6917, 12, 4092, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3004, "seek": 1262600, "start": 12635.0, "end": 12637.0, "text": " We'll probably still want to change the color scheme,", "tokens": [50814, 492, 603, 1391, 920, 528, 281, 1319, 264, 2017, 12232, 11, 50914], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3005, "seek": 1262600, "start": 12637.0, "end": 12640.0, "text": " because I noticed when I roll over FAQ, it highlights orange,", "tokens": [50914, 570, 286, 5694, 562, 286, 3373, 670, 19894, 48, 11, 309, 14254, 7671, 11, 51064], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3006, "seek": 1262600, "start": 12640.0, "end": 12645.0, "text": " which doesn't match O'Reilly's red.", "tokens": [51064, 597, 1177, 380, 2995, 422, 6, 8524, 6917, 311, 2182, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3007, "seek": 1262600, "start": 12645.0, "end": 12650.0, "text": " Looking at the bottom of the page, it looks like our footer updated it correctly.", "tokens": [51314, 11053, 412, 264, 2767, 295, 264, 3028, 11, 309, 1542, 411, 527, 2671, 260, 10588, 309, 8944, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3008, "seek": 1262600, "start": 12650.0, "end": 12653.0, "text": " Let's check out the FAQ page.", "tokens": [51564, 961, 311, 1520, 484, 264, 19894, 48, 3028, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3009, "seek": 1262600, "start": 12653.0, "end": 12655.0, "text": " It looks like there's some questions that shouldn't be here.", "tokens": [51714, 467, 1542, 411, 456, 311, 512, 1651, 300, 4659, 380, 312, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08359027832977531, "compression_ratio": 1.5699658703071673, "no_speech_prob": 0.0031722886487841606}, {"id": 3010, "seek": 1265500, "start": 12655.0, "end": 12657.0, "text": " Let's remove them.", "tokens": [50364, 961, 311, 4159, 552, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3011, "seek": 1265500, "start": 12657.0, "end": 12659.0, "text": " Back inside the nbviewer repository,", "tokens": [50464, 5833, 1854, 264, 297, 65, 13457, 25841, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3012, "seek": 1265500, "start": 12659.0, "end": 12663.0, "text": " it looks like the FAQ.md file might be the file that's getting rendered.", "tokens": [50564, 309, 1542, 411, 264, 19894, 48, 13, 76, 67, 3991, 1062, 312, 264, 3991, 300, 311, 1242, 28748, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3013, "seek": 1265500, "start": 12663.0, "end": 12664.0, "text": " Let's open that.", "tokens": [50764, 961, 311, 1269, 300, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3014, "seek": 1265500, "start": 12664.0, "end": 12668.0, "text": " It looks like this file does indeed extend the layout.html file", "tokens": [50814, 467, 1542, 411, 341, 3991, 775, 6451, 10101, 264, 13333, 13, 357, 15480, 3991, 51014], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3015, "seek": 1265500, "start": 12668.0, "end": 12672.0, "text": " and uses a special markdown filter to convert itself from markdown to html.", "tokens": [51014, 293, 4960, 257, 2121, 1491, 5093, 6608, 281, 7620, 2564, 490, 1491, 5093, 281, 276, 83, 15480, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3016, "seek": 1265500, "start": 12672.0, "end": 12676.0, "text": " In the process, it automatically generates its table of contents.", "tokens": [51214, 682, 264, 1399, 11, 309, 6772, 23815, 1080, 3199, 295, 15768, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3017, "seek": 1265500, "start": 12676.0, "end": 12682.0, "text": " Let's do what we did for index.html and layout.html in our custom templates folder.", "tokens": [51414, 961, 311, 360, 437, 321, 630, 337, 8186, 13, 357, 15480, 293, 13333, 13, 357, 15480, 294, 527, 2375, 21165, 10820, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07165454832975529, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.007344231009483337}, {"id": 3018, "seek": 1268200, "start": 12682.0, "end": 12692.0, "text": " Let's create an FAQ.md file and copy the contents from the FAQ.md file in nbviewer.", "tokens": [50364, 961, 311, 1884, 364, 19894, 48, 13, 76, 67, 3991, 293, 5055, 264, 15768, 490, 264, 19894, 48, 13, 76, 67, 3991, 294, 297, 65, 13457, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06933480092923935, "compression_ratio": 1.475, "no_speech_prob": 0.008059894666075706}, {"id": 3019, "seek": 1268200, "start": 12692.0, "end": 12694.0, "text": " Let's get rid of the first two questions,", "tokens": [50864, 961, 311, 483, 3973, 295, 264, 700, 732, 1651, 11, 50964], "temperature": 0.0, "avg_logprob": -0.06933480092923935, "compression_ratio": 1.475, "no_speech_prob": 0.008059894666075706}, {"id": 3020, "seek": 1268200, "start": 12694.0, "end": 12698.0, "text": " because they are completely specific to Jupyter's nbviewer.", "tokens": [50964, 570, 436, 366, 2584, 2685, 281, 22125, 88, 391, 311, 297, 65, 13457, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06933480092923935, "compression_ratio": 1.475, "no_speech_prob": 0.008059894666075706}, {"id": 3021, "seek": 1268200, "start": 12698.0, "end": 12710.0, "text": " We'll defer them to nbviewer for this information.", "tokens": [51164, 492, 603, 25704, 552, 281, 297, 65, 13457, 337, 341, 1589, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06933480092923935, "compression_ratio": 1.475, "no_speech_prob": 0.008059894666075706}, {"id": 3022, "seek": 1271000, "start": 12710.0, "end": 12713.0, "text": " This paragraph doesn't relate at all to our viewer,", "tokens": [50364, 639, 18865, 1177, 380, 10961, 412, 439, 281, 527, 16767, 11, 50514], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3023, "seek": 1271000, "start": 12713.0, "end": 12716.0, "text": " nor does the one below or the one below that.", "tokens": [50514, 6051, 775, 264, 472, 2507, 420, 264, 472, 2507, 300, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3024, "seek": 1271000, "start": 12716.0, "end": 12718.0, "text": " This paragraph also doesn't relate.", "tokens": [50664, 639, 18865, 611, 1177, 380, 10961, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3025, "seek": 1271000, "start": 12718.0, "end": 12719.0, "text": " This is related, though.", "tokens": [50764, 639, 307, 4077, 11, 1673, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3026, "seek": 1271000, "start": 12719.0, "end": 12723.0, "text": " We just need to update it to point to our email address.", "tokens": [50814, 492, 445, 643, 281, 5623, 309, 281, 935, 281, 527, 3796, 2985, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3027, "seek": 1271000, "start": 12723.0, "end": 12726.0, "text": " The last few before the final one also don't relate,", "tokens": [51014, 440, 1036, 1326, 949, 264, 2572, 472, 611, 500, 380, 10961, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3028, "seek": 1271000, "start": 12726.0, "end": 12732.0, "text": " and we'll replace the text of the final one with an email link to the O'Reilly administrator.", "tokens": [51164, 293, 321, 603, 7406, 264, 2487, 295, 264, 2572, 472, 365, 364, 3796, 2113, 281, 264, 422, 6, 8524, 6917, 25529, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3029, "seek": 1271000, "start": 12732.0, "end": 12736.0, "text": " Now let's save and see if the FAQ page renders how we want.", "tokens": [51464, 823, 718, 311, 3155, 293, 536, 498, 264, 19894, 48, 3028, 6125, 433, 577, 321, 528, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3030, "seek": 1271000, "start": 12736.0, "end": 12739.0, "text": " Back in the web browser, I'm going to refresh the page.", "tokens": [51664, 5833, 294, 264, 3670, 11185, 11, 286, 478, 516, 281, 15134, 264, 3028, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07077181249632872, "compression_ratio": 1.7381818181818183, "no_speech_prob": 0.15578018128871918}, {"id": 3031, "seek": 1273900, "start": 12739.0, "end": 12746.0, "text": " Looks like we should remove the first question as well.", "tokens": [50364, 10027, 411, 321, 820, 4159, 264, 700, 1168, 382, 731, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0761351697585162, "compression_ratio": 1.45, "no_speech_prob": 0.0057284110225737095}, {"id": 3032, "seek": 1273900, "start": 12746.0, "end": 12749.0, "text": " Let's refresh the page again.", "tokens": [50714, 961, 311, 15134, 264, 3028, 797, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0761351697585162, "compression_ratio": 1.45, "no_speech_prob": 0.0057284110225737095}, {"id": 3033, "seek": 1273900, "start": 12749.0, "end": 12751.0, "text": " Ah, much better.", "tokens": [50864, 2438, 11, 709, 1101, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0761351697585162, "compression_ratio": 1.45, "no_speech_prob": 0.0057284110225737095}, {"id": 3034, "seek": 1273900, "start": 12751.0, "end": 12754.0, "text": " Let's try clicking on the O'Reilly image to go back to the homepage.", "tokens": [50964, 961, 311, 853, 9697, 322, 264, 422, 6, 8524, 6917, 3256, 281, 352, 646, 281, 264, 31301, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0761351697585162, "compression_ratio": 1.45, "no_speech_prob": 0.0057284110225737095}, {"id": 3035, "seek": 1273900, "start": 12754.0, "end": 12756.0, "text": " Sweet, it worked.", "tokens": [51114, 14653, 11, 309, 2732, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0761351697585162, "compression_ratio": 1.45, "no_speech_prob": 0.0057284110225737095}, {"id": 3036, "seek": 1273900, "start": 12756.0, "end": 12764.0, "text": " In the next tutorial, we'll look at adding custom CSS to style it more like O'Reilly's main website.", "tokens": [51214, 682, 264, 958, 7073, 11, 321, 603, 574, 412, 5127, 2375, 24387, 281, 3758, 309, 544, 411, 422, 6, 8524, 6917, 311, 2135, 3144, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0761351697585162, "compression_ratio": 1.45, "no_speech_prob": 0.0057284110225737095}, {"id": 3037, "seek": 1276400, "start": 12764.0, "end": 12769.0, "text": " In this video, we'll talk about how nbviewer compiles its less into CSS.", "tokens": [50364, 682, 341, 960, 11, 321, 603, 751, 466, 577, 297, 65, 13457, 715, 4680, 1080, 1570, 666, 24387, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05095069572843354, "compression_ratio": 1.6203007518796992, "no_speech_prob": 0.06003778800368309}, {"id": 3038, "seek": 1276400, "start": 12769.0, "end": 12774.0, "text": " We'll then look at adding our own CSS to our custom nbviewer templates.", "tokens": [50614, 492, 603, 550, 574, 412, 5127, 527, 1065, 24387, 281, 527, 2375, 297, 65, 13457, 21165, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05095069572843354, "compression_ratio": 1.6203007518796992, "no_speech_prob": 0.06003778800368309}, {"id": 3039, "seek": 1276400, "start": 12774.0, "end": 12778.0, "text": " I've still left the nbviewer server running from the last video.", "tokens": [50864, 286, 600, 920, 1411, 264, 297, 65, 13457, 7154, 2614, 490, 264, 1036, 960, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05095069572843354, "compression_ratio": 1.6203007518796992, "no_speech_prob": 0.06003778800368309}, {"id": 3040, "seek": 1276400, "start": 12778.0, "end": 12781.0, "text": " This is because I do not need to restart it.", "tokens": [51064, 639, 307, 570, 286, 360, 406, 643, 281, 21022, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05095069572843354, "compression_ratio": 1.6203007518796992, "no_speech_prob": 0.06003778800368309}, {"id": 3041, "seek": 1276400, "start": 12781.0, "end": 12788.0, "text": " As long as I'm only changing static files, all I have to do is refresh the webpage to update the contents.", "tokens": [51214, 1018, 938, 382, 286, 478, 787, 4473, 13437, 7098, 11, 439, 286, 362, 281, 360, 307, 15134, 264, 37852, 281, 5623, 264, 15768, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05095069572843354, "compression_ratio": 1.6203007518796992, "no_speech_prob": 0.06003778800368309}, {"id": 3042, "seek": 1276400, "start": 12788.0, "end": 12792.0, "text": " If I were working on server-side files, for example the Python files,", "tokens": [51564, 759, 286, 645, 1364, 322, 7154, 12, 1812, 7098, 11, 337, 1365, 264, 15329, 7098, 11, 51764], "temperature": 0.0, "avg_logprob": -0.05095069572843354, "compression_ratio": 1.6203007518796992, "no_speech_prob": 0.06003778800368309}, {"id": 3043, "seek": 1279200, "start": 12792.0, "end": 12795.0, "text": " then I would have to restart the server.", "tokens": [50364, 550, 286, 576, 362, 281, 21022, 264, 7154, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07216096211628742, "compression_ratio": 1.621761658031088, "no_speech_prob": 0.031602781265974045}, {"id": 3044, "seek": 1279200, "start": 12795.0, "end": 12800.0, "text": " Let's go ahead and open up Adam inside the nbviewer repository.", "tokens": [50514, 961, 311, 352, 2286, 293, 1269, 493, 7938, 1854, 264, 297, 65, 13457, 25841, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07216096211628742, "compression_ratio": 1.621761658031088, "no_speech_prob": 0.031602781265974045}, {"id": 3045, "seek": 1279200, "start": 12800.0, "end": 12806.0, "text": " When you installed nbviewer from source code, you had to run a command called invoke less.", "tokens": [50764, 1133, 291, 8899, 297, 65, 13457, 490, 4009, 3089, 11, 291, 632, 281, 1190, 257, 5622, 1219, 41117, 1570, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07216096211628742, "compression_ratio": 1.621761658031088, "no_speech_prob": 0.031602781265974045}, {"id": 3046, "seek": 1279200, "start": 12806.0, "end": 12814.0, "text": " When you ran that command, what it did was run a function called less inside the tasks.py file.", "tokens": [51064, 1133, 291, 5872, 300, 5622, 11, 437, 309, 630, 390, 1190, 257, 2445, 1219, 1570, 1854, 264, 9608, 13, 8200, 3991, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07216096211628742, "compression_ratio": 1.621761658031088, "no_speech_prob": 0.031602781265974045}, {"id": 3047, "seek": 1279200, "start": 12814.0, "end": 12816.0, "text": " Here's that function.", "tokens": [51464, 1692, 311, 300, 2445, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07216096211628742, "compression_ratio": 1.621761658031088, "no_speech_prob": 0.031602781265974045}, {"id": 3048, "seek": 1281600, "start": 12816.0, "end": 12822.0, "text": " What this function does is compile the less into CSS using the less compiler.", "tokens": [50364, 708, 341, 2445, 775, 307, 31413, 264, 1570, 666, 24387, 1228, 264, 1570, 31958, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06575227351415724, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02032850868999958}, {"id": 3049, "seek": 1281600, "start": 12822.0, "end": 12826.0, "text": " It outputs the compiled CSS into a build subdirectory.", "tokens": [50664, 467, 23930, 264, 36548, 24387, 666, 257, 1322, 31662, 11890, 827, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06575227351415724, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02032850868999958}, {"id": 3050, "seek": 1281600, "start": 12826.0, "end": 12832.0, "text": " It outputs a styles.css, notebook.css, and slides.css.", "tokens": [50864, 467, 23930, 257, 13273, 13, 66, 3810, 11, 21060, 13, 66, 3810, 11, 293, 9788, 13, 66, 3810, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06575227351415724, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02032850868999958}, {"id": 3051, "seek": 1281600, "start": 12832.0, "end": 12839.0, "text": " Likewise, the source files used are styles, notebook, and slides.less.", "tokens": [51164, 30269, 11, 264, 4009, 7098, 1143, 366, 13273, 11, 21060, 11, 293, 9788, 13, 1832, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06575227351415724, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02032850868999958}, {"id": 3052, "seek": 1281600, "start": 12839.0, "end": 12843.0, "text": " Let's open the nbviewer static directory.", "tokens": [51514, 961, 311, 1269, 264, 297, 65, 13457, 13437, 21120, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06575227351415724, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.02032850868999958}, {"id": 3053, "seek": 1284300, "start": 12843.0, "end": 12847.0, "text": " In here, you see the folder less and the build folder.", "tokens": [50364, 682, 510, 11, 291, 536, 264, 10820, 1570, 293, 264, 1322, 10820, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3054, "seek": 1284300, "start": 12847.0, "end": 12852.0, "text": " The build folder is grayed out here because it's not included in the git repository.", "tokens": [50564, 440, 1322, 10820, 307, 10855, 292, 484, 510, 570, 309, 311, 406, 5556, 294, 264, 18331, 25841, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3055, "seek": 1284300, "start": 12852.0, "end": 12855.0, "text": " That's because we don't want to check in the built files.", "tokens": [50814, 663, 311, 570, 321, 500, 380, 528, 281, 1520, 294, 264, 3094, 7098, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3056, "seek": 1284300, "start": 12855.0, "end": 12857.0, "text": " That would just be including changes twice.", "tokens": [50964, 663, 576, 445, 312, 3009, 2962, 6091, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3057, "seek": 1284300, "start": 12857.0, "end": 12860.0, "text": " The less folder is where the less is stored.", "tokens": [51064, 440, 1570, 10820, 307, 689, 264, 1570, 307, 12187, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3058, "seek": 1284300, "start": 12860.0, "end": 12864.0, "text": " We can open up the notebook.less to get an idea of how notebooks are styled.", "tokens": [51214, 492, 393, 1269, 493, 264, 21060, 13, 1832, 281, 483, 364, 1558, 295, 577, 43782, 366, 7952, 1493, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3059, "seek": 1284300, "start": 12864.0, "end": 12869.0, "text": " A major difference between less and CSS is that less allows you to import.", "tokens": [51414, 316, 2563, 2649, 1296, 1570, 293, 24387, 307, 300, 1570, 4045, 291, 281, 974, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05436354611827209, "compression_ratio": 1.752, "no_speech_prob": 0.002980660181492567}, {"id": 3060, "seek": 1286900, "start": 12869.0, "end": 12874.0, "text": " Here you can see that bootstrap is imported and styling from ipython.", "tokens": [50364, 1692, 291, 393, 536, 300, 11450, 372, 4007, 307, 25524, 293, 27944, 490, 28501, 88, 11943, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05850858273713485, "compression_ratio": 1.8288770053475936, "no_speech_prob": 0.13649684190750122}, {"id": 3061, "seek": 1286900, "start": 12874.0, "end": 12878.0, "text": " Let's go ahead and see where the build files are referenced.", "tokens": [50614, 961, 311, 352, 2286, 293, 536, 689, 264, 1322, 7098, 366, 32734, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05850858273713485, "compression_ratio": 1.8288770053475936, "no_speech_prob": 0.13649684190750122}, {"id": 3062, "seek": 1286900, "start": 12878.0, "end": 12886.0, "text": " In the layout template, inside the header, we see that styles.css is referenced.", "tokens": [50814, 682, 264, 13333, 12379, 11, 1854, 264, 23117, 11, 321, 536, 300, 13273, 13, 66, 3810, 307, 32734, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05850858273713485, "compression_ratio": 1.8288770053475936, "no_speech_prob": 0.13649684190750122}, {"id": 3063, "seek": 1286900, "start": 12886.0, "end": 12892.0, "text": " Inside notebook.html, we can see where notebook.css is referenced.", "tokens": [51214, 15123, 21060, 13, 357, 15480, 11, 321, 393, 536, 689, 21060, 13, 66, 3810, 307, 32734, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05850858273713485, "compression_ratio": 1.8288770053475936, "no_speech_prob": 0.13649684190750122}, {"id": 3064, "seek": 1286900, "start": 12892.0, "end": 12896.0, "text": " Let's go ahead and add our own styling to our custom templates.", "tokens": [51514, 961, 311, 352, 2286, 293, 909, 527, 1065, 27944, 281, 527, 2375, 21165, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05850858273713485, "compression_ratio": 1.8288770053475936, "no_speech_prob": 0.13649684190750122}, {"id": 3065, "seek": 1289600, "start": 12896.0, "end": 12901.0, "text": " Going back to the terminal, I'm going to cd into our custom templates directory.", "tokens": [50364, 10963, 646, 281, 264, 14709, 11, 286, 478, 516, 281, 269, 67, 666, 527, 2375, 21165, 21120, 13, 50614], "temperature": 0.0, "avg_logprob": -0.089432373046875, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.011505300179123878}, {"id": 3066, "seek": 1289600, "start": 12901.0, "end": 12904.0, "text": " Here I'll open Adam.", "tokens": [50614, 1692, 286, 603, 1269, 7938, 13, 50764], "temperature": 0.0, "avg_logprob": -0.089432373046875, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.011505300179123878}, {"id": 3067, "seek": 1289600, "start": 12904.0, "end": 12910.0, "text": " Inside our layout.html, below the existing CSS import, let's add our own.", "tokens": [50764, 15123, 527, 13333, 13, 357, 15480, 11, 2507, 264, 6741, 24387, 974, 11, 718, 311, 909, 527, 1065, 13, 51064], "temperature": 0.0, "avg_logprob": -0.089432373046875, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.011505300179123878}, {"id": 3068, "seek": 1289600, "start": 12910.0, "end": 12916.0, "text": " It's important that you do this below the existing because this will cause your style to override the existing.", "tokens": [51064, 467, 311, 1021, 300, 291, 360, 341, 2507, 264, 6741, 570, 341, 486, 3082, 428, 3758, 281, 42321, 264, 6741, 13, 51364], "temperature": 0.0, "avg_logprob": -0.089432373046875, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.011505300179123878}, {"id": 3069, "seek": 1289600, "start": 12916.0, "end": 12922.0, "text": " Unfortunately, nbviewer doesn't support pulling files from directories outside of its own, so we have two options.", "tokens": [51364, 8590, 11, 297, 65, 13457, 1177, 380, 1406, 8407, 7098, 490, 5391, 530, 2380, 295, 1080, 1065, 11, 370, 321, 362, 732, 3956, 13, 51664], "temperature": 0.0, "avg_logprob": -0.089432373046875, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.011505300179123878}, {"id": 3070, "seek": 1292200, "start": 12922.0, "end": 12929.0, "text": " We could either place our custom style inside the nbviewer repository, which I'd rather not do,", "tokens": [50364, 492, 727, 2139, 1081, 527, 2375, 3758, 1854, 264, 297, 65, 13457, 25841, 11, 597, 286, 1116, 2831, 406, 360, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09437648228236607, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.1560170203447342}, {"id": 3071, "seek": 1292200, "start": 12929.0, "end": 12936.0, "text": " or we can use the ginga templating to load it from our nbviewer templates directory and then inline it directly into the html.", "tokens": [50714, 420, 321, 393, 764, 264, 21924, 64, 9100, 990, 281, 3677, 309, 490, 527, 297, 65, 13457, 21165, 21120, 293, 550, 294, 1889, 309, 3838, 666, 264, 276, 83, 15480, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09437648228236607, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.1560170203447342}, {"id": 3072, "seek": 1292200, "start": 12936.0, "end": 12942.0, "text": " First, let me show you what it would look like if you were to put the CSS inside the nbviewer repository.", "tokens": [51064, 2386, 11, 718, 385, 855, 291, 437, 309, 576, 574, 411, 498, 291, 645, 281, 829, 264, 24387, 1854, 264, 297, 65, 13457, 25841, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09437648228236607, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.1560170203447342}, {"id": 3073, "seek": 1292200, "start": 12942.0, "end": 12948.0, "text": " You would change build to CSS and then give your CSS file a name, like custom.", "tokens": [51364, 509, 576, 1319, 1322, 281, 24387, 293, 550, 976, 428, 24387, 3991, 257, 1315, 11, 411, 2375, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09437648228236607, "compression_ratio": 1.7172995780590716, "no_speech_prob": 0.1560170203447342}, {"id": 3074, "seek": 1294800, "start": 12948.0, "end": 12956.0, "text": " You would then save this file and inside the nbviewer repository under the static directory in CSS,", "tokens": [50364, 509, 576, 550, 3155, 341, 3991, 293, 1854, 264, 297, 65, 13457, 25841, 833, 264, 13437, 21120, 294, 24387, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10373153267325935, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.010650815442204475}, {"id": 3075, "seek": 1294800, "start": 12956.0, "end": 12961.0, "text": " you would right-click, create a new file called custom.css.", "tokens": [50764, 291, 576, 558, 12, 18548, 11, 1884, 257, 777, 3991, 1219, 2375, 13, 66, 3810, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10373153267325935, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.010650815442204475}, {"id": 3076, "seek": 1294800, "start": 12961.0, "end": 12966.0, "text": " And then inside here, you would put whatever custom CSS you want.", "tokens": [51014, 400, 550, 1854, 510, 11, 291, 576, 829, 2035, 2375, 24387, 291, 528, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10373153267325935, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.010650815442204475}, {"id": 3077, "seek": 1294800, "start": 12966.0, "end": 12974.0, "text": " Moving back into our nbviewer templates directory, the alternative, I think, makes more sense because then you can keep your CSS next to your templates.", "tokens": [51264, 14242, 646, 666, 527, 297, 65, 13457, 21165, 21120, 11, 264, 8535, 11, 286, 519, 11, 1669, 544, 2020, 570, 550, 291, 393, 1066, 428, 24387, 958, 281, 428, 21165, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10373153267325935, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.010650815442204475}, {"id": 3078, "seek": 1297400, "start": 12974.0, "end": 12979.0, "text": " For this, instead of using a link tag, you'll use a style tag.", "tokens": [50364, 1171, 341, 11, 2602, 295, 1228, 257, 2113, 6162, 11, 291, 603, 764, 257, 3758, 6162, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04666021363488559, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.030207786709070206}, {"id": 3079, "seek": 1297400, "start": 12979.0, "end": 12986.0, "text": " Then inside style tags, use the ginga include to include your style file.", "tokens": [50614, 1396, 1854, 3758, 18632, 11, 764, 264, 21924, 64, 4090, 281, 4090, 428, 3758, 3991, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04666021363488559, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.030207786709070206}, {"id": 3080, "seek": 1297400, "start": 12986.0, "end": 12992.0, "text": " The only downside to using this method is that you're disabling the browser's ability to cache your style,", "tokens": [50964, 440, 787, 25060, 281, 1228, 341, 3170, 307, 300, 291, 434, 717, 20112, 264, 11185, 311, 3485, 281, 19459, 428, 3758, 11, 51264], "temperature": 0.0, "avg_logprob": -0.04666021363488559, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.030207786709070206}, {"id": 3081, "seek": 1297400, "start": 12992.0, "end": 12996.0, "text": " which means that every time a page is requested, client will have to download the CSS again.", "tokens": [51264, 597, 1355, 300, 633, 565, 257, 3028, 307, 16436, 11, 6423, 486, 362, 281, 5484, 264, 24387, 797, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04666021363488559, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.030207786709070206}, {"id": 3082, "seek": 1297400, "start": 12996.0, "end": 13003.0, "text": " That's usually not a problem with small CSS files, and if it is a problem, you can use the other method that I just showed you.", "tokens": [51464, 663, 311, 2673, 406, 257, 1154, 365, 1359, 24387, 7098, 11, 293, 498, 309, 307, 257, 1154, 11, 291, 393, 764, 264, 661, 3170, 300, 286, 445, 4712, 291, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04666021363488559, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.030207786709070206}, {"id": 3083, "seek": 1300300, "start": 13003.0, "end": 13008.0, "text": " So now let's save this file and create our own custom CSS.", "tokens": [50364, 407, 586, 718, 311, 3155, 341, 3991, 293, 1884, 527, 1065, 2375, 24387, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05382886823717054, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.0022515489254146814}, {"id": 3084, "seek": 1300300, "start": 13008.0, "end": 13015.0, "text": " To test to see if our custom CSS is working, let's try setting the body background color.", "tokens": [50614, 1407, 1500, 281, 536, 498, 527, 2375, 24387, 307, 1364, 11, 718, 311, 853, 3287, 264, 1772, 3678, 2017, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05382886823717054, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.0022515489254146814}, {"id": 3085, "seek": 1300300, "start": 13015.0, "end": 13020.0, "text": " I'm going to use important just to make sure it overrides any other values.", "tokens": [50964, 286, 478, 516, 281, 764, 1021, 445, 281, 652, 988, 309, 670, 81, 1875, 604, 661, 4190, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05382886823717054, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.0022515489254146814}, {"id": 3086, "seek": 1300300, "start": 13020.0, "end": 13026.0, "text": " However, it's important to note that important isn't the best practice.", "tokens": [51214, 2908, 11, 309, 311, 1021, 281, 3637, 300, 1021, 1943, 380, 264, 1151, 3124, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05382886823717054, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.0022515489254146814}, {"id": 3087, "seek": 1300300, "start": 13026.0, "end": 13030.0, "text": " Using important disables you from later overriding styles.", "tokens": [51514, 11142, 1021, 717, 2965, 291, 490, 1780, 670, 81, 2819, 13273, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05382886823717054, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.0022515489254146814}, {"id": 3088, "seek": 1303000, "start": 13030.0, "end": 13035.0, "text": " In a new browser window, let's navigate to our NB viewer page to see if our style gets loaded.", "tokens": [50364, 682, 257, 777, 11185, 4910, 11, 718, 311, 12350, 281, 527, 426, 33, 16767, 3028, 281, 536, 498, 527, 3758, 2170, 13210, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0682780853537626, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.011329208500683308}, {"id": 3089, "seek": 1303000, "start": 13035.0, "end": 13041.0, "text": " Awesome, it looks like the style loaded successfully.", "tokens": [50614, 10391, 11, 309, 1542, 411, 264, 3758, 13210, 10727, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0682780853537626, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.011329208500683308}, {"id": 3090, "seek": 1303000, "start": 13041.0, "end": 13048.0, "text": " Now, instead of applying such a hideous style, let's try to override the orange highlight color that's applied to buttons.", "tokens": [50914, 823, 11, 2602, 295, 9275, 1270, 257, 6479, 563, 3758, 11, 718, 311, 853, 281, 42321, 264, 7671, 5078, 2017, 300, 311, 6456, 281, 9905, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0682780853537626, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.011329208500683308}, {"id": 3091, "seek": 1303000, "start": 13048.0, "end": 13053.0, "text": " Let's inspect the FAQ button to see how we can select it using CSS.", "tokens": [51264, 961, 311, 15018, 264, 19894, 48, 2960, 281, 536, 577, 321, 393, 3048, 309, 1228, 24387, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0682780853537626, "compression_ratio": 1.5339366515837105, "no_speech_prob": 0.011329208500683308}, {"id": 3092, "seek": 1305300, "start": 13053.0, "end": 13060.0, "text": " Looks like a good selector would be to use the navbar right class and then the anchor tag.", "tokens": [50364, 10027, 411, 257, 665, 23264, 1672, 576, 312, 281, 764, 264, 5947, 5356, 558, 1508, 293, 550, 264, 18487, 6162, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07152769944378148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.01971435546875}, {"id": 3093, "seek": 1305300, "start": 13060.0, "end": 13064.0, "text": " Back inside our custom CSS, let's do that.", "tokens": [50714, 5833, 1854, 527, 2375, 24387, 11, 718, 311, 360, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07152769944378148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.01971435546875}, {"id": 3094, "seek": 1305300, "start": 13064.0, "end": 13069.0, "text": " To specify that we want to change the styling when it is hovered over, add the hover sudo selector.", "tokens": [50914, 1407, 16500, 300, 321, 528, 281, 1319, 264, 27944, 562, 309, 307, 20076, 292, 670, 11, 909, 264, 20076, 459, 2595, 23264, 1672, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07152769944378148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.01971435546875}, {"id": 3095, "seek": 1305300, "start": 13069.0, "end": 13072.0, "text": " For now, let's just try changing the background color.", "tokens": [51164, 1171, 586, 11, 718, 311, 445, 853, 4473, 264, 3678, 2017, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07152769944378148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.01971435546875}, {"id": 3096, "seek": 1305300, "start": 13072.0, "end": 13078.0, "text": " Again, let's use the important tag just to make sure that what we're doing gets applied.", "tokens": [51314, 3764, 11, 718, 311, 764, 264, 1021, 6162, 445, 281, 652, 988, 300, 437, 321, 434, 884, 2170, 6456, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07152769944378148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.01971435546875}, {"id": 3097, "seek": 1305300, "start": 13078.0, "end": 13080.0, "text": " Looks like that worked.", "tokens": [51614, 10027, 411, 300, 2732, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07152769944378148, "compression_ratio": 1.6639004149377594, "no_speech_prob": 0.01971435546875}, {"id": 3098, "seek": 1308000, "start": 13080.0, "end": 13087.0, "text": " So now, let's change the font color instead of changing the background color and let's actually use O'Reilly's red.", "tokens": [50364, 407, 586, 11, 718, 311, 1319, 264, 10703, 2017, 2602, 295, 4473, 264, 3678, 2017, 293, 718, 311, 767, 764, 422, 6, 8524, 6917, 311, 2182, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08502623909398128, "compression_ratio": 1.6572769953051643, "no_speech_prob": 0.005058810114860535}, {"id": 3099, "seek": 1308000, "start": 13087.0, "end": 13094.0, "text": " Let's go to O'Reilly's website and we'll right click on the home link to look at its color.", "tokens": [50714, 961, 311, 352, 281, 422, 6, 8524, 6917, 311, 3144, 293, 321, 603, 558, 2052, 322, 264, 1280, 2113, 281, 574, 412, 1080, 2017, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08502623909398128, "compression_ratio": 1.6572769953051643, "no_speech_prob": 0.005058810114860535}, {"id": 3100, "seek": 1308000, "start": 13094.0, "end": 13097.0, "text": " Now, I'll just double click this and copy it.", "tokens": [51064, 823, 11, 286, 603, 445, 3834, 2052, 341, 293, 5055, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08502623909398128, "compression_ratio": 1.6572769953051643, "no_speech_prob": 0.005058810114860535}, {"id": 3101, "seek": 1308000, "start": 13097.0, "end": 13103.0, "text": " Back inside our custom CSS, I'm going to change background color to color and paste this new color.", "tokens": [51214, 5833, 1854, 527, 2375, 24387, 11, 286, 478, 516, 281, 1319, 3678, 2017, 281, 2017, 293, 9163, 341, 777, 2017, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08502623909398128, "compression_ratio": 1.6572769953051643, "no_speech_prob": 0.005058810114860535}, {"id": 3102, "seek": 1310300, "start": 13103.0, "end": 13110.0, "text": " Let's save the file, then go back to the web browser where I'll open our MB Viewer tab and refresh the page.", "tokens": [50364, 961, 311, 3155, 264, 3991, 11, 550, 352, 646, 281, 264, 3670, 11185, 689, 286, 603, 1269, 527, 28866, 13909, 260, 4421, 293, 15134, 264, 3028, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0856906944346205, "compression_ratio": 1.6752136752136753, "no_speech_prob": 0.25082871317863464}, {"id": 3103, "seek": 1310300, "start": 13110.0, "end": 13112.0, "text": " Looks like that works.", "tokens": [50714, 10027, 411, 300, 1985, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0856906944346205, "compression_ratio": 1.6752136752136753, "no_speech_prob": 0.25082871317863464}, {"id": 3104, "seek": 1310300, "start": 13112.0, "end": 13117.0, "text": " Now back inside the custom CSS, let's try to move the important flag.", "tokens": [50814, 823, 646, 1854, 264, 2375, 24387, 11, 718, 311, 853, 281, 1286, 264, 1021, 7166, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0856906944346205, "compression_ratio": 1.6752136752136753, "no_speech_prob": 0.25082871317863464}, {"id": 3105, "seek": 1310300, "start": 13117.0, "end": 13122.0, "text": " Like I said earlier, it's better to not use important when you can get away with it.", "tokens": [51064, 1743, 286, 848, 3071, 11, 309, 311, 1101, 281, 406, 764, 1021, 562, 291, 393, 483, 1314, 365, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0856906944346205, "compression_ratio": 1.6752136752136753, "no_speech_prob": 0.25082871317863464}, {"id": 3106, "seek": 1310300, "start": 13122.0, "end": 13126.0, "text": " Back in the browser, let's refresh the page and see if it still works.", "tokens": [51314, 5833, 294, 264, 11185, 11, 718, 311, 15134, 264, 3028, 293, 536, 498, 309, 920, 1985, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0856906944346205, "compression_ratio": 1.6752136752136753, "no_speech_prob": 0.25082871317863464}, {"id": 3107, "seek": 1310300, "start": 13126.0, "end": 13128.0, "text": " Looks like it's no longer working.", "tokens": [51514, 10027, 411, 309, 311, 572, 2854, 1364, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0856906944346205, "compression_ratio": 1.6752136752136753, "no_speech_prob": 0.25082871317863464}, {"id": 3108, "seek": 1312800, "start": 13128.0, "end": 13135.0, "text": " We have two options. We can either stick with the important flag or we can try to make our selector more specific.", "tokens": [50364, 492, 362, 732, 3956, 13, 492, 393, 2139, 2897, 365, 264, 1021, 7166, 420, 321, 393, 853, 281, 652, 527, 23264, 1672, 544, 2685, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07002255626928026, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.10083325207233429}, {"id": 3109, "seek": 1312800, "start": 13135.0, "end": 13143.0, "text": " Because I know that I'm applying the top most level styling and nobody's going to come in and inherit from the O'Reilly page and add their own styling,", "tokens": [50714, 1436, 286, 458, 300, 286, 478, 9275, 264, 1192, 881, 1496, 27944, 293, 5079, 311, 516, 281, 808, 294, 293, 21389, 490, 264, 422, 6, 8524, 6917, 3028, 293, 909, 641, 1065, 27944, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07002255626928026, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.10083325207233429}, {"id": 3110, "seek": 1312800, "start": 13143.0, "end": 13145.0, "text": " it's okay for me to use important.", "tokens": [51114, 309, 311, 1392, 337, 385, 281, 764, 1021, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07002255626928026, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.10083325207233429}, {"id": 3111, "seek": 1312800, "start": 13145.0, "end": 13151.0, "text": " If, however, you were writing something that would later be styled by somebody else, you'd want to make the selector more specific.", "tokens": [51214, 759, 11, 4461, 11, 291, 645, 3579, 746, 300, 576, 1780, 312, 7952, 1493, 538, 2618, 1646, 11, 291, 1116, 528, 281, 652, 264, 23264, 1672, 544, 2685, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07002255626928026, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.10083325207233429}, {"id": 3112, "seek": 1315100, "start": 13151.0, "end": 13159.0, "text": " To do so, you could inspect the element and either A, add more levels of elements to your selector,", "tokens": [50364, 1407, 360, 370, 11, 291, 727, 15018, 264, 4478, 293, 2139, 316, 11, 909, 544, 4358, 295, 4959, 281, 428, 23264, 1672, 11, 50764], "temperature": 0.0, "avg_logprob": -0.06197995555644133, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.030210740864276886}, {"id": 3113, "seek": 1315100, "start": 13159.0, "end": 13166.0, "text": " or B, in the templates, actually add an ID to this anchor tag and then address the anchor tag by ID.", "tokens": [50764, 420, 363, 11, 294, 264, 21165, 11, 767, 909, 364, 7348, 281, 341, 18487, 6162, 293, 550, 2985, 264, 18487, 6162, 538, 7348, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06197995555644133, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.030210740864276886}, {"id": 3114, "seek": 1315100, "start": 13166.0, "end": 13172.0, "text": " Addressing an element by ID has a higher specificity than addressing it otherwise.", "tokens": [51114, 5349, 18605, 364, 4478, 538, 7348, 575, 257, 2946, 2685, 507, 813, 14329, 309, 5911, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06197995555644133, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.030210740864276886}, {"id": 3115, "seek": 1315100, "start": 13172.0, "end": 13176.0, "text": " Back inside the custom CSS, let's re-add the important.", "tokens": [51414, 5833, 1854, 264, 2375, 24387, 11, 718, 311, 319, 12, 25224, 264, 1021, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06197995555644133, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.030210740864276886}, {"id": 3116, "seek": 1315100, "start": 13176.0, "end": 13179.0, "text": " I'm going to refresh the browser page.", "tokens": [51614, 286, 478, 516, 281, 15134, 264, 11185, 3028, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06197995555644133, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.030210740864276886}, {"id": 3117, "seek": 1317900, "start": 13179.0, "end": 13181.0, "text": " Looks like that's still working.", "tokens": [50364, 10027, 411, 300, 311, 920, 1364, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3118, "seek": 1317900, "start": 13181.0, "end": 13183.0, "text": " Let's scroll down to the bottom of the page.", "tokens": [50464, 961, 311, 11369, 760, 281, 264, 2767, 295, 264, 3028, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3119, "seek": 1317900, "start": 13183.0, "end": 13187.0, "text": " Maybe we should use one of O'Reilly's grays for this bottom.", "tokens": [50564, 2704, 321, 820, 764, 472, 295, 422, 6, 8524, 6917, 311, 677, 3772, 337, 341, 2767, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3120, "seek": 1317900, "start": 13187.0, "end": 13191.0, "text": " We could also use O'Reilly's red for the links.", "tokens": [50764, 492, 727, 611, 764, 422, 6, 8524, 6917, 311, 2182, 337, 264, 6123, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3121, "seek": 1317900, "start": 13191.0, "end": 13193.0, "text": " This gray looks nice.", "tokens": [50964, 639, 10855, 1542, 1481, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3122, "seek": 1317900, "start": 13193.0, "end": 13196.0, "text": " We'll copy the background color.", "tokens": [51064, 492, 603, 5055, 264, 3678, 2017, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3123, "seek": 1317900, "start": 13196.0, "end": 13202.0, "text": " Now back on the Jupyter NB viewer tab, let's try styling this footer.", "tokens": [51214, 823, 646, 322, 264, 22125, 88, 391, 426, 33, 16767, 4421, 11, 718, 311, 853, 27944, 341, 2671, 260, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3124, "seek": 1317900, "start": 13202.0, "end": 13207.0, "text": " The font doesn't have enough contrast now. Let's change it to black.", "tokens": [51514, 440, 10703, 1177, 380, 362, 1547, 8712, 586, 13, 961, 311, 1319, 309, 281, 2211, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07183009437892748, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.00781506858766079}, {"id": 3125, "seek": 1320700, "start": 13207.0, "end": 13213.0, "text": " That seems like it has too much contrast. Let's see what O'Reilly does.", "tokens": [50364, 663, 2544, 411, 309, 575, 886, 709, 8712, 13, 961, 311, 536, 437, 422, 6, 8524, 6917, 775, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06882295729238776, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0003459822037257254}, {"id": 3126, "seek": 1320700, "start": 13213.0, "end": 13218.0, "text": " Looks like they use an off black. We'll use that too.", "tokens": [50664, 10027, 411, 436, 764, 364, 766, 2211, 13, 492, 603, 764, 300, 886, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06882295729238776, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0003459822037257254}, {"id": 3127, "seek": 1320700, "start": 13218.0, "end": 13224.0, "text": " I'd also like to add a top border.", "tokens": [50914, 286, 1116, 611, 411, 281, 909, 257, 1192, 7838, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06882295729238776, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0003459822037257254}, {"id": 3128, "seek": 1320700, "start": 13224.0, "end": 13228.0, "text": " Let's copy the border color that O'Reilly uses.", "tokens": [51214, 961, 311, 5055, 264, 7838, 2017, 300, 422, 6, 8524, 6917, 4960, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06882295729238776, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0003459822037257254}, {"id": 3129, "seek": 1320700, "start": 13228.0, "end": 13233.0, "text": " Looks like they use this off-shaded gray.", "tokens": [51414, 10027, 411, 436, 764, 341, 766, 12, 2716, 12777, 10855, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06882295729238776, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.0003459822037257254}, {"id": 3130, "seek": 1323300, "start": 13233.0, "end": 13238.0, "text": " Now we can just copy this CSS that we've designed in the browser", "tokens": [50364, 823, 321, 393, 445, 5055, 341, 24387, 300, 321, 600, 4761, 294, 264, 11185, 50614], "temperature": 0.0, "avg_logprob": -0.05796983165125693, "compression_ratio": 1.574766355140187, "no_speech_prob": 0.0014549312181770802}, {"id": 3131, "seek": 1323300, "start": 13238.0, "end": 13242.0, "text": " and paste it into our custom CSS in a footer selector.", "tokens": [50614, 293, 9163, 309, 666, 527, 2375, 24387, 294, 257, 2671, 260, 23264, 1672, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05796983165125693, "compression_ratio": 1.574766355140187, "no_speech_prob": 0.0014549312181770802}, {"id": 3132, "seek": 1323300, "start": 13242.0, "end": 13244.0, "text": " Now let's refresh the page.", "tokens": [50814, 823, 718, 311, 15134, 264, 3028, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05796983165125693, "compression_ratio": 1.574766355140187, "no_speech_prob": 0.0014549312181770802}, {"id": 3133, "seek": 1323300, "start": 13244.0, "end": 13248.0, "text": " Scrolling to the bottom, we see that our new styling has been applied.", "tokens": [50914, 2747, 18688, 281, 264, 2767, 11, 321, 536, 300, 527, 777, 27944, 575, 668, 6456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05796983165125693, "compression_ratio": 1.574766355140187, "no_speech_prob": 0.0014549312181770802}, {"id": 3134, "seek": 1323300, "start": 13248.0, "end": 13252.0, "text": " Lastly, we need to change the default link color to that red.", "tokens": [51114, 18072, 11, 321, 643, 281, 1319, 264, 7576, 2113, 2017, 281, 300, 2182, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05796983165125693, "compression_ratio": 1.574766355140187, "no_speech_prob": 0.0014549312181770802}, {"id": 3135, "seek": 1323300, "start": 13252.0, "end": 13258.0, "text": " Back on our custom CSS, let's define an anchor selector.", "tokens": [51314, 5833, 322, 527, 2375, 24387, 11, 718, 311, 6964, 364, 18487, 23264, 1672, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05796983165125693, "compression_ratio": 1.574766355140187, "no_speech_prob": 0.0014549312181770802}, {"id": 3136, "seek": 1325800, "start": 13258.0, "end": 13263.0, "text": " We have four C problems with this anchor tag and this anchor tag.", "tokens": [50364, 492, 362, 1451, 383, 2740, 365, 341, 18487, 6162, 293, 341, 18487, 6162, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11559504812413995, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.0015977224102243781}, {"id": 3137, "seek": 1325800, "start": 13263.0, "end": 13270.0, "text": " Let's define a color for when the FAQ anchor tag is not hovered on.", "tokens": [50614, 961, 311, 6964, 257, 2017, 337, 562, 264, 19894, 48, 18487, 6162, 307, 406, 20076, 292, 322, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11559504812413995, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.0015977224102243781}, {"id": 3138, "seek": 1325800, "start": 13270.0, "end": 13276.0, "text": " We'll use the color that we used for text.", "tokens": [50964, 492, 603, 764, 264, 2017, 300, 321, 1143, 337, 2487, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11559504812413995, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.0015977224102243781}, {"id": 3139, "seek": 1325800, "start": 13276.0, "end": 13282.0, "text": " I'm going to save and then go back to the browser and refresh the page one more time.", "tokens": [51264, 286, 478, 516, 281, 3155, 293, 550, 352, 646, 281, 264, 11185, 293, 15134, 264, 3028, 472, 544, 565, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11559504812413995, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.0015977224102243781}, {"id": 3140, "seek": 1325800, "start": 13282.0, "end": 13285.0, "text": " The FAQ button is still working. Scroll to the bottom.", "tokens": [51564, 440, 19894, 48, 2960, 307, 920, 1364, 13, 35395, 281, 264, 2767, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11559504812413995, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.0015977224102243781}, {"id": 3141, "seek": 1328500, "start": 13285.0, "end": 13290.0, "text": " And it looks like our links are formatted correctly now.", "tokens": [50364, 400, 309, 1542, 411, 527, 6123, 366, 1254, 32509, 8944, 586, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3142, "seek": 1328500, "start": 13290.0, "end": 13296.0, "text": " In the last video, we looked at customizing our MbViewer deployments CSS.", "tokens": [50614, 682, 264, 1036, 960, 11, 321, 2956, 412, 2375, 3319, 527, 376, 65, 30203, 260, 7274, 1117, 24387, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3143, "seek": 1328500, "start": 13296.0, "end": 13300.0, "text": " In this video, we used JavaScript to spiff up the website a little bit.", "tokens": [50914, 682, 341, 960, 11, 321, 1143, 15778, 281, 637, 3661, 493, 264, 3144, 257, 707, 857, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3144, "seek": 1328500, "start": 13300.0, "end": 13304.0, "text": " I found this really cool carousel on Bootstrap's website.", "tokens": [51114, 286, 1352, 341, 534, 1627, 1032, 563, 338, 322, 37263, 372, 4007, 311, 3144, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3145, "seek": 1328500, "start": 13304.0, "end": 13305.0, "text": " Here it is.", "tokens": [51314, 1692, 309, 307, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3146, "seek": 1328500, "start": 13305.0, "end": 13308.0, "text": " Bootstrap is a component that MbViewer already uses,", "tokens": [51364, 37263, 372, 4007, 307, 257, 6542, 300, 376, 65, 30203, 260, 1217, 4960, 11, 51514], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3147, "seek": 1328500, "start": 13308.0, "end": 13311.0, "text": " so we should be able to just drag and drop this code into place.", "tokens": [51514, 370, 321, 820, 312, 1075, 281, 445, 5286, 293, 3270, 341, 3089, 666, 1081, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08202777590070452, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.00805880781263113}, {"id": 3148, "seek": 1331100, "start": 13311.0, "end": 13316.0, "text": " What I want to do is replace the notebook listing in the showcase", "tokens": [50364, 708, 286, 528, 281, 360, 307, 7406, 264, 21060, 22161, 294, 264, 20388, 50614], "temperature": 0.0, "avg_logprob": -0.09722911834716796, "compression_ratio": 1.5655737704918034, "no_speech_prob": 0.00857500545680523}, {"id": 3149, "seek": 1331100, "start": 13316.0, "end": 13319.0, "text": " on our MbViewer with a carousel.", "tokens": [50614, 322, 527, 376, 65, 30203, 260, 365, 257, 1032, 563, 338, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09722911834716796, "compression_ratio": 1.5655737704918034, "no_speech_prob": 0.00857500545680523}, {"id": 3150, "seek": 1331100, "start": 13319.0, "end": 13326.0, "text": " So I'm going to go back to the Bootstrap website and copy and paste the code here.", "tokens": [50764, 407, 286, 478, 516, 281, 352, 646, 281, 264, 37263, 372, 4007, 3144, 293, 5055, 293, 9163, 264, 3089, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09722911834716796, "compression_ratio": 1.5655737704918034, "no_speech_prob": 0.00857500545680523}, {"id": 3151, "seek": 1331100, "start": 13326.0, "end": 13330.0, "text": " Inside the index template in our custom templates folder,", "tokens": [51114, 15123, 264, 8186, 12379, 294, 527, 2375, 21165, 10820, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09722911834716796, "compression_ratio": 1.5655737704918034, "no_speech_prob": 0.00857500545680523}, {"id": 3152, "seek": 1331100, "start": 13330.0, "end": 13335.0, "text": " scrolling down towards the bottom, you can see where the showcase is built.", "tokens": [51314, 29053, 760, 3030, 264, 2767, 11, 291, 393, 536, 689, 264, 20388, 307, 3094, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09722911834716796, "compression_ratio": 1.5655737704918034, "no_speech_prob": 0.00857500545680523}, {"id": 3153, "seek": 1331100, "start": 13335.0, "end": 13339.0, "text": " The JINJA templating for loop is used to iterate over each section", "tokens": [51564, 440, 508, 1464, 27818, 9100, 990, 337, 6367, 307, 1143, 281, 44497, 670, 1184, 3541, 51764], "temperature": 0.0, "avg_logprob": -0.09722911834716796, "compression_ratio": 1.5655737704918034, "no_speech_prob": 0.00857500545680523}, {"id": 3154, "seek": 1333900, "start": 13339.0, "end": 13343.0, "text": " and then it's used again to iterate over each link in each section.", "tokens": [50364, 293, 550, 309, 311, 1143, 797, 281, 44497, 670, 1184, 2113, 294, 1184, 3541, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3155, "seek": 1333900, "start": 13343.0, "end": 13347.0, "text": " We'll use this logic to compile the different slides for our carousel.", "tokens": [50564, 492, 603, 764, 341, 9952, 281, 31413, 264, 819, 9788, 337, 527, 1032, 563, 338, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3156, "seek": 1333900, "start": 13347.0, "end": 13352.0, "text": " For now, I'm going to insert the carousel code above this existing code", "tokens": [50764, 1171, 586, 11, 286, 478, 516, 281, 8969, 264, 1032, 563, 338, 3089, 3673, 341, 6741, 3089, 51014], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3157, "seek": 1333900, "start": 13352.0, "end": 13355.0, "text": " in between the header and the showcase,", "tokens": [51014, 294, 1296, 264, 23117, 293, 264, 20388, 11, 51164], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3158, "seek": 1333900, "start": 13355.0, "end": 13358.0, "text": " pasting what we copied from Bootstrap's website.", "tokens": [51164, 1791, 278, 437, 321, 25365, 490, 37263, 372, 4007, 311, 3144, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3159, "seek": 1333900, "start": 13358.0, "end": 13361.0, "text": " I'm going to remove the indicator dots on the carousel.", "tokens": [51314, 286, 478, 516, 281, 4159, 264, 16961, 15026, 322, 264, 1032, 563, 338, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3160, "seek": 1333900, "start": 13361.0, "end": 13367.0, "text": " Also, from experience, I know that we're not loading glyph icon on MbViewer by default,", "tokens": [51464, 2743, 11, 490, 1752, 11, 286, 458, 300, 321, 434, 406, 15114, 22633, 950, 6528, 322, 376, 65, 30203, 260, 538, 7576, 11, 51764], "temperature": 0.0, "avg_logprob": -0.05423246730457653, "compression_ratio": 1.6468401486988848, "no_speech_prob": 0.01590106636285782}, {"id": 3161, "seek": 1336700, "start": 13367.0, "end": 13369.0, "text": " and I don't feel like adding that dependency.", "tokens": [50364, 293, 286, 500, 380, 841, 411, 5127, 300, 33621, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3162, "seek": 1336700, "start": 13369.0, "end": 13371.0, "text": " Instead, we're using font awesome.", "tokens": [50464, 7156, 11, 321, 434, 1228, 10703, 3476, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3163, "seek": 1336700, "start": 13371.0, "end": 13380.0, "text": " Equivalent icons would be icon-prev and icon-next.", "tokens": [50564, 15624, 3576, 317, 23308, 576, 312, 6528, 12, 3712, 85, 293, 6528, 12, 716, 734, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3164, "seek": 1336700, "start": 13380.0, "end": 13385.0, "text": " Now, what we need to do is use that JINJA code that iterates through each item", "tokens": [51014, 823, 11, 437, 321, 643, 281, 360, 307, 764, 300, 508, 1464, 27818, 3089, 300, 17138, 1024, 807, 1184, 3174, 51264], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3165, "seek": 1336700, "start": 13385.0, "end": 13387.0, "text": " to construct our carousel slides.", "tokens": [51264, 281, 7690, 527, 1032, 563, 338, 9788, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3166, "seek": 1336700, "start": 13387.0, "end": 13390.0, "text": " It looks like each individual unit is an item.", "tokens": [51364, 467, 1542, 411, 1184, 2609, 4985, 307, 364, 3174, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3167, "seek": 1336700, "start": 13390.0, "end": 13392.0, "text": " The first item is active.", "tokens": [51514, 440, 700, 3174, 307, 4967, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3168, "seek": 1336700, "start": 13392.0, "end": 13395.0, "text": " Let's go ahead and delete the ellipses.", "tokens": [51614, 961, 311, 352, 2286, 293, 12097, 264, 8284, 2600, 279, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06428637460013416, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.002182446653023362}, {"id": 3169, "seek": 1339500, "start": 13395.0, "end": 13400.0, "text": " Now, let's move the JINJA templating loop logic below this first item", "tokens": [50364, 823, 11, 718, 311, 1286, 264, 508, 1464, 27818, 9100, 990, 6367, 9952, 2507, 341, 700, 3174, 50614], "temperature": 0.0, "avg_logprob": -0.08634531357709099, "compression_ratio": 1.6290322580645162, "no_speech_prob": 0.000829508644528687}, {"id": 3170, "seek": 1339500, "start": 13400.0, "end": 13405.0, "text": " to create the latter items.", "tokens": [50614, 281, 1884, 264, 18481, 4754, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08634531357709099, "compression_ratio": 1.6290322580645162, "no_speech_prob": 0.000829508644528687}, {"id": 3171, "seek": 1339500, "start": 13405.0, "end": 13409.0, "text": " We're going to just ignore the notion of sections,", "tokens": [50864, 492, 434, 516, 281, 445, 11200, 264, 10710, 295, 10863, 11, 51064], "temperature": 0.0, "avg_logprob": -0.08634531357709099, "compression_ratio": 1.6290322580645162, "no_speech_prob": 0.000829508644528687}, {"id": 3172, "seek": 1339500, "start": 13409.0, "end": 13415.0, "text": " so we'll group both the loops next to each other.", "tokens": [51064, 370, 321, 603, 1594, 1293, 264, 16121, 958, 281, 1184, 661, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08634531357709099, "compression_ratio": 1.6290322580645162, "no_speech_prob": 0.000829508644528687}, {"id": 3173, "seek": 1339500, "start": 13415.0, "end": 13419.0, "text": " Now, let's copy the item template into the loop.", "tokens": [51364, 823, 11, 718, 311, 5055, 264, 3174, 12379, 666, 264, 6367, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08634531357709099, "compression_ratio": 1.6290322580645162, "no_speech_prob": 0.000829508644528687}, {"id": 3174, "seek": 1339500, "start": 13419.0, "end": 13423.0, "text": " Then we'll copy the image source into the item's image.", "tokens": [51564, 1396, 321, 603, 5055, 264, 3256, 4009, 666, 264, 3174, 311, 3256, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08634531357709099, "compression_ratio": 1.6290322580645162, "no_speech_prob": 0.000829508644528687}, {"id": 3175, "seek": 1342300, "start": 13423.0, "end": 13428.0, "text": " We'll also copy the link text as the alternative text", "tokens": [50364, 492, 603, 611, 5055, 264, 2113, 2487, 382, 264, 8535, 2487, 50614], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3176, "seek": 1342300, "start": 13428.0, "end": 13430.0, "text": " and use it as the caption.", "tokens": [50614, 293, 764, 309, 382, 264, 31974, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3177, "seek": 1342300, "start": 13430.0, "end": 13434.0, "text": " Then we'll take the anchor tag and put it around the caption.", "tokens": [50714, 1396, 321, 603, 747, 264, 18487, 6162, 293, 829, 309, 926, 264, 31974, 13, 50914], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3178, "seek": 1342300, "start": 13434.0, "end": 13437.0, "text": " This will make the caption clickable.", "tokens": [50914, 639, 486, 652, 264, 31974, 2052, 712, 13, 51064], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3179, "seek": 1342300, "start": 13437.0, "end": 13441.0, "text": " Now, finally, we'll remove the original code from the gallery.", "tokens": [51064, 823, 11, 2721, 11, 321, 603, 4159, 264, 3380, 3089, 490, 264, 18378, 13, 51264], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3180, "seek": 1342300, "start": 13441.0, "end": 13447.0, "text": " We'll save our changes and refresh the page to see how it renders.", "tokens": [51264, 492, 603, 3155, 527, 2962, 293, 15134, 264, 3028, 281, 536, 577, 309, 6125, 433, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3181, "seek": 1342300, "start": 13447.0, "end": 13448.0, "text": " So here's the page.", "tokens": [51564, 407, 510, 311, 264, 3028, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3182, "seek": 1342300, "start": 13448.0, "end": 13451.0, "text": " You can see it doesn't have the gallery below anymore.", "tokens": [51614, 509, 393, 536, 309, 1177, 380, 362, 264, 18378, 2507, 3602, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04926094019188071, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.010324927046895027}, {"id": 3183, "seek": 1345100, "start": 13451.0, "end": 13454.0, "text": " Now it just has this carousel that rotates through images.", "tokens": [50364, 823, 309, 445, 575, 341, 1032, 563, 338, 300, 42133, 807, 5267, 13, 50514], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3184, "seek": 1345100, "start": 13454.0, "end": 13459.0, "text": " And each image has a link that we can click to open that notebook.", "tokens": [50514, 400, 1184, 3256, 575, 257, 2113, 300, 321, 393, 2052, 281, 1269, 300, 21060, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3185, "seek": 1345100, "start": 13459.0, "end": 13464.0, "text": " However, you may notice the size is constantly changing.", "tokens": [50764, 2908, 11, 291, 815, 3449, 264, 2744, 307, 6460, 4473, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3186, "seek": 1345100, "start": 13464.0, "end": 13467.0, "text": " It must depend on the image height.", "tokens": [51014, 467, 1633, 5672, 322, 264, 3256, 6681, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3187, "seek": 1345100, "start": 13467.0, "end": 13469.0, "text": " Let's fix the size of the carousel.", "tokens": [51164, 961, 311, 3191, 264, 2744, 295, 264, 1032, 563, 338, 13, 51264], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3188, "seek": 1345100, "start": 13469.0, "end": 13471.0, "text": " We'll do so using CSS.", "tokens": [51264, 492, 603, 360, 370, 1228, 24387, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3189, "seek": 1345100, "start": 13471.0, "end": 13474.0, "text": " First, let's get the ID of the carousel.", "tokens": [51364, 2386, 11, 718, 311, 483, 264, 7348, 295, 264, 1032, 563, 338, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3190, "seek": 1345100, "start": 13474.0, "end": 13475.0, "text": " Copy that.", "tokens": [51514, 25653, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3191, "seek": 1345100, "start": 13475.0, "end": 13479.0, "text": " Then in your custom CSS, add a selector for the carousel.", "tokens": [51564, 1396, 294, 428, 2375, 24387, 11, 909, 257, 23264, 1672, 337, 264, 1032, 563, 338, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04899780974428878, "compression_ratio": 1.6192468619246863, "no_speech_prob": 0.0015486303018406034}, {"id": 3192, "seek": 1347900, "start": 13479.0, "end": 13482.0, "text": " To select an ID, prefix with the hashtag.", "tokens": [50364, 1407, 3048, 364, 7348, 11, 46969, 365, 264, 20379, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3193, "seek": 1347900, "start": 13482.0, "end": 13488.0, "text": " Now set the height to 300 pixels and the width to 300 pixels.", "tokens": [50514, 823, 992, 264, 6681, 281, 6641, 18668, 293, 264, 11402, 281, 6641, 18668, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3194, "seek": 1347900, "start": 13488.0, "end": 13490.0, "text": " Save.", "tokens": [50814, 15541, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3195, "seek": 1347900, "start": 13490.0, "end": 13493.0, "text": " And let's go back to the web browser to see how that renders.", "tokens": [50914, 400, 718, 311, 352, 646, 281, 264, 3670, 11185, 281, 536, 577, 300, 6125, 433, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3196, "seek": 1347900, "start": 13493.0, "end": 13495.0, "text": " We're going to refresh the page.", "tokens": [51064, 492, 434, 516, 281, 15134, 264, 3028, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3197, "seek": 1347900, "start": 13495.0, "end": 13498.0, "text": " Here's what our smaller carousel looks like.", "tokens": [51164, 1692, 311, 437, 527, 4356, 1032, 563, 338, 1542, 411, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3198, "seek": 1347900, "start": 13498.0, "end": 13502.0, "text": " We should probably center it in the page and add a margin.", "tokens": [51314, 492, 820, 1391, 3056, 309, 294, 264, 3028, 293, 909, 257, 10270, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3199, "seek": 1347900, "start": 13502.0, "end": 13507.0, "text": " It looks kind of weird hugging the bottom so closely in the top.", "tokens": [51514, 467, 1542, 733, 295, 3657, 41706, 264, 2767, 370, 8185, 294, 264, 1192, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05900022218812187, "compression_ratio": 1.5413223140495869, "no_speech_prob": 0.00047282016021199524}, {"id": 3200, "seek": 1350700, "start": 13507.0, "end": 13512.0, "text": " Let's try centering it in the web browser.", "tokens": [50364, 961, 311, 853, 1489, 1794, 309, 294, 264, 3670, 11185, 13, 50614], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3201, "seek": 1350700, "start": 13512.0, "end": 13516.0, "text": " By setting margin left and right to auto, the element will center.", "tokens": [50614, 3146, 3287, 10270, 1411, 293, 558, 281, 8399, 11, 264, 4478, 486, 3056, 13, 50814], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3202, "seek": 1350700, "start": 13516.0, "end": 13522.0, "text": " Now let's add a top margin to give it some distance from this horizontal line.", "tokens": [50814, 823, 718, 311, 909, 257, 1192, 10270, 281, 976, 309, 512, 4560, 490, 341, 12750, 1622, 13, 51114], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3203, "seek": 1350700, "start": 13522.0, "end": 13524.0, "text": " 40 pixels looks good.", "tokens": [51114, 3356, 18668, 1542, 665, 13, 51214], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3204, "seek": 1350700, "start": 13524.0, "end": 13527.0, "text": " Let's do the same with the bottom.", "tokens": [51214, 961, 311, 360, 264, 912, 365, 264, 2767, 13, 51364], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3205, "seek": 1350700, "start": 13527.0, "end": 13529.0, "text": " Now take one last look.", "tokens": [51364, 823, 747, 472, 1036, 574, 13, 51464], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3206, "seek": 1350700, "start": 13529.0, "end": 13531.0, "text": " That looks good.", "tokens": [51464, 663, 1542, 665, 13, 51564], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3207, "seek": 1350700, "start": 13531.0, "end": 13535.0, "text": " Let's copy and paste this style back to our CSS.", "tokens": [51564, 961, 311, 5055, 293, 9163, 341, 3758, 646, 281, 527, 24387, 13, 51764], "temperature": 0.0, "avg_logprob": -0.055930728713671364, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0002165364712709561}, {"id": 3208, "seek": 1353500, "start": 13535.0, "end": 13542.0, "text": " Oops, looks like I forgot to copy margin left and right auto.", "tokens": [50364, 21726, 11, 1542, 411, 286, 5298, 281, 5055, 10270, 1411, 293, 558, 8399, 13, 50714], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3209, "seek": 1353500, "start": 13542.0, "end": 13546.0, "text": " Now we need to get rid of that placeholder for the first active item.", "tokens": [50714, 823, 321, 643, 281, 483, 3973, 295, 300, 1081, 20480, 337, 264, 700, 4967, 3174, 13, 50914], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3210, "seek": 1353500, "start": 13546.0, "end": 13551.0, "text": " In index.html, in the carousel code, you can see that item here.", "tokens": [50914, 682, 8186, 13, 357, 15480, 11, 294, 264, 1032, 563, 338, 3089, 11, 291, 393, 536, 300, 3174, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3211, "seek": 1353500, "start": 13551.0, "end": 13553.0, "text": " Go ahead and remove that.", "tokens": [51164, 1037, 2286, 293, 4159, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3212, "seek": 1353500, "start": 13553.0, "end": 13557.0, "text": " What we need to do is only add active to the first class.", "tokens": [51264, 708, 321, 643, 281, 360, 307, 787, 909, 4967, 281, 264, 700, 1508, 13, 51464], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3213, "seek": 1353500, "start": 13557.0, "end": 13560.0, "text": " To do that, let's create a flag.", "tokens": [51464, 1407, 360, 300, 11, 718, 311, 1884, 257, 7166, 13, 51614], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3214, "seek": 1353500, "start": 13560.0, "end": 13563.0, "text": " Once that flag is used once, we'll set it the false.", "tokens": [51614, 3443, 300, 7166, 307, 1143, 1564, 11, 321, 603, 992, 309, 264, 7908, 13, 51764], "temperature": 0.0, "avg_logprob": -0.057998184724287555, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.000939853664021939}, {"id": 3215, "seek": 1356300, "start": 13563.0, "end": 13571.0, "text": " We can use the ginger set command to set this flag.", "tokens": [50364, 492, 393, 764, 264, 14966, 992, 5622, 281, 992, 341, 7166, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09962878792972887, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.000519283174071461}, {"id": 3216, "seek": 1356300, "start": 13571.0, "end": 13577.0, "text": " Then we'll test for that in class.", "tokens": [50764, 1396, 321, 603, 1500, 337, 300, 294, 1508, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09962878792972887, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.000519283174071461}, {"id": 3217, "seek": 1356300, "start": 13577.0, "end": 13583.0, "text": " Lastly, let's make sure we set first the false.", "tokens": [51064, 18072, 11, 718, 311, 652, 988, 321, 992, 700, 264, 7908, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09962878792972887, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.000519283174071461}, {"id": 3218, "seek": 1356300, "start": 13583.0, "end": 13587.0, "text": " When we set first the false here, we're actually declaring a new variable first", "tokens": [51364, 1133, 321, 992, 700, 264, 7908, 510, 11, 321, 434, 767, 40374, 257, 777, 7006, 700, 51564], "temperature": 0.0, "avg_logprob": -0.09962878792972887, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.000519283174071461}, {"id": 3219, "seek": 1358700, "start": 13587.0, "end": 13593.0, "text": " within the scope of this for loop that overrides the first declared in the outer scope.", "tokens": [50364, 1951, 264, 11923, 295, 341, 337, 6367, 300, 670, 81, 1875, 264, 700, 15489, 294, 264, 10847, 11923, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3220, "seek": 1358700, "start": 13593.0, "end": 13597.0, "text": " This means when we get to the next for loop, first will be set to true again.", "tokens": [50664, 639, 1355, 562, 321, 483, 281, 264, 958, 337, 6367, 11, 700, 486, 312, 992, 281, 2074, 797, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3221, "seek": 1358700, "start": 13597.0, "end": 13600.0, "text": " So we have to set first the false twice.", "tokens": [50864, 407, 321, 362, 281, 992, 700, 264, 7908, 6091, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3222, "seek": 1358700, "start": 13600.0, "end": 13602.0, "text": " Let's refresh the page.", "tokens": [51014, 961, 311, 15134, 264, 3028, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3223, "seek": 1358700, "start": 13602.0, "end": 13604.0, "text": " Ah, looks like that worked.", "tokens": [51114, 2438, 11, 1542, 411, 300, 2732, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3224, "seek": 1358700, "start": 13604.0, "end": 13607.0, "text": " Awesome.", "tokens": [51214, 10391, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3225, "seek": 1358700, "start": 13607.0, "end": 13615.0, "text": " In the last video, we talked about adding custom CSS and custom JavaScript to your NB viewer deployment.", "tokens": [51364, 682, 264, 1036, 960, 11, 321, 2825, 466, 5127, 2375, 24387, 293, 2375, 15778, 281, 428, 426, 33, 16767, 19317, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09457735061645507, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.03620569780468941}, {"id": 3226, "seek": 1361500, "start": 13615.0, "end": 13620.0, "text": " In this video, we'll talk about changing what NB viewer is hosting to the user.", "tokens": [50364, 682, 341, 960, 11, 321, 603, 751, 466, 4473, 437, 426, 33, 16767, 307, 16058, 281, 264, 4195, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06105193138122558, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.02227107435464859}, {"id": 3227, "seek": 1361500, "start": 13620.0, "end": 13627.0, "text": " NB viewer has a notion of providers, which are the things that dictate what NB viewer can host.", "tokens": [50614, 426, 33, 16767, 575, 257, 10710, 295, 11330, 11, 597, 366, 264, 721, 300, 36071, 437, 426, 33, 16767, 393, 3975, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06105193138122558, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.02227107435464859}, {"id": 3228, "seek": 1361500, "start": 13627.0, "end": 13633.0, "text": " There are two types of providers, URI rewrites and handlers.", "tokens": [50964, 821, 366, 732, 3467, 295, 11330, 11, 624, 5577, 319, 86, 30931, 293, 1011, 11977, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06105193138122558, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.02227107435464859}, {"id": 3229, "seek": 1361500, "start": 13633.0, "end": 13638.0, "text": " URI rewrites take textual content that's entered into the go bar of NB viewer", "tokens": [51264, 624, 5577, 319, 86, 30931, 747, 2487, 901, 2701, 300, 311, 9065, 666, 264, 352, 2159, 295, 426, 33, 16767, 51514], "temperature": 0.0, "avg_logprob": -0.06105193138122558, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.02227107435464859}, {"id": 3230, "seek": 1361500, "start": 13638.0, "end": 13642.0, "text": " and translate it to a canonical NB viewer URL,", "tokens": [51514, 293, 13799, 309, 281, 257, 46491, 426, 33, 16767, 12905, 11, 51714], "temperature": 0.0, "avg_logprob": -0.06105193138122558, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.02227107435464859}, {"id": 3231, "seek": 1364200, "start": 13642.0, "end": 13646.0, "text": " a URL that NB viewer understands and is capable of rendering.", "tokens": [50364, 257, 12905, 300, 426, 33, 16767, 15146, 293, 307, 8189, 295, 22407, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04378075897693634, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.007343658246099949}, {"id": 3232, "seek": 1364200, "start": 13646.0, "end": 13652.0, "text": " Handlers are things that are designed to interpret and load from NB viewer URLs.", "tokens": [50564, 8854, 11977, 366, 721, 300, 366, 4761, 281, 7302, 293, 3677, 490, 426, 33, 16767, 43267, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04378075897693634, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.007343658246099949}, {"id": 3233, "seek": 1364200, "start": 13652.0, "end": 13659.0, "text": " The handler is the thing that actually fetches the resources from the local or remote location.", "tokens": [50864, 440, 41967, 307, 264, 551, 300, 767, 15136, 3781, 264, 3593, 490, 264, 2654, 420, 8607, 4914, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04378075897693634, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.007343658246099949}, {"id": 3234, "seek": 1364200, "start": 13659.0, "end": 13669.0, "text": " For example, the GitHub handler accesses notebook content directly from GitHub using GitHub's API instead of standard HTTP.", "tokens": [51214, 1171, 1365, 11, 264, 23331, 41967, 2105, 279, 21060, 2701, 3838, 490, 23331, 1228, 23331, 311, 9362, 2602, 295, 3832, 33283, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04378075897693634, "compression_ratio": 1.5947136563876652, "no_speech_prob": 0.007343658246099949}, {"id": 3235, "seek": 1366900, "start": 13669.0, "end": 13673.0, "text": " Let's start by configuring NB viewer to host local files.", "tokens": [50364, 961, 311, 722, 538, 6662, 1345, 426, 33, 16767, 281, 3975, 2654, 7098, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09279543382150156, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.020955603569746017}, {"id": 3236, "seek": 1366900, "start": 13673.0, "end": 13681.0, "text": " Sticking to our O'Reilly themed example, let's pretend that O'Reilly wants to host files from a network-attached storage device.", "tokens": [50564, 745, 10401, 281, 527, 422, 6, 8524, 6917, 33920, 1365, 11, 718, 311, 11865, 300, 422, 6, 8524, 6917, 2738, 281, 3975, 7098, 490, 257, 3209, 12, 1591, 15095, 6725, 4302, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09279543382150156, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.020955603569746017}, {"id": 3237, "seek": 1366900, "start": 13681.0, "end": 13685.0, "text": " Let's say that that storage device is SimLink into the home directory.", "tokens": [50964, 961, 311, 584, 300, 300, 6725, 4302, 307, 3998, 26822, 666, 264, 1280, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09279543382150156, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.020955603569746017}, {"id": 3238, "seek": 1366900, "start": 13685.0, "end": 13688.0, "text": " We'll pretend that that SimLink is called network.", "tokens": [51164, 492, 603, 11865, 300, 300, 3998, 26822, 307, 1219, 3209, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09279543382150156, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.020955603569746017}, {"id": 3239, "seek": 1366900, "start": 13688.0, "end": 13696.0, "text": " I'm going to create this folder just as an example that we can use to demonstrate this feature of NB viewer.", "tokens": [51314, 286, 478, 516, 281, 1884, 341, 10820, 445, 382, 364, 1365, 300, 321, 393, 764, 281, 11698, 341, 4111, 295, 426, 33, 16767, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09279543382150156, "compression_ratio": 1.709016393442623, "no_speech_prob": 0.020955603569746017}, {"id": 3240, "seek": 1369600, "start": 13696.0, "end": 13702.0, "text": " Let's pretend that in the network-attached storage drive, there's a subfolder called notebooks.", "tokens": [50364, 961, 311, 11865, 300, 294, 264, 3209, 12, 1591, 15095, 6725, 3332, 11, 456, 311, 257, 1422, 18353, 260, 1219, 43782, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06299126750290995, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0009110048995353281}, {"id": 3241, "seek": 1369600, "start": 13702.0, "end": 13706.0, "text": " And then inside the notebooks folder, there are author folders.", "tokens": [50664, 400, 550, 1854, 264, 43782, 10820, 11, 456, 366, 3793, 31082, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06299126750290995, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0009110048995353281}, {"id": 3242, "seek": 1369600, "start": 13706.0, "end": 13711.0, "text": " For now, I'll just create an authored folder for myself.", "tokens": [50864, 1171, 586, 11, 286, 603, 445, 1884, 364, 6979, 2769, 10820, 337, 2059, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06299126750290995, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0009110048995353281}, {"id": 3243, "seek": 1369600, "start": 13711.0, "end": 13715.0, "text": " I have some example notebooks that are sitting inside my home folder.", "tokens": [51114, 286, 362, 512, 1365, 43782, 300, 366, 3798, 1854, 452, 1280, 10820, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06299126750290995, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0009110048995353281}, {"id": 3244, "seek": 1369600, "start": 13715.0, "end": 13723.0, "text": " I'm going to copy those over to here.", "tokens": [51314, 286, 478, 516, 281, 5055, 729, 670, 281, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06299126750290995, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0009110048995353281}, {"id": 3245, "seek": 1369600, "start": 13723.0, "end": 13725.0, "text": " Now let's take a look at the NB viewer source code.", "tokens": [51714, 823, 718, 311, 747, 257, 574, 412, 264, 426, 33, 16767, 4009, 3089, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06299126750290995, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0009110048995353281}, {"id": 3246, "seek": 1372500, "start": 13725.0, "end": 13731.0, "text": " I'm going to CD into the NB viewer repository and open Adam.", "tokens": [50364, 286, 478, 516, 281, 6743, 666, 264, 426, 33, 16767, 25841, 293, 1269, 7938, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06629323500853318, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.009409940801560879}, {"id": 3247, "seek": 1372500, "start": 13731.0, "end": 13736.0, "text": " Inside the NB viewer subfolder, I'm going to open app.py.", "tokens": [50664, 15123, 264, 426, 33, 16767, 1422, 18353, 260, 11, 286, 478, 516, 281, 1269, 724, 13, 8200, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06629323500853318, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.009409940801560879}, {"id": 3248, "seek": 1372500, "start": 13736.0, "end": 13742.0, "text": " Scrolling down to the very bottom of app.py, we see all the command line arguments that we can pass to NB viewer.", "tokens": [50914, 2747, 18688, 760, 281, 264, 588, 2767, 295, 724, 13, 8200, 11, 321, 536, 439, 264, 5622, 1622, 12869, 300, 321, 393, 1320, 281, 426, 33, 16767, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06629323500853318, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.009409940801560879}, {"id": 3249, "seek": 1372500, "start": 13742.0, "end": 13745.0, "text": " One of the command line arguments is local files.", "tokens": [51214, 1485, 295, 264, 5622, 1622, 12869, 307, 2654, 7098, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06629323500853318, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.009409940801560879}, {"id": 3250, "seek": 1372500, "start": 13745.0, "end": 13749.0, "text": " This tells NB viewer to host files from the local file system.", "tokens": [51364, 639, 5112, 426, 33, 16767, 281, 3975, 7098, 490, 264, 2654, 3991, 1185, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06629323500853318, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.009409940801560879}, {"id": 3251, "seek": 1372500, "start": 13749.0, "end": 13751.0, "text": " Let's use this.", "tokens": [51564, 961, 311, 764, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06629323500853318, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.009409940801560879}, {"id": 3252, "seek": 1375100, "start": 13751.0, "end": 13753.0, "text": " I've closed the NB viewer server.", "tokens": [50364, 286, 600, 5395, 264, 426, 33, 16767, 7154, 13, 50464], "temperature": 0.0, "avg_logprob": -0.051650348163786386, "compression_ratio": 1.558252427184466, "no_speech_prob": 0.0025506098754704}, {"id": 3253, "seek": 1375100, "start": 13753.0, "end": 13755.0, "text": " I'll relaunch it with this new command.", "tokens": [50464, 286, 603, 5195, 1680, 309, 365, 341, 777, 5622, 13, 50564], "temperature": 0.0, "avg_logprob": -0.051650348163786386, "compression_ratio": 1.558252427184466, "no_speech_prob": 0.0025506098754704}, {"id": 3254, "seek": 1375100, "start": 13755.0, "end": 13766.0, "text": " But before I launch, remember that we need to set the correct environment variable in order for our custom templates to be loaded.", "tokens": [50564, 583, 949, 286, 4025, 11, 1604, 300, 321, 643, 281, 992, 264, 3006, 2823, 7006, 294, 1668, 337, 527, 2375, 21165, 281, 312, 13210, 13, 51114], "temperature": 0.0, "avg_logprob": -0.051650348163786386, "compression_ratio": 1.558252427184466, "no_speech_prob": 0.0025506098754704}, {"id": 3255, "seek": 1375100, "start": 13766.0, "end": 13773.0, "text": " Now let's launch NB viewer.", "tokens": [51114, 823, 718, 311, 4025, 426, 33, 16767, 13, 51464], "temperature": 0.0, "avg_logprob": -0.051650348163786386, "compression_ratio": 1.558252427184466, "no_speech_prob": 0.0025506098754704}, {"id": 3256, "seek": 1375100, "start": 13773.0, "end": 13778.0, "text": " Let's switch to the web browser to see if we can load files from the local files system.", "tokens": [51464, 961, 311, 3679, 281, 264, 3670, 11185, 281, 536, 498, 321, 393, 3677, 7098, 490, 264, 2654, 7098, 1185, 13, 51714], "temperature": 0.0, "avg_logprob": -0.051650348163786386, "compression_ratio": 1.558252427184466, "no_speech_prob": 0.0025506098754704}, {"id": 3257, "seek": 1377800, "start": 13778.0, "end": 13781.0, "text": " I'm going to try accessing the notebook using the go bar.", "tokens": [50364, 286, 478, 516, 281, 853, 26440, 264, 21060, 1228, 264, 352, 2159, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07355438364614354, "compression_ratio": 1.6596638655462186, "no_speech_prob": 0.016908500343561172}, {"id": 3258, "seek": 1377800, "start": 13781.0, "end": 13788.0, "text": " I'll type in the subpath to the notebook from its location inside network.", "tokens": [50514, 286, 603, 2010, 294, 264, 1422, 31852, 281, 264, 21060, 490, 1080, 4914, 1854, 3209, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07355438364614354, "compression_ratio": 1.6596638655462186, "no_speech_prob": 0.016908500343561172}, {"id": 3259, "seek": 1377800, "start": 13788.0, "end": 13790.0, "text": " Doing that didn't work.", "tokens": [50864, 18496, 300, 994, 380, 589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07355438364614354, "compression_ratio": 1.6596638655462186, "no_speech_prob": 0.016908500343561172}, {"id": 3260, "seek": 1377800, "start": 13790.0, "end": 13795.0, "text": " This would make you want to jump to the conclusion that the local files setting isn't working.", "tokens": [50964, 639, 576, 652, 291, 528, 281, 3012, 281, 264, 10063, 300, 264, 2654, 7098, 3287, 1943, 380, 1364, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07355438364614354, "compression_ratio": 1.6596638655462186, "no_speech_prob": 0.016908500343561172}, {"id": 3261, "seek": 1377800, "start": 13795.0, "end": 13798.0, "text": " However, this is an invalid conclusion.", "tokens": [51214, 2908, 11, 341, 307, 364, 34702, 10063, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07355438364614354, "compression_ratio": 1.6596638655462186, "no_speech_prob": 0.016908500343561172}, {"id": 3262, "seek": 1377800, "start": 13798.0, "end": 13806.0, "text": " If you pay attention to the URL, you'll see that URL for slash was prefixed to what we tried to access.", "tokens": [51364, 759, 291, 1689, 3202, 281, 264, 12905, 11, 291, 603, 536, 300, 12905, 337, 17330, 390, 18417, 40303, 281, 437, 321, 3031, 281, 2105, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07355438364614354, "compression_ratio": 1.6596638655462186, "no_speech_prob": 0.016908500343561172}, {"id": 3263, "seek": 1380600, "start": 13806.0, "end": 13812.0, "text": " This is telling NB viewer to use the URL handler to load the following content.", "tokens": [50364, 639, 307, 3585, 426, 33, 16767, 281, 764, 264, 12905, 41967, 281, 3677, 264, 3480, 2701, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1414953895977565, "compression_ratio": 1.68503937007874, "no_speech_prob": 0.013632026500999928}, {"id": 3264, "seek": 1380600, "start": 13812.0, "end": 13821.0, "text": " Of course, notebooks for slash jd frederick four slash one dot ipynb is not a domain name and is not located within a public top level domain name.", "tokens": [50664, 2720, 1164, 11, 43782, 337, 17330, 361, 67, 283, 986, 260, 618, 1451, 17330, 472, 5893, 28501, 2534, 65, 307, 406, 257, 9274, 1315, 293, 307, 406, 6870, 1951, 257, 1908, 1192, 1496, 9274, 1315, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1414953895977565, "compression_ratio": 1.68503937007874, "no_speech_prob": 0.013632026500999928}, {"id": 3265, "seek": 1380600, "start": 13821.0, "end": 13826.0, "text": " So it makes sense that URL would fail to load this content.", "tokens": [51114, 407, 309, 1669, 2020, 300, 12905, 576, 3061, 281, 3677, 341, 2701, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1414953895977565, "compression_ratio": 1.68503937007874, "no_speech_prob": 0.013632026500999928}, {"id": 3266, "seek": 1380600, "start": 13826.0, "end": 13831.0, "text": " Instead, what we need to do is change the URL prefix to local file.", "tokens": [51364, 7156, 11, 437, 321, 643, 281, 360, 307, 1319, 264, 12905, 46969, 281, 2654, 3991, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1414953895977565, "compression_ratio": 1.68503937007874, "no_speech_prob": 0.013632026500999928}, {"id": 3267, "seek": 1380600, "start": 13831.0, "end": 13833.0, "text": " And that will get the notebook to load.", "tokens": [51614, 400, 300, 486, 483, 264, 21060, 281, 3677, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1414953895977565, "compression_ratio": 1.68503937007874, "no_speech_prob": 0.013632026500999928}, {"id": 3268, "seek": 1380600, "start": 13833.0, "end": 13835.0, "text": " We want to automate this though.", "tokens": [51714, 492, 528, 281, 31605, 341, 1673, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1414953895977565, "compression_ratio": 1.68503937007874, "no_speech_prob": 0.013632026500999928}, {"id": 3269, "seek": 1383500, "start": 13835.0, "end": 13846.0, "text": " We don't want the go bar to not work and we would like the go bar to automatically translate to this canonical and be viewer local file format.", "tokens": [50364, 492, 500, 380, 528, 264, 352, 2159, 281, 406, 589, 293, 321, 576, 411, 264, 352, 2159, 281, 6772, 13799, 281, 341, 46491, 293, 312, 16767, 2654, 3991, 7877, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0648462325334549, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.008844457566738129}, {"id": 3270, "seek": 1383500, "start": 13846.0, "end": 13850.0, "text": " In the last video, we got the NB viewer local files provider working.", "tokens": [50914, 682, 264, 1036, 960, 11, 321, 658, 264, 426, 33, 16767, 2654, 7098, 12398, 1364, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0648462325334549, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.008844457566738129}, {"id": 3271, "seek": 1383500, "start": 13850.0, "end": 13854.0, "text": " However, we weren't able to access it via the go bar.", "tokens": [51114, 2908, 11, 321, 4999, 380, 1075, 281, 2105, 309, 5766, 264, 352, 2159, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0648462325334549, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.008844457566738129}, {"id": 3272, "seek": 1383500, "start": 13854.0, "end": 13862.0, "text": " In this video, we'll write a URI rewrite provider that will allow us to access local files easily from the go bar.", "tokens": [51314, 682, 341, 960, 11, 321, 603, 2464, 257, 624, 5577, 28132, 12398, 300, 486, 2089, 505, 281, 2105, 2654, 7098, 3612, 490, 264, 352, 2159, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0648462325334549, "compression_ratio": 1.8018867924528301, "no_speech_prob": 0.008844457566738129}, {"id": 3273, "seek": 1386200, "start": 13862.0, "end": 13867.0, "text": " The first step is to open up Adam inside your NB viewer repository.", "tokens": [50364, 440, 700, 1823, 307, 281, 1269, 493, 7938, 1854, 428, 426, 33, 16767, 25841, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11485809390827761, "compression_ratio": 1.7386363636363635, "no_speech_prob": 0.0408371202647686}, {"id": 3274, "seek": 1386200, "start": 13867.0, "end": 13871.0, "text": " Next, open the NB viewer sub folder and inside that open providers.", "tokens": [50614, 3087, 11, 1269, 264, 426, 33, 16767, 1422, 10820, 293, 1854, 300, 1269, 11330, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11485809390827761, "compression_ratio": 1.7386363636363635, "no_speech_prob": 0.0408371202647686}, {"id": 3275, "seek": 1386200, "start": 13871.0, "end": 13875.0, "text": " Here, you'll see a list of the providers that are default with NB viewer.", "tokens": [50814, 1692, 11, 291, 603, 536, 257, 1329, 295, 264, 11330, 300, 366, 7576, 365, 426, 33, 16767, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11485809390827761, "compression_ratio": 1.7386363636363635, "no_speech_prob": 0.0408371202647686}, {"id": 3276, "seek": 1386200, "start": 13875.0, "end": 13881.0, "text": " The Dropbox provider has a URI rewrite, which is a good example for the rewrite that we're going to do.", "tokens": [51014, 440, 17675, 4995, 12398, 575, 257, 624, 5577, 28132, 11, 597, 307, 257, 665, 1365, 337, 264, 28132, 300, 321, 434, 516, 281, 360, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11485809390827761, "compression_ratio": 1.7386363636363635, "no_speech_prob": 0.0408371202647686}, {"id": 3277, "seek": 1386200, "start": 13881.0, "end": 13891.0, "text": " Let's copy the handlers dot py file and create a sub folder inside the providers folder called X for X for is going to be the name of our plugin.", "tokens": [51314, 961, 311, 5055, 264, 1011, 11977, 5893, 10664, 3991, 293, 1884, 257, 1422, 10820, 1854, 264, 11330, 10820, 1219, 1783, 337, 1783, 337, 307, 516, 281, 312, 264, 1315, 295, 527, 23407, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11485809390827761, "compression_ratio": 1.7386363636363635, "no_speech_prob": 0.0408371202647686}, {"id": 3278, "seek": 1389100, "start": 13891.0, "end": 13893.0, "text": " Paste the file inside there.", "tokens": [50364, 43827, 264, 3991, 1854, 456, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3279, "seek": 1389100, "start": 13893.0, "end": 13898.0, "text": " You can also copy the init file.", "tokens": [50464, 509, 393, 611, 5055, 264, 3157, 3991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3280, "seek": 1389100, "start": 13898.0, "end": 13901.0, "text": " Now open the handlers dot py file that you copied.", "tokens": [50714, 823, 1269, 264, 1011, 11977, 5893, 10664, 3991, 300, 291, 25365, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3281, "seek": 1389100, "start": 13901.0, "end": 13904.0, "text": " Go ahead and remove the ipython header.", "tokens": [50864, 1037, 2286, 293, 4159, 264, 28501, 88, 11943, 23117, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3282, "seek": 1389100, "start": 13904.0, "end": 13911.0, "text": " We want this URI rewrite to accept URIs of the form author forward slash notebook name.", "tokens": [51014, 492, 528, 341, 624, 5577, 28132, 281, 3241, 624, 5577, 82, 295, 264, 1254, 3793, 2128, 17330, 21060, 1315, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3283, "seek": 1389100, "start": 13911.0, "end": 13916.0, "text": " We'll accept the notebook name either with or without an IPYNB extension.", "tokens": [51364, 492, 603, 3241, 264, 21060, 1315, 2139, 365, 420, 1553, 364, 8671, 56, 45, 33, 10320, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3284, "seek": 1389100, "start": 13916.0, "end": 13919.0, "text": " The first step is to replace the first string in the tuple.", "tokens": [51614, 440, 700, 1823, 307, 281, 7406, 264, 700, 6798, 294, 264, 2604, 781, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13012269399698498, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.002251594327390194}, {"id": 3285, "seek": 1391900, "start": 13919.0, "end": 13922.0, "text": " This string is the string that is used to search.", "tokens": [50364, 639, 6798, 307, 264, 6798, 300, 307, 1143, 281, 3164, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07796673896985176, "compression_ratio": 1.8290155440414508, "no_speech_prob": 0.06750719994306564}, {"id": 3286, "seek": 1391900, "start": 13922.0, "end": 13926.0, "text": " The second string is the string that replaces the search string.", "tokens": [50514, 440, 1150, 6798, 307, 264, 6798, 300, 46734, 264, 3164, 6798, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07796673896985176, "compression_ratio": 1.8290155440414508, "no_speech_prob": 0.06750719994306564}, {"id": 3287, "seek": 1391900, "start": 13926.0, "end": 13935.0, "text": " Each group of the regular expression where a group is defined by parentheses can be accessed in the replacement string by using curly brackets.", "tokens": [50714, 6947, 1594, 295, 264, 3890, 6114, 689, 257, 1594, 307, 7642, 538, 34153, 393, 312, 34211, 294, 264, 14419, 6798, 538, 1228, 32066, 26179, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07796673896985176, "compression_ratio": 1.8290155440414508, "no_speech_prob": 0.06750719994306564}, {"id": 3288, "seek": 1391900, "start": 13935.0, "end": 13944.0, "text": " So this zero refers to this first item here, whereas the one refers to this second group here.", "tokens": [51164, 407, 341, 4018, 14942, 281, 341, 700, 3174, 510, 11, 9735, 264, 472, 14942, 281, 341, 1150, 1594, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07796673896985176, "compression_ratio": 1.8290155440414508, "no_speech_prob": 0.06750719994306564}, {"id": 3289, "seek": 1394400, "start": 13944.0, "end": 13950.0, "text": " Without explaining too much of regular expressions, I'll tell you that this matches a set of characters of variable length.", "tokens": [50364, 9129, 13468, 886, 709, 295, 3890, 15277, 11, 286, 603, 980, 291, 300, 341, 10676, 257, 992, 295, 4342, 295, 7006, 4641, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3290, "seek": 1394400, "start": 13950.0, "end": 13955.0, "text": " I'll remove this text here where this first group will match the author.", "tokens": [50664, 286, 603, 4159, 341, 2487, 510, 689, 341, 700, 1594, 486, 2995, 264, 3793, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3291, "seek": 1394400, "start": 13955.0, "end": 13957.0, "text": " Add a forward slash.", "tokens": [50914, 5349, 257, 2128, 17330, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3292, "seek": 1394400, "start": 13957.0, "end": 13958.0, "text": " Copy this first group.", "tokens": [51014, 25653, 341, 700, 1594, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3293, "seek": 1394400, "start": 13958.0, "end": 13961.0, "text": " This second group will match the notebook name.", "tokens": [51064, 639, 1150, 1594, 486, 2995, 264, 21060, 1315, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3294, "seek": 1394400, "start": 13961.0, "end": 13964.0, "text": " And at the end, I'll add dot ipynb.", "tokens": [51214, 400, 412, 264, 917, 11, 286, 603, 909, 5893, 28501, 2534, 65, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3295, "seek": 1394400, "start": 13964.0, "end": 13969.0, "text": " And I have to escape the dot because dot has a special meaning in regular expressions.", "tokens": [51364, 400, 286, 362, 281, 7615, 264, 5893, 570, 5893, 575, 257, 2121, 3620, 294, 3890, 15277, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10869833566610096, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.11271340399980545}, {"id": 3296, "seek": 1396900, "start": 13969.0, "end": 13974.0, "text": " And add a question mark because we don't know if the user is going to write dot ipynb or not.", "tokens": [50364, 400, 909, 257, 1168, 1491, 570, 321, 500, 380, 458, 498, 264, 4195, 307, 516, 281, 2464, 5893, 28501, 2534, 65, 420, 406, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09125995635986328, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.08383890241384506}, {"id": 3297, "seek": 1396900, "start": 13974.0, "end": 13985.0, "text": " Now in the replacement string, I'll replace the URL with local file because local file is the canonical form of the URI accepted by the local file provider.", "tokens": [50614, 823, 294, 264, 14419, 6798, 11, 286, 603, 7406, 264, 12905, 365, 2654, 3991, 570, 2654, 3991, 307, 264, 46491, 1254, 295, 264, 624, 5577, 9035, 538, 264, 2654, 3991, 12398, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09125995635986328, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.08383890241384506}, {"id": 3298, "seek": 1396900, "start": 13985.0, "end": 13992.0, "text": " I'll also add notebooks because notebooks is the subfolder that sits inside the network folder.", "tokens": [51164, 286, 603, 611, 909, 43782, 570, 43782, 307, 264, 1422, 18353, 260, 300, 12696, 1854, 264, 3209, 10820, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09125995635986328, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.08383890241384506}, {"id": 3299, "seek": 1399200, "start": 13992.0, "end": 14001.0, "text": " The first value will be the author name, followed by the notebook name, and then we'll append a dot ipynb file extension.", "tokens": [50364, 440, 700, 2158, 486, 312, 264, 3793, 1315, 11, 6263, 538, 264, 21060, 1315, 11, 293, 550, 321, 603, 34116, 257, 5893, 28501, 2534, 65, 3991, 10320, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11505174075855928, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.25077900290489197}, {"id": 3300, "seek": 1399200, "start": 14001.0, "end": 14007.0, "text": " Now let's save this and we'll go back to the terminal and try launching nbviewer.", "tokens": [50814, 823, 718, 311, 3155, 341, 293, 321, 603, 352, 646, 281, 264, 14709, 293, 853, 18354, 297, 65, 13457, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11505174075855928, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.25077900290489197}, {"id": 3301, "seek": 1399200, "start": 14007.0, "end": 14016.0, "text": " But first make sure to set the environment variable that uses the custom templates that we created earlier.", "tokens": [51114, 583, 700, 652, 988, 281, 992, 264, 2823, 7006, 300, 4960, 264, 2375, 21165, 300, 321, 2942, 3071, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11505174075855928, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.25077900290489197}, {"id": 3302, "seek": 1399200, "start": 14016.0, "end": 14018.0, "text": " Now let's try launching nbviewer.", "tokens": [51564, 823, 718, 311, 853, 18354, 297, 65, 13457, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11505174075855928, "compression_ratio": 1.6507177033492824, "no_speech_prob": 0.25077900290489197}, {"id": 3303, "seek": 1402200, "start": 14022.0, "end": 14032.0, "text": " To get nbviewer to use our URI rewrite, we use the double dash provider underscore rewrites.", "tokens": [50364, 1407, 483, 297, 65, 13457, 281, 764, 527, 624, 5577, 28132, 11, 321, 764, 264, 3834, 8240, 12398, 37556, 319, 86, 30931, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08472223385520604, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009410824626684189}, {"id": 3304, "seek": 1402200, "start": 14032.0, "end": 14038.0, "text": " The provider rewrites flag takes a full Python namespace to a rewrite provider.", "tokens": [50864, 440, 12398, 319, 86, 30931, 7166, 2516, 257, 1577, 15329, 5288, 17940, 281, 257, 28132, 12398, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08472223385520604, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009410824626684189}, {"id": 3305, "seek": 1402200, "start": 14038.0, "end": 14042.0, "text": " You may be wondering why we had to edit nbviewer directly.", "tokens": [51164, 509, 815, 312, 6359, 983, 321, 632, 281, 8129, 297, 65, 13457, 3838, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08472223385520604, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009410824626684189}, {"id": 3306, "seek": 1402200, "start": 14042.0, "end": 14044.0, "text": " Well, we actually didn't have to.", "tokens": [51364, 1042, 11, 321, 767, 994, 380, 362, 281, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08472223385520604, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009410824626684189}, {"id": 3307, "seek": 1402200, "start": 14044.0, "end": 14049.0, "text": " We could have wrote our own Python package and then reference that Python namespace here.", "tokens": [51464, 492, 727, 362, 4114, 527, 1065, 15329, 7372, 293, 550, 6408, 300, 15329, 5288, 17940, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08472223385520604, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.009410824626684189}, {"id": 3308, "seek": 1404900, "start": 14049.0, "end": 14054.0, "text": " However, writing a Python package is outside of the scope of this video series.", "tokens": [50364, 2908, 11, 3579, 257, 15329, 7372, 307, 2380, 295, 264, 11923, 295, 341, 960, 2638, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09659692976209852, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00781477801501751}, {"id": 3309, "seek": 1404900, "start": 14054.0, "end": 14058.0, "text": " So for simplicity, we edit it nbviewer directly.", "tokens": [50614, 407, 337, 25632, 11, 321, 8129, 309, 297, 65, 13457, 3838, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09659692976209852, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00781477801501751}, {"id": 3310, "seek": 1404900, "start": 14058.0, "end": 14061.0, "text": " That allows us to piggyback on nbviewer's namespace here.", "tokens": [50814, 663, 4045, 505, 281, 39349, 3207, 322, 297, 65, 13457, 311, 5288, 17940, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09659692976209852, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00781477801501751}, {"id": 3311, "seek": 1404900, "start": 14061.0, "end": 14069.0, "text": " So to access our rewrite, we can use nbviewer.providers.exfer.", "tokens": [50964, 407, 281, 2105, 527, 28132, 11, 321, 393, 764, 297, 65, 13457, 13, 4318, 6833, 433, 13, 3121, 612, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09659692976209852, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00781477801501751}, {"id": 3312, "seek": 1404900, "start": 14069.0, "end": 14073.0, "text": " Lastly, we'll want to disable github and gis providers.", "tokens": [51364, 18072, 11, 321, 603, 528, 281, 28362, 290, 355, 836, 293, 290, 271, 11330, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09659692976209852, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.00781477801501751}, {"id": 3313, "seek": 1407300, "start": 14073.0, "end": 14079.0, "text": " To do so, we'll set the URL provider as the only provider used by nbviewer.", "tokens": [50364, 1407, 360, 370, 11, 321, 603, 992, 264, 12905, 12398, 382, 264, 787, 12398, 1143, 538, 297, 65, 13457, 13, 50664], "temperature": 0.0, "avg_logprob": -0.056880050235324435, "compression_ratio": 1.613861386138614, "no_speech_prob": 0.03066733293235302}, {"id": 3314, "seek": 1407300, "start": 14079.0, "end": 14089.0, "text": " We can do that using the double dash providers flag and setting that to nbviewer.providers.url.", "tokens": [50664, 492, 393, 360, 300, 1228, 264, 3834, 8240, 11330, 7166, 293, 3287, 300, 281, 297, 65, 13457, 13, 4318, 6833, 433, 13, 374, 75, 13, 51164], "temperature": 0.0, "avg_logprob": -0.056880050235324435, "compression_ratio": 1.613861386138614, "no_speech_prob": 0.03066733293235302}, {"id": 3315, "seek": 1407300, "start": 14089.0, "end": 14092.0, "text": " Now that the server is launched, let's go to our web browser.", "tokens": [51164, 823, 300, 264, 7154, 307, 8730, 11, 718, 311, 352, 281, 527, 3670, 11185, 13, 51314], "temperature": 0.0, "avg_logprob": -0.056880050235324435, "compression_ratio": 1.613861386138614, "no_speech_prob": 0.03066733293235302}, {"id": 3316, "seek": 1407300, "start": 14092.0, "end": 14098.0, "text": " Let's try accessing the first notebook under my name here.", "tokens": [51314, 961, 311, 853, 26440, 264, 700, 21060, 833, 452, 1315, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.056880050235324435, "compression_ratio": 1.613861386138614, "no_speech_prob": 0.03066733293235302}, {"id": 3317, "seek": 1407300, "start": 14098.0, "end": 14100.0, "text": " Looks like that worked correctly.", "tokens": [51614, 10027, 411, 300, 2732, 8944, 13, 51714], "temperature": 0.0, "avg_logprob": -0.056880050235324435, "compression_ratio": 1.613861386138614, "no_speech_prob": 0.03066733293235302}, {"id": 3318, "seek": 1410000, "start": 14100.0, "end": 14107.0, "text": " Let's go back to the homepage and try accessing it without the ipynb to make sure it still works.", "tokens": [50364, 961, 311, 352, 646, 281, 264, 31301, 293, 853, 26440, 309, 1553, 264, 28501, 2534, 65, 281, 652, 988, 309, 920, 1985, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06940096556538283, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.005553684663027525}, {"id": 3319, "seek": 1410000, "start": 14107.0, "end": 14109.0, "text": " Looks like that worked too.", "tokens": [50714, 10027, 411, 300, 2732, 886, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06940096556538283, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.005553684663027525}, {"id": 3320, "seek": 1410000, "start": 14109.0, "end": 14116.0, "text": " The last thing we'll want to do is change the showcase so it shows notebooks that are actually hosted by us.", "tokens": [50814, 440, 1036, 551, 321, 603, 528, 281, 360, 307, 1319, 264, 20388, 370, 309, 3110, 43782, 300, 366, 767, 19204, 538, 505, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06940096556538283, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.005553684663027525}, {"id": 3321, "seek": 1410000, "start": 14116.0, "end": 14120.0, "text": " To understand how this is done, let's look at the source code of nbviewer.", "tokens": [51164, 1407, 1223, 577, 341, 307, 1096, 11, 718, 311, 574, 412, 264, 4009, 3089, 295, 297, 65, 13457, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06940096556538283, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.005553684663027525}, {"id": 3322, "seek": 1410000, "start": 14120.0, "end": 14125.0, "text": " Back inside Adam in the nbviewer repository, open up app.py.", "tokens": [51364, 5833, 1854, 7938, 294, 264, 297, 65, 13457, 25841, 11, 1269, 493, 724, 13, 8200, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06940096556538283, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.005553684663027525}, {"id": 3323, "seek": 1412500, "start": 14125.0, "end": 14130.0, "text": " If you scroll towards the bottom, you'll see where all the command line arguments are defined.", "tokens": [50364, 759, 291, 11369, 3030, 264, 2767, 11, 291, 603, 536, 689, 439, 264, 5622, 1622, 12869, 366, 7642, 13, 50614], "temperature": 0.0, "avg_logprob": -0.045265239951884854, "compression_ratio": 1.8286852589641434, "no_speech_prob": 0.14404839277267456}, {"id": 3324, "seek": 1412500, "start": 14130.0, "end": 14134.0, "text": " The command line argument that we're interested in is this front page argument.", "tokens": [50614, 440, 5622, 1622, 6770, 300, 321, 434, 3102, 294, 307, 341, 1868, 3028, 6770, 13, 50814], "temperature": 0.0, "avg_logprob": -0.045265239951884854, "compression_ratio": 1.8286852589641434, "no_speech_prob": 0.14404839277267456}, {"id": 3325, "seek": 1412500, "start": 14134.0, "end": 14141.0, "text": " This argument points to a JSON file which defines the content that will be used on the front page to render the showcase.", "tokens": [50814, 639, 6770, 2793, 281, 257, 31828, 3991, 597, 23122, 264, 2701, 300, 486, 312, 1143, 322, 264, 1868, 3028, 281, 15529, 264, 20388, 13, 51164], "temperature": 0.0, "avg_logprob": -0.045265239951884854, "compression_ratio": 1.8286852589641434, "no_speech_prob": 0.14404839277267456}, {"id": 3326, "seek": 1412500, "start": 14141.0, "end": 14148.0, "text": " The default used by nbviewer sits inside the nbviewer repository under frontpage.json.", "tokens": [51164, 440, 7576, 1143, 538, 297, 65, 13457, 12696, 1854, 264, 297, 65, 13457, 25841, 833, 1868, 15161, 13, 73, 3015, 13, 51514], "temperature": 0.0, "avg_logprob": -0.045265239951884854, "compression_ratio": 1.8286852589641434, "no_speech_prob": 0.14404839277267456}, {"id": 3327, "seek": 1412500, "start": 14148.0, "end": 14149.0, "text": " Let's open that.", "tokens": [51514, 961, 311, 1269, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.045265239951884854, "compression_ratio": 1.8286852589641434, "no_speech_prob": 0.14404839277267456}, {"id": 3328, "seek": 1412500, "start": 14149.0, "end": 14152.0, "text": " Here you can see the links that we see when nbviewer runs.", "tokens": [51564, 1692, 291, 393, 536, 264, 6123, 300, 321, 536, 562, 297, 65, 13457, 6676, 13, 51714], "temperature": 0.0, "avg_logprob": -0.045265239951884854, "compression_ratio": 1.8286852589641434, "no_speech_prob": 0.14404839277267456}, {"id": 3329, "seek": 1415200, "start": 14152.0, "end": 14156.0, "text": " Let's copy all the contents of this file.", "tokens": [50364, 961, 311, 5055, 439, 264, 15768, 295, 341, 3991, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08238920539316505, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.027576612308621407}, {"id": 3330, "seek": 1415200, "start": 14156.0, "end": 14165.0, "text": " And then in a new terminal window, let's cd into our custom nbviewer templates directory.", "tokens": [50564, 400, 550, 294, 257, 777, 14709, 4910, 11, 718, 311, 269, 67, 666, 527, 2375, 297, 65, 13457, 21165, 21120, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08238920539316505, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.027576612308621407}, {"id": 3331, "seek": 1415200, "start": 14165.0, "end": 14170.0, "text": " The reason why I had you open this directory is because it's where we're storing a lot of other custom things for our server.", "tokens": [51014, 440, 1778, 983, 286, 632, 291, 1269, 341, 21120, 307, 570, 309, 311, 689, 321, 434, 26085, 257, 688, 295, 661, 2375, 721, 337, 527, 7154, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08238920539316505, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.027576612308621407}, {"id": 3332, "seek": 1415200, "start": 14170.0, "end": 14175.0, "text": " We might as well store other content in here just to keep it all grouped in one place.", "tokens": [51264, 492, 1062, 382, 731, 3531, 661, 2701, 294, 510, 445, 281, 1066, 309, 439, 41877, 294, 472, 1081, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08238920539316505, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.027576612308621407}, {"id": 3333, "seek": 1415200, "start": 14175.0, "end": 14178.0, "text": " Create a new file called gallery.json.", "tokens": [51514, 20248, 257, 777, 3991, 1219, 18378, 13, 73, 3015, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08238920539316505, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.027576612308621407}, {"id": 3334, "seek": 1417800, "start": 14178.0, "end": 14185.0, "text": " Inside that file, paste the contents from the front page.json that we copied out of the nbviewer repository.", "tokens": [50364, 15123, 300, 3991, 11, 9163, 264, 15768, 490, 264, 1868, 3028, 13, 73, 3015, 300, 321, 25365, 484, 295, 264, 297, 65, 13457, 25841, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06021070938843947, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.012051068246364594}, {"id": 3335, "seek": 1417800, "start": 14185.0, "end": 14191.0, "text": " Now, looking at this file, we see that it has groups defined by this header attribute.", "tokens": [50714, 823, 11, 1237, 412, 341, 3991, 11, 321, 536, 300, 309, 575, 3935, 7642, 538, 341, 23117, 19667, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06021070938843947, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.012051068246364594}, {"id": 3336, "seek": 1417800, "start": 14191.0, "end": 14196.0, "text": " Since we're ignoring the notion of groups, let's get rid of all the other groups below.", "tokens": [51014, 4162, 321, 434, 26258, 264, 10710, 295, 3935, 11, 718, 311, 483, 3973, 295, 439, 264, 661, 3935, 2507, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06021070938843947, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.012051068246364594}, {"id": 3337, "seek": 1417800, "start": 14196.0, "end": 14201.0, "text": " When we set up the dummy directory, I only copied two files into my author directory.", "tokens": [51264, 1133, 321, 992, 493, 264, 35064, 21120, 11, 286, 787, 25365, 732, 7098, 666, 452, 3793, 21120, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06021070938843947, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.012051068246364594}, {"id": 3338, "seek": 1417800, "start": 14201.0, "end": 14203.0, "text": " So let's get rid of the third entry.", "tokens": [51514, 407, 718, 311, 483, 3973, 295, 264, 2636, 8729, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06021070938843947, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.012051068246364594}, {"id": 3339, "seek": 1420300, "start": 14203.0, "end": 14208.0, "text": " We'll give the first two names.", "tokens": [50364, 492, 603, 976, 264, 700, 732, 5288, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07853253321214156, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.021607547998428345}, {"id": 3340, "seek": 1420300, "start": 14208.0, "end": 14215.0, "text": " And then change the target to the canonical URL that points to the correct notebook.", "tokens": [50614, 400, 550, 1319, 264, 3779, 281, 264, 46491, 12905, 300, 2793, 281, 264, 3006, 21060, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07853253321214156, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.021607547998428345}, {"id": 3341, "seek": 1420300, "start": 14215.0, "end": 14220.0, "text": " The URL for the second notebook is almost the same, just the notebook file is different.", "tokens": [50964, 440, 12905, 337, 264, 1150, 21060, 307, 1920, 264, 912, 11, 445, 264, 21060, 3991, 307, 819, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07853253321214156, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.021607547998428345}, {"id": 3342, "seek": 1420300, "start": 14220.0, "end": 14226.0, "text": " Now we could change the image as well, but I don't have any nice images for my test notebooks.", "tokens": [51214, 823, 321, 727, 1319, 264, 3256, 382, 731, 11, 457, 286, 500, 380, 362, 604, 1481, 5267, 337, 452, 1500, 43782, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07853253321214156, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.021607547998428345}, {"id": 3343, "seek": 1420300, "start": 14226.0, "end": 14229.0, "text": " So I'm just going to leave the images as is.", "tokens": [51514, 407, 286, 478, 445, 516, 281, 1856, 264, 5267, 382, 307, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07853253321214156, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.021607547998428345}, {"id": 3344, "seek": 1422900, "start": 14229.0, "end": 14233.0, "text": " I'm going to save this file and go back to the terminal.", "tokens": [50364, 286, 478, 516, 281, 3155, 341, 3991, 293, 352, 646, 281, 264, 14709, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08353604403409091, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.014059655368328094}, {"id": 3345, "seek": 1422900, "start": 14233.0, "end": 14238.0, "text": " Opening the tab of the terminal that's running nbviewer, I'm going to stop nbviewer by hitting Ctrl C.", "tokens": [50564, 41137, 264, 4421, 295, 264, 14709, 300, 311, 2614, 297, 65, 13457, 11, 286, 478, 516, 281, 1590, 297, 65, 13457, 538, 8850, 35233, 383, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08353604403409091, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.014059655368328094}, {"id": 3346, "seek": 1422900, "start": 14238.0, "end": 14249.0, "text": " I'm going to rerun the same command except this time I'll change front page to the full path of the JSON that specifies our gallery.", "tokens": [50814, 286, 478, 516, 281, 43819, 409, 264, 912, 5622, 3993, 341, 565, 286, 603, 1319, 1868, 3028, 281, 264, 1577, 3100, 295, 264, 31828, 300, 1608, 11221, 527, 18378, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08353604403409091, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.014059655368328094}, {"id": 3347, "seek": 1422900, "start": 14249.0, "end": 14252.0, "text": " Now let's open the web browser to see if that worked.", "tokens": [51364, 823, 718, 311, 1269, 264, 3670, 11185, 281, 536, 498, 300, 2732, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08353604403409091, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.014059655368328094}, {"id": 3348, "seek": 1422900, "start": 14252.0, "end": 14256.0, "text": " Refreshing the home page, we see that my JSON was loaded.", "tokens": [51514, 16957, 495, 571, 264, 1280, 3028, 11, 321, 536, 300, 452, 31828, 390, 13210, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08353604403409091, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.014059655368328094}, {"id": 3349, "seek": 1425600, "start": 14256.0, "end": 14261.0, "text": " Does this URL now points to the Jons notebook, even though it's still using the old screenshot?", "tokens": [50364, 4402, 341, 12905, 586, 2793, 281, 264, 508, 892, 21060, 11, 754, 1673, 309, 311, 920, 1228, 264, 1331, 27712, 30, 50614], "temperature": 0.0, "avg_logprob": -0.10764902205694289, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.09133598208427429}, {"id": 3350, "seek": 1425600, "start": 14261.0, "end": 14265.0, "text": " Jons notebook 2 is also available, even though it's using the old screenshot.", "tokens": [50614, 508, 892, 21060, 568, 307, 611, 2435, 11, 754, 1673, 309, 311, 1228, 264, 1331, 27712, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10764902205694289, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.09133598208427429}, {"id": 3351, "seek": 1425600, "start": 14265.0, "end": 14268.0, "text": " Let's click on the link to see if it works.", "tokens": [50814, 961, 311, 2052, 322, 264, 2113, 281, 536, 498, 309, 1985, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10764902205694289, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.09133598208427429}, {"id": 3352, "seek": 1425600, "start": 14268.0, "end": 14270.0, "text": " Awesome, it looks like that worked.", "tokens": [50964, 10391, 11, 309, 1542, 411, 300, 2732, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10764902205694289, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.09133598208427429}, {"id": 3353, "seek": 1425600, "start": 14270.0, "end": 14283.0, "text": " If you want to find out more about nbviewer, visit the nbviewer repository at www.github.com forward slash Jupiter forward slash nbviewer.", "tokens": [51064, 759, 291, 528, 281, 915, 484, 544, 466, 297, 65, 13457, 11, 3441, 264, 297, 65, 13457, 25841, 412, 12520, 13, 70, 355, 836, 13, 1112, 2128, 17330, 24567, 2128, 17330, 297, 65, 13457, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10764902205694289, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.09133598208427429}, {"id": 3354, "seek": 1428300, "start": 14283.0, "end": 14286.0, "text": " In this chapter, I'm going to talk about temp nb.", "tokens": [50364, 682, 341, 7187, 11, 286, 478, 516, 281, 751, 466, 18274, 297, 65, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05155835641878788, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.12754057347774506}, {"id": 3355, "seek": 1428300, "start": 14286.0, "end": 14289.0, "text": " It stands for Temporary Notebook Server.", "tokens": [50514, 467, 7382, 337, 8095, 2816, 822, 11633, 2939, 25684, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05155835641878788, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.12754057347774506}, {"id": 3356, "seek": 1428300, "start": 14289.0, "end": 14295.0, "text": " Temp nb is a service that launches sandboxed ephemeral notebook servers on demand,", "tokens": [50664, 8095, 79, 297, 65, 307, 257, 2643, 300, 31841, 42115, 292, 308, 41245, 2790, 21060, 15909, 322, 4733, 11, 50964], "temperature": 0.0, "avg_logprob": -0.05155835641878788, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.12754057347774506}, {"id": 3357, "seek": 1428300, "start": 14295.0, "end": 14299.0, "text": " where ephemeral is defined as something lasting for a short time.", "tokens": [50964, 689, 308, 41245, 2790, 307, 7642, 382, 746, 20714, 337, 257, 2099, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05155835641878788, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.12754057347774506}, {"id": 3358, "seek": 1428300, "start": 14299.0, "end": 14302.0, "text": " It's kind of like an interactive version of nbviewer.", "tokens": [51164, 467, 311, 733, 295, 411, 364, 15141, 3037, 295, 297, 65, 13457, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05155835641878788, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.12754057347774506}, {"id": 3359, "seek": 1428300, "start": 14302.0, "end": 14309.0, "text": " Temp nb is useful for cases where you need to share notebooks that lose importance if they're not interactive.", "tokens": [51314, 8095, 79, 297, 65, 307, 4420, 337, 3331, 689, 291, 643, 281, 2073, 43782, 300, 3624, 7379, 498, 436, 434, 406, 15141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05155835641878788, "compression_ratio": 1.662551440329218, "no_speech_prob": 0.12754057347774506}, {"id": 3360, "seek": 1430900, "start": 14309.0, "end": 14314.0, "text": " Temp nb users can interact with your notebooks to see what they have to provide.", "tokens": [50364, 8095, 79, 297, 65, 5022, 393, 4648, 365, 428, 43782, 281, 536, 437, 436, 362, 281, 2893, 13, 50614], "temperature": 0.0, "avg_logprob": -0.059370489201994024, "compression_ratio": 1.6627450980392158, "no_speech_prob": 0.08752132952213287}, {"id": 3361, "seek": 1430900, "start": 14314.0, "end": 14318.0, "text": " They can explore the data sets and write their own code inside the notebooks.", "tokens": [50614, 814, 393, 6839, 264, 1412, 6352, 293, 2464, 641, 1065, 3089, 1854, 264, 43782, 13, 50814], "temperature": 0.0, "avg_logprob": -0.059370489201994024, "compression_ratio": 1.6627450980392158, "no_speech_prob": 0.08752132952213287}, {"id": 3362, "seek": 1430900, "start": 14318.0, "end": 14325.0, "text": " The changes that they make won't be persistent anywhere, so it's okay to open a Temp nb service to the public.", "tokens": [50814, 440, 2962, 300, 436, 652, 1582, 380, 312, 24315, 4992, 11, 370, 309, 311, 1392, 281, 1269, 257, 8095, 79, 297, 65, 2643, 281, 264, 1908, 13, 51164], "temperature": 0.0, "avg_logprob": -0.059370489201994024, "compression_ratio": 1.6627450980392158, "no_speech_prob": 0.08752132952213287}, {"id": 3363, "seek": 1430900, "start": 14325.0, "end": 14332.0, "text": " In my web browser, I'm going to navigate to Temp nb's website at www.github.com forward slash Jupiter Temp nb.", "tokens": [51164, 682, 452, 3670, 11185, 11, 286, 478, 516, 281, 12350, 281, 8095, 79, 297, 65, 311, 3144, 412, 12520, 13, 70, 355, 836, 13, 1112, 2128, 17330, 24567, 8095, 79, 297, 65, 13, 51514], "temperature": 0.0, "avg_logprob": -0.059370489201994024, "compression_ratio": 1.6627450980392158, "no_speech_prob": 0.08752132952213287}, {"id": 3364, "seek": 1430900, "start": 14332.0, "end": 14335.0, "text": " I'm now going to scroll down to the readme.", "tokens": [51514, 286, 478, 586, 516, 281, 11369, 760, 281, 264, 1401, 1398, 13, 51664], "temperature": 0.0, "avg_logprob": -0.059370489201994024, "compression_ratio": 1.6627450980392158, "no_speech_prob": 0.08752132952213287}, {"id": 3365, "seek": 1433500, "start": 14335.0, "end": 14340.0, "text": " At the top of the readme, there's this very useful diagram for describing how Temp nb works.", "tokens": [50364, 1711, 264, 1192, 295, 264, 1401, 1398, 11, 456, 311, 341, 588, 4420, 10686, 337, 16141, 577, 8095, 79, 297, 65, 1985, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04111441911435595, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.01405956968665123}, {"id": 3366, "seek": 1433500, "start": 14340.0, "end": 14343.0, "text": " Temp nb can be broken into a few pieces.", "tokens": [50614, 8095, 79, 297, 65, 393, 312, 5463, 666, 257, 1326, 3755, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04111441911435595, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.01405956968665123}, {"id": 3367, "seek": 1433500, "start": 14343.0, "end": 14347.0, "text": " The user-facing piece is the configurable HTTP proxy.", "tokens": [50764, 440, 4195, 12, 44046, 2522, 307, 264, 22192, 712, 33283, 29690, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04111441911435595, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.01405956968665123}, {"id": 3368, "seek": 1433500, "start": 14347.0, "end": 14350.0, "text": " This piece routes traffic to the correct sub-pieces.", "tokens": [50964, 639, 2522, 18242, 6419, 281, 264, 3006, 1422, 12, 47488, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04111441911435595, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.01405956968665123}, {"id": 3369, "seek": 1433500, "start": 14350.0, "end": 14356.0, "text": " The Temp nb orchestrator is what is used to launch the temporary notebook servers.", "tokens": [51114, 440, 8095, 79, 297, 65, 14161, 19802, 307, 437, 307, 1143, 281, 4025, 264, 13413, 21060, 15909, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04111441911435595, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.01405956968665123}, {"id": 3370, "seek": 1433500, "start": 14356.0, "end": 14359.0, "text": " Docker is the technology that is used to containerize them.", "tokens": [51414, 33772, 307, 264, 2899, 300, 307, 1143, 281, 10129, 1125, 552, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04111441911435595, "compression_ratio": 1.6160337552742616, "no_speech_prob": 0.01405956968665123}, {"id": 3371, "seek": 1435900, "start": 14359.0, "end": 14365.0, "text": " Once a server is launched, the Temp nb orchestrator communicates to the configurable HTTP proxy,", "tokens": [50364, 3443, 257, 7154, 307, 8730, 11, 264, 8095, 79, 297, 65, 14161, 19802, 3363, 1024, 281, 264, 22192, 712, 33283, 29690, 11, 50664], "temperature": 0.0, "avg_logprob": -0.041078454569766394, "compression_ratio": 1.6766917293233083, "no_speech_prob": 0.19183345139026642}, {"id": 3372, "seek": 1435900, "start": 14365.0, "end": 14371.0, "text": " telling it to route a certain subset of addresses to the correct Temp nb container.", "tokens": [50664, 3585, 309, 281, 7955, 257, 1629, 25993, 295, 16862, 281, 264, 3006, 8095, 79, 297, 65, 10129, 13, 50964], "temperature": 0.0, "avg_logprob": -0.041078454569766394, "compression_ratio": 1.6766917293233083, "no_speech_prob": 0.19183345139026642}, {"id": 3373, "seek": 1435900, "start": 14371.0, "end": 14375.0, "text": " Jupiter runs and maintains its own instance of Temp nb.", "tokens": [50964, 24567, 6676, 293, 33385, 1080, 1065, 5197, 295, 8095, 79, 297, 65, 13, 51164], "temperature": 0.0, "avg_logprob": -0.041078454569766394, "compression_ratio": 1.6766917293233083, "no_speech_prob": 0.19183345139026642}, {"id": 3374, "seek": 1435900, "start": 14375.0, "end": 14378.0, "text": " You can access it at try.jupiter.org.", "tokens": [51164, 509, 393, 2105, 309, 412, 853, 13, 73, 1010, 1681, 13, 4646, 13, 51314], "temperature": 0.0, "avg_logprob": -0.041078454569766394, "compression_ratio": 1.6766917293233083, "no_speech_prob": 0.19183345139026642}, {"id": 3375, "seek": 1435900, "start": 14378.0, "end": 14383.0, "text": " The notebook itself is the same notebook that you're used to running on your local machine.", "tokens": [51314, 440, 21060, 2564, 307, 264, 912, 21060, 300, 291, 434, 1143, 281, 2614, 322, 428, 2654, 3479, 13, 51564], "temperature": 0.0, "avg_logprob": -0.041078454569766394, "compression_ratio": 1.6766917293233083, "no_speech_prob": 0.19183345139026642}, {"id": 3376, "seek": 1435900, "start": 14383.0, "end": 14387.0, "text": " You can see that this notebook comes pre-populated with example notebook files.", "tokens": [51564, 509, 393, 536, 300, 341, 21060, 1487, 659, 12, 13872, 6987, 365, 1365, 21060, 7098, 13, 51764], "temperature": 0.0, "avg_logprob": -0.041078454569766394, "compression_ratio": 1.6766917293233083, "no_speech_prob": 0.19183345139026642}, {"id": 3377, "seek": 1438700, "start": 14387.0, "end": 14390.0, "text": " In this video chapter, I'll show you how to do this.", "tokens": [50364, 682, 341, 960, 7187, 11, 286, 603, 855, 291, 577, 281, 360, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08303269120149834, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.01081650611013174}, {"id": 3378, "seek": 1438700, "start": 14390.0, "end": 14396.0, "text": " I'll also show you how to customize your notebook server image so that it reflects your organization's needs.", "tokens": [50514, 286, 603, 611, 855, 291, 577, 281, 19734, 428, 21060, 7154, 3256, 370, 300, 309, 18926, 428, 4475, 311, 2203, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08303269120149834, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.01081650611013174}, {"id": 3379, "seek": 1438700, "start": 14399.0, "end": 14402.0, "text": " In this video, I'll talk about installing Temp nb.", "tokens": [50964, 682, 341, 960, 11, 286, 603, 751, 466, 20762, 8095, 79, 297, 65, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08303269120149834, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.01081650611013174}, {"id": 3380, "seek": 1438700, "start": 14402.0, "end": 14410.0, "text": " Temp nb, like nbViewer, can be installed either using a Docker image or in development mode from source code.", "tokens": [51114, 8095, 79, 297, 65, 11, 411, 297, 65, 30203, 260, 11, 393, 312, 8899, 2139, 1228, 257, 33772, 3256, 420, 294, 3250, 4391, 490, 4009, 3089, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08303269120149834, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.01081650611013174}, {"id": 3381, "seek": 1441000, "start": 14411.0, "end": 14419.0, "text": " However, unlike nbViewer, it doesn't really make sense to install Temp nb from source code unless you're planning on developing Temp nb.", "tokens": [50414, 2908, 11, 8343, 297, 65, 30203, 260, 11, 309, 1177, 380, 534, 652, 2020, 281, 3625, 8095, 79, 297, 65, 490, 4009, 3089, 5969, 291, 434, 5038, 322, 6416, 8095, 79, 297, 65, 13, 50814], "temperature": 0.0, "avg_logprob": -0.049382886716297696, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.08506764471530914}, {"id": 3382, "seek": 1441000, "start": 14419.0, "end": 14425.0, "text": " That's because all the common configuration that one would want to do can be done through custom Docker images,", "tokens": [50814, 663, 311, 570, 439, 264, 2689, 11694, 300, 472, 576, 528, 281, 360, 393, 312, 1096, 807, 2375, 33772, 5267, 11, 51114], "temperature": 0.0, "avg_logprob": -0.049382886716297696, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.08506764471530914}, {"id": 3383, "seek": 1441000, "start": 14425.0, "end": 14430.0, "text": " the images that are launched by Temp nb as temporary servers.", "tokens": [51114, 264, 5267, 300, 366, 8730, 538, 8095, 79, 297, 65, 382, 13413, 15909, 13, 51364], "temperature": 0.0, "avg_logprob": -0.049382886716297696, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.08506764471530914}, {"id": 3384, "seek": 1441000, "start": 14430.0, "end": 14433.0, "text": " First, let's open up the Docker quick terminal.", "tokens": [51364, 2386, 11, 718, 311, 1269, 493, 264, 33772, 1702, 14709, 13, 51514], "temperature": 0.0, "avg_logprob": -0.049382886716297696, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.08506764471530914}, {"id": 3385, "seek": 1441000, "start": 14433.0, "end": 14438.0, "text": " As we did in the last chapter, remember the IP address that's printed by Docker in green.", "tokens": [51514, 1018, 321, 630, 294, 264, 1036, 7187, 11, 1604, 264, 8671, 2985, 300, 311, 13567, 538, 33772, 294, 3092, 13, 51764], "temperature": 0.0, "avg_logprob": -0.049382886716297696, "compression_ratio": 1.594306049822064, "no_speech_prob": 0.08506764471530914}, {"id": 3386, "seek": 1443800, "start": 14438.0, "end": 14442.0, "text": " This is the IP address to use to access your server later.", "tokens": [50364, 639, 307, 264, 8671, 2985, 281, 764, 281, 2105, 428, 7154, 1780, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07670113018580846, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.0006878094864077866}, {"id": 3387, "seek": 1443800, "start": 14442.0, "end": 14446.0, "text": " The first step is to tell Docker to download Temp nb.", "tokens": [50564, 440, 700, 1823, 307, 281, 980, 33772, 281, 5484, 8095, 79, 297, 65, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07670113018580846, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.0006878094864077866}, {"id": 3388, "seek": 1443800, "start": 14446.0, "end": 14451.0, "text": " You can do that by running Docker pull Jupyter minimal.", "tokens": [50764, 509, 393, 360, 300, 538, 2614, 33772, 2235, 22125, 88, 391, 13206, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07670113018580846, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.0006878094864077866}, {"id": 3389, "seek": 1443800, "start": 14451.0, "end": 14456.0, "text": " Once that is finished downloading, you should have a full copy of the Jupyter minimal image.", "tokens": [51014, 3443, 300, 307, 4335, 32529, 11, 291, 820, 362, 257, 1577, 5055, 295, 264, 22125, 88, 391, 13206, 3256, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07670113018580846, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.0006878094864077866}, {"id": 3390, "seek": 1443800, "start": 14456.0, "end": 14459.0, "text": " Now you'll need to generate a random token.", "tokens": [51264, 823, 291, 603, 643, 281, 8460, 257, 4974, 14862, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07670113018580846, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.0006878094864077866}, {"id": 3391, "seek": 1443800, "start": 14459.0, "end": 14464.0, "text": " This token will be used to authenticate with configurable HTTP proxy.", "tokens": [51414, 639, 14862, 486, 312, 1143, 281, 9214, 8700, 365, 22192, 712, 33283, 29690, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07670113018580846, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.0006878094864077866}, {"id": 3392, "seek": 1446400, "start": 14464.0, "end": 14470.0, "text": " This command works on Linux and Mac operating systems to generate a random string of 30 characters.", "tokens": [50364, 639, 5622, 1985, 322, 18734, 293, 5707, 7447, 3652, 281, 8460, 257, 4974, 6798, 295, 2217, 4342, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3393, "seek": 1446400, "start": 14470.0, "end": 14474.0, "text": " However, you can use any random string you'd like for your token.", "tokens": [50664, 2908, 11, 291, 393, 764, 604, 4974, 6798, 291, 1116, 411, 337, 428, 14862, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3394, "seek": 1446400, "start": 14474.0, "end": 14479.0, "text": " So on a Windows machine, you can use the equivalent command provided by that operating system.", "tokens": [50864, 407, 322, 257, 8591, 3479, 11, 291, 393, 764, 264, 10344, 5622, 5649, 538, 300, 7447, 1185, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3395, "seek": 1446400, "start": 14479.0, "end": 14481.0, "text": " Copy the random token.", "tokens": [51114, 25653, 264, 4974, 14862, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3396, "seek": 1446400, "start": 14481.0, "end": 14484.0, "text": " Now we'll launch the configurable HTTP proxy.", "tokens": [51214, 823, 321, 603, 4025, 264, 22192, 712, 33283, 29690, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3397, "seek": 1446400, "start": 14484.0, "end": 14487.0, "text": " To do so, I'll start with Docker run.", "tokens": [51364, 1407, 360, 370, 11, 286, 603, 722, 365, 33772, 1190, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3398, "seek": 1446400, "start": 14487.0, "end": 14492.0, "text": " And then I'm going to tell Docker to use the network adapter of the host.", "tokens": [51514, 400, 550, 286, 478, 516, 281, 980, 33772, 281, 764, 264, 3209, 22860, 295, 264, 3975, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06021395596590909, "compression_ratio": 1.6273062730627306, "no_speech_prob": 0.0015486367046833038}, {"id": 3399, "seek": 1449200, "start": 14492.0, "end": 14496.0, "text": " To do that, I'll use double dash net equals host.", "tokens": [50364, 1407, 360, 300, 11, 286, 603, 764, 3834, 8240, 2533, 6915, 3975, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06242052114234781, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0047545526176691055}, {"id": 3400, "seek": 1449200, "start": 14496.0, "end": 14502.0, "text": " Then I'll tell Docker to run in the background and print its ID using the dash D flag.", "tokens": [50564, 1396, 286, 603, 980, 33772, 281, 1190, 294, 264, 3678, 293, 4482, 1080, 7348, 1228, 264, 8240, 413, 7166, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06242052114234781, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0047545526176691055}, {"id": 3401, "seek": 1449200, "start": 14502.0, "end": 14508.0, "text": " Next, I'll pass in the proxy token as an environment variable within the image.", "tokens": [50864, 3087, 11, 286, 603, 1320, 294, 264, 29690, 14862, 382, 364, 2823, 7006, 1951, 264, 3256, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06242052114234781, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0047545526176691055}, {"id": 3402, "seek": 1449200, "start": 14508.0, "end": 14513.0, "text": " To do that, I'll use the dash E flag, specify the environment variable,", "tokens": [51164, 1407, 360, 300, 11, 286, 603, 764, 264, 8240, 462, 7166, 11, 16500, 264, 2823, 7006, 11, 51414], "temperature": 0.0, "avg_logprob": -0.06242052114234781, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0047545526176691055}, {"id": 3403, "seek": 1449200, "start": 14513.0, "end": 14516.0, "text": " and I'll paste the token that I generated in the last step.", "tokens": [51414, 293, 286, 603, 9163, 264, 14862, 300, 286, 10833, 294, 264, 1036, 1823, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06242052114234781, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0047545526176691055}, {"id": 3404, "seek": 1449200, "start": 14516.0, "end": 14519.0, "text": " I'll set the name of this container to proxy.", "tokens": [51564, 286, 603, 992, 264, 1315, 295, 341, 10129, 281, 29690, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06242052114234781, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0047545526176691055}, {"id": 3405, "seek": 1451900, "start": 14519.0, "end": 14523.0, "text": " Then I'll specify the name of the container I want to launch.", "tokens": [50364, 1396, 286, 603, 16500, 264, 1315, 295, 264, 10129, 286, 528, 281, 4025, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08085141226510022, "compression_ratio": 1.6872427983539096, "no_speech_prob": 0.0008558435365557671}, {"id": 3406, "seek": 1451900, "start": 14523.0, "end": 14527.0, "text": " And I'll specify default target.", "tokens": [50564, 400, 286, 603, 16500, 7576, 3779, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08085141226510022, "compression_ratio": 1.6872427983539096, "no_speech_prob": 0.0008558435365557671}, {"id": 3407, "seek": 1451900, "start": 14527.0, "end": 14533.0, "text": " Since this is the first time I've ran the command, Docker will load the image from its repository.", "tokens": [50764, 4162, 341, 307, 264, 700, 565, 286, 600, 5872, 264, 5622, 11, 33772, 486, 3677, 264, 3256, 490, 1080, 25841, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08085141226510022, "compression_ratio": 1.6872427983539096, "no_speech_prob": 0.0008558435365557671}, {"id": 3408, "seek": 1451900, "start": 14533.0, "end": 14538.0, "text": " Once that is finished downloading and has launched, we'll launch the tempnb orchestrator.", "tokens": [51064, 3443, 300, 307, 4335, 32529, 293, 575, 8730, 11, 321, 603, 4025, 264, 18274, 77, 65, 14161, 19802, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08085141226510022, "compression_ratio": 1.6872427983539096, "no_speech_prob": 0.0008558435365557671}, {"id": 3409, "seek": 1451900, "start": 14538.0, "end": 14544.0, "text": " To do so, we'll use the same type of command except we'll change the last couple pieces of it.", "tokens": [51314, 1407, 360, 370, 11, 321, 603, 764, 264, 912, 2010, 295, 5622, 3993, 321, 603, 1319, 264, 1036, 1916, 3755, 295, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08085141226510022, "compression_ratio": 1.6872427983539096, "no_speech_prob": 0.0008558435365557671}, {"id": 3410, "seek": 1451900, "start": 14544.0, "end": 14547.0, "text": " The name will change to tempnb.", "tokens": [51614, 440, 1315, 486, 1319, 281, 18274, 77, 65, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08085141226510022, "compression_ratio": 1.6872427983539096, "no_speech_prob": 0.0008558435365557671}, {"id": 3411, "seek": 1454700, "start": 14547.0, "end": 14555.0, "text": " And then we'll use the special dash V flag to tell the Docker image to bind the Docker client within itself.", "tokens": [50364, 400, 550, 321, 603, 764, 264, 2121, 8240, 691, 7166, 281, 980, 264, 33772, 3256, 281, 14786, 264, 33772, 6423, 1951, 2564, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06343064163670395, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.00048780557699501514}, {"id": 3412, "seek": 1454700, "start": 14555.0, "end": 14559.0, "text": " This will allow the Docker image to spawn other Docker images.", "tokens": [50764, 639, 486, 2089, 264, 33772, 3256, 281, 17088, 661, 33772, 5267, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06343064163670395, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.00048780557699501514}, {"id": 3413, "seek": 1454700, "start": 14559.0, "end": 14562.0, "text": " Specifically, we'll bind the Docker sock.", "tokens": [50964, 26058, 11, 321, 603, 14786, 264, 33772, 35302, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06343064163670395, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.00048780557699501514}, {"id": 3414, "seek": 1454700, "start": 14562.0, "end": 14565.0, "text": " And lastly, we'll specify the name of the image.", "tokens": [51114, 400, 16386, 11, 321, 603, 16500, 264, 1315, 295, 264, 3256, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06343064163670395, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.00048780557699501514}, {"id": 3415, "seek": 1454700, "start": 14565.0, "end": 14568.0, "text": " The orchestrator's name is tempnb.", "tokens": [51264, 440, 14161, 19802, 311, 1315, 307, 18274, 77, 65, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06343064163670395, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.00048780557699501514}, {"id": 3416, "seek": 1454700, "start": 14568.0, "end": 14573.0, "text": " Since this is the first time I've ran this command too, Docker will download the image.", "tokens": [51414, 4162, 341, 307, 264, 700, 565, 286, 600, 5872, 341, 5622, 886, 11, 33772, 486, 5484, 264, 3256, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06343064163670395, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.00048780557699501514}, {"id": 3417, "seek": 1457300, "start": 14573.0, "end": 14577.0, "text": " Once that finishes, you should be able to visit your tempnb service.", "tokens": [50364, 3443, 300, 23615, 11, 291, 820, 312, 1075, 281, 3441, 428, 18274, 77, 65, 2643, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3418, "seek": 1457300, "start": 14577.0, "end": 14581.0, "text": " In the web browser, navigate to the IP address you remembered from earlier.", "tokens": [50564, 682, 264, 3670, 11185, 11, 12350, 281, 264, 8671, 2985, 291, 13745, 490, 3071, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3419, "seek": 1457300, "start": 14581.0, "end": 14587.0, "text": " At the end, append colon 8000 to visit port 8000.", "tokens": [50764, 1711, 264, 917, 11, 34116, 8255, 1649, 1360, 281, 3441, 2436, 1649, 1360, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3420, "seek": 1457300, "start": 14587.0, "end": 14590.0, "text": " This is the port that tempnb is listening on by default.", "tokens": [51064, 639, 307, 264, 2436, 300, 18274, 77, 65, 307, 4764, 322, 538, 7576, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3421, "seek": 1457300, "start": 14590.0, "end": 14593.0, "text": " If all is well, tempnb should just work.", "tokens": [51214, 759, 439, 307, 731, 11, 18274, 77, 65, 820, 445, 589, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3422, "seek": 1457300, "start": 14593.0, "end": 14598.0, "text": " And accessing that address will spawn a notebook server for you in a Docker image.", "tokens": [51364, 400, 26440, 300, 2985, 486, 17088, 257, 21060, 7154, 337, 291, 294, 257, 33772, 3256, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3423, "seek": 1457300, "start": 14598.0, "end": 14602.0, "text": " In the top right hand corner, you'll see a hosted by Rackspace logo.", "tokens": [51614, 682, 264, 1192, 558, 1011, 4538, 11, 291, 603, 536, 257, 19204, 538, 497, 501, 24824, 9699, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05223621021617542, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.009706760756671429}, {"id": 3424, "seek": 1460200, "start": 14602.0, "end": 14604.0, "text": " This is not actually being hosted by Rackspace.", "tokens": [50364, 639, 307, 406, 767, 885, 19204, 538, 497, 501, 24824, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06407710029965355, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.0014101716224104166}, {"id": 3425, "seek": 1460200, "start": 14604.0, "end": 14606.0, "text": " This is being hosted on your machine.", "tokens": [50464, 639, 307, 885, 19204, 322, 428, 3479, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06407710029965355, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.0014101716224104166}, {"id": 3426, "seek": 1460200, "start": 14606.0, "end": 14610.0, "text": " It's just that the image that you downloaded, Jupyter 4 slash minimal,", "tokens": [50564, 467, 311, 445, 300, 264, 3256, 300, 291, 21748, 11, 22125, 88, 391, 1017, 17330, 13206, 11, 50764], "temperature": 0.0, "avg_logprob": -0.06407710029965355, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.0014101716224104166}, {"id": 3427, "seek": 1460200, "start": 14610.0, "end": 14615.0, "text": " is based on the same image that we use in the Jupyter deployment.", "tokens": [50764, 307, 2361, 322, 264, 912, 3256, 300, 321, 764, 294, 264, 22125, 88, 391, 19317, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06407710029965355, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.0014101716224104166}, {"id": 3428, "seek": 1460200, "start": 14615.0, "end": 14622.0, "text": " In this video, we'll look at how we can use custom Docker notebook images with tempnb.", "tokens": [51014, 682, 341, 960, 11, 321, 603, 574, 412, 577, 321, 393, 764, 2375, 33772, 21060, 5267, 365, 18274, 77, 65, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06407710029965355, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.0014101716224104166}, {"id": 3429, "seek": 1460200, "start": 14622.0, "end": 14627.0, "text": " Jupyter has a bunch of notebook images predefined in the Jupyter organization.", "tokens": [51364, 22125, 88, 391, 575, 257, 3840, 295, 21060, 5267, 659, 37716, 294, 264, 22125, 88, 391, 4475, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06407710029965355, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.0014101716224104166}, {"id": 3430, "seek": 1462700, "start": 14627.0, "end": 14634.0, "text": " In your web browser, open up the Jupyter organization GitHub page at github.com forward slash Jupyter.", "tokens": [50364, 682, 428, 3670, 11185, 11, 1269, 493, 264, 22125, 88, 391, 4475, 23331, 3028, 412, 290, 355, 836, 13, 1112, 2128, 17330, 22125, 88, 391, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3431, "seek": 1462700, "start": 14634.0, "end": 14640.0, "text": " Once the page loads, scroll down and you'll see a repository called Docker stacks.", "tokens": [50714, 3443, 264, 3028, 12668, 11, 11369, 760, 293, 291, 603, 536, 257, 25841, 1219, 33772, 30792, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3432, "seek": 1462700, "start": 14640.0, "end": 14641.0, "text": " Open that.", "tokens": [51014, 7238, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3433, "seek": 1462700, "start": 14641.0, "end": 14645.0, "text": " This repository contains a bunch of Docker images for various tasks.", "tokens": [51064, 639, 25841, 8306, 257, 3840, 295, 33772, 5267, 337, 3683, 9608, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3434, "seek": 1462700, "start": 14645.0, "end": 14648.0, "text": " Let's go ahead and clone this repository.", "tokens": [51264, 961, 311, 352, 2286, 293, 26506, 341, 25841, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3435, "seek": 1462700, "start": 14648.0, "end": 14652.0, "text": " To do so, copy the clone URL in the right hand column.", "tokens": [51414, 1407, 360, 370, 11, 5055, 264, 26506, 12905, 294, 264, 558, 1011, 7738, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3436, "seek": 1462700, "start": 14652.0, "end": 14656.0, "text": " Now, in a terminal, navigate to your home directory.", "tokens": [51614, 823, 11, 294, 257, 14709, 11, 12350, 281, 428, 1280, 21120, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08906101961748315, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.02675488404929638}, {"id": 3437, "seek": 1465600, "start": 14656.0, "end": 14661.0, "text": " Run, get, space, clone, and then paste the URL.", "tokens": [50364, 8950, 11, 483, 11, 1901, 11, 26506, 11, 293, 550, 9163, 264, 12905, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3438, "seek": 1465600, "start": 14661.0, "end": 14665.0, "text": " Once the cloning is finished, CD into that directory.", "tokens": [50614, 3443, 264, 596, 16638, 307, 4335, 11, 6743, 666, 300, 21120, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3439, "seek": 1465600, "start": 14665.0, "end": 14668.0, "text": " And let's open Adam.", "tokens": [50814, 400, 718, 311, 1269, 7938, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3440, "seek": 1465600, "start": 14668.0, "end": 14671.0, "text": " Once Adam opens, open the minimal notebook directory.", "tokens": [50964, 3443, 7938, 9870, 11, 1269, 264, 13206, 21060, 21120, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3441, "seek": 1465600, "start": 14671.0, "end": 14677.0, "text": " This minimal notebook image is actually different than the minimal notebook image you used in the last video,", "tokens": [51114, 639, 13206, 21060, 3256, 307, 767, 819, 813, 264, 13206, 21060, 3256, 291, 1143, 294, 264, 1036, 960, 11, 51414], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3442, "seek": 1465600, "start": 14677.0, "end": 14680.0, "text": " but the one that we used in the last video is actually deprecated.", "tokens": [51414, 457, 264, 472, 300, 321, 1143, 294, 264, 1036, 960, 307, 767, 1367, 13867, 770, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3443, "seek": 1465600, "start": 14680.0, "end": 14682.0, "text": " And this is the modern replacement.", "tokens": [51564, 400, 341, 307, 264, 4363, 14419, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08272170066833497, "compression_ratio": 1.8009259259259258, "no_speech_prob": 0.0021823509596288204}, {"id": 3444, "seek": 1468200, "start": 14682.0, "end": 14686.0, "text": " This image doesn't have a racks based logo in the top right hand corner.", "tokens": [50364, 639, 3256, 1177, 380, 362, 257, 47063, 2361, 9699, 294, 264, 1192, 558, 1011, 4538, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3445, "seek": 1468200, "start": 14686.0, "end": 14688.0, "text": " Let's open up the Docker file.", "tokens": [50564, 961, 311, 1269, 493, 264, 33772, 3991, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3446, "seek": 1468200, "start": 14688.0, "end": 14691.0, "text": " This is the file that tells Docker how to build the image.", "tokens": [50664, 639, 307, 264, 3991, 300, 5112, 33772, 577, 281, 1322, 264, 3256, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3447, "seek": 1468200, "start": 14691.0, "end": 14696.0, "text": " This from line is how Docker knows what this image inherits from.", "tokens": [50814, 639, 490, 1622, 307, 577, 33772, 3255, 437, 341, 3256, 9484, 1208, 490, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3448, "seek": 1468200, "start": 14696.0, "end": 14699.0, "text": " The Debbie and Jesse image is used as a base.", "tokens": [51064, 440, 35834, 293, 21895, 3256, 307, 1143, 382, 257, 3096, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3449, "seek": 1468200, "start": 14699.0, "end": 14704.0, "text": " You can see the list of Docker commands used to build this image.", "tokens": [51214, 509, 393, 536, 264, 1329, 295, 33772, 16901, 1143, 281, 1322, 341, 3256, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3450, "seek": 1468200, "start": 14704.0, "end": 14710.0, "text": " At the end, we specify that the start notebook dot shell file should be executed.", "tokens": [51464, 1711, 264, 917, 11, 321, 16500, 300, 264, 722, 21060, 5893, 8720, 3991, 820, 312, 17577, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3451, "seek": 1468200, "start": 14710.0, "end": 14711.0, "text": " Let's open that.", "tokens": [51764, 961, 311, 1269, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05680751389470594, "compression_ratio": 1.756, "no_speech_prob": 0.012818471528589725}, {"id": 3452, "seek": 1471100, "start": 14711.0, "end": 14714.0, "text": " Here you can see how the notebook is launched.", "tokens": [50364, 1692, 291, 393, 536, 577, 264, 21060, 307, 8730, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3453, "seek": 1471100, "start": 14714.0, "end": 14719.0, "text": " The config file used for the notebook is stored under jupiter underscore notebook underscore config.", "tokens": [50514, 440, 6662, 3991, 1143, 337, 264, 21060, 307, 12187, 833, 361, 1010, 1681, 37556, 21060, 37556, 6662, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3454, "seek": 1471100, "start": 14719.0, "end": 14723.0, "text": " This is the same kind of config file that we looked at in the second chapter.", "tokens": [50764, 639, 307, 264, 912, 733, 295, 6662, 3991, 300, 321, 2956, 412, 294, 264, 1150, 7187, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3455, "seek": 1471100, "start": 14723.0, "end": 14726.0, "text": " The files as they are in this repository are not a Docker image.", "tokens": [50964, 440, 7098, 382, 436, 366, 294, 341, 25841, 366, 406, 257, 33772, 3256, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3456, "seek": 1471100, "start": 14726.0, "end": 14728.0, "text": " We have to first build them.", "tokens": [51114, 492, 362, 281, 700, 1322, 552, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3457, "seek": 1471100, "start": 14728.0, "end": 14731.0, "text": " The build process is described in the make file.", "tokens": [51214, 440, 1322, 1399, 307, 7619, 294, 264, 652, 3991, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3458, "seek": 1471100, "start": 14731.0, "end": 14733.0, "text": " Let's open that.", "tokens": [51364, 961, 311, 1269, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3459, "seek": 1471100, "start": 14733.0, "end": 14737.0, "text": " The help section describes how the build make file is used.", "tokens": [51464, 440, 854, 3541, 15626, 577, 264, 1322, 652, 3991, 307, 1143, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05395495354592263, "compression_ratio": 1.831275720164609, "no_speech_prob": 0.0013668532483279705}, {"id": 3460, "seek": 1473700, "start": 14737.0, "end": 14743.0, "text": " To build the minimal notebook, we just need to run build forward slash minimal dash notebook.", "tokens": [50364, 1407, 1322, 264, 13206, 21060, 11, 321, 445, 643, 281, 1190, 1322, 2128, 17330, 13206, 8240, 21060, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3461, "seek": 1473700, "start": 14743.0, "end": 14746.0, "text": " Let's try that within this directory.", "tokens": [50664, 961, 311, 853, 300, 1951, 341, 21120, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3462, "seek": 1473700, "start": 14746.0, "end": 14749.0, "text": " First, Docker will download the base image.", "tokens": [50814, 2386, 11, 33772, 486, 5484, 264, 3096, 3256, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3463, "seek": 1473700, "start": 14749.0, "end": 14756.0, "text": " It will take a while, but once it's done, your image will be built.", "tokens": [50964, 467, 486, 747, 257, 1339, 11, 457, 1564, 309, 311, 1096, 11, 428, 3256, 486, 312, 3094, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3464, "seek": 1473700, "start": 14756.0, "end": 14759.0, "text": " Now let's try using this image with Tempenby.", "tokens": [51314, 823, 718, 311, 853, 1228, 341, 3256, 365, 8095, 5200, 2322, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3465, "seek": 1473700, "start": 14759.0, "end": 14762.0, "text": " Start a Docker quick terminal.", "tokens": [51464, 6481, 257, 33772, 1702, 14709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3466, "seek": 1473700, "start": 14762.0, "end": 14766.0, "text": " Once the terminal starts, pay attention to the IP address like you did before.", "tokens": [51614, 3443, 264, 14709, 3719, 11, 1689, 3202, 281, 264, 8671, 2985, 411, 291, 630, 949, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09293408069795775, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.001548656029626727}, {"id": 3467, "seek": 1476600, "start": 14766.0, "end": 14770.0, "text": " We're going to run the same commands that we did in the video before the last video,", "tokens": [50364, 492, 434, 516, 281, 1190, 264, 912, 16901, 300, 321, 630, 294, 264, 960, 949, 264, 1036, 960, 11, 50564], "temperature": 0.0, "avg_logprob": -0.05681519281296503, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.02227015048265457}, {"id": 3468, "seek": 1476600, "start": 14770.0, "end": 14775.0, "text": " skipping the Docker pull command and changing some of the contents of the last command.", "tokens": [50564, 31533, 264, 33772, 2235, 5622, 293, 4473, 512, 295, 264, 15768, 295, 264, 1036, 5622, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05681519281296503, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.02227015048265457}, {"id": 3469, "seek": 1476600, "start": 14775.0, "end": 14778.0, "text": " If you're continuing on from the last video,", "tokens": [50814, 759, 291, 434, 9289, 322, 490, 264, 1036, 960, 11, 50964], "temperature": 0.0, "avg_logprob": -0.05681519281296503, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.02227015048265457}, {"id": 3470, "seek": 1476600, "start": 14778.0, "end": 14783.0, "text": " make sure that you close all the existing Docker containers before trying to do this.", "tokens": [50964, 652, 988, 300, 291, 1998, 439, 264, 6741, 33772, 17089, 949, 1382, 281, 360, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05681519281296503, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.02227015048265457}, {"id": 3471, "seek": 1476600, "start": 14783.0, "end": 14786.0, "text": " To do so, you can run the following command.", "tokens": [51214, 1407, 360, 370, 11, 291, 393, 1190, 264, 3480, 5622, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05681519281296503, "compression_ratio": 1.7313432835820894, "no_speech_prob": 0.02227015048265457}, {"id": 3472, "seek": 1478600, "start": 14786.0, "end": 14796.0, "text": " Docker space stop, dollar sign, and then in parentheses Docker space PS space dash a space dash Q.", "tokens": [50364, 33772, 1901, 1590, 11, 7241, 1465, 11, 293, 550, 294, 34153, 33772, 1901, 8168, 1901, 8240, 257, 1901, 8240, 1249, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15860415949965967, "compression_ratio": 1.5363128491620113, "no_speech_prob": 0.2506730556488037}, {"id": 3473, "seek": 1478600, "start": 14796.0, "end": 14801.0, "text": " I don't have any Docker containers running right now, so I get the help output.", "tokens": [50864, 286, 500, 380, 362, 604, 33772, 17089, 2614, 558, 586, 11, 370, 286, 483, 264, 854, 5598, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15860415949965967, "compression_ratio": 1.5363128491620113, "no_speech_prob": 0.2506730556488037}, {"id": 3474, "seek": 1478600, "start": 14801.0, "end": 14807.0, "text": " After running that command, you want to run almost the same command, but replacing stop with RM.", "tokens": [51114, 2381, 2614, 300, 5622, 11, 291, 528, 281, 1190, 1920, 264, 912, 5622, 11, 457, 19139, 1590, 365, 23790, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15860415949965967, "compression_ratio": 1.5363128491620113, "no_speech_prob": 0.2506730556488037}, {"id": 3475, "seek": 1481600, "start": 14816.0, "end": 14828.0, "text": " The last command is almost identical, just changing from the name forward.", "tokens": [50364, 440, 1036, 5622, 307, 1920, 14800, 11, 445, 4473, 490, 264, 1315, 2128, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07819119267080021, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.003823349252343178}, {"id": 3476, "seek": 1481600, "start": 14828.0, "end": 14833.0, "text": " Once again, we'll tell it to connect to itself, so it's capable of launching other Docker images.", "tokens": [50964, 3443, 797, 11, 321, 603, 980, 309, 281, 1745, 281, 2564, 11, 370, 309, 311, 8189, 295, 18354, 661, 33772, 5267, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07819119267080021, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.003823349252343178}, {"id": 3477, "seek": 1481600, "start": 14833.0, "end": 14837.0, "text": " And here's where the command will start to change significantly from the last video,", "tokens": [51214, 400, 510, 311, 689, 264, 5622, 486, 722, 281, 1319, 10591, 490, 264, 1036, 960, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07819119267080021, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.003823349252343178}, {"id": 3478, "seek": 1481600, "start": 14837.0, "end": 14840.0, "text": " in addition to the omitted name flag.", "tokens": [51414, 294, 4500, 281, 264, 3406, 3944, 1315, 7166, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07819119267080021, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.003823349252343178}, {"id": 3479, "seek": 1481600, "start": 14840.0, "end": 14844.0, "text": " We'll start specifying the Python command that launches the orchestrator.", "tokens": [51564, 492, 603, 722, 1608, 5489, 264, 15329, 5622, 300, 31841, 264, 14161, 19802, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07819119267080021, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.003823349252343178}, {"id": 3480, "seek": 1484400, "start": 14844.0, "end": 14847.0, "text": " We'll specify the image that we just built.", "tokens": [50364, 492, 603, 16500, 264, 3256, 300, 321, 445, 3094, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06313927471637726, "compression_ratio": 1.75, "no_speech_prob": 0.008845682255923748}, {"id": 3481, "seek": 1484400, "start": 14847.0, "end": 14852.0, "text": " Now the tricky part is that we'll have to tell the image how to launch the notebook server.", "tokens": [50514, 823, 264, 12414, 644, 307, 300, 321, 603, 362, 281, 980, 264, 3256, 577, 281, 4025, 264, 21060, 7154, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06313927471637726, "compression_ratio": 1.75, "no_speech_prob": 0.008845682255923748}, {"id": 3482, "seek": 1484400, "start": 14852.0, "end": 14855.0, "text": " We do so using the double dash command flag.", "tokens": [50764, 492, 360, 370, 1228, 264, 3834, 8240, 5622, 7166, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06313927471637726, "compression_ratio": 1.75, "no_speech_prob": 0.008845682255923748}, {"id": 3483, "seek": 1484400, "start": 14855.0, "end": 14859.0, "text": " We have to tell the notebook app what its base URL is.", "tokens": [50914, 492, 362, 281, 980, 264, 21060, 724, 437, 1080, 3096, 12905, 307, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06313927471637726, "compression_ratio": 1.75, "no_speech_prob": 0.008845682255923748}, {"id": 3484, "seek": 1484400, "start": 14859.0, "end": 14865.0, "text": " The image will format the string and you can insert special variables using curly brackets.", "tokens": [51114, 440, 3256, 486, 7877, 264, 6798, 293, 291, 393, 8969, 2121, 9102, 1228, 32066, 26179, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06313927471637726, "compression_ratio": 1.75, "no_speech_prob": 0.008845682255923748}, {"id": 3485, "seek": 1484400, "start": 14865.0, "end": 14868.0, "text": " Base path is one of those special variables that you can insert.", "tokens": [51414, 21054, 3100, 307, 472, 295, 729, 2121, 9102, 300, 291, 393, 8969, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06313927471637726, "compression_ratio": 1.75, "no_speech_prob": 0.008845682255923748}, {"id": 3486, "seek": 1486800, "start": 14868.0, "end": 14874.0, "text": " We'll tell it to listen to IP0.0.0.0, which will allow it to listen to anything.", "tokens": [50364, 492, 603, 980, 309, 281, 2140, 281, 8671, 15, 13, 15, 13, 15, 13, 15, 11, 597, 486, 2089, 309, 281, 2140, 281, 1340, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07645525974509991, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.08032973110675812}, {"id": 3487, "seek": 1486800, "start": 14874.0, "end": 14877.0, "text": " Lastly, we'll specify the port that it's listening on.", "tokens": [50664, 18072, 11, 321, 603, 16500, 264, 2436, 300, 309, 311, 4764, 322, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07645525974509991, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.08032973110675812}, {"id": 3488, "seek": 1486800, "start": 14877.0, "end": 14883.0, "text": " Once you run that command, in your web browser, try accessing the Docker image.", "tokens": [50814, 3443, 291, 1190, 300, 5622, 11, 294, 428, 3670, 11185, 11, 853, 26440, 264, 33772, 3256, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07645525974509991, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.08032973110675812}, {"id": 3489, "seek": 1486800, "start": 14883.0, "end": 14887.0, "text": " If everything works, you should see a new notebook server.", "tokens": [51114, 759, 1203, 1985, 11, 291, 820, 536, 257, 777, 21060, 7154, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07645525974509991, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.08032973110675812}, {"id": 3490, "seek": 1486800, "start": 14887.0, "end": 14892.0, "text": " This notebook server won't have a Rackspace logo in the top right-hand corner.", "tokens": [51314, 639, 21060, 7154, 1582, 380, 362, 257, 497, 501, 24824, 9699, 294, 264, 1192, 558, 12, 5543, 4538, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07645525974509991, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.08032973110675812}, {"id": 3491, "seek": 1486800, "start": 14892.0, "end": 14895.0, "text": " If you have troubles, most likely you mistyped something.", "tokens": [51564, 759, 291, 362, 15379, 11, 881, 3700, 291, 3544, 88, 3452, 746, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07645525974509991, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.08032973110675812}, {"id": 3492, "seek": 1489500, "start": 14895.0, "end": 14901.0, "text": " If you need to debug why it's not working, open up another Docker quick terminal.", "tokens": [50364, 759, 291, 643, 281, 24083, 983, 309, 311, 406, 1364, 11, 1269, 493, 1071, 33772, 1702, 14709, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10228153596441429, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.012429842725396156}, {"id": 3493, "seek": 1489500, "start": 14901.0, "end": 14906.0, "text": " When the Docker quick terminal launches, you can run docker ps-a.", "tokens": [50664, 1133, 264, 33772, 1702, 14709, 31841, 11, 291, 393, 1190, 360, 9178, 18815, 12, 64, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10228153596441429, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.012429842725396156}, {"id": 3494, "seek": 1489500, "start": 14906.0, "end": 14909.0, "text": " This will list all the Docker processes that are running.", "tokens": [50914, 639, 486, 1329, 439, 264, 33772, 7555, 300, 366, 2614, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10228153596441429, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.012429842725396156}, {"id": 3495, "seek": 1489500, "start": 14909.0, "end": 14914.0, "text": " If you see one that says exit it with an exit code in parentheses,", "tokens": [51064, 759, 291, 536, 472, 300, 1619, 11043, 309, 365, 364, 11043, 3089, 294, 34153, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10228153596441429, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.012429842725396156}, {"id": 3496, "seek": 1489500, "start": 14914.0, "end": 14916.0, "text": " you can look at the logs of that Docker image.", "tokens": [51314, 291, 393, 574, 412, 264, 20820, 295, 300, 33772, 3256, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10228153596441429, "compression_ratio": 1.6443298969072164, "no_speech_prob": 0.012429842725396156}, {"id": 3497, "seek": 1491600, "start": 14916.0, "end": 14926.0, "text": " To do so, run docker logs and then copy the container ID, which is in the far left column, and paste it.", "tokens": [50364, 1407, 360, 370, 11, 1190, 360, 9178, 20820, 293, 550, 5055, 264, 10129, 7348, 11, 597, 307, 294, 264, 1400, 1411, 7738, 11, 293, 9163, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12758718511109712, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.3240618407726288}, {"id": 3498, "seek": 1491600, "start": 14926.0, "end": 14932.0, "text": " In one of the attempts I made earlier to run this long command, I misspelled orchestrate.", "tokens": [50864, 682, 472, 295, 264, 15257, 286, 1027, 3071, 281, 1190, 341, 938, 5622, 11, 286, 1713, 33000, 14161, 4404, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12758718511109712, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.3240618407726288}, {"id": 3499, "seek": 1491600, "start": 14932.0, "end": 14936.0, "text": " This caused the server to not run and me to receive gateway errors.", "tokens": [51164, 639, 7008, 264, 7154, 281, 406, 1190, 293, 385, 281, 4774, 28532, 13603, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12758718511109712, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.3240618407726288}, {"id": 3500, "seek": 1491600, "start": 14936.0, "end": 14943.0, "text": " By looking at the logs, I could tell that that was the problem and was able to correct it quickly.", "tokens": [51364, 3146, 1237, 412, 264, 20820, 11, 286, 727, 980, 300, 300, 390, 264, 1154, 293, 390, 1075, 281, 3006, 309, 2661, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12758718511109712, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.3240618407726288}, {"id": 3501, "seek": 1494300, "start": 14943.0, "end": 14949.0, "text": " In the last couple of videos, we looked at launching TempNB using custom notebook image.", "tokens": [50364, 682, 264, 1036, 1916, 295, 2145, 11, 321, 2956, 412, 18354, 8095, 79, 45, 33, 1228, 2375, 21060, 3256, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07239903694341991, "compression_ratio": 1.842911877394636, "no_speech_prob": 0.006486786063760519}, {"id": 3502, "seek": 1494300, "start": 14949.0, "end": 14956.0, "text": " In the following videos, including this one, we'll look at creating our own custom notebook image for use with TempNB.", "tokens": [50664, 682, 264, 3480, 2145, 11, 3009, 341, 472, 11, 321, 603, 574, 412, 4084, 527, 1065, 2375, 21060, 3256, 337, 764, 365, 8095, 79, 45, 33, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07239903694341991, "compression_ratio": 1.842911877394636, "no_speech_prob": 0.006486786063760519}, {"id": 3503, "seek": 1494300, "start": 14956.0, "end": 14959.0, "text": " To get started, launch the Docker quick start terminal.", "tokens": [51014, 1407, 483, 1409, 11, 4025, 264, 33772, 1702, 722, 14709, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07239903694341991, "compression_ratio": 1.842911877394636, "no_speech_prob": 0.006486786063760519}, {"id": 3504, "seek": 1494300, "start": 14959.0, "end": 14963.0, "text": " Once the terminal launches, pay attention to the IP address like you did before.", "tokens": [51164, 3443, 264, 14709, 31841, 11, 1689, 3202, 281, 264, 8671, 2985, 411, 291, 630, 949, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07239903694341991, "compression_ratio": 1.842911877394636, "no_speech_prob": 0.006486786063760519}, {"id": 3505, "seek": 1494300, "start": 14963.0, "end": 14967.0, "text": " We'll be using that IP address to access TempNB.", "tokens": [51364, 492, 603, 312, 1228, 300, 8671, 2985, 281, 2105, 8095, 79, 45, 33, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07239903694341991, "compression_ratio": 1.842911877394636, "no_speech_prob": 0.006486786063760519}, {"id": 3506, "seek": 1494300, "start": 14967.0, "end": 14972.0, "text": " In the last couple of videos, we used the Jupyter Docker stacks minimal notebook image.", "tokens": [51564, 682, 264, 1036, 1916, 295, 2145, 11, 321, 1143, 264, 22125, 88, 391, 33772, 30792, 13206, 21060, 3256, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07239903694341991, "compression_ratio": 1.842911877394636, "no_speech_prob": 0.006486786063760519}, {"id": 3507, "seek": 1497200, "start": 14972.0, "end": 14976.0, "text": " We'll use that image as a base for our new custom image.", "tokens": [50364, 492, 603, 764, 300, 3256, 382, 257, 3096, 337, 527, 777, 2375, 3256, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06333904720488048, "compression_ratio": 1.8018433179723503, "no_speech_prob": 0.013220533728599548}, {"id": 3508, "seek": 1497200, "start": 14976.0, "end": 14980.0, "text": " To do so, let's copy the image out of the repository.", "tokens": [50564, 1407, 360, 370, 11, 718, 311, 5055, 264, 3256, 484, 295, 264, 25841, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06333904720488048, "compression_ratio": 1.8018433179723503, "no_speech_prob": 0.013220533728599548}, {"id": 3509, "seek": 1497200, "start": 14980.0, "end": 14983.0, "text": " I'll copy it into a directory called custom notebook.", "tokens": [50764, 286, 603, 5055, 309, 666, 257, 21120, 1219, 2375, 21060, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06333904720488048, "compression_ratio": 1.8018433179723503, "no_speech_prob": 0.013220533728599548}, {"id": 3510, "seek": 1497200, "start": 14983.0, "end": 14986.0, "text": " This will be the name of the custom image that I'm going to create.", "tokens": [50914, 639, 486, 312, 264, 1315, 295, 264, 2375, 3256, 300, 286, 478, 516, 281, 1884, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06333904720488048, "compression_ratio": 1.8018433179723503, "no_speech_prob": 0.013220533728599548}, {"id": 3511, "seek": 1497200, "start": 14986.0, "end": 14990.0, "text": " I'll then cd into custom notebook and I'll open Adam.", "tokens": [51064, 286, 603, 550, 269, 67, 666, 2375, 21060, 293, 286, 603, 1269, 7938, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06333904720488048, "compression_ratio": 1.8018433179723503, "no_speech_prob": 0.013220533728599548}, {"id": 3512, "seek": 1497200, "start": 14990.0, "end": 14998.0, "text": " Once Adam opens, I'll open the config file inside custom notebook Jupyter notebook underscore config.py.", "tokens": [51264, 3443, 7938, 9870, 11, 286, 603, 1269, 264, 6662, 3991, 1854, 2375, 21060, 22125, 88, 391, 21060, 37556, 6662, 13, 8200, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06333904720488048, "compression_ratio": 1.8018433179723503, "no_speech_prob": 0.013220533728599548}, {"id": 3513, "seek": 1499800, "start": 14998.0, "end": 15003.0, "text": " This is the configuration file that will be loaded by the Jupyter notebook inside the notebook image.", "tokens": [50364, 639, 307, 264, 11694, 3991, 300, 486, 312, 13210, 538, 264, 22125, 88, 391, 21060, 1854, 264, 21060, 3256, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04997750429006723, "compression_ratio": 1.7130434782608697, "no_speech_prob": 0.004904816392809153}, {"id": 3514, "seek": 1499800, "start": 15003.0, "end": 15007.0, "text": " Recalling from an earlier chapter, I'm going to set the untitled notebook name.", "tokens": [50614, 9647, 24021, 490, 364, 3071, 7187, 11, 286, 478, 516, 281, 992, 264, 1701, 270, 1493, 21060, 1315, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04997750429006723, "compression_ratio": 1.7130434782608697, "no_speech_prob": 0.004904816392809153}, {"id": 3515, "seek": 1499800, "start": 15007.0, "end": 15013.0, "text": " This is an easy variable to set that we can use to quickly judge whether or not our config file is being loaded.", "tokens": [50814, 639, 307, 364, 1858, 7006, 281, 992, 300, 321, 393, 764, 281, 2661, 6995, 1968, 420, 406, 527, 6662, 3991, 307, 885, 13210, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04997750429006723, "compression_ratio": 1.7130434782608697, "no_speech_prob": 0.004904816392809153}, {"id": 3516, "seek": 1499800, "start": 15013.0, "end": 15020.0, "text": " The variable is c.contentsManager.untitled notebook.", "tokens": [51114, 440, 7006, 307, 269, 13, 9000, 791, 6652, 3557, 13, 2760, 270, 1493, 21060, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04997750429006723, "compression_ratio": 1.7130434782608697, "no_speech_prob": 0.004904816392809153}, {"id": 3517, "seek": 1499800, "start": 15020.0, "end": 15023.0, "text": " I'll set that to test. Now I'll save the file.", "tokens": [51464, 286, 603, 992, 300, 281, 1500, 13, 823, 286, 603, 3155, 264, 3991, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04997750429006723, "compression_ratio": 1.7130434782608697, "no_speech_prob": 0.004904816392809153}, {"id": 3518, "seek": 1502300, "start": 15023.0, "end": 15028.0, "text": " Next, I'm going to create a shell file that we'll use to build this image.", "tokens": [50364, 3087, 11, 286, 478, 516, 281, 1884, 257, 8720, 3991, 300, 321, 603, 764, 281, 1322, 341, 3256, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3519, "seek": 1502300, "start": 15028.0, "end": 15032.0, "text": " I'm going to copy the shebang from the start notebook file.", "tokens": [50614, 286, 478, 516, 281, 5055, 264, 750, 20106, 490, 264, 722, 21060, 3991, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3520, "seek": 1502300, "start": 15032.0, "end": 15035.0, "text": " We'll call the new file build.sh.", "tokens": [50814, 492, 603, 818, 264, 777, 3991, 1322, 13, 2716, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3521, "seek": 1502300, "start": 15035.0, "end": 15038.0, "text": " I'm going to go back to my Docker quick start terminal.", "tokens": [50964, 286, 478, 516, 281, 352, 646, 281, 452, 33772, 1702, 722, 14709, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3522, "seek": 1502300, "start": 15038.0, "end": 15043.0, "text": " I'm going to open Adam up inside the Docker stacks repository.", "tokens": [51114, 286, 478, 516, 281, 1269, 7938, 493, 1854, 264, 33772, 30792, 25841, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3523, "seek": 1502300, "start": 15043.0, "end": 15046.0, "text": " When Adam opens, I'm going to open the make file.", "tokens": [51364, 1133, 7938, 9870, 11, 286, 478, 516, 281, 1269, 264, 652, 3991, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3524, "seek": 1502300, "start": 15046.0, "end": 15050.0, "text": " I'm going to scroll down to the build line so I can see how images are built.", "tokens": [51514, 286, 478, 516, 281, 11369, 760, 281, 264, 1322, 1622, 370, 286, 393, 536, 577, 5267, 366, 3094, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06663096664298294, "compression_ratio": 1.8201754385964912, "no_speech_prob": 0.06850781291723251}, {"id": 3525, "seek": 1505000, "start": 15050.0, "end": 15052.0, "text": " I'll go ahead and copy this line.", "tokens": [50364, 286, 603, 352, 2286, 293, 5055, 341, 1622, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0955499800124971, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.01798371970653534}, {"id": 3526, "seek": 1505000, "start": 15052.0, "end": 15057.0, "text": " I'm going to go back to the Adam that we opened up inside the custom notebook directory.", "tokens": [50464, 286, 478, 516, 281, 352, 646, 281, 264, 7938, 300, 321, 5625, 493, 1854, 264, 2375, 21060, 21120, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0955499800124971, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.01798371970653534}, {"id": 3527, "seek": 1505000, "start": 15057.0, "end": 15061.0, "text": " I'm going to paste this line inside the build.sh file.", "tokens": [50714, 286, 478, 516, 281, 9163, 341, 1622, 1854, 264, 1322, 13, 2716, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0955499800124971, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.01798371970653534}, {"id": 3528, "seek": 1505000, "start": 15061.0, "end": 15067.0, "text": " I'm going to remove drgs and replace owner with JD Fredder.", "tokens": [50914, 286, 478, 516, 281, 4159, 1224, 21559, 293, 7406, 7289, 365, 37082, 10112, 1068, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0955499800124971, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.01798371970653534}, {"id": 3529, "seek": 1505000, "start": 15067.0, "end": 15071.0, "text": " You can use whatever you want here to identify yourself.", "tokens": [51214, 509, 393, 764, 2035, 291, 528, 510, 281, 5876, 1803, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0955499800124971, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.01798371970653534}, {"id": 3530, "seek": 1505000, "start": 15071.0, "end": 15076.0, "text": " And I'm going to replace this notdir $at with the name of my notebook image.", "tokens": [51414, 400, 286, 478, 516, 281, 7406, 341, 406, 35043, 1848, 267, 365, 264, 1315, 295, 452, 21060, 3256, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0955499800124971, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.01798371970653534}, {"id": 3531, "seek": 1507600, "start": 15076.0, "end": 15081.0, "text": " I'll also get rid of the notdir $at at the end and the forward slash.", "tokens": [50364, 286, 603, 611, 483, 3973, 295, 264, 406, 35043, 1848, 267, 412, 264, 917, 293, 264, 2128, 17330, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3532, "seek": 1507600, "start": 15081.0, "end": 15087.0, "text": " This tells Docker to build the contents inside the current directory.", "tokens": [50614, 639, 5112, 33772, 281, 1322, 264, 15768, 1854, 264, 2190, 21120, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3533, "seek": 1507600, "start": 15087.0, "end": 15091.0, "text": " Now I'm going to copy this shebang again.", "tokens": [50914, 823, 286, 478, 516, 281, 5055, 341, 750, 20106, 797, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3534, "seek": 1507600, "start": 15091.0, "end": 15095.0, "text": " And create a new file for testing this image with tempnb.", "tokens": [51114, 400, 1884, 257, 777, 3991, 337, 4997, 341, 3256, 365, 18274, 77, 65, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3535, "seek": 1507600, "start": 15095.0, "end": 15097.0, "text": " I'll call this file test.sh.", "tokens": [51314, 286, 603, 818, 341, 3991, 1500, 13, 2716, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3536, "seek": 1507600, "start": 15097.0, "end": 15099.0, "text": " I'll paste the shebang.", "tokens": [51414, 286, 603, 9163, 264, 750, 20106, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3537, "seek": 1507600, "start": 15099.0, "end": 15104.0, "text": " And then I'll enter a command that causes all the images that are currently running in Docker to close.", "tokens": [51514, 400, 550, 286, 603, 3242, 257, 5622, 300, 7700, 439, 264, 5267, 300, 366, 4362, 2614, 294, 33772, 281, 1998, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0738662754723785, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.0015977206639945507}, {"id": 3538, "seek": 1510400, "start": 15104.0, "end": 15108.0, "text": " It's important to note that this command is inside this file.", "tokens": [50364, 467, 311, 1021, 281, 3637, 300, 341, 5622, 307, 1854, 341, 3991, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09772712707519532, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.008846007287502289}, {"id": 3539, "seek": 1510400, "start": 15108.0, "end": 15112.0, "text": " We don't want to run this file if there are Docker images on our system that we don't want to close.", "tokens": [50564, 492, 500, 380, 528, 281, 1190, 341, 3991, 498, 456, 366, 33772, 5267, 322, 527, 1185, 300, 321, 500, 380, 528, 281, 1998, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09772712707519532, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.008846007287502289}, {"id": 3540, "seek": 1510400, "start": 15112.0, "end": 15120.0, "text": " The reason I'm adding this line is because it becomes tedious to constantly close Docker images each time you want to run your test.", "tokens": [50764, 440, 1778, 286, 478, 5127, 341, 1622, 307, 570, 309, 3643, 38284, 281, 6460, 1998, 33772, 5267, 1184, 565, 291, 528, 281, 1190, 428, 1500, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09772712707519532, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.008846007287502289}, {"id": 3541, "seek": 1510400, "start": 15120.0, "end": 15130.0, "text": " To close all the images that are currently running, I'll use docker stop and dollar parentheses docker ps-a-q.", "tokens": [51164, 1407, 1998, 439, 264, 5267, 300, 366, 4362, 2614, 11, 286, 603, 764, 360, 9178, 1590, 293, 7241, 34153, 360, 9178, 18815, 12, 64, 12, 80, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09772712707519532, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.008846007287502289}, {"id": 3542, "seek": 1513000, "start": 15130.0, "end": 15136.0, "text": " What this does is runs docker stop on every docker image that's currently running.", "tokens": [50364, 708, 341, 775, 307, 6676, 360, 9178, 1590, 322, 633, 360, 9178, 3256, 300, 311, 4362, 2614, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07476068448416795, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.012428264133632183}, {"id": 3543, "seek": 1513000, "start": 15136.0, "end": 15141.0, "text": " I'm going to copy this line, paste it below, and replace stop with rm.", "tokens": [50664, 286, 478, 516, 281, 5055, 341, 1622, 11, 9163, 309, 2507, 11, 293, 7406, 1590, 365, 367, 76, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07476068448416795, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.012428264133632183}, {"id": 3544, "seek": 1513000, "start": 15141.0, "end": 15145.0, "text": " This will do the same thing but remove the images instead of stopping them.", "tokens": [50914, 639, 486, 360, 264, 912, 551, 457, 4159, 264, 5267, 2602, 295, 12767, 552, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07476068448416795, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.012428264133632183}, {"id": 3545, "seek": 1513000, "start": 15145.0, "end": 15149.0, "text": " Next, I'm going to create a token for use with the HTTP config proxy.", "tokens": [51114, 3087, 11, 286, 478, 516, 281, 1884, 257, 14862, 337, 764, 365, 264, 33283, 6662, 29690, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07476068448416795, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.012428264133632183}, {"id": 3546, "seek": 1514900, "start": 15149.0, "end": 15162.0, "text": " I'll use export to define the variable token as head 30 characters long of dev urandom piped with xxd-p.", "tokens": [50364, 286, 603, 764, 10725, 281, 6964, 264, 7006, 14862, 382, 1378, 2217, 4342, 938, 295, 1905, 344, 3699, 298, 8489, 292, 365, 2031, 87, 67, 12, 79, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11553342446036961, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.41844552755355835}, {"id": 3547, "seek": 1514900, "start": 15162.0, "end": 15166.0, "text": " Next, I'll run the configurable HTTP proxy image.", "tokens": [51014, 3087, 11, 286, 603, 1190, 264, 22192, 712, 33283, 29690, 3256, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11553342446036961, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.41844552755355835}, {"id": 3548, "seek": 1516600, "start": 15166.0, "end": 15169.0, "text": " To do so, I'll use docker run.", "tokens": [50364, 1407, 360, 370, 11, 286, 603, 764, 360, 9178, 1190, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2332708994547526, "compression_ratio": 0.8333333333333334, "no_speech_prob": 0.48775503039360046}, {"id": 3549, "seek": 1516900, "start": 15169.0, "end": 15179.0, "text": " Double dash net equals host dash d dash e config proxy auth token equal the token variable.", "tokens": [50364, 16633, 8240, 2533, 6915, 3975, 8240, 274, 8240, 308, 6662, 29690, 6979, 14862, 2681, 264, 14862, 7006, 13, 50864], "temperature": 0.0, "avg_logprob": -0.26569664478302, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.7243623733520508}, {"id": 3550, "seek": 1516900, "start": 15179.0, "end": 15189.0, "text": " Double dash name equals proxy image name jupiter configurable HTTP proxy space.", "tokens": [50864, 16633, 8240, 1315, 6915, 29690, 3256, 1315, 361, 1010, 1681, 22192, 712, 33283, 29690, 1901, 13, 51364], "temperature": 0.0, "avg_logprob": -0.26569664478302, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.7243623733520508}, {"id": 3551, "seek": 1518900, "start": 15189.0, "end": 15200.0, "text": " Double dash default dash target 127.0.0.1 port 9999.", "tokens": [50364, 16633, 8240, 7576, 8240, 3779, 47561, 13, 15, 13, 15, 13, 16, 2436, 1722, 49017, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11445166613604571, "compression_ratio": 1.4294117647058824, "no_speech_prob": 0.06369566172361374}, {"id": 3552, "seek": 1518900, "start": 15200.0, "end": 15204.0, "text": " I'm going to turn on word wrap so you can see the whole command.", "tokens": [50914, 286, 478, 516, 281, 1261, 322, 1349, 7019, 370, 291, 393, 536, 264, 1379, 5622, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11445166613604571, "compression_ratio": 1.4294117647058824, "no_speech_prob": 0.06369566172361374}, {"id": 3553, "seek": 1518900, "start": 15204.0, "end": 15209.0, "text": " Next, I'm going to launch the tempnb orchestrator image.", "tokens": [51114, 3087, 11, 286, 478, 516, 281, 4025, 264, 18274, 77, 65, 14161, 19802, 3256, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11445166613604571, "compression_ratio": 1.4294117647058824, "no_speech_prob": 0.06369566172361374}, {"id": 3554, "seek": 1518900, "start": 15209.0, "end": 15213.0, "text": " I'll start with the same command but deviate once I get to the name.", "tokens": [51364, 286, 603, 722, 365, 264, 912, 5622, 457, 1905, 13024, 1564, 286, 483, 281, 264, 1315, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11445166613604571, "compression_ratio": 1.4294117647058824, "no_speech_prob": 0.06369566172361374}, {"id": 3555, "seek": 1521300, "start": 15213.0, "end": 15224.0, "text": " I'll use dash v bar run docker dot sock colon four slash docker dot sock to cause the image to connect to the docker client.", "tokens": [50364, 286, 603, 764, 8240, 371, 2159, 1190, 360, 9178, 5893, 35302, 8255, 1451, 17330, 360, 9178, 5893, 35302, 281, 3082, 264, 3256, 281, 1745, 281, 264, 360, 9178, 6423, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13384934951519145, "compression_ratio": 1.49645390070922, "no_speech_prob": 0.11750876158475876}, {"id": 3556, "seek": 1521300, "start": 15224.0, "end": 15233.0, "text": " Next, I'll specify the jupiter tempnb image and the command python orchestrate dot pi.", "tokens": [50914, 3087, 11, 286, 603, 16500, 264, 361, 1010, 1681, 18274, 77, 65, 3256, 293, 264, 5622, 38797, 14161, 4404, 5893, 3895, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13384934951519145, "compression_ratio": 1.49645390070922, "no_speech_prob": 0.11750876158475876}, {"id": 3557, "seek": 1523300, "start": 15233.0, "end": 15244.0, "text": " I'll specify the image to jd fredder custom notebook and the command to start dash notebook dot sh.", "tokens": [50364, 286, 603, 16500, 264, 3256, 281, 361, 67, 283, 986, 1068, 2375, 21060, 293, 264, 5622, 281, 722, 8240, 21060, 5893, 402, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08697157846370214, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.12246228754520416}, {"id": 3558, "seek": 1523300, "start": 15244.0, "end": 15246.0, "text": " This part's really important.", "tokens": [50914, 639, 644, 311, 534, 1021, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08697157846370214, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.12246228754520416}, {"id": 3559, "seek": 1523300, "start": 15246.0, "end": 15252.0, "text": " The minimal notebook image requires you to start the notebook server using start dash notebook dot sh", "tokens": [51014, 440, 13206, 21060, 3256, 7029, 291, 281, 722, 264, 21060, 7154, 1228, 722, 8240, 21060, 5893, 402, 51314], "temperature": 0.0, "avg_logprob": -0.08697157846370214, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.12246228754520416}, {"id": 3560, "seek": 1523300, "start": 15252.0, "end": 15257.0, "text": " instead of running ipython space notebook or jupiter space notebook.", "tokens": [51314, 2602, 295, 2614, 28501, 88, 11943, 1901, 21060, 420, 361, 1010, 1681, 1901, 21060, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08697157846370214, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.12246228754520416}, {"id": 3561, "seek": 1525700, "start": 15257.0, "end": 15262.0, "text": " That's because if you run either of those, the notebook will be launched as root", "tokens": [50364, 663, 311, 570, 498, 291, 1190, 2139, 295, 729, 11, 264, 21060, 486, 312, 8730, 382, 5593, 50614], "temperature": 0.0, "avg_logprob": -0.06151085406278087, "compression_ratio": 1.9322709163346614, "no_speech_prob": 0.0939854085445404}, {"id": 3562, "seek": 1525700, "start": 15262.0, "end": 15267.0, "text": " and the notebook will be looking for the configuration file inside the root home directory.", "tokens": [50614, 293, 264, 21060, 486, 312, 1237, 337, 264, 11694, 3991, 1854, 264, 5593, 1280, 21120, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06151085406278087, "compression_ratio": 1.9322709163346614, "no_speech_prob": 0.0939854085445404}, {"id": 3563, "seek": 1525700, "start": 15267.0, "end": 15272.0, "text": " However, the configuration file is installed into the jovian user's home directory.", "tokens": [50864, 2908, 11, 264, 11694, 3991, 307, 8899, 666, 264, 1488, 85, 952, 4195, 311, 1280, 21120, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06151085406278087, "compression_ratio": 1.9322709163346614, "no_speech_prob": 0.0939854085445404}, {"id": 3564, "seek": 1525700, "start": 15272.0, "end": 15280.0, "text": " So running start dash notebook dot sh does some special things that causes the notebook to launch the server as the jovian user.", "tokens": [51114, 407, 2614, 722, 8240, 21060, 5893, 402, 775, 512, 2121, 721, 300, 7700, 264, 21060, 281, 4025, 264, 7154, 382, 264, 1488, 85, 952, 4195, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06151085406278087, "compression_ratio": 1.9322709163346614, "no_speech_prob": 0.0939854085445404}, {"id": 3565, "seek": 1525700, "start": 15280.0, "end": 15283.0, "text": " I'll have to pass some commands into the start notebook shell script.", "tokens": [51514, 286, 603, 362, 281, 1320, 512, 16901, 666, 264, 722, 21060, 8720, 5755, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06151085406278087, "compression_ratio": 1.9322709163346614, "no_speech_prob": 0.0939854085445404}, {"id": 3566, "seek": 1525700, "start": 15283.0, "end": 15286.0, "text": " To do so, I'll escape quotes.", "tokens": [51664, 1407, 360, 370, 11, 286, 603, 7615, 19963, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06151085406278087, "compression_ratio": 1.9322709163346614, "no_speech_prob": 0.0939854085445404}, {"id": 3567, "seek": 1528600, "start": 15286.0, "end": 15293.0, "text": " Inside those quotes, I'll set the base URL,", "tokens": [50364, 15123, 729, 19963, 11, 286, 603, 992, 264, 3096, 12905, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3568, "seek": 1528600, "start": 15293.0, "end": 15296.0, "text": " allow origin,", "tokens": [50714, 2089, 4957, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3569, "seek": 1528600, "start": 15296.0, "end": 15297.0, "text": " and the port.", "tokens": [50864, 293, 264, 2436, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3570, "seek": 1528600, "start": 15297.0, "end": 15303.0, "text": " I'll save this file and go back to the docker terminal.", "tokens": [50914, 286, 603, 3155, 341, 3991, 293, 352, 646, 281, 264, 360, 9178, 14709, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3571, "seek": 1528600, "start": 15303.0, "end": 15308.0, "text": " Now I'll navigate to the custom notebook directory that I created earlier", "tokens": [51214, 823, 286, 603, 12350, 281, 264, 2375, 21060, 21120, 300, 286, 2942, 3071, 51464], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3572, "seek": 1528600, "start": 15308.0, "end": 15311.0, "text": " and I'll try running the build dot sh file I just created.", "tokens": [51464, 293, 286, 603, 853, 2614, 264, 1322, 5893, 402, 3991, 286, 445, 2942, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3573, "seek": 1528600, "start": 15311.0, "end": 15315.0, "text": " If you get a permission denied, it's probably because permissions aren't set correctly on the file.", "tokens": [51614, 759, 291, 483, 257, 11226, 17774, 11, 309, 311, 1391, 570, 32723, 3212, 380, 992, 8944, 322, 264, 3991, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07132427315962941, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0009398919646628201}, {"id": 3574, "seek": 1531500, "start": 15315.0, "end": 15322.0, "text": " You can do so by running chmod plus x build dot sh.", "tokens": [50364, 509, 393, 360, 370, 538, 2614, 417, 8014, 1804, 2031, 1322, 5893, 402, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3575, "seek": 1531500, "start": 15322.0, "end": 15324.0, "text": " Looks like the image built successfully.", "tokens": [50714, 10027, 411, 264, 3256, 3094, 10727, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3576, "seek": 1531500, "start": 15324.0, "end": 15327.0, "text": " Now let's try running the test shell file.", "tokens": [50814, 823, 718, 311, 853, 2614, 264, 1500, 8720, 3991, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3577, "seek": 1531500, "start": 15327.0, "end": 15333.0, "text": " We'll have to change the permissions of that as well.", "tokens": [50964, 492, 603, 362, 281, 1319, 264, 32723, 295, 300, 382, 731, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3578, "seek": 1531500, "start": 15333.0, "end": 15334.0, "text": " Looks like that worked.", "tokens": [51264, 10027, 411, 300, 2732, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3579, "seek": 1531500, "start": 15334.0, "end": 15338.0, "text": " We get these help outputs because no images were running at the time.", "tokens": [51314, 492, 483, 613, 854, 23930, 570, 572, 5267, 645, 2614, 412, 264, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3580, "seek": 1531500, "start": 15338.0, "end": 15343.0, "text": " The last two outputs are the grids for the images that were launched.", "tokens": [51514, 440, 1036, 732, 23930, 366, 264, 677, 3742, 337, 264, 5267, 300, 645, 8730, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07447811865037487, "compression_ratio": 1.6650943396226414, "no_speech_prob": 0.005729574244469404}, {"id": 3581, "seek": 1534300, "start": 15343.0, "end": 15345.0, "text": " Let's go to the web browser.", "tokens": [50364, 961, 311, 352, 281, 264, 3670, 11185, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3582, "seek": 1534300, "start": 15345.0, "end": 15350.0, "text": " Try accessing the tempnb server via the ip address that docker printed.", "tokens": [50464, 6526, 26440, 264, 18274, 77, 65, 7154, 5766, 264, 28501, 2985, 300, 360, 9178, 13567, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3583, "seek": 1534300, "start": 15350.0, "end": 15352.0, "text": " Looks like the server launched successfully.", "tokens": [50714, 10027, 411, 264, 7154, 8730, 10727, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3584, "seek": 1534300, "start": 15352.0, "end": 15355.0, "text": " Now let's see if the config worked.", "tokens": [50814, 823, 718, 311, 536, 498, 264, 6662, 2732, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3585, "seek": 1534300, "start": 15355.0, "end": 15356.0, "text": " Awesome.", "tokens": [50964, 10391, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3586, "seek": 1534300, "start": 15356.0, "end": 15360.0, "text": " It looks like the default notebook name is no longer untitled, but is test,", "tokens": [51014, 467, 1542, 411, 264, 7576, 21060, 1315, 307, 572, 2854, 1701, 270, 1493, 11, 457, 307, 1500, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3587, "seek": 1534300, "start": 15360.0, "end": 15365.0, "text": " which implies that our config is being loaded.", "tokens": [51214, 597, 18779, 300, 527, 6662, 307, 885, 13210, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3588, "seek": 1534300, "start": 15365.0, "end": 15371.0, "text": " In this video, we'll add custom content to our tempnb notebook custom image.", "tokens": [51464, 682, 341, 960, 11, 321, 603, 909, 2375, 2701, 281, 527, 18274, 77, 65, 21060, 2375, 3256, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09252431052071708, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.016399314627051353}, {"id": 3589, "seek": 1537100, "start": 15371.0, "end": 15377.0, "text": " This process is very similar to the process that you use for adding custom content to your nb viewer deployment.", "tokens": [50364, 639, 1399, 307, 588, 2531, 281, 264, 1399, 300, 291, 764, 337, 5127, 2375, 2701, 281, 428, 297, 65, 16767, 19317, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10020055410996923, "compression_ratio": 1.6719367588932805, "no_speech_prob": 0.004467404913157225}, {"id": 3590, "seek": 1537100, "start": 15377.0, "end": 15383.0, "text": " That's because the notebook itself uses ginga2, like nb viewer, to do its templating.", "tokens": [50664, 663, 311, 570, 264, 21060, 2564, 4960, 21924, 64, 17, 11, 411, 297, 65, 16767, 11, 281, 360, 1080, 9100, 990, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10020055410996923, "compression_ratio": 1.6719367588932805, "no_speech_prob": 0.004467404913157225}, {"id": 3591, "seek": 1537100, "start": 15383.0, "end": 15386.0, "text": " First, let's start the docker quick start terminal.", "tokens": [50964, 2386, 11, 718, 311, 722, 264, 360, 9178, 1702, 722, 14709, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10020055410996923, "compression_ratio": 1.6719367588932805, "no_speech_prob": 0.004467404913157225}, {"id": 3592, "seek": 1537100, "start": 15386.0, "end": 15391.0, "text": " Pay attention to the ip address that is listed, for that's the ip you'll use to access docker.", "tokens": [51114, 11431, 3202, 281, 264, 28501, 2985, 300, 307, 10052, 11, 337, 300, 311, 264, 28501, 291, 603, 764, 281, 2105, 360, 9178, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10020055410996923, "compression_ratio": 1.6719367588932805, "no_speech_prob": 0.004467404913157225}, {"id": 3593, "seek": 1537100, "start": 15391.0, "end": 15397.0, "text": " Let's go ahead and navigate into our custom notebook directory and open atom.", "tokens": [51364, 961, 311, 352, 2286, 293, 12350, 666, 527, 2375, 21060, 21120, 293, 1269, 12018, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10020055410996923, "compression_ratio": 1.6719367588932805, "no_speech_prob": 0.004467404913157225}, {"id": 3594, "seek": 1539700, "start": 15397.0, "end": 15401.0, "text": " The first thing we'll do is create a page.html template.", "tokens": [50364, 440, 700, 551, 321, 603, 360, 307, 1884, 257, 3028, 13, 357, 15480, 12379, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3595, "seek": 1539700, "start": 15401.0, "end": 15406.0, "text": " This template will override the page.html template of the notebook.", "tokens": [50564, 639, 12379, 486, 42321, 264, 3028, 13, 357, 15480, 12379, 295, 264, 21060, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3596, "seek": 1539700, "start": 15406.0, "end": 15412.0, "text": " Inside the page.html template, we'll extend the base template of the notebook.", "tokens": [50814, 15123, 264, 3028, 13, 357, 15480, 12379, 11, 321, 603, 10101, 264, 3096, 12379, 295, 264, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3597, "seek": 1539700, "start": 15412.0, "end": 15416.0, "text": " Next, we'll override the header underscore buttons block.", "tokens": [51114, 3087, 11, 321, 603, 42321, 264, 23117, 37556, 9905, 3461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3598, "seek": 1539700, "start": 15416.0, "end": 15420.0, "text": " This block exists at the top of the notebook pages.", "tokens": [51314, 639, 3461, 8198, 412, 264, 1192, 295, 264, 21060, 7183, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3599, "seek": 1539700, "start": 15420.0, "end": 15422.0, "text": " We can use this to add our own logo.", "tokens": [51514, 492, 393, 764, 341, 281, 909, 527, 1065, 9699, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3600, "seek": 1539700, "start": 15422.0, "end": 15425.0, "text": " We'll go ahead and add an O'Reilly logo here.", "tokens": [51614, 492, 603, 352, 2286, 293, 909, 364, 422, 6, 8524, 6917, 9699, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05241160436507759, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.008060529828071594}, {"id": 3601, "seek": 1542500, "start": 15425.0, "end": 15427.0, "text": " We have two options to do this.", "tokens": [50364, 492, 362, 732, 3956, 281, 360, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.060748159885406494, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.002800579881295562}, {"id": 3602, "seek": 1542500, "start": 15427.0, "end": 15432.0, "text": " We could either add the O'Reilly picture to our custom notebook image,", "tokens": [50464, 492, 727, 2139, 909, 264, 422, 6, 8524, 6917, 3036, 281, 527, 2375, 21060, 3256, 11, 50714], "temperature": 0.0, "avg_logprob": -0.060748159885406494, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.002800579881295562}, {"id": 3603, "seek": 1542500, "start": 15432.0, "end": 15436.0, "text": " or we could host it externally and reference it here.", "tokens": [50714, 420, 321, 727, 3975, 309, 40899, 293, 6408, 309, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.060748159885406494, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.002800579881295562}, {"id": 3604, "seek": 1542500, "start": 15436.0, "end": 15445.0, "text": " For tempnb, it's better to host your images and other static content externally to the images that are launched by the orchestrator.", "tokens": [50914, 1171, 18274, 77, 65, 11, 309, 311, 1101, 281, 3975, 428, 5267, 293, 661, 13437, 2701, 40899, 281, 264, 5267, 300, 366, 8730, 538, 264, 14161, 19802, 13, 51364], "temperature": 0.0, "avg_logprob": -0.060748159885406494, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.002800579881295562}, {"id": 3605, "seek": 1542500, "start": 15445.0, "end": 15449.0, "text": " That's because the notebook server uses tornado to host its files,", "tokens": [51364, 663, 311, 570, 264, 21060, 7154, 4960, 27935, 281, 3975, 1080, 7098, 11, 51564], "temperature": 0.0, "avg_logprob": -0.060748159885406494, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.002800579881295562}, {"id": 3606, "seek": 1544900, "start": 15449.0, "end": 15454.0, "text": " and tornado isn't as fast as other servers like engine x or Apache,", "tokens": [50364, 293, 27935, 1943, 380, 382, 2370, 382, 661, 15909, 411, 2848, 2031, 420, 46597, 11, 50614], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3607, "seek": 1544900, "start": 15454.0, "end": 15458.0, "text": " which are even slower than services like CDNs.", "tokens": [50614, 597, 366, 754, 14009, 813, 3328, 411, 6743, 45, 82, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3608, "seek": 1544900, "start": 15458.0, "end": 15463.0, "text": " So what we'll do is open our web browser and get the link for the O'Reilly image.", "tokens": [50814, 407, 437, 321, 603, 360, 307, 1269, 527, 3670, 11185, 293, 483, 264, 2113, 337, 264, 422, 6, 8524, 6917, 3256, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3609, "seek": 1544900, "start": 15463.0, "end": 15466.0, "text": " www.oreilly.com", "tokens": [51064, 12520, 13, 418, 6917, 13, 1112, 51214], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3610, "seek": 1544900, "start": 15466.0, "end": 15472.0, "text": " Once the page loads, right-click on the image and say copy image URL.", "tokens": [51214, 3443, 264, 3028, 12668, 11, 558, 12, 18548, 322, 264, 3256, 293, 584, 5055, 3256, 12905, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3611, "seek": 1544900, "start": 15472.0, "end": 15474.0, "text": " Then go back to atom.", "tokens": [51514, 1396, 352, 646, 281, 12018, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3612, "seek": 1544900, "start": 15474.0, "end": 15477.0, "text": " Now on the header buttons block, add an image tag.", "tokens": [51614, 823, 322, 264, 23117, 9905, 3461, 11, 909, 364, 3256, 6162, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09527960277739025, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.1967395693063736}, {"id": 3613, "seek": 1547700, "start": 15477.0, "end": 15481.0, "text": " Set the source of that image tag to the link that you copied from O'Reilly.", "tokens": [50364, 8928, 264, 4009, 295, 300, 3256, 6162, 281, 264, 2113, 300, 291, 25365, 490, 422, 6, 8524, 6917, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3614, "seek": 1547700, "start": 15481.0, "end": 15483.0, "text": " Save the page.", "tokens": [50564, 15541, 264, 3028, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3615, "seek": 1547700, "start": 15483.0, "end": 15486.0, "text": " Now we'll need to copy this template into our image.", "tokens": [50664, 823, 321, 603, 643, 281, 5055, 341, 12379, 666, 527, 3256, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3616, "seek": 1547700, "start": 15486.0, "end": 15488.0, "text": " To do so, open your docker file.", "tokens": [50814, 1407, 360, 370, 11, 1269, 428, 360, 9178, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3617, "seek": 1547700, "start": 15488.0, "end": 15490.0, "text": " Scroll down to the bottom.", "tokens": [50914, 35395, 760, 281, 264, 2767, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3618, "seek": 1547700, "start": 15490.0, "end": 15494.0, "text": " The first thing you'll need to do is create a directory that contains templates.", "tokens": [51014, 440, 700, 551, 291, 603, 643, 281, 360, 307, 1884, 257, 21120, 300, 8306, 21165, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3619, "seek": 1547700, "start": 15494.0, "end": 15500.0, "text": " To do so, we're going to copy this line that creates the dot Jupyter directory inside the user directory.", "tokens": [51214, 1407, 360, 370, 11, 321, 434, 516, 281, 5055, 341, 1622, 300, 7829, 264, 5893, 22125, 88, 391, 21120, 1854, 264, 4195, 21120, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3620, "seek": 1547700, "start": 15500.0, "end": 15503.0, "text": " We'll put our template directory inside that.", "tokens": [51514, 492, 603, 829, 527, 12379, 21120, 1854, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3621, "seek": 1547700, "start": 15503.0, "end": 15505.0, "text": " We'll call it custom.", "tokens": [51664, 492, 603, 818, 309, 2375, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05222079110524011, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.0049046543426811695}, {"id": 3622, "seek": 1550500, "start": 15505.0, "end": 15508.0, "text": " We'll then need to copy the file into that directory.", "tokens": [50364, 492, 603, 550, 643, 281, 5055, 264, 3991, 666, 300, 21120, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3623, "seek": 1550500, "start": 15508.0, "end": 15511.0, "text": " Go ahead and copy the line that does the notebook config.", "tokens": [50514, 1037, 2286, 293, 5055, 264, 1622, 300, 775, 264, 21060, 6662, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3624, "seek": 1550500, "start": 15511.0, "end": 15518.0, "text": " Change notebook config.py to page.html and update the path to custom.", "tokens": [50664, 15060, 21060, 6662, 13, 8200, 281, 3028, 13, 357, 15480, 293, 5623, 264, 3100, 281, 2375, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3625, "seek": 1550500, "start": 15518.0, "end": 15520.0, "text": " Save the file.", "tokens": [51014, 15541, 264, 3991, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3626, "seek": 1550500, "start": 15520.0, "end": 15524.0, "text": " Lastly, you'll need to go into your Jupyter notebook config.py file.", "tokens": [51114, 18072, 11, 291, 603, 643, 281, 352, 666, 428, 22125, 88, 391, 21060, 6662, 13, 8200, 3991, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3627, "seek": 1550500, "start": 15524.0, "end": 15531.0, "text": " Inside here, below the untitled notebook line, set the extra template paths variable of the notebook app.", "tokens": [51314, 15123, 510, 11, 2507, 264, 1701, 270, 1493, 21060, 1622, 11, 992, 264, 2857, 12379, 14518, 7006, 295, 264, 21060, 724, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3628, "seek": 1550500, "start": 15531.0, "end": 15534.0, "text": " This variable accepts a list, a path.", "tokens": [51664, 639, 7006, 33538, 257, 1329, 11, 257, 3100, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06755280494689941, "compression_ratio": 1.7782608695652173, "no_speech_prob": 0.0006666626431979239}, {"id": 3629, "seek": 1553400, "start": 15534.0, "end": 15537.0, "text": " Give it the path to your custom template folder.", "tokens": [50364, 5303, 309, 264, 3100, 281, 428, 2375, 12379, 10820, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3630, "seek": 1553400, "start": 15537.0, "end": 15539.0, "text": " And then save the file.", "tokens": [50514, 400, 550, 3155, 264, 3991, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3631, "seek": 1553400, "start": 15539.0, "end": 15541.0, "text": " Now go back to your docker terminal.", "tokens": [50614, 823, 352, 646, 281, 428, 360, 9178, 14709, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3632, "seek": 1553400, "start": 15541.0, "end": 15545.0, "text": " And inside here, run the build script again.", "tokens": [50714, 400, 1854, 510, 11, 1190, 264, 1322, 5755, 797, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3633, "seek": 1553400, "start": 15545.0, "end": 15550.0, "text": " Once the build script finishes, you can run the test script.", "tokens": [50914, 3443, 264, 1322, 5755, 23615, 11, 291, 393, 1190, 264, 1500, 5755, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3634, "seek": 1553400, "start": 15550.0, "end": 15552.0, "text": " Now go back to your web browser.", "tokens": [51164, 823, 352, 646, 281, 428, 3670, 11185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3635, "seek": 1553400, "start": 15552.0, "end": 15554.0, "text": " Try accessing tempnb.", "tokens": [51264, 6526, 26440, 18274, 77, 65, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3636, "seek": 1553400, "start": 15554.0, "end": 15558.0, "text": " If all goes well, you should see the O'Reilly logo on the top of the header bar.", "tokens": [51364, 759, 439, 1709, 731, 11, 291, 820, 536, 264, 422, 6, 8524, 6917, 9699, 322, 264, 1192, 295, 264, 23117, 2159, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3637, "seek": 1553400, "start": 15558.0, "end": 15562.0, "text": " You could style this better by using css in your template page.", "tokens": [51564, 509, 727, 3758, 341, 1101, 538, 1228, 269, 3810, 294, 428, 12379, 3028, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09104778807042009, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0008040427346713841}, {"id": 3638, "seek": 1556200, "start": 15562.0, "end": 15565.0, "text": " But the point here is not to make something that looks good.", "tokens": [50364, 583, 264, 935, 510, 307, 406, 281, 652, 746, 300, 1542, 665, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3639, "seek": 1556200, "start": 15565.0, "end": 15571.0, "text": " It's just to show you how to get static content into your tempnb images.", "tokens": [50514, 467, 311, 445, 281, 855, 291, 577, 281, 483, 13437, 2701, 666, 428, 18274, 77, 65, 5267, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3640, "seek": 1556200, "start": 15571.0, "end": 15576.0, "text": " In this video, I'm going to talk to you about setting limits on your tempnb service.", "tokens": [50814, 682, 341, 960, 11, 286, 478, 516, 281, 751, 281, 291, 466, 3287, 10406, 322, 428, 18274, 77, 65, 2643, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3641, "seek": 1556200, "start": 15576.0, "end": 15579.0, "text": " And then briefly, I'll talk about security.", "tokens": [51064, 400, 550, 10515, 11, 286, 603, 751, 466, 3825, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3642, "seek": 1556200, "start": 15579.0, "end": 15581.0, "text": " To get started, open up a terminal.", "tokens": [51214, 1407, 483, 1409, 11, 1269, 493, 257, 14709, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3643, "seek": 1556200, "start": 15581.0, "end": 15585.0, "text": " Then navigate into the custom notebook directory.", "tokens": [51314, 1396, 12350, 666, 264, 2375, 21060, 21120, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3644, "seek": 1556200, "start": 15585.0, "end": 15589.0, "text": " This is the directory that contains the custom image we've created.", "tokens": [51514, 639, 307, 264, 21120, 300, 8306, 264, 2375, 3256, 321, 600, 2942, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3645, "seek": 1556200, "start": 15589.0, "end": 15591.0, "text": " Now open Adam.", "tokens": [51714, 823, 1269, 7938, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05180683052330686, "compression_ratio": 1.6705426356589148, "no_speech_prob": 0.0011693919077515602}, {"id": 3646, "seek": 1559100, "start": 15591.0, "end": 15595.0, "text": " Once Adam opens, open the test.sh file.", "tokens": [50364, 3443, 7938, 9870, 11, 1269, 264, 1500, 13, 2716, 3991, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3647, "seek": 1559100, "start": 15595.0, "end": 15600.0, "text": " This is the file that contains the lines that can launch this image in tempnb.", "tokens": [50564, 639, 307, 264, 3991, 300, 8306, 264, 3876, 300, 393, 4025, 341, 3256, 294, 18274, 77, 65, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3648, "seek": 1559100, "start": 15600.0, "end": 15602.0, "text": " In a real deployment, you could use these same lines.", "tokens": [50814, 682, 257, 957, 19317, 11, 291, 727, 764, 613, 912, 3876, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3649, "seek": 1559100, "start": 15602.0, "end": 15606.0, "text": " Just remove the two docker stop and docker rn lines.", "tokens": [50914, 1449, 4159, 264, 732, 360, 9178, 1590, 293, 360, 9178, 367, 77, 3876, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3650, "seek": 1559100, "start": 15606.0, "end": 15611.0, "text": " I'm going to enable word wrap so you can see the whole commands.", "tokens": [51114, 286, 478, 516, 281, 9528, 1349, 7019, 370, 291, 393, 536, 264, 1379, 16901, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3651, "seek": 1559100, "start": 15611.0, "end": 15614.0, "text": " The last command is the command that launches the orchestrator.", "tokens": [51364, 440, 1036, 5622, 307, 264, 5622, 300, 31841, 264, 14161, 19802, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3652, "seek": 1559100, "start": 15614.0, "end": 15619.0, "text": " We pass in a command into the image using the double dash command flag.", "tokens": [51514, 492, 1320, 294, 257, 5622, 666, 264, 3256, 1228, 264, 3834, 8240, 5622, 7166, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08470174063623478, "compression_ratio": 1.7459016393442623, "no_speech_prob": 0.000552713347133249}, {"id": 3653, "seek": 1561900, "start": 15619.0, "end": 15623.0, "text": " You can tell the orchestrator what image to use using the double dash image flag.", "tokens": [50364, 509, 393, 980, 264, 14161, 19802, 437, 3256, 281, 764, 1228, 264, 3834, 8240, 3256, 7166, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07708045751741617, "compression_ratio": 1.7, "no_speech_prob": 0.09526167809963226}, {"id": 3654, "seek": 1561900, "start": 15623.0, "end": 15626.0, "text": " There are also additional flags.", "tokens": [50564, 821, 366, 611, 4497, 23265, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07708045751741617, "compression_ratio": 1.7, "no_speech_prob": 0.09526167809963226}, {"id": 3655, "seek": 1561900, "start": 15626.0, "end": 15632.0, "text": " For example, if you need to limit the number of CPUs any particular container can use,", "tokens": [50714, 1171, 1365, 11, 498, 291, 643, 281, 4948, 264, 1230, 295, 13199, 82, 604, 1729, 10129, 393, 764, 11, 51014], "temperature": 0.0, "avg_logprob": -0.07708045751741617, "compression_ratio": 1.7, "no_speech_prob": 0.09526167809963226}, {"id": 3656, "seek": 1561900, "start": 15632.0, "end": 15636.0, "text": " you can use the double dash CPU underscore shares flag.", "tokens": [51014, 291, 393, 764, 264, 3834, 8240, 13199, 37556, 12182, 7166, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07708045751741617, "compression_ratio": 1.7, "no_speech_prob": 0.09526167809963226}, {"id": 3657, "seek": 1561900, "start": 15636.0, "end": 15641.0, "text": " And this accepts an integer value for how many CPUs are allowed.", "tokens": [51214, 400, 341, 33538, 364, 24922, 2158, 337, 577, 867, 13199, 82, 366, 4350, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07708045751741617, "compression_ratio": 1.7, "no_speech_prob": 0.09526167809963226}, {"id": 3658, "seek": 1561900, "start": 15641.0, "end": 15647.0, "text": " For example, we could limit each image to using two CPUs at most by doing equals two.", "tokens": [51464, 1171, 1365, 11, 321, 727, 4948, 1184, 3256, 281, 1228, 732, 13199, 82, 412, 881, 538, 884, 6915, 732, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07708045751741617, "compression_ratio": 1.7, "no_speech_prob": 0.09526167809963226}, {"id": 3659, "seek": 1564700, "start": 15647.0, "end": 15652.0, "text": " The next useful flag for limiting is the coal period flag.", "tokens": [50364, 440, 958, 4420, 7166, 337, 22083, 307, 264, 10209, 2896, 7166, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07696205530411158, "compression_ratio": 1.595959595959596, "no_speech_prob": 0.002800415502861142}, {"id": 3660, "seek": 1564700, "start": 15652.0, "end": 15660.0, "text": " This flag accepts an integer in seconds that determines how often containers are examined for their age", "tokens": [50614, 639, 7166, 33538, 364, 24922, 294, 3949, 300, 24799, 577, 2049, 17089, 366, 30972, 337, 641, 3205, 51014], "temperature": 0.0, "avg_logprob": -0.07696205530411158, "compression_ratio": 1.595959595959596, "no_speech_prob": 0.002800415502861142}, {"id": 3661, "seek": 1564700, "start": 15660.0, "end": 15662.0, "text": " and then collect it if old enough.", "tokens": [51014, 293, 550, 2500, 309, 498, 1331, 1547, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07696205530411158, "compression_ratio": 1.595959595959596, "no_speech_prob": 0.002800415502861142}, {"id": 3662, "seek": 1564700, "start": 15662.0, "end": 15665.0, "text": " The default for this is 600 seconds.", "tokens": [51114, 440, 7576, 337, 341, 307, 11849, 3949, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07696205530411158, "compression_ratio": 1.595959595959596, "no_speech_prob": 0.002800415502861142}, {"id": 3663, "seek": 1564700, "start": 15665.0, "end": 15667.0, "text": " This is 10 minutes.", "tokens": [51264, 639, 307, 1266, 2077, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07696205530411158, "compression_ratio": 1.595959595959596, "no_speech_prob": 0.002800415502861142}, {"id": 3664, "seek": 1564700, "start": 15667.0, "end": 15671.0, "text": " We could make this faster, for example, by doing 300 seconds.", "tokens": [51364, 492, 727, 652, 341, 4663, 11, 337, 1365, 11, 538, 884, 6641, 3949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07696205530411158, "compression_ratio": 1.595959595959596, "no_speech_prob": 0.002800415502861142}, {"id": 3665, "seek": 1567100, "start": 15671.0, "end": 15679.0, "text": " Cold timeout is the variable that sets how long it takes for a container to be sitting idle that it will get cold.", "tokens": [50364, 16918, 565, 346, 307, 264, 7006, 300, 6352, 577, 938, 309, 2516, 337, 257, 10129, 281, 312, 3798, 30650, 300, 309, 486, 483, 3554, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10225379860008156, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.030208377167582512}, {"id": 3666, "seek": 1567100, "start": 15679.0, "end": 15683.0, "text": " The default for this is 3600 seconds.", "tokens": [50764, 440, 7576, 337, 341, 307, 8652, 628, 3949, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10225379860008156, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.030208377167582512}, {"id": 3667, "seek": 1567100, "start": 15683.0, "end": 15687.0, "text": " This variable is also an integer specified in seconds.", "tokens": [50964, 639, 7006, 307, 611, 364, 24922, 22206, 294, 3949, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10225379860008156, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.030208377167582512}, {"id": 3668, "seek": 1567100, "start": 15687.0, "end": 15692.0, "text": " We can half that time by setting it to 1800 seconds.", "tokens": [51164, 492, 393, 1922, 300, 565, 538, 3287, 309, 281, 24327, 3949, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10225379860008156, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.030208377167582512}, {"id": 3669, "seek": 1567100, "start": 15692.0, "end": 15700.0, "text": " We can also set a limit on the amount of memory each container is allowed to use by setting mem underscore limit.", "tokens": [51414, 492, 393, 611, 992, 257, 4948, 322, 264, 2372, 295, 4675, 1184, 10129, 307, 4350, 281, 764, 538, 3287, 1334, 37556, 4948, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10225379860008156, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.030208377167582512}, {"id": 3670, "seek": 1570000, "start": 15700.0, "end": 15706.0, "text": " This accepts a string specifying the amount of memory that each container is allowed to use.", "tokens": [50364, 639, 33538, 257, 6798, 1608, 5489, 264, 2372, 295, 4675, 300, 1184, 10129, 307, 4350, 281, 764, 13, 50664], "temperature": 0.0, "avg_logprob": -0.058861825777136764, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.00041729456279426813}, {"id": 3671, "seek": 1570000, "start": 15706.0, "end": 15711.0, "text": " It defaults to 512M for our 512 megabytes.", "tokens": [50664, 467, 7576, 82, 281, 1025, 4762, 44, 337, 527, 1025, 4762, 10816, 24538, 13, 50914], "temperature": 0.0, "avg_logprob": -0.058861825777136764, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.00041729456279426813}, {"id": 3672, "seek": 1570000, "start": 15711.0, "end": 15716.0, "text": " We can half this by setting it to 256M.", "tokens": [50914, 492, 393, 1922, 341, 538, 3287, 309, 281, 38882, 44, 13, 51164], "temperature": 0.0, "avg_logprob": -0.058861825777136764, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.00041729456279426813}, {"id": 3673, "seek": 1570000, "start": 15716.0, "end": 15721.0, "text": " The last important flag I would like to mention is the pool size flag.", "tokens": [51164, 440, 1036, 1021, 7166, 286, 576, 411, 281, 2152, 307, 264, 7005, 2744, 7166, 13, 51414], "temperature": 0.0, "avg_logprob": -0.058861825777136764, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.00041729456279426813}, {"id": 3674, "seek": 1570000, "start": 15721.0, "end": 15728.0, "text": " This flag accepts an integer which specifies how many child docker containers can be launched by the orchestrator.", "tokens": [51414, 639, 7166, 33538, 364, 24922, 597, 1608, 11221, 577, 867, 1440, 360, 9178, 17089, 393, 312, 8730, 538, 264, 14161, 19802, 13, 51764], "temperature": 0.0, "avg_logprob": -0.058861825777136764, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.00041729456279426813}, {"id": 3675, "seek": 1572800, "start": 15728.0, "end": 15733.0, "text": " We can think of this as a limit as how many users can use Temp Add B at any given time.", "tokens": [50364, 492, 393, 519, 295, 341, 382, 257, 4948, 382, 577, 867, 5022, 393, 764, 8095, 79, 5349, 363, 412, 604, 2212, 565, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10531835045133318, "compression_ratio": 1.5949820788530467, "no_speech_prob": 0.001410272205248475}, {"id": 3676, "seek": 1572800, "start": 15733.0, "end": 15735.0, "text": " The default for this is 10.", "tokens": [50614, 440, 7576, 337, 341, 307, 1266, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10531835045133318, "compression_ratio": 1.5949820788530467, "no_speech_prob": 0.001410272205248475}, {"id": 3677, "seek": 1572800, "start": 15735.0, "end": 15738.0, "text": " We can limit it to half that by setting it to 5.", "tokens": [50714, 492, 393, 4948, 309, 281, 1922, 300, 538, 3287, 309, 281, 1025, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10531835045133318, "compression_ratio": 1.5949820788530467, "no_speech_prob": 0.001410272205248475}, {"id": 3678, "seek": 1572800, "start": 15738.0, "end": 15746.0, "text": " Note that these flags are all set outside of the double dash command because they're not actually getting passed into the image but to the orchestrator itself.", "tokens": [50864, 11633, 300, 613, 23265, 366, 439, 992, 2380, 295, 264, 3834, 8240, 5622, 570, 436, 434, 406, 767, 1242, 4678, 666, 264, 3256, 457, 281, 264, 14161, 19802, 2564, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10531835045133318, "compression_ratio": 1.5949820788530467, "no_speech_prob": 0.001410272205248475}, {"id": 3679, "seek": 1572800, "start": 15746.0, "end": 15749.0, "text": " Lastly, let's talk a little bit about security.", "tokens": [51264, 18072, 11, 718, 311, 751, 257, 707, 857, 466, 3825, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10531835045133318, "compression_ratio": 1.5949820788530467, "no_speech_prob": 0.001410272205248475}, {"id": 3680, "seek": 1572800, "start": 15749.0, "end": 15753.0, "text": " Go ahead and open up your Jupyter underscore notebook underscore config.", "tokens": [51414, 1037, 2286, 293, 1269, 493, 428, 22125, 88, 391, 37556, 21060, 37556, 6662, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10531835045133318, "compression_ratio": 1.5949820788530467, "no_speech_prob": 0.001410272205248475}, {"id": 3681, "seek": 1575300, "start": 15753.0, "end": 15760.0, "text": " You see here in this configuration file that there's a flag for HTTPS encryption and password.", "tokens": [50364, 509, 536, 510, 294, 341, 11694, 3991, 300, 456, 311, 257, 7166, 337, 11751, 51, 6273, 29575, 293, 11524, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0741697110627827, "compression_ratio": 1.6446700507614214, "no_speech_prob": 0.033072687685489655}, {"id": 3682, "seek": 1575300, "start": 15760.0, "end": 15767.0, "text": " This is the same HTTPS encryption and password that you used in the earlier chapter where you learned how to deploy the Jupyter notebook.", "tokens": [50714, 639, 307, 264, 912, 11751, 51, 6273, 29575, 293, 11524, 300, 291, 1143, 294, 264, 3071, 7187, 689, 291, 3264, 577, 281, 7274, 264, 22125, 88, 391, 21060, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0741697110627827, "compression_ratio": 1.6446700507614214, "no_speech_prob": 0.033072687685489655}, {"id": 3683, "seek": 1575300, "start": 15767.0, "end": 15774.0, "text": " This may be useful to you but take note that this is not affecting the orchestrator itself.", "tokens": [51064, 639, 815, 312, 4420, 281, 291, 457, 747, 3637, 300, 341, 307, 406, 17476, 264, 14161, 19802, 2564, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0741697110627827, "compression_ratio": 1.6446700507614214, "no_speech_prob": 0.033072687685489655}, {"id": 3684, "seek": 1577400, "start": 15774.0, "end": 15780.0, "text": " So any random user can still access your deployment of Temp Add B and launch containers.", "tokens": [50364, 407, 604, 4974, 4195, 393, 920, 2105, 428, 19317, 295, 8095, 79, 5349, 363, 293, 4025, 17089, 13, 50664], "temperature": 0.0, "avg_logprob": -0.048953646705264135, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.3809508681297302}, {"id": 3685, "seek": 1577400, "start": 15780.0, "end": 15786.0, "text": " They just may not be able to take advantage of those containers if they don't have the appropriate credentials to log on to them.", "tokens": [50664, 814, 445, 815, 406, 312, 1075, 281, 747, 5002, 295, 729, 17089, 498, 436, 500, 380, 362, 264, 6854, 27404, 281, 3565, 322, 281, 552, 13, 50964], "temperature": 0.0, "avg_logprob": -0.048953646705264135, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.3809508681297302}, {"id": 3686, "seek": 1577400, "start": 15786.0, "end": 15795.0, "text": " This means that those people could still spawn up a bunch of containers and use your entire pool even if they're not authenticated.", "tokens": [50964, 639, 1355, 300, 729, 561, 727, 920, 17088, 493, 257, 3840, 295, 17089, 293, 764, 428, 2302, 7005, 754, 498, 436, 434, 406, 9214, 3587, 13, 51414], "temperature": 0.0, "avg_logprob": -0.048953646705264135, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.3809508681297302}, {"id": 3687, "seek": 1577400, "start": 15795.0, "end": 15802.0, "text": " This is a limitation of Temp Add B as the Temp Add B orchestrator does not yet have a password mechanism.", "tokens": [51414, 639, 307, 257, 27432, 295, 8095, 79, 5349, 363, 382, 264, 8095, 79, 5349, 363, 14161, 19802, 775, 406, 1939, 362, 257, 11524, 7513, 13, 51764], "temperature": 0.0, "avg_logprob": -0.048953646705264135, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.3809508681297302}, {"id": 3688, "seek": 1580200, "start": 15802.0, "end": 15808.0, "text": " You could, however, wrap the orchestrator in your own password at Proxy.", "tokens": [50364, 509, 727, 11, 4461, 11, 7019, 264, 14161, 19802, 294, 428, 1065, 11524, 412, 1705, 12876, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06524700106996478, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.012817516922950745}, {"id": 3689, "seek": 1580200, "start": 15808.0, "end": 15812.0, "text": " In this chapter, I'll teach you about Jupyter Hub.", "tokens": [50664, 682, 341, 7187, 11, 286, 603, 2924, 291, 466, 22125, 88, 391, 18986, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06524700106996478, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.012817516922950745}, {"id": 3690, "seek": 1580200, "start": 15812.0, "end": 15823.0, "text": " The technical definition of Jupyter Hub is that it's a multi-user server that manages in Proxy's multiple instances of the single user Jupyter notebook server.", "tokens": [50864, 440, 6191, 7123, 295, 22125, 88, 391, 18986, 307, 300, 309, 311, 257, 4825, 12, 18088, 7154, 300, 22489, 294, 1705, 12876, 311, 3866, 14519, 295, 264, 2167, 4195, 22125, 88, 391, 21060, 7154, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06524700106996478, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.012817516922950745}, {"id": 3691, "seek": 1580200, "start": 15823.0, "end": 15830.0, "text": " A less technical definition is that Jupyter Hub is a multi-user version of the Jupyter notebook.", "tokens": [51414, 316, 1570, 6191, 7123, 307, 300, 22125, 88, 391, 18986, 307, 257, 4825, 12, 18088, 3037, 295, 264, 22125, 88, 391, 21060, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06524700106996478, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.012817516922950745}, {"id": 3692, "seek": 1583000, "start": 15830.0, "end": 15841.0, "text": " Jupyter Hub is a Python 3 only application, but that doesn't mean that the kernels that are ran by the notebook servers launched by Jupyter Hub are restricted to Python 3 only.", "tokens": [50364, 22125, 88, 391, 18986, 307, 257, 15329, 805, 787, 3861, 11, 457, 300, 1177, 380, 914, 300, 264, 23434, 1625, 300, 366, 5872, 538, 264, 21060, 15909, 8730, 538, 22125, 88, 391, 18986, 366, 20608, 281, 15329, 805, 787, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06012109834320691, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0031719959806650877}, {"id": 3693, "seek": 1583000, "start": 15841.0, "end": 15845.0, "text": " In other words, the user isn't restricted to Python 3.", "tokens": [50914, 682, 661, 2283, 11, 264, 4195, 1943, 380, 20608, 281, 15329, 805, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06012109834320691, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0031719959806650877}, {"id": 3694, "seek": 1583000, "start": 15845.0, "end": 15858.0, "text": " Jupyter Hub is comprised of three main pieces, the multi-user hub, the configurable HTTP proxy, and the multiple single user notebook servers that are launched by the hub.", "tokens": [51114, 22125, 88, 391, 18986, 307, 38062, 295, 1045, 2135, 3755, 11, 264, 4825, 12, 18088, 11838, 11, 264, 22192, 712, 33283, 29690, 11, 293, 264, 3866, 2167, 4195, 21060, 15909, 300, 366, 8730, 538, 264, 11838, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06012109834320691, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0031719959806650877}, {"id": 3695, "seek": 1585800, "start": 15858.0, "end": 15862.0, "text": " When you start Jupyter Hub, you're actually starting the hub application.", "tokens": [50364, 1133, 291, 722, 22125, 88, 391, 18986, 11, 291, 434, 767, 2891, 264, 11838, 3861, 13, 50564], "temperature": 0.0, "avg_logprob": -0.03908551823009144, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.008575158193707466}, {"id": 3696, "seek": 1585800, "start": 15862.0, "end": 15866.0, "text": " The hub application then spawns the configurable proxy.", "tokens": [50564, 440, 11838, 3861, 550, 17088, 82, 264, 22192, 712, 29690, 13, 50764], "temperature": 0.0, "avg_logprob": -0.03908551823009144, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.008575158193707466}, {"id": 3697, "seek": 1585800, "start": 15866.0, "end": 15871.0, "text": " The proxy forwards all requests on the root domain to the hub.", "tokens": [50764, 440, 29690, 30126, 439, 12475, 322, 264, 5593, 9274, 281, 264, 11838, 13, 51014], "temperature": 0.0, "avg_logprob": -0.03908551823009144, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.008575158193707466}, {"id": 3698, "seek": 1585800, "start": 15871.0, "end": 15874.0, "text": " The proxy is what's exposed to the internet.", "tokens": [51014, 440, 29690, 307, 437, 311, 9495, 281, 264, 4705, 13, 51164], "temperature": 0.0, "avg_logprob": -0.03908551823009144, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.008575158193707466}, {"id": 3699, "seek": 1585800, "start": 15874.0, "end": 15882.0, "text": " The hub then authenticates the user when the user connects, and the hub will launch a single user notebook server for that user.", "tokens": [51164, 440, 11838, 550, 12466, 1024, 264, 4195, 562, 264, 4195, 16967, 11, 293, 264, 11838, 486, 4025, 257, 2167, 4195, 21060, 7154, 337, 300, 4195, 13, 51564], "temperature": 0.0, "avg_logprob": -0.03908551823009144, "compression_ratio": 1.7264150943396226, "no_speech_prob": 0.008575158193707466}, {"id": 3700, "seek": 1588200, "start": 15882.0, "end": 15892.0, "text": " It then configures the proxy to route all requests on the root domain forward slash the username to that new single user notebook server that it launched.", "tokens": [50364, 467, 550, 6662, 1303, 264, 29690, 281, 7955, 439, 12475, 322, 264, 5593, 9274, 2128, 17330, 264, 30351, 281, 300, 777, 2167, 4195, 21060, 7154, 300, 309, 8730, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08483697591202982, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.030208295211195946}, {"id": 3701, "seek": 1588200, "start": 15892.0, "end": 15895.0, "text": " Jupyter Hub is highly configurable.", "tokens": [50864, 22125, 88, 391, 18986, 307, 5405, 22192, 712, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08483697591202982, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.030208295211195946}, {"id": 3702, "seek": 1588200, "start": 15895.0, "end": 15897.0, "text": " The authentication is configurable.", "tokens": [51014, 440, 26643, 307, 22192, 712, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08483697591202982, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.030208295211195946}, {"id": 3703, "seek": 1588200, "start": 15897.0, "end": 15907.0, "text": " We're going to look specifically at the O authenticator extension, which allows you to use GitHub authentication with Jupyter Hub, but you could write your own authenticator.", "tokens": [51114, 492, 434, 516, 281, 574, 4682, 412, 264, 422, 12466, 1639, 10320, 11, 597, 4045, 291, 281, 764, 23331, 26643, 365, 22125, 88, 391, 18986, 11, 457, 291, 727, 2464, 428, 1065, 12466, 1639, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08483697591202982, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.030208295211195946}, {"id": 3704, "seek": 1590700, "start": 15907.0, "end": 15913.0, "text": " This is useful if your organization uses a specialized authentication scheme.", "tokens": [50364, 639, 307, 4420, 498, 428, 4475, 4960, 257, 19813, 26643, 12232, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04170345615696262, "compression_ratio": 1.849624060150376, "no_speech_prob": 0.021610334515571594}, {"id": 3705, "seek": 1590700, "start": 15913.0, "end": 15915.0, "text": " Second, you can configure the spawning.", "tokens": [50664, 5736, 11, 291, 393, 22162, 264, 637, 35880, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04170345615696262, "compression_ratio": 1.849624060150376, "no_speech_prob": 0.021610334515571594}, {"id": 3706, "seek": 1590700, "start": 15915.0, "end": 15919.0, "text": " In other words, you can configure how single user notebook servers are launched.", "tokens": [50764, 682, 661, 2283, 11, 291, 393, 22162, 577, 2167, 4195, 21060, 15909, 366, 8730, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04170345615696262, "compression_ratio": 1.849624060150376, "no_speech_prob": 0.021610334515571594}, {"id": 3707, "seek": 1590700, "start": 15919.0, "end": 15928.0, "text": " We're going to look specifically at the Docker spawner, which is a tool that allows Jupyter Hub to spawn the single user notebook servers using Docker.", "tokens": [50964, 492, 434, 516, 281, 574, 4682, 412, 264, 33772, 17088, 260, 11, 597, 307, 257, 2290, 300, 4045, 22125, 88, 391, 18986, 281, 17088, 264, 2167, 4195, 21060, 15909, 1228, 33772, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04170345615696262, "compression_ratio": 1.849624060150376, "no_speech_prob": 0.021610334515571594}, {"id": 3708, "seek": 1590700, "start": 15928.0, "end": 15932.0, "text": " And lastly, you can configure the spawn notebook itself.", "tokens": [51414, 400, 16386, 11, 291, 393, 22162, 264, 17088, 21060, 2564, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04170345615696262, "compression_ratio": 1.849624060150376, "no_speech_prob": 0.021610334515571594}, {"id": 3709, "seek": 1590700, "start": 15932.0, "end": 15936.0, "text": " By default, Jupyter Hub launches the notebook that's installed on the local machine.", "tokens": [51614, 3146, 7576, 11, 22125, 88, 391, 18986, 31841, 264, 21060, 300, 311, 8899, 322, 264, 2654, 3479, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04170345615696262, "compression_ratio": 1.849624060150376, "no_speech_prob": 0.021610334515571594}, {"id": 3710, "seek": 1593600, "start": 15936.0, "end": 15949.0, "text": " If you're using something like the Docker spawner, you can customize the notebook by using the techniques described in the last chapter where we created a custom Jupyter notebook Docker image.", "tokens": [50364, 759, 291, 434, 1228, 746, 411, 264, 33772, 17088, 260, 11, 291, 393, 19734, 264, 21060, 538, 1228, 264, 7512, 7619, 294, 264, 1036, 7187, 689, 321, 2942, 257, 2375, 22125, 88, 391, 21060, 33772, 3256, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0682456734475125, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.011683699674904346}, {"id": 3711, "seek": 1593600, "start": 15949.0, "end": 15954.0, "text": " In the following videos, we'll look at three ways to install Jupyter Hub.", "tokens": [51014, 682, 264, 3480, 2145, 11, 321, 603, 574, 412, 1045, 2098, 281, 3625, 22125, 88, 391, 18986, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0682456734475125, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.011683699674904346}, {"id": 3712, "seek": 1593600, "start": 15954.0, "end": 15959.0, "text": " The first is a completely vanilla installed directly from package managers.", "tokens": [51264, 440, 700, 307, 257, 2584, 17528, 8899, 3838, 490, 7372, 14084, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0682456734475125, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.011683699674904346}, {"id": 3713, "seek": 1593600, "start": 15959.0, "end": 15963.0, "text": " The second is a vanilla install with the Docker launcher extension.", "tokens": [51514, 440, 1150, 307, 257, 17528, 3625, 365, 264, 33772, 36805, 10320, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0682456734475125, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.011683699674904346}, {"id": 3714, "seek": 1596300, "start": 15963.0, "end": 15978.0, "text": " And the last is a more complex install that uses a combination of the Docker launcher extension and Docker swarm to handle more users to redistribute the demand across multiple machines in order to handle a higher user load.", "tokens": [50364, 400, 264, 1036, 307, 257, 544, 3997, 3625, 300, 4960, 257, 6562, 295, 264, 33772, 36805, 10320, 293, 33772, 49839, 281, 4813, 544, 5022, 281, 36198, 2024, 1169, 264, 4733, 2108, 3866, 8379, 294, 1668, 281, 4813, 257, 2946, 4195, 3677, 13, 51114], "temperature": 0.0, "avg_logprob": -0.036673784255981445, "compression_ratio": 1.682170542635659, "no_speech_prob": 0.030663231387734413}, {"id": 3715, "seek": 1596300, "start": 15978.0, "end": 15987.0, "text": " First, let's remove the dot Jupyter folder that we created in the earlier chapter where we examined installing the vanilla notebook.", "tokens": [51114, 2386, 11, 718, 311, 4159, 264, 5893, 22125, 88, 391, 10820, 300, 321, 2942, 294, 264, 3071, 7187, 689, 321, 30972, 20762, 264, 17528, 21060, 13, 51564], "temperature": 0.0, "avg_logprob": -0.036673784255981445, "compression_ratio": 1.682170542635659, "no_speech_prob": 0.030663231387734413}, {"id": 3716, "seek": 1596300, "start": 15987.0, "end": 15992.0, "text": " We need to do this because Jupyter Hub relies on the local notebook install.", "tokens": [51564, 492, 643, 281, 360, 341, 570, 22125, 88, 391, 18986, 30910, 322, 264, 2654, 21060, 3625, 13, 51814], "temperature": 0.0, "avg_logprob": -0.036673784255981445, "compression_ratio": 1.682170542635659, "no_speech_prob": 0.030663231387734413}, {"id": 3717, "seek": 1599200, "start": 15992.0, "end": 15997.0, "text": " We don't want to dirty our new Jupyter Hub install with the config options that we set earlier.", "tokens": [50364, 492, 500, 380, 528, 281, 9360, 527, 777, 22125, 88, 391, 18986, 3625, 365, 264, 6662, 3956, 300, 321, 992, 3071, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05465175247192383, "compression_ratio": 1.99644128113879, "no_speech_prob": 0.017977572977542877}, {"id": 3718, "seek": 1599200, "start": 15997.0, "end": 16012.0, "text": " On the other hand, later you'll find configuration of Jupyter Hub to be easy because configuring the notebook servers that get launched by Jupyter Hub is the exact same procedure that we examined earlier using traitlets in the config machinery to config the vanilla notebook.", "tokens": [50614, 1282, 264, 661, 1011, 11, 1780, 291, 603, 915, 11694, 295, 22125, 88, 391, 18986, 281, 312, 1858, 570, 6662, 1345, 264, 21060, 15909, 300, 483, 8730, 538, 22125, 88, 391, 18986, 307, 264, 1900, 912, 10747, 300, 321, 30972, 3071, 1228, 22538, 12541, 294, 264, 6662, 27302, 281, 6662, 264, 17528, 21060, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05465175247192383, "compression_ratio": 1.99644128113879, "no_speech_prob": 0.017977572977542877}, {"id": 3719, "seek": 1599200, "start": 16012.0, "end": 16018.0, "text": " All the configuration that you have for the vanilla notebook will apply to the vanilla notebook that's launched by Jupyter Hub.", "tokens": [51364, 1057, 264, 11694, 300, 291, 362, 337, 264, 17528, 21060, 486, 3079, 281, 264, 17528, 21060, 300, 311, 8730, 538, 22125, 88, 391, 18986, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05465175247192383, "compression_ratio": 1.99644128113879, "no_speech_prob": 0.017977572977542877}, {"id": 3720, "seek": 1599200, "start": 16018.0, "end": 16021.0, "text": " You'll want to verify that you have Python 3 on your machine.", "tokens": [51664, 509, 603, 528, 281, 16888, 300, 291, 362, 15329, 805, 322, 428, 3479, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05465175247192383, "compression_ratio": 1.99644128113879, "no_speech_prob": 0.017977572977542877}, {"id": 3721, "seek": 1602100, "start": 16021.0, "end": 16025.0, "text": " You can do so by running Python double-dash version.", "tokens": [50364, 509, 393, 360, 370, 538, 2614, 15329, 3834, 12, 67, 1299, 3037, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08042074071949926, "compression_ratio": 1.8874458874458875, "no_speech_prob": 0.15799029171466827}, {"id": 3722, "seek": 1602100, "start": 16025.0, "end": 16030.0, "text": " If your system does not print Python 3, try Python 3 double-dash version.", "tokens": [50564, 759, 428, 1185, 775, 406, 4482, 15329, 805, 11, 853, 15329, 805, 3834, 12, 67, 1299, 3037, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08042074071949926, "compression_ratio": 1.8874458874458875, "no_speech_prob": 0.15799029171466827}, {"id": 3723, "seek": 1602100, "start": 16030.0, "end": 16043.0, "text": " If that too does not work or does not print version 3, then you'll want to revisit chapter 1 video 3 where we talk about prerequisites and you'll want to make sure that you have Python 3 installed on your machine.", "tokens": [50814, 759, 300, 886, 775, 406, 589, 420, 775, 406, 4482, 3037, 805, 11, 550, 291, 603, 528, 281, 32676, 7187, 502, 960, 805, 689, 321, 751, 466, 38333, 15398, 3324, 293, 291, 603, 528, 281, 652, 988, 300, 291, 362, 15329, 805, 8899, 322, 428, 3479, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08042074071949926, "compression_ratio": 1.8874458874458875, "no_speech_prob": 0.15799029171466827}, {"id": 3724, "seek": 1602100, "start": 16043.0, "end": 16046.0, "text": " Next, let's look at the version of Node that we have installed.", "tokens": [51464, 3087, 11, 718, 311, 574, 412, 264, 3037, 295, 38640, 300, 321, 362, 8899, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08042074071949926, "compression_ratio": 1.8874458874458875, "no_speech_prob": 0.15799029171466827}, {"id": 3725, "seek": 1602100, "start": 16046.0, "end": 16050.0, "text": " You can do so by running npm-v.", "tokens": [51614, 509, 393, 360, 370, 538, 2614, 297, 14395, 12, 85, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08042074071949926, "compression_ratio": 1.8874458874458875, "no_speech_prob": 0.15799029171466827}, {"id": 3726, "seek": 1605000, "start": 16050.0, "end": 16053.0, "text": " I have version 3.4.1 installed on my machine.", "tokens": [50364, 286, 362, 3037, 805, 13, 19, 13, 16, 8899, 322, 452, 3479, 13, 50514], "temperature": 0.0, "avg_logprob": -0.053454328466344764, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.022274162620306015}, {"id": 3727, "seek": 1605000, "start": 16053.0, "end": 16061.0, "text": " If your version is lesser than that, you can update it by running sudo npm install-g npm.", "tokens": [50514, 759, 428, 3037, 307, 22043, 813, 300, 11, 291, 393, 5623, 309, 538, 2614, 459, 2595, 297, 14395, 3625, 12, 70, 297, 14395, 13, 50914], "temperature": 0.0, "avg_logprob": -0.053454328466344764, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.022274162620306015}, {"id": 3728, "seek": 1605000, "start": 16061.0, "end": 16069.0, "text": " What this will do is cause npm to uninstall itself and then install the latest version of itself in its place.", "tokens": [50914, 708, 341, 486, 360, 307, 3082, 297, 14395, 281, 517, 40166, 2564, 293, 550, 3625, 264, 6792, 3037, 295, 2564, 294, 1080, 1081, 13, 51314], "temperature": 0.0, "avg_logprob": -0.053454328466344764, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.022274162620306015}, {"id": 3729, "seek": 1605000, "start": 16069.0, "end": 16074.0, "text": " If this command fails partway through, you'll find that you need to reinstall Node and npm.", "tokens": [51314, 759, 341, 5622, 18199, 644, 676, 807, 11, 291, 603, 915, 300, 291, 643, 281, 35056, 336, 38640, 293, 297, 14395, 13, 51564], "temperature": 0.0, "avg_logprob": -0.053454328466344764, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.022274162620306015}, {"id": 3730, "seek": 1605000, "start": 16074.0, "end": 16078.0, "text": " The first thing we'll install is the configurable HTTP proxy.", "tokens": [51564, 440, 700, 551, 321, 603, 3625, 307, 264, 22192, 712, 33283, 29690, 13, 51764], "temperature": 0.0, "avg_logprob": -0.053454328466344764, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.022274162620306015}, {"id": 3731, "seek": 1607800, "start": 16078.0, "end": 16083.0, "text": " You'll recognize that name from the earlier chapter where we looked at deploying tempnb.", "tokens": [50364, 509, 603, 5521, 300, 1315, 490, 264, 3071, 7187, 689, 321, 2956, 412, 34198, 18274, 77, 65, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08064371783558916, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.01825847662985325}, {"id": 3732, "seek": 1607800, "start": 16083.0, "end": 16088.0, "text": " However, in that chapter, we used a configurable HTTP proxy docker image.", "tokens": [50614, 2908, 11, 294, 300, 7187, 11, 321, 1143, 257, 22192, 712, 33283, 29690, 360, 9178, 3256, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08064371783558916, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.01825847662985325}, {"id": 3733, "seek": 1607800, "start": 16088.0, "end": 16093.0, "text": " So we didn't actually install the configurable HTTP proxy on the local machine.", "tokens": [50864, 407, 321, 994, 380, 767, 3625, 264, 22192, 712, 33283, 29690, 322, 264, 2654, 3479, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08064371783558916, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.01825847662985325}, {"id": 3734, "seek": 1607800, "start": 16093.0, "end": 16097.0, "text": " Because we're installing Jupyter Hub on the local machine, we'll need to do that here.", "tokens": [51114, 1436, 321, 434, 20762, 22125, 88, 391, 18986, 322, 264, 2654, 3479, 11, 321, 603, 643, 281, 360, 300, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08064371783558916, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.01825847662985325}, {"id": 3735, "seek": 1609700, "start": 16097.0, "end": 16110.0, "text": " Go ahead and run sudo npm install-g where this dash-g flag installs the software globally configurable HTTP proxy.", "tokens": [50364, 1037, 2286, 293, 1190, 459, 2595, 297, 14395, 3625, 12, 70, 689, 341, 8240, 12, 70, 7166, 3625, 82, 264, 4722, 18958, 22192, 712, 33283, 29690, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0924640938087746, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.2172359824180603}, {"id": 3736, "seek": 1609700, "start": 16110.0, "end": 16113.0, "text": " Once that is finished, you'll want to install Jupyter Hub.", "tokens": [51014, 3443, 300, 307, 4335, 11, 291, 603, 528, 281, 3625, 22125, 88, 391, 18986, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0924640938087746, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.2172359824180603}, {"id": 3737, "seek": 1609700, "start": 16113.0, "end": 16118.0, "text": " You can do so by running pip3 install Jupyter Hub.", "tokens": [51164, 509, 393, 360, 370, 538, 2614, 8489, 18, 3625, 22125, 88, 391, 18986, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0924640938087746, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.2172359824180603}, {"id": 3738, "seek": 1609700, "start": 16118.0, "end": 16122.0, "text": " By running pip3, we force the python3 pip to be used.", "tokens": [51414, 3146, 2614, 8489, 18, 11, 321, 3464, 264, 38797, 18, 8489, 281, 312, 1143, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0924640938087746, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.2172359824180603}, {"id": 3739, "seek": 1612200, "start": 16122.0, "end": 16127.0, "text": " If you receive a permission denied error, go ahead and prepend the command with sudo.", "tokens": [50364, 759, 291, 4774, 257, 11226, 17774, 6713, 11, 352, 2286, 293, 2666, 521, 264, 5622, 365, 459, 2595, 13, 50614], "temperature": 0.0, "avg_logprob": -0.051477392514546715, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.006096373312175274}, {"id": 3740, "seek": 1612200, "start": 16127.0, "end": 16130.0, "text": " Now you can try launching Jupyter Hub.", "tokens": [50614, 823, 291, 393, 853, 18354, 22125, 88, 391, 18986, 13, 50764], "temperature": 0.0, "avg_logprob": -0.051477392514546715, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.006096373312175274}, {"id": 3741, "seek": 1612200, "start": 16130.0, "end": 16141.0, "text": " If you have an error like this, go ahead and uninstall Jupyter Hub and then reinstall it.", "tokens": [50764, 759, 291, 362, 364, 6713, 411, 341, 11, 352, 2286, 293, 517, 40166, 22125, 88, 391, 18986, 293, 550, 35056, 336, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.051477392514546715, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.006096373312175274}, {"id": 3742, "seek": 1612200, "start": 16141.0, "end": 16145.0, "text": " When you first run the hub, you may get an error that there's a bad configuration file.", "tokens": [51314, 1133, 291, 700, 1190, 264, 11838, 11, 291, 815, 483, 364, 6713, 300, 456, 311, 257, 1578, 11694, 3991, 13, 51514], "temperature": 0.0, "avg_logprob": -0.051477392514546715, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.006096373312175274}, {"id": 3743, "seek": 1612200, "start": 16145.0, "end": 16149.0, "text": " You can fix this by running the command that is recommended.", "tokens": [51514, 509, 393, 3191, 341, 538, 2614, 264, 5622, 300, 307, 9628, 13, 51714], "temperature": 0.0, "avg_logprob": -0.051477392514546715, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.006096373312175274}, {"id": 3744, "seek": 1614900, "start": 16149.0, "end": 16153.0, "text": " This command will generate a configuration file for you.", "tokens": [50364, 639, 5622, 486, 8460, 257, 11694, 3991, 337, 291, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3745, "seek": 1614900, "start": 16153.0, "end": 16156.0, "text": " Say yes when asked if you want to override the file.", "tokens": [50564, 6463, 2086, 562, 2351, 498, 291, 528, 281, 42321, 264, 3991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3746, "seek": 1614900, "start": 16156.0, "end": 16159.0, "text": " Now try launching the hub.", "tokens": [50714, 823, 853, 18354, 264, 11838, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3747, "seek": 1614900, "start": 16159.0, "end": 16165.0, "text": " If everything is successful, you should get a message saying that the hub is now running at localhost 8000.", "tokens": [50864, 759, 1203, 307, 4406, 11, 291, 820, 483, 257, 3636, 1566, 300, 264, 11838, 307, 586, 2614, 412, 2654, 6037, 1649, 1360, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3748, "seek": 1614900, "start": 16165.0, "end": 16169.0, "text": " In your web browser, try accessing that.", "tokens": [51164, 682, 428, 3670, 11185, 11, 853, 26440, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3749, "seek": 1614900, "start": 16169.0, "end": 16171.0, "text": " Awesome, looks like that worked.", "tokens": [51364, 10391, 11, 1542, 411, 300, 2732, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3750, "seek": 1614900, "start": 16171.0, "end": 16177.0, "text": " Now you should be able to log on using your local system credentials.", "tokens": [51464, 823, 291, 820, 312, 1075, 281, 3565, 322, 1228, 428, 2654, 1185, 27404, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06141282602683785, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.0012841835850849748}, {"id": 3751, "seek": 1617700, "start": 16177.0, "end": 16181.0, "text": " Now that Jupyter Hub is installed, let's see how it works.", "tokens": [50364, 823, 300, 22125, 88, 391, 18986, 307, 8899, 11, 718, 311, 536, 577, 309, 1985, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05611094561490146, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.002889147261157632}, {"id": 3752, "seek": 1617700, "start": 16181.0, "end": 16184.0, "text": " You can launch Jupyter Hub by running Jupyter Hub.", "tokens": [50564, 509, 393, 4025, 22125, 88, 391, 18986, 538, 2614, 22125, 88, 391, 18986, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05611094561490146, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.002889147261157632}, {"id": 3753, "seek": 1617700, "start": 16184.0, "end": 16188.0, "text": " When Jupyter Hub launches, you'll notice a couple warnings.", "tokens": [50714, 1133, 22125, 88, 391, 18986, 31841, 11, 291, 603, 3449, 257, 1916, 30009, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05611094561490146, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.002889147261157632}, {"id": 3754, "seek": 1617700, "start": 16188.0, "end": 16194.0, "text": " The first warning is that the config proxy auth token had to be generated by Jupyter Hub.", "tokens": [50914, 440, 700, 9164, 307, 300, 264, 6662, 29690, 6979, 14862, 632, 281, 312, 10833, 538, 22125, 88, 391, 18986, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05611094561490146, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.002889147261157632}, {"id": 3755, "seek": 1617700, "start": 16194.0, "end": 16197.0, "text": " You can bypass this warning by setting that variable explicitly.", "tokens": [51214, 509, 393, 24996, 341, 9164, 538, 3287, 300, 7006, 20803, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05611094561490146, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.002889147261157632}, {"id": 3756, "seek": 1617700, "start": 16197.0, "end": 16204.0, "text": " In the future, when you decide to use extensions with Jupyter Hub, such as NBGrader, you'll need to set this token.", "tokens": [51364, 682, 264, 2027, 11, 562, 291, 4536, 281, 764, 25129, 365, 22125, 88, 391, 18986, 11, 1270, 382, 426, 33, 38, 6206, 260, 11, 291, 603, 643, 281, 992, 341, 14862, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05611094561490146, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.002889147261157632}, {"id": 3757, "seek": 1620400, "start": 16204.0, "end": 16210.0, "text": " This token is how applications can communicate with the configurable HTTP proxy.", "tokens": [50364, 639, 14862, 307, 577, 5821, 393, 7890, 365, 264, 22192, 712, 33283, 29690, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04964845914107103, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.02930300496518612}, {"id": 3758, "seek": 1620400, "start": 16210.0, "end": 16219.0, "text": " NBGrader, for example, adds a handle to the configurable HTTP proxy that allows graders to access notebooks with a special interface.", "tokens": [50664, 426, 33, 38, 6206, 260, 11, 337, 1365, 11, 10860, 257, 4813, 281, 264, 22192, 712, 33283, 29690, 300, 4045, 46703, 281, 2105, 43782, 365, 257, 2121, 9226, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04964845914107103, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.02930300496518612}, {"id": 3759, "seek": 1620400, "start": 16219.0, "end": 16225.0, "text": " The second warning you'll see is that no admin users are defined, so the admin interface will not be accessible.", "tokens": [51114, 440, 1150, 9164, 291, 603, 536, 307, 300, 572, 24236, 5022, 366, 7642, 11, 370, 264, 24236, 9226, 486, 406, 312, 9515, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04964845914107103, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.02930300496518612}, {"id": 3760, "seek": 1620400, "start": 16225.0, "end": 16227.0, "text": " We'll go ahead and ignore that for now.", "tokens": [51414, 492, 603, 352, 2286, 293, 11200, 300, 337, 586, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04964845914107103, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.02930300496518612}, {"id": 3761, "seek": 1620400, "start": 16227.0, "end": 16229.0, "text": " Switch to your web browser.", "tokens": [51514, 13893, 281, 428, 3670, 11185, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04964845914107103, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.02930300496518612}, {"id": 3762, "seek": 1620400, "start": 16229.0, "end": 16231.0, "text": " We'll access the address listed here.", "tokens": [51614, 492, 603, 2105, 264, 2985, 10052, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04964845914107103, "compression_ratio": 1.678294573643411, "no_speech_prob": 0.02930300496518612}, {"id": 3763, "seek": 1623100, "start": 16231.0, "end": 16234.0, "text": " It should be available at localhost8000.", "tokens": [50364, 467, 820, 312, 2435, 412, 2654, 6037, 23, 1360, 13, 50514], "temperature": 0.0, "avg_logprob": -0.056315342585245766, "compression_ratio": 1.6518218623481782, "no_speech_prob": 0.01132918894290924}, {"id": 3764, "seek": 1623100, "start": 16234.0, "end": 16238.0, "text": " When you access that address, you'll be presented with a login screen.", "tokens": [50514, 1133, 291, 2105, 300, 2985, 11, 291, 603, 312, 8212, 365, 257, 24276, 2568, 13, 50714], "temperature": 0.0, "avg_logprob": -0.056315342585245766, "compression_ratio": 1.6518218623481782, "no_speech_prob": 0.01132918894290924}, {"id": 3765, "seek": 1623100, "start": 16238.0, "end": 16242.0, "text": " Jupyter Hub uses PAM as a default authentication method.", "tokens": [50714, 22125, 88, 391, 18986, 4960, 430, 2865, 382, 257, 7576, 26643, 3170, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056315342585245766, "compression_ratio": 1.6518218623481782, "no_speech_prob": 0.01132918894290924}, {"id": 3766, "seek": 1623100, "start": 16242.0, "end": 16247.0, "text": " This means that to access Jupyter Hub, you use credentials on the host machine.", "tokens": [50914, 639, 1355, 300, 281, 2105, 22125, 88, 391, 18986, 11, 291, 764, 27404, 322, 264, 3975, 3479, 13, 51164], "temperature": 0.0, "avg_logprob": -0.056315342585245766, "compression_ratio": 1.6518218623481782, "no_speech_prob": 0.01132918894290924}, {"id": 3767, "seek": 1623100, "start": 16247.0, "end": 16251.0, "text": " In other words, you use your current account name if you're running it locally.", "tokens": [51164, 682, 661, 2283, 11, 291, 764, 428, 2190, 2696, 1315, 498, 291, 434, 2614, 309, 16143, 13, 51364], "temperature": 0.0, "avg_logprob": -0.056315342585245766, "compression_ratio": 1.6518218623481782, "no_speech_prob": 0.01132918894290924}, {"id": 3768, "seek": 1623100, "start": 16251.0, "end": 16256.0, "text": " The password is the same password for the account on the host operating system.", "tokens": [51364, 440, 11524, 307, 264, 912, 11524, 337, 264, 2696, 322, 264, 3975, 7447, 1185, 13, 51614], "temperature": 0.0, "avg_logprob": -0.056315342585245766, "compression_ratio": 1.6518218623481782, "no_speech_prob": 0.01132918894290924}, {"id": 3769, "seek": 1625600, "start": 16256.0, "end": 16260.0, "text": " When you sign in, you'll be presented with your own notebook server.", "tokens": [50364, 1133, 291, 1465, 294, 11, 291, 603, 312, 8212, 365, 428, 1065, 21060, 7154, 13, 50564], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3770, "seek": 1625600, "start": 16260.0, "end": 16265.0, "text": " In the top right-hand corner, you'll see a button for a control panel and a button to log out.", "tokens": [50564, 682, 264, 1192, 558, 12, 5543, 4538, 11, 291, 603, 536, 257, 2960, 337, 257, 1969, 4831, 293, 257, 2960, 281, 3565, 484, 13, 50814], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3771, "seek": 1625600, "start": 16265.0, "end": 16267.0, "text": " Go ahead and click on control panel.", "tokens": [50814, 1037, 2286, 293, 2052, 322, 1969, 4831, 13, 50914], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3772, "seek": 1625600, "start": 16267.0, "end": 16272.0, "text": " In the control panel, you'll see an option to stop your server or access your server.", "tokens": [50914, 682, 264, 1969, 4831, 11, 291, 603, 536, 364, 3614, 281, 1590, 428, 7154, 420, 2105, 428, 7154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3773, "seek": 1625600, "start": 16272.0, "end": 16274.0, "text": " Go ahead and stop your server.", "tokens": [51164, 1037, 2286, 293, 1590, 428, 7154, 13, 51264], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3774, "seek": 1625600, "start": 16274.0, "end": 16277.0, "text": " You'll also see an option to administrate Jupyter Hub.", "tokens": [51264, 509, 603, 611, 536, 364, 3614, 281, 4968, 4404, 22125, 88, 391, 18986, 13, 51414], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3775, "seek": 1625600, "start": 16277.0, "end": 16278.0, "text": " Click on that.", "tokens": [51414, 8230, 322, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3776, "seek": 1625600, "start": 16278.0, "end": 16284.0, "text": " Here, you'll see a screen that allows you to define new users and remove users.", "tokens": [51464, 1692, 11, 291, 603, 536, 257, 2568, 300, 4045, 291, 281, 6964, 777, 5022, 293, 4159, 5022, 13, 51764], "temperature": 0.0, "avg_logprob": -0.035493839444137934, "compression_ratio": 1.9872340425531916, "no_speech_prob": 0.11588383466005325}, {"id": 3777, "seek": 1628400, "start": 16284.0, "end": 16287.0, "text": " Here, I'm going to remove JD Fredder.", "tokens": [50364, 1692, 11, 286, 478, 516, 281, 4159, 37082, 10112, 1068, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06741489534792693, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.0005883720587007701}, {"id": 3778, "seek": 1628400, "start": 16287.0, "end": 16293.0, "text": " You can also change users from admin to normal users.", "tokens": [50514, 509, 393, 611, 1319, 5022, 490, 24236, 281, 2710, 5022, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06741489534792693, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.0005883720587007701}, {"id": 3779, "seek": 1628400, "start": 16293.0, "end": 16297.0, "text": " Go ahead and log out.", "tokens": [50814, 1037, 2286, 293, 3565, 484, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06741489534792693, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.0005883720587007701}, {"id": 3780, "seek": 1628400, "start": 16297.0, "end": 16302.0, "text": " In this video, I'll show you how to install the Jupyter Hub Docker Launcher extension.", "tokens": [51014, 682, 341, 960, 11, 286, 603, 855, 291, 577, 281, 3625, 264, 22125, 88, 391, 18986, 33772, 28119, 260, 10320, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06741489534792693, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.0005883720587007701}, {"id": 3781, "seek": 1628400, "start": 16302.0, "end": 16305.0, "text": " Jupyter Hub is a highly configurable application.", "tokens": [51264, 22125, 88, 391, 18986, 307, 257, 5405, 22192, 712, 3861, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06741489534792693, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.0005883720587007701}, {"id": 3782, "seek": 1628400, "start": 16305.0, "end": 16310.0, "text": " Even the way that Jupyter Hub launches single-user notebook servers is configurable.", "tokens": [51414, 2754, 264, 636, 300, 22125, 88, 391, 18986, 31841, 2167, 12, 18088, 21060, 15909, 307, 22192, 712, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06741489534792693, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.0005883720587007701}, {"id": 3783, "seek": 1631000, "start": 16310.0, "end": 16317.0, "text": " The Docker Launcher extension allows you to force Jupyter Hub to launch the single-user notebook servers as Docker images.", "tokens": [50364, 440, 33772, 28119, 260, 10320, 4045, 291, 281, 3464, 22125, 88, 391, 18986, 281, 4025, 264, 2167, 12, 18088, 21060, 15909, 382, 33772, 5267, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04589050757784803, "compression_ratio": 1.9880952380952381, "no_speech_prob": 0.10084069520235062}, {"id": 3784, "seek": 1631000, "start": 16317.0, "end": 16323.0, "text": " With this extension, you can launch any custom Docker image that you have that contains a Jupyter notebook server.", "tokens": [50714, 2022, 341, 10320, 11, 291, 393, 4025, 604, 2375, 33772, 3256, 300, 291, 362, 300, 8306, 257, 22125, 88, 391, 21060, 7154, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04589050757784803, "compression_ratio": 1.9880952380952381, "no_speech_prob": 0.10084069520235062}, {"id": 3785, "seek": 1631000, "start": 16323.0, "end": 16328.0, "text": " If you want Jupyter Hub to launch the single-user notebook servers using something other than Docker,", "tokens": [51014, 759, 291, 528, 22125, 88, 391, 18986, 281, 4025, 264, 2167, 12, 18088, 21060, 15909, 1228, 746, 661, 813, 33772, 11, 51264], "temperature": 0.0, "avg_logprob": -0.04589050757784803, "compression_ratio": 1.9880952380952381, "no_speech_prob": 0.10084069520235062}, {"id": 3786, "seek": 1631000, "start": 16328.0, "end": 16330.0, "text": " you can write your own extension to do so.", "tokens": [51264, 291, 393, 2464, 428, 1065, 10320, 281, 360, 370, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04589050757784803, "compression_ratio": 1.9880952380952381, "no_speech_prob": 0.10084069520235062}, {"id": 3787, "seek": 1631000, "start": 16330.0, "end": 16333.0, "text": " To get started, open up a Docker Quick Term.", "tokens": [51364, 1407, 483, 1409, 11, 1269, 493, 257, 33772, 12101, 19835, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04589050757784803, "compression_ratio": 1.9880952380952381, "no_speech_prob": 0.10084069520235062}, {"id": 3788, "seek": 1631000, "start": 16333.0, "end": 16337.0, "text": " Once the Docker Quick Terminal launches, pay attention to the IP address.", "tokens": [51514, 3443, 264, 33772, 12101, 19835, 2071, 31841, 11, 1689, 3202, 281, 264, 8671, 2985, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04589050757784803, "compression_ratio": 1.9880952380952381, "no_speech_prob": 0.10084069520235062}, {"id": 3789, "seek": 1633700, "start": 16337.0, "end": 16340.0, "text": " You'll need that IP address for later during configuration.", "tokens": [50364, 509, 603, 643, 300, 8671, 2985, 337, 1780, 1830, 11694, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13761162250599962, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.06558216363191605}, {"id": 3790, "seek": 1633700, "start": 16340.0, "end": 16344.0, "text": " Before we get started, we should close all existing Docker images,", "tokens": [50514, 4546, 321, 483, 1409, 11, 321, 820, 1998, 439, 6741, 33772, 5267, 11, 50714], "temperature": 0.0, "avg_logprob": -0.13761162250599962, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.06558216363191605}, {"id": 3791, "seek": 1633700, "start": 16344.0, "end": 16348.0, "text": " just to make sure that none are running that will conflict with what we're trying to do.", "tokens": [50714, 445, 281, 652, 988, 300, 6022, 366, 2614, 300, 486, 6596, 365, 437, 321, 434, 1382, 281, 360, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13761162250599962, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.06558216363191605}, {"id": 3792, "seek": 1633700, "start": 16348.0, "end": 16357.0, "text": " To do so, you can run Docker, stop, and then dollar parentheses, Docker PS-A-Q,", "tokens": [50914, 1407, 360, 370, 11, 291, 393, 1190, 33772, 11, 1590, 11, 293, 550, 7241, 34153, 11, 33772, 8168, 12, 32, 12, 48, 11, 51364], "temperature": 0.0, "avg_logprob": -0.13761162250599962, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.06558216363191605}, {"id": 3793, "seek": 1633700, "start": 16357.0, "end": 16366.0, "text": " semicolon, Docker RM, dollar parentheses, Docker PS-A-Q.", "tokens": [51364, 27515, 38780, 11, 33772, 23790, 11, 7241, 34153, 11, 33772, 8168, 12, 32, 12, 48, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13761162250599962, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.06558216363191605}, {"id": 3794, "seek": 1636600, "start": 16366.0, "end": 16371.0, "text": " Now, you can get the Docker Spawner extension source code by cloning it from GitHub.", "tokens": [50364, 823, 11, 291, 393, 483, 264, 33772, 1738, 11251, 260, 10320, 4009, 3089, 538, 596, 16638, 309, 490, 23331, 13, 50614], "temperature": 0.0, "avg_logprob": -0.131396914637366, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.013218055479228497}, {"id": 3795, "seek": 1636600, "start": 16371.0, "end": 16381.0, "text": " To do so, run git clone, HTTPS, github.com, Jupyter Docker Spawner.git.", "tokens": [50614, 1407, 360, 370, 11, 1190, 18331, 26506, 11, 11751, 51, 6273, 11, 290, 355, 836, 13, 1112, 11, 22125, 88, 391, 33772, 1738, 11251, 260, 13, 70, 270, 13, 51114], "temperature": 0.0, "avg_logprob": -0.131396914637366, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.013218055479228497}, {"id": 3796, "seek": 1636600, "start": 16381.0, "end": 16385.0, "text": " You want to run this inside the directory that you want to install the source code to.", "tokens": [51114, 509, 528, 281, 1190, 341, 1854, 264, 21120, 300, 291, 528, 281, 3625, 264, 4009, 3089, 281, 13, 51314], "temperature": 0.0, "avg_logprob": -0.131396914637366, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.013218055479228497}, {"id": 3797, "seek": 1636600, "start": 16385.0, "end": 16388.0, "text": " I'm doing it inside my home directory.", "tokens": [51314, 286, 478, 884, 309, 1854, 452, 1280, 21120, 13, 51464], "temperature": 0.0, "avg_logprob": -0.131396914637366, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.013218055479228497}, {"id": 3798, "seek": 1638800, "start": 16388.0, "end": 16391.0, "text": " Now, CD into that repository.", "tokens": [50364, 823, 11, 6743, 666, 300, 25841, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11748680067651066, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.136546790599823}, {"id": 3799, "seek": 1638800, "start": 16391.0, "end": 16397.0, "text": " Run pip3 install-r requirements.txt.", "tokens": [50514, 8950, 8489, 18, 3625, 12, 81, 7728, 13, 83, 734, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11748680067651066, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.136546790599823}, {"id": 3800, "seek": 1638800, "start": 16397.0, "end": 16400.0, "text": " This will install the requirements of the Docker Spawner.", "tokens": [50814, 639, 486, 3625, 264, 7728, 295, 264, 33772, 1738, 11251, 260, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11748680067651066, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.136546790599823}, {"id": 3801, "seek": 1638800, "start": 16400.0, "end": 16404.0, "text": " Don't forget to add a sudo in front if your permissions require it.", "tokens": [50964, 1468, 380, 2870, 281, 909, 257, 459, 2595, 294, 1868, 498, 428, 32723, 3651, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11748680067651066, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.136546790599823}, {"id": 3802, "seek": 1638800, "start": 16404.0, "end": 16411.0, "text": " Next, run python3 setup.py install.", "tokens": [51164, 3087, 11, 1190, 38797, 18, 8657, 13, 8200, 3625, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11748680067651066, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.136546790599823}, {"id": 3803, "seek": 1638800, "start": 16411.0, "end": 16417.0, "text": " Lastly, run sudo pip3 install-e.", "tokens": [51514, 18072, 11, 1190, 459, 2595, 8489, 18, 3625, 12, 68, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11748680067651066, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.136546790599823}, {"id": 3804, "seek": 1641700, "start": 16417.0, "end": 16423.0, "text": " Now, we'll need to change our Jupyter Hub config file so it launches using the Docker Spawner.", "tokens": [50364, 823, 11, 321, 603, 643, 281, 1319, 527, 22125, 88, 391, 18986, 6662, 3991, 370, 309, 31841, 1228, 264, 33772, 1738, 11251, 260, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07591079651041234, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.010983954183757305}, {"id": 3805, "seek": 1641700, "start": 16423.0, "end": 16429.0, "text": " CD back out into your home directory or whatever directory that you launched Jupyter Hub from.", "tokens": [50664, 6743, 646, 484, 666, 428, 1280, 21120, 420, 2035, 21120, 300, 291, 8730, 22125, 88, 391, 18986, 490, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07591079651041234, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.010983954183757305}, {"id": 3806, "seek": 1641700, "start": 16429.0, "end": 16431.0, "text": " I launched Jupyter Hub from my home directory.", "tokens": [50964, 286, 8730, 22125, 88, 391, 18986, 490, 452, 1280, 21120, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07591079651041234, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.010983954183757305}, {"id": 3807, "seek": 1641700, "start": 16431.0, "end": 16437.0, "text": " Once there, open up Jupyter Hub underscore config.py file in your text editor.", "tokens": [51064, 3443, 456, 11, 1269, 493, 22125, 88, 391, 18986, 37556, 6662, 13, 8200, 3991, 294, 428, 2487, 9839, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07591079651041234, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.010983954183757305}, {"id": 3808, "seek": 1641700, "start": 16437.0, "end": 16440.0, "text": " I'm going to open it in Adam.", "tokens": [51364, 286, 478, 516, 281, 1269, 309, 294, 7938, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07591079651041234, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.010983954183757305}, {"id": 3809, "seek": 1644000, "start": 16440.0, "end": 16451.0, "text": " Below the first line, add c.jupyterhub.spawner underscore class equals dockerspawner.dockerspawner.", "tokens": [50364, 36261, 264, 700, 1622, 11, 909, 269, 13, 73, 1010, 88, 391, 71, 836, 13, 4952, 11251, 260, 37556, 1508, 6915, 360, 9178, 4952, 11251, 260, 13, 48341, 433, 79, 11251, 260, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10076237821030891, "compression_ratio": 1.7195121951219512, "no_speech_prob": 0.3957637548446655}, {"id": 3810, "seek": 1644000, "start": 16451.0, "end": 16453.0, "text": " Pay attention to the capitalization.", "tokens": [50914, 11431, 3202, 281, 264, 4238, 2144, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10076237821030891, "compression_ratio": 1.7195121951219512, "no_speech_prob": 0.3957637548446655}, {"id": 3811, "seek": 1644000, "start": 16453.0, "end": 16457.0, "text": " This tells Jupyter Hub to use the Docker Spawner.", "tokens": [51014, 639, 5112, 22125, 88, 391, 18986, 281, 764, 264, 33772, 1738, 11251, 260, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10076237821030891, "compression_ratio": 1.7195121951219512, "no_speech_prob": 0.3957637548446655}, {"id": 3812, "seek": 1644000, "start": 16457.0, "end": 16469.0, "text": " Next, add c.dockerspawner.use underscore docker underscore client underscore env equal to true.", "tokens": [51214, 3087, 11, 909, 269, 13, 48341, 433, 79, 11251, 260, 13, 438, 37556, 360, 9178, 37556, 6423, 37556, 2267, 2681, 281, 2074, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10076237821030891, "compression_ratio": 1.7195121951219512, "no_speech_prob": 0.3957637548446655}, {"id": 3813, "seek": 1646900, "start": 16469.0, "end": 16473.0, "text": " This allows the Docker Spawner to work with the Docker Quick Terminal.", "tokens": [50364, 639, 4045, 264, 33772, 1738, 11251, 260, 281, 589, 365, 264, 33772, 12101, 19835, 2071, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0517405520428668, "compression_ratio": 1.8953488372093024, "no_speech_prob": 0.008844427764415741}, {"id": 3814, "seek": 1646900, "start": 16473.0, "end": 16482.0, "text": " Next, add c.dockerspawner.tls assert underscore hostname equal to false.", "tokens": [50564, 3087, 11, 909, 269, 13, 48341, 433, 79, 11251, 260, 13, 83, 11784, 19810, 37556, 3975, 16344, 2681, 281, 7908, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0517405520428668, "compression_ratio": 1.8953488372093024, "no_speech_prob": 0.008844427764415741}, {"id": 3815, "seek": 1646900, "start": 16482.0, "end": 16488.0, "text": " This is also required to use the Docker Quick Term in your custom image with Docker Spawner.", "tokens": [51014, 639, 307, 611, 4739, 281, 764, 264, 33772, 12101, 19835, 294, 428, 2375, 3256, 365, 33772, 1738, 11251, 260, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0517405520428668, "compression_ratio": 1.8953488372093024, "no_speech_prob": 0.008844427764415741}, {"id": 3816, "seek": 1646900, "start": 16488.0, "end": 16497.0, "text": " Next, add c.dockerspawner.container underscore image equal the name of your custom image.", "tokens": [51314, 3087, 11, 909, 269, 13, 48341, 433, 79, 11251, 260, 13, 9000, 491, 260, 37556, 3256, 2681, 264, 1315, 295, 428, 2375, 3256, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0517405520428668, "compression_ratio": 1.8953488372093024, "no_speech_prob": 0.008844427764415741}, {"id": 3817, "seek": 1649700, "start": 16497.0, "end": 16501.0, "text": " I'm going to use the image that I created earlier in the tempnb chapter.", "tokens": [50364, 286, 478, 516, 281, 764, 264, 3256, 300, 286, 2942, 3071, 294, 264, 18274, 77, 65, 7187, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3818, "seek": 1649700, "start": 16501.0, "end": 16503.0, "text": " Use your custom image here too.", "tokens": [50564, 8278, 428, 2375, 3256, 510, 886, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3819, "seek": 1649700, "start": 16503.0, "end": 16507.0, "text": " Now go ahead and save the file.", "tokens": [50664, 823, 352, 2286, 293, 3155, 264, 3991, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3820, "seek": 1649700, "start": 16507.0, "end": 16511.0, "text": " Now cd into your custom notebook image directory.", "tokens": [50864, 823, 269, 67, 666, 428, 2375, 21060, 3256, 21120, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3821, "seek": 1649700, "start": 16511.0, "end": 16515.0, "text": " This is the same directory from the chapter where we investigate at tempnb.", "tokens": [51064, 639, 307, 264, 912, 21120, 490, 264, 7187, 689, 321, 15013, 412, 18274, 77, 65, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3822, "seek": 1649700, "start": 16515.0, "end": 16517.0, "text": " Open Adam.", "tokens": [51264, 7238, 7938, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3823, "seek": 1649700, "start": 16517.0, "end": 16520.0, "text": " Open up your Jupyter underscore notebook config file.", "tokens": [51364, 7238, 493, 428, 22125, 88, 391, 37556, 21060, 6662, 3991, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08504865410622586, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.004608931019902229}, {"id": 3824, "seek": 1652000, "start": 16520.0, "end": 16534.0, "text": " Inside here, add c.notebookapp.baseurl equals os.environ.jpy underscore base underscore url.", "tokens": [50364, 15123, 510, 11, 909, 269, 13, 22178, 2939, 1746, 13, 17429, 374, 75, 6915, 3003, 13, 268, 85, 2088, 13, 73, 8200, 37556, 3096, 37556, 4038, 75, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10246719013560902, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.06463225185871124}, {"id": 3825, "seek": 1652000, "start": 16534.0, "end": 16539.0, "text": " This configures the notebook server to listen to the URL that's a subset of Jupyter Hub.", "tokens": [51064, 639, 6662, 1303, 264, 21060, 7154, 281, 2140, 281, 264, 12905, 300, 311, 257, 25993, 295, 22125, 88, 391, 18986, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10246719013560902, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.06463225185871124}, {"id": 3826, "seek": 1652000, "start": 16539.0, "end": 16542.0, "text": " Go ahead and click save and then close Adam.", "tokens": [51314, 1037, 2286, 293, 2052, 3155, 293, 550, 1998, 7938, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10246719013560902, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.06463225185871124}, {"id": 3827, "seek": 1652000, "start": 16542.0, "end": 16545.0, "text": " Now you should be able to launch Jupyter Hub.", "tokens": [51464, 823, 291, 820, 312, 1075, 281, 4025, 22125, 88, 391, 18986, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10246719013560902, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.06463225185871124}, {"id": 3828, "seek": 1652000, "start": 16545.0, "end": 16548.0, "text": " Navigate back to the directory that you launched Jupyter Hub from.", "tokens": [51614, 9219, 328, 473, 646, 281, 264, 21120, 300, 291, 8730, 22125, 88, 391, 18986, 490, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10246719013560902, "compression_ratio": 1.5622119815668203, "no_speech_prob": 0.06463225185871124}, {"id": 3829, "seek": 1654800, "start": 16548.0, "end": 16550.0, "text": " Mine is the home directory.", "tokens": [50364, 11620, 307, 264, 1280, 21120, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3830, "seek": 1654800, "start": 16550.0, "end": 16562.0, "text": " Type Jupyter Hub double dash Docker Spawner.container underscore ip equals 192.168.99.100.", "tokens": [50464, 15576, 22125, 88, 391, 18986, 3834, 8240, 33772, 1738, 11251, 260, 13, 9000, 491, 260, 37556, 28501, 6915, 1294, 17, 13, 6866, 23, 13, 8494, 13, 6879, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3831, "seek": 1654800, "start": 16562.0, "end": 16568.0, "text": " Replace this IP address with the IP address that was listed by Docker when you launched the Quick Term.", "tokens": [51064, 1300, 6742, 341, 8671, 2985, 365, 264, 8671, 2985, 300, 390, 10052, 538, 33772, 562, 291, 8730, 264, 12101, 19835, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3832, "seek": 1654800, "start": 16568.0, "end": 16570.0, "text": " Click return.", "tokens": [51364, 8230, 2736, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3833, "seek": 1654800, "start": 16570.0, "end": 16572.0, "text": " Once the server launches, go to your web browser.", "tokens": [51464, 3443, 264, 7154, 31841, 11, 352, 281, 428, 3670, 11185, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3834, "seek": 1654800, "start": 16572.0, "end": 16574.0, "text": " You should be prompted with a login.", "tokens": [51564, 509, 820, 312, 31042, 365, 257, 24276, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3835, "seek": 1654800, "start": 16574.0, "end": 16577.0, "text": " Login using your local credentials.", "tokens": [51664, 10824, 259, 1228, 428, 2654, 27404, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09659674644470215, "compression_ratio": 1.4534412955465588, "no_speech_prob": 0.09666120260953903}, {"id": 3836, "seek": 1657700, "start": 16577.0, "end": 16581.0, "text": " Once you log in, you should see your custom notebook image running.", "tokens": [50364, 3443, 291, 3565, 294, 11, 291, 820, 536, 428, 2375, 21060, 3256, 2614, 13, 50564], "temperature": 0.0, "avg_logprob": -0.054034315306564856, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.002050408162176609}, {"id": 3837, "seek": 1657700, "start": 16581.0, "end": 16585.0, "text": " This means that everything we did worked.", "tokens": [50564, 639, 1355, 300, 1203, 321, 630, 2732, 13, 50764], "temperature": 0.0, "avg_logprob": -0.054034315306564856, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.002050408162176609}, {"id": 3838, "seek": 1657700, "start": 16585.0, "end": 16590.0, "text": " In the last video, we set up Jupyter Hub with the Docker Spawner extension.", "tokens": [50764, 682, 264, 1036, 960, 11, 321, 992, 493, 22125, 88, 391, 18986, 365, 264, 33772, 1738, 11251, 260, 10320, 13, 51014], "temperature": 0.0, "avg_logprob": -0.054034315306564856, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.002050408162176609}, {"id": 3839, "seek": 1657700, "start": 16590.0, "end": 16594.0, "text": " This made Jupyter Hub spawn notebook servers inside Docker images.", "tokens": [51014, 639, 1027, 22125, 88, 391, 18986, 17088, 21060, 15909, 1854, 33772, 5267, 13, 51214], "temperature": 0.0, "avg_logprob": -0.054034315306564856, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.002050408162176609}, {"id": 3840, "seek": 1657700, "start": 16594.0, "end": 16599.0, "text": " In this video, we'll take it a step further and customize how Jupyter Hub does authentication.", "tokens": [51214, 682, 341, 960, 11, 321, 603, 747, 309, 257, 1823, 3052, 293, 19734, 577, 22125, 88, 391, 18986, 775, 26643, 13, 51464], "temperature": 0.0, "avg_logprob": -0.054034315306564856, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.002050408162176609}, {"id": 3841, "seek": 1657700, "start": 16599.0, "end": 16606.0, "text": " Jupyter Hub has a notion of authenticators, which allow you to change how users authenticate with Jupyter Hub.", "tokens": [51464, 22125, 88, 391, 18986, 575, 257, 10710, 295, 12466, 3391, 11, 597, 2089, 291, 281, 1319, 577, 5022, 9214, 8700, 365, 22125, 88, 391, 18986, 13, 51814], "temperature": 0.0, "avg_logprob": -0.054034315306564856, "compression_ratio": 1.796078431372549, "no_speech_prob": 0.002050408162176609}, {"id": 3842, "seek": 1660600, "start": 16606.0, "end": 16612.0, "text": " You can use authentication methods ranging from traditional, used in academia and in the industry,", "tokens": [50364, 509, 393, 764, 26643, 7150, 25532, 490, 5164, 11, 1143, 294, 28937, 293, 294, 264, 3518, 11, 50664], "temperature": 0.0, "avg_logprob": -0.0716866866402004, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0028005363419651985}, {"id": 3843, "seek": 1660600, "start": 16612.0, "end": 16618.0, "text": " to more specialized methods, like using social networking or social media authentication.", "tokens": [50664, 281, 544, 19813, 7150, 11, 411, 1228, 2093, 17985, 420, 2093, 3021, 26643, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0716866866402004, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0028005363419651985}, {"id": 3844, "seek": 1660600, "start": 16618.0, "end": 16622.0, "text": " In this video, we'll look at using GitHub's authentication system.", "tokens": [50964, 682, 341, 960, 11, 321, 603, 574, 412, 1228, 23331, 311, 26643, 1185, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0716866866402004, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0028005363419651985}, {"id": 3845, "seek": 1660600, "start": 16622.0, "end": 16628.0, "text": " There's an extension called the O authenticator, which was written for Jupyter Hub to allow us to do this.", "tokens": [51164, 821, 311, 364, 10320, 1219, 264, 422, 12466, 1639, 11, 597, 390, 3720, 337, 22125, 88, 391, 18986, 281, 2089, 505, 281, 360, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0716866866402004, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0028005363419651985}, {"id": 3846, "seek": 1660600, "start": 16628.0, "end": 16630.0, "text": " First, open up a Docker Quick Terminal.", "tokens": [51464, 2386, 11, 1269, 493, 257, 33772, 12101, 19835, 2071, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0716866866402004, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0028005363419651985}, {"id": 3847, "seek": 1660600, "start": 16630.0, "end": 16635.0, "text": " Once the Quick Terminal launches, make sure to close all images that are already running on the machine.", "tokens": [51564, 3443, 264, 12101, 19835, 2071, 31841, 11, 652, 988, 281, 1998, 439, 5267, 300, 366, 1217, 2614, 322, 264, 3479, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0716866866402004, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0028005363419651985}, {"id": 3848, "seek": 1663500, "start": 16635.0, "end": 16645.0, "text": " Include it in the Docker Spawner extension repository is an example of how they use the Docker Spawner with the O authenticator.", "tokens": [50364, 7779, 32334, 309, 294, 264, 33772, 1738, 11251, 260, 10320, 25841, 307, 364, 1365, 295, 577, 436, 764, 264, 33772, 1738, 11251, 260, 365, 264, 422, 12466, 1639, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08099213139764194, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.0009697059285826981}, {"id": 3849, "seek": 1663500, "start": 16645.0, "end": 16647.0, "text": " We'll use that as a starting point.", "tokens": [50864, 492, 603, 764, 300, 382, 257, 2891, 935, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08099213139764194, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.0009697059285826981}, {"id": 3850, "seek": 1663500, "start": 16647.0, "end": 16651.0, "text": " First, you want to copy your Jupyter Hub config into that directory.", "tokens": [50964, 2386, 11, 291, 528, 281, 5055, 428, 22125, 88, 391, 18986, 6662, 666, 300, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08099213139764194, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.0009697059285826981}, {"id": 3851, "seek": 1663500, "start": 16651.0, "end": 16656.0, "text": " My Jupyter Hub config is located in my home directory because that's where I launched Jupyter Hub.", "tokens": [51164, 1222, 22125, 88, 391, 18986, 6662, 307, 6870, 294, 452, 1280, 21120, 570, 300, 311, 689, 286, 8730, 22125, 88, 391, 18986, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08099213139764194, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.0009697059285826981}, {"id": 3852, "seek": 1663500, "start": 16656.0, "end": 16661.0, "text": " So I'm going to copy that from my home directory into that repository example folder.", "tokens": [51414, 407, 286, 478, 516, 281, 5055, 300, 490, 452, 1280, 21120, 666, 300, 25841, 1365, 10820, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08099213139764194, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.0009697059285826981}, {"id": 3853, "seek": 1663500, "start": 16661.0, "end": 16664.0, "text": " Next, cd into that directory.", "tokens": [51664, 3087, 11, 269, 67, 666, 300, 21120, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08099213139764194, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.0009697059285826981}, {"id": 3854, "seek": 1666400, "start": 16664.0, "end": 16670.0, "text": " Now run sudo pip3 install get plus HTTPS", "tokens": [50364, 823, 1190, 459, 2595, 8489, 18, 3625, 483, 1804, 11751, 51, 6273, 50664], "temperature": 0.0, "avg_logprob": -0.18642548152378627, "compression_ratio": 1.6230366492146597, "no_speech_prob": 0.005059375893324614}, {"id": 3855, "seek": 1666400, "start": 16670.0, "end": 16678.0, "text": " forward slash forward slash github.com forward slash Jupyter forward slash O authenticator dot get.", "tokens": [50664, 2128, 17330, 2128, 17330, 290, 355, 836, 13, 1112, 2128, 17330, 22125, 88, 391, 2128, 17330, 422, 12466, 1639, 5893, 483, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18642548152378627, "compression_ratio": 1.6230366492146597, "no_speech_prob": 0.005059375893324614}, {"id": 3856, "seek": 1666400, "start": 16678.0, "end": 16682.0, "text": " When that finishes, you want to create a user list file.", "tokens": [51064, 1133, 300, 23615, 11, 291, 528, 281, 1884, 257, 4195, 1329, 3991, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18642548152378627, "compression_ratio": 1.6230366492146597, "no_speech_prob": 0.005059375893324614}, {"id": 3857, "seek": 1666400, "start": 16682.0, "end": 16684.0, "text": " Let's open up Adam inside this directory.", "tokens": [51264, 961, 311, 1269, 493, 7938, 1854, 341, 21120, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18642548152378627, "compression_ratio": 1.6230366492146597, "no_speech_prob": 0.005059375893324614}, {"id": 3858, "seek": 1666400, "start": 16684.0, "end": 16689.0, "text": " Once Adam opens, go ahead and right click and create a user list file.", "tokens": [51364, 3443, 7938, 9870, 11, 352, 2286, 293, 558, 2052, 293, 1884, 257, 4195, 1329, 3991, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18642548152378627, "compression_ratio": 1.6230366492146597, "no_speech_prob": 0.005059375893324614}, {"id": 3859, "seek": 1668900, "start": 16689.0, "end": 16694.0, "text": " Inside the user list, add GitHub user names that you want to have access to your server.", "tokens": [50364, 15123, 264, 4195, 1329, 11, 909, 23331, 4195, 5288, 300, 291, 528, 281, 362, 2105, 281, 428, 7154, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09229924739935459, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.03461133688688278}, {"id": 3860, "seek": 1668900, "start": 16694.0, "end": 16696.0, "text": " Don't forget to add your own.", "tokens": [50614, 1468, 380, 2870, 281, 909, 428, 1065, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09229924739935459, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.03461133688688278}, {"id": 3861, "seek": 1668900, "start": 16696.0, "end": 16699.0, "text": " I'm going to add Brian and Kyle, my colleagues.", "tokens": [50714, 286, 478, 516, 281, 909, 10765, 293, 18023, 11, 452, 7734, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09229924739935459, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.03461133688688278}, {"id": 3862, "seek": 1668900, "start": 16699.0, "end": 16704.0, "text": " Make yourself an admin by adding a space and admin after your account name.", "tokens": [50864, 4387, 1803, 364, 24236, 538, 5127, 257, 1901, 293, 24236, 934, 428, 2696, 1315, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09229924739935459, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.03461133688688278}, {"id": 3863, "seek": 1668900, "start": 16704.0, "end": 16710.0, "text": " Save the file and go ahead and close Adam for now.", "tokens": [51114, 15541, 264, 3991, 293, 352, 2286, 293, 1998, 7938, 337, 586, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09229924739935459, "compression_ratio": 1.5025641025641026, "no_speech_prob": 0.03461133688688278}, {"id": 3864, "seek": 1671000, "start": 16710.0, "end": 16719.0, "text": " In your web browser, go to github.com forward slash settings forward slash applications forward slash new.", "tokens": [50364, 682, 428, 3670, 11185, 11, 352, 281, 290, 355, 836, 13, 1112, 2128, 17330, 6257, 2128, 17330, 5821, 2128, 17330, 777, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3865, "seek": 1671000, "start": 16719.0, "end": 16722.0, "text": " When that page loads, give your application a name.", "tokens": [50814, 1133, 300, 3028, 12668, 11, 976, 428, 3861, 257, 1315, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3866, "seek": 1671000, "start": 16722.0, "end": 16724.0, "text": " I'm going to call mine Jupyter Hub.", "tokens": [50964, 286, 478, 516, 281, 818, 3892, 22125, 88, 391, 18986, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3867, "seek": 1671000, "start": 16724.0, "end": 16729.0, "text": " This is the name that users will see when authenticating while connecting to your Jupyter Hub instance.", "tokens": [51064, 639, 307, 264, 1315, 300, 5022, 486, 536, 562, 12466, 990, 1339, 11015, 281, 428, 22125, 88, 391, 18986, 5197, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3868, "seek": 1671000, "start": 16729.0, "end": 16733.0, "text": " Set the homepage URL to the Jupyter Hub URL.", "tokens": [51314, 8928, 264, 31301, 12905, 281, 264, 22125, 88, 391, 18986, 12905, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3869, "seek": 1671000, "start": 16733.0, "end": 16737.0, "text": " This should be for now local host 8000.", "tokens": [51514, 639, 820, 312, 337, 586, 2654, 3975, 1649, 1360, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3870, "seek": 1671000, "start": 16737.0, "end": 16739.0, "text": " Go ahead and copy that URL.", "tokens": [51714, 1037, 2286, 293, 5055, 300, 12905, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07751100713556464, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.17323118448257446}, {"id": 3871, "seek": 1673900, "start": 16739.0, "end": 16743.0, "text": " Paste it below where it says authorization callback URL.", "tokens": [50364, 43827, 309, 2507, 689, 309, 1619, 33697, 818, 3207, 12905, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3872, "seek": 1673900, "start": 16743.0, "end": 16748.0, "text": " Then append hub forward slash OAuth underscore callback.", "tokens": [50564, 1396, 34116, 11838, 2128, 17330, 48424, 2910, 37556, 818, 3207, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3873, "seek": 1673900, "start": 16748.0, "end": 16750.0, "text": " Now click register application.", "tokens": [50814, 823, 2052, 7280, 3861, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3874, "seek": 1673900, "start": 16750.0, "end": 16752.0, "text": " Go back to your desktop.", "tokens": [50914, 1037, 646, 281, 428, 14502, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3875, "seek": 1673900, "start": 16752.0, "end": 16755.0, "text": " Launch a Docker quick start terminal.", "tokens": [51014, 28119, 257, 33772, 1702, 722, 14709, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3876, "seek": 1673900, "start": 16755.0, "end": 16759.0, "text": " Once the quick start terminal launches, pay attention to the IP address that's listed.", "tokens": [51164, 3443, 264, 1702, 722, 14709, 31841, 11, 1689, 3202, 281, 264, 8671, 2985, 300, 311, 10052, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3877, "seek": 1673900, "start": 16759.0, "end": 16760.0, "text": " You'll need this later.", "tokens": [51364, 509, 603, 643, 341, 1780, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3878, "seek": 1673900, "start": 16760.0, "end": 16763.0, "text": " Now let's CD into the Docker Spanner directory.", "tokens": [51414, 823, 718, 311, 6743, 666, 264, 33772, 1738, 9805, 21120, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3879, "seek": 1673900, "start": 16763.0, "end": 16767.0, "text": " Inside that, CD into the OAuth examples directory.", "tokens": [51564, 15123, 300, 11, 6743, 666, 264, 48424, 2910, 5110, 21120, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11231376102992467, "compression_ratio": 1.6264591439688716, "no_speech_prob": 0.0053840880282223225}, {"id": 3880, "seek": 1676700, "start": 16767.0, "end": 16769.0, "text": " Now open Adam.", "tokens": [50364, 823, 1269, 7938, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1548175679312812, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.024418605491518974}, {"id": 3881, "seek": 1676700, "start": 16769.0, "end": 16774.0, "text": " Once Adam opens in that directory, open the Jupyter Hub config file.", "tokens": [50464, 3443, 7938, 9870, 294, 300, 21120, 11, 1269, 264, 22125, 88, 391, 18986, 6662, 3991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1548175679312812, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.024418605491518974}, {"id": 3882, "seek": 1676700, "start": 16774.0, "end": 16778.0, "text": " Below the container image line, you're going to need to add a new line.", "tokens": [50714, 36261, 264, 10129, 3256, 1622, 11, 291, 434, 516, 281, 643, 281, 909, 257, 777, 1622, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1548175679312812, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.024418605491518974}, {"id": 3883, "seek": 1676700, "start": 16778.0, "end": 16789.0, "text": " Add C dot Jupyter Hub dot authenticator underscore class equal to in quotes OAuth.github OAuth.", "tokens": [50914, 5349, 383, 5893, 22125, 88, 391, 18986, 5893, 12466, 1639, 37556, 1508, 2681, 281, 294, 19963, 48424, 2910, 13, 70, 355, 836, 48424, 2910, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1548175679312812, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.024418605491518974}, {"id": 3884, "seek": 1678900, "start": 16790.0, "end": 16799.0, "text": " Now below that line, add C dot GitHub OAuth authenticator dot OAuth underscore callback underscore URL", "tokens": [50414, 823, 2507, 300, 1622, 11, 909, 383, 5893, 23331, 48424, 2910, 12466, 1639, 5893, 48424, 2910, 37556, 818, 3207, 37556, 12905, 50864], "temperature": 0.0, "avg_logprob": -0.10120128548663596, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.029753735288977623}, {"id": 3885, "seek": 1678900, "start": 16799.0, "end": 16805.0, "text": " equal to the URL that you provided for the authentication callback while creating the application on github.com.", "tokens": [50864, 2681, 281, 264, 12905, 300, 291, 5649, 337, 264, 26643, 818, 3207, 1339, 4084, 264, 3861, 322, 290, 355, 836, 13, 1112, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10120128548663596, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.029753735288977623}, {"id": 3886, "seek": 1678900, "start": 16805.0, "end": 16809.0, "text": " I'm going to go back to my web browser to show you what that URL is.", "tokens": [51164, 286, 478, 516, 281, 352, 646, 281, 452, 3670, 11185, 281, 855, 291, 437, 300, 12905, 307, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10120128548663596, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.029753735288977623}, {"id": 3887, "seek": 1678900, "start": 16809.0, "end": 16811.0, "text": " At the bottom of the page, you'll see it.", "tokens": [51364, 1711, 264, 2767, 295, 264, 3028, 11, 291, 603, 536, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10120128548663596, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.029753735288977623}, {"id": 3888, "seek": 1678900, "start": 16811.0, "end": 16814.0, "text": " Go ahead and copy that.", "tokens": [51464, 1037, 2286, 293, 5055, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10120128548663596, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.029753735288977623}, {"id": 3889, "seek": 1681400, "start": 16814.0, "end": 16821.0, "text": " Now below that line, add C dot GitHub OAuth authenticator dot client underscore ID", "tokens": [50364, 823, 2507, 300, 1622, 11, 909, 383, 5893, 23331, 48424, 2910, 12466, 1639, 5893, 6423, 37556, 7348, 50714], "temperature": 0.0, "avg_logprob": -0.08538558159345462, "compression_ratio": 2.02, "no_speech_prob": 0.009411229752004147}, {"id": 3890, "seek": 1681400, "start": 16821.0, "end": 16825.0, "text": " equal to the client ID provided to you by github.", "tokens": [50714, 2681, 281, 264, 6423, 7348, 5649, 281, 291, 538, 290, 355, 836, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08538558159345462, "compression_ratio": 2.02, "no_speech_prob": 0.009411229752004147}, {"id": 3891, "seek": 1681400, "start": 16825.0, "end": 16829.0, "text": " It's located at the top of the page.", "tokens": [50914, 467, 311, 6870, 412, 264, 1192, 295, 264, 3028, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08538558159345462, "compression_ratio": 2.02, "no_speech_prob": 0.009411229752004147}, {"id": 3892, "seek": 1681400, "start": 16829.0, "end": 16835.0, "text": " Now below that line, add C dot GitHub OAuth authenticator dot client underscore secret", "tokens": [51114, 823, 2507, 300, 1622, 11, 909, 383, 5893, 23331, 48424, 2910, 12466, 1639, 5893, 6423, 37556, 4054, 51414], "temperature": 0.0, "avg_logprob": -0.08538558159345462, "compression_ratio": 2.02, "no_speech_prob": 0.009411229752004147}, {"id": 3893, "seek": 1681400, "start": 16835.0, "end": 16841.0, "text": " equal to the secret provided to you by github.", "tokens": [51414, 2681, 281, 264, 4054, 5649, 281, 291, 538, 290, 355, 836, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08538558159345462, "compression_ratio": 2.02, "no_speech_prob": 0.009411229752004147}, {"id": 3894, "seek": 1684100, "start": 16841.0, "end": 16846.0, "text": " Lastly, on the line below that, you'll need to set yourself as an administrator.", "tokens": [50364, 18072, 11, 322, 264, 1622, 2507, 300, 11, 291, 603, 643, 281, 992, 1803, 382, 364, 25529, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10298250703250661, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.0011159494752064347}, {"id": 3895, "seek": 1684100, "start": 16846.0, "end": 16854.0, "text": " To do so, set C dot authenticator dot admin underscore users equal to", "tokens": [50614, 1407, 360, 370, 11, 992, 383, 5893, 12466, 1639, 5893, 24236, 37556, 5022, 2681, 281, 51014], "temperature": 0.0, "avg_logprob": -0.10298250703250661, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.0011159494752064347}, {"id": 3896, "seek": 1684100, "start": 16854.0, "end": 16858.0, "text": " and then in square brackets and quotes your account name.", "tokens": [51014, 293, 550, 294, 3732, 26179, 293, 19963, 428, 2696, 1315, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10298250703250661, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.0011159494752064347}, {"id": 3897, "seek": 1684100, "start": 16858.0, "end": 16860.0, "text": " This is your GitHub account name.", "tokens": [51214, 639, 307, 428, 23331, 2696, 1315, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10298250703250661, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.0011159494752064347}, {"id": 3898, "seek": 1684100, "start": 16860.0, "end": 16862.0, "text": " Now save the file.", "tokens": [51314, 823, 3155, 264, 3991, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10298250703250661, "compression_ratio": 1.5174418604651163, "no_speech_prob": 0.0011159494752064347}, {"id": 3899, "seek": 1686200, "start": 16862.0, "end": 16870.0, "text": " Back in the terminal run dash run dot sh double dash Docker spawner dot container IP", "tokens": [50364, 5833, 294, 264, 14709, 1190, 8240, 1190, 5893, 402, 3834, 8240, 33772, 17088, 260, 5893, 10129, 8671, 50764], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3900, "seek": 1686200, "start": 16870.0, "end": 16874.0, "text": " equal to the IP address listed in green.", "tokens": [50764, 2681, 281, 264, 8671, 2985, 10052, 294, 3092, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3901, "seek": 1686200, "start": 16874.0, "end": 16878.0, "text": " Now in your web browser, navigate to the Jupyter Hub instance.", "tokens": [50964, 823, 294, 428, 3670, 11185, 11, 12350, 281, 264, 22125, 88, 391, 18986, 5197, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3902, "seek": 1686200, "start": 16878.0, "end": 16881.0, "text": " It should be at local host colon 8000.", "tokens": [51164, 467, 820, 312, 412, 2654, 3975, 8255, 1649, 1360, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3903, "seek": 1686200, "start": 16881.0, "end": 16885.0, "text": " Once you arrive on that page, click the sign in with GitHub button.", "tokens": [51314, 3443, 291, 8881, 322, 300, 3028, 11, 2052, 264, 1465, 294, 365, 23331, 2960, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3904, "seek": 1686200, "start": 16885.0, "end": 16887.0, "text": " You should be asked to authorize the application.", "tokens": [51514, 509, 820, 312, 2351, 281, 3793, 1125, 264, 3861, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3905, "seek": 1686200, "start": 16887.0, "end": 16889.0, "text": " Click authorize.", "tokens": [51614, 8230, 3793, 1125, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12590187788009644, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.2876451313495636}, {"id": 3906, "seek": 1688900, "start": 16889.0, "end": 16892.0, "text": " You'll then be redirected back to your Jupyter Hub instance.", "tokens": [50364, 509, 603, 550, 312, 29066, 292, 646, 281, 428, 22125, 88, 391, 18986, 5197, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3907, "seek": 1688900, "start": 16892.0, "end": 16897.0, "text": " You can click my server to access your server or admin to administrate Jupyter Hub.", "tokens": [50514, 509, 393, 2052, 452, 7154, 281, 2105, 428, 7154, 420, 24236, 281, 4968, 4404, 22125, 88, 391, 18986, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3908, "seek": 1688900, "start": 16897.0, "end": 16899.0, "text": " I'm going to click on my server.", "tokens": [50764, 286, 478, 516, 281, 2052, 322, 452, 7154, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3909, "seek": 1688900, "start": 16899.0, "end": 16904.0, "text": " Note that our custom image is still being loaded.", "tokens": [50864, 11633, 300, 527, 2375, 3256, 307, 920, 885, 13210, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3910, "seek": 1688900, "start": 16904.0, "end": 16909.0, "text": " In the previous videos, we were able to get Jupyter Hub working with GitHub OAuth", "tokens": [51114, 682, 264, 3894, 2145, 11, 321, 645, 1075, 281, 483, 22125, 88, 391, 18986, 1364, 365, 23331, 48424, 2910, 51364], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3911, "seek": 1688900, "start": 16909.0, "end": 16912.0, "text": " and a custom Docker image.", "tokens": [51364, 293, 257, 2375, 33772, 3256, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3912, "seek": 1688900, "start": 16912.0, "end": 16918.0, "text": " In this video, we'll look at how we can enable our users to share files across their different accounts", "tokens": [51514, 682, 341, 960, 11, 321, 603, 574, 412, 577, 321, 393, 9528, 527, 5022, 281, 2073, 7098, 2108, 641, 819, 9402, 51814], "temperature": 0.0, "avg_logprob": -0.0771716656892196, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.0066915531642735004}, {"id": 3913, "seek": 1691800, "start": 16918.0, "end": 16920.0, "text": " inside the Jupyter Hub instance.", "tokens": [50364, 1854, 264, 22125, 88, 391, 18986, 5197, 13, 50464], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3914, "seek": 1691800, "start": 16920.0, "end": 16925.0, "text": " To do so, we'll mount a shared directory on the host operating system.", "tokens": [50464, 1407, 360, 370, 11, 321, 603, 3746, 257, 5507, 21120, 322, 264, 3975, 7447, 1185, 13, 50714], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3915, "seek": 1691800, "start": 16925.0, "end": 16927.0, "text": " We'll do this two ways.", "tokens": [50714, 492, 603, 360, 341, 732, 2098, 13, 50814], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3916, "seek": 1691800, "start": 16927.0, "end": 16932.0, "text": " One, we'll mount it as read only for content that all users should be able to see,", "tokens": [50814, 1485, 11, 321, 603, 3746, 309, 382, 1401, 787, 337, 2701, 300, 439, 5022, 820, 312, 1075, 281, 536, 11, 51064], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3917, "seek": 1691800, "start": 16932.0, "end": 16934.0, "text": " but not necessarily edit.", "tokens": [51064, 457, 406, 4725, 8129, 13, 51164], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3918, "seek": 1691800, "start": 16934.0, "end": 16938.0, "text": " Two, we'll mount it as read write so users can have a shared directory", "tokens": [51164, 4453, 11, 321, 603, 3746, 309, 382, 1401, 2464, 370, 5022, 393, 362, 257, 5507, 21120, 51364], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3919, "seek": 1691800, "start": 16938.0, "end": 16941.0, "text": " from which they can save files and fetch files.", "tokens": [51364, 490, 597, 436, 393, 3155, 7098, 293, 23673, 7098, 13, 51514], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3920, "seek": 1691800, "start": 16941.0, "end": 16944.0, "text": " To get started, open up a Docker quick terminal.", "tokens": [51514, 1407, 483, 1409, 11, 1269, 493, 257, 33772, 1702, 14709, 13, 51664], "temperature": 0.0, "avg_logprob": -0.043562730153401695, "compression_ratio": 1.6694214876033058, "no_speech_prob": 0.009410201571881771}, {"id": 3921, "seek": 1694400, "start": 16944.0, "end": 16951.0, "text": " Once your Docker quick terminal launches, go ahead and make sure no Docker images are currently running.", "tokens": [50364, 3443, 428, 33772, 1702, 14709, 31841, 11, 352, 2286, 293, 652, 988, 572, 33772, 5267, 366, 4362, 2614, 13, 50714], "temperature": 0.0, "avg_logprob": -0.054923221629153016, "compression_ratio": 1.680672268907563, "no_speech_prob": 0.0008295401930809021}, {"id": 3922, "seek": 1694400, "start": 16951.0, "end": 16955.0, "text": " Inside my home directory, I'm going to create two shared folders.", "tokens": [50714, 15123, 452, 1280, 21120, 11, 286, 478, 516, 281, 1884, 732, 5507, 31082, 13, 50914], "temperature": 0.0, "avg_logprob": -0.054923221629153016, "compression_ratio": 1.680672268907563, "no_speech_prob": 0.0008295401930809021}, {"id": 3923, "seek": 1694400, "start": 16955.0, "end": 16960.0, "text": " One will be called shared underscore RW for shared read write,", "tokens": [50914, 1485, 486, 312, 1219, 5507, 37556, 42513, 337, 5507, 1401, 2464, 11, 51164], "temperature": 0.0, "avg_logprob": -0.054923221629153016, "compression_ratio": 1.680672268907563, "no_speech_prob": 0.0008295401930809021}, {"id": 3924, "seek": 1694400, "start": 16960.0, "end": 16964.0, "text": " and the other shared underscore R for read only shared.", "tokens": [51164, 293, 264, 661, 5507, 37556, 497, 337, 1401, 787, 5507, 13, 51364], "temperature": 0.0, "avg_logprob": -0.054923221629153016, "compression_ratio": 1.680672268907563, "no_speech_prob": 0.0008295401930809021}, {"id": 3925, "seek": 1694400, "start": 16964.0, "end": 16967.0, "text": " You can use any directory that's accessible on your file system.", "tokens": [51364, 509, 393, 764, 604, 21120, 300, 311, 9515, 322, 428, 3991, 1185, 13, 51514], "temperature": 0.0, "avg_logprob": -0.054923221629153016, "compression_ratio": 1.680672268907563, "no_speech_prob": 0.0008295401930809021}, {"id": 3926, "seek": 1694400, "start": 16967.0, "end": 16970.0, "text": " I'm using my home directory as a convenience.", "tokens": [51514, 286, 478, 1228, 452, 1280, 21120, 382, 257, 19283, 13, 51664], "temperature": 0.0, "avg_logprob": -0.054923221629153016, "compression_ratio": 1.680672268907563, "no_speech_prob": 0.0008295401930809021}, {"id": 3927, "seek": 1697000, "start": 16970.0, "end": 16974.0, "text": " Now, I'm going to copy two example notebooks into each of those folders.", "tokens": [50364, 823, 11, 286, 478, 516, 281, 5055, 732, 1365, 43782, 666, 1184, 295, 729, 31082, 13, 50564], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3928, "seek": 1697000, "start": 16974.0, "end": 16980.0, "text": " I'm going to CD into the shared read write folder and launch a normal Jupyter notebook server.", "tokens": [50564, 286, 478, 516, 281, 6743, 666, 264, 5507, 1401, 2464, 10820, 293, 4025, 257, 2710, 22125, 88, 391, 21060, 7154, 13, 50864], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3929, "seek": 1697000, "start": 16980.0, "end": 16985.0, "text": " When the notebook server launches, I'm going to go ahead and create a new Python notebook.", "tokens": [50864, 1133, 264, 21060, 7154, 31841, 11, 286, 478, 516, 281, 352, 2286, 293, 1884, 257, 777, 15329, 21060, 13, 51114], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3930, "seek": 1697000, "start": 16985.0, "end": 16988.0, "text": " First, I'm going to change the name of this notebook.", "tokens": [51114, 2386, 11, 286, 478, 516, 281, 1319, 264, 1315, 295, 341, 21060, 13, 51264], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3931, "seek": 1697000, "start": 16988.0, "end": 16991.0, "text": " I'll change it to test one.", "tokens": [51264, 286, 603, 1319, 309, 281, 1500, 472, 13, 51414], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3932, "seek": 1697000, "start": 16991.0, "end": 16993.0, "text": " Now, I'll give the notebook some content.", "tokens": [51414, 823, 11, 286, 603, 976, 264, 21060, 512, 2701, 13, 51514], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3933, "seek": 1697000, "start": 16993.0, "end": 16996.0, "text": " I'll make the first cell a markdown cell.", "tokens": [51514, 286, 603, 652, 264, 700, 2815, 257, 1491, 5093, 2815, 13, 51664], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3934, "seek": 1697000, "start": 16996.0, "end": 16999.0, "text": " In the second cell, I'll add some code.", "tokens": [51664, 682, 264, 1150, 2815, 11, 286, 603, 909, 512, 3089, 13, 51814], "temperature": 0.0, "avg_logprob": -0.056530903643510474, "compression_ratio": 1.9173553719008265, "no_speech_prob": 0.001700571971014142}, {"id": 3935, "seek": 1699900, "start": 16999.0, "end": 17001.0, "text": " Now, I'm going to save this notebook.", "tokens": [50364, 823, 11, 286, 478, 516, 281, 3155, 341, 21060, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3936, "seek": 1699900, "start": 17001.0, "end": 17004.0, "text": " Now, close the web browser and go back to the terminal.", "tokens": [50464, 823, 11, 1998, 264, 3670, 11185, 293, 352, 646, 281, 264, 14709, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3937, "seek": 1699900, "start": 17004.0, "end": 17008.0, "text": " In the terminal, I'll hit Ctrl C twice to close the server.", "tokens": [50614, 682, 264, 14709, 11, 286, 603, 2045, 35233, 383, 6091, 281, 1998, 264, 7154, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3938, "seek": 1699900, "start": 17008.0, "end": 17011.0, "text": " Now, I'll CD into the read only directory.", "tokens": [50814, 823, 11, 286, 603, 6743, 666, 264, 1401, 787, 21120, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3939, "seek": 1699900, "start": 17011.0, "end": 17016.0, "text": " I'll launch the notebook server here too.", "tokens": [50964, 286, 603, 4025, 264, 21060, 7154, 510, 886, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3940, "seek": 1699900, "start": 17016.0, "end": 17023.0, "text": " Once the notebook server launches, I'm going to create a new notebook.", "tokens": [51214, 3443, 264, 21060, 7154, 31841, 11, 286, 478, 516, 281, 1884, 257, 777, 21060, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3941, "seek": 1699900, "start": 17023.0, "end": 17026.0, "text": " I'll call this notebook test two.", "tokens": [51564, 286, 603, 818, 341, 21060, 1500, 732, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06662680930698041, "compression_ratio": 1.8342245989304813, "no_speech_prob": 0.00016864322242327034}, {"id": 3942, "seek": 1702600, "start": 17027.0, "end": 17032.0, "text": " I'll make the first cell a markdown cell.", "tokens": [50414, 286, 603, 652, 264, 700, 2815, 257, 1491, 5093, 2815, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08521770661877047, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.0009398692054674029}, {"id": 3943, "seek": 1702600, "start": 17032.0, "end": 17035.0, "text": " In the second cell, I'll add some code.", "tokens": [50664, 682, 264, 1150, 2815, 11, 286, 603, 909, 512, 3089, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08521770661877047, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.0009398692054674029}, {"id": 3944, "seek": 1702600, "start": 17035.0, "end": 17038.0, "text": " Now, I'll save the file and close the web browser.", "tokens": [50814, 823, 11, 286, 603, 3155, 264, 3991, 293, 1998, 264, 3670, 11185, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08521770661877047, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.0009398692054674029}, {"id": 3945, "seek": 1702600, "start": 17038.0, "end": 17043.0, "text": " Next, I'll close the Jupyter notebook server by hitting Ctrl C twice.", "tokens": [50964, 3087, 11, 286, 603, 1998, 264, 22125, 88, 391, 21060, 7154, 538, 8850, 35233, 383, 6091, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08521770661877047, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.0009398692054674029}, {"id": 3946, "seek": 1702600, "start": 17043.0, "end": 17047.0, "text": " Now, CD into the Docker spawner directory.", "tokens": [51214, 823, 11, 6743, 666, 264, 33772, 17088, 260, 21120, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08521770661877047, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.0009398692054674029}, {"id": 3947, "seek": 1702600, "start": 17047.0, "end": 17053.0, "text": " Inside there, I'll CD into the example's OAuth directory and open Adam.", "tokens": [51414, 15123, 456, 11, 286, 603, 6743, 666, 264, 1365, 311, 48424, 2910, 21120, 293, 1269, 7938, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08521770661877047, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.0009398692054674029}, {"id": 3948, "seek": 1705300, "start": 17053.0, "end": 17058.0, "text": " Once Adam opens, I'll make sure my Jupyter Hub underscore config file is opened.", "tokens": [50364, 3443, 7938, 9870, 11, 286, 603, 652, 988, 452, 22125, 88, 391, 18986, 37556, 6662, 3991, 307, 5625, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09727571343862883, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.001956789055839181}, {"id": 3949, "seek": 1705300, "start": 17058.0, "end": 17067.0, "text": " Then, below the admin users line, I'll add c.dockersponer.volumes equals a mapping of volumes.", "tokens": [50614, 1396, 11, 2507, 264, 24236, 5022, 1622, 11, 286, 603, 909, 269, 13, 48341, 433, 79, 32949, 13, 9646, 10018, 6915, 257, 18350, 295, 22219, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09727571343862883, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.001956789055839181}, {"id": 3950, "seek": 1705300, "start": 17067.0, "end": 17072.0, "text": " The volume mapping is path on the local machine as the key", "tokens": [51064, 440, 5523, 18350, 307, 3100, 322, 264, 2654, 3479, 382, 264, 2141, 51314], "temperature": 0.0, "avg_logprob": -0.09727571343862883, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.001956789055839181}, {"id": 3951, "seek": 1705300, "start": 17072.0, "end": 17077.0, "text": " and as the value path that it should be mounted inside the Docker image.", "tokens": [51314, 293, 382, 264, 2158, 3100, 300, 309, 820, 312, 19138, 1854, 264, 33772, 3256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09727571343862883, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.001956789055839181}, {"id": 3952, "seek": 1705300, "start": 17077.0, "end": 17080.0, "text": " I'll mount the read-write directory.", "tokens": [51564, 286, 603, 3746, 264, 1401, 12, 21561, 21120, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09727571343862883, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.001956789055839181}, {"id": 3953, "seek": 1708000, "start": 17080.0, "end": 17087.0, "text": " I'll have it mounted to home jovian for slash work for slash shared.", "tokens": [50364, 286, 603, 362, 309, 19138, 281, 1280, 1488, 85, 952, 337, 17330, 589, 337, 17330, 5507, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06587828330273898, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.0004728257772512734}, {"id": 3954, "seek": 1708000, "start": 17087.0, "end": 17094.0, "text": " That's because home jovian work is the directory that's loaded by default inside the Docker image.", "tokens": [50714, 663, 311, 570, 1280, 1488, 85, 952, 589, 307, 264, 21120, 300, 311, 13210, 538, 7576, 1854, 264, 33772, 3256, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06587828330273898, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.0004728257772512734}, {"id": 3955, "seek": 1708000, "start": 17094.0, "end": 17098.0, "text": " To mount read-only directories, the syntax is almost the same.", "tokens": [51064, 1407, 3746, 1401, 12, 25202, 5391, 530, 11, 264, 28431, 307, 1920, 264, 912, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06587828330273898, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.0004728257772512734}, {"id": 3956, "seek": 1708000, "start": 17098.0, "end": 17102.0, "text": " Go ahead and copy that line and paste a copy of it below.", "tokens": [51264, 1037, 2286, 293, 5055, 300, 1622, 293, 9163, 257, 5055, 295, 309, 2507, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06587828330273898, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.0004728257772512734}, {"id": 3957, "seek": 1708000, "start": 17102.0, "end": 17105.0, "text": " On this line, we'll change the name of the path that's mounted.", "tokens": [51464, 1282, 341, 1622, 11, 321, 603, 1319, 264, 1315, 295, 264, 3100, 300, 311, 19138, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06587828330273898, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.0004728257772512734}, {"id": 3958, "seek": 1708000, "start": 17105.0, "end": 17107.0, "text": " Let's change it to read-only.", "tokens": [51614, 961, 311, 1319, 309, 281, 1401, 12, 25202, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06587828330273898, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.0004728257772512734}, {"id": 3959, "seek": 1710700, "start": 17107.0, "end": 17112.0, "text": " Likewise, we'll change the path on the parent system to the read-only directory.", "tokens": [50364, 30269, 11, 321, 603, 1319, 264, 3100, 322, 264, 2596, 1185, 281, 264, 1401, 12, 25202, 21120, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09076856858659499, "compression_ratio": 1.5843621399176955, "no_speech_prob": 0.0010004339274019003}, {"id": 3960, "seek": 1710700, "start": 17112.0, "end": 17121.0, "text": " The important part is that the key is not docersponer.volumes, it's actually dot read underscore only underscore volumes.", "tokens": [50614, 440, 1021, 644, 307, 300, 264, 2141, 307, 406, 3211, 433, 79, 32949, 13, 9646, 10018, 11, 309, 311, 767, 5893, 1401, 37556, 787, 37556, 22219, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09076856858659499, "compression_ratio": 1.5843621399176955, "no_speech_prob": 0.0010004339274019003}, {"id": 3961, "seek": 1710700, "start": 17121.0, "end": 17124.0, "text": " Once you make that change, go ahead and save the file.", "tokens": [51064, 3443, 291, 652, 300, 1319, 11, 352, 2286, 293, 3155, 264, 3991, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09076856858659499, "compression_ratio": 1.5843621399176955, "no_speech_prob": 0.0010004339274019003}, {"id": 3962, "seek": 1710700, "start": 17124.0, "end": 17127.0, "text": " Go back to the terminal.", "tokens": [51214, 1037, 646, 281, 264, 14709, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09076856858659499, "compression_ratio": 1.5843621399176955, "no_speech_prob": 0.0010004339274019003}, {"id": 3963, "seek": 1710700, "start": 17127.0, "end": 17130.0, "text": " Now, launch the server like you did before.", "tokens": [51364, 823, 11, 4025, 264, 7154, 411, 291, 630, 949, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09076856858659499, "compression_ratio": 1.5843621399176955, "no_speech_prob": 0.0010004339274019003}, {"id": 3964, "seek": 1710700, "start": 17130.0, "end": 17134.0, "text": " Don't forget to set the Docker spawner container IP trait.", "tokens": [51514, 1468, 380, 2870, 281, 992, 264, 33772, 17088, 260, 10129, 8671, 22538, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09076856858659499, "compression_ratio": 1.5843621399176955, "no_speech_prob": 0.0010004339274019003}, {"id": 3965, "seek": 1713400, "start": 17134.0, "end": 17140.0, "text": " The IP address is the IP listed by the Docker quick terminal in green when you launched it.", "tokens": [50364, 440, 8671, 2985, 307, 264, 8671, 10052, 538, 264, 33772, 1702, 14709, 294, 3092, 562, 291, 8730, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3966, "seek": 1713400, "start": 17140.0, "end": 17143.0, "text": " Once your server is launched, go back to your web browser.", "tokens": [50664, 3443, 428, 7154, 307, 8730, 11, 352, 646, 281, 428, 3670, 11185, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3967, "seek": 1713400, "start": 17143.0, "end": 17147.0, "text": " In your web browser, navigate to your Jupyter Hub instance.", "tokens": [50814, 682, 428, 3670, 11185, 11, 12350, 281, 428, 22125, 88, 391, 18986, 5197, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3968, "seek": 1713400, "start": 17147.0, "end": 17152.0, "text": " You may still be logged on to your other session from the earlier videos. That's okay.", "tokens": [51014, 509, 815, 920, 312, 27231, 322, 281, 428, 661, 5481, 490, 264, 3071, 2145, 13, 663, 311, 1392, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3969, "seek": 1713400, "start": 17152.0, "end": 17154.0, "text": " Go ahead and click on my server.", "tokens": [51264, 1037, 2286, 293, 2052, 322, 452, 7154, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3970, "seek": 1713400, "start": 17154.0, "end": 17160.0, "text": " When my server loads, you should see two folders, read-only and shared.", "tokens": [51364, 1133, 452, 7154, 12668, 11, 291, 820, 536, 732, 31082, 11, 1401, 12, 25202, 293, 5507, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3971, "seek": 1713400, "start": 17160.0, "end": 17162.0, "text": " Go ahead and open shared.", "tokens": [51664, 1037, 2286, 293, 1269, 5507, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07429198707853045, "compression_ratio": 1.6653696498054475, "no_speech_prob": 0.0017544416477903724}, {"id": 3972, "seek": 1716200, "start": 17162.0, "end": 17165.0, "text": " Inside shared, you should see the test one notebook.", "tokens": [50364, 15123, 5507, 11, 291, 820, 536, 264, 1500, 472, 21060, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3973, "seek": 1716200, "start": 17165.0, "end": 17167.0, "text": " Go ahead and open that.", "tokens": [50514, 1037, 2286, 293, 1269, 300, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3974, "seek": 1716200, "start": 17167.0, "end": 17169.0, "text": " Make a change to this notebook.", "tokens": [50614, 4387, 257, 1319, 281, 341, 21060, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3975, "seek": 1716200, "start": 17169.0, "end": 17173.0, "text": " It doesn't matter what change, just a change that you can see.", "tokens": [50714, 467, 1177, 380, 1871, 437, 1319, 11, 445, 257, 1319, 300, 291, 393, 536, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3976, "seek": 1716200, "start": 17173.0, "end": 17175.0, "text": " Then go ahead and try saving the notebook.", "tokens": [50914, 1396, 352, 2286, 293, 853, 6816, 264, 21060, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3977, "seek": 1716200, "start": 17175.0, "end": 17180.0, "text": " When you save, you should have seen the checkpoint flash up to the left of the kernel name.", "tokens": [51014, 1133, 291, 3155, 11, 291, 820, 362, 1612, 264, 42269, 7319, 493, 281, 264, 1411, 295, 264, 28256, 1315, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3978, "seek": 1716200, "start": 17180.0, "end": 17182.0, "text": " Go ahead and close the notebook.", "tokens": [51264, 1037, 2286, 293, 1998, 264, 21060, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3979, "seek": 1716200, "start": 17182.0, "end": 17184.0, "text": " And try reopening it.", "tokens": [51364, 400, 853, 39542, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3980, "seek": 1716200, "start": 17184.0, "end": 17186.0, "text": " Looks like that worked.", "tokens": [51464, 10027, 411, 300, 2732, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3981, "seek": 1716200, "start": 17186.0, "end": 17188.0, "text": " Go ahead and close the notebook.", "tokens": [51564, 1037, 2286, 293, 1998, 264, 21060, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3982, "seek": 1716200, "start": 17188.0, "end": 17190.0, "text": " Go back to your home directory.", "tokens": [51664, 1037, 646, 281, 428, 1280, 21120, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05167776588501969, "compression_ratio": 1.8828451882845187, "no_speech_prob": 0.0007793289260007441}, {"id": 3983, "seek": 1719000, "start": 17190.0, "end": 17193.0, "text": " Then go inside the read-only directory.", "tokens": [50364, 1396, 352, 1854, 264, 1401, 12, 25202, 21120, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3984, "seek": 1719000, "start": 17193.0, "end": 17196.0, "text": " Open up the test to that notebook.", "tokens": [50514, 7238, 493, 264, 1500, 281, 300, 21060, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3985, "seek": 1719000, "start": 17196.0, "end": 17203.0, "text": " When you open this notebook, you should see a notification that flashes quickly to the left of the kernel that says auto-save disabled.", "tokens": [50664, 1133, 291, 1269, 341, 21060, 11, 291, 820, 536, 257, 11554, 300, 39665, 2661, 281, 264, 1411, 295, 264, 28256, 300, 1619, 8399, 12, 82, 946, 15191, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3986, "seek": 1719000, "start": 17203.0, "end": 17210.0, "text": " You should also see an icon of a floppy with a red circle above it indicating that saving is disabled.", "tokens": [51014, 509, 820, 611, 536, 364, 6528, 295, 257, 25343, 8200, 365, 257, 2182, 6329, 3673, 309, 25604, 300, 6816, 307, 15191, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3987, "seek": 1719000, "start": 17210.0, "end": 17212.0, "text": " Try making changes to this file.", "tokens": [51364, 6526, 1455, 2962, 281, 341, 3991, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3988, "seek": 1719000, "start": 17212.0, "end": 17214.0, "text": " Any changes, it doesn't matter.", "tokens": [51464, 2639, 2962, 11, 309, 1177, 380, 1871, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3989, "seek": 1719000, "start": 17214.0, "end": 17216.0, "text": " I'm going to remove this read-only.", "tokens": [51564, 286, 478, 516, 281, 4159, 341, 1401, 12, 25202, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3990, "seek": 1719000, "start": 17216.0, "end": 17218.0, "text": " Now I'm going to try saving.", "tokens": [51664, 823, 286, 478, 516, 281, 853, 6816, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06880332655825858, "compression_ratio": 1.7104247104247103, "no_speech_prob": 0.0004728342464659363}, {"id": 3991, "seek": 1721800, "start": 17218.0, "end": 17223.0, "text": " When I save, I should see another notification in yellow that says the notebook is read-only.", "tokens": [50364, 1133, 286, 3155, 11, 286, 820, 536, 1071, 11554, 294, 5566, 300, 1619, 264, 21060, 307, 1401, 12, 25202, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07992440721263057, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.00857613980770111}, {"id": 3992, "seek": 1721800, "start": 17223.0, "end": 17226.0, "text": " Go ahead and close the notebook.", "tokens": [50614, 1037, 2286, 293, 1998, 264, 21060, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07992440721263057, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.00857613980770111}, {"id": 3993, "seek": 1721800, "start": 17226.0, "end": 17228.0, "text": " Reopen the notebook.", "tokens": [50764, 1300, 15752, 264, 21060, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07992440721263057, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.00857613980770111}, {"id": 3994, "seek": 1721800, "start": 17228.0, "end": 17231.0, "text": " And you should notice your changes weren't saved.", "tokens": [50864, 400, 291, 820, 3449, 428, 2962, 4999, 380, 6624, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07992440721263057, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.00857613980770111}, {"id": 3995, "seek": 1721800, "start": 17231.0, "end": 17236.0, "text": " This means that the read-only is working correctly.", "tokens": [51014, 639, 1355, 300, 264, 1401, 12, 25202, 307, 1364, 8944, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07992440721263057, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.00857613980770111}, {"id": 3996, "seek": 1721800, "start": 17236.0, "end": 17243.0, "text": " In this video, we'll talk about how you can increase the performance of your Jupyter Hub deployment using EngineX.", "tokens": [51264, 682, 341, 960, 11, 321, 603, 751, 466, 577, 291, 393, 3488, 264, 3389, 295, 428, 22125, 88, 391, 18986, 19317, 1228, 7659, 55, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07992440721263057, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.00857613980770111}, {"id": 3997, "seek": 1724300, "start": 17244.0, "end": 17249.0, "text": " EngineX will be used to host the static files of the Jupyter notebook.", "tokens": [50414, 7659, 55, 486, 312, 1143, 281, 3975, 264, 13437, 7098, 295, 264, 22125, 88, 391, 21060, 13, 50664], "temperature": 0.0, "avg_logprob": -0.045034594969315965, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.3274202048778534}, {"id": 3998, "seek": 1724300, "start": 17249.0, "end": 17252.0, "text": " The Jupyter notebook uses Tornado to host its web content.", "tokens": [50664, 440, 22125, 88, 391, 21060, 4960, 314, 1865, 1573, 281, 3975, 1080, 3670, 2701, 13, 50814], "temperature": 0.0, "avg_logprob": -0.045034594969315965, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.3274202048778534}, {"id": 3999, "seek": 1724300, "start": 17252.0, "end": 17256.0, "text": " Tornado is great for templating and hosting dynamic content.", "tokens": [50814, 314, 1865, 1573, 307, 869, 337, 9100, 990, 293, 16058, 8546, 2701, 13, 51014], "temperature": 0.0, "avg_logprob": -0.045034594969315965, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.3274202048778534}, {"id": 4000, "seek": 1724300, "start": 17256.0, "end": 17262.0, "text": " However, it's slower than things like EngineX or Apache to host static files.", "tokens": [51014, 2908, 11, 309, 311, 14009, 813, 721, 411, 7659, 55, 420, 46597, 281, 3975, 13437, 7098, 13, 51314], "temperature": 0.0, "avg_logprob": -0.045034594969315965, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.3274202048778534}, {"id": 4001, "seek": 1724300, "start": 17262.0, "end": 17269.0, "text": " The methods described in this video can also be extended to redirect and host the static content on CDNs.", "tokens": [51314, 440, 7150, 7619, 294, 341, 960, 393, 611, 312, 10913, 281, 29066, 293, 3975, 264, 13437, 2701, 322, 6743, 45, 82, 13, 51664], "temperature": 0.0, "avg_logprob": -0.045034594969315965, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.3274202048778534}, {"id": 4002, "seek": 1724300, "start": 17269.0, "end": 17272.0, "text": " First, we're going to launch Jupyter Hub.", "tokens": [51664, 2386, 11, 321, 434, 516, 281, 4025, 22125, 88, 391, 18986, 13, 51814], "temperature": 0.0, "avg_logprob": -0.045034594969315965, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.3274202048778534}, {"id": 4003, "seek": 1727200, "start": 17272.0, "end": 17275.0, "text": " Go ahead and open up a Docker quick terminal.", "tokens": [50364, 1037, 2286, 293, 1269, 493, 257, 33772, 1702, 14709, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07250209521221858, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.001225316897034645}, {"id": 4004, "seek": 1727200, "start": 17275.0, "end": 17277.0, "text": " Pay attention to the IP in green.", "tokens": [50514, 11431, 3202, 281, 264, 8671, 294, 3092, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07250209521221858, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.001225316897034645}, {"id": 4005, "seek": 1727200, "start": 17277.0, "end": 17281.0, "text": " Then make sure that all Docker images are closed.", "tokens": [50614, 1396, 652, 988, 300, 439, 33772, 5267, 366, 5395, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07250209521221858, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.001225316897034645}, {"id": 4006, "seek": 1727200, "start": 17281.0, "end": 17288.0, "text": " Next, navigate into the OAuth example folder inside the Docker spawner directory.", "tokens": [50814, 3087, 11, 12350, 666, 264, 48424, 2910, 1365, 10820, 1854, 264, 33772, 17088, 260, 21120, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07250209521221858, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.001225316897034645}, {"id": 4007, "seek": 1727200, "start": 17288.0, "end": 17295.0, "text": " Launch Jupyter Hub by running the run.sh script.", "tokens": [51164, 28119, 22125, 88, 391, 18986, 538, 2614, 264, 1190, 13, 2716, 5755, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07250209521221858, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.001225316897034645}, {"id": 4008, "seek": 1727200, "start": 17295.0, "end": 17301.0, "text": " Once Jupyter Hub launches, open up your web browser and verify that Jupyter Hub is running.", "tokens": [51514, 3443, 22125, 88, 391, 18986, 31841, 11, 1269, 493, 428, 3670, 11185, 293, 16888, 300, 22125, 88, 391, 18986, 307, 2614, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07250209521221858, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.001225316897034645}, {"id": 4009, "seek": 1730100, "start": 17301.0, "end": 17305.0, "text": " This should be available at localhost colon 8000.", "tokens": [50364, 639, 820, 312, 2435, 412, 2654, 6037, 8255, 1649, 1360, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4010, "seek": 1730100, "start": 17305.0, "end": 17307.0, "text": " Now, go back to the terminal.", "tokens": [50564, 823, 11, 352, 646, 281, 264, 14709, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4011, "seek": 1730100, "start": 17307.0, "end": 17311.0, "text": " Open up a new tab by hitting command T.", "tokens": [50664, 7238, 493, 257, 777, 4421, 538, 8850, 5622, 314, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4012, "seek": 1730100, "start": 17311.0, "end": 17315.0, "text": " If you're on a machine that doesn't support tabs in your terminal, open up a new terminal.", "tokens": [50864, 759, 291, 434, 322, 257, 3479, 300, 1177, 380, 1406, 20743, 294, 428, 14709, 11, 1269, 493, 257, 777, 14709, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4013, "seek": 1730100, "start": 17315.0, "end": 17318.0, "text": " Now, we'll install EngineX.", "tokens": [51064, 823, 11, 321, 603, 3625, 7659, 55, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4014, "seek": 1730100, "start": 17318.0, "end": 17321.0, "text": " On OS X, you can do this using brew.", "tokens": [51214, 1282, 12731, 1783, 11, 291, 393, 360, 341, 1228, 34619, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4015, "seek": 1730100, "start": 17321.0, "end": 17326.0, "text": " On Linux operating systems, you'll want to use the package manager of that system.", "tokens": [51364, 1282, 18734, 7447, 3652, 11, 291, 603, 528, 281, 764, 264, 7372, 6598, 295, 300, 1185, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4016, "seek": 1730100, "start": 17326.0, "end": 17330.0, "text": " Typically, this is apt-get or yum.", "tokens": [51614, 23129, 11, 341, 307, 29427, 12, 847, 420, 26420, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08281180733128597, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.004197974223643541}, {"id": 4017, "seek": 1733000, "start": 17330.0, "end": 17333.0, "text": " If you're on OS X, go to your web browser.", "tokens": [50364, 759, 291, 434, 322, 12731, 1783, 11, 352, 281, 428, 3670, 11185, 13, 50514], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4018, "seek": 1733000, "start": 17333.0, "end": 17336.0, "text": " Go to brew.sh.", "tokens": [50514, 1037, 281, 34619, 13, 2716, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4019, "seek": 1733000, "start": 17336.0, "end": 17338.0, "text": " This is the home page for brew.", "tokens": [50664, 639, 307, 264, 1280, 3028, 337, 34619, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4020, "seek": 1733000, "start": 17338.0, "end": 17345.0, "text": " If you don't have brew installed already, copy the line under the install home brew section inside the text box.", "tokens": [50764, 759, 291, 500, 380, 362, 34619, 8899, 1217, 11, 5055, 264, 1622, 833, 264, 3625, 1280, 34619, 3541, 1854, 264, 2487, 2424, 13, 51114], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4021, "seek": 1733000, "start": 17345.0, "end": 17349.0, "text": " Paste that line in your terminal and execute it to install home brew.", "tokens": [51114, 43827, 300, 1622, 294, 428, 14709, 293, 14483, 309, 281, 3625, 1280, 34619, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4022, "seek": 1733000, "start": 17349.0, "end": 17354.0, "text": " I've already installed home brew on my machine, so I'm not going to demonstrate this for you.", "tokens": [51314, 286, 600, 1217, 8899, 1280, 34619, 322, 452, 3479, 11, 370, 286, 478, 406, 516, 281, 11698, 341, 337, 291, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4023, "seek": 1733000, "start": 17354.0, "end": 17356.0, "text": " Go back to your terminal.", "tokens": [51564, 1037, 646, 281, 428, 14709, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4024, "seek": 1733000, "start": 17356.0, "end": 17359.0, "text": " Now, make sure that brew is up to date.", "tokens": [51664, 823, 11, 652, 988, 300, 34619, 307, 493, 281, 4002, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04547359148661296, "compression_ratio": 1.728, "no_speech_prob": 0.0032725189812481403}, {"id": 4025, "seek": 1735900, "start": 17359.0, "end": 17362.0, "text": " To do so, you're going to run brew update.", "tokens": [50364, 1407, 360, 370, 11, 291, 434, 516, 281, 1190, 34619, 5623, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4026, "seek": 1735900, "start": 17362.0, "end": 17365.0, "text": " Now, we'll use brew to install EngineX.", "tokens": [50514, 823, 11, 321, 603, 764, 34619, 281, 3625, 7659, 55, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4027, "seek": 1735900, "start": 17365.0, "end": 17370.0, "text": " Once brew is finished installing EngineX, run EngineX.", "tokens": [50664, 3443, 34619, 307, 4335, 20762, 7659, 55, 11, 1190, 7659, 55, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4028, "seek": 1735900, "start": 17370.0, "end": 17372.0, "text": " Now, go back to your web browser.", "tokens": [50914, 823, 11, 352, 646, 281, 428, 3670, 11185, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4029, "seek": 1735900, "start": 17372.0, "end": 17378.0, "text": " Access localhost 8080 to see if EngineX is running.", "tokens": [51014, 17166, 2654, 6037, 4688, 4702, 281, 536, 498, 7659, 55, 307, 2614, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4030, "seek": 1735900, "start": 17378.0, "end": 17382.0, "text": " If EngineX is running, you should see a welcome to EngineX page.", "tokens": [51314, 759, 7659, 55, 307, 2614, 11, 291, 820, 536, 257, 2928, 281, 7659, 55, 3028, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4031, "seek": 1735900, "start": 17382.0, "end": 17384.0, "text": " Now, go back to your terminal.", "tokens": [51514, 823, 11, 352, 646, 281, 428, 14709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05298028532991704, "compression_ratio": 1.7150537634408602, "no_speech_prob": 0.000954685325268656}, {"id": 4032, "seek": 1738400, "start": 17384.0, "end": 17391.0, "text": " Run EngineX-S to stop the EngineX service.", "tokens": [50364, 8950, 7659, 55, 12, 50, 281, 1590, 264, 7659, 55, 2643, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12378227710723877, "compression_ratio": 1.427027027027027, "no_speech_prob": 0.037879373878240585}, {"id": 4033, "seek": 1738400, "start": 17391.0, "end": 17393.0, "text": " Now, go back to your web browser.", "tokens": [50714, 823, 11, 352, 646, 281, 428, 3670, 11185, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12378227710723877, "compression_ratio": 1.427027027027027, "no_speech_prob": 0.037879373878240585}, {"id": 4034, "seek": 1738400, "start": 17393.0, "end": 17396.0, "text": " Go to github.com.", "tokens": [50814, 1037, 281, 290, 355, 836, 13, 1112, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12378227710723877, "compression_ratio": 1.427027027027027, "no_speech_prob": 0.037879373878240585}, {"id": 4035, "seek": 1738400, "start": 17396.0, "end": 17403.0, "text": " You should see the Jupyter Hub application that you registered earlier.", "tokens": [50964, 509, 820, 536, 264, 22125, 88, 391, 18986, 3861, 300, 291, 13968, 3071, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12378227710723877, "compression_ratio": 1.427027027027027, "no_speech_prob": 0.037879373878240585}, {"id": 4036, "seek": 1738400, "start": 17403.0, "end": 17405.0, "text": " Click on that.", "tokens": [51314, 8230, 322, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12378227710723877, "compression_ratio": 1.427027027027027, "no_speech_prob": 0.037879373878240585}, {"id": 4037, "seek": 1738400, "start": 17405.0, "end": 17413.0, "text": " Now, change the port on the home page and the authentication callback URL to 8080.", "tokens": [51414, 823, 11, 1319, 264, 2436, 322, 264, 1280, 3028, 293, 264, 26643, 818, 3207, 12905, 281, 4688, 4702, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12378227710723877, "compression_ratio": 1.427027027027027, "no_speech_prob": 0.037879373878240585}, {"id": 4038, "seek": 1741300, "start": 17413.0, "end": 17417.0, "text": " Go back to your terminal.", "tokens": [50364, 1037, 646, 281, 428, 14709, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07684357269950536, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.0005883644917048514}, {"id": 4039, "seek": 1741300, "start": 17417.0, "end": 17423.0, "text": " Now, change the EngineX configuration file so that it proxies all requests to Jupyter Hub.", "tokens": [50564, 823, 11, 1319, 264, 7659, 55, 11694, 3991, 370, 300, 309, 447, 87, 530, 439, 12475, 281, 22125, 88, 391, 18986, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07684357269950536, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.0005883644917048514}, {"id": 4040, "seek": 1741300, "start": 17423.0, "end": 17427.0, "text": " We'll also proxy the web socket connections to Jupyter Hub.", "tokens": [50864, 492, 603, 611, 29690, 264, 3670, 19741, 9271, 281, 22125, 88, 391, 18986, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07684357269950536, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.0005883644917048514}, {"id": 4041, "seek": 1741300, "start": 17427.0, "end": 17433.0, "text": " However, we'll intercept requests to static assets and host those directly using EngineX.", "tokens": [51064, 2908, 11, 321, 603, 24700, 12475, 281, 13437, 9769, 293, 3975, 729, 3838, 1228, 7659, 55, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07684357269950536, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.0005883644917048514}, {"id": 4042, "seek": 1743300, "start": 17433.0, "end": 17439.0, "text": " To edit the EngineX configuration file on OS X, run atom or open up", "tokens": [50364, 1407, 8129, 264, 7659, 55, 11694, 3991, 322, 12731, 1783, 11, 1190, 12018, 420, 1269, 493, 50664], "temperature": 0.0, "avg_logprob": -0.11703178929347618, "compression_ratio": 1.918552036199095, "no_speech_prob": 0.745535671710968}, {"id": 4043, "seek": 1743300, "start": 17439.0, "end": 17447.0, "text": " forward slash usr forward slash local forward slash Etsy forward slash EngineX forward slash EngineX.conf.", "tokens": [50664, 2128, 17330, 505, 81, 2128, 17330, 2654, 2128, 17330, 47170, 88, 2128, 17330, 7659, 55, 2128, 17330, 7659, 55, 13, 24697, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11703178929347618, "compression_ratio": 1.918552036199095, "no_speech_prob": 0.745535671710968}, {"id": 4044, "seek": 1743300, "start": 17447.0, "end": 17450.0, "text": " This is the path to the configuration file for EngineX.", "tokens": [51064, 639, 307, 264, 3100, 281, 264, 11694, 3991, 337, 7659, 55, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11703178929347618, "compression_ratio": 1.918552036199095, "no_speech_prob": 0.745535671710968}, {"id": 4045, "seek": 1743300, "start": 17450.0, "end": 17455.0, "text": " If you're running EngineX on a machine other than OS X, this path may be different.", "tokens": [51214, 759, 291, 434, 2614, 7659, 55, 322, 257, 3479, 661, 813, 12731, 1783, 11, 341, 3100, 815, 312, 819, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11703178929347618, "compression_ratio": 1.918552036199095, "no_speech_prob": 0.745535671710968}, {"id": 4046, "seek": 1743300, "start": 17455.0, "end": 17462.0, "text": " You'll have to refer to your installation method to figure out where the configuration file lives by default.", "tokens": [51464, 509, 603, 362, 281, 2864, 281, 428, 13260, 3170, 281, 2573, 484, 689, 264, 11694, 3991, 2909, 538, 7576, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11703178929347618, "compression_ratio": 1.918552036199095, "no_speech_prob": 0.745535671710968}, {"id": 4047, "seek": 1746200, "start": 17462.0, "end": 17466.0, "text": " I'm going to open this file in atom.", "tokens": [50364, 286, 478, 516, 281, 1269, 341, 3991, 294, 12018, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10373677459417605, "compression_ratio": 1.7577092511013215, "no_speech_prob": 0.007009989582002163}, {"id": 4048, "seek": 1746200, "start": 17466.0, "end": 17470.0, "text": " The first thing we'll do is trim a lot of the comments and access lines.", "tokens": [50564, 440, 700, 551, 321, 603, 360, 307, 10445, 257, 688, 295, 264, 3053, 293, 2105, 3876, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10373677459417605, "compression_ratio": 1.7577092511013215, "no_speech_prob": 0.007009989582002163}, {"id": 4049, "seek": 1746200, "start": 17470.0, "end": 17476.0, "text": " This will allow us to focus better on what the contents of the configuration file should be.", "tokens": [50764, 639, 486, 2089, 505, 281, 1879, 1101, 322, 437, 264, 15768, 295, 264, 11694, 3991, 820, 312, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10373677459417605, "compression_ratio": 1.7577092511013215, "no_speech_prob": 0.007009989582002163}, {"id": 4050, "seek": 1746200, "start": 17476.0, "end": 17479.0, "text": " I'm going to go ahead and remove this userNobody comment.", "tokens": [51064, 286, 478, 516, 281, 352, 2286, 293, 4159, 341, 4195, 45, 996, 843, 2871, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10373677459417605, "compression_ratio": 1.7577092511013215, "no_speech_prob": 0.007009989582002163}, {"id": 4051, "seek": 1746200, "start": 17479.0, "end": 17483.0, "text": " And also the log comments and process ID comment below.", "tokens": [51214, 400, 611, 264, 3565, 3053, 293, 1399, 7348, 2871, 2507, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10373677459417605, "compression_ratio": 1.7577092511013215, "no_speech_prob": 0.007009989582002163}, {"id": 4052, "seek": 1746200, "start": 17483.0, "end": 17489.0, "text": " I'll leave the events block and remove the log format comment, access log comment,", "tokens": [51414, 286, 603, 1856, 264, 3931, 3461, 293, 4159, 264, 3565, 7877, 2871, 11, 2105, 3565, 2871, 11, 51714], "temperature": 0.0, "avg_logprob": -0.10373677459417605, "compression_ratio": 1.7577092511013215, "no_speech_prob": 0.007009989582002163}, {"id": 4053, "seek": 1748900, "start": 17489.0, "end": 17497.0, "text": " send file, TCP push, keep a live time out, gzip, all the way down to the server block.", "tokens": [50364, 2845, 3991, 11, 48965, 2944, 11, 1066, 257, 1621, 565, 484, 11, 290, 27268, 11, 439, 264, 636, 760, 281, 264, 7154, 3461, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12387405742298473, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.005384325049817562}, {"id": 4054, "seek": 1748900, "start": 17497.0, "end": 17504.0, "text": " Inside the server block, I'll leave the listen to port 8080 and server name local host lines.", "tokens": [50764, 15123, 264, 7154, 3461, 11, 286, 603, 1856, 264, 2140, 281, 2436, 4688, 4702, 293, 7154, 1315, 2654, 3975, 3876, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12387405742298473, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.005384325049817562}, {"id": 4055, "seek": 1748900, "start": 17504.0, "end": 17508.0, "text": " I'll remove the lines down to the location forward slash.", "tokens": [51114, 286, 603, 4159, 264, 3876, 760, 281, 264, 4914, 2128, 17330, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12387405742298473, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.005384325049817562}, {"id": 4056, "seek": 1748900, "start": 17508.0, "end": 17515.0, "text": " Everything from here on out, I'll remove.", "tokens": [51314, 5471, 490, 510, 322, 484, 11, 286, 603, 4159, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12387405742298473, "compression_ratio": 1.5730337078651686, "no_speech_prob": 0.005384325049817562}, {"id": 4057, "seek": 1751500, "start": 17515.0, "end": 17520.0, "text": " Now we'll configure all requests on root to forward to Jupyter Hub.", "tokens": [50364, 823, 321, 603, 22162, 439, 12475, 322, 5593, 281, 2128, 281, 22125, 88, 391, 18986, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1005301560674395, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.05105890333652496}, {"id": 4058, "seek": 1751500, "start": 17520.0, "end": 17524.0, "text": " To do so, remove the lines inside the root block.", "tokens": [50614, 1407, 360, 370, 11, 4159, 264, 3876, 1854, 264, 5593, 3461, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1005301560674395, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.05105890333652496}, {"id": 4059, "seek": 1751500, "start": 17524.0, "end": 17532.0, "text": " The first line you'll need is proxy underscore pass space, the address to Jupyter Hub.", "tokens": [50814, 440, 700, 1622, 291, 603, 643, 307, 29690, 37556, 1320, 1901, 11, 264, 2985, 281, 22125, 88, 391, 18986, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1005301560674395, "compression_ratio": 1.4166666666666667, "no_speech_prob": 0.05105890333652496}, {"id": 4060, "seek": 1753200, "start": 17532.0, "end": 17546.0, "text": " Next, proxy underscore set underscore header, capital X dash capital R real dash all caps IP space dollar remote underscore add semicolon.", "tokens": [50364, 3087, 11, 29690, 37556, 992, 37556, 23117, 11, 4238, 1783, 8240, 4238, 497, 957, 8240, 439, 13855, 8671, 1901, 7241, 8607, 37556, 909, 27515, 38780, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16441933314005533, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.29725340008735657}, {"id": 4061, "seek": 1753200, "start": 17546.0, "end": 17556.0, "text": " Next, you'll want proxy underscore set underscore header host with the capital H dollar HTTP underscore host semicolon.", "tokens": [51064, 3087, 11, 291, 603, 528, 29690, 37556, 992, 37556, 23117, 3975, 365, 264, 4238, 389, 7241, 33283, 37556, 3975, 27515, 38780, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16441933314005533, "compression_ratio": 1.8297872340425532, "no_speech_prob": 0.29725340008735657}, {"id": 4062, "seek": 1755600, "start": 17556.0, "end": 17576.0, "text": " In the last line you'll want in the root section proxy underscore set underscore header space capital X dash capital F forward it dash capital F four space dollar proxy underscore add underscore X underscore forward it underscore four.", "tokens": [50364, 682, 264, 1036, 1622, 291, 603, 528, 294, 264, 5593, 3541, 29690, 37556, 992, 37556, 23117, 1901, 4238, 1783, 8240, 4238, 479, 2128, 309, 8240, 4238, 479, 1451, 1901, 7241, 29690, 37556, 909, 37556, 1783, 37556, 2128, 309, 37556, 1451, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11445375074420058, "compression_ratio": 1.8926174496644295, "no_speech_prob": 0.05499349161982536}, {"id": 4063, "seek": 1755600, "start": 17576.0, "end": 17580.0, "text": " Now copy these four lines that you just wrote.", "tokens": [51364, 823, 5055, 613, 1451, 3876, 300, 291, 445, 4114, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11445375074420058, "compression_ratio": 1.8926174496644295, "no_speech_prob": 0.05499349161982536}, {"id": 4064, "seek": 1758000, "start": 17580.0, "end": 17588.0, "text": " Below the location root block, we'll need to add another location block, which will only intercept attempts to connect to WebSockets.", "tokens": [50364, 36261, 264, 4914, 5593, 3461, 11, 321, 603, 643, 281, 909, 1071, 4914, 3461, 11, 597, 486, 787, 24700, 15257, 281, 1745, 281, 9573, 50, 1560, 1385, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12858593982198965, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.04022222384810448}, {"id": 4065, "seek": 1758000, "start": 17588.0, "end": 17595.0, "text": " We have to handle WebSocket forwarding specially. This is a detail of engine X configuration.", "tokens": [50764, 492, 362, 281, 4813, 9573, 50, 31380, 2128, 278, 22549, 13, 639, 307, 257, 2607, 295, 2848, 1783, 11694, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12858593982198965, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.04022222384810448}, {"id": 4066, "seek": 1758000, "start": 17595.0, "end": 17599.0, "text": " To do so, write location space till day asterisk.", "tokens": [51114, 1407, 360, 370, 11, 2464, 4914, 1901, 4288, 786, 257, 3120, 7797, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12858593982198965, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.04022222384810448}, {"id": 4067, "seek": 1759900, "start": 17599.0, "end": 17604.0, "text": " Then we're going to add a long regular expression that will look kind of funky.", "tokens": [50364, 1396, 321, 434, 516, 281, 909, 257, 938, 3890, 6114, 300, 486, 574, 733, 295, 33499, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06225115458170573, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.5075057148933411}, {"id": 4068, "seek": 1759900, "start": 17604.0, "end": 17610.0, "text": " This regular expression will be used to match the request path for WebSocket connections.", "tokens": [50614, 639, 3890, 6114, 486, 312, 1143, 281, 2995, 264, 5308, 3100, 337, 9573, 50, 31380, 9271, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06225115458170573, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.5075057148933411}, {"id": 4069, "seek": 1759900, "start": 17610.0, "end": 17617.0, "text": " This first group is matching the user forward slash account name section of the URL.", "tokens": [50914, 639, 700, 1594, 307, 14324, 264, 4195, 2128, 17330, 2696, 1315, 3541, 295, 264, 12905, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06225115458170573, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.5075057148933411}, {"id": 4070, "seek": 1759900, "start": 17617.0, "end": 17622.0, "text": " The second group matches the WebSocket request specific to the notebook server.", "tokens": [51264, 440, 1150, 1594, 10676, 264, 9573, 50, 31380, 5308, 2685, 281, 264, 21060, 7154, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06225115458170573, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.5075057148933411}, {"id": 4071, "seek": 1762200, "start": 17622.0, "end": 17630.0, "text": " Then suffix with forward slash question mark, and that's all you need for the regular expression that identifies WebSocket requests.", "tokens": [50364, 1396, 3889, 970, 365, 2128, 17330, 1168, 1491, 11, 293, 300, 311, 439, 291, 643, 337, 264, 3890, 6114, 300, 34597, 9573, 50, 31380, 12475, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0682758092880249, "compression_ratio": 1.6303501945525292, "no_speech_prob": 0.015423193573951721}, {"id": 4072, "seek": 1762200, "start": 17630.0, "end": 17635.0, "text": " I'll turn on word wrap so you can see this whole line.", "tokens": [50764, 286, 603, 1261, 322, 1349, 7019, 370, 291, 393, 536, 341, 1379, 1622, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0682758092880249, "compression_ratio": 1.6303501945525292, "no_speech_prob": 0.015423193573951721}, {"id": 4073, "seek": 1762200, "start": 17635.0, "end": 17639.0, "text": " Inside that group, paste the four lines that you copied earlier.", "tokens": [51014, 15123, 300, 1594, 11, 9163, 264, 1451, 3876, 300, 291, 25365, 3071, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0682758092880249, "compression_ratio": 1.6303501945525292, "no_speech_prob": 0.015423193573951721}, {"id": 4074, "seek": 1762200, "start": 17639.0, "end": 17644.0, "text": " You'll need to add some additional lines to get WebSocket forwarding the work.", "tokens": [51214, 509, 603, 643, 281, 909, 512, 4497, 3876, 281, 483, 9573, 50, 31380, 2128, 278, 264, 589, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0682758092880249, "compression_ratio": 1.6303501945525292, "no_speech_prob": 0.015423193573951721}, {"id": 4075, "seek": 1762200, "start": 17644.0, "end": 17651.0, "text": " First, you'll want to add proxy underscore HTTP underscore version space one point one.", "tokens": [51464, 2386, 11, 291, 603, 528, 281, 909, 29690, 37556, 33283, 37556, 3037, 1901, 472, 935, 472, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0682758092880249, "compression_ratio": 1.6303501945525292, "no_speech_prob": 0.015423193573951721}, {"id": 4076, "seek": 1765100, "start": 17651.0, "end": 17662.0, "text": " Next, you'll want to add proxy underscore set underscore header space capital U upgrade space dollar HTTP underscore upgrade semicolon.", "tokens": [50364, 3087, 11, 291, 603, 528, 281, 909, 29690, 37556, 992, 37556, 23117, 1901, 4238, 624, 11484, 1901, 7241, 33283, 37556, 11484, 27515, 38780, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09629522051130023, "compression_ratio": 1.9069767441860466, "no_speech_prob": 0.017438162118196487}, {"id": 4077, "seek": 1765100, "start": 17662.0, "end": 17672.0, "text": " Next, add proxy underscore set underscore header space capital C connection space upgrade in quotes semicolon.", "tokens": [50914, 3087, 11, 909, 29690, 37556, 992, 37556, 23117, 1901, 4238, 383, 4984, 1901, 11484, 294, 19963, 27515, 38780, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09629522051130023, "compression_ratio": 1.9069767441860466, "no_speech_prob": 0.017438162118196487}, {"id": 4078, "seek": 1767200, "start": 17672.0, "end": 17680.0, "text": " Last, you'll want to add proxy underscore read underscore timeout space 86,400 semicolon.", "tokens": [50364, 5264, 11, 291, 603, 528, 281, 909, 29690, 37556, 1401, 37556, 565, 346, 1901, 26687, 11, 13741, 27515, 38780, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09654578566551208, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04812527075409889}, {"id": 4079, "seek": 1767200, "start": 17680.0, "end": 17686.0, "text": " This is all you need to get content to forward to Jupyter Hub using engine X.", "tokens": [50764, 639, 307, 439, 291, 643, 281, 483, 2701, 281, 2128, 281, 22125, 88, 391, 18986, 1228, 2848, 1783, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09654578566551208, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04812527075409889}, {"id": 4080, "seek": 1767200, "start": 17686.0, "end": 17691.0, "text": " The last piece we'll want to add is to intercept request for static assets.", "tokens": [51064, 440, 1036, 2522, 321, 603, 528, 281, 909, 307, 281, 24700, 5308, 337, 13437, 9769, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09654578566551208, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04812527075409889}, {"id": 4081, "seek": 1767200, "start": 17691.0, "end": 17695.0, "text": " We'll want to host directly from the notebook directory.", "tokens": [51314, 492, 603, 528, 281, 3975, 3838, 490, 264, 21060, 21120, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09654578566551208, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04812527075409889}, {"id": 4082, "seek": 1767200, "start": 17695.0, "end": 17698.0, "text": " But first, let's make sure that this is working.", "tokens": [51514, 583, 700, 11, 718, 311, 652, 988, 300, 341, 307, 1364, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09654578566551208, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04812527075409889}, {"id": 4083, "seek": 1767200, "start": 17698.0, "end": 17700.0, "text": " Save the file.", "tokens": [51664, 15541, 264, 3991, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09654578566551208, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.04812527075409889}, {"id": 4084, "seek": 1770000, "start": 17700.0, "end": 17704.0, "text": " Go back to your terminal.", "tokens": [50364, 1037, 646, 281, 428, 14709, 13, 50564], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4085, "seek": 1770000, "start": 17704.0, "end": 17706.0, "text": " Launch engine X.", "tokens": [50564, 28119, 2848, 1783, 13, 50664], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4086, "seek": 1770000, "start": 17706.0, "end": 17711.0, "text": " If you get a message like this, it means there's something wrong with your configuration file.", "tokens": [50664, 759, 291, 483, 257, 3636, 411, 341, 11, 309, 1355, 456, 311, 746, 2085, 365, 428, 11694, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4087, "seek": 1770000, "start": 17711.0, "end": 17713.0, "text": " It looks like mine has a typo.", "tokens": [50914, 467, 1542, 411, 3892, 575, 257, 2125, 78, 13, 51014], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4088, "seek": 1770000, "start": 17713.0, "end": 17717.0, "text": " Remote underscore add was supposed to be remote underscore adder.", "tokens": [51014, 44858, 37556, 909, 390, 3442, 281, 312, 8607, 37556, 909, 260, 13, 51214], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4089, "seek": 1770000, "start": 17717.0, "end": 17720.0, "text": " I'm going to add an R and then save the file.", "tokens": [51214, 286, 478, 516, 281, 909, 364, 497, 293, 550, 3155, 264, 3991, 13, 51364], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4090, "seek": 1770000, "start": 17720.0, "end": 17722.0, "text": " Now I'm going to go back to the terminal.", "tokens": [51364, 823, 286, 478, 516, 281, 352, 646, 281, 264, 14709, 13, 51464], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4091, "seek": 1770000, "start": 17722.0, "end": 17725.0, "text": " I'm going to try launching engine X again.", "tokens": [51464, 286, 478, 516, 281, 853, 18354, 2848, 1783, 797, 13, 51614], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4092, "seek": 1770000, "start": 17725.0, "end": 17729.0, "text": " It looks like I missed another instance of remote add.", "tokens": [51614, 467, 1542, 411, 286, 6721, 1071, 5197, 295, 8607, 909, 13, 51814], "temperature": 0.0, "avg_logprob": -0.052148325546928075, "compression_ratio": 1.794871794871795, "no_speech_prob": 0.009410864673554897}, {"id": 4093, "seek": 1772900, "start": 17729.0, "end": 17733.0, "text": " Also down here where I copied that content from the root.", "tokens": [50364, 2743, 760, 510, 689, 286, 25365, 300, 2701, 490, 264, 5593, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4094, "seek": 1772900, "start": 17733.0, "end": 17735.0, "text": " I'm going to save the file.", "tokens": [50564, 286, 478, 516, 281, 3155, 264, 3991, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4095, "seek": 1772900, "start": 17735.0, "end": 17738.0, "text": " I'll try launching engine X again.", "tokens": [50664, 286, 603, 853, 18354, 2848, 1783, 797, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4096, "seek": 1772900, "start": 17738.0, "end": 17740.0, "text": " Looks like it launched successfully.", "tokens": [50814, 10027, 411, 309, 8730, 10727, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4097, "seek": 1772900, "start": 17740.0, "end": 17743.0, "text": " Now I'm going to go to my web browser to verify that it launched.", "tokens": [50914, 823, 286, 478, 516, 281, 352, 281, 452, 3670, 11185, 281, 16888, 300, 309, 8730, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4098, "seek": 1772900, "start": 17743.0, "end": 17746.0, "text": " I'm going to try accessing engine X.", "tokens": [51064, 286, 478, 516, 281, 853, 26440, 2848, 1783, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4099, "seek": 1772900, "start": 17746.0, "end": 17750.0, "text": " If you recall correctly, it's at localhost 8080.", "tokens": [51214, 759, 291, 9901, 8944, 11, 309, 311, 412, 2654, 6037, 4688, 4702, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4100, "seek": 1772900, "start": 17750.0, "end": 17755.0, "text": " When I first access it, it looks as if what I did had no effect on engine X.", "tokens": [51414, 1133, 286, 700, 2105, 309, 11, 309, 1542, 382, 498, 437, 286, 630, 632, 572, 1802, 322, 2848, 1783, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05429870865561746, "compression_ratio": 1.6637931034482758, "no_speech_prob": 0.0008295293082483113}, {"id": 4101, "seek": 1775500, "start": 17755.0, "end": 17760.0, "text": " However, this is because my web browser is caching the contents of the last request.", "tokens": [50364, 2908, 11, 341, 307, 570, 452, 3670, 11185, 307, 269, 2834, 264, 15768, 295, 264, 1036, 5308, 13, 50614], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4102, "seek": 1775500, "start": 17760.0, "end": 17764.0, "text": " By refreshing the page, I should see the right contents.", "tokens": [50614, 3146, 19772, 264, 3028, 11, 286, 820, 536, 264, 558, 15768, 13, 50814], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4103, "seek": 1775500, "start": 17764.0, "end": 17769.0, "text": " If refreshing the page doesn't fix the problem for you, you may need to clear your web browser's cache.", "tokens": [50814, 759, 19772, 264, 3028, 1177, 380, 3191, 264, 1154, 337, 291, 11, 291, 815, 643, 281, 1850, 428, 3670, 11185, 311, 19459, 13, 51064], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4104, "seek": 1775500, "start": 17769.0, "end": 17773.0, "text": " To do so, you'll have to follow steps specific to your web browser.", "tokens": [51064, 1407, 360, 370, 11, 291, 603, 362, 281, 1524, 4439, 2685, 281, 428, 3670, 11185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4105, "seek": 1775500, "start": 17773.0, "end": 17776.0, "text": " I'm going to go ahead and click on my server.", "tokens": [51264, 286, 478, 516, 281, 352, 2286, 293, 2052, 322, 452, 7154, 13, 51414], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4106, "seek": 1775500, "start": 17776.0, "end": 17781.0, "text": " I need to validate that the proxy for the web sockets is working.", "tokens": [51414, 286, 643, 281, 29562, 300, 264, 29690, 337, 264, 3670, 370, 11984, 307, 1364, 13, 51664], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4107, "seek": 1775500, "start": 17781.0, "end": 17784.0, "text": " I'm going to open up the shared folder.", "tokens": [51664, 286, 478, 516, 281, 1269, 493, 264, 5507, 10820, 13, 51814], "temperature": 0.0, "avg_logprob": -0.037897879960107024, "compression_ratio": 1.802325581395349, "no_speech_prob": 0.03307235613465309}, {"id": 4108, "seek": 1778400, "start": 17784.0, "end": 17786.0, "text": " And then the test one notebook.", "tokens": [50364, 400, 550, 264, 1500, 472, 21060, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4109, "seek": 1778400, "start": 17786.0, "end": 17790.0, "text": " I'm going to try to run the cell with a change.", "tokens": [50464, 286, 478, 516, 281, 853, 281, 1190, 264, 2815, 365, 257, 1319, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4110, "seek": 1778400, "start": 17790.0, "end": 17796.0, "text": " If it works, I know that the web sockets are forwarding correctly because the notebook is able to execute code.", "tokens": [50664, 759, 309, 1985, 11, 286, 458, 300, 264, 3670, 370, 11984, 366, 2128, 278, 8944, 570, 264, 21060, 307, 1075, 281, 14483, 3089, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4111, "seek": 1778400, "start": 17796.0, "end": 17800.0, "text": " I'm going to save and close this notebook.", "tokens": [50964, 286, 478, 516, 281, 3155, 293, 1998, 341, 21060, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4112, "seek": 1778400, "start": 17800.0, "end": 17804.0, "text": " Now I want to try to speed up this Jupyter Hub instance.", "tokens": [51164, 823, 286, 528, 281, 853, 281, 3073, 493, 341, 22125, 88, 391, 18986, 5197, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4113, "seek": 1778400, "start": 17804.0, "end": 17807.0, "text": " To do so, I'll have to intercept request the static.", "tokens": [51364, 1407, 360, 370, 11, 286, 603, 362, 281, 24700, 5308, 264, 13437, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4114, "seek": 1778400, "start": 17807.0, "end": 17809.0, "text": " I'm going to go back to my terminal.", "tokens": [51514, 286, 478, 516, 281, 352, 646, 281, 452, 14709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08478706854361075, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.0005702831549569964}, {"id": 4115, "seek": 1780900, "start": 17809.0, "end": 17815.0, "text": " The first thing I need to do is make sure that I have the static notebook files somewhere on my computer.", "tokens": [50364, 440, 700, 551, 286, 643, 281, 360, 307, 652, 988, 300, 286, 362, 264, 13437, 21060, 7098, 4079, 322, 452, 3820, 13, 50664], "temperature": 0.0, "avg_logprob": -0.141214476691352, "compression_ratio": 1.522167487684729, "no_speech_prob": 0.011329921893775463}, {"id": 4116, "seek": 1780900, "start": 17815.0, "end": 17817.0, "text": " That way, Nginx can host them.", "tokens": [50664, 663, 636, 11, 426, 1494, 87, 393, 3975, 552, 13, 50764], "temperature": 0.0, "avg_logprob": -0.141214476691352, "compression_ratio": 1.522167487684729, "no_speech_prob": 0.011329921893775463}, {"id": 4117, "seek": 1780900, "start": 17817.0, "end": 17820.0, "text": " I'm going to navigate to my root directory.", "tokens": [50764, 286, 478, 516, 281, 12350, 281, 452, 5593, 21120, 13, 50914], "temperature": 0.0, "avg_logprob": -0.141214476691352, "compression_ratio": 1.522167487684729, "no_speech_prob": 0.011329921893775463}, {"id": 4118, "seek": 1780900, "start": 17820.0, "end": 17832.0, "text": " Here, to clone the notebook, I'm going to run getClone, space, HTTPS, github.com, forward slash Jupyter, forward slash notebook.", "tokens": [50914, 1692, 11, 281, 26506, 264, 21060, 11, 286, 478, 516, 281, 1190, 483, 9966, 546, 11, 1901, 11, 11751, 51, 6273, 11, 290, 355, 836, 13, 1112, 11, 2128, 17330, 22125, 88, 391, 11, 2128, 17330, 21060, 13, 51514], "temperature": 0.0, "avg_logprob": -0.141214476691352, "compression_ratio": 1.522167487684729, "no_speech_prob": 0.011329921893775463}, {"id": 4119, "seek": 1783200, "start": 17832.0, "end": 17840.0, "text": " Once the notebook clones successfully, I'm going to go back to the atom instance that I used to open the Nginx configuration.", "tokens": [50364, 3443, 264, 21060, 43803, 10727, 11, 286, 478, 516, 281, 352, 646, 281, 264, 12018, 5197, 300, 286, 1143, 281, 1269, 264, 426, 1494, 87, 11694, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4120, "seek": 1783200, "start": 17840.0, "end": 17844.0, "text": " Above the location root block, I'm going to add a new block.", "tokens": [50764, 32691, 264, 4914, 5593, 3461, 11, 286, 478, 516, 281, 909, 257, 777, 3461, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4121, "seek": 1783200, "start": 17844.0, "end": 17847.0, "text": " This block will recognize requests for static assets.", "tokens": [50964, 639, 3461, 486, 5521, 12475, 337, 13437, 9769, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4122, "seek": 1783200, "start": 17847.0, "end": 17850.0, "text": " To do so, I'll have to use a regular expression again.", "tokens": [51114, 1407, 360, 370, 11, 286, 603, 362, 281, 764, 257, 3890, 6114, 797, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4123, "seek": 1783200, "start": 17850.0, "end": 17854.0, "text": " This time, just use tilde, no asterisk.", "tokens": [51264, 639, 565, 11, 445, 764, 45046, 11, 572, 257, 3120, 7797, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4124, "seek": 1783200, "start": 17854.0, "end": 17856.0, "text": " The regular expression is as follows.", "tokens": [51464, 440, 3890, 6114, 307, 382, 10002, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4125, "seek": 1783200, "start": 17856.0, "end": 17857.0, "text": " Forward slash.", "tokens": [51564, 35524, 17330, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4126, "seek": 1783200, "start": 17857.0, "end": 17861.0, "text": " And the first group is the user block, just like we did earlier.", "tokens": [51614, 400, 264, 700, 1594, 307, 264, 4195, 3461, 11, 445, 411, 321, 630, 3071, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09166731039683024, "compression_ratio": 1.6840148698884758, "no_speech_prob": 0.014502011239528656}, {"id": 4127, "seek": 1786100, "start": 17861.0, "end": 17866.0, "text": " And then the next block is forward slash static forward slash.", "tokens": [50364, 400, 550, 264, 958, 3461, 307, 2128, 17330, 13437, 2128, 17330, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09795889693699526, "compression_ratio": 1.8254716981132075, "no_speech_prob": 0.004904258530586958}, {"id": 4128, "seek": 1786100, "start": 17866.0, "end": 17879.0, "text": " Lastly, parentheses dot asterisk to match all characters, forward slash, question, v equals, and then parentheses dot asterisk to match all characters.", "tokens": [50614, 18072, 11, 34153, 5893, 257, 3120, 7797, 281, 2995, 439, 4342, 11, 2128, 17330, 11, 1168, 11, 371, 6915, 11, 293, 550, 34153, 5893, 257, 3120, 7797, 281, 2995, 439, 4342, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09795889693699526, "compression_ratio": 1.8254716981132075, "no_speech_prob": 0.004904258530586958}, {"id": 4129, "seek": 1786100, "start": 17879.0, "end": 17886.0, "text": " Now, you're going to specify the root directory to the directory that we clone the notebook repository to.", "tokens": [51264, 823, 11, 291, 434, 516, 281, 16500, 264, 5593, 21120, 281, 264, 21120, 300, 321, 26506, 264, 21060, 25841, 281, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09795889693699526, "compression_ratio": 1.8254716981132075, "no_speech_prob": 0.004904258530586958}, {"id": 4130, "seek": 1786100, "start": 17886.0, "end": 17890.0, "text": " When that is finished, save the file and return to your terminal.", "tokens": [51614, 1133, 300, 307, 4335, 11, 3155, 264, 3991, 293, 2736, 281, 428, 14709, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09795889693699526, "compression_ratio": 1.8254716981132075, "no_speech_prob": 0.004904258530586958}, {"id": 4131, "seek": 1789000, "start": 17890.0, "end": 17897.0, "text": " Make sure to stop Nginx if it's already running by running Nginx, dash s, stop.", "tokens": [50364, 4387, 988, 281, 1590, 426, 1494, 87, 498, 309, 311, 1217, 2614, 538, 2614, 426, 1494, 87, 11, 8240, 262, 11, 1590, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07633589295779958, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.016911324113607407}, {"id": 4132, "seek": 1789000, "start": 17897.0, "end": 17901.0, "text": " Then run Nginx to launch Nginx again.", "tokens": [50714, 1396, 1190, 426, 1494, 87, 281, 4025, 426, 1494, 87, 797, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07633589295779958, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.016911324113607407}, {"id": 4133, "seek": 1789000, "start": 17901.0, "end": 17903.0, "text": " Now let's go back to the web browser.", "tokens": [50914, 823, 718, 311, 352, 646, 281, 264, 3670, 11185, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07633589295779958, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.016911324113607407}, {"id": 4134, "seek": 1789000, "start": 17903.0, "end": 17907.0, "text": " Navigate back to the root page, refresh the page.", "tokens": [51014, 9219, 328, 473, 646, 281, 264, 5593, 3028, 11, 15134, 264, 3028, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07633589295779958, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.016911324113607407}, {"id": 4135, "seek": 1789000, "start": 17907.0, "end": 17911.0, "text": " If everything worked, the page shouldn't look any different.", "tokens": [51214, 759, 1203, 2732, 11, 264, 3028, 4659, 380, 574, 604, 819, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07633589295779958, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.016911324113607407}, {"id": 4136, "seek": 1789000, "start": 17911.0, "end": 17916.0, "text": " However, this Jupyter logo, for example, is being hosted by Nginx.", "tokens": [51414, 2908, 11, 341, 22125, 88, 391, 9699, 11, 337, 1365, 11, 307, 885, 19204, 538, 426, 1494, 87, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07633589295779958, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.016911324113607407}], "language": "en"}