{"text": " Okay, I've been given a knob, so let's get started and it sounds like I've cut out already so let's just abandon this. Can you hear me okay at the back? Yeah. Is that okay? Great. So, today, hopefully, you're here to learn about D-Player and to give you a little bit of context, I'm interested in data manipulation in the context of data analysis, so you've got raw data coming in one side, understanding knowledge and insight coming out the other. And today we're going to be focusing on data manipulation, but I see this really as being part of the cycle of other data analysis or data science tools. So to me, there's really four main tools for data science. So the first is data tidying, getting your data into a form that's actually suitable for analysis. Now, in this diagram, I've drawn this little short arrow, but as many of you have actually worked with real data, you know, often the arrow is all the way around on the other side of the room. So often, one of the most challenging parts of doing a data analysis is just getting the data in the right form that you can work with it. Now once you've done that, you'll often do some basic manipulation, data transformation. You'll create new variables that are functions of existing variables. You might do a little bit of aggregation and so on, and that's mostly what we're going to be talking about today. But it's also important to bear in mind that you're doing this to fit into a cycle. You want your tools to easily plug into the other. You want your manipulation tools to easily plug into your data visualization and modeling tools. The visualizations are great because they uncover the unexpected. They help you make precise your questions about the data, but the problem with visualizations is that they fundamentally don't scale. On the other hand, the kind of complementary tools, statistical models, machine learning, data mining, basically whenever you've made a question sufficiently precise that you can answer it with a handful of summary statistics or an algorithm, you've got a model. Tools are great because they scale, but they don't fundamentally surprise your linear models and they're going to tell you your data is nonlinear. So any real data analysis, you're going to be circling between these tools multiple times. You might start by looking at a plot. Based on that plot, you develop a model. You then take some predictions from that model. You transform your data to look at the residuals. You visualize those and so on and so on. So while today we're going to be focusing on data manipulation, data transformation, the goal is to have tools that embed seamlessly into your data analysis process. And so the family of tools that I've been working on and others at RStudio are working on have recently sort of undergone somewhat of a change and if you're interested in hearing more about that, I'm going to be talking about that in my talk on Tuesday. So basically, for data tidying, now the tidier package, which is kind of another update of reshape and then reshape2 and now tidier, pliers become de-plier and ggplot is in the process of turning into ggplot2. And as you'll see today, there are some kind of very important commonalities that underlie all of these tools that make it easy for you to use them. So today we're going to talk about data manipulation. We'll start with a little intro to the data we're going to be using, then talk about single table verbs, a little bit about data pipelines, some more complicated types of filtering and grouping, joins, a very general do operator and then I'm just going to talk very briefly at the end about how all the tools you've learned today working with data frames also apply to databases as well. But before we begin, I kind of want to start with the caveat and then the bad news is whenever you're learning a new tool for a long time, you're going to suck. It's going to be very frustrating, but the good news is that that is typical, it's something that happens to everyone and it's only temporary. Unfortunately, there is no way to going from knowing nothing about a subject to knowing something about a subject and being an expert in it without going through a period of great frustration and much suckiness. But remember, when you're getting frustrated, that's a good thing. That's typical, it's temporary, keep pushing through and in time will become second nature. Okay, with that said, let's get started. We're going to be looking at four interrelated datasets today. I have given you them in a RStudio project. So if you have downloaded the code and data, you can double click on this R approach file. If you're not using RStudio, my apologies, but you can just change your working directory and I'll assume you'll be okay with that. So in this directory, we've got the scripts, which mostly correspond to what we're going to be working through today, and then we have got four datasets. I wanted to start briefly with a couple of hints about using ... I'm not going to do that. Okay, I'm going to tell you about the data. So we've got these four datasets. The first one is the main one we're going to be looking at. This is not a huge dataset, but it's recently sized, about 200,000 observations. This is every flight that departed from Houston in 2011, and then we have got three datasets that we can join with this dataset that provide useful additional metadata. So we have some data about the weather for each hour. As you can imagine, if we're looking at flight data, you might be interested in what causes flight delays. The weather is obviously a cause of that. You might also be interested in, are there planes that are consistently delayed? So we have some information about the planes that are flying these routes, when they're built, what type of plane they are, how many people they see, and so on. And then we have some information about the airports that the flights are flying to, which is mainly their location, so you can plot them on a map. Now to load this data in, I'm not going to talk to you about this code. It's there in the first file. To get started, you're going to want to source that file in that it's going to create these four datasets. The only thing that you might not have seen before is this tableDF function. What that is going to do, it's going to turn these data frames into dpliers tableDF objects, which are almost identical in every single way to data frames, except when you print out a tableDF, it does not print out 10,000 rows, it will only print out the first 10 rows. So it gives you some summary information about what's going on in that dataset. It prints all the variables that fit in one screen. It might make us a little wider. And if they don't fit on the screen, it just gives you a little summary, the names of the variables and what type of variable they have. It's identical in every way to a data frame, except when you look at the class, it is one, well, two additional things. If a package doesn't know about dpliers, it would just treat it exactly like a data frame. In fact, it is a data frame, it's just a special type of data frame. So we've got flights data, about 200,000 observations, weather, which is about 8,000. These planes, about 3,000, and then about 3,000 airports. Okay, now that you've introduced yourselves and hopefully have some questions to ask about the data, we're going to dive in and learn the first five important verbs associated with dpliers. So my kind of contention is if you know these five verbs and combine them with another tool, we'll learn about shortly, this will solve 90% say of your data manipulation problems. And that's really important because now when you have a data manipulation problem, instead of thinking, well, there's like 1,000 functions and base R, which one of those is the one I need. Now you just need to look through these five verbs. So the first verb is filter, where you're going to select rows based on the values of their variables. You might also want to just focus on a certain number of columns or variables that select. You might want to reorder the rows or arrange the data frame. You might want to add new variables that are functions of existing variables. Or finally, you might want to reduce multiple values down to a single value. So all of these functions work exactly the same way. The first argument is always a data frame. The subsequent arguments tell you what to do with that data frame. And then they always return a data frame. So none of these functions modify in place, so whenever you use them, if you do want to modify your data frame, you're going to have to assign the results. A lot of the times I'm just going to show you, I'm just going to run the code and kind of show you the results on screen and then throw it away. That's great for teaching, but obviously when you're doing a real data analysis, you actually want to save what you've done. To illustrate these, I'm going to start with a very simple five-row data frame, which I'm also going to show in slides. So filter allows you to select rows that match some criteria. So here we're going to say filterDF, we want all the rows with color equals blue. So this is the input and this is the output. So if you've used subset before and baseR, this is very, very similar. If you're looking to see if a value matches one of multiple values, you can use in. And then there's a whole set of other operators, the regular logic, the numerical comparison operator is greater than, greater than, equal to, so on and so on. Not equal, equal and member of the set. You might also want to use the Boolean algebra, so or and and not an exclusive or. So I'm just showing this here as a reference, hopefully if you've used R a little bit, you're familiar with these already. There are kind of two main things to be cautious of. When you're working with vectors, you want to use the single bar and the single ampersand. If you're working with scalars, if you're working with single numbers, like you're using an if statement, that's when you use the double bar or the double ampersand. But here we're going to be working with vectors and values, so we want to always use the single vertical bar or the single ampersand. And we'll talk about this in a little, very shortly. So what I want you guys to do is practice using filter by extracting the flights that match these criteria. So first of all, all of the flights that went to San Francisco, all of the flights that were in January, or all flights that were delayed by more than an hour, or they departed between midnight and 5 AM, or when the arrival delay was twice as much as the departure delay or corrective. So I'll give you a few minutes. I'll circulate around and help you again, there's only one of me and there's a lot of you. So if you get stuck on my behalf, please feel free to ask your neighbor for help. Okay, so let's have a go at how you might tackle this. So we wanted to find all the flights that went to SFO Oakland. So you might start like this. So there's 2,800 that went to SFO. Now a common mistake when you're first using R, you would say, I want the destination to equal San Francisco or Oakland, you do that, that's not going to work. So you either have to be very explicit and say destination equals SFO, or destination equals Oakland, or use the in operator. So that's all of the flights that his destination was San Francisco or Oakland. In January, that's actually a tricky one. The easiest way to do that is, in this case I know the first flight was January 1st, so I can just say give me all the flights before the 1st of February. That didn't work surprisingly, so we might need to just, oh, 2011, yeah, okay. So let's just see how that thing went down. So that gets us 18,000 flights in January. Again between midnight and 5am, there are two ways you can write this, so probably you might have written this, all of the flights where hour is greater than or equal to 0, and hour is less than or equal to 5. With filter, you can also supply multiple arguments to it, and those arguments are all ended together. There's no real benefit to doing it this way, rather than this way, except maybe one day we might be able to figure out how to do these in parallel, and it might be twice as fast if you do it this way. And then finally, all the flights delayed by more than an hour. There's two delay variables here, the departure delay and the arrival delay. I should have mentioned if it's a negative delay, that means it arrived early or departed early. We can find all the flights that were delayed by more than an hour, right, 10,000 flights, if any of you have, I assume you've all flown in the US, so you're not surprised by this. And we can also use more complicated expressions in there. We can find all of the flights where the arrival delay is twice as much as the departure delay. So these are cases where we have lost time during the flight. Well, on these ones we might also want to say, and the departure delay was greater than zero. Right, so this minute, this flight, wait a little longer, right? Yeah, this flight was two minutes delayed departing, and it was six minutes late on arrival. Any questions about Felter? Yep. Why would you use Felter instead of Felter? Because it's faster, because it is better defined, it just does one thing, and it does it one thing well, or a subset does multiple things, and then finally you can use Felter on database tables and it will generate SQL for you. Will it work on regular data frames? Yes. Okay, the next verb is select, which allows you to pick variables you're interested in. So this is most useful if you have a data set that has hundreds of variables, and you just want to look at a few of them. The syntax is the name of the data frame, and then the list of the variables you want to keep. So select works like the select argument to subset if you've ever used that. But basically you can treat the names of variables like their positions. So you can say use negative to say give me all the variables that are not color. What I want you guys to do now is read the help for select. What are the other ways you can select sets of variables, and then see if you can come up with three ways of selecting out the two delay variables from this data set. So if you look at the help for select, you'll see that all of these main verbs are documented together, and you'll see that I've been courteous to Americans. But if we scroll down, we can see that there are five ways of, well, at least five ways, extra ways of selecting variables. So you can select variables that start with a common prefix, then end with a common suffix that contain some character string or the match a regular expression, or you can do like a numeric range, say all of x1 to x10. So this is my attempt to come up with every way that you might reasonably want to select a variable. So a couple of ways you can select these two. You can select them just as individual variables. You could say pick all of the variables between from a rival delay to departure delay. You could find all of the variables that end with delay or all of the variables that contain delay. There's lots of other ways too. You could also write this. You could say make a vector of columns. We're using C. Basically, inside select variable names, you can treat them like the numeric positions. So anything you can do to a numeric position, you can do with a variable name. So the goal of select is to make it easy to refer to your variables by name. It's always a better idea to refer to your variables by name than by position, because you don't want your data input format changes and you're referring to variables by position. It's very easy to have code that works but gives you meaningless results because it's using the wrong variables. The next verb is a range which just changes the order of the rows. So if you just use a variable and orders it by that, you can order in descending order by using the desk wrapper. And I don't show you here but you can add additional variables to break ties if there are ties in this first variable. So again, order the flights by departure date and time. Figure out using a range which flights were most delayed and then which flights caught up the most time during the flight. So again, a few minutes to work on this and I'll show you the answers. Okay, if we want to order the flights by their departure date, we could say order it by date and then hour and then minute. Just want to see multiple, ordering by multiple variables. So you can see the first flight left on January 1st, one minute after midnight. So I should mention this depth variable is the departure time as like a 24-hour time but all the zeros got dropped off. And then the hour and minute are just that, this time split up into those pieces. So for example in this column, there's not going to be a 661, no flights left, it's 61 minutes past 6am. This is just a weird decimal time. We want to sort, find the most delayed, that's just a matter of sorting so that our delays are descending. We can see the most delayed flight was 981 minutes. So an impressive 16-hour delay. Now normally flights aren't delayed that long, not because flights aren't delayed that long but generally airlines cancel the flights to make their departure delay statistics look better. So similarly we could do the same thing for arrival delay, which is going to give us a pretty similar message. And the other thing I wanted to show here is that you can arrange on kind of compound expressions. I wanted to find the planes in a mode made up the most time and there's the biggest difference between the departure and arrival delay. So there's a flight, so for example this flight left one minute early and it arrived an hour and 10 minutes early. So you can arrange on compound expressions although generally it's going to be easier to add that as a new variable depending on what's going on and then arranged by that. Why are you reporting this descending? Because I wanted to find the one, I wanted to find the biggest difference. I may have... Actually I got the same result. I may have hit this round the wrong way. Oh yeah. So depending on which way round we need to track the arrival from departure to ascending or ascending. Any other questions about arrange? I had a problem with the NAs, the first time I did something I got all the NAs on top. I did it in a different way than you did once I... So NAs should always sort to the end and if they don't that's a bug. They do but what if I want the smallest without the NAs? So you have to use felt as a removal of the NAs currently. Is there an opposite of descending? Yes, just don't do descending. I think also the way that... I believe that if you do descending or descending that is ascending. It's the one still. If you really want an ascending function you can just do that. Okay, the starting to get more complicated. The next verb is mutate which allows you to add new variables that are functions of existing variables. So here we're adding a new variable called double which is two times our existing value variable. So again in all of the dplyr functions you never need to explicitly refer to the data frame that you're working with. That's always implicit. It's going to look for this value inside the data frame rather than in your global environment. Mutate is very similar to transform and base r if you've used that. One big difference with mutate is you can do multiple... In additional mutations or additional transformations you can refer to variables that you just created which you cannot do in transform and is a little bit annoying. So here we first double value and then we make a new column called quadruple which is just two times double a variable we just created. How does it compare to within? Basically I think within is a hideous monstrosity that no one should ever use. And if you want to know more I can tell you. Okay so your turn to create some variables. See if you can figure out the speed and miles per hour which flight flew the fastest. See if you can create a new variable that shows how much time was made up during the course of the flight or lost. And then how did I compute the hour and minute variables from that departure variable? Okay so if I wanted to compute the speed that is just the distance divided by the time divided by 60 because time is in minutes. So if we print that out you know unless you make your screen really wide you can't see everything. So one thing you can do is use the view function which works in RStudio and other R ideas which will just show all of your variables on a nice kind of scrollable table or you can always just select the variables you want to see so from like departure to speed. So if you use a very handy way of just viewing a data frame in a nice table. Did you change flights? Yes so in this case I modified flights because I wanted to create a new variable and modify that original data set to add that new variable and then I can sort it to find the fastest ones and see 760 miles an hour. When you mutate does there an easy way to specify a position? No so when you add new variables they always go on to the end of the data frame. If you wanted to reposition them there's currently no particularly easy way to do that. You could create a big select statement but it's kind of a pain. We could create this delta variable which is just the difference between the departure and arrival delay. If you didn't care about the direction you could do whatever you want in this whatever R expression you want. The last thing I wanted to mention is just a useful trick. If I have this departure we have the first two digits of the hour and the second two digits of the minute you can use the integer division operator and the modular operator to extract those pieces out. This is just a useful little trick if you want to pull out certain digits from a long number. Any other questions about mutate? Okay next I want to talk about a new function group phi which is summarized together. You can use summarized and regular data frames but you always get a data frame that is only one row which is typically not very useful. That's exactly what I said. So summarized is going to give you a one row data frame. What you're going to want to do is actually group your data first and then summarized will operate by group. Here we're saying create a new data frame and use this old data frame grouped by color and then we're going to summarize this and for each group compute the total by summing up the value of your vehicle. So I'm going to create four useful ways of grouping the flights data. We might want to group it by date we might want to group it by hour, we might want to group it by plane or we might want to group it by destination. Just to bear in mind when you do create all these groupings dplyr is sort of smart enough that doesn't create a complete copy of your data every single time. It works the same way as the rest of R, it doesn't sort of a lazy way. If you modify one of these data sets you'll have to create a copy but until you do so they all point to the same place. So grouping data doesn't use up, it doesn't create a copy of the data, it does use up a little bit more memory because grouping builds up an index so you know what observations are in each group. Now there are lots of summary functions you can use, most of these are pretty standard, minimum, medium, maximum you can extract contiles, there are two functions that are special in dplyr in which just tells you how many observations are in a group, indistinct and I should have a x there, tells you how many different observations are in a variable, that's the same as doing length unique x but it's a little bit more efficient. You can sum, you can compute means. It's also often useful to do summaries of logical vectors because when you take a logical vector and treat it like it's a numeric all the falses turn into zeros and the trues turn into ones so what that means is when you sum a logical vector it tells you how many trues there were so this would tell you how many values of x are greater than 10. The mean is just the sum divided by the length so the mean of a logical vector is the proportion of values of the true. There's a really useful little trick. And then lots of other ways of measuring the variation, standard deviation, variance, interquadal range, median absolute deviation. So these are all just standard functions. Okay what I want you guys, what I've shown here is the distribution of departure delays. So I've got two views of this one which shows all of the delays and one which just shows the delays less than like two hours. So what I want you to do with your neighbor for two minutes is just quickly brainstorm given this distribution given what you know about flight delays how might you want to summarize this distribution. What function might what you want to use or do you want to use a mean or a median or something else. So take two minutes starting now, talk it over with your neighbor. So we're going to summarize by date what's one way we could use to summarize the distribution of delays. The median? We could use the median I mean probably want to use the departure delay so if we just run that we are going to get a new data frame and it is 265 rows which you should have anticipated. You know how many days there are in a year. I've got one little problem here probably want to use Na.Ramq was true let's do that. How else could we summarize it? The mean is another obvious one let's just assume we've got that What else might you want to see? 90% quanta. Okay we've got max and actually typing all of this Na.Ramq.true is going to get tedious real fast so I'm just going to filter it and I say I want all of the ones that are not missing okay so that way I can just drop this off and I'll bother typing it so that's the median, the mean, the maximum and then something in between we could get the 90th quanta. Remember how to use that function Any other ideas? Is there a way to for example compute more than just the 90% quanta? Currently you have to type them in like this but there will be some way in the future that you do that Yeah we could also do some thresholds well first of all we could say what's the proportion that is delayed so that is the average of all of the ones where the delay is greater than zero so that is the presently high but you might say well who really cares if it's only a 5 minute delay or a 10 minute delay I might just say arbitrarily like a 15 minute delay that's not bad Why are we looking at departure not arrival? Yeah so equally you might say well it's the impact on our arrival that's what really matters because that's someone picking us up at the airport and our flight is now delayed by an hour and they're getting angry so we could switch all this to arrival delay too and the results are pretty similar So 15 minutes is kind of arbitrary you know you could look at a few other ones if you wanted to do that Yes? Is there a way to use this summer function? You could but I'm not sure that you would want to So current well so there's two problems so first of all I mean this is a reasonable thing to do currently though summarise when you summarise you have to reduce to a single number not multiple numbers because again a future version of dplyr will let you summarise multiple numbers at some point in the future What did I do? So this is what I did and you have to have urm everywhere or you can filter out all of the flights that are not missing but don't have a missing departure So this kind of brings me to my next point at any like in any real data manipulation task you're probably not just going to use one verb but you're going to string multiple verbs together first of all we group it then we filter it then we summarise it and we want some way to kind of express that more naturally or more simply which is that the idea of having a data pipeline you need to do quickly just take a minute talk this over with your neighbour what does this snippet of code do so you've got one minute starting now okay so this looks pretty complicated but if you kind of really carefully pass it you have to start from the innermost thing we're going to start with the flights data then we're going to filter it to remove any missing delays then we're going to group it by date in an hour then we're going to summarise it to compute the average delay and the number of observations in that hour then we're going to filter it to only look at the hours that have more than 10 flights so it's not too complicated but we have to read it in quite an unnatural way to read insight out and then also like the arguments to filter are quite far away so instead what we're going to talk about after the coffee break is this pipe operator and you'll see that that makes the code quite a lot easier to read so the coffee is outside now so let's have a coffee break and come back at 3.40 music music about this operator called the pipe operator so what this basically does is take the thing on the left hand side of the pipe and put it as the first argument as a thing on the right hand side and the advantage of this is it allows us to take something like this which is pretty hard to read and transform it into something like this and this is pretty easy to read particularly if you pronounce this operator as then so we can read this take flights then filter it to remove any values with a missing value for depth delay then group it by date and hour then summarise it computing the average delay and the number of observations in the group then filter it to look at all of the observations we're going to have in 10 so this pipe operator allows us to form chains of complicated data transformation operations that are made up of very simple pieces so the goal is you make something complex by joining together many simple things that are easy to understand in isolation so I want to give you some practice using that with three challenges so which destinations have the highest average delays which flights happen every day and where do they fly to and then on average how do delays vary over the course of a day and if you're going to do that probably look at the non cancelled flights so those three challenges are relatively simple but you're going to need to string together multiple of these verbs you've seen before you might have to use a range and group by and summarise and filter in some order so have a go at joining those together and again if you get stuck I'll come around and help you out or better ask your neighbour do well we start with the flights what are we going to do to that filter to remove anase yep we can remove the anase let's do rival delays what next group by so group by is kind of a fundamentally like statistical operator you're saying what is the unit of interest in this analysis and in this case it's the destination of the flight then for each destination what we want to do is summarise it I'm just going to say let's use the mean delay the other thing I think you always want to do whenever you do a group by summary is you always want to recall the number of observations in each group because when you start looking at these averages you know if there's a destination that has the highest average delay but only one flight flew there and that's probably not as interesting and then if we want to focus on the most delayed flights we're going to arrange it in descending mean so let's run this they've worked so you can see this is a good example so there's this airport BBT which see I think I've already looked at this before so that is Jack Brooks Brooks regional airport on the airport of Texas so there are only three flights flew there the entire year you're not going to trust this average that much so what we might want to do is filter out all of the flights where there's less than 10 observations we'll run that pipeline again now again I've constructed this pipeline just by typing every step and it worked which I have to say I'm slightly amazed at but generally when you're creating pipelines you want to do it a step at a time and this is one reason that I think the default printing is really important because you can just print out the result at every stage and you can see does that look right or not if you have a normal data frame it will print all of it right yes so if you have a normal data frame it will print the whole thing and if you want to turn you can always take a normal data frame and the first thing you can do is pipe it into tables here and turn it into a data frame the other thing the other thing that's useful is you might often pipe this into something rather than just printing it you could pipe it into view if you wanted to see more of the data that's kind of interesting if you wanted to just kind of step through it you could do talk about you could do something like this maybe so we're just taking the row number and taking a modulo 5 equals zero so that's going to give us every fifth that would be one way to do it so if you shows you everything well it shows you the first so many rows in the future I think we'll make it so it shows you every row in a way that's reasonably efficient the other thing that's useful is to pipe it to str so you can see exactly what variables you've created and if they're the right type and so on or if you're so inclined could you put in two functions like head and tail after each other you can't basically so you want a pipeline that has a split in it right you want to have a pipeline that one pipe goes to head and the other pipe goes to tail at the same time yeah I don't like a data table does that by default on that I think that's a nice idea the reason dply doesn't do it is because you can do that for data frames but you can't in general do that efficiently for database queries you can always use tail off so there's another handy keyboard shortcut in our studio which I suspect no one knows about because the only reason I know about it is the Joe who added it told me about it there's this command called rerun previous has anyone used rerun previous before so what that does is if you have selected a block of code and press command enter now if I modify it it's kind of annoying I have to select that block of code again or you can press command shift P and it just sends those same lines of code into the R console so this is really useful if you want to iterate rapidly on your pipeline you can easily change things and maybe I wanted an ascending order and just command shift P and rerun the whole pipeline okay okay so any questions about that pipeline that we created to solve that problem so the next one is which flights happen every day and where do they fly to no so what are we going to start with that and which flights fly every day of the year what's probably the first thing we want to do we want to group by and we want to do that by carrier and the flight number now we want to find all flights that flew every day of the year any ideas so we're going to summarize what might we summarize we might use the dates what how well we're going to use the date how what are we going to do with that oh so we could do we could do count flights we could do count and then we could filter by let's give us a name 365 I forgot to put two equals now the problem with this is that it's possible this flight flew twice on one day and didn't fly it all on another day I feel like that's yeah so actually this is my solution too but now I think a better way would be to say count the number of distinct dates so if there's 365 distinct dates then we know it's flown every day I think this would give us a slightly different answer well in this case it gives us the same answer because there aren't flights that fly every day and then fly twice on one day but not on another now what if we wanted to add see what destinations these flights flew to any thoughts on that we could just add to the group by there are other ways we could do this which we'll see later but in this case it's easy enough to just add that into the group by and see Honolulu and a lot of flights to New York and Chicago and Seattle and Miami I think the last one on average the non cancelled flights vary over the course of the day so again so first of all we always want to say they're not cancelled which I think because cancelled equals zero cancelled is a reason code associated with it and then normally once you've kind of filtered out clearly wrong things the first step is going to be grouping it here we want to group by hour say or maybe hour and minute and then summarize again we want to count how many observations on each group so we can disregard the delayed flights and we could do the mean departure delay and summarize not summary so now when you get to this point it starts to get easier to see what's going on with the visualizations so this is basically that pipeline I just showed you I think I've done a slightly differently I created a new variable called time which is just hour plus minute divided by 60 that gives me like a floating point number that smoothly varies over the course of the day group it, summarize it and then I'm going to do a little ggplot to plot it so you can see very early in the day we have this kind of scattered cloud of some plots that are very delayed what might these be the ones from the end of the previous night the ones from the end of the previous night and why are the averages so high so variable these are the ones that have hardly any data there are hardly any flights leave after midnight so these averages are kind of suspicious we're not really seeing much of a pattern we're just seeing individual flights that were delayed a really long time from the previous day so we might want to, so one we could show then the visualization is to make the points proportional to the number of observations or we could filter it and add some other stuff there's no schedule flights exactly there's no schedule flights yeah so there's some kind of interesting pattern going on here I don't really understand if it's possible it's an artifact but it looks like it added these white lines on every hour but it looks like there's some kind of pattern where they start off delays kind of accumulate over the course of the day but there's also some weird pattern within the hour where they accumulate and then they drop back a little which I don't know what's going on but certainly the suggestion is if you want to leave on time fly early in the day or late in the hour or late in the hour any questions about those pipelines in general or how you can combine these pieces with a pipe operator? range is generally what the advantage is to chaining versus having a ton of parentheses inside but the sole example is that it makes it easier for you to read and understand what's going on does any advantage just having it line by line no basically no save a little bit of memory but it's not yep so yeah in all the versions of D player used percent dot percent now I prefer percent greater than percent for two reasons first of all it's easy to type because you can hold your finger on the shift button the whole time and secondly I think it's not a symmetric operation so having an asymmetric operator helps you understand what's going on, the data is flowing from left to right any other questions? is there a particular preferred order? no obviously the less data you have to work with the faster things are going to be so that generally suggests you should filter early on and you know so if you use a database, a database looks at the sequence of all the operations and says oh you did this filter at the end but it would actually be way more efficient to do that at the beginning, D player doesn't do anything like that D player executes it exactly as you give it so if you can think of a faster way to order the operations it might be worthwhile to do so generally and I'm not really going to talk about performance today but generally if you've got million like less than 10 million observations you won't even have to worry about the performance it's going to be a few seconds and it's not like it's a waste of time worrying about it because it's not going to take you that long ok, the next thing I'm going to talk about is a great thing music music music", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.44, "text": " Okay, I've been given a knob, so let's get started and it sounds like I've cut out already", "tokens": [50364, 1033, 11, 286, 600, 668, 2212, 257, 26759, 11, 370, 718, 311, 483, 1409, 293, 309, 3263, 411, 286, 600, 1723, 484, 1217, 51136], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 1, "seek": 0, "start": 15.44, "end": 17.240000000000002, "text": " so let's just abandon this.", "tokens": [51136, 370, 718, 311, 445, 9072, 341, 13, 51226], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 2, "seek": 0, "start": 17.240000000000002, "end": 18.92, "text": " Can you hear me okay at the back?", "tokens": [51226, 1664, 291, 1568, 385, 1392, 412, 264, 646, 30, 51310], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 3, "seek": 0, "start": 18.92, "end": 19.92, "text": " Yeah.", "tokens": [51310, 865, 13, 51360], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 4, "seek": 0, "start": 19.92, "end": 20.92, "text": " Is that okay?", "tokens": [51360, 1119, 300, 1392, 30, 51410], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 5, "seek": 0, "start": 20.92, "end": 21.92, "text": " Great.", "tokens": [51410, 3769, 13, 51460], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 6, "seek": 0, "start": 21.92, "end": 27.16, "text": " So, today, hopefully, you're here to learn about D-Player and to give you a little bit", "tokens": [51460, 407, 11, 965, 11, 4696, 11, 291, 434, 510, 281, 1466, 466, 413, 12, 24262, 260, 293, 281, 976, 291, 257, 707, 857, 51722], "temperature": 0.0, "avg_logprob": -0.3798150794450627, "compression_ratio": 1.4224598930481283, "no_speech_prob": 0.37391480803489685}, {"id": 7, "seek": 2716, "start": 27.16, "end": 32.36, "text": " of context, I'm interested in data manipulation in the context of data analysis, so you've", "tokens": [50364, 295, 4319, 11, 286, 478, 3102, 294, 1412, 26475, 294, 264, 4319, 295, 1412, 5215, 11, 370, 291, 600, 50624], "temperature": 0.0, "avg_logprob": -0.19644832611083984, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.024122636765241623}, {"id": 8, "seek": 2716, "start": 32.36, "end": 39.16, "text": " got raw data coming in one side, understanding knowledge and insight coming out the other.", "tokens": [50624, 658, 8936, 1412, 1348, 294, 472, 1252, 11, 3701, 3601, 293, 11269, 1348, 484, 264, 661, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19644832611083984, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.024122636765241623}, {"id": 9, "seek": 2716, "start": 39.16, "end": 44.8, "text": " And today we're going to be focusing on data manipulation, but I see this really as being", "tokens": [50964, 400, 965, 321, 434, 516, 281, 312, 8416, 322, 1412, 26475, 11, 457, 286, 536, 341, 534, 382, 885, 51246], "temperature": 0.0, "avg_logprob": -0.19644832611083984, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.024122636765241623}, {"id": 10, "seek": 2716, "start": 44.8, "end": 49.879999999999995, "text": " part of the cycle of other data analysis or data science tools.", "tokens": [51246, 644, 295, 264, 6586, 295, 661, 1412, 5215, 420, 1412, 3497, 3873, 13, 51500], "temperature": 0.0, "avg_logprob": -0.19644832611083984, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.024122636765241623}, {"id": 11, "seek": 2716, "start": 49.879999999999995, "end": 54.08, "text": " So to me, there's really four main tools for data science.", "tokens": [51500, 407, 281, 385, 11, 456, 311, 534, 1451, 2135, 3873, 337, 1412, 3497, 13, 51710], "temperature": 0.0, "avg_logprob": -0.19644832611083984, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.024122636765241623}, {"id": 12, "seek": 5408, "start": 54.08, "end": 58.879999999999995, "text": " So the first is data tidying, getting your data into a form that's actually suitable", "tokens": [50364, 407, 264, 700, 307, 1412, 9422, 1840, 11, 1242, 428, 1412, 666, 257, 1254, 300, 311, 767, 12873, 50604], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 13, "seek": 5408, "start": 58.879999999999995, "end": 59.879999999999995, "text": " for analysis.", "tokens": [50604, 337, 5215, 13, 50654], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 14, "seek": 5408, "start": 59.879999999999995, "end": 65.03999999999999, "text": " Now, in this diagram, I've drawn this little short arrow, but as many of you have actually", "tokens": [50654, 823, 11, 294, 341, 10686, 11, 286, 600, 10117, 341, 707, 2099, 11610, 11, 457, 382, 867, 295, 291, 362, 767, 50912], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 15, "seek": 5408, "start": 65.03999999999999, "end": 69.52, "text": " worked with real data, you know, often the arrow is all the way around on the other", "tokens": [50912, 2732, 365, 957, 1412, 11, 291, 458, 11, 2049, 264, 11610, 307, 439, 264, 636, 926, 322, 264, 661, 51136], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 16, "seek": 5408, "start": 69.52, "end": 70.52, "text": " side of the room.", "tokens": [51136, 1252, 295, 264, 1808, 13, 51186], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 17, "seek": 5408, "start": 70.52, "end": 75.6, "text": " So often, one of the most challenging parts of doing a data analysis is just getting the", "tokens": [51186, 407, 2049, 11, 472, 295, 264, 881, 7595, 3166, 295, 884, 257, 1412, 5215, 307, 445, 1242, 264, 51440], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 18, "seek": 5408, "start": 75.6, "end": 80.72, "text": " data in the right form that you can work with it.", "tokens": [51440, 1412, 294, 264, 558, 1254, 300, 291, 393, 589, 365, 309, 13, 51696], "temperature": 0.0, "avg_logprob": -0.15250199181692942, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0014306743396446109}, {"id": 19, "seek": 8072, "start": 80.72, "end": 85.4, "text": " Now once you've done that, you'll often do some basic manipulation, data transformation.", "tokens": [50364, 823, 1564, 291, 600, 1096, 300, 11, 291, 603, 2049, 360, 512, 3875, 26475, 11, 1412, 9887, 13, 50598], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 20, "seek": 8072, "start": 85.4, "end": 88.88, "text": " You'll create new variables that are functions of existing variables.", "tokens": [50598, 509, 603, 1884, 777, 9102, 300, 366, 6828, 295, 6741, 9102, 13, 50772], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 21, "seek": 8072, "start": 88.88, "end": 92.8, "text": " You might do a little bit of aggregation and so on, and that's mostly what we're going", "tokens": [50772, 509, 1062, 360, 257, 707, 857, 295, 16743, 399, 293, 370, 322, 11, 293, 300, 311, 5240, 437, 321, 434, 516, 50968], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 22, "seek": 8072, "start": 92.8, "end": 94.16, "text": " to be talking about today.", "tokens": [50968, 281, 312, 1417, 466, 965, 13, 51036], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 23, "seek": 8072, "start": 94.16, "end": 99.92, "text": " But it's also important to bear in mind that you're doing this to fit into a cycle.", "tokens": [51036, 583, 309, 311, 611, 1021, 281, 6155, 294, 1575, 300, 291, 434, 884, 341, 281, 3318, 666, 257, 6586, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 24, "seek": 8072, "start": 99.92, "end": 103.4, "text": " You want your tools to easily plug into the other.", "tokens": [51324, 509, 528, 428, 3873, 281, 3612, 5452, 666, 264, 661, 13, 51498], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 25, "seek": 8072, "start": 103.4, "end": 109.0, "text": " You want your manipulation tools to easily plug into your data visualization and modeling", "tokens": [51498, 509, 528, 428, 26475, 3873, 281, 3612, 5452, 666, 428, 1412, 25801, 293, 15983, 51778], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 26, "seek": 8072, "start": 109.0, "end": 110.16, "text": " tools.", "tokens": [51778, 3873, 13, 51836], "temperature": 0.0, "avg_logprob": -0.1559735282522733, "compression_ratio": 1.8529411764705883, "no_speech_prob": 0.01795487105846405}, {"id": 27, "seek": 11016, "start": 110.16, "end": 114.28, "text": " The visualizations are great because they uncover the unexpected.", "tokens": [50364, 440, 5056, 14455, 366, 869, 570, 436, 21694, 264, 13106, 13, 50570], "temperature": 0.0, "avg_logprob": -0.16237287521362304, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.007731954101473093}, {"id": 28, "seek": 11016, "start": 114.28, "end": 119.03999999999999, "text": " They help you make precise your questions about the data, but the problem with visualizations", "tokens": [50570, 814, 854, 291, 652, 13600, 428, 1651, 466, 264, 1412, 11, 457, 264, 1154, 365, 5056, 14455, 50808], "temperature": 0.0, "avg_logprob": -0.16237287521362304, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.007731954101473093}, {"id": 29, "seek": 11016, "start": 119.03999999999999, "end": 121.32, "text": " is that they fundamentally don't scale.", "tokens": [50808, 307, 300, 436, 17879, 500, 380, 4373, 13, 50922], "temperature": 0.0, "avg_logprob": -0.16237287521362304, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.007731954101473093}, {"id": 30, "seek": 11016, "start": 121.32, "end": 126.28, "text": " On the other hand, the kind of complementary tools, statistical models, machine learning,", "tokens": [50922, 1282, 264, 661, 1011, 11, 264, 733, 295, 40705, 3873, 11, 22820, 5245, 11, 3479, 2539, 11, 51170], "temperature": 0.0, "avg_logprob": -0.16237287521362304, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.007731954101473093}, {"id": 31, "seek": 11016, "start": 126.28, "end": 130.6, "text": " data mining, basically whenever you've made a question sufficiently precise that you", "tokens": [51170, 1412, 15512, 11, 1936, 5699, 291, 600, 1027, 257, 1168, 31868, 13600, 300, 291, 51386], "temperature": 0.0, "avg_logprob": -0.16237287521362304, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.007731954101473093}, {"id": 32, "seek": 11016, "start": 130.6, "end": 135.76, "text": " can answer it with a handful of summary statistics or an algorithm, you've got a model.", "tokens": [51386, 393, 1867, 309, 365, 257, 16458, 295, 12691, 12523, 420, 364, 9284, 11, 291, 600, 658, 257, 2316, 13, 51644], "temperature": 0.0, "avg_logprob": -0.16237287521362304, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.007731954101473093}, {"id": 33, "seek": 13576, "start": 135.76, "end": 141.04, "text": " Tools are great because they scale, but they don't fundamentally surprise your linear models", "tokens": [50364, 30302, 366, 869, 570, 436, 4373, 11, 457, 436, 500, 380, 17879, 6365, 428, 8213, 5245, 50628], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 34, "seek": 13576, "start": 141.04, "end": 143.88, "text": " and they're going to tell you your data is nonlinear.", "tokens": [50628, 293, 436, 434, 516, 281, 980, 291, 428, 1412, 307, 2107, 28263, 13, 50770], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 35, "seek": 13576, "start": 143.88, "end": 149.48, "text": " So any real data analysis, you're going to be circling between these tools multiple times.", "tokens": [50770, 407, 604, 957, 1412, 5215, 11, 291, 434, 516, 281, 312, 3510, 1688, 1296, 613, 3873, 3866, 1413, 13, 51050], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 36, "seek": 13576, "start": 149.48, "end": 151.84, "text": " You might start by looking at a plot.", "tokens": [51050, 509, 1062, 722, 538, 1237, 412, 257, 7542, 13, 51168], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 37, "seek": 13576, "start": 151.84, "end": 154.04, "text": " Based on that plot, you develop a model.", "tokens": [51168, 18785, 322, 300, 7542, 11, 291, 1499, 257, 2316, 13, 51278], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 38, "seek": 13576, "start": 154.04, "end": 156.56, "text": " You then take some predictions from that model.", "tokens": [51278, 509, 550, 747, 512, 21264, 490, 300, 2316, 13, 51404], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 39, "seek": 13576, "start": 156.56, "end": 159.6, "text": " You transform your data to look at the residuals.", "tokens": [51404, 509, 4088, 428, 1412, 281, 574, 412, 264, 27980, 82, 13, 51556], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 40, "seek": 13576, "start": 159.6, "end": 162.04, "text": " You visualize those and so on and so on.", "tokens": [51556, 509, 23273, 729, 293, 370, 322, 293, 370, 322, 13, 51678], "temperature": 0.0, "avg_logprob": -0.18175546397333558, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.039569005370140076}, {"id": 41, "seek": 16204, "start": 162.04, "end": 166.23999999999998, "text": " So while today we're going to be focusing on data manipulation, data transformation,", "tokens": [50364, 407, 1339, 965, 321, 434, 516, 281, 312, 8416, 322, 1412, 26475, 11, 1412, 9887, 11, 50574], "temperature": 0.0, "avg_logprob": -0.15750629733307192, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.00021284747344907373}, {"id": 42, "seek": 16204, "start": 166.23999999999998, "end": 173.48, "text": " the goal is to have tools that embed seamlessly into your data analysis process.", "tokens": [50574, 264, 3387, 307, 281, 362, 3873, 300, 12240, 38083, 666, 428, 1412, 5215, 1399, 13, 50936], "temperature": 0.0, "avg_logprob": -0.15750629733307192, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.00021284747344907373}, {"id": 43, "seek": 16204, "start": 173.48, "end": 180.56, "text": " And so the family of tools that I've been working on and others at RStudio are working", "tokens": [50936, 400, 370, 264, 1605, 295, 3873, 300, 286, 600, 668, 1364, 322, 293, 2357, 412, 497, 42665, 1004, 366, 1364, 51290], "temperature": 0.0, "avg_logprob": -0.15750629733307192, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.00021284747344907373}, {"id": 44, "seek": 16204, "start": 180.56, "end": 186.88, "text": " on have recently sort of undergone somewhat of a change and if you're interested in hearing", "tokens": [51290, 322, 362, 3938, 1333, 295, 833, 39743, 8344, 295, 257, 1319, 293, 498, 291, 434, 3102, 294, 4763, 51606], "temperature": 0.0, "avg_logprob": -0.15750629733307192, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.00021284747344907373}, {"id": 45, "seek": 16204, "start": 186.88, "end": 190.79999999999998, "text": " more about that, I'm going to be talking about that in my talk on Tuesday.", "tokens": [51606, 544, 466, 300, 11, 286, 478, 516, 281, 312, 1417, 466, 300, 294, 452, 751, 322, 10017, 13, 51802], "temperature": 0.0, "avg_logprob": -0.15750629733307192, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.00021284747344907373}, {"id": 46, "seek": 19080, "start": 190.8, "end": 197.0, "text": " So basically, for data tidying, now the tidier package, which is kind of another update of", "tokens": [50364, 407, 1936, 11, 337, 1412, 9422, 1840, 11, 586, 264, 9422, 811, 7372, 11, 597, 307, 733, 295, 1071, 5623, 295, 50674], "temperature": 0.0, "avg_logprob": -0.2118814692777746, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0024676835164427757}, {"id": 47, "seek": 19080, "start": 197.0, "end": 203.12, "text": " reshape and then reshape2 and now tidier, pliers become de-plier and ggplot is in the", "tokens": [50674, 725, 42406, 293, 550, 725, 42406, 17, 293, 586, 9422, 811, 11, 33982, 1813, 368, 12, 564, 811, 293, 290, 70, 564, 310, 307, 294, 264, 50980], "temperature": 0.0, "avg_logprob": -0.2118814692777746, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0024676835164427757}, {"id": 48, "seek": 19080, "start": 203.12, "end": 206.04000000000002, "text": " process of turning into ggplot2.", "tokens": [50980, 1399, 295, 6246, 666, 290, 70, 564, 310, 17, 13, 51126], "temperature": 0.0, "avg_logprob": -0.2118814692777746, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0024676835164427757}, {"id": 49, "seek": 19080, "start": 206.04000000000002, "end": 212.60000000000002, "text": " And as you'll see today, there are some kind of very important commonalities that underlie", "tokens": [51126, 400, 382, 291, 603, 536, 965, 11, 456, 366, 512, 733, 295, 588, 1021, 2689, 16110, 300, 833, 6302, 51454], "temperature": 0.0, "avg_logprob": -0.2118814692777746, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0024676835164427757}, {"id": 50, "seek": 19080, "start": 212.60000000000002, "end": 217.72000000000003, "text": " all of these tools that make it easy for you to use them.", "tokens": [51454, 439, 295, 613, 3873, 300, 652, 309, 1858, 337, 291, 281, 764, 552, 13, 51710], "temperature": 0.0, "avg_logprob": -0.2118814692777746, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0024676835164427757}, {"id": 51, "seek": 21772, "start": 217.72, "end": 219.8, "text": " So today we're going to talk about data manipulation.", "tokens": [50364, 407, 965, 321, 434, 516, 281, 751, 466, 1412, 26475, 13, 50468], "temperature": 0.0, "avg_logprob": -0.16096868969145275, "compression_ratio": 1.7710843373493976, "no_speech_prob": 0.02051350846886635}, {"id": 52, "seek": 21772, "start": 219.8, "end": 224.56, "text": " We'll start with a little intro to the data we're going to be using, then talk about single", "tokens": [50468, 492, 603, 722, 365, 257, 707, 12897, 281, 264, 1412, 321, 434, 516, 281, 312, 1228, 11, 550, 751, 466, 2167, 50706], "temperature": 0.0, "avg_logprob": -0.16096868969145275, "compression_ratio": 1.7710843373493976, "no_speech_prob": 0.02051350846886635}, {"id": 53, "seek": 21772, "start": 224.56, "end": 231.52, "text": " table verbs, a little bit about data pipelines, some more complicated types of filtering and", "tokens": [50706, 3199, 30051, 11, 257, 707, 857, 466, 1412, 40168, 11, 512, 544, 6179, 3467, 295, 30822, 293, 51054], "temperature": 0.0, "avg_logprob": -0.16096868969145275, "compression_ratio": 1.7710843373493976, "no_speech_prob": 0.02051350846886635}, {"id": 54, "seek": 21772, "start": 231.52, "end": 239.32, "text": " grouping, joins, a very general do operator and then I'm just going to talk very briefly", "tokens": [51054, 40149, 11, 24397, 11, 257, 588, 2674, 360, 12973, 293, 550, 286, 478, 445, 516, 281, 751, 588, 10515, 51444], "temperature": 0.0, "avg_logprob": -0.16096868969145275, "compression_ratio": 1.7710843373493976, "no_speech_prob": 0.02051350846886635}, {"id": 55, "seek": 21772, "start": 239.32, "end": 244.24, "text": " at the end about how all the tools you've learned today working with data frames also", "tokens": [51444, 412, 264, 917, 466, 577, 439, 264, 3873, 291, 600, 3264, 965, 1364, 365, 1412, 12083, 611, 51690], "temperature": 0.0, "avg_logprob": -0.16096868969145275, "compression_ratio": 1.7710843373493976, "no_speech_prob": 0.02051350846886635}, {"id": 56, "seek": 21772, "start": 244.24, "end": 247.48, "text": " apply to databases as well.", "tokens": [51690, 3079, 281, 22380, 382, 731, 13, 51852], "temperature": 0.0, "avg_logprob": -0.16096868969145275, "compression_ratio": 1.7710843373493976, "no_speech_prob": 0.02051350846886635}, {"id": 57, "seek": 24748, "start": 247.48, "end": 254.35999999999999, "text": " But before we begin, I kind of want to start with the caveat and then the bad news is whenever", "tokens": [50364, 583, 949, 321, 1841, 11, 286, 733, 295, 528, 281, 722, 365, 264, 43012, 293, 550, 264, 1578, 2583, 307, 5699, 50708], "temperature": 0.0, "avg_logprob": -0.22266810702294418, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.0034108487889170647}, {"id": 58, "seek": 24748, "start": 254.35999999999999, "end": 258.03999999999996, "text": " you're learning a new tool for a long time, you're going to suck.", "tokens": [50708, 291, 434, 2539, 257, 777, 2290, 337, 257, 938, 565, 11, 291, 434, 516, 281, 9967, 13, 50892], "temperature": 0.0, "avg_logprob": -0.22266810702294418, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.0034108487889170647}, {"id": 59, "seek": 24748, "start": 258.03999999999996, "end": 264.64, "text": " It's going to be very frustrating, but the good news is that that is typical, it's something", "tokens": [50892, 467, 311, 516, 281, 312, 588, 16522, 11, 457, 264, 665, 2583, 307, 300, 300, 307, 7476, 11, 309, 311, 746, 51222], "temperature": 0.0, "avg_logprob": -0.22266810702294418, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.0034108487889170647}, {"id": 60, "seek": 24748, "start": 264.64, "end": 268.2, "text": " that happens to everyone and it's only temporary.", "tokens": [51222, 300, 2314, 281, 1518, 293, 309, 311, 787, 13413, 13, 51400], "temperature": 0.0, "avg_logprob": -0.22266810702294418, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.0034108487889170647}, {"id": 61, "seek": 24748, "start": 268.2, "end": 274.36, "text": " Unfortunately, there is no way to going from knowing nothing about a subject to knowing", "tokens": [51400, 8590, 11, 456, 307, 572, 636, 281, 516, 490, 5276, 1825, 466, 257, 3983, 281, 5276, 51708], "temperature": 0.0, "avg_logprob": -0.22266810702294418, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.0034108487889170647}, {"id": 62, "seek": 27436, "start": 274.36, "end": 280.0, "text": " something about a subject and being an expert in it without going through a period of great", "tokens": [50364, 746, 466, 257, 3983, 293, 885, 364, 5844, 294, 309, 1553, 516, 807, 257, 2896, 295, 869, 50646], "temperature": 0.0, "avg_logprob": -0.19995601051732115, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.022880297154188156}, {"id": 63, "seek": 27436, "start": 280.0, "end": 282.88, "text": " frustration and much suckiness.", "tokens": [50646, 20491, 293, 709, 9967, 1324, 13, 50790], "temperature": 0.0, "avg_logprob": -0.19995601051732115, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.022880297154188156}, {"id": 64, "seek": 27436, "start": 282.88, "end": 286.0, "text": " But remember, when you're getting frustrated, that's a good thing.", "tokens": [50790, 583, 1604, 11, 562, 291, 434, 1242, 15751, 11, 300, 311, 257, 665, 551, 13, 50946], "temperature": 0.0, "avg_logprob": -0.19995601051732115, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.022880297154188156}, {"id": 65, "seek": 27436, "start": 286.0, "end": 292.08000000000004, "text": " That's typical, it's temporary, keep pushing through and in time will become second nature.", "tokens": [50946, 663, 311, 7476, 11, 309, 311, 13413, 11, 1066, 7380, 807, 293, 294, 565, 486, 1813, 1150, 3687, 13, 51250], "temperature": 0.0, "avg_logprob": -0.19995601051732115, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.022880297154188156}, {"id": 66, "seek": 27436, "start": 292.08000000000004, "end": 295.28000000000003, "text": " Okay, with that said, let's get started.", "tokens": [51250, 1033, 11, 365, 300, 848, 11, 718, 311, 483, 1409, 13, 51410], "temperature": 0.0, "avg_logprob": -0.19995601051732115, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.022880297154188156}, {"id": 67, "seek": 27436, "start": 295.28000000000003, "end": 300.0, "text": " We're going to be looking at four interrelated datasets today.", "tokens": [51410, 492, 434, 516, 281, 312, 1237, 412, 1451, 728, 12004, 42856, 965, 13, 51646], "temperature": 0.0, "avg_logprob": -0.19995601051732115, "compression_ratio": 1.5819672131147542, "no_speech_prob": 0.022880297154188156}, {"id": 68, "seek": 30000, "start": 300.0, "end": 304.84, "text": " I have given you them in a RStudio project.", "tokens": [50364, 286, 362, 2212, 291, 552, 294, 257, 497, 42665, 1004, 1716, 13, 50606], "temperature": 0.0, "avg_logprob": -0.16262471422236016, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.2382332682609558}, {"id": 69, "seek": 30000, "start": 304.84, "end": 311.0, "text": " So if you have downloaded the code and data, you can double click on this R approach file.", "tokens": [50606, 407, 498, 291, 362, 21748, 264, 3089, 293, 1412, 11, 291, 393, 3834, 2052, 322, 341, 497, 3109, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16262471422236016, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.2382332682609558}, {"id": 70, "seek": 30000, "start": 311.0, "end": 319.0, "text": " If you're not using RStudio, my apologies, but you can just change your working directory", "tokens": [50914, 759, 291, 434, 406, 1228, 497, 42665, 1004, 11, 452, 34929, 11, 457, 291, 393, 445, 1319, 428, 1364, 21120, 51314], "temperature": 0.0, "avg_logprob": -0.16262471422236016, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.2382332682609558}, {"id": 71, "seek": 30000, "start": 319.0, "end": 321.68, "text": " and I'll assume you'll be okay with that.", "tokens": [51314, 293, 286, 603, 6552, 291, 603, 312, 1392, 365, 300, 13, 51448], "temperature": 0.0, "avg_logprob": -0.16262471422236016, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.2382332682609558}, {"id": 72, "seek": 30000, "start": 321.68, "end": 327.08, "text": " So in this directory, we've got the scripts, which mostly correspond to what we're going", "tokens": [51448, 407, 294, 341, 21120, 11, 321, 600, 658, 264, 23294, 11, 597, 5240, 6805, 281, 437, 321, 434, 516, 51718], "temperature": 0.0, "avg_logprob": -0.16262471422236016, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.2382332682609558}, {"id": 73, "seek": 32708, "start": 327.08, "end": 331.12, "text": " to be working through today, and then we have got four datasets.", "tokens": [50364, 281, 312, 1364, 807, 965, 11, 293, 550, 321, 362, 658, 1451, 42856, 13, 50566], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 74, "seek": 32708, "start": 331.12, "end": 342.64, "text": " I wanted to start briefly with a couple of hints about using ... I'm not going to do", "tokens": [50566, 286, 1415, 281, 722, 10515, 365, 257, 1916, 295, 27271, 466, 1228, 1097, 286, 478, 406, 516, 281, 360, 51142], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 75, "seek": 32708, "start": 342.64, "end": 343.64, "text": " that.", "tokens": [51142, 300, 13, 51192], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 76, "seek": 32708, "start": 343.64, "end": 344.84, "text": " Okay, I'm going to tell you about the data.", "tokens": [51192, 1033, 11, 286, 478, 516, 281, 980, 291, 466, 264, 1412, 13, 51252], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 77, "seek": 32708, "start": 344.84, "end": 346.68, "text": " So we've got these four datasets.", "tokens": [51252, 407, 321, 600, 658, 613, 1451, 42856, 13, 51344], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 78, "seek": 32708, "start": 346.68, "end": 348.84, "text": " The first one is the main one we're going to be looking at.", "tokens": [51344, 440, 700, 472, 307, 264, 2135, 472, 321, 434, 516, 281, 312, 1237, 412, 13, 51452], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 79, "seek": 32708, "start": 348.84, "end": 354.32, "text": " This is not a huge dataset, but it's recently sized, about 200,000 observations.", "tokens": [51452, 639, 307, 406, 257, 2603, 28872, 11, 457, 309, 311, 3938, 20004, 11, 466, 2331, 11, 1360, 18163, 13, 51726], "temperature": 0.0, "avg_logprob": -0.18565871829078312, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.10337148606777191}, {"id": 80, "seek": 35432, "start": 354.32, "end": 361.24, "text": " This is every flight that departed from Houston in 2011, and then we have got three datasets", "tokens": [50364, 639, 307, 633, 7018, 300, 47018, 490, 18717, 294, 10154, 11, 293, 550, 321, 362, 658, 1045, 42856, 50710], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 81, "seek": 35432, "start": 361.24, "end": 365.8, "text": " that we can join with this dataset that provide useful additional metadata.", "tokens": [50710, 300, 321, 393, 3917, 365, 341, 28872, 300, 2893, 4420, 4497, 26603, 13, 50938], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 82, "seek": 35432, "start": 365.8, "end": 369.76, "text": " So we have some data about the weather for each hour.", "tokens": [50938, 407, 321, 362, 512, 1412, 466, 264, 5503, 337, 1184, 1773, 13, 51136], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 83, "seek": 35432, "start": 369.76, "end": 374.92, "text": " As you can imagine, if we're looking at flight data, you might be interested in what causes", "tokens": [51136, 1018, 291, 393, 3811, 11, 498, 321, 434, 1237, 412, 7018, 1412, 11, 291, 1062, 312, 3102, 294, 437, 7700, 51394], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 84, "seek": 35432, "start": 374.92, "end": 375.92, "text": " flight delays.", "tokens": [51394, 7018, 28610, 13, 51444], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 85, "seek": 35432, "start": 375.92, "end": 379.32, "text": " The weather is obviously a cause of that.", "tokens": [51444, 440, 5503, 307, 2745, 257, 3082, 295, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 86, "seek": 35432, "start": 379.32, "end": 383.71999999999997, "text": " You might also be interested in, are there planes that are consistently delayed?", "tokens": [51614, 509, 1062, 611, 312, 3102, 294, 11, 366, 456, 14952, 300, 366, 14961, 20268, 30, 51834], "temperature": 0.0, "avg_logprob": -0.1440142235665951, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.04337163269519806}, {"id": 87, "seek": 38372, "start": 383.72, "end": 387.12, "text": " So we have some information about the planes that are flying these routes, when they're", "tokens": [50364, 407, 321, 362, 512, 1589, 466, 264, 14952, 300, 366, 7137, 613, 18242, 11, 562, 436, 434, 50534], "temperature": 0.0, "avg_logprob": -0.16607228031864874, "compression_ratio": 1.774891774891775, "no_speech_prob": 0.003582208650186658}, {"id": 88, "seek": 38372, "start": 387.12, "end": 391.36, "text": " built, what type of plane they are, how many people they see, and so on.", "tokens": [50534, 3094, 11, 437, 2010, 295, 5720, 436, 366, 11, 577, 867, 561, 436, 536, 11, 293, 370, 322, 13, 50746], "temperature": 0.0, "avg_logprob": -0.16607228031864874, "compression_ratio": 1.774891774891775, "no_speech_prob": 0.003582208650186658}, {"id": 89, "seek": 38372, "start": 391.36, "end": 395.40000000000003, "text": " And then we have some information about the airports that the flights are flying to, which", "tokens": [50746, 400, 550, 321, 362, 512, 1589, 466, 264, 36561, 300, 264, 21089, 366, 7137, 281, 11, 597, 50948], "temperature": 0.0, "avg_logprob": -0.16607228031864874, "compression_ratio": 1.774891774891775, "no_speech_prob": 0.003582208650186658}, {"id": 90, "seek": 38372, "start": 395.40000000000003, "end": 400.24, "text": " is mainly their location, so you can plot them on a map.", "tokens": [50948, 307, 8704, 641, 4914, 11, 370, 291, 393, 7542, 552, 322, 257, 4471, 13, 51190], "temperature": 0.0, "avg_logprob": -0.16607228031864874, "compression_ratio": 1.774891774891775, "no_speech_prob": 0.003582208650186658}, {"id": 91, "seek": 38372, "start": 400.24, "end": 405.52000000000004, "text": " Now to load this data in, I'm not going to talk to you about this code.", "tokens": [51190, 823, 281, 3677, 341, 1412, 294, 11, 286, 478, 406, 516, 281, 751, 281, 291, 466, 341, 3089, 13, 51454], "temperature": 0.0, "avg_logprob": -0.16607228031864874, "compression_ratio": 1.774891774891775, "no_speech_prob": 0.003582208650186658}, {"id": 92, "seek": 38372, "start": 405.52000000000004, "end": 411.0, "text": " It's there in the first file.", "tokens": [51454, 467, 311, 456, 294, 264, 700, 3991, 13, 51728], "temperature": 0.0, "avg_logprob": -0.16607228031864874, "compression_ratio": 1.774891774891775, "no_speech_prob": 0.003582208650186658}, {"id": 93, "seek": 41100, "start": 411.68, "end": 415.96, "text": " To get started, you're going to want to source that file in that it's going to create these", "tokens": [50398, 1407, 483, 1409, 11, 291, 434, 516, 281, 528, 281, 4009, 300, 3991, 294, 300, 309, 311, 516, 281, 1884, 613, 50612], "temperature": 0.0, "avg_logprob": -0.1942057913922249, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.052082546055316925}, {"id": 94, "seek": 41100, "start": 415.96, "end": 417.68, "text": " four datasets.", "tokens": [50612, 1451, 42856, 13, 50698], "temperature": 0.0, "avg_logprob": -0.1942057913922249, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.052082546055316925}, {"id": 95, "seek": 41100, "start": 417.68, "end": 424.32, "text": " The only thing that you might not have seen before is this tableDF function.", "tokens": [50698, 440, 787, 551, 300, 291, 1062, 406, 362, 1612, 949, 307, 341, 3199, 35, 37, 2445, 13, 51030], "temperature": 0.0, "avg_logprob": -0.1942057913922249, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.052082546055316925}, {"id": 96, "seek": 41100, "start": 424.32, "end": 431.08, "text": " What that is going to do, it's going to turn these data frames into dpliers tableDF objects,", "tokens": [51030, 708, 300, 307, 516, 281, 360, 11, 309, 311, 516, 281, 1261, 613, 1412, 12083, 666, 274, 564, 4890, 3199, 35, 37, 6565, 11, 51368], "temperature": 0.0, "avg_logprob": -0.1942057913922249, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.052082546055316925}, {"id": 97, "seek": 41100, "start": 431.08, "end": 438.36, "text": " which are almost identical in every single way to data frames, except when you print out", "tokens": [51368, 597, 366, 1920, 14800, 294, 633, 2167, 636, 281, 1412, 12083, 11, 3993, 562, 291, 4482, 484, 51732], "temperature": 0.0, "avg_logprob": -0.1942057913922249, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.052082546055316925}, {"id": 98, "seek": 43836, "start": 438.36, "end": 445.28000000000003, "text": " a tableDF, it does not print out 10,000 rows, it will only print out the first 10 rows.", "tokens": [50364, 257, 3199, 35, 37, 11, 309, 775, 406, 4482, 484, 1266, 11, 1360, 13241, 11, 309, 486, 787, 4482, 484, 264, 700, 1266, 13241, 13, 50710], "temperature": 0.0, "avg_logprob": -0.22876779465448288, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004934755619615316}, {"id": 99, "seek": 43836, "start": 445.28000000000003, "end": 449.2, "text": " So it gives you some summary information about what's going on in that dataset.", "tokens": [50710, 407, 309, 2709, 291, 512, 12691, 1589, 466, 437, 311, 516, 322, 294, 300, 28872, 13, 50906], "temperature": 0.0, "avg_logprob": -0.22876779465448288, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004934755619615316}, {"id": 100, "seek": 43836, "start": 449.2, "end": 451.8, "text": " It prints all the variables that fit in one screen.", "tokens": [50906, 467, 22305, 439, 264, 9102, 300, 3318, 294, 472, 2568, 13, 51036], "temperature": 0.0, "avg_logprob": -0.22876779465448288, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004934755619615316}, {"id": 101, "seek": 43836, "start": 451.8, "end": 457.96000000000004, "text": " It might make us a little wider.", "tokens": [51036, 467, 1062, 652, 505, 257, 707, 11842, 13, 51344], "temperature": 0.0, "avg_logprob": -0.22876779465448288, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004934755619615316}, {"id": 102, "seek": 43836, "start": 457.96000000000004, "end": 462.28000000000003, "text": " And if they don't fit on the screen, it just gives you a little summary, the names of the", "tokens": [51344, 400, 498, 436, 500, 380, 3318, 322, 264, 2568, 11, 309, 445, 2709, 291, 257, 707, 12691, 11, 264, 5288, 295, 264, 51560], "temperature": 0.0, "avg_logprob": -0.22876779465448288, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004934755619615316}, {"id": 103, "seek": 43836, "start": 462.28000000000003, "end": 465.08000000000004, "text": " variables and what type of variable they have.", "tokens": [51560, 9102, 293, 437, 2010, 295, 7006, 436, 362, 13, 51700], "temperature": 0.0, "avg_logprob": -0.22876779465448288, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004934755619615316}, {"id": 104, "seek": 46508, "start": 466.08, "end": 475.4, "text": " It's identical in every way to a data frame, except when you look at the class, it is one,", "tokens": [50414, 467, 311, 14800, 294, 633, 636, 281, 257, 1412, 3920, 11, 3993, 562, 291, 574, 412, 264, 1508, 11, 309, 307, 472, 11, 50880], "temperature": 0.0, "avg_logprob": -0.2799151860750638, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0006021569133736193}, {"id": 105, "seek": 46508, "start": 475.4, "end": 477.12, "text": " well, two additional things.", "tokens": [50880, 731, 11, 732, 4497, 721, 13, 50966], "temperature": 0.0, "avg_logprob": -0.2799151860750638, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0006021569133736193}, {"id": 106, "seek": 46508, "start": 477.12, "end": 482.12, "text": " If a package doesn't know about dpliers, it would just treat it exactly like a data frame.", "tokens": [50966, 759, 257, 7372, 1177, 380, 458, 466, 274, 564, 4890, 11, 309, 576, 445, 2387, 309, 2293, 411, 257, 1412, 3920, 13, 51216], "temperature": 0.0, "avg_logprob": -0.2799151860750638, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0006021569133736193}, {"id": 107, "seek": 46508, "start": 482.12, "end": 486.28, "text": " In fact, it is a data frame, it's just a special type of data frame.", "tokens": [51216, 682, 1186, 11, 309, 307, 257, 1412, 3920, 11, 309, 311, 445, 257, 2121, 2010, 295, 1412, 3920, 13, 51424], "temperature": 0.0, "avg_logprob": -0.2799151860750638, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0006021569133736193}, {"id": 108, "seek": 46508, "start": 486.28, "end": 493.32, "text": " So we've got flights data, about 200,000 observations, weather, which is about 8,000.", "tokens": [51424, 407, 321, 600, 658, 21089, 1412, 11, 466, 2331, 11, 1360, 18163, 11, 5503, 11, 597, 307, 466, 1649, 11, 1360, 13, 51776], "temperature": 0.0, "avg_logprob": -0.2799151860750638, "compression_ratio": 1.6008771929824561, "no_speech_prob": 0.0006021569133736193}, {"id": 109, "seek": 49332, "start": 493.32, "end": 499.08, "text": " These planes, about 3,000, and then about 3,000 airports.", "tokens": [50364, 1981, 14952, 11, 466, 805, 11, 1360, 11, 293, 550, 466, 805, 11, 1360, 36561, 13, 50652], "temperature": 0.0, "avg_logprob": -0.24661458924759266, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.08358751237392426}, {"id": 110, "seek": 49332, "start": 499.08, "end": 505.24, "text": " Okay, now that you've introduced yourselves and hopefully have some questions to ask about", "tokens": [50652, 1033, 11, 586, 300, 291, 600, 7268, 14791, 293, 4696, 362, 512, 1651, 281, 1029, 466, 50960], "temperature": 0.0, "avg_logprob": -0.24661458924759266, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.08358751237392426}, {"id": 111, "seek": 49332, "start": 505.24, "end": 511.2, "text": " the data, we're going to dive in and learn the first five important verbs associated", "tokens": [50960, 264, 1412, 11, 321, 434, 516, 281, 9192, 294, 293, 1466, 264, 700, 1732, 1021, 30051, 6615, 51258], "temperature": 0.0, "avg_logprob": -0.24661458924759266, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.08358751237392426}, {"id": 112, "seek": 49332, "start": 511.2, "end": 512.48, "text": " with dpliers.", "tokens": [51258, 365, 274, 564, 4890, 13, 51322], "temperature": 0.0, "avg_logprob": -0.24661458924759266, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.08358751237392426}, {"id": 113, "seek": 49332, "start": 512.48, "end": 517.36, "text": " So my kind of contention is if you know these five verbs and combine them with another tool,", "tokens": [51322, 407, 452, 733, 295, 660, 1251, 307, 498, 291, 458, 613, 1732, 30051, 293, 10432, 552, 365, 1071, 2290, 11, 51566], "temperature": 0.0, "avg_logprob": -0.24661458924759266, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.08358751237392426}, {"id": 114, "seek": 51736, "start": 517.4, "end": 523.72, "text": " we'll learn about shortly, this will solve 90% say of your data manipulation problems.", "tokens": [50366, 321, 603, 1466, 466, 13392, 11, 341, 486, 5039, 4289, 4, 584, 295, 428, 1412, 26475, 2740, 13, 50682], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 115, "seek": 51736, "start": 523.72, "end": 528.48, "text": " And that's really important because now when you have a data manipulation problem, instead", "tokens": [50682, 400, 300, 311, 534, 1021, 570, 586, 562, 291, 362, 257, 1412, 26475, 1154, 11, 2602, 50920], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 116, "seek": 51736, "start": 528.48, "end": 533.08, "text": " of thinking, well, there's like 1,000 functions and base R, which one of those is the one", "tokens": [50920, 295, 1953, 11, 731, 11, 456, 311, 411, 502, 11, 1360, 6828, 293, 3096, 497, 11, 597, 472, 295, 729, 307, 264, 472, 51150], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 117, "seek": 51736, "start": 533.08, "end": 534.08, "text": " I need.", "tokens": [51150, 286, 643, 13, 51200], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 118, "seek": 51736, "start": 534.08, "end": 537.0, "text": " Now you just need to look through these five verbs.", "tokens": [51200, 823, 291, 445, 643, 281, 574, 807, 613, 1732, 30051, 13, 51346], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 119, "seek": 51736, "start": 537.0, "end": 542.6, "text": " So the first verb is filter, where you're going to select rows based on the values of", "tokens": [51346, 407, 264, 700, 9595, 307, 6608, 11, 689, 291, 434, 516, 281, 3048, 13241, 2361, 322, 264, 4190, 295, 51626], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 120, "seek": 51736, "start": 542.6, "end": 544.96, "text": " their variables.", "tokens": [51626, 641, 9102, 13, 51744], "temperature": 0.0, "avg_logprob": -0.17960870375327015, "compression_ratio": 1.6104868913857677, "no_speech_prob": 0.013161211274564266}, {"id": 121, "seek": 54496, "start": 544.96, "end": 551.36, "text": " You might also want to just focus on a certain number of columns or variables that select.", "tokens": [50364, 509, 1062, 611, 528, 281, 445, 1879, 322, 257, 1629, 1230, 295, 13766, 420, 9102, 300, 3048, 13, 50684], "temperature": 0.0, "avg_logprob": -0.082708740234375, "compression_ratio": 1.8, "no_speech_prob": 0.0007050384301692247}, {"id": 122, "seek": 54496, "start": 551.36, "end": 555.88, "text": " You might want to reorder the rows or arrange the data frame.", "tokens": [50684, 509, 1062, 528, 281, 319, 4687, 264, 13241, 420, 9424, 264, 1412, 3920, 13, 50910], "temperature": 0.0, "avg_logprob": -0.082708740234375, "compression_ratio": 1.8, "no_speech_prob": 0.0007050384301692247}, {"id": 123, "seek": 54496, "start": 555.88, "end": 560.32, "text": " You might want to add new variables that are functions of existing variables.", "tokens": [50910, 509, 1062, 528, 281, 909, 777, 9102, 300, 366, 6828, 295, 6741, 9102, 13, 51132], "temperature": 0.0, "avg_logprob": -0.082708740234375, "compression_ratio": 1.8, "no_speech_prob": 0.0007050384301692247}, {"id": 124, "seek": 54496, "start": 560.32, "end": 566.1600000000001, "text": " Or finally, you might want to reduce multiple values down to a single value.", "tokens": [51132, 1610, 2721, 11, 291, 1062, 528, 281, 5407, 3866, 4190, 760, 281, 257, 2167, 2158, 13, 51424], "temperature": 0.0, "avg_logprob": -0.082708740234375, "compression_ratio": 1.8, "no_speech_prob": 0.0007050384301692247}, {"id": 125, "seek": 54496, "start": 566.1600000000001, "end": 569.76, "text": " So all of these functions work exactly the same way.", "tokens": [51424, 407, 439, 295, 613, 6828, 589, 2293, 264, 912, 636, 13, 51604], "temperature": 0.0, "avg_logprob": -0.082708740234375, "compression_ratio": 1.8, "no_speech_prob": 0.0007050384301692247}, {"id": 126, "seek": 56976, "start": 569.76, "end": 572.76, "text": " The first argument is always a data frame.", "tokens": [50364, 440, 700, 6770, 307, 1009, 257, 1412, 3920, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 127, "seek": 56976, "start": 572.76, "end": 578.36, "text": " The subsequent arguments tell you what to do with that data frame.", "tokens": [50514, 440, 19962, 12869, 980, 291, 437, 281, 360, 365, 300, 1412, 3920, 13, 50794], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 128, "seek": 56976, "start": 578.36, "end": 581.28, "text": " And then they always return a data frame.", "tokens": [50794, 400, 550, 436, 1009, 2736, 257, 1412, 3920, 13, 50940], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 129, "seek": 56976, "start": 581.28, "end": 585.6, "text": " So none of these functions modify in place, so whenever you use them, if you do want to", "tokens": [50940, 407, 6022, 295, 613, 6828, 16927, 294, 1081, 11, 370, 5699, 291, 764, 552, 11, 498, 291, 360, 528, 281, 51156], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 130, "seek": 56976, "start": 585.6, "end": 590.04, "text": " modify your data frame, you're going to have to assign the results.", "tokens": [51156, 16927, 428, 1412, 3920, 11, 291, 434, 516, 281, 362, 281, 6269, 264, 3542, 13, 51378], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 131, "seek": 56976, "start": 590.04, "end": 593.8, "text": " A lot of the times I'm just going to show you, I'm just going to run the code and kind", "tokens": [51378, 316, 688, 295, 264, 1413, 286, 478, 445, 516, 281, 855, 291, 11, 286, 478, 445, 516, 281, 1190, 264, 3089, 293, 733, 51566], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 132, "seek": 56976, "start": 593.8, "end": 597.2, "text": " of show you the results on screen and then throw it away.", "tokens": [51566, 295, 855, 291, 264, 3542, 322, 2568, 293, 550, 3507, 309, 1314, 13, 51736], "temperature": 0.0, "avg_logprob": -0.12937973313412424, "compression_ratio": 1.8448979591836734, "no_speech_prob": 0.008574213832616806}, {"id": 133, "seek": 59720, "start": 597.2, "end": 600.76, "text": " That's great for teaching, but obviously when you're doing a real data analysis, you actually", "tokens": [50364, 663, 311, 869, 337, 4571, 11, 457, 2745, 562, 291, 434, 884, 257, 957, 1412, 5215, 11, 291, 767, 50542], "temperature": 0.0, "avg_logprob": -0.19949094531605543, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.003467861795797944}, {"id": 134, "seek": 59720, "start": 600.76, "end": 603.48, "text": " want to save what you've done.", "tokens": [50542, 528, 281, 3155, 437, 291, 600, 1096, 13, 50678], "temperature": 0.0, "avg_logprob": -0.19949094531605543, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.003467861795797944}, {"id": 135, "seek": 59720, "start": 603.48, "end": 610.24, "text": " To illustrate these, I'm going to start with a very simple five-row data frame, which I'm", "tokens": [50678, 1407, 23221, 613, 11, 286, 478, 516, 281, 722, 365, 257, 588, 2199, 1732, 12, 1892, 1412, 3920, 11, 597, 286, 478, 51016], "temperature": 0.0, "avg_logprob": -0.19949094531605543, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.003467861795797944}, {"id": 136, "seek": 59720, "start": 610.24, "end": 614.48, "text": " also going to show in slides.", "tokens": [51016, 611, 516, 281, 855, 294, 9788, 13, 51228], "temperature": 0.0, "avg_logprob": -0.19949094531605543, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.003467861795797944}, {"id": 137, "seek": 59720, "start": 614.48, "end": 619.4000000000001, "text": " So filter allows you to select rows that match some criteria.", "tokens": [51228, 407, 6608, 4045, 291, 281, 3048, 13241, 300, 2995, 512, 11101, 13, 51474], "temperature": 0.0, "avg_logprob": -0.19949094531605543, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.003467861795797944}, {"id": 138, "seek": 59720, "start": 619.4000000000001, "end": 626.1600000000001, "text": " So here we're going to say filterDF, we want all the rows with color equals blue.", "tokens": [51474, 407, 510, 321, 434, 516, 281, 584, 6608, 35, 37, 11, 321, 528, 439, 264, 13241, 365, 2017, 6915, 3344, 13, 51812], "temperature": 0.0, "avg_logprob": -0.19949094531605543, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.003467861795797944}, {"id": 139, "seek": 62616, "start": 626.16, "end": 628.76, "text": " So this is the input and this is the output.", "tokens": [50364, 407, 341, 307, 264, 4846, 293, 341, 307, 264, 5598, 13, 50494], "temperature": 0.0, "avg_logprob": -0.19759631466555905, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.0485965758562088}, {"id": 140, "seek": 62616, "start": 628.76, "end": 636.1999999999999, "text": " So if you've used subset before and baseR, this is very, very similar.", "tokens": [50494, 407, 498, 291, 600, 1143, 25993, 949, 293, 3096, 49, 11, 341, 307, 588, 11, 588, 2531, 13, 50866], "temperature": 0.0, "avg_logprob": -0.19759631466555905, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.0485965758562088}, {"id": 141, "seek": 62616, "start": 636.1999999999999, "end": 642.7199999999999, "text": " If you're looking to see if a value matches one of multiple values, you can use in.", "tokens": [50866, 759, 291, 434, 1237, 281, 536, 498, 257, 2158, 10676, 472, 295, 3866, 4190, 11, 291, 393, 764, 294, 13, 51192], "temperature": 0.0, "avg_logprob": -0.19759631466555905, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.0485965758562088}, {"id": 142, "seek": 62616, "start": 642.7199999999999, "end": 649.0799999999999, "text": " And then there's a whole set of other operators, the regular logic, the numerical comparison", "tokens": [51192, 400, 550, 456, 311, 257, 1379, 992, 295, 661, 19077, 11, 264, 3890, 9952, 11, 264, 29054, 9660, 51510], "temperature": 0.0, "avg_logprob": -0.19759631466555905, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.0485965758562088}, {"id": 143, "seek": 64908, "start": 649.08, "end": 653.0400000000001, "text": " operator is greater than, greater than, equal to, so on and so on.", "tokens": [50364, 12973, 307, 5044, 813, 11, 5044, 813, 11, 2681, 281, 11, 370, 322, 293, 370, 322, 13, 50562], "temperature": 0.0, "avg_logprob": -0.22116474721623564, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.2232661247253418}, {"id": 144, "seek": 64908, "start": 653.0400000000001, "end": 657.4000000000001, "text": " Not equal, equal and member of the set.", "tokens": [50562, 1726, 2681, 11, 2681, 293, 4006, 295, 264, 992, 13, 50780], "temperature": 0.0, "avg_logprob": -0.22116474721623564, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.2232661247253418}, {"id": 145, "seek": 64908, "start": 657.4000000000001, "end": 668.0400000000001, "text": " You might also want to use the Boolean algebra, so or and and not an exclusive or.", "tokens": [50780, 509, 1062, 611, 528, 281, 764, 264, 23351, 28499, 21989, 11, 370, 420, 293, 293, 406, 364, 13005, 420, 13, 51312], "temperature": 0.0, "avg_logprob": -0.22116474721623564, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.2232661247253418}, {"id": 146, "seek": 64908, "start": 668.0400000000001, "end": 672.12, "text": " So I'm just showing this here as a reference, hopefully if you've used R a little bit, you're", "tokens": [51312, 407, 286, 478, 445, 4099, 341, 510, 382, 257, 6408, 11, 4696, 498, 291, 600, 1143, 497, 257, 707, 857, 11, 291, 434, 51516], "temperature": 0.0, "avg_logprob": -0.22116474721623564, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.2232661247253418}, {"id": 147, "seek": 64908, "start": 672.12, "end": 674.72, "text": " familiar with these already.", "tokens": [51516, 4963, 365, 613, 1217, 13, 51646], "temperature": 0.0, "avg_logprob": -0.22116474721623564, "compression_ratio": 1.5219512195121951, "no_speech_prob": 0.2232661247253418}, {"id": 148, "seek": 67472, "start": 674.72, "end": 677.72, "text": " There are kind of two main things to be cautious of.", "tokens": [50364, 821, 366, 733, 295, 732, 2135, 721, 281, 312, 25278, 295, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 149, "seek": 67472, "start": 677.72, "end": 683.76, "text": " When you're working with vectors, you want to use the single bar and the single ampersand.", "tokens": [50514, 1133, 291, 434, 1364, 365, 18875, 11, 291, 528, 281, 764, 264, 2167, 2159, 293, 264, 2167, 18648, 433, 474, 13, 50816], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 150, "seek": 67472, "start": 683.76, "end": 687.8000000000001, "text": " If you're working with scalars, if you're working with single numbers, like you're using", "tokens": [50816, 759, 291, 434, 1364, 365, 15664, 685, 11, 498, 291, 434, 1364, 365, 2167, 3547, 11, 411, 291, 434, 1228, 51018], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 151, "seek": 67472, "start": 687.8000000000001, "end": 692.52, "text": " an if statement, that's when you use the double bar or the double ampersand.", "tokens": [51018, 364, 498, 5629, 11, 300, 311, 562, 291, 764, 264, 3834, 2159, 420, 264, 3834, 18648, 433, 474, 13, 51254], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 152, "seek": 67472, "start": 692.52, "end": 697.88, "text": " But here we're going to be working with vectors and values, so we want to always use the single", "tokens": [51254, 583, 510, 321, 434, 516, 281, 312, 1364, 365, 18875, 293, 4190, 11, 370, 321, 528, 281, 1009, 764, 264, 2167, 51522], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 153, "seek": 67472, "start": 697.88, "end": 701.0, "text": " vertical bar or the single ampersand.", "tokens": [51522, 9429, 2159, 420, 264, 2167, 18648, 433, 474, 13, 51678], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 154, "seek": 67472, "start": 701.0, "end": 704.48, "text": " And we'll talk about this in a little, very shortly.", "tokens": [51678, 400, 321, 603, 751, 466, 341, 294, 257, 707, 11, 588, 13392, 13, 51852], "temperature": 0.0, "avg_logprob": -0.14688076863762076, "compression_ratio": 2.0327868852459017, "no_speech_prob": 0.09399963170289993}, {"id": 155, "seek": 70448, "start": 704.48, "end": 710.84, "text": " So what I want you guys to do is practice using filter by extracting the flights that", "tokens": [50364, 407, 437, 286, 528, 291, 1074, 281, 360, 307, 3124, 1228, 6608, 538, 49844, 264, 21089, 300, 50682], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 156, "seek": 70448, "start": 710.84, "end": 711.84, "text": " match these criteria.", "tokens": [50682, 2995, 613, 11101, 13, 50732], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 157, "seek": 70448, "start": 711.84, "end": 716.88, "text": " So first of all, all of the flights that went to San Francisco, all of the flights that were", "tokens": [50732, 407, 700, 295, 439, 11, 439, 295, 264, 21089, 300, 1437, 281, 5271, 12279, 11, 439, 295, 264, 21089, 300, 645, 50984], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 158, "seek": 70448, "start": 716.88, "end": 721.84, "text": " in January, or all flights that were delayed by more than an hour, or they departed between", "tokens": [50984, 294, 7061, 11, 420, 439, 21089, 300, 645, 20268, 538, 544, 813, 364, 1773, 11, 420, 436, 47018, 1296, 51232], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 159, "seek": 70448, "start": 721.84, "end": 728.04, "text": " midnight and 5 AM, or when the arrival delay was twice as much as the departure delay or", "tokens": [51232, 19006, 293, 1025, 6475, 11, 420, 562, 264, 18365, 8577, 390, 6091, 382, 709, 382, 264, 25866, 8577, 420, 51542], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 160, "seek": 70448, "start": 728.04, "end": 729.04, "text": " corrective.", "tokens": [51542, 3006, 488, 13, 51592], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 161, "seek": 70448, "start": 729.04, "end": 730.04, "text": " So I'll give you a few minutes.", "tokens": [51592, 407, 286, 603, 976, 291, 257, 1326, 2077, 13, 51642], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 162, "seek": 70448, "start": 730.04, "end": 733.48, "text": " I'll circulate around and help you again, there's only one of me and there's a lot of", "tokens": [51642, 286, 603, 12515, 473, 926, 293, 854, 291, 797, 11, 456, 311, 787, 472, 295, 385, 293, 456, 311, 257, 688, 295, 51814], "temperature": 0.0, "avg_logprob": -0.20372642170299182, "compression_ratio": 1.8056537102473498, "no_speech_prob": 0.03799118101596832}, {"id": 163, "seek": 73348, "start": 733.48, "end": 734.48, "text": " you.", "tokens": [50364, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.22086045855567568, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.2060035914182663}, {"id": 164, "seek": 73348, "start": 734.48, "end": 740.24, "text": " So if you get stuck on my behalf, please feel free to ask your neighbor for help.", "tokens": [50414, 407, 498, 291, 483, 5541, 322, 452, 9490, 11, 1767, 841, 1737, 281, 1029, 428, 5987, 337, 854, 13, 50702], "temperature": 0.0, "avg_logprob": -0.22086045855567568, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.2060035914182663}, {"id": 165, "seek": 73348, "start": 740.24, "end": 744.28, "text": " Okay, so let's have a go at how you might tackle this.", "tokens": [50702, 1033, 11, 370, 718, 311, 362, 257, 352, 412, 577, 291, 1062, 14896, 341, 13, 50904], "temperature": 0.0, "avg_logprob": -0.22086045855567568, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.2060035914182663}, {"id": 166, "seek": 73348, "start": 744.28, "end": 756.8000000000001, "text": " So we wanted to find all the flights that went to SFO Oakland.", "tokens": [50904, 407, 321, 1415, 281, 915, 439, 264, 21089, 300, 1437, 281, 318, 18067, 34868, 13, 51530], "temperature": 0.0, "avg_logprob": -0.22086045855567568, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.2060035914182663}, {"id": 167, "seek": 73348, "start": 756.8000000000001, "end": 759.04, "text": " So you might start like this.", "tokens": [51530, 407, 291, 1062, 722, 411, 341, 13, 51642], "temperature": 0.0, "avg_logprob": -0.22086045855567568, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.2060035914182663}, {"id": 168, "seek": 73348, "start": 759.04, "end": 762.36, "text": " So there's 2,800 that went to SFO.", "tokens": [51642, 407, 456, 311, 568, 11, 14423, 300, 1437, 281, 318, 18067, 13, 51808], "temperature": 0.0, "avg_logprob": -0.22086045855567568, "compression_ratio": 1.5112359550561798, "no_speech_prob": 0.2060035914182663}, {"id": 169, "seek": 76236, "start": 762.36, "end": 765.72, "text": " Now a common mistake when you're first using R, you would say, I want the destination to", "tokens": [50364, 823, 257, 2689, 6146, 562, 291, 434, 700, 1228, 497, 11, 291, 576, 584, 11, 286, 528, 264, 12236, 281, 50532], "temperature": 0.0, "avg_logprob": -0.2809050834342225, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.16051647067070007}, {"id": 170, "seek": 76236, "start": 765.72, "end": 773.6, "text": " equal San Francisco or Oakland, you do that, that's not going to work.", "tokens": [50532, 2681, 5271, 12279, 420, 34868, 11, 291, 360, 300, 11, 300, 311, 406, 516, 281, 589, 13, 50926], "temperature": 0.0, "avg_logprob": -0.2809050834342225, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.16051647067070007}, {"id": 171, "seek": 76236, "start": 773.6, "end": 779.24, "text": " So you either have to be very explicit and say destination equals SFO, or destination", "tokens": [50926, 407, 291, 2139, 362, 281, 312, 588, 13691, 293, 584, 12236, 6915, 318, 18067, 11, 420, 12236, 51208], "temperature": 0.0, "avg_logprob": -0.2809050834342225, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.16051647067070007}, {"id": 172, "seek": 76236, "start": 779.24, "end": 791.0, "text": " equals Oakland, or use the in operator.", "tokens": [51208, 6915, 34868, 11, 420, 764, 264, 294, 12973, 13, 51796], "temperature": 0.0, "avg_logprob": -0.2809050834342225, "compression_ratio": 1.532258064516129, "no_speech_prob": 0.16051647067070007}, {"id": 173, "seek": 79100, "start": 791.0, "end": 798.52, "text": " So that's all of the flights that his destination was San Francisco or Oakland.", "tokens": [50364, 407, 300, 311, 439, 295, 264, 21089, 300, 702, 12236, 390, 5271, 12279, 420, 34868, 13, 50740], "temperature": 0.0, "avg_logprob": -0.24429241386619774, "compression_ratio": 1.5, "no_speech_prob": 0.09255289286375046}, {"id": 174, "seek": 79100, "start": 798.52, "end": 805.56, "text": " In January, that's actually a tricky one.", "tokens": [50740, 682, 7061, 11, 300, 311, 767, 257, 12414, 472, 13, 51092], "temperature": 0.0, "avg_logprob": -0.24429241386619774, "compression_ratio": 1.5, "no_speech_prob": 0.09255289286375046}, {"id": 175, "seek": 79100, "start": 805.56, "end": 812.36, "text": " The easiest way to do that is, in this case I know the first flight was January 1st, so", "tokens": [51092, 440, 12889, 636, 281, 360, 300, 307, 11, 294, 341, 1389, 286, 458, 264, 700, 7018, 390, 7061, 502, 372, 11, 370, 51432], "temperature": 0.0, "avg_logprob": -0.24429241386619774, "compression_ratio": 1.5, "no_speech_prob": 0.09255289286375046}, {"id": 176, "seek": 79100, "start": 812.36, "end": 818.52, "text": " I can just say give me all the flights before the 1st of February.", "tokens": [51432, 286, 393, 445, 584, 976, 385, 439, 264, 21089, 949, 264, 502, 372, 295, 8711, 13, 51740], "temperature": 0.0, "avg_logprob": -0.24429241386619774, "compression_ratio": 1.5, "no_speech_prob": 0.09255289286375046}, {"id": 177, "seek": 81852, "start": 818.52, "end": 827.12, "text": " That didn't work surprisingly, so we might need to just, oh, 2011, yeah, okay.", "tokens": [50364, 663, 994, 380, 589, 17600, 11, 370, 321, 1062, 643, 281, 445, 11, 1954, 11, 10154, 11, 1338, 11, 1392, 13, 50794], "temperature": 0.0, "avg_logprob": -0.3473094834221734, "compression_ratio": 1.3770491803278688, "no_speech_prob": 0.22610603272914886}, {"id": 178, "seek": 81852, "start": 827.12, "end": 833.1999999999999, "text": " So let's just see how that thing went down.", "tokens": [50794, 407, 718, 311, 445, 536, 577, 300, 551, 1437, 760, 13, 51098], "temperature": 0.0, "avg_logprob": -0.3473094834221734, "compression_ratio": 1.3770491803278688, "no_speech_prob": 0.22610603272914886}, {"id": 179, "seek": 81852, "start": 833.1999999999999, "end": 840.12, "text": " So that gets us 18,000 flights in January.", "tokens": [51098, 407, 300, 2170, 505, 2443, 11, 1360, 21089, 294, 7061, 13, 51444], "temperature": 0.0, "avg_logprob": -0.3473094834221734, "compression_ratio": 1.3770491803278688, "no_speech_prob": 0.22610603272914886}, {"id": 180, "seek": 81852, "start": 840.12, "end": 846.3199999999999, "text": " Again between midnight and 5am, there are two ways you can write this, so probably you", "tokens": [51444, 3764, 1296, 19006, 293, 1025, 335, 11, 456, 366, 732, 2098, 291, 393, 2464, 341, 11, 370, 1391, 291, 51754], "temperature": 0.0, "avg_logprob": -0.3473094834221734, "compression_ratio": 1.3770491803278688, "no_speech_prob": 0.22610603272914886}, {"id": 181, "seek": 84632, "start": 846.32, "end": 852.24, "text": " might have written this, all of the flights where hour is greater than or equal to 0,", "tokens": [50364, 1062, 362, 3720, 341, 11, 439, 295, 264, 21089, 689, 1773, 307, 5044, 813, 420, 2681, 281, 1958, 11, 50660], "temperature": 0.0, "avg_logprob": -0.21909359785226676, "compression_ratio": 1.6903765690376569, "no_speech_prob": 0.14401060342788696}, {"id": 182, "seek": 84632, "start": 852.24, "end": 854.72, "text": " and hour is less than or equal to 5.", "tokens": [50660, 293, 1773, 307, 1570, 813, 420, 2681, 281, 1025, 13, 50784], "temperature": 0.0, "avg_logprob": -0.21909359785226676, "compression_ratio": 1.6903765690376569, "no_speech_prob": 0.14401060342788696}, {"id": 183, "seek": 84632, "start": 854.72, "end": 860.1600000000001, "text": " With filter, you can also supply multiple arguments to it, and those arguments are all", "tokens": [50784, 2022, 6608, 11, 291, 393, 611, 5847, 3866, 12869, 281, 309, 11, 293, 729, 12869, 366, 439, 51056], "temperature": 0.0, "avg_logprob": -0.21909359785226676, "compression_ratio": 1.6903765690376569, "no_speech_prob": 0.14401060342788696}, {"id": 184, "seek": 84632, "start": 860.1600000000001, "end": 863.5200000000001, "text": " ended together.", "tokens": [51056, 4590, 1214, 13, 51224], "temperature": 0.0, "avg_logprob": -0.21909359785226676, "compression_ratio": 1.6903765690376569, "no_speech_prob": 0.14401060342788696}, {"id": 185, "seek": 84632, "start": 863.5200000000001, "end": 869.48, "text": " There's no real benefit to doing it this way, rather than this way, except maybe one day", "tokens": [51224, 821, 311, 572, 957, 5121, 281, 884, 309, 341, 636, 11, 2831, 813, 341, 636, 11, 3993, 1310, 472, 786, 51522], "temperature": 0.0, "avg_logprob": -0.21909359785226676, "compression_ratio": 1.6903765690376569, "no_speech_prob": 0.14401060342788696}, {"id": 186, "seek": 84632, "start": 869.48, "end": 873.6800000000001, "text": " we might be able to figure out how to do these in parallel, and it might be twice as fast", "tokens": [51522, 321, 1062, 312, 1075, 281, 2573, 484, 577, 281, 360, 613, 294, 8952, 11, 293, 309, 1062, 312, 6091, 382, 2370, 51732], "temperature": 0.0, "avg_logprob": -0.21909359785226676, "compression_ratio": 1.6903765690376569, "no_speech_prob": 0.14401060342788696}, {"id": 187, "seek": 87368, "start": 873.68, "end": 875.92, "text": " if you do it this way.", "tokens": [50364, 498, 291, 360, 309, 341, 636, 13, 50476], "temperature": 0.0, "avg_logprob": -0.24951891277147376, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.10596194118261337}, {"id": 188, "seek": 87368, "start": 875.92, "end": 880.8, "text": " And then finally, all the flights delayed by more than an hour.", "tokens": [50476, 400, 550, 2721, 11, 439, 264, 21089, 20268, 538, 544, 813, 364, 1773, 13, 50720], "temperature": 0.0, "avg_logprob": -0.24951891277147376, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.10596194118261337}, {"id": 189, "seek": 87368, "start": 880.8, "end": 885.52, "text": " There's two delay variables here, the departure delay and the arrival delay.", "tokens": [50720, 821, 311, 732, 8577, 9102, 510, 11, 264, 25866, 8577, 293, 264, 18365, 8577, 13, 50956], "temperature": 0.0, "avg_logprob": -0.24951891277147376, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.10596194118261337}, {"id": 190, "seek": 87368, "start": 885.52, "end": 891.0799999999999, "text": " I should have mentioned if it's a negative delay, that means it arrived early or departed", "tokens": [50956, 286, 820, 362, 2835, 498, 309, 311, 257, 3671, 8577, 11, 300, 1355, 309, 6678, 2440, 420, 47018, 51234], "temperature": 0.0, "avg_logprob": -0.24951891277147376, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.10596194118261337}, {"id": 191, "seek": 87368, "start": 891.0799999999999, "end": 892.0799999999999, "text": " early.", "tokens": [51234, 2440, 13, 51284], "temperature": 0.0, "avg_logprob": -0.24951891277147376, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.10596194118261337}, {"id": 192, "seek": 87368, "start": 892.0799999999999, "end": 898.5999999999999, "text": " We can find all the flights that were delayed by more than an hour, right, 10,000 flights,", "tokens": [51284, 492, 393, 915, 439, 264, 21089, 300, 645, 20268, 538, 544, 813, 364, 1773, 11, 558, 11, 1266, 11, 1360, 21089, 11, 51610], "temperature": 0.0, "avg_logprob": -0.24951891277147376, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.10596194118261337}, {"id": 193, "seek": 89860, "start": 898.9200000000001, "end": 905.6800000000001, "text": " if any of you have, I assume you've all flown in the US, so you're not surprised by this.", "tokens": [50380, 498, 604, 295, 291, 362, 11, 286, 6552, 291, 600, 439, 34536, 294, 264, 2546, 11, 370, 291, 434, 406, 6100, 538, 341, 13, 50718], "temperature": 0.0, "avg_logprob": -0.17655631823417467, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.04010060429573059}, {"id": 194, "seek": 89860, "start": 905.6800000000001, "end": 909.08, "text": " And we can also use more complicated expressions in there.", "tokens": [50718, 400, 321, 393, 611, 764, 544, 6179, 15277, 294, 456, 13, 50888], "temperature": 0.0, "avg_logprob": -0.17655631823417467, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.04010060429573059}, {"id": 195, "seek": 89860, "start": 909.08, "end": 915.48, "text": " We can find all of the flights where the arrival delay is twice as much as the departure delay.", "tokens": [50888, 492, 393, 915, 439, 295, 264, 21089, 689, 264, 18365, 8577, 307, 6091, 382, 709, 382, 264, 25866, 8577, 13, 51208], "temperature": 0.0, "avg_logprob": -0.17655631823417467, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.04010060429573059}, {"id": 196, "seek": 89860, "start": 915.48, "end": 921.48, "text": " So these are cases where we have lost time during the flight.", "tokens": [51208, 407, 613, 366, 3331, 689, 321, 362, 2731, 565, 1830, 264, 7018, 13, 51508], "temperature": 0.0, "avg_logprob": -0.17655631823417467, "compression_ratio": 1.5376884422110553, "no_speech_prob": 0.04010060429573059}, {"id": 197, "seek": 92148, "start": 922.48, "end": 929.48, "text": " Well, on these ones we might also want to say, and the departure delay was greater than zero.", "tokens": [50414, 1042, 11, 322, 613, 2306, 321, 1062, 611, 528, 281, 584, 11, 293, 264, 25866, 8577, 390, 5044, 813, 4018, 13, 50764], "temperature": 0.0, "avg_logprob": -0.31372564132899455, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.011113889515399933}, {"id": 198, "seek": 92148, "start": 932.48, "end": 938.48, "text": " Right, so this minute, this flight, wait a little longer, right?", "tokens": [50914, 1779, 11, 370, 341, 3456, 11, 341, 7018, 11, 1699, 257, 707, 2854, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.31372564132899455, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.011113889515399933}, {"id": 199, "seek": 92148, "start": 938.48, "end": 945.48, "text": " Yeah, this flight was two minutes delayed departing, and it was six minutes late on arrival.", "tokens": [51214, 865, 11, 341, 7018, 390, 732, 2077, 20268, 9110, 278, 11, 293, 309, 390, 2309, 2077, 3469, 322, 18365, 13, 51564], "temperature": 0.0, "avg_logprob": -0.31372564132899455, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.011113889515399933}, {"id": 200, "seek": 92148, "start": 947.48, "end": 950.48, "text": " Any questions about Felter?", "tokens": [51664, 2639, 1651, 466, 13298, 391, 30, 51814], "temperature": 0.0, "avg_logprob": -0.31372564132899455, "compression_ratio": 1.5674157303370786, "no_speech_prob": 0.011113889515399933}, {"id": 201, "seek": 95048, "start": 950.48, "end": 951.48, "text": " Yep.", "tokens": [50364, 7010, 13, 50414], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 202, "seek": 95048, "start": 951.48, "end": 954.48, "text": " Why would you use Felter instead of Felter?", "tokens": [50414, 1545, 576, 291, 764, 13298, 391, 2602, 295, 13298, 391, 30, 50564], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 203, "seek": 95048, "start": 954.48, "end": 961.48, "text": " Because it's faster, because it is better defined, it just does one thing, and it does", "tokens": [50564, 1436, 309, 311, 4663, 11, 570, 309, 307, 1101, 7642, 11, 309, 445, 775, 472, 551, 11, 293, 309, 775, 50914], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 204, "seek": 95048, "start": 961.48, "end": 966.48, "text": " it one thing well, or a subset does multiple things, and then finally you can use Felter", "tokens": [50914, 309, 472, 551, 731, 11, 420, 257, 25993, 775, 3866, 721, 11, 293, 550, 2721, 291, 393, 764, 13298, 391, 51164], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 205, "seek": 95048, "start": 966.48, "end": 971.48, "text": " on database tables and it will generate SQL for you.", "tokens": [51164, 322, 8149, 8020, 293, 309, 486, 8460, 19200, 337, 291, 13, 51414], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 206, "seek": 95048, "start": 971.48, "end": 974.48, "text": " Will it work on regular data frames?", "tokens": [51414, 3099, 309, 589, 322, 3890, 1412, 12083, 30, 51564], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 207, "seek": 95048, "start": 974.48, "end": 975.48, "text": " Yes.", "tokens": [51564, 1079, 13, 51614], "temperature": 0.0, "avg_logprob": -0.24241597917344834, "compression_ratio": 1.5792079207920793, "no_speech_prob": 0.007914544083178043}, {"id": 208, "seek": 97548, "start": 976.48, "end": 981.48, "text": " Okay, the next verb is select, which allows you to pick variables you're interested in.", "tokens": [50414, 1033, 11, 264, 958, 9595, 307, 3048, 11, 597, 4045, 291, 281, 1888, 9102, 291, 434, 3102, 294, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10719575291186308, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.008327864110469818}, {"id": 209, "seek": 97548, "start": 981.48, "end": 986.48, "text": " So this is most useful if you have a data set that has hundreds of variables, and you", "tokens": [50664, 407, 341, 307, 881, 4420, 498, 291, 362, 257, 1412, 992, 300, 575, 6779, 295, 9102, 11, 293, 291, 50914], "temperature": 0.0, "avg_logprob": -0.10719575291186308, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.008327864110469818}, {"id": 210, "seek": 97548, "start": 986.48, "end": 988.48, "text": " just want to look at a few of them.", "tokens": [50914, 445, 528, 281, 574, 412, 257, 1326, 295, 552, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10719575291186308, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.008327864110469818}, {"id": 211, "seek": 97548, "start": 988.48, "end": 995.48, "text": " The syntax is the name of the data frame, and then the list of the variables you want to keep.", "tokens": [51014, 440, 28431, 307, 264, 1315, 295, 264, 1412, 3920, 11, 293, 550, 264, 1329, 295, 264, 9102, 291, 528, 281, 1066, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10719575291186308, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.008327864110469818}, {"id": 212, "seek": 97548, "start": 995.48, "end": 1000.48, "text": " So select works like the select argument to subset if you've ever used that.", "tokens": [51364, 407, 3048, 1985, 411, 264, 3048, 6770, 281, 25993, 498, 291, 600, 1562, 1143, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10719575291186308, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.008327864110469818}, {"id": 213, "seek": 97548, "start": 1000.48, "end": 1004.48, "text": " But basically you can treat the names of variables like their positions.", "tokens": [51614, 583, 1936, 291, 393, 2387, 264, 5288, 295, 9102, 411, 641, 8432, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10719575291186308, "compression_ratio": 1.7874015748031495, "no_speech_prob": 0.008327864110469818}, {"id": 214, "seek": 100448, "start": 1004.48, "end": 1010.48, "text": " So you can say use negative to say give me all the variables that are not color.", "tokens": [50364, 407, 291, 393, 584, 764, 3671, 281, 584, 976, 385, 439, 264, 9102, 300, 366, 406, 2017, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14971230580256537, "compression_ratio": 1.6868131868131868, "no_speech_prob": 0.00131935253739357}, {"id": 215, "seek": 100448, "start": 1012.48, "end": 1015.48, "text": " What I want you guys to do now is read the help for select.", "tokens": [50764, 708, 286, 528, 291, 1074, 281, 360, 586, 307, 1401, 264, 854, 337, 3048, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14971230580256537, "compression_ratio": 1.6868131868131868, "no_speech_prob": 0.00131935253739357}, {"id": 216, "seek": 100448, "start": 1015.48, "end": 1021.48, "text": " What are the other ways you can select sets of variables, and then see if you can come", "tokens": [50914, 708, 366, 264, 661, 2098, 291, 393, 3048, 6352, 295, 9102, 11, 293, 550, 536, 498, 291, 393, 808, 51214], "temperature": 0.0, "avg_logprob": -0.14971230580256537, "compression_ratio": 1.6868131868131868, "no_speech_prob": 0.00131935253739357}, {"id": 217, "seek": 100448, "start": 1021.48, "end": 1027.48, "text": " up with three ways of selecting out the two delay variables from this data set.", "tokens": [51214, 493, 365, 1045, 2098, 295, 18182, 484, 264, 732, 8577, 9102, 490, 341, 1412, 992, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14971230580256537, "compression_ratio": 1.6868131868131868, "no_speech_prob": 0.00131935253739357}, {"id": 218, "seek": 102748, "start": 1027.48, "end": 1038.48, "text": " So if you look at the help for select, you'll see that all of these main verbs are documented", "tokens": [50364, 407, 498, 291, 574, 412, 264, 854, 337, 3048, 11, 291, 603, 536, 300, 439, 295, 613, 2135, 30051, 366, 23007, 50914], "temperature": 0.0, "avg_logprob": -0.13824840595847682, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.0011443371186032891}, {"id": 219, "seek": 102748, "start": 1038.48, "end": 1044.48, "text": " together, and you'll see that I've been courteous to Americans.", "tokens": [50914, 1214, 11, 293, 291, 603, 536, 300, 286, 600, 668, 1005, 975, 563, 281, 6280, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13824840595847682, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.0011443371186032891}, {"id": 220, "seek": 102748, "start": 1044.48, "end": 1053.48, "text": " But if we scroll down, we can see that there are five ways of, well, at least five ways,", "tokens": [51214, 583, 498, 321, 11369, 760, 11, 321, 393, 536, 300, 456, 366, 1732, 2098, 295, 11, 731, 11, 412, 1935, 1732, 2098, 11, 51664], "temperature": 0.0, "avg_logprob": -0.13824840595847682, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.0011443371186032891}, {"id": 221, "seek": 102748, "start": 1053.48, "end": 1056.48, "text": " extra ways of selecting variables.", "tokens": [51664, 2857, 2098, 295, 18182, 9102, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13824840595847682, "compression_ratio": 1.5786516853932584, "no_speech_prob": 0.0011443371186032891}, {"id": 222, "seek": 105648, "start": 1056.48, "end": 1061.48, "text": " So you can select variables that start with a common prefix, then end with a common suffix", "tokens": [50364, 407, 291, 393, 3048, 9102, 300, 722, 365, 257, 2689, 46969, 11, 550, 917, 365, 257, 2689, 3889, 970, 50614], "temperature": 0.0, "avg_logprob": -0.15609599174337185, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0004895328893326223}, {"id": 223, "seek": 105648, "start": 1061.48, "end": 1067.48, "text": " that contain some character string or the match a regular expression, or you can do", "tokens": [50614, 300, 5304, 512, 2517, 6798, 420, 264, 2995, 257, 3890, 6114, 11, 420, 291, 393, 360, 50914], "temperature": 0.0, "avg_logprob": -0.15609599174337185, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0004895328893326223}, {"id": 224, "seek": 105648, "start": 1067.48, "end": 1071.48, "text": " like a numeric range, say all of x1 to x10.", "tokens": [50914, 411, 257, 7866, 299, 3613, 11, 584, 439, 295, 2031, 16, 281, 2031, 3279, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15609599174337185, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0004895328893326223}, {"id": 225, "seek": 105648, "start": 1071.48, "end": 1077.48, "text": " So this is my attempt to come up with every way that you might reasonably want to select a variable.", "tokens": [51114, 407, 341, 307, 452, 5217, 281, 808, 493, 365, 633, 636, 300, 291, 1062, 23551, 528, 281, 3048, 257, 7006, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15609599174337185, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0004895328893326223}, {"id": 226, "seek": 105648, "start": 1077.48, "end": 1082.48, "text": " So a couple of ways you can select these two.", "tokens": [51414, 407, 257, 1916, 295, 2098, 291, 393, 3048, 613, 732, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15609599174337185, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0004895328893326223}, {"id": 227, "seek": 108248, "start": 1082.48, "end": 1086.48, "text": " You can select them just as individual variables.", "tokens": [50364, 509, 393, 3048, 552, 445, 382, 2609, 9102, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 228, "seek": 108248, "start": 1086.48, "end": 1092.48, "text": " You could say pick all of the variables between from a rival delay to departure delay.", "tokens": [50564, 509, 727, 584, 1888, 439, 295, 264, 9102, 1296, 490, 257, 16286, 8577, 281, 25866, 8577, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 229, "seek": 108248, "start": 1092.48, "end": 1098.48, "text": " You could find all of the variables that end with delay or all of the variables that contain delay.", "tokens": [50864, 509, 727, 915, 439, 295, 264, 9102, 300, 917, 365, 8577, 420, 439, 295, 264, 9102, 300, 5304, 8577, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 230, "seek": 108248, "start": 1098.48, "end": 1100.48, "text": " There's lots of other ways too.", "tokens": [51164, 821, 311, 3195, 295, 661, 2098, 886, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 231, "seek": 108248, "start": 1100.48, "end": 1102.48, "text": " You could also write this.", "tokens": [51264, 509, 727, 611, 2464, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 232, "seek": 108248, "start": 1102.48, "end": 1104.48, "text": " You could say make a vector of columns.", "tokens": [51364, 509, 727, 584, 652, 257, 8062, 295, 13766, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 233, "seek": 108248, "start": 1104.48, "end": 1106.48, "text": " We're using C.", "tokens": [51464, 492, 434, 1228, 383, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10415041181776259, "compression_ratio": 1.8134715025906736, "no_speech_prob": 0.04848799854516983}, {"id": 234, "seek": 110648, "start": 1106.48, "end": 1114.48, "text": " Basically, inside select variable names, you can treat them like the numeric positions.", "tokens": [50364, 8537, 11, 1854, 3048, 7006, 5288, 11, 291, 393, 2387, 552, 411, 264, 7866, 299, 8432, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09748146857744382, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0668877586722374}, {"id": 235, "seek": 110648, "start": 1114.48, "end": 1120.48, "text": " So anything you can do to a numeric position, you can do with a variable name.", "tokens": [50764, 407, 1340, 291, 393, 360, 281, 257, 7866, 299, 2535, 11, 291, 393, 360, 365, 257, 7006, 1315, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09748146857744382, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0668877586722374}, {"id": 236, "seek": 110648, "start": 1120.48, "end": 1125.48, "text": " So the goal of select is to make it easy to refer to your variables by name.", "tokens": [51064, 407, 264, 3387, 295, 3048, 307, 281, 652, 309, 1858, 281, 2864, 281, 428, 9102, 538, 1315, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09748146857744382, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0668877586722374}, {"id": 237, "seek": 110648, "start": 1125.48, "end": 1129.48, "text": " It's always a better idea to refer to your variables by name than by position,", "tokens": [51314, 467, 311, 1009, 257, 1101, 1558, 281, 2864, 281, 428, 9102, 538, 1315, 813, 538, 2535, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09748146857744382, "compression_ratio": 1.872093023255814, "no_speech_prob": 0.0668877586722374}, {"id": 238, "seek": 112948, "start": 1129.48, "end": 1136.48, "text": " because you don't want your data input format changes and you're referring to variables by position.", "tokens": [50364, 570, 291, 500, 380, 528, 428, 1412, 4846, 7877, 2962, 293, 291, 434, 13761, 281, 9102, 538, 2535, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11518385440488405, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05424406751990318}, {"id": 239, "seek": 112948, "start": 1136.48, "end": 1145.48, "text": " It's very easy to have code that works but gives you meaningless results because it's using the wrong variables.", "tokens": [50714, 467, 311, 588, 1858, 281, 362, 3089, 300, 1985, 457, 2709, 291, 33232, 3542, 570, 309, 311, 1228, 264, 2085, 9102, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11518385440488405, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05424406751990318}, {"id": 240, "seek": 112948, "start": 1145.48, "end": 1151.48, "text": " The next verb is a range which just changes the order of the rows.", "tokens": [51164, 440, 958, 9595, 307, 257, 3613, 597, 445, 2962, 264, 1668, 295, 264, 13241, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11518385440488405, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05424406751990318}, {"id": 241, "seek": 112948, "start": 1151.48, "end": 1155.48, "text": " So if you just use a variable and orders it by that,", "tokens": [51464, 407, 498, 291, 445, 764, 257, 7006, 293, 9470, 309, 538, 300, 11, 51664], "temperature": 0.0, "avg_logprob": -0.11518385440488405, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.05424406751990318}, {"id": 242, "seek": 115548, "start": 1155.48, "end": 1160.48, "text": " you can order in descending order by using the desk wrapper.", "tokens": [50364, 291, 393, 1668, 294, 40182, 1668, 538, 1228, 264, 10026, 46906, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1012765225910005, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.004747834987938404}, {"id": 243, "seek": 115548, "start": 1160.48, "end": 1168.48, "text": " And I don't show you here but you can add additional variables to break ties if there are ties in this first variable.", "tokens": [50614, 400, 286, 500, 380, 855, 291, 510, 457, 291, 393, 909, 4497, 9102, 281, 1821, 14039, 498, 456, 366, 14039, 294, 341, 700, 7006, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1012765225910005, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.004747834987938404}, {"id": 244, "seek": 115548, "start": 1168.48, "end": 1173.48, "text": " So again, order the flights by departure date and time.", "tokens": [51014, 407, 797, 11, 1668, 264, 21089, 538, 25866, 4002, 293, 565, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1012765225910005, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.004747834987938404}, {"id": 245, "seek": 115548, "start": 1173.48, "end": 1177.48, "text": " Figure out using a range which flights were most delayed", "tokens": [51264, 43225, 484, 1228, 257, 3613, 597, 21089, 645, 881, 20268, 51464], "temperature": 0.0, "avg_logprob": -0.1012765225910005, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.004747834987938404}, {"id": 246, "seek": 115548, "start": 1177.48, "end": 1182.48, "text": " and then which flights caught up the most time during the flight.", "tokens": [51464, 293, 550, 597, 21089, 5415, 493, 264, 881, 565, 1830, 264, 7018, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1012765225910005, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.004747834987938404}, {"id": 247, "seek": 118248, "start": 1183.48, "end": 1186.48, "text": " So again, a few minutes to work on this and I'll show you the answers.", "tokens": [50414, 407, 797, 11, 257, 1326, 2077, 281, 589, 322, 341, 293, 286, 603, 855, 291, 264, 6338, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11620387811770384, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.01887361891567707}, {"id": 248, "seek": 118248, "start": 1186.48, "end": 1191.48, "text": " Okay, if we want to order the flights by their departure date,", "tokens": [50564, 1033, 11, 498, 321, 528, 281, 1668, 264, 21089, 538, 641, 25866, 4002, 11, 50814], "temperature": 0.0, "avg_logprob": -0.11620387811770384, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.01887361891567707}, {"id": 249, "seek": 118248, "start": 1191.48, "end": 1195.48, "text": " we could say order it by date and then hour and then minute.", "tokens": [50814, 321, 727, 584, 1668, 309, 538, 4002, 293, 550, 1773, 293, 550, 3456, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11620387811770384, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.01887361891567707}, {"id": 250, "seek": 118248, "start": 1195.48, "end": 1199.48, "text": " Just want to see multiple, ordering by multiple variables.", "tokens": [51014, 1449, 528, 281, 536, 3866, 11, 21739, 538, 3866, 9102, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11620387811770384, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.01887361891567707}, {"id": 251, "seek": 118248, "start": 1199.48, "end": 1206.48, "text": " So you can see the first flight left on January 1st, one minute after midnight.", "tokens": [51214, 407, 291, 393, 536, 264, 700, 7018, 1411, 322, 7061, 502, 372, 11, 472, 3456, 934, 19006, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11620387811770384, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.01887361891567707}, {"id": 252, "seek": 120648, "start": 1206.48, "end": 1215.48, "text": " So I should mention this depth variable is the departure time as like a 24-hour time", "tokens": [50364, 407, 286, 820, 2152, 341, 7161, 7006, 307, 264, 25866, 565, 382, 411, 257, 4022, 12, 18048, 565, 50814], "temperature": 0.0, "avg_logprob": -0.17147304310518152, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0038635164964944124}, {"id": 253, "seek": 120648, "start": 1215.48, "end": 1218.48, "text": " but all the zeros got dropped off.", "tokens": [50814, 457, 439, 264, 35193, 658, 8119, 766, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17147304310518152, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0038635164964944124}, {"id": 254, "seek": 120648, "start": 1218.48, "end": 1223.48, "text": " And then the hour and minute are just that, this time split up into those pieces.", "tokens": [50964, 400, 550, 264, 1773, 293, 3456, 366, 445, 300, 11, 341, 565, 7472, 493, 666, 729, 3755, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17147304310518152, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0038635164964944124}, {"id": 255, "seek": 120648, "start": 1223.48, "end": 1230.48, "text": " So for example in this column, there's not going to be a 661,", "tokens": [51214, 407, 337, 1365, 294, 341, 7738, 11, 456, 311, 406, 516, 281, 312, 257, 21126, 16, 11, 51564], "temperature": 0.0, "avg_logprob": -0.17147304310518152, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0038635164964944124}, {"id": 256, "seek": 120648, "start": 1230.48, "end": 1235.48, "text": " no flights left, it's 61 minutes past 6am.", "tokens": [51564, 572, 21089, 1411, 11, 309, 311, 28294, 2077, 1791, 1386, 335, 13, 51814], "temperature": 0.0, "avg_logprob": -0.17147304310518152, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0038635164964944124}, {"id": 257, "seek": 123548, "start": 1235.48, "end": 1239.48, "text": " This is just a weird decimal time.", "tokens": [50364, 639, 307, 445, 257, 3657, 26601, 565, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 258, "seek": 123548, "start": 1239.48, "end": 1243.48, "text": " We want to sort, find the most delayed, that's just a matter of sorting", "tokens": [50564, 492, 528, 281, 1333, 11, 915, 264, 881, 20268, 11, 300, 311, 445, 257, 1871, 295, 32411, 50764], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 259, "seek": 123548, "start": 1243.48, "end": 1246.48, "text": " so that our delays are descending.", "tokens": [50764, 370, 300, 527, 28610, 366, 40182, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 260, "seek": 123548, "start": 1246.48, "end": 1251.48, "text": " We can see the most delayed flight was 981 minutes.", "tokens": [50914, 492, 393, 536, 264, 881, 20268, 7018, 390, 20860, 16, 2077, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 261, "seek": 123548, "start": 1251.48, "end": 1256.48, "text": " So an impressive 16-hour delay.", "tokens": [51164, 407, 364, 8992, 3165, 12, 18048, 8577, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 262, "seek": 123548, "start": 1256.48, "end": 1259.48, "text": " Now normally flights aren't delayed that long,", "tokens": [51414, 823, 5646, 21089, 3212, 380, 20268, 300, 938, 11, 51564], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 263, "seek": 123548, "start": 1259.48, "end": 1262.48, "text": " not because flights aren't delayed that long", "tokens": [51564, 406, 570, 21089, 3212, 380, 20268, 300, 938, 51714], "temperature": 0.0, "avg_logprob": -0.11982443192425896, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.0006849069613963366}, {"id": 264, "seek": 126248, "start": 1262.48, "end": 1270.48, "text": " but generally airlines cancel the flights to make their departure delay statistics look better.", "tokens": [50364, 457, 5101, 37147, 10373, 264, 21089, 281, 652, 641, 25866, 8577, 12523, 574, 1101, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11744431888355929, "compression_ratio": 1.525, "no_speech_prob": 0.002347965957596898}, {"id": 265, "seek": 126248, "start": 1270.48, "end": 1273.48, "text": " So similarly we could do the same thing for arrival delay,", "tokens": [50764, 407, 14138, 321, 727, 360, 264, 912, 551, 337, 18365, 8577, 11, 50914], "temperature": 0.0, "avg_logprob": -0.11744431888355929, "compression_ratio": 1.525, "no_speech_prob": 0.002347965957596898}, {"id": 266, "seek": 126248, "start": 1273.48, "end": 1281.48, "text": " which is going to give us a pretty similar message.", "tokens": [50914, 597, 307, 516, 281, 976, 505, 257, 1238, 2531, 3636, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11744431888355929, "compression_ratio": 1.525, "no_speech_prob": 0.002347965957596898}, {"id": 267, "seek": 126248, "start": 1281.48, "end": 1288.48, "text": " And the other thing I wanted to show here is that you can arrange on kind of compound expressions.", "tokens": [51314, 400, 264, 661, 551, 286, 1415, 281, 855, 510, 307, 300, 291, 393, 9424, 322, 733, 295, 14154, 15277, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11744431888355929, "compression_ratio": 1.525, "no_speech_prob": 0.002347965957596898}, {"id": 268, "seek": 128848, "start": 1288.48, "end": 1293.48, "text": " I wanted to find the planes in a mode made up the most time", "tokens": [50364, 286, 1415, 281, 915, 264, 14952, 294, 257, 4391, 1027, 493, 264, 881, 565, 50614], "temperature": 0.0, "avg_logprob": -0.10937040502374823, "compression_ratio": 1.6266666666666667, "no_speech_prob": 0.029974743723869324}, {"id": 269, "seek": 128848, "start": 1293.48, "end": 1297.48, "text": " and there's the biggest difference between the departure and arrival delay.", "tokens": [50614, 293, 456, 311, 264, 3880, 2649, 1296, 264, 25866, 293, 18365, 8577, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10937040502374823, "compression_ratio": 1.6266666666666667, "no_speech_prob": 0.029974743723869324}, {"id": 270, "seek": 128848, "start": 1297.48, "end": 1303.48, "text": " So there's a flight, so for example this flight left one minute early", "tokens": [50814, 407, 456, 311, 257, 7018, 11, 370, 337, 1365, 341, 7018, 1411, 472, 3456, 2440, 51114], "temperature": 0.0, "avg_logprob": -0.10937040502374823, "compression_ratio": 1.6266666666666667, "no_speech_prob": 0.029974743723869324}, {"id": 271, "seek": 128848, "start": 1303.48, "end": 1307.48, "text": " and it arrived an hour and 10 minutes early.", "tokens": [51114, 293, 309, 6678, 364, 1773, 293, 1266, 2077, 2440, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10937040502374823, "compression_ratio": 1.6266666666666667, "no_speech_prob": 0.029974743723869324}, {"id": 272, "seek": 128848, "start": 1307.48, "end": 1311.48, "text": " So you can arrange on compound expressions", "tokens": [51314, 407, 291, 393, 9424, 322, 14154, 15277, 51514], "temperature": 0.0, "avg_logprob": -0.10937040502374823, "compression_ratio": 1.6266666666666667, "no_speech_prob": 0.029974743723869324}, {"id": 273, "seek": 128848, "start": 1311.48, "end": 1315.48, "text": " although generally it's going to be easier to add that as a new variable", "tokens": [51514, 4878, 5101, 309, 311, 516, 281, 312, 3571, 281, 909, 300, 382, 257, 777, 7006, 51714], "temperature": 0.0, "avg_logprob": -0.10937040502374823, "compression_ratio": 1.6266666666666667, "no_speech_prob": 0.029974743723869324}, {"id": 274, "seek": 131548, "start": 1315.48, "end": 1318.48, "text": " depending on what's going on and then arranged by that.", "tokens": [50364, 5413, 322, 437, 311, 516, 322, 293, 550, 18721, 538, 300, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 275, "seek": 131548, "start": 1318.48, "end": 1320.48, "text": " Why are you reporting this descending?", "tokens": [50514, 1545, 366, 291, 10031, 341, 40182, 30, 50614], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 276, "seek": 131548, "start": 1320.48, "end": 1326.48, "text": " Because I wanted to find the one, I wanted to find the biggest difference.", "tokens": [50614, 1436, 286, 1415, 281, 915, 264, 472, 11, 286, 1415, 281, 915, 264, 3880, 2649, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 277, "seek": 131548, "start": 1326.48, "end": 1329.48, "text": " I may have...", "tokens": [50914, 286, 815, 362, 485, 51064], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 278, "seek": 131548, "start": 1329.48, "end": 1332.48, "text": " Actually I got the same result.", "tokens": [51064, 5135, 286, 658, 264, 912, 1874, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 279, "seek": 131548, "start": 1332.48, "end": 1336.48, "text": " I may have hit this round the wrong way.", "tokens": [51214, 286, 815, 362, 2045, 341, 3098, 264, 2085, 636, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 280, "seek": 131548, "start": 1336.48, "end": 1339.48, "text": " Oh yeah.", "tokens": [51414, 876, 1338, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 281, "seek": 131548, "start": 1339.48, "end": 1343.48, "text": " So depending on which way round we need to track the arrival from departure", "tokens": [51564, 407, 5413, 322, 597, 636, 3098, 321, 643, 281, 2837, 264, 18365, 490, 25866, 51764], "temperature": 0.0, "avg_logprob": -0.3145861154074197, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.04742814227938652}, {"id": 282, "seek": 134348, "start": 1343.48, "end": 1346.48, "text": " to ascending or ascending.", "tokens": [50364, 281, 15526, 2029, 420, 15526, 2029, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 283, "seek": 134348, "start": 1346.48, "end": 1349.48, "text": " Any other questions about arrange?", "tokens": [50514, 2639, 661, 1651, 466, 9424, 30, 50664], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 284, "seek": 134348, "start": 1349.48, "end": 1353.48, "text": " I had a problem with the NAs, the first time I did something", "tokens": [50664, 286, 632, 257, 1154, 365, 264, 426, 10884, 11, 264, 700, 565, 286, 630, 746, 50864], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 285, "seek": 134348, "start": 1353.48, "end": 1355.48, "text": " I got all the NAs on top.", "tokens": [50864, 286, 658, 439, 264, 426, 10884, 322, 1192, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 286, "seek": 134348, "start": 1355.48, "end": 1359.48, "text": " I did it in a different way than you did once I...", "tokens": [50964, 286, 630, 309, 294, 257, 819, 636, 813, 291, 630, 1564, 286, 485, 51164], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 287, "seek": 134348, "start": 1359.48, "end": 1364.48, "text": " So NAs should always sort to the end and if they don't that's a bug.", "tokens": [51164, 407, 426, 10884, 820, 1009, 1333, 281, 264, 917, 293, 498, 436, 500, 380, 300, 311, 257, 7426, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 288, "seek": 134348, "start": 1364.48, "end": 1369.48, "text": " They do but what if I want the smallest without the NAs?", "tokens": [51414, 814, 360, 457, 437, 498, 286, 528, 264, 16998, 1553, 264, 426, 10884, 30, 51664], "temperature": 0.0, "avg_logprob": -0.2287171296399049, "compression_ratio": 1.5625, "no_speech_prob": 0.01818270795047283}, {"id": 289, "seek": 136948, "start": 1369.48, "end": 1373.48, "text": " So you have to use felt as a removal of the NAs currently.", "tokens": [50364, 407, 291, 362, 281, 764, 2762, 382, 257, 17933, 295, 264, 426, 10884, 4362, 13, 50564], "temperature": 0.0, "avg_logprob": -0.3064318912130007, "compression_ratio": 1.5677419354838709, "no_speech_prob": 0.01314826961606741}, {"id": 290, "seek": 136948, "start": 1373.48, "end": 1378.48, "text": " Is there an opposite of descending?", "tokens": [50564, 1119, 456, 364, 6182, 295, 40182, 30, 50814], "temperature": 0.0, "avg_logprob": -0.3064318912130007, "compression_ratio": 1.5677419354838709, "no_speech_prob": 0.01314826961606741}, {"id": 291, "seek": 136948, "start": 1378.48, "end": 1381.48, "text": " Yes, just don't do descending.", "tokens": [50814, 1079, 11, 445, 500, 380, 360, 40182, 13, 50964], "temperature": 0.0, "avg_logprob": -0.3064318912130007, "compression_ratio": 1.5677419354838709, "no_speech_prob": 0.01314826961606741}, {"id": 292, "seek": 136948, "start": 1381.48, "end": 1385.48, "text": " I think also the way that...", "tokens": [50964, 286, 519, 611, 264, 636, 300, 485, 51164], "temperature": 0.0, "avg_logprob": -0.3064318912130007, "compression_ratio": 1.5677419354838709, "no_speech_prob": 0.01314826961606741}, {"id": 293, "seek": 136948, "start": 1385.48, "end": 1391.48, "text": " I believe that if you do descending or descending that is ascending.", "tokens": [51164, 286, 1697, 300, 498, 291, 360, 40182, 420, 40182, 300, 307, 15526, 2029, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3064318912130007, "compression_ratio": 1.5677419354838709, "no_speech_prob": 0.01314826961606741}, {"id": 294, "seek": 136948, "start": 1391.48, "end": 1395.48, "text": " It's the one still.", "tokens": [51464, 467, 311, 264, 472, 920, 13, 51664], "temperature": 0.0, "avg_logprob": -0.3064318912130007, "compression_ratio": 1.5677419354838709, "no_speech_prob": 0.01314826961606741}, {"id": 295, "seek": 139548, "start": 1395.48, "end": 1399.48, "text": " If you really want an ascending function you can just do that.", "tokens": [50364, 759, 291, 534, 528, 364, 15526, 2029, 2445, 291, 393, 445, 360, 300, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16165196268182053, "compression_ratio": 1.6210526315789473, "no_speech_prob": 0.0010442606871947646}, {"id": 296, "seek": 139548, "start": 1405.48, "end": 1409.48, "text": " Okay, the starting to get more complicated.", "tokens": [50864, 1033, 11, 264, 2891, 281, 483, 544, 6179, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16165196268182053, "compression_ratio": 1.6210526315789473, "no_speech_prob": 0.0010442606871947646}, {"id": 297, "seek": 139548, "start": 1409.48, "end": 1413.48, "text": " The next verb is mutate which allows you to add new variables", "tokens": [51064, 440, 958, 9595, 307, 5839, 473, 597, 4045, 291, 281, 909, 777, 9102, 51264], "temperature": 0.0, "avg_logprob": -0.16165196268182053, "compression_ratio": 1.6210526315789473, "no_speech_prob": 0.0010442606871947646}, {"id": 298, "seek": 139548, "start": 1413.48, "end": 1416.48, "text": " that are functions of existing variables.", "tokens": [51264, 300, 366, 6828, 295, 6741, 9102, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16165196268182053, "compression_ratio": 1.6210526315789473, "no_speech_prob": 0.0010442606871947646}, {"id": 299, "seek": 139548, "start": 1416.48, "end": 1419.48, "text": " So here we're adding a new variable called double", "tokens": [51414, 407, 510, 321, 434, 5127, 257, 777, 7006, 1219, 3834, 51564], "temperature": 0.0, "avg_logprob": -0.16165196268182053, "compression_ratio": 1.6210526315789473, "no_speech_prob": 0.0010442606871947646}, {"id": 300, "seek": 139548, "start": 1419.48, "end": 1422.48, "text": " which is two times our existing value variable.", "tokens": [51564, 597, 307, 732, 1413, 527, 6741, 2158, 7006, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16165196268182053, "compression_ratio": 1.6210526315789473, "no_speech_prob": 0.0010442606871947646}, {"id": 301, "seek": 142248, "start": 1422.48, "end": 1425.48, "text": " So again in all of the dplyr functions", "tokens": [50364, 407, 797, 294, 439, 295, 264, 274, 2724, 81, 6828, 50514], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 302, "seek": 142248, "start": 1425.48, "end": 1430.48, "text": " you never need to explicitly refer to the data frame that you're working with.", "tokens": [50514, 291, 1128, 643, 281, 20803, 2864, 281, 264, 1412, 3920, 300, 291, 434, 1364, 365, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 303, "seek": 142248, "start": 1430.48, "end": 1432.48, "text": " That's always implicit.", "tokens": [50764, 663, 311, 1009, 26947, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 304, "seek": 142248, "start": 1432.48, "end": 1435.48, "text": " It's going to look for this value inside the data frame", "tokens": [50864, 467, 311, 516, 281, 574, 337, 341, 2158, 1854, 264, 1412, 3920, 51014], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 305, "seek": 142248, "start": 1435.48, "end": 1439.48, "text": " rather than in your global environment.", "tokens": [51014, 2831, 813, 294, 428, 4338, 2823, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 306, "seek": 142248, "start": 1439.48, "end": 1444.48, "text": " Mutate is very similar to transform and base r if you've used that.", "tokens": [51214, 18517, 473, 307, 588, 2531, 281, 4088, 293, 3096, 367, 498, 291, 600, 1143, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 307, "seek": 142248, "start": 1444.48, "end": 1448.48, "text": " One big difference with mutate is you can do multiple...", "tokens": [51464, 1485, 955, 2649, 365, 5839, 473, 307, 291, 393, 360, 3866, 485, 51664], "temperature": 0.0, "avg_logprob": -0.1118128959168779, "compression_ratio": 1.5739130434782609, "no_speech_prob": 0.0033127989154309034}, {"id": 308, "seek": 144848, "start": 1448.48, "end": 1453.48, "text": " In additional mutations or additional transformations", "tokens": [50364, 682, 4497, 29243, 420, 4497, 34852, 50614], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 309, "seek": 144848, "start": 1453.48, "end": 1456.48, "text": " you can refer to variables that you just created", "tokens": [50614, 291, 393, 2864, 281, 9102, 300, 291, 445, 2942, 50764], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 310, "seek": 144848, "start": 1456.48, "end": 1460.48, "text": " which you cannot do in transform and is a little bit annoying.", "tokens": [50764, 597, 291, 2644, 360, 294, 4088, 293, 307, 257, 707, 857, 11304, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 311, "seek": 144848, "start": 1460.48, "end": 1464.48, "text": " So here we first double value and then we make a new column called quadruple", "tokens": [50964, 407, 510, 321, 700, 3834, 2158, 293, 550, 321, 652, 257, 777, 7738, 1219, 10787, 894, 781, 51164], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 312, "seek": 144848, "start": 1464.48, "end": 1468.48, "text": " which is just two times double a variable we just created.", "tokens": [51164, 597, 307, 445, 732, 1413, 3834, 257, 7006, 321, 445, 2942, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 313, "seek": 144848, "start": 1468.48, "end": 1472.48, "text": " How does it compare to within?", "tokens": [51364, 1012, 775, 309, 6794, 281, 1951, 30, 51564], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 314, "seek": 144848, "start": 1472.48, "end": 1477.48, "text": " Basically I think within is a hideous monstrosity that no one should ever use.", "tokens": [51564, 8537, 286, 519, 1951, 307, 257, 6479, 563, 1108, 372, 2635, 507, 300, 572, 472, 820, 1562, 764, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11197078589237097, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.002061566337943077}, {"id": 315, "seek": 147748, "start": 1477.48, "end": 1481.48, "text": " And if you want to know more I can tell you.", "tokens": [50364, 400, 498, 291, 528, 281, 458, 544, 286, 393, 980, 291, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 316, "seek": 147748, "start": 1481.48, "end": 1485.48, "text": " Okay so your turn to create some variables.", "tokens": [50564, 1033, 370, 428, 1261, 281, 1884, 512, 9102, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 317, "seek": 147748, "start": 1485.48, "end": 1489.48, "text": " See if you can figure out the speed and miles per hour", "tokens": [50764, 3008, 498, 291, 393, 2573, 484, 264, 3073, 293, 6193, 680, 1773, 50964], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 318, "seek": 147748, "start": 1489.48, "end": 1492.48, "text": " which flight flew the fastest.", "tokens": [50964, 597, 7018, 15728, 264, 14573, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 319, "seek": 147748, "start": 1492.48, "end": 1496.48, "text": " See if you can create a new variable that shows how much time was made up", "tokens": [51114, 3008, 498, 291, 393, 1884, 257, 777, 7006, 300, 3110, 577, 709, 565, 390, 1027, 493, 51314], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 320, "seek": 147748, "start": 1496.48, "end": 1498.48, "text": " during the course of the flight or lost.", "tokens": [51314, 1830, 264, 1164, 295, 264, 7018, 420, 2731, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 321, "seek": 147748, "start": 1498.48, "end": 1502.48, "text": " And then how did I compute the hour and minute variables", "tokens": [51414, 400, 550, 577, 630, 286, 14722, 264, 1773, 293, 3456, 9102, 51614], "temperature": 0.0, "avg_logprob": -0.12493371439504099, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.0030743975657969713}, {"id": 322, "seek": 150248, "start": 1502.48, "end": 1506.48, "text": " from that departure variable?", "tokens": [50364, 490, 300, 25866, 7006, 30, 50564], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 323, "seek": 150248, "start": 1506.48, "end": 1510.48, "text": " Okay so if I wanted to compute the speed", "tokens": [50564, 1033, 370, 498, 286, 1415, 281, 14722, 264, 3073, 50764], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 324, "seek": 150248, "start": 1510.48, "end": 1514.48, "text": " that is just the distance divided by the time divided by 60", "tokens": [50764, 300, 307, 445, 264, 4560, 6666, 538, 264, 565, 6666, 538, 4060, 50964], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 325, "seek": 150248, "start": 1514.48, "end": 1517.48, "text": " because time is in minutes.", "tokens": [50964, 570, 565, 307, 294, 2077, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 326, "seek": 150248, "start": 1517.48, "end": 1521.48, "text": " So if we print that out", "tokens": [51114, 407, 498, 321, 4482, 300, 484, 51314], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 327, "seek": 150248, "start": 1521.48, "end": 1525.48, "text": " you know unless you make your screen really wide you can't see everything.", "tokens": [51314, 291, 458, 5969, 291, 652, 428, 2568, 534, 4874, 291, 393, 380, 536, 1203, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 328, "seek": 150248, "start": 1525.48, "end": 1529.48, "text": " So one thing you can do is use the view function", "tokens": [51514, 407, 472, 551, 291, 393, 360, 307, 764, 264, 1910, 2445, 51714], "temperature": 0.0, "avg_logprob": -0.07955857515335082, "compression_ratio": 1.5692307692307692, "no_speech_prob": 0.010521628893911839}, {"id": 329, "seek": 152948, "start": 1529.48, "end": 1533.48, "text": " which works in RStudio and other R ideas", "tokens": [50364, 597, 1985, 294, 497, 42665, 1004, 293, 661, 497, 3487, 50564], "temperature": 0.0, "avg_logprob": -0.1969309422507215, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.00306246941909194}, {"id": 330, "seek": 152948, "start": 1533.48, "end": 1537.48, "text": " which will just show all of your variables", "tokens": [50564, 597, 486, 445, 855, 439, 295, 428, 9102, 50764], "temperature": 0.0, "avg_logprob": -0.1969309422507215, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.00306246941909194}, {"id": 331, "seek": 152948, "start": 1537.48, "end": 1540.48, "text": " on a nice kind of scrollable table", "tokens": [50764, 322, 257, 1481, 733, 295, 11369, 712, 3199, 50914], "temperature": 0.0, "avg_logprob": -0.1969309422507215, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.00306246941909194}, {"id": 332, "seek": 152948, "start": 1540.48, "end": 1545.48, "text": " or you can always just select the variables you want to see", "tokens": [50914, 420, 291, 393, 1009, 445, 3048, 264, 9102, 291, 528, 281, 536, 51164], "temperature": 0.0, "avg_logprob": -0.1969309422507215, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.00306246941909194}, {"id": 333, "seek": 152948, "start": 1545.48, "end": 1549.48, "text": " so from like departure to speed.", "tokens": [51164, 370, 490, 411, 25866, 281, 3073, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1969309422507215, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.00306246941909194}, {"id": 334, "seek": 152948, "start": 1549.48, "end": 1554.48, "text": " So if you use a very handy way", "tokens": [51364, 407, 498, 291, 764, 257, 588, 13239, 636, 51614], "temperature": 0.0, "avg_logprob": -0.1969309422507215, "compression_ratio": 1.5220125786163523, "no_speech_prob": 0.00306246941909194}, {"id": 335, "seek": 155448, "start": 1554.48, "end": 1558.48, "text": " of just viewing a data frame in a nice table.", "tokens": [50364, 295, 445, 17480, 257, 1412, 3920, 294, 257, 1481, 3199, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11889693611546566, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.009913603775203228}, {"id": 336, "seek": 155448, "start": 1558.48, "end": 1562.48, "text": " Did you change flights?", "tokens": [50564, 2589, 291, 1319, 21089, 30, 50764], "temperature": 0.0, "avg_logprob": -0.11889693611546566, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.009913603775203228}, {"id": 337, "seek": 155448, "start": 1562.48, "end": 1566.48, "text": " Yes so in this case I modified flights because I wanted to create", "tokens": [50764, 1079, 370, 294, 341, 1389, 286, 15873, 21089, 570, 286, 1415, 281, 1884, 50964], "temperature": 0.0, "avg_logprob": -0.11889693611546566, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.009913603775203228}, {"id": 338, "seek": 155448, "start": 1566.48, "end": 1570.48, "text": " a new variable and modify that original data set to add that new variable", "tokens": [50964, 257, 777, 7006, 293, 16927, 300, 3380, 1412, 992, 281, 909, 300, 777, 7006, 51164], "temperature": 0.0, "avg_logprob": -0.11889693611546566, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.009913603775203228}, {"id": 339, "seek": 155448, "start": 1570.48, "end": 1574.48, "text": " and then I can sort it to find the fastest ones", "tokens": [51164, 293, 550, 286, 393, 1333, 309, 281, 915, 264, 14573, 2306, 51364], "temperature": 0.0, "avg_logprob": -0.11889693611546566, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.009913603775203228}, {"id": 340, "seek": 155448, "start": 1574.48, "end": 1579.48, "text": " and see 760 miles an hour.", "tokens": [51364, 293, 536, 1614, 4550, 6193, 364, 1773, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11889693611546566, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.009913603775203228}, {"id": 341, "seek": 157948, "start": 1579.48, "end": 1583.48, "text": " When you mutate does there", "tokens": [50364, 1133, 291, 5839, 473, 775, 456, 50564], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 342, "seek": 157948, "start": 1583.48, "end": 1587.48, "text": " an easy way to specify a position?", "tokens": [50564, 364, 1858, 636, 281, 16500, 257, 2535, 30, 50764], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 343, "seek": 157948, "start": 1587.48, "end": 1591.48, "text": " No so when you add new variables they always go on to the end of the data frame.", "tokens": [50764, 883, 370, 562, 291, 909, 777, 9102, 436, 1009, 352, 322, 281, 264, 917, 295, 264, 1412, 3920, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 344, "seek": 157948, "start": 1591.48, "end": 1595.48, "text": " If you wanted to reposition them there's currently no particularly easy", "tokens": [50964, 759, 291, 1415, 281, 1085, 5830, 552, 456, 311, 4362, 572, 4098, 1858, 51164], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 345, "seek": 157948, "start": 1595.48, "end": 1599.48, "text": " way to do that. You could create a big select statement but it's", "tokens": [51164, 636, 281, 360, 300, 13, 509, 727, 1884, 257, 955, 3048, 5629, 457, 309, 311, 51364], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 346, "seek": 157948, "start": 1599.48, "end": 1603.48, "text": " kind of a pain.", "tokens": [51364, 733, 295, 257, 1822, 13, 51564], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 347, "seek": 157948, "start": 1603.48, "end": 1607.48, "text": " We could create this delta variable", "tokens": [51564, 492, 727, 1884, 341, 8289, 7006, 51764], "temperature": 0.0, "avg_logprob": -0.19503335519270462, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.021688316017389297}, {"id": 348, "seek": 160748, "start": 1607.48, "end": 1611.48, "text": " which is just the difference between the departure and arrival delay.", "tokens": [50364, 597, 307, 445, 264, 2649, 1296, 264, 25866, 293, 18365, 8577, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 349, "seek": 160748, "start": 1611.48, "end": 1615.48, "text": " If you didn't care about the direction", "tokens": [50564, 759, 291, 994, 380, 1127, 466, 264, 3513, 50764], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 350, "seek": 160748, "start": 1615.48, "end": 1619.48, "text": " you could do whatever you want in this", "tokens": [50764, 291, 727, 360, 2035, 291, 528, 294, 341, 50964], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 351, "seek": 160748, "start": 1619.48, "end": 1623.48, "text": " whatever R expression you want.", "tokens": [50964, 2035, 497, 6114, 291, 528, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 352, "seek": 160748, "start": 1623.48, "end": 1627.48, "text": " The last thing I wanted to mention", "tokens": [51164, 440, 1036, 551, 286, 1415, 281, 2152, 51364], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 353, "seek": 160748, "start": 1627.48, "end": 1631.48, "text": " is just a useful trick. If I have this departure", "tokens": [51364, 307, 445, 257, 4420, 4282, 13, 759, 286, 362, 341, 25866, 51564], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 354, "seek": 160748, "start": 1631.48, "end": 1635.48, "text": " we have the first two digits of the hour and the second two digits of the minute", "tokens": [51564, 321, 362, 264, 700, 732, 27011, 295, 264, 1773, 293, 264, 1150, 732, 27011, 295, 264, 3456, 51764], "temperature": 0.0, "avg_logprob": -0.09901736764346852, "compression_ratio": 1.7461928934010151, "no_speech_prob": 0.0022643718402832747}, {"id": 355, "seek": 163548, "start": 1635.48, "end": 1639.48, "text": " you can use the integer division operator", "tokens": [50364, 291, 393, 764, 264, 24922, 10044, 12973, 50564], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 356, "seek": 163548, "start": 1639.48, "end": 1643.48, "text": " and the modular operator to extract those pieces out.", "tokens": [50564, 293, 264, 31111, 12973, 281, 8947, 729, 3755, 484, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 357, "seek": 163548, "start": 1643.48, "end": 1647.48, "text": " This is just a useful little trick if you want to pull out certain digits", "tokens": [50764, 639, 307, 445, 257, 4420, 707, 4282, 498, 291, 528, 281, 2235, 484, 1629, 27011, 50964], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 358, "seek": 163548, "start": 1647.48, "end": 1651.48, "text": " from a long number.", "tokens": [50964, 490, 257, 938, 1230, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 359, "seek": 163548, "start": 1651.48, "end": 1655.48, "text": " Any other questions about", "tokens": [51164, 2639, 661, 1651, 466, 51364], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 360, "seek": 163548, "start": 1655.48, "end": 1659.48, "text": " mutate?", "tokens": [51364, 5839, 473, 30, 51564], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 361, "seek": 163548, "start": 1659.48, "end": 1663.48, "text": " Okay next I want to talk about a new function group phi", "tokens": [51564, 1033, 958, 286, 528, 281, 751, 466, 257, 777, 2445, 1594, 13107, 51764], "temperature": 0.0, "avg_logprob": -0.13402749432457817, "compression_ratio": 1.5, "no_speech_prob": 0.003250350244343281}, {"id": 362, "seek": 166348, "start": 1663.48, "end": 1667.48, "text": " which is summarized together. You can use summarized and regular data frames", "tokens": [50364, 597, 307, 14611, 1602, 1214, 13, 509, 393, 764, 14611, 1602, 293, 3890, 1412, 12083, 50564], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 363, "seek": 166348, "start": 1667.48, "end": 1671.48, "text": " but you always get a data frame that is only one row", "tokens": [50564, 457, 291, 1009, 483, 257, 1412, 3920, 300, 307, 787, 472, 5386, 50764], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 364, "seek": 166348, "start": 1671.48, "end": 1675.48, "text": " which is typically not very useful.", "tokens": [50764, 597, 307, 5850, 406, 588, 4420, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 365, "seek": 166348, "start": 1675.48, "end": 1679.48, "text": " That's exactly what I said. So summarized is going to give you a one row", "tokens": [50964, 663, 311, 2293, 437, 286, 848, 13, 407, 14611, 1602, 307, 516, 281, 976, 291, 257, 472, 5386, 51164], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 366, "seek": 166348, "start": 1679.48, "end": 1683.48, "text": " data frame. What you're going to want to do is actually group your data first", "tokens": [51164, 1412, 3920, 13, 708, 291, 434, 516, 281, 528, 281, 360, 307, 767, 1594, 428, 1412, 700, 51364], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 367, "seek": 166348, "start": 1683.48, "end": 1687.48, "text": " and then summarized will operate by group.", "tokens": [51364, 293, 550, 14611, 1602, 486, 9651, 538, 1594, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 368, "seek": 166348, "start": 1687.48, "end": 1691.48, "text": " Here we're saying create a new data frame", "tokens": [51564, 1692, 321, 434, 1566, 1884, 257, 777, 1412, 3920, 51764], "temperature": 0.0, "avg_logprob": -0.13131588871039232, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.032503917813301086}, {"id": 369, "seek": 169148, "start": 1691.48, "end": 1695.48, "text": " and use this old data frame grouped by color", "tokens": [50364, 293, 764, 341, 1331, 1412, 3920, 41877, 538, 2017, 50564], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 370, "seek": 169148, "start": 1695.48, "end": 1699.48, "text": " and then we're going to summarize this and for each group", "tokens": [50564, 293, 550, 321, 434, 516, 281, 20858, 341, 293, 337, 1184, 1594, 50764], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 371, "seek": 169148, "start": 1699.48, "end": 1703.48, "text": " compute the total by summing up the value of your vehicle.", "tokens": [50764, 14722, 264, 3217, 538, 2408, 2810, 493, 264, 2158, 295, 428, 5864, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 372, "seek": 169148, "start": 1703.48, "end": 1707.48, "text": " So I'm going to create four useful ways", "tokens": [50964, 407, 286, 478, 516, 281, 1884, 1451, 4420, 2098, 51164], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 373, "seek": 169148, "start": 1707.48, "end": 1711.48, "text": " of grouping the flights data. We might want to group it by date", "tokens": [51164, 295, 40149, 264, 21089, 1412, 13, 492, 1062, 528, 281, 1594, 309, 538, 4002, 51364], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 374, "seek": 169148, "start": 1711.48, "end": 1715.48, "text": " we might want to group it by hour, we might want to group it by plane", "tokens": [51364, 321, 1062, 528, 281, 1594, 309, 538, 1773, 11, 321, 1062, 528, 281, 1594, 309, 538, 5720, 51564], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 375, "seek": 169148, "start": 1715.48, "end": 1719.48, "text": " or we might want to group it by destination.", "tokens": [51564, 420, 321, 1062, 528, 281, 1594, 309, 538, 12236, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07557805061340332, "compression_ratio": 1.9387755102040816, "no_speech_prob": 0.0012520301388576627}, {"id": 376, "seek": 171948, "start": 1719.48, "end": 1723.48, "text": " Just to bear in mind when you do create all these groupings", "tokens": [50364, 1449, 281, 6155, 294, 1575, 562, 291, 360, 1884, 439, 613, 1594, 1109, 50564], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 377, "seek": 171948, "start": 1723.48, "end": 1727.48, "text": " dplyr is sort of smart enough that doesn't create a complete copy", "tokens": [50564, 274, 2724, 81, 307, 1333, 295, 4069, 1547, 300, 1177, 380, 1884, 257, 3566, 5055, 50764], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 378, "seek": 171948, "start": 1727.48, "end": 1731.48, "text": " of your data every single time. It works the same way as the rest", "tokens": [50764, 295, 428, 1412, 633, 2167, 565, 13, 467, 1985, 264, 912, 636, 382, 264, 1472, 50964], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 379, "seek": 171948, "start": 1731.48, "end": 1735.48, "text": " of R, it doesn't sort of a lazy way. If you modify one of these data sets", "tokens": [50964, 295, 497, 11, 309, 1177, 380, 1333, 295, 257, 14847, 636, 13, 759, 291, 16927, 472, 295, 613, 1412, 6352, 51164], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 380, "seek": 171948, "start": 1735.48, "end": 1739.48, "text": " you'll have to create a copy but until you do so they all point to the same", "tokens": [51164, 291, 603, 362, 281, 1884, 257, 5055, 457, 1826, 291, 360, 370, 436, 439, 935, 281, 264, 912, 51364], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 381, "seek": 171948, "start": 1739.48, "end": 1743.48, "text": " place. So grouping data doesn't", "tokens": [51364, 1081, 13, 407, 40149, 1412, 1177, 380, 51564], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 382, "seek": 171948, "start": 1743.48, "end": 1747.48, "text": " use up, it doesn't create a copy of the data, it does use up a little bit more", "tokens": [51564, 764, 493, 11, 309, 1177, 380, 1884, 257, 5055, 295, 264, 1412, 11, 309, 775, 764, 493, 257, 707, 857, 544, 51764], "temperature": 0.0, "avg_logprob": -0.12538746643066406, "compression_ratio": 1.8677685950413223, "no_speech_prob": 0.0035515211056917906}, {"id": 383, "seek": 174748, "start": 1747.48, "end": 1751.48, "text": " memory because grouping builds up an index so", "tokens": [50364, 4675, 570, 40149, 15182, 493, 364, 8186, 370, 50564], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 384, "seek": 174748, "start": 1751.48, "end": 1755.48, "text": " you know what observations are in each group.", "tokens": [50564, 291, 458, 437, 18163, 366, 294, 1184, 1594, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 385, "seek": 174748, "start": 1755.48, "end": 1759.48, "text": " Now there are lots of summary functions you can use, most of these", "tokens": [50764, 823, 456, 366, 3195, 295, 12691, 6828, 291, 393, 764, 11, 881, 295, 613, 50964], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 386, "seek": 174748, "start": 1759.48, "end": 1763.48, "text": " are pretty standard, minimum, medium, maximum", "tokens": [50964, 366, 1238, 3832, 11, 7285, 11, 6399, 11, 6674, 51164], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 387, "seek": 174748, "start": 1763.48, "end": 1767.48, "text": " you can extract contiles, there are two functions", "tokens": [51164, 291, 393, 8947, 660, 4680, 11, 456, 366, 732, 6828, 51364], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 388, "seek": 174748, "start": 1767.48, "end": 1771.48, "text": " that are special in dplyr in which just", "tokens": [51364, 300, 366, 2121, 294, 274, 2724, 81, 294, 597, 445, 51564], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 389, "seek": 174748, "start": 1771.48, "end": 1775.48, "text": " tells you how many observations are in a group, indistinct", "tokens": [51564, 5112, 291, 577, 867, 18163, 366, 294, 257, 1594, 11, 1016, 13986, 51764], "temperature": 0.0, "avg_logprob": -0.09160021218386563, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0029761178884655237}, {"id": 390, "seek": 177548, "start": 1775.48, "end": 1779.48, "text": " and I should have a", "tokens": [50364, 293, 286, 820, 362, 257, 50564], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 391, "seek": 177548, "start": 1779.48, "end": 1783.48, "text": " x there, tells you how many different observations", "tokens": [50564, 2031, 456, 11, 5112, 291, 577, 867, 819, 18163, 50764], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 392, "seek": 177548, "start": 1783.48, "end": 1787.48, "text": " are in a variable, that's the same as doing", "tokens": [50764, 366, 294, 257, 7006, 11, 300, 311, 264, 912, 382, 884, 50964], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 393, "seek": 177548, "start": 1787.48, "end": 1791.48, "text": " length unique x but it's a little bit more efficient.", "tokens": [50964, 4641, 3845, 2031, 457, 309, 311, 257, 707, 857, 544, 7148, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 394, "seek": 177548, "start": 1791.48, "end": 1795.48, "text": " You can sum, you can compute means. It's also often", "tokens": [51164, 509, 393, 2408, 11, 291, 393, 14722, 1355, 13, 467, 311, 611, 2049, 51364], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 395, "seek": 177548, "start": 1795.48, "end": 1799.48, "text": " useful to do summaries of logical vectors because", "tokens": [51364, 4420, 281, 360, 8367, 4889, 295, 14978, 18875, 570, 51564], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 396, "seek": 177548, "start": 1799.48, "end": 1803.48, "text": " when you take a logical vector and treat it like it's a numeric", "tokens": [51564, 562, 291, 747, 257, 14978, 8062, 293, 2387, 309, 411, 309, 311, 257, 7866, 299, 51764], "temperature": 0.0, "avg_logprob": -0.09063760969373914, "compression_ratio": 1.560747663551402, "no_speech_prob": 0.005368168465793133}, {"id": 397, "seek": 180348, "start": 1803.48, "end": 1807.48, "text": " all the falses turn into zeros and the trues turn into ones", "tokens": [50364, 439, 264, 16720, 279, 1261, 666, 35193, 293, 264, 504, 1247, 1261, 666, 2306, 50564], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 398, "seek": 180348, "start": 1807.48, "end": 1811.48, "text": " so what that means is when you sum a logical vector it tells", "tokens": [50564, 370, 437, 300, 1355, 307, 562, 291, 2408, 257, 14978, 8062, 309, 5112, 50764], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 399, "seek": 180348, "start": 1811.48, "end": 1815.48, "text": " you how many trues there were so this would tell you how many values", "tokens": [50764, 291, 577, 867, 504, 1247, 456, 645, 370, 341, 576, 980, 291, 577, 867, 4190, 50964], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 400, "seek": 180348, "start": 1815.48, "end": 1819.48, "text": " of x are greater than 10. The mean is just the sum", "tokens": [50964, 295, 2031, 366, 5044, 813, 1266, 13, 440, 914, 307, 445, 264, 2408, 51164], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 401, "seek": 180348, "start": 1819.48, "end": 1823.48, "text": " divided by the length so the mean of a logical vector is the", "tokens": [51164, 6666, 538, 264, 4641, 370, 264, 914, 295, 257, 14978, 8062, 307, 264, 51364], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 402, "seek": 180348, "start": 1823.48, "end": 1827.48, "text": " proportion of values of the true. There's a really useful little", "tokens": [51364, 16068, 295, 4190, 295, 264, 2074, 13, 821, 311, 257, 534, 4420, 707, 51564], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 403, "seek": 180348, "start": 1827.48, "end": 1831.48, "text": " trick. And then lots of other ways of measuring", "tokens": [51564, 4282, 13, 400, 550, 3195, 295, 661, 2098, 295, 13389, 51764], "temperature": 0.0, "avg_logprob": -0.10203663656644732, "compression_ratio": 1.7922077922077921, "no_speech_prob": 0.004259970970451832}, {"id": 404, "seek": 183148, "start": 1831.48, "end": 1835.48, "text": " the variation, standard deviation, variance, interquadal range,", "tokens": [50364, 264, 12990, 11, 3832, 25163, 11, 21977, 11, 728, 358, 345, 304, 3613, 11, 50564], "temperature": 0.0, "avg_logprob": -0.17280581547663762, "compression_ratio": 1.539877300613497, "no_speech_prob": 0.006364773493260145}, {"id": 405, "seek": 183148, "start": 1835.48, "end": 1839.48, "text": " median absolute deviation. So these are all just standard", "tokens": [50564, 26779, 8236, 25163, 13, 407, 613, 366, 439, 445, 3832, 50764], "temperature": 0.0, "avg_logprob": -0.17280581547663762, "compression_ratio": 1.539877300613497, "no_speech_prob": 0.006364773493260145}, {"id": 406, "seek": 183148, "start": 1839.48, "end": 1843.48, "text": " functions.", "tokens": [50764, 6828, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17280581547663762, "compression_ratio": 1.539877300613497, "no_speech_prob": 0.006364773493260145}, {"id": 407, "seek": 183148, "start": 1849.48, "end": 1853.48, "text": " Okay what I want you guys, what I've shown here is the distribution", "tokens": [51264, 1033, 437, 286, 528, 291, 1074, 11, 437, 286, 600, 4898, 510, 307, 264, 7316, 51464], "temperature": 0.0, "avg_logprob": -0.17280581547663762, "compression_ratio": 1.539877300613497, "no_speech_prob": 0.006364773493260145}, {"id": 408, "seek": 183148, "start": 1853.48, "end": 1857.48, "text": " of departure delays. So I've got two views of this", "tokens": [51464, 295, 25866, 28610, 13, 407, 286, 600, 658, 732, 6809, 295, 341, 51664], "temperature": 0.0, "avg_logprob": -0.17280581547663762, "compression_ratio": 1.539877300613497, "no_speech_prob": 0.006364773493260145}, {"id": 409, "seek": 185748, "start": 1857.48, "end": 1861.48, "text": " one which shows all of the delays and one which just shows the delays less than", "tokens": [50364, 472, 597, 3110, 439, 295, 264, 28610, 293, 472, 597, 445, 3110, 264, 28610, 1570, 813, 50564], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 410, "seek": 185748, "start": 1861.48, "end": 1865.48, "text": " like two hours. So what I want you to do with your neighbor for two minutes", "tokens": [50564, 411, 732, 2496, 13, 407, 437, 286, 528, 291, 281, 360, 365, 428, 5987, 337, 732, 2077, 50764], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 411, "seek": 185748, "start": 1865.48, "end": 1869.48, "text": " is just quickly brainstorm given this distribution", "tokens": [50764, 307, 445, 2661, 35245, 2212, 341, 7316, 50964], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 412, "seek": 185748, "start": 1869.48, "end": 1873.48, "text": " given what you know about flight delays", "tokens": [50964, 2212, 437, 291, 458, 466, 7018, 28610, 51164], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 413, "seek": 185748, "start": 1873.48, "end": 1877.48, "text": " how might you want to summarize this distribution. What function might", "tokens": [51164, 577, 1062, 291, 528, 281, 20858, 341, 7316, 13, 708, 2445, 1062, 51364], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 414, "seek": 185748, "start": 1877.48, "end": 1881.48, "text": " what you want to use or do you want to use a mean or a median or something else.", "tokens": [51364, 437, 291, 528, 281, 764, 420, 360, 291, 528, 281, 764, 257, 914, 420, 257, 26779, 420, 746, 1646, 13, 51564], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 415, "seek": 185748, "start": 1881.48, "end": 1885.48, "text": " So take two minutes starting now, talk it over with your neighbor.", "tokens": [51564, 407, 747, 732, 2077, 2891, 586, 11, 751, 309, 670, 365, 428, 5987, 13, 51764], "temperature": 0.0, "avg_logprob": -0.107155029926825, "compression_ratio": 1.8902439024390243, "no_speech_prob": 0.0018951656529679894}, {"id": 416, "seek": 188548, "start": 1885.48, "end": 1889.48, "text": " So we're going to summarize by date", "tokens": [50364, 407, 321, 434, 516, 281, 20858, 538, 4002, 50564], "temperature": 0.0, "avg_logprob": -0.1483299497147681, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003097756067290902}, {"id": 417, "seek": 188548, "start": 1889.48, "end": 1893.48, "text": " what's one way we could use to summarize the distribution of", "tokens": [50564, 437, 311, 472, 636, 321, 727, 764, 281, 20858, 264, 7316, 295, 50764], "temperature": 0.0, "avg_logprob": -0.1483299497147681, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003097756067290902}, {"id": 418, "seek": 188548, "start": 1893.48, "end": 1897.48, "text": " delays. The median? We could use the median", "tokens": [50764, 28610, 13, 440, 26779, 30, 492, 727, 764, 264, 26779, 50964], "temperature": 0.0, "avg_logprob": -0.1483299497147681, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003097756067290902}, {"id": 419, "seek": 188548, "start": 1897.48, "end": 1901.48, "text": " I mean probably want to use the departure delay", "tokens": [50964, 286, 914, 1391, 528, 281, 764, 264, 25866, 8577, 51164], "temperature": 0.0, "avg_logprob": -0.1483299497147681, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003097756067290902}, {"id": 420, "seek": 188548, "start": 1901.48, "end": 1905.48, "text": " so if we just run that", "tokens": [51164, 370, 498, 321, 445, 1190, 300, 51364], "temperature": 0.0, "avg_logprob": -0.1483299497147681, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003097756067290902}, {"id": 421, "seek": 188548, "start": 1909.48, "end": 1913.48, "text": " we are going to get a new data frame and it is", "tokens": [51564, 321, 366, 516, 281, 483, 257, 777, 1412, 3920, 293, 309, 307, 51764], "temperature": 0.0, "avg_logprob": -0.1483299497147681, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003097756067290902}, {"id": 422, "seek": 191348, "start": 1913.48, "end": 1917.48, "text": " 265 rows which you should have anticipated. You know how many", "tokens": [50364, 7551, 20, 13241, 597, 291, 820, 362, 23267, 13, 509, 458, 577, 867, 50564], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 423, "seek": 191348, "start": 1917.48, "end": 1921.48, "text": " days there are in a year. I've got one little problem here", "tokens": [50564, 1708, 456, 366, 294, 257, 1064, 13, 286, 600, 658, 472, 707, 1154, 510, 50764], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 424, "seek": 191348, "start": 1921.48, "end": 1925.48, "text": " probably want to use Na.Ramq was true", "tokens": [50764, 1391, 528, 281, 764, 6056, 13, 49, 335, 80, 390, 2074, 50964], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 425, "seek": 191348, "start": 1925.48, "end": 1929.48, "text": " let's do that.", "tokens": [50964, 718, 311, 360, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 426, "seek": 191348, "start": 1929.48, "end": 1933.48, "text": " How else could we summarize it?", "tokens": [51164, 1012, 1646, 727, 321, 20858, 309, 30, 51364], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 427, "seek": 191348, "start": 1933.48, "end": 1937.48, "text": " The mean is another obvious one", "tokens": [51364, 440, 914, 307, 1071, 6322, 472, 51564], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 428, "seek": 191348, "start": 1937.48, "end": 1941.48, "text": " let's just assume we've got that", "tokens": [51564, 718, 311, 445, 6552, 321, 600, 658, 300, 51764], "temperature": 0.0, "avg_logprob": -0.2245404005050659, "compression_ratio": 1.4136125654450262, "no_speech_prob": 0.004406854044646025}, {"id": 429, "seek": 194148, "start": 1941.48, "end": 1945.48, "text": " What else might you want to see? 90% quanta.", "tokens": [50364, 708, 1646, 1062, 291, 528, 281, 536, 30, 4289, 4, 4426, 64, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 430, "seek": 194148, "start": 1945.48, "end": 1949.48, "text": " Okay we've got max", "tokens": [50564, 1033, 321, 600, 658, 11469, 50764], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 431, "seek": 194148, "start": 1949.48, "end": 1953.48, "text": " and actually typing all of this Na.Ramq.true", "tokens": [50764, 293, 767, 18444, 439, 295, 341, 6056, 13, 49, 335, 80, 13, 6903, 622, 50964], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 432, "seek": 194148, "start": 1953.48, "end": 1957.48, "text": " is going to get tedious real fast so I'm just going to filter", "tokens": [50964, 307, 516, 281, 483, 38284, 957, 2370, 370, 286, 478, 445, 516, 281, 6608, 51164], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 433, "seek": 194148, "start": 1957.48, "end": 1961.48, "text": " it and I say I want all of the ones that are not missing", "tokens": [51164, 309, 293, 286, 584, 286, 528, 439, 295, 264, 2306, 300, 366, 406, 5361, 51364], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 434, "seek": 194148, "start": 1961.48, "end": 1965.48, "text": " okay so that way I can just drop this off", "tokens": [51364, 1392, 370, 300, 636, 286, 393, 445, 3270, 341, 766, 51564], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 435, "seek": 194148, "start": 1965.48, "end": 1969.48, "text": " and I'll bother typing it", "tokens": [51564, 293, 286, 603, 8677, 18444, 309, 51764], "temperature": 0.0, "avg_logprob": -0.18387487660283627, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.0017705628415569663}, {"id": 436, "seek": 196948, "start": 1969.48, "end": 1973.48, "text": " so that's the median, the mean, the maximum and then something", "tokens": [50364, 370, 300, 311, 264, 26779, 11, 264, 914, 11, 264, 6674, 293, 550, 746, 50564], "temperature": 0.0, "avg_logprob": -0.14322782285285718, "compression_ratio": 1.4294871794871795, "no_speech_prob": 0.0004508269194047898}, {"id": 437, "seek": 196948, "start": 1973.48, "end": 1977.48, "text": " in between we could get the 90th", "tokens": [50564, 294, 1296, 321, 727, 483, 264, 4289, 392, 50764], "temperature": 0.0, "avg_logprob": -0.14322782285285718, "compression_ratio": 1.4294871794871795, "no_speech_prob": 0.0004508269194047898}, {"id": 438, "seek": 196948, "start": 1977.48, "end": 1981.48, "text": " quanta. Remember how to use that function", "tokens": [50764, 4426, 64, 13, 5459, 577, 281, 764, 300, 2445, 50964], "temperature": 0.0, "avg_logprob": -0.14322782285285718, "compression_ratio": 1.4294871794871795, "no_speech_prob": 0.0004508269194047898}, {"id": 439, "seek": 196948, "start": 1985.48, "end": 1989.48, "text": " Any other ideas?", "tokens": [51164, 2639, 661, 3487, 30, 51364], "temperature": 0.0, "avg_logprob": -0.14322782285285718, "compression_ratio": 1.4294871794871795, "no_speech_prob": 0.0004508269194047898}, {"id": 440, "seek": 196948, "start": 1989.48, "end": 1993.48, "text": " Is there a way to for example", "tokens": [51364, 1119, 456, 257, 636, 281, 337, 1365, 51564], "temperature": 0.0, "avg_logprob": -0.14322782285285718, "compression_ratio": 1.4294871794871795, "no_speech_prob": 0.0004508269194047898}, {"id": 441, "seek": 196948, "start": 1993.48, "end": 1997.48, "text": " compute more than just the 90% quanta?", "tokens": [51564, 14722, 544, 813, 445, 264, 4289, 4, 4426, 64, 30, 51764], "temperature": 0.0, "avg_logprob": -0.14322782285285718, "compression_ratio": 1.4294871794871795, "no_speech_prob": 0.0004508269194047898}, {"id": 442, "seek": 199748, "start": 1997.48, "end": 2001.48, "text": " Currently you have to type them in like this", "tokens": [50364, 19964, 291, 362, 281, 2010, 552, 294, 411, 341, 50564], "temperature": 0.0, "avg_logprob": -0.1849461945009903, "compression_ratio": 1.6583850931677018, "no_speech_prob": 0.003927443642169237}, {"id": 443, "seek": 199748, "start": 2001.48, "end": 2005.48, "text": " but there will be some way in the future that you do that", "tokens": [50564, 457, 456, 486, 312, 512, 636, 294, 264, 2027, 300, 291, 360, 300, 50764], "temperature": 0.0, "avg_logprob": -0.1849461945009903, "compression_ratio": 1.6583850931677018, "no_speech_prob": 0.003927443642169237}, {"id": 444, "seek": 199748, "start": 2009.48, "end": 2013.48, "text": " Yeah we could also do some thresholds", "tokens": [50964, 865, 321, 727, 611, 360, 512, 14678, 82, 51164], "temperature": 0.0, "avg_logprob": -0.1849461945009903, "compression_ratio": 1.6583850931677018, "no_speech_prob": 0.003927443642169237}, {"id": 445, "seek": 199748, "start": 2013.48, "end": 2017.48, "text": " well first of all we could say", "tokens": [51164, 731, 700, 295, 439, 321, 727, 584, 51364], "temperature": 0.0, "avg_logprob": -0.1849461945009903, "compression_ratio": 1.6583850931677018, "no_speech_prob": 0.003927443642169237}, {"id": 446, "seek": 199748, "start": 2017.48, "end": 2021.48, "text": " what's the proportion that is delayed", "tokens": [51364, 437, 311, 264, 16068, 300, 307, 20268, 51564], "temperature": 0.0, "avg_logprob": -0.1849461945009903, "compression_ratio": 1.6583850931677018, "no_speech_prob": 0.003927443642169237}, {"id": 447, "seek": 199748, "start": 2021.48, "end": 2025.48, "text": " so that is the average of all of the ones where the delay", "tokens": [51564, 370, 300, 307, 264, 4274, 295, 439, 295, 264, 2306, 689, 264, 8577, 51764], "temperature": 0.0, "avg_logprob": -0.1849461945009903, "compression_ratio": 1.6583850931677018, "no_speech_prob": 0.003927443642169237}, {"id": 448, "seek": 202548, "start": 2025.48, "end": 2029.48, "text": " is greater than zero", "tokens": [50364, 307, 5044, 813, 4018, 50564], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 449, "seek": 202548, "start": 2029.48, "end": 2031.48, "text": " so that is the", "tokens": [50564, 370, 300, 307, 264, 50664], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 450, "seek": 202548, "start": 2031.48, "end": 2033.48, "text": " presently high", "tokens": [50664, 1974, 356, 1090, 50764], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 451, "seek": 202548, "start": 2033.48, "end": 2037.48, "text": " but you might say well who really cares if it's only", "tokens": [50764, 457, 291, 1062, 584, 731, 567, 534, 12310, 498, 309, 311, 787, 50964], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 452, "seek": 202548, "start": 2037.48, "end": 2041.48, "text": " a 5 minute delay or a 10 minute delay", "tokens": [50964, 257, 1025, 3456, 8577, 420, 257, 1266, 3456, 8577, 51164], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 453, "seek": 202548, "start": 2041.48, "end": 2045.48, "text": " I might just say arbitrarily like a 15 minute delay that's not bad", "tokens": [51164, 286, 1062, 445, 584, 19071, 3289, 411, 257, 2119, 3456, 8577, 300, 311, 406, 1578, 51364], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 454, "seek": 202548, "start": 2045.48, "end": 2049.48, "text": " Why are we looking at departure not arrival?", "tokens": [51364, 1545, 366, 321, 1237, 412, 25866, 406, 18365, 30, 51564], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 455, "seek": 202548, "start": 2049.48, "end": 2053.48, "text": " Yeah so equally you might say well it's", "tokens": [51564, 865, 370, 12309, 291, 1062, 584, 731, 309, 311, 51764], "temperature": 0.0, "avg_logprob": -0.15892504496746754, "compression_ratio": 1.6277777777777778, "no_speech_prob": 0.01270241104066372}, {"id": 456, "seek": 205348, "start": 2053.48, "end": 2057.48, "text": " the impact on our arrival that's what really matters because that's", "tokens": [50364, 264, 2712, 322, 527, 18365, 300, 311, 437, 534, 7001, 570, 300, 311, 50564], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 457, "seek": 205348, "start": 2057.48, "end": 2061.48, "text": " someone picking us up at the airport and our flight", "tokens": [50564, 1580, 8867, 505, 493, 412, 264, 10155, 293, 527, 7018, 50764], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 458, "seek": 205348, "start": 2061.48, "end": 2065.48, "text": " is now delayed by an hour and they're getting angry so we could switch all this to arrival", "tokens": [50764, 307, 586, 20268, 538, 364, 1773, 293, 436, 434, 1242, 6884, 370, 321, 727, 3679, 439, 341, 281, 18365, 50964], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 459, "seek": 205348, "start": 2065.48, "end": 2069.48, "text": " delay too and the results are pretty similar", "tokens": [50964, 8577, 886, 293, 264, 3542, 366, 1238, 2531, 51164], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 460, "seek": 205348, "start": 2069.48, "end": 2073.48, "text": " So 15 minutes is kind of arbitrary you know you could look at a few", "tokens": [51164, 407, 2119, 2077, 307, 733, 295, 23211, 291, 458, 291, 727, 574, 412, 257, 1326, 51364], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 461, "seek": 205348, "start": 2073.48, "end": 2077.48, "text": " other ones if you wanted to do that", "tokens": [51364, 661, 2306, 498, 291, 1415, 281, 360, 300, 51564], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 462, "seek": 205348, "start": 2077.48, "end": 2081.48, "text": " Yes? Is there a way to use this summer function?", "tokens": [51564, 1079, 30, 1119, 456, 257, 636, 281, 764, 341, 4266, 2445, 30, 51764], "temperature": 0.0, "avg_logprob": -0.17655157334733718, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.008830562233924866}, {"id": 463, "seek": 208148, "start": 2081.48, "end": 2085.48, "text": " You could but I'm not sure", "tokens": [50364, 509, 727, 457, 286, 478, 406, 988, 50564], "temperature": 0.0, "avg_logprob": -0.20202158436630713, "compression_ratio": 1.5625, "no_speech_prob": 0.010319085791707039}, {"id": 464, "seek": 208148, "start": 2085.48, "end": 2089.48, "text": " that you would want to", "tokens": [50564, 300, 291, 576, 528, 281, 50764], "temperature": 0.0, "avg_logprob": -0.20202158436630713, "compression_ratio": 1.5625, "no_speech_prob": 0.010319085791707039}, {"id": 465, "seek": 208148, "start": 2093.48, "end": 2097.48, "text": " So current well so there's two problems", "tokens": [50964, 407, 2190, 731, 370, 456, 311, 732, 2740, 51164], "temperature": 0.0, "avg_logprob": -0.20202158436630713, "compression_ratio": 1.5625, "no_speech_prob": 0.010319085791707039}, {"id": 466, "seek": 208148, "start": 2097.48, "end": 2101.48, "text": " so first of all I mean this is a reasonable thing to do", "tokens": [51164, 370, 700, 295, 439, 286, 914, 341, 307, 257, 10585, 551, 281, 360, 51364], "temperature": 0.0, "avg_logprob": -0.20202158436630713, "compression_ratio": 1.5625, "no_speech_prob": 0.010319085791707039}, {"id": 467, "seek": 208148, "start": 2101.48, "end": 2105.48, "text": " currently though summarise", "tokens": [51364, 4362, 1673, 14611, 908, 51564], "temperature": 0.0, "avg_logprob": -0.20202158436630713, "compression_ratio": 1.5625, "no_speech_prob": 0.010319085791707039}, {"id": 468, "seek": 208148, "start": 2105.48, "end": 2109.48, "text": " when you summarise you have to reduce to a single number not multiple numbers", "tokens": [51564, 562, 291, 14611, 908, 291, 362, 281, 5407, 281, 257, 2167, 1230, 406, 3866, 3547, 51764], "temperature": 0.0, "avg_logprob": -0.20202158436630713, "compression_ratio": 1.5625, "no_speech_prob": 0.010319085791707039}, {"id": 469, "seek": 210948, "start": 2109.48, "end": 2113.48, "text": " because again a future version of dplyr will let you summarise multiple numbers", "tokens": [50364, 570, 797, 257, 2027, 3037, 295, 274, 2724, 81, 486, 718, 291, 14611, 908, 3866, 3547, 50564], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 470, "seek": 210948, "start": 2113.48, "end": 2117.48, "text": " at some point in the future", "tokens": [50564, 412, 512, 935, 294, 264, 2027, 50764], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 471, "seek": 210948, "start": 2117.48, "end": 2121.48, "text": " What did I do? So this is what I did", "tokens": [50764, 708, 630, 286, 360, 30, 407, 341, 307, 437, 286, 630, 50964], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 472, "seek": 210948, "start": 2121.48, "end": 2125.48, "text": " and you have to have urm everywhere", "tokens": [50964, 293, 291, 362, 281, 362, 4038, 76, 5315, 51164], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 473, "seek": 210948, "start": 2125.48, "end": 2129.48, "text": " or you can filter out all of the flights", "tokens": [51164, 420, 291, 393, 6608, 484, 439, 295, 264, 21089, 51364], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 474, "seek": 210948, "start": 2129.48, "end": 2133.48, "text": " that are not missing", "tokens": [51364, 300, 366, 406, 5361, 51564], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 475, "seek": 210948, "start": 2133.48, "end": 2137.48, "text": " but don't have a missing departure", "tokens": [51564, 457, 500, 380, 362, 257, 5361, 25866, 51764], "temperature": 0.0, "avg_logprob": -0.21567485858867694, "compression_ratio": 1.5303867403314917, "no_speech_prob": 0.00678253173828125}, {"id": 476, "seek": 213748, "start": 2137.48, "end": 2141.48, "text": " So this kind of", "tokens": [50364, 407, 341, 733, 295, 50564], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 477, "seek": 213748, "start": 2141.48, "end": 2145.48, "text": " brings me to my next point at any like in any real data manipulation", "tokens": [50564, 5607, 385, 281, 452, 958, 935, 412, 604, 411, 294, 604, 957, 1412, 26475, 50764], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 478, "seek": 213748, "start": 2145.48, "end": 2149.48, "text": " task you're probably not just going to use one verb", "tokens": [50764, 5633, 291, 434, 1391, 406, 445, 516, 281, 764, 472, 9595, 50964], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 479, "seek": 213748, "start": 2149.48, "end": 2153.48, "text": " but you're going to string multiple verbs together first of all we group it", "tokens": [50964, 457, 291, 434, 516, 281, 6798, 3866, 30051, 1214, 700, 295, 439, 321, 1594, 309, 51164], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 480, "seek": 213748, "start": 2153.48, "end": 2157.48, "text": " then we filter it then we summarise it and we want some way", "tokens": [51164, 550, 321, 6608, 309, 550, 321, 14611, 908, 309, 293, 321, 528, 512, 636, 51364], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 481, "seek": 213748, "start": 2157.48, "end": 2161.48, "text": " to kind of express that more naturally or more simply which is that", "tokens": [51364, 281, 733, 295, 5109, 300, 544, 8195, 420, 544, 2935, 597, 307, 300, 51564], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 482, "seek": 213748, "start": 2161.48, "end": 2165.48, "text": " the idea of having a data pipeline", "tokens": [51564, 264, 1558, 295, 1419, 257, 1412, 15517, 51764], "temperature": 0.0, "avg_logprob": -0.08989024669566054, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.0008578636334277689}, {"id": 483, "seek": 216548, "start": 2165.48, "end": 2169.48, "text": " you need to do quickly just take a minute", "tokens": [50364, 291, 643, 281, 360, 2661, 445, 747, 257, 3456, 50564], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 484, "seek": 216548, "start": 2169.48, "end": 2173.48, "text": " talk this over with your neighbour what does this snippet of code do", "tokens": [50564, 751, 341, 670, 365, 428, 19755, 437, 775, 341, 35623, 302, 295, 3089, 360, 50764], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 485, "seek": 216548, "start": 2173.48, "end": 2177.48, "text": " so you've got one minute starting now", "tokens": [50764, 370, 291, 600, 658, 472, 3456, 2891, 586, 50964], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 486, "seek": 216548, "start": 2177.48, "end": 2181.48, "text": " okay so this looks pretty complicated", "tokens": [50964, 1392, 370, 341, 1542, 1238, 6179, 51164], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 487, "seek": 216548, "start": 2181.48, "end": 2185.48, "text": " but if you kind of really carefully pass it you have to start from the innermost thing", "tokens": [51164, 457, 498, 291, 733, 295, 534, 7500, 1320, 309, 291, 362, 281, 722, 490, 264, 7714, 966, 555, 551, 51364], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 488, "seek": 216548, "start": 2185.48, "end": 2189.48, "text": " we're going to start with the flights data then we're going to filter it", "tokens": [51364, 321, 434, 516, 281, 722, 365, 264, 21089, 1412, 550, 321, 434, 516, 281, 6608, 309, 51564], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 489, "seek": 216548, "start": 2189.48, "end": 2193.48, "text": " to remove any missing delays then we're going to group it by date", "tokens": [51564, 281, 4159, 604, 5361, 28610, 550, 321, 434, 516, 281, 1594, 309, 538, 4002, 51764], "temperature": 0.0, "avg_logprob": -0.1295629669638241, "compression_ratio": 1.791304347826087, "no_speech_prob": 0.0914350152015686}, {"id": 490, "seek": 219348, "start": 2193.48, "end": 2197.48, "text": " in an hour then we're going to summarise it to compute the average delay", "tokens": [50364, 294, 364, 1773, 550, 321, 434, 516, 281, 14611, 908, 309, 281, 14722, 264, 4274, 8577, 50564], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 491, "seek": 219348, "start": 2197.48, "end": 2201.48, "text": " and the number of observations in that hour", "tokens": [50564, 293, 264, 1230, 295, 18163, 294, 300, 1773, 50764], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 492, "seek": 219348, "start": 2201.48, "end": 2205.48, "text": " then we're going to filter it to only look at the hours that have more than 10 flights", "tokens": [50764, 550, 321, 434, 516, 281, 6608, 309, 281, 787, 574, 412, 264, 2496, 300, 362, 544, 813, 1266, 21089, 50964], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 493, "seek": 219348, "start": 2205.48, "end": 2209.48, "text": " so it's not too complicated", "tokens": [50964, 370, 309, 311, 406, 886, 6179, 51164], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 494, "seek": 219348, "start": 2209.48, "end": 2213.48, "text": " but we have to read it in quite an unnatural way to read insight out", "tokens": [51164, 457, 321, 362, 281, 1401, 309, 294, 1596, 364, 43470, 636, 281, 1401, 11269, 484, 51364], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 495, "seek": 219348, "start": 2213.48, "end": 2217.48, "text": " and then also like the arguments to filter are quite far away", "tokens": [51364, 293, 550, 611, 411, 264, 12869, 281, 6608, 366, 1596, 1400, 1314, 51564], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 496, "seek": 219348, "start": 2217.48, "end": 2221.48, "text": " so instead", "tokens": [51564, 370, 2602, 51764], "temperature": 0.0, "avg_logprob": -0.12194429559910551, "compression_ratio": 1.784688995215311, "no_speech_prob": 0.0032966318540275097}, {"id": 497, "seek": 222148, "start": 2221.48, "end": 2225.48, "text": " what we're going to talk about after the coffee break is this pipe operator", "tokens": [50364, 437, 321, 434, 516, 281, 751, 466, 934, 264, 4982, 1821, 307, 341, 11240, 12973, 50564], "temperature": 0.0, "avg_logprob": -0.09446696312196794, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.013685877434909344}, {"id": 498, "seek": 222148, "start": 2225.48, "end": 2229.48, "text": " and you'll see that that makes the code quite", "tokens": [50564, 293, 291, 603, 536, 300, 300, 1669, 264, 3089, 1596, 50764], "temperature": 0.0, "avg_logprob": -0.09446696312196794, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.013685877434909344}, {"id": 499, "seek": 222148, "start": 2229.48, "end": 2233.48, "text": " a lot easier to read so the coffee is outside now", "tokens": [50764, 257, 688, 3571, 281, 1401, 370, 264, 4982, 307, 2380, 586, 50964], "temperature": 0.0, "avg_logprob": -0.09446696312196794, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.013685877434909344}, {"id": 500, "seek": 222148, "start": 2233.48, "end": 2237.48, "text": " so let's have a coffee break and come back at", "tokens": [50964, 370, 718, 311, 362, 257, 4982, 1821, 293, 808, 646, 412, 51164], "temperature": 0.0, "avg_logprob": -0.09446696312196794, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.013685877434909344}, {"id": 501, "seek": 222148, "start": 2237.48, "end": 2241.48, "text": " 3.40", "tokens": [51164, 805, 13, 5254, 51364], "temperature": 0.0, "avg_logprob": -0.09446696312196794, "compression_ratio": 1.510204081632653, "no_speech_prob": 0.013685877434909344}, {"id": 502, "seek": 224148, "start": 2241.48, "end": 2245.48, "text": " music", "tokens": [50364, 1318, 50564], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 503, "seek": 224148, "start": 2245.48, "end": 2249.48, "text": " music", "tokens": [50564, 1318, 50764], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 504, "seek": 224148, "start": 2249.48, "end": 2253.48, "text": " about this operator", "tokens": [50764, 466, 341, 12973, 50964], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 505, "seek": 224148, "start": 2253.48, "end": 2257.48, "text": " called the pipe operator so what this basically does", "tokens": [50964, 1219, 264, 11240, 12973, 370, 437, 341, 1936, 775, 51164], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 506, "seek": 224148, "start": 2257.48, "end": 2261.48, "text": " is take the thing on the left hand side of the pipe", "tokens": [51164, 307, 747, 264, 551, 322, 264, 1411, 1011, 1252, 295, 264, 11240, 51364], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 507, "seek": 224148, "start": 2261.48, "end": 2265.48, "text": " and put it as the first argument as a thing on the right hand side", "tokens": [51364, 293, 829, 309, 382, 264, 700, 6770, 382, 257, 551, 322, 264, 558, 1011, 1252, 51564], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 508, "seek": 224148, "start": 2265.48, "end": 2269.48, "text": " and the advantage of this is it allows us to take something like this", "tokens": [51564, 293, 264, 5002, 295, 341, 307, 309, 4045, 505, 281, 747, 746, 411, 341, 51764], "temperature": 0.0, "avg_logprob": -0.1010326130289427, "compression_ratio": 1.832214765100671, "no_speech_prob": 0.04689972102642059}, {"id": 509, "seek": 226948, "start": 2269.48, "end": 2273.48, "text": " which is pretty hard to read and transform it into something like this", "tokens": [50364, 597, 307, 1238, 1152, 281, 1401, 293, 4088, 309, 666, 746, 411, 341, 50564], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 510, "seek": 226948, "start": 2273.48, "end": 2277.48, "text": " and this is pretty easy to read particularly if you pronounce this operator as then", "tokens": [50564, 293, 341, 307, 1238, 1858, 281, 1401, 4098, 498, 291, 19567, 341, 12973, 382, 550, 50764], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 511, "seek": 226948, "start": 2277.48, "end": 2281.48, "text": " so we can read this take flights then filter it", "tokens": [50764, 370, 321, 393, 1401, 341, 747, 21089, 550, 6608, 309, 50964], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 512, "seek": 226948, "start": 2281.48, "end": 2285.48, "text": " to remove any values with a missing value for depth delay", "tokens": [50964, 281, 4159, 604, 4190, 365, 257, 5361, 2158, 337, 7161, 8577, 51164], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 513, "seek": 226948, "start": 2285.48, "end": 2289.48, "text": " then group it by date and hour then summarise it", "tokens": [51164, 550, 1594, 309, 538, 4002, 293, 1773, 550, 14611, 908, 309, 51364], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 514, "seek": 226948, "start": 2289.48, "end": 2293.48, "text": " computing the average delay and the number of observations in the group", "tokens": [51364, 15866, 264, 4274, 8577, 293, 264, 1230, 295, 18163, 294, 264, 1594, 51564], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 515, "seek": 226948, "start": 2293.48, "end": 2297.48, "text": " then filter it to look at all of the", "tokens": [51564, 550, 6608, 309, 281, 574, 412, 439, 295, 264, 51764], "temperature": 0.0, "avg_logprob": -0.061714880245248065, "compression_ratio": 1.8253275109170306, "no_speech_prob": 0.032707132399082184}, {"id": 516, "seek": 229748, "start": 2297.48, "end": 2301.48, "text": " observations we're going to have in 10 so", "tokens": [50364, 18163, 321, 434, 516, 281, 362, 294, 1266, 370, 50564], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 517, "seek": 229748, "start": 2301.48, "end": 2305.48, "text": " this pipe operator allows us to", "tokens": [50564, 341, 11240, 12973, 4045, 505, 281, 50764], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 518, "seek": 229748, "start": 2305.48, "end": 2309.48, "text": " form chains of complicated", "tokens": [50764, 1254, 12626, 295, 6179, 50964], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 519, "seek": 229748, "start": 2309.48, "end": 2313.48, "text": " data transformation operations that are made up of very simple pieces so the goal", "tokens": [50964, 1412, 9887, 7705, 300, 366, 1027, 493, 295, 588, 2199, 3755, 370, 264, 3387, 51164], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 520, "seek": 229748, "start": 2313.48, "end": 2317.48, "text": " is you make something complex by joining together many simple", "tokens": [51164, 307, 291, 652, 746, 3997, 538, 5549, 1214, 867, 2199, 51364], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 521, "seek": 229748, "start": 2317.48, "end": 2321.48, "text": " things that are easy to understand in isolation", "tokens": [51364, 721, 300, 366, 1858, 281, 1223, 294, 16001, 51564], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 522, "seek": 229748, "start": 2321.48, "end": 2325.48, "text": " so I want to give you some practice using that with", "tokens": [51564, 370, 286, 528, 281, 976, 291, 512, 3124, 1228, 300, 365, 51764], "temperature": 0.0, "avg_logprob": -0.12067870604686248, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.002070592250674963}, {"id": 523, "seek": 232548, "start": 2325.48, "end": 2329.48, "text": " three challenges so which destinations have the highest", "tokens": [50364, 1045, 4759, 370, 597, 37787, 362, 264, 6343, 50564], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 524, "seek": 232548, "start": 2329.48, "end": 2333.48, "text": " average delays which flights", "tokens": [50564, 4274, 28610, 597, 21089, 50764], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 525, "seek": 232548, "start": 2333.48, "end": 2337.48, "text": " happen every day and where do they fly to and then on average", "tokens": [50764, 1051, 633, 786, 293, 689, 360, 436, 3603, 281, 293, 550, 322, 4274, 50964], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 526, "seek": 232548, "start": 2337.48, "end": 2341.48, "text": " how do delays vary over the course of a day", "tokens": [50964, 577, 360, 28610, 10559, 670, 264, 1164, 295, 257, 786, 51164], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 527, "seek": 232548, "start": 2341.48, "end": 2345.48, "text": " and if you're going to do that probably look at the non cancelled flights", "tokens": [51164, 293, 498, 291, 434, 516, 281, 360, 300, 1391, 574, 412, 264, 2107, 25103, 21089, 51364], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 528, "seek": 232548, "start": 2345.48, "end": 2349.48, "text": " so those three challenges are relatively", "tokens": [51364, 370, 729, 1045, 4759, 366, 7226, 51564], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 529, "seek": 232548, "start": 2349.48, "end": 2353.48, "text": " simple but you're going to need to string together multiple of these verbs", "tokens": [51564, 2199, 457, 291, 434, 516, 281, 643, 281, 6798, 1214, 3866, 295, 613, 30051, 51764], "temperature": 0.0, "avg_logprob": -0.12178510843321334, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.031459562480449677}, {"id": 530, "seek": 235348, "start": 2353.48, "end": 2357.48, "text": " you've seen before you might have to use a range and group by and summarise", "tokens": [50364, 291, 600, 1612, 949, 291, 1062, 362, 281, 764, 257, 3613, 293, 1594, 538, 293, 14611, 908, 50564], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 531, "seek": 235348, "start": 2357.48, "end": 2361.48, "text": " and filter in some order so have a go at joining those together", "tokens": [50564, 293, 6608, 294, 512, 1668, 370, 362, 257, 352, 412, 5549, 729, 1214, 50764], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 532, "seek": 235348, "start": 2361.48, "end": 2365.48, "text": " and again if you get stuck I'll come around and help you out or better", "tokens": [50764, 293, 797, 498, 291, 483, 5541, 286, 603, 808, 926, 293, 854, 291, 484, 420, 1101, 50964], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 533, "seek": 235348, "start": 2365.48, "end": 2369.48, "text": " ask your neighbour", "tokens": [50964, 1029, 428, 19755, 51164], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 534, "seek": 235348, "start": 2369.48, "end": 2373.48, "text": " do well we start with the flights", "tokens": [51164, 360, 731, 321, 722, 365, 264, 21089, 51364], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 535, "seek": 235348, "start": 2373.48, "end": 2377.48, "text": " what are we going to do to that filter to remove anase yep we can", "tokens": [51364, 437, 366, 321, 516, 281, 360, 281, 300, 6608, 281, 4159, 364, 651, 18633, 321, 393, 51564], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 536, "seek": 235348, "start": 2377.48, "end": 2381.48, "text": " remove the anase let's do rival delays", "tokens": [51564, 4159, 264, 364, 651, 718, 311, 360, 16286, 28610, 51764], "temperature": 0.0, "avg_logprob": -0.16602817024152303, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.009232847020030022}, {"id": 537, "seek": 238148, "start": 2381.48, "end": 2385.48, "text": " what next", "tokens": [50364, 437, 958, 50564], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 538, "seek": 238148, "start": 2385.48, "end": 2389.48, "text": " group by so group by is kind of a fundamentally", "tokens": [50564, 1594, 538, 370, 1594, 538, 307, 733, 295, 257, 17879, 50764], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 539, "seek": 238148, "start": 2389.48, "end": 2393.48, "text": " like statistical operator you're saying what is the unit of interest in this analysis", "tokens": [50764, 411, 22820, 12973, 291, 434, 1566, 437, 307, 264, 4985, 295, 1179, 294, 341, 5215, 50964], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 540, "seek": 238148, "start": 2393.48, "end": 2397.48, "text": " and in this case it's the destination of the flight", "tokens": [50964, 293, 294, 341, 1389, 309, 311, 264, 12236, 295, 264, 7018, 51164], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 541, "seek": 238148, "start": 2397.48, "end": 2401.48, "text": " then for each destination what we want to do is summarise it", "tokens": [51164, 550, 337, 1184, 12236, 437, 321, 528, 281, 360, 307, 14611, 908, 309, 51364], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 542, "seek": 238148, "start": 2401.48, "end": 2405.48, "text": " I'm just going to say let's use the mean delay", "tokens": [51364, 286, 478, 445, 516, 281, 584, 718, 311, 764, 264, 914, 8577, 51564], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 543, "seek": 238148, "start": 2405.48, "end": 2409.48, "text": " the other thing I think you always want to do whenever you do", "tokens": [51564, 264, 661, 551, 286, 519, 291, 1009, 528, 281, 360, 5699, 291, 360, 51764], "temperature": 0.0, "avg_logprob": -0.07091628986856212, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.0027715705800801516}, {"id": 544, "seek": 240948, "start": 2409.48, "end": 2413.48, "text": " a group by summary is you always want to recall the number of observations", "tokens": [50364, 257, 1594, 538, 12691, 307, 291, 1009, 528, 281, 9901, 264, 1230, 295, 18163, 50564], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 545, "seek": 240948, "start": 2413.48, "end": 2417.48, "text": " in each group because when you start looking at these averages", "tokens": [50564, 294, 1184, 1594, 570, 562, 291, 722, 1237, 412, 613, 42257, 50764], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 546, "seek": 240948, "start": 2417.48, "end": 2421.48, "text": " you know if there's a destination that has the highest", "tokens": [50764, 291, 458, 498, 456, 311, 257, 12236, 300, 575, 264, 6343, 50964], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 547, "seek": 240948, "start": 2421.48, "end": 2425.48, "text": " average delay but only one flight flew there", "tokens": [50964, 4274, 8577, 457, 787, 472, 7018, 15728, 456, 51164], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 548, "seek": 240948, "start": 2425.48, "end": 2429.48, "text": " and that's probably not as interesting and then if we want to focus on the most", "tokens": [51164, 293, 300, 311, 1391, 406, 382, 1880, 293, 550, 498, 321, 528, 281, 1879, 322, 264, 881, 51364], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 549, "seek": 240948, "start": 2429.48, "end": 2433.48, "text": " delayed flights we're going to arrange it in", "tokens": [51364, 20268, 21089, 321, 434, 516, 281, 9424, 309, 294, 51564], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 550, "seek": 240948, "start": 2433.48, "end": 2437.48, "text": " descending mean so let's run this", "tokens": [51564, 40182, 914, 370, 718, 311, 1190, 341, 51764], "temperature": 0.0, "avg_logprob": -0.07473765650103169, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.0016541412333026528}, {"id": 551, "seek": 243748, "start": 2437.48, "end": 2441.48, "text": " they've worked so you can see this is a good example", "tokens": [50364, 436, 600, 2732, 370, 291, 393, 536, 341, 307, 257, 665, 1365, 50564], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 552, "seek": 243748, "start": 2441.48, "end": 2445.48, "text": " so there's this airport BBT which", "tokens": [50564, 370, 456, 311, 341, 10155, 19168, 51, 597, 50764], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 553, "seek": 243748, "start": 2445.48, "end": 2449.48, "text": " see", "tokens": [50764, 536, 50964], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 554, "seek": 243748, "start": 2449.48, "end": 2453.48, "text": " I think I've already looked at this before so that is Jack Brooks", "tokens": [50964, 286, 519, 286, 600, 1217, 2956, 412, 341, 949, 370, 300, 307, 4718, 33493, 51164], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 555, "seek": 243748, "start": 2453.48, "end": 2457.48, "text": " Brooks regional airport on the airport", "tokens": [51164, 33493, 10964, 10155, 322, 264, 10155, 51364], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 556, "seek": 243748, "start": 2457.48, "end": 2461.48, "text": " of Texas so there are only three flights flew there the entire", "tokens": [51364, 295, 7885, 370, 456, 366, 787, 1045, 21089, 15728, 456, 264, 2302, 51564], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 557, "seek": 243748, "start": 2461.48, "end": 2465.48, "text": " year you're not going to trust this average that much so", "tokens": [51564, 1064, 291, 434, 406, 516, 281, 3361, 341, 4274, 300, 709, 370, 51764], "temperature": 0.0, "avg_logprob": -0.21419329702118298, "compression_ratio": 1.649214659685864, "no_speech_prob": 0.005969784688204527}, {"id": 558, "seek": 246548, "start": 2465.48, "end": 2469.48, "text": " what we might want to do is filter out all of the", "tokens": [50364, 437, 321, 1062, 528, 281, 360, 307, 6608, 484, 439, 295, 264, 50564], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 559, "seek": 246548, "start": 2469.48, "end": 2473.48, "text": " flights where there's less than 10 observations", "tokens": [50564, 21089, 689, 456, 311, 1570, 813, 1266, 18163, 50764], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 560, "seek": 246548, "start": 2473.48, "end": 2477.48, "text": " we'll run that pipeline again", "tokens": [50764, 321, 603, 1190, 300, 15517, 797, 50964], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 561, "seek": 246548, "start": 2477.48, "end": 2481.48, "text": " now again I've constructed this pipeline", "tokens": [50964, 586, 797, 286, 600, 17083, 341, 15517, 51164], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 562, "seek": 246548, "start": 2481.48, "end": 2485.48, "text": " just by typing every step and it worked", "tokens": [51164, 445, 538, 18444, 633, 1823, 293, 309, 2732, 51364], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 563, "seek": 246548, "start": 2485.48, "end": 2489.48, "text": " which I have to say I'm slightly amazed at but generally when you're creating pipelines", "tokens": [51364, 597, 286, 362, 281, 584, 286, 478, 4748, 20507, 412, 457, 5101, 562, 291, 434, 4084, 40168, 51564], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 564, "seek": 246548, "start": 2489.48, "end": 2493.48, "text": " you want to do it a step at a time and this is one reason", "tokens": [51564, 291, 528, 281, 360, 309, 257, 1823, 412, 257, 565, 293, 341, 307, 472, 1778, 51764], "temperature": 0.0, "avg_logprob": -0.08553979637917508, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0027803569100797176}, {"id": 565, "seek": 249348, "start": 2493.48, "end": 2497.48, "text": " that I think the default printing is really important", "tokens": [50364, 300, 286, 519, 264, 7576, 14699, 307, 534, 1021, 50564], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 566, "seek": 249348, "start": 2497.48, "end": 2501.48, "text": " because you can just print out the result at every stage and you can see does that look right or not", "tokens": [50564, 570, 291, 393, 445, 4482, 484, 264, 1874, 412, 633, 3233, 293, 291, 393, 536, 775, 300, 574, 558, 420, 406, 50764], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 567, "seek": 249348, "start": 2501.48, "end": 2505.48, "text": " if you have a normal data frame it will print all of it right", "tokens": [50764, 498, 291, 362, 257, 2710, 1412, 3920, 309, 486, 4482, 439, 295, 309, 558, 50964], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 568, "seek": 249348, "start": 2505.48, "end": 2509.48, "text": " yes so if you have a normal data frame", "tokens": [50964, 2086, 370, 498, 291, 362, 257, 2710, 1412, 3920, 51164], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 569, "seek": 249348, "start": 2509.48, "end": 2513.48, "text": " it will print the whole thing and if you want to turn", "tokens": [51164, 309, 486, 4482, 264, 1379, 551, 293, 498, 291, 528, 281, 1261, 51364], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 570, "seek": 249348, "start": 2513.48, "end": 2517.48, "text": " you can always take a normal data frame", "tokens": [51364, 291, 393, 1009, 747, 257, 2710, 1412, 3920, 51564], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 571, "seek": 249348, "start": 2517.48, "end": 2521.48, "text": " and the first thing you can do is pipe it into tables here and turn it", "tokens": [51564, 293, 264, 700, 551, 291, 393, 360, 307, 11240, 309, 666, 8020, 510, 293, 1261, 309, 51764], "temperature": 0.0, "avg_logprob": -0.14132037389846075, "compression_ratio": 2.0, "no_speech_prob": 0.008559327572584152}, {"id": 572, "seek": 252148, "start": 2521.48, "end": 2525.48, "text": " into a data frame the other thing", "tokens": [50364, 666, 257, 1412, 3920, 264, 661, 551, 50564], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 573, "seek": 252148, "start": 2525.48, "end": 2529.48, "text": " the other thing that's useful is you might often pipe", "tokens": [50564, 264, 661, 551, 300, 311, 4420, 307, 291, 1062, 2049, 11240, 50764], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 574, "seek": 252148, "start": 2529.48, "end": 2533.48, "text": " this into something rather than just printing it you could pipe it into view", "tokens": [50764, 341, 666, 746, 2831, 813, 445, 14699, 309, 291, 727, 11240, 309, 666, 1910, 50964], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 575, "seek": 252148, "start": 2533.48, "end": 2537.48, "text": " if you wanted to see more of the data", "tokens": [50964, 498, 291, 1415, 281, 536, 544, 295, 264, 1412, 51164], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 576, "seek": 252148, "start": 2537.48, "end": 2541.48, "text": " that's kind of interesting", "tokens": [51164, 300, 311, 733, 295, 1880, 51364], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 577, "seek": 252148, "start": 2541.48, "end": 2545.48, "text": " if you wanted to just", "tokens": [51364, 498, 291, 1415, 281, 445, 51564], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 578, "seek": 252148, "start": 2545.48, "end": 2549.48, "text": " kind of step through it", "tokens": [51564, 733, 295, 1823, 807, 309, 51764], "temperature": 0.0, "avg_logprob": -0.14508220884535047, "compression_ratio": 1.8092105263157894, "no_speech_prob": 0.017732715234160423}, {"id": 579, "seek": 254948, "start": 2549.48, "end": 2553.48, "text": " you could do", "tokens": [50364, 291, 727, 360, 50564], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 580, "seek": 254948, "start": 2553.48, "end": 2557.48, "text": " talk about you could do something like", "tokens": [50564, 751, 466, 291, 727, 360, 746, 411, 50764], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 581, "seek": 254948, "start": 2557.48, "end": 2561.48, "text": " this", "tokens": [50764, 341, 50964], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 582, "seek": 254948, "start": 2561.48, "end": 2565.48, "text": " maybe", "tokens": [50964, 1310, 51164], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 583, "seek": 254948, "start": 2565.48, "end": 2569.48, "text": " so we're just taking the row number and taking a modulo 5", "tokens": [51164, 370, 321, 434, 445, 1940, 264, 5386, 1230, 293, 1940, 257, 1072, 13455, 1025, 51364], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 584, "seek": 254948, "start": 2569.48, "end": 2573.48, "text": " equals zero so that's going to give us every fifth that would be one way to do it", "tokens": [51364, 6915, 4018, 370, 300, 311, 516, 281, 976, 505, 633, 9266, 300, 576, 312, 472, 636, 281, 360, 309, 51564], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 585, "seek": 254948, "start": 2573.48, "end": 2577.48, "text": " so if you", "tokens": [51564, 370, 498, 291, 51764], "temperature": 0.0, "avg_logprob": -0.14723511040210724, "compression_ratio": 1.4825174825174825, "no_speech_prob": 0.009998859837651253}, {"id": 586, "seek": 257748, "start": 2577.48, "end": 2581.48, "text": " shows you everything well it shows you the first so many rows", "tokens": [50364, 3110, 291, 1203, 731, 309, 3110, 291, 264, 700, 370, 867, 13241, 50564], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 587, "seek": 257748, "start": 2581.48, "end": 2585.48, "text": " in the future I think we'll make it so it shows you every row", "tokens": [50564, 294, 264, 2027, 286, 519, 321, 603, 652, 309, 370, 309, 3110, 291, 633, 5386, 50764], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 588, "seek": 257748, "start": 2585.48, "end": 2589.48, "text": " in a way that's reasonably efficient", "tokens": [50764, 294, 257, 636, 300, 311, 23551, 7148, 50964], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 589, "seek": 257748, "start": 2589.48, "end": 2593.48, "text": " the other thing that's useful is to pipe it to str so you can see exactly what variables", "tokens": [50964, 264, 661, 551, 300, 311, 4420, 307, 281, 11240, 309, 281, 1056, 370, 291, 393, 536, 2293, 437, 9102, 51164], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 590, "seek": 257748, "start": 2593.48, "end": 2597.48, "text": " you've created and if they're the right type and so on", "tokens": [51164, 291, 600, 2942, 293, 498, 436, 434, 264, 558, 2010, 293, 370, 322, 51364], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 591, "seek": 257748, "start": 2597.48, "end": 2601.48, "text": " or if you're so inclined", "tokens": [51364, 420, 498, 291, 434, 370, 28173, 51564], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 592, "seek": 257748, "start": 2601.48, "end": 2605.48, "text": " could you put in two functions like head and tail after each other", "tokens": [51564, 727, 291, 829, 294, 732, 6828, 411, 1378, 293, 6838, 934, 1184, 661, 51764], "temperature": 0.0, "avg_logprob": -0.1546136176232064, "compression_ratio": 1.7292576419213974, "no_speech_prob": 0.014180995523929596}, {"id": 593, "seek": 260548, "start": 2605.48, "end": 2609.48, "text": " you can't basically so you want a pipeline that has a split", "tokens": [50364, 291, 393, 380, 1936, 370, 291, 528, 257, 15517, 300, 575, 257, 7472, 50564], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 594, "seek": 260548, "start": 2609.48, "end": 2613.48, "text": " in it right you want to have a pipeline that one pipe goes to head", "tokens": [50564, 294, 309, 558, 291, 528, 281, 362, 257, 15517, 300, 472, 11240, 1709, 281, 1378, 50764], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 595, "seek": 260548, "start": 2613.48, "end": 2617.48, "text": " and the other pipe goes to tail", "tokens": [50764, 293, 264, 661, 11240, 1709, 281, 6838, 50964], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 596, "seek": 260548, "start": 2617.48, "end": 2621.48, "text": " at the same time yeah I don't", "tokens": [50964, 412, 264, 912, 565, 1338, 286, 500, 380, 51164], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 597, "seek": 260548, "start": 2621.48, "end": 2625.48, "text": " like a data table does that by default on that I think that's a nice idea", "tokens": [51164, 411, 257, 1412, 3199, 775, 300, 538, 7576, 322, 300, 286, 519, 300, 311, 257, 1481, 1558, 51364], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 598, "seek": 260548, "start": 2625.48, "end": 2629.48, "text": " the reason dply doesn't do it is because you can do that for data", "tokens": [51364, 264, 1778, 274, 2724, 1177, 380, 360, 309, 307, 570, 291, 393, 360, 300, 337, 1412, 51564], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 599, "seek": 260548, "start": 2629.48, "end": 2633.48, "text": " frames but you can't in general do that efficiently for database queries", "tokens": [51564, 12083, 457, 291, 393, 380, 294, 2674, 360, 300, 19621, 337, 8149, 24109, 51764], "temperature": 0.0, "avg_logprob": -0.15968778701055616, "compression_ratio": 1.8227272727272728, "no_speech_prob": 0.025804391130805016}, {"id": 600, "seek": 263348, "start": 2633.48, "end": 2637.48, "text": " you can always use tail off", "tokens": [50364, 291, 393, 1009, 764, 6838, 766, 50564], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 601, "seek": 263348, "start": 2637.48, "end": 2641.48, "text": " so there's another handy keyboard", "tokens": [50564, 370, 456, 311, 1071, 13239, 10186, 50764], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 602, "seek": 263348, "start": 2641.48, "end": 2645.48, "text": " shortcut in our studio which I", "tokens": [50764, 24822, 294, 527, 6811, 597, 286, 50964], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 603, "seek": 263348, "start": 2645.48, "end": 2649.48, "text": " suspect no one knows about because the only reason I know about it is the", "tokens": [50964, 9091, 572, 472, 3255, 466, 570, 264, 787, 1778, 286, 458, 466, 309, 307, 264, 51164], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 604, "seek": 263348, "start": 2649.48, "end": 2653.48, "text": " Joe who added it told me about it there's this command called rerun", "tokens": [51164, 6807, 567, 3869, 309, 1907, 385, 466, 309, 456, 311, 341, 5622, 1219, 43819, 409, 51364], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 605, "seek": 263348, "start": 2653.48, "end": 2657.48, "text": " previous has anyone used rerun previous before", "tokens": [51364, 3894, 575, 2878, 1143, 43819, 409, 3894, 949, 51564], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 606, "seek": 263348, "start": 2657.48, "end": 2661.48, "text": " so what that does is if you have selected a", "tokens": [51564, 370, 437, 300, 775, 307, 498, 291, 362, 8209, 257, 51764], "temperature": 0.0, "avg_logprob": -0.13133566553999737, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.008686318062245846}, {"id": 607, "seek": 266148, "start": 2661.48, "end": 2665.48, "text": " block of code and press command enter", "tokens": [50364, 3461, 295, 3089, 293, 1886, 5622, 3242, 50564], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 608, "seek": 266148, "start": 2665.48, "end": 2669.48, "text": " now if I modify it it's kind of annoying I have to select that", "tokens": [50564, 586, 498, 286, 16927, 309, 309, 311, 733, 295, 11304, 286, 362, 281, 3048, 300, 50764], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 609, "seek": 266148, "start": 2669.48, "end": 2673.48, "text": " block of code again or you can press command shift P", "tokens": [50764, 3461, 295, 3089, 797, 420, 291, 393, 1886, 5622, 5513, 430, 50964], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 610, "seek": 266148, "start": 2673.48, "end": 2677.48, "text": " and it just sends those same lines of code into the R console", "tokens": [50964, 293, 309, 445, 14790, 729, 912, 3876, 295, 3089, 666, 264, 497, 11076, 51164], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 611, "seek": 266148, "start": 2677.48, "end": 2681.48, "text": " so this is really useful if you want to iterate rapidly on your pipeline", "tokens": [51164, 370, 341, 307, 534, 4420, 498, 291, 528, 281, 44497, 12910, 322, 428, 15517, 51364], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 612, "seek": 266148, "start": 2681.48, "end": 2685.48, "text": " you can easily change things and maybe I wanted an ascending order", "tokens": [51364, 291, 393, 3612, 1319, 721, 293, 1310, 286, 1415, 364, 15526, 2029, 1668, 51564], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 613, "seek": 266148, "start": 2685.48, "end": 2689.48, "text": " and just command shift P and rerun the whole pipeline", "tokens": [51564, 293, 445, 5622, 5513, 430, 293, 43819, 409, 264, 1379, 15517, 51764], "temperature": 0.0, "avg_logprob": -0.09937926976367681, "compression_ratio": 1.7860262008733625, "no_speech_prob": 0.019396550953388214}, {"id": 614, "seek": 269148, "start": 2691.48, "end": 2695.48, "text": " okay", "tokens": [50364, 1392, 50564], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 615, "seek": 269148, "start": 2695.48, "end": 2699.48, "text": " okay so", "tokens": [50564, 1392, 370, 50764], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 616, "seek": 269148, "start": 2699.48, "end": 2703.48, "text": " any questions about that pipeline that we created to solve that problem", "tokens": [50764, 604, 1651, 466, 300, 15517, 300, 321, 2942, 281, 5039, 300, 1154, 50964], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 617, "seek": 269148, "start": 2703.48, "end": 2707.48, "text": " so the next one is which flights", "tokens": [50964, 370, 264, 958, 472, 307, 597, 21089, 51164], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 618, "seek": 269148, "start": 2707.48, "end": 2711.48, "text": " happen every day and where do they fly to", "tokens": [51164, 1051, 633, 786, 293, 689, 360, 436, 3603, 281, 51364], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 619, "seek": 269148, "start": 2711.48, "end": 2715.48, "text": " no", "tokens": [51364, 572, 51564], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 620, "seek": 269148, "start": 2715.48, "end": 2719.48, "text": " so what are we going to start with that", "tokens": [51564, 370, 437, 366, 321, 516, 281, 722, 365, 300, 51764], "temperature": 0.0, "avg_logprob": -0.1785726547241211, "compression_ratio": 1.4962962962962962, "no_speech_prob": 0.007339735981076956}, {"id": 621, "seek": 271948, "start": 2719.48, "end": 2723.48, "text": " and which flights fly every day of the year what's probably the first", "tokens": [50364, 293, 597, 21089, 3603, 633, 786, 295, 264, 1064, 437, 311, 1391, 264, 700, 50564], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 622, "seek": 271948, "start": 2723.48, "end": 2727.48, "text": " thing we want to do we want to group by", "tokens": [50564, 551, 321, 528, 281, 360, 321, 528, 281, 1594, 538, 50764], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 623, "seek": 271948, "start": 2727.48, "end": 2731.48, "text": " and we want to do that by carrier and the flight number", "tokens": [50764, 293, 321, 528, 281, 360, 300, 538, 17574, 293, 264, 7018, 1230, 50964], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 624, "seek": 271948, "start": 2731.48, "end": 2735.48, "text": " now we want to find all", "tokens": [50964, 586, 321, 528, 281, 915, 439, 51164], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 625, "seek": 271948, "start": 2735.48, "end": 2739.48, "text": " flights that flew every day of the year", "tokens": [51164, 21089, 300, 15728, 633, 786, 295, 264, 1064, 51364], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 626, "seek": 271948, "start": 2739.48, "end": 2743.48, "text": " any ideas so we're going to summarize what might we summarize", "tokens": [51364, 604, 3487, 370, 321, 434, 516, 281, 20858, 437, 1062, 321, 20858, 51564], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 627, "seek": 271948, "start": 2743.48, "end": 2747.48, "text": " we might use the dates", "tokens": [51564, 321, 1062, 764, 264, 11691, 51764], "temperature": 0.0, "avg_logprob": -0.09021405139601374, "compression_ratio": 1.8802395209580838, "no_speech_prob": 0.008843094110488892}, {"id": 628, "seek": 274748, "start": 2747.48, "end": 2751.48, "text": " what how well we're going to use the date how what are we going to do with that", "tokens": [50364, 437, 577, 731, 321, 434, 516, 281, 764, 264, 4002, 577, 437, 366, 321, 516, 281, 360, 365, 300, 50564], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 629, "seek": 274748, "start": 2751.48, "end": 2755.48, "text": " oh so we could do we could do count", "tokens": [50564, 1954, 370, 321, 727, 360, 321, 727, 360, 1207, 50764], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 630, "seek": 274748, "start": 2755.48, "end": 2759.48, "text": " flights", "tokens": [50764, 21089, 50964], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 631, "seek": 274748, "start": 2759.48, "end": 2763.48, "text": " we could do count and then we could filter by", "tokens": [50964, 321, 727, 360, 1207, 293, 550, 321, 727, 6608, 538, 51164], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 632, "seek": 274748, "start": 2763.48, "end": 2767.48, "text": " let's give us a name", "tokens": [51164, 718, 311, 976, 505, 257, 1315, 51364], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 633, "seek": 274748, "start": 2767.48, "end": 2771.48, "text": " 365", "tokens": [51364, 22046, 51564], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 634, "seek": 274748, "start": 2771.48, "end": 2775.48, "text": " I forgot to put two equals", "tokens": [51564, 286, 5298, 281, 829, 732, 6915, 51764], "temperature": 0.0, "avg_logprob": -0.1736431121826172, "compression_ratio": 1.625, "no_speech_prob": 0.020556291565299034}, {"id": 635, "seek": 277548, "start": 2775.48, "end": 2779.48, "text": " now the problem with this is that it's possible", "tokens": [50364, 586, 264, 1154, 365, 341, 307, 300, 309, 311, 1944, 50564], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 636, "seek": 277548, "start": 2779.48, "end": 2783.48, "text": " this flight flew", "tokens": [50564, 341, 7018, 15728, 50764], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 637, "seek": 277548, "start": 2783.48, "end": 2787.48, "text": " twice on one day and didn't fly it all on another day", "tokens": [50764, 6091, 322, 472, 786, 293, 994, 380, 3603, 309, 439, 322, 1071, 786, 50964], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 638, "seek": 277548, "start": 2787.48, "end": 2791.48, "text": " I feel like that's yeah so actually", "tokens": [50964, 286, 841, 411, 300, 311, 1338, 370, 767, 51164], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 639, "seek": 277548, "start": 2791.48, "end": 2795.48, "text": " this is my solution too but now I think a better way would be to say", "tokens": [51164, 341, 307, 452, 3827, 886, 457, 586, 286, 519, 257, 1101, 636, 576, 312, 281, 584, 51364], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 640, "seek": 277548, "start": 2795.48, "end": 2799.48, "text": " count the number of distinct", "tokens": [51364, 1207, 264, 1230, 295, 10644, 51564], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 641, "seek": 277548, "start": 2799.48, "end": 2803.48, "text": " dates so if there's 365 distinct", "tokens": [51564, 11691, 370, 498, 456, 311, 22046, 10644, 51764], "temperature": 0.0, "avg_logprob": -0.08590922600183731, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.0014482805272564292}, {"id": 642, "seek": 280348, "start": 2803.48, "end": 2807.48, "text": " dates then we know it's flown every day", "tokens": [50364, 11691, 550, 321, 458, 309, 311, 34536, 633, 786, 50564], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 643, "seek": 280348, "start": 2807.48, "end": 2811.48, "text": " I think this would give us a slightly different answer", "tokens": [50564, 286, 519, 341, 576, 976, 505, 257, 4748, 819, 1867, 50764], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 644, "seek": 280348, "start": 2811.48, "end": 2815.48, "text": " well in this case it gives us the same answer because there aren't flights that fly", "tokens": [50764, 731, 294, 341, 1389, 309, 2709, 505, 264, 912, 1867, 570, 456, 3212, 380, 21089, 300, 3603, 50964], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 645, "seek": 280348, "start": 2815.48, "end": 2819.48, "text": " every day and then", "tokens": [50964, 633, 786, 293, 550, 51164], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 646, "seek": 280348, "start": 2819.48, "end": 2823.48, "text": " fly twice on one day but not on another", "tokens": [51164, 3603, 6091, 322, 472, 786, 457, 406, 322, 1071, 51364], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 647, "seek": 280348, "start": 2823.48, "end": 2827.48, "text": " now what if we wanted to add see what destinations these flights flew to", "tokens": [51364, 586, 437, 498, 321, 1415, 281, 909, 536, 437, 37787, 613, 21089, 15728, 281, 51564], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 648, "seek": 280348, "start": 2827.48, "end": 2831.48, "text": " any thoughts on that", "tokens": [51564, 604, 4598, 322, 300, 51764], "temperature": 0.0, "avg_logprob": -0.08139589033931134, "compression_ratio": 1.7239583333333333, "no_speech_prob": 0.006179179064929485}, {"id": 649, "seek": 283148, "start": 2831.48, "end": 2835.48, "text": " we could just add to the group by", "tokens": [50364, 321, 727, 445, 909, 281, 264, 1594, 538, 50564], "temperature": 0.0, "avg_logprob": -0.15628112446178088, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.02787758968770504}, {"id": 650, "seek": 283148, "start": 2835.48, "end": 2839.48, "text": " there are other ways we could do this which we'll see later but in this case it's easy enough", "tokens": [50564, 456, 366, 661, 2098, 321, 727, 360, 341, 597, 321, 603, 536, 1780, 457, 294, 341, 1389, 309, 311, 1858, 1547, 50764], "temperature": 0.0, "avg_logprob": -0.15628112446178088, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.02787758968770504}, {"id": 651, "seek": 283148, "start": 2839.48, "end": 2843.48, "text": " to just add that into the group by", "tokens": [50764, 281, 445, 909, 300, 666, 264, 1594, 538, 50964], "temperature": 0.0, "avg_logprob": -0.15628112446178088, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.02787758968770504}, {"id": 652, "seek": 283148, "start": 2843.48, "end": 2847.48, "text": " and see Honolulu and a lot of flights to New York", "tokens": [50964, 293, 536, 6625, 401, 12845, 293, 257, 688, 295, 21089, 281, 1873, 3609, 51164], "temperature": 0.0, "avg_logprob": -0.15628112446178088, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.02787758968770504}, {"id": 653, "seek": 283148, "start": 2847.48, "end": 2851.48, "text": " and Chicago and Seattle and Miami I think", "tokens": [51164, 293, 9525, 293, 15721, 293, 18367, 286, 519, 51364], "temperature": 0.0, "avg_logprob": -0.15628112446178088, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.02787758968770504}, {"id": 654, "seek": 283148, "start": 2855.48, "end": 2859.48, "text": " the last one on average", "tokens": [51564, 264, 1036, 472, 322, 4274, 51764], "temperature": 0.0, "avg_logprob": -0.15628112446178088, "compression_ratio": 1.5885714285714285, "no_speech_prob": 0.02787758968770504}, {"id": 655, "seek": 285948, "start": 2859.48, "end": 2863.48, "text": " the non cancelled flights vary over the course of the day", "tokens": [50364, 264, 2107, 25103, 21089, 10559, 670, 264, 1164, 295, 264, 786, 50564], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 656, "seek": 285948, "start": 2863.48, "end": 2867.48, "text": " so again so first of all we always want to say", "tokens": [50564, 370, 797, 370, 700, 295, 439, 321, 1009, 528, 281, 584, 50764], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 657, "seek": 285948, "start": 2867.48, "end": 2871.48, "text": " they're not cancelled which I think", "tokens": [50764, 436, 434, 406, 25103, 597, 286, 519, 50964], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 658, "seek": 285948, "start": 2871.48, "end": 2875.48, "text": " because cancelled equals zero cancelled is", "tokens": [50964, 570, 25103, 6915, 4018, 25103, 307, 51164], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 659, "seek": 285948, "start": 2875.48, "end": 2879.48, "text": " a reason code associated with it and then normally", "tokens": [51164, 257, 1778, 3089, 6615, 365, 309, 293, 550, 5646, 51364], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 660, "seek": 285948, "start": 2879.48, "end": 2883.48, "text": " once you've kind of filtered out clearly wrong things the first step is going to be", "tokens": [51364, 1564, 291, 600, 733, 295, 37111, 484, 4448, 2085, 721, 264, 700, 1823, 307, 516, 281, 312, 51564], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 661, "seek": 285948, "start": 2883.48, "end": 2887.48, "text": " grouping it here we want to group by hour say", "tokens": [51564, 40149, 309, 510, 321, 528, 281, 1594, 538, 1773, 584, 51764], "temperature": 0.0, "avg_logprob": -0.14546281441874886, "compression_ratio": 1.6851851851851851, "no_speech_prob": 0.012995288707315922}, {"id": 662, "seek": 288748, "start": 2887.48, "end": 2891.48, "text": " or maybe hour and minute", "tokens": [50364, 420, 1310, 1773, 293, 3456, 50564], "temperature": 0.0, "avg_logprob": -0.1447821803714918, "compression_ratio": 1.464, "no_speech_prob": 0.003298448398709297}, {"id": 663, "seek": 288748, "start": 2891.48, "end": 2895.48, "text": " and then summarize again we want to", "tokens": [50564, 293, 550, 20858, 797, 321, 528, 281, 50764], "temperature": 0.0, "avg_logprob": -0.1447821803714918, "compression_ratio": 1.464, "no_speech_prob": 0.003298448398709297}, {"id": 664, "seek": 288748, "start": 2895.48, "end": 2899.48, "text": " count how many observations on each group so we can disregard the delayed flights", "tokens": [50764, 1207, 577, 867, 18163, 322, 1184, 1594, 370, 321, 393, 44493, 264, 20268, 21089, 50964], "temperature": 0.0, "avg_logprob": -0.1447821803714918, "compression_ratio": 1.464, "no_speech_prob": 0.003298448398709297}, {"id": 665, "seek": 288748, "start": 2899.48, "end": 2903.48, "text": " and we could do the mean", "tokens": [50964, 293, 321, 727, 360, 264, 914, 51164], "temperature": 0.0, "avg_logprob": -0.1447821803714918, "compression_ratio": 1.464, "no_speech_prob": 0.003298448398709297}, {"id": 666, "seek": 288748, "start": 2907.48, "end": 2911.48, "text": " departure delay", "tokens": [51364, 25866, 8577, 51564], "temperature": 0.0, "avg_logprob": -0.1447821803714918, "compression_ratio": 1.464, "no_speech_prob": 0.003298448398709297}, {"id": 667, "seek": 291148, "start": 2911.48, "end": 2915.48, "text": " and", "tokens": [50364, 293, 50564], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 668, "seek": 291148, "start": 2915.48, "end": 2919.48, "text": " summarize not summary", "tokens": [50564, 20858, 406, 12691, 50764], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 669, "seek": 291148, "start": 2919.48, "end": 2923.48, "text": " so now when you get to this point", "tokens": [50764, 370, 586, 562, 291, 483, 281, 341, 935, 50964], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 670, "seek": 291148, "start": 2923.48, "end": 2927.48, "text": " it starts to get easier to see", "tokens": [50964, 309, 3719, 281, 483, 3571, 281, 536, 51164], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 671, "seek": 291148, "start": 2927.48, "end": 2931.48, "text": " what's going on with the visualizations so", "tokens": [51164, 437, 311, 516, 322, 365, 264, 5056, 14455, 370, 51364], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 672, "seek": 291148, "start": 2931.48, "end": 2935.48, "text": " this is basically that pipeline I just showed you", "tokens": [51364, 341, 307, 1936, 300, 15517, 286, 445, 4712, 291, 51564], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 673, "seek": 291148, "start": 2935.48, "end": 2939.48, "text": " I think I've done a slightly differently I created a new variable called time", "tokens": [51564, 286, 519, 286, 600, 1096, 257, 4748, 7614, 286, 2942, 257, 777, 7006, 1219, 565, 51764], "temperature": 0.0, "avg_logprob": -0.15796873148749857, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.003619172377511859}, {"id": 674, "seek": 293948, "start": 2939.48, "end": 2943.48, "text": " which is just hour plus minute divided by 60 that gives me like a floating point", "tokens": [50364, 597, 307, 445, 1773, 1804, 3456, 6666, 538, 4060, 300, 2709, 385, 411, 257, 12607, 935, 50564], "temperature": 0.0, "avg_logprob": -0.11266599218529391, "compression_ratio": 1.5445544554455446, "no_speech_prob": 0.002309866016730666}, {"id": 675, "seek": 293948, "start": 2943.48, "end": 2947.48, "text": " number that smoothly varies over the course of the day", "tokens": [50564, 1230, 300, 19565, 21716, 670, 264, 1164, 295, 264, 786, 50764], "temperature": 0.0, "avg_logprob": -0.11266599218529391, "compression_ratio": 1.5445544554455446, "no_speech_prob": 0.002309866016730666}, {"id": 676, "seek": 293948, "start": 2947.48, "end": 2951.48, "text": " group it, summarize it and then I'm going to do a little ggplot to", "tokens": [50764, 1594, 309, 11, 20858, 309, 293, 550, 286, 478, 516, 281, 360, 257, 707, 290, 70, 564, 310, 281, 50964], "temperature": 0.0, "avg_logprob": -0.11266599218529391, "compression_ratio": 1.5445544554455446, "no_speech_prob": 0.002309866016730666}, {"id": 677, "seek": 293948, "start": 2955.48, "end": 2959.48, "text": " plot it", "tokens": [51164, 7542, 309, 51364], "temperature": 0.0, "avg_logprob": -0.11266599218529391, "compression_ratio": 1.5445544554455446, "no_speech_prob": 0.002309866016730666}, {"id": 678, "seek": 293948, "start": 2959.48, "end": 2963.48, "text": " so you can see very early in the day", "tokens": [51364, 370, 291, 393, 536, 588, 2440, 294, 264, 786, 51564], "temperature": 0.0, "avg_logprob": -0.11266599218529391, "compression_ratio": 1.5445544554455446, "no_speech_prob": 0.002309866016730666}, {"id": 679, "seek": 293948, "start": 2963.48, "end": 2967.48, "text": " we have this kind of scattered cloud of some plots that are very", "tokens": [51564, 321, 362, 341, 733, 295, 21986, 4588, 295, 512, 28609, 300, 366, 588, 51764], "temperature": 0.0, "avg_logprob": -0.11266599218529391, "compression_ratio": 1.5445544554455446, "no_speech_prob": 0.002309866016730666}, {"id": 680, "seek": 296748, "start": 2967.48, "end": 2971.48, "text": " delayed what might these be", "tokens": [50364, 20268, 437, 1062, 613, 312, 50564], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 681, "seek": 296748, "start": 2971.48, "end": 2975.48, "text": " the ones from the end of the previous night", "tokens": [50564, 264, 2306, 490, 264, 917, 295, 264, 3894, 1818, 50764], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 682, "seek": 296748, "start": 2975.48, "end": 2979.48, "text": " the ones from the end of the previous night and why are the averages so high", "tokens": [50764, 264, 2306, 490, 264, 917, 295, 264, 3894, 1818, 293, 983, 366, 264, 42257, 370, 1090, 50964], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 683, "seek": 296748, "start": 2979.48, "end": 2983.48, "text": " so variable", "tokens": [50964, 370, 7006, 51164], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 684, "seek": 296748, "start": 2983.48, "end": 2987.48, "text": " these are the ones that have hardly any data", "tokens": [51164, 613, 366, 264, 2306, 300, 362, 13572, 604, 1412, 51364], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 685, "seek": 296748, "start": 2987.48, "end": 2991.48, "text": " there are hardly any flights leave after midnight so these averages", "tokens": [51364, 456, 366, 13572, 604, 21089, 1856, 934, 19006, 370, 613, 42257, 51564], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 686, "seek": 296748, "start": 2991.48, "end": 2995.48, "text": " are kind of suspicious we're not really seeing much of a pattern we're just seeing", "tokens": [51564, 366, 733, 295, 17931, 321, 434, 406, 534, 2577, 709, 295, 257, 5102, 321, 434, 445, 2577, 51764], "temperature": 0.0, "avg_logprob": -0.13772309247185202, "compression_ratio": 2.0, "no_speech_prob": 0.007086336612701416}, {"id": 687, "seek": 299548, "start": 2995.48, "end": 2999.48, "text": " individual flights that were delayed a really long time from the previous day", "tokens": [50364, 2609, 21089, 300, 645, 20268, 257, 534, 938, 565, 490, 264, 3894, 786, 50564], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 688, "seek": 299548, "start": 2999.48, "end": 3003.48, "text": " so we might want to, so one we could show then the visualization", "tokens": [50564, 370, 321, 1062, 528, 281, 11, 370, 472, 321, 727, 855, 550, 264, 25801, 50764], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 689, "seek": 299548, "start": 3003.48, "end": 3007.48, "text": " is to make the points proportional to the", "tokens": [50764, 307, 281, 652, 264, 2793, 24969, 281, 264, 50964], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 690, "seek": 299548, "start": 3007.48, "end": 3011.48, "text": " number of observations or we could filter it and add some other stuff", "tokens": [50964, 1230, 295, 18163, 420, 321, 727, 6608, 309, 293, 909, 512, 661, 1507, 51164], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 691, "seek": 299548, "start": 3011.48, "end": 3015.48, "text": " there's no schedule flights", "tokens": [51164, 456, 311, 572, 7567, 21089, 51364], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 692, "seek": 299548, "start": 3015.48, "end": 3019.48, "text": " exactly there's no schedule flights yeah", "tokens": [51364, 2293, 456, 311, 572, 7567, 21089, 1338, 51564], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 693, "seek": 299548, "start": 3019.48, "end": 3023.48, "text": " so there's some kind of interesting pattern going on here", "tokens": [51564, 370, 456, 311, 512, 733, 295, 1880, 5102, 516, 322, 510, 51764], "temperature": 0.0, "avg_logprob": -0.15770775148238259, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.01584363542497158}, {"id": 694, "seek": 302348, "start": 3023.48, "end": 3027.48, "text": " I don't really understand if it's possible it's an artifact", "tokens": [50364, 286, 500, 380, 534, 1223, 498, 309, 311, 1944, 309, 311, 364, 34806, 50564], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 695, "seek": 302348, "start": 3027.48, "end": 3031.48, "text": " but it looks like it added these white lines on every hour", "tokens": [50564, 457, 309, 1542, 411, 309, 3869, 613, 2418, 3876, 322, 633, 1773, 50764], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 696, "seek": 302348, "start": 3031.48, "end": 3035.48, "text": " but it looks like there's some kind of pattern where they start off", "tokens": [50764, 457, 309, 1542, 411, 456, 311, 512, 733, 295, 5102, 689, 436, 722, 766, 50964], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 697, "seek": 302348, "start": 3035.48, "end": 3039.48, "text": " delays kind of accumulate over the course of the day", "tokens": [50964, 28610, 733, 295, 33384, 670, 264, 1164, 295, 264, 786, 51164], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 698, "seek": 302348, "start": 3039.48, "end": 3043.48, "text": " but there's also some weird pattern within the hour where they accumulate and then they drop", "tokens": [51164, 457, 456, 311, 611, 512, 3657, 5102, 1951, 264, 1773, 689, 436, 33384, 293, 550, 436, 3270, 51364], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 699, "seek": 302348, "start": 3043.48, "end": 3047.48, "text": " back a little which I don't know what's going on", "tokens": [51364, 646, 257, 707, 597, 286, 500, 380, 458, 437, 311, 516, 322, 51564], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 700, "seek": 302348, "start": 3047.48, "end": 3051.48, "text": " but certainly the suggestion is if you want to leave on time fly early in the day", "tokens": [51564, 457, 3297, 264, 16541, 307, 498, 291, 528, 281, 1856, 322, 565, 3603, 2440, 294, 264, 786, 51764], "temperature": 0.0, "avg_logprob": -0.13819830267278999, "compression_ratio": 1.80859375, "no_speech_prob": 0.020752564072608948}, {"id": 701, "seek": 305148, "start": 3051.48, "end": 3055.48, "text": " or late in the hour", "tokens": [50364, 420, 3469, 294, 264, 1773, 50564], "temperature": 0.0, "avg_logprob": -0.1601284662882487, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.004320777021348476}, {"id": 702, "seek": 305148, "start": 3055.48, "end": 3059.48, "text": " or late in the hour", "tokens": [50564, 420, 3469, 294, 264, 1773, 50764], "temperature": 0.0, "avg_logprob": -0.1601284662882487, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.004320777021348476}, {"id": 703, "seek": 305148, "start": 3063.48, "end": 3067.48, "text": " any questions about those pipelines in general or how you can combine", "tokens": [50964, 604, 1651, 466, 729, 40168, 294, 2674, 420, 577, 291, 393, 10432, 51164], "temperature": 0.0, "avg_logprob": -0.1601284662882487, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.004320777021348476}, {"id": 704, "seek": 305148, "start": 3067.48, "end": 3071.48, "text": " these pieces with a pipe operator?", "tokens": [51164, 613, 3755, 365, 257, 11240, 12973, 30, 51364], "temperature": 0.0, "avg_logprob": -0.1601284662882487, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.004320777021348476}, {"id": 705, "seek": 305148, "start": 3071.48, "end": 3075.48, "text": " range is generally what the advantage is to chaining versus having", "tokens": [51364, 3613, 307, 5101, 437, 264, 5002, 307, 281, 417, 3686, 5717, 1419, 51564], "temperature": 0.0, "avg_logprob": -0.1601284662882487, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.004320777021348476}, {"id": 706, "seek": 305148, "start": 3075.48, "end": 3079.48, "text": " a ton of parentheses inside", "tokens": [51564, 257, 2952, 295, 34153, 1854, 51764], "temperature": 0.0, "avg_logprob": -0.1601284662882487, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.004320777021348476}, {"id": 707, "seek": 307948, "start": 3079.48, "end": 3083.48, "text": " but the sole example is that it makes it easier for you to read and understand what's going on", "tokens": [50364, 457, 264, 12321, 1365, 307, 300, 309, 1669, 309, 3571, 337, 291, 281, 1401, 293, 1223, 437, 311, 516, 322, 50564], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 708, "seek": 307948, "start": 3083.48, "end": 3087.48, "text": " does any advantage just having it line by line", "tokens": [50564, 775, 604, 5002, 445, 1419, 309, 1622, 538, 1622, 50764], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 709, "seek": 307948, "start": 3087.48, "end": 3091.48, "text": " no basically no", "tokens": [50764, 572, 1936, 572, 50964], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 710, "seek": 307948, "start": 3091.48, "end": 3095.48, "text": " save a little bit of memory but it's not", "tokens": [50964, 3155, 257, 707, 857, 295, 4675, 457, 309, 311, 406, 51164], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 711, "seek": 307948, "start": 3095.48, "end": 3099.48, "text": " yep", "tokens": [51164, 18633, 51364], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 712, "seek": 307948, "start": 3099.48, "end": 3103.48, "text": " so yeah in all the versions of D player used", "tokens": [51364, 370, 1338, 294, 439, 264, 9606, 295, 413, 4256, 1143, 51564], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 713, "seek": 307948, "start": 3103.48, "end": 3107.48, "text": " percent dot percent", "tokens": [51564, 3043, 5893, 3043, 51764], "temperature": 0.0, "avg_logprob": -0.23496733771430123, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.005717299412935972}, {"id": 714, "seek": 310748, "start": 3107.48, "end": 3111.48, "text": " now I prefer percent greater than percent for two reasons", "tokens": [50364, 586, 286, 4382, 3043, 5044, 813, 3043, 337, 732, 4112, 50564], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 715, "seek": 310748, "start": 3111.48, "end": 3115.48, "text": " first of all it's easy to type because you can hold your finger on the shift button the whole time", "tokens": [50564, 700, 295, 439, 309, 311, 1858, 281, 2010, 570, 291, 393, 1797, 428, 5984, 322, 264, 5513, 2960, 264, 1379, 565, 50764], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 716, "seek": 310748, "start": 3115.48, "end": 3119.48, "text": " and secondly I think it's not a", "tokens": [50764, 293, 26246, 286, 519, 309, 311, 406, 257, 50964], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 717, "seek": 310748, "start": 3119.48, "end": 3123.48, "text": " symmetric operation so having an asymmetric operator", "tokens": [50964, 32330, 6916, 370, 1419, 364, 37277, 17475, 12973, 51164], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 718, "seek": 310748, "start": 3123.48, "end": 3127.48, "text": " helps you understand what's going on, the data is flowing from left to right", "tokens": [51164, 3665, 291, 1223, 437, 311, 516, 322, 11, 264, 1412, 307, 13974, 490, 1411, 281, 558, 51364], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 719, "seek": 310748, "start": 3127.48, "end": 3131.48, "text": " any other questions?", "tokens": [51364, 604, 661, 1651, 30, 51564], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 720, "seek": 310748, "start": 3131.48, "end": 3135.48, "text": " is there a particular preferred order?", "tokens": [51564, 307, 456, 257, 1729, 16494, 1668, 30, 51764], "temperature": 0.0, "avg_logprob": -0.113234191470676, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.004402375780045986}, {"id": 721, "seek": 313548, "start": 3135.48, "end": 3139.48, "text": " no obviously the less", "tokens": [50364, 572, 2745, 264, 1570, 50564], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 722, "seek": 313548, "start": 3139.48, "end": 3143.48, "text": " data you have to work with the faster things are going to be so that generally suggests you should", "tokens": [50564, 1412, 291, 362, 281, 589, 365, 264, 4663, 721, 366, 516, 281, 312, 370, 300, 5101, 13409, 291, 820, 50764], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 723, "seek": 313548, "start": 3143.48, "end": 3147.48, "text": " filter early on and you know so", "tokens": [50764, 6608, 2440, 322, 293, 291, 458, 370, 50964], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 724, "seek": 313548, "start": 3147.48, "end": 3151.48, "text": " if you use a database, a database looks at the sequence of all the", "tokens": [50964, 498, 291, 764, 257, 8149, 11, 257, 8149, 1542, 412, 264, 8310, 295, 439, 264, 51164], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 725, "seek": 313548, "start": 3151.48, "end": 3155.48, "text": " operations and says oh you did this filter at the end but it would actually", "tokens": [51164, 7705, 293, 1619, 1954, 291, 630, 341, 6608, 412, 264, 917, 457, 309, 576, 767, 51364], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 726, "seek": 313548, "start": 3155.48, "end": 3159.48, "text": " be way more efficient to do that at the beginning, D player doesn't do anything like that", "tokens": [51364, 312, 636, 544, 7148, 281, 360, 300, 412, 264, 2863, 11, 413, 4256, 1177, 380, 360, 1340, 411, 300, 51564], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 727, "seek": 313548, "start": 3159.48, "end": 3163.48, "text": " D player executes it exactly as you give it so if you", "tokens": [51564, 413, 4256, 4454, 1819, 309, 2293, 382, 291, 976, 309, 370, 498, 291, 51764], "temperature": 0.0, "avg_logprob": -0.10674405097961426, "compression_ratio": 1.7630522088353413, "no_speech_prob": 0.0024809674359858036}, {"id": 728, "seek": 316348, "start": 3163.48, "end": 3167.48, "text": " can think of a faster way to order the operations it might be worthwhile", "tokens": [50364, 393, 519, 295, 257, 4663, 636, 281, 1668, 264, 7705, 309, 1062, 312, 28159, 50564], "temperature": 0.0, "avg_logprob": -0.08210297020114198, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0064504025503993034}, {"id": 729, "seek": 316348, "start": 3167.48, "end": 3171.48, "text": " to do so generally and I'm not really going to talk about", "tokens": [50564, 281, 360, 370, 5101, 293, 286, 478, 406, 534, 516, 281, 751, 466, 50764], "temperature": 0.0, "avg_logprob": -0.08210297020114198, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0064504025503993034}, {"id": 730, "seek": 316348, "start": 3171.48, "end": 3175.48, "text": " performance today but generally if you've got million like", "tokens": [50764, 3389, 965, 457, 5101, 498, 291, 600, 658, 2459, 411, 50964], "temperature": 0.0, "avg_logprob": -0.08210297020114198, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0064504025503993034}, {"id": 731, "seek": 316348, "start": 3175.48, "end": 3179.48, "text": " less than 10 million observations you won't even have to worry", "tokens": [50964, 1570, 813, 1266, 2459, 18163, 291, 1582, 380, 754, 362, 281, 3292, 51164], "temperature": 0.0, "avg_logprob": -0.08210297020114198, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0064504025503993034}, {"id": 732, "seek": 316348, "start": 3179.48, "end": 3183.48, "text": " about the performance it's going to be a few seconds and it's not", "tokens": [51164, 466, 264, 3389, 309, 311, 516, 281, 312, 257, 1326, 3949, 293, 309, 311, 406, 51364], "temperature": 0.0, "avg_logprob": -0.08210297020114198, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0064504025503993034}, {"id": 733, "seek": 316348, "start": 3183.48, "end": 3187.48, "text": " like it's a waste of time worrying about it because it's not going to take you that long", "tokens": [51364, 411, 309, 311, 257, 5964, 295, 565, 18788, 466, 309, 570, 309, 311, 406, 516, 281, 747, 291, 300, 938, 51564], "temperature": 0.0, "avg_logprob": -0.08210297020114198, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0064504025503993034}, {"id": 734, "seek": 318748, "start": 3187.48, "end": 3191.48, "text": " ok, the next thing I'm going to talk about", "tokens": [50364, 3133, 11, 264, 958, 551, 286, 478, 516, 281, 751, 466, 50564], "temperature": 0.0, "avg_logprob": -0.528508317881617, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.1947394460439682}, {"id": 735, "seek": 318748, "start": 3191.48, "end": 3195.48, "text": " is a great thing", "tokens": [50564, 307, 257, 869, 551, 50764], "temperature": 0.0, "avg_logprob": -0.528508317881617, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.1947394460439682}, {"id": 736, "seek": 318748, "start": 3195.48, "end": 3199.48, "text": " music", "tokens": [50764, 1318, 50964], "temperature": 0.0, "avg_logprob": -0.528508317881617, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.1947394460439682}, {"id": 737, "seek": 318748, "start": 3199.48, "end": 3203.48, "text": " music", "tokens": [50964, 1318, 51164], "temperature": 0.0, "avg_logprob": -0.528508317881617, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.1947394460439682}, {"id": 738, "seek": 318748, "start": 3203.48, "end": 3205.48, "text": " music", "tokens": [51164, 1318, 51264], "temperature": 0.0, "avg_logprob": -0.528508317881617, "compression_ratio": 1.1846153846153846, "no_speech_prob": 0.1947394460439682}], "language": "en"}