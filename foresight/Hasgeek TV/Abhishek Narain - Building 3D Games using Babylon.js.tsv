start	end	text
0	10100	Hi guys. Can you hear me? At the back? Audible? Awesome. Okay, so I see a few of us walking
10100	27960	in. So how was the lunch? No response? Like it was probably it was pretty good. Already
28720	35280	okay. So in this talk, we will talk about how many of you are game developers? Game
35280	42640	developers? Oh, no one, no one, no one, no one. Okay, that's that's not so good. But
42640	47720	what we'll do is we'll try and keep it as simple as that that how many of you are
47720	54880	JavaScript developers? Okay, so all of you can be a game developer at the end of
54880	63480	this session. So that that should be our goal now. Okay. And we will use absolutely
63480	68560	all these tools that we will use is free of cost available. And it's often source library
68560	72440	that I'm going to talk about. So you can use it from any of the dev environment that you
72440	77920	have set up right now. And you can create beautiful games. And you can sell that you
77920	83960	can package that into native containers as well. You might have heard about codewa or
83960	89360	you know, you can do it in different ways, codewa is one of the ways, but you can actually
89360	95200	put it on store as well. So in this talk, we will check that out how we can do such
95200	101520	stuff. And we'll also understand how many of you know about WebGL? WebGL? Okay, so all
101520	106920	you all of you know about it, but you probably haven't used it, use it as an developed anything
106920	113600	on top of that. Okay, so a little bit about me before we get started. I'm a shake and
113600	121880	I work as a technical evangelist at Microsoft. And that's where I tweet Narayana Bishak.
121880	128080	So any questions post the session, you can tweet me over there and I'll respond back.
128080	134080	And a thing which I missed out and why I'm a game developer. So I'm basically a geek
134080	139560	and not just on a particular technology or a product, but anything, anything which interests
139560	144000	me or for instance, a couple of years back, no, interested me. So I probably looked into
144000	150200	that. So whatever sounds nice, I just have a look into it and games certainly was one
150200	154800	of the things which I play a lot. So it made complete sense to look into some of those
154800	161680	libraries which is available for gaming or 3D development which people can use. And primarily
161680	172760	I work on web games and I'm a vivid gamer talk about any game with me. So in today's
172760	180880	topic we'll talk about 3D accelerated graphics with HTML5 and WebGL and how this thing came
180880	185200	into picture with the standards that's awesome and which will work across devices. And then
185200	191640	we'll talk about a library called Babylon.js and we'll move to Babylon only when we understand
192000	195880	the complexities of WebGL. So we'll start with that. And then we'll look into performance
195880	201560	considerations. Not a lot of gamers here. So I'll try and skip that part. This is primarily
201560	208600	focused for when you're creating a 3D game and you really want to boil down to performance
208600	214120	stuff so that it works on even the simplest or the cheapest of the Android phones. So
214120	220280	you would look into such considerations, but that's okay now. We'll just learn how to
220320	227520	write 3D code here or render 3D graphics here. So this is a section one and all of you know
227520	234440	about it. WebGL is JavaScript API based on OpenGL ES2 standards and it was standardized
234440	240120	by Kronoscorp and it works perfectly well with Codewa. I have tested it and I have deployed
240120	249080	it on Android tablet as well which was Lollipop. So it just works really well there. And
250480	255120	it works across browsers. Whoever follows the standard, all the standard-based browsers,
255120	266120	Mozilla, Chrome, you see this eSign? What's this? Any guesses? Wow. Okay. So that's
266120	272240	our Internet Explorer. That's a browser called Edge which came up from Microsoft and the
272240	276360	intention of this browser was to always keep updated just like an app which comes from
276400	281840	a store just like Chrome so that we can push in weekly updates with the web standards. So
281840	289840	this certainly does better than what Internet Explorer did earlier. And let's get into
289840	296840	WebGL. And what you need to do while you use WebGL? So all you have is a Canvas or HTML
296840	302880	Canvas and then you need to do everything. You need to create shaders. So how things work
302920	309920	in a game. Can someone guess what's the basic element or geometric shape using which all
313160	320160	3D objects are made up of in game? Triangle? Triangle? That's correct. Triangle. So imagine
321920	328920	if you see a 3D human being in any game, it's actually composed of small triangles.
329920	334280	And what you need to know about is the vertex where you place that triangle in 3D and you
334280	339480	place multiple of those triangles and then you finally make any geometrical shape, made
339480	344680	be a cube. It's made up out of triangles and stuff like that. So you need to write shaders.
344680	351680	Basically, shaders are those guys which will create those triangles and then it'll, you
351680	355240	know, there are two kinds of shaders. One primarily puts the vertex where these triangles
355280	360160	needs to hold and then the other one puts how you put mesh on top of that, the lighting
360160	364520	and stuff because without that, you won't be able to see anything. You'll only see lines
364520	370320	triangle drawn. So these are those shaders which you would have to write yourself while
370320	375200	using WebGL. So that's a little bit of a pain. And if we, all of us had to be a game developer
375200	380800	at the end of the session, it certainly will be a difficult task to go the WebGL route.
380800	385360	You have to work on geometry. You really need to be good at maths. That's my learning.
385360	390960	So I should have done a little better while I was in my school. And then you have to manage
390960	395720	the render loop. So game works in a loop. You, if you see 60 FPS frames per second in
395720	400920	a game or 30 FPS, it's basically a loop which runs, which updates your code, updates your
400920	405120	logic, updates your code, updates your logic, updates your code. The code part is updating
405120	410040	the UI. So you have a UI update loop and then you have a logic update loop. So this works
410080	414320	in loop 60 times in a second. And that's how you, you play games and you can interact
414320	419800	with mouse or touch and stuff like that. That's a very basic of how games are done.
419800	426800	So let's have a look at the simple code. And this code is not to scare you. So when, when
431200	438200	I looked into WebGL first, it was a little scary. I thought game development is like
438480	445000	real far away. And the tool which I'm using here is just for my comfort level. It's Visual
445000	448960	Studio. There's a community version of Visual Studio, which is available for free. You can
448960	454840	use that as well. And this gives you a very nice, I would say debugging experience for
454840	460040	me. I'll show you that later. So that's why I use this, but you can absolutely use any
460040	467040	code editor, anything, notepad plus plus sublime text, anything with WebGL or rather the baby
467520	472800	lawn library that we'll talk about. Right. So what do you see in this project is I have
472800	479800	a very simple two files, index HTML, index JS. And in the HTML file, we start with a
480360	486860	script. You see a shader VS, a script, shader FS, two different shaders here, and which
486860	493860	will do a lot of mathematical calculations on where to, I'll probably zoom in this fine.
498040	505040	Okay. Or let me do this. Good. Okay. So here's, here will be a lot of calculations that you
510800	514960	need to do for finding all the positions of the object that you will draw. So for each
514960	520120	triangle, like if you're drawing a complex object, which contains like 100 of those triangles
520120	525680	composed of those, you got to run this loop to get the positions of each of those vertices
525720	532720	of the triangle. Right. So that's one thing, which doesn't look so complex here, but there's
533160	539920	a script reference index JS and let's try and have a look in there. So in this, just
539920	544880	for simplicity purpose, I have like put in some of those basic steps that you need to
544880	551240	go through to create a very basic triangle in WebGL. And you start with the canvas that
551280	556400	you have as part of your HTML. We call it render canvas. There's an element that we'll
556400	562600	use to render the three stuff. And there's a width setting, height setting of that. And
562600	569600	then you go in initialize the WebGL. All simple till here. Right. Now, this is how it's different
573560	580560	from other JavaScript programming. It's like how you work in C++ and you compile the code
581120	586320	a lot of things like that happens here with the shader. It's compiled and there's a lot
586320	593320	of code for the shader, which the node type basically triangle. So three nodes types and
596240	603240	it gets the context of it. And then you have those shader initializations here. Looks complex
604360	608640	and then compilation of shaders into the program. Is that what happens? There's a linker which
608680	615680	links this shaders with the shaders and it's quite, you know, I mean, to me it looks pretty
616560	622320	complex. If I have to, I focus less on my business idea or the game idea and I focus
622320	628320	more on, you know, how to get things done here. Right. And it works fine. So when I
628320	635320	run this, it's certainly, you know, bunch of code does only this. Right. It's kind of
636320	641320	painful. Like we put in so much of effort and then you get this, but certainly if you
641320	647320	need a very high, deep level of control, this is the way you go because you have a lot of
647320	653320	control over how you want to render things. But if you want to create a quick game, certainly
653320	659320	this WebGL route would take you a little longer time unless you are a guru in this.
660320	667320	So we will try and get back, simplify this code and render better stuff a little later
667320	674320	with Babylon. Right. So in this process, we just quickly drew a vertex of a triangle
678320	685320	and then gave a color to it, which was RGB 100. And then it looked somewhat like that.
685320	691320	In real 3D scenarios, what would happen is you would need to have a wireframe of a body
691320	698320	and this wireframe, if you see these stuff over there, actually these are nothing but
698320	702320	those triangles, which we talked about. So all these wireframes are built out of triangles.
702320	707320	So you will have a vertex coordinates for each of those triangles put in a particular file.
707320	712320	It can be any 3D file. There are a lot of formats around. So you can use any of those.
712320	716320	There's 3D, Studio Max, Maya, all of these guys emit this kind of a structure.
716320	723320	So this is the basic wireframing. And then we have a concept of rasterization.
723320	729320	So make it look little better. You have to fill in colors between those triangles.
729320	739320	And then there's a process of flat shading. You give flat colors to that and it looks exactly
739320	743320	not like this. It looks a little better than this, but on the projector it's coming as this.
743320	748320	But you do this flat color shading in each of those triangles to make it look more real.
748320	754320	And then you do a garage shading. It's a guy who invented this shading, which kind of blends those
754320	759320	triangles and makes it look real good. And then finally you do a texture mapping.
759320	764320	So you have a 2D texture, like a JPEG, and you map it on top of that wherever you want.
764320	769320	And this is how the monkey looks like now, post the texture mapping.
769320	774320	So it's like how we have skin here. So that's the texture for this 3D object.
774320	782320	And this is how 3D stuff works. And when you're using WebGL, you have to take care of each of these processes.
782320	787320	So shaders, matrices, maths everywhere, like too complex.
787320	794320	So actually let's take the easy way, which is Babylon.js and get rid of WebGL.
794320	801320	And a little bit about Babylon. You can see a lot of releases. It's a completely open source.
801320	807320	If you want to add something to it, like export a library to this guy, you can do that.
807320	813320	You can work on top of this. This was created by a few of our colleagues in France.
813320	822320	And they actively work on it. So you can see it's a good traction that the web game development community has over this library.
822320	832320	And we will get started with the code. But just to give you a brief, it's as simple as including the Babylon.js that's the complete game engine with you.
832320	842320	And that will take care of your shaders, creating shaders, your physics, any of those physics like gravity and stuff that you're applying in your 3D.
842320	855320	It will take care of those things. And then all you need to do is start with instantiating an engine from the babylon.engine and set the canvas where you want to render your context over there.
855320	862320	So this is how you start with it. And then of course you creating instantiating an engine doesn't really make sense.
862320	868320	So you put a camera there. Camera is the person who will be viewing that scene that you draw.
868320	874320	And you will put up light because without light you will see everything black over there.
874320	887320	And then you can draw objects like spheres, you know, boxes. These comes out of the box with Babylon and it handles the vertices stuff, you know, all those things.
887320	894320	The library does that for you. And then just run the render loop and you are good to go.
894320	909320	So it has a lot of features like if you're a game developer and want to know whether it does alpha blending or, you know, can I draw dynamic measures or can I put a dynamic text over my objects, all those things possible.
909320	917320	So here's a list of that. A lot of things which you might not find here as well if you're a pro developer, pro game developer over the web.
917320	922320	And these are some of those objects which are pre-created by this game engine.
922320	934320	So if you want to create a box, sphere, cube, plane, torus, torus knot, lines, cylinder, anything of those things, it's the primitive contains it.
934320	946320	So you don't have to worry about it. Babylon will generate these. All you have to give is the size of them, what kind of mesh or texture you want to wrap on them and stuff like that.
948320	951320	Okay, so now let's look into a demo.
961320	967320	And before I get into demo, well, how many of you are sleepy?
969320	972320	The people who are sleepy are sleeping, so that's okay.
973320	981320	Now, let's see first a small demo, what's probably the capability of this engine.
981320	988320	And I have put an audio, so you can render audio, you can render video, and let's see what we have.
989320	1009320	I have a small scenario, a 3D stuff built in in this code, and what it does is this designer was the guy who actually built this whole 3D space.
1009320	1024320	And what this game engine is doing is it's importing that 3D stuff built by a designer using, you know, there's so many tools, there's one free tool called blender, you can use that to create these.
1024320	1033320	And I'm just importing that guy and instantiating it with a Babylon.js engine, game engine, right?
1033320	1039320	And on top of that, we will add a few interactions, like on tap, click, those kind of things here.
1039320	1042320	So now let me just add some volume here.
1046320	1048320	There's a background audio here.
1050320	1057320	So you can see a big mechanism and you can see there's a physics here, so when I stop, I take back a few steps.
1057320	1063320	You can see on the top, there's a cloud, and there's collision of course, so I can't like pass through here.
1063320	1065320	That's all fine.
1065320	1068320	Now, some interesting stuff here.
1070320	1071320	There we are.
1073320	1084320	Okay, and you see, I can interact based on where I am, and there's something called, you can see here, I can see here actually, due to the projector, you can see.
1084320	1088320	There's a, there's a grave, and on top of that, there's a helmet.
1089320	1096320	When I click on it, there's a skull and a skeleton of Hamlet, so it's very easy to render here.
1096320	1100320	Once you have that video object, I can just burn him again.
1100320	1102320	This is Clippy.
1102320	1105320	You guys remember this, Microsoft Office.
1105320	1107320	Okay, that's Clippy.
1110320	1112320	That's my cat.
1112320	1113320	Forget it.
1115320	1117320	This is interesting.
1119320	1121320	This was the grave for I6.
1121320	1126320	That's out of support now, so that's Internet Explorer 6 for you on that grave.
1129320	1136320	Okay, so now we are in the world of standards, and we completely abide to standards, so we've got to stick to that.
1136320	1140320	Okay, and this is the small stuff.
1140320	1145320	Let's get started with this, and creating this isn't really a big challenge, right?
1145320	1151320	And if you look into the code, we start with initialization, so we'll get back to this code a little later.
1151320	1154320	Let's start creating some stuff for now.
1155320	1165320	Okay, so let's, here's a very basic web template, like how you create a web application in Visual Studio.
1165320	1167320	So nothing to focus on Visual Studio here.
1167320	1171320	It's nothing inside it, so when I run this right now, it does nothing.
1171320	1175320	I'll start with instantiating the library itself.
1175320	1179320	You see, there are two Babylon libraries, .js.
1179320	1182320	I mean, I just had it here for your clarification.
1182320	1189320	If you use the unminified version, the max.js, you will get proper intelligence with it, so development becomes much easier.
1189320	1191320	So I'm going to use that here.
1192320	1195320	So that's all cool.
1195320	1198320	Now let's start with canvas.
1202320	1207320	I should say render canvas, anything that you like.
1207320	1214320	And this is where we will instantiate the engine, we'll set the context, this element, and everything gets rendered here.
1214320	1220320	Okay, and this guy, now this is all good.
1220320	1224320	Now let's start with my scripts where we'll start initializing the engine.
1224320	1227320	So let me write the script code.
1227320	1231320	And let's start off with an engine.
1231320	1233320	Let's call this, you can call this anything.
1233320	1236320	We'll call this this engine new.
1236320	1242320	I get this beautiful intelligence here, .engine.
1242320	1249320	And I can just go ahead and mention where it needs to render.
1249320	1253320	So you can see the intelligence, if you can't read it, like just helps me out while I code.
1253320	1257320	So it says HTML canvas element canvas of type canvas.
1257320	1260320	So I know that this is the canvas which I created on the top.
1260320	1263320	So I'm going to give that render canvas.
1263320	1271320	And then there is an anti-aliasing, which you can forget for now that works.
1271320	1274320	It's just to ensure that works on all browsers.
1274320	1278320	We are done with the engine instantiation.
1278320	1281320	Now let's start with creating a small scene.
1281320	1283320	So I'll just go type.
1283320	1290320	Okay, let me just go a little bigger here for people at the back.
1290320	1296320	Similarly, I will just go ahead and create a Babylon scene.
1296320	1299320	And I will pass in Babylon.engine.
1299320	1303320	So whatever engine I created, so I can have multiple engines if the need be.
1303320	1307320	Or I can have multiple screens when I have level two, level three, level four game.
1307320	1310320	So I can instantiate, I can put an engine to this.
1310320	1316320	So which is the one which I created above, who does this, right?
1316320	1317320	So we're done with the scene.
1317320	1321320	Now the important stuff is what you see is the camera.
1321320	1325320	So I got to set the camera now.
1325320	1333320	Camera equal to new Babylon.
1333320	1336320	Now there are a lot of options here.
1336320	1340320	What we see, it can be a fixed point camera.
1340320	1342320	It can be a arc rotate camera.
1342320	1347320	Arc rotate camera is like, you specify x, y, z coordinate.
1347320	1352320	And it will rotate exactly like, what do you call that?
1352320	1356320	On the diameter of a sphere if you draw or circle you draw.
1356320	1361320	It will keep rotating there on that arc, which it draws based on what radius you select.
1361320	1362320	So we'll use that.
1362320	1363320	It looks nice.
1363320	1365320	You can do a left, right?
1365320	1368320	So we'll use one of those cameras, but there are plenty of cameras.
1368320	1372320	You have a point camera as well, whatever you want to use.
1372320	1376320	Now in this, I have to give it a name.
1376320	1378320	So I'll call it camera.
1378320	1381320	And again, there's some magic words.
1381320	1386320	Don't bother about when you are not a full-time game developer.
1386320	1390320	These are some of those stuff, whether you want how you want to place camera,
1390320	1393320	how you want the view to look like and stuff like that,
1393320	1394320	alpha blending and stuff.
1394320	1397320	It comes used over there, but we'll neglect it for now.
1397320	1401320	So I'm just going to put 0, 8.
1401320	1404320	You can try out these values, how it works.
1404320	1405320	And then is the radius.
1405320	1408320	I said it's an arc rotate camera.
1408320	1415320	So whatever radius you give, it will always rotate across that particular distance, radius.
1415320	1419320	So I will set this guy as 100.
1419320	1422320	This is the initialization of it.
1422320	1427320	But of course, if you add controls of moving forward and back, it will change.
1427320	1429320	But this is the initialization of it.
1429320	1432320	So done this part.
1432320	1435320	Now is my target.
1435320	1441320	So we'll create this.
1441320	1447320	So I will give a 3D target, vector 3, and where you want this camera to be there.
1447320	1455320	So we will set it initially, maybe dot zero.
1455320	1461320	Or you can place it at any vertex you want on in 3D or right now it's just zero.
1461320	1462320	That's okay.
1462320	1465320	And then pass the scene here.
1465320	1466320	So we create a camera.
1466320	1467320	All good.
1467320	1472320	Now the next step is if you want to control, like move back and forth,
1472320	1476320	you will have to attach a control to this camera.
1476320	1482320	So we will just do that.
1482320	1489320	Camera attached control and you are attaching and you specify which HTML element we are using render canvas here.
1489320	1492320	So just set that guy.
1492320	1500320	So which means now you will be able to interact with the camera in the sense you will be able to use the default moments of the mouse.
1500320	1502320	Also we will enable touch.
1502320	1504320	So you can use that now.
1504320	1506320	Without that, it will be a fixed cam.
1506320	1508320	You can't move it here and there.
1508320	1511320	So based on whatever the requirement is.
1511320	1517320	Now let's set up light quickly.
1517320	1528320	Again, in light, you have a lot of other options in what kind of light you want to set out to light which comes from a ray.
1528320	1530320	We can call it as a point light here.
1530320	1546320	That's the point light which I'll use here and set the name of the light and anything and position of light.
1546320	1548320	This is pretty interesting.
1548320	1555320	Now this is where you would say I want my light to be coming from.
1555320	1559320	So it's very important if you want to make it look like sun, you place it real far from the object.
1559320	1581320	So we'll just go ahead and create that 3D vortex here.
1582320	1592320	And specify 20 or 20 and let's find XYZ.
1592320	1596320	Done with this and then it's the same scene we are working on.
1596320	1598320	Go ahead and done this.
1598320	1600320	So now we have light.
1600320	1601320	Now it's all good.
1601320	1602320	Lights there.
1602320	1604320	Let's put an object here.
1604320	1607320	Let's put a very simple geometrical object.
1607320	1609320	Sphere and let's create that.
1609320	1618320	So I can draw different meshes if you see the options here.
1618320	1620320	I have a lot.
1620320	1629320	So I will create a box, cylinder, dashed lines, decal, disk, round.
1629320	1632320	These are those primitive options which this library gives me.
1632320	1638320	So if I have any of these available, which I want to draw, I'll use that create lines.
1638320	1639320	Okay.
1639320	1642320	And sorry, it wasn't create lines.
1642320	1651320	Let's do create a sphere, create sphere, create sphere.
1651320	1652320	Okay.
1652320	1662320	Name it something sphere and then here's some important stuff like segments, diameter,
1662320	1663320	scene.
1663320	1668320	As I said, any of these objects are made up of triangles.
1668320	1671320	So segments basically tells me how many of such triangles.
1671320	1675320	So this will ensure that it uses more number of triangles.
1675320	1679320	If you have a higher segment value and your objects will look more like those objects.
1679320	1683320	Otherwise, look, you know, D shape, triangle-ish kind of stuff.
1683320	1686320	So you can put any value here for segment.
1686320	1689320	For now, let's let's try it out with eight first.
1689320	1692320	Let's try eight and then we'll change this later on.
1692320	1699320	And I will set the diameter of the sphere or code and then finally use the scene.
1699320	1700320	Okay.
1700320	1706320	Now, another important stuff is this will be a sphere, but we don't have a material.
1706320	1711320	So we'll create a material or standard materials where as I said, it's just like a mesh.
1711320	1714320	It doesn't look, it just looks like wire diagrams.
1714320	1719320	And if you want to make it look like real sphere, we'll have to add a material to that.
1719320	1730320	So just go ahead and add create a new material.
1730320	1737320	There's a standard material option and I can put this as standard.
1737320	1743320	So I can have different, different materials part of the same scene.
1743320	1745320	We're there with materials.
1745320	1748320	Now I would want to have a color to this material as well.
1748320	1752320	So we can put any of those diffuse colors.
1752320	1764320	Like for instance, I can put a diffuse color on top of this material and it can be.
1764320	1770320	What color do you guys prefer?
1770320	1778320	So I can suggest something in RGB 100.
1778320	1782320	This, this gives it a diffuse color to that material.
1782320	1785320	So I should have that material material color as right now.
1785320	1786320	It's RGB.
1786320	1788320	So R is one now.
1788320	1789320	All good.
1789320	1798320	Now let me assign sphere of material to this style.
1798320	1799320	Right.
1799320	1809320	And let's start with the render loop engine job run render you and we will use an anonymous
1809320	1820320	function here.
1820320	1821320	Okay.
1821320	1831320	And in this, we will just call the scene dot render.
1831320	1832320	Okay.
1832320	1833320	I think this is good.
1833320	1835320	Now we should have something running.
1835320	1843320	Let's try this out.
1843320	1844320	Okay.
1844320	1847320	So I didn't set the CSS correct.
1847320	1849320	So let's one sec.
1849320	1856320	I have that code here.
1856320	1863320	This is just to set body HTML with 100% height, 100% and touch action none so that I can go
1863320	1866320	ahead and interact it with touch as well.
1866320	1870320	So the browser doesn't use its own libraries here for touch.
1870320	1871320	Right.
1871320	1876320	So now what you see in the front is we didn't draw a plane where to give this fair to, but
1876320	1877320	we fixed this fair.
1877320	1878320	So there's no moment here.
1878320	1883320	Now what you'd see here is I can actually go ahead and rotate this fair.
1883320	1884320	Right.
1884320	1886320	And you can see the light I used.
1887320	1894320	This camera, what we use here, we can go ahead and rotate the camera.
1894320	1897320	So actually it's the camera which is rotating while I move this.
1897320	1902320	And I can also go inside, zoom in this particular 3D object.
1902320	1908320	So it's a proper 3D, but what you would see is the curves of this fair looks like, you
1908320	1911320	know, it's an image or it doesn't look that great.
1911320	1915320	And it's because of that stuff which we talked about.
1915320	1923320	Let me just go and change this to maybe 16 segments that just adds, you know, it eats
1923320	1929320	little more memory for sure because drawing more triangles there, but it will make it
1929320	1930320	look better.
1930320	1940320	So now when I run the same guy in here, now you see the finish of that is much better
1940320	1941320	than the previous time.
1941320	1944320	I can rotate around this and stuff like that.
1944320	1947320	I can interact with touch as well if required.
1947320	1949320	So this is interacting with touch.
1949320	1950320	It works fine.
1950320	1951320	Right.
1951320	1953320	So this is how I draw a basic sphere.
1953320	1959320	Now if I have to go and this is just like seven, eight lines of code, instantiate engine
1959320	1965320	scene objects, if you have any geometrical objects, put light on top of that.
1965320	1968320	And it's very basic maths, not much here.
1968320	1969320	And you can build this.
1969320	1972320	So this is the real advantage of this guy.
1972320	1974320	And I have a few stuff which I'll not.
1974320	1980320	So now let's come back to the previous one where we had a 3d content coming from somewhere
1980320	1982320	and this is that code.
1982320	1985320	And if you look at it, it doesn't look complex either.
1985320	1990320	It has the same styling just to make it full screen and it starts with the canvas.
1990320	1997320	And what we are doing here is we are doing a scene loader because it's 3d scene created
1998320	2003320	by a designer using any of those 3d tools.
2003320	2005320	It can be a renderer.
2005320	2013320	And we are just importing the Madison dot Babylon file which contains all the vertex details,
2013320	2018320	drawing details, images of that scene.
2018320	2025320	So we are just loading that guy into this engine and we are adding events for key up
2025320	2028320	so that we were going up and back.
2028320	2031320	Basically we have to move the camera forward and backwards.
2031320	2032320	Left, right.
2032320	2033320	That's what we are doing it.
2033320	2035320	And it's very simple.
2035320	2039320	If you want to apply gravity, otherwise what might happen is you might just go out of the box,
2039320	2041320	up, down, right?
2041320	2044320	So all you do is in the same camp code which we wrote earlier,
2044320	2049320	you can do a apply dot, apply gravity, dot check collisions, collisions, dot check collisions
2049320	2052320	will ensure that you can't pass through an object.
2052320	2056320	You will always collide with any other collision objects, right?
2056320	2058320	And that's all it does.
2058320	2060320	Finally it attaches the camera to the scene.
2060320	2069320	So it creates that same stuff because it had a Madison dot Babylon file which had the 3d assets in it, right?
2069320	2071320	So you can take it that way.
2071320	2074320	But if you don't have it, you can build all the geometrical objects that you have.
2074320	2077320	You can even put texture on top of that.
2077320	2082320	Now before I finish, I'd like to show you, there's a beautiful playground.
2082320	2085320	This is the tool I was talking about, Blender.
2085320	2088320	And actually this is a Babylon.js playground.
2088320	2092320	This is available online, babylonjs-playground.com.
2092320	2098320	You can go right here and you can edit, you can play, instantiate the engine,
2098320	2100320	and you can see it here.
2100320	2103320	And you can make some changes here.
2103320	2106320	This is a scene with a texture and a height map.
2106320	2111320	Height map lets you draw something of these things.
2111320	2114320	So it's basically a world map, what you see here.
2114320	2117320	And you can actually go ahead and play around with this.
2117320	2121320	Based on height map, it has added the texture of the world map on top of that.
2121320	2124320	So it looks like this.
2124320	2130320	And you can start with simpler basic scenes if you want to learn that.
2130320	2137320	So we have internet.
2137320	2144320	You for sure would need internet for this.
2144320	2146320	So this is a nice place.
2146320	2151320	If you haven't yet set up a Babylon.js file locally,
2151320	2153320	you can use this playground.
2153320	2158320	Nice place to learn, set, see different stuff, play around with the code.
2158320	2169320	And now let me quickly come back to the slides before we close for QA.
2169320	2174320	And I have a lot of other samples as well on Babylon.
2174320	2187320	I think one of my favorites is...
2188320	2192320	I have all these samples which we did.
2192320	2194320	And you can always use that.
2194320	2200320	This is for collisions and 3D multiple balls falling here with the collisions engine working with Babylon code.
2200320	2208320	So you literally have to do nothing just to add the different elements as colliders and that it takes care of.
2208320	2213320	So I'm open for questions if you have any.
2213320	2220320	And Babylon.js playground, you have all the resources out there for learning it as well.
2220320	2227320	This is another 3D object which we are importing using the Babylon engine.
2227320	2230320	I have a question here.
2230320	2234320	So I want to ask like how much resource is this using?
2234320	2241320	It's like I will run this thing on Raspberry Pi say the resource is very limited.
2241320	2244320	Will it be like rendering properly smoothly?
2244320	2251320	So it's just like any other game engine and we talked about how you build your 3D stuff with those triangles.
2251320	2255320	Say suppose we are not using 3D, we are using only 2D features.
2255320	2263320	So still you are drawing triangles and not to get distracted.
2263320	2268320	So it completely depends on how accurate you want your 2D things to look like.
2268320	2274320	And I can play around with those number of triangles and reducing that helps improving your performance.
2274320	2277320	So it doesn't add a performance overhead on top of WebGL.
2277320	2284320	It only tries to make it more performance in terms of doing better garbage collection.
2284320	2287320	Wouldn't there be like a RAM issue?
2287320	2289320	In any 3D there will be a RAM issue.
2289320	2295320	Like when you are working natively with WebGL and if you are not doing a GC properly, there will be a RAM issue.
2295320	2298320	Each of these assets, it completely depends on this.
2298320	2302320	If this asset is 20 MB, how can I make it less than 20 MB?
2302320	2303320	I cannot.
2303320	2304320	I have to load that here.
2304320	2308320	So my whole game with all interactions now will be 21 MB.
2308320	2317320	So if you want to cut down on that, the designer you have to ask was give me an asset with less number of vertices and should be lighter.
2317320	2327320	So the developer can optimize it from GC side, how I ensure that I create less JavaScript objects and reuse more.
2327320	2329320	That helps me out.
2329320	2331320	But Babylon as an engine does that for you.
2331320	2333320	So you don't really have to worry about performance here.
2333320	2339320	This is a nice looking skull.
2339320	2341320	So you can use it.
2341320	2343320	You can zoom in it.
2343320	2346320	This can be scary.
2346320	2351320	So right now, frames per second is very low because it's running on a debug mode with VS.
2351320	2354320	So there's a debugger which keeps tech of it.
2354320	2360320	But if you run it in release mode, it will be much faster here.
2360320	2369320	To help performance, it certainly, if you are new game developer, helps you out with ensuring that GC and stuff works more efficiently.
2369320	2371320	The engine does that for you.
2372320	2379320	But your question to make it work on a slow and Android device completely depends on what assets you are using.
2379320	2384320	If you're just using geometrical shaped assets, for sure you'll never have performance issues.
2384320	2389320	The moment you start importing more and more 3D assets is when the issue starts keeping.
2389320	2393320	You had a 2D game, so it can work with geometry there.
2393320	2394320	Hi.
2394320	2397320	So I had a question about this.
2397320	2400320	So I think you have heard about Phaser and 3Js, right?
2400320	2407320	So I was wondering what are the strengths or weakness of Babylon when compared with 3Js?
2407320	2415320	My specific use case scenario will be to implement specifically 3D models for web VR stuff,
2415320	2419320	which I know is not there in Edge yet, but for those purposes.
2419320	2422320	So it will interact with a lot of other APIs out of a browser.
2423320	2430320	And in that case, or any normal 3D cases where there will be heavy intensive 3D rendering going on,
2430320	2436320	like machine is not an issue resource, in that case, what will be the strength or weakness?
2436320	2439320	Comparing with 3Js and Babylon.
2439320	2440320	Okay.
2440320	2447320	I haven't done a comparison of that yet, but when you mentioned about your scenario of interacting with any applications,
2447320	2448320	this guy works in well.
2448320	2453320	We have integrated this with many enterprise-grade applications to render 3D as well,
2453320	2458320	but I don't have a direct comparison with the other library you mentioned about.
2464320	2467320	So guys, any questions on Babylon?
2467320	2468320	I'll take that offline.
2468320	2470320	I'll just come down there.
2471320	2477320	I'm available over the email or the Twitter, so just feel free to launch a question there.
2477320	2478320	Thank you.
