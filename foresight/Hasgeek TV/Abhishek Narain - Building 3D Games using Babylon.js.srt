1
00:00:00,000 --> 00:00:10,100
Hi guys. Can you hear me? At the back? Audible? Awesome. Okay, so I see a few of us walking

2
00:00:10,100 --> 00:00:27,960
in. So how was the lunch? No response? Like it was probably it was pretty good. Already

3
00:00:28,720 --> 00:00:35,280
okay. So in this talk, we will talk about how many of you are game developers? Game

4
00:00:35,280 --> 00:00:42,640
developers? Oh, no one, no one, no one, no one. Okay, that's that's not so good. But

5
00:00:42,640 --> 00:00:47,720
what we'll do is we'll try and keep it as simple as that that how many of you are

6
00:00:47,720 --> 00:00:54,880
JavaScript developers? Okay, so all of you can be a game developer at the end of

7
00:00:54,880 --> 00:01:03,480
this session. So that that should be our goal now. Okay. And we will use absolutely

8
00:01:03,480 --> 00:01:08,560
all these tools that we will use is free of cost available. And it's often source library

9
00:01:08,560 --> 00:01:12,440
that I'm going to talk about. So you can use it from any of the dev environment that you

10
00:01:12,440 --> 00:01:17,920
have set up right now. And you can create beautiful games. And you can sell that you

11
00:01:17,920 --> 00:01:23,960
can package that into native containers as well. You might have heard about codewa or

12
00:01:23,960 --> 00:01:29,360
you know, you can do it in different ways, codewa is one of the ways, but you can actually

13
00:01:29,360 --> 00:01:35,200
put it on store as well. So in this talk, we will check that out how we can do such

14
00:01:35,200 --> 00:01:41,520
stuff. And we'll also understand how many of you know about WebGL? WebGL? Okay, so all

15
00:01:41,520 --> 00:01:46,920
you all of you know about it, but you probably haven't used it, use it as an developed anything

16
00:01:46,920 --> 00:01:53,600
on top of that. Okay, so a little bit about me before we get started. I'm a shake and

17
00:01:53,600 --> 00:02:01,880
I work as a technical evangelist at Microsoft. And that's where I tweet Narayana Bishak.

18
00:02:01,880 --> 00:02:08,080
So any questions post the session, you can tweet me over there and I'll respond back.

19
00:02:08,080 --> 00:02:14,080
And a thing which I missed out and why I'm a game developer. So I'm basically a geek

20
00:02:14,080 --> 00:02:19,560
and not just on a particular technology or a product, but anything, anything which interests

21
00:02:19,560 --> 00:02:24,000
me or for instance, a couple of years back, no, interested me. So I probably looked into

22
00:02:24,000 --> 00:02:30,200
that. So whatever sounds nice, I just have a look into it and games certainly was one

23
00:02:30,200 --> 00:02:34,800
of the things which I play a lot. So it made complete sense to look into some of those

24
00:02:34,800 --> 00:02:41,680
libraries which is available for gaming or 3D development which people can use. And primarily

25
00:02:41,680 --> 00:02:52,760
I work on web games and I'm a vivid gamer talk about any game with me. So in today's

26
00:02:52,760 --> 00:03:00,880
topic we'll talk about 3D accelerated graphics with HTML5 and WebGL and how this thing came

27
00:03:00,880 --> 00:03:05,200
into picture with the standards that's awesome and which will work across devices. And then

28
00:03:05,200 --> 00:03:11,640
we'll talk about a library called Babylon.js and we'll move to Babylon only when we understand

29
00:03:12,000 --> 00:03:15,880
the complexities of WebGL. So we'll start with that. And then we'll look into performance

30
00:03:15,880 --> 00:03:21,560
considerations. Not a lot of gamers here. So I'll try and skip that part. This is primarily

31
00:03:21,560 --> 00:03:28,600
focused for when you're creating a 3D game and you really want to boil down to performance

32
00:03:28,600 --> 00:03:34,120
stuff so that it works on even the simplest or the cheapest of the Android phones. So

33
00:03:34,120 --> 00:03:40,280
you would look into such considerations, but that's okay now. We'll just learn how to

34
00:03:40,320 --> 00:03:47,520
write 3D code here or render 3D graphics here. So this is a section one and all of you know

35
00:03:47,520 --> 00:03:54,440
about it. WebGL is JavaScript API based on OpenGL ES2 standards and it was standardized

36
00:03:54,440 --> 00:04:00,120
by Kronoscorp and it works perfectly well with Codewa. I have tested it and I have deployed

37
00:04:00,120 --> 00:04:09,080
it on Android tablet as well which was Lollipop. So it just works really well there. And

38
00:04:10,480 --> 00:04:15,120
it works across browsers. Whoever follows the standard, all the standard-based browsers,

39
00:04:15,120 --> 00:04:26,120
Mozilla, Chrome, you see this eSign? What's this? Any guesses? Wow. Okay. So that's

40
00:04:26,120 --> 00:04:32,240
our Internet Explorer. That's a browser called Edge which came up from Microsoft and the

41
00:04:32,240 --> 00:04:36,360
intention of this browser was to always keep updated just like an app which comes from

42
00:04:36,400 --> 00:04:41,840
a store just like Chrome so that we can push in weekly updates with the web standards. So

43
00:04:41,840 --> 00:04:49,840
this certainly does better than what Internet Explorer did earlier. And let's get into

44
00:04:49,840 --> 00:04:56,840
WebGL. And what you need to do while you use WebGL? So all you have is a Canvas or HTML

45
00:04:56,840 --> 00:05:02,880
Canvas and then you need to do everything. You need to create shaders. So how things work

46
00:05:02,920 --> 00:05:09,920
in a game. Can someone guess what's the basic element or geometric shape using which all

47
00:05:13,160 --> 00:05:20,160
3D objects are made up of in game? Triangle? Triangle? That's correct. Triangle. So imagine

48
00:05:21,920 --> 00:05:28,920
if you see a 3D human being in any game, it's actually composed of small triangles.

49
00:05:29,920 --> 00:05:34,280
And what you need to know about is the vertex where you place that triangle in 3D and you

50
00:05:34,280 --> 00:05:39,480
place multiple of those triangles and then you finally make any geometrical shape, made

51
00:05:39,480 --> 00:05:44,680
be a cube. It's made up out of triangles and stuff like that. So you need to write shaders.

52
00:05:44,680 --> 00:05:51,680
Basically, shaders are those guys which will create those triangles and then it'll, you

53
00:05:51,680 --> 00:05:55,240
know, there are two kinds of shaders. One primarily puts the vertex where these triangles

54
00:05:55,280 --> 00:06:00,160
needs to hold and then the other one puts how you put mesh on top of that, the lighting

55
00:06:00,160 --> 00:06:04,520
and stuff because without that, you won't be able to see anything. You'll only see lines

56
00:06:04,520 --> 00:06:10,320
triangle drawn. So these are those shaders which you would have to write yourself while

57
00:06:10,320 --> 00:06:15,200
using WebGL. So that's a little bit of a pain. And if we, all of us had to be a game developer

58
00:06:15,200 --> 00:06:20,800
at the end of the session, it certainly will be a difficult task to go the WebGL route.

59
00:06:20,800 --> 00:06:25,360
You have to work on geometry. You really need to be good at maths. That's my learning.

60
00:06:25,360 --> 00:06:30,960
So I should have done a little better while I was in my school. And then you have to manage

61
00:06:30,960 --> 00:06:35,720
the render loop. So game works in a loop. You, if you see 60 FPS frames per second in

62
00:06:35,720 --> 00:06:40,920
a game or 30 FPS, it's basically a loop which runs, which updates your code, updates your

63
00:06:40,920 --> 00:06:45,120
logic, updates your code, updates your logic, updates your code. The code part is updating

64
00:06:45,120 --> 00:06:50,040
the UI. So you have a UI update loop and then you have a logic update loop. So this works

65
00:06:50,080 --> 00:06:54,320
in loop 60 times in a second. And that's how you, you play games and you can interact

66
00:06:54,320 --> 00:06:59,800
with mouse or touch and stuff like that. That's a very basic of how games are done.

67
00:06:59,800 --> 00:07:06,800
So let's have a look at the simple code. And this code is not to scare you. So when, when

68
00:07:11,200 --> 00:07:18,200
I looked into WebGL first, it was a little scary. I thought game development is like

69
00:07:18,480 --> 00:07:25,000
real far away. And the tool which I'm using here is just for my comfort level. It's Visual

70
00:07:25,000 --> 00:07:28,960
Studio. There's a community version of Visual Studio, which is available for free. You can

71
00:07:28,960 --> 00:07:34,840
use that as well. And this gives you a very nice, I would say debugging experience for

72
00:07:34,840 --> 00:07:40,040
me. I'll show you that later. So that's why I use this, but you can absolutely use any

73
00:07:40,040 --> 00:07:47,040
code editor, anything, notepad plus plus sublime text, anything with WebGL or rather the baby

74
00:07:47,520 --> 00:07:52,800
lawn library that we'll talk about. Right. So what do you see in this project is I have

75
00:07:52,800 --> 00:07:59,800
a very simple two files, index HTML, index JS. And in the HTML file, we start with a

76
00:08:00,360 --> 00:08:06,860
script. You see a shader VS, a script, shader FS, two different shaders here, and which

77
00:08:06,860 --> 00:08:13,860
will do a lot of mathematical calculations on where to, I'll probably zoom in this fine.

78
00:08:18,040 --> 00:08:25,040
Okay. Or let me do this. Good. Okay. So here's, here will be a lot of calculations that you

79
00:08:30,800 --> 00:08:34,960
need to do for finding all the positions of the object that you will draw. So for each

80
00:08:34,960 --> 00:08:40,120
triangle, like if you're drawing a complex object, which contains like 100 of those triangles

81
00:08:40,120 --> 00:08:45,680
composed of those, you got to run this loop to get the positions of each of those vertices

82
00:08:45,720 --> 00:08:52,720
of the triangle. Right. So that's one thing, which doesn't look so complex here, but there's

83
00:08:53,160 --> 00:08:59,920
a script reference index JS and let's try and have a look in there. So in this, just

84
00:08:59,920 --> 00:09:04,880
for simplicity purpose, I have like put in some of those basic steps that you need to

85
00:09:04,880 --> 00:09:11,240
go through to create a very basic triangle in WebGL. And you start with the canvas that

86
00:09:11,280 --> 00:09:16,400
you have as part of your HTML. We call it render canvas. There's an element that we'll

87
00:09:16,400 --> 00:09:22,600
use to render the three stuff. And there's a width setting, height setting of that. And

88
00:09:22,600 --> 00:09:29,600
then you go in initialize the WebGL. All simple till here. Right. Now, this is how it's different

89
00:09:33,560 --> 00:09:40,560
from other JavaScript programming. It's like how you work in C++ and you compile the code

90
00:09:41,120 --> 00:09:46,320
a lot of things like that happens here with the shader. It's compiled and there's a lot

91
00:09:46,320 --> 00:09:53,320
of code for the shader, which the node type basically triangle. So three nodes types and

92
00:09:56,240 --> 00:10:03,240
it gets the context of it. And then you have those shader initializations here. Looks complex

93
00:10:04,360 --> 00:10:08,640
and then compilation of shaders into the program. Is that what happens? There's a linker which

94
00:10:08,680 --> 00:10:15,680
links this shaders with the shaders and it's quite, you know, I mean, to me it looks pretty

95
00:10:16,560 --> 00:10:22,320
complex. If I have to, I focus less on my business idea or the game idea and I focus

96
00:10:22,320 --> 00:10:28,320
more on, you know, how to get things done here. Right. And it works fine. So when I

97
00:10:28,320 --> 00:10:35,320
run this, it's certainly, you know, bunch of code does only this. Right. It's kind of

98
00:10:36,320 --> 00:10:41,320
painful. Like we put in so much of effort and then you get this, but certainly if you

99
00:10:41,320 --> 00:10:47,320
need a very high, deep level of control, this is the way you go because you have a lot of

100
00:10:47,320 --> 00:10:53,320
control over how you want to render things. But if you want to create a quick game, certainly

101
00:10:53,320 --> 00:10:59,320
this WebGL route would take you a little longer time unless you are a guru in this.

102
00:11:00,320 --> 00:11:07,320
So we will try and get back, simplify this code and render better stuff a little later

103
00:11:07,320 --> 00:11:14,320
with Babylon. Right. So in this process, we just quickly drew a vertex of a triangle

104
00:11:18,320 --> 00:11:25,320
and then gave a color to it, which was RGB 100. And then it looked somewhat like that.

105
00:11:25,320 --> 00:11:31,320
In real 3D scenarios, what would happen is you would need to have a wireframe of a body

106
00:11:31,320 --> 00:11:38,320
and this wireframe, if you see these stuff over there, actually these are nothing but

107
00:11:38,320 --> 00:11:42,320
those triangles, which we talked about. So all these wireframes are built out of triangles.

108
00:11:42,320 --> 00:11:47,320
So you will have a vertex coordinates for each of those triangles put in a particular file.

109
00:11:47,320 --> 00:11:52,320
It can be any 3D file. There are a lot of formats around. So you can use any of those.

110
00:11:52,320 --> 00:11:56,320
There's 3D, Studio Max, Maya, all of these guys emit this kind of a structure.

111
00:11:56,320 --> 00:12:03,320
So this is the basic wireframing. And then we have a concept of rasterization.

112
00:12:03,320 --> 00:12:09,320
So make it look little better. You have to fill in colors between those triangles.

113
00:12:09,320 --> 00:12:19,320
And then there's a process of flat shading. You give flat colors to that and it looks exactly

114
00:12:19,320 --> 00:12:23,320
not like this. It looks a little better than this, but on the projector it's coming as this.

115
00:12:23,320 --> 00:12:28,320
But you do this flat color shading in each of those triangles to make it look more real.

116
00:12:28,320 --> 00:12:34,320
And then you do a garage shading. It's a guy who invented this shading, which kind of blends those

117
00:12:34,320 --> 00:12:39,320
triangles and makes it look real good. And then finally you do a texture mapping.

118
00:12:39,320 --> 00:12:44,320
So you have a 2D texture, like a JPEG, and you map it on top of that wherever you want.

119
00:12:44,320 --> 00:12:49,320
And this is how the monkey looks like now, post the texture mapping.

120
00:12:49,320 --> 00:12:54,320
So it's like how we have skin here. So that's the texture for this 3D object.

121
00:12:54,320 --> 00:13:02,320
And this is how 3D stuff works. And when you're using WebGL, you have to take care of each of these processes.

122
00:13:02,320 --> 00:13:07,320
So shaders, matrices, maths everywhere, like too complex.

123
00:13:07,320 --> 00:13:14,320
So actually let's take the easy way, which is Babylon.js and get rid of WebGL.

124
00:13:14,320 --> 00:13:21,320
And a little bit about Babylon. You can see a lot of releases. It's a completely open source.

125
00:13:21,320 --> 00:13:27,320
If you want to add something to it, like export a library to this guy, you can do that.

126
00:13:27,320 --> 00:13:33,320
You can work on top of this. This was created by a few of our colleagues in France.

127
00:13:33,320 --> 00:13:42,320
And they actively work on it. So you can see it's a good traction that the web game development community has over this library.

128
00:13:42,320 --> 00:13:52,320
And we will get started with the code. But just to give you a brief, it's as simple as including the Babylon.js that's the complete game engine with you.

129
00:13:52,320 --> 00:14:02,320
And that will take care of your shaders, creating shaders, your physics, any of those physics like gravity and stuff that you're applying in your 3D.

130
00:14:02,320 --> 00:14:15,320
It will take care of those things. And then all you need to do is start with instantiating an engine from the babylon.engine and set the canvas where you want to render your context over there.

131
00:14:15,320 --> 00:14:22,320
So this is how you start with it. And then of course you creating instantiating an engine doesn't really make sense.

132
00:14:22,320 --> 00:14:28,320
So you put a camera there. Camera is the person who will be viewing that scene that you draw.

133
00:14:28,320 --> 00:14:34,320
And you will put up light because without light you will see everything black over there.

134
00:14:34,320 --> 00:14:47,320
And then you can draw objects like spheres, you know, boxes. These comes out of the box with Babylon and it handles the vertices stuff, you know, all those things.

135
00:14:47,320 --> 00:14:54,320
The library does that for you. And then just run the render loop and you are good to go.

136
00:14:54,320 --> 00:15:09,320
So it has a lot of features like if you're a game developer and want to know whether it does alpha blending or, you know, can I draw dynamic measures or can I put a dynamic text over my objects, all those things possible.

137
00:15:09,320 --> 00:15:17,320
So here's a list of that. A lot of things which you might not find here as well if you're a pro developer, pro game developer over the web.

138
00:15:17,320 --> 00:15:22,320
And these are some of those objects which are pre-created by this game engine.

139
00:15:22,320 --> 00:15:34,320
So if you want to create a box, sphere, cube, plane, torus, torus knot, lines, cylinder, anything of those things, it's the primitive contains it.

140
00:15:34,320 --> 00:15:46,320
So you don't have to worry about it. Babylon will generate these. All you have to give is the size of them, what kind of mesh or texture you want to wrap on them and stuff like that.

141
00:15:48,320 --> 00:15:51,320
Okay, so now let's look into a demo.

142
00:16:01,320 --> 00:16:07,320
And before I get into demo, well, how many of you are sleepy?

143
00:16:09,320 --> 00:16:12,320
The people who are sleepy are sleeping, so that's okay.

144
00:16:13,320 --> 00:16:21,320
Now, let's see first a small demo, what's probably the capability of this engine.

145
00:16:21,320 --> 00:16:28,320
And I have put an audio, so you can render audio, you can render video, and let's see what we have.

146
00:16:29,320 --> 00:16:49,320
I have a small scenario, a 3D stuff built in in this code, and what it does is this designer was the guy who actually built this whole 3D space.

147
00:16:49,320 --> 00:17:04,320
And what this game engine is doing is it's importing that 3D stuff built by a designer using, you know, there's so many tools, there's one free tool called blender, you can use that to create these.

148
00:17:04,320 --> 00:17:13,320
And I'm just importing that guy and instantiating it with a Babylon.js engine, game engine, right?

149
00:17:13,320 --> 00:17:19,320
And on top of that, we will add a few interactions, like on tap, click, those kind of things here.

150
00:17:19,320 --> 00:17:22,320
So now let me just add some volume here.

151
00:17:26,320 --> 00:17:28,320
There's a background audio here.

152
00:17:30,320 --> 00:17:37,320
So you can see a big mechanism and you can see there's a physics here, so when I stop, I take back a few steps.

153
00:17:37,320 --> 00:17:43,320
You can see on the top, there's a cloud, and there's collision of course, so I can't like pass through here.

154
00:17:43,320 --> 00:17:45,320
That's all fine.

155
00:17:45,320 --> 00:17:48,320
Now, some interesting stuff here.

156
00:17:50,320 --> 00:17:51,320
There we are.

157
00:17:53,320 --> 00:18:04,320
Okay, and you see, I can interact based on where I am, and there's something called, you can see here, I can see here actually, due to the projector, you can see.

158
00:18:04,320 --> 00:18:08,320
There's a, there's a grave, and on top of that, there's a helmet.

159
00:18:09,320 --> 00:18:16,320
When I click on it, there's a skull and a skeleton of Hamlet, so it's very easy to render here.

160
00:18:16,320 --> 00:18:20,320
Once you have that video object, I can just burn him again.

161
00:18:20,320 --> 00:18:22,320
This is Clippy.

162
00:18:22,320 --> 00:18:25,320
You guys remember this, Microsoft Office.

163
00:18:25,320 --> 00:18:27,320
Okay, that's Clippy.

164
00:18:30,320 --> 00:18:32,320
That's my cat.

165
00:18:32,320 --> 00:18:33,320
Forget it.

166
00:18:35,320 --> 00:18:37,320
This is interesting.

167
00:18:39,320 --> 00:18:41,320
This was the grave for I6.

168
00:18:41,320 --> 00:18:46,320
That's out of support now, so that's Internet Explorer 6 for you on that grave.

169
00:18:49,320 --> 00:18:56,320
Okay, so now we are in the world of standards, and we completely abide to standards, so we've got to stick to that.

170
00:18:56,320 --> 00:19:00,320
Okay, and this is the small stuff.

171
00:19:00,320 --> 00:19:05,320
Let's get started with this, and creating this isn't really a big challenge, right?

172
00:19:05,320 --> 00:19:11,320
And if you look into the code, we start with initialization, so we'll get back to this code a little later.

173
00:19:11,320 --> 00:19:14,320
Let's start creating some stuff for now.

174
00:19:15,320 --> 00:19:25,320
Okay, so let's, here's a very basic web template, like how you create a web application in Visual Studio.

175
00:19:25,320 --> 00:19:27,320
So nothing to focus on Visual Studio here.

176
00:19:27,320 --> 00:19:31,320
It's nothing inside it, so when I run this right now, it does nothing.

177
00:19:31,320 --> 00:19:35,320
I'll start with instantiating the library itself.

178
00:19:35,320 --> 00:19:39,320
You see, there are two Babylon libraries, .js.

179
00:19:39,320 --> 00:19:42,320
I mean, I just had it here for your clarification.

180
00:19:42,320 --> 00:19:49,320
If you use the unminified version, the max.js, you will get proper intelligence with it, so development becomes much easier.

181
00:19:49,320 --> 00:19:51,320
So I'm going to use that here.

182
00:19:52,320 --> 00:19:55,320
So that's all cool.

183
00:19:55,320 --> 00:19:58,320
Now let's start with canvas.

184
00:20:02,320 --> 00:20:07,320
I should say render canvas, anything that you like.

185
00:20:07,320 --> 00:20:14,320
And this is where we will instantiate the engine, we'll set the context, this element, and everything gets rendered here.

186
00:20:14,320 --> 00:20:20,320
Okay, and this guy, now this is all good.

187
00:20:20,320 --> 00:20:24,320
Now let's start with my scripts where we'll start initializing the engine.

188
00:20:24,320 --> 00:20:27,320
So let me write the script code.

189
00:20:27,320 --> 00:20:31,320
And let's start off with an engine.

190
00:20:31,320 --> 00:20:33,320
Let's call this, you can call this anything.

191
00:20:33,320 --> 00:20:36,320
We'll call this this engine new.

192
00:20:36,320 --> 00:20:42,320
I get this beautiful intelligence here, .engine.

193
00:20:42,320 --> 00:20:49,320
And I can just go ahead and mention where it needs to render.

194
00:20:49,320 --> 00:20:53,320
So you can see the intelligence, if you can't read it, like just helps me out while I code.

195
00:20:53,320 --> 00:20:57,320
So it says HTML canvas element canvas of type canvas.

196
00:20:57,320 --> 00:21:00,320
So I know that this is the canvas which I created on the top.

197
00:21:00,320 --> 00:21:03,320
So I'm going to give that render canvas.

198
00:21:03,320 --> 00:21:11,320
And then there is an anti-aliasing, which you can forget for now that works.

199
00:21:11,320 --> 00:21:14,320
It's just to ensure that works on all browsers.

200
00:21:14,320 --> 00:21:18,320
We are done with the engine instantiation.

201
00:21:18,320 --> 00:21:21,320
Now let's start with creating a small scene.

202
00:21:21,320 --> 00:21:23,320
So I'll just go type.

203
00:21:23,320 --> 00:21:30,320
Okay, let me just go a little bigger here for people at the back.

204
00:21:30,320 --> 00:21:36,320
Similarly, I will just go ahead and create a Babylon scene.

205
00:21:36,320 --> 00:21:39,320
And I will pass in Babylon.engine.

206
00:21:39,320 --> 00:21:43,320
So whatever engine I created, so I can have multiple engines if the need be.

207
00:21:43,320 --> 00:21:47,320
Or I can have multiple screens when I have level two, level three, level four game.

208
00:21:47,320 --> 00:21:50,320
So I can instantiate, I can put an engine to this.

209
00:21:50,320 --> 00:21:56,320
So which is the one which I created above, who does this, right?

210
00:21:56,320 --> 00:21:57,320
So we're done with the scene.

211
00:21:57,320 --> 00:22:01,320
Now the important stuff is what you see is the camera.

212
00:22:01,320 --> 00:22:05,320
So I got to set the camera now.

213
00:22:05,320 --> 00:22:13,320
Camera equal to new Babylon.

214
00:22:13,320 --> 00:22:16,320
Now there are a lot of options here.

215
00:22:16,320 --> 00:22:20,320
What we see, it can be a fixed point camera.

216
00:22:20,320 --> 00:22:22,320
It can be a arc rotate camera.

217
00:22:22,320 --> 00:22:27,320
Arc rotate camera is like, you specify x, y, z coordinate.

218
00:22:27,320 --> 00:22:32,320
And it will rotate exactly like, what do you call that?

219
00:22:32,320 --> 00:22:36,320
On the diameter of a sphere if you draw or circle you draw.

220
00:22:36,320 --> 00:22:41,320
It will keep rotating there on that arc, which it draws based on what radius you select.

221
00:22:41,320 --> 00:22:42,320
So we'll use that.

222
00:22:42,320 --> 00:22:43,320
It looks nice.

223
00:22:43,320 --> 00:22:45,320
You can do a left, right?

224
00:22:45,320 --> 00:22:48,320
So we'll use one of those cameras, but there are plenty of cameras.

225
00:22:48,320 --> 00:22:52,320
You have a point camera as well, whatever you want to use.

226
00:22:52,320 --> 00:22:56,320
Now in this, I have to give it a name.

227
00:22:56,320 --> 00:22:58,320
So I'll call it camera.

228
00:22:58,320 --> 00:23:01,320
And again, there's some magic words.

229
00:23:01,320 --> 00:23:06,320
Don't bother about when you are not a full-time game developer.

230
00:23:06,320 --> 00:23:10,320
These are some of those stuff, whether you want how you want to place camera,

231
00:23:10,320 --> 00:23:13,320
how you want the view to look like and stuff like that,

232
00:23:13,320 --> 00:23:14,320
alpha blending and stuff.

233
00:23:14,320 --> 00:23:17,320
It comes used over there, but we'll neglect it for now.

234
00:23:17,320 --> 00:23:21,320
So I'm just going to put 0, 8.

235
00:23:21,320 --> 00:23:24,320
You can try out these values, how it works.

236
00:23:24,320 --> 00:23:25,320
And then is the radius.

237
00:23:25,320 --> 00:23:28,320
I said it's an arc rotate camera.

238
00:23:28,320 --> 00:23:35,320
So whatever radius you give, it will always rotate across that particular distance, radius.

239
00:23:35,320 --> 00:23:39,320
So I will set this guy as 100.

240
00:23:39,320 --> 00:23:42,320
This is the initialization of it.

241
00:23:42,320 --> 00:23:47,320
But of course, if you add controls of moving forward and back, it will change.

242
00:23:47,320 --> 00:23:49,320
But this is the initialization of it.

243
00:23:49,320 --> 00:23:52,320
So done this part.

244
00:23:52,320 --> 00:23:55,320
Now is my target.

245
00:23:55,320 --> 00:24:01,320
So we'll create this.

246
00:24:01,320 --> 00:24:07,320
So I will give a 3D target, vector 3, and where you want this camera to be there.

247
00:24:07,320 --> 00:24:15,320
So we will set it initially, maybe dot zero.

248
00:24:15,320 --> 00:24:21,320
Or you can place it at any vertex you want on in 3D or right now it's just zero.

249
00:24:21,320 --> 00:24:22,320
That's okay.

250
00:24:22,320 --> 00:24:25,320
And then pass the scene here.

251
00:24:25,320 --> 00:24:26,320
So we create a camera.

252
00:24:26,320 --> 00:24:27,320
All good.

253
00:24:27,320 --> 00:24:32,320
Now the next step is if you want to control, like move back and forth,

254
00:24:32,320 --> 00:24:36,320
you will have to attach a control to this camera.

255
00:24:36,320 --> 00:24:42,320
So we will just do that.

256
00:24:42,320 --> 00:24:49,320
Camera attached control and you are attaching and you specify which HTML element we are using render canvas here.

257
00:24:49,320 --> 00:24:52,320
So just set that guy.

258
00:24:52,320 --> 00:25:00,320
So which means now you will be able to interact with the camera in the sense you will be able to use the default moments of the mouse.

259
00:25:00,320 --> 00:25:02,320
Also we will enable touch.

260
00:25:02,320 --> 00:25:04,320
So you can use that now.

261
00:25:04,320 --> 00:25:06,320
Without that, it will be a fixed cam.

262
00:25:06,320 --> 00:25:08,320
You can't move it here and there.

263
00:25:08,320 --> 00:25:11,320
So based on whatever the requirement is.

264
00:25:11,320 --> 00:25:17,320
Now let's set up light quickly.

265
00:25:17,320 --> 00:25:28,320
Again, in light, you have a lot of other options in what kind of light you want to set out to light which comes from a ray.

266
00:25:28,320 --> 00:25:30,320
We can call it as a point light here.

267
00:25:30,320 --> 00:25:46,320
That's the point light which I'll use here and set the name of the light and anything and position of light.

268
00:25:46,320 --> 00:25:48,320
This is pretty interesting.

269
00:25:48,320 --> 00:25:55,320
Now this is where you would say I want my light to be coming from.

270
00:25:55,320 --> 00:25:59,320
So it's very important if you want to make it look like sun, you place it real far from the object.

271
00:25:59,320 --> 00:26:21,320
So we'll just go ahead and create that 3D vortex here.

272
00:26:22,320 --> 00:26:32,320
And specify 20 or 20 and let's find XYZ.

273
00:26:32,320 --> 00:26:36,320
Done with this and then it's the same scene we are working on.

274
00:26:36,320 --> 00:26:38,320
Go ahead and done this.

275
00:26:38,320 --> 00:26:40,320
So now we have light.

276
00:26:40,320 --> 00:26:41,320
Now it's all good.

277
00:26:41,320 --> 00:26:42,320
Lights there.

278
00:26:42,320 --> 00:26:44,320
Let's put an object here.

279
00:26:44,320 --> 00:26:47,320
Let's put a very simple geometrical object.

280
00:26:47,320 --> 00:26:49,320
Sphere and let's create that.

281
00:26:49,320 --> 00:26:58,320
So I can draw different meshes if you see the options here.

282
00:26:58,320 --> 00:27:00,320
I have a lot.

283
00:27:00,320 --> 00:27:09,320
So I will create a box, cylinder, dashed lines, decal, disk, round.

284
00:27:09,320 --> 00:27:12,320
These are those primitive options which this library gives me.

285
00:27:12,320 --> 00:27:18,320
So if I have any of these available, which I want to draw, I'll use that create lines.

286
00:27:18,320 --> 00:27:19,320
Okay.

287
00:27:19,320 --> 00:27:22,320
And sorry, it wasn't create lines.

288
00:27:22,320 --> 00:27:31,320
Let's do create a sphere, create sphere, create sphere.

289
00:27:31,320 --> 00:27:32,320
Okay.

290
00:27:32,320 --> 00:27:42,320
Name it something sphere and then here's some important stuff like segments, diameter,

291
00:27:42,320 --> 00:27:43,320
scene.

292
00:27:43,320 --> 00:27:48,320
As I said, any of these objects are made up of triangles.

293
00:27:48,320 --> 00:27:51,320
So segments basically tells me how many of such triangles.

294
00:27:51,320 --> 00:27:55,320
So this will ensure that it uses more number of triangles.

295
00:27:55,320 --> 00:27:59,320
If you have a higher segment value and your objects will look more like those objects.

296
00:27:59,320 --> 00:28:03,320
Otherwise, look, you know, D shape, triangle-ish kind of stuff.

297
00:28:03,320 --> 00:28:06,320
So you can put any value here for segment.

298
00:28:06,320 --> 00:28:09,320
For now, let's let's try it out with eight first.

299
00:28:09,320 --> 00:28:12,320
Let's try eight and then we'll change this later on.

300
00:28:12,320 --> 00:28:19,320
And I will set the diameter of the sphere or code and then finally use the scene.

301
00:28:19,320 --> 00:28:20,320
Okay.

302
00:28:20,320 --> 00:28:26,320
Now, another important stuff is this will be a sphere, but we don't have a material.

303
00:28:26,320 --> 00:28:31,320
So we'll create a material or standard materials where as I said, it's just like a mesh.

304
00:28:31,320 --> 00:28:34,320
It doesn't look, it just looks like wire diagrams.

305
00:28:34,320 --> 00:28:39,320
And if you want to make it look like real sphere, we'll have to add a material to that.

306
00:28:39,320 --> 00:28:50,320
So just go ahead and add create a new material.

307
00:28:50,320 --> 00:28:57,320
There's a standard material option and I can put this as standard.

308
00:28:57,320 --> 00:29:03,320
So I can have different, different materials part of the same scene.

309
00:29:03,320 --> 00:29:05,320
We're there with materials.

310
00:29:05,320 --> 00:29:08,320
Now I would want to have a color to this material as well.

311
00:29:08,320 --> 00:29:12,320
So we can put any of those diffuse colors.

312
00:29:12,320 --> 00:29:24,320
Like for instance, I can put a diffuse color on top of this material and it can be.

313
00:29:24,320 --> 00:29:30,320
What color do you guys prefer?

314
00:29:30,320 --> 00:29:38,320
So I can suggest something in RGB 100.

315
00:29:38,320 --> 00:29:42,320
This, this gives it a diffuse color to that material.

316
00:29:42,320 --> 00:29:45,320
So I should have that material material color as right now.

317
00:29:45,320 --> 00:29:46,320
It's RGB.

318
00:29:46,320 --> 00:29:48,320
So R is one now.

319
00:29:48,320 --> 00:29:49,320
All good.

320
00:29:49,320 --> 00:29:58,320
Now let me assign sphere of material to this style.

321
00:29:58,320 --> 00:29:59,320
Right.

322
00:29:59,320 --> 00:30:09,320
And let's start with the render loop engine job run render you and we will use an anonymous

323
00:30:09,320 --> 00:30:20,320
function here.

324
00:30:20,320 --> 00:30:21,320
Okay.

325
00:30:21,320 --> 00:30:31,320
And in this, we will just call the scene dot render.

326
00:30:31,320 --> 00:30:32,320
Okay.

327
00:30:32,320 --> 00:30:33,320
I think this is good.

328
00:30:33,320 --> 00:30:35,320
Now we should have something running.

329
00:30:35,320 --> 00:30:43,320
Let's try this out.

330
00:30:43,320 --> 00:30:44,320
Okay.

331
00:30:44,320 --> 00:30:47,320
So I didn't set the CSS correct.

332
00:30:47,320 --> 00:30:49,320
So let's one sec.

333
00:30:49,320 --> 00:30:56,320
I have that code here.

334
00:30:56,320 --> 00:31:03,320
This is just to set body HTML with 100% height, 100% and touch action none so that I can go

335
00:31:03,320 --> 00:31:06,320
ahead and interact it with touch as well.

336
00:31:06,320 --> 00:31:10,320
So the browser doesn't use its own libraries here for touch.

337
00:31:10,320 --> 00:31:11,320
Right.

338
00:31:11,320 --> 00:31:16,320
So now what you see in the front is we didn't draw a plane where to give this fair to, but

339
00:31:16,320 --> 00:31:17,320
we fixed this fair.

340
00:31:17,320 --> 00:31:18,320
So there's no moment here.

341
00:31:18,320 --> 00:31:23,320
Now what you'd see here is I can actually go ahead and rotate this fair.

342
00:31:23,320 --> 00:31:24,320
Right.

343
00:31:24,320 --> 00:31:26,320
And you can see the light I used.

344
00:31:27,320 --> 00:31:34,320
This camera, what we use here, we can go ahead and rotate the camera.

345
00:31:34,320 --> 00:31:37,320
So actually it's the camera which is rotating while I move this.

346
00:31:37,320 --> 00:31:42,320
And I can also go inside, zoom in this particular 3D object.

347
00:31:42,320 --> 00:31:48,320
So it's a proper 3D, but what you would see is the curves of this fair looks like, you

348
00:31:48,320 --> 00:31:51,320
know, it's an image or it doesn't look that great.

349
00:31:51,320 --> 00:31:55,320
And it's because of that stuff which we talked about.

350
00:31:55,320 --> 00:32:03,320
Let me just go and change this to maybe 16 segments that just adds, you know, it eats

351
00:32:03,320 --> 00:32:09,320
little more memory for sure because drawing more triangles there, but it will make it

352
00:32:09,320 --> 00:32:10,320
look better.

353
00:32:10,320 --> 00:32:20,320
So now when I run the same guy in here, now you see the finish of that is much better

354
00:32:20,320 --> 00:32:21,320
than the previous time.

355
00:32:21,320 --> 00:32:24,320
I can rotate around this and stuff like that.

356
00:32:24,320 --> 00:32:27,320
I can interact with touch as well if required.

357
00:32:27,320 --> 00:32:29,320
So this is interacting with touch.

358
00:32:29,320 --> 00:32:30,320
It works fine.

359
00:32:30,320 --> 00:32:31,320
Right.

360
00:32:31,320 --> 00:32:33,320
So this is how I draw a basic sphere.

361
00:32:33,320 --> 00:32:39,320
Now if I have to go and this is just like seven, eight lines of code, instantiate engine

362
00:32:39,320 --> 00:32:45,320
scene objects, if you have any geometrical objects, put light on top of that.

363
00:32:45,320 --> 00:32:48,320
And it's very basic maths, not much here.

364
00:32:48,320 --> 00:32:49,320
And you can build this.

365
00:32:49,320 --> 00:32:52,320
So this is the real advantage of this guy.

366
00:32:52,320 --> 00:32:54,320
And I have a few stuff which I'll not.

367
00:32:54,320 --> 00:33:00,320
So now let's come back to the previous one where we had a 3d content coming from somewhere

368
00:33:00,320 --> 00:33:02,320
and this is that code.

369
00:33:02,320 --> 00:33:05,320
And if you look at it, it doesn't look complex either.

370
00:33:05,320 --> 00:33:10,320
It has the same styling just to make it full screen and it starts with the canvas.

371
00:33:10,320 --> 00:33:17,320
And what we are doing here is we are doing a scene loader because it's 3d scene created

372
00:33:18,320 --> 00:33:23,320
by a designer using any of those 3d tools.

373
00:33:23,320 --> 00:33:25,320
It can be a renderer.

374
00:33:25,320 --> 00:33:33,320
And we are just importing the Madison dot Babylon file which contains all the vertex details,

375
00:33:33,320 --> 00:33:38,320
drawing details, images of that scene.

376
00:33:38,320 --> 00:33:45,320
So we are just loading that guy into this engine and we are adding events for key up

377
00:33:45,320 --> 00:33:48,320
so that we were going up and back.

378
00:33:48,320 --> 00:33:51,320
Basically we have to move the camera forward and backwards.

379
00:33:51,320 --> 00:33:52,320
Left, right.

380
00:33:52,320 --> 00:33:53,320
That's what we are doing it.

381
00:33:53,320 --> 00:33:55,320
And it's very simple.

382
00:33:55,320 --> 00:33:59,320
If you want to apply gravity, otherwise what might happen is you might just go out of the box,

383
00:33:59,320 --> 00:34:01,320
up, down, right?

384
00:34:01,320 --> 00:34:04,320
So all you do is in the same camp code which we wrote earlier,

385
00:34:04,320 --> 00:34:09,320
you can do a apply dot, apply gravity, dot check collisions, collisions, dot check collisions

386
00:34:09,320 --> 00:34:12,320
will ensure that you can't pass through an object.

387
00:34:12,320 --> 00:34:16,320
You will always collide with any other collision objects, right?

388
00:34:16,320 --> 00:34:18,320
And that's all it does.

389
00:34:18,320 --> 00:34:20,320
Finally it attaches the camera to the scene.

390
00:34:20,320 --> 00:34:29,320
So it creates that same stuff because it had a Madison dot Babylon file which had the 3d assets in it, right?

391
00:34:29,320 --> 00:34:31,320
So you can take it that way.

392
00:34:31,320 --> 00:34:34,320
But if you don't have it, you can build all the geometrical objects that you have.

393
00:34:34,320 --> 00:34:37,320
You can even put texture on top of that.

394
00:34:37,320 --> 00:34:42,320
Now before I finish, I'd like to show you, there's a beautiful playground.

395
00:34:42,320 --> 00:34:45,320
This is the tool I was talking about, Blender.

396
00:34:45,320 --> 00:34:48,320
And actually this is a Babylon.js playground.

397
00:34:48,320 --> 00:34:52,320
This is available online, babylonjs-playground.com.

398
00:34:52,320 --> 00:34:58,320
You can go right here and you can edit, you can play, instantiate the engine,

399
00:34:58,320 --> 00:35:00,320
and you can see it here.

400
00:35:00,320 --> 00:35:03,320
And you can make some changes here.

401
00:35:03,320 --> 00:35:06,320
This is a scene with a texture and a height map.

402
00:35:06,320 --> 00:35:11,320
Height map lets you draw something of these things.

403
00:35:11,320 --> 00:35:14,320
So it's basically a world map, what you see here.

404
00:35:14,320 --> 00:35:17,320
And you can actually go ahead and play around with this.

405
00:35:17,320 --> 00:35:21,320
Based on height map, it has added the texture of the world map on top of that.

406
00:35:21,320 --> 00:35:24,320
So it looks like this.

407
00:35:24,320 --> 00:35:30,320
And you can start with simpler basic scenes if you want to learn that.

408
00:35:30,320 --> 00:35:37,320
So we have internet.

409
00:35:37,320 --> 00:35:44,320
You for sure would need internet for this.

410
00:35:44,320 --> 00:35:46,320
So this is a nice place.

411
00:35:46,320 --> 00:35:51,320
If you haven't yet set up a Babylon.js file locally,

412
00:35:51,320 --> 00:35:53,320
you can use this playground.

413
00:35:53,320 --> 00:35:58,320
Nice place to learn, set, see different stuff, play around with the code.

414
00:35:58,320 --> 00:36:09,320
And now let me quickly come back to the slides before we close for QA.

415
00:36:09,320 --> 00:36:14,320
And I have a lot of other samples as well on Babylon.

416
00:36:14,320 --> 00:36:27,320
I think one of my favorites is...

417
00:36:28,320 --> 00:36:32,320
I have all these samples which we did.

418
00:36:32,320 --> 00:36:34,320
And you can always use that.

419
00:36:34,320 --> 00:36:40,320
This is for collisions and 3D multiple balls falling here with the collisions engine working with Babylon code.

420
00:36:40,320 --> 00:36:48,320
So you literally have to do nothing just to add the different elements as colliders and that it takes care of.

421
00:36:48,320 --> 00:36:53,320
So I'm open for questions if you have any.

422
00:36:53,320 --> 00:37:00,320
And Babylon.js playground, you have all the resources out there for learning it as well.

423
00:37:00,320 --> 00:37:07,320
This is another 3D object which we are importing using the Babylon engine.

424
00:37:07,320 --> 00:37:10,320
I have a question here.

425
00:37:10,320 --> 00:37:14,320
So I want to ask like how much resource is this using?

426
00:37:14,320 --> 00:37:21,320
It's like I will run this thing on Raspberry Pi say the resource is very limited.

427
00:37:21,320 --> 00:37:24,320
Will it be like rendering properly smoothly?

428
00:37:24,320 --> 00:37:31,320
So it's just like any other game engine and we talked about how you build your 3D stuff with those triangles.

429
00:37:31,320 --> 00:37:35,320
Say suppose we are not using 3D, we are using only 2D features.

430
00:37:35,320 --> 00:37:43,320
So still you are drawing triangles and not to get distracted.

431
00:37:43,320 --> 00:37:48,320
So it completely depends on how accurate you want your 2D things to look like.

432
00:37:48,320 --> 00:37:54,320
And I can play around with those number of triangles and reducing that helps improving your performance.

433
00:37:54,320 --> 00:37:57,320
So it doesn't add a performance overhead on top of WebGL.

434
00:37:57,320 --> 00:38:04,320
It only tries to make it more performance in terms of doing better garbage collection.

435
00:38:04,320 --> 00:38:07,320
Wouldn't there be like a RAM issue?

436
00:38:07,320 --> 00:38:09,320
In any 3D there will be a RAM issue.

437
00:38:09,320 --> 00:38:15,320
Like when you are working natively with WebGL and if you are not doing a GC properly, there will be a RAM issue.

438
00:38:15,320 --> 00:38:18,320
Each of these assets, it completely depends on this.

439
00:38:18,320 --> 00:38:22,320
If this asset is 20 MB, how can I make it less than 20 MB?

440
00:38:22,320 --> 00:38:23,320
I cannot.

441
00:38:23,320 --> 00:38:24,320
I have to load that here.

442
00:38:24,320 --> 00:38:28,320
So my whole game with all interactions now will be 21 MB.

443
00:38:28,320 --> 00:38:37,320
So if you want to cut down on that, the designer you have to ask was give me an asset with less number of vertices and should be lighter.

444
00:38:37,320 --> 00:38:47,320
So the developer can optimize it from GC side, how I ensure that I create less JavaScript objects and reuse more.

445
00:38:47,320 --> 00:38:49,320
That helps me out.

446
00:38:49,320 --> 00:38:51,320
But Babylon as an engine does that for you.

447
00:38:51,320 --> 00:38:53,320
So you don't really have to worry about performance here.

448
00:38:53,320 --> 00:38:59,320
This is a nice looking skull.

449
00:38:59,320 --> 00:39:01,320
So you can use it.

450
00:39:01,320 --> 00:39:03,320
You can zoom in it.

451
00:39:03,320 --> 00:39:06,320
This can be scary.

452
00:39:06,320 --> 00:39:11,320
So right now, frames per second is very low because it's running on a debug mode with VS.

453
00:39:11,320 --> 00:39:14,320
So there's a debugger which keeps tech of it.

454
00:39:14,320 --> 00:39:20,320
But if you run it in release mode, it will be much faster here.

455
00:39:20,320 --> 00:39:29,320
To help performance, it certainly, if you are new game developer, helps you out with ensuring that GC and stuff works more efficiently.

456
00:39:29,320 --> 00:39:31,320
The engine does that for you.

457
00:39:32,320 --> 00:39:39,320
But your question to make it work on a slow and Android device completely depends on what assets you are using.

458
00:39:39,320 --> 00:39:44,320
If you're just using geometrical shaped assets, for sure you'll never have performance issues.

459
00:39:44,320 --> 00:39:49,320
The moment you start importing more and more 3D assets is when the issue starts keeping.

460
00:39:49,320 --> 00:39:53,320
You had a 2D game, so it can work with geometry there.

461
00:39:53,320 --> 00:39:54,320
Hi.

462
00:39:54,320 --> 00:39:57,320
So I had a question about this.

463
00:39:57,320 --> 00:40:00,320
So I think you have heard about Phaser and 3Js, right?

464
00:40:00,320 --> 00:40:07,320
So I was wondering what are the strengths or weakness of Babylon when compared with 3Js?

465
00:40:07,320 --> 00:40:15,320
My specific use case scenario will be to implement specifically 3D models for web VR stuff,

466
00:40:15,320 --> 00:40:19,320
which I know is not there in Edge yet, but for those purposes.

467
00:40:19,320 --> 00:40:22,320
So it will interact with a lot of other APIs out of a browser.

468
00:40:23,320 --> 00:40:30,320
And in that case, or any normal 3D cases where there will be heavy intensive 3D rendering going on,

469
00:40:30,320 --> 00:40:36,320
like machine is not an issue resource, in that case, what will be the strength or weakness?

470
00:40:36,320 --> 00:40:39,320
Comparing with 3Js and Babylon.

471
00:40:39,320 --> 00:40:40,320
Okay.

472
00:40:40,320 --> 00:40:47,320
I haven't done a comparison of that yet, but when you mentioned about your scenario of interacting with any applications,

473
00:40:47,320 --> 00:40:48,320
this guy works in well.

474
00:40:48,320 --> 00:40:53,320
We have integrated this with many enterprise-grade applications to render 3D as well,

475
00:40:53,320 --> 00:40:58,320
but I don't have a direct comparison with the other library you mentioned about.

476
00:41:04,320 --> 00:41:07,320
So guys, any questions on Babylon?

477
00:41:07,320 --> 00:41:08,320
I'll take that offline.

478
00:41:08,320 --> 00:41:10,320
I'll just come down there.

479
00:41:11,320 --> 00:41:17,320
I'm available over the email or the Twitter, so just feel free to launch a question there.

480
00:41:17,320 --> 00:41:18,320
Thank you.

