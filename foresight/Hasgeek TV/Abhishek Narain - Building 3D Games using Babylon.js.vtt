WEBVTT

00:00.000 --> 00:10.100
Hi guys. Can you hear me? At the back? Audible? Awesome. Okay, so I see a few of us walking

00:10.100 --> 00:27.960
in. So how was the lunch? No response? Like it was probably it was pretty good. Already

00:28.720 --> 00:35.280
okay. So in this talk, we will talk about how many of you are game developers? Game

00:35.280 --> 00:42.640
developers? Oh, no one, no one, no one, no one. Okay, that's that's not so good. But

00:42.640 --> 00:47.720
what we'll do is we'll try and keep it as simple as that that how many of you are

00:47.720 --> 00:54.880
JavaScript developers? Okay, so all of you can be a game developer at the end of

00:54.880 --> 01:03.480
this session. So that that should be our goal now. Okay. And we will use absolutely

01:03.480 --> 01:08.560
all these tools that we will use is free of cost available. And it's often source library

01:08.560 --> 01:12.440
that I'm going to talk about. So you can use it from any of the dev environment that you

01:12.440 --> 01:17.920
have set up right now. And you can create beautiful games. And you can sell that you

01:17.920 --> 01:23.960
can package that into native containers as well. You might have heard about codewa or

01:23.960 --> 01:29.360
you know, you can do it in different ways, codewa is one of the ways, but you can actually

01:29.360 --> 01:35.200
put it on store as well. So in this talk, we will check that out how we can do such

01:35.200 --> 01:41.520
stuff. And we'll also understand how many of you know about WebGL? WebGL? Okay, so all

01:41.520 --> 01:46.920
you all of you know about it, but you probably haven't used it, use it as an developed anything

01:46.920 --> 01:53.600
on top of that. Okay, so a little bit about me before we get started. I'm a shake and

01:53.600 --> 02:01.880
I work as a technical evangelist at Microsoft. And that's where I tweet Narayana Bishak.

02:01.880 --> 02:08.080
So any questions post the session, you can tweet me over there and I'll respond back.

02:08.080 --> 02:14.080
And a thing which I missed out and why I'm a game developer. So I'm basically a geek

02:14.080 --> 02:19.560
and not just on a particular technology or a product, but anything, anything which interests

02:19.560 --> 02:24.000
me or for instance, a couple of years back, no, interested me. So I probably looked into

02:24.000 --> 02:30.200
that. So whatever sounds nice, I just have a look into it and games certainly was one

02:30.200 --> 02:34.800
of the things which I play a lot. So it made complete sense to look into some of those

02:34.800 --> 02:41.680
libraries which is available for gaming or 3D development which people can use. And primarily

02:41.680 --> 02:52.760
I work on web games and I'm a vivid gamer talk about any game with me. So in today's

02:52.760 --> 03:00.880
topic we'll talk about 3D accelerated graphics with HTML5 and WebGL and how this thing came

03:00.880 --> 03:05.200
into picture with the standards that's awesome and which will work across devices. And then

03:05.200 --> 03:11.640
we'll talk about a library called Babylon.js and we'll move to Babylon only when we understand

03:12.000 --> 03:15.880
the complexities of WebGL. So we'll start with that. And then we'll look into performance

03:15.880 --> 03:21.560
considerations. Not a lot of gamers here. So I'll try and skip that part. This is primarily

03:21.560 --> 03:28.600
focused for when you're creating a 3D game and you really want to boil down to performance

03:28.600 --> 03:34.120
stuff so that it works on even the simplest or the cheapest of the Android phones. So

03:34.120 --> 03:40.280
you would look into such considerations, but that's okay now. We'll just learn how to

03:40.320 --> 03:47.520
write 3D code here or render 3D graphics here. So this is a section one and all of you know

03:47.520 --> 03:54.440
about it. WebGL is JavaScript API based on OpenGL ES2 standards and it was standardized

03:54.440 --> 04:00.120
by Kronoscorp and it works perfectly well with Codewa. I have tested it and I have deployed

04:00.120 --> 04:09.080
it on Android tablet as well which was Lollipop. So it just works really well there. And

04:10.480 --> 04:15.120
it works across browsers. Whoever follows the standard, all the standard-based browsers,

04:15.120 --> 04:26.120
Mozilla, Chrome, you see this eSign? What's this? Any guesses? Wow. Okay. So that's

04:26.120 --> 04:32.240
our Internet Explorer. That's a browser called Edge which came up from Microsoft and the

04:32.240 --> 04:36.360
intention of this browser was to always keep updated just like an app which comes from

04:36.400 --> 04:41.840
a store just like Chrome so that we can push in weekly updates with the web standards. So

04:41.840 --> 04:49.840
this certainly does better than what Internet Explorer did earlier. And let's get into

04:49.840 --> 04:56.840
WebGL. And what you need to do while you use WebGL? So all you have is a Canvas or HTML

04:56.840 --> 05:02.880
Canvas and then you need to do everything. You need to create shaders. So how things work

05:02.920 --> 05:09.920
in a game. Can someone guess what's the basic element or geometric shape using which all

05:13.160 --> 05:20.160
3D objects are made up of in game? Triangle? Triangle? That's correct. Triangle. So imagine

05:21.920 --> 05:28.920
if you see a 3D human being in any game, it's actually composed of small triangles.

05:29.920 --> 05:34.280
And what you need to know about is the vertex where you place that triangle in 3D and you

05:34.280 --> 05:39.480
place multiple of those triangles and then you finally make any geometrical shape, made

05:39.480 --> 05:44.680
be a cube. It's made up out of triangles and stuff like that. So you need to write shaders.

05:44.680 --> 05:51.680
Basically, shaders are those guys which will create those triangles and then it'll, you

05:51.680 --> 05:55.240
know, there are two kinds of shaders. One primarily puts the vertex where these triangles

05:55.280 --> 06:00.160
needs to hold and then the other one puts how you put mesh on top of that, the lighting

06:00.160 --> 06:04.520
and stuff because without that, you won't be able to see anything. You'll only see lines

06:04.520 --> 06:10.320
triangle drawn. So these are those shaders which you would have to write yourself while

06:10.320 --> 06:15.200
using WebGL. So that's a little bit of a pain. And if we, all of us had to be a game developer

06:15.200 --> 06:20.800
at the end of the session, it certainly will be a difficult task to go the WebGL route.

06:20.800 --> 06:25.360
You have to work on geometry. You really need to be good at maths. That's my learning.

06:25.360 --> 06:30.960
So I should have done a little better while I was in my school. And then you have to manage

06:30.960 --> 06:35.720
the render loop. So game works in a loop. You, if you see 60 FPS frames per second in

06:35.720 --> 06:40.920
a game or 30 FPS, it's basically a loop which runs, which updates your code, updates your

06:40.920 --> 06:45.120
logic, updates your code, updates your logic, updates your code. The code part is updating

06:45.120 --> 06:50.040
the UI. So you have a UI update loop and then you have a logic update loop. So this works

06:50.080 --> 06:54.320
in loop 60 times in a second. And that's how you, you play games and you can interact

06:54.320 --> 06:59.800
with mouse or touch and stuff like that. That's a very basic of how games are done.

06:59.800 --> 07:06.800
So let's have a look at the simple code. And this code is not to scare you. So when, when

07:11.200 --> 07:18.200
I looked into WebGL first, it was a little scary. I thought game development is like

07:18.480 --> 07:25.000
real far away. And the tool which I'm using here is just for my comfort level. It's Visual

07:25.000 --> 07:28.960
Studio. There's a community version of Visual Studio, which is available for free. You can

07:28.960 --> 07:34.840
use that as well. And this gives you a very nice, I would say debugging experience for

07:34.840 --> 07:40.040
me. I'll show you that later. So that's why I use this, but you can absolutely use any

07:40.040 --> 07:47.040
code editor, anything, notepad plus plus sublime text, anything with WebGL or rather the baby

07:47.520 --> 07:52.800
lawn library that we'll talk about. Right. So what do you see in this project is I have

07:52.800 --> 07:59.800
a very simple two files, index HTML, index JS. And in the HTML file, we start with a

08:00.360 --> 08:06.860
script. You see a shader VS, a script, shader FS, two different shaders here, and which

08:06.860 --> 08:13.860
will do a lot of mathematical calculations on where to, I'll probably zoom in this fine.

08:18.040 --> 08:25.040
Okay. Or let me do this. Good. Okay. So here's, here will be a lot of calculations that you

08:30.800 --> 08:34.960
need to do for finding all the positions of the object that you will draw. So for each

08:34.960 --> 08:40.120
triangle, like if you're drawing a complex object, which contains like 100 of those triangles

08:40.120 --> 08:45.680
composed of those, you got to run this loop to get the positions of each of those vertices

08:45.720 --> 08:52.720
of the triangle. Right. So that's one thing, which doesn't look so complex here, but there's

08:53.160 --> 08:59.920
a script reference index JS and let's try and have a look in there. So in this, just

08:59.920 --> 09:04.880
for simplicity purpose, I have like put in some of those basic steps that you need to

09:04.880 --> 09:11.240
go through to create a very basic triangle in WebGL. And you start with the canvas that

09:11.280 --> 09:16.400
you have as part of your HTML. We call it render canvas. There's an element that we'll

09:16.400 --> 09:22.600
use to render the three stuff. And there's a width setting, height setting of that. And

09:22.600 --> 09:29.600
then you go in initialize the WebGL. All simple till here. Right. Now, this is how it's different

09:33.560 --> 09:40.560
from other JavaScript programming. It's like how you work in C++ and you compile the code

09:41.120 --> 09:46.320
a lot of things like that happens here with the shader. It's compiled and there's a lot

09:46.320 --> 09:53.320
of code for the shader, which the node type basically triangle. So three nodes types and

09:56.240 --> 10:03.240
it gets the context of it. And then you have those shader initializations here. Looks complex

10:04.360 --> 10:08.640
and then compilation of shaders into the program. Is that what happens? There's a linker which

10:08.680 --> 10:15.680
links this shaders with the shaders and it's quite, you know, I mean, to me it looks pretty

10:16.560 --> 10:22.320
complex. If I have to, I focus less on my business idea or the game idea and I focus

10:22.320 --> 10:28.320
more on, you know, how to get things done here. Right. And it works fine. So when I

10:28.320 --> 10:35.320
run this, it's certainly, you know, bunch of code does only this. Right. It's kind of

10:36.320 --> 10:41.320
painful. Like we put in so much of effort and then you get this, but certainly if you

10:41.320 --> 10:47.320
need a very high, deep level of control, this is the way you go because you have a lot of

10:47.320 --> 10:53.320
control over how you want to render things. But if you want to create a quick game, certainly

10:53.320 --> 10:59.320
this WebGL route would take you a little longer time unless you are a guru in this.

11:00.320 --> 11:07.320
So we will try and get back, simplify this code and render better stuff a little later

11:07.320 --> 11:14.320
with Babylon. Right. So in this process, we just quickly drew a vertex of a triangle

11:18.320 --> 11:25.320
and then gave a color to it, which was RGB 100. And then it looked somewhat like that.

11:25.320 --> 11:31.320
In real 3D scenarios, what would happen is you would need to have a wireframe of a body

11:31.320 --> 11:38.320
and this wireframe, if you see these stuff over there, actually these are nothing but

11:38.320 --> 11:42.320
those triangles, which we talked about. So all these wireframes are built out of triangles.

11:42.320 --> 11:47.320
So you will have a vertex coordinates for each of those triangles put in a particular file.

11:47.320 --> 11:52.320
It can be any 3D file. There are a lot of formats around. So you can use any of those.

11:52.320 --> 11:56.320
There's 3D, Studio Max, Maya, all of these guys emit this kind of a structure.

11:56.320 --> 12:03.320
So this is the basic wireframing. And then we have a concept of rasterization.

12:03.320 --> 12:09.320
So make it look little better. You have to fill in colors between those triangles.

12:09.320 --> 12:19.320
And then there's a process of flat shading. You give flat colors to that and it looks exactly

12:19.320 --> 12:23.320
not like this. It looks a little better than this, but on the projector it's coming as this.

12:23.320 --> 12:28.320
But you do this flat color shading in each of those triangles to make it look more real.

12:28.320 --> 12:34.320
And then you do a garage shading. It's a guy who invented this shading, which kind of blends those

12:34.320 --> 12:39.320
triangles and makes it look real good. And then finally you do a texture mapping.

12:39.320 --> 12:44.320
So you have a 2D texture, like a JPEG, and you map it on top of that wherever you want.

12:44.320 --> 12:49.320
And this is how the monkey looks like now, post the texture mapping.

12:49.320 --> 12:54.320
So it's like how we have skin here. So that's the texture for this 3D object.

12:54.320 --> 13:02.320
And this is how 3D stuff works. And when you're using WebGL, you have to take care of each of these processes.

13:02.320 --> 13:07.320
So shaders, matrices, maths everywhere, like too complex.

13:07.320 --> 13:14.320
So actually let's take the easy way, which is Babylon.js and get rid of WebGL.

13:14.320 --> 13:21.320
And a little bit about Babylon. You can see a lot of releases. It's a completely open source.

13:21.320 --> 13:27.320
If you want to add something to it, like export a library to this guy, you can do that.

13:27.320 --> 13:33.320
You can work on top of this. This was created by a few of our colleagues in France.

13:33.320 --> 13:42.320
And they actively work on it. So you can see it's a good traction that the web game development community has over this library.

13:42.320 --> 13:52.320
And we will get started with the code. But just to give you a brief, it's as simple as including the Babylon.js that's the complete game engine with you.

13:52.320 --> 14:02.320
And that will take care of your shaders, creating shaders, your physics, any of those physics like gravity and stuff that you're applying in your 3D.

14:02.320 --> 14:15.320
It will take care of those things. And then all you need to do is start with instantiating an engine from the babylon.engine and set the canvas where you want to render your context over there.

14:15.320 --> 14:22.320
So this is how you start with it. And then of course you creating instantiating an engine doesn't really make sense.

14:22.320 --> 14:28.320
So you put a camera there. Camera is the person who will be viewing that scene that you draw.

14:28.320 --> 14:34.320
And you will put up light because without light you will see everything black over there.

14:34.320 --> 14:47.320
And then you can draw objects like spheres, you know, boxes. These comes out of the box with Babylon and it handles the vertices stuff, you know, all those things.

14:47.320 --> 14:54.320
The library does that for you. And then just run the render loop and you are good to go.

14:54.320 --> 15:09.320
So it has a lot of features like if you're a game developer and want to know whether it does alpha blending or, you know, can I draw dynamic measures or can I put a dynamic text over my objects, all those things possible.

15:09.320 --> 15:17.320
So here's a list of that. A lot of things which you might not find here as well if you're a pro developer, pro game developer over the web.

15:17.320 --> 15:22.320
And these are some of those objects which are pre-created by this game engine.

15:22.320 --> 15:34.320
So if you want to create a box, sphere, cube, plane, torus, torus knot, lines, cylinder, anything of those things, it's the primitive contains it.

15:34.320 --> 15:46.320
So you don't have to worry about it. Babylon will generate these. All you have to give is the size of them, what kind of mesh or texture you want to wrap on them and stuff like that.

15:48.320 --> 15:51.320
Okay, so now let's look into a demo.

16:01.320 --> 16:07.320
And before I get into demo, well, how many of you are sleepy?

16:09.320 --> 16:12.320
The people who are sleepy are sleeping, so that's okay.

16:13.320 --> 16:21.320
Now, let's see first a small demo, what's probably the capability of this engine.

16:21.320 --> 16:28.320
And I have put an audio, so you can render audio, you can render video, and let's see what we have.

16:29.320 --> 16:49.320
I have a small scenario, a 3D stuff built in in this code, and what it does is this designer was the guy who actually built this whole 3D space.

16:49.320 --> 17:04.320
And what this game engine is doing is it's importing that 3D stuff built by a designer using, you know, there's so many tools, there's one free tool called blender, you can use that to create these.

17:04.320 --> 17:13.320
And I'm just importing that guy and instantiating it with a Babylon.js engine, game engine, right?

17:13.320 --> 17:19.320
And on top of that, we will add a few interactions, like on tap, click, those kind of things here.

17:19.320 --> 17:22.320
So now let me just add some volume here.

17:26.320 --> 17:28.320
There's a background audio here.

17:30.320 --> 17:37.320
So you can see a big mechanism and you can see there's a physics here, so when I stop, I take back a few steps.

17:37.320 --> 17:43.320
You can see on the top, there's a cloud, and there's collision of course, so I can't like pass through here.

17:43.320 --> 17:45.320
That's all fine.

17:45.320 --> 17:48.320
Now, some interesting stuff here.

17:50.320 --> 17:51.320
There we are.

17:53.320 --> 18:04.320
Okay, and you see, I can interact based on where I am, and there's something called, you can see here, I can see here actually, due to the projector, you can see.

18:04.320 --> 18:08.320
There's a, there's a grave, and on top of that, there's a helmet.

18:09.320 --> 18:16.320
When I click on it, there's a skull and a skeleton of Hamlet, so it's very easy to render here.

18:16.320 --> 18:20.320
Once you have that video object, I can just burn him again.

18:20.320 --> 18:22.320
This is Clippy.

18:22.320 --> 18:25.320
You guys remember this, Microsoft Office.

18:25.320 --> 18:27.320
Okay, that's Clippy.

18:30.320 --> 18:32.320
That's my cat.

18:32.320 --> 18:33.320
Forget it.

18:35.320 --> 18:37.320
This is interesting.

18:39.320 --> 18:41.320
This was the grave for I6.

18:41.320 --> 18:46.320
That's out of support now, so that's Internet Explorer 6 for you on that grave.

18:49.320 --> 18:56.320
Okay, so now we are in the world of standards, and we completely abide to standards, so we've got to stick to that.

18:56.320 --> 19:00.320
Okay, and this is the small stuff.

19:00.320 --> 19:05.320
Let's get started with this, and creating this isn't really a big challenge, right?

19:05.320 --> 19:11.320
And if you look into the code, we start with initialization, so we'll get back to this code a little later.

19:11.320 --> 19:14.320
Let's start creating some stuff for now.

19:15.320 --> 19:25.320
Okay, so let's, here's a very basic web template, like how you create a web application in Visual Studio.

19:25.320 --> 19:27.320
So nothing to focus on Visual Studio here.

19:27.320 --> 19:31.320
It's nothing inside it, so when I run this right now, it does nothing.

19:31.320 --> 19:35.320
I'll start with instantiating the library itself.

19:35.320 --> 19:39.320
You see, there are two Babylon libraries, .js.

19:39.320 --> 19:42.320
I mean, I just had it here for your clarification.

19:42.320 --> 19:49.320
If you use the unminified version, the max.js, you will get proper intelligence with it, so development becomes much easier.

19:49.320 --> 19:51.320
So I'm going to use that here.

19:52.320 --> 19:55.320
So that's all cool.

19:55.320 --> 19:58.320
Now let's start with canvas.

20:02.320 --> 20:07.320
I should say render canvas, anything that you like.

20:07.320 --> 20:14.320
And this is where we will instantiate the engine, we'll set the context, this element, and everything gets rendered here.

20:14.320 --> 20:20.320
Okay, and this guy, now this is all good.

20:20.320 --> 20:24.320
Now let's start with my scripts where we'll start initializing the engine.

20:24.320 --> 20:27.320
So let me write the script code.

20:27.320 --> 20:31.320
And let's start off with an engine.

20:31.320 --> 20:33.320
Let's call this, you can call this anything.

20:33.320 --> 20:36.320
We'll call this this engine new.

20:36.320 --> 20:42.320
I get this beautiful intelligence here, .engine.

20:42.320 --> 20:49.320
And I can just go ahead and mention where it needs to render.

20:49.320 --> 20:53.320
So you can see the intelligence, if you can't read it, like just helps me out while I code.

20:53.320 --> 20:57.320
So it says HTML canvas element canvas of type canvas.

20:57.320 --> 21:00.320
So I know that this is the canvas which I created on the top.

21:00.320 --> 21:03.320
So I'm going to give that render canvas.

21:03.320 --> 21:11.320
And then there is an anti-aliasing, which you can forget for now that works.

21:11.320 --> 21:14.320
It's just to ensure that works on all browsers.

21:14.320 --> 21:18.320
We are done with the engine instantiation.

21:18.320 --> 21:21.320
Now let's start with creating a small scene.

21:21.320 --> 21:23.320
So I'll just go type.

21:23.320 --> 21:30.320
Okay, let me just go a little bigger here for people at the back.

21:30.320 --> 21:36.320
Similarly, I will just go ahead and create a Babylon scene.

21:36.320 --> 21:39.320
And I will pass in Babylon.engine.

21:39.320 --> 21:43.320
So whatever engine I created, so I can have multiple engines if the need be.

21:43.320 --> 21:47.320
Or I can have multiple screens when I have level two, level three, level four game.

21:47.320 --> 21:50.320
So I can instantiate, I can put an engine to this.

21:50.320 --> 21:56.320
So which is the one which I created above, who does this, right?

21:56.320 --> 21:57.320
So we're done with the scene.

21:57.320 --> 22:01.320
Now the important stuff is what you see is the camera.

22:01.320 --> 22:05.320
So I got to set the camera now.

22:05.320 --> 22:13.320
Camera equal to new Babylon.

22:13.320 --> 22:16.320
Now there are a lot of options here.

22:16.320 --> 22:20.320
What we see, it can be a fixed point camera.

22:20.320 --> 22:22.320
It can be a arc rotate camera.

22:22.320 --> 22:27.320
Arc rotate camera is like, you specify x, y, z coordinate.

22:27.320 --> 22:32.320
And it will rotate exactly like, what do you call that?

22:32.320 --> 22:36.320
On the diameter of a sphere if you draw or circle you draw.

22:36.320 --> 22:41.320
It will keep rotating there on that arc, which it draws based on what radius you select.

22:41.320 --> 22:42.320
So we'll use that.

22:42.320 --> 22:43.320
It looks nice.

22:43.320 --> 22:45.320
You can do a left, right?

22:45.320 --> 22:48.320
So we'll use one of those cameras, but there are plenty of cameras.

22:48.320 --> 22:52.320
You have a point camera as well, whatever you want to use.

22:52.320 --> 22:56.320
Now in this, I have to give it a name.

22:56.320 --> 22:58.320
So I'll call it camera.

22:58.320 --> 23:01.320
And again, there's some magic words.

23:01.320 --> 23:06.320
Don't bother about when you are not a full-time game developer.

23:06.320 --> 23:10.320
These are some of those stuff, whether you want how you want to place camera,

23:10.320 --> 23:13.320
how you want the view to look like and stuff like that,

23:13.320 --> 23:14.320
alpha blending and stuff.

23:14.320 --> 23:17.320
It comes used over there, but we'll neglect it for now.

23:17.320 --> 23:21.320
So I'm just going to put 0, 8.

23:21.320 --> 23:24.320
You can try out these values, how it works.

23:24.320 --> 23:25.320
And then is the radius.

23:25.320 --> 23:28.320
I said it's an arc rotate camera.

23:28.320 --> 23:35.320
So whatever radius you give, it will always rotate across that particular distance, radius.

23:35.320 --> 23:39.320
So I will set this guy as 100.

23:39.320 --> 23:42.320
This is the initialization of it.

23:42.320 --> 23:47.320
But of course, if you add controls of moving forward and back, it will change.

23:47.320 --> 23:49.320
But this is the initialization of it.

23:49.320 --> 23:52.320
So done this part.

23:52.320 --> 23:55.320
Now is my target.

23:55.320 --> 24:01.320
So we'll create this.

24:01.320 --> 24:07.320
So I will give a 3D target, vector 3, and where you want this camera to be there.

24:07.320 --> 24:15.320
So we will set it initially, maybe dot zero.

24:15.320 --> 24:21.320
Or you can place it at any vertex you want on in 3D or right now it's just zero.

24:21.320 --> 24:22.320
That's okay.

24:22.320 --> 24:25.320
And then pass the scene here.

24:25.320 --> 24:26.320
So we create a camera.

24:26.320 --> 24:27.320
All good.

24:27.320 --> 24:32.320
Now the next step is if you want to control, like move back and forth,

24:32.320 --> 24:36.320
you will have to attach a control to this camera.

24:36.320 --> 24:42.320
So we will just do that.

24:42.320 --> 24:49.320
Camera attached control and you are attaching and you specify which HTML element we are using render canvas here.

24:49.320 --> 24:52.320
So just set that guy.

24:52.320 --> 25:00.320
So which means now you will be able to interact with the camera in the sense you will be able to use the default moments of the mouse.

25:00.320 --> 25:02.320
Also we will enable touch.

25:02.320 --> 25:04.320
So you can use that now.

25:04.320 --> 25:06.320
Without that, it will be a fixed cam.

25:06.320 --> 25:08.320
You can't move it here and there.

25:08.320 --> 25:11.320
So based on whatever the requirement is.

25:11.320 --> 25:17.320
Now let's set up light quickly.

25:17.320 --> 25:28.320
Again, in light, you have a lot of other options in what kind of light you want to set out to light which comes from a ray.

25:28.320 --> 25:30.320
We can call it as a point light here.

25:30.320 --> 25:46.320
That's the point light which I'll use here and set the name of the light and anything and position of light.

25:46.320 --> 25:48.320
This is pretty interesting.

25:48.320 --> 25:55.320
Now this is where you would say I want my light to be coming from.

25:55.320 --> 25:59.320
So it's very important if you want to make it look like sun, you place it real far from the object.

25:59.320 --> 26:21.320
So we'll just go ahead and create that 3D vortex here.

26:22.320 --> 26:32.320
And specify 20 or 20 and let's find XYZ.

26:32.320 --> 26:36.320
Done with this and then it's the same scene we are working on.

26:36.320 --> 26:38.320
Go ahead and done this.

26:38.320 --> 26:40.320
So now we have light.

26:40.320 --> 26:41.320
Now it's all good.

26:41.320 --> 26:42.320
Lights there.

26:42.320 --> 26:44.320
Let's put an object here.

26:44.320 --> 26:47.320
Let's put a very simple geometrical object.

26:47.320 --> 26:49.320
Sphere and let's create that.

26:49.320 --> 26:58.320
So I can draw different meshes if you see the options here.

26:58.320 --> 27:00.320
I have a lot.

27:00.320 --> 27:09.320
So I will create a box, cylinder, dashed lines, decal, disk, round.

27:09.320 --> 27:12.320
These are those primitive options which this library gives me.

27:12.320 --> 27:18.320
So if I have any of these available, which I want to draw, I'll use that create lines.

27:18.320 --> 27:19.320
Okay.

27:19.320 --> 27:22.320
And sorry, it wasn't create lines.

27:22.320 --> 27:31.320
Let's do create a sphere, create sphere, create sphere.

27:31.320 --> 27:32.320
Okay.

27:32.320 --> 27:42.320
Name it something sphere and then here's some important stuff like segments, diameter,

27:42.320 --> 27:43.320
scene.

27:43.320 --> 27:48.320
As I said, any of these objects are made up of triangles.

27:48.320 --> 27:51.320
So segments basically tells me how many of such triangles.

27:51.320 --> 27:55.320
So this will ensure that it uses more number of triangles.

27:55.320 --> 27:59.320
If you have a higher segment value and your objects will look more like those objects.

27:59.320 --> 28:03.320
Otherwise, look, you know, D shape, triangle-ish kind of stuff.

28:03.320 --> 28:06.320
So you can put any value here for segment.

28:06.320 --> 28:09.320
For now, let's let's try it out with eight first.

28:09.320 --> 28:12.320
Let's try eight and then we'll change this later on.

28:12.320 --> 28:19.320
And I will set the diameter of the sphere or code and then finally use the scene.

28:19.320 --> 28:20.320
Okay.

28:20.320 --> 28:26.320
Now, another important stuff is this will be a sphere, but we don't have a material.

28:26.320 --> 28:31.320
So we'll create a material or standard materials where as I said, it's just like a mesh.

28:31.320 --> 28:34.320
It doesn't look, it just looks like wire diagrams.

28:34.320 --> 28:39.320
And if you want to make it look like real sphere, we'll have to add a material to that.

28:39.320 --> 28:50.320
So just go ahead and add create a new material.

28:50.320 --> 28:57.320
There's a standard material option and I can put this as standard.

28:57.320 --> 29:03.320
So I can have different, different materials part of the same scene.

29:03.320 --> 29:05.320
We're there with materials.

29:05.320 --> 29:08.320
Now I would want to have a color to this material as well.

29:08.320 --> 29:12.320
So we can put any of those diffuse colors.

29:12.320 --> 29:24.320
Like for instance, I can put a diffuse color on top of this material and it can be.

29:24.320 --> 29:30.320
What color do you guys prefer?

29:30.320 --> 29:38.320
So I can suggest something in RGB 100.

29:38.320 --> 29:42.320
This, this gives it a diffuse color to that material.

29:42.320 --> 29:45.320
So I should have that material material color as right now.

29:45.320 --> 29:46.320
It's RGB.

29:46.320 --> 29:48.320
So R is one now.

29:48.320 --> 29:49.320
All good.

29:49.320 --> 29:58.320
Now let me assign sphere of material to this style.

29:58.320 --> 29:59.320
Right.

29:59.320 --> 30:09.320
And let's start with the render loop engine job run render you and we will use an anonymous

30:09.320 --> 30:20.320
function here.

30:20.320 --> 30:21.320
Okay.

30:21.320 --> 30:31.320
And in this, we will just call the scene dot render.

30:31.320 --> 30:32.320
Okay.

30:32.320 --> 30:33.320
I think this is good.

30:33.320 --> 30:35.320
Now we should have something running.

30:35.320 --> 30:43.320
Let's try this out.

30:43.320 --> 30:44.320
Okay.

30:44.320 --> 30:47.320
So I didn't set the CSS correct.

30:47.320 --> 30:49.320
So let's one sec.

30:49.320 --> 30:56.320
I have that code here.

30:56.320 --> 31:03.320
This is just to set body HTML with 100% height, 100% and touch action none so that I can go

31:03.320 --> 31:06.320
ahead and interact it with touch as well.

31:06.320 --> 31:10.320
So the browser doesn't use its own libraries here for touch.

31:10.320 --> 31:11.320
Right.

31:11.320 --> 31:16.320
So now what you see in the front is we didn't draw a plane where to give this fair to, but

31:16.320 --> 31:17.320
we fixed this fair.

31:17.320 --> 31:18.320
So there's no moment here.

31:18.320 --> 31:23.320
Now what you'd see here is I can actually go ahead and rotate this fair.

31:23.320 --> 31:24.320
Right.

31:24.320 --> 31:26.320
And you can see the light I used.

31:27.320 --> 31:34.320
This camera, what we use here, we can go ahead and rotate the camera.

31:34.320 --> 31:37.320
So actually it's the camera which is rotating while I move this.

31:37.320 --> 31:42.320
And I can also go inside, zoom in this particular 3D object.

31:42.320 --> 31:48.320
So it's a proper 3D, but what you would see is the curves of this fair looks like, you

31:48.320 --> 31:51.320
know, it's an image or it doesn't look that great.

31:51.320 --> 31:55.320
And it's because of that stuff which we talked about.

31:55.320 --> 32:03.320
Let me just go and change this to maybe 16 segments that just adds, you know, it eats

32:03.320 --> 32:09.320
little more memory for sure because drawing more triangles there, but it will make it

32:09.320 --> 32:10.320
look better.

32:10.320 --> 32:20.320
So now when I run the same guy in here, now you see the finish of that is much better

32:20.320 --> 32:21.320
than the previous time.

32:21.320 --> 32:24.320
I can rotate around this and stuff like that.

32:24.320 --> 32:27.320
I can interact with touch as well if required.

32:27.320 --> 32:29.320
So this is interacting with touch.

32:29.320 --> 32:30.320
It works fine.

32:30.320 --> 32:31.320
Right.

32:31.320 --> 32:33.320
So this is how I draw a basic sphere.

32:33.320 --> 32:39.320
Now if I have to go and this is just like seven, eight lines of code, instantiate engine

32:39.320 --> 32:45.320
scene objects, if you have any geometrical objects, put light on top of that.

32:45.320 --> 32:48.320
And it's very basic maths, not much here.

32:48.320 --> 32:49.320
And you can build this.

32:49.320 --> 32:52.320
So this is the real advantage of this guy.

32:52.320 --> 32:54.320
And I have a few stuff which I'll not.

32:54.320 --> 33:00.320
So now let's come back to the previous one where we had a 3d content coming from somewhere

33:00.320 --> 33:02.320
and this is that code.

33:02.320 --> 33:05.320
And if you look at it, it doesn't look complex either.

33:05.320 --> 33:10.320
It has the same styling just to make it full screen and it starts with the canvas.

33:10.320 --> 33:17.320
And what we are doing here is we are doing a scene loader because it's 3d scene created

33:18.320 --> 33:23.320
by a designer using any of those 3d tools.

33:23.320 --> 33:25.320
It can be a renderer.

33:25.320 --> 33:33.320
And we are just importing the Madison dot Babylon file which contains all the vertex details,

33:33.320 --> 33:38.320
drawing details, images of that scene.

33:38.320 --> 33:45.320
So we are just loading that guy into this engine and we are adding events for key up

33:45.320 --> 33:48.320
so that we were going up and back.

33:48.320 --> 33:51.320
Basically we have to move the camera forward and backwards.

33:51.320 --> 33:52.320
Left, right.

33:52.320 --> 33:53.320
That's what we are doing it.

33:53.320 --> 33:55.320
And it's very simple.

33:55.320 --> 33:59.320
If you want to apply gravity, otherwise what might happen is you might just go out of the box,

33:59.320 --> 34:01.320
up, down, right?

34:01.320 --> 34:04.320
So all you do is in the same camp code which we wrote earlier,

34:04.320 --> 34:09.320
you can do a apply dot, apply gravity, dot check collisions, collisions, dot check collisions

34:09.320 --> 34:12.320
will ensure that you can't pass through an object.

34:12.320 --> 34:16.320
You will always collide with any other collision objects, right?

34:16.320 --> 34:18.320
And that's all it does.

34:18.320 --> 34:20.320
Finally it attaches the camera to the scene.

34:20.320 --> 34:29.320
So it creates that same stuff because it had a Madison dot Babylon file which had the 3d assets in it, right?

34:29.320 --> 34:31.320
So you can take it that way.

34:31.320 --> 34:34.320
But if you don't have it, you can build all the geometrical objects that you have.

34:34.320 --> 34:37.320
You can even put texture on top of that.

34:37.320 --> 34:42.320
Now before I finish, I'd like to show you, there's a beautiful playground.

34:42.320 --> 34:45.320
This is the tool I was talking about, Blender.

34:45.320 --> 34:48.320
And actually this is a Babylon.js playground.

34:48.320 --> 34:52.320
This is available online, babylonjs-playground.com.

34:52.320 --> 34:58.320
You can go right here and you can edit, you can play, instantiate the engine,

34:58.320 --> 35:00.320
and you can see it here.

35:00.320 --> 35:03.320
And you can make some changes here.

35:03.320 --> 35:06.320
This is a scene with a texture and a height map.

35:06.320 --> 35:11.320
Height map lets you draw something of these things.

35:11.320 --> 35:14.320
So it's basically a world map, what you see here.

35:14.320 --> 35:17.320
And you can actually go ahead and play around with this.

35:17.320 --> 35:21.320
Based on height map, it has added the texture of the world map on top of that.

35:21.320 --> 35:24.320
So it looks like this.

35:24.320 --> 35:30.320
And you can start with simpler basic scenes if you want to learn that.

35:30.320 --> 35:37.320
So we have internet.

35:37.320 --> 35:44.320
You for sure would need internet for this.

35:44.320 --> 35:46.320
So this is a nice place.

35:46.320 --> 35:51.320
If you haven't yet set up a Babylon.js file locally,

35:51.320 --> 35:53.320
you can use this playground.

35:53.320 --> 35:58.320
Nice place to learn, set, see different stuff, play around with the code.

35:58.320 --> 36:09.320
And now let me quickly come back to the slides before we close for QA.

36:09.320 --> 36:14.320
And I have a lot of other samples as well on Babylon.

36:14.320 --> 36:27.320
I think one of my favorites is...

36:28.320 --> 36:32.320
I have all these samples which we did.

36:32.320 --> 36:34.320
And you can always use that.

36:34.320 --> 36:40.320
This is for collisions and 3D multiple balls falling here with the collisions engine working with Babylon code.

36:40.320 --> 36:48.320
So you literally have to do nothing just to add the different elements as colliders and that it takes care of.

36:48.320 --> 36:53.320
So I'm open for questions if you have any.

36:53.320 --> 37:00.320
And Babylon.js playground, you have all the resources out there for learning it as well.

37:00.320 --> 37:07.320
This is another 3D object which we are importing using the Babylon engine.

37:07.320 --> 37:10.320
I have a question here.

37:10.320 --> 37:14.320
So I want to ask like how much resource is this using?

37:14.320 --> 37:21.320
It's like I will run this thing on Raspberry Pi say the resource is very limited.

37:21.320 --> 37:24.320
Will it be like rendering properly smoothly?

37:24.320 --> 37:31.320
So it's just like any other game engine and we talked about how you build your 3D stuff with those triangles.

37:31.320 --> 37:35.320
Say suppose we are not using 3D, we are using only 2D features.

37:35.320 --> 37:43.320
So still you are drawing triangles and not to get distracted.

37:43.320 --> 37:48.320
So it completely depends on how accurate you want your 2D things to look like.

37:48.320 --> 37:54.320
And I can play around with those number of triangles and reducing that helps improving your performance.

37:54.320 --> 37:57.320
So it doesn't add a performance overhead on top of WebGL.

37:57.320 --> 38:04.320
It only tries to make it more performance in terms of doing better garbage collection.

38:04.320 --> 38:07.320
Wouldn't there be like a RAM issue?

38:07.320 --> 38:09.320
In any 3D there will be a RAM issue.

38:09.320 --> 38:15.320
Like when you are working natively with WebGL and if you are not doing a GC properly, there will be a RAM issue.

38:15.320 --> 38:18.320
Each of these assets, it completely depends on this.

38:18.320 --> 38:22.320
If this asset is 20 MB, how can I make it less than 20 MB?

38:22.320 --> 38:23.320
I cannot.

38:23.320 --> 38:24.320
I have to load that here.

38:24.320 --> 38:28.320
So my whole game with all interactions now will be 21 MB.

38:28.320 --> 38:37.320
So if you want to cut down on that, the designer you have to ask was give me an asset with less number of vertices and should be lighter.

38:37.320 --> 38:47.320
So the developer can optimize it from GC side, how I ensure that I create less JavaScript objects and reuse more.

38:47.320 --> 38:49.320
That helps me out.

38:49.320 --> 38:51.320
But Babylon as an engine does that for you.

38:51.320 --> 38:53.320
So you don't really have to worry about performance here.

38:53.320 --> 38:59.320
This is a nice looking skull.

38:59.320 --> 39:01.320
So you can use it.

39:01.320 --> 39:03.320
You can zoom in it.

39:03.320 --> 39:06.320
This can be scary.

39:06.320 --> 39:11.320
So right now, frames per second is very low because it's running on a debug mode with VS.

39:11.320 --> 39:14.320
So there's a debugger which keeps tech of it.

39:14.320 --> 39:20.320
But if you run it in release mode, it will be much faster here.

39:20.320 --> 39:29.320
To help performance, it certainly, if you are new game developer, helps you out with ensuring that GC and stuff works more efficiently.

39:29.320 --> 39:31.320
The engine does that for you.

39:32.320 --> 39:39.320
But your question to make it work on a slow and Android device completely depends on what assets you are using.

39:39.320 --> 39:44.320
If you're just using geometrical shaped assets, for sure you'll never have performance issues.

39:44.320 --> 39:49.320
The moment you start importing more and more 3D assets is when the issue starts keeping.

39:49.320 --> 39:53.320
You had a 2D game, so it can work with geometry there.

39:53.320 --> 39:54.320
Hi.

39:54.320 --> 39:57.320
So I had a question about this.

39:57.320 --> 40:00.320
So I think you have heard about Phaser and 3Js, right?

40:00.320 --> 40:07.320
So I was wondering what are the strengths or weakness of Babylon when compared with 3Js?

40:07.320 --> 40:15.320
My specific use case scenario will be to implement specifically 3D models for web VR stuff,

40:15.320 --> 40:19.320
which I know is not there in Edge yet, but for those purposes.

40:19.320 --> 40:22.320
So it will interact with a lot of other APIs out of a browser.

40:23.320 --> 40:30.320
And in that case, or any normal 3D cases where there will be heavy intensive 3D rendering going on,

40:30.320 --> 40:36.320
like machine is not an issue resource, in that case, what will be the strength or weakness?

40:36.320 --> 40:39.320
Comparing with 3Js and Babylon.

40:39.320 --> 40:40.320
Okay.

40:40.320 --> 40:47.320
I haven't done a comparison of that yet, but when you mentioned about your scenario of interacting with any applications,

40:47.320 --> 40:48.320
this guy works in well.

40:48.320 --> 40:53.320
We have integrated this with many enterprise-grade applications to render 3D as well,

40:53.320 --> 40:58.320
but I don't have a direct comparison with the other library you mentioned about.

41:04.320 --> 41:07.320
So guys, any questions on Babylon?

41:07.320 --> 41:08.320
I'll take that offline.

41:08.320 --> 41:10.320
I'll just come down there.

41:11.320 --> 41:17.320
I'm available over the email or the Twitter, so just feel free to launch a question there.

41:17.320 --> 41:18.320
Thank you.

