{"text": " We start diving into the greedy methods by presenting an algorithm called the orthogonal matching pursuit. The idea is the following. We are looking at the system ax equals b and we are searching for a spar solution to it. We will find the support of x by operating sequentially and gradually. We start by searching the best possible solution with the support of only one atom. This is done by sweeping through all the m possibilities and finding the column in a that leads to the best match between ax and b. Once found, this column will stay with us and we will search for the second atom to join it. Again, sweeping through all the a minus one possibilities, we choose the second atom such that the match between ax and b is the best possible. This way, the support grows by one non-zero at a time. The algorithm stops when ax and b are close enough to each other. Put in terms of the tree we have seen before, we start with an empty support and then check m options for the first atom thus getting to the best chosen solution with cardinality one. Other than checking all the possibilities of cardinality two, we check only the options that rely on the already found solution. This process proceeds this way again and again until we get to a good enough approximation. This way, instead of a combinatorial number of tests, we apply order of m tests to complete the algorithm. The highlighted path describes how the support has grown by one non-zero in each step. While the above description may seem clear enough, it is actually a bit vague and various greedy algorithms could be proposed while being based on this rationale. We shall introduce several such methods and start by focusing on the OMP, orthogonal matching pursuit. Like all other greedy methods, the OMP generates series of solutions with gradually growing support. We denote these solutions as x0, x1, etc. These proposed solutions do not obey the equation ax equals b. And we shall denote the error vector b minus a times xk as rk, standing for the residual vector at the kth step. The main point in the OMP is to use the residual in each step in order to choose the next atom. This will be done such that the chosen atom leads to a maximal reduction of the residual energy. Once we start with x0 being 0, the residual starts as the vector b. We update x by adding one non-zero, becoming x1, the energy of r1 gets smaller. We proceed this way, adding one non-zero at a time to the solution and reducing the energy of the residual until it becomes 0 or sufficiently small. And now to a detailed description of the OMP. In initialization, we set k to be 0, x0 to be 0, the support s0 to be empty. The residual is the vector b. We increase k by 1 and perform the following steps. Given the residual rk minus 1, we search for the best column to choose from a, such that when multiplied by a scalar, it gives the smallest L2 difference from the residual. Suppose that we did these M tests and got the error values Ei. The best atom to choose is the one leading to the smallest error. Let's assume that it is the atom I0. Then this index joined the supports and now sk is updated to include it. We proceed by updating the actual coefficients of x in the chosen support location that would give the smallest L2 error between axk and b. This is a simple L2 process and its result is an updated xk. Our last step is to update the residual rk to be b minus a times xk. If the obtained residual is small enough, we may choose to stop the algorithm, otherwise we increase k by 1 and proceed. Now let's zoom in on several of the steps described in order to better understand them. We shall assume that the columns of a are L2 normalized, a fact that we'll prove useful later on. Looking closely at the computation of Ei, we are optimizing with respect to the scalar z that multiplies the ith column taken from a. The optimal value of z is given by a simple derivative of this L2 expression. zopt equals the inner product between ai and the residual rk minus 1. Notice how the denominator vanished since the atoms are normalized. Plugging the expression of zopt back into the L2 error and applying few simplifying algebraic steps, we get that ei equals the square norm of the residual minus the square of the inner product between ai and the residual. Therefore, instead of minimizing the error ei, we might as well maximize the absolute value of this inner product. That means that the choice of the next atom in the OMP can be done in this way. Take a transpose and multiply by the current residual rk minus 1 and take the absolute value. The resulting vector is of length m and its maximal absolute entry points to the atom to be chosen. Focusing on the step of updating xk, this is a least squares computation over the portion of the whole vector x. Given the support as k, we are to extract only the green columns and solve for the green entries in the vector x. Thus, this amounts to a simple least squares with k unknowns and the solution is given by the pseudo inverse of as times b. Why is this algorithm called orthogonal matching pursuit? The term matching refers to the correlations we apply between the residual and the atoms in A in order to find the next atom. By orthogonal, well, in the least squares we have just discussed, the optimal solution can be found by the derivative of the L2 error with respect to x. This leads to this expression, as transpose, multiplying this yellow term. The yellow term is nothing but the new updated residual. This means that after updating the solution xk, the inner product of the new residual is orthogonal to the atoms in the support, being the bros of AS transpose. This orthogonality is an asset, because it implies that once an atom has been chosen, it will never be chosen again, since its inner product with the residual is zero. Still on the matter of the least squares that updates xk, there is an effective numerical shortcut worth mentioning. The regular solution involves an inversion of a gram matrix of size k by k computed for the matrix ASk. However, one step before we inverted a similar matrix of size k minus 1 by k minus 1 that referred to ASk minus 1 with one atom less. Could we leverage the previous result in building the new one? The answer is positive. A new column has been added to create ASk, and along with it, a new scalar unknown has been added to the vector x. There is a recursive method for solving sequence of growing least squares problems of this form exactly, which implies that we do not need to invert any matrix in the OMP. We will not discuss this numerical shortcut further here. To summarize, the OMP involves two main steps of computations. The first is the sweep stage that searches for the next atom to add. This requires the multiplication of A transpose by the residual vector, thus requiring mn operations. The second is the least square step that updates xk. The main effort here is in computing AS transpose times AS, but there are various shortcuts that can be applied here. From line, the overall number of operations that OMP requires is on the order of k times m times n, where k is the cardinality of the final solution.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.8, "text": " We start diving into the greedy methods by presenting an algorithm called the orthogonal", "tokens": [50364, 492, 722, 20241, 666, 264, 28228, 7150, 538, 15578, 364, 9284, 1219, 264, 41488, 50904], "temperature": 0.0, "avg_logprob": -0.1656587158424267, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.03998734429478645}, {"id": 1, "seek": 0, "start": 10.8, "end": 13.0, "text": " matching pursuit.", "tokens": [50904, 14324, 23365, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1656587158424267, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.03998734429478645}, {"id": 2, "seek": 0, "start": 13.0, "end": 14.0, "text": " The idea is the following.", "tokens": [51014, 440, 1558, 307, 264, 3480, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1656587158424267, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.03998734429478645}, {"id": 3, "seek": 0, "start": 14.0, "end": 20.96, "text": " We are looking at the system ax equals b and we are searching for a spar solution to it.", "tokens": [51064, 492, 366, 1237, 412, 264, 1185, 6360, 6915, 272, 293, 321, 366, 10808, 337, 257, 45954, 3827, 281, 309, 13, 51412], "temperature": 0.0, "avg_logprob": -0.1656587158424267, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.03998734429478645}, {"id": 4, "seek": 0, "start": 20.96, "end": 25.88, "text": " We will find the support of x by operating sequentially and gradually.", "tokens": [51412, 492, 486, 915, 264, 1406, 295, 2031, 538, 7447, 5123, 3137, 293, 13145, 13, 51658], "temperature": 0.0, "avg_logprob": -0.1656587158424267, "compression_ratio": 1.575268817204301, "no_speech_prob": 0.03998734429478645}, {"id": 5, "seek": 2588, "start": 25.88, "end": 30.799999999999997, "text": " We start by searching the best possible solution with the support of only one atom.", "tokens": [50364, 492, 722, 538, 10808, 264, 1151, 1944, 3827, 365, 264, 1406, 295, 787, 472, 12018, 13, 50610], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 6, "seek": 2588, "start": 30.799999999999997, "end": 36.16, "text": " This is done by sweeping through all the m possibilities and finding the column in a", "tokens": [50610, 639, 307, 1096, 538, 33285, 807, 439, 264, 275, 12178, 293, 5006, 264, 7738, 294, 257, 50878], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 7, "seek": 2588, "start": 36.16, "end": 39.84, "text": " that leads to the best match between ax and b.", "tokens": [50878, 300, 6689, 281, 264, 1151, 2995, 1296, 6360, 293, 272, 13, 51062], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 8, "seek": 2588, "start": 39.84, "end": 44.68, "text": " Once found, this column will stay with us and we will search for the second atom to", "tokens": [51062, 3443, 1352, 11, 341, 7738, 486, 1754, 365, 505, 293, 321, 486, 3164, 337, 264, 1150, 12018, 281, 51304], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 9, "seek": 2588, "start": 44.68, "end": 45.68, "text": " join it.", "tokens": [51304, 3917, 309, 13, 51354], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 10, "seek": 2588, "start": 45.68, "end": 50.92, "text": " Again, sweeping through all the a minus one possibilities, we choose the second atom such", "tokens": [51354, 3764, 11, 33285, 807, 439, 264, 257, 3175, 472, 12178, 11, 321, 2826, 264, 1150, 12018, 1270, 51616], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 11, "seek": 2588, "start": 50.92, "end": 55.36, "text": " that the match between ax and b is the best possible.", "tokens": [51616, 300, 264, 2995, 1296, 6360, 293, 272, 307, 264, 1151, 1944, 13, 51838], "temperature": 0.0, "avg_logprob": -0.1309142331464575, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.008705389685928822}, {"id": 12, "seek": 5536, "start": 55.36, "end": 59.32, "text": " This way, the support grows by one non-zero at a time.", "tokens": [50364, 639, 636, 11, 264, 1406, 13156, 538, 472, 2107, 12, 32226, 412, 257, 565, 13, 50562], "temperature": 0.0, "avg_logprob": -0.12033122476905284, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.000656238931696862}, {"id": 13, "seek": 5536, "start": 59.32, "end": 65.2, "text": " The algorithm stops when ax and b are close enough to each other.", "tokens": [50562, 440, 9284, 10094, 562, 6360, 293, 272, 366, 1998, 1547, 281, 1184, 661, 13, 50856], "temperature": 0.0, "avg_logprob": -0.12033122476905284, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.000656238931696862}, {"id": 14, "seek": 5536, "start": 65.2, "end": 70.72, "text": " Put in terms of the tree we have seen before, we start with an empty support and then check", "tokens": [50856, 4935, 294, 2115, 295, 264, 4230, 321, 362, 1612, 949, 11, 321, 722, 365, 364, 6707, 1406, 293, 550, 1520, 51132], "temperature": 0.0, "avg_logprob": -0.12033122476905284, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.000656238931696862}, {"id": 15, "seek": 5536, "start": 70.72, "end": 75.88, "text": " m options for the first atom thus getting to the best chosen solution with cardinality", "tokens": [51132, 275, 3956, 337, 264, 700, 12018, 8807, 1242, 281, 264, 1151, 8614, 3827, 365, 2920, 259, 1860, 51390], "temperature": 0.0, "avg_logprob": -0.12033122476905284, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.000656238931696862}, {"id": 16, "seek": 5536, "start": 75.88, "end": 76.88, "text": " one.", "tokens": [51390, 472, 13, 51440], "temperature": 0.0, "avg_logprob": -0.12033122476905284, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.000656238931696862}, {"id": 17, "seek": 5536, "start": 76.88, "end": 82.0, "text": " Other than checking all the possibilities of cardinality two, we check only the options", "tokens": [51440, 5358, 813, 8568, 439, 264, 12178, 295, 2920, 259, 1860, 732, 11, 321, 1520, 787, 264, 3956, 51696], "temperature": 0.0, "avg_logprob": -0.12033122476905284, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.000656238931696862}, {"id": 18, "seek": 8200, "start": 82.0, "end": 85.64, "text": " that rely on the already found solution.", "tokens": [50364, 300, 10687, 322, 264, 1217, 1352, 3827, 13, 50546], "temperature": 0.0, "avg_logprob": -0.09987122499490086, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.0024439513217657804}, {"id": 19, "seek": 8200, "start": 85.64, "end": 92.04, "text": " This process proceeds this way again and again until we get to a good enough approximation.", "tokens": [50546, 639, 1399, 32280, 341, 636, 797, 293, 797, 1826, 321, 483, 281, 257, 665, 1547, 28023, 13, 50866], "temperature": 0.0, "avg_logprob": -0.09987122499490086, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.0024439513217657804}, {"id": 20, "seek": 8200, "start": 92.04, "end": 97.64, "text": " This way, instead of a combinatorial number of tests, we apply order of m tests to complete", "tokens": [50866, 639, 636, 11, 2602, 295, 257, 2512, 31927, 831, 1230, 295, 6921, 11, 321, 3079, 1668, 295, 275, 6921, 281, 3566, 51146], "temperature": 0.0, "avg_logprob": -0.09987122499490086, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.0024439513217657804}, {"id": 21, "seek": 8200, "start": 97.64, "end": 99.36, "text": " the algorithm.", "tokens": [51146, 264, 9284, 13, 51232], "temperature": 0.0, "avg_logprob": -0.09987122499490086, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.0024439513217657804}, {"id": 22, "seek": 8200, "start": 99.36, "end": 107.84, "text": " The highlighted path describes how the support has grown by one non-zero in each step.", "tokens": [51232, 440, 17173, 3100, 15626, 577, 264, 1406, 575, 7709, 538, 472, 2107, 12, 32226, 294, 1184, 1823, 13, 51656], "temperature": 0.0, "avg_logprob": -0.09987122499490086, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.0024439513217657804}, {"id": 23, "seek": 10784, "start": 107.84, "end": 112.48, "text": " While the above description may seem clear enough, it is actually a bit vague and various", "tokens": [50364, 3987, 264, 3673, 3855, 815, 1643, 1850, 1547, 11, 309, 307, 767, 257, 857, 24247, 293, 3683, 50596], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 24, "seek": 10784, "start": 112.48, "end": 116.92, "text": " greedy algorithms could be proposed while being based on this rationale.", "tokens": [50596, 28228, 14642, 727, 312, 10348, 1339, 885, 2361, 322, 341, 41989, 13, 50818], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 25, "seek": 10784, "start": 116.92, "end": 122.60000000000001, "text": " We shall introduce several such methods and start by focusing on the OMP, orthogonal matching", "tokens": [50818, 492, 4393, 5366, 2940, 1270, 7150, 293, 722, 538, 8416, 322, 264, 422, 12224, 11, 41488, 14324, 51102], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 26, "seek": 10784, "start": 122.60000000000001, "end": 124.96000000000001, "text": " pursuit.", "tokens": [51102, 23365, 13, 51220], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 27, "seek": 10784, "start": 124.96000000000001, "end": 130.16, "text": " Like all other greedy methods, the OMP generates series of solutions with gradually growing", "tokens": [51220, 1743, 439, 661, 28228, 7150, 11, 264, 422, 12224, 23815, 2638, 295, 6547, 365, 13145, 4194, 51480], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 28, "seek": 10784, "start": 130.16, "end": 131.48000000000002, "text": " support.", "tokens": [51480, 1406, 13, 51546], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 29, "seek": 10784, "start": 131.48000000000002, "end": 136.22, "text": " We denote these solutions as x0, x1, etc.", "tokens": [51546, 492, 45708, 613, 6547, 382, 2031, 15, 11, 2031, 16, 11, 5183, 13, 51783], "temperature": 0.0, "avg_logprob": -0.14102974941855984, "compression_ratio": 1.5875486381322956, "no_speech_prob": 0.07192030549049377}, {"id": 30, "seek": 13622, "start": 136.22, "end": 140.68, "text": " These proposed solutions do not obey the equation ax equals b.", "tokens": [50364, 1981, 10348, 6547, 360, 406, 19297, 264, 5367, 6360, 6915, 272, 13, 50587], "temperature": 0.0, "avg_logprob": -0.12011028329531352, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.001791834831237793}, {"id": 31, "seek": 13622, "start": 140.68, "end": 148.57999999999998, "text": " And we shall denote the error vector b minus a times xk as rk, standing for the residual", "tokens": [50587, 400, 321, 4393, 45708, 264, 6713, 8062, 272, 3175, 257, 1413, 2031, 74, 382, 367, 74, 11, 4877, 337, 264, 27980, 50982], "temperature": 0.0, "avg_logprob": -0.12011028329531352, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.001791834831237793}, {"id": 32, "seek": 13622, "start": 148.57999999999998, "end": 151.82, "text": " vector at the kth step.", "tokens": [50982, 8062, 412, 264, 350, 392, 1823, 13, 51144], "temperature": 0.0, "avg_logprob": -0.12011028329531352, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.001791834831237793}, {"id": 33, "seek": 13622, "start": 151.82, "end": 158.06, "text": " The main point in the OMP is to use the residual in each step in order to choose the next atom.", "tokens": [51144, 440, 2135, 935, 294, 264, 422, 12224, 307, 281, 764, 264, 27980, 294, 1184, 1823, 294, 1668, 281, 2826, 264, 958, 12018, 13, 51456], "temperature": 0.0, "avg_logprob": -0.12011028329531352, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.001791834831237793}, {"id": 34, "seek": 13622, "start": 158.06, "end": 163.54, "text": " This will be done such that the chosen atom leads to a maximal reduction of the residual", "tokens": [51456, 639, 486, 312, 1096, 1270, 300, 264, 8614, 12018, 6689, 281, 257, 49336, 11004, 295, 264, 27980, 51730], "temperature": 0.0, "avg_logprob": -0.12011028329531352, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.001791834831237793}, {"id": 35, "seek": 13622, "start": 163.54, "end": 165.06, "text": " energy.", "tokens": [51730, 2281, 13, 51806], "temperature": 0.0, "avg_logprob": -0.12011028329531352, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.001791834831237793}, {"id": 36, "seek": 16506, "start": 165.06, "end": 169.98, "text": " Once we start with x0 being 0, the residual starts as the vector b.", "tokens": [50364, 3443, 321, 722, 365, 2031, 15, 885, 1958, 11, 264, 27980, 3719, 382, 264, 8062, 272, 13, 50610], "temperature": 0.0, "avg_logprob": -0.11984481606432186, "compression_ratio": 1.6442307692307692, "no_speech_prob": 0.0006051069940440357}, {"id": 37, "seek": 16506, "start": 169.98, "end": 175.94, "text": " We update x by adding one non-zero, becoming x1, the energy of r1 gets smaller.", "tokens": [50610, 492, 5623, 2031, 538, 5127, 472, 2107, 12, 32226, 11, 5617, 2031, 16, 11, 264, 2281, 295, 367, 16, 2170, 4356, 13, 50908], "temperature": 0.0, "avg_logprob": -0.11984481606432186, "compression_ratio": 1.6442307692307692, "no_speech_prob": 0.0006051069940440357}, {"id": 38, "seek": 16506, "start": 175.94, "end": 180.7, "text": " We proceed this way, adding one non-zero at a time to the solution and reducing the energy", "tokens": [50908, 492, 8991, 341, 636, 11, 5127, 472, 2107, 12, 32226, 412, 257, 565, 281, 264, 3827, 293, 12245, 264, 2281, 51146], "temperature": 0.0, "avg_logprob": -0.11984481606432186, "compression_ratio": 1.6442307692307692, "no_speech_prob": 0.0006051069940440357}, {"id": 39, "seek": 16506, "start": 180.7, "end": 185.6, "text": " of the residual until it becomes 0 or sufficiently small.", "tokens": [51146, 295, 264, 27980, 1826, 309, 3643, 1958, 420, 31868, 1359, 13, 51391], "temperature": 0.0, "avg_logprob": -0.11984481606432186, "compression_ratio": 1.6442307692307692, "no_speech_prob": 0.0006051069940440357}, {"id": 40, "seek": 16506, "start": 185.6, "end": 189.54, "text": " And now to a detailed description of the OMP.", "tokens": [51391, 400, 586, 281, 257, 9942, 3855, 295, 264, 422, 12224, 13, 51588], "temperature": 0.0, "avg_logprob": -0.11984481606432186, "compression_ratio": 1.6442307692307692, "no_speech_prob": 0.0006051069940440357}, {"id": 41, "seek": 18954, "start": 189.54, "end": 197.57999999999998, "text": " In initialization, we set k to be 0, x0 to be 0, the support s0 to be empty.", "tokens": [50364, 682, 5883, 2144, 11, 321, 992, 350, 281, 312, 1958, 11, 2031, 15, 281, 312, 1958, 11, 264, 1406, 262, 15, 281, 312, 6707, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1278822806573683, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.007924210280179977}, {"id": 42, "seek": 18954, "start": 197.57999999999998, "end": 199.85999999999999, "text": " The residual is the vector b.", "tokens": [50766, 440, 27980, 307, 264, 8062, 272, 13, 50880], "temperature": 0.0, "avg_logprob": -0.1278822806573683, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.007924210280179977}, {"id": 43, "seek": 18954, "start": 199.85999999999999, "end": 203.7, "text": " We increase k by 1 and perform the following steps.", "tokens": [50880, 492, 3488, 350, 538, 502, 293, 2042, 264, 3480, 4439, 13, 51072], "temperature": 0.0, "avg_logprob": -0.1278822806573683, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.007924210280179977}, {"id": 44, "seek": 18954, "start": 203.7, "end": 209.98, "text": " Given the residual rk minus 1, we search for the best column to choose from a, such that", "tokens": [51072, 18600, 264, 27980, 367, 74, 3175, 502, 11, 321, 3164, 337, 264, 1151, 7738, 281, 2826, 490, 257, 11, 1270, 300, 51386], "temperature": 0.0, "avg_logprob": -0.1278822806573683, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.007924210280179977}, {"id": 45, "seek": 18954, "start": 209.98, "end": 215.7, "text": " when multiplied by a scalar, it gives the smallest L2 difference from the residual.", "tokens": [51386, 562, 17207, 538, 257, 39684, 11, 309, 2709, 264, 16998, 441, 17, 2649, 490, 264, 27980, 13, 51672], "temperature": 0.0, "avg_logprob": -0.1278822806573683, "compression_ratio": 1.5467289719626167, "no_speech_prob": 0.007924210280179977}, {"id": 46, "seek": 21570, "start": 215.7, "end": 220.85999999999999, "text": " Suppose that we did these M tests and got the error values Ei.", "tokens": [50364, 21360, 300, 321, 630, 613, 376, 6921, 293, 658, 264, 6713, 4190, 29786, 13, 50622], "temperature": 0.0, "avg_logprob": -0.15297290682792664, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006397702265530825}, {"id": 47, "seek": 21570, "start": 220.85999999999999, "end": 225.7, "text": " The best atom to choose is the one leading to the smallest error.", "tokens": [50622, 440, 1151, 12018, 281, 2826, 307, 264, 472, 5775, 281, 264, 16998, 6713, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15297290682792664, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006397702265530825}, {"id": 48, "seek": 21570, "start": 225.7, "end": 228.73999999999998, "text": " Let's assume that it is the atom I0.", "tokens": [50864, 961, 311, 6552, 300, 309, 307, 264, 12018, 286, 15, 13, 51016], "temperature": 0.0, "avg_logprob": -0.15297290682792664, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006397702265530825}, {"id": 49, "seek": 21570, "start": 228.73999999999998, "end": 234.98, "text": " Then this index joined the supports and now sk is updated to include it.", "tokens": [51016, 1396, 341, 8186, 6869, 264, 9346, 293, 586, 1110, 307, 10588, 281, 4090, 309, 13, 51328], "temperature": 0.0, "avg_logprob": -0.15297290682792664, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006397702265530825}, {"id": 50, "seek": 21570, "start": 234.98, "end": 240.7, "text": " We proceed by updating the actual coefficients of x in the chosen support location that would", "tokens": [51328, 492, 8991, 538, 25113, 264, 3539, 31994, 295, 2031, 294, 264, 8614, 1406, 4914, 300, 576, 51614], "temperature": 0.0, "avg_logprob": -0.15297290682792664, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006397702265530825}, {"id": 51, "seek": 21570, "start": 240.7, "end": 245.26, "text": " give the smallest L2 error between axk and b.", "tokens": [51614, 976, 264, 16998, 441, 17, 6713, 1296, 6360, 74, 293, 272, 13, 51842], "temperature": 0.0, "avg_logprob": -0.15297290682792664, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006397702265530825}, {"id": 52, "seek": 24526, "start": 245.26, "end": 251.26, "text": " This is a simple L2 process and its result is an updated xk.", "tokens": [50364, 639, 307, 257, 2199, 441, 17, 1399, 293, 1080, 1874, 307, 364, 10588, 2031, 74, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13603957494099936, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.000477856257930398}, {"id": 53, "seek": 24526, "start": 251.26, "end": 259.3, "text": " Our last step is to update the residual rk to be b minus a times xk.", "tokens": [50664, 2621, 1036, 1823, 307, 281, 5623, 264, 27980, 367, 74, 281, 312, 272, 3175, 257, 1413, 2031, 74, 13, 51066], "temperature": 0.0, "avg_logprob": -0.13603957494099936, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.000477856257930398}, {"id": 54, "seek": 24526, "start": 259.3, "end": 264.65999999999997, "text": " If the obtained residual is small enough, we may choose to stop the algorithm, otherwise", "tokens": [51066, 759, 264, 14879, 27980, 307, 1359, 1547, 11, 321, 815, 2826, 281, 1590, 264, 9284, 11, 5911, 51334], "temperature": 0.0, "avg_logprob": -0.13603957494099936, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.000477856257930398}, {"id": 55, "seek": 24526, "start": 264.65999999999997, "end": 268.94, "text": " we increase k by 1 and proceed.", "tokens": [51334, 321, 3488, 350, 538, 502, 293, 8991, 13, 51548], "temperature": 0.0, "avg_logprob": -0.13603957494099936, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.000477856257930398}, {"id": 56, "seek": 24526, "start": 268.94, "end": 274.3, "text": " Now let's zoom in on several of the steps described in order to better understand them.", "tokens": [51548, 823, 718, 311, 8863, 294, 322, 2940, 295, 264, 4439, 7619, 294, 1668, 281, 1101, 1223, 552, 13, 51816], "temperature": 0.0, "avg_logprob": -0.13603957494099936, "compression_ratio": 1.54337899543379, "no_speech_prob": 0.000477856257930398}, {"id": 57, "seek": 27430, "start": 274.3, "end": 278.5, "text": " We shall assume that the columns of a are L2 normalized, a fact that we'll prove useful", "tokens": [50364, 492, 4393, 6552, 300, 264, 13766, 295, 257, 366, 441, 17, 48704, 11, 257, 1186, 300, 321, 603, 7081, 4420, 50574], "temperature": 0.0, "avg_logprob": -0.16837522934894172, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.002473945962265134}, {"id": 58, "seek": 27430, "start": 278.5, "end": 280.18, "text": " later on.", "tokens": [50574, 1780, 322, 13, 50658], "temperature": 0.0, "avg_logprob": -0.16837522934894172, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.002473945962265134}, {"id": 59, "seek": 27430, "start": 280.18, "end": 285.46000000000004, "text": " Looking closely at the computation of Ei, we are optimizing with respect to the scalar", "tokens": [50658, 11053, 8185, 412, 264, 24903, 295, 29786, 11, 321, 366, 40425, 365, 3104, 281, 264, 39684, 50922], "temperature": 0.0, "avg_logprob": -0.16837522934894172, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.002473945962265134}, {"id": 60, "seek": 27430, "start": 285.46000000000004, "end": 289.42, "text": " z that multiplies the ith column taken from a.", "tokens": [50922, 710, 300, 12788, 530, 264, 309, 71, 7738, 2726, 490, 257, 13, 51120], "temperature": 0.0, "avg_logprob": -0.16837522934894172, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.002473945962265134}, {"id": 61, "seek": 27430, "start": 289.42, "end": 295.02, "text": " The optimal value of z is given by a simple derivative of this L2 expression.", "tokens": [51120, 440, 16252, 2158, 295, 710, 307, 2212, 538, 257, 2199, 13760, 295, 341, 441, 17, 6114, 13, 51400], "temperature": 0.0, "avg_logprob": -0.16837522934894172, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.002473945962265134}, {"id": 62, "seek": 27430, "start": 295.02, "end": 301.3, "text": " zopt equals the inner product between ai and the residual rk minus 1.", "tokens": [51400, 710, 5747, 6915, 264, 7284, 1674, 1296, 9783, 293, 264, 27980, 367, 74, 3175, 502, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16837522934894172, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.002473945962265134}, {"id": 63, "seek": 30130, "start": 301.3, "end": 307.1, "text": " Notice how the denominator vanished since the atoms are normalized.", "tokens": [50364, 13428, 577, 264, 20687, 37518, 1670, 264, 16871, 366, 48704, 13, 50654], "temperature": 0.0, "avg_logprob": -0.16719210019675634, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.002527813892811537}, {"id": 64, "seek": 30130, "start": 307.1, "end": 312.1, "text": " Plugging the expression of zopt back into the L2 error and applying few simplifying algebraic", "tokens": [50654, 40740, 3249, 264, 6114, 295, 710, 5747, 646, 666, 264, 441, 17, 6713, 293, 9275, 1326, 6883, 5489, 21989, 299, 50904], "temperature": 0.0, "avg_logprob": -0.16719210019675634, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.002527813892811537}, {"id": 65, "seek": 30130, "start": 312.1, "end": 318.38, "text": " steps, we get that ei equals the square norm of the residual minus the square of the inner", "tokens": [50904, 4439, 11, 321, 483, 300, 14020, 6915, 264, 3732, 2026, 295, 264, 27980, 3175, 264, 3732, 295, 264, 7284, 51218], "temperature": 0.0, "avg_logprob": -0.16719210019675634, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.002527813892811537}, {"id": 66, "seek": 30130, "start": 318.38, "end": 321.3, "text": " product between ai and the residual.", "tokens": [51218, 1674, 1296, 9783, 293, 264, 27980, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16719210019675634, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.002527813892811537}, {"id": 67, "seek": 30130, "start": 321.3, "end": 326.38, "text": " Therefore, instead of minimizing the error ei, we might as well maximize the absolute", "tokens": [51364, 7504, 11, 2602, 295, 46608, 264, 6713, 14020, 11, 321, 1062, 382, 731, 19874, 264, 8236, 51618], "temperature": 0.0, "avg_logprob": -0.16719210019675634, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.002527813892811537}, {"id": 68, "seek": 30130, "start": 326.38, "end": 330.54, "text": " value of this inner product.", "tokens": [51618, 2158, 295, 341, 7284, 1674, 13, 51826], "temperature": 0.0, "avg_logprob": -0.16719210019675634, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.002527813892811537}, {"id": 69, "seek": 33054, "start": 330.54, "end": 336.34000000000003, "text": " That means that the choice of the next atom in the OMP can be done in this way.", "tokens": [50364, 663, 1355, 300, 264, 3922, 295, 264, 958, 12018, 294, 264, 422, 12224, 393, 312, 1096, 294, 341, 636, 13, 50654], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 70, "seek": 33054, "start": 336.34000000000003, "end": 342.06, "text": " Take a transpose and multiply by the current residual rk minus 1 and take the absolute", "tokens": [50654, 3664, 257, 25167, 293, 12972, 538, 264, 2190, 27980, 367, 74, 3175, 502, 293, 747, 264, 8236, 50940], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 71, "seek": 33054, "start": 342.06, "end": 343.46000000000004, "text": " value.", "tokens": [50940, 2158, 13, 51010], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 72, "seek": 33054, "start": 343.46000000000004, "end": 349.38, "text": " The resulting vector is of length m and its maximal absolute entry points to the atom", "tokens": [51010, 440, 16505, 8062, 307, 295, 4641, 275, 293, 1080, 49336, 8236, 8729, 2793, 281, 264, 12018, 51306], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 73, "seek": 33054, "start": 349.38, "end": 352.42, "text": " to be chosen.", "tokens": [51306, 281, 312, 8614, 13, 51458], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 74, "seek": 33054, "start": 352.42, "end": 357.78000000000003, "text": " Focusing on the step of updating xk, this is a least squares computation over the portion", "tokens": [51458, 479, 905, 7981, 322, 264, 1823, 295, 25113, 2031, 74, 11, 341, 307, 257, 1935, 19368, 24903, 670, 264, 8044, 51726], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 75, "seek": 33054, "start": 357.78000000000003, "end": 360.34000000000003, "text": " of the whole vector x.", "tokens": [51726, 295, 264, 1379, 8062, 2031, 13, 51854], "temperature": 0.0, "avg_logprob": -0.13842343811941618, "compression_ratio": 1.6355932203389831, "no_speech_prob": 0.0030938854906708}, {"id": 76, "seek": 36034, "start": 360.34, "end": 365.7, "text": " Given the support as k, we are to extract only the green columns and solve for the green", "tokens": [50364, 18600, 264, 1406, 382, 350, 11, 321, 366, 281, 8947, 787, 264, 3092, 13766, 293, 5039, 337, 264, 3092, 50632], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 77, "seek": 36034, "start": 365.7, "end": 368.06, "text": " entries in the vector x.", "tokens": [50632, 23041, 294, 264, 8062, 2031, 13, 50750], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 78, "seek": 36034, "start": 368.06, "end": 373.82, "text": " Thus, this amounts to a simple least squares with k unknowns and the solution is given", "tokens": [50750, 13827, 11, 341, 11663, 281, 257, 2199, 1935, 19368, 365, 350, 46048, 293, 264, 3827, 307, 2212, 51038], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 79, "seek": 36034, "start": 373.82, "end": 378.02, "text": " by the pseudo inverse of as times b.", "tokens": [51038, 538, 264, 35899, 17340, 295, 382, 1413, 272, 13, 51248], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 80, "seek": 36034, "start": 378.02, "end": 381.73999999999995, "text": " Why is this algorithm called orthogonal matching pursuit?", "tokens": [51248, 1545, 307, 341, 9284, 1219, 41488, 14324, 23365, 30, 51434], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 81, "seek": 36034, "start": 381.73999999999995, "end": 386.65999999999997, "text": " The term matching refers to the correlations we apply between the residual and the atoms", "tokens": [51434, 440, 1433, 14324, 14942, 281, 264, 13983, 763, 321, 3079, 1296, 264, 27980, 293, 264, 16871, 51680], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 82, "seek": 36034, "start": 386.65999999999997, "end": 389.78, "text": " in A in order to find the next atom.", "tokens": [51680, 294, 316, 294, 1668, 281, 915, 264, 958, 12018, 13, 51836], "temperature": 0.0, "avg_logprob": -0.15843948663449756, "compression_ratio": 1.6381322957198443, "no_speech_prob": 0.0002986833860632032}, {"id": 83, "seek": 38978, "start": 389.78, "end": 395.02, "text": " By orthogonal, well, in the least squares we have just discussed, the optimal solution", "tokens": [50364, 3146, 41488, 11, 731, 11, 294, 264, 1935, 19368, 321, 362, 445, 7152, 11, 264, 16252, 3827, 50626], "temperature": 0.0, "avg_logprob": -0.12970672256645116, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0026487347204238176}, {"id": 84, "seek": 38978, "start": 395.02, "end": 399.7, "text": " can be found by the derivative of the L2 error with respect to x.", "tokens": [50626, 393, 312, 1352, 538, 264, 13760, 295, 264, 441, 17, 6713, 365, 3104, 281, 2031, 13, 50860], "temperature": 0.0, "avg_logprob": -0.12970672256645116, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0026487347204238176}, {"id": 85, "seek": 38978, "start": 399.7, "end": 405.65999999999997, "text": " This leads to this expression, as transpose, multiplying this yellow term.", "tokens": [50860, 639, 6689, 281, 341, 6114, 11, 382, 25167, 11, 30955, 341, 5566, 1433, 13, 51158], "temperature": 0.0, "avg_logprob": -0.12970672256645116, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0026487347204238176}, {"id": 86, "seek": 38978, "start": 405.65999999999997, "end": 409.53999999999996, "text": " The yellow term is nothing but the new updated residual.", "tokens": [51158, 440, 5566, 1433, 307, 1825, 457, 264, 777, 10588, 27980, 13, 51352], "temperature": 0.0, "avg_logprob": -0.12970672256645116, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0026487347204238176}, {"id": 87, "seek": 38978, "start": 409.53999999999996, "end": 414.97999999999996, "text": " This means that after updating the solution xk, the inner product of the new residual", "tokens": [51352, 639, 1355, 300, 934, 25113, 264, 3827, 2031, 74, 11, 264, 7284, 1674, 295, 264, 777, 27980, 51624], "temperature": 0.0, "avg_logprob": -0.12970672256645116, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0026487347204238176}, {"id": 88, "seek": 41498, "start": 414.98, "end": 420.58000000000004, "text": " is orthogonal to the atoms in the support, being the bros of AS transpose.", "tokens": [50364, 307, 41488, 281, 264, 16871, 294, 264, 1406, 11, 885, 264, 738, 329, 295, 7469, 25167, 13, 50644], "temperature": 0.0, "avg_logprob": -0.12550786993969446, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.000818784988950938}, {"id": 89, "seek": 41498, "start": 420.58000000000004, "end": 426.14000000000004, "text": " This orthogonality is an asset, because it implies that once an atom has been chosen,", "tokens": [50644, 639, 38130, 266, 1860, 307, 364, 11999, 11, 570, 309, 18779, 300, 1564, 364, 12018, 575, 668, 8614, 11, 50922], "temperature": 0.0, "avg_logprob": -0.12550786993969446, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.000818784988950938}, {"id": 90, "seek": 41498, "start": 426.14000000000004, "end": 433.74, "text": " it will never be chosen again, since its inner product with the residual is zero.", "tokens": [50922, 309, 486, 1128, 312, 8614, 797, 11, 1670, 1080, 7284, 1674, 365, 264, 27980, 307, 4018, 13, 51302], "temperature": 0.0, "avg_logprob": -0.12550786993969446, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.000818784988950938}, {"id": 91, "seek": 41498, "start": 433.74, "end": 437.98, "text": " Still on the matter of the least squares that updates xk, there is an effective numerical", "tokens": [51302, 8291, 322, 264, 1871, 295, 264, 1935, 19368, 300, 9205, 2031, 74, 11, 456, 307, 364, 4942, 29054, 51514], "temperature": 0.0, "avg_logprob": -0.12550786993969446, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.000818784988950938}, {"id": 92, "seek": 41498, "start": 437.98, "end": 440.46000000000004, "text": " shortcut worth mentioning.", "tokens": [51514, 24822, 3163, 18315, 13, 51638], "temperature": 0.0, "avg_logprob": -0.12550786993969446, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.000818784988950938}, {"id": 93, "seek": 44046, "start": 440.46, "end": 446.09999999999997, "text": " The regular solution involves an inversion of a gram matrix of size k by k computed for", "tokens": [50364, 440, 3890, 3827, 11626, 364, 43576, 295, 257, 21353, 8141, 295, 2744, 350, 538, 350, 40610, 337, 50646], "temperature": 0.0, "avg_logprob": -0.19413396290370397, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0024898808915168047}, {"id": 94, "seek": 44046, "start": 446.09999999999997, "end": 447.82, "text": " the matrix ASk.", "tokens": [50646, 264, 8141, 7469, 74, 13, 50732], "temperature": 0.0, "avg_logprob": -0.19413396290370397, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0024898808915168047}, {"id": 95, "seek": 44046, "start": 447.82, "end": 454.7, "text": " However, one step before we inverted a similar matrix of size k minus 1 by k minus 1 that", "tokens": [50732, 2908, 11, 472, 1823, 949, 321, 38969, 257, 2531, 8141, 295, 2744, 350, 3175, 502, 538, 350, 3175, 502, 300, 51076], "temperature": 0.0, "avg_logprob": -0.19413396290370397, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0024898808915168047}, {"id": 96, "seek": 44046, "start": 454.7, "end": 459.06, "text": " referred to ASk minus 1 with one atom less.", "tokens": [51076, 10839, 281, 7469, 74, 3175, 502, 365, 472, 12018, 1570, 13, 51294], "temperature": 0.0, "avg_logprob": -0.19413396290370397, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0024898808915168047}, {"id": 97, "seek": 44046, "start": 459.06, "end": 463.02, "text": " Could we leverage the previous result in building the new one?", "tokens": [51294, 7497, 321, 13982, 264, 3894, 1874, 294, 2390, 264, 777, 472, 30, 51492], "temperature": 0.0, "avg_logprob": -0.19413396290370397, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0024898808915168047}, {"id": 98, "seek": 44046, "start": 463.02, "end": 465.26, "text": " The answer is positive.", "tokens": [51492, 440, 1867, 307, 3353, 13, 51604], "temperature": 0.0, "avg_logprob": -0.19413396290370397, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.0024898808915168047}, {"id": 99, "seek": 46526, "start": 465.26, "end": 470.94, "text": " A new column has been added to create ASk, and along with it, a new scalar unknown has", "tokens": [50364, 316, 777, 7738, 575, 668, 3869, 281, 1884, 7469, 74, 11, 293, 2051, 365, 309, 11, 257, 777, 39684, 9841, 575, 50648], "temperature": 0.0, "avg_logprob": -0.12241937618444462, "compression_ratio": 1.58984375, "no_speech_prob": 0.014567462727427483}, {"id": 100, "seek": 46526, "start": 470.94, "end": 473.21999999999997, "text": " been added to the vector x.", "tokens": [50648, 668, 3869, 281, 264, 8062, 2031, 13, 50762], "temperature": 0.0, "avg_logprob": -0.12241937618444462, "compression_ratio": 1.58984375, "no_speech_prob": 0.014567462727427483}, {"id": 101, "seek": 46526, "start": 473.21999999999997, "end": 477.7, "text": " There is a recursive method for solving sequence of growing least squares problems of this", "tokens": [50762, 821, 307, 257, 20560, 488, 3170, 337, 12606, 8310, 295, 4194, 1935, 19368, 2740, 295, 341, 50986], "temperature": 0.0, "avg_logprob": -0.12241937618444462, "compression_ratio": 1.58984375, "no_speech_prob": 0.014567462727427483}, {"id": 102, "seek": 46526, "start": 477.7, "end": 484.58, "text": " form exactly, which implies that we do not need to invert any matrix in the OMP.", "tokens": [50986, 1254, 2293, 11, 597, 18779, 300, 321, 360, 406, 643, 281, 33966, 604, 8141, 294, 264, 422, 12224, 13, 51330], "temperature": 0.0, "avg_logprob": -0.12241937618444462, "compression_ratio": 1.58984375, "no_speech_prob": 0.014567462727427483}, {"id": 103, "seek": 46526, "start": 484.58, "end": 489.06, "text": " We will not discuss this numerical shortcut further here.", "tokens": [51330, 492, 486, 406, 2248, 341, 29054, 24822, 3052, 510, 13, 51554], "temperature": 0.0, "avg_logprob": -0.12241937618444462, "compression_ratio": 1.58984375, "no_speech_prob": 0.014567462727427483}, {"id": 104, "seek": 46526, "start": 489.06, "end": 493.82, "text": " To summarize, the OMP involves two main steps of computations.", "tokens": [51554, 1407, 20858, 11, 264, 422, 12224, 11626, 732, 2135, 4439, 295, 2807, 763, 13, 51792], "temperature": 0.0, "avg_logprob": -0.12241937618444462, "compression_ratio": 1.58984375, "no_speech_prob": 0.014567462727427483}, {"id": 105, "seek": 49382, "start": 493.82, "end": 497.94, "text": " The first is the sweep stage that searches for the next atom to add.", "tokens": [50364, 440, 700, 307, 264, 22169, 3233, 300, 26701, 337, 264, 958, 12018, 281, 909, 13, 50570], "temperature": 0.0, "avg_logprob": -0.16577293814682378, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.007052035070955753}, {"id": 106, "seek": 49382, "start": 497.94, "end": 503.54, "text": " This requires the multiplication of A transpose by the residual vector, thus requiring mn", "tokens": [50570, 639, 7029, 264, 27290, 295, 316, 25167, 538, 264, 27980, 8062, 11, 8807, 24165, 275, 77, 50850], "temperature": 0.0, "avg_logprob": -0.16577293814682378, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.007052035070955753}, {"id": 107, "seek": 49382, "start": 503.54, "end": 505.18, "text": " operations.", "tokens": [50850, 7705, 13, 50932], "temperature": 0.0, "avg_logprob": -0.16577293814682378, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.007052035070955753}, {"id": 108, "seek": 49382, "start": 505.18, "end": 509.42, "text": " The second is the least square step that updates xk.", "tokens": [50932, 440, 1150, 307, 264, 1935, 3732, 1823, 300, 9205, 2031, 74, 13, 51144], "temperature": 0.0, "avg_logprob": -0.16577293814682378, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.007052035070955753}, {"id": 109, "seek": 49382, "start": 509.42, "end": 515.9399999999999, "text": " The main effort here is in computing AS transpose times AS, but there are various shortcuts", "tokens": [51144, 440, 2135, 4630, 510, 307, 294, 15866, 7469, 25167, 1413, 7469, 11, 457, 456, 366, 3683, 34620, 51470], "temperature": 0.0, "avg_logprob": -0.16577293814682378, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.007052035070955753}, {"id": 110, "seek": 49382, "start": 515.9399999999999, "end": 518.38, "text": " that can be applied here.", "tokens": [51470, 300, 393, 312, 6456, 510, 13, 51592], "temperature": 0.0, "avg_logprob": -0.16577293814682378, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.007052035070955753}, {"id": 111, "seek": 51838, "start": 518.38, "end": 524.06, "text": " From line, the overall number of operations that OMP requires is on the order of k times", "tokens": [50364, 3358, 1622, 11, 264, 4787, 1230, 295, 7705, 300, 422, 12224, 7029, 307, 322, 264, 1668, 295, 350, 1413, 50648], "temperature": 0.0, "avg_logprob": -0.13091447353363037, "compression_ratio": 1.3185840707964602, "no_speech_prob": 0.011557250283658504}, {"id": 112, "seek": 51838, "start": 524.06, "end": 528.26, "text": " m times n, where k is the cardinality of the final solution.", "tokens": [50648, 275, 1413, 297, 11, 689, 350, 307, 264, 2920, 259, 1860, 295, 264, 2572, 3827, 13, 50858], "temperature": 0.0, "avg_logprob": -0.13091447353363037, "compression_ratio": 1.3185840707964602, "no_speech_prob": 0.011557250283658504}], "language": "en"}