start	end	text
0	11240	Hey everybody, my name is Jason, also known as PirateJC, and today we're going to be taking
11240	18000	a look at animation groups, specifically how you can deconstruct them and use their pieces
18000	21920	to apply animations to other elements within your scene.
21920	27760	Now, I am super excited about today's video because I get to show you something that is
27760	30480	very near and dear to my heart, something that I've been working on.
30480	33040	It is the Pirate Fort.
33040	34240	Yes, it is true.
34240	39560	I do love pirates, if you couldn't tell, and the Pirate Fort is something that I am so
39560	41520	excited to share with you.
41520	46960	Now, before we dive into this, I want to take a moment to shout out to Grant Abbott.
46960	52640	If you don't know who Grant is, and you're interested in 3D, you need to know Grant.
52640	56400	Grant is this amazing 3D artist that has a YouTube channel dedicated to teaching people
56400	62720	all about 3D and how to use Blender to create amazing 3D assets and worlds.
62720	67840	I used Grant's C-Shack tutorial series as inspiration for the Pirate Fort, and really
67840	71720	you need to go check out Grant's channel, which you can find a link for in the description
71720	72720	down below.
72720	75640	So thank you, Grant, for all the amazing work you do and for the inspiration for the Pirate
75640	76640	Fort here.
76640	81040	Okay, let's dive right in to the Pirate Fort scene.
81040	84520	What we have here is this awesome scene that I can tumble around.
84640	89600	I can click on a cannon, and it'll hop back, kind of do a little hop back animation, any
89600	90600	one of them.
90600	95200	Now, these are all clones, and today the most important thing that we're going to be doing
95200	100760	is kind of taking the cannon asset, loading it into the scene, and cleaning it up.
100760	104360	Now, I know that doesn't sound super exciting, but there's a ton to learn in this, so I hope
104360	105760	you stick around for it.
105760	110040	So let's take a look at the cannon asset by itself, okay?
110040	113000	This is it here, and it looks a little something like this.
113000	119320	It starts with a single root node, and then under that I have a cannon root, and then
119320	125360	underneath that there's the meshes, the cannon mount, which is the brown part with the wheels,
125360	130120	and then of course the cast iron part of the cannon underneath that.
130120	133720	So having two roots isn't super useful, so we'll have to clean that up in a minute, but
133720	136920	I also have two animation groups.
136920	141280	I have one animation that controls sort of the little tilt of the cannon itself, and
141280	146480	then I have another one that's the little hot back for the cannon mount.
146480	151560	And having two animation groups is fine, but I actually would like to combine these together,
151560	153600	and I'll explain why in a little bit.
153600	158040	So let's dive into the cannon asset, and one of the ways that we're going to start to clean
158040	159840	it up is by getting rid of this top root node.
159840	163280	It's pretty easy, but let's take a look at how I do that, okay?
163280	171840	I have this line of code here, which imports the cannon, and then I have these three here,
171840	176320	which are going to essentially un-parent the cannon root from the top root, and here's
176320	177320	how it works.
177320	182680	I take the imported cannon, okay, and I say, give me the top node, in that case that's
182680	189120	this root node, and then I want to get all children, now there's only one, so I want
189120	195280	to take the first one, and the first child is cannon root, and then I want to say, okay,
195280	196280	that's equal to cannon.
196280	201640	So the cannon root, I'm going to set its parent to none, so now it is un-parented, and then
201640	206440	of course I can get rid of the original top level root node, and now it looks like this,
206440	207440	nice and clean.
207440	211040	So I have the cannon root, and the cannon mount, and then the cannon.
211040	215880	Now you may see this, if you're going from Blender, and using the GLTF Explorer that's
215880	221840	built into Blender 2.8 and above, then you might see that you get extra root nodes, and
221840	222840	don't worry about that.
222840	225960	You can take care of that with something simple like this, as un-parenting and clean it up
225960	228880	once you get inside of Babylon if you want to, okay.
228880	233040	The other thing I have here is animation groups, I have two of them, and I actually want there
233040	237680	to be one, and the reason I want there to be one is to manage complexity.
237680	244520	Let's think about it this way, in my scene I want to click on a cannon, and I want the
244520	246680	cannon to do two animations.
246680	251600	Well I could write, hey, animation number one play, animation number two play, or I could
251600	256160	combine them and just write animation group play, and it'll play both of them.
256160	257280	That's pretty handy.
257280	261520	Now with two it may not seem like a huge savings, but imagine if you wanted something to happen
261520	266080	where you clicked on an object, and 75 different animations happened.
266080	270000	Well then of course you'd save yourself a ton of time by grouping those together.
270000	274520	So let's dive through the scene now, now that we have a semi-cleaned-up hierarchy for our
274520	276520	cannon, okay.
276520	281640	So first thing I'm going to do is I'm going to have a clear color here, have an arc rotate
281640	285960	camera with some certain limits so I can't go too close or too far to the asset, and
285960	292320	then give canvas control so as I click the canvas I can animate the camera, okay.
292320	297280	Now this is really, really important, a really important thing to know in Babylon.
297280	305000	A mesh that's going to be animated has no knowledge of its animation.
305000	308360	You've got to really understand that it's different than some other 3D applications
308360	309720	you may have used.
309720	314120	The mesh itself exists as a completely separate construct from an animation.
314120	315840	Those are two different things.
315840	320440	Now of course an animation needs to know I need to apply a certain number of values to
320440	321440	the mesh.
321440	325560	So the animation knows about the mesh, but the mesh doesn't have any awareness of any
325560	327360	animations in the scene.
327360	331680	And that's a really, really important thing to know because that means that if I want
331680	337080	to click on a mesh, I can't just say, hey, play an animation, I have to know which animation
337080	339120	in the scene to play.
339120	345560	So I need to manage a relationship between the mesh and the associated animation I want
345560	347680	it to be associated with.
347680	349080	And so that's what this is.
349080	353480	This is going to be a JavaScript object where I'm going to store key value pairs for the
353480	358880	Canon clone that I create and the associated animation I want to play based on which clone
358880	359880	was selected.
359880	362640	Okay, so we'll use that in a little bit, but that's why this is here.
362640	366920	Okay, I'm going to load in the Pirate Fort, I'm going to name the top level node Pirate
366920	371840	Fort, I'm going to find the C and then I'm going to give the material, say that it needs
371840	372840	a depth pre-pass.
372840	374520	I'm going to set that to true.
374520	378360	That happens sometimes when you're using transparency, depending on the way you set up the asset,
378360	382320	it actually helps with the Z ordering of the transparency and how it's rendered.
382320	385000	It kind of depends on how it's set up and whether or not you want to use this or not,
385000	387200	it's up to you, but it's there and you should know about it.
387200	390200	And then also I'm going to dial up the intensity of the directional light that I've added to
390200	392520	the scene, which I've called sun.
392520	396760	Okay, now what I want to do is I'm going to, we've already seen the Canon here.
396760	399440	We've already seen that we've loaded it in and we've cleaned up the hierarchy.
399440	405560	So just like in the previous video where I used to create picking ray to select a Canon
405560	412300	based on, sorry, select a Canon based on the metadata in it, I select any mesh and I filter
412300	413780	based on the metadata.
413780	415780	I'm doing that again here.
415780	419900	So essentially I'm going to look for was a mesh picked and then did that mesh have a
419900	420980	metadata tag?
420980	422980	This isn't the only way to filter down.
422980	423980	It's just one of them.
423980	427660	And it's the one that I want to use to say, okay, was a Canon selected?
427660	429340	And that's I'm going to use that with metadata.
429340	433420	So we now imported the Canon and then I want to import the animation groups.
433420	436300	So remember we have two of them, right?
436300	438140	There's these two different animation groups.
438140	442300	I want to now set them to imported anim groups.
442300	448180	And this is where we start to get really deep into what is an animation group.
448180	452580	You have to think of it in three different layers, animations within Babylon.
452580	453900	We'll think about it this way.
453900	457420	At the very bottom level, there's an animation.
457420	463820	An animation is just values that change from one point to another over time at a certain
463820	465060	frame rate.
465060	466860	Let's take the value of X.
466860	476260	Let's say I want X to go from the value of zero to five from frames zero to 30 over 30
476260	477260	frames a second.
477260	481780	So it will change X from zero to five over one second.
481780	482780	Okay.
482780	483780	That's an animation.
483780	486580	It has no knowledge of what it's affecting.
486580	488220	It's just a value.
488220	493500	Then you have a targeted animation and a targeted animation sits above that and it says, I'm
493500	497740	going to take that animation data and apply it to a specific entity in Babylon.
497740	500460	Say a mesh or a camera or a light.
500460	504020	You could apply that same animation data to multiple different things in your scene if
504020	505420	you want to.
505420	508660	And so then, of course, you have your targeted animation, which is animation applied to a
508660	509900	thing.
509900	514420	And then what happens if you want multiple different animations all grouped together
514420	515660	to play at the same time?
515660	517660	Well, that's an animation group.
517660	522780	So now you can have multiple targeted animations in one animation group, play that group and
522780	526940	all of the animation, targeted animations inside of it will play.
526940	528500	And that's essentially what we're going to do here.
528500	533860	So we're going to rip apart the animation groups that start with the cannon and then
533860	536420	we're going to rebuild them in the way that we want them.
536420	537980	So let's walk through this together.
537980	541980	Firstly, I'm going to create an array called animations because what I'm going to do is
541980	546580	I'm going to dive in to the targeted to the animation groups into the targeted animations
546580	549700	and pull out just the raw animation data.
549700	551300	I don't care what it's associated with.
551300	553420	I just want the animation data.
553420	556700	And so I'm going to pull that out here and it looks like this.
556700	559220	I'm going to loop through all of the imported animation groups.
559220	561020	Remember, in this case, we have two.
561020	563900	I'm going to stop any animations from playing.
563900	564900	That's not necessary.
564900	567660	It's just something I wanted to do for debugging so I didn't constantly see the animation
567660	568860	looping.
568860	573060	And so then I'm going to say, okay, I'm going to take the imported animation group.
573060	579420	I'm going to take the targeted animation and pull out just the animation data itself and
579420	582660	then push that into my animations array.
582660	586420	And then I'm going to dispose of the original animation group.
586420	591340	So by the time I'm done with this loop, I have an array here that has the raw animation
591340	598340	data for the camera tilt and the camera mount, little hopback thing, independent of any meshes.
598340	602420	It's just the data stored into an array, okay?
602420	609340	Now what I want to do is create a new animation group here and I'm going to add a new targeted
609340	610340	animation.
610340	613660	I'm going to take the, let's say, I don't know which one's which, I forget, but we're
613660	619100	going to take the Canon tilt and we're going to apply that to the Canon.
619100	625140	Now it's the same Canon mesh that it was originally applied to, but I'm redoing it with a singular
625140	626820	animation group.
626820	630500	And it may sound redundant, but again, think about saving yourself time down the road by
630500	633420	only having one animation group to manage.
633420	634420	So I do this twice.
634420	640380	The Canon gets its animation back and the Canon mount gets its little hop animation back.
640380	643900	So by the time that I'm done with this, it actually looks a little something like this.
643900	648620	I have the Canon root, I have the Canon mount and the Canon and then under animation groups,
648620	654580	I have a single animation group now that has two different targeted animations on it.
654580	656620	Now it's nice and clean.
656620	660460	Now we're ready to clone this and build out our scene.
660460	664540	Okay, so that's a lot and it's important to know how animations work.
664540	666460	The next part, not important to you at all.
666460	671300	It's just the specific positions and rotations that I want the Cannons in for this particular
671300	672300	scene.
672300	676380	Okay, so it's not something that you really need to care about, but this definitely is.
676380	681300	I'm going to loop through 10 times and create 10 clones of our original Canon.
681300	684420	So each time we go through the loop, I create a clone.
684420	689340	I'm going to set its position based on where I want these positions, again, based on this
689340	691580	array of positions and rotations here.
691580	695340	And then I'm going to create a new animation group.
695340	697220	Now this part might throw you off.
697220	699740	You're saying I'm cloning the Canon, right?
699740	701580	So why are you creating a new animation group?
701580	708740	Because remember, in Babylon, the mesh exists separately from the animation.
708740	713660	So even though if I have my original Canon here and my original animation group for that
713660	721100	Canon here, and I clone the Canon, I now have to figure out how do I create a new animation
721100	726300	group that points to the cloned Canon instead of pointing to the original Canon?
726300	727460	I hope that makes sense.
727460	728980	That's what we're doing right here.
728980	733660	And again, you can see those three layers of animation group down to targeted animation
733660	735140	down to animation data.
735140	737320	You can see that at play again right here.
737320	742580	So I create a new animation group and then I'm going to add a new targeted animation.
742580	749140	And I'm going to pull the animation curve data from the Canon Anim group.
749140	755620	That's the one animation group I created with the first targeted animation and the first
755620	757100	curve data from it.
757100	761100	And then I'm going to apply that to the appropriate mesh.
761100	762100	Okay.
762100	767860	And so now what I have after this is done is with each loop through, I have a clone of
767860	774020	the Canon and I have a new animation group where the animations are pointing to the cloned
774020	776700	meshes, not the original meshes.
776700	777780	I hope that makes sense.
777780	779220	Why that's important.
779220	782740	So by the time, oh, and then of course, what I do is I'll go through and because I don't
782740	786860	need the original Canon anymore, that was just sort of my copy mechanism, I'm going to get
786860	790540	rid of the original Canon, okay, and the original Canon group, Anim group.
790540	792540	So now let's look at the inspector at the hierarchy.
792540	798420	I have 10 different cannons, each with that nice clean hierarchy that we went through.
798420	803900	And under animation groups, I have 10 different animation groups, each with targeted animations
803900	810020	pointing at the appropriate cloned mesh, but we're not quite done there because remember,
810020	815300	I want to interact with a mesh and then play an animation, which means I need to store a
815300	820580	relationship for the mesh to know which animation group is associated with it.
820580	824340	And that is going to happen right here, actually skipped over that part.
824340	831420	That's where I'm going to say, okay, I want to take this Canon animation pairings JavaScript
831420	832420	object.
832420	837980	And I want to say the Canon clone that I've created, the mesh, the name of the top note
837980	842780	of the mesh is going to be set to the name of the animation group.
842780	848260	So now I have key value pairs for all 10 cannons and the associated animation groups.
848260	849380	Awesome.
849380	853500	So now we get to get into some of the fun interaction parts.
853500	858500	I'm going to here check in the scene when the pointer is clicked, I'm going to look
858500	859820	at the pick results.
859820	863420	Now, if you remember from that last video that I did, I showed you how to use that create
863420	866940	picking ray, this is just a different way to do it.
866940	870140	There's multiple different ways in Babylon to accomplish what you want to be able to
870140	871140	do.
871140	872140	This is just one of them.
872140	875940	And so here I'm introducing a new way to do it, which is to take the pick result from
875940	878980	the on pointer down event.
878980	884580	And so what I want to do is I first want to say, was there a mesh that was picked?
884580	889300	And did that mesh have metadata equal to the word Canon?
889300	893980	So this is the moment where I'm filtering between picking on a Canon and any other type
893980	897780	of mesh in the scene, say the pirate fort per se.
897780	901820	If I end up inside of this check, then what I'm going to do is I'm going to do a little
901820	902820	bit of logic here.
902820	906020	This part might be a tiny bit confusing, but basically it's just a bit of code I wrote
906020	910660	to figure out the top level node for any given mesh that was picked.
910660	918700	So no matter if I pick the Canon or the Canon mount, I'm going to find the top level parent
918700	922560	in that particular asset because that's what's stored in the key value pair.
922560	928740	So the top parent becomes always this Canon clone, this top level node, whatever, whichever
928740	929940	one it is.
929940	935460	So then what I'm going to do is I'm going to say, okay, let's check that key value pair
936260	941460	and based on the top level node name, that's here, based on which Canon clone I picked,
941460	944380	what's the appropriate or the associated animation group?
944380	947340	And then I'm going to say that is going to be animation to play.
947340	948340	I'm going to store that.
948340	955520	So now I know I've clicked on a Canon and I know the appropriate animation group name
955520	957020	that I should play.
957020	961580	So then I'm going to loop through all of the animation groups in the scene and I am going
961580	966020	to then say, hey, is the current one that I'm looking at equal?
966020	969660	Is it the same name as the animation to play?
969660	973700	The one I've said is the appropriate one to play based on which mesh that was clicked.
973700	976900	If it is, then go ahead and play it.
976900	978660	And that is the end of the scene.
978660	980740	Then we end up with our clones.
980740	982580	I can click on any given Canon.
982580	989140	They all have their own animation groups and they all have their own interaction because
989140	992340	they have their own animation groups pointing to the appropriate clones.
992340	995020	Man, that's a lot, but how exciting is that?
995020	996620	It's so cool.
996620	1002540	That is our scene fully constructed, cleaning up and going through the complexity of animation
1002540	1006620	groups and how to break them apart and reuse pieces to create new ones and clone them for
1006620	1008980	different objects that we're going to clone in the scene.
1008980	1011060	I hope this video has been useful to you.
1011060	1014860	Again, please go check out Grant Abbott's channel because I just really love the work
1014860	1017140	that he's doing and we want to support him.
1017140	1019020	And thank you so much for coming and checking this out.
1019020	1020980	I hope it was educational for you.
1020980	1024420	Whatever future kind of content you want to see, go ahead and comment down below.
1024420	1025740	We'd love to see that.
1025740	1028700	And in the description down below, you can find a link to this playground.
1028700	1034820	You can also find a link to the sandbox, to Grant's channel, and then also a documentation
1034820	1038060	page on animation groups within Babylon.
1038060	1039660	Again, thank you so much for checking this out.
1039660	1043580	If you haven't already had a chance to do this, I hope you consider subscribing to this
1043580	1045660	channel so you don't miss any future updates.
1045660	1047060	And again, thanks so much for joining me.
1047060	1047740	We'll see you next time.
