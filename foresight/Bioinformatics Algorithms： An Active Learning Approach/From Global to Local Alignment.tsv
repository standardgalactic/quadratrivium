start	end	text
0	12720	There are many different phases of sequence comparison in biology and we will now learn
12720	14220	some of them.
14220	21640	We'll ask first the question what is wrong with the naive scoring model that we used
21640	29560	for the longest common subsequence problem when we scored all matches by one.
29560	36720	We saw the biologically adequate alignment of adenylation demands constructed by Mara
36720	44760	Hales but this alignment is not the optimal longest common subsequence of this adenylation
44760	45860	demand.
45860	52160	At the bottom of this slide there is actually longest common subsequence, it has more matches
52160	56520	but it is biologically completely wrong.
56520	63760	So the question arises how can we modify the scoring for computing alignments in such
63760	70560	a way that we avoid frivolous matches that you can see in the bottom alignment on this
70560	72560	slide.
72560	78760	In the current primitive scoring we simply compute score as the number of matches.
78760	85840	Let's change it and let's also take into account penalties for mismatches and insertion
85840	86840	in deletions.
86840	94600	So we give premium 1 to every match and in our alignment game we now give penalty mu
94600	100160	to every mismatch and penalty sigma to every indel.
100160	104800	And as a result the score in our alignment game changes.
104800	108360	Before it was 4, now it is minus 7.
108360	114680	How to find optimal solution of the alignment gain and optimal alignment under this model?
114680	122040	In this case we essentially constructed the scoring matrix which is 5 by 5 matrix which
122040	129720	describes the score for matching every two symbols in the extended alphabet which consists
129720	133880	of nucleotides plus the space symbol.
133880	140360	And we can design whatever arbitrary scoring matrices, for example I design an arbitrary
140360	146240	matrix here and we can use it to play the alignment game.
146240	155000	In fact biologists invest a lot of efforts into designing adequate scoring matrices,
155000	159120	particularly scoring matrices for amino acid sequences.
159120	166320	And the goal of the scoring matrices is to reflect the mutation propensity of different
166320	167600	amino acid.
167600	176520	For example amino acid Y often mutates into F and that's why it gets high score plus
176520	183320	7 but rarely mutates in some other amino acids, for example proline and in this case it gets
183320	186520	actually penalty minus 5.
186520	192200	And this is an example of scoring matrix that biologists use.
192200	198840	Now in the case we work with scoring matrices how our dynamic programming currency change?
198840	206120	Instead of the currency shown on the slide we simply have the following currency, Sij
206120	215800	equal to four different possibilities depending on whether we are computing score for insertion,
215800	223440	deletion, match or mismatch as shown on the slide and the scores of edges in the alignment
223440	228240	graph change accordingly as shown on the slide.
228240	234600	Or alternatively we can, for very general scoring matrix, we simply can write three
234600	245680	terms of currency where green, blue and red alternatives correspond to vertical, horizontal
245680	248400	and diagonal edges.
248400	254760	And global alignment problem that we want to solve is the following one.
254760	261720	Given strings V and W and a matrix score we want to find an alignment of this string
261720	270840	whose alignment score as defined by the scoring matrix is maximum among all possible alignments
270840	273880	of these strings.
273880	280240	Global alignment is a good model for some biological sequence comparison problems but
280240	283640	bad model for some others.
283640	288280	And I'll give you an example of how we unbox genes to illustrate the challenges of biological
288280	290200	sequence comparison.
290200	298160	Two genes in different species may be similar over short conserved regions and dissimilar
298160	300600	over remaining regions.
300600	308240	For example, homeobog genes have short regions called the homeo domain that is highly conserved
308240	312320	among species varying from human to fly.
312320	318920	But global alignment of homeobog genes would not reveal homeo domain because it would most
318920	324880	likely pass through completely arbitrary regions of the sequences since homeo domains
324880	329000	are short sub-segments of homeobog genes.
329000	336040	How can we find this important biological similarity that however do not extend over
336040	343120	the entire length of sequences and thus in the case of search for these short sequences
343120	346200	the global alignment fails?
346200	352080	At this slide you see two alignments and the question arises which alignment is better.
352080	358640	The alignment on the top actually has a higher score but the alignment at the bottom has
358640	366840	lower score but more biologically relevant because it shows a very strong match of short
366840	367840	sequences.
367840	374200	How can we find this alignment despite the fact that global alignment may miss it?
374200	380800	And search for such short segments within sequences that exhibit similarity is called
380800	383200	the local alignment problem.
383200	389880	So in this case there are two possible alignments in the alignment graphs.
389880	397080	The alignment on the top is biologically correct but the alignment in the middle is actually
397080	401920	a random alignment that however has a higher score from the perspective of global alignment
401920	408120	and therefore hides from us the biologically relevant alignment.
408120	414600	So what I want to do is to somehow find these short sub-strengths of the entire strength
414600	416640	that exhibit high similarity.
416640	417640	How do I do this?
417640	424680	There is a very simple way to search for short similar strengths within longer strengths.
424680	431880	We can simply try all possible pair of strengths from two sequences and each such pair corresponds
431880	435200	to a rectangle in the alignment graph.
435200	437280	Here is one of the rectangles.
437280	442480	But there are so many such rectangles that this approach of course becomes impractical
442480	449520	since search for optimal global alignment within each smaller rectangle requires quadratic
449520	455120	time and therefore overall the running time will become very large.
455120	460960	What can we do to come up with a practical local alignment algorithm?
460960	465320	The first thing we need to do is to formulate the local alignment problem.
465320	475200	The input is strengths v and w and a scoring matrix score and output as is sub-strengths
475200	482120	of the entire strengths v and w whose global alignment as defined by the score is maximum
482120	488760	in one all global alignments of all sub-strengths of v and w.
488760	497000	My proposal for solving this problem let's introduce free taxi rides through the alignment
497000	498000	graph.
498000	508160	Indeed, if we were able to start in the source and travel freely to the start of the concert
508160	516320	fragment and then take another free taxi ride from the end of concert fragment to the destination
516320	524040	final note of the alignment graph, then we will be able to score these interesting segments
524040	532120	by taking zero cost of taxi ride to the beginning of this fragment, then real cost of the alignment
532120	537120	of the fragment and then plus another zero which is the cost of another taxi ride.
537120	541040	You may ask how in the world we can take taxi ride through the alignment graph?
541680	547800	The whole point of introducing this concept of Manhattan kind cities and traveling in
547800	555400	them is that we are free to build whatever Manhattan like grids for solving our biological
555400	559560	problems and in this case what is a free taxi ride?
559560	565840	It's simply adding extra edges of weight zero to our alignment graph and since we are free
565840	571000	to build whatever Manhattan we want, we can of course, we are at liberty of introducing
571000	572320	this taxi ride.
572320	575200	So let's see how our graph change.
575200	578120	What we need to do to implement this free taxi ride?
578120	585320	We need to add edges from the source to any other note and it will be roughly quadratic
585320	587200	number of edges.
587200	592440	We also need to add edges from every note to the same once again quadratic number of
592440	597920	edges so the number of edges in the graph remains quadratic and therefore our algorithm
597920	600360	will be fast.
600360	606440	And in that how our dynamic programming currency change for the local alignment?
606440	614800	Before we had three possibilities corresponding to three ways to enter a note.
614800	619040	By vertical edge, by horizontal edge and by diagonal edge.
619040	623680	Now there is one more possibility we can take a free taxi ride to the note.
623680	631520	So now there are four possibilities for entering every note which means that we need to add
631520	639480	the fourth term in this currency which is the weight of edge from zero zero to ij.
639480	644720	And the weight of this edge since our taxi rides are free is zero and that's the only
644760	654800	change that we need to implement to make our local alignment algorithms practical and fast.
654800	661920	And we now move to the problem of defining adequate insertion and deletion penalties
661920	663440	in sequence alignment.
