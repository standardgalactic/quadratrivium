1
00:00:00,000 --> 00:00:12,720
There are many different phases of sequence comparison in biology and we will now learn

2
00:00:12,720 --> 00:00:14,220
some of them.

3
00:00:14,220 --> 00:00:21,640
We'll ask first the question what is wrong with the naive scoring model that we used

4
00:00:21,640 --> 00:00:29,560
for the longest common subsequence problem when we scored all matches by one.

5
00:00:29,560 --> 00:00:36,720
We saw the biologically adequate alignment of adenylation demands constructed by Mara

6
00:00:36,720 --> 00:00:44,760
Hales but this alignment is not the optimal longest common subsequence of this adenylation

7
00:00:44,760 --> 00:00:45,860
demand.

8
00:00:45,860 --> 00:00:52,160
At the bottom of this slide there is actually longest common subsequence, it has more matches

9
00:00:52,160 --> 00:00:56,520
but it is biologically completely wrong.

10
00:00:56,520 --> 00:01:03,760
So the question arises how can we modify the scoring for computing alignments in such

11
00:01:03,760 --> 00:01:10,560
a way that we avoid frivolous matches that you can see in the bottom alignment on this

12
00:01:10,560 --> 00:01:12,560
slide.

13
00:01:12,560 --> 00:01:18,760
In the current primitive scoring we simply compute score as the number of matches.

14
00:01:18,760 --> 00:01:25,840
Let's change it and let's also take into account penalties for mismatches and insertion

15
00:01:25,840 --> 00:01:26,840
in deletions.

16
00:01:26,840 --> 00:01:34,600
So we give premium 1 to every match and in our alignment game we now give penalty mu

17
00:01:34,600 --> 00:01:40,160
to every mismatch and penalty sigma to every indel.

18
00:01:40,160 --> 00:01:44,800
And as a result the score in our alignment game changes.

19
00:01:44,800 --> 00:01:48,360
Before it was 4, now it is minus 7.

20
00:01:48,360 --> 00:01:54,680
How to find optimal solution of the alignment gain and optimal alignment under this model?

21
00:01:54,680 --> 00:02:02,040
In this case we essentially constructed the scoring matrix which is 5 by 5 matrix which

22
00:02:02,040 --> 00:02:09,720
describes the score for matching every two symbols in the extended alphabet which consists

23
00:02:09,720 --> 00:02:13,880
of nucleotides plus the space symbol.

24
00:02:13,880 --> 00:02:20,360
And we can design whatever arbitrary scoring matrices, for example I design an arbitrary

25
00:02:20,360 --> 00:02:26,240
matrix here and we can use it to play the alignment game.

26
00:02:26,240 --> 00:02:35,000
In fact biologists invest a lot of efforts into designing adequate scoring matrices,

27
00:02:35,000 --> 00:02:39,120
particularly scoring matrices for amino acid sequences.

28
00:02:39,120 --> 00:02:46,320
And the goal of the scoring matrices is to reflect the mutation propensity of different

29
00:02:46,320 --> 00:02:47,600
amino acid.

30
00:02:47,600 --> 00:02:56,520
For example amino acid Y often mutates into F and that's why it gets high score plus

31
00:02:56,520 --> 00:03:03,320
7 but rarely mutates in some other amino acids, for example proline and in this case it gets

32
00:03:03,320 --> 00:03:06,520
actually penalty minus 5.

33
00:03:06,520 --> 00:03:12,200
And this is an example of scoring matrix that biologists use.

34
00:03:12,200 --> 00:03:18,840
Now in the case we work with scoring matrices how our dynamic programming currency change?

35
00:03:18,840 --> 00:03:26,120
Instead of the currency shown on the slide we simply have the following currency, Sij

36
00:03:26,120 --> 00:03:35,800
equal to four different possibilities depending on whether we are computing score for insertion,

37
00:03:35,800 --> 00:03:43,440
deletion, match or mismatch as shown on the slide and the scores of edges in the alignment

38
00:03:43,440 --> 00:03:48,240
graph change accordingly as shown on the slide.

39
00:03:48,240 --> 00:03:54,600
Or alternatively we can, for very general scoring matrix, we simply can write three

40
00:03:54,600 --> 00:04:05,680
terms of currency where green, blue and red alternatives correspond to vertical, horizontal

41
00:04:05,680 --> 00:04:08,400
and diagonal edges.

42
00:04:08,400 --> 00:04:14,760
And global alignment problem that we want to solve is the following one.

43
00:04:14,760 --> 00:04:21,720
Given strings V and W and a matrix score we want to find an alignment of this string

44
00:04:21,720 --> 00:04:30,840
whose alignment score as defined by the scoring matrix is maximum among all possible alignments

45
00:04:30,840 --> 00:04:33,880
of these strings.

46
00:04:33,880 --> 00:04:40,240
Global alignment is a good model for some biological sequence comparison problems but

47
00:04:40,240 --> 00:04:43,640
bad model for some others.

48
00:04:43,640 --> 00:04:48,280
And I'll give you an example of how we unbox genes to illustrate the challenges of biological

49
00:04:48,280 --> 00:04:50,200
sequence comparison.

50
00:04:50,200 --> 00:04:58,160
Two genes in different species may be similar over short conserved regions and dissimilar

51
00:04:58,160 --> 00:05:00,600
over remaining regions.

52
00:05:00,600 --> 00:05:08,240
For example, homeobog genes have short regions called the homeo domain that is highly conserved

53
00:05:08,240 --> 00:05:12,320
among species varying from human to fly.

54
00:05:12,320 --> 00:05:18,920
But global alignment of homeobog genes would not reveal homeo domain because it would most

55
00:05:18,920 --> 00:05:24,880
likely pass through completely arbitrary regions of the sequences since homeo domains

56
00:05:24,880 --> 00:05:29,000
are short sub-segments of homeobog genes.

57
00:05:29,000 --> 00:05:36,040
How can we find this important biological similarity that however do not extend over

58
00:05:36,040 --> 00:05:43,120
the entire length of sequences and thus in the case of search for these short sequences

59
00:05:43,120 --> 00:05:46,200
the global alignment fails?

60
00:05:46,200 --> 00:05:52,080
At this slide you see two alignments and the question arises which alignment is better.

61
00:05:52,080 --> 00:05:58,640
The alignment on the top actually has a higher score but the alignment at the bottom has

62
00:05:58,640 --> 00:06:06,840
lower score but more biologically relevant because it shows a very strong match of short

63
00:06:06,840 --> 00:06:07,840
sequences.

64
00:06:07,840 --> 00:06:14,200
How can we find this alignment despite the fact that global alignment may miss it?

65
00:06:14,200 --> 00:06:20,800
And search for such short segments within sequences that exhibit similarity is called

66
00:06:20,800 --> 00:06:23,200
the local alignment problem.

67
00:06:23,200 --> 00:06:29,880
So in this case there are two possible alignments in the alignment graphs.

68
00:06:29,880 --> 00:06:37,080
The alignment on the top is biologically correct but the alignment in the middle is actually

69
00:06:37,080 --> 00:06:41,920
a random alignment that however has a higher score from the perspective of global alignment

70
00:06:41,920 --> 00:06:48,120
and therefore hides from us the biologically relevant alignment.

71
00:06:48,120 --> 00:06:54,600
So what I want to do is to somehow find these short sub-strengths of the entire strength

72
00:06:54,600 --> 00:06:56,640
that exhibit high similarity.

73
00:06:56,640 --> 00:06:57,640
How do I do this?

74
00:06:57,640 --> 00:07:04,680
There is a very simple way to search for short similar strengths within longer strengths.

75
00:07:04,680 --> 00:07:11,880
We can simply try all possible pair of strengths from two sequences and each such pair corresponds

76
00:07:11,880 --> 00:07:15,200
to a rectangle in the alignment graph.

77
00:07:15,200 --> 00:07:17,280
Here is one of the rectangles.

78
00:07:17,280 --> 00:07:22,480
But there are so many such rectangles that this approach of course becomes impractical

79
00:07:22,480 --> 00:07:29,520
since search for optimal global alignment within each smaller rectangle requires quadratic

80
00:07:29,520 --> 00:07:35,120
time and therefore overall the running time will become very large.

81
00:07:35,120 --> 00:07:40,960
What can we do to come up with a practical local alignment algorithm?

82
00:07:40,960 --> 00:07:45,320
The first thing we need to do is to formulate the local alignment problem.

83
00:07:45,320 --> 00:07:55,200
The input is strengths v and w and a scoring matrix score and output as is sub-strengths

84
00:07:55,200 --> 00:08:02,120
of the entire strengths v and w whose global alignment as defined by the score is maximum

85
00:08:02,120 --> 00:08:08,760
in one all global alignments of all sub-strengths of v and w.

86
00:08:08,760 --> 00:08:17,000
My proposal for solving this problem let's introduce free taxi rides through the alignment

87
00:08:17,000 --> 00:08:18,000
graph.

88
00:08:18,000 --> 00:08:28,160
Indeed, if we were able to start in the source and travel freely to the start of the concert

89
00:08:28,160 --> 00:08:36,320
fragment and then take another free taxi ride from the end of concert fragment to the destination

90
00:08:36,320 --> 00:08:44,040
final note of the alignment graph, then we will be able to score these interesting segments

91
00:08:44,040 --> 00:08:52,120
by taking zero cost of taxi ride to the beginning of this fragment, then real cost of the alignment

92
00:08:52,120 --> 00:08:57,120
of the fragment and then plus another zero which is the cost of another taxi ride.

93
00:08:57,120 --> 00:09:01,040
You may ask how in the world we can take taxi ride through the alignment graph?

94
00:09:01,680 --> 00:09:07,800
The whole point of introducing this concept of Manhattan kind cities and traveling in

95
00:09:07,800 --> 00:09:15,400
them is that we are free to build whatever Manhattan like grids for solving our biological

96
00:09:15,400 --> 00:09:19,560
problems and in this case what is a free taxi ride?

97
00:09:19,560 --> 00:09:25,840
It's simply adding extra edges of weight zero to our alignment graph and since we are free

98
00:09:25,840 --> 00:09:31,000
to build whatever Manhattan we want, we can of course, we are at liberty of introducing

99
00:09:31,000 --> 00:09:32,320
this taxi ride.

100
00:09:32,320 --> 00:09:35,200
So let's see how our graph change.

101
00:09:35,200 --> 00:09:38,120
What we need to do to implement this free taxi ride?

102
00:09:38,120 --> 00:09:45,320
We need to add edges from the source to any other note and it will be roughly quadratic

103
00:09:45,320 --> 00:09:47,200
number of edges.

104
00:09:47,200 --> 00:09:52,440
We also need to add edges from every note to the same once again quadratic number of

105
00:09:52,440 --> 00:09:57,920
edges so the number of edges in the graph remains quadratic and therefore our algorithm

106
00:09:57,920 --> 00:10:00,360
will be fast.

107
00:10:00,360 --> 00:10:06,440
And in that how our dynamic programming currency change for the local alignment?

108
00:10:06,440 --> 00:10:14,800
Before we had three possibilities corresponding to three ways to enter a note.

109
00:10:14,800 --> 00:10:19,040
By vertical edge, by horizontal edge and by diagonal edge.

110
00:10:19,040 --> 00:10:23,680
Now there is one more possibility we can take a free taxi ride to the note.

111
00:10:23,680 --> 00:10:31,520
So now there are four possibilities for entering every note which means that we need to add

112
00:10:31,520 --> 00:10:39,480
the fourth term in this currency which is the weight of edge from zero zero to ij.

113
00:10:39,480 --> 00:10:44,720
And the weight of this edge since our taxi rides are free is zero and that's the only

114
00:10:44,760 --> 00:10:54,800
change that we need to implement to make our local alignment algorithms practical and fast.

115
00:10:54,800 --> 00:11:01,920
And we now move to the problem of defining adequate insertion and deletion penalties

116
00:11:01,920 --> 00:11:03,440
in sequence alignment.

