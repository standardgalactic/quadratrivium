start	end	text
0	16040	Thank you. This always happens to me at CodeMesh. I have an idea for a talk, and then after
16040	20560	seeing a keynote or having a conversation with someone, I'm like, throw that out. Actually,
20560	23940	Boodle last night tried to convince me to give a talk on StarCraft instead, which I'm
23940	32620	sorely tempted to do, but maybe next year. Yes. But I saw Guy Steele's keynote last night,
32620	38260	which I loved, and I have to say that I love Scheme. I agree with Alan Kay that Lisp is
38260	42960	the most important programming language ever created, and for my money, Scheme is the most
42960	50240	important Lisp. So I think Scheme is one of the great joys of my life. I love programming
50240	55920	and Scheme, and when I went to Indiana University to get my PhD, I went there specifically to
55920	61140	work with Dan Friedman and get my PhD in Scheme. On the first day of grad school, I walked
61140	67820	up to Dan, and I said, I'm so excited to be here at Indiana University so that you could
67820	73640	teach me Scheme, and he says, I don't do Scheme anymore. I do logic programming. It's like
73640	77920	something you could have told me two weeks ago, and I would have gone Northeastern, but
77920	83360	I didn't. Anyway, but Dan should have told me something else instead. He shouldn't have
83360	86900	said, I don't do Scheme anymore. I do logic programming. He should have said something
86900	96240	else, and so this talk is kind of about what Dan really should have told me, and sort of
96240	100760	trying to explain what we've been doing the last 13 plus years. I've been doing it for
100760	105660	the last 13 years. Dan's been doing it longer than that. What is it we're trying to do,
105660	110240	and what is this weird mini-canon language we're working on, and why is it not prologue,
110240	116180	and how does that fit into Guy's keynote, and all these other things? The original talk
116180	121700	was relational interpreters, program census, and Barlaman strange, beautiful, and possibly
121700	127780	useful. Maybe it'll be useful someday, but I don't really care about useful so much,
127780	135540	as you might see. The language we're working on is called mini-canon, and I got to get
135540	141020	my memes in, and my ponies for Boodle, but someone made this up. Fresh is one of the
141020	148180	key operators. There are only three operators in the core language, but here's my second
148180	153860	meme, and this is something I've heard a lot of. Mini-canon is the worst logic programming
153860	161700	language I've ever heard of, but you have heard of it, right? People often say, well,
161740	166980	this is terrible. Prologue has all these extra features, or prologue implementations are
166980	173980	faster, so why use mini-canon? The point is, in my mind, isn't to build a logic language.
174900	179040	That's not what I'm trying to do, at least. I don't care about logic programming. I don't
179040	186040	care about mini-canon. That's not what I'm trying to do. Let me tell you a story, and
186880	192880	I'll do my first live coding. I'm going to show you the first program I ever wrote. I
192880	197000	was nine years old. My father bought this beautiful computer. Anyone know what this
197000	204000	is? No one knows what that computer is, really. TRS-80 Coco, trash 80, color computer. Believe
209400	214600	it or not, but one point in the time, this was the most popular computer in the world,
215000	220400	and Radio Shack actually had summer camps. My first class in programming was taught by
220400	227400	Radio Shack, the summer school in programming, in Logo. The TRS-80 Coco, that came out in
227920	234920	1980, hence the name. Let's see if I can show you the program. We got this new computer,
237440	243400	and normally I used to think that I'd seen war games or whatever, and I knew how to program,
243400	247240	but war games I don't think was out yet, so I must have seen Star Wars, but I thought
247240	251920	I knew how to program, so we get this computer, and it's like, all right, I'm going to show
251920	256480	off to my brother, my little brother, because I'd watched all these movies. Here is exactly
256480	263480	the program that I wrote. Oh, I got to click on it.
274400	281400	As I recall, the exact program I wrote 37 years ago, and that's the exact result I got.
284400	289320	I basically flipped the table, and I said, this is not for me, and I didn't touch the
289320	296320	computer or programming for several years after. In effect, I haven't really changed.
297320	304320	This is really my philosophy of what programming should be like. The fact that I have become
305720	311720	an expert and have a PhD in programming, to me, is offensive. It's not something joyful.
311720	318720	It's like the same thing where writing books with Dan, or writing latex papers, or whatever.
319120	324120	The fact that I've become a master in mangling latex files and post-processing latex files
324120	329120	with Perl scripts is not something I'm proud of. It's something I'm ashamed of.
329120	336120	The fact that I still, to this day, have to program at a much higher level, in a sense,
336120	341120	I can't write that sort of program, really offends me.
341520	348520	Let's see. I think you can sum up my attitude with this epigram in programming.
354320	358320	If you haven't read Alan Perlis' epigrams in programming, you should read those. They're
358320	363320	fantastic. The epigram 93. When someone says, I want a programming language in which I need
363320	368320	only say what I wish done, give him a lollipop.
368520	375520	I understand his philosophy or why he said that, but if someone wants to just type something
379920	386220	in sort of naively, I think we should give him or her a lollipop, but we should also
386220	393220	give them what they ask for. If you think of it that way, what I really want to do is
394020	400020	lollipop-driven development. Rich Hickey has this idea of hammock-driven development,
400020	405020	which is fine, but I prefer lollipop-driven development. I want to just be able to say
405020	408020	what should happen and just have it happen.
408020	410020	I think it's milkshake-driven.
410020	415580	Milkshake-driven development, yes. Going back to Guy's keynote last night, he showed
415580	422580	inference rules, typing judgments, context-free grammars, BNF, all these sorts of things.
423740	430340	When I went to Indiana, really what Dan was trying to do at the time, which took a while
430340	436300	for me to understand, was he wanted a way to write these sorts of rules down, make them
436300	443300	executable, and be able to explore the resulting system. That's really what he was interested
443380	450380	in. Anyway, we want some way to explore this. Going back to Guy's naming of the informal
453260	459860	language use, computer science meta notation, basically we want to have an executable relational
459860	466860	version of computer science meta notation. Just one other source of inspiration for the
468220	474420	Commodore Amiga, which was my third computer, I think. There was a fantastic program for
474420	481420	it called Doug's Math Aquarium. I love this program. You can see, this was on the September
482420	489420	87 issue of Info. You can see on the lower left the image again. You can do Manobrot,
490020	494860	plus you can do wireframe. There are a whole bunch of ways you could visualize mathematics.
494860	498540	The way it would work is like, hey, I want to zoom in on Manobrot's set. The computer
498540	502740	was so slow, and the software was so slow, you would hit return, and you would see it
502740	507540	draw each pixel. Then you would go away, and eight hours later, you would see a little
507540	512020	bit of the Manobrot set. But it was still amazing. It was still incredibly inspiring
512020	519020	to me. What I want is a computer science meta notation aquarium, just like the math aquarium.
521300	526780	Even if it's slow, and even it's awkward to use, just being able to explore and play
526780	532020	around with it to me would be far, far better than just writing interpreters the standard
532020	539020	way. That's really what we're trying to do, I'd say. I'm going to not teach you the
542900	546940	mini-canon language, and I'm not going to teach you how it's implemented. We actually
546940	553940	have lots of resources and talks and things like that about this, about mini-canon, and
555100	560380	how to use it, and how to write mini-canon programs. To really do it right would take
560420	565140	far more time than I have, but I just want to show you maybe a couple of examples of
565140	572140	what the rules look like. This is a type inferencer for the simply typed lambda calculus on the
572660	579660	left, how we would write it with the computer science meta notation. Was that right, CSM?
580020	583820	Computer science meta notation. That's how we might write it on the left. Then on the
583820	590320	right is how you might write it in mini-canon using a macro called matchup, and then on
590360	595960	the right is a little higher level syntax than what we normally use. You can see it's
595960	602960	roughly the same. It's still awkward. It's not the greatest notation, but you can see
603720	610520	it's not 100 times longer or 10 times longer or whatever. Here we have something similar
610520	616720	for commentatory logic. We have another meta notation, and on the right is the mini-canon,
616740	622920	and that's roughly the same length. Here is the program that we're going to play with
622920	628440	today in Explorer. This is an environment passing interpreter for a subset of scheme
628440	635440	or a subset of racket. If you know the rules, this is procedure application, this is abstraction
635800	641040	or lambda, that's variable reference. Here we have lists. There we've got quote. We've
641040	644600	actually added some other forms to various versions of the interpreter. I'll show you
644640	651640	this version first. Then here on the right is the mini-canon code that corresponds to
651640	658640	it. Then we also have to have some extra code for doing things like environment lookup
658840	662440	and some side conditions where in the math when you write it down, you don't have to
662440	668840	worry about it as much. Anyway, the point is we can write something that doesn't really
668840	674040	look like the notation. It would be very nice to have something much closer to the notation,
674080	680280	and it's roughly the same length or maybe twice as long or something like that. We're
680280	687040	going to assume that we've already implemented an environment passing interpreter in mini-canon,
687040	693400	and we've already implemented mini-canon. Mini-canon is a language that is sort of a
693400	698640	combination of logic programming and constraint programming. This is basically a constraint
698640	703240	logic programming language. It's a mixture of constraints and logic programming. I heard
703320	708920	Peter Van Roy question last night to Guy, both logic programming and constraint programming
708920	714800	came up. Basically, you can think of it as a language that's been optimized to write
714800	718760	rules like this, not necessarily in terms of the syntax, like how you write them down,
718760	724240	but more in terms of if you want to explore the resulting rules. The language is optimized
724240	733320	for that, and the implementation is optimized for that. Okay. Now is the most fun part. This
733320	738960	is always the part that scares me, loading a file. We haven't really solved the loading
739040	747040	the file part, but let me make sure I can do this. Oh, okay. Great. Let me see if I can do this one.
757040	768040	Good. All right. Okay. Can people see that? Is that big enough? Okay. Let me make sure we got,
768120	776120	great. Okay. So, show of hands, please. Who here can read Scheme, Racket, Closure, or
776120	784120	some other Lisp? At least a little bit. Emacs Lisp? Absolutely. Okay. So, most people,
784120	790120	maybe not 100%. I think in the interest of time, I'm going to ask the people who aren't
790120	795360	as familiar with parentheses to please try to bear with me and try to think at the high
795440	801280	level what we're trying to do. Okay. Just from the standpoint of time, I can't also teach you all
801280	806720	of Scheme, unfortunately. Although I gave a talk at Papers We Love recently where I actually do
806720	810960	teach enough Scheme to do all the things we do, but I had an hour and a half then. So, if you
810960	816400	look on YouTube, you can find papers we love to talk on called the most beautiful program ever
816400	822080	written where I talk about some of these topics. Okay. So, what I've loaded is an interpreter for
822080	829040	a subset of Scheme. And a language like Scheme, sort of like a language like Python, maybe,
829040	834560	we have something called a vowel. So, a vowel is an evaluator. It can evaluate an expression,
834560	844560	which we quote. So, I could do plus 3, 5. And this expression, a Scheme uses a prefix notation.
844560	851280	We're adding 3 plus 5. That quote means that we're delaying evaluation. We're turning the
851280	859600	plus 3, 5. We're treating that as a list of data instead of as a procedure call. So, you can see
859600	864160	the difference. If I put the quote mark, we get back the list. If I don't put the quote mark,
864160	869120	it evaluates immediately, we get back 8. Okay. So, a vowel sort of cancels out the quote mark,
869120	873120	if you want to think of it that way. We're taking this list and we're going to evaluate it. So,
873120	879040	we're going to look at the parts of the list and do some evaluation procedure. Okay. So, that's a
879040	885920	vowel and Scheme. What we're going to do is use something called a vowel. So, a vowel is the
885920	892400	relational version of the vowel function. So, the vowel function takes one argument, which is
892400	896320	going to be a Scheme expression, as quoted, evaluates that and gives us back the value.
896880	901520	The vowel, however, is going to take two arguments instead of one. It's going to take an expression
901520	906960	as the first argument and it's going to take a value as the second argument. So, let's try using a
906960	930480	vowel. Okay. Great. So, it's working. All right. How about I do something simple like
931040	940960	I think this will work. Oh, yeah. Okay. So, for the people who don't know Scheme,
942720	949760	Lisp stands for list processing. So, the list is a very common data structure we use. So,
949760	956160	list 3, 4 creates a list containing 3 and 4. What I just did with this run expression is I
956160	963360	called a vowel, which is my relational evaluator. And the quoted expression is list 3, 4, just like
963360	969040	I typed directly in the Scheme. So, that's the expression. The first part of the first argument
969040	974960	to a vowel is the expression I want to evaluate. Q is a query variable. You can say I introduce it
974960	981520	right after the run one in parentheses. Q is my query variable. And I'm putting Q in the place
981520	987920	of the value. I'm saying that whatever a list 3, 4 evaluates to, bind that to the variable Q.
987920	991280	Okay. So, Q is a logic variable, query variable, whatever you want to call it,
991920	998400	unification variable. Run one, the one means that I want one answer back. Sometimes we can get
998400	1002480	more than one answer back. Sometimes we can get infinitely many answers back. And in fact, we
1002480	1007440	also might want to prove or show that there are only a finite number of answers, that there are
1007440	1013600	only five answers that exist. Run is our interface operator between Scheme and Minikanron. So,
1013600	1018560	Minikanron is embedded in a host language, most implementations. This implementation,
1018560	1023600	Minikanron is embedded in Scheme. I'm running it in Shea Scheme. All right. So, that's the basic
1023600	1030320	interface. The underlying language that we wrote a vowel in is quite simple. It basically extends
1030400	1037920	Scheme with three operators, core operators. And then we've got a couple extensions for helping
1037920	1043600	write interpreters and type in things like that. Okay. So, that's a vowel. And you can see that
1043600	1049440	we can write things like list 3, 4. Now, what's interesting is that a vowel is written as a
1049440	1057200	relation. And so, Guy talked about this a little bit yesterday. But, you know, the interesting
1057680	1067200	thing about the rules, and in fact, I can show you the rules for interpreter, the interesting
1067200	1076240	thing about these sorts of rules is that they don't really have a direction. So, here is a paper
1077200	1086080	that was an ICFP in Oxford this year. And in this paper, you can see these rules written as
1086080	1089840	inference rules. And the code on the right, which is Minikanron. This is kind of lower-level
1089840	1095440	Minikanron, so it's a little longer. But the important thing is to realize that, you know,
1095440	1103040	there's this bar here, right, that Guy was talking about. And normally, the way we read it is we
1103040	1108880	have some antecedents, a consequence. So, we have some things that have to hold. And if these
1108880	1115360	three things hold, then we can infer the thing on the bottom. And we also sort of read it as,
1115360	1121120	okay, so this turnstile operator, we can read it as like an interpret or evaluate. So, in a
1121120	1125760	certain environment, row, this particular expression, which is a procedure application,
1125760	1131360	evaluates to the value v3. And the rules up top tell you what v3 is. So, if you're writing an
1131360	1137600	interpreter in a standard way, you would read these rules as, okay, I'm going from left to right.
1137600	1142400	Here's my expression. Here's my value. Notice there's an arrow instead of an equal sign. So,
1142400	1148080	that's how you'd often think about it. But there's no reason that we have to go in any sort of
1148080	1153360	direction. We could actually consider this more like an algebra problem, where we have variables
1153360	1158640	that we want to place in the different parts. Maybe the row p. We replace that with some variable x.
1158640	1166240	I don't know what x is. Or the expression or the value. Okay, so if we can put variables in
1166880	1172160	and then have a system that can do a mixture of maybe things like search and constraint solving,
1172160	1177760	then we can try putting variables in to get more flexibility. So, that's exactly what we've done.
1178720	1188080	So, what that means is, if I go back to this valo call, I don't have to just put in an expression
1188640	1194480	that's known in the first position and then put an unknown in the value position. I can do the
1194480	1199600	opposite. So, what I could do is I say, okay, well, I know that the list is supposed to be
1199680	1206880	three, four, right? And grab this list. The extra prens, by the way, and that answer up top have to
1206880	1211600	do with, first of all, the fact that we can get more than one answer back and also that we can get
1211600	1217040	some side conditions to help interpret the answer. Anyway, I'm going to replace that query variable
1217040	1224800	with quote three, four. So, that's the expected value. And I'm going to replace the expression
1225760	1232320	with my query variable Q. So, now what I'm asking is, give me an expression in scheme
1232320	1236560	that evaluates the list three, four. So, what would be one such expression do you think?
1241120	1245600	List three, four. Okay. So, list three, four is one. Quote three, four is another. So, I can ask
1245600	1250720	for, you know, let me ask for two answers. Okay. So, list three, four was the second one I got.
1251600	1257840	And I can ask for three answers. And we can see list three, quote, four. So, it turns out that
1257840	1263920	if you quote three or four, it's the same as just writing three or four. And so, you can see that
1263920	1270480	we have a number of answers, right? And so, some of those answers involve things like lambda and
1270480	1275440	procedure application. So, as I say, hey, as function call can give you three, the list three,
1275440	1286720	four. All right. Now, back to Lollipop land. So, Matt might, who's giving keynote tonight and
1287360	1293200	whose lab I work in and work with for many years. He wrote a blog post for Valentine's Day
1294160	1299600	a couple years ago called 99 ways to say I love you in racket. So, the idea of this was to teach
1300480	1304400	students and beginning racket programmers a little bit of racket and a little bit of how
1304400	1312080	they manipulate lists because racket's a list and list is list processing. So, the idea is to
1312080	1318400	show 99 different expressions and there are various complicated ones and so forth that
1319440	1324640	would evaluate to list I love you. And PD Aldous, who's one of the grad students said, hey,
1325440	1332560	do you think you could use mini-canron to generate such programs? So, let's try doing that. We're
1332560	1338560	going to generate 99 programs that evaluate to I love you. So, can you help me out with the query?
1338560	1350400	What would that look like? Run 99? Sure. Okay. What else is going to change?
1351200	1363440	Sure. Okay. How about I love you? Okay. All right. So, here are 99 programs that evaluate to I love
1363440	1375840	you. So, I don't know. Let me, what's a fun one? How about, let's just start down here.
1376640	1382480	Let me just grab that out and I'm running it in scheme now and you can see that evaluates I love
1382480	1388480	you. So, we've got list quote I, quote love and then the last sub expression is a procedure call
1388480	1392960	to a function which is variadic. It takes any number of arguments. The underscore dot zero
1392960	1397600	represents a symbol representing, that's a symbol representing a variable. The name doesn't matter.
1397600	1401440	That's why I picked underscore dot zero. That's our convention saying it doesn't matter. You could
1401440	1409280	pick foo if you wanted there. And this quote underscore one thing. So, this is a quoted symbol
1409280	1412960	also. If you look at the side conditions, you'll see these things. So, that could be any quoted
1412960	1418800	symbol and this will hold. There might be some other side conditions like the symbol can't be
1418800	1422480	called quote. Under score zero can't be called quote because you don't want to shadow quote,
1422480	1429360	that kind of thing. Okay. So, that's a simple example. And after, after we started playing
1429360	1434000	around with this a little bit, Dan Friedman and I gave a talk at closure conge and we,
1434000	1439440	we showed this relational interpreter or variant of it and Stu Holloway at the end said, well,
1439440	1447040	you know, you should be able to generate quines using this. Anyone know what a quine is? What's a
1447040	1454320	quine? A program that outputs itself. That's right. Okay. In fact, if we go back to history,
1454320	1464400	let's see if we can go back and, you know, I love the fact the guy went through so many papers,
1464400	1468320	old papers. Well, this is a paper I really like by John McCarthy who is the creator of,
1468880	1476000	of Lisp called a micromanual for Lisp, not the whole truth. And then this he gives rules for
1476800	1482080	the Lisp language. So, you can see like what equal means, what cons means and so forth.
1483040	1489280	Notice by the way he uses an equal sign. Right? Not narrow. But then he has this neat little
1489280	1496960	problem. Difficult mathematical type exercise. Final list E such that value of E equals E.
1497840	1502240	So, value is the name of his evaluator function, his eval. So, basically,
1504000	1509120	what he's calling value is what we would call eval or evalo. And so, he's trying to find an
1509120	1514640	expression E such that the value of E is E. So, that is also trying to find a quine. So,
1514640	1520880	he was trying to find a quine or Gittis to find a quine in, I think, 1978. So, let's try to do that.
1522320	1528160	So, given what you know, how would we find a quine? What would, how would we change
1528160	1537760	our query so we could generate a quine? QQ, a value of QQ, that's right. Now, of course,
1537760	1542160	there's nothing special about the name Q. So, why don't we, out of respect for John McCarthy,
1542160	1550000	call it E instead. Valo EE. And let's do a run one. Okay. So, we're trying to find an expression E
1550000	1555520	that evaluates to itself. This is pretty close to what John McCarthy wrote, right? I mean,
1555520	1562720	we're calling it a valo instead of, instead of value. But, you know, this is exactly what you
1562720	1567920	would want to be able to type into a system. So, let's see what Minicandron gives us back.
1569440	1575920	Well, the first thing it says is that underscore zero is a number, which is true. Okay. So,
1575920	1581040	in scheme five is a quine. So, five evaluates to itself. That's true. Okay. So, that's what
1581040	1586480	Minicandron's telling us. Let's ask for a second one. It says hash t. Hash t is true in scheme.
1587040	1591920	All right. So, those are all quines. Hash f is a quine. How about four?
1593920	1597040	Now, it's thinking for a minute. Okay. Now, we've got something a little more interesting.
1598160	1604480	I'm going to grab that expression and type it in. And sure enough, that's a quine. So,
1604480	1610480	that's a self-evaluating expression. In fact, if you look at the quines page, you will see this
1610480	1616640	quine. This is sort of the canonical quine. And we can generate all sorts of quines. We can generate
1616640	1623280	twin quines and triple quines and that kind of thing. But what I love about this, and in some
1623280	1628400	sense, this is probably my favorite Minicandron query using a relational interpreter, but I love
1628400	1632480	it as the query is so simple. This is actually the shortest query you can write in terms of the
1632480	1637200	number of distinct identifiers. This is like the shortest thing you can write. And it generates
1637200	1642880	quines and it actually works. And I personally was shocked that like, oh, yeah, this actually,
1642880	1647600	this actually, you can actually do something with this. You type it in. I figured it would take
1647600	1656240	a million years or something. Okay. So, at that point, a grad student at Utah named Michael
1656240	1663600	Ballantyne said, well, that's kind of fun. But what if you, now you have this interpreter,
1663600	1671280	what if you were to take a scheme program and fill in the scheme program in the first expression,
1671280	1676400	but leave some of the arguments to that program, to that function, you know, make those variables?
1676400	1681920	Could you, could you get interesting behavior? And so he suggested append. So let's try doing that.
1682560	1692800	So append in scheme takes two lists, like ABC and DE, and concatenates the list. So get ABCDE,
1692800	1695200	in this case. So what we're going to do is we're going to write append.
1702960	1710400	And the way I'll write append is using something called let rec. Let's me define a recursive relation
1711360	1720000	or a function.
1720000	1747600	Okay. So that's append. Did I get it right?
1750160	1756880	And now we're going to call append. I'll use the same arguments as before, ABC to DE.
1759600	1765840	Okay. So I just ran it forward. So, so what did I do? I took the scheme definition of append.
1765840	1769440	This is not mini-canon code. This is not logic programming code or constraint logic program
1769440	1775120	code. This is just scheme code. I ran it inside of a valo as the first argument. This is the
1775120	1780800	expression argument. And I said we have an unknown value. So my query variable Q represents
1780800	1790400	the unknown value. So what can we do? Okay. So now what we can do is we can say we know ABCDE
1791200	1798240	is the output. And where else could I put a variable? Where could I put this Q variable?
1798720	1806480	Well, how about I put it in a position of one of the arguments to append? How about I put it
1806480	1811360	right here? I have to put a comma there because this whole thing is back-quoted if you know scheme.
1811920	1816400	All right. So what do you think I'm going to get back in the place of the Q variable?
1820400	1827840	ABC, right? So let's see if that works. Yeah. Quote ABC. Is there a second answer? What if I do a
1827840	1837760	run two? Should there be a second answer or should it say no? No more answers. List ABC. All right.
1837760	1844720	Well, let's see if we get something like that. It's not list ABC, but we get a procedure application.
1844720	1849600	And if I evaluate that in scheme, I get back ABC. So what happens is we get an expression
1849600	1857440	that evaluates to ABC. If I put a quote, I get back ABC itself. Okay. So that's a little subtle
1857440	1864720	if you're not a schemer, but the point is we're making a distinction between expressions and values.
1864720	1869360	So if I put a quote in front of the comma Q, that's going to say, well, I want the value,
1869360	1875280	the list that's going to concatenate to give me ABCDE. If I don't put the quote, that means this
1875280	1881360	could be an arbitrary expression in my subset of scheme that I'm handling. All right. Where else can
1881360	1894320	I put Q? Inside the list, like here. Sure. Yep. In fact, I could have two variables. I could do
1894320	1906720	like x and y. And I can do things like... In fact, I can ask for all the answers. So if you're familiar
1906720	1911680	with logic programming and prologue or mini-canon or something like that, you've seen this before,
1911680	1917920	things like a pen. That's a standard answer or a standard program. But we didn't write a pen in
1919360	1924000	mini-canon or prologue. We wrote a pen in scheme. We'd get the relationality through the relational
1924000	1929440	interpreter. All right. What else can we do? Where else can we put variable? How about
1930160	1936960	if we put a variable inside the code? What if I put a variable where the s is?
1939280	1948560	Okay. That used to be the symbol s. What should I get back? I get back the s, right? So I could
1948560	1956000	also replace it here, like the car of L. Oh, I got two... I was doing a run two.
1956960	1962480	Yeah. So I got car of L and another expression, which is the same as car of L, equivalent to it.
1963200	1969920	All right. Now, I could show you much, much more. If you're interested in that sort of thing,
1969920	1978000	I recommend you look at our paper in ICFP 2017. But I just want to show you what happens if you
1979360	1984160	sort of put an interface on this. And you also speed up the naive version by about
1984160	1989680	nine orders of magnitude, because that's what we've done. Michael Valentine and Greg Rosenblatt
1989680	1996320	have been speeding up the system. So Greg gave us eight orders of magnitude in
1997120	2001600	eight months or something. So now what we're going to do is we're going to do some program
2001600	2007440	synthesis. So this... What's happening underneath the hood is we're just generating calls to our
2007440	2012640	Valo. We're doing example-based program synthesis. So here I have a call to a pen. I've got a
2012640	2017360	fragment of the append definition, the comma A, comma B, comma C. Those are logic variables
2017360	2021280	representing holes in our program. And you can see at the bottom that Barleman's trying to figure out
2022880	2030720	what we have. I can do this in various ways, but one way I might want to do it to try to keep
2031360	2036560	the system from over-specializing is to use these G1, G2 things, which sort of represent
2036560	2040800	universally quantified variables, if you want to think of that way, or sort of like Jenssen's
2041200	2046400	skull invariables. So I don't quite have enough structure. So let me try one more example.
2057600	2059760	Okay. Let that think for a minute.
2065280	2070640	Okay. Now it's figured out the recursion. And it's a little hard to read it. So I'm going to just
2070640	2080480	put in variable names, concrete variable names. And now you can see, you can read a little more.
2080480	2085440	And if you know scheme, this is the correct definition of a pen. Okay. So what's happened?
2085440	2094720	We've taken minicanron. We've implemented the semantics written in something similar to the CMS,
2095680	2102880	computer science meta, or is it CMN? Whatever it's called. The computer science meta notation or
2102880	2113920	whatever. Okay. Something like that. And through some cleverness on the back end, which we're hoping
2113920	2120080	to generalize, so it's not just for our interpreter, but we'll work with a wider range of semantics
2120800	2124320	and type systems and things like that. You would just type in. We can also do this for
2124320	2129600	grammars, regular expressions, and so forth. We're able to get to the point where we can just type
2129600	2136720	in input-output examples, and the system is able to do recursive, higher-order synthesis for our
2136720	2142320	subset of scheme. We can also write type inferences in this way. So I'm hoping we can combine those.
2142320	2146240	We'd write type inferences in the same way. We'd write the operational semantics for the
2147040	2151520	evaluator. And we can also write grammars. There's also a grammar written in exactly the
2151520	2156560	same style underneath this. So we can do grammars. We can generate expressions in exactly the same
2156560	2164720	way. So I'm hoping as we improve this technology that we'll get closer and closer, I don't think we'll
2164720	2170160	ever get there perfectly, but we'll get closer and closer to being able to be naive and just take
2170160	2175680	a paper or some operational semantics or typing judgments or whatever, just type it in, hopefully
2175680	2182400	with a nicer syntax, and then be able to start exploring this world and asking queries that
2183120	2189600	maybe other people haven't thought of before or just being surprised. That's the best part for me.
2189600	2193680	That's why I like Doug's math aquarium. It would surprise you. And that's why I like playing around
2193680	2197760	with mini-canner. There's things like quines that surprise me. There are all sorts of programs that
2197760	2203040	we're generating that surprise me. I didn't think it would be either possible or I had a different
2203040	2207360	idea of which program would meet a certain specification, and mini-canner said, hey, this
2207360	2214800	program meets it also, often sort of trolling me in the process. So anyway, this is lollipop
2214800	2220400	driven development, if you will, where you just type the semantics, sort of like you'd read in the
2220400	2225840	paper, write down examples, maybe write down types and things like that, get the system to fill in
2225840	2235120	the unknowns for you in an exploratory way. So that's basically what Dan should have told me.
2235120	2241760	He should have said, well, eight years from now, Guy Steele will give a keynote at CodeMesh,
2242640	2249200	and at that point, we want to be able to type in those rules and just have it do things like
2249200	2256080	and further program. So that's the idea. If you're interested in this, look at an ICFP 2017
2256080	2262240	paper, go to mini-canron.org, look at the paper on micro-canron, which shows an implementation
2262240	2267040	of a simple version, and look for the second edition of the Reason Schemer, which is about
2267040	2279280	to come out. Thank you. Well, we actually have two minutes left. I think this is the first for
2279280	2299440	you, Will, so we can take a question if you want. So the second test didn't work. Could you just go
2299440	2306000	back and do that again, but fill it in with kind of the readable symbols so we can see why. So you
2306320	2311600	want this one? Yeah. Well, the second one did work in a sense. It depends what you mean by work.
2312160	2319520	So the mini-canron or Barleman's idea is prove me wrong, right? So this program
2319520	2324400	absolutely matches that specification, but you're right that it's not what we had in mind, and this
2324400	2330320	is part of the problem, right? So even if you can imagine Barleman being 500 orders of magnitude
2330320	2336640	faster, and in some sense it solves program census by example, in another sense you still
2336640	2342320	have the problem of writing down a specification that is complete enough and correct enough
2342320	2347120	that you're going to get the right output, even if we're much, much faster, right? So this shows
2347120	2351360	that census really has at least two problems. One is the speed problem of dealing with this
2351360	2355440	exponential space and dealing with, you know, synthesizing programs that could go in infant
2355440	2361040	loops, but there's also the specification problem. So how did you know what to type in the box labeled
2361040	2367120	test three? How do you know what to type in there? Well, so that's a good question. There are
2367120	2371200	different ways to give a specification. So you could write types, right? We don't currently
2371200	2375040	support that, but you could write types, you could write examples, you could write properties,
2375040	2379440	high-level properties, right? The other thing you can do, which I didn't show you, is that this is
2379440	2384400	an IDE, so you can edit the code. So you can be writing some of the code and writing some of the
2384400	2388800	tests and writing some of the types, and it's going to fill in the rest for you. So you could also
2388800	2393520	use it as sort of like an IDE. But at some point, if you don't know what the program should do
2394640	2398400	and you don't know any of the code, it's not going to figure that out for you. So you're going to
2398400	2404800	have to do a little work. You know, even with my example, my stupid box example, I still had to
2404800	2409680	figure out that I wanted a box that was two inches by two inches, right? So yes. Thank you.
2410640	2414800	So basically, this is automated TDD, isn't it?
2415600	2421840	That's part of it, but the reason I gave that intro is the problem is every time I give a talk,
2421840	2425680	and I've given many variants of this talk, every single time I give a talk, someone comes away
2425680	2430000	thinking, oh, well, so your research is on program census, or your research is on test-driven
2430000	2433440	development, or your research is on logic programming, or your research is like, no,
2433440	2439360	no, that's not it. The research is on lollipops, okay? The research is on lollipops and being able
2439360	2444240	to sort of do things like just write down the rules and explore it, okay? That's really what
2444240	2450080	the dream is. Program census falls out of this. Now, if we can do, if we make the system much
2450080	2455040	faster and we can get a useful program census tool, or a useful test-driven development tool,
2455040	2461520	or a useful IDE, great. But that's only a very small part of really the overall goal.
2461520	2463680	Thank you, Will.
