{"text": " Okay, welcome everybody. Very glad you could make it for this talk. I've been working on this for a while. I'm really excited about it. If you don't know me, I am Gabriel, and I'm an instructor here at Fullstack Academy of Code. My social media presence is G. Lebec everywhere, except, unfortunately, and somewhat ironically, given the subject of this talk at Twitter, where I was forced to use an underscore. There's going to be resources available on my GitHub at slash G. Lebec slash Lambda Talk, so you can go find additional stuff after this. All right, so let's just dive in and get started. I want to start by pointing out a minute node ripple here. I can do kind of typical JavaScript-y stuff, but we're going to avoid JavaScript in the sort of classical sense as much as possible, and start off with this function called I or identity. Now, just looking at the function, if I invoke it with some value, what am I going to get back here? Yeah, identity of one is one, identity of two is two. What about the identity of identity? Yeah, it's the identity function. So, very simply, the identity combinator is a function that takes in an input A and it returns an output A. Basically, it just reflects back a value. So, the identity of any X is X, and we saw that in this particular paradigm, we're allowed to use functions as arguments. Verbs are nouns and nouns are verbs, so the identity of identity is itself. In Haskell, this is actually built into the Prelude module, which is the base standard module for the language, as the ID function. As you can see, it takes an argument five and gives you back five. So, looking at this, I just flashed a bunch of stuff on the screen. You might be thinking, what's this lambda stuff that's sitting up here? So, lambda is a signifier. It's a notation that we're going to use to indicate that we're starting the definition of a function. So, we can read this as we're starting to define a function, which takes a single input or parameter, and it returns some expression, some body. And this whole thing is called a lambda abstraction in the lambda calculus, but it basically just means it's a unary anonymous function. Unary meaning it takes a single input. The lambda calculus is a really tiny symbol manipulation framework. A calculus is just a way of moving around symbols on a page. The subject that you may have learned in school called calculus is a specific calculus for things like differentials and integrals and stuff like that, derivatives. And so, this calculus is about something else. This calculus is about evaluating and defining functions. So, in the lambda calculus, we have variables, which are pretty boring. Please come in. We've got expressions, which are the application of some function to its argument. We've got an expression that is itself a function definition, an abstraction instead of a concrete thing like 1 plus 5, 1 plus 6, 1 plus 7. We have something like 1 plus A. And A can be anything. It's become abstracted. And we have groupings to disambiguate the order in which we should be doing certain operations. This is the entire lambda calculus. All right. So, talk's over. I can go home now. No, we're going to see some examples of this. So, let's start with just a couple of cross comparisons here. Variables in the lambda calculus, as I mentioned, are extremely boring. One thing to note here is that these variables are immutable. They cannot be changed after the fact. There's no concept of assignment, per se, in the lambda calculus. There is binding, which we'll see shortly. But if this variable is bound to a value, that's its value for now and forevermore. So, no, let all const. Applications are slightly more interesting. This is applying a function to its arguments. And in the lambda calculus, that's just juxtaposition. It's just a space. There's no parens for invocation, which at first, if you're used to something like JavaScript, it's a little disconcerting. But in reality, it ends up removing a lot of noise from our expressions. And as this talk goes on, you're probably going to see it's becoming easier and easier to read the lambda calculus rather than trying to parse the JavaScript. So, here we apply a function f to its argument a. We can apply multiple arguments, but in the lambda calculus, all functions are unary. So, this is really a curried function. This is an f that takes an a, and that returns a new function, which is not written down, which takes a b. Let's try this out. Let's do kind of a classic example of a curried addition function. We'll say that add takes an a, and it takes a b, and it returns a plus b. So, if we call add with just some single argument, we get back some function. If we call that function with an additional argument, now we get the final result. Pretty familiar stuff, I think, for this crowd. So, f a b, you can read that as first it takes an a, and then a b, and if there are more arguments, they get fed in one by one, going from the leftmost argument onwards, marching kind of toward the right. We can make this clear with parentheses. We can say, first apply f to a, and then apply the result of that to b, but this isn't necessary because we say that function application is left associative. So, these are really useless parentheses, and we'll omit them in most of our examples. Finally, we can use parentheses to force evaluations to occur in a different order. So, here this is actually a different expression. This means something else in the lambda calculus. It means we're going to first apply a to b, and the result of that will be the argument to f. Hi, hello. Welcome. So, just to summarize for everybody who's just arrived, we're starting to define the syntax of a very small language called the lambda calculus. And this is just something that takes functions, applications of functions to arguments, and parentheses for grouping. That's really it. So, really high level review of just this last slide. F a means invoke f with a, and you'll get more as we go. So, let's talk about function definition in the lambda calculus. As I said before, we use a lambda to indicate that we're defining a new function. So, we got lambda calculus on the left, JavaScript on the right. This is a function that takes an a and returns whatever b is. Sort of throws away a, a b becomes irrelevant in this expression. The function abstraction like this is greedy. The body swallows up as much stuff to the right as it can, and that's all included in the body of this lambda abstraction. So, up into the point where it would stop making sense, like if you're using parens to force things to be evaluated differently. So, this indicates a function that takes an a, and it invokes b with x as its argument. We can disambiguate this with parentheses, but as I said, since lambda abstractions greedily swallow up everything to the right, these are actually useless parentheses, and we'll not really show them in most of the upcoming examples. On the other hand, if we use parentheses to force the thing on the left to be a function with a body that's just the b variable, now this is a different expression. Now we're saying take a function that goes from a to b and apply it to the argument x. As we saw a second ago in a demonstration in the lambda calculus we're allowed to nest functions. So, this is a function that takes an a and returns a new function that new function takes a b and that function returns an a. So, just to reprise our curried addition function from a second ago, we have this function that takes an a, returns a function that takes a b, and that returns a plus b. So, we have to feed out the arguments not like this all at once, but rather each argument one at a time in a successive invocations, and we get the result we want, known as currying. Again, we can clarify this using parentheses. The lambda on the left returns the inner lambda, and then we can use that. But since these are useless parentheses, we'll omit them in most of the examples. How are we doing so far? Questions about the bare syntax of the lambda calculus? As you can see, it's very similar to JavaScript, except you don't have parentheses around function invocation. You just put things next to each other, and that indicates apply a function on the left to the argument on the right. Cool. All right. So, I swear this is going to be the most complicated bit of lambda calculus syntax we have to deal with. It's called beta reduction. It's got a scary name, but it really just means tracing the logic, evaluating the function invocations, seeing what we end up with. So beta reduction is just the act of taking a function and applying it to its argument. So here we've got this function in red applied to the argument underlined. What we do is we take the argument, and it comes in as the parameter of the function. This is a function that takes an A and returns an A. So this argument, the BCB function, is going to replace in the body of the function every A. We go look in the body, find all the As, and we substitute in this other expression. And that gives us this first simplification. Well, we continue doing this. We've got a new function, the BCB function, being applied to another argument, the X argument. So we're going to take the X argument and substitute it in as the parameter to the function. So we go look inside the function body, find all the B's, and replace them all with X's. And we get this new function as a result. Once again, we've got a function that we're going to apply to an argument. We take the argument, we pass it into the function's parameter. We go look in the body for all the C's. There are no C's in this body. We replace all the C's with that argument, and that gives us this simplification. At this point, we've got nothing left to do. There are no more reducible expressions. So we say this is in beta normal form, which is just a hilarious way of saying we've fully evaluated the function in a terminal way. So it looks a little dense compared to what you're used to with JavaScript, but it's really nothing that we haven't done many times in JavaScript. Taking a function, passing in arguments as the parameters, and then in the body, everywhere that parameter exists, it's been replaced by a value. There's some caveats here. I'm not going to cover in this presentation. If you could do multiple reductions in different places in the expression simultaneously, there are caveats and strategies to which ones you should do first. And there's also possible ways that two separate functions that coincidentally share the same variable names, you want to avoid conflating those two variables, which mean different things. So there are some gotchas, but they're kind of outside the scope of this talk. Let's see another combinator here, the mockingbird. This is a fun function. It takes a function as input, and it invokes that function passing in itself. This is the self-application combinator. Whoa, what's happening here? This is craziness. Let's try it out. The mockingbird is a function that takes a function, calls the function on itself. What might the mockingbird of identity be? Somebody walked me through the logic here. What's f in this function? It's the identity. What are we doing with it? Identity of identity. We already solved that before, right? What is the answer? It's the identity. The self-application of identity is identity. We saw that earlier. This one's going to be a little bit more disconcerting. What is the self-application of self-application? Feel free to yell it out if you think you got it. It may be hinted at by the fact that I'm putting this in a try-catch block. Any takers? Call stack size exceeded. What just happened? Well, mockingbird of identity is identity of identity, self-application. We already know that that is identity, so that made sense. That does reduce to a better normal form. But the mockingbird of the mockingbird is the self-application of self-application. So we take self-application and we apply it to itself. But if we're going to evaluate that, that's the self-application of self-application. So we take the self-application and uh-oh, it just goes on forever. This is a problem. The problem is we don't always know if some lambda term is going to have a beta normal form. We don't know if this process ends or not. Sometimes it doesn't end. Sometimes it diverges, which means it goes on forever. And in fact, there's no way to know in a general way if a given expression, there's no single algorithm that can tell you whether or not one of these expressions will stop. That's known as the halting problem and Alan Turing figured it out. Now for an individual one, you can prove through ad hoc means that, yeah, for instance, this one is going to go on forever. So it's not that it's always unanswerable, just that there's no one set of steps that you can take that will cause that, that you will know whether or not it halts. This particular divergent term, by the way, is called the omega combinator. Omega because it's like the end, alpha and the omega. And sometimes the mockingbird as a result is called little omega. One of the problems you'll find if you start going out and reading about all this stuff is that a lot of different mathematicians and programmers and people have worked on it over time and they've all given their own pet names to these things. So there's a lot of synonyms and sometimes even intersection. Okay, we're almost done with lambda calculus syntax, but I lied before and I said it was the end. There's one more thing I want to show you about syntax here. We can do, as I said before, these nested lambdas. We could say there's a function that takes an A and that returns a function that takes a B, which returns a function that takes a C, which finally returns a B. But the way we're using these functions, we just kind of think of, well, we're going to call it with both arguments at once in quotes, really meaning we feed it the first argument then the second argument. But we think of it as taking two arguments just in a curried way. So in order to kind of make it easier to write this stuff down and parse it, there's a little bit of a shorthand where we just condense all the nested lambdas and say, here's a ternary function. Here's a function that takes three inputs and returns something. But don't get fooled. These don't come in all simultaneously. We feed them into the function one after the other. So this still means nested lambda expressions. It's just a convenient shorthand for indicating that they're curried. I'm not going to go through all of the logic of this again. It's the exact same example we saw before of feeding an argument into its parameter and replacing the parameter in the body, feeding an argument into its parameter and replacing the parameter in the body. But this time I've used the syntax shorthand to show those nested lambdas. So the body of this one is another lambda and then we proceed as normal and the rest of this is exactly identical to what we saw before. So just a shorthand. Don't get too tripped up over it, but it's going to be convenient for us to be able to think conceptually of functions that take multiple arguments even though we know, we'll just keep that as a footnote, that they're all curried functions. Are you ready for the next combinator? Let's talk about the kestrel. The kestrel takes an A and a B and it returns A. Let's try that out. Takes an A, takes a B, returns A. What is the kestrel of the identity in the mockingbird? Yeah. What about the kestrel of the kestrel in the mockingbird? Right. It doesn't matter what the second thing is, it's irrelevant. The kestrel just takes two things and returns the first one. So we just saw that here. In Haskell, this is built into the base language as the const function. Why is it called const in Haskell? Let's try something interesting here. I'm going to say k5 is the function you get when you call k with only one of its arguments. So normally the kestrel takes two arguments and gives you back the first one, but I'm only going to give it one of its arguments. Well, that's interesting, but these are curried functions, so I can give it another argument. It gives me back the first thing. I can also give it back some other argument. It gives me back the first thing. This is a function that's fixated on a particular value. It's the constant five function. No matter how I invoke this function, it always gives me back five. That's why it's called const in Haskell. But it's the k-combinator. Here's a fun one. I really like this one. The kestrel of identity and some x is? Identity. Identity, makes sense. This is an algebraic equality. The thing on the left is the thing on the right and vice versa. Well, the thing on the right is a function. And I know in the lambda calculus I'm allowed to apply functions to values. So I apply this to y. What do I get? Yy. Y, that makes sense. On the left side equals the middle side equals the right side. That means I can ignore the thing in the middle, and the thing on the left equals the thing on the right. Does anybody see where I'm going with this? I've got ki of x and y returns y. Ki of a first argument and a second argument returns the second argument. I just derived the kite. The kite combinator takes two arguments. One and two. And it gives you back the second one. Now, I could have done this manually. I could have said the kite is a function that takes an a, and it takes a b, and it returns b. And then I would call the kite on something like four and nine, and it gives me back nine. But it's cool to see that from these atomic combinators combined together, I get these new molecules, which are other combinators. So some of my combinators can mix and match and start producing other functions that are useful and interesting in different ways. So ki of m and ki is? Yes. So kite of the mockingbird in the Kestrel's castle. Flip them around. You get the other one. So far, so good. At this point, probably some of you are wondering, what's with all the bird names? Got mockingbird, Kestrel, kite, et cetera. All right. So we're going to take a little mental break for a moment and talk about history. Moses Eliachchenfinkel. And I can't pronounce German, so please forgive me. Name these things, long German names. Like Zussim et Setsum function. Haskell B. Curry, who came a little bit later, used some of the same letters, but also some of his own letters, just to add to the confusion. And in the 1980s, a logician and puzzle author named Raymond Smullyan wrote this absolutely wonderful book to mock a mockingbird. The whole back two thirds of which is about combinatorial logic. And Smullyan took Curry's combinator names and turned them into birds. And the reason is because the book doesn't lay a lot of emphasis on the math from a formal perspective. Instead, it uses this metaphor of birds in a forest who hear the songs of other birds and sing back the names of other birds. So birds creating birds and singing birds and all this kind of stuff. Now, unfortunately, Smullyan called the identity combinator the idiot bird. I wish that he had used the ibis. I used the ibis in my first slide, but we'll forgive him because the rest of the book is just so wonderful. Now, he didn't do this totally for no reason. He actually did it to honor Curry because Curry was himself an avid bird watcher. And at this point, some of you are thinking, Haskell Curry, who's this guy? Why do we care about him? I'm not Sean Finkel or vice versa. So the next slide is the anti-diversity slide. This is just the historical nature of mathematics in the 20s and 30s. It was filled with a lot of white men. So we'll acknowledge that and move on. But I'm going to give you a really fast crash course in the formalization of mathematical logic. Around the late 19th century, early 20th century, people were realizing that math, which had seemed on the face of it so cut and dried and straightforward, was hiding some really nasty paradoxes. And so people were trying to unify mathematics and figure out the sufficient axioms that would define all of mathematics in one big tone. So what was like the real, true system of math? Bless you. So I'm going to race through this. I could do an entire presentation. That would be two hours on just this. I'm going to try and keep it to less than five minutes. In 89, Giuseppe Piano invents his own formal notation for function abstraction. He also defines arithmetic as the sequence of natural numbers starting from zero, and then the successor of zero, and then the successor of successor of zero, and the successor of successor of successor of zero, and so on and so forth. These are Piano numbers. The logician Gottlob Frege develops his own function notation, which uses this really unique graph format. It's actually really cool to say. Impossible to read. But a good idea, a good idea which has better versions that come later. And most famously, he basically invents quantified axiomatic logic. So this is the kind of sentence like, for all x in the reals, there exists a y in the reals such that y is greater than x. For all, and there exists. That's the quantification and quantified axiomatic logic. By the way, Frege, even in 1891, was using curried functions. In the 1910s, Bertrand Russell, along with Whitehead, very famously published Principia Mathematica, an attempt at formalizing all math, but he also discovered earlier than that, actually, Russell's paradox, the thing of all sets that do not contain themselves. Well, is that set in itself or not? It's a paradox. It's impossible to figure out. So that made a lot of people really disconcerted, and they realized that math wasn't quite so perfect in its foundations as first thought. Schoen Finkl, we talked about, he was an early pioneer in combinatorial logic. He also used currying and published one paper, and then it was really sad, actually. The rest of his life really spiraled downhill. He ended up in a mental asylum, which don't worry, it's not because of combinatorial logic, I don't think. Van Neumann, famous mathematician, also later in life, helped build the first real electric computers. He also kind of did something that, if you reinterpret it, it's combinatorial logic, but that was almost by accident, like that wasn't his goal in life. And then in 26, Haskell Curry starts reinventing combinatorial logic. He wasn't aware of Schoen Finkl or Frege, well, he was aware of Frege, but not any kind of link to combinatorics. And so he does a whole bunch of contributions. He's a really smart guy at Princeton, and in 1927, he discovers that Schoen Finkl beat him to the punch. So he forges on nonetheless, which is good for us, because he develops many, many new theorems. In 1931, Cort Godot, very famous mathematician, who kind of plunged a dagger into the very heart of math, discovers that this race in search for the perfect set of foundations for math is fundamentally flawed. It's a fool's errand, it's impossible, it's literally impossible, because every complicated enough system to be interesting by a certain definition of interesting, such as piano numbers, is either inconsistent or incomplete. That means there's either logical inconsistencies which make it make no sense, or there are systems and things inside that language which you can talk about, but you can't prove or disprove. There's no way to get to the proof or disprove. That totally upends math as we know it. In the 30s, Alonzo Church is trying to figure out a system that's at least good enough to compute things that are computable in some definition of computable, and he develops this thing that we've been talking about the whole time, lambda calculus, this notation system for writing down functions. Now, it's this tiny, tiny language, and at first, his grad students such as Stephen Klaney and Rosser, they think that it's not going to really lead too much, like it's just a notation system, but then they start to realize like it's ballooning outwards, and it's from this very tiny bit of logic is coming all sorts of interesting results. They also prove different versions of it are consistent or inconsistent. Stephen Klaney, by the way, goes on later in life to invent this thing that we use all the time called regular expressions, so that's fun. In 1936, Alonzo Church solves a famous unsolved problem, David Hilbert's decision problem. This is an algorithm problem that says like, well, actually, I can't remember the specifics, but it's, let me see. Oh, is there a way to figure out if any given problem does have a solution, very closely related to, but distinct from the halting problem? And Church is like, no, there isn't. But he uses the lambda calculus to solve it, which was hilarious because it started out as three or four lines of notation, and it turned into a system complicated enough to solve this famous unsolved problem. Guess what also happens in 1936? Two months later, Alon Turing solves the problem using something called a Turing machine, and he publishes his own paper, and then he finds out that Church beat him to the punch by two months, and he gets really annoyed by that. He was actually quite disappointed to find out that someone else had raced him and beat him to solving the decision problem. But he looks at the paper, he looks at Church's lambda calculus and says, you know what? These are actually identical. My Turing machines and Church's lambda calculus are the exact same thing just expressed different ways. So then he decides, you know what, I'll bury the hatchet, come to Princeton, get a PhD under Church with Church as his advisor. And in 1937, he publishes the first fixed point combinator. Okay, that's the history. In the tiniest nutshell I could manage, or at least bear to part with. So, combinator. You keep using that word. I don't think it means what you think it means. What is a combinator? We've said this thing many times, combinator logic and combinator's lambda calculus. Where's the dividing line? In reality, they're almost entirely the same thing. A combinator is a function with no free variables. A free variable is a variable in a function body that's not bound to some parameter. So this is a combinator because the B in the body is bound to the B parameter. Whereas that's not a combinator because A comes from nowhere. What is A? Who knows? We could make it up. It doesn't matter. It doesn't matter that we're not using the B. The B is irrelevant. It's a parameter. Not a combinator because where does the B come from? Don't know. And even more complicated stuff like this. Don't get distracted by the E. That's a parameter. It's not a variable. So everything that appears in the body, C and B, those are bound to parameters. That's a combinator. You now know what a combinator is. We've seen a bunch of combinators. Identity, self-application, first or const, second. And the cool thing is, as I mentioned before, using some of the primitive combinators mixed together, we start generating some of the more complicated combinators, or at least other combinators, which is surprising but cool. Are you ready for the next one? Let's look at the cardinal. Let's just look at it for a second. Not the beautiful photo, which I stole from somewhere. I can't remember where. But the combinator itself, anybody looking at this, can you think conceptually what this actually does in sort of a use case way? I'm really pushing you here because we're talking about abstract math, but we're just keeping you in a land with no JavaScript. Exactly. It just flips around arguments. It takes a function f that takes two parameters, and then it calls the function f with both of those parameters, but in the opposite order. So here's the C combinator, and what if we apply this to a function in two arguments, which is the kestrel and these other two things that we don't care what they are, but they're i and m in this case. The cardinal of the kestrel and the idiot and the mockingbird. Well, walking through it, it takes three things, the function and two arguments, and it calls the function. Which is the function here? k. And it calls them with two arguments. Which are the arguments? And it calls them in the opposite order. So it's k of m and i, which is? Yeah. So we start with the kestrel, and then we put two things into it, but backwards. That's interesting because look at what we have here. The cardinal of the kestrel takes two things and returns the second. Does that sound familiar? It's the kite. The cardinal of the kestrel is the kestrel of identity. The kite is this other thing. They're all the same. And we can just do this to prove it. Let's do the cardinal takes a function. This monitor went away. There we go. It takes a function, takes an argument, another argument, calls the argument with the arguments backwards. Let's get the cardinal of the kestrel. Apply it to two variables. The kestrel normally gives you back the first thing, but the cardinal of the kestrel gives you the second thing. It works. This isn't pure math. It's also applicable. So that's kind of fun. Cardinal, if you've got a cardinal, you can apply it in different ways. You can flip the kite around to get the kestrel or the kestrel to get the kite. And in fact, in Haskell, this is built into the base language, and it's called flip. And it actually ends up being useful from time to time. So why? Why are we learning this? What's actually going on here? How is this useful? Do we care? Remember, lambda cacos and Turing machines are equivalent. Anything one can calculate, the other can calculate. But Turing machines are exciting because they're these hypothetical devices that use state information that exists over here, here, here, and things that change over time to do computations. And from these hypothetical devices, people said, wait a second, we could build real machines that do this. And they use memory and state, and they do a little bit more complicated stuff just to make it more performant and easier to work with. But at their heart, they're really Turing machines. So they work with machine code, which means let's flip a whole bunch of physical switches and then see what electricity and bits come out the other end. And we abstract that away in a language, a text format called assembly language, that says things like, move the data in register B to the accumulator register. Add one to whatever value is in the accumulator register of my memory. Very stateful, very machine-based, very hard for humans to reason about. It's not conceptual. It's all about machines. Well, we build higher-level languages like C that compile into assembly. But those higher-level languages are still machine-centric. They still say things like, hey, see, go allocate seven bits of memory over here and give me back a reference to the pointer of that memory address and so on and so forth. So then somebody says, well, this is stupid. We'll make the programming languages do that for us, and we'll just focus more on concepts. Like, hey, give me a var x, and I don't care how you figure out the memory for that, just go do it yourself. And then somebody says, why are we even bothering with memory? Why don't we just have these pure functions that operate on each other? And wait a second. This whole time this machine march through abstraction has been leading us to something that existed before Turing machines existed, which is the lambda calculus. Functional programming languages are based on, slash their backbone is, the lambda calculus. So if we decide, wait, we're not going to organically evolve towards this kind of conceptual abstraction, but let's just start straight from the lambda calculus and go the other direction. We can start designing purely functional languages and using all the decades of mathematical research that have gone into LC to design our language and see what comes out of that and see if there's anything useful that we could do there. And then we'll take that pure functional language, just compile it down to machine code so it runs on our physical Turing machines. Lambda calculus and Turing machines are equivalent. Therefore, here's the big theme of the entire talk coming in the next slide. Everything can be functions. When I say everything, I mean everything. Like Booleans. Whoa. Here's a JavaScript Boolean expression. Not X is equal to, that's the double equals, not the assignment equals. Y or the result of the expression A and Z. How are we going to do this in lambda calculus? Well, it's a problem because we don't have negation. We don't have ors and and operators. I mean, we don't even have a quality checks in the lambda calculus, right? That wasn't in the language. We don't have Booleans. We do have parentheses. That's what we got. We got parens. All right, so how on earth are we going to do this? Let's start with the primitive building blocks, the Booleans. A bool. What is that used for in JavaScript? Well, what about selection? Some result is check a Boolean condition. If it's true, we'll get the first expression. If it's false, we'll get the second expression. Let's start translating this over to lambda calculus. Well, we got this ternary except, oops, this question mark and colon. That's not in the lambda calculus syntax. It's got to go. Bye-bye. What are we left with? This is a function application, right? So bool must be. What's the theme of the talk? A function. And, oh, well, what do we need here? We need a function that if it's the quote unquote true function, it selects the first expression. And if it's the false function, it selects the second expression. Wait a second. This sounds really familiar to me. Where have we seen a pair of functions that select either the first or second things? Yeah. We already have Booleans. We didn't even have to reinvent them. They're already in the language that we've developed so far in this talk. We'll just encode, in other words, represent Booleans as functions. We'll say that the kestrel function, the constant function, the first function is true, quote unquote, and the kite is false. That's kind of neat. Let's do that while we're looking at this slide and admiring it. True is equal to the kestrel. And false is equal to the kite. Now, there's a little node trick that I'll use here, because if I go console log out true, it tells me it's the kestrel, which is true, but in both senses. But it's also slightly annoying, like if I'm going to start doing Booleans. So I'm going to do a little trick here. I'm going to say t.inspect is a function that returns the string true slash kestrel. And false.inspect is a function that returns false or the kite. Now, if I log out t, I get t slash k. And if I log out false, I get false slash kite. So that'll be useful going forward in some of these demos. That wasn't lambda calculus. The other stuff was, but not the dot.inspect. OK, so we have true and false. But true and false on their own are kind of boring, right? Yeah, so we can select between two things. What about Boolean logic? What about vacation? Let's translate it. Well, what doesn't belong? One of these things is not like the others. The negation, the exclamation mark isn't in the lambda calculus syntax. What does it got to be instead? What's the theme of the talk? A function. The not function. The not function will take in a Boolean and it will select between two other Booleans. If we give it not true, it selects false. If we give it false, it selects true. How can we implement the not function? Well, wait a second. We just talked about selecting between two things. What kind of thing selects between two possibilities? We have a function. Yes, a function. That's true. But specifically, these Booleans that we're using, the kite and the kestrel, themselves functions that choose between two possibilities. Look at what I have here, this expression. An unknown Boolean p. It might be the kite. It might be the kestrel. I don't know which one. If it's the kestrel or true, which one of those does it select? The first one, false. And if my unknown Boolean is the kite, which does it select? The second one, true. My unknown Boolean selects its own opposite in this expression. So we'll turn this into a function and we'll call it not. That's it. Not just takes a Boolean and then tells the Boolean select your opposite. I promise it works. So not takes, let's say it takes a Boolean and then it calls the Boolean passing in false and true. So if we say not true, that's false. And not false is true. I've not put a single JavaScript Boolean into any of this. I'm doing negation. This is like, this should be exciting. All right. So our church encodings, which is what these things are called for Booleans now includes negation. We saw how we got true and false. But there's a more exciting way of doing this. There's an even better way, in my opinion. A cooler way. Not true is false and not false is true. But we said true and false, we're encoding those as the kestrel and the kite. But if the kestrel and the kite, there's no named functions in lambda calculus. This is just us writing down a shorthand so that we don't have to remember and read out all the lambdas. But if we did replace them with their equivalent lambda expressions, that's what we're really looking at. Now, we're saying the Not function will take at the top there a lambda that takes two arguments and gives you back the first, and it gives you back a lambda that takes two arguments and gives you back the second. OK? And at the bottom, we're saying it takes, you know, two arguments and gives you back the second, and the Not function will give you back a lambda that takes two arguments and gives you back the first. Interesting. So does anyone see, instead of not, is there a function that we've already seen that will result in this? A function that accepts a binary function, a function that takes two arguments, and it moves the arguments around? It's the cardinal. Yeah, the only other one we've seen. The cardinal already does this behavior. The cardinal is boolean not. The flip of true is false, and the flip of false is true. This monitor is really going to bug me. There we go. Stay there. Don't move. Let's try it. Cardinal of true. Now, unfortunately, look what I'm about to get here. This isn't quite what I want, just this function. Well, that's weird. What if I use this function? I'll apply it to two things, one and two. I get back the second thing, which is what I want. The flip of true is false, so I should get the second thing. And the flip of false is true, so I should get back the first thing, which I do. The problem is, the problem is, and it's not really a problem, the problem is that the cardinal generates a new function, unlike my previous implementation of not, which selects between existing false and true functions, the cardinal generates a new function that behaves identically to the kestrel or kite. This kind of identity crisis is known as intentional equality versus extensional equality. Extensional equality, which is the kind of equality I'll use throughout this talk, means the functions are the same. If for every input, they generate the same output. So the cardinal of the kestrel is extensionally equal to the kite. They both behave identically. There's no way to tell them apart from the outside, quote unquote. Intentional equality is more like, well, where did it come from and what's inside it? What are its guts? I'm not going to focus on that during this talk, but it works. That's the important thing. Let's design and together, Boolean and, Boolean conjunction. We know it's a function, right? That's the theme of the talk. How many arguments does it take? What are these arguments? What kind of thing are they? They're Booleans, so they're the kestrel of the kite or kite and kestrel or kestrel or kestrel or kite and kite, just to finish it out. Well, to take in a parameter, you're probably going to use that parameter somewhere in the body of your function, right? So even if we're not quite sure where to go with this, let's try just using one of these Booleans. P is a Boolean, so what does it do? What do these Boolean functions do when I use them? Yeah, they select between two possibilities, such as the Spanish question mark. What if our first argument to and is false? Which of the two possibilities will P select? The second one. But wait a second. If one of the arguments to and is false, what should that result of this entire function be? Yeah, so I'll just put false there. If P is false, short circuit, don't bother looking at Q. There's no point where you can know we just select the second thing, and it's already going to be false. So we don't even bother checking Q. Well, what if P is true? It's going to select the first thing, right? But what is that first thing? What should it be? Based on Q? Yeah, it's got to be Q. Because if P is true, the and is true only when Q is true, and the and is false if Q is false. So once P is true, we have to go look at Q and use Q as our result. There's one more small simplification we can actually make to this that's kind of nice. I like it in any rate, which is we said that, by the way, P is a Boolean, so it selects between two possibilities. If P is false, it should select false. But I've hard-coded in a false. There was a way I could do this even more directly or indirectly, it depends on your perspective. If P is false and it should select false, P can just select itself. If P is false, then return P, which is false. So I end up with this thing, which is very much a combinator, PQ, PQP. That is my and function. I forget where we're at in our demonstrations of JavaScript. Do we have not? We do have not. What about and? No, we don't. OK, let's do that. And takes a Boolean and another Boolean, and it applies P to Q to P. PQ, PQP. That makes sense. So and of false and true is false. And of true and true is true. And false is false. And false and false is false. All the things we love and expect from the and function. That's neat. Let's do or. What is or? Hey, someone's got the theme down. I cheated ahead. I jumped ahead and gave you two of the arguments. Oh, no. What are we going to do? P is a Boolean, it selects between two things. All right, here's where it differs from and. What if P is true? Oops, I jumped ahead too much. P is true. It selects the first thing, which has got to be true. If P is true, we don't have to bother looking at Q, because in or, if one of them is true, then we just result in true. If P is false, what's the second argument got to be? Q. It's just the opposite of the thing before. So we can also simplify our kind of glossed over that, but it doesn't have to be a hard-coded true. It can just be P, because we reuse it. If P is true, just return P. That fact is actually really fun, because there's another little thing we can do here that's a trick. Somebody tell me, if I apply this PQ double PQ function to X and Y as arguments, what is the resulting better reduction? In other words, what is the evaluation of this function? What do I get as a result? Remember, X replaces every P in the body, and Y replaces every Q in the body. Yep, X, X, Y. But there's another function we've already seen that does this. I'll give you a hint. What if we ignore the Ys for a second? Yeah, it's the mockingverd. It's the self-applicationverd. The self-application of X is double X. It's the self-application of X. But if the thing on the left is equal to the thing on the right, they're both functions I could apply them to some Y. And now we see, wait a second, the thing on the top and the thing on the bottom are actually the same. The mockingverd works just like this other function. It looks almost exactly like that, except the other function is this additional Q on the end, which is useless. It takes a Q and applies a Q. This is known as the mockingverd once removed. So that's what the star means. It's been given an extra argument. The mockingverd once removed is extensionally equal to the mockingverd. It behaves identically to it. So have we defined or? No, we haven't. Let's do that really quickly. Or it takes a P and a Q. And it does P of P and Q. We can demonstrate that or TF is true, or F is false, or FT is true, and of course, or TT is true. But we can also use the mockingverd for that, because we just proved that the mockingverd outflurrates the same way here. So mockingverd of true and false is true. False and false is false. False and true is an or statement as well. And that's also an or statement. Wow. Mockingverd, you're multi-talented. Anybody have an idea what this might be? Well, it's definitely a function that takes two arguments. And I'm going to tell you P and Q are Booleans, just to make it slightly easier. But if P and Q are Booleans, what does P do? It selects between two possibilities. And if Q is a Boolean, what does it do? It selects between two possibilities. Does this make it easier to see what this function does? Sorry? You were sure. Well, if P and Q are the same Boolean, they select true. If they're the same that way, they also select true. But if they're different, they select false. Which function is this? Sorry? Oh, is Zor something like that? Not quite. Maybe. I'd have to think about it. It might be Zor. Yeah, I'd have to think about it. Yeah. That's true. That's cool. Yeah, nice work. I didn't think about that. There's a simpler thing that we use this with. If P and Q are the same, we get true. If they're different, we get false. That's called equality. This test, if P and Q are the same Boolean, well, there's a nice little simplification we can make here. Q is a Boolean true or false. If it's true, it selects true. If it's false, it selects false. That's redundant. We could just use Q as it is. It's already true or false. And at the bottom, if Q is true, it selects false. And if it's false, it selects true. We already have a function that does that. It's called the not function. So we can simplify this to P, Q, not Q. And that is our Boolean equality function. I'll do that as long as it sets P to Q to P, Q, not Q. So Boolean equality takes a P and a Q. And it does P of Q and not Q. Try it out. Boolean equality of true and true is, of course, true. True and false, nope. False and false, yes. False and true, nope. Nice. It's always fun to see it actually work. Like, you kind of believe it, and then you see it, and you're like, oh, I guess it really is true. All right, we got church encodings from Booleons. I'm not going to do this one out. But if you are familiar with Boolean logic, you have heard of De Morgan's laws. De Morgan's laws are a pair of laws. This is only one of them. But it says that not P and Q is equal to not P or not Q. And we've just expressed that using nothing but functions. No Booleans, no ands, no ors. I could prove that. We'll just take our shorthand and replace it with the actual lambda calculus. So there's our Boolean equality of not and PQ or not P or not Q. All right, it's pretty cool. Now, I rehearsed this talk last night. My fiance made me. She said, this talk is way longer than an hour. I was like, ah, we'll see how long it is. She said, no, no, no, you're going to rehearse. And I rehearsed, and it's way longer than an hour. But this is a really good stopping point. So what I'm going to do is I'm going to give you the conclusion of this talk, which works perfectly after this slide. It fits. It makes sense. And anyone who would like to is welcome to stay another 30-ish minutes. I'm going to go into another room, because Mark has to come in here and get this room ready for demo day. And I'll show them numbers in the lambda calculus. But before we do that, I'm going to conclude this talk. So let me skip way down to the bottom of my deck here. If I can find my mouse, there it is. Nope, further. Nope, more than that. Keep going. Try to remember where this slide starts. Almost there. So a small preview. This isn't even the only table in this talk. These are just the combinators, let alone the Boolean equality, the arithmetic, the numerals, and the arithmetic operations that yield Booleans. So lots of stuff that I am cutting out in the interest of time. But yeah, I know. Here's where I want to conclude, and I want to give you a couple little small addendums. The first is I emphasized early on that from primitive combinators come other combinators. And this is a really cool sort of atom to molecule sort of situation. And it begs the question, how many combinators do we need and which ones to generate all the other ones? Is it even possible to do that? Do we need an infinite number of them? 20, 10, 5? Just two. Not even identity. Identity isn't on the board. These are the only two you need. You can make identity out of this, the Starling and the Kestrel. The Starling is a weird one. I actually don't really like the SK Combinator Calculus, which is what it is called. I really like the BCKIM Combinator Calculus. If I just added m to this, this would actually suffice five of them. And that was the one that Curry used. I find this far easier to use than the SK Combinator Calculus. For instance, the identity in the SK Combinator Calculus is S of KK. It's also SKS. Those are extensionally equal. You didn't get a chance to see the Vario, but the Vario is the world's smallest data structure. That's right. I'm putting data structures in lambda calculus. Here it is in the SK Combinator Calculus. And this is not even close to how complicated it can get. So really, why? What is what? What? All right. To begin with, in my opinion, I was searching for the answer to this why question. I was trying to think, am I trying to evangelize like learning abstract math or this and that? Then I realized, you know what? The honest answer for myself is, it's just fun. I enjoy this. I hope that you might enjoy it too. That's the entire basis of the book to Maka Making Bird. It's a book of logic puzzles and games. It was written to act as a series of fun challenges. It's a great mental workout. Thinking along these patterns, let's you think about, oh my gosh, I have to think of where nouns are verbs and verbs are nouns. And I've got to be able to think about partially applied functions, curried functions, higher order functions. There's a lot of spaghetti. So it's really laying down the neurological groundwork for understanding functional programming in general. The lambda calculus, as I said before, being the basis of languages like Miranda and Lisp and Haskell, means that those languages, if you know this kind of combinatorial logic, it sets you up for success in those kinds of languages. Because even though you're not required to think entirely that way, there's a large portion of those languages that assumes you are comfortable with that. And from that, we get all sorts of real world practical benefits. So I started writing them down. A lot of them are intersections with just functional programming in general. But many of these come directly from the lambda calculus. Closures, higher order functions, laziness, infinite data structures, garbage collection, function graph reduction, type theory, provable programming code, parallel processing for free, parametric polymorphism. I mean, it just keeps going on and on and on. And this all derives straight out of purely mathematical fields that existed even before computers did. But at the end of the day, I really just think that there's a lot of elegant mathematical beauty to it. And it's kind of art for art's sake. I hope that this has inspired you to become interested in this topic and maybe to go read some more about it. Find a little bit of slides. Here are all the combinators. Here are all the booleans. The numerals, church arithmetic, boolean ops in the church arithmetic, data structures. All of this is in the deck. It's not an hour-long talk, is it? And you've probably all been wondering, wait a second. Where's the most famous combinator of all, the Y combinator? Well, there's the Y combinator. What does it do? I'll just leave you with this as a brain teaser. The lambda calculus has neither loops nor recursion. So how does it do either of those things? Because it can calculate anything calculable. This is the answer. The Y combinator allows for recursion in a language that doesn't have recursion built into it. Unfortunately, I cannot demonstrate this in JavaScript because it goes on forever. This is a fixed point combinator. It infinitely just keeps evaluating itself, which works in a lazy language like Haskell or the lambda calculus itself. So unfortunately, because JavaScript is like the thing on the right and not like the thing on the left, we need a slight variation on the Y combinator called the Z combinator, which is the exact same as the Y combinator except the middle of it has a funk, which defers calculation until required. So the Z combinator I could demo if I wanted to, but I haven't set that up in my code so I won't today. All right, that is the talk. Thank you very much. Any questions?", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.0, "text": " Okay, welcome everybody.", "tokens": [50364, 1033, 11, 2928, 2201, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 1, "seek": 0, "start": 5.0, "end": 7.0, "text": " Very glad you could make it for this talk.", "tokens": [50614, 4372, 5404, 291, 727, 652, 309, 337, 341, 751, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 2, "seek": 0, "start": 7.0, "end": 9.0, "text": " I've been working on this for a while.", "tokens": [50714, 286, 600, 668, 1364, 322, 341, 337, 257, 1339, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 3, "seek": 0, "start": 9.0, "end": 10.0, "text": " I'm really excited about it.", "tokens": [50814, 286, 478, 534, 2919, 466, 309, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 4, "seek": 0, "start": 10.0, "end": 14.0, "text": " If you don't know me, I am Gabriel,", "tokens": [50864, 759, 291, 500, 380, 458, 385, 11, 286, 669, 20985, 11, 51064], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 5, "seek": 0, "start": 14.0, "end": 17.0, "text": " and I'm an instructor here at Fullstack Academy of Code.", "tokens": [51064, 293, 286, 478, 364, 18499, 510, 412, 13841, 372, 501, 11735, 295, 15549, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 6, "seek": 0, "start": 17.0, "end": 20.0, "text": " My social media presence is G. Lebec everywhere,", "tokens": [51214, 1222, 2093, 3021, 6814, 307, 460, 13, 1456, 8123, 5315, 11, 51364], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 7, "seek": 0, "start": 20.0, "end": 23.0, "text": " except, unfortunately, and somewhat ironically,", "tokens": [51364, 3993, 11, 7015, 11, 293, 8344, 41082, 11, 51514], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 8, "seek": 0, "start": 23.0, "end": 25.0, "text": " given the subject of this talk at Twitter,", "tokens": [51514, 2212, 264, 3983, 295, 341, 751, 412, 5794, 11, 51614], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 9, "seek": 0, "start": 25.0, "end": 27.0, "text": " where I was forced to use an underscore.", "tokens": [51614, 689, 286, 390, 7579, 281, 764, 364, 37556, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16882215697189856, "compression_ratio": 1.5092250922509225, "no_speech_prob": 0.235935777425766}, {"id": 10, "seek": 2700, "start": 27.0, "end": 30.0, "text": " There's going to be resources available on my GitHub", "tokens": [50364, 821, 311, 516, 281, 312, 3593, 2435, 322, 452, 23331, 50514], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 11, "seek": 2700, "start": 30.0, "end": 32.0, "text": " at slash G. Lebec slash Lambda Talk,", "tokens": [50514, 412, 17330, 460, 13, 1456, 8123, 17330, 45691, 8780, 11, 50614], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 12, "seek": 2700, "start": 32.0, "end": 35.0, "text": " so you can go find additional stuff after this.", "tokens": [50614, 370, 291, 393, 352, 915, 4497, 1507, 934, 341, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 13, "seek": 2700, "start": 35.0, "end": 38.0, "text": " All right, so let's just dive in and get started.", "tokens": [50764, 1057, 558, 11, 370, 718, 311, 445, 9192, 294, 293, 483, 1409, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 14, "seek": 2700, "start": 38.0, "end": 41.0, "text": " I want to start by pointing out a minute node ripple here.", "tokens": [50914, 286, 528, 281, 722, 538, 12166, 484, 257, 3456, 9984, 40688, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 15, "seek": 2700, "start": 41.0, "end": 44.0, "text": " I can do kind of typical JavaScript-y stuff,", "tokens": [51064, 286, 393, 360, 733, 295, 7476, 15778, 12, 88, 1507, 11, 51214], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 16, "seek": 2700, "start": 44.0, "end": 47.0, "text": " but we're going to avoid JavaScript in the sort of classical sense", "tokens": [51214, 457, 321, 434, 516, 281, 5042, 15778, 294, 264, 1333, 295, 13735, 2020, 51364], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 17, "seek": 2700, "start": 47.0, "end": 50.0, "text": " as much as possible, and start off with this function", "tokens": [51364, 382, 709, 382, 1944, 11, 293, 722, 766, 365, 341, 2445, 51514], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 18, "seek": 2700, "start": 50.0, "end": 53.0, "text": " called I or identity.", "tokens": [51514, 1219, 286, 420, 6575, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 19, "seek": 2700, "start": 53.0, "end": 55.0, "text": " Now, just looking at the function,", "tokens": [51664, 823, 11, 445, 1237, 412, 264, 2445, 11, 51764], "temperature": 0.0, "avg_logprob": -0.14897703746008495, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.011865825392305851}, {"id": 20, "seek": 5500, "start": 55.0, "end": 57.0, "text": " if I invoke it with some value,", "tokens": [50364, 498, 286, 41117, 309, 365, 512, 2158, 11, 50464], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 21, "seek": 5500, "start": 57.0, "end": 59.0, "text": " what am I going to get back here?", "tokens": [50464, 437, 669, 286, 516, 281, 483, 646, 510, 30, 50564], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 22, "seek": 5500, "start": 59.0, "end": 64.0, "text": " Yeah, identity of one is one, identity of two is two.", "tokens": [50564, 865, 11, 6575, 295, 472, 307, 472, 11, 6575, 295, 732, 307, 732, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 23, "seek": 5500, "start": 64.0, "end": 68.0, "text": " What about the identity of identity?", "tokens": [50814, 708, 466, 264, 6575, 295, 6575, 30, 51014], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 24, "seek": 5500, "start": 68.0, "end": 71.0, "text": " Yeah, it's the identity function.", "tokens": [51014, 865, 11, 309, 311, 264, 6575, 2445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 25, "seek": 5500, "start": 71.0, "end": 74.0, "text": " So, very simply, the identity combinator", "tokens": [51164, 407, 11, 588, 2935, 11, 264, 6575, 2512, 31927, 51314], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 26, "seek": 5500, "start": 74.0, "end": 79.0, "text": " is a function that takes in an input A", "tokens": [51314, 307, 257, 2445, 300, 2516, 294, 364, 4846, 316, 51564], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 27, "seek": 5500, "start": 79.0, "end": 81.0, "text": " and it returns an output A.", "tokens": [51564, 293, 309, 11247, 364, 5598, 316, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 28, "seek": 5500, "start": 81.0, "end": 84.0, "text": " Basically, it just reflects back a value.", "tokens": [51664, 8537, 11, 309, 445, 18926, 646, 257, 2158, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09726144790649414, "compression_ratio": 1.691542288557214, "no_speech_prob": 0.0012842302676290274}, {"id": 29, "seek": 8400, "start": 84.0, "end": 86.0, "text": " So, the identity of any X is X,", "tokens": [50364, 407, 11, 264, 6575, 295, 604, 1783, 307, 1783, 11, 50464], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 30, "seek": 8400, "start": 86.0, "end": 88.0, "text": " and we saw that in this particular paradigm,", "tokens": [50464, 293, 321, 1866, 300, 294, 341, 1729, 24709, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 31, "seek": 8400, "start": 88.0, "end": 91.0, "text": " we're allowed to use functions as arguments.", "tokens": [50564, 321, 434, 4350, 281, 764, 6828, 382, 12869, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 32, "seek": 8400, "start": 91.0, "end": 93.0, "text": " Verbs are nouns and nouns are verbs,", "tokens": [50714, 4281, 929, 366, 48184, 293, 48184, 366, 30051, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 33, "seek": 8400, "start": 93.0, "end": 97.0, "text": " so the identity of identity is itself.", "tokens": [50814, 370, 264, 6575, 295, 6575, 307, 2564, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 34, "seek": 8400, "start": 97.0, "end": 100.0, "text": " In Haskell, this is actually built into the Prelude module,", "tokens": [51014, 682, 8646, 43723, 11, 341, 307, 767, 3094, 666, 264, 6001, 32334, 10088, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 35, "seek": 8400, "start": 100.0, "end": 103.0, "text": " which is the base standard module for the language,", "tokens": [51164, 597, 307, 264, 3096, 3832, 10088, 337, 264, 2856, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 36, "seek": 8400, "start": 103.0, "end": 105.0, "text": " as the ID function.", "tokens": [51314, 382, 264, 7348, 2445, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 37, "seek": 8400, "start": 105.0, "end": 107.0, "text": " As you can see, it takes an argument five", "tokens": [51414, 1018, 291, 393, 536, 11, 309, 2516, 364, 6770, 1732, 51514], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 38, "seek": 8400, "start": 107.0, "end": 109.0, "text": " and gives you back five.", "tokens": [51514, 293, 2709, 291, 646, 1732, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 39, "seek": 8400, "start": 109.0, "end": 112.0, "text": " So, looking at this, I just flashed a bunch of stuff on the screen.", "tokens": [51614, 407, 11, 1237, 412, 341, 11, 286, 445, 7319, 292, 257, 3840, 295, 1507, 322, 264, 2568, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09023971268624971, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.0002377989876549691}, {"id": 40, "seek": 11200, "start": 112.0, "end": 114.0, "text": " You might be thinking, what's this lambda stuff", "tokens": [50364, 509, 1062, 312, 1953, 11, 437, 311, 341, 13607, 1507, 50464], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 41, "seek": 11200, "start": 114.0, "end": 116.0, "text": " that's sitting up here?", "tokens": [50464, 300, 311, 3798, 493, 510, 30, 50564], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 42, "seek": 11200, "start": 116.0, "end": 118.0, "text": " So, lambda is a signifier.", "tokens": [50564, 407, 11, 13607, 307, 257, 1465, 9902, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 43, "seek": 11200, "start": 118.0, "end": 120.0, "text": " It's a notation that we're going to use", "tokens": [50664, 467, 311, 257, 24657, 300, 321, 434, 516, 281, 764, 50764], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 44, "seek": 11200, "start": 120.0, "end": 123.0, "text": " to indicate that we're starting the definition of a function.", "tokens": [50764, 281, 13330, 300, 321, 434, 2891, 264, 7123, 295, 257, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 45, "seek": 11200, "start": 123.0, "end": 127.0, "text": " So, we can read this as we're starting to define a function,", "tokens": [50914, 407, 11, 321, 393, 1401, 341, 382, 321, 434, 2891, 281, 6964, 257, 2445, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 46, "seek": 11200, "start": 127.0, "end": 130.0, "text": " which takes a single input or parameter,", "tokens": [51114, 597, 2516, 257, 2167, 4846, 420, 13075, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 47, "seek": 11200, "start": 130.0, "end": 133.0, "text": " and it returns some expression, some body.", "tokens": [51264, 293, 309, 11247, 512, 6114, 11, 512, 1772, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 48, "seek": 11200, "start": 133.0, "end": 136.0, "text": " And this whole thing is called a lambda abstraction", "tokens": [51414, 400, 341, 1379, 551, 307, 1219, 257, 13607, 37765, 51564], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 49, "seek": 11200, "start": 136.0, "end": 137.0, "text": " in the lambda calculus,", "tokens": [51564, 294, 264, 13607, 33400, 11, 51614], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 50, "seek": 11200, "start": 137.0, "end": 141.0, "text": " but it basically just means it's a unary anonymous function.", "tokens": [51614, 457, 309, 1936, 445, 1355, 309, 311, 257, 517, 822, 24932, 2445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07319218983021818, "compression_ratio": 1.7591240875912408, "no_speech_prob": 0.004068998619914055}, {"id": 51, "seek": 14100, "start": 141.0, "end": 144.0, "text": " Unary meaning it takes a single input.", "tokens": [50364, 1156, 822, 3620, 309, 2516, 257, 2167, 4846, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 52, "seek": 14100, "start": 144.0, "end": 149.0, "text": " The lambda calculus is a really tiny symbol manipulation framework.", "tokens": [50514, 440, 13607, 33400, 307, 257, 534, 5870, 5986, 26475, 8388, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 53, "seek": 14100, "start": 149.0, "end": 153.0, "text": " A calculus is just a way of moving around symbols on a page.", "tokens": [50764, 316, 33400, 307, 445, 257, 636, 295, 2684, 926, 16944, 322, 257, 3028, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 54, "seek": 14100, "start": 153.0, "end": 157.0, "text": " The subject that you may have learned in school called calculus", "tokens": [50964, 440, 3983, 300, 291, 815, 362, 3264, 294, 1395, 1219, 33400, 51164], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 55, "seek": 14100, "start": 157.0, "end": 160.0, "text": " is a specific calculus for things like differentials", "tokens": [51164, 307, 257, 2685, 33400, 337, 721, 411, 819, 12356, 51314], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 56, "seek": 14100, "start": 160.0, "end": 164.0, "text": " and integrals and stuff like that, derivatives.", "tokens": [51314, 293, 3572, 1124, 293, 1507, 411, 300, 11, 33733, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 57, "seek": 14100, "start": 164.0, "end": 167.0, "text": " And so, this calculus is about something else.", "tokens": [51514, 400, 370, 11, 341, 33400, 307, 466, 746, 1646, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05828046798706055, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00020340333867352456}, {"id": 58, "seek": 16700, "start": 167.0, "end": 172.0, "text": " This calculus is about evaluating and defining functions.", "tokens": [50364, 639, 33400, 307, 466, 27479, 293, 17827, 6828, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 59, "seek": 16700, "start": 172.0, "end": 175.0, "text": " So, in the lambda calculus, we have variables,", "tokens": [50614, 407, 11, 294, 264, 13607, 33400, 11, 321, 362, 9102, 11, 50764], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 60, "seek": 16700, "start": 175.0, "end": 177.0, "text": " which are pretty boring.", "tokens": [50764, 597, 366, 1238, 9989, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 61, "seek": 16700, "start": 177.0, "end": 178.0, "text": " Please come in.", "tokens": [50864, 2555, 808, 294, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 62, "seek": 16700, "start": 178.0, "end": 180.0, "text": " We've got expressions,", "tokens": [50914, 492, 600, 658, 15277, 11, 51014], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 63, "seek": 16700, "start": 180.0, "end": 185.0, "text": " which are the application of some function to its argument.", "tokens": [51014, 597, 366, 264, 3861, 295, 512, 2445, 281, 1080, 6770, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 64, "seek": 16700, "start": 185.0, "end": 189.0, "text": " We've got an expression that is itself a function definition,", "tokens": [51264, 492, 600, 658, 364, 6114, 300, 307, 2564, 257, 2445, 7123, 11, 51464], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 65, "seek": 16700, "start": 189.0, "end": 193.0, "text": " an abstraction instead of a concrete thing like 1 plus 5,", "tokens": [51464, 364, 37765, 2602, 295, 257, 9859, 551, 411, 502, 1804, 1025, 11, 51664], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 66, "seek": 16700, "start": 193.0, "end": 195.0, "text": " 1 plus 6, 1 plus 7.", "tokens": [51664, 502, 1804, 1386, 11, 502, 1804, 1614, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08815161714848783, "compression_ratio": 1.688073394495413, "no_speech_prob": 0.001098612672649324}, {"id": 67, "seek": 19500, "start": 195.0, "end": 198.0, "text": " We have something like 1 plus A.", "tokens": [50364, 492, 362, 746, 411, 502, 1804, 316, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 68, "seek": 19500, "start": 198.0, "end": 200.0, "text": " And A can be anything.", "tokens": [50514, 400, 316, 393, 312, 1340, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 69, "seek": 19500, "start": 200.0, "end": 202.0, "text": " It's become abstracted.", "tokens": [50614, 467, 311, 1813, 12649, 292, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 70, "seek": 19500, "start": 202.0, "end": 205.0, "text": " And we have groupings to disambiguate the order", "tokens": [50714, 400, 321, 362, 1594, 1109, 281, 717, 2173, 328, 10107, 264, 1668, 50864], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 71, "seek": 19500, "start": 205.0, "end": 208.0, "text": " in which we should be doing certain operations.", "tokens": [50864, 294, 597, 321, 820, 312, 884, 1629, 7705, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 72, "seek": 19500, "start": 208.0, "end": 210.0, "text": " This is the entire lambda calculus.", "tokens": [51014, 639, 307, 264, 2302, 13607, 33400, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 73, "seek": 19500, "start": 210.0, "end": 211.0, "text": " All right.", "tokens": [51114, 1057, 558, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 74, "seek": 19500, "start": 211.0, "end": 212.0, "text": " So, talk's over.", "tokens": [51164, 407, 11, 751, 311, 670, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 75, "seek": 19500, "start": 212.0, "end": 213.0, "text": " I can go home now.", "tokens": [51214, 286, 393, 352, 1280, 586, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 76, "seek": 19500, "start": 213.0, "end": 215.0, "text": " No, we're going to see some examples of this.", "tokens": [51264, 883, 11, 321, 434, 516, 281, 536, 512, 5110, 295, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 77, "seek": 19500, "start": 215.0, "end": 219.0, "text": " So, let's start with just a couple of cross comparisons here.", "tokens": [51364, 407, 11, 718, 311, 722, 365, 445, 257, 1916, 295, 3278, 33157, 510, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 78, "seek": 19500, "start": 219.0, "end": 223.0, "text": " Variables in the lambda calculus, as I mentioned, are extremely boring.", "tokens": [51564, 32511, 2965, 294, 264, 13607, 33400, 11, 382, 286, 2835, 11, 366, 4664, 9989, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08457684150108924, "compression_ratio": 1.5927272727272728, "no_speech_prob": 0.0007321395096369088}, {"id": 79, "seek": 22300, "start": 223.0, "end": 227.0, "text": " One thing to note here is that these variables are immutable.", "tokens": [50364, 1485, 551, 281, 3637, 510, 307, 300, 613, 9102, 366, 3397, 32148, 13, 50564], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 80, "seek": 22300, "start": 227.0, "end": 229.0, "text": " They cannot be changed after the fact.", "tokens": [50564, 814, 2644, 312, 3105, 934, 264, 1186, 13, 50664], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 81, "seek": 22300, "start": 229.0, "end": 233.0, "text": " There's no concept of assignment, per se, in the lambda calculus.", "tokens": [50664, 821, 311, 572, 3410, 295, 15187, 11, 680, 369, 11, 294, 264, 13607, 33400, 13, 50864], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 82, "seek": 22300, "start": 233.0, "end": 235.0, "text": " There is binding, which we'll see shortly.", "tokens": [50864, 821, 307, 17359, 11, 597, 321, 603, 536, 13392, 13, 50964], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 83, "seek": 22300, "start": 235.0, "end": 238.0, "text": " But if this variable is bound to a value,", "tokens": [50964, 583, 498, 341, 7006, 307, 5472, 281, 257, 2158, 11, 51114], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 84, "seek": 22300, "start": 238.0, "end": 242.0, "text": " that's its value for now and forevermore.", "tokens": [51114, 300, 311, 1080, 2158, 337, 586, 293, 5680, 3138, 13, 51314], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 85, "seek": 22300, "start": 242.0, "end": 245.0, "text": " So, no, let all const.", "tokens": [51314, 407, 11, 572, 11, 718, 439, 1817, 13, 51464], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 86, "seek": 22300, "start": 245.0, "end": 247.0, "text": " Applications are slightly more interesting.", "tokens": [51464, 26519, 763, 366, 4748, 544, 1880, 13, 51564], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 87, "seek": 22300, "start": 247.0, "end": 249.0, "text": " This is applying a function to its arguments.", "tokens": [51564, 639, 307, 9275, 257, 2445, 281, 1080, 12869, 13, 51664], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 88, "seek": 22300, "start": 249.0, "end": 252.0, "text": " And in the lambda calculus, that's just juxtaposition.", "tokens": [51664, 400, 294, 264, 13607, 33400, 11, 300, 311, 445, 3649, 734, 569, 5830, 13, 51814], "temperature": 0.0, "avg_logprob": -0.066602661496117, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.001597676775418222}, {"id": 89, "seek": 25200, "start": 252.0, "end": 254.0, "text": " It's just a space.", "tokens": [50364, 467, 311, 445, 257, 1901, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 90, "seek": 25200, "start": 254.0, "end": 256.0, "text": " There's no parens for invocation,", "tokens": [50464, 821, 311, 572, 7448, 3695, 337, 1048, 27943, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 91, "seek": 25200, "start": 256.0, "end": 259.0, "text": " which at first, if you're used to something like JavaScript,", "tokens": [50564, 597, 412, 700, 11, 498, 291, 434, 1143, 281, 746, 411, 15778, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 92, "seek": 25200, "start": 259.0, "end": 261.0, "text": " it's a little disconcerting.", "tokens": [50714, 309, 311, 257, 707, 717, 1671, 1776, 783, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 93, "seek": 25200, "start": 261.0, "end": 265.0, "text": " But in reality, it ends up removing a lot of noise from our expressions.", "tokens": [50814, 583, 294, 4103, 11, 309, 5314, 493, 12720, 257, 688, 295, 5658, 490, 527, 15277, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 94, "seek": 25200, "start": 265.0, "end": 266.0, "text": " And as this talk goes on,", "tokens": [51014, 400, 382, 341, 751, 1709, 322, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 95, "seek": 25200, "start": 266.0, "end": 270.0, "text": " you're probably going to see it's becoming easier and easier to read the lambda calculus", "tokens": [51064, 291, 434, 1391, 516, 281, 536, 309, 311, 5617, 3571, 293, 3571, 281, 1401, 264, 13607, 33400, 51264], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 96, "seek": 25200, "start": 270.0, "end": 273.0, "text": " rather than trying to parse the JavaScript.", "tokens": [51264, 2831, 813, 1382, 281, 48377, 264, 15778, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 97, "seek": 25200, "start": 273.0, "end": 276.0, "text": " So, here we apply a function f to its argument a.", "tokens": [51414, 407, 11, 510, 321, 3079, 257, 2445, 283, 281, 1080, 6770, 257, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 98, "seek": 25200, "start": 276.0, "end": 278.0, "text": " We can apply multiple arguments,", "tokens": [51564, 492, 393, 3079, 3866, 12869, 11, 51664], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 99, "seek": 25200, "start": 278.0, "end": 281.0, "text": " but in the lambda calculus, all functions are unary.", "tokens": [51664, 457, 294, 264, 13607, 33400, 11, 439, 6828, 366, 517, 822, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07717316491263253, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0006461515440605581}, {"id": 100, "seek": 28100, "start": 281.0, "end": 283.0, "text": " So, this is really a curried function.", "tokens": [50364, 407, 11, 341, 307, 534, 257, 1262, 2428, 2445, 13, 50464], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 101, "seek": 28100, "start": 283.0, "end": 285.0, "text": " This is an f that takes an a,", "tokens": [50464, 639, 307, 364, 283, 300, 2516, 364, 257, 11, 50564], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 102, "seek": 28100, "start": 285.0, "end": 287.0, "text": " and that returns a new function,", "tokens": [50564, 293, 300, 11247, 257, 777, 2445, 11, 50664], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 103, "seek": 28100, "start": 287.0, "end": 290.0, "text": " which is not written down, which takes a b.", "tokens": [50664, 597, 307, 406, 3720, 760, 11, 597, 2516, 257, 272, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 104, "seek": 28100, "start": 290.0, "end": 292.0, "text": " Let's try this out.", "tokens": [50814, 961, 311, 853, 341, 484, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 105, "seek": 28100, "start": 292.0, "end": 296.0, "text": " Let's do kind of a classic example of a curried addition function.", "tokens": [50914, 961, 311, 360, 733, 295, 257, 7230, 1365, 295, 257, 1262, 2428, 4500, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 106, "seek": 28100, "start": 296.0, "end": 298.0, "text": " We'll say that add takes an a,", "tokens": [51114, 492, 603, 584, 300, 909, 2516, 364, 257, 11, 51214], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 107, "seek": 28100, "start": 298.0, "end": 303.0, "text": " and it takes a b, and it returns a plus b.", "tokens": [51214, 293, 309, 2516, 257, 272, 11, 293, 309, 11247, 257, 1804, 272, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 108, "seek": 28100, "start": 303.0, "end": 308.0, "text": " So, if we call add with just some single argument,", "tokens": [51464, 407, 11, 498, 321, 818, 909, 365, 445, 512, 2167, 6770, 11, 51714], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 109, "seek": 28100, "start": 308.0, "end": 310.0, "text": " we get back some function.", "tokens": [51714, 321, 483, 646, 512, 2445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05714853604634603, "compression_ratio": 1.8028169014084507, "no_speech_prob": 0.0009109618258662522}, {"id": 110, "seek": 31000, "start": 310.0, "end": 313.0, "text": " If we call that function with an additional argument,", "tokens": [50364, 759, 321, 818, 300, 2445, 365, 364, 4497, 6770, 11, 50514], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 111, "seek": 31000, "start": 313.0, "end": 316.0, "text": " now we get the final result.", "tokens": [50514, 586, 321, 483, 264, 2572, 1874, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 112, "seek": 31000, "start": 316.0, "end": 319.0, "text": " Pretty familiar stuff, I think, for this crowd.", "tokens": [50664, 10693, 4963, 1507, 11, 286, 519, 11, 337, 341, 6919, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 113, "seek": 31000, "start": 319.0, "end": 323.0, "text": " So, f a b, you can read that as first it takes an a,", "tokens": [50814, 407, 11, 283, 257, 272, 11, 291, 393, 1401, 300, 382, 700, 309, 2516, 364, 257, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 114, "seek": 31000, "start": 323.0, "end": 325.0, "text": " and then a b, and if there are more arguments,", "tokens": [51014, 293, 550, 257, 272, 11, 293, 498, 456, 366, 544, 12869, 11, 51114], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 115, "seek": 31000, "start": 325.0, "end": 327.0, "text": " they get fed in one by one,", "tokens": [51114, 436, 483, 4636, 294, 472, 538, 472, 11, 51214], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 116, "seek": 31000, "start": 327.0, "end": 331.0, "text": " going from the leftmost argument onwards,", "tokens": [51214, 516, 490, 264, 1411, 1761, 6770, 34230, 11, 51414], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 117, "seek": 31000, "start": 331.0, "end": 333.0, "text": " marching kind of toward the right.", "tokens": [51414, 30523, 733, 295, 7361, 264, 558, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 118, "seek": 31000, "start": 333.0, "end": 336.0, "text": " We can make this clear with parentheses.", "tokens": [51514, 492, 393, 652, 341, 1850, 365, 34153, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 119, "seek": 31000, "start": 336.0, "end": 339.0, "text": " We can say, first apply f to a,", "tokens": [51664, 492, 393, 584, 11, 700, 3079, 283, 281, 257, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10130937099456787, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0001535525661893189}, {"id": 120, "seek": 33900, "start": 339.0, "end": 341.0, "text": " and then apply the result of that to b,", "tokens": [50364, 293, 550, 3079, 264, 1874, 295, 300, 281, 272, 11, 50464], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 121, "seek": 33900, "start": 341.0, "end": 343.0, "text": " but this isn't necessary because we say", "tokens": [50464, 457, 341, 1943, 380, 4818, 570, 321, 584, 50564], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 122, "seek": 33900, "start": 343.0, "end": 345.0, "text": " that function application is left associative.", "tokens": [50564, 300, 2445, 3861, 307, 1411, 4180, 1166, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 123, "seek": 33900, "start": 345.0, "end": 347.0, "text": " So, these are really useless parentheses,", "tokens": [50664, 407, 11, 613, 366, 534, 14115, 34153, 11, 50764], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 124, "seek": 33900, "start": 347.0, "end": 351.0, "text": " and we'll omit them in most of our examples.", "tokens": [50764, 293, 321, 603, 3406, 270, 552, 294, 881, 295, 527, 5110, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 125, "seek": 33900, "start": 351.0, "end": 354.0, "text": " Finally, we can use parentheses to force evaluations", "tokens": [50964, 6288, 11, 321, 393, 764, 34153, 281, 3464, 43085, 51114], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 126, "seek": 33900, "start": 354.0, "end": 356.0, "text": " to occur in a different order.", "tokens": [51114, 281, 5160, 294, 257, 819, 1668, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 127, "seek": 33900, "start": 356.0, "end": 358.0, "text": " So, here this is actually a different expression.", "tokens": [51214, 407, 11, 510, 341, 307, 767, 257, 819, 6114, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 128, "seek": 33900, "start": 358.0, "end": 361.0, "text": " This means something else in the lambda calculus.", "tokens": [51314, 639, 1355, 746, 1646, 294, 264, 13607, 33400, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 129, "seek": 33900, "start": 361.0, "end": 363.0, "text": " It means we're going to first apply a to b,", "tokens": [51464, 467, 1355, 321, 434, 516, 281, 700, 3079, 257, 281, 272, 11, 51564], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 130, "seek": 33900, "start": 363.0, "end": 367.0, "text": " and the result of that will be the argument to f.", "tokens": [51564, 293, 264, 1874, 295, 300, 486, 312, 264, 6770, 281, 283, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04930183499358421, "compression_ratio": 1.7661870503597121, "no_speech_prob": 0.00028682671836577356}, {"id": 131, "seek": 36700, "start": 367.0, "end": 369.0, "text": " Hi, hello.", "tokens": [50364, 2421, 11, 7751, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 132, "seek": 36700, "start": 369.0, "end": 371.0, "text": " Welcome.", "tokens": [50464, 4027, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 133, "seek": 36700, "start": 371.0, "end": 376.0, "text": " So, just to summarize for everybody who's just arrived,", "tokens": [50564, 407, 11, 445, 281, 20858, 337, 2201, 567, 311, 445, 6678, 11, 50814], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 134, "seek": 36700, "start": 376.0, "end": 378.0, "text": " we're starting to define the syntax", "tokens": [50814, 321, 434, 2891, 281, 6964, 264, 28431, 50914], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 135, "seek": 36700, "start": 378.0, "end": 382.0, "text": " of a very small language called the lambda calculus.", "tokens": [50914, 295, 257, 588, 1359, 2856, 1219, 264, 13607, 33400, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 136, "seek": 36700, "start": 382.0, "end": 385.0, "text": " And this is just something that takes functions,", "tokens": [51114, 400, 341, 307, 445, 746, 300, 2516, 6828, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 137, "seek": 36700, "start": 385.0, "end": 387.0, "text": " applications of functions to arguments,", "tokens": [51264, 5821, 295, 6828, 281, 12869, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 138, "seek": 36700, "start": 387.0, "end": 389.0, "text": " and parentheses for grouping.", "tokens": [51364, 293, 34153, 337, 40149, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 139, "seek": 36700, "start": 389.0, "end": 391.0, "text": " That's really it.", "tokens": [51464, 663, 311, 534, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 140, "seek": 36700, "start": 391.0, "end": 394.0, "text": " So, really high level review of just this last slide.", "tokens": [51564, 407, 11, 534, 1090, 1496, 3131, 295, 445, 341, 1036, 4137, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07895069426678597, "compression_ratio": 1.5570175438596492, "no_speech_prob": 0.0007207086309790611}, {"id": 141, "seek": 39400, "start": 394.0, "end": 397.0, "text": " F a means invoke f with a,", "tokens": [50364, 479, 257, 1355, 41117, 283, 365, 257, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 142, "seek": 39400, "start": 397.0, "end": 400.0, "text": " and you'll get more as we go.", "tokens": [50514, 293, 291, 603, 483, 544, 382, 321, 352, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 143, "seek": 39400, "start": 400.0, "end": 403.0, "text": " So, let's talk about function definition in the lambda calculus.", "tokens": [50664, 407, 11, 718, 311, 751, 466, 2445, 7123, 294, 264, 13607, 33400, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 144, "seek": 39400, "start": 403.0, "end": 405.0, "text": " As I said before, we use a lambda to indicate", "tokens": [50814, 1018, 286, 848, 949, 11, 321, 764, 257, 13607, 281, 13330, 50914], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 145, "seek": 39400, "start": 405.0, "end": 407.0, "text": " that we're defining a new function.", "tokens": [50914, 300, 321, 434, 17827, 257, 777, 2445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 146, "seek": 39400, "start": 407.0, "end": 409.0, "text": " So, we got lambda calculus on the left,", "tokens": [51014, 407, 11, 321, 658, 13607, 33400, 322, 264, 1411, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 147, "seek": 39400, "start": 409.0, "end": 410.0, "text": " JavaScript on the right.", "tokens": [51114, 15778, 322, 264, 558, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 148, "seek": 39400, "start": 410.0, "end": 413.0, "text": " This is a function that takes an a and returns whatever b is.", "tokens": [51164, 639, 307, 257, 2445, 300, 2516, 364, 257, 293, 11247, 2035, 272, 307, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 149, "seek": 39400, "start": 413.0, "end": 415.0, "text": " Sort of throws away a,", "tokens": [51314, 26149, 295, 19251, 1314, 257, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 150, "seek": 39400, "start": 415.0, "end": 418.0, "text": " a b becomes irrelevant in this expression.", "tokens": [51414, 257, 272, 3643, 28682, 294, 341, 6114, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 151, "seek": 39400, "start": 418.0, "end": 421.0, "text": " The function abstraction like this is greedy.", "tokens": [51564, 440, 2445, 37765, 411, 341, 307, 28228, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09641317398317399, "compression_ratio": 1.6934865900383143, "no_speech_prob": 0.00255046458914876}, {"id": 152, "seek": 42100, "start": 421.0, "end": 425.0, "text": " The body swallows up as much stuff to the right as it can,", "tokens": [50364, 440, 1772, 1693, 38811, 493, 382, 709, 1507, 281, 264, 558, 382, 309, 393, 11, 50564], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 153, "seek": 42100, "start": 425.0, "end": 428.0, "text": " and that's all included in the body of this lambda abstraction.", "tokens": [50564, 293, 300, 311, 439, 5556, 294, 264, 1772, 295, 341, 13607, 37765, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 154, "seek": 42100, "start": 428.0, "end": 431.0, "text": " So, up into the point where it would stop making sense,", "tokens": [50714, 407, 11, 493, 666, 264, 935, 689, 309, 576, 1590, 1455, 2020, 11, 50864], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 155, "seek": 42100, "start": 431.0, "end": 436.0, "text": " like if you're using parens to force things to be evaluated differently.", "tokens": [50864, 411, 498, 291, 434, 1228, 7448, 3695, 281, 3464, 721, 281, 312, 25509, 7614, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 156, "seek": 42100, "start": 436.0, "end": 439.0, "text": " So, this indicates a function that takes an a,", "tokens": [51114, 407, 11, 341, 16203, 257, 2445, 300, 2516, 364, 257, 11, 51264], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 157, "seek": 42100, "start": 439.0, "end": 443.0, "text": " and it invokes b with x as its argument.", "tokens": [51264, 293, 309, 1048, 8606, 272, 365, 2031, 382, 1080, 6770, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 158, "seek": 42100, "start": 443.0, "end": 445.0, "text": " We can disambiguate this with parentheses,", "tokens": [51464, 492, 393, 717, 2173, 328, 10107, 341, 365, 34153, 11, 51564], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 159, "seek": 42100, "start": 445.0, "end": 448.0, "text": " but as I said, since lambda abstractions", "tokens": [51564, 457, 382, 286, 848, 11, 1670, 13607, 12649, 626, 51714], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 160, "seek": 42100, "start": 448.0, "end": 450.0, "text": " greedily swallow up everything to the right,", "tokens": [51714, 29230, 953, 20099, 493, 1203, 281, 264, 558, 11, 51814], "temperature": 0.0, "avg_logprob": -0.08679222682165721, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.001597619499079883}, {"id": 161, "seek": 45000, "start": 450.0, "end": 452.0, "text": " these are actually useless parentheses,", "tokens": [50364, 613, 366, 767, 14115, 34153, 11, 50464], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 162, "seek": 45000, "start": 452.0, "end": 457.0, "text": " and we'll not really show them in most of the upcoming examples.", "tokens": [50464, 293, 321, 603, 406, 534, 855, 552, 294, 881, 295, 264, 11500, 5110, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 163, "seek": 45000, "start": 457.0, "end": 459.0, "text": " On the other hand, if we use parentheses", "tokens": [50714, 1282, 264, 661, 1011, 11, 498, 321, 764, 34153, 50814], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 164, "seek": 45000, "start": 459.0, "end": 462.0, "text": " to force the thing on the left to be a function with a body", "tokens": [50814, 281, 3464, 264, 551, 322, 264, 1411, 281, 312, 257, 2445, 365, 257, 1772, 50964], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 165, "seek": 45000, "start": 462.0, "end": 465.0, "text": " that's just the b variable,", "tokens": [50964, 300, 311, 445, 264, 272, 7006, 11, 51114], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 166, "seek": 45000, "start": 465.0, "end": 468.0, "text": " now this is a different expression.", "tokens": [51114, 586, 341, 307, 257, 819, 6114, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 167, "seek": 45000, "start": 468.0, "end": 471.0, "text": " Now we're saying take a function that goes from a to b", "tokens": [51264, 823, 321, 434, 1566, 747, 257, 2445, 300, 1709, 490, 257, 281, 272, 51414], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 168, "seek": 45000, "start": 471.0, "end": 476.0, "text": " and apply it to the argument x.", "tokens": [51414, 293, 3079, 309, 281, 264, 6770, 2031, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 169, "seek": 45000, "start": 476.0, "end": 479.0, "text": " As we saw a second ago in a demonstration", "tokens": [51664, 1018, 321, 1866, 257, 1150, 2057, 294, 257, 16520, 51814], "temperature": 0.0, "avg_logprob": -0.06979888844712873, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.00039201954496093094}, {"id": 170, "seek": 47900, "start": 479.0, "end": 482.0, "text": " in the lambda calculus we're allowed to nest functions.", "tokens": [50364, 294, 264, 13607, 33400, 321, 434, 4350, 281, 15646, 6828, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 171, "seek": 47900, "start": 482.0, "end": 485.0, "text": " So, this is a function that takes an a", "tokens": [50514, 407, 11, 341, 307, 257, 2445, 300, 2516, 364, 257, 50664], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 172, "seek": 47900, "start": 485.0, "end": 489.0, "text": " and returns a new function that new function takes a b", "tokens": [50664, 293, 11247, 257, 777, 2445, 300, 777, 2445, 2516, 257, 272, 50864], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 173, "seek": 47900, "start": 489.0, "end": 492.0, "text": " and that function returns an a.", "tokens": [50864, 293, 300, 2445, 11247, 364, 257, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 174, "seek": 47900, "start": 492.0, "end": 496.0, "text": " So, just to reprise our curried addition function from a second ago,", "tokens": [51014, 407, 11, 445, 281, 1085, 18619, 527, 1262, 2428, 4500, 2445, 490, 257, 1150, 2057, 11, 51214], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 175, "seek": 47900, "start": 496.0, "end": 499.0, "text": " we have this function that takes an a,", "tokens": [51214, 321, 362, 341, 2445, 300, 2516, 364, 257, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 176, "seek": 47900, "start": 499.0, "end": 501.0, "text": " returns a function that takes a b,", "tokens": [51364, 11247, 257, 2445, 300, 2516, 257, 272, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 177, "seek": 47900, "start": 501.0, "end": 503.0, "text": " and that returns a plus b.", "tokens": [51464, 293, 300, 11247, 257, 1804, 272, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 178, "seek": 47900, "start": 503.0, "end": 508.0, "text": " So, we have to feed out the arguments not like this all at once,", "tokens": [51564, 407, 11, 321, 362, 281, 3154, 484, 264, 12869, 406, 411, 341, 439, 412, 1564, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10643214350161345, "compression_ratio": 2.0594059405940595, "no_speech_prob": 0.002980564022436738}, {"id": 179, "seek": 50800, "start": 508.0, "end": 512.0, "text": " but rather each argument one at a time", "tokens": [50364, 457, 2831, 1184, 6770, 472, 412, 257, 565, 50564], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 180, "seek": 50800, "start": 512.0, "end": 516.0, "text": " in a successive invocations,", "tokens": [50564, 294, 257, 48043, 1048, 905, 763, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 181, "seek": 50800, "start": 516.0, "end": 521.0, "text": " and we get the result we want, known as currying.", "tokens": [50764, 293, 321, 483, 264, 1874, 321, 528, 11, 2570, 382, 1262, 19076, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 182, "seek": 50800, "start": 521.0, "end": 524.0, "text": " Again, we can clarify this using parentheses.", "tokens": [51014, 3764, 11, 321, 393, 17594, 341, 1228, 34153, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 183, "seek": 50800, "start": 524.0, "end": 527.0, "text": " The lambda on the left returns the inner lambda,", "tokens": [51164, 440, 13607, 322, 264, 1411, 11247, 264, 7284, 13607, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 184, "seek": 50800, "start": 527.0, "end": 529.0, "text": " and then we can use that.", "tokens": [51314, 293, 550, 321, 393, 764, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 185, "seek": 50800, "start": 529.0, "end": 531.0, "text": " But since these are useless parentheses,", "tokens": [51414, 583, 1670, 613, 366, 14115, 34153, 11, 51514], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 186, "seek": 50800, "start": 531.0, "end": 535.0, "text": " we'll omit them in most of the examples.", "tokens": [51514, 321, 603, 3406, 270, 552, 294, 881, 295, 264, 5110, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 187, "seek": 50800, "start": 535.0, "end": 536.0, "text": " How are we doing so far?", "tokens": [51714, 1012, 366, 321, 884, 370, 1400, 30, 51764], "temperature": 0.0, "avg_logprob": -0.10733367457534328, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.000519259599968791}, {"id": 188, "seek": 53600, "start": 536.0, "end": 540.0, "text": " Questions about the bare syntax of the lambda calculus?", "tokens": [50364, 27738, 466, 264, 6949, 28431, 295, 264, 13607, 33400, 30, 50564], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 189, "seek": 53600, "start": 540.0, "end": 543.0, "text": " As you can see, it's very similar to JavaScript,", "tokens": [50564, 1018, 291, 393, 536, 11, 309, 311, 588, 2531, 281, 15778, 11, 50714], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 190, "seek": 53600, "start": 543.0, "end": 546.0, "text": " except you don't have parentheses around function invocation.", "tokens": [50714, 3993, 291, 500, 380, 362, 34153, 926, 2445, 1048, 27943, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 191, "seek": 53600, "start": 546.0, "end": 548.0, "text": " You just put things next to each other,", "tokens": [50864, 509, 445, 829, 721, 958, 281, 1184, 661, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 192, "seek": 53600, "start": 548.0, "end": 550.0, "text": " and that indicates apply a function on the left", "tokens": [50964, 293, 300, 16203, 3079, 257, 2445, 322, 264, 1411, 51064], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 193, "seek": 53600, "start": 550.0, "end": 554.0, "text": " to the argument on the right.", "tokens": [51064, 281, 264, 6770, 322, 264, 558, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 194, "seek": 53600, "start": 554.0, "end": 556.0, "text": " Cool.", "tokens": [51264, 8561, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 195, "seek": 53600, "start": 556.0, "end": 557.0, "text": " All right.", "tokens": [51364, 1057, 558, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 196, "seek": 53600, "start": 557.0, "end": 559.0, "text": " So, I swear this is going to be the most complicated bit", "tokens": [51414, 407, 11, 286, 11902, 341, 307, 516, 281, 312, 264, 881, 6179, 857, 51514], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 197, "seek": 53600, "start": 559.0, "end": 561.0, "text": " of lambda calculus syntax we have to deal with.", "tokens": [51514, 295, 13607, 33400, 28431, 321, 362, 281, 2028, 365, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 198, "seek": 53600, "start": 561.0, "end": 563.0, "text": " It's called beta reduction.", "tokens": [51614, 467, 311, 1219, 9861, 11004, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08923038943060513, "compression_ratio": 1.6254681647940075, "no_speech_prob": 0.0029806254897266626}, {"id": 199, "seek": 56300, "start": 563.0, "end": 566.0, "text": " It's got a scary name, but it really just means", "tokens": [50364, 467, 311, 658, 257, 6958, 1315, 11, 457, 309, 534, 445, 1355, 50514], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 200, "seek": 56300, "start": 566.0, "end": 570.0, "text": " tracing the logic, evaluating the function invocations,", "tokens": [50514, 25262, 264, 9952, 11, 27479, 264, 2445, 1048, 905, 763, 11, 50714], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 201, "seek": 56300, "start": 570.0, "end": 572.0, "text": " seeing what we end up with.", "tokens": [50714, 2577, 437, 321, 917, 493, 365, 13, 50814], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 202, "seek": 56300, "start": 572.0, "end": 576.0, "text": " So beta reduction is just the act of taking a function", "tokens": [50814, 407, 9861, 11004, 307, 445, 264, 605, 295, 1940, 257, 2445, 51014], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 203, "seek": 56300, "start": 576.0, "end": 579.0, "text": " and applying it to its argument.", "tokens": [51014, 293, 9275, 309, 281, 1080, 6770, 13, 51164], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 204, "seek": 56300, "start": 579.0, "end": 581.0, "text": " So here we've got this function in red", "tokens": [51164, 407, 510, 321, 600, 658, 341, 2445, 294, 2182, 51264], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 205, "seek": 56300, "start": 581.0, "end": 583.0, "text": " applied to the argument underlined.", "tokens": [51264, 6456, 281, 264, 6770, 833, 13564, 13, 51364], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 206, "seek": 56300, "start": 583.0, "end": 585.0, "text": " What we do is we take the argument,", "tokens": [51364, 708, 321, 360, 307, 321, 747, 264, 6770, 11, 51464], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 207, "seek": 56300, "start": 585.0, "end": 588.0, "text": " and it comes in as the parameter of the function.", "tokens": [51464, 293, 309, 1487, 294, 382, 264, 13075, 295, 264, 2445, 13, 51614], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 208, "seek": 56300, "start": 588.0, "end": 591.0, "text": " This is a function that takes an A and returns an A.", "tokens": [51614, 639, 307, 257, 2445, 300, 2516, 364, 316, 293, 11247, 364, 316, 13, 51764], "temperature": 0.0, "avg_logprob": -0.052996286824971685, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.005909016355872154}, {"id": 209, "seek": 59100, "start": 592.0, "end": 595.0, "text": " So this argument, the BCB function,", "tokens": [50414, 407, 341, 6770, 11, 264, 14359, 33, 2445, 11, 50564], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 210, "seek": 59100, "start": 595.0, "end": 599.0, "text": " is going to replace in the body of the function every A.", "tokens": [50564, 307, 516, 281, 7406, 294, 264, 1772, 295, 264, 2445, 633, 316, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 211, "seek": 59100, "start": 599.0, "end": 601.0, "text": " We go look in the body, find all the As,", "tokens": [50764, 492, 352, 574, 294, 264, 1772, 11, 915, 439, 264, 1018, 11, 50864], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 212, "seek": 59100, "start": 601.0, "end": 604.0, "text": " and we substitute in this other expression.", "tokens": [50864, 293, 321, 15802, 294, 341, 661, 6114, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 213, "seek": 59100, "start": 604.0, "end": 609.0, "text": " And that gives us this first simplification.", "tokens": [51014, 400, 300, 2709, 505, 341, 700, 6883, 3774, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 214, "seek": 59100, "start": 609.0, "end": 611.0, "text": " Well, we continue doing this.", "tokens": [51264, 1042, 11, 321, 2354, 884, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 215, "seek": 59100, "start": 611.0, "end": 613.0, "text": " We've got a new function, the BCB function,", "tokens": [51364, 492, 600, 658, 257, 777, 2445, 11, 264, 14359, 33, 2445, 11, 51464], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 216, "seek": 59100, "start": 613.0, "end": 616.0, "text": " being applied to another argument, the X argument.", "tokens": [51464, 885, 6456, 281, 1071, 6770, 11, 264, 1783, 6770, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 217, "seek": 59100, "start": 616.0, "end": 618.0, "text": " So we're going to take the X argument", "tokens": [51614, 407, 321, 434, 516, 281, 747, 264, 1783, 6770, 51714], "temperature": 0.0, "avg_logprob": -0.06895494023594287, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.002472310559824109}, {"id": 218, "seek": 61800, "start": 618.0, "end": 622.0, "text": " and substitute it in as the parameter to the function.", "tokens": [50364, 293, 15802, 309, 294, 382, 264, 13075, 281, 264, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 219, "seek": 61800, "start": 622.0, "end": 624.0, "text": " So we go look inside the function body,", "tokens": [50564, 407, 321, 352, 574, 1854, 264, 2445, 1772, 11, 50664], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 220, "seek": 61800, "start": 624.0, "end": 627.0, "text": " find all the B's, and replace them all with X's.", "tokens": [50664, 915, 439, 264, 363, 311, 11, 293, 7406, 552, 439, 365, 1783, 311, 13, 50814], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 221, "seek": 61800, "start": 627.0, "end": 631.0, "text": " And we get this new function as a result.", "tokens": [50814, 400, 321, 483, 341, 777, 2445, 382, 257, 1874, 13, 51014], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 222, "seek": 61800, "start": 631.0, "end": 633.0, "text": " Once again, we've got a function", "tokens": [51014, 3443, 797, 11, 321, 600, 658, 257, 2445, 51114], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 223, "seek": 61800, "start": 633.0, "end": 635.0, "text": " that we're going to apply to an argument.", "tokens": [51114, 300, 321, 434, 516, 281, 3079, 281, 364, 6770, 13, 51214], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 224, "seek": 61800, "start": 635.0, "end": 639.0, "text": " We take the argument, we pass it into the function's parameter.", "tokens": [51214, 492, 747, 264, 6770, 11, 321, 1320, 309, 666, 264, 2445, 311, 13075, 13, 51414], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 225, "seek": 61800, "start": 639.0, "end": 641.0, "text": " We go look in the body for all the C's.", "tokens": [51414, 492, 352, 574, 294, 264, 1772, 337, 439, 264, 383, 311, 13, 51514], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 226, "seek": 61800, "start": 641.0, "end": 643.0, "text": " There are no C's in this body.", "tokens": [51514, 821, 366, 572, 383, 311, 294, 341, 1772, 13, 51614], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 227, "seek": 61800, "start": 643.0, "end": 645.0, "text": " We replace all the C's with that argument,", "tokens": [51614, 492, 7406, 439, 264, 383, 311, 365, 300, 6770, 11, 51714], "temperature": 0.0, "avg_logprob": -0.045629471771476804, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.0009696244960650802}, {"id": 228, "seek": 64500, "start": 645.0, "end": 648.0, "text": " and that gives us this simplification.", "tokens": [50364, 293, 300, 2709, 505, 341, 6883, 3774, 13, 50514], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 229, "seek": 64500, "start": 648.0, "end": 650.0, "text": " At this point, we've got nothing left to do.", "tokens": [50514, 1711, 341, 935, 11, 321, 600, 658, 1825, 1411, 281, 360, 13, 50614], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 230, "seek": 64500, "start": 650.0, "end": 652.0, "text": " There are no more reducible expressions.", "tokens": [50614, 821, 366, 572, 544, 2783, 32128, 15277, 13, 50714], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 231, "seek": 64500, "start": 652.0, "end": 654.0, "text": " So we say this is in beta normal form,", "tokens": [50714, 407, 321, 584, 341, 307, 294, 9861, 2710, 1254, 11, 50814], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 232, "seek": 64500, "start": 654.0, "end": 656.0, "text": " which is just a hilarious way of saying", "tokens": [50814, 597, 307, 445, 257, 19796, 636, 295, 1566, 50914], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 233, "seek": 64500, "start": 656.0, "end": 661.0, "text": " we've fully evaluated the function in a terminal way.", "tokens": [50914, 321, 600, 4498, 25509, 264, 2445, 294, 257, 14709, 636, 13, 51164], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 234, "seek": 64500, "start": 661.0, "end": 664.0, "text": " So it looks a little dense", "tokens": [51164, 407, 309, 1542, 257, 707, 18011, 51314], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 235, "seek": 64500, "start": 664.0, "end": 666.0, "text": " compared to what you're used to with JavaScript,", "tokens": [51314, 5347, 281, 437, 291, 434, 1143, 281, 365, 15778, 11, 51414], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 236, "seek": 64500, "start": 666.0, "end": 671.0, "text": " but it's really nothing that we haven't done many times in JavaScript.", "tokens": [51414, 457, 309, 311, 534, 1825, 300, 321, 2378, 380, 1096, 867, 1413, 294, 15778, 13, 51664], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 237, "seek": 64500, "start": 671.0, "end": 674.0, "text": " Taking a function, passing in arguments as the parameters,", "tokens": [51664, 17837, 257, 2445, 11, 8437, 294, 12869, 382, 264, 9834, 11, 51814], "temperature": 0.0, "avg_logprob": -0.051703102332501374, "compression_ratio": 1.6418439716312057, "no_speech_prob": 0.0008829411817714572}, {"id": 238, "seek": 67400, "start": 674.0, "end": 677.0, "text": " and then in the body, everywhere that parameter exists,", "tokens": [50364, 293, 550, 294, 264, 1772, 11, 5315, 300, 13075, 8198, 11, 50514], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 239, "seek": 67400, "start": 677.0, "end": 680.0, "text": " it's been replaced by a value.", "tokens": [50514, 309, 311, 668, 10772, 538, 257, 2158, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 240, "seek": 67400, "start": 680.0, "end": 682.0, "text": " There's some caveats here.", "tokens": [50664, 821, 311, 512, 11730, 1720, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 241, "seek": 67400, "start": 682.0, "end": 684.0, "text": " I'm not going to cover in this presentation.", "tokens": [50764, 286, 478, 406, 516, 281, 2060, 294, 341, 5860, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 242, "seek": 67400, "start": 684.0, "end": 686.0, "text": " If you could do multiple reductions", "tokens": [50864, 759, 291, 727, 360, 3866, 40296, 50964], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 243, "seek": 67400, "start": 686.0, "end": 689.0, "text": " in different places in the expression simultaneously,", "tokens": [50964, 294, 819, 3190, 294, 264, 6114, 16561, 11, 51114], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 244, "seek": 67400, "start": 689.0, "end": 693.0, "text": " there are caveats and strategies to which ones you should do first.", "tokens": [51114, 456, 366, 11730, 1720, 293, 9029, 281, 597, 2306, 291, 820, 360, 700, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 245, "seek": 67400, "start": 693.0, "end": 697.0, "text": " And there's also possible ways that two separate functions", "tokens": [51314, 400, 456, 311, 611, 1944, 2098, 300, 732, 4994, 6828, 51514], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 246, "seek": 67400, "start": 697.0, "end": 699.0, "text": " that coincidentally share the same variable names,", "tokens": [51514, 300, 13001, 36578, 2073, 264, 912, 7006, 5288, 11, 51614], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 247, "seek": 67400, "start": 699.0, "end": 702.0, "text": " you want to avoid conflating those two variables,", "tokens": [51614, 291, 528, 281, 5042, 1497, 75, 990, 729, 732, 9102, 11, 51764], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 248, "seek": 67400, "start": 702.0, "end": 703.0, "text": " which mean different things.", "tokens": [51764, 597, 914, 819, 721, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06279771696261274, "compression_ratio": 1.717687074829932, "no_speech_prob": 0.0010320853907614946}, {"id": 249, "seek": 70300, "start": 703.0, "end": 705.0, "text": " So there are some gotchas,", "tokens": [50364, 407, 456, 366, 512, 658, 41299, 11, 50464], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 250, "seek": 70300, "start": 705.0, "end": 709.0, "text": " but they're kind of outside the scope of this talk.", "tokens": [50464, 457, 436, 434, 733, 295, 2380, 264, 11923, 295, 341, 751, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 251, "seek": 70300, "start": 709.0, "end": 712.0, "text": " Let's see another combinator here, the mockingbird.", "tokens": [50664, 961, 311, 536, 1071, 2512, 31927, 510, 11, 264, 49792, 18080, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 252, "seek": 70300, "start": 712.0, "end": 714.0, "text": " This is a fun function.", "tokens": [50814, 639, 307, 257, 1019, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 253, "seek": 70300, "start": 714.0, "end": 716.0, "text": " It takes a function as input,", "tokens": [50914, 467, 2516, 257, 2445, 382, 4846, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 254, "seek": 70300, "start": 716.0, "end": 721.0, "text": " and it invokes that function passing in itself.", "tokens": [51014, 293, 309, 1048, 8606, 300, 2445, 8437, 294, 2564, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 255, "seek": 70300, "start": 721.0, "end": 725.0, "text": " This is the self-application combinator.", "tokens": [51264, 639, 307, 264, 2698, 12, 1746, 1050, 399, 2512, 31927, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 256, "seek": 70300, "start": 725.0, "end": 726.0, "text": " Whoa, what's happening here?", "tokens": [51464, 7521, 11, 437, 311, 2737, 510, 30, 51514], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 257, "seek": 70300, "start": 726.0, "end": 727.0, "text": " This is craziness.", "tokens": [51514, 639, 307, 46348, 1324, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 258, "seek": 70300, "start": 727.0, "end": 728.0, "text": " Let's try it out.", "tokens": [51564, 961, 311, 853, 309, 484, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 259, "seek": 70300, "start": 728.0, "end": 731.0, "text": " The mockingbird is a function that takes a function,", "tokens": [51614, 440, 49792, 18080, 307, 257, 2445, 300, 2516, 257, 2445, 11, 51764], "temperature": 0.0, "avg_logprob": -0.06991796978449417, "compression_ratio": 1.757847533632287, "no_speech_prob": 0.0014101618435233831}, {"id": 260, "seek": 73100, "start": 731.0, "end": 734.0, "text": " calls the function on itself.", "tokens": [50364, 5498, 264, 2445, 322, 2564, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 261, "seek": 73100, "start": 734.0, "end": 737.0, "text": " What might the mockingbird of identity be?", "tokens": [50514, 708, 1062, 264, 49792, 18080, 295, 6575, 312, 30, 50664], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 262, "seek": 73100, "start": 737.0, "end": 743.0, "text": " Somebody walked me through the logic here.", "tokens": [50664, 13463, 7628, 385, 807, 264, 9952, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 263, "seek": 73100, "start": 743.0, "end": 746.0, "text": " What's f in this function?", "tokens": [50964, 708, 311, 283, 294, 341, 2445, 30, 51114], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 264, "seek": 73100, "start": 746.0, "end": 748.0, "text": " It's the identity.", "tokens": [51114, 467, 311, 264, 6575, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 265, "seek": 73100, "start": 748.0, "end": 750.0, "text": " What are we doing with it?", "tokens": [51214, 708, 366, 321, 884, 365, 309, 30, 51314], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 266, "seek": 73100, "start": 750.0, "end": 755.0, "text": " Identity of identity.", "tokens": [51314, 25905, 507, 295, 6575, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 267, "seek": 73100, "start": 755.0, "end": 757.0, "text": " We already solved that before, right?", "tokens": [51564, 492, 1217, 13041, 300, 949, 11, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 268, "seek": 73100, "start": 757.0, "end": 758.0, "text": " What is the answer?", "tokens": [51664, 708, 307, 264, 1867, 30, 51714], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 269, "seek": 73100, "start": 758.0, "end": 760.0, "text": " It's the identity.", "tokens": [51714, 467, 311, 264, 6575, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0845389420958771, "compression_ratio": 1.64, "no_speech_prob": 0.00048783147940412164}, {"id": 270, "seek": 76000, "start": 760.0, "end": 762.0, "text": " The self-application of identity is identity.", "tokens": [50364, 440, 2698, 12, 1746, 1050, 399, 295, 6575, 307, 6575, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07546482588115491, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.0012446683831512928}, {"id": 271, "seek": 76000, "start": 762.0, "end": 765.0, "text": " We saw that earlier.", "tokens": [50464, 492, 1866, 300, 3071, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07546482588115491, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.0012446683831512928}, {"id": 272, "seek": 76000, "start": 765.0, "end": 768.0, "text": " This one's going to be a little bit more disconcerting.", "tokens": [50614, 639, 472, 311, 516, 281, 312, 257, 707, 857, 544, 717, 1671, 1776, 783, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07546482588115491, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.0012446683831512928}, {"id": 273, "seek": 76000, "start": 768.0, "end": 773.0, "text": " What is the self-application of self-application?", "tokens": [50764, 708, 307, 264, 2698, 12, 1746, 1050, 399, 295, 2698, 12, 1746, 1050, 399, 30, 51014], "temperature": 0.0, "avg_logprob": -0.07546482588115491, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.0012446683831512928}, {"id": 274, "seek": 76000, "start": 773.0, "end": 776.0, "text": " Feel free to yell it out if you think you got it.", "tokens": [51014, 14113, 1737, 281, 20525, 309, 484, 498, 291, 519, 291, 658, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07546482588115491, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.0012446683831512928}, {"id": 275, "seek": 76000, "start": 776.0, "end": 785.0, "text": " It may be hinted at by the fact that I'm putting this in a try-catch block.", "tokens": [51164, 467, 815, 312, 12075, 292, 412, 538, 264, 1186, 300, 286, 478, 3372, 341, 294, 257, 853, 12, 66, 852, 3461, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07546482588115491, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.0012446683831512928}, {"id": 276, "seek": 78500, "start": 785.0, "end": 790.0, "text": " Any takers?", "tokens": [50364, 2639, 991, 433, 30, 50614], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 277, "seek": 78500, "start": 790.0, "end": 792.0, "text": " Call stack size exceeded.", "tokens": [50614, 7807, 8630, 2744, 38026, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 278, "seek": 78500, "start": 792.0, "end": 794.0, "text": " What just happened?", "tokens": [50714, 708, 445, 2011, 30, 50814], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 279, "seek": 78500, "start": 794.0, "end": 799.0, "text": " Well, mockingbird of identity is identity of identity, self-application.", "tokens": [50814, 1042, 11, 49792, 18080, 295, 6575, 307, 6575, 295, 6575, 11, 2698, 12, 1746, 1050, 399, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 280, "seek": 78500, "start": 799.0, "end": 803.0, "text": " We already know that that is identity, so that made sense.", "tokens": [51064, 492, 1217, 458, 300, 300, 307, 6575, 11, 370, 300, 1027, 2020, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 281, "seek": 78500, "start": 803.0, "end": 806.0, "text": " That does reduce to a better normal form.", "tokens": [51264, 663, 775, 5407, 281, 257, 1101, 2710, 1254, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 282, "seek": 78500, "start": 806.0, "end": 811.0, "text": " But the mockingbird of the mockingbird is the self-application of self-application.", "tokens": [51414, 583, 264, 49792, 18080, 295, 264, 49792, 18080, 307, 264, 2698, 12, 1746, 1050, 399, 295, 2698, 12, 1746, 1050, 399, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0512941148546007, "compression_ratio": 1.7897727272727273, "no_speech_prob": 0.017980841919779778}, {"id": 283, "seek": 81100, "start": 811.0, "end": 815.0, "text": " So we take self-application and we apply it to itself.", "tokens": [50364, 407, 321, 747, 2698, 12, 1746, 1050, 399, 293, 321, 3079, 309, 281, 2564, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 284, "seek": 81100, "start": 815.0, "end": 819.0, "text": " But if we're going to evaluate that, that's the self-application of self-application.", "tokens": [50564, 583, 498, 321, 434, 516, 281, 13059, 300, 11, 300, 311, 264, 2698, 12, 1746, 1050, 399, 295, 2698, 12, 1746, 1050, 399, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 285, "seek": 81100, "start": 819.0, "end": 825.0, "text": " So we take the self-application and uh-oh, it just goes on forever.", "tokens": [50764, 407, 321, 747, 264, 2698, 12, 1746, 1050, 399, 293, 2232, 12, 1445, 11, 309, 445, 1709, 322, 5680, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 286, "seek": 81100, "start": 825.0, "end": 827.0, "text": " This is a problem.", "tokens": [51064, 639, 307, 257, 1154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 287, "seek": 81100, "start": 827.0, "end": 833.0, "text": " The problem is we don't always know if some lambda term is going to have a beta normal form.", "tokens": [51164, 440, 1154, 307, 321, 500, 380, 1009, 458, 498, 512, 13607, 1433, 307, 516, 281, 362, 257, 9861, 2710, 1254, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 288, "seek": 81100, "start": 833.0, "end": 836.0, "text": " We don't know if this process ends or not.", "tokens": [51464, 492, 500, 380, 458, 498, 341, 1399, 5314, 420, 406, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 289, "seek": 81100, "start": 836.0, "end": 838.0, "text": " Sometimes it doesn't end.", "tokens": [51614, 4803, 309, 1177, 380, 917, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07200988672547422, "compression_ratio": 1.7844036697247707, "no_speech_prob": 0.0340743325650692}, {"id": 290, "seek": 83800, "start": 838.0, "end": 842.0, "text": " Sometimes it diverges, which means it goes on forever.", "tokens": [50364, 4803, 309, 18558, 2880, 11, 597, 1355, 309, 1709, 322, 5680, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09013063973243084, "compression_ratio": 1.6496062992125984, "no_speech_prob": 0.011329447850584984}, {"id": 291, "seek": 83800, "start": 842.0, "end": 847.0, "text": " And in fact, there's no way to know in a general way if a given expression,", "tokens": [50564, 400, 294, 1186, 11, 456, 311, 572, 636, 281, 458, 294, 257, 2674, 636, 498, 257, 2212, 6114, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09013063973243084, "compression_ratio": 1.6496062992125984, "no_speech_prob": 0.011329447850584984}, {"id": 292, "seek": 83800, "start": 847.0, "end": 852.0, "text": " there's no single algorithm that can tell you whether or not one of these expressions will stop.", "tokens": [50814, 456, 311, 572, 2167, 9284, 300, 393, 980, 291, 1968, 420, 406, 472, 295, 613, 15277, 486, 1590, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09013063973243084, "compression_ratio": 1.6496062992125984, "no_speech_prob": 0.011329447850584984}, {"id": 293, "seek": 83800, "start": 852.0, "end": 855.0, "text": " That's known as the halting problem and Alan Turing figured it out.", "tokens": [51064, 663, 311, 2570, 382, 264, 7523, 783, 1154, 293, 16442, 314, 1345, 8932, 309, 484, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09013063973243084, "compression_ratio": 1.6496062992125984, "no_speech_prob": 0.011329447850584984}, {"id": 294, "seek": 83800, "start": 855.0, "end": 861.0, "text": " Now for an individual one, you can prove through ad hoc means that, yeah,", "tokens": [51214, 823, 337, 364, 2609, 472, 11, 291, 393, 7081, 807, 614, 16708, 1355, 300, 11, 1338, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09013063973243084, "compression_ratio": 1.6496062992125984, "no_speech_prob": 0.011329447850584984}, {"id": 295, "seek": 83800, "start": 861.0, "end": 863.0, "text": " for instance, this one is going to go on forever.", "tokens": [51514, 337, 5197, 11, 341, 472, 307, 516, 281, 352, 322, 5680, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09013063973243084, "compression_ratio": 1.6496062992125984, "no_speech_prob": 0.011329447850584984}, {"id": 296, "seek": 86300, "start": 863.0, "end": 868.0, "text": " So it's not that it's always unanswerable, just that there's no one set of steps that you can take", "tokens": [50364, 407, 309, 311, 406, 300, 309, 311, 1009, 517, 43904, 712, 11, 445, 300, 456, 311, 572, 472, 992, 295, 4439, 300, 291, 393, 747, 50614], "temperature": 0.0, "avg_logprob": -0.07476107005415292, "compression_ratio": 1.7230769230769232, "no_speech_prob": 0.0032727119978517294}, {"id": 297, "seek": 86300, "start": 868.0, "end": 874.0, "text": " that will cause that, that you will know whether or not it halts.", "tokens": [50614, 300, 486, 3082, 300, 11, 300, 291, 486, 458, 1968, 420, 406, 309, 7523, 1373, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07476107005415292, "compression_ratio": 1.7230769230769232, "no_speech_prob": 0.0032727119978517294}, {"id": 298, "seek": 86300, "start": 874.0, "end": 879.0, "text": " This particular divergent term, by the way, is called the omega combinator.", "tokens": [50914, 639, 1729, 18558, 6930, 1433, 11, 538, 264, 636, 11, 307, 1219, 264, 10498, 2512, 31927, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07476107005415292, "compression_ratio": 1.7230769230769232, "no_speech_prob": 0.0032727119978517294}, {"id": 299, "seek": 86300, "start": 879.0, "end": 884.0, "text": " Omega because it's like the end, alpha and the omega.", "tokens": [51164, 27645, 570, 309, 311, 411, 264, 917, 11, 8961, 293, 264, 10498, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07476107005415292, "compression_ratio": 1.7230769230769232, "no_speech_prob": 0.0032727119978517294}, {"id": 300, "seek": 86300, "start": 884.0, "end": 888.0, "text": " And sometimes the mockingbird as a result is called little omega.", "tokens": [51414, 400, 2171, 264, 49792, 18080, 382, 257, 1874, 307, 1219, 707, 10498, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07476107005415292, "compression_ratio": 1.7230769230769232, "no_speech_prob": 0.0032727119978517294}, {"id": 301, "seek": 86300, "start": 888.0, "end": 892.0, "text": " One of the problems you'll find if you start going out and reading about all this stuff", "tokens": [51614, 1485, 295, 264, 2740, 291, 603, 915, 498, 291, 722, 516, 484, 293, 3760, 466, 439, 341, 1507, 51814], "temperature": 0.0, "avg_logprob": -0.07476107005415292, "compression_ratio": 1.7230769230769232, "no_speech_prob": 0.0032727119978517294}, {"id": 302, "seek": 89200, "start": 892.0, "end": 896.0, "text": " is that a lot of different mathematicians and programmers and people have worked on it over time", "tokens": [50364, 307, 300, 257, 688, 295, 819, 32811, 2567, 293, 41504, 293, 561, 362, 2732, 322, 309, 670, 565, 50564], "temperature": 0.0, "avg_logprob": -0.05118088679270701, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0008040292304940522}, {"id": 303, "seek": 89200, "start": 896.0, "end": 899.0, "text": " and they've all given their own pet names to these things.", "tokens": [50564, 293, 436, 600, 439, 2212, 641, 1065, 3817, 5288, 281, 613, 721, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05118088679270701, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0008040292304940522}, {"id": 304, "seek": 89200, "start": 899.0, "end": 905.0, "text": " So there's a lot of synonyms and sometimes even intersection.", "tokens": [50714, 407, 456, 311, 257, 688, 295, 5451, 2526, 2592, 293, 2171, 754, 15236, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05118088679270701, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0008040292304940522}, {"id": 305, "seek": 89200, "start": 905.0, "end": 910.0, "text": " Okay, we're almost done with lambda calculus syntax, but I lied before and I said it was the end.", "tokens": [51014, 1033, 11, 321, 434, 1920, 1096, 365, 13607, 33400, 28431, 11, 457, 286, 20101, 949, 293, 286, 848, 309, 390, 264, 917, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05118088679270701, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0008040292304940522}, {"id": 306, "seek": 89200, "start": 910.0, "end": 913.0, "text": " There's one more thing I want to show you about syntax here.", "tokens": [51264, 821, 311, 472, 544, 551, 286, 528, 281, 855, 291, 466, 28431, 510, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05118088679270701, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0008040292304940522}, {"id": 307, "seek": 89200, "start": 913.0, "end": 917.0, "text": " We can do, as I said before, these nested lambdas.", "tokens": [51414, 492, 393, 360, 11, 382, 286, 848, 949, 11, 613, 15646, 292, 10097, 27476, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05118088679270701, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0008040292304940522}, {"id": 308, "seek": 91700, "start": 917.0, "end": 922.0, "text": " We could say there's a function that takes an A and that returns a function that takes a B,", "tokens": [50364, 492, 727, 584, 456, 311, 257, 2445, 300, 2516, 364, 316, 293, 300, 11247, 257, 2445, 300, 2516, 257, 363, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10931496147636895, "compression_ratio": 1.9241071428571428, "no_speech_prob": 0.07157311588525772}, {"id": 309, "seek": 91700, "start": 922.0, "end": 926.0, "text": " which returns a function that takes a C, which finally returns a B.", "tokens": [50614, 597, 11247, 257, 2445, 300, 2516, 257, 383, 11, 597, 2721, 11247, 257, 363, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10931496147636895, "compression_ratio": 1.9241071428571428, "no_speech_prob": 0.07157311588525772}, {"id": 310, "seek": 91700, "start": 926.0, "end": 931.0, "text": " But the way we're using these functions, we just kind of think of, well,", "tokens": [50814, 583, 264, 636, 321, 434, 1228, 613, 6828, 11, 321, 445, 733, 295, 519, 295, 11, 731, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10931496147636895, "compression_ratio": 1.9241071428571428, "no_speech_prob": 0.07157311588525772}, {"id": 311, "seek": 91700, "start": 931.0, "end": 935.0, "text": " we're going to call it with both arguments at once in quotes,", "tokens": [51064, 321, 434, 516, 281, 818, 309, 365, 1293, 12869, 412, 1564, 294, 19963, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10931496147636895, "compression_ratio": 1.9241071428571428, "no_speech_prob": 0.07157311588525772}, {"id": 312, "seek": 91700, "start": 935.0, "end": 938.0, "text": " really meaning we feed it the first argument then the second argument.", "tokens": [51264, 534, 3620, 321, 3154, 309, 264, 700, 6770, 550, 264, 1150, 6770, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10931496147636895, "compression_ratio": 1.9241071428571428, "no_speech_prob": 0.07157311588525772}, {"id": 313, "seek": 91700, "start": 938.0, "end": 942.0, "text": " But we think of it as taking two arguments just in a curried way.", "tokens": [51414, 583, 321, 519, 295, 309, 382, 1940, 732, 12869, 445, 294, 257, 1262, 2428, 636, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10931496147636895, "compression_ratio": 1.9241071428571428, "no_speech_prob": 0.07157311588525772}, {"id": 314, "seek": 94200, "start": 942.0, "end": 947.0, "text": " So in order to kind of make it easier to write this stuff down and parse it,", "tokens": [50364, 407, 294, 1668, 281, 733, 295, 652, 309, 3571, 281, 2464, 341, 1507, 760, 293, 48377, 309, 11, 50614], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 315, "seek": 94200, "start": 947.0, "end": 951.0, "text": " there's a little bit of a shorthand where we just condense all the nested lambdas", "tokens": [50614, 456, 311, 257, 707, 857, 295, 257, 402, 2652, 474, 689, 321, 445, 2224, 1288, 439, 264, 15646, 292, 10097, 27476, 50814], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 316, "seek": 94200, "start": 951.0, "end": 953.0, "text": " and say, here's a ternary function.", "tokens": [50814, 293, 584, 11, 510, 311, 257, 256, 1248, 822, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 317, "seek": 94200, "start": 953.0, "end": 956.0, "text": " Here's a function that takes three inputs and returns something.", "tokens": [50914, 1692, 311, 257, 2445, 300, 2516, 1045, 15743, 293, 11247, 746, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 318, "seek": 94200, "start": 956.0, "end": 958.0, "text": " But don't get fooled.", "tokens": [51064, 583, 500, 380, 483, 33372, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 319, "seek": 94200, "start": 958.0, "end": 961.0, "text": " These don't come in all simultaneously.", "tokens": [51164, 1981, 500, 380, 808, 294, 439, 16561, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 320, "seek": 94200, "start": 961.0, "end": 965.0, "text": " We feed them into the function one after the other.", "tokens": [51314, 492, 3154, 552, 666, 264, 2445, 472, 934, 264, 661, 13, 51514], "temperature": 0.0, "avg_logprob": -0.05050655939046619, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.0007793152472004294}, {"id": 321, "seek": 96500, "start": 965.0, "end": 969.0, "text": " So this still means nested lambda expressions.", "tokens": [50364, 407, 341, 920, 1355, 15646, 292, 13607, 15277, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07175244455752165, "compression_ratio": 1.905, "no_speech_prob": 0.00327275856398046}, {"id": 322, "seek": 96500, "start": 969.0, "end": 974.0, "text": " It's just a convenient shorthand for indicating that they're curried.", "tokens": [50564, 467, 311, 445, 257, 10851, 402, 2652, 474, 337, 25604, 300, 436, 434, 1262, 2428, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07175244455752165, "compression_ratio": 1.905, "no_speech_prob": 0.00327275856398046}, {"id": 323, "seek": 96500, "start": 974.0, "end": 977.0, "text": " I'm not going to go through all of the logic of this again.", "tokens": [50814, 286, 478, 406, 516, 281, 352, 807, 439, 295, 264, 9952, 295, 341, 797, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07175244455752165, "compression_ratio": 1.905, "no_speech_prob": 0.00327275856398046}, {"id": 324, "seek": 96500, "start": 977.0, "end": 982.0, "text": " It's the exact same example we saw before of feeding an argument into its parameter", "tokens": [50964, 467, 311, 264, 1900, 912, 1365, 321, 1866, 949, 295, 12919, 364, 6770, 666, 1080, 13075, 51214], "temperature": 0.0, "avg_logprob": -0.07175244455752165, "compression_ratio": 1.905, "no_speech_prob": 0.00327275856398046}, {"id": 325, "seek": 96500, "start": 982.0, "end": 986.0, "text": " and replacing the parameter in the body, feeding an argument into its parameter", "tokens": [51214, 293, 19139, 264, 13075, 294, 264, 1772, 11, 12919, 364, 6770, 666, 1080, 13075, 51414], "temperature": 0.0, "avg_logprob": -0.07175244455752165, "compression_ratio": 1.905, "no_speech_prob": 0.00327275856398046}, {"id": 326, "seek": 96500, "start": 986.0, "end": 989.0, "text": " and replacing the parameter in the body.", "tokens": [51414, 293, 19139, 264, 13075, 294, 264, 1772, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07175244455752165, "compression_ratio": 1.905, "no_speech_prob": 0.00327275856398046}, {"id": 327, "seek": 98900, "start": 989.0, "end": 995.0, "text": " But this time I've used the syntax shorthand to show those nested lambdas.", "tokens": [50364, 583, 341, 565, 286, 600, 1143, 264, 28431, 402, 2652, 474, 281, 855, 729, 15646, 292, 10097, 27476, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 328, "seek": 98900, "start": 995.0, "end": 1000.0, "text": " So the body of this one is another lambda and then we proceed as normal", "tokens": [50664, 407, 264, 1772, 295, 341, 472, 307, 1071, 13607, 293, 550, 321, 8991, 382, 2710, 50914], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 329, "seek": 98900, "start": 1000.0, "end": 1004.0, "text": " and the rest of this is exactly identical to what we saw before.", "tokens": [50914, 293, 264, 1472, 295, 341, 307, 2293, 14800, 281, 437, 321, 1866, 949, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 330, "seek": 98900, "start": 1004.0, "end": 1006.0, "text": " So just a shorthand.", "tokens": [51114, 407, 445, 257, 402, 2652, 474, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 331, "seek": 98900, "start": 1006.0, "end": 1009.0, "text": " Don't get too tripped up over it, but it's going to be convenient for us", "tokens": [51214, 1468, 380, 483, 886, 1376, 3320, 493, 670, 309, 11, 457, 309, 311, 516, 281, 312, 10851, 337, 505, 51364], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 332, "seek": 98900, "start": 1009.0, "end": 1013.0, "text": " to be able to think conceptually of functions that take multiple arguments", "tokens": [51364, 281, 312, 1075, 281, 519, 3410, 671, 295, 6828, 300, 747, 3866, 12869, 51564], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 333, "seek": 98900, "start": 1013.0, "end": 1018.0, "text": " even though we know, we'll just keep that as a footnote, that they're all curried functions.", "tokens": [51564, 754, 1673, 321, 458, 11, 321, 603, 445, 1066, 300, 382, 257, 2671, 22178, 11, 300, 436, 434, 439, 1262, 2428, 6828, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07090470147511316, "compression_ratio": 1.6654929577464788, "no_speech_prob": 0.00017952364578377455}, {"id": 334, "seek": 101800, "start": 1018.0, "end": 1021.0, "text": " Are you ready for the next combinator?", "tokens": [50364, 2014, 291, 1919, 337, 264, 958, 2512, 31927, 30, 50514], "temperature": 0.0, "avg_logprob": -0.12011095193716195, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.00037997731124050915}, {"id": 335, "seek": 101800, "start": 1021.0, "end": 1024.0, "text": " Let's talk about the kestrel.", "tokens": [50514, 961, 311, 751, 466, 264, 350, 377, 4419, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12011095193716195, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.00037997731124050915}, {"id": 336, "seek": 101800, "start": 1024.0, "end": 1030.0, "text": " The kestrel takes an A and a B and it returns A.", "tokens": [50664, 440, 350, 377, 4419, 2516, 364, 316, 293, 257, 363, 293, 309, 11247, 316, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12011095193716195, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.00037997731124050915}, {"id": 337, "seek": 101800, "start": 1030.0, "end": 1035.0, "text": " Let's try that out.", "tokens": [50964, 961, 311, 853, 300, 484, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12011095193716195, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.00037997731124050915}, {"id": 338, "seek": 101800, "start": 1035.0, "end": 1039.0, "text": " Takes an A, takes a B, returns A.", "tokens": [51214, 44347, 364, 316, 11, 2516, 257, 363, 11, 11247, 316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12011095193716195, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.00037997731124050915}, {"id": 339, "seek": 101800, "start": 1039.0, "end": 1043.0, "text": " What is the kestrel of the identity in the mockingbird?", "tokens": [51414, 708, 307, 264, 350, 377, 4419, 295, 264, 6575, 294, 264, 49792, 18080, 30, 51614], "temperature": 0.0, "avg_logprob": -0.12011095193716195, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.00037997731124050915}, {"id": 340, "seek": 104300, "start": 1043.0, "end": 1046.0, "text": " Yeah.", "tokens": [50364, 865, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12563699915789175, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.00047283677849918604}, {"id": 341, "seek": 104300, "start": 1046.0, "end": 1051.0, "text": " What about the kestrel of the kestrel in the mockingbird?", "tokens": [50514, 708, 466, 264, 350, 377, 4419, 295, 264, 350, 377, 4419, 294, 264, 49792, 18080, 30, 50764], "temperature": 0.0, "avg_logprob": -0.12563699915789175, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.00047283677849918604}, {"id": 342, "seek": 104300, "start": 1051.0, "end": 1054.0, "text": " Right.", "tokens": [50764, 1779, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12563699915789175, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.00047283677849918604}, {"id": 343, "seek": 104300, "start": 1054.0, "end": 1058.0, "text": " It doesn't matter what the second thing is, it's irrelevant.", "tokens": [50914, 467, 1177, 380, 1871, 437, 264, 1150, 551, 307, 11, 309, 311, 28682, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12563699915789175, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.00047283677849918604}, {"id": 344, "seek": 104300, "start": 1058.0, "end": 1068.0, "text": " The kestrel just takes two things and returns the first one.", "tokens": [51114, 440, 350, 377, 4419, 445, 2516, 732, 721, 293, 11247, 264, 700, 472, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12563699915789175, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.00047283677849918604}, {"id": 345, "seek": 104300, "start": 1068.0, "end": 1072.0, "text": " So we just saw that here.", "tokens": [51614, 407, 321, 445, 1866, 300, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12563699915789175, "compression_ratio": 1.472972972972973, "no_speech_prob": 0.00047283677849918604}, {"id": 346, "seek": 107200, "start": 1072.0, "end": 1077.0, "text": " In Haskell, this is built into the base language as the const function.", "tokens": [50364, 682, 8646, 43723, 11, 341, 307, 3094, 666, 264, 3096, 2856, 382, 264, 1817, 2445, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 347, "seek": 107200, "start": 1077.0, "end": 1079.0, "text": " Why is it called const in Haskell?", "tokens": [50614, 1545, 307, 309, 1219, 1817, 294, 8646, 43723, 30, 50714], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 348, "seek": 107200, "start": 1079.0, "end": 1081.0, "text": " Let's try something interesting here.", "tokens": [50714, 961, 311, 853, 746, 1880, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 349, "seek": 107200, "start": 1081.0, "end": 1089.0, "text": " I'm going to say k5 is the function you get when you call k with only one of its arguments.", "tokens": [50814, 286, 478, 516, 281, 584, 350, 20, 307, 264, 2445, 291, 483, 562, 291, 818, 350, 365, 787, 472, 295, 1080, 12869, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 350, "seek": 107200, "start": 1089.0, "end": 1092.0, "text": " So normally the kestrel takes two arguments and gives you back the first one,", "tokens": [51214, 407, 5646, 264, 350, 377, 4419, 2516, 732, 12869, 293, 2709, 291, 646, 264, 700, 472, 11, 51364], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 351, "seek": 107200, "start": 1092.0, "end": 1095.0, "text": " but I'm only going to give it one of its arguments.", "tokens": [51364, 457, 286, 478, 787, 516, 281, 976, 309, 472, 295, 1080, 12869, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 352, "seek": 107200, "start": 1095.0, "end": 1101.0, "text": " Well, that's interesting, but these are curried functions, so I can give it another argument.", "tokens": [51514, 1042, 11, 300, 311, 1880, 11, 457, 613, 366, 1262, 2428, 6828, 11, 370, 286, 393, 976, 309, 1071, 6770, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06502444626855068, "compression_ratio": 1.796875, "no_speech_prob": 0.0044676512479782104}, {"id": 353, "seek": 110100, "start": 1101.0, "end": 1103.0, "text": " It gives me back the first thing.", "tokens": [50364, 467, 2709, 385, 646, 264, 700, 551, 13, 50464], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 354, "seek": 110100, "start": 1103.0, "end": 1105.0, "text": " I can also give it back some other argument.", "tokens": [50464, 286, 393, 611, 976, 309, 646, 512, 661, 6770, 13, 50564], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 355, "seek": 110100, "start": 1105.0, "end": 1107.0, "text": " It gives me back the first thing.", "tokens": [50564, 467, 2709, 385, 646, 264, 700, 551, 13, 50664], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 356, "seek": 110100, "start": 1107.0, "end": 1110.0, "text": " This is a function that's fixated on a particular value.", "tokens": [50664, 639, 307, 257, 2445, 300, 311, 3191, 770, 322, 257, 1729, 2158, 13, 50814], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 357, "seek": 110100, "start": 1110.0, "end": 1112.0, "text": " It's the constant five function.", "tokens": [50814, 467, 311, 264, 5754, 1732, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 358, "seek": 110100, "start": 1112.0, "end": 1118.0, "text": " No matter how I invoke this function, it always gives me back five.", "tokens": [50914, 883, 1871, 577, 286, 41117, 341, 2445, 11, 309, 1009, 2709, 385, 646, 1732, 13, 51214], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 359, "seek": 110100, "start": 1118.0, "end": 1121.0, "text": " That's why it's called const in Haskell.", "tokens": [51214, 663, 311, 983, 309, 311, 1219, 1817, 294, 8646, 43723, 13, 51364], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 360, "seek": 110100, "start": 1121.0, "end": 1124.0, "text": " But it's the k-combinator.", "tokens": [51364, 583, 309, 311, 264, 350, 12, 38763, 31927, 13, 51514], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 361, "seek": 110100, "start": 1124.0, "end": 1126.0, "text": " Here's a fun one.", "tokens": [51514, 1692, 311, 257, 1019, 472, 13, 51614], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 362, "seek": 110100, "start": 1126.0, "end": 1128.0, "text": " I really like this one.", "tokens": [51614, 286, 534, 411, 341, 472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.056114059945811395, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0008040463435463607}, {"id": 363, "seek": 112800, "start": 1128.0, "end": 1132.0, "text": " The kestrel of identity and some x is?", "tokens": [50364, 440, 350, 377, 4419, 295, 6575, 293, 512, 2031, 307, 30, 50564], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 364, "seek": 112800, "start": 1132.0, "end": 1133.0, "text": " Identity.", "tokens": [50564, 25905, 507, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 365, "seek": 112800, "start": 1133.0, "end": 1135.0, "text": " Identity, makes sense.", "tokens": [50614, 25905, 507, 11, 1669, 2020, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 366, "seek": 112800, "start": 1135.0, "end": 1137.0, "text": " This is an algebraic equality.", "tokens": [50714, 639, 307, 364, 21989, 299, 14949, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 367, "seek": 112800, "start": 1137.0, "end": 1141.0, "text": " The thing on the left is the thing on the right and vice versa.", "tokens": [50814, 440, 551, 322, 264, 1411, 307, 264, 551, 322, 264, 558, 293, 11964, 25650, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 368, "seek": 112800, "start": 1141.0, "end": 1144.0, "text": " Well, the thing on the right is a function.", "tokens": [51014, 1042, 11, 264, 551, 322, 264, 558, 307, 257, 2445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 369, "seek": 112800, "start": 1144.0, "end": 1149.0, "text": " And I know in the lambda calculus I'm allowed to apply functions to values.", "tokens": [51164, 400, 286, 458, 294, 264, 13607, 33400, 286, 478, 4350, 281, 3079, 6828, 281, 4190, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 370, "seek": 112800, "start": 1149.0, "end": 1151.0, "text": " So I apply this to y.", "tokens": [51414, 407, 286, 3079, 341, 281, 288, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 371, "seek": 112800, "start": 1151.0, "end": 1154.0, "text": " What do I get?", "tokens": [51514, 708, 360, 286, 483, 30, 51664], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 372, "seek": 112800, "start": 1154.0, "end": 1155.0, "text": " Yy.", "tokens": [51664, 398, 88, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 373, "seek": 112800, "start": 1155.0, "end": 1157.0, "text": " Y, that makes sense.", "tokens": [51714, 398, 11, 300, 1669, 2020, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1200326869362279, "compression_ratio": 1.6730769230769231, "no_speech_prob": 0.0013249160256236792}, {"id": 374, "seek": 115700, "start": 1157.0, "end": 1161.0, "text": " On the left side equals the middle side equals the right side.", "tokens": [50364, 1282, 264, 1411, 1252, 6915, 264, 2808, 1252, 6915, 264, 558, 1252, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 375, "seek": 115700, "start": 1161.0, "end": 1163.0, "text": " That means I can ignore the thing in the middle,", "tokens": [50564, 663, 1355, 286, 393, 11200, 264, 551, 294, 264, 2808, 11, 50664], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 376, "seek": 115700, "start": 1163.0, "end": 1165.0, "text": " and the thing on the left equals the thing on the right.", "tokens": [50664, 293, 264, 551, 322, 264, 1411, 6915, 264, 551, 322, 264, 558, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 377, "seek": 115700, "start": 1165.0, "end": 1168.0, "text": " Does anybody see where I'm going with this?", "tokens": [50764, 4402, 4472, 536, 689, 286, 478, 516, 365, 341, 30, 50914], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 378, "seek": 115700, "start": 1168.0, "end": 1174.0, "text": " I've got ki of x and y returns y.", "tokens": [50914, 286, 600, 658, 6315, 295, 2031, 293, 288, 11247, 288, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 379, "seek": 115700, "start": 1174.0, "end": 1180.0, "text": " Ki of a first argument and a second argument returns the second argument.", "tokens": [51214, 17459, 295, 257, 700, 6770, 293, 257, 1150, 6770, 11247, 264, 1150, 6770, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 380, "seek": 115700, "start": 1180.0, "end": 1185.0, "text": " I just derived the kite.", "tokens": [51514, 286, 445, 18949, 264, 38867, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0831458771482427, "compression_ratio": 1.8449197860962567, "no_speech_prob": 0.000939839577767998}, {"id": 381, "seek": 118500, "start": 1186.0, "end": 1191.0, "text": " The kite combinator takes two arguments.", "tokens": [50414, 440, 38867, 2512, 31927, 2516, 732, 12869, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 382, "seek": 118500, "start": 1191.0, "end": 1193.0, "text": " One and two.", "tokens": [50664, 1485, 293, 732, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 383, "seek": 118500, "start": 1193.0, "end": 1196.0, "text": " And it gives you back the second one.", "tokens": [50764, 400, 309, 2709, 291, 646, 264, 1150, 472, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 384, "seek": 118500, "start": 1196.0, "end": 1198.0, "text": " Now, I could have done this manually.", "tokens": [50914, 823, 11, 286, 727, 362, 1096, 341, 16945, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 385, "seek": 118500, "start": 1198.0, "end": 1204.0, "text": " I could have said the kite is a function that takes an a,", "tokens": [51014, 286, 727, 362, 848, 264, 38867, 307, 257, 2445, 300, 2516, 364, 257, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 386, "seek": 118500, "start": 1204.0, "end": 1208.0, "text": " and it takes a b, and it returns b.", "tokens": [51314, 293, 309, 2516, 257, 272, 11, 293, 309, 11247, 272, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 387, "seek": 118500, "start": 1208.0, "end": 1212.0, "text": " And then I would call the kite on something like four and nine,", "tokens": [51514, 400, 550, 286, 576, 818, 264, 38867, 322, 746, 411, 1451, 293, 4949, 11, 51714], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 388, "seek": 118500, "start": 1212.0, "end": 1214.0, "text": " and it gives me back nine.", "tokens": [51714, 293, 309, 2709, 385, 646, 4949, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09871497052781125, "compression_ratio": 1.6613756613756614, "no_speech_prob": 0.0009110080427490175}, {"id": 389, "seek": 121400, "start": 1214.0, "end": 1220.0, "text": " But it's cool to see that from these atomic combinators combined together,", "tokens": [50364, 583, 309, 311, 1627, 281, 536, 300, 490, 613, 22275, 38514, 3391, 9354, 1214, 11, 50664], "temperature": 0.0, "avg_logprob": -0.10983154296875, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.0003353254869580269}, {"id": 390, "seek": 121400, "start": 1220.0, "end": 1223.0, "text": " I get these new molecules, which are other combinators.", "tokens": [50664, 286, 483, 613, 777, 13093, 11, 597, 366, 661, 38514, 3391, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10983154296875, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.0003353254869580269}, {"id": 391, "seek": 121400, "start": 1223.0, "end": 1226.0, "text": " So some of my combinators can mix and match", "tokens": [50814, 407, 512, 295, 452, 38514, 3391, 393, 2890, 293, 2995, 50964], "temperature": 0.0, "avg_logprob": -0.10983154296875, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.0003353254869580269}, {"id": 392, "seek": 121400, "start": 1226.0, "end": 1231.0, "text": " and start producing other functions that are useful and interesting in different ways.", "tokens": [50964, 293, 722, 10501, 661, 6828, 300, 366, 4420, 293, 1880, 294, 819, 2098, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10983154296875, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.0003353254869580269}, {"id": 393, "seek": 121400, "start": 1231.0, "end": 1238.0, "text": " So ki of m and ki is?", "tokens": [51214, 407, 6315, 295, 275, 293, 6315, 307, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10983154296875, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.0003353254869580269}, {"id": 394, "seek": 121400, "start": 1238.0, "end": 1242.0, "text": " Yes.", "tokens": [51564, 1079, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10983154296875, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.0003353254869580269}, {"id": 395, "seek": 124200, "start": 1242.0, "end": 1245.0, "text": " So kite of the mockingbird in the Kestrel's castle.", "tokens": [50364, 407, 38867, 295, 264, 49792, 18080, 294, 264, 591, 377, 4419, 311, 14114, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 396, "seek": 124200, "start": 1245.0, "end": 1246.0, "text": " Flip them around.", "tokens": [50514, 28210, 552, 926, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 397, "seek": 124200, "start": 1246.0, "end": 1247.0, "text": " You get the other one.", "tokens": [50564, 509, 483, 264, 661, 472, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 398, "seek": 124200, "start": 1247.0, "end": 1249.0, "text": " So far, so good.", "tokens": [50614, 407, 1400, 11, 370, 665, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 399, "seek": 124200, "start": 1249.0, "end": 1252.0, "text": " At this point, probably some of you are wondering,", "tokens": [50714, 1711, 341, 935, 11, 1391, 512, 295, 291, 366, 6359, 11, 50864], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 400, "seek": 124200, "start": 1252.0, "end": 1254.0, "text": " what's with all the bird names?", "tokens": [50864, 437, 311, 365, 439, 264, 5255, 5288, 30, 50964], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 401, "seek": 124200, "start": 1254.0, "end": 1257.0, "text": " Got mockingbird, Kestrel, kite, et cetera.", "tokens": [50964, 5803, 49792, 18080, 11, 591, 377, 4419, 11, 38867, 11, 1030, 11458, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 402, "seek": 124200, "start": 1257.0, "end": 1258.0, "text": " All right.", "tokens": [51114, 1057, 558, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 403, "seek": 124200, "start": 1258.0, "end": 1261.0, "text": " So we're going to take a little mental break for a moment and talk about history.", "tokens": [51164, 407, 321, 434, 516, 281, 747, 257, 707, 4973, 1821, 337, 257, 1623, 293, 751, 466, 2503, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 404, "seek": 124200, "start": 1261.0, "end": 1264.0, "text": " Moses Eliachchenfinkel.", "tokens": [51314, 17580, 16943, 608, 2470, 5194, 7124, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 405, "seek": 124200, "start": 1264.0, "end": 1267.0, "text": " And I can't pronounce German, so please forgive me.", "tokens": [51464, 400, 286, 393, 380, 19567, 6521, 11, 370, 1767, 10718, 385, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 406, "seek": 124200, "start": 1267.0, "end": 1270.0, "text": " Name these things, long German names.", "tokens": [51614, 13866, 613, 721, 11, 938, 6521, 5288, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1886158410240622, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.0023584587033838034}, {"id": 407, "seek": 127000, "start": 1270.0, "end": 1275.0, "text": " Like Zussim et Setsum function.", "tokens": [50364, 1743, 1176, 2023, 332, 1030, 318, 1385, 449, 2445, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 408, "seek": 127000, "start": 1275.0, "end": 1278.0, "text": " Haskell B. Curry, who came a little bit later,", "tokens": [50614, 8646, 43723, 363, 13, 34789, 11, 567, 1361, 257, 707, 857, 1780, 11, 50764], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 409, "seek": 127000, "start": 1278.0, "end": 1282.0, "text": " used some of the same letters, but also some of his own letters,", "tokens": [50764, 1143, 512, 295, 264, 912, 7825, 11, 457, 611, 512, 295, 702, 1065, 7825, 11, 50964], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 410, "seek": 127000, "start": 1282.0, "end": 1284.0, "text": " just to add to the confusion.", "tokens": [50964, 445, 281, 909, 281, 264, 15075, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 411, "seek": 127000, "start": 1284.0, "end": 1289.0, "text": " And in the 1980s, a logician and puzzle author named Raymond Smullyan", "tokens": [51064, 400, 294, 264, 13626, 82, 11, 257, 3565, 9027, 293, 12805, 3793, 4926, 42813, 3915, 2150, 282, 51314], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 412, "seek": 127000, "start": 1289.0, "end": 1292.0, "text": " wrote this absolutely wonderful book to mock a mockingbird.", "tokens": [51314, 4114, 341, 3122, 3715, 1446, 281, 17362, 257, 49792, 18080, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 413, "seek": 127000, "start": 1292.0, "end": 1297.0, "text": " The whole back two thirds of which is about combinatorial logic.", "tokens": [51464, 440, 1379, 646, 732, 34552, 295, 597, 307, 466, 2512, 31927, 831, 9952, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18682887253252048, "compression_ratio": 1.5020408163265306, "no_speech_prob": 0.01540334802120924}, {"id": 414, "seek": 129700, "start": 1297.0, "end": 1302.0, "text": " And Smullyan took Curry's combinator names and turned them into birds.", "tokens": [50364, 400, 3915, 2150, 282, 1890, 34789, 311, 2512, 31927, 5288, 293, 3574, 552, 666, 9009, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06033927650861843, "compression_ratio": 1.6972477064220184, "no_speech_prob": 0.003074148204177618}, {"id": 415, "seek": 129700, "start": 1302.0, "end": 1307.0, "text": " And the reason is because the book doesn't lay a lot of emphasis", "tokens": [50614, 400, 264, 1778, 307, 570, 264, 1446, 1177, 380, 2360, 257, 688, 295, 16271, 50864], "temperature": 0.0, "avg_logprob": -0.06033927650861843, "compression_ratio": 1.6972477064220184, "no_speech_prob": 0.003074148204177618}, {"id": 416, "seek": 129700, "start": 1307.0, "end": 1310.0, "text": " on the math from a formal perspective.", "tokens": [50864, 322, 264, 5221, 490, 257, 9860, 4585, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06033927650861843, "compression_ratio": 1.6972477064220184, "no_speech_prob": 0.003074148204177618}, {"id": 417, "seek": 129700, "start": 1310.0, "end": 1314.0, "text": " Instead, it uses this metaphor of birds in a forest", "tokens": [51014, 7156, 11, 309, 4960, 341, 19157, 295, 9009, 294, 257, 6719, 51214], "temperature": 0.0, "avg_logprob": -0.06033927650861843, "compression_ratio": 1.6972477064220184, "no_speech_prob": 0.003074148204177618}, {"id": 418, "seek": 129700, "start": 1314.0, "end": 1319.0, "text": " who hear the songs of other birds and sing back the names of other birds.", "tokens": [51214, 567, 1568, 264, 5781, 295, 661, 9009, 293, 1522, 646, 264, 5288, 295, 661, 9009, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06033927650861843, "compression_ratio": 1.6972477064220184, "no_speech_prob": 0.003074148204177618}, {"id": 419, "seek": 129700, "start": 1319.0, "end": 1323.0, "text": " So birds creating birds and singing birds and all this kind of stuff.", "tokens": [51464, 407, 9009, 4084, 9009, 293, 6726, 9009, 293, 439, 341, 733, 295, 1507, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06033927650861843, "compression_ratio": 1.6972477064220184, "no_speech_prob": 0.003074148204177618}, {"id": 420, "seek": 132300, "start": 1324.0, "end": 1328.0, "text": " Now, unfortunately, Smullyan called the identity combinator the idiot bird.", "tokens": [50414, 823, 11, 7015, 11, 3915, 2150, 282, 1219, 264, 6575, 2512, 31927, 264, 14270, 5255, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 421, "seek": 132300, "start": 1328.0, "end": 1330.0, "text": " I wish that he had used the ibis.", "tokens": [50614, 286, 3172, 300, 415, 632, 1143, 264, 39073, 271, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 422, "seek": 132300, "start": 1330.0, "end": 1334.0, "text": " I used the ibis in my first slide, but we'll forgive him", "tokens": [50714, 286, 1143, 264, 39073, 271, 294, 452, 700, 4137, 11, 457, 321, 603, 10718, 796, 50914], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 423, "seek": 132300, "start": 1334.0, "end": 1337.0, "text": " because the rest of the book is just so wonderful.", "tokens": [50914, 570, 264, 1472, 295, 264, 1446, 307, 445, 370, 3715, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 424, "seek": 132300, "start": 1337.0, "end": 1340.0, "text": " Now, he didn't do this totally for no reason.", "tokens": [51064, 823, 11, 415, 994, 380, 360, 341, 3879, 337, 572, 1778, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 425, "seek": 132300, "start": 1340.0, "end": 1345.0, "text": " He actually did it to honor Curry because Curry was himself an avid bird watcher.", "tokens": [51214, 634, 767, 630, 309, 281, 5968, 34789, 570, 34789, 390, 3647, 364, 1305, 327, 5255, 1159, 260, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 426, "seek": 132300, "start": 1345.0, "end": 1350.0, "text": " And at this point, some of you are thinking, Haskell Curry, who's this guy?", "tokens": [51464, 400, 412, 341, 935, 11, 512, 295, 291, 366, 1953, 11, 8646, 43723, 34789, 11, 567, 311, 341, 2146, 30, 51714], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 427, "seek": 132300, "start": 1350.0, "end": 1352.0, "text": " Why do we care about him?", "tokens": [51714, 1545, 360, 321, 1127, 466, 796, 30, 51814], "temperature": 0.0, "avg_logprob": -0.09279745207058163, "compression_ratio": 1.5964285714285715, "no_speech_prob": 0.0023962652776390314}, {"id": 428, "seek": 135200, "start": 1352.0, "end": 1355.0, "text": " I'm not Sean Finkel or vice versa.", "tokens": [50364, 286, 478, 406, 14839, 3773, 7124, 420, 11964, 25650, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 429, "seek": 135200, "start": 1355.0, "end": 1360.0, "text": " So the next slide is the anti-diversity slide.", "tokens": [50514, 407, 264, 958, 4137, 307, 264, 6061, 12, 67, 2550, 4137, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 430, "seek": 135200, "start": 1360.0, "end": 1364.0, "text": " This is just the historical nature of mathematics in the 20s and 30s.", "tokens": [50764, 639, 307, 445, 264, 8584, 3687, 295, 18666, 294, 264, 945, 82, 293, 2217, 82, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 431, "seek": 135200, "start": 1364.0, "end": 1366.0, "text": " It was filled with a lot of white men.", "tokens": [50964, 467, 390, 6412, 365, 257, 688, 295, 2418, 1706, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 432, "seek": 135200, "start": 1366.0, "end": 1369.0, "text": " So we'll acknowledge that and move on.", "tokens": [51064, 407, 321, 603, 10692, 300, 293, 1286, 322, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 433, "seek": 135200, "start": 1369.0, "end": 1372.0, "text": " But I'm going to give you a really fast crash course", "tokens": [51214, 583, 286, 478, 516, 281, 976, 291, 257, 534, 2370, 8252, 1164, 51364], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 434, "seek": 135200, "start": 1372.0, "end": 1374.0, "text": " in the formalization of mathematical logic.", "tokens": [51364, 294, 264, 9860, 2144, 295, 18894, 9952, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 435, "seek": 135200, "start": 1374.0, "end": 1378.0, "text": " Around the late 19th century, early 20th century,", "tokens": [51464, 17633, 264, 3469, 1294, 392, 4901, 11, 2440, 945, 392, 4901, 11, 51664], "temperature": 0.0, "avg_logprob": -0.07120361060739677, "compression_ratio": 1.5346938775510204, "no_speech_prob": 0.0004801661125384271}, {"id": 436, "seek": 137800, "start": 1378.0, "end": 1382.0, "text": " people were realizing that math, which had seemed on the face of it", "tokens": [50364, 561, 645, 16734, 300, 5221, 11, 597, 632, 6576, 322, 264, 1851, 295, 309, 50564], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 437, "seek": 137800, "start": 1382.0, "end": 1387.0, "text": " so cut and dried and straightforward, was hiding some really nasty paradoxes.", "tokens": [50564, 370, 1723, 293, 13538, 293, 15325, 11, 390, 10596, 512, 534, 17923, 26221, 279, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 438, "seek": 137800, "start": 1387.0, "end": 1390.0, "text": " And so people were trying to unify mathematics and figure out", "tokens": [50814, 400, 370, 561, 645, 1382, 281, 517, 2505, 18666, 293, 2573, 484, 50964], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 439, "seek": 137800, "start": 1390.0, "end": 1395.0, "text": " the sufficient axioms that would define all of mathematics in one big tone.", "tokens": [50964, 264, 11563, 6360, 72, 4785, 300, 576, 6964, 439, 295, 18666, 294, 472, 955, 8027, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 440, "seek": 137800, "start": 1395.0, "end": 1398.0, "text": " So what was like the real, true system of math?", "tokens": [51214, 407, 437, 390, 411, 264, 957, 11, 2074, 1185, 295, 5221, 30, 51364], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 441, "seek": 137800, "start": 1398.0, "end": 1400.0, "text": " Bless you.", "tokens": [51364, 21562, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 442, "seek": 137800, "start": 1400.0, "end": 1402.0, "text": " So I'm going to race through this.", "tokens": [51464, 407, 286, 478, 516, 281, 4569, 807, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 443, "seek": 137800, "start": 1402.0, "end": 1403.0, "text": " I could do an entire presentation.", "tokens": [51564, 286, 727, 360, 364, 2302, 5860, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 444, "seek": 137800, "start": 1403.0, "end": 1405.0, "text": " That would be two hours on just this.", "tokens": [51614, 663, 576, 312, 732, 2496, 322, 445, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0806440695738181, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.011681641452014446}, {"id": 445, "seek": 140500, "start": 1405.0, "end": 1409.0, "text": " I'm going to try and keep it to less than five minutes.", "tokens": [50364, 286, 478, 516, 281, 853, 293, 1066, 309, 281, 1570, 813, 1732, 2077, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07589476999610362, "compression_ratio": 1.9317073170731707, "no_speech_prob": 0.008442257530987263}, {"id": 446, "seek": 140500, "start": 1409.0, "end": 1414.0, "text": " In 89, Giuseppe Piano invents his own formal notation for function abstraction.", "tokens": [50564, 682, 31877, 11, 15334, 438, 19833, 430, 6254, 1048, 791, 702, 1065, 9860, 24657, 337, 2445, 37765, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07589476999610362, "compression_ratio": 1.9317073170731707, "no_speech_prob": 0.008442257530987263}, {"id": 447, "seek": 140500, "start": 1414.0, "end": 1419.0, "text": " He also defines arithmetic as the sequence of natural numbers starting from zero,", "tokens": [50814, 634, 611, 23122, 42973, 382, 264, 8310, 295, 3303, 3547, 2891, 490, 4018, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07589476999610362, "compression_ratio": 1.9317073170731707, "no_speech_prob": 0.008442257530987263}, {"id": 448, "seek": 140500, "start": 1419.0, "end": 1423.0, "text": " and then the successor of zero, and then the successor of successor of zero,", "tokens": [51064, 293, 550, 264, 31864, 295, 4018, 11, 293, 550, 264, 31864, 295, 31864, 295, 4018, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07589476999610362, "compression_ratio": 1.9317073170731707, "no_speech_prob": 0.008442257530987263}, {"id": 449, "seek": 140500, "start": 1423.0, "end": 1426.0, "text": " and the successor of successor of successor of zero, and so on and so forth.", "tokens": [51264, 293, 264, 31864, 295, 31864, 295, 31864, 295, 4018, 11, 293, 370, 322, 293, 370, 5220, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07589476999610362, "compression_ratio": 1.9317073170731707, "no_speech_prob": 0.008442257530987263}, {"id": 450, "seek": 140500, "start": 1426.0, "end": 1429.0, "text": " These are Piano numbers.", "tokens": [51414, 1981, 366, 430, 6254, 3547, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07589476999610362, "compression_ratio": 1.9317073170731707, "no_speech_prob": 0.008442257530987263}, {"id": 451, "seek": 142900, "start": 1429.0, "end": 1435.0, "text": " The logician Gottlob Frege develops his own function notation,", "tokens": [50364, 440, 3565, 9027, 19133, 752, 65, 6142, 432, 25453, 702, 1065, 2445, 24657, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 452, "seek": 142900, "start": 1435.0, "end": 1437.0, "text": " which uses this really unique graph format.", "tokens": [50664, 597, 4960, 341, 534, 3845, 4295, 7877, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 453, "seek": 142900, "start": 1437.0, "end": 1439.0, "text": " It's actually really cool to say.", "tokens": [50764, 467, 311, 767, 534, 1627, 281, 584, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 454, "seek": 142900, "start": 1439.0, "end": 1441.0, "text": " Impossible to read.", "tokens": [50864, 36808, 281, 1401, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 455, "seek": 142900, "start": 1441.0, "end": 1446.0, "text": " But a good idea, a good idea which has better versions that come later.", "tokens": [50964, 583, 257, 665, 1558, 11, 257, 665, 1558, 597, 575, 1101, 9606, 300, 808, 1780, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 456, "seek": 142900, "start": 1446.0, "end": 1451.0, "text": " And most famously, he basically invents quantified axiomatic logic.", "tokens": [51214, 400, 881, 34360, 11, 415, 1936, 1048, 791, 4426, 2587, 6360, 72, 13143, 9952, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 457, "seek": 142900, "start": 1451.0, "end": 1455.0, "text": " So this is the kind of sentence like, for all x in the reals,", "tokens": [51464, 407, 341, 307, 264, 733, 295, 8174, 411, 11, 337, 439, 2031, 294, 264, 957, 82, 11, 51664], "temperature": 0.0, "avg_logprob": -0.08995006522353814, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.007812882773578167}, {"id": 458, "seek": 145500, "start": 1455.0, "end": 1459.0, "text": " there exists a y in the reals such that y is greater than x.", "tokens": [50364, 456, 8198, 257, 288, 294, 264, 957, 82, 1270, 300, 288, 307, 5044, 813, 2031, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 459, "seek": 145500, "start": 1459.0, "end": 1462.0, "text": " For all, and there exists.", "tokens": [50564, 1171, 439, 11, 293, 456, 8198, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 460, "seek": 145500, "start": 1462.0, "end": 1466.0, "text": " That's the quantification and quantified axiomatic logic.", "tokens": [50714, 663, 311, 264, 4426, 3774, 293, 4426, 2587, 6360, 72, 13143, 9952, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 461, "seek": 145500, "start": 1466.0, "end": 1471.0, "text": " By the way, Frege, even in 1891, was using curried functions.", "tokens": [50914, 3146, 264, 636, 11, 6142, 432, 11, 754, 294, 2443, 29925, 11, 390, 1228, 1262, 2428, 6828, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 462, "seek": 145500, "start": 1471.0, "end": 1476.0, "text": " In the 1910s, Bertrand Russell, along with Whitehead,", "tokens": [51164, 682, 264, 1294, 3279, 82, 11, 29594, 3699, 20937, 11, 2051, 365, 5552, 1934, 11, 51414], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 463, "seek": 145500, "start": 1476.0, "end": 1478.0, "text": " very famously published Principia Mathematica,", "tokens": [51414, 588, 34360, 6572, 32832, 654, 15776, 8615, 2262, 11, 51514], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 464, "seek": 145500, "start": 1478.0, "end": 1481.0, "text": " an attempt at formalizing all math,", "tokens": [51514, 364, 5217, 412, 9860, 3319, 439, 5221, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10426937365064434, "compression_ratio": 1.4638297872340424, "no_speech_prob": 0.002182380296289921}, {"id": 465, "seek": 148100, "start": 1481.0, "end": 1485.0, "text": " but he also discovered earlier than that, actually, Russell's paradox,", "tokens": [50364, 457, 415, 611, 6941, 3071, 813, 300, 11, 767, 11, 20937, 311, 26221, 11, 50564], "temperature": 0.0, "avg_logprob": -0.09072824624868539, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.0025900225155055523}, {"id": 466, "seek": 148100, "start": 1485.0, "end": 1489.0, "text": " the thing of all sets that do not contain themselves.", "tokens": [50564, 264, 551, 295, 439, 6352, 300, 360, 406, 5304, 2969, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09072824624868539, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.0025900225155055523}, {"id": 467, "seek": 148100, "start": 1489.0, "end": 1492.0, "text": " Well, is that set in itself or not?", "tokens": [50764, 1042, 11, 307, 300, 992, 294, 2564, 420, 406, 30, 50914], "temperature": 0.0, "avg_logprob": -0.09072824624868539, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.0025900225155055523}, {"id": 468, "seek": 148100, "start": 1492.0, "end": 1495.0, "text": " It's a paradox. It's impossible to figure out.", "tokens": [50914, 467, 311, 257, 26221, 13, 467, 311, 6243, 281, 2573, 484, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09072824624868539, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.0025900225155055523}, {"id": 469, "seek": 148100, "start": 1495.0, "end": 1500.0, "text": " So that made a lot of people really disconcerted,", "tokens": [51064, 407, 300, 1027, 257, 688, 295, 561, 534, 717, 1671, 48999, 292, 11, 51314], "temperature": 0.0, "avg_logprob": -0.09072824624868539, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.0025900225155055523}, {"id": 470, "seek": 148100, "start": 1500.0, "end": 1507.0, "text": " and they realized that math wasn't quite so perfect in its foundations as first thought.", "tokens": [51314, 293, 436, 5334, 300, 5221, 2067, 380, 1596, 370, 2176, 294, 1080, 22467, 382, 700, 1194, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09072824624868539, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.0025900225155055523}, {"id": 471, "seek": 150700, "start": 1507.0, "end": 1511.0, "text": " Schoen Finkl, we talked about, he was an early pioneer in combinatorial logic.", "tokens": [50364, 2065, 78, 268, 479, 475, 75, 11, 321, 2825, 466, 11, 415, 390, 364, 2440, 37668, 294, 2512, 31927, 831, 9952, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 472, "seek": 150700, "start": 1511.0, "end": 1516.0, "text": " He also used currying and published one paper, and then it was really sad, actually.", "tokens": [50564, 634, 611, 1143, 1262, 19076, 293, 6572, 472, 3035, 11, 293, 550, 309, 390, 534, 4227, 11, 767, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 473, "seek": 150700, "start": 1516.0, "end": 1519.0, "text": " The rest of his life really spiraled downhill.", "tokens": [50814, 440, 1472, 295, 702, 993, 534, 10733, 5573, 29929, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 474, "seek": 150700, "start": 1519.0, "end": 1524.0, "text": " He ended up in a mental asylum, which don't worry,", "tokens": [50964, 634, 4590, 493, 294, 257, 4973, 31601, 11, 597, 500, 380, 3292, 11, 51214], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 475, "seek": 150700, "start": 1524.0, "end": 1529.0, "text": " it's not because of combinatorial logic, I don't think.", "tokens": [51214, 309, 311, 406, 570, 295, 2512, 31927, 831, 9952, 11, 286, 500, 380, 519, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 476, "seek": 150700, "start": 1529.0, "end": 1533.0, "text": " Van Neumann, famous mathematician, also later in life,", "tokens": [51464, 8979, 1734, 449, 969, 11, 4618, 48281, 11, 611, 1780, 294, 993, 11, 51664], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 477, "seek": 150700, "start": 1533.0, "end": 1536.0, "text": " helped build the first real electric computers.", "tokens": [51664, 4254, 1322, 264, 700, 957, 5210, 10807, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13970583882825127, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.0035358432214707136}, {"id": 478, "seek": 153600, "start": 1536.0, "end": 1541.0, "text": " He also kind of did something that, if you reinterpret it, it's combinatorial logic,", "tokens": [50364, 634, 611, 733, 295, 630, 746, 300, 11, 498, 291, 319, 41935, 309, 11, 309, 311, 2512, 31927, 831, 9952, 11, 50614], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 479, "seek": 153600, "start": 1541.0, "end": 1545.0, "text": " but that was almost by accident, like that wasn't his goal in life.", "tokens": [50614, 457, 300, 390, 1920, 538, 6398, 11, 411, 300, 2067, 380, 702, 3387, 294, 993, 13, 50814], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 480, "seek": 153600, "start": 1545.0, "end": 1549.0, "text": " And then in 26, Haskell Curry starts reinventing combinatorial logic.", "tokens": [50814, 400, 550, 294, 7551, 11, 8646, 43723, 34789, 3719, 33477, 278, 2512, 31927, 831, 9952, 13, 51014], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 481, "seek": 153600, "start": 1549.0, "end": 1552.0, "text": " He wasn't aware of Schoen Finkl or Frege, well, he was aware of Frege,", "tokens": [51014, 634, 2067, 380, 3650, 295, 2065, 78, 268, 479, 475, 75, 420, 6142, 432, 11, 731, 11, 415, 390, 3650, 295, 6142, 432, 11, 51164], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 482, "seek": 153600, "start": 1552.0, "end": 1555.0, "text": " but not any kind of link to combinatorics.", "tokens": [51164, 457, 406, 604, 733, 295, 2113, 281, 2512, 31927, 1167, 13, 51314], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 483, "seek": 153600, "start": 1555.0, "end": 1558.0, "text": " And so he does a whole bunch of contributions.", "tokens": [51314, 400, 370, 415, 775, 257, 1379, 3840, 295, 15725, 13, 51464], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 484, "seek": 153600, "start": 1558.0, "end": 1565.0, "text": " He's a really smart guy at Princeton, and in 1927, he discovers that Schoen Finkl beat him to the punch.", "tokens": [51464, 634, 311, 257, 534, 4069, 2146, 412, 36592, 11, 293, 294, 1294, 10076, 11, 415, 44522, 300, 2065, 78, 268, 479, 475, 75, 4224, 796, 281, 264, 8135, 13, 51814], "temperature": 0.0, "avg_logprob": -0.078851106283548, "compression_ratio": 1.6885813148788926, "no_speech_prob": 0.0016479603946208954}, {"id": 485, "seek": 156500, "start": 1565.0, "end": 1569.0, "text": " So he forges on nonetheless, which is good for us,", "tokens": [50364, 407, 415, 337, 2880, 322, 26756, 11, 597, 307, 665, 337, 505, 11, 50564], "temperature": 0.0, "avg_logprob": -0.12491379570715207, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0020180479623377323}, {"id": 486, "seek": 156500, "start": 1569.0, "end": 1572.0, "text": " because he develops many, many new theorems.", "tokens": [50564, 570, 415, 25453, 867, 11, 867, 777, 10299, 2592, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12491379570715207, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0020180479623377323}, {"id": 487, "seek": 156500, "start": 1572.0, "end": 1578.0, "text": " In 1931, Cort Godot, very famous mathematician,", "tokens": [50714, 682, 1294, 12967, 11, 28522, 1265, 310, 11, 588, 4618, 48281, 11, 51014], "temperature": 0.0, "avg_logprob": -0.12491379570715207, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0020180479623377323}, {"id": 488, "seek": 156500, "start": 1578.0, "end": 1582.0, "text": " who kind of plunged a dagger into the very heart of math,", "tokens": [51014, 567, 733, 295, 37663, 292, 257, 36972, 666, 264, 588, 1917, 295, 5221, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12491379570715207, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0020180479623377323}, {"id": 489, "seek": 156500, "start": 1582.0, "end": 1589.0, "text": " discovers that this race in search for the perfect set of foundations for math is fundamentally flawed.", "tokens": [51214, 44522, 300, 341, 4569, 294, 3164, 337, 264, 2176, 992, 295, 22467, 337, 5221, 307, 17879, 38823, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12491379570715207, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0020180479623377323}, {"id": 490, "seek": 156500, "start": 1589.0, "end": 1593.0, "text": " It's a fool's errand, it's impossible, it's literally impossible,", "tokens": [51564, 467, 311, 257, 7979, 311, 45810, 11, 309, 311, 6243, 11, 309, 311, 3736, 6243, 11, 51764], "temperature": 0.0, "avg_logprob": -0.12491379570715207, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.0020180479623377323}, {"id": 491, "seek": 159300, "start": 1593.0, "end": 1599.0, "text": " because every complicated enough system to be interesting by a certain definition of interesting,", "tokens": [50364, 570, 633, 6179, 1547, 1185, 281, 312, 1880, 538, 257, 1629, 7123, 295, 1880, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 492, "seek": 159300, "start": 1599.0, "end": 1605.0, "text": " such as piano numbers, is either inconsistent or incomplete.", "tokens": [50664, 1270, 382, 9211, 3547, 11, 307, 2139, 36891, 420, 31709, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 493, "seek": 159300, "start": 1605.0, "end": 1609.0, "text": " That means there's either logical inconsistencies which make it make no sense,", "tokens": [50964, 663, 1355, 456, 311, 2139, 14978, 22039, 4821, 4629, 597, 652, 309, 652, 572, 2020, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 494, "seek": 159300, "start": 1609.0, "end": 1614.0, "text": " or there are systems and things inside that language which you can talk about,", "tokens": [51164, 420, 456, 366, 3652, 293, 721, 1854, 300, 2856, 597, 291, 393, 751, 466, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 495, "seek": 159300, "start": 1614.0, "end": 1616.0, "text": " but you can't prove or disprove.", "tokens": [51414, 457, 291, 393, 380, 7081, 420, 717, 46955, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 496, "seek": 159300, "start": 1616.0, "end": 1618.0, "text": " There's no way to get to the proof or disprove.", "tokens": [51514, 821, 311, 572, 636, 281, 483, 281, 264, 8177, 420, 717, 46955, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 497, "seek": 159300, "start": 1618.0, "end": 1621.0, "text": " That totally upends math as we know it.", "tokens": [51614, 663, 3879, 493, 2581, 5221, 382, 321, 458, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07281560443696522, "compression_ratio": 1.7410358565737052, "no_speech_prob": 0.01132740918546915}, {"id": 498, "seek": 162100, "start": 1622.0, "end": 1628.0, "text": " In the 30s, Alonzo Church is trying to figure out a system that's at least good enough", "tokens": [50414, 682, 264, 2217, 82, 11, 967, 266, 4765, 7882, 307, 1382, 281, 2573, 484, 257, 1185, 300, 311, 412, 1935, 665, 1547, 50714], "temperature": 0.0, "avg_logprob": -0.12142071723937989, "compression_ratio": 1.5748031496062993, "no_speech_prob": 0.0013666318263858557}, {"id": 499, "seek": 162100, "start": 1628.0, "end": 1632.0, "text": " to compute things that are computable in some definition of computable,", "tokens": [50714, 281, 14722, 721, 300, 366, 2807, 712, 294, 512, 7123, 295, 2807, 712, 11, 50914], "temperature": 0.0, "avg_logprob": -0.12142071723937989, "compression_ratio": 1.5748031496062993, "no_speech_prob": 0.0013666318263858557}, {"id": 500, "seek": 162100, "start": 1632.0, "end": 1636.0, "text": " and he develops this thing that we've been talking about the whole time, lambda calculus,", "tokens": [50914, 293, 415, 25453, 341, 551, 300, 321, 600, 668, 1417, 466, 264, 1379, 565, 11, 13607, 33400, 11, 51114], "temperature": 0.0, "avg_logprob": -0.12142071723937989, "compression_ratio": 1.5748031496062993, "no_speech_prob": 0.0013666318263858557}, {"id": 501, "seek": 162100, "start": 1636.0, "end": 1639.0, "text": " this notation system for writing down functions.", "tokens": [51114, 341, 24657, 1185, 337, 3579, 760, 6828, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12142071723937989, "compression_ratio": 1.5748031496062993, "no_speech_prob": 0.0013666318263858557}, {"id": 502, "seek": 162100, "start": 1639.0, "end": 1647.0, "text": " Now, it's this tiny, tiny language, and at first, his grad students such as Stephen Klaney and Rosser,", "tokens": [51264, 823, 11, 309, 311, 341, 5870, 11, 5870, 2856, 11, 293, 412, 700, 11, 702, 2771, 1731, 1270, 382, 13391, 16053, 40584, 293, 16140, 260, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12142071723937989, "compression_ratio": 1.5748031496062993, "no_speech_prob": 0.0013666318263858557}, {"id": 503, "seek": 164700, "start": 1648.0, "end": 1652.0, "text": " they think that it's not going to really lead too much, like it's just a notation system,", "tokens": [50414, 436, 519, 300, 309, 311, 406, 516, 281, 534, 1477, 886, 709, 11, 411, 309, 311, 445, 257, 24657, 1185, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10400698206446192, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00048780854558572173}, {"id": 504, "seek": 164700, "start": 1652.0, "end": 1655.0, "text": " but then they start to realize like it's ballooning outwards,", "tokens": [50614, 457, 550, 436, 722, 281, 4325, 411, 309, 311, 16994, 278, 484, 2015, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10400698206446192, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00048780854558572173}, {"id": 505, "seek": 164700, "start": 1655.0, "end": 1660.0, "text": " and it's from this very tiny bit of logic is coming all sorts of interesting results.", "tokens": [50764, 293, 309, 311, 490, 341, 588, 5870, 857, 295, 9952, 307, 1348, 439, 7527, 295, 1880, 3542, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10400698206446192, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00048780854558572173}, {"id": 506, "seek": 164700, "start": 1660.0, "end": 1666.0, "text": " They also prove different versions of it are consistent or inconsistent.", "tokens": [51014, 814, 611, 7081, 819, 9606, 295, 309, 366, 8398, 420, 36891, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10400698206446192, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00048780854558572173}, {"id": 507, "seek": 164700, "start": 1666.0, "end": 1673.0, "text": " Stephen Klaney, by the way, goes on later in life to invent this thing that we use all the time called regular expressions,", "tokens": [51314, 13391, 16053, 40584, 11, 538, 264, 636, 11, 1709, 322, 1780, 294, 993, 281, 7962, 341, 551, 300, 321, 764, 439, 264, 565, 1219, 3890, 15277, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10400698206446192, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00048780854558572173}, {"id": 508, "seek": 164700, "start": 1673.0, "end": 1676.0, "text": " so that's fun.", "tokens": [51664, 370, 300, 311, 1019, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10400698206446192, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00048780854558572173}, {"id": 509, "seek": 167600, "start": 1676.0, "end": 1684.0, "text": " In 1936, Alonzo Church solves a famous unsolved problem, David Hilbert's decision problem.", "tokens": [50364, 682, 1294, 11309, 11, 967, 266, 4765, 7882, 39890, 257, 4618, 2693, 29110, 1154, 11, 4389, 19914, 4290, 311, 3537, 1154, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10841255367926832, "compression_ratio": 1.5219123505976095, "no_speech_prob": 0.0008557772962376475}, {"id": 510, "seek": 167600, "start": 1684.0, "end": 1689.0, "text": " This is an algorithm problem that says like, well, actually, I can't remember the specifics,", "tokens": [50764, 639, 307, 364, 9284, 1154, 300, 1619, 411, 11, 731, 11, 767, 11, 286, 393, 380, 1604, 264, 28454, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10841255367926832, "compression_ratio": 1.5219123505976095, "no_speech_prob": 0.0008557772962376475}, {"id": 511, "seek": 167600, "start": 1689.0, "end": 1691.0, "text": " but it's, let me see.", "tokens": [51014, 457, 309, 311, 11, 718, 385, 536, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10841255367926832, "compression_ratio": 1.5219123505976095, "no_speech_prob": 0.0008557772962376475}, {"id": 512, "seek": 167600, "start": 1691.0, "end": 1695.0, "text": " Oh, is there a way to figure out if any given problem does have a solution,", "tokens": [51114, 876, 11, 307, 456, 257, 636, 281, 2573, 484, 498, 604, 2212, 1154, 775, 362, 257, 3827, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10841255367926832, "compression_ratio": 1.5219123505976095, "no_speech_prob": 0.0008557772962376475}, {"id": 513, "seek": 167600, "start": 1695.0, "end": 1698.0, "text": " very closely related to, but distinct from the halting problem?", "tokens": [51314, 588, 8185, 4077, 281, 11, 457, 10644, 490, 264, 7523, 783, 1154, 30, 51464], "temperature": 0.0, "avg_logprob": -0.10841255367926832, "compression_ratio": 1.5219123505976095, "no_speech_prob": 0.0008557772962376475}, {"id": 514, "seek": 167600, "start": 1698.0, "end": 1702.0, "text": " And Church is like, no, there isn't.", "tokens": [51464, 400, 7882, 307, 411, 11, 572, 11, 456, 1943, 380, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10841255367926832, "compression_ratio": 1.5219123505976095, "no_speech_prob": 0.0008557772962376475}, {"id": 515, "seek": 170200, "start": 1702.0, "end": 1709.0, "text": " But he uses the lambda calculus to solve it, which was hilarious because it started out as three or four lines of notation,", "tokens": [50364, 583, 415, 4960, 264, 13607, 33400, 281, 5039, 309, 11, 597, 390, 19796, 570, 309, 1409, 484, 382, 1045, 420, 1451, 3876, 295, 24657, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07079148710819713, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.00034597376361489296}, {"id": 516, "seek": 170200, "start": 1709.0, "end": 1715.0, "text": " and it turned into a system complicated enough to solve this famous unsolved problem.", "tokens": [50714, 293, 309, 3574, 666, 257, 1185, 6179, 1547, 281, 5039, 341, 4618, 2693, 29110, 1154, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07079148710819713, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.00034597376361489296}, {"id": 517, "seek": 170200, "start": 1715.0, "end": 1717.0, "text": " Guess what also happens in 1936?", "tokens": [51014, 17795, 437, 611, 2314, 294, 1294, 11309, 30, 51114], "temperature": 0.0, "avg_logprob": -0.07079148710819713, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.00034597376361489296}, {"id": 518, "seek": 170200, "start": 1717.0, "end": 1721.0, "text": " Two months later, Alon Turing solves the problem using something called a Turing machine,", "tokens": [51114, 4453, 2493, 1780, 11, 967, 266, 314, 1345, 39890, 264, 1154, 1228, 746, 1219, 257, 314, 1345, 3479, 11, 51314], "temperature": 0.0, "avg_logprob": -0.07079148710819713, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.00034597376361489296}, {"id": 519, "seek": 170200, "start": 1721.0, "end": 1726.0, "text": " and he publishes his own paper, and then he finds out that Church beat him to the punch by two months,", "tokens": [51314, 293, 415, 11374, 279, 702, 1065, 3035, 11, 293, 550, 415, 10704, 484, 300, 7882, 4224, 796, 281, 264, 8135, 538, 732, 2493, 11, 51564], "temperature": 0.0, "avg_logprob": -0.07079148710819713, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.00034597376361489296}, {"id": 520, "seek": 170200, "start": 1726.0, "end": 1728.0, "text": " and he gets really annoyed by that.", "tokens": [51564, 293, 415, 2170, 534, 25921, 538, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07079148710819713, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.00034597376361489296}, {"id": 521, "seek": 172800, "start": 1728.0, "end": 1732.0, "text": " He was actually quite disappointed to find out that someone else had raced him", "tokens": [50364, 634, 390, 767, 1596, 13856, 281, 915, 484, 300, 1580, 1646, 632, 367, 3839, 796, 50564], "temperature": 0.0, "avg_logprob": -0.08565399102997362, "compression_ratio": 1.6725352112676057, "no_speech_prob": 0.002714769449084997}, {"id": 522, "seek": 172800, "start": 1732.0, "end": 1735.0, "text": " and beat him to solving the decision problem.", "tokens": [50564, 293, 4224, 796, 281, 12606, 264, 3537, 1154, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08565399102997362, "compression_ratio": 1.6725352112676057, "no_speech_prob": 0.002714769449084997}, {"id": 523, "seek": 172800, "start": 1735.0, "end": 1739.0, "text": " But he looks at the paper, he looks at Church's lambda calculus and says, you know what?", "tokens": [50714, 583, 415, 1542, 412, 264, 3035, 11, 415, 1542, 412, 7882, 311, 13607, 33400, 293, 1619, 11, 291, 458, 437, 30, 50914], "temperature": 0.0, "avg_logprob": -0.08565399102997362, "compression_ratio": 1.6725352112676057, "no_speech_prob": 0.002714769449084997}, {"id": 524, "seek": 172800, "start": 1739.0, "end": 1741.0, "text": " These are actually identical.", "tokens": [50914, 1981, 366, 767, 14800, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08565399102997362, "compression_ratio": 1.6725352112676057, "no_speech_prob": 0.002714769449084997}, {"id": 525, "seek": 172800, "start": 1741.0, "end": 1748.0, "text": " My Turing machines and Church's lambda calculus are the exact same thing just expressed different ways.", "tokens": [51014, 1222, 314, 1345, 8379, 293, 7882, 311, 13607, 33400, 366, 264, 1900, 912, 551, 445, 12675, 819, 2098, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08565399102997362, "compression_ratio": 1.6725352112676057, "no_speech_prob": 0.002714769449084997}, {"id": 526, "seek": 172800, "start": 1748.0, "end": 1755.0, "text": " So then he decides, you know what, I'll bury the hatchet, come to Princeton, get a PhD under Church with Church as his advisor.", "tokens": [51364, 407, 550, 415, 14898, 11, 291, 458, 437, 11, 286, 603, 28919, 264, 17387, 302, 11, 808, 281, 36592, 11, 483, 257, 14476, 833, 7882, 365, 7882, 382, 702, 19161, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08565399102997362, "compression_ratio": 1.6725352112676057, "no_speech_prob": 0.002714769449084997}, {"id": 527, "seek": 175500, "start": 1755.0, "end": 1761.0, "text": " And in 1937, he publishes the first fixed point combinator.", "tokens": [50364, 400, 294, 1294, 12851, 11, 415, 11374, 279, 264, 700, 6806, 935, 2512, 31927, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 528, "seek": 175500, "start": 1761.0, "end": 1764.0, "text": " Okay, that's the history.", "tokens": [50664, 1033, 11, 300, 311, 264, 2503, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 529, "seek": 175500, "start": 1764.0, "end": 1769.0, "text": " In the tiniest nutshell I could manage, or at least bear to part with.", "tokens": [50814, 682, 264, 256, 3812, 377, 37711, 286, 727, 3067, 11, 420, 412, 1935, 6155, 281, 644, 365, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 530, "seek": 175500, "start": 1769.0, "end": 1772.0, "text": " So, combinator.", "tokens": [51064, 407, 11, 2512, 31927, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 531, "seek": 175500, "start": 1772.0, "end": 1774.0, "text": " You keep using that word.", "tokens": [51214, 509, 1066, 1228, 300, 1349, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 532, "seek": 175500, "start": 1774.0, "end": 1776.0, "text": " I don't think it means what you think it means.", "tokens": [51314, 286, 500, 380, 519, 309, 1355, 437, 291, 519, 309, 1355, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 533, "seek": 175500, "start": 1776.0, "end": 1778.0, "text": " What is a combinator?", "tokens": [51414, 708, 307, 257, 2512, 31927, 30, 51514], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 534, "seek": 175500, "start": 1778.0, "end": 1781.0, "text": " We've said this thing many times, combinator logic and combinator's lambda calculus.", "tokens": [51514, 492, 600, 848, 341, 551, 867, 1413, 11, 2512, 31927, 9952, 293, 2512, 31927, 311, 13607, 33400, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 535, "seek": 175500, "start": 1781.0, "end": 1783.0, "text": " Where's the dividing line?", "tokens": [51664, 2305, 311, 264, 26764, 1622, 30, 51764], "temperature": 0.0, "avg_logprob": -0.13371688707739907, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.000911001639906317}, {"id": 536, "seek": 178300, "start": 1783.0, "end": 1787.0, "text": " In reality, they're almost entirely the same thing.", "tokens": [50364, 682, 4103, 11, 436, 434, 1920, 7696, 264, 912, 551, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07618060478797326, "compression_ratio": 1.8224299065420562, "no_speech_prob": 0.0005702736671082675}, {"id": 537, "seek": 178300, "start": 1787.0, "end": 1791.0, "text": " A combinator is a function with no free variables.", "tokens": [50564, 316, 2512, 31927, 307, 257, 2445, 365, 572, 1737, 9102, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07618060478797326, "compression_ratio": 1.8224299065420562, "no_speech_prob": 0.0005702736671082675}, {"id": 538, "seek": 178300, "start": 1791.0, "end": 1797.0, "text": " A free variable is a variable in a function body that's not bound to some parameter.", "tokens": [50764, 316, 1737, 7006, 307, 257, 7006, 294, 257, 2445, 1772, 300, 311, 406, 5472, 281, 512, 13075, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07618060478797326, "compression_ratio": 1.8224299065420562, "no_speech_prob": 0.0005702736671082675}, {"id": 539, "seek": 178300, "start": 1797.0, "end": 1803.0, "text": " So this is a combinator because the B in the body is bound to the B parameter.", "tokens": [51064, 407, 341, 307, 257, 2512, 31927, 570, 264, 363, 294, 264, 1772, 307, 5472, 281, 264, 363, 13075, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07618060478797326, "compression_ratio": 1.8224299065420562, "no_speech_prob": 0.0005702736671082675}, {"id": 540, "seek": 178300, "start": 1803.0, "end": 1806.0, "text": " Whereas that's not a combinator because A comes from nowhere.", "tokens": [51364, 13813, 300, 311, 406, 257, 2512, 31927, 570, 316, 1487, 490, 11159, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07618060478797326, "compression_ratio": 1.8224299065420562, "no_speech_prob": 0.0005702736671082675}, {"id": 541, "seek": 178300, "start": 1806.0, "end": 1810.0, "text": " What is A? Who knows? We could make it up. It doesn't matter.", "tokens": [51514, 708, 307, 316, 30, 2102, 3255, 30, 492, 727, 652, 309, 493, 13, 467, 1177, 380, 1871, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07618060478797326, "compression_ratio": 1.8224299065420562, "no_speech_prob": 0.0005702736671082675}, {"id": 542, "seek": 181000, "start": 1810.0, "end": 1815.0, "text": " It doesn't matter that we're not using the B. The B is irrelevant. It's a parameter.", "tokens": [50364, 467, 1177, 380, 1871, 300, 321, 434, 406, 1228, 264, 363, 13, 440, 363, 307, 28682, 13, 467, 311, 257, 13075, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09700370686394828, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003706997027620673}, {"id": 543, "seek": 181000, "start": 1815.0, "end": 1820.0, "text": " Not a combinator because where does the B come from? Don't know.", "tokens": [50614, 1726, 257, 2512, 31927, 570, 689, 775, 264, 363, 808, 490, 30, 1468, 380, 458, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09700370686394828, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003706997027620673}, {"id": 544, "seek": 181000, "start": 1820.0, "end": 1822.0, "text": " And even more complicated stuff like this.", "tokens": [50864, 400, 754, 544, 6179, 1507, 411, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09700370686394828, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003706997027620673}, {"id": 545, "seek": 181000, "start": 1822.0, "end": 1825.0, "text": " Don't get distracted by the E. That's a parameter. It's not a variable.", "tokens": [50964, 1468, 380, 483, 21658, 538, 264, 462, 13, 663, 311, 257, 13075, 13, 467, 311, 406, 257, 7006, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09700370686394828, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003706997027620673}, {"id": 546, "seek": 181000, "start": 1825.0, "end": 1829.0, "text": " So everything that appears in the body, C and B, those are bound to parameters.", "tokens": [51114, 407, 1203, 300, 7038, 294, 264, 1772, 11, 383, 293, 363, 11, 729, 366, 5472, 281, 9834, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09700370686394828, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003706997027620673}, {"id": 547, "seek": 181000, "start": 1829.0, "end": 1834.0, "text": " That's a combinator. You now know what a combinator is.", "tokens": [51314, 663, 311, 257, 2512, 31927, 13, 509, 586, 458, 437, 257, 2512, 31927, 307, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09700370686394828, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003706997027620673}, {"id": 548, "seek": 183400, "start": 1834.0, "end": 1842.0, "text": " We've seen a bunch of combinators. Identity, self-application, first or const, second.", "tokens": [50364, 492, 600, 1612, 257, 3840, 295, 38514, 3391, 13, 25905, 507, 11, 2698, 12, 1746, 1050, 399, 11, 700, 420, 1817, 11, 1150, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0988658197810141, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0028893589042127132}, {"id": 549, "seek": 183400, "start": 1842.0, "end": 1849.0, "text": " And the cool thing is, as I mentioned before, using some of the primitive combinators mixed together,", "tokens": [50764, 400, 264, 1627, 551, 307, 11, 382, 286, 2835, 949, 11, 1228, 512, 295, 264, 28540, 38514, 3391, 7467, 1214, 11, 51114], "temperature": 0.0, "avg_logprob": -0.0988658197810141, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0028893589042127132}, {"id": 550, "seek": 183400, "start": 1849.0, "end": 1854.0, "text": " we start generating some of the more complicated combinators, or at least other combinators,", "tokens": [51114, 321, 722, 17746, 512, 295, 264, 544, 6179, 38514, 3391, 11, 420, 412, 1935, 661, 38514, 3391, 11, 51364], "temperature": 0.0, "avg_logprob": -0.0988658197810141, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0028893589042127132}, {"id": 551, "seek": 183400, "start": 1854.0, "end": 1858.0, "text": " which is surprising but cool.", "tokens": [51364, 597, 307, 8830, 457, 1627, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0988658197810141, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0028893589042127132}, {"id": 552, "seek": 183400, "start": 1858.0, "end": 1861.0, "text": " Are you ready for the next one?", "tokens": [51564, 2014, 291, 1919, 337, 264, 958, 472, 30, 51714], "temperature": 0.0, "avg_logprob": -0.0988658197810141, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0028893589042127132}, {"id": 553, "seek": 186100, "start": 1861.0, "end": 1866.0, "text": " Let's look at the cardinal. Let's just look at it for a second.", "tokens": [50364, 961, 311, 574, 412, 264, 2920, 2071, 13, 961, 311, 445, 574, 412, 309, 337, 257, 1150, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09584768702474873, "compression_ratio": 1.5662100456621004, "no_speech_prob": 0.0006070556701160967}, {"id": 554, "seek": 186100, "start": 1866.0, "end": 1871.0, "text": " Not the beautiful photo, which I stole from somewhere. I can't remember where.", "tokens": [50614, 1726, 264, 2238, 5052, 11, 597, 286, 16326, 490, 4079, 13, 286, 393, 380, 1604, 689, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09584768702474873, "compression_ratio": 1.5662100456621004, "no_speech_prob": 0.0006070556701160967}, {"id": 555, "seek": 186100, "start": 1871.0, "end": 1878.0, "text": " But the combinator itself, anybody looking at this, can you think conceptually what this actually does", "tokens": [50864, 583, 264, 2512, 31927, 2564, 11, 4472, 1237, 412, 341, 11, 393, 291, 519, 3410, 671, 437, 341, 767, 775, 51214], "temperature": 0.0, "avg_logprob": -0.09584768702474873, "compression_ratio": 1.5662100456621004, "no_speech_prob": 0.0006070556701160967}, {"id": 556, "seek": 186100, "start": 1878.0, "end": 1884.0, "text": " in sort of a use case way?", "tokens": [51214, 294, 1333, 295, 257, 764, 1389, 636, 30, 51514], "temperature": 0.0, "avg_logprob": -0.09584768702474873, "compression_ratio": 1.5662100456621004, "no_speech_prob": 0.0006070556701160967}, {"id": 557, "seek": 186100, "start": 1884.0, "end": 1887.0, "text": " I'm really pushing you here because we're talking about abstract math,", "tokens": [51514, 286, 478, 534, 7380, 291, 510, 570, 321, 434, 1417, 466, 12649, 5221, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09584768702474873, "compression_ratio": 1.5662100456621004, "no_speech_prob": 0.0006070556701160967}, {"id": 558, "seek": 188700, "start": 1887.0, "end": 1892.0, "text": " but we're just keeping you in a land with no JavaScript.", "tokens": [50364, 457, 321, 434, 445, 5145, 291, 294, 257, 2117, 365, 572, 15778, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18999655452775366, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.08504331856966019}, {"id": 559, "seek": 188700, "start": 1892.0, "end": 1900.0, "text": " Exactly. It just flips around arguments. It takes a function f that takes two parameters,", "tokens": [50614, 7587, 13, 467, 445, 40249, 926, 12869, 13, 467, 2516, 257, 2445, 283, 300, 2516, 732, 9834, 11, 51014], "temperature": 0.0, "avg_logprob": -0.18999655452775366, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.08504331856966019}, {"id": 560, "seek": 188700, "start": 1900.0, "end": 1906.0, "text": " and then it calls the function f with both of those parameters, but in the opposite order.", "tokens": [51014, 293, 550, 309, 5498, 264, 2445, 283, 365, 1293, 295, 729, 9834, 11, 457, 294, 264, 6182, 1668, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18999655452775366, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.08504331856966019}, {"id": 561, "seek": 188700, "start": 1906.0, "end": 1913.0, "text": " So here's the C combinator, and what if we apply this to a function in two arguments,", "tokens": [51314, 407, 510, 311, 264, 383, 2512, 31927, 11, 293, 437, 498, 321, 3079, 341, 281, 257, 2445, 294, 732, 12869, 11, 51664], "temperature": 0.0, "avg_logprob": -0.18999655452775366, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.08504331856966019}, {"id": 562, "seek": 191300, "start": 1913.0, "end": 1916.0, "text": " which is the kestrel and these other two things that we don't care what they are,", "tokens": [50364, 597, 307, 264, 350, 377, 4419, 293, 613, 661, 732, 721, 300, 321, 500, 380, 1127, 437, 436, 366, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09857832468472995, "compression_ratio": 1.881188118811881, "no_speech_prob": 0.020328916609287262}, {"id": 563, "seek": 191300, "start": 1916.0, "end": 1918.0, "text": " but they're i and m in this case.", "tokens": [50514, 457, 436, 434, 741, 293, 275, 294, 341, 1389, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09857832468472995, "compression_ratio": 1.881188118811881, "no_speech_prob": 0.020328916609287262}, {"id": 564, "seek": 191300, "start": 1918.0, "end": 1924.0, "text": " The cardinal of the kestrel and the idiot and the mockingbird.", "tokens": [50614, 440, 2920, 2071, 295, 264, 350, 377, 4419, 293, 264, 14270, 293, 264, 49792, 18080, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09857832468472995, "compression_ratio": 1.881188118811881, "no_speech_prob": 0.020328916609287262}, {"id": 565, "seek": 191300, "start": 1924.0, "end": 1929.0, "text": " Well, walking through it, it takes three things, the function and two arguments,", "tokens": [50914, 1042, 11, 4494, 807, 309, 11, 309, 2516, 1045, 721, 11, 264, 2445, 293, 732, 12869, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09857832468472995, "compression_ratio": 1.881188118811881, "no_speech_prob": 0.020328916609287262}, {"id": 566, "seek": 191300, "start": 1929.0, "end": 1933.0, "text": " and it calls the function. Which is the function here?", "tokens": [51164, 293, 309, 5498, 264, 2445, 13, 3013, 307, 264, 2445, 510, 30, 51364], "temperature": 0.0, "avg_logprob": -0.09857832468472995, "compression_ratio": 1.881188118811881, "no_speech_prob": 0.020328916609287262}, {"id": 567, "seek": 191300, "start": 1933.0, "end": 1938.0, "text": " k. And it calls them with two arguments. Which are the arguments?", "tokens": [51364, 350, 13, 400, 309, 5498, 552, 365, 732, 12869, 13, 3013, 366, 264, 12869, 30, 51614], "temperature": 0.0, "avg_logprob": -0.09857832468472995, "compression_ratio": 1.881188118811881, "no_speech_prob": 0.020328916609287262}, {"id": 568, "seek": 193800, "start": 1938.0, "end": 1944.0, "text": " And it calls them in the opposite order. So it's k of m and i, which is?", "tokens": [50364, 400, 309, 5498, 552, 294, 264, 6182, 1668, 13, 407, 309, 311, 350, 295, 275, 293, 741, 11, 597, 307, 30, 50664], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 569, "seek": 193800, "start": 1944.0, "end": 1947.0, "text": " Yeah.", "tokens": [50664, 865, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 570, "seek": 193800, "start": 1947.0, "end": 1953.0, "text": " So we start with the kestrel, and then we put two things into it, but backwards.", "tokens": [50814, 407, 321, 722, 365, 264, 350, 377, 4419, 11, 293, 550, 321, 829, 732, 721, 666, 309, 11, 457, 12204, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 571, "seek": 193800, "start": 1953.0, "end": 1955.0, "text": " That's interesting because look at what we have here.", "tokens": [51114, 663, 311, 1880, 570, 574, 412, 437, 321, 362, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 572, "seek": 193800, "start": 1955.0, "end": 1958.0, "text": " The cardinal of the kestrel takes two things and returns the second.", "tokens": [51214, 440, 2920, 2071, 295, 264, 350, 377, 4419, 2516, 732, 721, 293, 11247, 264, 1150, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 573, "seek": 193800, "start": 1958.0, "end": 1962.0, "text": " Does that sound familiar?", "tokens": [51364, 4402, 300, 1626, 4963, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 574, "seek": 193800, "start": 1962.0, "end": 1964.0, "text": " It's the kite.", "tokens": [51564, 467, 311, 264, 38867, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10834170862571481, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.001700582099147141}, {"id": 575, "seek": 196400, "start": 1964.0, "end": 1967.0, "text": " The cardinal of the kestrel is the kestrel of identity.", "tokens": [50364, 440, 2920, 2071, 295, 264, 350, 377, 4419, 307, 264, 350, 377, 4419, 295, 6575, 13, 50514], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 576, "seek": 196400, "start": 1967.0, "end": 1971.0, "text": " The kite is this other thing. They're all the same.", "tokens": [50514, 440, 38867, 307, 341, 661, 551, 13, 814, 434, 439, 264, 912, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 577, "seek": 196400, "start": 1971.0, "end": 1973.0, "text": " And we can just do this to prove it.", "tokens": [50714, 400, 321, 393, 445, 360, 341, 281, 7081, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 578, "seek": 196400, "start": 1973.0, "end": 1976.0, "text": " Let's do the cardinal takes a function.", "tokens": [50814, 961, 311, 360, 264, 2920, 2071, 2516, 257, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 579, "seek": 196400, "start": 1976.0, "end": 1979.0, "text": " This monitor went away. There we go.", "tokens": [50964, 639, 6002, 1437, 1314, 13, 821, 321, 352, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 580, "seek": 196400, "start": 1979.0, "end": 1983.0, "text": " It takes a function, takes an argument, another argument,", "tokens": [51114, 467, 2516, 257, 2445, 11, 2516, 364, 6770, 11, 1071, 6770, 11, 51314], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 581, "seek": 196400, "start": 1983.0, "end": 1989.0, "text": " calls the argument with the arguments backwards.", "tokens": [51314, 5498, 264, 6770, 365, 264, 12869, 12204, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15393712672781437, "compression_ratio": 1.7923497267759563, "no_speech_prob": 0.0018675043247640133}, {"id": 582, "seek": 198900, "start": 1989.0, "end": 1993.0, "text": " Let's get the cardinal of the kestrel.", "tokens": [50364, 961, 311, 483, 264, 2920, 2071, 295, 264, 350, 377, 4419, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 583, "seek": 198900, "start": 1993.0, "end": 1996.0, "text": " Apply it to two variables.", "tokens": [50564, 25264, 309, 281, 732, 9102, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 584, "seek": 198900, "start": 1996.0, "end": 1998.0, "text": " The kestrel normally gives you back the first thing,", "tokens": [50714, 440, 350, 377, 4419, 5646, 2709, 291, 646, 264, 700, 551, 11, 50814], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 585, "seek": 198900, "start": 1998.0, "end": 2001.0, "text": " but the cardinal of the kestrel gives you the second thing.", "tokens": [50814, 457, 264, 2920, 2071, 295, 264, 350, 377, 4419, 2709, 291, 264, 1150, 551, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 586, "seek": 198900, "start": 2001.0, "end": 2008.0, "text": " It works. This isn't pure math. It's also applicable.", "tokens": [50964, 467, 1985, 13, 639, 1943, 380, 6075, 5221, 13, 467, 311, 611, 21142, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 587, "seek": 198900, "start": 2008.0, "end": 2011.0, "text": " So that's kind of fun. Cardinal, if you've got a cardinal,", "tokens": [51314, 407, 300, 311, 733, 295, 1019, 13, 11877, 2071, 11, 498, 291, 600, 658, 257, 2920, 2071, 11, 51464], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 588, "seek": 198900, "start": 2011.0, "end": 2013.0, "text": " you can apply it in different ways.", "tokens": [51464, 291, 393, 3079, 309, 294, 819, 2098, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 589, "seek": 198900, "start": 2013.0, "end": 2016.0, "text": " You can flip the kite around to get the kestrel or the kestrel to get the kite.", "tokens": [51564, 509, 393, 7929, 264, 38867, 926, 281, 483, 264, 350, 377, 4419, 420, 264, 350, 377, 4419, 281, 483, 264, 38867, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05941249465942383, "compression_ratio": 1.8008849557522124, "no_speech_prob": 0.0015011108480393887}, {"id": 590, "seek": 201600, "start": 2016.0, "end": 2019.0, "text": " And in fact, in Haskell, this is built into the base language,", "tokens": [50364, 400, 294, 1186, 11, 294, 8646, 43723, 11, 341, 307, 3094, 666, 264, 3096, 2856, 11, 50514], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 591, "seek": 201600, "start": 2019.0, "end": 2021.0, "text": " and it's called flip.", "tokens": [50514, 293, 309, 311, 1219, 7929, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 592, "seek": 201600, "start": 2021.0, "end": 2027.0, "text": " And it actually ends up being useful from time to time.", "tokens": [50614, 400, 309, 767, 5314, 493, 885, 4420, 490, 565, 281, 565, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 593, "seek": 201600, "start": 2027.0, "end": 2029.0, "text": " So why? Why are we learning this?", "tokens": [50914, 407, 983, 30, 1545, 366, 321, 2539, 341, 30, 51014], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 594, "seek": 201600, "start": 2029.0, "end": 2031.0, "text": " What's actually going on here?", "tokens": [51014, 708, 311, 767, 516, 322, 510, 30, 51114], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 595, "seek": 201600, "start": 2031.0, "end": 2034.0, "text": " How is this useful? Do we care?", "tokens": [51114, 1012, 307, 341, 4420, 30, 1144, 321, 1127, 30, 51264], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 596, "seek": 201600, "start": 2034.0, "end": 2037.0, "text": " Remember, lambda cacos and Turing machines are equivalent.", "tokens": [51264, 5459, 11, 13607, 269, 326, 329, 293, 314, 1345, 8379, 366, 10344, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 597, "seek": 201600, "start": 2037.0, "end": 2040.0, "text": " Anything one can calculate, the other can calculate.", "tokens": [51414, 11998, 472, 393, 8873, 11, 264, 661, 393, 8873, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 598, "seek": 201600, "start": 2040.0, "end": 2043.0, "text": " But Turing machines are exciting because they're these hypothetical devices", "tokens": [51564, 583, 314, 1345, 8379, 366, 4670, 570, 436, 434, 613, 33053, 5759, 51714], "temperature": 0.0, "avg_logprob": -0.11930184615285773, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0035930618178099394}, {"id": 599, "seek": 204300, "start": 2043.0, "end": 2047.0, "text": " that use state information that exists over here, here, here,", "tokens": [50364, 300, 764, 1785, 1589, 300, 8198, 670, 510, 11, 510, 11, 510, 11, 50564], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 600, "seek": 204300, "start": 2047.0, "end": 2052.0, "text": " and things that change over time to do computations.", "tokens": [50564, 293, 721, 300, 1319, 670, 565, 281, 360, 2807, 763, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 601, "seek": 204300, "start": 2052.0, "end": 2054.0, "text": " And from these hypothetical devices, people said,", "tokens": [50814, 400, 490, 613, 33053, 5759, 11, 561, 848, 11, 50914], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 602, "seek": 204300, "start": 2054.0, "end": 2057.0, "text": " wait a second, we could build real machines that do this.", "tokens": [50914, 1699, 257, 1150, 11, 321, 727, 1322, 957, 8379, 300, 360, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 603, "seek": 204300, "start": 2057.0, "end": 2059.0, "text": " And they use memory and state,", "tokens": [51064, 400, 436, 764, 4675, 293, 1785, 11, 51164], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 604, "seek": 204300, "start": 2059.0, "end": 2061.0, "text": " and they do a little bit more complicated stuff", "tokens": [51164, 293, 436, 360, 257, 707, 857, 544, 6179, 1507, 51264], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 605, "seek": 204300, "start": 2061.0, "end": 2064.0, "text": " just to make it more performant and easier to work with.", "tokens": [51264, 445, 281, 652, 309, 544, 2042, 394, 293, 3571, 281, 589, 365, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 606, "seek": 204300, "start": 2064.0, "end": 2067.0, "text": " But at their heart, they're really Turing machines.", "tokens": [51414, 583, 412, 641, 1917, 11, 436, 434, 534, 314, 1345, 8379, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 607, "seek": 204300, "start": 2067.0, "end": 2069.0, "text": " So they work with machine code,", "tokens": [51564, 407, 436, 589, 365, 3479, 3089, 11, 51664], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 608, "seek": 204300, "start": 2069.0, "end": 2071.0, "text": " which means let's flip a whole bunch of physical switches", "tokens": [51664, 597, 1355, 718, 311, 7929, 257, 1379, 3840, 295, 4001, 19458, 51764], "temperature": 0.0, "avg_logprob": -0.06833792859175074, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.013633308000862598}, {"id": 609, "seek": 207100, "start": 2071.0, "end": 2074.0, "text": " and then see what electricity and bits come out the other end.", "tokens": [50364, 293, 550, 536, 437, 10356, 293, 9239, 808, 484, 264, 661, 917, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 610, "seek": 207100, "start": 2074.0, "end": 2078.0, "text": " And we abstract that away in a language, a text format called assembly language,", "tokens": [50514, 400, 321, 12649, 300, 1314, 294, 257, 2856, 11, 257, 2487, 7877, 1219, 12103, 2856, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 611, "seek": 207100, "start": 2078.0, "end": 2083.0, "text": " that says things like, move the data in register B to the accumulator register.", "tokens": [50714, 300, 1619, 721, 411, 11, 1286, 264, 1412, 294, 7280, 363, 281, 264, 12989, 16381, 7280, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 612, "seek": 207100, "start": 2083.0, "end": 2088.0, "text": " Add one to whatever value is in the accumulator register of my memory.", "tokens": [50964, 5349, 472, 281, 2035, 2158, 307, 294, 264, 12989, 16381, 7280, 295, 452, 4675, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 613, "seek": 207100, "start": 2088.0, "end": 2092.0, "text": " Very stateful, very machine-based, very hard for humans to reason about.", "tokens": [51214, 4372, 1785, 906, 11, 588, 3479, 12, 6032, 11, 588, 1152, 337, 6255, 281, 1778, 466, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 614, "seek": 207100, "start": 2092.0, "end": 2096.0, "text": " It's not conceptual. It's all about machines.", "tokens": [51414, 467, 311, 406, 24106, 13, 467, 311, 439, 466, 8379, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 615, "seek": 207100, "start": 2096.0, "end": 2100.0, "text": " Well, we build higher-level languages like C that compile into assembly.", "tokens": [51614, 1042, 11, 321, 1322, 2946, 12, 12418, 8650, 411, 383, 300, 31413, 666, 12103, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09885211785634358, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.008574877865612507}, {"id": 616, "seek": 210000, "start": 2100.0, "end": 2103.0, "text": " But those higher-level languages are still machine-centric.", "tokens": [50364, 583, 729, 2946, 12, 12418, 8650, 366, 920, 3479, 12, 45300, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 617, "seek": 210000, "start": 2103.0, "end": 2108.0, "text": " They still say things like, hey, see, go allocate seven bits of memory over here", "tokens": [50514, 814, 920, 584, 721, 411, 11, 4177, 11, 536, 11, 352, 35713, 3407, 9239, 295, 4675, 670, 510, 50764], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 618, "seek": 210000, "start": 2108.0, "end": 2112.0, "text": " and give me back a reference to the pointer of that memory address and so on and so forth.", "tokens": [50764, 293, 976, 385, 646, 257, 6408, 281, 264, 23918, 295, 300, 4675, 2985, 293, 370, 322, 293, 370, 5220, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 619, "seek": 210000, "start": 2112.0, "end": 2114.0, "text": " So then somebody says, well, this is stupid.", "tokens": [50964, 407, 550, 2618, 1619, 11, 731, 11, 341, 307, 6631, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 620, "seek": 210000, "start": 2114.0, "end": 2116.0, "text": " We'll make the programming languages do that for us,", "tokens": [51064, 492, 603, 652, 264, 9410, 8650, 360, 300, 337, 505, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 621, "seek": 210000, "start": 2116.0, "end": 2118.0, "text": " and we'll just focus more on concepts.", "tokens": [51164, 293, 321, 603, 445, 1879, 544, 322, 10392, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 622, "seek": 210000, "start": 2118.0, "end": 2120.0, "text": " Like, hey, give me a var x,", "tokens": [51264, 1743, 11, 4177, 11, 976, 385, 257, 1374, 2031, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 623, "seek": 210000, "start": 2120.0, "end": 2122.0, "text": " and I don't care how you figure out the memory for that,", "tokens": [51364, 293, 286, 500, 380, 1127, 577, 291, 2573, 484, 264, 4675, 337, 300, 11, 51464], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 624, "seek": 210000, "start": 2122.0, "end": 2124.0, "text": " just go do it yourself.", "tokens": [51464, 445, 352, 360, 309, 1803, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 625, "seek": 210000, "start": 2124.0, "end": 2127.0, "text": " And then somebody says, why are we even bothering with memory?", "tokens": [51564, 400, 550, 2618, 1619, 11, 983, 366, 321, 754, 31432, 365, 4675, 30, 51714], "temperature": 0.0, "avg_logprob": -0.07244383145685065, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.002714448608458042}, {"id": 626, "seek": 212700, "start": 2127.0, "end": 2132.0, "text": " Why don't we just have these pure functions that operate on each other?", "tokens": [50364, 1545, 500, 380, 321, 445, 362, 613, 6075, 6828, 300, 9651, 322, 1184, 661, 30, 50614], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 627, "seek": 212700, "start": 2132.0, "end": 2133.0, "text": " And wait a second.", "tokens": [50614, 400, 1699, 257, 1150, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 628, "seek": 212700, "start": 2133.0, "end": 2137.0, "text": " This whole time this machine march through abstraction", "tokens": [50664, 639, 1379, 565, 341, 3479, 8368, 807, 37765, 50864], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 629, "seek": 212700, "start": 2137.0, "end": 2141.0, "text": " has been leading us to something that existed before Turing machines existed,", "tokens": [50864, 575, 668, 5775, 505, 281, 746, 300, 13135, 949, 314, 1345, 8379, 13135, 11, 51064], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 630, "seek": 212700, "start": 2141.0, "end": 2143.0, "text": " which is the lambda calculus.", "tokens": [51064, 597, 307, 264, 13607, 33400, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 631, "seek": 212700, "start": 2143.0, "end": 2147.0, "text": " Functional programming languages are based on,", "tokens": [51164, 11166, 41048, 9410, 8650, 366, 2361, 322, 11, 51364], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 632, "seek": 212700, "start": 2147.0, "end": 2151.0, "text": " slash their backbone is, the lambda calculus.", "tokens": [51364, 17330, 641, 34889, 307, 11, 264, 13607, 33400, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 633, "seek": 212700, "start": 2151.0, "end": 2154.0, "text": " So if we decide, wait, we're not going to organically evolve", "tokens": [51564, 407, 498, 321, 4536, 11, 1699, 11, 321, 434, 406, 516, 281, 1798, 984, 16693, 51714], "temperature": 0.0, "avg_logprob": -0.08595935665831274, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.008575402200222015}, {"id": 634, "seek": 215400, "start": 2154.0, "end": 2157.0, "text": " towards this kind of conceptual abstraction,", "tokens": [50364, 3030, 341, 733, 295, 24106, 37765, 11, 50514], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 635, "seek": 215400, "start": 2157.0, "end": 2161.0, "text": " but let's just start straight from the lambda calculus and go the other direction.", "tokens": [50514, 457, 718, 311, 445, 722, 2997, 490, 264, 13607, 33400, 293, 352, 264, 661, 3513, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 636, "seek": 215400, "start": 2161.0, "end": 2164.0, "text": " We can start designing purely functional languages", "tokens": [50714, 492, 393, 722, 14685, 17491, 11745, 8650, 50864], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 637, "seek": 215400, "start": 2164.0, "end": 2169.0, "text": " and using all the decades of mathematical research that have gone into LC", "tokens": [50864, 293, 1228, 439, 264, 7878, 295, 18894, 2132, 300, 362, 2780, 666, 42198, 51114], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 638, "seek": 215400, "start": 2169.0, "end": 2171.0, "text": " to design our language and see what comes out of that", "tokens": [51114, 281, 1715, 527, 2856, 293, 536, 437, 1487, 484, 295, 300, 51214], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 639, "seek": 215400, "start": 2171.0, "end": 2173.0, "text": " and see if there's anything useful that we could do there.", "tokens": [51214, 293, 536, 498, 456, 311, 1340, 4420, 300, 321, 727, 360, 456, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 640, "seek": 215400, "start": 2173.0, "end": 2175.0, "text": " And then we'll take that pure functional language,", "tokens": [51314, 400, 550, 321, 603, 747, 300, 6075, 11745, 2856, 11, 51414], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 641, "seek": 215400, "start": 2175.0, "end": 2182.0, "text": " just compile it down to machine code so it runs on our physical Turing machines.", "tokens": [51414, 445, 31413, 309, 760, 281, 3479, 3089, 370, 309, 6676, 322, 527, 4001, 314, 1345, 8379, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05277183651924133, "compression_ratio": 1.75, "no_speech_prob": 0.004754351917654276}, {"id": 642, "seek": 218200, "start": 2182.0, "end": 2185.0, "text": " Lambda calculus and Turing machines are equivalent.", "tokens": [50364, 45691, 33400, 293, 314, 1345, 8379, 366, 10344, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 643, "seek": 218200, "start": 2185.0, "end": 2190.0, "text": " Therefore, here's the big theme of the entire talk coming in the next slide.", "tokens": [50514, 7504, 11, 510, 311, 264, 955, 6314, 295, 264, 2302, 751, 1348, 294, 264, 958, 4137, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 644, "seek": 218200, "start": 2190.0, "end": 2193.0, "text": " Everything can be functions.", "tokens": [50764, 5471, 393, 312, 6828, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 645, "seek": 218200, "start": 2193.0, "end": 2197.0, "text": " When I say everything, I mean everything.", "tokens": [50914, 1133, 286, 584, 1203, 11, 286, 914, 1203, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 646, "seek": 218200, "start": 2197.0, "end": 2200.0, "text": " Like Booleans.", "tokens": [51114, 1743, 23351, 24008, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 647, "seek": 218200, "start": 2200.0, "end": 2201.0, "text": " Whoa.", "tokens": [51264, 7521, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 648, "seek": 218200, "start": 2201.0, "end": 2204.0, "text": " Here's a JavaScript Boolean expression.", "tokens": [51314, 1692, 311, 257, 15778, 23351, 28499, 6114, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 649, "seek": 218200, "start": 2204.0, "end": 2210.0, "text": " Not X is equal to, that's the double equals, not the assignment equals.", "tokens": [51464, 1726, 1783, 307, 2681, 281, 11, 300, 311, 264, 3834, 6915, 11, 406, 264, 15187, 6915, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10582707437236658, "compression_ratio": 1.5299539170506913, "no_speech_prob": 0.0009399071568623185}, {"id": 650, "seek": 221000, "start": 2210.0, "end": 2215.0, "text": " Y or the result of the expression A and Z.", "tokens": [50364, 398, 420, 264, 1874, 295, 264, 6114, 316, 293, 1176, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 651, "seek": 221000, "start": 2215.0, "end": 2217.0, "text": " How are we going to do this in lambda calculus?", "tokens": [50614, 1012, 366, 321, 516, 281, 360, 341, 294, 13607, 33400, 30, 50714], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 652, "seek": 221000, "start": 2217.0, "end": 2221.0, "text": " Well, it's a problem because we don't have negation.", "tokens": [50714, 1042, 11, 309, 311, 257, 1154, 570, 321, 500, 380, 362, 2485, 399, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 653, "seek": 221000, "start": 2221.0, "end": 2224.0, "text": " We don't have ors and and operators.", "tokens": [50914, 492, 500, 380, 362, 420, 82, 293, 293, 19077, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 654, "seek": 221000, "start": 2224.0, "end": 2227.0, "text": " I mean, we don't even have a quality checks in the lambda calculus, right?", "tokens": [51064, 286, 914, 11, 321, 500, 380, 754, 362, 257, 3125, 13834, 294, 264, 13607, 33400, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 655, "seek": 221000, "start": 2227.0, "end": 2229.0, "text": " That wasn't in the language.", "tokens": [51214, 663, 2067, 380, 294, 264, 2856, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 656, "seek": 221000, "start": 2229.0, "end": 2231.0, "text": " We don't have Booleans.", "tokens": [51314, 492, 500, 380, 362, 23351, 24008, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 657, "seek": 221000, "start": 2231.0, "end": 2233.0, "text": " We do have parentheses.", "tokens": [51414, 492, 360, 362, 34153, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 658, "seek": 221000, "start": 2233.0, "end": 2236.0, "text": " That's what we got.", "tokens": [51514, 663, 311, 437, 321, 658, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 659, "seek": 221000, "start": 2236.0, "end": 2238.0, "text": " We got parens.", "tokens": [51664, 492, 658, 7448, 3695, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13274045648245975, "compression_ratio": 1.6912442396313363, "no_speech_prob": 0.0015977221773937345}, {"id": 660, "seek": 223800, "start": 2238.0, "end": 2241.0, "text": " All right, so how on earth are we going to do this?", "tokens": [50364, 1057, 558, 11, 370, 577, 322, 4120, 366, 321, 516, 281, 360, 341, 30, 50514], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 661, "seek": 223800, "start": 2241.0, "end": 2245.0, "text": " Let's start with the primitive building blocks, the Booleans.", "tokens": [50514, 961, 311, 722, 365, 264, 28540, 2390, 8474, 11, 264, 23351, 24008, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 662, "seek": 223800, "start": 2245.0, "end": 2247.0, "text": " A bool.", "tokens": [50714, 316, 748, 401, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 663, "seek": 223800, "start": 2247.0, "end": 2250.0, "text": " What is that used for in JavaScript?", "tokens": [50814, 708, 307, 300, 1143, 337, 294, 15778, 30, 50964], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 664, "seek": 223800, "start": 2250.0, "end": 2253.0, "text": " Well, what about selection?", "tokens": [50964, 1042, 11, 437, 466, 9450, 30, 51114], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 665, "seek": 223800, "start": 2253.0, "end": 2256.0, "text": " Some result is check a Boolean condition.", "tokens": [51114, 2188, 1874, 307, 1520, 257, 23351, 28499, 4188, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 666, "seek": 223800, "start": 2256.0, "end": 2259.0, "text": " If it's true, we'll get the first expression.", "tokens": [51264, 759, 309, 311, 2074, 11, 321, 603, 483, 264, 700, 6114, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 667, "seek": 223800, "start": 2259.0, "end": 2262.0, "text": " If it's false, we'll get the second expression.", "tokens": [51414, 759, 309, 311, 7908, 11, 321, 603, 483, 264, 1150, 6114, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 668, "seek": 223800, "start": 2262.0, "end": 2265.0, "text": " Let's start translating this over to lambda calculus.", "tokens": [51564, 961, 311, 722, 35030, 341, 670, 281, 13607, 33400, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0715719638047395, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.0002694668364711106}, {"id": 669, "seek": 226500, "start": 2265.0, "end": 2269.0, "text": " Well, we got this ternary except, oops, this question mark and colon.", "tokens": [50364, 1042, 11, 321, 658, 341, 256, 1248, 822, 3993, 11, 34166, 11, 341, 1168, 1491, 293, 8255, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 670, "seek": 226500, "start": 2269.0, "end": 2271.0, "text": " That's not in the lambda calculus syntax.", "tokens": [50564, 663, 311, 406, 294, 264, 13607, 33400, 28431, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 671, "seek": 226500, "start": 2271.0, "end": 2273.0, "text": " It's got to go. Bye-bye.", "tokens": [50664, 467, 311, 658, 281, 352, 13, 4621, 12, 6650, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 672, "seek": 226500, "start": 2273.0, "end": 2275.0, "text": " What are we left with?", "tokens": [50764, 708, 366, 321, 1411, 365, 30, 50864], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 673, "seek": 226500, "start": 2275.0, "end": 2277.0, "text": " This is a function application, right?", "tokens": [50864, 639, 307, 257, 2445, 3861, 11, 558, 30, 50964], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 674, "seek": 226500, "start": 2277.0, "end": 2279.0, "text": " So bool must be.", "tokens": [50964, 407, 748, 401, 1633, 312, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 675, "seek": 226500, "start": 2279.0, "end": 2281.0, "text": " What's the theme of the talk?", "tokens": [51064, 708, 311, 264, 6314, 295, 264, 751, 30, 51164], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 676, "seek": 226500, "start": 2281.0, "end": 2283.0, "text": " A function.", "tokens": [51164, 316, 2445, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 677, "seek": 226500, "start": 2283.0, "end": 2285.0, "text": " And, oh, well, what do we need here?", "tokens": [51264, 400, 11, 1954, 11, 731, 11, 437, 360, 321, 643, 510, 30, 51364], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 678, "seek": 226500, "start": 2285.0, "end": 2288.0, "text": " We need a function that if it's the quote unquote true function,", "tokens": [51364, 492, 643, 257, 2445, 300, 498, 309, 311, 264, 6513, 37557, 2074, 2445, 11, 51514], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 679, "seek": 226500, "start": 2288.0, "end": 2290.0, "text": " it selects the first expression.", "tokens": [51514, 309, 3048, 82, 264, 700, 6114, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 680, "seek": 226500, "start": 2290.0, "end": 2293.0, "text": " And if it's the false function, it selects the second expression.", "tokens": [51614, 400, 498, 309, 311, 264, 7908, 2445, 11, 309, 3048, 82, 264, 1150, 6114, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11253789445044289, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.001987503143027425}, {"id": 681, "seek": 229300, "start": 2293.0, "end": 2296.0, "text": " Wait a second. This sounds really familiar to me.", "tokens": [50364, 3802, 257, 1150, 13, 639, 3263, 534, 4963, 281, 385, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 682, "seek": 229300, "start": 2296.0, "end": 2300.0, "text": " Where have we seen a pair of functions that select either the first or second things?", "tokens": [50514, 2305, 362, 321, 1612, 257, 6119, 295, 6828, 300, 3048, 2139, 264, 700, 420, 1150, 721, 30, 50714], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 683, "seek": 229300, "start": 2300.0, "end": 2302.0, "text": " Yeah.", "tokens": [50714, 865, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 684, "seek": 229300, "start": 2302.0, "end": 2304.0, "text": " We already have Booleans.", "tokens": [50814, 492, 1217, 362, 23351, 24008, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 685, "seek": 229300, "start": 2304.0, "end": 2306.0, "text": " We didn't even have to reinvent them.", "tokens": [50914, 492, 994, 380, 754, 362, 281, 33477, 552, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 686, "seek": 229300, "start": 2306.0, "end": 2309.0, "text": " They're already in the language that we've developed so far in this talk.", "tokens": [51014, 814, 434, 1217, 294, 264, 2856, 300, 321, 600, 4743, 370, 1400, 294, 341, 751, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 687, "seek": 229300, "start": 2309.0, "end": 2315.0, "text": " We'll just encode, in other words, represent Booleans as functions.", "tokens": [51164, 492, 603, 445, 2058, 1429, 11, 294, 661, 2283, 11, 2906, 23351, 24008, 382, 6828, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 688, "seek": 229300, "start": 2315.0, "end": 2318.0, "text": " We'll say that the kestrel function, the constant function,", "tokens": [51464, 492, 603, 584, 300, 264, 350, 377, 4419, 2445, 11, 264, 5754, 2445, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 689, "seek": 229300, "start": 2318.0, "end": 2322.0, "text": " the first function is true, quote unquote, and the kite is false.", "tokens": [51614, 264, 700, 2445, 307, 2074, 11, 6513, 37557, 11, 293, 264, 38867, 307, 7908, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09862746132744683, "compression_ratio": 1.7518518518518518, "no_speech_prob": 0.002800476271659136}, {"id": 690, "seek": 232200, "start": 2323.0, "end": 2325.0, "text": " That's kind of neat.", "tokens": [50414, 663, 311, 733, 295, 10654, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 691, "seek": 232200, "start": 2325.0, "end": 2329.0, "text": " Let's do that while we're looking at this slide and admiring it.", "tokens": [50514, 961, 311, 360, 300, 1339, 321, 434, 1237, 412, 341, 4137, 293, 5910, 5057, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 692, "seek": 232200, "start": 2329.0, "end": 2333.0, "text": " True is equal to the kestrel.", "tokens": [50714, 13587, 307, 2681, 281, 264, 350, 377, 4419, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 693, "seek": 232200, "start": 2333.0, "end": 2337.0, "text": " And false is equal to the kite.", "tokens": [50914, 400, 7908, 307, 2681, 281, 264, 38867, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 694, "seek": 232200, "start": 2337.0, "end": 2339.0, "text": " Now, there's a little node trick that I'll use here,", "tokens": [51114, 823, 11, 456, 311, 257, 707, 9984, 4282, 300, 286, 603, 764, 510, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 695, "seek": 232200, "start": 2339.0, "end": 2343.0, "text": " because if I go console log out true, it tells me it's the kestrel,", "tokens": [51214, 570, 498, 286, 352, 11076, 3565, 484, 2074, 11, 309, 5112, 385, 309, 311, 264, 350, 377, 4419, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 696, "seek": 232200, "start": 2343.0, "end": 2348.0, "text": " which is true, but in both senses.", "tokens": [51414, 597, 307, 2074, 11, 457, 294, 1293, 17057, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1009750071260118, "compression_ratio": 1.5863874345549738, "no_speech_prob": 0.0004044616944156587}, {"id": 697, "seek": 234800, "start": 2348.0, "end": 2352.0, "text": " But it's also slightly annoying, like if I'm going to start doing Booleans.", "tokens": [50364, 583, 309, 311, 611, 4748, 11304, 11, 411, 498, 286, 478, 516, 281, 722, 884, 23351, 24008, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1000610401755885, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.000646188564132899}, {"id": 698, "seek": 234800, "start": 2352.0, "end": 2353.0, "text": " So I'm going to do a little trick here.", "tokens": [50564, 407, 286, 478, 516, 281, 360, 257, 707, 4282, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1000610401755885, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.000646188564132899}, {"id": 699, "seek": 234800, "start": 2353.0, "end": 2364.0, "text": " I'm going to say t.inspect is a function that returns the string true slash kestrel.", "tokens": [50614, 286, 478, 516, 281, 584, 256, 13, 1292, 1043, 307, 257, 2445, 300, 11247, 264, 6798, 2074, 17330, 350, 377, 4419, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1000610401755885, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.000646188564132899}, {"id": 700, "seek": 234800, "start": 2364.0, "end": 2373.0, "text": " And false.inspect is a function that returns false or the kite.", "tokens": [51164, 400, 7908, 13, 1292, 1043, 307, 257, 2445, 300, 11247, 7908, 420, 264, 38867, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1000610401755885, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.000646188564132899}, {"id": 701, "seek": 237300, "start": 2374.0, "end": 2376.0, "text": " Now, if I log out t, I get t slash k.", "tokens": [50414, 823, 11, 498, 286, 3565, 484, 256, 11, 286, 483, 256, 17330, 350, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 702, "seek": 237300, "start": 2376.0, "end": 2380.0, "text": " And if I log out false, I get false slash kite.", "tokens": [50514, 400, 498, 286, 3565, 484, 7908, 11, 286, 483, 7908, 17330, 38867, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 703, "seek": 237300, "start": 2380.0, "end": 2386.0, "text": " So that'll be useful going forward in some of these demos.", "tokens": [50714, 407, 300, 603, 312, 4420, 516, 2128, 294, 512, 295, 613, 33788, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 704, "seek": 237300, "start": 2386.0, "end": 2387.0, "text": " That wasn't lambda calculus.", "tokens": [51014, 663, 2067, 380, 13607, 33400, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 705, "seek": 237300, "start": 2387.0, "end": 2391.0, "text": " The other stuff was, but not the dot.inspect.", "tokens": [51064, 440, 661, 1507, 390, 11, 457, 406, 264, 5893, 13, 1292, 1043, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 706, "seek": 237300, "start": 2391.0, "end": 2393.0, "text": " OK, so we have true and false.", "tokens": [51264, 2264, 11, 370, 321, 362, 2074, 293, 7908, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 707, "seek": 237300, "start": 2393.0, "end": 2395.0, "text": " But true and false on their own are kind of boring, right?", "tokens": [51364, 583, 2074, 293, 7908, 322, 641, 1065, 366, 733, 295, 9989, 11, 558, 30, 51464], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 708, "seek": 237300, "start": 2395.0, "end": 2397.0, "text": " Yeah, so we can select between two things.", "tokens": [51464, 865, 11, 370, 321, 393, 3048, 1296, 732, 721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 709, "seek": 237300, "start": 2397.0, "end": 2398.0, "text": " What about Boolean logic?", "tokens": [51564, 708, 466, 23351, 28499, 9952, 30, 51614], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 710, "seek": 237300, "start": 2398.0, "end": 2401.0, "text": " What about vacation?", "tokens": [51614, 708, 466, 12830, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1067295459008986, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.0015977997099980712}, {"id": 711, "seek": 240100, "start": 2401.0, "end": 2403.0, "text": " Let's translate it.", "tokens": [50364, 961, 311, 13799, 309, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 712, "seek": 240100, "start": 2403.0, "end": 2405.0, "text": " Well, what doesn't belong?", "tokens": [50464, 1042, 11, 437, 1177, 380, 5784, 30, 50564], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 713, "seek": 240100, "start": 2405.0, "end": 2408.0, "text": " One of these things is not like the others.", "tokens": [50564, 1485, 295, 613, 721, 307, 406, 411, 264, 2357, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 714, "seek": 240100, "start": 2408.0, "end": 2413.0, "text": " The negation, the exclamation mark isn't in the lambda calculus syntax.", "tokens": [50714, 440, 2485, 399, 11, 264, 1624, 43233, 1491, 1943, 380, 294, 264, 13607, 33400, 28431, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 715, "seek": 240100, "start": 2413.0, "end": 2415.0, "text": " What does it got to be instead?", "tokens": [50964, 708, 775, 309, 658, 281, 312, 2602, 30, 51064], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 716, "seek": 240100, "start": 2415.0, "end": 2417.0, "text": " What's the theme of the talk?", "tokens": [51064, 708, 311, 264, 6314, 295, 264, 751, 30, 51164], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 717, "seek": 240100, "start": 2417.0, "end": 2419.0, "text": " A function.", "tokens": [51164, 316, 2445, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 718, "seek": 240100, "start": 2419.0, "end": 2420.0, "text": " The not function.", "tokens": [51264, 440, 406, 2445, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 719, "seek": 240100, "start": 2420.0, "end": 2426.0, "text": " The not function will take in a Boolean and it will select between two other Booleans.", "tokens": [51314, 440, 406, 2445, 486, 747, 294, 257, 23351, 28499, 293, 309, 486, 3048, 1296, 732, 661, 23351, 24008, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 720, "seek": 240100, "start": 2426.0, "end": 2430.0, "text": " If we give it not true, it selects false.", "tokens": [51614, 759, 321, 976, 309, 406, 2074, 11, 309, 3048, 82, 7908, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0741571125231291, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.0019265370210632682}, {"id": 721, "seek": 243000, "start": 2430.0, "end": 2434.0, "text": " If we give it false, it selects true.", "tokens": [50364, 759, 321, 976, 309, 7908, 11, 309, 3048, 82, 2074, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 722, "seek": 243000, "start": 2434.0, "end": 2436.0, "text": " How can we implement the not function?", "tokens": [50564, 1012, 393, 321, 4445, 264, 406, 2445, 30, 50664], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 723, "seek": 243000, "start": 2436.0, "end": 2437.0, "text": " Well, wait a second.", "tokens": [50664, 1042, 11, 1699, 257, 1150, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 724, "seek": 243000, "start": 2437.0, "end": 2440.0, "text": " We just talked about selecting between two things.", "tokens": [50714, 492, 445, 2825, 466, 18182, 1296, 732, 721, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 725, "seek": 243000, "start": 2440.0, "end": 2448.0, "text": " What kind of thing selects between two possibilities?", "tokens": [50864, 708, 733, 295, 551, 3048, 82, 1296, 732, 12178, 30, 51264], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 726, "seek": 243000, "start": 2448.0, "end": 2449.0, "text": " We have a function.", "tokens": [51264, 492, 362, 257, 2445, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 727, "seek": 243000, "start": 2449.0, "end": 2450.0, "text": " Yes, a function.", "tokens": [51314, 1079, 11, 257, 2445, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 728, "seek": 243000, "start": 2450.0, "end": 2452.0, "text": " That's true.", "tokens": [51364, 663, 311, 2074, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 729, "seek": 243000, "start": 2452.0, "end": 2458.0, "text": " But specifically, these Booleans that we're using, the kite and the kestrel,", "tokens": [51464, 583, 4682, 11, 613, 23351, 24008, 300, 321, 434, 1228, 11, 264, 38867, 293, 264, 350, 377, 4419, 11, 51764], "temperature": 0.0, "avg_logprob": -0.09104397370643222, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0006070336676202714}, {"id": 730, "seek": 245800, "start": 2458.0, "end": 2462.0, "text": " themselves functions that choose between two possibilities.", "tokens": [50364, 2969, 6828, 300, 2826, 1296, 732, 12178, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 731, "seek": 245800, "start": 2462.0, "end": 2464.0, "text": " Look at what I have here, this expression.", "tokens": [50564, 2053, 412, 437, 286, 362, 510, 11, 341, 6114, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 732, "seek": 245800, "start": 2464.0, "end": 2465.0, "text": " An unknown Boolean p.", "tokens": [50664, 1107, 9841, 23351, 28499, 280, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 733, "seek": 245800, "start": 2465.0, "end": 2466.0, "text": " It might be the kite.", "tokens": [50714, 467, 1062, 312, 264, 38867, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 734, "seek": 245800, "start": 2466.0, "end": 2467.0, "text": " It might be the kestrel.", "tokens": [50764, 467, 1062, 312, 264, 350, 377, 4419, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 735, "seek": 245800, "start": 2467.0, "end": 2469.0, "text": " I don't know which one.", "tokens": [50814, 286, 500, 380, 458, 597, 472, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 736, "seek": 245800, "start": 2469.0, "end": 2476.0, "text": " If it's the kestrel or true, which one of those does it select?", "tokens": [50914, 759, 309, 311, 264, 350, 377, 4419, 420, 2074, 11, 597, 472, 295, 729, 775, 309, 3048, 30, 51264], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 737, "seek": 245800, "start": 2476.0, "end": 2480.0, "text": " The first one, false.", "tokens": [51264, 440, 700, 472, 11, 7908, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13787341939991918, "compression_ratio": 1.543956043956044, "no_speech_prob": 0.02441425807774067}, {"id": 738, "seek": 248000, "start": 2480.0, "end": 2487.0, "text": " And if my unknown Boolean is the kite, which does it select?", "tokens": [50364, 400, 498, 452, 9841, 23351, 28499, 307, 264, 38867, 11, 597, 775, 309, 3048, 30, 50714], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 739, "seek": 248000, "start": 2487.0, "end": 2489.0, "text": " The second one, true.", "tokens": [50714, 440, 1150, 472, 11, 2074, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 740, "seek": 248000, "start": 2489.0, "end": 2494.0, "text": " My unknown Boolean selects its own opposite in this expression.", "tokens": [50814, 1222, 9841, 23351, 28499, 3048, 82, 1080, 1065, 6182, 294, 341, 6114, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 741, "seek": 248000, "start": 2494.0, "end": 2498.0, "text": " So we'll turn this into a function and we'll call it not.", "tokens": [51064, 407, 321, 603, 1261, 341, 666, 257, 2445, 293, 321, 603, 818, 309, 406, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 742, "seek": 248000, "start": 2498.0, "end": 2499.0, "text": " That's it.", "tokens": [51264, 663, 311, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 743, "seek": 248000, "start": 2499.0, "end": 2506.0, "text": " Not just takes a Boolean and then tells the Boolean select your opposite.", "tokens": [51314, 1726, 445, 2516, 257, 23351, 28499, 293, 550, 5112, 264, 23351, 28499, 3048, 428, 6182, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 744, "seek": 248000, "start": 2506.0, "end": 2509.0, "text": " I promise it works.", "tokens": [51664, 286, 6228, 309, 1985, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06497609350416396, "compression_ratio": 1.609375, "no_speech_prob": 0.004904961679130793}, {"id": 745, "seek": 250900, "start": 2510.0, "end": 2517.0, "text": " So not takes, let's say it takes a Boolean and then it calls the Boolean passing in false and true.", "tokens": [50414, 407, 406, 2516, 11, 718, 311, 584, 309, 2516, 257, 23351, 28499, 293, 550, 309, 5498, 264, 23351, 28499, 8437, 294, 7908, 293, 2074, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 746, "seek": 250900, "start": 2517.0, "end": 2520.0, "text": " So if we say not true, that's false.", "tokens": [50764, 407, 498, 321, 584, 406, 2074, 11, 300, 311, 7908, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 747, "seek": 250900, "start": 2520.0, "end": 2522.0, "text": " And not false is true.", "tokens": [50914, 400, 406, 7908, 307, 2074, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 748, "seek": 250900, "start": 2522.0, "end": 2525.0, "text": " I've not put a single JavaScript Boolean into any of this.", "tokens": [51014, 286, 600, 406, 829, 257, 2167, 15778, 23351, 28499, 666, 604, 295, 341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 749, "seek": 250900, "start": 2525.0, "end": 2526.0, "text": " I'm doing negation.", "tokens": [51164, 286, 478, 884, 2485, 399, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 750, "seek": 250900, "start": 2526.0, "end": 2533.0, "text": " This is like, this should be exciting.", "tokens": [51214, 639, 307, 411, 11, 341, 820, 312, 4670, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 751, "seek": 250900, "start": 2533.0, "end": 2534.0, "text": " All right.", "tokens": [51564, 1057, 558, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 752, "seek": 250900, "start": 2534.0, "end": 2538.0, "text": " So our church encodings, which is what these things are called for Booleans now includes", "tokens": [51614, 407, 527, 4128, 2058, 378, 1109, 11, 597, 307, 437, 613, 721, 366, 1219, 337, 23351, 24008, 586, 5974, 51814], "temperature": 0.0, "avg_logprob": -0.11498916041743648, "compression_ratio": 1.6607929515418502, "no_speech_prob": 0.0011693998239934444}, {"id": 753, "seek": 253800, "start": 2538.0, "end": 2539.0, "text": " negation.", "tokens": [50364, 2485, 399, 13, 50414], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 754, "seek": 253800, "start": 2539.0, "end": 2542.0, "text": " We saw how we got true and false.", "tokens": [50414, 492, 1866, 577, 321, 658, 2074, 293, 7908, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 755, "seek": 253800, "start": 2542.0, "end": 2544.0, "text": " But there's a more exciting way of doing this.", "tokens": [50564, 583, 456, 311, 257, 544, 4670, 636, 295, 884, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 756, "seek": 253800, "start": 2544.0, "end": 2546.0, "text": " There's an even better way, in my opinion.", "tokens": [50664, 821, 311, 364, 754, 1101, 636, 11, 294, 452, 4800, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 757, "seek": 253800, "start": 2546.0, "end": 2548.0, "text": " A cooler way.", "tokens": [50764, 316, 15566, 636, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 758, "seek": 253800, "start": 2548.0, "end": 2551.0, "text": " Not true is false and not false is true.", "tokens": [50864, 1726, 2074, 307, 7908, 293, 406, 7908, 307, 2074, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 759, "seek": 253800, "start": 2551.0, "end": 2555.0, "text": " But we said true and false, we're encoding those as the kestrel and the kite.", "tokens": [51014, 583, 321, 848, 2074, 293, 7908, 11, 321, 434, 43430, 729, 382, 264, 350, 377, 4419, 293, 264, 38867, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 760, "seek": 253800, "start": 2555.0, "end": 2560.0, "text": " But if the kestrel and the kite, there's no named functions in lambda calculus.", "tokens": [51214, 583, 498, 264, 350, 377, 4419, 293, 264, 38867, 11, 456, 311, 572, 4926, 6828, 294, 13607, 33400, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 761, "seek": 253800, "start": 2560.0, "end": 2565.0, "text": " This is just us writing down a shorthand so that we don't have to remember and read out all the lambdas.", "tokens": [51464, 639, 307, 445, 505, 3579, 760, 257, 402, 2652, 474, 370, 300, 321, 500, 380, 362, 281, 1604, 293, 1401, 484, 439, 264, 10097, 27476, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08652139247808241, "compression_ratio": 1.7896825396825398, "no_speech_prob": 0.004904543980956078}, {"id": 762, "seek": 256500, "start": 2565.0, "end": 2570.0, "text": " But if we did replace them with their equivalent lambda expressions, that's what we're really looking at.", "tokens": [50364, 583, 498, 321, 630, 7406, 552, 365, 641, 10344, 13607, 15277, 11, 300, 311, 437, 321, 434, 534, 1237, 412, 13, 50614], "temperature": 0.8, "avg_logprob": -0.12287877097962395, "compression_ratio": 2.3990825688073394, "no_speech_prob": 0.014954554848372936}, {"id": 763, "seek": 256500, "start": 2570.0, "end": 2578.0, "text": " Now, we're saying the Not function will take at the top there a lambda that takes two arguments and gives you back the first,", "tokens": [50614, 823, 11, 321, 434, 1566, 264, 1726, 2445, 486, 747, 412, 264, 1192, 456, 257, 13607, 300, 2516, 732, 12869, 293, 2709, 291, 646, 264, 700, 11, 51014], "temperature": 0.8, "avg_logprob": -0.12287877097962395, "compression_ratio": 2.3990825688073394, "no_speech_prob": 0.014954554848372936}, {"id": 764, "seek": 256500, "start": 2578.0, "end": 2583.0, "text": " and it gives you back a lambda that takes two arguments and gives you back the second.", "tokens": [51014, 293, 309, 2709, 291, 646, 257, 13607, 300, 2516, 732, 12869, 293, 2709, 291, 646, 264, 1150, 13, 51264], "temperature": 0.8, "avg_logprob": -0.12287877097962395, "compression_ratio": 2.3990825688073394, "no_speech_prob": 0.014954554848372936}, {"id": 765, "seek": 256500, "start": 2583.0, "end": 2584.0, "text": " OK?", "tokens": [51264, 2264, 30, 51314], "temperature": 0.8, "avg_logprob": -0.12287877097962395, "compression_ratio": 2.3990825688073394, "no_speech_prob": 0.014954554848372936}, {"id": 766, "seek": 256500, "start": 2584.0, "end": 2588.0, "text": " And at the bottom, we're saying it takes, you know, two arguments and gives you back the second,", "tokens": [51314, 400, 412, 264, 2767, 11, 321, 434, 1566, 309, 2516, 11, 291, 458, 11, 732, 12869, 293, 2709, 291, 646, 264, 1150, 11, 51514], "temperature": 0.8, "avg_logprob": -0.12287877097962395, "compression_ratio": 2.3990825688073394, "no_speech_prob": 0.014954554848372936}, {"id": 767, "seek": 256500, "start": 2588.0, "end": 2594.0, "text": " and the Not function will give you back a lambda that takes two arguments and gives you back the first.", "tokens": [51514, 293, 264, 1726, 2445, 486, 976, 291, 646, 257, 13607, 300, 2516, 732, 12869, 293, 2709, 291, 646, 264, 700, 13, 51814], "temperature": 0.8, "avg_logprob": -0.12287877097962395, "compression_ratio": 2.3990825688073394, "no_speech_prob": 0.014954554848372936}, {"id": 768, "seek": 259400, "start": 2594.0, "end": 2594.88, "text": " Interesting.", "tokens": [50364, 14711, 13, 50408], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 769, "seek": 259400, "start": 2597.24, "end": 2601.12, "text": " So does anyone see, instead of not,", "tokens": [50526, 407, 775, 2878, 536, 11, 2602, 295, 406, 11, 50720], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 770, "seek": 259400, "start": 2601.12, "end": 2602.8, "text": " is there a function that we've already", "tokens": [50720, 307, 456, 257, 2445, 300, 321, 600, 1217, 50804], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 771, "seek": 259400, "start": 2602.8, "end": 2606.0, "text": " seen that will result in this?", "tokens": [50804, 1612, 300, 486, 1874, 294, 341, 30, 50964], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 772, "seek": 259400, "start": 2606.0, "end": 2610.0, "text": " A function that accepts a binary function, a function that", "tokens": [50964, 316, 2445, 300, 33538, 257, 17434, 2445, 11, 257, 2445, 300, 51164], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 773, "seek": 259400, "start": 2610.0, "end": 2616.2, "text": " takes two arguments, and it moves the arguments around?", "tokens": [51164, 2516, 732, 12869, 11, 293, 309, 6067, 264, 12869, 926, 30, 51474], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 774, "seek": 259400, "start": 2616.2, "end": 2618.08, "text": " It's the cardinal.", "tokens": [51474, 467, 311, 264, 2920, 2071, 13, 51568], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 775, "seek": 259400, "start": 2618.08, "end": 2621.2, "text": " Yeah, the only other one we've seen.", "tokens": [51568, 865, 11, 264, 787, 661, 472, 321, 600, 1612, 13, 51724], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 776, "seek": 259400, "start": 2621.2, "end": 2623.56, "text": " The cardinal already does this behavior.", "tokens": [51724, 440, 2920, 2071, 1217, 775, 341, 5223, 13, 51842], "temperature": 0.0, "avg_logprob": -0.21044681383215863, "compression_ratio": 1.7098445595854923, "no_speech_prob": 0.08148351311683655}, {"id": 777, "seek": 262356, "start": 2623.56, "end": 2627.68, "text": " The cardinal is boolean not.", "tokens": [50364, 440, 2920, 2071, 307, 748, 4812, 282, 406, 13, 50570], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 778, "seek": 262356, "start": 2627.68, "end": 2633.24, "text": " The flip of true is false, and the flip of false is true.", "tokens": [50570, 440, 7929, 295, 2074, 307, 7908, 11, 293, 264, 7929, 295, 7908, 307, 2074, 13, 50848], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 779, "seek": 262356, "start": 2633.24, "end": 2635.0, "text": " This monitor is really going to bug me.", "tokens": [50848, 639, 6002, 307, 534, 516, 281, 7426, 385, 13, 50936], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 780, "seek": 262356, "start": 2635.0, "end": 2635.56, "text": " There we go.", "tokens": [50936, 821, 321, 352, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 781, "seek": 262356, "start": 2635.56, "end": 2636.44, "text": " Stay there.", "tokens": [50964, 8691, 456, 13, 51008], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 782, "seek": 262356, "start": 2636.44, "end": 2638.4, "text": " Don't move.", "tokens": [51008, 1468, 380, 1286, 13, 51106], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 783, "seek": 262356, "start": 2638.4, "end": 2638.96, "text": " Let's try it.", "tokens": [51106, 961, 311, 853, 309, 13, 51134], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 784, "seek": 262356, "start": 2638.96, "end": 2643.2, "text": " Cardinal of true.", "tokens": [51134, 11877, 2071, 295, 2074, 13, 51346], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 785, "seek": 262356, "start": 2643.2, "end": 2646.44, "text": " Now, unfortunately, look what I'm about to get here.", "tokens": [51346, 823, 11, 7015, 11, 574, 437, 286, 478, 466, 281, 483, 510, 13, 51508], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 786, "seek": 262356, "start": 2646.44, "end": 2649.44, "text": " This isn't quite what I want, just this function.", "tokens": [51508, 639, 1943, 380, 1596, 437, 286, 528, 11, 445, 341, 2445, 13, 51658], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 787, "seek": 262356, "start": 2649.44, "end": 2650.6, "text": " Well, that's weird.", "tokens": [51658, 1042, 11, 300, 311, 3657, 13, 51716], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 788, "seek": 262356, "start": 2650.6, "end": 2652.2799999999997, "text": " What if I use this function?", "tokens": [51716, 708, 498, 286, 764, 341, 2445, 30, 51800], "temperature": 0.0, "avg_logprob": -0.15157095052428166, "compression_ratio": 1.613953488372093, "no_speech_prob": 8.750044071348384e-05}, {"id": 789, "seek": 265228, "start": 2652.28, "end": 2655.7200000000003, "text": " I'll apply it to two things, one and two.", "tokens": [50364, 286, 603, 3079, 309, 281, 732, 721, 11, 472, 293, 732, 13, 50536], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 790, "seek": 265228, "start": 2655.7200000000003, "end": 2657.84, "text": " I get back the second thing, which is what I want.", "tokens": [50536, 286, 483, 646, 264, 1150, 551, 11, 597, 307, 437, 286, 528, 13, 50642], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 791, "seek": 265228, "start": 2657.84, "end": 2661.32, "text": " The flip of true is false, so I should get the second thing.", "tokens": [50642, 440, 7929, 295, 2074, 307, 7908, 11, 370, 286, 820, 483, 264, 1150, 551, 13, 50816], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 792, "seek": 265228, "start": 2661.32, "end": 2665.7200000000003, "text": " And the flip of false is true, so I should get back", "tokens": [50816, 400, 264, 7929, 295, 7908, 307, 2074, 11, 370, 286, 820, 483, 646, 51036], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 793, "seek": 265228, "start": 2665.7200000000003, "end": 2667.6800000000003, "text": " the first thing, which I do.", "tokens": [51036, 264, 700, 551, 11, 597, 286, 360, 13, 51134], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 794, "seek": 265228, "start": 2667.6800000000003, "end": 2671.52, "text": " The problem is, the problem is, and it's not really a problem,", "tokens": [51134, 440, 1154, 307, 11, 264, 1154, 307, 11, 293, 309, 311, 406, 534, 257, 1154, 11, 51326], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 795, "seek": 265228, "start": 2671.52, "end": 2675.52, "text": " the problem is that the cardinal generates a new function,", "tokens": [51326, 264, 1154, 307, 300, 264, 2920, 2071, 23815, 257, 777, 2445, 11, 51526], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 796, "seek": 265228, "start": 2675.52, "end": 2679.84, "text": " unlike my previous implementation of not, which", "tokens": [51526, 8343, 452, 3894, 11420, 295, 406, 11, 597, 51742], "temperature": 0.0, "avg_logprob": -0.12238331670346467, "compression_ratio": 1.8447488584474885, "no_speech_prob": 0.00045827392023056746}, {"id": 797, "seek": 267984, "start": 2679.84, "end": 2682.96, "text": " selects between existing false and true functions,", "tokens": [50364, 3048, 82, 1296, 6741, 7908, 293, 2074, 6828, 11, 50520], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 798, "seek": 267984, "start": 2682.96, "end": 2686.8, "text": " the cardinal generates a new function that behaves identically", "tokens": [50520, 264, 2920, 2071, 23815, 257, 777, 2445, 300, 36896, 2473, 984, 50712], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 799, "seek": 267984, "start": 2686.8, "end": 2688.96, "text": " to the kestrel or kite.", "tokens": [50712, 281, 264, 350, 377, 4419, 420, 38867, 13, 50820], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 800, "seek": 267984, "start": 2688.96, "end": 2692.56, "text": " This kind of identity crisis is known", "tokens": [50820, 639, 733, 295, 6575, 5869, 307, 2570, 51000], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 801, "seek": 267984, "start": 2692.56, "end": 2696.6800000000003, "text": " as intentional equality versus extensional equality.", "tokens": [51000, 382, 21935, 14949, 5717, 1279, 11075, 14949, 13, 51206], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 802, "seek": 267984, "start": 2696.6800000000003, "end": 2698.6400000000003, "text": " Extensional equality, which is the kind of equality", "tokens": [51206, 9881, 11075, 14949, 11, 597, 307, 264, 733, 295, 14949, 51304], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 803, "seek": 267984, "start": 2698.6400000000003, "end": 2702.2400000000002, "text": " I'll use throughout this talk, means the functions are the same.", "tokens": [51304, 286, 603, 764, 3710, 341, 751, 11, 1355, 264, 6828, 366, 264, 912, 13, 51484], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 804, "seek": 267984, "start": 2702.2400000000002, "end": 2705.6000000000004, "text": " If for every input, they generate the same output.", "tokens": [51484, 759, 337, 633, 4846, 11, 436, 8460, 264, 912, 5598, 13, 51652], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 805, "seek": 267984, "start": 2705.6000000000004, "end": 2707.56, "text": " So the cardinal of the kestrel is", "tokens": [51652, 407, 264, 2920, 2071, 295, 264, 350, 377, 4419, 307, 51750], "temperature": 0.0, "avg_logprob": -0.12940798865424263, "compression_ratio": 1.8376068376068375, "no_speech_prob": 0.0030746017582714558}, {"id": 806, "seek": 270756, "start": 2707.6, "end": 2710.48, "text": " extensionally equal to the kite.", "tokens": [50366, 10320, 379, 2681, 281, 264, 38867, 13, 50510], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 807, "seek": 270756, "start": 2710.48, "end": 2711.92, "text": " They both behave identically.", "tokens": [50510, 814, 1293, 15158, 2473, 984, 13, 50582], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 808, "seek": 270756, "start": 2711.92, "end": 2715.16, "text": " There's no way to tell them apart from the outside, quote unquote.", "tokens": [50582, 821, 311, 572, 636, 281, 980, 552, 4936, 490, 264, 2380, 11, 6513, 37557, 13, 50744], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 809, "seek": 270756, "start": 2715.16, "end": 2718.16, "text": " Intentional equality is more like, well, where did it come from", "tokens": [50744, 5681, 1251, 304, 14949, 307, 544, 411, 11, 731, 11, 689, 630, 309, 808, 490, 50894], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 810, "seek": 270756, "start": 2718.16, "end": 2718.92, "text": " and what's inside it?", "tokens": [50894, 293, 437, 311, 1854, 309, 30, 50932], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 811, "seek": 270756, "start": 2718.92, "end": 2720.7599999999998, "text": " What are its guts?", "tokens": [50932, 708, 366, 1080, 28560, 30, 51024], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 812, "seek": 270756, "start": 2720.7599999999998, "end": 2727.88, "text": " I'm not going to focus on that during this talk, but it works.", "tokens": [51024, 286, 478, 406, 516, 281, 1879, 322, 300, 1830, 341, 751, 11, 457, 309, 1985, 13, 51380], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 813, "seek": 270756, "start": 2727.88, "end": 2730.92, "text": " That's the important thing.", "tokens": [51380, 663, 311, 264, 1021, 551, 13, 51532], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 814, "seek": 270756, "start": 2730.92, "end": 2736.88, "text": " Let's design and together, Boolean and, Boolean conjunction.", "tokens": [51532, 961, 311, 1715, 293, 1214, 11, 23351, 28499, 293, 11, 23351, 28499, 27482, 13, 51830], "temperature": 0.0, "avg_logprob": -0.1787904219193892, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.0010986648267135024}, {"id": 815, "seek": 273688, "start": 2736.88, "end": 2737.8, "text": " We know it's a function, right?", "tokens": [50364, 492, 458, 309, 311, 257, 2445, 11, 558, 30, 50410], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 816, "seek": 273688, "start": 2737.8, "end": 2739.52, "text": " That's the theme of the talk.", "tokens": [50410, 663, 311, 264, 6314, 295, 264, 751, 13, 50496], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 817, "seek": 273688, "start": 2739.52, "end": 2742.2000000000003, "text": " How many arguments does it take?", "tokens": [50496, 1012, 867, 12869, 775, 309, 747, 30, 50630], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 818, "seek": 273688, "start": 2742.2000000000003, "end": 2743.92, "text": " What are these arguments?", "tokens": [50630, 708, 366, 613, 12869, 30, 50716], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 819, "seek": 273688, "start": 2743.92, "end": 2745.8, "text": " What kind of thing are they?", "tokens": [50716, 708, 733, 295, 551, 366, 436, 30, 50810], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 820, "seek": 273688, "start": 2745.8, "end": 2747.8, "text": " They're Booleans, so they're the kestrel of the kite", "tokens": [50810, 814, 434, 23351, 24008, 11, 370, 436, 434, 264, 350, 377, 4419, 295, 264, 38867, 50910], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 821, "seek": 273688, "start": 2747.8, "end": 2750.96, "text": " or kite and kestrel or kestrel or kestrel or kite and kite,", "tokens": [50910, 420, 38867, 293, 350, 377, 4419, 420, 350, 377, 4419, 420, 350, 377, 4419, 420, 38867, 293, 38867, 11, 51068], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 822, "seek": 273688, "start": 2750.96, "end": 2753.2400000000002, "text": " just to finish it out.", "tokens": [51068, 445, 281, 2413, 309, 484, 13, 51182], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 823, "seek": 273688, "start": 2753.2400000000002, "end": 2755.6400000000003, "text": " Well, to take in a parameter, you're", "tokens": [51182, 1042, 11, 281, 747, 294, 257, 13075, 11, 291, 434, 51302], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 824, "seek": 273688, "start": 2755.6400000000003, "end": 2757.48, "text": " probably going to use that parameter somewhere", "tokens": [51302, 1391, 516, 281, 764, 300, 13075, 4079, 51394], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 825, "seek": 273688, "start": 2757.48, "end": 2759.04, "text": " in the body of your function, right?", "tokens": [51394, 294, 264, 1772, 295, 428, 2445, 11, 558, 30, 51472], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 826, "seek": 273688, "start": 2759.04, "end": 2761.6800000000003, "text": " So even if we're not quite sure where to go with this,", "tokens": [51472, 407, 754, 498, 321, 434, 406, 1596, 988, 689, 281, 352, 365, 341, 11, 51604], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 827, "seek": 273688, "start": 2761.6800000000003, "end": 2764.6, "text": " let's try just using one of these Booleans.", "tokens": [51604, 718, 311, 853, 445, 1228, 472, 295, 613, 23351, 24008, 13, 51750], "temperature": 0.0, "avg_logprob": -0.16008765928206906, "compression_ratio": 1.8566176470588236, "no_speech_prob": 0.000325018452713266}, {"id": 828, "seek": 276460, "start": 2764.6, "end": 2768.7599999999998, "text": " P is a Boolean, so what does it do?", "tokens": [50364, 430, 307, 257, 23351, 28499, 11, 370, 437, 775, 309, 360, 30, 50572], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 829, "seek": 276460, "start": 2768.7599999999998, "end": 2771.36, "text": " What do these Boolean functions do when I use them?", "tokens": [50572, 708, 360, 613, 23351, 28499, 6828, 360, 562, 286, 764, 552, 30, 50702], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 830, "seek": 276460, "start": 2774.56, "end": 2777.4, "text": " Yeah, they select between two possibilities,", "tokens": [50862, 865, 11, 436, 3048, 1296, 732, 12178, 11, 51004], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 831, "seek": 276460, "start": 2777.4, "end": 2779.0, "text": " such as the Spanish question mark.", "tokens": [51004, 1270, 382, 264, 8058, 1168, 1491, 13, 51084], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 832, "seek": 276460, "start": 2781.6, "end": 2787.52, "text": " What if our first argument to and is false?", "tokens": [51214, 708, 498, 527, 700, 6770, 281, 293, 307, 7908, 30, 51510], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 833, "seek": 276460, "start": 2787.52, "end": 2790.56, "text": " Which of the two possibilities will P select?", "tokens": [51510, 3013, 295, 264, 732, 12178, 486, 430, 3048, 30, 51662], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 834, "seek": 276460, "start": 2790.56, "end": 2791.68, "text": " The second one.", "tokens": [51662, 440, 1150, 472, 13, 51718], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 835, "seek": 276460, "start": 2791.68, "end": 2792.48, "text": " But wait a second.", "tokens": [51718, 583, 1699, 257, 1150, 13, 51758], "temperature": 0.0, "avg_logprob": -0.18746045056511373, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.00040446786442771554}, {"id": 836, "seek": 279248, "start": 2792.48, "end": 2794.64, "text": " If one of the arguments to and is false,", "tokens": [50364, 759, 472, 295, 264, 12869, 281, 293, 307, 7908, 11, 50472], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 837, "seek": 279248, "start": 2794.64, "end": 2796.96, "text": " what should that result of this entire function be?", "tokens": [50472, 437, 820, 300, 1874, 295, 341, 2302, 2445, 312, 30, 50588], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 838, "seek": 279248, "start": 2799.8, "end": 2803.16, "text": " Yeah, so I'll just put false there.", "tokens": [50730, 865, 11, 370, 286, 603, 445, 829, 7908, 456, 13, 50898], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 839, "seek": 279248, "start": 2803.16, "end": 2806.56, "text": " If P is false, short circuit, don't bother looking at Q.", "tokens": [50898, 759, 430, 307, 7908, 11, 2099, 9048, 11, 500, 380, 8677, 1237, 412, 1249, 13, 51068], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 840, "seek": 279248, "start": 2806.56, "end": 2809.16, "text": " There's no point where you can know we just select the second", "tokens": [51068, 821, 311, 572, 935, 689, 291, 393, 458, 321, 445, 3048, 264, 1150, 51198], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 841, "seek": 279248, "start": 2809.16, "end": 2811.52, "text": " thing, and it's already going to be false.", "tokens": [51198, 551, 11, 293, 309, 311, 1217, 516, 281, 312, 7908, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 842, "seek": 279248, "start": 2811.52, "end": 2817.52, "text": " So we don't even bother checking Q. Well, what if P is true?", "tokens": [51316, 407, 321, 500, 380, 754, 8677, 8568, 1249, 13, 1042, 11, 437, 498, 430, 307, 2074, 30, 51616], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 843, "seek": 279248, "start": 2817.52, "end": 2820.4, "text": " It's going to select the first thing, right?", "tokens": [51616, 467, 311, 516, 281, 3048, 264, 700, 551, 11, 558, 30, 51760], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 844, "seek": 279248, "start": 2820.4, "end": 2821.64, "text": " But what is that first thing?", "tokens": [51760, 583, 437, 307, 300, 700, 551, 30, 51822], "temperature": 0.0, "avg_logprob": -0.1510982359609296, "compression_ratio": 1.704, "no_speech_prob": 0.00013134792970959097}, {"id": 845, "seek": 282164, "start": 2821.64, "end": 2823.3199999999997, "text": " What should it be?", "tokens": [50364, 708, 820, 309, 312, 30, 50448], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 846, "seek": 282164, "start": 2823.3199999999997, "end": 2824.7599999999998, "text": " Based on Q?", "tokens": [50448, 18785, 322, 1249, 30, 50520], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 847, "seek": 282164, "start": 2824.7599999999998, "end": 2827.44, "text": " Yeah, it's got to be Q.", "tokens": [50520, 865, 11, 309, 311, 658, 281, 312, 1249, 13, 50654], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 848, "seek": 282164, "start": 2827.44, "end": 2831.8799999999997, "text": " Because if P is true, the and is true only when Q is true,", "tokens": [50654, 1436, 498, 430, 307, 2074, 11, 264, 293, 307, 2074, 787, 562, 1249, 307, 2074, 11, 50876], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 849, "seek": 282164, "start": 2831.8799999999997, "end": 2834.04, "text": " and the and is false if Q is false.", "tokens": [50876, 293, 264, 293, 307, 7908, 498, 1249, 307, 7908, 13, 50984], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 850, "seek": 282164, "start": 2834.04, "end": 2836.96, "text": " So once P is true, we have to go look at Q and use Q as our", "tokens": [50984, 407, 1564, 430, 307, 2074, 11, 321, 362, 281, 352, 574, 412, 1249, 293, 764, 1249, 382, 527, 51130], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 851, "seek": 282164, "start": 2836.96, "end": 2839.52, "text": " result.", "tokens": [51130, 1874, 13, 51258], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 852, "seek": 282164, "start": 2839.52, "end": 2841.96, "text": " There's one more small simplification we can actually", "tokens": [51258, 821, 311, 472, 544, 1359, 6883, 3774, 321, 393, 767, 51380], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 853, "seek": 282164, "start": 2841.96, "end": 2843.52, "text": " make to this that's kind of nice.", "tokens": [51380, 652, 281, 341, 300, 311, 733, 295, 1481, 13, 51458], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 854, "seek": 282164, "start": 2843.52, "end": 2847.8399999999997, "text": " I like it in any rate, which is we said that, by the way, P is", "tokens": [51458, 286, 411, 309, 294, 604, 3314, 11, 597, 307, 321, 848, 300, 11, 538, 264, 636, 11, 430, 307, 51674], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 855, "seek": 282164, "start": 2847.8399999999997, "end": 2850.3199999999997, "text": " a Boolean, so it selects between two possibilities.", "tokens": [51674, 257, 23351, 28499, 11, 370, 309, 3048, 82, 1296, 732, 12178, 13, 51798], "temperature": 0.0, "avg_logprob": -0.1690169762873995, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.0003459597355686128}, {"id": 856, "seek": 285032, "start": 2850.36, "end": 2853.84, "text": " If P is false, it should select false.", "tokens": [50366, 759, 430, 307, 7908, 11, 309, 820, 3048, 7908, 13, 50540], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 857, "seek": 285032, "start": 2853.84, "end": 2856.48, "text": " But I've hard-coded in a false.", "tokens": [50540, 583, 286, 600, 1152, 12, 66, 12340, 294, 257, 7908, 13, 50672], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 858, "seek": 285032, "start": 2856.48, "end": 2859.1200000000003, "text": " There was a way I could do this even more directly or", "tokens": [50672, 821, 390, 257, 636, 286, 727, 360, 341, 754, 544, 3838, 420, 50804], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 859, "seek": 285032, "start": 2859.1200000000003, "end": 2861.6400000000003, "text": " indirectly, it depends on your perspective.", "tokens": [50804, 37779, 11, 309, 5946, 322, 428, 4585, 13, 50930], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 860, "seek": 285032, "start": 2861.6400000000003, "end": 2864.6000000000004, "text": " If P is false and it should select false, P can just", "tokens": [50930, 759, 430, 307, 7908, 293, 309, 820, 3048, 7908, 11, 430, 393, 445, 51078], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 861, "seek": 285032, "start": 2864.6000000000004, "end": 2867.0800000000004, "text": " select itself.", "tokens": [51078, 3048, 2564, 13, 51202], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 862, "seek": 285032, "start": 2867.0800000000004, "end": 2870.6800000000003, "text": " If P is false, then return P, which is false.", "tokens": [51202, 759, 430, 307, 7908, 11, 550, 2736, 430, 11, 597, 307, 7908, 13, 51382], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 863, "seek": 285032, "start": 2870.6800000000003, "end": 2872.76, "text": " So I end up with this thing, which is very much a", "tokens": [51382, 407, 286, 917, 493, 365, 341, 551, 11, 597, 307, 588, 709, 257, 51486], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 864, "seek": 285032, "start": 2872.76, "end": 2876.56, "text": " combinator, PQ, PQP.", "tokens": [51486, 2512, 31927, 11, 430, 48, 11, 430, 48, 47, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 865, "seek": 285032, "start": 2876.56, "end": 2878.0, "text": " That is my and function.", "tokens": [51676, 663, 307, 452, 293, 2445, 13, 51748], "temperature": 0.0, "avg_logprob": -0.1655116081237793, "compression_ratio": 1.7104072398190044, "no_speech_prob": 0.0001355155254714191}, {"id": 866, "seek": 288032, "start": 2880.4, "end": 2884.36, "text": " I forget where we're at in our demonstrations of JavaScript.", "tokens": [50368, 286, 2870, 689, 321, 434, 412, 294, 527, 34714, 295, 15778, 13, 50566], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 867, "seek": 288032, "start": 2884.36, "end": 2885.84, "text": " Do we have not?", "tokens": [50566, 1144, 321, 362, 406, 30, 50640], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 868, "seek": 288032, "start": 2885.84, "end": 2887.1600000000003, "text": " We do have not.", "tokens": [50640, 492, 360, 362, 406, 13, 50706], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 869, "seek": 288032, "start": 2887.1600000000003, "end": 2887.92, "text": " What about and?", "tokens": [50706, 708, 466, 293, 30, 50744], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 870, "seek": 288032, "start": 2887.92, "end": 2888.44, "text": " No, we don't.", "tokens": [50744, 883, 11, 321, 500, 380, 13, 50770], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 871, "seek": 288032, "start": 2888.44, "end": 2889.8, "text": " OK, let's do that.", "tokens": [50770, 2264, 11, 718, 311, 360, 300, 13, 50838], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 872, "seek": 288032, "start": 2889.8, "end": 2896.2400000000002, "text": " And takes a Boolean and another Boolean, and it applies P", "tokens": [50838, 400, 2516, 257, 23351, 28499, 293, 1071, 23351, 28499, 11, 293, 309, 13165, 430, 51160], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 873, "seek": 288032, "start": 2896.2400000000002, "end": 2899.76, "text": " to Q to P. PQ, PQP.", "tokens": [51160, 281, 1249, 281, 430, 13, 430, 48, 11, 430, 48, 47, 13, 51336], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 874, "seek": 288032, "start": 2899.76, "end": 2901.1200000000003, "text": " That makes sense.", "tokens": [51336, 663, 1669, 2020, 13, 51404], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 875, "seek": 288032, "start": 2901.1200000000003, "end": 2906.4, "text": " So and of false and true is false.", "tokens": [51404, 407, 293, 295, 7908, 293, 2074, 307, 7908, 13, 51668], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 876, "seek": 288032, "start": 2906.4, "end": 2909.1200000000003, "text": " And of true and true is true.", "tokens": [51668, 400, 295, 2074, 293, 2074, 307, 2074, 13, 51804], "temperature": 0.0, "avg_logprob": -0.2062811244617809, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.0016483294311910868}, {"id": 877, "seek": 290912, "start": 2909.3199999999997, "end": 2910.96, "text": " And false is false.", "tokens": [50374, 400, 7908, 307, 7908, 13, 50456], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 878, "seek": 290912, "start": 2910.96, "end": 2914.04, "text": " And false and false is false.", "tokens": [50456, 400, 7908, 293, 7908, 307, 7908, 13, 50610], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 879, "seek": 290912, "start": 2914.04, "end": 2916.56, "text": " All the things we love and expect from the and function.", "tokens": [50610, 1057, 264, 721, 321, 959, 293, 2066, 490, 264, 293, 2445, 13, 50736], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 880, "seek": 290912, "start": 2919.2799999999997, "end": 2920.2799999999997, "text": " That's neat.", "tokens": [50872, 663, 311, 10654, 13, 50922], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 881, "seek": 290912, "start": 2920.2799999999997, "end": 2921.52, "text": " Let's do or.", "tokens": [50922, 961, 311, 360, 420, 13, 50984], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 882, "seek": 290912, "start": 2921.52, "end": 2924.12, "text": " What is or?", "tokens": [50984, 708, 307, 420, 30, 51114], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 883, "seek": 290912, "start": 2924.12, "end": 2927.72, "text": " Hey, someone's got the theme down.", "tokens": [51114, 1911, 11, 1580, 311, 658, 264, 6314, 760, 13, 51294], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 884, "seek": 290912, "start": 2927.72, "end": 2928.52, "text": " I cheated ahead.", "tokens": [51294, 286, 28079, 2286, 13, 51334], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 885, "seek": 290912, "start": 2928.52, "end": 2931.0, "text": " I jumped ahead and gave you two of the arguments.", "tokens": [51334, 286, 13864, 2286, 293, 2729, 291, 732, 295, 264, 12869, 13, 51458], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 886, "seek": 290912, "start": 2931.0, "end": 2931.72, "text": " Oh, no.", "tokens": [51458, 876, 11, 572, 13, 51494], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 887, "seek": 290912, "start": 2931.72, "end": 2932.6, "text": " What are we going to do?", "tokens": [51494, 708, 366, 321, 516, 281, 360, 30, 51538], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 888, "seek": 290912, "start": 2932.6, "end": 2934.72, "text": " P is a Boolean, it selects between two things.", "tokens": [51538, 430, 307, 257, 23351, 28499, 11, 309, 3048, 82, 1296, 732, 721, 13, 51644], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 889, "seek": 290912, "start": 2934.72, "end": 2936.56, "text": " All right, here's where it differs from and.", "tokens": [51644, 1057, 558, 11, 510, 311, 689, 309, 37761, 490, 293, 13, 51736], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 890, "seek": 290912, "start": 2936.56, "end": 2938.16, "text": " What if P is true?", "tokens": [51736, 708, 498, 430, 307, 2074, 30, 51816], "temperature": 0.0, "avg_logprob": -0.21664172952825372, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.00045828966540284455}, {"id": 891, "seek": 293816, "start": 2938.16, "end": 2940.12, "text": " Oops, I jumped ahead too much.", "tokens": [50364, 21726, 11, 286, 13864, 2286, 886, 709, 13, 50462], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 892, "seek": 293816, "start": 2940.12, "end": 2941.12, "text": " P is true.", "tokens": [50462, 430, 307, 2074, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 893, "seek": 293816, "start": 2941.12, "end": 2943.52, "text": " It selects the first thing, which has got to be true.", "tokens": [50512, 467, 3048, 82, 264, 700, 551, 11, 597, 575, 658, 281, 312, 2074, 13, 50632], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 894, "seek": 293816, "start": 2943.52, "end": 2945.7599999999998, "text": " If P is true, we don't have to bother looking at Q, because", "tokens": [50632, 759, 430, 307, 2074, 11, 321, 500, 380, 362, 281, 8677, 1237, 412, 1249, 11, 570, 50744], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 895, "seek": 293816, "start": 2945.7599999999998, "end": 2949.64, "text": " in or, if one of them is true, then we just result in true.", "tokens": [50744, 294, 420, 11, 498, 472, 295, 552, 307, 2074, 11, 550, 321, 445, 1874, 294, 2074, 13, 50938], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 896, "seek": 293816, "start": 2949.64, "end": 2954.56, "text": " If P is false, what's the second argument got to be?", "tokens": [50938, 759, 430, 307, 7908, 11, 437, 311, 264, 1150, 6770, 658, 281, 312, 30, 51184], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 897, "seek": 293816, "start": 2954.56, "end": 2958.2799999999997, "text": " Q. It's just the opposite of the thing before.", "tokens": [51184, 1249, 13, 467, 311, 445, 264, 6182, 295, 264, 551, 949, 13, 51370], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 898, "seek": 293816, "start": 2958.2799999999997, "end": 2962.8399999999997, "text": " So we can also simplify our kind of glossed over that, but", "tokens": [51370, 407, 321, 393, 611, 20460, 527, 733, 295, 19574, 292, 670, 300, 11, 457, 51598], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 899, "seek": 293816, "start": 2962.8399999999997, "end": 2964.2799999999997, "text": " it doesn't have to be a hard-coded true.", "tokens": [51598, 309, 1177, 380, 362, 281, 312, 257, 1152, 12, 66, 12340, 2074, 13, 51670], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 900, "seek": 293816, "start": 2964.2799999999997, "end": 2966.3599999999997, "text": " It can just be P, because we reuse it.", "tokens": [51670, 467, 393, 445, 312, 430, 11, 570, 321, 26225, 309, 13, 51774], "temperature": 0.0, "avg_logprob": -0.1733714925831762, "compression_ratio": 1.780392156862745, "no_speech_prob": 0.000191095910849981}, {"id": 901, "seek": 296636, "start": 2966.44, "end": 2970.32, "text": " If P is true, just return P.", "tokens": [50368, 759, 430, 307, 2074, 11, 445, 2736, 430, 13, 50562], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 902, "seek": 296636, "start": 2970.32, "end": 2974.04, "text": " That fact is actually really fun, because there's another", "tokens": [50562, 663, 1186, 307, 767, 534, 1019, 11, 570, 456, 311, 1071, 50748], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 903, "seek": 296636, "start": 2974.04, "end": 2977.4, "text": " little thing we can do here that's a trick.", "tokens": [50748, 707, 551, 321, 393, 360, 510, 300, 311, 257, 4282, 13, 50916], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 904, "seek": 296636, "start": 2977.4, "end": 2982.6400000000003, "text": " Somebody tell me, if I apply this PQ double PQ function to", "tokens": [50916, 13463, 980, 385, 11, 498, 286, 3079, 341, 430, 48, 3834, 430, 48, 2445, 281, 51178], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 905, "seek": 296636, "start": 2982.6400000000003, "end": 2986.04, "text": " X and Y as arguments, what is the resulting", "tokens": [51178, 1783, 293, 398, 382, 12869, 11, 437, 307, 264, 16505, 51348], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 906, "seek": 296636, "start": 2986.04, "end": 2987.0, "text": " better reduction?", "tokens": [51348, 1101, 11004, 30, 51396], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 907, "seek": 296636, "start": 2987.0, "end": 2990.32, "text": " In other words, what is the evaluation of this function?", "tokens": [51396, 682, 661, 2283, 11, 437, 307, 264, 13344, 295, 341, 2445, 30, 51562], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 908, "seek": 296636, "start": 2990.32, "end": 2993.92, "text": " What do I get as a result?", "tokens": [51562, 708, 360, 286, 483, 382, 257, 1874, 30, 51742], "temperature": 0.0, "avg_logprob": -0.1232273554064564, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.0001159157109213993}, {"id": 909, "seek": 299392, "start": 2993.92, "end": 2998.04, "text": " Remember, X replaces every P in the body, and Y replaces every", "tokens": [50364, 5459, 11, 1783, 46734, 633, 430, 294, 264, 1772, 11, 293, 398, 46734, 633, 50570], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 910, "seek": 299392, "start": 2998.04, "end": 2998.92, "text": " Q in the body.", "tokens": [50570, 1249, 294, 264, 1772, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 911, "seek": 299392, "start": 3001.44, "end": 3003.84, "text": " Yep, X, X, Y.", "tokens": [50740, 7010, 11, 1783, 11, 1783, 11, 398, 13, 50860], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 912, "seek": 299392, "start": 3003.84, "end": 3006.44, "text": " But there's another function we've already seen that does", "tokens": [50860, 583, 456, 311, 1071, 2445, 321, 600, 1217, 1612, 300, 775, 50990], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 913, "seek": 299392, "start": 3006.44, "end": 3009.12, "text": " this.", "tokens": [50990, 341, 13, 51124], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 914, "seek": 299392, "start": 3009.12, "end": 3010.16, "text": " I'll give you a hint.", "tokens": [51124, 286, 603, 976, 291, 257, 12075, 13, 51176], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 915, "seek": 299392, "start": 3010.16, "end": 3012.2000000000003, "text": " What if we ignore the Ys for a second?", "tokens": [51176, 708, 498, 321, 11200, 264, 398, 82, 337, 257, 1150, 30, 51278], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 916, "seek": 299392, "start": 3015.36, "end": 3016.84, "text": " Yeah, it's the mockingverd.", "tokens": [51436, 865, 11, 309, 311, 264, 49792, 331, 67, 13, 51510], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 917, "seek": 299392, "start": 3016.84, "end": 3019.04, "text": " It's the self-applicationverd.", "tokens": [51510, 467, 311, 264, 2698, 12, 1746, 1050, 399, 331, 67, 13, 51620], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 918, "seek": 299392, "start": 3019.04, "end": 3021.16, "text": " The self-application of X is double X.", "tokens": [51620, 440, 2698, 12, 1746, 1050, 399, 295, 1783, 307, 3834, 1783, 13, 51726], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 919, "seek": 299392, "start": 3021.16, "end": 3023.6, "text": " It's the self-application of X.", "tokens": [51726, 467, 311, 264, 2698, 12, 1746, 1050, 399, 295, 1783, 13, 51848], "temperature": 0.0, "avg_logprob": -0.2234154815673828, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0002034197823377326}, {"id": 920, "seek": 302360, "start": 3023.6, "end": 3025.92, "text": " But if the thing on the left is equal to the thing on the", "tokens": [50364, 583, 498, 264, 551, 322, 264, 1411, 307, 2681, 281, 264, 551, 322, 264, 50480], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 921, "seek": 302360, "start": 3025.92, "end": 3029.16, "text": " right, they're both functions I could apply them to some Y.", "tokens": [50480, 558, 11, 436, 434, 1293, 6828, 286, 727, 3079, 552, 281, 512, 398, 13, 50642], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 922, "seek": 302360, "start": 3029.16, "end": 3031.44, "text": " And now we see, wait a second, the thing on the top and the", "tokens": [50642, 400, 586, 321, 536, 11, 1699, 257, 1150, 11, 264, 551, 322, 264, 1192, 293, 264, 50756], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 923, "seek": 302360, "start": 3031.44, "end": 3032.88, "text": " thing on the bottom are actually the same.", "tokens": [50756, 551, 322, 264, 2767, 366, 767, 264, 912, 13, 50828], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 924, "seek": 302360, "start": 3032.88, "end": 3036.92, "text": " The mockingverd works just like this other function.", "tokens": [50828, 440, 49792, 331, 67, 1985, 445, 411, 341, 661, 2445, 13, 51030], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 925, "seek": 302360, "start": 3036.92, "end": 3039.0, "text": " It looks almost exactly like that, except the other", "tokens": [51030, 467, 1542, 1920, 2293, 411, 300, 11, 3993, 264, 661, 51134], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 926, "seek": 302360, "start": 3039.0, "end": 3042.12, "text": " function is this additional Q on the end, which is useless.", "tokens": [51134, 2445, 307, 341, 4497, 1249, 322, 264, 917, 11, 597, 307, 14115, 13, 51290], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 927, "seek": 302360, "start": 3042.12, "end": 3044.2, "text": " It takes a Q and applies a Q.", "tokens": [51290, 467, 2516, 257, 1249, 293, 13165, 257, 1249, 13, 51394], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 928, "seek": 302360, "start": 3044.2, "end": 3047.72, "text": " This is known as the mockingverd once removed.", "tokens": [51394, 639, 307, 2570, 382, 264, 49792, 331, 67, 1564, 7261, 13, 51570], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 929, "seek": 302360, "start": 3047.72, "end": 3050.2, "text": " So that's what the star means.", "tokens": [51570, 407, 300, 311, 437, 264, 3543, 1355, 13, 51694], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 930, "seek": 302360, "start": 3050.2, "end": 3052.3199999999997, "text": " It's been given an extra argument.", "tokens": [51694, 467, 311, 668, 2212, 364, 2857, 6770, 13, 51800], "temperature": 0.0, "avg_logprob": -0.12744209393352068, "compression_ratio": 1.8144329896907216, "no_speech_prob": 0.00019715521193575114}, {"id": 931, "seek": 305232, "start": 3052.32, "end": 3055.1600000000003, "text": " The mockingverd once removed is extensionally equal to the", "tokens": [50364, 440, 49792, 331, 67, 1564, 7261, 307, 10320, 379, 2681, 281, 264, 50506], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 932, "seek": 305232, "start": 3055.1600000000003, "end": 3055.7200000000003, "text": " mockingverd.", "tokens": [50506, 49792, 331, 67, 13, 50534], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 933, "seek": 305232, "start": 3055.7200000000003, "end": 3058.48, "text": " It behaves identically to it.", "tokens": [50534, 467, 36896, 2473, 984, 281, 309, 13, 50672], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 934, "seek": 305232, "start": 3058.48, "end": 3060.56, "text": " So have we defined or?", "tokens": [50672, 407, 362, 321, 7642, 420, 30, 50776], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 935, "seek": 305232, "start": 3060.56, "end": 3061.1200000000003, "text": " No, we haven't.", "tokens": [50776, 883, 11, 321, 2378, 380, 13, 50804], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 936, "seek": 305232, "start": 3061.1200000000003, "end": 3062.44, "text": " Let's do that really quickly.", "tokens": [50804, 961, 311, 360, 300, 534, 2661, 13, 50870], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 937, "seek": 305232, "start": 3062.44, "end": 3064.6800000000003, "text": " Or it takes a P and a Q.", "tokens": [50870, 1610, 309, 2516, 257, 430, 293, 257, 1249, 13, 50982], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 938, "seek": 305232, "start": 3064.6800000000003, "end": 3070.32, "text": " And it does P of P and Q.", "tokens": [50982, 400, 309, 775, 430, 295, 430, 293, 1249, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 939, "seek": 305232, "start": 3070.32, "end": 3075.84, "text": " We can demonstrate that or TF is true, or F is false, or", "tokens": [51264, 492, 393, 11698, 300, 420, 40964, 307, 2074, 11, 420, 479, 307, 7908, 11, 420, 51540], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 940, "seek": 305232, "start": 3075.84, "end": 3079.56, "text": " FT is true, and of course, or TT is true.", "tokens": [51540, 46675, 307, 2074, 11, 293, 295, 1164, 11, 420, 32576, 307, 2074, 13, 51726], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 941, "seek": 305232, "start": 3079.56, "end": 3081.36, "text": " But we can also use the mockingverd for that, because", "tokens": [51726, 583, 321, 393, 611, 764, 264, 49792, 331, 67, 337, 300, 11, 570, 51816], "temperature": 0.0, "avg_logprob": -0.17896467590332032, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.00010554388427408412}, {"id": 942, "seek": 308136, "start": 3081.36, "end": 3083.96, "text": " we just proved that the mockingverd outflurrates the", "tokens": [50364, 321, 445, 14617, 300, 264, 49792, 331, 67, 484, 3423, 374, 12507, 264, 50494], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 943, "seek": 308136, "start": 3083.96, "end": 3085.4, "text": " same way here.", "tokens": [50494, 912, 636, 510, 13, 50566], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 944, "seek": 308136, "start": 3085.4, "end": 3089.92, "text": " So mockingverd of true and false is true.", "tokens": [50566, 407, 49792, 331, 67, 295, 2074, 293, 7908, 307, 2074, 13, 50792], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 945, "seek": 308136, "start": 3089.92, "end": 3092.2000000000003, "text": " False and false is false.", "tokens": [50792, 50040, 293, 7908, 307, 7908, 13, 50906], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 946, "seek": 308136, "start": 3092.2000000000003, "end": 3095.44, "text": " False and true is an or statement as well.", "tokens": [50906, 50040, 293, 2074, 307, 364, 420, 5629, 382, 731, 13, 51068], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 947, "seek": 308136, "start": 3095.44, "end": 3097.6800000000003, "text": " And that's also an or statement.", "tokens": [51068, 400, 300, 311, 611, 364, 420, 5629, 13, 51180], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 948, "seek": 308136, "start": 3097.6800000000003, "end": 3099.1200000000003, "text": " Wow.", "tokens": [51180, 3153, 13, 51252], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 949, "seek": 308136, "start": 3099.1200000000003, "end": 3102.96, "text": " Mockingverd, you're multi-talented.", "tokens": [51252, 376, 31730, 331, 67, 11, 291, 434, 4825, 12, 32831, 6003, 13, 51444], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 950, "seek": 308136, "start": 3102.96, "end": 3105.56, "text": " Anybody have an idea what this might be?", "tokens": [51444, 19082, 362, 364, 1558, 437, 341, 1062, 312, 30, 51574], "temperature": 0.0, "avg_logprob": -0.21484961408249875, "compression_ratio": 1.655367231638418, "no_speech_prob": 0.00020341681374702603}, {"id": 951, "seek": 311136, "start": 3112.1600000000003, "end": 3115.04, "text": " Well, it's definitely a function that takes two", "tokens": [50404, 1042, 11, 309, 311, 2138, 257, 2445, 300, 2516, 732, 50548], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 952, "seek": 311136, "start": 3115.04, "end": 3117.1200000000003, "text": " arguments.", "tokens": [50548, 12869, 13, 50652], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 953, "seek": 311136, "start": 3117.1200000000003, "end": 3119.36, "text": " And I'm going to tell you P and Q are Booleans, just to make", "tokens": [50652, 400, 286, 478, 516, 281, 980, 291, 430, 293, 1249, 366, 23351, 24008, 11, 445, 281, 652, 50764], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 954, "seek": 311136, "start": 3119.36, "end": 3121.04, "text": " it slightly easier.", "tokens": [50764, 309, 4748, 3571, 13, 50848], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 955, "seek": 311136, "start": 3121.04, "end": 3123.6400000000003, "text": " But if P and Q are Booleans, what does P do?", "tokens": [50848, 583, 498, 430, 293, 1249, 366, 23351, 24008, 11, 437, 775, 430, 360, 30, 50978], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 956, "seek": 311136, "start": 3127.4, "end": 3130.36, "text": " It selects between two possibilities.", "tokens": [51166, 467, 3048, 82, 1296, 732, 12178, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 957, "seek": 311136, "start": 3130.36, "end": 3133.1600000000003, "text": " And if Q is a Boolean, what does it do?", "tokens": [51314, 400, 498, 1249, 307, 257, 23351, 28499, 11, 437, 775, 309, 360, 30, 51454], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 958, "seek": 311136, "start": 3133.1600000000003, "end": 3135.8, "text": " It selects between two possibilities.", "tokens": [51454, 467, 3048, 82, 1296, 732, 12178, 13, 51586], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 959, "seek": 311136, "start": 3135.8, "end": 3138.1600000000003, "text": " Does this make it easier to see what this function does?", "tokens": [51586, 4402, 341, 652, 309, 3571, 281, 536, 437, 341, 2445, 775, 30, 51704], "temperature": 0.0, "avg_logprob": -0.20454601071915537, "compression_ratio": 1.8121827411167513, "no_speech_prob": 0.002323021413758397}, {"id": 960, "seek": 313816, "start": 3138.6, "end": 3142.24, "text": " Sorry?", "tokens": [50386, 4919, 30, 50568], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 961, "seek": 313816, "start": 3142.24, "end": 3144.7599999999998, "text": " You were sure.", "tokens": [50568, 509, 645, 988, 13, 50694], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 962, "seek": 313816, "start": 3144.7599999999998, "end": 3148.52, "text": " Well, if P and Q are the same Boolean, they select true.", "tokens": [50694, 1042, 11, 498, 430, 293, 1249, 366, 264, 912, 23351, 28499, 11, 436, 3048, 2074, 13, 50882], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 963, "seek": 313816, "start": 3148.52, "end": 3151.64, "text": " If they're the same that way, they also select true.", "tokens": [50882, 759, 436, 434, 264, 912, 300, 636, 11, 436, 611, 3048, 2074, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 964, "seek": 313816, "start": 3151.64, "end": 3155.44, "text": " But if they're different, they select false.", "tokens": [51038, 583, 498, 436, 434, 819, 11, 436, 3048, 7908, 13, 51228], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 965, "seek": 313816, "start": 3155.44, "end": 3158.12, "text": " Which function is this?", "tokens": [51228, 3013, 2445, 307, 341, 30, 51362], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 966, "seek": 313816, "start": 3158.12, "end": 3160.3999999999996, "text": " Sorry?", "tokens": [51362, 4919, 30, 51476], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 967, "seek": 313816, "start": 3160.3999999999996, "end": 3162.04, "text": " Oh, is Zor something like that?", "tokens": [51476, 876, 11, 307, 1176, 284, 746, 411, 300, 30, 51558], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 968, "seek": 313816, "start": 3162.04, "end": 3163.56, "text": " Not quite.", "tokens": [51558, 1726, 1596, 13, 51634], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 969, "seek": 313816, "start": 3163.56, "end": 3164.48, "text": " Maybe.", "tokens": [51634, 2704, 13, 51680], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 970, "seek": 313816, "start": 3164.48, "end": 3165.72, "text": " I'd have to think about it.", "tokens": [51680, 286, 1116, 362, 281, 519, 466, 309, 13, 51742], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 971, "seek": 313816, "start": 3165.72, "end": 3166.52, "text": " It might be Zor.", "tokens": [51742, 467, 1062, 312, 1176, 284, 13, 51782], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 972, "seek": 313816, "start": 3166.52, "end": 3168.08, "text": " Yeah, I'd have to think about it.", "tokens": [51782, 865, 11, 286, 1116, 362, 281, 519, 466, 309, 13, 51860], "temperature": 0.0, "avg_logprob": -0.2427425546161199, "compression_ratio": 1.671641791044776, "no_speech_prob": 0.0023228481877595186}, {"id": 973, "seek": 316808, "start": 3169.0, "end": 3171.24, "text": " Yeah.", "tokens": [50410, 865, 13, 50522], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 974, "seek": 316808, "start": 3171.24, "end": 3172.04, "text": " That's true.", "tokens": [50522, 663, 311, 2074, 13, 50562], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 975, "seek": 316808, "start": 3172.04, "end": 3173.24, "text": " That's cool.", "tokens": [50562, 663, 311, 1627, 13, 50622], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 976, "seek": 316808, "start": 3173.24, "end": 3175.48, "text": " Yeah, nice work.", "tokens": [50622, 865, 11, 1481, 589, 13, 50734], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 977, "seek": 316808, "start": 3175.48, "end": 3177.08, "text": " I didn't think about that.", "tokens": [50734, 286, 994, 380, 519, 466, 300, 13, 50814], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 978, "seek": 316808, "start": 3177.08, "end": 3179.48, "text": " There's a simpler thing that we use this with.", "tokens": [50814, 821, 311, 257, 18587, 551, 300, 321, 764, 341, 365, 13, 50934], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 979, "seek": 316808, "start": 3179.48, "end": 3181.3199999999997, "text": " If P and Q are the same, we get true.", "tokens": [50934, 759, 430, 293, 1249, 366, 264, 912, 11, 321, 483, 2074, 13, 51026], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 980, "seek": 316808, "start": 3181.3199999999997, "end": 3182.52, "text": " If they're different, we get false.", "tokens": [51026, 759, 436, 434, 819, 11, 321, 483, 7908, 13, 51086], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 981, "seek": 316808, "start": 3182.52, "end": 3185.2, "text": " That's called equality.", "tokens": [51086, 663, 311, 1219, 14949, 13, 51220], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 982, "seek": 316808, "start": 3185.2, "end": 3191.2799999999997, "text": " This test, if P and Q are the same Boolean, well, there's a", "tokens": [51220, 639, 1500, 11, 498, 430, 293, 1249, 366, 264, 912, 23351, 28499, 11, 731, 11, 456, 311, 257, 51524], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 983, "seek": 316808, "start": 3191.2799999999997, "end": 3193.48, "text": " nice little simplification we can make here.", "tokens": [51524, 1481, 707, 6883, 3774, 321, 393, 652, 510, 13, 51634], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 984, "seek": 316808, "start": 3193.48, "end": 3195.16, "text": " Q is a Boolean true or false.", "tokens": [51634, 1249, 307, 257, 23351, 28499, 2074, 420, 7908, 13, 51718], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 985, "seek": 316808, "start": 3195.16, "end": 3196.24, "text": " If it's true, it selects true.", "tokens": [51718, 759, 309, 311, 2074, 11, 309, 3048, 82, 2074, 13, 51772], "temperature": 0.0, "avg_logprob": -0.17961173667047256, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013981168740428984}, {"id": 986, "seek": 319624, "start": 3196.2799999999997, "end": 3198.2799999999997, "text": " If it's false, it selects false.", "tokens": [50366, 759, 309, 311, 7908, 11, 309, 3048, 82, 7908, 13, 50466], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 987, "seek": 319624, "start": 3198.2799999999997, "end": 3199.2, "text": " That's redundant.", "tokens": [50466, 663, 311, 40997, 13, 50512], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 988, "seek": 319624, "start": 3199.2, "end": 3200.64, "text": " We could just use Q as it is.", "tokens": [50512, 492, 727, 445, 764, 1249, 382, 309, 307, 13, 50584], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 989, "seek": 319624, "start": 3200.64, "end": 3202.8399999999997, "text": " It's already true or false.", "tokens": [50584, 467, 311, 1217, 2074, 420, 7908, 13, 50694], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 990, "seek": 319624, "start": 3202.8399999999997, "end": 3205.72, "text": " And at the bottom, if Q is true, it selects false.", "tokens": [50694, 400, 412, 264, 2767, 11, 498, 1249, 307, 2074, 11, 309, 3048, 82, 7908, 13, 50838], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 991, "seek": 319624, "start": 3205.72, "end": 3208.0, "text": " And if it's false, it selects true.", "tokens": [50838, 400, 498, 309, 311, 7908, 11, 309, 3048, 82, 2074, 13, 50952], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 992, "seek": 319624, "start": 3208.0, "end": 3209.9599999999996, "text": " We already have a function that does that.", "tokens": [50952, 492, 1217, 362, 257, 2445, 300, 775, 300, 13, 51050], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 993, "seek": 319624, "start": 3209.9599999999996, "end": 3212.0, "text": " It's called the not function.", "tokens": [51050, 467, 311, 1219, 264, 406, 2445, 13, 51152], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 994, "seek": 319624, "start": 3212.0, "end": 3216.8399999999997, "text": " So we can simplify this to P, Q, not Q. And that is our", "tokens": [51152, 407, 321, 393, 20460, 341, 281, 430, 11, 1249, 11, 406, 1249, 13, 400, 300, 307, 527, 51394], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 995, "seek": 319624, "start": 3216.8399999999997, "end": 3218.8399999999997, "text": " Boolean equality function.", "tokens": [51394, 23351, 28499, 14949, 2445, 13, 51494], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 996, "seek": 319624, "start": 3218.8399999999997, "end": 3222.9599999999996, "text": " I'll do that as long as it sets P to Q to P, Q, not Q.", "tokens": [51494, 286, 603, 360, 300, 382, 938, 382, 309, 6352, 430, 281, 1249, 281, 430, 11, 1249, 11, 406, 1249, 13, 51700], "temperature": 0.0, "avg_logprob": -0.12356028349503227, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004305270849727094}, {"id": 997, "seek": 322296, "start": 3223.0, "end": 3227.48, "text": " So Boolean equality takes a P and a Q.", "tokens": [50366, 407, 23351, 28499, 14949, 2516, 257, 430, 293, 257, 1249, 13, 50590], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 998, "seek": 322296, "start": 3227.48, "end": 3233.52, "text": " And it does P of Q and not Q.", "tokens": [50590, 400, 309, 775, 430, 295, 1249, 293, 406, 1249, 13, 50892], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 999, "seek": 322296, "start": 3233.52, "end": 3234.2, "text": " Try it out.", "tokens": [50892, 6526, 309, 484, 13, 50926], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1000, "seek": 322296, "start": 3234.2, "end": 3238.84, "text": " Boolean equality of true and true is, of course, true.", "tokens": [50926, 23351, 28499, 14949, 295, 2074, 293, 2074, 307, 11, 295, 1164, 11, 2074, 13, 51158], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1001, "seek": 322296, "start": 3238.84, "end": 3240.48, "text": " True and false, nope.", "tokens": [51158, 13587, 293, 7908, 11, 23444, 13, 51240], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1002, "seek": 322296, "start": 3240.48, "end": 3242.2400000000002, "text": " False and false, yes.", "tokens": [51240, 50040, 293, 7908, 11, 2086, 13, 51328], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1003, "seek": 322296, "start": 3242.2400000000002, "end": 3244.36, "text": " False and true, nope.", "tokens": [51328, 50040, 293, 2074, 11, 23444, 13, 51434], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1004, "seek": 322296, "start": 3244.36, "end": 3246.64, "text": " Nice.", "tokens": [51434, 5490, 13, 51548], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1005, "seek": 322296, "start": 3246.64, "end": 3248.32, "text": " It's always fun to see it actually work.", "tokens": [51548, 467, 311, 1009, 1019, 281, 536, 309, 767, 589, 13, 51632], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1006, "seek": 322296, "start": 3248.32, "end": 3250.52, "text": " Like, you kind of believe it, and then you see it, and", "tokens": [51632, 1743, 11, 291, 733, 295, 1697, 309, 11, 293, 550, 291, 536, 309, 11, 293, 51742], "temperature": 0.0, "avg_logprob": -0.2069321038588038, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.00024536429555155337}, {"id": 1007, "seek": 325052, "start": 3250.52, "end": 3252.6, "text": " you're like, oh, I guess it really is true.", "tokens": [50364, 291, 434, 411, 11, 1954, 11, 286, 2041, 309, 534, 307, 2074, 13, 50468], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1008, "seek": 325052, "start": 3255.6, "end": 3257.4, "text": " All right, we got church encodings from Booleons.", "tokens": [50618, 1057, 558, 11, 321, 658, 4128, 2058, 378, 1109, 490, 23351, 306, 892, 13, 50708], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1009, "seek": 325052, "start": 3261.56, "end": 3263.88, "text": " I'm not going to do this one out.", "tokens": [50916, 286, 478, 406, 516, 281, 360, 341, 472, 484, 13, 51032], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1010, "seek": 325052, "start": 3263.88, "end": 3266.48, "text": " But if you are familiar with Boolean logic, you have heard", "tokens": [51032, 583, 498, 291, 366, 4963, 365, 23351, 28499, 9952, 11, 291, 362, 2198, 51162], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1011, "seek": 325052, "start": 3266.48, "end": 3268.0, "text": " of De Morgan's laws.", "tokens": [51162, 295, 1346, 16724, 311, 6064, 13, 51238], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1012, "seek": 325052, "start": 3268.0, "end": 3270.6, "text": " De Morgan's laws are a pair of laws.", "tokens": [51238, 1346, 16724, 311, 6064, 366, 257, 6119, 295, 6064, 13, 51368], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1013, "seek": 325052, "start": 3270.6, "end": 3271.7599999999998, "text": " This is only one of them.", "tokens": [51368, 639, 307, 787, 472, 295, 552, 13, 51426], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1014, "seek": 325052, "start": 3271.7599999999998, "end": 3278.92, "text": " But it says that not P and Q is equal to not P or not Q.", "tokens": [51426, 583, 309, 1619, 300, 406, 430, 293, 1249, 307, 2681, 281, 406, 430, 420, 406, 1249, 13, 51784], "temperature": 0.0, "avg_logprob": -0.19344517036720557, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0004728251078631729}, {"id": 1015, "seek": 327892, "start": 3279.0, "end": 3282.32, "text": " And we've just expressed that using nothing but functions.", "tokens": [50368, 400, 321, 600, 445, 12675, 300, 1228, 1825, 457, 6828, 13, 50534], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1016, "seek": 327892, "start": 3282.32, "end": 3285.2000000000003, "text": " No Booleans, no ands, no ors.", "tokens": [50534, 883, 23351, 24008, 11, 572, 293, 82, 11, 572, 420, 82, 13, 50678], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1017, "seek": 327892, "start": 3285.2000000000003, "end": 3286.04, "text": " I could prove that.", "tokens": [50678, 286, 727, 7081, 300, 13, 50720], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1018, "seek": 327892, "start": 3286.04, "end": 3288.52, "text": " We'll just take our shorthand and replace it with the", "tokens": [50720, 492, 603, 445, 747, 527, 402, 2652, 474, 293, 7406, 309, 365, 264, 50844], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1019, "seek": 327892, "start": 3288.52, "end": 3290.32, "text": " actual lambda calculus.", "tokens": [50844, 3539, 13607, 33400, 13, 50934], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1020, "seek": 327892, "start": 3290.32, "end": 3296.28, "text": " So there's our Boolean equality of not and PQ or not P or", "tokens": [50934, 407, 456, 311, 527, 23351, 28499, 14949, 295, 406, 293, 430, 48, 420, 406, 430, 420, 51232], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1021, "seek": 327892, "start": 3296.28, "end": 3299.0, "text": " not Q.", "tokens": [51232, 406, 1249, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1022, "seek": 327892, "start": 3299.0, "end": 3302.48, "text": " All right, it's pretty cool.", "tokens": [51368, 1057, 558, 11, 309, 311, 1238, 1627, 13, 51542], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1023, "seek": 327892, "start": 3302.48, "end": 3305.96, "text": " Now, I rehearsed this talk last night.", "tokens": [51542, 823, 11, 286, 17052, 292, 341, 751, 1036, 1818, 13, 51716], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1024, "seek": 327892, "start": 3305.96, "end": 3306.88, "text": " My fiance made me.", "tokens": [51716, 1222, 46552, 1027, 385, 13, 51762], "temperature": 0.0, "avg_logprob": -0.1693089511416374, "compression_ratio": 1.4889867841409692, "no_speech_prob": 0.001501027843914926}, {"id": 1025, "seek": 330688, "start": 3306.88, "end": 3310.04, "text": " She said, this talk is way longer than an hour.", "tokens": [50364, 1240, 848, 11, 341, 751, 307, 636, 2854, 813, 364, 1773, 13, 50522], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1026, "seek": 330688, "start": 3310.04, "end": 3311.8, "text": " I was like, ah, we'll see how long it is.", "tokens": [50522, 286, 390, 411, 11, 3716, 11, 321, 603, 536, 577, 938, 309, 307, 13, 50610], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1027, "seek": 330688, "start": 3311.8, "end": 3313.8, "text": " She said, no, no, no, you're going to rehearse.", "tokens": [50610, 1240, 848, 11, 572, 11, 572, 11, 572, 11, 291, 434, 516, 281, 14369, 11668, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1028, "seek": 330688, "start": 3313.8, "end": 3318.52, "text": " And I rehearsed, and it's way longer than an hour.", "tokens": [50710, 400, 286, 17052, 292, 11, 293, 309, 311, 636, 2854, 813, 364, 1773, 13, 50946], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1029, "seek": 330688, "start": 3318.52, "end": 3321.76, "text": " But this is a really good stopping point.", "tokens": [50946, 583, 341, 307, 257, 534, 665, 12767, 935, 13, 51108], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1030, "seek": 330688, "start": 3321.76, "end": 3323.6400000000003, "text": " So what I'm going to do is I'm going to give you the", "tokens": [51108, 407, 437, 286, 478, 516, 281, 360, 307, 286, 478, 516, 281, 976, 291, 264, 51202], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1031, "seek": 330688, "start": 3323.6400000000003, "end": 3327.32, "text": " conclusion of this talk, which works perfectly after this", "tokens": [51202, 10063, 295, 341, 751, 11, 597, 1985, 6239, 934, 341, 51386], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1032, "seek": 330688, "start": 3327.32, "end": 3327.7200000000003, "text": " slide.", "tokens": [51386, 4137, 13, 51406], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1033, "seek": 330688, "start": 3327.7200000000003, "end": 3328.44, "text": " It fits.", "tokens": [51406, 467, 9001, 13, 51442], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1034, "seek": 330688, "start": 3328.44, "end": 3329.6800000000003, "text": " It makes sense.", "tokens": [51442, 467, 1669, 2020, 13, 51504], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1035, "seek": 330688, "start": 3329.6800000000003, "end": 3333.88, "text": " And anyone who would like to is welcome to stay another", "tokens": [51504, 400, 2878, 567, 576, 411, 281, 307, 2928, 281, 1754, 1071, 51714], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1036, "seek": 330688, "start": 3333.88, "end": 3335.08, "text": " 30-ish minutes.", "tokens": [51714, 2217, 12, 742, 2077, 13, 51774], "temperature": 0.0, "avg_logprob": -0.1505560908757203, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.001133460900746286}, {"id": 1037, "seek": 333508, "start": 3335.08, "end": 3337.2, "text": " I'm going to go into another room, because Mark has to", "tokens": [50364, 286, 478, 516, 281, 352, 666, 1071, 1808, 11, 570, 3934, 575, 281, 50470], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1038, "seek": 333508, "start": 3337.2, "end": 3340.96, "text": " come in here and get this room ready for demo day.", "tokens": [50470, 808, 294, 510, 293, 483, 341, 1808, 1919, 337, 10723, 786, 13, 50658], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1039, "seek": 333508, "start": 3340.96, "end": 3345.44, "text": " And I'll show them numbers in the lambda calculus.", "tokens": [50658, 400, 286, 603, 855, 552, 3547, 294, 264, 13607, 33400, 13, 50882], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1040, "seek": 333508, "start": 3345.44, "end": 3347.7999999999997, "text": " But before we do that, I'm going to conclude this talk.", "tokens": [50882, 583, 949, 321, 360, 300, 11, 286, 478, 516, 281, 16886, 341, 751, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1041, "seek": 333508, "start": 3347.7999999999997, "end": 3351.2799999999997, "text": " So let me skip way down to the bottom of my deck here.", "tokens": [51000, 407, 718, 385, 10023, 636, 760, 281, 264, 2767, 295, 452, 9341, 510, 13, 51174], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1042, "seek": 333508, "start": 3351.2799999999997, "end": 3353.2, "text": " If I can find my mouse, there it is.", "tokens": [51174, 759, 286, 393, 915, 452, 9719, 11, 456, 309, 307, 13, 51270], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1043, "seek": 333508, "start": 3357.92, "end": 3360.68, "text": " Nope, further.", "tokens": [51506, 12172, 11, 3052, 13, 51644], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1044, "seek": 333508, "start": 3360.68, "end": 3364.6, "text": " Nope, more than that.", "tokens": [51644, 12172, 11, 544, 813, 300, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1880071880747971, "compression_ratio": 1.5360360360360361, "no_speech_prob": 0.0004305366310290992}, {"id": 1045, "seek": 336460, "start": 3364.64, "end": 3367.0, "text": " Keep going.", "tokens": [50366, 5527, 516, 13, 50484], "temperature": 0.0, "avg_logprob": -0.2850846184624566, "compression_ratio": 1.3511450381679388, "no_speech_prob": 6.605011731153354e-05}, {"id": 1046, "seek": 336460, "start": 3367.0, "end": 3370.44, "text": " Try to remember where this slide starts.", "tokens": [50484, 6526, 281, 1604, 689, 341, 4137, 3719, 13, 50656], "temperature": 0.0, "avg_logprob": -0.2850846184624566, "compression_ratio": 1.3511450381679388, "no_speech_prob": 6.605011731153354e-05}, {"id": 1047, "seek": 336460, "start": 3370.44, "end": 3371.7999999999997, "text": " Almost there.", "tokens": [50656, 12627, 456, 13, 50724], "temperature": 0.0, "avg_logprob": -0.2850846184624566, "compression_ratio": 1.3511450381679388, "no_speech_prob": 6.605011731153354e-05}, {"id": 1048, "seek": 336460, "start": 3380.52, "end": 3382.36, "text": " So a small preview.", "tokens": [51160, 407, 257, 1359, 14281, 13, 51252], "temperature": 0.0, "avg_logprob": -0.2850846184624566, "compression_ratio": 1.3511450381679388, "no_speech_prob": 6.605011731153354e-05}, {"id": 1049, "seek": 336460, "start": 3388.4, "end": 3391.4, "text": " This isn't even the only table in this talk.", "tokens": [51554, 639, 1943, 380, 754, 264, 787, 3199, 294, 341, 751, 13, 51704], "temperature": 0.0, "avg_logprob": -0.2850846184624566, "compression_ratio": 1.3511450381679388, "no_speech_prob": 6.605011731153354e-05}, {"id": 1050, "seek": 336460, "start": 3391.4, "end": 3393.56, "text": " These are just the combinators, let alone the", "tokens": [51704, 1981, 366, 445, 264, 38514, 3391, 11, 718, 3312, 264, 51812], "temperature": 0.0, "avg_logprob": -0.2850846184624566, "compression_ratio": 1.3511450381679388, "no_speech_prob": 6.605011731153354e-05}, {"id": 1051, "seek": 339356, "start": 3393.56, "end": 3396.7599999999998, "text": " Boolean equality, the arithmetic, the numerals, and", "tokens": [50364, 23351, 28499, 14949, 11, 264, 42973, 11, 264, 7866, 1124, 11, 293, 50524], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1052, "seek": 339356, "start": 3396.7599999999998, "end": 3401.0, "text": " the arithmetic operations that yield Booleans.", "tokens": [50524, 264, 42973, 7705, 300, 11257, 23351, 24008, 13, 50736], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1053, "seek": 339356, "start": 3401.0, "end": 3403.7599999999998, "text": " So lots of stuff that I am cutting out in the", "tokens": [50736, 407, 3195, 295, 1507, 300, 286, 669, 6492, 484, 294, 264, 50874], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1054, "seek": 339356, "start": 3403.7599999999998, "end": 3405.0, "text": " interest of time.", "tokens": [50874, 1179, 295, 565, 13, 50936], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1055, "seek": 339356, "start": 3405.0, "end": 3408.68, "text": " But yeah, I know.", "tokens": [50936, 583, 1338, 11, 286, 458, 13, 51120], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1056, "seek": 339356, "start": 3408.68, "end": 3411.04, "text": " Here's where I want to conclude, and I want to give you a", "tokens": [51120, 1692, 311, 689, 286, 528, 281, 16886, 11, 293, 286, 528, 281, 976, 291, 257, 51238], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1057, "seek": 339356, "start": 3411.04, "end": 3412.88, "text": " couple little small addendums.", "tokens": [51238, 1916, 707, 1359, 909, 521, 8099, 13, 51330], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1058, "seek": 339356, "start": 3412.88, "end": 3416.32, "text": " The first is I emphasized early on that from primitive", "tokens": [51330, 440, 700, 307, 286, 34068, 2440, 322, 300, 490, 28540, 51502], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1059, "seek": 339356, "start": 3416.32, "end": 3419.4, "text": " combinators come other combinators.", "tokens": [51502, 38514, 3391, 808, 661, 38514, 3391, 13, 51656], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1060, "seek": 339356, "start": 3419.4, "end": 3422.7599999999998, "text": " And this is a really cool sort of atom to molecule sort of", "tokens": [51656, 400, 341, 307, 257, 534, 1627, 1333, 295, 12018, 281, 15582, 1333, 295, 51824], "temperature": 0.0, "avg_logprob": -0.1714626643968665, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.0008829283178783953}, {"id": 1061, "seek": 342276, "start": 3422.76, "end": 3423.84, "text": " situation.", "tokens": [50364, 2590, 13, 50418], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1062, "seek": 342276, "start": 3423.84, "end": 3427.28, "text": " And it begs the question, how many combinators do we need", "tokens": [50418, 400, 309, 4612, 82, 264, 1168, 11, 577, 867, 38514, 3391, 360, 321, 643, 50590], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1063, "seek": 342276, "start": 3427.28, "end": 3431.5600000000004, "text": " and which ones to generate all the other ones?", "tokens": [50590, 293, 597, 2306, 281, 8460, 439, 264, 661, 2306, 30, 50804], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1064, "seek": 342276, "start": 3431.5600000000004, "end": 3432.88, "text": " Is it even possible to do that?", "tokens": [50804, 1119, 309, 754, 1944, 281, 360, 300, 30, 50870], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1065, "seek": 342276, "start": 3432.88, "end": 3435.84, "text": " Do we need an infinite number of them?", "tokens": [50870, 1144, 321, 643, 364, 13785, 1230, 295, 552, 30, 51018], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1066, "seek": 342276, "start": 3435.84, "end": 3439.7200000000003, "text": " 20, 10, 5?", "tokens": [51018, 945, 11, 1266, 11, 1025, 30, 51212], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1067, "seek": 342276, "start": 3439.7200000000003, "end": 3441.32, "text": " Just two.", "tokens": [51212, 1449, 732, 13, 51292], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1068, "seek": 342276, "start": 3441.32, "end": 3442.1600000000003, "text": " Not even identity.", "tokens": [51292, 1726, 754, 6575, 13, 51334], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1069, "seek": 342276, "start": 3442.1600000000003, "end": 3443.4, "text": " Identity isn't on the board.", "tokens": [51334, 25905, 507, 1943, 380, 322, 264, 3150, 13, 51396], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1070, "seek": 342276, "start": 3443.4, "end": 3444.5200000000004, "text": " These are the only two you need.", "tokens": [51396, 1981, 366, 264, 787, 732, 291, 643, 13, 51452], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1071, "seek": 342276, "start": 3444.5200000000004, "end": 3446.5200000000004, "text": " You can make identity out of this, the", "tokens": [51452, 509, 393, 652, 6575, 484, 295, 341, 11, 264, 51552], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1072, "seek": 342276, "start": 3446.5200000000004, "end": 3448.5200000000004, "text": " Starling and the Kestrel.", "tokens": [51552, 5705, 1688, 293, 264, 591, 377, 4419, 13, 51652], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1073, "seek": 342276, "start": 3448.5200000000004, "end": 3450.0800000000004, "text": " The Starling is a weird one.", "tokens": [51652, 440, 5705, 1688, 307, 257, 3657, 472, 13, 51730], "temperature": 0.0, "avg_logprob": -0.16987675476074218, "compression_ratio": 1.578512396694215, "no_speech_prob": 0.002472216496244073}, {"id": 1074, "seek": 345008, "start": 3450.2, "end": 3452.88, "text": " I actually don't really like the SK", "tokens": [50370, 286, 767, 500, 380, 534, 411, 264, 21483, 50504], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1075, "seek": 345008, "start": 3452.88, "end": 3457.0, "text": " Combinator Calculus, which is what it is called.", "tokens": [50504, 2432, 13496, 1639, 3511, 36002, 11, 597, 307, 437, 309, 307, 1219, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1076, "seek": 345008, "start": 3457.0, "end": 3462.52, "text": " I really like the BCKIM Combinator Calculus.", "tokens": [50710, 286, 534, 411, 264, 14359, 42, 6324, 2432, 13496, 1639, 3511, 36002, 13, 50986], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1077, "seek": 345008, "start": 3462.52, "end": 3464.88, "text": " If I just added m to this, this would actually suffice", "tokens": [50986, 759, 286, 445, 3869, 275, 281, 341, 11, 341, 576, 767, 3889, 573, 51104], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1078, "seek": 345008, "start": 3464.88, "end": 3465.68, "text": " five of them.", "tokens": [51104, 1732, 295, 552, 13, 51144], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1079, "seek": 345008, "start": 3465.68, "end": 3467.48, "text": " And that was the one that Curry used.", "tokens": [51144, 400, 300, 390, 264, 472, 300, 34789, 1143, 13, 51234], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1080, "seek": 345008, "start": 3467.48, "end": 3469.7599999999998, "text": " I find this far easier to use than the SK", "tokens": [51234, 286, 915, 341, 1400, 3571, 281, 764, 813, 264, 21483, 51348], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1081, "seek": 345008, "start": 3469.7599999999998, "end": 3472.04, "text": " Combinator Calculus.", "tokens": [51348, 2432, 13496, 1639, 3511, 36002, 13, 51462], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1082, "seek": 345008, "start": 3472.04, "end": 3473.96, "text": " For instance, the identity in the SK", "tokens": [51462, 1171, 5197, 11, 264, 6575, 294, 264, 21483, 51558], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1083, "seek": 345008, "start": 3473.96, "end": 3476.16, "text": " Combinator Calculus is S of KK.", "tokens": [51558, 2432, 13496, 1639, 3511, 36002, 307, 318, 295, 591, 42, 13, 51668], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1084, "seek": 345008, "start": 3476.16, "end": 3478.3199999999997, "text": " It's also SKS.", "tokens": [51668, 467, 311, 611, 21483, 50, 13, 51776], "temperature": 0.0, "avg_logprob": -0.1596294403076172, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.0008295413572341204}, {"id": 1085, "seek": 347832, "start": 3478.32, "end": 3481.0, "text": " Those are extensionally equal.", "tokens": [50364, 3950, 366, 10320, 379, 2681, 13, 50498], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1086, "seek": 347832, "start": 3481.0, "end": 3483.48, "text": " You didn't get a chance to see the Vario, but the Vario", "tokens": [50498, 509, 994, 380, 483, 257, 2931, 281, 536, 264, 691, 4912, 11, 457, 264, 691, 4912, 50622], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1087, "seek": 347832, "start": 3483.48, "end": 3485.32, "text": " is the world's smallest data structure.", "tokens": [50622, 307, 264, 1002, 311, 16998, 1412, 3877, 13, 50714], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1088, "seek": 347832, "start": 3485.32, "end": 3485.76, "text": " That's right.", "tokens": [50714, 663, 311, 558, 13, 50736], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1089, "seek": 347832, "start": 3485.76, "end": 3488.2000000000003, "text": " I'm putting data structures in lambda calculus.", "tokens": [50736, 286, 478, 3372, 1412, 9227, 294, 13607, 33400, 13, 50858], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1090, "seek": 347832, "start": 3488.2000000000003, "end": 3491.1200000000003, "text": " Here it is in the SK Combinator Calculus.", "tokens": [50858, 1692, 309, 307, 294, 264, 21483, 2432, 13496, 1639, 3511, 36002, 13, 51004], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1091, "seek": 347832, "start": 3491.1200000000003, "end": 3495.96, "text": " And this is not even close to how complicated it can get.", "tokens": [51004, 400, 341, 307, 406, 754, 1998, 281, 577, 6179, 309, 393, 483, 13, 51246], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1092, "seek": 347832, "start": 3495.96, "end": 3497.52, "text": " So really, why?", "tokens": [51246, 407, 534, 11, 983, 30, 51324], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1093, "seek": 347832, "start": 3497.52, "end": 3498.6400000000003, "text": " What is what?", "tokens": [51324, 708, 307, 437, 30, 51380], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1094, "seek": 347832, "start": 3498.6400000000003, "end": 3500.6000000000004, "text": " What?", "tokens": [51380, 708, 30, 51478], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1095, "seek": 347832, "start": 3500.6000000000004, "end": 3501.52, "text": " All right.", "tokens": [51478, 1057, 558, 13, 51524], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1096, "seek": 347832, "start": 3501.52, "end": 3504.88, "text": " To begin with, in my opinion, I was searching for the", "tokens": [51524, 1407, 1841, 365, 11, 294, 452, 4800, 11, 286, 390, 10808, 337, 264, 51692], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1097, "seek": 347832, "start": 3504.88, "end": 3506.36, "text": " answer to this why question.", "tokens": [51692, 1867, 281, 341, 983, 1168, 13, 51766], "temperature": 0.0, "avg_logprob": -0.17834837861763414, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.00022340574651025236}, {"id": 1098, "seek": 350636, "start": 3506.36, "end": 3510.52, "text": " I was trying to think, am I trying to evangelize like", "tokens": [50364, 286, 390, 1382, 281, 519, 11, 669, 286, 1382, 281, 24546, 1125, 411, 50572], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1099, "seek": 350636, "start": 3510.52, "end": 3513.1200000000003, "text": " learning abstract math or this and that?", "tokens": [50572, 2539, 12649, 5221, 420, 341, 293, 300, 30, 50702], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1100, "seek": 350636, "start": 3513.1200000000003, "end": 3514.0, "text": " Then I realized, you know what?", "tokens": [50702, 1396, 286, 5334, 11, 291, 458, 437, 30, 50746], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1101, "seek": 350636, "start": 3514.0, "end": 3517.56, "text": " The honest answer for myself is, it's just fun.", "tokens": [50746, 440, 3245, 1867, 337, 2059, 307, 11, 309, 311, 445, 1019, 13, 50924], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1102, "seek": 350636, "start": 3517.56, "end": 3518.7200000000003, "text": " I enjoy this.", "tokens": [50924, 286, 2103, 341, 13, 50982], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1103, "seek": 350636, "start": 3518.7200000000003, "end": 3521.8, "text": " I hope that you might enjoy it too.", "tokens": [50982, 286, 1454, 300, 291, 1062, 2103, 309, 886, 13, 51136], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1104, "seek": 350636, "start": 3521.8, "end": 3525.76, "text": " That's the entire basis of the book to Maka Making Bird.", "tokens": [51136, 663, 311, 264, 2302, 5143, 295, 264, 1446, 281, 376, 7849, 376, 2456, 15931, 13, 51334], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1105, "seek": 350636, "start": 3525.76, "end": 3528.88, "text": " It's a book of logic puzzles and games.", "tokens": [51334, 467, 311, 257, 1446, 295, 9952, 24138, 293, 2813, 13, 51490], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1106, "seek": 350636, "start": 3528.88, "end": 3534.1600000000003, "text": " It was written to act as a series of fun challenges.", "tokens": [51490, 467, 390, 3720, 281, 605, 382, 257, 2638, 295, 1019, 4759, 13, 51754], "temperature": 0.0, "avg_logprob": -0.2130243799707911, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.0010985629633069038}, {"id": 1107, "seek": 353416, "start": 3534.2, "end": 3536.7599999999998, "text": " It's a great mental workout.", "tokens": [50366, 467, 311, 257, 869, 4973, 12169, 13, 50494], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1108, "seek": 353416, "start": 3536.7599999999998, "end": 3539.7999999999997, "text": " Thinking along these patterns, let's you think about, oh", "tokens": [50494, 24460, 2051, 613, 8294, 11, 718, 311, 291, 519, 466, 11, 1954, 50646], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1109, "seek": 353416, "start": 3539.7999999999997, "end": 3541.72, "text": " my gosh, I have to think of where nouns are verbs and", "tokens": [50646, 452, 6502, 11, 286, 362, 281, 519, 295, 689, 48184, 366, 30051, 293, 50742], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1110, "seek": 353416, "start": 3541.72, "end": 3543.04, "text": " verbs are nouns.", "tokens": [50742, 30051, 366, 48184, 13, 50808], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1111, "seek": 353416, "start": 3543.04, "end": 3545.92, "text": " And I've got to be able to think about partially applied", "tokens": [50808, 400, 286, 600, 658, 281, 312, 1075, 281, 519, 466, 18886, 6456, 50952], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1112, "seek": 353416, "start": 3545.92, "end": 3548.7599999999998, "text": " functions, curried functions, higher order functions.", "tokens": [50952, 6828, 11, 1262, 2428, 6828, 11, 2946, 1668, 6828, 13, 51094], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1113, "seek": 353416, "start": 3548.7599999999998, "end": 3550.7599999999998, "text": " There's a lot of spaghetti.", "tokens": [51094, 821, 311, 257, 688, 295, 28556, 13, 51194], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1114, "seek": 353416, "start": 3550.7599999999998, "end": 3555.3599999999997, "text": " So it's really laying down the neurological groundwork for", "tokens": [51194, 407, 309, 311, 534, 14903, 760, 264, 48185, 2727, 1902, 337, 51424], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1115, "seek": 353416, "start": 3555.3599999999997, "end": 3558.44, "text": " understanding functional programming in general.", "tokens": [51424, 3701, 11745, 9410, 294, 2674, 13, 51578], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1116, "seek": 353416, "start": 3558.44, "end": 3561.44, "text": " The lambda calculus, as I said before, being the basis of", "tokens": [51578, 440, 13607, 33400, 11, 382, 286, 848, 949, 11, 885, 264, 5143, 295, 51728], "temperature": 0.0, "avg_logprob": -0.13527423499995828, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.0008038936066441238}, {"id": 1117, "seek": 356144, "start": 3561.44, "end": 3566.36, "text": " languages like Miranda and Lisp and Haskell, means that", "tokens": [50364, 8650, 411, 37000, 293, 441, 7631, 293, 8646, 43723, 11, 1355, 300, 50610], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1118, "seek": 356144, "start": 3566.36, "end": 3569.36, "text": " those languages, if you know this kind of", "tokens": [50610, 729, 8650, 11, 498, 291, 458, 341, 733, 295, 50760], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1119, "seek": 356144, "start": 3569.36, "end": 3574.16, "text": " combinatorial logic, it sets you up for success in those", "tokens": [50760, 2512, 31927, 831, 9952, 11, 309, 6352, 291, 493, 337, 2245, 294, 729, 51000], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1120, "seek": 356144, "start": 3574.16, "end": 3575.44, "text": " kinds of languages.", "tokens": [51000, 3685, 295, 8650, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1121, "seek": 356144, "start": 3575.44, "end": 3578.64, "text": " Because even though you're not required to think entirely", "tokens": [51064, 1436, 754, 1673, 291, 434, 406, 4739, 281, 519, 7696, 51224], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1122, "seek": 356144, "start": 3578.64, "end": 3581.8, "text": " that way, there's a large portion of those languages", "tokens": [51224, 300, 636, 11, 456, 311, 257, 2416, 8044, 295, 729, 8650, 51382], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1123, "seek": 356144, "start": 3581.8, "end": 3586.2400000000002, "text": " that assumes you are comfortable with that.", "tokens": [51382, 300, 37808, 291, 366, 4619, 365, 300, 13, 51604], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1124, "seek": 356144, "start": 3586.2400000000002, "end": 3589.32, "text": " And from that, we get all sorts of real world practical", "tokens": [51604, 400, 490, 300, 11, 321, 483, 439, 7527, 295, 957, 1002, 8496, 51758], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1125, "seek": 356144, "start": 3589.32, "end": 3590.2400000000002, "text": " benefits.", "tokens": [51758, 5311, 13, 51804], "temperature": 0.0, "avg_logprob": -0.11929874609012416, "compression_ratio": 1.6390041493775933, "no_speech_prob": 0.006485165096819401}, {"id": 1126, "seek": 359024, "start": 3590.3199999999997, "end": 3592.12, "text": " So I started writing them down.", "tokens": [50368, 407, 286, 1409, 3579, 552, 760, 13, 50458], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1127, "seek": 359024, "start": 3592.12, "end": 3594.3199999999997, "text": " A lot of them are intersections with just functional", "tokens": [50458, 316, 688, 295, 552, 366, 47664, 365, 445, 11745, 50568], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1128, "seek": 359024, "start": 3594.3199999999997, "end": 3595.2, "text": " programming in general.", "tokens": [50568, 9410, 294, 2674, 13, 50612], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1129, "seek": 359024, "start": 3595.2, "end": 3598.4799999999996, "text": " But many of these come directly from the lambda calculus.", "tokens": [50612, 583, 867, 295, 613, 808, 3838, 490, 264, 13607, 33400, 13, 50776], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1130, "seek": 359024, "start": 3598.4799999999996, "end": 3602.8799999999997, "text": " Closures, higher order functions, laziness,", "tokens": [50776, 2033, 329, 1303, 11, 2946, 1668, 6828, 11, 19320, 1324, 11, 50996], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1131, "seek": 359024, "start": 3602.8799999999997, "end": 3606.12, "text": " infinite data structures, garbage collection, function", "tokens": [50996, 13785, 1412, 9227, 11, 14150, 5765, 11, 2445, 51158], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1132, "seek": 359024, "start": 3606.12, "end": 3610.3599999999997, "text": " graph reduction, type theory, provable programming code,", "tokens": [51158, 4295, 11004, 11, 2010, 5261, 11, 1439, 712, 9410, 3089, 11, 51370], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1133, "seek": 359024, "start": 3610.3599999999997, "end": 3613.4399999999996, "text": " parallel processing for free, parametric polymorphism.", "tokens": [51370, 8952, 9007, 337, 1737, 11, 6220, 17475, 6754, 76, 18191, 1434, 13, 51524], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1134, "seek": 359024, "start": 3613.4399999999996, "end": 3615.6, "text": " I mean, it just keeps going on and on and on.", "tokens": [51524, 286, 914, 11, 309, 445, 5965, 516, 322, 293, 322, 293, 322, 13, 51632], "temperature": 0.0, "avg_logprob": -0.11654292412523953, "compression_ratio": 1.6653543307086613, "no_speech_prob": 0.0004172774206381291}, {"id": 1135, "seek": 361560, "start": 3615.64, "end": 3619.7999999999997, "text": " And this all derives straight out of purely mathematical", "tokens": [50366, 400, 341, 439, 1163, 1539, 2997, 484, 295, 17491, 18894, 50574], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1136, "seek": 361560, "start": 3619.7999999999997, "end": 3624.0, "text": " fields that existed even before computers did.", "tokens": [50574, 7909, 300, 13135, 754, 949, 10807, 630, 13, 50784], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1137, "seek": 361560, "start": 3624.0, "end": 3626.0, "text": " But at the end of the day, I really just think that there's", "tokens": [50784, 583, 412, 264, 917, 295, 264, 786, 11, 286, 534, 445, 519, 300, 456, 311, 50884], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1138, "seek": 361560, "start": 3626.0, "end": 3628.44, "text": " a lot of elegant mathematical beauty to it.", "tokens": [50884, 257, 688, 295, 21117, 18894, 6643, 281, 309, 13, 51006], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1139, "seek": 361560, "start": 3628.44, "end": 3630.52, "text": " And it's kind of art for art's sake.", "tokens": [51006, 400, 309, 311, 733, 295, 1523, 337, 1523, 311, 9717, 13, 51110], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1140, "seek": 361560, "start": 3630.52, "end": 3633.68, "text": " I hope that this has inspired you to become interested in", "tokens": [51110, 286, 1454, 300, 341, 575, 7547, 291, 281, 1813, 3102, 294, 51268], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1141, "seek": 361560, "start": 3633.68, "end": 3638.08, "text": " this topic and maybe to go read some more about it.", "tokens": [51268, 341, 4829, 293, 1310, 281, 352, 1401, 512, 544, 466, 309, 13, 51488], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1142, "seek": 361560, "start": 3638.08, "end": 3641.2, "text": " Find a little bit of slides.", "tokens": [51488, 11809, 257, 707, 857, 295, 9788, 13, 51644], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1143, "seek": 361560, "start": 3641.2, "end": 3642.52, "text": " Here are all the combinators.", "tokens": [51644, 1692, 366, 439, 264, 38514, 3391, 13, 51710], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1144, "seek": 361560, "start": 3642.52, "end": 3643.96, "text": " Here are all the booleans.", "tokens": [51710, 1692, 366, 439, 264, 748, 4812, 599, 13, 51782], "temperature": 0.0, "avg_logprob": -0.12577611605326336, "compression_ratio": 1.685823754789272, "no_speech_prob": 0.0007321020239032805}, {"id": 1145, "seek": 364396, "start": 3644.0, "end": 3647.4, "text": " The numerals, church arithmetic, boolean ops in the", "tokens": [50366, 440, 7866, 1124, 11, 4128, 42973, 11, 748, 4812, 282, 44663, 294, 264, 50536], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1146, "seek": 364396, "start": 3647.4, "end": 3649.96, "text": " church arithmetic, data structures.", "tokens": [50536, 4128, 42973, 11, 1412, 9227, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1147, "seek": 364396, "start": 3649.96, "end": 3652.28, "text": " All of this is in the deck.", "tokens": [50664, 1057, 295, 341, 307, 294, 264, 9341, 13, 50780], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1148, "seek": 364396, "start": 3652.28, "end": 3654.8, "text": " It's not an hour-long talk, is it?", "tokens": [50780, 467, 311, 406, 364, 1773, 12, 13025, 751, 11, 307, 309, 30, 50906], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1149, "seek": 364396, "start": 3654.8, "end": 3657.48, "text": " And you've probably all been wondering, wait a second.", "tokens": [50906, 400, 291, 600, 1391, 439, 668, 6359, 11, 1699, 257, 1150, 13, 51040], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1150, "seek": 364396, "start": 3657.48, "end": 3660.12, "text": " Where's the most famous combinator of all, the Y", "tokens": [51040, 2305, 311, 264, 881, 4618, 2512, 31927, 295, 439, 11, 264, 398, 51172], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1151, "seek": 364396, "start": 3660.12, "end": 3661.12, "text": " combinator?", "tokens": [51172, 2512, 31927, 30, 51222], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1152, "seek": 364396, "start": 3661.12, "end": 3663.12, "text": " Well, there's the Y combinator.", "tokens": [51222, 1042, 11, 456, 311, 264, 398, 2512, 31927, 13, 51322], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1153, "seek": 364396, "start": 3663.12, "end": 3664.4, "text": " What does it do?", "tokens": [51322, 708, 775, 309, 360, 30, 51386], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1154, "seek": 364396, "start": 3664.4, "end": 3666.8, "text": " I'll just leave you with this as a brain teaser.", "tokens": [51386, 286, 603, 445, 1856, 291, 365, 341, 382, 257, 3567, 35326, 13, 51506], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1155, "seek": 364396, "start": 3666.8, "end": 3670.44, "text": " The lambda calculus has neither loops nor recursion.", "tokens": [51506, 440, 13607, 33400, 575, 9662, 16121, 6051, 20560, 313, 13, 51688], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1156, "seek": 364396, "start": 3670.44, "end": 3672.6, "text": " So how does it do either of those things?", "tokens": [51688, 407, 577, 775, 309, 360, 2139, 295, 729, 721, 30, 51796], "temperature": 0.0, "avg_logprob": -0.14805923683055933, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.00023048586444929242}, {"id": 1157, "seek": 367260, "start": 3672.6, "end": 3675.12, "text": " Because it can calculate anything calculable.", "tokens": [50364, 1436, 309, 393, 8873, 1340, 4322, 712, 13, 50490], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1158, "seek": 367260, "start": 3675.12, "end": 3676.04, "text": " This is the answer.", "tokens": [50490, 639, 307, 264, 1867, 13, 50536], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1159, "seek": 367260, "start": 3676.04, "end": 3680.44, "text": " The Y combinator allows for recursion in a language that", "tokens": [50536, 440, 398, 2512, 31927, 4045, 337, 20560, 313, 294, 257, 2856, 300, 50756], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1160, "seek": 367260, "start": 3680.44, "end": 3683.12, "text": " doesn't have recursion built into it.", "tokens": [50756, 1177, 380, 362, 20560, 313, 3094, 666, 309, 13, 50890], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1161, "seek": 367260, "start": 3683.12, "end": 3686.2799999999997, "text": " Unfortunately, I cannot demonstrate this in JavaScript", "tokens": [50890, 8590, 11, 286, 2644, 11698, 341, 294, 15778, 51048], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1162, "seek": 367260, "start": 3686.2799999999997, "end": 3689.48, "text": " because it goes on forever.", "tokens": [51048, 570, 309, 1709, 322, 5680, 13, 51208], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1163, "seek": 367260, "start": 3689.48, "end": 3690.92, "text": " This is a fixed point combinator.", "tokens": [51208, 639, 307, 257, 6806, 935, 2512, 31927, 13, 51280], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1164, "seek": 367260, "start": 3690.92, "end": 3694.08, "text": " It infinitely just keeps evaluating itself, which works", "tokens": [51280, 467, 36227, 445, 5965, 27479, 2564, 11, 597, 1985, 51438], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1165, "seek": 367260, "start": 3694.08, "end": 3696.68, "text": " in a lazy language like Haskell or the lambda calculus", "tokens": [51438, 294, 257, 14847, 2856, 411, 8646, 43723, 420, 264, 13607, 33400, 51568], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1166, "seek": 367260, "start": 3696.68, "end": 3697.68, "text": " itself.", "tokens": [51568, 2564, 13, 51618], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1167, "seek": 367260, "start": 3697.68, "end": 3701.36, "text": " So unfortunately, because JavaScript is like the thing", "tokens": [51618, 407, 7015, 11, 570, 15778, 307, 411, 264, 551, 51802], "temperature": 0.0, "avg_logprob": -0.12732924212206592, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.0010986056877300143}, {"id": 1168, "seek": 370136, "start": 3701.36, "end": 3703.7200000000003, "text": " on the right and not like the thing on the left,", "tokens": [50364, 322, 264, 558, 293, 406, 411, 264, 551, 322, 264, 1411, 11, 50482], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1169, "seek": 370136, "start": 3703.7200000000003, "end": 3706.08, "text": " we need a slight variation on the Y combinator", "tokens": [50482, 321, 643, 257, 4036, 12990, 322, 264, 398, 2512, 31927, 50600], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1170, "seek": 370136, "start": 3706.08, "end": 3709.2400000000002, "text": " called the Z combinator, which is the exact same as the Y", "tokens": [50600, 1219, 264, 1176, 2512, 31927, 11, 597, 307, 264, 1900, 912, 382, 264, 398, 50758], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1171, "seek": 370136, "start": 3709.2400000000002, "end": 3711.0, "text": " combinator except the middle of it", "tokens": [50758, 2512, 31927, 3993, 264, 2808, 295, 309, 50846], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1172, "seek": 370136, "start": 3711.0, "end": 3715.44, "text": " has a funk, which defers calculation until required.", "tokens": [50846, 575, 257, 26476, 11, 597, 1060, 433, 17108, 1826, 4739, 13, 51068], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1173, "seek": 370136, "start": 3715.44, "end": 3718.08, "text": " So the Z combinator I could demo if I wanted to,", "tokens": [51068, 407, 264, 1176, 2512, 31927, 286, 727, 10723, 498, 286, 1415, 281, 11, 51200], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1174, "seek": 370136, "start": 3718.08, "end": 3722.2000000000003, "text": " but I haven't set that up in my code so I won't today.", "tokens": [51200, 457, 286, 2378, 380, 992, 300, 493, 294, 452, 3089, 370, 286, 1582, 380, 965, 13, 51406], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1175, "seek": 370136, "start": 3722.2000000000003, "end": 3723.84, "text": " All right, that is the talk.", "tokens": [51406, 1057, 558, 11, 300, 307, 264, 751, 13, 51488], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1176, "seek": 370136, "start": 3723.84, "end": 3724.6400000000003, "text": " Thank you very much.", "tokens": [51488, 1044, 291, 588, 709, 13, 51528], "temperature": 0.0, "avg_logprob": -0.16231410256747542, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0028886364307254553}, {"id": 1177, "seek": 372464, "start": 3724.64, "end": 3725.44, "text": " Any questions?", "tokens": [50366, 2639, 1651, 30, 50404], "temperature": 1.0, "avg_logprob": -1.3536758422851562, "compression_ratio": 0.6363636363636364, "no_speech_prob": 0.015079985372722149}], "language": "en"}