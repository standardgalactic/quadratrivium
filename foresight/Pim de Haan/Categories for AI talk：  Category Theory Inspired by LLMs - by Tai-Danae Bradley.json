{"text": " Oh, sorry, yes. Is this recording? Good to go. Okay, so hello everyone and welcome to the third guest lecture of the cats for AI series. As you might have seen on the on the email list. We've finished with the main lectures and even two guest lectures and we're now transitioning in a different mode. So we're going to be having an irregular schedule of guest talks. And which are going to from now on be open to the public so if you've got a speaker recommendations please do not hesitate to reach out. And first in this one that this open kind of scheduling is a talk from tight and a Bradley, she's going to be telling us about category theory inspired by large language models, I'm very excited about the talk so tight please take it away. All right, thank you Bruno and Petra and all of the organizers for the invitation. And I just want to say I think it's really exciting to see that there's so much interest in category theory outside of the field of pure mathematics. And in particular in machine learning so I think that's very inspiring, I have a lot to learn from you all and so I hope that maybe I can give back something interesting in today's talk. So yes, as the title suggests, I want to share with you some category theory that's come from comes from work with some collaborators and I which I'll share in a second. That's inspired by large language models so I was asked to give this talk I think several months ago, and I thought it was very convenient that open AI release chat GPT, you know, like less than two weeks ago. So maybe I'm sure all of you have heard about that by now and I think it's kind of nice that, you know, language model or maybe fresh and everyone's mind. So, I couldn't resist. I know that you have all probably heard about chat GPT and you probably see in your own examples. I can resist just sharing one that I did. So I would say, don't really pay attention to what's on this slide because it's not really in the theme of the talk. I was just jumping into chat GPT, and I had a question about some physics thing that I was interested in. And so I, I gave it this, this thing called a quantum state just think of it as a vector, and I asked GPT chat GPT does this vector satisfy a certain like does it satisfy a property. And I thought it was really interesting that it got the answer wrong, but it knew what math steps to take and what pieces of that math to analyze in order to reason about a yes or no answer does this thing satisfy a property. So, it kind of like knew what linear algebra things to do you start with this vector and then you get a matrix and then you can put something on that matrix and then you apply this formula, and then at the end you reason about it. And so I thought that was like, oh, pretty neat, even though overall it kind of got stuff wrong, and at least kind of knew what to do without being told to reason about, you know, how would one even arrive at the answer. At this point, of course, there's lots of chatter and lots of buzz, you know, is this a GI, or is it garbage or whatever. And I don't really want to get too much into that. I do want to kind of draw one idea to the forefront of our minds. And that's this fact that the training data for large language models is really interesting. It's just raw text. And so, from a mathematician's perspective, that prompts a question like what what structure is in unstructured text. That allows you to like form concepts and reason about things so that you get actual coherent text. So whether or not, you know, chat GPT got the answer right or wrong. Okay, fine. But what's interesting is that there's no like textual garbage on this page right like all of these words go together and it sounds like coherent English it is coherent English, but you're just starting with, you know, raw text, or, you know, probability distributions on text configurations. And you can ask the question, what mathematical framework, can we, you know, write down that describes that passage from probability distributions on text continuations to some space of meaning or to some like semantic information. Like what's the math there. And, and you might ask this like, can we look inside of a transformer and like point to things and say here. Okay, so that's one thing you could do. That's not quite what I want to do. But maybe what I can describe in this talk is kind of an overall category theoretical framework that maybe can provide for you some tools if you wanted to dig further. So that's why the title of this talk is category theory, inspired by a large language models, as opposed to the category theory of large language models I'm not making a grandiose claim like that. But it is really interesting to ask, like how far can you get with just probability distributions on texts, or text continuations. And I think that category theory provides some some good and very natural tools to kind of exploring this question. So let me go to the next slide. So here's the outline for the remaining few minutes. First, I want to share with you a category of language and some advantages of that. We'll also see some disadvantages and then I will describe for you an enriched category of language so you've, we've heard a lot about category theory in this series. But maybe a new idea might be something called enriched category theory so I won't assume you have heard of that already. So I'll kind of explain a little bit of what that means, and then tie it back into this question that we're trying to answer in the context of language. So the next thing I'm sharing today is based on a paper together with John Torella and Janice Losopoulos. It came out earlier this year, earlier in the spring and enriched category theory of language. So, since this is an introductory series on category theory, what I thought I would do is just kind of give you a bird's eye view, or the highlights of some of the ideas that that we're working on. And then if you're interested, I would say, okay, for more details, you know, we can chat after you can take a look at the paper. Now, before all that, I want to motivate those ideas by sharing with you an analogy. And there's a really curious analogy between linear algebra and category theory is simple. I think it's really interesting. And maybe it might appeal, you know, to the machine learning community since we deal with vectors and major sees a lot. And I like this analogy a lot, it'll come up later but I also think it really nicely motivates the ideas that is kind of the main theme of the paper. Speaking of themes, this analogy that I will share with you kind of centers around a very common theme in mathematics. And I have to credit John Torella for really emphasizing this idea because I think it just illustrates in a crystal clear way the advantages of thinking from a category theoretical perspective. Okay, so before I share with you this analogy, let me inch towards it by telling you a common theme in mathematics. So, it's very well known in math that if blah, something has nice structure, and I'll say that means in a second, then functions from a fixed set into that thing have nice structure to. Okay, what do I mean. Think about a set x there it's on the screen. Okay, a set is just like a bag of marbles or something, it has no structure. So, if I have elements in a set x, I can't add them, I can't multiply them I can't combine them in any way to do anything meaningful it's just this set that has no structure. There is another set that has a lot of nice structure, kind of readily available and that's the reels like, for example, there's other things you could think of but let me just think about the reels. In, in our I can add things, we can multiply them. We can do all sorts of things so it has nice structure. Well, what is a function from a set x into the reels. I think for a second, for simplicity, just suppose that x has three elements, that's a three element set. So a function from a three element set into the reels is a choice of three numbers. So, if I look at all functions from x into the reels, I have the collection of all triples of numbers, and that is familiar to us that's just three dimensional space. In other words, what I'm getting at here is that the collection of all functions from let's say a three element set into our has nice structure. I can actually organize those elements, you know the image of this function as this array suggestively, because if I have two of these functions now or two of these arrays, I can add them. You just add functions point wise, which corresponds to sort of adding the entries of these vectors element wise. So you can multiply a function by a scalar and get another function that just corresponds to multiplying the entries of this vector component wise, you can multiply actually function together. So I'm hinting at here, which maybe you can see is that functions from x into our actually form of vector space. We usually denote that vector space by our to the three, our three. I could write this as our x our race to the power of x. In fact, we've seen this notation earlier, when Petter talked about exponential objects. So this is the set of all functions from a set into our is not just this that turns out to be a vector space. And that's because those functions inherit inherit structure from this sort of ground field. Okay, so vector spaces or linear algebra are an example, really nice example of where, if something has nice structure, then functions into that thing also inherit nice structure. And here's the key is that a very similar story holds in category theory. Here's kind of the analogy I like to have in mind. On the one hand, we just started with a set, and we, we said, okay, you can't really do much with the set there's no structure, it's just a collection of things. Now, if someone just hands you an arbitrary category, what do you know about it. Okay, you know I have some objects and some morphisms between those objects and composition and identity morphisms but that's it. You don't know if C is just an arbitrary category, if you can combine objects to get a new object in your category. You have other structure looking looking about maybe in specific categories you do but in general just the definition doesn't give you that. So, what you may like to do, just like in the case of sets. There, we thought of a specific set, like the reels that had a lot of structure, and we looked at functions into that. And obviously, it can be very fruitful to think about a category that has a lot of structure that's really nice, and look at functors into that category. So what category is that well it turns out that the category of sets is a really good choice. So analogous to looking from functions at functions from a set into the reels. Now, it turns out that looking at functors from an arbitrary category C into the category of sets is there's a lot of rich mathematics there. So why is that. Let me just say just like in the reels you can add numbers you can multiply them you can combine numbers to get new numbers in the category of set you can do this also. So, at the beginning of this series, Petter talked about an over fresher memory, you know you've heard of products or the Cartesian product of sets. He also mentioned the co product of sets, or you know I said the exponential object. So set has this nice property that you can take a bunch of sets and combine them in some way to get a new set. Now let me just kind of pull back the curtain and speak plainly for a minute. So the idea that I'm trying to mention right now are these constructions and category theory called limits and co limits. What I'm saying is that set has all limits and set has all co limits. So here's kind of what that means I think some of you are have probably heard these words or you're familiar with them already. But in mathematics, quite often what you want to do, you have a whole bunch of mathematical objects, maybe their sets, or maybe their groups, or maybe their topological spaces or maybe their vector spaces, and you ask, is there a way that I can take this collection of objects and combine them in such a way as to get a new object in my category. Now, there are sort of two typical ways that you can do this and by typical I mean these constructions are found all across the mathematical landscape. And it turns out that when you kind of strip the constructions of their deep of their details and just look at the pattern. These constructions turn out to fall into two categories for lack of better word. I mean that in like the English sense not the math sense. So on the one hand, you can form what's called the limit of those objects, and depending on how that's constructed these have familiar names like the intersection of two sets, or the Cartesian product of two sets, or the Cartesian product of two topological spaces, direct sums of vector spaces. Meets, if you have a lattice, and you can ask for the meat or, you know, sort of the minimum element, minimum element in the collection your lattice that's that's actually an example of a limit turns out greatest common divisors are also examples of these things. If you have a group homomorphism and you ask for its kernel, all of these constructions on the left hand side are subsumed by one single idea and category theory they are instantiation of one single idea that's called a limit. And dual to that, you know and category theory will always like stick the word co in front of something you kind of reverse the arrows and so you get dual operations. On the other hand, on the right hand side, you have things like unions co products direct sums again joins in a lattice dual to greatest common divisors least common multiple and co kernels. So these are all examples of things called limits and common limits, we won't worry about the actual definition, like they satisfy some universal property, but I mentioned that to say that in the category of set. It has this wonderful property that you can take any collection of sets, and then asked for the limit, or asked for the co limit, and it turns out to exist. So it's another set in that category, and it satisfies universal properties. You cannot do that with any category, any arbitrary category may or may not have that ability. It turns out the category sets does. So that's just to suggest you that just like the real numbers was a nice set to look at functions into analogously the category of sets is a nice category to look at functors into it. These functors because this is such a nice choice they have a name. So a functor from an arbitrary category C into the category sets. It's called a co pre sheaf. Sometimes, you may want to look at contra variant functors from C into set. So it's just a functor where kind of flips the arrows. So in that case, folks will put a little OP above C. They see up into set. Those are called pre sheaves. So pre sheaves. Let's just say functors. In any case, this is a nice thing to look at it turns out that functors from C into set itself form a category so just like functions from x into our form a set with structure. Functors from C into set form a category. It's a functor category and in fact, I think Pam talked about functor categories in his talk. There the notation might have been square bracket from C to set, but this exponential notation is this notation for that same concept. So it turns out objects or functors morphisms are natural transformations, but that's just kind of me drawing the analogy. Now let me give you one more analogy. And then we'll move on to the language. There are very special vectors on the left hand side. In particular, for each element in the set X, there's a very particular vector associated to the element and the analogous thing holds on the right hand side, and that vector is a one hot encoding or a basis vector. So for every element in the set X on the left hand side, there is a particular function. That sort of sends any other elements in the set to one, if it's the same as the element I chose or to zero otherwise, or if I write this out as an array it's just a vector with all zeros, except for one in the appropriate spot. Analogously, there are functors from a category C into the category set, one of these code precheves that is very special. And these are called representable functors. So for each objects little C in my category. There is a functor from the category into sets. There's another object in the category D. And it sends that object to the set of all morphisms from your given object C into D. I've seen this notation already in this series. Sometimes this set is denoted harm from C to D. Some other people, instead of writing harm, they'll write just the name of the category C so it kind of reminds you oh morphisms in what category C. I like to think of, these are called representable functors, these harm functors, representable functors, these are a particular kind of code precheve, or if I were to kind of move the argument to the left, it would be a precheve. I'll try later, not now, but I like to think of representable functors as kind of analogous to these one hot encodings, because just like any other vector is built up from one hot encodings. Similarly, any other code precheve is built up from these representables, but we'll say that later. So I like this analogy. The reason I mentioned this is because these representable functors will play an important role in just a second. Okay, so that's my analogy for linear algebra maps into law, inherit structure from blah. So in particular functions into the category set inherit really nice structure. Now let's see how this theme or this analogy plays out in the context of language. So let me describe for you a category of language. We'll see that it's nice, but like a set, you can't really do much with it. So we're going to look at functors out of that category. So let me describe that for you now is very simple. So here's a category, consider all strings from some finite set of atomic symbols. So if your finite set is the set of all words in English. Okay, it's a very large set but it's fine. You can just think of the take the free modeling on that set right all strings. The sub string containment defines a preorder on this set. In other words, you know, we can make sense of when one string is contained in another string x is contained in y, and I can denote that by less than or equal to. So I think Penn mentioned in his talk, the concept of a preorder. So in my way of reminder, a preorder is a binary relation denoted by less than or equal to that's reflexive. So every substring is every string is contained in itself. So X is less than X. And that's transitive. Right if blue on my screen is contained in small blue and small blue is contained in small blue marble that I know blue is contained in small blue marble. So that's transitivity. And as Penn mentioned, every preordered set is a category reflexivity is exactly an identity morphism transitivity is exactly composition. So I just defined for you a preordered set, aka a category. And it just has at most one morphism between any two objects in that category. So it's very simple. There's an arrow from X to Y whenever X is a substring of wine. Let's call this category L. Fine, it just kind of tells you what goes with what does this expression go with this expression. If the answer is yes there's an arrow. If the answer is no there's no arrow. It just tells you what goes with what. Okay, it's nice but that's very limited. In particular, I cannot, I cannot make sense of, like what's a concept in this category, or what's the context of something or can I combine ideas to get a new idea I don't have any of that structure here. So this is a cue from this theme that we just spent several minutes thinking about. And what we'd like to do is now consider functors from that category into the category of set. So this is just repeating that theme and representable functors these hum functors are particularly nice in this case. And I like to think of them as like a first approximation to the meaning of of an expression. Let's do that. Okay, pick, pick an expression in the category like the word blue. And let's look at the hum functor hum blue blank. Okay, where if I put in an expression X and the blank on the middle here, I get a set. This set just tells me, is there an arrow from blue to X, or not. If there is an arrow from blue tax, then home of blue comma X is just the one point set representing that one arrow. There's no arrow from blue tax. If blue is not contained in X, then I get the empty set. Okay, now I like this, because this representable functor sort of its pre image is the collection of all expressions that contain the word blue. And this reminds me of the onata lemma. So the onata limit is this. I'm sure you've heard of it this famous theorem and category theory, which essentially says that a mathematical object is completely determined by the network of relationships that has with other objects in the category. So you want to understand something important or all all important things about an object, you can look at morphisms out of that object or morphisms into it. And here, this representable functor picks out exactly the network of ways that the word you've chosen, like blue, or whatever fits into all expressions that contain it in the category in your language. So, you know, if you think about language a lot, then I'm sure you've heard, you know, this famous quote by John first, you show no word by the company it keeps. I mean, this is how word embeddings work to something of the meaning of a word is sort of captured in its context. So this representable functor captures precisely that context. So you might think of this as like capturing something of meaning but you know I put that in quotes, and I say it's a first approximation, because as you can already guess this isn't everything. You know, there's nothing about the distributional information here. This is just kind of yes or no bare bones, but it's a good start. So this is kind of like the native perspective. When I see representable functors, I kind of think, ah, the network of ways that that word fits into its environment so capture something of that. So here's, you know, I'm just kind of belaboring the point. But when I see this functor, another image that I have in mind is like, it's kind of like a vector. And I put sort of above the equal sign because this is not proper category theory. But when I think of the representable functor, I think of the vector of zeros and ones, or empty sets and one point sets right indexed by all of the expressions in the language, where an empty set in that slot, if blue is not contained in that expression like deep red being cherries, or a one point set in that slot if blue is contained in that, in that expression, that's indexing that spot like small blue marble, beautiful blue ocean, etc. So when I think of representable functor, I think of like a vector whose entries are empty, or, or one point set indexed by expressions in the language. Okay, this is just like something that I have in my mind. Now, why did we do this to make our lives more complicated? No. So as we said, when you look at functors into a category with rich structure, like set, you can do things with it. So I was kind of hinting that these representable functors behave like building blocks. We can actually use representable functors, or these co pre sheaves to construct new co pre sheaves, and we can do that by using the structure that is in the base category set. So I mentioned set has all limits, all co limits. It's also Cartesian close. What that means it has something like an internal home, which if you unwind all of that. What it suggests is that we have some kind of notion of conjunction. That's kind of like what a limit is disjunction. That's kind of like what a co limit is enclosure Cartesian closure is kind of something like implication. So, I want to give you a concrete example how am I making these connections like why is a co limit like disjunction or or. A concrete example of what that looks like. So suppose I have, you know, a functor representing red. That's like the network of ways red fits into the language. Suppose I also have the functor representing blue. Hey, the one we just looked at. So I'm claiming that if I have two functors, I can take what's called their co product. That's a kind of co limit, which I claim is analogous to to disjunction. I claim it's analogous to the concept quote unquote of red or blue. So here's why I make that claim. When you when you write down the definition. Here's what you find. So a co product means I can take two functors harm red comma blank co product together with harm blue comma blank. That defines a new functor that sends an expression X to the union of the two sets, harm of red index and harm of blue index. So here's what that means. I get a new functor, a new co pre chief. And again, if I envision it is like a vector whose entries are empty set or, or something else. What you find is that this functor is sort of supported on all texts that either contain red or contain blue or contain both of them. It's non empty on the union of all of those sets. So, for example, deep red being cherries that contains the word red so this that I get is the one point set small blue marble that contains the word blue. So I get the one point set. Did you put the kettle on contains neither of those words. So I get the empty set red and blue fireworks contains both. So I actually get the union of two one point sets or two points that. Okay, so it's not empty this functor this co product of red and blue is not empty on all sets that either contain red, sorry, all expressions that either contain red, or blue or both. And that pairs well with this idea of union as like or when dealing with sets. So that's kind of why we think of co products is kind of like disjunction. Okay, so there are other things you can do, you can take the product, you can do this thing called internal home which is like implication. Writing that down gets a little bit more complicated, but there are other limits and co limits. So the point is, so here's kind of a summary of what we've done so far. So we started with a very bare bones category L. It's like a preorder, it just tells you what goes with what. So, in that sense, you can kind of think of it as like syntax, maybe. What goes with what. Okay. So we took, we passed from that category to the set of the category of co pre sheaves on it. So that's what I'm kind of thinking as a synantics. So that's kind of where the meaning is in this United types sense. So every expression on the left, who responds to a representable functor on the right so that functor just picks out the kind of context of that word or all expressions that contain that word. This passage from left to right, this assignment, blue goes to harm blue, comma blank. That turns out to be a functor that functor is called the United embedding. So I mentioned that in case you've heard that word. The op that you see on the left, it just is saying that this United embedding is contra variant so versus arrows but that's kind of like bookkeeping. So, so this is just a summary of what we've done so far. We started with like a kind of in quotation marks think of it as like a syntax category very bare bones just tells you what goes with what, not a lot of structure, like no structure. And then if you pass to co pre sheaves or functors from that category into set, you have the ability to capture something of meaning of a word in the sense of john first, in the sense of the native lemma. And then you actually have structure in that category, and you can start to combine things in a way that kind of feels like logic or maybe like reasoning. I like to think of pictures so here it is, you know I start with a word and then I send it to like kind of this network of ways that it fits into the category. This is nice, but as you can already guess, it's very limited. It's just kind of like binary yes or no does this fit in kind of discrete. It has nothing. It knows nothing about the distributional information of language. So what you'd really like to do what would be better is if you have like you know version 2.0, where if I'm, you know, if you can give me the fact that blue is contained in small blue, but also what's the probability of seeing that. If I see the word blue what's the probability that you know it'll be completed by small blue marble, or, you know, whatever that probability is it's going to be higher than like I woke up and had a blue idea, just to borrow, you know, Chomsky or something. So you'd like to really wait the arrows in your category with conditional probabilities of continuing an expression with a larger expression. And then if you include this distributional information, then you can ask, okay, can I combine concepts there and is that kind of capturing the sort of framework of getting something like logic or reasoning from, you know, just knowing what goes with what together with the probabilities. Now the nice thing is that category theory provides a way to do this so this is exactly what we find an enriched category theory. So let me let me give a quick introduction to that what is an enriched category theory. So in category theory, if you have two arrows x to y. I'm going to give you a sum of x to y or what I'm denoting by C x to y that's the set of all morphisms from x to y. Okay, you asked that that be a set. The point is that in enriched category theory, that may not just be a set. It could be a set with extra structure or could not be a set. It could be a set with extra structure will think about it. If x and y are vector spaces. Then the set of all linear transformations from x to y is also a vector space. It's not just a set you can add linear transformations you can scale or multiply them. The HOM set is a set with additional structure it's actually a vector space. So in that case, one says the category of vector spaces is enriched over the category of vector spaces. So whatever your HOM objects are you say your category is enriched over that. I just said that on the upper left hand side. If this HOM set is a vector space you say oh my category is enriched over the category of vector spaces. If your HOM set is actually a group, you say your category is enriched over the category of groups. If it's a topological space you're enriched over topological spaces. If it turns out on the lower left, if this turns out to be a truth value like a zero or one, your categories enriched over truth values, those turn out to be exactly pre-orders. So those things that Pam was talking about earlier, these are actually doing enriched category theory. What if your HOM set is just a set, then your category is enriched over a set, and you're just doing ordinary category theory. So ordinary category theories like a special case of enriched category theory. That's something that we're most interested in for the remaining few minutes. If this is a conditional probability in a way that I'll explain in a second, then your category is enriched over the unit interval and that's kind of what I want to focus on just quickly. So what's the unit interval? The unit interval, think of it as a category whose objects are numbers between zero and one, and where there's an arrow from little a to little b if a is less than or equal to b. So it's a pre-order. Now, the unit interval viewed as a category have a lot of the same properties as the category of sets. So what I'm kind of hinting at is that we're now going to want to look at functors into the unit interval, which will be analogous to what we just did by looking at functors into set. So in what ways is the unit interval like the category of sets? So on the slide, I showed you, okay, on the one hand, your objects are sets or numbers. Your morphisms are functions or this pre-order. But what else do these two categories have in common? Well, they have a manoidal product. In other words, in the category of set, you can take the Cartesian product of two sets, you can multiply sets, and there's a unit for that multiplication, namely the one point set. So what that means is like, you know, a set x times the one point set is just isomorphic to x. So it's a unit with respect to this multiplication. Well, the unit interval also has a multiplication, of course, multiplication, and it has a unit with respect to that, namely the number one. So this turns out to be a manoidal product. So both categories are manoidal categories. But wait, there's more. We mentioned that the category of sets has, you can construct co-limits or limits. Turns out the same thing is true in the unit interval. So when you unwind the definition, what's the limit, what's the co-limit? It turns out just to be minimum. Even if I have a bunch of numbers in the unit interval, I can take their meat or their limit. It turns out just to be the minimum of the numbers in that set. And then finally, co-limits turn out just to be maximum. So, okay, both categories have all limits and co-limits, and then, you know, there's more. You have closure. So that kind of means you have this internal harm, or like Petra was saying earlier in this series, you have these exponential objects, which are kind of defined with respect to this multiplication. I don't want to touch into that, but I just want to kind of suggest in your mind that the unit interval can now play a similar role that the category of sets did. So how does this play out? Well, it turns out that we can discuss a category enriched over the unit interval. Well, just like a category enriched over sets is an ordinary category, we have an analogous idea where we switch out sets with the unit interval. So what is a category enriched over the unit interval, also called a zero one category? Well, just like with a normal category, you start with some objects. Similarly, a zero one category consists of some objects. What else do you have? Well, in category theory, for every pair of objects, X, Y, you ask for a set, hum, X, Y, or C of X, Y. Now I'm replacing set with the unit interval. So for every pair of objects on the right hand side, little X, little Y, I asked for a hum object, which is just an element in the unit interval. So for every pair of objects, there's a number associated with them. And I think of that as a hum number or hum object. Okay, what else is a zero one category consists of? Well, in normal category theory, we ask for composition, aka, if I have a way to get from X to Y, and why did Z, then I can compose them and get, you know, a morphism from X to Z. So now looked at the Cartesian product on the left hand side, we said that that's analogous to multiplication of numbers. So that's what you see on the right hand side. And just like morphisms are now this preorder, what I asked now for to have a zero one category is that there's a morphism from this hum object Y to Z times the hum object X to Y, that there's a morphism from that product to the hum object Oh, that should say X to Z on the right hand side. That's a typo. Okay, and then, you know, there's more, you can also ask for identities and identity morphism on an object X is just really a function from the one point set into the calm set from X to itself. So a morphism from a one point set into a set just picks out an element in that set. So similarly, if I kind of look at the analog on the right hand side, instead of a one point set I have the number one, which plays the role of unit. And instead of an arrow I have this less than or equal to. And so this is the data of the zero one category and of course you ask it to satisfy some axioms. You can also make sense once you have the notion of a, of a category enriched over the unit interval, you can discuss functors between two such categories but really it's, it's not a category in the traditional sense it's an enriched category. So you can make sense of enriched functors. So I'll just kind of go over this briefly but you can imagine on the right hand side. It's a function from the objects of your first enriched category to the objects of the second, that satisfies some inequality that's very reminiscent of what you might have an ordinary category theory. For the sake of time let's let's not think too deeply about this, because the real punchline is that what happens when D, the category you're mapping into is a really nice category like the category of sets previously that gave us co pre sheaves and we saw that had a really nice nature. So in this new kind of iteration, I want to replace set with probabilities, the zero one. And I can look at enriched co pre sheaves into the unit interval. That turns out as you may guess to form its own enriched category and you can talk about enriched natural transformations and make sense of all this. So let's not, you won't worry about them too much but that's kind of the idea. I just want to repeat the same story that we just did, but now I replaced the category of sets with the unit interval. So, I'll just kind of summarize and give you the punchline here's what happens when you do that. So here's now, you know, semantics 2.0 or syntax 2.0 or language as an enriched category. Like earlier I had a category with an arrow. If one expression is contained in the other. I'm going to now have the exact same thing and do exactly what I said I wish we could do, namely, decorate it with a conditional probability. The punchline is that fits exactly into this framework of enriched category theory. So language is a zero one category. Its objects are strings of symbols from some atomic set of symbols like before. The ham objects, the ham object between an expression X and Y will say it's the conditional probability that why this larger string is an extension of X or contains X. You know if X is it contained in it or it's zero otherwise. So you can check this actually defines an enriched category over zero one, you know, this sort of reflexivity or identity. Yeah, what's the probability that blue is contained in blue is one. And then when you write down what this means it turns out that conditional probabilities multiply in exactly what you need to get this composition. So all I'm saying here is that if you want to decorate these arrows with these conditional probabilities of continuation. It's like your dreams are fulfilled. Oh, wow, enriched category theory says that this is, you know, something you can actually do formally. As you may guess this is nice but it's limited as before. I can't combine anything, you know, there's no notion of concepts or combining things and having some kind of logical reasoning in it. So again, you want to then pass from from that category to zero one filters on that category. And so when you do this, you will find that representable functors like before are sort of have the right support. So as an example on this slide, you can look at the enriched representable functor of the word blue. And I like to think of it as like this vector where they're which again is indexed by expressions in the language where there is a zero. If that expression does not contain the word, the chosen word like blue, or it has this conditional probability, you know the conditional probability of seeing small blue marble given that you've seen blue maybe that's like point to two. So it has the same support as before but now it has this distributional information. And you can keep on going, you know you can combine these things. So it turns out that an enriched category theory, the appropriate notion of co products products, or more generally limits and co limits they're called weighted co limits. So that definition gets a little bit technical. But when you take, when you unwind that definition, you can sort of ask, hey, what's this enriched notion of red or blue, the sort of concept, if I take the co product of these two co pre sheaves. And if you choose the, these weights in the right way you basically get like that the point wise maximum of the two values individually. So I think that's interesting and you can kind of try to think about what that what does that mean, like if you were to interpret that. I'll let you partner that and since I'm running short on time. Let me just say there's a lot more that you can do here. So you may have already thought about the fact that you know you can get from the unit interval into the non negative extended reels using negative log, you know there's there's an isomorphism actually between them. And what that means is that your category which was enriched over the unit interval can now be enriched over non negative extended reels. And that has a name and category theory. So a category enriched over that that's a pre order so it's a category. Those are called generalized metric spaces. And that is that you can now think about the distances between these sort of concepts or distances between these representable and rich founders. And so what happens is that in this generalized metric space, you know, expressions that are likely are close together, like blue goes to blue marble so they're kind of close in this generalized metric. But then those which are not likely extensions are kind of infinitely far away. So maybe, you know, a sweet blue scent is not a thing that people say, or it has a low probability, because colors don't smell, or have smells. And so that kind of pairs well with your intuition that like hey that should be way far away. You can think about distances now, you have these, you know, abilities to can to combine concepts we just looked at co products but there's so much more that you can do. It turns out that this has nice connections to even tropical geometry. And so you on a spliceopolis might one of our co authors has really nice ideas about that, and lots more. So all that to say, kind of wrapping up. There's a lot that you can do by repeating this theme of starting with something that doesn't seem to have a lot of structure, like on the left hand side, and then looking at maps or functors into another category that has a lot of structure. And there you you have the ability to form concepts to talk about distances to think about tropical geometry, which you cannot do on the left hand side. So this all has an enriched story. And maybe I will just kind of leave you with this teaser. Everything I've described today, kind of rested on this analogy right between linear algebra and category theory. So we said that this co appreciate categories like a vector space. I hinted that these representable functors are like one hot encodings. And I told you I tell you why I think about that to think about it that way. So, just like every vector is a linear combination of these one hot encodings right you take your combination there like a basis. So it turns out in category theory there's a theorem. If you were to look so Emily real has a beautiful book on category theory, category theory in context, I think she calls this the density theorem. And it turns out that every co pre chief is a co limit of these representable functors. So just like every vector is built up from basis vectors, every functor from your category in this set is built up from these home functors. Okay, so they're kind of like a basis in that sense. And then the analogy goes on and I will just end here because I think this is really fascinating. And I don't think it's more than an analogy which is kind of puzzling. In linear algebra you have matrices in category theory you have pro functors. And it's basically, you know, if you write it down it's like the same thing as a matrix for every pair of objects and two categories you get a set a matrix for every two elements and a pair of, you know, a product of matrixes can be multiplied and you know the formula for that. So in category theory pro functors can be composed, and the formula for that which is a kind of co limit looks a lot like matrix multiplication. Interesting. Well, you know, in linear algebra, every matrix you can compute its SBD and get singular vectors, it turns out in category theory, every pro functor has something like singular vectors which is called the nuclear pro functor and in fact the way that you construct it is like line by line is analogous to how you compute the SBD. I think what's really interesting is that as far as I know this is just an analogy. And not like linear algebra is not a special case of category theory in this sense, but it's really curious that you can do things in linear algebra that we know and love. So why do I say that because I think that that analogy sort of is encouraging that category theory can be a very natural and beneficial environment in which to kind of understand maybe what's going on with large language models, when all they have to work on our, you know, distribution on text or probability distributions on text. And as we've seen, you can get quite far, at least from a mathematical perspective. So, thank you for your attention. And if you're interested in learning more than the paper is available online. So thanks everyone. Thank you so much, Tai. This was a wonderful talk that I think I'm going to have to keep digesting. I absolutely love the analogies. I'm just going to open up the questions right now. So if you have a question, feel free to post it in the Q&A, and we can read them out. Alternatively, you can also raise your hand and we can just unmute you. So while we collect the questions, it sounds like Petar has a question and I don't know if I should read Petar's question or Petardy, maybe you want to say it yourself. Yeah, I'm happy to post it myself. First of all, thanks so much for such a wonderful talk. I really enjoyed all of the connections and it really brought, I guess, a brand new set of goggles with which I can view all these large language models in a bit cleaner way. I had a question which it might be maybe trivially contained in what you already described, but, you know, while I think this theory is a nice way of explaining, you know, which word follows the next word and the similarity of sentences and stuff like that, which is what language models do in principle. It also seems like today you get a large difference between success and failure with these language models, depending on how much you hack the prompts. Like, there was this one paper that said you can just add let's think step by step and it suddenly improves your reasoning capabilities by a whole lot. I'm curious if you think your theory has an answer to why this happens or could have an answer for why this happens in the future. Yeah, I'm just really curious about that. Thank you. Yeah, that's such a great question. So I don't know yet. I don't know. But I think, I think it would take more investigating I think the kind of punchline that I wanted to convey is that maybe this could be a good direction to look in. If you can kind of have a mathematical framework where you can start to see how concepts combine, where you can start to see something like logical structure emerging, then, and if you kind of explore that a little bit more, then maybe you can start to pin down some tools that will then allow you to ask these kind of like interpretability questions are like, why is it that if I say, hey, can, you know, GBT and step by step, can you. Okay, but maybe now that there are tools that can allow you to do that and maybe it has to do something with the sort of structure, you know, one thing that I didn't say, but this co pre chief category set. See, that's an example of a topos, and a topos is known in mathematics as a good place to do logic. So that's encouraging from that perspective. I think it's much too early for me to give you like a definitive yes or no answer. But I think from a mathematical perspective it's promising because you have a lot of tools to kind of reason it exactly about these things that that are really good questions. So it's too early to say but maybe I could say it's helpful. Yeah, no worries, I just wanted to, I wanted to prompt you and see what happens. So, yeah. Thank you. Thank you so much. So there's been a, there's been a question during your one hot encoding slide from Jules about. So, if you go back to the, it's there. Right. It was the in general. So I think it was the slide after actually in general the star could be any set right, not just an integer. I think this, this might have been, I think this might have been remarking on the fact that one hot encoding. Well, maybe Jules wants to wants to elaborate on the question themselves. Okay, so, so Jules is saying this was answered later. So, so that's good. So I might ask a question myself so I absolutely love sort of the idea of thinking about structure in this way category theory has a lot of structure and when we think about unstructured text. It doesn't, it's just sort of strings and sort of connecting in this way is absolutely fascinating. What I'm curious about is, have you thought about connecting what you just said in this talk with with this other ways of structuring thanks text namely parts of speech, and sort of the kinds of parsing where I get a tree like structure of a sentence could they perhaps see from the network of relationship that some things are adjectives and others are perhaps nouns. Yeah, so that's a great question. Yes, you will notice I mentioned nothing of parts of speech. On the one hand that was done intentionally since you know, GPT is training data is just raw text and one doesn't have to tag parts of speech. Yeah, once you have this framework, you can ask, like, can you know, chat GPT give me some examples of adjectives. Give me some examples of nouns I haven't tried that yet actually someone should try it or maybe I'll try it after this and see if it does it correctly. So yeah, does it learn things like that. So I think, like my answer to Petter, it's hopeful. In fact, there's a philosopher that also we're working with Juan Luis Gastaldi who has some very good ideas in this direction. So I would say, stay tuned. And let's see right now it's again, kind of too early but these are things that we're definitely thinking about and looking to go in that direction and some some folks even in our research circle have ideas but but still work in progress. But yeah, that's a really great question. Thank you. So we have a question from Tali. The question is, is there an analogy between matrix algebra and profanctors. Sorry, if there if there is an analogy between matrix algebra and profanctors. What would be the categorical analog of higher order arrays or tensor networks. Yeah, that's a fantastic question. So just like so a higher, so higher order array. So matrix is a function function. Let me just blow a matrix is a function from a product of two sets. So a tensor of order three would be a function from a product of three sets, a tensor of order 10 would be a function from a product of forces. So just like you can take, take the product of more than two sets. You can also look at functors from a product of more than two categories. So profanctors also have higher, you know, higher order array analogs. And that's easy to write down. So, yes, so these things called tensor, you know, higher order tensors they have analogs and category and they're just kind of straightforward generalization. So we have raised hand from Pym. Hi, thanks for the very interesting talk I have a very pedestrian question sorry for that. At some point you talked about the composition of like in the 01 category of the syntax. Could you go to that slide perhaps, because I kind of. Yeah, here. So here we have like why given X and Z given Y is Z given X. Normally, I would guess you have some sort of a sum over why there. How does that work. Yeah, so here there's no sum. I'm so when I look on the right side my mouse for some reason is not appearing on my slide but when I look at the arrow from blue to small blue, think of point to two is the probability of small blue conditioned on blue. So the probability of seeing small blue, given that I have just seek for blue. And there's only one way of getting there. So, okay, okay, I see. Good. Thank you for asking for clarification. Good. Okay, and this equality because typically I guess for this category wouldn't actually need equality here, right. You would. Yeah, so we just have an inequality would suffice. Yeah, okay. Yeah, and any quality. Actually, both of those equalities like you just need any quality, but we happen to get equality here. Okay, yeah, okay, thanks. Yeah, thank you. So, by the way, here in Glasgow we have a big watch party watching your talk ties so there's Mateo capuchy in the room with me who's going to come here and he is interested in asking a question. Oh, fantastic. I didn't know there was a watch party. Hi. I had just like, so I know about this co cat, which is another categorical framework for doing natural language processing and I'm wondering what's the relation. So, um, disco cat I think is inherently looking at connections with quantum physics. So I have not mentioned anything about quantum here. And also, the question that I'm trying to answer is a little bit different. So here I'm trying to see how can I start with probability distributions on texts. And how can I pass from that into something that feels like meaning or semantic or something that has something about knowledge or reasoning, you know, inspired by large language models. So the question that I'm starting with is a little bit different. And the tools or the sort of assumptions that I'm making like I haven't said anything about quantum physics or math. I'm also here. I mean, I could do this but I haven't. I get asked for a representation of all of this information. So I'm just working with categories right but you know if I look at a transformer there's no like category written down in the paper, you know, attention is all you need. So I could ask, Okay, now that I have all of this mathematical structure, can I represent it when your altruba is a nice way to represent things. So can I, you know, represent them by vector spaces. Could those vector spaces then be tagged with parts of speech which is kind of like what's happening in disco cat. Can I then like making a comparison with similar structure that appears in quantum. So I'm not doing anything like that. I could want to. I mean, I could, and I have a paper on this with the honest that came out I think last year. So you could ask for a representation of this kind of information this category theoretical information in terms of linear algebra. We think that to actually piggyback on someone else's question tensor networks are are very good choice for that. But even then sort of our premise for choosing that is a little bit different. So it turns out that in, you know, condensed matter physics and quantum physics, they have very nice tools that happen to kind of match with the statistics of language. But those tools, you know, can be used outside of the physics context, even though historically they've been used there. So even then in that work that we're doing we're not really saying anything like languages quantum or you know entanglement means this nothing, nothing like that. I think that disco cat is quite different from this, even though we both happen to be, you know, thinking about language in terms of category but the questions we're answering are for different the tools are different. The sort of premise or the reason why using those tools are different. Yeah, that's kind of my high level answer to that. Thank you very much. Thank you for the question. I think this might be a good, good place to stop. We're a bit over time, but this was absolutely fantastic. So I'll just say my thanks one more time. As now we're basically since we're done with the main part of the course really what we're now in cats for AI as I've mentioned very old, the things we're going to be having our guest lectures. So this is going to be on a regular schedule and if there's any recommendations you have from people who would love to talk or who you think could contribute meaningfully here would love to hear about it. So far we have two future lectures scheduled, which are which are going to be sometime in March and we're going to update you on it as we learn more. I don't know if there's anybody else from the organizing team that has to say anything. Other than one of those talks will be by David Spivak, so you should definitely not miss it. Okay, so that's it. Thank you very much. And see you next time. Thank you all for the invitation for your time. Appreciate it. Thanks so much for coming time. Really enjoyed it.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 3.0, "text": " Oh, sorry, yes. Is this recording?", "tokens": [50364, 876, 11, 2597, 11, 2086, 13, 1119, 341, 6613, 30, 50514], "temperature": 0.0, "avg_logprob": -0.31072744889692827, "compression_ratio": 1.3405797101449275, "no_speech_prob": 0.114597387611866}, {"id": 1, "seek": 0, "start": 10.0, "end": 11.0, "text": " Good to go.", "tokens": [50864, 2205, 281, 352, 13, 50914], "temperature": 0.0, "avg_logprob": -0.31072744889692827, "compression_ratio": 1.3405797101449275, "no_speech_prob": 0.114597387611866}, {"id": 2, "seek": 0, "start": 13.0, "end": 19.0, "text": " Okay, so hello everyone and welcome to the third guest lecture of the cats for AI series.", "tokens": [51014, 1033, 11, 370, 7751, 1518, 293, 2928, 281, 264, 2636, 8341, 7991, 295, 264, 11111, 337, 7318, 2638, 13, 51314], "temperature": 0.0, "avg_logprob": -0.31072744889692827, "compression_ratio": 1.3405797101449275, "no_speech_prob": 0.114597387611866}, {"id": 3, "seek": 0, "start": 19.0, "end": 23.0, "text": " As you might have seen on the on the email list.", "tokens": [51314, 1018, 291, 1062, 362, 1612, 322, 264, 322, 264, 3796, 1329, 13, 51514], "temperature": 0.0, "avg_logprob": -0.31072744889692827, "compression_ratio": 1.3405797101449275, "no_speech_prob": 0.114597387611866}, {"id": 4, "seek": 2300, "start": 24.0, "end": 31.0, "text": " We've finished with the main lectures and even two guest lectures and we're now transitioning in a different mode.", "tokens": [50414, 492, 600, 4335, 365, 264, 2135, 16564, 293, 754, 732, 8341, 16564, 293, 321, 434, 586, 33777, 294, 257, 819, 4391, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16887564201877542, "compression_ratio": 1.585, "no_speech_prob": 0.056186411529779434}, {"id": 5, "seek": 2300, "start": 31.0, "end": 36.0, "text": " So we're going to be having an irregular schedule of guest talks.", "tokens": [50764, 407, 321, 434, 516, 281, 312, 1419, 364, 29349, 7567, 295, 8341, 6686, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16887564201877542, "compression_ratio": 1.585, "no_speech_prob": 0.056186411529779434}, {"id": 6, "seek": 2300, "start": 36.0, "end": 45.0, "text": " And which are going to from now on be open to the public so if you've got a speaker recommendations please do not hesitate to reach out.", "tokens": [51014, 400, 597, 366, 516, 281, 490, 586, 322, 312, 1269, 281, 264, 1908, 370, 498, 291, 600, 658, 257, 8145, 10434, 1767, 360, 406, 20842, 281, 2524, 484, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16887564201877542, "compression_ratio": 1.585, "no_speech_prob": 0.056186411529779434}, {"id": 7, "seek": 4500, "start": 45.0, "end": 63.0, "text": " And first in this one that this open kind of scheduling is a talk from tight and a Bradley, she's going to be telling us about category theory inspired by large language models, I'm very excited about the talk so tight please take it away.", "tokens": [50364, 400, 700, 294, 341, 472, 300, 341, 1269, 733, 295, 29055, 307, 257, 751, 490, 4524, 293, 257, 36607, 11, 750, 311, 516, 281, 312, 3585, 505, 466, 7719, 5261, 7547, 538, 2416, 2856, 5245, 11, 286, 478, 588, 2919, 466, 264, 751, 370, 4524, 1767, 747, 309, 1314, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1675777965121799, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.024372650310397148}, {"id": 8, "seek": 6300, "start": 63.0, "end": 69.0, "text": " All right, thank you Bruno and Petra and all of the organizers for the invitation.", "tokens": [50364, 1057, 558, 11, 1309, 291, 23046, 293, 10472, 424, 293, 439, 295, 264, 35071, 337, 264, 17890, 13, 50664], "temperature": 0.0, "avg_logprob": -0.106183818935119, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.010638116858899593}, {"id": 9, "seek": 6300, "start": 69.0, "end": 78.0, "text": " And I just want to say I think it's really exciting to see that there's so much interest in category theory outside of the field of pure mathematics.", "tokens": [50664, 400, 286, 445, 528, 281, 584, 286, 519, 309, 311, 534, 4670, 281, 536, 300, 456, 311, 370, 709, 1179, 294, 7719, 5261, 2380, 295, 264, 2519, 295, 6075, 18666, 13, 51114], "temperature": 0.0, "avg_logprob": -0.106183818935119, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.010638116858899593}, {"id": 10, "seek": 6300, "start": 78.0, "end": 90.0, "text": " And in particular in machine learning so I think that's very inspiring, I have a lot to learn from you all and so I hope that maybe I can give back something interesting in today's talk.", "tokens": [51114, 400, 294, 1729, 294, 3479, 2539, 370, 286, 519, 300, 311, 588, 15883, 11, 286, 362, 257, 688, 281, 1466, 490, 291, 439, 293, 370, 286, 1454, 300, 1310, 286, 393, 976, 646, 746, 1880, 294, 965, 311, 751, 13, 51714], "temperature": 0.0, "avg_logprob": -0.106183818935119, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.010638116858899593}, {"id": 11, "seek": 9000, "start": 90.0, "end": 101.0, "text": " So yes, as the title suggests, I want to share with you some category theory that's come from comes from work with some collaborators and I which I'll share in a second.", "tokens": [50364, 407, 2086, 11, 382, 264, 4876, 13409, 11, 286, 528, 281, 2073, 365, 291, 512, 7719, 5261, 300, 311, 808, 490, 1487, 490, 589, 365, 512, 39789, 293, 286, 597, 286, 603, 2073, 294, 257, 1150, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09472316570496292, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.0023572754580527544}, {"id": 12, "seek": 9000, "start": 101.0, "end": 115.0, "text": " That's inspired by large language models so I was asked to give this talk I think several months ago, and I thought it was very convenient that open AI release chat GPT, you know, like less than two weeks ago.", "tokens": [50914, 663, 311, 7547, 538, 2416, 2856, 5245, 370, 286, 390, 2351, 281, 976, 341, 751, 286, 519, 2940, 2493, 2057, 11, 293, 286, 1194, 309, 390, 588, 10851, 300, 1269, 7318, 4374, 5081, 26039, 51, 11, 291, 458, 11, 411, 1570, 813, 732, 3259, 2057, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09472316570496292, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.0023572754580527544}, {"id": 13, "seek": 11500, "start": 115.0, "end": 124.0, "text": " So maybe I'm sure all of you have heard about that by now and I think it's kind of nice that, you know, language model or maybe fresh and everyone's mind.", "tokens": [50364, 407, 1310, 286, 478, 988, 439, 295, 291, 362, 2198, 466, 300, 538, 586, 293, 286, 519, 309, 311, 733, 295, 1481, 300, 11, 291, 458, 11, 2856, 2316, 420, 1310, 4451, 293, 1518, 311, 1575, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07665159895613387, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.15180066227912903}, {"id": 14, "seek": 11500, "start": 124.0, "end": 132.0, "text": " So, I couldn't resist. I know that you have all probably heard about chat GPT and you probably see in your own examples.", "tokens": [50814, 407, 11, 286, 2809, 380, 4597, 13, 286, 458, 300, 291, 362, 439, 1391, 2198, 466, 5081, 26039, 51, 293, 291, 1391, 536, 294, 428, 1065, 5110, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07665159895613387, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.15180066227912903}, {"id": 15, "seek": 11500, "start": 132.0, "end": 144.0, "text": " I can resist just sharing one that I did. So I would say, don't really pay attention to what's on this slide because it's not really in the theme of the talk.", "tokens": [51214, 286, 393, 4597, 445, 5414, 472, 300, 286, 630, 13, 407, 286, 576, 584, 11, 500, 380, 534, 1689, 3202, 281, 437, 311, 322, 341, 4137, 570, 309, 311, 406, 534, 294, 264, 6314, 295, 264, 751, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07665159895613387, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.15180066227912903}, {"id": 16, "seek": 14400, "start": 144.0, "end": 161.0, "text": " I was just jumping into chat GPT, and I had a question about some physics thing that I was interested in. And so I, I gave it this, this thing called a quantum state just think of it as a vector, and I asked GPT chat GPT does this vector satisfy a certain", "tokens": [50364, 286, 390, 445, 11233, 666, 5081, 26039, 51, 11, 293, 286, 632, 257, 1168, 466, 512, 10649, 551, 300, 286, 390, 3102, 294, 13, 400, 370, 286, 11, 286, 2729, 309, 341, 11, 341, 551, 1219, 257, 13018, 1785, 445, 519, 295, 309, 382, 257, 8062, 11, 293, 286, 2351, 26039, 51, 5081, 26039, 51, 775, 341, 8062, 19319, 257, 1629, 51214], "temperature": 0.0, "avg_logprob": -0.12058563232421875, "compression_ratio": 1.536144578313253, "no_speech_prob": 0.061792515218257904}, {"id": 17, "seek": 16100, "start": 162.0, "end": 187.0, "text": " like does it satisfy a property. And I thought it was really interesting that it got the answer wrong, but it knew what math steps to take and what pieces of that math to analyze in order to reason about a yes or no answer does this thing satisfy a property.", "tokens": [50414, 411, 775, 309, 19319, 257, 4707, 13, 400, 286, 1194, 309, 390, 534, 1880, 300, 309, 658, 264, 1867, 2085, 11, 457, 309, 2586, 437, 5221, 4439, 281, 747, 293, 437, 3755, 295, 300, 5221, 281, 12477, 294, 1668, 281, 1778, 466, 257, 2086, 420, 572, 1867, 775, 341, 551, 19319, 257, 4707, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10846363264938881, "compression_ratio": 1.5828220858895705, "no_speech_prob": 0.1439991444349289}, {"id": 18, "seek": 18700, "start": 187.0, "end": 199.0, "text": " So, it kind of like knew what linear algebra things to do you start with this vector and then you get a matrix and then you can put something on that matrix and then you apply this formula, and then at the end you reason about it.", "tokens": [50364, 407, 11, 309, 733, 295, 411, 2586, 437, 8213, 21989, 721, 281, 360, 291, 722, 365, 341, 8062, 293, 550, 291, 483, 257, 8141, 293, 550, 291, 393, 829, 746, 322, 300, 8141, 293, 550, 291, 3079, 341, 8513, 11, 293, 550, 412, 264, 917, 291, 1778, 466, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11033154416967321, "compression_ratio": 1.619718309859155, "no_speech_prob": 0.011324943974614143}, {"id": 19, "seek": 19900, "start": 199.0, "end": 213.0, "text": " And so I thought that was like, oh, pretty neat, even though overall it kind of got stuff wrong, and at least kind of knew what to do without being told to reason about, you know, how would one even arrive at the answer.", "tokens": [50364, 400, 370, 286, 1194, 300, 390, 411, 11, 1954, 11, 1238, 10654, 11, 754, 1673, 4787, 309, 733, 295, 658, 1507, 2085, 11, 293, 412, 1935, 733, 295, 2586, 437, 281, 360, 1553, 885, 1907, 281, 1778, 466, 11, 291, 458, 11, 577, 576, 472, 754, 8881, 412, 264, 1867, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13022152293812145, "compression_ratio": 1.4965986394557824, "no_speech_prob": 0.04739024117588997}, {"id": 20, "seek": 21300, "start": 213.0, "end": 224.0, "text": " At this point, of course, there's lots of chatter and lots of buzz, you know, is this a GI, or is it garbage or whatever. And I don't really want to get too much into that.", "tokens": [50364, 1711, 341, 935, 11, 295, 1164, 11, 456, 311, 3195, 295, 26929, 293, 3195, 295, 13036, 11, 291, 458, 11, 307, 341, 257, 26634, 11, 420, 307, 309, 14150, 420, 2035, 13, 400, 286, 500, 380, 534, 528, 281, 483, 886, 709, 666, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12028485901501713, "compression_ratio": 1.323076923076923, "no_speech_prob": 0.17759214341640472}, {"id": 21, "seek": 22400, "start": 224.0, "end": 242.0, "text": " I do want to kind of draw one idea to the forefront of our minds. And that's this fact that the training data for large language models is really interesting. It's just raw text.", "tokens": [50364, 286, 360, 528, 281, 733, 295, 2642, 472, 1558, 281, 264, 27287, 295, 527, 9634, 13, 400, 300, 311, 341, 1186, 300, 264, 3097, 1412, 337, 2416, 2856, 5245, 307, 534, 1880, 13, 467, 311, 445, 8936, 2487, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08858976807705192, "compression_ratio": 1.3692307692307693, "no_speech_prob": 0.11908220499753952}, {"id": 22, "seek": 24200, "start": 242.0, "end": 254.0, "text": " And so, from a mathematician's perspective, that prompts a question like what what structure is in unstructured text.", "tokens": [50364, 400, 370, 11, 490, 257, 48281, 311, 4585, 11, 300, 41095, 257, 1168, 411, 437, 437, 3877, 307, 294, 18799, 46847, 2487, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1436979409420129, "compression_ratio": 1.4895833333333333, "no_speech_prob": 0.02673705480992794}, {"id": 23, "seek": 24200, "start": 254.0, "end": 266.0, "text": " That allows you to like form concepts and reason about things so that you get actual coherent text. So whether or not, you know, chat GPT got the answer right or wrong.", "tokens": [50964, 663, 4045, 291, 281, 411, 1254, 10392, 293, 1778, 466, 721, 370, 300, 291, 483, 3539, 36239, 2487, 13, 407, 1968, 420, 406, 11, 291, 458, 11, 5081, 26039, 51, 658, 264, 1867, 558, 420, 2085, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1436979409420129, "compression_ratio": 1.4895833333333333, "no_speech_prob": 0.02673705480992794}, {"id": 24, "seek": 26600, "start": 266.0, "end": 285.0, "text": " Okay, fine. But what's interesting is that there's no like textual garbage on this page right like all of these words go together and it sounds like coherent English it is coherent English, but you're just starting with, you know, raw text, or, you know, probability distributions on text", "tokens": [50364, 1033, 11, 2489, 13, 583, 437, 311, 1880, 307, 300, 456, 311, 572, 411, 2487, 901, 14150, 322, 341, 3028, 558, 411, 439, 295, 613, 2283, 352, 1214, 293, 309, 3263, 411, 36239, 3669, 309, 307, 36239, 3669, 11, 457, 291, 434, 445, 2891, 365, 11, 291, 458, 11, 8936, 2487, 11, 420, 11, 291, 458, 11, 8482, 37870, 322, 2487, 51314], "temperature": 0.0, "avg_logprob": -0.11399693122276892, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.011860603466629982}, {"id": 25, "seek": 28500, "start": 285.0, "end": 307.0, "text": " configurations. And you can ask the question, what mathematical framework, can we, you know, write down that describes that passage from probability distributions on text continuations to some space of meaning or to some like", "tokens": [50364, 31493, 13, 400, 291, 393, 1029, 264, 1168, 11, 437, 18894, 8388, 11, 393, 321, 11, 291, 458, 11, 2464, 760, 300, 15626, 300, 11497, 490, 8482, 37870, 322, 2487, 2993, 763, 281, 512, 1901, 295, 3620, 420, 281, 512, 411, 51464], "temperature": 0.0, "avg_logprob": -0.18419100443522135, "compression_ratio": 1.4610389610389611, "no_speech_prob": 0.5300392508506775}, {"id": 26, "seek": 30700, "start": 308.0, "end": 320.0, "text": " semantic information. Like what's the math there. And, and you might ask this like, can we look inside of a transformer and like point to things and say here. Okay, so that's one thing you could do. That's not quite what I want to do.", "tokens": [50414, 47982, 1589, 13, 1743, 437, 311, 264, 5221, 456, 13, 400, 11, 293, 291, 1062, 1029, 341, 411, 11, 393, 321, 574, 1854, 295, 257, 31782, 293, 411, 935, 281, 721, 293, 584, 510, 13, 1033, 11, 370, 300, 311, 472, 551, 291, 727, 360, 13, 663, 311, 406, 1596, 437, 286, 528, 281, 360, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11427924988117624, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.3806840181350708}, {"id": 27, "seek": 30700, "start": 320.0, "end": 331.0, "text": " But maybe what I can describe in this talk is kind of an overall category theoretical framework that maybe can provide for you some tools if you wanted to dig further.", "tokens": [51014, 583, 1310, 437, 286, 393, 6786, 294, 341, 751, 307, 733, 295, 364, 4787, 7719, 20864, 8388, 300, 1310, 393, 2893, 337, 291, 512, 3873, 498, 291, 1415, 281, 2528, 3052, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11427924988117624, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.3806840181350708}, {"id": 28, "seek": 33100, "start": 331.0, "end": 345.0, "text": " So that's why the title of this talk is category theory, inspired by a large language models, as opposed to the category theory of large language models I'm not making a grandiose claim like that.", "tokens": [50364, 407, 300, 311, 983, 264, 4876, 295, 341, 751, 307, 7719, 5261, 11, 7547, 538, 257, 2416, 2856, 5245, 11, 382, 8851, 281, 264, 7719, 5261, 295, 2416, 2856, 5245, 286, 478, 406, 1455, 257, 45155, 541, 3932, 411, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11606293784247504, "compression_ratio": 1.7061224489795919, "no_speech_prob": 0.0019263926660642028}, {"id": 29, "seek": 33100, "start": 345.0, "end": 359.0, "text": " But it is really interesting to ask, like how far can you get with just probability distributions on texts, or text continuations. And I think that category theory provides some some good and very natural tools to kind of", "tokens": [51064, 583, 309, 307, 534, 1880, 281, 1029, 11, 411, 577, 1400, 393, 291, 483, 365, 445, 8482, 37870, 322, 15765, 11, 420, 2487, 2993, 763, 13, 400, 286, 519, 300, 7719, 5261, 6417, 512, 512, 665, 293, 588, 3303, 3873, 281, 733, 295, 51764], "temperature": 0.0, "avg_logprob": -0.11606293784247504, "compression_ratio": 1.7061224489795919, "no_speech_prob": 0.0019263926660642028}, {"id": 30, "seek": 35900, "start": 359.0, "end": 375.0, "text": " exploring this question. So let me go to the next slide. So here's the outline for the remaining few minutes. First, I want to share with you a category of language and some advantages of that.", "tokens": [50364, 12736, 341, 1168, 13, 407, 718, 385, 352, 281, 264, 958, 4137, 13, 407, 510, 311, 264, 16387, 337, 264, 8877, 1326, 2077, 13, 2386, 11, 286, 528, 281, 2073, 365, 291, 257, 7719, 295, 2856, 293, 512, 14906, 295, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11012210016665251, "compression_ratio": 1.3591549295774648, "no_speech_prob": 0.010003971867263317}, {"id": 31, "seek": 37500, "start": 375.0, "end": 386.0, "text": " We'll also see some disadvantages and then I will describe for you an enriched category of language so you've, we've heard a lot about category theory in this series.", "tokens": [50364, 492, 603, 611, 536, 512, 37431, 293, 550, 286, 486, 6786, 337, 291, 364, 48624, 7719, 295, 2856, 370, 291, 600, 11, 321, 600, 2198, 257, 688, 466, 7719, 5261, 294, 341, 2638, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07611297101390604, "compression_ratio": 1.715953307392996, "no_speech_prob": 0.053341008722782135}, {"id": 32, "seek": 37500, "start": 386.0, "end": 400.0, "text": " But maybe a new idea might be something called enriched category theory so I won't assume you have heard of that already. So I'll kind of explain a little bit of what that means, and then tie it back into this question that we're trying to answer in the context of language.", "tokens": [50914, 583, 1310, 257, 777, 1558, 1062, 312, 746, 1219, 48624, 7719, 5261, 370, 286, 1582, 380, 6552, 291, 362, 2198, 295, 300, 1217, 13, 407, 286, 603, 733, 295, 2903, 257, 707, 857, 295, 437, 300, 1355, 11, 293, 550, 7582, 309, 646, 666, 341, 1168, 300, 321, 434, 1382, 281, 1867, 294, 264, 4319, 295, 2856, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07611297101390604, "compression_ratio": 1.715953307392996, "no_speech_prob": 0.053341008722782135}, {"id": 33, "seek": 40000, "start": 400.0, "end": 415.0, "text": " So the next thing I'm sharing today is based on a paper together with John Torella and Janice Losopoulos. It came out earlier this year, earlier in the spring and enriched category theory of language.", "tokens": [50364, 407, 264, 958, 551, 286, 478, 5414, 965, 307, 2361, 322, 257, 3035, 1214, 365, 2619, 314, 418, 3505, 293, 4956, 573, 7632, 404, 3298, 329, 13, 467, 1361, 484, 3071, 341, 1064, 11, 3071, 294, 264, 5587, 293, 48624, 7719, 5261, 295, 2856, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20775407552719116, "compression_ratio": 1.5983935742971886, "no_speech_prob": 0.08495628833770752}, {"id": 34, "seek": 40000, "start": 415.0, "end": 428.0, "text": " So, since this is an introductory series on category theory, what I thought I would do is just kind of give you a bird's eye view, or the highlights of some of the ideas that that we're working on.", "tokens": [51114, 407, 11, 1670, 341, 307, 364, 39048, 2638, 322, 7719, 5261, 11, 437, 286, 1194, 286, 576, 360, 307, 445, 733, 295, 976, 291, 257, 5255, 311, 3313, 1910, 11, 420, 264, 14254, 295, 512, 295, 264, 3487, 300, 300, 321, 434, 1364, 322, 13, 51764], "temperature": 0.0, "avg_logprob": -0.20775407552719116, "compression_ratio": 1.5983935742971886, "no_speech_prob": 0.08495628833770752}, {"id": 35, "seek": 42800, "start": 428.0, "end": 435.0, "text": " And then if you're interested, I would say, okay, for more details, you know, we can chat after you can take a look at the paper.", "tokens": [50364, 400, 550, 498, 291, 434, 3102, 11, 286, 576, 584, 11, 1392, 11, 337, 544, 4365, 11, 291, 458, 11, 321, 393, 5081, 934, 291, 393, 747, 257, 574, 412, 264, 3035, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08124478932084708, "compression_ratio": 1.4078947368421053, "no_speech_prob": 0.003073722356930375}, {"id": 36, "seek": 42800, "start": 435.0, "end": 444.0, "text": " Now, before all that, I want to motivate those ideas by sharing with you an analogy.", "tokens": [50714, 823, 11, 949, 439, 300, 11, 286, 528, 281, 28497, 729, 3487, 538, 5414, 365, 291, 364, 21663, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08124478932084708, "compression_ratio": 1.4078947368421053, "no_speech_prob": 0.003073722356930375}, {"id": 37, "seek": 44400, "start": 444.0, "end": 461.0, "text": " And there's a really curious analogy between linear algebra and category theory is simple. I think it's really interesting. And maybe it might appeal, you know, to the machine learning community since we deal with vectors and major sees a lot.", "tokens": [50364, 400, 456, 311, 257, 534, 6369, 21663, 1296, 8213, 21989, 293, 7719, 5261, 307, 2199, 13, 286, 519, 309, 311, 534, 1880, 13, 400, 1310, 309, 1062, 13668, 11, 291, 458, 11, 281, 264, 3479, 2539, 1768, 1670, 321, 2028, 365, 18875, 293, 2563, 8194, 257, 688, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1124656850641424, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.014492935501039028}, {"id": 38, "seek": 44400, "start": 461.0, "end": 470.0, "text": " And I like this analogy a lot, it'll come up later but I also think it really nicely motivates the ideas that is kind of the main theme of the paper.", "tokens": [51214, 400, 286, 411, 341, 21663, 257, 688, 11, 309, 603, 808, 493, 1780, 457, 286, 611, 519, 309, 534, 9594, 42569, 264, 3487, 300, 307, 733, 295, 264, 2135, 6314, 295, 264, 3035, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1124656850641424, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.014492935501039028}, {"id": 39, "seek": 47000, "start": 470.0, "end": 491.0, "text": " Speaking of themes, this analogy that I will share with you kind of centers around a very common theme in mathematics. And I have to credit John Torella for really emphasizing this idea because I think it just illustrates in a crystal clear way the advantages of thinking from a category theoretical", "tokens": [50364, 13069, 295, 13544, 11, 341, 21663, 300, 286, 486, 2073, 365, 291, 733, 295, 10898, 926, 257, 588, 2689, 6314, 294, 18666, 13, 400, 286, 362, 281, 5397, 2619, 314, 418, 3505, 337, 534, 45550, 341, 1558, 570, 286, 519, 309, 445, 41718, 294, 257, 13662, 1850, 636, 264, 14906, 295, 1953, 490, 257, 7719, 20864, 51414], "temperature": 0.0, "avg_logprob": -0.12226407527923584, "compression_ratio": 1.495, "no_speech_prob": 0.007572979666292667}, {"id": 40, "seek": 49100, "start": 491.0, "end": 500.0, "text": " perspective. Okay, so before I share with you this analogy, let me inch towards it by telling you a common theme in mathematics.", "tokens": [50364, 4585, 13, 1033, 11, 370, 949, 286, 2073, 365, 291, 341, 21663, 11, 718, 385, 7227, 3030, 309, 538, 3585, 291, 257, 2689, 6314, 294, 18666, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14771587371826173, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.16215607523918152}, {"id": 41, "seek": 49100, "start": 500.0, "end": 518.0, "text": " So, it's very well known in math that if blah, something has nice structure, and I'll say that means in a second, then functions from a fixed set into that thing have nice structure to.", "tokens": [50814, 407, 11, 309, 311, 588, 731, 2570, 294, 5221, 300, 498, 12288, 11, 746, 575, 1481, 3877, 11, 293, 286, 603, 584, 300, 1355, 294, 257, 1150, 11, 550, 6828, 490, 257, 6806, 992, 666, 300, 551, 362, 1481, 3877, 281, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14771587371826173, "compression_ratio": 1.5544554455445545, "no_speech_prob": 0.16215607523918152}, {"id": 42, "seek": 51800, "start": 518.0, "end": 520.0, "text": " Okay, what do I mean.", "tokens": [50364, 1033, 11, 437, 360, 286, 914, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11859415913676168, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.026737937703728676}, {"id": 43, "seek": 51800, "start": 520.0, "end": 529.0, "text": " Think about a set x there it's on the screen. Okay, a set is just like a bag of marbles or something, it has no structure.", "tokens": [50464, 6557, 466, 257, 992, 2031, 456, 309, 311, 322, 264, 2568, 13, 1033, 11, 257, 992, 307, 445, 411, 257, 3411, 295, 1849, 8806, 420, 746, 11, 309, 575, 572, 3877, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11859415913676168, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.026737937703728676}, {"id": 44, "seek": 51800, "start": 529.0, "end": 541.0, "text": " So, if I have elements in a set x, I can't add them, I can't multiply them I can't combine them in any way to do anything meaningful it's just this set that has no structure.", "tokens": [50914, 407, 11, 498, 286, 362, 4959, 294, 257, 992, 2031, 11, 286, 393, 380, 909, 552, 11, 286, 393, 380, 12972, 552, 286, 393, 380, 10432, 552, 294, 604, 636, 281, 360, 1340, 10995, 309, 311, 445, 341, 992, 300, 575, 572, 3877, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11859415913676168, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.026737937703728676}, {"id": 45, "seek": 54100, "start": 541.0, "end": 552.0, "text": " There is another set that has a lot of nice structure, kind of readily available and that's the reels like, for example, there's other things you could think of but let me just think about the reels.", "tokens": [50364, 821, 307, 1071, 992, 300, 575, 257, 688, 295, 1481, 3877, 11, 733, 295, 26336, 2435, 293, 300, 311, 264, 319, 1625, 411, 11, 337, 1365, 11, 456, 311, 661, 721, 291, 727, 519, 295, 457, 718, 385, 445, 519, 466, 264, 319, 1625, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13712523155605671, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.010648999363183975}, {"id": 46, "seek": 54100, "start": 552.0, "end": 557.0, "text": " In, in our I can add things, we can multiply them.", "tokens": [50914, 682, 11, 294, 527, 286, 393, 909, 721, 11, 321, 393, 12972, 552, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13712523155605671, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.010648999363183975}, {"id": 47, "seek": 54100, "start": 557.0, "end": 561.0, "text": " We can do all sorts of things so it has nice structure.", "tokens": [51164, 492, 393, 360, 439, 7527, 295, 721, 370, 309, 575, 1481, 3877, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13712523155605671, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.010648999363183975}, {"id": 48, "seek": 54100, "start": 561.0, "end": 568.0, "text": " Well, what is a function from a set x into the reels.", "tokens": [51364, 1042, 11, 437, 307, 257, 2445, 490, 257, 992, 2031, 666, 264, 319, 1625, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13712523155605671, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.010648999363183975}, {"id": 49, "seek": 56800, "start": 568.0, "end": 577.0, "text": " I think for a second, for simplicity, just suppose that x has three elements, that's a three element set.", "tokens": [50364, 286, 519, 337, 257, 1150, 11, 337, 25632, 11, 445, 7297, 300, 2031, 575, 1045, 4959, 11, 300, 311, 257, 1045, 4478, 992, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15113208731826472, "compression_ratio": 1.512, "no_speech_prob": 0.001809597248211503}, {"id": 50, "seek": 56800, "start": 577.0, "end": 586.0, "text": " So a function from a three element set into the reels is a choice of three numbers.", "tokens": [50814, 407, 257, 2445, 490, 257, 1045, 4478, 992, 666, 264, 319, 1625, 307, 257, 3922, 295, 1045, 3547, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15113208731826472, "compression_ratio": 1.512, "no_speech_prob": 0.001809597248211503}, {"id": 51, "seek": 58600, "start": 587.0, "end": 599.0, "text": " So, if I look at all functions from x into the reels, I have the collection of all triples of numbers, and that is familiar to us that's just three dimensional space.", "tokens": [50414, 407, 11, 498, 286, 574, 412, 439, 6828, 490, 2031, 666, 264, 319, 1625, 11, 286, 362, 264, 5765, 295, 439, 1376, 2622, 295, 3547, 11, 293, 300, 307, 4963, 281, 505, 300, 311, 445, 1045, 18795, 1901, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09071894695884303, "compression_ratio": 1.6542553191489362, "no_speech_prob": 0.04600181058049202}, {"id": 52, "seek": 58600, "start": 599.0, "end": 609.0, "text": " In other words, what I'm getting at here is that the collection of all functions from let's say a three element set into our has nice structure.", "tokens": [51014, 682, 661, 2283, 11, 437, 286, 478, 1242, 412, 510, 307, 300, 264, 5765, 295, 439, 6828, 490, 718, 311, 584, 257, 1045, 4478, 992, 666, 527, 575, 1481, 3877, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09071894695884303, "compression_ratio": 1.6542553191489362, "no_speech_prob": 0.04600181058049202}, {"id": 53, "seek": 60900, "start": 609.0, "end": 621.0, "text": " I can actually organize those elements, you know the image of this function as this array suggestively, because if I have two of these functions now or two of these arrays, I can add them.", "tokens": [50364, 286, 393, 767, 13859, 729, 4959, 11, 291, 458, 264, 3256, 295, 341, 2445, 382, 341, 10225, 3402, 3413, 11, 570, 498, 286, 362, 732, 295, 613, 6828, 586, 420, 732, 295, 613, 41011, 11, 286, 393, 909, 552, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08657283213601183, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.01970837265253067}, {"id": 54, "seek": 60900, "start": 621.0, "end": 629.0, "text": " You just add functions point wise, which corresponds to sort of adding the entries of these vectors element wise.", "tokens": [50964, 509, 445, 909, 6828, 935, 10829, 11, 597, 23249, 281, 1333, 295, 5127, 264, 23041, 295, 613, 18875, 4478, 10829, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08657283213601183, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.01970837265253067}, {"id": 55, "seek": 62900, "start": 629.0, "end": 643.0, "text": " So you can multiply a function by a scalar and get another function that just corresponds to multiplying the entries of this vector component wise, you can multiply actually function together.", "tokens": [50364, 407, 291, 393, 12972, 257, 2445, 538, 257, 39684, 293, 483, 1071, 2445, 300, 445, 23249, 281, 30955, 264, 23041, 295, 341, 8062, 6542, 10829, 11, 291, 393, 12972, 767, 2445, 1214, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1654953122138977, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.0040693809278309345}, {"id": 56, "seek": 62900, "start": 643.0, "end": 656.0, "text": " So I'm hinting at here, which maybe you can see is that functions from x into our actually form of vector space. We usually denote that vector space by our to the three, our three.", "tokens": [51064, 407, 286, 478, 12075, 278, 412, 510, 11, 597, 1310, 291, 393, 536, 307, 300, 6828, 490, 2031, 666, 527, 767, 1254, 295, 8062, 1901, 13, 492, 2673, 45708, 300, 8062, 1901, 538, 527, 281, 264, 1045, 11, 527, 1045, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1654953122138977, "compression_ratio": 1.776190476190476, "no_speech_prob": 0.0040693809278309345}, {"id": 57, "seek": 65600, "start": 657.0, "end": 675.0, "text": " I could write this as our x our race to the power of x. In fact, we've seen this notation earlier, when Petter talked about exponential objects. So this is the set of all functions from a set into our is not just this that turns out to be a vector space.", "tokens": [50414, 286, 727, 2464, 341, 382, 527, 2031, 527, 4569, 281, 264, 1347, 295, 2031, 13, 682, 1186, 11, 321, 600, 1612, 341, 24657, 3071, 11, 562, 10472, 391, 2825, 466, 21510, 6565, 13, 407, 341, 307, 264, 992, 295, 439, 6828, 490, 257, 992, 666, 527, 307, 406, 445, 341, 300, 4523, 484, 281, 312, 257, 8062, 1901, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22860121348547557, "compression_ratio": 1.4941176470588236, "no_speech_prob": 0.008056920021772385}, {"id": 58, "seek": 67500, "start": 675.0, "end": 694.0, "text": " And that's because those functions inherit inherit structure from this sort of ground field. Okay, so vector spaces or linear algebra are an example, really nice example of where, if something has nice structure, then functions into that thing also inherit nice structure.", "tokens": [50364, 400, 300, 311, 570, 729, 6828, 21389, 21389, 3877, 490, 341, 1333, 295, 2727, 2519, 13, 1033, 11, 370, 8062, 7673, 420, 8213, 21989, 366, 364, 1365, 11, 534, 1481, 1365, 295, 689, 11, 498, 746, 575, 1481, 3877, 11, 550, 6828, 666, 300, 551, 611, 21389, 1481, 3877, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13700616359710693, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.027992039918899536}, {"id": 59, "seek": 67500, "start": 694.0, "end": 701.0, "text": " And here's the key is that a very similar story holds in category theory.", "tokens": [51314, 400, 510, 311, 264, 2141, 307, 300, 257, 588, 2531, 1657, 9190, 294, 7719, 5261, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13700616359710693, "compression_ratio": 1.6796116504854368, "no_speech_prob": 0.027992039918899536}, {"id": 60, "seek": 70100, "start": 702.0, "end": 705.0, "text": " Here's kind of the analogy I like to have in mind.", "tokens": [50414, 1692, 311, 733, 295, 264, 21663, 286, 411, 281, 362, 294, 1575, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17274461027051582, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.0032203507144004107}, {"id": 61, "seek": 70100, "start": 705.0, "end": 715.0, "text": " On the one hand, we just started with a set, and we, we said, okay, you can't really do much with the set there's no structure, it's just a collection of things.", "tokens": [50564, 1282, 264, 472, 1011, 11, 321, 445, 1409, 365, 257, 992, 11, 293, 321, 11, 321, 848, 11, 1392, 11, 291, 393, 380, 534, 360, 709, 365, 264, 992, 456, 311, 572, 3877, 11, 309, 311, 445, 257, 5765, 295, 721, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17274461027051582, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.0032203507144004107}, {"id": 62, "seek": 71500, "start": 715.0, "end": 730.0, "text": " Now, if someone just hands you an arbitrary category, what do you know about it. Okay, you know I have some objects and some morphisms between those objects and composition and identity morphisms but that's it.", "tokens": [50364, 823, 11, 498, 1580, 445, 2377, 291, 364, 23211, 7719, 11, 437, 360, 291, 458, 466, 309, 13, 1033, 11, 291, 458, 286, 362, 512, 6565, 293, 512, 25778, 13539, 1296, 729, 6565, 293, 12686, 293, 6575, 25778, 13539, 457, 300, 311, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19031975143834165, "compression_ratio": 1.7526881720430108, "no_speech_prob": 0.1191008985042572}, {"id": 63, "seek": 71500, "start": 730.0, "end": 742.0, "text": " You don't know if C is just an arbitrary category, if you can combine objects to get a new object in your category.", "tokens": [51114, 509, 500, 380, 458, 498, 383, 307, 445, 364, 23211, 7719, 11, 498, 291, 393, 10432, 6565, 281, 483, 257, 777, 2657, 294, 428, 7719, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19031975143834165, "compression_ratio": 1.7526881720430108, "no_speech_prob": 0.1191008985042572}, {"id": 64, "seek": 74200, "start": 742.0, "end": 750.0, "text": " You have other structure looking looking about maybe in specific categories you do but in general just the definition doesn't give you that.", "tokens": [50364, 509, 362, 661, 3877, 1237, 1237, 466, 1310, 294, 2685, 10479, 291, 360, 457, 294, 2674, 445, 264, 7123, 1177, 380, 976, 291, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10454516533093575, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.008056042715907097}, {"id": 65, "seek": 74200, "start": 750.0, "end": 756.0, "text": " So, what you may like to do, just like in the case of sets.", "tokens": [50764, 407, 11, 437, 291, 815, 411, 281, 360, 11, 445, 411, 294, 264, 1389, 295, 6352, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10454516533093575, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.008056042715907097}, {"id": 66, "seek": 74200, "start": 756.0, "end": 767.0, "text": " There, we thought of a specific set, like the reels that had a lot of structure, and we looked at functions into that.", "tokens": [51064, 821, 11, 321, 1194, 295, 257, 2685, 992, 11, 411, 264, 319, 1625, 300, 632, 257, 688, 295, 3877, 11, 293, 321, 2956, 412, 6828, 666, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10454516533093575, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.008056042715907097}, {"id": 67, "seek": 76700, "start": 767.0, "end": 783.0, "text": " And obviously, it can be very fruitful to think about a category that has a lot of structure that's really nice, and look at functors into that category.", "tokens": [50364, 400, 2745, 11, 309, 393, 312, 588, 49795, 281, 519, 466, 257, 7719, 300, 575, 257, 688, 295, 3877, 300, 311, 534, 1481, 11, 293, 574, 412, 1019, 5547, 666, 300, 7719, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10834063981708728, "compression_ratio": 1.706806282722513, "no_speech_prob": 0.014054614119231701}, {"id": 68, "seek": 76700, "start": 783.0, "end": 796.0, "text": " So what category is that well it turns out that the category of sets is a really good choice. So analogous to looking from functions at functions from a set into the reels.", "tokens": [51164, 407, 437, 7719, 307, 300, 731, 309, 4523, 484, 300, 264, 7719, 295, 6352, 307, 257, 534, 665, 3922, 13, 407, 16660, 563, 281, 1237, 490, 6828, 412, 6828, 490, 257, 992, 666, 264, 319, 1625, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10834063981708728, "compression_ratio": 1.706806282722513, "no_speech_prob": 0.014054614119231701}, {"id": 69, "seek": 79600, "start": 796.0, "end": 807.0, "text": " Now, it turns out that looking at functors from an arbitrary category C into the category of sets is there's a lot of rich mathematics there.", "tokens": [50364, 823, 11, 309, 4523, 484, 300, 1237, 412, 1019, 5547, 490, 364, 23211, 7719, 383, 666, 264, 7719, 295, 6352, 307, 456, 311, 257, 688, 295, 4593, 18666, 456, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09888458251953125, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.0032713136170059443}, {"id": 70, "seek": 79600, "start": 807.0, "end": 818.0, "text": " So why is that. Let me just say just like in the reels you can add numbers you can multiply them you can combine numbers to get new numbers in the category of set you can do this also.", "tokens": [50914, 407, 983, 307, 300, 13, 961, 385, 445, 584, 445, 411, 294, 264, 319, 1625, 291, 393, 909, 3547, 291, 393, 12972, 552, 291, 393, 10432, 3547, 281, 483, 777, 3547, 294, 264, 7719, 295, 992, 291, 393, 360, 341, 611, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09888458251953125, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.0032713136170059443}, {"id": 71, "seek": 81800, "start": 818.0, "end": 835.0, "text": " So, at the beginning of this series, Petter talked about an over fresher memory, you know you've heard of products or the Cartesian product of sets. He also mentioned the co product of sets, or you know I said the exponential object.", "tokens": [50364, 407, 11, 412, 264, 2863, 295, 341, 2638, 11, 10472, 391, 2825, 466, 364, 670, 25235, 511, 4675, 11, 291, 458, 291, 600, 2198, 295, 3383, 420, 264, 22478, 42434, 1674, 295, 6352, 13, 634, 611, 2835, 264, 598, 1674, 295, 6352, 11, 420, 291, 458, 286, 848, 264, 21510, 2657, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20878117425101145, "compression_ratio": 1.484076433121019, "no_speech_prob": 0.006286426912993193}, {"id": 72, "seek": 83500, "start": 835.0, "end": 850.0, "text": " So set has this nice property that you can take a bunch of sets and combine them in some way to get a new set. Now let me just kind of pull back the curtain and speak plainly for a minute.", "tokens": [50364, 407, 992, 575, 341, 1481, 4707, 300, 291, 393, 747, 257, 3840, 295, 6352, 293, 10432, 552, 294, 512, 636, 281, 483, 257, 777, 992, 13, 823, 718, 385, 445, 733, 295, 2235, 646, 264, 26789, 293, 1710, 11121, 356, 337, 257, 3456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09029970942316828, "compression_ratio": 1.55, "no_speech_prob": 0.037860069423913956}, {"id": 73, "seek": 83500, "start": 850.0, "end": 857.0, "text": " So the idea that I'm trying to mention right now are these constructions and category theory called limits and co limits.", "tokens": [51114, 407, 264, 1558, 300, 286, 478, 1382, 281, 2152, 558, 586, 366, 613, 7690, 626, 293, 7719, 5261, 1219, 10406, 293, 598, 10406, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09029970942316828, "compression_ratio": 1.55, "no_speech_prob": 0.037860069423913956}, {"id": 74, "seek": 85700, "start": 857.0, "end": 869.0, "text": " What I'm saying is that set has all limits and set has all co limits. So here's kind of what that means I think some of you are have probably heard these words or you're familiar with them already.", "tokens": [50364, 708, 286, 478, 1566, 307, 300, 992, 575, 439, 10406, 293, 992, 575, 439, 598, 10406, 13, 407, 510, 311, 733, 295, 437, 300, 1355, 286, 519, 512, 295, 291, 366, 362, 1391, 2198, 613, 2283, 420, 291, 434, 4963, 365, 552, 1217, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10480223099390666, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.06848374009132385}, {"id": 75, "seek": 85700, "start": 869.0, "end": 882.0, "text": " But in mathematics, quite often what you want to do, you have a whole bunch of mathematical objects, maybe their sets, or maybe their groups, or maybe their topological spaces or maybe their vector spaces, and you ask,", "tokens": [50964, 583, 294, 18666, 11, 1596, 2049, 437, 291, 528, 281, 360, 11, 291, 362, 257, 1379, 3840, 295, 18894, 6565, 11, 1310, 641, 6352, 11, 420, 1310, 641, 3935, 11, 420, 1310, 641, 1192, 4383, 7673, 420, 1310, 641, 8062, 7673, 11, 293, 291, 1029, 11, 51614], "temperature": 0.0, "avg_logprob": -0.10480223099390666, "compression_ratio": 1.7627118644067796, "no_speech_prob": 0.06848374009132385}, {"id": 76, "seek": 88200, "start": 882.0, "end": 891.0, "text": " is there a way that I can take this collection of objects and combine them in such a way as to get a new object in my category.", "tokens": [50364, 307, 456, 257, 636, 300, 286, 393, 747, 341, 5765, 295, 6565, 293, 10432, 552, 294, 1270, 257, 636, 382, 281, 483, 257, 777, 2657, 294, 452, 7719, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06755682871891902, "compression_ratio": 1.6127167630057804, "no_speech_prob": 0.017424369230866432}, {"id": 77, "seek": 88200, "start": 891.0, "end": 903.0, "text": " Now, there are sort of two typical ways that you can do this and by typical I mean these constructions are found all across the mathematical landscape.", "tokens": [50814, 823, 11, 456, 366, 1333, 295, 732, 7476, 2098, 300, 291, 393, 360, 341, 293, 538, 7476, 286, 914, 613, 7690, 626, 366, 1352, 439, 2108, 264, 18894, 9661, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06755682871891902, "compression_ratio": 1.6127167630057804, "no_speech_prob": 0.017424369230866432}, {"id": 78, "seek": 90300, "start": 903.0, "end": 915.0, "text": " And it turns out that when you kind of strip the constructions of their deep of their details and just look at the pattern. These constructions turn out to fall into two categories for lack of better word.", "tokens": [50364, 400, 309, 4523, 484, 300, 562, 291, 733, 295, 12828, 264, 7690, 626, 295, 641, 2452, 295, 641, 4365, 293, 445, 574, 412, 264, 5102, 13, 1981, 7690, 626, 1261, 484, 281, 2100, 666, 732, 10479, 337, 5011, 295, 1101, 1349, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12347959122567806, "compression_ratio": 1.7798507462686568, "no_speech_prob": 0.047389160841703415}, {"id": 79, "seek": 90300, "start": 915.0, "end": 932.0, "text": " I mean that in like the English sense not the math sense. So on the one hand, you can form what's called the limit of those objects, and depending on how that's constructed these have familiar names like the intersection of two sets, or the Cartesian product of two sets,", "tokens": [50964, 286, 914, 300, 294, 411, 264, 3669, 2020, 406, 264, 5221, 2020, 13, 407, 322, 264, 472, 1011, 11, 291, 393, 1254, 437, 311, 1219, 264, 4948, 295, 729, 6565, 11, 293, 5413, 322, 577, 300, 311, 17083, 613, 362, 4963, 5288, 411, 264, 15236, 295, 732, 6352, 11, 420, 264, 22478, 42434, 1674, 295, 732, 6352, 11, 51814], "temperature": 0.0, "avg_logprob": -0.12347959122567806, "compression_ratio": 1.7798507462686568, "no_speech_prob": 0.047389160841703415}, {"id": 80, "seek": 93200, "start": 932.0, "end": 939.0, "text": " or the Cartesian product of two topological spaces, direct sums of vector spaces.", "tokens": [50364, 420, 264, 22478, 42434, 1674, 295, 732, 1192, 4383, 7673, 11, 2047, 34499, 295, 8062, 7673, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16012736558914184, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.006094574928283691}, {"id": 81, "seek": 93200, "start": 939.0, "end": 956.0, "text": " Meets, if you have a lattice, and you can ask for the meat or, you know, sort of the minimum element, minimum element in the collection your lattice that's that's actually an example of a limit turns out greatest common divisors are also examples of these things.", "tokens": [50714, 1923, 1385, 11, 498, 291, 362, 257, 34011, 11, 293, 291, 393, 1029, 337, 264, 4615, 420, 11, 291, 458, 11, 1333, 295, 264, 7285, 4478, 11, 7285, 4478, 294, 264, 5765, 428, 34011, 300, 311, 300, 311, 767, 364, 1365, 295, 257, 4948, 4523, 484, 6636, 2689, 25974, 830, 366, 611, 5110, 295, 613, 721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16012736558914184, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.006094574928283691}, {"id": 82, "seek": 95600, "start": 956.0, "end": 972.0, "text": " If you have a group homomorphism and you ask for its kernel, all of these constructions on the left hand side are subsumed by one single idea and category theory they are instantiation of one single idea that's called a limit.", "tokens": [50364, 759, 291, 362, 257, 1594, 3655, 32702, 1434, 293, 291, 1029, 337, 1080, 28256, 11, 439, 295, 613, 7690, 626, 322, 264, 1411, 1011, 1252, 366, 2090, 28189, 538, 472, 2167, 1558, 293, 7719, 5261, 436, 366, 9836, 6642, 295, 472, 2167, 1558, 300, 311, 1219, 257, 4948, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1470073742812939, "compression_ratio": 1.7012987012987013, "no_speech_prob": 0.08746106922626495}, {"id": 83, "seek": 95600, "start": 972.0, "end": 982.0, "text": " And dual to that, you know and category theory will always like stick the word co in front of something you kind of reverse the arrows and so you get dual operations.", "tokens": [51164, 400, 11848, 281, 300, 11, 291, 458, 293, 7719, 5261, 486, 1009, 411, 2897, 264, 1349, 598, 294, 1868, 295, 746, 291, 733, 295, 9943, 264, 19669, 293, 370, 291, 483, 11848, 7705, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1470073742812939, "compression_ratio": 1.7012987012987013, "no_speech_prob": 0.08746106922626495}, {"id": 84, "seek": 98200, "start": 982.0, "end": 995.0, "text": " On the other hand, on the right hand side, you have things like unions co products direct sums again joins in a lattice dual to greatest common divisors least common multiple and co kernels.", "tokens": [50364, 1282, 264, 661, 1011, 11, 322, 264, 558, 1011, 1252, 11, 291, 362, 721, 411, 24914, 598, 3383, 2047, 34499, 797, 24397, 294, 257, 34011, 11848, 281, 6636, 2689, 25974, 830, 1935, 2689, 3866, 293, 598, 23434, 1625, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11011010750956919, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.01770193688571453}, {"id": 85, "seek": 98200, "start": 995.0, "end": 1009.0, "text": " So these are all examples of things called limits and common limits, we won't worry about the actual definition, like they satisfy some universal property, but I mentioned that to say that in the category of set.", "tokens": [51014, 407, 613, 366, 439, 5110, 295, 721, 1219, 10406, 293, 2689, 10406, 11, 321, 1582, 380, 3292, 466, 264, 3539, 7123, 11, 411, 436, 19319, 512, 11455, 4707, 11, 457, 286, 2835, 300, 281, 584, 300, 294, 264, 7719, 295, 992, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11011010750956919, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.01770193688571453}, {"id": 86, "seek": 100900, "start": 1009.0, "end": 1024.0, "text": " It has this wonderful property that you can take any collection of sets, and then asked for the limit, or asked for the co limit, and it turns out to exist. So it's another set in that category, and it satisfies universal properties.", "tokens": [50364, 467, 575, 341, 3715, 4707, 300, 291, 393, 747, 604, 5765, 295, 6352, 11, 293, 550, 2351, 337, 264, 4948, 11, 420, 2351, 337, 264, 598, 4948, 11, 293, 309, 4523, 484, 281, 2514, 13, 407, 309, 311, 1071, 992, 294, 300, 7719, 11, 293, 309, 44271, 11455, 7221, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09230556832738669, "compression_ratio": 1.7804878048780488, "no_speech_prob": 0.01970486342906952}, {"id": 87, "seek": 100900, "start": 1024.0, "end": 1033.0, "text": " You cannot do that with any category, any arbitrary category may or may not have that ability. It turns out the category sets does.", "tokens": [51114, 509, 2644, 360, 300, 365, 604, 7719, 11, 604, 23211, 7719, 815, 420, 815, 406, 362, 300, 3485, 13, 467, 4523, 484, 264, 7719, 6352, 775, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09230556832738669, "compression_ratio": 1.7804878048780488, "no_speech_prob": 0.01970486342906952}, {"id": 88, "seek": 103300, "start": 1033.0, "end": 1048.0, "text": " So that's just to suggest you that just like the real numbers was a nice set to look at functions into analogously the category of sets is a nice category to look at functors into it.", "tokens": [50364, 407, 300, 311, 445, 281, 3402, 291, 300, 445, 411, 264, 957, 3547, 390, 257, 1481, 992, 281, 574, 412, 6828, 666, 16660, 5098, 264, 7719, 295, 6352, 307, 257, 1481, 7719, 281, 574, 412, 1019, 5547, 666, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1150979453867132, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.020945318043231964}, {"id": 89, "seek": 104800, "start": 1048.0, "end": 1061.0, "text": " These functors because this is such a nice choice they have a name. So a functor from an arbitrary category C into the category sets. It's called a co pre sheaf.", "tokens": [50364, 1981, 1019, 5547, 570, 341, 307, 1270, 257, 1481, 3922, 436, 362, 257, 1315, 13, 407, 257, 1019, 1672, 490, 364, 23211, 7719, 383, 666, 264, 7719, 6352, 13, 467, 311, 1219, 257, 598, 659, 750, 2792, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17134336407264966, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.01150112971663475}, {"id": 90, "seek": 104800, "start": 1061.0, "end": 1077.0, "text": " Sometimes, you may want to look at contra variant functors from C into set. So it's just a functor where kind of flips the arrows. So in that case, folks will put a little OP above C.", "tokens": [51014, 4803, 11, 291, 815, 528, 281, 574, 412, 10742, 17501, 1019, 5547, 490, 383, 666, 992, 13, 407, 309, 311, 445, 257, 1019, 1672, 689, 733, 295, 40249, 264, 19669, 13, 407, 294, 300, 1389, 11, 4024, 486, 829, 257, 707, 23324, 3673, 383, 13, 51814], "temperature": 0.0, "avg_logprob": -0.17134336407264966, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.01150112971663475}, {"id": 91, "seek": 107700, "start": 1077.0, "end": 1087.0, "text": " They see up into set. Those are called pre sheaves. So pre sheaves. Let's just say functors.", "tokens": [50364, 814, 536, 493, 666, 992, 13, 3950, 366, 1219, 659, 750, 5423, 13, 407, 659, 750, 5423, 13, 961, 311, 445, 584, 1019, 5547, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18964228831546406, "compression_ratio": 1.5730994152046784, "no_speech_prob": 0.01449539978057146}, {"id": 92, "seek": 107700, "start": 1087.0, "end": 1103.0, "text": " In any case, this is a nice thing to look at it turns out that functors from C into set itself form a category so just like functions from x into our form a set with structure.", "tokens": [50864, 682, 604, 1389, 11, 341, 307, 257, 1481, 551, 281, 574, 412, 309, 4523, 484, 300, 1019, 5547, 490, 383, 666, 992, 2564, 1254, 257, 7719, 370, 445, 411, 6828, 490, 2031, 666, 527, 1254, 257, 992, 365, 3877, 13, 51664], "temperature": 0.0, "avg_logprob": -0.18964228831546406, "compression_ratio": 1.5730994152046784, "no_speech_prob": 0.01449539978057146}, {"id": 93, "seek": 110300, "start": 1103.0, "end": 1113.0, "text": " Functors from C into set form a category. It's a functor category and in fact, I think Pam talked about functor categories in his talk.", "tokens": [50364, 11166, 5547, 490, 383, 666, 992, 1254, 257, 7719, 13, 467, 311, 257, 1019, 1672, 7719, 293, 294, 1186, 11, 286, 519, 23532, 2825, 466, 1019, 1672, 10479, 294, 702, 751, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18800298902723525, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.04879334568977356}, {"id": 94, "seek": 110300, "start": 1113.0, "end": 1122.0, "text": " There the notation might have been square bracket from C to set, but this exponential notation is this notation for that same concept.", "tokens": [50864, 821, 264, 24657, 1062, 362, 668, 3732, 16904, 490, 383, 281, 992, 11, 457, 341, 21510, 24657, 307, 341, 24657, 337, 300, 912, 3410, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18800298902723525, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.04879334568977356}, {"id": 95, "seek": 110300, "start": 1122.0, "end": 1130.0, "text": " So it turns out objects or functors morphisms are natural transformations, but that's just kind of me drawing the analogy.", "tokens": [51314, 407, 309, 4523, 484, 6565, 420, 1019, 5547, 25778, 13539, 366, 3303, 34852, 11, 457, 300, 311, 445, 733, 295, 385, 6316, 264, 21663, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18800298902723525, "compression_ratio": 1.6652542372881356, "no_speech_prob": 0.04879334568977356}, {"id": 96, "seek": 113000, "start": 1130.0, "end": 1133.0, "text": " Now let me give you one more analogy.", "tokens": [50364, 823, 718, 385, 976, 291, 472, 544, 21663, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07160129672602604, "compression_ratio": 1.201834862385321, "no_speech_prob": 0.0062879156321287155}, {"id": 97, "seek": 113000, "start": 1133.0, "end": 1137.0, "text": " And then we'll move on to the language.", "tokens": [50514, 400, 550, 321, 603, 1286, 322, 281, 264, 2856, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07160129672602604, "compression_ratio": 1.201834862385321, "no_speech_prob": 0.0062879156321287155}, {"id": 98, "seek": 113000, "start": 1137.0, "end": 1143.0, "text": " There are very special vectors on the left hand side.", "tokens": [50714, 821, 366, 588, 2121, 18875, 322, 264, 1411, 1011, 1252, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07160129672602604, "compression_ratio": 1.201834862385321, "no_speech_prob": 0.0062879156321287155}, {"id": 99, "seek": 114300, "start": 1143.0, "end": 1164.0, "text": " In particular, for each element in the set X, there's a very particular vector associated to the element and the analogous thing holds on the right hand side, and that vector is a one hot encoding or a basis vector.", "tokens": [50364, 682, 1729, 11, 337, 1184, 4478, 294, 264, 992, 1783, 11, 456, 311, 257, 588, 1729, 8062, 6615, 281, 264, 4478, 293, 264, 16660, 563, 551, 9190, 322, 264, 558, 1011, 1252, 11, 293, 300, 8062, 307, 257, 472, 2368, 43430, 420, 257, 5143, 8062, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14024155616760253, "compression_ratio": 1.5579710144927537, "no_speech_prob": 0.013425000943243504}, {"id": 100, "seek": 116400, "start": 1164.0, "end": 1173.0, "text": " So for every element in the set X on the left hand side, there is a particular function.", "tokens": [50364, 407, 337, 633, 4478, 294, 264, 992, 1783, 322, 264, 1411, 1011, 1252, 11, 456, 307, 257, 1729, 2445, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1191925048828125, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.004467101767659187}, {"id": 101, "seek": 116400, "start": 1173.0, "end": 1188.0, "text": " That sort of sends any other elements in the set to one, if it's the same as the element I chose or to zero otherwise, or if I write this out as an array it's just a vector with all zeros, except for one in the appropriate spot.", "tokens": [50814, 663, 1333, 295, 14790, 604, 661, 4959, 294, 264, 992, 281, 472, 11, 498, 309, 311, 264, 912, 382, 264, 4478, 286, 5111, 420, 281, 4018, 5911, 11, 420, 498, 286, 2464, 341, 484, 382, 364, 10225, 309, 311, 445, 257, 8062, 365, 439, 35193, 11, 3993, 337, 472, 294, 264, 6854, 4008, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1191925048828125, "compression_ratio": 1.6173469387755102, "no_speech_prob": 0.004467101767659187}, {"id": 102, "seek": 118800, "start": 1188.0, "end": 1203.0, "text": " Analogously, there are functors from a category C into the category set, one of these code precheves that is very special.", "tokens": [50364, 16128, 664, 5098, 11, 456, 366, 1019, 5547, 490, 257, 7719, 383, 666, 264, 7719, 992, 11, 472, 295, 613, 3089, 659, 1876, 977, 300, 307, 588, 2121, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1651623076286869, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.0019872335251420736}, {"id": 103, "seek": 118800, "start": 1203.0, "end": 1206.0, "text": " And these are called representable functors.", "tokens": [51114, 400, 613, 366, 1219, 2906, 712, 1019, 5547, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1651623076286869, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.0019872335251420736}, {"id": 104, "seek": 118800, "start": 1206.0, "end": 1211.0, "text": " So for each objects little C in my category.", "tokens": [51264, 407, 337, 1184, 6565, 707, 383, 294, 452, 7719, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1651623076286869, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.0019872335251420736}, {"id": 105, "seek": 118800, "start": 1211.0, "end": 1217.0, "text": " There is a functor from the category into sets.", "tokens": [51514, 821, 307, 257, 1019, 1672, 490, 264, 7719, 666, 6352, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1651623076286869, "compression_ratio": 1.6049382716049383, "no_speech_prob": 0.0019872335251420736}, {"id": 106, "seek": 121700, "start": 1217.0, "end": 1221.0, "text": " There's another object in the category D.", "tokens": [50364, 821, 311, 1071, 2657, 294, 264, 7719, 413, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16383002144949776, "compression_ratio": 1.2450980392156863, "no_speech_prob": 0.004327106289565563}, {"id": 107, "seek": 121700, "start": 1221.0, "end": 1232.0, "text": " And it sends that object to the set of all morphisms from your given object C into D.", "tokens": [50564, 400, 309, 14790, 300, 2657, 281, 264, 992, 295, 439, 25778, 13539, 490, 428, 2212, 2657, 383, 666, 413, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16383002144949776, "compression_ratio": 1.2450980392156863, "no_speech_prob": 0.004327106289565563}, {"id": 108, "seek": 123200, "start": 1232.0, "end": 1250.0, "text": " I've seen this notation already in this series. Sometimes this set is denoted harm from C to D. Some other people, instead of writing harm, they'll write just the name of the category C so it kind of reminds you oh morphisms in what category C.", "tokens": [50364, 286, 600, 1612, 341, 24657, 1217, 294, 341, 2638, 13, 4803, 341, 992, 307, 1441, 23325, 6491, 490, 383, 281, 413, 13, 2188, 661, 561, 11, 2602, 295, 3579, 6491, 11, 436, 603, 2464, 445, 264, 1315, 295, 264, 7719, 383, 370, 309, 733, 295, 12025, 291, 1954, 25778, 13539, 294, 437, 7719, 383, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22868712473723848, "compression_ratio": 1.5061728395061729, "no_speech_prob": 0.0802677646279335}, {"id": 109, "seek": 125000, "start": 1250.0, "end": 1266.0, "text": " I like to think of, these are called representable functors, these harm functors, representable functors, these are a particular kind of code precheve, or if I were to kind of move the argument to the left, it would be a precheve.", "tokens": [50364, 286, 411, 281, 519, 295, 11, 613, 366, 1219, 2906, 712, 1019, 5547, 11, 613, 6491, 1019, 5547, 11, 2906, 712, 1019, 5547, 11, 613, 366, 257, 1729, 733, 295, 3089, 659, 1876, 303, 11, 420, 498, 286, 645, 281, 733, 295, 1286, 264, 6770, 281, 264, 1411, 11, 309, 576, 312, 257, 659, 1876, 303, 13, 51164], "temperature": 0.0, "avg_logprob": -0.17313496011202453, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.014944009482860565}, {"id": 110, "seek": 126600, "start": 1266.0, "end": 1281.0, "text": " I'll try later, not now, but I like to think of representable functors as kind of analogous to these one hot encodings, because just like any other vector is built up from one hot encodings.", "tokens": [50364, 286, 603, 853, 1780, 11, 406, 586, 11, 457, 286, 411, 281, 519, 295, 2906, 712, 1019, 5547, 382, 733, 295, 16660, 563, 281, 613, 472, 2368, 2058, 378, 1109, 11, 570, 445, 411, 604, 661, 8062, 307, 3094, 493, 490, 472, 2368, 2058, 378, 1109, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12194775372016721, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.23056907951831818}, {"id": 111, "seek": 126600, "start": 1281.0, "end": 1289.0, "text": " Similarly, any other code precheve is built up from these representables, but we'll say that later. So I like this analogy.", "tokens": [51114, 13157, 11, 604, 661, 3089, 659, 1876, 303, 307, 3094, 493, 490, 613, 2906, 2965, 11, 457, 321, 603, 584, 300, 1780, 13, 407, 286, 411, 341, 21663, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12194775372016721, "compression_ratio": 1.7252747252747254, "no_speech_prob": 0.23056907951831818}, {"id": 112, "seek": 128900, "start": 1289.0, "end": 1306.0, "text": " The reason I mentioned this is because these representable functors will play an important role in just a second. Okay, so that's my analogy for linear algebra maps into law, inherit structure from blah.", "tokens": [50364, 440, 1778, 286, 2835, 341, 307, 570, 613, 2906, 712, 1019, 5547, 486, 862, 364, 1021, 3090, 294, 445, 257, 1150, 13, 1033, 11, 370, 300, 311, 452, 21663, 337, 8213, 21989, 11317, 666, 2101, 11, 21389, 3877, 490, 12288, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09811944839281914, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.013215554878115654}, {"id": 113, "seek": 128900, "start": 1306.0, "end": 1318.0, "text": " So in particular functions into the category set inherit really nice structure. Now let's see how this theme or this analogy plays out in the context of language.", "tokens": [51214, 407, 294, 1729, 6828, 666, 264, 7719, 992, 21389, 534, 1481, 3877, 13, 823, 718, 311, 536, 577, 341, 6314, 420, 341, 21663, 5749, 484, 294, 264, 4319, 295, 2856, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09811944839281914, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.013215554878115654}, {"id": 114, "seek": 131800, "start": 1318.0, "end": 1323.0, "text": " So let me describe for you a category of language.", "tokens": [50364, 407, 718, 385, 6786, 337, 291, 257, 7719, 295, 2856, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09705872168907752, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.0014097894309088588}, {"id": 115, "seek": 131800, "start": 1323.0, "end": 1335.0, "text": " We'll see that it's nice, but like a set, you can't really do much with it. So we're going to look at functors out of that category. So let me describe that for you now is very simple.", "tokens": [50614, 492, 603, 536, 300, 309, 311, 1481, 11, 457, 411, 257, 992, 11, 291, 393, 380, 534, 360, 709, 365, 309, 13, 407, 321, 434, 516, 281, 574, 412, 1019, 5547, 484, 295, 300, 7719, 13, 407, 718, 385, 6786, 300, 337, 291, 586, 307, 588, 2199, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09705872168907752, "compression_ratio": 1.5359477124183007, "no_speech_prob": 0.0014097894309088588}, {"id": 116, "seek": 133500, "start": 1335.0, "end": 1343.0, "text": " So here's a category, consider all strings from some finite set of atomic symbols.", "tokens": [50364, 407, 510, 311, 257, 7719, 11, 1949, 439, 13985, 490, 512, 19362, 992, 295, 22275, 16944, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11945150859320341, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.005816311109811068}, {"id": 117, "seek": 133500, "start": 1343.0, "end": 1356.0, "text": " So if your finite set is the set of all words in English. Okay, it's a very large set but it's fine. You can just think of the take the free modeling on that set right all strings.", "tokens": [50764, 407, 498, 428, 19362, 992, 307, 264, 992, 295, 439, 2283, 294, 3669, 13, 1033, 11, 309, 311, 257, 588, 2416, 992, 457, 309, 311, 2489, 13, 509, 393, 445, 519, 295, 264, 747, 264, 1737, 15983, 322, 300, 992, 558, 439, 13985, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11945150859320341, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.005816311109811068}, {"id": 118, "seek": 135600, "start": 1356.0, "end": 1371.0, "text": " The sub string containment defines a preorder on this set. In other words, you know, we can make sense of when one string is contained in another string x is contained in y, and I can denote that by less than or equal to.", "tokens": [50364, 440, 1422, 6798, 44058, 23122, 257, 659, 4687, 322, 341, 992, 13, 682, 661, 2283, 11, 291, 458, 11, 321, 393, 652, 2020, 295, 562, 472, 6798, 307, 16212, 294, 1071, 6798, 2031, 307, 16212, 294, 288, 11, 293, 286, 393, 45708, 300, 538, 1570, 813, 420, 2681, 281, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17487890190548366, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.10359843820333481}, {"id": 119, "seek": 135600, "start": 1371.0, "end": 1375.0, "text": " So I think Penn mentioned in his talk, the concept of a preorder.", "tokens": [51114, 407, 286, 519, 12667, 2835, 294, 702, 751, 11, 264, 3410, 295, 257, 659, 4687, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17487890190548366, "compression_ratio": 1.6214689265536724, "no_speech_prob": 0.10359843820333481}, {"id": 120, "seek": 137500, "start": 1375.0, "end": 1383.0, "text": " So in my way of reminder, a preorder is a binary relation denoted by less than or equal to that's reflexive.", "tokens": [50364, 407, 294, 452, 636, 295, 13548, 11, 257, 659, 4687, 307, 257, 17434, 9721, 1441, 23325, 538, 1570, 813, 420, 2681, 281, 300, 311, 23802, 488, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16119877015701448, "compression_ratio": 1.9696969696969697, "no_speech_prob": 0.21711403131484985}, {"id": 121, "seek": 137500, "start": 1383.0, "end": 1388.0, "text": " So every substring is every string is contained in itself. So X is less than X.", "tokens": [50764, 407, 633, 4594, 2937, 307, 633, 6798, 307, 16212, 294, 2564, 13, 407, 1783, 307, 1570, 813, 1783, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16119877015701448, "compression_ratio": 1.9696969696969697, "no_speech_prob": 0.21711403131484985}, {"id": 122, "seek": 137500, "start": 1388.0, "end": 1390.0, "text": " And that's transitive.", "tokens": [51014, 400, 300, 311, 1145, 2187, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16119877015701448, "compression_ratio": 1.9696969696969697, "no_speech_prob": 0.21711403131484985}, {"id": 123, "seek": 137500, "start": 1390.0, "end": 1403.0, "text": " Right if blue on my screen is contained in small blue and small blue is contained in small blue marble that I know blue is contained in small blue marble. So that's transitivity.", "tokens": [51114, 1779, 498, 3344, 322, 452, 2568, 307, 16212, 294, 1359, 3344, 293, 1359, 3344, 307, 16212, 294, 1359, 3344, 26844, 300, 286, 458, 3344, 307, 16212, 294, 1359, 3344, 26844, 13, 407, 300, 311, 17976, 4253, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16119877015701448, "compression_ratio": 1.9696969696969697, "no_speech_prob": 0.21711403131484985}, {"id": 124, "seek": 140300, "start": 1403.0, "end": 1414.0, "text": " And as Penn mentioned, every preordered set is a category reflexivity is exactly an identity morphism transitivity is exactly composition.", "tokens": [50364, 400, 382, 12667, 2835, 11, 633, 659, 765, 4073, 992, 307, 257, 7719, 23802, 4253, 307, 2293, 364, 6575, 25778, 1434, 17976, 4253, 307, 2293, 12686, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1579335831307076, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.003121271962299943}, {"id": 125, "seek": 140300, "start": 1414.0, "end": 1419.0, "text": " So I just defined for you a preordered set, aka a category.", "tokens": [50914, 407, 286, 445, 7642, 337, 291, 257, 659, 765, 4073, 992, 11, 28042, 257, 7719, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1579335831307076, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.003121271962299943}, {"id": 126, "seek": 140300, "start": 1419.0, "end": 1426.0, "text": " And it just has at most one morphism between any two objects in that category. So it's very simple.", "tokens": [51164, 400, 309, 445, 575, 412, 881, 472, 25778, 1434, 1296, 604, 732, 6565, 294, 300, 7719, 13, 407, 309, 311, 588, 2199, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1579335831307076, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.003121271962299943}, {"id": 127, "seek": 142600, "start": 1426.0, "end": 1435.0, "text": " There's an arrow from X to Y whenever X is a substring of wine. Let's call this category L.", "tokens": [50364, 821, 311, 364, 11610, 490, 1783, 281, 398, 5699, 1783, 307, 257, 4594, 2937, 295, 7209, 13, 961, 311, 818, 341, 7719, 441, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15561366762433734, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.03962010517716408}, {"id": 128, "seek": 142600, "start": 1435.0, "end": 1445.0, "text": " Fine, it just kind of tells you what goes with what does this expression go with this expression. If the answer is yes there's an arrow. If the answer is no there's no arrow.", "tokens": [50814, 12024, 11, 309, 445, 733, 295, 5112, 291, 437, 1709, 365, 437, 775, 341, 6114, 352, 365, 341, 6114, 13, 759, 264, 1867, 307, 2086, 456, 311, 364, 11610, 13, 759, 264, 1867, 307, 572, 456, 311, 572, 11610, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15561366762433734, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.03962010517716408}, {"id": 129, "seek": 144500, "start": 1445.0, "end": 1462.0, "text": " It just tells you what goes with what. Okay, it's nice but that's very limited. In particular, I cannot, I cannot make sense of, like what's a concept in this category, or what's the context of something or can I combine ideas to get a new idea I don't have any of that", "tokens": [50364, 467, 445, 5112, 291, 437, 1709, 365, 437, 13, 1033, 11, 309, 311, 1481, 457, 300, 311, 588, 5567, 13, 682, 1729, 11, 286, 2644, 11, 286, 2644, 652, 2020, 295, 11, 411, 437, 311, 257, 3410, 294, 341, 7719, 11, 420, 437, 311, 264, 4319, 295, 746, 420, 393, 286, 10432, 3487, 281, 483, 257, 777, 1558, 286, 500, 380, 362, 604, 295, 300, 51214], "temperature": 0.0, "avg_logprob": -0.16833235766436602, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.23073367774486542}, {"id": 130, "seek": 144500, "start": 1462.0, "end": 1464.0, "text": " structure here.", "tokens": [51214, 3877, 510, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16833235766436602, "compression_ratio": 1.5159574468085106, "no_speech_prob": 0.23073367774486542}, {"id": 131, "seek": 146400, "start": 1464.0, "end": 1477.0, "text": " So this is a cue from this theme that we just spent several minutes thinking about. And what we'd like to do is now consider functors from that category into the category of set.", "tokens": [50364, 407, 341, 307, 257, 22656, 490, 341, 6314, 300, 321, 445, 4418, 2940, 2077, 1953, 466, 13, 400, 437, 321, 1116, 411, 281, 360, 307, 586, 1949, 1019, 5547, 490, 300, 7719, 666, 264, 7719, 295, 992, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18868573506673178, "compression_ratio": 1.7612612612612613, "no_speech_prob": 0.22241389751434326}, {"id": 132, "seek": 146400, "start": 1477.0, "end": 1491.0, "text": " So this is just repeating that theme and representable functors these hum functors are particularly nice in this case. And I like to think of them as like a first approximation to the meaning of of an expression.", "tokens": [51014, 407, 341, 307, 445, 18617, 300, 6314, 293, 2906, 712, 1019, 5547, 613, 1484, 1019, 5547, 366, 4098, 1481, 294, 341, 1389, 13, 400, 286, 411, 281, 519, 295, 552, 382, 411, 257, 700, 28023, 281, 264, 3620, 295, 295, 364, 6114, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18868573506673178, "compression_ratio": 1.7612612612612613, "no_speech_prob": 0.22241389751434326}, {"id": 133, "seek": 149100, "start": 1491.0, "end": 1497.0, "text": " Let's do that. Okay, pick, pick an expression in the category like the word blue.", "tokens": [50364, 961, 311, 360, 300, 13, 1033, 11, 1888, 11, 1888, 364, 6114, 294, 264, 7719, 411, 264, 1349, 3344, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19278618597215222, "compression_ratio": 1.4630872483221478, "no_speech_prob": 0.0064862193539738655}, {"id": 134, "seek": 149100, "start": 1497.0, "end": 1512.0, "text": " And let's look at the hum functor hum blue blank. Okay, where if I put in an expression X and the blank on the middle here, I get a set.", "tokens": [50664, 400, 718, 311, 574, 412, 264, 1484, 1019, 1672, 1484, 3344, 8247, 13, 1033, 11, 689, 498, 286, 829, 294, 364, 6114, 1783, 293, 264, 8247, 322, 264, 2808, 510, 11, 286, 483, 257, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19278618597215222, "compression_ratio": 1.4630872483221478, "no_speech_prob": 0.0064862193539738655}, {"id": 135, "seek": 151200, "start": 1512.0, "end": 1529.0, "text": " This set just tells me, is there an arrow from blue to X, or not. If there is an arrow from blue tax, then home of blue comma X is just the one point set representing that one arrow.", "tokens": [50364, 639, 992, 445, 5112, 385, 11, 307, 456, 364, 11610, 490, 3344, 281, 1783, 11, 420, 406, 13, 759, 456, 307, 364, 11610, 490, 3344, 3366, 11, 550, 1280, 295, 3344, 22117, 1783, 307, 445, 264, 472, 935, 992, 13460, 300, 472, 11610, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19661033153533936, "compression_ratio": 1.5041322314049588, "no_speech_prob": 0.15394610166549683}, {"id": 136, "seek": 152900, "start": 1529.0, "end": 1550.0, "text": " There's no arrow from blue tax. If blue is not contained in X, then I get the empty set. Okay, now I like this, because this representable functor sort of its pre image is the collection of all expressions that contain the word blue.", "tokens": [50364, 821, 311, 572, 11610, 490, 3344, 3366, 13, 759, 3344, 307, 406, 16212, 294, 1783, 11, 550, 286, 483, 264, 6707, 992, 13, 1033, 11, 586, 286, 411, 341, 11, 570, 341, 2906, 712, 1019, 1672, 1333, 295, 1080, 659, 3256, 307, 264, 5765, 295, 439, 15277, 300, 5304, 264, 1349, 3344, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13303308319627194, "compression_ratio": 1.4472049689440993, "no_speech_prob": 0.1022084504365921}, {"id": 137, "seek": 155000, "start": 1550.0, "end": 1568.0, "text": " And this reminds me of the onata lemma. So the onata limit is this. I'm sure you've heard of it this famous theorem and category theory, which essentially says that a mathematical object is completely determined by the network of relationships that has with other objects in the category.", "tokens": [50364, 400, 341, 12025, 385, 295, 264, 322, 3274, 7495, 1696, 13, 407, 264, 322, 3274, 4948, 307, 341, 13, 286, 478, 988, 291, 600, 2198, 295, 309, 341, 4618, 20904, 293, 7719, 5261, 11, 597, 4476, 1619, 300, 257, 18894, 2657, 307, 2584, 9540, 538, 264, 3209, 295, 6159, 300, 575, 365, 661, 6565, 294, 264, 7719, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1510380208492279, "compression_ratio": 1.7421875, "no_speech_prob": 0.26234567165374756}, {"id": 138, "seek": 155000, "start": 1568.0, "end": 1578.0, "text": " So you want to understand something important or all all important things about an object, you can look at morphisms out of that object or morphisms into it.", "tokens": [51264, 407, 291, 528, 281, 1223, 746, 1021, 420, 439, 439, 1021, 721, 466, 364, 2657, 11, 291, 393, 574, 412, 25778, 13539, 484, 295, 300, 2657, 420, 25778, 13539, 666, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1510380208492279, "compression_ratio": 1.7421875, "no_speech_prob": 0.26234567165374756}, {"id": 139, "seek": 157800, "start": 1578.0, "end": 1594.0, "text": " And here, this representable functor picks out exactly the network of ways that the word you've chosen, like blue, or whatever fits into all expressions that contain it in the category in your language.", "tokens": [50364, 400, 510, 11, 341, 2906, 712, 1019, 1672, 16137, 484, 2293, 264, 3209, 295, 2098, 300, 264, 1349, 291, 600, 8614, 11, 411, 3344, 11, 420, 2035, 9001, 666, 439, 15277, 300, 5304, 309, 294, 264, 7719, 294, 428, 2856, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10331063920801337, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.025917157530784607}, {"id": 140, "seek": 157800, "start": 1594.0, "end": 1604.0, "text": " So, you know, if you think about language a lot, then I'm sure you've heard, you know, this famous quote by John first, you show no word by the company it keeps.", "tokens": [51164, 407, 11, 291, 458, 11, 498, 291, 519, 466, 2856, 257, 688, 11, 550, 286, 478, 988, 291, 600, 2198, 11, 291, 458, 11, 341, 4618, 6513, 538, 2619, 700, 11, 291, 855, 572, 1349, 538, 264, 2237, 309, 5965, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10331063920801337, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.025917157530784607}, {"id": 141, "seek": 160400, "start": 1604.0, "end": 1615.0, "text": " I mean, this is how word embeddings work to something of the meaning of a word is sort of captured in its context. So this representable functor captures precisely that context.", "tokens": [50364, 286, 914, 11, 341, 307, 577, 1349, 12240, 29432, 589, 281, 746, 295, 264, 3620, 295, 257, 1349, 307, 1333, 295, 11828, 294, 1080, 4319, 13, 407, 341, 2906, 712, 1019, 1672, 27986, 13402, 300, 4319, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09967859586079915, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.06550914794206619}, {"id": 142, "seek": 160400, "start": 1615.0, "end": 1626.0, "text": " So you might think of this as like capturing something of meaning but you know I put that in quotes, and I say it's a first approximation, because as you can already guess this isn't everything.", "tokens": [50914, 407, 291, 1062, 519, 295, 341, 382, 411, 23384, 746, 295, 3620, 457, 291, 458, 286, 829, 300, 294, 19963, 11, 293, 286, 584, 309, 311, 257, 700, 28023, 11, 570, 382, 291, 393, 1217, 2041, 341, 1943, 380, 1203, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09967859586079915, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.06550914794206619}, {"id": 143, "seek": 162600, "start": 1626.0, "end": 1635.0, "text": " You know, there's nothing about the distributional information here. This is just kind of yes or no bare bones, but it's a good start.", "tokens": [50364, 509, 458, 11, 456, 311, 1825, 466, 264, 7316, 304, 1589, 510, 13, 639, 307, 445, 733, 295, 2086, 420, 572, 6949, 10491, 11, 457, 309, 311, 257, 665, 722, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13079954702642899, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.12927785515785217}, {"id": 144, "seek": 162600, "start": 1635.0, "end": 1647.0, "text": " So this is kind of like the native perspective. When I see representable functors, I kind of think, ah, the network of ways that that word fits into its environment so capture something of that.", "tokens": [50814, 407, 341, 307, 733, 295, 411, 264, 8470, 4585, 13, 1133, 286, 536, 2906, 712, 1019, 5547, 11, 286, 733, 295, 519, 11, 3716, 11, 264, 3209, 295, 2098, 300, 300, 1349, 9001, 666, 1080, 2823, 370, 7983, 746, 295, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13079954702642899, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.12927785515785217}, {"id": 145, "seek": 164700, "start": 1647.0, "end": 1657.0, "text": " So here's, you know, I'm just kind of belaboring the point. But when I see this functor, another image that I have in mind is like, it's kind of like a vector.", "tokens": [50364, 407, 510, 311, 11, 291, 458, 11, 286, 478, 445, 733, 295, 989, 455, 3662, 264, 935, 13, 583, 562, 286, 536, 341, 1019, 1672, 11, 1071, 3256, 300, 286, 362, 294, 1575, 307, 411, 11, 309, 311, 733, 295, 411, 257, 8062, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13399236290543168, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.1439921259880066}, {"id": 146, "seek": 164700, "start": 1657.0, "end": 1675.0, "text": " And I put sort of above the equal sign because this is not proper category theory. But when I think of the representable functor, I think of the vector of zeros and ones, or empty sets and one point sets right indexed by all of the expressions in the language, where", "tokens": [50864, 400, 286, 829, 1333, 295, 3673, 264, 2681, 1465, 570, 341, 307, 406, 2296, 7719, 5261, 13, 583, 562, 286, 519, 295, 264, 2906, 712, 1019, 1672, 11, 286, 519, 295, 264, 8062, 295, 35193, 293, 2306, 11, 420, 6707, 6352, 293, 472, 935, 6352, 558, 8186, 292, 538, 439, 295, 264, 15277, 294, 264, 2856, 11, 689, 51764], "temperature": 0.0, "avg_logprob": -0.13399236290543168, "compression_ratio": 1.683794466403162, "no_speech_prob": 0.1439921259880066}, {"id": 147, "seek": 167500, "start": 1675.0, "end": 1694.0, "text": " an empty set in that slot, if blue is not contained in that expression like deep red being cherries, or a one point set in that slot if blue is contained in that, in that expression, that's indexing that spot like small blue marble, beautiful blue", "tokens": [50364, 364, 6707, 992, 294, 300, 14747, 11, 498, 3344, 307, 406, 16212, 294, 300, 6114, 411, 2452, 2182, 885, 12085, 2244, 11, 420, 257, 472, 935, 992, 294, 300, 14747, 498, 3344, 307, 16212, 294, 300, 11, 294, 300, 6114, 11, 300, 311, 8186, 278, 300, 4008, 411, 1359, 3344, 26844, 11, 2238, 3344, 51314], "temperature": 0.0, "avg_logprob": -0.115594115750543, "compression_ratio": 1.8296296296296297, "no_speech_prob": 0.0031707189045846462}, {"id": 148, "seek": 169400, "start": 1694.0, "end": 1706.0, "text": " ocean, etc. So when I think of representable functor, I think of like a vector whose entries are empty, or, or one point set indexed by expressions in the language.", "tokens": [50364, 7810, 11, 5183, 13, 407, 562, 286, 519, 295, 2906, 712, 1019, 1672, 11, 286, 519, 295, 411, 257, 8062, 6104, 23041, 366, 6707, 11, 420, 11, 420, 472, 935, 992, 8186, 292, 538, 15277, 294, 264, 2856, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15031399161128675, "compression_ratio": 1.4509803921568627, "no_speech_prob": 0.17985129356384277}, {"id": 149, "seek": 169400, "start": 1706.0, "end": 1711.0, "text": " Okay, this is just like something that I have in my mind.", "tokens": [50964, 1033, 11, 341, 307, 445, 411, 746, 300, 286, 362, 294, 452, 1575, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15031399161128675, "compression_ratio": 1.4509803921568627, "no_speech_prob": 0.17985129356384277}, {"id": 150, "seek": 171100, "start": 1711.0, "end": 1724.0, "text": " Now, why did we do this to make our lives more complicated? No. So as we said, when you look at functors into a category with rich structure, like set, you can do things with it.", "tokens": [50364, 823, 11, 983, 630, 321, 360, 341, 281, 652, 527, 2909, 544, 6179, 30, 883, 13, 407, 382, 321, 848, 11, 562, 291, 574, 412, 1019, 5547, 666, 257, 7719, 365, 4593, 3877, 11, 411, 992, 11, 291, 393, 360, 721, 365, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07609648564282585, "compression_ratio": 1.4696132596685083, "no_speech_prob": 0.0725402683019638}, {"id": 151, "seek": 171100, "start": 1724.0, "end": 1730.0, "text": " So I was kind of hinting that these representable functors behave like building blocks.", "tokens": [51014, 407, 286, 390, 733, 295, 12075, 278, 300, 613, 2906, 712, 1019, 5547, 15158, 411, 2390, 8474, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07609648564282585, "compression_ratio": 1.4696132596685083, "no_speech_prob": 0.0725402683019638}, {"id": 152, "seek": 173000, "start": 1730.0, "end": 1742.0, "text": " We can actually use representable functors, or these co pre sheaves to construct new co pre sheaves, and we can do that by using the structure that is in the base category set.", "tokens": [50364, 492, 393, 767, 764, 2906, 712, 1019, 5547, 11, 420, 613, 598, 659, 750, 5423, 281, 7690, 777, 598, 659, 750, 5423, 11, 293, 321, 393, 360, 300, 538, 1228, 264, 3877, 300, 307, 294, 264, 3096, 7719, 992, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1497690425199621, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.3135952651500702}, {"id": 153, "seek": 173000, "start": 1742.0, "end": 1754.0, "text": " So I mentioned set has all limits, all co limits. It's also Cartesian close. What that means it has something like an internal home, which if you unwind all of that.", "tokens": [50964, 407, 286, 2835, 992, 575, 439, 10406, 11, 439, 598, 10406, 13, 467, 311, 611, 22478, 42434, 1998, 13, 708, 300, 1355, 309, 575, 746, 411, 364, 6920, 1280, 11, 597, 498, 291, 517, 12199, 439, 295, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1497690425199621, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.3135952651500702}, {"id": 154, "seek": 175400, "start": 1754.0, "end": 1769.0, "text": " What it suggests is that we have some kind of notion of conjunction. That's kind of like what a limit is disjunction. That's kind of like what a co limit is enclosure Cartesian closure is kind of something like implication.", "tokens": [50364, 708, 309, 13409, 307, 300, 321, 362, 512, 733, 295, 10710, 295, 27482, 13, 663, 311, 733, 295, 411, 437, 257, 4948, 307, 717, 10010, 882, 13, 663, 311, 733, 295, 411, 437, 257, 598, 4948, 307, 34093, 22478, 42434, 24653, 307, 733, 295, 746, 411, 37814, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13518365607204208, "compression_ratio": 1.8502673796791445, "no_speech_prob": 0.03407410904765129}, {"id": 155, "seek": 175400, "start": 1769.0, "end": 1778.0, "text": " So, I want to give you a concrete example how am I making these connections like why is a co limit like disjunction or or.", "tokens": [51114, 407, 11, 286, 528, 281, 976, 291, 257, 9859, 1365, 577, 669, 286, 1455, 613, 9271, 411, 983, 307, 257, 598, 4948, 411, 717, 10010, 882, 420, 420, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13518365607204208, "compression_ratio": 1.8502673796791445, "no_speech_prob": 0.03407410904765129}, {"id": 156, "seek": 177800, "start": 1778.0, "end": 1781.0, "text": " A concrete example of what that looks like.", "tokens": [50364, 316, 9859, 1365, 295, 437, 300, 1542, 411, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1696105653589422, "compression_ratio": 1.2598425196850394, "no_speech_prob": 0.16857752203941345}, {"id": 157, "seek": 177800, "start": 1781.0, "end": 1787.0, "text": " So suppose I have, you know, a functor representing red.", "tokens": [50514, 407, 7297, 286, 362, 11, 291, 458, 11, 257, 1019, 1672, 13460, 2182, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1696105653589422, "compression_ratio": 1.2598425196850394, "no_speech_prob": 0.16857752203941345}, {"id": 158, "seek": 177800, "start": 1787.0, "end": 1791.0, "text": " That's like the network of ways red fits into the language.", "tokens": [50814, 663, 311, 411, 264, 3209, 295, 2098, 2182, 9001, 666, 264, 2856, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1696105653589422, "compression_ratio": 1.2598425196850394, "no_speech_prob": 0.16857752203941345}, {"id": 159, "seek": 179100, "start": 1791.0, "end": 1797.0, "text": " Suppose I also have the functor representing blue. Hey, the one we just looked at.", "tokens": [50364, 21360, 286, 611, 362, 264, 1019, 1672, 13460, 3344, 13, 1911, 11, 264, 472, 321, 445, 2956, 412, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14064168492588427, "compression_ratio": 1.6775510204081632, "no_speech_prob": 0.013418067246675491}, {"id": 160, "seek": 179100, "start": 1797.0, "end": 1809.0, "text": " So I'm claiming that if I have two functors, I can take what's called their co product. That's a kind of co limit, which I claim is analogous to to disjunction.", "tokens": [50664, 407, 286, 478, 19232, 300, 498, 286, 362, 732, 1019, 5547, 11, 286, 393, 747, 437, 311, 1219, 641, 598, 1674, 13, 663, 311, 257, 733, 295, 598, 4948, 11, 597, 286, 3932, 307, 16660, 563, 281, 281, 717, 10010, 882, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14064168492588427, "compression_ratio": 1.6775510204081632, "no_speech_prob": 0.013418067246675491}, {"id": 161, "seek": 179100, "start": 1809.0, "end": 1820.0, "text": " I claim it's analogous to the concept quote unquote of red or blue. So here's why I make that claim. When you when you write down the definition. Here's what you find.", "tokens": [51264, 286, 3932, 309, 311, 16660, 563, 281, 264, 3410, 6513, 37557, 295, 2182, 420, 3344, 13, 407, 510, 311, 983, 286, 652, 300, 3932, 13, 1133, 291, 562, 291, 2464, 760, 264, 7123, 13, 1692, 311, 437, 291, 915, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14064168492588427, "compression_ratio": 1.6775510204081632, "no_speech_prob": 0.013418067246675491}, {"id": 162, "seek": 182000, "start": 1820.0, "end": 1831.0, "text": " So a co product means I can take two functors harm red comma blank co product together with harm blue comma blank.", "tokens": [50364, 407, 257, 598, 1674, 1355, 286, 393, 747, 732, 1019, 5547, 6491, 2182, 22117, 8247, 598, 1674, 1214, 365, 6491, 3344, 22117, 8247, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2167520242578843, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0014546962920576334}, {"id": 163, "seek": 182000, "start": 1831.0, "end": 1844.0, "text": " That defines a new functor that sends an expression X to the union of the two sets, harm of red index and harm of blue index.", "tokens": [50914, 663, 23122, 257, 777, 1019, 1672, 300, 14790, 364, 6114, 1783, 281, 264, 11671, 295, 264, 732, 6352, 11, 6491, 295, 2182, 8186, 293, 6491, 295, 3344, 8186, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2167520242578843, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0014546962920576334}, {"id": 164, "seek": 182000, "start": 1844.0, "end": 1846.0, "text": " So here's what that means.", "tokens": [51564, 407, 510, 311, 437, 300, 1355, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2167520242578843, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.0014546962920576334}, {"id": 165, "seek": 184600, "start": 1846.0, "end": 1858.0, "text": " I get a new functor, a new co pre chief. And again, if I envision it is like a vector whose entries are empty set or, or something else.", "tokens": [50364, 286, 483, 257, 777, 1019, 1672, 11, 257, 777, 598, 659, 9588, 13, 400, 797, 11, 498, 286, 24739, 309, 307, 411, 257, 8062, 6104, 23041, 366, 6707, 992, 420, 11, 420, 746, 1646, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1501672855321912, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.00505742896348238}, {"id": 166, "seek": 184600, "start": 1858.0, "end": 1873.0, "text": " What you find is that this functor is sort of supported on all texts that either contain red or contain blue or contain both of them.", "tokens": [50964, 708, 291, 915, 307, 300, 341, 1019, 1672, 307, 1333, 295, 8104, 322, 439, 15765, 300, 2139, 5304, 2182, 420, 5304, 3344, 420, 5304, 1293, 295, 552, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1501672855321912, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.00505742896348238}, {"id": 167, "seek": 187300, "start": 1873.0, "end": 1887.0, "text": " It's non empty on the union of all of those sets. So, for example, deep red being cherries that contains the word red so this that I get is the one point set small blue marble that contains the word blue.", "tokens": [50364, 467, 311, 2107, 6707, 322, 264, 11671, 295, 439, 295, 729, 6352, 13, 407, 11, 337, 1365, 11, 2452, 2182, 885, 12085, 2244, 300, 8306, 264, 1349, 2182, 370, 341, 300, 286, 483, 307, 264, 472, 935, 992, 1359, 3344, 26844, 300, 8306, 264, 1349, 3344, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12846128507093948, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.008845027536153793}, {"id": 168, "seek": 187300, "start": 1887.0, "end": 1890.0, "text": " So I get the one point set.", "tokens": [51064, 407, 286, 483, 264, 472, 935, 992, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12846128507093948, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.008845027536153793}, {"id": 169, "seek": 187300, "start": 1890.0, "end": 1898.0, "text": " Did you put the kettle on contains neither of those words. So I get the empty set red and blue fireworks contains both.", "tokens": [51214, 2589, 291, 829, 264, 39088, 322, 8306, 9662, 295, 729, 2283, 13, 407, 286, 483, 264, 6707, 992, 2182, 293, 3344, 28453, 8306, 1293, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12846128507093948, "compression_ratio": 1.8526315789473684, "no_speech_prob": 0.008845027536153793}, {"id": 170, "seek": 189800, "start": 1898.0, "end": 1916.0, "text": " So I actually get the union of two one point sets or two points that. Okay, so it's not empty this functor this co product of red and blue is not empty on all sets that either contain red, sorry, all expressions that either contain red, or blue or both.", "tokens": [50364, 407, 286, 767, 483, 264, 11671, 295, 732, 472, 935, 6352, 420, 732, 2793, 300, 13, 1033, 11, 370, 309, 311, 406, 6707, 341, 1019, 1672, 341, 598, 1674, 295, 2182, 293, 3344, 307, 406, 6707, 322, 439, 6352, 300, 2139, 5304, 2182, 11, 2597, 11, 439, 15277, 300, 2139, 5304, 2182, 11, 420, 3344, 420, 1293, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1291805648803711, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.006095490418374538}, {"id": 171, "seek": 189800, "start": 1916.0, "end": 1927.0, "text": " And that pairs well with this idea of union as like or when dealing with sets. So that's kind of why we think of co products is kind of like disjunction.", "tokens": [51264, 400, 300, 15494, 731, 365, 341, 1558, 295, 11671, 382, 411, 420, 562, 6260, 365, 6352, 13, 407, 300, 311, 733, 295, 983, 321, 519, 295, 598, 3383, 307, 733, 295, 411, 717, 10010, 882, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1291805648803711, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.006095490418374538}, {"id": 172, "seek": 192700, "start": 1927.0, "end": 1935.0, "text": " Okay, so there are other things you can do, you can take the product, you can do this thing called internal home which is like implication.", "tokens": [50364, 1033, 11, 370, 456, 366, 661, 721, 291, 393, 360, 11, 291, 393, 747, 264, 1674, 11, 291, 393, 360, 341, 551, 1219, 6920, 1280, 597, 307, 411, 37814, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0901321538289388, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.005906314123421907}, {"id": 173, "seek": 192700, "start": 1935.0, "end": 1944.0, "text": " Writing that down gets a little bit more complicated, but there are other limits and co limits. So the point is, so here's kind of a summary of what we've done so far.", "tokens": [50764, 32774, 300, 760, 2170, 257, 707, 857, 544, 6179, 11, 457, 456, 366, 661, 10406, 293, 598, 10406, 13, 407, 264, 935, 307, 11, 370, 510, 311, 733, 295, 257, 12691, 295, 437, 321, 600, 1096, 370, 1400, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0901321538289388, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.005906314123421907}, {"id": 174, "seek": 194400, "start": 1944.0, "end": 1956.0, "text": " So we started with a very bare bones category L. It's like a preorder, it just tells you what goes with what. So, in that sense, you can kind of think of it as like syntax, maybe.", "tokens": [50364, 407, 321, 1409, 365, 257, 588, 6949, 10491, 7719, 441, 13, 467, 311, 411, 257, 659, 4687, 11, 309, 445, 5112, 291, 437, 1709, 365, 437, 13, 407, 11, 294, 300, 2020, 11, 291, 393, 733, 295, 519, 295, 309, 382, 411, 28431, 11, 1310, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1781283718044475, "compression_ratio": 1.4206896551724137, "no_speech_prob": 0.13639314472675323}, {"id": 175, "seek": 194400, "start": 1956.0, "end": 1958.0, "text": " What goes with what. Okay.", "tokens": [50964, 708, 1709, 365, 437, 13, 1033, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1781283718044475, "compression_ratio": 1.4206896551724137, "no_speech_prob": 0.13639314472675323}, {"id": 176, "seek": 195800, "start": 1958.0, "end": 1973.0, "text": " So we took, we passed from that category to the set of the category of co pre sheaves on it. So that's what I'm kind of thinking as a synantics. So that's kind of where the meaning is in this United types sense.", "tokens": [50364, 407, 321, 1890, 11, 321, 4678, 490, 300, 7719, 281, 264, 992, 295, 264, 7719, 295, 598, 659, 750, 5423, 322, 309, 13, 407, 300, 311, 437, 286, 478, 733, 295, 1953, 382, 257, 5451, 45298, 13, 407, 300, 311, 733, 295, 689, 264, 3620, 307, 294, 341, 2824, 3467, 2020, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17340228022361287, "compression_ratio": 1.7797356828193833, "no_speech_prob": 0.011324450373649597}, {"id": 177, "seek": 195800, "start": 1973.0, "end": 1987.0, "text": " So every expression on the left, who responds to a representable functor on the right so that functor just picks out the kind of context of that word or all expressions that contain that word.", "tokens": [51114, 407, 633, 6114, 322, 264, 1411, 11, 567, 27331, 281, 257, 2906, 712, 1019, 1672, 322, 264, 558, 370, 300, 1019, 1672, 445, 16137, 484, 264, 733, 295, 4319, 295, 300, 1349, 420, 439, 15277, 300, 5304, 300, 1349, 13, 51814], "temperature": 0.0, "avg_logprob": -0.17340228022361287, "compression_ratio": 1.7797356828193833, "no_speech_prob": 0.011324450373649597}, {"id": 178, "seek": 198700, "start": 1988.0, "end": 1995.0, "text": " This passage from left to right, this assignment, blue goes to harm blue, comma blank.", "tokens": [50414, 639, 11497, 490, 1411, 281, 558, 11, 341, 15187, 11, 3344, 1709, 281, 6491, 3344, 11, 22117, 8247, 13, 50764], "temperature": 0.0, "avg_logprob": -0.20842611524793836, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.004068239592015743}, {"id": 179, "seek": 198700, "start": 1995.0, "end": 2002.0, "text": " That turns out to be a functor that functor is called the United embedding. So I mentioned that in case you've heard that word.", "tokens": [50764, 663, 4523, 484, 281, 312, 257, 1019, 1672, 300, 1019, 1672, 307, 1219, 264, 2824, 12240, 3584, 13, 407, 286, 2835, 300, 294, 1389, 291, 600, 2198, 300, 1349, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20842611524793836, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.004068239592015743}, {"id": 180, "seek": 198700, "start": 2002.0, "end": 2011.0, "text": " The op that you see on the left, it just is saying that this United embedding is contra variant so versus arrows but that's kind of like bookkeeping.", "tokens": [51114, 440, 999, 300, 291, 536, 322, 264, 1411, 11, 309, 445, 307, 1566, 300, 341, 2824, 12240, 3584, 307, 10742, 17501, 370, 5717, 19669, 457, 300, 311, 733, 295, 411, 1446, 25769, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20842611524793836, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.004068239592015743}, {"id": 181, "seek": 201100, "start": 2012.0, "end": 2026.0, "text": " So, so this is just a summary of what we've done so far. We started with like a kind of in quotation marks think of it as like a syntax category very bare bones just tells you what goes with what, not a lot of structure, like no structure.", "tokens": [50414, 407, 11, 370, 341, 307, 445, 257, 12691, 295, 437, 321, 600, 1096, 370, 1400, 13, 492, 1409, 365, 411, 257, 733, 295, 294, 47312, 10640, 519, 295, 309, 382, 411, 257, 28431, 7719, 588, 6949, 10491, 445, 5112, 291, 437, 1709, 365, 437, 11, 406, 257, 688, 295, 3877, 11, 411, 572, 3877, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14315529192908336, "compression_ratio": 1.5126582278481013, "no_speech_prob": 0.0011332741705700755}, {"id": 182, "seek": 202600, "start": 2026.0, "end": 2039.0, "text": " And then if you pass to co pre sheaves or functors from that category into set, you have the ability to capture something of meaning of a word in the sense of john first, in the sense of the native lemma.", "tokens": [50364, 400, 550, 498, 291, 1320, 281, 598, 659, 750, 5423, 420, 1019, 5547, 490, 300, 7719, 666, 992, 11, 291, 362, 264, 3485, 281, 7983, 746, 295, 3620, 295, 257, 1349, 294, 264, 2020, 295, 35097, 700, 11, 294, 264, 2020, 295, 264, 8470, 7495, 1696, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1666202772231329, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.006094823125749826}, {"id": 183, "seek": 202600, "start": 2039.0, "end": 2048.0, "text": " And then you actually have structure in that category, and you can start to combine things in a way that kind of feels like logic or maybe like reasoning.", "tokens": [51014, 400, 550, 291, 767, 362, 3877, 294, 300, 7719, 11, 293, 291, 393, 722, 281, 10432, 721, 294, 257, 636, 300, 733, 295, 3417, 411, 9952, 420, 1310, 411, 21577, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1666202772231329, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.006094823125749826}, {"id": 184, "seek": 204800, "start": 2048.0, "end": 2058.0, "text": " I like to think of pictures so here it is, you know I start with a word and then I send it to like kind of this network of ways that it fits into the category.", "tokens": [50364, 286, 411, 281, 519, 295, 5242, 370, 510, 309, 307, 11, 291, 458, 286, 722, 365, 257, 1349, 293, 550, 286, 2845, 309, 281, 411, 733, 295, 341, 3209, 295, 2098, 300, 309, 9001, 666, 264, 7719, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1310032606124878, "compression_ratio": 1.4415584415584415, "no_speech_prob": 0.02884206548333168}, {"id": 185, "seek": 204800, "start": 2058.0, "end": 2064.0, "text": " This is nice, but as you can already guess, it's very limited.", "tokens": [50864, 639, 307, 1481, 11, 457, 382, 291, 393, 1217, 2041, 11, 309, 311, 588, 5567, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1310032606124878, "compression_ratio": 1.4415584415584415, "no_speech_prob": 0.02884206548333168}, {"id": 186, "seek": 206400, "start": 2064.0, "end": 2075.0, "text": " It's just kind of like binary yes or no does this fit in kind of discrete. It has nothing. It knows nothing about the distributional information of language.", "tokens": [50364, 467, 311, 445, 733, 295, 411, 17434, 2086, 420, 572, 775, 341, 3318, 294, 733, 295, 27706, 13, 467, 575, 1825, 13, 467, 3255, 1825, 466, 264, 7316, 304, 1589, 295, 2856, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1506833533445994, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.10507916659116745}, {"id": 187, "seek": 206400, "start": 2075.0, "end": 2091.0, "text": " So what you'd really like to do what would be better is if you have like you know version 2.0, where if I'm, you know, if you can give me the fact that blue is contained in small blue, but also what's the probability of seeing that.", "tokens": [50914, 407, 437, 291, 1116, 534, 411, 281, 360, 437, 576, 312, 1101, 307, 498, 291, 362, 411, 291, 458, 3037, 568, 13, 15, 11, 689, 498, 286, 478, 11, 291, 458, 11, 498, 291, 393, 976, 385, 264, 1186, 300, 3344, 307, 16212, 294, 1359, 3344, 11, 457, 611, 437, 311, 264, 8482, 295, 2577, 300, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1506833533445994, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.10507916659116745}, {"id": 188, "seek": 209100, "start": 2091.0, "end": 2107.0, "text": " If I see the word blue what's the probability that you know it'll be completed by small blue marble, or, you know, whatever that probability is it's going to be higher than like I woke up and had a blue idea, just to borrow, you know, Chomsky or something.", "tokens": [50364, 759, 286, 536, 264, 1349, 3344, 437, 311, 264, 8482, 300, 291, 458, 309, 603, 312, 7365, 538, 1359, 3344, 26844, 11, 420, 11, 291, 458, 11, 2035, 300, 8482, 307, 309, 311, 516, 281, 312, 2946, 813, 411, 286, 12852, 493, 293, 632, 257, 3344, 1558, 11, 445, 281, 11172, 11, 291, 458, 11, 761, 4785, 4133, 420, 746, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11931022497323843, "compression_ratio": 1.5515151515151515, "no_speech_prob": 0.002181834075599909}, {"id": 189, "seek": 210700, "start": 2107.0, "end": 2121.0, "text": " So you'd like to really wait the arrows in your category with conditional probabilities of continuing an expression with a larger expression.", "tokens": [50364, 407, 291, 1116, 411, 281, 534, 1699, 264, 19669, 294, 428, 7719, 365, 27708, 33783, 295, 9289, 364, 6114, 365, 257, 4833, 6114, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17541757651737758, "compression_ratio": 1.3177570093457944, "no_speech_prob": 0.15993864834308624}, {"id": 190, "seek": 212100, "start": 2122.0, "end": 2139.0, "text": " And then if you include this distributional information, then you can ask, okay, can I combine concepts there and is that kind of capturing the sort of framework of getting something like logic or reasoning from, you know, just knowing what goes with what together with the probabilities.", "tokens": [50414, 400, 550, 498, 291, 4090, 341, 7316, 304, 1589, 11, 550, 291, 393, 1029, 11, 1392, 11, 393, 286, 10432, 10392, 456, 293, 307, 300, 733, 295, 23384, 264, 1333, 295, 8388, 295, 1242, 746, 411, 9952, 420, 21577, 490, 11, 291, 458, 11, 445, 5276, 437, 1709, 365, 437, 1214, 365, 264, 33783, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10221638076606838, "compression_ratio": 1.7131147540983607, "no_speech_prob": 0.28424328565597534}, {"id": 191, "seek": 212100, "start": 2139.0, "end": 2150.0, "text": " Now the nice thing is that category theory provides a way to do this so this is exactly what we find an enriched category theory.", "tokens": [51264, 823, 264, 1481, 551, 307, 300, 7719, 5261, 6417, 257, 636, 281, 360, 341, 370, 341, 307, 2293, 437, 321, 915, 364, 48624, 7719, 5261, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10221638076606838, "compression_ratio": 1.7131147540983607, "no_speech_prob": 0.28424328565597534}, {"id": 192, "seek": 215000, "start": 2150.0, "end": 2155.0, "text": " So let me let me give a quick introduction to that what is an enriched category theory.", "tokens": [50364, 407, 718, 385, 718, 385, 976, 257, 1702, 9339, 281, 300, 437, 307, 364, 48624, 7719, 5261, 13, 50614], "temperature": 0.0, "avg_logprob": -0.21527862548828125, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.005218349397182465}, {"id": 193, "seek": 215000, "start": 2155.0, "end": 2160.0, "text": " So in category theory, if you have two arrows x to y.", "tokens": [50614, 407, 294, 7719, 5261, 11, 498, 291, 362, 732, 19669, 2031, 281, 288, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21527862548828125, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.005218349397182465}, {"id": 194, "seek": 216000, "start": 2160.0, "end": 2170.0, "text": " I'm going to give you a sum of x to y or what I'm denoting by C x to y that's the set of all morphisms from x to y. Okay, you asked that that be a set.", "tokens": [50364, 286, 478, 516, 281, 976, 291, 257, 2408, 295, 2031, 281, 288, 420, 437, 286, 478, 1441, 17001, 538, 383, 2031, 281, 288, 300, 311, 264, 992, 295, 439, 25778, 13539, 490, 2031, 281, 288, 13, 1033, 11, 291, 2351, 300, 300, 312, 257, 992, 13, 50864], "temperature": 0.0, "avg_logprob": -0.29189868306004724, "compression_ratio": 1.6089385474860336, "no_speech_prob": 0.045326117426157}, {"id": 195, "seek": 216000, "start": 2170.0, "end": 2177.0, "text": " The point is that in enriched category theory, that may not just be a set.", "tokens": [50864, 440, 935, 307, 300, 294, 48624, 7719, 5261, 11, 300, 815, 406, 445, 312, 257, 992, 13, 51214], "temperature": 0.0, "avg_logprob": -0.29189868306004724, "compression_ratio": 1.6089385474860336, "no_speech_prob": 0.045326117426157}, {"id": 196, "seek": 216000, "start": 2177.0, "end": 2184.0, "text": " It could be a set with extra structure or could not be a set.", "tokens": [51214, 467, 727, 312, 257, 992, 365, 2857, 3877, 420, 727, 406, 312, 257, 992, 13, 51564], "temperature": 0.0, "avg_logprob": -0.29189868306004724, "compression_ratio": 1.6089385474860336, "no_speech_prob": 0.045326117426157}, {"id": 197, "seek": 218400, "start": 2184.0, "end": 2191.0, "text": " It could be a set with extra structure will think about it. If x and y are vector spaces.", "tokens": [50364, 467, 727, 312, 257, 992, 365, 2857, 3877, 486, 519, 466, 309, 13, 759, 2031, 293, 288, 366, 8062, 7673, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1837007922510947, "compression_ratio": 1.59375, "no_speech_prob": 0.06556455790996552}, {"id": 198, "seek": 218400, "start": 2191.0, "end": 2202.0, "text": " Then the set of all linear transformations from x to y is also a vector space. It's not just a set you can add linear transformations you can scale or multiply them.", "tokens": [50714, 1396, 264, 992, 295, 439, 8213, 34852, 490, 2031, 281, 288, 307, 611, 257, 8062, 1901, 13, 467, 311, 406, 445, 257, 992, 291, 393, 909, 8213, 34852, 291, 393, 4373, 420, 12972, 552, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1837007922510947, "compression_ratio": 1.59375, "no_speech_prob": 0.06556455790996552}, {"id": 199, "seek": 220200, "start": 2202.0, "end": 2218.0, "text": " The HOM set is a set with additional structure it's actually a vector space. So in that case, one says the category of vector spaces is enriched over the category of vector spaces.", "tokens": [50364, 440, 389, 5251, 992, 307, 257, 992, 365, 4497, 3877, 309, 311, 767, 257, 8062, 1901, 13, 407, 294, 300, 1389, 11, 472, 1619, 264, 7719, 295, 8062, 7673, 307, 48624, 670, 264, 7719, 295, 8062, 7673, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15570263862609862, "compression_ratio": 1.72, "no_speech_prob": 0.008060234598815441}, {"id": 200, "seek": 220200, "start": 2218.0, "end": 2224.0, "text": " So whatever your HOM objects are you say your category is enriched over that.", "tokens": [51164, 407, 2035, 428, 389, 5251, 6565, 366, 291, 584, 428, 7719, 307, 48624, 670, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15570263862609862, "compression_ratio": 1.72, "no_speech_prob": 0.008060234598815441}, {"id": 201, "seek": 222400, "start": 2224.0, "end": 2234.0, "text": " I just said that on the upper left hand side. If this HOM set is a vector space you say oh my category is enriched over the category of vector spaces.", "tokens": [50364, 286, 445, 848, 300, 322, 264, 6597, 1411, 1011, 1252, 13, 759, 341, 389, 5251, 992, 307, 257, 8062, 1901, 291, 584, 1954, 452, 7719, 307, 48624, 670, 264, 7719, 295, 8062, 7673, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11163233472155286, "compression_ratio": 1.9691358024691359, "no_speech_prob": 0.010007493197917938}, {"id": 202, "seek": 222400, "start": 2234.0, "end": 2246.0, "text": " If your HOM set is actually a group, you say your category is enriched over the category of groups. If it's a topological space you're enriched over topological spaces.", "tokens": [50864, 759, 428, 389, 5251, 992, 307, 767, 257, 1594, 11, 291, 584, 428, 7719, 307, 48624, 670, 264, 7719, 295, 3935, 13, 759, 309, 311, 257, 1192, 4383, 1901, 291, 434, 48624, 670, 1192, 4383, 7673, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11163233472155286, "compression_ratio": 1.9691358024691359, "no_speech_prob": 0.010007493197917938}, {"id": 203, "seek": 224600, "start": 2246.0, "end": 2257.0, "text": " If it turns out on the lower left, if this turns out to be a truth value like a zero or one, your categories enriched over truth values, those turn out to be exactly pre-orders.", "tokens": [50364, 759, 309, 4523, 484, 322, 264, 3126, 1411, 11, 498, 341, 4523, 484, 281, 312, 257, 3494, 2158, 411, 257, 4018, 420, 472, 11, 428, 10479, 48624, 670, 3494, 4190, 11, 729, 1261, 484, 281, 312, 2293, 659, 12, 10400, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14678993575069882, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.01363340113312006}, {"id": 204, "seek": 224600, "start": 2257.0, "end": 2262.0, "text": " So those things that Pam was talking about earlier, these are actually doing enriched category theory.", "tokens": [50914, 407, 729, 721, 300, 23532, 390, 1417, 466, 3071, 11, 613, 366, 767, 884, 48624, 7719, 5261, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14678993575069882, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.01363340113312006}, {"id": 205, "seek": 224600, "start": 2262.0, "end": 2275.0, "text": " What if your HOM set is just a set, then your category is enriched over a set, and you're just doing ordinary category theory. So ordinary category theories like a special case of enriched category theory.", "tokens": [51164, 708, 498, 428, 389, 5251, 992, 307, 445, 257, 992, 11, 550, 428, 7719, 307, 48624, 670, 257, 992, 11, 293, 291, 434, 445, 884, 10547, 7719, 5261, 13, 407, 10547, 7719, 13667, 411, 257, 2121, 1389, 295, 48624, 7719, 5261, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14678993575069882, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.01363340113312006}, {"id": 206, "seek": 227500, "start": 2275.0, "end": 2280.0, "text": " That's something that we're most interested in for the remaining few minutes.", "tokens": [50364, 663, 311, 746, 300, 321, 434, 881, 3102, 294, 337, 264, 8877, 1326, 2077, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11421184852475026, "compression_ratio": 1.4640883977900552, "no_speech_prob": 0.01361902803182602}, {"id": 207, "seek": 227500, "start": 2280.0, "end": 2292.0, "text": " If this is a conditional probability in a way that I'll explain in a second, then your category is enriched over the unit interval and that's kind of what I want to focus on just quickly.", "tokens": [50614, 759, 341, 307, 257, 27708, 8482, 294, 257, 636, 300, 286, 603, 2903, 294, 257, 1150, 11, 550, 428, 7719, 307, 48624, 670, 264, 4985, 15035, 293, 300, 311, 733, 295, 437, 286, 528, 281, 1879, 322, 445, 2661, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11421184852475026, "compression_ratio": 1.4640883977900552, "no_speech_prob": 0.01361902803182602}, {"id": 208, "seek": 229200, "start": 2292.0, "end": 2308.0, "text": " So what's the unit interval? The unit interval, think of it as a category whose objects are numbers between zero and one, and where there's an arrow from little a to little b if a is less than or equal to b.", "tokens": [50364, 407, 437, 311, 264, 4985, 15035, 30, 440, 4985, 15035, 11, 519, 295, 309, 382, 257, 7719, 6104, 6565, 366, 3547, 1296, 4018, 293, 472, 11, 293, 689, 456, 311, 364, 11610, 490, 707, 257, 281, 707, 272, 498, 257, 307, 1570, 813, 420, 2681, 281, 272, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10755399216053098, "compression_ratio": 1.6802030456852792, "no_speech_prob": 0.15386241674423218}, {"id": 209, "seek": 229200, "start": 2308.0, "end": 2310.0, "text": " So it's a pre-order.", "tokens": [51164, 407, 309, 311, 257, 659, 12, 4687, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10755399216053098, "compression_ratio": 1.6802030456852792, "no_speech_prob": 0.15386241674423218}, {"id": 210, "seek": 229200, "start": 2310.0, "end": 2321.0, "text": " Now, the unit interval viewed as a category have a lot of the same properties as the category of sets.", "tokens": [51264, 823, 11, 264, 4985, 15035, 19174, 382, 257, 7719, 362, 257, 688, 295, 264, 912, 7221, 382, 264, 7719, 295, 6352, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10755399216053098, "compression_ratio": 1.6802030456852792, "no_speech_prob": 0.15386241674423218}, {"id": 211, "seek": 232100, "start": 2321.0, "end": 2332.0, "text": " So what I'm kind of hinting at is that we're now going to want to look at functors into the unit interval, which will be analogous to what we just did by looking at functors into set.", "tokens": [50364, 407, 437, 286, 478, 733, 295, 12075, 278, 412, 307, 300, 321, 434, 586, 516, 281, 528, 281, 574, 412, 1019, 5547, 666, 264, 4985, 15035, 11, 597, 486, 312, 16660, 563, 281, 437, 321, 445, 630, 538, 1237, 412, 1019, 5547, 666, 992, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09364402294158936, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.0023953847121447325}, {"id": 212, "seek": 232100, "start": 2332.0, "end": 2345.0, "text": " So in what ways is the unit interval like the category of sets? So on the slide, I showed you, okay, on the one hand, your objects are sets or numbers.", "tokens": [50914, 407, 294, 437, 2098, 307, 264, 4985, 15035, 411, 264, 7719, 295, 6352, 30, 407, 322, 264, 4137, 11, 286, 4712, 291, 11, 1392, 11, 322, 264, 472, 1011, 11, 428, 6565, 366, 6352, 420, 3547, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09364402294158936, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.0023953847121447325}, {"id": 213, "seek": 234500, "start": 2345.0, "end": 2353.0, "text": " Your morphisms are functions or this pre-order. But what else do these two categories have in common?", "tokens": [50364, 2260, 25778, 13539, 366, 6828, 420, 341, 659, 12, 4687, 13, 583, 437, 1646, 360, 613, 732, 10479, 362, 294, 2689, 30, 50764], "temperature": 0.0, "avg_logprob": -0.10585145105289508, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.010982586070895195}, {"id": 214, "seek": 234500, "start": 2353.0, "end": 2368.0, "text": " Well, they have a manoidal product. In other words, in the category of set, you can take the Cartesian product of two sets, you can multiply sets, and there's a unit for that multiplication, namely the one point set.", "tokens": [50764, 1042, 11, 436, 362, 257, 587, 17079, 304, 1674, 13, 682, 661, 2283, 11, 294, 264, 7719, 295, 992, 11, 291, 393, 747, 264, 22478, 42434, 1674, 295, 732, 6352, 11, 291, 393, 12972, 6352, 11, 293, 456, 311, 257, 4985, 337, 300, 27290, 11, 20926, 264, 472, 935, 992, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10585145105289508, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.010982586070895195}, {"id": 215, "seek": 236800, "start": 2368.0, "end": 2378.0, "text": " So what that means is like, you know, a set x times the one point set is just isomorphic to x. So it's a unit with respect to this multiplication.", "tokens": [50364, 407, 437, 300, 1355, 307, 411, 11, 291, 458, 11, 257, 992, 2031, 1413, 264, 472, 935, 992, 307, 445, 307, 32702, 299, 281, 2031, 13, 407, 309, 311, 257, 4985, 365, 3104, 281, 341, 27290, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06777973082459089, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.026741204783320427}, {"id": 216, "seek": 236800, "start": 2378.0, "end": 2387.0, "text": " Well, the unit interval also has a multiplication, of course, multiplication, and it has a unit with respect to that, namely the number one.", "tokens": [50864, 1042, 11, 264, 4985, 15035, 611, 575, 257, 27290, 11, 295, 1164, 11, 27290, 11, 293, 309, 575, 257, 4985, 365, 3104, 281, 300, 11, 20926, 264, 1230, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06777973082459089, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.026741204783320427}, {"id": 217, "seek": 236800, "start": 2387.0, "end": 2393.0, "text": " So this turns out to be a manoidal product. So both categories are manoidal categories. But wait, there's more.", "tokens": [51314, 407, 341, 4523, 484, 281, 312, 257, 587, 17079, 304, 1674, 13, 407, 1293, 10479, 366, 587, 17079, 304, 10479, 13, 583, 1699, 11, 456, 311, 544, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06777973082459089, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.026741204783320427}, {"id": 218, "seek": 239300, "start": 2394.0, "end": 2402.0, "text": " We mentioned that the category of sets has, you can construct co-limits or limits.", "tokens": [50414, 492, 2835, 300, 264, 7719, 295, 6352, 575, 11, 291, 393, 7690, 598, 12, 4197, 1208, 420, 10406, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11129287538074312, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.032073814421892166}, {"id": 219, "seek": 239300, "start": 2402.0, "end": 2410.0, "text": " Turns out the same thing is true in the unit interval. So when you unwind the definition, what's the limit, what's the co-limit? It turns out just to be minimum.", "tokens": [50814, 29524, 484, 264, 912, 551, 307, 2074, 294, 264, 4985, 15035, 13, 407, 562, 291, 517, 12199, 264, 7123, 11, 437, 311, 264, 4948, 11, 437, 311, 264, 598, 12, 4197, 270, 30, 467, 4523, 484, 445, 281, 312, 7285, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11129287538074312, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.032073814421892166}, {"id": 220, "seek": 239300, "start": 2410.0, "end": 2419.0, "text": " Even if I have a bunch of numbers in the unit interval, I can take their meat or their limit. It turns out just to be the minimum of the numbers in that set.", "tokens": [51214, 2754, 498, 286, 362, 257, 3840, 295, 3547, 294, 264, 4985, 15035, 11, 286, 393, 747, 641, 4615, 420, 641, 4948, 13, 467, 4523, 484, 445, 281, 312, 264, 7285, 295, 264, 3547, 294, 300, 992, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11129287538074312, "compression_ratio": 1.8272727272727274, "no_speech_prob": 0.032073814421892166}, {"id": 221, "seek": 241900, "start": 2419.0, "end": 2423.0, "text": " And then finally, co-limits turn out just to be maximum.", "tokens": [50364, 400, 550, 2721, 11, 598, 12, 4197, 1208, 1261, 484, 445, 281, 312, 6674, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16269530830802498, "compression_ratio": 1.5826086956521739, "no_speech_prob": 0.0029798406176269054}, {"id": 222, "seek": 241900, "start": 2423.0, "end": 2429.0, "text": " So, okay, both categories have all limits and co-limits, and then, you know, there's more.", "tokens": [50564, 407, 11, 1392, 11, 1293, 10479, 362, 439, 10406, 293, 598, 12, 4197, 1208, 11, 293, 550, 11, 291, 458, 11, 456, 311, 544, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16269530830802498, "compression_ratio": 1.5826086956521739, "no_speech_prob": 0.0029798406176269054}, {"id": 223, "seek": 241900, "start": 2429.0, "end": 2441.0, "text": " You have closure. So that kind of means you have this internal harm, or like Petra was saying earlier in this series, you have these exponential objects, which are kind of defined with respect to this multiplication.", "tokens": [50864, 509, 362, 24653, 13, 407, 300, 733, 295, 1355, 291, 362, 341, 6920, 6491, 11, 420, 411, 10472, 424, 390, 1566, 3071, 294, 341, 2638, 11, 291, 362, 613, 21510, 6565, 11, 597, 366, 733, 295, 7642, 365, 3104, 281, 341, 27290, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16269530830802498, "compression_ratio": 1.5826086956521739, "no_speech_prob": 0.0029798406176269054}, {"id": 224, "seek": 244100, "start": 2441.0, "end": 2451.0, "text": " I don't want to touch into that, but I just want to kind of suggest in your mind that the unit interval can now play a similar role that the category of sets did.", "tokens": [50364, 286, 500, 380, 528, 281, 2557, 666, 300, 11, 457, 286, 445, 528, 281, 733, 295, 3402, 294, 428, 1575, 300, 264, 4985, 15035, 393, 586, 862, 257, 2531, 3090, 300, 264, 7719, 295, 6352, 630, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13429661073546478, "compression_ratio": 1.6094674556213018, "no_speech_prob": 0.06555770337581635}, {"id": 225, "seek": 244100, "start": 2451.0, "end": 2454.0, "text": " So how does this play out?", "tokens": [50864, 407, 577, 775, 341, 862, 484, 30, 51014], "temperature": 0.0, "avg_logprob": -0.13429661073546478, "compression_ratio": 1.6094674556213018, "no_speech_prob": 0.06555770337581635}, {"id": 226, "seek": 244100, "start": 2454.0, "end": 2461.0, "text": " Well, it turns out that we can discuss a category enriched over the unit interval.", "tokens": [51014, 1042, 11, 309, 4523, 484, 300, 321, 393, 2248, 257, 7719, 48624, 670, 264, 4985, 15035, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13429661073546478, "compression_ratio": 1.6094674556213018, "no_speech_prob": 0.06555770337581635}, {"id": 227, "seek": 246100, "start": 2461.0, "end": 2472.0, "text": " Well, just like a category enriched over sets is an ordinary category, we have an analogous idea where we switch out sets with the unit interval.", "tokens": [50364, 1042, 11, 445, 411, 257, 7719, 48624, 670, 6352, 307, 364, 10547, 7719, 11, 321, 362, 364, 16660, 563, 1558, 689, 321, 3679, 484, 6352, 365, 264, 4985, 15035, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1095458356345572, "compression_ratio": 1.8994708994708995, "no_speech_prob": 0.05497600510716438}, {"id": 228, "seek": 246100, "start": 2472.0, "end": 2483.0, "text": " So what is a category enriched over the unit interval, also called a zero one category? Well, just like with a normal category, you start with some objects.", "tokens": [50914, 407, 437, 307, 257, 7719, 48624, 670, 264, 4985, 15035, 11, 611, 1219, 257, 4018, 472, 7719, 30, 1042, 11, 445, 411, 365, 257, 2710, 7719, 11, 291, 722, 365, 512, 6565, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1095458356345572, "compression_ratio": 1.8994708994708995, "no_speech_prob": 0.05497600510716438}, {"id": 229, "seek": 246100, "start": 2483.0, "end": 2489.0, "text": " Similarly, a zero one category consists of some objects.", "tokens": [51464, 13157, 11, 257, 4018, 472, 7719, 14689, 295, 512, 6565, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1095458356345572, "compression_ratio": 1.8994708994708995, "no_speech_prob": 0.05497600510716438}, {"id": 230, "seek": 248900, "start": 2489.0, "end": 2502.0, "text": " What else do you have? Well, in category theory, for every pair of objects, X, Y, you ask for a set, hum, X, Y, or C of X, Y.", "tokens": [50364, 708, 1646, 360, 291, 362, 30, 1042, 11, 294, 7719, 5261, 11, 337, 633, 6119, 295, 6565, 11, 1783, 11, 398, 11, 291, 1029, 337, 257, 992, 11, 1484, 11, 1783, 11, 398, 11, 420, 383, 295, 1783, 11, 398, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17847355552341626, "compression_ratio": 1.6424870466321244, "no_speech_prob": 0.003171849763020873}, {"id": 231, "seek": 248900, "start": 2502.0, "end": 2517.0, "text": " Now I'm replacing set with the unit interval. So for every pair of objects on the right hand side, little X, little Y, I asked for a hum object, which is just an element in the unit interval.", "tokens": [51014, 823, 286, 478, 19139, 992, 365, 264, 4985, 15035, 13, 407, 337, 633, 6119, 295, 6565, 322, 264, 558, 1011, 1252, 11, 707, 1783, 11, 707, 398, 11, 286, 2351, 337, 257, 1484, 2657, 11, 597, 307, 445, 364, 4478, 294, 264, 4985, 15035, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17847355552341626, "compression_ratio": 1.6424870466321244, "no_speech_prob": 0.003171849763020873}, {"id": 232, "seek": 251700, "start": 2517.0, "end": 2527.0, "text": " So for every pair of objects, there's a number associated with them. And I think of that as a hum number or hum object.", "tokens": [50364, 407, 337, 633, 6119, 295, 6565, 11, 456, 311, 257, 1230, 6615, 365, 552, 13, 400, 286, 519, 295, 300, 382, 257, 1484, 1230, 420, 1484, 2657, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1438701550165812, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.0013040496269240975}, {"id": 233, "seek": 251700, "start": 2527.0, "end": 2543.0, "text": " Okay, what else is a zero one category consists of? Well, in normal category theory, we ask for composition, aka, if I have a way to get from X to Y, and why did Z, then I can compose them and get, you know, a morphism from X to Z.", "tokens": [50864, 1033, 11, 437, 1646, 307, 257, 4018, 472, 7719, 14689, 295, 30, 1042, 11, 294, 2710, 7719, 5261, 11, 321, 1029, 337, 12686, 11, 28042, 11, 498, 286, 362, 257, 636, 281, 483, 490, 1783, 281, 398, 11, 293, 983, 630, 1176, 11, 550, 286, 393, 35925, 552, 293, 483, 11, 291, 458, 11, 257, 25778, 1434, 490, 1783, 281, 1176, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1438701550165812, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.0013040496269240975}, {"id": 234, "seek": 254300, "start": 2543.0, "end": 2553.0, "text": " So now looked at the Cartesian product on the left hand side, we said that that's analogous to multiplication of numbers. So that's what you see on the right hand side.", "tokens": [50364, 407, 586, 2956, 412, 264, 22478, 42434, 1674, 322, 264, 1411, 1011, 1252, 11, 321, 848, 300, 300, 311, 16660, 563, 281, 27290, 295, 3547, 13, 407, 300, 311, 437, 291, 536, 322, 264, 558, 1011, 1252, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11022805695486541, "compression_ratio": 1.7973568281938326, "no_speech_prob": 0.002980019198730588}, {"id": 235, "seek": 254300, "start": 2553.0, "end": 2571.0, "text": " And just like morphisms are now this preorder, what I asked now for to have a zero one category is that there's a morphism from this hum object Y to Z times the hum object X to Y, that there's a morphism from that product to the hum object", "tokens": [50864, 400, 445, 411, 25778, 13539, 366, 586, 341, 659, 4687, 11, 437, 286, 2351, 586, 337, 281, 362, 257, 4018, 472, 7719, 307, 300, 456, 311, 257, 25778, 1434, 490, 341, 1484, 2657, 398, 281, 1176, 1413, 264, 1484, 2657, 1783, 281, 398, 11, 300, 456, 311, 257, 25778, 1434, 490, 300, 1674, 281, 264, 1484, 2657, 51764], "temperature": 0.0, "avg_logprob": -0.11022805695486541, "compression_ratio": 1.7973568281938326, "no_speech_prob": 0.002980019198730588}, {"id": 236, "seek": 257100, "start": 2571.0, "end": 2576.0, "text": " Oh, that should say X to Z on the right hand side. That's a typo.", "tokens": [50364, 876, 11, 300, 820, 584, 1783, 281, 1176, 322, 264, 558, 1011, 1252, 13, 663, 311, 257, 2125, 78, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12883082913680816, "compression_ratio": 1.48, "no_speech_prob": 0.004466323181986809}, {"id": 237, "seek": 257100, "start": 2576.0, "end": 2593.0, "text": " Okay, and then, you know, there's more, you can also ask for identities and identity morphism on an object X is just really a function from the one point set into the calm set from X to itself.", "tokens": [50614, 1033, 11, 293, 550, 11, 291, 458, 11, 456, 311, 544, 11, 291, 393, 611, 1029, 337, 24239, 293, 6575, 25778, 1434, 322, 364, 2657, 1783, 307, 445, 534, 257, 2445, 490, 264, 472, 935, 992, 666, 264, 7151, 992, 490, 1783, 281, 2564, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12883082913680816, "compression_ratio": 1.48, "no_speech_prob": 0.004466323181986809}, {"id": 238, "seek": 259300, "start": 2593.0, "end": 2608.0, "text": " So a morphism from a one point set into a set just picks out an element in that set. So similarly, if I kind of look at the analog on the right hand side, instead of a one point set I have the number one, which plays the role of unit.", "tokens": [50364, 407, 257, 25778, 1434, 490, 257, 472, 935, 992, 666, 257, 992, 445, 16137, 484, 364, 4478, 294, 300, 992, 13, 407, 14138, 11, 498, 286, 733, 295, 574, 412, 264, 16660, 322, 264, 558, 1011, 1252, 11, 2602, 295, 257, 472, 935, 992, 286, 362, 264, 1230, 472, 11, 597, 5749, 264, 3090, 295, 4985, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10064108394882054, "compression_ratio": 1.7, "no_speech_prob": 0.005909140221774578}, {"id": 239, "seek": 259300, "start": 2608.0, "end": 2612.0, "text": " And instead of an arrow I have this less than or equal to.", "tokens": [51114, 400, 2602, 295, 364, 11610, 286, 362, 341, 1570, 813, 420, 2681, 281, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10064108394882054, "compression_ratio": 1.7, "no_speech_prob": 0.005909140221774578}, {"id": 240, "seek": 259300, "start": 2612.0, "end": 2620.0, "text": " And so this is the data of the zero one category and of course you ask it to satisfy some axioms.", "tokens": [51314, 400, 370, 341, 307, 264, 1412, 295, 264, 4018, 472, 7719, 293, 295, 1164, 291, 1029, 309, 281, 19319, 512, 6360, 72, 4785, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10064108394882054, "compression_ratio": 1.7, "no_speech_prob": 0.005909140221774578}, {"id": 241, "seek": 262000, "start": 2621.0, "end": 2638.0, "text": " You can also make sense once you have the notion of a, of a category enriched over the unit interval, you can discuss functors between two such categories but really it's, it's not a category in the traditional sense it's an enriched category.", "tokens": [50414, 509, 393, 611, 652, 2020, 1564, 291, 362, 264, 10710, 295, 257, 11, 295, 257, 7719, 48624, 670, 264, 4985, 15035, 11, 291, 393, 2248, 1019, 5547, 1296, 732, 1270, 10479, 457, 534, 309, 311, 11, 309, 311, 406, 257, 7719, 294, 264, 5164, 2020, 309, 311, 364, 48624, 7719, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1186434572393244, "compression_ratio": 1.62, "no_speech_prob": 0.0023952703922986984}, {"id": 242, "seek": 263800, "start": 2638.0, "end": 2656.0, "text": " So you can make sense of enriched functors. So I'll just kind of go over this briefly but you can imagine on the right hand side. It's a function from the objects of your first enriched category to the objects of the second, that satisfies some inequality that's very reminiscent", "tokens": [50364, 407, 291, 393, 652, 2020, 295, 48624, 1019, 5547, 13, 407, 286, 603, 445, 733, 295, 352, 670, 341, 10515, 457, 291, 393, 3811, 322, 264, 558, 1011, 1252, 13, 467, 311, 257, 2445, 490, 264, 6565, 295, 428, 700, 48624, 7719, 281, 264, 6565, 295, 264, 1150, 11, 300, 44271, 512, 16970, 300, 311, 588, 44304, 51264], "temperature": 0.0, "avg_logprob": -0.1333222062620398, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.014496194198727608}, {"id": 243, "seek": 263800, "start": 2656.0, "end": 2659.0, "text": " of what you might have an ordinary category theory.", "tokens": [51264, 295, 437, 291, 1062, 362, 364, 10547, 7719, 5261, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1333222062620398, "compression_ratio": 1.6225490196078431, "no_speech_prob": 0.014496194198727608}, {"id": 244, "seek": 265900, "start": 2659.0, "end": 2678.0, "text": " For the sake of time let's let's not think too deeply about this, because the real punchline is that what happens when D, the category you're mapping into is a really nice category like the category of sets previously that gave us co pre sheaves and we saw that had a", "tokens": [50364, 1171, 264, 9717, 295, 565, 718, 311, 718, 311, 406, 519, 886, 8760, 466, 341, 11, 570, 264, 957, 8135, 1889, 307, 300, 437, 2314, 562, 413, 11, 264, 7719, 291, 434, 18350, 666, 307, 257, 534, 1481, 7719, 411, 264, 7719, 295, 6352, 8046, 300, 2729, 505, 598, 659, 750, 5423, 293, 321, 1866, 300, 632, 257, 51314], "temperature": 0.0, "avg_logprob": -0.1796697801159274, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.03306590020656586}, {"id": 245, "seek": 267800, "start": 2678.0, "end": 2698.0, "text": " really nice nature. So in this new kind of iteration, I want to replace set with probabilities, the zero one. And I can look at enriched co pre sheaves into the unit interval. That turns out as you may guess to form its own enriched category and you can talk about enriched natural", "tokens": [50364, 534, 1481, 3687, 13, 407, 294, 341, 777, 733, 295, 24784, 11, 286, 528, 281, 7406, 992, 365, 33783, 11, 264, 4018, 472, 13, 400, 286, 393, 574, 412, 48624, 598, 659, 750, 5423, 666, 264, 4985, 15035, 13, 663, 4523, 484, 382, 291, 815, 2041, 281, 1254, 1080, 1065, 48624, 7719, 293, 291, 393, 751, 466, 48624, 3303, 51364], "temperature": 0.0, "avg_logprob": -0.2177108738520374, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.0814124047756195}, {"id": 246, "seek": 267800, "start": 2698.0, "end": 2701.0, "text": " transformations and make sense of all this.", "tokens": [51364, 34852, 293, 652, 2020, 295, 439, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2177108738520374, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.0814124047756195}, {"id": 247, "seek": 270100, "start": 2701.0, "end": 2713.0, "text": " So let's not, you won't worry about them too much but that's kind of the idea. I just want to repeat the same story that we just did, but now I replaced the category of sets with the unit interval.", "tokens": [50364, 407, 718, 311, 406, 11, 291, 1582, 380, 3292, 466, 552, 886, 709, 457, 300, 311, 733, 295, 264, 1558, 13, 286, 445, 528, 281, 7149, 264, 912, 1657, 300, 321, 445, 630, 11, 457, 586, 286, 10772, 264, 7719, 295, 6352, 365, 264, 4985, 15035, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08689514953311127, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.04081433266401291}, {"id": 248, "seek": 270100, "start": 2713.0, "end": 2726.0, "text": " So, I'll just kind of summarize and give you the punchline here's what happens when you do that. So here's now, you know, semantics 2.0 or syntax 2.0 or language as an enriched category.", "tokens": [50964, 407, 11, 286, 603, 445, 733, 295, 20858, 293, 976, 291, 264, 8135, 1889, 510, 311, 437, 2314, 562, 291, 360, 300, 13, 407, 510, 311, 586, 11, 291, 458, 11, 4361, 45298, 568, 13, 15, 420, 28431, 568, 13, 15, 420, 2856, 382, 364, 48624, 7719, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08689514953311127, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.04081433266401291}, {"id": 249, "seek": 272600, "start": 2726.0, "end": 2740.0, "text": " Like earlier I had a category with an arrow. If one expression is contained in the other. I'm going to now have the exact same thing and do exactly what I said I wish we could do, namely, decorate it with a conditional probability.", "tokens": [50364, 1743, 3071, 286, 632, 257, 7719, 365, 364, 11610, 13, 759, 472, 6114, 307, 16212, 294, 264, 661, 13, 286, 478, 516, 281, 586, 362, 264, 1900, 912, 551, 293, 360, 2293, 437, 286, 848, 286, 3172, 321, 727, 360, 11, 20926, 11, 24229, 309, 365, 257, 27708, 8482, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0836136797641186, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.1641693115234375}, {"id": 250, "seek": 272600, "start": 2740.0, "end": 2755.0, "text": " The punchline is that fits exactly into this framework of enriched category theory. So language is a zero one category. Its objects are strings of symbols from some atomic set of symbols like before.", "tokens": [51064, 440, 8135, 1889, 307, 300, 9001, 2293, 666, 341, 8388, 295, 48624, 7719, 5261, 13, 407, 2856, 307, 257, 4018, 472, 7719, 13, 6953, 6565, 366, 13985, 295, 16944, 490, 512, 22275, 992, 295, 16944, 411, 949, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0836136797641186, "compression_ratio": 1.6264150943396227, "no_speech_prob": 0.1641693115234375}, {"id": 251, "seek": 275500, "start": 2755.0, "end": 2771.0, "text": " The ham objects, the ham object between an expression X and Y will say it's the conditional probability that why this larger string is an extension of X or contains X.", "tokens": [50364, 440, 7852, 6565, 11, 264, 7852, 2657, 1296, 364, 6114, 1783, 293, 398, 486, 584, 309, 311, 264, 27708, 8482, 300, 983, 341, 4833, 6798, 307, 364, 10320, 295, 1783, 420, 8306, 1783, 13, 51164], "temperature": 0.0, "avg_logprob": -0.23867685144597833, "compression_ratio": 1.5033112582781456, "no_speech_prob": 0.027553169056773186}, {"id": 252, "seek": 275500, "start": 2771.0, "end": 2775.0, "text": " You know if X is it contained in it or it's zero otherwise.", "tokens": [51164, 509, 458, 498, 1783, 307, 309, 16212, 294, 309, 420, 309, 311, 4018, 5911, 13, 51364], "temperature": 0.0, "avg_logprob": -0.23867685144597833, "compression_ratio": 1.5033112582781456, "no_speech_prob": 0.027553169056773186}, {"id": 253, "seek": 277500, "start": 2775.0, "end": 2789.0, "text": " So you can check this actually defines an enriched category over zero one, you know, this sort of reflexivity or identity. Yeah, what's the probability that blue is contained in blue is one.", "tokens": [50364, 407, 291, 393, 1520, 341, 767, 23122, 364, 48624, 7719, 670, 4018, 472, 11, 291, 458, 11, 341, 1333, 295, 23802, 4253, 420, 6575, 13, 865, 11, 437, 311, 264, 8482, 300, 3344, 307, 16212, 294, 3344, 307, 472, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09427064657211304, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.01939975656569004}, {"id": 254, "seek": 277500, "start": 2789.0, "end": 2796.0, "text": " And then when you write down what this means it turns out that conditional probabilities multiply in exactly what you need to get this composition.", "tokens": [51064, 400, 550, 562, 291, 2464, 760, 437, 341, 1355, 309, 4523, 484, 300, 27708, 33783, 12972, 294, 2293, 437, 291, 643, 281, 483, 341, 12686, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09427064657211304, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.01939975656569004}, {"id": 255, "seek": 277500, "start": 2796.0, "end": 2804.0, "text": " So all I'm saying here is that if you want to decorate these arrows with these conditional probabilities of continuation.", "tokens": [51414, 407, 439, 286, 478, 1566, 510, 307, 300, 498, 291, 528, 281, 24229, 613, 19669, 365, 613, 27708, 33783, 295, 29357, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09427064657211304, "compression_ratio": 1.7228464419475655, "no_speech_prob": 0.01939975656569004}, {"id": 256, "seek": 280400, "start": 2804.0, "end": 2812.0, "text": " It's like your dreams are fulfilled. Oh, wow, enriched category theory says that this is, you know, something you can actually do formally.", "tokens": [50364, 467, 311, 411, 428, 7505, 366, 21380, 13, 876, 11, 6076, 11, 48624, 7719, 5261, 1619, 300, 341, 307, 11, 291, 458, 11, 746, 291, 393, 767, 360, 25983, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1456037425994873, "compression_ratio": 1.6771653543307086, "no_speech_prob": 0.01241795439273119}, {"id": 257, "seek": 280400, "start": 2812.0, "end": 2824.0, "text": " As you may guess this is nice but it's limited as before. I can't combine anything, you know, there's no notion of concepts or combining things and having some kind of logical reasoning in it.", "tokens": [50764, 1018, 291, 815, 2041, 341, 307, 1481, 457, 309, 311, 5567, 382, 949, 13, 286, 393, 380, 10432, 1340, 11, 291, 458, 11, 456, 311, 572, 10710, 295, 10392, 420, 21928, 721, 293, 1419, 512, 733, 295, 14978, 21577, 294, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1456037425994873, "compression_ratio": 1.6771653543307086, "no_speech_prob": 0.01241795439273119}, {"id": 258, "seek": 280400, "start": 2824.0, "end": 2833.0, "text": " So again, you want to then pass from from that category to zero one filters on that category.", "tokens": [51364, 407, 797, 11, 291, 528, 281, 550, 1320, 490, 490, 300, 7719, 281, 4018, 472, 15995, 322, 300, 7719, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1456037425994873, "compression_ratio": 1.6771653543307086, "no_speech_prob": 0.01241795439273119}, {"id": 259, "seek": 283300, "start": 2833.0, "end": 2849.0, "text": " And so when you do this, you will find that representable functors like before are sort of have the right support. So as an example on this slide, you can look at the enriched representable functor of the word blue.", "tokens": [50364, 400, 370, 562, 291, 360, 341, 11, 291, 486, 915, 300, 2906, 712, 1019, 5547, 411, 949, 366, 1333, 295, 362, 264, 558, 1406, 13, 407, 382, 364, 1365, 322, 341, 4137, 11, 291, 393, 574, 412, 264, 48624, 2906, 712, 1019, 1672, 295, 264, 1349, 3344, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11122410113994892, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.004195832647383213}, {"id": 260, "seek": 284900, "start": 2849.0, "end": 2858.0, "text": " And I like to think of it as like this vector where they're which again is indexed by expressions in the language where there is a zero.", "tokens": [50364, 400, 286, 411, 281, 519, 295, 309, 382, 411, 341, 8062, 689, 436, 434, 597, 797, 307, 8186, 292, 538, 15277, 294, 264, 2856, 689, 456, 307, 257, 4018, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12494030231382788, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.035114917904138565}, {"id": 261, "seek": 284900, "start": 2858.0, "end": 2873.0, "text": " If that expression does not contain the word, the chosen word like blue, or it has this conditional probability, you know the conditional probability of seeing small blue marble given that you've seen blue maybe that's like point to two.", "tokens": [50814, 759, 300, 6114, 775, 406, 5304, 264, 1349, 11, 264, 8614, 1349, 411, 3344, 11, 420, 309, 575, 341, 27708, 8482, 11, 291, 458, 264, 27708, 8482, 295, 2577, 1359, 3344, 26844, 2212, 300, 291, 600, 1612, 3344, 1310, 300, 311, 411, 935, 281, 732, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12494030231382788, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.035114917904138565}, {"id": 262, "seek": 287300, "start": 2873.0, "end": 2878.0, "text": " So it has the same support as before but now it has this distributional information.", "tokens": [50364, 407, 309, 575, 264, 912, 1406, 382, 949, 457, 586, 309, 575, 341, 7316, 304, 1589, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10864481244768415, "compression_ratio": 1.6262626262626263, "no_speech_prob": 0.0052179498597979546}, {"id": 263, "seek": 287300, "start": 2878.0, "end": 2894.0, "text": " And you can keep on going, you know you can combine these things. So it turns out that an enriched category theory, the appropriate notion of co products products, or more generally limits and co limits they're called weighted co limits.", "tokens": [50614, 400, 291, 393, 1066, 322, 516, 11, 291, 458, 291, 393, 10432, 613, 721, 13, 407, 309, 4523, 484, 300, 364, 48624, 7719, 5261, 11, 264, 6854, 10710, 295, 598, 3383, 3383, 11, 420, 544, 5101, 10406, 293, 598, 10406, 436, 434, 1219, 32807, 598, 10406, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10864481244768415, "compression_ratio": 1.6262626262626263, "no_speech_prob": 0.0052179498597979546}, {"id": 264, "seek": 289400, "start": 2894.0, "end": 2909.0, "text": " So that definition gets a little bit technical. But when you take, when you unwind that definition, you can sort of ask, hey, what's this enriched notion of red or blue, the sort of concept, if I take the co product of these two co pre sheaves.", "tokens": [50364, 407, 300, 7123, 2170, 257, 707, 857, 6191, 13, 583, 562, 291, 747, 11, 562, 291, 517, 12199, 300, 7123, 11, 291, 393, 1333, 295, 1029, 11, 4177, 11, 437, 311, 341, 48624, 10710, 295, 2182, 420, 3344, 11, 264, 1333, 295, 3410, 11, 498, 286, 747, 264, 598, 1674, 295, 613, 732, 598, 659, 750, 5423, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13288726387443123, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.020007390528917313}, {"id": 265, "seek": 289400, "start": 2909.0, "end": 2918.0, "text": " And if you choose the, these weights in the right way you basically get like that the point wise maximum of the two values individually.", "tokens": [51114, 400, 498, 291, 2826, 264, 11, 613, 17443, 294, 264, 558, 636, 291, 1936, 483, 411, 300, 264, 935, 10829, 6674, 295, 264, 732, 4190, 16652, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13288726387443123, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.020007390528917313}, {"id": 266, "seek": 291800, "start": 2918.0, "end": 2926.0, "text": " So I think that's interesting and you can kind of try to think about what that what does that mean, like if you were to interpret that.", "tokens": [50364, 407, 286, 519, 300, 311, 1880, 293, 291, 393, 733, 295, 853, 281, 519, 466, 437, 300, 437, 775, 300, 914, 11, 411, 498, 291, 645, 281, 7302, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09857351439339775, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.02593989297747612}, {"id": 267, "seek": 291800, "start": 2926.0, "end": 2933.0, "text": " I'll let you partner that and since I'm running short on time. Let me just say there's a lot more that you can do here.", "tokens": [50764, 286, 603, 718, 291, 4975, 300, 293, 1670, 286, 478, 2614, 2099, 322, 565, 13, 961, 385, 445, 584, 456, 311, 257, 688, 544, 300, 291, 393, 360, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09857351439339775, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.02593989297747612}, {"id": 268, "seek": 291800, "start": 2933.0, "end": 2946.0, "text": " So you may have already thought about the fact that you know you can get from the unit interval into the non negative extended reels using negative log, you know there's there's an isomorphism actually between them.", "tokens": [51114, 407, 291, 815, 362, 1217, 1194, 466, 264, 1186, 300, 291, 458, 291, 393, 483, 490, 264, 4985, 15035, 666, 264, 2107, 3671, 10913, 319, 1625, 1228, 3671, 3565, 11, 291, 458, 456, 311, 456, 311, 364, 307, 32702, 1434, 767, 1296, 552, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09857351439339775, "compression_ratio": 1.8045977011494252, "no_speech_prob": 0.02593989297747612}, {"id": 269, "seek": 294600, "start": 2946.0, "end": 2963.0, "text": " And what that means is that your category which was enriched over the unit interval can now be enriched over non negative extended reels.", "tokens": [50364, 400, 437, 300, 1355, 307, 300, 428, 7719, 597, 390, 48624, 670, 264, 4985, 15035, 393, 586, 312, 48624, 670, 2107, 3671, 10913, 319, 1625, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1777758818406325, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.025934742763638496}, {"id": 270, "seek": 294600, "start": 2963.0, "end": 2973.0, "text": " And that has a name and category theory. So a category enriched over that that's a pre order so it's a category. Those are called generalized metric spaces.", "tokens": [51214, 400, 300, 575, 257, 1315, 293, 7719, 5261, 13, 407, 257, 7719, 48624, 670, 300, 300, 311, 257, 659, 1668, 370, 309, 311, 257, 7719, 13, 3950, 366, 1219, 44498, 20678, 7673, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1777758818406325, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.025934742763638496}, {"id": 271, "seek": 297300, "start": 2973.0, "end": 2991.0, "text": " And that is that you can now think about the distances between these sort of concepts or distances between these representable and rich founders. And so what happens is that in this generalized metric space, you know, expressions that are likely", "tokens": [50364, 400, 300, 307, 300, 291, 393, 586, 519, 466, 264, 22182, 1296, 613, 1333, 295, 10392, 420, 22182, 1296, 613, 2906, 712, 293, 4593, 25608, 13, 400, 370, 437, 2314, 307, 300, 294, 341, 44498, 20678, 1901, 11, 291, 458, 11, 15277, 300, 366, 3700, 51264], "temperature": 0.0, "avg_logprob": -0.1337904540859923, "compression_ratio": 1.6013071895424837, "no_speech_prob": 0.008571090176701546}, {"id": 272, "seek": 299100, "start": 2991.0, "end": 3002.0, "text": " are close together, like blue goes to blue marble so they're kind of close in this generalized metric. But then those which are not likely extensions are kind of infinitely far away.", "tokens": [50364, 366, 1998, 1214, 11, 411, 3344, 1709, 281, 3344, 26844, 370, 436, 434, 733, 295, 1998, 294, 341, 44498, 20678, 13, 583, 550, 729, 597, 366, 406, 3700, 25129, 366, 733, 295, 36227, 1400, 1314, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09312692622548525, "compression_ratio": 1.6600790513833992, "no_speech_prob": 0.08748055249452591}, {"id": 273, "seek": 299100, "start": 3002.0, "end": 3019.0, "text": " So maybe, you know, a sweet blue scent is not a thing that people say, or it has a low probability, because colors don't smell, or have smells. And so that kind of pairs well with your intuition that like hey that should be way far away.", "tokens": [50914, 407, 1310, 11, 291, 458, 11, 257, 3844, 3344, 19040, 307, 406, 257, 551, 300, 561, 584, 11, 420, 309, 575, 257, 2295, 8482, 11, 570, 4577, 500, 380, 4316, 11, 420, 362, 10036, 13, 400, 370, 300, 733, 295, 15494, 731, 365, 428, 24002, 300, 411, 4177, 300, 820, 312, 636, 1400, 1314, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09312692622548525, "compression_ratio": 1.6600790513833992, "no_speech_prob": 0.08748055249452591}, {"id": 274, "seek": 301900, "start": 3019.0, "end": 3028.0, "text": " You can think about distances now, you have these, you know, abilities to can to combine concepts we just looked at co products but there's so much more that you can do.", "tokens": [50364, 509, 393, 519, 466, 22182, 586, 11, 291, 362, 613, 11, 291, 458, 11, 11582, 281, 393, 281, 10432, 10392, 321, 445, 2956, 412, 598, 3383, 457, 456, 311, 370, 709, 544, 300, 291, 393, 360, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2059638558364496, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.01132272556424141}, {"id": 275, "seek": 301900, "start": 3028.0, "end": 3039.0, "text": " It turns out that this has nice connections to even tropical geometry. And so you on a spliceopolis might one of our co authors has really nice ideas about that, and lots more.", "tokens": [50814, 467, 4523, 484, 300, 341, 575, 1481, 9271, 281, 754, 22857, 18426, 13, 400, 370, 291, 322, 257, 4732, 573, 404, 16466, 1062, 472, 295, 527, 598, 16552, 575, 534, 1481, 3487, 466, 300, 11, 293, 3195, 544, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2059638558364496, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.01132272556424141}, {"id": 276, "seek": 303900, "start": 3039.0, "end": 3044.0, "text": " So all that to say, kind of wrapping up.", "tokens": [50364, 407, 439, 300, 281, 584, 11, 733, 295, 21993, 493, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09284586837326271, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.07359737157821655}, {"id": 277, "seek": 303900, "start": 3044.0, "end": 3061.0, "text": " There's a lot that you can do by repeating this theme of starting with something that doesn't seem to have a lot of structure, like on the left hand side, and then looking at maps or functors into another category that has a lot of structure.", "tokens": [50614, 821, 311, 257, 688, 300, 291, 393, 360, 538, 18617, 341, 6314, 295, 2891, 365, 746, 300, 1177, 380, 1643, 281, 362, 257, 688, 295, 3877, 11, 411, 322, 264, 1411, 1011, 1252, 11, 293, 550, 1237, 412, 11317, 420, 1019, 5547, 666, 1071, 7719, 300, 575, 257, 688, 295, 3877, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09284586837326271, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.07359737157821655}, {"id": 278, "seek": 306100, "start": 3061.0, "end": 3070.0, "text": " And there you you have the ability to form concepts to talk about distances to think about tropical geometry, which you cannot do on the left hand side.", "tokens": [50364, 400, 456, 291, 291, 362, 264, 3485, 281, 1254, 10392, 281, 751, 466, 22182, 281, 519, 466, 22857, 18426, 11, 597, 291, 2644, 360, 322, 264, 1411, 1011, 1252, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0974914586102521, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.02798025868833065}, {"id": 279, "seek": 306100, "start": 3070.0, "end": 3073.0, "text": " So this all has an enriched story.", "tokens": [50814, 407, 341, 439, 575, 364, 48624, 1657, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0974914586102521, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.02798025868833065}, {"id": 280, "seek": 306100, "start": 3073.0, "end": 3079.0, "text": " And maybe I will just kind of leave you with this teaser.", "tokens": [50964, 400, 1310, 286, 486, 445, 733, 295, 1856, 291, 365, 341, 35326, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0974914586102521, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.02798025868833065}, {"id": 281, "seek": 306100, "start": 3079.0, "end": 3086.0, "text": " Everything I've described today, kind of rested on this analogy right between linear algebra and category theory.", "tokens": [51264, 5471, 286, 600, 7619, 965, 11, 733, 295, 43090, 322, 341, 21663, 558, 1296, 8213, 21989, 293, 7719, 5261, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0974914586102521, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.02798025868833065}, {"id": 282, "seek": 308600, "start": 3086.0, "end": 3097.0, "text": " So we said that this co appreciate categories like a vector space. I hinted that these representable functors are like one hot encodings.", "tokens": [50364, 407, 321, 848, 300, 341, 598, 4449, 10479, 411, 257, 8062, 1901, 13, 286, 12075, 292, 300, 613, 2906, 712, 1019, 5547, 366, 411, 472, 2368, 2058, 378, 1109, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16186531578622212, "compression_ratio": 1.764102564102564, "no_speech_prob": 0.02032238245010376}, {"id": 283, "seek": 308600, "start": 3097.0, "end": 3111.0, "text": " And I told you I tell you why I think about that to think about it that way. So, just like every vector is a linear combination of these one hot encodings right you take your combination there like a basis.", "tokens": [50914, 400, 286, 1907, 291, 286, 980, 291, 983, 286, 519, 466, 300, 281, 519, 466, 309, 300, 636, 13, 407, 11, 445, 411, 633, 8062, 307, 257, 8213, 6562, 295, 613, 472, 2368, 2058, 378, 1109, 558, 291, 747, 428, 6562, 456, 411, 257, 5143, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16186531578622212, "compression_ratio": 1.764102564102564, "no_speech_prob": 0.02032238245010376}, {"id": 284, "seek": 311100, "start": 3111.0, "end": 3115.0, "text": " So it turns out in category theory there's a theorem.", "tokens": [50364, 407, 309, 4523, 484, 294, 7719, 5261, 456, 311, 257, 20904, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13743592302004495, "compression_ratio": 1.5625, "no_speech_prob": 0.0046083759516477585}, {"id": 285, "seek": 311100, "start": 3115.0, "end": 3123.0, "text": " If you were to look so Emily real has a beautiful book on category theory, category theory in context, I think she calls this the density theorem.", "tokens": [50564, 759, 291, 645, 281, 574, 370, 15034, 957, 575, 257, 2238, 1446, 322, 7719, 5261, 11, 7719, 5261, 294, 4319, 11, 286, 519, 750, 5498, 341, 264, 10305, 20904, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13743592302004495, "compression_ratio": 1.5625, "no_speech_prob": 0.0046083759516477585}, {"id": 286, "seek": 312300, "start": 3123.0, "end": 3139.0, "text": " And it turns out that every co pre chief is a co limit of these representable functors. So just like every vector is built up from basis vectors, every functor from your category in this set is built up from these home functors.", "tokens": [50364, 400, 309, 4523, 484, 300, 633, 598, 659, 9588, 307, 257, 598, 4948, 295, 613, 2906, 712, 1019, 5547, 13, 407, 445, 411, 633, 8062, 307, 3094, 493, 490, 5143, 18875, 11, 633, 1019, 1672, 490, 428, 7719, 294, 341, 992, 307, 3094, 493, 490, 613, 1280, 1019, 5547, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16125405051491476, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.024414876475930214}, {"id": 287, "seek": 312300, "start": 3139.0, "end": 3142.0, "text": " Okay, so they're kind of like a basis in that sense.", "tokens": [51164, 1033, 11, 370, 436, 434, 733, 295, 411, 257, 5143, 294, 300, 2020, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16125405051491476, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.024414876475930214}, {"id": 288, "seek": 312300, "start": 3142.0, "end": 3151.0, "text": " And then the analogy goes on and I will just end here because I think this is really fascinating. And I don't think it's more than an analogy which is kind of puzzling.", "tokens": [51314, 400, 550, 264, 21663, 1709, 322, 293, 286, 486, 445, 917, 510, 570, 286, 519, 341, 307, 534, 10343, 13, 400, 286, 500, 380, 519, 309, 311, 544, 813, 364, 21663, 597, 307, 733, 295, 18741, 1688, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16125405051491476, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.024414876475930214}, {"id": 289, "seek": 315100, "start": 3151.0, "end": 3169.0, "text": " In linear algebra you have matrices in category theory you have pro functors. And it's basically, you know, if you write it down it's like the same thing as a matrix for every pair of objects and two categories you get a set a matrix for every two elements and a pair of, you know, a product of", "tokens": [50364, 682, 8213, 21989, 291, 362, 32284, 294, 7719, 5261, 291, 362, 447, 1019, 5547, 13, 400, 309, 311, 1936, 11, 291, 458, 11, 498, 291, 2464, 309, 760, 309, 311, 411, 264, 912, 551, 382, 257, 8141, 337, 633, 6119, 295, 6565, 293, 732, 10479, 291, 483, 257, 992, 257, 8141, 337, 633, 732, 4959, 293, 257, 6119, 295, 11, 291, 458, 11, 257, 1674, 295, 51264], "temperature": 0.0, "avg_logprob": -0.18053456715175084, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.0040686363354325294}, {"id": 290, "seek": 316900, "start": 3170.0, "end": 3185.0, "text": " matrixes can be multiplied and you know the formula for that. So in category theory pro functors can be composed, and the formula for that which is a kind of co limit looks a lot like matrix multiplication.", "tokens": [50414, 8141, 279, 393, 312, 17207, 293, 291, 458, 264, 8513, 337, 300, 13, 407, 294, 7719, 5261, 447, 1019, 5547, 393, 312, 18204, 11, 293, 264, 8513, 337, 300, 597, 307, 257, 733, 295, 598, 4948, 1542, 257, 688, 411, 8141, 27290, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1690201759338379, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.0875067263841629}, {"id": 291, "seek": 318500, "start": 3186.0, "end": 3206.0, "text": " Interesting. Well, you know, in linear algebra, every matrix you can compute its SBD and get singular vectors, it turns out in category theory, every pro functor has something like singular vectors which is called the nuclear pro functor and in fact the way that you construct it is like line by line", "tokens": [50414, 14711, 13, 1042, 11, 291, 458, 11, 294, 8213, 21989, 11, 633, 8141, 291, 393, 14722, 1080, 26944, 35, 293, 483, 20010, 18875, 11, 309, 4523, 484, 294, 7719, 5261, 11, 633, 447, 1019, 1672, 575, 746, 411, 20010, 18875, 597, 307, 1219, 264, 8179, 447, 1019, 1672, 293, 294, 1186, 264, 636, 300, 291, 7690, 309, 307, 411, 1622, 538, 1622, 51414], "temperature": 0.0, "avg_logprob": -0.21839474186752783, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.06273837387561798}, {"id": 292, "seek": 320600, "start": 3206.0, "end": 3214.0, "text": " is analogous to how you compute the SBD. I think what's really interesting is that as far as I know this is just an analogy.", "tokens": [50364, 307, 16660, 563, 281, 577, 291, 14722, 264, 26944, 35, 13, 286, 519, 437, 311, 534, 1880, 307, 300, 382, 1400, 382, 286, 458, 341, 307, 445, 364, 21663, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16363349225785997, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.2416742891073227}, {"id": 293, "seek": 320600, "start": 3214.0, "end": 3224.0, "text": " And not like linear algebra is not a special case of category theory in this sense, but it's really curious that you can do things in linear algebra that we know and love.", "tokens": [50764, 400, 406, 411, 8213, 21989, 307, 406, 257, 2121, 1389, 295, 7719, 5261, 294, 341, 2020, 11, 457, 309, 311, 534, 6369, 300, 291, 393, 360, 721, 294, 8213, 21989, 300, 321, 458, 293, 959, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16363349225785997, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.2416742891073227}, {"id": 294, "seek": 322400, "start": 3225.0, "end": 3250.0, "text": " So why do I say that because I think that that analogy sort of is encouraging that category theory can be a very natural and beneficial environment in which to kind of understand maybe what's going on with large language models, when all they have to work on our, you know,", "tokens": [50414, 407, 983, 360, 286, 584, 300, 570, 286, 519, 300, 300, 21663, 1333, 295, 307, 14580, 300, 7719, 5261, 393, 312, 257, 588, 3303, 293, 14072, 2823, 294, 597, 281, 733, 295, 1223, 1310, 437, 311, 516, 322, 365, 2416, 2856, 5245, 11, 562, 439, 436, 362, 281, 589, 322, 527, 11, 291, 458, 11, 51664], "temperature": 0.0, "avg_logprob": -0.21246525392693988, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.15592800080776215}, {"id": 295, "seek": 325000, "start": 3251.0, "end": 3258.0, "text": " distribution on text or probability distributions on text. And as we've seen, you can get quite far, at least from a mathematical perspective.", "tokens": [50414, 7316, 322, 2487, 420, 8482, 37870, 322, 2487, 13, 400, 382, 321, 600, 1612, 11, 291, 393, 483, 1596, 1400, 11, 412, 1935, 490, 257, 18894, 4585, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15712631627133017, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.005457176826894283}, {"id": 296, "seek": 325000, "start": 3258.0, "end": 3269.0, "text": " So, thank you for your attention. And if you're interested in learning more than the paper is available online. So thanks everyone.", "tokens": [50764, 407, 11, 1309, 291, 337, 428, 3202, 13, 400, 498, 291, 434, 3102, 294, 2539, 544, 813, 264, 3035, 307, 2435, 2950, 13, 407, 3231, 1518, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15712631627133017, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.005457176826894283}, {"id": 297, "seek": 325000, "start": 3269.0, "end": 3279.0, "text": " Thank you so much, Tai. This was a wonderful talk that I think I'm going to have to keep digesting. I absolutely love the analogies.", "tokens": [51314, 1044, 291, 370, 709, 11, 9623, 13, 639, 390, 257, 3715, 751, 300, 286, 519, 286, 478, 516, 281, 362, 281, 1066, 2528, 8714, 13, 286, 3122, 959, 264, 16660, 530, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15712631627133017, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.005457176826894283}, {"id": 298, "seek": 327900, "start": 3279.0, "end": 3294.0, "text": " I'm just going to open up the questions right now. So if you have a question, feel free to post it in the Q&A, and we can read them out. Alternatively, you can also raise your hand and we can just unmute you.", "tokens": [50364, 286, 478, 445, 516, 281, 1269, 493, 264, 1651, 558, 586, 13, 407, 498, 291, 362, 257, 1168, 11, 841, 1737, 281, 2183, 309, 294, 264, 1249, 5, 32, 11, 293, 321, 393, 1401, 552, 484, 13, 46167, 11, 291, 393, 611, 5300, 428, 1011, 293, 321, 393, 445, 41445, 291, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1521572440561622, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.04313762113451958}, {"id": 299, "seek": 327900, "start": 3294.0, "end": 3305.0, "text": " So while we collect the questions, it sounds like Petar has a question and I don't know if I should read Petar's question or Petardy, maybe you want to say it yourself.", "tokens": [51114, 407, 1339, 321, 2500, 264, 1651, 11, 309, 3263, 411, 10472, 289, 575, 257, 1168, 293, 286, 500, 380, 458, 498, 286, 820, 1401, 10472, 289, 311, 1168, 420, 10472, 515, 88, 11, 1310, 291, 528, 281, 584, 309, 1803, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1521572440561622, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.04313762113451958}, {"id": 300, "seek": 330500, "start": 3305.0, "end": 3322.0, "text": " Yeah, I'm happy to post it myself. First of all, thanks so much for such a wonderful talk. I really enjoyed all of the connections and it really brought, I guess, a brand new set of goggles with which I can view all these large language models in a bit cleaner way.", "tokens": [50364, 865, 11, 286, 478, 2055, 281, 2183, 309, 2059, 13, 2386, 295, 439, 11, 3231, 370, 709, 337, 1270, 257, 3715, 751, 13, 286, 534, 4626, 439, 295, 264, 9271, 293, 309, 534, 3038, 11, 286, 2041, 11, 257, 3360, 777, 992, 295, 39808, 365, 597, 286, 393, 1910, 439, 613, 2416, 2856, 5245, 294, 257, 857, 16532, 636, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09559375792741776, "compression_ratio": 1.440217391304348, "no_speech_prob": 0.010632043704390526}, {"id": 301, "seek": 332200, "start": 3322.0, "end": 3337.0, "text": " I had a question which it might be maybe trivially contained in what you already described, but, you know, while I think this theory is a nice way of explaining, you know, which word follows the next word and the similarity of sentences and stuff like that, which is what language models do in principle.", "tokens": [50364, 286, 632, 257, 1168, 597, 309, 1062, 312, 1310, 1376, 85, 2270, 16212, 294, 437, 291, 1217, 7619, 11, 457, 11, 291, 458, 11, 1339, 286, 519, 341, 5261, 307, 257, 1481, 636, 295, 13468, 11, 291, 458, 11, 597, 1349, 10002, 264, 958, 1349, 293, 264, 32194, 295, 16579, 293, 1507, 411, 300, 11, 597, 307, 437, 2856, 5245, 360, 294, 8665, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12059228560503792, "compression_ratio": 1.5751295336787565, "no_speech_prob": 0.23021134734153748}, {"id": 302, "seek": 333700, "start": 3337.0, "end": 3352.0, "text": " It also seems like today you get a large difference between success and failure with these language models, depending on how much you hack the prompts. Like, there was this one paper that said you can just add let's think step by step and it suddenly improves your reasoning capabilities by a whole lot.", "tokens": [50364, 467, 611, 2544, 411, 965, 291, 483, 257, 2416, 2649, 1296, 2245, 293, 7763, 365, 613, 2856, 5245, 11, 5413, 322, 577, 709, 291, 10339, 264, 41095, 13, 1743, 11, 456, 390, 341, 472, 3035, 300, 848, 291, 393, 445, 909, 718, 311, 519, 1823, 538, 1823, 293, 309, 5800, 24771, 428, 21577, 10862, 538, 257, 1379, 688, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06756352028756771, "compression_ratio": 1.6735395189003437, "no_speech_prob": 0.1727985441684723}, {"id": 303, "seek": 333700, "start": 3352.0, "end": 3361.0, "text": " I'm curious if you think your theory has an answer to why this happens or could have an answer for why this happens in the future. Yeah, I'm just really curious about that. Thank you.", "tokens": [51114, 286, 478, 6369, 498, 291, 519, 428, 5261, 575, 364, 1867, 281, 983, 341, 2314, 420, 727, 362, 364, 1867, 337, 983, 341, 2314, 294, 264, 2027, 13, 865, 11, 286, 478, 445, 534, 6369, 466, 300, 13, 1044, 291, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06756352028756771, "compression_ratio": 1.6735395189003437, "no_speech_prob": 0.1727985441684723}, {"id": 304, "seek": 336100, "start": 3361.0, "end": 3366.0, "text": " Yeah, that's such a great question. So I don't know yet.", "tokens": [50364, 865, 11, 300, 311, 1270, 257, 869, 1168, 13, 407, 286, 500, 380, 458, 1939, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0976766858782087, "compression_ratio": 1.4779874213836477, "no_speech_prob": 0.3265390694141388}, {"id": 305, "seek": 336100, "start": 3366.0, "end": 3380.0, "text": " I don't know. But I think, I think it would take more investigating I think the kind of punchline that I wanted to convey is that maybe this could be a good direction to look in.", "tokens": [50614, 286, 500, 380, 458, 13, 583, 286, 519, 11, 286, 519, 309, 576, 747, 544, 22858, 286, 519, 264, 733, 295, 8135, 1889, 300, 286, 1415, 281, 16965, 307, 300, 1310, 341, 727, 312, 257, 665, 3513, 281, 574, 294, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0976766858782087, "compression_ratio": 1.4779874213836477, "no_speech_prob": 0.3265390694141388}, {"id": 306, "seek": 338000, "start": 3381.0, "end": 3397.0, "text": " If you can kind of have a mathematical framework where you can start to see how concepts combine, where you can start to see something like logical structure emerging, then, and if you kind of explore that a little bit more, then maybe you can start to", "tokens": [50414, 759, 291, 393, 733, 295, 362, 257, 18894, 8388, 689, 291, 393, 722, 281, 536, 577, 10392, 10432, 11, 689, 291, 393, 722, 281, 536, 746, 411, 14978, 3877, 14989, 11, 550, 11, 293, 498, 291, 733, 295, 6839, 300, 257, 707, 857, 544, 11, 550, 1310, 291, 393, 722, 281, 51214], "temperature": 0.0, "avg_logprob": -0.14347374655983663, "compression_ratio": 1.691275167785235, "no_speech_prob": 0.46433570981025696}, {"id": 307, "seek": 339700, "start": 3397.0, "end": 3412.0, "text": " pin down some tools that will then allow you to ask these kind of like interpretability questions are like, why is it that if I say, hey, can, you know, GBT and step by step, can you. Okay, but maybe now that there are tools that can allow you to do that and maybe it has to do something with", "tokens": [50364, 5447, 760, 512, 3873, 300, 486, 550, 2089, 291, 281, 1029, 613, 733, 295, 411, 7302, 2310, 1651, 366, 411, 11, 983, 307, 309, 300, 498, 286, 584, 11, 4177, 11, 393, 11, 291, 458, 11, 26809, 51, 293, 1823, 538, 1823, 11, 393, 291, 13, 1033, 11, 457, 1310, 586, 300, 456, 366, 3873, 300, 393, 2089, 291, 281, 360, 300, 293, 1310, 309, 575, 281, 360, 746, 365, 51114], "temperature": 0.0, "avg_logprob": -0.1524926134057947, "compression_ratio": 1.5783783783783785, "no_speech_prob": 0.1966135948896408}, {"id": 308, "seek": 341200, "start": 3412.0, "end": 3427.0, "text": " the sort of structure, you know, one thing that I didn't say, but this co pre chief category set. See, that's an example of a topos, and a topos is known in mathematics as a good place to do logic.", "tokens": [50364, 264, 1333, 295, 3877, 11, 291, 458, 11, 472, 551, 300, 286, 994, 380, 584, 11, 457, 341, 598, 659, 9588, 7719, 992, 13, 3008, 11, 300, 311, 364, 1365, 295, 257, 1192, 329, 11, 293, 257, 1192, 329, 307, 2570, 294, 18666, 382, 257, 665, 1081, 281, 360, 9952, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21149945692582564, "compression_ratio": 1.3776223776223777, "no_speech_prob": 0.23637469112873077}, {"id": 309, "seek": 342700, "start": 3427.0, "end": 3442.0, "text": " So that's encouraging from that perspective. I think it's much too early for me to give you like a definitive yes or no answer. But I think from a mathematical perspective it's promising because you have a lot of tools to kind of reason it exactly about these things that that are really good questions.", "tokens": [50364, 407, 300, 311, 14580, 490, 300, 4585, 13, 286, 519, 309, 311, 709, 886, 2440, 337, 385, 281, 976, 291, 411, 257, 28152, 2086, 420, 572, 1867, 13, 583, 286, 519, 490, 257, 18894, 4585, 309, 311, 20257, 570, 291, 362, 257, 688, 295, 3873, 281, 733, 295, 1778, 309, 2293, 466, 613, 721, 300, 300, 366, 534, 665, 1651, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13543663549860682, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.00711536081507802}, {"id": 310, "seek": 342700, "start": 3442.0, "end": 3446.0, "text": " So it's too early to say but maybe I could say it's helpful.", "tokens": [51114, 407, 309, 311, 886, 2440, 281, 584, 457, 1310, 286, 727, 584, 309, 311, 4961, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13543663549860682, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.00711536081507802}, {"id": 311, "seek": 342700, "start": 3446.0, "end": 3454.0, "text": " Yeah, no worries, I just wanted to, I wanted to prompt you and see what happens. So, yeah.", "tokens": [51314, 865, 11, 572, 16340, 11, 286, 445, 1415, 281, 11, 286, 1415, 281, 12391, 291, 293, 536, 437, 2314, 13, 407, 11, 1338, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13543663549860682, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.00711536081507802}, {"id": 312, "seek": 345400, "start": 3455.0, "end": 3463.0, "text": " Thank you. Thank you so much.", "tokens": [50414, 1044, 291, 13, 1044, 291, 370, 709, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21557660897572836, "compression_ratio": 1.2755102040816326, "no_speech_prob": 0.009959070943295956}, {"id": 313, "seek": 345400, "start": 3463.0, "end": 3473.0, "text": " So there's been a, there's been a question during your one hot encoding slide from Jules about.", "tokens": [50814, 407, 456, 311, 668, 257, 11, 456, 311, 668, 257, 1168, 1830, 428, 472, 2368, 43430, 4137, 490, 508, 3473, 466, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21557660897572836, "compression_ratio": 1.2755102040816326, "no_speech_prob": 0.009959070943295956}, {"id": 314, "seek": 347300, "start": 3473.0, "end": 3485.0, "text": " So, if you go back to the, it's there. Right. It was the in general. So I think it was the slide after actually in general the star could be any set right, not just an integer.", "tokens": [50364, 407, 11, 498, 291, 352, 646, 281, 264, 11, 309, 311, 456, 13, 1779, 13, 467, 390, 264, 294, 2674, 13, 407, 286, 519, 309, 390, 264, 4137, 934, 767, 294, 2674, 264, 3543, 727, 312, 604, 992, 558, 11, 406, 445, 364, 24922, 13, 50964], "temperature": 0.0, "avg_logprob": -0.20355819374002437, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.012566951103508472}, {"id": 315, "seek": 347300, "start": 3485.0, "end": 3492.0, "text": " I think this, this might have been, I think this might have been remarking on the fact that one hot encoding.", "tokens": [50964, 286, 519, 341, 11, 341, 1062, 362, 668, 11, 286, 519, 341, 1062, 362, 668, 7942, 278, 322, 264, 1186, 300, 472, 2368, 43430, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20355819374002437, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.012566951103508472}, {"id": 316, "seek": 347300, "start": 3492.0, "end": 3498.0, "text": " Well, maybe Jules wants to wants to elaborate on the question themselves.", "tokens": [51314, 1042, 11, 1310, 508, 3473, 2738, 281, 2738, 281, 20945, 322, 264, 1168, 2969, 13, 51614], "temperature": 0.0, "avg_logprob": -0.20355819374002437, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.012566951103508472}, {"id": 317, "seek": 349800, "start": 3499.0, "end": 3504.0, "text": " Okay, so, so Jules is saying this was answered later.", "tokens": [50414, 1033, 11, 370, 11, 370, 508, 3473, 307, 1566, 341, 390, 10103, 1780, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15827638711502304, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.002079276368021965}, {"id": 318, "seek": 349800, "start": 3504.0, "end": 3507.0, "text": " So, so that's good.", "tokens": [50664, 407, 11, 370, 300, 311, 665, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15827638711502304, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.002079276368021965}, {"id": 319, "seek": 349800, "start": 3507.0, "end": 3520.0, "text": " So I might ask a question myself so I absolutely love sort of the idea of thinking about structure in this way category theory has a lot of structure and when we think about unstructured text.", "tokens": [50814, 407, 286, 1062, 1029, 257, 1168, 2059, 370, 286, 3122, 959, 1333, 295, 264, 1558, 295, 1953, 466, 3877, 294, 341, 636, 7719, 5261, 575, 257, 688, 295, 3877, 293, 562, 321, 519, 466, 18799, 46847, 2487, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15827638711502304, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.002079276368021965}, {"id": 320, "seek": 352000, "start": 3520.0, "end": 3526.0, "text": " It doesn't, it's just sort of strings and sort of connecting in this way is absolutely fascinating.", "tokens": [50364, 467, 1177, 380, 11, 309, 311, 445, 1333, 295, 13985, 293, 1333, 295, 11015, 294, 341, 636, 307, 3122, 10343, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15938130617141724, "compression_ratio": 1.7033492822966507, "no_speech_prob": 0.020905008539557457}, {"id": 321, "seek": 352000, "start": 3526.0, "end": 3544.0, "text": " What I'm curious about is, have you thought about connecting what you just said in this talk with with this other ways of structuring thanks text namely parts of speech, and sort of the kinds of parsing where I get a tree like structure of a sentence could", "tokens": [50664, 708, 286, 478, 6369, 466, 307, 11, 362, 291, 1194, 466, 11015, 437, 291, 445, 848, 294, 341, 751, 365, 365, 341, 661, 2098, 295, 6594, 1345, 3231, 2487, 20926, 3166, 295, 6218, 11, 293, 1333, 295, 264, 3685, 295, 21156, 278, 689, 286, 483, 257, 4230, 411, 3877, 295, 257, 8174, 727, 51564], "temperature": 0.0, "avg_logprob": -0.15938130617141724, "compression_ratio": 1.7033492822966507, "no_speech_prob": 0.020905008539557457}, {"id": 322, "seek": 354400, "start": 3544.0, "end": 3553.0, "text": " they perhaps see from the network of relationship that some things are adjectives and others are perhaps nouns.", "tokens": [50364, 436, 4317, 536, 490, 264, 3209, 295, 2480, 300, 512, 721, 366, 29378, 1539, 293, 2357, 366, 4317, 48184, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13163967830378834, "compression_ratio": 1.5936073059360731, "no_speech_prob": 0.005635594017803669}, {"id": 323, "seek": 354400, "start": 3553.0, "end": 3559.0, "text": " Yeah, so that's a great question. Yes, you will notice I mentioned nothing of parts of speech.", "tokens": [50814, 865, 11, 370, 300, 311, 257, 869, 1168, 13, 1079, 11, 291, 486, 3449, 286, 2835, 1825, 295, 3166, 295, 6218, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13163967830378834, "compression_ratio": 1.5936073059360731, "no_speech_prob": 0.005635594017803669}, {"id": 324, "seek": 354400, "start": 3559.0, "end": 3569.0, "text": " On the one hand that was done intentionally since you know, GPT is training data is just raw text and one doesn't have to tag parts of speech.", "tokens": [51114, 1282, 264, 472, 1011, 300, 390, 1096, 22062, 1670, 291, 458, 11, 26039, 51, 307, 3097, 1412, 307, 445, 8936, 2487, 293, 472, 1177, 380, 362, 281, 6162, 3166, 295, 6218, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13163967830378834, "compression_ratio": 1.5936073059360731, "no_speech_prob": 0.005635594017803669}, {"id": 325, "seek": 356900, "start": 3569.0, "end": 3579.0, "text": " Yeah, once you have this framework, you can ask, like, can you know, chat GPT give me some examples of adjectives.", "tokens": [50364, 865, 11, 1564, 291, 362, 341, 8388, 11, 291, 393, 1029, 11, 411, 11, 393, 291, 458, 11, 5081, 26039, 51, 976, 385, 512, 5110, 295, 29378, 1539, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13763991380349183, "compression_ratio": 1.5824742268041236, "no_speech_prob": 0.05178879201412201}, {"id": 326, "seek": 356900, "start": 3579.0, "end": 3587.0, "text": " Give me some examples of nouns I haven't tried that yet actually someone should try it or maybe I'll try it after this and see if it does it correctly. So yeah, does it learn things like that.", "tokens": [50864, 5303, 385, 512, 5110, 295, 48184, 286, 2378, 380, 3031, 300, 1939, 767, 1580, 820, 853, 309, 420, 1310, 286, 603, 853, 309, 934, 341, 293, 536, 498, 309, 775, 309, 8944, 13, 407, 1338, 11, 775, 309, 1466, 721, 411, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13763991380349183, "compression_ratio": 1.5824742268041236, "no_speech_prob": 0.05178879201412201}, {"id": 327, "seek": 358700, "start": 3587.0, "end": 3604.0, "text": " So I think, like my answer to Petter, it's hopeful. In fact, there's a philosopher that also we're working with Juan Luis Gastaldi who has some very good ideas in this direction. So I would say, stay tuned.", "tokens": [50364, 407, 286, 519, 11, 411, 452, 1867, 281, 10472, 391, 11, 309, 311, 20531, 13, 682, 1186, 11, 456, 311, 257, 29805, 300, 611, 321, 434, 1364, 365, 17064, 25133, 31988, 3976, 72, 567, 575, 512, 588, 665, 3487, 294, 341, 3513, 13, 407, 286, 576, 584, 11, 1754, 10870, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13242572437633168, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.08013913780450821}, {"id": 328, "seek": 360400, "start": 3604.0, "end": 3618.0, "text": " And let's see right now it's again, kind of too early but these are things that we're definitely thinking about and looking to go in that direction and some some folks even in our research circle have ideas but but still work in progress.", "tokens": [50364, 400, 718, 311, 536, 558, 586, 309, 311, 797, 11, 733, 295, 886, 2440, 457, 613, 366, 721, 300, 321, 434, 2138, 1953, 466, 293, 1237, 281, 352, 294, 300, 3513, 293, 512, 512, 4024, 754, 294, 527, 2132, 6329, 362, 3487, 457, 457, 920, 589, 294, 4205, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11712647217970629, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.04018537327647209}, {"id": 329, "seek": 360400, "start": 3618.0, "end": 3620.0, "text": " But yeah, that's a really great question.", "tokens": [51064, 583, 1338, 11, 300, 311, 257, 534, 869, 1168, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11712647217970629, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.04018537327647209}, {"id": 330, "seek": 362000, "start": 3620.0, "end": 3633.0, "text": " Thank you. So we have a question from Tali. The question is, is there an analogy between matrix algebra and profanctors. Sorry, if there if there is an analogy between matrix algebra and profanctors.", "tokens": [50364, 1044, 291, 13, 407, 321, 362, 257, 1168, 490, 314, 5103, 13, 440, 1168, 307, 11, 307, 456, 364, 21663, 1296, 8141, 21989, 293, 1740, 282, 349, 830, 13, 4919, 11, 498, 456, 498, 456, 307, 364, 21663, 1296, 8141, 21989, 293, 1740, 282, 349, 830, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1703007922453039, "compression_ratio": 1.8, "no_speech_prob": 0.04331780597567558}, {"id": 331, "seek": 362000, "start": 3633.0, "end": 3638.0, "text": " What would be the categorical analog of higher order arrays or tensor networks.", "tokens": [51014, 708, 576, 312, 264, 19250, 804, 16660, 295, 2946, 1668, 41011, 420, 40863, 9590, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1703007922453039, "compression_ratio": 1.8, "no_speech_prob": 0.04331780597567558}, {"id": 332, "seek": 363800, "start": 3638.0, "end": 3653.0, "text": " Yeah, that's a fantastic question. So just like so a higher, so higher order array. So matrix is a function function. Let me just blow a matrix is a function from a product of two sets.", "tokens": [50364, 865, 11, 300, 311, 257, 5456, 1168, 13, 407, 445, 411, 370, 257, 2946, 11, 370, 2946, 1668, 10225, 13, 407, 8141, 307, 257, 2445, 2445, 13, 961, 385, 445, 6327, 257, 8141, 307, 257, 2445, 490, 257, 1674, 295, 732, 6352, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16482173071967232, "compression_ratio": 2.0308641975308643, "no_speech_prob": 0.25940409302711487}, {"id": 333, "seek": 363800, "start": 3653.0, "end": 3663.0, "text": " So a tensor of order three would be a function from a product of three sets, a tensor of order 10 would be a function from a product of forces.", "tokens": [51114, 407, 257, 40863, 295, 1668, 1045, 576, 312, 257, 2445, 490, 257, 1674, 295, 1045, 6352, 11, 257, 40863, 295, 1668, 1266, 576, 312, 257, 2445, 490, 257, 1674, 295, 5874, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16482173071967232, "compression_ratio": 2.0308641975308643, "no_speech_prob": 0.25940409302711487}, {"id": 334, "seek": 366300, "start": 3663.0, "end": 3678.0, "text": " So just like you can take, take the product of more than two sets. You can also look at functors from a product of more than two categories. So profanctors also have higher, you know, higher order array analogs.", "tokens": [50364, 407, 445, 411, 291, 393, 747, 11, 747, 264, 1674, 295, 544, 813, 732, 6352, 13, 509, 393, 611, 574, 412, 1019, 5547, 490, 257, 1674, 295, 544, 813, 732, 10479, 13, 407, 1740, 282, 349, 830, 611, 362, 2946, 11, 291, 458, 11, 2946, 1668, 10225, 16660, 82, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09114274290419117, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.0037055376451462507}, {"id": 335, "seek": 366300, "start": 3678.0, "end": 3690.0, "text": " And that's easy to write down. So, yes, so these things called tensor, you know, higher order tensors they have analogs and category and they're just kind of straightforward generalization.", "tokens": [51114, 400, 300, 311, 1858, 281, 2464, 760, 13, 407, 11, 2086, 11, 370, 613, 721, 1219, 40863, 11, 291, 458, 11, 2946, 1668, 10688, 830, 436, 362, 16660, 82, 293, 7719, 293, 436, 434, 445, 733, 295, 15325, 2674, 2144, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09114274290419117, "compression_ratio": 1.798206278026906, "no_speech_prob": 0.0037055376451462507}, {"id": 336, "seek": 369000, "start": 3691.0, "end": 3698.0, "text": " So we have raised hand from Pym.", "tokens": [50414, 407, 321, 362, 6005, 1011, 490, 430, 4199, 13, 50764], "temperature": 0.0, "avg_logprob": -0.21154349704958358, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.043734513223171234}, {"id": 337, "seek": 369000, "start": 3698.0, "end": 3704.0, "text": " Hi, thanks for the very interesting talk I have a very pedestrian question sorry for that.", "tokens": [50764, 2421, 11, 3231, 337, 264, 588, 1880, 751, 286, 362, 257, 588, 33947, 1168, 2597, 337, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21154349704958358, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.043734513223171234}, {"id": 338, "seek": 369000, "start": 3704.0, "end": 3712.0, "text": " At some point you talked about the composition of like in the 01 category of the syntax.", "tokens": [51064, 1711, 512, 935, 291, 2825, 466, 264, 12686, 295, 411, 294, 264, 23185, 7719, 295, 264, 28431, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21154349704958358, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.043734513223171234}, {"id": 339, "seek": 371200, "start": 3712.0, "end": 3717.0, "text": " Could you go to that slide perhaps, because I kind of.", "tokens": [50364, 7497, 291, 352, 281, 300, 4137, 4317, 11, 570, 286, 733, 295, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22185920533679782, "compression_ratio": 1.4052287581699345, "no_speech_prob": 0.053929999470710754}, {"id": 340, "seek": 371200, "start": 3717.0, "end": 3727.0, "text": " Yeah, here. So here we have like why given X and Z given Y is Z given X.", "tokens": [50614, 865, 11, 510, 13, 407, 510, 321, 362, 411, 983, 2212, 1783, 293, 1176, 2212, 398, 307, 1176, 2212, 1783, 13, 51114], "temperature": 0.0, "avg_logprob": -0.22185920533679782, "compression_ratio": 1.4052287581699345, "no_speech_prob": 0.053929999470710754}, {"id": 341, "seek": 371200, "start": 3727.0, "end": 3737.0, "text": " Normally, I would guess you have some sort of a sum over why there. How does that work.", "tokens": [51114, 17424, 11, 286, 576, 2041, 291, 362, 512, 1333, 295, 257, 2408, 670, 983, 456, 13, 1012, 775, 300, 589, 13, 51614], "temperature": 0.0, "avg_logprob": -0.22185920533679782, "compression_ratio": 1.4052287581699345, "no_speech_prob": 0.053929999470710754}, {"id": 342, "seek": 373700, "start": 3737.0, "end": 3758.0, "text": " Yeah, so here there's no sum. I'm so when I look on the right side my mouse for some reason is not appearing on my slide but when I look at the arrow from blue to small blue, think of point to two is the probability of small blue conditioned on blue.", "tokens": [50364, 865, 11, 370, 510, 456, 311, 572, 2408, 13, 286, 478, 370, 562, 286, 574, 322, 264, 558, 1252, 452, 9719, 337, 512, 1778, 307, 406, 19870, 322, 452, 4137, 457, 562, 286, 574, 412, 264, 11610, 490, 3344, 281, 1359, 3344, 11, 519, 295, 935, 281, 732, 307, 264, 8482, 295, 1359, 3344, 35833, 322, 3344, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13857035483083419, "compression_ratio": 1.5432098765432098, "no_speech_prob": 0.013418929651379585}, {"id": 343, "seek": 375800, "start": 3758.0, "end": 3764.0, "text": " So the probability of seeing small blue, given that I have just seek for blue.", "tokens": [50364, 407, 264, 8482, 295, 2577, 1359, 3344, 11, 2212, 300, 286, 362, 445, 8075, 337, 3344, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2621369310604629, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.05097568780183792}, {"id": 344, "seek": 375800, "start": 3764.0, "end": 3769.0, "text": " And there's only one way of getting there. So, okay, okay, I see.", "tokens": [50664, 400, 456, 311, 787, 472, 636, 295, 1242, 456, 13, 407, 11, 1392, 11, 1392, 11, 286, 536, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2621369310604629, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.05097568780183792}, {"id": 345, "seek": 375800, "start": 3769.0, "end": 3772.0, "text": " Good. Thank you for asking for clarification. Good.", "tokens": [50914, 2205, 13, 1044, 291, 337, 3365, 337, 34449, 13, 2205, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2621369310604629, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.05097568780183792}, {"id": 346, "seek": 375800, "start": 3772.0, "end": 3782.0, "text": " Okay, and this equality because typically I guess for this category wouldn't actually need equality here, right. You would. Yeah, so we just have an inequality would suffice.", "tokens": [51064, 1033, 11, 293, 341, 14949, 570, 5850, 286, 2041, 337, 341, 7719, 2759, 380, 767, 643, 14949, 510, 11, 558, 13, 509, 576, 13, 865, 11, 370, 321, 445, 362, 364, 16970, 576, 3889, 573, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2621369310604629, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.05097568780183792}, {"id": 347, "seek": 378200, "start": 3782.0, "end": 3791.0, "text": " Yeah, okay. Yeah, and any quality. Actually, both of those equalities like you just need any quality, but we happen to get equality here.", "tokens": [50364, 865, 11, 1392, 13, 865, 11, 293, 604, 3125, 13, 5135, 11, 1293, 295, 729, 2681, 1088, 411, 291, 445, 643, 604, 3125, 11, 457, 321, 1051, 281, 483, 14949, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21281179392112876, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.010153878480196}, {"id": 348, "seek": 378200, "start": 3791.0, "end": 3793.0, "text": " Okay, yeah, okay, thanks.", "tokens": [50814, 1033, 11, 1338, 11, 1392, 11, 3231, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21281179392112876, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.010153878480196}, {"id": 349, "seek": 378200, "start": 3793.0, "end": 3798.0, "text": " Yeah, thank you.", "tokens": [50914, 865, 11, 1309, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21281179392112876, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.010153878480196}, {"id": 350, "seek": 379800, "start": 3798.0, "end": 3812.0, "text": " So, by the way, here in Glasgow we have a big watch party watching your talk ties so there's Mateo capuchy in the room with me who's going to come here and he is interested in asking a question.", "tokens": [50364, 407, 11, 538, 264, 636, 11, 510, 294, 40457, 321, 362, 257, 955, 1159, 3595, 1976, 428, 751, 14039, 370, 456, 311, 27594, 78, 1410, 625, 88, 294, 264, 1808, 365, 385, 567, 311, 516, 281, 808, 510, 293, 415, 307, 3102, 294, 3365, 257, 1168, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18486622663644645, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.07342913001775742}, {"id": 351, "seek": 379800, "start": 3812.0, "end": 3817.0, "text": " Oh, fantastic. I didn't know there was a watch party. Hi.", "tokens": [51064, 876, 11, 5456, 13, 286, 994, 380, 458, 456, 390, 257, 1159, 3595, 13, 2421, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18486622663644645, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.07342913001775742}, {"id": 352, "seek": 379800, "start": 3817.0, "end": 3827.0, "text": " I had just like, so I know about this co cat, which is another categorical framework for doing natural language processing and I'm wondering what's the relation.", "tokens": [51314, 286, 632, 445, 411, 11, 370, 286, 458, 466, 341, 598, 3857, 11, 597, 307, 1071, 19250, 804, 8388, 337, 884, 3303, 2856, 9007, 293, 286, 478, 6359, 437, 311, 264, 9721, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18486622663644645, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.07342913001775742}, {"id": 353, "seek": 382700, "start": 3827.0, "end": 3835.0, "text": " So, um, disco cat I think is inherently looking at connections with quantum physics.", "tokens": [50364, 407, 11, 1105, 11, 3622, 3857, 286, 519, 307, 27993, 1237, 412, 9271, 365, 13018, 10649, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09633822227591898, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.002979305572807789}, {"id": 354, "seek": 382700, "start": 3835.0, "end": 3850.0, "text": " So I have not mentioned anything about quantum here. And also, the question that I'm trying to answer is a little bit different. So here I'm trying to see how can I start with probability distributions on texts.", "tokens": [50764, 407, 286, 362, 406, 2835, 1340, 466, 13018, 510, 13, 400, 611, 11, 264, 1168, 300, 286, 478, 1382, 281, 1867, 307, 257, 707, 857, 819, 13, 407, 510, 286, 478, 1382, 281, 536, 577, 393, 286, 722, 365, 8482, 37870, 322, 15765, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09633822227591898, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.002979305572807789}, {"id": 355, "seek": 385000, "start": 3850.0, "end": 3863.0, "text": " And how can I pass from that into something that feels like meaning or semantic or something that has something about knowledge or reasoning, you know, inspired by large language models.", "tokens": [50364, 400, 577, 393, 286, 1320, 490, 300, 666, 746, 300, 3417, 411, 3620, 420, 47982, 420, 746, 300, 575, 746, 466, 3601, 420, 21577, 11, 291, 458, 11, 7547, 538, 2416, 2856, 5245, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07778502733279498, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.047369807958602905}, {"id": 356, "seek": 385000, "start": 3863.0, "end": 3868.0, "text": " So the question that I'm starting with is a little bit different.", "tokens": [51014, 407, 264, 1168, 300, 286, 478, 2891, 365, 307, 257, 707, 857, 819, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07778502733279498, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.047369807958602905}, {"id": 357, "seek": 385000, "start": 3868.0, "end": 3875.0, "text": " And the tools or the sort of assumptions that I'm making like I haven't said anything about quantum physics or", "tokens": [51264, 400, 264, 3873, 420, 264, 1333, 295, 17695, 300, 286, 478, 1455, 411, 286, 2378, 380, 848, 1340, 466, 13018, 10649, 420, 51614], "temperature": 0.0, "avg_logprob": -0.07778502733279498, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.047369807958602905}, {"id": 358, "seek": 387500, "start": 3875.0, "end": 3894.0, "text": " math. I'm also here. I mean, I could do this but I haven't. I get asked for a representation of all of this information. So I'm just working with categories right but you know if I look at a transformer there's no like category written down in the paper, you know, attention is all you need.", "tokens": [50364, 5221, 13, 286, 478, 611, 510, 13, 286, 914, 11, 286, 727, 360, 341, 457, 286, 2378, 380, 13, 286, 483, 2351, 337, 257, 10290, 295, 439, 295, 341, 1589, 13, 407, 286, 478, 445, 1364, 365, 10479, 558, 457, 291, 458, 498, 286, 574, 412, 257, 31782, 456, 311, 572, 411, 7719, 3720, 760, 294, 264, 3035, 11, 291, 458, 11, 3202, 307, 439, 291, 643, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22020422087775338, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.02593759261071682}, {"id": 359, "seek": 389400, "start": 3894.0, "end": 3907.0, "text": " So I could ask, Okay, now that I have all of this mathematical structure, can I represent it when your altruba is a nice way to represent things. So can I, you know, represent them by vector spaces.", "tokens": [50364, 407, 286, 727, 1029, 11, 1033, 11, 586, 300, 286, 362, 439, 295, 341, 18894, 3877, 11, 393, 286, 2906, 309, 562, 428, 4955, 894, 4231, 307, 257, 1481, 636, 281, 2906, 721, 13, 407, 393, 286, 11, 291, 458, 11, 2906, 552, 538, 8062, 7673, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16355859756469726, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.4914880394935608}, {"id": 360, "seek": 389400, "start": 3907.0, "end": 3920.0, "text": " Could those vector spaces then be tagged with parts of speech which is kind of like what's happening in disco cat. Can I then like making a comparison with similar structure that appears in quantum. So I'm not doing anything like that.", "tokens": [51014, 7497, 729, 8062, 7673, 550, 312, 40239, 365, 3166, 295, 6218, 597, 307, 733, 295, 411, 437, 311, 2737, 294, 3622, 3857, 13, 1664, 286, 550, 411, 1455, 257, 9660, 365, 2531, 3877, 300, 7038, 294, 13018, 13, 407, 286, 478, 406, 884, 1340, 411, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16355859756469726, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.4914880394935608}, {"id": 361, "seek": 392000, "start": 3920.0, "end": 3937.0, "text": " I could want to. I mean, I could, and I have a paper on this with the honest that came out I think last year. So you could ask for a representation of this kind of information this category theoretical information in terms of linear algebra.", "tokens": [50364, 286, 727, 528, 281, 13, 286, 914, 11, 286, 727, 11, 293, 286, 362, 257, 3035, 322, 341, 365, 264, 3245, 300, 1361, 484, 286, 519, 1036, 1064, 13, 407, 291, 727, 1029, 337, 257, 10290, 295, 341, 733, 295, 1589, 341, 7719, 20864, 1589, 294, 2115, 295, 8213, 21989, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13661920374090022, "compression_ratio": 1.535031847133758, "no_speech_prob": 0.10072670876979828}, {"id": 362, "seek": 393700, "start": 3937.0, "end": 3956.0, "text": " We think that to actually piggyback on someone else's question tensor networks are are very good choice for that. But even then sort of our premise for choosing that is a little bit different. So it turns out that in, you know, condensed matter physics and quantum", "tokens": [50364, 492, 519, 300, 281, 767, 39349, 3207, 322, 1580, 1646, 311, 1168, 40863, 9590, 366, 366, 588, 665, 3922, 337, 300, 13, 583, 754, 550, 1333, 295, 527, 22045, 337, 10875, 300, 307, 257, 707, 857, 819, 13, 407, 309, 4523, 484, 300, 294, 11, 291, 458, 11, 36398, 1871, 10649, 293, 13018, 51314], "temperature": 0.0, "avg_logprob": -0.11863468404401813, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.12917280197143555}, {"id": 363, "seek": 395600, "start": 3956.0, "end": 3965.0, "text": " physics, they have very nice tools that happen to kind of match with the statistics of language.", "tokens": [50364, 10649, 11, 436, 362, 588, 1481, 3873, 300, 1051, 281, 733, 295, 2995, 365, 264, 12523, 295, 2856, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08244011201054217, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.380420058965683}, {"id": 364, "seek": 395600, "start": 3965.0, "end": 3980.0, "text": " But those tools, you know, can be used outside of the physics context, even though historically they've been used there. So even then in that work that we're doing we're not really saying anything like languages quantum or you know entanglement means this nothing, nothing like that.", "tokens": [50814, 583, 729, 3873, 11, 291, 458, 11, 393, 312, 1143, 2380, 295, 264, 10649, 4319, 11, 754, 1673, 16180, 436, 600, 668, 1143, 456, 13, 407, 754, 550, 294, 300, 589, 300, 321, 434, 884, 321, 434, 406, 534, 1566, 1340, 411, 8650, 13018, 420, 291, 458, 948, 656, 3054, 1355, 341, 1825, 11, 1825, 411, 300, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08244011201054217, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.380420058965683}, {"id": 365, "seek": 398000, "start": 3980.0, "end": 3992.0, "text": " I think that disco cat is quite different from this, even though we both happen to be, you know, thinking about language in terms of category but the questions we're answering are for different the tools are different.", "tokens": [50364, 286, 519, 300, 3622, 3857, 307, 1596, 819, 490, 341, 11, 754, 1673, 321, 1293, 1051, 281, 312, 11, 291, 458, 11, 1953, 466, 2856, 294, 2115, 295, 7719, 457, 264, 1651, 321, 434, 13430, 366, 337, 819, 264, 3873, 366, 819, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1062476294381278, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0800173357129097}, {"id": 366, "seek": 398000, "start": 3992.0, "end": 3999.0, "text": " The sort of premise or the reason why using those tools are different. Yeah, that's kind of my high level answer to that.", "tokens": [50964, 440, 1333, 295, 22045, 420, 264, 1778, 983, 1228, 729, 3873, 366, 819, 13, 865, 11, 300, 311, 733, 295, 452, 1090, 1496, 1867, 281, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1062476294381278, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0800173357129097}, {"id": 367, "seek": 398000, "start": 3999.0, "end": 4001.0, "text": " Thank you very much.", "tokens": [51314, 1044, 291, 588, 709, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1062476294381278, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0800173357129097}, {"id": 368, "seek": 398000, "start": 4001.0, "end": 4005.0, "text": " Thank you for the question.", "tokens": [51414, 1044, 291, 337, 264, 1168, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1062476294381278, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.0800173357129097}, {"id": 369, "seek": 400500, "start": 4005.0, "end": 4011.0, "text": " I think this might be a good, good place to stop.", "tokens": [50364, 286, 519, 341, 1062, 312, 257, 665, 11, 665, 1081, 281, 1590, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14248999883962232, "compression_ratio": 1.2627118644067796, "no_speech_prob": 0.047861676663160324}, {"id": 370, "seek": 400500, "start": 4011.0, "end": 4019.0, "text": " We're a bit over time, but this was absolutely fantastic. So I'll just say my thanks one more time.", "tokens": [50664, 492, 434, 257, 857, 670, 565, 11, 457, 341, 390, 3122, 5456, 13, 407, 286, 603, 445, 584, 452, 3231, 472, 544, 565, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14248999883962232, "compression_ratio": 1.2627118644067796, "no_speech_prob": 0.047861676663160324}, {"id": 371, "seek": 401900, "start": 4019.0, "end": 4030.0, "text": " As now we're basically since we're done with the main part of the course really what we're now in cats for AI as I've mentioned very old, the things we're going to be having our guest lectures.", "tokens": [50364, 1018, 586, 321, 434, 1936, 1670, 321, 434, 1096, 365, 264, 2135, 644, 295, 264, 1164, 534, 437, 321, 434, 586, 294, 11111, 337, 7318, 382, 286, 600, 2835, 588, 1331, 11, 264, 721, 321, 434, 516, 281, 312, 1419, 527, 8341, 16564, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1312991236592387, "compression_ratio": 1.6652719665271967, "no_speech_prob": 0.23584453761577606}, {"id": 372, "seek": 401900, "start": 4030.0, "end": 4042.0, "text": " So this is going to be on a regular schedule and if there's any recommendations you have from people who would love to talk or who you think could contribute meaningfully here would love to hear about it.", "tokens": [50914, 407, 341, 307, 516, 281, 312, 322, 257, 3890, 7567, 293, 498, 456, 311, 604, 10434, 291, 362, 490, 561, 567, 576, 959, 281, 751, 420, 567, 291, 519, 727, 10586, 3620, 2277, 510, 576, 959, 281, 1568, 466, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1312991236592387, "compression_ratio": 1.6652719665271967, "no_speech_prob": 0.23584453761577606}, {"id": 373, "seek": 404200, "start": 4042.0, "end": 4058.0, "text": " So far we have two future lectures scheduled, which are which are going to be sometime in March and we're going to update you on it as we learn more. I don't know if there's anybody else from the organizing team that has to say anything.", "tokens": [50364, 407, 1400, 321, 362, 732, 2027, 16564, 15678, 11, 597, 366, 597, 366, 516, 281, 312, 15053, 294, 6129, 293, 321, 434, 516, 281, 5623, 291, 322, 309, 382, 321, 1466, 544, 13, 286, 500, 380, 458, 498, 456, 311, 4472, 1646, 490, 264, 17608, 1469, 300, 575, 281, 584, 1340, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1442355990409851, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.027105076238512993}, {"id": 374, "seek": 404200, "start": 4058.0, "end": 4068.0, "text": " Other than one of those talks will be by David Spivak, so you should definitely not miss it.", "tokens": [51164, 5358, 813, 472, 295, 729, 6686, 486, 312, 538, 4389, 1738, 592, 514, 11, 370, 291, 820, 2138, 406, 1713, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1442355990409851, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.027105076238512993}, {"id": 375, "seek": 406800, "start": 4068.0, "end": 4071.0, "text": " Okay, so that's it. Thank you very much.", "tokens": [50364, 1033, 11, 370, 300, 311, 309, 13, 1044, 291, 588, 709, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12277611564187442, "compression_ratio": 1.416, "no_speech_prob": 0.14073695242404938}, {"id": 376, "seek": 406800, "start": 4071.0, "end": 4074.0, "text": " And see you next time.", "tokens": [50514, 400, 536, 291, 958, 565, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12277611564187442, "compression_ratio": 1.416, "no_speech_prob": 0.14073695242404938}, {"id": 377, "seek": 406800, "start": 4074.0, "end": 4077.0, "text": " Thank you all for the invitation for your time. Appreciate it.", "tokens": [50664, 1044, 291, 439, 337, 264, 17890, 337, 428, 565, 13, 37601, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12277611564187442, "compression_ratio": 1.416, "no_speech_prob": 0.14073695242404938}, {"id": 378, "seek": 406800, "start": 4077.0, "end": 4080.0, "text": " Thanks so much for coming time. Really enjoyed it.", "tokens": [50814, 2561, 370, 709, 337, 1348, 565, 13, 4083, 4626, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12277611564187442, "compression_ratio": 1.416, "no_speech_prob": 0.14073695242404938}], "language": "en"}