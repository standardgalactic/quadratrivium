{"text": " Hi. I'm Racheke. I'm here to talk about Closure, which is a programming language I wrote for the JVM. This particular talk is oriented towards people who program in Java or C sharp or C++ in particular that I'm not going to presume any knowledge of Lisp. So you might find some of it tedious, although I am preparing for a talk I'm going to give at ecoup to the European Lisp workshop, where I'm going to talk about the ways Closure is a different Lisp. So maybe some of this will be interesting to you in that respect. But that's the nature of this talk. It's going to be an introduction to the language, a fly-by tour of some of the features. I'll drill down into some of the others. I started to ask this question before, but I'll just ask it again to sort of see, is there anyone here who knows or uses any flavor of Lisp, common Lisp scheme or Closure? Okay. So mostly no. I presume a lot of Java or anything in that family, C++, C sharp, Scala, anyone? You must be playing with it, right? How about functional programming languages like ML or Haskell District? Guys, anyone a little? Don't really want to raise their hands about that one. Okay. That's good. In particular, I think coming from that background, you'll understand a lot of this straight away. How about dynamic programming languages, Python, Ruby or Groovy? Yes, about half. And I asked before, Closure, we have a few people with their toes in the water. The other key aspect of Closure that would matter to you if you're a Java programmer is whether or not you do any real multi-threaded programming in Java or in any language. Yes? So some. So you use locks and all of that nightmare stuff. I'm a practitioner. I programmed in C and C++ and Java and C sharp and Common Lisp and Python and JavaScript and a bunch of languages over the years. Way back, this same group, I think it's the same lineage, was the CIG. And when I first started to come, I started to teach C++ to the CIG and it became the C++ and CIG and eventually the C++ and Java CIG and now the Java CIG. So back in the 90s, early 90s and mid 90s, I taught C++ and advanced C++ to this group and ran study groups and I've come back tonight to apologize for having done that to you and to try to set you off on a better track. So we're going to look at the fundamentals of Closure and it will be also of Lisp in many ways. But I'm going to say Closure, don't take offense, all these things or many of the things I say are true of Closure are true of many Lisp. I didn't invent them, they're not unique to Closure, but some things are. They will look at the syntax and evaluation model. This is the stuff that will seem most unusual to you if you've come from a, you know, compile link run language and one of the curly brace C derives like Java. Then we'll look at some aspects of Closure, sequences in particular and the Java integration which I imagine will be interesting and I'll finally end up talking about concurrency, why Closure has some of the features it does and how they address the problems of writing concurrent programs that run on the new and indefinitely, you know, for the indefinite future multi-core machines and I'll take some questions. At some point in the middle we'll probably take a break. I don't know exactly where that's going to go. So what's the fundamentals of Closure? Closure is a dynamic programming language and dynamic has a lot of different meanings, in particular it's dynamically typed, that would be an expectation you'd have of Python or Ruby or Groovy. It achieves that dynamic nature by being a Lisp and I'll talk more about that. I don't see a lot of people who know Lisp here but that doesn't mean there isn't a bias against Lisp. How many people have seen Lisp and said oh my god, I can't believe the parentheses and I would say I'd hope you'd put that bias aside for the purposes of this talk. It ends up that for people who have not used Lisp, those biases have no basis and for most people who have given it a solid try, they vanish and in fact many of the things you consider to be problems with Lisp are features down the line. But having said that, Closure is a very different Lisp. It's syntactically much leaner than a lot of Lisp's. It has fewer parentheses. It uses more data structures in its syntax and as a result I think is more succinct and more readable. So maybe the time to try Lisp again. Another aspect of Closure is that it's a functional programming language and again I'm going to talk in detail about these things. For now you can just say that means a focus on immutability in your programs. So write programs primarily with immutable data structures and if you're coming from another Lisp, this will be an area where Closure is definitely different. I mean different decisions about the data structures in Closure. The third leg of Closure, you know, it sort of stands on four points. It's dynamic, it's functional, it's hosted on the JVM and it embraces the JVM, its host platform. There are ports of other languages that sort of just sit on the JVM. There are ports of, for instance, common Lisp that sit on the JVM. But they don't really connect very well. For a number of reasons. One is they're implementing a standard. The standard was written before Java was written and you know, there's just no merging the type systems. On the other hand, Closure was written for the JVM and so it's very heavily integrated with it. So not only does it reside there, which is a benefit because you can run it if that's your environment. But it embraces it, which means the integration is good and it's pretty transparent to go back and forth. The fourth aspect of Closure is the concurrency aspect. You know, I work in C-Sharp with guys writing broadcast automation systems. They're, you know, they're multi-threaded. They have all kinds of nasty stuff going on, multiple connections to sockets, lots of databases, you know, data feeds from all kinds of places and it's not fun writing programs like that that need to share data structures amongst threads and to have them get maintained over time and have everybody remember what the locking model is. It's extremely challenging. Anyone who's done any extensive multi-threaded programming with the locking model knows how hard it is to get that right. So Closure is an effort on my part to solve those problems in an automatic way with language support. And the last thing is, you know, it is an open source language and it's very transparent, the implementation and everything else is up there for you to see. We started to talk about this before. Why use a dynamic language? Some people are very happy, of the people who are programming Java, how we are happy about that. They like Java. They have no complaints. Okay, not too many. It ends up that I think many Java programmers look at people who are using Python or Ruby and being very productive and I think justifiably MV, their productivity, the succinctness, the flexibility they have and in particular how quickly they can get things done. And it ends up that that is a fact of the static languages, especially the ones like Java, that they're inherently slower because of the amount of, well some people call it ceremony, but you have to go through to communicate with the language. It slows you down. So flexibility is a key thing. You would look for in a dynamic language. Interactivity is another key point. Again, this goes back to Lisp. Lisp has pretty much always been an interactive language. And that means a lot of things. In particular, it means that when you've got Lisp up and running, you feel like you are engaged with an environment as opposed to, you know, shoveling your text through a compiler phase to produce something else out the other end. So that interactivity is kind of a deep thing. The repul is part of it. That means read, eval, print, loop, and I'll talk about that in detail in a little bit. Dynamic languages tend to be more concise. That doesn't mean that static languages can't be. Haskell in particular is very concise. But the curly brace languages are not concise. Java is probably a great example of a language that's not concise. And that's just not a matter of tedium. It's a matter of where is your logic? How far apart is your logic? How spread out is it? Can you see what you're thinking about? Or is it in pieces? Is it spread out by a bunch of things that are not about your problem? Dynamic languages are definitely more suitable for exploration. There's a certain aspect in which static languages are like concrete. That's a good aspect when you're trying to, you know, finish. In some systems, you know, concrete is going to be more resilient. It's, you know, it's more resilient to change. It's more structured and it's rigid. On the other hand, that's not necessarily the kind of materials you want to be working with when you're trying to figure out what your structure should look like in the first place. So dynamic languages are better for exploration. And in particular, what I like about dynamic languages and Lisp fundamentally, and I think in a way other languages don't achieve, is it lets you focus on your problem. You can, with Lisp and its ability to do syntactic abstraction, suck everything out of the way, except the problem. And for me, you know, when I discovered Lisp, I was pretty expert, C++ programmer. I said to myself, what have I been doing with my life? It was that, that big a deal. So there are many dynamic languages. I'm going to talk about closure and I will do, you know, bashing of other languages, but I will try to highlight why you might choose closure over some of the other options. Because in particular now, I think it's a great thing that there are many dynamic languages available for the JVM and dynamic languages are supported as a concept in the Java community. A Java one, there was plenty of presentations on Jython and JRuby and Groovy and these other languages. And Sun has hired some of the developers of these languages and given it, you know, kind of official support as something that's viable to do on the JVM. So you're going to see mixed language programming being accepted in Java shops. So how do you pick? I think you can categorize languages in one dimension pretty straightforward. Are they a port of a language that exists somewhere else or were they written for the JVM? Ports have a bunch of challenges. One is there is a canonic version out there because most of these languages are not defined by a specification. They're defined by a canonic implementation. So they're CRuby. They're CPython. Those are really the languages. And the other things are ports which have to struggle to follow along with the C version. The other problem ports have is a lot of the infrastructure for the languages, especially the ones that don't perform very well, are written in C. In other words, to get the library performance they need, the support libraries for Python are written in C. So an effort to port Python to Java means having to replicate those C libraries. So there's that. I would say the main appeal to a ported language is if you already have an investment in Ruby or Python or you have to really love the language designs. That's a good way to go here. I would say if not, if you're just starting from scratch, you may find that a language that's native to the JVM is going to give you better integration. You know the version you're using is the canonic version. The canonic version of Ruby is a JVM language. The canonic version of Closure is a JVM language. And I would say of the two, Groovy is going to let you do what you do in Java, except a little bit more easily. Fewer semicolons, more dynamic, there are some builders, there are some idioms, there are closures, sort of the fun of dynamic programming and a lot of the similar syntax to Java. So I think if you're just interested in dynamic and want to continue to write programs that are like your Java programs, Groovy can't be touched. Closure is not about writing programs like your Java programs. Closure is about realizing what's wrong with your Java programs and doing something different. And so you'll find some of that through the talk. So Closure itself, it inherits from Lisp, an expressivity and elegance I think is unmatched. Depending on your mindset, you may or may not agree, but this is a certain mathematical purity to lambda calculus and the way it's realized in Lisp. The uniformity of the syntax is elegant. Closure also has very good performance. Again, I'm not going to get involved in any language bashing, but I'm pretty confident no other dynamic language on the JVM approaches the performance of Closure in any area and is unlikely to. But everybody's working on performance. Certainly. We've converted them. So the performance is good. I made a point before starting the talk that the objective and objective of Closure is to be useful in every area in which Java is useful. You can tackle the same kind of problems. I don't write web apps and put stuff in and take it out of the database kind of applications. I write scheduling systems, broadcast automation systems, election projection systems, machine listening systems, audio analysis systems, and I write them in languages like C-sharp and Java and C++ and Closure can be used for those kinds of problems. It doesn't mean they can't also be used for web apps and people did that right away with Closure and database and UI stuff. But it has that same kind of reach. One of the nice things about Java is it has a wide range. Closure has direct wrapper free access to Java. Some of the ported languages have to use wrappers because those languages have their own object systems that imply a bunch of dynamic features that they have to glom on top of Java objects when you interoperate with them. Closure was designed to provide direct access to Java. It looks like Closure, but it's direct. Closure being a list is extensible in a deep way. And we'll talk a little bit more about how you get syntactic extensibility through macros. And then Closure, I think, is completely unique amongst the languages on the JVM in promoting immutability and concurrency, much more so than even Scala, which is often talked about as a functional language, but it's also a option. Closure is really oriented towards writing concurrent programs. And immutability for its other benefits outside of concurrency. So how does Closure get to be these things? It is a list. It is a list. It is a list. Again, put what you think about Lisp aside. I'll explain what that means in depth as I go into each of these points, but Lisp in general is dynamic in that way, interacting with an environment, having a REPL, having sort of introspection capabilities on the environment, being able to modify things in a running program, or all characteristics that make it dynamic. A fundamental feature of all Lisp, if they want to be a Lisp, is that code is represented as data. And again, I'll explain that in detail. There is a reader, which is part of the implementation of code as data, sort of something in between your text and the evaluator. Being a Lisp means having an extremely small core. You'll find when you contrast Closure to other languages, even languages that are theoretically lightweight like Python or Ruby, Closure has way less syntax than those languages, far less complexity. In spite of the fact that they appear easy. Lisp generally have tended to emphasize lists. Closure is not exactly the same way. It is an area where Closure differs from Lisp in that it frees the abstract of first and rest from a data structure, the con cells. And in doing so, offers the power of Lisp to many more data structures than most Lisp do. So there's that sequence thing, and I'll talk more about that in detail. And syntactic abstraction. Again, we have abstraction capabilities with functions or methods in most languages. Lisp take that to the next level by allowing you to suck even more repetition out of your programs when that repetition can't be sucked out by making a function. Okay, so we'll dig down a little bit more. What does it mean to do dynamic development? It means that there's going to be something called a REPL, a read eval print loop in which you can type things and press enter and see what happens. I guess we should probably do that. So this is a little editor. It's kind of squashed in the screen resolution, but down below is the REPL. This is Closure in an interactive mode, and we can go and we can say plus one, two, three, and we get six. We can do other things Java like, I'll show you some more of that later. But the general idea is that you're going to be able to type expressions or in your editor, say please evaluate this. I mean, I can go up here to meth.pi and hit the key stroke that says evaluate this and see below, we get that. And that's kind of what it feels like to develop. I'm going to show you even more after I explain what you're looking at because I don't want this talk to be yet another people are shown Lisp and not having had to explain to them what they're looking at. So we're going to do that first. But you have this interactive environment. You can define functions on the fly. You can fix functions on the fly. You can have a running program and fix a bug in a running program. And that's not like being in a mode in a debugger where you have the special capability to reload something. It's always present. If you build an application with some access to the ability to load code, either a remote REPL connection or some way to do that, your running production systems will have this capability to have fixes loaded into running programs. In general, there isn't the same distinction between compile time and run time. Compiling happens all the time. Every time you load code, every time you evaluate an expression, compilation occurs. So that notion of phases of compilation is something you have to relax when you're looking at a language like closure. And I'll show you the evaluation model in a second. I talked a little bit about the introspection, but that's present. You're sitting at a REPL, closure is there, closure has namespaces, you can get a list of them. Closure has symbols, you can get a list of those. You can look inside the infrastructure that underlies the run time and manipulate it. And that's what I mean by an interactive environment. I just don't mean typing things in. I mean, there is a program behind your program that is the run time of closure. And that's accessible. If I say something that you don't understand, you can ask for clarification. I'm endeavoring to try to come up with the ideal way to explain the list to people who have never seen it. And this is what I've come up with, which is to talk about data. Lots of languages have syntax. You can talk about Java. You can talk about here's main and here's what public means and static. And then you can dig into arguments to a function and things like that. But we're going to start here with data, in particular data literals. I think everybody understands data literals from languages they're familiar with. You type in 1, 2, 3, 4, and you know that's going to mean 1,234 to your program. So closure has integers, they have arbitrary precision. They can get as large as your memory can support. And the promotion of small integers to larger integers while arithmetic is going on is automatic. It supports doubles as the floating point format. Those are doubles. Those are big D double Java doubles. When you type them in. They're right. Right. They're Java doubles, but they're the big D doubles. So one of the things you're going to see about closure is everything is an object. Okay. All numbers are boxed. At least until you get inside a loop where I can unbox them. But it's a language in which numbers are boxed. Unlike common lists where you have access under the hood to use tagged integers and tagged numbers, which is more efficient than allocating them on the heap, no capability of doing that in the JVM. There's been talk about it, them adding it, which is stunning to me. Apparently the guy, there's this guy, John Rose, at Sun who really does understand this very well. And has talked about all kinds of really neat features, which if they make it into the JVM would make it stunning. Like tail call elimination and tagged numbers. But in the absence of that, numbers are boxed so that everything can be an object and can be treated uniformly. You have big decimal literals. You have ratios. 22 over 7 is something. It's not divide 22 by 7. It's a number. It's a number that's not going to lose any information versus dividing 22 by 7 and either truncating or converting into a floating point format where you will lose information. So ratios are first class. String literals are in double quotes. They are Java strings. Same thing. Immutable. No conversions, no mapping. Being, again, being a native JVM language means I can just adopt the semantics of Java literals. I don't have to take strings from a language spec that said, for instance, they could be mutable. I have to force it on the JVM by having my own type and conversions to and from. So because I'm an immutability oriented language, I'm very happy with Java's definition of a string being an immutable thing. So closure strings are Java strings. Yes. Is there any way to work for a cent on the line you do this? In other words, to say there's a total of 1.234, or unless you know the center meter or something like that, you don't show, you don't know. No. Try Frank. Have you ever seen it? No. Oh, you will love it. You can add all kinds of units and figure out how many, you know, balloons of, you know, hydrogen it would take to move a camel across this much distance. It's amazing. Units for absolutely everything. Old, ancient Egyptian unit, it's really, it's fantastic. The guys are just a fanatic about precision, making sure you don't lose anything, but you can arbitrarily multiply all kinds of units. Everything is preserved. Everything works correctly. Fantastic. Frank. Frank, F-R-I-N-K. But no. Frank? Frank is a language for the JVM. It's its own language, but it's a lot of fun. I've seen the guy talking. He just, he has some great examples. You know, some involve how many belches it would take to, you know, move a hot air balloon to the moon and things like that. Okay, so we have string literals and double quotes. We have characters that are preceded by a slash, backslash. So that's a character literal, and that's a big C character, a Java character. Now we're going to get to two things that are possibly a little bit different, because they're not first class things in Java. One would be symbols, which are identifiers. They can't contain any spaces. They have no adornments. Symbols are used as identifiers primarily in code, but they can be used for other things as well. They're first class objects like strings. If you have one of these things, you can look at it, and it will be a symbol, closure laying symbol. Fred and Ethel are two symbols. That's correct. The other thing, closure has our keywords, which are very similar to symbols, except they always designate themselves. So they're not subject to evaluation or mapping to values by the compiler, like symbols are. So symbol might be something you would use for a variable. You could make Fred be equivalent to five. You could never make colon Fred be equal to five. Colon Fred will always mean itself. So when it gets evaluated, the value of the keyword Fred is the keyword Fred. It's sort of an identity thing. And they're extremely useful. They're very useful in particular as keys and maps because they're very fast for comparison, and they print as themselves and read as themselves. That will make a little bit more sense in a minute. There are booleans. This is different from Lisp, although there is still null as false, nil as false. But in addition, there are proper true and false, mostly for the purposes of interoperability. It ends up that you can't solve the nil becoming false problem. At least I couldn't. So there are true and false, and there for use in interoperability with Java, you can use them in your closure programs as well. But conditional evaluation in closure looks for two things. It looks for false or nil, which is the next thing I want to talk about. Nil means nothing. It also is the same thing in closure as Java null. Didn't have to be, but it is. So you can rely on that. So nil means nothing, and it's the same value as Java null. So when you get back nulls from Java, they're going to say nil. Nil is a traditional Lisp word. But I like it because also traditionally in Lisp, if you can say if nil, it will evaluate to the else branch, because nil is false. Nil is not true. So that's another literal thing, that nil. There are some other things. There are regex literals. So if the reader reads that, it's just a string regex, exactly the same syntax as Java's, preceded by hash, will turn into a compiled pattern. So at read time, you can get compiled patterns, which you can then incorporate in macros and things like that, which is very powerful. And shows how that delineation between compilation and runtime is a little bit fungible. Correct. And there's a good reason for that. And the reason is empty list is no longer as special as it was once you have empty vector and empty map. However, the sequencing primitives, the functions that manipulate sequences return nil when they're done, not the empty list. So that aspect of being able to test for the end of iteration with if is still there. So closure sits in a unique point. He's asking about aspects of closure that differ a little bit from common list and scheme. There's like a long standing fight between what should the difference between false, nil and the empty list be? Should they be unified? They are in common list. Should there be some differences? There are some differences in scheme. Closure actually does some of both. There is false. However, there are some differences. However, nil is still testable in a conditional. It does not unify nil and the empty list, which is a difference from common list. However, all of the sequencing or list operations, when they're done, return nil, not the empty list, which is an important thing for common list like idioms, where you want to keep going until it says false, as opposed to having to test for empty explicitly, which you would have to do in scheme. Does anybody know scheme here? But you know both, so you know what I'm talking about. For everyone else, I wouldn't worry too much about that because you wouldn't have presumed nil would have been the empty list, right? Probably not. Okay, so those are the atomic things. They can't be divided, right? That's what atomic means. You can't, a number is in a single thing. But there are composite or aggregate data structures. Enclosure and they're kind of the core abstractions of computer science. One is the list. And in this case, I mean very specifically, the singly linked list. And even more specifically, the singly linked list in which things get added at the front. So when you add to a list, you're adding at the front. The list is a chain of things, which means that finding the nth element is a linear time cost, right? It's going to take n steps to do that. On the other hand, taking stuff on and off the front is constant time, because that's the nature of a singly linked list. So it has all the promises, all the performance promises of a singly linked list with stuff at the front. And it's literal representation is stuff inside parentheses separated by spaces. There's no need for commas. You'll see some commas. Commas are white space enclosures. They're completely ignored. You can put them in if it makes you feel better or makes things somewhat more readable, but they're not actually syntaxed or not considered by the evaluator. So any questions about lists? Stuff in parentheses? Stuff in parentheses? Right. Well, these commas, the ones between 12345 and Fred Atollusi are actually English commas. But there are some commas. For instance, when we get down to maps here, you see commas inside the data structure. Those are ignored. Those are white space. I don't support any commas inside numbers. The printed representations of numbers enclosures are those of Java. In lists? No, in lists, they grow at the front. Cons A onto something makes A the first thing in that list. And that's true of closure, too. Yes? Absolutely not. All of these data structures are unique to closure. I'm only giving you some very high-level descriptions of their representation and their performance characteristics, but we're going to talk about that in a little bit later on. Is it based on the retail structure of lists? Absolutely not. All of these data structures are unique to closure. I'm only giving you some very high-level descriptions of their representation and their performance characteristics, but what we're going to find out later is all of these things, in particular, I'm talking about adding to lists. All of these data structures are immutable. And they're persistent, which is another characteristic. I will explain that in a little bit later on. These are very different beasts, and they have excellent performance, yet they're immutable, and it's sort of the secret sauce of closure. Without these, you can't do what I do in the language. That's correct. Again, how this gets interpreted, we're going to talk about it in a little bit. Right now, what you're looking at is a list of three symbols. You may end up within your program, a data structure that's a list of three symbols. You may pass this to the evaluator and say, evaluate this, in which case it's going to try to interpret, it's going to try to evaluate each of those symbols and find out its value and treat the first one as if it was a function. But we're not there yet. So that is a list of three symbols. The list at the end is a list of one symbol and three numbers. So heterogeneous collections are supported. In all cases, I didn't necessarily show them everywhere, but they are. It's not a list of something. It's a list. It can contain anything and any mix of things. Okay, with lists, the next thing is a vector uses square brackets. That should imply I would hope for Java programmers and people from that domain array, right? Square brackets mean arrays. Well, they do now. So a vector is like an array. In particular, it supports efficient indexed access. It's an expectation you would have of a vector you wouldn't have of a linked list. That getting at the 50th guy is fast. It's not going to be 50 steps to do that. And the closure vectors meet that performance expectation. Fast indexing. In addition, it's a little bit like Java util vector or array list in that it supports growing and in this case, at the end. And that also is efficient, as efficient as your expectation would be of a ray list. That's a constant time operation to put things at the end. Similarly, it can hold anything. The first is a vector of five numbers. The second is a vector of three symbols. All the collections can be heterogeneous. Okay, so far. So that's going to behave like an array in terms of being able to find the element quickly. And finally, as a core data structure, we have maps. And a map is like, well, it's like a Java map or any kind of associative data structure in providing a relationship between a key and a value. Each key occurring only once and having a mapping to a value. So the way they're represented is in curly braces. And they're represented simply as key, value, key, value, key, value. Again, the commas don't matter. So they're whitespace. They get eliminated. For instance, in the second map you see there, that's a map of the number one to the string ethyl and the number two to the string fred. You don't need the commas. And the expectation with the map is that it provides fast access to the value at a particular key. There are usually two kinds of maps you would encounter in ordinary programming languages. One would be sorted. Some sort of sorted map, in which case the access is going to be typically log n to find a particular guy, depending on how many things are in the map. Because they use trees or red, black trees and things like that. And closure does have sorted maps. The one you get from the literal representation like this is a hash map. And the expectation of a hash map is constant or near constant time lookup of values at keys. And that maps to hash tables. So what you have in the closure literal maps is the equivalent of a hash table. It's fast. Okay, so far? I think if I introduce another key, another key in this. Another key? A, A. It will be replaced. Do you want to? The last number replaced. Correct. There are only one instance of a key in a map. Is that your question? Yes. Yes, so if you were to say, the function that... No, I'm saying if I type it out like this. Yes? With the comma and up the cv with a again. Is it an error or is it just a replacement? It's probably a replacement. I say in the same thing, yes. I don't think it's an error. That's a good question. I might type it in later for you. Okay. Yeah, I mean... It's the same thing. Well, but there's no associated values. So Fred will be there. So let's talk about sets. The fourth thing I'm showing you here is sets. Sets are a set of unique values. Each value occurs only once in the set. And really the only thing the set can do for you is to tell you whether or not something's in it. There's no associated values. Just does the set contain this key? Do you have a question? Yes. There are sorted sets and hash sets. Same thing as with the maps. The sets here are hash sets. So no, the order is not retained. You can request a sorted set and the order will be the sort order. Does that answer your question? Okay. What is the test for equality? What is the test for equality? Equal. The equal sign is the test for equality. And equality means the same thing for everything in closure. It means equal value. You'll see that closure definitely de-emphasizes identity and completely. In fact, there is an identity function and I have yet to use it. Closure is about values. Identical contents are identical from by equals. That's made faster than you might imagine by caching hash values. But equality is equality of value in closure. And this immutability helps? Immutability helps certainly. Well, if you've ever read Henry Baker's paper on EGAL, closure implements EGAL. Finally. If you haven't, don't worry about it. So yes, equality is equality of value. All right. Yes. Hi, Rob. If you were going to Java, you would need an active Java? No, you can make arrays and you can interact with Java arrays that are arrays of either objects or native arrays. You can say float array and size and you'll get an array of floats. So you have the ability to do Java stuff. I'm going to emphasize the closure data structures because they let you do what closure lets you do. You can access Java, but if you start accessing mutable things, some of the things closure can do for you, we can't do. It doesn't mean you're not allowed to do them. But there's no point in me showing you how to interact with the Java, right? Except to show you the syntax, which I might later. So the last point about this is that everything nests. A key in a map can be another map. It can be a vector. Anything can be a key or a value. Because of this equality semantics, there's no problem having a vector or a map whose keys are vectors. That's perfectly fine. So if you needed to use tuples as keys, you know, pairs of things as keys, that's just completely doable. Well, you can get the hash of a vector. Correct? Right. Well, it depends on what you're doing. I would imagine that really complex structures are not frequently used as keys, but they could be. Can that be helped? Yes. The fact that these are hash by default means that once and once only the hash value of some aggregate structure will be calculated. And that will be cached. So there's a quick hash test. Otherwise, we do the deep value check. But again, I don't think you're going to encounter complex data structures as hash values that often, but using kind of small things like tuples or other small maps as keys is tremendously useful. It's really, really handy to not even have to think about that. I think we got one other closure program arrived. Who can possibly attest, independent of me, how closure's performance is? How's closure's performance? Fine to me, but I've actually been showing all of this. Right. Well, now there's some extra numeric goodness in there. But these data structures are pretty good. What's the reality? The reality of these data structures is I've tried to keep them all within one to four times a Java data structure, the equivalent Java data structure. In other words, hash map, vector. Well, similar lists are pretty straightforward. So they're within striking distance. The B side is in a concurrent program, there is no locking necessary for use with these data structures. If you want to make an incremental change through data structure in a certain context, there's no copying required to do that. So some of these other costs that would be very high with immutable data structure vanish. So you have to be very careful in looking at that. The other thing that's astounding to me, at least, is that the lookup time, again, the add times are higher than hash map. But the lookup times can be much better because this has better hash cash locality than a big array for hash table. Okay, we're all good on this. I probably have to move a little bit quicker. Yes, more quickly. There is destructuring. Yes, I actually won't get to talk about that today, but there is destructuring. There is not pattern matching. Okay, but there is destructuring to arbitrary depth of all of these. Destructuring means a way to easily say, I want to make this set of symbols that I express in a similar data structure, map to corresponding parts of a complex data structure on past. Clojure has that. It has some really neat destructuring capabilities. All right, so what's the syntax of closure? We just did it. I'm not going to talk about semicolons, curly braces, you know, when you have to say this, when you have to have a new line, or anything else. Because the structure of a closure program is a data structure or a series of data structures. There is no other stuff. There are no rules about where things go. There are no precedence rules. There's nothing else. You write a closure program by writing the data structures I just showed you. That's it. I'll show you. So you write a program by writing data structures. The data structures are the code. That has huge implications. It's, you know, it is the nature of LISP. There's a fancy name for it called Homo Iconicity. And it means that the representation of the program is done in the core data structures of the program. Which means that programs are amenable to processing by other programs because they're data structures. So I'm not going to talk anymore about text-based syntax because there is no more. Now, many people claim of LISPs, well, LISPs has no syntax. And that's not really true. It doesn't have all this little fiddly character syntax necessarily. There is syntax to the interpretation of the data structures. You know, in those, you're going to see a lot of lists. They have different things at the front. The thing at the front will tell you the meaning of the rest. All right. So let's talk a little bit about evaluations. How does this all work? This is, we should all know, from Java or many other languages like Java. It types our program into a text file and we save it. And then we send those characters of that text to the compiler who has a very involved, you know, abstract syntax tree and parser and lexer that interpret the rules of the language. This is what constitutes a character. This is what constitutes a number. And then furthermore, you know, if you've said if and you put parens and then you said some stuff and you put a semicolon and you're still in this construct called if, things like that. It knows all about that and it deals with the text. And it will tell you if you've met the requirements in terms of it being a valid program. And then it will turn it into something that can run. In the case of Java, that something will be bytecode. And it will go into a class file or a draw file. We know this. And then there's a separate step, which is called running. We take that stored executable representation and we ask it to happen. Usually, in this case, we'll say, you know, Java dash something, class file, and it will run. And it will run and then it will end and it will be over. And we could try again if we didn't like it. That's the traditional edit compile run. Be disappointed, start over. Oh, correct. I'm talking about the development process. But yes, the runtime is just that long. Until you realize it's not working and you have to ask everybody to please wait for our downage while we fix it. That's the difference. If you read about Erlang, which is getting a lot of press, they'll tell you about phone switches and how that's really not allowed. And Lisp was doing this for a very long time, this kind of live hot swapping of code and running systems. I think it goes more, in this case, it's less about the production thing than it is about what's the nature of developing a program. Because as a developer, you know, seeing it run and saying, ooh, that was bad. I wonder what happened. I wish I had run it in debug mode. I wish I had put a breakpoint somewhere interesting. And I'm really sad that I spent an hour calculating that data and dropped it on the floor because I have to do it again with the breakpoint in. That's a lot different experience than keeping your program around and having that data stay loaded and fixing your function and running it again without starting over. So that's what happens in closure. You take the code, text could be characters. There is character representation and what you showed there can be represented in characters in ASCII. It does not go first to the evaluator. It goes to something called the reader. And this is the core part of what makes something a Lisp, which is that the reader has a very simple job. Its job is to take the description. I just told you, you know, keyword starts with a colon and a list is in parentheses and a map is in curly braces and it's pairs of stuff. Its job is to take those characters and turn it into data structures. The data structures I described, you start with the parent, you say stuff, you close the parent, that's going to become a list when the reader is done with it. You start with square brackets, that's going to become a vector when the reader is done with it. So what comes out of the reader are data structures. And what's unique about a Lisp enclosure is that the compiler compiles data structures. It does not compile text. It never sees text. What the compiler gets handed is maybe a list with three symbols in it or a vector with five numbers in it. That's actually what the compiler has. It has a data structure in hand with actual data in it, not text. And it compiles it and in the case of closure, it is a compiler. There are many, well, there are actually many lists that are interpreters, but many people believe that Lisp is interpreted. It's certainly easy to make an interpreter for Lisp that would take those data structures and on the fly produce the values they imply. But closure is a compiler and in particular closure compiles those data structures to Java bytecode right away. There is no interpretation in closure. So it's a compiler that produces bytecode just like Java C does. And because it's an interactive environment, it presents that bytecode right away to the JVM to execute. And it executes right away and you can see the effect. When you're in the REPL, you have AVM, right? You have one thing. So yes, your environment is your program. Your compiler is in your program. Yes. Yeah, most commercial lists give you tools to take out the compiler in production, mostly because they don't want you giving away their compiler. Normally, there's no reason to prevent that because it's a useful thing to have, particularly when you want to load code later to fix problems. You're going to need that compiler there. So in closure, there's no strip out the compiler option. We'll see that there is a core of closure. The data structures are written in Java. The special operators are written in Java. And then most of the rest of closure is written in closure. There's no native code. There's no native code. Closure is completely a pure Java project. There's no native code. There's no C libraries. It's all Java, either generated by Java itself or generated by closure. It does not turn off the verifier or anything like that in order to get performances. There have been some schemes that tried to do that. Closure is completely legit that way. So when we have this separation of concerns between the reader and the evaluator, we get a couple of things. One of the other things we get is we don't have to get the text from a file, right? We can get it right from you. You just saw me type right into the REPL, an expression. Never went through a file, never got stored. So the first thing you get is this kind of interactivity of you can just type in stuff and say go. That's a big deal. I mean, if you've been programming in Java or C++ long enough to remember when the debuggers didn't give you the ability to evaluate expressions at a break point, you can't remember how hard that was. You always have that capability here to have expressions directly evaluated. What else do we get from this? Well, we get the ability to skip the characters completely. For instance, it's quite possible to write a program that generates the data structures that the compiler wants to see and have it send them to the compiler to be evaluated. Program generating programs are a common thing in this kind of an environment. Whereas this kind of stuff when you're doing it with text is really messy. By the way, what observation does Charlie actually give a good way to make the same? The art forms I know, because of compliance requirements that they have, we might be very comfortable with code producing stuff going into a reader or a programmer against a programmer that produces stuff. But is that option of saying it's always like the first in this production environment in the influence of COVID to be as a security problem? Well, I mean, that's a security policy thing, whether or not you expose this in a production system. So I'm talking about you could if you needed to. You could have that over a secure soccer channel and have it be just an administrator who knows what they're doing, have that capability. Because the alternative is downing your system. If you don't have that, and of course, opening this in a production system, that's completely a policy thing. It has nothing to do with the language. Except if your language doesn't let you do it, you can't do it. That's fair. So it does. The other thing is that these data structures, you might write this program and have this happen directly. Then you might say, I like this program. Let me take those data structures and there's a thing called the printer, which will turn them back into that, which you could store and so they could sign off on and say this is the canonic program, which our program generated that we're going to use. And we'll lock that down and do whatever. Yes? So are the data structures physical files? No, they're in memory data structures. The ones your program would see. So, you know, an instance of closure laying persistent vector to the compiler. The compiler's got to deal with it, figure it out. So there's one more thing that this allows, and this is the secret sauce of all lists, including closure, which is what would happen. I mean, it's fine to sit standalone and write a program that generates a program. But what would happen if we said, you know what? We're handing these data structures to the compiler. It would be great if the compiler would let us participate in this. If they could send us the data structures. When we write a real program, a very small program, and give it back different data structures, then we could participate very easily in the extension of our language. Because this compiler, it's going to know how to do with those types of data. It's going to know what to do with the vector. It's going to know what if means and a couple of other things. But there'll be new things that we'll think of that we'd love to be able to set. When you have something you'd love to be able to say in Java, what do you have to do with it? You have to beg, son, and wait for years and hope other people beg for the same things and you get it. That's it. You have no say. You have no ability to shape the language unless that's completely not what it's about. It's about getting you in the loop. And in fact, the language itself has a well-defined way for you to say, this is a little program I'd like you to run. When you encounter this name, I don't want you to evaluate it by the way. I'd like you to send me that data structure. I know what to do with it. I'm going to give you back a different data structure and you evaluate that. That's called a macro. And it is what gives lists and closure syntactic abstraction and syntactic extensibility. Can that happen in the context of the namespace? Yes, it can. There are namespaces in enclosure and they allow me to have my cool function and you to have your cool function. Cool function. Yes. So that's what makes Lisp amazing. It's something that I won't have time to dig deeply into tonight. If you can come away with at least the understanding that that's how it works, that's how it's possible. And the fact that these are data structures here makes it easy. You could theoretically say, oh, I could write something and if the compiler could hand me the abstract syntax tree, I could navigate it with some custom API and do whatever. It's not nearly the same, though, when what the compiler is handing you are those three data structures. I just showed you that every program knows how to manipulate and has a wildly huge library that directly can manipulate. So that's how Lisp works. I'm going to try to speed it up a little bit. In closure, unlike Java, everything is an expression. So you know in Java there's a difference between declarations and statements and expressions. There's no distinction in closure. Everything is an expression. Everything has value. Everything gets evaluated and produces a value. Sometimes that value is nil, not particularly meaningful, but everything is an expression. So the job of the compiler is to look at the data structures and evaluate them. There's a really simple rule for that. It's slightly oversimplified, but in general you can understand it this way. All those data literals I showed you, right, symbols, numbers, character literals, vectors, maps, sets, are all evaluated by the compiler to represent themselves, except lists and symbols. Lists and symbols by default are treated specially by the evaluator. So when it reads a list of symbols in particular, it's going to do some work. It's not just going to return the list of symbols to your program. It's going to try to understand them as an operation, which I'll show you in a second. So symbols are going to try to, the compiler is going to try to map to values, like variables. You know in a variable you can say int i equals five. Later in your program in Java you say i. Java is going to try to figure out, oh, that's five. That's the i you set up there. Same thing in closure. When you use a symbol in your data structure, closure is going to try to find a value that's been associated with that symbol. It can be associated with it through a construct called let, sort of the way you create a local name, or through def, which is the way you create a global name. So before it's a list, and it's going to say this is an operation of some sort. I have to figure out what to do with a list. So how does that work? Well, again, we said what's the data structure? It's friends, it starts with something, it may have more stuff or not. But from the evaluator standpoint, all that matters is the first thing. The first thing is the operator, or op. That's going to determine what to do. And it can be one of three things. It can be a special op. This is magic. This is the stuff that's built into the compiler upon which everything else is bootstrapped. So some things are special. I'm going to enumerate them in a second. It can be a macro like we saw before. There's a way to register with the compiler to say, when you see the op, my cool thing, go over here and run this function, which is going to give you something to use in place of the my cool thing call. And the third thing it could be is an ordinary expression. It's going to use the normal means of evaluating an expression. And it's going to say whatever value that yields on a treat as a function and attempt to call with the calling mechanism of closure, which is not limited to functions, but it's main purposes for functions. So for people who know lists, closure is a list one. It is a list one that supports def macro well. And the use of namespaces and the way back quote works makes that possible. And everyone else can ignore that. In a way, back legs pull the bunch. An expression in the genome is a function as opposed to it's the function. Well, what it's going to encounter is it's going to encounter a list and the first thing is going to be the symbol Fred. Fred is not a special operator, no Fred enclosure. Let's say no one has registered a macro called Fred. Then it's going to use the rules we said before. What about symbols to find the value of Fred? Where hopefully someone before has said, Fred is this function. It will keep evaluating. It's going to evaluate that expression. But there are other function like things or callable things in closure in addition to functions. I'll show you that in a second. So let's dig down into each of these three pieces. Yes. It doesn't encounter any one of those three. You have an error at runtime. It'll say it's not a function. Effectively what will happen is it will say this is not a function. If you said Fred is deaf Fred one, so Fred is the number one and you've tried to call Fred or use Fred as an operator, it's going to say one is not a function. Probably with a not very illuminating stack trace. Okay, so special operators. There are very few. I think one of the things that's really cool about lists and it's also cool about closure is you can define most of them in terms of themselves. One of the great brilliant things that John McCarthy did when he invented lists was figure out that with only I think seven primitives, you could define the evaluator for those seven primitives and everything you could build on them. Like the core of computation. It still gives me goosebumps when I say that. It is a beautiful thing. It really is. And if you've never looked at the lambda calculus or at least from that perspective, it's quite stunning. These early papers are just great and they're just brilliant in a transparent way. So let's look at a couple. I'm going to show you two and then I'm going to list the rest. Deaf would be one. How do we establish a value for a name? There's this special operator called deaf. It takes a name. Now that name is going to be a symbol. Obviously, that can't be evaluated, right? Because the whole purpose of this special operator is to give it a value. If the compiler were to use normal evaluation, the name position, you'd have a problem because you're trying to define what it means. How could you do that? So one of the things about special operators that you have to remember, and it's true of macros as well, is they can have non-normal evaluation of their arguments. Like, the arguments might not be evaluated. In fact, deaf doesn't evaluate the name. It uses it as a symbol and it associates that symbol with the value. It does not evaluate the symbol. So this is a simple way to say, if I say deaf name, some expression, the expression will be evaluated, the name will be mapped to that value or bound to that value. When you later go and say name, you'll get the value. It was used to initialize it. You actually can do that more than once. You shouldn't do that more than once unless you're trying to fix something. In other words, deaf should not be used as set. But you can use deaf to define a function and later you can use it again to fix it. So the things that are defined by deaf are mutable at the root and it's probably, you know, it's the only escape hatch for that dynamic change enclosure. That's not governed by transactions or some other mechanism. Okay, so it establishes a global variable. Again, there are namespaces. I don't have the time to talk about them, but it's all subject to a namespace. If you're in a namespace and you define the name, then it's in your namespace. It's distinct from that same name in another namespace. Namespaces are not the same as packages in CommonList. They're very much different in particular. Symbols are not inherently in a namespace. Symbols have no value, sell, they're not places. They're just labels. And there are vars, which are the places more like CommonList symbols. If is another thing that's built in. And if you think about if in your language, which you may not have ever done. If you thought about if is, why couldn't if be a function? Why can't I say if some test expression, some expression, some else expression? Why can't if be a function? I mean, it looks like a function. Well, it doesn't actually look like a function in Java, but why can't it be a function? It should only evaluate one of these two. That's why. And a function evaluates what? All of its arguments. So if you try to write if as a function, you would have a problem because functions evaluate all their arguments. So if has to be special, and if is special in closure too. It evaluates the test expression. And then, depending on the truth or falsity of this in kind of a generic sense, in closure, if this is nil or false, it will evaluate that. If it's anything else, it will evaluate this. But it will only evaluate one of those two things. It must have a false. No, it doesn't have to. The else can be missing in which case it defaults to nil. So if is another example of something that has to be special. It can't evaluate all of its arguments. And then we have these others. In fact, this is it. There's something that defines a function. Something that establishes names in a local scope. A pair of things that allow you to do functional looping. To create a loop in your program. Something that lets you create a block of statements the last of which will be the value. It allocates a new Java thing. Access to members of Java thing. Throw, try, do what you expect from Java. Set, will rebind a value. And code bar are kind of a special purpose for list manipulation things. So I'm not going to get into them tonight. Question. Is that the entire list of? Yeah. So what's the equivalent of death macro? Death macro is bootstrapped on this. So there's a key border. Oh no, there is death macro. It's defined a couple of pages into the boot script for closure, which I might show you. We have some time. Yes. I'm just intrigued. The reason for the explanation point of the set is it trying to say something to the program? Yeah, this is bad. Why are you doing this for? Yes. No, it ends up that enclosure. Macros are functions. And so there's just a way to say this function is a macro and it will be treated as a macro instead of as a function. Okay. So that's a tiny set of things. In fact, when you take out the stuff related to Java, it's an extremely tiny set. I don't think I made it down to seven. One, two, three, four, five, six, seven, eight. I have more than more properties. But I don't have dozens. So how could this possibly work? This is not enough to program with this. No. No, no, no. So we need macros. Okay. There are plenty supplied with closure. And what's beautiful about closure and LISPs is you have the same power that I have to write macros. When you see the kinds of things that are implemented in closure as macros, you realize the kind of power you have as a developer because you can write those same macros. You could have written them. You don't have to wait for me. I'm not son. This is not Java. You want to do something. You have something you want to express a certain way. You want to extend the language that way. If you can do it with a macro, you can do it without contacting me or asking me for the favor of adding a feature for you, which means the language is much more extensible by programs. So let's look a little bit about how they work. If we remember, we're getting data structures passed in the compiler. So it looked at the first thing, and somehow there's a way, and I can't show you that tonight, to say this name designates a macro. And associated with that name, then, is a function. The function expects to be passed the rest of the stuff that's in the parentheses. So we had this cool function, my cool macro. Maybe it expects to be passed two things. The things that gets passed are not evaluated. It gets passed the data structures that the compiler got passed. Because the compiler is going to say, you told me you know how to do this. Here are the data structures. Give me back the data structure I should be processing. So it's a transformation process where the macro is handed the data that's inside the parentheses, as arguments to the function that the macro is. It will run any arbitrary program you want to convert that data structure into a different data structure. You can write macros that look stuff up in databases. That go and ask a rule-based system for advice. Most are not that complicated. But the thing is, it's an arbitrary program transformation. There's not a pattern language. There's not a set of rules about this can be turned into that. It's an arbitrary program, a macro. And in this way, it's like a common list macro. That, given the data structure, gives back its own replacement. Replace me, the expression that began with me, with this. And then keep going. Which may yield another macro and another round of matter. It may yield something that already knows how to process. Yes? So would it be correct to say that a general macro is happening around that problem? No, this is happening at compile time. This is part of compilation, right? The compiler got handed this data structure. It said, oh, it begins with the macro name. Hands it to the macro. It comes back. That transformation occurs. It keeps compiling. Then you get bytecode. After you get bytecode, there's no more talking to the macro. So macros replace themselves with another data structure. And then compilation continues. So we can look at a macro. You'll notice on the list of primitives, there's no or. Or is not primitive enclosure. And in fact, if you think about or, or is not primitive. Or is not a primitive logical operation. You can build or on top of if. Right? The or, what I'm talking about is like the double bar or in, in Java in that what happens if the first part tests true, what happens to the second part? Not evaluated, right? It's still got that magic thing, but if already knows how to do that. If already knows how to do a conditional evaluation of only one of two choices, which means we can define or in terms of if. And so this is what happens. So or is a macro. When it's expanded by the compiler, it, it returns something like this. I'm going to say or X or Y. And this is what comes back. Another data structure begins with the let, which we haven't seen so far, that says it takes a set of pairs of things to make this mean, mean this inside the scope of the let. Like a local variable, except it's not variable. You can't vary it. But it has the same kind of scope. So it says let's, let's do that. And the reason why it does it is because this is going to be some expression. It looks like X here, but it could be like a call to calculate some incredibly difficult thing that's going to take an hour. In which case, I finally want to repeat that more than once in my expansion, because it would calculate that thing twice. So we're going to take whatever that expression is, put in here, assigns that into this variable name, which is made up because, because obviously you didn't pick this name. It's a good machine pick name. So it makes a variable. And then it says if that thing is true, right, and you took an average calculator in this, right, we have that idea. If that's true, return it. If, right, I know, isn't it going to do this? If this is true. Otherwise, it's going to do what? And that's the implementation of OR. If the first thing is true, it returns it. Well, in fact, in Java, you don't get a good value, but in Clojure, you get the value that was true. Then the invocation of any function can both return a value in a true form or you interpret certain types of values. All values can be placed in a conditional, not just Booleans, and it's subject to the rules I said before. If it is nil or if it is false, you'll get the else expression evaluated. If it is anything else, seven, the string fred, anything else is true. So Clojure, like most LISPs, allows any expression to be evaluated as the conditional test. Here. He's also getting the part that there are no spiting effects of the evacuating effects. No, I talked about that. Let's say this x for now. A well-written macro will make sure it only gets evaluated once. I could have put if x, x, y, yes? No, this is the answer to your question. If it said if x, x, otherwise y, then if x had side effects, it would happen twice. Then we make this not a well-written macro. This is a well-written macro where it needs to use that expression twice, which means it's going to bind a temporary variable to the value, which means x only happens if it appears only once here. So if it had a side effect, it would happen only once. If it took a long time, it would take a long time only once. Simple as it is, I still have this simple question. Let appears to take three arguments. Let actually takes, at the top most level, it takes n arguments. The first of which has to be a vector of pairs of things. You can have multiple expressions. Name, value, name, value, value in a letter. This is one symbol there. Let is a block, so it actually can have multiple expressions. In this case, there's only one. And then it just does whatever it's next. It returns the value. Well, this is a macro, and all it's going to do is get the compiler back this, and the compiler has to keep going with this in hand now. Yes, I'm just trying to figure out what led you. Let will, led establishes this name to not this value. Then, when led runs, the series of expressions inside led run, and the last of them is the value of the led expression. In this case, there's only one expression inside the led. In this case, there's only one expression inside the led. So the value of the if expression is the value of the led. Which is what we want, we want this to mean or. And that's the scope. This is the end of the scope over here. And this parent matches that value. That's what I was noticing. Yes, and well, it's one of the beautiful things about the system, which we'll see clarified in a moment, is that all expressions are bound. So we don't have a lot of complexity with precedents and terminators and things like that. It started with the parent, it ends with the matching parent later. Big Boolean? In fact, it has to be big Boolean false. If it's coming from Java, I test to make sure, because an improperly constructed big Boolean may not be Boolean dot false. New Boolean is wrong. And in fact, not only is new Boolean wrong, but the reflection API in Java uses it exactly that way. So it returns multiple different values of big Boolean false. I have a patch that looks for that because I got bit by that already. So it will make conversions of big Boolean false that aren't Boolean dot false into Boolean dot false. I'm sorry, I didn't write Java, I only wrote closure. But the point here is that this seems like a primitive thing, like if the language doesn't have it, you're in trouble. It is not. If I had somehow left out OR, you could have added it. You could have written the macro that does this job and added OR to closure. I'm sure I forgot some things in closure. You could add them. Many things. In fact, we saw how tiny the special operators list is. And OR, con, all kinds of things are built on top of these things as macros and OR functions. And after the point of the special ops, you can add a special operator, but you can add a macro. Now I've got more than 50,000 for the question. So I get this, this is great. So something to build a bunch of macros in these is that it's a powerful, another bunch of macros. Somebody else has got this smoking advantage of this language. People sort of come down to the industry for developers and the industry for locals in. There's a one-time error and I get a stack trace of it going in. You're going to get a reference to the expansion, the inside of the expansion. That can be challenging. It's still an area. I think that one of the things that's good about a list is because you have the ability to work in the small and to say, I just wrote this little component of this thing. I'm going to run this right now. I don't have to wait till the big program that contains this runs. Your ability to do that immediate unit test to make sure that thing is working is good. On the 50,000 foot level, propagating up from macros the source of the problem in the macro is something that's being worked on. Some compilers do it pretty well for common list. It's an area I hope to enhance in closure. But it will always be more challenging than a function. And that's why macro writing is not for newcomers or the inexperienced part of the team. It is language design. It definitely is. On the other hand, without it, you're limited to the abstraction capabilities of functions, which are limited. Think about how much you repeat in Java. Think about how much code you repeat to close files in Java. Think about it. Think about how many times you've written the exact same thing. Having your IDE spit it out is a little bit handier. But when you decide, oh, I need to change my policy about doing this. I want to check something else. All that generated code is not amenable to fixing. So those kinds of things that can't be... whose redundancy can't be eliminated by functions can be eliminated by macros. And that's something you want to do. Because the B side of this is, if you're doing all that stuff by hand, yes, it's transparent. You get this debugger error. Okay, you did that by hand. Where? All over your program. Because you didn't have a macro that generated it. You don't have one place to fix. You have n places to fix. So there's a... If you have n places to fix, where you say, oh, I made this mistake everywhere. But you still have to find everywhere you have to fix it. And these things are idioms. Everybody that programs in Java has to know this. These idioms are only by convention and they have to be manually replicated. It is an attempt to address those cross-cutting concerns. But it's still unproven as to whether or not people will describe them... those things in advance. Because what tends to happen is that you don't know it. And then you say, oh, I'm doing this all over the place. And then will you implement an aspect? Is there a policy? Is there a way to describe an aspect that will insert it everywhere it's needed? That's a very challenging problem. But the problem of this summary is little easier with aspect-oriented programming. I mean, I think aspect-oriented programming is interesting, but it's different. So anyway, the trade-off with macros, yes, it may be less transparent there. On the other side, when you fix a macro, you fix every usage of the macro. Finally, we get to the easier thing. I mean, start with special operators and macros, mostly because that's the evaluation order. But functions exist, and they're kind of straightforward. The first thing about functions you need to know is that they're first-class values. They're values like any other. Methods in Java are not first-class. You can't put a method into a variable. You can't pass a method to a function. There are special things in LISPs. And in fact, in most dynamic languages today, functions are first-class, which means the function is a value. So I've defined 5 to mean 5. And of course, I don't need to do that. But I'm showing you a depth of a symbol to a value. Now I'm going to show you a depth of a symbol, as if you are, to a value, which is according to one of the other special operators called fun. And what fun does is it creates a function object. This is going to turn that code into something that gets compiled into a function that takes one argument and multiplies it by itself. It's a regular function. It's going to be an instance of a Java interface that takes an argument. It's a real, regular method in Java. You'll have an invalidarity problem. OK, I need to move a little bit more quickly. So let's hold the functions for a little bit. Let me move forward. So this fun, I can't describe all of the features of fun. It's an exciting and rich thing. But this fun that we can take as being fun is a special operator. It takes a vector of the names of its arguments, the simplest way of understanding. And then it contains a set of expressions, which will be the body of the function. The last expression is the value returned by the function. There's no return statement in closure. So when we say square five, it returns 25. This is a function call. Again, we said, what does it do? It says, is square a special operator? No. Is it a macro? We're going to say, right now, it isn't. So what's the value of square? It's this function object. OK, call it. And pass it that. The value of that, because the arguments to functions are evaluated. So it's going to pass square the number five. Square is going to multiply by itself and return 25. So functions are first class. There are other things that are like functions. In other words, the compiler says, can I call this? The answer is true of funds. It's also true of other things. In particular, one of the neat things about closure is that maps are functions. Because if you think about maps mathematically, they are functions. Maps are functions of their keys. Given a key, a map should return the value of that key. And it does, in closure. So maps are functions. Sets are also functions. Vectors are also functions. Vectors are functions of their indices. That's cool stuff. And when you see idiomatic closure, some of it is quite beautiful because of that relationship. So we'll try to summarize this. Things that would be declarations or control structures, or function calls, or operators, or whatever. In Java, all are uniform in closure, or any list. In that, there are lists where the operator is the first thing in the list. So we've reduced all of this variation here to something uniform. So look at each one. int i equals 5 establishes i as the name, whose meaning is the value of 5. That i does that as well. Where in this does it say it's a definition? Whatever. Some rule about the shape of this thing says it's a definition. In closure, that says that's what it means. If x is equal to 0, return y. Otherwise, return z. When does this end? I'm showing the rest of the program. Is this done? Got me? You don't know? I don't know. Because it could say else, else, else if. I couldn't say it has to say else if, and then it could say else. We have to keep looking forward. We could not have had an else. It's not closed. In addition, without these returns, it doesn't yield a value. This is a statement in Java. There is an if conditional, which is an expression of two different things. In closure, if, against first, we know we're dealing with if. We saw the syntax. It takes three things. What's the question mark in 0, the question mark in closure? That's a function name. You can have question marks in names. Closure is much more liberal about the symbols that can appear in names, but not completely liberal. Because I need some symbols for myself. x times y times z. What are these? Mathematical operators. Again, another special thing about Java. And they can go in between things. And there's precedence rules. All other kinds of guk, right? Closure is wet. It's a beginning. I don't have to look anywhere. I don't have to look in the middle or read or look for semicolon. What's happening? Multiplication, first. Also, you'll notice multiplication can take multiple operands, more than two. It's not just a binary operator. It's an n-ary operator. Foo x, y, z. This is what? Function call, right? Foo x, y, z. People complain about the parentheses. List how many parentheses difference. None. You move it from here over there. Same thing. Same thing. I don't know what you're talking about. And you're not going to see curly, curly, curly, curly, curly, curly, curly. Yes, you may see friends like that. But that's better, I'm telling you. It keeps your program near itself. You don't have to go down to the next page to see the next step. And then this member access, I'm going to talk more about the Java interoperability. But same kind of thing. Different number of parentheses? No. Different number of dots? No. But dot goes first, because dot tells Clojure we're doing some Java stuff here. That has its own special interpretation, because dot is a special operator, we saw before. So there's a tremendous uniformity. There's a lot of value to that uniformity. I know a lot of programming languages. And every time I have to learn the arcane, whatever the rules are, syntax, and this thing next to that means that, and this character means this, and you can have a semicolon here, but not there, and it better be indented by the same amount, or whatever it is. I really get angry now, because there is no reason for that. It is not better than this. And if you use this for any amount of time, you will not disagree, because there's no one who has, who does. But it also has to have its biggest differences in some ways. Who got far, far more cool for an X in Java? How do I get the expression? I'll show you later. If I only have another hour, I have to go much faster. Everybody ready? So let's hold the questions until a question time, unless you're really confused, but just general interest things will hold, because I may cover it. One of the things that is typical about a Lisp is that it has a rich library for manipulating lists. But it ends up that, I think, in my opinion, it's a shortcoming of Lisp's traditionally, that those functions are limited to a particular data structure, which is the singly linked list. Because the functions that underline that abstraction are broader, and they're three of them. The first is, I'd like to obtain some sort of a sequence like thing from some sort of collection like thing. That's an abstract way to say something. Given that sequence like thing, I want and need only two functions. One is to say, give me the first thing. The other is to say, give me the sequence that is the rest of this sequence. In the case of seek, if there is no stuff, it returns nil, because nil means nothing. Which means you can say seek call, and you can put that in an if expression as a test thing. And because nil returns logical false, you'll know there's nothing to do. That's an important idiom of common Lisp, closure preserves unlike scheme, where you have to say empty all the time. If it's not empty, you will get back an object. That object only makes two promises. You can call these two functions on it. This function promises one thing. There will be a first element, because we're already covered if there's not a first element here. So if you say first of the seek, and this is not nil, it means you have a seek, you get back a guy. The first thing in the sequence. The second thing you can do with the seek is you can call rest on it, which says, give me the sequence that represents the rest, not including the first thing. Of course, if there's no more, what should we get? Nil, because we said here, nothing. If we have nothing, we get nil. Otherwise, we're going to get another seek. This is an extremely abstract way to talk about lists. But the advantage over common Lisp and scheme lists is they would promise that the return value of this thing is a consel. And that is a real limitation, because now I can make seek work on absolutely everything. Seek works on lists, because they have the structure. But it's possible to create a seek object if you think about iterators, and I want to make this analogy extremely weakly. There's a way to walk through a vector. Similarly, there's a way to walk through a map. There's a way to walk through a string. There's a way to walk through a file. And it ends up that seek is supported on all those things. You can walk through Java arrays, all the closure collections, strings, files, everything. And you can use these two operations to move around. This abstraction of listness, which I call a sequence because a list is more of a concrete thing, is bound to lists in most Lisp's. Wow, this is hard to say. But it's not in closure. And it's, I think, one advance of closure in the Lisp world, which means that you can apply these things to everything. So what does this mean? Well, this is kind of primitive. I mean, walking through step by step. But what it means is that you can build a library on top of these primitives that provides a lot of power for manipulating data structures without loops. I'm just going to show you a tiny, tiny little bit. But it should give you a feel for what it's like to program in closure if you would think about what it would take to do these things in Java. For instance, I have a set of things. I'd like to have everything except the first two things. We say drop two from whatever the collection is. That happens to be a vector. It could have been a list. It could have been a string. We'll drop the first two characters. Whatever it is, there's a way to abstract out the notion of walking through it. Drop means leave out that many and give me the rest as a sequence. Take is the opposite. It says, only give me nine of these things. Look at the second function, cycle. Cycle is a function called, it takes 1, 2, 3, 4. In this case, it could take any sequenceable thing. It returns an infinite list, an infinite sequence of those things around and around in a cycle. How could it do that? Isn't that going to chew up all the memory of my machine? Cycle sounds like a really scary function. It does that because if we go back to the definition of this, is there anything about the way I describe the operation of these things that says that the rest of this thing has to exist? I could make up the rest right when you ask me, right? And how much of it would I have to make up? Just one more thing. The thing I give you has to have one more thing in it, and it's I'm OK. It could delay the calculation of the next part until the next time you call rest. That's called laziness. And in fact, all the sequence stuff I'm showing you for closure is lazy, which means that you can write sequence functions that return infinite sets. And you can use them, as long as you don't try to consume all of them, you can consume a little bit of them. So in this case, we're making an infinite sequence out of 1, 2, 3, 4, or taking the first nine things from it. This looks like a weird abstract thing, but I've had plenty of programs in reality. I've had to do exactly this thing, round robin. You can use it to round robin, work dispersal. You can use it to get distributions. In cycle, it seems like some theoretical isn't as cool you can make an infinite sequence. But it really has utility. It ends up in real programs. And it goes on and on. Interleave does what you think. One from this sequence, one from that. Makes a new sequence. Again, one of these could be infinite. You'd only make as much of this as you needed to match the length of the non-infinite one. Partition, split this up into pieces. Think about the loops to do this stuff. And in Java, you have to write everyone, every time. Never mind the laziness part. Now we get to a more interesting function, which is map. Now we're not talking about map the data structure. We're talking about map a function, which is, again, from this list land, which says, take this function. So the first argument of map is a function value. And apply it to pairwise, or however many sequences I give you, the elements of the sequences I provide. So in this case, we're going to call the function vector. And we're going to call it on a and one. Then we're going to call it on b and two, and c and three, and d and four, and e and five. And vector makes vectors out of whatever you pass it. So we're mapping vector across this pair of sequences to vectorize corresponding elements of those sequences. We get a set of data structures back out of this. So map is a very powerful thing. Instead of saying, for each blah, blah, blah, do this and stick the answer into this collection, you say, just map this function across this data. And it'll give you back a set of new data, the result of applying that function to each thing. You can also apply it against multiple sequences. That's what this is doing. Maybe I shouldn't have done something this complex here. Apply is also very interesting, and it's a unique thing to lists and languages that are dynamic. Apply says, I'm also going to pass you a function. What I want you to do is take the next expression and figure out the sequence it yields, and then use that as the arguments to a call to this function. So we're going to apply the function stir, and stir says, given any set of things, turn it into a string. Turn each part into a string, and can cat and make them all back together into a string. So we want to put that together, and what interpose does is it says, take this thing and put it in between everything in this sequence. So interpose, comma, ASDF, turn ASDF into a sequence, and return characters. So we're going to have the character A and a comma, S and a comma, D and a comma, F and a comma. Seven things. Yes? Three-four things with three things in two. Seven things. And we say, apply stir to that, which means string can cat and make them. As if they were the arguments to stir. In other words, if I called stir and said stir, A comma, S comma, D comma, F, it would make a string out of them. Well, I can just apply it to the sequence, as if I called it with those arguments, and it will do the job. I get back a single string with that in between. Again, if you don't quite get these, it's OK. I'm just trying to show you the power and the succinctness of this. Reduces another function that takes a function. It says, apply this function to successive pairs of the sequence you're given, taking the result of each application and using it as the first argument of the next. So if you say, reduce with plus, you're going to get the first two things plus each other. And then take that and do that plus the next thing. And take that and do that plus the next thing. That's what reduce does. So this effectively is summing this range. It's a function that returns a sequence of numbers. And you can step where it starts and where it ends and how it steps and things like that. This is obviously a much higher level way to write programs than you do in Java. Yes? No? Your head hurts. I don't know what it's going to be. Yeah, let's take a break. This is going to be a good time for a break. Does anybody have any questions on this real quick? Right, and cycle returns a sequence, which has only got one in it. And the recipe for producing the rest of the cycle. Sort of like a delayed function. That's what happens inside cycle. It doesn't produce an infinite list, obviously. It returns an object that satisfies. It returns a sequence, correct. Why can't you call stirred directly? Well, in this case, well, I'd have to write a comma, s comma, d comma, f comma. Right? Then you're passing stir a sequence. And what I want to do is say, take that sequence and pretend it was the arguments to stir. Not an argument to stir, but n arguments to stir. Because that's the syntax of closure. Slash comma is a character literal for comma. Quote is used for other things. That's why I don't use it for character literals. All right, let's take a break.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.0, "text": " Hi. I'm Racheke. I'm here to talk about Closure, which is a programming language I wrote for", "tokens": [50364, 2421, 13, 286, 478, 497, 6000, 330, 13, 286, 478, 510, 281, 751, 466, 2033, 7641, 11, 597, 307, 257, 9410, 2856, 286, 4114, 337, 50864], "temperature": 0.0, "avg_logprob": -0.24432589909801744, "compression_ratio": 1.4202127659574468, "no_speech_prob": 0.08671914786100388}, {"id": 1, "seek": 0, "start": 10.0, "end": 17.6, "text": " the JVM. This particular talk is oriented towards people who program in Java or C sharp", "tokens": [50864, 264, 508, 53, 44, 13, 639, 1729, 751, 307, 21841, 3030, 561, 567, 1461, 294, 10745, 420, 383, 8199, 51244], "temperature": 0.0, "avg_logprob": -0.24432589909801744, "compression_ratio": 1.4202127659574468, "no_speech_prob": 0.08671914786100388}, {"id": 2, "seek": 0, "start": 17.6, "end": 24.48, "text": " or C++ in particular that I'm not going to presume any knowledge of Lisp. So you might", "tokens": [51244, 420, 383, 25472, 294, 1729, 300, 286, 478, 406, 516, 281, 43283, 604, 3601, 295, 441, 7631, 13, 407, 291, 1062, 51588], "temperature": 0.0, "avg_logprob": -0.24432589909801744, "compression_ratio": 1.4202127659574468, "no_speech_prob": 0.08671914786100388}, {"id": 3, "seek": 2448, "start": 24.48, "end": 31.28, "text": " find some of it tedious, although I am preparing for a talk I'm going to give at ecoup to the", "tokens": [50364, 915, 512, 295, 309, 38284, 11, 4878, 286, 669, 10075, 337, 257, 751, 286, 478, 516, 281, 976, 412, 11437, 1250, 281, 264, 50704], "temperature": 0.0, "avg_logprob": -0.17066009974075577, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.2000943273305893}, {"id": 4, "seek": 2448, "start": 31.28, "end": 36.6, "text": " European Lisp workshop, where I'm going to talk about the ways Closure is a different", "tokens": [50704, 6473, 441, 7631, 13541, 11, 689, 286, 478, 516, 281, 751, 466, 264, 2098, 2033, 7641, 307, 257, 819, 50970], "temperature": 0.0, "avg_logprob": -0.17066009974075577, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.2000943273305893}, {"id": 5, "seek": 2448, "start": 36.6, "end": 44.6, "text": " Lisp. So maybe some of this will be interesting to you in that respect. But that's the nature", "tokens": [50970, 441, 7631, 13, 407, 1310, 512, 295, 341, 486, 312, 1880, 281, 291, 294, 300, 3104, 13, 583, 300, 311, 264, 3687, 51370], "temperature": 0.0, "avg_logprob": -0.17066009974075577, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.2000943273305893}, {"id": 6, "seek": 2448, "start": 44.6, "end": 48.72, "text": " of this talk. It's going to be an introduction to the language, a fly-by tour of some of", "tokens": [51370, 295, 341, 751, 13, 467, 311, 516, 281, 312, 364, 9339, 281, 264, 2856, 11, 257, 3603, 12, 2322, 3512, 295, 512, 295, 51576], "temperature": 0.0, "avg_logprob": -0.17066009974075577, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.2000943273305893}, {"id": 7, "seek": 2448, "start": 48.72, "end": 53.72, "text": " the features. I'll drill down into some of the others. I started to ask this question", "tokens": [51576, 264, 4122, 13, 286, 603, 11392, 760, 666, 512, 295, 264, 2357, 13, 286, 1409, 281, 1029, 341, 1168, 51826], "temperature": 0.0, "avg_logprob": -0.17066009974075577, "compression_ratio": 1.7099236641221374, "no_speech_prob": 0.2000943273305893}, {"id": 8, "seek": 5372, "start": 53.72, "end": 58.16, "text": " before, but I'll just ask it again to sort of see, is there anyone here who knows or", "tokens": [50364, 949, 11, 457, 286, 603, 445, 1029, 309, 797, 281, 1333, 295, 536, 11, 307, 456, 2878, 510, 567, 3255, 420, 50586], "temperature": 0.0, "avg_logprob": -0.2202836834654516, "compression_ratio": 1.437246963562753, "no_speech_prob": 0.005986354313790798}, {"id": 9, "seek": 5372, "start": 58.16, "end": 67.36, "text": " uses any flavor of Lisp, common Lisp scheme or Closure? Okay. So mostly no. I presume", "tokens": [50586, 4960, 604, 6813, 295, 441, 7631, 11, 2689, 441, 7631, 12232, 420, 2033, 7641, 30, 1033, 13, 407, 5240, 572, 13, 286, 43283, 51046], "temperature": 0.0, "avg_logprob": -0.2202836834654516, "compression_ratio": 1.437246963562753, "no_speech_prob": 0.005986354313790798}, {"id": 10, "seek": 5372, "start": 67.36, "end": 74.75999999999999, "text": " a lot of Java or anything in that family, C++, C sharp, Scala, anyone? You must be playing", "tokens": [51046, 257, 688, 295, 10745, 420, 1340, 294, 300, 1605, 11, 383, 25472, 11, 383, 8199, 11, 2747, 5159, 11, 2878, 30, 509, 1633, 312, 2433, 51416], "temperature": 0.0, "avg_logprob": -0.2202836834654516, "compression_ratio": 1.437246963562753, "no_speech_prob": 0.005986354313790798}, {"id": 11, "seek": 5372, "start": 74.75999999999999, "end": 80.28, "text": " with it, right? How about functional programming languages like ML or Haskell District? Guys,", "tokens": [51416, 365, 309, 11, 558, 30, 1012, 466, 11745, 9410, 8650, 411, 21601, 420, 8646, 43723, 14374, 30, 7855, 11, 51692], "temperature": 0.0, "avg_logprob": -0.2202836834654516, "compression_ratio": 1.437246963562753, "no_speech_prob": 0.005986354313790798}, {"id": 12, "seek": 8028, "start": 80.32000000000001, "end": 87.16, "text": " anyone a little? Don't really want to raise their hands about that one. Okay. That's good. In", "tokens": [50366, 2878, 257, 707, 30, 1468, 380, 534, 528, 281, 5300, 641, 2377, 466, 300, 472, 13, 1033, 13, 663, 311, 665, 13, 682, 50708], "temperature": 0.0, "avg_logprob": -0.2081837349749626, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.010618805885314941}, {"id": 13, "seek": 8028, "start": 87.16, "end": 93.28, "text": " particular, I think coming from that background, you'll understand a lot of this straight away.", "tokens": [50708, 1729, 11, 286, 519, 1348, 490, 300, 3678, 11, 291, 603, 1223, 257, 688, 295, 341, 2997, 1314, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2081837349749626, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.010618805885314941}, {"id": 14, "seek": 8028, "start": 93.28, "end": 101.48, "text": " How about dynamic programming languages, Python, Ruby or Groovy? Yes, about half. And I asked", "tokens": [51014, 1012, 466, 8546, 9410, 8650, 11, 15329, 11, 19907, 420, 12981, 38223, 30, 1079, 11, 466, 1922, 13, 400, 286, 2351, 51424], "temperature": 0.0, "avg_logprob": -0.2081837349749626, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.010618805885314941}, {"id": 15, "seek": 8028, "start": 101.48, "end": 110.2, "text": " before, Closure, we have a few people with their toes in the water. The other key aspect", "tokens": [51424, 949, 11, 2033, 7641, 11, 321, 362, 257, 1326, 561, 365, 641, 14681, 294, 264, 1281, 13, 440, 661, 2141, 4171, 51860], "temperature": 0.0, "avg_logprob": -0.2081837349749626, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.010618805885314941}, {"id": 16, "seek": 11020, "start": 110.24000000000001, "end": 114.68, "text": " of Closure that would matter to you if you're a Java programmer is whether or not you do", "tokens": [50366, 295, 2033, 7641, 300, 576, 1871, 281, 291, 498, 291, 434, 257, 10745, 32116, 307, 1968, 420, 406, 291, 360, 50588], "temperature": 0.0, "avg_logprob": -0.21008680926428902, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.001186035922728479}, {"id": 17, "seek": 11020, "start": 114.68, "end": 122.4, "text": " any real multi-threaded programming in Java or in any language. Yes? So some. So you use", "tokens": [50588, 604, 957, 4825, 12, 392, 2538, 292, 9410, 294, 10745, 420, 294, 604, 2856, 13, 1079, 30, 407, 512, 13, 407, 291, 764, 50974], "temperature": 0.0, "avg_logprob": -0.21008680926428902, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.001186035922728479}, {"id": 18, "seek": 11020, "start": 122.4, "end": 135.0, "text": " locks and all of that nightmare stuff. I'm a practitioner. I programmed in C and C++ and", "tokens": [50974, 20703, 293, 439, 295, 300, 18724, 1507, 13, 286, 478, 257, 32125, 13, 286, 31092, 294, 383, 293, 383, 25472, 293, 51604], "temperature": 0.0, "avg_logprob": -0.21008680926428902, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.001186035922728479}, {"id": 19, "seek": 13500, "start": 135.04, "end": 141.12, "text": " Java and C sharp and Common Lisp and Python and JavaScript and a bunch of languages over the", "tokens": [50366, 10745, 293, 383, 8199, 293, 18235, 441, 7631, 293, 15329, 293, 15778, 293, 257, 3840, 295, 8650, 670, 264, 50670], "temperature": 0.0, "avg_logprob": -0.17947703868419201, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.055692218244075775}, {"id": 20, "seek": 13500, "start": 141.12, "end": 149.08, "text": " years. Way back, this same group, I think it's the same lineage, was the CIG. And when I first", "tokens": [50670, 924, 13, 9558, 646, 11, 341, 912, 1594, 11, 286, 519, 309, 311, 264, 912, 38257, 11, 390, 264, 383, 10489, 13, 400, 562, 286, 700, 51068], "temperature": 0.0, "avg_logprob": -0.17947703868419201, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.055692218244075775}, {"id": 21, "seek": 13500, "start": 149.08, "end": 155.92000000000002, "text": " started to come, I started to teach C++ to the CIG and it became the C++ and CIG and eventually", "tokens": [51068, 1409, 281, 808, 11, 286, 1409, 281, 2924, 383, 25472, 281, 264, 383, 10489, 293, 309, 3062, 264, 383, 25472, 293, 383, 10489, 293, 4728, 51410], "temperature": 0.0, "avg_logprob": -0.17947703868419201, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.055692218244075775}, {"id": 22, "seek": 13500, "start": 155.92000000000002, "end": 163.16, "text": " the C++ and Java CIG and now the Java CIG. So back in the 90s, early 90s and mid 90s, I taught", "tokens": [51410, 264, 383, 25472, 293, 10745, 383, 10489, 293, 586, 264, 10745, 383, 10489, 13, 407, 646, 294, 264, 4289, 82, 11, 2440, 4289, 82, 293, 2062, 4289, 82, 11, 286, 5928, 51772], "temperature": 0.0, "avg_logprob": -0.17947703868419201, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.055692218244075775}, {"id": 23, "seek": 16316, "start": 163.79999999999998, "end": 170.64, "text": " C++ and advanced C++ to this group and ran study groups and I've come back tonight to apologize", "tokens": [50396, 383, 25472, 293, 7339, 383, 25472, 281, 341, 1594, 293, 5872, 2979, 3935, 293, 286, 600, 808, 646, 4440, 281, 12328, 50738], "temperature": 0.0, "avg_logprob": -0.17796199321746825, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.0017742541385814548}, {"id": 24, "seek": 16316, "start": 174.12, "end": 183.0, "text": " for having done that to you and to try to set you off on a better track. So we're going to look at", "tokens": [50912, 337, 1419, 1096, 300, 281, 291, 293, 281, 853, 281, 992, 291, 766, 322, 257, 1101, 2837, 13, 407, 321, 434, 516, 281, 574, 412, 51356], "temperature": 0.0, "avg_logprob": -0.17796199321746825, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.0017742541385814548}, {"id": 25, "seek": 16316, "start": 183.0, "end": 191.07999999999998, "text": " the fundamentals of Closure and it will be also of Lisp in many ways. But I'm going to say Closure,", "tokens": [51356, 264, 29505, 295, 2033, 7641, 293, 309, 486, 312, 611, 295, 441, 7631, 294, 867, 2098, 13, 583, 286, 478, 516, 281, 584, 2033, 7641, 11, 51760], "temperature": 0.0, "avg_logprob": -0.17796199321746825, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.0017742541385814548}, {"id": 26, "seek": 19108, "start": 191.56, "end": 197.16000000000003, "text": " don't take offense, all these things or many of the things I say are true of Closure are true of", "tokens": [50388, 500, 380, 747, 17834, 11, 439, 613, 721, 420, 867, 295, 264, 721, 286, 584, 366, 2074, 295, 2033, 7641, 366, 2074, 295, 50668], "temperature": 0.0, "avg_logprob": -0.167264404296875, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.0018033673986792564}, {"id": 27, "seek": 19108, "start": 197.16000000000003, "end": 204.60000000000002, "text": " many Lisp. I didn't invent them, they're not unique to Closure, but some things are. They will", "tokens": [50668, 867, 441, 7631, 13, 286, 994, 380, 7962, 552, 11, 436, 434, 406, 3845, 281, 2033, 7641, 11, 457, 512, 721, 366, 13, 814, 486, 51040], "temperature": 0.0, "avg_logprob": -0.167264404296875, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.0018033673986792564}, {"id": 28, "seek": 19108, "start": 204.60000000000002, "end": 210.72000000000003, "text": " look at the syntax and evaluation model. This is the stuff that will seem most unusual to you if", "tokens": [51040, 574, 412, 264, 28431, 293, 13344, 2316, 13, 639, 307, 264, 1507, 300, 486, 1643, 881, 10901, 281, 291, 498, 51346], "temperature": 0.0, "avg_logprob": -0.167264404296875, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.0018033673986792564}, {"id": 29, "seek": 19108, "start": 210.72000000000003, "end": 217.48000000000002, "text": " you've come from a, you know, compile link run language and one of the curly brace C derives", "tokens": [51346, 291, 600, 808, 490, 257, 11, 291, 458, 11, 31413, 2113, 1190, 2856, 293, 472, 295, 264, 32066, 38458, 383, 1163, 1539, 51684], "temperature": 0.0, "avg_logprob": -0.167264404296875, "compression_ratio": 1.6422413793103448, "no_speech_prob": 0.0018033673986792564}, {"id": 30, "seek": 21748, "start": 217.51999999999998, "end": 226.51999999999998, "text": " like Java. Then we'll look at some aspects of Closure, sequences in particular and the Java", "tokens": [50366, 411, 10745, 13, 1396, 321, 603, 574, 412, 512, 7270, 295, 2033, 7641, 11, 22978, 294, 1729, 293, 264, 10745, 50816], "temperature": 0.0, "avg_logprob": -0.13491573999094408, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0013602557592093945}, {"id": 31, "seek": 21748, "start": 226.51999999999998, "end": 232.76, "text": " integration which I imagine will be interesting and I'll finally end up talking about concurrency,", "tokens": [50816, 10980, 597, 286, 3811, 486, 312, 1880, 293, 286, 603, 2721, 917, 493, 1417, 466, 23702, 10457, 11, 51128], "temperature": 0.0, "avg_logprob": -0.13491573999094408, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0013602557592093945}, {"id": 32, "seek": 21748, "start": 232.76, "end": 237.0, "text": " why Closure has some of the features it does and how they address the problems of writing", "tokens": [51128, 983, 2033, 7641, 575, 512, 295, 264, 4122, 309, 775, 293, 577, 436, 2985, 264, 2740, 295, 3579, 51340], "temperature": 0.0, "avg_logprob": -0.13491573999094408, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0013602557592093945}, {"id": 33, "seek": 21748, "start": 237.0, "end": 243.88, "text": " concurrent programs that run on the new and indefinitely, you know, for the indefinite future", "tokens": [51340, 37702, 4268, 300, 1190, 322, 264, 777, 293, 24162, 10925, 11, 291, 458, 11, 337, 264, 24162, 5194, 642, 2027, 51684], "temperature": 0.0, "avg_logprob": -0.13491573999094408, "compression_ratio": 1.6120689655172413, "no_speech_prob": 0.0013602557592093945}, {"id": 34, "seek": 24388, "start": 243.92, "end": 248.4, "text": " multi-core machines and I'll take some questions. At some point in the middle we'll probably take", "tokens": [50366, 4825, 12, 12352, 8379, 293, 286, 603, 747, 512, 1651, 13, 1711, 512, 935, 294, 264, 2808, 321, 603, 1391, 747, 50590], "temperature": 0.0, "avg_logprob": -0.1690271293723976, "compression_ratio": 1.5491803278688525, "no_speech_prob": 0.0018630607519298792}, {"id": 35, "seek": 24388, "start": 248.4, "end": 255.4, "text": " a break. I don't know exactly where that's going to go. So what's the fundamentals of Closure?", "tokens": [50590, 257, 1821, 13, 286, 500, 380, 458, 2293, 689, 300, 311, 516, 281, 352, 13, 407, 437, 311, 264, 29505, 295, 2033, 7641, 30, 50940], "temperature": 0.0, "avg_logprob": -0.1690271293723976, "compression_ratio": 1.5491803278688525, "no_speech_prob": 0.0018630607519298792}, {"id": 36, "seek": 24388, "start": 255.4, "end": 261.24, "text": " Closure is a dynamic programming language and dynamic has a lot of different meanings, in", "tokens": [50940, 2033, 7641, 307, 257, 8546, 9410, 2856, 293, 8546, 575, 257, 688, 295, 819, 28138, 11, 294, 51232], "temperature": 0.0, "avg_logprob": -0.1690271293723976, "compression_ratio": 1.5491803278688525, "no_speech_prob": 0.0018630607519298792}, {"id": 37, "seek": 24388, "start": 261.24, "end": 267.48, "text": " particular it's dynamically typed, that would be an expectation you'd have of Python or Ruby or", "tokens": [51232, 1729, 309, 311, 43492, 33941, 11, 300, 576, 312, 364, 14334, 291, 1116, 362, 295, 15329, 420, 19907, 420, 51544], "temperature": 0.0, "avg_logprob": -0.1690271293723976, "compression_ratio": 1.5491803278688525, "no_speech_prob": 0.0018630607519298792}, {"id": 38, "seek": 26748, "start": 267.52000000000004, "end": 277.32, "text": " Groovy. It achieves that dynamic nature by being a Lisp and I'll talk more about that. I don't see a", "tokens": [50366, 12981, 38223, 13, 467, 3538, 977, 300, 8546, 3687, 538, 885, 257, 441, 7631, 293, 286, 603, 751, 544, 466, 300, 13, 286, 500, 380, 536, 257, 50856], "temperature": 0.0, "avg_logprob": -0.1655467964080443, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.012966872192919254}, {"id": 39, "seek": 26748, "start": 277.32, "end": 285.76, "text": " lot of people who know Lisp here but that doesn't mean there isn't a bias against Lisp. How many", "tokens": [50856, 688, 295, 561, 567, 458, 441, 7631, 510, 457, 300, 1177, 380, 914, 456, 1943, 380, 257, 12577, 1970, 441, 7631, 13, 1012, 867, 51278], "temperature": 0.0, "avg_logprob": -0.1655467964080443, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.012966872192919254}, {"id": 40, "seek": 26748, "start": 285.76, "end": 295.0, "text": " people have seen Lisp and said oh my god, I can't believe the parentheses and I would say I'd hope", "tokens": [51278, 561, 362, 1612, 441, 7631, 293, 848, 1954, 452, 3044, 11, 286, 393, 380, 1697, 264, 34153, 293, 286, 576, 584, 286, 1116, 1454, 51740], "temperature": 0.0, "avg_logprob": -0.1655467964080443, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.012966872192919254}, {"id": 41, "seek": 29500, "start": 295.04, "end": 301.36, "text": " you'd put that bias aside for the purposes of this talk. It ends up that for people who have not used", "tokens": [50366, 291, 1116, 829, 300, 12577, 7359, 337, 264, 9932, 295, 341, 751, 13, 467, 5314, 493, 300, 337, 561, 567, 362, 406, 1143, 50682], "temperature": 0.0, "avg_logprob": -0.17119672423914858, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.002793604740872979}, {"id": 42, "seek": 29500, "start": 301.36, "end": 310.0, "text": " Lisp, those biases have no basis and for most people who have given it a solid try, they vanish and in", "tokens": [50682, 441, 7631, 11, 729, 32152, 362, 572, 5143, 293, 337, 881, 561, 567, 362, 2212, 309, 257, 5100, 853, 11, 436, 43584, 293, 294, 51114], "temperature": 0.0, "avg_logprob": -0.17119672423914858, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.002793604740872979}, {"id": 43, "seek": 29500, "start": 310.0, "end": 319.88, "text": " fact many of the things you consider to be problems with Lisp are features down the line. But having", "tokens": [51114, 1186, 867, 295, 264, 721, 291, 1949, 281, 312, 2740, 365, 441, 7631, 366, 4122, 760, 264, 1622, 13, 583, 1419, 51608], "temperature": 0.0, "avg_logprob": -0.17119672423914858, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.002793604740872979}, {"id": 44, "seek": 31988, "start": 319.92, "end": 326.0, "text": " said that, Closure is a very different Lisp. It's syntactically much leaner than a lot of Lisp's. It", "tokens": [50366, 848, 300, 11, 2033, 7641, 307, 257, 588, 819, 441, 7631, 13, 467, 311, 23980, 578, 984, 709, 11659, 260, 813, 257, 688, 295, 441, 7631, 311, 13, 467, 50670], "temperature": 0.0, "avg_logprob": -0.1619853599398744, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.008146975189447403}, {"id": 45, "seek": 31988, "start": 326.0, "end": 334.71999999999997, "text": " has fewer parentheses. It uses more data structures in its syntax and as a result I think is more", "tokens": [50670, 575, 13366, 34153, 13, 467, 4960, 544, 1412, 9227, 294, 1080, 28431, 293, 382, 257, 1874, 286, 519, 307, 544, 51106], "temperature": 0.0, "avg_logprob": -0.1619853599398744, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.008146975189447403}, {"id": 46, "seek": 31988, "start": 334.71999999999997, "end": 343.4, "text": " succinct and more readable. So maybe the time to try Lisp again. Another aspect of Closure is that", "tokens": [51106, 21578, 5460, 293, 544, 49857, 13, 407, 1310, 264, 565, 281, 853, 441, 7631, 797, 13, 3996, 4171, 295, 2033, 7641, 307, 300, 51540], "temperature": 0.0, "avg_logprob": -0.1619853599398744, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.008146975189447403}, {"id": 47, "seek": 31988, "start": 343.4, "end": 347.44, "text": " it's a functional programming language and again I'm going to talk in detail about these things. For", "tokens": [51540, 309, 311, 257, 11745, 9410, 2856, 293, 797, 286, 478, 516, 281, 751, 294, 2607, 466, 613, 721, 13, 1171, 51742], "temperature": 0.0, "avg_logprob": -0.1619853599398744, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.008146975189447403}, {"id": 48, "seek": 34744, "start": 347.48, "end": 353.52, "text": " now you can just say that means a focus on immutability in your programs. So write programs", "tokens": [50366, 586, 291, 393, 445, 584, 300, 1355, 257, 1879, 322, 3397, 325, 2310, 294, 428, 4268, 13, 407, 2464, 4268, 50668], "temperature": 0.0, "avg_logprob": -0.12681098023721996, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.00047218220424838364}, {"id": 49, "seek": 34744, "start": 353.52, "end": 358.84, "text": " primarily with immutable data structures and if you're coming from another Lisp, this will be an", "tokens": [50668, 10029, 365, 3397, 32148, 1412, 9227, 293, 498, 291, 434, 1348, 490, 1071, 441, 7631, 11, 341, 486, 312, 364, 50934], "temperature": 0.0, "avg_logprob": -0.12681098023721996, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.00047218220424838364}, {"id": 50, "seek": 34744, "start": 358.84, "end": 364.4, "text": " area where Closure is definitely different. I mean different decisions about the data structures", "tokens": [50934, 1859, 689, 2033, 7641, 307, 2138, 819, 13, 286, 914, 819, 5327, 466, 264, 1412, 9227, 51212], "temperature": 0.0, "avg_logprob": -0.12681098023721996, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.00047218220424838364}, {"id": 51, "seek": 34744, "start": 364.4, "end": 370.28, "text": " in Closure. The third leg of Closure, you know, it sort of stands on four points. It's dynamic,", "tokens": [51212, 294, 2033, 7641, 13, 440, 2636, 1676, 295, 2033, 7641, 11, 291, 458, 11, 309, 1333, 295, 7382, 322, 1451, 2793, 13, 467, 311, 8546, 11, 51506], "temperature": 0.0, "avg_logprob": -0.12681098023721996, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.00047218220424838364}, {"id": 52, "seek": 34744, "start": 370.28, "end": 376.36, "text": " it's functional, it's hosted on the JVM and it embraces the JVM, its host platform. There are", "tokens": [51506, 309, 311, 11745, 11, 309, 311, 19204, 322, 264, 508, 53, 44, 293, 309, 9392, 2116, 264, 508, 53, 44, 11, 1080, 3975, 3663, 13, 821, 366, 51810], "temperature": 0.0, "avg_logprob": -0.12681098023721996, "compression_ratio": 1.7025089605734767, "no_speech_prob": 0.00047218220424838364}, {"id": 53, "seek": 37636, "start": 376.40000000000003, "end": 380.2, "text": " ports of other languages that sort of just sit on the JVM. There are ports of, for instance,", "tokens": [50366, 18160, 295, 661, 8650, 300, 1333, 295, 445, 1394, 322, 264, 508, 53, 44, 13, 821, 366, 18160, 295, 11, 337, 5197, 11, 50556], "temperature": 0.0, "avg_logprob": -0.14467225646972656, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0014042927650734782}, {"id": 54, "seek": 37636, "start": 380.2, "end": 386.40000000000003, "text": " common Lisp that sit on the JVM. But they don't really connect very well. For a number of reasons.", "tokens": [50556, 2689, 441, 7631, 300, 1394, 322, 264, 508, 53, 44, 13, 583, 436, 500, 380, 534, 1745, 588, 731, 13, 1171, 257, 1230, 295, 4112, 13, 50866], "temperature": 0.0, "avg_logprob": -0.14467225646972656, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0014042927650734782}, {"id": 55, "seek": 37636, "start": 386.40000000000003, "end": 391.24, "text": " One is they're implementing a standard. The standard was written before Java was written and", "tokens": [50866, 1485, 307, 436, 434, 18114, 257, 3832, 13, 440, 3832, 390, 3720, 949, 10745, 390, 3720, 293, 51108], "temperature": 0.0, "avg_logprob": -0.14467225646972656, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0014042927650734782}, {"id": 56, "seek": 37636, "start": 391.24, "end": 396.76, "text": " you know, there's just no merging the type systems. On the other hand, Closure was written for the", "tokens": [51108, 291, 458, 11, 456, 311, 445, 572, 44559, 264, 2010, 3652, 13, 1282, 264, 661, 1011, 11, 2033, 7641, 390, 3720, 337, 264, 51384], "temperature": 0.0, "avg_logprob": -0.14467225646972656, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0014042927650734782}, {"id": 57, "seek": 37636, "start": 396.76, "end": 404.16, "text": " JVM and so it's very heavily integrated with it. So not only does it reside there, which is a", "tokens": [51384, 508, 53, 44, 293, 370, 309, 311, 588, 10950, 10919, 365, 309, 13, 407, 406, 787, 775, 309, 40134, 456, 11, 597, 307, 257, 51754], "temperature": 0.0, "avg_logprob": -0.14467225646972656, "compression_ratio": 1.685512367491166, "no_speech_prob": 0.0014042927650734782}, {"id": 58, "seek": 40416, "start": 404.20000000000005, "end": 409.56, "text": " benefit because you can run it if that's your environment. But it embraces it, which means the", "tokens": [50366, 5121, 570, 291, 393, 1190, 309, 498, 300, 311, 428, 2823, 13, 583, 309, 9392, 2116, 309, 11, 597, 1355, 264, 50634], "temperature": 0.0, "avg_logprob": -0.11213477934249724, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.0015695660840719938}, {"id": 59, "seek": 40416, "start": 409.56, "end": 415.88000000000005, "text": " integration is good and it's pretty transparent to go back and forth. The fourth aspect of Closure", "tokens": [50634, 10980, 307, 665, 293, 309, 311, 1238, 12737, 281, 352, 646, 293, 5220, 13, 440, 6409, 4171, 295, 2033, 7641, 50950], "temperature": 0.0, "avg_logprob": -0.11213477934249724, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.0015695660840719938}, {"id": 60, "seek": 40416, "start": 415.88000000000005, "end": 423.88, "text": " is the concurrency aspect. You know, I work in C-Sharp with guys writing broadcast automation", "tokens": [50950, 307, 264, 23702, 10457, 4171, 13, 509, 458, 11, 286, 589, 294, 383, 12, 50, 5854, 79, 365, 1074, 3579, 9975, 17769, 51350], "temperature": 0.0, "avg_logprob": -0.11213477934249724, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.0015695660840719938}, {"id": 61, "seek": 40416, "start": 423.88, "end": 428.76000000000005, "text": " systems. They're, you know, they're multi-threaded. They have all kinds of nasty stuff going on,", "tokens": [51350, 3652, 13, 814, 434, 11, 291, 458, 11, 436, 434, 4825, 12, 392, 2538, 292, 13, 814, 362, 439, 3685, 295, 17923, 1507, 516, 322, 11, 51594], "temperature": 0.0, "avg_logprob": -0.11213477934249724, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.0015695660840719938}, {"id": 62, "seek": 42876, "start": 428.8, "end": 435.03999999999996, "text": " multiple connections to sockets, lots of databases, you know, data feeds from all kinds of places", "tokens": [50366, 3866, 9271, 281, 370, 11984, 11, 3195, 295, 22380, 11, 291, 458, 11, 1412, 23712, 490, 439, 3685, 295, 3190, 50678], "temperature": 0.0, "avg_logprob": -0.14904806090564263, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.005720480345189571}, {"id": 63, "seek": 42876, "start": 435.03999999999996, "end": 441.03999999999996, "text": " and it's not fun writing programs like that that need to share data structures amongst", "tokens": [50678, 293, 309, 311, 406, 1019, 3579, 4268, 411, 300, 300, 643, 281, 2073, 1412, 9227, 12918, 50978], "temperature": 0.0, "avg_logprob": -0.14904806090564263, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.005720480345189571}, {"id": 64, "seek": 42876, "start": 442.34, "end": 448.58, "text": " threads and to have them get maintained over time and have everybody remember what the locking", "tokens": [51043, 19314, 293, 281, 362, 552, 483, 17578, 670, 565, 293, 362, 2201, 1604, 437, 264, 23954, 51355], "temperature": 0.0, "avg_logprob": -0.14904806090564263, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.005720480345189571}, {"id": 65, "seek": 42876, "start": 448.58, "end": 453.88, "text": " model is. It's extremely challenging. Anyone who's done any extensive multi-threaded programming", "tokens": [51355, 2316, 307, 13, 467, 311, 4664, 7595, 13, 14643, 567, 311, 1096, 604, 13246, 4825, 12, 392, 2538, 292, 9410, 51620], "temperature": 0.0, "avg_logprob": -0.14904806090564263, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.005720480345189571}, {"id": 66, "seek": 45388, "start": 453.9, "end": 459.2, "text": " with the locking model knows how hard it is to get that right. So Closure is an effort on my", "tokens": [50365, 365, 264, 23954, 2316, 3255, 577, 1152, 309, 307, 281, 483, 300, 558, 13, 407, 2033, 7641, 307, 364, 4630, 322, 452, 50630], "temperature": 0.0, "avg_logprob": -0.16377617518107096, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.002143837744370103}, {"id": 67, "seek": 45388, "start": 459.2, "end": 464.2, "text": " part to solve those problems in an automatic way with language support. And the last thing", "tokens": [50630, 644, 281, 5039, 729, 2740, 294, 364, 12509, 636, 365, 2856, 1406, 13, 400, 264, 1036, 551, 50880], "temperature": 0.0, "avg_logprob": -0.16377617518107096, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.002143837744370103}, {"id": 68, "seek": 45388, "start": 466.76, "end": 471.2, "text": " is, you know, it is an open source language and it's very transparent, the implementation", "tokens": [51008, 307, 11, 291, 458, 11, 309, 307, 364, 1269, 4009, 2856, 293, 309, 311, 588, 12737, 11, 264, 11420, 51230], "temperature": 0.0, "avg_logprob": -0.16377617518107096, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.002143837744370103}, {"id": 69, "seek": 45388, "start": 471.2, "end": 478.2, "text": " and everything else is up there for you to see. We started to talk about this before. Why use a", "tokens": [51230, 293, 1203, 1646, 307, 493, 456, 337, 291, 281, 536, 13, 492, 1409, 281, 751, 466, 341, 949, 13, 1545, 764, 257, 51580], "temperature": 0.0, "avg_logprob": -0.16377617518107096, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.002143837744370103}, {"id": 70, "seek": 47820, "start": 478.2, "end": 484.44, "text": " dynamic language? Some people are very happy, of the people who are programming Java, how we are", "tokens": [50364, 8546, 2856, 30, 2188, 561, 366, 588, 2055, 11, 295, 264, 561, 567, 366, 9410, 10745, 11, 577, 321, 366, 50676], "temperature": 0.0, "avg_logprob": -0.23018329063158358, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.02361288107931614}, {"id": 71, "seek": 47820, "start": 484.44, "end": 489.44, "text": " happy about that. They like Java. They have no complaints. Okay, not too many. It ends up that I", "tokens": [50676, 2055, 466, 300, 13, 814, 411, 10745, 13, 814, 362, 572, 19585, 13, 1033, 11, 406, 886, 867, 13, 467, 5314, 493, 300, 286, 50926], "temperature": 0.0, "avg_logprob": -0.23018329063158358, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.02361288107931614}, {"id": 72, "seek": 47820, "start": 493.24, "end": 499.41999999999996, "text": " think many Java programmers look at people who are using Python or Ruby and being very", "tokens": [51116, 519, 867, 10745, 41504, 574, 412, 561, 567, 366, 1228, 15329, 420, 19907, 293, 885, 588, 51425], "temperature": 0.0, "avg_logprob": -0.23018329063158358, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.02361288107931614}, {"id": 73, "seek": 47820, "start": 499.41999999999996, "end": 504.41999999999996, "text": " productive and I think justifiably MV, their productivity, the succinctness, the flexibility", "tokens": [51425, 13304, 293, 286, 519, 445, 17638, 1188, 17663, 11, 641, 15604, 11, 264, 21578, 5460, 1287, 11, 264, 12635, 51675], "temperature": 0.0, "avg_logprob": -0.23018329063158358, "compression_ratio": 1.6217391304347826, "no_speech_prob": 0.02361288107931614}, {"id": 74, "seek": 50442, "start": 505.26, "end": 511.26, "text": " they have and in particular how quickly they can get things done. And it ends up that that is a", "tokens": [50406, 436, 362, 293, 294, 1729, 577, 2661, 436, 393, 483, 721, 1096, 13, 400, 309, 5314, 493, 300, 300, 307, 257, 50706], "temperature": 0.0, "avg_logprob": -0.2593816907218333, "compression_ratio": 1.575, "no_speech_prob": 0.0020131291821599007}, {"id": 75, "seek": 50442, "start": 512.76, "end": 518.76, "text": " fact of the static languages, especially the ones like Java, that they're inherently slower", "tokens": [50781, 1186, 295, 264, 13437, 8650, 11, 2318, 264, 2306, 411, 10745, 11, 300, 436, 434, 27993, 14009, 51081], "temperature": 0.0, "avg_logprob": -0.2593816907218333, "compression_ratio": 1.575, "no_speech_prob": 0.0020131291821599007}, {"id": 76, "seek": 50442, "start": 519.84, "end": 526.34, "text": " because of the amount of, well some people call it ceremony, but you have to go through to", "tokens": [51135, 570, 295, 264, 2372, 295, 11, 731, 512, 561, 818, 309, 12813, 11, 457, 291, 362, 281, 352, 807, 281, 51460], "temperature": 0.0, "avg_logprob": -0.2593816907218333, "compression_ratio": 1.575, "no_speech_prob": 0.0020131291821599007}, {"id": 77, "seek": 50442, "start": 526.34, "end": 532.34, "text": " communicate with the language. It slows you down. So flexibility is a key thing. You would look for", "tokens": [51460, 7890, 365, 264, 2856, 13, 467, 35789, 291, 760, 13, 407, 12635, 307, 257, 2141, 551, 13, 509, 576, 574, 337, 51760], "temperature": 0.0, "avg_logprob": -0.2593816907218333, "compression_ratio": 1.575, "no_speech_prob": 0.0020131291821599007}, {"id": 78, "seek": 53234, "start": 533.34, "end": 539.34, "text": " in a dynamic language. Interactivity is another key point. Again, this goes back to Lisp. Lisp has", "tokens": [50414, 294, 257, 8546, 2856, 13, 5751, 578, 4253, 307, 1071, 2141, 935, 13, 3764, 11, 341, 1709, 646, 281, 441, 7631, 13, 441, 7631, 575, 50714], "temperature": 0.0, "avg_logprob": -0.2179324159917143, "compression_ratio": 1.6024096385542168, "no_speech_prob": 0.0033088226336985826}, {"id": 79, "seek": 53234, "start": 539.34, "end": 544.86, "text": " pretty much always been an interactive language. And that means a lot of things. In particular, it", "tokens": [50714, 1238, 709, 1009, 668, 364, 15141, 2856, 13, 400, 300, 1355, 257, 688, 295, 721, 13, 682, 1729, 11, 309, 50990], "temperature": 0.0, "avg_logprob": -0.2179324159917143, "compression_ratio": 1.6024096385542168, "no_speech_prob": 0.0033088226336985826}, {"id": 80, "seek": 53234, "start": 544.86, "end": 550.86, "text": " means that when you've got Lisp up and running, you feel like you are engaged with an environment as", "tokens": [50990, 1355, 300, 562, 291, 600, 658, 441, 7631, 493, 293, 2614, 11, 291, 841, 411, 291, 366, 8237, 365, 364, 2823, 382, 51290], "temperature": 0.0, "avg_logprob": -0.2179324159917143, "compression_ratio": 1.6024096385542168, "no_speech_prob": 0.0033088226336985826}, {"id": 81, "seek": 53234, "start": 551.46, "end": 557.46, "text": " opposed to, you know, shoveling your text through a compiler phase to produce something else out the", "tokens": [51320, 8851, 281, 11, 291, 458, 11, 29789, 278, 428, 2487, 807, 257, 31958, 5574, 281, 5258, 746, 1646, 484, 264, 51620], "temperature": 0.0, "avg_logprob": -0.2179324159917143, "compression_ratio": 1.6024096385542168, "no_speech_prob": 0.0033088226336985826}, {"id": 82, "seek": 55746, "start": 558.38, "end": 564.38, "text": " other end. So that interactivity is kind of a deep thing. The repul is part of it. That means read,", "tokens": [50410, 661, 917, 13, 407, 300, 4648, 4253, 307, 733, 295, 257, 2452, 551, 13, 440, 1085, 425, 307, 644, 295, 309, 13, 663, 1355, 1401, 11, 50710], "temperature": 0.0, "avg_logprob": -0.23642715454101562, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.0013424254721030593}, {"id": 83, "seek": 55746, "start": 564.38, "end": 570.38, "text": " eval, print, loop, and I'll talk about that in detail in a little bit. Dynamic languages tend to be", "tokens": [50710, 1073, 304, 11, 4482, 11, 6367, 11, 293, 286, 603, 751, 466, 300, 294, 2607, 294, 257, 707, 857, 13, 45440, 8650, 3928, 281, 312, 51010], "temperature": 0.0, "avg_logprob": -0.23642715454101562, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.0013424254721030593}, {"id": 84, "seek": 55746, "start": 570.38, "end": 575.38, "text": " more concise. That doesn't mean that static languages can't be. Haskell in particular is very", "tokens": [51010, 544, 44882, 13, 663, 1177, 380, 914, 300, 13437, 8650, 393, 380, 312, 13, 8646, 43723, 294, 1729, 307, 588, 51260], "temperature": 0.0, "avg_logprob": -0.23642715454101562, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.0013424254721030593}, {"id": 85, "seek": 55746, "start": 575.38, "end": 581.38, "text": " concise. But the curly brace languages are not concise. Java is probably a great example of a", "tokens": [51260, 44882, 13, 583, 264, 32066, 38458, 8650, 366, 406, 44882, 13, 10745, 307, 1391, 257, 869, 1365, 295, 257, 51560], "temperature": 0.0, "avg_logprob": -0.23642715454101562, "compression_ratio": 1.646808510638298, "no_speech_prob": 0.0013424254721030593}, {"id": 86, "seek": 58138, "start": 582.38, "end": 588.38, "text": " language that's not concise. And that's just not a matter of tedium. It's a matter of where is your", "tokens": [50414, 2856, 300, 311, 406, 44882, 13, 400, 300, 311, 445, 406, 257, 1871, 295, 22337, 2197, 13, 467, 311, 257, 1871, 295, 689, 307, 428, 50714], "temperature": 0.0, "avg_logprob": -0.16369800756473352, "compression_ratio": 1.7166666666666666, "no_speech_prob": 0.005802094005048275}, {"id": 87, "seek": 58138, "start": 588.38, "end": 595.38, "text": " logic? How far apart is your logic? How spread out is it? Can you see what you're thinking about? Or is it", "tokens": [50714, 9952, 30, 1012, 1400, 4936, 307, 428, 9952, 30, 1012, 3974, 484, 307, 309, 30, 1664, 291, 536, 437, 291, 434, 1953, 466, 30, 1610, 307, 309, 51064], "temperature": 0.0, "avg_logprob": -0.16369800756473352, "compression_ratio": 1.7166666666666666, "no_speech_prob": 0.005802094005048275}, {"id": 88, "seek": 58138, "start": 595.38, "end": 601.38, "text": " in pieces? Is it spread out by a bunch of things that are not about your problem? Dynamic languages are", "tokens": [51064, 294, 3755, 30, 1119, 309, 3974, 484, 538, 257, 3840, 295, 721, 300, 366, 406, 466, 428, 1154, 30, 45440, 8650, 366, 51364], "temperature": 0.0, "avg_logprob": -0.16369800756473352, "compression_ratio": 1.7166666666666666, "no_speech_prob": 0.005802094005048275}, {"id": 89, "seek": 58138, "start": 603.38, "end": 609.38, "text": " definitely more suitable for exploration. There's a certain aspect in which static languages are like", "tokens": [51464, 2138, 544, 12873, 337, 16197, 13, 821, 311, 257, 1629, 4171, 294, 597, 13437, 8650, 366, 411, 51764], "temperature": 0.0, "avg_logprob": -0.16369800756473352, "compression_ratio": 1.7166666666666666, "no_speech_prob": 0.005802094005048275}, {"id": 90, "seek": 60938, "start": 609.7, "end": 615.5, "text": " concrete. That's a good aspect when you're trying to, you know, finish. In some systems, you know,", "tokens": [50380, 9859, 13, 663, 311, 257, 665, 4171, 562, 291, 434, 1382, 281, 11, 291, 458, 11, 2413, 13, 682, 512, 3652, 11, 291, 458, 11, 50670], "temperature": 0.0, "avg_logprob": -0.1286608110956785, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0018302935641258955}, {"id": 91, "seek": 60938, "start": 615.5, "end": 620.78, "text": " concrete is going to be more resilient. It's, you know, it's more resilient to change. It's more", "tokens": [50670, 9859, 307, 516, 281, 312, 544, 23699, 13, 467, 311, 11, 291, 458, 11, 309, 311, 544, 23699, 281, 1319, 13, 467, 311, 544, 50934], "temperature": 0.0, "avg_logprob": -0.1286608110956785, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0018302935641258955}, {"id": 92, "seek": 60938, "start": 620.78, "end": 625.78, "text": " structured and it's rigid. On the other hand, that's not necessarily the kind of materials you", "tokens": [50934, 18519, 293, 309, 311, 22195, 13, 1282, 264, 661, 1011, 11, 300, 311, 406, 4725, 264, 733, 295, 5319, 291, 51184], "temperature": 0.0, "avg_logprob": -0.1286608110956785, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0018302935641258955}, {"id": 93, "seek": 60938, "start": 625.78, "end": 630.5, "text": " want to be working with when you're trying to figure out what your structure should look like in", "tokens": [51184, 528, 281, 312, 1364, 365, 562, 291, 434, 1382, 281, 2573, 484, 437, 428, 3877, 820, 574, 411, 294, 51420], "temperature": 0.0, "avg_logprob": -0.1286608110956785, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0018302935641258955}, {"id": 94, "seek": 60938, "start": 630.5, "end": 638.0, "text": " the first place. So dynamic languages are better for exploration. And in particular, what I like", "tokens": [51420, 264, 700, 1081, 13, 407, 8546, 8650, 366, 1101, 337, 16197, 13, 400, 294, 1729, 11, 437, 286, 411, 51795], "temperature": 0.0, "avg_logprob": -0.1286608110956785, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0018302935641258955}, {"id": 95, "seek": 63800, "start": 638.08, "end": 644.08, "text": " about dynamic languages and Lisp fundamentally, and I think in a way other languages don't achieve, is it", "tokens": [50368, 466, 8546, 8650, 293, 441, 7631, 17879, 11, 293, 286, 519, 294, 257, 636, 661, 8650, 500, 380, 4584, 11, 307, 309, 50668], "temperature": 0.0, "avg_logprob": -0.20328703904763246, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.0028746440075337887}, {"id": 96, "seek": 63800, "start": 646.72, "end": 651.72, "text": " lets you focus on your problem. You can, with Lisp and its ability to do syntactic abstraction, suck", "tokens": [50800, 6653, 291, 1879, 322, 428, 1154, 13, 509, 393, 11, 365, 441, 7631, 293, 1080, 3485, 281, 360, 23980, 19892, 37765, 11, 9967, 51050], "temperature": 0.0, "avg_logprob": -0.20328703904763246, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.0028746440075337887}, {"id": 97, "seek": 63800, "start": 654.28, "end": 660.28, "text": " everything out of the way, except the problem. And for me, you know, when I discovered Lisp, I was", "tokens": [51178, 1203, 484, 295, 264, 636, 11, 3993, 264, 1154, 13, 400, 337, 385, 11, 291, 458, 11, 562, 286, 6941, 441, 7631, 11, 286, 390, 51478], "temperature": 0.0, "avg_logprob": -0.20328703904763246, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.0028746440075337887}, {"id": 98, "seek": 66028, "start": 661.28, "end": 667.28, "text": " pretty expert, C++ programmer. I said to myself, what have I been doing with my life? It was that, that", "tokens": [50414, 1238, 5844, 11, 383, 25472, 32116, 13, 286, 848, 281, 2059, 11, 437, 362, 286, 668, 884, 365, 452, 993, 30, 467, 390, 300, 11, 300, 50714], "temperature": 0.0, "avg_logprob": -0.18080146312713624, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.011834203265607357}, {"id": 99, "seek": 66028, "start": 671.28, "end": 677.28, "text": " big a deal. So there are many dynamic languages. I'm going to talk about closure and I will do, you", "tokens": [50914, 955, 257, 2028, 13, 407, 456, 366, 867, 8546, 8650, 13, 286, 478, 516, 281, 751, 466, 24653, 293, 286, 486, 360, 11, 291, 51214], "temperature": 0.0, "avg_logprob": -0.18080146312713624, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.011834203265607357}, {"id": 100, "seek": 66028, "start": 680.28, "end": 685.28, "text": " know, bashing of other languages, but I will try to highlight why you might choose closure over some of", "tokens": [51364, 458, 11, 987, 571, 295, 661, 8650, 11, 457, 286, 486, 853, 281, 5078, 983, 291, 1062, 2826, 24653, 670, 512, 295, 51614], "temperature": 0.0, "avg_logprob": -0.18080146312713624, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.011834203265607357}, {"id": 101, "seek": 68528, "start": 685.28, "end": 690.28, "text": " the other options. Because in particular now, I think it's a great thing that there are many dynamic", "tokens": [50364, 264, 661, 3956, 13, 1436, 294, 1729, 586, 11, 286, 519, 309, 311, 257, 869, 551, 300, 456, 366, 867, 8546, 50614], "temperature": 0.0, "avg_logprob": -0.20760135060733126, "compression_ratio": 1.642570281124498, "no_speech_prob": 0.01041202712804079}, {"id": 102, "seek": 68528, "start": 690.28, "end": 695.28, "text": " languages available for the JVM and dynamic languages are supported as a concept in the Java community.", "tokens": [50614, 8650, 2435, 337, 264, 508, 53, 44, 293, 8546, 8650, 366, 8104, 382, 257, 3410, 294, 264, 10745, 1768, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20760135060733126, "compression_ratio": 1.642570281124498, "no_speech_prob": 0.01041202712804079}, {"id": 103, "seek": 68528, "start": 698.28, "end": 703.28, "text": " A Java one, there was plenty of presentations on Jython and JRuby and Groovy and these other languages.", "tokens": [51014, 316, 10745, 472, 11, 456, 390, 7140, 295, 18964, 322, 508, 88, 11943, 293, 32849, 836, 88, 293, 12981, 38223, 293, 613, 661, 8650, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20760135060733126, "compression_ratio": 1.642570281124498, "no_speech_prob": 0.01041202712804079}, {"id": 104, "seek": 68528, "start": 706.28, "end": 712.28, "text": " And Sun has hired some of the developers of these languages and given it, you know, kind of official", "tokens": [51414, 400, 6163, 575, 13144, 512, 295, 264, 8849, 295, 613, 8650, 293, 2212, 309, 11, 291, 458, 11, 733, 295, 4783, 51714], "temperature": 0.0, "avg_logprob": -0.20760135060733126, "compression_ratio": 1.642570281124498, "no_speech_prob": 0.01041202712804079}, {"id": 105, "seek": 71228, "start": 712.28, "end": 717.28, "text": " support as something that's viable to do on the JVM. So you're going to see mixed language", "tokens": [50364, 1406, 382, 746, 300, 311, 22024, 281, 360, 322, 264, 508, 53, 44, 13, 407, 291, 434, 516, 281, 536, 7467, 2856, 50614], "temperature": 0.0, "avg_logprob": -0.13562793147807217, "compression_ratio": 1.58984375, "no_speech_prob": 0.0035799655597656965}, {"id": 106, "seek": 71228, "start": 719.28, "end": 724.28, "text": " programming being accepted in Java shops. So how do you pick? I think you can categorize languages in one", "tokens": [50714, 9410, 885, 9035, 294, 10745, 14457, 13, 407, 577, 360, 291, 1888, 30, 286, 519, 291, 393, 19250, 1125, 8650, 294, 472, 50964], "temperature": 0.0, "avg_logprob": -0.13562793147807217, "compression_ratio": 1.58984375, "no_speech_prob": 0.0035799655597656965}, {"id": 107, "seek": 71228, "start": 727.28, "end": 732.28, "text": " dimension pretty straightforward. Are they a port of a language that exists somewhere else or were they", "tokens": [51114, 10139, 1238, 15325, 13, 2014, 436, 257, 2436, 295, 257, 2856, 300, 8198, 4079, 1646, 420, 645, 436, 51364], "temperature": 0.0, "avg_logprob": -0.13562793147807217, "compression_ratio": 1.58984375, "no_speech_prob": 0.0035799655597656965}, {"id": 108, "seek": 71228, "start": 732.28, "end": 737.28, "text": " written for the JVM? Ports have a bunch of challenges. One is there is a canonic version out there because", "tokens": [51364, 3720, 337, 264, 508, 53, 44, 30, 430, 3299, 362, 257, 3840, 295, 4759, 13, 1485, 307, 456, 307, 257, 393, 11630, 3037, 484, 456, 570, 51614], "temperature": 0.0, "avg_logprob": -0.13562793147807217, "compression_ratio": 1.58984375, "no_speech_prob": 0.0035799655597656965}, {"id": 109, "seek": 73728, "start": 738.28, "end": 743.28, "text": " most of these languages are not defined by a specification. They're defined by a canonic", "tokens": [50414, 881, 295, 613, 8650, 366, 406, 7642, 538, 257, 31256, 13, 814, 434, 7642, 538, 257, 393, 11630, 50664], "temperature": 0.0, "avg_logprob": -0.162588576881253, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.0059858812019228935}, {"id": 110, "seek": 73728, "start": 743.28, "end": 748.28, "text": " implementation. So they're CRuby. They're CPython. Those are really the languages. And the other things are", "tokens": [50664, 11420, 13, 407, 436, 434, 14123, 836, 88, 13, 814, 434, 22431, 88, 11943, 13, 3950, 366, 534, 264, 8650, 13, 400, 264, 661, 721, 366, 50914], "temperature": 0.0, "avg_logprob": -0.162588576881253, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.0059858812019228935}, {"id": 111, "seek": 73728, "start": 752.28, "end": 757.28, "text": " ports which have to struggle to follow along with the C version. The other problem ports have is a lot of", "tokens": [51114, 18160, 597, 362, 281, 7799, 281, 1524, 2051, 365, 264, 383, 3037, 13, 440, 661, 1154, 18160, 362, 307, 257, 688, 295, 51364], "temperature": 0.0, "avg_logprob": -0.162588576881253, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.0059858812019228935}, {"id": 112, "seek": 73728, "start": 760.28, "end": 765.28, "text": " the infrastructure for the languages, especially the ones that don't perform very well, are written in C. In", "tokens": [51514, 264, 6896, 337, 264, 8650, 11, 2318, 264, 2306, 300, 500, 380, 2042, 588, 731, 11, 366, 3720, 294, 383, 13, 682, 51764], "temperature": 0.0, "avg_logprob": -0.162588576881253, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.0059858812019228935}, {"id": 113, "seek": 76528, "start": 765.28, "end": 770.28, "text": " other words, to get the library performance they need, the support libraries for Python are written in C. So", "tokens": [50364, 661, 2283, 11, 281, 483, 264, 6405, 3389, 436, 643, 11, 264, 1406, 15148, 337, 15329, 366, 3720, 294, 383, 13, 407, 50614], "temperature": 0.0, "avg_logprob": -0.11970220028775409, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.0016192706534639}, {"id": 114, "seek": 76528, "start": 770.28, "end": 776.28, "text": " an effort to port Python to Java means having to replicate those C libraries. So there's that. I would", "tokens": [50614, 364, 4630, 281, 2436, 15329, 281, 10745, 1355, 1419, 281, 25356, 729, 383, 15148, 13, 407, 456, 311, 300, 13, 286, 576, 50914], "temperature": 0.0, "avg_logprob": -0.11970220028775409, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.0016192706534639}, {"id": 115, "seek": 76528, "start": 776.28, "end": 782.28, "text": " say the main appeal to a ported language is if you already have an investment in Ruby or Python or you", "tokens": [50914, 584, 264, 2135, 13668, 281, 257, 2436, 292, 2856, 307, 498, 291, 1217, 362, 364, 6078, 294, 19907, 420, 15329, 420, 291, 51214], "temperature": 0.0, "avg_logprob": -0.11970220028775409, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.0016192706534639}, {"id": 116, "seek": 76528, "start": 782.28, "end": 788.28, "text": " have to really love the language designs. That's a good way to go here. I would say if not, if you're just", "tokens": [51214, 362, 281, 534, 959, 264, 2856, 11347, 13, 663, 311, 257, 665, 636, 281, 352, 510, 13, 286, 576, 584, 498, 406, 11, 498, 291, 434, 445, 51514], "temperature": 0.0, "avg_logprob": -0.11970220028775409, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.0016192706534639}, {"id": 117, "seek": 78828, "start": 789.28, "end": 794.28, "text": " starting from scratch, you may find that a language that's native to the JVM is going to give you better", "tokens": [50414, 2891, 490, 8459, 11, 291, 815, 915, 300, 257, 2856, 300, 311, 8470, 281, 264, 508, 53, 44, 307, 516, 281, 976, 291, 1101, 50664], "temperature": 0.0, "avg_logprob": -0.13712606015412704, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.008420651778578758}, {"id": 118, "seek": 78828, "start": 796.28, "end": 801.28, "text": " integration. You know the version you're using is the canonic version. The canonic version of Ruby is a JVM", "tokens": [50764, 10980, 13, 509, 458, 264, 3037, 291, 434, 1228, 307, 264, 393, 11630, 3037, 13, 440, 393, 11630, 3037, 295, 19907, 307, 257, 508, 53, 44, 51014], "temperature": 0.0, "avg_logprob": -0.13712606015412704, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.008420651778578758}, {"id": 119, "seek": 78828, "start": 801.28, "end": 806.28, "text": " language. The canonic version of Closure is a JVM language. And I would say of the two, Groovy is going to let", "tokens": [51014, 2856, 13, 440, 393, 11630, 3037, 295, 2033, 7641, 307, 257, 508, 53, 44, 2856, 13, 400, 286, 576, 584, 295, 264, 732, 11, 12981, 38223, 307, 516, 281, 718, 51264], "temperature": 0.0, "avg_logprob": -0.13712606015412704, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.008420651778578758}, {"id": 120, "seek": 78828, "start": 810.28, "end": 815.28, "text": " you do what you do in Java, except a little bit more easily. Fewer semicolons, more dynamic, there are", "tokens": [51464, 291, 360, 437, 291, 360, 294, 10745, 11, 3993, 257, 707, 857, 544, 3612, 13, 33468, 260, 27515, 401, 892, 11, 544, 8546, 11, 456, 366, 51714], "temperature": 0.0, "avg_logprob": -0.13712606015412704, "compression_ratio": 1.7603305785123966, "no_speech_prob": 0.008420651778578758}, {"id": 121, "seek": 81828, "start": 818.28, "end": 823.28, "text": " some builders, there are some idioms, there are closures, sort of the fun of dynamic programming and a lot of", "tokens": [50364, 512, 36281, 11, 456, 366, 512, 18014, 4785, 11, 456, 366, 2611, 1303, 11, 1333, 295, 264, 1019, 295, 8546, 9410, 293, 257, 688, 295, 50614], "temperature": 0.0, "avg_logprob": -0.11757466731927334, "compression_ratio": 1.63, "no_speech_prob": 0.0008676102734170854}, {"id": 122, "seek": 81828, "start": 826.28, "end": 831.28, "text": " the similar syntax to Java. So I think if you're just interested in dynamic and want to continue to write", "tokens": [50764, 264, 2531, 28431, 281, 10745, 13, 407, 286, 519, 498, 291, 434, 445, 3102, 294, 8546, 293, 528, 281, 2354, 281, 2464, 51014], "temperature": 0.0, "avg_logprob": -0.11757466731927334, "compression_ratio": 1.63, "no_speech_prob": 0.0008676102734170854}, {"id": 123, "seek": 81828, "start": 834.28, "end": 839.28, "text": " programs that are like your Java programs, Groovy can't be touched. Closure is not about writing programs like", "tokens": [51164, 4268, 300, 366, 411, 428, 10745, 4268, 11, 12981, 38223, 393, 380, 312, 9828, 13, 2033, 7641, 307, 406, 466, 3579, 4268, 411, 51414], "temperature": 0.0, "avg_logprob": -0.11757466731927334, "compression_ratio": 1.63, "no_speech_prob": 0.0008676102734170854}, {"id": 124, "seek": 83928, "start": 840.28, "end": 845.28, "text": " your Java programs. Closure is about realizing what's wrong with your Java programs and doing something", "tokens": [50414, 428, 10745, 4268, 13, 2033, 7641, 307, 466, 16734, 437, 311, 2085, 365, 428, 10745, 4268, 293, 884, 746, 50664], "temperature": 0.0, "avg_logprob": -0.17385276556015014, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.005131763871759176}, {"id": 125, "seek": 83928, "start": 849.28, "end": 854.28, "text": " different. And so you'll find some of that through the talk. So Closure itself, it inherits from Lisp, an", "tokens": [50864, 819, 13, 400, 370, 291, 603, 915, 512, 295, 300, 807, 264, 751, 13, 407, 2033, 7641, 2564, 11, 309, 9484, 1208, 490, 441, 7631, 11, 364, 51114], "temperature": 0.0, "avg_logprob": -0.17385276556015014, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.005131763871759176}, {"id": 126, "seek": 83928, "start": 860.28, "end": 865.28, "text": " expressivity and elegance I think is unmatched. Depending on your mindset, you may or may not agree, but this is a", "tokens": [51414, 5109, 4253, 293, 14459, 719, 286, 519, 307, 19334, 24102, 13, 22539, 322, 428, 12543, 11, 291, 815, 420, 815, 406, 3986, 11, 457, 341, 307, 257, 51664], "temperature": 0.0, "avg_logprob": -0.17385276556015014, "compression_ratio": 1.5211267605633803, "no_speech_prob": 0.005131763871759176}, {"id": 127, "seek": 86928, "start": 869.28, "end": 874.28, "text": " certain mathematical purity to lambda calculus and the way it's realized in Lisp. The uniformity of the syntax", "tokens": [50364, 1629, 18894, 34382, 281, 13607, 33400, 293, 264, 636, 309, 311, 5334, 294, 441, 7631, 13, 440, 9452, 507, 295, 264, 28431, 50614], "temperature": 0.0, "avg_logprob": -0.11815759410028873, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006960073485970497}, {"id": 128, "seek": 86928, "start": 876.28, "end": 881.28, "text": " is elegant. Closure also has very good performance. Again, I'm not going to get involved in any language", "tokens": [50714, 307, 21117, 13, 2033, 7641, 611, 575, 588, 665, 3389, 13, 3764, 11, 286, 478, 406, 516, 281, 483, 3288, 294, 604, 2856, 50964], "temperature": 0.0, "avg_logprob": -0.11815759410028873, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006960073485970497}, {"id": 129, "seek": 86928, "start": 884.28, "end": 888.28, "text": " bashing, but I'm pretty confident no other dynamic language on the JVM approaches the performance of", "tokens": [51114, 987, 571, 11, 457, 286, 478, 1238, 6679, 572, 661, 8546, 2856, 322, 264, 508, 53, 44, 11587, 264, 3389, 295, 51314], "temperature": 0.0, "avg_logprob": -0.11815759410028873, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006960073485970497}, {"id": 130, "seek": 86928, "start": 890.28, "end": 895.28, "text": " Closure in any area and is unlikely to. But everybody's working on performance.", "tokens": [51414, 2033, 7641, 294, 604, 1859, 293, 307, 17518, 281, 13, 583, 2201, 311, 1364, 322, 3389, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11815759410028873, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006960073485970497}, {"id": 131, "seek": 89928, "start": 900.28, "end": 902.28, "text": " Certainly.", "tokens": [50414, 16628, 13, 50514], "temperature": 0.0, "avg_logprob": -0.18850387632846832, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.008147754706442356}, {"id": 132, "seek": 89928, "start": 907.28, "end": 909.28, "text": " We've converted them.", "tokens": [50764, 492, 600, 16424, 552, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18850387632846832, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.008147754706442356}, {"id": 133, "seek": 89928, "start": 915.28, "end": 920.28, "text": " So the performance is good. I made a point before starting the talk that the objective and objective of", "tokens": [51164, 407, 264, 3389, 307, 665, 13, 286, 1027, 257, 935, 949, 2891, 264, 751, 300, 264, 10024, 293, 10024, 295, 51414], "temperature": 0.0, "avg_logprob": -0.18850387632846832, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.008147754706442356}, {"id": 134, "seek": 89928, "start": 921.28, "end": 926.28, "text": " Closure is to be useful in every area in which Java is useful. You can tackle the same kind of problems. I don't", "tokens": [51464, 2033, 7641, 307, 281, 312, 4420, 294, 633, 1859, 294, 597, 10745, 307, 4420, 13, 509, 393, 14896, 264, 912, 733, 295, 2740, 13, 286, 500, 380, 51714], "temperature": 0.0, "avg_logprob": -0.18850387632846832, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.008147754706442356}, {"id": 135, "seek": 92628, "start": 927.28, "end": 932.28, "text": " write web apps and put stuff in and take it out of the database kind of applications. I write scheduling", "tokens": [50414, 2464, 3670, 7733, 293, 829, 1507, 294, 293, 747, 309, 484, 295, 264, 8149, 733, 295, 5821, 13, 286, 2464, 29055, 50664], "temperature": 0.0, "avg_logprob": -0.14859133706965916, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.007781141437590122}, {"id": 136, "seek": 92628, "start": 935.28, "end": 940.28, "text": " systems, broadcast automation systems, election projection systems, machine listening systems, audio", "tokens": [50814, 3652, 11, 9975, 17769, 3652, 11, 6618, 22743, 3652, 11, 3479, 4764, 3652, 11, 6278, 51064], "temperature": 0.0, "avg_logprob": -0.14859133706965916, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.007781141437590122}, {"id": 137, "seek": 92628, "start": 945.28, "end": 950.28, "text": " analysis systems, and I write them in languages like C-sharp and Java and C++ and Closure can be used for those", "tokens": [51314, 5215, 3652, 11, 293, 286, 2464, 552, 294, 8650, 411, 383, 12, 2716, 6529, 293, 10745, 293, 383, 25472, 293, 2033, 7641, 393, 312, 1143, 337, 729, 51564], "temperature": 0.0, "avg_logprob": -0.14859133706965916, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.007781141437590122}, {"id": 138, "seek": 95028, "start": 951.28, "end": 956.28, "text": " kinds of problems. It doesn't mean they can't also be used for web apps and people did that right away with", "tokens": [50414, 3685, 295, 2740, 13, 467, 1177, 380, 914, 436, 393, 380, 611, 312, 1143, 337, 3670, 7733, 293, 561, 630, 300, 558, 1314, 365, 50664], "temperature": 0.0, "avg_logprob": -0.1273271514148247, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.002429697895422578}, {"id": 139, "seek": 95028, "start": 959.28, "end": 964.28, "text": " Closure and database and UI stuff. But it has that same kind of reach. One of the nice things about Java is it", "tokens": [50814, 2033, 7641, 293, 8149, 293, 15682, 1507, 13, 583, 309, 575, 300, 912, 733, 295, 2524, 13, 1485, 295, 264, 1481, 721, 466, 10745, 307, 309, 51064], "temperature": 0.0, "avg_logprob": -0.1273271514148247, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.002429697895422578}, {"id": 140, "seek": 95028, "start": 968.28, "end": 973.28, "text": " has a wide range. Closure has direct wrapper free access to Java. Some of the ported languages have to use", "tokens": [51264, 575, 257, 4874, 3613, 13, 2033, 7641, 575, 2047, 46906, 1737, 2105, 281, 10745, 13, 2188, 295, 264, 2436, 292, 8650, 362, 281, 764, 51514], "temperature": 0.0, "avg_logprob": -0.1273271514148247, "compression_ratio": 1.5186915887850467, "no_speech_prob": 0.002429697895422578}, {"id": 141, "seek": 97328, "start": 974.28, "end": 979.28, "text": " wrappers because those languages have their own object systems that imply a bunch of dynamic features that they", "tokens": [50414, 7843, 15226, 570, 729, 8650, 362, 641, 1065, 2657, 3652, 300, 33616, 257, 3840, 295, 8546, 4122, 300, 436, 50664], "temperature": 0.0, "avg_logprob": -0.17211988907826098, "compression_ratio": 1.5625, "no_speech_prob": 0.012023606337606907}, {"id": 142, "seek": 97328, "start": 982.28, "end": 986.28, "text": " have to glom on top of Java objects when you interoperate with them. Closure was designed to provide direct", "tokens": [50814, 362, 281, 1563, 298, 322, 1192, 295, 10745, 6565, 562, 291, 728, 7192, 473, 365, 552, 13, 2033, 7641, 390, 4761, 281, 2893, 2047, 51014], "temperature": 0.0, "avg_logprob": -0.17211988907826098, "compression_ratio": 1.5625, "no_speech_prob": 0.012023606337606907}, {"id": 143, "seek": 97328, "start": 989.28, "end": 994.28, "text": " access to Java. It looks like Closure, but it's direct. Closure being a list is extensible in a deep way.", "tokens": [51164, 2105, 281, 10745, 13, 467, 1542, 411, 2033, 7641, 11, 457, 309, 311, 2047, 13, 2033, 7641, 885, 257, 1329, 307, 1279, 30633, 294, 257, 2452, 636, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17211988907826098, "compression_ratio": 1.5625, "no_speech_prob": 0.012023606337606907}, {"id": 144, "seek": 99428, "start": 995.28, "end": 1000.28, "text": " And we'll talk a little bit more about how you get syntactic extensibility through macros. And then Closure, I", "tokens": [50414, 400, 321, 603, 751, 257, 707, 857, 544, 466, 577, 291, 483, 23980, 19892, 1279, 694, 2841, 807, 7912, 2635, 13, 400, 550, 2033, 7641, 11, 286, 50664], "temperature": 0.0, "avg_logprob": -0.27769286632537843, "compression_ratio": 1.4672897196261683, "no_speech_prob": 0.012385725043714046}, {"id": 145, "seek": 99428, "start": 1003.28, "end": 1008.28, "text": " think, is completely unique amongst the languages on the JVM in promoting immutability and concurrency, much more", "tokens": [50814, 519, 11, 307, 2584, 3845, 12918, 264, 8650, 322, 264, 508, 53, 44, 294, 16383, 3397, 325, 2310, 293, 23702, 10457, 11, 709, 544, 51064], "temperature": 0.0, "avg_logprob": -0.27769286632537843, "compression_ratio": 1.4672897196261683, "no_speech_prob": 0.012385725043714046}, {"id": 146, "seek": 99428, "start": 1009.28, "end": 1014.28, "text": " so than even Scala, which is often talked about as a functional language, but it's also a", "tokens": [51114, 370, 813, 754, 2747, 5159, 11, 597, 307, 2049, 2825, 466, 382, 257, 11745, 2856, 11, 457, 309, 311, 611, 257, 51364], "temperature": 0.0, "avg_logprob": -0.27769286632537843, "compression_ratio": 1.4672897196261683, "no_speech_prob": 0.012385725043714046}, {"id": 147, "seek": 101428, "start": 1015.28, "end": 1020.28, "text": " option. Closure is really oriented towards writing concurrent programs. And immutability for its other benefits", "tokens": [50414, 3614, 13, 2033, 7641, 307, 534, 21841, 3030, 3579, 37702, 4268, 13, 400, 3397, 325, 2310, 337, 1080, 661, 5311, 50664], "temperature": 0.0, "avg_logprob": -0.2954291956765311, "compression_ratio": 1.5347222222222223, "no_speech_prob": 0.023868577554821968}, {"id": 148, "seek": 101428, "start": 1025.28, "end": 1031.28, "text": " outside of concurrency. So how does Closure get to be these things? It is a list. It is a list. It is a list.", "tokens": [50914, 2380, 295, 23702, 10457, 13, 407, 577, 775, 2033, 7641, 483, 281, 312, 613, 721, 30, 467, 307, 257, 1329, 13, 467, 307, 257, 1329, 13, 467, 307, 257, 1329, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2954291956765311, "compression_ratio": 1.5347222222222223, "no_speech_prob": 0.023868577554821968}, {"id": 149, "seek": 104428, "start": 1045.28, "end": 1050.28, "text": " Again, put what you think about Lisp aside. I'll explain what that means in depth as I go into each of these", "tokens": [50414, 3764, 11, 829, 437, 291, 519, 466, 441, 7631, 7359, 13, 286, 603, 2903, 437, 300, 1355, 294, 7161, 382, 286, 352, 666, 1184, 295, 613, 50664], "temperature": 0.0, "avg_logprob": -0.19750043457629635, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.017100676894187927}, {"id": 150, "seek": 104428, "start": 1053.28, "end": 1057.28, "text": " points, but Lisp in general is dynamic in that way, interacting with an environment, having a REPL,", "tokens": [50814, 2793, 11, 457, 441, 7631, 294, 2674, 307, 8546, 294, 300, 636, 11, 18017, 365, 364, 2823, 11, 1419, 257, 31511, 43, 11, 51014], "temperature": 0.0, "avg_logprob": -0.19750043457629635, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.017100676894187927}, {"id": 151, "seek": 104428, "start": 1058.28, "end": 1063.28, "text": " having sort of introspection capabilities on the environment, being able to modify things in a running", "tokens": [51064, 1419, 1333, 295, 560, 2635, 19997, 10862, 322, 264, 2823, 11, 885, 1075, 281, 16927, 721, 294, 257, 2614, 51314], "temperature": 0.0, "avg_logprob": -0.19750043457629635, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.017100676894187927}, {"id": 152, "seek": 104428, "start": 1064.28, "end": 1069.28, "text": " program, or all characteristics that make it dynamic. A fundamental feature of all Lisp, if they want to be a", "tokens": [51364, 1461, 11, 420, 439, 10891, 300, 652, 309, 8546, 13, 316, 8088, 4111, 295, 439, 441, 7631, 11, 498, 436, 528, 281, 312, 257, 51614], "temperature": 0.0, "avg_logprob": -0.19750043457629635, "compression_ratio": 1.6317829457364341, "no_speech_prob": 0.017100676894187927}, {"id": 153, "seek": 106928, "start": 1070.28, "end": 1075.28, "text": " Lisp, is that code is represented as data. And again, I'll explain that in detail. There is a reader, which is part of the", "tokens": [50414, 441, 7631, 11, 307, 300, 3089, 307, 10379, 382, 1412, 13, 400, 797, 11, 286, 603, 2903, 300, 294, 2607, 13, 821, 307, 257, 15149, 11, 597, 307, 644, 295, 264, 50664], "temperature": 0.0, "avg_logprob": -0.12051057226863908, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001570432330481708}, {"id": 154, "seek": 106928, "start": 1084.28, "end": 1089.28, "text": " implementation of code as data, sort of something in between your text and the evaluator. Being a Lisp", "tokens": [51114, 11420, 295, 3089, 382, 1412, 11, 1333, 295, 746, 294, 1296, 428, 2487, 293, 264, 6133, 1639, 13, 8891, 257, 441, 7631, 51364], "temperature": 0.0, "avg_logprob": -0.12051057226863908, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001570432330481708}, {"id": 155, "seek": 106928, "start": 1092.28, "end": 1097.28, "text": " means having an extremely small core. You'll find when you contrast Closure to other languages, even", "tokens": [51514, 1355, 1419, 364, 4664, 1359, 4965, 13, 509, 603, 915, 562, 291, 8712, 2033, 7641, 281, 661, 8650, 11, 754, 51764], "temperature": 0.0, "avg_logprob": -0.12051057226863908, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001570432330481708}, {"id": 156, "seek": 109728, "start": 1097.28, "end": 1102.28, "text": " languages that are theoretically lightweight like Python or Ruby, Closure has way less syntax than those languages, far", "tokens": [50364, 8650, 300, 366, 29400, 22052, 411, 15329, 420, 19907, 11, 2033, 7641, 575, 636, 1570, 28431, 813, 729, 8650, 11, 1400, 50614], "temperature": 0.0, "avg_logprob": -0.15536309511233598, "compression_ratio": 1.5740740740740742, "no_speech_prob": 0.0028367487248033285}, {"id": 157, "seek": 109728, "start": 1105.28, "end": 1110.28, "text": " less complexity. In spite of the fact that they appear easy. Lisp generally have tended to emphasize lists.", "tokens": [50764, 1570, 14024, 13, 682, 22794, 295, 264, 1186, 300, 436, 4204, 1858, 13, 441, 7631, 5101, 362, 34732, 281, 16078, 14511, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15536309511233598, "compression_ratio": 1.5740740740740742, "no_speech_prob": 0.0028367487248033285}, {"id": 158, "seek": 109728, "start": 1118.28, "end": 1123.28, "text": " Closure is not exactly the same way. It is an area where Closure differs from Lisp in that it frees the abstract", "tokens": [51414, 2033, 7641, 307, 406, 2293, 264, 912, 636, 13, 467, 307, 364, 1859, 689, 2033, 7641, 37761, 490, 441, 7631, 294, 300, 309, 2130, 279, 264, 12649, 51664], "temperature": 0.0, "avg_logprob": -0.15536309511233598, "compression_ratio": 1.5740740740740742, "no_speech_prob": 0.0028367487248033285}, {"id": 159, "seek": 112328, "start": 1124.28, "end": 1129.28, "text": " of first and rest from a data structure, the con cells. And in doing so, offers the power of Lisp to many more data", "tokens": [50414, 295, 700, 293, 1472, 490, 257, 1412, 3877, 11, 264, 416, 5438, 13, 400, 294, 884, 370, 11, 7736, 264, 1347, 295, 441, 7631, 281, 867, 544, 1412, 50664], "temperature": 0.0, "avg_logprob": -0.1940927270018024, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.001364678842946887}, {"id": 160, "seek": 112328, "start": 1137.28, "end": 1142.28, "text": " structures than most Lisp do. So there's that sequence thing, and I'll talk more about that in detail. And syntactic", "tokens": [51064, 9227, 813, 881, 441, 7631, 360, 13, 407, 456, 311, 300, 8310, 551, 11, 293, 286, 603, 751, 544, 466, 300, 294, 2607, 13, 400, 23980, 19892, 51314], "temperature": 0.0, "avg_logprob": -0.1940927270018024, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.001364678842946887}, {"id": 161, "seek": 112328, "start": 1144.28, "end": 1149.28, "text": " abstraction. Again, we have abstraction capabilities with functions or methods in most languages. Lisp", "tokens": [51414, 37765, 13, 3764, 11, 321, 362, 37765, 10862, 365, 6828, 420, 7150, 294, 881, 8650, 13, 441, 7631, 51664], "temperature": 0.0, "avg_logprob": -0.1940927270018024, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.001364678842946887}, {"id": 162, "seek": 114928, "start": 1150.28, "end": 1155.28, "text": " take that to the next level by allowing you to suck even more repetition out of your programs when that", "tokens": [50414, 747, 300, 281, 264, 958, 1496, 538, 8293, 291, 281, 9967, 754, 544, 30432, 484, 295, 428, 4268, 562, 300, 50664], "temperature": 0.0, "avg_logprob": -0.1369507111698748, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013824754860252142}, {"id": 163, "seek": 114928, "start": 1158.28, "end": 1163.28, "text": " repetition can't be sucked out by making a function. Okay, so we'll dig down a little bit more. What does it mean to do", "tokens": [50814, 30432, 393, 380, 312, 26503, 484, 538, 1455, 257, 2445, 13, 1033, 11, 370, 321, 603, 2528, 760, 257, 707, 857, 544, 13, 708, 775, 309, 914, 281, 360, 51064], "temperature": 0.0, "avg_logprob": -0.1369507111698748, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013824754860252142}, {"id": 164, "seek": 114928, "start": 1167.28, "end": 1172.28, "text": " dynamic development? It means that there's going to be something called a REPL, a read eval print loop in which you", "tokens": [51264, 8546, 3250, 30, 467, 1355, 300, 456, 311, 516, 281, 312, 746, 1219, 257, 31511, 43, 11, 257, 1401, 1073, 304, 4482, 6367, 294, 597, 291, 51514], "temperature": 0.0, "avg_logprob": -0.1369507111698748, "compression_ratio": 1.5133928571428572, "no_speech_prob": 0.0013824754860252142}, {"id": 165, "seek": 117228, "start": 1173.28, "end": 1178.28, "text": " can type things and press enter and see what happens. I guess we should probably do that. So this is a little", "tokens": [50414, 393, 2010, 721, 293, 1886, 3242, 293, 536, 437, 2314, 13, 286, 2041, 321, 820, 1391, 360, 300, 13, 407, 341, 307, 257, 707, 50664], "temperature": 0.0, "avg_logprob": -0.12743633094875292, "compression_ratio": 1.5093457943925233, "no_speech_prob": 0.01361228059977293}, {"id": 166, "seek": 117228, "start": 1185.28, "end": 1190.28, "text": " editor. It's kind of squashed in the screen resolution, but down below is the REPL. This is Closure in an", "tokens": [51014, 9839, 13, 467, 311, 733, 295, 2339, 12219, 294, 264, 2568, 8669, 11, 457, 760, 2507, 307, 264, 31511, 43, 13, 639, 307, 2033, 7641, 294, 364, 51264], "temperature": 0.0, "avg_logprob": -0.12743633094875292, "compression_ratio": 1.5093457943925233, "no_speech_prob": 0.01361228059977293}, {"id": 167, "seek": 117228, "start": 1192.28, "end": 1197.28, "text": " interactive mode, and we can go and we can say plus one, two, three, and we get six. We can do other things", "tokens": [51364, 15141, 4391, 11, 293, 321, 393, 352, 293, 321, 393, 584, 1804, 472, 11, 732, 11, 1045, 11, 293, 321, 483, 2309, 13, 492, 393, 360, 661, 721, 51614], "temperature": 0.0, "avg_logprob": -0.12743633094875292, "compression_ratio": 1.5093457943925233, "no_speech_prob": 0.01361228059977293}, {"id": 168, "seek": 119728, "start": 1198.28, "end": 1203.28, "text": " Java like, I'll show you some more of that later. But the general idea is that you're going to be able to type", "tokens": [50414, 10745, 411, 11, 286, 603, 855, 291, 512, 544, 295, 300, 1780, 13, 583, 264, 2674, 1558, 307, 300, 291, 434, 516, 281, 312, 1075, 281, 2010, 50664], "temperature": 0.0, "avg_logprob": -0.1705984696097996, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0009691540035419166}, {"id": 169, "seek": 119728, "start": 1206.28, "end": 1211.28, "text": " expressions or in your editor, say please evaluate this. I mean, I can go up here to meth.pi and hit the key", "tokens": [50814, 15277, 420, 294, 428, 9839, 11, 584, 1767, 13059, 341, 13, 286, 914, 11, 286, 393, 352, 493, 510, 281, 23416, 13, 22630, 293, 2045, 264, 2141, 51064], "temperature": 0.0, "avg_logprob": -0.1705984696097996, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0009691540035419166}, {"id": 170, "seek": 119728, "start": 1214.28, "end": 1219.28, "text": " stroke that says evaluate this and see below, we get that. And that's kind of what it feels like to develop. I'm", "tokens": [51214, 12403, 300, 1619, 13059, 341, 293, 536, 2507, 11, 321, 483, 300, 13, 400, 300, 311, 733, 295, 437, 309, 3417, 411, 281, 1499, 13, 286, 478, 51464], "temperature": 0.0, "avg_logprob": -0.1705984696097996, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0009691540035419166}, {"id": 171, "seek": 119728, "start": 1221.28, "end": 1226.28, "text": " going to show you even more after I explain what you're looking at because I don't want this talk to be yet another", "tokens": [51564, 516, 281, 855, 291, 754, 544, 934, 286, 2903, 437, 291, 434, 1237, 412, 570, 286, 500, 380, 528, 341, 751, 281, 312, 1939, 1071, 51814], "temperature": 0.0, "avg_logprob": -0.1705984696097996, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0009691540035419166}, {"id": 172, "seek": 122728, "start": 1228.28, "end": 1233.28, "text": " people are shown Lisp and not having had to explain to them what they're looking at. So we're going to do that first.", "tokens": [50414, 561, 366, 4898, 441, 7631, 293, 406, 1419, 632, 281, 2903, 281, 552, 437, 436, 434, 1237, 412, 13, 407, 321, 434, 516, 281, 360, 300, 700, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15155260651199906, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.001522491336800158}, {"id": 173, "seek": 122728, "start": 1235.28, "end": 1240.28, "text": " But you have this interactive environment. You can define functions on the fly. You can fix functions on the fly.", "tokens": [50764, 583, 291, 362, 341, 15141, 2823, 13, 509, 393, 6964, 6828, 322, 264, 3603, 13, 509, 393, 3191, 6828, 322, 264, 3603, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15155260651199906, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.001522491336800158}, {"id": 174, "seek": 122728, "start": 1240.28, "end": 1245.28, "text": " You can have a running program and fix a bug in a running program. And that's not like being in a mode in a", "tokens": [51014, 509, 393, 362, 257, 2614, 1461, 293, 3191, 257, 7426, 294, 257, 2614, 1461, 13, 400, 300, 311, 406, 411, 885, 294, 257, 4391, 294, 257, 51264], "temperature": 0.0, "avg_logprob": -0.15155260651199906, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.001522491336800158}, {"id": 175, "seek": 122728, "start": 1247.28, "end": 1252.28, "text": " debugger where you have the special capability to reload something. It's always present. If you build an", "tokens": [51364, 24083, 1321, 689, 291, 362, 264, 2121, 13759, 281, 25628, 746, 13, 467, 311, 1009, 1974, 13, 759, 291, 1322, 364, 51614], "temperature": 0.0, "avg_logprob": -0.15155260651199906, "compression_ratio": 1.7549407114624507, "no_speech_prob": 0.001522491336800158}, {"id": 176, "seek": 125228, "start": 1253.28, "end": 1258.28, "text": " application with some access to the ability to load code, either a remote REPL connection or some way to do that,", "tokens": [50414, 3861, 365, 512, 2105, 281, 264, 3485, 281, 3677, 3089, 11, 2139, 257, 8607, 31511, 43, 4984, 420, 512, 636, 281, 360, 300, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1216338251678037, "compression_ratio": 1.587378640776699, "no_speech_prob": 0.0005351348081603646}, {"id": 177, "seek": 125228, "start": 1260.28, "end": 1265.28, "text": " your running production systems will have this capability to have fixes loaded into running programs.", "tokens": [50764, 428, 2614, 4265, 3652, 486, 362, 341, 13759, 281, 362, 32539, 13210, 666, 2614, 4268, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1216338251678037, "compression_ratio": 1.587378640776699, "no_speech_prob": 0.0005351348081603646}, {"id": 178, "seek": 125228, "start": 1270.28, "end": 1275.28, "text": " In general, there isn't the same distinction between compile time and run time. Compiling happens all the time.", "tokens": [51264, 682, 2674, 11, 456, 1943, 380, 264, 912, 16844, 1296, 31413, 565, 293, 1190, 565, 13, 6620, 4883, 2314, 439, 264, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1216338251678037, "compression_ratio": 1.587378640776699, "no_speech_prob": 0.0005351348081603646}, {"id": 179, "seek": 127528, "start": 1276.28, "end": 1281.28, "text": " Every time you load code, every time you evaluate an expression, compilation occurs. So that notion of phases of", "tokens": [50414, 2048, 565, 291, 3677, 3089, 11, 633, 565, 291, 13059, 364, 6114, 11, 40261, 11843, 13, 407, 300, 10710, 295, 18764, 295, 50664], "temperature": 0.0, "avg_logprob": -0.1216755749886496, "compression_ratio": 1.746212121212121, "no_speech_prob": 0.01662575639784336}, {"id": 180, "seek": 127528, "start": 1286.28, "end": 1291.28, "text": " compilation is something you have to relax when you're looking at a language like closure. And I'll show you the", "tokens": [50914, 40261, 307, 746, 291, 362, 281, 5789, 562, 291, 434, 1237, 412, 257, 2856, 411, 24653, 13, 400, 286, 603, 855, 291, 264, 51164], "temperature": 0.0, "avg_logprob": -0.1216755749886496, "compression_ratio": 1.746212121212121, "no_speech_prob": 0.01662575639784336}, {"id": 181, "seek": 127528, "start": 1292.28, "end": 1296.28, "text": " evaluation model in a second. I talked a little bit about the introspection, but that's present. You're sitting at a", "tokens": [51214, 13344, 2316, 294, 257, 1150, 13, 286, 2825, 257, 707, 857, 466, 264, 560, 2635, 19997, 11, 457, 300, 311, 1974, 13, 509, 434, 3798, 412, 257, 51414], "temperature": 0.0, "avg_logprob": -0.1216755749886496, "compression_ratio": 1.746212121212121, "no_speech_prob": 0.01662575639784336}, {"id": 182, "seek": 127528, "start": 1298.28, "end": 1303.28, "text": " REPL, closure is there, closure has namespaces, you can get a list of them. Closure has symbols, you can get a list of", "tokens": [51514, 31511, 43, 11, 24653, 307, 456, 11, 24653, 575, 5288, 79, 2116, 11, 291, 393, 483, 257, 1329, 295, 552, 13, 2033, 7641, 575, 16944, 11, 291, 393, 483, 257, 1329, 295, 51764], "temperature": 0.0, "avg_logprob": -0.1216755749886496, "compression_ratio": 1.746212121212121, "no_speech_prob": 0.01662575639784336}, {"id": 183, "seek": 130328, "start": 1304.28, "end": 1309.28, "text": " those. You can look inside the infrastructure that underlies the run time and manipulate it. And that's what I", "tokens": [50414, 729, 13, 509, 393, 574, 1854, 264, 6896, 300, 833, 24119, 264, 1190, 565, 293, 20459, 309, 13, 400, 300, 311, 437, 286, 50664], "temperature": 0.0, "avg_logprob": -0.12114140894505884, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0017233224352821708}, {"id": 184, "seek": 130328, "start": 1313.28, "end": 1318.28, "text": " mean by an interactive environment. I just don't mean typing things in. I mean, there is a program behind your", "tokens": [50864, 914, 538, 364, 15141, 2823, 13, 286, 445, 500, 380, 914, 18444, 721, 294, 13, 286, 914, 11, 456, 307, 257, 1461, 2261, 428, 51114], "temperature": 0.0, "avg_logprob": -0.12114140894505884, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0017233224352821708}, {"id": 185, "seek": 130328, "start": 1319.28, "end": 1324.28, "text": " program that is the run time of closure. And that's accessible. If I say something that you don't", "tokens": [51164, 1461, 300, 307, 264, 1190, 565, 295, 24653, 13, 400, 300, 311, 9515, 13, 759, 286, 584, 746, 300, 291, 500, 380, 51414], "temperature": 0.0, "avg_logprob": -0.12114140894505884, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0017233224352821708}, {"id": 186, "seek": 132428, "start": 1325.28, "end": 1331.28, "text": " understand, you can ask for clarification. I'm endeavoring to try to come up with the ideal way to explain", "tokens": [50414, 1223, 11, 291, 393, 1029, 337, 34449, 13, 286, 478, 34975, 278, 281, 853, 281, 808, 493, 365, 264, 7157, 636, 281, 2903, 50714], "temperature": 0.0, "avg_logprob": -0.18346041302348293, "compression_ratio": 1.6132075471698113, "no_speech_prob": 0.0015469079371541739}, {"id": 187, "seek": 132428, "start": 1337.28, "end": 1342.28, "text": " the list to people who have never seen it. And this is what I've come up with, which is to talk about data. Lots of", "tokens": [51014, 264, 1329, 281, 561, 567, 362, 1128, 1612, 309, 13, 400, 341, 307, 437, 286, 600, 808, 493, 365, 11, 597, 307, 281, 751, 466, 1412, 13, 15908, 295, 51264], "temperature": 0.0, "avg_logprob": -0.18346041302348293, "compression_ratio": 1.6132075471698113, "no_speech_prob": 0.0015469079371541739}, {"id": 188, "seek": 132428, "start": 1345.28, "end": 1351.28, "text": " languages have syntax. You can talk about Java. You can talk about here's main and here's what public means and static.", "tokens": [51414, 8650, 362, 28431, 13, 509, 393, 751, 466, 10745, 13, 509, 393, 751, 466, 510, 311, 2135, 293, 510, 311, 437, 1908, 1355, 293, 13437, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18346041302348293, "compression_ratio": 1.6132075471698113, "no_speech_prob": 0.0015469079371541739}, {"id": 189, "seek": 135128, "start": 1352.28, "end": 1357.28, "text": " And then you can dig into arguments to a function and things like that. But we're going to start here with data, in", "tokens": [50414, 400, 550, 291, 393, 2528, 666, 12869, 281, 257, 2445, 293, 721, 411, 300, 13, 583, 321, 434, 516, 281, 722, 510, 365, 1412, 11, 294, 50664], "temperature": 0.0, "avg_logprob": -0.1489360197535101, "compression_ratio": 1.5962962962962963, "no_speech_prob": 0.00138569506816566}, {"id": 190, "seek": 135128, "start": 1358.28, "end": 1362.28, "text": " particular data literals. I think everybody understands data literals from languages they're familiar with. You type in", "tokens": [50714, 1729, 1412, 2733, 1124, 13, 286, 519, 2201, 15146, 1412, 2733, 1124, 490, 8650, 436, 434, 4963, 365, 13, 509, 2010, 294, 50914], "temperature": 0.0, "avg_logprob": -0.1489360197535101, "compression_ratio": 1.5962962962962963, "no_speech_prob": 0.00138569506816566}, {"id": 191, "seek": 135128, "start": 1363.28, "end": 1368.28, "text": " 1, 2, 3, 4, and you know that's going to mean 1,234 to your program. So closure has integers, they have", "tokens": [50964, 502, 11, 568, 11, 805, 11, 1017, 11, 293, 291, 458, 300, 311, 516, 281, 914, 502, 11, 9356, 19, 281, 428, 1461, 13, 407, 24653, 575, 41674, 11, 436, 362, 51214], "temperature": 0.0, "avg_logprob": -0.1489360197535101, "compression_ratio": 1.5962962962962963, "no_speech_prob": 0.00138569506816566}, {"id": 192, "seek": 135128, "start": 1373.28, "end": 1379.28, "text": " arbitrary precision. They can get as large as your memory can support. And the promotion of", "tokens": [51464, 23211, 18356, 13, 814, 393, 483, 382, 2416, 382, 428, 4675, 393, 1406, 13, 400, 264, 15783, 295, 51764], "temperature": 0.0, "avg_logprob": -0.1489360197535101, "compression_ratio": 1.5962962962962963, "no_speech_prob": 0.00138569506816566}, {"id": 193, "seek": 138128, "start": 1381.28, "end": 1388.28, "text": " small integers to larger integers while arithmetic is going on is automatic. It supports doubles as the floating", "tokens": [50364, 1359, 41674, 281, 4833, 41674, 1339, 42973, 307, 516, 322, 307, 12509, 13, 467, 9346, 31634, 382, 264, 12607, 50714], "temperature": 0.0, "avg_logprob": -0.19118674993515014, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.00432408694177866}, {"id": 194, "seek": 138128, "start": 1389.28, "end": 1396.28, "text": " point format. Those are doubles. Those are big D double Java doubles. When you type them in. They're right. Right.", "tokens": [50764, 935, 7877, 13, 3950, 366, 31634, 13, 3950, 366, 955, 413, 3834, 10745, 31634, 13, 1133, 291, 2010, 552, 294, 13, 814, 434, 558, 13, 1779, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19118674993515014, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.00432408694177866}, {"id": 195, "seek": 138128, "start": 1400.28, "end": 1405.28, "text": " They're Java doubles, but they're the big D doubles. So one of the things you're going to see about closure is", "tokens": [51314, 814, 434, 10745, 31634, 11, 457, 436, 434, 264, 955, 413, 31634, 13, 407, 472, 295, 264, 721, 291, 434, 516, 281, 536, 466, 24653, 307, 51564], "temperature": 0.0, "avg_logprob": -0.19118674993515014, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.00432408694177866}, {"id": 196, "seek": 140528, "start": 1406.28, "end": 1412.28, "text": " everything is an object. Okay. All numbers are boxed. At least until you get inside a loop where I can unbox them. But it's a", "tokens": [50414, 1203, 307, 364, 2657, 13, 1033, 13, 1057, 3547, 366, 2424, 292, 13, 1711, 1935, 1826, 291, 483, 1854, 257, 6367, 689, 286, 393, 20242, 552, 13, 583, 309, 311, 257, 50714], "temperature": 0.0, "avg_logprob": -0.11466633189808238, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.01688958704471588}, {"id": 197, "seek": 140528, "start": 1416.28, "end": 1421.28, "text": " language in which numbers are boxed. Unlike common lists where you have access under the hood to use tagged integers and", "tokens": [50914, 2856, 294, 597, 3547, 366, 2424, 292, 13, 17657, 2689, 14511, 689, 291, 362, 2105, 833, 264, 13376, 281, 764, 40239, 41674, 293, 51164], "temperature": 0.0, "avg_logprob": -0.11466633189808238, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.01688958704471588}, {"id": 198, "seek": 140528, "start": 1424.28, "end": 1429.28, "text": " tagged numbers, which is more efficient than allocating them on the heap, no capability of doing that in the JVM.", "tokens": [51314, 40239, 3547, 11, 597, 307, 544, 7148, 813, 12660, 990, 552, 322, 264, 33591, 11, 572, 13759, 295, 884, 300, 294, 264, 508, 53, 44, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11466633189808238, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.01688958704471588}, {"id": 199, "seek": 142928, "start": 1430.28, "end": 1435.28, "text": " There's been talk about it, them adding it, which is stunning to me. Apparently the guy, there's this guy, John Rose, at", "tokens": [50414, 821, 311, 668, 751, 466, 309, 11, 552, 5127, 309, 11, 597, 307, 18550, 281, 385, 13, 16755, 264, 2146, 11, 456, 311, 341, 2146, 11, 2619, 12765, 11, 412, 50664], "temperature": 0.0, "avg_logprob": -0.20473314100696194, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.025906147435307503}, {"id": 200, "seek": 142928, "start": 1438.28, "end": 1444.28, "text": " Sun who really does understand this very well. And has talked about all kinds of really neat features, which if they make it into the", "tokens": [50814, 6163, 567, 534, 775, 1223, 341, 588, 731, 13, 400, 575, 2825, 466, 439, 3685, 295, 534, 10654, 4122, 11, 597, 498, 436, 652, 309, 666, 264, 51114], "temperature": 0.0, "avg_logprob": -0.20473314100696194, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.025906147435307503}, {"id": 201, "seek": 142928, "start": 1444.28, "end": 1449.28, "text": " JVM would make it stunning. Like tail call elimination and tagged numbers. But in the absence of that, numbers are boxed so", "tokens": [51114, 508, 53, 44, 576, 652, 309, 18550, 13, 1743, 6838, 818, 29224, 293, 40239, 3547, 13, 583, 294, 264, 17145, 295, 300, 11, 3547, 366, 2424, 292, 370, 51364], "temperature": 0.0, "avg_logprob": -0.20473314100696194, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.025906147435307503}, {"id": 202, "seek": 144928, "start": 1450.28, "end": 1455.28, "text": " that everything can be an object and can be treated uniformly. You have big decimal literals. You have ratios. 22 over 7 is", "tokens": [50414, 300, 1203, 393, 312, 364, 2657, 293, 393, 312, 8668, 48806, 13, 509, 362, 955, 26601, 2733, 1124, 13, 509, 362, 32435, 13, 5853, 670, 1614, 307, 50664], "temperature": 0.0, "avg_logprob": -0.1331098158280928, "compression_ratio": 1.7339449541284404, "no_speech_prob": 0.008702189661562443}, {"id": 203, "seek": 144928, "start": 1464.28, "end": 1469.28, "text": " something. It's not divide 22 by 7. It's a number. It's a number that's not going to lose any information versus dividing 22 by", "tokens": [51114, 746, 13, 467, 311, 406, 9845, 5853, 538, 1614, 13, 467, 311, 257, 1230, 13, 467, 311, 257, 1230, 300, 311, 406, 516, 281, 3624, 604, 1589, 5717, 26764, 5853, 538, 51364], "temperature": 0.0, "avg_logprob": -0.1331098158280928, "compression_ratio": 1.7339449541284404, "no_speech_prob": 0.008702189661562443}, {"id": 204, "seek": 144928, "start": 1472.28, "end": 1477.28, "text": " 7 and either truncating or converting into a floating point format where you will lose information. So ratios are first class.", "tokens": [51514, 1614, 293, 2139, 504, 409, 66, 990, 420, 29942, 666, 257, 12607, 935, 7877, 689, 291, 486, 3624, 1589, 13, 407, 32435, 366, 700, 1508, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1331098158280928, "compression_ratio": 1.7339449541284404, "no_speech_prob": 0.008702189661562443}, {"id": 205, "seek": 147928, "start": 1480.28, "end": 1485.28, "text": " String literals are in double quotes. They are Java strings. Same thing. Immutable. No conversions, no mapping. Being, again,", "tokens": [50414, 745, 2937, 2733, 1124, 366, 294, 3834, 19963, 13, 814, 366, 10745, 13985, 13, 10635, 551, 13, 17322, 32148, 13, 883, 42256, 11, 572, 18350, 13, 8891, 11, 797, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12957034448180535, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0015214168233796954}, {"id": 206, "seek": 147928, "start": 1490.28, "end": 1495.28, "text": " being a native JVM language means I can just adopt the semantics of Java literals. I don't have to take strings from a", "tokens": [50914, 885, 257, 8470, 508, 53, 44, 2856, 1355, 286, 393, 445, 6878, 264, 4361, 45298, 295, 10745, 2733, 1124, 13, 286, 500, 380, 362, 281, 747, 13985, 490, 257, 51164], "temperature": 0.0, "avg_logprob": -0.12957034448180535, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0015214168233796954}, {"id": 207, "seek": 147928, "start": 1499.28, "end": 1504.28, "text": " language spec that said, for instance, they could be mutable. I have to force it on the JVM by having my own type and conversions to", "tokens": [51364, 2856, 1608, 300, 848, 11, 337, 5197, 11, 436, 727, 312, 5839, 712, 13, 286, 362, 281, 3464, 309, 322, 264, 508, 53, 44, 538, 1419, 452, 1065, 2010, 293, 42256, 281, 51614], "temperature": 0.0, "avg_logprob": -0.12957034448180535, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0015214168233796954}, {"id": 208, "seek": 150428, "start": 1505.28, "end": 1510.28, "text": " and from. So because I'm an immutability oriented language, I'm very happy with Java's definition of a string being an immutable", "tokens": [50414, 293, 490, 13, 407, 570, 286, 478, 364, 3397, 325, 2310, 21841, 2856, 11, 286, 478, 588, 2055, 365, 10745, 311, 7123, 295, 257, 6798, 885, 364, 3397, 32148, 50664], "temperature": 0.0, "avg_logprob": -0.3697267012162642, "compression_ratio": 1.4682080924855492, "no_speech_prob": 0.003530730726197362}, {"id": 209, "seek": 150428, "start": 1515.28, "end": 1520.28, "text": " thing. So closure strings are Java strings. Yes. Is there any way to work for a cent on the line you do this? In other words,", "tokens": [50914, 551, 13, 407, 24653, 13985, 366, 10745, 13985, 13, 1079, 13, 1119, 456, 604, 636, 281, 589, 337, 257, 1489, 322, 264, 1622, 291, 360, 341, 30, 682, 661, 2283, 11, 51164], "temperature": 0.0, "avg_logprob": -0.3697267012162642, "compression_ratio": 1.4682080924855492, "no_speech_prob": 0.003530730726197362}, {"id": 210, "seek": 152028, "start": 1520.28, "end": 1525.28, "text": " to say there's a total of 1.234, or unless you know the center meter or something like that, you don't show, you don't know.", "tokens": [50364, 281, 584, 456, 311, 257, 3217, 295, 502, 13, 9356, 19, 11, 420, 5969, 291, 458, 264, 3056, 9255, 420, 746, 411, 300, 11, 291, 500, 380, 855, 11, 291, 500, 380, 458, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2956292976453466, "compression_ratio": 1.5485232067510548, "no_speech_prob": 0.015584897249937057}, {"id": 211, "seek": 152028, "start": 1531.28, "end": 1536.28, "text": " No. Try Frank. Have you ever seen it? No. Oh, you will love it. You can add all kinds of units and figure out how many, you", "tokens": [50914, 883, 13, 6526, 6823, 13, 3560, 291, 1562, 1612, 309, 30, 883, 13, 876, 11, 291, 486, 959, 309, 13, 509, 393, 909, 439, 3685, 295, 6815, 293, 2573, 484, 577, 867, 11, 291, 51164], "temperature": 0.0, "avg_logprob": -0.2956292976453466, "compression_ratio": 1.5485232067510548, "no_speech_prob": 0.015584897249937057}, {"id": 212, "seek": 152028, "start": 1541.28, "end": 1546.28, "text": " know, balloons of, you know, hydrogen it would take to move a camel across this much distance. It's amazing. Units for", "tokens": [51414, 458, 11, 26193, 295, 11, 291, 458, 11, 12697, 309, 576, 747, 281, 1286, 257, 37755, 2108, 341, 709, 4560, 13, 467, 311, 2243, 13, 1156, 1208, 337, 51664], "temperature": 0.0, "avg_logprob": -0.2956292976453466, "compression_ratio": 1.5485232067510548, "no_speech_prob": 0.015584897249937057}, {"id": 213, "seek": 155028, "start": 1550.28, "end": 1555.28, "text": " absolutely everything. Old, ancient Egyptian unit, it's really, it's fantastic. The guys are just a fanatic about precision,", "tokens": [50364, 3122, 1203, 13, 8633, 11, 7832, 24257, 4985, 11, 309, 311, 534, 11, 309, 311, 5456, 13, 440, 1074, 366, 445, 257, 3429, 2399, 466, 18356, 11, 50614], "temperature": 0.0, "avg_logprob": -0.21987133759718674, "compression_ratio": 1.5617529880478087, "no_speech_prob": 0.01759052462875843}, {"id": 214, "seek": 155028, "start": 1559.28, "end": 1564.28, "text": " making sure you don't lose anything, but you can arbitrarily multiply all kinds of units. Everything is preserved. Everything works", "tokens": [50814, 1455, 988, 291, 500, 380, 3624, 1340, 11, 457, 291, 393, 19071, 3289, 12972, 439, 3685, 295, 6815, 13, 5471, 307, 22242, 13, 5471, 1985, 51064], "temperature": 0.0, "avg_logprob": -0.21987133759718674, "compression_ratio": 1.5617529880478087, "no_speech_prob": 0.01759052462875843}, {"id": 215, "seek": 155028, "start": 1565.28, "end": 1570.28, "text": " correctly. Fantastic. Frank. Frank, F-R-I-N-K. But no. Frank? Frank is a language for the JVM. It's its own language, but it's a lot of", "tokens": [51114, 8944, 13, 21320, 13, 6823, 13, 6823, 11, 479, 12, 49, 12, 40, 12, 45, 12, 42, 13, 583, 572, 13, 6823, 30, 6823, 307, 257, 2856, 337, 264, 508, 53, 44, 13, 467, 311, 1080, 1065, 2856, 11, 457, 309, 311, 257, 688, 295, 51364], "temperature": 0.0, "avg_logprob": -0.21987133759718674, "compression_ratio": 1.5617529880478087, "no_speech_prob": 0.01759052462875843}, {"id": 216, "seek": 158028, "start": 1581.28, "end": 1588.28, "text": " fun. I've seen the guy talking. He just, he has some great examples. You know, some involve how many belches it would take to, you", "tokens": [50414, 1019, 13, 286, 600, 1612, 264, 2146, 1417, 13, 634, 445, 11, 415, 575, 512, 869, 5110, 13, 509, 458, 11, 512, 9494, 577, 867, 989, 3781, 309, 576, 747, 281, 11, 291, 50764], "temperature": 0.0, "avg_logprob": -0.1683427829935093, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.07030675560235977}, {"id": 217, "seek": 158028, "start": 1589.28, "end": 1595.28, "text": " know, move a hot air balloon to the moon and things like that. Okay, so we have string literals and double quotes. We have", "tokens": [50814, 458, 11, 1286, 257, 2368, 1988, 16994, 281, 264, 7135, 293, 721, 411, 300, 13, 1033, 11, 370, 321, 362, 6798, 2733, 1124, 293, 3834, 19963, 13, 492, 362, 51114], "temperature": 0.0, "avg_logprob": -0.1683427829935093, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.07030675560235977}, {"id": 218, "seek": 158028, "start": 1596.28, "end": 1601.28, "text": " characters that are preceded by a slash, backslash. So that's a character literal, and that's a big C character, a", "tokens": [51164, 4342, 300, 366, 16969, 292, 538, 257, 17330, 11, 646, 10418, 1299, 13, 407, 300, 311, 257, 2517, 20411, 11, 293, 300, 311, 257, 955, 383, 2517, 11, 257, 51414], "temperature": 0.0, "avg_logprob": -0.1683427829935093, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.07030675560235977}, {"id": 219, "seek": 160128, "start": 1602.28, "end": 1607.28, "text": " Java character. Now we're going to get to two things that are possibly a little bit different, because they're not first class", "tokens": [50414, 10745, 2517, 13, 823, 321, 434, 516, 281, 483, 281, 732, 721, 300, 366, 6264, 257, 707, 857, 819, 11, 570, 436, 434, 406, 700, 1508, 50664], "temperature": 0.0, "avg_logprob": -0.13390937892869972, "compression_ratio": 1.5936073059360731, "no_speech_prob": 0.009527666494250298}, {"id": 220, "seek": 160128, "start": 1610.28, "end": 1615.28, "text": " things in Java. One would be symbols, which are identifiers. They can't contain any spaces. They have no", "tokens": [50814, 721, 294, 10745, 13, 1485, 576, 312, 16944, 11, 597, 366, 2473, 23463, 13, 814, 393, 380, 5304, 604, 7673, 13, 814, 362, 572, 51064], "temperature": 0.0, "avg_logprob": -0.13390937892869972, "compression_ratio": 1.5936073059360731, "no_speech_prob": 0.009527666494250298}, {"id": 221, "seek": 160128, "start": 1619.28, "end": 1625.28, "text": " adornments. Symbols are used as identifiers primarily in code, but they can be used for other things as well. They're", "tokens": [51264, 614, 1865, 1117, 13, 3902, 5612, 82, 366, 1143, 382, 2473, 23463, 10029, 294, 3089, 11, 457, 436, 393, 312, 1143, 337, 661, 721, 382, 731, 13, 814, 434, 51564], "temperature": 0.0, "avg_logprob": -0.13390937892869972, "compression_ratio": 1.5936073059360731, "no_speech_prob": 0.009527666494250298}, {"id": 222, "seek": 162528, "start": 1626.28, "end": 1631.28, "text": " first class objects like strings. If you have one of these things, you can look at it, and it will be a symbol, closure", "tokens": [50414, 700, 1508, 6565, 411, 13985, 13, 759, 291, 362, 472, 295, 613, 721, 11, 291, 393, 574, 412, 309, 11, 293, 309, 486, 312, 257, 5986, 11, 24653, 50664], "temperature": 0.0, "avg_logprob": -0.17826651391528903, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0073256161995232105}, {"id": 223, "seek": 162528, "start": 1634.28, "end": 1640.28, "text": " laying symbol. Fred and Ethel are two symbols. That's correct. The other thing, closure has our keywords, which are", "tokens": [50814, 14903, 5986, 13, 10112, 293, 10540, 338, 366, 732, 16944, 13, 663, 311, 3006, 13, 440, 661, 551, 11, 24653, 575, 527, 21009, 11, 597, 366, 51114], "temperature": 0.0, "avg_logprob": -0.17826651391528903, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0073256161995232105}, {"id": 224, "seek": 162528, "start": 1644.28, "end": 1649.28, "text": " very similar to symbols, except they always designate themselves. So they're not subject to evaluation or mapping to", "tokens": [51314, 588, 2531, 281, 16944, 11, 3993, 436, 1009, 1715, 473, 2969, 13, 407, 436, 434, 406, 3983, 281, 13344, 420, 18350, 281, 51564], "temperature": 0.0, "avg_logprob": -0.17826651391528903, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0073256161995232105}, {"id": 225, "seek": 164928, "start": 1650.28, "end": 1655.28, "text": " values by the compiler, like symbols are. So symbol might be something you would use for a variable. You could make Fred be", "tokens": [50414, 4190, 538, 264, 31958, 11, 411, 16944, 366, 13, 407, 5986, 1062, 312, 746, 291, 576, 764, 337, 257, 7006, 13, 509, 727, 652, 10112, 312, 50664], "temperature": 0.0, "avg_logprob": -0.13969121977340343, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.0012830488849431276}, {"id": 226, "seek": 164928, "start": 1660.28, "end": 1665.28, "text": " equivalent to five. You could never make colon Fred be equal to five. Colon Fred will always mean itself. So when it gets", "tokens": [50914, 10344, 281, 1732, 13, 509, 727, 1128, 652, 8255, 10112, 312, 2681, 281, 1732, 13, 21408, 10112, 486, 1009, 914, 2564, 13, 407, 562, 309, 2170, 51164], "temperature": 0.0, "avg_logprob": -0.13969121977340343, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.0012830488849431276}, {"id": 227, "seek": 164928, "start": 1669.28, "end": 1674.28, "text": " evaluated, the value of the keyword Fred is the keyword Fred. It's sort of an identity thing. And they're extremely useful.", "tokens": [51364, 25509, 11, 264, 2158, 295, 264, 20428, 10112, 307, 264, 20428, 10112, 13, 467, 311, 1333, 295, 364, 6575, 551, 13, 400, 436, 434, 4664, 4420, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13969121977340343, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.0012830488849431276}, {"id": 228, "seek": 167928, "start": 1679.28, "end": 1684.28, "text": " They're very useful in particular as keys and maps because they're very fast for comparison, and they print as themselves", "tokens": [50364, 814, 434, 588, 4420, 294, 1729, 382, 9317, 293, 11317, 570, 436, 434, 588, 2370, 337, 9660, 11, 293, 436, 4482, 382, 2969, 50614], "temperature": 0.0, "avg_logprob": -0.21176357702775436, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004389563575387001}, {"id": 229, "seek": 167928, "start": 1688.28, "end": 1693.28, "text": " and read as themselves. That will make a little bit more sense in a minute. There are booleans. This is different from", "tokens": [50814, 293, 1401, 382, 2969, 13, 663, 486, 652, 257, 707, 857, 544, 2020, 294, 257, 3456, 13, 821, 366, 748, 4812, 599, 13, 639, 307, 819, 490, 51064], "temperature": 0.0, "avg_logprob": -0.21176357702775436, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004389563575387001}, {"id": 230, "seek": 167928, "start": 1696.28, "end": 1701.28, "text": " Lisp, although there is still null as false, nil as false. But in addition, there are proper true and false, mostly for the", "tokens": [51214, 441, 7631, 11, 4878, 456, 307, 920, 18184, 382, 7908, 11, 297, 388, 382, 7908, 13, 583, 294, 4500, 11, 456, 366, 2296, 2074, 293, 7908, 11, 5240, 337, 264, 51464], "temperature": 0.0, "avg_logprob": -0.21176357702775436, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004389563575387001}, {"id": 231, "seek": 170128, "start": 1702.28, "end": 1707.28, "text": " purposes of interoperability. It ends up that you can't solve the nil becoming false problem. At least I couldn't. So there are", "tokens": [50414, 9932, 295, 728, 7192, 2310, 13, 467, 5314, 493, 300, 291, 393, 380, 5039, 264, 297, 388, 5617, 7908, 1154, 13, 1711, 1935, 286, 2809, 380, 13, 407, 456, 366, 50664], "temperature": 0.0, "avg_logprob": -0.1217400160702792, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.002628693822771311}, {"id": 232, "seek": 170128, "start": 1715.28, "end": 1720.28, "text": " true and false, and there for use in interoperability with Java, you can use them in your closure programs as", "tokens": [51064, 2074, 293, 7908, 11, 293, 456, 337, 764, 294, 728, 7192, 2310, 365, 10745, 11, 291, 393, 764, 552, 294, 428, 24653, 4268, 382, 51314], "temperature": 0.0, "avg_logprob": -0.1217400160702792, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.002628693822771311}, {"id": 233, "seek": 170128, "start": 1720.28, "end": 1726.28, "text": " well. But conditional evaluation in closure looks for two things. It looks for false or nil, which is the next thing I", "tokens": [51314, 731, 13, 583, 27708, 13344, 294, 24653, 1542, 337, 732, 721, 13, 467, 1542, 337, 7908, 420, 297, 388, 11, 597, 307, 264, 958, 551, 286, 51614], "temperature": 0.0, "avg_logprob": -0.1217400160702792, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.002628693822771311}, {"id": 234, "seek": 172628, "start": 1727.28, "end": 1732.28, "text": " want to talk about. Nil means nothing. It also is the same thing in closure as Java null. Didn't have to be, but it is. So you can", "tokens": [50414, 528, 281, 751, 466, 13, 426, 388, 1355, 1825, 13, 467, 611, 307, 264, 912, 551, 294, 24653, 382, 10745, 18184, 13, 11151, 380, 362, 281, 312, 11, 457, 309, 307, 13, 407, 291, 393, 50664], "temperature": 0.0, "avg_logprob": -0.14411701568185467, "compression_ratio": 1.5923566878980893, "no_speech_prob": 0.008690044283866882}, {"id": 235, "seek": 172628, "start": 1742.28, "end": 1747.28, "text": " rely on that. So nil means nothing, and it's the same value as Java null. So when you get back nulls from Java, they're", "tokens": [51164, 10687, 322, 300, 13, 407, 297, 388, 1355, 1825, 11, 293, 309, 311, 264, 912, 2158, 382, 10745, 18184, 13, 407, 562, 291, 483, 646, 18184, 82, 490, 10745, 11, 436, 434, 51414], "temperature": 0.0, "avg_logprob": -0.14411701568185467, "compression_ratio": 1.5923566878980893, "no_speech_prob": 0.008690044283866882}, {"id": 236, "seek": 174728, "start": 1748.28, "end": 1753.28, "text": " going to say nil. Nil is a traditional Lisp word. But I like it because also traditionally in Lisp, if you can say if nil,", "tokens": [50414, 516, 281, 584, 297, 388, 13, 426, 388, 307, 257, 5164, 441, 7631, 1349, 13, 583, 286, 411, 309, 570, 611, 19067, 294, 441, 7631, 11, 498, 291, 393, 584, 498, 297, 388, 11, 50664], "temperature": 0.0, "avg_logprob": -0.21141411506966368, "compression_ratio": 1.5120481927710843, "no_speech_prob": 0.007688039913773537}, {"id": 237, "seek": 174728, "start": 1762.28, "end": 1767.28, "text": " it will evaluate to the else branch, because nil is false. Nil is not true. So that's another literal thing, that nil. There are", "tokens": [51114, 309, 486, 13059, 281, 264, 1646, 9819, 11, 570, 297, 388, 307, 7908, 13, 426, 388, 307, 406, 2074, 13, 407, 300, 311, 1071, 20411, 551, 11, 300, 297, 388, 13, 821, 366, 51364], "temperature": 0.0, "avg_logprob": -0.21141411506966368, "compression_ratio": 1.5120481927710843, "no_speech_prob": 0.007688039913773537}, {"id": 238, "seek": 176728, "start": 1767.28, "end": 1772.28, "text": " some other things. There are regex literals. So if the reader reads that, it's just a string regex, exactly the same syntax as", "tokens": [50364, 512, 661, 721, 13, 821, 366, 319, 432, 87, 2733, 1124, 13, 407, 498, 264, 15149, 15700, 300, 11, 309, 311, 445, 257, 6798, 319, 432, 87, 11, 2293, 264, 912, 28431, 382, 50614], "temperature": 0.0, "avg_logprob": -0.190117711606233, "compression_ratio": 1.5393939393939393, "no_speech_prob": 0.0028423848561942577}, {"id": 239, "seek": 176728, "start": 1783.28, "end": 1789.28, "text": " Java's, preceded by hash, will turn into a compiled pattern. So at read time, you can get compiled patterns, which you can then", "tokens": [51164, 10745, 311, 11, 16969, 292, 538, 22019, 11, 486, 1261, 666, 257, 36548, 5102, 13, 407, 412, 1401, 565, 11, 291, 393, 483, 36548, 8294, 11, 597, 291, 393, 550, 51464], "temperature": 0.0, "avg_logprob": -0.190117711606233, "compression_ratio": 1.5393939393939393, "no_speech_prob": 0.0028423848561942577}, {"id": 240, "seek": 178928, "start": 1790.28, "end": 1795.28, "text": " incorporate in macros and things like that, which is very powerful. And shows how that delineation between compilation and runtime is a", "tokens": [50414, 16091, 294, 7912, 2635, 293, 721, 411, 300, 11, 597, 307, 588, 4005, 13, 400, 3110, 577, 300, 1103, 533, 399, 1296, 40261, 293, 34474, 307, 257, 50664], "temperature": 0.0, "avg_logprob": -0.188925179568204, "compression_ratio": 1.5251396648044693, "no_speech_prob": 0.008555094711482525}, {"id": 241, "seek": 178928, "start": 1802.28, "end": 1807.28, "text": " little bit fungible. Correct. And there's a good reason for that. And the reason is empty list is no longer as special as it was once you", "tokens": [51014, 707, 857, 1019, 70, 964, 13, 12753, 13, 400, 456, 311, 257, 665, 1778, 337, 300, 13, 400, 264, 1778, 307, 6707, 1329, 307, 572, 2854, 382, 2121, 382, 309, 390, 1564, 291, 51264], "temperature": 0.0, "avg_logprob": -0.188925179568204, "compression_ratio": 1.5251396648044693, "no_speech_prob": 0.008555094711482525}, {"id": 242, "seek": 180728, "start": 1808.28, "end": 1813.28, "text": " have empty vector and empty map. However, the sequencing primitives, the functions that manipulate sequences return nil when they're", "tokens": [50414, 362, 6707, 8062, 293, 6707, 4471, 13, 2908, 11, 264, 32693, 2886, 38970, 11, 264, 6828, 300, 20459, 22978, 2736, 297, 388, 562, 436, 434, 50664], "temperature": 0.0, "avg_logprob": -0.12859600590121362, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.003761762985959649}, {"id": 243, "seek": 180728, "start": 1826.28, "end": 1831.28, "text": " done, not the empty list. So that aspect of being able to test for the end of iteration with if is still there. So closure sits in a", "tokens": [51314, 1096, 11, 406, 264, 6707, 1329, 13, 407, 300, 4171, 295, 885, 1075, 281, 1500, 337, 264, 917, 295, 24784, 365, 498, 307, 920, 456, 13, 407, 24653, 12696, 294, 257, 51564], "temperature": 0.0, "avg_logprob": -0.12859600590121362, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.003761762985959649}, {"id": 244, "seek": 183128, "start": 1832.28, "end": 1837.28, "text": " unique point. He's asking about aspects of closure that differ a little bit from common list and scheme. There's like a long standing fight between", "tokens": [50414, 3845, 935, 13, 634, 311, 3365, 466, 7270, 295, 24653, 300, 743, 257, 707, 857, 490, 2689, 1329, 293, 12232, 13, 821, 311, 411, 257, 938, 4877, 2092, 1296, 50664], "temperature": 0.0, "avg_logprob": -0.18943467347518259, "compression_ratio": 1.7956521739130435, "no_speech_prob": 0.01014579925686121}, {"id": 245, "seek": 183128, "start": 1844.28, "end": 1849.28, "text": " what should the difference between false, nil and the empty list be? Should they be unified? They are in common list. Should there be some", "tokens": [51014, 437, 820, 264, 2649, 1296, 7908, 11, 297, 388, 293, 264, 6707, 1329, 312, 30, 6454, 436, 312, 26787, 30, 814, 366, 294, 2689, 1329, 13, 6454, 456, 312, 512, 51264], "temperature": 0.0, "avg_logprob": -0.18943467347518259, "compression_ratio": 1.7956521739130435, "no_speech_prob": 0.01014579925686121}, {"id": 246, "seek": 183128, "start": 1853.28, "end": 1858.28, "text": " differences? There are some differences in scheme. Closure actually does some of both. There is false. However, there are some", "tokens": [51464, 7300, 30, 821, 366, 512, 7300, 294, 12232, 13, 2033, 7641, 767, 775, 512, 295, 1293, 13, 821, 307, 7908, 13, 2908, 11, 456, 366, 512, 51714], "temperature": 0.0, "avg_logprob": -0.18943467347518259, "compression_ratio": 1.7956521739130435, "no_speech_prob": 0.01014579925686121}, {"id": 247, "seek": 186128, "start": 1862.28, "end": 1867.28, "text": " differences. However, nil is still testable in a conditional. It does not unify nil and the empty list, which is a difference from common", "tokens": [50414, 7300, 13, 2908, 11, 297, 388, 307, 920, 1500, 712, 294, 257, 27708, 13, 467, 775, 406, 517, 2505, 297, 388, 293, 264, 6707, 1329, 11, 597, 307, 257, 2649, 490, 2689, 50664], "temperature": 0.0, "avg_logprob": -0.16822044448097154, "compression_ratio": 1.7725321888412018, "no_speech_prob": 0.003996843472123146}, {"id": 248, "seek": 186128, "start": 1870.28, "end": 1875.28, "text": " list. However, all of the sequencing or list operations, when they're done, return nil, not the empty list, which is an important thing for", "tokens": [50814, 1329, 13, 2908, 11, 439, 295, 264, 32693, 420, 1329, 7705, 11, 562, 436, 434, 1096, 11, 2736, 297, 388, 11, 406, 264, 6707, 1329, 11, 597, 307, 364, 1021, 551, 337, 51064], "temperature": 0.0, "avg_logprob": -0.16822044448097154, "compression_ratio": 1.7725321888412018, "no_speech_prob": 0.003996843472123146}, {"id": 249, "seek": 186128, "start": 1879.28, "end": 1884.28, "text": " common list like idioms, where you want to keep going until it says false, as opposed to having to test for empty explicitly, which you", "tokens": [51264, 2689, 1329, 411, 18014, 4785, 11, 689, 291, 528, 281, 1066, 516, 1826, 309, 1619, 7908, 11, 382, 8851, 281, 1419, 281, 1500, 337, 6707, 20803, 11, 597, 291, 51514], "temperature": 0.0, "avg_logprob": -0.16822044448097154, "compression_ratio": 1.7725321888412018, "no_speech_prob": 0.003996843472123146}, {"id": 250, "seek": 188428, "start": 1885.28, "end": 1890.28, "text": " would have to do in scheme. Does anybody know scheme here? But you know both, so you know what I'm talking about. For everyone", "tokens": [50414, 576, 362, 281, 360, 294, 12232, 13, 4402, 4472, 458, 12232, 510, 30, 583, 291, 458, 1293, 11, 370, 291, 458, 437, 286, 478, 1417, 466, 13, 1171, 1518, 50664], "temperature": 0.0, "avg_logprob": -0.18063845778956558, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.004003855399787426}, {"id": 251, "seek": 188428, "start": 1895.28, "end": 1900.28, "text": " else, I wouldn't worry too much about that because you wouldn't have presumed nil would have been the empty list, right?", "tokens": [50914, 1646, 11, 286, 2759, 380, 3292, 886, 709, 466, 300, 570, 291, 2759, 380, 362, 18028, 292, 297, 388, 576, 362, 668, 264, 6707, 1329, 11, 558, 30, 51164], "temperature": 0.0, "avg_logprob": -0.18063845778956558, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.004003855399787426}, {"id": 252, "seek": 188428, "start": 1900.28, "end": 1907.28, "text": " Probably not. Okay, so those are the atomic things. They can't be divided, right? That's what atomic means. You can't, a number is in a", "tokens": [51164, 9210, 406, 13, 1033, 11, 370, 729, 366, 264, 22275, 721, 13, 814, 393, 380, 312, 6666, 11, 558, 30, 663, 311, 437, 22275, 1355, 13, 509, 393, 380, 11, 257, 1230, 307, 294, 257, 51514], "temperature": 0.0, "avg_logprob": -0.18063845778956558, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.004003855399787426}, {"id": 253, "seek": 191428, "start": 1914.28, "end": 1921.28, "text": " single thing. But there are composite or aggregate data structures. Enclosure and they're kind of the core abstractions of computer", "tokens": [50364, 2167, 551, 13, 583, 456, 366, 25557, 420, 26118, 1412, 9227, 13, 2193, 3474, 7641, 293, 436, 434, 733, 295, 264, 4965, 12649, 626, 295, 3820, 50714], "temperature": 0.0, "avg_logprob": -0.23325113266233413, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.03152685984969139}, {"id": 254, "seek": 191428, "start": 1926.28, "end": 1933.28, "text": " science. One is the list. And in this case, I mean very specifically, the singly linked list. And even more specifically, the singly", "tokens": [50964, 3497, 13, 1485, 307, 264, 1329, 13, 400, 294, 341, 1389, 11, 286, 914, 588, 4682, 11, 264, 1522, 356, 9408, 1329, 13, 400, 754, 544, 4682, 11, 264, 1522, 356, 51314], "temperature": 0.0, "avg_logprob": -0.23325113266233413, "compression_ratio": 1.5621301775147929, "no_speech_prob": 0.03152685984969139}, {"id": 255, "seek": 193328, "start": 1934.28, "end": 1941.28, "text": " linked list in which things get added at the front. So when you add to a list, you're adding at the front. The list is a chain of things, which", "tokens": [50414, 9408, 1329, 294, 597, 721, 483, 3869, 412, 264, 1868, 13, 407, 562, 291, 909, 281, 257, 1329, 11, 291, 434, 5127, 412, 264, 1868, 13, 440, 1329, 307, 257, 5021, 295, 721, 11, 597, 50764], "temperature": 0.0, "avg_logprob": -0.12653346910868604, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.018803417682647705}, {"id": 256, "seek": 193328, "start": 1948.28, "end": 1954.28, "text": " means that finding the nth element is a linear time cost, right? It's going to take n steps to do that. On the other hand, taking", "tokens": [51114, 1355, 300, 5006, 264, 297, 392, 4478, 307, 257, 8213, 565, 2063, 11, 558, 30, 467, 311, 516, 281, 747, 297, 4439, 281, 360, 300, 13, 1282, 264, 661, 1011, 11, 1940, 51414], "temperature": 0.0, "avg_logprob": -0.12653346910868604, "compression_ratio": 1.6058823529411765, "no_speech_prob": 0.018803417682647705}, {"id": 257, "seek": 195428, "start": 1955.28, "end": 1962.28, "text": " stuff on and off the front is constant time, because that's the nature of a singly linked list. So it has all the promises, all the", "tokens": [50414, 1507, 322, 293, 766, 264, 1868, 307, 5754, 565, 11, 570, 300, 311, 264, 3687, 295, 257, 1522, 356, 9408, 1329, 13, 407, 309, 575, 439, 264, 16403, 11, 439, 264, 50764], "temperature": 0.0, "avg_logprob": -0.1487091150176659, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.004675735719501972}, {"id": 258, "seek": 195428, "start": 1966.28, "end": 1972.28, "text": " performance promises of a singly linked list with stuff at the front. And it's literal representation is stuff inside", "tokens": [50964, 3389, 16403, 295, 257, 1522, 356, 9408, 1329, 365, 1507, 412, 264, 1868, 13, 400, 309, 311, 20411, 10290, 307, 1507, 1854, 51264], "temperature": 0.0, "avg_logprob": -0.1487091150176659, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.004675735719501972}, {"id": 259, "seek": 195428, "start": 1974.28, "end": 1980.28, "text": " parentheses separated by spaces. There's no need for commas. You'll see some commas. Commas are white space enclosures.", "tokens": [51364, 34153, 12005, 538, 7673, 13, 821, 311, 572, 643, 337, 800, 296, 13, 509, 603, 536, 512, 800, 296, 13, 3046, 296, 366, 2418, 1901, 2058, 9389, 1303, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1487091150176659, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.004675735719501972}, {"id": 260, "seek": 198428, "start": 1984.28, "end": 1989.28, "text": " They're completely ignored. You can put them in if it makes you feel better or makes things somewhat more readable, but they're", "tokens": [50364, 814, 434, 2584, 19735, 13, 509, 393, 829, 552, 294, 498, 309, 1669, 291, 841, 1101, 420, 1669, 721, 8344, 544, 49857, 11, 457, 436, 434, 50614], "temperature": 0.0, "avg_logprob": -0.1851564160099736, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.004462040029466152}, {"id": 261, "seek": 198428, "start": 1990.28, "end": 1999.28, "text": " not actually syntaxed or not considered by the evaluator. So any questions about lists? Stuff in parentheses?", "tokens": [50664, 406, 767, 28431, 292, 420, 406, 4888, 538, 264, 6133, 1639, 13, 407, 604, 1651, 466, 14511, 30, 31347, 294, 34153, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1851564160099736, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.004462040029466152}, {"id": 262, "seek": 199928, "start": 1999.28, "end": 2001.28, "text": " Stuff in parentheses?", "tokens": [50364, 31347, 294, 34153, 30, 50464], "temperature": 0.0, "avg_logprob": -0.31086386574639213, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.19881393015384674}, {"id": 263, "seek": 199928, "start": 2010.28, "end": 2018.28, "text": " Right. Well, these commas, the ones between 12345 and Fred Atollusi are actually English commas. But there are some commas.", "tokens": [50914, 1779, 13, 1042, 11, 613, 800, 296, 11, 264, 2306, 1296, 34466, 8465, 293, 10112, 316, 1353, 285, 33016, 366, 767, 3669, 800, 296, 13, 583, 456, 366, 512, 800, 296, 13, 51314], "temperature": 0.0, "avg_logprob": -0.31086386574639213, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.19881393015384674}, {"id": 264, "seek": 199928, "start": 2019.28, "end": 2024.28, "text": " For instance, when we get down to maps here, you see commas inside the data structure. Those are ignored. Those are white space.", "tokens": [51364, 1171, 5197, 11, 562, 321, 483, 760, 281, 11317, 510, 11, 291, 536, 800, 296, 1854, 264, 1412, 3877, 13, 3950, 366, 19735, 13, 3950, 366, 2418, 1901, 13, 51614], "temperature": 0.0, "avg_logprob": -0.31086386574639213, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.19881393015384674}, {"id": 265, "seek": 202928, "start": 2030.28, "end": 2045.28, "text": " I don't support any commas inside numbers. The printed representations of numbers enclosures are those of Java.", "tokens": [50414, 286, 500, 380, 1406, 604, 800, 296, 1854, 3547, 13, 440, 13567, 33358, 295, 3547, 2058, 9389, 1303, 366, 729, 295, 10745, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2640168755142777, "compression_ratio": 1.168421052631579, "no_speech_prob": 0.00648312596604228}, {"id": 266, "seek": 204528, "start": 2046.28, "end": 2055.2799999999997, "text": " In lists? No, in lists, they grow at the front. Cons A onto something makes A the first thing in that list. And that's true of", "tokens": [50414, 682, 14511, 30, 883, 11, 294, 14511, 11, 436, 1852, 412, 264, 1868, 13, 6923, 316, 3911, 746, 1669, 316, 264, 700, 551, 294, 300, 1329, 13, 400, 300, 311, 2074, 295, 50864], "temperature": 0.0, "avg_logprob": -0.3007971445719401, "compression_ratio": 1.2475247524752475, "no_speech_prob": 0.0494413748383522}, {"id": 267, "seek": 205528, "start": 2055.28, "end": 2062.28, "text": " closure, too. Yes? Absolutely not. All of these data structures are unique to closure. I'm only giving you some very high-level descriptions of their", "tokens": [50364, 24653, 11, 886, 13, 1079, 30, 7021, 406, 13, 1057, 295, 613, 1412, 9227, 366, 3845, 281, 24653, 13, 286, 478, 787, 2902, 291, 512, 588, 1090, 12, 12418, 24406, 295, 641, 50714], "temperature": 0.0, "avg_logprob": -0.4732787245410984, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.03398400545120239}, {"id": 268, "seek": 205528, "start": 2062.28, "end": 2068.28, "text": " representation and their performance characteristics, but we're going to talk about that in a little bit later on.", "tokens": [50714, 10290, 293, 641, 3389, 10891, 11, 457, 321, 434, 516, 281, 751, 466, 300, 294, 257, 707, 857, 1780, 322, 13, 51014], "temperature": 0.0, "avg_logprob": -0.4732787245410984, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.03398400545120239}, {"id": 269, "seek": 206828, "start": 2068.28, "end": 2081.28, "text": " Is it based on the retail structure of lists? Absolutely not. All of these data structures are unique to closure. I'm only giving you some very high-level descriptions of their representation and their performance characteristics, but what we're going to find out later is all of these things, in particular, I'm talking about adding to lists. All of these data structures are immutable. And they're persistent, which is another characteristic. I will explain that in a little bit later on.", "tokens": [50414, 1119, 309, 2361, 322, 264, 10800, 3877, 295, 14511, 30, 7021, 406, 13, 1057, 295, 613, 1412, 9227, 366, 3845, 281, 24653, 13, 286, 478, 787, 2902, 291, 512, 588, 1090, 12, 12418, 24406, 295, 641, 10290, 293, 641, 3389, 10891, 11, 457, 437, 321, 434, 516, 281, 915, 484, 1780, 307, 439, 295, 613, 721, 11, 294, 1729, 11, 286, 478, 1417, 466, 5127, 281, 14511, 13, 1057, 295, 613, 1412, 9227, 366, 3397, 32148, 13, 400, 436, 434, 24315, 11, 597, 307, 1071, 16282, 13, 286, 486, 2903, 300, 294, 257, 707, 857, 1780, 322, 13, 51014], "temperature": 0.2, "avg_logprob": -0.3219861323290532, "compression_ratio": 1.7625899280575539, "no_speech_prob": 0.08706341683864594}, {"id": 270, "seek": 209828, "start": 2099.28, "end": 2114.28, "text": " These are very different beasts, and they have excellent performance, yet they're immutable, and it's sort of the secret sauce of closure. Without these, you can't do what I do in the language.", "tokens": [50414, 1981, 366, 588, 819, 37386, 11, 293, 436, 362, 7103, 3389, 11, 1939, 436, 434, 3397, 32148, 11, 293, 309, 311, 1333, 295, 264, 4054, 4880, 295, 24653, 13, 9129, 613, 11, 291, 393, 380, 360, 437, 286, 360, 294, 264, 2856, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16102055285839326, "compression_ratio": 1.3785714285714286, "no_speech_prob": 0.2887139320373535}, {"id": 271, "seek": 211428, "start": 2114.28, "end": 2121.28, "text": " That's correct. Again, how this gets interpreted, we're going to talk about it in a little bit. Right now, what you're looking at is a list of three symbols. You may end up within your program, a data structure that's a list of three symbols. You may pass this to the evaluator and say,", "tokens": [50364, 663, 311, 3006, 13, 3764, 11, 577, 341, 2170, 26749, 11, 321, 434, 516, 281, 751, 466, 309, 294, 257, 707, 857, 13, 1779, 586, 11, 437, 291, 434, 1237, 412, 307, 257, 1329, 295, 1045, 16944, 13, 509, 815, 917, 493, 1951, 428, 1461, 11, 257, 1412, 3877, 300, 311, 257, 1329, 295, 1045, 16944, 13, 509, 815, 1320, 341, 281, 264, 6133, 1639, 293, 584, 11, 50714], "temperature": 0.0, "avg_logprob": -0.1643846807345538, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.14528240263462067}, {"id": 272, "seek": 214428, "start": 2144.28, "end": 2157.28, "text": " evaluate this, in which case it's going to try to interpret, it's going to try to evaluate each of those symbols and find out its value and treat the first one as if it was a function. But we're not there yet.", "tokens": [50364, 13059, 341, 11, 294, 597, 1389, 309, 311, 516, 281, 853, 281, 7302, 11, 309, 311, 516, 281, 853, 281, 13059, 1184, 295, 729, 16944, 293, 915, 484, 1080, 2158, 293, 2387, 264, 700, 472, 382, 498, 309, 390, 257, 2445, 13, 583, 321, 434, 406, 456, 1939, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10630041010239545, "compression_ratio": 1.726530612244898, "no_speech_prob": 0.23579441010951996}, {"id": 273, "seek": 214428, "start": 2157.28, "end": 2173.28, "text": " So that is a list of three symbols. The list at the end is a list of one symbol and three numbers. So heterogeneous collections are supported. In all cases, I didn't necessarily show them everywhere, but they are.", "tokens": [51014, 407, 300, 307, 257, 1329, 295, 1045, 16944, 13, 440, 1329, 412, 264, 917, 307, 257, 1329, 295, 472, 5986, 293, 1045, 3547, 13, 407, 20789, 31112, 16641, 366, 8104, 13, 682, 439, 3331, 11, 286, 994, 380, 4725, 855, 552, 5315, 11, 457, 436, 366, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10630041010239545, "compression_ratio": 1.726530612244898, "no_speech_prob": 0.23579441010951996}, {"id": 274, "seek": 217328, "start": 2173.28, "end": 2194.28, "text": " It's not a list of something. It's a list. It can contain anything and any mix of things. Okay, with lists, the next thing is a vector uses square brackets. That should imply I would hope for Java programmers and people from that domain array, right? Square brackets mean arrays.", "tokens": [50364, 467, 311, 406, 257, 1329, 295, 746, 13, 467, 311, 257, 1329, 13, 467, 393, 5304, 1340, 293, 604, 2890, 295, 721, 13, 1033, 11, 365, 14511, 11, 264, 958, 551, 307, 257, 8062, 4960, 3732, 26179, 13, 663, 820, 33616, 286, 576, 1454, 337, 10745, 41504, 293, 561, 490, 300, 9274, 10225, 11, 558, 30, 16463, 26179, 914, 41011, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17601164304293118, "compression_ratio": 1.55, "no_speech_prob": 0.03834012150764465}, {"id": 275, "seek": 219428, "start": 2195.28, "end": 2216.28, "text": " Well, they do now. So a vector is like an array. In particular, it supports efficient indexed access. It's an expectation you would have of a vector you wouldn't have of a linked list. That getting at the 50th guy is fast. It's not going to be 50 steps to do that.", "tokens": [50414, 1042, 11, 436, 360, 586, 13, 407, 257, 8062, 307, 411, 364, 10225, 13, 682, 1729, 11, 309, 9346, 7148, 8186, 292, 2105, 13, 467, 311, 364, 14334, 291, 576, 362, 295, 257, 8062, 291, 2759, 380, 362, 295, 257, 9408, 1329, 13, 663, 1242, 412, 264, 2625, 392, 2146, 307, 2370, 13, 467, 311, 406, 516, 281, 312, 2625, 4439, 281, 360, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09527983872786812, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.08734831213951111}, {"id": 276, "seek": 221628, "start": 2217.28, "end": 2233.28, "text": " And the closure vectors meet that performance expectation. Fast indexing. In addition, it's a little bit like Java util vector or array list in that it supports growing and in this case, at the end.", "tokens": [50414, 400, 264, 24653, 18875, 1677, 300, 3389, 14334, 13, 15968, 8186, 278, 13, 682, 4500, 11, 309, 311, 257, 707, 857, 411, 10745, 4976, 8062, 420, 10225, 1329, 294, 300, 309, 9346, 4194, 293, 294, 341, 1389, 11, 412, 264, 917, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1540732806241965, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.1109677255153656}, {"id": 277, "seek": 221628, "start": 2233.28, "end": 2243.28, "text": " And that also is efficient, as efficient as your expectation would be of a ray list. That's a constant time operation to put things at the end.", "tokens": [51214, 400, 300, 611, 307, 7148, 11, 382, 7148, 382, 428, 14334, 576, 312, 295, 257, 18592, 1329, 13, 663, 311, 257, 5754, 565, 6916, 281, 829, 721, 412, 264, 917, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1540732806241965, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.1109677255153656}, {"id": 278, "seek": 224328, "start": 2244.28, "end": 2251.28, "text": " Similarly, it can hold anything. The first is a vector of five numbers. The second is a vector of three symbols.", "tokens": [50414, 13157, 11, 309, 393, 1797, 1340, 13, 440, 700, 307, 257, 8062, 295, 1732, 3547, 13, 440, 1150, 307, 257, 8062, 295, 1045, 16944, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1402108520269394, "compression_ratio": 1.4772727272727273, "no_speech_prob": 0.0021141585893929005}, {"id": 279, "seek": 224328, "start": 2251.28, "end": 2267.28, "text": " All the collections can be heterogeneous. Okay, so far. So that's going to behave like an array in terms of being able to find the element quickly.", "tokens": [50764, 1057, 264, 16641, 393, 312, 20789, 31112, 13, 1033, 11, 370, 1400, 13, 407, 300, 311, 516, 281, 15158, 411, 364, 10225, 294, 2115, 295, 885, 1075, 281, 915, 264, 4478, 2661, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1402108520269394, "compression_ratio": 1.4772727272727273, "no_speech_prob": 0.0021141585893929005}, {"id": 280, "seek": 226728, "start": 2267.28, "end": 2282.28, "text": " And finally, as a core data structure, we have maps. And a map is like, well, it's like a Java map or any kind of associative data structure in providing a relationship between a key and a value.", "tokens": [50364, 400, 2721, 11, 382, 257, 4965, 1412, 3877, 11, 321, 362, 11317, 13, 400, 257, 4471, 307, 411, 11, 731, 11, 309, 311, 411, 257, 10745, 4471, 420, 604, 733, 295, 4180, 1166, 1412, 3877, 294, 6530, 257, 2480, 1296, 257, 2141, 293, 257, 2158, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12958571434020996, "compression_ratio": 1.4233576642335766, "no_speech_prob": 0.0038789459504187107}, {"id": 281, "seek": 228228, "start": 2282.28, "end": 2298.28, "text": " Each key occurring only once and having a mapping to a value. So the way they're represented is in curly braces. And they're represented simply as key, value, key, value, key, value.", "tokens": [50364, 6947, 2141, 18386, 787, 1564, 293, 1419, 257, 18350, 281, 257, 2158, 13, 407, 264, 636, 436, 434, 10379, 307, 294, 32066, 41537, 13, 400, 436, 434, 10379, 2935, 382, 2141, 11, 2158, 11, 2141, 11, 2158, 11, 2141, 11, 2158, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1261583203854768, "compression_ratio": 1.5041322314049588, "no_speech_prob": 0.3094719350337982}, {"id": 282, "seek": 229828, "start": 2298.28, "end": 2313.28, "text": " Again, the commas don't matter. So they're whitespace. They get eliminated. For instance, in the second map you see there, that's a map of the number one to the string ethyl and the number two to the string fred.", "tokens": [50364, 3764, 11, 264, 800, 296, 500, 380, 1871, 13, 407, 436, 434, 21909, 17940, 13, 814, 483, 20308, 13, 1171, 5197, 11, 294, 264, 1150, 4471, 291, 536, 456, 11, 300, 311, 257, 4471, 295, 264, 1230, 472, 281, 264, 6798, 1030, 3495, 75, 293, 264, 1230, 732, 281, 264, 6798, 283, 986, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10328083688562567, "compression_ratio": 1.625, "no_speech_prob": 0.024362683296203613}, {"id": 283, "seek": 229828, "start": 2313.28, "end": 2324.28, "text": " You don't need the commas. And the expectation with the map is that it provides fast access to the value at a particular key.", "tokens": [51114, 509, 500, 380, 643, 264, 800, 296, 13, 400, 264, 14334, 365, 264, 4471, 307, 300, 309, 6417, 2370, 2105, 281, 264, 2158, 412, 257, 1729, 2141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10328083688562567, "compression_ratio": 1.625, "no_speech_prob": 0.024362683296203613}, {"id": 284, "seek": 232428, "start": 2324.28, "end": 2343.28, "text": " There are usually two kinds of maps you would encounter in ordinary programming languages. One would be sorted. Some sort of sorted map, in which case the access is going to be typically log n to find a particular guy, depending on how many things are in the map.", "tokens": [50364, 821, 366, 2673, 732, 3685, 295, 11317, 291, 576, 8593, 294, 10547, 9410, 8650, 13, 1485, 576, 312, 25462, 13, 2188, 1333, 295, 25462, 4471, 11, 294, 597, 1389, 264, 2105, 307, 516, 281, 312, 5850, 3565, 297, 281, 915, 257, 1729, 2146, 11, 5413, 322, 577, 867, 721, 366, 294, 264, 4471, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14717064232661806, "compression_ratio": 1.4858757062146892, "no_speech_prob": 0.031556688249111176}, {"id": 285, "seek": 234328, "start": 2343.28, "end": 2358.28, "text": " Because they use trees or red, black trees and things like that. And closure does have sorted maps. The one you get from the literal representation like this is a hash map. And the expectation of a hash map is constant or near constant time lookup of values at keys.", "tokens": [50364, 1436, 436, 764, 5852, 420, 2182, 11, 2211, 5852, 293, 721, 411, 300, 13, 400, 24653, 775, 362, 25462, 11317, 13, 440, 472, 291, 483, 490, 264, 20411, 10290, 411, 341, 307, 257, 22019, 4471, 13, 400, 264, 14334, 295, 257, 22019, 4471, 307, 5754, 420, 2651, 5754, 565, 574, 1010, 295, 4190, 412, 9317, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09231606589423286, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.3197994530200958}, {"id": 286, "seek": 234328, "start": 2358.28, "end": 2369.28, "text": " And that maps to hash tables. So what you have in the closure literal maps is the equivalent of a hash table. It's fast.", "tokens": [51114, 400, 300, 11317, 281, 22019, 8020, 13, 407, 437, 291, 362, 294, 264, 24653, 20411, 11317, 307, 264, 10344, 295, 257, 22019, 3199, 13, 467, 311, 2370, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09231606589423286, "compression_ratio": 1.759090909090909, "no_speech_prob": 0.3197994530200958}, {"id": 287, "seek": 236928, "start": 2369.28, "end": 2371.28, "text": " Okay, so far?", "tokens": [50364, 1033, 11, 370, 1400, 30, 50464], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 288, "seek": 236928, "start": 2371.28, "end": 2377.28, "text": " I think if I introduce another key, another key in this.", "tokens": [50464, 286, 519, 498, 286, 5366, 1071, 2141, 11, 1071, 2141, 294, 341, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 289, "seek": 236928, "start": 2377.28, "end": 2378.28, "text": " Another key?", "tokens": [50764, 3996, 2141, 30, 50814], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 290, "seek": 236928, "start": 2378.28, "end": 2380.28, "text": " A, A.", "tokens": [50814, 316, 11, 316, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 291, "seek": 236928, "start": 2380.28, "end": 2382.28, "text": " It will be replaced. Do you want to?", "tokens": [50914, 467, 486, 312, 10772, 13, 1144, 291, 528, 281, 30, 51014], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 292, "seek": 236928, "start": 2382.28, "end": 2384.28, "text": " The last number replaced.", "tokens": [51014, 440, 1036, 1230, 10772, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 293, "seek": 236928, "start": 2384.28, "end": 2389.28, "text": " Correct. There are only one instance of a key in a map. Is that your question?", "tokens": [51114, 12753, 13, 821, 366, 787, 472, 5197, 295, 257, 2141, 294, 257, 4471, 13, 1119, 300, 428, 1168, 30, 51364], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 294, "seek": 236928, "start": 2389.28, "end": 2390.28, "text": " Yes.", "tokens": [51364, 1079, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 295, "seek": 236928, "start": 2390.28, "end": 2393.28, "text": " Yes, so if you were to say, the function that...", "tokens": [51414, 1079, 11, 370, 498, 291, 645, 281, 584, 11, 264, 2445, 300, 485, 51564], "temperature": 0.0, "avg_logprob": -0.3176824488538377, "compression_ratio": 1.5240641711229947, "no_speech_prob": 0.24894319474697113}, {"id": 296, "seek": 239328, "start": 2393.28, "end": 2396.28, "text": " No, I'm saying if I type it out like this.", "tokens": [50364, 883, 11, 286, 478, 1566, 498, 286, 2010, 309, 484, 411, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2564852997496888, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.10721728950738907}, {"id": 297, "seek": 239328, "start": 2396.28, "end": 2397.28, "text": " Yes?", "tokens": [50514, 1079, 30, 50564], "temperature": 0.0, "avg_logprob": -0.2564852997496888, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.10721728950738907}, {"id": 298, "seek": 239328, "start": 2397.28, "end": 2403.28, "text": " With the comma and up the cv with a again. Is it an error or is it just a replacement?", "tokens": [50564, 2022, 264, 22117, 293, 493, 264, 269, 85, 365, 257, 797, 13, 1119, 309, 364, 6713, 420, 307, 309, 445, 257, 14419, 30, 50864], "temperature": 0.0, "avg_logprob": -0.2564852997496888, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.10721728950738907}, {"id": 299, "seek": 239328, "start": 2403.28, "end": 2413.28, "text": " It's probably a replacement. I say in the same thing, yes. I don't think it's an error. That's a good question. I might type it in later for you.", "tokens": [50864, 467, 311, 1391, 257, 14419, 13, 286, 584, 294, 264, 912, 551, 11, 2086, 13, 286, 500, 380, 519, 309, 311, 364, 6713, 13, 663, 311, 257, 665, 1168, 13, 286, 1062, 2010, 309, 294, 1780, 337, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2564852997496888, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.10721728950738907}, {"id": 300, "seek": 239328, "start": 2413.28, "end": 2417.28, "text": " Okay.", "tokens": [51364, 1033, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2564852997496888, "compression_ratio": 1.4973821989528795, "no_speech_prob": 0.10721728950738907}, {"id": 301, "seek": 241728, "start": 2418.28, "end": 2423.28, "text": " Yeah, I mean...", "tokens": [50414, 865, 11, 286, 914, 485, 50664], "temperature": 0.0, "avg_logprob": -0.15525690379895662, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.06808461248874664}, {"id": 302, "seek": 241728, "start": 2423.28, "end": 2428.28, "text": " It's the same thing.", "tokens": [50664, 467, 311, 264, 912, 551, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15525690379895662, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.06808461248874664}, {"id": 303, "seek": 241728, "start": 2428.28, "end": 2435.28, "text": " Well, but there's no associated values. So Fred will be there. So let's talk about sets. The fourth thing I'm showing you here is sets.", "tokens": [50914, 1042, 11, 457, 456, 311, 572, 6615, 4190, 13, 407, 10112, 486, 312, 456, 13, 407, 718, 311, 751, 466, 6352, 13, 440, 6409, 551, 286, 478, 4099, 291, 510, 307, 6352, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15525690379895662, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.06808461248874664}, {"id": 304, "seek": 241728, "start": 2435.28, "end": 2444.28, "text": " Sets are a set of unique values. Each value occurs only once in the set. And really the only thing the set can do for you is to tell you whether or not something's in it.", "tokens": [51264, 318, 1385, 366, 257, 992, 295, 3845, 4190, 13, 6947, 2158, 11843, 787, 1564, 294, 264, 992, 13, 400, 534, 264, 787, 551, 264, 992, 393, 360, 337, 291, 307, 281, 980, 291, 1968, 420, 406, 746, 311, 294, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15525690379895662, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.06808461248874664}, {"id": 305, "seek": 244428, "start": 2444.28, "end": 2449.28, "text": " There's no associated values. Just does the set contain this key? Do you have a question?", "tokens": [50364, 821, 311, 572, 6615, 4190, 13, 1449, 775, 264, 992, 5304, 341, 2141, 30, 1144, 291, 362, 257, 1168, 30, 50614], "temperature": 0.0, "avg_logprob": -0.13372208642177894, "compression_ratio": 1.4671052631578947, "no_speech_prob": 0.00154751050285995}, {"id": 306, "seek": 244428, "start": 2449.28, "end": 2450.28, "text": " Yes.", "tokens": [50614, 1079, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13372208642177894, "compression_ratio": 1.4671052631578947, "no_speech_prob": 0.00154751050285995}, {"id": 307, "seek": 244428, "start": 2456.28, "end": 2466.28, "text": " There are sorted sets and hash sets. Same thing as with the maps. The sets here are hash sets. So no, the order is not retained.", "tokens": [50964, 821, 366, 25462, 6352, 293, 22019, 6352, 13, 10635, 551, 382, 365, 264, 11317, 13, 440, 6352, 510, 366, 22019, 6352, 13, 407, 572, 11, 264, 1668, 307, 406, 33438, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13372208642177894, "compression_ratio": 1.4671052631578947, "no_speech_prob": 0.00154751050285995}, {"id": 308, "seek": 246628, "start": 2466.28, "end": 2471.28, "text": " You can request a sorted set and the order will be the sort order.", "tokens": [50364, 509, 393, 5308, 257, 25462, 992, 293, 264, 1668, 486, 312, 264, 1333, 1668, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14725621541341147, "compression_ratio": 1.8, "no_speech_prob": 0.014922328293323517}, {"id": 309, "seek": 246628, "start": 2471.28, "end": 2476.28, "text": " Does that answer your question? Okay.", "tokens": [50614, 4402, 300, 1867, 428, 1168, 30, 1033, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14725621541341147, "compression_ratio": 1.8, "no_speech_prob": 0.014922328293323517}, {"id": 310, "seek": 246628, "start": 2476.28, "end": 2479.28, "text": " What is the test for equality?", "tokens": [50864, 708, 307, 264, 1500, 337, 14949, 30, 51014], "temperature": 0.0, "avg_logprob": -0.14725621541341147, "compression_ratio": 1.8, "no_speech_prob": 0.014922328293323517}, {"id": 311, "seek": 246628, "start": 2479.28, "end": 2492.28, "text": " What is the test for equality? Equal. The equal sign is the test for equality. And equality means the same thing for everything in closure. It means equal value.", "tokens": [51014, 708, 307, 264, 1500, 337, 14949, 30, 15624, 304, 13, 440, 2681, 1465, 307, 264, 1500, 337, 14949, 13, 400, 14949, 1355, 264, 912, 551, 337, 1203, 294, 24653, 13, 467, 1355, 2681, 2158, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14725621541341147, "compression_ratio": 1.8, "no_speech_prob": 0.014922328293323517}, {"id": 312, "seek": 249228, "start": 2493.28, "end": 2503.28, "text": " You'll see that closure definitely de-emphasizes identity and completely. In fact, there is an identity function and I have yet to use it.", "tokens": [50414, 509, 603, 536, 300, 24653, 2138, 368, 12, 443, 7485, 5660, 6575, 293, 2584, 13, 682, 1186, 11, 456, 307, 364, 6575, 2445, 293, 286, 362, 1939, 281, 764, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10576563892942487, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.010771632194519043}, {"id": 313, "seek": 249228, "start": 2503.28, "end": 2517.28, "text": " Closure is about values. Identical contents are identical from by equals. That's made faster than you might imagine by caching hash values.", "tokens": [50914, 2033, 7641, 307, 466, 4190, 13, 25905, 804, 15768, 366, 14800, 490, 538, 6915, 13, 663, 311, 1027, 4663, 813, 291, 1062, 3811, 538, 269, 2834, 22019, 4190, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10576563892942487, "compression_ratio": 1.5027027027027027, "no_speech_prob": 0.010771632194519043}, {"id": 314, "seek": 251728, "start": 2518.28, "end": 2521.28, "text": " But equality is equality of value in closure.", "tokens": [50414, 583, 14949, 307, 14949, 295, 2158, 294, 24653, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2328951388974733, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.008565032854676247}, {"id": 315, "seek": 251728, "start": 2521.28, "end": 2525.28, "text": " And this immutability helps?", "tokens": [50564, 400, 341, 3397, 325, 2310, 3665, 30, 50764], "temperature": 0.0, "avg_logprob": -0.2328951388974733, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.008565032854676247}, {"id": 316, "seek": 251728, "start": 2525.28, "end": 2535.28, "text": " Immutability helps certainly. Well, if you've ever read Henry Baker's paper on EGAL, closure implements EGAL. Finally.", "tokens": [50764, 17322, 325, 2310, 3665, 3297, 13, 1042, 11, 498, 291, 600, 1562, 1401, 11085, 25780, 311, 3035, 322, 462, 38, 3427, 11, 24653, 704, 17988, 462, 38, 3427, 13, 6288, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2328951388974733, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.008565032854676247}, {"id": 317, "seek": 251728, "start": 2535.28, "end": 2540.28, "text": " If you haven't, don't worry about it.", "tokens": [51264, 759, 291, 2378, 380, 11, 500, 380, 3292, 466, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2328951388974733, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.008565032854676247}, {"id": 318, "seek": 251728, "start": 2540.28, "end": 2543.28, "text": " So yes, equality is equality of value.", "tokens": [51514, 407, 2086, 11, 14949, 307, 14949, 295, 2158, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2328951388974733, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.008565032854676247}, {"id": 319, "seek": 254328, "start": 2543.28, "end": 2548.28, "text": " All right. Yes. Hi, Rob.", "tokens": [50364, 1057, 558, 13, 1079, 13, 2421, 11, 5424, 13, 50614], "temperature": 0.0, "avg_logprob": -0.26394515567355686, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0692031979560852}, {"id": 320, "seek": 254328, "start": 2548.28, "end": 2555.28, "text": " If you were going to Java, you would need an active Java?", "tokens": [50614, 759, 291, 645, 516, 281, 10745, 11, 291, 576, 643, 364, 4967, 10745, 30, 50964], "temperature": 0.0, "avg_logprob": -0.26394515567355686, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0692031979560852}, {"id": 321, "seek": 254328, "start": 2555.28, "end": 2562.28, "text": " No, you can make arrays and you can interact with Java arrays that are arrays of either objects or native arrays.", "tokens": [50964, 883, 11, 291, 393, 652, 41011, 293, 291, 393, 4648, 365, 10745, 41011, 300, 366, 41011, 295, 2139, 6565, 420, 8470, 41011, 13, 51314], "temperature": 0.0, "avg_logprob": -0.26394515567355686, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0692031979560852}, {"id": 322, "seek": 254328, "start": 2562.28, "end": 2567.28, "text": " You can say float array and size and you'll get an array of floats.", "tokens": [51314, 509, 393, 584, 15706, 10225, 293, 2744, 293, 291, 603, 483, 364, 10225, 295, 37878, 13, 51564], "temperature": 0.0, "avg_logprob": -0.26394515567355686, "compression_ratio": 1.5808383233532934, "no_speech_prob": 0.0692031979560852}, {"id": 323, "seek": 256728, "start": 2567.28, "end": 2574.28, "text": " So you have the ability to do Java stuff. I'm going to emphasize the closure data structures because they let you do what closure lets you do.", "tokens": [50364, 407, 291, 362, 264, 3485, 281, 360, 10745, 1507, 13, 286, 478, 516, 281, 16078, 264, 24653, 1412, 9227, 570, 436, 718, 291, 360, 437, 24653, 6653, 291, 360, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08072080003454331, "compression_ratio": 1.7452229299363058, "no_speech_prob": 0.0144723579287529}, {"id": 324, "seek": 256728, "start": 2574.28, "end": 2581.28, "text": " You can access Java, but if you start accessing mutable things, some of the things closure can do for you, we can't do.", "tokens": [50714, 509, 393, 2105, 10745, 11, 457, 498, 291, 722, 26440, 5839, 712, 721, 11, 512, 295, 264, 721, 24653, 393, 360, 337, 291, 11, 321, 393, 380, 360, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08072080003454331, "compression_ratio": 1.7452229299363058, "no_speech_prob": 0.0144723579287529}, {"id": 325, "seek": 256728, "start": 2581.28, "end": 2584.28, "text": " It doesn't mean you're not allowed to do them.", "tokens": [51064, 467, 1177, 380, 914, 291, 434, 406, 4350, 281, 360, 552, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08072080003454331, "compression_ratio": 1.7452229299363058, "no_speech_prob": 0.0144723579287529}, {"id": 326, "seek": 256728, "start": 2584.28, "end": 2589.28, "text": " But there's no point in me showing you how to interact with the Java, right? Except to show you the syntax, which I might later.", "tokens": [51214, 583, 456, 311, 572, 935, 294, 385, 4099, 291, 577, 281, 4648, 365, 264, 10745, 11, 558, 30, 16192, 281, 855, 291, 264, 28431, 11, 597, 286, 1062, 1780, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08072080003454331, "compression_ratio": 1.7452229299363058, "no_speech_prob": 0.0144723579287529}, {"id": 327, "seek": 256728, "start": 2589.28, "end": 2595.28, "text": " So the last point about this is that everything nests. A key in a map can be another map. It can be a vector.", "tokens": [51464, 407, 264, 1036, 935, 466, 341, 307, 300, 1203, 297, 4409, 13, 316, 2141, 294, 257, 4471, 393, 312, 1071, 4471, 13, 467, 393, 312, 257, 8062, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08072080003454331, "compression_ratio": 1.7452229299363058, "no_speech_prob": 0.0144723579287529}, {"id": 328, "seek": 259528, "start": 2595.28, "end": 2604.28, "text": " Anything can be a key or a value. Because of this equality semantics, there's no problem having a vector or a map whose keys are vectors.", "tokens": [50364, 11998, 393, 312, 257, 2141, 420, 257, 2158, 13, 1436, 295, 341, 14949, 4361, 45298, 11, 456, 311, 572, 1154, 1419, 257, 8062, 420, 257, 4471, 6104, 9317, 366, 18875, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1116865873336792, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.021818291395902634}, {"id": 329, "seek": 259528, "start": 2604.28, "end": 2612.28, "text": " That's perfectly fine. So if you needed to use tuples as keys, you know, pairs of things as keys, that's just completely doable.", "tokens": [50814, 663, 311, 6239, 2489, 13, 407, 498, 291, 2978, 281, 764, 2604, 2622, 382, 9317, 11, 291, 458, 11, 15494, 295, 721, 382, 9317, 11, 300, 311, 445, 2584, 41183, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1116865873336792, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.021818291395902634}, {"id": 330, "seek": 261228, "start": 2612.28, "end": 2624.28, "text": " Well, you can get the hash of a vector.", "tokens": [50364, 1042, 11, 291, 393, 483, 264, 22019, 295, 257, 8062, 13, 50964], "temperature": 0.0, "avg_logprob": -0.4691899299621582, "compression_ratio": 0.9016393442622951, "no_speech_prob": 0.18406081199645996}, {"id": 331, "seek": 261228, "start": 2638.28, "end": 2640.28, "text": " Correct? Right.", "tokens": [51664, 12753, 30, 1779, 13, 51764], "temperature": 0.0, "avg_logprob": -0.4691899299621582, "compression_ratio": 0.9016393442622951, "no_speech_prob": 0.18406081199645996}, {"id": 332, "seek": 264228, "start": 2643.28, "end": 2652.28, "text": " Well, it depends on what you're doing. I would imagine that really complex structures are not frequently used as keys, but they could be.", "tokens": [50414, 1042, 11, 309, 5946, 322, 437, 291, 434, 884, 13, 286, 576, 3811, 300, 534, 3997, 9227, 366, 406, 10374, 1143, 382, 9317, 11, 457, 436, 727, 312, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11076127237348414, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.015869764611124992}, {"id": 333, "seek": 264228, "start": 2652.28, "end": 2664.28, "text": " Can that be helped? Yes. The fact that these are hash by default means that once and once only the hash value of some aggregate structure will be calculated.", "tokens": [50864, 1664, 300, 312, 4254, 30, 1079, 13, 440, 1186, 300, 613, 366, 22019, 538, 7576, 1355, 300, 1564, 293, 1564, 787, 264, 22019, 2158, 295, 512, 26118, 3877, 486, 312, 15598, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11076127237348414, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.015869764611124992}, {"id": 334, "seek": 266428, "start": 2664.28, "end": 2672.28, "text": " And that will be cached. So there's a quick hash test. Otherwise, we do the deep value check.", "tokens": [50364, 400, 300, 486, 312, 269, 15095, 13, 407, 456, 311, 257, 1702, 22019, 1500, 13, 10328, 11, 321, 360, 264, 2452, 2158, 1520, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07467336764280823, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.063571996986866}, {"id": 335, "seek": 266428, "start": 2672.28, "end": 2685.28, "text": " But again, I don't think you're going to encounter complex data structures as hash values that often, but using kind of small things like tuples or other small maps as keys is tremendously useful.", "tokens": [50764, 583, 797, 11, 286, 500, 380, 519, 291, 434, 516, 281, 8593, 3997, 1412, 9227, 382, 22019, 4190, 300, 2049, 11, 457, 1228, 733, 295, 1359, 721, 411, 2604, 2622, 420, 661, 1359, 11317, 382, 9317, 307, 27985, 4420, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07467336764280823, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.063571996986866}, {"id": 336, "seek": 266428, "start": 2685.28, "end": 2690.28, "text": " It's really, really handy to not even have to think about that.", "tokens": [51414, 467, 311, 534, 11, 534, 13239, 281, 406, 754, 362, 281, 519, 466, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07467336764280823, "compression_ratio": 1.5258620689655173, "no_speech_prob": 0.063571996986866}, {"id": 337, "seek": 269028, "start": 2690.28, "end": 2700.28, "text": " I think we got one other closure program arrived. Who can possibly attest, independent of me, how closure's performance is? How's closure's performance?", "tokens": [50364, 286, 519, 321, 658, 472, 661, 24653, 1461, 6678, 13, 2102, 393, 6264, 951, 377, 11, 6695, 295, 385, 11, 577, 24653, 311, 3389, 307, 30, 1012, 311, 24653, 311, 3389, 30, 50864], "temperature": 0.0, "avg_logprob": -0.2628920020126715, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.012986169196665287}, {"id": 338, "seek": 269028, "start": 2700.28, "end": 2707.28, "text": " Fine to me, but I've actually been showing all of this.", "tokens": [50864, 12024, 281, 385, 11, 457, 286, 600, 767, 668, 4099, 439, 295, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2628920020126715, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.012986169196665287}, {"id": 339, "seek": 269028, "start": 2707.28, "end": 2715.28, "text": " Right. Well, now there's some extra numeric goodness in there. But these data structures are pretty good. What's the reality?", "tokens": [51214, 1779, 13, 1042, 11, 586, 456, 311, 512, 2857, 7866, 299, 8387, 294, 456, 13, 583, 613, 1412, 9227, 366, 1238, 665, 13, 708, 311, 264, 4103, 30, 51614], "temperature": 0.0, "avg_logprob": -0.2628920020126715, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.012986169196665287}, {"id": 340, "seek": 271528, "start": 2715.28, "end": 2724.28, "text": " The reality of these data structures is I've tried to keep them all within one to four times a Java data structure, the equivalent Java data structure.", "tokens": [50364, 440, 4103, 295, 613, 1412, 9227, 307, 286, 600, 3031, 281, 1066, 552, 439, 1951, 472, 281, 1451, 1413, 257, 10745, 1412, 3877, 11, 264, 10344, 10745, 1412, 3877, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12778525754629846, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.009258296340703964}, {"id": 341, "seek": 271528, "start": 2724.28, "end": 2732.28, "text": " In other words, hash map, vector. Well, similar lists are pretty straightforward.", "tokens": [50814, 682, 661, 2283, 11, 22019, 4471, 11, 8062, 13, 1042, 11, 2531, 14511, 366, 1238, 15325, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12778525754629846, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.009258296340703964}, {"id": 342, "seek": 271528, "start": 2732.28, "end": 2740.28, "text": " So they're within striking distance. The B side is in a concurrent program, there is no locking necessary for use with these data structures.", "tokens": [51214, 407, 436, 434, 1951, 18559, 4560, 13, 440, 363, 1252, 307, 294, 257, 37702, 1461, 11, 456, 307, 572, 23954, 4818, 337, 764, 365, 613, 1412, 9227, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12778525754629846, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.009258296340703964}, {"id": 343, "seek": 274028, "start": 2740.28, "end": 2747.28, "text": " If you want to make an incremental change through data structure in a certain context, there's no copying required to do that.", "tokens": [50364, 759, 291, 528, 281, 652, 364, 35759, 1319, 807, 1412, 3877, 294, 257, 1629, 4319, 11, 456, 311, 572, 27976, 4739, 281, 360, 300, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08741185069084167, "compression_ratio": 1.6781115879828326, "no_speech_prob": 0.027947556227445602}, {"id": 344, "seek": 274028, "start": 2747.28, "end": 2752.28, "text": " So some of these other costs that would be very high with immutable data structure vanish.", "tokens": [50714, 407, 512, 295, 613, 661, 5497, 300, 576, 312, 588, 1090, 365, 3397, 32148, 1412, 3877, 43584, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08741185069084167, "compression_ratio": 1.6781115879828326, "no_speech_prob": 0.027947556227445602}, {"id": 345, "seek": 274028, "start": 2752.28, "end": 2755.28, "text": " So you have to be very careful in looking at that.", "tokens": [50964, 407, 291, 362, 281, 312, 588, 5026, 294, 1237, 412, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08741185069084167, "compression_ratio": 1.6781115879828326, "no_speech_prob": 0.027947556227445602}, {"id": 346, "seek": 274028, "start": 2755.28, "end": 2763.28, "text": " The other thing that's astounding to me, at least, is that the lookup time, again, the add times are higher than hash map.", "tokens": [51114, 440, 661, 551, 300, 311, 5357, 24625, 281, 385, 11, 412, 1935, 11, 307, 300, 264, 574, 1010, 565, 11, 797, 11, 264, 909, 1413, 366, 2946, 813, 22019, 4471, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08741185069084167, "compression_ratio": 1.6781115879828326, "no_speech_prob": 0.027947556227445602}, {"id": 347, "seek": 276328, "start": 2763.28, "end": 2773.28, "text": " But the lookup times can be much better because this has better hash cash locality than a big array for hash table.", "tokens": [50364, 583, 264, 574, 1010, 1413, 393, 312, 709, 1101, 570, 341, 575, 1101, 22019, 6388, 1628, 1860, 813, 257, 955, 10225, 337, 22019, 3199, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1337017266147108, "compression_ratio": 1.57, "no_speech_prob": 0.025916000828146935}, {"id": 348, "seek": 276328, "start": 2773.28, "end": 2783.28, "text": " Okay, we're all good on this. I probably have to move a little bit quicker. Yes, more quickly.", "tokens": [50864, 1033, 11, 321, 434, 439, 665, 322, 341, 13, 286, 1391, 362, 281, 1286, 257, 707, 857, 16255, 13, 1079, 11, 544, 2661, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1337017266147108, "compression_ratio": 1.57, "no_speech_prob": 0.025916000828146935}, {"id": 349, "seek": 276328, "start": 2783.28, "end": 2789.28, "text": " There is destructuring. Yes, I actually won't get to talk about that today, but there is destructuring.", "tokens": [51364, 821, 307, 2677, 1757, 1345, 13, 1079, 11, 286, 767, 1582, 380, 483, 281, 751, 466, 300, 965, 11, 457, 456, 307, 2677, 1757, 1345, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1337017266147108, "compression_ratio": 1.57, "no_speech_prob": 0.025916000828146935}, {"id": 350, "seek": 278928, "start": 2789.28, "end": 2796.28, "text": " There is not pattern matching. Okay, but there is destructuring to arbitrary depth of all of these.", "tokens": [50364, 821, 307, 406, 5102, 14324, 13, 1033, 11, 457, 456, 307, 2677, 1757, 1345, 281, 23211, 7161, 295, 439, 295, 613, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10769395718629333, "compression_ratio": 1.6729857819905214, "no_speech_prob": 0.014938289299607277}, {"id": 351, "seek": 278928, "start": 2796.28, "end": 2804.28, "text": " Destructuring means a way to easily say, I want to make this set of symbols that I express in a similar data structure,", "tokens": [50714, 16339, 1757, 1345, 1355, 257, 636, 281, 3612, 584, 11, 286, 528, 281, 652, 341, 992, 295, 16944, 300, 286, 5109, 294, 257, 2531, 1412, 3877, 11, 51114], "temperature": 0.0, "avg_logprob": -0.10769395718629333, "compression_ratio": 1.6729857819905214, "no_speech_prob": 0.014938289299607277}, {"id": 352, "seek": 278928, "start": 2804.28, "end": 2808.28, "text": " map to corresponding parts of a complex data structure on past.", "tokens": [51114, 4471, 281, 11760, 3166, 295, 257, 3997, 1412, 3877, 322, 1791, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10769395718629333, "compression_ratio": 1.6729857819905214, "no_speech_prob": 0.014938289299607277}, {"id": 353, "seek": 278928, "start": 2808.28, "end": 2814.28, "text": " Clojure has that. It has some really neat destructuring capabilities.", "tokens": [51314, 31901, 73, 540, 575, 300, 13, 467, 575, 512, 534, 10654, 2677, 1757, 1345, 10862, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10769395718629333, "compression_ratio": 1.6729857819905214, "no_speech_prob": 0.014938289299607277}, {"id": 354, "seek": 281428, "start": 2814.28, "end": 2820.28, "text": " All right, so what's the syntax of closure? We just did it.", "tokens": [50364, 1057, 558, 11, 370, 437, 311, 264, 28431, 295, 24653, 30, 492, 445, 630, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08530465258827692, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.004059409257024527}, {"id": 355, "seek": 281428, "start": 2820.28, "end": 2830.28, "text": " I'm not going to talk about semicolons, curly braces, you know, when you have to say this, when you have to have a new line, or anything else.", "tokens": [50664, 286, 478, 406, 516, 281, 751, 466, 27515, 401, 892, 11, 32066, 41537, 11, 291, 458, 11, 562, 291, 362, 281, 584, 341, 11, 562, 291, 362, 281, 362, 257, 777, 1622, 11, 420, 1340, 1646, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08530465258827692, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.004059409257024527}, {"id": 356, "seek": 281428, "start": 2830.28, "end": 2839.28, "text": " Because the structure of a closure program is a data structure or a series of data structures.", "tokens": [51164, 1436, 264, 3877, 295, 257, 24653, 1461, 307, 257, 1412, 3877, 420, 257, 2638, 295, 1412, 9227, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08530465258827692, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.004059409257024527}, {"id": 357, "seek": 283928, "start": 2839.28, "end": 2847.28, "text": " There is no other stuff. There are no rules about where things go. There are no precedence rules. There's nothing else.", "tokens": [50364, 821, 307, 572, 661, 1507, 13, 821, 366, 572, 4474, 466, 689, 721, 352, 13, 821, 366, 572, 16969, 655, 4474, 13, 821, 311, 1825, 1646, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08641469172942333, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.008688016794621944}, {"id": 358, "seek": 283928, "start": 2847.28, "end": 2854.28, "text": " You write a closure program by writing the data structures I just showed you. That's it.", "tokens": [50764, 509, 2464, 257, 24653, 1461, 538, 3579, 264, 1412, 9227, 286, 445, 4712, 291, 13, 663, 311, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08641469172942333, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.008688016794621944}, {"id": 359, "seek": 283928, "start": 2854.28, "end": 2860.28, "text": " I'll show you.", "tokens": [51114, 286, 603, 855, 291, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08641469172942333, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.008688016794621944}, {"id": 360, "seek": 283928, "start": 2860.28, "end": 2866.28, "text": " So you write a program by writing data structures. The data structures are the code.", "tokens": [51414, 407, 291, 2464, 257, 1461, 538, 3579, 1412, 9227, 13, 440, 1412, 9227, 366, 264, 3089, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08641469172942333, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.008688016794621944}, {"id": 361, "seek": 286628, "start": 2866.28, "end": 2873.28, "text": " That has huge implications. It's, you know, it is the nature of LISP.", "tokens": [50364, 663, 575, 2603, 16602, 13, 467, 311, 11, 291, 458, 11, 309, 307, 264, 3687, 295, 441, 2343, 47, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12143167372672789, "compression_ratio": 1.4088050314465408, "no_speech_prob": 0.010422863066196442}, {"id": 362, "seek": 286628, "start": 2873.28, "end": 2878.28, "text": " There's a fancy name for it called Homo Iconicity.", "tokens": [50714, 821, 311, 257, 10247, 1315, 337, 309, 1219, 389, 13395, 286, 1671, 44198, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12143167372672789, "compression_ratio": 1.4088050314465408, "no_speech_prob": 0.010422863066196442}, {"id": 363, "seek": 286628, "start": 2878.28, "end": 2885.28, "text": " And it means that the representation of the program is done in the core data structures of the program.", "tokens": [50964, 400, 309, 1355, 300, 264, 10290, 295, 264, 1461, 307, 1096, 294, 264, 4965, 1412, 9227, 295, 264, 1461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12143167372672789, "compression_ratio": 1.4088050314465408, "no_speech_prob": 0.010422863066196442}, {"id": 364, "seek": 288528, "start": 2885.28, "end": 2896.28, "text": " Which means that programs are amenable to processing by other programs because they're data structures.", "tokens": [50364, 3013, 1355, 300, 4268, 366, 18497, 712, 281, 9007, 538, 661, 4268, 570, 436, 434, 1412, 9227, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09853288497047863, "compression_ratio": 1.5176991150442478, "no_speech_prob": 0.01340987253934145}, {"id": 365, "seek": 288528, "start": 2896.28, "end": 2901.28, "text": " So I'm not going to talk anymore about text-based syntax because there is no more.", "tokens": [50914, 407, 286, 478, 406, 516, 281, 751, 3602, 466, 2487, 12, 6032, 28431, 570, 456, 307, 572, 544, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09853288497047863, "compression_ratio": 1.5176991150442478, "no_speech_prob": 0.01340987253934145}, {"id": 366, "seek": 288528, "start": 2901.28, "end": 2906.28, "text": " Now, many people claim of LISPs, well, LISPs has no syntax. And that's not really true.", "tokens": [51164, 823, 11, 867, 561, 3932, 295, 441, 2343, 23043, 11, 731, 11, 441, 2343, 23043, 575, 572, 28431, 13, 400, 300, 311, 406, 534, 2074, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09853288497047863, "compression_ratio": 1.5176991150442478, "no_speech_prob": 0.01340987253934145}, {"id": 367, "seek": 288528, "start": 2906.28, "end": 2910.28, "text": " It doesn't have all this little fiddly character syntax necessarily.", "tokens": [51414, 467, 1177, 380, 362, 439, 341, 707, 283, 14273, 356, 2517, 28431, 4725, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09853288497047863, "compression_ratio": 1.5176991150442478, "no_speech_prob": 0.01340987253934145}, {"id": 368, "seek": 291028, "start": 2910.28, "end": 2915.28, "text": " There is syntax to the interpretation of the data structures.", "tokens": [50364, 821, 307, 28431, 281, 264, 14174, 295, 264, 1412, 9227, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08900094769664646, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.005297157913446426}, {"id": 369, "seek": 291028, "start": 2915.28, "end": 2920.28, "text": " You know, in those, you're going to see a lot of lists. They have different things at the front.", "tokens": [50614, 509, 458, 11, 294, 729, 11, 291, 434, 516, 281, 536, 257, 688, 295, 14511, 13, 814, 362, 819, 721, 412, 264, 1868, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08900094769664646, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.005297157913446426}, {"id": 370, "seek": 291028, "start": 2920.28, "end": 2926.28, "text": " The thing at the front will tell you the meaning of the rest.", "tokens": [50864, 440, 551, 412, 264, 1868, 486, 980, 291, 264, 3620, 295, 264, 1472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08900094769664646, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.005297157913446426}, {"id": 371, "seek": 291028, "start": 2926.28, "end": 2931.28, "text": " All right. So let's talk a little bit about evaluations. How does this all work?", "tokens": [51164, 1057, 558, 13, 407, 718, 311, 751, 257, 707, 857, 466, 43085, 13, 1012, 775, 341, 439, 589, 30, 51414], "temperature": 0.0, "avg_logprob": -0.08900094769664646, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.005297157913446426}, {"id": 372, "seek": 291028, "start": 2931.28, "end": 2936.28, "text": " This is, we should all know, from Java or many other languages like Java.", "tokens": [51414, 639, 307, 11, 321, 820, 439, 458, 11, 490, 10745, 420, 867, 661, 8650, 411, 10745, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08900094769664646, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.005297157913446426}, {"id": 373, "seek": 293628, "start": 2936.28, "end": 2941.28, "text": " It types our program into a text file and we save it.", "tokens": [50364, 467, 3467, 527, 1461, 666, 257, 2487, 3991, 293, 321, 3155, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13708945556923194, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.033405862748622894}, {"id": 374, "seek": 293628, "start": 2941.28, "end": 2951.28, "text": " And then we send those characters of that text to the compiler who has a very involved, you know, abstract syntax tree", "tokens": [50614, 400, 550, 321, 2845, 729, 4342, 295, 300, 2487, 281, 264, 31958, 567, 575, 257, 588, 3288, 11, 291, 458, 11, 12649, 28431, 4230, 51114], "temperature": 0.0, "avg_logprob": -0.13708945556923194, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.033405862748622894}, {"id": 375, "seek": 293628, "start": 2951.28, "end": 2955.28, "text": " and parser and lexer that interpret the rules of the language.", "tokens": [51114, 293, 21156, 260, 293, 476, 87, 260, 300, 7302, 264, 4474, 295, 264, 2856, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13708945556923194, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.033405862748622894}, {"id": 376, "seek": 293628, "start": 2955.28, "end": 2958.28, "text": " This is what constitutes a character. This is what constitutes a number.", "tokens": [51314, 639, 307, 437, 44204, 257, 2517, 13, 639, 307, 437, 44204, 257, 1230, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13708945556923194, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.033405862748622894}, {"id": 377, "seek": 293628, "start": 2958.28, "end": 2965.28, "text": " And then furthermore, you know, if you've said if and you put parens and then you said some stuff and you put a semicolon", "tokens": [51464, 400, 550, 3052, 3138, 11, 291, 458, 11, 498, 291, 600, 848, 498, 293, 291, 829, 7448, 3695, 293, 550, 291, 848, 512, 1507, 293, 291, 829, 257, 27515, 38780, 51814], "temperature": 0.0, "avg_logprob": -0.13708945556923194, "compression_ratio": 1.799163179916318, "no_speech_prob": 0.033405862748622894}, {"id": 378, "seek": 296528, "start": 2966.28, "end": 2969.28, "text": " and you're still in this construct called if, things like that.", "tokens": [50414, 293, 291, 434, 920, 294, 341, 7690, 1219, 498, 11, 721, 411, 300, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 379, "seek": 296528, "start": 2969.28, "end": 2972.28, "text": " It knows all about that and it deals with the text.", "tokens": [50564, 467, 3255, 439, 466, 300, 293, 309, 11215, 365, 264, 2487, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 380, "seek": 296528, "start": 2972.28, "end": 2977.28, "text": " And it will tell you if you've met the requirements in terms of it being a valid program.", "tokens": [50714, 400, 309, 486, 980, 291, 498, 291, 600, 1131, 264, 7728, 294, 2115, 295, 309, 885, 257, 7363, 1461, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 381, "seek": 296528, "start": 2977.28, "end": 2980.28, "text": " And then it will turn it into something that can run.", "tokens": [50964, 400, 550, 309, 486, 1261, 309, 666, 746, 300, 393, 1190, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 382, "seek": 296528, "start": 2980.28, "end": 2982.28, "text": " In the case of Java, that something will be bytecode.", "tokens": [51114, 682, 264, 1389, 295, 10745, 11, 300, 746, 486, 312, 40846, 22332, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 383, "seek": 296528, "start": 2982.28, "end": 2985.28, "text": " And it will go into a class file or a draw file. We know this.", "tokens": [51214, 400, 309, 486, 352, 666, 257, 1508, 3991, 420, 257, 2642, 3991, 13, 492, 458, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 384, "seek": 296528, "start": 2985.28, "end": 2989.28, "text": " And then there's a separate step, which is called running.", "tokens": [51364, 400, 550, 456, 311, 257, 4994, 1823, 11, 597, 307, 1219, 2614, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 385, "seek": 296528, "start": 2989.28, "end": 2994.28, "text": " We take that stored executable representation and we ask it to happen.", "tokens": [51564, 492, 747, 300, 12187, 7568, 712, 10290, 293, 321, 1029, 309, 281, 1051, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14671543666294642, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.005806692875921726}, {"id": 386, "seek": 299428, "start": 2994.28, "end": 3001.28, "text": " Usually, in this case, we'll say, you know, Java dash something, class file, and it will run.", "tokens": [50364, 11419, 11, 294, 341, 1389, 11, 321, 603, 584, 11, 291, 458, 11, 10745, 8240, 746, 11, 1508, 3991, 11, 293, 309, 486, 1190, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18361152746738532, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0018621113849803805}, {"id": 387, "seek": 299428, "start": 3001.28, "end": 3005.28, "text": " And it will run and then it will end and it will be over.", "tokens": [50714, 400, 309, 486, 1190, 293, 550, 309, 486, 917, 293, 309, 486, 312, 670, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18361152746738532, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0018621113849803805}, {"id": 388, "seek": 299428, "start": 3005.28, "end": 3009.28, "text": " And we could try again if we didn't like it.", "tokens": [50914, 400, 321, 727, 853, 797, 498, 321, 994, 380, 411, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18361152746738532, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0018621113849803805}, {"id": 389, "seek": 299428, "start": 3009.28, "end": 3013.28, "text": " That's the traditional edit compile run.", "tokens": [51114, 663, 311, 264, 5164, 8129, 31413, 1190, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18361152746738532, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0018621113849803805}, {"id": 390, "seek": 299428, "start": 3013.28, "end": 3016.28, "text": " Be disappointed, start over.", "tokens": [51314, 879, 13856, 11, 722, 670, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18361152746738532, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0018621113849803805}, {"id": 391, "seek": 301628, "start": 3017.28, "end": 3022.28, "text": " Oh, correct.", "tokens": [50414, 876, 11, 3006, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21943849325180054, "compression_ratio": 1.3668639053254439, "no_speech_prob": 0.020541351288557053}, {"id": 392, "seek": 301628, "start": 3022.28, "end": 3025.28, "text": " I'm talking about the development process.", "tokens": [50664, 286, 478, 1417, 466, 264, 3250, 1399, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21943849325180054, "compression_ratio": 1.3668639053254439, "no_speech_prob": 0.020541351288557053}, {"id": 393, "seek": 301628, "start": 3025.28, "end": 3029.28, "text": " But yes, the runtime is just that long.", "tokens": [50814, 583, 2086, 11, 264, 34474, 307, 445, 300, 938, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21943849325180054, "compression_ratio": 1.3668639053254439, "no_speech_prob": 0.020541351288557053}, {"id": 394, "seek": 301628, "start": 3034.28, "end": 3041.28, "text": " Until you realize it's not working and you have to ask everybody to please wait for our downage while we fix it.", "tokens": [51264, 9088, 291, 4325, 309, 311, 406, 1364, 293, 291, 362, 281, 1029, 2201, 281, 1767, 1699, 337, 527, 760, 609, 1339, 321, 3191, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21943849325180054, "compression_ratio": 1.3668639053254439, "no_speech_prob": 0.020541351288557053}, {"id": 395, "seek": 301628, "start": 3041.28, "end": 3044.28, "text": " That's the difference.", "tokens": [51614, 663, 311, 264, 2649, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21943849325180054, "compression_ratio": 1.3668639053254439, "no_speech_prob": 0.020541351288557053}, {"id": 396, "seek": 304428, "start": 3044.28, "end": 3053.28, "text": " If you read about Erlang, which is getting a lot of press, they'll tell you about phone switches and how that's really not allowed.", "tokens": [50364, 759, 291, 1401, 466, 3300, 25241, 11, 597, 307, 1242, 257, 688, 295, 1886, 11, 436, 603, 980, 291, 466, 2593, 19458, 293, 577, 300, 311, 534, 406, 4350, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12502466284710428, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.006991411559283733}, {"id": 397, "seek": 304428, "start": 3053.28, "end": 3060.28, "text": " And Lisp was doing this for a very long time, this kind of live hot swapping of code and running systems.", "tokens": [50814, 400, 441, 7631, 390, 884, 341, 337, 257, 588, 938, 565, 11, 341, 733, 295, 1621, 2368, 1693, 10534, 295, 3089, 293, 2614, 3652, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12502466284710428, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.006991411559283733}, {"id": 398, "seek": 304428, "start": 3060.28, "end": 3067.28, "text": " I think it goes more, in this case, it's less about the production thing than it is about what's the nature of developing a program.", "tokens": [51164, 286, 519, 309, 1709, 544, 11, 294, 341, 1389, 11, 309, 311, 1570, 466, 264, 4265, 551, 813, 309, 307, 466, 437, 311, 264, 3687, 295, 6416, 257, 1461, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12502466284710428, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.006991411559283733}, {"id": 399, "seek": 304428, "start": 3067.28, "end": 3072.28, "text": " Because as a developer, you know, seeing it run and saying, ooh, that was bad.", "tokens": [51514, 1436, 382, 257, 10754, 11, 291, 458, 11, 2577, 309, 1190, 293, 1566, 11, 17024, 11, 300, 390, 1578, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12502466284710428, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.006991411559283733}, {"id": 400, "seek": 307228, "start": 3072.28, "end": 3073.28, "text": " I wonder what happened.", "tokens": [50364, 286, 2441, 437, 2011, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09749014443213787, "compression_ratio": 1.7452471482889733, "no_speech_prob": 0.0042581032030284405}, {"id": 401, "seek": 307228, "start": 3073.28, "end": 3075.28, "text": " I wish I had run it in debug mode.", "tokens": [50414, 286, 3172, 286, 632, 1190, 309, 294, 24083, 4391, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09749014443213787, "compression_ratio": 1.7452471482889733, "no_speech_prob": 0.0042581032030284405}, {"id": 402, "seek": 307228, "start": 3075.28, "end": 3078.28, "text": " I wish I had put a breakpoint somewhere interesting.", "tokens": [50514, 286, 3172, 286, 632, 829, 257, 1821, 6053, 4079, 1880, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09749014443213787, "compression_ratio": 1.7452471482889733, "no_speech_prob": 0.0042581032030284405}, {"id": 403, "seek": 307228, "start": 3078.28, "end": 3086.28, "text": " And I'm really sad that I spent an hour calculating that data and dropped it on the floor because I have to do it again with the breakpoint in.", "tokens": [50664, 400, 286, 478, 534, 4227, 300, 286, 4418, 364, 1773, 28258, 300, 1412, 293, 8119, 309, 322, 264, 4123, 570, 286, 362, 281, 360, 309, 797, 365, 264, 1821, 6053, 294, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09749014443213787, "compression_ratio": 1.7452471482889733, "no_speech_prob": 0.0042581032030284405}, {"id": 404, "seek": 307228, "start": 3086.28, "end": 3096.28, "text": " That's a lot different experience than keeping your program around and having that data stay loaded and fixing your function and running it again without starting over.", "tokens": [51064, 663, 311, 257, 688, 819, 1752, 813, 5145, 428, 1461, 926, 293, 1419, 300, 1412, 1754, 13210, 293, 19442, 428, 2445, 293, 2614, 309, 797, 1553, 2891, 670, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09749014443213787, "compression_ratio": 1.7452471482889733, "no_speech_prob": 0.0042581032030284405}, {"id": 405, "seek": 307228, "start": 3096.28, "end": 3099.28, "text": " So that's what happens in closure.", "tokens": [51564, 407, 300, 311, 437, 2314, 294, 24653, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09749014443213787, "compression_ratio": 1.7452471482889733, "no_speech_prob": 0.0042581032030284405}, {"id": 406, "seek": 309928, "start": 3099.28, "end": 3102.28, "text": " You take the code, text could be characters.", "tokens": [50364, 509, 747, 264, 3089, 11, 2487, 727, 312, 4342, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12761485322992852, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.02123720943927765}, {"id": 407, "seek": 309928, "start": 3102.28, "end": 3108.28, "text": " There is character representation and what you showed there can be represented in characters in ASCII.", "tokens": [50514, 821, 307, 2517, 10290, 293, 437, 291, 4712, 456, 393, 312, 10379, 294, 4342, 294, 7469, 34, 9503, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12761485322992852, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.02123720943927765}, {"id": 408, "seek": 309928, "start": 3108.28, "end": 3111.28, "text": " It does not go first to the evaluator.", "tokens": [50814, 467, 775, 406, 352, 700, 281, 264, 6133, 1639, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12761485322992852, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.02123720943927765}, {"id": 409, "seek": 309928, "start": 3111.28, "end": 3113.28, "text": " It goes to something called the reader.", "tokens": [50964, 467, 1709, 281, 746, 1219, 264, 15149, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12761485322992852, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.02123720943927765}, {"id": 410, "seek": 309928, "start": 3113.28, "end": 3120.28, "text": " And this is the core part of what makes something a Lisp, which is that the reader has a very simple job.", "tokens": [51064, 400, 341, 307, 264, 4965, 644, 295, 437, 1669, 746, 257, 441, 7631, 11, 597, 307, 300, 264, 15149, 575, 257, 588, 2199, 1691, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12761485322992852, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.02123720943927765}, {"id": 411, "seek": 309928, "start": 3120.28, "end": 3122.28, "text": " Its job is to take the description.", "tokens": [51414, 6953, 1691, 307, 281, 747, 264, 3855, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12761485322992852, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.02123720943927765}, {"id": 412, "seek": 312228, "start": 3122.28, "end": 3130.28, "text": " I just told you, you know, keyword starts with a colon and a list is in parentheses and a map is in curly braces and it's pairs of stuff.", "tokens": [50364, 286, 445, 1907, 291, 11, 291, 458, 11, 20428, 3719, 365, 257, 8255, 293, 257, 1329, 307, 294, 34153, 293, 257, 4471, 307, 294, 32066, 41537, 293, 309, 311, 15494, 295, 1507, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11279166214109405, "compression_ratio": 2.0597609561752988, "no_speech_prob": 0.31314873695373535}, {"id": 413, "seek": 312228, "start": 3130.28, "end": 3134.28, "text": " Its job is to take those characters and turn it into data structures.", "tokens": [50764, 6953, 1691, 307, 281, 747, 729, 4342, 293, 1261, 309, 666, 1412, 9227, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11279166214109405, "compression_ratio": 2.0597609561752988, "no_speech_prob": 0.31314873695373535}, {"id": 414, "seek": 312228, "start": 3134.28, "end": 3142.28, "text": " The data structures I described, you start with the parent, you say stuff, you close the parent, that's going to become a list when the reader is done with it.", "tokens": [50964, 440, 1412, 9227, 286, 7619, 11, 291, 722, 365, 264, 2596, 11, 291, 584, 1507, 11, 291, 1998, 264, 2596, 11, 300, 311, 516, 281, 1813, 257, 1329, 562, 264, 15149, 307, 1096, 365, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11279166214109405, "compression_ratio": 2.0597609561752988, "no_speech_prob": 0.31314873695373535}, {"id": 415, "seek": 312228, "start": 3142.28, "end": 3145.28, "text": " You start with square brackets, that's going to become a vector when the reader is done with it.", "tokens": [51364, 509, 722, 365, 3732, 26179, 11, 300, 311, 516, 281, 1813, 257, 8062, 562, 264, 15149, 307, 1096, 365, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11279166214109405, "compression_ratio": 2.0597609561752988, "no_speech_prob": 0.31314873695373535}, {"id": 416, "seek": 312228, "start": 3145.28, "end": 3148.28, "text": " So what comes out of the reader are data structures.", "tokens": [51514, 407, 437, 1487, 484, 295, 264, 15149, 366, 1412, 9227, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11279166214109405, "compression_ratio": 2.0597609561752988, "no_speech_prob": 0.31314873695373535}, {"id": 417, "seek": 314828, "start": 3148.28, "end": 3155.28, "text": " And what's unique about a Lisp enclosure is that the compiler compiles data structures.", "tokens": [50364, 400, 437, 311, 3845, 466, 257, 441, 7631, 34093, 307, 300, 264, 31958, 715, 4680, 1412, 9227, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06170991791619195, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.0016451003029942513}, {"id": 418, "seek": 314828, "start": 3155.28, "end": 3157.28, "text": " It does not compile text.", "tokens": [50714, 467, 775, 406, 31413, 2487, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06170991791619195, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.0016451003029942513}, {"id": 419, "seek": 314828, "start": 3157.28, "end": 3160.28, "text": " It never sees text.", "tokens": [50814, 467, 1128, 8194, 2487, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06170991791619195, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.0016451003029942513}, {"id": 420, "seek": 314828, "start": 3160.28, "end": 3168.28, "text": " What the compiler gets handed is maybe a list with three symbols in it or a vector with five numbers in it.", "tokens": [50964, 708, 264, 31958, 2170, 16013, 307, 1310, 257, 1329, 365, 1045, 16944, 294, 309, 420, 257, 8062, 365, 1732, 3547, 294, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06170991791619195, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.0016451003029942513}, {"id": 421, "seek": 314828, "start": 3168.28, "end": 3170.28, "text": " That's actually what the compiler has.", "tokens": [51364, 663, 311, 767, 437, 264, 31958, 575, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06170991791619195, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.0016451003029942513}, {"id": 422, "seek": 314828, "start": 3170.28, "end": 3176.28, "text": " It has a data structure in hand with actual data in it, not text.", "tokens": [51464, 467, 575, 257, 1412, 3877, 294, 1011, 365, 3539, 1412, 294, 309, 11, 406, 2487, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06170991791619195, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.0016451003029942513}, {"id": 423, "seek": 317628, "start": 3176.28, "end": 3180.28, "text": " And it compiles it and in the case of closure, it is a compiler.", "tokens": [50364, 400, 309, 715, 4680, 309, 293, 294, 264, 1389, 295, 24653, 11, 309, 307, 257, 31958, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1332234847239959, "compression_ratio": 1.6169154228855722, "no_speech_prob": 0.002013974590227008}, {"id": 424, "seek": 317628, "start": 3180.28, "end": 3187.28, "text": " There are many, well, there are actually many lists that are interpreters, but many people believe that Lisp is interpreted.", "tokens": [50564, 821, 366, 867, 11, 731, 11, 456, 366, 767, 867, 14511, 300, 366, 17489, 1559, 11, 457, 867, 561, 1697, 300, 441, 7631, 307, 26749, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1332234847239959, "compression_ratio": 1.6169154228855722, "no_speech_prob": 0.002013974590227008}, {"id": 425, "seek": 317628, "start": 3187.28, "end": 3196.28, "text": " It's certainly easy to make an interpreter for Lisp that would take those data structures and on the fly produce the values they imply.", "tokens": [50914, 467, 311, 3297, 1858, 281, 652, 364, 34132, 337, 441, 7631, 300, 576, 747, 729, 1412, 9227, 293, 322, 264, 3603, 5258, 264, 4190, 436, 33616, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1332234847239959, "compression_ratio": 1.6169154228855722, "no_speech_prob": 0.002013974590227008}, {"id": 426, "seek": 319628, "start": 3197.28, "end": 3206.28, "text": " But closure is a compiler and in particular closure compiles those data structures to Java bytecode right away.", "tokens": [50414, 583, 24653, 307, 257, 31958, 293, 294, 1729, 24653, 715, 4680, 729, 1412, 9227, 281, 10745, 40846, 22332, 558, 1314, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11073712298744603, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.031045125797390938}, {"id": 427, "seek": 319628, "start": 3206.28, "end": 3209.28, "text": " There is no interpretation in closure.", "tokens": [50864, 821, 307, 572, 14174, 294, 24653, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11073712298744603, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.031045125797390938}, {"id": 428, "seek": 319628, "start": 3209.28, "end": 3215.28, "text": " So it's a compiler that produces bytecode just like Java C does.", "tokens": [51014, 407, 309, 311, 257, 31958, 300, 14725, 40846, 22332, 445, 411, 10745, 383, 775, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11073712298744603, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.031045125797390938}, {"id": 429, "seek": 319628, "start": 3215.28, "end": 3224.28, "text": " And because it's an interactive environment, it presents that bytecode right away to the JVM to execute.", "tokens": [51314, 400, 570, 309, 311, 364, 15141, 2823, 11, 309, 13533, 300, 40846, 22332, 558, 1314, 281, 264, 508, 53, 44, 281, 14483, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11073712298744603, "compression_ratio": 1.6494845360824741, "no_speech_prob": 0.031045125797390938}, {"id": 430, "seek": 322428, "start": 3224.28, "end": 3228.28, "text": " And it executes right away and you can see the effect.", "tokens": [50364, 400, 309, 4454, 1819, 558, 1314, 293, 291, 393, 536, 264, 1802, 13, 50564], "temperature": 0.0, "avg_logprob": -0.19854039412278396, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.005043144803494215}, {"id": 431, "seek": 322428, "start": 3232.28, "end": 3235.28, "text": " When you're in the REPL, you have AVM, right?", "tokens": [50764, 1133, 291, 434, 294, 264, 31511, 43, 11, 291, 362, 30198, 44, 11, 558, 30, 50914], "temperature": 0.0, "avg_logprob": -0.19854039412278396, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.005043144803494215}, {"id": 432, "seek": 322428, "start": 3235.28, "end": 3237.28, "text": " You have one thing.", "tokens": [50914, 509, 362, 472, 551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.19854039412278396, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.005043144803494215}, {"id": 433, "seek": 322428, "start": 3237.28, "end": 3240.28, "text": " So yes, your environment is your program.", "tokens": [51014, 407, 2086, 11, 428, 2823, 307, 428, 1461, 13, 51164], "temperature": 0.0, "avg_logprob": -0.19854039412278396, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.005043144803494215}, {"id": 434, "seek": 322428, "start": 3240.28, "end": 3243.28, "text": " Your compiler is in your program.", "tokens": [51164, 2260, 31958, 307, 294, 428, 1461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19854039412278396, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.005043144803494215}, {"id": 435, "seek": 322428, "start": 3243.28, "end": 3245.28, "text": " Yes.", "tokens": [51314, 1079, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19854039412278396, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.005043144803494215}, {"id": 436, "seek": 324528, "start": 3246.28, "end": 3257.28, "text": " Yeah, most commercial lists give you tools to take out the compiler in production, mostly because they don't want you giving away their compiler.", "tokens": [50414, 865, 11, 881, 6841, 14511, 976, 291, 3873, 281, 747, 484, 264, 31958, 294, 4265, 11, 5240, 570, 436, 500, 380, 528, 291, 2902, 1314, 641, 31958, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1418667157491048, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.04448210075497627}, {"id": 437, "seek": 324528, "start": 3257.28, "end": 3264.28, "text": " Normally, there's no reason to prevent that because it's a useful thing to have, particularly when you want to load code later to fix problems.", "tokens": [50964, 17424, 11, 456, 311, 572, 1778, 281, 4871, 300, 570, 309, 311, 257, 4420, 551, 281, 362, 11, 4098, 562, 291, 528, 281, 3677, 3089, 1780, 281, 3191, 2740, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1418667157491048, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.04448210075497627}, {"id": 438, "seek": 324528, "start": 3264.28, "end": 3266.28, "text": " You're going to need that compiler there.", "tokens": [51314, 509, 434, 516, 281, 643, 300, 31958, 456, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1418667157491048, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.04448210075497627}, {"id": 439, "seek": 324528, "start": 3266.28, "end": 3269.28, "text": " So in closure, there's no strip out the compiler option.", "tokens": [51414, 407, 294, 24653, 11, 456, 311, 572, 12828, 484, 264, 31958, 3614, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1418667157491048, "compression_ratio": 1.6869565217391305, "no_speech_prob": 0.04448210075497627}, {"id": 440, "seek": 326928, "start": 3270.28, "end": 3279.28, "text": " We'll see that there is a core of closure.", "tokens": [50414, 492, 603, 536, 300, 456, 307, 257, 4965, 295, 24653, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 441, "seek": 326928, "start": 3279.28, "end": 3282.28, "text": " The data structures are written in Java.", "tokens": [50864, 440, 1412, 9227, 366, 3720, 294, 10745, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 442, "seek": 326928, "start": 3282.28, "end": 3285.28, "text": " The special operators are written in Java.", "tokens": [51014, 440, 2121, 19077, 366, 3720, 294, 10745, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 443, "seek": 326928, "start": 3285.28, "end": 3289.28, "text": " And then most of the rest of closure is written in closure.", "tokens": [51164, 400, 550, 881, 295, 264, 1472, 295, 24653, 307, 3720, 294, 24653, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 444, "seek": 326928, "start": 3289.28, "end": 3291.28, "text": " There's no native code.", "tokens": [51364, 821, 311, 572, 8470, 3089, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 445, "seek": 326928, "start": 3291.28, "end": 3293.28, "text": " There's no native code.", "tokens": [51464, 821, 311, 572, 8470, 3089, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 446, "seek": 326928, "start": 3293.28, "end": 3296.28, "text": " Closure is completely a pure Java project.", "tokens": [51564, 2033, 7641, 307, 2584, 257, 6075, 10745, 1716, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15760071246654955, "compression_ratio": 1.8104575163398693, "no_speech_prob": 0.008031075820326805}, {"id": 447, "seek": 329628, "start": 3297.28, "end": 3298.28, "text": " There's no native code.", "tokens": [50414, 821, 311, 572, 8470, 3089, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 448, "seek": 329628, "start": 3298.28, "end": 3299.28, "text": " There's no C libraries.", "tokens": [50464, 821, 311, 572, 383, 15148, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 449, "seek": 329628, "start": 3299.28, "end": 3306.28, "text": " It's all Java, either generated by Java itself or generated by closure.", "tokens": [50514, 467, 311, 439, 10745, 11, 2139, 10833, 538, 10745, 2564, 420, 10833, 538, 24653, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 450, "seek": 329628, "start": 3306.28, "end": 3312.28, "text": " It does not turn off the verifier or anything like that in order to get performances.", "tokens": [50864, 467, 775, 406, 1261, 766, 264, 1306, 9902, 420, 1340, 411, 300, 294, 1668, 281, 483, 16087, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 451, "seek": 329628, "start": 3312.28, "end": 3314.28, "text": " There have been some schemes that tried to do that.", "tokens": [51164, 821, 362, 668, 512, 26954, 300, 3031, 281, 360, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 452, "seek": 329628, "start": 3314.28, "end": 3316.28, "text": " Closure is completely legit that way.", "tokens": [51264, 2033, 7641, 307, 2584, 10275, 300, 636, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 453, "seek": 329628, "start": 3316.28, "end": 3322.28, "text": " So when we have this separation of concerns between the reader and the evaluator, we get a couple of things.", "tokens": [51364, 407, 562, 321, 362, 341, 14634, 295, 7389, 1296, 264, 15149, 293, 264, 6133, 1639, 11, 321, 483, 257, 1916, 295, 721, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0914882548804422, "compression_ratio": 1.6557377049180328, "no_speech_prob": 0.0023179957643151283}, {"id": 454, "seek": 332228, "start": 3322.28, "end": 3327.28, "text": " One of the other things we get is we don't have to get the text from a file, right?", "tokens": [50364, 1485, 295, 264, 661, 721, 321, 483, 307, 321, 500, 380, 362, 281, 483, 264, 2487, 490, 257, 3991, 11, 558, 30, 50614], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 455, "seek": 332228, "start": 3327.28, "end": 3329.28, "text": " We can get it right from you.", "tokens": [50614, 492, 393, 483, 309, 558, 490, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 456, "seek": 332228, "start": 3329.28, "end": 3332.28, "text": " You just saw me type right into the REPL, an expression.", "tokens": [50714, 509, 445, 1866, 385, 2010, 558, 666, 264, 31511, 43, 11, 364, 6114, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 457, "seek": 332228, "start": 3332.28, "end": 3335.28, "text": " Never went through a file, never got stored.", "tokens": [50864, 7344, 1437, 807, 257, 3991, 11, 1128, 658, 12187, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 458, "seek": 332228, "start": 3335.28, "end": 3340.28, "text": " So the first thing you get is this kind of interactivity of you can just type in stuff and say go.", "tokens": [51014, 407, 264, 700, 551, 291, 483, 307, 341, 733, 295, 4648, 4253, 295, 291, 393, 445, 2010, 294, 1507, 293, 584, 352, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 459, "seek": 332228, "start": 3340.28, "end": 3341.28, "text": " That's a big deal.", "tokens": [51264, 663, 311, 257, 955, 2028, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 460, "seek": 332228, "start": 3341.28, "end": 3351.28, "text": " I mean, if you've been programming in Java or C++ long enough to remember when the debuggers didn't give you the ability to evaluate expressions at a break point,", "tokens": [51314, 286, 914, 11, 498, 291, 600, 668, 9410, 294, 10745, 420, 383, 25472, 938, 1547, 281, 1604, 562, 264, 3001, 3562, 433, 994, 380, 976, 291, 264, 3485, 281, 13059, 15277, 412, 257, 1821, 935, 11, 51814], "temperature": 0.0, "avg_logprob": -0.10903982939543548, "compression_ratio": 1.6209150326797386, "no_speech_prob": 0.007448120508342981}, {"id": 461, "seek": 335128, "start": 3351.28, "end": 3354.28, "text": " you can't remember how hard that was.", "tokens": [50364, 291, 393, 380, 1604, 577, 1152, 300, 390, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07265407189555552, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.019935620948672295}, {"id": 462, "seek": 335128, "start": 3354.28, "end": 3360.28, "text": " You always have that capability here to have expressions directly evaluated.", "tokens": [50514, 509, 1009, 362, 300, 13759, 510, 281, 362, 15277, 3838, 25509, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07265407189555552, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.019935620948672295}, {"id": 463, "seek": 335128, "start": 3360.28, "end": 3362.28, "text": " What else do we get from this?", "tokens": [50814, 708, 1646, 360, 321, 483, 490, 341, 30, 50914], "temperature": 0.0, "avg_logprob": -0.07265407189555552, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.019935620948672295}, {"id": 464, "seek": 335128, "start": 3362.28, "end": 3366.28, "text": " Well, we get the ability to skip the characters completely.", "tokens": [50914, 1042, 11, 321, 483, 264, 3485, 281, 10023, 264, 4342, 2584, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07265407189555552, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.019935620948672295}, {"id": 465, "seek": 335128, "start": 3366.28, "end": 3377.28, "text": " For instance, it's quite possible to write a program that generates the data structures that the compiler wants to see and have it send them to the compiler to be evaluated.", "tokens": [51114, 1171, 5197, 11, 309, 311, 1596, 1944, 281, 2464, 257, 1461, 300, 23815, 264, 1412, 9227, 300, 264, 31958, 2738, 281, 536, 293, 362, 309, 2845, 552, 281, 264, 31958, 281, 312, 25509, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07265407189555552, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.019935620948672295}, {"id": 466, "seek": 337728, "start": 3377.28, "end": 3383.28, "text": " Program generating programs are a common thing in this kind of an environment.", "tokens": [50364, 8338, 17746, 4268, 366, 257, 2689, 551, 294, 341, 733, 295, 364, 2823, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12255434195200603, "compression_ratio": 1.3539823008849559, "no_speech_prob": 0.10020557045936584}, {"id": 467, "seek": 337728, "start": 3383.28, "end": 3389.28, "text": " Whereas this kind of stuff when you're doing it with text is really messy.", "tokens": [50664, 13813, 341, 733, 295, 1507, 562, 291, 434, 884, 309, 365, 2487, 307, 534, 16191, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12255434195200603, "compression_ratio": 1.3539823008849559, "no_speech_prob": 0.10020557045936584}, {"id": 468, "seek": 338928, "start": 3389.28, "end": 3394.28, "text": " By the way, what observation does Charlie actually give a good way to make the same?", "tokens": [50364, 3146, 264, 636, 11, 437, 14816, 775, 13754, 767, 976, 257, 665, 636, 281, 652, 264, 912, 30, 50614], "temperature": 0.0, "avg_logprob": -0.2826174175928509, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.8901873826980591}, {"id": 469, "seek": 338928, "start": 3394.28, "end": 3400.28, "text": " The art forms I know, because of compliance requirements that they have,", "tokens": [50614, 440, 1523, 6422, 286, 458, 11, 570, 295, 15882, 7728, 300, 436, 362, 11, 50914], "temperature": 0.0, "avg_logprob": -0.2826174175928509, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.8901873826980591}, {"id": 470, "seek": 338928, "start": 3400.28, "end": 3409.28, "text": " we might be very comfortable with code producing stuff going into a reader or a programmer against a programmer that produces stuff.", "tokens": [50914, 321, 1062, 312, 588, 4619, 365, 3089, 10501, 1507, 516, 666, 257, 15149, 420, 257, 32116, 1970, 257, 32116, 300, 14725, 1507, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2826174175928509, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.8901873826980591}, {"id": 471, "seek": 340928, "start": 3409.28, "end": 3421.28, "text": " But is that option of saying it's always like the first in this production environment in the influence of COVID to be as a security problem?", "tokens": [50364, 583, 307, 300, 3614, 295, 1566, 309, 311, 1009, 411, 264, 700, 294, 341, 4265, 2823, 294, 264, 6503, 295, 4566, 281, 312, 382, 257, 3825, 1154, 30, 50964], "temperature": 0.0, "avg_logprob": -0.22514373779296876, "compression_ratio": 1.618867924528302, "no_speech_prob": 0.3821914494037628}, {"id": 472, "seek": 340928, "start": 3421.28, "end": 3427.28, "text": " Well, I mean, that's a security policy thing, whether or not you expose this in a production system.", "tokens": [50964, 1042, 11, 286, 914, 11, 300, 311, 257, 3825, 3897, 551, 11, 1968, 420, 406, 291, 19219, 341, 294, 257, 4265, 1185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22514373779296876, "compression_ratio": 1.618867924528302, "no_speech_prob": 0.3821914494037628}, {"id": 473, "seek": 340928, "start": 3427.28, "end": 3430.28, "text": " So I'm talking about you could if you needed to.", "tokens": [51264, 407, 286, 478, 1417, 466, 291, 727, 498, 291, 2978, 281, 13, 51414], "temperature": 0.0, "avg_logprob": -0.22514373779296876, "compression_ratio": 1.618867924528302, "no_speech_prob": 0.3821914494037628}, {"id": 474, "seek": 340928, "start": 3430.28, "end": 3437.28, "text": " You could have that over a secure soccer channel and have it be just an administrator who knows what they're doing, have that capability.", "tokens": [51414, 509, 727, 362, 300, 670, 257, 7144, 15469, 2269, 293, 362, 309, 312, 445, 364, 25529, 567, 3255, 437, 436, 434, 884, 11, 362, 300, 13759, 13, 51764], "temperature": 0.0, "avg_logprob": -0.22514373779296876, "compression_ratio": 1.618867924528302, "no_speech_prob": 0.3821914494037628}, {"id": 475, "seek": 343728, "start": 3437.28, "end": 3439.28, "text": " Because the alternative is downing your system.", "tokens": [50364, 1436, 264, 8535, 307, 760, 278, 428, 1185, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 476, "seek": 343728, "start": 3439.28, "end": 3445.28, "text": " If you don't have that, and of course, opening this in a production system, that's completely a policy thing.", "tokens": [50464, 759, 291, 500, 380, 362, 300, 11, 293, 295, 1164, 11, 5193, 341, 294, 257, 4265, 1185, 11, 300, 311, 2584, 257, 3897, 551, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 477, "seek": 343728, "start": 3445.28, "end": 3446.28, "text": " It has nothing to do with the language.", "tokens": [50764, 467, 575, 1825, 281, 360, 365, 264, 2856, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 478, "seek": 343728, "start": 3446.28, "end": 3449.28, "text": " Except if your language doesn't let you do it, you can't do it.", "tokens": [50814, 16192, 498, 428, 2856, 1177, 380, 718, 291, 360, 309, 11, 291, 393, 380, 360, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 479, "seek": 343728, "start": 3449.28, "end": 3450.28, "text": " That's fair.", "tokens": [50964, 663, 311, 3143, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 480, "seek": 343728, "start": 3450.28, "end": 3452.28, "text": " So it does.", "tokens": [51014, 407, 309, 775, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 481, "seek": 343728, "start": 3452.28, "end": 3456.28, "text": " The other thing is that these data structures, you might write this program and have this happen directly.", "tokens": [51114, 440, 661, 551, 307, 300, 613, 1412, 9227, 11, 291, 1062, 2464, 341, 1461, 293, 362, 341, 1051, 3838, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 482, "seek": 343728, "start": 3456.28, "end": 3458.28, "text": " Then you might say, I like this program.", "tokens": [51314, 1396, 291, 1062, 584, 11, 286, 411, 341, 1461, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 483, "seek": 343728, "start": 3458.28, "end": 3463.28, "text": " Let me take those data structures and there's a thing called the printer, which will turn them back into that,", "tokens": [51414, 961, 385, 747, 729, 1412, 9227, 293, 456, 311, 257, 551, 1219, 264, 16671, 11, 597, 486, 1261, 552, 646, 666, 300, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10378725985263257, "compression_ratio": 1.8106312292358804, "no_speech_prob": 0.019355669617652893}, {"id": 484, "seek": 346328, "start": 3463.28, "end": 3467.28, "text": " which you could store and so they could sign off on and say this is the canonic program,", "tokens": [50364, 597, 291, 727, 3531, 293, 370, 436, 727, 1465, 766, 322, 293, 584, 341, 307, 264, 393, 11630, 1461, 11, 50564], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 485, "seek": 346328, "start": 3467.28, "end": 3470.28, "text": " which our program generated that we're going to use.", "tokens": [50564, 597, 527, 1461, 10833, 300, 321, 434, 516, 281, 764, 13, 50714], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 486, "seek": 346328, "start": 3470.28, "end": 3473.28, "text": " And we'll lock that down and do whatever.", "tokens": [50714, 400, 321, 603, 4017, 300, 760, 293, 360, 2035, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 487, "seek": 346328, "start": 3473.28, "end": 3474.28, "text": " Yes?", "tokens": [50864, 1079, 30, 50914], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 488, "seek": 346328, "start": 3474.28, "end": 3478.28, "text": " So are the data structures physical files?", "tokens": [50914, 407, 366, 264, 1412, 9227, 4001, 7098, 30, 51114], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 489, "seek": 346328, "start": 3478.28, "end": 3481.28, "text": " No, they're in memory data structures.", "tokens": [51114, 883, 11, 436, 434, 294, 4675, 1412, 9227, 13, 51264], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 490, "seek": 346328, "start": 3481.28, "end": 3484.28, "text": " The ones your program would see.", "tokens": [51264, 440, 2306, 428, 1461, 576, 536, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19618294037968279, "compression_ratio": 1.5699481865284974, "no_speech_prob": 0.011487986892461777}, {"id": 491, "seek": 348428, "start": 3484.28, "end": 3493.28, "text": " So, you know, an instance of closure laying persistent vector to the compiler.", "tokens": [50364, 407, 11, 291, 458, 11, 364, 5197, 295, 24653, 14903, 24315, 8062, 281, 264, 31958, 13, 50814], "temperature": 0.0, "avg_logprob": -0.19047958200628107, "compression_ratio": 1.5972222222222223, "no_speech_prob": 0.0063834404572844505}, {"id": 492, "seek": 348428, "start": 3493.28, "end": 3497.28, "text": " The compiler's got to deal with it, figure it out.", "tokens": [50814, 440, 31958, 311, 658, 281, 2028, 365, 309, 11, 2573, 309, 484, 13, 51014], "temperature": 0.0, "avg_logprob": -0.19047958200628107, "compression_ratio": 1.5972222222222223, "no_speech_prob": 0.0063834404572844505}, {"id": 493, "seek": 348428, "start": 3497.28, "end": 3503.28, "text": " So there's one more thing that this allows, and this is the secret sauce of all lists, including closure,", "tokens": [51014, 407, 456, 311, 472, 544, 551, 300, 341, 4045, 11, 293, 341, 307, 264, 4054, 4880, 295, 439, 14511, 11, 3009, 24653, 11, 51314], "temperature": 0.0, "avg_logprob": -0.19047958200628107, "compression_ratio": 1.5972222222222223, "no_speech_prob": 0.0063834404572844505}, {"id": 494, "seek": 348428, "start": 3503.28, "end": 3505.28, "text": " which is what would happen.", "tokens": [51314, 597, 307, 437, 576, 1051, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19047958200628107, "compression_ratio": 1.5972222222222223, "no_speech_prob": 0.0063834404572844505}, {"id": 495, "seek": 348428, "start": 3505.28, "end": 3509.28, "text": " I mean, it's fine to sit standalone and write a program that generates a program.", "tokens": [51414, 286, 914, 11, 309, 311, 2489, 281, 1394, 37454, 293, 2464, 257, 1461, 300, 23815, 257, 1461, 13, 51614], "temperature": 0.0, "avg_logprob": -0.19047958200628107, "compression_ratio": 1.5972222222222223, "no_speech_prob": 0.0063834404572844505}, {"id": 496, "seek": 350928, "start": 3509.28, "end": 3512.28, "text": " But what would happen if we said, you know what?", "tokens": [50364, 583, 437, 576, 1051, 498, 321, 848, 11, 291, 458, 437, 30, 50514], "temperature": 0.0, "avg_logprob": -0.136552385661913, "compression_ratio": 1.735159817351598, "no_speech_prob": 0.03354359418153763}, {"id": 497, "seek": 350928, "start": 3512.28, "end": 3515.28, "text": " We're handing these data structures to the compiler.", "tokens": [50514, 492, 434, 34774, 613, 1412, 9227, 281, 264, 31958, 13, 50664], "temperature": 0.0, "avg_logprob": -0.136552385661913, "compression_ratio": 1.735159817351598, "no_speech_prob": 0.03354359418153763}, {"id": 498, "seek": 350928, "start": 3515.28, "end": 3521.28, "text": " It would be great if the compiler would let us participate in this.", "tokens": [50664, 467, 576, 312, 869, 498, 264, 31958, 576, 718, 505, 8197, 294, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.136552385661913, "compression_ratio": 1.735159817351598, "no_speech_prob": 0.03354359418153763}, {"id": 499, "seek": 350928, "start": 3521.28, "end": 3523.28, "text": " If they could send us the data structures.", "tokens": [50964, 759, 436, 727, 2845, 505, 264, 1412, 9227, 13, 51064], "temperature": 0.0, "avg_logprob": -0.136552385661913, "compression_ratio": 1.735159817351598, "no_speech_prob": 0.03354359418153763}, {"id": 500, "seek": 350928, "start": 3523.28, "end": 3530.28, "text": " When we write a real program, a very small program, and give it back different data structures,", "tokens": [51064, 1133, 321, 2464, 257, 957, 1461, 11, 257, 588, 1359, 1461, 11, 293, 976, 309, 646, 819, 1412, 9227, 11, 51414], "temperature": 0.0, "avg_logprob": -0.136552385661913, "compression_ratio": 1.735159817351598, "no_speech_prob": 0.03354359418153763}, {"id": 501, "seek": 350928, "start": 3530.28, "end": 3536.28, "text": " then we could participate very easily in the extension of our language.", "tokens": [51414, 550, 321, 727, 8197, 588, 3612, 294, 264, 10320, 295, 527, 2856, 13, 51714], "temperature": 0.0, "avg_logprob": -0.136552385661913, "compression_ratio": 1.735159817351598, "no_speech_prob": 0.03354359418153763}, {"id": 502, "seek": 353628, "start": 3536.28, "end": 3540.28, "text": " Because this compiler, it's going to know how to do with those types of data.", "tokens": [50364, 1436, 341, 31958, 11, 309, 311, 516, 281, 458, 577, 281, 360, 365, 729, 3467, 295, 1412, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 503, "seek": 353628, "start": 3540.28, "end": 3542.28, "text": " It's going to know what to do with the vector.", "tokens": [50564, 467, 311, 516, 281, 458, 437, 281, 360, 365, 264, 8062, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 504, "seek": 353628, "start": 3542.28, "end": 3546.28, "text": " It's going to know what if means and a couple of other things.", "tokens": [50664, 467, 311, 516, 281, 458, 437, 498, 1355, 293, 257, 1916, 295, 661, 721, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 505, "seek": 353628, "start": 3546.28, "end": 3550.28, "text": " But there'll be new things that we'll think of that we'd love to be able to set.", "tokens": [50864, 583, 456, 603, 312, 777, 721, 300, 321, 603, 519, 295, 300, 321, 1116, 959, 281, 312, 1075, 281, 992, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 506, "seek": 353628, "start": 3550.28, "end": 3556.28, "text": " When you have something you'd love to be able to say in Java, what do you have to do with it?", "tokens": [51064, 1133, 291, 362, 746, 291, 1116, 959, 281, 312, 1075, 281, 584, 294, 10745, 11, 437, 360, 291, 362, 281, 360, 365, 309, 30, 51364], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 507, "seek": 353628, "start": 3556.28, "end": 3563.28, "text": " You have to beg, son, and wait for years and hope other people beg for the same things and you get it.", "tokens": [51364, 509, 362, 281, 4612, 11, 1872, 11, 293, 1699, 337, 924, 293, 1454, 661, 561, 4612, 337, 264, 912, 721, 293, 291, 483, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 508, "seek": 353628, "start": 3563.28, "end": 3565.28, "text": " That's it.", "tokens": [51714, 663, 311, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11190497080485026, "compression_ratio": 1.9116465863453815, "no_speech_prob": 0.008958720602095127}, {"id": 509, "seek": 356528, "start": 3565.28, "end": 3567.28, "text": " You have no say.", "tokens": [50364, 509, 362, 572, 584, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 510, "seek": 356528, "start": 3567.28, "end": 3575.28, "text": " You have no ability to shape the language unless that's completely not what it's about.", "tokens": [50464, 509, 362, 572, 3485, 281, 3909, 264, 2856, 5969, 300, 311, 2584, 406, 437, 309, 311, 466, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 511, "seek": 356528, "start": 3575.28, "end": 3577.28, "text": " It's about getting you in the loop.", "tokens": [50864, 467, 311, 466, 1242, 291, 294, 264, 6367, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 512, "seek": 356528, "start": 3577.28, "end": 3582.28, "text": " And in fact, the language itself has a well-defined way for you to say,", "tokens": [50964, 400, 294, 1186, 11, 264, 2856, 2564, 575, 257, 731, 12, 37716, 636, 337, 291, 281, 584, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 513, "seek": 356528, "start": 3582.28, "end": 3585.28, "text": " this is a little program I'd like you to run.", "tokens": [51214, 341, 307, 257, 707, 1461, 286, 1116, 411, 291, 281, 1190, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 514, "seek": 356528, "start": 3585.28, "end": 3590.28, "text": " When you encounter this name, I don't want you to evaluate it by the way.", "tokens": [51364, 1133, 291, 8593, 341, 1315, 11, 286, 500, 380, 528, 291, 281, 13059, 309, 538, 264, 636, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 515, "seek": 356528, "start": 3590.28, "end": 3592.28, "text": " I'd like you to send me that data structure.", "tokens": [51614, 286, 1116, 411, 291, 281, 2845, 385, 300, 1412, 3877, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 516, "seek": 356528, "start": 3592.28, "end": 3594.28, "text": " I know what to do with it.", "tokens": [51714, 286, 458, 437, 281, 360, 365, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09579431908762354, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.008777758106589317}, {"id": 517, "seek": 359428, "start": 3594.28, "end": 3599.28, "text": " I'm going to give you back a different data structure and you evaluate that.", "tokens": [50364, 286, 478, 516, 281, 976, 291, 646, 257, 819, 1412, 3877, 293, 291, 13059, 300, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1296801465622922, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004581669345498085}, {"id": 518, "seek": 359428, "start": 3599.28, "end": 3601.28, "text": " That's called a macro.", "tokens": [50614, 663, 311, 1219, 257, 18887, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1296801465622922, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004581669345498085}, {"id": 519, "seek": 359428, "start": 3601.28, "end": 3610.28, "text": " And it is what gives lists and closure syntactic abstraction and syntactic extensibility.", "tokens": [50714, 400, 309, 307, 437, 2709, 14511, 293, 24653, 23980, 19892, 37765, 293, 23980, 19892, 1279, 694, 2841, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1296801465622922, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004581669345498085}, {"id": 520, "seek": 359428, "start": 3610.28, "end": 3613.28, "text": " Can that happen in the context of the namespace?", "tokens": [51164, 1664, 300, 1051, 294, 264, 4319, 295, 264, 5288, 17940, 30, 51314], "temperature": 0.0, "avg_logprob": -0.1296801465622922, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004581669345498085}, {"id": 521, "seek": 359428, "start": 3613.28, "end": 3615.28, "text": " Yes, it can.", "tokens": [51314, 1079, 11, 309, 393, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1296801465622922, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004581669345498085}, {"id": 522, "seek": 359428, "start": 3615.28, "end": 3623.28, "text": " There are namespaces in enclosure and they allow me to have my cool function and you to have your cool function.", "tokens": [51414, 821, 366, 5288, 79, 2116, 294, 34093, 293, 436, 2089, 385, 281, 362, 452, 1627, 2445, 293, 291, 281, 362, 428, 1627, 2445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1296801465622922, "compression_ratio": 1.6621004566210045, "no_speech_prob": 0.004581669345498085}, {"id": 523, "seek": 362328, "start": 3623.28, "end": 3625.28, "text": " Cool function.", "tokens": [50364, 8561, 2445, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 524, "seek": 362328, "start": 3625.28, "end": 3627.28, "text": " Yes.", "tokens": [50464, 1079, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 525, "seek": 362328, "start": 3627.28, "end": 3632.28, "text": " So that's what makes Lisp amazing.", "tokens": [50564, 407, 300, 311, 437, 1669, 441, 7631, 2243, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 526, "seek": 362328, "start": 3632.28, "end": 3636.28, "text": " It's something that I won't have time to dig deeply into tonight.", "tokens": [50814, 467, 311, 746, 300, 286, 1582, 380, 362, 565, 281, 2528, 8760, 666, 4440, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 527, "seek": 362328, "start": 3636.28, "end": 3641.28, "text": " If you can come away with at least the understanding that that's how it works, that's how it's possible.", "tokens": [51014, 759, 291, 393, 808, 1314, 365, 412, 1935, 264, 3701, 300, 300, 311, 577, 309, 1985, 11, 300, 311, 577, 309, 311, 1944, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 528, "seek": 362328, "start": 3641.28, "end": 3645.28, "text": " And the fact that these are data structures here makes it easy.", "tokens": [51264, 400, 264, 1186, 300, 613, 366, 1412, 9227, 510, 1669, 309, 1858, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 529, "seek": 362328, "start": 3645.28, "end": 3650.28, "text": " You could theoretically say, oh, I could write something and if the compiler could hand me the abstract syntax tree,", "tokens": [51464, 509, 727, 29400, 584, 11, 1954, 11, 286, 727, 2464, 746, 293, 498, 264, 31958, 727, 1011, 385, 264, 12649, 28431, 4230, 11, 51714], "temperature": 0.0, "avg_logprob": -0.1134408224196661, "compression_ratio": 1.6175298804780875, "no_speech_prob": 0.003935912158340216}, {"id": 530, "seek": 365028, "start": 3650.28, "end": 3653.28, "text": " I could navigate it with some custom API and do whatever.", "tokens": [50364, 286, 727, 12350, 309, 365, 512, 2375, 9362, 293, 360, 2035, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1263087497038, "compression_ratio": 1.5551330798479088, "no_speech_prob": 0.007564793340861797}, {"id": 531, "seek": 365028, "start": 3653.28, "end": 3658.28, "text": " It's not nearly the same, though, when what the compiler is handing you are those three data structures.", "tokens": [50514, 467, 311, 406, 6217, 264, 912, 11, 1673, 11, 562, 437, 264, 31958, 307, 34774, 291, 366, 729, 1045, 1412, 9227, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1263087497038, "compression_ratio": 1.5551330798479088, "no_speech_prob": 0.007564793340861797}, {"id": 532, "seek": 365028, "start": 3658.28, "end": 3668.28, "text": " I just showed you that every program knows how to manipulate and has a wildly huge library that directly can manipulate.", "tokens": [50764, 286, 445, 4712, 291, 300, 633, 1461, 3255, 577, 281, 20459, 293, 575, 257, 34731, 2603, 6405, 300, 3838, 393, 20459, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1263087497038, "compression_ratio": 1.5551330798479088, "no_speech_prob": 0.007564793340861797}, {"id": 533, "seek": 365028, "start": 3668.28, "end": 3670.28, "text": " So that's how Lisp works.", "tokens": [51264, 407, 300, 311, 577, 441, 7631, 1985, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1263087497038, "compression_ratio": 1.5551330798479088, "no_speech_prob": 0.007564793340861797}, {"id": 534, "seek": 365028, "start": 3670.28, "end": 3673.28, "text": " I'm going to try to speed it up a little bit.", "tokens": [51364, 286, 478, 516, 281, 853, 281, 3073, 309, 493, 257, 707, 857, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1263087497038, "compression_ratio": 1.5551330798479088, "no_speech_prob": 0.007564793340861797}, {"id": 535, "seek": 365028, "start": 3673.28, "end": 3677.28, "text": " In closure, unlike Java, everything is an expression.", "tokens": [51514, 682, 24653, 11, 8343, 10745, 11, 1203, 307, 364, 6114, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1263087497038, "compression_ratio": 1.5551330798479088, "no_speech_prob": 0.007564793340861797}, {"id": 536, "seek": 367728, "start": 3677.28, "end": 3682.28, "text": " So you know in Java there's a difference between declarations and statements and expressions.", "tokens": [50364, 407, 291, 458, 294, 10745, 456, 311, 257, 2649, 1296, 16694, 763, 293, 12363, 293, 15277, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 537, "seek": 367728, "start": 3682.28, "end": 3684.28, "text": " There's no distinction in closure.", "tokens": [50614, 821, 311, 572, 16844, 294, 24653, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 538, "seek": 367728, "start": 3684.28, "end": 3686.28, "text": " Everything is an expression.", "tokens": [50714, 5471, 307, 364, 6114, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 539, "seek": 367728, "start": 3686.28, "end": 3687.28, "text": " Everything has value.", "tokens": [50814, 5471, 575, 2158, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 540, "seek": 367728, "start": 3687.28, "end": 3689.28, "text": " Everything gets evaluated and produces a value.", "tokens": [50864, 5471, 2170, 25509, 293, 14725, 257, 2158, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 541, "seek": 367728, "start": 3689.28, "end": 3695.28, "text": " Sometimes that value is nil, not particularly meaningful, but everything is an expression.", "tokens": [50964, 4803, 300, 2158, 307, 297, 388, 11, 406, 4098, 10995, 11, 457, 1203, 307, 364, 6114, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 542, "seek": 367728, "start": 3695.28, "end": 3702.28, "text": " So the job of the compiler is to look at the data structures and evaluate them.", "tokens": [51264, 407, 264, 1691, 295, 264, 31958, 307, 281, 574, 412, 264, 1412, 9227, 293, 13059, 552, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 543, "seek": 367728, "start": 3702.28, "end": 3705.28, "text": " There's a really simple rule for that.", "tokens": [51614, 821, 311, 257, 534, 2199, 4978, 337, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07768522991853602, "compression_ratio": 1.7983539094650205, "no_speech_prob": 0.001407391857355833}, {"id": 544, "seek": 370528, "start": 3705.28, "end": 3709.28, "text": " It's slightly oversimplified, but in general you can understand it this way.", "tokens": [50364, 467, 311, 4748, 15488, 332, 564, 2587, 11, 457, 294, 2674, 291, 393, 1223, 309, 341, 636, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1097672346866492, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.0025869859382510185}, {"id": 545, "seek": 370528, "start": 3709.28, "end": 3719.28, "text": " All those data literals I showed you, right, symbols, numbers, character literals, vectors, maps, sets,", "tokens": [50564, 1057, 729, 1412, 2733, 1124, 286, 4712, 291, 11, 558, 11, 16944, 11, 3547, 11, 2517, 2733, 1124, 11, 18875, 11, 11317, 11, 6352, 11, 51064], "temperature": 0.0, "avg_logprob": -0.1097672346866492, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.0025869859382510185}, {"id": 546, "seek": 370528, "start": 3719.28, "end": 3731.28, "text": " are all evaluated by the compiler to represent themselves, except lists and symbols.", "tokens": [51064, 366, 439, 25509, 538, 264, 31958, 281, 2906, 2969, 11, 3993, 14511, 293, 16944, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1097672346866492, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.0025869859382510185}, {"id": 547, "seek": 373128, "start": 3731.28, "end": 3735.28, "text": " Lists and symbols by default are treated specially by the evaluator.", "tokens": [50364, 441, 1751, 293, 16944, 538, 7576, 366, 8668, 22549, 538, 264, 6133, 1639, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10916355281200224, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.012209773063659668}, {"id": 548, "seek": 373128, "start": 3735.28, "end": 3740.28, "text": " So when it reads a list of symbols in particular, it's going to do some work.", "tokens": [50564, 407, 562, 309, 15700, 257, 1329, 295, 16944, 294, 1729, 11, 309, 311, 516, 281, 360, 512, 589, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10916355281200224, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.012209773063659668}, {"id": 549, "seek": 373128, "start": 3740.28, "end": 3743.28, "text": " It's not just going to return the list of symbols to your program.", "tokens": [50814, 467, 311, 406, 445, 516, 281, 2736, 264, 1329, 295, 16944, 281, 428, 1461, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10916355281200224, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.012209773063659668}, {"id": 550, "seek": 373128, "start": 3743.28, "end": 3749.28, "text": " It's going to try to understand them as an operation, which I'll show you in a second.", "tokens": [50964, 467, 311, 516, 281, 853, 281, 1223, 552, 382, 364, 6916, 11, 597, 286, 603, 855, 291, 294, 257, 1150, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10916355281200224, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.012209773063659668}, {"id": 551, "seek": 373128, "start": 3749.28, "end": 3758.28, "text": " So symbols are going to try to, the compiler is going to try to map to values, like variables.", "tokens": [51264, 407, 16944, 366, 516, 281, 853, 281, 11, 264, 31958, 307, 516, 281, 853, 281, 4471, 281, 4190, 11, 411, 9102, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10916355281200224, "compression_ratio": 1.747787610619469, "no_speech_prob": 0.012209773063659668}, {"id": 552, "seek": 375828, "start": 3758.28, "end": 3761.28, "text": " You know in a variable you can say int i equals five.", "tokens": [50364, 509, 458, 294, 257, 7006, 291, 393, 584, 560, 741, 6915, 1732, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 553, "seek": 375828, "start": 3761.28, "end": 3764.28, "text": " Later in your program in Java you say i.", "tokens": [50514, 11965, 294, 428, 1461, 294, 10745, 291, 584, 741, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 554, "seek": 375828, "start": 3764.28, "end": 3767.28, "text": " Java is going to try to figure out, oh, that's five.", "tokens": [50664, 10745, 307, 516, 281, 853, 281, 2573, 484, 11, 1954, 11, 300, 311, 1732, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 555, "seek": 375828, "start": 3767.28, "end": 3769.28, "text": " That's the i you set up there.", "tokens": [50814, 663, 311, 264, 741, 291, 992, 493, 456, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 556, "seek": 375828, "start": 3769.28, "end": 3770.28, "text": " Same thing in closure.", "tokens": [50914, 10635, 551, 294, 24653, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 557, "seek": 375828, "start": 3770.28, "end": 3776.28, "text": " When you use a symbol in your data structure, closure is going to try to find a value that's been associated with that symbol.", "tokens": [50964, 1133, 291, 764, 257, 5986, 294, 428, 1412, 3877, 11, 24653, 307, 516, 281, 853, 281, 915, 257, 2158, 300, 311, 668, 6615, 365, 300, 5986, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 558, "seek": 375828, "start": 3776.28, "end": 3782.28, "text": " It can be associated with it through a construct called let, sort of the way you create a local name,", "tokens": [51264, 467, 393, 312, 6615, 365, 309, 807, 257, 7690, 1219, 718, 11, 1333, 295, 264, 636, 291, 1884, 257, 2654, 1315, 11, 51564], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 559, "seek": 375828, "start": 3782.28, "end": 3787.28, "text": " or through def, which is the way you create a global name.", "tokens": [51564, 420, 807, 1060, 11, 597, 307, 264, 636, 291, 1884, 257, 4338, 1315, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11295294223871447, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.0038787564262747765}, {"id": 560, "seek": 378728, "start": 3787.28, "end": 3791.28, "text": " So before it's a list, and it's going to say this is an operation of some sort.", "tokens": [50364, 407, 949, 309, 311, 257, 1329, 11, 293, 309, 311, 516, 281, 584, 341, 307, 364, 6916, 295, 512, 1333, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 561, "seek": 378728, "start": 3791.28, "end": 3795.28, "text": " I have to figure out what to do with a list.", "tokens": [50564, 286, 362, 281, 2573, 484, 437, 281, 360, 365, 257, 1329, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 562, "seek": 378728, "start": 3795.28, "end": 3797.28, "text": " So how does that work?", "tokens": [50764, 407, 577, 775, 300, 589, 30, 50864], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 563, "seek": 378728, "start": 3797.28, "end": 3799.28, "text": " Well, again, we said what's the data structure?", "tokens": [50864, 1042, 11, 797, 11, 321, 848, 437, 311, 264, 1412, 3877, 30, 50964], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 564, "seek": 378728, "start": 3799.28, "end": 3804.28, "text": " It's friends, it starts with something, it may have more stuff or not.", "tokens": [50964, 467, 311, 1855, 11, 309, 3719, 365, 746, 11, 309, 815, 362, 544, 1507, 420, 406, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 565, "seek": 378728, "start": 3804.28, "end": 3809.28, "text": " But from the evaluator standpoint, all that matters is the first thing.", "tokens": [51214, 583, 490, 264, 6133, 1639, 15827, 11, 439, 300, 7001, 307, 264, 700, 551, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 566, "seek": 378728, "start": 3809.28, "end": 3813.28, "text": " The first thing is the operator, or op.", "tokens": [51464, 440, 700, 551, 307, 264, 12973, 11, 420, 999, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 567, "seek": 378728, "start": 3813.28, "end": 3816.28, "text": " That's going to determine what to do.", "tokens": [51664, 663, 311, 516, 281, 6997, 437, 281, 360, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12373737494150798, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002079569036141038}, {"id": 568, "seek": 381628, "start": 3816.28, "end": 3818.28, "text": " And it can be one of three things.", "tokens": [50364, 400, 309, 393, 312, 472, 295, 1045, 721, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 569, "seek": 381628, "start": 3818.28, "end": 3821.28, "text": " It can be a special op.", "tokens": [50464, 467, 393, 312, 257, 2121, 999, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 570, "seek": 381628, "start": 3821.28, "end": 3822.28, "text": " This is magic.", "tokens": [50614, 639, 307, 5585, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 571, "seek": 381628, "start": 3822.28, "end": 3827.28, "text": " This is the stuff that's built into the compiler upon which everything else is bootstrapped.", "tokens": [50664, 639, 307, 264, 1507, 300, 311, 3094, 666, 264, 31958, 3564, 597, 1203, 1646, 307, 11450, 19639, 3320, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 572, "seek": 381628, "start": 3827.28, "end": 3829.28, "text": " So some things are special.", "tokens": [50914, 407, 512, 721, 366, 2121, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 573, "seek": 381628, "start": 3829.28, "end": 3832.28, "text": " I'm going to enumerate them in a second.", "tokens": [51014, 286, 478, 516, 281, 465, 15583, 473, 552, 294, 257, 1150, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 574, "seek": 381628, "start": 3832.28, "end": 3834.28, "text": " It can be a macro like we saw before.", "tokens": [51164, 467, 393, 312, 257, 18887, 411, 321, 1866, 949, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 575, "seek": 381628, "start": 3834.28, "end": 3841.28, "text": " There's a way to register with the compiler to say, when you see the op, my cool thing,", "tokens": [51264, 821, 311, 257, 636, 281, 7280, 365, 264, 31958, 281, 584, 11, 562, 291, 536, 264, 999, 11, 452, 1627, 551, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08311851893629983, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.0015700232470408082}, {"id": 576, "seek": 384128, "start": 3841.28, "end": 3845.28, "text": " go over here and run this function, which is going to give you something to use", "tokens": [50364, 352, 670, 510, 293, 1190, 341, 2445, 11, 597, 307, 516, 281, 976, 291, 746, 281, 764, 50564], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 577, "seek": 384128, "start": 3845.28, "end": 3848.28, "text": " in place of the my cool thing call.", "tokens": [50564, 294, 1081, 295, 264, 452, 1627, 551, 818, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 578, "seek": 384128, "start": 3848.28, "end": 3852.28, "text": " And the third thing it could be is an ordinary expression.", "tokens": [50714, 400, 264, 2636, 551, 309, 727, 312, 307, 364, 10547, 6114, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 579, "seek": 384128, "start": 3852.28, "end": 3856.28, "text": " It's going to use the normal means of evaluating an expression.", "tokens": [50914, 467, 311, 516, 281, 764, 264, 2710, 1355, 295, 27479, 364, 6114, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 580, "seek": 384128, "start": 3856.28, "end": 3860.28, "text": " And it's going to say whatever value that yields on a treat as a function", "tokens": [51114, 400, 309, 311, 516, 281, 584, 2035, 2158, 300, 32168, 322, 257, 2387, 382, 257, 2445, 51314], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 581, "seek": 384128, "start": 3860.28, "end": 3864.28, "text": " and attempt to call with the calling mechanism of closure,", "tokens": [51314, 293, 5217, 281, 818, 365, 264, 5141, 7513, 295, 24653, 11, 51514], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 582, "seek": 384128, "start": 3864.28, "end": 3870.28, "text": " which is not limited to functions, but it's main purposes for functions.", "tokens": [51514, 597, 307, 406, 5567, 281, 6828, 11, 457, 309, 311, 2135, 9932, 337, 6828, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11487854073900695, "compression_ratio": 1.7903225806451613, "no_speech_prob": 0.007445924449712038}, {"id": 583, "seek": 387028, "start": 3871.28, "end": 3876.28, "text": " So for people who know lists, closure is a list one.", "tokens": [50414, 407, 337, 561, 567, 458, 14511, 11, 24653, 307, 257, 1329, 472, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2663816755468195, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.0007086507976055145}, {"id": 584, "seek": 387028, "start": 3876.28, "end": 3880.28, "text": " It is a list one that supports def macro well.", "tokens": [50664, 467, 307, 257, 1329, 472, 300, 9346, 1060, 18887, 731, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2663816755468195, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.0007086507976055145}, {"id": 585, "seek": 387028, "start": 3880.28, "end": 3887.28, "text": " And the use of namespaces and the way back quote works makes that possible.", "tokens": [50864, 400, 264, 764, 295, 5288, 79, 2116, 293, 264, 636, 646, 6513, 1985, 1669, 300, 1944, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2663816755468195, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.0007086507976055145}, {"id": 586, "seek": 387028, "start": 3887.28, "end": 3889.28, "text": " And everyone else can ignore that.", "tokens": [51214, 400, 1518, 1646, 393, 11200, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2663816755468195, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.0007086507976055145}, {"id": 587, "seek": 387028, "start": 3889.28, "end": 3892.28, "text": " In a way, back legs pull the bunch.", "tokens": [51314, 682, 257, 636, 11, 646, 5668, 2235, 264, 3840, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2663816755468195, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.0007086507976055145}, {"id": 588, "seek": 387028, "start": 3892.28, "end": 3897.28, "text": " An expression in the genome is a function as opposed to it's the function.", "tokens": [51464, 1107, 6114, 294, 264, 21953, 307, 257, 2445, 382, 8851, 281, 309, 311, 264, 2445, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2663816755468195, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.0007086507976055145}, {"id": 589, "seek": 389728, "start": 3897.28, "end": 3901.28, "text": " Well, what it's going to encounter is it's going to encounter a list", "tokens": [50364, 1042, 11, 437, 309, 311, 516, 281, 8593, 307, 309, 311, 516, 281, 8593, 257, 1329, 50564], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 590, "seek": 389728, "start": 3901.28, "end": 3903.28, "text": " and the first thing is going to be the symbol Fred.", "tokens": [50564, 293, 264, 700, 551, 307, 516, 281, 312, 264, 5986, 10112, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 591, "seek": 389728, "start": 3903.28, "end": 3907.28, "text": " Fred is not a special operator, no Fred enclosure.", "tokens": [50664, 10112, 307, 406, 257, 2121, 12973, 11, 572, 10112, 34093, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 592, "seek": 389728, "start": 3907.28, "end": 3911.28, "text": " Let's say no one has registered a macro called Fred.", "tokens": [50864, 961, 311, 584, 572, 472, 575, 13968, 257, 18887, 1219, 10112, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 593, "seek": 389728, "start": 3911.28, "end": 3913.28, "text": " Then it's going to use the rules we said before.", "tokens": [51064, 1396, 309, 311, 516, 281, 764, 264, 4474, 321, 848, 949, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 594, "seek": 389728, "start": 3913.28, "end": 3917.28, "text": " What about symbols to find the value of Fred?", "tokens": [51164, 708, 466, 16944, 281, 915, 264, 2158, 295, 10112, 30, 51364], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 595, "seek": 389728, "start": 3917.28, "end": 3921.28, "text": " Where hopefully someone before has said, Fred is this function.", "tokens": [51364, 2305, 4696, 1580, 949, 575, 848, 11, 10112, 307, 341, 2445, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13619678799468693, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0007201559492386878}, {"id": 596, "seek": 392128, "start": 3922.28, "end": 3926.28, "text": " It will keep evaluating.", "tokens": [50414, 467, 486, 1066, 27479, 13, 50614], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 597, "seek": 392128, "start": 3926.28, "end": 3928.28, "text": " It's going to evaluate that expression.", "tokens": [50614, 467, 311, 516, 281, 13059, 300, 6114, 13, 50714], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 598, "seek": 392128, "start": 3928.28, "end": 3933.28, "text": " But there are other function like things or callable things in closure", "tokens": [50714, 583, 456, 366, 661, 2445, 411, 721, 420, 818, 712, 721, 294, 24653, 50964], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 599, "seek": 392128, "start": 3933.28, "end": 3934.28, "text": " in addition to functions.", "tokens": [50964, 294, 4500, 281, 6828, 13, 51014], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 600, "seek": 392128, "start": 3934.28, "end": 3936.28, "text": " I'll show you that in a second.", "tokens": [51014, 286, 603, 855, 291, 300, 294, 257, 1150, 13, 51114], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 601, "seek": 392128, "start": 3936.28, "end": 3938.28, "text": " So let's dig down into each of these three pieces.", "tokens": [51114, 407, 718, 311, 2528, 760, 666, 1184, 295, 613, 1045, 3755, 13, 51214], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 602, "seek": 392128, "start": 3938.28, "end": 3939.28, "text": " Yes.", "tokens": [51214, 1079, 13, 51264], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 603, "seek": 392128, "start": 3939.28, "end": 3941.28, "text": " It doesn't encounter any one of those three.", "tokens": [51264, 467, 1177, 380, 8593, 604, 472, 295, 729, 1045, 13, 51364], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 604, "seek": 392128, "start": 3941.28, "end": 3945.28, "text": " You have an error at runtime.", "tokens": [51364, 509, 362, 364, 6713, 412, 34474, 13, 51564], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 605, "seek": 392128, "start": 3945.28, "end": 3947.28, "text": " It'll say it's not a function.", "tokens": [51564, 467, 603, 584, 309, 311, 406, 257, 2445, 13, 51664], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 606, "seek": 392128, "start": 3947.28, "end": 3949.28, "text": " Effectively what will happen is it will say this is not a function.", "tokens": [51664, 17764, 3413, 437, 486, 1051, 307, 309, 486, 584, 341, 307, 406, 257, 2445, 13, 51764], "temperature": 0.0, "avg_logprob": -0.139503495032046, "compression_ratio": 1.7056451612903225, "no_speech_prob": 0.0025072621647268534}, {"id": 607, "seek": 394928, "start": 3949.28, "end": 3954.28, "text": " If you said Fred is deaf Fred one, so Fred is the number one", "tokens": [50364, 759, 291, 848, 10112, 307, 15559, 10112, 472, 11, 370, 10112, 307, 264, 1230, 472, 50614], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 608, "seek": 394928, "start": 3954.28, "end": 3957.28, "text": " and you've tried to call Fred or use Fred as an operator,", "tokens": [50614, 293, 291, 600, 3031, 281, 818, 10112, 420, 764, 10112, 382, 364, 12973, 11, 50764], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 609, "seek": 394928, "start": 3957.28, "end": 3959.28, "text": " it's going to say one is not a function.", "tokens": [50764, 309, 311, 516, 281, 584, 472, 307, 406, 257, 2445, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 610, "seek": 394928, "start": 3959.28, "end": 3965.28, "text": " Probably with a not very illuminating stack trace.", "tokens": [50864, 9210, 365, 257, 406, 588, 28593, 990, 8630, 13508, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 611, "seek": 394928, "start": 3969.28, "end": 3971.28, "text": " Okay, so special operators.", "tokens": [51364, 1033, 11, 370, 2121, 19077, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 612, "seek": 394928, "start": 3971.28, "end": 3972.28, "text": " There are very few.", "tokens": [51464, 821, 366, 588, 1326, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 613, "seek": 394928, "start": 3972.28, "end": 3974.28, "text": " I think one of the things that's really cool about lists", "tokens": [51514, 286, 519, 472, 295, 264, 721, 300, 311, 534, 1627, 466, 14511, 51614], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 614, "seek": 394928, "start": 3974.28, "end": 3978.28, "text": " and it's also cool about closure is you can define most of them", "tokens": [51614, 293, 309, 311, 611, 1627, 466, 24653, 307, 291, 393, 6964, 881, 295, 552, 51814], "temperature": 0.0, "avg_logprob": -0.14852246784028553, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0015961559256538749}, {"id": 615, "seek": 397828, "start": 3978.28, "end": 3980.28, "text": " in terms of themselves.", "tokens": [50364, 294, 2115, 295, 2969, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 616, "seek": 397828, "start": 3980.28, "end": 3983.28, "text": " One of the great brilliant things that John McCarthy did", "tokens": [50464, 1485, 295, 264, 869, 10248, 721, 300, 2619, 44085, 630, 50614], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 617, "seek": 397828, "start": 3983.28, "end": 3988.28, "text": " when he invented lists was figure out that with only I think seven primitives,", "tokens": [50614, 562, 415, 14479, 14511, 390, 2573, 484, 300, 365, 787, 286, 519, 3407, 2886, 38970, 11, 50864], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 618, "seek": 397828, "start": 3988.28, "end": 3992.28, "text": " you could define the evaluator for those seven primitives", "tokens": [50864, 291, 727, 6964, 264, 6133, 1639, 337, 729, 3407, 2886, 38970, 51064], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 619, "seek": 397828, "start": 3992.28, "end": 3994.28, "text": " and everything you could build on them.", "tokens": [51064, 293, 1203, 291, 727, 1322, 322, 552, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 620, "seek": 397828, "start": 3994.28, "end": 3997.28, "text": " Like the core of computation.", "tokens": [51164, 1743, 264, 4965, 295, 24903, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 621, "seek": 397828, "start": 3997.28, "end": 4000.28, "text": " It still gives me goosebumps when I say that.", "tokens": [51314, 467, 920, 2709, 385, 48305, 562, 286, 584, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 622, "seek": 397828, "start": 4000.28, "end": 4003.28, "text": " It is a beautiful thing.", "tokens": [51464, 467, 307, 257, 2238, 551, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 623, "seek": 397828, "start": 4003.28, "end": 4004.28, "text": " It really is.", "tokens": [51614, 467, 534, 307, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1083829899628957, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.0044404142536222935}, {"id": 624, "seek": 400428, "start": 4004.28, "end": 4008.28, "text": " And if you've never looked at the lambda calculus or at least from that perspective,", "tokens": [50364, 400, 498, 291, 600, 1128, 2956, 412, 264, 13607, 33400, 420, 412, 1935, 490, 300, 4585, 11, 50564], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 625, "seek": 400428, "start": 4008.28, "end": 4010.28, "text": " it's quite stunning.", "tokens": [50564, 309, 311, 1596, 18550, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 626, "seek": 400428, "start": 4010.28, "end": 4017.28, "text": " These early papers are just great and they're just brilliant in a transparent way.", "tokens": [50664, 1981, 2440, 10577, 366, 445, 869, 293, 436, 434, 445, 10248, 294, 257, 12737, 636, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 627, "seek": 400428, "start": 4017.28, "end": 4018.28, "text": " So let's look at a couple.", "tokens": [51014, 407, 718, 311, 574, 412, 257, 1916, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 628, "seek": 400428, "start": 4018.28, "end": 4021.28, "text": " I'm going to show you two and then I'm going to list the rest.", "tokens": [51064, 286, 478, 516, 281, 855, 291, 732, 293, 550, 286, 478, 516, 281, 1329, 264, 1472, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 629, "seek": 400428, "start": 4021.28, "end": 4022.28, "text": " Deaf would be one.", "tokens": [51214, 31389, 576, 312, 472, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 630, "seek": 400428, "start": 4022.28, "end": 4026.28, "text": " How do we establish a value for a name?", "tokens": [51264, 1012, 360, 321, 8327, 257, 2158, 337, 257, 1315, 30, 51464], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 631, "seek": 400428, "start": 4026.28, "end": 4029.28, "text": " There's this special operator called deaf.", "tokens": [51464, 821, 311, 341, 2121, 12973, 1219, 15559, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 632, "seek": 400428, "start": 4029.28, "end": 4030.28, "text": " It takes a name.", "tokens": [51614, 467, 2516, 257, 1315, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 633, "seek": 400428, "start": 4030.28, "end": 4033.28, "text": " Now that name is going to be a symbol.", "tokens": [51664, 823, 300, 1315, 307, 516, 281, 312, 257, 5986, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11112522497409727, "compression_ratio": 1.6029411764705883, "no_speech_prob": 0.0021789162419736385}, {"id": 634, "seek": 403328, "start": 4033.28, "end": 4038.28, "text": " Obviously, that can't be evaluated, right?", "tokens": [50364, 7580, 11, 300, 393, 380, 312, 25509, 11, 558, 30, 50614], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 635, "seek": 403328, "start": 4038.28, "end": 4042.28, "text": " Because the whole purpose of this special operator is to give it a value.", "tokens": [50614, 1436, 264, 1379, 4334, 295, 341, 2121, 12973, 307, 281, 976, 309, 257, 2158, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 636, "seek": 403328, "start": 4042.28, "end": 4046.28, "text": " If the compiler were to use normal evaluation, the name position,", "tokens": [50814, 759, 264, 31958, 645, 281, 764, 2710, 13344, 11, 264, 1315, 2535, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 637, "seek": 403328, "start": 4046.28, "end": 4050.28, "text": " you'd have a problem because you're trying to define what it means.", "tokens": [51014, 291, 1116, 362, 257, 1154, 570, 291, 434, 1382, 281, 6964, 437, 309, 1355, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 638, "seek": 403328, "start": 4050.28, "end": 4051.28, "text": " How could you do that?", "tokens": [51214, 1012, 727, 291, 360, 300, 30, 51264], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 639, "seek": 403328, "start": 4051.28, "end": 4055.28, "text": " So one of the things about special operators that you have to remember,", "tokens": [51264, 407, 472, 295, 264, 721, 466, 2121, 19077, 300, 291, 362, 281, 1604, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 640, "seek": 403328, "start": 4055.28, "end": 4062.28, "text": " and it's true of macros as well, is they can have non-normal evaluation of their arguments.", "tokens": [51464, 293, 309, 311, 2074, 295, 7912, 2635, 382, 731, 11, 307, 436, 393, 362, 2107, 12, 23157, 13344, 295, 641, 12869, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09382717888634484, "compression_ratio": 1.7003891050583657, "no_speech_prob": 0.0018635488813742995}, {"id": 641, "seek": 406228, "start": 4062.28, "end": 4064.28, "text": " Like, the arguments might not be evaluated.", "tokens": [50364, 1743, 11, 264, 12869, 1062, 406, 312, 25509, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 642, "seek": 406228, "start": 4064.28, "end": 4067.28, "text": " In fact, deaf doesn't evaluate the name.", "tokens": [50464, 682, 1186, 11, 15559, 1177, 380, 13059, 264, 1315, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 643, "seek": 406228, "start": 4067.28, "end": 4072.28, "text": " It uses it as a symbol and it associates that symbol with the value.", "tokens": [50614, 467, 4960, 309, 382, 257, 5986, 293, 309, 36914, 300, 5986, 365, 264, 2158, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 644, "seek": 406228, "start": 4072.28, "end": 4075.28, "text": " It does not evaluate the symbol.", "tokens": [50864, 467, 775, 406, 13059, 264, 5986, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 645, "seek": 406228, "start": 4075.28, "end": 4080.28, "text": " So this is a simple way to say, if I say deaf name, some expression,", "tokens": [51014, 407, 341, 307, 257, 2199, 636, 281, 584, 11, 498, 286, 584, 15559, 1315, 11, 512, 6114, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 646, "seek": 406228, "start": 4080.28, "end": 4084.28, "text": " the expression will be evaluated, the name will be mapped to that value", "tokens": [51264, 264, 6114, 486, 312, 25509, 11, 264, 1315, 486, 312, 33318, 281, 300, 2158, 51464], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 647, "seek": 406228, "start": 4084.28, "end": 4086.28, "text": " or bound to that value.", "tokens": [51464, 420, 5472, 281, 300, 2158, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 648, "seek": 406228, "start": 4086.28, "end": 4089.28, "text": " When you later go and say name, you'll get the value.", "tokens": [51564, 1133, 291, 1780, 352, 293, 584, 1315, 11, 291, 603, 483, 264, 2158, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 649, "seek": 406228, "start": 4089.28, "end": 4091.28, "text": " It was used to initialize it.", "tokens": [51714, 467, 390, 1143, 281, 5883, 1125, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07510829957063533, "compression_ratio": 1.858974358974359, "no_speech_prob": 0.0008153753005899489}, {"id": 650, "seek": 409128, "start": 4092.28, "end": 4097.280000000001, "text": " You actually can do that more than once.", "tokens": [50414, 509, 767, 393, 360, 300, 544, 813, 1564, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09852494389177804, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0008283483912236989}, {"id": 651, "seek": 409128, "start": 4097.280000000001, "end": 4101.280000000001, "text": " You shouldn't do that more than once unless you're trying to fix something.", "tokens": [50664, 509, 4659, 380, 360, 300, 544, 813, 1564, 5969, 291, 434, 1382, 281, 3191, 746, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09852494389177804, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0008283483912236989}, {"id": 652, "seek": 409128, "start": 4101.280000000001, "end": 4104.280000000001, "text": " In other words, deaf should not be used as set.", "tokens": [50864, 682, 661, 2283, 11, 15559, 820, 406, 312, 1143, 382, 992, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09852494389177804, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0008283483912236989}, {"id": 653, "seek": 409128, "start": 4104.280000000001, "end": 4109.280000000001, "text": " But you can use deaf to define a function and later you can use it again to fix it.", "tokens": [51014, 583, 291, 393, 764, 15559, 281, 6964, 257, 2445, 293, 1780, 291, 393, 764, 309, 797, 281, 3191, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09852494389177804, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0008283483912236989}, {"id": 654, "seek": 409128, "start": 4109.280000000001, "end": 4113.280000000001, "text": " So the things that are defined by deaf are mutable at the root", "tokens": [51264, 407, 264, 721, 300, 366, 7642, 538, 15559, 366, 5839, 712, 412, 264, 5593, 51464], "temperature": 0.0, "avg_logprob": -0.09852494389177804, "compression_ratio": 1.681081081081081, "no_speech_prob": 0.0008283483912236989}, {"id": 655, "seek": 411328, "start": 4113.28, "end": 4121.28, "text": " and it's probably, you know, it's the only escape hatch for that dynamic change enclosure.", "tokens": [50364, 293, 309, 311, 1391, 11, 291, 458, 11, 309, 311, 264, 787, 7615, 17387, 337, 300, 8546, 1319, 34093, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 656, "seek": 411328, "start": 4121.28, "end": 4127.28, "text": " That's not governed by transactions or some other mechanism.", "tokens": [50764, 663, 311, 406, 35529, 538, 16856, 420, 512, 661, 7513, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 657, "seek": 411328, "start": 4127.28, "end": 4130.28, "text": " Okay, so it establishes a global variable.", "tokens": [51064, 1033, 11, 370, 309, 8327, 279, 257, 4338, 7006, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 658, "seek": 411328, "start": 4130.28, "end": 4131.28, "text": " Again, there are namespaces.", "tokens": [51214, 3764, 11, 456, 366, 5288, 79, 2116, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 659, "seek": 411328, "start": 4131.28, "end": 4134.28, "text": " I don't have the time to talk about them, but it's all subject to a namespace.", "tokens": [51264, 286, 500, 380, 362, 264, 565, 281, 751, 466, 552, 11, 457, 309, 311, 439, 3983, 281, 257, 5288, 17940, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 660, "seek": 411328, "start": 4134.28, "end": 4137.28, "text": " If you're in a namespace and you define the name, then it's in your namespace.", "tokens": [51414, 759, 291, 434, 294, 257, 5288, 17940, 293, 291, 6964, 264, 1315, 11, 550, 309, 311, 294, 428, 5288, 17940, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 661, "seek": 411328, "start": 4137.28, "end": 4139.28, "text": " It's distinct from that same name in another namespace.", "tokens": [51564, 467, 311, 10644, 490, 300, 912, 1315, 294, 1071, 5288, 17940, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10332089111584575, "compression_ratio": 1.693798449612403, "no_speech_prob": 0.012011362239718437}, {"id": 662, "seek": 413928, "start": 4139.28, "end": 4142.28, "text": " Namespaces are not the same as packages in CommonList.", "tokens": [50364, 426, 1632, 79, 2116, 366, 406, 264, 912, 382, 17401, 294, 18235, 43, 468, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 663, "seek": 413928, "start": 4142.28, "end": 4144.28, "text": " They're very much different in particular.", "tokens": [50514, 814, 434, 588, 709, 819, 294, 1729, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 664, "seek": 413928, "start": 4144.28, "end": 4147.28, "text": " Symbols are not inherently in a namespace.", "tokens": [50614, 3902, 5612, 82, 366, 406, 27993, 294, 257, 5288, 17940, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 665, "seek": 413928, "start": 4147.28, "end": 4151.28, "text": " Symbols have no value, sell, they're not places.", "tokens": [50764, 3902, 5612, 82, 362, 572, 2158, 11, 3607, 11, 436, 434, 406, 3190, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 666, "seek": 413928, "start": 4151.28, "end": 4153.28, "text": " They're just labels.", "tokens": [50964, 814, 434, 445, 16949, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 667, "seek": 413928, "start": 4153.28, "end": 4158.28, "text": " And there are vars, which are the places more like CommonList symbols.", "tokens": [51064, 400, 456, 366, 46130, 11, 597, 366, 264, 3190, 544, 411, 18235, 43, 468, 16944, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 668, "seek": 413928, "start": 4160.28, "end": 4162.28, "text": " If is another thing that's built in.", "tokens": [51414, 759, 307, 1071, 551, 300, 311, 3094, 294, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 669, "seek": 413928, "start": 4162.28, "end": 4167.28, "text": " And if you think about if in your language, which you may not have ever done.", "tokens": [51514, 400, 498, 291, 519, 466, 498, 294, 428, 2856, 11, 597, 291, 815, 406, 362, 1562, 1096, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12768577274523282, "compression_ratio": 1.6708860759493671, "no_speech_prob": 0.005454728379845619}, {"id": 670, "seek": 416728, "start": 4167.28, "end": 4171.28, "text": " If you thought about if is, why couldn't if be a function?", "tokens": [50364, 759, 291, 1194, 466, 498, 307, 11, 983, 2809, 380, 498, 312, 257, 2445, 30, 50564], "temperature": 0.0, "avg_logprob": -0.1851338731481674, "compression_ratio": 1.907514450867052, "no_speech_prob": 0.007443957030773163}, {"id": 671, "seek": 416728, "start": 4171.28, "end": 4177.28, "text": " Why can't I say if some test expression, some expression, some else expression?", "tokens": [50564, 1545, 393, 380, 286, 584, 498, 512, 1500, 6114, 11, 512, 6114, 11, 512, 1646, 6114, 30, 50864], "temperature": 0.0, "avg_logprob": -0.1851338731481674, "compression_ratio": 1.907514450867052, "no_speech_prob": 0.007443957030773163}, {"id": 672, "seek": 416728, "start": 4177.28, "end": 4179.28, "text": " Why can't if be a function?", "tokens": [50864, 1545, 393, 380, 498, 312, 257, 2445, 30, 50964], "temperature": 0.0, "avg_logprob": -0.1851338731481674, "compression_ratio": 1.907514450867052, "no_speech_prob": 0.007443957030773163}, {"id": 673, "seek": 416728, "start": 4179.28, "end": 4180.28, "text": " I mean, it looks like a function.", "tokens": [50964, 286, 914, 11, 309, 1542, 411, 257, 2445, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1851338731481674, "compression_ratio": 1.907514450867052, "no_speech_prob": 0.007443957030773163}, {"id": 674, "seek": 416728, "start": 4180.28, "end": 4185.28, "text": " Well, it doesn't actually look like a function in Java, but why can't it be a function?", "tokens": [51014, 1042, 11, 309, 1177, 380, 767, 574, 411, 257, 2445, 294, 10745, 11, 457, 983, 393, 380, 309, 312, 257, 2445, 30, 51264], "temperature": 0.0, "avg_logprob": -0.1851338731481674, "compression_ratio": 1.907514450867052, "no_speech_prob": 0.007443957030773163}, {"id": 675, "seek": 416728, "start": 4185.28, "end": 4195.28, "text": " It should only evaluate one of these two.", "tokens": [51264, 467, 820, 787, 13059, 472, 295, 613, 732, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1851338731481674, "compression_ratio": 1.907514450867052, "no_speech_prob": 0.007443957030773163}, {"id": 676, "seek": 419528, "start": 4196.28, "end": 4197.28, "text": " That's why.", "tokens": [50414, 663, 311, 983, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 677, "seek": 419528, "start": 4197.28, "end": 4199.28, "text": " And a function evaluates what?", "tokens": [50464, 400, 257, 2445, 6133, 1024, 437, 30, 50564], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 678, "seek": 419528, "start": 4199.28, "end": 4201.28, "text": " All of its arguments.", "tokens": [50564, 1057, 295, 1080, 12869, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 679, "seek": 419528, "start": 4201.28, "end": 4207.28, "text": " So if you try to write if as a function, you would have a problem because functions evaluate all their arguments.", "tokens": [50664, 407, 498, 291, 853, 281, 2464, 498, 382, 257, 2445, 11, 291, 576, 362, 257, 1154, 570, 6828, 13059, 439, 641, 12869, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 680, "seek": 419528, "start": 4207.28, "end": 4211.28, "text": " So if has to be special, and if is special in closure too.", "tokens": [50964, 407, 498, 575, 281, 312, 2121, 11, 293, 498, 307, 2121, 294, 24653, 886, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 681, "seek": 419528, "start": 4211.28, "end": 4213.28, "text": " It evaluates the test expression.", "tokens": [51164, 467, 6133, 1024, 264, 1500, 6114, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 682, "seek": 419528, "start": 4213.28, "end": 4219.28, "text": " And then, depending on the truth or falsity of this in kind of a generic sense,", "tokens": [51264, 400, 550, 11, 5413, 322, 264, 3494, 420, 16720, 507, 295, 341, 294, 733, 295, 257, 19577, 2020, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1592162847518921, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01378653198480606}, {"id": 683, "seek": 421928, "start": 4219.28, "end": 4226.28, "text": " in closure, if this is nil or false, it will evaluate that.", "tokens": [50364, 294, 24653, 11, 498, 341, 307, 297, 388, 420, 7908, 11, 309, 486, 13059, 300, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 684, "seek": 421928, "start": 4226.28, "end": 4229.28, "text": " If it's anything else, it will evaluate this.", "tokens": [50714, 759, 309, 311, 1340, 1646, 11, 309, 486, 13059, 341, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 685, "seek": 421928, "start": 4229.28, "end": 4233.28, "text": " But it will only evaluate one of those two things.", "tokens": [50864, 583, 309, 486, 787, 13059, 472, 295, 729, 732, 721, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 686, "seek": 421928, "start": 4233.28, "end": 4235.28, "text": " It must have a false.", "tokens": [51064, 467, 1633, 362, 257, 7908, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 687, "seek": 421928, "start": 4235.28, "end": 4237.28, "text": " No, it doesn't have to.", "tokens": [51164, 883, 11, 309, 1177, 380, 362, 281, 13, 51264], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 688, "seek": 421928, "start": 4237.28, "end": 4241.28, "text": " The else can be missing in which case it defaults to nil.", "tokens": [51264, 440, 1646, 393, 312, 5361, 294, 597, 1389, 309, 7576, 82, 281, 297, 388, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 689, "seek": 421928, "start": 4241.28, "end": 4245.28, "text": " So if is another example of something that has to be special.", "tokens": [51464, 407, 498, 307, 1071, 1365, 295, 746, 300, 575, 281, 312, 2121, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 690, "seek": 421928, "start": 4245.28, "end": 4247.28, "text": " It can't evaluate all of its arguments.", "tokens": [51664, 467, 393, 380, 13059, 439, 295, 1080, 12869, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21902845507470248, "compression_ratio": 1.7075471698113207, "no_speech_prob": 0.01582908444106579}, {"id": 691, "seek": 424728, "start": 4247.28, "end": 4251.28, "text": " And then we have these others.", "tokens": [50364, 400, 550, 321, 362, 613, 2357, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 692, "seek": 424728, "start": 4251.28, "end": 4253.28, "text": " In fact, this is it.", "tokens": [50564, 682, 1186, 11, 341, 307, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 693, "seek": 424728, "start": 4253.28, "end": 4256.28, "text": " There's something that defines a function.", "tokens": [50664, 821, 311, 746, 300, 23122, 257, 2445, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 694, "seek": 424728, "start": 4256.28, "end": 4261.28, "text": " Something that establishes names in a local scope.", "tokens": [50814, 6595, 300, 8327, 279, 5288, 294, 257, 2654, 11923, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 695, "seek": 424728, "start": 4261.28, "end": 4266.28, "text": " A pair of things that allow you to do functional looping.", "tokens": [51064, 316, 6119, 295, 721, 300, 2089, 291, 281, 360, 11745, 6367, 278, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 696, "seek": 424728, "start": 4266.28, "end": 4268.28, "text": " To create a loop in your program.", "tokens": [51314, 1407, 1884, 257, 6367, 294, 428, 1461, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 697, "seek": 424728, "start": 4268.28, "end": 4273.28, "text": " Something that lets you create a block of statements the last of which will be the value.", "tokens": [51414, 6595, 300, 6653, 291, 1884, 257, 3461, 295, 12363, 264, 1036, 295, 597, 486, 312, 264, 2158, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12839973932025076, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.002626765752211213}, {"id": 698, "seek": 427328, "start": 4273.28, "end": 4276.28, "text": " It allocates a new Java thing.", "tokens": [50364, 467, 12660, 1024, 257, 777, 10745, 551, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 699, "seek": 427328, "start": 4276.28, "end": 4279.28, "text": " Access to members of Java thing.", "tokens": [50514, 17166, 281, 2679, 295, 10745, 551, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 700, "seek": 427328, "start": 4279.28, "end": 4284.28, "text": " Throw, try, do what you expect from Java.", "tokens": [50664, 22228, 11, 853, 11, 360, 437, 291, 2066, 490, 10745, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 701, "seek": 427328, "start": 4284.28, "end": 4288.28, "text": " Set, will rebind a value.", "tokens": [50914, 8928, 11, 486, 12970, 471, 257, 2158, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 702, "seek": 427328, "start": 4288.28, "end": 4292.28, "text": " And code bar are kind of a special purpose for list manipulation things.", "tokens": [51114, 400, 3089, 2159, 366, 733, 295, 257, 2121, 4334, 337, 1329, 26475, 721, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 703, "seek": 427328, "start": 4292.28, "end": 4294.28, "text": " So I'm not going to get into them tonight.", "tokens": [51314, 407, 286, 478, 406, 516, 281, 483, 666, 552, 4440, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 704, "seek": 427328, "start": 4294.28, "end": 4295.28, "text": " Question.", "tokens": [51414, 14464, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 705, "seek": 427328, "start": 4295.28, "end": 4297.28, "text": " Is that the entire list of?", "tokens": [51464, 1119, 300, 264, 2302, 1329, 295, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 706, "seek": 427328, "start": 4297.28, "end": 4298.28, "text": " Yeah.", "tokens": [51564, 865, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 707, "seek": 427328, "start": 4298.28, "end": 4300.28, "text": " So what's the equivalent of death macro?", "tokens": [51614, 407, 437, 311, 264, 10344, 295, 2966, 18887, 30, 51714], "temperature": 0.0, "avg_logprob": -0.2863728740427754, "compression_ratio": 1.502262443438914, "no_speech_prob": 0.07871397584676743}, {"id": 708, "seek": 430028, "start": 4300.28, "end": 4305.28, "text": " Death macro is bootstrapped on this.", "tokens": [50364, 13703, 18887, 307, 11450, 19639, 3320, 322, 341, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 709, "seek": 430028, "start": 4305.28, "end": 4309.28, "text": " So there's a key border.", "tokens": [50614, 407, 456, 311, 257, 2141, 7838, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 710, "seek": 430028, "start": 4309.28, "end": 4311.28, "text": " Oh no, there is death macro.", "tokens": [50814, 876, 572, 11, 456, 307, 2966, 18887, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 711, "seek": 430028, "start": 4311.28, "end": 4316.28, "text": " It's defined a couple of pages into the boot script for closure, which I might show you.", "tokens": [50914, 467, 311, 7642, 257, 1916, 295, 7183, 666, 264, 11450, 5755, 337, 24653, 11, 597, 286, 1062, 855, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 712, "seek": 430028, "start": 4316.28, "end": 4318.28, "text": " We have some time.", "tokens": [51164, 492, 362, 512, 565, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 713, "seek": 430028, "start": 4318.28, "end": 4319.28, "text": " Yes.", "tokens": [51264, 1079, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 714, "seek": 430028, "start": 4319.28, "end": 4320.28, "text": " I'm just intrigued.", "tokens": [51314, 286, 478, 445, 35140, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 715, "seek": 430028, "start": 4320.28, "end": 4324.28, "text": " The reason for the explanation point of the set is it trying to say something to the program?", "tokens": [51364, 440, 1778, 337, 264, 10835, 935, 295, 264, 992, 307, 309, 1382, 281, 584, 746, 281, 264, 1461, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 716, "seek": 430028, "start": 4324.28, "end": 4326.28, "text": " Yeah, this is bad.", "tokens": [51564, 865, 11, 341, 307, 1578, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 717, "seek": 430028, "start": 4326.28, "end": 4327.28, "text": " Why are you doing this for?", "tokens": [51664, 1545, 366, 291, 884, 341, 337, 30, 51714], "temperature": 0.0, "avg_logprob": -0.2544160322709517, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.07632379978895187}, {"id": 718, "seek": 432728, "start": 4328.28, "end": 4332.28, "text": " Yes.", "tokens": [50414, 1079, 13, 50614], "temperature": 0.0, "avg_logprob": -0.21869314418119543, "compression_ratio": 1.4489795918367347, "no_speech_prob": 0.00262812664732337}, {"id": 719, "seek": 432728, "start": 4336.28, "end": 4338.28, "text": " No, it ends up that enclosure.", "tokens": [50814, 883, 11, 309, 5314, 493, 300, 34093, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21869314418119543, "compression_ratio": 1.4489795918367347, "no_speech_prob": 0.00262812664732337}, {"id": 720, "seek": 432728, "start": 4338.28, "end": 4341.28, "text": " Macros are functions.", "tokens": [50914, 5707, 2635, 366, 6828, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21869314418119543, "compression_ratio": 1.4489795918367347, "no_speech_prob": 0.00262812664732337}, {"id": 721, "seek": 432728, "start": 4341.28, "end": 4352.28, "text": " And so there's just a way to say this function is a macro and it will be treated as a macro instead of as a function.", "tokens": [51064, 400, 370, 456, 311, 445, 257, 636, 281, 584, 341, 2445, 307, 257, 18887, 293, 309, 486, 312, 8668, 382, 257, 18887, 2602, 295, 382, 257, 2445, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21869314418119543, "compression_ratio": 1.4489795918367347, "no_speech_prob": 0.00262812664732337}, {"id": 722, "seek": 432728, "start": 4352.28, "end": 4353.28, "text": " Okay.", "tokens": [51614, 1033, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21869314418119543, "compression_ratio": 1.4489795918367347, "no_speech_prob": 0.00262812664732337}, {"id": 723, "seek": 432728, "start": 4353.28, "end": 4356.28, "text": " So that's a tiny set of things.", "tokens": [51664, 407, 300, 311, 257, 5870, 992, 295, 721, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21869314418119543, "compression_ratio": 1.4489795918367347, "no_speech_prob": 0.00262812664732337}, {"id": 724, "seek": 435628, "start": 4356.28, "end": 4360.28, "text": " In fact, when you take out the stuff related to Java, it's an extremely tiny set.", "tokens": [50364, 682, 1186, 11, 562, 291, 747, 484, 264, 1507, 4077, 281, 10745, 11, 309, 311, 364, 4664, 5870, 992, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 725, "seek": 435628, "start": 4360.28, "end": 4362.28, "text": " I don't think I made it down to seven.", "tokens": [50564, 286, 500, 380, 519, 286, 1027, 309, 760, 281, 3407, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 726, "seek": 435628, "start": 4362.28, "end": 4367.28, "text": " One, two, three, four, five, six, seven, eight.", "tokens": [50664, 1485, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 2309, 11, 3407, 11, 3180, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 727, "seek": 435628, "start": 4367.28, "end": 4369.28, "text": " I have more than more properties.", "tokens": [50914, 286, 362, 544, 813, 544, 7221, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 728, "seek": 435628, "start": 4369.28, "end": 4372.28, "text": " But I don't have dozens.", "tokens": [51014, 583, 286, 500, 380, 362, 18431, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 729, "seek": 435628, "start": 4372.28, "end": 4374.28, "text": " So how could this possibly work?", "tokens": [51164, 407, 577, 727, 341, 6264, 589, 30, 51264], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 730, "seek": 435628, "start": 4374.28, "end": 4378.28, "text": " This is not enough to program with this.", "tokens": [51264, 639, 307, 406, 1547, 281, 1461, 365, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 731, "seek": 435628, "start": 4378.28, "end": 4380.28, "text": " No.", "tokens": [51464, 883, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 732, "seek": 435628, "start": 4380.28, "end": 4381.28, "text": " No, no, no.", "tokens": [51564, 883, 11, 572, 11, 572, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 733, "seek": 435628, "start": 4381.28, "end": 4383.28, "text": " So we need macros.", "tokens": [51614, 407, 321, 643, 7912, 2635, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14115883818769878, "compression_ratio": 1.4933333333333334, "no_speech_prob": 0.005723256152123213}, {"id": 734, "seek": 438328, "start": 4383.28, "end": 4384.28, "text": " Okay.", "tokens": [50364, 1033, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 735, "seek": 438328, "start": 4384.28, "end": 4389.28, "text": " There are plenty supplied with closure.", "tokens": [50414, 821, 366, 7140, 27625, 365, 24653, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 736, "seek": 438328, "start": 4389.28, "end": 4397.28, "text": " And what's beautiful about closure and LISPs is you have the same power that I have to write macros.", "tokens": [50664, 400, 437, 311, 2238, 466, 24653, 293, 441, 2343, 23043, 307, 291, 362, 264, 912, 1347, 300, 286, 362, 281, 2464, 7912, 2635, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 737, "seek": 438328, "start": 4397.28, "end": 4404.28, "text": " When you see the kinds of things that are implemented in closure as macros, you realize the kind of power you have as a developer", "tokens": [51064, 1133, 291, 536, 264, 3685, 295, 721, 300, 366, 12270, 294, 24653, 382, 7912, 2635, 11, 291, 4325, 264, 733, 295, 1347, 291, 362, 382, 257, 10754, 51414], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 738, "seek": 438328, "start": 4404.28, "end": 4406.28, "text": " because you can write those same macros.", "tokens": [51414, 570, 291, 393, 2464, 729, 912, 7912, 2635, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 739, "seek": 438328, "start": 4406.28, "end": 4408.28, "text": " You could have written them.", "tokens": [51514, 509, 727, 362, 3720, 552, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 740, "seek": 438328, "start": 4408.28, "end": 4410.28, "text": " You don't have to wait for me.", "tokens": [51614, 509, 500, 380, 362, 281, 1699, 337, 385, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 741, "seek": 438328, "start": 4410.28, "end": 4412.28, "text": " I'm not son.", "tokens": [51714, 286, 478, 406, 1872, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09199342995046456, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.0012820148840546608}, {"id": 742, "seek": 441228, "start": 4412.28, "end": 4413.28, "text": " This is not Java.", "tokens": [50364, 639, 307, 406, 10745, 13, 50414], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 743, "seek": 441228, "start": 4413.28, "end": 4414.28, "text": " You want to do something.", "tokens": [50414, 509, 528, 281, 360, 746, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 744, "seek": 441228, "start": 4414.28, "end": 4416.28, "text": " You have something you want to express a certain way.", "tokens": [50464, 509, 362, 746, 291, 528, 281, 5109, 257, 1629, 636, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 745, "seek": 441228, "start": 4416.28, "end": 4418.28, "text": " You want to extend the language that way.", "tokens": [50564, 509, 528, 281, 10101, 264, 2856, 300, 636, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 746, "seek": 441228, "start": 4418.28, "end": 4425.28, "text": " If you can do it with a macro, you can do it without contacting me or asking me for the favor of adding a feature for you,", "tokens": [50664, 759, 291, 393, 360, 309, 365, 257, 18887, 11, 291, 393, 360, 309, 1553, 41482, 385, 420, 3365, 385, 337, 264, 2294, 295, 5127, 257, 4111, 337, 291, 11, 51014], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 747, "seek": 441228, "start": 4425.28, "end": 4428.28, "text": " which means the language is much more extensible by programs.", "tokens": [51014, 597, 1355, 264, 2856, 307, 709, 544, 1279, 30633, 538, 4268, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 748, "seek": 441228, "start": 4428.28, "end": 4431.28, "text": " So let's look a little bit about how they work.", "tokens": [51164, 407, 718, 311, 574, 257, 707, 857, 466, 577, 436, 589, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 749, "seek": 441228, "start": 4431.28, "end": 4436.28, "text": " If we remember, we're getting data structures passed in the compiler.", "tokens": [51314, 759, 321, 1604, 11, 321, 434, 1242, 1412, 9227, 4678, 294, 264, 31958, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 750, "seek": 441228, "start": 4436.28, "end": 4441.28, "text": " So it looked at the first thing, and somehow there's a way, and I can't show you that tonight,", "tokens": [51564, 407, 309, 2956, 412, 264, 700, 551, 11, 293, 6063, 456, 311, 257, 636, 11, 293, 286, 393, 380, 855, 291, 300, 4440, 11, 51814], "temperature": 0.0, "avg_logprob": -0.08770400705471845, "compression_ratio": 1.8020134228187918, "no_speech_prob": 0.007206689566373825}, {"id": 751, "seek": 444128, "start": 4441.28, "end": 4444.28, "text": " to say this name designates a macro.", "tokens": [50364, 281, 584, 341, 1315, 1715, 1024, 257, 18887, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 752, "seek": 444128, "start": 4444.28, "end": 4448.28, "text": " And associated with that name, then, is a function.", "tokens": [50514, 400, 6615, 365, 300, 1315, 11, 550, 11, 307, 257, 2445, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 753, "seek": 444128, "start": 4448.28, "end": 4453.28, "text": " The function expects to be passed the rest of the stuff that's in the parentheses.", "tokens": [50714, 440, 2445, 33280, 281, 312, 4678, 264, 1472, 295, 264, 1507, 300, 311, 294, 264, 34153, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 754, "seek": 444128, "start": 4453.28, "end": 4457.28, "text": " So we had this cool function, my cool macro.", "tokens": [50964, 407, 321, 632, 341, 1627, 2445, 11, 452, 1627, 18887, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 755, "seek": 444128, "start": 4457.28, "end": 4460.28, "text": " Maybe it expects to be passed two things.", "tokens": [51164, 2704, 309, 33280, 281, 312, 4678, 732, 721, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 756, "seek": 444128, "start": 4460.28, "end": 4462.28, "text": " The things that gets passed are not evaluated.", "tokens": [51314, 440, 721, 300, 2170, 4678, 366, 406, 25509, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 757, "seek": 444128, "start": 4462.28, "end": 4466.28, "text": " It gets passed the data structures that the compiler got passed.", "tokens": [51414, 467, 2170, 4678, 264, 1412, 9227, 300, 264, 31958, 658, 4678, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 758, "seek": 444128, "start": 4466.28, "end": 4470.28, "text": " Because the compiler is going to say, you told me you know how to do this.", "tokens": [51614, 1436, 264, 31958, 307, 516, 281, 584, 11, 291, 1907, 385, 291, 458, 577, 281, 360, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09747656117314878, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.004452432971447706}, {"id": 759, "seek": 447028, "start": 4470.28, "end": 4472.28, "text": " Here are the data structures.", "tokens": [50364, 1692, 366, 264, 1412, 9227, 13, 50464], "temperature": 0.0, "avg_logprob": -0.0670587799765847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0008415227057412267}, {"id": 760, "seek": 447028, "start": 4472.28, "end": 4476.28, "text": " Give me back the data structure I should be processing.", "tokens": [50464, 5303, 385, 646, 264, 1412, 3877, 286, 820, 312, 9007, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0670587799765847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0008415227057412267}, {"id": 761, "seek": 447028, "start": 4476.28, "end": 4483.28, "text": " So it's a transformation process where the macro is handed the data that's inside the parentheses,", "tokens": [50664, 407, 309, 311, 257, 9887, 1399, 689, 264, 18887, 307, 16013, 264, 1412, 300, 311, 1854, 264, 34153, 11, 51014], "temperature": 0.0, "avg_logprob": -0.0670587799765847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0008415227057412267}, {"id": 762, "seek": 447028, "start": 4483.28, "end": 4486.28, "text": " as arguments to the function that the macro is.", "tokens": [51014, 382, 12869, 281, 264, 2445, 300, 264, 18887, 307, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0670587799765847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0008415227057412267}, {"id": 763, "seek": 447028, "start": 4486.28, "end": 4495.28, "text": " It will run any arbitrary program you want to convert that data structure into a different data structure.", "tokens": [51164, 467, 486, 1190, 604, 23211, 1461, 291, 528, 281, 7620, 300, 1412, 3877, 666, 257, 819, 1412, 3877, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0670587799765847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0008415227057412267}, {"id": 764, "seek": 449528, "start": 4495.28, "end": 4498.28, "text": " You can write macros that look stuff up in databases.", "tokens": [50364, 509, 393, 2464, 7912, 2635, 300, 574, 1507, 493, 294, 22380, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 765, "seek": 449528, "start": 4498.28, "end": 4503.28, "text": " That go and ask a rule-based system for advice.", "tokens": [50514, 663, 352, 293, 1029, 257, 4978, 12, 6032, 1185, 337, 5192, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 766, "seek": 449528, "start": 4503.28, "end": 4505.28, "text": " Most are not that complicated.", "tokens": [50764, 4534, 366, 406, 300, 6179, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 767, "seek": 449528, "start": 4505.28, "end": 4508.28, "text": " But the thing is, it's an arbitrary program transformation.", "tokens": [50864, 583, 264, 551, 307, 11, 309, 311, 364, 23211, 1461, 9887, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 768, "seek": 449528, "start": 4508.28, "end": 4510.28, "text": " There's not a pattern language.", "tokens": [51014, 821, 311, 406, 257, 5102, 2856, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 769, "seek": 449528, "start": 4510.28, "end": 4512.28, "text": " There's not a set of rules about this can be turned into that.", "tokens": [51114, 821, 311, 406, 257, 992, 295, 4474, 466, 341, 393, 312, 3574, 666, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 770, "seek": 449528, "start": 4512.28, "end": 4515.28, "text": " It's an arbitrary program, a macro.", "tokens": [51214, 467, 311, 364, 23211, 1461, 11, 257, 18887, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 771, "seek": 449528, "start": 4515.28, "end": 4519.28, "text": " And in this way, it's like a common list macro.", "tokens": [51364, 400, 294, 341, 636, 11, 309, 311, 411, 257, 2689, 1329, 18887, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 772, "seek": 449528, "start": 4519.28, "end": 4524.28, "text": " That, given the data structure, gives back its own replacement.", "tokens": [51564, 663, 11, 2212, 264, 1412, 3877, 11, 2709, 646, 1080, 1065, 14419, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09330418530632467, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03204583749175072}, {"id": 773, "seek": 452428, "start": 4524.28, "end": 4528.28, "text": " Replace me, the expression that began with me, with this.", "tokens": [50364, 1300, 6742, 385, 11, 264, 6114, 300, 4283, 365, 385, 11, 365, 341, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 774, "seek": 452428, "start": 4528.28, "end": 4530.28, "text": " And then keep going.", "tokens": [50564, 400, 550, 1066, 516, 13, 50664], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 775, "seek": 452428, "start": 4530.28, "end": 4533.28, "text": " Which may yield another macro and another round of matter.", "tokens": [50664, 3013, 815, 11257, 1071, 18887, 293, 1071, 3098, 295, 1871, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 776, "seek": 452428, "start": 4533.28, "end": 4536.28, "text": " It may yield something that already knows how to process.", "tokens": [50814, 467, 815, 11257, 746, 300, 1217, 3255, 577, 281, 1399, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 777, "seek": 452428, "start": 4536.28, "end": 4537.28, "text": " Yes?", "tokens": [50964, 1079, 30, 51014], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 778, "seek": 452428, "start": 4537.28, "end": 4542.28, "text": " So would it be correct to say that a general macro is happening around that problem?", "tokens": [51014, 407, 576, 309, 312, 3006, 281, 584, 300, 257, 2674, 18887, 307, 2737, 926, 300, 1154, 30, 51264], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 779, "seek": 452428, "start": 4542.28, "end": 4545.28, "text": " No, this is happening at compile time.", "tokens": [51264, 883, 11, 341, 307, 2737, 412, 31413, 565, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 780, "seek": 452428, "start": 4545.28, "end": 4547.28, "text": " This is part of compilation, right?", "tokens": [51414, 639, 307, 644, 295, 40261, 11, 558, 30, 51514], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 781, "seek": 452428, "start": 4547.28, "end": 4549.28, "text": " The compiler got handed this data structure.", "tokens": [51514, 440, 31958, 658, 16013, 341, 1412, 3877, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 782, "seek": 452428, "start": 4549.28, "end": 4552.28, "text": " It said, oh, it begins with the macro name.", "tokens": [51614, 467, 848, 11, 1954, 11, 309, 7338, 365, 264, 18887, 1315, 13, 51764], "temperature": 0.0, "avg_logprob": -0.18592334394695378, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.006377583835273981}, {"id": 783, "seek": 455228, "start": 4552.28, "end": 4553.28, "text": " Hands it to the macro.", "tokens": [50364, 389, 2967, 309, 281, 264, 18887, 13, 50414], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 784, "seek": 455228, "start": 4553.28, "end": 4554.28, "text": " It comes back.", "tokens": [50414, 467, 1487, 646, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 785, "seek": 455228, "start": 4554.28, "end": 4555.28, "text": " That transformation occurs.", "tokens": [50464, 663, 9887, 11843, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 786, "seek": 455228, "start": 4555.28, "end": 4557.28, "text": " It keeps compiling.", "tokens": [50514, 467, 5965, 715, 4883, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 787, "seek": 455228, "start": 4557.28, "end": 4558.28, "text": " Then you get bytecode.", "tokens": [50614, 1396, 291, 483, 40846, 22332, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 788, "seek": 455228, "start": 4558.28, "end": 4561.28, "text": " After you get bytecode, there's no more talking to the macro.", "tokens": [50664, 2381, 291, 483, 40846, 22332, 11, 456, 311, 572, 544, 1417, 281, 264, 18887, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 789, "seek": 455228, "start": 4561.28, "end": 4564.28, "text": " So macros replace themselves with another data structure.", "tokens": [50814, 407, 7912, 2635, 7406, 2969, 365, 1071, 1412, 3877, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 790, "seek": 455228, "start": 4564.28, "end": 4567.28, "text": " And then compilation continues.", "tokens": [50964, 400, 550, 40261, 6515, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 791, "seek": 455228, "start": 4567.28, "end": 4569.28, "text": " So we can look at a macro.", "tokens": [51114, 407, 321, 393, 574, 412, 257, 18887, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 792, "seek": 455228, "start": 4569.28, "end": 4572.28, "text": " You'll notice on the list of primitives, there's no or.", "tokens": [51214, 509, 603, 3449, 322, 264, 1329, 295, 2886, 38970, 11, 456, 311, 572, 420, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 793, "seek": 455228, "start": 4572.28, "end": 4574.28, "text": " Or is not primitive enclosure.", "tokens": [51364, 1610, 307, 406, 28540, 34093, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 794, "seek": 455228, "start": 4574.28, "end": 4578.28, "text": " And in fact, if you think about or, or is not primitive.", "tokens": [51464, 400, 294, 1186, 11, 498, 291, 519, 466, 420, 11, 420, 307, 406, 28540, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 795, "seek": 455228, "start": 4578.28, "end": 4580.28, "text": " Or is not a primitive logical operation.", "tokens": [51664, 1610, 307, 406, 257, 28540, 14978, 6916, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09168394874123965, "compression_ratio": 1.8153846153846154, "no_speech_prob": 0.001205457840114832}, {"id": 796, "seek": 458028, "start": 4580.28, "end": 4585.28, "text": " You can build or on top of if.", "tokens": [50364, 509, 393, 1322, 420, 322, 1192, 295, 498, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 797, "seek": 458028, "start": 4585.28, "end": 4586.28, "text": " Right?", "tokens": [50614, 1779, 30, 50664], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 798, "seek": 458028, "start": 4586.28, "end": 4592.28, "text": " The or, what I'm talking about is like the double bar or in, in Java in that what happens", "tokens": [50664, 440, 420, 11, 437, 286, 478, 1417, 466, 307, 411, 264, 3834, 2159, 420, 294, 11, 294, 10745, 294, 300, 437, 2314, 50964], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 799, "seek": 458028, "start": 4592.28, "end": 4596.28, "text": " if the first part tests true, what happens to the second part?", "tokens": [50964, 498, 264, 700, 644, 6921, 2074, 11, 437, 2314, 281, 264, 1150, 644, 30, 51164], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 800, "seek": 458028, "start": 4596.28, "end": 4597.28, "text": " Not evaluated, right?", "tokens": [51164, 1726, 25509, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 801, "seek": 458028, "start": 4597.28, "end": 4600.28, "text": " It's still got that magic thing, but if already knows how to do that.", "tokens": [51214, 467, 311, 920, 658, 300, 5585, 551, 11, 457, 498, 1217, 3255, 577, 281, 360, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 802, "seek": 458028, "start": 4600.28, "end": 4606.28, "text": " If already knows how to do a conditional evaluation of only one of two choices,", "tokens": [51364, 759, 1217, 3255, 577, 281, 360, 257, 27708, 13344, 295, 787, 472, 295, 732, 7994, 11, 51664], "temperature": 0.0, "avg_logprob": -0.15034369666977684, "compression_ratio": 1.6306306306306306, "no_speech_prob": 0.004463875666260719}, {"id": 803, "seek": 460628, "start": 4606.28, "end": 4612.28, "text": " which means we can define or in terms of if.", "tokens": [50364, 597, 1355, 321, 393, 6964, 420, 294, 2115, 295, 498, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 804, "seek": 460628, "start": 4612.28, "end": 4614.28, "text": " And so this is what happens.", "tokens": [50664, 400, 370, 341, 307, 437, 2314, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 805, "seek": 460628, "start": 4614.28, "end": 4616.28, "text": " So or is a macro.", "tokens": [50764, 407, 420, 307, 257, 18887, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 806, "seek": 460628, "start": 4616.28, "end": 4620.28, "text": " When it's expanded by the compiler, it, it returns something like this.", "tokens": [50864, 1133, 309, 311, 14342, 538, 264, 31958, 11, 309, 11, 309, 11247, 746, 411, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 807, "seek": 460628, "start": 4620.28, "end": 4622.28, "text": " I'm going to say or X or Y.", "tokens": [51064, 286, 478, 516, 281, 584, 420, 1783, 420, 398, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 808, "seek": 460628, "start": 4622.28, "end": 4624.28, "text": " And this is what comes back.", "tokens": [51164, 400, 341, 307, 437, 1487, 646, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 809, "seek": 460628, "start": 4624.28, "end": 4627.28, "text": " Another data structure begins with the let, which we haven't seen so far,", "tokens": [51264, 3996, 1412, 3877, 7338, 365, 264, 718, 11, 597, 321, 2378, 380, 1612, 370, 1400, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1523333988832624, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0037602849770337343}, {"id": 810, "seek": 462728, "start": 4627.28, "end": 4632.28, "text": " that says it takes a set of pairs of things to make this mean,", "tokens": [50364, 300, 1619, 309, 2516, 257, 992, 295, 15494, 295, 721, 281, 652, 341, 914, 11, 50614], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 811, "seek": 462728, "start": 4632.28, "end": 4636.28, "text": " mean this inside the scope of the let.", "tokens": [50614, 914, 341, 1854, 264, 11923, 295, 264, 718, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 812, "seek": 462728, "start": 4636.28, "end": 4639.28, "text": " Like a local variable, except it's not variable.", "tokens": [50814, 1743, 257, 2654, 7006, 11, 3993, 309, 311, 406, 7006, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 813, "seek": 462728, "start": 4639.28, "end": 4640.28, "text": " You can't vary it.", "tokens": [50964, 509, 393, 380, 10559, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 814, "seek": 462728, "start": 4640.28, "end": 4642.28, "text": " But it has the same kind of scope.", "tokens": [51014, 583, 309, 575, 264, 912, 733, 295, 11923, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 815, "seek": 462728, "start": 4642.28, "end": 4644.28, "text": " So it says let's, let's do that.", "tokens": [51114, 407, 309, 1619, 718, 311, 11, 718, 311, 360, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 816, "seek": 462728, "start": 4644.28, "end": 4648.28, "text": " And the reason why it does it is because this is going to be some expression.", "tokens": [51214, 400, 264, 1778, 983, 309, 775, 309, 307, 570, 341, 307, 516, 281, 312, 512, 6114, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 817, "seek": 462728, "start": 4648.28, "end": 4654.28, "text": " It looks like X here, but it could be like a call to calculate some incredibly difficult", "tokens": [51414, 467, 1542, 411, 1783, 510, 11, 457, 309, 727, 312, 411, 257, 818, 281, 8873, 512, 6252, 2252, 51714], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 818, "seek": 462728, "start": 4654.28, "end": 4656.28, "text": " thing that's going to take an hour.", "tokens": [51714, 551, 300, 311, 516, 281, 747, 364, 1773, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18170074462890626, "compression_ratio": 1.673003802281369, "no_speech_prob": 0.48698732256889343}, {"id": 819, "seek": 465628, "start": 4656.28, "end": 4659.28, "text": " In which case, I finally want to repeat that more than once in my expansion,", "tokens": [50364, 682, 597, 1389, 11, 286, 2721, 528, 281, 7149, 300, 544, 813, 1564, 294, 452, 11260, 11, 50514], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 820, "seek": 465628, "start": 4659.28, "end": 4661.28, "text": " because it would calculate that thing twice.", "tokens": [50514, 570, 309, 576, 8873, 300, 551, 6091, 13, 50614], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 821, "seek": 465628, "start": 4661.28, "end": 4665.28, "text": " So we're going to take whatever that expression is, put in here,", "tokens": [50614, 407, 321, 434, 516, 281, 747, 2035, 300, 6114, 307, 11, 829, 294, 510, 11, 50814], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 822, "seek": 465628, "start": 4665.28, "end": 4669.28, "text": " assigns that into this variable name, which is made up because,", "tokens": [50814, 6269, 82, 300, 666, 341, 7006, 1315, 11, 597, 307, 1027, 493, 570, 11, 51014], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 823, "seek": 465628, "start": 4669.28, "end": 4671.28, "text": " because obviously you didn't pick this name.", "tokens": [51014, 570, 2745, 291, 994, 380, 1888, 341, 1315, 13, 51114], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 824, "seek": 465628, "start": 4671.28, "end": 4674.28, "text": " It's a good machine pick name.", "tokens": [51114, 467, 311, 257, 665, 3479, 1888, 1315, 13, 51264], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 825, "seek": 465628, "start": 4674.28, "end": 4676.28, "text": " So it makes a variable.", "tokens": [51264, 407, 309, 1669, 257, 7006, 13, 51364], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 826, "seek": 465628, "start": 4676.28, "end": 4678.28, "text": " And then it says if that thing is true, right,", "tokens": [51364, 400, 550, 309, 1619, 498, 300, 551, 307, 2074, 11, 558, 11, 51464], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 827, "seek": 465628, "start": 4678.28, "end": 4680.28, "text": " and you took an average calculator in this, right,", "tokens": [51464, 293, 291, 1890, 364, 4274, 24993, 294, 341, 11, 558, 11, 51564], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 828, "seek": 465628, "start": 4680.28, "end": 4681.28, "text": " we have that idea.", "tokens": [51564, 321, 362, 300, 1558, 13, 51614], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 829, "seek": 465628, "start": 4681.28, "end": 4684.28, "text": " If that's true, return it.", "tokens": [51614, 759, 300, 311, 2074, 11, 2736, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.26167667695205576, "compression_ratio": 1.7580071174377223, "no_speech_prob": 0.006279367953538895}, {"id": 830, "seek": 468428, "start": 4684.28, "end": 4687.28, "text": " If, right, I know, isn't it going to do this?", "tokens": [50364, 759, 11, 558, 11, 286, 458, 11, 1943, 380, 309, 516, 281, 360, 341, 30, 50514], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 831, "seek": 468428, "start": 4687.28, "end": 4689.28, "text": " If this is true.", "tokens": [50514, 759, 341, 307, 2074, 13, 50614], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 832, "seek": 468428, "start": 4689.28, "end": 4692.28, "text": " Otherwise, it's going to do what?", "tokens": [50614, 10328, 11, 309, 311, 516, 281, 360, 437, 30, 50764], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 833, "seek": 468428, "start": 4692.28, "end": 4695.28, "text": " And that's the implementation of OR.", "tokens": [50764, 400, 300, 311, 264, 11420, 295, 19654, 13, 50914], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 834, "seek": 468428, "start": 4695.28, "end": 4698.28, "text": " If the first thing is true, it returns it.", "tokens": [50914, 759, 264, 700, 551, 307, 2074, 11, 309, 11247, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 835, "seek": 468428, "start": 4698.28, "end": 4700.28, "text": " Well, in fact, in Java, you don't get a good value,", "tokens": [51064, 1042, 11, 294, 1186, 11, 294, 10745, 11, 291, 500, 380, 483, 257, 665, 2158, 11, 51164], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 836, "seek": 468428, "start": 4700.28, "end": 4703.28, "text": " but in Clojure, you get the value that was true.", "tokens": [51164, 457, 294, 31901, 73, 540, 11, 291, 483, 264, 2158, 300, 390, 2074, 13, 51314], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 837, "seek": 468428, "start": 4703.28, "end": 4709.28, "text": " Then the invocation of any function can both return a value in a true form", "tokens": [51314, 1396, 264, 1048, 27943, 295, 604, 2445, 393, 1293, 2736, 257, 2158, 294, 257, 2074, 1254, 51614], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 838, "seek": 468428, "start": 4709.28, "end": 4711.28, "text": " or you interpret certain types of values.", "tokens": [51614, 420, 291, 7302, 1629, 3467, 295, 4190, 13, 51714], "temperature": 0.0, "avg_logprob": -0.173770685664943, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0015961250755935907}, {"id": 839, "seek": 471128, "start": 4711.28, "end": 4715.28, "text": " All values can be placed in a conditional, not just Booleans,", "tokens": [50364, 1057, 4190, 393, 312, 7074, 294, 257, 27708, 11, 406, 445, 23351, 24008, 11, 50564], "temperature": 0.0, "avg_logprob": -0.13868948878074178, "compression_ratio": 1.6255924170616114, "no_speech_prob": 0.005202244035899639}, {"id": 840, "seek": 471128, "start": 4715.28, "end": 4717.28, "text": " and it's subject to the rules I said before.", "tokens": [50564, 293, 309, 311, 3983, 281, 264, 4474, 286, 848, 949, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13868948878074178, "compression_ratio": 1.6255924170616114, "no_speech_prob": 0.005202244035899639}, {"id": 841, "seek": 471128, "start": 4717.28, "end": 4724.28, "text": " If it is nil or if it is false, you'll get the else expression evaluated.", "tokens": [50664, 759, 309, 307, 297, 388, 420, 498, 309, 307, 7908, 11, 291, 603, 483, 264, 1646, 6114, 25509, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13868948878074178, "compression_ratio": 1.6255924170616114, "no_speech_prob": 0.005202244035899639}, {"id": 842, "seek": 471128, "start": 4724.28, "end": 4732.28, "text": " If it is anything else, seven, the string fred, anything else is true.", "tokens": [51014, 759, 309, 307, 1340, 1646, 11, 3407, 11, 264, 6798, 283, 986, 11, 1340, 1646, 307, 2074, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13868948878074178, "compression_ratio": 1.6255924170616114, "no_speech_prob": 0.005202244035899639}, {"id": 843, "seek": 471128, "start": 4732.28, "end": 4737.28, "text": " So Clojure, like most LISPs, allows any expression to be evaluated", "tokens": [51414, 407, 31901, 73, 540, 11, 411, 881, 441, 2343, 23043, 11, 4045, 604, 6114, 281, 312, 25509, 51664], "temperature": 0.0, "avg_logprob": -0.13868948878074178, "compression_ratio": 1.6255924170616114, "no_speech_prob": 0.005202244035899639}, {"id": 844, "seek": 471128, "start": 4737.28, "end": 4739.28, "text": " as the conditional test.", "tokens": [51664, 382, 264, 27708, 1500, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13868948878074178, "compression_ratio": 1.6255924170616114, "no_speech_prob": 0.005202244035899639}, {"id": 845, "seek": 473928, "start": 4739.28, "end": 4742.28, "text": " Here.", "tokens": [50364, 1692, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 846, "seek": 473928, "start": 4742.28, "end": 4749.28, "text": " He's also getting the part that there are no spiting effects of the evacuating effects.", "tokens": [50514, 634, 311, 611, 1242, 264, 644, 300, 456, 366, 572, 637, 1748, 5065, 295, 264, 20245, 32438, 5065, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 847, "seek": 473928, "start": 4749.28, "end": 4752.28, "text": " No, I talked about that.", "tokens": [50864, 883, 11, 286, 2825, 466, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 848, "seek": 473928, "start": 4752.28, "end": 4754.28, "text": " Let's say this x for now.", "tokens": [51014, 961, 311, 584, 341, 2031, 337, 586, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 849, "seek": 473928, "start": 4754.28, "end": 4759.28, "text": " A well-written macro will make sure it only gets evaluated once.", "tokens": [51114, 316, 731, 12, 26859, 18887, 486, 652, 988, 309, 787, 2170, 25509, 1564, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 850, "seek": 473928, "start": 4759.28, "end": 4764.28, "text": " I could have put if x, x, y, yes?", "tokens": [51364, 286, 727, 362, 829, 498, 2031, 11, 2031, 11, 288, 11, 2086, 30, 51614], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 851, "seek": 473928, "start": 4764.28, "end": 4766.28, "text": " No, this is the answer to your question.", "tokens": [51614, 883, 11, 341, 307, 264, 1867, 281, 428, 1168, 13, 51714], "temperature": 0.0, "avg_logprob": -0.3530754132217236, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.053255241364240646}, {"id": 852, "seek": 476628, "start": 4766.28, "end": 4773.28, "text": " If it said if x, x, otherwise y, then if x had side effects, it would happen twice.", "tokens": [50364, 759, 309, 848, 498, 2031, 11, 2031, 11, 5911, 288, 11, 550, 498, 2031, 632, 1252, 5065, 11, 309, 576, 1051, 6091, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 853, "seek": 476628, "start": 4773.28, "end": 4776.28, "text": " Then we make this not a well-written macro.", "tokens": [50714, 1396, 321, 652, 341, 406, 257, 731, 12, 26859, 18887, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 854, "seek": 476628, "start": 4776.28, "end": 4780.28, "text": " This is a well-written macro where it needs to use that expression twice,", "tokens": [50864, 639, 307, 257, 731, 12, 26859, 18887, 689, 309, 2203, 281, 764, 300, 6114, 6091, 11, 51064], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 855, "seek": 476628, "start": 4780.28, "end": 4785.28, "text": " which means it's going to bind a temporary variable to the value,", "tokens": [51064, 597, 1355, 309, 311, 516, 281, 14786, 257, 13413, 7006, 281, 264, 2158, 11, 51314], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 856, "seek": 476628, "start": 4785.28, "end": 4788.28, "text": " which means x only happens if it appears only once here.", "tokens": [51314, 597, 1355, 2031, 787, 2314, 498, 309, 7038, 787, 1564, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 857, "seek": 476628, "start": 4788.28, "end": 4791.28, "text": " So if it had a side effect, it would happen only once.", "tokens": [51464, 407, 498, 309, 632, 257, 1252, 1802, 11, 309, 576, 1051, 787, 1564, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 858, "seek": 476628, "start": 4791.28, "end": 4794.28, "text": " If it took a long time, it would take a long time only once.", "tokens": [51614, 759, 309, 1890, 257, 938, 565, 11, 309, 576, 747, 257, 938, 565, 787, 1564, 13, 51764], "temperature": 0.0, "avg_logprob": -0.14281499581258805, "compression_ratio": 1.896551724137931, "no_speech_prob": 0.04441423714160919}, {"id": 859, "seek": 479428, "start": 4794.28, "end": 4797.28, "text": " Simple as it is, I still have this simple question.", "tokens": [50364, 21532, 382, 309, 307, 11, 286, 920, 362, 341, 2199, 1168, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1815625767648956, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.03826122730970383}, {"id": 860, "seek": 479428, "start": 4797.28, "end": 4805.28, "text": " Let appears to take three arguments.", "tokens": [50514, 961, 7038, 281, 747, 1045, 12869, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1815625767648956, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.03826122730970383}, {"id": 861, "seek": 479428, "start": 4805.28, "end": 4811.28, "text": " Let actually takes, at the top most level, it takes n arguments.", "tokens": [50914, 961, 767, 2516, 11, 412, 264, 1192, 881, 1496, 11, 309, 2516, 297, 12869, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1815625767648956, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.03826122730970383}, {"id": 862, "seek": 479428, "start": 4811.28, "end": 4817.28, "text": " The first of which has to be a vector of pairs of things.", "tokens": [51214, 440, 700, 295, 597, 575, 281, 312, 257, 8062, 295, 15494, 295, 721, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1815625767648956, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.03826122730970383}, {"id": 863, "seek": 479428, "start": 4817.28, "end": 4819.28, "text": " You can have multiple expressions.", "tokens": [51514, 509, 393, 362, 3866, 15277, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1815625767648956, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.03826122730970383}, {"id": 864, "seek": 479428, "start": 4819.28, "end": 4823.28, "text": " Name, value, name, value, value in a letter.", "tokens": [51614, 13866, 11, 2158, 11, 1315, 11, 2158, 11, 2158, 294, 257, 5063, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1815625767648956, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.03826122730970383}, {"id": 865, "seek": 482328, "start": 4823.28, "end": 4828.28, "text": " This is one symbol there.", "tokens": [50364, 639, 307, 472, 5986, 456, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 866, "seek": 482328, "start": 4828.28, "end": 4833.28, "text": " Let is a block, so it actually can have multiple expressions.", "tokens": [50614, 961, 307, 257, 3461, 11, 370, 309, 767, 393, 362, 3866, 15277, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 867, "seek": 482328, "start": 4833.28, "end": 4836.28, "text": " In this case, there's only one.", "tokens": [50864, 682, 341, 1389, 11, 456, 311, 787, 472, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 868, "seek": 482328, "start": 4836.28, "end": 4839.28, "text": " And then it just does whatever it's next.", "tokens": [51014, 400, 550, 309, 445, 775, 2035, 309, 311, 958, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 869, "seek": 482328, "start": 4839.28, "end": 4841.28, "text": " It returns the value.", "tokens": [51164, 467, 11247, 264, 2158, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 870, "seek": 482328, "start": 4841.28, "end": 4845.28, "text": " Well, this is a macro, and all it's going to do is get the compiler back this,", "tokens": [51264, 1042, 11, 341, 307, 257, 18887, 11, 293, 439, 309, 311, 516, 281, 360, 307, 483, 264, 31958, 646, 341, 11, 51464], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 871, "seek": 482328, "start": 4845.28, "end": 4848.28, "text": " and the compiler has to keep going with this in hand now.", "tokens": [51464, 293, 264, 31958, 575, 281, 1066, 516, 365, 341, 294, 1011, 586, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 872, "seek": 482328, "start": 4848.28, "end": 4851.28, "text": " Yes, I'm just trying to figure out what led you.", "tokens": [51614, 1079, 11, 286, 478, 445, 1382, 281, 2573, 484, 437, 4684, 291, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2547330856323242, "compression_ratio": 1.611353711790393, "no_speech_prob": 0.05561737343668938}, {"id": 873, "seek": 485128, "start": 4851.28, "end": 4856.28, "text": " Let will, led establishes this name to not this value.", "tokens": [50364, 961, 486, 11, 4684, 8327, 279, 341, 1315, 281, 406, 341, 2158, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 874, "seek": 485128, "start": 4856.28, "end": 4862.28, "text": " Then, when led runs, the series of expressions inside led run,", "tokens": [50614, 1396, 11, 562, 4684, 6676, 11, 264, 2638, 295, 15277, 1854, 4684, 1190, 11, 50914], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 875, "seek": 485128, "start": 4862.28, "end": 4866.28, "text": " and the last of them is the value of the led expression.", "tokens": [50914, 293, 264, 1036, 295, 552, 307, 264, 2158, 295, 264, 4684, 6114, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 876, "seek": 485128, "start": 4866.28, "end": 4871.28, "text": " In this case, there's only one expression inside the led.", "tokens": [51114, 682, 341, 1389, 11, 456, 311, 787, 472, 6114, 1854, 264, 4684, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 877, "seek": 485128, "start": 4871.28, "end": 4873.28, "text": " In this case, there's only one expression inside the led.", "tokens": [51364, 682, 341, 1389, 11, 456, 311, 787, 472, 6114, 1854, 264, 4684, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 878, "seek": 485128, "start": 4873.28, "end": 4877.28, "text": " So the value of the if expression is the value of the led.", "tokens": [51464, 407, 264, 2158, 295, 264, 498, 6114, 307, 264, 2158, 295, 264, 4684, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 879, "seek": 485128, "start": 4877.28, "end": 4880.28, "text": " Which is what we want, we want this to mean or.", "tokens": [51664, 3013, 307, 437, 321, 528, 11, 321, 528, 341, 281, 914, 420, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1584376588873907, "compression_ratio": 2.157608695652174, "no_speech_prob": 0.038363900035619736}, {"id": 880, "seek": 488028, "start": 4880.28, "end": 4882.28, "text": " And that's the scope.", "tokens": [50364, 400, 300, 311, 264, 11923, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 881, "seek": 488028, "start": 4882.28, "end": 4884.28, "text": " This is the end of the scope over here.", "tokens": [50464, 639, 307, 264, 917, 295, 264, 11923, 670, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 882, "seek": 488028, "start": 4884.28, "end": 4887.28, "text": " And this parent matches that value.", "tokens": [50564, 400, 341, 2596, 10676, 300, 2158, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 883, "seek": 488028, "start": 4887.28, "end": 4889.28, "text": " That's what I was noticing.", "tokens": [50714, 663, 311, 437, 286, 390, 21814, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 884, "seek": 488028, "start": 4889.28, "end": 4893.28, "text": " Yes, and well, it's one of the beautiful things about the system,", "tokens": [50814, 1079, 11, 293, 731, 11, 309, 311, 472, 295, 264, 2238, 721, 466, 264, 1185, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 885, "seek": 488028, "start": 4893.28, "end": 4898.28, "text": " which we'll see clarified in a moment, is that all expressions are bound.", "tokens": [51014, 597, 321, 603, 536, 47605, 294, 257, 1623, 11, 307, 300, 439, 15277, 366, 5472, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 886, "seek": 488028, "start": 4898.28, "end": 4903.28, "text": " So we don't have a lot of complexity with precedents and terminators and things like that.", "tokens": [51264, 407, 321, 500, 380, 362, 257, 688, 295, 14024, 365, 16969, 791, 293, 10761, 3391, 293, 721, 411, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 887, "seek": 488028, "start": 4903.28, "end": 4909.28, "text": " It started with the parent, it ends with the matching parent later.", "tokens": [51514, 467, 1409, 365, 264, 2596, 11, 309, 5314, 365, 264, 14324, 2596, 1780, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1524920714528937, "compression_ratio": 1.6758893280632412, "no_speech_prob": 0.010439181700348854}, {"id": 888, "seek": 490928, "start": 4910.28, "end": 4913.28, "text": " Big Boolean?", "tokens": [50414, 5429, 23351, 28499, 30, 50564], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 889, "seek": 490928, "start": 4913.28, "end": 4918.28, "text": " In fact, it has to be big Boolean false.", "tokens": [50564, 682, 1186, 11, 309, 575, 281, 312, 955, 23351, 28499, 7908, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 890, "seek": 490928, "start": 4918.28, "end": 4921.28, "text": " If it's coming from Java, I test to make sure,", "tokens": [50814, 759, 309, 311, 1348, 490, 10745, 11, 286, 1500, 281, 652, 988, 11, 50964], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 891, "seek": 490928, "start": 4921.28, "end": 4927.28, "text": " because an improperly constructed big Boolean may not be Boolean dot false.", "tokens": [50964, 570, 364, 40651, 356, 17083, 955, 23351, 28499, 815, 406, 312, 23351, 28499, 5893, 7908, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 892, "seek": 490928, "start": 4927.28, "end": 4929.28, "text": " New Boolean is wrong.", "tokens": [51264, 1873, 23351, 28499, 307, 2085, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 893, "seek": 490928, "start": 4929.28, "end": 4932.28, "text": " And in fact, not only is new Boolean wrong,", "tokens": [51364, 400, 294, 1186, 11, 406, 787, 307, 777, 23351, 28499, 2085, 11, 51514], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 894, "seek": 490928, "start": 4932.28, "end": 4936.28, "text": " but the reflection API in Java uses it exactly that way.", "tokens": [51514, 457, 264, 12914, 9362, 294, 10745, 4960, 309, 2293, 300, 636, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13783328087775262, "compression_ratio": 1.582010582010582, "no_speech_prob": 0.024620885029435158}, {"id": 895, "seek": 493628, "start": 4936.28, "end": 4940.28, "text": " So it returns multiple different values of big Boolean false.", "tokens": [50364, 407, 309, 11247, 3866, 819, 4190, 295, 955, 23351, 28499, 7908, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12142880339371531, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.002837766893208027}, {"id": 896, "seek": 493628, "start": 4940.28, "end": 4946.28, "text": " I have a patch that looks for that because I got bit by that already.", "tokens": [50564, 286, 362, 257, 9972, 300, 1542, 337, 300, 570, 286, 658, 857, 538, 300, 1217, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12142880339371531, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.002837766893208027}, {"id": 897, "seek": 493628, "start": 4946.28, "end": 4955.28, "text": " So it will make conversions of big Boolean false that aren't Boolean dot false into Boolean dot false.", "tokens": [50864, 407, 309, 486, 652, 42256, 295, 955, 23351, 28499, 7908, 300, 3212, 380, 23351, 28499, 5893, 7908, 666, 23351, 28499, 5893, 7908, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12142880339371531, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.002837766893208027}, {"id": 898, "seek": 493628, "start": 4958.28, "end": 4962.28, "text": " I'm sorry, I didn't write Java, I only wrote closure.", "tokens": [51464, 286, 478, 2597, 11, 286, 994, 380, 2464, 10745, 11, 286, 787, 4114, 24653, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12142880339371531, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.002837766893208027}, {"id": 899, "seek": 496228, "start": 4963.28, "end": 4968.28, "text": " But the point here is that this seems like a primitive thing,", "tokens": [50414, 583, 264, 935, 510, 307, 300, 341, 2544, 411, 257, 28540, 551, 11, 50664], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 900, "seek": 496228, "start": 4968.28, "end": 4971.28, "text": " like if the language doesn't have it, you're in trouble.", "tokens": [50664, 411, 498, 264, 2856, 1177, 380, 362, 309, 11, 291, 434, 294, 5253, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 901, "seek": 496228, "start": 4971.28, "end": 4972.28, "text": " It is not.", "tokens": [50814, 467, 307, 406, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 902, "seek": 496228, "start": 4972.28, "end": 4976.28, "text": " If I had somehow left out OR, you could have added it.", "tokens": [50864, 759, 286, 632, 6063, 1411, 484, 19654, 11, 291, 727, 362, 3869, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 903, "seek": 496228, "start": 4976.28, "end": 4981.28, "text": " You could have written the macro that does this job and added OR to closure.", "tokens": [51064, 509, 727, 362, 3720, 264, 18887, 300, 775, 341, 1691, 293, 3869, 19654, 281, 24653, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 904, "seek": 496228, "start": 4981.28, "end": 4983.28, "text": " I'm sure I forgot some things in closure.", "tokens": [51314, 286, 478, 988, 286, 5298, 512, 721, 294, 24653, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 905, "seek": 496228, "start": 4983.28, "end": 4985.28, "text": " You could add them.", "tokens": [51414, 509, 727, 909, 552, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08906989512236221, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.001186023699119687}, {"id": 906, "seek": 498528, "start": 4985.28, "end": 4986.28, "text": " Many things.", "tokens": [50364, 5126, 721, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1666546000374688, "compression_ratio": 1.6709677419354838, "no_speech_prob": 0.05009988322854042}, {"id": 907, "seek": 498528, "start": 4986.28, "end": 4989.28, "text": " In fact, we saw how tiny the special operators list is.", "tokens": [50414, 682, 1186, 11, 321, 1866, 577, 5870, 264, 2121, 19077, 1329, 307, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1666546000374688, "compression_ratio": 1.6709677419354838, "no_speech_prob": 0.05009988322854042}, {"id": 908, "seek": 498528, "start": 4989.28, "end": 4997.28, "text": " And OR, con, all kinds of things are built on top of these things as macros and OR functions.", "tokens": [50564, 400, 19654, 11, 416, 11, 439, 3685, 295, 721, 366, 3094, 322, 1192, 295, 613, 721, 382, 7912, 2635, 293, 19654, 6828, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1666546000374688, "compression_ratio": 1.6709677419354838, "no_speech_prob": 0.05009988322854042}, {"id": 909, "seek": 498528, "start": 4997.28, "end": 5003.28, "text": " And after the point of the special ops, you can add a special operator, but you can add a macro.", "tokens": [50964, 400, 934, 264, 935, 295, 264, 2121, 44663, 11, 291, 393, 909, 257, 2121, 12973, 11, 457, 291, 393, 909, 257, 18887, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1666546000374688, "compression_ratio": 1.6709677419354838, "no_speech_prob": 0.05009988322854042}, {"id": 910, "seek": 500328, "start": 5004.28, "end": 5007.28, "text": " Now I've got more than 50,000 for the question.", "tokens": [50414, 823, 286, 600, 658, 544, 813, 2625, 11, 1360, 337, 264, 1168, 13, 50564], "temperature": 0.0, "avg_logprob": -0.4726159437647406, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.29224586486816406}, {"id": 911, "seek": 500328, "start": 5007.28, "end": 5010.28, "text": " So I get this, this is great.", "tokens": [50564, 407, 286, 483, 341, 11, 341, 307, 869, 13, 50714], "temperature": 0.0, "avg_logprob": -0.4726159437647406, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.29224586486816406}, {"id": 912, "seek": 500328, "start": 5010.28, "end": 5016.28, "text": " So something to build a bunch of macros in these is that it's a powerful, another bunch of macros.", "tokens": [50714, 407, 746, 281, 1322, 257, 3840, 295, 7912, 2635, 294, 613, 307, 300, 309, 311, 257, 4005, 11, 1071, 3840, 295, 7912, 2635, 13, 51014], "temperature": 0.0, "avg_logprob": -0.4726159437647406, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.29224586486816406}, {"id": 913, "seek": 500328, "start": 5016.28, "end": 5020.28, "text": " Somebody else has got this smoking advantage of this language.", "tokens": [51014, 13463, 1646, 575, 658, 341, 14055, 5002, 295, 341, 2856, 13, 51214], "temperature": 0.0, "avg_logprob": -0.4726159437647406, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.29224586486816406}, {"id": 914, "seek": 500328, "start": 5020.28, "end": 5025.28, "text": " People sort of come down to the industry for developers and the industry for locals in.", "tokens": [51214, 3432, 1333, 295, 808, 760, 281, 264, 3518, 337, 8849, 293, 264, 3518, 337, 23335, 294, 13, 51464], "temperature": 0.0, "avg_logprob": -0.4726159437647406, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.29224586486816406}, {"id": 915, "seek": 500328, "start": 5025.28, "end": 5029.28, "text": " There's a one-time error and I get a stack trace of it going in.", "tokens": [51464, 821, 311, 257, 472, 12, 3766, 6713, 293, 286, 483, 257, 8630, 13508, 295, 309, 516, 294, 13, 51664], "temperature": 0.0, "avg_logprob": -0.4726159437647406, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.29224586486816406}, {"id": 916, "seek": 502928, "start": 5030.28, "end": 5035.28, "text": " You're going to get a reference to the expansion, the inside of the expansion.", "tokens": [50414, 509, 434, 516, 281, 483, 257, 6408, 281, 264, 11260, 11, 264, 1854, 295, 264, 11260, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2412569046020508, "compression_ratio": 1.2424242424242424, "no_speech_prob": 0.014012297615408897}, {"id": 917, "seek": 502928, "start": 5043.28, "end": 5045.28, "text": " That can be challenging.", "tokens": [51064, 663, 393, 312, 7595, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2412569046020508, "compression_ratio": 1.2424242424242424, "no_speech_prob": 0.014012297615408897}, {"id": 918, "seek": 502928, "start": 5054.28, "end": 5056.28, "text": " It's still an area.", "tokens": [51614, 467, 311, 920, 364, 1859, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2412569046020508, "compression_ratio": 1.2424242424242424, "no_speech_prob": 0.014012297615408897}, {"id": 919, "seek": 505928, "start": 5060.28, "end": 5069.28, "text": " I think that one of the things that's good about a list is because you have the ability to work in the small", "tokens": [50414, 286, 519, 300, 472, 295, 264, 721, 300, 311, 665, 466, 257, 1329, 307, 570, 291, 362, 264, 3485, 281, 589, 294, 264, 1359, 50864], "temperature": 0.0, "avg_logprob": -0.07544531511223834, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012810728512704372}, {"id": 920, "seek": 505928, "start": 5069.28, "end": 5072.28, "text": " and to say, I just wrote this little component of this thing.", "tokens": [50864, 293, 281, 584, 11, 286, 445, 4114, 341, 707, 6542, 295, 341, 551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07544531511223834, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012810728512704372}, {"id": 921, "seek": 505928, "start": 5072.28, "end": 5074.28, "text": " I'm going to run this right now.", "tokens": [51014, 286, 478, 516, 281, 1190, 341, 558, 586, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07544531511223834, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012810728512704372}, {"id": 922, "seek": 505928, "start": 5074.28, "end": 5078.28, "text": " I don't have to wait till the big program that contains this runs.", "tokens": [51114, 286, 500, 380, 362, 281, 1699, 4288, 264, 955, 1461, 300, 8306, 341, 6676, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07544531511223834, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012810728512704372}, {"id": 923, "seek": 505928, "start": 5078.28, "end": 5086.28, "text": " Your ability to do that immediate unit test to make sure that thing is working is good.", "tokens": [51314, 2260, 3485, 281, 360, 300, 11629, 4985, 1500, 281, 652, 988, 300, 551, 307, 1364, 307, 665, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07544531511223834, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012810728512704372}, {"id": 924, "seek": 508628, "start": 5087.28, "end": 5096.28, "text": " On the 50,000 foot level, propagating up from macros the source of the problem in the macro is something", "tokens": [50414, 1282, 264, 2625, 11, 1360, 2671, 1496, 11, 12425, 990, 493, 490, 7912, 2635, 264, 4009, 295, 264, 1154, 294, 264, 18887, 307, 746, 50864], "temperature": 0.0, "avg_logprob": -0.11130823587116442, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0038746092468500137}, {"id": 925, "seek": 508628, "start": 5096.28, "end": 5097.28, "text": " that's being worked on.", "tokens": [50864, 300, 311, 885, 2732, 322, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11130823587116442, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0038746092468500137}, {"id": 926, "seek": 508628, "start": 5097.28, "end": 5100.28, "text": " Some compilers do it pretty well for common list.", "tokens": [50914, 2188, 715, 388, 433, 360, 309, 1238, 731, 337, 2689, 1329, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11130823587116442, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0038746092468500137}, {"id": 927, "seek": 508628, "start": 5100.28, "end": 5104.28, "text": " It's an area I hope to enhance in closure.", "tokens": [51064, 467, 311, 364, 1859, 286, 1454, 281, 11985, 294, 24653, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11130823587116442, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0038746092468500137}, {"id": 928, "seek": 508628, "start": 5104.28, "end": 5109.28, "text": " But it will always be more challenging than a function.", "tokens": [51264, 583, 309, 486, 1009, 312, 544, 7595, 813, 257, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11130823587116442, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.0038746092468500137}, {"id": 929, "seek": 510928, "start": 5109.28, "end": 5117.28, "text": " And that's why macro writing is not for newcomers or the inexperienced part of the team.", "tokens": [50364, 400, 300, 311, 983, 18887, 3579, 307, 406, 337, 40014, 433, 420, 264, 29961, 610, 47592, 644, 295, 264, 1469, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 930, "seek": 510928, "start": 5119.28, "end": 5121.28, "text": " It is language design.", "tokens": [50864, 467, 307, 2856, 1715, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 931, "seek": 510928, "start": 5121.28, "end": 5123.28, "text": " It definitely is.", "tokens": [50964, 467, 2138, 307, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 932, "seek": 510928, "start": 5123.28, "end": 5129.28, "text": " On the other hand, without it, you're limited to the abstraction capabilities of functions, which are limited.", "tokens": [51064, 1282, 264, 661, 1011, 11, 1553, 309, 11, 291, 434, 5567, 281, 264, 37765, 10862, 295, 6828, 11, 597, 366, 5567, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 933, "seek": 510928, "start": 5129.28, "end": 5131.28, "text": " Think about how much you repeat in Java.", "tokens": [51364, 6557, 466, 577, 709, 291, 7149, 294, 10745, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 934, "seek": 510928, "start": 5131.28, "end": 5135.28, "text": " Think about how much code you repeat to close files in Java.", "tokens": [51464, 6557, 466, 577, 709, 3089, 291, 7149, 281, 1998, 7098, 294, 10745, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 935, "seek": 510928, "start": 5135.28, "end": 5136.28, "text": " Think about it.", "tokens": [51664, 6557, 466, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 936, "seek": 510928, "start": 5136.28, "end": 5138.28, "text": " Think about how many times you've written the exact same thing.", "tokens": [51714, 6557, 466, 577, 867, 1413, 291, 600, 3720, 264, 1900, 912, 551, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0730982045514868, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.027423083782196045}, {"id": 937, "seek": 513828, "start": 5138.28, "end": 5142.28, "text": " Having your IDE spit it out is a little bit handier.", "tokens": [50364, 10222, 428, 40930, 22127, 309, 484, 307, 257, 707, 857, 1011, 811, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 938, "seek": 513828, "start": 5142.28, "end": 5144.28, "text": " But when you decide, oh, I need to change my policy about doing this.", "tokens": [50564, 583, 562, 291, 4536, 11, 1954, 11, 286, 643, 281, 1319, 452, 3897, 466, 884, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 939, "seek": 513828, "start": 5144.28, "end": 5146.28, "text": " I want to check something else.", "tokens": [50664, 286, 528, 281, 1520, 746, 1646, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 940, "seek": 513828, "start": 5146.28, "end": 5150.28, "text": " All that generated code is not amenable to fixing.", "tokens": [50764, 1057, 300, 10833, 3089, 307, 406, 18497, 712, 281, 19442, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 941, "seek": 513828, "start": 5150.28, "end": 5154.28, "text": " So those kinds of things that can't be...", "tokens": [50964, 407, 729, 3685, 295, 721, 300, 393, 380, 312, 485, 51164], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 942, "seek": 513828, "start": 5154.28, "end": 5159.28, "text": " whose redundancy can't be eliminated by functions can be eliminated by macros.", "tokens": [51164, 6104, 27830, 6717, 393, 380, 312, 20308, 538, 6828, 393, 312, 20308, 538, 7912, 2635, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 943, "seek": 513828, "start": 5159.28, "end": 5161.28, "text": " And that's something you want to do.", "tokens": [51414, 400, 300, 311, 746, 291, 528, 281, 360, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 944, "seek": 513828, "start": 5161.28, "end": 5167.28, "text": " Because the B side of this is, if you're doing all that stuff by hand, yes, it's transparent.", "tokens": [51514, 1436, 264, 363, 1252, 295, 341, 307, 11, 498, 291, 434, 884, 439, 300, 1507, 538, 1011, 11, 2086, 11, 309, 311, 12737, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1080334701538086, "compression_ratio": 1.673992673992674, "no_speech_prob": 0.005893148947507143}, {"id": 945, "seek": 516728, "start": 5167.28, "end": 5168.28, "text": " You get this debugger error.", "tokens": [50364, 509, 483, 341, 24083, 1321, 6713, 13, 50414], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 946, "seek": 516728, "start": 5168.28, "end": 5170.28, "text": " Okay, you did that by hand.", "tokens": [50414, 1033, 11, 291, 630, 300, 538, 1011, 13, 50514], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 947, "seek": 516728, "start": 5170.28, "end": 5172.28, "text": " Where?", "tokens": [50514, 2305, 30, 50614], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 948, "seek": 516728, "start": 5172.28, "end": 5174.28, "text": " All over your program.", "tokens": [50614, 1057, 670, 428, 1461, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 949, "seek": 516728, "start": 5174.28, "end": 5176.28, "text": " Because you didn't have a macro that generated it.", "tokens": [50714, 1436, 291, 994, 380, 362, 257, 18887, 300, 10833, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 950, "seek": 516728, "start": 5176.28, "end": 5178.28, "text": " You don't have one place to fix.", "tokens": [50814, 509, 500, 380, 362, 472, 1081, 281, 3191, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 951, "seek": 516728, "start": 5178.28, "end": 5180.28, "text": " You have n places to fix.", "tokens": [50914, 509, 362, 297, 3190, 281, 3191, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 952, "seek": 516728, "start": 5180.28, "end": 5182.28, "text": " So there's a...", "tokens": [51014, 407, 456, 311, 257, 485, 51114], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 953, "seek": 516728, "start": 5182.28, "end": 5186.28, "text": " If you have n places to fix, where you say, oh, I made this mistake everywhere.", "tokens": [51114, 759, 291, 362, 297, 3190, 281, 3191, 11, 689, 291, 584, 11, 1954, 11, 286, 1027, 341, 6146, 5315, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 954, "seek": 516728, "start": 5186.28, "end": 5190.28, "text": " But you still have to find everywhere you have to fix it.", "tokens": [51314, 583, 291, 920, 362, 281, 915, 5315, 291, 362, 281, 3191, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 955, "seek": 516728, "start": 5190.28, "end": 5192.28, "text": " And these things are idioms.", "tokens": [51514, 400, 613, 721, 366, 18014, 4785, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 956, "seek": 516728, "start": 5192.28, "end": 5194.28, "text": " Everybody that programs in Java has to know this.", "tokens": [51614, 7646, 300, 4268, 294, 10745, 575, 281, 458, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15913124084472657, "compression_ratio": 1.7581967213114753, "no_speech_prob": 0.0027093980461359024}, {"id": 957, "seek": 519428, "start": 5194.28, "end": 5197.28, "text": " These idioms are only by convention", "tokens": [50364, 1981, 18014, 4785, 366, 787, 538, 10286, 50514], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 958, "seek": 519428, "start": 5197.28, "end": 5199.28, "text": " and they have to be manually replicated.", "tokens": [50514, 293, 436, 362, 281, 312, 16945, 46365, 13, 50614], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 959, "seek": 519428, "start": 5207.28, "end": 5210.28, "text": " It is an attempt to address those cross-cutting concerns.", "tokens": [51014, 467, 307, 364, 5217, 281, 2985, 729, 3278, 12, 6672, 783, 7389, 13, 51164], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 960, "seek": 519428, "start": 5210.28, "end": 5215.28, "text": " But it's still unproven as to whether or not people will describe them...", "tokens": [51164, 583, 309, 311, 920, 517, 4318, 553, 382, 281, 1968, 420, 406, 561, 486, 6786, 552, 485, 51414], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 961, "seek": 519428, "start": 5215.28, "end": 5217.28, "text": " those things in advance.", "tokens": [51414, 729, 721, 294, 7295, 13, 51514], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 962, "seek": 519428, "start": 5217.28, "end": 5220.28, "text": " Because what tends to happen is that you don't know it.", "tokens": [51514, 1436, 437, 12258, 281, 1051, 307, 300, 291, 500, 380, 458, 309, 13, 51664], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 963, "seek": 519428, "start": 5220.28, "end": 5222.28, "text": " And then you say, oh, I'm doing this all over the place.", "tokens": [51664, 400, 550, 291, 584, 11, 1954, 11, 286, 478, 884, 341, 439, 670, 264, 1081, 13, 51764], "temperature": 0.8, "avg_logprob": -0.18014173005756579, "compression_ratio": 1.5377777777777777, "no_speech_prob": 0.013573376461863518}, {"id": 964, "seek": 522228, "start": 5222.28, "end": 5225.4, "text": " And then will you implement an aspect?", "tokens": [50364, 400, 550, 486, 291, 4445, 364, 4171, 30, 50520], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 965, "seek": 522228, "start": 5225.4, "end": 5226.48, "text": " Is there a policy?", "tokens": [50520, 1119, 456, 257, 3897, 30, 50574], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 966, "seek": 522228, "start": 5226.48, "end": 5229.0, "text": " Is there a way to describe an aspect that will insert it", "tokens": [50574, 1119, 456, 257, 636, 281, 6786, 364, 4171, 300, 486, 8969, 309, 50700], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 967, "seek": 522228, "start": 5229.0, "end": 5230.4, "text": " everywhere it's needed?", "tokens": [50700, 5315, 309, 311, 2978, 30, 50770], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 968, "seek": 522228, "start": 5230.4, "end": 5232.599999999999, "text": " That's a very challenging problem.", "tokens": [50770, 663, 311, 257, 588, 7595, 1154, 13, 50880], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 969, "seek": 522228, "start": 5232.599999999999, "end": 5237.8, "text": " But the problem of this summary is little easier with", "tokens": [50880, 583, 264, 1154, 295, 341, 12691, 307, 707, 3571, 365, 51140], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 970, "seek": 522228, "start": 5237.8, "end": 5239.639999999999, "text": " aspect-oriented programming.", "tokens": [51140, 4171, 12, 27414, 9410, 13, 51232], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 971, "seek": 522228, "start": 5239.639999999999, "end": 5242.759999999999, "text": " I mean, I think aspect-oriented programming is", "tokens": [51232, 286, 914, 11, 286, 519, 4171, 12, 27414, 9410, 307, 51388], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 972, "seek": 522228, "start": 5242.759999999999, "end": 5246.2, "text": " interesting, but it's different.", "tokens": [51388, 1880, 11, 457, 309, 311, 819, 13, 51560], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 973, "seek": 522228, "start": 5246.2, "end": 5249.24, "text": " So anyway, the trade-off with macros, yes, it may be less", "tokens": [51560, 407, 4033, 11, 264, 4923, 12, 4506, 365, 7912, 2635, 11, 2086, 11, 309, 815, 312, 1570, 51712], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 974, "seek": 522228, "start": 5249.24, "end": 5250.04, "text": " transparent there.", "tokens": [51712, 12737, 456, 13, 51752], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 975, "seek": 522228, "start": 5250.04, "end": 5252.24, "text": " On the other side, when you fix a macro, you fix", "tokens": [51752, 1282, 264, 661, 1252, 11, 562, 291, 3191, 257, 18887, 11, 291, 3191, 51862], "temperature": 0.0, "avg_logprob": -0.22921611368656158, "compression_ratio": 1.7238805970149254, "no_speech_prob": 0.14914248883724213}, {"id": 976, "seek": 525224, "start": 5252.24, "end": 5256.0, "text": " every usage of the macro.", "tokens": [50364, 633, 14924, 295, 264, 18887, 13, 50552], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 977, "seek": 525224, "start": 5256.0, "end": 5257.16, "text": " Finally, we get to the easier thing.", "tokens": [50552, 6288, 11, 321, 483, 281, 264, 3571, 551, 13, 50610], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 978, "seek": 525224, "start": 5257.16, "end": 5259.0, "text": " I mean, start with special operators and macros, mostly", "tokens": [50610, 286, 914, 11, 722, 365, 2121, 19077, 293, 7912, 2635, 11, 5240, 50702], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 979, "seek": 525224, "start": 5259.0, "end": 5260.92, "text": " because that's the evaluation order.", "tokens": [50702, 570, 300, 311, 264, 13344, 1668, 13, 50798], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 980, "seek": 525224, "start": 5260.92, "end": 5264.5199999999995, "text": " But functions exist, and they're kind of straightforward.", "tokens": [50798, 583, 6828, 2514, 11, 293, 436, 434, 733, 295, 15325, 13, 50978], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 981, "seek": 525224, "start": 5264.5199999999995, "end": 5266.32, "text": " The first thing about functions you need to know is that", "tokens": [50978, 440, 700, 551, 466, 6828, 291, 643, 281, 458, 307, 300, 51068], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 982, "seek": 525224, "start": 5266.32, "end": 5267.8, "text": " they're first-class values.", "tokens": [51068, 436, 434, 700, 12, 11665, 4190, 13, 51142], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 983, "seek": 525224, "start": 5267.8, "end": 5270.679999999999, "text": " They're values like any other.", "tokens": [51142, 814, 434, 4190, 411, 604, 661, 13, 51286], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 984, "seek": 525224, "start": 5270.679999999999, "end": 5272.92, "text": " Methods in Java are not first-class.", "tokens": [51286, 25285, 82, 294, 10745, 366, 406, 700, 12, 11665, 13, 51398], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 985, "seek": 525224, "start": 5272.92, "end": 5275.639999999999, "text": " You can't put a method into a variable.", "tokens": [51398, 509, 393, 380, 829, 257, 3170, 666, 257, 7006, 13, 51534], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 986, "seek": 525224, "start": 5275.639999999999, "end": 5277.76, "text": " You can't pass a method to a function.", "tokens": [51534, 509, 393, 380, 1320, 257, 3170, 281, 257, 2445, 13, 51640], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 987, "seek": 525224, "start": 5277.76, "end": 5280.719999999999, "text": " There are special things in LISPs.", "tokens": [51640, 821, 366, 2121, 721, 294, 441, 2343, 23043, 13, 51788], "temperature": 0.0, "avg_logprob": -0.18444414492006656, "compression_ratio": 1.7266187050359711, "no_speech_prob": 0.0005265177460387349}, {"id": 988, "seek": 528072, "start": 5280.72, "end": 5284.240000000001, "text": " And in fact, in most dynamic languages today, functions are", "tokens": [50364, 400, 294, 1186, 11, 294, 881, 8546, 8650, 965, 11, 6828, 366, 50540], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 989, "seek": 528072, "start": 5284.240000000001, "end": 5286.6, "text": " first-class, which means the function is a value.", "tokens": [50540, 700, 12, 11665, 11, 597, 1355, 264, 2445, 307, 257, 2158, 13, 50658], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 990, "seek": 528072, "start": 5286.6, "end": 5290.280000000001, "text": " So I've defined 5 to mean 5.", "tokens": [50658, 407, 286, 600, 7642, 1025, 281, 914, 1025, 13, 50842], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 991, "seek": 528072, "start": 5290.280000000001, "end": 5291.68, "text": " And of course, I don't need to do that.", "tokens": [50842, 400, 295, 1164, 11, 286, 500, 380, 643, 281, 360, 300, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 992, "seek": 528072, "start": 5291.68, "end": 5297.56, "text": " But I'm showing you a depth of a symbol to a value.", "tokens": [50912, 583, 286, 478, 4099, 291, 257, 7161, 295, 257, 5986, 281, 257, 2158, 13, 51206], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 993, "seek": 528072, "start": 5297.56, "end": 5300.84, "text": " Now I'm going to show you a depth of a symbol, as if you", "tokens": [51206, 823, 286, 478, 516, 281, 855, 291, 257, 7161, 295, 257, 5986, 11, 382, 498, 291, 51370], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 994, "seek": 528072, "start": 5300.84, "end": 5305.2, "text": " are, to a value, which is according to one of the other", "tokens": [51370, 366, 11, 281, 257, 2158, 11, 597, 307, 4650, 281, 472, 295, 264, 661, 51588], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 995, "seek": 528072, "start": 5305.2, "end": 5307.96, "text": " special operators called fun.", "tokens": [51588, 2121, 19077, 1219, 1019, 13, 51726], "temperature": 0.0, "avg_logprob": -0.1941192831311907, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.0018069377401843667}, {"id": 996, "seek": 530796, "start": 5307.96, "end": 5313.04, "text": " And what fun does is it creates a function object.", "tokens": [50364, 400, 437, 1019, 775, 307, 309, 7829, 257, 2445, 2657, 13, 50618], "temperature": 0.0, "avg_logprob": -0.20081986514004793, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.0013439175672829151}, {"id": 997, "seek": 530796, "start": 5313.04, "end": 5315.64, "text": " This is going to turn that code into something that gets", "tokens": [50618, 639, 307, 516, 281, 1261, 300, 3089, 666, 746, 300, 2170, 50748], "temperature": 0.0, "avg_logprob": -0.20081986514004793, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.0013439175672829151}, {"id": 998, "seek": 530796, "start": 5315.64, "end": 5319.04, "text": " compiled into a function that takes one argument and", "tokens": [50748, 36548, 666, 257, 2445, 300, 2516, 472, 6770, 293, 50918], "temperature": 0.0, "avg_logprob": -0.20081986514004793, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.0013439175672829151}, {"id": 999, "seek": 530796, "start": 5319.04, "end": 5320.16, "text": " multiplies it by itself.", "tokens": [50918, 12788, 530, 309, 538, 2564, 13, 50974], "temperature": 0.0, "avg_logprob": -0.20081986514004793, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.0013439175672829151}, {"id": 1000, "seek": 530796, "start": 5332.64, "end": 5334.72, "text": " It's a regular function.", "tokens": [51598, 467, 311, 257, 3890, 2445, 13, 51702], "temperature": 0.0, "avg_logprob": -0.20081986514004793, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.0013439175672829151}, {"id": 1001, "seek": 533472, "start": 5334.72, "end": 5339.2, "text": " It's going to be an instance of a Java interface that", "tokens": [50364, 467, 311, 516, 281, 312, 364, 5197, 295, 257, 10745, 9226, 300, 50588], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1002, "seek": 533472, "start": 5339.2, "end": 5340.12, "text": " takes an argument.", "tokens": [50588, 2516, 364, 6770, 13, 50634], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1003, "seek": 533472, "start": 5340.12, "end": 5343.56, "text": " It's a real, regular method in Java.", "tokens": [50634, 467, 311, 257, 957, 11, 3890, 3170, 294, 10745, 13, 50806], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1004, "seek": 533472, "start": 5346.56, "end": 5349.72, "text": " You'll have an invalidarity problem.", "tokens": [50956, 509, 603, 362, 364, 34702, 17409, 1154, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1005, "seek": 533472, "start": 5349.72, "end": 5351.2, "text": " OK, I need to move a little bit more quickly.", "tokens": [51114, 2264, 11, 286, 643, 281, 1286, 257, 707, 857, 544, 2661, 13, 51188], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1006, "seek": 533472, "start": 5351.2, "end": 5353.72, "text": " So let's hold the functions for a little bit.", "tokens": [51188, 407, 718, 311, 1797, 264, 6828, 337, 257, 707, 857, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1007, "seek": 533472, "start": 5353.72, "end": 5355.320000000001, "text": " Let me move forward.", "tokens": [51314, 961, 385, 1286, 2128, 13, 51394], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1008, "seek": 533472, "start": 5355.320000000001, "end": 5359.64, "text": " So this fun, I can't describe all of the features of fun.", "tokens": [51394, 407, 341, 1019, 11, 286, 393, 380, 6786, 439, 295, 264, 4122, 295, 1019, 13, 51610], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1009, "seek": 533472, "start": 5359.64, "end": 5361.92, "text": " It's an exciting and rich thing.", "tokens": [51610, 467, 311, 364, 4670, 293, 4593, 551, 13, 51724], "temperature": 0.0, "avg_logprob": -0.2599088941301618, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.005458485335111618}, {"id": 1010, "seek": 536192, "start": 5361.92, "end": 5364.88, "text": " But this fun that we can take as being fun is a special", "tokens": [50364, 583, 341, 1019, 300, 321, 393, 747, 382, 885, 1019, 307, 257, 2121, 50512], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1011, "seek": 536192, "start": 5364.88, "end": 5365.88, "text": " operator.", "tokens": [50512, 12973, 13, 50562], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1012, "seek": 536192, "start": 5365.88, "end": 5370.4400000000005, "text": " It takes a vector of the names of its arguments, the", "tokens": [50562, 467, 2516, 257, 8062, 295, 264, 5288, 295, 1080, 12869, 11, 264, 50790], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1013, "seek": 536192, "start": 5370.4400000000005, "end": 5372.12, "text": " simplest way of understanding.", "tokens": [50790, 22811, 636, 295, 3701, 13, 50874], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1014, "seek": 536192, "start": 5372.12, "end": 5376.2, "text": " And then it contains a set of expressions, which will be the", "tokens": [50874, 400, 550, 309, 8306, 257, 992, 295, 15277, 11, 597, 486, 312, 264, 51078], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1015, "seek": 536192, "start": 5376.2, "end": 5377.24, "text": " body of the function.", "tokens": [51078, 1772, 295, 264, 2445, 13, 51130], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1016, "seek": 536192, "start": 5377.24, "end": 5380.08, "text": " The last expression is the value returned by the function.", "tokens": [51130, 440, 1036, 6114, 307, 264, 2158, 8752, 538, 264, 2445, 13, 51272], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1017, "seek": 536192, "start": 5380.08, "end": 5385.16, "text": " There's no return statement in closure.", "tokens": [51272, 821, 311, 572, 2736, 5629, 294, 24653, 13, 51526], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1018, "seek": 536192, "start": 5385.16, "end": 5390.88, "text": " So when we say square five, it returns 25.", "tokens": [51526, 407, 562, 321, 584, 3732, 1732, 11, 309, 11247, 3552, 13, 51812], "temperature": 0.0, "avg_logprob": -0.2696114730834961, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0006067600916139781}, {"id": 1019, "seek": 539088, "start": 5390.92, "end": 5391.92, "text": " This is a function call.", "tokens": [50366, 639, 307, 257, 2445, 818, 13, 50416], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1020, "seek": 539088, "start": 5391.92, "end": 5393.28, "text": " Again, we said, what does it do?", "tokens": [50416, 3764, 11, 321, 848, 11, 437, 775, 309, 360, 30, 50484], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1021, "seek": 539088, "start": 5393.28, "end": 5395.04, "text": " It says, is square a special operator?", "tokens": [50484, 467, 1619, 11, 307, 3732, 257, 2121, 12973, 30, 50572], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1022, "seek": 539088, "start": 5395.04, "end": 5395.92, "text": " No.", "tokens": [50572, 883, 13, 50616], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1023, "seek": 539088, "start": 5395.92, "end": 5396.8, "text": " Is it a macro?", "tokens": [50616, 1119, 309, 257, 18887, 30, 50660], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1024, "seek": 539088, "start": 5396.8, "end": 5398.92, "text": " We're going to say, right now, it isn't.", "tokens": [50660, 492, 434, 516, 281, 584, 11, 558, 586, 11, 309, 1943, 380, 13, 50766], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1025, "seek": 539088, "start": 5398.92, "end": 5401.04, "text": " So what's the value of square?", "tokens": [50766, 407, 437, 311, 264, 2158, 295, 3732, 30, 50872], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1026, "seek": 539088, "start": 5401.04, "end": 5402.6, "text": " It's this function object.", "tokens": [50872, 467, 311, 341, 2445, 2657, 13, 50950], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1027, "seek": 539088, "start": 5402.6, "end": 5404.28, "text": " OK, call it.", "tokens": [50950, 2264, 11, 818, 309, 13, 51034], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1028, "seek": 539088, "start": 5404.28, "end": 5407.88, "text": " And pass it that.", "tokens": [51034, 400, 1320, 309, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1029, "seek": 539088, "start": 5407.88, "end": 5410.76, "text": " The value of that, because the arguments to functions are", "tokens": [51214, 440, 2158, 295, 300, 11, 570, 264, 12869, 281, 6828, 366, 51358], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1030, "seek": 539088, "start": 5410.76, "end": 5412.400000000001, "text": " evaluated.", "tokens": [51358, 25509, 13, 51440], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1031, "seek": 539088, "start": 5412.400000000001, "end": 5415.4400000000005, "text": " So it's going to pass square the number five.", "tokens": [51440, 407, 309, 311, 516, 281, 1320, 3732, 264, 1230, 1732, 13, 51592], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1032, "seek": 539088, "start": 5415.4400000000005, "end": 5420.08, "text": " Square is going to multiply by itself and return 25.", "tokens": [51592, 16463, 307, 516, 281, 12972, 538, 2564, 293, 2736, 3552, 13, 51824], "temperature": 0.0, "avg_logprob": -0.19982454670009328, "compression_ratio": 1.625984251968504, "no_speech_prob": 0.0004303602909203619}, {"id": 1033, "seek": 542008, "start": 5420.12, "end": 5422.32, "text": " So functions are first class.", "tokens": [50366, 407, 6828, 366, 700, 1508, 13, 50476], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1034, "seek": 542008, "start": 5422.32, "end": 5424.28, "text": " There are other things that are like functions.", "tokens": [50476, 821, 366, 661, 721, 300, 366, 411, 6828, 13, 50574], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1035, "seek": 542008, "start": 5424.28, "end": 5427.44, "text": " In other words, the compiler says, can I call this?", "tokens": [50574, 682, 661, 2283, 11, 264, 31958, 1619, 11, 393, 286, 818, 341, 30, 50732], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1036, "seek": 542008, "start": 5427.44, "end": 5429.96, "text": " The answer is true of funds.", "tokens": [50732, 440, 1867, 307, 2074, 295, 8271, 13, 50858], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1037, "seek": 542008, "start": 5429.96, "end": 5431.24, "text": " It's also true of other things.", "tokens": [50858, 467, 311, 611, 2074, 295, 661, 721, 13, 50922], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1038, "seek": 542008, "start": 5431.24, "end": 5433.84, "text": " In particular, one of the neat things about closure is that", "tokens": [50922, 682, 1729, 11, 472, 295, 264, 10654, 721, 466, 24653, 307, 300, 51052], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1039, "seek": 542008, "start": 5433.84, "end": 5436.04, "text": " maps are functions.", "tokens": [51052, 11317, 366, 6828, 13, 51162], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1040, "seek": 542008, "start": 5436.04, "end": 5439.72, "text": " Because if you think about maps mathematically, they are", "tokens": [51162, 1436, 498, 291, 519, 466, 11317, 44003, 11, 436, 366, 51346], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1041, "seek": 542008, "start": 5439.72, "end": 5440.68, "text": " functions.", "tokens": [51346, 6828, 13, 51394], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1042, "seek": 542008, "start": 5440.68, "end": 5442.76, "text": " Maps are functions of their keys.", "tokens": [51394, 28978, 366, 6828, 295, 641, 9317, 13, 51498], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1043, "seek": 542008, "start": 5442.76, "end": 5448.92, "text": " Given a key, a map should return the value of that key.", "tokens": [51498, 18600, 257, 2141, 11, 257, 4471, 820, 2736, 264, 2158, 295, 300, 2141, 13, 51806], "temperature": 0.0, "avg_logprob": -0.14272933170713228, "compression_ratio": 1.8369098712446352, "no_speech_prob": 0.00033502234145998955}, {"id": 1044, "seek": 544892, "start": 5448.92, "end": 5450.96, "text": " And it does, in closure.", "tokens": [50364, 400, 309, 775, 11, 294, 24653, 13, 50466], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1045, "seek": 544892, "start": 5450.96, "end": 5451.96, "text": " So maps are functions.", "tokens": [50466, 407, 11317, 366, 6828, 13, 50516], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1046, "seek": 544892, "start": 5451.96, "end": 5453.64, "text": " Sets are also functions.", "tokens": [50516, 318, 1385, 366, 611, 6828, 13, 50600], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1047, "seek": 544892, "start": 5453.64, "end": 5455.4800000000005, "text": " Vectors are also functions.", "tokens": [50600, 691, 557, 830, 366, 611, 6828, 13, 50692], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1048, "seek": 544892, "start": 5455.4800000000005, "end": 5457.08, "text": " Vectors are functions of their indices.", "tokens": [50692, 691, 557, 830, 366, 6828, 295, 641, 43840, 13, 50772], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1049, "seek": 544892, "start": 5461.4, "end": 5462.28, "text": " That's cool stuff.", "tokens": [50988, 663, 311, 1627, 1507, 13, 51032], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1050, "seek": 544892, "start": 5462.28, "end": 5465.4400000000005, "text": " And when you see idiomatic closure, some of it is quite", "tokens": [51032, 400, 562, 291, 536, 18014, 13143, 24653, 11, 512, 295, 309, 307, 1596, 51190], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1051, "seek": 544892, "start": 5465.4400000000005, "end": 5470.04, "text": " beautiful because of that relationship.", "tokens": [51190, 2238, 570, 295, 300, 2480, 13, 51420], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1052, "seek": 544892, "start": 5470.04, "end": 5473.92, "text": " So we'll try to summarize this.", "tokens": [51420, 407, 321, 603, 853, 281, 20858, 341, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1053, "seek": 544892, "start": 5473.92, "end": 5476.4400000000005, "text": " Things that would be declarations or control", "tokens": [51614, 9514, 300, 576, 312, 16694, 763, 420, 1969, 51740], "temperature": 0.0, "avg_logprob": -0.17038506269454956, "compression_ratio": 1.7025641025641025, "no_speech_prob": 0.0001214496442116797}, {"id": 1054, "seek": 547644, "start": 5476.48, "end": 5482.48, "text": " structures, or function calls, or operators, or whatever.", "tokens": [50366, 9227, 11, 420, 2445, 5498, 11, 420, 19077, 11, 420, 2035, 13, 50666], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1055, "seek": 547644, "start": 5482.48, "end": 5489.44, "text": " In Java, all are uniform in closure, or any list.", "tokens": [50666, 682, 10745, 11, 439, 366, 9452, 294, 24653, 11, 420, 604, 1329, 13, 51014], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1056, "seek": 547644, "start": 5489.44, "end": 5495.0, "text": " In that, there are lists where the operator is the first", "tokens": [51014, 682, 300, 11, 456, 366, 14511, 689, 264, 12973, 307, 264, 700, 51292], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1057, "seek": 547644, "start": 5495.0, "end": 5497.5599999999995, "text": " thing in the list.", "tokens": [51292, 551, 294, 264, 1329, 13, 51420], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1058, "seek": 547644, "start": 5497.5599999999995, "end": 5501.839999999999, "text": " So we've reduced all of this variation here to something", "tokens": [51420, 407, 321, 600, 9212, 439, 295, 341, 12990, 510, 281, 746, 51634], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1059, "seek": 547644, "start": 5501.839999999999, "end": 5502.32, "text": " uniform.", "tokens": [51634, 9452, 13, 51658], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1060, "seek": 547644, "start": 5502.32, "end": 5503.44, "text": " So look at each one.", "tokens": [51658, 407, 574, 412, 1184, 472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.23833527503075538, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.0016980522777885199}, {"id": 1061, "seek": 550344, "start": 5503.44, "end": 5507.919999999999, "text": " int i equals 5 establishes i as the name, whose meaning is", "tokens": [50364, 560, 741, 6915, 1025, 8327, 279, 741, 382, 264, 1315, 11, 6104, 3620, 307, 50588], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1062, "seek": 550344, "start": 5507.919999999999, "end": 5510.12, "text": " the value of 5.", "tokens": [50588, 264, 2158, 295, 1025, 13, 50698], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1063, "seek": 550344, "start": 5510.12, "end": 5512.799999999999, "text": " That i does that as well.", "tokens": [50698, 663, 741, 775, 300, 382, 731, 13, 50832], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1064, "seek": 550344, "start": 5512.799999999999, "end": 5514.4, "text": " Where in this does it say it's a definition?", "tokens": [50832, 2305, 294, 341, 775, 309, 584, 309, 311, 257, 7123, 30, 50912], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1065, "seek": 550344, "start": 5514.4, "end": 5514.679999999999, "text": " Whatever.", "tokens": [50912, 8541, 13, 50926], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1066, "seek": 550344, "start": 5514.679999999999, "end": 5517.839999999999, "text": " Some rule about the shape of this thing says it's a", "tokens": [50926, 2188, 4978, 466, 264, 3909, 295, 341, 551, 1619, 309, 311, 257, 51084], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1067, "seek": 550344, "start": 5517.839999999999, "end": 5518.44, "text": " definition.", "tokens": [51084, 7123, 13, 51114], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1068, "seek": 550344, "start": 5518.44, "end": 5524.0, "text": " In closure, that says that's what it means.", "tokens": [51114, 682, 24653, 11, 300, 1619, 300, 311, 437, 309, 1355, 13, 51392], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1069, "seek": 550344, "start": 5524.0, "end": 5526.04, "text": " If x is equal to 0, return y.", "tokens": [51392, 759, 2031, 307, 2681, 281, 1958, 11, 2736, 288, 13, 51494], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1070, "seek": 550344, "start": 5526.04, "end": 5527.48, "text": " Otherwise, return z.", "tokens": [51494, 10328, 11, 2736, 710, 13, 51566], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1071, "seek": 550344, "start": 5527.48, "end": 5530.12, "text": " When does this end?", "tokens": [51566, 1133, 775, 341, 917, 30, 51698], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1072, "seek": 550344, "start": 5530.12, "end": 5531.12, "text": " I'm showing the rest of the program.", "tokens": [51698, 286, 478, 4099, 264, 1472, 295, 264, 1461, 13, 51748], "temperature": 0.0, "avg_logprob": -0.245654226351185, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.0010153931798413396}, {"id": 1073, "seek": 553112, "start": 5531.12, "end": 5534.96, "text": " Is this done?", "tokens": [50364, 1119, 341, 1096, 30, 50556], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1074, "seek": 553112, "start": 5534.96, "end": 5536.0, "text": " Got me?", "tokens": [50556, 5803, 385, 30, 50608], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1075, "seek": 553112, "start": 5536.0, "end": 5536.48, "text": " You don't know?", "tokens": [50608, 509, 500, 380, 458, 30, 50632], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1076, "seek": 553112, "start": 5536.48, "end": 5537.48, "text": " I don't know.", "tokens": [50632, 286, 500, 380, 458, 13, 50682], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1077, "seek": 553112, "start": 5537.48, "end": 5541.96, "text": " Because it could say else, else, else if.", "tokens": [50682, 1436, 309, 727, 584, 1646, 11, 1646, 11, 1646, 498, 13, 50906], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1078, "seek": 553112, "start": 5541.96, "end": 5544.2, "text": " I couldn't say it has to say else if, and then it could say", "tokens": [50906, 286, 2809, 380, 584, 309, 575, 281, 584, 1646, 498, 11, 293, 550, 309, 727, 584, 51018], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1079, "seek": 553112, "start": 5544.2, "end": 5545.12, "text": " else.", "tokens": [51018, 1646, 13, 51064], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1080, "seek": 553112, "start": 5545.12, "end": 5547.16, "text": " We have to keep looking forward.", "tokens": [51064, 492, 362, 281, 1066, 1237, 2128, 13, 51166], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1081, "seek": 553112, "start": 5547.16, "end": 5549.68, "text": " We could not have had an else.", "tokens": [51166, 492, 727, 406, 362, 632, 364, 1646, 13, 51292], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1082, "seek": 553112, "start": 5549.68, "end": 5551.32, "text": " It's not closed.", "tokens": [51292, 467, 311, 406, 5395, 13, 51374], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1083, "seek": 553112, "start": 5551.32, "end": 5554.04, "text": " In addition, without these returns, it doesn't yield a", "tokens": [51374, 682, 4500, 11, 1553, 613, 11247, 11, 309, 1177, 380, 11257, 257, 51510], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1084, "seek": 553112, "start": 5554.04, "end": 5554.36, "text": " value.", "tokens": [51510, 2158, 13, 51526], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1085, "seek": 553112, "start": 5554.36, "end": 5557.12, "text": " This is a statement in Java.", "tokens": [51526, 639, 307, 257, 5629, 294, 10745, 13, 51664], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1086, "seek": 553112, "start": 5557.12, "end": 5560.28, "text": " There is an if conditional, which is an expression of two", "tokens": [51664, 821, 307, 364, 498, 27708, 11, 597, 307, 364, 6114, 295, 732, 51822], "temperature": 0.0, "avg_logprob": -0.28138176969779555, "compression_ratio": 1.6695278969957081, "no_speech_prob": 0.0017523026326671243}, {"id": 1087, "seek": 556028, "start": 5560.28, "end": 5562.719999999999, "text": " different things.", "tokens": [50364, 819, 721, 13, 50486], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1088, "seek": 556028, "start": 5562.719999999999, "end": 5567.28, "text": " In closure, if, against first, we know we're dealing with if.", "tokens": [50486, 682, 24653, 11, 498, 11, 1970, 700, 11, 321, 458, 321, 434, 6260, 365, 498, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1089, "seek": 556028, "start": 5567.28, "end": 5568.36, "text": " We saw the syntax.", "tokens": [50714, 492, 1866, 264, 28431, 13, 50768], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1090, "seek": 556028, "start": 5568.36, "end": 5571.5199999999995, "text": " It takes three things.", "tokens": [50768, 467, 2516, 1045, 721, 13, 50926], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1091, "seek": 556028, "start": 5571.5199999999995, "end": 5574.36, "text": " What's the question mark in 0, the question mark in closure?", "tokens": [50926, 708, 311, 264, 1168, 1491, 294, 1958, 11, 264, 1168, 1491, 294, 24653, 30, 51068], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1092, "seek": 556028, "start": 5574.36, "end": 5576.08, "text": " That's a function name.", "tokens": [51068, 663, 311, 257, 2445, 1315, 13, 51154], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1093, "seek": 556028, "start": 5576.08, "end": 5578.36, "text": " You can have question marks in names.", "tokens": [51154, 509, 393, 362, 1168, 10640, 294, 5288, 13, 51268], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1094, "seek": 556028, "start": 5578.36, "end": 5580.8, "text": " Closure is much more liberal about the symbols that can", "tokens": [51268, 2033, 7641, 307, 709, 544, 13767, 466, 264, 16944, 300, 393, 51390], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1095, "seek": 556028, "start": 5580.8, "end": 5583.28, "text": " appear in names, but not completely liberal.", "tokens": [51390, 4204, 294, 5288, 11, 457, 406, 2584, 13767, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1096, "seek": 556028, "start": 5583.28, "end": 5588.0, "text": " Because I need some symbols for myself.", "tokens": [51514, 1436, 286, 643, 512, 16944, 337, 2059, 13, 51750], "temperature": 0.0, "avg_logprob": -0.3829647670282382, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.012197833508253098}, {"id": 1097, "seek": 558800, "start": 5588.04, "end": 5588.96, "text": " x times y times z.", "tokens": [50366, 2031, 1413, 288, 1413, 710, 13, 50412], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1098, "seek": 558800, "start": 5588.96, "end": 5591.96, "text": " What are these?", "tokens": [50412, 708, 366, 613, 30, 50562], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1099, "seek": 558800, "start": 5591.96, "end": 5593.4, "text": " Mathematical operators.", "tokens": [50562, 15776, 8615, 804, 19077, 13, 50634], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1100, "seek": 558800, "start": 5593.4, "end": 5595.92, "text": " Again, another special thing about Java.", "tokens": [50634, 3764, 11, 1071, 2121, 551, 466, 10745, 13, 50760], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1101, "seek": 558800, "start": 5595.92, "end": 5597.4, "text": " And they can go in between things.", "tokens": [50760, 400, 436, 393, 352, 294, 1296, 721, 13, 50834], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1102, "seek": 558800, "start": 5597.4, "end": 5599.04, "text": " And there's precedence rules.", "tokens": [50834, 400, 456, 311, 16969, 655, 4474, 13, 50916], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1103, "seek": 558800, "start": 5599.04, "end": 5602.04, "text": " All other kinds of guk, right?", "tokens": [50916, 1057, 661, 3685, 295, 695, 74, 11, 558, 30, 51066], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1104, "seek": 558800, "start": 5602.04, "end": 5603.04, "text": " Closure is wet.", "tokens": [51066, 2033, 7641, 307, 6630, 13, 51116], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1105, "seek": 558800, "start": 5603.04, "end": 5603.72, "text": " It's a beginning.", "tokens": [51116, 467, 311, 257, 2863, 13, 51150], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1106, "seek": 558800, "start": 5603.72, "end": 5604.68, "text": " I don't have to look anywhere.", "tokens": [51150, 286, 500, 380, 362, 281, 574, 4992, 13, 51198], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1107, "seek": 558800, "start": 5604.68, "end": 5606.6, "text": " I don't have to look in the middle or read or look for", "tokens": [51198, 286, 500, 380, 362, 281, 574, 294, 264, 2808, 420, 1401, 420, 574, 337, 51294], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1108, "seek": 558800, "start": 5606.6, "end": 5607.88, "text": " semicolon.", "tokens": [51294, 27515, 38780, 13, 51358], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1109, "seek": 558800, "start": 5607.88, "end": 5608.52, "text": " What's happening?", "tokens": [51358, 708, 311, 2737, 30, 51390], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1110, "seek": 558800, "start": 5608.52, "end": 5612.28, "text": " Multiplication, first.", "tokens": [51390, 29238, 4770, 399, 11, 700, 13, 51578], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1111, "seek": 558800, "start": 5612.28, "end": 5614.48, "text": " Also, you'll notice multiplication can take", "tokens": [51578, 2743, 11, 291, 603, 3449, 27290, 393, 747, 51688], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1112, "seek": 558800, "start": 5614.48, "end": 5616.28, "text": " multiple operands, more than two.", "tokens": [51688, 3866, 2208, 2967, 11, 544, 813, 732, 13, 51778], "temperature": 0.0, "avg_logprob": -0.3302114782199054, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001243932289071381}, {"id": 1113, "seek": 561628, "start": 5616.28, "end": 5618.16, "text": " It's not just a binary operator.", "tokens": [50364, 467, 311, 406, 445, 257, 17434, 12973, 13, 50458], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1114, "seek": 561628, "start": 5618.16, "end": 5619.24, "text": " It's an n-ary operator.", "tokens": [50458, 467, 311, 364, 297, 12, 822, 12973, 13, 50512], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1115, "seek": 561628, "start": 5622.16, "end": 5622.92, "text": " Foo x, y, z.", "tokens": [50658, 479, 1986, 2031, 11, 288, 11, 710, 13, 50696], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1116, "seek": 561628, "start": 5622.92, "end": 5625.32, "text": " This is what?", "tokens": [50696, 639, 307, 437, 30, 50816], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1117, "seek": 561628, "start": 5625.32, "end": 5628.08, "text": " Function call, right?", "tokens": [50816, 11166, 882, 818, 11, 558, 30, 50954], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1118, "seek": 561628, "start": 5628.08, "end": 5629.36, "text": " Foo x, y, z.", "tokens": [50954, 479, 1986, 2031, 11, 288, 11, 710, 13, 51018], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1119, "seek": 561628, "start": 5629.36, "end": 5630.84, "text": " People complain about the parentheses.", "tokens": [51018, 3432, 11024, 466, 264, 34153, 13, 51092], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1120, "seek": 561628, "start": 5630.84, "end": 5632.5599999999995, "text": " List how many parentheses difference.", "tokens": [51092, 17668, 577, 867, 34153, 2649, 13, 51178], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1121, "seek": 561628, "start": 5636.04, "end": 5637.08, "text": " None.", "tokens": [51352, 14492, 13, 51404], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1122, "seek": 561628, "start": 5637.08, "end": 5640.16, "text": " You move it from here over there.", "tokens": [51404, 509, 1286, 309, 490, 510, 670, 456, 13, 51558], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1123, "seek": 561628, "start": 5640.16, "end": 5642.32, "text": " Same thing.", "tokens": [51558, 10635, 551, 13, 51666], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1124, "seek": 561628, "start": 5642.32, "end": 5642.8, "text": " Same thing.", "tokens": [51666, 10635, 551, 13, 51690], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1125, "seek": 561628, "start": 5642.8, "end": 5644.5199999999995, "text": " I don't know what you're talking about.", "tokens": [51690, 286, 500, 380, 458, 437, 291, 434, 1417, 466, 13, 51776], "temperature": 0.0, "avg_logprob": -0.40710717660409435, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.00036240980261936784}, {"id": 1126, "seek": 564452, "start": 5644.52, "end": 5646.68, "text": " And you're not going to see curly, curly, curly,", "tokens": [50364, 400, 291, 434, 406, 516, 281, 536, 32066, 11, 32066, 11, 32066, 11, 50472], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1127, "seek": 564452, "start": 5646.68, "end": 5648.84, "text": " curly, curly, curly, curly.", "tokens": [50472, 32066, 11, 32066, 11, 32066, 11, 32066, 13, 50580], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1128, "seek": 564452, "start": 5648.84, "end": 5652.160000000001, "text": " Yes, you may see friends like that.", "tokens": [50580, 1079, 11, 291, 815, 536, 1855, 411, 300, 13, 50746], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1129, "seek": 564452, "start": 5652.160000000001, "end": 5653.68, "text": " But that's better, I'm telling you.", "tokens": [50746, 583, 300, 311, 1101, 11, 286, 478, 3585, 291, 13, 50822], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1130, "seek": 564452, "start": 5653.68, "end": 5656.360000000001, "text": " It keeps your program near itself.", "tokens": [50822, 467, 5965, 428, 1461, 2651, 2564, 13, 50956], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1131, "seek": 564452, "start": 5656.360000000001, "end": 5658.6, "text": " You don't have to go down to the next page to see the next", "tokens": [50956, 509, 500, 380, 362, 281, 352, 760, 281, 264, 958, 3028, 281, 536, 264, 958, 51068], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1132, "seek": 564452, "start": 5658.6, "end": 5659.8, "text": " step.", "tokens": [51068, 1823, 13, 51128], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1133, "seek": 564452, "start": 5659.8, "end": 5661.88, "text": " And then this member access, I'm going to talk more about the", "tokens": [51128, 400, 550, 341, 4006, 2105, 11, 286, 478, 516, 281, 751, 544, 466, 264, 51232], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1134, "seek": 564452, "start": 5661.88, "end": 5664.240000000001, "text": " Java interoperability.", "tokens": [51232, 10745, 728, 7192, 2310, 13, 51350], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1135, "seek": 564452, "start": 5664.240000000001, "end": 5666.120000000001, "text": " But same kind of thing.", "tokens": [51350, 583, 912, 733, 295, 551, 13, 51444], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1136, "seek": 564452, "start": 5666.120000000001, "end": 5668.200000000001, "text": " Different number of parentheses?", "tokens": [51444, 20825, 1230, 295, 34153, 30, 51548], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1137, "seek": 564452, "start": 5668.200000000001, "end": 5668.8, "text": " No.", "tokens": [51548, 883, 13, 51578], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1138, "seek": 564452, "start": 5668.8, "end": 5670.4800000000005, "text": " Different number of dots?", "tokens": [51578, 20825, 1230, 295, 15026, 30, 51662], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1139, "seek": 564452, "start": 5670.4800000000005, "end": 5671.240000000001, "text": " No.", "tokens": [51662, 883, 13, 51700], "temperature": 0.0, "avg_logprob": -0.20670611159245772, "compression_ratio": 1.7740585774058577, "no_speech_prob": 0.001262866659089923}, {"id": 1140, "seek": 567124, "start": 5671.24, "end": 5676.0, "text": " But dot goes first, because dot tells Clojure we're doing", "tokens": [50364, 583, 5893, 1709, 700, 11, 570, 5893, 5112, 31901, 73, 540, 321, 434, 884, 50602], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1141, "seek": 567124, "start": 5676.0, "end": 5678.32, "text": " some Java stuff here.", "tokens": [50602, 512, 10745, 1507, 510, 13, 50718], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1142, "seek": 567124, "start": 5678.32, "end": 5680.36, "text": " That has its own special interpretation, because dot is", "tokens": [50718, 663, 575, 1080, 1065, 2121, 14174, 11, 570, 5893, 307, 50820], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1143, "seek": 567124, "start": 5680.36, "end": 5683.639999999999, "text": " a special operator, we saw before.", "tokens": [50820, 257, 2121, 12973, 11, 321, 1866, 949, 13, 50984], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1144, "seek": 567124, "start": 5683.639999999999, "end": 5686.5199999999995, "text": " So there's a tremendous uniformity.", "tokens": [50984, 407, 456, 311, 257, 10048, 9452, 507, 13, 51128], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1145, "seek": 567124, "start": 5686.5199999999995, "end": 5689.639999999999, "text": " There's a lot of value to that uniformity.", "tokens": [51128, 821, 311, 257, 688, 295, 2158, 281, 300, 9452, 507, 13, 51284], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1146, "seek": 567124, "start": 5689.639999999999, "end": 5691.96, "text": " I know a lot of programming languages.", "tokens": [51284, 286, 458, 257, 688, 295, 9410, 8650, 13, 51400], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1147, "seek": 567124, "start": 5691.96, "end": 5695.84, "text": " And every time I have to learn the arcane, whatever the", "tokens": [51400, 400, 633, 565, 286, 362, 281, 1466, 264, 10346, 1929, 11, 2035, 264, 51594], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1148, "seek": 567124, "start": 5695.84, "end": 5698.719999999999, "text": " rules are, syntax, and this thing next to that means", "tokens": [51594, 4474, 366, 11, 28431, 11, 293, 341, 551, 958, 281, 300, 1355, 51738], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1149, "seek": 567124, "start": 5698.719999999999, "end": 5701.16, "text": " that, and this character means this, and you can have a", "tokens": [51738, 300, 11, 293, 341, 2517, 1355, 341, 11, 293, 291, 393, 362, 257, 51860], "temperature": 0.0, "avg_logprob": -0.1982227909949518, "compression_ratio": 1.7290076335877862, "no_speech_prob": 0.0001969681034097448}, {"id": 1150, "seek": 570116, "start": 5701.16, "end": 5705.12, "text": " semicolon here, but not there, and it better be indented by", "tokens": [50364, 27515, 38780, 510, 11, 457, 406, 456, 11, 293, 309, 1101, 312, 1016, 6003, 538, 50562], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1151, "seek": 570116, "start": 5705.12, "end": 5707.68, "text": " the same amount, or whatever it is.", "tokens": [50562, 264, 912, 2372, 11, 420, 2035, 309, 307, 13, 50690], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1152, "seek": 570116, "start": 5707.68, "end": 5711.16, "text": " I really get angry now, because there is no reason for", "tokens": [50690, 286, 534, 483, 6884, 586, 11, 570, 456, 307, 572, 1778, 337, 50864], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1153, "seek": 570116, "start": 5711.16, "end": 5712.0, "text": " that.", "tokens": [50864, 300, 13, 50906], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1154, "seek": 570116, "start": 5712.0, "end": 5714.88, "text": " It is not better than this.", "tokens": [50906, 467, 307, 406, 1101, 813, 341, 13, 51050], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1155, "seek": 570116, "start": 5714.88, "end": 5719.92, "text": " And if you use this for any amount of time, you will not", "tokens": [51050, 400, 498, 291, 764, 341, 337, 604, 2372, 295, 565, 11, 291, 486, 406, 51302], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1156, "seek": 570116, "start": 5719.92, "end": 5722.76, "text": " disagree, because there's no one who has, who does.", "tokens": [51302, 14091, 11, 570, 456, 311, 572, 472, 567, 575, 11, 567, 775, 13, 51444], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1157, "seek": 570116, "start": 5725.48, "end": 5727.5599999999995, "text": " But it also has to have its biggest", "tokens": [51580, 583, 309, 611, 575, 281, 362, 1080, 3880, 51684], "temperature": 0.0, "avg_logprob": -0.2835480631614218, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.003694112179800868}, {"id": 1158, "seek": 572756, "start": 5727.56, "end": 5729.4800000000005, "text": " differences in some ways.", "tokens": [50364, 7300, 294, 512, 2098, 13, 50460], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1159, "seek": 572756, "start": 5729.4800000000005, "end": 5735.080000000001, "text": " Who got far, far more cool for an X in Java?", "tokens": [50460, 2102, 658, 1400, 11, 1400, 544, 1627, 337, 364, 1783, 294, 10745, 30, 50740], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1160, "seek": 572756, "start": 5735.080000000001, "end": 5737.080000000001, "text": " How do I get the expression?", "tokens": [50740, 1012, 360, 286, 483, 264, 6114, 30, 50840], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1161, "seek": 572756, "start": 5737.080000000001, "end": 5738.080000000001, "text": " I'll show you later.", "tokens": [50840, 286, 603, 855, 291, 1780, 13, 50890], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1162, "seek": 572756, "start": 5742.160000000001, "end": 5745.72, "text": " If I only have another hour, I have to go much faster.", "tokens": [51094, 759, 286, 787, 362, 1071, 1773, 11, 286, 362, 281, 352, 709, 4663, 13, 51272], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1163, "seek": 572756, "start": 5745.72, "end": 5748.64, "text": " Everybody ready?", "tokens": [51272, 7646, 1919, 30, 51418], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1164, "seek": 572756, "start": 5748.64, "end": 5752.84, "text": " So let's hold the questions until a question time, unless", "tokens": [51418, 407, 718, 311, 1797, 264, 1651, 1826, 257, 1168, 565, 11, 5969, 51628], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1165, "seek": 572756, "start": 5752.84, "end": 5755.200000000001, "text": " you're really confused, but just general interest things", "tokens": [51628, 291, 434, 534, 9019, 11, 457, 445, 2674, 1179, 721, 51746], "temperature": 0.0, "avg_logprob": -0.45488188483498315, "compression_ratio": 1.4345794392523366, "no_speech_prob": 0.0027532654348760843}, {"id": 1166, "seek": 575520, "start": 5755.4, "end": 5758.72, "text": " will hold, because I may cover it.", "tokens": [50374, 486, 1797, 11, 570, 286, 815, 2060, 309, 13, 50540], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1167, "seek": 575520, "start": 5758.72, "end": 5763.04, "text": " One of the things that is typical about a Lisp is that", "tokens": [50540, 1485, 295, 264, 721, 300, 307, 7476, 466, 257, 441, 7631, 307, 300, 50756], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1168, "seek": 575520, "start": 5763.04, "end": 5767.72, "text": " it has a rich library for manipulating lists.", "tokens": [50756, 309, 575, 257, 4593, 6405, 337, 40805, 14511, 13, 50990], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1169, "seek": 575520, "start": 5767.72, "end": 5771.2, "text": " But it ends up that, I think, in my opinion, it's a", "tokens": [50990, 583, 309, 5314, 493, 300, 11, 286, 519, 11, 294, 452, 4800, 11, 309, 311, 257, 51164], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1170, "seek": 575520, "start": 5771.2, "end": 5775.5199999999995, "text": " shortcoming of Lisp's traditionally, that those", "tokens": [51164, 2099, 6590, 295, 441, 7631, 311, 19067, 11, 300, 729, 51380], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1171, "seek": 575520, "start": 5775.5199999999995, "end": 5779.44, "text": " functions are limited to a particular data structure,", "tokens": [51380, 6828, 366, 5567, 281, 257, 1729, 1412, 3877, 11, 51576], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1172, "seek": 575520, "start": 5779.44, "end": 5781.76, "text": " which is the singly linked list.", "tokens": [51576, 597, 307, 264, 1522, 356, 9408, 1329, 13, 51692], "temperature": 0.0, "avg_logprob": -0.18364397684733072, "compression_ratio": 1.511737089201878, "no_speech_prob": 0.005450152326375246}, {"id": 1173, "seek": 578176, "start": 5781.8, "end": 5788.12, "text": " Because the functions that underline that abstraction are", "tokens": [50366, 1436, 264, 6828, 300, 833, 1889, 300, 37765, 366, 50682], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1174, "seek": 578176, "start": 5788.12, "end": 5790.88, "text": " broader, and they're three of them.", "tokens": [50682, 13227, 11, 293, 436, 434, 1045, 295, 552, 13, 50820], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1175, "seek": 578176, "start": 5790.88, "end": 5794.52, "text": " The first is, I'd like to obtain some sort of a sequence", "tokens": [50820, 440, 700, 307, 11, 286, 1116, 411, 281, 12701, 512, 1333, 295, 257, 8310, 51002], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1176, "seek": 578176, "start": 5794.52, "end": 5799.320000000001, "text": " like thing from some sort of collection like thing.", "tokens": [51002, 411, 551, 490, 512, 1333, 295, 5765, 411, 551, 13, 51242], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1177, "seek": 578176, "start": 5799.320000000001, "end": 5802.08, "text": " That's an abstract way to say something.", "tokens": [51242, 663, 311, 364, 12649, 636, 281, 584, 746, 13, 51380], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1178, "seek": 578176, "start": 5802.08, "end": 5806.76, "text": " Given that sequence like thing, I want and need only two", "tokens": [51380, 18600, 300, 8310, 411, 551, 11, 286, 528, 293, 643, 787, 732, 51614], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1179, "seek": 578176, "start": 5806.76, "end": 5807.88, "text": " functions.", "tokens": [51614, 6828, 13, 51670], "temperature": 0.0, "avg_logprob": -0.1903856418750904, "compression_ratio": 1.7277777777777779, "no_speech_prob": 0.0003455638943705708}, {"id": 1180, "seek": 580788, "start": 5807.88, "end": 5812.12, "text": " One is to say, give me the first thing.", "tokens": [50364, 1485, 307, 281, 584, 11, 976, 385, 264, 700, 551, 13, 50576], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1181, "seek": 580788, "start": 5812.12, "end": 5815.8, "text": " The other is to say, give me the sequence that is the rest", "tokens": [50576, 440, 661, 307, 281, 584, 11, 976, 385, 264, 8310, 300, 307, 264, 1472, 50760], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1182, "seek": 580788, "start": 5815.8, "end": 5818.52, "text": " of this sequence.", "tokens": [50760, 295, 341, 8310, 13, 50896], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1183, "seek": 580788, "start": 5818.52, "end": 5824.12, "text": " In the case of seek, if there is no stuff, it returns nil,", "tokens": [50896, 682, 264, 1389, 295, 8075, 11, 498, 456, 307, 572, 1507, 11, 309, 11247, 297, 388, 11, 51176], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1184, "seek": 580788, "start": 5824.12, "end": 5827.8, "text": " because nil means nothing.", "tokens": [51176, 570, 297, 388, 1355, 1825, 13, 51360], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1185, "seek": 580788, "start": 5827.8, "end": 5830.16, "text": " Which means you can say seek call, and you can put that in", "tokens": [51360, 3013, 1355, 291, 393, 584, 8075, 818, 11, 293, 291, 393, 829, 300, 294, 51478], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1186, "seek": 580788, "start": 5830.16, "end": 5832.68, "text": " an if expression as a test thing.", "tokens": [51478, 364, 498, 6114, 382, 257, 1500, 551, 13, 51604], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1187, "seek": 580788, "start": 5832.68, "end": 5836.68, "text": " And because nil returns logical false, you'll know", "tokens": [51604, 400, 570, 297, 388, 11247, 14978, 7908, 11, 291, 603, 458, 51804], "temperature": 0.0, "avg_logprob": -0.1448681192490661, "compression_ratio": 1.7927461139896372, "no_speech_prob": 0.0007653865613974631}, {"id": 1188, "seek": 583668, "start": 5836.68, "end": 5838.4800000000005, "text": " there's nothing to do.", "tokens": [50364, 456, 311, 1825, 281, 360, 13, 50454], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1189, "seek": 583668, "start": 5838.4800000000005, "end": 5842.68, "text": " That's an important idiom of common Lisp, closure preserves", "tokens": [50454, 663, 311, 364, 1021, 18014, 298, 295, 2689, 441, 7631, 11, 24653, 1183, 9054, 50664], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1190, "seek": 583668, "start": 5842.68, "end": 5847.68, "text": " unlike scheme, where you have to say empty all the time.", "tokens": [50664, 8343, 12232, 11, 689, 291, 362, 281, 584, 6707, 439, 264, 565, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1191, "seek": 583668, "start": 5847.68, "end": 5851.08, "text": " If it's not empty, you will get back an object.", "tokens": [50914, 759, 309, 311, 406, 6707, 11, 291, 486, 483, 646, 364, 2657, 13, 51084], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1192, "seek": 583668, "start": 5851.08, "end": 5854.16, "text": " That object only makes two promises.", "tokens": [51084, 663, 2657, 787, 1669, 732, 16403, 13, 51238], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1193, "seek": 583668, "start": 5854.16, "end": 5855.8, "text": " You can call these two functions on it.", "tokens": [51238, 509, 393, 818, 613, 732, 6828, 322, 309, 13, 51320], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1194, "seek": 583668, "start": 5859.16, "end": 5861.08, "text": " This function promises one thing.", "tokens": [51488, 639, 2445, 16403, 472, 551, 13, 51584], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1195, "seek": 583668, "start": 5861.08, "end": 5863.56, "text": " There will be a first element, because we're already covered", "tokens": [51584, 821, 486, 312, 257, 700, 4478, 11, 570, 321, 434, 1217, 5343, 51708], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1196, "seek": 583668, "start": 5863.56, "end": 5865.92, "text": " if there's not a first element here.", "tokens": [51708, 498, 456, 311, 406, 257, 700, 4478, 510, 13, 51826], "temperature": 0.0, "avg_logprob": -0.1683538244404924, "compression_ratio": 1.6779661016949152, "no_speech_prob": 0.0005879371892660856}, {"id": 1197, "seek": 586592, "start": 5865.92, "end": 5870.12, "text": " So if you say first of the seek, and this is not nil, it", "tokens": [50364, 407, 498, 291, 584, 700, 295, 264, 8075, 11, 293, 341, 307, 406, 297, 388, 11, 309, 50574], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1198, "seek": 586592, "start": 5870.12, "end": 5873.92, "text": " means you have a seek, you get back a guy.", "tokens": [50574, 1355, 291, 362, 257, 8075, 11, 291, 483, 646, 257, 2146, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1199, "seek": 586592, "start": 5873.92, "end": 5877.36, "text": " The first thing in the sequence.", "tokens": [50764, 440, 700, 551, 294, 264, 8310, 13, 50936], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1200, "seek": 586592, "start": 5877.36, "end": 5879.4, "text": " The second thing you can do with the seek is you can call", "tokens": [50936, 440, 1150, 551, 291, 393, 360, 365, 264, 8075, 307, 291, 393, 818, 51038], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1201, "seek": 586592, "start": 5879.4, "end": 5882.56, "text": " rest on it, which says, give me the sequence that represents", "tokens": [51038, 1472, 322, 309, 11, 597, 1619, 11, 976, 385, 264, 8310, 300, 8855, 51196], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1202, "seek": 586592, "start": 5882.56, "end": 5885.6, "text": " the rest, not including the first thing.", "tokens": [51196, 264, 1472, 11, 406, 3009, 264, 700, 551, 13, 51348], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1203, "seek": 586592, "start": 5885.6, "end": 5888.92, "text": " Of course, if there's no more, what should we get?", "tokens": [51348, 2720, 1164, 11, 498, 456, 311, 572, 544, 11, 437, 820, 321, 483, 30, 51514], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1204, "seek": 586592, "start": 5888.92, "end": 5892.56, "text": " Nil, because we said here, nothing.", "tokens": [51514, 426, 388, 11, 570, 321, 848, 510, 11, 1825, 13, 51696], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1205, "seek": 586592, "start": 5892.56, "end": 5893.76, "text": " If we have nothing, we get nil.", "tokens": [51696, 759, 321, 362, 1825, 11, 321, 483, 297, 388, 13, 51756], "temperature": 0.0, "avg_logprob": -0.17647471618652344, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0005182369495742023}, {"id": 1206, "seek": 589376, "start": 5893.76, "end": 5896.96, "text": " Otherwise, we're going to get another seek.", "tokens": [50364, 10328, 11, 321, 434, 516, 281, 483, 1071, 8075, 13, 50524], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1207, "seek": 589376, "start": 5896.96, "end": 5900.280000000001, "text": " This is an extremely abstract way to talk about lists.", "tokens": [50524, 639, 307, 364, 4664, 12649, 636, 281, 751, 466, 14511, 13, 50690], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1208, "seek": 589376, "start": 5900.280000000001, "end": 5904.4800000000005, "text": " But the advantage over common Lisp and scheme lists is they", "tokens": [50690, 583, 264, 5002, 670, 2689, 441, 7631, 293, 12232, 14511, 307, 436, 50900], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1209, "seek": 589376, "start": 5904.4800000000005, "end": 5907.84, "text": " would promise that the return value of this thing is a", "tokens": [50900, 576, 6228, 300, 264, 2736, 2158, 295, 341, 551, 307, 257, 51068], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1210, "seek": 589376, "start": 5907.84, "end": 5909.320000000001, "text": " consel.", "tokens": [51068, 416, 790, 13, 51142], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1211, "seek": 589376, "start": 5909.320000000001, "end": 5914.04, "text": " And that is a real limitation, because now I can make", "tokens": [51142, 400, 300, 307, 257, 957, 27432, 11, 570, 586, 286, 393, 652, 51378], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1212, "seek": 589376, "start": 5914.04, "end": 5916.360000000001, "text": " seek work on absolutely everything.", "tokens": [51378, 8075, 589, 322, 3122, 1203, 13, 51494], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1213, "seek": 589376, "start": 5916.360000000001, "end": 5919.4800000000005, "text": " Seek works on lists, because they have the structure.", "tokens": [51494, 1100, 916, 1985, 322, 14511, 11, 570, 436, 362, 264, 3877, 13, 51650], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1214, "seek": 589376, "start": 5919.4800000000005, "end": 5922.64, "text": " But it's possible to create a seek object if you think about", "tokens": [51650, 583, 309, 311, 1944, 281, 1884, 257, 8075, 2657, 498, 291, 519, 466, 51808], "temperature": 0.0, "avg_logprob": -0.1788348458030007, "compression_ratio": 1.6197718631178708, "no_speech_prob": 0.0004103605169802904}, {"id": 1215, "seek": 592264, "start": 5922.64, "end": 5925.240000000001, "text": " iterators, and I want to make this analogy extremely", "tokens": [50364, 17138, 3391, 11, 293, 286, 528, 281, 652, 341, 21663, 4664, 50494], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1216, "seek": 592264, "start": 5925.240000000001, "end": 5926.96, "text": " weakly.", "tokens": [50494, 5336, 356, 13, 50580], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1217, "seek": 592264, "start": 5926.96, "end": 5929.4800000000005, "text": " There's a way to walk through a vector.", "tokens": [50580, 821, 311, 257, 636, 281, 1792, 807, 257, 8062, 13, 50706], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1218, "seek": 592264, "start": 5929.4800000000005, "end": 5931.88, "text": " Similarly, there's a way to walk through a map.", "tokens": [50706, 13157, 11, 456, 311, 257, 636, 281, 1792, 807, 257, 4471, 13, 50826], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1219, "seek": 592264, "start": 5931.88, "end": 5933.8, "text": " There's a way to walk through a string.", "tokens": [50826, 821, 311, 257, 636, 281, 1792, 807, 257, 6798, 13, 50922], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1220, "seek": 592264, "start": 5933.8, "end": 5935.280000000001, "text": " There's a way to walk through a file.", "tokens": [50922, 821, 311, 257, 636, 281, 1792, 807, 257, 3991, 13, 50996], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1221, "seek": 592264, "start": 5937.92, "end": 5940.6, "text": " And it ends up that seek is supported on all those things.", "tokens": [51128, 400, 309, 5314, 493, 300, 8075, 307, 8104, 322, 439, 729, 721, 13, 51262], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1222, "seek": 592264, "start": 5940.6, "end": 5943.04, "text": " You can walk through Java arrays, all the closure", "tokens": [51262, 509, 393, 1792, 807, 10745, 41011, 11, 439, 264, 24653, 51384], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1223, "seek": 592264, "start": 5943.04, "end": 5946.68, "text": " collections, strings, files, everything.", "tokens": [51384, 16641, 11, 13985, 11, 7098, 11, 1203, 13, 51566], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1224, "seek": 592264, "start": 5946.68, "end": 5950.68, "text": " And you can use these two operations to move around.", "tokens": [51566, 400, 291, 393, 764, 613, 732, 7705, 281, 1286, 926, 13, 51766], "temperature": 0.0, "avg_logprob": -0.13844590187072753, "compression_ratio": 1.9324324324324325, "no_speech_prob": 0.0030728543642908335}, {"id": 1225, "seek": 595068, "start": 5950.72, "end": 5955.68, "text": " This abstraction of listness, which I call a sequence", "tokens": [50366, 639, 37765, 295, 1329, 1287, 11, 597, 286, 818, 257, 8310, 50614], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1226, "seek": 595068, "start": 5955.68, "end": 5959.240000000001, "text": " because a list is more of a concrete thing, is bound to", "tokens": [50614, 570, 257, 1329, 307, 544, 295, 257, 9859, 551, 11, 307, 5472, 281, 50792], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1227, "seek": 595068, "start": 5959.240000000001, "end": 5962.04, "text": " lists in most Lisp's.", "tokens": [50792, 14511, 294, 881, 441, 7631, 311, 13, 50932], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1228, "seek": 595068, "start": 5962.04, "end": 5965.200000000001, "text": " Wow, this is hard to say.", "tokens": [50932, 3153, 11, 341, 307, 1152, 281, 584, 13, 51090], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1229, "seek": 595068, "start": 5965.200000000001, "end": 5967.16, "text": " But it's not in closure.", "tokens": [51090, 583, 309, 311, 406, 294, 24653, 13, 51188], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1230, "seek": 595068, "start": 5967.16, "end": 5972.84, "text": " And it's, I think, one advance of closure in the Lisp world,", "tokens": [51188, 400, 309, 311, 11, 286, 519, 11, 472, 7295, 295, 24653, 294, 264, 441, 7631, 1002, 11, 51472], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1231, "seek": 595068, "start": 5972.84, "end": 5974.72, "text": " which means that you can apply these things to everything.", "tokens": [51472, 597, 1355, 300, 291, 393, 3079, 613, 721, 281, 1203, 13, 51566], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1232, "seek": 595068, "start": 5974.72, "end": 5975.56, "text": " So what does this mean?", "tokens": [51566, 407, 437, 775, 341, 914, 30, 51608], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1233, "seek": 595068, "start": 5975.56, "end": 5976.56, "text": " Well, this is kind of primitive.", "tokens": [51608, 1042, 11, 341, 307, 733, 295, 28540, 13, 51658], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1234, "seek": 595068, "start": 5976.56, "end": 5979.04, "text": " I mean, walking through step by step.", "tokens": [51658, 286, 914, 11, 4494, 807, 1823, 538, 1823, 13, 51782], "temperature": 0.0, "avg_logprob": -0.19599406458750493, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.00045762694207951427}, {"id": 1235, "seek": 597904, "start": 5979.04, "end": 5982.4, "text": " But what it means is that you can build a library on top", "tokens": [50364, 583, 437, 309, 1355, 307, 300, 291, 393, 1322, 257, 6405, 322, 1192, 50532], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1236, "seek": 597904, "start": 5982.4, "end": 5985.56, "text": " of these primitives that provides a lot of power for", "tokens": [50532, 295, 613, 2886, 38970, 300, 6417, 257, 688, 295, 1347, 337, 50690], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1237, "seek": 597904, "start": 5985.56, "end": 5987.96, "text": " manipulating data structures without loops.", "tokens": [50690, 40805, 1412, 9227, 1553, 16121, 13, 50810], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1238, "seek": 597904, "start": 5987.96, "end": 5990.84, "text": " I'm just going to show you a tiny, tiny little bit.", "tokens": [50810, 286, 478, 445, 516, 281, 855, 291, 257, 5870, 11, 5870, 707, 857, 13, 50954], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1239, "seek": 597904, "start": 5990.84, "end": 5992.96, "text": " But it should give you a feel for what it's like to program", "tokens": [50954, 583, 309, 820, 976, 291, 257, 841, 337, 437, 309, 311, 411, 281, 1461, 51060], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1240, "seek": 597904, "start": 5992.96, "end": 5996.0, "text": " in closure if you would think about what it would take to", "tokens": [51060, 294, 24653, 498, 291, 576, 519, 466, 437, 309, 576, 747, 281, 51212], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1241, "seek": 597904, "start": 5996.0, "end": 5997.04, "text": " do these things in Java.", "tokens": [51212, 360, 613, 721, 294, 10745, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1242, "seek": 597904, "start": 5997.04, "end": 5999.56, "text": " For instance, I have a set of things.", "tokens": [51264, 1171, 5197, 11, 286, 362, 257, 992, 295, 721, 13, 51390], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1243, "seek": 597904, "start": 5999.56, "end": 6003.5199999999995, "text": " I'd like to have everything except the first two things.", "tokens": [51390, 286, 1116, 411, 281, 362, 1203, 3993, 264, 700, 732, 721, 13, 51588], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1244, "seek": 597904, "start": 6003.5199999999995, "end": 6007.32, "text": " We say drop two from whatever the collection is.", "tokens": [51588, 492, 584, 3270, 732, 490, 2035, 264, 5765, 307, 13, 51778], "temperature": 0.0, "avg_logprob": -0.11357437280508188, "compression_ratio": 1.7083333333333333, "no_speech_prob": 8.475524373352528e-05}, {"id": 1245, "seek": 600732, "start": 6007.36, "end": 6009.2, "text": " That happens to be a vector.", "tokens": [50366, 663, 2314, 281, 312, 257, 8062, 13, 50458], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1246, "seek": 600732, "start": 6009.2, "end": 6011.04, "text": " It could have been a list.", "tokens": [50458, 467, 727, 362, 668, 257, 1329, 13, 50550], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1247, "seek": 600732, "start": 6011.04, "end": 6012.799999999999, "text": " It could have been a string.", "tokens": [50550, 467, 727, 362, 668, 257, 6798, 13, 50638], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1248, "seek": 600732, "start": 6012.799999999999, "end": 6015.679999999999, "text": " We'll drop the first two characters.", "tokens": [50638, 492, 603, 3270, 264, 700, 732, 4342, 13, 50782], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1249, "seek": 600732, "start": 6015.679999999999, "end": 6018.759999999999, "text": " Whatever it is, there's a way to abstract out the notion of", "tokens": [50782, 8541, 309, 307, 11, 456, 311, 257, 636, 281, 12649, 484, 264, 10710, 295, 50936], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1250, "seek": 600732, "start": 6018.759999999999, "end": 6019.799999999999, "text": " walking through it.", "tokens": [50936, 4494, 807, 309, 13, 50988], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1251, "seek": 600732, "start": 6019.799999999999, "end": 6024.36, "text": " Drop means leave out that many and give me the rest as a", "tokens": [50988, 17675, 1355, 1856, 484, 300, 867, 293, 976, 385, 264, 1472, 382, 257, 51216], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1252, "seek": 600732, "start": 6024.36, "end": 6026.12, "text": " sequence.", "tokens": [51216, 8310, 13, 51304], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1253, "seek": 600732, "start": 6026.12, "end": 6029.0, "text": " Take is the opposite.", "tokens": [51304, 3664, 307, 264, 6182, 13, 51448], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1254, "seek": 600732, "start": 6029.0, "end": 6031.679999999999, "text": " It says, only give me nine of these things.", "tokens": [51448, 467, 1619, 11, 787, 976, 385, 4949, 295, 613, 721, 13, 51582], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1255, "seek": 600732, "start": 6031.679999999999, "end": 6034.08, "text": " Look at the second function, cycle.", "tokens": [51582, 2053, 412, 264, 1150, 2445, 11, 6586, 13, 51702], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1256, "seek": 600732, "start": 6034.08, "end": 6036.5599999999995, "text": " Cycle is a function called, it takes 1, 2, 3, 4.", "tokens": [51702, 10295, 2160, 307, 257, 2445, 1219, 11, 309, 2516, 502, 11, 568, 11, 805, 11, 1017, 13, 51826], "temperature": 0.0, "avg_logprob": -0.2190460530362388, "compression_ratio": 1.624031007751938, "no_speech_prob": 0.00011406312114559114}, {"id": 1257, "seek": 603656, "start": 6036.56, "end": 6041.120000000001, "text": " In this case, it could take any sequenceable thing.", "tokens": [50364, 682, 341, 1389, 11, 309, 727, 747, 604, 8310, 712, 551, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1258, "seek": 603656, "start": 6041.120000000001, "end": 6047.320000000001, "text": " It returns an infinite list, an infinite sequence of those", "tokens": [50592, 467, 11247, 364, 13785, 1329, 11, 364, 13785, 8310, 295, 729, 50902], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1259, "seek": 603656, "start": 6047.320000000001, "end": 6050.4800000000005, "text": " things around and around in a cycle.", "tokens": [50902, 721, 926, 293, 926, 294, 257, 6586, 13, 51060], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1260, "seek": 603656, "start": 6050.4800000000005, "end": 6051.88, "text": " How could it do that?", "tokens": [51060, 1012, 727, 309, 360, 300, 30, 51130], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1261, "seek": 603656, "start": 6051.88, "end": 6053.76, "text": " Isn't that going to chew up all the memory of my machine?", "tokens": [51130, 6998, 380, 300, 516, 281, 21200, 493, 439, 264, 4675, 295, 452, 3479, 30, 51224], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1262, "seek": 603656, "start": 6053.76, "end": 6056.96, "text": " Cycle sounds like a really scary function.", "tokens": [51224, 10295, 2160, 3263, 411, 257, 534, 6958, 2445, 13, 51384], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1263, "seek": 603656, "start": 6056.96, "end": 6061.4800000000005, "text": " It does that because if we go back to the definition of", "tokens": [51384, 467, 775, 300, 570, 498, 321, 352, 646, 281, 264, 7123, 295, 51610], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1264, "seek": 603656, "start": 6061.4800000000005, "end": 6064.080000000001, "text": " this, is there anything about the way I describe the", "tokens": [51610, 341, 11, 307, 456, 1340, 466, 264, 636, 286, 6786, 264, 51740], "temperature": 0.0, "avg_logprob": -0.1673584739760597, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0002651012619026005}, {"id": 1265, "seek": 606408, "start": 6064.08, "end": 6066.44, "text": " operation of these things that says that the rest of this", "tokens": [50364, 6916, 295, 613, 721, 300, 1619, 300, 264, 1472, 295, 341, 50482], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1266, "seek": 606408, "start": 6066.44, "end": 6069.44, "text": " thing has to exist?", "tokens": [50482, 551, 575, 281, 2514, 30, 50632], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1267, "seek": 606408, "start": 6069.44, "end": 6072.5199999999995, "text": " I could make up the rest right when you ask me, right?", "tokens": [50632, 286, 727, 652, 493, 264, 1472, 558, 562, 291, 1029, 385, 11, 558, 30, 50786], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1268, "seek": 606408, "start": 6072.5199999999995, "end": 6075.5599999999995, "text": " And how much of it would I have to make up?", "tokens": [50786, 400, 577, 709, 295, 309, 576, 286, 362, 281, 652, 493, 30, 50938], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1269, "seek": 606408, "start": 6075.5599999999995, "end": 6076.84, "text": " Just one more thing.", "tokens": [50938, 1449, 472, 544, 551, 13, 51002], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1270, "seek": 606408, "start": 6076.84, "end": 6079.2, "text": " The thing I give you has to have one more thing in it, and", "tokens": [51002, 440, 551, 286, 976, 291, 575, 281, 362, 472, 544, 551, 294, 309, 11, 293, 51120], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1271, "seek": 606408, "start": 6079.2, "end": 6080.5599999999995, "text": " it's I'm OK.", "tokens": [51120, 309, 311, 286, 478, 2264, 13, 51188], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1272, "seek": 606408, "start": 6080.5599999999995, "end": 6084.84, "text": " It could delay the calculation of the next part until the", "tokens": [51188, 467, 727, 8577, 264, 17108, 295, 264, 958, 644, 1826, 264, 51402], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1273, "seek": 606408, "start": 6084.84, "end": 6087.12, "text": " next time you call rest.", "tokens": [51402, 958, 565, 291, 818, 1472, 13, 51516], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1274, "seek": 606408, "start": 6087.12, "end": 6088.76, "text": " That's called laziness.", "tokens": [51516, 663, 311, 1219, 19320, 1324, 13, 51598], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1275, "seek": 606408, "start": 6088.76, "end": 6092.0, "text": " And in fact, all the sequence stuff I'm showing you for", "tokens": [51598, 400, 294, 1186, 11, 439, 264, 8310, 1507, 286, 478, 4099, 291, 337, 51760], "temperature": 0.0, "avg_logprob": -0.16714054346084595, "compression_ratio": 1.7489878542510122, "no_speech_prob": 0.01300631184130907}, {"id": 1276, "seek": 609200, "start": 6092.0, "end": 6097.8, "text": " closure is lazy, which means that you can write sequence", "tokens": [50364, 24653, 307, 14847, 11, 597, 1355, 300, 291, 393, 2464, 8310, 50654], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1277, "seek": 609200, "start": 6097.8, "end": 6100.12, "text": " functions that return infinite sets.", "tokens": [50654, 6828, 300, 2736, 13785, 6352, 13, 50770], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1278, "seek": 609200, "start": 6100.12, "end": 6102.16, "text": " And you can use them, as long as you don't try to consume", "tokens": [50770, 400, 291, 393, 764, 552, 11, 382, 938, 382, 291, 500, 380, 853, 281, 14732, 50872], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1279, "seek": 609200, "start": 6102.16, "end": 6104.64, "text": " all of them, you can consume a little bit of them.", "tokens": [50872, 439, 295, 552, 11, 291, 393, 14732, 257, 707, 857, 295, 552, 13, 50996], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1280, "seek": 609200, "start": 6104.64, "end": 6107.32, "text": " So in this case, we're making an infinite sequence out of", "tokens": [50996, 407, 294, 341, 1389, 11, 321, 434, 1455, 364, 13785, 8310, 484, 295, 51130], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1281, "seek": 609200, "start": 6107.32, "end": 6112.56, "text": " 1, 2, 3, 4, or taking the first nine things from it.", "tokens": [51130, 502, 11, 568, 11, 805, 11, 1017, 11, 420, 1940, 264, 700, 4949, 721, 490, 309, 13, 51392], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1282, "seek": 609200, "start": 6112.56, "end": 6115.44, "text": " This looks like a weird abstract thing, but I've had", "tokens": [51392, 639, 1542, 411, 257, 3657, 12649, 551, 11, 457, 286, 600, 632, 51536], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1283, "seek": 609200, "start": 6115.44, "end": 6116.88, "text": " plenty of programs in reality.", "tokens": [51536, 7140, 295, 4268, 294, 4103, 13, 51608], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1284, "seek": 609200, "start": 6116.88, "end": 6119.6, "text": " I've had to do exactly this thing, round robin.", "tokens": [51608, 286, 600, 632, 281, 360, 2293, 341, 551, 11, 3098, 3870, 259, 13, 51744], "temperature": 0.0, "avg_logprob": -0.15954161447191995, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0015217586187645793}, {"id": 1285, "seek": 611960, "start": 6119.6, "end": 6122.4400000000005, "text": " You can use it to round robin, work dispersal.", "tokens": [50364, 509, 393, 764, 309, 281, 3098, 3870, 259, 11, 589, 24631, 304, 13, 50506], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1286, "seek": 611960, "start": 6122.4400000000005, "end": 6125.88, "text": " You can use it to get distributions.", "tokens": [50506, 509, 393, 764, 309, 281, 483, 37870, 13, 50678], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1287, "seek": 611960, "start": 6125.88, "end": 6128.400000000001, "text": " In cycle, it seems like some theoretical isn't as cool you", "tokens": [50678, 682, 6586, 11, 309, 2544, 411, 512, 20864, 1943, 380, 382, 1627, 291, 50804], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1288, "seek": 611960, "start": 6128.400000000001, "end": 6129.92, "text": " can make an infinite sequence.", "tokens": [50804, 393, 652, 364, 13785, 8310, 13, 50880], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1289, "seek": 611960, "start": 6129.92, "end": 6131.64, "text": " But it really has utility.", "tokens": [50880, 583, 309, 534, 575, 14877, 13, 50966], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1290, "seek": 611960, "start": 6131.64, "end": 6134.360000000001, "text": " It ends up in real programs.", "tokens": [50966, 467, 5314, 493, 294, 957, 4268, 13, 51102], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1291, "seek": 611960, "start": 6134.360000000001, "end": 6135.360000000001, "text": " And it goes on and on.", "tokens": [51102, 400, 309, 1709, 322, 293, 322, 13, 51152], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1292, "seek": 611960, "start": 6135.360000000001, "end": 6136.64, "text": " Interleave does what you think.", "tokens": [51152, 5751, 306, 946, 775, 437, 291, 519, 13, 51216], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1293, "seek": 611960, "start": 6136.64, "end": 6138.4400000000005, "text": " One from this sequence, one from that.", "tokens": [51216, 1485, 490, 341, 8310, 11, 472, 490, 300, 13, 51306], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1294, "seek": 611960, "start": 6138.4400000000005, "end": 6139.8, "text": " Makes a new sequence.", "tokens": [51306, 25245, 257, 777, 8310, 13, 51374], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1295, "seek": 611960, "start": 6139.8, "end": 6143.320000000001, "text": " Again, one of these could be infinite.", "tokens": [51374, 3764, 11, 472, 295, 613, 727, 312, 13785, 13, 51550], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1296, "seek": 611960, "start": 6143.320000000001, "end": 6145.4400000000005, "text": " You'd only make as much of this as you needed to match the", "tokens": [51550, 509, 1116, 787, 652, 382, 709, 295, 341, 382, 291, 2978, 281, 2995, 264, 51656], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1297, "seek": 611960, "start": 6145.4400000000005, "end": 6148.88, "text": " length of the non-infinite one.", "tokens": [51656, 4641, 295, 264, 2107, 12, 259, 5194, 642, 472, 13, 51828], "temperature": 0.0, "avg_logprob": -0.14393897156615357, "compression_ratio": 1.7148014440433212, "no_speech_prob": 0.000999045092612505}, {"id": 1298, "seek": 614888, "start": 6148.88, "end": 6151.4400000000005, "text": " Partition, split this up into pieces.", "tokens": [50364, 4100, 849, 11, 7472, 341, 493, 666, 3755, 13, 50492], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1299, "seek": 614888, "start": 6151.4400000000005, "end": 6154.36, "text": " Think about the loops to do this stuff.", "tokens": [50492, 6557, 466, 264, 16121, 281, 360, 341, 1507, 13, 50638], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1300, "seek": 614888, "start": 6154.36, "end": 6157.400000000001, "text": " And in Java, you have to write everyone, every time.", "tokens": [50638, 400, 294, 10745, 11, 291, 362, 281, 2464, 1518, 11, 633, 565, 13, 50790], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1301, "seek": 614888, "start": 6161.6, "end": 6163.6, "text": " Never mind the laziness part.", "tokens": [51000, 7344, 1575, 264, 19320, 1324, 644, 13, 51100], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1302, "seek": 614888, "start": 6163.6, "end": 6166.28, "text": " Now we get to a more interesting function, which is map.", "tokens": [51100, 823, 321, 483, 281, 257, 544, 1880, 2445, 11, 597, 307, 4471, 13, 51234], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1303, "seek": 614888, "start": 6166.28, "end": 6168.76, "text": " Now we're not talking about map the data structure.", "tokens": [51234, 823, 321, 434, 406, 1417, 466, 4471, 264, 1412, 3877, 13, 51358], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1304, "seek": 614888, "start": 6168.76, "end": 6173.32, "text": " We're talking about map a function, which is, again, from", "tokens": [51358, 492, 434, 1417, 466, 4471, 257, 2445, 11, 597, 307, 11, 797, 11, 490, 51586], "temperature": 0.0, "avg_logprob": -0.1604703716609789, "compression_ratio": 1.626865671641791, "no_speech_prob": 0.00035682760062627494}, {"id": 1305, "seek": 617332, "start": 6173.32, "end": 6178.92, "text": " this list land, which says, take this function.", "tokens": [50364, 341, 1329, 2117, 11, 597, 1619, 11, 747, 341, 2445, 13, 50644], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1306, "seek": 617332, "start": 6178.92, "end": 6182.88, "text": " So the first argument of map is a function value.", "tokens": [50644, 407, 264, 700, 6770, 295, 4471, 307, 257, 2445, 2158, 13, 50842], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1307, "seek": 617332, "start": 6182.88, "end": 6189.28, "text": " And apply it to pairwise, or however many sequences I give", "tokens": [50842, 400, 3079, 309, 281, 6119, 3711, 11, 420, 4461, 867, 22978, 286, 976, 51162], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1308, "seek": 617332, "start": 6189.28, "end": 6192.12, "text": " you, the elements of the sequences I provide.", "tokens": [51162, 291, 11, 264, 4959, 295, 264, 22978, 286, 2893, 13, 51304], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1309, "seek": 617332, "start": 6192.12, "end": 6194.719999999999, "text": " So in this case, we're going to call the function vector.", "tokens": [51304, 407, 294, 341, 1389, 11, 321, 434, 516, 281, 818, 264, 2445, 8062, 13, 51434], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1310, "seek": 617332, "start": 6194.719999999999, "end": 6198.12, "text": " And we're going to call it on a and one.", "tokens": [51434, 400, 321, 434, 516, 281, 818, 309, 322, 257, 293, 472, 13, 51604], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1311, "seek": 617332, "start": 6198.12, "end": 6202.08, "text": " Then we're going to call it on b and two, and c and three,", "tokens": [51604, 1396, 321, 434, 516, 281, 818, 309, 322, 272, 293, 732, 11, 293, 269, 293, 1045, 11, 51802], "temperature": 0.0, "avg_logprob": -0.24108413549569938, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.00590580515563488}, {"id": 1312, "seek": 620208, "start": 6202.08, "end": 6204.32, "text": " and d and four, and e and five.", "tokens": [50364, 293, 274, 293, 1451, 11, 293, 308, 293, 1732, 13, 50476], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1313, "seek": 620208, "start": 6204.32, "end": 6207.5599999999995, "text": " And vector makes vectors out of whatever you pass it.", "tokens": [50476, 400, 8062, 1669, 18875, 484, 295, 2035, 291, 1320, 309, 13, 50638], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1314, "seek": 620208, "start": 6207.5599999999995, "end": 6211.5199999999995, "text": " So we're mapping vector across this pair of sequences to", "tokens": [50638, 407, 321, 434, 18350, 8062, 2108, 341, 6119, 295, 22978, 281, 50836], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1315, "seek": 620208, "start": 6211.5199999999995, "end": 6215.44, "text": " vectorize corresponding elements of those sequences.", "tokens": [50836, 8062, 1125, 11760, 4959, 295, 729, 22978, 13, 51032], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1316, "seek": 620208, "start": 6215.44, "end": 6219.36, "text": " We get a set of data structures back out of this.", "tokens": [51032, 492, 483, 257, 992, 295, 1412, 9227, 646, 484, 295, 341, 13, 51228], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1317, "seek": 620208, "start": 6219.36, "end": 6221.08, "text": " So map is a very powerful thing.", "tokens": [51228, 407, 4471, 307, 257, 588, 4005, 551, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1318, "seek": 620208, "start": 6221.08, "end": 6223.8, "text": " Instead of saying, for each blah, blah, blah, do this and", "tokens": [51314, 7156, 295, 1566, 11, 337, 1184, 12288, 11, 12288, 11, 12288, 11, 360, 341, 293, 51450], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1319, "seek": 620208, "start": 6223.8, "end": 6226.72, "text": " stick the answer into this collection, you say, just map", "tokens": [51450, 2897, 264, 1867, 666, 341, 5765, 11, 291, 584, 11, 445, 4471, 51596], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1320, "seek": 620208, "start": 6226.72, "end": 6228.32, "text": " this function across this data.", "tokens": [51596, 341, 2445, 2108, 341, 1412, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1321, "seek": 620208, "start": 6228.32, "end": 6231.36, "text": " And it'll give you back a set of new data, the result of", "tokens": [51676, 400, 309, 603, 976, 291, 646, 257, 992, 295, 777, 1412, 11, 264, 1874, 295, 51828], "temperature": 0.0, "avg_logprob": -0.1703883537879357, "compression_ratio": 1.7785977859778597, "no_speech_prob": 0.00039805128471925855}, {"id": 1322, "seek": 623136, "start": 6231.36, "end": 6233.4, "text": " applying that function to each thing.", "tokens": [50364, 9275, 300, 2445, 281, 1184, 551, 13, 50466], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1323, "seek": 623136, "start": 6233.4, "end": 6235.4, "text": " You can also apply it against multiple sequences.", "tokens": [50466, 509, 393, 611, 3079, 309, 1970, 3866, 22978, 13, 50566], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1324, "seek": 623136, "start": 6235.4, "end": 6236.24, "text": " That's what this is doing.", "tokens": [50566, 663, 311, 437, 341, 307, 884, 13, 50608], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1325, "seek": 623136, "start": 6236.24, "end": 6240.08, "text": " Maybe I shouldn't have done something this complex here.", "tokens": [50608, 2704, 286, 4659, 380, 362, 1096, 746, 341, 3997, 510, 13, 50800], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1326, "seek": 623136, "start": 6240.08, "end": 6243.759999999999, "text": " Apply is also very interesting, and it's a unique thing to", "tokens": [50800, 25264, 307, 611, 588, 1880, 11, 293, 309, 311, 257, 3845, 551, 281, 50984], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1327, "seek": 623136, "start": 6243.759999999999, "end": 6247.599999999999, "text": " lists and languages that are dynamic.", "tokens": [50984, 14511, 293, 8650, 300, 366, 8546, 13, 51176], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1328, "seek": 623136, "start": 6247.599999999999, "end": 6250.08, "text": " Apply says, I'm also going to pass you a function.", "tokens": [51176, 25264, 1619, 11, 286, 478, 611, 516, 281, 1320, 291, 257, 2445, 13, 51300], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1329, "seek": 623136, "start": 6250.08, "end": 6253.799999999999, "text": " What I want you to do is take the next expression and figure", "tokens": [51300, 708, 286, 528, 291, 281, 360, 307, 747, 264, 958, 6114, 293, 2573, 51486], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1330, "seek": 623136, "start": 6253.799999999999, "end": 6258.54, "text": " out the sequence it yields, and then use that as the", "tokens": [51486, 484, 264, 8310, 309, 32168, 11, 293, 550, 764, 300, 382, 264, 51723], "temperature": 0.0, "avg_logprob": -0.17965917927878244, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.0009996526641771197}, {"id": 1331, "seek": 625854, "start": 6258.54, "end": 6261.86, "text": " arguments to a call to this function.", "tokens": [50364, 12869, 281, 257, 818, 281, 341, 2445, 13, 50530], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1332, "seek": 625854, "start": 6261.86, "end": 6264.7, "text": " So we're going to apply the function stir, and stir says,", "tokens": [50530, 407, 321, 434, 516, 281, 3079, 264, 2445, 8946, 11, 293, 8946, 1619, 11, 50672], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1333, "seek": 625854, "start": 6264.7, "end": 6268.18, "text": " given any set of things, turn it into a string.", "tokens": [50672, 2212, 604, 992, 295, 721, 11, 1261, 309, 666, 257, 6798, 13, 50846], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1334, "seek": 625854, "start": 6268.18, "end": 6270.86, "text": " Turn each part into a string, and can cat and make them all", "tokens": [50846, 7956, 1184, 644, 666, 257, 6798, 11, 293, 393, 3857, 293, 652, 552, 439, 50980], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1335, "seek": 625854, "start": 6270.86, "end": 6273.5, "text": " back together into a string.", "tokens": [50980, 646, 1214, 666, 257, 6798, 13, 51112], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1336, "seek": 625854, "start": 6273.5, "end": 6275.58, "text": " So we want to put that together, and what interpose", "tokens": [51112, 407, 321, 528, 281, 829, 300, 1214, 11, 293, 437, 728, 43501, 51216], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1337, "seek": 625854, "start": 6275.58, "end": 6278.5, "text": " does is it says, take this thing and put it in between", "tokens": [51216, 775, 307, 309, 1619, 11, 747, 341, 551, 293, 829, 309, 294, 1296, 51362], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1338, "seek": 625854, "start": 6278.5, "end": 6279.82, "text": " everything in this sequence.", "tokens": [51362, 1203, 294, 341, 8310, 13, 51428], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1339, "seek": 625854, "start": 6279.82, "end": 6286.0199999999995, "text": " So interpose, comma, ASDF, turn ASDF into a sequence, and", "tokens": [51428, 407, 728, 43501, 11, 22117, 11, 7469, 35, 37, 11, 1261, 7469, 35, 37, 666, 257, 8310, 11, 293, 51738], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1340, "seek": 625854, "start": 6286.0199999999995, "end": 6287.78, "text": " return characters.", "tokens": [51738, 2736, 4342, 13, 51826], "temperature": 0.0, "avg_logprob": -0.256798654794693, "compression_ratio": 1.8464730290456433, "no_speech_prob": 0.007337832823395729}, {"id": 1341, "seek": 628778, "start": 6287.78, "end": 6291.3, "text": " So we're going to have the character A and a comma, S", "tokens": [50364, 407, 321, 434, 516, 281, 362, 264, 2517, 316, 293, 257, 22117, 11, 318, 50540], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1342, "seek": 628778, "start": 6291.3, "end": 6296.099999999999, "text": " and a comma, D and a comma, F and a comma.", "tokens": [50540, 293, 257, 22117, 11, 413, 293, 257, 22117, 11, 479, 293, 257, 22117, 13, 50780], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1343, "seek": 628778, "start": 6296.099999999999, "end": 6297.78, "text": " Seven things.", "tokens": [50780, 14868, 721, 13, 50864], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1344, "seek": 628778, "start": 6297.78, "end": 6298.62, "text": " Yes?", "tokens": [50864, 1079, 30, 50906], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1345, "seek": 628778, "start": 6298.62, "end": 6300.139999999999, "text": " Three-four things with three things in two.", "tokens": [50906, 6244, 12, 23251, 721, 365, 1045, 721, 294, 732, 13, 50982], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1346, "seek": 628778, "start": 6300.139999999999, "end": 6300.78, "text": " Seven things.", "tokens": [50982, 14868, 721, 13, 51014], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1347, "seek": 628778, "start": 6300.78, "end": 6304.139999999999, "text": " And we say, apply stir to that, which means", "tokens": [51014, 400, 321, 584, 11, 3079, 8946, 281, 300, 11, 597, 1355, 51182], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1348, "seek": 628778, "start": 6304.139999999999, "end": 6305.7, "text": " string can cat and make them.", "tokens": [51182, 6798, 393, 3857, 293, 652, 552, 13, 51260], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1349, "seek": 628778, "start": 6305.7, "end": 6307.82, "text": " As if they were the arguments to stir.", "tokens": [51260, 1018, 498, 436, 645, 264, 12869, 281, 8946, 13, 51366], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1350, "seek": 628778, "start": 6307.82, "end": 6313.259999999999, "text": " In other words, if I called stir and said stir, A comma,", "tokens": [51366, 682, 661, 2283, 11, 498, 286, 1219, 8946, 293, 848, 8946, 11, 316, 22117, 11, 51638], "temperature": 0.0, "avg_logprob": -0.31924448880282313, "compression_ratio": 1.673170731707317, "no_speech_prob": 0.00044374741264618933}, {"id": 1351, "seek": 631326, "start": 6313.26, "end": 6317.820000000001, "text": " S comma, D comma, F, it would make a string out of them.", "tokens": [50364, 318, 22117, 11, 413, 22117, 11, 479, 11, 309, 576, 652, 257, 6798, 484, 295, 552, 13, 50592], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1352, "seek": 631326, "start": 6317.820000000001, "end": 6321.18, "text": " Well, I can just apply it to the sequence, as if I called it", "tokens": [50592, 1042, 11, 286, 393, 445, 3079, 309, 281, 264, 8310, 11, 382, 498, 286, 1219, 309, 50760], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1353, "seek": 631326, "start": 6321.18, "end": 6325.62, "text": " with those arguments, and it will do the job.", "tokens": [50760, 365, 729, 12869, 11, 293, 309, 486, 360, 264, 1691, 13, 50982], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1354, "seek": 631326, "start": 6325.62, "end": 6327.62, "text": " I get back a single string with that in between.", "tokens": [50982, 286, 483, 646, 257, 2167, 6798, 365, 300, 294, 1296, 13, 51082], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1355, "seek": 631326, "start": 6330.3, "end": 6332.74, "text": " Again, if you don't quite get these, it's OK.", "tokens": [51216, 3764, 11, 498, 291, 500, 380, 1596, 483, 613, 11, 309, 311, 2264, 13, 51338], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1356, "seek": 631326, "start": 6332.74, "end": 6334.3, "text": " I'm just trying to show you the power and the", "tokens": [51338, 286, 478, 445, 1382, 281, 855, 291, 264, 1347, 293, 264, 51416], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1357, "seek": 631326, "start": 6334.3, "end": 6335.58, "text": " succinctness of this.", "tokens": [51416, 21578, 5460, 1287, 295, 341, 13, 51480], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1358, "seek": 631326, "start": 6335.58, "end": 6338.66, "text": " Reduces another function that takes a function.", "tokens": [51480, 4477, 84, 887, 1071, 2445, 300, 2516, 257, 2445, 13, 51634], "temperature": 0.0, "avg_logprob": -0.16940458197342723, "compression_ratio": 1.5847457627118644, "no_speech_prob": 0.003319804323837161}, {"id": 1359, "seek": 633866, "start": 6338.66, "end": 6343.7, "text": " It says, apply this function to successive pairs of the", "tokens": [50364, 467, 1619, 11, 3079, 341, 2445, 281, 48043, 15494, 295, 264, 50616], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1360, "seek": 633866, "start": 6343.7, "end": 6347.3, "text": " sequence you're given, taking the result of each application", "tokens": [50616, 8310, 291, 434, 2212, 11, 1940, 264, 1874, 295, 1184, 3861, 50796], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1361, "seek": 633866, "start": 6347.3, "end": 6349.82, "text": " and using it as the first argument of the next.", "tokens": [50796, 293, 1228, 309, 382, 264, 700, 6770, 295, 264, 958, 13, 50922], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1362, "seek": 633866, "start": 6349.82, "end": 6353.86, "text": " So if you say, reduce with plus, you're going to get the", "tokens": [50922, 407, 498, 291, 584, 11, 5407, 365, 1804, 11, 291, 434, 516, 281, 483, 264, 51124], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1363, "seek": 633866, "start": 6353.86, "end": 6355.62, "text": " first two things plus each other.", "tokens": [51124, 700, 732, 721, 1804, 1184, 661, 13, 51212], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1364, "seek": 633866, "start": 6355.62, "end": 6358.58, "text": " And then take that and do that plus the next thing.", "tokens": [51212, 400, 550, 747, 300, 293, 360, 300, 1804, 264, 958, 551, 13, 51360], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1365, "seek": 633866, "start": 6358.58, "end": 6360.78, "text": " And take that and do that plus the next thing.", "tokens": [51360, 400, 747, 300, 293, 360, 300, 1804, 264, 958, 551, 13, 51470], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1366, "seek": 633866, "start": 6360.78, "end": 6362.34, "text": " That's what reduce does.", "tokens": [51470, 663, 311, 437, 5407, 775, 13, 51548], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1367, "seek": 633866, "start": 6362.34, "end": 6367.82, "text": " So this effectively is summing this range.", "tokens": [51548, 407, 341, 8659, 307, 2408, 2810, 341, 3613, 13, 51822], "temperature": 0.0, "avg_logprob": -0.11136492163734099, "compression_ratio": 1.8672566371681416, "no_speech_prob": 0.00022306146274786443}, {"id": 1368, "seek": 636782, "start": 6368.78, "end": 6371.78, "text": " It's a function that returns a sequence of numbers.", "tokens": [50412, 467, 311, 257, 2445, 300, 11247, 257, 8310, 295, 3547, 13, 50562], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1369, "seek": 636782, "start": 6371.78, "end": 6378.54, "text": " And you can step where it starts and where it ends and how", "tokens": [50562, 400, 291, 393, 1823, 689, 309, 3719, 293, 689, 309, 5314, 293, 577, 50900], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1370, "seek": 636782, "start": 6378.54, "end": 6381.099999999999, "text": " it steps and things like that.", "tokens": [50900, 309, 4439, 293, 721, 411, 300, 13, 51028], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1371, "seek": 636782, "start": 6381.099999999999, "end": 6384.58, "text": " This is obviously a much higher level way to write", "tokens": [51028, 639, 307, 2745, 257, 709, 2946, 1496, 636, 281, 2464, 51202], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1372, "seek": 636782, "start": 6384.58, "end": 6387.58, "text": " programs than you do in Java.", "tokens": [51202, 4268, 813, 291, 360, 294, 10745, 13, 51352], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1373, "seek": 636782, "start": 6387.58, "end": 6388.38, "text": " Yes?", "tokens": [51352, 1079, 30, 51392], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1374, "seek": 636782, "start": 6388.38, "end": 6389.7, "text": " No?", "tokens": [51392, 883, 30, 51458], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1375, "seek": 636782, "start": 6389.7, "end": 6390.74, "text": " Your head hurts.", "tokens": [51458, 2260, 1378, 11051, 13, 51510], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1376, "seek": 636782, "start": 6390.74, "end": 6393.42, "text": " I don't know what it's going to be.", "tokens": [51510, 286, 500, 380, 458, 437, 309, 311, 516, 281, 312, 13, 51644], "temperature": 0.0, "avg_logprob": -0.3442735343143858, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.0005689766258001328}, {"id": 1377, "seek": 639342, "start": 6394.38, "end": 6396.82, "text": " Yeah, let's take a break.", "tokens": [50412, 865, 11, 718, 311, 747, 257, 1821, 13, 50534], "temperature": 0.0, "avg_logprob": -0.4322542979799468, "compression_ratio": 1.3309859154929577, "no_speech_prob": 0.005810786038637161}, {"id": 1378, "seek": 639342, "start": 6396.82, "end": 6398.06, "text": " This is going to be a good time for a break.", "tokens": [50534, 639, 307, 516, 281, 312, 257, 665, 565, 337, 257, 1821, 13, 50596], "temperature": 0.0, "avg_logprob": -0.4322542979799468, "compression_ratio": 1.3309859154929577, "no_speech_prob": 0.005810786038637161}, {"id": 1379, "seek": 639342, "start": 6398.06, "end": 6400.06, "text": " Does anybody have any questions on this real quick?", "tokens": [50596, 4402, 4472, 362, 604, 1651, 322, 341, 957, 1702, 30, 50696], "temperature": 0.0, "avg_logprob": -0.4322542979799468, "compression_ratio": 1.3309859154929577, "no_speech_prob": 0.005810786038637161}, {"id": 1380, "seek": 639342, "start": 6415.22, "end": 6419.02, "text": " Right, and cycle returns a sequence, which has only got", "tokens": [51454, 1779, 11, 293, 6586, 11247, 257, 8310, 11, 597, 575, 787, 658, 51644], "temperature": 0.0, "avg_logprob": -0.4322542979799468, "compression_ratio": 1.3309859154929577, "no_speech_prob": 0.005810786038637161}, {"id": 1381, "seek": 639342, "start": 6419.02, "end": 6420.38, "text": " one in it.", "tokens": [51644, 472, 294, 309, 13, 51712], "temperature": 0.0, "avg_logprob": -0.4322542979799468, "compression_ratio": 1.3309859154929577, "no_speech_prob": 0.005810786038637161}, {"id": 1382, "seek": 642038, "start": 6420.38, "end": 6423.86, "text": " And the recipe for producing the rest of the cycle.", "tokens": [50364, 400, 264, 6782, 337, 10501, 264, 1472, 295, 264, 6586, 13, 50538], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1383, "seek": 642038, "start": 6423.86, "end": 6425.5, "text": " Sort of like a delayed function.", "tokens": [50538, 26149, 295, 411, 257, 20268, 2445, 13, 50620], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1384, "seek": 642038, "start": 6425.5, "end": 6428.62, "text": " That's what happens inside cycle.", "tokens": [50620, 663, 311, 437, 2314, 1854, 6586, 13, 50776], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1385, "seek": 642038, "start": 6428.62, "end": 6433.1, "text": " It doesn't produce an infinite list, obviously.", "tokens": [50776, 467, 1177, 380, 5258, 364, 13785, 1329, 11, 2745, 13, 51000], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1386, "seek": 642038, "start": 6433.1, "end": 6437.18, "text": " It returns an object that satisfies.", "tokens": [51000, 467, 11247, 364, 2657, 300, 44271, 13, 51204], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1387, "seek": 642038, "start": 6437.18, "end": 6438.5, "text": " It returns a sequence, correct.", "tokens": [51204, 467, 11247, 257, 8310, 11, 3006, 13, 51270], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1388, "seek": 642038, "start": 6446.62, "end": 6449.22, "text": " Why can't you call stirred directly?", "tokens": [51676, 1545, 393, 380, 291, 818, 49409, 3838, 30, 51806], "temperature": 0.0, "avg_logprob": -0.2517802617321276, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0036434398498386145}, {"id": 1389, "seek": 644922, "start": 6449.22, "end": 6454.1, "text": " Well, in this case, well, I'd have to write a comma, s comma,", "tokens": [50364, 1042, 11, 294, 341, 1389, 11, 731, 11, 286, 1116, 362, 281, 2464, 257, 22117, 11, 262, 22117, 11, 50608], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1390, "seek": 644922, "start": 6454.1, "end": 6456.02, "text": " d comma, f comma.", "tokens": [50608, 274, 22117, 11, 283, 22117, 13, 50704], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1391, "seek": 644922, "start": 6456.02, "end": 6456.5, "text": " Right?", "tokens": [50704, 1779, 30, 50728], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1392, "seek": 644922, "start": 6460.5, "end": 6465.26, "text": " Then you're passing stir a sequence.", "tokens": [50928, 1396, 291, 434, 8437, 8946, 257, 8310, 13, 51166], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1393, "seek": 644922, "start": 6465.26, "end": 6468.06, "text": " And what I want to do is say, take that sequence and pretend", "tokens": [51166, 400, 437, 286, 528, 281, 360, 307, 584, 11, 747, 300, 8310, 293, 11865, 51306], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1394, "seek": 644922, "start": 6468.06, "end": 6469.780000000001, "text": " it was the arguments to stir.", "tokens": [51306, 309, 390, 264, 12869, 281, 8946, 13, 51392], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1395, "seek": 644922, "start": 6469.780000000001, "end": 6473.900000000001, "text": " Not an argument to stir, but n arguments to stir.", "tokens": [51392, 1726, 364, 6770, 281, 8946, 11, 457, 297, 12869, 281, 8946, 13, 51598], "temperature": 0.0, "avg_logprob": -0.31789014425622414, "compression_ratio": 1.6, "no_speech_prob": 0.0012429560301825404}, {"id": 1396, "seek": 647922, "start": 6480.18, "end": 6481.780000000001, "text": " Because that's the syntax of closure.", "tokens": [50412, 1436, 300, 311, 264, 28431, 295, 24653, 13, 50492], "temperature": 0.0, "avg_logprob": -0.2318511413315595, "compression_ratio": 1.410071942446043, "no_speech_prob": 0.002750089392066002}, {"id": 1397, "seek": 647922, "start": 6481.780000000001, "end": 6486.26, "text": " Slash comma is a character literal for comma.", "tokens": [50492, 6187, 1299, 22117, 307, 257, 2517, 20411, 337, 22117, 13, 50716], "temperature": 0.0, "avg_logprob": -0.2318511413315595, "compression_ratio": 1.410071942446043, "no_speech_prob": 0.002750089392066002}, {"id": 1398, "seek": 647922, "start": 6486.26, "end": 6488.26, "text": " Quote is used for other things.", "tokens": [50716, 2326, 1370, 307, 1143, 337, 661, 721, 13, 50816], "temperature": 0.0, "avg_logprob": -0.2318511413315595, "compression_ratio": 1.410071942446043, "no_speech_prob": 0.002750089392066002}, {"id": 1399, "seek": 647922, "start": 6488.26, "end": 6490.62, "text": " That's why I don't use it for character literals.", "tokens": [50816, 663, 311, 983, 286, 500, 380, 764, 309, 337, 2517, 2733, 1124, 13, 50934], "temperature": 0.0, "avg_logprob": -0.2318511413315595, "compression_ratio": 1.410071942446043, "no_speech_prob": 0.002750089392066002}, {"id": 1400, "seek": 647922, "start": 6490.62, "end": 6492.62, "text": " All right, let's take a break.", "tokens": [50934, 1057, 558, 11, 718, 311, 747, 257, 1821, 13, 51034], "temperature": 0.0, "avg_logprob": -0.2318511413315595, "compression_ratio": 1.410071942446043, "no_speech_prob": 0.002750089392066002}], "language": "en"}