start	end	text
0	28000	As I said yesterday, I swapped the talks around, so this is the more philosophical talk.
29000	46000	I had some multiple titles. I couldn't decide. Some of them were semi-cranky in those moments.
47000	54000	Then Mort gave me a great feeder line. This is about step one.
58000	66000	This is just an experience report. It's not advocacy. There's no methodology here or science or anything else.
67000	75000	I'd like you to try to think about when was the last time that you thought about something for an entire hour.
75000	80000	Nobody bothered you and you had an idea and you sat for an hour and thought about it.
82000	90000	How about for a whole day? Does everybody remember last time I sat and thought about something for a whole day?
90000	105000	How about over a course of a month? We had something you were working on and obviously you're not spending all the time every day when you start saying it to a month or a year.
106000	115000	These are tremendously valuable moments if you get to have them at all.
115000	126000	I consider myself extremely lucky to have had the ability to think about probably three different things for a year or more.
126000	134000	One of them was closure. There's nothing I prize more than that kind of time.
134000	141000	The other thing I'd ask is when was the last time that you felt confident trying to do something you had never done before?
141000	148000	What do you think it takes to become confident in doing something you'd never done before?
148000	156000	Obviously software developers, a lot of times we're doing the umpteenth application that takes something out of a database and puts it on the web.
156000	163000	But the luckier you are, the more likely you are to encounter problems you've never done before.
163000	172000	How do you start doing that and not feel incredibly at risk?
173000	179000	We'll start by talking about some software development, things we all know to be true.
179000	183000	We hate bugs in our programs. We're trying to write quality programs.
183000	194000	We know if we let the programs reach the field, it's incredibly expensive to fix inadequacies in the program.
194000	199000	So we say, okay, we'll have a big testing process and quality assurance.
199000	208000	And even that we know is not so great because it sort of has this removal, this distance from the development effort, which is not good.
208000	218000	So now we know what to do in this area. We fix bugs while we're coding by testing and development.
218000	226000	And this is the best way to avoid bugs in our applications, right?
226000	228000	No.
228000	236000	Did you notice that I learned how to make each bullet happen one at a time?
236000	242000	So now you don't know what I'm going to say.
242000	244000	It's awesome.
244000	247000	Not this menu item before.
247000	250000	No, definitely, absolutely, positively not.
250000	261000	The least expensive place to fix bugs is when you're designing your software, which everybody does, yes?
261000	267000	I will contend of all the things I'm saying here, which are very, very extremely fuzzy,
267000	273000	that without a doubt most of the big problems we have with software are problems of misconception.
273000	278000	We don't have a good idea of what we're doing before we do it, and then go, go, go, go.
278000	285000	And we do everything, you know, we have practices and all kinds of stuff, and we feel really good about ourselves after that point.
285000	292000	But if you mess it up, you know, as Mark said, and step one is not going to turn out well.
292000	294000	There are not problems of implementation.
294000	299000	There are problems of implementation, obviously, and testing and other things help with those.
299000	310000	But problems of misconception are not generally addressed by testing or type systems or the things we use to correct defects and implementation.
310000	322000	There aren't really type systems that can tell us if we've got a good idea or what we're doing addresses that idea.
322000	326000	So I'm going to talk a little bit about analysis and design.
326000	337000	I know that's so 90s and ugly and was rightfully, you know, criticized and really dropped.
337000	346000	Because, you know, when people considered it to be about process and drawing pictures and, you know, knowing everything about everything and making comprehensive plans
346000	352000	and the waterfall model, and there was amazing amounts of stuff that was terrible about this.
352000	360000	But that doesn't mean that the step before go do it is not an important step.
360000	367000	And I think we don't spend enough time and energy or make enough time or get allocated time.
367000	369000	You know, it may not be a matter of our choice.
369000	373000	We'd say, well, we'd like to spend some time thinking about it, but, you know, we have to ship something next week.
373000	377000	But we are definitely suffering in quality because we don't spend time here.
377000	383000	And so what I'd like to do is sort of just whatever you think analysis and design is, I'd like you to just forget for the moment.
383000	386000	And let's try to make a really simple definition.
386000	389000	Analysis and design is about two things.
389000	400000	Identifying some problem that we're trying to solve and assessing our proposed solution in terms of whether or not it solves that problem.
400000	402000	That's really what it's about.
402000	405000	Not about anything else.
405000	408000	We should be solving problems.
408000	411000	We should not be building features.
411000	413000	There's nothing about feature.
413000	414000	What is feature?
414000	416000	Feature is just an attribute of something.
416000	420000	It's the shiny chrome knob on something.
420000	424000	It's not the purpose of the car.
424000	432000	There's no guarantee if you put together a feature list, even if it comes from the customer, that it's going to solve their own problem.
432000	434000	Or that it solves any problem.
434000	438000	Or that the features when you put them together don't introduce a whole ton of other problems.
438000	445000	So programming and writing software is not about completing lists of features.
445000	454000	In particular, features provided by users, in spite of their best efforts to satisfy themselves, are often really not good ideas.
454000	459000	And you've got to dig underneath it and figure out what problem they have and what's the best solution to it.
459000	463000	And then reconcile it with whatever they ask for.
463000	471000	We also have a tendency because we're all smart and we love being smart and figuring out how to make things go.
471000	477000	Figuring out how to make something go is good no matter what it took to do it.
477000	481000	So if we can find a way to get around a problem, we're like, that's great.
481000	482000	And it's not great.
482000	488000	Avoiding problems, which we're all capable of doing, very capable of doing, isn't the same as solving them.
488000	491000	So we should really try to work on solving problems.
491000	502000	And the thing I'm going to talk about today is really that there's a bunch of technique and skill to solving problems.
502000	513000	And the first one is just to make an effort to understand the problem you're working on, to recognize, identify it, put it somewhere, and talk about it.
513000	515000	So problem solving is definitely a skill.
515000	523000	I think you shouldn't take away from this talk that there's a certain kind of person who's like good at problem solving and they get to do this part of the job.
523000	526000	And then we can practice these other things.
526000	528000	You can practice this part.
528000	537000	Paya wrote this amazing book called How to Solve It in 1945 or something, which is about how to practice.
537000	542000	And what are the techniques of solving math problems in this case?
542000	545000	And it's a terrific book full of great insight.
545000	552000	And if you've never read it, go on to Amazon right after my talk and order yourself a copy.
552000	556000	One of the things that's not so great about the book is that it is in the math space.
556000	560000	And in that space, there's this really nice thing that happens.
560000	567000	When you're done and you think you have an answer, you have all the techniques of mathematical proof to determine if you actually have.
567000	571000	Whereas as software developers, we don't have that.
571000	577000	There's no way to prove that you have a good solution to somebody's e-commerce site problem.
577000	582000	There's no mathematical techniques and there's not going to be any anytime soon.
582000	584000	That will let us do that.
584000	588000	But it is a skill and it is something you can practice, it's something you can learn about.
588000	591000	And it's worth doing, right?
591000	594000	Because as human beings, we get good at what we practice.
594000	598000	It doesn't matter what it is, it's amazing examples of people practicing things
598000	606000	that they seem to have no potential hope to become good at and they get good at it because they practiced it.
606000	611000	If you practice problem solving, really practice problem solving, you will get good at it.
611000	618000	If you practice methodology X, you will get good at that.
618000	623000	And I'd like you to ask yourself, where do you think there's more leverage?
623000	627000	I don't care what X is, pick any X you want.
627000	634000	Would you rather be good at it or the general skill of solving problems?
634000	637000	So what do we need to do if we're going to work on solving problems?
637000	640000	What is the activity like?
640000	643000	The first thing is to actually say, I am solving this problem.
643000	648000	This problem is this, blah, blah, blah, blah, blah, and therefore blah.
648000	652000	I have seen so much software made where no one ever said that.
652000	654000	No one ever wrote that down.
654000	659000	And then we have a whole system and no one said what problem is supposed to solve.
659000	663000	If we're not solving problems, I have no idea why we're in this room.
663000	669000	We absolutely should be working on solving problems, which means we should be enumerating what they are.
669000	672000	And then from the mental standpoint, which I'll talk about a little bit later,
672000	675000	it is actually important to say them out loud.
675000	678000	As the person is trying to solve a problem, say it.
678000	682000	Have a conversation with somebody in your group and say, we need to solve this.
682000	688000	The problem is, blah, blah, blah, you know, rant or talk and have a little conversation or write it down.
688000	693000	But just like you used the practice of repeating somebody's name or introducing them as a mnemonic
693000	697000	to help you remember their name, it's the same thing.
697000	702000	This is the seed of solving the problem is stating it.
702000	706000	So the next part, which is definitely a trickier, and Paulia's book is great,
706000	711000	and it's got a lot of practical things, many of these are overlap, what he said,
711000	713000	is to understand the problem.
713000	715000	So we said, we have this problem.
715000	719000	I think we need a no-SQL database.
719000	723000	There's something missing.
723000	727000	We have this problem, we need a no-SQL database.
727000	734000	We haven't actually said, you know, why, what are the characteristics of this problem that lead us to this solution space?
734000	739000	And this is where all the interesting work is, I think, in software development.
739000	742000	And so the first step is, what do you know about what you're trying to do?
742000	744000	There's definitely going to be a bunch of facts.
744000	747000	There will be customer requirements, there'll be other things.
747000	752000	There'll be context, you know, the system has to run on this kind of box, has to run for this long.
752000	757000	It can't consume more than this many watts or has to support 10 million users, whatever it is.
757000	760000	There are those kinds of things and constraints.
760000	763000	All this stuff are facts you know about what you're supposed to do.
763000	769000	There will be things that right away you know you don't know.
769000	778000	I wonder where we're going to get the data as an input to this thing.
778000	783000	What we're going to do when our main data source is not available, do we have a secondary thing?
783000	785000	There will be things like that.
785000	788000	Of course, there will be things that you don't know or you don't know.
788000	790000	Well, that's fair.
790000	795000	But if there's things you don't know, you should think about them now.
795000	802000	The other thing to do is to say, you know, everybody says, you know, I have this great idea for excellence.
802000	808000	You're the only person in the world that ever had this problem, so that's very, very unlikely.
808000	812000	So go find some other solutions to similar problems.
812000	817000	Are there any others that you know about and what can you find out about them?
817000	823000	Because looking at other solutions to the same problem is the number one way to get up to speed really quickly
823000	828000	and start working ahead of, you know, the best known solutions in this space.
828000	834000	And then because what you'll have to do then will just be an incremental step above what the last guy did.
834000	838000	But if you're ignoring what the last guy did, you're starting from scratch.
838000	842000	So you definitely want to look around in the space.
842000	845000	All right, now I'm not advocating a methodology or anything.
845000	849000	But if you're going to bother to do all this work, you should write it down.
849000	854000	Somehow, some way. I don't care about it.
854000	859000	The other thing you have to do is you have to be discerning. You have to be critical.
859000	866000	And where it's sort of in this world, because it's all this community stuff, and it's like, I just hear awesome.
866000	870000	It's like awesome happens. I just hear it like 50 times a day.
870000	875000	Not everything is awesome.
875000	879000	And so it's hard to talk about other people's stuff not being awesome.
879000	882000	So just mainly focus on your own stuff.
882000	887000	In particular, as you're finding solutions, as you're trying to enumerate a solution to a problem,
887000	890000	look for defects in your own solution.
890000	895000	And of course, you can have a whole talk about this because there will be technical errors,
895000	901000	there'll be errors in logic, there'll also be errors of taste and judgment and abstraction
901000	903000	and all those kinds of things that all feeds into this.
903000	906000	And there's an entire talk in this area.
906000	915000	But whatever issues you can find in your own solutions, try to solve those too right away up front.
915000	920000	So the other thing you see is, oh, we're going to do this.
921000	927000	Oh, that's great. It has these 10 attributes. It's awesome.
927000	930000	It's really easy to get excited about the good parts of what you do,
930000	933000	but you should be looking for trade-offs.
933000	939000	The chances of there being no trade-offs in any solution are slim.
939000	943000	The other thing is just this, again, this what don't you know thing.
943000	947000	If there's stuff you know you don't know, there are questions you should be asking
947000	952000	in order to find out what you don't know.
952000	954000	You don't know everything.
954000	959000	So there should be question marks on whatever it is you want to use
959000	961000	that you're going to write all this stuff down.
961000	963000	There should be question marks on that page.
963000	969000	If there are no question marks, you're missing the step.
969000	976000	The other thing is to think about none of us are born knowing how to write software.
976000	981000	None of us are born knowing about SQL or the characteristics of the web
981000	984000	or protocols or anything else.
984000	988000	And if you're trying to solve a problem, especially in a space where you haven't done it before,
988000	992000	you're going to have a very limited ability to come up with solutions.
992000	997000	If you don't have a lot of input, you're going to need to get a lot of different inputs
997000	1000000	so that you can let your brain go around between them and say,
1000000	1003000	oh, yeah, this idea and that idea are connected to each other,
1003000	1005000	and therefore I can do this other thing.
1005000	1010000	If you only take a really narrow slice of, I see exactly what I'm doing right now,
1010000	1012000	right this second, to deliver next week.
1012000	1016000	You're not going to have enough inputs to make decisions.
1016000	1021000	So you want to read about the kind of space that you're in, widely.
1021000	1024000	Very specifically, oh, there's other people trying to do exactly the same thing,
1024000	1027000	and then broadly, these other characteristic problems,
1027000	1032000	and maybe even if you want, go try to find research papers that are kind of in the same space.
1032000	1038000	It's amazing the cool things you can find by searching something like ACM for papers about the kind of,
1038000	1042000	it's like, oh, I wonder if we could get a certain kind of hash code that does whatever.
1042000	1046000	You go into Google and type hash code that does whatever, enter,
1046000	1050000	and if there's some scholarly and ACM references, grab those papers.
1050000	1053000	Even if you only understand like a tiny fraction of the paper,
1053000	1057000	it's likely to contribute to your ability to think about your problem.
1057000	1060000	The other thing is, even if you're not going to tell the other guy,
1060000	1064000	when you're looking at other solutions, be extremely critical.
1064000	1068000	I can't tell you how often you're going to find the next best idea
1068000	1071000	by completely crucifying the last guy's idea.
1071000	1076000	At least in your own head, right, take it apart.
1076000	1079000	Because when you take it apart, you're going to find a couple of things
1079000	1084000	maybe they didn't write down when they were doing it.
1084000	1088000	So, everybody says designs about trade-offs.
1088000	1092000	Everybody knows this, right?
1092000	1094000	Usually when they're talking about trade-offs and their software,
1094000	1099000	they're talking about the parts of their software that suck.
1099000	1102000	I had to make these trade-offs.
1102000	1106000	That is not what a trade-off is, right?
1106000	1112000	You have to look at at least two solutions to your problem, at least two.
1112000	1117000	And you have to figure out what's good and bad about those things, right?
1117000	1122000	Before you can say, I made a trade-off.
1122000	1125000	So, I really recommend that you do that.
1125000	1131000	And when you do it, you might want to write that down somewhere.
1132000	1136000	Okay, so let's talk a little bit more about practice.
1136000	1142000	A big part of trying to do this work is maintaining your focus.
1142000	1145000	We had a really nice talk yesterday about flow,
1145000	1150000	and that is a kind of a focus-related concept.
1150000	1153000	And when you're trying to do design work, you also need,
1153000	1158000	I think some of the most extreme focus you're going to ever need.
1158000	1161000	And so there's some cool aspects to the hammock.
1161000	1165000	One of the cool aspects to a hammock is that you can go on a hammock,
1165000	1169000	and you can close your eyes, and no one knows that you're not sleeping.
1169000	1173000	But they won't bother you because they think you might be sleeping.
1173000	1177000	So it's very cool.
1177000	1180000	Computers are bad, bad sources of distraction.
1180000	1183000	They're so bad, especially for people like us.
1183000	1185000	It's just like, wow.
1185000	1189000	Something else, besides what I'm trying to think about,
1189000	1193000	you desperately need to get away from the computer if you're trying to focus.
1193000	1197000	It's almost impossible to focus sitting on a computer.
1197000	1201000	The other thing about focus is that you're going to be making trade-offs
1201000	1204000	when you try to focus really intensely.
1204000	1209000	You're going to drop balls, you're going to miss calling people back
1209000	1214000	and responding to emails and doing your slides for conferences
1214000	1221000	until the airport on the way there, and things like that.
1221000	1225000	That's just the game.
1225000	1229000	The one thing, though, is that you should communicate to people
1229000	1232000	that you care about about this process,
1232000	1237000	and the fact that when you're doing it, you're going to seem pretty far away.
1237000	1242000	And that's not a comment about the person that you care about.
1242000	1245000	It's just the nature of doing this kind of work.
1245000	1247000	So it is important to sort of do it.
1247000	1250000	A lot of people will not get time to do this all day, every day,
1250000	1252000	or over the course of an entire week,
1252000	1255000	but if you're going to get some focus time, define what that is.
1255000	1258000	Everybody knows about time-out time for little kids.
1258000	1260000	What programmers need this focus time?
1260000	1263000	They're like, little kids that need to go sit on the hammock
1263000	1267000	and have nobody bother them.
1267000	1275000	So for me personally, I think that the process involves two parts of your mind.
1275000	1276000	And this is stuff that you're seeing.
1276000	1278000	There's books written about this and whatever.
1278000	1283000	I haven't read them, but they seem to correspond to my personal experience,
1283000	1287000	which is that you sort of have this waking mind and background mind.
1287000	1291000	And your waking mind is really good at that criticizing part.
1291000	1297000	It's extremely analytical and it's very, very good at tactics.
1297000	1300000	Right now, we need to make a decision.
1300000	1303000	The lion is chasing after us, jumped left.
1303000	1305000	We are really good at that.
1305000	1308000	That's what our waking mind is about, keeping us alive
1308000	1312000	and making short-term decisions
1312000	1315000	and looking at the immediately present information
1315000	1317000	and doing something about it.
1317000	1322000	Or if you think you're going to sit down and look at a problem for the first time
1322000	1324000	and stare at your computer and do whatever
1324000	1329000	and have a conversation for 10 minutes and make a really great decision,
1329000	1330000	I don't think so.
1330000	1332000	I know I can't do that.
1332000	1333000	Definitely not.
1333000	1337000	The problem with this kind of thing is it tends to push uphill.
1337000	1338000	Ooh, I see this.
1338000	1339000	Ooh, I see that.
1339000	1341000	Okay, here I have a choice left and right.
1341000	1342000	Okay, I can go right.
1342000	1343000	That's more up.
1343000	1344000	Left and right.
1344000	1345000	Left, that's more up.
1345000	1346000	More up.
1346000	1351000	This part of your thinking is really good at finding the local maximum.
1351000	1355000	But it's not very good at getting off the track.
1355000	1358000	It's on and finding the fact that there's another hill over there
1358000	1362000	that really takes you higher.
1362000	1365000	But there's a very, very critical activity that you have to engage in,
1365000	1368000	I think, if you want to use your entire brain
1368000	1370000	and become very good at problem solving.
1370000	1373000	And that is to think about using your waking time
1373000	1378000	to assign tasks to your background line.
1378000	1381000	To actually think hard about something
1381000	1385000	and create work for your background line.
1385000	1388000	That really is the point of the hammock and all this listening
1388000	1391000	and all this working and talking about that you're going to do when you're awake
1391000	1395000	is actually to give the other half of you stuff to do.
1395000	1398000	The other good thing about your waking mind is when you do think
1398000	1402000	you have a great idea that you've caught up with in your background mind,
1402000	1405000	your waking mind is good at picking the other part.
1405000	1408000	Saying, you know, you thought you woke up with this brilliant idea,
1408000	1413000	but now I'm seeing this characteristic of it that seems not so brilliant.
1413000	1415000	So let's talk about the background mind.
1415000	1418000	I'm not going to directly equate it with the sleeping mind,
1418000	1422000	but the sleeping mind is the number one instance of the background mind.
1422000	1427000	You can find access to your background mind during the day while you're awake,
1427000	1430000	but it's tricky.
1430000	1434000	It's good at making connections, right?
1434000	1440000	The kind of thing like, if I make a hut out of mud and it rains hard,
1440000	1443000	it will disintegrate.
1443000	1446000	It's not necessarily the kind of thing that you can tactically figure out.
1446000	1450000	Your background mind is going to know sort of aspects of all those different components
1450000	1452000	that make the connections and synthesize them.
1452000	1456000	Even when you think you're really hot at making decisions on the fly,
1456000	1461000	you're almost always just regurgitating something your background mind has already figured out.
1461000	1463000	So the background mind is good at synthesizing things.
1463000	1466000	It's good about strategy, right?
1466000	1470000	And so when Mark talks about, you know, abstractions and things like that,
1470000	1474000	abstractions are our software strategy, right?
1474000	1478000	Because the idea there is you're making some super global decision
1478000	1481000	that's going to need to be corrected in a whole bunch of contexts
1481000	1484000	in which you can't make tactical decisions yet.
1484000	1489000	What does it mean to make an abstraction you're going to derive libraries from?
1489000	1491000	What does it mean to put something in a programming language
1491000	1495000	where I had no idea what you guys were going to do with it?
1495000	1498000	It's a more strategic kind of thing.
1498000	1500000	You don't build a programming language and say,
1500000	1504000	how will this programming language deal with HTTP requests?
1504000	1509000	What you want to do is give Mark something that he can use
1509000	1513000	when he's got a tactical decision to make about HTTP requests.
1513000	1516000	And that's a strategic kind of thinking.
1516000	1519000	And your background mind is good at strategic thinking.
1519000	1523000	If you want to do abstraction, you have to find time to do this thinking
1523000	1526000	because that's the part your brain comes from, right?
1526000	1530000	It does abstraction, it draws analogies, right?
1530000	1536000	I think this is where you solve most non-trivial problems, okay?
1536000	1539000	You can make good decisions in the moment otherwise,
1539000	1541000	but if you're really trying to solve something hard,
1541000	1545000	you've got to engage the other half of your head.
1545000	1549000	So I'm not just saying a scientific American.
1549000	1555000	Say that when we're sleeping, we process the information during the day
1555000	1558000	because that's pretty obvious.
1558000	1561000	But that sleep reinforces memory, which is good.
1561000	1564000	I mean, it is important to remember what you're working on.
1564000	1569000	But more importantly, it is a great sorter out of things.
1569000	1571000	So we had this whole...
1571000	1574000	I just advocated taking a lot of input, right?
1574000	1578000	Taking a lot of input, doing all this analysis of the requirements in the space, right?
1578000	1584000	Doing all the reading, looking at competitive solutions and tearing them apart.
1584000	1586000	There's this ton of stuff.
1586000	1590000	When are you going to decide what about that is important and what isn't?
1590000	1592000	When you're asleep.
1592000	1594000	That's what happens.
1594000	1597000	Evolution has solved this problem for us.
1597000	1600000	And that's the solution it came up with.
1600000	1602000	We can't ignore it.
1602000	1605000	We have to use it.
1605000	1609000	But the most critical thing is this one.
1609000	1616000	Finding hidden relations and solving problems we were working on.
1616000	1618000	So imagine somebody says,
1618000	1623000	I have this problem, this, that, that, that, that, that, that.
1623000	1625000	And you look at it for 10 minutes and say,
1625000	1628000	okay, I'm going to go out to the movies and do something else.
1628000	1630000	Then you go to sleep.
1630000	1633000	Are you going to solve that problem when you're asleep?
1633000	1634000	Sure.
1634000	1636000	No.
1636000	1640000	Or you didn't think about it, did you?
1640000	1642000	No, you didn't think about it.
1642000	1644000	You didn't think about it hard enough while you were awake
1644000	1647000	for it to become important to your mind when you were asleep.
1647000	1650000	And this goes back to that feeding your background mind thing.
1650000	1652000	You really do have to work hard.
1652000	1654000	Just think, not typing it in.
1654000	1657000	Just thinking about a problem during the day
1657000	1661000	so that it becomes an agenda item for your background mind.
1661000	1664000	That's how it works, right?
1664000	1666000	It's when people are out there and they're like,
1666000	1668000	oh my God, how am I going to find food?
1668000	1670000	And this is happening there.
1670000	1672000	But I know I saw an elk over there.
1672000	1674000	They seem to be by the water sometimes or whatever.
1674000	1676000	That's when you wake up as a caveman and say,
1676000	1681000	let's go hunt for the animals by the water.
1681000	1684000	It's not a logical deduction.
1684000	1687000	It seems like that when your foreground mind is sort of analyzing it.
1687000	1690000	But there's no logic for that necessarily.
1690000	1693000	It's really a process of this very parallel kind of thinking.
1693000	1696000	So this is very important.
1696000	1700000	So we have a problem in general because we write,
1700000	1702000	and we're just being asked to write stuff for this,
1702000	1706000	more and more complex as time goes by.
1706000	1713000	And we know there's a 7 plus or minus 2 sort of working memory limit.
1713000	1718000	And as smart as any of us are, we all suffer from the same limit.
1718000	1722000	But the problems that we're called upon to solve
1722000	1724000	are much bigger than that normally.
1724000	1725000	So what do we do?
1725000	1728000	If we can't fit the whole thing in our head at the same time,
1728000	1736000	how can we work on a problem with more than nine components?
1736000	1740000	What I'm going to recommend is that you write all the bits down.
1740000	1744000	Especially now, you've written a lot down about the problem.
1744000	1750000	What the problem is, a lot of facts about it, constraints about where it runs.
1750000	1753000	You don't know, you've asked yourself those questions, you wrote them down.
1753000	1756000	I wish I knew a blog.
1756000	1758000	You looked at competitive things and said,
1758000	1761000	that works great over here, but that part of that competitive thing sucks.
1761000	1763000	I hate that.
1763000	1765000	I wish that wasn't there.
1765000	1768000	You gave this huge agenda to your background line.
1768000	1775000	And when you're trying to load it up, you need to survey.
1775000	1778000	And that's the point of writing it all down before.
1778000	1783000	If you've written all this stuff down, including some sketch of how you want to solve the problem,
1783000	1787000	you can go and jump around and look at that.
1787000	1790000	It's sort of like, how many balls can you juggle?
1790000	1792000	Well, you can only juggle so many.
1792000	1793000	I can't juggle at all.
1793000	1797000	But if we look at the 7 plus or minus 2 thing, we can juggle 7 to 9 balls.
1797000	1800000	But if you can imagine having an assistant,
1800000	1804000	who every now and then could take one of those out and put a different color in,
1804000	1807000	then you could juggle balls of 20 different colors at the same time,
1807000	1811000	as long as there were only 9 in the air at any one point in time.
1811000	1812000	And that's what you're doing.
1812000	1818000	You're going to sort of look around at all these pieces and shift arbitrary shapes of 7
1818000	1824000	into your head at different points in time.
1824000	1827000	Maybe you'll draw pictures.
1827000	1829000	Don't use the UML tool to do this.
1829000	1830000	Damn.
1830000	1832000	It's not a methodology.
1832000	1834000	So go over and over.
1834000	1839000	But then you must, again, step away from the computer.
1839000	1842000	There's another really important part of doing this,
1842000	1847000	which is to go and sit somewhere and have no input.
1847000	1850000	And close your eyes and not go to sleep.
1850000	1851000	Close your eyes.
1851000	1853000	Because we have this other thing.
1853000	1855000	Everybody knows what it is.
1855000	1856000	It's really hard to describe.
1856000	1859000	But does everybody have a concept of their mind's eye?
1859000	1862000	What you see when you close your eyes and you start thinking about something,
1862000	1865000	it's this weird, I mean, it's not actually technically visual,
1865000	1867000	although some people are really vibrantly visual.
1867000	1870000	I know for me, it's, I don't know.
1870000	1874000	I can't describe it, but it's not very realistic.
1874000	1876000	But you need to do that.
1876000	1878000	That part is important for your brain.
1878000	1883000	Because at that point, you're switching out of sort of an input reception mode.
1883000	1886000	If you're just looking at your list, you're sort of in the mode of,
1886000	1887000	I'm getting input.
1887000	1892000	But when you're sitting and contemplating something and hashing it over in your head,
1892000	1896000	you don't have any other input, which means you're exercising the recall.
1896000	1898000	I looked at those 20 points.
1898000	1899000	Let's say it was just 20.
1899000	1902000	I looked at those 20 points over and over and over again.
1902000	1904000	And I jumped around with input between them.
1904000	1910000	Now I close my eyes and I'm trying to recall them and think about them a little bit more in my head.
1910000	1914000	And you're going to find if you've done the last step going over and over,
1914000	1917000	you will actually be able to sit on a hammock and pull all the different parts
1917000	1921000	of a fairly large problem in and out of your head, admittedly, maybe one at a time.
1921000	1923000	And think about them that way.
1923000	1925000	That exercise is really, really important.
1925000	1929000	I don't know why it just is because it forces this recall thing
1929000	1934000	that definitely makes those things agenda items for your background mind.
1934000	1938000	So we'll call that mind's eye time.
1938000	1939000	Now you're done.
1939000	1941000	Cake is in the oven.
1941000	1944000	You just have to wait.
1944000	1948000	It's so good.
1948000	1952000	And one of the things I would say is at least wait overnight.
1952000	1958000	No matter how ill you and your buddies talked about it and you just feel like such a hot shot today,
1958000	1961000	I have got this thing.
1961000	1970000	Sleep on it at least one night, at least if it's an important decision.
1970000	1978000	Now, how many people woke up this morning with the answer to a hard problem?
1978000	1980000	You see, it's science.
1980000	1982000	Science at work.
1982000	1984000	No, it's really kind of an unfortunate thing.
1984000	1987000	If you're not thinking about this, do you think what happened?
1987000	1989000	I worked hard all day.
1989000	1992000	I'm done working.
1992000	1994000	Time to relax.
1994000	1998000	Unfortunately, if you believe in what I'm saying today,
1998000	2003000	you're actually doing something kind of important when you're sleeping.
2003000	2008000	So occasionally, you really have to give your brain a chance to do that other part of the job.
2008000	2014000	If you always deny it, I don't think you're going to have the best results.
2014000	2017000	Unfortunately, sometimes overnight is not enough.
2017000	2022000	Some big problems, especially finding really good abstractions,
2022000	2026000	are finding answers to things that satisfy a bunch of simultaneous constraints,
2026000	2028000	take a long time.
2028000	2030000	It just does.
2030000	2034000	And I know everybody has to ship and everything else,
2034000	2037000	and in that case, I'll have what I'm saying doesn't apply.
2037000	2041000	And like I said before, I consider it a huge opportunity
2041000	2044000	when I get an extended amount of time to think about a problem,
2044000	2047000	because I know I'll come up with a better answer.
2047000	2050000	But one of the ways you can deal with this and not get stymied by,
2050000	2053000	well, let me just think about that for three months,
2053000	2061000	because most managers are not incredibly receptive to that sentence.
2061000	2064000	So to just work on more than one thing,
2064000	2067000	not inside one day,
2067000	2070000	try to work on one thing each day.
2070000	2074000	But if over the course of time, you have like three projects,
2074000	2078000	it's quite possible to load one up and work on it for three days,
2078000	2083000	and finding answers to any of your question mark items
2083000	2086000	are able to enumerate new possibilities.
2086000	2088000	So you kind of stuck a little bit,
2088000	2091000	you switch to another project and do that for a few days.
2091000	2093000	You have to amortize the loading up time,
2093000	2097000	it can take between an hour and an entire day to load up something.
2097000	2100000	So once you've done that, you try to get at least the rest of the day,
2100000	2103000	or three days or more on it.
2103000	2108000	But don't get hung up about the stuck thing, just switch.
2108000	2111000	Don't stay stuck, switch.
2111000	2114000	Or get more input, talk about it more,
2114000	2119000	or keep stimulating the pathway, don't stay stuck on it.
2119000	2122000	But yeah, then eventually cake comes out of the oven.
2122000	2124000	You wake up and you have a great idea,
2124000	2127000	you think you know the answer to your problem,
2127000	2131000	or you have a good idea for a solution.
2131000	2135000	Unfortunately, sometimes you have an answer to,
2135000	2137000	not the problem you were working on,
2137000	2140000	you were working on three projects and you loaded up the project C
2140000	2143000	and you woke up with the answer to project A.
2143000	2146000	That has to be okay.
2146000	2150000	You just switch and take advantage of it, at least capture it.
2150000	2152000	If you wake up with an answer to some other thing
2152000	2154000	that you can't work on that day,
2154000	2157000	capture the results of this background process,
2157000	2160000	they're really useful.
2160000	2164000	Finally, you do have to take your great ideas
2164000	2166000	and figure out if they're actually great
2166000	2169000	by either analyzing them more, which is certainly important,
2169000	2173000	but sometimes you have to write them and type them into your computer.
2173000	2175000	Actually, we all have to do this.
2175000	2178000	So you do eventually have to code.
2178000	2180000	It's fun, Stu has this great sense,
2180000	2183000	he's seen some of my design sheets,
2183000	2185000	and I don't know what it says,
2185000	2187000	document of despair or something.
2187000	2189000	It seems to be all like,
2189000	2191000	we can't do this, this doesn't work like that,
2191000	2194000	the question marks, blah, blah, blah.
2194000	2197000	It's all negative, but it's all challenges
2197000	2199000	to the problem-solving process.
2199000	2201000	It's not despairing, it's positive,
2201000	2204000	it's saying, I know what my challenges are,
2204000	2206000	and therefore I can work on it.
2206000	2208000	But you spit this thing out,
2208000	2214000	now you have something, so you try to avoid a lot of typing.
2214000	2216000	I know I do.
2216000	2219000	Because if I think I've got an answer
2219000	2221000	and the answer is small,
2221000	2225000	that's one of the most telling attributes
2226000	2228000	that is probably good.
2230000	2234000	And what I would hope from doing this whole process
2234000	2237000	is that you gain confidence in it
2237000	2239000	after you've seen it work for you,
2239000	2241000	so that you say, you know what,
2241000	2243000	I have never done this before,
2243000	2245000	but I really have thought about it,
2245000	2248000	and this solution I came up with overnight feels awesome,
2248000	2250000	and woo, let's go.
2250000	2252000	It is important to look at what you did
2252000	2254000	and to run it and see
2254000	2256000	and find out new things about the solution
2256000	2258000	and say, you know what, I had this supposition,
2258000	2260000	it's not correct, I thought it would have this characteristic,
2260000	2262000	it doesn't, et cetera, et cetera,
2262000	2264000	I am not advocating the waterfall model,
2264000	2266000	you're going to try stuff and go back,
2266000	2268000	that's fine.
2268000	2271000	But don't lean on this, right?
2271000	2273000	Test-driven dentistry,
2273000	2275000	I don't think I can come up with a better thing.
2278000	2280000	We can't really do that.
2280000	2282000	The last thing is
2282000	2285000	you are going to be wrong.
2285000	2288000	I am frequently wrong.
2288000	2290000	That's part of the game.
2290000	2292000	You're going to think of better ideas.
2292000	2294000	I think that's one of the most exciting things.
2294000	2296000	I think no matter what I've ever thought of,
2296000	2299000	the fact that I know I'm going to think of something better,
2299000	2301000	as much as it will suck a little bit
2301000	2303000	because I know I delivered something that was not the best,
2303000	2307000	means that I'm still going.
2307000	2309000	It's still working.
2309000	2311000	So you will think of better ideas.
2311000	2314000	Also, the facts change.
2314000	2316000	They can change because of two reasons, right?
2316000	2319000	One, you missed some of them early on,
2319000	2321000	so they're new to you because you skipped them.
2321000	2323000	What else do we have?
2323000	2326000	Changing requirements, right?
2326000	2328000	It's just, you know, we all know this.
2328000	2330000	The facts will change.
2330000	2333000	When the facts change, do not dig in.
2333000	2337000	Do it over again and see if your answer is still valid
2337000	2339000	in the context of the new requirements and new facts.
2339000	2345000	And if it isn't, change your mind and don't apologize.
2345000	2347000	Sometimes you'll just make mistakes,
2347000	2352000	errors in logic or, you know, you just get it wrong.
2352000	2354000	That's fine.
2354000	2358000	If I can advocate anything, it's do not be afraid,
2358000	2363000	especially do not be afraid of being wrong.
2363000	2368000	So, in summary, this was a rant.
2368000	2371000	There's no summary.
2385000	2387000	I have two minutes for questions.
2387000	2389000	Yes.
