start	end	text
0	7000	Thanks for having me. It's nice to see everybody here, bright-eyed, after a night of heavy thinking.
7000	14000	This is the obligatory legal disclaimer.
14000	19000	Okay, so we're going to talk about design.
19000	26000	And of course, as you all know by now, I don't actually write talks, I just look up stuff in the dictionary.
27000	30000	So I looked it up in the dictionary, I saw this great definition.
30000	37000	Prepare the plans for a work to be executed, especially to plan the form and the structure of that thing.
37000	40000	So there's a lot of really interesting stuff in this definition.
40000	46000	The fact that there's a plan, the fact that upon having the plan, something's going to be done,
46000	50000	and the plan's going to be executed, and that it's about form and structure.
50000	51000	It's really good.
51000	53000	There are other definitions there, one of which is this.
53000	55000	There's nothing wrong with this definition.
55000	57000	This is not what I'm talking about today.
57000	59000	We're not talking about how things look.
59000	64000	At no point today when I say design, am I using this meaning of the word design?
64000	69000	And the root goes back to designare, which means to mark out.
69000	71000	And it's also a very interesting thing.
71000	82000	It has to do sort of with writing, but also with sort of demarcating, right, to designate or to sort of set something aside.
82000	89000	But, you know, most simply we can just say it's about making plans and also writing them down.
89000	94000	Unfortunately, I think that, you know, with all our effort to become agile,
94000	99000	we're letting design become less of what we do.
99000	105000	And so there are a lot of butts when people say, oh, design, you know, it's like, you know, we already write down code.
105000	108000	Do we need to write down design?
108000	110000	You know, do we still need to do designs?
110000	114000	Obviously, it makes sense that if you're going to build a house, right, you can't just say, let's just go build the house.
114000	117000	You have to write something down so that somebody can go build the house,
117000	121000	because the realization of the plan has a different form than the plan, right?
121000	126000	The plan is something written down, but the realization is made of wood and nails and things like that.
126000	129000	But code's already written down, so we have something to read.
129000	131000	You know, do we still need designs?
131000	133000	Or can we just generate them?
133000	138000	Can we just write our program and then generate some documentation from the implementation?
138000	142000	And the answer is no, that's not a plan.
142000	145000	It would be something written down, but it's not a plan.
145000	151000	The other argument you get against design is, oh my god, you know, I lived in the 80s and design stunk.
151000	154000	You know, there were people who thought they could just do everything.
154000	162000	It was all top-down monolithic designs, these giant plans, etched in phone books that never came true.
162000	165000	And it's true that those were plans, but those are not good plans.
165000	170000	That doesn't mean planning is bad, it means that that style of planning is not good.
170000	175000	So what do we mean when we say, what do I mean, when I say good design?
175000	182000	I think one of the most interesting things about design is that people think it's generating this intricate plan.
182000	184000	But designing is not that.
184000	187000	Designing is fundamentally about taking things apart.
187000	194000	It's about taking things apart in such a way that they can be put back together.
194000	196000	If that makes sense.
196000	201000	So separating things into things that can be composed.
201000	203000	That's what design is.
203000	212000	If you just make this intricate thing, you really haven't designed in a way that's going to support the things designs need to support, like change.
212000	219000	Every component of a design should be kind of about one or very few things.
219000	224000	Sort of the nature of it, breaking things down until they're nearly atomic.
224000	233000	And only then do you take those things that you've broken apart and compose them to solve the problem you set out to solve.
233000	238000	But the first job is to take things apart in such a way that you can do that.
238000	240000	And a good design process is iterative.
240000	245000	This isn't a grand plan you do once and then you go and finish.
245000	253000	Obviously there are some kinds of design that you do have to sort of etch in stone because you're going to build a fabrication plant and have few options later.
253000	261000	But in software we know the materials we're working with are so malleable we can get some cycles back to iterate.
261000	265000	So when I say taking things apart, what kinds of things can we take apart?
265000	270000	We can take apart all the things in this list and I'm going to break them down one by one.
270000	272000	So what does it mean to take apart requirements?
272000	274000	This is actually quite important.
274000	280000	Obviously there's a job, another job, also sort of gone wanting these days called analysts.
280000	285000	There used to be analysts and designers and this whole waterfall model.
285000	291000	But there are requirements and usually we get these now directly from customers.
291000	296000	And they often take the form of I want this, I need that, I want, I want, I need, I want, I want.
296000	308000	And the first job we have to do is decompose those wants and needs into problems because obviously underneath all those wants and needs are some problems the customer wants to solve.
308000	317000	And understanding those problems is the key to designing something that solves the problems because oftentimes the design that solves the problems is not what the customer said they wanted or needed.
317000	321000	We separate requirements into knowns and unknowns.
321000	325000	We know how to do some part of this job and we don't know how to do this other part.
325000	327000	That's quite important.
327000	332000	There are problems, now again we're dealing with problems, we're very sorted things.
332000	338000	So there are problems that are on the domain side, possibly some domain expert's going to need to help us solve them.
338000	346000	And other problems that are on the solution side, how will it scale, where will we run it, how much will it cost to operate, how much energy will it use, things like that.
346000	352000	The other thing that we have to take apart are the difference between causes and symptoms.
352000	355000	So sometimes a customer will say I have this problem.
355000	358000	The problem is my screen is black.
358000	360000	And that's not actually the problem.
360000	361000	You know that's not the problem.
361000	366000	The problem is that's a symptom of a problem and the problem is somewhere underneath it.
366000	372000	So another thing you have to do when you're taking things apart is take apart causes and root causes from symptoms.
372000	380000	Because you want to get to causes because the thing your design needs to address are the causes of problems, not the symptoms.
380000	387000	Of course you could just throw up a JPEG over that black screen and you'd be like, it's fixed.
387000	391000	The other requirements are the unstated requirements which are always present.
391000	394000	They're problems that nobody wants to have in the future.
394000	397000	Like I don't want this system to be something I can't maintain.
397000	399000	I don't want it to run out of memory.
399000	401000	I don't want it to run really slowly.
401000	407000	They often don't even say that these are problems because they're just problems, they're future problems they don't want to have.
407000	411000	But they end up being part of the requirements set.
411000	413000	Other things we can take apart.
413000	416000	We can take apart time and order and flow.
416000	426000	The use of cues, the use of item potency, commutation and transactions are all ways in which we can separate apart when things happen.
426000	432000	And often these are the paths to separating apart who does these things.
432000	434000	And these terms become more and more important.
434000	438000	You see them more and more in systems level design.
438000	443000	Communitivity is going to become a huge thing for us to be thinking about.
443000	446000	And then there are times when we really need to know that a bunch of things are going to happen together.
446000	453000	And transactions help keep things separate by keeping things that are supposed to be together.
453000	460000	We take apart places and participants where things are going to happen and what components or processes are going to do them.
460000	464000	This is a classic quote, just add some indirection.
464000	465000	And there is a lot of that.
465000	468000	A lot of design is just putting in appropriate levels of indirection.
468000	472000	But this kind of indirection happens at all levels.
472000	477000	For instance, part of a design incorporates how it's going to be built.
477000	485000	Is it possible for more than one person or more than one team or people working in more than one language to build this system all together?
485000	489000	Or does everybody have to work in the same space at the same time with the same tool?
489000	495000	Then your process for building it isn't going to scale because you haven't taken that apart.
495000	497000	It's another kind of thing you take apart.
497000	504000	This next one I think is really super critical and I think we don't understand it or think about it enough in our software.
504000	514000	Which is the difference between the information our systems is going to manipulate and the mechanisms by which we're going to manipulate it.
515000	525000	To just talk about it simply here, we'll say the set of logged in users in my system is an idea and it will be information that my system is going to need to manage.
525000	535000	But if I have a set class or some sort of set construct in my programming language, that's a mechanism by which I might achieve representing that information.
535000	543000	But unfortunately, because we only have our programming language and our programming language constructs to represent both these things,
543000	552000	we often conflate things that might be appropriate as mechanisms as being appropriate for information and they are desperately not so.
552000	558000	So we have a lot, especially in an object oriented language, you have a lot of very mechanical kinds of classes.
558000	564000	And when you use them to represent information, like for instance any kind of mutable information object,
564000	568000	it's an absolutely atrocious idea. It's really, really bad.
568000	574000	And it comes out of the fact that we're not separating these two things when we're doing our designs.
574000	579000	Finally, after we've gotten something we think might be an answer, we need to take that apart.
579000	586000	So I have maybe one or more possible designs that I think address the problems that I'm trying to take on.
586000	592000	At this point, I have to look at each of those solutions and take them apart from a bunch of perspectives.
592000	594000	What benefits do they provide?
594000	598000	Yes, I think we have no problem with that. Everybody looks at a library, the library is like, it does this, it does that.
598000	600000	You know, it's a floor wax, it's a dessert topping.
600000	605000	You know, it's all benefits. It's all benefits. It's very rare that you see somebody say,
605000	610000	and here's the trade-offs of using this. Here's what's not good about it.
610000	615000	Here's where I decided to do X and I'm not going to be able to do Y.
615000	620000	And being honest about that to ourselves about our own designs is really important.
620000	626000	We all just communicate to stakeholders, right? You are going to get this and you are not going to get that, okay?
626000	629000	There's nothing wrong with that. We have to see what the costs are.
629000	632000	And the other thing we have to do is determine problem fit.
632000	636000	Sometimes you can take on this big solution, you know, part of which solves your problem,
636000	640000	but you've taken on this big thing, you know, and only part of it really addresses your problem.
640000	643000	Do you want that whole big thing? Is it really a fit?
643000	648000	Is there a smaller solution or answer that's a closer fit?
648000	652000	Because both may solve the problem. You're going to have a set of choices here.
652000	661000	So I think design is really important. I mean, that's what I do and I know a lot of other people do it.
661000	665000	But I think it's important to enumerate why it's good to spend time on this.
665000	668000	A design helps you understand a system, right?
668000	672000	Without a design, you're sort of flailing around wondering, why is this this way?
672000	677000	A design helps us coordinate. That becomes obvious as you get into, you know, having teams.
677000	680000	You can't build two things and never have talked to each other.
680000	683000	If you don't have an agreed upon plan written down somewhere,
683000	687000	it's unlikely that your two things are going to plug in together and work.
687000	692000	You know, it's like finding a napkin, you know, what we wrote it on.
692000	694000	Design helps extension, right?
694000	700000	To the extent that you've broken things into separate parts with an eye towards connecting them back together,
700000	704000	it means that your resulting design is going to have connection points.
704000	711000	And when you want your system to do something new, it will be possible to do it because there's something there.
711000	715000	That's why design is not just about, you know, accreting up to an answer.
715000	718000	Because when you do that, you don't end up with any connecting points.
718000	722000	You don't end up with any building blocks and you can't really extend that thing.
722000	728000	Similarly, the flip side of that is to the extent you've broken your problem down into reusable parts and compose them,
728000	733000	those parts may be separable from your design and useful in another context, right?
733000	735000	And that's how we get reuse.
735000	737000	Reuse comes from design.
737000	741000	It doesn't come from language constructs or anything like that.
741000	746000	Of course, everyone does design driven testing, right?
746000	748000	Because that's the right kind of testing.
748000	755000	If you have designs and they specify things well and you have some automated way to go from that specification to a test,
755000	757000	that's good testing.
757000	759000	Everything else is backwards.
759000	762000	And the last thing I think, one of the main reasons people say,
762000	764000	I can't do design is I don't have time.
764000	766000	I don't have time to do design.
766000	771000	But I will make the argument that design is the key to more efficiency
771000	778000	because it's a lot easier to iterate a design than it is to iterate a solution or an implementation.
778000	781000	And even after you've got an implementation, right?
781000	787000	Because I said it's iterative, so you're going to have some form of iteration.
787000	792000	After you've done this kind of design and you're iterating and you need to do more design,
792000	796000	that design often takes the form of, ah, you know what, this part of the system,
796000	799000	I actually didn't break down enough.
799000	801000	I need to break it down more.
801000	803000	I need to take this thing and split it in half.
803000	805000	And that's what I find most often.
805000	808000	When I have more to do in an iterative design process,
808000	813000	it's almost always because I look at something and say, ah, that's still doing more than one thing.
813000	815000	I just need to cut it in half.
815000	820000	And it ends up that that kind of further decomposition is really easy to integrate
820000	824000	in an ongoing process in further development.
824000	826000	So it is possible to do iterative design,
826000	829000	especially when you think about design as taking things apart.
829000	831000	You can always take something more apart.
831000	833000	It's great.
833000	838000	Okay, so this talk is going to be about design, composition, and performance.
838000	842000	And I know, you know, when you think about composition and performance,
842000	845000	you think about bar talk and culturing.
845000	847000	I know I do.
847000	850000	So this is the great thing about the dictionary,
850000	852000	is that, you know, there's the first definition,
852000	855000	and then there's, like, more definition.
855000	857000	And so there are more definitions, obviously,
857000	859000	and more notions of the word composition and performance.
859000	863000	And this is near and dear to me because, as the intro said,
863000	865000	this is my background.
865000	869000	How many people don't know who bar talk or culturing are?
869000	871000	It's okay if you don't.
871000	874000	So bar talk was a Hungarian composer who sort of bridged
874000	877000	the Romantic era and the modern era.
877000	883000	And a phenomenal composer who had a great interest in the folk music of Hungary
883000	888000	and really advanced, I think, still to this day,
888000	892000	modern composition in very interesting ways.
892000	898000	And John Coltrane, and by the way, was also a pianist and performer,
898000	901000	and teacher of piano.
901000	907000	John Coltrane is, you know, possibly one of the best improvisers
907000	909000	humanity has ever produced.
909000	913000	A fantastic saxophone player, played fundamentally, you know,
913000	916000	mostly tenor and here soprano sax.
916000	921000	He was also a composer and wrote very interesting tunes
921000	923000	and advanced jazz harmony in those tunes.
923000	926000	But he's going to play the role of performer today.
926000	929000	So we have bar talk, the composer, and Coltrane, the performer.
929000	933000	So when we talk about composition, and in particular music composition,
933000	935000	you know, what are we talking about?
935000	937000	Now we're into the arts, right?
937000	939000	And it's quite interesting, right?
939000	943000	Because the arts usually are not about solving real-world problems at all.
943000	946000	But if you look at any of the art forms,
946000	948000	where there's somebody like a composer,
948000	950000	it could be a choreographer or anything like that,
950000	954000	the first thing these people do, they have blank slate.
954000	958000	They have like blank staff of music, blank page, empty stage.
958000	962000	The first thing they do is they make problems for themselves.
962000	964000	They set up a set of constraints,
964000	968000	under which they're going to form an artistic work.
968000	973000	It's quite interesting that they create their own problems to solve.
973000	977000	From there, and this happens again for all these different forms,
977000	980000	and from there they now have a design problem.
980000	983000	They're like, oh great, I just made myself a design problem,
983000	985000	now I can go and design.
985000	987000	Now I can go try to solve this problem,
987000	990000	solve those constraints I've set up for myself,
990000	997000	and make a plan, which will be realized by performers.
997000	1000000	So when we look at music composition,
1000000	1003000	it's quite interesting that there's a variety of specificity
1003000	1006000	and scale to the designs that are created.
1006000	1009000	Often you'll see fully orchestrated pieces,
1009000	1012000	so classical music is typically this way,
1012000	1017000	where every note that's going to be played by every instrument is specified in a score.
1017000	1021000	What's particularly interesting, I think, about music composition here,
1021000	1027000	is that this specificity is much more common, the larger the scale.
1027000	1029000	They're taking on bigger problems,
1029000	1032000	and the bigger the problem they take on, the more they specify.
1032000	1035000	It's kind of unusual, I think.
1035000	1039000	The other kinds of compositions you see are like songs.
1039000	1042000	We'll take the lyrics out of the picture and just say melody and changes.
1042000	1046000	And here, you're giving the suggestion of what the piece is going to be,
1046000	1048000	but the specifics are left out.
1048000	1051000	This kind of design just says, here's the melody, here's the harmony,
1051000	1054000	and everything else is going to be left to the performers.
1054000	1058000	They have a lot more latitude, and with that a lot more responsibility.
1058000	1063000	I think one of the things that's interesting is that software straddles these two worlds.
1063000	1066000	We tend, when we're working on the smallest part of the system,
1066000	1068000	to have the most specificity in our designs,
1068000	1071000	and we're working at the largest scale in our systems,
1071000	1073000	we have the least specificity.
1073000	1079000	But I think that one of the things that programmers are afraid of
1079000	1082000	are these large-scale designs that are going to completely tell them what to do.
1082000	1085000	They're like, don't repress me, man, I don't want to see this.
1085000	1087000	And certainly, that was well-founded.
1087000	1091000	In the 80s, people thought people would make pictures and push buttons
1091000	1094000	and get COBOL to come out.
1094000	1096000	And that would be what software was going to become.
1096000	1101000	So programmers were legitimately skeptical, if not afraid of that.
1101000	1104000	So here we have two examples of what I'm talking about.
1104000	1108000	The piece on the left is a segment of Bartok's Concerto for Orchestra.
1108000	1112000	You can't see the details, but there's all the woodwind parts
1112000	1116000	and the percussion and the string parts all completely specified.
1116000	1123000	The phrasing, the tempo,
1123000	1125000	everything is completely notated.
1125000	1129000	Although not totally completely, because you see this has been written on,
1129000	1133000	and it's been written on by the one person who has some latitude in this kind of an approach,
1133000	1135000	which is the conductor.
1135000	1139000	And of course, the conductor struggled with some things that might not have been said,
1139000	1144000	like they have to translate the Italian tempo markings into actual beats per minute.
1144000	1147000	And there's lots of contention about how to do that.
1147000	1149000	On the right, we have a completely different kind of composition.
1149000	1151000	This is my favorite things.
1151000	1154000	It's Richard Rogers from Sound of Music.
1154000	1160000	That's a very pretty song, but you can see here just roughly that very little is specified.
1160000	1162000	There's a melody and then some chord changes.
1162000	1167000	And John Coltrane quite famously did a rendition of this piece,
1167000	1170000	which is absolutely gorgeous, and if you've never heard it,
1170000	1176000	you need to hear it before you die, because it's great, really, really great.
1176000	1179000	But you see the difference in how much is specified.
1179000	1183000	So we've talked a little bit about constraints already in design,
1183000	1186000	and again, it's the same kind of thing happens here in music composition.
1186000	1190000	Most compositions are about something, and this is true also.
1190000	1194000	Most dances are about something, and most plays are about something,
1194000	1197000	and most screenplays are about something, or a few things.
1197000	1208000	So this problem that the composers and artists set aside for themselves are normally pretty simple.
1208000	1215000	They try to focus on one or a few ideas, and in music that would be melodic or timbral or rhythmic kinds of ideas.
1215000	1222000	And they're going to take this fundamental idea and work it out, resolve it,
1222000	1226000	try to see what it's about, try to explore what it means.
1226000	1231000	And when you get to larger scales, like when Bartok does these larger compositions,
1231000	1235000	you end up with this set of constraints at each level.
1235000	1240000	The larger works just have more structural components, but they're very stratified.
1240000	1247000	So he has all kinds of techniques for dealing with harmony in the small and form in the large.
1247000	1251000	On the flip side now, we have the performer's space improvisation,
1251000	1255000	and the route there takes us to not foreseen or not provided.
1255000	1258000	So it hasn't all been written down in advance.
1258000	1260000	It's not completely specified.
1260000	1266000	There's this melody and these changes, and they provide constraints for a performer
1266000	1269000	who has to provide the variations on the fly.
1269000	1279000	The thing I think that's really important here is some people think that improvisation is some genius just spontaneously emoting.
1279000	1283000	It is not that. It is not the way it works.
1283000	1286000	The best improvisers practice the most,
1286000	1291000	and John Coltrane is a great example of somebody who practiced an amazing amount of time
1291000	1294000	and studied quite extensively.
1294000	1301000	And what you end up hearing when you hear an improvisation is an application of a lot of knowledge
1301000	1305000	and a tremendous amount of vocabulary.
1305000	1313000	It's almost like dynamic composition that's happening in these improvisations.
1313000	1317000	And you can tell, like now there are a lot of releases that include the outtakes.
1317000	1320000	So you go and you listen to this thing, and you listen to the first track,
1320000	1322000	and it's like, I've been listening to this for years.
1322000	1324000	It was amazing he came up with this.
1324000	1329000	And you listen to the outtakes, and there's like five takes with very, very similar solos.
1329000	1335000	I mean, Coltrane was working out this composition he was going to perform dynamically,
1335000	1339000	but the resources behind it were things that he had prepared.
1339000	1342000	He didn't just make it up as he went along.
1342000	1345000	So it's this delicate balance of being able to be dynamic,
1345000	1348000	but having compositional sensibilities to apply on the fly.
1348000	1351000	That's what developers need.
1351000	1355000	So there's another great term in this space called harmony,
1355000	1359000	and the dictionary definition says a chord, a congruity,
1359000	1364000	and that makes sense, the degree to which things fit together.
1364000	1369000	Specifically in music, we get this notion of simultaneity.
1369000	1373000	So melody is about sequentiality, and harmony is about simultaneity.
1373000	1375000	When things are sounding at the same time,
1375000	1378000	whether it's an instrument that can play a chord or an ensemble,
1378000	1383000	where all the instruments playing at the same time yields a combination of tones.
1383000	1386000	There's another notion of harmony, which is sort of the rulebook.
1386000	1391000	There's a mathematics to harmony, which is sort of something you could study.
1391000	1394000	It's an art or a science. I don't know, you could have that argument later.
1395000	1397000	But there is this sort of system.
1397000	1401000	There are systems about how things fit together that you could study.
1401000	1407000	And I will argue here that harmonic sensibility is of critical design skill.
1407000	1412000	This is really what you need to acquire if you want to make systems that are going to work.
1412000	1417000	So I like Bartok and Coltrane as examples, because both of them were masters of harmony.
1417000	1421000	And by this, I don't mean they were masters of the rulebook.
1421000	1425000	They were masters of the notion of harmony.
1425000	1429000	And in fact, both of them were students of harmoniousness.
1429000	1437000	If you look at their careers and what they did, Bartok came from a romantic tradition
1437000	1442000	and was aware of a lot of intellectual exercises going on in composition to try to modernize it,
1442000	1447000	break free of the old rules of diatonic harmony, and go to new rules.
1447000	1451000	We're going to get rid of those constraints and just have different constraints.
1451000	1455000	And he sort of never really went there with serialism.
1455000	1462000	He stuck with essentially tonal systems, but he went beyond the rules.
1462000	1465000	He tried to figure out what exactly worked and didn't work.
1465000	1470000	And he explored, for instance, this Hungarian folk music, which was tonal,
1470000	1474000	but didn't follow the classical rulebook because it was folk.
1474000	1477000	It wasn't academic.
1477000	1480000	And similarly, you see Coltrane doing the exact same thing.
1480000	1487000	On giant steps, there's this famous reharmonization system that he developed
1487000	1493000	that really broke the rules of the day, but were fundamentally about retaining
1493000	1499000	what worked about harmony and finding new ways to figure out things that worked together.
1499000	1506000	So they both essentially developed new systems while retaining a focus on what fits together.
1506000	1511000	And I think that artistically, they're just tremendous artists
1511000	1514000	because there was a lot of intellectual effort.
1514000	1517000	If you look at the insides of some of what Coltrane is doing,
1517000	1522000	it just seems like the most emotional thing, but there's a tremendous amount of intellectual stuff going on there.
1522000	1524000	It's the same thing with Bartok.
1524000	1528000	You can listen to some piece that will make you cry, and then you go and you look at the score,
1528000	1531000	and it's full of Fibonacci ratios.
1531000	1535000	It's like, oh my God, that's really cool.
1535000	1539000	All right, so what does this have to do with anything that we do?
1539000	1544000	Closure, programming languages, tools, or anything like that.
1544000	1546000	Is closure like a song?
1546000	1549000	Is it like a symphony?
1549000	1551000	Is it like these things?
1551000	1554000	Are languages like these things?
1554000	1559000	What are they like if we're going to play the like game?
1559000	1562000	They're like instruments.
1562000	1564000	So let's look at instruments.
1564000	1566000	This is one I'm particularly fond of.
1566000	1570000	I happen to have one that's just like this.
1570000	1573000	Instruments are particularly interesting.
1573000	1576000	Instruments start with something called an excitation.
1576000	1579000	Again, we see the same notion.
1579000	1582000	Most instruments are about one thing.
1582000	1592000	Whether you're going to pluck a string, cause a reed to vibrate, whack on a string, whack on a drum skin.
1592000	1597000	There's this fundamental excitation, and the rest of the instrument is completely about it.
1597000	1601000	It's about shaping it and conveying it.
1601000	1606000	Then any particular instrument is going to provide some sort of human control interface.
1606000	1608000	These are all interfaces.
1608000	1610000	They're really good interfaces.
1610000	1611000	You should study them.
1611000	1613000	They're very interesting.
1613000	1618000	Whether it's keys on the piano or on the saxophone, frets on a guitar, and pedals on a piano.
1618000	1621000	All instruments have these things.
1621000	1629000	Most of them at least fundamentally address pitch and also volume, but they can do other things as well.
1629000	1635000	So this is where the performer can exercise control.
1635000	1640000	Then the rest of the instrument is oriented towards projecting this excitation.
1640000	1649000	So there's an excitation that you get to shape, and the rest of the instrument is about directing the energy at a particular outcome.
1649000	1653000	Usually it's about directing the sound at the audience.
1653000	1662000	But when you try to extract the ideas out of this, there's a fundamental idea, and the rest of the instrument is about directing it at a good outcome.
1662000	1667000	There's another interesting aspect of instruments, which is that while there is this initial excitation,
1667000	1675000	once you get an instrument in play, once you get this body that has some air inside of it, it has its own modes of vibration.
1675000	1682000	So it will tend to vibrate at certain frequencies, and that's known as the resonance of an instrument.
1682000	1685000	And this is sort of the harmony of the physics of instruments.
1685000	1696000	A good instrument designer is going to try to make an instrument whose fundamental resonances are compatible with the excitation.
1696000	1700000	So again, the harmony sort of comes into play.
1700000	1704000	When we look at instruments, we see that they're incredibly limited.
1704000	1711000	The piano can't even play any in-between notes, so it only plays exactly the notes to which the keys correspond.
1711000	1717000	And a saxophone can't play more than one note at a time, except with some advanced techniques.
1717000	1720000	And even then, it can't play arbitrary pairs of notes at a time.
1720000	1724000	Most instruments are minimal, yet in some way sufficient.
1724000	1732000	So an instrument may have a limited range, but if it's an instrument designed for western music within that range, it probably has all the notes.
1732000	1740000	But there may be other things that are limits, like certain transitions between notes or registers might be awkward or impossible.
1740000	1748000	But there are instruments that don't comply, like a blues harmonica doesn't have all the notes. It has only one key at a time.
1748000	1751000	And that's a little bit like our DSLs.
1752000	1757000	The thing is that players overcome these things. How many people here play piano?
1757000	1762000	So how do you overcome the fact that there are no in-between notes? What do you do?
1762000	1771000	Trills and grace notes and things like that are all techniques piano players and piano composers use to deal with the fact that there's no in-between notes.
1771000	1781000	Coltrane, quite famously, because he had such dexterity and speed on the saxophone, had this technique that was coined, the sheets of sound,
1781000	1792000	where he could play scales so fast that he could give you the effect as if there was harmony, even though he could only really play one note at a time.
1792000	1797000	So they can fix this stuff by performance.
1797000	1805000	Because otherwise what are we going to do? We're going to submit a patch for pianos? Let's fix that nasty one note at a time, no in-between notes problem.
1805000	1812000	So why don't we do this? Why haven't all these things been fixed? Why hasn't the saxophone been fixed to play more than one note?
1812000	1819000	And the reason is that no one wants to play a choose-a-phone. No one wants to be a choose-a-phone player.
1819000	1829000	Alright, some people do want to be a choose-a-phone. Let me say this then, no one wants to compose for choose-a-phone.
1829000	1838000	Let's imagine you had an orchestra where everyone was sitting in front of one of these. This is a modular synthesizer if you don't know.
1838000	1847000	It's an electronic instrument where you patch together modules that are either tone generators or filters or things like that.
1847000	1852000	And eventually you can control it with a keyboard or some other sort of source.
1852000	1857000	But what happens if you try to compose where the bass units are things like this?
1857000	1865000	Well you have this problem, right? Your fundamental target is complex. Each subcomponent you're trying to reuse is really complex.
1865000	1872000	You also have this nested design problem. As a composer, composers study the instruments, they study flute,
1872000	1877000	and they learn what the range is and what transitions are good and what transitions are bad, what's hard and what's easy.
1877000	1881000	And they learn that for the entire orchestra, and they can look at a flute or think about a flute and know,
1881000	1889000	I know what flute is about and what it can do, and therefore I can use that knowledge to build something that uses flute and violin and whatever
1889000	1895000	and make something that works together. But if each piece is complex, then you end up with this nested design problem.
1895000	1899000	You can't look at one of these things and know what it's going to sound like when you press the key.
1899000	1905000	And it may do something completely different tomorrow. And if you were wondering what would happen if you pulled out one of the wires,
1905000	1913000	that's a good question. It's totally fair. So it's hard to build things out of things like this.
1913000	1920000	Other interesting things about instruments. Instruments are made for people who can play them.
1920000	1925000	Isn't that outrageous? Isn't that scandalous?
1926000	1934000	They're made for people who can actually play them. And that's a problem, right? Because beginners can't play.
1934000	1941000	They're not yet players. They don't know how to do it. Again, I think there should be outrage on the internet.
1941000	1949000	We should submit patches. We should fix the cello. Should cellos auto-tune?
1949000	1956000	Or maybe they should have red and green lights. It's green when you're in tune and it's red when you're not in tune.
1956000	1967000	Or maybe they shouldn't make any sound at all until you get it right. Is that how it works? Is that what we want?
1967000	1977000	No, that's not how it works. Look at these kids. They're being subjected to cellos. There's nothing helping them here.
1978000	1983000	Although apparently their shoes have been taken away until they get it right.
1983000	1989000	But otherwise, they're smaller, but those are real cellos. They're hard to play. They're awkward. They sound terrible.
1989000	1994000	They're going to be out of tune. It's going to be tough for a while for these kids.
1994000	2000000	But if they had any of those kinds of aids, they would never actually learn to play cello.
2000000	2004000	They'd never learn to hear themselves and to tune themselves and to listen.
2004000	2012000	Playing a cello is about being able to hear more than anything else. That's true of most instruments.
2012000	2018000	We need players. Here's where I would rant. I'm not going to rant.
2018000	2028000	I'm going to rant a little bit. As a simple example, here's a guitar player, a harp player, a double bass player, all holding up their blisters.
2028000	2034000	Imagine if you downloaded a library off the internet and it gave you blisters.
2034000	2043000	The horror. Yet every musician has overcome a barrier to entry similar to this.
2043000	2050000	The thing we have to remember is that humans are incredibly capable. In particular, we are really, really good learners.
2050000	2057000	We've just evolved to learn. That's what we do. The other thing we're really good at is teaching.
2057000	2063000	The thing is that neither of these things are effort-free. They take time. They take effort.
2063000	2071000	We should not sell humanity short by trying to solve the problem of beginners in our stuff.
2071000	2079000	We need to make things for people to use and we need to teach people and trust people to be able to learn how to do that.
2079000	2087000	Fundamentally, we are novices and the thing is we're only absolute beginners for a very short period of time.
2087000	2094000	On the flip side, we're beginners forever. We never totally get it. We're going to be learning on an ongoing basis.
2094000	2102000	This is just the human condition. This is not something to be fixed. It's not something to submit a patch for. This is how it works.
2102000	2116000	Effort is not a bad thing. These are two guys who are experts and yet they're still trying. This is not autocomplete.
2116000	2122000	Just as we shouldn't target beginners in our designs, nor should we try to eliminate all effort.
2122000	2131000	It's an anti-pattern. It's not going to yield a good instrument. It's okay for there to be effort.
2131000	2140000	Another interesting thing about instruments is that they're usually for one user. This is a tool meant for two people to use at the same time.
2140000	2147000	That's extremely rare for tools or instruments to be for more than one person to play at the same time.
2147000	2153000	And yet we have these complicated T-mux, whatever things that people pair at.
2153000	2164000	I don't really want to despair because while I personally don't understand it, I can see analogies, for instance, rather than two musicians at the same instrument to two musicians playing in the same room.
2164000	2173000	And that obviously has good effects. But you have to wonder, is this just a way to keep somebody from typing all the time?
2173000	2181000	If we haven't otherwise built in time for design, is pairing one way that we're trying to buy it? It's a fair question.
2181000	2191000	So what should the ratio be between planning and performance? What's the ratio of time spent practicing and studying versus performing and recording?
2191000	2199000	For musicians, how many people here are musicians who play an instrument? It's usually pretty high amongst people in the software world.
2199000	2204000	Do you spend more time practicing or on stage? Definitely practicing.
2204000	2210000	If you're hired to perform in an orchestra, they don't even book you for even half of your time to actually sit in the orchestra.
2210000	2213000	They know you're going to have to spend time shedding.
2213000	2224000	I don't know why, as software developers, we think we can just show up. How many people here dedicate 50% or more of their time to not programming?
2224000	2229000	Not too many. Everybody else practices.
2229000	2236000	Obviously, we went to school and studied whatever we studied, but musicians are not like, well, I went to school, so now I don't need to practice anymore.
2236000	2242000	I'm just going to go and show up at the orchestra and they're going to let me play because I showed up.
2242000	2250000	This is a great quote. You have to prepare to be creative and you have to keep preparing to be creative, or else it's not going to happen.
2250000	2256000	You can't just show up and play. But I know there's going to be complaints.
2257000	2264000	We're in a whole different space. Culturing couldn't build a website in a day.
2264000	2272000	I don't know why this has become so important to us. It's really a stupid thing to be important, especially to an entire industry.
2272000	2277000	I'm not really going to spend a lot of time on that, but it is a fair question to say, in what ways is this different?
2277000	2283000	In software, we seem to have all these ones and zeros and so many ways to put them together.
2283000	2290000	It's not as simple as making an instrument. It's not wood and metal. We just have this sort of infinite nature to our resources.
2290000	2297000	How does that impact the difference in how design works? Well, I just have to show this.
2297000	2309000	Obviously, as soon as we had the ability to make sound by using electricity, so having electricity drive a speaker and have the speaker vibrate and have sound come through the room.
2309000	2318000	The initial applications where we recorded sound with microphones somehow captured it or transferred it live, and then the wire hit a speaker and then it came out on the other side.
2318000	2327000	But as soon as that capability was there, people started imagining, well, could we just take out that first part and directly generate some electricity that would sound good when it comes out the speaker?
2327000	2332000	From that was born electronic music and music synthesis.
2332000	2343000	The theremin is one of the earliest synthesizers. It's from, I think, the 20s. It's quite interesting. It has extremely simplistic sound generation capabilities.
2343000	2348000	There's a little oscillator in there and something that changes the waveform very slightly.
2348000	2357000	The way you play a theremin is that those two things, those two pieces of metal, are antenna. The vertical one is controls pitch.
2357000	2363000	The closer you get to the antenna, the higher the pitch. The further away you get, the lower the pitch.
2363000	2370000	The loop antenna controls the volume. The closer you get to the antenna, the lower the volume. The further away, the higher the volume.
2370000	2376000	You play theremin by moving your hand through the air. You do not touch it. It's an extremely simple instrument.
2376000	2382000	But over the years, more and more sophisticated electronic music instruments came about.
2382000	2386000	Those modular synthesizers I showed before are built out of modules.
2386000	2394000	And again, now we're starting to see the same kinds of things we see in software. Modularity, right? There's modules. Each module is about something, right?
2394000	2403000	So there's an oscillator there and a filter. And they have interfaces. They connect together. And it's quite stunning.
2403000	2410000	This is pre-digital. So the way these things communicate is through control voltage, completely analog.
2410000	2419000	Just dynamic voltage variations are what connect them together. And you patch voltage from connector to connector and you build systems.
2419000	2427000	But of course, we also start to see the levels, right? If you look at the back of one of these modules, there's another piece of design there.
2427000	2434000	There's the circuit. And these are analog circuits that determine what the module does.
2434000	2441000	The other thing that's interesting, and it's a little bit hard to see from this diagram, is that each of these knobs has a corresponding jack.
2441000	2447000	In other words, there's a human interface and a machine interface to the same things.
2447000	2453000	And the machine interfaces were there all the time. In fact, they were first. And then the human interfaces come.
2453000	2458000	We have to remember that as design thing, right? What's wrong with SQL?
2458000	2465000	What's wrong with SQL is there's no machine interface to SQL. They only designed a human interface to SQL.
2465000	2469000	And we've suffered ever since, right? Because we have to send these strings around.
2469000	2478000	So you always have a machine. You can always build a human interface on top of a machine interface, but the other is often disgusting.
2478000	2483000	All right. So now we see the things that we start to see in programming, right?
2483000	2490000	There's this whole design stack. This guy, Yves Usan, he's amazing. I think he's like a biochemist or something.
2490000	2496000	And in his spare time, he's a C++ programmer. And in his other spare time, he actually makes these modules.
2496000	2500000	So he designs and builds analog modules. And then, of course, he builds synthesizers.
2500000	2504000	And then he builds sounds with those synthesizers by patching things together.
2504000	2509000	And hopefully, sometimes, he gets to play that little keyboard there and actually make music.
2509000	2515000	But there's this entire stack of design. The design of the modules, the assembly of the modules into a rack thing.
2515000	2520000	So this is your choices. Then the patching, which is designing the sound that the module is going to make.
2520000	2525000	And finally, maybe some music later. So it's interesting to see when that stuff gets captured.
2525000	2533000	So this guy happened to help this company make this synthesizer, which incorporates several of those kinds of modules inside,
2533000	2539000	but doesn't have any wires on the surface. So a bunch of decisions have been made about how the modules will connect together.
2539000	2542000	The oscillator will fill the filter and the envelope generator will control this.
2542000	2547000	And those things were all already decided. This same guy made those decisions.
2547000	2552000	And they were captured in this device that's now a lot closer to the programmer.
2552000	2556000	In fact, you don't see the machine interface at all. There's only the human interface.
2556000	2559000	And it's more like an instrument that you could just turn on and play.
2559000	2563000	Of course, you still have to do some sound design on the top.
2563000	2572000	The important thing to know is that as you start looking at things with these design stacks, you really have to pay attention to where you are in the stack.
2572000	2580000	When this guy is soldering together one of these modules, he's not making music that day.
2580000	2584000	He's not. And this is the problem we have.
2584000	2591000	Our problem is this is what somebody feels like. This is what somebody feels like when you say you should use Emacs.
2591000	2597000	They feel like they want to make music and you handed them a soldering iron. That's what you just did.
2597000	2603000	And why does this happen to us? It happens to us because we use the same stuff all the way down.
2603000	2607000	For us, it's code at every layer. It's always software.
2607000	2612000	In this thing, you do something different when you perform. You do something different when you're a sound designer.
2612000	2615000	You do something different when you assemble modules.
2615000	2621000	And something different still when you wire things together behind the scene.
2621000	2627000	But for software developers, we all have soldering irons. We all can jump to the absolute bottom and mess around.
2627000	2630000	It doesn't actually mean that we're skilled enough to do that.
2630000	2636000	But it's there and it uses the same stuff and we think, well, I got some solder and some spare time.
2636000	2639000	I should design a filter.
2639000	2646000	And I think it yields to a tremendous amount of distraction and also a tremendous amount of expansion.
2646000	2651000	We change things and enhance things because we can because we're all Luthiers.
2651000	2655000	I'm glad. It would be cool to know how to build a guitar.
2655000	2660000	But if I knew how to do that, I'd play less guitar because I'd be fiddling around with wood.
2660000	2663000	And you need to decide what you want to do.
2663000	2667000	So there's a sense in which having a lot of choices, which we seem to always seek.
2667000	2670000	I've got to have choices. Don't repress me, man.
2670000	2673000	It's the opposite of enabling us to accomplish things.
2673000	2681000	And in fact, you'll see time and time again people documenting the fact that constraint is actually a driver.
2681000	2684000	When you have fewer choices, you make them and you get on with it.
2684000	2688000	When you have a ton of choices, you sit around and wonder about things all day.
2688000	2691000	So constraint is a driver of creativity. That's not a new thing.
2691000	2695000	I mean, people have been saying this forever, but this is what they mean. This is where it comes from.
2695000	2705000	So if I was going to advocate anything, it would be as a community and an industry,
2705000	2708000	we spend an unbelievable amount of time catering to ourselves.
2708000	2712000	It's just ridiculous. It really is because we can.
2712000	2716000	Talking about it, enhancing things, adding stuff.
2716000	2723000	You know where this goes. It creates these monsters.
2723000	2729000	And the chances are good that every one of these modules is a good idea.
2729000	2732000	What's to say it is? Every one of these things is a good idea.
2732000	2736000	But if you take every one and you just keep accreting them and adding them together,
2736000	2739000	you end up with something that you can't play.
2739000	2744000	I mean, I don't care if you could configure this thing with spring, right?
2744000	2748000	Nobody wants to play this. And in fact, no one can play this.
2748000	2753000	This one actually plays itself.
2753000	2756000	It's in a museum somewhere and it spontaneously makes music.
2756000	2759000	No one sits at it and tries to play it. It just plays itself.
2759000	2767000	And I'm sure it makes interesting sounds, but I don't think it can play my favorite things.
2767000	2771000	Because it has no memory. It just makes up stuff.
2771000	2776000	So I think the thing we need to keep in mind is there are people who can make music
2776000	2779000	by waving their hands through the air.
2779000	2782000	They don't need Emacs or anything else.
2782000	2787000	They don't need a million options or deep class hierarchies or anything else.
2787000	2791000	Don't start playing this right now. The whole room will be like Derriman, whatever.
2791000	2795000	But it's really cool to listen to this.
2795000	2799000	So getting back to the topic, what is design?
2799000	2803000	I would say on one level design is about imagining things, right?
2803000	2807000	That doesn't mean like imagining that you have every possible option.
2807000	2810000	You want to embrace the constraints because you're going to use them.
2810000	2811000	They're going to help you.
2811000	2815000	The trick is to not let them get you down, right?
2815000	2818000	The key thing to design is saying, I have this set of problems.
2818000	2824000	I have this set of constraints, and I know I can solve that, right?
2824000	2828000	If you combine the optimism with the constraints, you're going to get designs.
2828000	2830000	And so you want to imagine a lot.
2830000	2834000	You want to take these two things and roll with them and try not to like get the first answer,
2834000	2838000	but try to get a lot of answers and then have them to choose from.
2838000	2844000	However, the flip side of design is design is about making decisions, right?
2844000	2849000	After you've got this spectrum of things you think are interesting answers,
2849000	2853000	maybe you thought of a hundred times as many things as you need to.
2853000	2855000	You need to admit very little.
2855000	2857000	You want to mostly say no.
2857000	2860000	Design is about making decisions, right?
2860000	2866000	In fact, the value of a design is in conveying those decisions to the next person, right?
2866000	2870000	When that guy worked on that synthesizer with the company and made those decisions,
2870000	2875000	it's to help out the next person, the musician that doesn't want to solder, right?
2875000	2879000	They need to be able to trust the decisions that prior person made
2879000	2882000	so that they can get on with their level, right?
2882000	2887000	If you leave every option open and you make everything configurable, you're not designing.
2887000	2888000	You're failing to design.
2888000	2890000	You're failing to make decisions and convey them to the next person.
2890000	2892000	You're not actually helping them, right?
2892000	2895000	You're giving them a choose a phone, right?
2895000	2899000	On the performing side, we already saw a little bit of this.
2899000	2902000	Performing is preparing.
2902000	2904000	It's practicing, right?
2904000	2905000	Which we do, right?
2905000	2907000	We do a lot of coding, so we get a lot of practice in it.
2907000	2909000	But it's also studying.
2909000	2919000	And I think the biggest thing in trying to connect performing to developing or coding is this nature, right?
2919000	2927000	Coltrane was great because he had fantastic design sensibilities that he could apply dynamically, right?
2927000	2929000	It wasn't all about his fingers.
2929000	2931000	I mean, he had incredible dexterity.
2931000	2932000	He did, right?
2932000	2937000	He had incredible technique and incredible tone that he got from playing a lot.
2937000	2943000	But what he played was a result of what he studied and the analysis that he did
2943000	2947000	and the thinking that he had done about how music works.
2947000	2954000	If he just had the finger speed and everything else, he wouldn't have been the great player that he was.
2954000	2959000	So, to wrap things up, take things apart.
2959000	2965000	Take things apart not with a hammer and smashing them, but with an eye towards how you're going to put them back together.
2965000	2968000	That's what design is about.
2968000	2970000	You want to design like Bartok.
2970000	2973000	And by that, I don't mean specifying every note for every player.
2973000	2974000	I'm not advocating that.
2974000	2979000	I don't believe that's the way software design is or ever should work.
2979000	2984000	But to think about the way things fit together at every level, the thing you're working on,
2984000	2990000	when you're working on large things as he did, you have to bring the design sensibilities to the small things
2990000	2993000	and to the medium-sized things and to the large things.
2993000	2997000	And often apply different techniques and different ways of thinking for each level,
2997000	3000000	you know, ways that are appropriate.
3000000	3003000	You want to code like Coltrane, right?
3003000	3012000	Bring that harmonic sensibility, bring that design sensibility to the coding that you do and to the code that you write.
3012000	3020000	I think most fundamentally we want to seek out and build languages and libraries that are like instruments
3020000	3027000	in all the ways that I just talked about, in particular in the simplicity aspect.
3027000	3035000	All those things I showed you were different ways to say instruments are simple in that deep way.
3035000	3037000	That's what we want.
3037000	3041000	And finally, to pursue harmony, to actually think about how things fit together,
3041000	3045000	it's real easy to code right out of a problem and then get an answer.
3045000	3051000	But if you haven't thought about how things fit together, that answer is not going to be easy to maintain
3051000	3053000	or easy to change or easy to reuse.
3053000	3057000	So you have to think about harmony as you go.
3057000	3060000	And then go do it.
3060000	3062000	Hope you enjoy the rest of the conference.
3062000	3063000	Thanks.
