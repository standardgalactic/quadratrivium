WEBVTT

00:00.000 --> 00:07.000
Thanks for having me. It's nice to see everybody here, bright-eyed, after a night of heavy thinking.

00:07.000 --> 00:14.000
This is the obligatory legal disclaimer.

00:14.000 --> 00:19.000
Okay, so we're going to talk about design.

00:19.000 --> 00:26.000
And of course, as you all know by now, I don't actually write talks, I just look up stuff in the dictionary.

00:27.000 --> 00:30.000
So I looked it up in the dictionary, I saw this great definition.

00:30.000 --> 00:37.000
Prepare the plans for a work to be executed, especially to plan the form and the structure of that thing.

00:37.000 --> 00:40.000
So there's a lot of really interesting stuff in this definition.

00:40.000 --> 00:46.000
The fact that there's a plan, the fact that upon having the plan, something's going to be done,

00:46.000 --> 00:50.000
and the plan's going to be executed, and that it's about form and structure.

00:50.000 --> 00:51.000
It's really good.

00:51.000 --> 00:53.000
There are other definitions there, one of which is this.

00:53.000 --> 00:55.000
There's nothing wrong with this definition.

00:55.000 --> 00:57.000
This is not what I'm talking about today.

00:57.000 --> 00:59.000
We're not talking about how things look.

00:59.000 --> 01:04.000
At no point today when I say design, am I using this meaning of the word design?

01:04.000 --> 01:09.000
And the root goes back to designare, which means to mark out.

01:09.000 --> 01:11.000
And it's also a very interesting thing.

01:11.000 --> 01:22.000
It has to do sort of with writing, but also with sort of demarcating, right, to designate or to sort of set something aside.

01:22.000 --> 01:29.000
But, you know, most simply we can just say it's about making plans and also writing them down.

01:29.000 --> 01:34.000
Unfortunately, I think that, you know, with all our effort to become agile,

01:34.000 --> 01:39.000
we're letting design become less of what we do.

01:39.000 --> 01:45.000
And so there are a lot of butts when people say, oh, design, you know, it's like, you know, we already write down code.

01:45.000 --> 01:48.000
Do we need to write down design?

01:48.000 --> 01:50.000
You know, do we still need to do designs?

01:50.000 --> 01:54.000
Obviously, it makes sense that if you're going to build a house, right, you can't just say, let's just go build the house.

01:54.000 --> 01:57.000
You have to write something down so that somebody can go build the house,

01:57.000 --> 02:01.000
because the realization of the plan has a different form than the plan, right?

02:01.000 --> 02:06.000
The plan is something written down, but the realization is made of wood and nails and things like that.

02:06.000 --> 02:09.000
But code's already written down, so we have something to read.

02:09.000 --> 02:11.000
You know, do we still need designs?

02:11.000 --> 02:13.000
Or can we just generate them?

02:13.000 --> 02:18.000
Can we just write our program and then generate some documentation from the implementation?

02:18.000 --> 02:22.000
And the answer is no, that's not a plan.

02:22.000 --> 02:25.000
It would be something written down, but it's not a plan.

02:25.000 --> 02:31.000
The other argument you get against design is, oh my god, you know, I lived in the 80s and design stunk.

02:31.000 --> 02:34.000
You know, there were people who thought they could just do everything.

02:34.000 --> 02:42.000
It was all top-down monolithic designs, these giant plans, etched in phone books that never came true.

02:42.000 --> 02:45.000
And it's true that those were plans, but those are not good plans.

02:45.000 --> 02:50.000
That doesn't mean planning is bad, it means that that style of planning is not good.

02:50.000 --> 02:55.000
So what do we mean when we say, what do I mean, when I say good design?

02:55.000 --> 03:02.000
I think one of the most interesting things about design is that people think it's generating this intricate plan.

03:02.000 --> 03:04.000
But designing is not that.

03:04.000 --> 03:07.000
Designing is fundamentally about taking things apart.

03:07.000 --> 03:14.000
It's about taking things apart in such a way that they can be put back together.

03:14.000 --> 03:16.000
If that makes sense.

03:16.000 --> 03:21.000
So separating things into things that can be composed.

03:21.000 --> 03:23.000
That's what design is.

03:23.000 --> 03:32.000
If you just make this intricate thing, you really haven't designed in a way that's going to support the things designs need to support, like change.

03:32.000 --> 03:39.000
Every component of a design should be kind of about one or very few things.

03:39.000 --> 03:44.000
Sort of the nature of it, breaking things down until they're nearly atomic.

03:44.000 --> 03:53.000
And only then do you take those things that you've broken apart and compose them to solve the problem you set out to solve.

03:53.000 --> 03:58.000
But the first job is to take things apart in such a way that you can do that.

03:58.000 --> 04:00.000
And a good design process is iterative.

04:00.000 --> 04:05.000
This isn't a grand plan you do once and then you go and finish.

04:05.000 --> 04:13.000
Obviously there are some kinds of design that you do have to sort of etch in stone because you're going to build a fabrication plant and have few options later.

04:13.000 --> 04:21.000
But in software we know the materials we're working with are so malleable we can get some cycles back to iterate.

04:21.000 --> 04:25.000
So when I say taking things apart, what kinds of things can we take apart?

04:25.000 --> 04:30.000
We can take apart all the things in this list and I'm going to break them down one by one.

04:30.000 --> 04:32.000
So what does it mean to take apart requirements?

04:32.000 --> 04:34.000
This is actually quite important.

04:34.000 --> 04:40.000
Obviously there's a job, another job, also sort of gone wanting these days called analysts.

04:40.000 --> 04:45.000
There used to be analysts and designers and this whole waterfall model.

04:45.000 --> 04:51.000
But there are requirements and usually we get these now directly from customers.

04:51.000 --> 04:56.000
And they often take the form of I want this, I need that, I want, I want, I need, I want, I want.

04:56.000 --> 05:08.000
And the first job we have to do is decompose those wants and needs into problems because obviously underneath all those wants and needs are some problems the customer wants to solve.

05:08.000 --> 05:17.000
And understanding those problems is the key to designing something that solves the problems because oftentimes the design that solves the problems is not what the customer said they wanted or needed.

05:17.000 --> 05:21.000
We separate requirements into knowns and unknowns.

05:21.000 --> 05:25.000
We know how to do some part of this job and we don't know how to do this other part.

05:25.000 --> 05:27.000
That's quite important.

05:27.000 --> 05:32.000
There are problems, now again we're dealing with problems, we're very sorted things.

05:32.000 --> 05:38.000
So there are problems that are on the domain side, possibly some domain expert's going to need to help us solve them.

05:38.000 --> 05:46.000
And other problems that are on the solution side, how will it scale, where will we run it, how much will it cost to operate, how much energy will it use, things like that.

05:46.000 --> 05:52.000
The other thing that we have to take apart are the difference between causes and symptoms.

05:52.000 --> 05:55.000
So sometimes a customer will say I have this problem.

05:55.000 --> 05:58.000
The problem is my screen is black.

05:58.000 --> 06:00.000
And that's not actually the problem.

06:00.000 --> 06:01.000
You know that's not the problem.

06:01.000 --> 06:06.000
The problem is that's a symptom of a problem and the problem is somewhere underneath it.

06:06.000 --> 06:12.000
So another thing you have to do when you're taking things apart is take apart causes and root causes from symptoms.

06:12.000 --> 06:20.000
Because you want to get to causes because the thing your design needs to address are the causes of problems, not the symptoms.

06:20.000 --> 06:27.000
Of course you could just throw up a JPEG over that black screen and you'd be like, it's fixed.

06:27.000 --> 06:31.000
The other requirements are the unstated requirements which are always present.

06:31.000 --> 06:34.000
They're problems that nobody wants to have in the future.

06:34.000 --> 06:37.000
Like I don't want this system to be something I can't maintain.

06:37.000 --> 06:39.000
I don't want it to run out of memory.

06:39.000 --> 06:41.000
I don't want it to run really slowly.

06:41.000 --> 06:47.000
They often don't even say that these are problems because they're just problems, they're future problems they don't want to have.

06:47.000 --> 06:51.000
But they end up being part of the requirements set.

06:51.000 --> 06:53.000
Other things we can take apart.

06:53.000 --> 06:56.000
We can take apart time and order and flow.

06:56.000 --> 07:06.000
The use of cues, the use of item potency, commutation and transactions are all ways in which we can separate apart when things happen.

07:06.000 --> 07:12.000
And often these are the paths to separating apart who does these things.

07:12.000 --> 07:14.000
And these terms become more and more important.

07:14.000 --> 07:18.000
You see them more and more in systems level design.

07:18.000 --> 07:23.000
Communitivity is going to become a huge thing for us to be thinking about.

07:23.000 --> 07:26.000
And then there are times when we really need to know that a bunch of things are going to happen together.

07:26.000 --> 07:33.000
And transactions help keep things separate by keeping things that are supposed to be together.

07:33.000 --> 07:40.000
We take apart places and participants where things are going to happen and what components or processes are going to do them.

07:40.000 --> 07:44.000
This is a classic quote, just add some indirection.

07:44.000 --> 07:45.000
And there is a lot of that.

07:45.000 --> 07:48.000
A lot of design is just putting in appropriate levels of indirection.

07:48.000 --> 07:52.000
But this kind of indirection happens at all levels.

07:52.000 --> 07:57.000
For instance, part of a design incorporates how it's going to be built.

07:57.000 --> 08:05.000
Is it possible for more than one person or more than one team or people working in more than one language to build this system all together?

08:05.000 --> 08:09.000
Or does everybody have to work in the same space at the same time with the same tool?

08:09.000 --> 08:15.000
Then your process for building it isn't going to scale because you haven't taken that apart.

08:15.000 --> 08:17.000
It's another kind of thing you take apart.

08:17.000 --> 08:24.000
This next one I think is really super critical and I think we don't understand it or think about it enough in our software.

08:24.000 --> 08:34.000
Which is the difference between the information our systems is going to manipulate and the mechanisms by which we're going to manipulate it.

08:35.000 --> 08:45.000
To just talk about it simply here, we'll say the set of logged in users in my system is an idea and it will be information that my system is going to need to manage.

08:45.000 --> 08:55.000
But if I have a set class or some sort of set construct in my programming language, that's a mechanism by which I might achieve representing that information.

08:55.000 --> 09:03.000
But unfortunately, because we only have our programming language and our programming language constructs to represent both these things,

09:03.000 --> 09:12.000
we often conflate things that might be appropriate as mechanisms as being appropriate for information and they are desperately not so.

09:12.000 --> 09:18.000
So we have a lot, especially in an object oriented language, you have a lot of very mechanical kinds of classes.

09:18.000 --> 09:24.000
And when you use them to represent information, like for instance any kind of mutable information object,

09:24.000 --> 09:28.000
it's an absolutely atrocious idea. It's really, really bad.

09:28.000 --> 09:34.000
And it comes out of the fact that we're not separating these two things when we're doing our designs.

09:34.000 --> 09:39.000
Finally, after we've gotten something we think might be an answer, we need to take that apart.

09:39.000 --> 09:46.000
So I have maybe one or more possible designs that I think address the problems that I'm trying to take on.

09:46.000 --> 09:52.000
At this point, I have to look at each of those solutions and take them apart from a bunch of perspectives.

09:52.000 --> 09:54.000
What benefits do they provide?

09:54.000 --> 09:58.000
Yes, I think we have no problem with that. Everybody looks at a library, the library is like, it does this, it does that.

09:58.000 --> 10:00.000
You know, it's a floor wax, it's a dessert topping.

10:00.000 --> 10:05.000
You know, it's all benefits. It's all benefits. It's very rare that you see somebody say,

10:05.000 --> 10:10.000
and here's the trade-offs of using this. Here's what's not good about it.

10:10.000 --> 10:15.000
Here's where I decided to do X and I'm not going to be able to do Y.

10:15.000 --> 10:20.000
And being honest about that to ourselves about our own designs is really important.

10:20.000 --> 10:26.000
We all just communicate to stakeholders, right? You are going to get this and you are not going to get that, okay?

10:26.000 --> 10:29.000
There's nothing wrong with that. We have to see what the costs are.

10:29.000 --> 10:32.000
And the other thing we have to do is determine problem fit.

10:32.000 --> 10:36.000
Sometimes you can take on this big solution, you know, part of which solves your problem,

10:36.000 --> 10:40.000
but you've taken on this big thing, you know, and only part of it really addresses your problem.

10:40.000 --> 10:43.000
Do you want that whole big thing? Is it really a fit?

10:43.000 --> 10:48.000
Is there a smaller solution or answer that's a closer fit?

10:48.000 --> 10:52.000
Because both may solve the problem. You're going to have a set of choices here.

10:52.000 --> 11:01.000
So I think design is really important. I mean, that's what I do and I know a lot of other people do it.

11:01.000 --> 11:05.000
But I think it's important to enumerate why it's good to spend time on this.

11:05.000 --> 11:08.000
A design helps you understand a system, right?

11:08.000 --> 11:12.000
Without a design, you're sort of flailing around wondering, why is this this way?

11:12.000 --> 11:17.000
A design helps us coordinate. That becomes obvious as you get into, you know, having teams.

11:17.000 --> 11:20.000
You can't build two things and never have talked to each other.

11:20.000 --> 11:23.000
If you don't have an agreed upon plan written down somewhere,

11:23.000 --> 11:27.000
it's unlikely that your two things are going to plug in together and work.

11:27.000 --> 11:32.000
You know, it's like finding a napkin, you know, what we wrote it on.

11:32.000 --> 11:34.000
Design helps extension, right?

11:34.000 --> 11:40.000
To the extent that you've broken things into separate parts with an eye towards connecting them back together,

11:40.000 --> 11:44.000
it means that your resulting design is going to have connection points.

11:44.000 --> 11:51.000
And when you want your system to do something new, it will be possible to do it because there's something there.

11:51.000 --> 11:55.000
That's why design is not just about, you know, accreting up to an answer.

11:55.000 --> 11:58.000
Because when you do that, you don't end up with any connecting points.

11:58.000 --> 12:02.000
You don't end up with any building blocks and you can't really extend that thing.

12:02.000 --> 12:08.000
Similarly, the flip side of that is to the extent you've broken your problem down into reusable parts and compose them,

12:08.000 --> 12:13.000
those parts may be separable from your design and useful in another context, right?

12:13.000 --> 12:15.000
And that's how we get reuse.

12:15.000 --> 12:17.000
Reuse comes from design.

12:17.000 --> 12:21.000
It doesn't come from language constructs or anything like that.

12:21.000 --> 12:26.000
Of course, everyone does design driven testing, right?

12:26.000 --> 12:28.000
Because that's the right kind of testing.

12:28.000 --> 12:35.000
If you have designs and they specify things well and you have some automated way to go from that specification to a test,

12:35.000 --> 12:37.000
that's good testing.

12:37.000 --> 12:39.000
Everything else is backwards.

12:39.000 --> 12:42.000
And the last thing I think, one of the main reasons people say,

12:42.000 --> 12:44.000
I can't do design is I don't have time.

12:44.000 --> 12:46.000
I don't have time to do design.

12:46.000 --> 12:51.000
But I will make the argument that design is the key to more efficiency

12:51.000 --> 12:58.000
because it's a lot easier to iterate a design than it is to iterate a solution or an implementation.

12:58.000 --> 13:01.000
And even after you've got an implementation, right?

13:01.000 --> 13:07.000
Because I said it's iterative, so you're going to have some form of iteration.

13:07.000 --> 13:12.000
After you've done this kind of design and you're iterating and you need to do more design,

13:12.000 --> 13:16.000
that design often takes the form of, ah, you know what, this part of the system,

13:16.000 --> 13:19.000
I actually didn't break down enough.

13:19.000 --> 13:21.000
I need to break it down more.

13:21.000 --> 13:23.000
I need to take this thing and split it in half.

13:23.000 --> 13:25.000
And that's what I find most often.

13:25.000 --> 13:28.000
When I have more to do in an iterative design process,

13:28.000 --> 13:33.000
it's almost always because I look at something and say, ah, that's still doing more than one thing.

13:33.000 --> 13:35.000
I just need to cut it in half.

13:35.000 --> 13:40.000
And it ends up that that kind of further decomposition is really easy to integrate

13:40.000 --> 13:44.000
in an ongoing process in further development.

13:44.000 --> 13:46.000
So it is possible to do iterative design,

13:46.000 --> 13:49.000
especially when you think about design as taking things apart.

13:49.000 --> 13:51.000
You can always take something more apart.

13:51.000 --> 13:53.000
It's great.

13:53.000 --> 13:58.000
Okay, so this talk is going to be about design, composition, and performance.

13:58.000 --> 14:02.000
And I know, you know, when you think about composition and performance,

14:02.000 --> 14:05.000
you think about bar talk and culturing.

14:05.000 --> 14:07.000
I know I do.

14:07.000 --> 14:10.000
So this is the great thing about the dictionary,

14:10.000 --> 14:12.000
is that, you know, there's the first definition,

14:12.000 --> 14:15.000
and then there's, like, more definition.

14:15.000 --> 14:17.000
And so there are more definitions, obviously,

14:17.000 --> 14:19.000
and more notions of the word composition and performance.

14:19.000 --> 14:23.000
And this is near and dear to me because, as the intro said,

14:23.000 --> 14:25.000
this is my background.

14:25.000 --> 14:29.000
How many people don't know who bar talk or culturing are?

14:29.000 --> 14:31.000
It's okay if you don't.

14:31.000 --> 14:34.000
So bar talk was a Hungarian composer who sort of bridged

14:34.000 --> 14:37.000
the Romantic era and the modern era.

14:37.000 --> 14:43.000
And a phenomenal composer who had a great interest in the folk music of Hungary

14:43.000 --> 14:48.000
and really advanced, I think, still to this day,

14:48.000 --> 14:52.000
modern composition in very interesting ways.

14:52.000 --> 14:58.000
And John Coltrane, and by the way, was also a pianist and performer,

14:58.000 --> 15:01.000
and teacher of piano.

15:01.000 --> 15:07.000
John Coltrane is, you know, possibly one of the best improvisers

15:07.000 --> 15:09.000
humanity has ever produced.

15:09.000 --> 15:13.000
A fantastic saxophone player, played fundamentally, you know,

15:13.000 --> 15:16.000
mostly tenor and here soprano sax.

15:16.000 --> 15:21.000
He was also a composer and wrote very interesting tunes

15:21.000 --> 15:23.000
and advanced jazz harmony in those tunes.

15:23.000 --> 15:26.000
But he's going to play the role of performer today.

15:26.000 --> 15:29.000
So we have bar talk, the composer, and Coltrane, the performer.

15:29.000 --> 15:33.000
So when we talk about composition, and in particular music composition,

15:33.000 --> 15:35.000
you know, what are we talking about?

15:35.000 --> 15:37.000
Now we're into the arts, right?

15:37.000 --> 15:39.000
And it's quite interesting, right?

15:39.000 --> 15:43.000
Because the arts usually are not about solving real-world problems at all.

15:43.000 --> 15:46.000
But if you look at any of the art forms,

15:46.000 --> 15:48.000
where there's somebody like a composer,

15:48.000 --> 15:50.000
it could be a choreographer or anything like that,

15:50.000 --> 15:54.000
the first thing these people do, they have blank slate.

15:54.000 --> 15:58.000
They have like blank staff of music, blank page, empty stage.

15:58.000 --> 16:02.000
The first thing they do is they make problems for themselves.

16:02.000 --> 16:04.000
They set up a set of constraints,

16:04.000 --> 16:08.000
under which they're going to form an artistic work.

16:08.000 --> 16:13.000
It's quite interesting that they create their own problems to solve.

16:13.000 --> 16:17.000
From there, and this happens again for all these different forms,

16:17.000 --> 16:20.000
and from there they now have a design problem.

16:20.000 --> 16:23.000
They're like, oh great, I just made myself a design problem,

16:23.000 --> 16:25.000
now I can go and design.

16:25.000 --> 16:27.000
Now I can go try to solve this problem,

16:27.000 --> 16:30.000
solve those constraints I've set up for myself,

16:30.000 --> 16:37.000
and make a plan, which will be realized by performers.

16:37.000 --> 16:40.000
So when we look at music composition,

16:40.000 --> 16:43.000
it's quite interesting that there's a variety of specificity

16:43.000 --> 16:46.000
and scale to the designs that are created.

16:46.000 --> 16:49.000
Often you'll see fully orchestrated pieces,

16:49.000 --> 16:52.000
so classical music is typically this way,

16:52.000 --> 16:57.000
where every note that's going to be played by every instrument is specified in a score.

16:57.000 --> 17:01.000
What's particularly interesting, I think, about music composition here,

17:01.000 --> 17:07.000
is that this specificity is much more common, the larger the scale.

17:07.000 --> 17:09.000
They're taking on bigger problems,

17:09.000 --> 17:12.000
and the bigger the problem they take on, the more they specify.

17:12.000 --> 17:15.000
It's kind of unusual, I think.

17:15.000 --> 17:19.000
The other kinds of compositions you see are like songs.

17:19.000 --> 17:22.000
We'll take the lyrics out of the picture and just say melody and changes.

17:22.000 --> 17:26.000
And here, you're giving the suggestion of what the piece is going to be,

17:26.000 --> 17:28.000
but the specifics are left out.

17:28.000 --> 17:31.000
This kind of design just says, here's the melody, here's the harmony,

17:31.000 --> 17:34.000
and everything else is going to be left to the performers.

17:34.000 --> 17:38.000
They have a lot more latitude, and with that a lot more responsibility.

17:38.000 --> 17:43.000
I think one of the things that's interesting is that software straddles these two worlds.

17:43.000 --> 17:46.000
We tend, when we're working on the smallest part of the system,

17:46.000 --> 17:48.000
to have the most specificity in our designs,

17:48.000 --> 17:51.000
and we're working at the largest scale in our systems,

17:51.000 --> 17:53.000
we have the least specificity.

17:53.000 --> 17:59.000
But I think that one of the things that programmers are afraid of

17:59.000 --> 18:02.000
are these large-scale designs that are going to completely tell them what to do.

18:02.000 --> 18:05.000
They're like, don't repress me, man, I don't want to see this.

18:05.000 --> 18:07.000
And certainly, that was well-founded.

18:07.000 --> 18:11.000
In the 80s, people thought people would make pictures and push buttons

18:11.000 --> 18:14.000
and get COBOL to come out.

18:14.000 --> 18:16.000
And that would be what software was going to become.

18:16.000 --> 18:21.000
So programmers were legitimately skeptical, if not afraid of that.

18:21.000 --> 18:24.000
So here we have two examples of what I'm talking about.

18:24.000 --> 18:28.000
The piece on the left is a segment of Bartok's Concerto for Orchestra.

18:28.000 --> 18:32.000
You can't see the details, but there's all the woodwind parts

18:32.000 --> 18:36.000
and the percussion and the string parts all completely specified.

18:36.000 --> 18:43.000
The phrasing, the tempo,

18:43.000 --> 18:45.000
everything is completely notated.

18:45.000 --> 18:49.000
Although not totally completely, because you see this has been written on,

18:49.000 --> 18:53.000
and it's been written on by the one person who has some latitude in this kind of an approach,

18:53.000 --> 18:55.000
which is the conductor.

18:55.000 --> 18:59.000
And of course, the conductor struggled with some things that might not have been said,

18:59.000 --> 19:04.000
like they have to translate the Italian tempo markings into actual beats per minute.

19:04.000 --> 19:07.000
And there's lots of contention about how to do that.

19:07.000 --> 19:09.000
On the right, we have a completely different kind of composition.

19:09.000 --> 19:11.000
This is my favorite things.

19:11.000 --> 19:14.000
It's Richard Rogers from Sound of Music.

19:14.000 --> 19:20.000
That's a very pretty song, but you can see here just roughly that very little is specified.

19:20.000 --> 19:22.000
There's a melody and then some chord changes.

19:22.000 --> 19:27.000
And John Coltrane quite famously did a rendition of this piece,

19:27.000 --> 19:30.000
which is absolutely gorgeous, and if you've never heard it,

19:30.000 --> 19:36.000
you need to hear it before you die, because it's great, really, really great.

19:36.000 --> 19:39.000
But you see the difference in how much is specified.

19:39.000 --> 19:43.000
So we've talked a little bit about constraints already in design,

19:43.000 --> 19:46.000
and again, it's the same kind of thing happens here in music composition.

19:46.000 --> 19:50.000
Most compositions are about something, and this is true also.

19:50.000 --> 19:54.000
Most dances are about something, and most plays are about something,

19:54.000 --> 19:57.000
and most screenplays are about something, or a few things.

19:57.000 --> 20:08.000
So this problem that the composers and artists set aside for themselves are normally pretty simple.

20:08.000 --> 20:15.000
They try to focus on one or a few ideas, and in music that would be melodic or timbral or rhythmic kinds of ideas.

20:15.000 --> 20:22.000
And they're going to take this fundamental idea and work it out, resolve it,

20:22.000 --> 20:26.000
try to see what it's about, try to explore what it means.

20:26.000 --> 20:31.000
And when you get to larger scales, like when Bartok does these larger compositions,

20:31.000 --> 20:35.000
you end up with this set of constraints at each level.

20:35.000 --> 20:40.000
The larger works just have more structural components, but they're very stratified.

20:40.000 --> 20:47.000
So he has all kinds of techniques for dealing with harmony in the small and form in the large.

20:47.000 --> 20:51.000
On the flip side now, we have the performer's space improvisation,

20:51.000 --> 20:55.000
and the route there takes us to not foreseen or not provided.

20:55.000 --> 20:58.000
So it hasn't all been written down in advance.

20:58.000 --> 21:00.000
It's not completely specified.

21:00.000 --> 21:06.000
There's this melody and these changes, and they provide constraints for a performer

21:06.000 --> 21:09.000
who has to provide the variations on the fly.

21:09.000 --> 21:19.000
The thing I think that's really important here is some people think that improvisation is some genius just spontaneously emoting.

21:19.000 --> 21:23.000
It is not that. It is not the way it works.

21:23.000 --> 21:26.000
The best improvisers practice the most,

21:26.000 --> 21:31.000
and John Coltrane is a great example of somebody who practiced an amazing amount of time

21:31.000 --> 21:34.000
and studied quite extensively.

21:34.000 --> 21:41.000
And what you end up hearing when you hear an improvisation is an application of a lot of knowledge

21:41.000 --> 21:45.000
and a tremendous amount of vocabulary.

21:45.000 --> 21:53.000
It's almost like dynamic composition that's happening in these improvisations.

21:53.000 --> 21:57.000
And you can tell, like now there are a lot of releases that include the outtakes.

21:57.000 --> 22:00.000
So you go and you listen to this thing, and you listen to the first track,

22:00.000 --> 22:02.000
and it's like, I've been listening to this for years.

22:02.000 --> 22:04.000
It was amazing he came up with this.

22:04.000 --> 22:09.000
And you listen to the outtakes, and there's like five takes with very, very similar solos.

22:09.000 --> 22:15.000
I mean, Coltrane was working out this composition he was going to perform dynamically,

22:15.000 --> 22:19.000
but the resources behind it were things that he had prepared.

22:19.000 --> 22:22.000
He didn't just make it up as he went along.

22:22.000 --> 22:25.000
So it's this delicate balance of being able to be dynamic,

22:25.000 --> 22:28.000
but having compositional sensibilities to apply on the fly.

22:28.000 --> 22:31.000
That's what developers need.

22:31.000 --> 22:35.000
So there's another great term in this space called harmony,

22:35.000 --> 22:39.000
and the dictionary definition says a chord, a congruity,

22:39.000 --> 22:44.000
and that makes sense, the degree to which things fit together.

22:44.000 --> 22:49.000
Specifically in music, we get this notion of simultaneity.

22:49.000 --> 22:53.000
So melody is about sequentiality, and harmony is about simultaneity.

22:53.000 --> 22:55.000
When things are sounding at the same time,

22:55.000 --> 22:58.000
whether it's an instrument that can play a chord or an ensemble,

22:58.000 --> 23:03.000
where all the instruments playing at the same time yields a combination of tones.

23:03.000 --> 23:06.000
There's another notion of harmony, which is sort of the rulebook.

23:06.000 --> 23:11.000
There's a mathematics to harmony, which is sort of something you could study.

23:11.000 --> 23:14.000
It's an art or a science. I don't know, you could have that argument later.

23:15.000 --> 23:17.000
But there is this sort of system.

23:17.000 --> 23:21.000
There are systems about how things fit together that you could study.

23:21.000 --> 23:27.000
And I will argue here that harmonic sensibility is of critical design skill.

23:27.000 --> 23:32.000
This is really what you need to acquire if you want to make systems that are going to work.

23:32.000 --> 23:37.000
So I like Bartok and Coltrane as examples, because both of them were masters of harmony.

23:37.000 --> 23:41.000
And by this, I don't mean they were masters of the rulebook.

23:41.000 --> 23:45.000
They were masters of the notion of harmony.

23:45.000 --> 23:49.000
And in fact, both of them were students of harmoniousness.

23:49.000 --> 23:57.000
If you look at their careers and what they did, Bartok came from a romantic tradition

23:57.000 --> 24:02.000
and was aware of a lot of intellectual exercises going on in composition to try to modernize it,

24:02.000 --> 24:07.000
break free of the old rules of diatonic harmony, and go to new rules.

24:07.000 --> 24:11.000
We're going to get rid of those constraints and just have different constraints.

24:11.000 --> 24:15.000
And he sort of never really went there with serialism.

24:15.000 --> 24:22.000
He stuck with essentially tonal systems, but he went beyond the rules.

24:22.000 --> 24:25.000
He tried to figure out what exactly worked and didn't work.

24:25.000 --> 24:30.000
And he explored, for instance, this Hungarian folk music, which was tonal,

24:30.000 --> 24:34.000
but didn't follow the classical rulebook because it was folk.

24:34.000 --> 24:37.000
It wasn't academic.

24:37.000 --> 24:40.000
And similarly, you see Coltrane doing the exact same thing.

24:40.000 --> 24:47.000
On giant steps, there's this famous reharmonization system that he developed

24:47.000 --> 24:53.000
that really broke the rules of the day, but were fundamentally about retaining

24:53.000 --> 24:59.000
what worked about harmony and finding new ways to figure out things that worked together.

24:59.000 --> 25:06.000
So they both essentially developed new systems while retaining a focus on what fits together.

25:06.000 --> 25:11.000
And I think that artistically, they're just tremendous artists

25:11.000 --> 25:14.000
because there was a lot of intellectual effort.

25:14.000 --> 25:17.000
If you look at the insides of some of what Coltrane is doing,

25:17.000 --> 25:22.000
it just seems like the most emotional thing, but there's a tremendous amount of intellectual stuff going on there.

25:22.000 --> 25:24.000
It's the same thing with Bartok.

25:24.000 --> 25:28.000
You can listen to some piece that will make you cry, and then you go and you look at the score,

25:28.000 --> 25:31.000
and it's full of Fibonacci ratios.

25:31.000 --> 25:35.000
It's like, oh my God, that's really cool.

25:35.000 --> 25:39.000
All right, so what does this have to do with anything that we do?

25:39.000 --> 25:44.000
Closure, programming languages, tools, or anything like that.

25:44.000 --> 25:46.000
Is closure like a song?

25:46.000 --> 25:49.000
Is it like a symphony?

25:49.000 --> 25:51.000
Is it like these things?

25:51.000 --> 25:54.000
Are languages like these things?

25:54.000 --> 25:59.000
What are they like if we're going to play the like game?

25:59.000 --> 26:02.000
They're like instruments.

26:02.000 --> 26:04.000
So let's look at instruments.

26:04.000 --> 26:06.000
This is one I'm particularly fond of.

26:06.000 --> 26:10.000
I happen to have one that's just like this.

26:10.000 --> 26:13.000
Instruments are particularly interesting.

26:13.000 --> 26:16.000
Instruments start with something called an excitation.

26:16.000 --> 26:19.000
Again, we see the same notion.

26:19.000 --> 26:22.000
Most instruments are about one thing.

26:22.000 --> 26:32.000
Whether you're going to pluck a string, cause a reed to vibrate, whack on a string, whack on a drum skin.

26:32.000 --> 26:37.000
There's this fundamental excitation, and the rest of the instrument is completely about it.

26:37.000 --> 26:41.000
It's about shaping it and conveying it.

26:41.000 --> 26:46.000
Then any particular instrument is going to provide some sort of human control interface.

26:46.000 --> 26:48.000
These are all interfaces.

26:48.000 --> 26:50.000
They're really good interfaces.

26:50.000 --> 26:51.000
You should study them.

26:51.000 --> 26:53.000
They're very interesting.

26:53.000 --> 26:58.000
Whether it's keys on the piano or on the saxophone, frets on a guitar, and pedals on a piano.

26:58.000 --> 27:01.000
All instruments have these things.

27:01.000 --> 27:09.000
Most of them at least fundamentally address pitch and also volume, but they can do other things as well.

27:09.000 --> 27:15.000
So this is where the performer can exercise control.

27:15.000 --> 27:20.000
Then the rest of the instrument is oriented towards projecting this excitation.

27:20.000 --> 27:29.000
So there's an excitation that you get to shape, and the rest of the instrument is about directing the energy at a particular outcome.

27:29.000 --> 27:33.000
Usually it's about directing the sound at the audience.

27:33.000 --> 27:42.000
But when you try to extract the ideas out of this, there's a fundamental idea, and the rest of the instrument is about directing it at a good outcome.

27:42.000 --> 27:47.000
There's another interesting aspect of instruments, which is that while there is this initial excitation,

27:47.000 --> 27:55.000
once you get an instrument in play, once you get this body that has some air inside of it, it has its own modes of vibration.

27:55.000 --> 28:02.000
So it will tend to vibrate at certain frequencies, and that's known as the resonance of an instrument.

28:02.000 --> 28:05.000
And this is sort of the harmony of the physics of instruments.

28:05.000 --> 28:16.000
A good instrument designer is going to try to make an instrument whose fundamental resonances are compatible with the excitation.

28:16.000 --> 28:20.000
So again, the harmony sort of comes into play.

28:20.000 --> 28:24.000
When we look at instruments, we see that they're incredibly limited.

28:24.000 --> 28:31.000
The piano can't even play any in-between notes, so it only plays exactly the notes to which the keys correspond.

28:31.000 --> 28:37.000
And a saxophone can't play more than one note at a time, except with some advanced techniques.

28:37.000 --> 28:40.000
And even then, it can't play arbitrary pairs of notes at a time.

28:40.000 --> 28:44.000
Most instruments are minimal, yet in some way sufficient.

28:44.000 --> 28:52.000
So an instrument may have a limited range, but if it's an instrument designed for western music within that range, it probably has all the notes.

28:52.000 --> 29:00.000
But there may be other things that are limits, like certain transitions between notes or registers might be awkward or impossible.

29:00.000 --> 29:08.000
But there are instruments that don't comply, like a blues harmonica doesn't have all the notes. It has only one key at a time.

29:08.000 --> 29:11.000
And that's a little bit like our DSLs.

29:12.000 --> 29:17.000
The thing is that players overcome these things. How many people here play piano?

29:17.000 --> 29:22.000
So how do you overcome the fact that there are no in-between notes? What do you do?

29:22.000 --> 29:31.000
Trills and grace notes and things like that are all techniques piano players and piano composers use to deal with the fact that there's no in-between notes.

29:31.000 --> 29:41.000
Coltrane, quite famously, because he had such dexterity and speed on the saxophone, had this technique that was coined, the sheets of sound,

29:41.000 --> 29:52.000
where he could play scales so fast that he could give you the effect as if there was harmony, even though he could only really play one note at a time.

29:52.000 --> 29:57.000
So they can fix this stuff by performance.

29:57.000 --> 30:05.000
Because otherwise what are we going to do? We're going to submit a patch for pianos? Let's fix that nasty one note at a time, no in-between notes problem.

30:05.000 --> 30:12.000
So why don't we do this? Why haven't all these things been fixed? Why hasn't the saxophone been fixed to play more than one note?

30:12.000 --> 30:19.000
And the reason is that no one wants to play a choose-a-phone. No one wants to be a choose-a-phone player.

30:19.000 --> 30:29.000
Alright, some people do want to be a choose-a-phone. Let me say this then, no one wants to compose for choose-a-phone.

30:29.000 --> 30:38.000
Let's imagine you had an orchestra where everyone was sitting in front of one of these. This is a modular synthesizer if you don't know.

30:38.000 --> 30:47.000
It's an electronic instrument where you patch together modules that are either tone generators or filters or things like that.

30:47.000 --> 30:52.000
And eventually you can control it with a keyboard or some other sort of source.

30:52.000 --> 30:57.000
But what happens if you try to compose where the bass units are things like this?

30:57.000 --> 31:05.000
Well you have this problem, right? Your fundamental target is complex. Each subcomponent you're trying to reuse is really complex.

31:05.000 --> 31:12.000
You also have this nested design problem. As a composer, composers study the instruments, they study flute,

31:12.000 --> 31:17.000
and they learn what the range is and what transitions are good and what transitions are bad, what's hard and what's easy.

31:17.000 --> 31:21.000
And they learn that for the entire orchestra, and they can look at a flute or think about a flute and know,

31:21.000 --> 31:29.000
I know what flute is about and what it can do, and therefore I can use that knowledge to build something that uses flute and violin and whatever

31:29.000 --> 31:35.000
and make something that works together. But if each piece is complex, then you end up with this nested design problem.

31:35.000 --> 31:39.000
You can't look at one of these things and know what it's going to sound like when you press the key.

31:39.000 --> 31:45.000
And it may do something completely different tomorrow. And if you were wondering what would happen if you pulled out one of the wires,

31:45.000 --> 31:53.000
that's a good question. It's totally fair. So it's hard to build things out of things like this.

31:53.000 --> 32:00.000
Other interesting things about instruments. Instruments are made for people who can play them.

32:00.000 --> 32:05.000
Isn't that outrageous? Isn't that scandalous?

32:06.000 --> 32:14.000
They're made for people who can actually play them. And that's a problem, right? Because beginners can't play.

32:14.000 --> 32:21.000
They're not yet players. They don't know how to do it. Again, I think there should be outrage on the internet.

32:21.000 --> 32:29.000
We should submit patches. We should fix the cello. Should cellos auto-tune?

32:29.000 --> 32:36.000
Or maybe they should have red and green lights. It's green when you're in tune and it's red when you're not in tune.

32:36.000 --> 32:47.000
Or maybe they shouldn't make any sound at all until you get it right. Is that how it works? Is that what we want?

32:47.000 --> 32:57.000
No, that's not how it works. Look at these kids. They're being subjected to cellos. There's nothing helping them here.

32:58.000 --> 33:03.000
Although apparently their shoes have been taken away until they get it right.

33:03.000 --> 33:09.000
But otherwise, they're smaller, but those are real cellos. They're hard to play. They're awkward. They sound terrible.

33:09.000 --> 33:14.000
They're going to be out of tune. It's going to be tough for a while for these kids.

33:14.000 --> 33:20.000
But if they had any of those kinds of aids, they would never actually learn to play cello.

33:20.000 --> 33:24.000
They'd never learn to hear themselves and to tune themselves and to listen.

33:24.000 --> 33:32.000
Playing a cello is about being able to hear more than anything else. That's true of most instruments.

33:32.000 --> 33:38.000
We need players. Here's where I would rant. I'm not going to rant.

33:38.000 --> 33:48.000
I'm going to rant a little bit. As a simple example, here's a guitar player, a harp player, a double bass player, all holding up their blisters.

33:48.000 --> 33:54.000
Imagine if you downloaded a library off the internet and it gave you blisters.

33:54.000 --> 34:03.000
The horror. Yet every musician has overcome a barrier to entry similar to this.

34:03.000 --> 34:10.000
The thing we have to remember is that humans are incredibly capable. In particular, we are really, really good learners.

34:10.000 --> 34:17.000
We've just evolved to learn. That's what we do. The other thing we're really good at is teaching.

34:17.000 --> 34:23.000
The thing is that neither of these things are effort-free. They take time. They take effort.

34:23.000 --> 34:31.000
We should not sell humanity short by trying to solve the problem of beginners in our stuff.

34:31.000 --> 34:39.000
We need to make things for people to use and we need to teach people and trust people to be able to learn how to do that.

34:39.000 --> 34:47.000
Fundamentally, we are novices and the thing is we're only absolute beginners for a very short period of time.

34:47.000 --> 34:54.000
On the flip side, we're beginners forever. We never totally get it. We're going to be learning on an ongoing basis.

34:54.000 --> 35:02.000
This is just the human condition. This is not something to be fixed. It's not something to submit a patch for. This is how it works.

35:02.000 --> 35:16.000
Effort is not a bad thing. These are two guys who are experts and yet they're still trying. This is not autocomplete.

35:16.000 --> 35:22.000
Just as we shouldn't target beginners in our designs, nor should we try to eliminate all effort.

35:22.000 --> 35:31.000
It's an anti-pattern. It's not going to yield a good instrument. It's okay for there to be effort.

35:31.000 --> 35:40.000
Another interesting thing about instruments is that they're usually for one user. This is a tool meant for two people to use at the same time.

35:40.000 --> 35:47.000
That's extremely rare for tools or instruments to be for more than one person to play at the same time.

35:47.000 --> 35:53.000
And yet we have these complicated T-mux, whatever things that people pair at.

35:53.000 --> 36:04.000
I don't really want to despair because while I personally don't understand it, I can see analogies, for instance, rather than two musicians at the same instrument to two musicians playing in the same room.

36:04.000 --> 36:13.000
And that obviously has good effects. But you have to wonder, is this just a way to keep somebody from typing all the time?

36:13.000 --> 36:21.000
If we haven't otherwise built in time for design, is pairing one way that we're trying to buy it? It's a fair question.

36:21.000 --> 36:31.000
So what should the ratio be between planning and performance? What's the ratio of time spent practicing and studying versus performing and recording?

36:31.000 --> 36:39.000
For musicians, how many people here are musicians who play an instrument? It's usually pretty high amongst people in the software world.

36:39.000 --> 36:44.000
Do you spend more time practicing or on stage? Definitely practicing.

36:44.000 --> 36:50.000
If you're hired to perform in an orchestra, they don't even book you for even half of your time to actually sit in the orchestra.

36:50.000 --> 36:53.000
They know you're going to have to spend time shedding.

36:53.000 --> 37:04.000
I don't know why, as software developers, we think we can just show up. How many people here dedicate 50% or more of their time to not programming?

37:04.000 --> 37:09.000
Not too many. Everybody else practices.

37:09.000 --> 37:16.000
Obviously, we went to school and studied whatever we studied, but musicians are not like, well, I went to school, so now I don't need to practice anymore.

37:16.000 --> 37:22.000
I'm just going to go and show up at the orchestra and they're going to let me play because I showed up.

37:22.000 --> 37:30.000
This is a great quote. You have to prepare to be creative and you have to keep preparing to be creative, or else it's not going to happen.

37:30.000 --> 37:36.000
You can't just show up and play. But I know there's going to be complaints.

37:37.000 --> 37:44.000
We're in a whole different space. Culturing couldn't build a website in a day.

37:44.000 --> 37:52.000
I don't know why this has become so important to us. It's really a stupid thing to be important, especially to an entire industry.

37:52.000 --> 37:57.000
I'm not really going to spend a lot of time on that, but it is a fair question to say, in what ways is this different?

37:57.000 --> 38:03.000
In software, we seem to have all these ones and zeros and so many ways to put them together.

38:03.000 --> 38:10.000
It's not as simple as making an instrument. It's not wood and metal. We just have this sort of infinite nature to our resources.

38:10.000 --> 38:17.000
How does that impact the difference in how design works? Well, I just have to show this.

38:17.000 --> 38:29.000
Obviously, as soon as we had the ability to make sound by using electricity, so having electricity drive a speaker and have the speaker vibrate and have sound come through the room.

38:29.000 --> 38:38.000
The initial applications where we recorded sound with microphones somehow captured it or transferred it live, and then the wire hit a speaker and then it came out on the other side.

38:38.000 --> 38:47.000
But as soon as that capability was there, people started imagining, well, could we just take out that first part and directly generate some electricity that would sound good when it comes out the speaker?

38:47.000 --> 38:52.000
From that was born electronic music and music synthesis.

38:52.000 --> 39:03.000
The theremin is one of the earliest synthesizers. It's from, I think, the 20s. It's quite interesting. It has extremely simplistic sound generation capabilities.

39:03.000 --> 39:08.000
There's a little oscillator in there and something that changes the waveform very slightly.

39:08.000 --> 39:17.000
The way you play a theremin is that those two things, those two pieces of metal, are antenna. The vertical one is controls pitch.

39:17.000 --> 39:23.000
The closer you get to the antenna, the higher the pitch. The further away you get, the lower the pitch.

39:23.000 --> 39:30.000
The loop antenna controls the volume. The closer you get to the antenna, the lower the volume. The further away, the higher the volume.

39:30.000 --> 39:36.000
You play theremin by moving your hand through the air. You do not touch it. It's an extremely simple instrument.

39:36.000 --> 39:42.000
But over the years, more and more sophisticated electronic music instruments came about.

39:42.000 --> 39:46.000
Those modular synthesizers I showed before are built out of modules.

39:46.000 --> 39:54.000
And again, now we're starting to see the same kinds of things we see in software. Modularity, right? There's modules. Each module is about something, right?

39:54.000 --> 40:03.000
So there's an oscillator there and a filter. And they have interfaces. They connect together. And it's quite stunning.

40:03.000 --> 40:10.000
This is pre-digital. So the way these things communicate is through control voltage, completely analog.

40:10.000 --> 40:19.000
Just dynamic voltage variations are what connect them together. And you patch voltage from connector to connector and you build systems.

40:19.000 --> 40:27.000
But of course, we also start to see the levels, right? If you look at the back of one of these modules, there's another piece of design there.

40:27.000 --> 40:34.000
There's the circuit. And these are analog circuits that determine what the module does.

40:34.000 --> 40:41.000
The other thing that's interesting, and it's a little bit hard to see from this diagram, is that each of these knobs has a corresponding jack.

40:41.000 --> 40:47.000
In other words, there's a human interface and a machine interface to the same things.

40:47.000 --> 40:53.000
And the machine interfaces were there all the time. In fact, they were first. And then the human interfaces come.

40:53.000 --> 40:58.000
We have to remember that as design thing, right? What's wrong with SQL?

40:58.000 --> 41:05.000
What's wrong with SQL is there's no machine interface to SQL. They only designed a human interface to SQL.

41:05.000 --> 41:09.000
And we've suffered ever since, right? Because we have to send these strings around.

41:09.000 --> 41:18.000
So you always have a machine. You can always build a human interface on top of a machine interface, but the other is often disgusting.

41:18.000 --> 41:23.000
All right. So now we see the things that we start to see in programming, right?

41:23.000 --> 41:30.000
There's this whole design stack. This guy, Yves Usan, he's amazing. I think he's like a biochemist or something.

41:30.000 --> 41:36.000
And in his spare time, he's a C++ programmer. And in his other spare time, he actually makes these modules.

41:36.000 --> 41:40.000
So he designs and builds analog modules. And then, of course, he builds synthesizers.

41:40.000 --> 41:44.000
And then he builds sounds with those synthesizers by patching things together.

41:44.000 --> 41:49.000
And hopefully, sometimes, he gets to play that little keyboard there and actually make music.

41:49.000 --> 41:55.000
But there's this entire stack of design. The design of the modules, the assembly of the modules into a rack thing.

41:55.000 --> 42:00.000
So this is your choices. Then the patching, which is designing the sound that the module is going to make.

42:00.000 --> 42:05.000
And finally, maybe some music later. So it's interesting to see when that stuff gets captured.

42:05.000 --> 42:13.000
So this guy happened to help this company make this synthesizer, which incorporates several of those kinds of modules inside,

42:13.000 --> 42:19.000
but doesn't have any wires on the surface. So a bunch of decisions have been made about how the modules will connect together.

42:19.000 --> 42:22.000
The oscillator will fill the filter and the envelope generator will control this.

42:22.000 --> 42:27.000
And those things were all already decided. This same guy made those decisions.

42:27.000 --> 42:32.000
And they were captured in this device that's now a lot closer to the programmer.

42:32.000 --> 42:36.000
In fact, you don't see the machine interface at all. There's only the human interface.

42:36.000 --> 42:39.000
And it's more like an instrument that you could just turn on and play.

42:39.000 --> 42:43.000
Of course, you still have to do some sound design on the top.

42:43.000 --> 42:52.000
The important thing to know is that as you start looking at things with these design stacks, you really have to pay attention to where you are in the stack.

42:52.000 --> 43:00.000
When this guy is soldering together one of these modules, he's not making music that day.

43:00.000 --> 43:04.000
He's not. And this is the problem we have.

43:04.000 --> 43:11.000
Our problem is this is what somebody feels like. This is what somebody feels like when you say you should use Emacs.

43:11.000 --> 43:17.000
They feel like they want to make music and you handed them a soldering iron. That's what you just did.

43:17.000 --> 43:23.000
And why does this happen to us? It happens to us because we use the same stuff all the way down.

43:23.000 --> 43:27.000
For us, it's code at every layer. It's always software.

43:27.000 --> 43:32.000
In this thing, you do something different when you perform. You do something different when you're a sound designer.

43:32.000 --> 43:35.000
You do something different when you assemble modules.

43:35.000 --> 43:41.000
And something different still when you wire things together behind the scene.

43:41.000 --> 43:47.000
But for software developers, we all have soldering irons. We all can jump to the absolute bottom and mess around.

43:47.000 --> 43:50.000
It doesn't actually mean that we're skilled enough to do that.

43:50.000 --> 43:56.000
But it's there and it uses the same stuff and we think, well, I got some solder and some spare time.

43:56.000 --> 43:59.000
I should design a filter.

43:59.000 --> 44:06.000
And I think it yields to a tremendous amount of distraction and also a tremendous amount of expansion.

44:06.000 --> 44:11.000
We change things and enhance things because we can because we're all Luthiers.

44:11.000 --> 44:15.000
I'm glad. It would be cool to know how to build a guitar.

44:15.000 --> 44:20.000
But if I knew how to do that, I'd play less guitar because I'd be fiddling around with wood.

44:20.000 --> 44:23.000
And you need to decide what you want to do.

44:23.000 --> 44:27.000
So there's a sense in which having a lot of choices, which we seem to always seek.

44:27.000 --> 44:30.000
I've got to have choices. Don't repress me, man.

44:30.000 --> 44:33.000
It's the opposite of enabling us to accomplish things.

44:33.000 --> 44:41.000
And in fact, you'll see time and time again people documenting the fact that constraint is actually a driver.

44:41.000 --> 44:44.000
When you have fewer choices, you make them and you get on with it.

44:44.000 --> 44:48.000
When you have a ton of choices, you sit around and wonder about things all day.

44:48.000 --> 44:51.000
So constraint is a driver of creativity. That's not a new thing.

44:51.000 --> 44:55.000
I mean, people have been saying this forever, but this is what they mean. This is where it comes from.

44:55.000 --> 45:05.000
So if I was going to advocate anything, it would be as a community and an industry,

45:05.000 --> 45:08.000
we spend an unbelievable amount of time catering to ourselves.

45:08.000 --> 45:12.000
It's just ridiculous. It really is because we can.

45:12.000 --> 45:16.000
Talking about it, enhancing things, adding stuff.

45:16.000 --> 45:23.000
You know where this goes. It creates these monsters.

45:23.000 --> 45:29.000
And the chances are good that every one of these modules is a good idea.

45:29.000 --> 45:32.000
What's to say it is? Every one of these things is a good idea.

45:32.000 --> 45:36.000
But if you take every one and you just keep accreting them and adding them together,

45:36.000 --> 45:39.000
you end up with something that you can't play.

45:39.000 --> 45:44.000
I mean, I don't care if you could configure this thing with spring, right?

45:44.000 --> 45:48.000
Nobody wants to play this. And in fact, no one can play this.

45:48.000 --> 45:53.000
This one actually plays itself.

45:53.000 --> 45:56.000
It's in a museum somewhere and it spontaneously makes music.

45:56.000 --> 45:59.000
No one sits at it and tries to play it. It just plays itself.

45:59.000 --> 46:07.000
And I'm sure it makes interesting sounds, but I don't think it can play my favorite things.

46:07.000 --> 46:11.000
Because it has no memory. It just makes up stuff.

46:11.000 --> 46:16.000
So I think the thing we need to keep in mind is there are people who can make music

46:16.000 --> 46:19.000
by waving their hands through the air.

46:19.000 --> 46:22.000
They don't need Emacs or anything else.

46:22.000 --> 46:27.000
They don't need a million options or deep class hierarchies or anything else.

46:27.000 --> 46:31.000
Don't start playing this right now. The whole room will be like Derriman, whatever.

46:31.000 --> 46:35.000
But it's really cool to listen to this.

46:35.000 --> 46:39.000
So getting back to the topic, what is design?

46:39.000 --> 46:43.000
I would say on one level design is about imagining things, right?

46:43.000 --> 46:47.000
That doesn't mean like imagining that you have every possible option.

46:47.000 --> 46:50.000
You want to embrace the constraints because you're going to use them.

46:50.000 --> 46:51.000
They're going to help you.

46:51.000 --> 46:55.000
The trick is to not let them get you down, right?

46:55.000 --> 46:58.000
The key thing to design is saying, I have this set of problems.

46:58.000 --> 47:04.000
I have this set of constraints, and I know I can solve that, right?

47:04.000 --> 47:08.000
If you combine the optimism with the constraints, you're going to get designs.

47:08.000 --> 47:10.000
And so you want to imagine a lot.

47:10.000 --> 47:14.000
You want to take these two things and roll with them and try not to like get the first answer,

47:14.000 --> 47:18.000
but try to get a lot of answers and then have them to choose from.

47:18.000 --> 47:24.000
However, the flip side of design is design is about making decisions, right?

47:24.000 --> 47:29.000
After you've got this spectrum of things you think are interesting answers,

47:29.000 --> 47:33.000
maybe you thought of a hundred times as many things as you need to.

47:33.000 --> 47:35.000
You need to admit very little.

47:35.000 --> 47:37.000
You want to mostly say no.

47:37.000 --> 47:40.000
Design is about making decisions, right?

47:40.000 --> 47:46.000
In fact, the value of a design is in conveying those decisions to the next person, right?

47:46.000 --> 47:50.000
When that guy worked on that synthesizer with the company and made those decisions,

47:50.000 --> 47:55.000
it's to help out the next person, the musician that doesn't want to solder, right?

47:55.000 --> 47:59.000
They need to be able to trust the decisions that prior person made

47:59.000 --> 48:02.000
so that they can get on with their level, right?

48:02.000 --> 48:07.000
If you leave every option open and you make everything configurable, you're not designing.

48:07.000 --> 48:08.000
You're failing to design.

48:08.000 --> 48:10.000
You're failing to make decisions and convey them to the next person.

48:10.000 --> 48:12.000
You're not actually helping them, right?

48:12.000 --> 48:15.000
You're giving them a choose a phone, right?

48:15.000 --> 48:19.000
On the performing side, we already saw a little bit of this.

48:19.000 --> 48:22.000
Performing is preparing.

48:22.000 --> 48:24.000
It's practicing, right?

48:24.000 --> 48:25.000
Which we do, right?

48:25.000 --> 48:27.000
We do a lot of coding, so we get a lot of practice in it.

48:27.000 --> 48:29.000
But it's also studying.

48:29.000 --> 48:39.000
And I think the biggest thing in trying to connect performing to developing or coding is this nature, right?

48:39.000 --> 48:47.000
Coltrane was great because he had fantastic design sensibilities that he could apply dynamically, right?

48:47.000 --> 48:49.000
It wasn't all about his fingers.

48:49.000 --> 48:51.000
I mean, he had incredible dexterity.

48:51.000 --> 48:52.000
He did, right?

48:52.000 --> 48:57.000
He had incredible technique and incredible tone that he got from playing a lot.

48:57.000 --> 49:03.000
But what he played was a result of what he studied and the analysis that he did

49:03.000 --> 49:07.000
and the thinking that he had done about how music works.

49:07.000 --> 49:14.000
If he just had the finger speed and everything else, he wouldn't have been the great player that he was.

49:14.000 --> 49:19.000
So, to wrap things up, take things apart.

49:19.000 --> 49:25.000
Take things apart not with a hammer and smashing them, but with an eye towards how you're going to put them back together.

49:25.000 --> 49:28.000
That's what design is about.

49:28.000 --> 49:30.000
You want to design like Bartok.

49:30.000 --> 49:33.000
And by that, I don't mean specifying every note for every player.

49:33.000 --> 49:34.000
I'm not advocating that.

49:34.000 --> 49:39.000
I don't believe that's the way software design is or ever should work.

49:39.000 --> 49:44.000
But to think about the way things fit together at every level, the thing you're working on,

49:44.000 --> 49:50.000
when you're working on large things as he did, you have to bring the design sensibilities to the small things

49:50.000 --> 49:53.000
and to the medium-sized things and to the large things.

49:53.000 --> 49:57.000
And often apply different techniques and different ways of thinking for each level,

49:57.000 --> 50:00.000
you know, ways that are appropriate.

50:00.000 --> 50:03.000
You want to code like Coltrane, right?

50:03.000 --> 50:12.000
Bring that harmonic sensibility, bring that design sensibility to the coding that you do and to the code that you write.

50:12.000 --> 50:20.000
I think most fundamentally we want to seek out and build languages and libraries that are like instruments

50:20.000 --> 50:27.000
in all the ways that I just talked about, in particular in the simplicity aspect.

50:27.000 --> 50:35.000
All those things I showed you were different ways to say instruments are simple in that deep way.

50:35.000 --> 50:37.000
That's what we want.

50:37.000 --> 50:41.000
And finally, to pursue harmony, to actually think about how things fit together,

50:41.000 --> 50:45.000
it's real easy to code right out of a problem and then get an answer.

50:45.000 --> 50:51.000
But if you haven't thought about how things fit together, that answer is not going to be easy to maintain

50:51.000 --> 50:53.000
or easy to change or easy to reuse.

50:53.000 --> 50:57.000
So you have to think about harmony as you go.

50:57.000 --> 51:00.000
And then go do it.

51:00.000 --> 51:02.000
Hope you enjoy the rest of the conference.

51:02.000 --> 51:03.000
Thanks.

