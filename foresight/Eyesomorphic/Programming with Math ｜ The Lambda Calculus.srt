1
00:00:00,000 --> 00:00:10,440
Learning a new programming language is hard. There's so much syntax to learn and even

2
00:00:10,440 --> 00:00:15,280
then you have to understand how the language computes to go from this syntax to a meaningful

3
00:00:15,280 --> 00:00:16,280
program.

4
00:00:16,280 --> 00:00:26,520
But what if I told you that there is a language that can do absolutely anything any other

5
00:00:26,520 --> 00:00:31,760
programming language can and will ever do until the end of time, that consists of only

6
00:00:31,760 --> 00:00:37,960
three pieces of syntax and a singular rule of computation.

7
00:00:37,960 --> 00:00:42,920
Introducing the Lambda Calculus

8
00:00:42,920 --> 00:00:46,760
The Lambda Calculus is, at its core, a theory of functions.

9
00:00:46,760 --> 00:00:54,840
Why functions? I don't mean complicated blocks of code.

10
00:00:55,560 --> 00:01:00,320
Rather, a mapping of inputs to outputs.

11
00:01:00,320 --> 00:01:04,800
For example, we could have a function that maps a number to its square, so the function

12
00:01:04,800 --> 00:01:09,880
maps the input 2 to the output 4 and so on.

13
00:01:09,880 --> 00:01:14,520
Writing the mapping from every possible input to its output is tedious at best, so let's

14
00:01:14,520 --> 00:01:19,960
abstract away the specific inputs and just say that for some arbitrary input x, we map

15
00:01:19,960 --> 00:01:22,760
it to x squared.

16
00:01:22,760 --> 00:01:25,440
We call x a variable.

17
00:01:25,440 --> 00:01:28,280
We could have used any symbol in place of x.

18
00:01:28,280 --> 00:01:33,920
Mapping y to y squared or star to star squared doesn't change which inputs are mapped to

19
00:01:33,920 --> 00:01:36,040
which outputs.

20
00:01:36,040 --> 00:01:41,240
As some fancy terminology, we say that these functions are alpha equivalent and the process

21
00:01:41,240 --> 00:01:46,440
of renaming the input variable and all instances of that variable in the function to a different

22
00:01:46,440 --> 00:01:51,240
variable is called alpha conversion.

23
00:01:51,240 --> 00:01:58,360
To avoid having to use arrows to denote functions, let's introduce some new notation.

24
00:01:58,360 --> 00:02:05,920
For a function that maps an arbitrary input x to the output m, we'll write it as follows.

25
00:02:05,920 --> 00:02:10,360
We'll first write a Greek letter lambda to indicate that we're writing a function.

26
00:02:10,360 --> 00:02:15,160
There's really nothing special about this letter, it's simply a visual marker that

27
00:02:15,160 --> 00:02:17,760
we're defining a function.

28
00:02:17,760 --> 00:02:20,000
Then we'll write the input variable.

29
00:02:20,000 --> 00:02:23,840
In this case x next to the lambda.

30
00:02:23,840 --> 00:02:29,120
We'll then write a dot and finally m, the output of our function.

31
00:02:29,120 --> 00:02:34,160
The dot is simply there to separate the input from the output.

32
00:02:34,160 --> 00:02:38,920
We often call functions written like this lambda abstractions.

33
00:02:38,920 --> 00:02:45,640
Okay, so now we have a concise notation to write functions, but on their own they don't

34
00:02:45,640 --> 00:02:49,600
exactly do very much.

35
00:02:49,600 --> 00:02:52,320
That's where function application comes in.

36
00:02:52,320 --> 00:02:59,520
Let's suppose I have the function that maps the input x to the output x plus one.

37
00:02:59,520 --> 00:03:05,620
If Alice wanted to find what a specific number, say three, is mapped to, we can substitute

38
00:03:05,620 --> 00:03:08,780
in three for our input variable.

39
00:03:08,780 --> 00:03:14,080
So we would replace any x's we see in the output with a three, giving us three plus

40
00:03:14,080 --> 00:03:16,680
one or four.

41
00:03:16,680 --> 00:03:21,420
We call this process of substituting a term for the input variable of a function, beta

42
00:03:21,420 --> 00:03:26,820
reduction, and we write this as an arrow with a little beta next to it to show that a reduction

43
00:03:26,820 --> 00:03:29,400
has taken place.

44
00:03:29,400 --> 00:03:35,840
In general, if we have a lambda abstraction, lambda x dot m, apply to an input n, denoted

45
00:03:35,840 --> 00:03:39,080
by writing the input on the right of our function.

46
00:03:39,080 --> 00:03:45,040
We can perform a beta reduction by going through m and substituting our input n for the variable

47
00:03:45,040 --> 00:03:46,040
x.

48
00:03:46,040 --> 00:03:55,040
We'll shorten this by writing a slash to mean substituted for.

49
00:03:55,040 --> 00:04:00,980
So we've now understood variables, lambda abstractions, and applications of functions

50
00:04:00,980 --> 00:04:06,680
via beta reduction.

51
00:04:06,680 --> 00:04:11,120
This looks very much like a start to an extremely primitive programming language.

52
00:04:11,120 --> 00:04:16,240
To finish it off, we would just need to add support for multiple inputs, loops, booleans,

53
00:04:16,240 --> 00:04:20,560
some data structures, a few more rules of computation.

54
00:04:20,560 --> 00:04:24,720
As it turns out, we actually don't need anything more.

55
00:04:24,720 --> 00:04:31,040
If we only allow the programmer to write variables, lambda abstractions, and applications, and

56
00:04:31,040 --> 00:04:37,000
simply compute these terms using beta reduction, we can make anything that a computer will

57
00:04:37,000 --> 00:04:40,200
ever do, ever.

58
00:04:40,200 --> 00:04:44,480
This amazing result was documented in the Church-Turing thesis.

59
00:04:44,480 --> 00:04:49,580
Two names we'll come across later on.

60
00:04:49,580 --> 00:04:57,360
We call this tiny programming language the lambda calculus.

61
00:04:57,360 --> 00:05:02,720
This result seems impossible, but the key to seeing how this is achieved is by noticing

62
00:05:02,720 --> 00:05:09,120
that our functions here are higher order.

63
00:05:09,120 --> 00:05:13,920
This means that functions can be passed as inputs to other functions, and equally functions

64
00:05:13,920 --> 00:05:17,820
can return functions as an output.

65
00:05:17,820 --> 00:05:22,640
This small subtlety is what gives the lambda calculus its punch, which I'll demonstrate

66
00:05:22,640 --> 00:05:27,800
by replicating a standard feature of more complicated programming languages in the lambda

67
00:05:27,800 --> 00:05:31,300
calculus.

68
00:05:31,300 --> 00:05:36,280
You might have noticed that lambda abstractions only have a singular input variable, which

69
00:05:36,280 --> 00:05:38,900
seems rather limiting.

70
00:05:38,900 --> 00:05:43,540
What if Bob wants to make a function that, say, takes two numbers as inputs, and then

71
00:05:43,540 --> 00:05:46,920
outputs their sum?

72
00:05:46,920 --> 00:05:50,340
He can actually achieve this with a little trick.

73
00:05:50,340 --> 00:05:55,720
Consider the function that takes an input x and returns another function.

74
00:05:55,720 --> 00:06:01,420
This outputted function takes an input y and outputs x plus y.

75
00:06:01,420 --> 00:06:06,840
Okay, that's a little confusing, but let's see what happens when we apply this function

76
00:06:06,840 --> 00:06:11,340
to an input, say 1.

77
00:06:11,340 --> 00:06:17,620
Replacing all x's with 1's gives the function lambda y dot 1 plus y.

78
00:06:17,620 --> 00:06:23,820
That is, a function that takes an input and returns 1 plus that input.

79
00:06:23,820 --> 00:06:29,260
So if we apply this function to the number 2, we replace the occurrence of y in our lambda

80
00:06:29,260 --> 00:06:36,100
abstraction with 2, and we get 1 plus 2, or 3.

81
00:06:36,100 --> 00:06:40,960
We've effectively given this function one input after another, and it has returned their

82
00:06:40,960 --> 00:06:42,840
sum.

83
00:06:42,840 --> 00:06:49,560
To generalise this, the arbitrary lambda abstraction lambda x dot lambda y dot l can

84
00:06:49,560 --> 00:06:53,240
be applied to two inputs, m and n.

85
00:06:53,240 --> 00:07:01,080
By first beta reducing with the first input m to the function lambda y dot l with m substituted

86
00:07:01,080 --> 00:07:06,380
for x, which is yet to be applied to the input n.

87
00:07:06,380 --> 00:07:11,940
We can then perform a second beta reduction with the input n, to finally get the term

88
00:07:11,940 --> 00:07:19,260
l with m substituted for x and n substituted for y.

89
00:07:19,260 --> 00:07:25,180
So our output is a term with a substitution for x and a substitution for y, exactly as

90
00:07:25,180 --> 00:07:30,300
we'd expect from a function that takes two inputs.

91
00:07:30,300 --> 00:07:35,320
This method of functions returning functions to sequentially apply to multiple inputs is

92
00:07:35,320 --> 00:07:43,540
called currying, named after the logician Haskell-curry.

93
00:07:43,540 --> 00:07:50,120
If you have experienced programming, why not try to make some curried functions yourself?

94
00:07:50,120 --> 00:07:55,720
This Python program here, for example, uses the built-in lambda syntax to add two numbers

95
00:07:55,720 --> 00:08:01,460
together using currying.

96
00:08:01,460 --> 00:08:05,700
This way of thinking can take a while to get used to, but hopefully I'm starting to convince

97
00:08:05,700 --> 00:08:12,260
you that the higher-order lambda abstractions have more nuance than you might have expected.

98
00:08:12,260 --> 00:08:17,160
To continue building the primitive calculus into a more practical programming language,

99
00:08:17,160 --> 00:08:22,840
we can encode some more common programming concepts into the calculus.

100
00:08:22,840 --> 00:08:29,360
As a quick example, to use Booleans and conditionals, we can represent true as the term lambda

101
00:08:29,360 --> 00:08:38,580
x dot lambda y dot x, the function that takes two inputs and returns the first, and represent

102
00:08:38,580 --> 00:08:45,760
false as the term lambda x dot lambda y dot y, the function that takes two inputs and returns

103
00:08:45,760 --> 00:08:48,280
the second.

104
00:08:48,280 --> 00:08:53,500
This seems completely arbitrary, but look what happens when we encode an if statement

105
00:08:53,500 --> 00:09:02,120
as lambda b dot lambda x dot lambda y dot b apply to x and then y.

106
00:09:02,120 --> 00:09:07,880
This lambda abstraction just takes three inputs, b, x and y, and outputs the result

107
00:09:07,880 --> 00:09:12,400
of applying b to the inputs x and y.

108
00:09:12,400 --> 00:09:16,960
This looks pretty random, but if we input a Boolean as the first argument, and then

109
00:09:16,960 --> 00:09:23,740
any two terms as the inputs x and y, this function will behave just like an if statement.

110
00:09:23,740 --> 00:09:32,800
It will return the first term if the Boolean is true, and the second if it's not.

111
00:09:32,800 --> 00:09:39,880
In Python, this lambda abstraction would be the program if b then return x, else return

112
00:09:39,880 --> 00:09:43,400
y.

113
00:09:43,400 --> 00:09:45,280
Let's test that out.

114
00:09:45,280 --> 00:09:50,440
Applying our if statement to the inputs true m, n, where m and n are some terms in the

115
00:09:50,440 --> 00:09:54,200
lambda calculus, should return m.

116
00:09:54,200 --> 00:10:02,360
Let's plug true in for b first, giving lambda x dot lambda y dot true x, y, apply to m,

117
00:10:02,360 --> 00:10:05,680
then n.

118
00:10:05,680 --> 00:10:14,280
Plugging in m for x gives lambda y dot true m, y, apply to n.

119
00:10:14,280 --> 00:10:22,400
Then finally substituting n for y gives true m, n.

120
00:10:22,400 --> 00:10:27,240
Now we can turn the term true back into its definition in the lambda calculus, the function

121
00:10:27,240 --> 00:10:32,360
that takes two arguments and returns the first.

122
00:10:32,360 --> 00:10:41,600
So let's first substitute m for x, giving lambda y dot m, apply to n.

123
00:10:41,600 --> 00:10:47,240
Finally substituting n for y just returns m, since there aren't any y's in this lambda

124
00:10:47,240 --> 00:10:49,720
abstraction at all.

125
00:10:49,720 --> 00:10:54,760
So after all that, we've ended up with our if statement with the Boolean input true,

126
00:10:54,760 --> 00:11:01,480
and the inputted terms m and n, outputting the first term m, exactly as we expected it

127
00:11:01,480 --> 00:11:03,400
to do.

128
00:11:03,400 --> 00:11:14,000
Try plugging in false to our if statement, and verify that it returns n this time.

129
00:11:14,000 --> 00:11:17,000
You may be starting to feel slightly short change.

130
00:11:17,000 --> 00:11:20,880
The introduction to this video suggested that the lambda calculus would be the solution

131
00:11:20,880 --> 00:11:24,040
to the problem of complicated programming languages.

132
00:11:24,320 --> 00:11:29,240
However, as you saw from the tedious method by which we encode relatively standard features

133
00:11:29,240 --> 00:11:37,160
into the calculus, the lambda calculus is certainly not suited for any real world programming.

134
00:11:37,160 --> 00:11:40,080
So what was the point in all of this?

135
00:11:40,080 --> 00:11:45,520
Well, for starters, once we've tediously encoded concepts into the calculus, we can

136
00:11:45,520 --> 00:11:52,640
actually just ignore the low level implementation, and just deal with the objects themselves.

137
00:11:52,640 --> 00:11:57,600
For example, we now know that Booleans in conditionals can be simulated, so we can just

138
00:11:57,600 --> 00:12:05,160
deal with Boolean terms and if statements without worrying about unfolding their definitions.

139
00:12:05,160 --> 00:12:09,440
This makes programming in the lambda calculus somewhat reasonable.

140
00:12:09,440 --> 00:12:17,680
As an example, we can write the not function as lambda b dot if b then false, else true.

141
00:12:17,680 --> 00:12:24,440
And of this absolute mess if we unfold all of the definitions.

142
00:12:24,440 --> 00:12:34,200
Given that we can also encode numbers, recursion, and data types like pairs, I hope you can

143
00:12:34,200 --> 00:12:38,800
start to see the power of this miniature programming language.

144
00:12:38,800 --> 00:12:43,600
I implore you to study how these concepts can be encoded, but instead, I'd really like

145
00:12:43,600 --> 00:12:49,000
to focus on the implications of our newfound mathematical programming language.

146
00:12:49,000 --> 00:12:53,640
We set out trying to find a simple and easy programming language that we can learn instead

147
00:12:53,640 --> 00:12:56,520
of more verbose and intricate languages.

148
00:12:56,520 --> 00:13:00,920
But instead, we've stumbled across something far more profound.

149
00:13:00,920 --> 00:13:06,120
The lambda calculus gives us a tiny definition of what it means to compute, and because of

150
00:13:06,120 --> 00:13:11,880
this, allows us to study programming and computation mathematically.

151
00:13:11,880 --> 00:13:17,840
My favourite example of this is introducing a simple type system to the lambda calculus.

152
00:13:17,840 --> 00:13:21,480
As some motivation, consider our not function from earlier.

153
00:13:21,480 --> 00:13:28,360
Lambda b dot if b then false, else true.

154
00:13:28,360 --> 00:13:34,720
This function maps the input true to the output false, and the input false to the output true,

155
00:13:34,720 --> 00:13:38,040
essentially just swapping true and false.

156
00:13:38,040 --> 00:13:40,760
But there is a slight subtlety here.

157
00:13:40,760 --> 00:13:45,840
There is no actual requirement for our input to be a boolean.

158
00:13:45,840 --> 00:13:54,240
Our not function apply to an input of, say, 1, beta reduces to if 1 then false, else true.

159
00:13:54,240 --> 00:13:55,960
This is nonsensical.

160
00:13:55,960 --> 00:13:59,880
If 1 makes no sense because 1 isn't a boolean.

161
00:13:59,880 --> 00:14:04,760
So trying to use our encodings of these concepts to reduce this further will result in a term

162
00:14:04,760 --> 00:14:09,320
with no real meaning.

163
00:14:09,320 --> 00:14:16,480
To avoid this, we can add some rules to our lambda calculus.

164
00:14:16,480 --> 00:14:22,320
We'll assign a label, called a type, to terms in the lambda calculus that make sense, which

165
00:14:22,320 --> 00:14:27,480
in our case is going to be built from the types bool for boolean values and num for

166
00:14:27,480 --> 00:14:29,960
numeric values.

167
00:14:29,960 --> 00:14:34,640
We'll indicate the type of a term by writing the type after a colon.

168
00:14:34,640 --> 00:14:42,200
So we'd write true colon bool to say that true is of type boolean.

169
00:14:42,200 --> 00:14:48,360
Lambda abstractions have the type a arrow b, normally said as type a to b, where a is

170
00:14:48,360 --> 00:14:54,760
the type of its input, and b is the type of its output.

171
00:14:54,760 --> 00:14:59,560
We'll specify the type of the input by putting it next to the input variable when writing

172
00:14:59,560 --> 00:15:02,760
lambda abstractions.

173
00:15:02,760 --> 00:15:08,120
So to finally solve our problem of nonsense terms, we'll now say that we can only apply

174
00:15:08,120 --> 00:15:13,760
a lambda abstraction to a term that has the same type as the one specified by its input

175
00:15:13,760 --> 00:15:18,520
variable.

176
00:15:18,520 --> 00:15:24,600
As an example, we'd now write our not function like this, specifying that our input b is

177
00:15:24,600 --> 00:15:27,040
a boolean.

178
00:15:27,040 --> 00:15:32,040
Since this abstraction takes a boolean and then outputs a boolean, it will have type

179
00:15:32,040 --> 00:15:35,400
bool to boole.

180
00:15:35,400 --> 00:15:39,760
This means that we are simply not allowed to apply this function to the term one, as

181
00:15:39,760 --> 00:15:44,360
this has type num and not boole.

182
00:15:44,360 --> 00:15:48,680
Whilst this does limit what the calculus can do, it does stop a lot of nonsense terms

183
00:15:48,680 --> 00:15:54,080
from arising.

184
00:15:54,080 --> 00:15:58,420
The version of lambda calculus with this typing system attached to it is called the simply

185
00:15:58,420 --> 00:16:05,500
typed lambda calculus, and is very reminiscent of statically typed languages like C or Java.

186
00:16:05,500 --> 00:16:10,420
But despite this similarity, the lambda calculus and its simply typed version was invented

187
00:16:10,420 --> 00:16:16,580
by Alonso Church between the 1930s and 40s, before programming and even computer science

188
00:16:16,580 --> 00:16:21,180
itself was being formally studied.

189
00:16:21,180 --> 00:16:26,160
As a side note, Alonso Church was actually the doctoral advisor of the father of computer

190
00:16:26,160 --> 00:16:31,040
science, Alon Turing, whose achievements have rightly earned him the status of a household

191
00:16:31,040 --> 00:16:33,800
name.

192
00:16:33,800 --> 00:16:38,840
Whilst the lambda calculus has played a pivotal role in the study of programming, it has been

193
00:16:38,840 --> 00:16:45,200
equally as important in the field of mathematical logic, as we can define systems of logic using

194
00:16:45,200 --> 00:16:47,200
the calculus.

195
00:16:47,200 --> 00:16:53,800
In fact, our simply typed lambda calculus has a particularly interesting interpretation

196
00:16:53,800 --> 00:16:56,880
in terms of logic.

197
00:16:56,880 --> 00:17:01,840
Let's say that the types in our calculus should be interpreted as propositions, that

198
00:17:01,840 --> 00:17:06,840
being statements which are either true or false.

199
00:17:06,840 --> 00:17:11,400
Then we'll say that each term in the lambda calculus should be seen as a proof that the

200
00:17:11,400 --> 00:17:17,420
proposition corresponding to that term's type is true.

201
00:17:17,420 --> 00:17:22,000
As an example, suppose we have an arbitrary type A.

202
00:17:22,000 --> 00:17:27,760
We can interpret this as corresponding to a particular proposition.

203
00:17:27,760 --> 00:17:33,520
Then we'll think of a term of type A as a proof that A is true.

204
00:17:33,520 --> 00:17:39,960
If no such term exists, then A is false.

205
00:17:39,960 --> 00:17:43,380
This seems rather strange, but bear with me.

206
00:17:43,380 --> 00:17:48,200
If we use this interpretation of our simply typed lambda calculus, then we find that

207
00:17:48,280 --> 00:17:55,040
the type of lambda abstractions, that being A to B for some arbitrary types A and B, corresponds

208
00:17:55,040 --> 00:17:59,040
to the proposition A implies B.

209
00:17:59,040 --> 00:18:05,040
The proposition A implies B is simply stating that if I can prove A is true, then I know

210
00:18:05,040 --> 00:18:09,120
that B must be true as well.

211
00:18:09,120 --> 00:18:14,120
For example, if A was the proposition that it's raining, and B was the proposition that

212
00:18:14,120 --> 00:18:20,720
the ground is wet, then the proposition A implies B would be, if it is raining, then

213
00:18:20,720 --> 00:18:23,760
the ground is wet.

214
00:18:23,760 --> 00:18:29,200
If we assume that this implication is true, then if I could prove that it was raining,

215
00:18:29,200 --> 00:18:34,600
I would also know that the ground is wet.

216
00:18:34,600 --> 00:18:37,640
So how does this play out in our calculus?

217
00:18:37,640 --> 00:18:44,040
Let's take two types, A and B, then the proposition A implies B is equivalent to the

218
00:18:44,040 --> 00:18:47,480
type A to B.

219
00:18:47,480 --> 00:18:55,680
Let's suppose that A was true, that is, there exists some term N of type A.

220
00:18:55,680 --> 00:19:01,560
If we also suppose that A implies B was true, then there must exist some term of type A

221
00:19:01,560 --> 00:19:04,120
to B.

222
00:19:04,120 --> 00:19:10,120
This must be a lambda abstraction of the form lambda x dot m, where the input x is of

223
00:19:10,120 --> 00:19:14,520
type A and the output m is of type B.

224
00:19:14,520 --> 00:19:22,640
Now, A implies B is true, and we know that A is true, so we know that logically, B must

225
00:19:22,640 --> 00:19:24,040
be true as well.

226
00:19:24,040 --> 00:19:29,160
We'll separate the propositions we're assuming to be true, and the logical conclusions

227
00:19:29,160 --> 00:19:32,800
to these assumptions with a line.

228
00:19:32,800 --> 00:19:37,480
For our correspondence to work, then, we need to be able to use this lambda abstraction

229
00:19:37,480 --> 00:19:43,040
and our term N to create a term of type B.

230
00:19:43,040 --> 00:19:48,280
The key here is noticing that we can apply our lambda abstraction to N, because N is

231
00:19:48,280 --> 00:19:50,360
of type A.

232
00:19:50,360 --> 00:19:56,560
Crucially, we know that this has type B as the lambda abstraction outputs terms of type

233
00:19:56,560 --> 00:19:58,760
B.

234
00:19:58,760 --> 00:20:04,840
As we can find a term of type B, we know that the proposition corresponding to B is true,

235
00:20:05,000 --> 00:20:09,000
just as we expected it to be.

236
00:20:09,000 --> 00:20:15,200
This astounding relationship between propositions and types is called the Curry-Howard correspondence

237
00:20:15,200 --> 00:20:19,480
and has some fascinating implications.

238
00:20:19,480 --> 00:20:24,160
If we build a programming language with this in mind, we can actually use this correspondence

239
00:20:24,160 --> 00:20:30,080
to explicitly write mathematical proofs using computer code.

240
00:20:30,080 --> 00:20:37,080
These languages are called proof assistants, and popular ones include Lean and Agda.

241
00:20:38,000 --> 00:20:42,640
This Lean program here, for example, is a proof that there are infinitely many prime

242
00:20:42,640 --> 00:20:47,520
numbers and we know that it's correct since it type checks.

243
00:20:47,520 --> 00:20:52,640
As this area of research develops, who knows, in the future mathematics might not be taught

244
00:20:52,640 --> 00:20:58,040
with pen and paper, but rather with a keyboard and mouse.

245
00:20:59,000 --> 00:21:01,360
Well, that was quite the journey.

246
00:21:01,360 --> 00:21:05,880
We started out by exploring the essence of functions, and whilst it certainly isn't

247
00:21:05,880 --> 00:21:10,640
a serious contender for modern programming languages, it has allowed us to explore a

248
00:21:10,640 --> 00:21:15,920
rich theory of theoretical computer science and mathematical logic, whilst giving us the

249
00:21:15,920 --> 00:21:21,480
ability to reason about computer programs and code rigorously.

250
00:21:21,480 --> 00:21:26,600
Who knew that a tiny little system of formal logic would have so many implications even

251
00:21:26,640 --> 00:21:32,880
a century after its creation.

252
00:21:32,880 --> 00:21:37,640
If this topic interests you, I would encourage you to subscribe, leave a like, and browse

253
00:21:37,640 --> 00:21:43,600
other videos on this channel for similar explorations of mathematics and theoretical computer science.

254
00:21:43,600 --> 00:21:45,000
But until then, goodbye.

