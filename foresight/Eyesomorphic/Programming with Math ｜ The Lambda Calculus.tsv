start	end	text
0	10440	Learning a new programming language is hard. There's so much syntax to learn and even
10440	15280	then you have to understand how the language computes to go from this syntax to a meaningful
15280	16280	program.
16280	26520	But what if I told you that there is a language that can do absolutely anything any other
26520	31760	programming language can and will ever do until the end of time, that consists of only
31760	37960	three pieces of syntax and a singular rule of computation.
37960	42920	Introducing the Lambda Calculus
42920	46760	The Lambda Calculus is, at its core, a theory of functions.
46760	54840	Why functions? I don't mean complicated blocks of code.
55560	60320	Rather, a mapping of inputs to outputs.
60320	64800	For example, we could have a function that maps a number to its square, so the function
64800	69880	maps the input 2 to the output 4 and so on.
69880	74520	Writing the mapping from every possible input to its output is tedious at best, so let's
74520	79960	abstract away the specific inputs and just say that for some arbitrary input x, we map
79960	82760	it to x squared.
82760	85440	We call x a variable.
85440	88280	We could have used any symbol in place of x.
88280	93920	Mapping y to y squared or star to star squared doesn't change which inputs are mapped to
93920	96040	which outputs.
96040	101240	As some fancy terminology, we say that these functions are alpha equivalent and the process
101240	106440	of renaming the input variable and all instances of that variable in the function to a different
106440	111240	variable is called alpha conversion.
111240	118360	To avoid having to use arrows to denote functions, let's introduce some new notation.
118360	125920	For a function that maps an arbitrary input x to the output m, we'll write it as follows.
125920	130360	We'll first write a Greek letter lambda to indicate that we're writing a function.
130360	135160	There's really nothing special about this letter, it's simply a visual marker that
135160	137760	we're defining a function.
137760	140000	Then we'll write the input variable.
140000	143840	In this case x next to the lambda.
143840	149120	We'll then write a dot and finally m, the output of our function.
149120	154160	The dot is simply there to separate the input from the output.
154160	158920	We often call functions written like this lambda abstractions.
158920	165640	Okay, so now we have a concise notation to write functions, but on their own they don't
165640	169600	exactly do very much.
169600	172320	That's where function application comes in.
172320	179520	Let's suppose I have the function that maps the input x to the output x plus one.
179520	185620	If Alice wanted to find what a specific number, say three, is mapped to, we can substitute
185620	188780	in three for our input variable.
188780	194080	So we would replace any x's we see in the output with a three, giving us three plus
194080	196680	one or four.
196680	201420	We call this process of substituting a term for the input variable of a function, beta
201420	206820	reduction, and we write this as an arrow with a little beta next to it to show that a reduction
206820	209400	has taken place.
209400	215840	In general, if we have a lambda abstraction, lambda x dot m, apply to an input n, denoted
215840	219080	by writing the input on the right of our function.
219080	225040	We can perform a beta reduction by going through m and substituting our input n for the variable
225040	226040	x.
226040	235040	We'll shorten this by writing a slash to mean substituted for.
235040	240980	So we've now understood variables, lambda abstractions, and applications of functions
240980	246680	via beta reduction.
246680	251120	This looks very much like a start to an extremely primitive programming language.
251120	256240	To finish it off, we would just need to add support for multiple inputs, loops, booleans,
256240	260560	some data structures, a few more rules of computation.
260560	264720	As it turns out, we actually don't need anything more.
264720	271040	If we only allow the programmer to write variables, lambda abstractions, and applications, and
271040	277000	simply compute these terms using beta reduction, we can make anything that a computer will
277000	280200	ever do, ever.
280200	284480	This amazing result was documented in the Church-Turing thesis.
284480	289580	Two names we'll come across later on.
289580	297360	We call this tiny programming language the lambda calculus.
297360	302720	This result seems impossible, but the key to seeing how this is achieved is by noticing
302720	309120	that our functions here are higher order.
309120	313920	This means that functions can be passed as inputs to other functions, and equally functions
313920	317820	can return functions as an output.
317820	322640	This small subtlety is what gives the lambda calculus its punch, which I'll demonstrate
322640	327800	by replicating a standard feature of more complicated programming languages in the lambda
327800	331300	calculus.
331300	336280	You might have noticed that lambda abstractions only have a singular input variable, which
336280	338900	seems rather limiting.
338900	343540	What if Bob wants to make a function that, say, takes two numbers as inputs, and then
343540	346920	outputs their sum?
346920	350340	He can actually achieve this with a little trick.
350340	355720	Consider the function that takes an input x and returns another function.
355720	361420	This outputted function takes an input y and outputs x plus y.
361420	366840	Okay, that's a little confusing, but let's see what happens when we apply this function
366840	371340	to an input, say 1.
371340	377620	Replacing all x's with 1's gives the function lambda y dot 1 plus y.
377620	383820	That is, a function that takes an input and returns 1 plus that input.
383820	389260	So if we apply this function to the number 2, we replace the occurrence of y in our lambda
389260	396100	abstraction with 2, and we get 1 plus 2, or 3.
396100	400960	We've effectively given this function one input after another, and it has returned their
400960	402840	sum.
402840	409560	To generalise this, the arbitrary lambda abstraction lambda x dot lambda y dot l can
409560	413240	be applied to two inputs, m and n.
413240	421080	By first beta reducing with the first input m to the function lambda y dot l with m substituted
421080	426380	for x, which is yet to be applied to the input n.
426380	431940	We can then perform a second beta reduction with the input n, to finally get the term
431940	439260	l with m substituted for x and n substituted for y.
439260	445180	So our output is a term with a substitution for x and a substitution for y, exactly as
445180	450300	we'd expect from a function that takes two inputs.
450300	455320	This method of functions returning functions to sequentially apply to multiple inputs is
455320	463540	called currying, named after the logician Haskell-curry.
463540	470120	If you have experienced programming, why not try to make some curried functions yourself?
470120	475720	This Python program here, for example, uses the built-in lambda syntax to add two numbers
475720	481460	together using currying.
481460	485700	This way of thinking can take a while to get used to, but hopefully I'm starting to convince
485700	492260	you that the higher-order lambda abstractions have more nuance than you might have expected.
492260	497160	To continue building the primitive calculus into a more practical programming language,
497160	502840	we can encode some more common programming concepts into the calculus.
502840	509360	As a quick example, to use Booleans and conditionals, we can represent true as the term lambda
509360	518580	x dot lambda y dot x, the function that takes two inputs and returns the first, and represent
518580	525760	false as the term lambda x dot lambda y dot y, the function that takes two inputs and returns
525760	528280	the second.
528280	533500	This seems completely arbitrary, but look what happens when we encode an if statement
533500	542120	as lambda b dot lambda x dot lambda y dot b apply to x and then y.
542120	547880	This lambda abstraction just takes three inputs, b, x and y, and outputs the result
547880	552400	of applying b to the inputs x and y.
552400	556960	This looks pretty random, but if we input a Boolean as the first argument, and then
556960	563740	any two terms as the inputs x and y, this function will behave just like an if statement.
563740	572800	It will return the first term if the Boolean is true, and the second if it's not.
572800	579880	In Python, this lambda abstraction would be the program if b then return x, else return
579880	583400	y.
583400	585280	Let's test that out.
585280	590440	Applying our if statement to the inputs true m, n, where m and n are some terms in the
590440	594200	lambda calculus, should return m.
594200	602360	Let's plug true in for b first, giving lambda x dot lambda y dot true x, y, apply to m,
602360	605680	then n.
605680	614280	Plugging in m for x gives lambda y dot true m, y, apply to n.
614280	622400	Then finally substituting n for y gives true m, n.
622400	627240	Now we can turn the term true back into its definition in the lambda calculus, the function
627240	632360	that takes two arguments and returns the first.
632360	641600	So let's first substitute m for x, giving lambda y dot m, apply to n.
641600	647240	Finally substituting n for y just returns m, since there aren't any y's in this lambda
647240	649720	abstraction at all.
649720	654760	So after all that, we've ended up with our if statement with the Boolean input true,
654760	661480	and the inputted terms m and n, outputting the first term m, exactly as we expected it
661480	663400	to do.
663400	674000	Try plugging in false to our if statement, and verify that it returns n this time.
674000	677000	You may be starting to feel slightly short change.
677000	680880	The introduction to this video suggested that the lambda calculus would be the solution
680880	684040	to the problem of complicated programming languages.
684320	689240	However, as you saw from the tedious method by which we encode relatively standard features
689240	697160	into the calculus, the lambda calculus is certainly not suited for any real world programming.
697160	700080	So what was the point in all of this?
700080	705520	Well, for starters, once we've tediously encoded concepts into the calculus, we can
705520	712640	actually just ignore the low level implementation, and just deal with the objects themselves.
712640	717600	For example, we now know that Booleans in conditionals can be simulated, so we can just
717600	725160	deal with Boolean terms and if statements without worrying about unfolding their definitions.
725160	729440	This makes programming in the lambda calculus somewhat reasonable.
729440	737680	As an example, we can write the not function as lambda b dot if b then false, else true.
737680	744440	And of this absolute mess if we unfold all of the definitions.
744440	754200	Given that we can also encode numbers, recursion, and data types like pairs, I hope you can
754200	758800	start to see the power of this miniature programming language.
758800	763600	I implore you to study how these concepts can be encoded, but instead, I'd really like
763600	769000	to focus on the implications of our newfound mathematical programming language.
769000	773640	We set out trying to find a simple and easy programming language that we can learn instead
773640	776520	of more verbose and intricate languages.
776520	780920	But instead, we've stumbled across something far more profound.
780920	786120	The lambda calculus gives us a tiny definition of what it means to compute, and because of
786120	791880	this, allows us to study programming and computation mathematically.
791880	797840	My favourite example of this is introducing a simple type system to the lambda calculus.
797840	801480	As some motivation, consider our not function from earlier.
801480	808360	Lambda b dot if b then false, else true.
808360	814720	This function maps the input true to the output false, and the input false to the output true,
814720	818040	essentially just swapping true and false.
818040	820760	But there is a slight subtlety here.
820760	825840	There is no actual requirement for our input to be a boolean.
825840	834240	Our not function apply to an input of, say, 1, beta reduces to if 1 then false, else true.
834240	835960	This is nonsensical.
835960	839880	If 1 makes no sense because 1 isn't a boolean.
839880	844760	So trying to use our encodings of these concepts to reduce this further will result in a term
844760	849320	with no real meaning.
849320	856480	To avoid this, we can add some rules to our lambda calculus.
856480	862320	We'll assign a label, called a type, to terms in the lambda calculus that make sense, which
862320	867480	in our case is going to be built from the types bool for boolean values and num for
867480	869960	numeric values.
869960	874640	We'll indicate the type of a term by writing the type after a colon.
874640	882200	So we'd write true colon bool to say that true is of type boolean.
882200	888360	Lambda abstractions have the type a arrow b, normally said as type a to b, where a is
888360	894760	the type of its input, and b is the type of its output.
894760	899560	We'll specify the type of the input by putting it next to the input variable when writing
899560	902760	lambda abstractions.
902760	908120	So to finally solve our problem of nonsense terms, we'll now say that we can only apply
908120	913760	a lambda abstraction to a term that has the same type as the one specified by its input
913760	918520	variable.
918520	924600	As an example, we'd now write our not function like this, specifying that our input b is
924600	927040	a boolean.
927040	932040	Since this abstraction takes a boolean and then outputs a boolean, it will have type
932040	935400	bool to boole.
935400	939760	This means that we are simply not allowed to apply this function to the term one, as
939760	944360	this has type num and not boole.
944360	948680	Whilst this does limit what the calculus can do, it does stop a lot of nonsense terms
948680	954080	from arising.
954080	958420	The version of lambda calculus with this typing system attached to it is called the simply
958420	965500	typed lambda calculus, and is very reminiscent of statically typed languages like C or Java.
965500	970420	But despite this similarity, the lambda calculus and its simply typed version was invented
970420	976580	by Alonso Church between the 1930s and 40s, before programming and even computer science
976580	981180	itself was being formally studied.
981180	986160	As a side note, Alonso Church was actually the doctoral advisor of the father of computer
986160	991040	science, Alon Turing, whose achievements have rightly earned him the status of a household
991040	993800	name.
993800	998840	Whilst the lambda calculus has played a pivotal role in the study of programming, it has been
998840	1005200	equally as important in the field of mathematical logic, as we can define systems of logic using
1005200	1007200	the calculus.
1007200	1013800	In fact, our simply typed lambda calculus has a particularly interesting interpretation
1013800	1016880	in terms of logic.
1016880	1021840	Let's say that the types in our calculus should be interpreted as propositions, that
1021840	1026840	being statements which are either true or false.
1026840	1031400	Then we'll say that each term in the lambda calculus should be seen as a proof that the
1031400	1037420	proposition corresponding to that term's type is true.
1037420	1042000	As an example, suppose we have an arbitrary type A.
1042000	1047760	We can interpret this as corresponding to a particular proposition.
1047760	1053520	Then we'll think of a term of type A as a proof that A is true.
1053520	1059960	If no such term exists, then A is false.
1059960	1063380	This seems rather strange, but bear with me.
1063380	1068200	If we use this interpretation of our simply typed lambda calculus, then we find that
1068280	1075040	the type of lambda abstractions, that being A to B for some arbitrary types A and B, corresponds
1075040	1079040	to the proposition A implies B.
1079040	1085040	The proposition A implies B is simply stating that if I can prove A is true, then I know
1085040	1089120	that B must be true as well.
1089120	1094120	For example, if A was the proposition that it's raining, and B was the proposition that
1094120	1100720	the ground is wet, then the proposition A implies B would be, if it is raining, then
1100720	1103760	the ground is wet.
1103760	1109200	If we assume that this implication is true, then if I could prove that it was raining,
1109200	1114600	I would also know that the ground is wet.
1114600	1117640	So how does this play out in our calculus?
1117640	1124040	Let's take two types, A and B, then the proposition A implies B is equivalent to the
1124040	1127480	type A to B.
1127480	1135680	Let's suppose that A was true, that is, there exists some term N of type A.
1135680	1141560	If we also suppose that A implies B was true, then there must exist some term of type A
1141560	1144120	to B.
1144120	1150120	This must be a lambda abstraction of the form lambda x dot m, where the input x is of
1150120	1154520	type A and the output m is of type B.
1154520	1162640	Now, A implies B is true, and we know that A is true, so we know that logically, B must
1162640	1164040	be true as well.
1164040	1169160	We'll separate the propositions we're assuming to be true, and the logical conclusions
1169160	1172800	to these assumptions with a line.
1172800	1177480	For our correspondence to work, then, we need to be able to use this lambda abstraction
1177480	1183040	and our term N to create a term of type B.
1183040	1188280	The key here is noticing that we can apply our lambda abstraction to N, because N is
1188280	1190360	of type A.
1190360	1196560	Crucially, we know that this has type B as the lambda abstraction outputs terms of type
1196560	1198760	B.
1198760	1204840	As we can find a term of type B, we know that the proposition corresponding to B is true,
1205000	1209000	just as we expected it to be.
1209000	1215200	This astounding relationship between propositions and types is called the Curry-Howard correspondence
1215200	1219480	and has some fascinating implications.
1219480	1224160	If we build a programming language with this in mind, we can actually use this correspondence
1224160	1230080	to explicitly write mathematical proofs using computer code.
1230080	1237080	These languages are called proof assistants, and popular ones include Lean and Agda.
1238000	1242640	This Lean program here, for example, is a proof that there are infinitely many prime
1242640	1247520	numbers and we know that it's correct since it type checks.
1247520	1252640	As this area of research develops, who knows, in the future mathematics might not be taught
1252640	1258040	with pen and paper, but rather with a keyboard and mouse.
1259000	1261360	Well, that was quite the journey.
1261360	1265880	We started out by exploring the essence of functions, and whilst it certainly isn't
1265880	1270640	a serious contender for modern programming languages, it has allowed us to explore a
1270640	1275920	rich theory of theoretical computer science and mathematical logic, whilst giving us the
1275920	1281480	ability to reason about computer programs and code rigorously.
1281480	1286600	Who knew that a tiny little system of formal logic would have so many implications even
1286640	1292880	a century after its creation.
1292880	1297640	If this topic interests you, I would encourage you to subscribe, leave a like, and browse
1297640	1303600	other videos on this channel for similar explorations of mathematics and theoretical computer science.
1303600	1305000	But until then, goodbye.
