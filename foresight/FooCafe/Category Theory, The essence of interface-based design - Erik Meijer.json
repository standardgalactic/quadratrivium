{"text": " What we're going to do tonight is to celebrate, of course, the three-year anniversary of Foucaf\u00e9. And also we're going to give a tribute to Joachim Lambeck, who is a kind of category theorist that kind of made the connection between the lambda calculus and category theory. And, funnily, his name kind of, you know, has the same prefix as the lambda calculus. That isn't that a coincidence. I don't know. But anyway, so just in the spirit of deliberate and continuous learning, you know, like, who here uses Java 8? A few people. Who here uses Java 6? A few people as well. So it has taken, like, many, many years before Java 6 became Java 8 and added lambdas. Now if the language designers would have practiced deliberate and continuous learning, it would have happened, like, you know, decades ago, because all this knowledge was already developed by people like Lambeck. And tonight I'm going to tell you the tricks how you, as a developer, can tap into the brains of mathematicians and kind of steal their ideas such that, you know, you can become a better developer and then go to your boss and ask for more money, because you're an awesome developer. All right. Let's get started. Oops. So one of my guilty pleasures is I read language specifications. So some of you kind of, you know, might read novels or newspapers, maybe. I read language specifications. And for a while I was collecting them. I had a whole bunch of, you know, going all the way back to, you know, the early Lisp, 1.0 manual, Pascal, everything. So whenever there was a new language, I would read the language manual. So I read all of them, Visual Basic, C-Sharp, ECMAScript, Swift, Dart, you name it. But there's one language specification that even for me was too strong. It was impossible to read. And that language specification is Java 8. Now I don't know, anyone, has anyone here ever looked at the Java language specification? Okay. Did you fall asleep immediately? I mean, you open up this thing and you fall asleep. I mean, it's like, try it, you know, some, you know, and you kind of cannot sleep at night. Your kind of mind is wandering. Just open that thing up. It will work better than any pill. And this one in particular is really weird. So when Java 8 came out, and there's this kind of weird thing with method references, so I thought, I really want to understand this. So I started to read the language pack. It doesn't, my goodness, it's just way too complicated. So what do I do? When something is complicated, I'm always listening to this guy. This is Leslie Lamport, and he won the Turing Award last year. Okay. Well, if you win the Turing Award, well, that means something. And one of the kind of advice that Lamport gives us is that we should kind of do more math. We should use more math. If you're like a mechanical engineer, you build, or like a civil engineer, you build a bridge or something, you use math, okay? If you're a chemist, you use math. But we as computer scientists seem to be afraid of mathematics. And what Lamport says, and what I will tell you, is you shouldn't be afraid. And I think a lot of people here, I don't know, maybe, you know, in Sweden, it's different. You're not afraid of math, you know, you, instead of language specifications, you read like books on calculus before you go to bed, I'm pretty sure. Typically, when I meet developers, they are kind of afraid of mathematics. And I think there's several reasons for that, and those are good reasons. First of all, mathematics, most textbooks are really bad. The notation is weird, it doesn't even type check, you know, if you're trying to kind of, you know, look at it, it doesn't work. The lingo is weird, they have all their own terms. They often, you kind of end up in a rabbit hole, you know, you want to kind of know a little bit, and before you know it, you know, you're kind of, you know, deep into all kind of Greek symbols and other dirty pictures. And last but not least, often mathematics is taught in a bottom up way, okay? So you cannot say, I need to solve a particular problem, and I need a piece of mathematics for that. No, instead, they start bottom up. So you have to first know a whole bunch of mathematics before, finally, you can apply it to your problem. Whereas with computing, we typically teach the other way around. Who here has a computer science degree? Okay, I would say about half. So the other people don't have a computer science degree, they still know how to program, but they didn't start by studying, you know, big O, they didn't start to study touring machines. No, they just opened up an editor and started to hack. They did it top down. And of course, at some point, you will feel that maybe you need a little bit more theory, but programming is typically taught top down. So you don't start with all the theory, but no, you start by solving a particular problem, and then you go down. Let me give you a really good example of that. Linear algebra. When most people teach linear algebra, they talk about matrices and then you have to multiply matrices and then you have to kind of do all kind of mechanical, stupid things. And then you use it to do graphics. But you know, instead of kind of knowing why you do it, you're kind of manipulating this kind of low level representation. Now if you know that a matrix, an m by n matrix is really the representation of a linear function from a sequence of numbers of length n to a sequence of numbers of length m. And matrix multiplication is function composition. So really, when you're doing matrix manipulations, you're doing assembly language programming. This is completely nonsense that we as humans have to do that. If instead they would teach linear algebra as a restricted form of functional programming with some special functions that are linear, which means that they have nice properties, everything would be easy. But these are the stupid mathematicians that are too smart for their own sake and they teach it bottom up. And then in the end, you know, we scratch our heads. I scratch my head way too often. And then we ask ourselves, why is this useful? All right. So linear algebra is really easy. It's just functional programming with linear functions. Matrix multiplication is function composition done. Same is true with category theory. If you look at category theory, it looks scary, just like linear algebra, but it's really easy. So let's start looking at that. So mathematicians often call, this is kind of weird, right? Mathematicians that give us linear algebra, they look at category theory and say this is abstract nonsense. And the reason that they say it's abstract nonsense is because in category theory, proofs are done in a very abstract way. So it's, look at what it says here. It's the study of the general form of mathematical theories without regard to their content. What that means is that all intuition is taken away. And you look at the pure, you know, pure general form. Well, as programmers, we recognize that because whenever we do, whenever we program against an interface, that's exactly what we're doing. We're programming against a thing without regard to their content. We're not programming against a concrete type. We're programming against the abstract interface. And then there can be many concrete types that we can plug in, but the program is still the same. The other thing that's interesting is that here they talk about proofs. So you build your proof on these kind of general theories. Well, there's a very, very interesting thing. It's called the Curry-Howard isomorphism. People heard about the Curry-Howard isomorphism. It's one of the most beautiful ideas I've ever seen. So Curry-Howard isomorphism says that a type is a theorem and the program is the proof for that theorem. Now what means that whenever we're kind of writing code, we're really proving theorems. So we are like mathematicians. Or you can say, mathematicians are really developers, that program really, really slow. It takes them like two decades to kind of write a small proof. But this Curry-Howard isomorphism is really beautiful. I don't have time today to talk about it. But if you take that a little bit further, that's what I'm going to do here is that you define your theorems in terms of these abstract structures. And then you write your code in terms of them, so you do your proofs in terms of them. And so let's continue with that. And as I said, this is really not foreign to, for us developers, because we do this all the time. We do this when we program against interfaces. We do this when we use design patterns. I'm pretty sure that most people have that book on their bookshelves. And I'm also sure that nobody has ever read it. Because when you read it, you get the feeling, what's going on? This is all kind of, you know, how did the mathematicians say this? This is without regard to any actual content, because these design patterns are very abstract and you can instantiate them for specific purposes. But that's the beauty of design patterns, because now you can talk about concepts in a very abstract way, without kind of, you know, being tied to a very concrete implementation. Okay? So that's, already I give you a couple of tricks, how to think like a mathematician and profit from that. Now, what is category theory? Well, category theory is embarrassingly simple. It has two, well, three concepts. First of all, there's a notion of a category, but a category consists of objects and morphisms. Now, as I said, mathematicians are weird people. They use strange lingo. So let's translate this into programming terminology. So a category is really a programming language, okay? And a programming language has types, okay? Like in Java, there's types, Boolean strings, lists, those are the types. And then there are morphisms, well, that's just a fancy word for static method. So morphism from A to B is just a static method that takes a argument of type A and where there's a value of type B, or equivalently, you can say it's a property. Now you can ask yourself, well, if you're saying that we're doing programming, why do I use static methods? Because we also have instance methods. Well, we'll come back to that later. So the whole point of this talk is to kind of, you know, fix this and make this precise. So mix this notion precise that morphisms in a category are just static methods. Now look at this. This is, again, mathematicians. I told you they're slow programmers. So here's an example of a programming language. It's a programming language that has three types, A, B, and C. So it's like characters, integers, and Booleans. That's it. And then, well, if you have three types, then you can define some functions between them. So for example, I can go from Booleans to characters, and I can have a function from characters to characters. Now for these mathematicians, this is so special that they give this language a name, and it's called bold three. Okay. Now imagine if you want to draw this kind of picture for Java, you know, it wouldn't fit, you know, you would need all the walls here, and, you know, maybe the whole city with graffiti like this. Maybe it would look quite nice. It's like an art project. But this is kind of mathematicians. So they are kind of proud that they understand this programming language with three types. Okay. Now, of course, once you have types, you can create other types. And everybody these days seem to want to have tuples. And Java doesn't have tuples, but there's many libraries that provide tuples. Anybody here does Android programming? A few people not so few, what are you Windows phone, maybe? No. But if you do Android programming, you know, you know, and even if you don't, this might be interesting to know, is that in the Android library, there is a type for tuples. That's so important that even on your Android phone, you need tuples. And here is some category theory that defines what tuples are in Mathematician speak. Now you will ask yourself, oh my goodness, where's my beer? The next beer, this looks kind of horrible. Okay. There's like all kind of weird stuff, commuting diagrams, canonical stuff. I don't even understand this. So let's take this Greek and let's try to translate this into a language that we all understand. Okay. So here's the first sentence of that definition of tuples. And it says, let's see be a category with some objects X1 and X2. Well, as I said, a category corresponds to a programming language and a object corresponds to a type. Now, often people confuse objects and instances and whatever. So let's not be confused. So that's why I call them types and types have instances. And whether you want to call the instances objects or the type objects, I don't care. So that's why I call them types. And also then it doesn't clash with the objects in the category. Okay. Now, what can I do when I have two types? Well, I can form a tuple. They don't call it tuples. They call it a product. Okay. So they are going to take these two types, X1 and X2. They're going to create a new type X, which, you know, they can also write as X1 cross X2 and then blah, blah satisfies a universal property, blah, blah, blah, blah, blah, blah. Do you understand this? No. Yes. Good. There's one person that understands it, great. So let's go and drill down a little bit into this. Because I think this picture says, said it much better. So if I have a tuple or a product, I have two functions that I can use to project the values out of this tuple. So I can select the first element and I can select the second one. Now you can ask yourself, why do they start counting at one? Because we as developers always, now our index is zero. And again, these are mathematicians, they don't, they probably never done C programming or whatever. So they can start their counting by one. Anyway, so this is the kind of thing, but then there's all the rest of this. And what we see here is, well, how on earth do you get an instance of a tuple? Well, you need a constructor or a factory function. These mathematicians are not stupid, right? They know that when you create a type, when you have a type, you all you have to have a way to create it. We call it constructor, well, they have here some function that kind of allows you to kind of create a tuple. And then they say, well, if you have such a function, which you create from two morphisms, then if you kind of start with a value here, you apply that to this function. Now you get this guy, that must be the same as kind of projecting the first value or applying this function. So it all must kind of commute. And that looks quite nice in that diagram. Now if you don't like diagram, then you can translate it into equations, whatever you find easier to read. Now, except for this gentleman over there, what's your name? Oh, I cannot pronounce that, but generic, good. Mr. Generic over there, he understands this. But that's kind of, you know, for the rest of us, you know, whose brains are the size of peanuts or smaller, let's kind of continue to put this into our language. So if we go on with this translation, we say that a type A comma B is a product of A and B or a tuple of A and B, if it satisfies blah, blah, blah. There exist two properties underscore one and underscore two that return an A and a B respectively. Any Scala programmers here? You recognize this? Yeah, look at this, I see a smile. Yep. This is Scala, you can project the first and second element, but then there's also, if you have two methods, the factory function for this thing takes two methods and it gives you a function that given a C returns this pair of A and B, and it does that by kind of applying that C to F and G respectively. So this is a little bit different than in Scala because the constructor function behaves a little bit different. But we can, from this, we can create a normal constructor function too. Okay, let's go look at this commuting diagram and it's kind of the same. Now as I said, if you look at Scala, I don't know, I think this mathematics is actually clearer and shorter. Because look at this, trade, blah, blah, blah, extends, blah, blah, blah, abstract this, abstract that, curly open, curly close. Now you see why these mathematicians have their strange lingo because maybe we have editors and we have autocomplete, but look at how many characters we need to write down kind of something simple like this, okay? But here is you see that this is the definition in Scala of a product and I think this is, now you can ask yourself what the heck are those pluses there? Am I going to kind of, I don't know, is this unary plus or no, no, no, that's co and contravariance. But that's way too complicated, but this is actually the way that products are defined in Scala, but what Scala doesn't have is this operator to construct a product. Now the reason why Martin cannot do that is because if you would do that, you already need the notion of functions as objects and that was the whole point of this presentation to figure out, you know, how can we make these morphisms into first class things, okay? So really, you know, if we look at this simple example where we took the idea of tuples and we have seen how the mathematicians do it and we do it, it's really the same except that the mathematicians apply a little bit more rigor, they use weird notation, but the nice thing that they do, that we never do is when they define a type, they talk about properties of the type, what properties should a product have? Because if you look at this definition in Scala, right, from here it says nowhere that when you create a tuple out of two values and you project from that tuple the first value that you actually get the value that you put in there, right? Nothing says this here because it can return null for both sides and it's still kind of according to this type definition a valid implementation of tuple. Of course, you would not accept that, but the type itself doesn't say anything. So if you're a smart programmer and somebody gives you this trait and you have to implement it, you can just return null in both cases, nobody can complain. If they file a bug, you immediately file the bug back and say you didn't specify this thing properly, okay? This is another tip, okay? You just return null, your colleagues complain, you just say sorry, you know, specify it better. And then you can go have a drink, a beer, kind of go to another meeting, put that on your resume, get even more money, look at this, all right, good. So and here is the, you know, again, a slightly different way to do this function. I'm going to skip this for lack of time. Now Mr. Generic here says, oh, I knew this already, but this is old stuff, right? Here is John McCarthy, the inventor of Lisp, and he says, well, come on, I could define all this stuff with top polls and so on in 1960. And then Church, Mr. Alonso Church, who invented the Lambda calculus, he did this already in 1928. Now look, this guy here came up with this in 1928. If you read the papers from Church, he was doing this kind of tuples. In Java 8, it's 2015, last time I checked, there are still no proper tuples in the language. Look at this, I don't even know, it's like 2015 minus, that's nearly a century, okay? And we still don't, this thing still doesn't, we are, and why is that? Because we are afraid of these mathematicians, whereas we should steal their ideas and profit from them, okay? That's really kind of my message today. These people are smart, look at this size of this brain here, you know, if I put my head next to it, it's like 10 times the size, we should leverage that. But what do we do instead? Well first of all, we are proud that, you know, we don't do theory. So if you look at C-Sharp, C-Sharp has delegates, and it's like we don't need any of this theory, we have delegates. But where, you know, where does these delegates come from? What are their properties? We don't know. And then, I don't know if anybody's old enough, probably most of you were not born yet, but when C-Sharp came out, there was a little fight between C-Sharp and Java, where the Java folks said, we don't need any of this lambdas or delegate stuff because we have virtual methods. And so this is another lesson, never say never, okay? Because I think, because they didn't want to lose face for the longest time, Java could not add lambdas because, you know, James Gosling said in public that lambdas are unnecessary. So then you're not going to kind of turn around and add them. No. So first of all, he had to kind of retire, kind of join Google, join whatever company is now at. I think he's doing self-driving cars at Stanford. And finally, they could put delegates lambdas into Java. But the other thing is also, you should not kind of downplay and be arrogant and downplay theory. Okay? You should always stay humble and hungry. You always want to learn. If these mathematicians come up with something, you know, but you better have a look at it because maybe it's something that you can use. All right. But then you can say, come on, Eric, what are you talking about? Customers and categories represent mathematical objects, whereas we as developers, we deal with objects that represents real-world things, okay, like customers and orders and all kind of other boring things that we have to do in our day jobs and rather not do, okay? But that's also not true because most of our programs that we like to write when we don't have to do customers and orders. Our data structures, list, trees, those don't represent real-world objects. I've never seen a list. I've seen trees in the real world, but they're not like the trees that I have in my code, right? And maybe lists a little bit, although, you know, the lists that I have on my refrigerator never get garbage collected. They never get finished, whereas the lists in my computer always kind of, you know, end up kind of disappearing. So, all right, but anyway, so I think that this whole idea that objects represent real-world things is nonsense because most objects that we deal with in programming don't represent real-world objects. And the other thing is that what we can learn, so what we can learn from these mathematicians is that we should be more careful in formalizing the things that we deal with. For example, if we write code in Java, we deal with methods, but these methods themselves, you know, we don't have an object that represents them. Is that true? Well, that's what we're after, but I'll say something more about it later. But the other thing that we can learn from the mathematicians is that we should also be more careful that when we define a type that we think about the properties, because otherwise some smart-ass colleagues of you can always return null and then claim that this is a proper implementation, because you have not specified with that type what the properties are, okay? And the good thing is that we don't have like weird terminology, although if you use UML and all that stuff, I guess there's plenty of craziness there. Now, this is, I'm a big fan of Bertrand Meyer, he's not related because his last name is with a Y and mine is with IJ, but he has a great saying where he says that, you know, objects don't really represent real-world things because you're always kind of removed. Even if you have a person object, it doesn't really represent a person because it's something in the memory of your computer that represents a person. So you're all kind of ready twice removed from reality, okay? So let's just forget about that and just look at objects in programming as formal things just like mathematical objects. All right, now I've been talking about programming, I thought this was about category theory. Now, the thing before we go there is we do have a way to talk about methods as objects and that is with reflection, okay? Because if you do reflection in Java, you can kind of, you know, go to a type, get this method and you can even invoke that method using reflection. Now, reflection, if you think about it, is super complex because it's a program that can reason about itself. Most of us are not even able to reason about ourselves. You know, when we're acting foolishly in public after we've been kind of, you know, partying, are we reflecting? No, typically not. Or maybe we do sometimes. But code, it's amazing that we can write code that kind of reflects about itself and the mathematicians cannot do that. But reflection is kind of a cop out because with reflection, we're not really kind of having an object that represents a method because it's kind of, you know, in the kind of dream world of reflection. And what we're trying to do here with lambdas or with methods references, we're trying to represent methods as normal objects, not as reflective objects. Oh, my goodness. This has to come. Okay. Dave Thomas, small talk, everybody knows Dave Thomas. Okay. Small talk guy. Of course, what do small talk people say? And I was a young boy and we read a small talk was still popular. That was a long time ago. We already had blocks that blocks are things that represent methods. And that's quite remarkable because if you look at small talk, that is very much as the flavor, this anthropomorphic flavor where objects represent real world things where you send messages to it. But still, they already knew that they had to represent methods as objects themselves. Okay. But don't worry. I won't talk about small talk. And the reason is that in small talk, like what we saw here in mathematics, array indexes start with one, which as a Dutch person is unacceptable because the big extra as told us that indexes should start at zero. And you know the reason why? Because when he is kind of, you know, that's why I'm kind of doing this papers. The first paper, there are zero papers here. So that's why it's zero. And now the second paper, now it's two. So you see that's how he can because he always wrote his, his papers by hand. And so he counted like how many papers were already there. Okay. So now you know why you should be counting that with zero. Okay. Now let's kind of talk about why we are really here is how do we represent methods as objects? And again, category theorists have a fancy word for that. They call it exponentials. And then you can ask yourself, why do they call it exponentials? Why don't they call it lambdas or anything normal? Like in TypeScript, you know, arrow functions or, I don't know, blocks. Well, there's actually a good reason. But if we look at this, I don't know, I see people already except for Mr. Generic here. He's like, oh yes, yeah. This is like, you know, beautiful. This is beautiful. For the rest of us, it looks a little bit like, look at this. There's even now two diagrams here. Okay. But I see a lambda. Can you see that here? It's like, you know, the font is not so sharp, but there's a lambda. So we're in the right direction. So let's decode the Greek and let's zoom in. So it says, let's see be a category with binary products. So that's the reason why we started out with tuples because in order to do functions, we need them. That was a little bit of the foresight of me. And let Y and CB objects, the exponential object, Z to the power of Y. Oh my goodness. Why? This is why they're called exponentials because they write it as an exponent. It's defined, blah, blah, blah, and then there's a new word, functor. Oh, I thought that we were ready because I kind of cheated by doing these products first. But now we kind of have another hurdle here. I have to explain to you what functors are. But first, let me kind of explain a little bit why this notation of exponentials makes sense. And the reason is that if I have a function from a type, Y to a type Z, that there are Z to the power of Y possible functions. Okay, so if I have two types, Y and Z, and I take all the functions from Y to Z, then there are Z to the power of Y of them. Now, how can I remember that? Okay, I see somebody here puzzled. Okay, now let's do the simplest case. Let's say that Y, so this is a function from Y to Z. So now let's take Y to be unit, okay, or void. So there's only one value. And let take Z be booleans, true and false. So how many functions are there from void to boolean? Only two. I can go from void to true and from void to false. Okay, now how many functions are there from booleans to unit? Well, there's only one that maps true to unit and false to unit. Okay, those are mathematical functions. Now you can say in Java, how many functions are there from bool to unit? How many? Because I can do print line, you know, of that boolean and that returns unit. I can kind of, you know, send it with an HTTP request to whatever, get it back. That's another function. I can do reflection over the boolean. So there's many functions. And this is why in Java, a method, so I'm a little bit lying because a method, you know, of bool to unit is not really a function because there can be side effects. There's a lot of context that's hidden in Java that you can use as a programmer to kind of cheat and don't show that, you know, that doesn't show up in the signature. Now, if you're, I don't know if there's any kind of, you know, fundamentalist functional programmers here, people that, crazy people that like Haskell and no Haskell programmers here, there's one Haskell programmer. Now he's smiling. He says, yeah, look at that. And Haskell, this is true. No, then your crappy Java, right? Because in Haskell, Haskell functions are really mathematical functions. So everything is explicit. But you know, that's why, you know, what is your name? Oh, my goodness, even, even more complicated than Mr. generic. Let me call you Mr. H. Mr. H there. This code is like probably 10 times longer than the Java code. By the time he's kind of done all his monads and whatever. So, you know, again, maybe it's good to have him as a colleague, because then you can, you know, you can learn from him and then write all this code implicitly. And then he will say, oh, but I can do now my kind of monad transformer with the state monad and the maybe monad and the list monad. And by the time he has figured out how to compose all these monads, you're already here at Foucaf\u00e9 listening to your next talk that you can put on your resume. And you get ahead. Isn't that great? Okay. Good. Let's translate this into normal language. Let L be a language that supports tuples, okay? That's already a big step. And let's assume that Java has tuples and let A and B types in the language, a function A, arrow B, I'm just using normal notation now, can be defined as a factory method from the functor. Okay. So, we're nearly there, but now I have to explain what a functor is because I've removed all the Greek and I say there's a factory method for functions. But in order to do that, I need to know what a functor is. Now what is a functor? And again, this is why most of us hate mathematics so much because I warned you that you often go into the rabbit hole, okay? And now we're going into the rabbit hole a little bit because when you look up functor on Wikipedia, it's even more Greek. Oh my goodness. Ah, does it ever stop? Well, let's look at it and it's not that bad. Let C be a category, a functor, blah, blah, blah, blah, blah, blah, blah, blah, blah. Okay. Let's translate this into normal English. And now we certainly understand it because since Java 6 and it was it, when did Java get generics? Was it Java 5? Wow. Look at that. That's a long time ago. The way they did it, yes. So here a functor is a generic type that associates with each type A, a new type, C of A. So list of T is a functor because I can instantiate it with another type, say int, sorry, integer because generics in Java suck that you can only instantiate them with reference types and not with base types. But yes. And then on that type, there must be a function map that goes from C of A to C of B. Now think about this. What does this thing do? It says that if I go, if I can go, say from integers to string, because I have two string, right, that goes from integers, from integers to string. Now if I have a list of integers, I must be able to kind of, you know, do two string on every element of that list. And that's all what this thing is saying, that if I can go from int to string, then I must go from list of int, oh sorry, list of int to list of string. That is, that's quite reasonable, right? And when we define generics, so again, here's a trick. Whenever your colleague defines a generic type, probably they don't specify that this should hold, that if you have, if you instantiate that generic type with one type, you instantiate with another that you have to be able to go between them. Well, they should have a map function. Now the thing with this map function is that it should have some properties too. Say that, you know, I'm going from list of int to list of int. Well, how do I do that? By doing the identity function, I'm doing nothing on each element. So that should be delivered the same value, right? That is kind of reasonable. The other thing is that if I do a map and then another map, that must be the same as doing the map with these functions combined, okay? And this is like an optimization trick, because instead of taking a list of int, going into a list of string, and then say taking the length of the string, so now getting a list of int again, I don't have to build that intermediate list, because then I can just map this function over that list. So these category theorists also are efficiency freaks, because they say that this map must have these properties so that they can optimize their code, okay? So a functor is just a generic function that has a map operator. Now, in normal Java generics, most functions, most types, most generic types, don't come with a map. Finally, in Java 8, when they introduce streams, streams have a map function. You can go check now. If you Google Java 8 streams, you will see there's a map function. So finally, after like decades and decades, sorry, 20 years of Java and finally, you know, they have map, whereas if they would have listened to the mathematicians, when they designed generics, that should have been built in, because, you know, that gives you again, that is this thing where, you know, a type doesn't come by itself, it comes with properties that it should satisfy. Okay, hey, great. Now we know what a functor is. Now the other thing, if there's category theorists here in the room, I have to be a little bit careful, because what I said is a category was a programming language, and a functor is really something that kind of goes between two categories. So a functor can go between two programming languages. For example, if you have a Java array and a small talk array, then one starts indexing at zero, the other start indexing at one, and now say that I have a method on arrays that sums up the values, when I go from Java to small talk, I have to adjust that sum function to start kind of indexing at one. Okay, that's another example of a functor. But for today, we're only looking at endo functors. Ah, doesn't that sound cool? Endo functors, but an endo functor just means that it stays within one language, it doesn't go between two languages. Okay, good. So this is the Greek decoded. Now I've cheated a little bit already, because in here, you will see when I defined map, I already used the fact that I have a function that I can pass into map. But before Java 8, you couldn't do that, right? Because there were no functional, there were no lambdas, so you could not even define map. So we had to wait until Java 8 in order to have functions such that we can define map. But we're not there yet, because we were trying to kind of come up with how do I represent methods as first-class objects, how do I do lambdas? Okay, and lambdas reminds me, Eric, yes, that's what exponentials are for. Okay, let's go there. Okay, here was the Greek. Okay, blah, blah, blah, there's this object, there's a morphism, eval, blah, blah, blah. Okay, now then this diagram has to commute, and there we see our lambdas, so we're getting close. So let's turn this into reality. And of course, church, or this is Haskell B. Curry, will say, oh, but this is currying in Haskell. If you look here, you know, what this is doing here, this is called eval, blah, blah, blah. It's just currying, and Mr. H has seen this already, and he thought, yeah, when did I start doing Haskell in 1986, when did Haskell want to come out? I already did currying, and all you Java guys can only do it in Java 8. And most of you, oh, most of you were on Java 8. This is very progressive, because I know a lot of companies that are still doing Java 6 most of the time. Okay, now here's, you're not Danish, I'm going to go to insult you. But here is Mr. C++, and he's a smart guy, because in 1979, somewhere, you know, you can find that on the web, he explained that there are no instance methods, okay? An instance method is just a static method that takes the dispointer as an additional argument. As I remembered it in the beginning, I said, we're only looking at morphisms as static methods. I'm going to ignore instance methods. It's because Bjarne told me so. Bjarne told me it's safe to ignore instance methods. So an instance method is just a morphism from the tuple of the disk parameter and the other parameter and returns a value. Okay, so that's where the tuples come in. And guess what? Even C++ is lambdas these days. Isn't this amazing? Here I don't think there's any kind of programming languages out there anymore that we all use that don't have lambdas. But it took many, many decades, and why is that? Because we didn't listen to the mathematicians. All right, now it might be the case that in C++ that Bjarne says, you know, there are no instance methods. But let's check what Java has to say. So if you want to have an even more boring document than the Java language specification, you should read the Java virtual machine specification, okay? But in the Java virtual machine specification, if you browse around a little bit and it says, when you call a class method or an instance method here, local variable zero, they start to count at zero, good boys, okay, is always passed to an object that represents the instance, okay? And the subsequent parameters are passed in subsequent local variables starting at one. So also in Java, there are no instance methods. It's just a static method where the first parameter with index zero is the disk, okay? So we can simply forget about instance methods. Now of course, there are a little bit things that I kind of put under the carpet. There's no carpet here, but you know, imagine there was a carpet, it's things like inheritance and so on. So inheritance is an interesting thing because inheritance is quite useful, although some crazy people say we shouldn't use inheritance, we should use composition. If you have any colleagues that say that, make them look bad and have them fired because they are making your life miserable because inheritance is a good thing. But the thing with inheritance is that usually it's explained in terms of the implementation. You start to talk about V tables and whatever. And the reason is because inheritance is a dirty implementation trick to make it easier to reuse code and to model inheritance mathematically is not easy and people write PhD thesis about that. William Cook, maybe you know him, wrote his PhD thesis about the semantics of inheritance. So I'm not going to talk about that today, okay? But let's continue decoding the Greek and now we are somewhere where we can understand what's going on. So to remind you, here's the category theory with the strange notation with the kind of exponentials and there was this lambda, blah, blah, blah. I didn't even bother to kind of go through that because you know, everybody would fall asleep after a few hot dogs and hamburgers, but now we are something that we can understand. So here, a function type here together with a method apply is a function, we call that a function type. If given any type A and a method M that takes an argument of type B and returns a C, defined on A and remember that if I have a method that's defined on A, it's really that M has type A as the first argument and B as the second argument, okay? Now what we can do is there's a factory method that takes an A and that factory method looks like colon, colon, M and it returns a function from B to C and that function object itself has an apply method such that when I apply that to B, that is the same as calling M on A and passing it B and then here I just cast to C so that you can show that it's the same, okay? Anybody here has used method reference in Java, if you use IntelliJ, it will tell you all the time, right? You write something and it says, I can refactor this into a method reference, do you use that? Anybody here uses IntelliJ? What is your name? Paul? Ah, finally a name I can pronounce, Paul, do you ever use refactor change into method reference? Yes, and do you recognize this kind of double colon crazy thing? So you have been using exponential objects, did you realize that? So now you can go to your boss and say in full cafe, I learned that I'm freaking using exponential objects from category tier in my coding, I need a raise because that son of a bitch next to me has no clue what they're doing, they're still using whatever virtual methods but I know exponential objects, good, but it's amazing. Function references, method references in Java are exactly the same as exponential objects in category tier because the only thing I've done here is translate the Greek into Java code, right? So why did it take so long? They could have sat down, done the same thing as I did, came up with this, said, hey, dude, let's hire somebody to implement this in the compiler and we're done. Okay, but I must say I find this pretty amazing because I'm 100% sure that the Java language designers had no idea of category theory but yet they came up with exactly the same solution. That is the amazing thing, okay? So it must be some universal truth here because otherwise you would not two completely independent people, one from theory, one from practice, come up with the same idea. So if you look at here, if I have a method reference and I call the apply method on that with argument of type B, that is the same as calling the method M on A, passing it B. That is how method references work. This is how category tier works, this is how exponential objects work. I mean, this is a miracle. I don't know about you, but when I discovered this, I don't know, I drank a whole bottle of this stuff. I don't know what this is, this is rum, I drank a neighbor, you know, that's kind of the Dutch vodka, okay? But this is great. Now you can say, great, we now know that method references are exponential objects, okay? So tomorrow when you go back to work, you're saying, let's do some kind of, let's introduce some exponentials and IntelliJ can help us with that. No, don't say that, you kind of use that. But here's Eric Meyer and he has not mentioned the M word yet. I have not mentioned monads yet. So I'm going to do a little bit, yes, now I have, before as well. When I was talking about Haskell, yes, that's true, but that was more like a joke. Okay, now let's look at this thing. So if you look at this exponential object, blah, blah, blah, there's a right adjoint and there's home sets. Now home sets have nothing to do with fish eggs. I don't know, is that the same in Swedish, home in Dutch, that's kind of the eggs of a fish, like caviar. This has nothing to do with caviar, okay? It just says that if I have a function from x to y to z, that is kind of isomorphic to having a function that takes x and y and returns z, okay? So this is really saying that you can curry and uncurry and go in two directions, okay? And a home set, home A, B is just a fancy way of saying all morphisms from A to B, okay? So this is just a fancy thing. And the method, the magic of method references is really what it's saying, right? It's saying that, you know, there's an isomorphism between the lambda expression B arrow A, method reference B and this method call here. So there's nothing kind of really fancy about this. And then, you know, we can kind of talk about adjoints because that was the other thing in there. For an adjoint, I have to have two functors and in our case, it's this. And to really prove that I'm not talking nonsense, you know, here's some real code that actually executes if you use Scala. But now, here's the thing, that if you have two of these adjoint functors and these are the conversions between them, that gives rise to a monad. So we came from exponential objects, there came this notion of adjoint functors. And once you have adjoint functors, you get monads. So there's no escape from the monads. So in the end, everybody will be like Mr. H, because, you know, now that Java 8 has exponentials, the next thing it will have are monads. Because that's what category theory predicts. And I went through this real quick, but I tell you, 10 years from now, 20 years from now, this will be the case. Java will have monads, because monads are related to adjunctions and adjunctions come from exponentials. Now the funny thing is that the state monad comes from this adjunction there, but that's a topic for a different talk. So here's the next thing, when you have a lot of beer tonight, this will be your next tattoo, okay? So category theory here directly corresponds to Java. And if this is a little bit too dark for you, what about this one? This one looks cute, right? And I made a special deal with Liz's tattoo parlor, where if you show your Foucaff\u00e9 t-shirt, you will get a discount on any of those two tattoos. Thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 21.84, "text": " What we're going to do tonight is to celebrate, of course, the three-year anniversary of Foucaf\u00e9.", "tokens": [50364, 708, 321, 434, 516, 281, 360, 4440, 307, 281, 8098, 11, 295, 1164, 11, 264, 1045, 12, 5294, 12962, 295, 479, 263, 496, 69, 526, 13, 51456], "temperature": 0.0, "avg_logprob": -0.3028379266912287, "compression_ratio": 1.3071428571428572, "no_speech_prob": 0.13526709377765656}, {"id": 1, "seek": 0, "start": 21.84, "end": 29.240000000000002, "text": " And also we're going to give a tribute to Joachim Lambeck, who is a kind of category", "tokens": [51456, 400, 611, 321, 434, 516, 281, 976, 257, 24722, 281, 3139, 608, 332, 18825, 650, 547, 11, 567, 307, 257, 733, 295, 7719, 51826], "temperature": 0.0, "avg_logprob": -0.3028379266912287, "compression_ratio": 1.3071428571428572, "no_speech_prob": 0.13526709377765656}, {"id": 2, "seek": 2924, "start": 29.24, "end": 34.839999999999996, "text": " theorist that kind of made the connection between the lambda calculus and category theory.", "tokens": [50364, 27423, 468, 300, 733, 295, 1027, 264, 4984, 1296, 264, 13607, 33400, 293, 7719, 5261, 13, 50644], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 3, "seek": 2924, "start": 34.839999999999996, "end": 39.56, "text": " And, funnily, his name kind of, you know, has the same prefix as the lambda calculus.", "tokens": [50644, 400, 11, 1019, 77, 953, 11, 702, 1315, 733, 295, 11, 291, 458, 11, 575, 264, 912, 46969, 382, 264, 13607, 33400, 13, 50880], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 4, "seek": 2924, "start": 39.56, "end": 41.4, "text": " That isn't that a coincidence.", "tokens": [50880, 663, 1943, 380, 300, 257, 22137, 13, 50972], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 5, "seek": 2924, "start": 41.4, "end": 42.839999999999996, "text": " I don't know.", "tokens": [50972, 286, 500, 380, 458, 13, 51044], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 6, "seek": 2924, "start": 42.839999999999996, "end": 51.2, "text": " But anyway, so just in the spirit of deliberate and continuous learning, you know, like, who", "tokens": [51044, 583, 4033, 11, 370, 445, 294, 264, 3797, 295, 30515, 293, 10957, 2539, 11, 291, 458, 11, 411, 11, 567, 51462], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 7, "seek": 2924, "start": 51.2, "end": 54.36, "text": " here uses Java 8?", "tokens": [51462, 510, 4960, 10745, 1649, 30, 51620], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 8, "seek": 2924, "start": 54.36, "end": 55.36, "text": " A few people.", "tokens": [51620, 316, 1326, 561, 13, 51670], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 9, "seek": 2924, "start": 55.36, "end": 59.12, "text": " Who here uses Java 6?", "tokens": [51670, 2102, 510, 4960, 10745, 1386, 30, 51858], "temperature": 0.0, "avg_logprob": -0.2794342041015625, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.41518887877464294}, {"id": 10, "seek": 5912, "start": 59.12, "end": 60.76, "text": " A few people as well.", "tokens": [50364, 316, 1326, 561, 382, 731, 13, 50446], "temperature": 0.0, "avg_logprob": -0.18128571510314942, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.03742539882659912}, {"id": 11, "seek": 5912, "start": 60.76, "end": 68.88, "text": " So it has taken, like, many, many years before Java 6 became Java 8 and added lambdas.", "tokens": [50446, 407, 309, 575, 2726, 11, 411, 11, 867, 11, 867, 924, 949, 10745, 1386, 3062, 10745, 1649, 293, 3869, 10097, 27476, 13, 50852], "temperature": 0.0, "avg_logprob": -0.18128571510314942, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.03742539882659912}, {"id": 12, "seek": 5912, "start": 68.88, "end": 76.44, "text": " Now if the language designers would have practiced deliberate and continuous learning, it would", "tokens": [50852, 823, 498, 264, 2856, 16196, 576, 362, 19268, 30515, 293, 10957, 2539, 11, 309, 576, 51230], "temperature": 0.0, "avg_logprob": -0.18128571510314942, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.03742539882659912}, {"id": 13, "seek": 5912, "start": 76.44, "end": 81.72, "text": " have happened, like, you know, decades ago, because all this knowledge was already developed", "tokens": [51230, 362, 2011, 11, 411, 11, 291, 458, 11, 7878, 2057, 11, 570, 439, 341, 3601, 390, 1217, 4743, 51494], "temperature": 0.0, "avg_logprob": -0.18128571510314942, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.03742539882659912}, {"id": 14, "seek": 5912, "start": 81.72, "end": 84.96, "text": " by people like Lambeck.", "tokens": [51494, 538, 561, 411, 18825, 650, 547, 13, 51656], "temperature": 0.0, "avg_logprob": -0.18128571510314942, "compression_ratio": 1.5070422535211268, "no_speech_prob": 0.03742539882659912}, {"id": 15, "seek": 8496, "start": 84.96, "end": 90.6, "text": " And tonight I'm going to tell you the tricks how you, as a developer, can tap into the", "tokens": [50364, 400, 4440, 286, 478, 516, 281, 980, 291, 264, 11733, 577, 291, 11, 382, 257, 10754, 11, 393, 5119, 666, 264, 50646], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 16, "seek": 8496, "start": 90.6, "end": 97.44, "text": " brains of mathematicians and kind of steal their ideas such that, you know, you can become", "tokens": [50646, 15442, 295, 32811, 2567, 293, 733, 295, 11009, 641, 3487, 1270, 300, 11, 291, 458, 11, 291, 393, 1813, 50988], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 17, "seek": 8496, "start": 97.44, "end": 102.39999999999999, "text": " a better developer and then go to your boss and ask for more money, because you're an", "tokens": [50988, 257, 1101, 10754, 293, 550, 352, 281, 428, 5741, 293, 1029, 337, 544, 1460, 11, 570, 291, 434, 364, 51236], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 18, "seek": 8496, "start": 102.39999999999999, "end": 104.39999999999999, "text": " awesome developer.", "tokens": [51236, 3476, 10754, 13, 51336], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 19, "seek": 8496, "start": 104.39999999999999, "end": 106.19999999999999, "text": " All right.", "tokens": [51336, 1057, 558, 13, 51426], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 20, "seek": 8496, "start": 106.19999999999999, "end": 109.36, "text": " Let's get started.", "tokens": [51426, 961, 311, 483, 1409, 13, 51584], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 21, "seek": 8496, "start": 109.36, "end": 111.28, "text": " Oops.", "tokens": [51584, 21726, 13, 51680], "temperature": 0.0, "avg_logprob": -0.23976065895774148, "compression_ratio": 1.5436893203883495, "no_speech_prob": 0.26396405696868896}, {"id": 22, "seek": 11128, "start": 111.28, "end": 117.0, "text": " So one of my guilty pleasures is I read language specifications.", "tokens": [50364, 407, 472, 295, 452, 12341, 48627, 307, 286, 1401, 2856, 29448, 13, 50650], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 23, "seek": 11128, "start": 117.0, "end": 122.12, "text": " So some of you kind of, you know, might read novels or newspapers, maybe.", "tokens": [50650, 407, 512, 295, 291, 733, 295, 11, 291, 458, 11, 1062, 1401, 24574, 420, 20781, 11, 1310, 13, 50906], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 24, "seek": 11128, "start": 122.12, "end": 124.2, "text": " I read language specifications.", "tokens": [50906, 286, 1401, 2856, 29448, 13, 51010], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 25, "seek": 11128, "start": 124.2, "end": 126.64, "text": " And for a while I was collecting them.", "tokens": [51010, 400, 337, 257, 1339, 286, 390, 12510, 552, 13, 51132], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 26, "seek": 11128, "start": 126.64, "end": 132.84, "text": " I had a whole bunch of, you know, going all the way back to, you know, the early Lisp,", "tokens": [51132, 286, 632, 257, 1379, 3840, 295, 11, 291, 458, 11, 516, 439, 264, 636, 646, 281, 11, 291, 458, 11, 264, 2440, 441, 7631, 11, 51442], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 27, "seek": 11128, "start": 132.84, "end": 136.16, "text": " 1.0 manual, Pascal, everything.", "tokens": [51442, 502, 13, 15, 9688, 11, 41723, 11, 1203, 13, 51608], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 28, "seek": 11128, "start": 136.16, "end": 140.64, "text": " So whenever there was a new language, I would read the language manual.", "tokens": [51608, 407, 5699, 456, 390, 257, 777, 2856, 11, 286, 576, 1401, 264, 2856, 9688, 13, 51832], "temperature": 0.0, "avg_logprob": -0.15449590420504228, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.21797209978103638}, {"id": 29, "seek": 14064, "start": 140.64, "end": 149.88, "text": " So I read all of them, Visual Basic, C-Sharp, ECMAScript, Swift, Dart, you name it.", "tokens": [50364, 407, 286, 1401, 439, 295, 552, 11, 23187, 31598, 11, 383, 12, 50, 5854, 79, 11, 19081, 44, 3160, 5944, 11, 25539, 11, 30271, 11, 291, 1315, 309, 13, 50826], "temperature": 0.0, "avg_logprob": -0.182628033766106, "compression_ratio": 1.40625, "no_speech_prob": 0.0017225340707227588}, {"id": 30, "seek": 14064, "start": 149.88, "end": 155.83999999999997, "text": " But there's one language specification that even for me was too strong.", "tokens": [50826, 583, 456, 311, 472, 2856, 31256, 300, 754, 337, 385, 390, 886, 2068, 13, 51124], "temperature": 0.0, "avg_logprob": -0.182628033766106, "compression_ratio": 1.40625, "no_speech_prob": 0.0017225340707227588}, {"id": 31, "seek": 14064, "start": 155.83999999999997, "end": 158.2, "text": " It was impossible to read.", "tokens": [51124, 467, 390, 6243, 281, 1401, 13, 51242], "temperature": 0.0, "avg_logprob": -0.182628033766106, "compression_ratio": 1.40625, "no_speech_prob": 0.0017225340707227588}, {"id": 32, "seek": 14064, "start": 158.2, "end": 163.83999999999997, "text": " And that language specification is Java 8.", "tokens": [51242, 400, 300, 2856, 31256, 307, 10745, 1649, 13, 51524], "temperature": 0.0, "avg_logprob": -0.182628033766106, "compression_ratio": 1.40625, "no_speech_prob": 0.0017225340707227588}, {"id": 33, "seek": 16384, "start": 163.84, "end": 171.32, "text": " Now I don't know, anyone, has anyone here ever looked at the Java language specification?", "tokens": [50364, 823, 286, 500, 380, 458, 11, 2878, 11, 575, 2878, 510, 1562, 2956, 412, 264, 10745, 2856, 31256, 30, 50738], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 34, "seek": 16384, "start": 171.32, "end": 172.56, "text": " Okay.", "tokens": [50738, 1033, 13, 50800], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 35, "seek": 16384, "start": 172.56, "end": 174.12, "text": " Did you fall asleep immediately?", "tokens": [50800, 2589, 291, 2100, 11039, 4258, 30, 50878], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 36, "seek": 16384, "start": 174.12, "end": 176.48000000000002, "text": " I mean, you open up this thing and you fall asleep.", "tokens": [50878, 286, 914, 11, 291, 1269, 493, 341, 551, 293, 291, 2100, 11039, 13, 50996], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 37, "seek": 16384, "start": 176.48000000000002, "end": 180.96, "text": " I mean, it's like, try it, you know, some, you know, and you kind of cannot sleep at", "tokens": [50996, 286, 914, 11, 309, 311, 411, 11, 853, 309, 11, 291, 458, 11, 512, 11, 291, 458, 11, 293, 291, 733, 295, 2644, 2817, 412, 51220], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 38, "seek": 16384, "start": 180.96, "end": 181.96, "text": " night.", "tokens": [51220, 1818, 13, 51270], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 39, "seek": 16384, "start": 181.96, "end": 182.96, "text": " Your kind of mind is wandering.", "tokens": [51270, 2260, 733, 295, 1575, 307, 26396, 13, 51320], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 40, "seek": 16384, "start": 182.96, "end": 184.6, "text": " Just open that thing up.", "tokens": [51320, 1449, 1269, 300, 551, 493, 13, 51402], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 41, "seek": 16384, "start": 184.6, "end": 188.72, "text": " It will work better than any pill.", "tokens": [51402, 467, 486, 589, 1101, 813, 604, 8100, 13, 51608], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 42, "seek": 16384, "start": 188.72, "end": 190.76, "text": " And this one in particular is really weird.", "tokens": [51608, 400, 341, 472, 294, 1729, 307, 534, 3657, 13, 51710], "temperature": 0.0, "avg_logprob": -0.21018922629476594, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.046538595110177994}, {"id": 43, "seek": 19076, "start": 190.76, "end": 195.95999999999998, "text": " So when Java 8 came out, and there's this kind of weird thing with method references,", "tokens": [50364, 407, 562, 10745, 1649, 1361, 484, 11, 293, 456, 311, 341, 733, 295, 3657, 551, 365, 3170, 15400, 11, 50624], "temperature": 0.0, "avg_logprob": -0.19207843514375908, "compression_ratio": 1.4951923076923077, "no_speech_prob": 0.005167019087821245}, {"id": 44, "seek": 19076, "start": 195.95999999999998, "end": 199.67999999999998, "text": " so I thought, I really want to understand this.", "tokens": [50624, 370, 286, 1194, 11, 286, 534, 528, 281, 1223, 341, 13, 50810], "temperature": 0.0, "avg_logprob": -0.19207843514375908, "compression_ratio": 1.4951923076923077, "no_speech_prob": 0.005167019087821245}, {"id": 45, "seek": 19076, "start": 199.67999999999998, "end": 204.39999999999998, "text": " So I started to read the language pack.", "tokens": [50810, 407, 286, 1409, 281, 1401, 264, 2856, 2844, 13, 51046], "temperature": 0.0, "avg_logprob": -0.19207843514375908, "compression_ratio": 1.4951923076923077, "no_speech_prob": 0.005167019087821245}, {"id": 46, "seek": 19076, "start": 204.39999999999998, "end": 209.35999999999999, "text": " It doesn't, my goodness, it's just way too complicated.", "tokens": [51046, 467, 1177, 380, 11, 452, 8387, 11, 309, 311, 445, 636, 886, 6179, 13, 51294], "temperature": 0.0, "avg_logprob": -0.19207843514375908, "compression_ratio": 1.4951923076923077, "no_speech_prob": 0.005167019087821245}, {"id": 47, "seek": 19076, "start": 209.35999999999999, "end": 212.35999999999999, "text": " So what do I do?", "tokens": [51294, 407, 437, 360, 286, 360, 30, 51444], "temperature": 0.0, "avg_logprob": -0.19207843514375908, "compression_ratio": 1.4951923076923077, "no_speech_prob": 0.005167019087821245}, {"id": 48, "seek": 19076, "start": 212.35999999999999, "end": 219.6, "text": " When something is complicated, I'm always listening to this guy.", "tokens": [51444, 1133, 746, 307, 6179, 11, 286, 478, 1009, 4764, 281, 341, 2146, 13, 51806], "temperature": 0.0, "avg_logprob": -0.19207843514375908, "compression_ratio": 1.4951923076923077, "no_speech_prob": 0.005167019087821245}, {"id": 49, "seek": 21960, "start": 219.6, "end": 224.48, "text": " This is Leslie Lamport, and he won the Turing Award last year.", "tokens": [50364, 639, 307, 28140, 441, 1215, 477, 11, 293, 415, 1582, 264, 314, 1345, 13894, 1036, 1064, 13, 50608], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 50, "seek": 21960, "start": 224.48, "end": 225.48, "text": " Okay.", "tokens": [50608, 1033, 13, 50658], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 51, "seek": 21960, "start": 225.48, "end": 229.44, "text": " Well, if you win the Turing Award, well, that means something.", "tokens": [50658, 1042, 11, 498, 291, 1942, 264, 314, 1345, 13894, 11, 731, 11, 300, 1355, 746, 13, 50856], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 52, "seek": 21960, "start": 229.44, "end": 236.92, "text": " And one of the kind of advice that Lamport gives us is that we should kind of do more", "tokens": [50856, 400, 472, 295, 264, 733, 295, 5192, 300, 441, 1215, 477, 2709, 505, 307, 300, 321, 820, 733, 295, 360, 544, 51230], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 53, "seek": 21960, "start": 236.92, "end": 237.92, "text": " math.", "tokens": [51230, 5221, 13, 51280], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 54, "seek": 21960, "start": 237.92, "end": 239.35999999999999, "text": " We should use more math.", "tokens": [51280, 492, 820, 764, 544, 5221, 13, 51352], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 55, "seek": 21960, "start": 239.35999999999999, "end": 244.16, "text": " If you're like a mechanical engineer, you build, or like a civil engineer, you build", "tokens": [51352, 759, 291, 434, 411, 257, 12070, 11403, 11, 291, 1322, 11, 420, 411, 257, 5605, 11403, 11, 291, 1322, 51592], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 56, "seek": 21960, "start": 244.16, "end": 248.0, "text": " a bridge or something, you use math, okay?", "tokens": [51592, 257, 7283, 420, 746, 11, 291, 764, 5221, 11, 1392, 30, 51784], "temperature": 0.0, "avg_logprob": -0.18046024867466517, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.2792772948741913}, {"id": 57, "seek": 24800, "start": 248.0, "end": 251.0, "text": " If you're a chemist, you use math.", "tokens": [50364, 759, 291, 434, 257, 4771, 468, 11, 291, 764, 5221, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14957536277124436, "compression_ratio": 1.664, "no_speech_prob": 0.017902521416544914}, {"id": 58, "seek": 24800, "start": 251.0, "end": 255.68, "text": " But we as computer scientists seem to be afraid of mathematics.", "tokens": [50514, 583, 321, 382, 3820, 7708, 1643, 281, 312, 4638, 295, 18666, 13, 50748], "temperature": 0.0, "avg_logprob": -0.14957536277124436, "compression_ratio": 1.664, "no_speech_prob": 0.017902521416544914}, {"id": 59, "seek": 24800, "start": 255.68, "end": 260.8, "text": " And what Lamport says, and what I will tell you, is you shouldn't be afraid.", "tokens": [50748, 400, 437, 441, 1215, 477, 1619, 11, 293, 437, 286, 486, 980, 291, 11, 307, 291, 4659, 380, 312, 4638, 13, 51004], "temperature": 0.0, "avg_logprob": -0.14957536277124436, "compression_ratio": 1.664, "no_speech_prob": 0.017902521416544914}, {"id": 60, "seek": 24800, "start": 260.8, "end": 269.48, "text": " And I think a lot of people here, I don't know, maybe, you know, in Sweden, it's different.", "tokens": [51004, 400, 286, 519, 257, 688, 295, 561, 510, 11, 286, 500, 380, 458, 11, 1310, 11, 291, 458, 11, 294, 17727, 11, 309, 311, 819, 13, 51438], "temperature": 0.0, "avg_logprob": -0.14957536277124436, "compression_ratio": 1.664, "no_speech_prob": 0.017902521416544914}, {"id": 61, "seek": 24800, "start": 269.48, "end": 273.64, "text": " You're not afraid of math, you know, you, instead of language specifications, you read", "tokens": [51438, 509, 434, 406, 4638, 295, 5221, 11, 291, 458, 11, 291, 11, 2602, 295, 2856, 29448, 11, 291, 1401, 51646], "temperature": 0.0, "avg_logprob": -0.14957536277124436, "compression_ratio": 1.664, "no_speech_prob": 0.017902521416544914}, {"id": 62, "seek": 24800, "start": 273.64, "end": 277.12, "text": " like books on calculus before you go to bed, I'm pretty sure.", "tokens": [51646, 411, 3642, 322, 33400, 949, 291, 352, 281, 2901, 11, 286, 478, 1238, 988, 13, 51820], "temperature": 0.0, "avg_logprob": -0.14957536277124436, "compression_ratio": 1.664, "no_speech_prob": 0.017902521416544914}, {"id": 63, "seek": 27712, "start": 278.12, "end": 284.48, "text": " Typically, when I meet developers, they are kind of afraid of mathematics.", "tokens": [50414, 23129, 11, 562, 286, 1677, 8849, 11, 436, 366, 733, 295, 4638, 295, 18666, 13, 50732], "temperature": 0.0, "avg_logprob": -0.20994018978542753, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.03660751134157181}, {"id": 64, "seek": 27712, "start": 284.48, "end": 288.64, "text": " And I think there's several reasons for that, and those are good reasons.", "tokens": [50732, 400, 286, 519, 456, 311, 2940, 4112, 337, 300, 11, 293, 729, 366, 665, 4112, 13, 50940], "temperature": 0.0, "avg_logprob": -0.20994018978542753, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.03660751134157181}, {"id": 65, "seek": 27712, "start": 288.64, "end": 294.72, "text": " First of all, mathematics, most textbooks are really bad.", "tokens": [50940, 2386, 295, 439, 11, 18666, 11, 881, 33587, 366, 534, 1578, 13, 51244], "temperature": 0.0, "avg_logprob": -0.20994018978542753, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.03660751134157181}, {"id": 66, "seek": 27712, "start": 294.72, "end": 299.48, "text": " The notation is weird, it doesn't even type check, you know, if you're trying to kind", "tokens": [51244, 440, 24657, 307, 3657, 11, 309, 1177, 380, 754, 2010, 1520, 11, 291, 458, 11, 498, 291, 434, 1382, 281, 733, 51482], "temperature": 0.0, "avg_logprob": -0.20994018978542753, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.03660751134157181}, {"id": 67, "seek": 27712, "start": 299.48, "end": 304.6, "text": " of, you know, look at it, it doesn't work.", "tokens": [51482, 295, 11, 291, 458, 11, 574, 412, 309, 11, 309, 1177, 380, 589, 13, 51738], "temperature": 0.0, "avg_logprob": -0.20994018978542753, "compression_ratio": 1.6028708133971292, "no_speech_prob": 0.03660751134157181}, {"id": 68, "seek": 30460, "start": 304.6, "end": 309.32000000000005, "text": " The lingo is weird, they have all their own terms.", "tokens": [50364, 440, 287, 18459, 307, 3657, 11, 436, 362, 439, 641, 1065, 2115, 13, 50600], "temperature": 0.0, "avg_logprob": -0.12175398456807039, "compression_ratio": 1.681159420289855, "no_speech_prob": 0.004637720063328743}, {"id": 69, "seek": 30460, "start": 309.32000000000005, "end": 313.24, "text": " They often, you kind of end up in a rabbit hole, you know, you want to kind of know a", "tokens": [50600, 814, 2049, 11, 291, 733, 295, 917, 493, 294, 257, 19509, 5458, 11, 291, 458, 11, 291, 528, 281, 733, 295, 458, 257, 50796], "temperature": 0.0, "avg_logprob": -0.12175398456807039, "compression_ratio": 1.681159420289855, "no_speech_prob": 0.004637720063328743}, {"id": 70, "seek": 30460, "start": 313.24, "end": 318.96000000000004, "text": " little bit, and before you know it, you know, you're kind of, you know, deep into all kind", "tokens": [50796, 707, 857, 11, 293, 949, 291, 458, 309, 11, 291, 458, 11, 291, 434, 733, 295, 11, 291, 458, 11, 2452, 666, 439, 733, 51082], "temperature": 0.0, "avg_logprob": -0.12175398456807039, "compression_ratio": 1.681159420289855, "no_speech_prob": 0.004637720063328743}, {"id": 71, "seek": 30460, "start": 318.96000000000004, "end": 324.0, "text": " of Greek symbols and other dirty pictures.", "tokens": [51082, 295, 10281, 16944, 293, 661, 9360, 5242, 13, 51334], "temperature": 0.0, "avg_logprob": -0.12175398456807039, "compression_ratio": 1.681159420289855, "no_speech_prob": 0.004637720063328743}, {"id": 72, "seek": 30460, "start": 324.0, "end": 331.12, "text": " And last but not least, often mathematics is taught in a bottom up way, okay?", "tokens": [51334, 400, 1036, 457, 406, 1935, 11, 2049, 18666, 307, 5928, 294, 257, 2767, 493, 636, 11, 1392, 30, 51690], "temperature": 0.0, "avg_logprob": -0.12175398456807039, "compression_ratio": 1.681159420289855, "no_speech_prob": 0.004637720063328743}, {"id": 73, "seek": 33112, "start": 331.12, "end": 336.0, "text": " So you cannot say, I need to solve a particular problem, and I need a piece of mathematics", "tokens": [50364, 407, 291, 2644, 584, 11, 286, 643, 281, 5039, 257, 1729, 1154, 11, 293, 286, 643, 257, 2522, 295, 18666, 50608], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 74, "seek": 33112, "start": 336.0, "end": 337.0, "text": " for that.", "tokens": [50608, 337, 300, 13, 50658], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 75, "seek": 33112, "start": 337.0, "end": 339.6, "text": " No, instead, they start bottom up.", "tokens": [50658, 883, 11, 2602, 11, 436, 722, 2767, 493, 13, 50788], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 76, "seek": 33112, "start": 339.6, "end": 345.44, "text": " So you have to first know a whole bunch of mathematics before, finally, you can apply", "tokens": [50788, 407, 291, 362, 281, 700, 458, 257, 1379, 3840, 295, 18666, 949, 11, 2721, 11, 291, 393, 3079, 51080], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 77, "seek": 33112, "start": 345.44, "end": 347.2, "text": " it to your problem.", "tokens": [51080, 309, 281, 428, 1154, 13, 51168], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 78, "seek": 33112, "start": 347.2, "end": 353.32, "text": " Whereas with computing, we typically teach the other way around.", "tokens": [51168, 13813, 365, 15866, 11, 321, 5850, 2924, 264, 661, 636, 926, 13, 51474], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 79, "seek": 33112, "start": 353.32, "end": 356.24, "text": " Who here has a computer science degree?", "tokens": [51474, 2102, 510, 575, 257, 3820, 3497, 4314, 30, 51620], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 80, "seek": 33112, "start": 356.24, "end": 359.64, "text": " Okay, I would say about half.", "tokens": [51620, 1033, 11, 286, 576, 584, 466, 1922, 13, 51790], "temperature": 0.0, "avg_logprob": -0.13955068116140837, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.01466986071318388}, {"id": 81, "seek": 35964, "start": 359.64, "end": 365.88, "text": " So the other people don't have a computer science degree, they still know how to program,", "tokens": [50364, 407, 264, 661, 561, 500, 380, 362, 257, 3820, 3497, 4314, 11, 436, 920, 458, 577, 281, 1461, 11, 50676], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 82, "seek": 35964, "start": 365.88, "end": 372.8, "text": " but they didn't start by studying, you know, big O, they didn't start to study touring", "tokens": [50676, 457, 436, 994, 380, 722, 538, 7601, 11, 291, 458, 11, 955, 422, 11, 436, 994, 380, 722, 281, 2979, 32487, 51022], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 83, "seek": 35964, "start": 372.8, "end": 373.8, "text": " machines.", "tokens": [51022, 8379, 13, 51072], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 84, "seek": 35964, "start": 373.8, "end": 378.03999999999996, "text": " No, they just opened up an editor and started to hack.", "tokens": [51072, 883, 11, 436, 445, 5625, 493, 364, 9839, 293, 1409, 281, 10339, 13, 51284], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 85, "seek": 35964, "start": 378.03999999999996, "end": 380.68, "text": " They did it top down.", "tokens": [51284, 814, 630, 309, 1192, 760, 13, 51416], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 86, "seek": 35964, "start": 380.68, "end": 385.52, "text": " And of course, at some point, you will feel that maybe you need a little bit more theory,", "tokens": [51416, 400, 295, 1164, 11, 412, 512, 935, 11, 291, 486, 841, 300, 1310, 291, 643, 257, 707, 857, 544, 5261, 11, 51658], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 87, "seek": 35964, "start": 385.52, "end": 388.91999999999996, "text": " but programming is typically taught top down.", "tokens": [51658, 457, 9410, 307, 5850, 5928, 1192, 760, 13, 51828], "temperature": 0.0, "avg_logprob": -0.158657487833275, "compression_ratio": 1.6625, "no_speech_prob": 0.049547165632247925}, {"id": 88, "seek": 38892, "start": 388.92, "end": 395.96000000000004, "text": " So you don't start with all the theory, but no, you start by solving a particular problem,", "tokens": [50364, 407, 291, 500, 380, 722, 365, 439, 264, 5261, 11, 457, 572, 11, 291, 722, 538, 12606, 257, 1729, 1154, 11, 50716], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 89, "seek": 38892, "start": 395.96000000000004, "end": 396.96000000000004, "text": " and then you go down.", "tokens": [50716, 293, 550, 291, 352, 760, 13, 50766], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 90, "seek": 38892, "start": 396.96000000000004, "end": 400.24, "text": " Let me give you a really good example of that.", "tokens": [50766, 961, 385, 976, 291, 257, 534, 665, 1365, 295, 300, 13, 50930], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 91, "seek": 38892, "start": 400.24, "end": 402.24, "text": " Linear algebra.", "tokens": [50930, 14670, 289, 21989, 13, 51030], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 92, "seek": 38892, "start": 402.24, "end": 407.88, "text": " When most people teach linear algebra, they talk about matrices and then you have to multiply", "tokens": [51030, 1133, 881, 561, 2924, 8213, 21989, 11, 436, 751, 466, 32284, 293, 550, 291, 362, 281, 12972, 51312], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 93, "seek": 38892, "start": 407.88, "end": 413.76, "text": " matrices and then you have to kind of do all kind of mechanical, stupid things.", "tokens": [51312, 32284, 293, 550, 291, 362, 281, 733, 295, 360, 439, 733, 295, 12070, 11, 6631, 721, 13, 51606], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 94, "seek": 38892, "start": 413.76, "end": 416.40000000000003, "text": " And then you use it to do graphics.", "tokens": [51606, 400, 550, 291, 764, 309, 281, 360, 11837, 13, 51738], "temperature": 0.0, "avg_logprob": -0.15234553459847328, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.03409504145383835}, {"id": 95, "seek": 41640, "start": 416.4, "end": 422.44, "text": " But you know, instead of kind of knowing why you do it, you're kind of manipulating this", "tokens": [50364, 583, 291, 458, 11, 2602, 295, 733, 295, 5276, 983, 291, 360, 309, 11, 291, 434, 733, 295, 40805, 341, 50666], "temperature": 0.0, "avg_logprob": -0.17825967719755978, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.004971240647137165}, {"id": 96, "seek": 41640, "start": 422.44, "end": 424.96, "text": " kind of low level representation.", "tokens": [50666, 733, 295, 2295, 1496, 10290, 13, 50792], "temperature": 0.0, "avg_logprob": -0.17825967719755978, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.004971240647137165}, {"id": 97, "seek": 41640, "start": 424.96, "end": 433.15999999999997, "text": " Now if you know that a matrix, an m by n matrix is really the representation of a linear function", "tokens": [50792, 823, 498, 291, 458, 300, 257, 8141, 11, 364, 275, 538, 297, 8141, 307, 534, 264, 10290, 295, 257, 8213, 2445, 51202], "temperature": 0.0, "avg_logprob": -0.17825967719755978, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.004971240647137165}, {"id": 98, "seek": 41640, "start": 433.15999999999997, "end": 439.35999999999996, "text": " from a sequence of numbers of length n to a sequence of numbers of length m.", "tokens": [51202, 490, 257, 8310, 295, 3547, 295, 4641, 297, 281, 257, 8310, 295, 3547, 295, 4641, 275, 13, 51512], "temperature": 0.0, "avg_logprob": -0.17825967719755978, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.004971240647137165}, {"id": 99, "seek": 41640, "start": 439.35999999999996, "end": 443.12, "text": " And matrix multiplication is function composition.", "tokens": [51512, 400, 8141, 27290, 307, 2445, 12686, 13, 51700], "temperature": 0.0, "avg_logprob": -0.17825967719755978, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.004971240647137165}, {"id": 100, "seek": 44312, "start": 443.12, "end": 448.56, "text": " So really, when you're doing matrix manipulations, you're doing assembly language programming.", "tokens": [50364, 407, 534, 11, 562, 291, 434, 884, 8141, 9258, 4136, 11, 291, 434, 884, 12103, 2856, 9410, 13, 50636], "temperature": 0.0, "avg_logprob": -0.11724112205898639, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.0023079928942024708}, {"id": 101, "seek": 44312, "start": 448.56, "end": 452.92, "text": " This is completely nonsense that we as humans have to do that.", "tokens": [50636, 639, 307, 2584, 14925, 300, 321, 382, 6255, 362, 281, 360, 300, 13, 50854], "temperature": 0.0, "avg_logprob": -0.11724112205898639, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.0023079928942024708}, {"id": 102, "seek": 44312, "start": 452.92, "end": 459.24, "text": " If instead they would teach linear algebra as a restricted form of functional programming", "tokens": [50854, 759, 2602, 436, 576, 2924, 8213, 21989, 382, 257, 20608, 1254, 295, 11745, 9410, 51170], "temperature": 0.0, "avg_logprob": -0.11724112205898639, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.0023079928942024708}, {"id": 103, "seek": 44312, "start": 459.24, "end": 464.6, "text": " with some special functions that are linear, which means that they have nice properties,", "tokens": [51170, 365, 512, 2121, 6828, 300, 366, 8213, 11, 597, 1355, 300, 436, 362, 1481, 7221, 11, 51438], "temperature": 0.0, "avg_logprob": -0.11724112205898639, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.0023079928942024708}, {"id": 104, "seek": 44312, "start": 464.6, "end": 465.84000000000003, "text": " everything would be easy.", "tokens": [51438, 1203, 576, 312, 1858, 13, 51500], "temperature": 0.0, "avg_logprob": -0.11724112205898639, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.0023079928942024708}, {"id": 105, "seek": 44312, "start": 465.84000000000003, "end": 470.84000000000003, "text": " But these are the stupid mathematicians that are too smart for their own sake and they", "tokens": [51500, 583, 613, 366, 264, 6631, 32811, 2567, 300, 366, 886, 4069, 337, 641, 1065, 9717, 293, 436, 51750], "temperature": 0.0, "avg_logprob": -0.11724112205898639, "compression_ratio": 1.7072243346007605, "no_speech_prob": 0.0023079928942024708}, {"id": 106, "seek": 47084, "start": 470.84, "end": 473.15999999999997, "text": " teach it bottom up.", "tokens": [50364, 2924, 309, 2767, 493, 13, 50480], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 107, "seek": 47084, "start": 473.15999999999997, "end": 476.2, "text": " And then in the end, you know, we scratch our heads.", "tokens": [50480, 400, 550, 294, 264, 917, 11, 291, 458, 11, 321, 8459, 527, 8050, 13, 50632], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 108, "seek": 47084, "start": 476.2, "end": 479.76, "text": " I scratch my head way too often.", "tokens": [50632, 286, 8459, 452, 1378, 636, 886, 2049, 13, 50810], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 109, "seek": 47084, "start": 479.76, "end": 482.59999999999997, "text": " And then we ask ourselves, why is this useful?", "tokens": [50810, 400, 550, 321, 1029, 4175, 11, 983, 307, 341, 4420, 30, 50952], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 110, "seek": 47084, "start": 482.59999999999997, "end": 483.59999999999997, "text": " All right.", "tokens": [50952, 1057, 558, 13, 51002], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 111, "seek": 47084, "start": 483.59999999999997, "end": 486.0, "text": " So linear algebra is really easy.", "tokens": [51002, 407, 8213, 21989, 307, 534, 1858, 13, 51122], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 112, "seek": 47084, "start": 486.0, "end": 489.2, "text": " It's just functional programming with linear functions.", "tokens": [51122, 467, 311, 445, 11745, 9410, 365, 8213, 6828, 13, 51282], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 113, "seek": 47084, "start": 489.2, "end": 493.79999999999995, "text": " Matrix multiplication is function composition done.", "tokens": [51282, 36274, 27290, 307, 2445, 12686, 1096, 13, 51512], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 114, "seek": 47084, "start": 493.79999999999995, "end": 495.91999999999996, "text": " Same is true with category theory.", "tokens": [51512, 10635, 307, 2074, 365, 7719, 5261, 13, 51618], "temperature": 0.0, "avg_logprob": -0.19128793150514037, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.015318467281758785}, {"id": 115, "seek": 49592, "start": 495.92, "end": 501.72, "text": " If you look at category theory, it looks scary, just like linear algebra, but it's really", "tokens": [50364, 759, 291, 574, 412, 7719, 5261, 11, 309, 1542, 6958, 11, 445, 411, 8213, 21989, 11, 457, 309, 311, 534, 50654], "temperature": 0.0, "avg_logprob": -0.15273283704926696, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.012887641787528992}, {"id": 116, "seek": 49592, "start": 501.72, "end": 502.72, "text": " easy.", "tokens": [50654, 1858, 13, 50704], "temperature": 0.0, "avg_logprob": -0.15273283704926696, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.012887641787528992}, {"id": 117, "seek": 49592, "start": 502.72, "end": 506.28000000000003, "text": " So let's start looking at that.", "tokens": [50704, 407, 718, 311, 722, 1237, 412, 300, 13, 50882], "temperature": 0.0, "avg_logprob": -0.15273283704926696, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.012887641787528992}, {"id": 118, "seek": 49592, "start": 506.28000000000003, "end": 511.76, "text": " So mathematicians often call, this is kind of weird, right?", "tokens": [50882, 407, 32811, 2567, 2049, 818, 11, 341, 307, 733, 295, 3657, 11, 558, 30, 51156], "temperature": 0.0, "avg_logprob": -0.15273283704926696, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.012887641787528992}, {"id": 119, "seek": 49592, "start": 511.76, "end": 516.2, "text": " Mathematicians that give us linear algebra, they look at category theory and say this", "tokens": [51156, 15776, 14911, 2567, 300, 976, 505, 8213, 21989, 11, 436, 574, 412, 7719, 5261, 293, 584, 341, 51378], "temperature": 0.0, "avg_logprob": -0.15273283704926696, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.012887641787528992}, {"id": 120, "seek": 49592, "start": 516.2, "end": 519.6, "text": " is abstract nonsense.", "tokens": [51378, 307, 12649, 14925, 13, 51548], "temperature": 0.0, "avg_logprob": -0.15273283704926696, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.012887641787528992}, {"id": 121, "seek": 51960, "start": 519.6, "end": 526.16, "text": " And the reason that they say it's abstract nonsense is because in category theory, proofs", "tokens": [50364, 400, 264, 1778, 300, 436, 584, 309, 311, 12649, 14925, 307, 570, 294, 7719, 5261, 11, 8177, 82, 50692], "temperature": 0.0, "avg_logprob": -0.14008613685508828, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.028547106310725212}, {"id": 122, "seek": 51960, "start": 526.16, "end": 530.28, "text": " are done in a very abstract way.", "tokens": [50692, 366, 1096, 294, 257, 588, 12649, 636, 13, 50898], "temperature": 0.0, "avg_logprob": -0.14008613685508828, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.028547106310725212}, {"id": 123, "seek": 51960, "start": 530.28, "end": 533.2, "text": " So it's, look at what it says here.", "tokens": [50898, 407, 309, 311, 11, 574, 412, 437, 309, 1619, 510, 13, 51044], "temperature": 0.0, "avg_logprob": -0.14008613685508828, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.028547106310725212}, {"id": 124, "seek": 51960, "start": 533.2, "end": 541.4, "text": " It's the study of the general form of mathematical theories without regard to their content.", "tokens": [51044, 467, 311, 264, 2979, 295, 264, 2674, 1254, 295, 18894, 13667, 1553, 3843, 281, 641, 2701, 13, 51454], "temperature": 0.0, "avg_logprob": -0.14008613685508828, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.028547106310725212}, {"id": 125, "seek": 51960, "start": 541.4, "end": 545.96, "text": " What that means is that all intuition is taken away.", "tokens": [51454, 708, 300, 1355, 307, 300, 439, 24002, 307, 2726, 1314, 13, 51682], "temperature": 0.0, "avg_logprob": -0.14008613685508828, "compression_ratio": 1.558974358974359, "no_speech_prob": 0.028547106310725212}, {"id": 126, "seek": 54596, "start": 545.96, "end": 551.52, "text": " And you look at the pure, you know, pure general form.", "tokens": [50364, 400, 291, 574, 412, 264, 6075, 11, 291, 458, 11, 6075, 2674, 1254, 13, 50642], "temperature": 0.0, "avg_logprob": -0.15627325843362247, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.13761135935783386}, {"id": 127, "seek": 54596, "start": 551.52, "end": 559.0, "text": " Well, as programmers, we recognize that because whenever we do, whenever we program against", "tokens": [50642, 1042, 11, 382, 41504, 11, 321, 5521, 300, 570, 5699, 321, 360, 11, 5699, 321, 1461, 1970, 51016], "temperature": 0.0, "avg_logprob": -0.15627325843362247, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.13761135935783386}, {"id": 128, "seek": 54596, "start": 559.0, "end": 562.64, "text": " an interface, that's exactly what we're doing.", "tokens": [51016, 364, 9226, 11, 300, 311, 2293, 437, 321, 434, 884, 13, 51198], "temperature": 0.0, "avg_logprob": -0.15627325843362247, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.13761135935783386}, {"id": 129, "seek": 54596, "start": 562.64, "end": 567.2800000000001, "text": " We're programming against a thing without regard to their content.", "tokens": [51198, 492, 434, 9410, 1970, 257, 551, 1553, 3843, 281, 641, 2701, 13, 51430], "temperature": 0.0, "avg_logprob": -0.15627325843362247, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.13761135935783386}, {"id": 130, "seek": 54596, "start": 567.2800000000001, "end": 570.2, "text": " We're not programming against a concrete type.", "tokens": [51430, 492, 434, 406, 9410, 1970, 257, 9859, 2010, 13, 51576], "temperature": 0.0, "avg_logprob": -0.15627325843362247, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.13761135935783386}, {"id": 131, "seek": 54596, "start": 570.2, "end": 573.12, "text": " We're programming against the abstract interface.", "tokens": [51576, 492, 434, 9410, 1970, 264, 12649, 9226, 13, 51722], "temperature": 0.0, "avg_logprob": -0.15627325843362247, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.13761135935783386}, {"id": 132, "seek": 57312, "start": 573.12, "end": 578.68, "text": " And then there can be many concrete types that we can plug in, but the program is still", "tokens": [50364, 400, 550, 456, 393, 312, 867, 9859, 3467, 300, 321, 393, 5452, 294, 11, 457, 264, 1461, 307, 920, 50642], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 133, "seek": 57312, "start": 578.68, "end": 580.68, "text": " the same.", "tokens": [50642, 264, 912, 13, 50742], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 134, "seek": 57312, "start": 580.68, "end": 585.68, "text": " The other thing that's interesting is that here they talk about proofs.", "tokens": [50742, 440, 661, 551, 300, 311, 1880, 307, 300, 510, 436, 751, 466, 8177, 82, 13, 50992], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 135, "seek": 57312, "start": 585.68, "end": 590.96, "text": " So you build your proof on these kind of general theories.", "tokens": [50992, 407, 291, 1322, 428, 8177, 322, 613, 733, 295, 2674, 13667, 13, 51256], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 136, "seek": 57312, "start": 590.96, "end": 595.28, "text": " Well, there's a very, very interesting thing.", "tokens": [51256, 1042, 11, 456, 311, 257, 588, 11, 588, 1880, 551, 13, 51472], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 137, "seek": 57312, "start": 595.28, "end": 597.92, "text": " It's called the Curry-Howard isomorphism.", "tokens": [51472, 467, 311, 1219, 264, 34789, 12, 6462, 515, 307, 32702, 1434, 13, 51604], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 138, "seek": 57312, "start": 597.92, "end": 601.08, "text": " People heard about the Curry-Howard isomorphism.", "tokens": [51604, 3432, 2198, 466, 264, 34789, 12, 6462, 515, 307, 32702, 1434, 13, 51762], "temperature": 0.0, "avg_logprob": -0.13386893272399902, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.02673456072807312}, {"id": 139, "seek": 60108, "start": 601.08, "end": 603.96, "text": " It's one of the most beautiful ideas I've ever seen.", "tokens": [50364, 467, 311, 472, 295, 264, 881, 2238, 3487, 286, 600, 1562, 1612, 13, 50508], "temperature": 0.0, "avg_logprob": -0.1731449564297994, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.07120496779680252}, {"id": 140, "seek": 60108, "start": 603.96, "end": 611.5200000000001, "text": " So Curry-Howard isomorphism says that a type is a theorem and the program is the proof", "tokens": [50508, 407, 34789, 12, 6462, 515, 307, 32702, 1434, 1619, 300, 257, 2010, 307, 257, 20904, 293, 264, 1461, 307, 264, 8177, 50886], "temperature": 0.0, "avg_logprob": -0.1731449564297994, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.07120496779680252}, {"id": 141, "seek": 60108, "start": 611.5200000000001, "end": 613.8000000000001, "text": " for that theorem.", "tokens": [50886, 337, 300, 20904, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1731449564297994, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.07120496779680252}, {"id": 142, "seek": 60108, "start": 613.8000000000001, "end": 619.9200000000001, "text": " Now what means that whenever we're kind of writing code, we're really proving theorems.", "tokens": [51000, 823, 437, 1355, 300, 5699, 321, 434, 733, 295, 3579, 3089, 11, 321, 434, 534, 27221, 10299, 2592, 13, 51306], "temperature": 0.0, "avg_logprob": -0.1731449564297994, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.07120496779680252}, {"id": 143, "seek": 60108, "start": 619.9200000000001, "end": 622.1600000000001, "text": " So we are like mathematicians.", "tokens": [51306, 407, 321, 366, 411, 32811, 2567, 13, 51418], "temperature": 0.0, "avg_logprob": -0.1731449564297994, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.07120496779680252}, {"id": 144, "seek": 60108, "start": 622.1600000000001, "end": 627.88, "text": " Or you can say, mathematicians are really developers, that program really, really slow.", "tokens": [51418, 1610, 291, 393, 584, 11, 32811, 2567, 366, 534, 8849, 11, 300, 1461, 534, 11, 534, 2964, 13, 51704], "temperature": 0.0, "avg_logprob": -0.1731449564297994, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.07120496779680252}, {"id": 145, "seek": 62788, "start": 628.0, "end": 636.6, "text": " It takes them like two decades to kind of write a small proof.", "tokens": [50370, 467, 2516, 552, 411, 732, 7878, 281, 733, 295, 2464, 257, 1359, 8177, 13, 50800], "temperature": 0.0, "avg_logprob": -0.1905461506671216, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.008327377028763294}, {"id": 146, "seek": 62788, "start": 636.6, "end": 640.36, "text": " But this Curry-Howard isomorphism is really beautiful.", "tokens": [50800, 583, 341, 34789, 12, 6462, 515, 307, 32702, 1434, 307, 534, 2238, 13, 50988], "temperature": 0.0, "avg_logprob": -0.1905461506671216, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.008327377028763294}, {"id": 147, "seek": 62788, "start": 640.36, "end": 644.4, "text": " I don't have time today to talk about it.", "tokens": [50988, 286, 500, 380, 362, 565, 965, 281, 751, 466, 309, 13, 51190], "temperature": 0.0, "avg_logprob": -0.1905461506671216, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.008327377028763294}, {"id": 148, "seek": 62788, "start": 644.4, "end": 651.64, "text": " But if you take that a little bit further, that's what I'm going to do here is that you", "tokens": [51190, 583, 498, 291, 747, 300, 257, 707, 857, 3052, 11, 300, 311, 437, 286, 478, 516, 281, 360, 510, 307, 300, 291, 51552], "temperature": 0.0, "avg_logprob": -0.1905461506671216, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.008327377028763294}, {"id": 149, "seek": 62788, "start": 651.64, "end": 656.72, "text": " define your theorems in terms of these abstract structures.", "tokens": [51552, 6964, 428, 10299, 2592, 294, 2115, 295, 613, 12649, 9227, 13, 51806], "temperature": 0.0, "avg_logprob": -0.1905461506671216, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.008327377028763294}, {"id": 150, "seek": 65672, "start": 656.72, "end": 661.36, "text": " And then you write your code in terms of them, so you do your proofs in terms of them.", "tokens": [50364, 400, 550, 291, 2464, 428, 3089, 294, 2115, 295, 552, 11, 370, 291, 360, 428, 8177, 82, 294, 2115, 295, 552, 13, 50596], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 151, "seek": 65672, "start": 661.36, "end": 664.6, "text": " And so let's continue with that.", "tokens": [50596, 400, 370, 718, 311, 2354, 365, 300, 13, 50758], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 152, "seek": 65672, "start": 664.6, "end": 671.5600000000001, "text": " And as I said, this is really not foreign to, for us developers, because we do this all", "tokens": [50758, 400, 382, 286, 848, 11, 341, 307, 534, 406, 5329, 281, 11, 337, 505, 8849, 11, 570, 321, 360, 341, 439, 51106], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 153, "seek": 65672, "start": 671.5600000000001, "end": 672.5600000000001, "text": " the time.", "tokens": [51106, 264, 565, 13, 51156], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 154, "seek": 65672, "start": 672.5600000000001, "end": 675.0400000000001, "text": " We do this when we program against interfaces.", "tokens": [51156, 492, 360, 341, 562, 321, 1461, 1970, 28416, 13, 51280], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 155, "seek": 65672, "start": 675.0400000000001, "end": 678.0400000000001, "text": " We do this when we use design patterns.", "tokens": [51280, 492, 360, 341, 562, 321, 764, 1715, 8294, 13, 51430], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 156, "seek": 65672, "start": 678.0400000000001, "end": 683.36, "text": " I'm pretty sure that most people have that book on their bookshelves.", "tokens": [51430, 286, 478, 1238, 988, 300, 881, 561, 362, 300, 1446, 322, 641, 1446, 2716, 338, 977, 13, 51696], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 157, "seek": 65672, "start": 683.36, "end": 686.36, "text": " And I'm also sure that nobody has ever read it.", "tokens": [51696, 400, 286, 478, 611, 988, 300, 5079, 575, 1562, 1401, 309, 13, 51846], "temperature": 0.0, "avg_logprob": -0.13100047071440882, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.010734908282756805}, {"id": 158, "seek": 68636, "start": 686.4, "end": 689.76, "text": " Because when you read it, you get the feeling, what's going on?", "tokens": [50366, 1436, 562, 291, 1401, 309, 11, 291, 483, 264, 2633, 11, 437, 311, 516, 322, 30, 50534], "temperature": 0.0, "avg_logprob": -0.13926871039650657, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.024399198591709137}, {"id": 159, "seek": 68636, "start": 689.76, "end": 693.44, "text": " This is all kind of, you know, how did the mathematicians say this?", "tokens": [50534, 639, 307, 439, 733, 295, 11, 291, 458, 11, 577, 630, 264, 32811, 2567, 584, 341, 30, 50718], "temperature": 0.0, "avg_logprob": -0.13926871039650657, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.024399198591709137}, {"id": 160, "seek": 68636, "start": 693.44, "end": 699.52, "text": " This is without regard to any actual content, because these design patterns are very abstract", "tokens": [50718, 639, 307, 1553, 3843, 281, 604, 3539, 2701, 11, 570, 613, 1715, 8294, 366, 588, 12649, 51022], "temperature": 0.0, "avg_logprob": -0.13926871039650657, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.024399198591709137}, {"id": 161, "seek": 68636, "start": 699.52, "end": 702.92, "text": " and you can instantiate them for specific purposes.", "tokens": [51022, 293, 291, 393, 9836, 13024, 552, 337, 2685, 9932, 13, 51192], "temperature": 0.0, "avg_logprob": -0.13926871039650657, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.024399198591709137}, {"id": 162, "seek": 68636, "start": 702.92, "end": 707.32, "text": " But that's the beauty of design patterns, because now you can talk about concepts in", "tokens": [51192, 583, 300, 311, 264, 6643, 295, 1715, 8294, 11, 570, 586, 291, 393, 751, 466, 10392, 294, 51412], "temperature": 0.0, "avg_logprob": -0.13926871039650657, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.024399198591709137}, {"id": 163, "seek": 68636, "start": 707.32, "end": 715.08, "text": " a very abstract way, without kind of, you know, being tied to a very concrete implementation.", "tokens": [51412, 257, 588, 12649, 636, 11, 1553, 733, 295, 11, 291, 458, 11, 885, 9601, 281, 257, 588, 9859, 11420, 13, 51800], "temperature": 0.0, "avg_logprob": -0.13926871039650657, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.024399198591709137}, {"id": 164, "seek": 71508, "start": 715.8000000000001, "end": 716.8000000000001, "text": " Okay?", "tokens": [50400, 1033, 30, 50450], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 165, "seek": 71508, "start": 716.8000000000001, "end": 723.2800000000001, "text": " So that's, already I give you a couple of tricks, how to think like a mathematician", "tokens": [50450, 407, 300, 311, 11, 1217, 286, 976, 291, 257, 1916, 295, 11733, 11, 577, 281, 519, 411, 257, 48281, 50774], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 166, "seek": 71508, "start": 723.2800000000001, "end": 725.5200000000001, "text": " and profit from that.", "tokens": [50774, 293, 7475, 490, 300, 13, 50886], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 167, "seek": 71508, "start": 725.5200000000001, "end": 729.64, "text": " Now, what is category theory?", "tokens": [50886, 823, 11, 437, 307, 7719, 5261, 30, 51092], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 168, "seek": 71508, "start": 729.64, "end": 733.5600000000001, "text": " Well, category theory is embarrassingly simple.", "tokens": [51092, 1042, 11, 7719, 5261, 307, 9187, 12163, 2199, 13, 51288], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 169, "seek": 71508, "start": 733.5600000000001, "end": 737.0, "text": " It has two, well, three concepts.", "tokens": [51288, 467, 575, 732, 11, 731, 11, 1045, 10392, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 170, "seek": 71508, "start": 737.0, "end": 744.9200000000001, "text": " First of all, there's a notion of a category, but a category consists of objects and morphisms.", "tokens": [51460, 2386, 295, 439, 11, 456, 311, 257, 10710, 295, 257, 7719, 11, 457, 257, 7719, 14689, 295, 6565, 293, 25778, 13539, 13, 51856], "temperature": 0.0, "avg_logprob": -0.2655915463908335, "compression_ratio": 1.5336538461538463, "no_speech_prob": 0.0026678380090743303}, {"id": 171, "seek": 74492, "start": 745.92, "end": 750.1999999999999, "text": " Now, as I said, mathematicians are weird people.", "tokens": [50414, 823, 11, 382, 286, 848, 11, 32811, 2567, 366, 3657, 561, 13, 50628], "temperature": 0.0, "avg_logprob": -0.21997647285461425, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.002087353728711605}, {"id": 172, "seek": 74492, "start": 750.1999999999999, "end": 751.76, "text": " They use strange lingo.", "tokens": [50628, 814, 764, 5861, 287, 18459, 13, 50706], "temperature": 0.0, "avg_logprob": -0.21997647285461425, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.002087353728711605}, {"id": 173, "seek": 74492, "start": 751.76, "end": 755.12, "text": " So let's translate this into programming terminology.", "tokens": [50706, 407, 718, 311, 13799, 341, 666, 9410, 27575, 13, 50874], "temperature": 0.0, "avg_logprob": -0.21997647285461425, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.002087353728711605}, {"id": 174, "seek": 74492, "start": 755.12, "end": 761.0, "text": " So a category is really a programming language, okay?", "tokens": [50874, 407, 257, 7719, 307, 534, 257, 9410, 2856, 11, 1392, 30, 51168], "temperature": 0.0, "avg_logprob": -0.21997647285461425, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.002087353728711605}, {"id": 175, "seek": 74492, "start": 761.0, "end": 764.28, "text": " And a programming language has types, okay?", "tokens": [51168, 400, 257, 9410, 2856, 575, 3467, 11, 1392, 30, 51332], "temperature": 0.0, "avg_logprob": -0.21997647285461425, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.002087353728711605}, {"id": 176, "seek": 74492, "start": 764.28, "end": 770.7199999999999, "text": " Like in Java, there's types, Boolean strings, lists, those are the types.", "tokens": [51332, 1743, 294, 10745, 11, 456, 311, 3467, 11, 23351, 28499, 13985, 11, 14511, 11, 729, 366, 264, 3467, 13, 51654], "temperature": 0.0, "avg_logprob": -0.21997647285461425, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.002087353728711605}, {"id": 177, "seek": 77072, "start": 770.72, "end": 776.36, "text": " And then there are morphisms, well, that's just a fancy word for static method.", "tokens": [50364, 400, 550, 456, 366, 25778, 13539, 11, 731, 11, 300, 311, 445, 257, 10247, 1349, 337, 13437, 3170, 13, 50646], "temperature": 0.0, "avg_logprob": -0.14890624152289497, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.009296041913330555}, {"id": 178, "seek": 77072, "start": 776.36, "end": 785.96, "text": " So morphism from A to B is just a static method that takes a argument of type A and", "tokens": [50646, 407, 25778, 1434, 490, 316, 281, 363, 307, 445, 257, 13437, 3170, 300, 2516, 257, 6770, 295, 2010, 316, 293, 51126], "temperature": 0.0, "avg_logprob": -0.14890624152289497, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.009296041913330555}, {"id": 179, "seek": 77072, "start": 785.96, "end": 793.08, "text": " where there's a value of type B, or equivalently, you can say it's a property.", "tokens": [51126, 689, 456, 311, 257, 2158, 295, 2010, 363, 11, 420, 9052, 2276, 11, 291, 393, 584, 309, 311, 257, 4707, 13, 51482], "temperature": 0.0, "avg_logprob": -0.14890624152289497, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.009296041913330555}, {"id": 180, "seek": 77072, "start": 793.08, "end": 798.6, "text": " Now you can ask yourself, well, if you're saying that we're doing programming, why do", "tokens": [51482, 823, 291, 393, 1029, 1803, 11, 731, 11, 498, 291, 434, 1566, 300, 321, 434, 884, 9410, 11, 983, 360, 51758], "temperature": 0.0, "avg_logprob": -0.14890624152289497, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.009296041913330555}, {"id": 181, "seek": 79860, "start": 798.6, "end": 801.48, "text": " I use static methods?", "tokens": [50364, 286, 764, 13437, 7150, 30, 50508], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 182, "seek": 79860, "start": 801.48, "end": 803.12, "text": " Because we also have instance methods.", "tokens": [50508, 1436, 321, 611, 362, 5197, 7150, 13, 50590], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 183, "seek": 79860, "start": 803.12, "end": 805.08, "text": " Well, we'll come back to that later.", "tokens": [50590, 1042, 11, 321, 603, 808, 646, 281, 300, 1780, 13, 50688], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 184, "seek": 79860, "start": 805.08, "end": 811.16, "text": " So the whole point of this talk is to kind of, you know, fix this and make this precise.", "tokens": [50688, 407, 264, 1379, 935, 295, 341, 751, 307, 281, 733, 295, 11, 291, 458, 11, 3191, 341, 293, 652, 341, 13600, 13, 50992], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 185, "seek": 79860, "start": 811.16, "end": 820.08, "text": " So mix this notion precise that morphisms in a category are just static methods.", "tokens": [50992, 407, 2890, 341, 10710, 13600, 300, 25778, 13539, 294, 257, 7719, 366, 445, 13437, 7150, 13, 51438], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 186, "seek": 79860, "start": 820.08, "end": 821.4, "text": " Now look at this.", "tokens": [51438, 823, 574, 412, 341, 13, 51504], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 187, "seek": 79860, "start": 821.4, "end": 823.28, "text": " This is, again, mathematicians.", "tokens": [51504, 639, 307, 11, 797, 11, 32811, 2567, 13, 51598], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 188, "seek": 79860, "start": 823.28, "end": 825.5600000000001, "text": " I told you they're slow programmers.", "tokens": [51598, 286, 1907, 291, 436, 434, 2964, 41504, 13, 51712], "temperature": 0.0, "avg_logprob": -0.18397753166429925, "compression_ratio": 1.5874439461883407, "no_speech_prob": 0.006810432765632868}, {"id": 189, "seek": 82556, "start": 825.56, "end": 828.8399999999999, "text": " So here's an example of a programming language.", "tokens": [50364, 407, 510, 311, 364, 1365, 295, 257, 9410, 2856, 13, 50528], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 190, "seek": 82556, "start": 828.8399999999999, "end": 833.1999999999999, "text": " It's a programming language that has three types, A, B, and C.", "tokens": [50528, 467, 311, 257, 9410, 2856, 300, 575, 1045, 3467, 11, 316, 11, 363, 11, 293, 383, 13, 50746], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 191, "seek": 82556, "start": 833.1999999999999, "end": 836.8399999999999, "text": " So it's like characters, integers, and Booleans.", "tokens": [50746, 407, 309, 311, 411, 4342, 11, 41674, 11, 293, 23351, 24008, 13, 50928], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 192, "seek": 82556, "start": 836.8399999999999, "end": 838.4799999999999, "text": " That's it.", "tokens": [50928, 663, 311, 309, 13, 51010], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 193, "seek": 82556, "start": 838.4799999999999, "end": 843.1199999999999, "text": " And then, well, if you have three types, then you can define some functions between them.", "tokens": [51010, 400, 550, 11, 731, 11, 498, 291, 362, 1045, 3467, 11, 550, 291, 393, 6964, 512, 6828, 1296, 552, 13, 51242], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 194, "seek": 82556, "start": 843.1199999999999, "end": 848.76, "text": " So for example, I can go from Booleans to characters, and I can have a function from", "tokens": [51242, 407, 337, 1365, 11, 286, 393, 352, 490, 23351, 24008, 281, 4342, 11, 293, 286, 393, 362, 257, 2445, 490, 51524], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 195, "seek": 82556, "start": 848.76, "end": 851.4399999999999, "text": " characters to characters.", "tokens": [51524, 4342, 281, 4342, 13, 51658], "temperature": 0.0, "avg_logprob": -0.12458745715687576, "compression_ratio": 1.7922705314009661, "no_speech_prob": 0.003290327498689294}, {"id": 196, "seek": 85144, "start": 851.44, "end": 858.32, "text": " Now for these mathematicians, this is so special that they give this language a name, and it's", "tokens": [50364, 823, 337, 613, 32811, 2567, 11, 341, 307, 370, 2121, 300, 436, 976, 341, 2856, 257, 1315, 11, 293, 309, 311, 50708], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 197, "seek": 85144, "start": 858.32, "end": 860.44, "text": " called bold three.", "tokens": [50708, 1219, 11928, 1045, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 198, "seek": 85144, "start": 860.44, "end": 861.44, "text": " Okay.", "tokens": [50814, 1033, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 199, "seek": 85144, "start": 861.44, "end": 868.48, "text": " Now imagine if you want to draw this kind of picture for Java, you know, it wouldn't fit,", "tokens": [50864, 823, 3811, 498, 291, 528, 281, 2642, 341, 733, 295, 3036, 337, 10745, 11, 291, 458, 11, 309, 2759, 380, 3318, 11, 51216], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 200, "seek": 85144, "start": 868.48, "end": 873.4000000000001, "text": " you know, you would need all the walls here, and, you know, maybe the whole city with graffiti", "tokens": [51216, 291, 458, 11, 291, 576, 643, 439, 264, 7920, 510, 11, 293, 11, 291, 458, 11, 1310, 264, 1379, 2307, 365, 40531, 51462], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 201, "seek": 85144, "start": 873.4000000000001, "end": 874.4000000000001, "text": " like this.", "tokens": [51462, 411, 341, 13, 51512], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 202, "seek": 85144, "start": 874.4000000000001, "end": 875.4000000000001, "text": " Maybe it would look quite nice.", "tokens": [51512, 2704, 309, 576, 574, 1596, 1481, 13, 51562], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 203, "seek": 85144, "start": 875.4000000000001, "end": 876.6800000000001, "text": " It's like an art project.", "tokens": [51562, 467, 311, 411, 364, 1523, 1716, 13, 51626], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 204, "seek": 85144, "start": 876.6800000000001, "end": 878.12, "text": " But this is kind of mathematicians.", "tokens": [51626, 583, 341, 307, 733, 295, 32811, 2567, 13, 51698], "temperature": 0.0, "avg_logprob": -0.21593667720926218, "compression_ratio": 1.683127572016461, "no_speech_prob": 0.054498109966516495}, {"id": 205, "seek": 87812, "start": 878.12, "end": 884.16, "text": " So they are kind of proud that they understand this programming language with three types.", "tokens": [50364, 407, 436, 366, 733, 295, 4570, 300, 436, 1223, 341, 9410, 2856, 365, 1045, 3467, 13, 50666], "temperature": 0.0, "avg_logprob": -0.2189707983107794, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.004159265663474798}, {"id": 206, "seek": 87812, "start": 884.16, "end": 885.16, "text": " Okay.", "tokens": [50666, 1033, 13, 50716], "temperature": 0.0, "avg_logprob": -0.2189707983107794, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.004159265663474798}, {"id": 207, "seek": 87812, "start": 885.16, "end": 893.28, "text": " Now, of course, once you have types, you can create other types.", "tokens": [50716, 823, 11, 295, 1164, 11, 1564, 291, 362, 3467, 11, 291, 393, 1884, 661, 3467, 13, 51122], "temperature": 0.0, "avg_logprob": -0.2189707983107794, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.004159265663474798}, {"id": 208, "seek": 87812, "start": 893.28, "end": 899.04, "text": " And everybody these days seem to want to have tuples.", "tokens": [51122, 400, 2201, 613, 1708, 1643, 281, 528, 281, 362, 2604, 2622, 13, 51410], "temperature": 0.0, "avg_logprob": -0.2189707983107794, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.004159265663474798}, {"id": 209, "seek": 87812, "start": 899.04, "end": 903.4, "text": " And Java doesn't have tuples, but there's many libraries that provide tuples.", "tokens": [51410, 400, 10745, 1177, 380, 362, 2604, 2622, 11, 457, 456, 311, 867, 15148, 300, 2893, 2604, 2622, 13, 51628], "temperature": 0.0, "avg_logprob": -0.2189707983107794, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.004159265663474798}, {"id": 210, "seek": 87812, "start": 903.4, "end": 906.76, "text": " Anybody here does Android programming?", "tokens": [51628, 19082, 510, 775, 8853, 9410, 30, 51796], "temperature": 0.0, "avg_logprob": -0.2189707983107794, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.004159265663474798}, {"id": 211, "seek": 90676, "start": 906.76, "end": 911.56, "text": " A few people not so few, what are you Windows phone, maybe?", "tokens": [50364, 316, 1326, 561, 406, 370, 1326, 11, 437, 366, 291, 8591, 2593, 11, 1310, 30, 50604], "temperature": 0.0, "avg_logprob": -0.2531814794430787, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.03871089965105057}, {"id": 212, "seek": 90676, "start": 911.56, "end": 912.56, "text": " No.", "tokens": [50604, 883, 13, 50654], "temperature": 0.0, "avg_logprob": -0.2531814794430787, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.03871089965105057}, {"id": 213, "seek": 90676, "start": 912.56, "end": 918.08, "text": " But if you do Android programming, you know, you know, and even if you don't, this might", "tokens": [50654, 583, 498, 291, 360, 8853, 9410, 11, 291, 458, 11, 291, 458, 11, 293, 754, 498, 291, 500, 380, 11, 341, 1062, 50930], "temperature": 0.0, "avg_logprob": -0.2531814794430787, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.03871089965105057}, {"id": 214, "seek": 90676, "start": 918.08, "end": 926.4, "text": " be interesting to know, is that in the Android library, there is a type for tuples.", "tokens": [50930, 312, 1880, 281, 458, 11, 307, 300, 294, 264, 8853, 6405, 11, 456, 307, 257, 2010, 337, 2604, 2622, 13, 51346], "temperature": 0.0, "avg_logprob": -0.2531814794430787, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.03871089965105057}, {"id": 215, "seek": 90676, "start": 926.4, "end": 931.72, "text": " That's so important that even on your Android phone, you need tuples.", "tokens": [51346, 663, 311, 370, 1021, 300, 754, 322, 428, 8853, 2593, 11, 291, 643, 2604, 2622, 13, 51612], "temperature": 0.0, "avg_logprob": -0.2531814794430787, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.03871089965105057}, {"id": 216, "seek": 93172, "start": 931.72, "end": 940.36, "text": " And here is some category theory that defines what tuples are in Mathematician speak.", "tokens": [50364, 400, 510, 307, 512, 7719, 5261, 300, 23122, 437, 2604, 2622, 366, 294, 15776, 14911, 952, 1710, 13, 50796], "temperature": 0.0, "avg_logprob": -0.21623657970893673, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.6856053471565247}, {"id": 217, "seek": 93172, "start": 940.36, "end": 945.08, "text": " Now you will ask yourself, oh my goodness, where's my beer?", "tokens": [50796, 823, 291, 486, 1029, 1803, 11, 1954, 452, 8387, 11, 689, 311, 452, 8795, 30, 51032], "temperature": 0.0, "avg_logprob": -0.21623657970893673, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.6856053471565247}, {"id": 218, "seek": 93172, "start": 945.08, "end": 947.36, "text": " The next beer, this looks kind of horrible.", "tokens": [51032, 440, 958, 8795, 11, 341, 1542, 733, 295, 9263, 13, 51146], "temperature": 0.0, "avg_logprob": -0.21623657970893673, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.6856053471565247}, {"id": 219, "seek": 93172, "start": 947.36, "end": 948.36, "text": " Okay.", "tokens": [51146, 1033, 13, 51196], "temperature": 0.0, "avg_logprob": -0.21623657970893673, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.6856053471565247}, {"id": 220, "seek": 93172, "start": 948.36, "end": 954.28, "text": " There's like all kind of weird stuff, commuting diagrams, canonical stuff.", "tokens": [51196, 821, 311, 411, 439, 733, 295, 3657, 1507, 11, 800, 10861, 36709, 11, 46491, 1507, 13, 51492], "temperature": 0.0, "avg_logprob": -0.21623657970893673, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.6856053471565247}, {"id": 221, "seek": 93172, "start": 954.28, "end": 956.2, "text": " I don't even understand this.", "tokens": [51492, 286, 500, 380, 754, 1223, 341, 13, 51588], "temperature": 0.0, "avg_logprob": -0.21623657970893673, "compression_ratio": 1.4563106796116505, "no_speech_prob": 0.6856053471565247}, {"id": 222, "seek": 95620, "start": 956.2, "end": 966.1600000000001, "text": " So let's take this Greek and let's try to translate this into a language that we all", "tokens": [50364, 407, 718, 311, 747, 341, 10281, 293, 718, 311, 853, 281, 13799, 341, 666, 257, 2856, 300, 321, 439, 50862], "temperature": 0.0, "avg_logprob": -0.21475065999956272, "compression_ratio": 1.4012345679012346, "no_speech_prob": 0.007109868340194225}, {"id": 223, "seek": 95620, "start": 966.1600000000001, "end": 967.1600000000001, "text": " understand.", "tokens": [50862, 1223, 13, 50912], "temperature": 0.0, "avg_logprob": -0.21475065999956272, "compression_ratio": 1.4012345679012346, "no_speech_prob": 0.007109868340194225}, {"id": 224, "seek": 95620, "start": 967.1600000000001, "end": 968.1600000000001, "text": " Okay.", "tokens": [50912, 1033, 13, 50962], "temperature": 0.0, "avg_logprob": -0.21475065999956272, "compression_ratio": 1.4012345679012346, "no_speech_prob": 0.007109868340194225}, {"id": 225, "seek": 95620, "start": 968.1600000000001, "end": 975.5200000000001, "text": " So here's the first sentence of that definition of tuples.", "tokens": [50962, 407, 510, 311, 264, 700, 8174, 295, 300, 7123, 295, 2604, 2622, 13, 51330], "temperature": 0.0, "avg_logprob": -0.21475065999956272, "compression_ratio": 1.4012345679012346, "no_speech_prob": 0.007109868340194225}, {"id": 226, "seek": 95620, "start": 975.5200000000001, "end": 981.96, "text": " And it says, let's see be a category with some objects X1 and X2.", "tokens": [51330, 400, 309, 1619, 11, 718, 311, 536, 312, 257, 7719, 365, 512, 6565, 1783, 16, 293, 1783, 17, 13, 51652], "temperature": 0.0, "avg_logprob": -0.21475065999956272, "compression_ratio": 1.4012345679012346, "no_speech_prob": 0.007109868340194225}, {"id": 227, "seek": 98196, "start": 981.96, "end": 991.1600000000001, "text": " Well, as I said, a category corresponds to a programming language and a object corresponds", "tokens": [50364, 1042, 11, 382, 286, 848, 11, 257, 7719, 23249, 281, 257, 9410, 2856, 293, 257, 2657, 23249, 50824], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 228, "seek": 98196, "start": 991.1600000000001, "end": 992.1600000000001, "text": " to a type.", "tokens": [50824, 281, 257, 2010, 13, 50874], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 229, "seek": 98196, "start": 992.1600000000001, "end": 999.32, "text": " Now, often people confuse objects and instances and whatever.", "tokens": [50874, 823, 11, 2049, 561, 28584, 6565, 293, 14519, 293, 2035, 13, 51232], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 230, "seek": 98196, "start": 999.32, "end": 1000.52, "text": " So let's not be confused.", "tokens": [51232, 407, 718, 311, 406, 312, 9019, 13, 51292], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 231, "seek": 98196, "start": 1000.52, "end": 1003.88, "text": " So that's why I call them types and types have instances.", "tokens": [51292, 407, 300, 311, 983, 286, 818, 552, 3467, 293, 3467, 362, 14519, 13, 51460], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 232, "seek": 98196, "start": 1003.88, "end": 1008.32, "text": " And whether you want to call the instances objects or the type objects, I don't care.", "tokens": [51460, 400, 1968, 291, 528, 281, 818, 264, 14519, 6565, 420, 264, 2010, 6565, 11, 286, 500, 380, 1127, 13, 51682], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 233, "seek": 98196, "start": 1008.32, "end": 1010.2, "text": " So that's why I call them types.", "tokens": [51682, 407, 300, 311, 983, 286, 818, 552, 3467, 13, 51776], "temperature": 0.0, "avg_logprob": -0.17478841543197632, "compression_ratio": 1.8484848484848484, "no_speech_prob": 0.024222921580076218}, {"id": 234, "seek": 101020, "start": 1010.2, "end": 1014.72, "text": " And also then it doesn't clash with the objects in the category.", "tokens": [50364, 400, 611, 550, 309, 1177, 380, 36508, 365, 264, 6565, 294, 264, 7719, 13, 50590], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 235, "seek": 101020, "start": 1014.72, "end": 1015.72, "text": " Okay.", "tokens": [50590, 1033, 13, 50640], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 236, "seek": 101020, "start": 1015.72, "end": 1020.2800000000001, "text": " Now, what can I do when I have two types?", "tokens": [50640, 823, 11, 437, 393, 286, 360, 562, 286, 362, 732, 3467, 30, 50868], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 237, "seek": 101020, "start": 1020.2800000000001, "end": 1023.12, "text": " Well, I can form a tuple.", "tokens": [50868, 1042, 11, 286, 393, 1254, 257, 2604, 781, 13, 51010], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 238, "seek": 101020, "start": 1023.12, "end": 1024.8400000000001, "text": " They don't call it tuples.", "tokens": [51010, 814, 500, 380, 818, 309, 2604, 2622, 13, 51096], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 239, "seek": 101020, "start": 1024.8400000000001, "end": 1026.92, "text": " They call it a product.", "tokens": [51096, 814, 818, 309, 257, 1674, 13, 51200], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 240, "seek": 101020, "start": 1026.92, "end": 1027.92, "text": " Okay.", "tokens": [51200, 1033, 13, 51250], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 241, "seek": 101020, "start": 1027.92, "end": 1032.28, "text": " So they are going to take these two types, X1 and X2.", "tokens": [51250, 407, 436, 366, 516, 281, 747, 613, 732, 3467, 11, 1783, 16, 293, 1783, 17, 13, 51468], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 242, "seek": 101020, "start": 1032.28, "end": 1037.8400000000001, "text": " They're going to create a new type X, which, you know, they can also write as X1 cross", "tokens": [51468, 814, 434, 516, 281, 1884, 257, 777, 2010, 1783, 11, 597, 11, 291, 458, 11, 436, 393, 611, 2464, 382, 1783, 16, 3278, 51746], "temperature": 0.0, "avg_logprob": -0.19756567478179932, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.02045171521604061}, {"id": 243, "seek": 103784, "start": 1037.84, "end": 1044.36, "text": " X2 and then blah, blah satisfies a universal property, blah, blah, blah, blah, blah, blah.", "tokens": [50364, 1783, 17, 293, 550, 12288, 11, 12288, 44271, 257, 11455, 4707, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 13, 50690], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 244, "seek": 103784, "start": 1044.36, "end": 1046.36, "text": " Do you understand this?", "tokens": [50690, 1144, 291, 1223, 341, 30, 50790], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 245, "seek": 103784, "start": 1046.36, "end": 1047.36, "text": " No.", "tokens": [50790, 883, 13, 50840], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 246, "seek": 103784, "start": 1047.36, "end": 1048.36, "text": " Yes.", "tokens": [50840, 1079, 13, 50890], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 247, "seek": 103784, "start": 1048.36, "end": 1049.36, "text": " Good.", "tokens": [50890, 2205, 13, 50940], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 248, "seek": 103784, "start": 1049.36, "end": 1059.56, "text": " There's one person that understands it, great.", "tokens": [50940, 821, 311, 472, 954, 300, 15146, 309, 11, 869, 13, 51450], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 249, "seek": 103784, "start": 1059.56, "end": 1065.84, "text": " So let's go and drill down a little bit into this.", "tokens": [51450, 407, 718, 311, 352, 293, 11392, 760, 257, 707, 857, 666, 341, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3057403048953494, "compression_ratio": 1.523489932885906, "no_speech_prob": 0.05632442981004715}, {"id": 250, "seek": 106584, "start": 1065.84, "end": 1070.76, "text": " Because I think this picture says, said it much better.", "tokens": [50364, 1436, 286, 519, 341, 3036, 1619, 11, 848, 309, 709, 1101, 13, 50610], "temperature": 0.0, "avg_logprob": -0.15035908420880637, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.2587665915489197}, {"id": 251, "seek": 106584, "start": 1070.76, "end": 1079.8, "text": " So if I have a tuple or a product, I have two functions that I can use to project the values", "tokens": [50610, 407, 498, 286, 362, 257, 2604, 781, 420, 257, 1674, 11, 286, 362, 732, 6828, 300, 286, 393, 764, 281, 1716, 264, 4190, 51062], "temperature": 0.0, "avg_logprob": -0.15035908420880637, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.2587665915489197}, {"id": 252, "seek": 106584, "start": 1079.8, "end": 1080.8, "text": " out of this tuple.", "tokens": [51062, 484, 295, 341, 2604, 781, 13, 51112], "temperature": 0.0, "avg_logprob": -0.15035908420880637, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.2587665915489197}, {"id": 253, "seek": 106584, "start": 1080.8, "end": 1086.0, "text": " So I can select the first element and I can select the second one.", "tokens": [51112, 407, 286, 393, 3048, 264, 700, 4478, 293, 286, 393, 3048, 264, 1150, 472, 13, 51372], "temperature": 0.0, "avg_logprob": -0.15035908420880637, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.2587665915489197}, {"id": 254, "seek": 106584, "start": 1086.0, "end": 1090.04, "text": " Now you can ask yourself, why do they start counting at one?", "tokens": [51372, 823, 291, 393, 1029, 1803, 11, 983, 360, 436, 722, 13251, 412, 472, 30, 51574], "temperature": 0.0, "avg_logprob": -0.15035908420880637, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.2587665915489197}, {"id": 255, "seek": 106584, "start": 1090.04, "end": 1094.08, "text": " Because we as developers always, now our index is zero.", "tokens": [51574, 1436, 321, 382, 8849, 1009, 11, 586, 527, 8186, 307, 4018, 13, 51776], "temperature": 0.0, "avg_logprob": -0.15035908420880637, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.2587665915489197}, {"id": 256, "seek": 109408, "start": 1094.08, "end": 1099.08, "text": " And again, these are mathematicians, they don't, they probably never done C programming", "tokens": [50364, 400, 797, 11, 613, 366, 32811, 2567, 11, 436, 500, 380, 11, 436, 1391, 1128, 1096, 383, 9410, 50614], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 257, "seek": 109408, "start": 1099.08, "end": 1100.08, "text": " or whatever.", "tokens": [50614, 420, 2035, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 258, "seek": 109408, "start": 1100.08, "end": 1102.96, "text": " So they can start their counting by one.", "tokens": [50664, 407, 436, 393, 722, 641, 13251, 538, 472, 13, 50808], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 259, "seek": 109408, "start": 1102.96, "end": 1109.3999999999999, "text": " Anyway, so this is the kind of thing, but then there's all the rest of this.", "tokens": [50808, 5684, 11, 370, 341, 307, 264, 733, 295, 551, 11, 457, 550, 456, 311, 439, 264, 1472, 295, 341, 13, 51130], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 260, "seek": 109408, "start": 1109.3999999999999, "end": 1116.1999999999998, "text": " And what we see here is, well, how on earth do you get an instance of a tuple?", "tokens": [51130, 400, 437, 321, 536, 510, 307, 11, 731, 11, 577, 322, 4120, 360, 291, 483, 364, 5197, 295, 257, 2604, 781, 30, 51470], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 261, "seek": 109408, "start": 1116.1999999999998, "end": 1120.72, "text": " Well, you need a constructor or a factory function.", "tokens": [51470, 1042, 11, 291, 643, 257, 47479, 420, 257, 9265, 2445, 13, 51696], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 262, "seek": 109408, "start": 1120.72, "end": 1123.24, "text": " These mathematicians are not stupid, right?", "tokens": [51696, 1981, 32811, 2567, 366, 406, 6631, 11, 558, 30, 51822], "temperature": 0.0, "avg_logprob": -0.1920620776988842, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.03911672905087471}, {"id": 263, "seek": 112324, "start": 1123.24, "end": 1127.84, "text": " They know that when you create a type, when you have a type, you all you have to have", "tokens": [50364, 814, 458, 300, 562, 291, 1884, 257, 2010, 11, 562, 291, 362, 257, 2010, 11, 291, 439, 291, 362, 281, 362, 50594], "temperature": 0.0, "avg_logprob": -0.1373393490629376, "compression_ratio": 1.92964824120603, "no_speech_prob": 0.012236230075359344}, {"id": 264, "seek": 112324, "start": 1127.84, "end": 1129.64, "text": " a way to create it.", "tokens": [50594, 257, 636, 281, 1884, 309, 13, 50684], "temperature": 0.0, "avg_logprob": -0.1373393490629376, "compression_ratio": 1.92964824120603, "no_speech_prob": 0.012236230075359344}, {"id": 265, "seek": 112324, "start": 1129.64, "end": 1136.1200000000001, "text": " We call it constructor, well, they have here some function that kind of allows you to kind", "tokens": [50684, 492, 818, 309, 47479, 11, 731, 11, 436, 362, 510, 512, 2445, 300, 733, 295, 4045, 291, 281, 733, 51008], "temperature": 0.0, "avg_logprob": -0.1373393490629376, "compression_ratio": 1.92964824120603, "no_speech_prob": 0.012236230075359344}, {"id": 266, "seek": 112324, "start": 1136.1200000000001, "end": 1138.84, "text": " of create a tuple.", "tokens": [51008, 295, 1884, 257, 2604, 781, 13, 51144], "temperature": 0.0, "avg_logprob": -0.1373393490629376, "compression_ratio": 1.92964824120603, "no_speech_prob": 0.012236230075359344}, {"id": 267, "seek": 112324, "start": 1138.84, "end": 1146.44, "text": " And then they say, well, if you have such a function, which you create from two morphisms,", "tokens": [51144, 400, 550, 436, 584, 11, 731, 11, 498, 291, 362, 1270, 257, 2445, 11, 597, 291, 1884, 490, 732, 25778, 13539, 11, 51524], "temperature": 0.0, "avg_logprob": -0.1373393490629376, "compression_ratio": 1.92964824120603, "no_speech_prob": 0.012236230075359344}, {"id": 268, "seek": 112324, "start": 1146.44, "end": 1151.64, "text": " then if you kind of start with a value here, you apply that to this function.", "tokens": [51524, 550, 498, 291, 733, 295, 722, 365, 257, 2158, 510, 11, 291, 3079, 300, 281, 341, 2445, 13, 51784], "temperature": 0.0, "avg_logprob": -0.1373393490629376, "compression_ratio": 1.92964824120603, "no_speech_prob": 0.012236230075359344}, {"id": 269, "seek": 115164, "start": 1151.64, "end": 1158.3600000000001, "text": " Now you get this guy, that must be the same as kind of projecting the first value or applying", "tokens": [50364, 823, 291, 483, 341, 2146, 11, 300, 1633, 312, 264, 912, 382, 733, 295, 43001, 264, 700, 2158, 420, 9275, 50700], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 270, "seek": 115164, "start": 1158.3600000000001, "end": 1159.3600000000001, "text": " this function.", "tokens": [50700, 341, 2445, 13, 50750], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 271, "seek": 115164, "start": 1159.3600000000001, "end": 1162.2, "text": " So it all must kind of commute.", "tokens": [50750, 407, 309, 439, 1633, 733, 295, 36750, 13, 50892], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 272, "seek": 115164, "start": 1162.2, "end": 1165.8000000000002, "text": " And that looks quite nice in that diagram.", "tokens": [50892, 400, 300, 1542, 1596, 1481, 294, 300, 10686, 13, 51072], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 273, "seek": 115164, "start": 1165.8000000000002, "end": 1171.8400000000001, "text": " Now if you don't like diagram, then you can translate it into equations, whatever you", "tokens": [51072, 823, 498, 291, 500, 380, 411, 10686, 11, 550, 291, 393, 13799, 309, 666, 11787, 11, 2035, 291, 51374], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 274, "seek": 115164, "start": 1171.8400000000001, "end": 1174.76, "text": " find easier to read.", "tokens": [51374, 915, 3571, 281, 1401, 13, 51520], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 275, "seek": 115164, "start": 1174.76, "end": 1180.0400000000002, "text": " Now, except for this gentleman over there, what's your name?", "tokens": [51520, 823, 11, 3993, 337, 341, 15761, 670, 456, 11, 437, 311, 428, 1315, 30, 51784], "temperature": 0.0, "avg_logprob": -0.199900145171791, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.012844620272517204}, {"id": 276, "seek": 118004, "start": 1181.04, "end": 1188.56, "text": " Oh, I cannot pronounce that, but generic, good.", "tokens": [50414, 876, 11, 286, 2644, 19567, 300, 11, 457, 19577, 11, 665, 13, 50790], "temperature": 0.0, "avg_logprob": -0.2405621254280822, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.011169207282364368}, {"id": 277, "seek": 118004, "start": 1188.56, "end": 1194.76, "text": " Mr. Generic over there, he understands this.", "tokens": [50790, 2221, 13, 15409, 299, 670, 456, 11, 415, 15146, 341, 13, 51100], "temperature": 0.0, "avg_logprob": -0.2405621254280822, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.011169207282364368}, {"id": 278, "seek": 118004, "start": 1194.76, "end": 1200.3999999999999, "text": " But that's kind of, you know, for the rest of us, you know, whose brains are the size", "tokens": [51100, 583, 300, 311, 733, 295, 11, 291, 458, 11, 337, 264, 1472, 295, 505, 11, 291, 458, 11, 6104, 15442, 366, 264, 2744, 51382], "temperature": 0.0, "avg_logprob": -0.2405621254280822, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.011169207282364368}, {"id": 279, "seek": 118004, "start": 1200.3999999999999, "end": 1208.68, "text": " of peanuts or smaller, let's kind of continue to put this into our language.", "tokens": [51382, 295, 32895, 420, 4356, 11, 718, 311, 733, 295, 2354, 281, 829, 341, 666, 527, 2856, 13, 51796], "temperature": 0.0, "avg_logprob": -0.2405621254280822, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.011169207282364368}, {"id": 280, "seek": 120868, "start": 1208.68, "end": 1215.1200000000001, "text": " So if we go on with this translation, we say that a type A comma B is a product of A and", "tokens": [50364, 407, 498, 321, 352, 322, 365, 341, 12853, 11, 321, 584, 300, 257, 2010, 316, 22117, 363, 307, 257, 1674, 295, 316, 293, 50686], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 281, "seek": 120868, "start": 1215.1200000000001, "end": 1219.48, "text": " B or a tuple of A and B, if it satisfies blah, blah, blah.", "tokens": [50686, 363, 420, 257, 2604, 781, 295, 316, 293, 363, 11, 498, 309, 44271, 12288, 11, 12288, 11, 12288, 13, 50904], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 282, "seek": 120868, "start": 1219.48, "end": 1227.96, "text": " There exist two properties underscore one and underscore two that return an A and a B respectively.", "tokens": [50904, 821, 2514, 732, 7221, 37556, 472, 293, 37556, 732, 300, 2736, 364, 316, 293, 257, 363, 25009, 13, 51328], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 283, "seek": 120868, "start": 1227.96, "end": 1231.8, "text": " Any Scala programmers here?", "tokens": [51328, 2639, 2747, 5159, 41504, 510, 30, 51520], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 284, "seek": 120868, "start": 1231.8, "end": 1233.8, "text": " You recognize this?", "tokens": [51520, 509, 5521, 341, 30, 51620], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 285, "seek": 120868, "start": 1233.8, "end": 1236.76, "text": " Yeah, look at this, I see a smile.", "tokens": [51620, 865, 11, 574, 412, 341, 11, 286, 536, 257, 7563, 13, 51768], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 286, "seek": 120868, "start": 1236.76, "end": 1237.76, "text": " Yep.", "tokens": [51768, 7010, 13, 51818], "temperature": 0.0, "avg_logprob": -0.23606805127076427, "compression_ratio": 1.5952380952380953, "no_speech_prob": 0.030314123257994652}, {"id": 287, "seek": 123776, "start": 1237.84, "end": 1243.6, "text": " This is Scala, you can project the first and second element, but then there's also, if", "tokens": [50368, 639, 307, 2747, 5159, 11, 291, 393, 1716, 264, 700, 293, 1150, 4478, 11, 457, 550, 456, 311, 611, 11, 498, 50656], "temperature": 0.0, "avg_logprob": -0.13377992923443133, "compression_ratio": 1.7375, "no_speech_prob": 0.011821887455880642}, {"id": 288, "seek": 123776, "start": 1243.6, "end": 1248.8, "text": " you have two methods, the factory function for this thing takes two methods and it gives", "tokens": [50656, 291, 362, 732, 7150, 11, 264, 9265, 2445, 337, 341, 551, 2516, 732, 7150, 293, 309, 2709, 50916], "temperature": 0.0, "avg_logprob": -0.13377992923443133, "compression_ratio": 1.7375, "no_speech_prob": 0.011821887455880642}, {"id": 289, "seek": 123776, "start": 1248.8, "end": 1255.24, "text": " you a function that given a C returns this pair of A and B, and it does that by kind", "tokens": [50916, 291, 257, 2445, 300, 2212, 257, 383, 11247, 341, 6119, 295, 316, 293, 363, 11, 293, 309, 775, 300, 538, 733, 51238], "temperature": 0.0, "avg_logprob": -0.13377992923443133, "compression_ratio": 1.7375, "no_speech_prob": 0.011821887455880642}, {"id": 290, "seek": 123776, "start": 1255.24, "end": 1259.56, "text": " of applying that C to F and G respectively.", "tokens": [51238, 295, 9275, 300, 383, 281, 479, 293, 460, 25009, 13, 51454], "temperature": 0.0, "avg_logprob": -0.13377992923443133, "compression_ratio": 1.7375, "no_speech_prob": 0.011821887455880642}, {"id": 291, "seek": 123776, "start": 1259.56, "end": 1266.04, "text": " So this is a little bit different than in Scala because the constructor function behaves", "tokens": [51454, 407, 341, 307, 257, 707, 857, 819, 813, 294, 2747, 5159, 570, 264, 47479, 2445, 36896, 51778], "temperature": 0.0, "avg_logprob": -0.13377992923443133, "compression_ratio": 1.7375, "no_speech_prob": 0.011821887455880642}, {"id": 292, "seek": 123776, "start": 1266.04, "end": 1267.12, "text": " a little bit different.", "tokens": [51778, 257, 707, 857, 819, 13, 51832], "temperature": 0.0, "avg_logprob": -0.13377992923443133, "compression_ratio": 1.7375, "no_speech_prob": 0.011821887455880642}, {"id": 293, "seek": 126712, "start": 1267.12, "end": 1272.8799999999999, "text": " But we can, from this, we can create a normal constructor function too.", "tokens": [50364, 583, 321, 393, 11, 490, 341, 11, 321, 393, 1884, 257, 2710, 47479, 2445, 886, 13, 50652], "temperature": 0.0, "avg_logprob": -0.21518948583891898, "compression_ratio": 1.4233128834355828, "no_speech_prob": 0.0013421040493994951}, {"id": 294, "seek": 126712, "start": 1272.8799999999999, "end": 1284.3999999999999, "text": " Okay, let's go look at this commuting diagram and it's kind of the same.", "tokens": [50652, 1033, 11, 718, 311, 352, 574, 412, 341, 800, 10861, 10686, 293, 309, 311, 733, 295, 264, 912, 13, 51228], "temperature": 0.0, "avg_logprob": -0.21518948583891898, "compression_ratio": 1.4233128834355828, "no_speech_prob": 0.0013421040493994951}, {"id": 295, "seek": 126712, "start": 1284.3999999999999, "end": 1292.56, "text": " Now as I said, if you look at Scala, I don't know, I think this mathematics is actually", "tokens": [51228, 823, 382, 286, 848, 11, 498, 291, 574, 412, 2747, 5159, 11, 286, 500, 380, 458, 11, 286, 519, 341, 18666, 307, 767, 51636], "temperature": 0.0, "avg_logprob": -0.21518948583891898, "compression_ratio": 1.4233128834355828, "no_speech_prob": 0.0013421040493994951}, {"id": 296, "seek": 129256, "start": 1292.56, "end": 1293.56, "text": " clearer and shorter.", "tokens": [50364, 26131, 293, 11639, 13, 50414], "temperature": 0.0, "avg_logprob": -0.21701728419253702, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.44605737924575806}, {"id": 297, "seek": 129256, "start": 1293.56, "end": 1299.56, "text": " Because look at this, trade, blah, blah, blah, extends, blah, blah, blah, abstract", "tokens": [50414, 1436, 574, 412, 341, 11, 4923, 11, 12288, 11, 12288, 11, 12288, 11, 26448, 11, 12288, 11, 12288, 11, 12288, 11, 12649, 50714], "temperature": 0.0, "avg_logprob": -0.21701728419253702, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.44605737924575806}, {"id": 298, "seek": 129256, "start": 1299.56, "end": 1303.28, "text": " this, abstract that, curly open, curly close.", "tokens": [50714, 341, 11, 12649, 300, 11, 32066, 1269, 11, 32066, 1998, 13, 50900], "temperature": 0.0, "avg_logprob": -0.21701728419253702, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.44605737924575806}, {"id": 299, "seek": 129256, "start": 1303.28, "end": 1308.44, "text": " Now you see why these mathematicians have their strange lingo because maybe we have editors", "tokens": [50900, 823, 291, 536, 983, 613, 32811, 2567, 362, 641, 5861, 287, 18459, 570, 1310, 321, 362, 31446, 51158], "temperature": 0.0, "avg_logprob": -0.21701728419253702, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.44605737924575806}, {"id": 300, "seek": 129256, "start": 1308.44, "end": 1314.6399999999999, "text": " and we have autocomplete, but look at how many characters we need to write down kind", "tokens": [51158, 293, 321, 362, 45833, 298, 17220, 11, 457, 574, 412, 577, 867, 4342, 321, 643, 281, 2464, 760, 733, 51468], "temperature": 0.0, "avg_logprob": -0.21701728419253702, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.44605737924575806}, {"id": 301, "seek": 129256, "start": 1314.6399999999999, "end": 1318.52, "text": " of something simple like this, okay?", "tokens": [51468, 295, 746, 2199, 411, 341, 11, 1392, 30, 51662], "temperature": 0.0, "avg_logprob": -0.21701728419253702, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.44605737924575806}, {"id": 302, "seek": 131852, "start": 1318.52, "end": 1329.36, "text": " But here is you see that this is the definition in Scala of a product and I think this is,", "tokens": [50364, 583, 510, 307, 291, 536, 300, 341, 307, 264, 7123, 294, 2747, 5159, 295, 257, 1674, 293, 286, 519, 341, 307, 11, 50906], "temperature": 0.0, "avg_logprob": -0.210734056171618, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.09057999402284622}, {"id": 303, "seek": 131852, "start": 1329.36, "end": 1332.96, "text": " now you can ask yourself what the heck are those pluses there?", "tokens": [50906, 586, 291, 393, 1029, 1803, 437, 264, 12872, 366, 729, 1804, 279, 456, 30, 51086], "temperature": 0.0, "avg_logprob": -0.210734056171618, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.09057999402284622}, {"id": 304, "seek": 131852, "start": 1332.96, "end": 1339.76, "text": " Am I going to kind of, I don't know, is this unary plus or no, no, no, that's co and contravariance.", "tokens": [51086, 2012, 286, 516, 281, 733, 295, 11, 286, 500, 380, 458, 11, 307, 341, 517, 822, 1804, 420, 572, 11, 572, 11, 572, 11, 300, 311, 598, 293, 10742, 34033, 719, 13, 51426], "temperature": 0.0, "avg_logprob": -0.210734056171618, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.09057999402284622}, {"id": 305, "seek": 131852, "start": 1339.76, "end": 1346.16, "text": " But that's way too complicated, but this is actually the way that products are defined", "tokens": [51426, 583, 300, 311, 636, 886, 6179, 11, 457, 341, 307, 767, 264, 636, 300, 3383, 366, 7642, 51746], "temperature": 0.0, "avg_logprob": -0.210734056171618, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.09057999402284622}, {"id": 306, "seek": 134616, "start": 1346.16, "end": 1356.0800000000002, "text": " in Scala, but what Scala doesn't have is this operator to construct a product.", "tokens": [50364, 294, 2747, 5159, 11, 457, 437, 2747, 5159, 1177, 380, 362, 307, 341, 12973, 281, 7690, 257, 1674, 13, 50860], "temperature": 0.0, "avg_logprob": -0.11190541064152952, "compression_ratio": 1.5119047619047619, "no_speech_prob": 0.0758991464972496}, {"id": 307, "seek": 134616, "start": 1356.0800000000002, "end": 1364.68, "text": " Now the reason why Martin cannot do that is because if you would do that, you already", "tokens": [50860, 823, 264, 1778, 983, 9184, 2644, 360, 300, 307, 570, 498, 291, 576, 360, 300, 11, 291, 1217, 51290], "temperature": 0.0, "avg_logprob": -0.11190541064152952, "compression_ratio": 1.5119047619047619, "no_speech_prob": 0.0758991464972496}, {"id": 308, "seek": 134616, "start": 1364.68, "end": 1371.5600000000002, "text": " need the notion of functions as objects and that was the whole point of this presentation", "tokens": [51290, 643, 264, 10710, 295, 6828, 382, 6565, 293, 300, 390, 264, 1379, 935, 295, 341, 5860, 51634], "temperature": 0.0, "avg_logprob": -0.11190541064152952, "compression_ratio": 1.5119047619047619, "no_speech_prob": 0.0758991464972496}, {"id": 309, "seek": 137156, "start": 1371.56, "end": 1379.52, "text": " to figure out, you know, how can we make these morphisms into first class things, okay?", "tokens": [50364, 281, 2573, 484, 11, 291, 458, 11, 577, 393, 321, 652, 613, 25778, 13539, 666, 700, 1508, 721, 11, 1392, 30, 50762], "temperature": 0.0, "avg_logprob": -0.1447419701041756, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.2807442247867584}, {"id": 310, "seek": 137156, "start": 1379.52, "end": 1386.8799999999999, "text": " So really, you know, if we look at this simple example where we took the idea of tuples and", "tokens": [50762, 407, 534, 11, 291, 458, 11, 498, 321, 574, 412, 341, 2199, 1365, 689, 321, 1890, 264, 1558, 295, 2604, 2622, 293, 51130], "temperature": 0.0, "avg_logprob": -0.1447419701041756, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.2807442247867584}, {"id": 311, "seek": 137156, "start": 1386.8799999999999, "end": 1392.72, "text": " we have seen how the mathematicians do it and we do it, it's really the same except", "tokens": [51130, 321, 362, 1612, 577, 264, 32811, 2567, 360, 309, 293, 321, 360, 309, 11, 309, 311, 534, 264, 912, 3993, 51422], "temperature": 0.0, "avg_logprob": -0.1447419701041756, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.2807442247867584}, {"id": 312, "seek": 137156, "start": 1392.72, "end": 1399.1599999999999, "text": " that the mathematicians apply a little bit more rigor, they use weird notation, but the", "tokens": [51422, 300, 264, 32811, 2567, 3079, 257, 707, 857, 544, 42191, 11, 436, 764, 3657, 24657, 11, 457, 264, 51744], "temperature": 0.0, "avg_logprob": -0.1447419701041756, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.2807442247867584}, {"id": 313, "seek": 139916, "start": 1399.16, "end": 1405.44, "text": " nice thing that they do, that we never do is when they define a type, they talk about", "tokens": [50364, 1481, 551, 300, 436, 360, 11, 300, 321, 1128, 360, 307, 562, 436, 6964, 257, 2010, 11, 436, 751, 466, 50678], "temperature": 0.0, "avg_logprob": -0.15878100395202638, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.025119580328464508}, {"id": 314, "seek": 139916, "start": 1405.44, "end": 1410.64, "text": " properties of the type, what properties should a product have?", "tokens": [50678, 7221, 295, 264, 2010, 11, 437, 7221, 820, 257, 1674, 362, 30, 50938], "temperature": 0.0, "avg_logprob": -0.15878100395202638, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.025119580328464508}, {"id": 315, "seek": 139916, "start": 1410.64, "end": 1418.48, "text": " Because if you look at this definition in Scala, right, from here it says nowhere that", "tokens": [50938, 1436, 498, 291, 574, 412, 341, 7123, 294, 2747, 5159, 11, 558, 11, 490, 510, 309, 1619, 11159, 300, 51330], "temperature": 0.0, "avg_logprob": -0.15878100395202638, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.025119580328464508}, {"id": 316, "seek": 139916, "start": 1418.48, "end": 1426.0400000000002, "text": " when you create a tuple out of two values and you project from that tuple the first", "tokens": [51330, 562, 291, 1884, 257, 2604, 781, 484, 295, 732, 4190, 293, 291, 1716, 490, 300, 2604, 781, 264, 700, 51708], "temperature": 0.0, "avg_logprob": -0.15878100395202638, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.025119580328464508}, {"id": 317, "seek": 142604, "start": 1426.04, "end": 1430.6399999999999, "text": " value that you actually get the value that you put in there, right?", "tokens": [50364, 2158, 300, 291, 767, 483, 264, 2158, 300, 291, 829, 294, 456, 11, 558, 30, 50594], "temperature": 0.0, "avg_logprob": -0.14992052508938697, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.3919673264026642}, {"id": 318, "seek": 142604, "start": 1430.6399999999999, "end": 1436.8799999999999, "text": " Nothing says this here because it can return null for both sides and it's still kind of", "tokens": [50594, 6693, 1619, 341, 510, 570, 309, 393, 2736, 18184, 337, 1293, 4881, 293, 309, 311, 920, 733, 295, 50906], "temperature": 0.0, "avg_logprob": -0.14992052508938697, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.3919673264026642}, {"id": 319, "seek": 142604, "start": 1436.8799999999999, "end": 1440.32, "text": " according to this type definition a valid implementation of tuple.", "tokens": [50906, 4650, 281, 341, 2010, 7123, 257, 7363, 11420, 295, 2604, 781, 13, 51078], "temperature": 0.0, "avg_logprob": -0.14992052508938697, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.3919673264026642}, {"id": 320, "seek": 142604, "start": 1440.32, "end": 1445.84, "text": " Of course, you would not accept that, but the type itself doesn't say anything.", "tokens": [51078, 2720, 1164, 11, 291, 576, 406, 3241, 300, 11, 457, 264, 2010, 2564, 1177, 380, 584, 1340, 13, 51354], "temperature": 0.0, "avg_logprob": -0.14992052508938697, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.3919673264026642}, {"id": 321, "seek": 142604, "start": 1445.84, "end": 1451.04, "text": " So if you're a smart programmer and somebody gives you this trait and you have to implement", "tokens": [51354, 407, 498, 291, 434, 257, 4069, 32116, 293, 2618, 2709, 291, 341, 22538, 293, 291, 362, 281, 4445, 51614], "temperature": 0.0, "avg_logprob": -0.14992052508938697, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.3919673264026642}, {"id": 322, "seek": 145104, "start": 1451.04, "end": 1456.76, "text": " it, you can just return null in both cases, nobody can complain.", "tokens": [50364, 309, 11, 291, 393, 445, 2736, 18184, 294, 1293, 3331, 11, 5079, 393, 11024, 13, 50650], "temperature": 0.0, "avg_logprob": -0.16025011747786141, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.5396654605865479}, {"id": 323, "seek": 145104, "start": 1456.76, "end": 1461.6, "text": " If they file a bug, you immediately file the bug back and say you didn't specify this", "tokens": [50650, 759, 436, 3991, 257, 7426, 11, 291, 4258, 3991, 264, 7426, 646, 293, 584, 291, 994, 380, 16500, 341, 50892], "temperature": 0.0, "avg_logprob": -0.16025011747786141, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.5396654605865479}, {"id": 324, "seek": 145104, "start": 1461.6, "end": 1463.48, "text": " thing properly, okay?", "tokens": [50892, 551, 6108, 11, 1392, 30, 50986], "temperature": 0.0, "avg_logprob": -0.16025011747786141, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.5396654605865479}, {"id": 325, "seek": 145104, "start": 1463.48, "end": 1465.28, "text": " This is another tip, okay?", "tokens": [50986, 639, 307, 1071, 4125, 11, 1392, 30, 51076], "temperature": 0.0, "avg_logprob": -0.16025011747786141, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.5396654605865479}, {"id": 326, "seek": 145104, "start": 1465.28, "end": 1473.42, "text": " You just return null, your colleagues complain, you just say sorry, you know, specify it better.", "tokens": [51076, 509, 445, 2736, 18184, 11, 428, 7734, 11024, 11, 291, 445, 584, 2597, 11, 291, 458, 11, 16500, 309, 1101, 13, 51483], "temperature": 0.0, "avg_logprob": -0.16025011747786141, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.5396654605865479}, {"id": 327, "seek": 145104, "start": 1473.42, "end": 1478.44, "text": " And then you can go have a drink, a beer, kind of go to another meeting, put that on", "tokens": [51483, 400, 550, 291, 393, 352, 362, 257, 2822, 11, 257, 8795, 11, 733, 295, 352, 281, 1071, 3440, 11, 829, 300, 322, 51734], "temperature": 0.0, "avg_logprob": -0.16025011747786141, "compression_ratio": 1.6858407079646018, "no_speech_prob": 0.5396654605865479}, {"id": 328, "seek": 147844, "start": 1478.44, "end": 1487.1200000000001, "text": " your resume, get even more money, look at this, all right, good.", "tokens": [50364, 428, 15358, 11, 483, 754, 544, 1460, 11, 574, 412, 341, 11, 439, 558, 11, 665, 13, 50798], "temperature": 0.0, "avg_logprob": -0.20544325275185668, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.11499042809009552}, {"id": 329, "seek": 147844, "start": 1487.1200000000001, "end": 1496.96, "text": " So and here is the, you know, again, a slightly different way to do this function.", "tokens": [50798, 407, 293, 510, 307, 264, 11, 291, 458, 11, 797, 11, 257, 4748, 819, 636, 281, 360, 341, 2445, 13, 51290], "temperature": 0.0, "avg_logprob": -0.20544325275185668, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.11499042809009552}, {"id": 330, "seek": 147844, "start": 1496.96, "end": 1501.72, "text": " I'm going to skip this for lack of time.", "tokens": [51290, 286, 478, 516, 281, 10023, 341, 337, 5011, 295, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.20544325275185668, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.11499042809009552}, {"id": 331, "seek": 147844, "start": 1501.72, "end": 1508.42, "text": " Now Mr. Generic here says, oh, I knew this already, but this is old stuff, right?", "tokens": [51528, 823, 2221, 13, 15409, 299, 510, 1619, 11, 1954, 11, 286, 2586, 341, 1217, 11, 457, 341, 307, 1331, 1507, 11, 558, 30, 51863], "temperature": 0.0, "avg_logprob": -0.20544325275185668, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.11499042809009552}, {"id": 332, "seek": 150842, "start": 1508.42, "end": 1517.7, "text": " Here is John McCarthy, the inventor of Lisp, and he says, well, come on, I could define", "tokens": [50364, 1692, 307, 2619, 44085, 11, 264, 41593, 295, 441, 7631, 11, 293, 415, 1619, 11, 731, 11, 808, 322, 11, 286, 727, 6964, 50828], "temperature": 0.0, "avg_logprob": -0.22057579585484097, "compression_ratio": 1.3905325443786982, "no_speech_prob": 0.039300382137298584}, {"id": 333, "seek": 150842, "start": 1517.7, "end": 1522.28, "text": " all this stuff with top polls and so on in 1960.", "tokens": [50828, 439, 341, 1507, 365, 1192, 24264, 293, 370, 322, 294, 16157, 13, 51057], "temperature": 0.0, "avg_logprob": -0.22057579585484097, "compression_ratio": 1.3905325443786982, "no_speech_prob": 0.039300382137298584}, {"id": 334, "seek": 150842, "start": 1522.28, "end": 1528.8200000000002, "text": " And then Church, Mr. Alonso Church, who invented the Lambda calculus, he did this already in", "tokens": [51057, 400, 550, 7882, 11, 2221, 13, 967, 266, 539, 7882, 11, 567, 14479, 264, 45691, 33400, 11, 415, 630, 341, 1217, 294, 51384], "temperature": 0.0, "avg_logprob": -0.22057579585484097, "compression_ratio": 1.3905325443786982, "no_speech_prob": 0.039300382137298584}, {"id": 335, "seek": 150842, "start": 1528.8200000000002, "end": 1531.3000000000002, "text": " 1928.", "tokens": [51384, 1294, 11205, 13, 51508], "temperature": 0.0, "avg_logprob": -0.22057579585484097, "compression_ratio": 1.3905325443786982, "no_speech_prob": 0.039300382137298584}, {"id": 336, "seek": 153130, "start": 1531.3, "end": 1538.7, "text": " Now look, this guy here came up with this in 1928.", "tokens": [50364, 823, 574, 11, 341, 2146, 510, 1361, 493, 365, 341, 294, 1294, 11205, 13, 50734], "temperature": 0.0, "avg_logprob": -0.15683793485834358, "compression_ratio": 1.4170616113744077, "no_speech_prob": 0.008898247964680195}, {"id": 337, "seek": 153130, "start": 1538.7, "end": 1544.8999999999999, "text": " If you read the papers from Church, he was doing this kind of tuples.", "tokens": [50734, 759, 291, 1401, 264, 10577, 490, 7882, 11, 415, 390, 884, 341, 733, 295, 2604, 2622, 13, 51044], "temperature": 0.0, "avg_logprob": -0.15683793485834358, "compression_ratio": 1.4170616113744077, "no_speech_prob": 0.008898247964680195}, {"id": 338, "seek": 153130, "start": 1544.8999999999999, "end": 1552.54, "text": " In Java 8, it's 2015, last time I checked, there are still no proper tuples in the language.", "tokens": [51044, 682, 10745, 1649, 11, 309, 311, 7546, 11, 1036, 565, 286, 10033, 11, 456, 366, 920, 572, 2296, 2604, 2622, 294, 264, 2856, 13, 51426], "temperature": 0.0, "avg_logprob": -0.15683793485834358, "compression_ratio": 1.4170616113744077, "no_speech_prob": 0.008898247964680195}, {"id": 339, "seek": 153130, "start": 1552.54, "end": 1560.74, "text": " Look at this, I don't even know, it's like 2015 minus, that's nearly a century, okay?", "tokens": [51426, 2053, 412, 341, 11, 286, 500, 380, 754, 458, 11, 309, 311, 411, 7546, 3175, 11, 300, 311, 6217, 257, 4901, 11, 1392, 30, 51836], "temperature": 0.0, "avg_logprob": -0.15683793485834358, "compression_ratio": 1.4170616113744077, "no_speech_prob": 0.008898247964680195}, {"id": 340, "seek": 156074, "start": 1560.74, "end": 1565.34, "text": " And we still don't, this thing still doesn't, we are, and why is that?", "tokens": [50364, 400, 321, 920, 500, 380, 11, 341, 551, 920, 1177, 380, 11, 321, 366, 11, 293, 983, 307, 300, 30, 50594], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 341, "seek": 156074, "start": 1565.34, "end": 1571.02, "text": " Because we are afraid of these mathematicians, whereas we should steal their ideas and profit", "tokens": [50594, 1436, 321, 366, 4638, 295, 613, 32811, 2567, 11, 9735, 321, 820, 11009, 641, 3487, 293, 7475, 50878], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 342, "seek": 156074, "start": 1571.02, "end": 1573.38, "text": " from them, okay?", "tokens": [50878, 490, 552, 11, 1392, 30, 50996], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 343, "seek": 156074, "start": 1573.38, "end": 1575.6200000000001, "text": " That's really kind of my message today.", "tokens": [50996, 663, 311, 534, 733, 295, 452, 3636, 965, 13, 51108], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 344, "seek": 156074, "start": 1575.6200000000001, "end": 1580.74, "text": " These people are smart, look at this size of this brain here, you know, if I put my", "tokens": [51108, 1981, 561, 366, 4069, 11, 574, 412, 341, 2744, 295, 341, 3567, 510, 11, 291, 458, 11, 498, 286, 829, 452, 51364], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 345, "seek": 156074, "start": 1580.74, "end": 1587.54, "text": " head next to it, it's like 10 times the size, we should leverage that.", "tokens": [51364, 1378, 958, 281, 309, 11, 309, 311, 411, 1266, 1413, 264, 2744, 11, 321, 820, 13982, 300, 13, 51704], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 346, "seek": 156074, "start": 1587.54, "end": 1590.14, "text": " But what do we do instead?", "tokens": [51704, 583, 437, 360, 321, 360, 2602, 30, 51834], "temperature": 0.0, "avg_logprob": -0.2009780174863022, "compression_ratio": 1.612, "no_speech_prob": 0.13224753737449646}, {"id": 347, "seek": 159014, "start": 1590.14, "end": 1596.3000000000002, "text": " Well first of all, we are proud that, you know, we don't do theory.", "tokens": [50364, 1042, 700, 295, 439, 11, 321, 366, 4570, 300, 11, 291, 458, 11, 321, 500, 380, 360, 5261, 13, 50672], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 348, "seek": 159014, "start": 1596.3000000000002, "end": 1602.9, "text": " So if you look at C-Sharp, C-Sharp has delegates, and it's like we don't need any of this theory,", "tokens": [50672, 407, 498, 291, 574, 412, 383, 12, 50, 5854, 79, 11, 383, 12, 50, 5854, 79, 575, 45756, 11, 293, 309, 311, 411, 321, 500, 380, 643, 604, 295, 341, 5261, 11, 51002], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 349, "seek": 159014, "start": 1602.9, "end": 1604.8200000000002, "text": " we have delegates.", "tokens": [51002, 321, 362, 45756, 13, 51098], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 350, "seek": 159014, "start": 1604.8200000000002, "end": 1607.8600000000001, "text": " But where, you know, where does these delegates come from?", "tokens": [51098, 583, 689, 11, 291, 458, 11, 689, 775, 613, 45756, 808, 490, 30, 51250], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 351, "seek": 159014, "start": 1607.8600000000001, "end": 1608.8600000000001, "text": " What are their properties?", "tokens": [51250, 708, 366, 641, 7221, 30, 51300], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 352, "seek": 159014, "start": 1608.8600000000001, "end": 1609.8600000000001, "text": " We don't know.", "tokens": [51300, 492, 500, 380, 458, 13, 51350], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 353, "seek": 159014, "start": 1609.8600000000001, "end": 1614.7, "text": " And then, I don't know if anybody's old enough, probably most of you were not born yet, but", "tokens": [51350, 400, 550, 11, 286, 500, 380, 458, 498, 4472, 311, 1331, 1547, 11, 1391, 881, 295, 291, 645, 406, 4232, 1939, 11, 457, 51592], "temperature": 0.0, "avg_logprob": -0.13069423447307357, "compression_ratio": 1.668141592920354, "no_speech_prob": 0.06036878749728203}, {"id": 354, "seek": 161470, "start": 1614.7, "end": 1620.5, "text": " when C-Sharp came out, there was a little fight between C-Sharp and Java, where the", "tokens": [50364, 562, 383, 12, 50, 5854, 79, 1361, 484, 11, 456, 390, 257, 707, 2092, 1296, 383, 12, 50, 5854, 79, 293, 10745, 11, 689, 264, 50654], "temperature": 0.0, "avg_logprob": -0.13745604504595746, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.15346382558345795}, {"id": 355, "seek": 161470, "start": 1620.5, "end": 1626.54, "text": " Java folks said, we don't need any of this lambdas or delegate stuff because we have", "tokens": [50654, 10745, 4024, 848, 11, 321, 500, 380, 643, 604, 295, 341, 10097, 27476, 420, 40999, 1507, 570, 321, 362, 50956], "temperature": 0.0, "avg_logprob": -0.13745604504595746, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.15346382558345795}, {"id": 356, "seek": 161470, "start": 1626.54, "end": 1628.66, "text": " virtual methods.", "tokens": [50956, 6374, 7150, 13, 51062], "temperature": 0.0, "avg_logprob": -0.13745604504595746, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.15346382558345795}, {"id": 357, "seek": 161470, "start": 1628.66, "end": 1633.7, "text": " And so this is another lesson, never say never, okay?", "tokens": [51062, 400, 370, 341, 307, 1071, 6898, 11, 1128, 584, 1128, 11, 1392, 30, 51314], "temperature": 0.0, "avg_logprob": -0.13745604504595746, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.15346382558345795}, {"id": 358, "seek": 161470, "start": 1633.7, "end": 1638.6200000000001, "text": " Because I think, because they didn't want to lose face for the longest time, Java could", "tokens": [51314, 1436, 286, 519, 11, 570, 436, 994, 380, 528, 281, 3624, 1851, 337, 264, 15438, 565, 11, 10745, 727, 51560], "temperature": 0.0, "avg_logprob": -0.13745604504595746, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.15346382558345795}, {"id": 359, "seek": 163862, "start": 1638.62, "end": 1647.26, "text": " not add lambdas because, you know, James Gosling said in public that lambdas are unnecessary.", "tokens": [50364, 406, 909, 10097, 27476, 570, 11, 291, 458, 11, 5678, 41272, 1688, 848, 294, 1908, 300, 10097, 27476, 366, 19350, 13, 50796], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 360, "seek": 163862, "start": 1647.26, "end": 1650.1399999999999, "text": " So then you're not going to kind of turn around and add them.", "tokens": [50796, 407, 550, 291, 434, 406, 516, 281, 733, 295, 1261, 926, 293, 909, 552, 13, 50940], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 361, "seek": 163862, "start": 1650.1399999999999, "end": 1651.1399999999999, "text": " No.", "tokens": [50940, 883, 13, 50990], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 362, "seek": 163862, "start": 1651.1399999999999, "end": 1655.3799999999999, "text": " So first of all, he had to kind of retire, kind of join Google, join whatever company", "tokens": [50990, 407, 700, 295, 439, 11, 415, 632, 281, 733, 295, 10731, 11, 733, 295, 3917, 3329, 11, 3917, 2035, 2237, 51202], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 363, "seek": 163862, "start": 1655.3799999999999, "end": 1656.3799999999999, "text": " is now at.", "tokens": [51202, 307, 586, 412, 13, 51252], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 364, "seek": 163862, "start": 1656.3799999999999, "end": 1659.3, "text": " I think he's doing self-driving cars at Stanford.", "tokens": [51252, 286, 519, 415, 311, 884, 2698, 12, 47094, 5163, 412, 20374, 13, 51398], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 365, "seek": 163862, "start": 1659.3, "end": 1667.58, "text": " And finally, they could put delegates lambdas into Java.", "tokens": [51398, 400, 2721, 11, 436, 727, 829, 45756, 10097, 27476, 666, 10745, 13, 51812], "temperature": 0.0, "avg_logprob": -0.13566331302418427, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.5829052925109863}, {"id": 366, "seek": 166758, "start": 1667.58, "end": 1673.06, "text": " But the other thing is also, you should not kind of downplay and be arrogant and downplay", "tokens": [50364, 583, 264, 661, 551, 307, 611, 11, 291, 820, 406, 733, 295, 760, 2858, 293, 312, 30467, 293, 760, 2858, 50638], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 367, "seek": 166758, "start": 1673.06, "end": 1674.06, "text": " theory.", "tokens": [50638, 5261, 13, 50688], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 368, "seek": 166758, "start": 1674.06, "end": 1675.06, "text": " Okay?", "tokens": [50688, 1033, 30, 50738], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 369, "seek": 166758, "start": 1675.06, "end": 1677.74, "text": " You should always stay humble and hungry.", "tokens": [50738, 509, 820, 1009, 1754, 16735, 293, 8067, 13, 50872], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 370, "seek": 166758, "start": 1677.74, "end": 1680.26, "text": " You always want to learn.", "tokens": [50872, 509, 1009, 528, 281, 1466, 13, 50998], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 371, "seek": 166758, "start": 1680.26, "end": 1685.06, "text": " If these mathematicians come up with something, you know, but you better have a look at it", "tokens": [50998, 759, 613, 32811, 2567, 808, 493, 365, 746, 11, 291, 458, 11, 457, 291, 1101, 362, 257, 574, 412, 309, 51238], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 372, "seek": 166758, "start": 1685.06, "end": 1687.8999999999999, "text": " because maybe it's something that you can use.", "tokens": [51238, 570, 1310, 309, 311, 746, 300, 291, 393, 764, 13, 51380], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 373, "seek": 166758, "start": 1687.8999999999999, "end": 1689.5, "text": " All right.", "tokens": [51380, 1057, 558, 13, 51460], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 374, "seek": 166758, "start": 1689.5, "end": 1694.9399999999998, "text": " But then you can say, come on, Eric, what are you talking about?", "tokens": [51460, 583, 550, 291, 393, 584, 11, 808, 322, 11, 9336, 11, 437, 366, 291, 1417, 466, 30, 51732], "temperature": 0.0, "avg_logprob": -0.18167930179172093, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.2133808434009552}, {"id": 375, "seek": 169494, "start": 1694.94, "end": 1702.66, "text": " Customers and categories represent mathematical objects, whereas we as developers, we deal", "tokens": [50364, 16649, 433, 293, 10479, 2906, 18894, 6565, 11, 9735, 321, 382, 8849, 11, 321, 2028, 50750], "temperature": 0.0, "avg_logprob": -0.20211378350315323, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.46071553230285645}, {"id": 376, "seek": 169494, "start": 1702.66, "end": 1710.22, "text": " with objects that represents real-world things, okay, like customers and orders and all kind", "tokens": [50750, 365, 6565, 300, 8855, 957, 12, 13217, 721, 11, 1392, 11, 411, 4581, 293, 9470, 293, 439, 733, 51128], "temperature": 0.0, "avg_logprob": -0.20211378350315323, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.46071553230285645}, {"id": 377, "seek": 169494, "start": 1710.22, "end": 1716.9, "text": " of other boring things that we have to do in our day jobs and rather not do, okay?", "tokens": [51128, 295, 661, 9989, 721, 300, 321, 362, 281, 360, 294, 527, 786, 4782, 293, 2831, 406, 360, 11, 1392, 30, 51462], "temperature": 0.0, "avg_logprob": -0.20211378350315323, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.46071553230285645}, {"id": 378, "seek": 169494, "start": 1716.9, "end": 1722.3400000000001, "text": " But that's also not true because most of our programs that we like to write when we don't", "tokens": [51462, 583, 300, 311, 611, 406, 2074, 570, 881, 295, 527, 4268, 300, 321, 411, 281, 2464, 562, 321, 500, 380, 51734], "temperature": 0.0, "avg_logprob": -0.20211378350315323, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.46071553230285645}, {"id": 379, "seek": 172234, "start": 1722.34, "end": 1724.26, "text": " have to do customers and orders.", "tokens": [50364, 362, 281, 360, 4581, 293, 9470, 13, 50460], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 380, "seek": 172234, "start": 1724.26, "end": 1730.1799999999998, "text": " Our data structures, list, trees, those don't represent real-world objects.", "tokens": [50460, 2621, 1412, 9227, 11, 1329, 11, 5852, 11, 729, 500, 380, 2906, 957, 12, 13217, 6565, 13, 50756], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 381, "seek": 172234, "start": 1730.1799999999998, "end": 1732.1399999999999, "text": " I've never seen a list.", "tokens": [50756, 286, 600, 1128, 1612, 257, 1329, 13, 50854], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 382, "seek": 172234, "start": 1732.1399999999999, "end": 1738.1799999999998, "text": " I've seen trees in the real world, but they're not like the trees that I have in my code,", "tokens": [50854, 286, 600, 1612, 5852, 294, 264, 957, 1002, 11, 457, 436, 434, 406, 411, 264, 5852, 300, 286, 362, 294, 452, 3089, 11, 51156], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 383, "seek": 172234, "start": 1738.1799999999998, "end": 1739.1799999999998, "text": " right?", "tokens": [51156, 558, 30, 51206], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 384, "seek": 172234, "start": 1739.1799999999998, "end": 1747.1, "text": " And maybe lists a little bit, although, you know, the lists that I have on my refrigerator", "tokens": [51206, 400, 1310, 14511, 257, 707, 857, 11, 4878, 11, 291, 458, 11, 264, 14511, 300, 286, 362, 322, 452, 19655, 51602], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 385, "seek": 172234, "start": 1747.1, "end": 1748.86, "text": " never get garbage collected.", "tokens": [51602, 1128, 483, 14150, 11087, 13, 51690], "temperature": 0.0, "avg_logprob": -0.18405334236695595, "compression_ratio": 1.6308411214953271, "no_speech_prob": 0.6249933242797852}, {"id": 386, "seek": 174886, "start": 1748.86, "end": 1753.26, "text": " They never get finished, whereas the lists in my computer always kind of, you know, end", "tokens": [50364, 814, 1128, 483, 4335, 11, 9735, 264, 14511, 294, 452, 3820, 1009, 733, 295, 11, 291, 458, 11, 917, 50584], "temperature": 0.0, "avg_logprob": -0.2291973163555195, "compression_ratio": 1.5778894472361809, "no_speech_prob": 0.030903227627277374}, {"id": 387, "seek": 174886, "start": 1753.26, "end": 1754.9799999999998, "text": " up kind of disappearing.", "tokens": [50584, 493, 733, 295, 34900, 13, 50670], "temperature": 0.0, "avg_logprob": -0.2291973163555195, "compression_ratio": 1.5778894472361809, "no_speech_prob": 0.030903227627277374}, {"id": 388, "seek": 174886, "start": 1754.9799999999998, "end": 1765.58, "text": " So, all right, but anyway, so I think that this whole idea that objects represent real-world", "tokens": [50670, 407, 11, 439, 558, 11, 457, 4033, 11, 370, 286, 519, 300, 341, 1379, 1558, 300, 6565, 2906, 957, 12, 13217, 51200], "temperature": 0.0, "avg_logprob": -0.2291973163555195, "compression_ratio": 1.5778894472361809, "no_speech_prob": 0.030903227627277374}, {"id": 389, "seek": 174886, "start": 1765.58, "end": 1772.5, "text": " things is nonsense because most objects that we deal with in programming don't represent", "tokens": [51200, 721, 307, 14925, 570, 881, 6565, 300, 321, 2028, 365, 294, 9410, 500, 380, 2906, 51546], "temperature": 0.0, "avg_logprob": -0.2291973163555195, "compression_ratio": 1.5778894472361809, "no_speech_prob": 0.030903227627277374}, {"id": 390, "seek": 174886, "start": 1772.5, "end": 1776.02, "text": " real-world objects.", "tokens": [51546, 957, 12, 13217, 6565, 13, 51722], "temperature": 0.0, "avg_logprob": -0.2291973163555195, "compression_ratio": 1.5778894472361809, "no_speech_prob": 0.030903227627277374}, {"id": 391, "seek": 177602, "start": 1776.02, "end": 1782.1, "text": " And the other thing is that what we can learn, so what we can learn from these mathematicians", "tokens": [50364, 400, 264, 661, 551, 307, 300, 437, 321, 393, 1466, 11, 370, 437, 321, 393, 1466, 490, 613, 32811, 2567, 50668], "temperature": 0.0, "avg_logprob": -0.12549025513405024, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.08413863927125931}, {"id": 392, "seek": 177602, "start": 1782.1, "end": 1787.74, "text": " is that we should be more careful in formalizing the things that we deal with.", "tokens": [50668, 307, 300, 321, 820, 312, 544, 5026, 294, 9860, 3319, 264, 721, 300, 321, 2028, 365, 13, 50950], "temperature": 0.0, "avg_logprob": -0.12549025513405024, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.08413863927125931}, {"id": 393, "seek": 177602, "start": 1787.74, "end": 1795.82, "text": " For example, if we write code in Java, we deal with methods, but these methods themselves,", "tokens": [50950, 1171, 1365, 11, 498, 321, 2464, 3089, 294, 10745, 11, 321, 2028, 365, 7150, 11, 457, 613, 7150, 2969, 11, 51354], "temperature": 0.0, "avg_logprob": -0.12549025513405024, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.08413863927125931}, {"id": 394, "seek": 177602, "start": 1795.82, "end": 1800.7, "text": " you know, we don't have an object that represents them.", "tokens": [51354, 291, 458, 11, 321, 500, 380, 362, 364, 2657, 300, 8855, 552, 13, 51598], "temperature": 0.0, "avg_logprob": -0.12549025513405024, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.08413863927125931}, {"id": 395, "seek": 177602, "start": 1800.7, "end": 1801.7, "text": " Is that true?", "tokens": [51598, 1119, 300, 2074, 30, 51648], "temperature": 0.0, "avg_logprob": -0.12549025513405024, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.08413863927125931}, {"id": 396, "seek": 180170, "start": 1802.14, "end": 1807.66, "text": " Well, that's what we're after, but I'll say something more about it later.", "tokens": [50386, 1042, 11, 300, 311, 437, 321, 434, 934, 11, 457, 286, 603, 584, 746, 544, 466, 309, 1780, 13, 50662], "temperature": 0.0, "avg_logprob": -0.14961834543759062, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010226454585790634}, {"id": 397, "seek": 180170, "start": 1807.66, "end": 1812.66, "text": " But the other thing that we can learn from the mathematicians is that we should also", "tokens": [50662, 583, 264, 661, 551, 300, 321, 393, 1466, 490, 264, 32811, 2567, 307, 300, 321, 820, 611, 50912], "temperature": 0.0, "avg_logprob": -0.14961834543759062, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010226454585790634}, {"id": 398, "seek": 180170, "start": 1812.66, "end": 1817.78, "text": " be more careful that when we define a type that we think about the properties, because", "tokens": [50912, 312, 544, 5026, 300, 562, 321, 6964, 257, 2010, 300, 321, 519, 466, 264, 7221, 11, 570, 51168], "temperature": 0.0, "avg_logprob": -0.14961834543759062, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010226454585790634}, {"id": 399, "seek": 180170, "start": 1817.78, "end": 1824.22, "text": " otherwise some smart-ass colleagues of you can always return null and then claim that", "tokens": [51168, 5911, 512, 4069, 12, 640, 7734, 295, 291, 393, 1009, 2736, 18184, 293, 550, 3932, 300, 51490], "temperature": 0.0, "avg_logprob": -0.14961834543759062, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010226454585790634}, {"id": 400, "seek": 180170, "start": 1824.22, "end": 1830.8600000000001, "text": " this is a proper implementation, because you have not specified with that type what the", "tokens": [51490, 341, 307, 257, 2296, 11420, 11, 570, 291, 362, 406, 22206, 365, 300, 2010, 437, 264, 51822], "temperature": 0.0, "avg_logprob": -0.14961834543759062, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.010226454585790634}, {"id": 401, "seek": 183086, "start": 1830.86, "end": 1833.1399999999999, "text": " properties are, okay?", "tokens": [50364, 7221, 366, 11, 1392, 30, 50478], "temperature": 0.0, "avg_logprob": -0.2341422462463379, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.014760509133338928}, {"id": 402, "seek": 183086, "start": 1833.1399999999999, "end": 1840.6599999999999, "text": " And the good thing is that we don't have like weird terminology, although if you use UML", "tokens": [50478, 400, 264, 665, 551, 307, 300, 321, 500, 380, 362, 411, 3657, 27575, 11, 4878, 498, 291, 764, 624, 12683, 50854], "temperature": 0.0, "avg_logprob": -0.2341422462463379, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.014760509133338928}, {"id": 403, "seek": 183086, "start": 1840.6599999999999, "end": 1844.9399999999998, "text": " and all that stuff, I guess there's plenty of craziness there.", "tokens": [50854, 293, 439, 300, 1507, 11, 286, 2041, 456, 311, 7140, 295, 46348, 1324, 456, 13, 51068], "temperature": 0.0, "avg_logprob": -0.2341422462463379, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.014760509133338928}, {"id": 404, "seek": 183086, "start": 1844.9399999999998, "end": 1852.6999999999998, "text": " Now, this is, I'm a big fan of Bertrand Meyer, he's not related because his last name is", "tokens": [51068, 823, 11, 341, 307, 11, 286, 478, 257, 955, 3429, 295, 29594, 3699, 47207, 11, 415, 311, 406, 4077, 570, 702, 1036, 1315, 307, 51456], "temperature": 0.0, "avg_logprob": -0.2341422462463379, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.014760509133338928}, {"id": 405, "seek": 183086, "start": 1852.6999999999998, "end": 1859.86, "text": " with a Y and mine is with IJ, but he has a great saying where he says that, you know,", "tokens": [51456, 365, 257, 398, 293, 3892, 307, 365, 286, 41, 11, 457, 415, 575, 257, 869, 1566, 689, 415, 1619, 300, 11, 291, 458, 11, 51814], "temperature": 0.0, "avg_logprob": -0.2341422462463379, "compression_ratio": 1.5130434782608695, "no_speech_prob": 0.014760509133338928}, {"id": 406, "seek": 185986, "start": 1859.86, "end": 1864.3799999999999, "text": " objects don't really represent real-world things because you're always kind of removed.", "tokens": [50364, 6565, 500, 380, 534, 2906, 957, 12, 13217, 721, 570, 291, 434, 1009, 733, 295, 7261, 13, 50590], "temperature": 0.0, "avg_logprob": -0.13490299648708767, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.3287263512611389}, {"id": 407, "seek": 185986, "start": 1864.3799999999999, "end": 1869.6599999999999, "text": " Even if you have a person object, it doesn't really represent a person because it's something", "tokens": [50590, 2754, 498, 291, 362, 257, 954, 2657, 11, 309, 1177, 380, 534, 2906, 257, 954, 570, 309, 311, 746, 50854], "temperature": 0.0, "avg_logprob": -0.13490299648708767, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.3287263512611389}, {"id": 408, "seek": 185986, "start": 1869.6599999999999, "end": 1873.86, "text": " in the memory of your computer that represents a person.", "tokens": [50854, 294, 264, 4675, 295, 428, 3820, 300, 8855, 257, 954, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13490299648708767, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.3287263512611389}, {"id": 409, "seek": 185986, "start": 1873.86, "end": 1879.5, "text": " So you're all kind of ready twice removed from reality, okay?", "tokens": [51064, 407, 291, 434, 439, 733, 295, 1919, 6091, 7261, 490, 4103, 11, 1392, 30, 51346], "temperature": 0.0, "avg_logprob": -0.13490299648708767, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.3287263512611389}, {"id": 410, "seek": 185986, "start": 1879.5, "end": 1886.54, "text": " So let's just forget about that and just look at objects in programming as formal things", "tokens": [51346, 407, 718, 311, 445, 2870, 466, 300, 293, 445, 574, 412, 6565, 294, 9410, 382, 9860, 721, 51698], "temperature": 0.0, "avg_logprob": -0.13490299648708767, "compression_ratio": 1.7522522522522523, "no_speech_prob": 0.3287263512611389}, {"id": 411, "seek": 188654, "start": 1886.54, "end": 1890.3, "text": " just like mathematical objects.", "tokens": [50364, 445, 411, 18894, 6565, 13, 50552], "temperature": 0.0, "avg_logprob": -0.21766993643223553, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.046130843460559845}, {"id": 412, "seek": 188654, "start": 1890.3, "end": 1896.82, "text": " All right, now I've been talking about programming, I thought this was about category theory.", "tokens": [50552, 1057, 558, 11, 586, 286, 600, 668, 1417, 466, 9410, 11, 286, 1194, 341, 390, 466, 7719, 5261, 13, 50878], "temperature": 0.0, "avg_logprob": -0.21766993643223553, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.046130843460559845}, {"id": 413, "seek": 188654, "start": 1896.82, "end": 1906.1399999999999, "text": " Now, the thing before we go there is we do have a way to talk about methods as objects", "tokens": [50878, 823, 11, 264, 551, 949, 321, 352, 456, 307, 321, 360, 362, 257, 636, 281, 751, 466, 7150, 382, 6565, 51344], "temperature": 0.0, "avg_logprob": -0.21766993643223553, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.046130843460559845}, {"id": 414, "seek": 188654, "start": 1906.1399999999999, "end": 1909.46, "text": " and that is with reflection, okay?", "tokens": [51344, 293, 300, 307, 365, 12914, 11, 1392, 30, 51510], "temperature": 0.0, "avg_logprob": -0.21766993643223553, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.046130843460559845}, {"id": 415, "seek": 188654, "start": 1909.46, "end": 1913.7, "text": " Because if you do reflection in Java, you can kind of, you know, go to a type, get this", "tokens": [51510, 1436, 498, 291, 360, 12914, 294, 10745, 11, 291, 393, 733, 295, 11, 291, 458, 11, 352, 281, 257, 2010, 11, 483, 341, 51722], "temperature": 0.0, "avg_logprob": -0.21766993643223553, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.046130843460559845}, {"id": 416, "seek": 191370, "start": 1913.7, "end": 1917.5, "text": " method and you can even invoke that method using reflection.", "tokens": [50364, 3170, 293, 291, 393, 754, 41117, 300, 3170, 1228, 12914, 13, 50554], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 417, "seek": 191370, "start": 1917.5, "end": 1923.3400000000001, "text": " Now, reflection, if you think about it, is super complex because it's a program that", "tokens": [50554, 823, 11, 12914, 11, 498, 291, 519, 466, 309, 11, 307, 1687, 3997, 570, 309, 311, 257, 1461, 300, 50846], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 418, "seek": 191370, "start": 1923.3400000000001, "end": 1926.06, "text": " can reason about itself.", "tokens": [50846, 393, 1778, 466, 2564, 13, 50982], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 419, "seek": 191370, "start": 1926.06, "end": 1929.06, "text": " Most of us are not even able to reason about ourselves.", "tokens": [50982, 4534, 295, 505, 366, 406, 754, 1075, 281, 1778, 466, 4175, 13, 51132], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 420, "seek": 191370, "start": 1929.06, "end": 1934.9, "text": " You know, when we're acting foolishly in public after we've been kind of, you know, partying,", "tokens": [51132, 509, 458, 11, 562, 321, 434, 6577, 23478, 356, 294, 1908, 934, 321, 600, 668, 733, 295, 11, 291, 458, 11, 644, 1840, 11, 51424], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 421, "seek": 191370, "start": 1934.9, "end": 1935.9, "text": " are we reflecting?", "tokens": [51424, 366, 321, 23543, 30, 51474], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 422, "seek": 191370, "start": 1935.9, "end": 1938.14, "text": " No, typically not.", "tokens": [51474, 883, 11, 5850, 406, 13, 51586], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 423, "seek": 191370, "start": 1938.14, "end": 1941.22, "text": " Or maybe we do sometimes.", "tokens": [51586, 1610, 1310, 321, 360, 2171, 13, 51740], "temperature": 0.0, "avg_logprob": -0.2008198591379019, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07354393601417542}, {"id": 424, "seek": 194122, "start": 1941.58, "end": 1948.66, "text": " But code, it's amazing that we can write code that kind of reflects about itself and the", "tokens": [50382, 583, 3089, 11, 309, 311, 2243, 300, 321, 393, 2464, 3089, 300, 733, 295, 18926, 466, 2564, 293, 264, 50736], "temperature": 0.0, "avg_logprob": -0.16824955940246583, "compression_ratio": 1.6984126984126984, "no_speech_prob": 0.012558933347463608}, {"id": 425, "seek": 194122, "start": 1948.66, "end": 1953.02, "text": " mathematicians cannot do that.", "tokens": [50736, 32811, 2567, 2644, 360, 300, 13, 50954], "temperature": 0.0, "avg_logprob": -0.16824955940246583, "compression_ratio": 1.6984126984126984, "no_speech_prob": 0.012558933347463608}, {"id": 426, "seek": 194122, "start": 1953.02, "end": 1959.8600000000001, "text": " But reflection is kind of a cop out because with reflection, we're not really kind of", "tokens": [50954, 583, 12914, 307, 733, 295, 257, 2971, 484, 570, 365, 12914, 11, 321, 434, 406, 534, 733, 295, 51296], "temperature": 0.0, "avg_logprob": -0.16824955940246583, "compression_ratio": 1.6984126984126984, "no_speech_prob": 0.012558933347463608}, {"id": 427, "seek": 194122, "start": 1959.8600000000001, "end": 1964.42, "text": " having an object that represents a method because it's kind of, you know, in the kind", "tokens": [51296, 1419, 364, 2657, 300, 8855, 257, 3170, 570, 309, 311, 733, 295, 11, 291, 458, 11, 294, 264, 733, 51524], "temperature": 0.0, "avg_logprob": -0.16824955940246583, "compression_ratio": 1.6984126984126984, "no_speech_prob": 0.012558933347463608}, {"id": 428, "seek": 194122, "start": 1964.42, "end": 1967.58, "text": " of dream world of reflection.", "tokens": [51524, 295, 3055, 1002, 295, 12914, 13, 51682], "temperature": 0.0, "avg_logprob": -0.16824955940246583, "compression_ratio": 1.6984126984126984, "no_speech_prob": 0.012558933347463608}, {"id": 429, "seek": 196758, "start": 1967.58, "end": 1973.06, "text": " And what we're trying to do here with lambdas or with methods references, we're trying", "tokens": [50364, 400, 437, 321, 434, 1382, 281, 360, 510, 365, 10097, 27476, 420, 365, 7150, 15400, 11, 321, 434, 1382, 50638], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 430, "seek": 196758, "start": 1973.06, "end": 1979.34, "text": " to represent methods as normal objects, not as reflective objects.", "tokens": [50638, 281, 2906, 7150, 382, 2710, 6565, 11, 406, 382, 28931, 6565, 13, 50952], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 431, "seek": 196758, "start": 1979.34, "end": 1983.8999999999999, "text": " Oh, my goodness.", "tokens": [50952, 876, 11, 452, 8387, 13, 51180], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 432, "seek": 196758, "start": 1983.8999999999999, "end": 1984.8999999999999, "text": " This has to come.", "tokens": [51180, 639, 575, 281, 808, 13, 51230], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 433, "seek": 196758, "start": 1984.8999999999999, "end": 1985.8999999999999, "text": " Okay.", "tokens": [51230, 1033, 13, 51280], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 434, "seek": 196758, "start": 1985.8999999999999, "end": 1989.6999999999998, "text": " Dave Thomas, small talk, everybody knows Dave Thomas.", "tokens": [51280, 11017, 8500, 11, 1359, 751, 11, 2201, 3255, 11017, 8500, 13, 51470], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 435, "seek": 196758, "start": 1989.6999999999998, "end": 1990.6999999999998, "text": " Okay.", "tokens": [51470, 1033, 13, 51520], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 436, "seek": 196758, "start": 1990.6999999999998, "end": 1991.6999999999998, "text": " Small talk guy.", "tokens": [51520, 15287, 751, 2146, 13, 51570], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 437, "seek": 196758, "start": 1991.6999999999998, "end": 1996.46, "text": " Of course, what do small talk people say?", "tokens": [51570, 2720, 1164, 11, 437, 360, 1359, 751, 561, 584, 30, 51808], "temperature": 0.0, "avg_logprob": -0.29961092207166884, "compression_ratio": 1.625, "no_speech_prob": 0.02625180222094059}, {"id": 438, "seek": 199646, "start": 1996.46, "end": 2001.6200000000001, "text": " And I was a young boy and we read a small talk was still popular.", "tokens": [50364, 400, 286, 390, 257, 2037, 3237, 293, 321, 1401, 257, 1359, 751, 390, 920, 3743, 13, 50622], "temperature": 0.0, "avg_logprob": -0.25759985230185767, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011992827989161015}, {"id": 439, "seek": 199646, "start": 2001.6200000000001, "end": 2004.42, "text": " That was a long time ago.", "tokens": [50622, 663, 390, 257, 938, 565, 2057, 13, 50762], "temperature": 0.0, "avg_logprob": -0.25759985230185767, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011992827989161015}, {"id": 440, "seek": 199646, "start": 2004.42, "end": 2009.5, "text": " We already had blocks that blocks are things that represent methods.", "tokens": [50762, 492, 1217, 632, 8474, 300, 8474, 366, 721, 300, 2906, 7150, 13, 51016], "temperature": 0.0, "avg_logprob": -0.25759985230185767, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011992827989161015}, {"id": 441, "seek": 199646, "start": 2009.5, "end": 2015.06, "text": " And that's quite remarkable because if you look at small talk, that is very much as the", "tokens": [51016, 400, 300, 311, 1596, 12802, 570, 498, 291, 574, 412, 1359, 751, 11, 300, 307, 588, 709, 382, 264, 51294], "temperature": 0.0, "avg_logprob": -0.25759985230185767, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011992827989161015}, {"id": 442, "seek": 199646, "start": 2015.06, "end": 2020.9, "text": " flavor, this anthropomorphic flavor where objects represent real world things where", "tokens": [51294, 6813, 11, 341, 22727, 32702, 299, 6813, 689, 6565, 2906, 957, 1002, 721, 689, 51586], "temperature": 0.0, "avg_logprob": -0.25759985230185767, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011992827989161015}, {"id": 443, "seek": 199646, "start": 2020.9, "end": 2022.7, "text": " you send messages to it.", "tokens": [51586, 291, 2845, 7897, 281, 309, 13, 51676], "temperature": 0.0, "avg_logprob": -0.25759985230185767, "compression_ratio": 1.6227272727272728, "no_speech_prob": 0.011992827989161015}, {"id": 444, "seek": 202270, "start": 2022.7, "end": 2030.18, "text": " But still, they already knew that they had to represent methods as objects themselves.", "tokens": [50364, 583, 920, 11, 436, 1217, 2586, 300, 436, 632, 281, 2906, 7150, 382, 6565, 2969, 13, 50738], "temperature": 0.0, "avg_logprob": -0.18807614721902988, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.012101828120648861}, {"id": 445, "seek": 202270, "start": 2030.18, "end": 2031.5800000000002, "text": " Okay.", "tokens": [50738, 1033, 13, 50808], "temperature": 0.0, "avg_logprob": -0.18807614721902988, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.012101828120648861}, {"id": 446, "seek": 202270, "start": 2031.5800000000002, "end": 2032.8600000000001, "text": " But don't worry.", "tokens": [50808, 583, 500, 380, 3292, 13, 50872], "temperature": 0.0, "avg_logprob": -0.18807614721902988, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.012101828120648861}, {"id": 447, "seek": 202270, "start": 2032.8600000000001, "end": 2036.18, "text": " I won't talk about small talk.", "tokens": [50872, 286, 1582, 380, 751, 466, 1359, 751, 13, 51038], "temperature": 0.0, "avg_logprob": -0.18807614721902988, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.012101828120648861}, {"id": 448, "seek": 202270, "start": 2036.18, "end": 2042.74, "text": " And the reason is that in small talk, like what we saw here in mathematics, array indexes", "tokens": [51038, 400, 264, 1778, 307, 300, 294, 1359, 751, 11, 411, 437, 321, 1866, 510, 294, 18666, 11, 10225, 8186, 279, 51366], "temperature": 0.0, "avg_logprob": -0.18807614721902988, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.012101828120648861}, {"id": 449, "seek": 202270, "start": 2042.74, "end": 2050.7, "text": " start with one, which as a Dutch person is unacceptable because the big extra as told", "tokens": [51366, 722, 365, 472, 11, 597, 382, 257, 15719, 954, 307, 31812, 570, 264, 955, 2857, 382, 1907, 51764], "temperature": 0.0, "avg_logprob": -0.18807614721902988, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.012101828120648861}, {"id": 450, "seek": 205070, "start": 2050.7, "end": 2054.02, "text": " us that indexes should start at zero.", "tokens": [50364, 505, 300, 8186, 279, 820, 722, 412, 4018, 13, 50530], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 451, "seek": 205070, "start": 2054.02, "end": 2056.62, "text": " And you know the reason why?", "tokens": [50530, 400, 291, 458, 264, 1778, 983, 30, 50660], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 452, "seek": 205070, "start": 2056.62, "end": 2060.1, "text": " Because when he is kind of, you know, that's why I'm kind of doing this papers.", "tokens": [50660, 1436, 562, 415, 307, 733, 295, 11, 291, 458, 11, 300, 311, 983, 286, 478, 733, 295, 884, 341, 10577, 13, 50834], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 453, "seek": 205070, "start": 2060.1, "end": 2063.4199999999996, "text": " The first paper, there are zero papers here.", "tokens": [50834, 440, 700, 3035, 11, 456, 366, 4018, 10577, 510, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 454, "seek": 205070, "start": 2063.4199999999996, "end": 2065.74, "text": " So that's why it's zero.", "tokens": [51000, 407, 300, 311, 983, 309, 311, 4018, 13, 51116], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 455, "seek": 205070, "start": 2065.74, "end": 2068.54, "text": " And now the second paper, now it's two.", "tokens": [51116, 400, 586, 264, 1150, 3035, 11, 586, 309, 311, 732, 13, 51256], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 456, "seek": 205070, "start": 2068.54, "end": 2073.1, "text": " So you see that's how he can because he always wrote his, his papers by hand.", "tokens": [51256, 407, 291, 536, 300, 311, 577, 415, 393, 570, 415, 1009, 4114, 702, 11, 702, 10577, 538, 1011, 13, 51484], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 457, "seek": 205070, "start": 2073.1, "end": 2076.9399999999996, "text": " And so he counted like how many papers were already there.", "tokens": [51484, 400, 370, 415, 20150, 411, 577, 867, 10577, 645, 1217, 456, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1812324855638587, "compression_ratio": 1.7782805429864252, "no_speech_prob": 0.23637661337852478}, {"id": 458, "seek": 207694, "start": 2077.34, "end": 2077.94, "text": " Okay.", "tokens": [50384, 1033, 13, 50414], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 459, "seek": 207694, "start": 2077.94, "end": 2081.66, "text": " So now you know why you should be counting that with zero.", "tokens": [50414, 407, 586, 291, 458, 983, 291, 820, 312, 13251, 300, 365, 4018, 13, 50600], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 460, "seek": 207694, "start": 2081.66, "end": 2084.66, "text": " Okay.", "tokens": [50600, 1033, 13, 50750], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 461, "seek": 207694, "start": 2084.66, "end": 2095.46, "text": " Now let's kind of talk about why we are really here is how do we represent methods as objects?", "tokens": [50750, 823, 718, 311, 733, 295, 751, 466, 983, 321, 366, 534, 510, 307, 577, 360, 321, 2906, 7150, 382, 6565, 30, 51290], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 462, "seek": 207694, "start": 2095.46, "end": 2099.94, "text": " And again, category theorists have a fancy word for that.", "tokens": [51290, 400, 797, 11, 7719, 27423, 1751, 362, 257, 10247, 1349, 337, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 463, "seek": 207694, "start": 2099.94, "end": 2102.5, "text": " They call it exponentials.", "tokens": [51514, 814, 818, 309, 21510, 82, 13, 51642], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 464, "seek": 207694, "start": 2102.5, "end": 2106.14, "text": " And then you can ask yourself, why do they call it exponentials?", "tokens": [51642, 400, 550, 291, 393, 1029, 1803, 11, 983, 360, 436, 818, 309, 21510, 82, 30, 51824], "temperature": 0.0, "avg_logprob": -0.23055724664167923, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.007247403729707003}, {"id": 465, "seek": 210614, "start": 2106.14, "end": 2109.46, "text": " Why don't they call it lambdas or anything normal?", "tokens": [50364, 1545, 500, 380, 436, 818, 309, 10097, 27476, 420, 1340, 2710, 30, 50530], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 466, "seek": 210614, "start": 2109.46, "end": 2116.3799999999997, "text": " Like in TypeScript, you know, arrow functions or, I don't know, blocks.", "tokens": [50530, 1743, 294, 15576, 14237, 11, 291, 458, 11, 11610, 6828, 420, 11, 286, 500, 380, 458, 11, 8474, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 467, "seek": 210614, "start": 2116.3799999999997, "end": 2119.62, "text": " Well, there's actually a good reason.", "tokens": [50876, 1042, 11, 456, 311, 767, 257, 665, 1778, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 468, "seek": 210614, "start": 2119.62, "end": 2125.22, "text": " But if we look at this, I don't know, I see people already except for Mr.", "tokens": [51038, 583, 498, 321, 574, 412, 341, 11, 286, 500, 380, 458, 11, 286, 536, 561, 1217, 3993, 337, 2221, 13, 51318], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 469, "seek": 210614, "start": 2125.22, "end": 2127.46, "text": " Generic here.", "tokens": [51318, 15409, 299, 510, 13, 51430], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 470, "seek": 210614, "start": 2127.46, "end": 2130.74, "text": " He's like, oh yes, yeah.", "tokens": [51430, 634, 311, 411, 11, 1954, 2086, 11, 1338, 13, 51594], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 471, "seek": 210614, "start": 2130.74, "end": 2133.06, "text": " This is like, you know, beautiful.", "tokens": [51594, 639, 307, 411, 11, 291, 458, 11, 2238, 13, 51710], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 472, "seek": 210614, "start": 2133.06, "end": 2134.02, "text": " This is beautiful.", "tokens": [51710, 639, 307, 2238, 13, 51758], "temperature": 0.0, "avg_logprob": -0.2460486888885498, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.013152715750038624}, {"id": 473, "seek": 213402, "start": 2134.02, "end": 2138.82, "text": " For the rest of us, it looks a little bit like, look at this.", "tokens": [50364, 1171, 264, 1472, 295, 505, 11, 309, 1542, 257, 707, 857, 411, 11, 574, 412, 341, 13, 50604], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 474, "seek": 213402, "start": 2138.82, "end": 2141.74, "text": " There's even now two diagrams here.", "tokens": [50604, 821, 311, 754, 586, 732, 36709, 510, 13, 50750], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 475, "seek": 213402, "start": 2141.74, "end": 2142.02, "text": " Okay.", "tokens": [50750, 1033, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 476, "seek": 213402, "start": 2142.02, "end": 2143.22, "text": " But I see a lambda.", "tokens": [50764, 583, 286, 536, 257, 13607, 13, 50824], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 477, "seek": 213402, "start": 2143.22, "end": 2144.06, "text": " Can you see that here?", "tokens": [50824, 1664, 291, 536, 300, 510, 30, 50866], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 478, "seek": 213402, "start": 2144.06, "end": 2147.2599999999998, "text": " It's like, you know, the font is not so sharp, but there's a lambda.", "tokens": [50866, 467, 311, 411, 11, 291, 458, 11, 264, 10703, 307, 406, 370, 8199, 11, 457, 456, 311, 257, 13607, 13, 51026], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 479, "seek": 213402, "start": 2147.2599999999998, "end": 2149.62, "text": " So we're in the right direction.", "tokens": [51026, 407, 321, 434, 294, 264, 558, 3513, 13, 51144], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 480, "seek": 213402, "start": 2149.62, "end": 2152.94, "text": " So let's decode the Greek and let's zoom in.", "tokens": [51144, 407, 718, 311, 979, 1429, 264, 10281, 293, 718, 311, 8863, 294, 13, 51310], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 481, "seek": 213402, "start": 2152.94, "end": 2158.18, "text": " So it says, let's see be a category with binary products.", "tokens": [51310, 407, 309, 1619, 11, 718, 311, 536, 312, 257, 7719, 365, 17434, 3383, 13, 51572], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 482, "seek": 213402, "start": 2158.18, "end": 2163.3, "text": " So that's the reason why we started out with tuples because in order to do functions,", "tokens": [51572, 407, 300, 311, 264, 1778, 983, 321, 1409, 484, 365, 2604, 2622, 570, 294, 1668, 281, 360, 6828, 11, 51828], "temperature": 0.0, "avg_logprob": -0.14476472360116463, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.01253754273056984}, {"id": 483, "seek": 216330, "start": 2163.3, "end": 2164.5800000000004, "text": " we need them.", "tokens": [50364, 321, 643, 552, 13, 50428], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 484, "seek": 216330, "start": 2164.5800000000004, "end": 2168.86, "text": " That was a little bit of the foresight of me.", "tokens": [50428, 663, 390, 257, 707, 857, 295, 264, 2091, 28654, 295, 385, 13, 50642], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 485, "seek": 216330, "start": 2168.86, "end": 2177.6200000000003, "text": " And let Y and CB objects, the exponential object, Z to the power of Y.", "tokens": [50642, 400, 718, 398, 293, 18745, 6565, 11, 264, 21510, 2657, 11, 1176, 281, 264, 1347, 295, 398, 13, 51080], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 486, "seek": 216330, "start": 2177.6200000000003, "end": 2178.5800000000004, "text": " Oh my goodness.", "tokens": [51080, 876, 452, 8387, 13, 51128], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 487, "seek": 216330, "start": 2178.5800000000004, "end": 2179.94, "text": " Why?", "tokens": [51128, 1545, 30, 51196], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 488, "seek": 216330, "start": 2179.94, "end": 2185.78, "text": " This is why they're called exponentials because they write it as an exponent.", "tokens": [51196, 639, 307, 983, 436, 434, 1219, 21510, 82, 570, 436, 2464, 309, 382, 364, 37871, 13, 51488], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 489, "seek": 216330, "start": 2185.78, "end": 2190.26, "text": " It's defined, blah, blah, blah, and then there's a new word, functor.", "tokens": [51488, 467, 311, 7642, 11, 12288, 11, 12288, 11, 12288, 11, 293, 550, 456, 311, 257, 777, 1349, 11, 1019, 1672, 13, 51712], "temperature": 0.0, "avg_logprob": -0.211486570296749, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.010972867719829082}, {"id": 490, "seek": 219026, "start": 2190.26, "end": 2196.9, "text": " Oh, I thought that we were ready because I kind of cheated by doing these products first.", "tokens": [50364, 876, 11, 286, 1194, 300, 321, 645, 1919, 570, 286, 733, 295, 28079, 538, 884, 613, 3383, 700, 13, 50696], "temperature": 0.0, "avg_logprob": -0.14411509314248727, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.0011806775582954288}, {"id": 491, "seek": 219026, "start": 2196.9, "end": 2199.98, "text": " But now we kind of have another hurdle here.", "tokens": [50696, 583, 586, 321, 733, 295, 362, 1071, 47423, 510, 13, 50850], "temperature": 0.0, "avg_logprob": -0.14411509314248727, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.0011806775582954288}, {"id": 492, "seek": 219026, "start": 2199.98, "end": 2203.6200000000003, "text": " I have to explain to you what functors are.", "tokens": [50850, 286, 362, 281, 2903, 281, 291, 437, 1019, 5547, 366, 13, 51032], "temperature": 0.0, "avg_logprob": -0.14411509314248727, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.0011806775582954288}, {"id": 493, "seek": 219026, "start": 2203.6200000000003, "end": 2214.3, "text": " But first, let me kind of explain a little bit why this notation of exponentials makes sense.", "tokens": [51032, 583, 700, 11, 718, 385, 733, 295, 2903, 257, 707, 857, 983, 341, 24657, 295, 21510, 82, 1669, 2020, 13, 51566], "temperature": 0.0, "avg_logprob": -0.14411509314248727, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.0011806775582954288}, {"id": 494, "seek": 219026, "start": 2214.3, "end": 2219.5400000000004, "text": " And the reason is that if I have a function from a type,", "tokens": [51566, 400, 264, 1778, 307, 300, 498, 286, 362, 257, 2445, 490, 257, 2010, 11, 51828], "temperature": 0.0, "avg_logprob": -0.14411509314248727, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.0011806775582954288}, {"id": 495, "seek": 221954, "start": 2219.58, "end": 2228.42, "text": " Y to a type Z, that there are Z to the power of Y possible functions.", "tokens": [50366, 398, 281, 257, 2010, 1176, 11, 300, 456, 366, 1176, 281, 264, 1347, 295, 398, 1944, 6828, 13, 50808], "temperature": 0.0, "avg_logprob": -0.13837079499897204, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.0021874408703297377}, {"id": 496, "seek": 221954, "start": 2228.42, "end": 2236.38, "text": " Okay, so if I have two types, Y and Z, and I take all the functions from Y to Z,", "tokens": [50808, 1033, 11, 370, 498, 286, 362, 732, 3467, 11, 398, 293, 1176, 11, 293, 286, 747, 439, 264, 6828, 490, 398, 281, 1176, 11, 51206], "temperature": 0.0, "avg_logprob": -0.13837079499897204, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.0021874408703297377}, {"id": 497, "seek": 221954, "start": 2236.38, "end": 2239.62, "text": " then there are Z to the power of Y of them.", "tokens": [51206, 550, 456, 366, 1176, 281, 264, 1347, 295, 398, 295, 552, 13, 51368], "temperature": 0.0, "avg_logprob": -0.13837079499897204, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.0021874408703297377}, {"id": 498, "seek": 221954, "start": 2239.62, "end": 2241.62, "text": " Now, how can I remember that?", "tokens": [51368, 823, 11, 577, 393, 286, 1604, 300, 30, 51468], "temperature": 0.0, "avg_logprob": -0.13837079499897204, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.0021874408703297377}, {"id": 499, "seek": 221954, "start": 2241.62, "end": 2244.2599999999998, "text": " Okay, I see somebody here puzzled.", "tokens": [51468, 1033, 11, 286, 536, 2618, 510, 18741, 1493, 13, 51600], "temperature": 0.0, "avg_logprob": -0.13837079499897204, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.0021874408703297377}, {"id": 500, "seek": 221954, "start": 2244.2599999999998, "end": 2247.18, "text": " Okay, now let's do the simplest case.", "tokens": [51600, 1033, 11, 586, 718, 311, 360, 264, 22811, 1389, 13, 51746], "temperature": 0.0, "avg_logprob": -0.13837079499897204, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.0021874408703297377}, {"id": 501, "seek": 224718, "start": 2247.18, "end": 2253.3399999999997, "text": " Let's say that Y, so this is a function from Y to Z.", "tokens": [50364, 961, 311, 584, 300, 398, 11, 370, 341, 307, 257, 2445, 490, 398, 281, 1176, 13, 50672], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 502, "seek": 224718, "start": 2253.3399999999997, "end": 2258.7799999999997, "text": " So now let's take Y to be unit, okay, or void.", "tokens": [50672, 407, 586, 718, 311, 747, 398, 281, 312, 4985, 11, 1392, 11, 420, 22009, 13, 50944], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 503, "seek": 224718, "start": 2258.7799999999997, "end": 2260.58, "text": " So there's only one value.", "tokens": [50944, 407, 456, 311, 787, 472, 2158, 13, 51034], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 504, "seek": 224718, "start": 2260.58, "end": 2265.06, "text": " And let take Z be booleans, true and false.", "tokens": [51034, 400, 718, 747, 1176, 312, 748, 4812, 599, 11, 2074, 293, 7908, 13, 51258], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 505, "seek": 224718, "start": 2265.06, "end": 2270.06, "text": " So how many functions are there from void to boolean?", "tokens": [51258, 407, 577, 867, 6828, 366, 456, 490, 22009, 281, 748, 4812, 282, 30, 51508], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 506, "seek": 224718, "start": 2270.06, "end": 2270.94, "text": " Only two.", "tokens": [51508, 5686, 732, 13, 51552], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 507, "seek": 224718, "start": 2270.94, "end": 2275.7799999999997, "text": " I can go from void to true and from void to false.", "tokens": [51552, 286, 393, 352, 490, 22009, 281, 2074, 293, 490, 22009, 281, 7908, 13, 51794], "temperature": 0.0, "avg_logprob": -0.14550370971361795, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0002373007737332955}, {"id": 508, "seek": 227578, "start": 2275.78, "end": 2282.82, "text": " Okay, now how many functions are there from booleans to unit?", "tokens": [50364, 1033, 11, 586, 577, 867, 6828, 366, 456, 490, 748, 4812, 599, 281, 4985, 30, 50716], "temperature": 0.0, "avg_logprob": -0.1263009245677661, "compression_ratio": 1.7771739130434783, "no_speech_prob": 0.0004340711166150868}, {"id": 509, "seek": 227578, "start": 2282.82, "end": 2288.0600000000004, "text": " Well, there's only one that maps true to unit and false to unit.", "tokens": [50716, 1042, 11, 456, 311, 787, 472, 300, 11317, 2074, 281, 4985, 293, 7908, 281, 4985, 13, 50978], "temperature": 0.0, "avg_logprob": -0.1263009245677661, "compression_ratio": 1.7771739130434783, "no_speech_prob": 0.0004340711166150868}, {"id": 510, "seek": 227578, "start": 2288.0600000000004, "end": 2291.1800000000003, "text": " Okay, those are mathematical functions.", "tokens": [50978, 1033, 11, 729, 366, 18894, 6828, 13, 51134], "temperature": 0.0, "avg_logprob": -0.1263009245677661, "compression_ratio": 1.7771739130434783, "no_speech_prob": 0.0004340711166150868}, {"id": 511, "seek": 227578, "start": 2291.1800000000003, "end": 2297.78, "text": " Now you can say in Java, how many functions are there from bool to unit?", "tokens": [51134, 823, 291, 393, 584, 294, 10745, 11, 577, 867, 6828, 366, 456, 490, 748, 401, 281, 4985, 30, 51464], "temperature": 0.0, "avg_logprob": -0.1263009245677661, "compression_ratio": 1.7771739130434783, "no_speech_prob": 0.0004340711166150868}, {"id": 512, "seek": 227578, "start": 2297.78, "end": 2298.5400000000004, "text": " How many?", "tokens": [51464, 1012, 867, 30, 51502], "temperature": 0.0, "avg_logprob": -0.1263009245677661, "compression_ratio": 1.7771739130434783, "no_speech_prob": 0.0004340711166150868}, {"id": 513, "seek": 227578, "start": 2298.5400000000004, "end": 2305.1400000000003, "text": " Because I can do print line, you know, of that boolean and that returns unit.", "tokens": [51502, 1436, 286, 393, 360, 4482, 1622, 11, 291, 458, 11, 295, 300, 748, 4812, 282, 293, 300, 11247, 4985, 13, 51832], "temperature": 0.0, "avg_logprob": -0.1263009245677661, "compression_ratio": 1.7771739130434783, "no_speech_prob": 0.0004340711166150868}, {"id": 514, "seek": 230514, "start": 2305.14, "end": 2312.2999999999997, "text": " I can kind of, you know, send it with an HTTP request to whatever, get it back.", "tokens": [50364, 286, 393, 733, 295, 11, 291, 458, 11, 2845, 309, 365, 364, 33283, 5308, 281, 2035, 11, 483, 309, 646, 13, 50722], "temperature": 0.0, "avg_logprob": -0.13915110125984112, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.0010175839997828007}, {"id": 515, "seek": 230514, "start": 2312.2999999999997, "end": 2313.62, "text": " That's another function.", "tokens": [50722, 663, 311, 1071, 2445, 13, 50788], "temperature": 0.0, "avg_logprob": -0.13915110125984112, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.0010175839997828007}, {"id": 516, "seek": 230514, "start": 2313.62, "end": 2316.1, "text": " I can do reflection over the boolean.", "tokens": [50788, 286, 393, 360, 12914, 670, 264, 748, 4812, 282, 13, 50912], "temperature": 0.0, "avg_logprob": -0.13915110125984112, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.0010175839997828007}, {"id": 517, "seek": 230514, "start": 2316.1, "end": 2317.98, "text": " So there's many functions.", "tokens": [50912, 407, 456, 311, 867, 6828, 13, 51006], "temperature": 0.0, "avg_logprob": -0.13915110125984112, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.0010175839997828007}, {"id": 518, "seek": 230514, "start": 2317.98, "end": 2325.98, "text": " And this is why in Java, a method, so I'm a little bit lying because a method,", "tokens": [51006, 400, 341, 307, 983, 294, 10745, 11, 257, 3170, 11, 370, 286, 478, 257, 707, 857, 8493, 570, 257, 3170, 11, 51406], "temperature": 0.0, "avg_logprob": -0.13915110125984112, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.0010175839997828007}, {"id": 519, "seek": 230514, "start": 2325.98, "end": 2332.06, "text": " you know, of bool to unit is not really a function because there can be side effects.", "tokens": [51406, 291, 458, 11, 295, 748, 401, 281, 4985, 307, 406, 534, 257, 2445, 570, 456, 393, 312, 1252, 5065, 13, 51710], "temperature": 0.0, "avg_logprob": -0.13915110125984112, "compression_ratio": 1.568075117370892, "no_speech_prob": 0.0010175839997828007}, {"id": 520, "seek": 233206, "start": 2332.06, "end": 2338.62, "text": " There's a lot of context that's hidden in Java that you can use as a programmer to kind", "tokens": [50364, 821, 311, 257, 688, 295, 4319, 300, 311, 7633, 294, 10745, 300, 291, 393, 764, 382, 257, 32116, 281, 733, 50692], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 521, "seek": 233206, "start": 2338.62, "end": 2344.94, "text": " of cheat and don't show that, you know, that doesn't show up in the signature.", "tokens": [50692, 295, 17470, 293, 500, 380, 855, 300, 11, 291, 458, 11, 300, 1177, 380, 855, 493, 294, 264, 13397, 13, 51008], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 522, "seek": 233206, "start": 2344.94, "end": 2349.54, "text": " Now, if you're, I don't know if there's any kind of, you know, fundamentalist functional", "tokens": [51008, 823, 11, 498, 291, 434, 11, 286, 500, 380, 458, 498, 456, 311, 604, 733, 295, 11, 291, 458, 11, 8088, 468, 11745, 51238], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 523, "seek": 233206, "start": 2349.54, "end": 2355.18, "text": " programmers here, people that, crazy people that like Haskell and no Haskell programmers", "tokens": [51238, 41504, 510, 11, 561, 300, 11, 3219, 561, 300, 411, 8646, 43723, 293, 572, 8646, 43723, 41504, 51520], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 524, "seek": 233206, "start": 2355.18, "end": 2357.5, "text": " here, there's one Haskell programmer.", "tokens": [51520, 510, 11, 456, 311, 472, 8646, 43723, 32116, 13, 51636], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 525, "seek": 233206, "start": 2357.5, "end": 2358.7799999999997, "text": " Now he's smiling.", "tokens": [51636, 823, 415, 311, 16005, 13, 51700], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 526, "seek": 233206, "start": 2358.7799999999997, "end": 2359.98, "text": " He says, yeah, look at that.", "tokens": [51700, 634, 1619, 11, 1338, 11, 574, 412, 300, 13, 51760], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 527, "seek": 233206, "start": 2359.98, "end": 2361.58, "text": " And Haskell, this is true.", "tokens": [51760, 400, 8646, 43723, 11, 341, 307, 2074, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1614405166271121, "compression_ratio": 1.8612244897959183, "no_speech_prob": 0.020110812038183212}, {"id": 528, "seek": 236158, "start": 2361.58, "end": 2364.58, "text": " No, then your crappy Java, right?", "tokens": [50364, 883, 11, 550, 428, 36531, 10745, 11, 558, 30, 50514], "temperature": 0.0, "avg_logprob": -0.2323671677533318, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0016803916078060865}, {"id": 529, "seek": 236158, "start": 2364.58, "end": 2369.54, "text": " Because in Haskell, Haskell functions are really mathematical functions.", "tokens": [50514, 1436, 294, 8646, 43723, 11, 8646, 43723, 6828, 366, 534, 18894, 6828, 13, 50762], "temperature": 0.0, "avg_logprob": -0.2323671677533318, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0016803916078060865}, {"id": 530, "seek": 236158, "start": 2369.54, "end": 2371.94, "text": " So everything is explicit.", "tokens": [50762, 407, 1203, 307, 13691, 13, 50882], "temperature": 0.0, "avg_logprob": -0.2323671677533318, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0016803916078060865}, {"id": 531, "seek": 236158, "start": 2371.94, "end": 2376.2999999999997, "text": " But you know, that's why, you know, what is your name?", "tokens": [50882, 583, 291, 458, 11, 300, 311, 983, 11, 291, 458, 11, 437, 307, 428, 1315, 30, 51100], "temperature": 0.0, "avg_logprob": -0.2323671677533318, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0016803916078060865}, {"id": 532, "seek": 236158, "start": 2376.2999999999997, "end": 2383.34, "text": " Oh, my goodness, even, even more complicated than Mr. generic.", "tokens": [51100, 876, 11, 452, 8387, 11, 754, 11, 754, 544, 6179, 813, 2221, 13, 19577, 13, 51452], "temperature": 0.0, "avg_logprob": -0.2323671677533318, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0016803916078060865}, {"id": 533, "seek": 236158, "start": 2383.34, "end": 2387.38, "text": " Let me call you Mr. H. Mr. H there.", "tokens": [51452, 961, 385, 818, 291, 2221, 13, 389, 13, 2221, 13, 389, 456, 13, 51654], "temperature": 0.0, "avg_logprob": -0.2323671677533318, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0016803916078060865}, {"id": 534, "seek": 238738, "start": 2387.38, "end": 2392.02, "text": " This code is like probably 10 times longer than the Java code.", "tokens": [50364, 639, 3089, 307, 411, 1391, 1266, 1413, 2854, 813, 264, 10745, 3089, 13, 50596], "temperature": 0.0, "avg_logprob": -0.16677533663236177, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.5853988528251648}, {"id": 535, "seek": 238738, "start": 2392.02, "end": 2396.42, "text": " By the time he's kind of done all his monads and whatever.", "tokens": [50596, 3146, 264, 565, 415, 311, 733, 295, 1096, 439, 702, 1108, 5834, 293, 2035, 13, 50816], "temperature": 0.0, "avg_logprob": -0.16677533663236177, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.5853988528251648}, {"id": 536, "seek": 238738, "start": 2396.42, "end": 2402.7000000000003, "text": " So, you know, again, maybe it's good to have him as a colleague, because then you can,", "tokens": [50816, 407, 11, 291, 458, 11, 797, 11, 1310, 309, 311, 665, 281, 362, 796, 382, 257, 13532, 11, 570, 550, 291, 393, 11, 51130], "temperature": 0.0, "avg_logprob": -0.16677533663236177, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.5853988528251648}, {"id": 537, "seek": 238738, "start": 2402.7000000000003, "end": 2406.7000000000003, "text": " you know, you can learn from him and then write all this code implicitly.", "tokens": [51130, 291, 458, 11, 291, 393, 1466, 490, 796, 293, 550, 2464, 439, 341, 3089, 26947, 356, 13, 51330], "temperature": 0.0, "avg_logprob": -0.16677533663236177, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.5853988528251648}, {"id": 538, "seek": 238738, "start": 2406.7000000000003, "end": 2411.26, "text": " And then he will say, oh, but I can do now my kind of monad transformer with the state", "tokens": [51330, 400, 550, 415, 486, 584, 11, 1954, 11, 457, 286, 393, 360, 586, 452, 733, 295, 1108, 345, 31782, 365, 264, 1785, 51558], "temperature": 0.0, "avg_logprob": -0.16677533663236177, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.5853988528251648}, {"id": 539, "seek": 238738, "start": 2411.26, "end": 2414.5, "text": " monad and the maybe monad and the list monad.", "tokens": [51558, 1108, 345, 293, 264, 1310, 1108, 345, 293, 264, 1329, 1108, 345, 13, 51720], "temperature": 0.0, "avg_logprob": -0.16677533663236177, "compression_ratio": 1.7078189300411524, "no_speech_prob": 0.5853988528251648}, {"id": 540, "seek": 241450, "start": 2414.5, "end": 2418.9, "text": " And by the time he has figured out how to compose all these monads, you're already here", "tokens": [50364, 400, 538, 264, 565, 415, 575, 8932, 484, 577, 281, 35925, 439, 613, 1108, 5834, 11, 291, 434, 1217, 510, 50584], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 541, "seek": 241450, "start": 2418.9, "end": 2423.9, "text": " at Foucaf\u00e9 listening to your next talk that you can put on your resume.", "tokens": [50584, 412, 479, 263, 496, 69, 526, 4764, 281, 428, 958, 751, 300, 291, 393, 829, 322, 428, 15358, 13, 50834], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 542, "seek": 241450, "start": 2423.9, "end": 2425.78, "text": " And you get ahead.", "tokens": [50834, 400, 291, 483, 2286, 13, 50928], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 543, "seek": 241450, "start": 2425.78, "end": 2427.5, "text": " Isn't that great?", "tokens": [50928, 6998, 380, 300, 869, 30, 51014], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 544, "seek": 241450, "start": 2427.5, "end": 2428.5, "text": " Okay.", "tokens": [51014, 1033, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 545, "seek": 241450, "start": 2428.5, "end": 2429.5, "text": " Good.", "tokens": [51064, 2205, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 546, "seek": 241450, "start": 2429.5, "end": 2434.98, "text": " Let's translate this into normal language.", "tokens": [51114, 961, 311, 13799, 341, 666, 2710, 2856, 13, 51388], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 547, "seek": 241450, "start": 2434.98, "end": 2440.54, "text": " Let L be a language that supports tuples, okay?", "tokens": [51388, 961, 441, 312, 257, 2856, 300, 9346, 2604, 2622, 11, 1392, 30, 51666], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 548, "seek": 241450, "start": 2440.54, "end": 2442.7, "text": " That's already a big step.", "tokens": [51666, 663, 311, 1217, 257, 955, 1823, 13, 51774], "temperature": 0.0, "avg_logprob": -0.2496091079711914, "compression_ratio": 1.4663677130044843, "no_speech_prob": 0.02187972515821457}, {"id": 549, "seek": 244270, "start": 2442.7, "end": 2448.98, "text": " And let's assume that Java has tuples and let A and B types in the language, a function", "tokens": [50364, 400, 718, 311, 6552, 300, 10745, 575, 2604, 2622, 293, 718, 316, 293, 363, 3467, 294, 264, 2856, 11, 257, 2445, 50678], "temperature": 0.0, "avg_logprob": -0.2191514774244659, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.009035727009177208}, {"id": 550, "seek": 244270, "start": 2448.98, "end": 2455.62, "text": " A, arrow B, I'm just using normal notation now, can be defined as a factory method from", "tokens": [50678, 316, 11, 11610, 363, 11, 286, 478, 445, 1228, 2710, 24657, 586, 11, 393, 312, 7642, 382, 257, 9265, 3170, 490, 51010], "temperature": 0.0, "avg_logprob": -0.2191514774244659, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.009035727009177208}, {"id": 551, "seek": 244270, "start": 2455.62, "end": 2456.62, "text": " the functor.", "tokens": [51010, 264, 1019, 1672, 13, 51060], "temperature": 0.0, "avg_logprob": -0.2191514774244659, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.009035727009177208}, {"id": 552, "seek": 244270, "start": 2456.62, "end": 2457.62, "text": " Okay.", "tokens": [51060, 1033, 13, 51110], "temperature": 0.0, "avg_logprob": -0.2191514774244659, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.009035727009177208}, {"id": 553, "seek": 244270, "start": 2457.62, "end": 2465.06, "text": " So, we're nearly there, but now I have to explain what a functor is because I've removed", "tokens": [51110, 407, 11, 321, 434, 6217, 456, 11, 457, 586, 286, 362, 281, 2903, 437, 257, 1019, 1672, 307, 570, 286, 600, 7261, 51482], "temperature": 0.0, "avg_logprob": -0.2191514774244659, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.009035727009177208}, {"id": 554, "seek": 244270, "start": 2465.06, "end": 2470.8999999999996, "text": " all the Greek and I say there's a factory method for functions.", "tokens": [51482, 439, 264, 10281, 293, 286, 584, 456, 311, 257, 9265, 3170, 337, 6828, 13, 51774], "temperature": 0.0, "avg_logprob": -0.2191514774244659, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.009035727009177208}, {"id": 555, "seek": 247090, "start": 2470.9, "end": 2476.6600000000003, "text": " But in order to do that, I need to know what a functor is.", "tokens": [50364, 583, 294, 1668, 281, 360, 300, 11, 286, 643, 281, 458, 437, 257, 1019, 1672, 307, 13, 50652], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 556, "seek": 247090, "start": 2476.6600000000003, "end": 2478.98, "text": " Now what is a functor?", "tokens": [50652, 823, 437, 307, 257, 1019, 1672, 30, 50768], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 557, "seek": 247090, "start": 2478.98, "end": 2484.42, "text": " And again, this is why most of us hate mathematics so much because I warned you that you often", "tokens": [50768, 400, 797, 11, 341, 307, 983, 881, 295, 505, 4700, 18666, 370, 709, 570, 286, 21284, 291, 300, 291, 2049, 51040], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 558, "seek": 247090, "start": 2484.42, "end": 2487.12, "text": " go into the rabbit hole, okay?", "tokens": [51040, 352, 666, 264, 19509, 5458, 11, 1392, 30, 51175], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 559, "seek": 247090, "start": 2487.12, "end": 2492.38, "text": " And now we're going into the rabbit hole a little bit because when you look up functor", "tokens": [51175, 400, 586, 321, 434, 516, 666, 264, 19509, 5458, 257, 707, 857, 570, 562, 291, 574, 493, 1019, 1672, 51438], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 560, "seek": 247090, "start": 2492.38, "end": 2495.58, "text": " on Wikipedia, it's even more Greek.", "tokens": [51438, 322, 28999, 11, 309, 311, 754, 544, 10281, 13, 51598], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 561, "seek": 247090, "start": 2495.58, "end": 2497.58, "text": " Oh my goodness.", "tokens": [51598, 876, 452, 8387, 13, 51698], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 562, "seek": 247090, "start": 2497.58, "end": 2500.42, "text": " Ah, does it ever stop?", "tokens": [51698, 2438, 11, 775, 309, 1562, 1590, 30, 51840], "temperature": 0.0, "avg_logprob": -0.21626670207452336, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.0596599355340004}, {"id": 563, "seek": 250042, "start": 2500.42, "end": 2504.78, "text": " Well, let's look at it and it's not that bad.", "tokens": [50364, 1042, 11, 718, 311, 574, 412, 309, 293, 309, 311, 406, 300, 1578, 13, 50582], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 564, "seek": 250042, "start": 2504.78, "end": 2509.1, "text": " Let C be a category, a functor, blah, blah, blah, blah, blah, blah, blah, blah, blah.", "tokens": [50582, 961, 383, 312, 257, 7719, 11, 257, 1019, 1672, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 13, 50798], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 565, "seek": 250042, "start": 2509.1, "end": 2510.1, "text": " Okay.", "tokens": [50798, 1033, 13, 50848], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 566, "seek": 250042, "start": 2510.1, "end": 2513.38, "text": " Let's translate this into normal English.", "tokens": [50848, 961, 311, 13799, 341, 666, 2710, 3669, 13, 51012], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 567, "seek": 250042, "start": 2513.38, "end": 2520.14, "text": " And now we certainly understand it because since Java 6 and it was it, when did Java", "tokens": [51012, 400, 586, 321, 3297, 1223, 309, 570, 1670, 10745, 1386, 293, 309, 390, 309, 11, 562, 630, 10745, 51350], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 568, "seek": 250042, "start": 2520.14, "end": 2521.14, "text": " get generics?", "tokens": [51350, 483, 1337, 1167, 30, 51400], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 569, "seek": 250042, "start": 2521.14, "end": 2523.14, "text": " Was it Java 5?", "tokens": [51400, 3027, 309, 10745, 1025, 30, 51500], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 570, "seek": 250042, "start": 2523.14, "end": 2524.14, "text": " Wow.", "tokens": [51500, 3153, 13, 51550], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 571, "seek": 250042, "start": 2524.14, "end": 2525.14, "text": " Look at that.", "tokens": [51550, 2053, 412, 300, 13, 51600], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 572, "seek": 250042, "start": 2525.14, "end": 2528.7000000000003, "text": " That's a long time ago.", "tokens": [51600, 663, 311, 257, 938, 565, 2057, 13, 51778], "temperature": 0.0, "avg_logprob": -0.24840467017993592, "compression_ratio": 1.6310679611650485, "no_speech_prob": 0.004530079662799835}, {"id": 573, "seek": 252870, "start": 2528.7, "end": 2532.62, "text": " The way they did it, yes.", "tokens": [50364, 440, 636, 436, 630, 309, 11, 2086, 13, 50560], "temperature": 0.0, "avg_logprob": -0.17300759292230372, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.020604170858860016}, {"id": 574, "seek": 252870, "start": 2532.62, "end": 2543.62, "text": " So here a functor is a generic type that associates with each type A, a new type, C of A. So list", "tokens": [50560, 407, 510, 257, 1019, 1672, 307, 257, 19577, 2010, 300, 36914, 365, 1184, 2010, 316, 11, 257, 777, 2010, 11, 383, 295, 316, 13, 407, 1329, 51110], "temperature": 0.0, "avg_logprob": -0.17300759292230372, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.020604170858860016}, {"id": 575, "seek": 252870, "start": 2543.62, "end": 2551.74, "text": " of T is a functor because I can instantiate it with another type, say int, sorry, integer", "tokens": [51110, 295, 314, 307, 257, 1019, 1672, 570, 286, 393, 9836, 13024, 309, 365, 1071, 2010, 11, 584, 560, 11, 2597, 11, 24922, 51516], "temperature": 0.0, "avg_logprob": -0.17300759292230372, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.020604170858860016}, {"id": 576, "seek": 252870, "start": 2551.74, "end": 2556.8199999999997, "text": " because generics in Java suck that you can only instantiate them with reference types", "tokens": [51516, 570, 1337, 1167, 294, 10745, 9967, 300, 291, 393, 787, 9836, 13024, 552, 365, 6408, 3467, 51770], "temperature": 0.0, "avg_logprob": -0.17300759292230372, "compression_ratio": 1.6519337016574585, "no_speech_prob": 0.020604170858860016}, {"id": 577, "seek": 255682, "start": 2556.82, "end": 2559.9, "text": " and not with base types.", "tokens": [50364, 293, 406, 365, 3096, 3467, 13, 50518], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 578, "seek": 255682, "start": 2559.9, "end": 2561.1400000000003, "text": " But yes.", "tokens": [50518, 583, 2086, 13, 50580], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 579, "seek": 255682, "start": 2561.1400000000003, "end": 2571.5, "text": " And then on that type, there must be a function map that goes from C of A to C of B. Now think", "tokens": [50580, 400, 550, 322, 300, 2010, 11, 456, 1633, 312, 257, 2445, 4471, 300, 1709, 490, 383, 295, 316, 281, 383, 295, 363, 13, 823, 519, 51098], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 580, "seek": 255682, "start": 2571.5, "end": 2573.7000000000003, "text": " about this.", "tokens": [51098, 466, 341, 13, 51208], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 581, "seek": 255682, "start": 2573.7000000000003, "end": 2575.5, "text": " What does this thing do?", "tokens": [51208, 708, 775, 341, 551, 360, 30, 51298], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 582, "seek": 255682, "start": 2575.5, "end": 2581.86, "text": " It says that if I go, if I can go, say from integers to string, because I have two string,", "tokens": [51298, 467, 1619, 300, 498, 286, 352, 11, 498, 286, 393, 352, 11, 584, 490, 41674, 281, 6798, 11, 570, 286, 362, 732, 6798, 11, 51616], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 583, "seek": 255682, "start": 2581.86, "end": 2586.3, "text": " right, that goes from integers, from integers to string.", "tokens": [51616, 558, 11, 300, 1709, 490, 41674, 11, 490, 41674, 281, 6798, 13, 51838], "temperature": 0.0, "avg_logprob": -0.1847869069952714, "compression_ratio": 1.710382513661202, "no_speech_prob": 0.04781249165534973}, {"id": 584, "seek": 258630, "start": 2586.3, "end": 2592.2200000000003, "text": " Now if I have a list of integers, I must be able to kind of, you know, do two string", "tokens": [50364, 823, 498, 286, 362, 257, 1329, 295, 41674, 11, 286, 1633, 312, 1075, 281, 733, 295, 11, 291, 458, 11, 360, 732, 6798, 50660], "temperature": 0.0, "avg_logprob": -0.1281266108803127, "compression_ratio": 1.6702702702702703, "no_speech_prob": 0.004856490064412355}, {"id": 585, "seek": 258630, "start": 2592.2200000000003, "end": 2595.0, "text": " on every element of that list.", "tokens": [50660, 322, 633, 4478, 295, 300, 1329, 13, 50799], "temperature": 0.0, "avg_logprob": -0.1281266108803127, "compression_ratio": 1.6702702702702703, "no_speech_prob": 0.004856490064412355}, {"id": 586, "seek": 258630, "start": 2595.0, "end": 2601.6200000000003, "text": " And that's all what this thing is saying, that if I can go from int to string, then", "tokens": [50799, 400, 300, 311, 439, 437, 341, 551, 307, 1566, 11, 300, 498, 286, 393, 352, 490, 560, 281, 6798, 11, 550, 51130], "temperature": 0.0, "avg_logprob": -0.1281266108803127, "compression_ratio": 1.6702702702702703, "no_speech_prob": 0.004856490064412355}, {"id": 587, "seek": 258630, "start": 2601.6200000000003, "end": 2608.86, "text": " I must go from list of int, oh sorry, list of int to list of string.", "tokens": [51130, 286, 1633, 352, 490, 1329, 295, 560, 11, 1954, 2597, 11, 1329, 295, 560, 281, 1329, 295, 6798, 13, 51492], "temperature": 0.0, "avg_logprob": -0.1281266108803127, "compression_ratio": 1.6702702702702703, "no_speech_prob": 0.004856490064412355}, {"id": 588, "seek": 258630, "start": 2608.86, "end": 2612.1000000000004, "text": " That is, that's quite reasonable, right?", "tokens": [51492, 663, 307, 11, 300, 311, 1596, 10585, 11, 558, 30, 51654], "temperature": 0.0, "avg_logprob": -0.1281266108803127, "compression_ratio": 1.6702702702702703, "no_speech_prob": 0.004856490064412355}, {"id": 589, "seek": 261210, "start": 2612.1, "end": 2616.7799999999997, "text": " And when we define generics, so again, here's a trick.", "tokens": [50364, 400, 562, 321, 6964, 1337, 1167, 11, 370, 797, 11, 510, 311, 257, 4282, 13, 50598], "temperature": 0.0, "avg_logprob": -0.16275096494098043, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.013633263297379017}, {"id": 590, "seek": 261210, "start": 2616.7799999999997, "end": 2624.98, "text": " Whenever your colleague defines a generic type, probably they don't specify that this", "tokens": [50598, 14159, 428, 13532, 23122, 257, 19577, 2010, 11, 1391, 436, 500, 380, 16500, 300, 341, 51008], "temperature": 0.0, "avg_logprob": -0.16275096494098043, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.013633263297379017}, {"id": 591, "seek": 261210, "start": 2624.98, "end": 2630.42, "text": " should hold, that if you have, if you instantiate that generic type with one type, you instantiate", "tokens": [51008, 820, 1797, 11, 300, 498, 291, 362, 11, 498, 291, 9836, 13024, 300, 19577, 2010, 365, 472, 2010, 11, 291, 9836, 13024, 51280], "temperature": 0.0, "avg_logprob": -0.16275096494098043, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.013633263297379017}, {"id": 592, "seek": 261210, "start": 2630.42, "end": 2634.02, "text": " with another that you have to be able to go between them.", "tokens": [51280, 365, 1071, 300, 291, 362, 281, 312, 1075, 281, 352, 1296, 552, 13, 51460], "temperature": 0.0, "avg_logprob": -0.16275096494098043, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.013633263297379017}, {"id": 593, "seek": 261210, "start": 2634.02, "end": 2637.1, "text": " Well, they should have a map function.", "tokens": [51460, 1042, 11, 436, 820, 362, 257, 4471, 2445, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16275096494098043, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.013633263297379017}, {"id": 594, "seek": 263710, "start": 2637.1, "end": 2642.9, "text": " Now the thing with this map function is that it should have some properties too.", "tokens": [50364, 823, 264, 551, 365, 341, 4471, 2445, 307, 300, 309, 820, 362, 512, 7221, 886, 13, 50654], "temperature": 0.0, "avg_logprob": -0.1417987428862473, "compression_ratio": 1.5343137254901962, "no_speech_prob": 0.07386792451143265}, {"id": 595, "seek": 263710, "start": 2642.9, "end": 2648.2599999999998, "text": " Say that, you know, I'm going from list of int to list of int.", "tokens": [50654, 6463, 300, 11, 291, 458, 11, 286, 478, 516, 490, 1329, 295, 560, 281, 1329, 295, 560, 13, 50922], "temperature": 0.0, "avg_logprob": -0.1417987428862473, "compression_ratio": 1.5343137254901962, "no_speech_prob": 0.07386792451143265}, {"id": 596, "seek": 263710, "start": 2648.2599999999998, "end": 2650.38, "text": " Well, how do I do that?", "tokens": [50922, 1042, 11, 577, 360, 286, 360, 300, 30, 51028], "temperature": 0.0, "avg_logprob": -0.1417987428862473, "compression_ratio": 1.5343137254901962, "no_speech_prob": 0.07386792451143265}, {"id": 597, "seek": 263710, "start": 2650.38, "end": 2654.2599999999998, "text": " By doing the identity function, I'm doing nothing on each element.", "tokens": [51028, 3146, 884, 264, 6575, 2445, 11, 286, 478, 884, 1825, 322, 1184, 4478, 13, 51222], "temperature": 0.0, "avg_logprob": -0.1417987428862473, "compression_ratio": 1.5343137254901962, "no_speech_prob": 0.07386792451143265}, {"id": 598, "seek": 263710, "start": 2654.2599999999998, "end": 2657.58, "text": " So that should be delivered the same value, right?", "tokens": [51222, 407, 300, 820, 312, 10144, 264, 912, 2158, 11, 558, 30, 51388], "temperature": 0.0, "avg_logprob": -0.1417987428862473, "compression_ratio": 1.5343137254901962, "no_speech_prob": 0.07386792451143265}, {"id": 599, "seek": 263710, "start": 2657.58, "end": 2659.38, "text": " That is kind of reasonable.", "tokens": [51388, 663, 307, 733, 295, 10585, 13, 51478], "temperature": 0.0, "avg_logprob": -0.1417987428862473, "compression_ratio": 1.5343137254901962, "no_speech_prob": 0.07386792451143265}, {"id": 600, "seek": 265938, "start": 2659.38, "end": 2668.1, "text": " The other thing is that if I do a map and then another map, that must be the same as", "tokens": [50364, 440, 661, 551, 307, 300, 498, 286, 360, 257, 4471, 293, 550, 1071, 4471, 11, 300, 1633, 312, 264, 912, 382, 50800], "temperature": 0.0, "avg_logprob": -0.11529181003570557, "compression_ratio": 1.6737967914438503, "no_speech_prob": 0.042146436870098114}, {"id": 601, "seek": 265938, "start": 2668.1, "end": 2673.5, "text": " doing the map with these functions combined, okay?", "tokens": [50800, 884, 264, 4471, 365, 613, 6828, 9354, 11, 1392, 30, 51070], "temperature": 0.0, "avg_logprob": -0.11529181003570557, "compression_ratio": 1.6737967914438503, "no_speech_prob": 0.042146436870098114}, {"id": 602, "seek": 265938, "start": 2673.5, "end": 2679.1800000000003, "text": " And this is like an optimization trick, because instead of taking a list of int, going into", "tokens": [51070, 400, 341, 307, 411, 364, 19618, 4282, 11, 570, 2602, 295, 1940, 257, 1329, 295, 560, 11, 516, 666, 51354], "temperature": 0.0, "avg_logprob": -0.11529181003570557, "compression_ratio": 1.6737967914438503, "no_speech_prob": 0.042146436870098114}, {"id": 603, "seek": 265938, "start": 2679.1800000000003, "end": 2684.1400000000003, "text": " a list of string, and then say taking the length of the string, so now getting a list", "tokens": [51354, 257, 1329, 295, 6798, 11, 293, 550, 584, 1940, 264, 4641, 295, 264, 6798, 11, 370, 586, 1242, 257, 1329, 51602], "temperature": 0.0, "avg_logprob": -0.11529181003570557, "compression_ratio": 1.6737967914438503, "no_speech_prob": 0.042146436870098114}, {"id": 604, "seek": 268414, "start": 2684.14, "end": 2690.62, "text": " of int again, I don't have to build that intermediate list, because then I can just map this function", "tokens": [50364, 295, 560, 797, 11, 286, 500, 380, 362, 281, 1322, 300, 19376, 1329, 11, 570, 550, 286, 393, 445, 4471, 341, 2445, 50688], "temperature": 0.0, "avg_logprob": -0.12975008147103445, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.01608368754386902}, {"id": 605, "seek": 268414, "start": 2690.62, "end": 2691.98, "text": " over that list.", "tokens": [50688, 670, 300, 1329, 13, 50756], "temperature": 0.0, "avg_logprob": -0.12975008147103445, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.01608368754386902}, {"id": 606, "seek": 268414, "start": 2691.98, "end": 2699.46, "text": " So these category theorists also are efficiency freaks, because they say that this map must", "tokens": [50756, 407, 613, 7719, 27423, 1751, 611, 366, 10493, 2130, 5461, 11, 570, 436, 584, 300, 341, 4471, 1633, 51130], "temperature": 0.0, "avg_logprob": -0.12975008147103445, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.01608368754386902}, {"id": 607, "seek": 268414, "start": 2699.46, "end": 2704.3799999999997, "text": " have these properties so that they can optimize their code, okay?", "tokens": [51130, 362, 613, 7221, 370, 300, 436, 393, 19719, 641, 3089, 11, 1392, 30, 51376], "temperature": 0.0, "avg_logprob": -0.12975008147103445, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.01608368754386902}, {"id": 608, "seek": 268414, "start": 2704.3799999999997, "end": 2712.66, "text": " So a functor is just a generic function that has a map operator.", "tokens": [51376, 407, 257, 1019, 1672, 307, 445, 257, 19577, 2445, 300, 575, 257, 4471, 12973, 13, 51790], "temperature": 0.0, "avg_logprob": -0.12975008147103445, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.01608368754386902}, {"id": 609, "seek": 271266, "start": 2712.66, "end": 2721.46, "text": " Now, in normal Java generics, most functions, most types, most generic types, don't come", "tokens": [50364, 823, 11, 294, 2710, 10745, 1337, 1167, 11, 881, 6828, 11, 881, 3467, 11, 881, 19577, 3467, 11, 500, 380, 808, 50804], "temperature": 0.0, "avg_logprob": -0.1734892820057116, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.015561328269541264}, {"id": 610, "seek": 271266, "start": 2721.46, "end": 2722.46, "text": " with a map.", "tokens": [50804, 365, 257, 4471, 13, 50854], "temperature": 0.0, "avg_logprob": -0.1734892820057116, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.015561328269541264}, {"id": 611, "seek": 271266, "start": 2722.46, "end": 2729.58, "text": " Finally, in Java 8, when they introduce streams, streams have a map function.", "tokens": [50854, 6288, 11, 294, 10745, 1649, 11, 562, 436, 5366, 15842, 11, 15842, 362, 257, 4471, 2445, 13, 51210], "temperature": 0.0, "avg_logprob": -0.1734892820057116, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.015561328269541264}, {"id": 612, "seek": 271266, "start": 2729.58, "end": 2732.74, "text": " You can go check now.", "tokens": [51210, 509, 393, 352, 1520, 586, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1734892820057116, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.015561328269541264}, {"id": 613, "seek": 271266, "start": 2732.74, "end": 2736.8199999999997, "text": " If you Google Java 8 streams, you will see there's a map function.", "tokens": [51368, 759, 291, 3329, 10745, 1649, 15842, 11, 291, 486, 536, 456, 311, 257, 4471, 2445, 13, 51572], "temperature": 0.0, "avg_logprob": -0.1734892820057116, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.015561328269541264}, {"id": 614, "seek": 273682, "start": 2736.82, "end": 2747.6200000000003, "text": " So finally, after like decades and decades, sorry, 20 years of Java and finally, you know,", "tokens": [50364, 407, 2721, 11, 934, 411, 7878, 293, 7878, 11, 2597, 11, 945, 924, 295, 10745, 293, 2721, 11, 291, 458, 11, 50904], "temperature": 0.0, "avg_logprob": -0.18683867984347874, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.04231106862425804}, {"id": 615, "seek": 273682, "start": 2747.6200000000003, "end": 2752.7000000000003, "text": " they have map, whereas if they would have listened to the mathematicians, when they", "tokens": [50904, 436, 362, 4471, 11, 9735, 498, 436, 576, 362, 13207, 281, 264, 32811, 2567, 11, 562, 436, 51158], "temperature": 0.0, "avg_logprob": -0.18683867984347874, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.04231106862425804}, {"id": 616, "seek": 273682, "start": 2752.7000000000003, "end": 2758.6200000000003, "text": " designed generics, that should have been built in, because, you know, that gives you again,", "tokens": [51158, 4761, 1337, 1167, 11, 300, 820, 362, 668, 3094, 294, 11, 570, 11, 291, 458, 11, 300, 2709, 291, 797, 11, 51454], "temperature": 0.0, "avg_logprob": -0.18683867984347874, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.04231106862425804}, {"id": 617, "seek": 273682, "start": 2758.6200000000003, "end": 2763.6600000000003, "text": " that is this thing where, you know, a type doesn't come by itself, it comes with properties", "tokens": [51454, 300, 307, 341, 551, 689, 11, 291, 458, 11, 257, 2010, 1177, 380, 808, 538, 2564, 11, 309, 1487, 365, 7221, 51706], "temperature": 0.0, "avg_logprob": -0.18683867984347874, "compression_ratio": 1.6966824644549763, "no_speech_prob": 0.04231106862425804}, {"id": 618, "seek": 276366, "start": 2763.66, "end": 2765.8999999999996, "text": " that it should satisfy.", "tokens": [50364, 300, 309, 820, 19319, 13, 50476], "temperature": 0.0, "avg_logprob": -0.21727789264835723, "compression_ratio": 1.4911242603550297, "no_speech_prob": 0.18953393399715424}, {"id": 619, "seek": 276366, "start": 2765.8999999999996, "end": 2769.06, "text": " Okay, hey, great.", "tokens": [50476, 1033, 11, 4177, 11, 869, 13, 50634], "temperature": 0.0, "avg_logprob": -0.21727789264835723, "compression_ratio": 1.4911242603550297, "no_speech_prob": 0.18953393399715424}, {"id": 620, "seek": 276366, "start": 2769.06, "end": 2775.5, "text": " Now we know what a functor is.", "tokens": [50634, 823, 321, 458, 437, 257, 1019, 1672, 307, 13, 50956], "temperature": 0.0, "avg_logprob": -0.21727789264835723, "compression_ratio": 1.4911242603550297, "no_speech_prob": 0.18953393399715424}, {"id": 621, "seek": 276366, "start": 2775.5, "end": 2784.94, "text": " Now the other thing, if there's category theorists here in the room, I have to be a little bit", "tokens": [50956, 823, 264, 661, 551, 11, 498, 456, 311, 7719, 27423, 1751, 510, 294, 264, 1808, 11, 286, 362, 281, 312, 257, 707, 857, 51428], "temperature": 0.0, "avg_logprob": -0.21727789264835723, "compression_ratio": 1.4911242603550297, "no_speech_prob": 0.18953393399715424}, {"id": 622, "seek": 276366, "start": 2784.94, "end": 2791.1, "text": " careful, because what I said is a category was a programming language, and a functor", "tokens": [51428, 5026, 11, 570, 437, 286, 848, 307, 257, 7719, 390, 257, 9410, 2856, 11, 293, 257, 1019, 1672, 51736], "temperature": 0.0, "avg_logprob": -0.21727789264835723, "compression_ratio": 1.4911242603550297, "no_speech_prob": 0.18953393399715424}, {"id": 623, "seek": 279110, "start": 2791.1, "end": 2795.86, "text": " is really something that kind of goes between two categories.", "tokens": [50364, 307, 534, 746, 300, 733, 295, 1709, 1296, 732, 10479, 13, 50602], "temperature": 0.0, "avg_logprob": -0.1077680914369348, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.025542527437210083}, {"id": 624, "seek": 279110, "start": 2795.86, "end": 2801.18, "text": " So a functor can go between two programming languages.", "tokens": [50602, 407, 257, 1019, 1672, 393, 352, 1296, 732, 9410, 8650, 13, 50868], "temperature": 0.0, "avg_logprob": -0.1077680914369348, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.025542527437210083}, {"id": 625, "seek": 279110, "start": 2801.18, "end": 2812.7, "text": " For example, if you have a Java array and a small talk array, then one starts indexing", "tokens": [50868, 1171, 1365, 11, 498, 291, 362, 257, 10745, 10225, 293, 257, 1359, 751, 10225, 11, 550, 472, 3719, 8186, 278, 51444], "temperature": 0.0, "avg_logprob": -0.1077680914369348, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.025542527437210083}, {"id": 626, "seek": 279110, "start": 2812.7, "end": 2819.1, "text": " at zero, the other start indexing at one, and now say that I have a method on arrays", "tokens": [51444, 412, 4018, 11, 264, 661, 722, 8186, 278, 412, 472, 11, 293, 586, 584, 300, 286, 362, 257, 3170, 322, 41011, 51764], "temperature": 0.0, "avg_logprob": -0.1077680914369348, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.025542527437210083}, {"id": 627, "seek": 281910, "start": 2819.1, "end": 2826.8199999999997, "text": " that sums up the values, when I go from Java to small talk, I have to adjust that sum function", "tokens": [50364, 300, 34499, 493, 264, 4190, 11, 562, 286, 352, 490, 10745, 281, 1359, 751, 11, 286, 362, 281, 4369, 300, 2408, 2445, 50750], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 628, "seek": 281910, "start": 2826.8199999999997, "end": 2829.3399999999997, "text": " to start kind of indexing at one.", "tokens": [50750, 281, 722, 733, 295, 8186, 278, 412, 472, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 629, "seek": 281910, "start": 2829.3399999999997, "end": 2832.18, "text": " Okay, that's another example of a functor.", "tokens": [50876, 1033, 11, 300, 311, 1071, 1365, 295, 257, 1019, 1672, 13, 51018], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 630, "seek": 281910, "start": 2832.18, "end": 2835.02, "text": " But for today, we're only looking at endo functors.", "tokens": [51018, 583, 337, 965, 11, 321, 434, 787, 1237, 412, 917, 78, 1019, 5547, 13, 51160], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 631, "seek": 281910, "start": 2835.02, "end": 2837.7799999999997, "text": " Ah, doesn't that sound cool?", "tokens": [51160, 2438, 11, 1177, 380, 300, 1626, 1627, 30, 51298], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 632, "seek": 281910, "start": 2837.7799999999997, "end": 2842.74, "text": " Endo functors, but an endo functor just means that it stays within one language, it doesn't", "tokens": [51298, 6967, 78, 1019, 5547, 11, 457, 364, 917, 78, 1019, 1672, 445, 1355, 300, 309, 10834, 1951, 472, 2856, 11, 309, 1177, 380, 51546], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 633, "seek": 281910, "start": 2842.74, "end": 2846.06, "text": " go between two languages.", "tokens": [51546, 352, 1296, 732, 8650, 13, 51712], "temperature": 0.0, "avg_logprob": -0.2217325457820186, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.037908490747213364}, {"id": 634, "seek": 284606, "start": 2846.38, "end": 2850.42, "text": " Okay, good.", "tokens": [50380, 1033, 11, 665, 13, 50582], "temperature": 0.0, "avg_logprob": -0.2165360927581787, "compression_ratio": 1.3533333333333333, "no_speech_prob": 0.01088345143944025}, {"id": 635, "seek": 284606, "start": 2850.42, "end": 2855.46, "text": " So this is the Greek decoded.", "tokens": [50582, 407, 341, 307, 264, 10281, 979, 12340, 13, 50834], "temperature": 0.0, "avg_logprob": -0.2165360927581787, "compression_ratio": 1.3533333333333333, "no_speech_prob": 0.01088345143944025}, {"id": 636, "seek": 284606, "start": 2855.46, "end": 2864.42, "text": " Now I've cheated a little bit already, because in here, you will see when I defined map,", "tokens": [50834, 823, 286, 600, 28079, 257, 707, 857, 1217, 11, 570, 294, 510, 11, 291, 486, 536, 562, 286, 7642, 4471, 11, 51282], "temperature": 0.0, "avg_logprob": -0.2165360927581787, "compression_ratio": 1.3533333333333333, "no_speech_prob": 0.01088345143944025}, {"id": 637, "seek": 284606, "start": 2864.42, "end": 2871.7799999999997, "text": " I already used the fact that I have a function that I can pass into map.", "tokens": [51282, 286, 1217, 1143, 264, 1186, 300, 286, 362, 257, 2445, 300, 286, 393, 1320, 666, 4471, 13, 51650], "temperature": 0.0, "avg_logprob": -0.2165360927581787, "compression_ratio": 1.3533333333333333, "no_speech_prob": 0.01088345143944025}, {"id": 638, "seek": 287178, "start": 2871.78, "end": 2876.7400000000002, "text": " But before Java 8, you couldn't do that, right?", "tokens": [50364, 583, 949, 10745, 1649, 11, 291, 2809, 380, 360, 300, 11, 558, 30, 50612], "temperature": 0.0, "avg_logprob": -0.16325729370117187, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.08556508272886276}, {"id": 639, "seek": 287178, "start": 2876.7400000000002, "end": 2881.2200000000003, "text": " Because there were no functional, there were no lambdas, so you could not even define map.", "tokens": [50612, 1436, 456, 645, 572, 11745, 11, 456, 645, 572, 10097, 27476, 11, 370, 291, 727, 406, 754, 6964, 4471, 13, 50836], "temperature": 0.0, "avg_logprob": -0.16325729370117187, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.08556508272886276}, {"id": 640, "seek": 287178, "start": 2881.2200000000003, "end": 2887.78, "text": " So we had to wait until Java 8 in order to have functions such that we can define map.", "tokens": [50836, 407, 321, 632, 281, 1699, 1826, 10745, 1649, 294, 1668, 281, 362, 6828, 1270, 300, 321, 393, 6964, 4471, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16325729370117187, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.08556508272886276}, {"id": 641, "seek": 287178, "start": 2887.78, "end": 2892.6600000000003, "text": " But we're not there yet, because we were trying to kind of come up with how do I represent", "tokens": [51164, 583, 321, 434, 406, 456, 1939, 11, 570, 321, 645, 1382, 281, 733, 295, 808, 493, 365, 577, 360, 286, 2906, 51408], "temperature": 0.0, "avg_logprob": -0.16325729370117187, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.08556508272886276}, {"id": 642, "seek": 287178, "start": 2892.6600000000003, "end": 2897.1400000000003, "text": " methods as first-class objects, how do I do lambdas?", "tokens": [51408, 7150, 382, 700, 12, 11665, 6565, 11, 577, 360, 286, 360, 10097, 27476, 30, 51632], "temperature": 0.0, "avg_logprob": -0.16325729370117187, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.08556508272886276}, {"id": 643, "seek": 289714, "start": 2897.14, "end": 2908.3799999999997, "text": " Okay, and lambdas reminds me, Eric, yes, that's what exponentials are for.", "tokens": [50364, 1033, 11, 293, 10097, 27476, 12025, 385, 11, 9336, 11, 2086, 11, 300, 311, 437, 21510, 82, 366, 337, 13, 50926], "temperature": 0.0, "avg_logprob": -0.2697872320810954, "compression_ratio": 1.5746268656716418, "no_speech_prob": 0.0019328966736793518}, {"id": 644, "seek": 289714, "start": 2908.3799999999997, "end": 2910.46, "text": " Okay, let's go there.", "tokens": [50926, 1033, 11, 718, 311, 352, 456, 13, 51030], "temperature": 0.0, "avg_logprob": -0.2697872320810954, "compression_ratio": 1.5746268656716418, "no_speech_prob": 0.0019328966736793518}, {"id": 645, "seek": 289714, "start": 2910.46, "end": 2913.7, "text": " Okay, here was the Greek.", "tokens": [51030, 1033, 11, 510, 390, 264, 10281, 13, 51192], "temperature": 0.0, "avg_logprob": -0.2697872320810954, "compression_ratio": 1.5746268656716418, "no_speech_prob": 0.0019328966736793518}, {"id": 646, "seek": 289714, "start": 2913.7, "end": 2922.02, "text": " Okay, blah, blah, blah, there's this object, there's a morphism, eval, blah, blah, blah.", "tokens": [51192, 1033, 11, 12288, 11, 12288, 11, 12288, 11, 456, 311, 341, 2657, 11, 456, 311, 257, 25778, 1434, 11, 1073, 304, 11, 12288, 11, 12288, 11, 12288, 13, 51608], "temperature": 0.0, "avg_logprob": -0.2697872320810954, "compression_ratio": 1.5746268656716418, "no_speech_prob": 0.0019328966736793518}, {"id": 647, "seek": 292202, "start": 2922.02, "end": 2929.58, "text": " Okay, now then this diagram has to commute, and there we see our lambdas, so we're getting", "tokens": [50364, 1033, 11, 586, 550, 341, 10686, 575, 281, 36750, 11, 293, 456, 321, 536, 527, 10097, 27476, 11, 370, 321, 434, 1242, 50742], "temperature": 0.0, "avg_logprob": -0.23232633760660001, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.009853019379079342}, {"id": 648, "seek": 292202, "start": 2929.58, "end": 2930.58, "text": " close.", "tokens": [50742, 1998, 13, 50792], "temperature": 0.0, "avg_logprob": -0.23232633760660001, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.009853019379079342}, {"id": 649, "seek": 292202, "start": 2930.58, "end": 2937.74, "text": " So let's turn this into reality.", "tokens": [50792, 407, 718, 311, 1261, 341, 666, 4103, 13, 51150], "temperature": 0.0, "avg_logprob": -0.23232633760660001, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.009853019379079342}, {"id": 650, "seek": 292202, "start": 2937.74, "end": 2944.2599999999998, "text": " And of course, church, or this is Haskell B. Curry, will say, oh, but this is currying", "tokens": [51150, 400, 295, 1164, 11, 4128, 11, 420, 341, 307, 8646, 43723, 363, 13, 34789, 11, 486, 584, 11, 1954, 11, 457, 341, 307, 18123, 278, 51476], "temperature": 0.0, "avg_logprob": -0.23232633760660001, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.009853019379079342}, {"id": 651, "seek": 292202, "start": 2944.2599999999998, "end": 2945.2599999999998, "text": " in Haskell.", "tokens": [51476, 294, 8646, 43723, 13, 51526], "temperature": 0.0, "avg_logprob": -0.23232633760660001, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.009853019379079342}, {"id": 652, "seek": 292202, "start": 2945.2599999999998, "end": 2950.7, "text": " If you look here, you know, what this is doing here, this is called eval, blah, blah, blah.", "tokens": [51526, 759, 291, 574, 510, 11, 291, 458, 11, 437, 341, 307, 884, 510, 11, 341, 307, 1219, 1073, 304, 11, 12288, 11, 12288, 11, 12288, 13, 51798], "temperature": 0.0, "avg_logprob": -0.23232633760660001, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.009853019379079342}, {"id": 653, "seek": 295070, "start": 2950.7, "end": 2958.5, "text": " It's just currying, and Mr. H has seen this already, and he thought, yeah, when did I", "tokens": [50364, 467, 311, 445, 18123, 278, 11, 293, 2221, 13, 389, 575, 1612, 341, 1217, 11, 293, 415, 1194, 11, 1338, 11, 562, 630, 286, 50754], "temperature": 0.0, "avg_logprob": -0.20445974882658538, "compression_ratio": 1.6347826086956523, "no_speech_prob": 0.3101518154144287}, {"id": 654, "seek": 295070, "start": 2958.5, "end": 2963.62, "text": " start doing Haskell in 1986, when did Haskell want to come out?", "tokens": [50754, 722, 884, 8646, 43723, 294, 27895, 11, 562, 630, 8646, 43723, 528, 281, 808, 484, 30, 51010], "temperature": 0.0, "avg_logprob": -0.20445974882658538, "compression_ratio": 1.6347826086956523, "no_speech_prob": 0.3101518154144287}, {"id": 655, "seek": 295070, "start": 2963.62, "end": 2969.14, "text": " I already did currying, and all you Java guys can only do it in Java 8.", "tokens": [51010, 286, 1217, 630, 18123, 278, 11, 293, 439, 291, 10745, 1074, 393, 787, 360, 309, 294, 10745, 1649, 13, 51286], "temperature": 0.0, "avg_logprob": -0.20445974882658538, "compression_ratio": 1.6347826086956523, "no_speech_prob": 0.3101518154144287}, {"id": 656, "seek": 295070, "start": 2969.14, "end": 2972.3399999999997, "text": " And most of you, oh, most of you were on Java 8.", "tokens": [51286, 400, 881, 295, 291, 11, 1954, 11, 881, 295, 291, 645, 322, 10745, 1649, 13, 51446], "temperature": 0.0, "avg_logprob": -0.20445974882658538, "compression_ratio": 1.6347826086956523, "no_speech_prob": 0.3101518154144287}, {"id": 657, "seek": 295070, "start": 2972.3399999999997, "end": 2976.54, "text": " This is very progressive, because I know a lot of companies that are still doing Java", "tokens": [51446, 639, 307, 588, 16131, 11, 570, 286, 458, 257, 688, 295, 3431, 300, 366, 920, 884, 10745, 51656], "temperature": 0.0, "avg_logprob": -0.20445974882658538, "compression_ratio": 1.6347826086956523, "no_speech_prob": 0.3101518154144287}, {"id": 658, "seek": 295070, "start": 2976.54, "end": 2979.02, "text": " 6 most of the time.", "tokens": [51656, 1386, 881, 295, 264, 565, 13, 51780], "temperature": 0.0, "avg_logprob": -0.20445974882658538, "compression_ratio": 1.6347826086956523, "no_speech_prob": 0.3101518154144287}, {"id": 659, "seek": 297902, "start": 2979.38, "end": 2986.18, "text": " Okay, now here's, you're not Danish, I'm going to go to insult you.", "tokens": [50382, 1033, 11, 586, 510, 311, 11, 291, 434, 406, 36944, 11, 286, 478, 516, 281, 352, 281, 15285, 291, 13, 50722], "temperature": 0.0, "avg_logprob": -0.255164535952286, "compression_ratio": 1.3705882352941177, "no_speech_prob": 0.027501355856657028}, {"id": 660, "seek": 297902, "start": 2986.18, "end": 3000.34, "text": " But here is Mr. C++, and he's a smart guy, because in 1979, somewhere, you know, you", "tokens": [50722, 583, 510, 307, 2221, 13, 383, 25472, 11, 293, 415, 311, 257, 4069, 2146, 11, 570, 294, 30595, 11, 4079, 11, 291, 458, 11, 291, 51430], "temperature": 0.0, "avg_logprob": -0.255164535952286, "compression_ratio": 1.3705882352941177, "no_speech_prob": 0.027501355856657028}, {"id": 661, "seek": 297902, "start": 3000.34, "end": 3006.5, "text": " can find that on the web, he explained that there are no instance methods, okay?", "tokens": [51430, 393, 915, 300, 322, 264, 3670, 11, 415, 8825, 300, 456, 366, 572, 5197, 7150, 11, 1392, 30, 51738], "temperature": 0.0, "avg_logprob": -0.255164535952286, "compression_ratio": 1.3705882352941177, "no_speech_prob": 0.027501355856657028}, {"id": 662, "seek": 300650, "start": 3006.5, "end": 3011.86, "text": " An instance method is just a static method that takes the dispointer as an additional", "tokens": [50364, 1107, 5197, 3170, 307, 445, 257, 13437, 3170, 300, 2516, 264, 717, 2259, 5106, 382, 364, 4497, 50632], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 663, "seek": 300650, "start": 3011.86, "end": 3012.86, "text": " argument.", "tokens": [50632, 6770, 13, 50682], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 664, "seek": 300650, "start": 3012.86, "end": 3017.7, "text": " As I remembered it in the beginning, I said, we're only looking at morphisms as static", "tokens": [50682, 1018, 286, 13745, 309, 294, 264, 2863, 11, 286, 848, 11, 321, 434, 787, 1237, 412, 25778, 13539, 382, 13437, 50924], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 665, "seek": 300650, "start": 3017.7, "end": 3018.7, "text": " methods.", "tokens": [50924, 7150, 13, 50974], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 666, "seek": 300650, "start": 3018.7, "end": 3021.46, "text": " I'm going to ignore instance methods.", "tokens": [50974, 286, 478, 516, 281, 11200, 5197, 7150, 13, 51112], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 667, "seek": 300650, "start": 3021.46, "end": 3023.7, "text": " It's because Bjarne told me so.", "tokens": [51112, 467, 311, 570, 363, 10150, 716, 1907, 385, 370, 13, 51224], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 668, "seek": 300650, "start": 3023.7, "end": 3028.7, "text": " Bjarne told me it's safe to ignore instance methods.", "tokens": [51224, 363, 10150, 716, 1907, 385, 309, 311, 3273, 281, 11200, 5197, 7150, 13, 51474], "temperature": 0.0, "avg_logprob": -0.24257898330688477, "compression_ratio": 1.7541899441340782, "no_speech_prob": 0.13865064084529877}, {"id": 669, "seek": 302870, "start": 3028.7, "end": 3039.58, "text": " So an instance method is just a morphism from the tuple of the disk parameter and the other", "tokens": [50364, 407, 364, 5197, 3170, 307, 445, 257, 25778, 1434, 490, 264, 2604, 781, 295, 264, 12355, 13075, 293, 264, 661, 50908], "temperature": 0.0, "avg_logprob": -0.26489862714494977, "compression_ratio": 1.3975903614457832, "no_speech_prob": 0.01589813083410263}, {"id": 670, "seek": 302870, "start": 3039.58, "end": 3041.7, "text": " parameter and returns a value.", "tokens": [50908, 13075, 293, 11247, 257, 2158, 13, 51014], "temperature": 0.0, "avg_logprob": -0.26489862714494977, "compression_ratio": 1.3975903614457832, "no_speech_prob": 0.01589813083410263}, {"id": 671, "seek": 302870, "start": 3041.7, "end": 3044.8999999999996, "text": " Okay, so that's where the tuples come in.", "tokens": [51014, 1033, 11, 370, 300, 311, 689, 264, 2604, 2622, 808, 294, 13, 51174], "temperature": 0.0, "avg_logprob": -0.26489862714494977, "compression_ratio": 1.3975903614457832, "no_speech_prob": 0.01589813083410263}, {"id": 672, "seek": 302870, "start": 3044.8999999999996, "end": 3047.4199999999996, "text": " And guess what?", "tokens": [51174, 400, 2041, 437, 30, 51300], "temperature": 0.0, "avg_logprob": -0.26489862714494977, "compression_ratio": 1.3975903614457832, "no_speech_prob": 0.01589813083410263}, {"id": 673, "seek": 302870, "start": 3047.4199999999996, "end": 3050.5, "text": " Even C++ is lambdas these days.", "tokens": [51300, 2754, 383, 25472, 307, 10097, 27476, 613, 1708, 13, 51454], "temperature": 0.0, "avg_logprob": -0.26489862714494977, "compression_ratio": 1.3975903614457832, "no_speech_prob": 0.01589813083410263}, {"id": 674, "seek": 302870, "start": 3050.5, "end": 3052.3399999999997, "text": " Isn't this amazing?", "tokens": [51454, 6998, 380, 341, 2243, 30, 51546], "temperature": 0.0, "avg_logprob": -0.26489862714494977, "compression_ratio": 1.3975903614457832, "no_speech_prob": 0.01589813083410263}, {"id": 675, "seek": 305234, "start": 3052.34, "end": 3058.7000000000003, "text": " Here I don't think there's any kind of programming languages out there anymore that we all use", "tokens": [50364, 1692, 286, 500, 380, 519, 456, 311, 604, 733, 295, 9410, 8650, 484, 456, 3602, 300, 321, 439, 764, 50682], "temperature": 0.0, "avg_logprob": -0.1653070764227228, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.10843904316425323}, {"id": 676, "seek": 305234, "start": 3058.7000000000003, "end": 3061.2200000000003, "text": " that don't have lambdas.", "tokens": [50682, 300, 500, 380, 362, 10097, 27476, 13, 50808], "temperature": 0.0, "avg_logprob": -0.1653070764227228, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.10843904316425323}, {"id": 677, "seek": 305234, "start": 3061.2200000000003, "end": 3065.7000000000003, "text": " But it took many, many decades, and why is that?", "tokens": [50808, 583, 309, 1890, 867, 11, 867, 7878, 11, 293, 983, 307, 300, 30, 51032], "temperature": 0.0, "avg_logprob": -0.1653070764227228, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.10843904316425323}, {"id": 678, "seek": 305234, "start": 3065.7000000000003, "end": 3068.1400000000003, "text": " Because we didn't listen to the mathematicians.", "tokens": [51032, 1436, 321, 994, 380, 2140, 281, 264, 32811, 2567, 13, 51154], "temperature": 0.0, "avg_logprob": -0.1653070764227228, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.10843904316425323}, {"id": 679, "seek": 305234, "start": 3068.1400000000003, "end": 3075.02, "text": " All right, now it might be the case that in C++ that Bjarne says, you know, there are", "tokens": [51154, 1057, 558, 11, 586, 309, 1062, 312, 264, 1389, 300, 294, 383, 25472, 300, 363, 10150, 716, 1619, 11, 291, 458, 11, 456, 366, 51498], "temperature": 0.0, "avg_logprob": -0.1653070764227228, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.10843904316425323}, {"id": 680, "seek": 305234, "start": 3075.02, "end": 3077.6200000000003, "text": " no instance methods.", "tokens": [51498, 572, 5197, 7150, 13, 51628], "temperature": 0.0, "avg_logprob": -0.1653070764227228, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.10843904316425323}, {"id": 681, "seek": 307762, "start": 3077.62, "end": 3087.2599999999998, "text": " But let's check what Java has to say.", "tokens": [50364, 583, 718, 311, 1520, 437, 10745, 575, 281, 584, 13, 50846], "temperature": 0.0, "avg_logprob": -0.17718535750659545, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.013769105076789856}, {"id": 682, "seek": 307762, "start": 3087.2599999999998, "end": 3093.66, "text": " So if you want to have an even more boring document than the Java language specification,", "tokens": [50846, 407, 498, 291, 528, 281, 362, 364, 754, 544, 9989, 4166, 813, 264, 10745, 2856, 31256, 11, 51166], "temperature": 0.0, "avg_logprob": -0.17718535750659545, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.013769105076789856}, {"id": 683, "seek": 307762, "start": 3093.66, "end": 3098.98, "text": " you should read the Java virtual machine specification, okay?", "tokens": [51166, 291, 820, 1401, 264, 10745, 6374, 3479, 31256, 11, 1392, 30, 51432], "temperature": 0.0, "avg_logprob": -0.17718535750659545, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.013769105076789856}, {"id": 684, "seek": 307762, "start": 3098.98, "end": 3106.8199999999997, "text": " But in the Java virtual machine specification, if you browse around a little bit and it says,", "tokens": [51432, 583, 294, 264, 10745, 6374, 3479, 31256, 11, 498, 291, 31442, 926, 257, 707, 857, 293, 309, 1619, 11, 51824], "temperature": 0.0, "avg_logprob": -0.17718535750659545, "compression_ratio": 1.6745562130177514, "no_speech_prob": 0.013769105076789856}, {"id": 685, "seek": 310682, "start": 3106.82, "end": 3115.3, "text": " when you call a class method or an instance method here, local variable zero, they start", "tokens": [50364, 562, 291, 818, 257, 1508, 3170, 420, 364, 5197, 3170, 510, 11, 2654, 7006, 4018, 11, 436, 722, 50788], "temperature": 0.0, "avg_logprob": -0.2301168686304337, "compression_ratio": 1.6927083333333333, "no_speech_prob": 0.021756689995527267}, {"id": 686, "seek": 310682, "start": 3115.3, "end": 3123.54, "text": " to count at zero, good boys, okay, is always passed to an object that represents the instance,", "tokens": [50788, 281, 1207, 412, 4018, 11, 665, 6347, 11, 1392, 11, 307, 1009, 4678, 281, 364, 2657, 300, 8855, 264, 5197, 11, 51200], "temperature": 0.0, "avg_logprob": -0.2301168686304337, "compression_ratio": 1.6927083333333333, "no_speech_prob": 0.021756689995527267}, {"id": 687, "seek": 310682, "start": 3123.54, "end": 3125.1000000000004, "text": " okay?", "tokens": [51200, 1392, 30, 51278], "temperature": 0.0, "avg_logprob": -0.2301168686304337, "compression_ratio": 1.6927083333333333, "no_speech_prob": 0.021756689995527267}, {"id": 688, "seek": 310682, "start": 3125.1000000000004, "end": 3130.86, "text": " And the subsequent parameters are passed in subsequent local variables starting at one.", "tokens": [51278, 400, 264, 19962, 9834, 366, 4678, 294, 19962, 2654, 9102, 2891, 412, 472, 13, 51566], "temperature": 0.0, "avg_logprob": -0.2301168686304337, "compression_ratio": 1.6927083333333333, "no_speech_prob": 0.021756689995527267}, {"id": 689, "seek": 310682, "start": 3130.86, "end": 3135.7400000000002, "text": " So also in Java, there are no instance methods.", "tokens": [51566, 407, 611, 294, 10745, 11, 456, 366, 572, 5197, 7150, 13, 51810], "temperature": 0.0, "avg_logprob": -0.2301168686304337, "compression_ratio": 1.6927083333333333, "no_speech_prob": 0.021756689995527267}, {"id": 690, "seek": 313574, "start": 3135.74, "end": 3143.4399999999996, "text": " It's just a static method where the first parameter with index zero is the disk, okay?", "tokens": [50364, 467, 311, 445, 257, 13437, 3170, 689, 264, 700, 13075, 365, 8186, 4018, 307, 264, 12355, 11, 1392, 30, 50749], "temperature": 0.0, "avg_logprob": -0.1810191926502046, "compression_ratio": 1.5406698564593302, "no_speech_prob": 0.046872127801179886}, {"id": 691, "seek": 313574, "start": 3143.4399999999996, "end": 3149.2999999999997, "text": " So we can simply forget about instance methods.", "tokens": [50749, 407, 321, 393, 2935, 2870, 466, 5197, 7150, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1810191926502046, "compression_ratio": 1.5406698564593302, "no_speech_prob": 0.046872127801179886}, {"id": 692, "seek": 313574, "start": 3149.2999999999997, "end": 3154.66, "text": " Now of course, there are a little bit things that I kind of put under the carpet.", "tokens": [51042, 823, 295, 1164, 11, 456, 366, 257, 707, 857, 721, 300, 286, 733, 295, 829, 833, 264, 18119, 13, 51310], "temperature": 0.0, "avg_logprob": -0.1810191926502046, "compression_ratio": 1.5406698564593302, "no_speech_prob": 0.046872127801179886}, {"id": 693, "seek": 313574, "start": 3154.66, "end": 3159.66, "text": " There's no carpet here, but you know, imagine there was a carpet, it's things like inheritance", "tokens": [51310, 821, 311, 572, 18119, 510, 11, 457, 291, 458, 11, 3811, 456, 390, 257, 18119, 11, 309, 311, 721, 411, 32122, 51560], "temperature": 0.0, "avg_logprob": -0.1810191926502046, "compression_ratio": 1.5406698564593302, "no_speech_prob": 0.046872127801179886}, {"id": 694, "seek": 313574, "start": 3159.66, "end": 3160.9399999999996, "text": " and so on.", "tokens": [51560, 293, 370, 322, 13, 51624], "temperature": 0.0, "avg_logprob": -0.1810191926502046, "compression_ratio": 1.5406698564593302, "no_speech_prob": 0.046872127801179886}, {"id": 695, "seek": 316094, "start": 3160.94, "end": 3169.02, "text": " So inheritance is an interesting thing because inheritance is quite useful, although some", "tokens": [50364, 407, 32122, 307, 364, 1880, 551, 570, 32122, 307, 1596, 4420, 11, 4878, 512, 50768], "temperature": 0.0, "avg_logprob": -0.1297572868457739, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.005537348333746195}, {"id": 696, "seek": 316094, "start": 3169.02, "end": 3173.88, "text": " crazy people say we shouldn't use inheritance, we should use composition.", "tokens": [50768, 3219, 561, 584, 321, 4659, 380, 764, 32122, 11, 321, 820, 764, 12686, 13, 51011], "temperature": 0.0, "avg_logprob": -0.1297572868457739, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.005537348333746195}, {"id": 697, "seek": 316094, "start": 3173.88, "end": 3180.86, "text": " If you have any colleagues that say that, make them look bad and have them fired because", "tokens": [51011, 759, 291, 362, 604, 7734, 300, 584, 300, 11, 652, 552, 574, 1578, 293, 362, 552, 11777, 570, 51360], "temperature": 0.0, "avg_logprob": -0.1297572868457739, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.005537348333746195}, {"id": 698, "seek": 316094, "start": 3180.86, "end": 3185.94, "text": " they are making your life miserable because inheritance is a good thing.", "tokens": [51360, 436, 366, 1455, 428, 993, 22321, 570, 32122, 307, 257, 665, 551, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1297572868457739, "compression_ratio": 1.7195767195767195, "no_speech_prob": 0.005537348333746195}, {"id": 699, "seek": 318594, "start": 3185.94, "end": 3191.94, "text": " But the thing with inheritance is that usually it's explained in terms of the implementation.", "tokens": [50364, 583, 264, 551, 365, 32122, 307, 300, 2673, 309, 311, 8825, 294, 2115, 295, 264, 11420, 13, 50664], "temperature": 0.0, "avg_logprob": -0.17348238350688547, "compression_ratio": 1.64, "no_speech_prob": 0.1611972600221634}, {"id": 700, "seek": 318594, "start": 3191.94, "end": 3195.26, "text": " You start to talk about V tables and whatever.", "tokens": [50664, 509, 722, 281, 751, 466, 691, 8020, 293, 2035, 13, 50830], "temperature": 0.0, "avg_logprob": -0.17348238350688547, "compression_ratio": 1.64, "no_speech_prob": 0.1611972600221634}, {"id": 701, "seek": 318594, "start": 3195.26, "end": 3200.54, "text": " And the reason is because inheritance is a dirty implementation trick to make it easier", "tokens": [50830, 400, 264, 1778, 307, 570, 32122, 307, 257, 9360, 11420, 4282, 281, 652, 309, 3571, 51094], "temperature": 0.0, "avg_logprob": -0.17348238350688547, "compression_ratio": 1.64, "no_speech_prob": 0.1611972600221634}, {"id": 702, "seek": 318594, "start": 3200.54, "end": 3209.58, "text": " to reuse code and to model inheritance mathematically is not easy and people write PhD thesis about", "tokens": [51094, 281, 26225, 3089, 293, 281, 2316, 32122, 44003, 307, 406, 1858, 293, 561, 2464, 14476, 22288, 466, 51546], "temperature": 0.0, "avg_logprob": -0.17348238350688547, "compression_ratio": 1.64, "no_speech_prob": 0.1611972600221634}, {"id": 703, "seek": 320958, "start": 3209.58, "end": 3210.58, "text": " that.", "tokens": [50364, 300, 13, 50414], "temperature": 0.0, "avg_logprob": -0.19252969236934886, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.29638782143592834}, {"id": 704, "seek": 320958, "start": 3210.58, "end": 3216.94, "text": " William Cook, maybe you know him, wrote his PhD thesis about the semantics of inheritance.", "tokens": [50414, 6740, 12259, 11, 1310, 291, 458, 796, 11, 4114, 702, 14476, 22288, 466, 264, 4361, 45298, 295, 32122, 13, 50732], "temperature": 0.0, "avg_logprob": -0.19252969236934886, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.29638782143592834}, {"id": 705, "seek": 320958, "start": 3216.94, "end": 3220.94, "text": " So I'm not going to talk about that today, okay?", "tokens": [50732, 407, 286, 478, 406, 516, 281, 751, 466, 300, 965, 11, 1392, 30, 50932], "temperature": 0.0, "avg_logprob": -0.19252969236934886, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.29638782143592834}, {"id": 706, "seek": 320958, "start": 3220.94, "end": 3230.18, "text": " But let's continue decoding the Greek and now we are somewhere where we can understand", "tokens": [50932, 583, 718, 311, 2354, 979, 8616, 264, 10281, 293, 586, 321, 366, 4079, 689, 321, 393, 1223, 51394], "temperature": 0.0, "avg_logprob": -0.19252969236934886, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.29638782143592834}, {"id": 707, "seek": 320958, "start": 3230.18, "end": 3231.18, "text": " what's going on.", "tokens": [51394, 437, 311, 516, 322, 13, 51444], "temperature": 0.0, "avg_logprob": -0.19252969236934886, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.29638782143592834}, {"id": 708, "seek": 323118, "start": 3231.18, "end": 3240.7799999999997, "text": " So to remind you, here's the category theory with the strange notation with the kind of", "tokens": [50364, 407, 281, 4160, 291, 11, 510, 311, 264, 7719, 5261, 365, 264, 5861, 24657, 365, 264, 733, 295, 50844], "temperature": 0.0, "avg_logprob": -0.1844736499550902, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.41503211855888367}, {"id": 709, "seek": 323118, "start": 3240.7799999999997, "end": 3245.1, "text": " exponentials and there was this lambda, blah, blah, blah.", "tokens": [50844, 21510, 82, 293, 456, 390, 341, 13607, 11, 12288, 11, 12288, 11, 12288, 13, 51060], "temperature": 0.0, "avg_logprob": -0.1844736499550902, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.41503211855888367}, {"id": 710, "seek": 323118, "start": 3245.1, "end": 3250.02, "text": " I didn't even bother to kind of go through that because you know, everybody would fall", "tokens": [51060, 286, 994, 380, 754, 8677, 281, 733, 295, 352, 807, 300, 570, 291, 458, 11, 2201, 576, 2100, 51306], "temperature": 0.0, "avg_logprob": -0.1844736499550902, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.41503211855888367}, {"id": 711, "seek": 323118, "start": 3250.02, "end": 3258.02, "text": " asleep after a few hot dogs and hamburgers, but now we are something that we can understand.", "tokens": [51306, 11039, 934, 257, 1326, 2368, 7197, 293, 25172, 5476, 433, 11, 457, 586, 321, 366, 746, 300, 321, 393, 1223, 13, 51706], "temperature": 0.0, "avg_logprob": -0.1844736499550902, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.41503211855888367}, {"id": 712, "seek": 325802, "start": 3258.02, "end": 3269.38, "text": " So here, a function type here together with a method apply is a function, we call that", "tokens": [50364, 407, 510, 11, 257, 2445, 2010, 510, 1214, 365, 257, 3170, 3079, 307, 257, 2445, 11, 321, 818, 300, 50932], "temperature": 0.0, "avg_logprob": -0.2155019832107256, "compression_ratio": 1.4961832061068703, "no_speech_prob": 0.02358546294271946}, {"id": 713, "seek": 325802, "start": 3269.38, "end": 3272.14, "text": " a function type.", "tokens": [50932, 257, 2445, 2010, 13, 51070], "temperature": 0.0, "avg_logprob": -0.2155019832107256, "compression_ratio": 1.4961832061068703, "no_speech_prob": 0.02358546294271946}, {"id": 714, "seek": 325802, "start": 3272.14, "end": 3281.2599999999998, "text": " If given any type A and a method M that takes an argument of type B and returns a C, defined", "tokens": [51070, 759, 2212, 604, 2010, 316, 293, 257, 3170, 376, 300, 2516, 364, 6770, 295, 2010, 363, 293, 11247, 257, 383, 11, 7642, 51526], "temperature": 0.0, "avg_logprob": -0.2155019832107256, "compression_ratio": 1.4961832061068703, "no_speech_prob": 0.02358546294271946}, {"id": 715, "seek": 328126, "start": 3281.26, "end": 3289.86, "text": " on A and remember that if I have a method that's defined on A, it's really that M has", "tokens": [50364, 322, 316, 293, 1604, 300, 498, 286, 362, 257, 3170, 300, 311, 7642, 322, 316, 11, 309, 311, 534, 300, 376, 575, 50794], "temperature": 0.0, "avg_logprob": -0.12594774686373197, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.08016204088926315}, {"id": 716, "seek": 328126, "start": 3289.86, "end": 3296.5800000000004, "text": " type A as the first argument and B as the second argument, okay?", "tokens": [50794, 2010, 316, 382, 264, 700, 6770, 293, 363, 382, 264, 1150, 6770, 11, 1392, 30, 51130], "temperature": 0.0, "avg_logprob": -0.12594774686373197, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.08016204088926315}, {"id": 717, "seek": 328126, "start": 3296.5800000000004, "end": 3303.0600000000004, "text": " Now what we can do is there's a factory method that takes an A and that factory method looks", "tokens": [51130, 823, 437, 321, 393, 360, 307, 456, 311, 257, 9265, 3170, 300, 2516, 364, 316, 293, 300, 9265, 3170, 1542, 51454], "temperature": 0.0, "avg_logprob": -0.12594774686373197, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.08016204088926315}, {"id": 718, "seek": 330306, "start": 3303.06, "end": 3312.42, "text": " like colon, colon, M and it returns a function from B to C and that function object itself", "tokens": [50364, 411, 8255, 11, 8255, 11, 376, 293, 309, 11247, 257, 2445, 490, 363, 281, 383, 293, 300, 2445, 2657, 2564, 50832], "temperature": 0.0, "avg_logprob": -0.15210419196587105, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.2824181020259857}, {"id": 719, "seek": 330306, "start": 3312.42, "end": 3320.2599999999998, "text": " has an apply method such that when I apply that to B, that is the same as calling M on", "tokens": [50832, 575, 364, 3079, 3170, 1270, 300, 562, 286, 3079, 300, 281, 363, 11, 300, 307, 264, 912, 382, 5141, 376, 322, 51224], "temperature": 0.0, "avg_logprob": -0.15210419196587105, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.2824181020259857}, {"id": 720, "seek": 330306, "start": 3320.2599999999998, "end": 3327.86, "text": " A and passing it B and then here I just cast to C so that you can show that it's the same,", "tokens": [51224, 316, 293, 8437, 309, 363, 293, 550, 510, 286, 445, 4193, 281, 383, 370, 300, 291, 393, 855, 300, 309, 311, 264, 912, 11, 51604], "temperature": 0.0, "avg_logprob": -0.15210419196587105, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.2824181020259857}, {"id": 721, "seek": 330306, "start": 3327.86, "end": 3328.86, "text": " okay?", "tokens": [51604, 1392, 30, 51654], "temperature": 0.0, "avg_logprob": -0.15210419196587105, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.2824181020259857}, {"id": 722, "seek": 332886, "start": 3329.86, "end": 3335.42, "text": " Anybody here has used method reference in Java, if you use IntelliJ, it will tell you", "tokens": [50414, 19082, 510, 575, 1143, 3170, 6408, 294, 10745, 11, 498, 291, 764, 18762, 72, 41, 11, 309, 486, 980, 291, 50692], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 723, "seek": 332886, "start": 3335.42, "end": 3336.42, "text": " all the time, right?", "tokens": [50692, 439, 264, 565, 11, 558, 30, 50742], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 724, "seek": 332886, "start": 3336.42, "end": 3341.42, "text": " You write something and it says, I can refactor this into a method reference, do you use that?", "tokens": [50742, 509, 2464, 746, 293, 309, 1619, 11, 286, 393, 1895, 15104, 341, 666, 257, 3170, 6408, 11, 360, 291, 764, 300, 30, 50992], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 725, "seek": 332886, "start": 3341.42, "end": 3344.58, "text": " Anybody here uses IntelliJ?", "tokens": [50992, 19082, 510, 4960, 18762, 72, 41, 30, 51150], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 726, "seek": 332886, "start": 3344.58, "end": 3346.58, "text": " What is your name?", "tokens": [51150, 708, 307, 428, 1315, 30, 51250], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 727, "seek": 332886, "start": 3346.58, "end": 3347.58, "text": " Paul?", "tokens": [51250, 4552, 30, 51300], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 728, "seek": 332886, "start": 3347.58, "end": 3354.54, "text": " Ah, finally a name I can pronounce, Paul, do you ever use refactor change into method", "tokens": [51300, 2438, 11, 2721, 257, 1315, 286, 393, 19567, 11, 4552, 11, 360, 291, 1562, 764, 1895, 15104, 1319, 666, 3170, 51648], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 729, "seek": 332886, "start": 3354.54, "end": 3355.54, "text": " reference?", "tokens": [51648, 6408, 30, 51698], "temperature": 0.0, "avg_logprob": -0.2561464309692383, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.08035564422607422}, {"id": 730, "seek": 335554, "start": 3355.54, "end": 3361.02, "text": " Yes, and do you recognize this kind of double colon crazy thing?", "tokens": [50364, 1079, 11, 293, 360, 291, 5521, 341, 733, 295, 3834, 8255, 3219, 551, 30, 50638], "temperature": 0.0, "avg_logprob": -0.15173573107332797, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.06288211047649384}, {"id": 731, "seek": 335554, "start": 3361.02, "end": 3367.7, "text": " So you have been using exponential objects, did you realize that?", "tokens": [50638, 407, 291, 362, 668, 1228, 21510, 6565, 11, 630, 291, 4325, 300, 30, 50972], "temperature": 0.0, "avg_logprob": -0.15173573107332797, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.06288211047649384}, {"id": 732, "seek": 335554, "start": 3367.7, "end": 3373.46, "text": " So now you can go to your boss and say in full cafe, I learned that I'm freaking using", "tokens": [50972, 407, 586, 291, 393, 352, 281, 428, 5741, 293, 584, 294, 1577, 17773, 11, 286, 3264, 300, 286, 478, 14612, 1228, 51260], "temperature": 0.0, "avg_logprob": -0.15173573107332797, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.06288211047649384}, {"id": 733, "seek": 335554, "start": 3373.46, "end": 3380.5, "text": " exponential objects from category tier in my coding, I need a raise because that son", "tokens": [51260, 21510, 6565, 490, 7719, 12362, 294, 452, 17720, 11, 286, 643, 257, 5300, 570, 300, 1872, 51612], "temperature": 0.0, "avg_logprob": -0.15173573107332797, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.06288211047649384}, {"id": 734, "seek": 338050, "start": 3380.5, "end": 3386.58, "text": " of a bitch next to me has no clue what they're doing, they're still using whatever virtual", "tokens": [50364, 295, 257, 11960, 958, 281, 385, 575, 572, 13602, 437, 436, 434, 884, 11, 436, 434, 920, 1228, 2035, 6374, 50668], "temperature": 0.0, "avg_logprob": -0.1599862951981394, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.12691831588745117}, {"id": 735, "seek": 338050, "start": 3386.58, "end": 3396.3, "text": " methods but I know exponential objects, good, but it's amazing.", "tokens": [50668, 7150, 457, 286, 458, 21510, 6565, 11, 665, 11, 457, 309, 311, 2243, 13, 51154], "temperature": 0.0, "avg_logprob": -0.1599862951981394, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.12691831588745117}, {"id": 736, "seek": 338050, "start": 3396.3, "end": 3405.26, "text": " Function references, method references in Java are exactly the same as exponential objects", "tokens": [51154, 11166, 882, 15400, 11, 3170, 15400, 294, 10745, 366, 2293, 264, 912, 382, 21510, 6565, 51602], "temperature": 0.0, "avg_logprob": -0.1599862951981394, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.12691831588745117}, {"id": 737, "seek": 340526, "start": 3405.26, "end": 3413.5400000000004, "text": " in category tier because the only thing I've done here is translate the Greek into Java", "tokens": [50364, 294, 7719, 12362, 570, 264, 787, 551, 286, 600, 1096, 510, 307, 13799, 264, 10281, 666, 10745, 50778], "temperature": 0.0, "avg_logprob": -0.17704254903911074, "compression_ratio": 1.4720812182741116, "no_speech_prob": 0.1862516850233078}, {"id": 738, "seek": 340526, "start": 3413.5400000000004, "end": 3415.7000000000003, "text": " code, right?", "tokens": [50778, 3089, 11, 558, 30, 50886], "temperature": 0.0, "avg_logprob": -0.17704254903911074, "compression_ratio": 1.4720812182741116, "no_speech_prob": 0.1862516850233078}, {"id": 739, "seek": 340526, "start": 3415.7000000000003, "end": 3419.5400000000004, "text": " So why did it take so long?", "tokens": [50886, 407, 983, 630, 309, 747, 370, 938, 30, 51078], "temperature": 0.0, "avg_logprob": -0.17704254903911074, "compression_ratio": 1.4720812182741116, "no_speech_prob": 0.1862516850233078}, {"id": 740, "seek": 340526, "start": 3419.5400000000004, "end": 3426.5800000000004, "text": " They could have sat down, done the same thing as I did, came up with this, said, hey, dude,", "tokens": [51078, 814, 727, 362, 3227, 760, 11, 1096, 264, 912, 551, 382, 286, 630, 11, 1361, 493, 365, 341, 11, 848, 11, 4177, 11, 6449, 11, 51430], "temperature": 0.0, "avg_logprob": -0.17704254903911074, "compression_ratio": 1.4720812182741116, "no_speech_prob": 0.1862516850233078}, {"id": 741, "seek": 340526, "start": 3426.5800000000004, "end": 3430.38, "text": " let's hire somebody to implement this in the compiler and we're done.", "tokens": [51430, 718, 311, 11158, 2618, 281, 4445, 341, 294, 264, 31958, 293, 321, 434, 1096, 13, 51620], "temperature": 0.0, "avg_logprob": -0.17704254903911074, "compression_ratio": 1.4720812182741116, "no_speech_prob": 0.1862516850233078}, {"id": 742, "seek": 343038, "start": 3431.1400000000003, "end": 3438.26, "text": " Okay, but I must say I find this pretty amazing because I'm 100% sure that the Java language", "tokens": [50402, 1033, 11, 457, 286, 1633, 584, 286, 915, 341, 1238, 2243, 570, 286, 478, 2319, 4, 988, 300, 264, 10745, 2856, 50758], "temperature": 0.0, "avg_logprob": -0.19573425920042273, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.04419771954417229}, {"id": 743, "seek": 343038, "start": 3438.26, "end": 3448.7400000000002, "text": " designers had no idea of category theory but yet they came up with exactly the same solution.", "tokens": [50758, 16196, 632, 572, 1558, 295, 7719, 5261, 457, 1939, 436, 1361, 493, 365, 2293, 264, 912, 3827, 13, 51282], "temperature": 0.0, "avg_logprob": -0.19573425920042273, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.04419771954417229}, {"id": 744, "seek": 343038, "start": 3448.7400000000002, "end": 3451.02, "text": " That is the amazing thing, okay?", "tokens": [51282, 663, 307, 264, 2243, 551, 11, 1392, 30, 51396], "temperature": 0.0, "avg_logprob": -0.19573425920042273, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.04419771954417229}, {"id": 745, "seek": 343038, "start": 3451.02, "end": 3459.1400000000003, "text": " So it must be some universal truth here because otherwise you would not two completely independent", "tokens": [51396, 407, 309, 1633, 312, 512, 11455, 3494, 510, 570, 5911, 291, 576, 406, 732, 2584, 6695, 51802], "temperature": 0.0, "avg_logprob": -0.19573425920042273, "compression_ratio": 1.4654377880184333, "no_speech_prob": 0.04419771954417229}, {"id": 746, "seek": 345914, "start": 3459.14, "end": 3465.94, "text": " people, one from theory, one from practice, come up with the same idea.", "tokens": [50364, 561, 11, 472, 490, 5261, 11, 472, 490, 3124, 11, 808, 493, 365, 264, 912, 1558, 13, 50704], "temperature": 0.0, "avg_logprob": -0.1559120301277407, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.10599249601364136}, {"id": 747, "seek": 345914, "start": 3465.94, "end": 3472.46, "text": " So if you look at here, if I have a method reference and I call the apply method on that", "tokens": [50704, 407, 498, 291, 574, 412, 510, 11, 498, 286, 362, 257, 3170, 6408, 293, 286, 818, 264, 3079, 3170, 322, 300, 51030], "temperature": 0.0, "avg_logprob": -0.1559120301277407, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.10599249601364136}, {"id": 748, "seek": 345914, "start": 3472.46, "end": 3480.18, "text": " with argument of type B, that is the same as calling the method M on A, passing it B.", "tokens": [51030, 365, 6770, 295, 2010, 363, 11, 300, 307, 264, 912, 382, 5141, 264, 3170, 376, 322, 316, 11, 8437, 309, 363, 13, 51416], "temperature": 0.0, "avg_logprob": -0.1559120301277407, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.10599249601364136}, {"id": 749, "seek": 345914, "start": 3480.18, "end": 3482.66, "text": " That is how method references work.", "tokens": [51416, 663, 307, 577, 3170, 15400, 589, 13, 51540], "temperature": 0.0, "avg_logprob": -0.1559120301277407, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.10599249601364136}, {"id": 750, "seek": 345914, "start": 3482.66, "end": 3486.9, "text": " This is how category tier works, this is how exponential objects work.", "tokens": [51540, 639, 307, 577, 7719, 12362, 1985, 11, 341, 307, 577, 21510, 6565, 589, 13, 51752], "temperature": 0.0, "avg_logprob": -0.1559120301277407, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.10599249601364136}, {"id": 751, "seek": 348690, "start": 3487.9, "end": 3491.38, "text": " I mean, this is a miracle.", "tokens": [50414, 286, 914, 11, 341, 307, 257, 14660, 13, 50588], "temperature": 0.0, "avg_logprob": -0.3348526954650879, "compression_ratio": 1.6369426751592357, "no_speech_prob": 0.10077919065952301}, {"id": 752, "seek": 348690, "start": 3491.38, "end": 3499.78, "text": " I don't know about you, but when I discovered this, I don't know, I drank a whole bottle", "tokens": [50588, 286, 500, 380, 458, 466, 291, 11, 457, 562, 286, 6941, 341, 11, 286, 500, 380, 458, 11, 286, 21011, 257, 1379, 7817, 51008], "temperature": 0.0, "avg_logprob": -0.3348526954650879, "compression_ratio": 1.6369426751592357, "no_speech_prob": 0.10077919065952301}, {"id": 753, "seek": 348690, "start": 3499.78, "end": 3502.3, "text": " of this stuff.", "tokens": [51008, 295, 341, 1507, 13, 51134], "temperature": 0.0, "avg_logprob": -0.3348526954650879, "compression_ratio": 1.6369426751592357, "no_speech_prob": 0.10077919065952301}, {"id": 754, "seek": 348690, "start": 3502.3, "end": 3509.46, "text": " I don't know what this is, this is rum, I drank a neighbor, you know, that's kind of", "tokens": [51134, 286, 500, 380, 458, 437, 341, 307, 11, 341, 307, 8347, 11, 286, 21011, 257, 5987, 11, 291, 458, 11, 300, 311, 733, 295, 51492], "temperature": 0.0, "avg_logprob": -0.3348526954650879, "compression_ratio": 1.6369426751592357, "no_speech_prob": 0.10077919065952301}, {"id": 755, "seek": 348690, "start": 3509.46, "end": 3513.2200000000003, "text": " the Dutch vodka, okay?", "tokens": [51492, 264, 15719, 35710, 11, 1392, 30, 51680], "temperature": 0.0, "avg_logprob": -0.3348526954650879, "compression_ratio": 1.6369426751592357, "no_speech_prob": 0.10077919065952301}, {"id": 756, "seek": 348690, "start": 3513.2200000000003, "end": 3516.1800000000003, "text": " But this is great.", "tokens": [51680, 583, 341, 307, 869, 13, 51828], "temperature": 0.0, "avg_logprob": -0.3348526954650879, "compression_ratio": 1.6369426751592357, "no_speech_prob": 0.10077919065952301}, {"id": 757, "seek": 351618, "start": 3516.18, "end": 3524.2599999999998, "text": " Now you can say, great, we now know that method references are exponential objects, okay?", "tokens": [50364, 823, 291, 393, 584, 11, 869, 11, 321, 586, 458, 300, 3170, 15400, 366, 21510, 6565, 11, 1392, 30, 50768], "temperature": 0.0, "avg_logprob": -0.18670013064429875, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.007683070842176676}, {"id": 758, "seek": 351618, "start": 3524.2599999999998, "end": 3529.2999999999997, "text": " So tomorrow when you go back to work, you're saying, let's do some kind of, let's introduce", "tokens": [50768, 407, 4153, 562, 291, 352, 646, 281, 589, 11, 291, 434, 1566, 11, 718, 311, 360, 512, 733, 295, 11, 718, 311, 5366, 51020], "temperature": 0.0, "avg_logprob": -0.18670013064429875, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.007683070842176676}, {"id": 759, "seek": 351618, "start": 3529.2999999999997, "end": 3532.1, "text": " some exponentials and IntelliJ can help us with that.", "tokens": [51020, 512, 21510, 82, 293, 18762, 72, 41, 393, 854, 505, 365, 300, 13, 51160], "temperature": 0.0, "avg_logprob": -0.18670013064429875, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.007683070842176676}, {"id": 760, "seek": 351618, "start": 3532.1, "end": 3535.02, "text": " No, don't say that, you kind of use that.", "tokens": [51160, 883, 11, 500, 380, 584, 300, 11, 291, 733, 295, 764, 300, 13, 51306], "temperature": 0.0, "avg_logprob": -0.18670013064429875, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.007683070842176676}, {"id": 761, "seek": 351618, "start": 3535.02, "end": 3541.18, "text": " But here's Eric Meyer and he has not mentioned the M word yet.", "tokens": [51306, 583, 510, 311, 9336, 47207, 293, 415, 575, 406, 2835, 264, 376, 1349, 1939, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18670013064429875, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.007683070842176676}, {"id": 762, "seek": 351618, "start": 3541.18, "end": 3544.3799999999997, "text": " I have not mentioned monads yet.", "tokens": [51614, 286, 362, 406, 2835, 1108, 5834, 1939, 13, 51774], "temperature": 0.0, "avg_logprob": -0.18670013064429875, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.007683070842176676}, {"id": 763, "seek": 354438, "start": 3544.38, "end": 3552.26, "text": " So I'm going to do a little bit, yes, now I have, before as well.", "tokens": [50364, 407, 286, 478, 516, 281, 360, 257, 707, 857, 11, 2086, 11, 586, 286, 362, 11, 949, 382, 731, 13, 50758], "temperature": 0.0, "avg_logprob": -0.19561201661497682, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.003106097923591733}, {"id": 764, "seek": 354438, "start": 3552.26, "end": 3557.9, "text": " When I was talking about Haskell, yes, that's true, but that was more like a joke.", "tokens": [50758, 1133, 286, 390, 1417, 466, 8646, 43723, 11, 2086, 11, 300, 311, 2074, 11, 457, 300, 390, 544, 411, 257, 7647, 13, 51040], "temperature": 0.0, "avg_logprob": -0.19561201661497682, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.003106097923591733}, {"id": 765, "seek": 354438, "start": 3557.9, "end": 3562.5, "text": " Okay, now let's look at this thing.", "tokens": [51040, 1033, 11, 586, 718, 311, 574, 412, 341, 551, 13, 51270], "temperature": 0.0, "avg_logprob": -0.19561201661497682, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.003106097923591733}, {"id": 766, "seek": 354438, "start": 3562.5, "end": 3570.78, "text": " So if you look at this exponential object, blah, blah, blah, there's a right adjoint", "tokens": [51270, 407, 498, 291, 574, 412, 341, 21510, 2657, 11, 12288, 11, 12288, 11, 12288, 11, 456, 311, 257, 558, 614, 48613, 51684], "temperature": 0.0, "avg_logprob": -0.19561201661497682, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.003106097923591733}, {"id": 767, "seek": 354438, "start": 3570.78, "end": 3572.62, "text": " and there's home sets.", "tokens": [51684, 293, 456, 311, 1280, 6352, 13, 51776], "temperature": 0.0, "avg_logprob": -0.19561201661497682, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.003106097923591733}, {"id": 768, "seek": 357262, "start": 3572.62, "end": 3575.9, "text": " Now home sets have nothing to do with fish eggs.", "tokens": [50364, 823, 1280, 6352, 362, 1825, 281, 360, 365, 3506, 6466, 13, 50528], "temperature": 0.0, "avg_logprob": -0.1977390509385329, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.014146639034152031}, {"id": 769, "seek": 357262, "start": 3575.9, "end": 3581.14, "text": " I don't know, is that the same in Swedish, home in Dutch, that's kind of the eggs of", "tokens": [50528, 286, 500, 380, 458, 11, 307, 300, 264, 912, 294, 23523, 11, 1280, 294, 15719, 11, 300, 311, 733, 295, 264, 6466, 295, 50790], "temperature": 0.0, "avg_logprob": -0.1977390509385329, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.014146639034152031}, {"id": 770, "seek": 357262, "start": 3581.14, "end": 3583.8599999999997, "text": " a fish, like caviar.", "tokens": [50790, 257, 3506, 11, 411, 13971, 9448, 13, 50926], "temperature": 0.0, "avg_logprob": -0.1977390509385329, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.014146639034152031}, {"id": 771, "seek": 357262, "start": 3583.8599999999997, "end": 3587.1, "text": " This has nothing to do with caviar, okay?", "tokens": [50926, 639, 575, 1825, 281, 360, 365, 13971, 9448, 11, 1392, 30, 51088], "temperature": 0.0, "avg_logprob": -0.1977390509385329, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.014146639034152031}, {"id": 772, "seek": 357262, "start": 3587.1, "end": 3594.94, "text": " It just says that if I have a function from x to y to z, that is kind of isomorphic to", "tokens": [51088, 467, 445, 1619, 300, 498, 286, 362, 257, 2445, 490, 2031, 281, 288, 281, 710, 11, 300, 307, 733, 295, 307, 32702, 299, 281, 51480], "temperature": 0.0, "avg_logprob": -0.1977390509385329, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.014146639034152031}, {"id": 773, "seek": 357262, "start": 3594.94, "end": 3599.54, "text": " having a function that takes x and y and returns z, okay?", "tokens": [51480, 1419, 257, 2445, 300, 2516, 2031, 293, 288, 293, 11247, 710, 11, 1392, 30, 51710], "temperature": 0.0, "avg_logprob": -0.1977390509385329, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.014146639034152031}, {"id": 774, "seek": 359954, "start": 3599.54, "end": 3605.9, "text": " So this is really saying that you can curry and uncurry and go in two directions, okay?", "tokens": [50364, 407, 341, 307, 534, 1566, 300, 291, 393, 18123, 293, 6219, 30614, 293, 352, 294, 732, 11095, 11, 1392, 30, 50682], "temperature": 0.0, "avg_logprob": -0.15503366788228354, "compression_ratio": 1.6420454545454546, "no_speech_prob": 0.00969744473695755}, {"id": 775, "seek": 359954, "start": 3605.9, "end": 3614.2599999999998, "text": " And a home set, home A, B is just a fancy way of saying all morphisms from A to B,", "tokens": [50682, 400, 257, 1280, 992, 11, 1280, 316, 11, 363, 307, 445, 257, 10247, 636, 295, 1566, 439, 25778, 13539, 490, 316, 281, 363, 11, 51100], "temperature": 0.0, "avg_logprob": -0.15503366788228354, "compression_ratio": 1.6420454545454546, "no_speech_prob": 0.00969744473695755}, {"id": 776, "seek": 359954, "start": 3614.2599999999998, "end": 3615.2599999999998, "text": " okay?", "tokens": [51100, 1392, 30, 51150], "temperature": 0.0, "avg_logprob": -0.15503366788228354, "compression_ratio": 1.6420454545454546, "no_speech_prob": 0.00969744473695755}, {"id": 777, "seek": 359954, "start": 3615.2599999999998, "end": 3618.58, "text": " So this is just a fancy thing.", "tokens": [51150, 407, 341, 307, 445, 257, 10247, 551, 13, 51316], "temperature": 0.0, "avg_logprob": -0.15503366788228354, "compression_ratio": 1.6420454545454546, "no_speech_prob": 0.00969744473695755}, {"id": 778, "seek": 359954, "start": 3618.58, "end": 3625.22, "text": " And the method, the magic of method references is really what it's saying, right?", "tokens": [51316, 400, 264, 3170, 11, 264, 5585, 295, 3170, 15400, 307, 534, 437, 309, 311, 1566, 11, 558, 30, 51648], "temperature": 0.0, "avg_logprob": -0.15503366788228354, "compression_ratio": 1.6420454545454546, "no_speech_prob": 0.00969744473695755}, {"id": 779, "seek": 362522, "start": 3625.22, "end": 3632.74, "text": " It's saying that, you know, there's an isomorphism between the lambda expression B arrow A, method", "tokens": [50364, 467, 311, 1566, 300, 11, 291, 458, 11, 456, 311, 364, 307, 32702, 1434, 1296, 264, 13607, 6114, 363, 11610, 316, 11, 3170, 50740], "temperature": 0.0, "avg_logprob": -0.1769129435221354, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.03979571536183357}, {"id": 780, "seek": 362522, "start": 3632.74, "end": 3638.62, "text": " reference B and this method call here.", "tokens": [50740, 6408, 363, 293, 341, 3170, 818, 510, 13, 51034], "temperature": 0.0, "avg_logprob": -0.1769129435221354, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.03979571536183357}, {"id": 781, "seek": 362522, "start": 3638.62, "end": 3644.4199999999996, "text": " So there's nothing kind of really fancy about this.", "tokens": [51034, 407, 456, 311, 1825, 733, 295, 534, 10247, 466, 341, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1769129435221354, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.03979571536183357}, {"id": 782, "seek": 362522, "start": 3644.4199999999996, "end": 3648.5, "text": " And then, you know, we can kind of talk about adjoints because that was the other thing", "tokens": [51324, 400, 550, 11, 291, 458, 11, 321, 393, 733, 295, 751, 466, 614, 48613, 82, 570, 300, 390, 264, 661, 551, 51528], "temperature": 0.0, "avg_logprob": -0.1769129435221354, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.03979571536183357}, {"id": 783, "seek": 362522, "start": 3648.5, "end": 3649.5, "text": " in there.", "tokens": [51528, 294, 456, 13, 51578], "temperature": 0.0, "avg_logprob": -0.1769129435221354, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.03979571536183357}, {"id": 784, "seek": 364950, "start": 3649.5, "end": 3655.7, "text": " For an adjoint, I have to have two functors and in our case, it's this.", "tokens": [50364, 1171, 364, 614, 48613, 11, 286, 362, 281, 362, 732, 1019, 5547, 293, 294, 527, 1389, 11, 309, 311, 341, 13, 50674], "temperature": 0.0, "avg_logprob": -0.1806280322191192, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.05201103910803795}, {"id": 785, "seek": 364950, "start": 3655.7, "end": 3661.24, "text": " And to really prove that I'm not talking nonsense, you know, here's some real code that actually", "tokens": [50674, 400, 281, 534, 7081, 300, 286, 478, 406, 1417, 14925, 11, 291, 458, 11, 510, 311, 512, 957, 3089, 300, 767, 50951], "temperature": 0.0, "avg_logprob": -0.1806280322191192, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.05201103910803795}, {"id": 786, "seek": 364950, "start": 3661.24, "end": 3665.66, "text": " executes if you use Scala.", "tokens": [50951, 4454, 1819, 498, 291, 764, 2747, 5159, 13, 51172], "temperature": 0.0, "avg_logprob": -0.1806280322191192, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.05201103910803795}, {"id": 787, "seek": 364950, "start": 3665.66, "end": 3673.14, "text": " But now, here's the thing, that if you have two of these adjoint functors and these are", "tokens": [51172, 583, 586, 11, 510, 311, 264, 551, 11, 300, 498, 291, 362, 732, 295, 613, 614, 48613, 1019, 5547, 293, 613, 366, 51546], "temperature": 0.0, "avg_logprob": -0.1806280322191192, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.05201103910803795}, {"id": 788, "seek": 367314, "start": 3673.14, "end": 3679.66, "text": " the conversions between them, that gives rise to a monad.", "tokens": [50364, 264, 42256, 1296, 552, 11, 300, 2709, 6272, 281, 257, 1108, 345, 13, 50690], "temperature": 0.0, "avg_logprob": -0.15379016319017733, "compression_ratio": 1.56, "no_speech_prob": 0.501308798789978}, {"id": 789, "seek": 367314, "start": 3679.66, "end": 3687.42, "text": " So we came from exponential objects, there came this notion of adjoint functors.", "tokens": [50690, 407, 321, 1361, 490, 21510, 6565, 11, 456, 1361, 341, 10710, 295, 614, 48613, 1019, 5547, 13, 51078], "temperature": 0.0, "avg_logprob": -0.15379016319017733, "compression_ratio": 1.56, "no_speech_prob": 0.501308798789978}, {"id": 790, "seek": 367314, "start": 3687.42, "end": 3690.18, "text": " And once you have adjoint functors, you get monads.", "tokens": [51078, 400, 1564, 291, 362, 614, 48613, 1019, 5547, 11, 291, 483, 1108, 5834, 13, 51216], "temperature": 0.0, "avg_logprob": -0.15379016319017733, "compression_ratio": 1.56, "no_speech_prob": 0.501308798789978}, {"id": 791, "seek": 367314, "start": 3690.18, "end": 3692.46, "text": " So there's no escape from the monads.", "tokens": [51216, 407, 456, 311, 572, 7615, 490, 264, 1108, 5834, 13, 51330], "temperature": 0.0, "avg_logprob": -0.15379016319017733, "compression_ratio": 1.56, "no_speech_prob": 0.501308798789978}, {"id": 792, "seek": 367314, "start": 3692.46, "end": 3699.54, "text": " So in the end, everybody will be like Mr. H, because, you know, now that Java 8 has", "tokens": [51330, 407, 294, 264, 917, 11, 2201, 486, 312, 411, 2221, 13, 389, 11, 570, 11, 291, 458, 11, 586, 300, 10745, 1649, 575, 51684], "temperature": 0.0, "avg_logprob": -0.15379016319017733, "compression_ratio": 1.56, "no_speech_prob": 0.501308798789978}, {"id": 793, "seek": 369954, "start": 3699.54, "end": 3704.18, "text": " exponentials, the next thing it will have are monads.", "tokens": [50364, 21510, 82, 11, 264, 958, 551, 309, 486, 362, 366, 1108, 5834, 13, 50596], "temperature": 0.0, "avg_logprob": -0.1698193603687072, "compression_ratio": 1.6256410256410256, "no_speech_prob": 0.09300769120454788}, {"id": 794, "seek": 369954, "start": 3704.18, "end": 3707.18, "text": " Because that's what category theory predicts.", "tokens": [50596, 1436, 300, 311, 437, 7719, 5261, 6069, 82, 13, 50746], "temperature": 0.0, "avg_logprob": -0.1698193603687072, "compression_ratio": 1.6256410256410256, "no_speech_prob": 0.09300769120454788}, {"id": 795, "seek": 369954, "start": 3707.18, "end": 3713.94, "text": " And I went through this real quick, but I tell you, 10 years from now, 20 years from", "tokens": [50746, 400, 286, 1437, 807, 341, 957, 1702, 11, 457, 286, 980, 291, 11, 1266, 924, 490, 586, 11, 945, 924, 490, 51084], "temperature": 0.0, "avg_logprob": -0.1698193603687072, "compression_ratio": 1.6256410256410256, "no_speech_prob": 0.09300769120454788}, {"id": 796, "seek": 369954, "start": 3713.94, "end": 3719.2599999999998, "text": " now, this will be the case.", "tokens": [51084, 586, 11, 341, 486, 312, 264, 1389, 13, 51350], "temperature": 0.0, "avg_logprob": -0.1698193603687072, "compression_ratio": 1.6256410256410256, "no_speech_prob": 0.09300769120454788}, {"id": 797, "seek": 369954, "start": 3719.2599999999998, "end": 3725.58, "text": " Java will have monads, because monads are related to adjunctions and adjunctions come", "tokens": [51350, 10745, 486, 362, 1108, 5834, 11, 570, 1108, 5834, 366, 4077, 281, 614, 10010, 3916, 293, 614, 10010, 3916, 808, 51666], "temperature": 0.0, "avg_logprob": -0.1698193603687072, "compression_ratio": 1.6256410256410256, "no_speech_prob": 0.09300769120454788}, {"id": 798, "seek": 369954, "start": 3725.58, "end": 3728.5, "text": " from exponentials.", "tokens": [51666, 490, 21510, 82, 13, 51812], "temperature": 0.0, "avg_logprob": -0.1698193603687072, "compression_ratio": 1.6256410256410256, "no_speech_prob": 0.09300769120454788}, {"id": 799, "seek": 372850, "start": 3728.5, "end": 3737.62, "text": " Now the funny thing is that the state monad comes from this adjunction there, but that's", "tokens": [50364, 823, 264, 4074, 551, 307, 300, 264, 1785, 1108, 345, 1487, 490, 341, 614, 10010, 882, 456, 11, 457, 300, 311, 50820], "temperature": 0.0, "avg_logprob": -0.19911072746155753, "compression_ratio": 1.4342105263157894, "no_speech_prob": 0.0029633271042257547}, {"id": 800, "seek": 372850, "start": 3737.62, "end": 3740.3, "text": " a topic for a different talk.", "tokens": [50820, 257, 4829, 337, 257, 819, 751, 13, 50954], "temperature": 0.0, "avg_logprob": -0.19911072746155753, "compression_ratio": 1.4342105263157894, "no_speech_prob": 0.0029633271042257547}, {"id": 801, "seek": 372850, "start": 3740.3, "end": 3749.98, "text": " So here's the next thing, when you have a lot of beer tonight, this will be your next", "tokens": [50954, 407, 510, 311, 264, 958, 551, 11, 562, 291, 362, 257, 688, 295, 8795, 4440, 11, 341, 486, 312, 428, 958, 51438], "temperature": 0.0, "avg_logprob": -0.19911072746155753, "compression_ratio": 1.4342105263157894, "no_speech_prob": 0.0029633271042257547}, {"id": 802, "seek": 372850, "start": 3749.98, "end": 3753.22, "text": " tattoo, okay?", "tokens": [51438, 15080, 11, 1392, 30, 51600], "temperature": 0.0, "avg_logprob": -0.19911072746155753, "compression_ratio": 1.4342105263157894, "no_speech_prob": 0.0029633271042257547}, {"id": 803, "seek": 375322, "start": 3753.22, "end": 3758.3799999999997, "text": " So category theory here directly corresponds to Java.", "tokens": [50364, 407, 7719, 5261, 510, 3838, 23249, 281, 10745, 13, 50622], "temperature": 0.0, "avg_logprob": -0.24527244567871093, "compression_ratio": 1.3296703296703296, "no_speech_prob": 0.44850361347198486}, {"id": 804, "seek": 375322, "start": 3758.3799999999997, "end": 3763.98, "text": " And if this is a little bit too dark for you, what about this one?", "tokens": [50622, 400, 498, 341, 307, 257, 707, 857, 886, 2877, 337, 291, 11, 437, 466, 341, 472, 30, 50902], "temperature": 0.0, "avg_logprob": -0.24527244567871093, "compression_ratio": 1.3296703296703296, "no_speech_prob": 0.44850361347198486}, {"id": 805, "seek": 375322, "start": 3763.98, "end": 3765.9399999999996, "text": " This one looks cute, right?", "tokens": [50902, 639, 472, 1542, 4052, 11, 558, 30, 51000], "temperature": 0.0, "avg_logprob": -0.24527244567871093, "compression_ratio": 1.3296703296703296, "no_speech_prob": 0.44850361347198486}, {"id": 806, "seek": 375322, "start": 3765.9399999999996, "end": 3776.2999999999997, "text": " And I made a special deal with Liz's tattoo parlor, where if you show your Foucaff\u00e9 t-shirt,", "tokens": [51000, 400, 286, 1027, 257, 2121, 2028, 365, 16480, 311, 15080, 971, 6746, 11, 689, 498, 291, 855, 428, 479, 263, 496, 602, 526, 256, 12, 15313, 11, 51518], "temperature": 0.0, "avg_logprob": -0.24527244567871093, "compression_ratio": 1.3296703296703296, "no_speech_prob": 0.44850361347198486}, {"id": 807, "seek": 377630, "start": 3776.3, "end": 3787.1400000000003, "text": " you will get a discount on any of those two tattoos.", "tokens": [50364, 291, 486, 483, 257, 11635, 322, 604, 295, 729, 732, 28662, 13, 50906], "temperature": 0.0, "avg_logprob": -0.21045864712108264, "compression_ratio": 1.028169014084507, "no_speech_prob": 0.3575514554977417}, {"id": 808, "seek": 377630, "start": 3787.1400000000003, "end": 3787.98, "text": " Thank you very much.", "tokens": [50906, 1044, 291, 588, 709, 13, 50948], "temperature": 0.0, "avg_logprob": -0.21045864712108264, "compression_ratio": 1.028169014084507, "no_speech_prob": 0.3575514554977417}], "language": "en"}