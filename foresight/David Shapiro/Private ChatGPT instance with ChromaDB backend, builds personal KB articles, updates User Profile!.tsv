start	end	text
0	1400	Check it, check it, check it, check it.
1400	2360	Okay, level check.
2360	4040	I think we're here.
4040	7740	All right, so background.
7740	9360	It's been a little while since I've done,
9360	10800	you're over here now,
10800	13200	since I've done one of these tutorial coding videos,
13200	15200	but I woke up at like 2.30 in the morning
15200	16960	and just had to work on this.
16960	17880	So I hammered it out.
17880	21160	Basically, the purpose of today's video
21160	23720	is to demonstrate using ChromaDB,
23720	27040	which is a local vector database.
27040	29360	It's basically like SQLite.
29360	30880	If you're familiar with that,
30880	34520	which is a self-contained SQL database, relational database,
34520	37560	this is functionally very similar to SQLite,
37560	39040	except it is a vector database,
39040	41200	meaning it does semantic search.
41200	42720	One thing that's really great about it
42720	45800	is that it has its own built-in embeddings tools.
45800	47600	I think it's based on BERT.
47600	49960	Anyways, you can check out all the documentation here
49960	52400	on trichroma.com.
52400	54520	The Getting Started and Usage Guide is pretty good.
54520	56760	It's not complete every now and then.
56760	60880	I find that I have to go to the actual repo
60880	63000	to look at how some of the internals work,
63000	65120	but it is pretty brain-dead simple.
65120	67400	So let me just go ahead and show you.
67400	68720	This is my private instance.
68720	70640	Oh, so before we get too lost,
70640	72880	I do have a public instance,
72880	76160	daveshap slash chroma db underscore under chatbot
76160	77760	underscore public.
77760	80960	I've got a little integration guide usage.
80960	83000	It's, I mean, you probably don't need this.
83000	83840	You can futz around with it,
83840	86320	but this will get you started.
86320	90960	I also use chatGBT to just get a really basic explanation
90960	91800	of the code.
91800	94280	You probably won't need it once you take a look at it.
94280	97720	So off the top, let me just show you how this thing works.
97720	100280	So it's a basic chatbot.
100280	101760	You can see I didn't specify it.
101760	106760	So it's getting all mini-LML6v2 from Huggingface.
107280	111000	Great, so it's like, hey, let's see.
111000	114620	What were we talking about last?
114620	117220	This probably won't work because it's just gonna,
117220	118380	in the future, it wouldn't work
118380	120220	because it's gonna have multiple KB articles
120220	121940	in the background.
121940	124300	Oh, I need to explain like all that.
124300	126740	So I know that I just said like KB articles,
126740	128100	don't worry, we'll get to it.
129460	131980	But anyways, I wanna show you that I just started it up
131980	134260	and what it's gonna do is it's gonna use
134260	138340	the last few messages to search its internal KB article
138340	139800	for the last information,
139800	142660	but it also has a user profile for me.
142660	144120	In our previous conversations,
144120	146040	we discussed AI alignment, morality, ethics,
146040	147920	and epistemology within AI development.
147920	149280	You also shared your plans to communicate
149280	151480	your ideas on YouTube, unplug your computer,
151480	152680	and spend more time outdoors,
152680	153840	and use digital wellness settings
153840	155360	to improve your work-life balance.
155360	156400	Working on that.
157600	159280	Additionally, we talked about your recent experience
159280	160840	with severe insomnia and the importance
160840	161980	of maintaining a healthy balance
161980	163520	between work and personal life.
163520	166680	Yes, that's actually why I created this chatbot.
166680	167520	Let me show you.
167520	168360	So there was a,
169360	170640	there was,
173200	174040	there was,
175760	176860	God, my brain.
177960	181000	I was using chat GPT as a reflective journaling tool.
181000	183840	So what I mean by that is
185520	188000	if you plug in this message,
188000	190520	and I know I'm scattered, I'm all over the place,
190520	192480	this is what happens when I have severe insomnia.
192480	195600	Anyways, so basically I use chat GPT
195600	197760	as a reflective journaling tool to figure out
197800	199420	like how I'm feeling about things,
199420	201120	because as an autistic person,
201120	202720	I often need help with this.
202720	205320	And I don't like journaling because just talking to a page
205320	206880	is kind of dumb,
206880	210960	but it's like, hey, I need to talk something out.
210960	212440	And so anyways,
214840	218840	by workshopping this system message with chat GPT,
218840	222760	I came up with a pretty good reflective journaling tool.
222760	225360	So you could say that this is a therapeutic tool,
225360	228440	but by couching it in the language of reflective journaling,
228440	232200	it's not like medical therapy or psychotherapy or anything.
233000	235440	But it's just like, you know, I can say like,
235440	240360	I have been working so hard and I don't know why.
240360	241680	I actually do know why now,
241680	244640	but this is kind of a shorthand of the conversation I had.
245520	247040	Let's try and figure out, it's driving you so hard.
247040	248280	Can you think of any specific goals
248280	250280	that might be pushing you to this extra effort?
250280	253040	So you see how the tone of this is much more straightforward
253040	255040	and it's very focused by asking
255040	257560	those like kind of probing follow-up questions.
257560	261720	This is why, you know, it's in the investigation phase.
261720	264320	Anyways, so I had this idea and I was like, okay,
264320	265880	this is great, but I need,
265880	268760	if I'm gonna use this as a long-term journaling tool,
268760	270320	I'm gonna need this locally
270320	272200	and I'm gonna need persistent storage
272200	276200	because as this is just the playground,
276200	279160	if I do a refresh, it's gone and that's no good.
280600	282960	So actually here, let me go ahead and just save this
283800	286640	to the, we're gonna call this the system message
286640	288920	for reflective journaling.
288920	290480	So you can use this if you want.
291400	294520	All right, so anyways, so you see it has this
294520	296840	and then you see it says updating user profile
296840	300680	and updating KB, okay, cool.
300680	304000	So you see that it fundamentally basic chat bot.
304000	306000	So now let's start to unpack it.
306000	311000	So first we will go look at the, just the chat file.
311000	314680	So this is a super brain dead simple chat bot
314680	316720	with infinite memory, infinite memory.
316720	318680	I know some people got grumpy when I said
318680	320900	that Pinecone had infinite memory.
320900	322040	From a human standpoint,
322040	323720	it functionally has infinite memory
323720	326440	because, you know, this thing can hold
326440	328160	probably a million KB articles,
328160	331960	which is more than enough to document your entire life.
331960	336040	So from a human standpoint, it is functionally infinite.
336040	337720	All right, so from the top,
337720	340160	we've got a few basic utility functions,
340160	342540	save yaml save file, open file,
342540	346200	and then a chat bot, which calls the GPT-4 model.
346200	348460	You could switch this out to 3.5 turbo.
348460	350640	If you don't have access to GPT-4 yet,
350640	352560	it does not work as well.
352560	355280	There's a reason that I use GPT-4 because it is smarter.
355280	357040	I also set the temperature to zero
357040	358700	because I don't like it to be too creative,
358700	361760	especially with a lot of the functions that I have it doing.
361760	364200	You actually want it to be more deterministic
364200	366240	or mechanistic and that you wanna get
366240	367400	the same results every time,
367400	370640	especially when you're updating the user profile
370640	372520	and the KB articles.
372520	375800	You can see right here that every time you call the chat bot,
375800	380320	I dump the whole thing to apilogs slash convo
381280	382480	and it's a yaml file.
382480	385380	So here's my private one.
385380	387640	So apilogs, here's an example.
387640	391440	So each item is gonna be here.
391440	392480	Actually, that's not a good one
392480	394700	because I changed the way that it saves it.
394700	397040	Let me show you a more recent one.
397040	400600	So the first element is always gonna be the system message
402280	404760	that was in the last convo.
404760	406600	So then here's the KB article
406600	409080	and you can see that it was updating the KB article.
409080	413840	And so each one of these items is like,
415320	416760	you'll see, but anyways,
416760	419560	I just wanted to show that it logs everything
419560	421640	because well, sometimes it does things
421640	423200	that you don't understand.
423200	426360	All right, so that's an example of the apilog
426360	428920	and then if the conversation,
428920	431200	if the overall conversation is too long,
431200	435400	it'll go ahead and trim the oldest chat message.
435400	440400	So the chat GPT web interface does this automatically
440780	444300	where it'll just kind of groom the backlog of messages.
444300	445640	So we have to do this manually.
445640	448260	So I just have it cut off at 7,000 tokens.
448260	452480	You could probably do like 7,500 if you want to
452480	454620	because a lot of these are gonna be limited
454620	457940	but you have a user profile and a KB article
457940	461700	that gets wedged in which are both up to 1,000 words
461700	463980	which could be around 1,000 tokens.
463980	466980	So having it trim at 7,000 is probably where you want it.
467940	471180	So that's the primary, those are the helper functions
471180	474300	and then you have a super straightforward,
474300	477400	you instantiate ChromaDB right here.
477400	479580	So you set the persistent directory
479580	482420	which is, I have it right here, ChromaDB.
482420	486100	So this is my instance, my personal instance of ChromaDB.
486100	488700	It's not gonna be the one that you find up here.
488700	489860	This is the public version.
489860	491140	So if you go into ChromaDB,
491140	493660	you'll see just a placeholder file
493660	496100	so that the folder's already there.
496100	498600	You don't need to instantiate it.
498600	501020	Let's see, going back to here.
501020	504780	So ChromaClient, so we instantiate the ChromaDB client.
504780	507340	This is again, almost identical to SQLite
508580	510020	or other similar things.
510020	511180	So about a year ago,
511180	512900	I tried to do basically the same thing.
512900	515220	I called it VDB Lite for Vector Database Lite
515220	518580	instead of SQL Lite, Structured Query Language Lite.
518580	520660	But this company went and did the same thing
520660	521500	and I think they've already got
521500	523380	like a $30 million valuation or something.
523380	525960	I was like, damn, I should have stuck with that.
525960	527480	Anyways, they figured it out.
527480	530060	I think it's based on the same underpinning technology.
530060	533580	They're using an open source embedding transformer.
533580	538060	I think they're also using the Facebook AI semantic search
538060	541940	and the device engine and the background.
541940	543900	Anyways, so you instantiate the client.
543900	546660	You need to use the settings to have a persistent directory
546660	551000	because by default, this entire thing is fully ephemeral.
551000	552500	I think it does cache it somewhere,
552500	555180	but I wanted to be very explicit saying save it here
556620	558100	for reusability.
558100	560060	And so then collection is ChromaClient,
560060	563120	get or create collection named Knowledge Base.
563120	566220	So this is my personal Knowledge Base.
566220	569620	Then we instantiate the conversation
569620	572060	with open AI, the chatbot.
572060	576460	And in this case, because we're saving everything necessary
576460	581460	into a personal user profile and the KB articles,
583100	585660	like why even load the conversation?
586860	589580	All right, so let me show you the system default message.
589580	591820	So the system default message is where it starts.
591820	594340	Your chatbot is whose mission is to assist
594340	595900	the following user, your ultimate objectives
595900	597420	are to minimize suffering and hence prosperity
597420	599260	and promote understanding.
599260	601120	The provided information about the user
601120	602220	and the Knowledge Base article
602220	604320	should be integrated into your interactions.
604320	606540	This is private information not visible to the user.
606540	609180	The user profile compiled from past conversations
609180	611660	encapsulates critical details about the user
611660	613820	which can aid in shaping your responses effectively,
613820	615420	which you saw here.
615420	618160	So you see like it actually knows quite a bit about me
618160	619820	from our past conversations.
619820	622140	This was populated here in the user profile
622140	623460	and the KB article.
623460	626480	So basically it says, then it also explains
626480	629420	that the KB article is a topic compiled similarly
629420	632060	from past dialogue serving as your long-term memory.
632060	634520	While numerous KB articles exist in your backend system,
634520	636320	the one provided is deemed most relevant
636320	638420	to the current conversation topic.
638420	640900	Note that the recall system operates autonomously
640900	643060	and it may not always retrieve the most suitable KB.
643060	644580	If the user is asking about a topic
644580	647060	that doesn't seem to align with the provided KB,
647060	648580	inform them of the memory pulled
648580	650520	and request them to specify their query
650520	651460	or share more details.
651460	653340	This can assist the autonomous system
653340	654740	in retrieving the correct memory
654740	656580	in the subsequent interaction.
656580	659140	So basically that's instructing it
659140	661060	to do the same thing that a human will do
661060	663700	if I say like, hey, Bill, do you remember that time
663700	665880	that like I accidentally shot you in the face
665880	666720	with a Roman candle
666720	668620	because that's something that would happen in the South?
668620	669660	And Bob would be like, you know,
669660	670740	I don't actually remember that.
670740	672740	And I'm like, oh, well, you woke up in the hospital.
672740	674660	Oh yeah, I remember that, right?
674660	676460	So we prime each other's memory
676460	680020	and human prompting is not that different from AI prompting.
680460	683140	Remember that the clarity of your responses
683140	685140	and the relevance of your information recall
685140	687660	are crucial to delivering an optimal user experience.
687660	689060	Please ask any clarifying questions
689060	693140	or provide any input further for refinement if necessary.
693140	694600	So this system message,
694600	697780	I actually got help from chat GPT
697780	701180	to create a really compelling system message.
701180	703380	And one thing that I recommend that people do
703380	706700	is actually use chat GPT to work on prompting.
706700	708540	So this is, you could call this meta prompting
708580	711500	where you use the thing to prompt the thing.
711500	713780	And the reason that this works really well as one,
713780	716620	chat GPT is more articulate than most humans,
716620	719660	including myself when used correctly.
719660	721660	But another thing is one thing that I noticed
721660	723620	is that chat GPT tends to write
723620	725780	in a way that it will understand.
725780	728140	And so if you say, if you give it some context,
728140	729580	like this is what I'm trying to do,
729580	733700	here's my current prompt, here's what's weak about it.
733700	735020	Can you make it better?
735020	737240	And then you tell it like, ask me some questions
737240	738080	if you have any.
738100	739540	But no, I see what you're trying to do.
739540	742020	Let me write better instructions for you.
742020	744520	So instruction writing for anyone who's like a teacher
744520	746300	or technical writer or whatever,
746300	749440	instruction writing is a very, very particular skill set
749440	751000	and chat GPT is really good at it.
751000	753360	So this is the default system message,
753360	755680	which is then populated with the user profile
755680	757640	and the most relevant KB article.
757640	760720	So now that we're up to there,
760720	762300	we enter into the infinite loop,
762300	765520	which is just get the user text,
765520	768520	save it to the user log or the chat logs.
768520	770460	So the chat logs are all saved out here.
770460	775220	It's just plain text and the file name has the timestamp
775220	776660	in it as well as the speaker.
776660	779440	So user chat bot, user chat bot, so on and so forth.
779440	780660	So you got the raw logs there
780660	783140	just in case anything goes wrong.
783140	784520	And then I've also got DB logs,
784520	786820	which we'll get to in just a second.
786820	791200	So then what we do is we take the quote main scratch pad,
791200	794180	which is just the last five messages,
794180	799040	both for the user and for the chat bot.
799040	803280	And this is what we use as the context of like working memory.
803280	805380	And so then we use this main scratch pad,
805380	807340	which is the last five messages.
807340	812340	We use it to search for the top most relevant KB article.
815620	817960	And in my case, I still only have one KB article.
817960	819300	So we'll see how it gets to,
819300	820640	and I'll go through the logic
820640	823420	of how it builds KB articles in just a minute.
823420	824860	So basically it just says,
824860	826380	okay, here's the most recent thing.
826380	829100	Find the KB article that is most relevant
829100	831740	to the most recent bits of conversation.
831740	834420	And then it'll pull that,
834420	836100	and it's again, super straightforward.
836100	838820	All you have to do is pass the text to it,
838820	841100	and it will automatically embed it for you.
841100	843620	And then I said, just give me the one most recent.
843620	845840	Once we have larger context windows,
845840	850200	or maybe if we decide that recent chat history
850200	851220	doesn't need to be as big,
851220	854900	like let's say we wanna trim this down to like 3000 tokens,
854900	857340	and we decide that actually having more KB articles
857340	860220	is more important, we can absolutely do that.
860220	862820	And what you would do then is just change the end results
862820	867260	to let, let's say, give me the four most relevant KB articles
867260	869740	instead of the one most relevant.
869740	871860	That will allow it to have a more sophisticated
871860	872820	working memory.
874260	877700	Yeah, so, but right now we're just doing one.
877700	881660	And so then what we do is we repopulate
881660	883980	that system default message with the profile
883980	885700	and the KB article.
885700	886980	And so that's right here.
886980	888520	So that gets populated there.
890300	892700	And then, let's see,
892700	895380	it looks like I accidentally changed something.
895380	897480	So let me go ahead and show you my user profile.
897480	898860	I don't mind sharing this
898860	900180	because I've already told you everything.
900180	902260	I'm pretty much an open book.
902260	906380	So the format for this is what I call
907380	908420	a labeled list.
908420	912480	And so I realized back in GPT-3
912480	916260	that GPT handles labeled lists very, very well.
916260	919660	So that's where you use a hyphenated list, bullet list.
919660	921620	It understands that intrinsically.
921620	924420	And then you label the information, right?
924420	925840	So it's just a hash table.
925840	927420	If you're into computer science,
927420	929700	this is called a hash table or a dictionary
929700	931380	where it's you label the kind of,
931380	934380	you have a parameter and then you label the parameter, right?
934380	936180	So the data metadata.
936180	938340	So name, David Shapiro, y'all know that.
938340	940220	Profession, AI and cognitive architectures,
940220	941340	y'all know that.
941340	944900	Interests, it's got a whole bunch of interests.
944900	946100	And oh, by the way,
946100	948760	this was all distilled from other conversations.
950180	951740	Beliefs, plans,
951740	954240	and this is of course gonna get updated over time.
955240	957220	So for instance,
957220	960460	during some of the conversations that I just showed you
960460	962820	with this brand new chatbot,
962820	965140	it added this.
965180	966580	When I told it, this is what I'm gonna do.
966580	968260	It said, okay, I'm gonna,
968260	969700	I think that that's relevant
969700	971480	to what you're gonna be doing in the future.
971480	974940	So let me just jot that down on my scratch pad for you.
974940	978580	Preferences, so I manually added avoid superfluous words
978580	980220	overly for both responses.
980220	981260	And then you know how it says,
981260	983460	as an AI model, I don't have personal opinions.
983460	984980	I'm like, I know, I don't care.
984980	986940	So I said, please interpret personal input
986940	989780	as critical evaluation and valuable feedback.
989780	991940	I said it a little bit more explicitly than that,
991940	994540	but the point is, is that I told it that
994580	997820	in natural language, I was down here and I said,
997820	1002820	I know you're an AI and have no personal opinions,
1003180	1007580	but when I ask for them, this is what I mean.
1007580	1010020	And so when I did that, it actually recorded that
1010020	1013300	automatically because after every conversation,
1013300	1015300	it checks the user profile.
1015300	1016860	We need to find a way to speed this up
1016860	1019580	because as you saw from the user interface,
1019580	1020680	it's not the best.
1022100	1024100	If I had more time, mental energy and patience,
1024660	1027220	I would separate this out as a thread,
1027220	1029900	as a separate threading thing that can be done,
1029900	1033140	or even separate it out as a separate API.
1034220	1037460	One of y'all can do that, submit a pull request
1037460	1038980	on the public repo.
1038980	1043980	And then health, so it added this entirely on its own
1044140	1049140	because I said, hey, I woke up at like 2.30 in the morning
1050100	1052140	because I had to work on this.
1052140	1054420	And then I said, let's talk about that.
1054420	1056900	And so it decided that that was a critical piece
1056900	1059140	of information to add to my user profile.
1059140	1061860	So that all gets populated here.
1061860	1065540	And then the logs are all stored here.
1065540	1070540	So you got the API logs, which will track all of that.
1070740	1074180	Everything, so I use chat GPT API for everything
1074180	1076780	just because that's the only way to get to GPT-4,
1076780	1078140	which is the most powerful.
1079140	1080300	Let's see.
1082460	1087300	So then we update the system message every time.
1087300	1091500	So it says, okay, whatever you said,
1091500	1092860	update the system message,
1092860	1095660	then we go ahead and generate a response first
1096740	1100100	because the user profile is not gonna change
1100100	1101500	all that much or all that often,
1101500	1104180	so we can basically assume that it'll be usable.
1104180	1106860	And then the KB articles also,
1107500	1108820	I figured it would actually be better
1108820	1112900	to update the KB articles after you have the user input
1112900	1114740	and then the machine output
1114740	1118540	because if you ask chat GPT for important information
1118540	1120140	or it solves a problem for you,
1120140	1122460	you actually wanna capture that.
1123460	1126140	So we go ahead and generate the response
1126140	1128140	and append that to everything.
1128140	1129940	We go ahead and log it out.
1129940	1132660	Then we update the user scratch pad again.
1132660	1134140	Actually, why did I do this?
1135180	1136780	Oh, no, this is the first time we did it.
1136820	1138980	Okay, sorry, I apologize.
1138980	1141340	So then we update the user scratch pad,
1141340	1143060	which the user scratch pad
1143060	1145140	is only the last few user messages.
1145140	1149140	And the reason for that is because we want to exclude
1150220	1152540	chat GPT's response
1152540	1154100	because we don't want it to get confused
1154100	1155700	about things that it has said about you
1155700	1157660	or inferred or whatever.
1157660	1160980	We only want to record your user profile
1160980	1162540	from explicitly what you say.
1162540	1165860	So I just captured the last three messages that you've sent
1165900	1167980	and then it does a stare and compare
1167980	1169700	basically where it says, okay,
1169700	1172020	based on this most recent chat message,
1172020	1173140	is there any,
1173140	1176100	one, is there any relevant user information?
1176100	1177540	And if so, go ahead and update it.
1177540	1179580	So let me show you how it updates that.
1179580	1182100	So system update user profile.
1182940	1187660	So this is a user profile document updater chat bot.
1187660	1189780	This is the system message.
1189780	1192980	Your role is to manage and update a UPD and chat bot,
1192980	1195300	the chat GPT came up with this idea on its own.
1195740	1199620	It created the UPD definition.
1199620	1201500	Your primary responsibility is to parse updates
1201500	1205020	supplied by the user, meticulously analyze them.
1206020	1208500	It could also extend elements such as user preferences,
1208500	1210820	significant life events and deeply held beliefs.
1210820	1212820	Please refrain from incorporating non-essential data
1212820	1214900	or unrelated topics.
1214900	1216860	The result of your efforts should exclusively be
1216860	1217820	an updated UPD.
1217820	1219820	If the user's update doesn't contribute
1219820	1221260	any new or significant information,
1221260	1222980	your output should mirror the current UPD
1222980	1224580	as indicated below.
1224620	1226780	However, if you discover any relevant new information,
1226780	1229060	your output should feature an updated UPD
1229060	1231060	that assimilates these modifications.
1231060	1234700	So basically it's an absurd, right?
1234700	1239540	Or if there's no differences, just keep it the same,
1239540	1241540	otherwise update it.
1241540	1243660	You must prioritize brevity and clarity in your output,
1243660	1245780	combining condensed information when appropriate
1245780	1248620	to ensure succinctness and improve comprehension.
1248620	1251540	Totally rewrite or restructure UPD as necessary,
1251540	1253380	adhering to the list format.
1253380	1255580	Your response should not include explanatory text
1255580	1258260	or context, because you know how sometimes chat GPT
1258260	1261940	will say, this is your new, you know, blah, blah, blah.
1261940	1265380	So in this case, I have it very reliably
1265380	1268260	just spit out the user profile.
1269220	1271100	Oh, and then another thing is that
1271100	1273900	because we're working with a limited window,
1273900	1277740	I say the UPD should not exceed approximately 1,000 words.
1277740	1279940	When revising the UPD, give precedence
1279940	1282140	to the most significant and relevant information,
1282140	1284100	extraneous or less impactful information
1284100	1285900	should be omitted, et cetera, et cetera.
1285900	1288260	So I give it the current word count
1288260	1289620	and then the current UPD.
1289620	1292260	So that way it kind of knows, because chat GPT,
1292260	1295540	especially GPT-4 is better at counting words,
1295540	1299020	but just giving it the explicit number makes it easier,
1299020	1300500	right?
1300500	1303740	Yeah, so that's my current user profile.
1303740	1305660	So now let's dive back in here.
1305660	1307980	The hard part was updating the knowledge base.
1307980	1310180	So if this is your first run,
1310180	1312980	the collection count is gonna be zero.
1312980	1317140	And so then basically you just instantiate the whole thing.
1317140	1319300	So we take the most recent chat logs,
1319300	1323900	the main scratch pad and start a new KB article.
1323900	1326060	Now, if the collection count is not zero,
1326060	1329500	which is gonna be most of the time once you get started,
1329500	1331340	what you do is you basically do the same thing
1331340	1335020	where you say, okay, based on the most recent conversation,
1335020	1337540	give me the most relevant document,
1337540	1339540	which I probably could compress this
1339580	1342060	and just use the same information here.
1342060	1345420	Because this is the same,
1345420	1348220	this is, well, generally find the same thing.
1348220	1350300	Actually, no, that's not necessarily true
1350300	1352340	because we've updated the main scratch pad.
1352340	1353340	So scratch that.
1354460	1359460	So if the new user input and chat GPT output
1360460	1363060	connects to a different KB article,
1363060	1366140	let's go ahead and get that document and that document ID.
1366980	1368340	And what we'll do is we'll go ahead
1368340	1372220	and use system update existing KB article.
1372220	1375420	So this is a system instruction
1375420	1377420	where it basically says all the same stuff,
1377420	1379220	here's the current KB article,
1379220	1381180	and then the user will now provide you
1381180	1383300	with the new information to evaluate.
1383300	1384940	And so that is gonna be here
1384940	1387460	where you supply it the current KB article
1387460	1389820	that it found as well as the scratch pad.
1390780	1391980	And so it's like, okay, cool,
1391980	1394900	now let's do the same thing that we did with the user profile,
1394900	1396700	which is merge that information.
1396700	1398580	If there's nothing new that's relevant,
1398580	1402100	leave it alone, but if there is, go ahead and update it.
1402100	1405620	And so then it saves all this out to the DB logs.
1405620	1407900	And so if you go to DB logs out here,
1407900	1410220	you'll see a whole bunch of update statements.
1410220	1413260	So it says update documented, it gives you the UUID,
1413260	1415180	and this is the final output.
1415180	1417340	Actually, probably what I should do is modify this
1417340	1419500	so it gives you the original,
1420500	1422340	the original, the new information,
1422340	1424140	and then the final output.
1424140	1427580	So I'll add that as a to-do item, actually.
1430700	1435700	Let's see, to-do, save more info in DB logs,
1437780	1440380	probably as YAML file,
1441420	1446420	original article, new info, and then final article.
1448220	1449780	So yeah, that's something that I'll do.
1449780	1452900	Now, that being said, one of the biggest problems
1452940	1454740	that we have always had,
1454740	1456460	so this is the cream of the crop.
1456460	1458700	This is the triple crown right here.
1458700	1461020	The biggest problem that everyone has always had
1461020	1462500	with long-term chatbot memory
1462500	1465180	is how the heck do you keep track of memories?
1465180	1468260	How the heck do you keep track of different types of memories?
1468260	1470260	Like some people have internal thoughts
1470260	1473140	versus external thoughts and episodic memories
1473140	1476300	and this, that, and the other.
1476300	1481300	And you can certainly try and tag and categorize memories
1482300	1486860	with different context, right?
1486860	1488900	With metadata, and I certainly recommend that,
1488900	1490580	especially once your cognitive architectures
1490580	1492380	get more sophisticated, right?
1492380	1495260	If you do have an out-of-band like thought,
1495260	1496900	like internal private thoughts,
1496900	1498500	definitely keep that separate.
1498500	1501260	If you have external sensory information,
1501260	1502940	definitely keep that separate.
1502940	1504460	But what I'm working on here,
1504460	1509220	rather than just being a way to focus on episodic memory,
1509220	1512420	which that's what REMO was my previous attempt,
1512420	1515660	this is a way to accumulate declarative information.
1516660	1521300	And so declarative information is like a statement of fact,
1521300	1522140	right?
1522140	1523180	That's why it's called a KB article.
1523180	1524940	So rather than just a timeline,
1524940	1526580	rather than just a log,
1526580	1529340	keeping track of everything in chronological order,
1529340	1533300	the idea here is to connect new information to a KB article.
1533300	1535460	So there's no reason that you couldn't do both as well,
1535460	1538180	right, because this is how human memory works.
1538660	1541140	Human memory is associative, but it's also temporal.
1542100	1544740	Now, if the KB article gets too large,
1544740	1546900	if you added information,
1546900	1549140	and now it's more than a thousand words,
1549140	1552100	then I have another system prompt,
1552100	1554660	which you can check them all out here.
1554660	1557580	So there's system instantiate new KB,
1557580	1558740	system reflective journaling,
1558740	1561580	I just showed you what that was, system split KB.
1561580	1562820	So that's this one.
1562820	1566420	But update user profile, update KB article,
1566420	1569060	new KB article, reflective journaling and split KB.
1569060	1570300	So these are the operations.
1570300	1572500	These are the cognitive operations,
1572500	1575180	the cognitive memory operations that it's gonna be doing.
1575180	1577620	And so then basically what it does is say,
1577620	1580020	hey, we're gonna give you a long KB article,
1580020	1582740	split it into two, into two equal parts.
1583580	1587100	And so the idea here is that over time,
1587100	1589220	as your KB article gets bigger,
1589220	1592340	it'll branch and metastasize naturally.
1592660	1596740	And so you could then add a lot of additional metadata
1596740	1600540	to this, such as like access rate or related articles
1600540	1602780	or parent articles or previous articles,
1602780	1605820	which means that you can naturally evolve
1605820	1610260	a knowledge graph of your knowledge base over time.
1610260	1612860	You can also do this out of band,
1612860	1617860	just by doing semantic similarity and entity links and stuff.
1618100	1619340	But it would be really cool
1619340	1621880	to have a more sophisticated version of this
1621880	1625120	that allows it to kind of follow that branching tree
1625120	1626280	over time.
1626280	1627440	So there you have it.
1627440	1629680	That's kind of the whole thing.
1629680	1631000	So that's the chat.
1631000	1634600	And all this is just real basic, just housekeeping stuff.
1634600	1636860	And then at the end of every instance,
1636860	1639280	it does ChromaClient persist.
1639280	1640600	So now let me show you,
1642720	1645800	I included a second Python script.
1645800	1647560	So it's just ChromaDB peak,
1647560	1649760	which uses the ChromaDB peak function here.
1649760	1651760	Let me just show you that script real quick.
1652360	1653720	ChromaDB peak.
1653720	1657680	So same stuff, you instantiate the client,
1657680	1658760	you connect to it.
1659640	1661680	It tells you how many entries,
1661680	1664080	and then it will show you the top 10 entries.
1664080	1666740	And so in my case, I should only have one entry.
1669000	1671080	Let's see, so let's go up to the top.
1671080	1673880	Yep, KB presently has one entries,
1673880	1675480	here below the top 10 entries.
1675480	1676600	And so here you can see
1676600	1679060	that it's actually got several topics,
1679060	1680760	because the way that it works
1680760	1685760	is that it searches for the top one most relevant KB articles.
1687040	1690040	And so that's always gonna return the first one.
1690040	1691920	And the first one is not yet long enough
1691920	1693720	to justify splitting up.
1693720	1695560	But whatever I end up talking about,
1695560	1697200	I'll keep talking with the thing,
1697200	1698500	and eventually it'll split it up.
1698500	1700120	So in this case, it looks like
1700120	1702240	it'll probably talk about AI alignment.
1702240	1706240	And then it's gonna also talk about my obsession
1706240	1709240	with artificial intelligence and work-life balance.
1709240	1714040	Because those are kinda like two centroid in this.
1714040	1718480	So let me just go ahead and actually show you
1718480	1719920	how this will ultimately work.
1719920	1724720	So if we go to API logs, it should be the last one.
1725760	1726820	Yes, here we go.
1726820	1730680	So if I plug this in, let's go here.
1730680	1732800	So that's the message that I'm gonna want it.
1732800	1737800	And then let's grab the split, the split message.
1738320	1743040	So you'll see what I mean by how it will ultimately
1743040	1744440	kinda metastasize.
1744440	1745520	Zoom in a little bit.
1745520	1747760	All right, we're using GPT-4, temperature zero,
1747760	1750440	maximum length, a thousand.
1750440	1754360	All right, so basically what it's gonna do is,
1754360	1756960	the end says the user will now provide you
1756960	1758500	with the KB article to split.
1758500	1761420	So I submit it, and now it's gonna look at this,
1761420	1764720	and it's gonna say article one, and then article two.
1765760	1767200	So let's see what it ultimately does.
1767200	1768760	And you can see how slow it is.
1768760	1772120	So this is why ultimately you're gonna wanna do this
1772120	1776400	out of band as a threaded process or do it periodically,
1776400	1780400	maybe break it up and do it when the user's offline
1780400	1784600	or whatever, but you see how each article now
1784600	1787760	is much more specific.
1787760	1790040	And so then once you go into each of these articles
1790040	1794520	in the future, identifying factors
1794520	1797520	and seeking professional help if necessary, yeah.
1797520	1800840	And so basically it'll allow the articles
1800840	1802640	to metastasize over time.
1802640	1807640	Now that being said, if no new information
1807880	1810040	is added to an article, it won't update it.
1810040	1811640	It's that simple.
1811640	1815200	Now that being said, there will probably be a need
1815200	1819720	to do some KB article grooming over time,
1819720	1822600	but the idea is that the KB will only grow
1822640	1826120	as much as it needs to and no more, no less,
1826120	1827840	and it will only grow based on the things
1827840	1830200	that you have talked about, and it will record it
1830200	1834200	in these very succinct, concise articles.
1836280	1839640	So then what happens is that it splits these two up,
1839640	1842040	and then the final thing that the chatbot does
1842040	1844920	is it will do an update for the first one
1844920	1847120	and then add the second one.
1847120	1848240	So it's that simple.
1848240	1850120	And then when you do an update, as long as you don't,
1850120	1852320	if you don't specify the embedding,
1852320	1854920	it'll automatically recalculate the embedding,
1854920	1855760	and then you're good to go.
1855760	1858720	So I haven't quite got here yet, so it might break,
1858720	1863160	but I think this kinda, yeah, I think that's about it.
1863160	1864840	So like I said, it's over here.
1865720	1869360	ChromaDB, public, chatbot should be all set.
1870880	1874720	Yeah, all right, cool.
