WEBVTT

00:00.000 --> 00:01.400
Check it, check it, check it, check it.

00:01.400 --> 00:02.360
Okay, level check.

00:02.360 --> 00:04.040
I think we're here.

00:04.040 --> 00:07.740
All right, so background.

00:07.740 --> 00:09.360
It's been a little while since I've done,

00:09.360 --> 00:10.800
you're over here now,

00:10.800 --> 00:13.200
since I've done one of these tutorial coding videos,

00:13.200 --> 00:15.200
but I woke up at like 2.30 in the morning

00:15.200 --> 00:16.960
and just had to work on this.

00:16.960 --> 00:17.880
So I hammered it out.

00:17.880 --> 00:21.160
Basically, the purpose of today's video

00:21.160 --> 00:23.720
is to demonstrate using ChromaDB,

00:23.720 --> 00:27.040
which is a local vector database.

00:27.040 --> 00:29.360
It's basically like SQLite.

00:29.360 --> 00:30.880
If you're familiar with that,

00:30.880 --> 00:34.520
which is a self-contained SQL database, relational database,

00:34.520 --> 00:37.560
this is functionally very similar to SQLite,

00:37.560 --> 00:39.040
except it is a vector database,

00:39.040 --> 00:41.200
meaning it does semantic search.

00:41.200 --> 00:42.720
One thing that's really great about it

00:42.720 --> 00:45.800
is that it has its own built-in embeddings tools.

00:45.800 --> 00:47.600
I think it's based on BERT.

00:47.600 --> 00:49.960
Anyways, you can check out all the documentation here

00:49.960 --> 00:52.400
on trichroma.com.

00:52.400 --> 00:54.520
The Getting Started and Usage Guide is pretty good.

00:54.520 --> 00:56.760
It's not complete every now and then.

00:56.760 --> 01:00.880
I find that I have to go to the actual repo

01:00.880 --> 01:03.000
to look at how some of the internals work,

01:03.000 --> 01:05.120
but it is pretty brain-dead simple.

01:05.120 --> 01:07.400
So let me just go ahead and show you.

01:07.400 --> 01:08.720
This is my private instance.

01:08.720 --> 01:10.640
Oh, so before we get too lost,

01:10.640 --> 01:12.880
I do have a public instance,

01:12.880 --> 01:16.160
daveshap slash chroma db underscore under chatbot

01:16.160 --> 01:17.760
underscore public.

01:17.760 --> 01:20.960
I've got a little integration guide usage.

01:20.960 --> 01:23.000
It's, I mean, you probably don't need this.

01:23.000 --> 01:23.840
You can futz around with it,

01:23.840 --> 01:26.320
but this will get you started.

01:26.320 --> 01:30.960
I also use chatGBT to just get a really basic explanation

01:30.960 --> 01:31.800
of the code.

01:31.800 --> 01:34.280
You probably won't need it once you take a look at it.

01:34.280 --> 01:37.720
So off the top, let me just show you how this thing works.

01:37.720 --> 01:40.280
So it's a basic chatbot.

01:40.280 --> 01:41.760
You can see I didn't specify it.

01:41.760 --> 01:46.760
So it's getting all mini-LML6v2 from Huggingface.

01:47.280 --> 01:51.000
Great, so it's like, hey, let's see.

01:51.000 --> 01:54.620
What were we talking about last?

01:54.620 --> 01:57.220
This probably won't work because it's just gonna,

01:57.220 --> 01:58.380
in the future, it wouldn't work

01:58.380 --> 02:00.220
because it's gonna have multiple KB articles

02:00.220 --> 02:01.940
in the background.

02:01.940 --> 02:04.300
Oh, I need to explain like all that.

02:04.300 --> 02:06.740
So I know that I just said like KB articles,

02:06.740 --> 02:08.100
don't worry, we'll get to it.

02:09.460 --> 02:11.980
But anyways, I wanna show you that I just started it up

02:11.980 --> 02:14.260
and what it's gonna do is it's gonna use

02:14.260 --> 02:18.340
the last few messages to search its internal KB article

02:18.340 --> 02:19.800
for the last information,

02:19.800 --> 02:22.660
but it also has a user profile for me.

02:22.660 --> 02:24.120
In our previous conversations,

02:24.120 --> 02:26.040
we discussed AI alignment, morality, ethics,

02:26.040 --> 02:27.920
and epistemology within AI development.

02:27.920 --> 02:29.280
You also shared your plans to communicate

02:29.280 --> 02:31.480
your ideas on YouTube, unplug your computer,

02:31.480 --> 02:32.680
and spend more time outdoors,

02:32.680 --> 02:33.840
and use digital wellness settings

02:33.840 --> 02:35.360
to improve your work-life balance.

02:35.360 --> 02:36.400
Working on that.

02:37.600 --> 02:39.280
Additionally, we talked about your recent experience

02:39.280 --> 02:40.840
with severe insomnia and the importance

02:40.840 --> 02:41.980
of maintaining a healthy balance

02:41.980 --> 02:43.520
between work and personal life.

02:43.520 --> 02:46.680
Yes, that's actually why I created this chatbot.

02:46.680 --> 02:47.520
Let me show you.

02:47.520 --> 02:48.360
So there was a,

02:49.360 --> 02:50.640
there was,

02:53.200 --> 02:54.040
there was,

02:55.760 --> 02:56.860
God, my brain.

02:57.960 --> 03:01.000
I was using chat GPT as a reflective journaling tool.

03:01.000 --> 03:03.840
So what I mean by that is

03:05.520 --> 03:08.000
if you plug in this message,

03:08.000 --> 03:10.520
and I know I'm scattered, I'm all over the place,

03:10.520 --> 03:12.480
this is what happens when I have severe insomnia.

03:12.480 --> 03:15.600
Anyways, so basically I use chat GPT

03:15.600 --> 03:17.760
as a reflective journaling tool to figure out

03:17.800 --> 03:19.420
like how I'm feeling about things,

03:19.420 --> 03:21.120
because as an autistic person,

03:21.120 --> 03:22.720
I often need help with this.

03:22.720 --> 03:25.320
And I don't like journaling because just talking to a page

03:25.320 --> 03:26.880
is kind of dumb,

03:26.880 --> 03:30.960
but it's like, hey, I need to talk something out.

03:30.960 --> 03:32.440
And so anyways,

03:34.840 --> 03:38.840
by workshopping this system message with chat GPT,

03:38.840 --> 03:42.760
I came up with a pretty good reflective journaling tool.

03:42.760 --> 03:45.360
So you could say that this is a therapeutic tool,

03:45.360 --> 03:48.440
but by couching it in the language of reflective journaling,

03:48.440 --> 03:52.200
it's not like medical therapy or psychotherapy or anything.

03:53.000 --> 03:55.440
But it's just like, you know, I can say like,

03:55.440 --> 04:00.360
I have been working so hard and I don't know why.

04:00.360 --> 04:01.680
I actually do know why now,

04:01.680 --> 04:04.640
but this is kind of a shorthand of the conversation I had.

04:05.520 --> 04:07.040
Let's try and figure out, it's driving you so hard.

04:07.040 --> 04:08.280
Can you think of any specific goals

04:08.280 --> 04:10.280
that might be pushing you to this extra effort?

04:10.280 --> 04:13.040
So you see how the tone of this is much more straightforward

04:13.040 --> 04:15.040
and it's very focused by asking

04:15.040 --> 04:17.560
those like kind of probing follow-up questions.

04:17.560 --> 04:21.720
This is why, you know, it's in the investigation phase.

04:21.720 --> 04:24.320
Anyways, so I had this idea and I was like, okay,

04:24.320 --> 04:25.880
this is great, but I need,

04:25.880 --> 04:28.760
if I'm gonna use this as a long-term journaling tool,

04:28.760 --> 04:30.320
I'm gonna need this locally

04:30.320 --> 04:32.200
and I'm gonna need persistent storage

04:32.200 --> 04:36.200
because as this is just the playground,

04:36.200 --> 04:39.160
if I do a refresh, it's gone and that's no good.

04:40.600 --> 04:42.960
So actually here, let me go ahead and just save this

04:43.800 --> 04:46.640
to the, we're gonna call this the system message

04:46.640 --> 04:48.920
for reflective journaling.

04:48.920 --> 04:50.480
So you can use this if you want.

04:51.400 --> 04:54.520
All right, so anyways, so you see it has this

04:54.520 --> 04:56.840
and then you see it says updating user profile

04:56.840 --> 05:00.680
and updating KB, okay, cool.

05:00.680 --> 05:04.000
So you see that it fundamentally basic chat bot.

05:04.000 --> 05:06.000
So now let's start to unpack it.

05:06.000 --> 05:11.000
So first we will go look at the, just the chat file.

05:11.000 --> 05:14.680
So this is a super brain dead simple chat bot

05:14.680 --> 05:16.720
with infinite memory, infinite memory.

05:16.720 --> 05:18.680
I know some people got grumpy when I said

05:18.680 --> 05:20.900
that Pinecone had infinite memory.

05:20.900 --> 05:22.040
From a human standpoint,

05:22.040 --> 05:23.720
it functionally has infinite memory

05:23.720 --> 05:26.440
because, you know, this thing can hold

05:26.440 --> 05:28.160
probably a million KB articles,

05:28.160 --> 05:31.960
which is more than enough to document your entire life.

05:31.960 --> 05:36.040
So from a human standpoint, it is functionally infinite.

05:36.040 --> 05:37.720
All right, so from the top,

05:37.720 --> 05:40.160
we've got a few basic utility functions,

05:40.160 --> 05:42.540
save yaml save file, open file,

05:42.540 --> 05:46.200
and then a chat bot, which calls the GPT-4 model.

05:46.200 --> 05:48.460
You could switch this out to 3.5 turbo.

05:48.460 --> 05:50.640
If you don't have access to GPT-4 yet,

05:50.640 --> 05:52.560
it does not work as well.

05:52.560 --> 05:55.280
There's a reason that I use GPT-4 because it is smarter.

05:55.280 --> 05:57.040
I also set the temperature to zero

05:57.040 --> 05:58.700
because I don't like it to be too creative,

05:58.700 --> 06:01.760
especially with a lot of the functions that I have it doing.

06:01.760 --> 06:04.200
You actually want it to be more deterministic

06:04.200 --> 06:06.240
or mechanistic and that you wanna get

06:06.240 --> 06:07.400
the same results every time,

06:07.400 --> 06:10.640
especially when you're updating the user profile

06:10.640 --> 06:12.520
and the KB articles.

06:12.520 --> 06:15.800
You can see right here that every time you call the chat bot,

06:15.800 --> 06:20.320
I dump the whole thing to apilogs slash convo

06:21.280 --> 06:22.480
and it's a yaml file.

06:22.480 --> 06:25.380
So here's my private one.

06:25.380 --> 06:27.640
So apilogs, here's an example.

06:27.640 --> 06:31.440
So each item is gonna be here.

06:31.440 --> 06:32.480
Actually, that's not a good one

06:32.480 --> 06:34.700
because I changed the way that it saves it.

06:34.700 --> 06:37.040
Let me show you a more recent one.

06:37.040 --> 06:40.600
So the first element is always gonna be the system message

06:42.280 --> 06:44.760
that was in the last convo.

06:44.760 --> 06:46.600
So then here's the KB article

06:46.600 --> 06:49.080
and you can see that it was updating the KB article.

06:49.080 --> 06:53.840
And so each one of these items is like,

06:55.320 --> 06:56.760
you'll see, but anyways,

06:56.760 --> 06:59.560
I just wanted to show that it logs everything

06:59.560 --> 07:01.640
because well, sometimes it does things

07:01.640 --> 07:03.200
that you don't understand.

07:03.200 --> 07:06.360
All right, so that's an example of the apilog

07:06.360 --> 07:08.920
and then if the conversation,

07:08.920 --> 07:11.200
if the overall conversation is too long,

07:11.200 --> 07:15.400
it'll go ahead and trim the oldest chat message.

07:15.400 --> 07:20.400
So the chat GPT web interface does this automatically

07:20.780 --> 07:24.300
where it'll just kind of groom the backlog of messages.

07:24.300 --> 07:25.640
So we have to do this manually.

07:25.640 --> 07:28.260
So I just have it cut off at 7,000 tokens.

07:28.260 --> 07:32.480
You could probably do like 7,500 if you want to

07:32.480 --> 07:34.620
because a lot of these are gonna be limited

07:34.620 --> 07:37.940
but you have a user profile and a KB article

07:37.940 --> 07:41.700
that gets wedged in which are both up to 1,000 words

07:41.700 --> 07:43.980
which could be around 1,000 tokens.

07:43.980 --> 07:46.980
So having it trim at 7,000 is probably where you want it.

07:47.940 --> 07:51.180
So that's the primary, those are the helper functions

07:51.180 --> 07:54.300
and then you have a super straightforward,

07:54.300 --> 07:57.400
you instantiate ChromaDB right here.

07:57.400 --> 07:59.580
So you set the persistent directory

07:59.580 --> 08:02.420
which is, I have it right here, ChromaDB.

08:02.420 --> 08:06.100
So this is my instance, my personal instance of ChromaDB.

08:06.100 --> 08:08.700
It's not gonna be the one that you find up here.

08:08.700 --> 08:09.860
This is the public version.

08:09.860 --> 08:11.140
So if you go into ChromaDB,

08:11.140 --> 08:13.660
you'll see just a placeholder file

08:13.660 --> 08:16.100
so that the folder's already there.

08:16.100 --> 08:18.600
You don't need to instantiate it.

08:18.600 --> 08:21.020
Let's see, going back to here.

08:21.020 --> 08:24.780
So ChromaClient, so we instantiate the ChromaDB client.

08:24.780 --> 08:27.340
This is again, almost identical to SQLite

08:28.580 --> 08:30.020
or other similar things.

08:30.020 --> 08:31.180
So about a year ago,

08:31.180 --> 08:32.900
I tried to do basically the same thing.

08:32.900 --> 08:35.220
I called it VDB Lite for Vector Database Lite

08:35.220 --> 08:38.580
instead of SQL Lite, Structured Query Language Lite.

08:38.580 --> 08:40.660
But this company went and did the same thing

08:40.660 --> 08:41.500
and I think they've already got

08:41.500 --> 08:43.380
like a $30 million valuation or something.

08:43.380 --> 08:45.960
I was like, damn, I should have stuck with that.

08:45.960 --> 08:47.480
Anyways, they figured it out.

08:47.480 --> 08:50.060
I think it's based on the same underpinning technology.

08:50.060 --> 08:53.580
They're using an open source embedding transformer.

08:53.580 --> 08:58.060
I think they're also using the Facebook AI semantic search

08:58.060 --> 09:01.940
and the device engine and the background.

09:01.940 --> 09:03.900
Anyways, so you instantiate the client.

09:03.900 --> 09:06.660
You need to use the settings to have a persistent directory

09:06.660 --> 09:11.000
because by default, this entire thing is fully ephemeral.

09:11.000 --> 09:12.500
I think it does cache it somewhere,

09:12.500 --> 09:15.180
but I wanted to be very explicit saying save it here

09:16.620 --> 09:18.100
for reusability.

09:18.100 --> 09:20.060
And so then collection is ChromaClient,

09:20.060 --> 09:23.120
get or create collection named Knowledge Base.

09:23.120 --> 09:26.220
So this is my personal Knowledge Base.

09:26.220 --> 09:29.620
Then we instantiate the conversation

09:29.620 --> 09:32.060
with open AI, the chatbot.

09:32.060 --> 09:36.460
And in this case, because we're saving everything necessary

09:36.460 --> 09:41.460
into a personal user profile and the KB articles,

09:43.100 --> 09:45.660
like why even load the conversation?

09:46.860 --> 09:49.580
All right, so let me show you the system default message.

09:49.580 --> 09:51.820
So the system default message is where it starts.

09:51.820 --> 09:54.340
Your chatbot is whose mission is to assist

09:54.340 --> 09:55.900
the following user, your ultimate objectives

09:55.900 --> 09:57.420
are to minimize suffering and hence prosperity

09:57.420 --> 09:59.260
and promote understanding.

09:59.260 --> 10:01.120
The provided information about the user

10:01.120 --> 10:02.220
and the Knowledge Base article

10:02.220 --> 10:04.320
should be integrated into your interactions.

10:04.320 --> 10:06.540
This is private information not visible to the user.

10:06.540 --> 10:09.180
The user profile compiled from past conversations

10:09.180 --> 10:11.660
encapsulates critical details about the user

10:11.660 --> 10:13.820
which can aid in shaping your responses effectively,

10:13.820 --> 10:15.420
which you saw here.

10:15.420 --> 10:18.160
So you see like it actually knows quite a bit about me

10:18.160 --> 10:19.820
from our past conversations.

10:19.820 --> 10:22.140
This was populated here in the user profile

10:22.140 --> 10:23.460
and the KB article.

10:23.460 --> 10:26.480
So basically it says, then it also explains

10:26.480 --> 10:29.420
that the KB article is a topic compiled similarly

10:29.420 --> 10:32.060
from past dialogue serving as your long-term memory.

10:32.060 --> 10:34.520
While numerous KB articles exist in your backend system,

10:34.520 --> 10:36.320
the one provided is deemed most relevant

10:36.320 --> 10:38.420
to the current conversation topic.

10:38.420 --> 10:40.900
Note that the recall system operates autonomously

10:40.900 --> 10:43.060
and it may not always retrieve the most suitable KB.

10:43.060 --> 10:44.580
If the user is asking about a topic

10:44.580 --> 10:47.060
that doesn't seem to align with the provided KB,

10:47.060 --> 10:48.580
inform them of the memory pulled

10:48.580 --> 10:50.520
and request them to specify their query

10:50.520 --> 10:51.460
or share more details.

10:51.460 --> 10:53.340
This can assist the autonomous system

10:53.340 --> 10:54.740
in retrieving the correct memory

10:54.740 --> 10:56.580
in the subsequent interaction.

10:56.580 --> 10:59.140
So basically that's instructing it

10:59.140 --> 11:01.060
to do the same thing that a human will do

11:01.060 --> 11:03.700
if I say like, hey, Bill, do you remember that time

11:03.700 --> 11:05.880
that like I accidentally shot you in the face

11:05.880 --> 11:06.720
with a Roman candle

11:06.720 --> 11:08.620
because that's something that would happen in the South?

11:08.620 --> 11:09.660
And Bob would be like, you know,

11:09.660 --> 11:10.740
I don't actually remember that.

11:10.740 --> 11:12.740
And I'm like, oh, well, you woke up in the hospital.

11:12.740 --> 11:14.660
Oh yeah, I remember that, right?

11:14.660 --> 11:16.460
So we prime each other's memory

11:16.460 --> 11:20.020
and human prompting is not that different from AI prompting.

11:20.460 --> 11:23.140
Remember that the clarity of your responses

11:23.140 --> 11:25.140
and the relevance of your information recall

11:25.140 --> 11:27.660
are crucial to delivering an optimal user experience.

11:27.660 --> 11:29.060
Please ask any clarifying questions

11:29.060 --> 11:33.140
or provide any input further for refinement if necessary.

11:33.140 --> 11:34.600
So this system message,

11:34.600 --> 11:37.780
I actually got help from chat GPT

11:37.780 --> 11:41.180
to create a really compelling system message.

11:41.180 --> 11:43.380
And one thing that I recommend that people do

11:43.380 --> 11:46.700
is actually use chat GPT to work on prompting.

11:46.700 --> 11:48.540
So this is, you could call this meta prompting

11:48.580 --> 11:51.500
where you use the thing to prompt the thing.

11:51.500 --> 11:53.780
And the reason that this works really well as one,

11:53.780 --> 11:56.620
chat GPT is more articulate than most humans,

11:56.620 --> 11:59.660
including myself when used correctly.

11:59.660 --> 12:01.660
But another thing is one thing that I noticed

12:01.660 --> 12:03.620
is that chat GPT tends to write

12:03.620 --> 12:05.780
in a way that it will understand.

12:05.780 --> 12:08.140
And so if you say, if you give it some context,

12:08.140 --> 12:09.580
like this is what I'm trying to do,

12:09.580 --> 12:13.700
here's my current prompt, here's what's weak about it.

12:13.700 --> 12:15.020
Can you make it better?

12:15.020 --> 12:17.240
And then you tell it like, ask me some questions

12:17.240 --> 12:18.080
if you have any.

12:18.100 --> 12:19.540
But no, I see what you're trying to do.

12:19.540 --> 12:22.020
Let me write better instructions for you.

12:22.020 --> 12:24.520
So instruction writing for anyone who's like a teacher

12:24.520 --> 12:26.300
or technical writer or whatever,

12:26.300 --> 12:29.440
instruction writing is a very, very particular skill set

12:29.440 --> 12:31.000
and chat GPT is really good at it.

12:31.000 --> 12:33.360
So this is the default system message,

12:33.360 --> 12:35.680
which is then populated with the user profile

12:35.680 --> 12:37.640
and the most relevant KB article.

12:37.640 --> 12:40.720
So now that we're up to there,

12:40.720 --> 12:42.300
we enter into the infinite loop,

12:42.300 --> 12:45.520
which is just get the user text,

12:45.520 --> 12:48.520
save it to the user log or the chat logs.

12:48.520 --> 12:50.460
So the chat logs are all saved out here.

12:50.460 --> 12:55.220
It's just plain text and the file name has the timestamp

12:55.220 --> 12:56.660
in it as well as the speaker.

12:56.660 --> 12:59.440
So user chat bot, user chat bot, so on and so forth.

12:59.440 --> 13:00.660
So you got the raw logs there

13:00.660 --> 13:03.140
just in case anything goes wrong.

13:03.140 --> 13:04.520
And then I've also got DB logs,

13:04.520 --> 13:06.820
which we'll get to in just a second.

13:06.820 --> 13:11.200
So then what we do is we take the quote main scratch pad,

13:11.200 --> 13:14.180
which is just the last five messages,

13:14.180 --> 13:19.040
both for the user and for the chat bot.

13:19.040 --> 13:23.280
And this is what we use as the context of like working memory.

13:23.280 --> 13:25.380
And so then we use this main scratch pad,

13:25.380 --> 13:27.340
which is the last five messages.

13:27.340 --> 13:32.340
We use it to search for the top most relevant KB article.

13:35.620 --> 13:37.960
And in my case, I still only have one KB article.

13:37.960 --> 13:39.300
So we'll see how it gets to,

13:39.300 --> 13:40.640
and I'll go through the logic

13:40.640 --> 13:43.420
of how it builds KB articles in just a minute.

13:43.420 --> 13:44.860
So basically it just says,

13:44.860 --> 13:46.380
okay, here's the most recent thing.

13:46.380 --> 13:49.100
Find the KB article that is most relevant

13:49.100 --> 13:51.740
to the most recent bits of conversation.

13:51.740 --> 13:54.420
And then it'll pull that,

13:54.420 --> 13:56.100
and it's again, super straightforward.

13:56.100 --> 13:58.820
All you have to do is pass the text to it,

13:58.820 --> 14:01.100
and it will automatically embed it for you.

14:01.100 --> 14:03.620
And then I said, just give me the one most recent.

14:03.620 --> 14:05.840
Once we have larger context windows,

14:05.840 --> 14:10.200
or maybe if we decide that recent chat history

14:10.200 --> 14:11.220
doesn't need to be as big,

14:11.220 --> 14:14.900
like let's say we wanna trim this down to like 3000 tokens,

14:14.900 --> 14:17.340
and we decide that actually having more KB articles

14:17.340 --> 14:20.220
is more important, we can absolutely do that.

14:20.220 --> 14:22.820
And what you would do then is just change the end results

14:22.820 --> 14:27.260
to let, let's say, give me the four most relevant KB articles

14:27.260 --> 14:29.740
instead of the one most relevant.

14:29.740 --> 14:31.860
That will allow it to have a more sophisticated

14:31.860 --> 14:32.820
working memory.

14:34.260 --> 14:37.700
Yeah, so, but right now we're just doing one.

14:37.700 --> 14:41.660
And so then what we do is we repopulate

14:41.660 --> 14:43.980
that system default message with the profile

14:43.980 --> 14:45.700
and the KB article.

14:45.700 --> 14:46.980
And so that's right here.

14:46.980 --> 14:48.520
So that gets populated there.

14:50.300 --> 14:52.700
And then, let's see,

14:52.700 --> 14:55.380
it looks like I accidentally changed something.

14:55.380 --> 14:57.480
So let me go ahead and show you my user profile.

14:57.480 --> 14:58.860
I don't mind sharing this

14:58.860 --> 15:00.180
because I've already told you everything.

15:00.180 --> 15:02.260
I'm pretty much an open book.

15:02.260 --> 15:06.380
So the format for this is what I call

15:07.380 --> 15:08.420
a labeled list.

15:08.420 --> 15:12.480
And so I realized back in GPT-3

15:12.480 --> 15:16.260
that GPT handles labeled lists very, very well.

15:16.260 --> 15:19.660
So that's where you use a hyphenated list, bullet list.

15:19.660 --> 15:21.620
It understands that intrinsically.

15:21.620 --> 15:24.420
And then you label the information, right?

15:24.420 --> 15:25.840
So it's just a hash table.

15:25.840 --> 15:27.420
If you're into computer science,

15:27.420 --> 15:29.700
this is called a hash table or a dictionary

15:29.700 --> 15:31.380
where it's you label the kind of,

15:31.380 --> 15:34.380
you have a parameter and then you label the parameter, right?

15:34.380 --> 15:36.180
So the data metadata.

15:36.180 --> 15:38.340
So name, David Shapiro, y'all know that.

15:38.340 --> 15:40.220
Profession, AI and cognitive architectures,

15:40.220 --> 15:41.340
y'all know that.

15:41.340 --> 15:44.900
Interests, it's got a whole bunch of interests.

15:44.900 --> 15:46.100
And oh, by the way,

15:46.100 --> 15:48.760
this was all distilled from other conversations.

15:50.180 --> 15:51.740
Beliefs, plans,

15:51.740 --> 15:54.240
and this is of course gonna get updated over time.

15:55.240 --> 15:57.220
So for instance,

15:57.220 --> 16:00.460
during some of the conversations that I just showed you

16:00.460 --> 16:02.820
with this brand new chatbot,

16:02.820 --> 16:05.140
it added this.

16:05.180 --> 16:06.580
When I told it, this is what I'm gonna do.

16:06.580 --> 16:08.260
It said, okay, I'm gonna,

16:08.260 --> 16:09.700
I think that that's relevant

16:09.700 --> 16:11.480
to what you're gonna be doing in the future.

16:11.480 --> 16:14.940
So let me just jot that down on my scratch pad for you.

16:14.940 --> 16:18.580
Preferences, so I manually added avoid superfluous words

16:18.580 --> 16:20.220
overly for both responses.

16:20.220 --> 16:21.260
And then you know how it says,

16:21.260 --> 16:23.460
as an AI model, I don't have personal opinions.

16:23.460 --> 16:24.980
I'm like, I know, I don't care.

16:24.980 --> 16:26.940
So I said, please interpret personal input

16:26.940 --> 16:29.780
as critical evaluation and valuable feedback.

16:29.780 --> 16:31.940
I said it a little bit more explicitly than that,

16:31.940 --> 16:34.540
but the point is, is that I told it that

16:34.580 --> 16:37.820
in natural language, I was down here and I said,

16:37.820 --> 16:42.820
I know you're an AI and have no personal opinions,

16:43.180 --> 16:47.580
but when I ask for them, this is what I mean.

16:47.580 --> 16:50.020
And so when I did that, it actually recorded that

16:50.020 --> 16:53.300
automatically because after every conversation,

16:53.300 --> 16:55.300
it checks the user profile.

16:55.300 --> 16:56.860
We need to find a way to speed this up

16:56.860 --> 16:59.580
because as you saw from the user interface,

16:59.580 --> 17:00.680
it's not the best.

17:02.100 --> 17:04.100
If I had more time, mental energy and patience,

17:04.660 --> 17:07.220
I would separate this out as a thread,

17:07.220 --> 17:09.900
as a separate threading thing that can be done,

17:09.900 --> 17:13.140
or even separate it out as a separate API.

17:14.220 --> 17:17.460
One of y'all can do that, submit a pull request

17:17.460 --> 17:18.980
on the public repo.

17:18.980 --> 17:23.980
And then health, so it added this entirely on its own

17:24.140 --> 17:29.140
because I said, hey, I woke up at like 2.30 in the morning

17:30.100 --> 17:32.140
because I had to work on this.

17:32.140 --> 17:34.420
And then I said, let's talk about that.

17:34.420 --> 17:36.900
And so it decided that that was a critical piece

17:36.900 --> 17:39.140
of information to add to my user profile.

17:39.140 --> 17:41.860
So that all gets populated here.

17:41.860 --> 17:45.540
And then the logs are all stored here.

17:45.540 --> 17:50.540
So you got the API logs, which will track all of that.

17:50.740 --> 17:54.180
Everything, so I use chat GPT API for everything

17:54.180 --> 17:56.780
just because that's the only way to get to GPT-4,

17:56.780 --> 17:58.140
which is the most powerful.

17:59.140 --> 18:00.300
Let's see.

18:02.460 --> 18:07.300
So then we update the system message every time.

18:07.300 --> 18:11.500
So it says, okay, whatever you said,

18:11.500 --> 18:12.860
update the system message,

18:12.860 --> 18:15.660
then we go ahead and generate a response first

18:16.740 --> 18:20.100
because the user profile is not gonna change

18:20.100 --> 18:21.500
all that much or all that often,

18:21.500 --> 18:24.180
so we can basically assume that it'll be usable.

18:24.180 --> 18:26.860
And then the KB articles also,

18:27.500 --> 18:28.820
I figured it would actually be better

18:28.820 --> 18:32.900
to update the KB articles after you have the user input

18:32.900 --> 18:34.740
and then the machine output

18:34.740 --> 18:38.540
because if you ask chat GPT for important information

18:38.540 --> 18:40.140
or it solves a problem for you,

18:40.140 --> 18:42.460
you actually wanna capture that.

18:43.460 --> 18:46.140
So we go ahead and generate the response

18:46.140 --> 18:48.140
and append that to everything.

18:48.140 --> 18:49.940
We go ahead and log it out.

18:49.940 --> 18:52.660
Then we update the user scratch pad again.

18:52.660 --> 18:54.140
Actually, why did I do this?

18:55.180 --> 18:56.780
Oh, no, this is the first time we did it.

18:56.820 --> 18:58.980
Okay, sorry, I apologize.

18:58.980 --> 19:01.340
So then we update the user scratch pad,

19:01.340 --> 19:03.060
which the user scratch pad

19:03.060 --> 19:05.140
is only the last few user messages.

19:05.140 --> 19:09.140
And the reason for that is because we want to exclude

19:10.220 --> 19:12.540
chat GPT's response

19:12.540 --> 19:14.100
because we don't want it to get confused

19:14.100 --> 19:15.700
about things that it has said about you

19:15.700 --> 19:17.660
or inferred or whatever.

19:17.660 --> 19:20.980
We only want to record your user profile

19:20.980 --> 19:22.540
from explicitly what you say.

19:22.540 --> 19:25.860
So I just captured the last three messages that you've sent

19:25.900 --> 19:27.980
and then it does a stare and compare

19:27.980 --> 19:29.700
basically where it says, okay,

19:29.700 --> 19:32.020
based on this most recent chat message,

19:32.020 --> 19:33.140
is there any,

19:33.140 --> 19:36.100
one, is there any relevant user information?

19:36.100 --> 19:37.540
And if so, go ahead and update it.

19:37.540 --> 19:39.580
So let me show you how it updates that.

19:39.580 --> 19:42.100
So system update user profile.

19:42.940 --> 19:47.660
So this is a user profile document updater chat bot.

19:47.660 --> 19:49.780
This is the system message.

19:49.780 --> 19:52.980
Your role is to manage and update a UPD and chat bot,

19:52.980 --> 19:55.300
the chat GPT came up with this idea on its own.

19:55.740 --> 19:59.620
It created the UPD definition.

19:59.620 --> 20:01.500
Your primary responsibility is to parse updates

20:01.500 --> 20:05.020
supplied by the user, meticulously analyze them.

20:06.020 --> 20:08.500
It could also extend elements such as user preferences,

20:08.500 --> 20:10.820
significant life events and deeply held beliefs.

20:10.820 --> 20:12.820
Please refrain from incorporating non-essential data

20:12.820 --> 20:14.900
or unrelated topics.

20:14.900 --> 20:16.860
The result of your efforts should exclusively be

20:16.860 --> 20:17.820
an updated UPD.

20:17.820 --> 20:19.820
If the user's update doesn't contribute

20:19.820 --> 20:21.260
any new or significant information,

20:21.260 --> 20:22.980
your output should mirror the current UPD

20:22.980 --> 20:24.580
as indicated below.

20:24.620 --> 20:26.780
However, if you discover any relevant new information,

20:26.780 --> 20:29.060
your output should feature an updated UPD

20:29.060 --> 20:31.060
that assimilates these modifications.

20:31.060 --> 20:34.700
So basically it's an absurd, right?

20:34.700 --> 20:39.540
Or if there's no differences, just keep it the same,

20:39.540 --> 20:41.540
otherwise update it.

20:41.540 --> 20:43.660
You must prioritize brevity and clarity in your output,

20:43.660 --> 20:45.780
combining condensed information when appropriate

20:45.780 --> 20:48.620
to ensure succinctness and improve comprehension.

20:48.620 --> 20:51.540
Totally rewrite or restructure UPD as necessary,

20:51.540 --> 20:53.380
adhering to the list format.

20:53.380 --> 20:55.580
Your response should not include explanatory text

20:55.580 --> 20:58.260
or context, because you know how sometimes chat GPT

20:58.260 --> 21:01.940
will say, this is your new, you know, blah, blah, blah.

21:01.940 --> 21:05.380
So in this case, I have it very reliably

21:05.380 --> 21:08.260
just spit out the user profile.

21:09.220 --> 21:11.100
Oh, and then another thing is that

21:11.100 --> 21:13.900
because we're working with a limited window,

21:13.900 --> 21:17.740
I say the UPD should not exceed approximately 1,000 words.

21:17.740 --> 21:19.940
When revising the UPD, give precedence

21:19.940 --> 21:22.140
to the most significant and relevant information,

21:22.140 --> 21:24.100
extraneous or less impactful information

21:24.100 --> 21:25.900
should be omitted, et cetera, et cetera.

21:25.900 --> 21:28.260
So I give it the current word count

21:28.260 --> 21:29.620
and then the current UPD.

21:29.620 --> 21:32.260
So that way it kind of knows, because chat GPT,

21:32.260 --> 21:35.540
especially GPT-4 is better at counting words,

21:35.540 --> 21:39.020
but just giving it the explicit number makes it easier,

21:39.020 --> 21:40.500
right?

21:40.500 --> 21:43.740
Yeah, so that's my current user profile.

21:43.740 --> 21:45.660
So now let's dive back in here.

21:45.660 --> 21:47.980
The hard part was updating the knowledge base.

21:47.980 --> 21:50.180
So if this is your first run,

21:50.180 --> 21:52.980
the collection count is gonna be zero.

21:52.980 --> 21:57.140
And so then basically you just instantiate the whole thing.

21:57.140 --> 21:59.300
So we take the most recent chat logs,

21:59.300 --> 22:03.900
the main scratch pad and start a new KB article.

22:03.900 --> 22:06.060
Now, if the collection count is not zero,

22:06.060 --> 22:09.500
which is gonna be most of the time once you get started,

22:09.500 --> 22:11.340
what you do is you basically do the same thing

22:11.340 --> 22:15.020
where you say, okay, based on the most recent conversation,

22:15.020 --> 22:17.540
give me the most relevant document,

22:17.540 --> 22:19.540
which I probably could compress this

22:19.580 --> 22:22.060
and just use the same information here.

22:22.060 --> 22:25.420
Because this is the same,

22:25.420 --> 22:28.220
this is, well, generally find the same thing.

22:28.220 --> 22:30.300
Actually, no, that's not necessarily true

22:30.300 --> 22:32.340
because we've updated the main scratch pad.

22:32.340 --> 22:33.340
So scratch that.

22:34.460 --> 22:39.460
So if the new user input and chat GPT output

22:40.460 --> 22:43.060
connects to a different KB article,

22:43.060 --> 22:46.140
let's go ahead and get that document and that document ID.

22:46.980 --> 22:48.340
And what we'll do is we'll go ahead

22:48.340 --> 22:52.220
and use system update existing KB article.

22:52.220 --> 22:55.420
So this is a system instruction

22:55.420 --> 22:57.420
where it basically says all the same stuff,

22:57.420 --> 22:59.220
here's the current KB article,

22:59.220 --> 23:01.180
and then the user will now provide you

23:01.180 --> 23:03.300
with the new information to evaluate.

23:03.300 --> 23:04.940
And so that is gonna be here

23:04.940 --> 23:07.460
where you supply it the current KB article

23:07.460 --> 23:09.820
that it found as well as the scratch pad.

23:10.780 --> 23:11.980
And so it's like, okay, cool,

23:11.980 --> 23:14.900
now let's do the same thing that we did with the user profile,

23:14.900 --> 23:16.700
which is merge that information.

23:16.700 --> 23:18.580
If there's nothing new that's relevant,

23:18.580 --> 23:22.100
leave it alone, but if there is, go ahead and update it.

23:22.100 --> 23:25.620
And so then it saves all this out to the DB logs.

23:25.620 --> 23:27.900
And so if you go to DB logs out here,

23:27.900 --> 23:30.220
you'll see a whole bunch of update statements.

23:30.220 --> 23:33.260
So it says update documented, it gives you the UUID,

23:33.260 --> 23:35.180
and this is the final output.

23:35.180 --> 23:37.340
Actually, probably what I should do is modify this

23:37.340 --> 23:39.500
so it gives you the original,

23:40.500 --> 23:42.340
the original, the new information,

23:42.340 --> 23:44.140
and then the final output.

23:44.140 --> 23:47.580
So I'll add that as a to-do item, actually.

23:50.700 --> 23:55.700
Let's see, to-do, save more info in DB logs,

23:57.780 --> 24:00.380
probably as YAML file,

24:01.420 --> 24:06.420
original article, new info, and then final article.

24:08.220 --> 24:09.780
So yeah, that's something that I'll do.

24:09.780 --> 24:12.900
Now, that being said, one of the biggest problems

24:12.940 --> 24:14.740
that we have always had,

24:14.740 --> 24:16.460
so this is the cream of the crop.

24:16.460 --> 24:18.700
This is the triple crown right here.

24:18.700 --> 24:21.020
The biggest problem that everyone has always had

24:21.020 --> 24:22.500
with long-term chatbot memory

24:22.500 --> 24:25.180
is how the heck do you keep track of memories?

24:25.180 --> 24:28.260
How the heck do you keep track of different types of memories?

24:28.260 --> 24:30.260
Like some people have internal thoughts

24:30.260 --> 24:33.140
versus external thoughts and episodic memories

24:33.140 --> 24:36.300
and this, that, and the other.

24:36.300 --> 24:41.300
And you can certainly try and tag and categorize memories

24:42.300 --> 24:46.860
with different context, right?

24:46.860 --> 24:48.900
With metadata, and I certainly recommend that,

24:48.900 --> 24:50.580
especially once your cognitive architectures

24:50.580 --> 24:52.380
get more sophisticated, right?

24:52.380 --> 24:55.260
If you do have an out-of-band like thought,

24:55.260 --> 24:56.900
like internal private thoughts,

24:56.900 --> 24:58.500
definitely keep that separate.

24:58.500 --> 25:01.260
If you have external sensory information,

25:01.260 --> 25:02.940
definitely keep that separate.

25:02.940 --> 25:04.460
But what I'm working on here,

25:04.460 --> 25:09.220
rather than just being a way to focus on episodic memory,

25:09.220 --> 25:12.420
which that's what REMO was my previous attempt,

25:12.420 --> 25:15.660
this is a way to accumulate declarative information.

25:16.660 --> 25:21.300
And so declarative information is like a statement of fact,

25:21.300 --> 25:22.140
right?

25:22.140 --> 25:23.180
That's why it's called a KB article.

25:23.180 --> 25:24.940
So rather than just a timeline,

25:24.940 --> 25:26.580
rather than just a log,

25:26.580 --> 25:29.340
keeping track of everything in chronological order,

25:29.340 --> 25:33.300
the idea here is to connect new information to a KB article.

25:33.300 --> 25:35.460
So there's no reason that you couldn't do both as well,

25:35.460 --> 25:38.180
right, because this is how human memory works.

25:38.660 --> 25:41.140
Human memory is associative, but it's also temporal.

25:42.100 --> 25:44.740
Now, if the KB article gets too large,

25:44.740 --> 25:46.900
if you added information,

25:46.900 --> 25:49.140
and now it's more than a thousand words,

25:49.140 --> 25:52.100
then I have another system prompt,

25:52.100 --> 25:54.660
which you can check them all out here.

25:54.660 --> 25:57.580
So there's system instantiate new KB,

25:57.580 --> 25:58.740
system reflective journaling,

25:58.740 --> 26:01.580
I just showed you what that was, system split KB.

26:01.580 --> 26:02.820
So that's this one.

26:02.820 --> 26:06.420
But update user profile, update KB article,

26:06.420 --> 26:09.060
new KB article, reflective journaling and split KB.

26:09.060 --> 26:10.300
So these are the operations.

26:10.300 --> 26:12.500
These are the cognitive operations,

26:12.500 --> 26:15.180
the cognitive memory operations that it's gonna be doing.

26:15.180 --> 26:17.620
And so then basically what it does is say,

26:17.620 --> 26:20.020
hey, we're gonna give you a long KB article,

26:20.020 --> 26:22.740
split it into two, into two equal parts.

26:23.580 --> 26:27.100
And so the idea here is that over time,

26:27.100 --> 26:29.220
as your KB article gets bigger,

26:29.220 --> 26:32.340
it'll branch and metastasize naturally.

26:32.660 --> 26:36.740
And so you could then add a lot of additional metadata

26:36.740 --> 26:40.540
to this, such as like access rate or related articles

26:40.540 --> 26:42.780
or parent articles or previous articles,

26:42.780 --> 26:45.820
which means that you can naturally evolve

26:45.820 --> 26:50.260
a knowledge graph of your knowledge base over time.

26:50.260 --> 26:52.860
You can also do this out of band,

26:52.860 --> 26:57.860
just by doing semantic similarity and entity links and stuff.

26:58.100 --> 26:59.340
But it would be really cool

26:59.340 --> 27:01.880
to have a more sophisticated version of this

27:01.880 --> 27:05.120
that allows it to kind of follow that branching tree

27:05.120 --> 27:06.280
over time.

27:06.280 --> 27:07.440
So there you have it.

27:07.440 --> 27:09.680
That's kind of the whole thing.

27:09.680 --> 27:11.000
So that's the chat.

27:11.000 --> 27:14.600
And all this is just real basic, just housekeeping stuff.

27:14.600 --> 27:16.860
And then at the end of every instance,

27:16.860 --> 27:19.280
it does ChromaClient persist.

27:19.280 --> 27:20.600
So now let me show you,

27:22.720 --> 27:25.800
I included a second Python script.

27:25.800 --> 27:27.560
So it's just ChromaDB peak,

27:27.560 --> 27:29.760
which uses the ChromaDB peak function here.

27:29.760 --> 27:31.760
Let me just show you that script real quick.

27:32.360 --> 27:33.720
ChromaDB peak.

27:33.720 --> 27:37.680
So same stuff, you instantiate the client,

27:37.680 --> 27:38.760
you connect to it.

27:39.640 --> 27:41.680
It tells you how many entries,

27:41.680 --> 27:44.080
and then it will show you the top 10 entries.

27:44.080 --> 27:46.740
And so in my case, I should only have one entry.

27:49.000 --> 27:51.080
Let's see, so let's go up to the top.

27:51.080 --> 27:53.880
Yep, KB presently has one entries,

27:53.880 --> 27:55.480
here below the top 10 entries.

27:55.480 --> 27:56.600
And so here you can see

27:56.600 --> 27:59.060
that it's actually got several topics,

27:59.060 --> 28:00.760
because the way that it works

28:00.760 --> 28:05.760
is that it searches for the top one most relevant KB articles.

28:07.040 --> 28:10.040
And so that's always gonna return the first one.

28:10.040 --> 28:11.920
And the first one is not yet long enough

28:11.920 --> 28:13.720
to justify splitting up.

28:13.720 --> 28:15.560
But whatever I end up talking about,

28:15.560 --> 28:17.200
I'll keep talking with the thing,

28:17.200 --> 28:18.500
and eventually it'll split it up.

28:18.500 --> 28:20.120
So in this case, it looks like

28:20.120 --> 28:22.240
it'll probably talk about AI alignment.

28:22.240 --> 28:26.240
And then it's gonna also talk about my obsession

28:26.240 --> 28:29.240
with artificial intelligence and work-life balance.

28:29.240 --> 28:34.040
Because those are kinda like two centroid in this.

28:34.040 --> 28:38.480
So let me just go ahead and actually show you

28:38.480 --> 28:39.920
how this will ultimately work.

28:39.920 --> 28:44.720
So if we go to API logs, it should be the last one.

28:45.760 --> 28:46.820
Yes, here we go.

28:46.820 --> 28:50.680
So if I plug this in, let's go here.

28:50.680 --> 28:52.800
So that's the message that I'm gonna want it.

28:52.800 --> 28:57.800
And then let's grab the split, the split message.

28:58.320 --> 29:03.040
So you'll see what I mean by how it will ultimately

29:03.040 --> 29:04.440
kinda metastasize.

29:04.440 --> 29:05.520
Zoom in a little bit.

29:05.520 --> 29:07.760
All right, we're using GPT-4, temperature zero,

29:07.760 --> 29:10.440
maximum length, a thousand.

29:10.440 --> 29:14.360
All right, so basically what it's gonna do is,

29:14.360 --> 29:16.960
the end says the user will now provide you

29:16.960 --> 29:18.500
with the KB article to split.

29:18.500 --> 29:21.420
So I submit it, and now it's gonna look at this,

29:21.420 --> 29:24.720
and it's gonna say article one, and then article two.

29:25.760 --> 29:27.200
So let's see what it ultimately does.

29:27.200 --> 29:28.760
And you can see how slow it is.

29:28.760 --> 29:32.120
So this is why ultimately you're gonna wanna do this

29:32.120 --> 29:36.400
out of band as a threaded process or do it periodically,

29:36.400 --> 29:40.400
maybe break it up and do it when the user's offline

29:40.400 --> 29:44.600
or whatever, but you see how each article now

29:44.600 --> 29:47.760
is much more specific.

29:47.760 --> 29:50.040
And so then once you go into each of these articles

29:50.040 --> 29:54.520
in the future, identifying factors

29:54.520 --> 29:57.520
and seeking professional help if necessary, yeah.

29:57.520 --> 30:00.840
And so basically it'll allow the articles

30:00.840 --> 30:02.640
to metastasize over time.

30:02.640 --> 30:07.640
Now that being said, if no new information

30:07.880 --> 30:10.040
is added to an article, it won't update it.

30:10.040 --> 30:11.640
It's that simple.

30:11.640 --> 30:15.200
Now that being said, there will probably be a need

30:15.200 --> 30:19.720
to do some KB article grooming over time,

30:19.720 --> 30:22.600
but the idea is that the KB will only grow

30:22.640 --> 30:26.120
as much as it needs to and no more, no less,

30:26.120 --> 30:27.840
and it will only grow based on the things

30:27.840 --> 30:30.200
that you have talked about, and it will record it

30:30.200 --> 30:34.200
in these very succinct, concise articles.

30:36.280 --> 30:39.640
So then what happens is that it splits these two up,

30:39.640 --> 30:42.040
and then the final thing that the chatbot does

30:42.040 --> 30:44.920
is it will do an update for the first one

30:44.920 --> 30:47.120
and then add the second one.

30:47.120 --> 30:48.240
So it's that simple.

30:48.240 --> 30:50.120
And then when you do an update, as long as you don't,

30:50.120 --> 30:52.320
if you don't specify the embedding,

30:52.320 --> 30:54.920
it'll automatically recalculate the embedding,

30:54.920 --> 30:55.760
and then you're good to go.

30:55.760 --> 30:58.720
So I haven't quite got here yet, so it might break,

30:58.720 --> 31:03.160
but I think this kinda, yeah, I think that's about it.

31:03.160 --> 31:04.840
So like I said, it's over here.

31:05.720 --> 31:09.360
ChromaDB, public, chatbot should be all set.

31:10.880 --> 31:14.720
Yeah, all right, cool.

