WEBVTT

00:00.000 --> 00:06.040
Hey guys, I'm Anil, and this is Pocket.

00:06.040 --> 00:11.200
Pocket is a card-sized modular computer that can be instantly shaped into all kinds

00:11.200 --> 00:17.640
of gadgets and inventions by laying out whatever blocks fit exactly your specific application.

00:17.640 --> 00:25.560
With today's demo, I'm excited to share what Pocket has grown to in the last few months.

00:25.560 --> 00:32.960
Using a powerful upgrade I made to the core board, lots of new blocks, a dashboard to

00:32.960 --> 00:40.120
command everything, the potential for makers, for edge computing, and for home automation,

00:40.120 --> 00:46.360
and some thoughts on how I envision modular electronics can behave.

00:46.360 --> 00:51.040
The project has come really far, and in the coming weeks, I plan to finalize the current

00:51.040 --> 00:57.360
designs for the PCBs, and for molded casings with of course a better matte finish than

00:57.360 --> 00:59.560
the current 3D prints.

00:59.560 --> 01:04.520
The aim now is to produce an initial batch of pockets and get them into the hands of

01:04.520 --> 01:06.720
those who have shown interest.

01:06.720 --> 01:08.880
So now, the demo.

01:08.880 --> 01:12.600
As usual, let's get started with the basics.

01:12.600 --> 01:18.800
The Pocket Core Board provides an interactive, magnetic workspace to quickly create devices

01:18.800 --> 01:26.720
and edit them by experimenting with various blocks.

01:26.720 --> 01:29.840
These three are just a hello world example.

01:29.840 --> 01:34.920
The ecosystem already has a large variety of blocks, and the signal grid makes it equally

01:34.920 --> 01:41.840
easy to hot plug even the more complex blocks, like this SPI-based display, which quickly

01:41.840 --> 01:46.800
yields an app GUI, or a behind the scenes monitor for the blocks.

01:48.800 --> 02:02.480
Through Pocket's interplay of the software modules, we can effortlessly create new combinations

02:02.480 --> 02:17.400
in almost all well-defined cases.

02:17.400 --> 02:23.120
Our agnostic software, through dynamic switching, allows us, for example, to swap the previous

02:23.120 --> 02:31.960
SPI display with a bigger HDMI one, this time with a capacitive touchscreen.

02:31.960 --> 02:38.600
With a modularly insertable Pi compute processor, Pocket can even run Linux, which opens up

02:38.600 --> 02:42.560
powerful possibilities with some of the blocks.

02:42.560 --> 02:46.840
Before those, let's explore the modular foundation.

02:46.840 --> 02:53.480
Each block's behavior is represented with class instances in the core microprocessor,

02:53.480 --> 03:00.480
but the true magic of modular hardware happens when multiple blocks combine into an application,

03:00.480 --> 03:23.680
or even activate a new one.

03:23.680 --> 03:46.720
Note that the overall device has fluid behavior, subject to the user's taste specifically

03:46.720 --> 03:51.840
depending on the exact hardware combination or software choices.

03:51.840 --> 03:57.440
In this sense, the project emphasizes not only hardware agnostic software, but also

03:57.440 --> 04:01.000
software agnostic hardware.

04:01.000 --> 04:06.440
Now let's quickly turn Pocket into a full-blown traditional computer by adding our desired

04:06.440 --> 04:24.760
accessories.

04:24.760 --> 04:31.920
With the HDMI block connected to a monitor, I'll explore one of my favorite recent additions,

04:31.920 --> 04:33.680
the dashboard.

04:33.680 --> 04:39.800
Think of the dashboard as the front end, a dynamic cockpit for the board's activities.

04:39.800 --> 04:46.000
It's made with JavaScript, Python, and WebSockets, and it can be used as served on Pocket itself

04:46.000 --> 04:51.940
or through a display block or with any mobile or other device on the same network.

04:51.940 --> 04:59.060
The control center area shows an easily programmable tile grid to view and control everything related

04:59.060 --> 05:01.040
to our running app.

05:01.040 --> 05:04.580
Apps are similar to phone apps, but for hardware.

05:04.580 --> 05:10.980
The sidebar contains the block monitor showing all currently connected blocks, and most importantly

05:10.980 --> 05:12.700
the app selector.

05:12.700 --> 05:17.660
Since Pocket is a shapeable device, apps are more like situational skills.

05:17.660 --> 05:23.680
An app can be manually selected, or the board auto-loads the best-matching app seamlessly

05:23.680 --> 05:27.400
as the user adjusts blocks.

05:27.400 --> 05:33.020
For this, I implemented an algorithm that scores all apps continuously based on multiple

05:33.020 --> 05:40.020
factors, primarily the match to current blocks, but also block rolls and positions, and app

05:40.020 --> 05:41.780
usage frequency.

05:41.780 --> 05:47.740
The Pocket smoothly transitions to at least boilerplate behaviors for blocks in all cases,

05:47.740 --> 05:52.620
and often the exact desired app.

05:52.620 --> 05:56.340
Let's take a closer look at an app.

05:56.340 --> 06:01.700
This one has some tiles to control a camera and view the camera's output.

06:01.700 --> 06:06.540
The modular hardware has analogous software pieces, and apps can adapt their behavior

06:06.540 --> 06:08.260
to attached blocks.

06:08.260 --> 06:19.940
For instance, a dashboard tile can do a photo capture action, but so can physical blocks.

06:19.940 --> 06:25.980
This customizability is especially amplified if a user programs the device's behavior

06:25.980 --> 06:33.820
with expected relationships between blocks and any functions.

06:33.820 --> 06:39.060
Because attaching blocks augments an app's feature set, the control center updates individual

06:39.060 --> 06:49.980
tiles accordingly.

06:49.980 --> 07:15.540
New tiles can also appear based on which blocks are currently active.

07:16.540 --> 07:24.260
Notice that changing to a compatible block, like a different camera, allows the device

07:24.260 --> 07:33.940
to keep operating with the same app, though differently.

07:33.940 --> 07:40.180
Altogether, the apps produce incrementally growing behavior based on the blocks attached.

07:40.180 --> 07:45.380
While the dashboard can act as the eyes and hands for whatever is the user's constructed

07:45.380 --> 08:15.180
gadget, letting you operate what the pocket sees and does.

08:15.180 --> 08:23.180
Mixing and matching the hardware ingredients can create different types of rich sensory

08:23.180 --> 08:29.060
interaction with the physical world, all with minimal power consumption.

08:29.060 --> 08:34.380
Most use cases, like this one, even with a display block attached, can run on the battery

08:34.380 --> 08:35.380
block.

08:35.380 --> 08:41.340
Let's really test the limits now of this kind of edge computing.

08:41.340 --> 08:45.980
While Pocket's original microcontroller could run a simple camera by itself, adding

08:45.980 --> 08:52.180
the PyCompute quad-core processor gives it state-of-the-art capabilities, such as TensorFlow

08:52.180 --> 09:06.060
based object detection.

09:06.060 --> 09:13.060
This inferencing process can work decently, even in not so ideal conditions.

09:13.060 --> 09:17.860
To avoid going outside, let's put a laptop in front of the camera and take a drive into

09:17.860 --> 09:25.220
a random YouTube video.

09:25.220 --> 09:32.460
A full machine learning and detection pipeline is not bad for a $25 processor chip, but can

09:32.460 --> 09:34.460
we do better?

09:34.860 --> 09:40.540
Motivated by dozens of comments from community members, I spent the last several months upgrading

09:40.540 --> 09:47.580
and testing Pocket's PCB design to work with a CPU that's substantially more powerful.

09:47.580 --> 09:56.460
Specifically, the Broadcom BCM2711 that you may know from the Raspberry Pi 4B.

09:56.460 --> 09:59.900
So 1.5GHz at our disposal.

09:59.900 --> 10:08.460
Let's take the new version of Pocket for a test drive.

10:08.460 --> 10:14.060
With the CM4 processor in place, I'll run the numbers again now.

10:14.060 --> 10:18.980
And just like that, we get twice the frame computation speed on the same challenge based

10:18.980 --> 10:30.740
on a deep learning neural network.

10:30.740 --> 10:39.460
Now there is a way to make this even faster.

10:39.460 --> 10:42.140
Almost 10 times faster.

10:42.140 --> 10:44.700
This one's a bit of a trick.

10:44.700 --> 10:50.180
This particular block circuitry is based around the Edge TPU, an ASIC chip that was

10:50.180 --> 10:56.580
developed by Google to boost machine learning models and can perform 4 trillion operations

10:56.580 --> 10:58.100
per second.

10:58.100 --> 11:03.060
For this block's current version, I soldered circuitry directly taken from Google's dev

11:03.060 --> 11:04.060
board.

11:04.060 --> 11:10.900
However, I'm also working on a much smaller accelerator block that uses a Kendrite K210

11:10.900 --> 11:13.420
chip.

11:13.420 --> 11:20.060
And also one for a tiny 10x15mm version of the exact same Google TPU.

11:20.060 --> 11:26.740
But this will appear in a future video when the chip is actually in stock.

11:26.740 --> 11:32.420
Even without a task specialized block, of course, the newer Broadcom CPU helps Pocket

11:32.420 --> 11:48.500
achieve very respectable speeds for complex tasks, such as media pipe pose estimation

11:48.500 --> 12:07.500
and visual tracking

12:07.500 --> 12:23.620
and even stereo depth vision.

12:23.620 --> 12:28.980
As a side effect of the recent board upgrade, I decided to also create some special hardware

12:28.980 --> 12:42.460
accessories, like this SSD block based on the PCIe interface.

12:42.460 --> 12:46.620
While I haven't officially integrated it into the dashboard's apps yet, I've already

12:46.620 --> 12:52.540
gotten the block working and it should supply an immense amount of storage for portable

12:52.540 --> 12:55.220
and stationary applications alike.

12:55.220 --> 12:59.420
Alright, next, home automation possibilities.

12:59.420 --> 13:06.100
Recently, I wrote a lot of code to marry Pocket's blocks with smart home frameworks.

13:06.100 --> 13:13.060
The core board can now run a home assistant server and ESP home as one-click apps.

13:13.060 --> 13:18.980
Pocket's internal Wi-Fi, of course, can directly monitor various home appliances.

13:18.980 --> 13:24.220
But imagine we want to talk to devices that speak the very common SIGBI protocol, or really

13:24.220 --> 13:26.420
anything else.

13:26.420 --> 13:32.060
In past videos, I showed RF hardware, such as a Lora block.

13:32.060 --> 13:38.980
This time, a new block based on the Texas Instruments CC2531 can give us SIGBI communication

13:38.980 --> 14:00.060
within seconds.

14:00.060 --> 14:06.820
Likewise, it's possible to couple basically any Pocket blocks to cards or devices.

14:06.820 --> 14:15.180
For instance, a camera block.

14:15.180 --> 14:20.700
Since Pocket boards can wirelessly talk to each other, this opens up a whole array of

14:20.700 --> 14:24.660
DIY possibilities for devices.

14:24.660 --> 14:31.660
For a more fun demonstration, I'll use a half-size pocket I've been experimenting with.

14:31.660 --> 14:37.620
This case does require some very basic ESP home programming.

14:37.620 --> 14:45.260
On one Pocket, I create a button block action.

14:45.260 --> 14:51.300
And on our earlier Pocket, I pair this action's event with the light bulb through the SIGBI

14:51.300 --> 14:52.300
block.

14:52.820 --> 15:04.980
Thus, within minutes, we can create flexible and enjoyable interactions.

15:04.980 --> 15:09.500
One of the project's goals has been to make readily deployable gadgets.

15:09.500 --> 15:14.740
Here are two simple examples.

15:14.740 --> 15:21.540
With all of Pocket's modular computing capabilities, the ceiling is really just the user's creativity.

15:22.540 --> 15:28.700
Here's a mix of everything, human-machine interface.

15:28.700 --> 15:36.700
For this assembly, I'll also slide in a big capacitive touch display.

15:36.700 --> 15:42.100
And I'll use the new screwless method that I've designed recently for side block expansion

15:42.100 --> 15:44.100
of Pocket.

15:52.540 --> 15:54.780
That's all for now.

15:54.780 --> 15:56.460
Go to pocket.ai.

15:56.460 --> 16:02.620
I'm taking some early access sign-ups there, and also, you can see lots of project details.

16:02.620 --> 16:05.020
Thanks for all the support so far, guys.

16:05.020 --> 16:06.580
Stay tuned for the next update.

