start	end	text
0	6040	Hey guys, I'm Anil, and this is Pocket.
6040	11200	Pocket is a card-sized modular computer that can be instantly shaped into all kinds
11200	17640	of gadgets and inventions by laying out whatever blocks fit exactly your specific application.
17640	25560	With today's demo, I'm excited to share what Pocket has grown to in the last few months.
25560	32960	Using a powerful upgrade I made to the core board, lots of new blocks, a dashboard to
32960	40120	command everything, the potential for makers, for edge computing, and for home automation,
40120	46360	and some thoughts on how I envision modular electronics can behave.
46360	51040	The project has come really far, and in the coming weeks, I plan to finalize the current
51040	57360	designs for the PCBs, and for molded casings with of course a better matte finish than
57360	59560	the current 3D prints.
59560	64520	The aim now is to produce an initial batch of pockets and get them into the hands of
64520	66720	those who have shown interest.
66720	68880	So now, the demo.
68880	72600	As usual, let's get started with the basics.
72600	78800	The Pocket Core Board provides an interactive, magnetic workspace to quickly create devices
78800	86720	and edit them by experimenting with various blocks.
86720	89840	These three are just a hello world example.
89840	94920	The ecosystem already has a large variety of blocks, and the signal grid makes it equally
94920	101840	easy to hot plug even the more complex blocks, like this SPI-based display, which quickly
101840	106800	yields an app GUI, or a behind the scenes monitor for the blocks.
108800	122480	Through Pocket's interplay of the software modules, we can effortlessly create new combinations
122480	137400	in almost all well-defined cases.
137400	143120	Our agnostic software, through dynamic switching, allows us, for example, to swap the previous
143120	151960	SPI display with a bigger HDMI one, this time with a capacitive touchscreen.
151960	158600	With a modularly insertable Pi compute processor, Pocket can even run Linux, which opens up
158600	162560	powerful possibilities with some of the blocks.
162560	166840	Before those, let's explore the modular foundation.
166840	173480	Each block's behavior is represented with class instances in the core microprocessor,
173480	180480	but the true magic of modular hardware happens when multiple blocks combine into an application,
180480	203680	or even activate a new one.
203680	226720	Note that the overall device has fluid behavior, subject to the user's taste specifically
226720	231840	depending on the exact hardware combination or software choices.
231840	237440	In this sense, the project emphasizes not only hardware agnostic software, but also
237440	241000	software agnostic hardware.
241000	246440	Now let's quickly turn Pocket into a full-blown traditional computer by adding our desired
246440	264760	accessories.
264760	271920	With the HDMI block connected to a monitor, I'll explore one of my favorite recent additions,
271920	273680	the dashboard.
273680	279800	Think of the dashboard as the front end, a dynamic cockpit for the board's activities.
279800	286000	It's made with JavaScript, Python, and WebSockets, and it can be used as served on Pocket itself
286000	291940	or through a display block or with any mobile or other device on the same network.
291940	299060	The control center area shows an easily programmable tile grid to view and control everything related
299060	301040	to our running app.
301040	304580	Apps are similar to phone apps, but for hardware.
304580	310980	The sidebar contains the block monitor showing all currently connected blocks, and most importantly
310980	312700	the app selector.
312700	317660	Since Pocket is a shapeable device, apps are more like situational skills.
317660	323680	An app can be manually selected, or the board auto-loads the best-matching app seamlessly
323680	327400	as the user adjusts blocks.
327400	333020	For this, I implemented an algorithm that scores all apps continuously based on multiple
333020	340020	factors, primarily the match to current blocks, but also block rolls and positions, and app
340020	341780	usage frequency.
341780	347740	The Pocket smoothly transitions to at least boilerplate behaviors for blocks in all cases,
347740	352620	and often the exact desired app.
352620	356340	Let's take a closer look at an app.
356340	361700	This one has some tiles to control a camera and view the camera's output.
361700	366540	The modular hardware has analogous software pieces, and apps can adapt their behavior
366540	368260	to attached blocks.
368260	379940	For instance, a dashboard tile can do a photo capture action, but so can physical blocks.
379940	385980	This customizability is especially amplified if a user programs the device's behavior
385980	393820	with expected relationships between blocks and any functions.
393820	399060	Because attaching blocks augments an app's feature set, the control center updates individual
399060	409980	tiles accordingly.
409980	435540	New tiles can also appear based on which blocks are currently active.
436540	444260	Notice that changing to a compatible block, like a different camera, allows the device
444260	453940	to keep operating with the same app, though differently.
453940	460180	Altogether, the apps produce incrementally growing behavior based on the blocks attached.
460180	465380	While the dashboard can act as the eyes and hands for whatever is the user's constructed
465380	495180	gadget, letting you operate what the pocket sees and does.
495180	503180	Mixing and matching the hardware ingredients can create different types of rich sensory
503180	509060	interaction with the physical world, all with minimal power consumption.
509060	514380	Most use cases, like this one, even with a display block attached, can run on the battery
514380	515380	block.
515380	521340	Let's really test the limits now of this kind of edge computing.
521340	525980	While Pocket's original microcontroller could run a simple camera by itself, adding
525980	532180	the PyCompute quad-core processor gives it state-of-the-art capabilities, such as TensorFlow
532180	546060	based object detection.
546060	553060	This inferencing process can work decently, even in not so ideal conditions.
553060	557860	To avoid going outside, let's put a laptop in front of the camera and take a drive into
557860	565220	a random YouTube video.
565220	572460	A full machine learning and detection pipeline is not bad for a $25 processor chip, but can
572460	574460	we do better?
574860	580540	Motivated by dozens of comments from community members, I spent the last several months upgrading
580540	587580	and testing Pocket's PCB design to work with a CPU that's substantially more powerful.
587580	596460	Specifically, the Broadcom BCM2711 that you may know from the Raspberry Pi 4B.
596460	599900	So 1.5GHz at our disposal.
599900	608460	Let's take the new version of Pocket for a test drive.
608460	614060	With the CM4 processor in place, I'll run the numbers again now.
614060	618980	And just like that, we get twice the frame computation speed on the same challenge based
618980	630740	on a deep learning neural network.
630740	639460	Now there is a way to make this even faster.
639460	642140	Almost 10 times faster.
642140	644700	This one's a bit of a trick.
644700	650180	This particular block circuitry is based around the Edge TPU, an ASIC chip that was
650180	656580	developed by Google to boost machine learning models and can perform 4 trillion operations
656580	658100	per second.
658100	663060	For this block's current version, I soldered circuitry directly taken from Google's dev
663060	664060	board.
664060	670900	However, I'm also working on a much smaller accelerator block that uses a Kendrite K210
670900	673420	chip.
673420	680060	And also one for a tiny 10x15mm version of the exact same Google TPU.
680060	686740	But this will appear in a future video when the chip is actually in stock.
686740	692420	Even without a task specialized block, of course, the newer Broadcom CPU helps Pocket
692420	708500	achieve very respectable speeds for complex tasks, such as media pipe pose estimation
708500	727500	and visual tracking
727500	743620	and even stereo depth vision.
743620	748980	As a side effect of the recent board upgrade, I decided to also create some special hardware
748980	762460	accessories, like this SSD block based on the PCIe interface.
762460	766620	While I haven't officially integrated it into the dashboard's apps yet, I've already
766620	772540	gotten the block working and it should supply an immense amount of storage for portable
772540	775220	and stationary applications alike.
775220	779420	Alright, next, home automation possibilities.
779420	786100	Recently, I wrote a lot of code to marry Pocket's blocks with smart home frameworks.
786100	793060	The core board can now run a home assistant server and ESP home as one-click apps.
793060	798980	Pocket's internal Wi-Fi, of course, can directly monitor various home appliances.
798980	804220	But imagine we want to talk to devices that speak the very common SIGBI protocol, or really
804220	806420	anything else.
806420	812060	In past videos, I showed RF hardware, such as a Lora block.
812060	818980	This time, a new block based on the Texas Instruments CC2531 can give us SIGBI communication
818980	840060	within seconds.
840060	846820	Likewise, it's possible to couple basically any Pocket blocks to cards or devices.
846820	855180	For instance, a camera block.
855180	860700	Since Pocket boards can wirelessly talk to each other, this opens up a whole array of
860700	864660	DIY possibilities for devices.
864660	871660	For a more fun demonstration, I'll use a half-size pocket I've been experimenting with.
871660	877620	This case does require some very basic ESP home programming.
877620	885260	On one Pocket, I create a button block action.
885260	891300	And on our earlier Pocket, I pair this action's event with the light bulb through the SIGBI
891300	892300	block.
892820	904980	Thus, within minutes, we can create flexible and enjoyable interactions.
904980	909500	One of the project's goals has been to make readily deployable gadgets.
909500	914740	Here are two simple examples.
914740	921540	With all of Pocket's modular computing capabilities, the ceiling is really just the user's creativity.
922540	928700	Here's a mix of everything, human-machine interface.
928700	936700	For this assembly, I'll also slide in a big capacitive touch display.
936700	942100	And I'll use the new screwless method that I've designed recently for side block expansion
942100	944100	of Pocket.
952540	954780	That's all for now.
954780	956460	Go to pocket.ai.
956460	962620	I'm taking some early access sign-ups there, and also, you can see lots of project details.
962620	965020	Thanks for all the support so far, guys.
965020	966580	Stay tuned for the next update.
