{"text": " These are the graphics from Unreal Engine 5. They're quite good. The engine is simulating physics so well, sometimes it can be hard to tell the difference from reality. And to accomplish this, something that is absolutely essential is numerical linear algebra, or NLA, which is a study of linear algebra applied with computers, and is better labeled applied linear algebra because that's really all it is. Now without it, there are no good computer graphics. Mapping 3D objects to the 2D view screen, that's gone. Rotating those 3D objects, gone. Rasterization, where triangle vertices are used to determine pixel color intensities, also gone. But seriously, without NLA, a lack of video games would be the least of our problems. We also wouldn't have weather forecasting, many types of data compression, finite element methods for stress testing, compressed sensing for MRI, fluid dynamic simulations, recommendation systems, search, and of course deep neural networks. An argument from one of the leaders of the field, the late Gene Gulub, was to point out that of the top 10 most important algorithms of the 20th century, six of them related to numerical linear algebra. And that was almost 20 years ago. Now I decided to make this video when I stumbled upon this paper, Randomized Numerical Linear Algebra. In it I found some remarkable claims. They show how some well-placed randomness can speed up some NLA algorithms by an order of magnitude. In other words, we're looking at a potential breakthrough in scientific computing. And randomization for speed seems like a really bizarre idea. Why would an algorithm that wants to compute something exactly be super sped up by doing something akin to coin flipping? Now to fully appreciate this, we'll need some background. But first, this episode is brought to you by True Theta, the Data Science Consultancy. More about us at the end of the episode. The first thing we need to ask is, what is linear algebra? Simply put, it's the mathematics of vectors and matrices. We'll start with a vector. A vector is just a list of numbers and can be imagined geometrically as an arrow. Now, this is just a wimpy 2D vector. The powerful stuff comes from using n-dimensional vectors, which can represent complicated things. Everything from images to words to audio to a person's credit profile. Basically, most things you can think of can be represented as a vector. Now we consider a matrix. On the surface, a matrix is just a grid of numbers. Or you can consider it a list of vectors. As a list of vectors, you can imagine it as a bunch of arrows. When a matrix represents data, they're commonly represented as points. But in linear algebra, matrices represent something else. They relate to functions. In our case, a function is something that receives an input vector x and gives back a vector y, possibly of a different dimension. And it needs to do that for a range of x values. If we were to increase the dimensions, the function would be connecting exponentially huge regions. In this sense, functions are very information-rich objects, since they represent an enormous set of connections. But handling all that information explicitly is often impossible. So, we make a fantastically liberating assumption. We assume the function is linear, which means it's like a line, or a plane, or something similarly flat in higher dimensions. More rigorously, linearity comes from some algebraic properties, but we don't need to get into all that. What's important is why linearity is useful. Consider two cases, where the inputs and outputs are both one-dimensional. In both cases, suppose we'd like to guess the function, after being shown two input-output pairs. Now, on the left, we don't make any assumptions about the function. It can be any function. On the right, we assume the function is linear. With this, can we determine the functions? Well, when we assume linearity, yes, it's easy. There's only one linear function that goes through these two points. But without the assumption, there are infinite functions that pass through those two points. And we have no way to pick one. This is totally essential. Linearity allows us to determine these information-rich objects' functions with very little. Basically, to know a linear function in one region is to know it in all regions. This fact is so useful, much of applied mathematics involves making the linearity assumption wherever we can get away with it. Doing so allows us to extrapolate in space, or time, or something else. And crucially, it makes the exceptionally powerful theorems of linear algebra available to the problem at hand. If we assume linearity, we essentially get an instruction manual for computing useful things. So how does a linear function relate to a matrix? Simply, if f of x is a linear function, then f of x equals a times x for some matrix A. Saying A times x is to do matrix multiplication, which is a simple but tedious calculation of sums and products. Please don't think about the details. Okay, now we can ask, what is numerical linear algebra? Well, that's the study of applying linear algebra fast and efficiently with computers. This brings two fundamental challenges. The first is the computer's finite precision. The second is that fast algorithms are machine dependent. Let's start with the computer's finite precision. If a point is selected at random, it almost surely can't be represented exactly in the machine. The machine will have to truncate it to an approximation, creating a small error. This fact, as harmless as it seems, hardly complicates everything. One effect is, to a computer, addition isn't always associative. Sometimes, adding numbers A and B before adding to C doesn't give the same answer as summing B and C first. And when an algorithm fails to anticipate issues like this, it's prone to incorrect answers. We say such algorithms are numerically unstable. Now, we consider the second challenge, that fast algorithms are machine dependent. Let's say we want to multiply two matrices A and B. By how matrix multiplication is defined, the resulting matrix is the sum product between every row of A with every column of B. That's how it's defined, but how is it computed? Well, it helps to imagine it like this, where we are looking to fill up the cells of this matrix C. Each cell corresponds to a combination of a row of A with a column of B. From here, there are several ways we could order the computation. One way is, we could finish the computation of each cell of C before moving on to the next cell. That's probably how you do it after you heard my definition. But there's another way. We could proceed like this, finishing the use of each column of A and row of B, which is swapped from how I define matrix multiplication, but gives an equivalent answer. And there are other ways of ordering operations. The problem is, ordering makes a difference for the algorithm's speed. They bring different amounts of data movement and differing data accessing patterns. And this speed depends, at the least, on A and B's dimensions, how they are physically stored in memory, and how much can be stored in a processor's registries, which are very small but provide extremely fast access. And this is just one flavor of the algorithm's machine dependence. Everything from the memory layout to the processor to the operating system to the capacity for parallelism determines the algorithm's speed. And these things must be anticipated in all their diversity across users and time to design the best NLA algorithm. As you can imagine, this gets very complicated very quickly. To appreciate what's offered by randomized NLA, we'll also need some history. John von Neumann is often named when discussing the origin of the field. Because in 1947, he and his co-author Herman Goldsten published one of the earliest uses of computers for applying linear algebra. But this isn't a relevant origin for modern NLA software, since the programming paradigms of the 40s and 50s were just so different, very little of it persists today. The code was terribly verbose, machine dependent, hard to share, and just an absolute headache to write. So in 1957, IBM created the Fortran language, designed to ease programming for scientific computing and provide some machine independence. And in the 1960s, James Hardy Wilkinson and his colleagues collected and published papers on how to apply linear algebra with computers, but not with the Fortran language. Most of their papers discussed how a specific algorithm could be applied to a category of matrix. This work earned Wilkinson a Turing Award, and along with Fortran, it created the environment from which modern NLA software was born. That happened in 1979, when BLOZ came out from the Jet Propulsion Laboratory in California, the basic linear algebra sub-program for Fortran. It provided a small set of vector operations that were fast and tested across a variety of machines. Most importantly, they could implement NLA algorithms, like those proposed by Wilkinson. And so in 1979, LINPAC came out, which was built on top of BLOZ, and had been developed over the previous decade, primarily for supercomputers. It wasn't the first NLA package, but it was a major step forward in speed, reliability, and distribution across the scientific community. But at the same time, computer architectures were evolving. And so BLOZ 2 was released in 1980 form to perform matrix vector operations, which took advantage of the vector processor CPUs of the time. But architectures changed again, to ones with shared memory cache-based parallel processing. And so BLOZ 3 was released in 1990, which performed fast matrix-matrix operations. And this is a perpetual story. Architectures changed, so BLOZ 1, 2, and 3 need to be updated. Architectures changed again, and so we need more software updates. But now, to fully leverage BLOZ 1, 2, and 3, a new NLA package was needed. In 1992, LAPAC was released, after having been proposed five years earlier. The authors included some modern NLA heroes, like Jack Dungara and James Demo. Both have been involved ever since, architecting, writing, standardizing, testing, optimizing, and communicating the software to produce what it is today. And that's quite a feat. Today in the 2020s, an absolutely enormous amount of linear algebra gets applied with LAPAC or BLOZ. If you're doing any linear algebra with MATLAB, Python, or C++ or any other language you can name, it's very likely you're using this software or very close derivative of it. And if you aren't, you're probably doing something wrong. Okay, and now I need to confess this short history is a major oversimplification. LAPAC exists in an ecosystem dedicated to scientific computing. And so my cute linear story fails to represent the entangled, messy truth of the matter. To mitigate this, I'll give a very quick tour of the current software landscape. LAPAC doesn't work with distributed memory parallel processing, so we have ScalaPAC relying on PBLOZ, which performs many of the same operations as BLOZ, but executed across a large network of heterogeneous machines. LAPAC isn't designed for sparse matrices, so there have been efforts to capture the gains of sparsity, but none have been received quite like LAPAC. LAPAC also isn't designed for GPUs and modern multicore architectures, so we have MAGMA, which enables use of NVIDIA and AMD's fancy GPU hardware. Speaking of NVIDIA, we also have Kubloss. See, BLOZ comes with a bunch of knobs that need to be optimized for particular hardware, and so Kubloss has those knobs set for NVIDIA GPUs, among other things. Also, Apple has Accelerate to do that same tuning for their hardware. And since tuning knobs for hardware isn't easy, we also have Atlas, which automates some of this tuning. More recently, there's GPT Tune, which uses Bayesian optimization and Gaussian processes. If you don't know what those are, I wonder where you could learn about them. Oh, wait, true theta.io! That must be a great place for data science help. Moving on, people also want to perform large batches of small and similar NLA operations, so we have batch BLOZ. I'd like to say that covers it, but it doesn't. There's a lot of software out there doing NLA, and this list right here is just the free open source stuff. And now we can finally discuss the paper on randomized numerical linear algebra. Again, I'm making this video because of some remarkable claims it made. And it took them especially seriously because it's authored by some of the original developers of BLOZ and LA-PAC, like Jack and James. In fact, I spoke with the first author Riley Murray to make sure I understood exactly what's going on here. Now, when reading this, I knew LA-PAC and BLOZ were virtually impossible to dethrone. Also, from a distance, my impression was the field of NLA had matured, and there probably weren't huge gains to be had. And I'm not alone in that impression. To understand this, we need to talk about how we describe an algorithm's efficiency. Say we're given a matrix A, and it's an N by N matrix. Let's say we like to multiply it by another matrix B of the same size. Now, if we were to do this the standard way, that would be what is called an order N cubed algorithm. That means, as the side length N grows, the number of operations grows like N cubed, roughly. For example, say multiplying 10 by 10 matrices takes some fraction C of one second. If we multiply 100 by 100 matrices, then we'd have to wait an amount of time close to that same fraction C, but now of a thousand seconds. So, we increase the side length by a factor of 10, and the time increased by a factor of a thousand. Fast hardware can bring down C, whatever it is, but it won't change its painful growth. However, in 1969, something remarkable did. Volcker Strassen surprised everyone with an algorithm that does multiplication in a way that grows like N to the 2.8-ish. This was extremely surprising, since matrix multiplication, the standard way, involves three for loops. So, the exponent of three seems totally unavoidable, and yet, a lower exponent was possible, and so the result kicked off research to get that 2.8 exponent down. It has since leveled out, and it's leveling out where I formed my impression. In general, for all important matrix algorithms, pushing these exponents significantly further down seems effectively impossible. So, as I was reading this, I believed gains in speed would not come from fundamentally new algorithms, but just better scaled-up hardware. That's expensive, but it seems like it's the only option. But that understanding changed when I read these two paragraphs. Here's what it's saying. A problem you see absolutely everywhere is the problem of least squares. I'll explain what it is. We're given a matrix A, which has M rows and N columns, and we'll assume that N is much less than M, which is actually pretty typical in practice. We're also given a vector B, which has dimension M. So, A and B are matrix and a vector that are given to us for this problem. Now, the goal is going to be to find a vector X. First, we form AX, which, as mentioned, is a linear function defined by multiplication with A. Then we consider its distance from B. That's what this notation means. Now, our goal is to minimize this distance. So, in one sentence, our goal is to find X such that AX is as close as possible to the vector B. Okay, now the best NLA algorithm to solve this involves order MN squared operations. So, we have an exponent of 2, but at least it's on N and not the much larger M. Now, what Rand NLA says is, if you're willing to accept a small and controllable error in your answer, which we'll call epsilon, then randomized algorithms can actually solve this in order MN log 1 over epsilon plus N cubed operations. It may not sound like much, but this is huge. In heavy-duty applications, both M and N can be big. N might be in the thousands, and M could be in the millions or billions. Now, if we want a strong approximation, like one within a tenth or a hundredth of a percent, then this term is going to be in the single digits. And since M is the big problematic number, then this term likely won't matter much. So, let's look at the ratio of the dominant terms. This will give a sense of how many times faster the randomized algorithm is than the classic one. Things cancel, and now we're looking at a speed-up factor of N over log 1 over epsilon. If N is in the thousands, and this is in the single digits, we're looking at a speed-up factor of around a thousand X. That's absurd. Now, due to some omitted details, we don't actually get a thousand X speed-ups in practice. However, we do get twenty X, and that's still huge. If we did the pure parallelization and hardware approach, recreating that gain might take twenty X the energy or twenty X the cost. Okay, but such bold claims raise some questions. First, what are these algorithms doing? Well, I'll get more into that later. But to describe it briefly, with high probability, a random summary of the data massively shrinks the problem while preserving virtually all of the relevant information. And that raises another question. A long-standing goal of classic NLA is to compute the most exact answer possible as fast as possible. That is, get the answer as precisely as the machine will allow and then optimize for speed. But in randomized NLA, the goal is to compute a close enough answer as fast as possible with high probability. And this allows for much faster algorithms. The question is, why are we allowing this new standard? Well, one motivation is the recent trend in machine learning. Machine learning accepts that the data is noisy. The data is just an approximation of the truth. And so computing things exactly is unnecessary. The exact answer would change with the change in the meaningless noise. So an approximate answer is, life be just as good. And it might even be an exact answer with a different sample of data. And so this looks a lot more reasonable. Also, when you look at some algorithms, we find that close enough can sometimes be made extremely close. And high probability can sometimes be made so high, it's not even worth mentioning. In general, there's a trade-off between speed and accuracy, and how favorable that trade-off is depends on the algorithm. Okay, next question. This argument is just a heuristic illustration. It's not pointing to an implemented algorithm with measurable performance. So what is the actual performance? Well, there are many papers that demonstrate significant concrete improvements. One striking demonstration I saw came from this paper, which is actually co-authored by Stephen Brunton and Nathan Kutz, two researchers who are active educators on YouTube. You may have seen them. One of their goals is to improve the SPD algorithm for low-rank matrices in the programming language R. SPD involves taking a matrix A and decomposing it into a product of three matrices. And without getting into the details, these matrices have some nice properties that help us do things like dimensionality reduction or solving least squares problems. Now, their randomized SPD algorithm gets this performance. Each plot is for a different size of A, specified as rows by columns. The y-axis tells us how many times faster an algorithm is than the plain SPD algorithm. So the plain SPD algorithm itself, its speed is always 1. That means the randomized SPD algorithm is between 40 and over 100 times faster, depending on the size of A. And the errors from randomization are comparable to those of the non-randomized routines. So we're looking at massive real gains, but we need to make some comments. First, they're only considering low-rank matrices. Randomized algorithms are especially useful for those. Second, their algorithm is entirely implemented in R, a high-level language. In contrast, one of the other benchmarking algorithms, R-Spectra, provides speed by granting R-axis to Spectra, a C++ library optimized for eigenvalue problems. So maybe randomization is best coded at the lower level, like that of C++. So let's check out an algorithm that does that. This one, Cholesky QR with randomization and pivoting for tall matrices. This one does an impressive job of wrangling the interplay of hardware, software, and randomization to produce a dominant algorithm. In fact, it strikes such a favorable balance of speed and accuracy, the authors claim that the algorithm design question is effectively solved for this class of matrix and problem. That's quite a claim. So what's the problem they're solving? Well, once again, we're given a matrix A, which in this case is assumed to be very tall. The goal is to decompose it into matrices with certain properties. Again, explaining the decomposition would take us really far afield. But here's one important detail. By including this matrix P, called the permutation matrix, we're asking the algorithm to order its operations in a special way to improve numerical stability and, for lack of a better explanation, provide more information on the decomposed matrix. Including P is significantly more work, but virtually guarantees we'll get the right answer. That is, it's much more numerically stable. Doing this decomposition is called QR decomposition with column pivoting. The QR matrices enable several useful things, like solving least squares problems. Now to explain their algorithm's performance, here are two blank plots. On the left, we'll see performance on matrices with about 32,000 rows. On the right, about 130,000 rows. Along the horizontal axis, the number of columns varies from about 500 to about 8,000. So we're looking at A matrices of different shapes, but they're all either tall or really tall matrices. Now the vertical axis is billions of floating point operations per second, which is a bit of a weird thing to measure. But the G-flops are those of a benchmark algorithm run on A, and so it's fixed across algorithms. In other words, just interpret the vertical axis as relative speed, like in the previous paper. Okay, now, this is LA-PAC's algorithm for QR with column pivoting. Remember, LA-PAC is the very well-optimized industry standard, but maybe not for long, because this is their algorithm, pronounced secret. As you can see, we're looking at 10 to 20x speed-ups, and if you're wondering what's happening here, the authors point out that the matrices no longer fit in the cache, so moving more data around becomes necessary. As an aside, moving data or data communication is a major source of algorithmic slowness. Now in the paper, the plot shows alternative fast algorithms for a comparison. They're acknowledging other approaches people might be familiar with to further benchmark their algorithm. However, in my view, the authors are being a bit modest, because these other fast algorithms aren't doing the full job. It's not apples to apples. This one and this one don't perform column pivoting, so the decomposition gives us less information about the matrix. If we ignore that fact and try to use the decomposition just like it had done pivoting, we get inaccurate or even flat-out wrong answers. This one and this one are numerically stable, but the former only applies to full-rank matrices, so not all tall, skinny matrices. And the latter only delivers an implicit representation of the matrices we want. This means, in many practical cases, we'd need to do extra work, slowing the algorithm down considerably. All things considered, this plot understates how much better secret really is. And if you're thinking, okay, but this can't actually replace the LA-PAC algorithm, because randomized algorithms come with some error, right? Well, in this case, the error can be made so small, it's essentially just as good as the LA-PAC routine. And this highlights the bizarre magic of randomization. You add a well-placed pinch of it, and you're able to get essentially the same answer, but many times faster. It's a trick almost without baggage. It's not an optimization that only works for a fixed set of machines or a niche class of matrix. It works essentially across the board. It makes you wonder, what are these algorithms doing? Well, RAND-NLA algorithms come in several flavors. I'll go with one that's especially simple to present. Let's bring back the least squares problem. Again, we're looking for the vector x such that ax's distance from b is as small as possible. We'll call the x vector that achieves this minimum x star. Again, we'll assume that a is a tall matrix. One randomized approach is called sketch and solve. We start by sampling a random matrix s. How we do that doesn't matter right now. What's important is that we'll be solving the least squares problem, but we'll replace a with s a and b with s b. And s will be designed such that s a has many fewer rows than the tall matrix a. And in the same way, s b is much smaller than b. Essentially, multiplying by s produces a compressed problem that's much faster to solve. Doing this is to form a small sketch of the problem. Here's the remarkable thing. If we solve this new least squares problem, giving us a vector we'll call x tilde, then the distance it achieves in the original problem is about the same as the best achievable distance in that original problem with high probability. In other words, it's very likely that solving this much smaller problem will give an answer that's nearly just as good as what would get solving the original big problem. And that's great news. A much smaller problem is much faster to solve. And that's where we get these order of magnitude speed ups. And what makes this practically useful is that we can control how good the approximation is. And the probability that that level of approximation is achieved. We can say, I want a 99.99% chance that the distance is within 1% of the best achievable distance. Declaring that will tell us how many rows s needs, depending on how s is randomly sampled. In fact, developing theorems to make statements like these, that's where a lot of the hard work of the field is. Further, how s is sampled is a question all its own. Every value could just be a sample from a normal distribution, but there are fancier techniques, like ones that allow you to perform the essay multiplication extremely quickly. Because, in the presentation that I just gave you, doing that multiplication would actually be a dominant cost. Okay, but this explanation doesn't answer the why does it work question, really. I'm just showing that it relies on an approximation, which I'm asking you to accept. So, let's go a little further. Let's say we're given the following least squares problem. A is equal to some tall matrix with two columns, and B is equal to some long vector. Now, if you know something about least squares, you know finding x is going to involve, among other things, the covariance matrix of A. That's a component of the solution I'd like to focus on. So, let's ignore B for now. Now, if you don't know what the covariance matrix of A means, that's fine. With just two columns, it's a very easy thing to visualize. What we'll do is plot each row of A as a point. Now, the covariance matrix just tells you this elliptical shape. And it's this shape that partially determines the minimizing x. Next, let's consider SA, where S is properly scaled random Gaussians with D rows. If D is equal to 8, that means SA can be plotted as 8 summary data points. Again, we compute the covariance matrix, and again, this shape partially determines the minimizing x, this time in the shrunken, sketched version of the problem. Now, here's what RAN and LA exploits. As D increases, the covariances of SA and A become more and more similar. So, between A and SA, the covariance structures, things that determine the minimizing x's, are very similar. In other words, as far as this covariance piece of the answer goes, A and SA give us nearly the same thing. And D doesn't need to be that large to get a good approximation. So, we can solve a much smaller SA least squares problem and get virtually the same result. Okay, but what about B? Yeah, the minimizing x is also determined by the covariance between A and B. So, let's consider an augmented matrix, which is A concatenated with B as a new column. The covariance of this new matrix now includes everything that determines the minimizing x. Looking at this, this is just another matrix. So, each covariance matrix will be similar to that of its sketched version. In other words, everything that drives the minimizing x is similar across the original and sketched problem. That's why the sketched version gives us approximately the same answer. Now, I need to confess something. This approximation is actually pretty weak and isn't really what's powering the randomized algorithms. But it captures the essence and can be animated, so I went with it. However, Riley pointed out that what's actually happening involves much stronger approximations regarding relative differences. Now, since defining relative things for matrices involves some head bending, I backed away. So, this gives a sense of the mathematical properties I play, but it's not the full story. For a bigger picture, Riley gave me the following analogy. The strategy of LA-PAC is to cast NLA algorithms into the use of efficient BLOZ functions. The highly optimized General Matrix Multiply or GEM function. The more an algorithm can be written as repeated use of this operation, the faster it'll get. That's what LA-PAC did. But there's a limit to how much algorithms can be recast into GEM. But randomization provides a new basket of functions that can be applied in a similar way to GEM. If least squares is suddenly super efficient, we'll try to reframe everything we can as solving repeated least squares problems. It's a huge space for creativity and big gains. And that's why in the Rand-NLA paper, they're talking about a new software, Randblast and Rand-LA-PAC, which would serve as a new pillar for NLA, the randomized approach. If they pull it off, and it's really saying something, we'd be in for a widespread upgrade in scientific computing. All those technologies stand to be improved from gaming to weather forecasting to artificial intelligence. To be comprehensive, I should mention at least two other approaches to speed. The first is communication avoiding algorithms. Algorithms which anticipate the hardware to minimize the amount of data movement. Since moving data takes so much time, these provide big speed ups as well. Second, there are hardware accelerators. Specialized hardware designed to do very specific operations extremely fast. Now, both of these are totally effective paths to speed, and in fact, can be combined with randomization to produce even larger gains. That said, these approaches bring some inflexibility. Communication avoiding algorithms need to be designed especially carefully to the hardware, and accelerators only do fixed, highly specialized operations. You can't change what an accelerator does after it's built. In comparison, randomized algorithms are exceptional because they are entirely an idea of mathematics. Randomness isn't upgraded hardware or an algorithm designed for specific hardware, yet it gives you speed and scalability as though it were. It does this by allowing simple algorithms, ones that otherwise struggle with scalability, to be applied to huge data. And it's this quality of simple but powerful that I believe is necessary for producing a significant and widespread upgrade in scientific computing. Since this is evolving, I'm going to keep track of updates as I hear about them and to the best of my ability on a post on truthata.io. There I'll also answer some other questions, like why isn't this Monte Carlo or who cares about least squares? In general, I inevitably learn more about a topic after I publish a video on it, so this post can evolve as I hear from you, others, or just learn more about it myself. And wow, what an incredible segue into talking about true theta. Truthata is my data science consultancy. We have experienced building machine learning systems for pricing, credit risk modeling, causal inference, and forecasting. If you're at a company looking for this type of work, we should talk. You can send an email to increase at truthata.io to get in touch. Alright, that's it. If you'd like to learn more about randomized NLA, I have my sources in the description. Also, I'd like to make a special thank you to Riley Murray for our discussions on this topic. And I'd like to thank everyone else who provided useful commentary. And finally, thank you for watching, and until next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.0, "text": " These are the graphics from Unreal Engine 5.", "tokens": [50364, 1981, 366, 264, 11837, 490, 34464, 7659, 1025, 13, 50564], "temperature": 0.0, "avg_logprob": -0.20249263027258085, "compression_ratio": 1.4085365853658536, "no_speech_prob": 0.02401840314269066}, {"id": 1, "seek": 0, "start": 4.0, "end": 7.0, "text": " They're quite good.", "tokens": [50564, 814, 434, 1596, 665, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20249263027258085, "compression_ratio": 1.4085365853658536, "no_speech_prob": 0.02401840314269066}, {"id": 2, "seek": 0, "start": 16.0, "end": 19.0, "text": " The engine is simulating physics so well,", "tokens": [51164, 440, 2848, 307, 1034, 12162, 10649, 370, 731, 11, 51314], "temperature": 0.0, "avg_logprob": -0.20249263027258085, "compression_ratio": 1.4085365853658536, "no_speech_prob": 0.02401840314269066}, {"id": 3, "seek": 0, "start": 19.0, "end": 22.0, "text": " sometimes it can be hard to tell the difference from reality.", "tokens": [51314, 2171, 309, 393, 312, 1152, 281, 980, 264, 2649, 490, 4103, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20249263027258085, "compression_ratio": 1.4085365853658536, "no_speech_prob": 0.02401840314269066}, {"id": 4, "seek": 0, "start": 24.0, "end": 28.0, "text": " And to accomplish this, something that is absolutely essential", "tokens": [51564, 400, 281, 9021, 341, 11, 746, 300, 307, 3122, 7115, 51764], "temperature": 0.0, "avg_logprob": -0.20249263027258085, "compression_ratio": 1.4085365853658536, "no_speech_prob": 0.02401840314269066}, {"id": 5, "seek": 2800, "start": 28.0, "end": 32.0, "text": " is numerical linear algebra, or NLA,", "tokens": [50364, 307, 29054, 8213, 21989, 11, 420, 426, 11435, 11, 50564], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 6, "seek": 2800, "start": 32.0, "end": 35.0, "text": " which is a study of linear algebra applied with computers,", "tokens": [50564, 597, 307, 257, 2979, 295, 8213, 21989, 6456, 365, 10807, 11, 50714], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 7, "seek": 2800, "start": 35.0, "end": 40.0, "text": " and is better labeled applied linear algebra because that's really all it is.", "tokens": [50714, 293, 307, 1101, 21335, 6456, 8213, 21989, 570, 300, 311, 534, 439, 309, 307, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 8, "seek": 2800, "start": 40.0, "end": 44.0, "text": " Now without it, there are no good computer graphics.", "tokens": [50964, 823, 1553, 309, 11, 456, 366, 572, 665, 3820, 11837, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 9, "seek": 2800, "start": 44.0, "end": 48.0, "text": " Mapping 3D objects to the 2D view screen, that's gone.", "tokens": [51164, 376, 10534, 805, 35, 6565, 281, 264, 568, 35, 1910, 2568, 11, 300, 311, 2780, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 10, "seek": 2800, "start": 48.0, "end": 51.0, "text": " Rotating those 3D objects, gone.", "tokens": [51364, 17681, 990, 729, 805, 35, 6565, 11, 2780, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 11, "seek": 2800, "start": 51.0, "end": 57.0, "text": " Rasterization, where triangle vertices are used to determine pixel color intensities, also gone.", "tokens": [51514, 497, 1727, 2144, 11, 689, 13369, 32053, 366, 1143, 281, 6997, 19261, 2017, 14056, 1088, 11, 611, 2780, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0890810557774135, "compression_ratio": 1.6506024096385543, "no_speech_prob": 0.02552660182118416}, {"id": 12, "seek": 5800, "start": 58.0, "end": 64.0, "text": " But seriously, without NLA, a lack of video games would be the least of our problems.", "tokens": [50364, 583, 6638, 11, 1553, 426, 11435, 11, 257, 5011, 295, 960, 2813, 576, 312, 264, 1935, 295, 527, 2740, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09449207141835203, "compression_ratio": 1.55078125, "no_speech_prob": 0.000896742451004684}, {"id": 13, "seek": 5800, "start": 64.0, "end": 68.0, "text": " We also wouldn't have weather forecasting, many types of data compression,", "tokens": [50664, 492, 611, 2759, 380, 362, 5503, 44331, 11, 867, 3467, 295, 1412, 19355, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09449207141835203, "compression_ratio": 1.55078125, "no_speech_prob": 0.000896742451004684}, {"id": 14, "seek": 5800, "start": 68.0, "end": 70.0, "text": " finite element methods for stress testing,", "tokens": [50864, 19362, 4478, 7150, 337, 4244, 4997, 11, 50964], "temperature": 0.0, "avg_logprob": -0.09449207141835203, "compression_ratio": 1.55078125, "no_speech_prob": 0.000896742451004684}, {"id": 15, "seek": 5800, "start": 70.0, "end": 73.0, "text": " compressed sensing for MRI, fluid dynamic simulations,", "tokens": [50964, 30353, 30654, 337, 32812, 11, 9113, 8546, 35138, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09449207141835203, "compression_ratio": 1.55078125, "no_speech_prob": 0.000896742451004684}, {"id": 16, "seek": 5800, "start": 73.0, "end": 77.0, "text": " recommendation systems, search, and of course deep neural networks.", "tokens": [51114, 11879, 3652, 11, 3164, 11, 293, 295, 1164, 2452, 18161, 9590, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09449207141835203, "compression_ratio": 1.55078125, "no_speech_prob": 0.000896742451004684}, {"id": 17, "seek": 5800, "start": 79.0, "end": 83.0, "text": " An argument from one of the leaders of the field, the late Gene Gulub,", "tokens": [51414, 1107, 6770, 490, 472, 295, 264, 3523, 295, 264, 2519, 11, 264, 3469, 18083, 43314, 836, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09449207141835203, "compression_ratio": 1.55078125, "no_speech_prob": 0.000896742451004684}, {"id": 18, "seek": 8300, "start": 83.0, "end": 88.0, "text": " was to point out that of the top 10 most important algorithms of the 20th century,", "tokens": [50364, 390, 281, 935, 484, 300, 295, 264, 1192, 1266, 881, 1021, 14642, 295, 264, 945, 392, 4901, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 19, "seek": 8300, "start": 88.0, "end": 91.0, "text": " six of them related to numerical linear algebra.", "tokens": [50614, 2309, 295, 552, 4077, 281, 29054, 8213, 21989, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 20, "seek": 8300, "start": 91.0, "end": 93.0, "text": " And that was almost 20 years ago.", "tokens": [50764, 400, 300, 390, 1920, 945, 924, 2057, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 21, "seek": 8300, "start": 95.0, "end": 98.0, "text": " Now I decided to make this video when I stumbled upon this paper,", "tokens": [50964, 823, 286, 3047, 281, 652, 341, 960, 562, 286, 36668, 3564, 341, 3035, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 22, "seek": 8300, "start": 98.0, "end": 101.0, "text": " Randomized Numerical Linear Algebra.", "tokens": [51114, 37603, 1602, 426, 15583, 804, 14670, 289, 967, 19983, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 23, "seek": 8300, "start": 101.0, "end": 104.0, "text": " In it I found some remarkable claims.", "tokens": [51264, 682, 309, 286, 1352, 512, 12802, 9441, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 24, "seek": 8300, "start": 104.0, "end": 111.0, "text": " They show how some well-placed randomness can speed up some NLA algorithms by an order of magnitude.", "tokens": [51414, 814, 855, 577, 512, 731, 12, 564, 3839, 4974, 1287, 393, 3073, 493, 512, 426, 11435, 14642, 538, 364, 1668, 295, 15668, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07601747872694484, "compression_ratio": 1.5775193798449612, "no_speech_prob": 0.01826079562306404}, {"id": 25, "seek": 11100, "start": 111.0, "end": 116.0, "text": " In other words, we're looking at a potential breakthrough in scientific computing.", "tokens": [50364, 682, 661, 2283, 11, 321, 434, 1237, 412, 257, 3995, 22397, 294, 8134, 15866, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 26, "seek": 11100, "start": 116.0, "end": 119.0, "text": " And randomization for speed seems like a really bizarre idea.", "tokens": [50614, 400, 4974, 2144, 337, 3073, 2544, 411, 257, 534, 18265, 1558, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 27, "seek": 11100, "start": 119.0, "end": 123.0, "text": " Why would an algorithm that wants to compute something exactly be super sped up", "tokens": [50764, 1545, 576, 364, 9284, 300, 2738, 281, 14722, 746, 2293, 312, 1687, 637, 292, 493, 50964], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 28, "seek": 11100, "start": 123.0, "end": 125.0, "text": " by doing something akin to coin flipping?", "tokens": [50964, 538, 884, 746, 47540, 281, 11464, 26886, 30, 51064], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 29, "seek": 11100, "start": 125.0, "end": 129.0, "text": " Now to fully appreciate this, we'll need some background.", "tokens": [51064, 823, 281, 4498, 4449, 341, 11, 321, 603, 643, 512, 3678, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 30, "seek": 11100, "start": 129.0, "end": 136.0, "text": " But first, this episode is brought to you by True Theta, the Data Science Consultancy.", "tokens": [51264, 583, 700, 11, 341, 3500, 307, 3038, 281, 291, 538, 13587, 334, 7664, 11, 264, 11888, 8976, 40057, 6717, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 31, "seek": 11100, "start": 136.0, "end": 139.0, "text": " More about us at the end of the episode.", "tokens": [51614, 5048, 466, 505, 412, 264, 917, 295, 264, 3500, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0864206596657082, "compression_ratio": 1.5749128919860627, "no_speech_prob": 0.007575579918920994}, {"id": 32, "seek": 13900, "start": 140.0, "end": 144.0, "text": " The first thing we need to ask is, what is linear algebra?", "tokens": [50414, 440, 700, 551, 321, 643, 281, 1029, 307, 11, 437, 307, 8213, 21989, 30, 50614], "temperature": 0.0, "avg_logprob": -0.05940878391265869, "compression_ratio": 1.5427350427350428, "no_speech_prob": 0.010651507414877415}, {"id": 33, "seek": 13900, "start": 144.0, "end": 149.0, "text": " Simply put, it's the mathematics of vectors and matrices.", "tokens": [50614, 19596, 829, 11, 309, 311, 264, 18666, 295, 18875, 293, 32284, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05940878391265869, "compression_ratio": 1.5427350427350428, "no_speech_prob": 0.010651507414877415}, {"id": 34, "seek": 13900, "start": 149.0, "end": 151.0, "text": " We'll start with a vector.", "tokens": [50864, 492, 603, 722, 365, 257, 8062, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05940878391265869, "compression_ratio": 1.5427350427350428, "no_speech_prob": 0.010651507414877415}, {"id": 35, "seek": 13900, "start": 151.0, "end": 156.0, "text": " A vector is just a list of numbers and can be imagined geometrically as an arrow.", "tokens": [50964, 316, 8062, 307, 445, 257, 1329, 295, 3547, 293, 393, 312, 16590, 12956, 81, 984, 382, 364, 11610, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05940878391265869, "compression_ratio": 1.5427350427350428, "no_speech_prob": 0.010651507414877415}, {"id": 36, "seek": 13900, "start": 156.0, "end": 159.0, "text": " Now, this is just a wimpy 2D vector.", "tokens": [51214, 823, 11, 341, 307, 445, 257, 261, 332, 8200, 568, 35, 8062, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05940878391265869, "compression_ratio": 1.5427350427350428, "no_speech_prob": 0.010651507414877415}, {"id": 37, "seek": 13900, "start": 159.0, "end": 165.0, "text": " The powerful stuff comes from using n-dimensional vectors, which can represent complicated things.", "tokens": [51364, 440, 4005, 1507, 1487, 490, 1228, 297, 12, 18759, 18875, 11, 597, 393, 2906, 6179, 721, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05940878391265869, "compression_ratio": 1.5427350427350428, "no_speech_prob": 0.010651507414877415}, {"id": 38, "seek": 16500, "start": 165.0, "end": 172.0, "text": " Everything from images to words to audio to a person's credit profile.", "tokens": [50364, 5471, 490, 5267, 281, 2283, 281, 6278, 281, 257, 954, 311, 5397, 7964, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05323553627187556, "compression_ratio": 1.649746192893401, "no_speech_prob": 0.0012065608752891421}, {"id": 39, "seek": 16500, "start": 172.0, "end": 177.0, "text": " Basically, most things you can think of can be represented as a vector.", "tokens": [50714, 8537, 11, 881, 721, 291, 393, 519, 295, 393, 312, 10379, 382, 257, 8062, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05323553627187556, "compression_ratio": 1.649746192893401, "no_speech_prob": 0.0012065608752891421}, {"id": 40, "seek": 16500, "start": 177.0, "end": 180.0, "text": " Now we consider a matrix.", "tokens": [50964, 823, 321, 1949, 257, 8141, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05323553627187556, "compression_ratio": 1.649746192893401, "no_speech_prob": 0.0012065608752891421}, {"id": 41, "seek": 16500, "start": 180.0, "end": 183.0, "text": " On the surface, a matrix is just a grid of numbers.", "tokens": [51114, 1282, 264, 3753, 11, 257, 8141, 307, 445, 257, 10748, 295, 3547, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05323553627187556, "compression_ratio": 1.649746192893401, "no_speech_prob": 0.0012065608752891421}, {"id": 42, "seek": 16500, "start": 183.0, "end": 187.0, "text": " Or you can consider it a list of vectors.", "tokens": [51264, 1610, 291, 393, 1949, 309, 257, 1329, 295, 18875, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05323553627187556, "compression_ratio": 1.649746192893401, "no_speech_prob": 0.0012065608752891421}, {"id": 43, "seek": 16500, "start": 187.0, "end": 191.0, "text": " As a list of vectors, you can imagine it as a bunch of arrows.", "tokens": [51464, 1018, 257, 1329, 295, 18875, 11, 291, 393, 3811, 309, 382, 257, 3840, 295, 19669, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05323553627187556, "compression_ratio": 1.649746192893401, "no_speech_prob": 0.0012065608752891421}, {"id": 44, "seek": 19100, "start": 191.0, "end": 196.0, "text": " When a matrix represents data, they're commonly represented as points.", "tokens": [50364, 1133, 257, 8141, 8855, 1412, 11, 436, 434, 12719, 10379, 382, 2793, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05991526929343619, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0015485971234738827}, {"id": 45, "seek": 19100, "start": 196.0, "end": 200.0, "text": " But in linear algebra, matrices represent something else.", "tokens": [50614, 583, 294, 8213, 21989, 11, 32284, 2906, 746, 1646, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05991526929343619, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0015485971234738827}, {"id": 46, "seek": 19100, "start": 200.0, "end": 202.0, "text": " They relate to functions.", "tokens": [50814, 814, 10961, 281, 6828, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05991526929343619, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0015485971234738827}, {"id": 47, "seek": 19100, "start": 202.0, "end": 206.0, "text": " In our case, a function is something that receives an input vector x", "tokens": [50914, 682, 527, 1389, 11, 257, 2445, 307, 746, 300, 20717, 364, 4846, 8062, 2031, 51114], "temperature": 0.0, "avg_logprob": -0.05991526929343619, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0015485971234738827}, {"id": 48, "seek": 19100, "start": 206.0, "end": 211.0, "text": " and gives back a vector y, possibly of a different dimension.", "tokens": [51114, 293, 2709, 646, 257, 8062, 288, 11, 6264, 295, 257, 819, 10139, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05991526929343619, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0015485971234738827}, {"id": 49, "seek": 19100, "start": 211.0, "end": 215.0, "text": " And it needs to do that for a range of x values.", "tokens": [51364, 400, 309, 2203, 281, 360, 300, 337, 257, 3613, 295, 2031, 4190, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05991526929343619, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0015485971234738827}, {"id": 50, "seek": 21500, "start": 215.0, "end": 221.0, "text": " If we were to increase the dimensions, the function would be connecting exponentially huge regions.", "tokens": [50364, 759, 321, 645, 281, 3488, 264, 12819, 11, 264, 2445, 576, 312, 11015, 37330, 2603, 10682, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06466306447982788, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.012818745337426662}, {"id": 51, "seek": 21500, "start": 221.0, "end": 225.0, "text": " In this sense, functions are very information-rich objects,", "tokens": [50664, 682, 341, 2020, 11, 6828, 366, 588, 1589, 12, 10794, 6565, 11, 50864], "temperature": 0.0, "avg_logprob": -0.06466306447982788, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.012818745337426662}, {"id": 52, "seek": 21500, "start": 225.0, "end": 229.0, "text": " since they represent an enormous set of connections.", "tokens": [50864, 1670, 436, 2906, 364, 11322, 992, 295, 9271, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06466306447982788, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.012818745337426662}, {"id": 53, "seek": 21500, "start": 229.0, "end": 233.0, "text": " But handling all that information explicitly is often impossible.", "tokens": [51064, 583, 13175, 439, 300, 1589, 20803, 307, 2049, 6243, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06466306447982788, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.012818745337426662}, {"id": 54, "seek": 21500, "start": 233.0, "end": 237.0, "text": " So, we make a fantastically liberating assumption.", "tokens": [51264, 407, 11, 321, 652, 257, 4115, 22808, 6774, 990, 15302, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06466306447982788, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.012818745337426662}, {"id": 55, "seek": 21500, "start": 237.0, "end": 239.0, "text": " We assume the function is linear,", "tokens": [51464, 492, 6552, 264, 2445, 307, 8213, 11, 51564], "temperature": 0.0, "avg_logprob": -0.06466306447982788, "compression_ratio": 1.6278026905829597, "no_speech_prob": 0.012818745337426662}, {"id": 56, "seek": 23900, "start": 239.0, "end": 245.0, "text": " which means it's like a line, or a plane, or something similarly flat in higher dimensions.", "tokens": [50364, 597, 1355, 309, 311, 411, 257, 1622, 11, 420, 257, 5720, 11, 420, 746, 14138, 4962, 294, 2946, 12819, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0703724531026987, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.0039445944130420685}, {"id": 57, "seek": 23900, "start": 245.0, "end": 251.0, "text": " More rigorously, linearity comes from some algebraic properties, but we don't need to get into all that.", "tokens": [50664, 5048, 42191, 5098, 11, 8213, 507, 1487, 490, 512, 21989, 299, 7221, 11, 457, 321, 500, 380, 643, 281, 483, 666, 439, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0703724531026987, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.0039445944130420685}, {"id": 58, "seek": 23900, "start": 251.0, "end": 254.0, "text": " What's important is why linearity is useful.", "tokens": [50964, 708, 311, 1021, 307, 983, 8213, 507, 307, 4420, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0703724531026987, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.0039445944130420685}, {"id": 59, "seek": 23900, "start": 254.0, "end": 259.0, "text": " Consider two cases, where the inputs and outputs are both one-dimensional.", "tokens": [51114, 17416, 732, 3331, 11, 689, 264, 15743, 293, 23930, 366, 1293, 472, 12, 18759, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0703724531026987, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.0039445944130420685}, {"id": 60, "seek": 23900, "start": 259.0, "end": 266.0, "text": " In both cases, suppose we'd like to guess the function, after being shown two input-output pairs.", "tokens": [51364, 682, 1293, 3331, 11, 7297, 321, 1116, 411, 281, 2041, 264, 2445, 11, 934, 885, 4898, 732, 4846, 12, 346, 2582, 15494, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0703724531026987, "compression_ratio": 1.6299212598425197, "no_speech_prob": 0.0039445944130420685}, {"id": 61, "seek": 26600, "start": 266.0, "end": 270.0, "text": " Now, on the left, we don't make any assumptions about the function.", "tokens": [50364, 823, 11, 322, 264, 1411, 11, 321, 500, 380, 652, 604, 17695, 466, 264, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 62, "seek": 26600, "start": 270.0, "end": 272.0, "text": " It can be any function.", "tokens": [50564, 467, 393, 312, 604, 2445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 63, "seek": 26600, "start": 272.0, "end": 275.0, "text": " On the right, we assume the function is linear.", "tokens": [50664, 1282, 264, 558, 11, 321, 6552, 264, 2445, 307, 8213, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 64, "seek": 26600, "start": 275.0, "end": 278.0, "text": " With this, can we determine the functions?", "tokens": [50814, 2022, 341, 11, 393, 321, 6997, 264, 6828, 30, 50964], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 65, "seek": 26600, "start": 278.0, "end": 282.0, "text": " Well, when we assume linearity, yes, it's easy.", "tokens": [50964, 1042, 11, 562, 321, 6552, 8213, 507, 11, 2086, 11, 309, 311, 1858, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 66, "seek": 26600, "start": 282.0, "end": 286.0, "text": " There's only one linear function that goes through these two points.", "tokens": [51164, 821, 311, 787, 472, 8213, 2445, 300, 1709, 807, 613, 732, 2793, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 67, "seek": 26600, "start": 286.0, "end": 291.0, "text": " But without the assumption, there are infinite functions that pass through those two points.", "tokens": [51364, 583, 1553, 264, 15302, 11, 456, 366, 13785, 6828, 300, 1320, 807, 729, 732, 2793, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 68, "seek": 26600, "start": 291.0, "end": 293.0, "text": " And we have no way to pick one.", "tokens": [51614, 400, 321, 362, 572, 636, 281, 1888, 472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04255983233451843, "compression_ratio": 1.8354978354978355, "no_speech_prob": 0.0038240074645727873}, {"id": 69, "seek": 29300, "start": 293.0, "end": 296.0, "text": " This is totally essential.", "tokens": [50364, 639, 307, 3879, 7115, 13, 50514], "temperature": 0.0, "avg_logprob": -0.04679594245008243, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.000646175816655159}, {"id": 70, "seek": 29300, "start": 296.0, "end": 303.0, "text": " Linearity allows us to determine these information-rich objects' functions with very little.", "tokens": [50514, 14670, 17409, 4045, 505, 281, 6997, 613, 1589, 12, 10794, 6565, 6, 6828, 365, 588, 707, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04679594245008243, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.000646175816655159}, {"id": 71, "seek": 29300, "start": 303.0, "end": 309.0, "text": " Basically, to know a linear function in one region is to know it in all regions.", "tokens": [50864, 8537, 11, 281, 458, 257, 8213, 2445, 294, 472, 4458, 307, 281, 458, 309, 294, 439, 10682, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04679594245008243, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.000646175816655159}, {"id": 72, "seek": 29300, "start": 309.0, "end": 316.0, "text": " This fact is so useful, much of applied mathematics involves making the linearity assumption wherever we can get away with it.", "tokens": [51164, 639, 1186, 307, 370, 4420, 11, 709, 295, 6456, 18666, 11626, 1455, 264, 8213, 507, 15302, 8660, 321, 393, 483, 1314, 365, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04679594245008243, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.000646175816655159}, {"id": 73, "seek": 29300, "start": 316.0, "end": 321.0, "text": " Doing so allows us to extrapolate in space, or time, or something else.", "tokens": [51514, 18496, 370, 4045, 505, 281, 48224, 473, 294, 1901, 11, 420, 565, 11, 420, 746, 1646, 13, 51764], "temperature": 0.0, "avg_logprob": -0.04679594245008243, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.000646175816655159}, {"id": 74, "seek": 32100, "start": 321.0, "end": 328.0, "text": " And crucially, it makes the exceptionally powerful theorems of linear algebra available to the problem at hand.", "tokens": [50364, 400, 5140, 1909, 11, 309, 1669, 264, 37807, 4005, 10299, 2592, 295, 8213, 21989, 2435, 281, 264, 1154, 412, 1011, 13, 50714], "temperature": 0.0, "avg_logprob": -0.054116007793380556, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0010986904380843043}, {"id": 75, "seek": 32100, "start": 328.0, "end": 335.0, "text": " If we assume linearity, we essentially get an instruction manual for computing useful things.", "tokens": [50714, 759, 321, 6552, 8213, 507, 11, 321, 4476, 483, 364, 10951, 9688, 337, 15866, 4420, 721, 13, 51064], "temperature": 0.0, "avg_logprob": -0.054116007793380556, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0010986904380843043}, {"id": 76, "seek": 32100, "start": 335.0, "end": 338.0, "text": " So how does a linear function relate to a matrix?", "tokens": [51064, 407, 577, 775, 257, 8213, 2445, 10961, 281, 257, 8141, 30, 51214], "temperature": 0.0, "avg_logprob": -0.054116007793380556, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0010986904380843043}, {"id": 77, "seek": 32100, "start": 338.0, "end": 347.0, "text": " Simply, if f of x is a linear function, then f of x equals a times x for some matrix A.", "tokens": [51214, 19596, 11, 498, 283, 295, 2031, 307, 257, 8213, 2445, 11, 550, 283, 295, 2031, 6915, 257, 1413, 2031, 337, 512, 8141, 316, 13, 51664], "temperature": 0.0, "avg_logprob": -0.054116007793380556, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0010986904380843043}, {"id": 78, "seek": 34700, "start": 347.0, "end": 355.0, "text": " Saying A times x is to do matrix multiplication, which is a simple but tedious calculation of sums and products.", "tokens": [50364, 34087, 316, 1413, 2031, 307, 281, 360, 8141, 27290, 11, 597, 307, 257, 2199, 457, 38284, 17108, 295, 34499, 293, 3383, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05889407613060691, "compression_ratio": 1.546938775510204, "no_speech_prob": 0.02032809890806675}, {"id": 79, "seek": 34700, "start": 355.0, "end": 357.0, "text": " Please don't think about the details.", "tokens": [50764, 2555, 500, 380, 519, 466, 264, 4365, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05889407613060691, "compression_ratio": 1.546938775510204, "no_speech_prob": 0.02032809890806675}, {"id": 80, "seek": 34700, "start": 357.0, "end": 362.0, "text": " Okay, now we can ask, what is numerical linear algebra?", "tokens": [50864, 1033, 11, 586, 321, 393, 1029, 11, 437, 307, 29054, 8213, 21989, 30, 51114], "temperature": 0.0, "avg_logprob": -0.05889407613060691, "compression_ratio": 1.546938775510204, "no_speech_prob": 0.02032809890806675}, {"id": 81, "seek": 34700, "start": 362.0, "end": 368.0, "text": " Well, that's the study of applying linear algebra fast and efficiently with computers.", "tokens": [51114, 1042, 11, 300, 311, 264, 2979, 295, 9275, 8213, 21989, 2370, 293, 19621, 365, 10807, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05889407613060691, "compression_ratio": 1.546938775510204, "no_speech_prob": 0.02032809890806675}, {"id": 82, "seek": 34700, "start": 368.0, "end": 371.0, "text": " This brings two fundamental challenges.", "tokens": [51414, 639, 5607, 732, 8088, 4759, 13, 51564], "temperature": 0.0, "avg_logprob": -0.05889407613060691, "compression_ratio": 1.546938775510204, "no_speech_prob": 0.02032809890806675}, {"id": 83, "seek": 34700, "start": 371.0, "end": 374.0, "text": " The first is the computer's finite precision.", "tokens": [51564, 440, 700, 307, 264, 3820, 311, 19362, 18356, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05889407613060691, "compression_ratio": 1.546938775510204, "no_speech_prob": 0.02032809890806675}, {"id": 84, "seek": 37400, "start": 374.0, "end": 378.0, "text": " The second is that fast algorithms are machine dependent.", "tokens": [50364, 440, 1150, 307, 300, 2370, 14642, 366, 3479, 12334, 13, 50564], "temperature": 0.0, "avg_logprob": -0.03506778735740512, "compression_ratio": 1.603846153846154, "no_speech_prob": 0.010326651856303215}, {"id": 85, "seek": 37400, "start": 378.0, "end": 381.0, "text": " Let's start with the computer's finite precision.", "tokens": [50564, 961, 311, 722, 365, 264, 3820, 311, 19362, 18356, 13, 50714], "temperature": 0.0, "avg_logprob": -0.03506778735740512, "compression_ratio": 1.603846153846154, "no_speech_prob": 0.010326651856303215}, {"id": 86, "seek": 37400, "start": 381.0, "end": 387.0, "text": " If a point is selected at random, it almost surely can't be represented exactly in the machine.", "tokens": [50714, 759, 257, 935, 307, 8209, 412, 4974, 11, 309, 1920, 11468, 393, 380, 312, 10379, 2293, 294, 264, 3479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.03506778735740512, "compression_ratio": 1.603846153846154, "no_speech_prob": 0.010326651856303215}, {"id": 87, "seek": 37400, "start": 387.0, "end": 391.0, "text": " The machine will have to truncate it to an approximation, creating a small error.", "tokens": [51014, 440, 3479, 486, 362, 281, 504, 409, 66, 473, 309, 281, 364, 28023, 11, 4084, 257, 1359, 6713, 13, 51214], "temperature": 0.0, "avg_logprob": -0.03506778735740512, "compression_ratio": 1.603846153846154, "no_speech_prob": 0.010326651856303215}, {"id": 88, "seek": 37400, "start": 391.0, "end": 396.0, "text": " This fact, as harmless as it seems, hardly complicates everything.", "tokens": [51214, 639, 1186, 11, 382, 40160, 382, 309, 2544, 11, 13572, 16060, 1024, 1203, 13, 51464], "temperature": 0.0, "avg_logprob": -0.03506778735740512, "compression_ratio": 1.603846153846154, "no_speech_prob": 0.010326651856303215}, {"id": 89, "seek": 37400, "start": 396.0, "end": 401.0, "text": " One effect is, to a computer, addition isn't always associative.", "tokens": [51464, 1485, 1802, 307, 11, 281, 257, 3820, 11, 4500, 1943, 380, 1009, 4180, 1166, 13, 51714], "temperature": 0.0, "avg_logprob": -0.03506778735740512, "compression_ratio": 1.603846153846154, "no_speech_prob": 0.010326651856303215}, {"id": 90, "seek": 40100, "start": 401.0, "end": 409.0, "text": " Sometimes, adding numbers A and B before adding to C doesn't give the same answer as summing B and C first.", "tokens": [50364, 4803, 11, 5127, 3547, 316, 293, 363, 949, 5127, 281, 383, 1177, 380, 976, 264, 912, 1867, 382, 2408, 2810, 363, 293, 383, 700, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05371732297150985, "compression_ratio": 1.5933609958506223, "no_speech_prob": 0.0018674343591555953}, {"id": 91, "seek": 40100, "start": 409.0, "end": 414.0, "text": " And when an algorithm fails to anticipate issues like this, it's prone to incorrect answers.", "tokens": [50764, 400, 562, 364, 9284, 18199, 281, 21685, 2663, 411, 341, 11, 309, 311, 25806, 281, 18424, 6338, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05371732297150985, "compression_ratio": 1.5933609958506223, "no_speech_prob": 0.0018674343591555953}, {"id": 92, "seek": 40100, "start": 414.0, "end": 417.0, "text": " We say such algorithms are numerically unstable.", "tokens": [51014, 492, 584, 1270, 14642, 366, 7866, 984, 23742, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05371732297150985, "compression_ratio": 1.5933609958506223, "no_speech_prob": 0.0018674343591555953}, {"id": 93, "seek": 40100, "start": 417.0, "end": 423.0, "text": " Now, we consider the second challenge, that fast algorithms are machine dependent.", "tokens": [51164, 823, 11, 321, 1949, 264, 1150, 3430, 11, 300, 2370, 14642, 366, 3479, 12334, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05371732297150985, "compression_ratio": 1.5933609958506223, "no_speech_prob": 0.0018674343591555953}, {"id": 94, "seek": 40100, "start": 423.0, "end": 427.0, "text": " Let's say we want to multiply two matrices A and B.", "tokens": [51464, 961, 311, 584, 321, 528, 281, 12972, 732, 32284, 316, 293, 363, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05371732297150985, "compression_ratio": 1.5933609958506223, "no_speech_prob": 0.0018674343591555953}, {"id": 95, "seek": 42700, "start": 427.0, "end": 439.0, "text": " By how matrix multiplication is defined, the resulting matrix is the sum product between every row of A with every column of B.", "tokens": [50364, 3146, 577, 8141, 27290, 307, 7642, 11, 264, 16505, 8141, 307, 264, 2408, 1674, 1296, 633, 5386, 295, 316, 365, 633, 7738, 295, 363, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05073300372348743, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.012820126488804817}, {"id": 96, "seek": 42700, "start": 439.0, "end": 442.0, "text": " That's how it's defined, but how is it computed?", "tokens": [50964, 663, 311, 577, 309, 311, 7642, 11, 457, 577, 307, 309, 40610, 30, 51114], "temperature": 0.0, "avg_logprob": -0.05073300372348743, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.012820126488804817}, {"id": 97, "seek": 42700, "start": 442.0, "end": 449.0, "text": " Well, it helps to imagine it like this, where we are looking to fill up the cells of this matrix C.", "tokens": [51114, 1042, 11, 309, 3665, 281, 3811, 309, 411, 341, 11, 689, 321, 366, 1237, 281, 2836, 493, 264, 5438, 295, 341, 8141, 383, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05073300372348743, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.012820126488804817}, {"id": 98, "seek": 42700, "start": 449.0, "end": 454.0, "text": " Each cell corresponds to a combination of a row of A with a column of B.", "tokens": [51464, 6947, 2815, 23249, 281, 257, 6562, 295, 257, 5386, 295, 316, 365, 257, 7738, 295, 363, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05073300372348743, "compression_ratio": 1.6384976525821595, "no_speech_prob": 0.012820126488804817}, {"id": 99, "seek": 45400, "start": 454.0, "end": 457.0, "text": " From here, there are several ways we could order the computation.", "tokens": [50364, 3358, 510, 11, 456, 366, 2940, 2098, 321, 727, 1668, 264, 24903, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06103551734998388, "compression_ratio": 1.6392156862745098, "no_speech_prob": 0.0015487236669287086}, {"id": 100, "seek": 45400, "start": 457.0, "end": 463.0, "text": " One way is, we could finish the computation of each cell of C before moving on to the next cell.", "tokens": [50514, 1485, 636, 307, 11, 321, 727, 2413, 264, 24903, 295, 1184, 2815, 295, 383, 949, 2684, 322, 281, 264, 958, 2815, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06103551734998388, "compression_ratio": 1.6392156862745098, "no_speech_prob": 0.0015487236669287086}, {"id": 101, "seek": 45400, "start": 463.0, "end": 468.0, "text": " That's probably how you do it after you heard my definition.", "tokens": [50814, 663, 311, 1391, 577, 291, 360, 309, 934, 291, 2198, 452, 7123, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06103551734998388, "compression_ratio": 1.6392156862745098, "no_speech_prob": 0.0015487236669287086}, {"id": 102, "seek": 45400, "start": 468.0, "end": 470.0, "text": " But there's another way.", "tokens": [51064, 583, 456, 311, 1071, 636, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06103551734998388, "compression_ratio": 1.6392156862745098, "no_speech_prob": 0.0015487236669287086}, {"id": 103, "seek": 45400, "start": 470.0, "end": 477.0, "text": " We could proceed like this, finishing the use of each column of A and row of B,", "tokens": [51164, 492, 727, 8991, 411, 341, 11, 12693, 264, 764, 295, 1184, 7738, 295, 316, 293, 5386, 295, 363, 11, 51514], "temperature": 0.0, "avg_logprob": -0.06103551734998388, "compression_ratio": 1.6392156862745098, "no_speech_prob": 0.0015487236669287086}, {"id": 104, "seek": 45400, "start": 477.0, "end": 483.0, "text": " which is swapped from how I define matrix multiplication, but gives an equivalent answer.", "tokens": [51514, 597, 307, 50011, 490, 577, 286, 6964, 8141, 27290, 11, 457, 2709, 364, 10344, 1867, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06103551734998388, "compression_ratio": 1.6392156862745098, "no_speech_prob": 0.0015487236669287086}, {"id": 105, "seek": 48300, "start": 483.0, "end": 486.0, "text": " And there are other ways of ordering operations.", "tokens": [50364, 400, 456, 366, 661, 2098, 295, 21739, 7705, 13, 50514], "temperature": 0.0, "avg_logprob": -0.059591310518281954, "compression_ratio": 1.7617328519855595, "no_speech_prob": 0.003483185777440667}, {"id": 106, "seek": 48300, "start": 486.0, "end": 491.0, "text": " The problem is, ordering makes a difference for the algorithm's speed.", "tokens": [50514, 440, 1154, 307, 11, 21739, 1669, 257, 2649, 337, 264, 9284, 311, 3073, 13, 50764], "temperature": 0.0, "avg_logprob": -0.059591310518281954, "compression_ratio": 1.7617328519855595, "no_speech_prob": 0.003483185777440667}, {"id": 107, "seek": 48300, "start": 491.0, "end": 495.0, "text": " They bring different amounts of data movement and differing data accessing patterns.", "tokens": [50764, 814, 1565, 819, 11663, 295, 1412, 3963, 293, 743, 278, 1412, 26440, 8294, 13, 50964], "temperature": 0.0, "avg_logprob": -0.059591310518281954, "compression_ratio": 1.7617328519855595, "no_speech_prob": 0.003483185777440667}, {"id": 108, "seek": 48300, "start": 495.0, "end": 502.0, "text": " And this speed depends, at the least, on A and B's dimensions, how they are physically stored in memory,", "tokens": [50964, 400, 341, 3073, 5946, 11, 412, 264, 1935, 11, 322, 316, 293, 363, 311, 12819, 11, 577, 436, 366, 9762, 12187, 294, 4675, 11, 51314], "temperature": 0.0, "avg_logprob": -0.059591310518281954, "compression_ratio": 1.7617328519855595, "no_speech_prob": 0.003483185777440667}, {"id": 109, "seek": 48300, "start": 502.0, "end": 509.0, "text": " and how much can be stored in a processor's registries, which are very small but provide extremely fast access.", "tokens": [51314, 293, 577, 709, 393, 312, 12187, 294, 257, 15321, 311, 11376, 2244, 11, 597, 366, 588, 1359, 457, 2893, 4664, 2370, 2105, 13, 51664], "temperature": 0.0, "avg_logprob": -0.059591310518281954, "compression_ratio": 1.7617328519855595, "no_speech_prob": 0.003483185777440667}, {"id": 110, "seek": 48300, "start": 509.0, "end": 512.0, "text": " And this is just one flavor of the algorithm's machine dependence.", "tokens": [51664, 400, 341, 307, 445, 472, 6813, 295, 264, 9284, 311, 3479, 31704, 13, 51814], "temperature": 0.0, "avg_logprob": -0.059591310518281954, "compression_ratio": 1.7617328519855595, "no_speech_prob": 0.003483185777440667}, {"id": 111, "seek": 51200, "start": 512.0, "end": 518.0, "text": " Everything from the memory layout to the processor to the operating system to the capacity for parallelism", "tokens": [50364, 5471, 490, 264, 4675, 13333, 281, 264, 15321, 281, 264, 7447, 1185, 281, 264, 6042, 337, 8952, 1434, 50664], "temperature": 0.0, "avg_logprob": -0.052961135732716526, "compression_ratio": 1.58, "no_speech_prob": 0.028425822034478188}, {"id": 112, "seek": 51200, "start": 518.0, "end": 520.0, "text": " determines the algorithm's speed.", "tokens": [50664, 24799, 264, 9284, 311, 3073, 13, 50764], "temperature": 0.0, "avg_logprob": -0.052961135732716526, "compression_ratio": 1.58, "no_speech_prob": 0.028425822034478188}, {"id": 113, "seek": 51200, "start": 520.0, "end": 528.0, "text": " And these things must be anticipated in all their diversity across users and time to design the best NLA algorithm.", "tokens": [50764, 400, 613, 721, 1633, 312, 23267, 294, 439, 641, 8811, 2108, 5022, 293, 565, 281, 1715, 264, 1151, 426, 11435, 9284, 13, 51164], "temperature": 0.0, "avg_logprob": -0.052961135732716526, "compression_ratio": 1.58, "no_speech_prob": 0.028425822034478188}, {"id": 114, "seek": 51200, "start": 528.0, "end": 533.0, "text": " As you can imagine, this gets very complicated very quickly.", "tokens": [51164, 1018, 291, 393, 3811, 11, 341, 2170, 588, 6179, 588, 2661, 13, 51414], "temperature": 0.0, "avg_logprob": -0.052961135732716526, "compression_ratio": 1.58, "no_speech_prob": 0.028425822034478188}, {"id": 115, "seek": 51200, "start": 533.0, "end": 539.0, "text": " To appreciate what's offered by randomized NLA, we'll also need some history.", "tokens": [51414, 1407, 4449, 437, 311, 8059, 538, 38513, 426, 11435, 11, 321, 603, 611, 643, 512, 2503, 13, 51714], "temperature": 0.0, "avg_logprob": -0.052961135732716526, "compression_ratio": 1.58, "no_speech_prob": 0.028425822034478188}, {"id": 116, "seek": 53900, "start": 539.0, "end": 543.0, "text": " John von Neumann is often named when discussing the origin of the field.", "tokens": [50364, 2619, 2957, 1734, 449, 969, 307, 2049, 4926, 562, 10850, 264, 4957, 295, 264, 2519, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10272345922689523, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0028007416985929012}, {"id": 117, "seek": 53900, "start": 543.0, "end": 551.0, "text": " Because in 1947, he and his co-author Herman Goldsten published one of the earliest uses of computers for applying linear algebra.", "tokens": [50564, 1436, 294, 40417, 11, 415, 293, 702, 598, 12, 34224, 44676, 6731, 6266, 6572, 472, 295, 264, 20573, 4960, 295, 10807, 337, 9275, 8213, 21989, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10272345922689523, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0028007416985929012}, {"id": 118, "seek": 53900, "start": 551.0, "end": 561.0, "text": " But this isn't a relevant origin for modern NLA software, since the programming paradigms of the 40s and 50s were just so different, very little of it persists today.", "tokens": [50964, 583, 341, 1943, 380, 257, 7340, 4957, 337, 4363, 426, 11435, 4722, 11, 1670, 264, 9410, 13480, 328, 2592, 295, 264, 3356, 82, 293, 2625, 82, 645, 445, 370, 819, 11, 588, 707, 295, 309, 868, 1751, 965, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10272345922689523, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0028007416985929012}, {"id": 119, "seek": 53900, "start": 561.0, "end": 567.0, "text": " The code was terribly verbose, machine dependent, hard to share, and just an absolute headache to write.", "tokens": [51464, 440, 3089, 390, 22903, 9595, 541, 11, 3479, 12334, 11, 1152, 281, 2073, 11, 293, 445, 364, 8236, 23520, 281, 2464, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10272345922689523, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0028007416985929012}, {"id": 120, "seek": 56700, "start": 567.0, "end": 577.0, "text": " So in 1957, IBM created the Fortran language, designed to ease programming for scientific computing and provide some machine independence.", "tokens": [50364, 407, 294, 46256, 11, 23487, 2942, 264, 11002, 4257, 2856, 11, 4761, 281, 12708, 9410, 337, 8134, 15866, 293, 2893, 512, 3479, 14640, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0637581937453326, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.00406983308494091}, {"id": 121, "seek": 56700, "start": 577.0, "end": 588.0, "text": " And in the 1960s, James Hardy Wilkinson and his colleagues collected and published papers on how to apply linear algebra with computers, but not with the Fortran language.", "tokens": [50864, 400, 294, 264, 16157, 82, 11, 5678, 43930, 9483, 10277, 266, 293, 702, 7734, 11087, 293, 6572, 10577, 322, 577, 281, 3079, 8213, 21989, 365, 10807, 11, 457, 406, 365, 264, 11002, 4257, 2856, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0637581937453326, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.00406983308494091}, {"id": 122, "seek": 56700, "start": 588.0, "end": 594.0, "text": " Most of their papers discussed how a specific algorithm could be applied to a category of matrix.", "tokens": [51414, 4534, 295, 641, 10577, 7152, 577, 257, 2685, 9284, 727, 312, 6456, 281, 257, 7719, 295, 8141, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0637581937453326, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.00406983308494091}, {"id": 123, "seek": 59400, "start": 594.0, "end": 602.0, "text": " This work earned Wilkinson a Turing Award, and along with Fortran, it created the environment from which modern NLA software was born.", "tokens": [50364, 639, 589, 12283, 9483, 10277, 266, 257, 314, 1345, 13894, 11, 293, 2051, 365, 11002, 4257, 11, 309, 2942, 264, 2823, 490, 597, 4363, 426, 11435, 4722, 390, 4232, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0722466219555248, "compression_ratio": 1.4389312977099236, "no_speech_prob": 0.007815143093466759}, {"id": 124, "seek": 59400, "start": 602.0, "end": 611.0, "text": " That happened in 1979, when BLOZ came out from the Jet Propulsion Laboratory in California, the basic linear algebra sub-program for Fortran.", "tokens": [50764, 663, 2011, 294, 30595, 11, 562, 15132, 46, 57, 1361, 484, 490, 264, 28730, 21944, 22973, 40824, 294, 5384, 11, 264, 3875, 8213, 21989, 1422, 12, 32726, 337, 11002, 4257, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0722466219555248, "compression_ratio": 1.4389312977099236, "no_speech_prob": 0.007815143093466759}, {"id": 125, "seek": 59400, "start": 611.0, "end": 618.0, "text": " It provided a small set of vector operations that were fast and tested across a variety of machines.", "tokens": [51214, 467, 5649, 257, 1359, 992, 295, 8062, 7705, 300, 645, 2370, 293, 8246, 2108, 257, 5673, 295, 8379, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0722466219555248, "compression_ratio": 1.4389312977099236, "no_speech_prob": 0.007815143093466759}, {"id": 126, "seek": 61800, "start": 618.0, "end": 623.0, "text": " Most importantly, they could implement NLA algorithms, like those proposed by Wilkinson.", "tokens": [50364, 4534, 8906, 11, 436, 727, 4445, 426, 11435, 14642, 11, 411, 729, 10348, 538, 9483, 10277, 266, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0722017765045166, "compression_ratio": 1.417624521072797, "no_speech_prob": 0.03621649369597435}, {"id": 127, "seek": 61800, "start": 623.0, "end": 633.0, "text": " And so in 1979, LINPAC came out, which was built on top of BLOZ, and had been developed over the previous decade, primarily for supercomputers.", "tokens": [50614, 400, 370, 294, 30595, 11, 19763, 47, 4378, 1361, 484, 11, 597, 390, 3094, 322, 1192, 295, 15132, 46, 57, 11, 293, 632, 668, 4743, 670, 264, 3894, 10378, 11, 10029, 337, 27839, 2582, 433, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0722017765045166, "compression_ratio": 1.417624521072797, "no_speech_prob": 0.03621649369597435}, {"id": 128, "seek": 61800, "start": 633.0, "end": 640.0, "text": " It wasn't the first NLA package, but it was a major step forward in speed, reliability, and distribution across the scientific community.", "tokens": [51114, 467, 2067, 380, 264, 700, 426, 11435, 7372, 11, 457, 309, 390, 257, 2563, 1823, 2128, 294, 3073, 11, 24550, 11, 293, 7316, 2108, 264, 8134, 1768, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0722017765045166, "compression_ratio": 1.417624521072797, "no_speech_prob": 0.03621649369597435}, {"id": 129, "seek": 64000, "start": 640.0, "end": 644.0, "text": " But at the same time, computer architectures were evolving.", "tokens": [50364, 583, 412, 264, 912, 565, 11, 3820, 6331, 1303, 645, 21085, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0979349050629005, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.3736804127693176}, {"id": 130, "seek": 64000, "start": 644.0, "end": 653.0, "text": " And so BLOZ 2 was released in 1980 form to perform matrix vector operations, which took advantage of the vector processor CPUs of the time.", "tokens": [50564, 400, 370, 15132, 46, 57, 568, 390, 4736, 294, 13626, 1254, 281, 2042, 8141, 8062, 7705, 11, 597, 1890, 5002, 295, 264, 8062, 15321, 13199, 82, 295, 264, 565, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0979349050629005, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.3736804127693176}, {"id": 131, "seek": 64000, "start": 653.0, "end": 659.0, "text": " But architectures changed again, to ones with shared memory cache-based parallel processing.", "tokens": [51014, 583, 6331, 1303, 3105, 797, 11, 281, 2306, 365, 5507, 4675, 19459, 12, 6032, 8952, 9007, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0979349050629005, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.3736804127693176}, {"id": 132, "seek": 64000, "start": 659.0, "end": 665.0, "text": " And so BLOZ 3 was released in 1990, which performed fast matrix-matrix operations.", "tokens": [51314, 400, 370, 15132, 46, 57, 805, 390, 4736, 294, 13384, 11, 597, 10332, 2370, 8141, 12, 15677, 6579, 7705, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0979349050629005, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.3736804127693176}, {"id": 133, "seek": 66500, "start": 665.0, "end": 671.0, "text": " And this is a perpetual story. Architectures changed, so BLOZ 1, 2, and 3 need to be updated.", "tokens": [50364, 400, 341, 307, 257, 48216, 1657, 13, 29306, 1303, 3105, 11, 370, 15132, 46, 57, 502, 11, 568, 11, 293, 805, 643, 281, 312, 10588, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07606272654490429, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.022972820326685905}, {"id": 134, "seek": 66500, "start": 671.0, "end": 674.0, "text": " Architectures changed again, and so we need more software updates.", "tokens": [50664, 29306, 1303, 3105, 797, 11, 293, 370, 321, 643, 544, 4722, 9205, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07606272654490429, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.022972820326685905}, {"id": 135, "seek": 66500, "start": 674.0, "end": 680.0, "text": " But now, to fully leverage BLOZ 1, 2, and 3, a new NLA package was needed.", "tokens": [50814, 583, 586, 11, 281, 4498, 13982, 15132, 46, 57, 502, 11, 568, 11, 293, 805, 11, 257, 777, 426, 11435, 7372, 390, 2978, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07606272654490429, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.022972820326685905}, {"id": 136, "seek": 66500, "start": 680.0, "end": 687.0, "text": " In 1992, LAPAC was released, after having been proposed five years earlier.", "tokens": [51114, 682, 23952, 11, 441, 4715, 4378, 390, 4736, 11, 934, 1419, 668, 10348, 1732, 924, 3071, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07606272654490429, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.022972820326685905}, {"id": 137, "seek": 66500, "start": 687.0, "end": 693.0, "text": " The authors included some modern NLA heroes, like Jack Dungara and James Demo.", "tokens": [51464, 440, 16552, 5556, 512, 4363, 426, 11435, 12332, 11, 411, 4718, 413, 1063, 2419, 293, 5678, 4686, 78, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07606272654490429, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.022972820326685905}, {"id": 138, "seek": 69300, "start": 693.0, "end": 703.0, "text": " Both have been involved ever since, architecting, writing, standardizing, testing, optimizing, and communicating the software to produce what it is today.", "tokens": [50364, 6767, 362, 668, 3288, 1562, 1670, 11, 6331, 278, 11, 3579, 11, 3832, 3319, 11, 4997, 11, 40425, 11, 293, 17559, 264, 4722, 281, 5258, 437, 309, 307, 965, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0835020585493608, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.005138433538377285}, {"id": 139, "seek": 69300, "start": 703.0, "end": 712.0, "text": " And that's quite a feat. Today in the 2020s, an absolutely enormous amount of linear algebra gets applied with LAPAC or BLOZ.", "tokens": [50864, 400, 300, 311, 1596, 257, 15425, 13, 2692, 294, 264, 4808, 82, 11, 364, 3122, 11322, 2372, 295, 8213, 21989, 2170, 6456, 365, 441, 4715, 4378, 420, 15132, 46, 57, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0835020585493608, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.005138433538377285}, {"id": 140, "seek": 69300, "start": 712.0, "end": 722.0, "text": " If you're doing any linear algebra with MATLAB, Python, or C++ or any other language you can name, it's very likely you're using this software or very close derivative of it.", "tokens": [51314, 759, 291, 434, 884, 604, 8213, 21989, 365, 5904, 11435, 33, 11, 15329, 11, 420, 383, 25472, 420, 604, 661, 2856, 291, 393, 1315, 11, 309, 311, 588, 3700, 291, 434, 1228, 341, 4722, 420, 588, 1998, 13760, 295, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0835020585493608, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.005138433538377285}, {"id": 141, "seek": 72200, "start": 722.0, "end": 727.0, "text": " And if you aren't, you're probably doing something wrong.", "tokens": [50364, 400, 498, 291, 3212, 380, 11, 291, 434, 1391, 884, 746, 2085, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07115519046783447, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.007119567133486271}, {"id": 142, "seek": 72200, "start": 727.0, "end": 732.0, "text": " Okay, and now I need to confess this short history is a major oversimplification.", "tokens": [50614, 1033, 11, 293, 586, 286, 643, 281, 19367, 341, 2099, 2503, 307, 257, 2563, 15488, 332, 564, 3774, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07115519046783447, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.007119567133486271}, {"id": 143, "seek": 72200, "start": 732.0, "end": 736.0, "text": " LAPAC exists in an ecosystem dedicated to scientific computing.", "tokens": [50864, 441, 4715, 4378, 8198, 294, 364, 11311, 8374, 281, 8134, 15866, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07115519046783447, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.007119567133486271}, {"id": 144, "seek": 72200, "start": 736.0, "end": 742.0, "text": " And so my cute linear story fails to represent the entangled, messy truth of the matter.", "tokens": [51064, 400, 370, 452, 4052, 8213, 1657, 18199, 281, 2906, 264, 948, 39101, 11, 16191, 3494, 295, 264, 1871, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07115519046783447, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.007119567133486271}, {"id": 145, "seek": 72200, "start": 742.0, "end": 747.0, "text": " To mitigate this, I'll give a very quick tour of the current software landscape.", "tokens": [51364, 1407, 27336, 341, 11, 286, 603, 976, 257, 588, 1702, 3512, 295, 264, 2190, 4722, 9661, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07115519046783447, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.007119567133486271}, {"id": 146, "seek": 74700, "start": 748.0, "end": 759.0, "text": " LAPAC doesn't work with distributed memory parallel processing, so we have ScalaPAC relying on PBLOZ, which performs many of the same operations as BLOZ, but executed across a large network of heterogeneous machines.", "tokens": [50414, 441, 4715, 4378, 1177, 380, 589, 365, 12631, 4675, 8952, 9007, 11, 370, 321, 362, 2747, 5159, 47, 4378, 24140, 322, 430, 17624, 46, 57, 11, 597, 26213, 867, 295, 264, 912, 7705, 382, 15132, 46, 57, 11, 457, 17577, 2108, 257, 2416, 3209, 295, 20789, 31112, 8379, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06870619941303749, "compression_ratio": 1.6357827476038338, "no_speech_prob": 0.2118818759918213}, {"id": 147, "seek": 74700, "start": 759.0, "end": 767.0, "text": " LAPAC isn't designed for sparse matrices, so there have been efforts to capture the gains of sparsity, but none have been received quite like LAPAC.", "tokens": [50964, 441, 4715, 4378, 1943, 380, 4761, 337, 637, 11668, 32284, 11, 370, 456, 362, 668, 6484, 281, 7983, 264, 16823, 295, 637, 685, 507, 11, 457, 6022, 362, 668, 4613, 1596, 411, 441, 4715, 4378, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06870619941303749, "compression_ratio": 1.6357827476038338, "no_speech_prob": 0.2118818759918213}, {"id": 148, "seek": 74700, "start": 767.0, "end": 775.0, "text": " LAPAC also isn't designed for GPUs and modern multicore architectures, so we have MAGMA, which enables use of NVIDIA and AMD's fancy GPU hardware.", "tokens": [51364, 441, 4715, 4378, 611, 1943, 380, 4761, 337, 18407, 82, 293, 4363, 30608, 418, 6331, 1303, 11, 370, 321, 362, 12191, 38, 9998, 11, 597, 17077, 764, 295, 426, 3958, 6914, 293, 34808, 311, 10247, 18407, 8837, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06870619941303749, "compression_ratio": 1.6357827476038338, "no_speech_prob": 0.2118818759918213}, {"id": 149, "seek": 77500, "start": 775.0, "end": 777.0, "text": " Speaking of NVIDIA, we also have Kubloss.", "tokens": [50364, 13069, 295, 426, 3958, 6914, 11, 321, 611, 362, 35805, 75, 772, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08640707456148587, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.08499055355787277}, {"id": 150, "seek": 77500, "start": 777.0, "end": 785.0, "text": " See, BLOZ comes with a bunch of knobs that need to be optimized for particular hardware, and so Kubloss has those knobs set for NVIDIA GPUs, among other things.", "tokens": [50464, 3008, 11, 15132, 46, 57, 1487, 365, 257, 3840, 295, 46999, 300, 643, 281, 312, 26941, 337, 1729, 8837, 11, 293, 370, 35805, 75, 772, 575, 729, 46999, 992, 337, 426, 3958, 6914, 18407, 82, 11, 3654, 661, 721, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08640707456148587, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.08499055355787277}, {"id": 151, "seek": 77500, "start": 785.0, "end": 788.0, "text": " Also, Apple has Accelerate to do that same tuning for their hardware.", "tokens": [50864, 2743, 11, 6373, 575, 5725, 6185, 473, 281, 360, 300, 912, 15164, 337, 641, 8837, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08640707456148587, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.08499055355787277}, {"id": 152, "seek": 77500, "start": 788.0, "end": 794.0, "text": " And since tuning knobs for hardware isn't easy, we also have Atlas, which automates some of this tuning.", "tokens": [51014, 400, 1670, 15164, 46999, 337, 8837, 1943, 380, 1858, 11, 321, 611, 362, 32485, 11, 597, 3553, 1024, 512, 295, 341, 15164, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08640707456148587, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.08499055355787277}, {"id": 153, "seek": 77500, "start": 794.0, "end": 799.0, "text": " More recently, there's GPT Tune, which uses Bayesian optimization and Gaussian processes.", "tokens": [51314, 5048, 3938, 11, 456, 311, 26039, 51, 314, 2613, 11, 597, 4960, 7840, 42434, 19618, 293, 39148, 7555, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08640707456148587, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.08499055355787277}, {"id": 154, "seek": 77500, "start": 799.0, "end": 802.0, "text": " If you don't know what those are, I wonder where you could learn about them.", "tokens": [51564, 759, 291, 500, 380, 458, 437, 729, 366, 11, 286, 2441, 689, 291, 727, 1466, 466, 552, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08640707456148587, "compression_ratio": 1.68944099378882, "no_speech_prob": 0.08499055355787277}, {"id": 155, "seek": 80200, "start": 802.0, "end": 806.0, "text": " Oh, wait, true theta.io! That must be a great place for data science help.", "tokens": [50364, 876, 11, 1699, 11, 2074, 9725, 13, 1004, 0, 663, 1633, 312, 257, 869, 1081, 337, 1412, 3497, 854, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10000738247420436, "compression_ratio": 1.559748427672956, "no_speech_prob": 0.17321202158927917}, {"id": 156, "seek": 80200, "start": 806.0, "end": 812.0, "text": " Moving on, people also want to perform large batches of small and similar NLA operations, so we have batch BLOZ.", "tokens": [50564, 14242, 322, 11, 561, 611, 528, 281, 2042, 2416, 15245, 279, 295, 1359, 293, 2531, 426, 11435, 7705, 11, 370, 321, 362, 15245, 15132, 46, 57, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10000738247420436, "compression_ratio": 1.559748427672956, "no_speech_prob": 0.17321202158927917}, {"id": 157, "seek": 80200, "start": 812.0, "end": 815.0, "text": " I'd like to say that covers it, but it doesn't.", "tokens": [50864, 286, 1116, 411, 281, 584, 300, 10538, 309, 11, 457, 309, 1177, 380, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10000738247420436, "compression_ratio": 1.559748427672956, "no_speech_prob": 0.17321202158927917}, {"id": 158, "seek": 80200, "start": 815.0, "end": 821.0, "text": " There's a lot of software out there doing NLA, and this list right here is just the free open source stuff.", "tokens": [51014, 821, 311, 257, 688, 295, 4722, 484, 456, 884, 426, 11435, 11, 293, 341, 1329, 558, 510, 307, 445, 264, 1737, 1269, 4009, 1507, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10000738247420436, "compression_ratio": 1.559748427672956, "no_speech_prob": 0.17321202158927917}, {"id": 159, "seek": 80200, "start": 823.0, "end": 827.0, "text": " And now we can finally discuss the paper on randomized numerical linear algebra.", "tokens": [51414, 400, 586, 321, 393, 2721, 2248, 264, 3035, 322, 38513, 29054, 8213, 21989, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10000738247420436, "compression_ratio": 1.559748427672956, "no_speech_prob": 0.17321202158927917}, {"id": 160, "seek": 80200, "start": 827.0, "end": 831.0, "text": " Again, I'm making this video because of some remarkable claims it made.", "tokens": [51614, 3764, 11, 286, 478, 1455, 341, 960, 570, 295, 512, 12802, 9441, 309, 1027, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10000738247420436, "compression_ratio": 1.559748427672956, "no_speech_prob": 0.17321202158927917}, {"id": 161, "seek": 83100, "start": 831.0, "end": 838.0, "text": " And it took them especially seriously because it's authored by some of the original developers of BLOZ and LA-PAC, like Jack and James.", "tokens": [50364, 400, 309, 1890, 552, 2318, 6638, 570, 309, 311, 6979, 2769, 538, 512, 295, 264, 3380, 8849, 295, 15132, 46, 57, 293, 9855, 12, 47, 4378, 11, 411, 4718, 293, 5678, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05184011311494103, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.00628910306841135}, {"id": 162, "seek": 83100, "start": 838.0, "end": 844.0, "text": " In fact, I spoke with the first author Riley Murray to make sure I understood exactly what's going on here.", "tokens": [50714, 682, 1186, 11, 286, 7179, 365, 264, 700, 3793, 31373, 27291, 281, 652, 988, 286, 7320, 2293, 437, 311, 516, 322, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.05184011311494103, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.00628910306841135}, {"id": 163, "seek": 83100, "start": 844.0, "end": 849.0, "text": " Now, when reading this, I knew LA-PAC and BLOZ were virtually impossible to dethrone.", "tokens": [51014, 823, 11, 562, 3760, 341, 11, 286, 2586, 9855, 12, 47, 4378, 293, 15132, 46, 57, 645, 14103, 6243, 281, 1141, 1703, 546, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05184011311494103, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.00628910306841135}, {"id": 164, "seek": 83100, "start": 849.0, "end": 856.0, "text": " Also, from a distance, my impression was the field of NLA had matured, and there probably weren't huge gains to be had.", "tokens": [51264, 2743, 11, 490, 257, 4560, 11, 452, 9995, 390, 264, 2519, 295, 426, 11435, 632, 14442, 67, 11, 293, 456, 1391, 4999, 380, 2603, 16823, 281, 312, 632, 13, 51614], "temperature": 0.0, "avg_logprob": -0.05184011311494103, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.00628910306841135}, {"id": 165, "seek": 83100, "start": 856.0, "end": 858.0, "text": " And I'm not alone in that impression.", "tokens": [51614, 400, 286, 478, 406, 3312, 294, 300, 9995, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05184011311494103, "compression_ratio": 1.570967741935484, "no_speech_prob": 0.00628910306841135}, {"id": 166, "seek": 85800, "start": 858.0, "end": 863.0, "text": " To understand this, we need to talk about how we describe an algorithm's efficiency.", "tokens": [50364, 1407, 1223, 341, 11, 321, 643, 281, 751, 466, 577, 321, 6786, 364, 9284, 311, 10493, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06271319919162327, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.0031724979635328054}, {"id": 167, "seek": 85800, "start": 863.0, "end": 866.0, "text": " Say we're given a matrix A, and it's an N by N matrix.", "tokens": [50614, 6463, 321, 434, 2212, 257, 8141, 316, 11, 293, 309, 311, 364, 426, 538, 426, 8141, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06271319919162327, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.0031724979635328054}, {"id": 168, "seek": 85800, "start": 866.0, "end": 870.0, "text": " Let's say we like to multiply it by another matrix B of the same size.", "tokens": [50764, 961, 311, 584, 321, 411, 281, 12972, 309, 538, 1071, 8141, 363, 295, 264, 912, 2744, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06271319919162327, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.0031724979635328054}, {"id": 169, "seek": 85800, "start": 870.0, "end": 876.0, "text": " Now, if we were to do this the standard way, that would be what is called an order N cubed algorithm.", "tokens": [50964, 823, 11, 498, 321, 645, 281, 360, 341, 264, 3832, 636, 11, 300, 576, 312, 437, 307, 1219, 364, 1668, 426, 36510, 9284, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06271319919162327, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.0031724979635328054}, {"id": 170, "seek": 85800, "start": 876.0, "end": 883.0, "text": " That means, as the side length N grows, the number of operations grows like N cubed, roughly.", "tokens": [51264, 663, 1355, 11, 382, 264, 1252, 4641, 426, 13156, 11, 264, 1230, 295, 7705, 13156, 411, 426, 36510, 11, 9810, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06271319919162327, "compression_ratio": 1.6047430830039526, "no_speech_prob": 0.0031724979635328054}, {"id": 171, "seek": 88300, "start": 884.0, "end": 891.0, "text": " For example, say multiplying 10 by 10 matrices takes some fraction C of one second.", "tokens": [50414, 1171, 1365, 11, 584, 30955, 1266, 538, 1266, 32284, 2516, 512, 14135, 383, 295, 472, 1150, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07711556517047646, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.016151145100593567}, {"id": 172, "seek": 88300, "start": 891.0, "end": 900.0, "text": " If we multiply 100 by 100 matrices, then we'd have to wait an amount of time close to that same fraction C, but now of a thousand seconds.", "tokens": [50764, 759, 321, 12972, 2319, 538, 2319, 32284, 11, 550, 321, 1116, 362, 281, 1699, 364, 2372, 295, 565, 1998, 281, 300, 912, 14135, 383, 11, 457, 586, 295, 257, 4714, 3949, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07711556517047646, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.016151145100593567}, {"id": 173, "seek": 88300, "start": 900.0, "end": 907.0, "text": " So, we increase the side length by a factor of 10, and the time increased by a factor of a thousand.", "tokens": [51214, 407, 11, 321, 3488, 264, 1252, 4641, 538, 257, 5952, 295, 1266, 11, 293, 264, 565, 6505, 538, 257, 5952, 295, 257, 4714, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07711556517047646, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.016151145100593567}, {"id": 174, "seek": 90700, "start": 907.0, "end": 913.0, "text": " Fast hardware can bring down C, whatever it is, but it won't change its painful growth.", "tokens": [50364, 15968, 8837, 393, 1565, 760, 383, 11, 2035, 309, 307, 11, 457, 309, 1582, 380, 1319, 1080, 11697, 4599, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10018294198172432, "compression_ratio": 1.475206611570248, "no_speech_prob": 0.014955797232687473}, {"id": 175, "seek": 90700, "start": 913.0, "end": 917.0, "text": " However, in 1969, something remarkable did.", "tokens": [50664, 2908, 11, 294, 32090, 11, 746, 12802, 630, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10018294198172432, "compression_ratio": 1.475206611570248, "no_speech_prob": 0.014955797232687473}, {"id": 176, "seek": 90700, "start": 917.0, "end": 926.0, "text": " Volcker Strassen surprised everyone with an algorithm that does multiplication in a way that grows like N to the 2.8-ish.", "tokens": [50864, 8911, 9178, 8251, 8356, 6100, 1518, 365, 364, 9284, 300, 775, 27290, 294, 257, 636, 300, 13156, 411, 426, 281, 264, 568, 13, 23, 12, 742, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10018294198172432, "compression_ratio": 1.475206611570248, "no_speech_prob": 0.014955797232687473}, {"id": 177, "seek": 90700, "start": 926.0, "end": 933.0, "text": " This was extremely surprising, since matrix multiplication, the standard way, involves three for loops.", "tokens": [51314, 639, 390, 4664, 8830, 11, 1670, 8141, 27290, 11, 264, 3832, 636, 11, 11626, 1045, 337, 16121, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10018294198172432, "compression_ratio": 1.475206611570248, "no_speech_prob": 0.014955797232687473}, {"id": 178, "seek": 93300, "start": 933.0, "end": 939.0, "text": " So, the exponent of three seems totally unavoidable, and yet, a lower exponent was possible,", "tokens": [50364, 407, 11, 264, 37871, 295, 1045, 2544, 3879, 36541, 17079, 712, 11, 293, 1939, 11, 257, 3126, 37871, 390, 1944, 11, 50664], "temperature": 0.0, "avg_logprob": -0.07126161350923425, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.013219067826867104}, {"id": 179, "seek": 93300, "start": 939.0, "end": 943.0, "text": " and so the result kicked off research to get that 2.8 exponent down.", "tokens": [50664, 293, 370, 264, 1874, 14609, 766, 2132, 281, 483, 300, 568, 13, 23, 37871, 760, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07126161350923425, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.013219067826867104}, {"id": 180, "seek": 93300, "start": 943.0, "end": 948.0, "text": " It has since leveled out, and it's leveling out where I formed my impression.", "tokens": [50864, 467, 575, 1670, 1496, 292, 484, 11, 293, 309, 311, 40617, 484, 689, 286, 8693, 452, 9995, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07126161350923425, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.013219067826867104}, {"id": 181, "seek": 93300, "start": 948.0, "end": 956.0, "text": " In general, for all important matrix algorithms, pushing these exponents significantly further down seems effectively impossible.", "tokens": [51114, 682, 2674, 11, 337, 439, 1021, 8141, 14642, 11, 7380, 613, 12680, 791, 10591, 3052, 760, 2544, 8659, 6243, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07126161350923425, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.013219067826867104}, {"id": 182, "seek": 95600, "start": 956.0, "end": 961.0, "text": " So, as I was reading this, I believed gains in speed would not come from fundamentally new algorithms,", "tokens": [50364, 407, 11, 382, 286, 390, 3760, 341, 11, 286, 7847, 16823, 294, 3073, 576, 406, 808, 490, 17879, 777, 14642, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 183, "seek": 95600, "start": 961.0, "end": 964.0, "text": " but just better scaled-up hardware.", "tokens": [50614, 457, 445, 1101, 36039, 12, 1010, 8837, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 184, "seek": 95600, "start": 964.0, "end": 967.0, "text": " That's expensive, but it seems like it's the only option.", "tokens": [50764, 663, 311, 5124, 11, 457, 309, 2544, 411, 309, 311, 264, 787, 3614, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 185, "seek": 95600, "start": 967.0, "end": 971.0, "text": " But that understanding changed when I read these two paragraphs.", "tokens": [50914, 583, 300, 3701, 3105, 562, 286, 1401, 613, 732, 48910, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 186, "seek": 95600, "start": 971.0, "end": 973.0, "text": " Here's what it's saying.", "tokens": [51114, 1692, 311, 437, 309, 311, 1566, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 187, "seek": 95600, "start": 973.0, "end": 977.0, "text": " A problem you see absolutely everywhere is the problem of least squares.", "tokens": [51214, 316, 1154, 291, 536, 3122, 5315, 307, 264, 1154, 295, 1935, 19368, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 188, "seek": 95600, "start": 977.0, "end": 979.0, "text": " I'll explain what it is.", "tokens": [51414, 286, 603, 2903, 437, 309, 307, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10665329215452843, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.03258116543292999}, {"id": 189, "seek": 97900, "start": 979.0, "end": 986.0, "text": " We're given a matrix A, which has M rows and N columns, and we'll assume that N is much less than M,", "tokens": [50364, 492, 434, 2212, 257, 8141, 316, 11, 597, 575, 376, 13241, 293, 426, 13766, 11, 293, 321, 603, 6552, 300, 426, 307, 709, 1570, 813, 376, 11, 50714], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 190, "seek": 97900, "start": 986.0, "end": 988.0, "text": " which is actually pretty typical in practice.", "tokens": [50714, 597, 307, 767, 1238, 7476, 294, 3124, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 191, "seek": 97900, "start": 988.0, "end": 991.0, "text": " We're also given a vector B, which has dimension M.", "tokens": [50814, 492, 434, 611, 2212, 257, 8062, 363, 11, 597, 575, 10139, 376, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 192, "seek": 97900, "start": 991.0, "end": 995.0, "text": " So, A and B are matrix and a vector that are given to us for this problem.", "tokens": [50964, 407, 11, 316, 293, 363, 366, 8141, 293, 257, 8062, 300, 366, 2212, 281, 505, 337, 341, 1154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 193, "seek": 97900, "start": 995.0, "end": 998.0, "text": " Now, the goal is going to be to find a vector X.", "tokens": [51164, 823, 11, 264, 3387, 307, 516, 281, 312, 281, 915, 257, 8062, 1783, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 194, "seek": 97900, "start": 998.0, "end": 1005.0, "text": " First, we form AX, which, as mentioned, is a linear function defined by multiplication with A.", "tokens": [51314, 2386, 11, 321, 1254, 316, 55, 11, 597, 11, 382, 2835, 11, 307, 257, 8213, 2445, 7642, 538, 27290, 365, 316, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 195, "seek": 97900, "start": 1005.0, "end": 1008.0, "text": " Then we consider its distance from B.", "tokens": [51664, 1396, 321, 1949, 1080, 4560, 490, 363, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05467114486093596, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.04335739463567734}, {"id": 196, "seek": 100800, "start": 1008.0, "end": 1011.0, "text": " That's what this notation means.", "tokens": [50364, 663, 311, 437, 341, 24657, 1355, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06599559883276622, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.0002098810946336016}, {"id": 197, "seek": 100800, "start": 1011.0, "end": 1014.0, "text": " Now, our goal is to minimize this distance.", "tokens": [50514, 823, 11, 527, 3387, 307, 281, 17522, 341, 4560, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06599559883276622, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.0002098810946336016}, {"id": 198, "seek": 100800, "start": 1014.0, "end": 1021.0, "text": " So, in one sentence, our goal is to find X such that AX is as close as possible to the vector B.", "tokens": [50664, 407, 11, 294, 472, 8174, 11, 527, 3387, 307, 281, 915, 1783, 1270, 300, 316, 55, 307, 382, 1998, 382, 1944, 281, 264, 8062, 363, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06599559883276622, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.0002098810946336016}, {"id": 199, "seek": 100800, "start": 1021.0, "end": 1027.0, "text": " Okay, now the best NLA algorithm to solve this involves order MN squared operations.", "tokens": [51014, 1033, 11, 586, 264, 1151, 426, 11435, 9284, 281, 5039, 341, 11626, 1668, 376, 45, 8889, 7705, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06599559883276622, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.0002098810946336016}, {"id": 200, "seek": 100800, "start": 1027.0, "end": 1033.0, "text": " So, we have an exponent of 2, but at least it's on N and not the much larger M.", "tokens": [51314, 407, 11, 321, 362, 364, 37871, 295, 568, 11, 457, 412, 1935, 309, 311, 322, 426, 293, 406, 264, 709, 4833, 376, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06599559883276622, "compression_ratio": 1.5225225225225225, "no_speech_prob": 0.0002098810946336016}, {"id": 201, "seek": 103300, "start": 1033.0, "end": 1039.0, "text": " Now, what Rand NLA says is, if you're willing to accept a small and controllable error in your answer,", "tokens": [50364, 823, 11, 437, 23614, 426, 11435, 1619, 307, 11, 498, 291, 434, 4950, 281, 3241, 257, 1359, 293, 45159, 712, 6713, 294, 428, 1867, 11, 50664], "temperature": 0.0, "avg_logprob": -0.0647659695476567, "compression_ratio": 1.5475285171102662, "no_speech_prob": 0.028003571555018425}, {"id": 202, "seek": 103300, "start": 1039.0, "end": 1044.0, "text": " which we'll call epsilon, then randomized algorithms can actually solve this", "tokens": [50664, 597, 321, 603, 818, 17889, 11, 550, 38513, 14642, 393, 767, 5039, 341, 50914], "temperature": 0.0, "avg_logprob": -0.0647659695476567, "compression_ratio": 1.5475285171102662, "no_speech_prob": 0.028003571555018425}, {"id": 203, "seek": 103300, "start": 1044.0, "end": 1049.0, "text": " in order MN log 1 over epsilon plus N cubed operations.", "tokens": [50914, 294, 1668, 376, 45, 3565, 502, 670, 17889, 1804, 426, 36510, 7705, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0647659695476567, "compression_ratio": 1.5475285171102662, "no_speech_prob": 0.028003571555018425}, {"id": 204, "seek": 103300, "start": 1049.0, "end": 1053.0, "text": " It may not sound like much, but this is huge.", "tokens": [51164, 467, 815, 406, 1626, 411, 709, 11, 457, 341, 307, 2603, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0647659695476567, "compression_ratio": 1.5475285171102662, "no_speech_prob": 0.028003571555018425}, {"id": 205, "seek": 103300, "start": 1053.0, "end": 1057.0, "text": " In heavy-duty applications, both M and N can be big.", "tokens": [51364, 682, 4676, 12, 67, 6432, 5821, 11, 1293, 376, 293, 426, 393, 312, 955, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0647659695476567, "compression_ratio": 1.5475285171102662, "no_speech_prob": 0.028003571555018425}, {"id": 206, "seek": 103300, "start": 1057.0, "end": 1062.0, "text": " N might be in the thousands, and M could be in the millions or billions.", "tokens": [51564, 426, 1062, 312, 294, 264, 5383, 11, 293, 376, 727, 312, 294, 264, 6803, 420, 17375, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0647659695476567, "compression_ratio": 1.5475285171102662, "no_speech_prob": 0.028003571555018425}, {"id": 207, "seek": 106200, "start": 1062.0, "end": 1067.0, "text": " Now, if we want a strong approximation, like one within a tenth or a hundredth of a percent,", "tokens": [50364, 823, 11, 498, 321, 528, 257, 2068, 28023, 11, 411, 472, 1951, 257, 27269, 420, 257, 3262, 392, 295, 257, 3043, 11, 50614], "temperature": 0.0, "avg_logprob": -0.04111783504486084, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0014548960607498884}, {"id": 208, "seek": 106200, "start": 1067.0, "end": 1070.0, "text": " then this term is going to be in the single digits.", "tokens": [50614, 550, 341, 1433, 307, 516, 281, 312, 294, 264, 2167, 27011, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04111783504486084, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0014548960607498884}, {"id": 209, "seek": 106200, "start": 1070.0, "end": 1075.0, "text": " And since M is the big problematic number, then this term likely won't matter much.", "tokens": [50764, 400, 1670, 376, 307, 264, 955, 19011, 1230, 11, 550, 341, 1433, 3700, 1582, 380, 1871, 709, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04111783504486084, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0014548960607498884}, {"id": 210, "seek": 106200, "start": 1075.0, "end": 1078.0, "text": " So, let's look at the ratio of the dominant terms.", "tokens": [51014, 407, 11, 718, 311, 574, 412, 264, 8509, 295, 264, 15657, 2115, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04111783504486084, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0014548960607498884}, {"id": 211, "seek": 106200, "start": 1078.0, "end": 1083.0, "text": " This will give a sense of how many times faster the randomized algorithm is than the classic one.", "tokens": [51164, 639, 486, 976, 257, 2020, 295, 577, 867, 1413, 4663, 264, 38513, 9284, 307, 813, 264, 7230, 472, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04111783504486084, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0014548960607498884}, {"id": 212, "seek": 106200, "start": 1083.0, "end": 1089.0, "text": " Things cancel, and now we're looking at a speed-up factor of N over log 1 over epsilon.", "tokens": [51414, 9514, 10373, 11, 293, 586, 321, 434, 1237, 412, 257, 3073, 12, 1010, 5952, 295, 426, 670, 3565, 502, 670, 17889, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04111783504486084, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0014548960607498884}, {"id": 213, "seek": 108900, "start": 1089.0, "end": 1093.0, "text": " If N is in the thousands, and this is in the single digits,", "tokens": [50364, 759, 426, 307, 294, 264, 5383, 11, 293, 341, 307, 294, 264, 2167, 27011, 11, 50564], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 214, "seek": 108900, "start": 1093.0, "end": 1098.0, "text": " we're looking at a speed-up factor of around a thousand X. That's absurd.", "tokens": [50564, 321, 434, 1237, 412, 257, 3073, 12, 1010, 5952, 295, 926, 257, 4714, 1783, 13, 663, 311, 19774, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 215, "seek": 108900, "start": 1098.0, "end": 1103.0, "text": " Now, due to some omitted details, we don't actually get a thousand X speed-ups in practice.", "tokens": [50814, 823, 11, 3462, 281, 512, 3406, 3944, 4365, 11, 321, 500, 380, 767, 483, 257, 4714, 1783, 3073, 12, 7528, 294, 3124, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 216, "seek": 108900, "start": 1103.0, "end": 1107.0, "text": " However, we do get twenty X, and that's still huge.", "tokens": [51064, 2908, 11, 321, 360, 483, 7699, 1783, 11, 293, 300, 311, 920, 2603, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 217, "seek": 108900, "start": 1107.0, "end": 1110.0, "text": " If we did the pure parallelization and hardware approach,", "tokens": [51264, 759, 321, 630, 264, 6075, 8952, 2144, 293, 8837, 3109, 11, 51414], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 218, "seek": 108900, "start": 1110.0, "end": 1114.0, "text": " recreating that gain might take twenty X the energy or twenty X the cost.", "tokens": [51414, 850, 44613, 300, 6052, 1062, 747, 7699, 1783, 264, 2281, 420, 7699, 1783, 264, 2063, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 219, "seek": 108900, "start": 1114.0, "end": 1118.0, "text": " Okay, but such bold claims raise some questions.", "tokens": [51614, 1033, 11, 457, 1270, 11928, 9441, 5300, 512, 1651, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0593584006832492, "compression_ratio": 1.6776556776556777, "no_speech_prob": 0.0015486768679693341}, {"id": 220, "seek": 111800, "start": 1118.0, "end": 1121.0, "text": " First, what are these algorithms doing?", "tokens": [50364, 2386, 11, 437, 366, 613, 14642, 884, 30, 50514], "temperature": 0.0, "avg_logprob": -0.04758552975124783, "compression_ratio": 1.528, "no_speech_prob": 0.001169390743598342}, {"id": 221, "seek": 111800, "start": 1121.0, "end": 1123.0, "text": " Well, I'll get more into that later.", "tokens": [50514, 1042, 11, 286, 603, 483, 544, 666, 300, 1780, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04758552975124783, "compression_ratio": 1.528, "no_speech_prob": 0.001169390743598342}, {"id": 222, "seek": 111800, "start": 1123.0, "end": 1127.0, "text": " But to describe it briefly, with high probability,", "tokens": [50614, 583, 281, 6786, 309, 10515, 11, 365, 1090, 8482, 11, 50814], "temperature": 0.0, "avg_logprob": -0.04758552975124783, "compression_ratio": 1.528, "no_speech_prob": 0.001169390743598342}, {"id": 223, "seek": 111800, "start": 1127.0, "end": 1134.0, "text": " a random summary of the data massively shrinks the problem while preserving virtually all of the relevant information.", "tokens": [50814, 257, 4974, 12691, 295, 264, 1412, 29379, 9884, 16431, 264, 1154, 1339, 33173, 14103, 439, 295, 264, 7340, 1589, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04758552975124783, "compression_ratio": 1.528, "no_speech_prob": 0.001169390743598342}, {"id": 224, "seek": 111800, "start": 1134.0, "end": 1136.0, "text": " And that raises another question.", "tokens": [51164, 400, 300, 19658, 1071, 1168, 13, 51264], "temperature": 0.0, "avg_logprob": -0.04758552975124783, "compression_ratio": 1.528, "no_speech_prob": 0.001169390743598342}, {"id": 225, "seek": 111800, "start": 1136.0, "end": 1144.0, "text": " A long-standing goal of classic NLA is to compute the most exact answer possible as fast as possible.", "tokens": [51264, 316, 938, 12, 8618, 3387, 295, 7230, 426, 11435, 307, 281, 14722, 264, 881, 1900, 1867, 1944, 382, 2370, 382, 1944, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04758552975124783, "compression_ratio": 1.528, "no_speech_prob": 0.001169390743598342}, {"id": 226, "seek": 114400, "start": 1144.0, "end": 1150.0, "text": " That is, get the answer as precisely as the machine will allow and then optimize for speed.", "tokens": [50364, 663, 307, 11, 483, 264, 1867, 382, 13402, 382, 264, 3479, 486, 2089, 293, 550, 19719, 337, 3073, 13, 50664], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 227, "seek": 114400, "start": 1150.0, "end": 1157.0, "text": " But in randomized NLA, the goal is to compute a close enough answer as fast as possible with high probability.", "tokens": [50664, 583, 294, 38513, 426, 11435, 11, 264, 3387, 307, 281, 14722, 257, 1998, 1547, 1867, 382, 2370, 382, 1944, 365, 1090, 8482, 13, 51014], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 228, "seek": 114400, "start": 1157.0, "end": 1160.0, "text": " And this allows for much faster algorithms.", "tokens": [51014, 400, 341, 4045, 337, 709, 4663, 14642, 13, 51164], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 229, "seek": 114400, "start": 1160.0, "end": 1164.0, "text": " The question is, why are we allowing this new standard?", "tokens": [51164, 440, 1168, 307, 11, 983, 366, 321, 8293, 341, 777, 3832, 30, 51364], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 230, "seek": 114400, "start": 1164.0, "end": 1168.0, "text": " Well, one motivation is the recent trend in machine learning.", "tokens": [51364, 1042, 11, 472, 12335, 307, 264, 5162, 6028, 294, 3479, 2539, 13, 51564], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 231, "seek": 114400, "start": 1168.0, "end": 1171.0, "text": " Machine learning accepts that the data is noisy.", "tokens": [51564, 22155, 2539, 33538, 300, 264, 1412, 307, 24518, 13, 51714], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 232, "seek": 114400, "start": 1171.0, "end": 1173.0, "text": " The data is just an approximation of the truth.", "tokens": [51714, 440, 1412, 307, 445, 364, 28023, 295, 264, 3494, 13, 51814], "temperature": 0.0, "avg_logprob": -0.038922751715423864, "compression_ratio": 1.6824817518248176, "no_speech_prob": 0.001597756170667708}, {"id": 233, "seek": 117300, "start": 1173.0, "end": 1177.0, "text": " And so computing things exactly is unnecessary.", "tokens": [50364, 400, 370, 15866, 721, 2293, 307, 19350, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 234, "seek": 117300, "start": 1177.0, "end": 1180.0, "text": " The exact answer would change with the change in the meaningless noise.", "tokens": [50564, 440, 1900, 1867, 576, 1319, 365, 264, 1319, 294, 264, 33232, 5658, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 235, "seek": 117300, "start": 1180.0, "end": 1183.0, "text": " So an approximate answer is, life be just as good.", "tokens": [50714, 407, 364, 30874, 1867, 307, 11, 993, 312, 445, 382, 665, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 236, "seek": 117300, "start": 1183.0, "end": 1187.0, "text": " And it might even be an exact answer with a different sample of data.", "tokens": [50864, 400, 309, 1062, 754, 312, 364, 1900, 1867, 365, 257, 819, 6889, 295, 1412, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 237, "seek": 117300, "start": 1187.0, "end": 1190.0, "text": " And so this looks a lot more reasonable.", "tokens": [51064, 400, 370, 341, 1542, 257, 688, 544, 10585, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 238, "seek": 117300, "start": 1190.0, "end": 1197.0, "text": " Also, when you look at some algorithms, we find that close enough can sometimes be made extremely close.", "tokens": [51214, 2743, 11, 562, 291, 574, 412, 512, 14642, 11, 321, 915, 300, 1998, 1547, 393, 2171, 312, 1027, 4664, 1998, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 239, "seek": 117300, "start": 1197.0, "end": 1202.0, "text": " And high probability can sometimes be made so high, it's not even worth mentioning.", "tokens": [51564, 400, 1090, 8482, 393, 2171, 312, 1027, 370, 1090, 11, 309, 311, 406, 754, 3163, 18315, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06523640520937808, "compression_ratio": 1.6967509025270757, "no_speech_prob": 0.0021155623253434896}, {"id": 240, "seek": 120200, "start": 1202.0, "end": 1209.0, "text": " In general, there's a trade-off between speed and accuracy, and how favorable that trade-off is depends on the algorithm.", "tokens": [50364, 682, 2674, 11, 456, 311, 257, 4923, 12, 4506, 1296, 3073, 293, 14170, 11, 293, 577, 29557, 300, 4923, 12, 4506, 307, 5946, 322, 264, 9284, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 241, "seek": 120200, "start": 1209.0, "end": 1212.0, "text": " Okay, next question.", "tokens": [50714, 1033, 11, 958, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 242, "seek": 120200, "start": 1212.0, "end": 1215.0, "text": " This argument is just a heuristic illustration.", "tokens": [50864, 639, 6770, 307, 445, 257, 415, 374, 3142, 22645, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 243, "seek": 120200, "start": 1215.0, "end": 1219.0, "text": " It's not pointing to an implemented algorithm with measurable performance.", "tokens": [51014, 467, 311, 406, 12166, 281, 364, 12270, 9284, 365, 43615, 3389, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 244, "seek": 120200, "start": 1219.0, "end": 1222.0, "text": " So what is the actual performance?", "tokens": [51214, 407, 437, 307, 264, 3539, 3389, 30, 51364], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 245, "seek": 120200, "start": 1222.0, "end": 1227.0, "text": " Well, there are many papers that demonstrate significant concrete improvements.", "tokens": [51364, 1042, 11, 456, 366, 867, 10577, 300, 11698, 4776, 9859, 13797, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 246, "seek": 120200, "start": 1227.0, "end": 1231.0, "text": " One striking demonstration I saw came from this paper,", "tokens": [51614, 1485, 18559, 16520, 286, 1866, 1361, 490, 341, 3035, 11, 51814], "temperature": 0.0, "avg_logprob": -0.07641546653978752, "compression_ratio": 1.6353383458646618, "no_speech_prob": 0.003482899395748973}, {"id": 247, "seek": 123100, "start": 1231.0, "end": 1235.0, "text": " which is actually co-authored by Stephen Brunton and Nathan Kutz,", "tokens": [50364, 597, 307, 767, 598, 12, 40198, 2769, 538, 13391, 1603, 409, 1756, 293, 20634, 591, 12950, 11, 50564], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 248, "seek": 123100, "start": 1235.0, "end": 1238.0, "text": " two researchers who are active educators on YouTube.", "tokens": [50564, 732, 10309, 567, 366, 4967, 22819, 322, 3088, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 249, "seek": 123100, "start": 1238.0, "end": 1239.0, "text": " You may have seen them.", "tokens": [50714, 509, 815, 362, 1612, 552, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 250, "seek": 123100, "start": 1239.0, "end": 1246.0, "text": " One of their goals is to improve the SPD algorithm for low-rank matrices in the programming language R.", "tokens": [50764, 1485, 295, 641, 5493, 307, 281, 3470, 264, 19572, 9284, 337, 2295, 12, 20479, 32284, 294, 264, 9410, 2856, 497, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 251, "seek": 123100, "start": 1246.0, "end": 1252.0, "text": " SPD involves taking a matrix A and decomposing it into a product of three matrices.", "tokens": [51114, 19572, 11626, 1940, 257, 8141, 316, 293, 22867, 6110, 309, 666, 257, 1674, 295, 1045, 32284, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 252, "seek": 123100, "start": 1252.0, "end": 1256.0, "text": " And without getting into the details, these matrices have some nice properties", "tokens": [51414, 400, 1553, 1242, 666, 264, 4365, 11, 613, 32284, 362, 512, 1481, 7221, 51614], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 253, "seek": 123100, "start": 1256.0, "end": 1260.0, "text": " that help us do things like dimensionality reduction or solving least squares problems.", "tokens": [51614, 300, 854, 505, 360, 721, 411, 10139, 1860, 11004, 420, 12606, 1935, 19368, 2740, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07839043098583556, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.006096541881561279}, {"id": 254, "seek": 126000, "start": 1260.0, "end": 1265.0, "text": " Now, their randomized SPD algorithm gets this performance.", "tokens": [50364, 823, 11, 641, 38513, 19572, 9284, 2170, 341, 3389, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0546689862790315, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.002323038876056671}, {"id": 255, "seek": 126000, "start": 1265.0, "end": 1270.0, "text": " Each plot is for a different size of A, specified as rows by columns.", "tokens": [50614, 6947, 7542, 307, 337, 257, 819, 2744, 295, 316, 11, 22206, 382, 13241, 538, 13766, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0546689862790315, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.002323038876056671}, {"id": 256, "seek": 126000, "start": 1270.0, "end": 1276.0, "text": " The y-axis tells us how many times faster an algorithm is than the plain SPD algorithm.", "tokens": [50864, 440, 288, 12, 24633, 5112, 505, 577, 867, 1413, 4663, 364, 9284, 307, 813, 264, 11121, 19572, 9284, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0546689862790315, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.002323038876056671}, {"id": 257, "seek": 126000, "start": 1276.0, "end": 1281.0, "text": " So the plain SPD algorithm itself, its speed is always 1.", "tokens": [51164, 407, 264, 11121, 19572, 9284, 2564, 11, 1080, 3073, 307, 1009, 502, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0546689862790315, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.002323038876056671}, {"id": 258, "seek": 126000, "start": 1281.0, "end": 1289.0, "text": " That means the randomized SPD algorithm is between 40 and over 100 times faster, depending on the size of A.", "tokens": [51414, 663, 1355, 264, 38513, 19572, 9284, 307, 1296, 3356, 293, 670, 2319, 1413, 4663, 11, 5413, 322, 264, 2744, 295, 316, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0546689862790315, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.002323038876056671}, {"id": 259, "seek": 128900, "start": 1289.0, "end": 1294.0, "text": " And the errors from randomization are comparable to those of the non-randomized routines.", "tokens": [50364, 400, 264, 13603, 490, 4974, 2144, 366, 25323, 281, 729, 295, 264, 2107, 12, 3699, 298, 1602, 33827, 13, 50614], "temperature": 0.0, "avg_logprob": -0.045759002367655434, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.005729293450713158}, {"id": 260, "seek": 128900, "start": 1294.0, "end": 1299.0, "text": " So we're looking at massive real gains, but we need to make some comments.", "tokens": [50614, 407, 321, 434, 1237, 412, 5994, 957, 16823, 11, 457, 321, 643, 281, 652, 512, 3053, 13, 50864], "temperature": 0.0, "avg_logprob": -0.045759002367655434, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.005729293450713158}, {"id": 261, "seek": 128900, "start": 1299.0, "end": 1303.0, "text": " First, they're only considering low-rank matrices.", "tokens": [50864, 2386, 11, 436, 434, 787, 8079, 2295, 12, 20479, 32284, 13, 51064], "temperature": 0.0, "avg_logprob": -0.045759002367655434, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.005729293450713158}, {"id": 262, "seek": 128900, "start": 1303.0, "end": 1306.0, "text": " Randomized algorithms are especially useful for those.", "tokens": [51064, 37603, 1602, 14642, 366, 2318, 4420, 337, 729, 13, 51214], "temperature": 0.0, "avg_logprob": -0.045759002367655434, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.005729293450713158}, {"id": 263, "seek": 128900, "start": 1306.0, "end": 1312.0, "text": " Second, their algorithm is entirely implemented in R, a high-level language.", "tokens": [51214, 5736, 11, 641, 9284, 307, 7696, 12270, 294, 497, 11, 257, 1090, 12, 12418, 2856, 13, 51514], "temperature": 0.0, "avg_logprob": -0.045759002367655434, "compression_ratio": 1.5772727272727274, "no_speech_prob": 0.005729293450713158}, {"id": 264, "seek": 131200, "start": 1312.0, "end": 1316.0, "text": " In contrast, one of the other benchmarking algorithms, R-Spectra,", "tokens": [50364, 682, 8712, 11, 472, 295, 264, 661, 18927, 278, 14642, 11, 497, 12, 50, 1043, 424, 11, 50564], "temperature": 0.0, "avg_logprob": -0.08077732225259145, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.02332841418683529}, {"id": 265, "seek": 131200, "start": 1316.0, "end": 1323.0, "text": " provides speed by granting R-axis to Spectra, a C++ library optimized for eigenvalue problems.", "tokens": [50564, 6417, 3073, 538, 50204, 497, 12, 24633, 281, 27078, 424, 11, 257, 383, 25472, 6405, 26941, 337, 10446, 29155, 2740, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08077732225259145, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.02332841418683529}, {"id": 266, "seek": 131200, "start": 1323.0, "end": 1329.0, "text": " So maybe randomization is best coded at the lower level, like that of C++.", "tokens": [50914, 407, 1310, 4974, 2144, 307, 1151, 34874, 412, 264, 3126, 1496, 11, 411, 300, 295, 383, 25472, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08077732225259145, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.02332841418683529}, {"id": 267, "seek": 131200, "start": 1329.0, "end": 1332.0, "text": " So let's check out an algorithm that does that.", "tokens": [51214, 407, 718, 311, 1520, 484, 364, 9284, 300, 775, 300, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08077732225259145, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.02332841418683529}, {"id": 268, "seek": 131200, "start": 1332.0, "end": 1337.0, "text": " This one, Cholesky QR with randomization and pivoting for tall matrices.", "tokens": [51364, 639, 472, 11, 761, 7456, 4133, 32784, 365, 4974, 2144, 293, 14538, 278, 337, 6764, 32284, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08077732225259145, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.02332841418683529}, {"id": 269, "seek": 133700, "start": 1337.0, "end": 1345.0, "text": " This one does an impressive job of wrangling the interplay of hardware, software, and randomization to produce a dominant algorithm.", "tokens": [50364, 639, 472, 775, 364, 8992, 1691, 295, 928, 656, 1688, 264, 728, 2858, 295, 8837, 11, 4722, 11, 293, 4974, 2144, 281, 5258, 257, 15657, 9284, 13, 50764], "temperature": 0.0, "avg_logprob": -0.05032486203073085, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.046712882816791534}, {"id": 270, "seek": 133700, "start": 1345.0, "end": 1350.0, "text": " In fact, it strikes such a favorable balance of speed and accuracy,", "tokens": [50764, 682, 1186, 11, 309, 16750, 1270, 257, 29557, 4772, 295, 3073, 293, 14170, 11, 51014], "temperature": 0.0, "avg_logprob": -0.05032486203073085, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.046712882816791534}, {"id": 271, "seek": 133700, "start": 1350.0, "end": 1357.0, "text": " the authors claim that the algorithm design question is effectively solved for this class of matrix and problem.", "tokens": [51014, 264, 16552, 3932, 300, 264, 9284, 1715, 1168, 307, 8659, 13041, 337, 341, 1508, 295, 8141, 293, 1154, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05032486203073085, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.046712882816791534}, {"id": 272, "seek": 133700, "start": 1357.0, "end": 1359.0, "text": " That's quite a claim.", "tokens": [51364, 663, 311, 1596, 257, 3932, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05032486203073085, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.046712882816791534}, {"id": 273, "seek": 133700, "start": 1359.0, "end": 1361.0, "text": " So what's the problem they're solving?", "tokens": [51464, 407, 437, 311, 264, 1154, 436, 434, 12606, 30, 51564], "temperature": 0.0, "avg_logprob": -0.05032486203073085, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.046712882816791534}, {"id": 274, "seek": 136100, "start": 1361.0, "end": 1367.0, "text": " Well, once again, we're given a matrix A, which in this case is assumed to be very tall.", "tokens": [50364, 1042, 11, 1564, 797, 11, 321, 434, 2212, 257, 8141, 316, 11, 597, 294, 341, 1389, 307, 15895, 281, 312, 588, 6764, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05775208906693892, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.003945013973861933}, {"id": 275, "seek": 136100, "start": 1367.0, "end": 1372.0, "text": " The goal is to decompose it into matrices with certain properties.", "tokens": [50664, 440, 3387, 307, 281, 22867, 541, 309, 666, 32284, 365, 1629, 7221, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05775208906693892, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.003945013973861933}, {"id": 276, "seek": 136100, "start": 1372.0, "end": 1376.0, "text": " Again, explaining the decomposition would take us really far afield.", "tokens": [50914, 3764, 11, 13468, 264, 48356, 576, 747, 505, 534, 1400, 3238, 1789, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05775208906693892, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.003945013973861933}, {"id": 277, "seek": 136100, "start": 1376.0, "end": 1378.0, "text": " But here's one important detail.", "tokens": [51114, 583, 510, 311, 472, 1021, 2607, 13, 51214], "temperature": 0.0, "avg_logprob": -0.05775208906693892, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.003945013973861933}, {"id": 278, "seek": 136100, "start": 1378.0, "end": 1382.0, "text": " By including this matrix P, called the permutation matrix,", "tokens": [51214, 3146, 3009, 341, 8141, 430, 11, 1219, 264, 4784, 11380, 8141, 11, 51414], "temperature": 0.0, "avg_logprob": -0.05775208906693892, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.003945013973861933}, {"id": 279, "seek": 136100, "start": 1382.0, "end": 1388.0, "text": " we're asking the algorithm to order its operations in a special way to improve numerical stability", "tokens": [51414, 321, 434, 3365, 264, 9284, 281, 1668, 1080, 7705, 294, 257, 2121, 636, 281, 3470, 29054, 11826, 51714], "temperature": 0.0, "avg_logprob": -0.05775208906693892, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.003945013973861933}, {"id": 280, "seek": 138800, "start": 1388.0, "end": 1393.0, "text": " and, for lack of a better explanation, provide more information on the decomposed matrix.", "tokens": [50364, 293, 11, 337, 5011, 295, 257, 1101, 10835, 11, 2893, 544, 1589, 322, 264, 22867, 1744, 8141, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0621059513092041, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0019876286387443542}, {"id": 281, "seek": 138800, "start": 1393.0, "end": 1398.0, "text": " Including P is significantly more work, but virtually guarantees we'll get the right answer.", "tokens": [50614, 27137, 430, 307, 10591, 544, 589, 11, 457, 14103, 32567, 321, 603, 483, 264, 558, 1867, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0621059513092041, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0019876286387443542}, {"id": 282, "seek": 138800, "start": 1398.0, "end": 1401.0, "text": " That is, it's much more numerically stable.", "tokens": [50864, 663, 307, 11, 309, 311, 709, 544, 7866, 984, 8351, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0621059513092041, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0019876286387443542}, {"id": 283, "seek": 138800, "start": 1401.0, "end": 1406.0, "text": " Doing this decomposition is called QR decomposition with column pivoting.", "tokens": [51014, 18496, 341, 48356, 307, 1219, 32784, 48356, 365, 7738, 14538, 278, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0621059513092041, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0019876286387443542}, {"id": 284, "seek": 138800, "start": 1406.0, "end": 1411.0, "text": " The QR matrices enable several useful things, like solving least squares problems.", "tokens": [51264, 440, 32784, 32284, 9528, 2940, 4420, 721, 11, 411, 12606, 1935, 19368, 2740, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0621059513092041, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0019876286387443542}, {"id": 285, "seek": 138800, "start": 1411.0, "end": 1415.0, "text": " Now to explain their algorithm's performance, here are two blank plots.", "tokens": [51514, 823, 281, 2903, 641, 9284, 311, 3389, 11, 510, 366, 732, 8247, 28609, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0621059513092041, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0019876286387443542}, {"id": 286, "seek": 141500, "start": 1415.0, "end": 1421.0, "text": " On the left, we'll see performance on matrices with about 32,000 rows.", "tokens": [50364, 1282, 264, 1411, 11, 321, 603, 536, 3389, 322, 32284, 365, 466, 8858, 11, 1360, 13241, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0589816930159083, "compression_ratio": 1.6147859922178989, "no_speech_prob": 0.002115613780915737}, {"id": 287, "seek": 141500, "start": 1421.0, "end": 1424.0, "text": " On the right, about 130,000 rows.", "tokens": [50664, 1282, 264, 558, 11, 466, 19966, 11, 1360, 13241, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0589816930159083, "compression_ratio": 1.6147859922178989, "no_speech_prob": 0.002115613780915737}, {"id": 288, "seek": 141500, "start": 1424.0, "end": 1431.0, "text": " Along the horizontal axis, the number of columns varies from about 500 to about 8,000.", "tokens": [50814, 17457, 264, 12750, 10298, 11, 264, 1230, 295, 13766, 21716, 490, 466, 5923, 281, 466, 1649, 11, 1360, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0589816930159083, "compression_ratio": 1.6147859922178989, "no_speech_prob": 0.002115613780915737}, {"id": 289, "seek": 141500, "start": 1431.0, "end": 1437.0, "text": " So we're looking at A matrices of different shapes, but they're all either tall or really tall matrices.", "tokens": [51164, 407, 321, 434, 1237, 412, 316, 32284, 295, 819, 10854, 11, 457, 436, 434, 439, 2139, 6764, 420, 534, 6764, 32284, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0589816930159083, "compression_ratio": 1.6147859922178989, "no_speech_prob": 0.002115613780915737}, {"id": 290, "seek": 141500, "start": 1437.0, "end": 1441.0, "text": " Now the vertical axis is billions of floating point operations per second,", "tokens": [51464, 823, 264, 9429, 10298, 307, 17375, 295, 12607, 935, 7705, 680, 1150, 11, 51664], "temperature": 0.0, "avg_logprob": -0.0589816930159083, "compression_ratio": 1.6147859922178989, "no_speech_prob": 0.002115613780915737}, {"id": 291, "seek": 141500, "start": 1441.0, "end": 1444.0, "text": " which is a bit of a weird thing to measure.", "tokens": [51664, 597, 307, 257, 857, 295, 257, 3657, 551, 281, 3481, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0589816930159083, "compression_ratio": 1.6147859922178989, "no_speech_prob": 0.002115613780915737}, {"id": 292, "seek": 144400, "start": 1444.0, "end": 1450.0, "text": " But the G-flops are those of a benchmark algorithm run on A, and so it's fixed across algorithms.", "tokens": [50364, 583, 264, 460, 12, 3423, 3370, 366, 729, 295, 257, 18927, 9284, 1190, 322, 316, 11, 293, 370, 309, 311, 6806, 2108, 14642, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0918233889453816, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0003799786791205406}, {"id": 293, "seek": 144400, "start": 1450.0, "end": 1455.0, "text": " In other words, just interpret the vertical axis as relative speed, like in the previous paper.", "tokens": [50664, 682, 661, 2283, 11, 445, 7302, 264, 9429, 10298, 382, 4972, 3073, 11, 411, 294, 264, 3894, 3035, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0918233889453816, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0003799786791205406}, {"id": 294, "seek": 144400, "start": 1455.0, "end": 1461.0, "text": " Okay, now, this is LA-PAC's algorithm for QR with column pivoting.", "tokens": [50914, 1033, 11, 586, 11, 341, 307, 9855, 12, 47, 4378, 311, 9284, 337, 32784, 365, 7738, 14538, 278, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0918233889453816, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0003799786791205406}, {"id": 295, "seek": 144400, "start": 1461.0, "end": 1467.0, "text": " Remember, LA-PAC is the very well-optimized industry standard, but maybe not for long,", "tokens": [51214, 5459, 11, 9855, 12, 47, 4378, 307, 264, 588, 731, 12, 5747, 332, 1602, 3518, 3832, 11, 457, 1310, 406, 337, 938, 11, 51514], "temperature": 0.0, "avg_logprob": -0.0918233889453816, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0003799786791205406}, {"id": 296, "seek": 144400, "start": 1467.0, "end": 1472.0, "text": " because this is their algorithm, pronounced secret.", "tokens": [51514, 570, 341, 307, 641, 9284, 11, 23155, 4054, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0918233889453816, "compression_ratio": 1.5465116279069768, "no_speech_prob": 0.0003799786791205406}, {"id": 297, "seek": 147200, "start": 1472.0, "end": 1477.0, "text": " As you can see, we're looking at 10 to 20x speed-ups, and if you're wondering what's happening here,", "tokens": [50364, 1018, 291, 393, 536, 11, 321, 434, 1237, 412, 1266, 281, 945, 87, 3073, 12, 7528, 11, 293, 498, 291, 434, 6359, 437, 311, 2737, 510, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0553916905607496, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0016483928775414824}, {"id": 298, "seek": 147200, "start": 1477.0, "end": 1484.0, "text": " the authors point out that the matrices no longer fit in the cache, so moving more data around becomes necessary.", "tokens": [50614, 264, 16552, 935, 484, 300, 264, 32284, 572, 2854, 3318, 294, 264, 19459, 11, 370, 2684, 544, 1412, 926, 3643, 4818, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0553916905607496, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0016483928775414824}, {"id": 299, "seek": 147200, "start": 1484.0, "end": 1491.0, "text": " As an aside, moving data or data communication is a major source of algorithmic slowness.", "tokens": [50964, 1018, 364, 7359, 11, 2684, 1412, 420, 1412, 6101, 307, 257, 2563, 4009, 295, 9284, 299, 1061, 648, 442, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0553916905607496, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0016483928775414824}, {"id": 300, "seek": 147200, "start": 1491.0, "end": 1495.0, "text": " Now in the paper, the plot shows alternative fast algorithms for a comparison.", "tokens": [51314, 823, 294, 264, 3035, 11, 264, 7542, 3110, 8535, 2370, 14642, 337, 257, 9660, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0553916905607496, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0016483928775414824}, {"id": 301, "seek": 147200, "start": 1495.0, "end": 1500.0, "text": " They're acknowledging other approaches people might be familiar with to further benchmark their algorithm.", "tokens": [51514, 814, 434, 30904, 661, 11587, 561, 1062, 312, 4963, 365, 281, 3052, 18927, 641, 9284, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0553916905607496, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.0016483928775414824}, {"id": 302, "seek": 150000, "start": 1500.0, "end": 1508.0, "text": " However, in my view, the authors are being a bit modest, because these other fast algorithms aren't doing the full job.", "tokens": [50364, 2908, 11, 294, 452, 1910, 11, 264, 16552, 366, 885, 257, 857, 25403, 11, 570, 613, 661, 2370, 14642, 3212, 380, 884, 264, 1577, 1691, 13, 50764], "temperature": 0.0, "avg_logprob": -0.03931615501642227, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0035933128092437983}, {"id": 303, "seek": 150000, "start": 1508.0, "end": 1510.0, "text": " It's not apples to apples.", "tokens": [50764, 467, 311, 406, 16814, 281, 16814, 13, 50864], "temperature": 0.0, "avg_logprob": -0.03931615501642227, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0035933128092437983}, {"id": 304, "seek": 150000, "start": 1510.0, "end": 1518.0, "text": " This one and this one don't perform column pivoting, so the decomposition gives us less information about the matrix.", "tokens": [50864, 639, 472, 293, 341, 472, 500, 380, 2042, 7738, 14538, 278, 11, 370, 264, 48356, 2709, 505, 1570, 1589, 466, 264, 8141, 13, 51264], "temperature": 0.0, "avg_logprob": -0.03931615501642227, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0035933128092437983}, {"id": 305, "seek": 150000, "start": 1518.0, "end": 1526.0, "text": " If we ignore that fact and try to use the decomposition just like it had done pivoting, we get inaccurate or even flat-out wrong answers.", "tokens": [51264, 759, 321, 11200, 300, 1186, 293, 853, 281, 764, 264, 48356, 445, 411, 309, 632, 1096, 14538, 278, 11, 321, 483, 46443, 420, 754, 4962, 12, 346, 2085, 6338, 13, 51664], "temperature": 0.0, "avg_logprob": -0.03931615501642227, "compression_ratio": 1.6341463414634145, "no_speech_prob": 0.0035933128092437983}, {"id": 306, "seek": 152600, "start": 1527.0, "end": 1536.0, "text": " This one and this one are numerically stable, but the former only applies to full-rank matrices, so not all tall, skinny matrices.", "tokens": [50414, 639, 472, 293, 341, 472, 366, 7866, 984, 8351, 11, 457, 264, 5819, 787, 13165, 281, 1577, 12, 20479, 32284, 11, 370, 406, 439, 6764, 11, 25193, 32284, 13, 50864], "temperature": 0.0, "avg_logprob": -0.061762364356072394, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.0053845918737351894}, {"id": 307, "seek": 152600, "start": 1536.0, "end": 1541.0, "text": " And the latter only delivers an implicit representation of the matrices we want.", "tokens": [50864, 400, 264, 18481, 787, 24860, 364, 26947, 10290, 295, 264, 32284, 321, 528, 13, 51114], "temperature": 0.0, "avg_logprob": -0.061762364356072394, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.0053845918737351894}, {"id": 308, "seek": 152600, "start": 1541.0, "end": 1548.0, "text": " This means, in many practical cases, we'd need to do extra work, slowing the algorithm down considerably.", "tokens": [51114, 639, 1355, 11, 294, 867, 8496, 3331, 11, 321, 1116, 643, 281, 360, 2857, 589, 11, 26958, 264, 9284, 760, 31308, 13, 51464], "temperature": 0.0, "avg_logprob": -0.061762364356072394, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.0053845918737351894}, {"id": 309, "seek": 152600, "start": 1548.0, "end": 1553.0, "text": " All things considered, this plot understates how much better secret really is.", "tokens": [51464, 1057, 721, 4888, 11, 341, 7542, 833, 372, 1024, 577, 709, 1101, 4054, 534, 307, 13, 51714], "temperature": 0.0, "avg_logprob": -0.061762364356072394, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.0053845918737351894}, {"id": 310, "seek": 155300, "start": 1553.0, "end": 1561.0, "text": " And if you're thinking, okay, but this can't actually replace the LA-PAC algorithm, because randomized algorithms come with some error, right?", "tokens": [50364, 400, 498, 291, 434, 1953, 11, 1392, 11, 457, 341, 393, 380, 767, 7406, 264, 9855, 12, 47, 4378, 9284, 11, 570, 38513, 14642, 808, 365, 512, 6713, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.06719253803121633, "compression_ratio": 1.6423357664233578, "no_speech_prob": 0.003593400353565812}, {"id": 311, "seek": 155300, "start": 1561.0, "end": 1568.0, "text": " Well, in this case, the error can be made so small, it's essentially just as good as the LA-PAC routine.", "tokens": [50764, 1042, 11, 294, 341, 1389, 11, 264, 6713, 393, 312, 1027, 370, 1359, 11, 309, 311, 4476, 445, 382, 665, 382, 264, 9855, 12, 47, 4378, 9927, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06719253803121633, "compression_ratio": 1.6423357664233578, "no_speech_prob": 0.003593400353565812}, {"id": 312, "seek": 155300, "start": 1568.0, "end": 1571.0, "text": " And this highlights the bizarre magic of randomization.", "tokens": [51114, 400, 341, 14254, 264, 18265, 5585, 295, 4974, 2144, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06719253803121633, "compression_ratio": 1.6423357664233578, "no_speech_prob": 0.003593400353565812}, {"id": 313, "seek": 155300, "start": 1571.0, "end": 1576.0, "text": " You add a well-placed pinch of it, and you're able to get essentially the same answer, but many times faster.", "tokens": [51264, 509, 909, 257, 731, 12, 564, 3839, 14614, 295, 309, 11, 293, 291, 434, 1075, 281, 483, 4476, 264, 912, 1867, 11, 457, 867, 1413, 4663, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06719253803121633, "compression_ratio": 1.6423357664233578, "no_speech_prob": 0.003593400353565812}, {"id": 314, "seek": 155300, "start": 1576.0, "end": 1578.0, "text": " It's a trick almost without baggage.", "tokens": [51514, 467, 311, 257, 4282, 1920, 1553, 41567, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06719253803121633, "compression_ratio": 1.6423357664233578, "no_speech_prob": 0.003593400353565812}, {"id": 315, "seek": 157800, "start": 1578.0, "end": 1583.0, "text": " It's not an optimization that only works for a fixed set of machines or a niche class of matrix.", "tokens": [50364, 467, 311, 406, 364, 19618, 300, 787, 1985, 337, 257, 6806, 992, 295, 8379, 420, 257, 19956, 1508, 295, 8141, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 316, "seek": 157800, "start": 1583.0, "end": 1585.0, "text": " It works essentially across the board.", "tokens": [50614, 467, 1985, 4476, 2108, 264, 3150, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 317, "seek": 157800, "start": 1585.0, "end": 1588.0, "text": " It makes you wonder, what are these algorithms doing?", "tokens": [50714, 467, 1669, 291, 2441, 11, 437, 366, 613, 14642, 884, 30, 50864], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 318, "seek": 157800, "start": 1588.0, "end": 1592.0, "text": " Well, RAND-NLA algorithms come in several flavors.", "tokens": [50864, 1042, 11, 497, 8070, 12, 45, 11435, 14642, 808, 294, 2940, 16303, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 319, "seek": 157800, "start": 1592.0, "end": 1595.0, "text": " I'll go with one that's especially simple to present.", "tokens": [51064, 286, 603, 352, 365, 472, 300, 311, 2318, 2199, 281, 1974, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 320, "seek": 157800, "start": 1595.0, "end": 1597.0, "text": " Let's bring back the least squares problem.", "tokens": [51214, 961, 311, 1565, 646, 264, 1935, 19368, 1154, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 321, "seek": 157800, "start": 1597.0, "end": 1604.0, "text": " Again, we're looking for the vector x such that ax's distance from b is as small as possible.", "tokens": [51314, 3764, 11, 321, 434, 1237, 337, 264, 8062, 2031, 1270, 300, 6360, 311, 4560, 490, 272, 307, 382, 1359, 382, 1944, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06785594235669386, "compression_ratio": 1.5539568345323742, "no_speech_prob": 0.01640148088335991}, {"id": 322, "seek": 160400, "start": 1604.0, "end": 1608.0, "text": " We'll call the x vector that achieves this minimum x star.", "tokens": [50364, 492, 603, 818, 264, 2031, 8062, 300, 3538, 977, 341, 7285, 2031, 3543, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 323, "seek": 160400, "start": 1608.0, "end": 1610.0, "text": " Again, we'll assume that a is a tall matrix.", "tokens": [50564, 3764, 11, 321, 603, 6552, 300, 257, 307, 257, 6764, 8141, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 324, "seek": 160400, "start": 1610.0, "end": 1614.0, "text": " One randomized approach is called sketch and solve.", "tokens": [50664, 1485, 38513, 3109, 307, 1219, 12325, 293, 5039, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 325, "seek": 160400, "start": 1614.0, "end": 1617.0, "text": " We start by sampling a random matrix s.", "tokens": [50864, 492, 722, 538, 21179, 257, 4974, 8141, 262, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 326, "seek": 160400, "start": 1617.0, "end": 1620.0, "text": " How we do that doesn't matter right now.", "tokens": [51014, 1012, 321, 360, 300, 1177, 380, 1871, 558, 586, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 327, "seek": 160400, "start": 1620.0, "end": 1627.0, "text": " What's important is that we'll be solving the least squares problem, but we'll replace a with s a and b with s b.", "tokens": [51164, 708, 311, 1021, 307, 300, 321, 603, 312, 12606, 264, 1935, 19368, 1154, 11, 457, 321, 603, 7406, 257, 365, 262, 257, 293, 272, 365, 262, 272, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 328, "seek": 160400, "start": 1627.0, "end": 1633.0, "text": " And s will be designed such that s a has many fewer rows than the tall matrix a.", "tokens": [51514, 400, 262, 486, 312, 4761, 1270, 300, 262, 257, 575, 867, 13366, 13241, 813, 264, 6764, 8141, 257, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06583574490669446, "compression_ratio": 1.68359375, "no_speech_prob": 0.016401035711169243}, {"id": 329, "seek": 163300, "start": 1633.0, "end": 1636.0, "text": " And in the same way, s b is much smaller than b.", "tokens": [50364, 400, 294, 264, 912, 636, 11, 262, 272, 307, 709, 4356, 813, 272, 13, 50514], "temperature": 0.0, "avg_logprob": -0.04245569071638475, "compression_ratio": 1.752895752895753, "no_speech_prob": 0.0004442072531674057}, {"id": 330, "seek": 163300, "start": 1636.0, "end": 1641.0, "text": " Essentially, multiplying by s produces a compressed problem that's much faster to solve.", "tokens": [50514, 23596, 11, 30955, 538, 262, 14725, 257, 30353, 1154, 300, 311, 709, 4663, 281, 5039, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04245569071638475, "compression_ratio": 1.752895752895753, "no_speech_prob": 0.0004442072531674057}, {"id": 331, "seek": 163300, "start": 1641.0, "end": 1644.0, "text": " Doing this is to form a small sketch of the problem.", "tokens": [50764, 18496, 341, 307, 281, 1254, 257, 1359, 12325, 295, 264, 1154, 13, 50914], "temperature": 0.0, "avg_logprob": -0.04245569071638475, "compression_ratio": 1.752895752895753, "no_speech_prob": 0.0004442072531674057}, {"id": 332, "seek": 163300, "start": 1644.0, "end": 1646.0, "text": " Here's the remarkable thing.", "tokens": [50914, 1692, 311, 264, 12802, 551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04245569071638475, "compression_ratio": 1.752895752895753, "no_speech_prob": 0.0004442072531674057}, {"id": 333, "seek": 163300, "start": 1646.0, "end": 1651.0, "text": " If we solve this new least squares problem, giving us a vector we'll call x tilde,", "tokens": [51014, 759, 321, 5039, 341, 777, 1935, 19368, 1154, 11, 2902, 505, 257, 8062, 321, 603, 818, 2031, 45046, 11, 51264], "temperature": 0.0, "avg_logprob": -0.04245569071638475, "compression_ratio": 1.752895752895753, "no_speech_prob": 0.0004442072531674057}, {"id": 334, "seek": 163300, "start": 1651.0, "end": 1660.0, "text": " then the distance it achieves in the original problem is about the same as the best achievable distance in that original problem with high probability.", "tokens": [51264, 550, 264, 4560, 309, 3538, 977, 294, 264, 3380, 1154, 307, 466, 264, 912, 382, 264, 1151, 3538, 17915, 4560, 294, 300, 3380, 1154, 365, 1090, 8482, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04245569071638475, "compression_ratio": 1.752895752895753, "no_speech_prob": 0.0004442072531674057}, {"id": 335, "seek": 166000, "start": 1660.0, "end": 1669.0, "text": " In other words, it's very likely that solving this much smaller problem will give an answer that's nearly just as good as what would get solving the original big problem.", "tokens": [50364, 682, 661, 2283, 11, 309, 311, 588, 3700, 300, 12606, 341, 709, 4356, 1154, 486, 976, 364, 1867, 300, 311, 6217, 445, 382, 665, 382, 437, 576, 483, 12606, 264, 3380, 955, 1154, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06299170993623279, "compression_ratio": 1.84, "no_speech_prob": 0.0038243059534579515}, {"id": 336, "seek": 166000, "start": 1669.0, "end": 1671.0, "text": " And that's great news.", "tokens": [50814, 400, 300, 311, 869, 2583, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06299170993623279, "compression_ratio": 1.84, "no_speech_prob": 0.0038243059534579515}, {"id": 337, "seek": 166000, "start": 1671.0, "end": 1673.0, "text": " A much smaller problem is much faster to solve.", "tokens": [50914, 316, 709, 4356, 1154, 307, 709, 4663, 281, 5039, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06299170993623279, "compression_ratio": 1.84, "no_speech_prob": 0.0038243059534579515}, {"id": 338, "seek": 166000, "start": 1673.0, "end": 1676.0, "text": " And that's where we get these order of magnitude speed ups.", "tokens": [51014, 400, 300, 311, 689, 321, 483, 613, 1668, 295, 15668, 3073, 15497, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06299170993623279, "compression_ratio": 1.84, "no_speech_prob": 0.0038243059534579515}, {"id": 339, "seek": 166000, "start": 1676.0, "end": 1681.0, "text": " And what makes this practically useful is that we can control how good the approximation is.", "tokens": [51164, 400, 437, 1669, 341, 15667, 4420, 307, 300, 321, 393, 1969, 577, 665, 264, 28023, 307, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06299170993623279, "compression_ratio": 1.84, "no_speech_prob": 0.0038243059534579515}, {"id": 340, "seek": 166000, "start": 1681.0, "end": 1685.0, "text": " And the probability that that level of approximation is achieved.", "tokens": [51414, 400, 264, 8482, 300, 300, 1496, 295, 28023, 307, 11042, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06299170993623279, "compression_ratio": 1.84, "no_speech_prob": 0.0038243059534579515}, {"id": 341, "seek": 168500, "start": 1685.0, "end": 1693.0, "text": " We can say, I want a 99.99% chance that the distance is within 1% of the best achievable distance.", "tokens": [50364, 492, 393, 584, 11, 286, 528, 257, 11803, 13, 8494, 4, 2931, 300, 264, 4560, 307, 1951, 502, 4, 295, 264, 1151, 3538, 17915, 4560, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04139677015673213, "compression_ratio": 1.6028368794326242, "no_speech_prob": 0.06369460374116898}, {"id": 342, "seek": 168500, "start": 1693.0, "end": 1698.0, "text": " Declaring that will tell us how many rows s needs, depending on how s is randomly sampled.", "tokens": [50764, 1346, 3474, 1921, 300, 486, 980, 505, 577, 867, 13241, 262, 2203, 11, 5413, 322, 577, 262, 307, 16979, 3247, 15551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.04139677015673213, "compression_ratio": 1.6028368794326242, "no_speech_prob": 0.06369460374116898}, {"id": 343, "seek": 168500, "start": 1698.0, "end": 1704.0, "text": " In fact, developing theorems to make statements like these, that's where a lot of the hard work of the field is.", "tokens": [51014, 682, 1186, 11, 6416, 10299, 2592, 281, 652, 12363, 411, 613, 11, 300, 311, 689, 257, 688, 295, 264, 1152, 589, 295, 264, 2519, 307, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04139677015673213, "compression_ratio": 1.6028368794326242, "no_speech_prob": 0.06369460374116898}, {"id": 344, "seek": 168500, "start": 1704.0, "end": 1707.0, "text": " Further, how s is sampled is a question all its own.", "tokens": [51314, 15364, 11, 577, 262, 307, 3247, 15551, 307, 257, 1168, 439, 1080, 1065, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04139677015673213, "compression_ratio": 1.6028368794326242, "no_speech_prob": 0.06369460374116898}, {"id": 345, "seek": 168500, "start": 1707.0, "end": 1712.0, "text": " Every value could just be a sample from a normal distribution, but there are fancier techniques,", "tokens": [51464, 2048, 2158, 727, 445, 312, 257, 6889, 490, 257, 2710, 7316, 11, 457, 456, 366, 3429, 27674, 7512, 11, 51714], "temperature": 0.0, "avg_logprob": -0.04139677015673213, "compression_ratio": 1.6028368794326242, "no_speech_prob": 0.06369460374116898}, {"id": 346, "seek": 171200, "start": 1712.0, "end": 1716.0, "text": " like ones that allow you to perform the essay multiplication extremely quickly.", "tokens": [50364, 411, 2306, 300, 2089, 291, 281, 2042, 264, 16238, 27290, 4664, 2661, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 347, "seek": 171200, "start": 1716.0, "end": 1721.0, "text": " Because, in the presentation that I just gave you, doing that multiplication would actually be a dominant cost.", "tokens": [50564, 1436, 11, 294, 264, 5860, 300, 286, 445, 2729, 291, 11, 884, 300, 27290, 576, 767, 312, 257, 15657, 2063, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 348, "seek": 171200, "start": 1721.0, "end": 1726.0, "text": " Okay, but this explanation doesn't answer the why does it work question, really.", "tokens": [50814, 1033, 11, 457, 341, 10835, 1177, 380, 1867, 264, 983, 775, 309, 589, 1168, 11, 534, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 349, "seek": 171200, "start": 1726.0, "end": 1729.0, "text": " I'm just showing that it relies on an approximation, which I'm asking you to accept.", "tokens": [51064, 286, 478, 445, 4099, 300, 309, 30910, 322, 364, 28023, 11, 597, 286, 478, 3365, 291, 281, 3241, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 350, "seek": 171200, "start": 1729.0, "end": 1732.0, "text": " So, let's go a little further.", "tokens": [51214, 407, 11, 718, 311, 352, 257, 707, 3052, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 351, "seek": 171200, "start": 1732.0, "end": 1734.0, "text": " Let's say we're given the following least squares problem.", "tokens": [51364, 961, 311, 584, 321, 434, 2212, 264, 3480, 1935, 19368, 1154, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 352, "seek": 171200, "start": 1734.0, "end": 1739.0, "text": " A is equal to some tall matrix with two columns, and B is equal to some long vector.", "tokens": [51464, 316, 307, 2681, 281, 512, 6764, 8141, 365, 732, 13766, 11, 293, 363, 307, 2681, 281, 512, 938, 8062, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08054381843626969, "compression_ratio": 1.6677115987460815, "no_speech_prob": 0.03209612891077995}, {"id": 353, "seek": 173900, "start": 1739.0, "end": 1746.0, "text": " Now, if you know something about least squares, you know finding x is going to involve, among other things, the covariance matrix of A.", "tokens": [50364, 823, 11, 498, 291, 458, 746, 466, 1935, 19368, 11, 291, 458, 5006, 2031, 307, 516, 281, 9494, 11, 3654, 661, 721, 11, 264, 49851, 719, 8141, 295, 316, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 354, "seek": 173900, "start": 1746.0, "end": 1749.0, "text": " That's a component of the solution I'd like to focus on.", "tokens": [50714, 663, 311, 257, 6542, 295, 264, 3827, 286, 1116, 411, 281, 1879, 322, 13, 50864], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 355, "seek": 173900, "start": 1749.0, "end": 1751.0, "text": " So, let's ignore B for now.", "tokens": [50864, 407, 11, 718, 311, 11200, 363, 337, 586, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 356, "seek": 173900, "start": 1751.0, "end": 1755.0, "text": " Now, if you don't know what the covariance matrix of A means, that's fine.", "tokens": [50964, 823, 11, 498, 291, 500, 380, 458, 437, 264, 49851, 719, 8141, 295, 316, 1355, 11, 300, 311, 2489, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 357, "seek": 173900, "start": 1755.0, "end": 1758.0, "text": " With just two columns, it's a very easy thing to visualize.", "tokens": [51164, 2022, 445, 732, 13766, 11, 309, 311, 257, 588, 1858, 551, 281, 23273, 13, 51314], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 358, "seek": 173900, "start": 1758.0, "end": 1762.0, "text": " What we'll do is plot each row of A as a point.", "tokens": [51314, 708, 321, 603, 360, 307, 7542, 1184, 5386, 295, 316, 382, 257, 935, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 359, "seek": 173900, "start": 1762.0, "end": 1766.0, "text": " Now, the covariance matrix just tells you this elliptical shape.", "tokens": [51514, 823, 11, 264, 49851, 719, 8141, 445, 5112, 291, 341, 8284, 22439, 804, 3909, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04619799599503026, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.010651997290551662}, {"id": 360, "seek": 176600, "start": 1766.0, "end": 1770.0, "text": " And it's this shape that partially determines the minimizing x.", "tokens": [50364, 400, 309, 311, 341, 3909, 300, 18886, 24799, 264, 46608, 2031, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09302015806499281, "compression_ratio": 1.61864406779661, "no_speech_prob": 0.02595396526157856}, {"id": 361, "seek": 176600, "start": 1770.0, "end": 1777.0, "text": " Next, let's consider SA, where S is properly scaled random Gaussians with D rows.", "tokens": [50564, 3087, 11, 718, 311, 1949, 16482, 11, 689, 318, 307, 6108, 36039, 4974, 10384, 2023, 2567, 365, 413, 13241, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09302015806499281, "compression_ratio": 1.61864406779661, "no_speech_prob": 0.02595396526157856}, {"id": 362, "seek": 176600, "start": 1777.0, "end": 1783.0, "text": " If D is equal to 8, that means SA can be plotted as 8 summary data points.", "tokens": [50914, 759, 413, 307, 2681, 281, 1649, 11, 300, 1355, 16482, 393, 312, 43288, 382, 1649, 12691, 1412, 2793, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09302015806499281, "compression_ratio": 1.61864406779661, "no_speech_prob": 0.02595396526157856}, {"id": 363, "seek": 176600, "start": 1783.0, "end": 1794.0, "text": " Again, we compute the covariance matrix, and again, this shape partially determines the minimizing x, this time in the shrunken, sketched version of the problem.", "tokens": [51214, 3764, 11, 321, 14722, 264, 49851, 719, 8141, 11, 293, 797, 11, 341, 3909, 18886, 24799, 264, 46608, 2031, 11, 341, 565, 294, 264, 9884, 39071, 11, 12325, 292, 3037, 295, 264, 1154, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09302015806499281, "compression_ratio": 1.61864406779661, "no_speech_prob": 0.02595396526157856}, {"id": 364, "seek": 179400, "start": 1794.0, "end": 1797.0, "text": " Now, here's what RAN and LA exploits.", "tokens": [50364, 823, 11, 510, 311, 437, 497, 1770, 293, 9855, 12382, 1208, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07684685389200846, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.006289350800216198}, {"id": 365, "seek": 179400, "start": 1797.0, "end": 1804.0, "text": " As D increases, the covariances of SA and A become more and more similar.", "tokens": [50514, 1018, 413, 8637, 11, 264, 598, 8517, 21518, 295, 16482, 293, 316, 1813, 544, 293, 544, 2531, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07684685389200846, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.006289350800216198}, {"id": 366, "seek": 179400, "start": 1804.0, "end": 1812.0, "text": " So, between A and SA, the covariance structures, things that determine the minimizing x's, are very similar.", "tokens": [50864, 407, 11, 1296, 316, 293, 16482, 11, 264, 49851, 719, 9227, 11, 721, 300, 6997, 264, 46608, 2031, 311, 11, 366, 588, 2531, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07684685389200846, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.006289350800216198}, {"id": 367, "seek": 179400, "start": 1812.0, "end": 1820.0, "text": " In other words, as far as this covariance piece of the answer goes, A and SA give us nearly the same thing.", "tokens": [51264, 682, 661, 2283, 11, 382, 1400, 382, 341, 49851, 719, 2522, 295, 264, 1867, 1709, 11, 316, 293, 16482, 976, 505, 6217, 264, 912, 551, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07684685389200846, "compression_ratio": 1.5922330097087378, "no_speech_prob": 0.006289350800216198}, {"id": 368, "seek": 182000, "start": 1820.0, "end": 1824.0, "text": " And D doesn't need to be that large to get a good approximation.", "tokens": [50364, 400, 413, 1177, 380, 643, 281, 312, 300, 2416, 281, 483, 257, 665, 28023, 13, 50564], "temperature": 0.0, "avg_logprob": -0.051940107345581056, "compression_ratio": 1.6007326007326008, "no_speech_prob": 0.005554724484682083}, {"id": 369, "seek": 182000, "start": 1824.0, "end": 1831.0, "text": " So, we can solve a much smaller SA least squares problem and get virtually the same result.", "tokens": [50564, 407, 11, 321, 393, 5039, 257, 709, 4356, 16482, 1935, 19368, 1154, 293, 483, 14103, 264, 912, 1874, 13, 50914], "temperature": 0.0, "avg_logprob": -0.051940107345581056, "compression_ratio": 1.6007326007326008, "no_speech_prob": 0.005554724484682083}, {"id": 370, "seek": 182000, "start": 1831.0, "end": 1833.0, "text": " Okay, but what about B?", "tokens": [50914, 1033, 11, 457, 437, 466, 363, 30, 51014], "temperature": 0.0, "avg_logprob": -0.051940107345581056, "compression_ratio": 1.6007326007326008, "no_speech_prob": 0.005554724484682083}, {"id": 371, "seek": 182000, "start": 1833.0, "end": 1838.0, "text": " Yeah, the minimizing x is also determined by the covariance between A and B.", "tokens": [51014, 865, 11, 264, 46608, 2031, 307, 611, 9540, 538, 264, 49851, 719, 1296, 316, 293, 363, 13, 51264], "temperature": 0.0, "avg_logprob": -0.051940107345581056, "compression_ratio": 1.6007326007326008, "no_speech_prob": 0.005554724484682083}, {"id": 372, "seek": 182000, "start": 1838.0, "end": 1844.0, "text": " So, let's consider an augmented matrix, which is A concatenated with B as a new column.", "tokens": [51264, 407, 11, 718, 311, 1949, 364, 36155, 8141, 11, 597, 307, 316, 1588, 7186, 770, 365, 363, 382, 257, 777, 7738, 13, 51564], "temperature": 0.0, "avg_logprob": -0.051940107345581056, "compression_ratio": 1.6007326007326008, "no_speech_prob": 0.005554724484682083}, {"id": 373, "seek": 182000, "start": 1844.0, "end": 1849.0, "text": " The covariance of this new matrix now includes everything that determines the minimizing x.", "tokens": [51564, 440, 49851, 719, 295, 341, 777, 8141, 586, 5974, 1203, 300, 24799, 264, 46608, 2031, 13, 51814], "temperature": 0.0, "avg_logprob": -0.051940107345581056, "compression_ratio": 1.6007326007326008, "no_speech_prob": 0.005554724484682083}, {"id": 374, "seek": 184900, "start": 1849.0, "end": 1852.0, "text": " Looking at this, this is just another matrix.", "tokens": [50364, 11053, 412, 341, 11, 341, 307, 445, 1071, 8141, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 375, "seek": 184900, "start": 1852.0, "end": 1856.0, "text": " So, each covariance matrix will be similar to that of its sketched version.", "tokens": [50514, 407, 11, 1184, 49851, 719, 8141, 486, 312, 2531, 281, 300, 295, 1080, 12325, 292, 3037, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 376, "seek": 184900, "start": 1856.0, "end": 1862.0, "text": " In other words, everything that drives the minimizing x is similar across the original and sketched problem.", "tokens": [50714, 682, 661, 2283, 11, 1203, 300, 11754, 264, 46608, 2031, 307, 2531, 2108, 264, 3380, 293, 12325, 292, 1154, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 377, "seek": 184900, "start": 1862.0, "end": 1867.0, "text": " That's why the sketched version gives us approximately the same answer.", "tokens": [51014, 663, 311, 983, 264, 12325, 292, 3037, 2709, 505, 10447, 264, 912, 1867, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 378, "seek": 184900, "start": 1867.0, "end": 1869.0, "text": " Now, I need to confess something.", "tokens": [51264, 823, 11, 286, 643, 281, 19367, 746, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 379, "seek": 184900, "start": 1869.0, "end": 1874.0, "text": " This approximation is actually pretty weak and isn't really what's powering the randomized algorithms.", "tokens": [51364, 639, 28023, 307, 767, 1238, 5336, 293, 1943, 380, 534, 437, 311, 1347, 278, 264, 38513, 14642, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 380, "seek": 184900, "start": 1874.0, "end": 1878.0, "text": " But it captures the essence and can be animated, so I went with it.", "tokens": [51614, 583, 309, 27986, 264, 12801, 293, 393, 312, 18947, 11, 370, 286, 1437, 365, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0454188835721056, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0023965821601450443}, {"id": 381, "seek": 187800, "start": 1878.0, "end": 1885.0, "text": " However, Riley pointed out that what's actually happening involves much stronger approximations regarding relative differences.", "tokens": [50364, 2908, 11, 31373, 10932, 484, 300, 437, 311, 767, 2737, 11626, 709, 7249, 8542, 763, 8595, 4972, 7300, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08248583170083854, "compression_ratio": 1.5488215488215489, "no_speech_prob": 0.0007553913746960461}, {"id": 382, "seek": 187800, "start": 1885.0, "end": 1892.0, "text": " Now, since defining relative things for matrices involves some head bending, I backed away.", "tokens": [50714, 823, 11, 1670, 17827, 4972, 721, 337, 32284, 11626, 512, 1378, 22487, 11, 286, 20391, 1314, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08248583170083854, "compression_ratio": 1.5488215488215489, "no_speech_prob": 0.0007553913746960461}, {"id": 383, "seek": 187800, "start": 1892.0, "end": 1897.0, "text": " So, this gives a sense of the mathematical properties I play, but it's not the full story.", "tokens": [51064, 407, 11, 341, 2709, 257, 2020, 295, 264, 18894, 7221, 286, 862, 11, 457, 309, 311, 406, 264, 1577, 1657, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08248583170083854, "compression_ratio": 1.5488215488215489, "no_speech_prob": 0.0007553913746960461}, {"id": 384, "seek": 187800, "start": 1897.0, "end": 1901.0, "text": " For a bigger picture, Riley gave me the following analogy.", "tokens": [51314, 1171, 257, 3801, 3036, 11, 31373, 2729, 385, 264, 3480, 21663, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08248583170083854, "compression_ratio": 1.5488215488215489, "no_speech_prob": 0.0007553913746960461}, {"id": 385, "seek": 187800, "start": 1901.0, "end": 1907.0, "text": " The strategy of LA-PAC is to cast NLA algorithms into the use of efficient BLOZ functions.", "tokens": [51514, 440, 5206, 295, 9855, 12, 47, 4378, 307, 281, 4193, 426, 11435, 14642, 666, 264, 764, 295, 7148, 15132, 46, 57, 6828, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08248583170083854, "compression_ratio": 1.5488215488215489, "no_speech_prob": 0.0007553913746960461}, {"id": 386, "seek": 190700, "start": 1907.0, "end": 1911.0, "text": " The highly optimized General Matrix Multiply or GEM function.", "tokens": [50364, 440, 5405, 26941, 6996, 36274, 31150, 356, 420, 460, 6683, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 387, "seek": 190700, "start": 1911.0, "end": 1916.0, "text": " The more an algorithm can be written as repeated use of this operation, the faster it'll get.", "tokens": [50564, 440, 544, 364, 9284, 393, 312, 3720, 382, 10477, 764, 295, 341, 6916, 11, 264, 4663, 309, 603, 483, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 388, "seek": 190700, "start": 1916.0, "end": 1918.0, "text": " That's what LA-PAC did.", "tokens": [50814, 663, 311, 437, 9855, 12, 47, 4378, 630, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 389, "seek": 190700, "start": 1918.0, "end": 1922.0, "text": " But there's a limit to how much algorithms can be recast into GEM.", "tokens": [50914, 583, 456, 311, 257, 4948, 281, 577, 709, 14642, 393, 312, 850, 525, 666, 460, 6683, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 390, "seek": 190700, "start": 1922.0, "end": 1927.0, "text": " But randomization provides a new basket of functions that can be applied in a similar way to GEM.", "tokens": [51114, 583, 4974, 2144, 6417, 257, 777, 8390, 295, 6828, 300, 393, 312, 6456, 294, 257, 2531, 636, 281, 460, 6683, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 391, "seek": 190700, "start": 1927.0, "end": 1933.0, "text": " If least squares is suddenly super efficient, we'll try to reframe everything we can as solving repeated least squares problems.", "tokens": [51364, 759, 1935, 19368, 307, 5800, 1687, 7148, 11, 321, 603, 853, 281, 13334, 529, 1203, 321, 393, 382, 12606, 10477, 1935, 19368, 2740, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 392, "seek": 190700, "start": 1933.0, "end": 1936.0, "text": " It's a huge space for creativity and big gains.", "tokens": [51664, 467, 311, 257, 2603, 1901, 337, 12915, 293, 955, 16823, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06798858642578125, "compression_ratio": 1.628125, "no_speech_prob": 0.031138477846980095}, {"id": 393, "seek": 193600, "start": 1936.0, "end": 1944.0, "text": " And that's why in the Rand-NLA paper, they're talking about a new software, Randblast and Rand-LA-PAC,", "tokens": [50364, 400, 300, 311, 983, 294, 264, 23614, 12, 45, 11435, 3035, 11, 436, 434, 1417, 466, 257, 777, 4722, 11, 23614, 5199, 525, 293, 23614, 12, 11435, 12, 47, 4378, 11, 50764], "temperature": 0.0, "avg_logprob": -0.11085253646693279, "compression_ratio": 1.5291828793774318, "no_speech_prob": 0.012050753459334373}, {"id": 394, "seek": 193600, "start": 1944.0, "end": 1948.0, "text": " which would serve as a new pillar for NLA, the randomized approach.", "tokens": [50764, 597, 576, 4596, 382, 257, 777, 27592, 337, 426, 11435, 11, 264, 38513, 3109, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11085253646693279, "compression_ratio": 1.5291828793774318, "no_speech_prob": 0.012050753459334373}, {"id": 395, "seek": 193600, "start": 1948.0, "end": 1955.0, "text": " If they pull it off, and it's really saying something, we'd be in for a widespread upgrade in scientific computing.", "tokens": [50964, 759, 436, 2235, 309, 766, 11, 293, 309, 311, 534, 1566, 746, 11, 321, 1116, 312, 294, 337, 257, 22679, 11484, 294, 8134, 15866, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11085253646693279, "compression_ratio": 1.5291828793774318, "no_speech_prob": 0.012050753459334373}, {"id": 396, "seek": 193600, "start": 1955.0, "end": 1962.0, "text": " All those technologies stand to be improved from gaming to weather forecasting to artificial intelligence.", "tokens": [51314, 1057, 729, 7943, 1463, 281, 312, 9689, 490, 9703, 281, 5503, 44331, 281, 11677, 7599, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11085253646693279, "compression_ratio": 1.5291828793774318, "no_speech_prob": 0.012050753459334373}, {"id": 397, "seek": 196200, "start": 1963.0, "end": 1969.0, "text": " To be comprehensive, I should mention at least two other approaches to speed.", "tokens": [50414, 1407, 312, 13914, 11, 286, 820, 2152, 412, 1935, 732, 661, 11587, 281, 3073, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07421165773238259, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.011328429915010929}, {"id": 398, "seek": 196200, "start": 1969.0, "end": 1972.0, "text": " The first is communication avoiding algorithms.", "tokens": [50714, 440, 700, 307, 6101, 20220, 14642, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07421165773238259, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.011328429915010929}, {"id": 399, "seek": 196200, "start": 1972.0, "end": 1976.0, "text": " Algorithms which anticipate the hardware to minimize the amount of data movement.", "tokens": [50864, 35014, 6819, 2592, 597, 21685, 264, 8837, 281, 17522, 264, 2372, 295, 1412, 3963, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07421165773238259, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.011328429915010929}, {"id": 400, "seek": 196200, "start": 1976.0, "end": 1980.0, "text": " Since moving data takes so much time, these provide big speed ups as well.", "tokens": [51064, 4162, 2684, 1412, 2516, 370, 709, 565, 11, 613, 2893, 955, 3073, 15497, 382, 731, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07421165773238259, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.011328429915010929}, {"id": 401, "seek": 196200, "start": 1980.0, "end": 1983.0, "text": " Second, there are hardware accelerators.", "tokens": [51264, 5736, 11, 456, 366, 8837, 10172, 3391, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07421165773238259, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.011328429915010929}, {"id": 402, "seek": 196200, "start": 1983.0, "end": 1988.0, "text": " Specialized hardware designed to do very specific operations extremely fast.", "tokens": [51414, 11863, 1602, 8837, 4761, 281, 360, 588, 2685, 7705, 4664, 2370, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07421165773238259, "compression_ratio": 1.606425702811245, "no_speech_prob": 0.011328429915010929}, {"id": 403, "seek": 198800, "start": 1988.0, "end": 1992.0, "text": " Now, both of these are totally effective paths to speed,", "tokens": [50364, 823, 11, 1293, 295, 613, 366, 3879, 4942, 14518, 281, 3073, 11, 50564], "temperature": 0.0, "avg_logprob": -0.06138215065002441, "compression_ratio": 1.5680933852140078, "no_speech_prob": 0.000767263351008296}, {"id": 404, "seek": 198800, "start": 1992.0, "end": 1996.0, "text": " and in fact, can be combined with randomization to produce even larger gains.", "tokens": [50564, 293, 294, 1186, 11, 393, 312, 9354, 365, 4974, 2144, 281, 5258, 754, 4833, 16823, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06138215065002441, "compression_ratio": 1.5680933852140078, "no_speech_prob": 0.000767263351008296}, {"id": 405, "seek": 198800, "start": 1996.0, "end": 2000.0, "text": " That said, these approaches bring some inflexibility.", "tokens": [50764, 663, 848, 11, 613, 11587, 1565, 512, 1536, 2021, 2841, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06138215065002441, "compression_ratio": 1.5680933852140078, "no_speech_prob": 0.000767263351008296}, {"id": 406, "seek": 198800, "start": 2000.0, "end": 2005.0, "text": " Communication avoiding algorithms need to be designed especially carefully to the hardware,", "tokens": [50964, 34930, 20220, 14642, 643, 281, 312, 4761, 2318, 7500, 281, 264, 8837, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06138215065002441, "compression_ratio": 1.5680933852140078, "no_speech_prob": 0.000767263351008296}, {"id": 407, "seek": 198800, "start": 2005.0, "end": 2009.0, "text": " and accelerators only do fixed, highly specialized operations.", "tokens": [51214, 293, 10172, 3391, 787, 360, 6806, 11, 5405, 19813, 7705, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06138215065002441, "compression_ratio": 1.5680933852140078, "no_speech_prob": 0.000767263351008296}, {"id": 408, "seek": 198800, "start": 2009.0, "end": 2012.0, "text": " You can't change what an accelerator does after it's built.", "tokens": [51414, 509, 393, 380, 1319, 437, 364, 39889, 775, 934, 309, 311, 3094, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06138215065002441, "compression_ratio": 1.5680933852140078, "no_speech_prob": 0.000767263351008296}, {"id": 409, "seek": 201200, "start": 2013.0, "end": 2019.0, "text": " In comparison, randomized algorithms are exceptional because they are entirely an idea of mathematics.", "tokens": [50414, 682, 9660, 11, 38513, 14642, 366, 19279, 570, 436, 366, 7696, 364, 1558, 295, 18666, 13, 50714], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 410, "seek": 201200, "start": 2019.0, "end": 2023.0, "text": " Randomness isn't upgraded hardware or an algorithm designed for specific hardware,", "tokens": [50714, 37603, 1287, 1943, 380, 24133, 8837, 420, 364, 9284, 4761, 337, 2685, 8837, 11, 50914], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 411, "seek": 201200, "start": 2023.0, "end": 2026.0, "text": " yet it gives you speed and scalability as though it were.", "tokens": [50914, 1939, 309, 2709, 291, 3073, 293, 15664, 2310, 382, 1673, 309, 645, 13, 51064], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 412, "seek": 201200, "start": 2026.0, "end": 2031.0, "text": " It does this by allowing simple algorithms, ones that otherwise struggle with scalability,", "tokens": [51064, 467, 775, 341, 538, 8293, 2199, 14642, 11, 2306, 300, 5911, 7799, 365, 15664, 2310, 11, 51314], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 413, "seek": 201200, "start": 2031.0, "end": 2033.0, "text": " to be applied to huge data.", "tokens": [51314, 281, 312, 6456, 281, 2603, 1412, 13, 51414], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 414, "seek": 201200, "start": 2033.0, "end": 2037.0, "text": " And it's this quality of simple but powerful that I believe is necessary", "tokens": [51414, 400, 309, 311, 341, 3125, 295, 2199, 457, 4005, 300, 286, 1697, 307, 4818, 51614], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 415, "seek": 201200, "start": 2037.0, "end": 2041.0, "text": " for producing a significant and widespread upgrade in scientific computing.", "tokens": [51614, 337, 10501, 257, 4776, 293, 22679, 11484, 294, 8134, 15866, 13, 51814], "temperature": 0.0, "avg_logprob": -0.042088045138064946, "compression_ratio": 1.6864686468646866, "no_speech_prob": 0.0012065046466886997}, {"id": 416, "seek": 204100, "start": 2041.0, "end": 2046.0, "text": " Since this is evolving, I'm going to keep track of updates as I hear about them", "tokens": [50364, 4162, 341, 307, 21085, 11, 286, 478, 516, 281, 1066, 2837, 295, 9205, 382, 286, 1568, 466, 552, 50614], "temperature": 0.0, "avg_logprob": -0.0977103923394428, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.020639032125473022}, {"id": 417, "seek": 204100, "start": 2046.0, "end": 2050.0, "text": " and to the best of my ability on a post on truthata.io.", "tokens": [50614, 293, 281, 264, 1151, 295, 452, 3485, 322, 257, 2183, 322, 3494, 3274, 13, 1004, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0977103923394428, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.020639032125473022}, {"id": 418, "seek": 204100, "start": 2050.0, "end": 2057.0, "text": " There I'll also answer some other questions, like why isn't this Monte Carlo or who cares about least squares?", "tokens": [50814, 821, 286, 603, 611, 1867, 512, 661, 1651, 11, 411, 983, 1943, 380, 341, 38105, 45112, 420, 567, 12310, 466, 1935, 19368, 30, 51164], "temperature": 0.0, "avg_logprob": -0.0977103923394428, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.020639032125473022}, {"id": 419, "seek": 204100, "start": 2057.0, "end": 2061.0, "text": " In general, I inevitably learn more about a topic after I publish a video on it,", "tokens": [51164, 682, 2674, 11, 286, 28171, 1466, 544, 466, 257, 4829, 934, 286, 11374, 257, 960, 322, 309, 11, 51364], "temperature": 0.0, "avg_logprob": -0.0977103923394428, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.020639032125473022}, {"id": 420, "seek": 204100, "start": 2061.0, "end": 2066.0, "text": " so this post can evolve as I hear from you, others, or just learn more about it myself.", "tokens": [51364, 370, 341, 2183, 393, 16693, 382, 286, 1568, 490, 291, 11, 2357, 11, 420, 445, 1466, 544, 466, 309, 2059, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0977103923394428, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.020639032125473022}, {"id": 421, "seek": 204100, "start": 2066.0, "end": 2070.0, "text": " And wow, what an incredible segue into talking about true theta.", "tokens": [51614, 400, 6076, 11, 437, 364, 4651, 33850, 666, 1417, 466, 2074, 9725, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0977103923394428, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.020639032125473022}, {"id": 422, "seek": 207000, "start": 2070.0, "end": 2073.0, "text": " Truthata is my data science consultancy.", "tokens": [50364, 20522, 3274, 307, 452, 1412, 3497, 7189, 6717, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 423, "seek": 207000, "start": 2073.0, "end": 2076.0, "text": " We have experienced building machine learning systems for pricing,", "tokens": [50514, 492, 362, 6751, 2390, 3479, 2539, 3652, 337, 17621, 11, 50664], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 424, "seek": 207000, "start": 2076.0, "end": 2079.0, "text": " credit risk modeling, causal inference, and forecasting.", "tokens": [50664, 5397, 3148, 15983, 11, 38755, 38253, 11, 293, 44331, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 425, "seek": 207000, "start": 2079.0, "end": 2082.0, "text": " If you're at a company looking for this type of work, we should talk.", "tokens": [50814, 759, 291, 434, 412, 257, 2237, 1237, 337, 341, 2010, 295, 589, 11, 321, 820, 751, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 426, "seek": 207000, "start": 2082.0, "end": 2086.0, "text": " You can send an email to increase at truthata.io to get in touch.", "tokens": [50964, 509, 393, 2845, 364, 3796, 281, 3488, 412, 3494, 3274, 13, 1004, 281, 483, 294, 2557, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 427, "seek": 207000, "start": 2086.0, "end": 2088.0, "text": " Alright, that's it.", "tokens": [51164, 2798, 11, 300, 311, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 428, "seek": 207000, "start": 2088.0, "end": 2092.0, "text": " If you'd like to learn more about randomized NLA, I have my sources in the description.", "tokens": [51264, 759, 291, 1116, 411, 281, 1466, 544, 466, 38513, 426, 11435, 11, 286, 362, 452, 7139, 294, 264, 3855, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 429, "seek": 207000, "start": 2092.0, "end": 2097.0, "text": " Also, I'd like to make a special thank you to Riley Murray for our discussions on this topic.", "tokens": [51464, 2743, 11, 286, 1116, 411, 281, 652, 257, 2121, 1309, 291, 281, 31373, 27291, 337, 527, 11088, 322, 341, 4829, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05731189623475075, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.006486829835921526}, {"id": 430, "seek": 209700, "start": 2097.0, "end": 2101.0, "text": " And I'd like to thank everyone else who provided useful commentary.", "tokens": [50364, 400, 286, 1116, 411, 281, 1309, 1518, 1646, 567, 5649, 4420, 23527, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08845834578237226, "compression_ratio": 1.179245283018868, "no_speech_prob": 0.19902902841567993}, {"id": 431, "seek": 209700, "start": 2101.0, "end": 2105.0, "text": " And finally, thank you for watching, and until next time.", "tokens": [50564, 400, 2721, 11, 1309, 291, 337, 1976, 11, 293, 1826, 958, 565, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08845834578237226, "compression_ratio": 1.179245283018868, "no_speech_prob": 0.19902902841567993}], "language": "en"}