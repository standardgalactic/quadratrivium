start	end	text
0	13000	Today, I'm going to be talking about WebGL and what it can do for you and your users.
13000	16240	There are two main things that WebGL is really good at.
16240	23440	It's good at data visualization, and that's not very exciting, but if that's what you
23440	25440	need, I think you'll already know.
25440	31400	And the other thing it's good at is giving your users delightful experiences.
31400	36160	So what do I mean by delightful experience?
36160	43080	A delightful experience can be a game, or it can be a fancy 3D product or a marketing
43080	49040	site, basically anything that makes your users really happy.
49040	55240	Users get so bored by traditional web apps, and WebGL can make them excited.
55840	61320	Some of the demos I'm about to show you will convince you of that.
61320	65840	Before I get too much further, I just wanted to get a quick understanding.
65840	73320	How many people here have actually used WebGL in a published product or for your personal
73920	75920	use?
75920	77920	Okay.
77920	87920	Personal user is hoping to get it into real products.
87920	94920	What I'm going to talk about, first we'll go over frameworks that you can use today.
94920	97920	Some of them you might be familiar with, some of them perhaps will be new.
97920	101920	Obviously, there's a lot of them, so I can't cover all of them.
102120	105120	I'll also talk about what's in the pipeline, what's coming soon.
105120	111120	There's some really cool stuff, and hopefully I can get you excited about it.
111120	115120	And then finally, to wrap up, I'll give you some general performance tips.
115120	126120	And yeah, maybe those will be useful to you, but better to actually get a working app first.
126120	128120	A quick bit about me.
128320	131320	I have a games background.
131320	132320	I used to work at Sega.
132320	138320	I worked on Sega Rally Revo, which is this game, PlayStation 3 and Xbox 360.
138320	146320	I was on the graphics team and I did very important things like making sure the cars were shiny.
146320	149320	And making sure the muddy parts looked muddy.
149320	154320	And yeah, that was mainly what I worked on.
154520	157520	The cars, the water, the mud.
157520	159520	Exciting times.
159520	162520	I then went to Google and worked at YouTube.
162520	166520	I worked on Content ID and a bit of front-end stuff.
166520	170520	I also worked on the TV interface for YouTube.
170520	175520	And I also took a couple of years to do independent game development.
175520	180520	And I worked on this game, which is WebGL based, and I'll show you a quick demo in a minute.
181520	186520	So current status of support for WebGL.
186520	191520	The short version is things are looking good.
191520	202520	We have a broad spectrum of support, and in particular, I'd like to draw your attention to these two,
202520	204520	which have recently come online.
204520	209520	We've got Internet Explorer 11 and iOS 8 as of two weeks ago.
209520	214520	So this is a huge rollout for WebGL.
214520	217520	You can now target a lot of users with it.
217520	223520	The only holdouts really are things that don't matter so much.
223520	228520	The Android browser, for example, is being phased out in favor of Chrome for Android.
228520	231520	So my advice would be not to worry about it too much.
231520	233520	Basically, WebGL is everywhere.
233520	237520	You can use it whenever you want.
238520	242520	The engines and frameworks that I'm going to talk about are these ones.
242520	247520	So I've tried to kind of group them roughly.
247520	255520	You have frameworks that just do graphics and frameworks that do graphics plus everything else that you need for games.
255520	261520	So depending on your use case, if it's just adding a 3D rotating product on your site, for example,
261520	267520	you can use the graphics engines, or if you really want interactivity, sound, physics, that kind of thing,
267520	270520	then you're probably going to want to go for a game engine.
270520	276520	On the left, we have stuff that is really like production ready.
276520	278520	It's used by a lot of apps already.
278520	282520	And on the right, we have things that are still kind of experimental.
282520	288520	You can use them a bit, but it's more for the future.
288520	298520	So now I'm going to show you an exciting taste of the power of WebGL.
298520	301520	This is actually a very simple WebGL app.
301520	315520	And if I can click on this, I'm going to show you the source code.
315520	322520	So to generate this amazing, high-quality graphics, you have all of this code.
322520	328520	And I hope I don't need to do any further explanation, but basically this is why frameworks exist.
328520	337520	There's a lot of stuff you don't want to have to deal with.
337520	344520	So that brings me to our first framework, 3JS.
344520	346520	You may have heard of 3JS.
346520	351520	It's pretty much the de facto standard for WebGL development.
351520	360520	And it may not be the fastest framework, but it's very big, and it does whatever it wants to do.
360520	367520	Hopefully, it will also do what you want it to do.
367520	372520	To show you what it's capable of, I've selected a few demos.
372520	375520	And I know it's late. You're all tired.
375520	380520	So I thought maybe this would be a good way to relax a bit.
380520	383520	Do we have audio?
383520	386520	Oops.
386520	406520	Sorry, it's hard using the side screen.
406520	409520	Can we pull up the audio, maybe?
586520	613520	I think that's a beautiful song and a beautiful demo.
613520	620520	One of the best showcases for 3JS.
620520	627520	Another less exciting one, but very practical for people that need it.
627520	632520	This is an example of data visualization. These are 3D point cloud sets.
632520	636520	For example, you can load this up.
636520	645520	You can basically visualize a point cloud.
645520	656520	It's super fast, and it actually takes relatively little code with 3JS.
656520	661520	I think I'll skip this one in the interest of time, but I can't resist showing you my one.
661520	666520	My one, which is this racing game.
666520	670520	3, 2, 1, go!
670520	676520	This demonstrates interactivity and sound and physics and all that sort of thing.
676520	686520	So this is kind of the interactive extreme of what's possible.
686520	695520	Sorry about that.
695520	701520	So what's good about 3JS? It's an all-rounder. It can do a bit of everything.
701520	708520	It's not particularly good at anything, but it can do just about everything.
708520	711520	There's a huge community around it. Lots of developers.
711520	718520	It's not just a personal project by one person. There's a whole genuine open-source community there.
718520	725520	There are a great deal of samples, learning resources, places you can go to get help, that kind of thing.
725520	733520	There are many plugins. For example, if you want to have physics, or as he probably showed you yesterday,
733520	739520	like Minecraft characters from Shiro Matien, there are plugins to do that.
739520	741520	And of course, it's easy to extend yourself.
741520	746520	And once you have an app in 3JS, you quite often find that there's something missing.
746520	750520	So it's really nice that everything is there just under the surface,
750520	759520	and you can access all of the low-level primitives to do whatever you need to do.
759520	766520	What's not so good about it, it's big. It's really big.
766520	777520	As you can see, over 400 kilobytes for a JavaScript file. That's nothing to sniff at.
777520	783520	And of course, it only does graphics. Plugins can help solve some of that, though.
783520	791520	So if you bring together 3JS with a bunch of plugins, you can actually end up with a pretty fully-featured game engine.
791520	807520	So let's move on to another engine. Pixi.js. And this is what it looks like.
807520	822520	Basically, this is a 2D game engine. Well, actually, strictly speaking, it's more of a 2D graphics engine.
822520	831520	But it's really cute. It's really fast. And the main advantage of this one is it has a great non-webGL fallback.
831520	844520	3JS also has non-webGL fallbacks, but they're not quite as good. You're very limited in what you can do.
844520	851520	This one is really good. It has blending. It has very fast canvas operations.
851520	856520	If you want to do 2D, I would highly recommend it.
857520	871520	It only does graphics. However, you can use this engine instead, Phaser, which is a complete game engine, basically.
871520	878520	This is the best demo I could find. Extremely old-school gaming.
888520	896520	And clearly I suck. Anyway, again, the awesome power of WebGL. I'll let you play with this later.
897520	909520	Our next engine, PlayCanvas. PlayCanvas is a really interesting one, actually, because it has this whole kind of online tool set,
909520	915520	so you can collaboratively edit games with other people. It's really interesting.
915520	923520	And if you want to make HTML5 games, I would recommend you at least take a look at it, because there's nothing else quite like it.
924520	929520	It's a bit like Unity, but really web-centric.
931520	939520	It's also partially open-source. The game engine itself is open-source, but the tools, as far as I know, are not yet.
941520	945520	Let me show you a quick demo of this one.
954520	959520	Isn't that cute? It's a little plain with a rainbow.
964520	968520	In my defense, it is actually really hard to play these games at this angle.
969520	984520	Next up, Turbulence. Turbulence is another fairly fully-featured game engine, fully open-source, as far as I know, but with more limited tooling.
984520	989520	And it's actually got a bunch of fairly successful games that are already using it.
989520	997520	There's a studio, I think, they might be based in London, actually, called Wonderstruck, that's made a series of games with this engine.
997520	1002520	And they're growing pretty quickly. Actually, no, I think they're in maybe Guildford or something like that.
1006520	1008520	And this is...
1012520	1014520	The kind of thing you can make with Turbulence.
1022520	1024520	Rest in the little people.
1028520	1032520	So you can see pretty fast, pretty interactive, very smooth.
1035520	1039520	Web browsers are turning into quite powerful little games.
1048520	1053520	That's it for the current, well-supported frameworks that I'm going to cover.
1053520	1055520	But what about the future?
1057520	1064520	Before I talk about the frameworks themselves, I will just quickly mention Inscripten.
1064520	1069520	Has anyone here heard of Inscripten? You probably have, right?
1069520	1075520	It's a transpiler. It compiles LLVM code, which is not quite machine code.
1075520	1086520	It's the output of GCC front-ends, and outputs a limited subset of JavaScript called ASM.js.
1087520	1093520	The result can run in any browser, but if the browser recognizes the code, it can optimize for it.
1093520	1098520	At the moment, the only browser that actually does that is Firefox, but others are considering it.
1098520	1106520	And actually, just because of the nature of ASM.js code, it already tends to be faster than handwritten JavaScript.
1107520	1117520	The first engine that is built on Inscripten that I'm going to mention is Unreal Engine.
1117520	1125520	They used to have a great demo up called Epic Citadel, but for some reason they seem to have removed that from the web now.
1125520	1131520	So instead, I'm going to show you this amazing game, Tappy Chicken.
1131520	1137520	Believe it or not, this is actually the Unreal Engine.
1155520	1157520	I think you know where this is going.
1162520	1168520	The other engine that is based on Inscripten is Unity.
1168520	1176520	Unity is like a massive system now. It's growing faster than any other engine, I think.
1176520	1181520	And there are so many people using it. It's amazing.
1181520	1190520	I couldn't find an actual live WebGL demo, but this is what they're going to have in their next major release, Unity 5.
1192520	1195520	Which is due to come out in a few months, apparently.
1201520	1206520	Lots of guns, lots of shooting. Apparently that's what gamer is like.
1206520	1219520	I think that's enough of that.
1219520	1238520	So considerations for both of these two engines. They're both based on Inscripten, they both output ASMJS and use all of the latest HTML5 standards.
1238520	1245520	They're all-in-one solutions. Basically, they have their own tooling, their own editors, their own everything.
1245520	1251520	And when you make a game using these systems, you're kind of stuck within that.
1251520	1258520	It isn't really possible as far as I know. I mean, they haven't actually launched Unity 5 yet.
1258520	1265520	But as far as I can see, it's not possible to really make a web app out of these things.
1265520	1270520	You can't easily interact with other JavaScript plugins or anything like that.
1270520	1278520	You have to basically treat the web browser as a games console. It's something you just deploy to.
1278520	1286520	However, on the plus side, both of these are very big communities and you can find a lot of stuff within their system.
1286520	1292520	So they have asset stores where you can go and buy just about anything that you want to have in your game.
1292520	1297520	You can even buy complete games and reskin them however you want.
1297520	1304520	And of course, it's easy to take what you've made and cross-publish it to mobile devices, games consoles, that kind of thing,
1304520	1308520	because they have such broad deployment bases.
1313520	1316520	Returning quickly to the data visualization thing.
1316520	1325520	If this is your deal, I suggest you check out Mathbox, which is pretty much the state-of-the-art of WebGL data visualization.
1325520	1332520	It's really nice. It's basically D3, but for WebGL.
1332520	1341520	So you just take your data, you choose a nice visualization, you bind them together, and it generates wonderful animated stuff.
1345520	1348520	I'm getting ahead of myself. There you go.
1349520	1354520	However, the reason I put it in the future category is at the moment they're on Mathbox 1,
1354520	1360520	and in a few months they're going to release a version 2, which is quite different apparently.
1360520	1366520	So more powerful, but probably not worth getting started on Mathbox 1 right now.
1368520	1373520	A quick recap. These are the frameworks that we've covered.
1374520	1380520	If you're interested in learning about more frameworks, there's a nice website here that has a list of them.
1380520	1389520	So there are others, and if you're serious about doing a WebGL app, I recommend you see what else is available.
1392520	1399520	And that's about it for frameworks. So let's move on to WebGL performance tips.
1399520	1407520	So in this very small crash course, I will try to tell you what not to do.
1409520	1416520	Here's the one slide summary. Do stuff on the GPU? Don't do it on the CPU.
1417520	1425520	Basically, GPU means what you can access with WebGL, and CPU is anything that happens in JavaScript space.
1426520	1436520	The general idea is load as much data as you can onto the GPU, i.e. give it to WebGL, and then leave it alone.
1436520	1445520	Don't touch it. If you have to change any data on the GPU, it generally means that you have to stall the whole pipeline
1445520	1452520	while you possibly download data off the GPU, change it in the JavaScript, which itself is not super fast,
1452520	1461520	and then upload it back again. And there's several layers of code between the GPU and the driver and the operating system
1461520	1469520	and the web browser, so you kind of want to avoid doing this if you can. If you have to make changes, try to make them small.
1470520	1481520	Just to give a practical example, this is coming back to the game I made and its terrain rendering system.
1481520	1490520	The terrain looks a bit like this, and in order to do this rendering, it uses these sources of data.
1491520	1499520	You have a bunch of vertex data and several big textures. Each of these textures is about four megabytes,
1499520	1508520	and that doesn't sound like a lot, but if you start trying to change four megabytes of data, not even every frame,
1508520	1513520	but even if you just do it once, you're going to see a big stutter as it re-uploads that to the GPU.
1513520	1518520	If you just change a small amount, then you might be able to get away with it.
1518520	1522520	Let me just try and show you an example of that.
1524520	1527520	If I go into the track editor here...
1535520	1538520	I think I need to copy this first, don't I?
1544520	1553520	When I move a node and it re-renders the texture, you can see this huge delay.
1553520	1561520	Actually, I didn't write this in a very efficient way, so it is in fact updating a giant four megabyte texture.
1561520	1568520	Like I said, this is all about what not to do, so don't do that.
1574520	1581520	Here's a sad panda.
1581520	1590520	This might be how you're feeling after a long day, but actually this is meant to represent your users,
1590520	1596520	and their sadness at not being given amazing WebGL toys to play with.
1597520	1603520	Their spirits have been crushed by old-school web apps,
1603520	1609520	but you have a new toy that you can give them, WebGL.
1609520	1615520	I would like to invite you to go out and delight your users with WebGL.
1615520	1617520	Thank you.
