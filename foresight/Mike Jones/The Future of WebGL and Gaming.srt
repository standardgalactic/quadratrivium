1
00:00:00,000 --> 00:00:13,000
Today, I'm going to be talking about WebGL and what it can do for you and your users.

2
00:00:13,000 --> 00:00:16,240
There are two main things that WebGL is really good at.

3
00:00:16,240 --> 00:00:23,440
It's good at data visualization, and that's not very exciting, but if that's what you

4
00:00:23,440 --> 00:00:25,440
need, I think you'll already know.

5
00:00:25,440 --> 00:00:31,400
And the other thing it's good at is giving your users delightful experiences.

6
00:00:31,400 --> 00:00:36,160
So what do I mean by delightful experience?

7
00:00:36,160 --> 00:00:43,080
A delightful experience can be a game, or it can be a fancy 3D product or a marketing

8
00:00:43,080 --> 00:00:49,040
site, basically anything that makes your users really happy.

9
00:00:49,040 --> 00:00:55,240
Users get so bored by traditional web apps, and WebGL can make them excited.

10
00:00:55,840 --> 00:01:01,320
Some of the demos I'm about to show you will convince you of that.

11
00:01:01,320 --> 00:01:05,840
Before I get too much further, I just wanted to get a quick understanding.

12
00:01:05,840 --> 00:01:13,320
How many people here have actually used WebGL in a published product or for your personal

13
00:01:13,920 --> 00:01:15,920
use?

14
00:01:15,920 --> 00:01:17,920
Okay.

15
00:01:17,920 --> 00:01:27,920
Personal user is hoping to get it into real products.

16
00:01:27,920 --> 00:01:34,920
What I'm going to talk about, first we'll go over frameworks that you can use today.

17
00:01:34,920 --> 00:01:37,920
Some of them you might be familiar with, some of them perhaps will be new.

18
00:01:37,920 --> 00:01:41,920
Obviously, there's a lot of them, so I can't cover all of them.

19
00:01:42,120 --> 00:01:45,120
I'll also talk about what's in the pipeline, what's coming soon.

20
00:01:45,120 --> 00:01:51,120
There's some really cool stuff, and hopefully I can get you excited about it.

21
00:01:51,120 --> 00:01:55,120
And then finally, to wrap up, I'll give you some general performance tips.

22
00:01:55,120 --> 00:02:06,120
And yeah, maybe those will be useful to you, but better to actually get a working app first.

23
00:02:06,120 --> 00:02:08,120
A quick bit about me.

24
00:02:08,320 --> 00:02:11,320
I have a games background.

25
00:02:11,320 --> 00:02:12,320
I used to work at Sega.

26
00:02:12,320 --> 00:02:18,320
I worked on Sega Rally Revo, which is this game, PlayStation 3 and Xbox 360.

27
00:02:18,320 --> 00:02:26,320
I was on the graphics team and I did very important things like making sure the cars were shiny.

28
00:02:26,320 --> 00:02:29,320
And making sure the muddy parts looked muddy.

29
00:02:29,320 --> 00:02:34,320
And yeah, that was mainly what I worked on.

30
00:02:34,520 --> 00:02:37,520
The cars, the water, the mud.

31
00:02:37,520 --> 00:02:39,520
Exciting times.

32
00:02:39,520 --> 00:02:42,520
I then went to Google and worked at YouTube.

33
00:02:42,520 --> 00:02:46,520
I worked on Content ID and a bit of front-end stuff.

34
00:02:46,520 --> 00:02:50,520
I also worked on the TV interface for YouTube.

35
00:02:50,520 --> 00:02:55,520
And I also took a couple of years to do independent game development.

36
00:02:55,520 --> 00:03:00,520
And I worked on this game, which is WebGL based, and I'll show you a quick demo in a minute.

37
00:03:01,520 --> 00:03:06,520
So current status of support for WebGL.

38
00:03:06,520 --> 00:03:11,520
The short version is things are looking good.

39
00:03:11,520 --> 00:03:22,520
We have a broad spectrum of support, and in particular, I'd like to draw your attention to these two,

40
00:03:22,520 --> 00:03:24,520
which have recently come online.

41
00:03:24,520 --> 00:03:29,520
We've got Internet Explorer 11 and iOS 8 as of two weeks ago.

42
00:03:29,520 --> 00:03:34,520
So this is a huge rollout for WebGL.

43
00:03:34,520 --> 00:03:37,520
You can now target a lot of users with it.

44
00:03:37,520 --> 00:03:43,520
The only holdouts really are things that don't matter so much.

45
00:03:43,520 --> 00:03:48,520
The Android browser, for example, is being phased out in favor of Chrome for Android.

46
00:03:48,520 --> 00:03:51,520
So my advice would be not to worry about it too much.

47
00:03:51,520 --> 00:03:53,520
Basically, WebGL is everywhere.

48
00:03:53,520 --> 00:03:57,520
You can use it whenever you want.

49
00:03:58,520 --> 00:04:02,520
The engines and frameworks that I'm going to talk about are these ones.

50
00:04:02,520 --> 00:04:07,520
So I've tried to kind of group them roughly.

51
00:04:07,520 --> 00:04:15,520
You have frameworks that just do graphics and frameworks that do graphics plus everything else that you need for games.

52
00:04:15,520 --> 00:04:21,520
So depending on your use case, if it's just adding a 3D rotating product on your site, for example,

53
00:04:21,520 --> 00:04:27,520
you can use the graphics engines, or if you really want interactivity, sound, physics, that kind of thing,

54
00:04:27,520 --> 00:04:30,520
then you're probably going to want to go for a game engine.

55
00:04:30,520 --> 00:04:36,520
On the left, we have stuff that is really like production ready.

56
00:04:36,520 --> 00:04:38,520
It's used by a lot of apps already.

57
00:04:38,520 --> 00:04:42,520
And on the right, we have things that are still kind of experimental.

58
00:04:42,520 --> 00:04:48,520
You can use them a bit, but it's more for the future.

59
00:04:48,520 --> 00:04:58,520
So now I'm going to show you an exciting taste of the power of WebGL.

60
00:04:58,520 --> 00:05:01,520
This is actually a very simple WebGL app.

61
00:05:01,520 --> 00:05:15,520
And if I can click on this, I'm going to show you the source code.

62
00:05:15,520 --> 00:05:22,520
So to generate this amazing, high-quality graphics, you have all of this code.

63
00:05:22,520 --> 00:05:28,520
And I hope I don't need to do any further explanation, but basically this is why frameworks exist.

64
00:05:28,520 --> 00:05:37,520
There's a lot of stuff you don't want to have to deal with.

65
00:05:37,520 --> 00:05:44,520
So that brings me to our first framework, 3JS.

66
00:05:44,520 --> 00:05:46,520
You may have heard of 3JS.

67
00:05:46,520 --> 00:05:51,520
It's pretty much the de facto standard for WebGL development.

68
00:05:51,520 --> 00:06:00,520
And it may not be the fastest framework, but it's very big, and it does whatever it wants to do.

69
00:06:00,520 --> 00:06:07,520
Hopefully, it will also do what you want it to do.

70
00:06:07,520 --> 00:06:12,520
To show you what it's capable of, I've selected a few demos.

71
00:06:12,520 --> 00:06:15,520
And I know it's late. You're all tired.

72
00:06:15,520 --> 00:06:20,520
So I thought maybe this would be a good way to relax a bit.

73
00:06:20,520 --> 00:06:23,520
Do we have audio?

74
00:06:23,520 --> 00:06:26,520
Oops.

75
00:06:26,520 --> 00:06:46,520
Sorry, it's hard using the side screen.

76
00:06:46,520 --> 00:06:49,520
Can we pull up the audio, maybe?

77
00:09:46,520 --> 00:10:13,520
I think that's a beautiful song and a beautiful demo.

78
00:10:13,520 --> 00:10:20,520
One of the best showcases for 3JS.

79
00:10:20,520 --> 00:10:27,520
Another less exciting one, but very practical for people that need it.

80
00:10:27,520 --> 00:10:32,520
This is an example of data visualization. These are 3D point cloud sets.

81
00:10:32,520 --> 00:10:36,520
For example, you can load this up.

82
00:10:36,520 --> 00:10:45,520
You can basically visualize a point cloud.

83
00:10:45,520 --> 00:10:56,520
It's super fast, and it actually takes relatively little code with 3JS.

84
00:10:56,520 --> 00:11:01,520
I think I'll skip this one in the interest of time, but I can't resist showing you my one.

85
00:11:01,520 --> 00:11:06,520
My one, which is this racing game.

86
00:11:06,520 --> 00:11:10,520
3, 2, 1, go!

87
00:11:10,520 --> 00:11:16,520
This demonstrates interactivity and sound and physics and all that sort of thing.

88
00:11:16,520 --> 00:11:26,520
So this is kind of the interactive extreme of what's possible.

89
00:11:26,520 --> 00:11:35,520
Sorry about that.

90
00:11:35,520 --> 00:11:41,520
So what's good about 3JS? It's an all-rounder. It can do a bit of everything.

91
00:11:41,520 --> 00:11:48,520
It's not particularly good at anything, but it can do just about everything.

92
00:11:48,520 --> 00:11:51,520
There's a huge community around it. Lots of developers.

93
00:11:51,520 --> 00:11:58,520
It's not just a personal project by one person. There's a whole genuine open-source community there.

94
00:11:58,520 --> 00:12:05,520
There are a great deal of samples, learning resources, places you can go to get help, that kind of thing.

95
00:12:05,520 --> 00:12:13,520
There are many plugins. For example, if you want to have physics, or as he probably showed you yesterday,

96
00:12:13,520 --> 00:12:19,520
like Minecraft characters from Shiro Matien, there are plugins to do that.

97
00:12:19,520 --> 00:12:21,520
And of course, it's easy to extend yourself.

98
00:12:21,520 --> 00:12:26,520
And once you have an app in 3JS, you quite often find that there's something missing.

99
00:12:26,520 --> 00:12:30,520
So it's really nice that everything is there just under the surface,

100
00:12:30,520 --> 00:12:39,520
and you can access all of the low-level primitives to do whatever you need to do.

101
00:12:39,520 --> 00:12:46,520
What's not so good about it, it's big. It's really big.

102
00:12:46,520 --> 00:12:57,520
As you can see, over 400 kilobytes for a JavaScript file. That's nothing to sniff at.

103
00:12:57,520 --> 00:13:03,520
And of course, it only does graphics. Plugins can help solve some of that, though.

104
00:13:03,520 --> 00:13:11,520
So if you bring together 3JS with a bunch of plugins, you can actually end up with a pretty fully-featured game engine.

105
00:13:11,520 --> 00:13:27,520
So let's move on to another engine. Pixi.js. And this is what it looks like.

106
00:13:27,520 --> 00:13:42,520
Basically, this is a 2D game engine. Well, actually, strictly speaking, it's more of a 2D graphics engine.

107
00:13:42,520 --> 00:13:51,520
But it's really cute. It's really fast. And the main advantage of this one is it has a great non-webGL fallback.

108
00:13:51,520 --> 00:14:04,520
3JS also has non-webGL fallbacks, but they're not quite as good. You're very limited in what you can do.

109
00:14:04,520 --> 00:14:11,520
This one is really good. It has blending. It has very fast canvas operations.

110
00:14:11,520 --> 00:14:16,520
If you want to do 2D, I would highly recommend it.

111
00:14:17,520 --> 00:14:31,520
It only does graphics. However, you can use this engine instead, Phaser, which is a complete game engine, basically.

112
00:14:31,520 --> 00:14:38,520
This is the best demo I could find. Extremely old-school gaming.

113
00:14:48,520 --> 00:14:56,520
And clearly I suck. Anyway, again, the awesome power of WebGL. I'll let you play with this later.

114
00:14:57,520 --> 00:15:09,520
Our next engine, PlayCanvas. PlayCanvas is a really interesting one, actually, because it has this whole kind of online tool set,

115
00:15:09,520 --> 00:15:15,520
so you can collaboratively edit games with other people. It's really interesting.

116
00:15:15,520 --> 00:15:23,520
And if you want to make HTML5 games, I would recommend you at least take a look at it, because there's nothing else quite like it.

117
00:15:24,520 --> 00:15:29,520
It's a bit like Unity, but really web-centric.

118
00:15:31,520 --> 00:15:39,520
It's also partially open-source. The game engine itself is open-source, but the tools, as far as I know, are not yet.

119
00:15:41,520 --> 00:15:45,520
Let me show you a quick demo of this one.

120
00:15:54,520 --> 00:15:59,520
Isn't that cute? It's a little plain with a rainbow.

121
00:16:04,520 --> 00:16:08,520
In my defense, it is actually really hard to play these games at this angle.

122
00:16:09,520 --> 00:16:24,520
Next up, Turbulence. Turbulence is another fairly fully-featured game engine, fully open-source, as far as I know, but with more limited tooling.

123
00:16:24,520 --> 00:16:29,520
And it's actually got a bunch of fairly successful games that are already using it.

124
00:16:29,520 --> 00:16:37,520
There's a studio, I think, they might be based in London, actually, called Wonderstruck, that's made a series of games with this engine.

125
00:16:37,520 --> 00:16:42,520
And they're growing pretty quickly. Actually, no, I think they're in maybe Guildford or something like that.

126
00:16:46,520 --> 00:16:48,520
And this is...

127
00:16:52,520 --> 00:16:54,520
The kind of thing you can make with Turbulence.

128
00:17:02,520 --> 00:17:04,520
Rest in the little people.

129
00:17:08,520 --> 00:17:12,520
So you can see pretty fast, pretty interactive, very smooth.

130
00:17:15,520 --> 00:17:19,520
Web browsers are turning into quite powerful little games.

131
00:17:28,520 --> 00:17:33,520
That's it for the current, well-supported frameworks that I'm going to cover.

132
00:17:33,520 --> 00:17:35,520
But what about the future?

133
00:17:37,520 --> 00:17:44,520
Before I talk about the frameworks themselves, I will just quickly mention Inscripten.

134
00:17:44,520 --> 00:17:49,520
Has anyone here heard of Inscripten? You probably have, right?

135
00:17:49,520 --> 00:17:55,520
It's a transpiler. It compiles LLVM code, which is not quite machine code.

136
00:17:55,520 --> 00:18:06,520
It's the output of GCC front-ends, and outputs a limited subset of JavaScript called ASM.js.

137
00:18:07,520 --> 00:18:13,520
The result can run in any browser, but if the browser recognizes the code, it can optimize for it.

138
00:18:13,520 --> 00:18:18,520
At the moment, the only browser that actually does that is Firefox, but others are considering it.

139
00:18:18,520 --> 00:18:26,520
And actually, just because of the nature of ASM.js code, it already tends to be faster than handwritten JavaScript.

140
00:18:27,520 --> 00:18:37,520
The first engine that is built on Inscripten that I'm going to mention is Unreal Engine.

141
00:18:37,520 --> 00:18:45,520
They used to have a great demo up called Epic Citadel, but for some reason they seem to have removed that from the web now.

142
00:18:45,520 --> 00:18:51,520
So instead, I'm going to show you this amazing game, Tappy Chicken.

143
00:18:51,520 --> 00:18:57,520
Believe it or not, this is actually the Unreal Engine.

144
00:19:15,520 --> 00:19:17,520
I think you know where this is going.

145
00:19:22,520 --> 00:19:28,520
The other engine that is based on Inscripten is Unity.

146
00:19:28,520 --> 00:19:36,520
Unity is like a massive system now. It's growing faster than any other engine, I think.

147
00:19:36,520 --> 00:19:41,520
And there are so many people using it. It's amazing.

148
00:19:41,520 --> 00:19:50,520
I couldn't find an actual live WebGL demo, but this is what they're going to have in their next major release, Unity 5.

149
00:19:52,520 --> 00:19:55,520
Which is due to come out in a few months, apparently.

150
00:20:01,520 --> 00:20:06,520
Lots of guns, lots of shooting. Apparently that's what gamer is like.

151
00:20:06,520 --> 00:20:19,520
I think that's enough of that.

152
00:20:19,520 --> 00:20:38,520
So considerations for both of these two engines. They're both based on Inscripten, they both output ASMJS and use all of the latest HTML5 standards.

153
00:20:38,520 --> 00:20:45,520
They're all-in-one solutions. Basically, they have their own tooling, their own editors, their own everything.

154
00:20:45,520 --> 00:20:51,520
And when you make a game using these systems, you're kind of stuck within that.

155
00:20:51,520 --> 00:20:58,520
It isn't really possible as far as I know. I mean, they haven't actually launched Unity 5 yet.

156
00:20:58,520 --> 00:21:05,520
But as far as I can see, it's not possible to really make a web app out of these things.

157
00:21:05,520 --> 00:21:10,520
You can't easily interact with other JavaScript plugins or anything like that.

158
00:21:10,520 --> 00:21:18,520
You have to basically treat the web browser as a games console. It's something you just deploy to.

159
00:21:18,520 --> 00:21:26,520
However, on the plus side, both of these are very big communities and you can find a lot of stuff within their system.

160
00:21:26,520 --> 00:21:32,520
So they have asset stores where you can go and buy just about anything that you want to have in your game.

161
00:21:32,520 --> 00:21:37,520
You can even buy complete games and reskin them however you want.

162
00:21:37,520 --> 00:21:44,520
And of course, it's easy to take what you've made and cross-publish it to mobile devices, games consoles, that kind of thing,

163
00:21:44,520 --> 00:21:48,520
because they have such broad deployment bases.

164
00:21:53,520 --> 00:21:56,520
Returning quickly to the data visualization thing.

165
00:21:56,520 --> 00:22:05,520
If this is your deal, I suggest you check out Mathbox, which is pretty much the state-of-the-art of WebGL data visualization.

166
00:22:05,520 --> 00:22:12,520
It's really nice. It's basically D3, but for WebGL.

167
00:22:12,520 --> 00:22:21,520
So you just take your data, you choose a nice visualization, you bind them together, and it generates wonderful animated stuff.

168
00:22:25,520 --> 00:22:28,520
I'm getting ahead of myself. There you go.

169
00:22:29,520 --> 00:22:34,520
However, the reason I put it in the future category is at the moment they're on Mathbox 1,

170
00:22:34,520 --> 00:22:40,520
and in a few months they're going to release a version 2, which is quite different apparently.

171
00:22:40,520 --> 00:22:46,520
So more powerful, but probably not worth getting started on Mathbox 1 right now.

172
00:22:48,520 --> 00:22:53,520
A quick recap. These are the frameworks that we've covered.

173
00:22:54,520 --> 00:23:00,520
If you're interested in learning about more frameworks, there's a nice website here that has a list of them.

174
00:23:00,520 --> 00:23:09,520
So there are others, and if you're serious about doing a WebGL app, I recommend you see what else is available.

175
00:23:12,520 --> 00:23:19,520
And that's about it for frameworks. So let's move on to WebGL performance tips.

176
00:23:19,520 --> 00:23:27,520
So in this very small crash course, I will try to tell you what not to do.

177
00:23:29,520 --> 00:23:36,520
Here's the one slide summary. Do stuff on the GPU? Don't do it on the CPU.

178
00:23:37,520 --> 00:23:45,520
Basically, GPU means what you can access with WebGL, and CPU is anything that happens in JavaScript space.

179
00:23:46,520 --> 00:23:56,520
The general idea is load as much data as you can onto the GPU, i.e. give it to WebGL, and then leave it alone.

180
00:23:56,520 --> 00:24:05,520
Don't touch it. If you have to change any data on the GPU, it generally means that you have to stall the whole pipeline

181
00:24:05,520 --> 00:24:12,520
while you possibly download data off the GPU, change it in the JavaScript, which itself is not super fast,

182
00:24:12,520 --> 00:24:21,520
and then upload it back again. And there's several layers of code between the GPU and the driver and the operating system

183
00:24:21,520 --> 00:24:29,520
and the web browser, so you kind of want to avoid doing this if you can. If you have to make changes, try to make them small.

184
00:24:30,520 --> 00:24:41,520
Just to give a practical example, this is coming back to the game I made and its terrain rendering system.

185
00:24:41,520 --> 00:24:50,520
The terrain looks a bit like this, and in order to do this rendering, it uses these sources of data.

186
00:24:51,520 --> 00:24:59,520
You have a bunch of vertex data and several big textures. Each of these textures is about four megabytes,

187
00:24:59,520 --> 00:25:08,520
and that doesn't sound like a lot, but if you start trying to change four megabytes of data, not even every frame,

188
00:25:08,520 --> 00:25:13,520
but even if you just do it once, you're going to see a big stutter as it re-uploads that to the GPU.

189
00:25:13,520 --> 00:25:18,520
If you just change a small amount, then you might be able to get away with it.

190
00:25:18,520 --> 00:25:22,520
Let me just try and show you an example of that.

191
00:25:24,520 --> 00:25:27,520
If I go into the track editor here...

192
00:25:35,520 --> 00:25:38,520
I think I need to copy this first, don't I?

193
00:25:44,520 --> 00:25:53,520
When I move a node and it re-renders the texture, you can see this huge delay.

194
00:25:53,520 --> 00:26:01,520
Actually, I didn't write this in a very efficient way, so it is in fact updating a giant four megabyte texture.

195
00:26:01,520 --> 00:26:08,520
Like I said, this is all about what not to do, so don't do that.

196
00:26:14,520 --> 00:26:21,520
Here's a sad panda.

197
00:26:21,520 --> 00:26:30,520
This might be how you're feeling after a long day, but actually this is meant to represent your users,

198
00:26:30,520 --> 00:26:36,520
and their sadness at not being given amazing WebGL toys to play with.

199
00:26:37,520 --> 00:26:43,520
Their spirits have been crushed by old-school web apps,

200
00:26:43,520 --> 00:26:49,520
but you have a new toy that you can give them, WebGL.

201
00:26:49,520 --> 00:26:55,520
I would like to invite you to go out and delight your users with WebGL.

202
00:26:55,520 --> 00:26:57,520
Thank you.

