start	end	text
0	4000	Oh, there was one that your colleague helped me with earlier, it's now gone.
4000	5000	No, no, that's right.
11000	12000	Of course.
30000	49000	Can you hear me?
49000	55000	Most of you have heard about this notion of great thoughts time.
55000	62000	We were discussing it with what kind of at much ideas you have imposed a discipline on Friday afternoons after lunch.
62000	65000	You only think about great thoughts.
65000	76000	And I had the notion that I and also with you, I think great thoughts about the foundations of data interfaces.
76000	81000	And that radically rethinking the notion of logical interface to data.
81000	83000	Friday afternoon.
84000	86000	Thursday.
86000	96000	I'm not Richard hamming, so I need some kind of warm up thinking maybe some trivial thoughts, maybe mediocre thoughts as a kind of stretching exercise.
96000	98000	And so that's what this talk is.
98000	106000	I'm going to go over some projects which I think will will maybe give the notion of the goal of rethinking interfaces to data.
106000	109000	And that will prime the pump for not even for questions.
109000	111000	I won't be at peak.
111000	115000	Great thoughts time by question time, but maybe by tomorrow afternoon.
115000	117000	I'll be ready for great thoughts.
117000	123000	So first I have to explain what I mean by an interface to data because this is what I want to rethink.
123000	130000	Well, an interface to data in general is something you have a class of users and you want to restrict you have some source data.
130000	137000	And you want to restrict the kind of queries for that class of users that they can answer.
137000	139000	So I'll give some examples of this later.
139000	142000	This is not what we normally think of.
142000	145000	Maybe this is not even the best way to think of an interface.
145000	154000	You normally think of an interface as maybe a layer like an anthology layer where you have a different vocabulary, different data model or different API that users have.
154000	159000	But from the point of view of expressiveness, this is, I think, you know, one way to think of these interfaces.
159000	167000	The bottom line of whatever you give to users, restricted language, different data model is that there's a limit on what they can ask to the source data.
167000	172000	And you can begin to compare different interfaces this way.
172000	177000	You know, one person uses this vocabulary, one uses this data model, one uses this amount.
177000	188000	If you want to compare them, you'd compare based on what class of queries the user can extract, what information they can extract from the source database.
188000	194000	And we'll also look at this in the setting of multiple databases, autonomous distributed over the world.
194000	201000	Then an interface will be a restriction on what users can ask to the global database, the union of the sources.
201000	205000	But it will have to be compatible with this notion of autonomy.
205000	211000	It should be something that factors into an interface at each source.
211000	217000	So there'll be examples later, but the canonical example is traditional database views, say SQL views.
217000	223000	This is an interface at least based logically on making some derived data available.
223000	234000	So you say, well, here you, class of users, here's the stuff that you're able to see go wild with any query that you can do that only uses this data.
234000	235000	That's a traditional view database.
235000	237000	Abstractly, you can think of a view-based databases.
237000	244000	You have some function on the source instance or in the case of distributed views on the source instances.
244000	246000	And this function extracts some data.
246000	249000	That's the stuff that the user can see.
249000	255000	Any query that only uses that stuff or is answerable based on that stuff is the restriction on queries.
255000	259000	So I'll use some terminology in the distributed case.
259000	261000	I'll talk about distributed views.
261000	270000	A distributed view is just, and every local source, I have some derived data that I at least logically export from that local source.
270000	273000	Okay, so views can be in these arbitrary functions.
273000	279000	We'll be interested often in classes of views, like, say, CQ views.
279000	287000	CQ, a conjunctive query D view is at every local source, I have a conjunctive query over the atoms known to that source.
287000	293000	That's what that local data source is exploring.
293000	298000	So the idea of this great thought exercise is to try and go beyond views.
298000	301000	And lots of people have gone there before.
301000	305000	And you can begin to think of lots of mechanisms that have been proposed.
305000	307000	I mentioned some of them, access patterns.
307000	314000	This is another way of restricting what a class of users can see that's not derived data.
314000	321000	You say, okay, you need to give this value here to access this data from this functional API.
321000	323000	That's different from derived data.
323000	330000	And then, oh, so that's something that has been studied in the database literature Alan Nash and his colleagues, people at Stanford,
330000	333000	Chen Li and Edward Chang, Deutsche National Literature.
333000	338000	Views with access patterns is something that hasn't gotten that much study.
338000	344000	Nash, again, and his colleagues, Antoine and some colleagues at Telecom studied this.
344000	352000	You say you have logically some derived data, but you restrict access to traditional access methods, disciplines.
352000	356000	Various data exchange, virtual data integration mechanisms.
356000	359000	There's lots and lots of them in the history of databases.
359000	363000	These can be thought of from the point of view as trying to get beyond views.
363000	368000	There's an interesting formalism from Kautus, Deutsche, and Anose,
368000	372000	query specification, pattern language, something like that,
372000	377000	where you use a restriction and automaton running over the syntax tree.
377000	380000	And you say, here are a class of users.
380000	383000	Here are the things that you're allowed to see.
383000	384000	Here's a number of queries.
384000	385000	This is going beyond views.
385000	391000	They talk about this as exporting an infinite class of views.
391000	394000	And so this is the kind of thing I'd like to look at.
394000	398000	I mean, I'll talk about two projects, one from a couple of years ago with Per,
398000	404000	Lewis, Chiquet, and F.E.Somora, and another that's current work with Udy Roshovsky at Oxford,
404000	410000	that are in the space of how do we get mechanisms that go beyond views.
410000	415000	Okay, the first kind of mechanism, this first project,
415000	418000	it's based on the notion of minimally informative query answering.
418000	421000	The notion here is we specify a set of queries.
421000	423000	We call them in the paper utility queries.
423000	427000	These are the things that we want the user to answer.
427000	431000	But we don't want to give a mechanism that just says you can only ask these five queries.
431000	433000	We want something more robust.
433000	437000	So what we say is, well, let's give out the minimally informative traditional views
437000	439000	within a class that support these queries.
439000	441000	I'll give an example in this slide.
441000	445000	So here, this is something we've also discussed extensively at lunch.
445000	447000	Dodge tool versus science.
447000	451000	Computer science, conference centers, very theory friendly.
451000	457000	They both have programs with different participants.
457000	459000	Many people here have gone to both.
459000	463000	And they have both autonomous data stores that store names of participants,
463000	464000	which program, which year.
464000	468000	And they get together and they say, we're going to create an interface.
469000	473000	And we want our interfaces to support some queries that span the sources.
473000	479000	Like, are there researchers who are attending both programs in the same year?
479000	483000	You can write this as a conjunctive query over the union of the schemas.
483000	488000	So it's a join between Simons participants.
488000	490000	And we want a mechanism that will support this query,
490000	495000	but give out the minimal information among distributed views that will support this join.
496000	500000	So we have to formalize this notion of what it means to support a query
500000	502000	and what minimal information means.
502000	505000	And I've seen, I'm coming late to this program,
505000	510000	but I've seen that a recurrent theme in this program is information,
510000	515000	and information theory in Shannon, relative information.
515000	518000	We're not going to use any of that.
518000	524000	We're going to do something less quantitative
524000	527000	because one of the things I'd like to advertise,
527000	530000	it's Sugafan and Vianu's notion of determinacy.
530000	534000	Sometimes in some of Dan and Paris' papers,
534000	537000	they emphasize information theoretic determinacy.
537000	540000	So it has a similar feel.
540000	541000	What is determinacy?
541000	544000	You have a query and you have a bunch of views.
544000	546000	You say the query is determined by views.
546000	550000	If any database, two databases that agree on the view agree on the query.
550000	552000	Very simple definition.
552000	558000	Another way to think of this is that the query output is a function of the view output.
558000	563000	So we'll say that a distributed view supports a query if the query is determined by the view.
563000	567000	But the way you want to think of determinacy is information theoretically.
567000	572000	It says, well, these views contain all the information you need.
572000	576000	These views have more information than you have.
576000	581000	And the information theoretic notion is you don't care about the computation.
581000	586000	How complex it is to reconstruct Q from V1 through VT.
586000	588000	Who cares? V1 through VT.
588000	592000	Have enough information to answer Q.
592000	595000	And we'll formalize the notion that the views are minimally informative,
595000	598000	again, using Sugafan and Vianu's notion of determinacy.
598000	605000	We say a distributed view is minimally informative, supporting Q.
605000	610000	Within a class of queries, see if the view supports the query.
610000	614000	Using determinacy, Q is a function of the views.
614000	616000	The view has to be based on queries in C.
616000	620000	And any other distributed view, V prime, that uses queries from C,
620000	622000	it has more information.
622000	626000	That means that other view, V prime, determines each view in V.
626000	631000	So remember, the notion of determinacy, if V prime determines each view in V,
631000	635000	that somehow says V prime has more information than each view in V.
635000	637000	And so this is the natural way.
637000	642000	If you accept determinacy as the notion of information, capacity of a view,
642000	647000	this is the natural way to say that these views are minimal information.
647000	651000	So let's go to Simon's and Don's tool.
651000	656000	At least in our minds, go to Simon's and Don's tool.
656000	661000	They wanted to support this interface that supports this join
661000	664000	and give the minimal information that does this.
664000	669000	It's pretty obvious intuitively what the minimal information you need to support this query is.
669000	675000	You need to know Simon's needs to reveal the name and the year to support this join
675000	678000	because name and year are the join variables.
678000	680000	They cross the join.
680000	683000	Don's tool also has to reveal the name and year.
683000	688000	And so what Simon's should do is they should publish the projection on name and year.
688000	691000	And Don's tool should do the same.
691000	693000	Give the projection on name and year.
693000	695000	Intuitively, that's the minimal information.
695000	699000	And in our formalism using determinacy, that's the minimal information.
699000	703000	Does this make sense?
703000	707000	The minimal information is just true or false.
707000	712000	The answer to that query, it's a static notion.
712000	716000	This is not instance determinacy.
716000	719000	It's determinacy over all instances.
719000	724000	That back in our notion of determinacy, it's over all d1, d and d prime.
724000	725000	So it's a static.
725000	730000	It's a data independent notion.
730000	735000	So on a given instance, of course, I could say the answer is true or false and so on.
735000	739000	But the minimal information views are views that will have the minimal information
739000	744000	defined in terms of instance independent determinacy.
744000	746000	I can play the same game.
746000	747000	You give me your instance.
747000	752000	I'm going to compute the view, which is just the answer to your query.
752000	754000	These are autonomous data sources.
754000	757000	These views, the distributive views are views at each source.
757000	763000	So I can't go, Simon's is not allowed at data time, at query time, to go to Dogstool
763000	769000	and say, you know, tell me what's going on and then export the data.
769000	775000	This notion of distributive view says that each source has to do its own thing.
775000	776000	It makes a lot of sense.
776000	777000	Thank you.
777000	779000	Yeah, but if I may.
779000	784000	So I mean, it seems in this particular context, you want to be as respective as possible,
784000	785000	right?
785000	787000	So the instance level seems to be what you want to go into.
787000	791000	And it could be something like a zero-knowledge proof like thing that's in a protocol between
791000	793000	Simon's and Dogstool, right?
793000	794000	Yeah.
794000	797000	I talked, so the question about what happens.
797000	803000	So, okay, the first thing is, so of course, if you do instance dependent things here,
803000	807000	there's also some questions about these epistemic paradoxes.
807000	814000	You say, no, I can't answer your query, because that would be giving out too much information.
814000	820000	But, okay, so here there's a question about whether other mechanisms could do more than
820000	823000	these views, which is a question I'll get to.
823000	830000	Crypto people have looked at it, and actually, well, I've looked at it too in a couple of
830000	831000	slides.
831000	840000	So, okay, what's an example of our results?
840000	846000	I won't, of course, suggest completely address your question in a couple of slides, but maybe
846000	848000	it would be more clear.
848000	852000	So in this paper, one of the results says you take any utility query.
852000	857000	Not necessarily conjunct for an SQL arbitrary function on the global schema.
857000	860000	Then these minimum of informative devues exist.
860000	865000	I'll say a little bit more about what they look like in a few slides.
865000	872000	For CQ utility queries, they're expressible as traditional views in relational algebra.
872000	876000	And we show that the same holds in the presence of integrity constraints on each local source
876000	878000	like TGDs, EGDs.
878000	882000	So you always have these minimally informative things.
882000	889000	And sometimes they're expressible in relational algebra, but there are CQ utility views where
889000	893000	the minimally informative devues are not CQs themselves.
893000	896000	So in particular, you don't know, they're not always the obvious ones, like in the previous
896000	897000	example.
897000	902000	I may be able, if we have time, I can give an example.
902000	906000	We also look, within the class of CQ views, say you're committed that you're going to
906000	911000	use CQ views, basic SQL queries, set semantics.
911000	916000	There's, for CQ utility queries, you have minimally informative CQ views.
916000	918000	And these are almost the obvious ones.
918000	926000	After you minimize the utility query, they turn out to be the same as the obvious ones.
926000	929000	So I'll come back to this a little bit later.
929000	935000	But I wanted to say what we were doing in this paper, the perspective was to analyze the tradeoffs
935000	937000	in view design.
937000	941000	You look at questions of the form, are there distributed views that support this query,
941000	944000	but which do not reveal any information about this other query?
944000	946000	This is what we were interested here.
946000	950000	So back to Simon's and Dogstool, but making it a little bit more abstract.
950000	954000	Simon's has a binary relation R.
954000	957000	Schostockstuhl has S and T binary relations.
957000	961000	And I'm interested in supporting the intersection query.
961000	963000	Well, obviously I could support this.
963000	967000	I could design sources to answer Q.
967000	971000	Each source just exports its data, all of R, all of S, all of T.
971000	975000	But I want to know, well, is there some way to do this while keeping the query,
975000	977000	there exists XRXX private?
977000	982000	We analyze this for several notions of privacy, but one notion of privacy would be,
982000	989000	on no instance, shouldn't the attacker be, should the external party know whether there exists XRXX is true?
989000	994000	It's sort of a negative version of privacy that has been in the database theory literature.
994000	998000	I think it goes back to Mendelssohn as a student.
998000	1005000	So intuitively, any views that support Q must disclose P on some instance.
1005000	1010000	And okay, it's actually not so, this example with no integrity constraints is not so difficult,
1010000	1014000	but using the prior results, we can compute the minimal information views,
1014000	1017000	show that the minimal information views disclose this thing,
1017000	1021000	and therefore, nothing you can do that supports Q,
1021000	1026000	there's nothing you can do that can support Q, but make P a secret.
1026000	1028000	That's a simple case.
1028000	1036000	We also, well, we have several examples where the privacy utility query is less trivial.
1036000	1041000	Here's one of them, we look at the case where there's partial synchronization mechanisms.
1042000	1045000	We look mostly at replication as a synchronization mechanism.
1045000	1048000	Now Simons and Dogstall are not completely autonomous.
1048000	1056000	There's a relation S, the relation S that is in the query is replicated between Simons and Dogstall.
1056000	1058000	But nothing else, there's no other mechanism.
1058000	1063000	So obviously they need to communicate as data updates come in in order to do this.
1063000	1067000	And we have the same utility query, and now we ask the same question,
1067000	1073000	can we support this query while keeping this, there exists XRX private?
1073000	1079000	And the answer now turns out to be yes, there is an interface mechanism,
1079000	1084000	actually a view of a certain sort that can achieve this trade-off.
1084000	1089000	It can support Q while keeping P a secret.
1089000	1096000	So this is just meant like what were we trying to do and what kinds of results we have.
1096000	1101000	We actually have a general result about what you can do with certain kinds of replication
1101000	1106000	in managing these trade-offs between utility and secrecy.
1106000	1110000	So what is the moral I wanted to give?
1110000	1118000	Well, first, it's not really an answer, but it's my attempt at an answer.
1118000	1123000	We were getting at the idea of comparing the expressiveness of different interface mechanisms.
1123000	1130000	So in this case, what can you do with a CQ view versus what can you do with relational algebra views?
1130000	1132000	What can you do with arbitrary functions?
1132000	1137000	I thought this is something that is an interesting direction that I haven't seen much of.
1137000	1141000	And you can look at the same thing with more interactive method mechanism.
1141000	1145000	We didn't do it, but it was an obvious thing as well.
1145000	1151000	Suppose you have access methods, for instance, you can now, and now you can interactively ask multiple queries.
1151000	1154000	And then you achieve these other kinds of trade-offs.
1154000	1159000	And then the second thing I want to highlight is this notion of information theoretic determinacy,
1159000	1163000	the database theorists information theory.
1163000	1168000	This has been used certainly by a number of people.
1168000	1174000	Paris and Dan and other people at Washington used it in the pre-oppressing work.
1174000	1183000	I've used it in many papers, but quickly on information disclosure with Balder, Pierre, other people, also KR people at Oxford.
1183000	1186000	I think also Daniel Kieffer in some of his work.
1186000	1188000	Yes, yes.
1188000	1191000	But I don't think it's really been developed rigorously and uniformly.
1191000	1195000	Here you have some information lattice on views.
1195000	1200000	That's the idea actually in the pricing work and in our work.
1200000	1203000	And you can begin to explore this.
1204000	1213000	So I'll come back to this in a little bit, but I want to talk now a little bit about what's the idea of this other work about indistinguishability this year.
1213000	1215000	And it's motivated.
1215000	1221000	Okay, so first, an indistinguishability relation is just an equivalence relation on databases.
1221000	1227000	I say here are the two, here's the pairs of databases that are equivalent.
1227000	1230000	And this gives an interface.
1230000	1232000	Somebody is interacting with the database.
1232000	1234000	What is the queries they could answer?
1234000	1236000	Well, there's two possible semantics.
1236000	1246000	One is that they can answer any query using the certain answer semantics and the certain answer semantics would be, well, what they're really seeing is the entire equivalence class of this database.
1246000	1250000	And they get the intersection of the answers of the database.
1250000	1253000	There's another semantics which says, oh, it's the answerability semantics.
1253000	1259000	They can only ask queries where the answer is invariant under this equivalence relation.
1259000	1266000	So this would be more like what's called feasibility in access patterns or answerability in views.
1266000	1270000	So the main point is you have some way of specifying an equivalence relation.
1270000	1274000	I'll talk about some ways you could specify an equivalence relation that's giving you an interface.
1274000	1282000	And it's interesting in that it's a way of giving an interface that's different from what we're used to.
1282000	1285000	Okay, you can of course think of this as a view.
1285000	1293000	A view, I said from this general mathematical point of view, it's a function on the instance or the local instance that exports some stuff.
1293000	1297000	And you can say what I'm exporting is the equivalence class.
1297000	1299000	But of course, we're representing it differently.
1299000	1303000	Let's give you an example.
1303000	1309000	I can say G and G prime are indistinguishable if they have the same triangles.
1309000	1312000	So these are two graph databases.
1312000	1321000	I can say for all x1, x2, x3, they're a triangle in database G if and only if they're a triangle in G prime.
1321000	1325000	And this, that's an equivalence relation.
1325000	1328000	It's actually a first order indistinguishability relation.
1328000	1333000	It's given by a first order sentence in the language of two copies of the schema.
1333000	1337000	So it's first order, not in the sense of what we usually say.
1337000	1344000	Now, if you take a typical first order sentence in the language of two schemas, it's not going to define an equivalence relation.
1344000	1347000	This is a semantic property.
1347000	1356000	These things for all x1, x2, x3, and if and only if between G and G prime, that's going to be an equivalence relation, but other things are not.
1356000	1362000	So I'm interested in the first order sentences in two schemas that will do this.
1362000	1366000	And I can generalize whether triangle example is one of them.
1366000	1368000	You can give me any relational algebra views.
1368000	1372000	They give a first order indistinguishability relation, the same kind of thing.
1372000	1375000	Well, one database satisfies the views.
1375000	1383000	For every tuple in the union of the databases, it's in the view result in one if and only if it's the view result of the other.
1383000	1392000	I'm using this prime notation just like the G and G prime to say the prime copy of the database agrees with the unprime copy on this derived data.
1392000	1393000	Michael?
1393000	1394000	Yeah?
1394000	1397000	The universal quantifiers, are they quantifying over which domain?
1397000	1403000	They're quantifying over the union of the active domains.
1403000	1405000	So this came up in the prior work.
1405000	1411000	I said these minimally informative views exist for arbitrary utility queries.
1411000	1412000	How do they work?
1412000	1417000	Actually, the way we can present them is, as I said, indistinguishability relation.
1417000	1423000	Obviously, we can show that you can't always get, in very natural cases, you can't get relational algebra.
1423000	1427000	But you can always get this indistinguishability relation presentation.
1427000	1432000	Actually, I think a second order indistinguishability relation.
1432000	1435000	And then there was this example I talked about with replication.
1435000	1440000	I said, well, we could support Q without revealing P.
1440000	1441000	How did we do this?
1441000	1444000	We needed some interface mechanism beyond relational algebra views.
1444000	1447000	We could show that you couldn't use any generic query to do this.
1447000	1453000	But we define a simple indistinguishability relation that actually looks at the data values.
1453000	1456000	And we show that's the way you can achieve this trade-off.
1456000	1465000	So you can achieve certain trade-offs with indistinguishability that you can't achieve with traditional views.
1465000	1467000	Okay, this is a super general notion.
1467000	1473000	We studied this mostly over infinite structures, focusing on first order and infinitary logic.
1473000	1483000	There are a few results that I can mention that apply to the finite case, to finite models, to databases.
1483000	1487000	I said that traditional relational algebra views give a first order indistinguishability relation.
1487000	1492000	And you can ask, well, what are the other first order indistinguishability relations?
1492000	1499000	Well, nested relational calculus gives you another class of first order indistinguishability relations.
1499000	1504000	I don't want to explain what nested data is, a nested relational calculus, but I'll explain by example.
1504000	1511000	If I have a binary relation, rxy, I want to export all the adjacency sets of elements in my database.
1511000	1514000	This is a set of sets for every element.
1514000	1517000	I take the set of things that are adjacent to it.
1517000	1520000	And then I take the set of sets by varying the x.
1520000	1521000	Well, that's a set of sets.
1521000	1529000	I can say two databases agree on the set of sets in first order logic in this dual signature, the r and r prime signature.
1529000	1532000	For all x, there exists x prime.
1532000	1539000	For every node in one, there's a node in the other database whose adjacency set agrees.
1539000	1546000	So in general, okay, I can do sets of sets of sets in the same way.
1546000	1548000	That's the general idea of nested relational calculus.
1548000	1550000	I build up these sets of sets of sets.
1550000	1555000	You know, it's a different query language and agreement on a nested relational calculus query.
1555000	1564000	So let me jump since I'm running low on time to the open question here.
1564000	1568000	We have various results about this, but an intriguing open question is,
1568000	1574000	is every first order indistinguishability relation given by nested relational calculus?
1574000	1580000	We look at the infinite case where this is not true and we find lots of phenomenon that go beyond nested relational calculus.
1580000	1587000	And of course, we don't use the word nested relational calculus because it's geared towards a different audience.
1587000	1590000	This is a preservation question.
1590000	1593000	I have a first order sentence in the language of two schemas.
1593000	1595000	I impose some semantic property.
1595000	1599000	Here's a syntax, nested relational calculus views that enforces it.
1599000	1605000	I want to know if everything that has this semantic property is enforced by this text.
1605000	1612000	Okay, so first I'll say this indistinguishability, the bottom line, this indistinguishability relations.
1612000	1622000	They make the world of traditional views look very small because you can begin to see lots of other ways of creating interfaces that are beyond views.
1622000	1629000	And it gets at this issue that comes up often in descriptive complexity theory and descriptive set theory,
1629000	1633000	of going from an equivalence relation to a canonical representative.
1633000	1638000	For instance, if you look at various notions of elementary equivalence, like n variable equivalence,
1638000	1641000	you have a nicely described equivalence relation.
1641000	1646000	You want to know how efficient it is to export a representative of this equivalence relation.
1646000	1650000	You have a nice representation of sort of the dynamic notion.
1650000	1653000	You want to know, does that mean that there's a nice representative?
1653000	1657000	You can choose a representative concisely.
1657000	1663000	So I want to stop now with the great thoughts stuff, if you can give me a second to do it.
1663000	1668000	Okay, so I want to go back to great thoughts.
1668000	1671000	And the truth of it is, I saw Mulham's talk last week,
1671000	1677000	and he gave an overview of relational databases, and it led to some great pronouncement.
1677000	1682000	You know, relational AI is great by relational AI, and other profound thoughts.
1682000	1688000	And then I saw Joe's talk, and he overviewed relational databases for 15 years,
1688000	1691000	and he gave his own pronouncements.
1691000	1698000	Morals, I love Hasselt, and there's important problems with synchronization
1698000	1701000	that need to be studied, and deadline is great.
1701000	1704000	And I thought I should have a slide that talks about 15 years databases,
1704000	1707000	and then has some profound conclusion.
1707000	1713000	What I want to say is, well, in the first 40 years, this notion of logical interface,
1713000	1720000	expanding it, and notions of comparing interfaces, you find it relatively often in pods.
1720000	1726000	You know, Rick Hall did some various things about the notion of information capacity
1726000	1730000	that I find very interesting at the level of comparing schemas.
1730000	1734000	And then, of course, there's been a lot of work over 40 years
1734000	1738000	at looking at funky new ways of defining interfaces.
1738000	1742000	But in the last, I'd say, certainly five years, not so much.
1742000	1745000	So I think there is some need to look at this.
1745000	1749000	I wouldn't say, you know, looking at the work in this workshop,
1749000	1754000	I don't say that people should stop working on machine learning
1754000	1757000	and relational algebra like Zach is, and look about this.
1757000	1761000	A little bit maybe goes a long way, and maybe there was too much of this at one point.
1761000	1766000	But I think going back every few years and looking at this is a good thing to do.
1766000	1770000	Certainly, this work has been very influential outside of databases.
1770000	1771000	Thank you.
1771000	1797000	So we haven't looked in this. I think this model is just, you know,
1797000	1801000	I've shown this stuff to some people who work on privacy
1801000	1805000	say this is ridiculously restrictive, which I think is the right answer.
1805000	1810000	I mean, our notion that I showed you of keeping something secret
1810000	1814000	is on no instance should the attacker learn the database,
1814000	1818000	which is something that comes in the database theory literature.
1818000	1820000	Also, it's in the KR literature.
1820000	1826000	But of course, in the end, differential privacy is much weaker,
1827000	1830000	and in general, the reaction is, look, you know,
1830000	1834000	I don't care that there's some one database out there in the world.
1834000	1837000	It's mostly used for aggregated queries.
1837000	1843000	So if you have views like non-aggregated views, the notion is not obvious, but yeah.
1846000	1849000	Yeah, so first of all, very interesting.
1849000	1851000	So I got your framework and the results.
1851000	1852000	It was amazing.
1853000	1854000	Quick question.
1854000	1857000	I didn't get a chance to do justice to the distinguishly results,
1857000	1859000	but I can tell that it's not important.
1859000	1862000	But can you do justice to communication complexity?
1862000	1863000	Have you looked into this?
1863000	1867000	Yeah, I mean, this, so no, well, not really.
1867000	1870000	I mean, the proofs have a very similar feel to communication.
1870000	1873000	We're exploiting autonomy of this.
1873000	1878000	And you would think once we put in some interaction between the two sources,
1878000	1881000	we're in extreme case of communication complexity.
1881000	1884000	Because there's no communication between the sources at all.
1884000	1890000	Well, they both published something in common, so they can compute a few.
1890000	1892000	Maybe it's a one round, a half round.
1892000	1893000	I don't know.
1893000	1896000	They looked at all sorts of variations, which I'm not familiar with.
1896000	1897000	Yeah, I agree.
1897000	1899000	It's on my radar to look at.
1905000	1908000	So, like, I had a similar question before, right?
1909000	1913000	Like, yes, it's a differential privacy as a weaker model
1913000	1916000	because we only have probabilistic guarantees.
1916000	1920000	So, but your model is also in another way more expressive, right?
1920000	1922000	This indistinguishability in relation to autonomy.
1922000	1926000	Like, differential privacy is essentially like a very simple
1926000	1928000	in what sort of distinguishability we're like.
1928000	1930000	But there's still no probabilities involved,
1930000	1933000	even in the indistinguishability notion, right?
1933000	1934000	No, no, I know, right?
1934000	1938000	I mean, like, right, your model is not just stricter,
1938000	1943000	but also more expressive in what we consider to be indistinguishable, right?
1943000	1944000	Yeah.
1944000	1947000	But there's, I'm mangling two works, right?
1947000	1950000	So, on the one hand, you have this notion of privacy.
1950000	1951000	That's it.
1951000	1952000	Yeah.
1952000	1955000	On the other hand, we can be flexible about the view mechanisms
1955000	1959000	and look at these more powerful mechanisms, right?
1959000	1961000	So, that's true.
1961000	1964000	Some of it, I just want to make clear that some of this trade-off
1964000	1965000	is in two different works.
1965000	1966000	But go ahead.
1966000	1968000	Yes, I agree, right?
1968000	1971000	So, I know that indistinguishability was basically like a query,
1971000	1973000	like a trust with the privacy.
1973000	1974000	Yeah.
1974000	1979000	But it could also be, obviously, used for like a privacy mechanism.
1979000	1980000	Yeah.
1982000	1985000	I remember I said that I won't be ready for great thoughts
1985000	1990000	tomorrow afternoon, or possibly Monday, or maybe next week.
1990000	1991000	Yeah.
1991000	1994000	So, can you comment a bit about the complexity of computing
1994000	1998000	that is used, because the term is unsilable, right?
1998000	2000000	So, in the...
2000000	2003000	Well, rather than very easy, you can just compute that.
2003000	2004000	You can just...
2004000	2006000	So, in the case of CQ utility queries, you don't need to decide
2006000	2009000	the term as CQ, you can get these minimal information use,
2009000	2013000	and actually, in key time, you can create.
2013000	2015000	For other queries?
2015000	2018000	Well, for other queries, so, for other queries,
2018000	2020000	you don't actually know what the representation is.
2020000	2022000	So, Pierre, do you want to contradict this?
2022000	2024000	Minimization of the term.
2024000	2025000	Okay.
2025000	2026000	So, yeah.
2026000	2027000	So, actually...
2027000	2028000	So, if the...
2028000	2029000	If...
2029000	2030000	Well, okay.
2030000	2031000	So...
2031000	2032000	Well, I mean...
2032000	2033000	Okay.
2033000	2035000	So, you can get relational algebra views without doing minimum...
2035000	2036000	Minimization.
2036000	2037000	Pierre.
2037000	2038000	Yeah, but you...
2038000	2039000	If you want to get the CQ...
2039000	2042000	So, it depends what format you want the views in.
2042000	2043000	You can...
2043000	2044000	Yeah.
2046000	2047000	You do get the minimal one.
2047000	2049000	You just don't have it as a CQ.
2049000	2051000	So, it depends on what represent...
2051000	2054000	I mean, you know, if I've understood your comment correctly,
2054000	2055000	there's two results.
2055000	2057000	One, it says, okay, I...
2057000	2059000	I can get these relational algebra views.
2059000	2061000	And there, we use this...
2061000	2065000	This construction about getting these samples.
2065000	2067000	And I think you can do this in key time.
2067000	2068000	It's...
2068000	2069000	It is minimal information.
2069000	2070000	It's just...
2070000	2071000	If you want to...
2071000	2073000	There's another result that says I can get CQ views,
2073000	2075000	and there I need to minimize the global word,
2075000	2077000	which, yes, Pierre said, is expensive.
2077000	2080000	But then, after you get these minimal views,
2080000	2083000	you have to see whether you can do disclosure.
2083000	2088000	And there, we have some results on this for the case
2088000	2090000	without constraints.
2090000	2092000	We know how to do it.
2092000	2094000	I mean, we know there you just look at the minimal...
2094000	2095000	At the...
2095000	2096000	At this canonical...
2096000	2099000	The canonical instance.
2099000	2101000	And then with constraints,
2101000	2104000	I don't remember whether we have complexity.
2104000	2105000	Yes, yeah.
2105000	2107000	We have some abstracting constraints.
2107000	2109000	Like guarded constraints.
2109000	2111000	If you got a little bit of...
