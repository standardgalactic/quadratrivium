{"text": " Oh, there was one that your colleague helped me with earlier, it's now gone. No, no, that's right. Of course. Can you hear me? Most of you have heard about this notion of great thoughts time. We were discussing it with what kind of at much ideas you have imposed a discipline on Friday afternoons after lunch. You only think about great thoughts. And I had the notion that I and also with you, I think great thoughts about the foundations of data interfaces. And that radically rethinking the notion of logical interface to data. Friday afternoon. Thursday. I'm not Richard hamming, so I need some kind of warm up thinking maybe some trivial thoughts, maybe mediocre thoughts as a kind of stretching exercise. And so that's what this talk is. I'm going to go over some projects which I think will will maybe give the notion of the goal of rethinking interfaces to data. And that will prime the pump for not even for questions. I won't be at peak. Great thoughts time by question time, but maybe by tomorrow afternoon. I'll be ready for great thoughts. So first I have to explain what I mean by an interface to data because this is what I want to rethink. Well, an interface to data in general is something you have a class of users and you want to restrict you have some source data. And you want to restrict the kind of queries for that class of users that they can answer. So I'll give some examples of this later. This is not what we normally think of. Maybe this is not even the best way to think of an interface. You normally think of an interface as maybe a layer like an anthology layer where you have a different vocabulary, different data model or different API that users have. But from the point of view of expressiveness, this is, I think, you know, one way to think of these interfaces. The bottom line of whatever you give to users, restricted language, different data model is that there's a limit on what they can ask to the source data. And you can begin to compare different interfaces this way. You know, one person uses this vocabulary, one uses this data model, one uses this amount. If you want to compare them, you'd compare based on what class of queries the user can extract, what information they can extract from the source database. And we'll also look at this in the setting of multiple databases, autonomous distributed over the world. Then an interface will be a restriction on what users can ask to the global database, the union of the sources. But it will have to be compatible with this notion of autonomy. It should be something that factors into an interface at each source. So there'll be examples later, but the canonical example is traditional database views, say SQL views. This is an interface at least based logically on making some derived data available. So you say, well, here you, class of users, here's the stuff that you're able to see go wild with any query that you can do that only uses this data. That's a traditional view database. Abstractly, you can think of a view-based databases. You have some function on the source instance or in the case of distributed views on the source instances. And this function extracts some data. That's the stuff that the user can see. Any query that only uses that stuff or is answerable based on that stuff is the restriction on queries. So I'll use some terminology in the distributed case. I'll talk about distributed views. A distributed view is just, and every local source, I have some derived data that I at least logically export from that local source. Okay, so views can be in these arbitrary functions. We'll be interested often in classes of views, like, say, CQ views. CQ, a conjunctive query D view is at every local source, I have a conjunctive query over the atoms known to that source. That's what that local data source is exploring. So the idea of this great thought exercise is to try and go beyond views. And lots of people have gone there before. And you can begin to think of lots of mechanisms that have been proposed. I mentioned some of them, access patterns. This is another way of restricting what a class of users can see that's not derived data. You say, okay, you need to give this value here to access this data from this functional API. That's different from derived data. And then, oh, so that's something that has been studied in the database literature Alan Nash and his colleagues, people at Stanford, Chen Li and Edward Chang, Deutsche National Literature. Views with access patterns is something that hasn't gotten that much study. Nash, again, and his colleagues, Antoine and some colleagues at Telecom studied this. You say you have logically some derived data, but you restrict access to traditional access methods, disciplines. Various data exchange, virtual data integration mechanisms. There's lots and lots of them in the history of databases. These can be thought of from the point of view as trying to get beyond views. There's an interesting formalism from Kautus, Deutsche, and Anose, query specification, pattern language, something like that, where you use a restriction and automaton running over the syntax tree. And you say, here are a class of users. Here are the things that you're allowed to see. Here's a number of queries. This is going beyond views. They talk about this as exporting an infinite class of views. And so this is the kind of thing I'd like to look at. I mean, I'll talk about two projects, one from a couple of years ago with Per, Lewis, Chiquet, and F.E.Somora, and another that's current work with Udy Roshovsky at Oxford, that are in the space of how do we get mechanisms that go beyond views. Okay, the first kind of mechanism, this first project, it's based on the notion of minimally informative query answering. The notion here is we specify a set of queries. We call them in the paper utility queries. These are the things that we want the user to answer. But we don't want to give a mechanism that just says you can only ask these five queries. We want something more robust. So what we say is, well, let's give out the minimally informative traditional views within a class that support these queries. I'll give an example in this slide. So here, this is something we've also discussed extensively at lunch. Dodge tool versus science. Computer science, conference centers, very theory friendly. They both have programs with different participants. Many people here have gone to both. And they have both autonomous data stores that store names of participants, which program, which year. And they get together and they say, we're going to create an interface. And we want our interfaces to support some queries that span the sources. Like, are there researchers who are attending both programs in the same year? You can write this as a conjunctive query over the union of the schemas. So it's a join between Simons participants. And we want a mechanism that will support this query, but give out the minimal information among distributed views that will support this join. So we have to formalize this notion of what it means to support a query and what minimal information means. And I've seen, I'm coming late to this program, but I've seen that a recurrent theme in this program is information, and information theory in Shannon, relative information. We're not going to use any of that. We're going to do something less quantitative because one of the things I'd like to advertise, it's Sugafan and Vianu's notion of determinacy. Sometimes in some of Dan and Paris' papers, they emphasize information theoretic determinacy. So it has a similar feel. What is determinacy? You have a query and you have a bunch of views. You say the query is determined by views. If any database, two databases that agree on the view agree on the query. Very simple definition. Another way to think of this is that the query output is a function of the view output. So we'll say that a distributed view supports a query if the query is determined by the view. But the way you want to think of determinacy is information theoretically. It says, well, these views contain all the information you need. These views have more information than you have. And the information theoretic notion is you don't care about the computation. How complex it is to reconstruct Q from V1 through VT. Who cares? V1 through VT. Have enough information to answer Q. And we'll formalize the notion that the views are minimally informative, again, using Sugafan and Vianu's notion of determinacy. We say a distributed view is minimally informative, supporting Q. Within a class of queries, see if the view supports the query. Using determinacy, Q is a function of the views. The view has to be based on queries in C. And any other distributed view, V prime, that uses queries from C, it has more information. That means that other view, V prime, determines each view in V. So remember, the notion of determinacy, if V prime determines each view in V, that somehow says V prime has more information than each view in V. And so this is the natural way. If you accept determinacy as the notion of information, capacity of a view, this is the natural way to say that these views are minimal information. So let's go to Simon's and Don's tool. At least in our minds, go to Simon's and Don's tool. They wanted to support this interface that supports this join and give the minimal information that does this. It's pretty obvious intuitively what the minimal information you need to support this query is. You need to know Simon's needs to reveal the name and the year to support this join because name and year are the join variables. They cross the join. Don's tool also has to reveal the name and year. And so what Simon's should do is they should publish the projection on name and year. And Don's tool should do the same. Give the projection on name and year. Intuitively, that's the minimal information. And in our formalism using determinacy, that's the minimal information. Does this make sense? The minimal information is just true or false. The answer to that query, it's a static notion. This is not instance determinacy. It's determinacy over all instances. That back in our notion of determinacy, it's over all d1, d and d prime. So it's a static. It's a data independent notion. So on a given instance, of course, I could say the answer is true or false and so on. But the minimal information views are views that will have the minimal information defined in terms of instance independent determinacy. I can play the same game. You give me your instance. I'm going to compute the view, which is just the answer to your query. These are autonomous data sources. These views, the distributive views are views at each source. So I can't go, Simon's is not allowed at data time, at query time, to go to Dogstool and say, you know, tell me what's going on and then export the data. This notion of distributive view says that each source has to do its own thing. It makes a lot of sense. Thank you. Yeah, but if I may. So I mean, it seems in this particular context, you want to be as respective as possible, right? So the instance level seems to be what you want to go into. And it could be something like a zero-knowledge proof like thing that's in a protocol between Simon's and Dogstool, right? Yeah. I talked, so the question about what happens. So, okay, the first thing is, so of course, if you do instance dependent things here, there's also some questions about these epistemic paradoxes. You say, no, I can't answer your query, because that would be giving out too much information. But, okay, so here there's a question about whether other mechanisms could do more than these views, which is a question I'll get to. Crypto people have looked at it, and actually, well, I've looked at it too in a couple of slides. So, okay, what's an example of our results? I won't, of course, suggest completely address your question in a couple of slides, but maybe it would be more clear. So in this paper, one of the results says you take any utility query. Not necessarily conjunct for an SQL arbitrary function on the global schema. Then these minimum of informative devues exist. I'll say a little bit more about what they look like in a few slides. For CQ utility queries, they're expressible as traditional views in relational algebra. And we show that the same holds in the presence of integrity constraints on each local source like TGDs, EGDs. So you always have these minimally informative things. And sometimes they're expressible in relational algebra, but there are CQ utility views where the minimally informative devues are not CQs themselves. So in particular, you don't know, they're not always the obvious ones, like in the previous example. I may be able, if we have time, I can give an example. We also look, within the class of CQ views, say you're committed that you're going to use CQ views, basic SQL queries, set semantics. There's, for CQ utility queries, you have minimally informative CQ views. And these are almost the obvious ones. After you minimize the utility query, they turn out to be the same as the obvious ones. So I'll come back to this a little bit later. But I wanted to say what we were doing in this paper, the perspective was to analyze the tradeoffs in view design. You look at questions of the form, are there distributed views that support this query, but which do not reveal any information about this other query? This is what we were interested here. So back to Simon's and Dogstool, but making it a little bit more abstract. Simon's has a binary relation R. Schostockstuhl has S and T binary relations. And I'm interested in supporting the intersection query. Well, obviously I could support this. I could design sources to answer Q. Each source just exports its data, all of R, all of S, all of T. But I want to know, well, is there some way to do this while keeping the query, there exists XRXX private? We analyze this for several notions of privacy, but one notion of privacy would be, on no instance, shouldn't the attacker be, should the external party know whether there exists XRXX is true? It's sort of a negative version of privacy that has been in the database theory literature. I think it goes back to Mendelssohn as a student. So intuitively, any views that support Q must disclose P on some instance. And okay, it's actually not so, this example with no integrity constraints is not so difficult, but using the prior results, we can compute the minimal information views, show that the minimal information views disclose this thing, and therefore, nothing you can do that supports Q, there's nothing you can do that can support Q, but make P a secret. That's a simple case. We also, well, we have several examples where the privacy utility query is less trivial. Here's one of them, we look at the case where there's partial synchronization mechanisms. We look mostly at replication as a synchronization mechanism. Now Simons and Dogstall are not completely autonomous. There's a relation S, the relation S that is in the query is replicated between Simons and Dogstall. But nothing else, there's no other mechanism. So obviously they need to communicate as data updates come in in order to do this. And we have the same utility query, and now we ask the same question, can we support this query while keeping this, there exists XRX private? And the answer now turns out to be yes, there is an interface mechanism, actually a view of a certain sort that can achieve this trade-off. It can support Q while keeping P a secret. So this is just meant like what were we trying to do and what kinds of results we have. We actually have a general result about what you can do with certain kinds of replication in managing these trade-offs between utility and secrecy. So what is the moral I wanted to give? Well, first, it's not really an answer, but it's my attempt at an answer. We were getting at the idea of comparing the expressiveness of different interface mechanisms. So in this case, what can you do with a CQ view versus what can you do with relational algebra views? What can you do with arbitrary functions? I thought this is something that is an interesting direction that I haven't seen much of. And you can look at the same thing with more interactive method mechanism. We didn't do it, but it was an obvious thing as well. Suppose you have access methods, for instance, you can now, and now you can interactively ask multiple queries. And then you achieve these other kinds of trade-offs. And then the second thing I want to highlight is this notion of information theoretic determinacy, the database theorists information theory. This has been used certainly by a number of people. Paris and Dan and other people at Washington used it in the pre-oppressing work. I've used it in many papers, but quickly on information disclosure with Balder, Pierre, other people, also KR people at Oxford. I think also Daniel Kieffer in some of his work. Yes, yes. But I don't think it's really been developed rigorously and uniformly. Here you have some information lattice on views. That's the idea actually in the pricing work and in our work. And you can begin to explore this. So I'll come back to this in a little bit, but I want to talk now a little bit about what's the idea of this other work about indistinguishability this year. And it's motivated. Okay, so first, an indistinguishability relation is just an equivalence relation on databases. I say here are the two, here's the pairs of databases that are equivalent. And this gives an interface. Somebody is interacting with the database. What is the queries they could answer? Well, there's two possible semantics. One is that they can answer any query using the certain answer semantics and the certain answer semantics would be, well, what they're really seeing is the entire equivalence class of this database. And they get the intersection of the answers of the database. There's another semantics which says, oh, it's the answerability semantics. They can only ask queries where the answer is invariant under this equivalence relation. So this would be more like what's called feasibility in access patterns or answerability in views. So the main point is you have some way of specifying an equivalence relation. I'll talk about some ways you could specify an equivalence relation that's giving you an interface. And it's interesting in that it's a way of giving an interface that's different from what we're used to. Okay, you can of course think of this as a view. A view, I said from this general mathematical point of view, it's a function on the instance or the local instance that exports some stuff. And you can say what I'm exporting is the equivalence class. But of course, we're representing it differently. Let's give you an example. I can say G and G prime are indistinguishable if they have the same triangles. So these are two graph databases. I can say for all x1, x2, x3, they're a triangle in database G if and only if they're a triangle in G prime. And this, that's an equivalence relation. It's actually a first order indistinguishability relation. It's given by a first order sentence in the language of two copies of the schema. So it's first order, not in the sense of what we usually say. Now, if you take a typical first order sentence in the language of two schemas, it's not going to define an equivalence relation. This is a semantic property. These things for all x1, x2, x3, and if and only if between G and G prime, that's going to be an equivalence relation, but other things are not. So I'm interested in the first order sentences in two schemas that will do this. And I can generalize whether triangle example is one of them. You can give me any relational algebra views. They give a first order indistinguishability relation, the same kind of thing. Well, one database satisfies the views. For every tuple in the union of the databases, it's in the view result in one if and only if it's the view result of the other. I'm using this prime notation just like the G and G prime to say the prime copy of the database agrees with the unprime copy on this derived data. Michael? Yeah? The universal quantifiers, are they quantifying over which domain? They're quantifying over the union of the active domains. So this came up in the prior work. I said these minimally informative views exist for arbitrary utility queries. How do they work? Actually, the way we can present them is, as I said, indistinguishability relation. Obviously, we can show that you can't always get, in very natural cases, you can't get relational algebra. But you can always get this indistinguishability relation presentation. Actually, I think a second order indistinguishability relation. And then there was this example I talked about with replication. I said, well, we could support Q without revealing P. How did we do this? We needed some interface mechanism beyond relational algebra views. We could show that you couldn't use any generic query to do this. But we define a simple indistinguishability relation that actually looks at the data values. And we show that's the way you can achieve this trade-off. So you can achieve certain trade-offs with indistinguishability that you can't achieve with traditional views. Okay, this is a super general notion. We studied this mostly over infinite structures, focusing on first order and infinitary logic. There are a few results that I can mention that apply to the finite case, to finite models, to databases. I said that traditional relational algebra views give a first order indistinguishability relation. And you can ask, well, what are the other first order indistinguishability relations? Well, nested relational calculus gives you another class of first order indistinguishability relations. I don't want to explain what nested data is, a nested relational calculus, but I'll explain by example. If I have a binary relation, rxy, I want to export all the adjacency sets of elements in my database. This is a set of sets for every element. I take the set of things that are adjacent to it. And then I take the set of sets by varying the x. Well, that's a set of sets. I can say two databases agree on the set of sets in first order logic in this dual signature, the r and r prime signature. For all x, there exists x prime. For every node in one, there's a node in the other database whose adjacency set agrees. So in general, okay, I can do sets of sets of sets in the same way. That's the general idea of nested relational calculus. I build up these sets of sets of sets. You know, it's a different query language and agreement on a nested relational calculus query. So let me jump since I'm running low on time to the open question here. We have various results about this, but an intriguing open question is, is every first order indistinguishability relation given by nested relational calculus? We look at the infinite case where this is not true and we find lots of phenomenon that go beyond nested relational calculus. And of course, we don't use the word nested relational calculus because it's geared towards a different audience. This is a preservation question. I have a first order sentence in the language of two schemas. I impose some semantic property. Here's a syntax, nested relational calculus views that enforces it. I want to know if everything that has this semantic property is enforced by this text. Okay, so first I'll say this indistinguishability, the bottom line, this indistinguishability relations. They make the world of traditional views look very small because you can begin to see lots of other ways of creating interfaces that are beyond views. And it gets at this issue that comes up often in descriptive complexity theory and descriptive set theory, of going from an equivalence relation to a canonical representative. For instance, if you look at various notions of elementary equivalence, like n variable equivalence, you have a nicely described equivalence relation. You want to know how efficient it is to export a representative of this equivalence relation. You have a nice representation of sort of the dynamic notion. You want to know, does that mean that there's a nice representative? You can choose a representative concisely. So I want to stop now with the great thoughts stuff, if you can give me a second to do it. Okay, so I want to go back to great thoughts. And the truth of it is, I saw Mulham's talk last week, and he gave an overview of relational databases, and it led to some great pronouncement. You know, relational AI is great by relational AI, and other profound thoughts. And then I saw Joe's talk, and he overviewed relational databases for 15 years, and he gave his own pronouncements. Morals, I love Hasselt, and there's important problems with synchronization that need to be studied, and deadline is great. And I thought I should have a slide that talks about 15 years databases, and then has some profound conclusion. What I want to say is, well, in the first 40 years, this notion of logical interface, expanding it, and notions of comparing interfaces, you find it relatively often in pods. You know, Rick Hall did some various things about the notion of information capacity that I find very interesting at the level of comparing schemas. And then, of course, there's been a lot of work over 40 years at looking at funky new ways of defining interfaces. But in the last, I'd say, certainly five years, not so much. So I think there is some need to look at this. I wouldn't say, you know, looking at the work in this workshop, I don't say that people should stop working on machine learning and relational algebra like Zach is, and look about this. A little bit maybe goes a long way, and maybe there was too much of this at one point. But I think going back every few years and looking at this is a good thing to do. Certainly, this work has been very influential outside of databases. Thank you. So we haven't looked in this. I think this model is just, you know, I've shown this stuff to some people who work on privacy say this is ridiculously restrictive, which I think is the right answer. I mean, our notion that I showed you of keeping something secret is on no instance should the attacker learn the database, which is something that comes in the database theory literature. Also, it's in the KR literature. But of course, in the end, differential privacy is much weaker, and in general, the reaction is, look, you know, I don't care that there's some one database out there in the world. It's mostly used for aggregated queries. So if you have views like non-aggregated views, the notion is not obvious, but yeah. Yeah, so first of all, very interesting. So I got your framework and the results. It was amazing. Quick question. I didn't get a chance to do justice to the distinguishly results, but I can tell that it's not important. But can you do justice to communication complexity? Have you looked into this? Yeah, I mean, this, so no, well, not really. I mean, the proofs have a very similar feel to communication. We're exploiting autonomy of this. And you would think once we put in some interaction between the two sources, we're in extreme case of communication complexity. Because there's no communication between the sources at all. Well, they both published something in common, so they can compute a few. Maybe it's a one round, a half round. I don't know. They looked at all sorts of variations, which I'm not familiar with. Yeah, I agree. It's on my radar to look at. So, like, I had a similar question before, right? Like, yes, it's a differential privacy as a weaker model because we only have probabilistic guarantees. So, but your model is also in another way more expressive, right? This indistinguishability in relation to autonomy. Like, differential privacy is essentially like a very simple in what sort of distinguishability we're like. But there's still no probabilities involved, even in the indistinguishability notion, right? No, no, I know, right? I mean, like, right, your model is not just stricter, but also more expressive in what we consider to be indistinguishable, right? Yeah. But there's, I'm mangling two works, right? So, on the one hand, you have this notion of privacy. That's it. Yeah. On the other hand, we can be flexible about the view mechanisms and look at these more powerful mechanisms, right? So, that's true. Some of it, I just want to make clear that some of this trade-off is in two different works. But go ahead. Yes, I agree, right? So, I know that indistinguishability was basically like a query, like a trust with the privacy. Yeah. But it could also be, obviously, used for like a privacy mechanism. Yeah. I remember I said that I won't be ready for great thoughts tomorrow afternoon, or possibly Monday, or maybe next week. Yeah. So, can you comment a bit about the complexity of computing that is used, because the term is unsilable, right? So, in the... Well, rather than very easy, you can just compute that. You can just... So, in the case of CQ utility queries, you don't need to decide the term as CQ, you can get these minimal information use, and actually, in key time, you can create. For other queries? Well, for other queries, so, for other queries, you don't actually know what the representation is. So, Pierre, do you want to contradict this? Minimization of the term. Okay. So, yeah. So, actually... So, if the... If... Well, okay. So... Well, I mean... Okay. So, you can get relational algebra views without doing minimum... Minimization. Pierre. Yeah, but you... If you want to get the CQ... So, it depends what format you want the views in. You can... Yeah. You do get the minimal one. You just don't have it as a CQ. So, it depends on what represent... I mean, you know, if I've understood your comment correctly, there's two results. One, it says, okay, I... I can get these relational algebra views. And there, we use this... This construction about getting these samples. And I think you can do this in key time. It's... It is minimal information. It's just... If you want to... There's another result that says I can get CQ views, and there I need to minimize the global word, which, yes, Pierre said, is expensive. But then, after you get these minimal views, you have to see whether you can do disclosure. And there, we have some results on this for the case without constraints. We know how to do it. I mean, we know there you just look at the minimal... At the... At this canonical... The canonical instance. And then with constraints, I don't remember whether we have complexity. Yes, yeah. We have some abstracting constraints. Like guarded constraints. If you got a little bit of...", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.0, "text": " Oh, there was one that your colleague helped me with earlier, it's now gone.", "tokens": [50364, 876, 11, 456, 390, 472, 300, 428, 13532, 4254, 385, 365, 3071, 11, 309, 311, 586, 2780, 13, 50564], "temperature": 0.0, "avg_logprob": -0.4495285352071126, "compression_ratio": 1.1473684210526316, "no_speech_prob": 0.18675658106803894}, {"id": 1, "seek": 0, "start": 4.0, "end": 5.0, "text": " No, no, that's right.", "tokens": [50564, 883, 11, 572, 11, 300, 311, 558, 13, 50614], "temperature": 0.0, "avg_logprob": -0.4495285352071126, "compression_ratio": 1.1473684210526316, "no_speech_prob": 0.18675658106803894}, {"id": 2, "seek": 0, "start": 11.0, "end": 12.0, "text": " Of course.", "tokens": [50914, 2720, 1164, 13, 50964], "temperature": 0.0, "avg_logprob": -0.4495285352071126, "compression_ratio": 1.1473684210526316, "no_speech_prob": 0.18675658106803894}, {"id": 3, "seek": 3000, "start": 30.0, "end": 49.0, "text": " Can you hear me?", "tokens": [50364, 1664, 291, 1568, 385, 30, 51314], "temperature": 0.0, "avg_logprob": -0.28051644563674927, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.05153748020529747}, {"id": 4, "seek": 3000, "start": 49.0, "end": 55.0, "text": " Most of you have heard about this notion of great thoughts time.", "tokens": [51314, 4534, 295, 291, 362, 2198, 466, 341, 10710, 295, 869, 4598, 565, 13, 51614], "temperature": 0.0, "avg_logprob": -0.28051644563674927, "compression_ratio": 1.0657894736842106, "no_speech_prob": 0.05153748020529747}, {"id": 5, "seek": 5500, "start": 55.0, "end": 62.0, "text": " We were discussing it with what kind of at much ideas you have imposed a discipline on Friday afternoons after lunch.", "tokens": [50364, 492, 645, 10850, 309, 365, 437, 733, 295, 412, 709, 3487, 291, 362, 26491, 257, 13635, 322, 6984, 934, 1771, 892, 934, 6349, 13, 50714], "temperature": 0.0, "avg_logprob": -0.24997676291116855, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.054830409586429596}, {"id": 6, "seek": 5500, "start": 62.0, "end": 65.0, "text": " You only think about great thoughts.", "tokens": [50714, 509, 787, 519, 466, 869, 4598, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24997676291116855, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.054830409586429596}, {"id": 7, "seek": 5500, "start": 65.0, "end": 76.0, "text": " And I had the notion that I and also with you, I think great thoughts about the foundations of data interfaces.", "tokens": [50864, 400, 286, 632, 264, 10710, 300, 286, 293, 611, 365, 291, 11, 286, 519, 869, 4598, 466, 264, 22467, 295, 1412, 28416, 13, 51414], "temperature": 0.0, "avg_logprob": -0.24997676291116855, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.054830409586429596}, {"id": 8, "seek": 5500, "start": 76.0, "end": 81.0, "text": " And that radically rethinking the notion of logical interface to data.", "tokens": [51414, 400, 300, 35508, 319, 39873, 264, 10710, 295, 14978, 9226, 281, 1412, 13, 51664], "temperature": 0.0, "avg_logprob": -0.24997676291116855, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.054830409586429596}, {"id": 9, "seek": 5500, "start": 81.0, "end": 83.0, "text": " Friday afternoon.", "tokens": [51664, 6984, 6499, 13, 51764], "temperature": 0.0, "avg_logprob": -0.24997676291116855, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.054830409586429596}, {"id": 10, "seek": 8300, "start": 84.0, "end": 86.0, "text": " Thursday.", "tokens": [50414, 10383, 13, 50514], "temperature": 0.0, "avg_logprob": -0.16706238517278357, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.012810732237994671}, {"id": 11, "seek": 8300, "start": 86.0, "end": 96.0, "text": " I'm not Richard hamming, so I need some kind of warm up thinking maybe some trivial thoughts, maybe mediocre thoughts as a kind of stretching exercise.", "tokens": [50514, 286, 478, 406, 9809, 36600, 278, 11, 370, 286, 643, 512, 733, 295, 4561, 493, 1953, 1310, 512, 26703, 4598, 11, 1310, 45415, 4598, 382, 257, 733, 295, 19632, 5380, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16706238517278357, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.012810732237994671}, {"id": 12, "seek": 8300, "start": 96.0, "end": 98.0, "text": " And so that's what this talk is.", "tokens": [51014, 400, 370, 300, 311, 437, 341, 751, 307, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16706238517278357, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.012810732237994671}, {"id": 13, "seek": 8300, "start": 98.0, "end": 106.0, "text": " I'm going to go over some projects which I think will will maybe give the notion of the goal of rethinking interfaces to data.", "tokens": [51114, 286, 478, 516, 281, 352, 670, 512, 4455, 597, 286, 519, 486, 486, 1310, 976, 264, 10710, 295, 264, 3387, 295, 319, 39873, 28416, 281, 1412, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16706238517278357, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.012810732237994671}, {"id": 14, "seek": 10600, "start": 106.0, "end": 109.0, "text": " And that will prime the pump for not even for questions.", "tokens": [50364, 400, 300, 486, 5835, 264, 5889, 337, 406, 754, 337, 1651, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10982777522160457, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.01882806420326233}, {"id": 15, "seek": 10600, "start": 109.0, "end": 111.0, "text": " I won't be at peak.", "tokens": [50514, 286, 1582, 380, 312, 412, 10651, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10982777522160457, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.01882806420326233}, {"id": 16, "seek": 10600, "start": 111.0, "end": 115.0, "text": " Great thoughts time by question time, but maybe by tomorrow afternoon.", "tokens": [50614, 3769, 4598, 565, 538, 1168, 565, 11, 457, 1310, 538, 4153, 6499, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10982777522160457, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.01882806420326233}, {"id": 17, "seek": 10600, "start": 115.0, "end": 117.0, "text": " I'll be ready for great thoughts.", "tokens": [50814, 286, 603, 312, 1919, 337, 869, 4598, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10982777522160457, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.01882806420326233}, {"id": 18, "seek": 10600, "start": 117.0, "end": 123.0, "text": " So first I have to explain what I mean by an interface to data because this is what I want to rethink.", "tokens": [50914, 407, 700, 286, 362, 281, 2903, 437, 286, 914, 538, 364, 9226, 281, 1412, 570, 341, 307, 437, 286, 528, 281, 34595, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10982777522160457, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.01882806420326233}, {"id": 19, "seek": 10600, "start": 123.0, "end": 130.0, "text": " Well, an interface to data in general is something you have a class of users and you want to restrict you have some source data.", "tokens": [51214, 1042, 11, 364, 9226, 281, 1412, 294, 2674, 307, 746, 291, 362, 257, 1508, 295, 5022, 293, 291, 528, 281, 7694, 291, 362, 512, 4009, 1412, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10982777522160457, "compression_ratio": 1.7136929460580912, "no_speech_prob": 0.01882806420326233}, {"id": 20, "seek": 13000, "start": 130.0, "end": 137.0, "text": " And you want to restrict the kind of queries for that class of users that they can answer.", "tokens": [50364, 400, 291, 528, 281, 7694, 264, 733, 295, 24109, 337, 300, 1508, 295, 5022, 300, 436, 393, 1867, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09390441131591797, "compression_ratio": 1.7944250871080138, "no_speech_prob": 0.0031723403371870518}, {"id": 21, "seek": 13000, "start": 137.0, "end": 139.0, "text": " So I'll give some examples of this later.", "tokens": [50714, 407, 286, 603, 976, 512, 5110, 295, 341, 1780, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09390441131591797, "compression_ratio": 1.7944250871080138, "no_speech_prob": 0.0031723403371870518}, {"id": 22, "seek": 13000, "start": 139.0, "end": 142.0, "text": " This is not what we normally think of.", "tokens": [50814, 639, 307, 406, 437, 321, 5646, 519, 295, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09390441131591797, "compression_ratio": 1.7944250871080138, "no_speech_prob": 0.0031723403371870518}, {"id": 23, "seek": 13000, "start": 142.0, "end": 145.0, "text": " Maybe this is not even the best way to think of an interface.", "tokens": [50964, 2704, 341, 307, 406, 754, 264, 1151, 636, 281, 519, 295, 364, 9226, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09390441131591797, "compression_ratio": 1.7944250871080138, "no_speech_prob": 0.0031723403371870518}, {"id": 24, "seek": 13000, "start": 145.0, "end": 154.0, "text": " You normally think of an interface as maybe a layer like an anthology layer where you have a different vocabulary, different data model or different API that users have.", "tokens": [51114, 509, 5646, 519, 295, 364, 9226, 382, 1310, 257, 4583, 411, 364, 25820, 1793, 4583, 689, 291, 362, 257, 819, 19864, 11, 819, 1412, 2316, 420, 819, 9362, 300, 5022, 362, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09390441131591797, "compression_ratio": 1.7944250871080138, "no_speech_prob": 0.0031723403371870518}, {"id": 25, "seek": 13000, "start": 154.0, "end": 159.0, "text": " But from the point of view of expressiveness, this is, I think, you know, one way to think of these interfaces.", "tokens": [51564, 583, 490, 264, 935, 295, 1910, 295, 5109, 8477, 11, 341, 307, 11, 286, 519, 11, 291, 458, 11, 472, 636, 281, 519, 295, 613, 28416, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09390441131591797, "compression_ratio": 1.7944250871080138, "no_speech_prob": 0.0031723403371870518}, {"id": 26, "seek": 15900, "start": 159.0, "end": 167.0, "text": " The bottom line of whatever you give to users, restricted language, different data model is that there's a limit on what they can ask to the source data.", "tokens": [50364, 440, 2767, 1622, 295, 2035, 291, 976, 281, 5022, 11, 20608, 2856, 11, 819, 1412, 2316, 307, 300, 456, 311, 257, 4948, 322, 437, 436, 393, 1029, 281, 264, 4009, 1412, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09758432094867413, "compression_ratio": 1.811023622047244, "no_speech_prob": 0.018539708107709885}, {"id": 27, "seek": 15900, "start": 167.0, "end": 172.0, "text": " And you can begin to compare different interfaces this way.", "tokens": [50764, 400, 291, 393, 1841, 281, 6794, 819, 28416, 341, 636, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09758432094867413, "compression_ratio": 1.811023622047244, "no_speech_prob": 0.018539708107709885}, {"id": 28, "seek": 15900, "start": 172.0, "end": 177.0, "text": " You know, one person uses this vocabulary, one uses this data model, one uses this amount.", "tokens": [51014, 509, 458, 11, 472, 954, 4960, 341, 19864, 11, 472, 4960, 341, 1412, 2316, 11, 472, 4960, 341, 2372, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09758432094867413, "compression_ratio": 1.811023622047244, "no_speech_prob": 0.018539708107709885}, {"id": 29, "seek": 15900, "start": 177.0, "end": 188.0, "text": " If you want to compare them, you'd compare based on what class of queries the user can extract, what information they can extract from the source database.", "tokens": [51264, 759, 291, 528, 281, 6794, 552, 11, 291, 1116, 6794, 2361, 322, 437, 1508, 295, 24109, 264, 4195, 393, 8947, 11, 437, 1589, 436, 393, 8947, 490, 264, 4009, 8149, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09758432094867413, "compression_ratio": 1.811023622047244, "no_speech_prob": 0.018539708107709885}, {"id": 30, "seek": 18800, "start": 188.0, "end": 194.0, "text": " And we'll also look at this in the setting of multiple databases, autonomous distributed over the world.", "tokens": [50364, 400, 321, 603, 611, 574, 412, 341, 294, 264, 3287, 295, 3866, 22380, 11, 23797, 12631, 670, 264, 1002, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08444426934930342, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0018671263242140412}, {"id": 31, "seek": 18800, "start": 194.0, "end": 201.0, "text": " Then an interface will be a restriction on what users can ask to the global database, the union of the sources.", "tokens": [50664, 1396, 364, 9226, 486, 312, 257, 29529, 322, 437, 5022, 393, 1029, 281, 264, 4338, 8149, 11, 264, 11671, 295, 264, 7139, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08444426934930342, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0018671263242140412}, {"id": 32, "seek": 18800, "start": 201.0, "end": 205.0, "text": " But it will have to be compatible with this notion of autonomy.", "tokens": [51014, 583, 309, 486, 362, 281, 312, 18218, 365, 341, 10710, 295, 27278, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08444426934930342, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0018671263242140412}, {"id": 33, "seek": 18800, "start": 205.0, "end": 211.0, "text": " It should be something that factors into an interface at each source.", "tokens": [51214, 467, 820, 312, 746, 300, 6771, 666, 364, 9226, 412, 1184, 4009, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08444426934930342, "compression_ratio": 1.6055045871559632, "no_speech_prob": 0.0018671263242140412}, {"id": 34, "seek": 21100, "start": 211.0, "end": 217.0, "text": " So there'll be examples later, but the canonical example is traditional database views, say SQL views.", "tokens": [50364, 407, 456, 603, 312, 5110, 1780, 11, 457, 264, 46491, 1365, 307, 5164, 8149, 6809, 11, 584, 19200, 6809, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11178351508246528, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.011153794825077057}, {"id": 35, "seek": 21100, "start": 217.0, "end": 223.0, "text": " This is an interface at least based logically on making some derived data available.", "tokens": [50664, 639, 307, 364, 9226, 412, 1935, 2361, 38887, 322, 1455, 512, 18949, 1412, 2435, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11178351508246528, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.011153794825077057}, {"id": 36, "seek": 21100, "start": 223.0, "end": 234.0, "text": " So you say, well, here you, class of users, here's the stuff that you're able to see go wild with any query that you can do that only uses this data.", "tokens": [50964, 407, 291, 584, 11, 731, 11, 510, 291, 11, 1508, 295, 5022, 11, 510, 311, 264, 1507, 300, 291, 434, 1075, 281, 536, 352, 4868, 365, 604, 14581, 300, 291, 393, 360, 300, 787, 4960, 341, 1412, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11178351508246528, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.011153794825077057}, {"id": 37, "seek": 21100, "start": 234.0, "end": 235.0, "text": " That's a traditional view database.", "tokens": [51514, 663, 311, 257, 5164, 1910, 8149, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11178351508246528, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.011153794825077057}, {"id": 38, "seek": 23500, "start": 235.0, "end": 237.0, "text": " Abstractly, you can think of a view-based databases.", "tokens": [50364, 46853, 1897, 356, 11, 291, 393, 519, 295, 257, 1910, 12, 6032, 22380, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 39, "seek": 23500, "start": 237.0, "end": 244.0, "text": " You have some function on the source instance or in the case of distributed views on the source instances.", "tokens": [50464, 509, 362, 512, 2445, 322, 264, 4009, 5197, 420, 294, 264, 1389, 295, 12631, 6809, 322, 264, 4009, 14519, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 40, "seek": 23500, "start": 244.0, "end": 246.0, "text": " And this function extracts some data.", "tokens": [50814, 400, 341, 2445, 8947, 82, 512, 1412, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 41, "seek": 23500, "start": 246.0, "end": 249.0, "text": " That's the stuff that the user can see.", "tokens": [50914, 663, 311, 264, 1507, 300, 264, 4195, 393, 536, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 42, "seek": 23500, "start": 249.0, "end": 255.0, "text": " Any query that only uses that stuff or is answerable based on that stuff is the restriction on queries.", "tokens": [51064, 2639, 14581, 300, 787, 4960, 300, 1507, 420, 307, 1867, 712, 2361, 322, 300, 1507, 307, 264, 29529, 322, 24109, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 43, "seek": 23500, "start": 255.0, "end": 259.0, "text": " So I'll use some terminology in the distributed case.", "tokens": [51364, 407, 286, 603, 764, 512, 27575, 294, 264, 12631, 1389, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 44, "seek": 23500, "start": 259.0, "end": 261.0, "text": " I'll talk about distributed views.", "tokens": [51564, 286, 603, 751, 466, 12631, 6809, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1052607420448945, "compression_ratio": 1.894273127753304, "no_speech_prob": 0.016910841688513756}, {"id": 45, "seek": 26100, "start": 261.0, "end": 270.0, "text": " A distributed view is just, and every local source, I have some derived data that I at least logically export from that local source.", "tokens": [50364, 316, 12631, 1910, 307, 445, 11, 293, 633, 2654, 4009, 11, 286, 362, 512, 18949, 1412, 300, 286, 412, 1935, 38887, 10725, 490, 300, 2654, 4009, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1625615772448088, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.0012447385815903544}, {"id": 46, "seek": 26100, "start": 270.0, "end": 273.0, "text": " Okay, so views can be in these arbitrary functions.", "tokens": [50814, 1033, 11, 370, 6809, 393, 312, 294, 613, 23211, 6828, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1625615772448088, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.0012447385815903544}, {"id": 47, "seek": 26100, "start": 273.0, "end": 279.0, "text": " We'll be interested often in classes of views, like, say, CQ views.", "tokens": [50964, 492, 603, 312, 3102, 2049, 294, 5359, 295, 6809, 11, 411, 11, 584, 11, 383, 48, 6809, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1625615772448088, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.0012447385815903544}, {"id": 48, "seek": 26100, "start": 279.0, "end": 287.0, "text": " CQ, a conjunctive query D view is at every local source, I have a conjunctive query over the atoms known to that source.", "tokens": [51264, 383, 48, 11, 257, 18244, 20221, 14581, 413, 1910, 307, 412, 633, 2654, 4009, 11, 286, 362, 257, 18244, 20221, 14581, 670, 264, 16871, 2570, 281, 300, 4009, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1625615772448088, "compression_ratio": 1.7155963302752293, "no_speech_prob": 0.0012447385815903544}, {"id": 49, "seek": 28700, "start": 287.0, "end": 293.0, "text": " That's what that local data source is exploring.", "tokens": [50364, 663, 311, 437, 300, 2654, 1412, 4009, 307, 12736, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11011398479502688, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0025906753726303577}, {"id": 50, "seek": 28700, "start": 293.0, "end": 298.0, "text": " So the idea of this great thought exercise is to try and go beyond views.", "tokens": [50664, 407, 264, 1558, 295, 341, 869, 1194, 5380, 307, 281, 853, 293, 352, 4399, 6809, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11011398479502688, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0025906753726303577}, {"id": 51, "seek": 28700, "start": 298.0, "end": 301.0, "text": " And lots of people have gone there before.", "tokens": [50914, 400, 3195, 295, 561, 362, 2780, 456, 949, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11011398479502688, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0025906753726303577}, {"id": 52, "seek": 28700, "start": 301.0, "end": 305.0, "text": " And you can begin to think of lots of mechanisms that have been proposed.", "tokens": [51064, 400, 291, 393, 1841, 281, 519, 295, 3195, 295, 15902, 300, 362, 668, 10348, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11011398479502688, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0025906753726303577}, {"id": 53, "seek": 28700, "start": 305.0, "end": 307.0, "text": " I mentioned some of them, access patterns.", "tokens": [51264, 286, 2835, 512, 295, 552, 11, 2105, 8294, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11011398479502688, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0025906753726303577}, {"id": 54, "seek": 28700, "start": 307.0, "end": 314.0, "text": " This is another way of restricting what a class of users can see that's not derived data.", "tokens": [51364, 639, 307, 1071, 636, 295, 1472, 37714, 437, 257, 1508, 295, 5022, 393, 536, 300, 311, 406, 18949, 1412, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11011398479502688, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.0025906753726303577}, {"id": 55, "seek": 31400, "start": 314.0, "end": 321.0, "text": " You say, okay, you need to give this value here to access this data from this functional API.", "tokens": [50364, 509, 584, 11, 1392, 11, 291, 643, 281, 976, 341, 2158, 510, 281, 2105, 341, 1412, 490, 341, 11745, 9362, 13, 50714], "temperature": 0.0, "avg_logprob": -0.19044125269329737, "compression_ratio": 1.4475138121546962, "no_speech_prob": 0.02478637546300888}, {"id": 56, "seek": 31400, "start": 321.0, "end": 323.0, "text": " That's different from derived data.", "tokens": [50714, 663, 311, 819, 490, 18949, 1412, 13, 50814], "temperature": 0.0, "avg_logprob": -0.19044125269329737, "compression_ratio": 1.4475138121546962, "no_speech_prob": 0.02478637546300888}, {"id": 57, "seek": 31400, "start": 323.0, "end": 330.0, "text": " And then, oh, so that's something that has been studied in the database literature Alan Nash and his colleagues, people at Stanford,", "tokens": [50814, 400, 550, 11, 1954, 11, 370, 300, 311, 746, 300, 575, 668, 9454, 294, 264, 8149, 10394, 16442, 25012, 293, 702, 7734, 11, 561, 412, 20374, 11, 51164], "temperature": 0.0, "avg_logprob": -0.19044125269329737, "compression_ratio": 1.4475138121546962, "no_speech_prob": 0.02478637546300888}, {"id": 58, "seek": 33000, "start": 330.0, "end": 333.0, "text": " Chen Li and Edward Chang, Deutsche National Literature.", "tokens": [50364, 13682, 8349, 293, 18456, 17179, 11, 45567, 4862, 16090, 1503, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2252679338642195, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.23076386749744415}, {"id": 59, "seek": 33000, "start": 333.0, "end": 338.0, "text": " Views with access patterns is something that hasn't gotten that much study.", "tokens": [50514, 13909, 82, 365, 2105, 8294, 307, 746, 300, 6132, 380, 5768, 300, 709, 2979, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2252679338642195, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.23076386749744415}, {"id": 60, "seek": 33000, "start": 338.0, "end": 344.0, "text": " Nash, again, and his colleagues, Antoine and some colleagues at Telecom studied this.", "tokens": [50764, 25012, 11, 797, 11, 293, 702, 7734, 11, 5130, 44454, 293, 512, 7734, 412, 14889, 1112, 9454, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2252679338642195, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.23076386749744415}, {"id": 61, "seek": 33000, "start": 344.0, "end": 352.0, "text": " You say you have logically some derived data, but you restrict access to traditional access methods, disciplines.", "tokens": [51064, 509, 584, 291, 362, 38887, 512, 18949, 1412, 11, 457, 291, 7694, 2105, 281, 5164, 2105, 7150, 11, 21919, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2252679338642195, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.23076386749744415}, {"id": 62, "seek": 33000, "start": 352.0, "end": 356.0, "text": " Various data exchange, virtual data integration mechanisms.", "tokens": [51464, 14662, 851, 1412, 7742, 11, 6374, 1412, 10980, 15902, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2252679338642195, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.23076386749744415}, {"id": 63, "seek": 33000, "start": 356.0, "end": 359.0, "text": " There's lots and lots of them in the history of databases.", "tokens": [51664, 821, 311, 3195, 293, 3195, 295, 552, 294, 264, 2503, 295, 22380, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2252679338642195, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.23076386749744415}, {"id": 64, "seek": 35900, "start": 359.0, "end": 363.0, "text": " These can be thought of from the point of view as trying to get beyond views.", "tokens": [50364, 1981, 393, 312, 1194, 295, 490, 264, 935, 295, 1910, 382, 1382, 281, 483, 4399, 6809, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 65, "seek": 35900, "start": 363.0, "end": 368.0, "text": " There's an interesting formalism from Kautus, Deutsche, and Anose,", "tokens": [50564, 821, 311, 364, 1880, 9860, 1434, 490, 591, 1375, 301, 11, 45567, 11, 293, 1107, 541, 11, 50814], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 66, "seek": 35900, "start": 368.0, "end": 372.0, "text": " query specification, pattern language, something like that,", "tokens": [50814, 14581, 31256, 11, 5102, 2856, 11, 746, 411, 300, 11, 51014], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 67, "seek": 35900, "start": 372.0, "end": 377.0, "text": " where you use a restriction and automaton running over the syntax tree.", "tokens": [51014, 689, 291, 764, 257, 29529, 293, 3553, 25781, 2614, 670, 264, 28431, 4230, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 68, "seek": 35900, "start": 377.0, "end": 380.0, "text": " And you say, here are a class of users.", "tokens": [51264, 400, 291, 584, 11, 510, 366, 257, 1508, 295, 5022, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 69, "seek": 35900, "start": 380.0, "end": 383.0, "text": " Here are the things that you're allowed to see.", "tokens": [51414, 1692, 366, 264, 721, 300, 291, 434, 4350, 281, 536, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 70, "seek": 35900, "start": 383.0, "end": 384.0, "text": " Here's a number of queries.", "tokens": [51564, 1692, 311, 257, 1230, 295, 24109, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 71, "seek": 35900, "start": 384.0, "end": 385.0, "text": " This is going beyond views.", "tokens": [51614, 639, 307, 516, 4399, 6809, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17830919145463822, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.0032715704292058945}, {"id": 72, "seek": 38500, "start": 385.0, "end": 391.0, "text": " They talk about this as exporting an infinite class of views.", "tokens": [50364, 814, 751, 466, 341, 382, 44686, 364, 13785, 1508, 295, 6809, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24789606850102264, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.008839604444801807}, {"id": 73, "seek": 38500, "start": 391.0, "end": 394.0, "text": " And so this is the kind of thing I'd like to look at.", "tokens": [50664, 400, 370, 341, 307, 264, 733, 295, 551, 286, 1116, 411, 281, 574, 412, 13, 50814], "temperature": 0.0, "avg_logprob": -0.24789606850102264, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.008839604444801807}, {"id": 74, "seek": 38500, "start": 394.0, "end": 398.0, "text": " I mean, I'll talk about two projects, one from a couple of years ago with Per,", "tokens": [50814, 286, 914, 11, 286, 603, 751, 466, 732, 4455, 11, 472, 490, 257, 1916, 295, 924, 2057, 365, 3026, 11, 51014], "temperature": 0.0, "avg_logprob": -0.24789606850102264, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.008839604444801807}, {"id": 75, "seek": 38500, "start": 398.0, "end": 404.0, "text": " Lewis, Chiquet, and F.E.Somora, and another that's current work with Udy Roshovsky at Oxford,", "tokens": [51014, 17412, 11, 761, 3221, 302, 11, 293, 479, 13, 36, 13, 50, 298, 3252, 11, 293, 1071, 300, 311, 2190, 589, 365, 624, 3173, 497, 3019, 5179, 25810, 412, 24786, 11, 51314], "temperature": 0.0, "avg_logprob": -0.24789606850102264, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.008839604444801807}, {"id": 76, "seek": 38500, "start": 404.0, "end": 410.0, "text": " that are in the space of how do we get mechanisms that go beyond views.", "tokens": [51314, 300, 366, 294, 264, 1901, 295, 577, 360, 321, 483, 15902, 300, 352, 4399, 6809, 13, 51614], "temperature": 0.0, "avg_logprob": -0.24789606850102264, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.008839604444801807}, {"id": 77, "seek": 41000, "start": 410.0, "end": 415.0, "text": " Okay, the first kind of mechanism, this first project,", "tokens": [50364, 1033, 11, 264, 700, 733, 295, 7513, 11, 341, 700, 1716, 11, 50614], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 78, "seek": 41000, "start": 415.0, "end": 418.0, "text": " it's based on the notion of minimally informative query answering.", "tokens": [50614, 309, 311, 2361, 322, 264, 10710, 295, 4464, 379, 27759, 14581, 13430, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 79, "seek": 41000, "start": 418.0, "end": 421.0, "text": " The notion here is we specify a set of queries.", "tokens": [50764, 440, 10710, 510, 307, 321, 16500, 257, 992, 295, 24109, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 80, "seek": 41000, "start": 421.0, "end": 423.0, "text": " We call them in the paper utility queries.", "tokens": [50914, 492, 818, 552, 294, 264, 3035, 14877, 24109, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 81, "seek": 41000, "start": 423.0, "end": 427.0, "text": " These are the things that we want the user to answer.", "tokens": [51014, 1981, 366, 264, 721, 300, 321, 528, 264, 4195, 281, 1867, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 82, "seek": 41000, "start": 427.0, "end": 431.0, "text": " But we don't want to give a mechanism that just says you can only ask these five queries.", "tokens": [51214, 583, 321, 500, 380, 528, 281, 976, 257, 7513, 300, 445, 1619, 291, 393, 787, 1029, 613, 1732, 24109, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 83, "seek": 41000, "start": 431.0, "end": 433.0, "text": " We want something more robust.", "tokens": [51414, 492, 528, 746, 544, 13956, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 84, "seek": 41000, "start": 433.0, "end": 437.0, "text": " So what we say is, well, let's give out the minimally informative traditional views", "tokens": [51514, 407, 437, 321, 584, 307, 11, 731, 11, 718, 311, 976, 484, 264, 4464, 379, 27759, 5164, 6809, 51714], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 85, "seek": 41000, "start": 437.0, "end": 439.0, "text": " within a class that support these queries.", "tokens": [51714, 1951, 257, 1508, 300, 1406, 613, 24109, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06865513971609663, "compression_ratio": 1.822695035460993, "no_speech_prob": 0.002472206484526396}, {"id": 86, "seek": 43900, "start": 439.0, "end": 441.0, "text": " I'll give an example in this slide.", "tokens": [50364, 286, 603, 976, 364, 1365, 294, 341, 4137, 13, 50464], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 87, "seek": 43900, "start": 441.0, "end": 445.0, "text": " So here, this is something we've also discussed extensively at lunch.", "tokens": [50464, 407, 510, 11, 341, 307, 746, 321, 600, 611, 7152, 32636, 412, 6349, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 88, "seek": 43900, "start": 445.0, "end": 447.0, "text": " Dodge tool versus science.", "tokens": [50664, 41883, 2290, 5717, 3497, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 89, "seek": 43900, "start": 447.0, "end": 451.0, "text": " Computer science, conference centers, very theory friendly.", "tokens": [50764, 22289, 3497, 11, 7586, 10898, 11, 588, 5261, 9208, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 90, "seek": 43900, "start": 451.0, "end": 457.0, "text": " They both have programs with different participants.", "tokens": [50964, 814, 1293, 362, 4268, 365, 819, 10503, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 91, "seek": 43900, "start": 457.0, "end": 459.0, "text": " Many people here have gone to both.", "tokens": [51264, 5126, 561, 510, 362, 2780, 281, 1293, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 92, "seek": 43900, "start": 459.0, "end": 463.0, "text": " And they have both autonomous data stores that store names of participants,", "tokens": [51364, 400, 436, 362, 1293, 23797, 1412, 9512, 300, 3531, 5288, 295, 10503, 11, 51564], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 93, "seek": 43900, "start": 463.0, "end": 464.0, "text": " which program, which year.", "tokens": [51564, 597, 1461, 11, 597, 1064, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 94, "seek": 43900, "start": 464.0, "end": 468.0, "text": " And they get together and they say, we're going to create an interface.", "tokens": [51614, 400, 436, 483, 1214, 293, 436, 584, 11, 321, 434, 516, 281, 1884, 364, 9226, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16031183015315906, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.0033235768787562847}, {"id": 95, "seek": 46800, "start": 469.0, "end": 473.0, "text": " And we want our interfaces to support some queries that span the sources.", "tokens": [50414, 400, 321, 528, 527, 28416, 281, 1406, 512, 24109, 300, 16174, 264, 7139, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11379240949948628, "compression_ratio": 1.6612903225806452, "no_speech_prob": 0.0023223471362143755}, {"id": 96, "seek": 46800, "start": 473.0, "end": 479.0, "text": " Like, are there researchers who are attending both programs in the same year?", "tokens": [50614, 1743, 11, 366, 456, 10309, 567, 366, 15862, 1293, 4268, 294, 264, 912, 1064, 30, 50914], "temperature": 0.0, "avg_logprob": -0.11379240949948628, "compression_ratio": 1.6612903225806452, "no_speech_prob": 0.0023223471362143755}, {"id": 97, "seek": 46800, "start": 479.0, "end": 483.0, "text": " You can write this as a conjunctive query over the union of the schemas.", "tokens": [50914, 509, 393, 2464, 341, 382, 257, 18244, 20221, 14581, 670, 264, 11671, 295, 264, 22627, 296, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11379240949948628, "compression_ratio": 1.6612903225806452, "no_speech_prob": 0.0023223471362143755}, {"id": 98, "seek": 46800, "start": 483.0, "end": 488.0, "text": " So it's a join between Simons participants.", "tokens": [51114, 407, 309, 311, 257, 3917, 1296, 3998, 892, 10503, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11379240949948628, "compression_ratio": 1.6612903225806452, "no_speech_prob": 0.0023223471362143755}, {"id": 99, "seek": 46800, "start": 488.0, "end": 490.0, "text": " And we want a mechanism that will support this query,", "tokens": [51364, 400, 321, 528, 257, 7513, 300, 486, 1406, 341, 14581, 11, 51464], "temperature": 0.0, "avg_logprob": -0.11379240949948628, "compression_ratio": 1.6612903225806452, "no_speech_prob": 0.0023223471362143755}, {"id": 100, "seek": 46800, "start": 490.0, "end": 495.0, "text": " but give out the minimal information among distributed views that will support this join.", "tokens": [51464, 457, 976, 484, 264, 13206, 1589, 3654, 12631, 6809, 300, 486, 1406, 341, 3917, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11379240949948628, "compression_ratio": 1.6612903225806452, "no_speech_prob": 0.0023223471362143755}, {"id": 101, "seek": 49500, "start": 496.0, "end": 500.0, "text": " So we have to formalize this notion of what it means to support a query", "tokens": [50414, 407, 321, 362, 281, 9860, 1125, 341, 10710, 295, 437, 309, 1355, 281, 1406, 257, 14581, 50614], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 102, "seek": 49500, "start": 500.0, "end": 502.0, "text": " and what minimal information means.", "tokens": [50614, 293, 437, 13206, 1589, 1355, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 103, "seek": 49500, "start": 502.0, "end": 505.0, "text": " And I've seen, I'm coming late to this program,", "tokens": [50714, 400, 286, 600, 1612, 11, 286, 478, 1348, 3469, 281, 341, 1461, 11, 50864], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 104, "seek": 49500, "start": 505.0, "end": 510.0, "text": " but I've seen that a recurrent theme in this program is information,", "tokens": [50864, 457, 286, 600, 1612, 300, 257, 18680, 1753, 6314, 294, 341, 1461, 307, 1589, 11, 51114], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 105, "seek": 49500, "start": 510.0, "end": 515.0, "text": " and information theory in Shannon, relative information.", "tokens": [51114, 293, 1589, 5261, 294, 28974, 11, 4972, 1589, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 106, "seek": 49500, "start": 515.0, "end": 518.0, "text": " We're not going to use any of that.", "tokens": [51364, 492, 434, 406, 516, 281, 764, 604, 295, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 107, "seek": 49500, "start": 518.0, "end": 524.0, "text": " We're going to do something less quantitative", "tokens": [51514, 492, 434, 516, 281, 360, 746, 1570, 27778, 51814], "temperature": 0.0, "avg_logprob": -0.13478492408670406, "compression_ratio": 1.7451923076923077, "no_speech_prob": 0.0011333988513797522}, {"id": 108, "seek": 52400, "start": 524.0, "end": 527.0, "text": " because one of the things I'd like to advertise,", "tokens": [50364, 570, 472, 295, 264, 721, 286, 1116, 411, 281, 35379, 11, 50514], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 109, "seek": 52400, "start": 527.0, "end": 530.0, "text": " it's Sugafan and Vianu's notion of determinacy.", "tokens": [50514, 309, 311, 39131, 2792, 282, 293, 691, 952, 84, 311, 10710, 295, 15957, 2551, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 110, "seek": 52400, "start": 530.0, "end": 534.0, "text": " Sometimes in some of Dan and Paris' papers,", "tokens": [50664, 4803, 294, 512, 295, 3394, 293, 8380, 6, 10577, 11, 50864], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 111, "seek": 52400, "start": 534.0, "end": 537.0, "text": " they emphasize information theoretic determinacy.", "tokens": [50864, 436, 16078, 1589, 14308, 299, 15957, 2551, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 112, "seek": 52400, "start": 537.0, "end": 540.0, "text": " So it has a similar feel.", "tokens": [51014, 407, 309, 575, 257, 2531, 841, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 113, "seek": 52400, "start": 540.0, "end": 541.0, "text": " What is determinacy?", "tokens": [51164, 708, 307, 15957, 2551, 30, 51214], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 114, "seek": 52400, "start": 541.0, "end": 544.0, "text": " You have a query and you have a bunch of views.", "tokens": [51214, 509, 362, 257, 14581, 293, 291, 362, 257, 3840, 295, 6809, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 115, "seek": 52400, "start": 544.0, "end": 546.0, "text": " You say the query is determined by views.", "tokens": [51364, 509, 584, 264, 14581, 307, 9540, 538, 6809, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 116, "seek": 52400, "start": 546.0, "end": 550.0, "text": " If any database, two databases that agree on the view agree on the query.", "tokens": [51464, 759, 604, 8149, 11, 732, 22380, 300, 3986, 322, 264, 1910, 3986, 322, 264, 14581, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 117, "seek": 52400, "start": 550.0, "end": 552.0, "text": " Very simple definition.", "tokens": [51664, 4372, 2199, 7123, 13, 51764], "temperature": 0.0, "avg_logprob": -0.15197446165966386, "compression_ratio": 1.7206477732793521, "no_speech_prob": 0.0007094830507412553}, {"id": 118, "seek": 55200, "start": 552.0, "end": 558.0, "text": " Another way to think of this is that the query output is a function of the view output.", "tokens": [50364, 3996, 636, 281, 519, 295, 341, 307, 300, 264, 14581, 5598, 307, 257, 2445, 295, 264, 1910, 5598, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09128315335228329, "compression_ratio": 1.890295358649789, "no_speech_prob": 0.0009108109516091645}, {"id": 119, "seek": 55200, "start": 558.0, "end": 563.0, "text": " So we'll say that a distributed view supports a query if the query is determined by the view.", "tokens": [50664, 407, 321, 603, 584, 300, 257, 12631, 1910, 9346, 257, 14581, 498, 264, 14581, 307, 9540, 538, 264, 1910, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09128315335228329, "compression_ratio": 1.890295358649789, "no_speech_prob": 0.0009108109516091645}, {"id": 120, "seek": 55200, "start": 563.0, "end": 567.0, "text": " But the way you want to think of determinacy is information theoretically.", "tokens": [50914, 583, 264, 636, 291, 528, 281, 519, 295, 15957, 2551, 307, 1589, 29400, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09128315335228329, "compression_ratio": 1.890295358649789, "no_speech_prob": 0.0009108109516091645}, {"id": 121, "seek": 55200, "start": 567.0, "end": 572.0, "text": " It says, well, these views contain all the information you need.", "tokens": [51114, 467, 1619, 11, 731, 11, 613, 6809, 5304, 439, 264, 1589, 291, 643, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09128315335228329, "compression_ratio": 1.890295358649789, "no_speech_prob": 0.0009108109516091645}, {"id": 122, "seek": 55200, "start": 572.0, "end": 576.0, "text": " These views have more information than you have.", "tokens": [51364, 1981, 6809, 362, 544, 1589, 813, 291, 362, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09128315335228329, "compression_ratio": 1.890295358649789, "no_speech_prob": 0.0009108109516091645}, {"id": 123, "seek": 55200, "start": 576.0, "end": 581.0, "text": " And the information theoretic notion is you don't care about the computation.", "tokens": [51564, 400, 264, 1589, 14308, 299, 10710, 307, 291, 500, 380, 1127, 466, 264, 24903, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09128315335228329, "compression_ratio": 1.890295358649789, "no_speech_prob": 0.0009108109516091645}, {"id": 124, "seek": 58100, "start": 581.0, "end": 586.0, "text": " How complex it is to reconstruct Q from V1 through VT.", "tokens": [50364, 1012, 3997, 309, 307, 281, 31499, 1249, 490, 691, 16, 807, 691, 51, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 125, "seek": 58100, "start": 586.0, "end": 588.0, "text": " Who cares? V1 through VT.", "tokens": [50614, 2102, 12310, 30, 691, 16, 807, 691, 51, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 126, "seek": 58100, "start": 588.0, "end": 592.0, "text": " Have enough information to answer Q.", "tokens": [50714, 3560, 1547, 1589, 281, 1867, 1249, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 127, "seek": 58100, "start": 592.0, "end": 595.0, "text": " And we'll formalize the notion that the views are minimally informative,", "tokens": [50914, 400, 321, 603, 9860, 1125, 264, 10710, 300, 264, 6809, 366, 4464, 379, 27759, 11, 51064], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 128, "seek": 58100, "start": 595.0, "end": 598.0, "text": " again, using Sugafan and Vianu's notion of determinacy.", "tokens": [51064, 797, 11, 1228, 39131, 2792, 282, 293, 691, 952, 84, 311, 10710, 295, 15957, 2551, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 129, "seek": 58100, "start": 598.0, "end": 605.0, "text": " We say a distributed view is minimally informative, supporting Q.", "tokens": [51214, 492, 584, 257, 12631, 1910, 307, 4464, 379, 27759, 11, 7231, 1249, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 130, "seek": 58100, "start": 605.0, "end": 610.0, "text": " Within a class of queries, see if the view supports the query.", "tokens": [51564, 15996, 257, 1508, 295, 24109, 11, 536, 498, 264, 1910, 9346, 264, 14581, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1258995899787316, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.0011157793924212456}, {"id": 131, "seek": 61000, "start": 610.0, "end": 614.0, "text": " Using determinacy, Q is a function of the views.", "tokens": [50364, 11142, 15957, 2551, 11, 1249, 307, 257, 2445, 295, 264, 6809, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 132, "seek": 61000, "start": 614.0, "end": 616.0, "text": " The view has to be based on queries in C.", "tokens": [50564, 440, 1910, 575, 281, 312, 2361, 322, 24109, 294, 383, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 133, "seek": 61000, "start": 616.0, "end": 620.0, "text": " And any other distributed view, V prime, that uses queries from C,", "tokens": [50664, 400, 604, 661, 12631, 1910, 11, 691, 5835, 11, 300, 4960, 24109, 490, 383, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 134, "seek": 61000, "start": 620.0, "end": 622.0, "text": " it has more information.", "tokens": [50864, 309, 575, 544, 1589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 135, "seek": 61000, "start": 622.0, "end": 626.0, "text": " That means that other view, V prime, determines each view in V.", "tokens": [50964, 663, 1355, 300, 661, 1910, 11, 691, 5835, 11, 24799, 1184, 1910, 294, 691, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 136, "seek": 61000, "start": 626.0, "end": 631.0, "text": " So remember, the notion of determinacy, if V prime determines each view in V,", "tokens": [51164, 407, 1604, 11, 264, 10710, 295, 15957, 2551, 11, 498, 691, 5835, 24799, 1184, 1910, 294, 691, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 137, "seek": 61000, "start": 631.0, "end": 635.0, "text": " that somehow says V prime has more information than each view in V.", "tokens": [51414, 300, 6063, 1619, 691, 5835, 575, 544, 1589, 813, 1184, 1910, 294, 691, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09438547998104456, "compression_ratio": 1.9405940594059405, "no_speech_prob": 0.0022512597497552633}, {"id": 138, "seek": 63500, "start": 635.0, "end": 637.0, "text": " And so this is the natural way.", "tokens": [50364, 400, 370, 341, 307, 264, 3303, 636, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 139, "seek": 63500, "start": 637.0, "end": 642.0, "text": " If you accept determinacy as the notion of information, capacity of a view,", "tokens": [50464, 759, 291, 3241, 15957, 2551, 382, 264, 10710, 295, 1589, 11, 6042, 295, 257, 1910, 11, 50714], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 140, "seek": 63500, "start": 642.0, "end": 647.0, "text": " this is the natural way to say that these views are minimal information.", "tokens": [50714, 341, 307, 264, 3303, 636, 281, 584, 300, 613, 6809, 366, 13206, 1589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 141, "seek": 63500, "start": 647.0, "end": 651.0, "text": " So let's go to Simon's and Don's tool.", "tokens": [50964, 407, 718, 311, 352, 281, 13193, 311, 293, 1468, 311, 2290, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 142, "seek": 63500, "start": 651.0, "end": 656.0, "text": " At least in our minds, go to Simon's and Don's tool.", "tokens": [51164, 1711, 1935, 294, 527, 9634, 11, 352, 281, 13193, 311, 293, 1468, 311, 2290, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 143, "seek": 63500, "start": 656.0, "end": 661.0, "text": " They wanted to support this interface that supports this join", "tokens": [51414, 814, 1415, 281, 1406, 341, 9226, 300, 9346, 341, 3917, 51664], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 144, "seek": 63500, "start": 661.0, "end": 664.0, "text": " and give the minimal information that does this.", "tokens": [51664, 293, 976, 264, 13206, 1589, 300, 775, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15943224906921385, "compression_ratio": 1.8866995073891626, "no_speech_prob": 0.007933186367154121}, {"id": 145, "seek": 66400, "start": 664.0, "end": 669.0, "text": " It's pretty obvious intuitively what the minimal information you need to support this query is.", "tokens": [50364, 467, 311, 1238, 6322, 46506, 437, 264, 13206, 1589, 291, 643, 281, 1406, 341, 14581, 307, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 146, "seek": 66400, "start": 669.0, "end": 675.0, "text": " You need to know Simon's needs to reveal the name and the year to support this join", "tokens": [50614, 509, 643, 281, 458, 13193, 311, 2203, 281, 10658, 264, 1315, 293, 264, 1064, 281, 1406, 341, 3917, 50914], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 147, "seek": 66400, "start": 675.0, "end": 678.0, "text": " because name and year are the join variables.", "tokens": [50914, 570, 1315, 293, 1064, 366, 264, 3917, 9102, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 148, "seek": 66400, "start": 678.0, "end": 680.0, "text": " They cross the join.", "tokens": [51064, 814, 3278, 264, 3917, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 149, "seek": 66400, "start": 680.0, "end": 683.0, "text": " Don's tool also has to reveal the name and year.", "tokens": [51164, 1468, 311, 2290, 611, 575, 281, 10658, 264, 1315, 293, 1064, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 150, "seek": 66400, "start": 683.0, "end": 688.0, "text": " And so what Simon's should do is they should publish the projection on name and year.", "tokens": [51314, 400, 370, 437, 13193, 311, 820, 360, 307, 436, 820, 11374, 264, 22743, 322, 1315, 293, 1064, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 151, "seek": 66400, "start": 688.0, "end": 691.0, "text": " And Don's tool should do the same.", "tokens": [51564, 400, 1468, 311, 2290, 820, 360, 264, 912, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10491010775932899, "compression_ratio": 1.8909090909090909, "no_speech_prob": 0.0015484713949263096}, {"id": 152, "seek": 69100, "start": 691.0, "end": 693.0, "text": " Give the projection on name and year.", "tokens": [50364, 5303, 264, 22743, 322, 1315, 293, 1064, 13, 50464], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 153, "seek": 69100, "start": 693.0, "end": 695.0, "text": " Intuitively, that's the minimal information.", "tokens": [50464, 5681, 1983, 3413, 11, 300, 311, 264, 13206, 1589, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 154, "seek": 69100, "start": 695.0, "end": 699.0, "text": " And in our formalism using determinacy, that's the minimal information.", "tokens": [50564, 400, 294, 527, 9860, 1434, 1228, 15957, 2551, 11, 300, 311, 264, 13206, 1589, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 155, "seek": 69100, "start": 699.0, "end": 703.0, "text": " Does this make sense?", "tokens": [50764, 4402, 341, 652, 2020, 30, 50964], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 156, "seek": 69100, "start": 703.0, "end": 707.0, "text": " The minimal information is just true or false.", "tokens": [50964, 440, 13206, 1589, 307, 445, 2074, 420, 7908, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 157, "seek": 69100, "start": 707.0, "end": 712.0, "text": " The answer to that query, it's a static notion.", "tokens": [51164, 440, 1867, 281, 300, 14581, 11, 309, 311, 257, 13437, 10710, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 158, "seek": 69100, "start": 712.0, "end": 716.0, "text": " This is not instance determinacy.", "tokens": [51414, 639, 307, 406, 5197, 15957, 2551, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 159, "seek": 69100, "start": 716.0, "end": 719.0, "text": " It's determinacy over all instances.", "tokens": [51614, 467, 311, 15957, 2551, 670, 439, 14519, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16073434249214505, "compression_ratio": 1.8191489361702127, "no_speech_prob": 0.003943340852856636}, {"id": 160, "seek": 71900, "start": 719.0, "end": 724.0, "text": " That back in our notion of determinacy, it's over all d1, d and d prime.", "tokens": [50364, 663, 646, 294, 527, 10710, 295, 15957, 2551, 11, 309, 311, 670, 439, 274, 16, 11, 274, 293, 274, 5835, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 161, "seek": 71900, "start": 724.0, "end": 725.0, "text": " So it's a static.", "tokens": [50614, 407, 309, 311, 257, 13437, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 162, "seek": 71900, "start": 725.0, "end": 730.0, "text": " It's a data independent notion.", "tokens": [50664, 467, 311, 257, 1412, 6695, 10710, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 163, "seek": 71900, "start": 730.0, "end": 735.0, "text": " So on a given instance, of course, I could say the answer is true or false and so on.", "tokens": [50914, 407, 322, 257, 2212, 5197, 11, 295, 1164, 11, 286, 727, 584, 264, 1867, 307, 2074, 420, 7908, 293, 370, 322, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 164, "seek": 71900, "start": 735.0, "end": 739.0, "text": " But the minimal information views are views that will have the minimal information", "tokens": [51164, 583, 264, 13206, 1589, 6809, 366, 6809, 300, 486, 362, 264, 13206, 1589, 51364], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 165, "seek": 71900, "start": 739.0, "end": 744.0, "text": " defined in terms of instance independent determinacy.", "tokens": [51364, 7642, 294, 2115, 295, 5197, 6695, 15957, 2551, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 166, "seek": 71900, "start": 744.0, "end": 746.0, "text": " I can play the same game.", "tokens": [51614, 286, 393, 862, 264, 912, 1216, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16530089803261333, "compression_ratio": 1.7175925925925926, "no_speech_prob": 0.003374655032530427}, {"id": 167, "seek": 74600, "start": 746.0, "end": 747.0, "text": " You give me your instance.", "tokens": [50364, 509, 976, 385, 428, 5197, 13, 50414], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 168, "seek": 74600, "start": 747.0, "end": 752.0, "text": " I'm going to compute the view, which is just the answer to your query.", "tokens": [50414, 286, 478, 516, 281, 14722, 264, 1910, 11, 597, 307, 445, 264, 1867, 281, 428, 14581, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 169, "seek": 74600, "start": 752.0, "end": 754.0, "text": " These are autonomous data sources.", "tokens": [50664, 1981, 366, 23797, 1412, 7139, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 170, "seek": 74600, "start": 754.0, "end": 757.0, "text": " These views, the distributive views are views at each source.", "tokens": [50764, 1981, 6809, 11, 264, 4400, 17254, 6809, 366, 6809, 412, 1184, 4009, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 171, "seek": 74600, "start": 757.0, "end": 763.0, "text": " So I can't go, Simon's is not allowed at data time, at query time, to go to Dogstool", "tokens": [50914, 407, 286, 393, 380, 352, 11, 13193, 311, 307, 406, 4350, 412, 1412, 565, 11, 412, 14581, 565, 11, 281, 352, 281, 13472, 372, 1092, 51214], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 172, "seek": 74600, "start": 763.0, "end": 769.0, "text": " and say, you know, tell me what's going on and then export the data.", "tokens": [51214, 293, 584, 11, 291, 458, 11, 980, 385, 437, 311, 516, 322, 293, 550, 10725, 264, 1412, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 173, "seek": 74600, "start": 769.0, "end": 775.0, "text": " This notion of distributive view says that each source has to do its own thing.", "tokens": [51514, 639, 10710, 295, 4400, 17254, 1910, 1619, 300, 1184, 4009, 575, 281, 360, 1080, 1065, 551, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15242372933080642, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.004751982167363167}, {"id": 174, "seek": 77500, "start": 775.0, "end": 776.0, "text": " It makes a lot of sense.", "tokens": [50364, 467, 1669, 257, 688, 295, 2020, 13, 50414], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 175, "seek": 77500, "start": 776.0, "end": 777.0, "text": " Thank you.", "tokens": [50414, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 176, "seek": 77500, "start": 777.0, "end": 779.0, "text": " Yeah, but if I may.", "tokens": [50464, 865, 11, 457, 498, 286, 815, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 177, "seek": 77500, "start": 779.0, "end": 784.0, "text": " So I mean, it seems in this particular context, you want to be as respective as possible,", "tokens": [50564, 407, 286, 914, 11, 309, 2544, 294, 341, 1729, 4319, 11, 291, 528, 281, 312, 382, 23649, 382, 1944, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 178, "seek": 77500, "start": 784.0, "end": 785.0, "text": " right?", "tokens": [50814, 558, 30, 50864], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 179, "seek": 77500, "start": 785.0, "end": 787.0, "text": " So the instance level seems to be what you want to go into.", "tokens": [50864, 407, 264, 5197, 1496, 2544, 281, 312, 437, 291, 528, 281, 352, 666, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 180, "seek": 77500, "start": 787.0, "end": 791.0, "text": " And it could be something like a zero-knowledge proof like thing that's in a protocol between", "tokens": [50964, 400, 309, 727, 312, 746, 411, 257, 4018, 12, 15869, 3042, 8177, 411, 551, 300, 311, 294, 257, 10336, 1296, 51164], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 181, "seek": 77500, "start": 791.0, "end": 793.0, "text": " Simon's and Dogstool, right?", "tokens": [51164, 13193, 311, 293, 13472, 372, 1092, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 182, "seek": 77500, "start": 793.0, "end": 794.0, "text": " Yeah.", "tokens": [51264, 865, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 183, "seek": 77500, "start": 794.0, "end": 797.0, "text": " I talked, so the question about what happens.", "tokens": [51314, 286, 2825, 11, 370, 264, 1168, 466, 437, 2314, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 184, "seek": 77500, "start": 797.0, "end": 803.0, "text": " So, okay, the first thing is, so of course, if you do instance dependent things here,", "tokens": [51464, 407, 11, 1392, 11, 264, 700, 551, 307, 11, 370, 295, 1164, 11, 498, 291, 360, 5197, 12334, 721, 510, 11, 51764], "temperature": 0.0, "avg_logprob": -0.1950664520263672, "compression_ratio": 1.6310344827586207, "no_speech_prob": 0.00999541487544775}, {"id": 185, "seek": 80300, "start": 803.0, "end": 807.0, "text": " there's also some questions about these epistemic paradoxes.", "tokens": [50364, 456, 311, 611, 512, 1651, 466, 613, 2388, 468, 3438, 26221, 279, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13734846848707932, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.009264609776437283}, {"id": 186, "seek": 80300, "start": 807.0, "end": 814.0, "text": " You say, no, I can't answer your query, because that would be giving out too much information.", "tokens": [50564, 509, 584, 11, 572, 11, 286, 393, 380, 1867, 428, 14581, 11, 570, 300, 576, 312, 2902, 484, 886, 709, 1589, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13734846848707932, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.009264609776437283}, {"id": 187, "seek": 80300, "start": 814.0, "end": 820.0, "text": " But, okay, so here there's a question about whether other mechanisms could do more than", "tokens": [50914, 583, 11, 1392, 11, 370, 510, 456, 311, 257, 1168, 466, 1968, 661, 15902, 727, 360, 544, 813, 51214], "temperature": 0.0, "avg_logprob": -0.13734846848707932, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.009264609776437283}, {"id": 188, "seek": 80300, "start": 820.0, "end": 823.0, "text": " these views, which is a question I'll get to.", "tokens": [51214, 613, 6809, 11, 597, 307, 257, 1168, 286, 603, 483, 281, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13734846848707932, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.009264609776437283}, {"id": 189, "seek": 80300, "start": 823.0, "end": 830.0, "text": " Crypto people have looked at it, and actually, well, I've looked at it too in a couple of", "tokens": [51364, 34809, 78, 561, 362, 2956, 412, 309, 11, 293, 767, 11, 731, 11, 286, 600, 2956, 412, 309, 886, 294, 257, 1916, 295, 51714], "temperature": 0.0, "avg_logprob": -0.13734846848707932, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.009264609776437283}, {"id": 190, "seek": 80300, "start": 830.0, "end": 831.0, "text": " slides.", "tokens": [51714, 9788, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13734846848707932, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.009264609776437283}, {"id": 191, "seek": 83100, "start": 831.0, "end": 840.0, "text": " So, okay, what's an example of our results?", "tokens": [50364, 407, 11, 1392, 11, 437, 311, 364, 1365, 295, 527, 3542, 30, 50814], "temperature": 0.0, "avg_logprob": -0.193622362613678, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0029806457459926605}, {"id": 192, "seek": 83100, "start": 840.0, "end": 846.0, "text": " I won't, of course, suggest completely address your question in a couple of slides, but maybe", "tokens": [50814, 286, 1582, 380, 11, 295, 1164, 11, 3402, 2584, 2985, 428, 1168, 294, 257, 1916, 295, 9788, 11, 457, 1310, 51114], "temperature": 0.0, "avg_logprob": -0.193622362613678, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0029806457459926605}, {"id": 193, "seek": 83100, "start": 846.0, "end": 848.0, "text": " it would be more clear.", "tokens": [51114, 309, 576, 312, 544, 1850, 13, 51214], "temperature": 0.0, "avg_logprob": -0.193622362613678, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0029806457459926605}, {"id": 194, "seek": 83100, "start": 848.0, "end": 852.0, "text": " So in this paper, one of the results says you take any utility query.", "tokens": [51214, 407, 294, 341, 3035, 11, 472, 295, 264, 3542, 1619, 291, 747, 604, 14877, 14581, 13, 51414], "temperature": 0.0, "avg_logprob": -0.193622362613678, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0029806457459926605}, {"id": 195, "seek": 83100, "start": 852.0, "end": 857.0, "text": " Not necessarily conjunct for an SQL arbitrary function on the global schema.", "tokens": [51414, 1726, 4725, 18244, 349, 337, 364, 19200, 23211, 2445, 322, 264, 4338, 34078, 13, 51664], "temperature": 0.0, "avg_logprob": -0.193622362613678, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.0029806457459926605}, {"id": 196, "seek": 85700, "start": 857.0, "end": 860.0, "text": " Then these minimum of informative devues exist.", "tokens": [50364, 1396, 613, 7285, 295, 27759, 1905, 1247, 2514, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12731974752325761, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.014724211767315865}, {"id": 197, "seek": 85700, "start": 860.0, "end": 865.0, "text": " I'll say a little bit more about what they look like in a few slides.", "tokens": [50514, 286, 603, 584, 257, 707, 857, 544, 466, 437, 436, 574, 411, 294, 257, 1326, 9788, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12731974752325761, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.014724211767315865}, {"id": 198, "seek": 85700, "start": 865.0, "end": 872.0, "text": " For CQ utility queries, they're expressible as traditional views in relational algebra.", "tokens": [50764, 1171, 383, 48, 14877, 24109, 11, 436, 434, 5109, 964, 382, 5164, 6809, 294, 38444, 21989, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12731974752325761, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.014724211767315865}, {"id": 199, "seek": 85700, "start": 872.0, "end": 876.0, "text": " And we show that the same holds in the presence of integrity constraints on each local source", "tokens": [51114, 400, 321, 855, 300, 264, 912, 9190, 294, 264, 6814, 295, 16000, 18491, 322, 1184, 2654, 4009, 51314], "temperature": 0.0, "avg_logprob": -0.12731974752325761, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.014724211767315865}, {"id": 200, "seek": 85700, "start": 876.0, "end": 878.0, "text": " like TGDs, EGDs.", "tokens": [51314, 411, 314, 38, 35, 82, 11, 462, 38, 35, 82, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12731974752325761, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.014724211767315865}, {"id": 201, "seek": 85700, "start": 878.0, "end": 882.0, "text": " So you always have these minimally informative things.", "tokens": [51414, 407, 291, 1009, 362, 613, 4464, 379, 27759, 721, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12731974752325761, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.014724211767315865}, {"id": 202, "seek": 88200, "start": 882.0, "end": 889.0, "text": " And sometimes they're expressible in relational algebra, but there are CQ utility views where", "tokens": [50364, 400, 2171, 436, 434, 5109, 964, 294, 38444, 21989, 11, 457, 456, 366, 383, 48, 14877, 6809, 689, 50714], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 203, "seek": 88200, "start": 889.0, "end": 893.0, "text": " the minimally informative devues are not CQs themselves.", "tokens": [50714, 264, 4464, 379, 27759, 1905, 1247, 366, 406, 383, 48, 82, 2969, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 204, "seek": 88200, "start": 893.0, "end": 896.0, "text": " So in particular, you don't know, they're not always the obvious ones, like in the previous", "tokens": [50914, 407, 294, 1729, 11, 291, 500, 380, 458, 11, 436, 434, 406, 1009, 264, 6322, 2306, 11, 411, 294, 264, 3894, 51064], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 205, "seek": 88200, "start": 896.0, "end": 897.0, "text": " example.", "tokens": [51064, 1365, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 206, "seek": 88200, "start": 897.0, "end": 902.0, "text": " I may be able, if we have time, I can give an example.", "tokens": [51114, 286, 815, 312, 1075, 11, 498, 321, 362, 565, 11, 286, 393, 976, 364, 1365, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 207, "seek": 88200, "start": 902.0, "end": 906.0, "text": " We also look, within the class of CQ views, say you're committed that you're going to", "tokens": [51364, 492, 611, 574, 11, 1951, 264, 1508, 295, 383, 48, 6809, 11, 584, 291, 434, 7784, 300, 291, 434, 516, 281, 51564], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 208, "seek": 88200, "start": 906.0, "end": 911.0, "text": " use CQ views, basic SQL queries, set semantics.", "tokens": [51564, 764, 383, 48, 6809, 11, 3875, 19200, 24109, 11, 992, 4361, 45298, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11878688335418701, "compression_ratio": 1.6058394160583942, "no_speech_prob": 0.015421347692608833}, {"id": 209, "seek": 91100, "start": 911.0, "end": 916.0, "text": " There's, for CQ utility queries, you have minimally informative CQ views.", "tokens": [50364, 821, 311, 11, 337, 383, 48, 14877, 24109, 11, 291, 362, 4464, 379, 27759, 383, 48, 6809, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09357667962710063, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.0003799428523052484}, {"id": 210, "seek": 91100, "start": 916.0, "end": 918.0, "text": " And these are almost the obvious ones.", "tokens": [50614, 400, 613, 366, 1920, 264, 6322, 2306, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09357667962710063, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.0003799428523052484}, {"id": 211, "seek": 91100, "start": 918.0, "end": 926.0, "text": " After you minimize the utility query, they turn out to be the same as the obvious ones.", "tokens": [50714, 2381, 291, 17522, 264, 14877, 14581, 11, 436, 1261, 484, 281, 312, 264, 912, 382, 264, 6322, 2306, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09357667962710063, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.0003799428523052484}, {"id": 212, "seek": 91100, "start": 926.0, "end": 929.0, "text": " So I'll come back to this a little bit later.", "tokens": [51114, 407, 286, 603, 808, 646, 281, 341, 257, 707, 857, 1780, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09357667962710063, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.0003799428523052484}, {"id": 213, "seek": 91100, "start": 929.0, "end": 935.0, "text": " But I wanted to say what we were doing in this paper, the perspective was to analyze the tradeoffs", "tokens": [51264, 583, 286, 1415, 281, 584, 437, 321, 645, 884, 294, 341, 3035, 11, 264, 4585, 390, 281, 12477, 264, 4923, 19231, 51564], "temperature": 0.0, "avg_logprob": -0.09357667962710063, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.0003799428523052484}, {"id": 214, "seek": 91100, "start": 935.0, "end": 937.0, "text": " in view design.", "tokens": [51564, 294, 1910, 1715, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09357667962710063, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.0003799428523052484}, {"id": 215, "seek": 93700, "start": 937.0, "end": 941.0, "text": " You look at questions of the form, are there distributed views that support this query,", "tokens": [50364, 509, 574, 412, 1651, 295, 264, 1254, 11, 366, 456, 12631, 6809, 300, 1406, 341, 14581, 11, 50564], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 216, "seek": 93700, "start": 941.0, "end": 944.0, "text": " but which do not reveal any information about this other query?", "tokens": [50564, 457, 597, 360, 406, 10658, 604, 1589, 466, 341, 661, 14581, 30, 50714], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 217, "seek": 93700, "start": 944.0, "end": 946.0, "text": " This is what we were interested here.", "tokens": [50714, 639, 307, 437, 321, 645, 3102, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 218, "seek": 93700, "start": 946.0, "end": 950.0, "text": " So back to Simon's and Dogstool, but making it a little bit more abstract.", "tokens": [50814, 407, 646, 281, 13193, 311, 293, 13472, 372, 1092, 11, 457, 1455, 309, 257, 707, 857, 544, 12649, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 219, "seek": 93700, "start": 950.0, "end": 954.0, "text": " Simon's has a binary relation R.", "tokens": [51014, 13193, 311, 575, 257, 17434, 9721, 497, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 220, "seek": 93700, "start": 954.0, "end": 957.0, "text": " Schostockstuhl has S and T binary relations.", "tokens": [51214, 2065, 555, 1560, 372, 3232, 75, 575, 318, 293, 314, 17434, 2299, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 221, "seek": 93700, "start": 957.0, "end": 961.0, "text": " And I'm interested in supporting the intersection query.", "tokens": [51364, 400, 286, 478, 3102, 294, 7231, 264, 15236, 14581, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 222, "seek": 93700, "start": 961.0, "end": 963.0, "text": " Well, obviously I could support this.", "tokens": [51564, 1042, 11, 2745, 286, 727, 1406, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16435383484426852, "compression_ratio": 1.6872586872586872, "no_speech_prob": 0.008184429258108139}, {"id": 223, "seek": 96300, "start": 963.0, "end": 967.0, "text": " I could design sources to answer Q.", "tokens": [50364, 286, 727, 1715, 7139, 281, 1867, 1249, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1707948908075556, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.007344317622482777}, {"id": 224, "seek": 96300, "start": 967.0, "end": 971.0, "text": " Each source just exports its data, all of R, all of S, all of T.", "tokens": [50564, 6947, 4009, 445, 31428, 1080, 1412, 11, 439, 295, 497, 11, 439, 295, 318, 11, 439, 295, 314, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1707948908075556, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.007344317622482777}, {"id": 225, "seek": 96300, "start": 971.0, "end": 975.0, "text": " But I want to know, well, is there some way to do this while keeping the query,", "tokens": [50764, 583, 286, 528, 281, 458, 11, 731, 11, 307, 456, 512, 636, 281, 360, 341, 1339, 5145, 264, 14581, 11, 50964], "temperature": 0.0, "avg_logprob": -0.1707948908075556, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.007344317622482777}, {"id": 226, "seek": 96300, "start": 975.0, "end": 977.0, "text": " there exists XRXX private?", "tokens": [50964, 456, 8198, 1783, 49, 55, 55, 4551, 30, 51064], "temperature": 0.0, "avg_logprob": -0.1707948908075556, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.007344317622482777}, {"id": 227, "seek": 96300, "start": 977.0, "end": 982.0, "text": " We analyze this for several notions of privacy, but one notion of privacy would be,", "tokens": [51064, 492, 12477, 341, 337, 2940, 35799, 295, 11427, 11, 457, 472, 10710, 295, 11427, 576, 312, 11, 51314], "temperature": 0.0, "avg_logprob": -0.1707948908075556, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.007344317622482777}, {"id": 228, "seek": 96300, "start": 982.0, "end": 989.0, "text": " on no instance, shouldn't the attacker be, should the external party know whether there exists XRXX is true?", "tokens": [51314, 322, 572, 5197, 11, 4659, 380, 264, 35871, 312, 11, 820, 264, 8320, 3595, 458, 1968, 456, 8198, 1783, 49, 55, 55, 307, 2074, 30, 51664], "temperature": 0.0, "avg_logprob": -0.1707948908075556, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.007344317622482777}, {"id": 229, "seek": 98900, "start": 989.0, "end": 994.0, "text": " It's sort of a negative version of privacy that has been in the database theory literature.", "tokens": [50364, 467, 311, 1333, 295, 257, 3671, 3037, 295, 11427, 300, 575, 668, 294, 264, 8149, 5261, 10394, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1179286865960984, "compression_ratio": 1.6654275092936803, "no_speech_prob": 0.0028443881310522556}, {"id": 230, "seek": 98900, "start": 994.0, "end": 998.0, "text": " I think it goes back to Mendelssohn as a student.", "tokens": [50614, 286, 519, 309, 1709, 646, 281, 40887, 1625, 539, 12071, 382, 257, 3107, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1179286865960984, "compression_ratio": 1.6654275092936803, "no_speech_prob": 0.0028443881310522556}, {"id": 231, "seek": 98900, "start": 998.0, "end": 1005.0, "text": " So intuitively, any views that support Q must disclose P on some instance.", "tokens": [50814, 407, 46506, 11, 604, 6809, 300, 1406, 1249, 1633, 36146, 430, 322, 512, 5197, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1179286865960984, "compression_ratio": 1.6654275092936803, "no_speech_prob": 0.0028443881310522556}, {"id": 232, "seek": 98900, "start": 1005.0, "end": 1010.0, "text": " And okay, it's actually not so, this example with no integrity constraints is not so difficult,", "tokens": [51164, 400, 1392, 11, 309, 311, 767, 406, 370, 11, 341, 1365, 365, 572, 16000, 18491, 307, 406, 370, 2252, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1179286865960984, "compression_ratio": 1.6654275092936803, "no_speech_prob": 0.0028443881310522556}, {"id": 233, "seek": 98900, "start": 1010.0, "end": 1014.0, "text": " but using the prior results, we can compute the minimal information views,", "tokens": [51414, 457, 1228, 264, 4059, 3542, 11, 321, 393, 14722, 264, 13206, 1589, 6809, 11, 51614], "temperature": 0.0, "avg_logprob": -0.1179286865960984, "compression_ratio": 1.6654275092936803, "no_speech_prob": 0.0028443881310522556}, {"id": 234, "seek": 98900, "start": 1014.0, "end": 1017.0, "text": " show that the minimal information views disclose this thing,", "tokens": [51614, 855, 300, 264, 13206, 1589, 6809, 36146, 341, 551, 11, 51764], "temperature": 0.0, "avg_logprob": -0.1179286865960984, "compression_ratio": 1.6654275092936803, "no_speech_prob": 0.0028443881310522556}, {"id": 235, "seek": 101700, "start": 1017.0, "end": 1021.0, "text": " and therefore, nothing you can do that supports Q,", "tokens": [50364, 293, 4412, 11, 1825, 291, 393, 360, 300, 9346, 1249, 11, 50564], "temperature": 0.0, "avg_logprob": -0.08740361914577255, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0031228619627654552}, {"id": 236, "seek": 101700, "start": 1021.0, "end": 1026.0, "text": " there's nothing you can do that can support Q, but make P a secret.", "tokens": [50564, 456, 311, 1825, 291, 393, 360, 300, 393, 1406, 1249, 11, 457, 652, 430, 257, 4054, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08740361914577255, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0031228619627654552}, {"id": 237, "seek": 101700, "start": 1026.0, "end": 1028.0, "text": " That's a simple case.", "tokens": [50814, 663, 311, 257, 2199, 1389, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08740361914577255, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0031228619627654552}, {"id": 238, "seek": 101700, "start": 1028.0, "end": 1036.0, "text": " We also, well, we have several examples where the privacy utility query is less trivial.", "tokens": [50914, 492, 611, 11, 731, 11, 321, 362, 2940, 5110, 689, 264, 11427, 14877, 14581, 307, 1570, 26703, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08740361914577255, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0031228619627654552}, {"id": 239, "seek": 101700, "start": 1036.0, "end": 1041.0, "text": " Here's one of them, we look at the case where there's partial synchronization mechanisms.", "tokens": [51314, 1692, 311, 472, 295, 552, 11, 321, 574, 412, 264, 1389, 689, 456, 311, 14641, 19331, 2144, 15902, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08740361914577255, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0031228619627654552}, {"id": 240, "seek": 104100, "start": 1042.0, "end": 1045.0, "text": " We look mostly at replication as a synchronization mechanism.", "tokens": [50414, 492, 574, 5240, 412, 39911, 382, 257, 19331, 2144, 7513, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11616799464592567, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002322802320122719}, {"id": 241, "seek": 104100, "start": 1045.0, "end": 1048.0, "text": " Now Simons and Dogstall are not completely autonomous.", "tokens": [50564, 823, 3998, 892, 293, 13472, 372, 336, 366, 406, 2584, 23797, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11616799464592567, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002322802320122719}, {"id": 242, "seek": 104100, "start": 1048.0, "end": 1056.0, "text": " There's a relation S, the relation S that is in the query is replicated between Simons and Dogstall.", "tokens": [50714, 821, 311, 257, 9721, 318, 11, 264, 9721, 318, 300, 307, 294, 264, 14581, 307, 46365, 1296, 3998, 892, 293, 13472, 372, 336, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11616799464592567, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002322802320122719}, {"id": 243, "seek": 104100, "start": 1056.0, "end": 1058.0, "text": " But nothing else, there's no other mechanism.", "tokens": [51114, 583, 1825, 1646, 11, 456, 311, 572, 661, 7513, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11616799464592567, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002322802320122719}, {"id": 244, "seek": 104100, "start": 1058.0, "end": 1063.0, "text": " So obviously they need to communicate as data updates come in in order to do this.", "tokens": [51214, 407, 2745, 436, 643, 281, 7890, 382, 1412, 9205, 808, 294, 294, 1668, 281, 360, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11616799464592567, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002322802320122719}, {"id": 245, "seek": 104100, "start": 1063.0, "end": 1067.0, "text": " And we have the same utility query, and now we ask the same question,", "tokens": [51464, 400, 321, 362, 264, 912, 14877, 14581, 11, 293, 586, 321, 1029, 264, 912, 1168, 11, 51664], "temperature": 0.0, "avg_logprob": -0.11616799464592567, "compression_ratio": 1.6910569105691058, "no_speech_prob": 0.002322802320122719}, {"id": 246, "seek": 106700, "start": 1067.0, "end": 1073.0, "text": " can we support this query while keeping this, there exists XRX private?", "tokens": [50364, 393, 321, 1406, 341, 14581, 1339, 5145, 341, 11, 456, 8198, 1783, 49, 55, 4551, 30, 50664], "temperature": 0.0, "avg_logprob": -0.15534137340074175, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0071195256896317005}, {"id": 247, "seek": 106700, "start": 1073.0, "end": 1079.0, "text": " And the answer now turns out to be yes, there is an interface mechanism,", "tokens": [50664, 400, 264, 1867, 586, 4523, 484, 281, 312, 2086, 11, 456, 307, 364, 9226, 7513, 11, 50964], "temperature": 0.0, "avg_logprob": -0.15534137340074175, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0071195256896317005}, {"id": 248, "seek": 106700, "start": 1079.0, "end": 1084.0, "text": " actually a view of a certain sort that can achieve this trade-off.", "tokens": [50964, 767, 257, 1910, 295, 257, 1629, 1333, 300, 393, 4584, 341, 4923, 12, 4506, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15534137340074175, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0071195256896317005}, {"id": 249, "seek": 106700, "start": 1084.0, "end": 1089.0, "text": " It can support Q while keeping P a secret.", "tokens": [51214, 467, 393, 1406, 1249, 1339, 5145, 430, 257, 4054, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15534137340074175, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0071195256896317005}, {"id": 250, "seek": 106700, "start": 1089.0, "end": 1096.0, "text": " So this is just meant like what were we trying to do and what kinds of results we have.", "tokens": [51464, 407, 341, 307, 445, 4140, 411, 437, 645, 321, 1382, 281, 360, 293, 437, 3685, 295, 3542, 321, 362, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15534137340074175, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0071195256896317005}, {"id": 251, "seek": 109600, "start": 1096.0, "end": 1101.0, "text": " We actually have a general result about what you can do with certain kinds of replication", "tokens": [50364, 492, 767, 362, 257, 2674, 1874, 466, 437, 291, 393, 360, 365, 1629, 3685, 295, 39911, 50614], "temperature": 0.0, "avg_logprob": -0.09238326272299123, "compression_ratio": 1.5236051502145922, "no_speech_prob": 0.0014321878552436829}, {"id": 252, "seek": 109600, "start": 1101.0, "end": 1106.0, "text": " in managing these trade-offs between utility and secrecy.", "tokens": [50614, 294, 11642, 613, 4923, 12, 19231, 1296, 14877, 293, 34432, 1344, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09238326272299123, "compression_ratio": 1.5236051502145922, "no_speech_prob": 0.0014321878552436829}, {"id": 253, "seek": 109600, "start": 1106.0, "end": 1110.0, "text": " So what is the moral I wanted to give?", "tokens": [50864, 407, 437, 307, 264, 9723, 286, 1415, 281, 976, 30, 51064], "temperature": 0.0, "avg_logprob": -0.09238326272299123, "compression_ratio": 1.5236051502145922, "no_speech_prob": 0.0014321878552436829}, {"id": 254, "seek": 109600, "start": 1110.0, "end": 1118.0, "text": " Well, first, it's not really an answer, but it's my attempt at an answer.", "tokens": [51064, 1042, 11, 700, 11, 309, 311, 406, 534, 364, 1867, 11, 457, 309, 311, 452, 5217, 412, 364, 1867, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09238326272299123, "compression_ratio": 1.5236051502145922, "no_speech_prob": 0.0014321878552436829}, {"id": 255, "seek": 109600, "start": 1118.0, "end": 1123.0, "text": " We were getting at the idea of comparing the expressiveness of different interface mechanisms.", "tokens": [51464, 492, 645, 1242, 412, 264, 1558, 295, 15763, 264, 5109, 8477, 295, 819, 9226, 15902, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09238326272299123, "compression_ratio": 1.5236051502145922, "no_speech_prob": 0.0014321878552436829}, {"id": 256, "seek": 112300, "start": 1123.0, "end": 1130.0, "text": " So in this case, what can you do with a CQ view versus what can you do with relational algebra views?", "tokens": [50364, 407, 294, 341, 1389, 11, 437, 393, 291, 360, 365, 257, 383, 48, 1910, 5717, 437, 393, 291, 360, 365, 38444, 21989, 6809, 30, 50714], "temperature": 0.0, "avg_logprob": -0.13481850459657865, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.016142316162586212}, {"id": 257, "seek": 112300, "start": 1130.0, "end": 1132.0, "text": " What can you do with arbitrary functions?", "tokens": [50714, 708, 393, 291, 360, 365, 23211, 6828, 30, 50814], "temperature": 0.0, "avg_logprob": -0.13481850459657865, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.016142316162586212}, {"id": 258, "seek": 112300, "start": 1132.0, "end": 1137.0, "text": " I thought this is something that is an interesting direction that I haven't seen much of.", "tokens": [50814, 286, 1194, 341, 307, 746, 300, 307, 364, 1880, 3513, 300, 286, 2378, 380, 1612, 709, 295, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13481850459657865, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.016142316162586212}, {"id": 259, "seek": 112300, "start": 1137.0, "end": 1141.0, "text": " And you can look at the same thing with more interactive method mechanism.", "tokens": [51064, 400, 291, 393, 574, 412, 264, 912, 551, 365, 544, 15141, 3170, 7513, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13481850459657865, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.016142316162586212}, {"id": 260, "seek": 112300, "start": 1141.0, "end": 1145.0, "text": " We didn't do it, but it was an obvious thing as well.", "tokens": [51264, 492, 994, 380, 360, 309, 11, 457, 309, 390, 364, 6322, 551, 382, 731, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13481850459657865, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.016142316162586212}, {"id": 261, "seek": 112300, "start": 1145.0, "end": 1151.0, "text": " Suppose you have access methods, for instance, you can now, and now you can interactively ask multiple queries.", "tokens": [51464, 21360, 291, 362, 2105, 7150, 11, 337, 5197, 11, 291, 393, 586, 11, 293, 586, 291, 393, 4648, 3413, 1029, 3866, 24109, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13481850459657865, "compression_ratio": 1.7490774907749078, "no_speech_prob": 0.016142316162586212}, {"id": 262, "seek": 115100, "start": 1151.0, "end": 1154.0, "text": " And then you achieve these other kinds of trade-offs.", "tokens": [50364, 400, 550, 291, 4584, 613, 661, 3685, 295, 4923, 12, 19231, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1897417261630674, "compression_ratio": 1.6, "no_speech_prob": 0.02515062503516674}, {"id": 263, "seek": 115100, "start": 1154.0, "end": 1159.0, "text": " And then the second thing I want to highlight is this notion of information theoretic determinacy,", "tokens": [50514, 400, 550, 264, 1150, 551, 286, 528, 281, 5078, 307, 341, 10710, 295, 1589, 14308, 299, 15957, 2551, 11, 50764], "temperature": 0.0, "avg_logprob": -0.1897417261630674, "compression_ratio": 1.6, "no_speech_prob": 0.02515062503516674}, {"id": 264, "seek": 115100, "start": 1159.0, "end": 1163.0, "text": " the database theorists information theory.", "tokens": [50764, 264, 8149, 27423, 1751, 1589, 5261, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1897417261630674, "compression_ratio": 1.6, "no_speech_prob": 0.02515062503516674}, {"id": 265, "seek": 115100, "start": 1163.0, "end": 1168.0, "text": " This has been used certainly by a number of people.", "tokens": [50964, 639, 575, 668, 1143, 3297, 538, 257, 1230, 295, 561, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1897417261630674, "compression_ratio": 1.6, "no_speech_prob": 0.02515062503516674}, {"id": 266, "seek": 115100, "start": 1168.0, "end": 1174.0, "text": " Paris and Dan and other people at Washington used it in the pre-oppressing work.", "tokens": [51214, 8380, 293, 3394, 293, 661, 561, 412, 6149, 1143, 309, 294, 264, 659, 12, 17158, 18605, 589, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1897417261630674, "compression_ratio": 1.6, "no_speech_prob": 0.02515062503516674}, {"id": 267, "seek": 117400, "start": 1174.0, "end": 1183.0, "text": " I've used it in many papers, but quickly on information disclosure with Balder, Pierre, other people, also KR people at Oxford.", "tokens": [50364, 286, 600, 1143, 309, 294, 867, 10577, 11, 457, 2661, 322, 1589, 30392, 365, 13140, 1068, 11, 28461, 11, 661, 561, 11, 611, 37522, 561, 412, 24786, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 268, "seek": 117400, "start": 1183.0, "end": 1186.0, "text": " I think also Daniel Kieffer in some of his work.", "tokens": [50814, 286, 519, 611, 8033, 591, 414, 38145, 294, 512, 295, 702, 589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 269, "seek": 117400, "start": 1186.0, "end": 1188.0, "text": " Yes, yes.", "tokens": [50964, 1079, 11, 2086, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 270, "seek": 117400, "start": 1188.0, "end": 1191.0, "text": " But I don't think it's really been developed rigorously and uniformly.", "tokens": [51064, 583, 286, 500, 380, 519, 309, 311, 534, 668, 4743, 42191, 5098, 293, 48806, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 271, "seek": 117400, "start": 1191.0, "end": 1195.0, "text": " Here you have some information lattice on views.", "tokens": [51214, 1692, 291, 362, 512, 1589, 34011, 322, 6809, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 272, "seek": 117400, "start": 1195.0, "end": 1200.0, "text": " That's the idea actually in the pricing work and in our work.", "tokens": [51414, 663, 311, 264, 1558, 767, 294, 264, 17621, 589, 293, 294, 527, 589, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 273, "seek": 117400, "start": 1200.0, "end": 1203.0, "text": " And you can begin to explore this.", "tokens": [51664, 400, 291, 393, 1841, 281, 6839, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16553293983891326, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.05739794299006462}, {"id": 274, "seek": 120400, "start": 1204.0, "end": 1213.0, "text": " So I'll come back to this in a little bit, but I want to talk now a little bit about what's the idea of this other work about indistinguishability this year.", "tokens": [50364, 407, 286, 603, 808, 646, 281, 341, 294, 257, 707, 857, 11, 457, 286, 528, 281, 751, 586, 257, 707, 857, 466, 437, 311, 264, 1558, 295, 341, 661, 589, 466, 1016, 468, 7050, 742, 2310, 341, 1064, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11417773246765137, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.0018666781252250075}, {"id": 275, "seek": 120400, "start": 1213.0, "end": 1215.0, "text": " And it's motivated.", "tokens": [50814, 400, 309, 311, 14515, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11417773246765137, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.0018666781252250075}, {"id": 276, "seek": 120400, "start": 1215.0, "end": 1221.0, "text": " Okay, so first, an indistinguishability relation is just an equivalence relation on databases.", "tokens": [50914, 1033, 11, 370, 700, 11, 364, 1016, 468, 7050, 742, 2310, 9721, 307, 445, 364, 9052, 655, 9721, 322, 22380, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11417773246765137, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.0018666781252250075}, {"id": 277, "seek": 120400, "start": 1221.0, "end": 1227.0, "text": " I say here are the two, here's the pairs of databases that are equivalent.", "tokens": [51214, 286, 584, 510, 366, 264, 732, 11, 510, 311, 264, 15494, 295, 22380, 300, 366, 10344, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11417773246765137, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.0018666781252250075}, {"id": 278, "seek": 120400, "start": 1227.0, "end": 1230.0, "text": " And this gives an interface.", "tokens": [51514, 400, 341, 2709, 364, 9226, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11417773246765137, "compression_ratio": 1.724770642201835, "no_speech_prob": 0.0018666781252250075}, {"id": 279, "seek": 123000, "start": 1230.0, "end": 1232.0, "text": " Somebody is interacting with the database.", "tokens": [50364, 13463, 307, 18017, 365, 264, 8149, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 280, "seek": 123000, "start": 1232.0, "end": 1234.0, "text": " What is the queries they could answer?", "tokens": [50464, 708, 307, 264, 24109, 436, 727, 1867, 30, 50564], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 281, "seek": 123000, "start": 1234.0, "end": 1236.0, "text": " Well, there's two possible semantics.", "tokens": [50564, 1042, 11, 456, 311, 732, 1944, 4361, 45298, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 282, "seek": 123000, "start": 1236.0, "end": 1246.0, "text": " One is that they can answer any query using the certain answer semantics and the certain answer semantics would be, well, what they're really seeing is the entire equivalence class of this database.", "tokens": [50664, 1485, 307, 300, 436, 393, 1867, 604, 14581, 1228, 264, 1629, 1867, 4361, 45298, 293, 264, 1629, 1867, 4361, 45298, 576, 312, 11, 731, 11, 437, 436, 434, 534, 2577, 307, 264, 2302, 9052, 655, 1508, 295, 341, 8149, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 283, "seek": 123000, "start": 1246.0, "end": 1250.0, "text": " And they get the intersection of the answers of the database.", "tokens": [51164, 400, 436, 483, 264, 15236, 295, 264, 6338, 295, 264, 8149, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 284, "seek": 123000, "start": 1250.0, "end": 1253.0, "text": " There's another semantics which says, oh, it's the answerability semantics.", "tokens": [51364, 821, 311, 1071, 4361, 45298, 597, 1619, 11, 1954, 11, 309, 311, 264, 1867, 2310, 4361, 45298, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 285, "seek": 123000, "start": 1253.0, "end": 1259.0, "text": " They can only ask queries where the answer is invariant under this equivalence relation.", "tokens": [51514, 814, 393, 787, 1029, 24109, 689, 264, 1867, 307, 33270, 394, 833, 341, 9052, 655, 9721, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11092294858196589, "compression_ratio": 2.0185185185185186, "no_speech_prob": 0.008059841580688953}, {"id": 286, "seek": 125900, "start": 1259.0, "end": 1266.0, "text": " So this would be more like what's called feasibility in access patterns or answerability in views.", "tokens": [50364, 407, 341, 576, 312, 544, 411, 437, 311, 1219, 21781, 2841, 294, 2105, 8294, 420, 1867, 2310, 294, 6809, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06122986775524211, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0028889935929328203}, {"id": 287, "seek": 125900, "start": 1266.0, "end": 1270.0, "text": " So the main point is you have some way of specifying an equivalence relation.", "tokens": [50714, 407, 264, 2135, 935, 307, 291, 362, 512, 636, 295, 1608, 5489, 364, 9052, 655, 9721, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06122986775524211, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0028889935929328203}, {"id": 288, "seek": 125900, "start": 1270.0, "end": 1274.0, "text": " I'll talk about some ways you could specify an equivalence relation that's giving you an interface.", "tokens": [50914, 286, 603, 751, 466, 512, 2098, 291, 727, 16500, 364, 9052, 655, 9721, 300, 311, 2902, 291, 364, 9226, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06122986775524211, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0028889935929328203}, {"id": 289, "seek": 125900, "start": 1274.0, "end": 1282.0, "text": " And it's interesting in that it's a way of giving an interface that's different from what we're used to.", "tokens": [51114, 400, 309, 311, 1880, 294, 300, 309, 311, 257, 636, 295, 2902, 364, 9226, 300, 311, 819, 490, 437, 321, 434, 1143, 281, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06122986775524211, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0028889935929328203}, {"id": 290, "seek": 125900, "start": 1282.0, "end": 1285.0, "text": " Okay, you can of course think of this as a view.", "tokens": [51514, 1033, 11, 291, 393, 295, 1164, 519, 295, 341, 382, 257, 1910, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06122986775524211, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.0028889935929328203}, {"id": 291, "seek": 128500, "start": 1285.0, "end": 1293.0, "text": " A view, I said from this general mathematical point of view, it's a function on the instance or the local instance that exports some stuff.", "tokens": [50364, 316, 1910, 11, 286, 848, 490, 341, 2674, 18894, 935, 295, 1910, 11, 309, 311, 257, 2445, 322, 264, 5197, 420, 264, 2654, 5197, 300, 31428, 512, 1507, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11251802029817001, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.012427937239408493}, {"id": 292, "seek": 128500, "start": 1293.0, "end": 1297.0, "text": " And you can say what I'm exporting is the equivalence class.", "tokens": [50764, 400, 291, 393, 584, 437, 286, 478, 44686, 307, 264, 9052, 655, 1508, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11251802029817001, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.012427937239408493}, {"id": 293, "seek": 128500, "start": 1297.0, "end": 1299.0, "text": " But of course, we're representing it differently.", "tokens": [50964, 583, 295, 1164, 11, 321, 434, 13460, 309, 7614, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11251802029817001, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.012427937239408493}, {"id": 294, "seek": 128500, "start": 1299.0, "end": 1303.0, "text": " Let's give you an example.", "tokens": [51064, 961, 311, 976, 291, 364, 1365, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11251802029817001, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.012427937239408493}, {"id": 295, "seek": 128500, "start": 1303.0, "end": 1309.0, "text": " I can say G and G prime are indistinguishable if they have the same triangles.", "tokens": [51264, 286, 393, 584, 460, 293, 460, 5835, 366, 1016, 468, 7050, 742, 712, 498, 436, 362, 264, 912, 29896, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11251802029817001, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.012427937239408493}, {"id": 296, "seek": 130900, "start": 1309.0, "end": 1312.0, "text": " So these are two graph databases.", "tokens": [50364, 407, 613, 366, 732, 4295, 22380, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10724581469286669, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.00433117151260376}, {"id": 297, "seek": 130900, "start": 1312.0, "end": 1321.0, "text": " I can say for all x1, x2, x3, they're a triangle in database G if and only if they're a triangle in G prime.", "tokens": [50514, 286, 393, 584, 337, 439, 2031, 16, 11, 2031, 17, 11, 2031, 18, 11, 436, 434, 257, 13369, 294, 8149, 460, 498, 293, 787, 498, 436, 434, 257, 13369, 294, 460, 5835, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10724581469286669, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.00433117151260376}, {"id": 298, "seek": 130900, "start": 1321.0, "end": 1325.0, "text": " And this, that's an equivalence relation.", "tokens": [50964, 400, 341, 11, 300, 311, 364, 9052, 655, 9721, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10724581469286669, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.00433117151260376}, {"id": 299, "seek": 130900, "start": 1325.0, "end": 1328.0, "text": " It's actually a first order indistinguishability relation.", "tokens": [51164, 467, 311, 767, 257, 700, 1668, 1016, 468, 7050, 742, 2310, 9721, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10724581469286669, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.00433117151260376}, {"id": 300, "seek": 130900, "start": 1328.0, "end": 1333.0, "text": " It's given by a first order sentence in the language of two copies of the schema.", "tokens": [51314, 467, 311, 2212, 538, 257, 700, 1668, 8174, 294, 264, 2856, 295, 732, 14341, 295, 264, 34078, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10724581469286669, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.00433117151260376}, {"id": 301, "seek": 130900, "start": 1333.0, "end": 1337.0, "text": " So it's first order, not in the sense of what we usually say.", "tokens": [51564, 407, 309, 311, 700, 1668, 11, 406, 294, 264, 2020, 295, 437, 321, 2673, 584, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10724581469286669, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.00433117151260376}, {"id": 302, "seek": 133700, "start": 1337.0, "end": 1344.0, "text": " Now, if you take a typical first order sentence in the language of two schemas, it's not going to define an equivalence relation.", "tokens": [50364, 823, 11, 498, 291, 747, 257, 7476, 700, 1668, 8174, 294, 264, 2856, 295, 732, 22627, 296, 11, 309, 311, 406, 516, 281, 6964, 364, 9052, 655, 9721, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07319300845988745, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0002453605702612549}, {"id": 303, "seek": 133700, "start": 1344.0, "end": 1347.0, "text": " This is a semantic property.", "tokens": [50714, 639, 307, 257, 47982, 4707, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07319300845988745, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0002453605702612549}, {"id": 304, "seek": 133700, "start": 1347.0, "end": 1356.0, "text": " These things for all x1, x2, x3, and if and only if between G and G prime, that's going to be an equivalence relation, but other things are not.", "tokens": [50864, 1981, 721, 337, 439, 2031, 16, 11, 2031, 17, 11, 2031, 18, 11, 293, 498, 293, 787, 498, 1296, 460, 293, 460, 5835, 11, 300, 311, 516, 281, 312, 364, 9052, 655, 9721, 11, 457, 661, 721, 366, 406, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07319300845988745, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0002453605702612549}, {"id": 305, "seek": 133700, "start": 1356.0, "end": 1362.0, "text": " So I'm interested in the first order sentences in two schemas that will do this.", "tokens": [51314, 407, 286, 478, 3102, 294, 264, 700, 1668, 16579, 294, 732, 22627, 296, 300, 486, 360, 341, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07319300845988745, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.0002453605702612549}, {"id": 306, "seek": 136200, "start": 1362.0, "end": 1366.0, "text": " And I can generalize whether triangle example is one of them.", "tokens": [50364, 400, 286, 393, 2674, 1125, 1968, 13369, 1365, 307, 472, 295, 552, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13565166100211765, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.009410777129232883}, {"id": 307, "seek": 136200, "start": 1366.0, "end": 1368.0, "text": " You can give me any relational algebra views.", "tokens": [50564, 509, 393, 976, 385, 604, 38444, 21989, 6809, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13565166100211765, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.009410777129232883}, {"id": 308, "seek": 136200, "start": 1368.0, "end": 1372.0, "text": " They give a first order indistinguishability relation, the same kind of thing.", "tokens": [50664, 814, 976, 257, 700, 1668, 1016, 468, 7050, 742, 2310, 9721, 11, 264, 912, 733, 295, 551, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13565166100211765, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.009410777129232883}, {"id": 309, "seek": 136200, "start": 1372.0, "end": 1375.0, "text": " Well, one database satisfies the views.", "tokens": [50864, 1042, 11, 472, 8149, 44271, 264, 6809, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13565166100211765, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.009410777129232883}, {"id": 310, "seek": 136200, "start": 1375.0, "end": 1383.0, "text": " For every tuple in the union of the databases, it's in the view result in one if and only if it's the view result of the other.", "tokens": [51014, 1171, 633, 2604, 781, 294, 264, 11671, 295, 264, 22380, 11, 309, 311, 294, 264, 1910, 1874, 294, 472, 498, 293, 787, 498, 309, 311, 264, 1910, 1874, 295, 264, 661, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13565166100211765, "compression_ratio": 1.669811320754717, "no_speech_prob": 0.009410777129232883}, {"id": 311, "seek": 138300, "start": 1383.0, "end": 1392.0, "text": " I'm using this prime notation just like the G and G prime to say the prime copy of the database agrees with the unprime copy on this derived data.", "tokens": [50364, 286, 478, 1228, 341, 5835, 24657, 445, 411, 264, 460, 293, 460, 5835, 281, 584, 264, 5835, 5055, 295, 264, 8149, 26383, 365, 264, 517, 1424, 1312, 5055, 322, 341, 18949, 1412, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 312, "seek": 138300, "start": 1392.0, "end": 1393.0, "text": " Michael?", "tokens": [50814, 5116, 30, 50864], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 313, "seek": 138300, "start": 1393.0, "end": 1394.0, "text": " Yeah?", "tokens": [50864, 865, 30, 50914], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 314, "seek": 138300, "start": 1394.0, "end": 1397.0, "text": " The universal quantifiers, are they quantifying over which domain?", "tokens": [50914, 440, 11455, 4426, 23463, 11, 366, 436, 4426, 5489, 670, 597, 9274, 30, 51064], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 315, "seek": 138300, "start": 1397.0, "end": 1403.0, "text": " They're quantifying over the union of the active domains.", "tokens": [51064, 814, 434, 4426, 5489, 670, 264, 11671, 295, 264, 4967, 25514, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 316, "seek": 138300, "start": 1403.0, "end": 1405.0, "text": " So this came up in the prior work.", "tokens": [51364, 407, 341, 1361, 493, 294, 264, 4059, 589, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 317, "seek": 138300, "start": 1405.0, "end": 1411.0, "text": " I said these minimally informative views exist for arbitrary utility queries.", "tokens": [51464, 286, 848, 613, 4464, 379, 27759, 6809, 2514, 337, 23211, 14877, 24109, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13254318237304688, "compression_ratio": 1.6764705882352942, "no_speech_prob": 0.1365235447883606}, {"id": 318, "seek": 141100, "start": 1411.0, "end": 1412.0, "text": " How do they work?", "tokens": [50364, 1012, 360, 436, 589, 30, 50414], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 319, "seek": 141100, "start": 1412.0, "end": 1417.0, "text": " Actually, the way we can present them is, as I said, indistinguishability relation.", "tokens": [50414, 5135, 11, 264, 636, 321, 393, 1974, 552, 307, 11, 382, 286, 848, 11, 1016, 468, 7050, 742, 2310, 9721, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 320, "seek": 141100, "start": 1417.0, "end": 1423.0, "text": " Obviously, we can show that you can't always get, in very natural cases, you can't get relational algebra.", "tokens": [50664, 7580, 11, 321, 393, 855, 300, 291, 393, 380, 1009, 483, 11, 294, 588, 3303, 3331, 11, 291, 393, 380, 483, 38444, 21989, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 321, "seek": 141100, "start": 1423.0, "end": 1427.0, "text": " But you can always get this indistinguishability relation presentation.", "tokens": [50964, 583, 291, 393, 1009, 483, 341, 1016, 468, 7050, 742, 2310, 9721, 5860, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 322, "seek": 141100, "start": 1427.0, "end": 1432.0, "text": " Actually, I think a second order indistinguishability relation.", "tokens": [51164, 5135, 11, 286, 519, 257, 1150, 1668, 1016, 468, 7050, 742, 2310, 9721, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 323, "seek": 141100, "start": 1432.0, "end": 1435.0, "text": " And then there was this example I talked about with replication.", "tokens": [51414, 400, 550, 456, 390, 341, 1365, 286, 2825, 466, 365, 39911, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 324, "seek": 141100, "start": 1435.0, "end": 1440.0, "text": " I said, well, we could support Q without revealing P.", "tokens": [51564, 286, 848, 11, 731, 11, 321, 727, 1406, 1249, 1553, 23983, 430, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1267163092348756, "compression_ratio": 1.8975409836065573, "no_speech_prob": 0.014722215011715889}, {"id": 325, "seek": 144000, "start": 1440.0, "end": 1441.0, "text": " How did we do this?", "tokens": [50364, 1012, 630, 321, 360, 341, 30, 50414], "temperature": 0.0, "avg_logprob": -0.07315680559943705, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0022869573440402746}, {"id": 326, "seek": 144000, "start": 1441.0, "end": 1444.0, "text": " We needed some interface mechanism beyond relational algebra views.", "tokens": [50414, 492, 2978, 512, 9226, 7513, 4399, 38444, 21989, 6809, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07315680559943705, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0022869573440402746}, {"id": 327, "seek": 144000, "start": 1444.0, "end": 1447.0, "text": " We could show that you couldn't use any generic query to do this.", "tokens": [50564, 492, 727, 855, 300, 291, 2809, 380, 764, 604, 19577, 14581, 281, 360, 341, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07315680559943705, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0022869573440402746}, {"id": 328, "seek": 144000, "start": 1447.0, "end": 1453.0, "text": " But we define a simple indistinguishability relation that actually looks at the data values.", "tokens": [50714, 583, 321, 6964, 257, 2199, 1016, 468, 7050, 742, 2310, 9721, 300, 767, 1542, 412, 264, 1412, 4190, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07315680559943705, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0022869573440402746}, {"id": 329, "seek": 144000, "start": 1453.0, "end": 1456.0, "text": " And we show that's the way you can achieve this trade-off.", "tokens": [51014, 400, 321, 855, 300, 311, 264, 636, 291, 393, 4584, 341, 4923, 12, 4506, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07315680559943705, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0022869573440402746}, {"id": 330, "seek": 144000, "start": 1456.0, "end": 1465.0, "text": " So you can achieve certain trade-offs with indistinguishability that you can't achieve with traditional views.", "tokens": [51164, 407, 291, 393, 4584, 1629, 4923, 12, 19231, 365, 1016, 468, 7050, 742, 2310, 300, 291, 393, 380, 4584, 365, 5164, 6809, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07315680559943705, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0022869573440402746}, {"id": 331, "seek": 146500, "start": 1465.0, "end": 1467.0, "text": " Okay, this is a super general notion.", "tokens": [50364, 1033, 11, 341, 307, 257, 1687, 2674, 10710, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10776449453951133, "compression_ratio": 1.7848101265822784, "no_speech_prob": 0.03356373310089111}, {"id": 332, "seek": 146500, "start": 1467.0, "end": 1473.0, "text": " We studied this mostly over infinite structures, focusing on first order and infinitary logic.", "tokens": [50464, 492, 9454, 341, 5240, 670, 13785, 9227, 11, 8416, 322, 700, 1668, 293, 7193, 4109, 9952, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10776449453951133, "compression_ratio": 1.7848101265822784, "no_speech_prob": 0.03356373310089111}, {"id": 333, "seek": 146500, "start": 1473.0, "end": 1483.0, "text": " There are a few results that I can mention that apply to the finite case, to finite models, to databases.", "tokens": [50764, 821, 366, 257, 1326, 3542, 300, 286, 393, 2152, 300, 3079, 281, 264, 19362, 1389, 11, 281, 19362, 5245, 11, 281, 22380, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10776449453951133, "compression_ratio": 1.7848101265822784, "no_speech_prob": 0.03356373310089111}, {"id": 334, "seek": 146500, "start": 1483.0, "end": 1487.0, "text": " I said that traditional relational algebra views give a first order indistinguishability relation.", "tokens": [51264, 286, 848, 300, 5164, 38444, 21989, 6809, 976, 257, 700, 1668, 1016, 468, 7050, 742, 2310, 9721, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10776449453951133, "compression_ratio": 1.7848101265822784, "no_speech_prob": 0.03356373310089111}, {"id": 335, "seek": 146500, "start": 1487.0, "end": 1492.0, "text": " And you can ask, well, what are the other first order indistinguishability relations?", "tokens": [51464, 400, 291, 393, 1029, 11, 731, 11, 437, 366, 264, 661, 700, 1668, 1016, 468, 7050, 742, 2310, 2299, 30, 51714], "temperature": 0.0, "avg_logprob": -0.10776449453951133, "compression_ratio": 1.7848101265822784, "no_speech_prob": 0.03356373310089111}, {"id": 336, "seek": 149200, "start": 1492.0, "end": 1499.0, "text": " Well, nested relational calculus gives you another class of first order indistinguishability relations.", "tokens": [50364, 1042, 11, 15646, 292, 38444, 33400, 2709, 291, 1071, 1508, 295, 700, 1668, 1016, 468, 7050, 742, 2310, 2299, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09184153741147338, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0054679615423083305}, {"id": 337, "seek": 149200, "start": 1499.0, "end": 1504.0, "text": " I don't want to explain what nested data is, a nested relational calculus, but I'll explain by example.", "tokens": [50714, 286, 500, 380, 528, 281, 2903, 437, 15646, 292, 1412, 307, 11, 257, 15646, 292, 38444, 33400, 11, 457, 286, 603, 2903, 538, 1365, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09184153741147338, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0054679615423083305}, {"id": 338, "seek": 149200, "start": 1504.0, "end": 1511.0, "text": " If I have a binary relation, rxy, I want to export all the adjacency sets of elements in my database.", "tokens": [50964, 759, 286, 362, 257, 17434, 9721, 11, 367, 12876, 11, 286, 528, 281, 10725, 439, 264, 22940, 3020, 6352, 295, 4959, 294, 452, 8149, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09184153741147338, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0054679615423083305}, {"id": 339, "seek": 149200, "start": 1511.0, "end": 1514.0, "text": " This is a set of sets for every element.", "tokens": [51314, 639, 307, 257, 992, 295, 6352, 337, 633, 4478, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09184153741147338, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0054679615423083305}, {"id": 340, "seek": 149200, "start": 1514.0, "end": 1517.0, "text": " I take the set of things that are adjacent to it.", "tokens": [51464, 286, 747, 264, 992, 295, 721, 300, 366, 24441, 281, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09184153741147338, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0054679615423083305}, {"id": 341, "seek": 149200, "start": 1517.0, "end": 1520.0, "text": " And then I take the set of sets by varying the x.", "tokens": [51614, 400, 550, 286, 747, 264, 992, 295, 6352, 538, 22984, 264, 2031, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09184153741147338, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0054679615423083305}, {"id": 342, "seek": 152000, "start": 1520.0, "end": 1521.0, "text": " Well, that's a set of sets.", "tokens": [50364, 1042, 11, 300, 311, 257, 992, 295, 6352, 13, 50414], "temperature": 0.0, "avg_logprob": -0.0857555231916795, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0012841452844440937}, {"id": 343, "seek": 152000, "start": 1521.0, "end": 1529.0, "text": " I can say two databases agree on the set of sets in first order logic in this dual signature, the r and r prime signature.", "tokens": [50414, 286, 393, 584, 732, 22380, 3986, 322, 264, 992, 295, 6352, 294, 700, 1668, 9952, 294, 341, 11848, 13397, 11, 264, 367, 293, 367, 5835, 13397, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0857555231916795, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0012841452844440937}, {"id": 344, "seek": 152000, "start": 1529.0, "end": 1532.0, "text": " For all x, there exists x prime.", "tokens": [50814, 1171, 439, 2031, 11, 456, 8198, 2031, 5835, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0857555231916795, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0012841452844440937}, {"id": 345, "seek": 152000, "start": 1532.0, "end": 1539.0, "text": " For every node in one, there's a node in the other database whose adjacency set agrees.", "tokens": [50964, 1171, 633, 9984, 294, 472, 11, 456, 311, 257, 9984, 294, 264, 661, 8149, 6104, 22940, 3020, 992, 26383, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0857555231916795, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0012841452844440937}, {"id": 346, "seek": 152000, "start": 1539.0, "end": 1546.0, "text": " So in general, okay, I can do sets of sets of sets in the same way.", "tokens": [51314, 407, 294, 2674, 11, 1392, 11, 286, 393, 360, 6352, 295, 6352, 295, 6352, 294, 264, 912, 636, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0857555231916795, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0012841452844440937}, {"id": 347, "seek": 152000, "start": 1546.0, "end": 1548.0, "text": " That's the general idea of nested relational calculus.", "tokens": [51664, 663, 311, 264, 2674, 1558, 295, 15646, 292, 38444, 33400, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0857555231916795, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0012841452844440937}, {"id": 348, "seek": 154800, "start": 1548.0, "end": 1550.0, "text": " I build up these sets of sets of sets.", "tokens": [50364, 286, 1322, 493, 613, 6352, 295, 6352, 295, 6352, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11512981371933155, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.003706284798681736}, {"id": 349, "seek": 154800, "start": 1550.0, "end": 1555.0, "text": " You know, it's a different query language and agreement on a nested relational calculus query.", "tokens": [50464, 509, 458, 11, 309, 311, 257, 819, 14581, 2856, 293, 8106, 322, 257, 15646, 292, 38444, 33400, 14581, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11512981371933155, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.003706284798681736}, {"id": 350, "seek": 154800, "start": 1555.0, "end": 1564.0, "text": " So let me jump since I'm running low on time to the open question here.", "tokens": [50714, 407, 718, 385, 3012, 1670, 286, 478, 2614, 2295, 322, 565, 281, 264, 1269, 1168, 510, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11512981371933155, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.003706284798681736}, {"id": 351, "seek": 154800, "start": 1564.0, "end": 1568.0, "text": " We have various results about this, but an intriguing open question is,", "tokens": [51164, 492, 362, 3683, 3542, 466, 341, 11, 457, 364, 32503, 1269, 1168, 307, 11, 51364], "temperature": 0.0, "avg_logprob": -0.11512981371933155, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.003706284798681736}, {"id": 352, "seek": 154800, "start": 1568.0, "end": 1574.0, "text": " is every first order indistinguishability relation given by nested relational calculus?", "tokens": [51364, 307, 633, 700, 1668, 1016, 468, 7050, 742, 2310, 9721, 2212, 538, 15646, 292, 38444, 33400, 30, 51664], "temperature": 0.0, "avg_logprob": -0.11512981371933155, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.003706284798681736}, {"id": 353, "seek": 157400, "start": 1574.0, "end": 1580.0, "text": " We look at the infinite case where this is not true and we find lots of phenomenon that go beyond nested relational calculus.", "tokens": [50364, 492, 574, 412, 264, 13785, 1389, 689, 341, 307, 406, 2074, 293, 321, 915, 3195, 295, 14029, 300, 352, 4399, 15646, 292, 38444, 33400, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09542854086866656, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00581864221021533}, {"id": 354, "seek": 157400, "start": 1580.0, "end": 1587.0, "text": " And of course, we don't use the word nested relational calculus because it's geared towards a different audience.", "tokens": [50664, 400, 295, 1164, 11, 321, 500, 380, 764, 264, 1349, 15646, 292, 38444, 33400, 570, 309, 311, 35924, 3030, 257, 819, 4034, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09542854086866656, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00581864221021533}, {"id": 355, "seek": 157400, "start": 1587.0, "end": 1590.0, "text": " This is a preservation question.", "tokens": [51014, 639, 307, 257, 27257, 1168, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09542854086866656, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00581864221021533}, {"id": 356, "seek": 157400, "start": 1590.0, "end": 1593.0, "text": " I have a first order sentence in the language of two schemas.", "tokens": [51164, 286, 362, 257, 700, 1668, 8174, 294, 264, 2856, 295, 732, 22627, 296, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09542854086866656, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00581864221021533}, {"id": 357, "seek": 157400, "start": 1593.0, "end": 1595.0, "text": " I impose some semantic property.", "tokens": [51314, 286, 26952, 512, 47982, 4707, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09542854086866656, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00581864221021533}, {"id": 358, "seek": 157400, "start": 1595.0, "end": 1599.0, "text": " Here's a syntax, nested relational calculus views that enforces it.", "tokens": [51414, 1692, 311, 257, 28431, 11, 15646, 292, 38444, 33400, 6809, 300, 25495, 887, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09542854086866656, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.00581864221021533}, {"id": 359, "seek": 159900, "start": 1599.0, "end": 1605.0, "text": " I want to know if everything that has this semantic property is enforced by this text.", "tokens": [50364, 286, 528, 281, 458, 498, 1203, 300, 575, 341, 47982, 4707, 307, 40953, 538, 341, 2487, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12270338324051869, "compression_ratio": 1.6132075471698113, "no_speech_prob": 0.01882726140320301}, {"id": 360, "seek": 159900, "start": 1605.0, "end": 1612.0, "text": " Okay, so first I'll say this indistinguishability, the bottom line, this indistinguishability relations.", "tokens": [50664, 1033, 11, 370, 700, 286, 603, 584, 341, 1016, 468, 7050, 742, 2310, 11, 264, 2767, 1622, 11, 341, 1016, 468, 7050, 742, 2310, 2299, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12270338324051869, "compression_ratio": 1.6132075471698113, "no_speech_prob": 0.01882726140320301}, {"id": 361, "seek": 159900, "start": 1612.0, "end": 1622.0, "text": " They make the world of traditional views look very small because you can begin to see lots of other ways of creating interfaces that are beyond views.", "tokens": [51014, 814, 652, 264, 1002, 295, 5164, 6809, 574, 588, 1359, 570, 291, 393, 1841, 281, 536, 3195, 295, 661, 2098, 295, 4084, 28416, 300, 366, 4399, 6809, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12270338324051869, "compression_ratio": 1.6132075471698113, "no_speech_prob": 0.01882726140320301}, {"id": 362, "seek": 162200, "start": 1622.0, "end": 1629.0, "text": " And it gets at this issue that comes up often in descriptive complexity theory and descriptive set theory,", "tokens": [50364, 400, 309, 2170, 412, 341, 2734, 300, 1487, 493, 2049, 294, 42585, 14024, 5261, 293, 42585, 992, 5261, 11, 50714], "temperature": 0.0, "avg_logprob": -0.1007218727698693, "compression_ratio": 1.928, "no_speech_prob": 0.08376751095056534}, {"id": 363, "seek": 162200, "start": 1629.0, "end": 1633.0, "text": " of going from an equivalence relation to a canonical representative.", "tokens": [50714, 295, 516, 490, 364, 9052, 655, 9721, 281, 257, 46491, 12424, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1007218727698693, "compression_ratio": 1.928, "no_speech_prob": 0.08376751095056534}, {"id": 364, "seek": 162200, "start": 1633.0, "end": 1638.0, "text": " For instance, if you look at various notions of elementary equivalence, like n variable equivalence,", "tokens": [50914, 1171, 5197, 11, 498, 291, 574, 412, 3683, 35799, 295, 16429, 9052, 655, 11, 411, 297, 7006, 9052, 655, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1007218727698693, "compression_ratio": 1.928, "no_speech_prob": 0.08376751095056534}, {"id": 365, "seek": 162200, "start": 1638.0, "end": 1641.0, "text": " you have a nicely described equivalence relation.", "tokens": [51164, 291, 362, 257, 9594, 7619, 9052, 655, 9721, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1007218727698693, "compression_ratio": 1.928, "no_speech_prob": 0.08376751095056534}, {"id": 366, "seek": 162200, "start": 1641.0, "end": 1646.0, "text": " You want to know how efficient it is to export a representative of this equivalence relation.", "tokens": [51314, 509, 528, 281, 458, 577, 7148, 309, 307, 281, 10725, 257, 12424, 295, 341, 9052, 655, 9721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1007218727698693, "compression_ratio": 1.928, "no_speech_prob": 0.08376751095056534}, {"id": 367, "seek": 162200, "start": 1646.0, "end": 1650.0, "text": " You have a nice representation of sort of the dynamic notion.", "tokens": [51564, 509, 362, 257, 1481, 10290, 295, 1333, 295, 264, 8546, 10710, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1007218727698693, "compression_ratio": 1.928, "no_speech_prob": 0.08376751095056534}, {"id": 368, "seek": 165000, "start": 1650.0, "end": 1653.0, "text": " You want to know, does that mean that there's a nice representative?", "tokens": [50364, 509, 528, 281, 458, 11, 775, 300, 914, 300, 456, 311, 257, 1481, 12424, 30, 50514], "temperature": 0.0, "avg_logprob": -0.11501000306316625, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.003428869182243943}, {"id": 369, "seek": 165000, "start": 1653.0, "end": 1657.0, "text": " You can choose a representative concisely.", "tokens": [50514, 509, 393, 2826, 257, 12424, 1588, 271, 736, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11501000306316625, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.003428869182243943}, {"id": 370, "seek": 165000, "start": 1657.0, "end": 1663.0, "text": " So I want to stop now with the great thoughts stuff, if you can give me a second to do it.", "tokens": [50714, 407, 286, 528, 281, 1590, 586, 365, 264, 869, 4598, 1507, 11, 498, 291, 393, 976, 385, 257, 1150, 281, 360, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11501000306316625, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.003428869182243943}, {"id": 371, "seek": 165000, "start": 1663.0, "end": 1668.0, "text": " Okay, so I want to go back to great thoughts.", "tokens": [51014, 1033, 11, 370, 286, 528, 281, 352, 646, 281, 869, 4598, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11501000306316625, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.003428869182243943}, {"id": 372, "seek": 165000, "start": 1668.0, "end": 1671.0, "text": " And the truth of it is, I saw Mulham's talk last week,", "tokens": [51264, 400, 264, 3494, 295, 309, 307, 11, 286, 1866, 29960, 4822, 311, 751, 1036, 1243, 11, 51414], "temperature": 0.0, "avg_logprob": -0.11501000306316625, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.003428869182243943}, {"id": 373, "seek": 165000, "start": 1671.0, "end": 1677.0, "text": " and he gave an overview of relational databases, and it led to some great pronouncement.", "tokens": [51414, 293, 415, 2729, 364, 12492, 295, 38444, 22380, 11, 293, 309, 4684, 281, 512, 869, 19567, 518, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11501000306316625, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.003428869182243943}, {"id": 374, "seek": 167700, "start": 1677.0, "end": 1682.0, "text": " You know, relational AI is great by relational AI, and other profound thoughts.", "tokens": [50364, 509, 458, 11, 38444, 7318, 307, 869, 538, 38444, 7318, 11, 293, 661, 14382, 4598, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1880339408407406, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.0023589590564370155}, {"id": 375, "seek": 167700, "start": 1682.0, "end": 1688.0, "text": " And then I saw Joe's talk, and he overviewed relational databases for 15 years,", "tokens": [50614, 400, 550, 286, 1866, 6807, 311, 751, 11, 293, 415, 12492, 292, 38444, 22380, 337, 2119, 924, 11, 50914], "temperature": 0.0, "avg_logprob": -0.1880339408407406, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.0023589590564370155}, {"id": 376, "seek": 167700, "start": 1688.0, "end": 1691.0, "text": " and he gave his own pronouncements.", "tokens": [50914, 293, 415, 2729, 702, 1065, 19567, 1117, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1880339408407406, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.0023589590564370155}, {"id": 377, "seek": 167700, "start": 1691.0, "end": 1698.0, "text": " Morals, I love Hasselt, and there's important problems with synchronization", "tokens": [51064, 5146, 1124, 11, 286, 959, 32711, 2018, 11, 293, 456, 311, 1021, 2740, 365, 19331, 2144, 51414], "temperature": 0.0, "avg_logprob": -0.1880339408407406, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.0023589590564370155}, {"id": 378, "seek": 167700, "start": 1698.0, "end": 1701.0, "text": " that need to be studied, and deadline is great.", "tokens": [51414, 300, 643, 281, 312, 9454, 11, 293, 20615, 307, 869, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1880339408407406, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.0023589590564370155}, {"id": 379, "seek": 167700, "start": 1701.0, "end": 1704.0, "text": " And I thought I should have a slide that talks about 15 years databases,", "tokens": [51564, 400, 286, 1194, 286, 820, 362, 257, 4137, 300, 6686, 466, 2119, 924, 22380, 11, 51714], "temperature": 0.0, "avg_logprob": -0.1880339408407406, "compression_ratio": 1.6680851063829787, "no_speech_prob": 0.0023589590564370155}, {"id": 380, "seek": 170400, "start": 1704.0, "end": 1707.0, "text": " and then has some profound conclusion.", "tokens": [50364, 293, 550, 575, 512, 14382, 10063, 13, 50514], "temperature": 0.0, "avg_logprob": -0.09850274254294003, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.01186259277164936}, {"id": 381, "seek": 170400, "start": 1707.0, "end": 1713.0, "text": " What I want to say is, well, in the first 40 years, this notion of logical interface,", "tokens": [50514, 708, 286, 528, 281, 584, 307, 11, 731, 11, 294, 264, 700, 3356, 924, 11, 341, 10710, 295, 14978, 9226, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09850274254294003, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.01186259277164936}, {"id": 382, "seek": 170400, "start": 1713.0, "end": 1720.0, "text": " expanding it, and notions of comparing interfaces, you find it relatively often in pods.", "tokens": [50814, 14702, 309, 11, 293, 35799, 295, 15763, 28416, 11, 291, 915, 309, 7226, 2049, 294, 31925, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09850274254294003, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.01186259277164936}, {"id": 383, "seek": 170400, "start": 1720.0, "end": 1726.0, "text": " You know, Rick Hall did some various things about the notion of information capacity", "tokens": [51164, 509, 458, 11, 11224, 5434, 630, 512, 3683, 721, 466, 264, 10710, 295, 1589, 6042, 51464], "temperature": 0.0, "avg_logprob": -0.09850274254294003, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.01186259277164936}, {"id": 384, "seek": 170400, "start": 1726.0, "end": 1730.0, "text": " that I find very interesting at the level of comparing schemas.", "tokens": [51464, 300, 286, 915, 588, 1880, 412, 264, 1496, 295, 15763, 22627, 296, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09850274254294003, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.01186259277164936}, {"id": 385, "seek": 173000, "start": 1730.0, "end": 1734.0, "text": " And then, of course, there's been a lot of work over 40 years", "tokens": [50364, 400, 550, 11, 295, 1164, 11, 456, 311, 668, 257, 688, 295, 589, 670, 3356, 924, 50564], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 386, "seek": 173000, "start": 1734.0, "end": 1738.0, "text": " at looking at funky new ways of defining interfaces.", "tokens": [50564, 412, 1237, 412, 33499, 777, 2098, 295, 17827, 28416, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 387, "seek": 173000, "start": 1738.0, "end": 1742.0, "text": " But in the last, I'd say, certainly five years, not so much.", "tokens": [50764, 583, 294, 264, 1036, 11, 286, 1116, 584, 11, 3297, 1732, 924, 11, 406, 370, 709, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 388, "seek": 173000, "start": 1742.0, "end": 1745.0, "text": " So I think there is some need to look at this.", "tokens": [50964, 407, 286, 519, 456, 307, 512, 643, 281, 574, 412, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 389, "seek": 173000, "start": 1745.0, "end": 1749.0, "text": " I wouldn't say, you know, looking at the work in this workshop,", "tokens": [51114, 286, 2759, 380, 584, 11, 291, 458, 11, 1237, 412, 264, 589, 294, 341, 13541, 11, 51314], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 390, "seek": 173000, "start": 1749.0, "end": 1754.0, "text": " I don't say that people should stop working on machine learning", "tokens": [51314, 286, 500, 380, 584, 300, 561, 820, 1590, 1364, 322, 3479, 2539, 51564], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 391, "seek": 173000, "start": 1754.0, "end": 1757.0, "text": " and relational algebra like Zach is, and look about this.", "tokens": [51564, 293, 38444, 21989, 411, 21028, 307, 11, 293, 574, 466, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08614423253514746, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.041437115520238876}, {"id": 392, "seek": 175700, "start": 1757.0, "end": 1761.0, "text": " A little bit maybe goes a long way, and maybe there was too much of this at one point.", "tokens": [50364, 316, 707, 857, 1310, 1709, 257, 938, 636, 11, 293, 1310, 456, 390, 886, 709, 295, 341, 412, 472, 935, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10382519501906175, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.003426423529163003}, {"id": 393, "seek": 175700, "start": 1761.0, "end": 1766.0, "text": " But I think going back every few years and looking at this is a good thing to do.", "tokens": [50564, 583, 286, 519, 516, 646, 633, 1326, 924, 293, 1237, 412, 341, 307, 257, 665, 551, 281, 360, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10382519501906175, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.003426423529163003}, {"id": 394, "seek": 175700, "start": 1766.0, "end": 1770.0, "text": " Certainly, this work has been very influential outside of databases.", "tokens": [50814, 16628, 11, 341, 589, 575, 668, 588, 22215, 2380, 295, 22380, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10382519501906175, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.003426423529163003}, {"id": 395, "seek": 175700, "start": 1770.0, "end": 1771.0, "text": " Thank you.", "tokens": [51014, 1044, 291, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10382519501906175, "compression_ratio": 1.4588235294117646, "no_speech_prob": 0.003426423529163003}, {"id": 396, "seek": 177100, "start": 1771.0, "end": 1797.0, "text": " So we haven't looked in this. I think this model is just, you know,", "tokens": [50364, 407, 321, 2378, 380, 2956, 294, 341, 13, 286, 519, 341, 2316, 307, 445, 11, 291, 458, 11, 51664], "temperature": 0.0, "avg_logprob": -0.3116046732122248, "compression_ratio": 0.9852941176470589, "no_speech_prob": 0.17295019328594208}, {"id": 397, "seek": 179700, "start": 1797.0, "end": 1801.0, "text": " I've shown this stuff to some people who work on privacy", "tokens": [50364, 286, 600, 4898, 341, 1507, 281, 512, 561, 567, 589, 322, 11427, 50564], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 398, "seek": 179700, "start": 1801.0, "end": 1805.0, "text": " say this is ridiculously restrictive, which I think is the right answer.", "tokens": [50564, 584, 341, 307, 41358, 43220, 11, 597, 286, 519, 307, 264, 558, 1867, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 399, "seek": 179700, "start": 1805.0, "end": 1810.0, "text": " I mean, our notion that I showed you of keeping something secret", "tokens": [50764, 286, 914, 11, 527, 10710, 300, 286, 4712, 291, 295, 5145, 746, 4054, 51014], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 400, "seek": 179700, "start": 1810.0, "end": 1814.0, "text": " is on no instance should the attacker learn the database,", "tokens": [51014, 307, 322, 572, 5197, 820, 264, 35871, 1466, 264, 8149, 11, 51214], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 401, "seek": 179700, "start": 1814.0, "end": 1818.0, "text": " which is something that comes in the database theory literature.", "tokens": [51214, 597, 307, 746, 300, 1487, 294, 264, 8149, 5261, 10394, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 402, "seek": 179700, "start": 1818.0, "end": 1820.0, "text": " Also, it's in the KR literature.", "tokens": [51414, 2743, 11, 309, 311, 294, 264, 37522, 10394, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 403, "seek": 179700, "start": 1820.0, "end": 1826.0, "text": " But of course, in the end, differential privacy is much weaker,", "tokens": [51514, 583, 295, 1164, 11, 294, 264, 917, 11, 15756, 11427, 307, 709, 24286, 11, 51814], "temperature": 0.0, "avg_logprob": -0.13250289916992186, "compression_ratio": 1.689795918367347, "no_speech_prob": 0.3992602527141571}, {"id": 404, "seek": 182600, "start": 1827.0, "end": 1830.0, "text": " and in general, the reaction is, look, you know,", "tokens": [50414, 293, 294, 2674, 11, 264, 5480, 307, 11, 574, 11, 291, 458, 11, 50564], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 405, "seek": 182600, "start": 1830.0, "end": 1834.0, "text": " I don't care that there's some one database out there in the world.", "tokens": [50564, 286, 500, 380, 1127, 300, 456, 311, 512, 472, 8149, 484, 456, 294, 264, 1002, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 406, "seek": 182600, "start": 1834.0, "end": 1837.0, "text": " It's mostly used for aggregated queries.", "tokens": [50764, 467, 311, 5240, 1143, 337, 16743, 770, 24109, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 407, "seek": 182600, "start": 1837.0, "end": 1843.0, "text": " So if you have views like non-aggregated views, the notion is not obvious, but yeah.", "tokens": [50914, 407, 498, 291, 362, 6809, 411, 2107, 12, 559, 11027, 770, 6809, 11, 264, 10710, 307, 406, 6322, 11, 457, 1338, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 408, "seek": 182600, "start": 1846.0, "end": 1849.0, "text": " Yeah, so first of all, very interesting.", "tokens": [51364, 865, 11, 370, 700, 295, 439, 11, 588, 1880, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 409, "seek": 182600, "start": 1849.0, "end": 1851.0, "text": " So I got your framework and the results.", "tokens": [51514, 407, 286, 658, 428, 8388, 293, 264, 3542, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 410, "seek": 182600, "start": 1851.0, "end": 1852.0, "text": " It was amazing.", "tokens": [51614, 467, 390, 2243, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2855774657894867, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.019089361652731895}, {"id": 411, "seek": 185200, "start": 1853.0, "end": 1854.0, "text": " Quick question.", "tokens": [50414, 12101, 1168, 13, 50464], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 412, "seek": 185200, "start": 1854.0, "end": 1857.0, "text": " I didn't get a chance to do justice to the distinguishly results,", "tokens": [50464, 286, 994, 380, 483, 257, 2931, 281, 360, 6118, 281, 264, 20206, 356, 3542, 11, 50614], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 413, "seek": 185200, "start": 1857.0, "end": 1859.0, "text": " but I can tell that it's not important.", "tokens": [50614, 457, 286, 393, 980, 300, 309, 311, 406, 1021, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 414, "seek": 185200, "start": 1859.0, "end": 1862.0, "text": " But can you do justice to communication complexity?", "tokens": [50714, 583, 393, 291, 360, 6118, 281, 6101, 14024, 30, 50864], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 415, "seek": 185200, "start": 1862.0, "end": 1863.0, "text": " Have you looked into this?", "tokens": [50864, 3560, 291, 2956, 666, 341, 30, 50914], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 416, "seek": 185200, "start": 1863.0, "end": 1867.0, "text": " Yeah, I mean, this, so no, well, not really.", "tokens": [50914, 865, 11, 286, 914, 11, 341, 11, 370, 572, 11, 731, 11, 406, 534, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 417, "seek": 185200, "start": 1867.0, "end": 1870.0, "text": " I mean, the proofs have a very similar feel to communication.", "tokens": [51114, 286, 914, 11, 264, 8177, 82, 362, 257, 588, 2531, 841, 281, 6101, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 418, "seek": 185200, "start": 1870.0, "end": 1873.0, "text": " We're exploiting autonomy of this.", "tokens": [51264, 492, 434, 12382, 1748, 27278, 295, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 419, "seek": 185200, "start": 1873.0, "end": 1878.0, "text": " And you would think once we put in some interaction between the two sources,", "tokens": [51414, 400, 291, 576, 519, 1564, 321, 829, 294, 512, 9285, 1296, 264, 732, 7139, 11, 51664], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 420, "seek": 185200, "start": 1878.0, "end": 1881.0, "text": " we're in extreme case of communication complexity.", "tokens": [51664, 321, 434, 294, 8084, 1389, 295, 6101, 14024, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14992415715777685, "compression_ratio": 1.709090909090909, "no_speech_prob": 0.00376339815557003}, {"id": 421, "seek": 188100, "start": 1881.0, "end": 1884.0, "text": " Because there's no communication between the sources at all.", "tokens": [50364, 1436, 456, 311, 572, 6101, 1296, 264, 7139, 412, 439, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 422, "seek": 188100, "start": 1884.0, "end": 1890.0, "text": " Well, they both published something in common, so they can compute a few.", "tokens": [50514, 1042, 11, 436, 1293, 6572, 746, 294, 2689, 11, 370, 436, 393, 14722, 257, 1326, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 423, "seek": 188100, "start": 1890.0, "end": 1892.0, "text": " Maybe it's a one round, a half round.", "tokens": [50814, 2704, 309, 311, 257, 472, 3098, 11, 257, 1922, 3098, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 424, "seek": 188100, "start": 1892.0, "end": 1893.0, "text": " I don't know.", "tokens": [50914, 286, 500, 380, 458, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 425, "seek": 188100, "start": 1893.0, "end": 1896.0, "text": " They looked at all sorts of variations, which I'm not familiar with.", "tokens": [50964, 814, 2956, 412, 439, 7527, 295, 17840, 11, 597, 286, 478, 406, 4963, 365, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 426, "seek": 188100, "start": 1896.0, "end": 1897.0, "text": " Yeah, I agree.", "tokens": [51114, 865, 11, 286, 3986, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 427, "seek": 188100, "start": 1897.0, "end": 1899.0, "text": " It's on my radar to look at.", "tokens": [51164, 467, 311, 322, 452, 16544, 281, 574, 412, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 428, "seek": 188100, "start": 1905.0, "end": 1908.0, "text": " So, like, I had a similar question before, right?", "tokens": [51564, 407, 11, 411, 11, 286, 632, 257, 2531, 1168, 949, 11, 558, 30, 51714], "temperature": 0.0, "avg_logprob": -0.2676904363539612, "compression_ratio": 1.497854077253219, "no_speech_prob": 0.009833630174398422}, {"id": 429, "seek": 190800, "start": 1909.0, "end": 1913.0, "text": " Like, yes, it's a differential privacy as a weaker model", "tokens": [50414, 1743, 11, 2086, 11, 309, 311, 257, 15756, 11427, 382, 257, 24286, 2316, 50614], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 430, "seek": 190800, "start": 1913.0, "end": 1916.0, "text": " because we only have probabilistic guarantees.", "tokens": [50614, 570, 321, 787, 362, 31959, 3142, 32567, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 431, "seek": 190800, "start": 1916.0, "end": 1920.0, "text": " So, but your model is also in another way more expressive, right?", "tokens": [50764, 407, 11, 457, 428, 2316, 307, 611, 294, 1071, 636, 544, 40189, 11, 558, 30, 50964], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 432, "seek": 190800, "start": 1920.0, "end": 1922.0, "text": " This indistinguishability in relation to autonomy.", "tokens": [50964, 639, 1016, 468, 7050, 742, 2310, 294, 9721, 281, 27278, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 433, "seek": 190800, "start": 1922.0, "end": 1926.0, "text": " Like, differential privacy is essentially like a very simple", "tokens": [51064, 1743, 11, 15756, 11427, 307, 4476, 411, 257, 588, 2199, 51264], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 434, "seek": 190800, "start": 1926.0, "end": 1928.0, "text": " in what sort of distinguishability we're like.", "tokens": [51264, 294, 437, 1333, 295, 20206, 2310, 321, 434, 411, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 435, "seek": 190800, "start": 1928.0, "end": 1930.0, "text": " But there's still no probabilities involved,", "tokens": [51364, 583, 456, 311, 920, 572, 33783, 3288, 11, 51464], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 436, "seek": 190800, "start": 1930.0, "end": 1933.0, "text": " even in the indistinguishability notion, right?", "tokens": [51464, 754, 294, 264, 1016, 468, 7050, 742, 2310, 10710, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 437, "seek": 190800, "start": 1933.0, "end": 1934.0, "text": " No, no, I know, right?", "tokens": [51614, 883, 11, 572, 11, 286, 458, 11, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.2368606370070885, "compression_ratio": 1.7411764705882353, "no_speech_prob": 0.0025886259973049164}, {"id": 438, "seek": 193400, "start": 1934.0, "end": 1938.0, "text": " I mean, like, right, your model is not just stricter,", "tokens": [50364, 286, 914, 11, 411, 11, 558, 11, 428, 2316, 307, 406, 445, 1056, 299, 391, 11, 50564], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 439, "seek": 193400, "start": 1938.0, "end": 1943.0, "text": " but also more expressive in what we consider to be indistinguishable, right?", "tokens": [50564, 457, 611, 544, 40189, 294, 437, 321, 1949, 281, 312, 1016, 468, 7050, 742, 712, 11, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 440, "seek": 193400, "start": 1943.0, "end": 1944.0, "text": " Yeah.", "tokens": [50814, 865, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 441, "seek": 193400, "start": 1944.0, "end": 1947.0, "text": " But there's, I'm mangling two works, right?", "tokens": [50864, 583, 456, 311, 11, 286, 478, 32432, 1688, 732, 1985, 11, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 442, "seek": 193400, "start": 1947.0, "end": 1950.0, "text": " So, on the one hand, you have this notion of privacy.", "tokens": [51014, 407, 11, 322, 264, 472, 1011, 11, 291, 362, 341, 10710, 295, 11427, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 443, "seek": 193400, "start": 1950.0, "end": 1951.0, "text": " That's it.", "tokens": [51164, 663, 311, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 444, "seek": 193400, "start": 1951.0, "end": 1952.0, "text": " Yeah.", "tokens": [51214, 865, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 445, "seek": 193400, "start": 1952.0, "end": 1955.0, "text": " On the other hand, we can be flexible about the view mechanisms", "tokens": [51264, 1282, 264, 661, 1011, 11, 321, 393, 312, 11358, 466, 264, 1910, 15902, 51414], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 446, "seek": 193400, "start": 1955.0, "end": 1959.0, "text": " and look at these more powerful mechanisms, right?", "tokens": [51414, 293, 574, 412, 613, 544, 4005, 15902, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 447, "seek": 193400, "start": 1959.0, "end": 1961.0, "text": " So, that's true.", "tokens": [51614, 407, 11, 300, 311, 2074, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13949764569600423, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.0006770233740098774}, {"id": 448, "seek": 196100, "start": 1961.0, "end": 1964.0, "text": " Some of it, I just want to make clear that some of this trade-off", "tokens": [50364, 2188, 295, 309, 11, 286, 445, 528, 281, 652, 1850, 300, 512, 295, 341, 4923, 12, 4506, 50514], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 449, "seek": 196100, "start": 1964.0, "end": 1965.0, "text": " is in two different works.", "tokens": [50514, 307, 294, 732, 819, 1985, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 450, "seek": 196100, "start": 1965.0, "end": 1966.0, "text": " But go ahead.", "tokens": [50564, 583, 352, 2286, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 451, "seek": 196100, "start": 1966.0, "end": 1968.0, "text": " Yes, I agree, right?", "tokens": [50614, 1079, 11, 286, 3986, 11, 558, 30, 50714], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 452, "seek": 196100, "start": 1968.0, "end": 1971.0, "text": " So, I know that indistinguishability was basically like a query,", "tokens": [50714, 407, 11, 286, 458, 300, 1016, 468, 7050, 742, 2310, 390, 1936, 411, 257, 14581, 11, 50864], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 453, "seek": 196100, "start": 1971.0, "end": 1973.0, "text": " like a trust with the privacy.", "tokens": [50864, 411, 257, 3361, 365, 264, 11427, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 454, "seek": 196100, "start": 1973.0, "end": 1974.0, "text": " Yeah.", "tokens": [50964, 865, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 455, "seek": 196100, "start": 1974.0, "end": 1979.0, "text": " But it could also be, obviously, used for like a privacy mechanism.", "tokens": [51014, 583, 309, 727, 611, 312, 11, 2745, 11, 1143, 337, 411, 257, 11427, 7513, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 456, "seek": 196100, "start": 1979.0, "end": 1980.0, "text": " Yeah.", "tokens": [51264, 865, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 457, "seek": 196100, "start": 1982.0, "end": 1985.0, "text": " I remember I said that I won't be ready for great thoughts", "tokens": [51414, 286, 1604, 286, 848, 300, 286, 1582, 380, 312, 1919, 337, 869, 4598, 51564], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 458, "seek": 196100, "start": 1985.0, "end": 1990.0, "text": " tomorrow afternoon, or possibly Monday, or maybe next week.", "tokens": [51564, 4153, 6499, 11, 420, 6264, 8138, 11, 420, 1310, 958, 1243, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18656320190429687, "compression_ratio": 1.5805243445692885, "no_speech_prob": 0.003073680680245161}, {"id": 459, "seek": 199000, "start": 1990.0, "end": 1991.0, "text": " Yeah.", "tokens": [50364, 865, 13, 50414], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 460, "seek": 199000, "start": 1991.0, "end": 1994.0, "text": " So, can you comment a bit about the complexity of computing", "tokens": [50414, 407, 11, 393, 291, 2871, 257, 857, 466, 264, 14024, 295, 15866, 50564], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 461, "seek": 199000, "start": 1994.0, "end": 1998.0, "text": " that is used, because the term is unsilable, right?", "tokens": [50564, 300, 307, 1143, 11, 570, 264, 1433, 307, 2693, 388, 712, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 462, "seek": 199000, "start": 1998.0, "end": 2000.0, "text": " So, in the...", "tokens": [50764, 407, 11, 294, 264, 485, 50864], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 463, "seek": 199000, "start": 2000.0, "end": 2003.0, "text": " Well, rather than very easy, you can just compute that.", "tokens": [50864, 1042, 11, 2831, 813, 588, 1858, 11, 291, 393, 445, 14722, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 464, "seek": 199000, "start": 2003.0, "end": 2004.0, "text": " You can just...", "tokens": [51014, 509, 393, 445, 485, 51064], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 465, "seek": 199000, "start": 2004.0, "end": 2006.0, "text": " So, in the case of CQ utility queries, you don't need to decide", "tokens": [51064, 407, 11, 294, 264, 1389, 295, 383, 48, 14877, 24109, 11, 291, 500, 380, 643, 281, 4536, 51164], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 466, "seek": 199000, "start": 2006.0, "end": 2009.0, "text": " the term as CQ, you can get these minimal information use,", "tokens": [51164, 264, 1433, 382, 383, 48, 11, 291, 393, 483, 613, 13206, 1589, 764, 11, 51314], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 467, "seek": 199000, "start": 2009.0, "end": 2013.0, "text": " and actually, in key time, you can create.", "tokens": [51314, 293, 767, 11, 294, 2141, 565, 11, 291, 393, 1884, 13, 51514], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 468, "seek": 199000, "start": 2013.0, "end": 2015.0, "text": " For other queries?", "tokens": [51514, 1171, 661, 24109, 30, 51614], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 469, "seek": 199000, "start": 2015.0, "end": 2018.0, "text": " Well, for other queries, so, for other queries,", "tokens": [51614, 1042, 11, 337, 661, 24109, 11, 370, 11, 337, 661, 24109, 11, 51764], "temperature": 0.0, "avg_logprob": -0.33630478020870325, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.0015968192601576447}, {"id": 470, "seek": 201800, "start": 2018.0, "end": 2020.0, "text": " you don't actually know what the representation is.", "tokens": [50364, 291, 500, 380, 767, 458, 437, 264, 10290, 307, 13, 50464], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 471, "seek": 201800, "start": 2020.0, "end": 2022.0, "text": " So, Pierre, do you want to contradict this?", "tokens": [50464, 407, 11, 28461, 11, 360, 291, 528, 281, 28900, 341, 30, 50564], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 472, "seek": 201800, "start": 2022.0, "end": 2024.0, "text": " Minimization of the term.", "tokens": [50564, 2829, 332, 2144, 295, 264, 1433, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 473, "seek": 201800, "start": 2024.0, "end": 2025.0, "text": " Okay.", "tokens": [50664, 1033, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 474, "seek": 201800, "start": 2025.0, "end": 2026.0, "text": " So, yeah.", "tokens": [50714, 407, 11, 1338, 13, 50764], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 475, "seek": 201800, "start": 2026.0, "end": 2027.0, "text": " So, actually...", "tokens": [50764, 407, 11, 767, 485, 50814], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 476, "seek": 201800, "start": 2027.0, "end": 2028.0, "text": " So, if the...", "tokens": [50814, 407, 11, 498, 264, 485, 50864], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 477, "seek": 201800, "start": 2028.0, "end": 2029.0, "text": " If...", "tokens": [50864, 759, 485, 50914], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 478, "seek": 201800, "start": 2029.0, "end": 2030.0, "text": " Well, okay.", "tokens": [50914, 1042, 11, 1392, 13, 50964], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 479, "seek": 201800, "start": 2030.0, "end": 2031.0, "text": " So...", "tokens": [50964, 407, 485, 51014], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 480, "seek": 201800, "start": 2031.0, "end": 2032.0, "text": " Well, I mean...", "tokens": [51014, 1042, 11, 286, 914, 485, 51064], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 481, "seek": 201800, "start": 2032.0, "end": 2033.0, "text": " Okay.", "tokens": [51064, 1033, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 482, "seek": 201800, "start": 2033.0, "end": 2035.0, "text": " So, you can get relational algebra views without doing minimum...", "tokens": [51114, 407, 11, 291, 393, 483, 38444, 21989, 6809, 1553, 884, 7285, 485, 51214], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 483, "seek": 201800, "start": 2035.0, "end": 2036.0, "text": " Minimization.", "tokens": [51214, 2829, 332, 2144, 13, 51264], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 484, "seek": 201800, "start": 2036.0, "end": 2037.0, "text": " Pierre.", "tokens": [51264, 28461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 485, "seek": 201800, "start": 2037.0, "end": 2038.0, "text": " Yeah, but you...", "tokens": [51314, 865, 11, 457, 291, 485, 51364], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 486, "seek": 201800, "start": 2038.0, "end": 2039.0, "text": " If you want to get the CQ...", "tokens": [51364, 759, 291, 528, 281, 483, 264, 383, 48, 485, 51414], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 487, "seek": 201800, "start": 2039.0, "end": 2042.0, "text": " So, it depends what format you want the views in.", "tokens": [51414, 407, 11, 309, 5946, 437, 7877, 291, 528, 264, 6809, 294, 13, 51564], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 488, "seek": 201800, "start": 2042.0, "end": 2043.0, "text": " You can...", "tokens": [51564, 509, 393, 485, 51614], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 489, "seek": 201800, "start": 2043.0, "end": 2044.0, "text": " Yeah.", "tokens": [51614, 865, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 490, "seek": 201800, "start": 2046.0, "end": 2047.0, "text": " You do get the minimal one.", "tokens": [51764, 509, 360, 483, 264, 13206, 472, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21483020541034167, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.0033754310570657253}, {"id": 491, "seek": 204700, "start": 2047.0, "end": 2049.0, "text": " You just don't have it as a CQ.", "tokens": [50364, 509, 445, 500, 380, 362, 309, 382, 257, 383, 48, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 492, "seek": 204700, "start": 2049.0, "end": 2051.0, "text": " So, it depends on what represent...", "tokens": [50464, 407, 11, 309, 5946, 322, 437, 2906, 485, 50564], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 493, "seek": 204700, "start": 2051.0, "end": 2054.0, "text": " I mean, you know, if I've understood your comment correctly,", "tokens": [50564, 286, 914, 11, 291, 458, 11, 498, 286, 600, 7320, 428, 2871, 8944, 11, 50714], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 494, "seek": 204700, "start": 2054.0, "end": 2055.0, "text": " there's two results.", "tokens": [50714, 456, 311, 732, 3542, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 495, "seek": 204700, "start": 2055.0, "end": 2057.0, "text": " One, it says, okay, I...", "tokens": [50764, 1485, 11, 309, 1619, 11, 1392, 11, 286, 485, 50864], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 496, "seek": 204700, "start": 2057.0, "end": 2059.0, "text": " I can get these relational algebra views.", "tokens": [50864, 286, 393, 483, 613, 38444, 21989, 6809, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 497, "seek": 204700, "start": 2059.0, "end": 2061.0, "text": " And there, we use this...", "tokens": [50964, 400, 456, 11, 321, 764, 341, 485, 51064], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 498, "seek": 204700, "start": 2061.0, "end": 2065.0, "text": " This construction about getting these samples.", "tokens": [51064, 639, 6435, 466, 1242, 613, 10938, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 499, "seek": 204700, "start": 2065.0, "end": 2067.0, "text": " And I think you can do this in key time.", "tokens": [51264, 400, 286, 519, 291, 393, 360, 341, 294, 2141, 565, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 500, "seek": 204700, "start": 2067.0, "end": 2068.0, "text": " It's...", "tokens": [51364, 467, 311, 485, 51414], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 501, "seek": 204700, "start": 2068.0, "end": 2069.0, "text": " It is minimal information.", "tokens": [51414, 467, 307, 13206, 1589, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 502, "seek": 204700, "start": 2069.0, "end": 2070.0, "text": " It's just...", "tokens": [51464, 467, 311, 445, 485, 51514], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 503, "seek": 204700, "start": 2070.0, "end": 2071.0, "text": " If you want to...", "tokens": [51514, 759, 291, 528, 281, 485, 51564], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 504, "seek": 204700, "start": 2071.0, "end": 2073.0, "text": " There's another result that says I can get CQ views,", "tokens": [51564, 821, 311, 1071, 1874, 300, 1619, 286, 393, 483, 383, 48, 6809, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12150204522269113, "compression_ratio": 1.650735294117647, "no_speech_prob": 0.0066873314790427685}, {"id": 505, "seek": 207300, "start": 2073.0, "end": 2075.0, "text": " and there I need to minimize the global word,", "tokens": [50364, 293, 456, 286, 643, 281, 17522, 264, 4338, 1349, 11, 50464], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 506, "seek": 207300, "start": 2075.0, "end": 2077.0, "text": " which, yes, Pierre said, is expensive.", "tokens": [50464, 597, 11, 2086, 11, 28461, 848, 11, 307, 5124, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 507, "seek": 207300, "start": 2077.0, "end": 2080.0, "text": " But then, after you get these minimal views,", "tokens": [50564, 583, 550, 11, 934, 291, 483, 613, 13206, 6809, 11, 50714], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 508, "seek": 207300, "start": 2080.0, "end": 2083.0, "text": " you have to see whether you can do disclosure.", "tokens": [50714, 291, 362, 281, 536, 1968, 291, 393, 360, 30392, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 509, "seek": 207300, "start": 2083.0, "end": 2088.0, "text": " And there, we have some results on this for the case", "tokens": [50864, 400, 456, 11, 321, 362, 512, 3542, 322, 341, 337, 264, 1389, 51114], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 510, "seek": 207300, "start": 2088.0, "end": 2090.0, "text": " without constraints.", "tokens": [51114, 1553, 18491, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 511, "seek": 207300, "start": 2090.0, "end": 2092.0, "text": " We know how to do it.", "tokens": [51214, 492, 458, 577, 281, 360, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 512, "seek": 207300, "start": 2092.0, "end": 2094.0, "text": " I mean, we know there you just look at the minimal...", "tokens": [51314, 286, 914, 11, 321, 458, 456, 291, 445, 574, 412, 264, 13206, 485, 51414], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 513, "seek": 207300, "start": 2094.0, "end": 2095.0, "text": " At the...", "tokens": [51414, 1711, 264, 485, 51464], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 514, "seek": 207300, "start": 2095.0, "end": 2096.0, "text": " At this canonical...", "tokens": [51464, 1711, 341, 46491, 485, 51514], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 515, "seek": 207300, "start": 2096.0, "end": 2099.0, "text": " The canonical instance.", "tokens": [51514, 440, 46491, 5197, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 516, "seek": 207300, "start": 2099.0, "end": 2101.0, "text": " And then with constraints,", "tokens": [51664, 400, 550, 365, 18491, 11, 51764], "temperature": 0.0, "avg_logprob": -0.14336295820708966, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.009553617797791958}, {"id": 517, "seek": 210100, "start": 2101.0, "end": 2104.0, "text": " I don't remember whether we have complexity.", "tokens": [50364, 286, 500, 380, 1604, 1968, 321, 362, 14024, 13, 50514], "temperature": 0.0, "avg_logprob": -0.46758230108963816, "compression_ratio": 0.9166666666666666, "no_speech_prob": 0.0721525102853775}, {"id": 518, "seek": 210100, "start": 2104.0, "end": 2105.0, "text": " Yes, yeah.", "tokens": [50514, 1079, 11, 1338, 13, 50564], "temperature": 0.0, "avg_logprob": -0.46758230108963816, "compression_ratio": 0.9166666666666666, "no_speech_prob": 0.0721525102853775}, {"id": 519, "seek": 210500, "start": 2105.0, "end": 2107.0, "text": " We have some abstracting constraints.", "tokens": [50364, 492, 362, 512, 12649, 278, 18491, 13, 50464], "temperature": 0.0, "avg_logprob": -0.7334604996901292, "compression_ratio": 1.1481481481481481, "no_speech_prob": 0.9122130274772644}, {"id": 520, "seek": 210500, "start": 2107.0, "end": 2109.0, "text": " Like guarded constraints.", "tokens": [50464, 1743, 44157, 18491, 13, 50564], "temperature": 0.0, "avg_logprob": -0.7334604996901292, "compression_ratio": 1.1481481481481481, "no_speech_prob": 0.9122130274772644}, {"id": 521, "seek": 210500, "start": 2109.0, "end": 2111.0, "text": " If you got a little bit of...", "tokens": [50564, 759, 291, 658, 257, 707, 857, 295, 485, 50664], "temperature": 0.0, "avg_logprob": -0.7334604996901292, "compression_ratio": 1.1481481481481481, "no_speech_prob": 0.9122130274772644}], "language": "en"}