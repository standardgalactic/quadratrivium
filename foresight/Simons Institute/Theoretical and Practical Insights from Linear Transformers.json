{"text": " Okay, so I'll just stop here, thanks for coming. I'm Xiang and today I'll be talking about theoretical and practical insights from linear transformers. As you know, large language models work surprisingly well in practice and the basis of large language models is the transformer neural network. So an important question is why do transformers work and how can we train them effectively? But directly this question is difficult to answer because large language models have billions, maybe even trillions of parameters, they have a lot of moving parts, different choices of normalization, of embedding and they contain many different kinds of modules. So it is important to have a mathematical abstraction that captures the essence of transformer learning and optimization in order to better understand transformers. And today we are going to look at how the simple linear transformer can shed light on two important questions. One is the mechanism behind a phenomenon known as in-context learning and two, I'll tell you about how linear transformer optimization shares many of the unconventional features of real transformer optimization. And these two points are based on two papers which are in joint work with Kwong Joon, Ha-Dee, Subritz, Ali from MIT as well as Minghak, Charlie from KAIST. So part one will be understanding in-context learning. So what is in-context learning? A very standard task of large language models is that of next-word prediction. For example, you can give GPT a prompt, Mary has a little blank and it tells you Mary has a little lamb. But that's not so surprising because somewhere in this training data I probably saw this exact sentence, maybe thousands of times. So then in-context learning refers to the following kind of prompting. So I'll provide GPT with a few demonstrations. I'll say apple is red, banana is yellow, then what is a grape? And then so apple, red and banana yellow serve as contextual examples. And based off of these contextual examples, GPT infers that I'm looking for the color of the fruit so it feels in purple. And this phenomenon even works for arbitrary made-up rules. So this is a bunch of gibberish but the ad symbol denotes concatenation and it correctly infers that ad denotes concatenation. So it probably hasn't seen this exact example anywhere in this training set but it still does the right thing. I would say that I tried some very complicated gibberish and it doesn't work there. So that's a good thing, I guess, because otherwise we are all out of jobs soon. And so to the best of my knowledge, this in-context learning phenomenon was first reported in a seminal paper by Brown, Mann, Ryder, Soubia and collaborators. And this paper was also the one that coined the phrase in-context learning, I think. I would also say that from a machine learning point of view, if you give your model a few demonstrations and then it does well on those demonstrations, it's not terribly surprising. But the thing is here in-context learning works without any updates to the model parameters. So I'm not doing any fine-tuning, I'm just using the same transformer and then it does the right thing. So that's, I guess, the surprising thing. Some people even go as far as claim that it's one of the main reasons for why large language models work so well in practice. But regardless, understanding how large models do in-context learning is a very important question to us understanding large language models. So in recent years, there's a few very important papers that try to shed light on this phenomenon. Our work is based on a few of these papers, so I'll do a quick review of the relevant literature now. The first such paper is the one by Garak Sipras-Leon Valiant, 2022. And the title is, What Can Transformers Learn In-Context, A Case Study of Simple Function Classes. So we call the example about fruits and colors and the hidden rule is that y is the color of x, where x is some fruit and y is some color. But it's very hard to reason about what does it mean, what kind of function is represented by the question about color in, say, the embedding space of words. So what they propose to do is consider a simplified setup where your x are Euclidean vectors and the y's are linearly related to x by some unobserved data. So it's a linear regression problem. Pictorially, you're given a bunch of demonstrations, the black dots, x, y pairs. And then the question is in the form of the red dot, xn plus 1. And you're trying to figure out what the label y is. The revolution is a bit low. OK. So a follow-up paper by Akirak, Sherman, Andreas, Ma, and Zoe in 2023. They further try to characterize what kind of, or they try to characterize how transformers are able to learn these functions such as linear functions. And the main takeaway here is that transformers can learn in context because they are able to implement various learning algorithms. For example, this plot here shows that experimentally, transformers appear to implement the ordinary least squares algorithm on noiseless data. So the green line is like zero throughout. And so the transform prediction has a very good agreement with ordinary least squares. And the way they show that transformers are able to implement this learning algorithm is approved by construction. So they have this very clever construction, where they define a few algorithmic primitives like multiplication, division, affine transformation, and they show that the attention unit can implement this primitive. So by hooking together various attention units, you're able to implement algorithms such as iOS. And I'll mention here that further along this direction, there are also more extreme examples where people show that the attention architecture can implement some kind of register system or something. So you can implement arbitrary algorithms and transformers can be called as programmable computers. The catch is that all these constructions are very clever, but the downside is that also means they are very fragile. And it's unclear whether these very clever constructions are actually recovered when you, say, train your transformers with the atom algorithm. So the next in line are two papers. Linear transformers are circularly fast-waist programs by Schlag, Erich, Mied, Huber in 2010. And a closely related paper by Oswald, Nikolson, Luan, Dazzo, Sacramento, Moff, and Blak Mirov in 2010. So I'll mainly focus on the second paper, Transformers, Learning Contacts by Gradient Descent. And so here, as well, they do approve by construction. But there is a very important difference from previous papers, which is they consider the linear transformers, which is, so all previous papers, they may consider a simplified setting where the problem is linear regression, but the architecture was always full transformers. But here, it's the first time people look at linear transformers, which I'll define a bit. It's simpler than full transformers. And because they look at linear transformers, they are able to provide a very simple construction where, under which linear transformers are able to implement gradient descent, which in turn allows them to learn linear functions in context. And remarkably, they have some pretty convincing experiments which agree with their construction. So that's for prior work. And now I come to our paper, where we try to answer the following question. So we saw that transformers are expressive enough to implement a whole bunch of algorithms, but can we show that transformers actually learn to implement any of these algorithms during training? So let me set up the problem. When you have a transformer, the input is of the form of a matrix, d by n, where you can think of it as a horizontally stacked bunch of tokens. Each token is kind of like a word in a sentence. So your sentence will get, you know, embedded in the impedance space and turn into a bunch of factors. So if you want to see it. The standard self-attention module is the following function. So you have your key value query matrix. You have a mask for this causality, and then you put a softmax on this thing. And linear self-attention is basically the same thing except we take out the softmax. And that's why it's called linear because we took out the non-linearity. And by the same time, I would say that the phrase linear attention is maybe a bit of a misnomer because the linear attention module is not linear in either the parameter PQK or in its input Z. In fact, it's a third or the polynomial of Z. Because of this, the representation power, when you stack a bunch of these linear attention modules on top of each other, it increases. So this is in contrast to something like a linear fully connected neural network. So no matter how many of these you stack, you always are a linear function of an input. But you can actually represent increasingly high-degree polynomials by stacking linear attention units. And the linear transformer, which we'll look at, is basically stacking these attention units by a residual connection. And to be precise, this is a single-headed transformer. So that's defining the linear transformer architecture. And now let me properly set up the learning objective. So as mentioned earlier, the input to a transformer is a sequence of tokens. And in the linear regression setting, each token Z consists of an x, y pair, where x is a d-dimensional Euclidean vector, y is a scalar, and x, y are related by this linear relationship. And theta star is unobserved. And on top of that, each prompt has a different theta star. The goal, you are also given a xm plus 1, but without the label ym plus 1. And the goal is to train the transformer to predict the hidden label. Given the demonstrations, as well as xm plus 1. I was stressed that this problem is much harder than simply learning a single theta star, because theta star changes from prompt to prompt. So you need to learn an algorithm that, given a few demonstrations, infers the right theta star regardless of what the theta star is. And at this point, I would also mention that one of the reasons for choosing to focus on linear attention as opposed to the softmax attention, besides the fact that linear attention is simpler and easier to understand, is that for this problem of learning a linear function, linear transformers perform much better than softmax transformers. And I guess we'll see concretely why that is in a bit. But even now, just intuitively, if your data are linearly related, then it makes sense that softmax doesn't really help you with all that much. So here's the first result I'll talk about. We study one layer, linear transformer, and we claim that it implements one step of gradient descent at global minimum. So what does it mean for a transformer to implement one step of gradient descent? On the left here, in this box, I show the architecture of a one-layer linear transformer. It's very simple. If you have a z, it passes through a single attention layer, and then, you know, we get some output tfz, where tf subscript lz, denotes the transformer's prediction at layer l, given input z, and parameter w. So parameter w is like the correct key value matrices. And we try to minimize the in-contact loss, which is the expected difference between the prediction and the true label. And the expectation is taken over both z, which is the input, as well as theta star, which is the unobserved linear relationship. And if you forget about transformers, we're a bit a very reasonable thing to try to do when given a bunch of demonstrations, and you need to infer the correct label, is to maintain a theta and then run gradient descent on it, with respect to the empirical least grass loss, which I highlight in problem. And so here, I just take one step, a single step, of gradient descent, and if n is sufficiently large, you know, you'll probably do decently. So theorem one of our paper states the following. If you assume that the covariates are sampled from the standard normal distribution and theta star is also sampled from the standard normal distribution, then the linear transformer that minimizes the in-contact loss, fw, which is in red, gives the same prediction as the one step gradient descent on r theta, which I highlight in purple. So in other words, the output, tf1 of v comma w, is the same as if you ran one step of gradient descent on theta, and use that to predict the label. And in fact, you can consider a more general setting when your covariates are sampled from some distribution with a non-identity covariate. So when your covariance is sigma here, the linear transformer that globally minimizes the loss now coincides with running one step of precondition gradient descent, where the preconditioner a is given by following. For when n is very large, which is when you're given a ton of demonstrations of, you know, xy pairs, a in the limit is just inverse of your covariance matrix, the covariance matrix of your covariates. But when n is small, there's this additional regularization. Is it obvious that the global minimum is unique, and if not, is this a statement about any global minimum? Yeah, so this is a statement about any global minimum. In fact, there is some obvious, you know, no spaces in the loss, I guess, because one example is the query times key matrix. You can scale them arbitrarily if their product is the same, then that's the same. Another example is, you know, since this is a linear transformer, scaling the value key current matrices arbitrarily as long as they multiply the same thing also gives the exact same predictor. But then one might wonder, you know, ignoring these inferences, is that unique? I'm not sure. I'm not sure. In perfectly, in all our experiments, this is always recovered. So that's a good sign. And also, as I'm just about to mention, there are two concurrent works, which appear surely after we publish the initial draft. One of them characterizes global optimality for one-layer linear transformer on the similar sign. So similar results at Sowers. And the second paper by Zang Fre and Bartlett in 2023. On top of characterizing global optimality, they show that if you run gradient descent on the linear transformer with some specific initialization or some specific conditions on initialization, you'll always converge to this. So at least, you know, it's a good region of attraction based off of these results. But I'm not sure if it's unique. So that's for one-layer transformer implementing one-stop gradient descent. In practice, you know, transformers work better when there are lots of players and gradient descent works better when there are lots of steps. So then a natural question is, can we extend the similar results to a L-layer linear transformer for some arbitrary integer L? So on the left, again, I show a L-layer linear transformer, same in context learning loss, but this time the predictor is after L-layers. And in the middle, I show L-steps of gradient descent, again, with respect to the same in percolate scores. And here, we establish a weaker guarantee. So instead of saying that gradient descent is a global optimum, we only show that there exists transformers, which are stationary points of the in-contact loss, such that at every layer, the transformer gives the same prediction as L-steps of gradient descent on R. So in other words, TF2 would correspond to the prediction, TF1 corresponds to the prediction for each L. And that's kind of interesting because really the only thing you're training on is TF capital L. And so it's interesting that all these intermediates outputs have a interpretable connection to gradient descent. I have a question trying to parse this. There exist transformers, I'm trying to figure out the quantification. There exist transformers that for a random choice of these parameters, what's the quantification on the X and the theta? Are you saying at the very beginning of the theorem, very beginning of theorem 3? Yes, X and theta are here, expectation. So I define a loss on transformer key value query matrices, which is only a function of W that is expectation over Z, which I guess X, Y, and theta of the prediction minus the true label. And there are stationary points of this loss, F of W, such that the stationary point is some specific choice of key value query matrices, so if it's non-identity, but sigma. And here we assume theta star is from sigma inverse, and there exist stationary points, which coincide with preconditions. Where the preconditioner is sigma inverse. Are these local minima, can you construct one which is also a local minimum? I'm not sure, but we tried, but we couldn't show it, which is why we only show stationary points. Okay, let me show you one more slide, so experimentally, so we only show that there exist stationary point, but experimentally, surprisingly, we always recover the same key value matrices. So specifically, a transformer implements precondition gradient descent by sigma inverse if the product of key query matrices is sigma inverse. And so here I train a three-layer transformer, and I display sigma half, query times key is sigma half, and we see that each of these cases is speculative, pretty much. So in other words, it's always learning to implement precondition. So I think that we don't have a theory for it, but I think there is, you know, we conjecture that maybe these are, in fact, locally or even globally. So it's something worth thinking about. Before I end, I will also mention that I skimmed a bit of detail on characterizing this theorem. We actually need to assume certain sparsities, specifically the last row and column of the key query matrices are at zero, and there are actually two variants of this theorem, depending on what kind of constraints we impose on the value matrix. You could implement precondition gradient descent or something more clever than precondition gradient descent, which interleaves gradient steps with rotation of the gram matrix to make things better conditioned. You can see the details of all this in the arm. So that's all for the first part of the talk, and I'm almost out of time, but maybe I'll quickly talk about the second part, which is how linear transformer loss lens gave first a number of remarkable similarities to the loss landscape of full transformation. So again, transformers are large and complicated, and it's difficult to pinpoint why algorithm works or it doesn't work, and it's difficult to theoretically analyze the behavior of optimization algorithms. Also, it's very expensive to experiment on full transformers. On the other hand, linear transformers may be a useful model to understand transformer optimization. So we surveyed a number of recent papers, which look at the transformers, the optimization landscape of full transformers, and we identify several remarkable features, which are kind of unique to transform optimization, and we observe that shallow linear transformers on the linear regression problem has similar optimization features. So one example is that Adam is significantly faster than stochastic gradient descent for a transformer training. On the left, and this is a phenomenon that is kind of unique to large-language models and transformers. On the left, this plot is taken from Quintetian, I think that means 23. On the left, the two plots, we show training a CNN, or MNIST, and Cpartan, so it's a image test. And there is no obvious gap between SGD and L, but on the right, they show three transformers on different datasets, and there's a clear gap between Adam and SGD. Similar observations were also made in a number of other recent papers, and we show here on the left, you know, the same plot features from the previous slide for the three kinds of language tests. Here on the right, I show a three-layer linear transformer trained on linear regression, and we see that similarly there is a significant gap between Adam and SGD, and the three plots coincide with slightly different settings of the kind. And I'm already over time, so maybe I'll skip over the rest of the features, but the long story short, there's a number of features which are kind of unique to transform optimization, and people conjecture that's maybe why adaptive algorithms are so important when training large language models, and so we went through each of them and we checked if you get the same kind of plots or data that you get from training a simple linear transformer, and each of this case, there is a surprising agreement with what people opt for for four transformers, so with that, I will end the talk. Any more questions for Chim? So I've heard that actual large language model training is like unstable, and if you look at the training pause, they're a place where you get like these spikes. Are those instabilities also replicated in the smaller transformers that you consider? Yeah, they are. In fact, we have a gap for why some of the instability is happening, and it goes back to the fact that the transformer appears to be learning to implement this gradient descent algorithm, and the thing with gradient descent is that the closer the larger your step size is, the better you do until the point where you exceed the lift shift constant, then things blow up very quickly, so we also observed that as your loss gets lower and your learning rate per layer is getting closer to the boundary, it's become more unstable because if you just exceed that a little bit, your transformer, the kind of optimization algorithm that's implemented by a transformer, like hybridism. So that's one example, but yeah, we do offer similar problems. So you showed the linear transform of one layer is equivalent to gradient, empirically, one is the square one. Yes, one step of gradient. For all layers, they actually implement the preconditioned gradient. Yeah, so for both, let me go back. So for one layer, we showed that if the covariance is sigma, it also implements one step of precondition. And then for our layer, if that covariance is identity, it just does L steps of standard gradient descent, but again, if the covariance is sigma, then it does L steps of preconditioned. So it's kind of like two orthogonal. So the linear transform actually is nonlinear in Z, right? So that means this nonlinear minimization actually automatically implement precondition. Yes, yes. Okay, so that's a different way to think about these algorithms and then they adaptively automatically choose what precondition it is. Yes, exactly. That's right. Okay. Interesting. Just one question. You mentioned if you add softmax in this linear regression task, it's actually going to underperform compared to the linear model, right? Yeah. I didn't understand. What was the reason? This is kind of... So did you try like chatGPT2 model or...? No, we code up a softmax with the same number of parameters. We coded up some linear transformer and take a softmax to the place where we just pick it to make a softmax. So it's not like a giant model? I see. So without any residual connections, right? Oh, with residuals. So basically these two are almost exactly the same except, you know, we have a softmax here and we don't. So both look like this. Except different, slight difference in how ATTN is defined. What was the intuition that white softmax is here? Yeah. That's a very good question. So here's an example, right? You know, if I'm trying to predict y and I have some x and in my demonstrations I have minus x, right? Then that should be very informative to predicting x. If you know it's linear. Softmax would compute the, you know, product which is an active number and that becomes that then you can improve our little weight on that sample and so that sample became useful for prediction. And that's just one example. I guess overall it's just that, you know, based on the construction which I didn't show, the linear transformer very easily implements a gradient descent step. The linear transformer not so much because softmax sticks out. It does this weird reweighting of your demonstration samples which doesn't really help in the linear regression setting. So, but probably softmax transformer works more generally if it's not linear. But is there anything like the optimal algorithm for this problem? That's a good question. I don't know. But I guess, you know, whatever algorithm that softmax is doing, it's just not very nice. Thank you. Thank you. I had a clarification question. So you mentioned that there's a different theta star for each input prompt. Does your results also depend on how many prompts or demonstrations are provided as part of in-context learning? Good question. Yes, because, so here n is the length of the prompt. Okay. And how much regularization you put here depends on n. And I guess what this affects is how, I guess, what preconditioner you use exactly. So this is for the non-identity covariance case. And even for the identity covariance case, the exact step size, I think, would be affected depending on, you know, this delta one, which I didn't talk about at all. I think that's going to depend very importantly on how large n is, larger n, probably larger delta. That makes sense, right? Because if you think about it, gradient descent involves this gram matrix. And if the gram matrix is identity, one step of gradient descent will just give you the solution. And when n is very large, the gram matrix does approach identity, whereas when it's small, the gram matrix could be your condition. And how your condition, gram matrix, is related to the condition number of our theta. So it makes sense that for a smaller n, you can take smaller steps of gradient descent and order n. All right. So let's thank Yashiyang again.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.5600000000000005, "text": " Okay, so I'll just stop here, thanks for coming.", "tokens": [50364, 1033, 11, 370, 286, 603, 445, 1590, 510, 11, 3231, 337, 1348, 13, 50742], "temperature": 0.0, "avg_logprob": -0.38419568711432855, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.021882086992263794}, {"id": 1, "seek": 0, "start": 7.5600000000000005, "end": 12.32, "text": " I'm Xiang and today I'll be talking about theoretical and practical insights from linear", "tokens": [50742, 286, 478, 37935, 293, 965, 286, 603, 312, 1417, 466, 20864, 293, 8496, 14310, 490, 8213, 50980], "temperature": 0.0, "avg_logprob": -0.38419568711432855, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.021882086992263794}, {"id": 2, "seek": 0, "start": 12.32, "end": 13.32, "text": " transformers.", "tokens": [50980, 4088, 433, 13, 51030], "temperature": 0.0, "avg_logprob": -0.38419568711432855, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.021882086992263794}, {"id": 3, "seek": 0, "start": 13.32, "end": 23.32, "text": " As you know, large language models work surprisingly well in practice and the basis of large language", "tokens": [51030, 1018, 291, 458, 11, 2416, 2856, 5245, 589, 17600, 731, 294, 3124, 293, 264, 5143, 295, 2416, 2856, 51530], "temperature": 0.0, "avg_logprob": -0.38419568711432855, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.021882086992263794}, {"id": 4, "seek": 0, "start": 23.32, "end": 26.68, "text": " models is the transformer neural network.", "tokens": [51530, 5245, 307, 264, 31782, 18161, 3209, 13, 51698], "temperature": 0.0, "avg_logprob": -0.38419568711432855, "compression_ratio": 1.5691489361702127, "no_speech_prob": 0.021882086992263794}, {"id": 5, "seek": 2668, "start": 26.68, "end": 33.08, "text": " So an important question is why do transformers work and how can we train them effectively?", "tokens": [50364, 407, 364, 1021, 1168, 307, 983, 360, 4088, 433, 589, 293, 577, 393, 321, 3847, 552, 8659, 30, 50684], "temperature": 0.0, "avg_logprob": -0.18231152233324552, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0002304085937794298}, {"id": 6, "seek": 2668, "start": 33.08, "end": 39.56, "text": " But directly this question is difficult to answer because large language models have billions,", "tokens": [50684, 583, 3838, 341, 1168, 307, 2252, 281, 1867, 570, 2416, 2856, 5245, 362, 17375, 11, 51008], "temperature": 0.0, "avg_logprob": -0.18231152233324552, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0002304085937794298}, {"id": 7, "seek": 2668, "start": 39.56, "end": 44.36, "text": " maybe even trillions of parameters, they have a lot of moving parts, different choices", "tokens": [51008, 1310, 754, 504, 46279, 295, 9834, 11, 436, 362, 257, 688, 295, 2684, 3166, 11, 819, 7994, 51248], "temperature": 0.0, "avg_logprob": -0.18231152233324552, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0002304085937794298}, {"id": 8, "seek": 2668, "start": 44.36, "end": 49.68, "text": " of normalization, of embedding and they contain many different kinds of modules.", "tokens": [51248, 295, 2710, 2144, 11, 295, 12240, 3584, 293, 436, 5304, 867, 819, 3685, 295, 16679, 13, 51514], "temperature": 0.0, "avg_logprob": -0.18231152233324552, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0002304085937794298}, {"id": 9, "seek": 4968, "start": 49.68, "end": 57.24, "text": " So it is important to have a mathematical abstraction that captures the essence of transformer", "tokens": [50364, 407, 309, 307, 1021, 281, 362, 257, 18894, 37765, 300, 27986, 264, 12801, 295, 31782, 50742], "temperature": 0.0, "avg_logprob": -0.17597449580325356, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.00012144765787525102}, {"id": 10, "seek": 4968, "start": 57.24, "end": 63.2, "text": " learning and optimization in order to better understand transformers.", "tokens": [50742, 2539, 293, 19618, 294, 1668, 281, 1101, 1223, 4088, 433, 13, 51040], "temperature": 0.0, "avg_logprob": -0.17597449580325356, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.00012144765787525102}, {"id": 11, "seek": 4968, "start": 63.2, "end": 69.36, "text": " And today we are going to look at how the simple linear transformer can shed light on", "tokens": [51040, 400, 965, 321, 366, 516, 281, 574, 412, 577, 264, 2199, 8213, 31782, 393, 14951, 1442, 322, 51348], "temperature": 0.0, "avg_logprob": -0.17597449580325356, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.00012144765787525102}, {"id": 12, "seek": 4968, "start": 69.36, "end": 71.24, "text": " two important questions.", "tokens": [51348, 732, 1021, 1651, 13, 51442], "temperature": 0.0, "avg_logprob": -0.17597449580325356, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.00012144765787525102}, {"id": 13, "seek": 4968, "start": 71.24, "end": 78.56, "text": " One is the mechanism behind a phenomenon known as in-context learning and two, I'll tell", "tokens": [51442, 1485, 307, 264, 7513, 2261, 257, 14029, 2570, 382, 294, 12, 9000, 3828, 2539, 293, 732, 11, 286, 603, 980, 51808], "temperature": 0.0, "avg_logprob": -0.17597449580325356, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.00012144765787525102}, {"id": 14, "seek": 7856, "start": 78.56, "end": 83.44, "text": " you about how linear transformer optimization shares many of the unconventional features", "tokens": [50364, 291, 466, 577, 8213, 31782, 19618, 12182, 867, 295, 264, 35847, 46105, 4122, 50608], "temperature": 0.0, "avg_logprob": -0.375241756439209, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.0004873430007137358}, {"id": 15, "seek": 7856, "start": 83.44, "end": 85.76, "text": " of real transformer optimization.", "tokens": [50608, 295, 957, 31782, 19618, 13, 50724], "temperature": 0.0, "avg_logprob": -0.375241756439209, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.0004873430007137358}, {"id": 16, "seek": 7856, "start": 85.76, "end": 91.88, "text": " And these two points are based on two papers which are in joint work with Kwong Joon, Ha-Dee,", "tokens": [50724, 400, 613, 732, 2793, 366, 2361, 322, 732, 10577, 597, 366, 294, 7225, 589, 365, 43432, 556, 3139, 266, 11, 4064, 12, 35, 1653, 11, 51030], "temperature": 0.0, "avg_logprob": -0.375241756439209, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.0004873430007137358}, {"id": 17, "seek": 7856, "start": 91.88, "end": 101.04, "text": " Subritz, Ali from MIT as well as Minghak, Charlie from KAIST.", "tokens": [51030, 8511, 3210, 89, 11, 12020, 490, 13100, 382, 731, 382, 19352, 37253, 11, 13754, 490, 31233, 19756, 13, 51488], "temperature": 0.0, "avg_logprob": -0.375241756439209, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.0004873430007137358}, {"id": 18, "seek": 7856, "start": 101.04, "end": 105.28, "text": " So part one will be understanding in-context learning.", "tokens": [51488, 407, 644, 472, 486, 312, 3701, 294, 12, 9000, 3828, 2539, 13, 51700], "temperature": 0.0, "avg_logprob": -0.375241756439209, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.0004873430007137358}, {"id": 19, "seek": 7856, "start": 105.28, "end": 107.16, "text": " So what is in-context learning?", "tokens": [51700, 407, 437, 307, 294, 12, 9000, 3828, 2539, 30, 51794], "temperature": 0.0, "avg_logprob": -0.375241756439209, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.0004873430007137358}, {"id": 20, "seek": 10716, "start": 107.16, "end": 112.67999999999999, "text": " A very standard task of large language models is that of next-word prediction.", "tokens": [50364, 316, 588, 3832, 5633, 295, 2416, 2856, 5245, 307, 300, 295, 958, 12, 7462, 17630, 13, 50640], "temperature": 0.0, "avg_logprob": -0.17866196235020956, "compression_ratio": 1.5338645418326693, "no_speech_prob": 0.0012631171848624945}, {"id": 21, "seek": 10716, "start": 112.67999999999999, "end": 119.52, "text": " For example, you can give GPT a prompt, Mary has a little blank and it tells you Mary has", "tokens": [50640, 1171, 1365, 11, 291, 393, 976, 26039, 51, 257, 12391, 11, 6059, 575, 257, 707, 8247, 293, 309, 5112, 291, 6059, 575, 50982], "temperature": 0.0, "avg_logprob": -0.17866196235020956, "compression_ratio": 1.5338645418326693, "no_speech_prob": 0.0012631171848624945}, {"id": 22, "seek": 10716, "start": 119.52, "end": 120.75999999999999, "text": " a little lamb.", "tokens": [50982, 257, 707, 10097, 13, 51044], "temperature": 0.0, "avg_logprob": -0.17866196235020956, "compression_ratio": 1.5338645418326693, "no_speech_prob": 0.0012631171848624945}, {"id": 23, "seek": 10716, "start": 120.75999999999999, "end": 125.24, "text": " But that's not so surprising because somewhere in this training data I probably saw this", "tokens": [51044, 583, 300, 311, 406, 370, 8830, 570, 4079, 294, 341, 3097, 1412, 286, 1391, 1866, 341, 51268], "temperature": 0.0, "avg_logprob": -0.17866196235020956, "compression_ratio": 1.5338645418326693, "no_speech_prob": 0.0012631171848624945}, {"id": 24, "seek": 10716, "start": 125.24, "end": 129.51999999999998, "text": " exact sentence, maybe thousands of times.", "tokens": [51268, 1900, 8174, 11, 1310, 5383, 295, 1413, 13, 51482], "temperature": 0.0, "avg_logprob": -0.17866196235020956, "compression_ratio": 1.5338645418326693, "no_speech_prob": 0.0012631171848624945}, {"id": 25, "seek": 10716, "start": 129.51999999999998, "end": 133.76, "text": " So then in-context learning refers to the following kind of prompting.", "tokens": [51482, 407, 550, 294, 12, 9000, 3828, 2539, 14942, 281, 264, 3480, 733, 295, 12391, 278, 13, 51694], "temperature": 0.0, "avg_logprob": -0.17866196235020956, "compression_ratio": 1.5338645418326693, "no_speech_prob": 0.0012631171848624945}, {"id": 26, "seek": 13376, "start": 133.76, "end": 137.88, "text": " So I'll provide GPT with a few demonstrations.", "tokens": [50364, 407, 286, 603, 2893, 26039, 51, 365, 257, 1326, 34714, 13, 50570], "temperature": 0.0, "avg_logprob": -0.2571578621864319, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.00048023476847447455}, {"id": 27, "seek": 13376, "start": 137.88, "end": 143.48, "text": " I'll say apple is red, banana is yellow, then what is a grape?", "tokens": [50570, 286, 603, 584, 10606, 307, 2182, 11, 14194, 307, 5566, 11, 550, 437, 307, 257, 23978, 30, 50850], "temperature": 0.0, "avg_logprob": -0.2571578621864319, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.00048023476847447455}, {"id": 28, "seek": 13376, "start": 143.48, "end": 149.79999999999998, "text": " And then so apple, red and banana yellow serve as contextual examples.", "tokens": [50850, 400, 550, 370, 10606, 11, 2182, 293, 14194, 5566, 4596, 382, 35526, 5110, 13, 51166], "temperature": 0.0, "avg_logprob": -0.2571578621864319, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.00048023476847447455}, {"id": 29, "seek": 13376, "start": 149.79999999999998, "end": 153.88, "text": " And based off of these contextual examples, GPT infers that I'm looking for the color", "tokens": [51166, 400, 2361, 766, 295, 613, 35526, 5110, 11, 26039, 51, 1536, 433, 300, 286, 478, 1237, 337, 264, 2017, 51370], "temperature": 0.0, "avg_logprob": -0.2571578621864319, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.00048023476847447455}, {"id": 30, "seek": 13376, "start": 153.88, "end": 157.16, "text": " of the fruit so it feels in purple.", "tokens": [51370, 295, 264, 6773, 370, 309, 3417, 294, 9656, 13, 51534], "temperature": 0.0, "avg_logprob": -0.2571578621864319, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.00048023476847447455}, {"id": 31, "seek": 13376, "start": 157.16, "end": 160.88, "text": " And this phenomenon even works for arbitrary made-up rules.", "tokens": [51534, 400, 341, 14029, 754, 1985, 337, 23211, 1027, 12, 1010, 4474, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2571578621864319, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.00048023476847447455}, {"id": 32, "seek": 16088, "start": 160.88, "end": 166.79999999999998, "text": " So this is a bunch of gibberish but the ad symbol denotes concatenation and it correctly", "tokens": [50364, 407, 341, 307, 257, 3840, 295, 4553, 43189, 457, 264, 614, 5986, 1441, 17251, 1588, 7186, 399, 293, 309, 8944, 50660], "temperature": 0.0, "avg_logprob": -0.1996898651123047, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0006261769449338317}, {"id": 33, "seek": 16088, "start": 166.79999999999998, "end": 169.79999999999998, "text": " infers that ad denotes concatenation.", "tokens": [50660, 1536, 433, 300, 614, 1441, 17251, 1588, 7186, 399, 13, 50810], "temperature": 0.0, "avg_logprob": -0.1996898651123047, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0006261769449338317}, {"id": 34, "seek": 16088, "start": 169.79999999999998, "end": 175.56, "text": " So it probably hasn't seen this exact example anywhere in this training set but it still", "tokens": [50810, 407, 309, 1391, 6132, 380, 1612, 341, 1900, 1365, 4992, 294, 341, 3097, 992, 457, 309, 920, 51098], "temperature": 0.0, "avg_logprob": -0.1996898651123047, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0006261769449338317}, {"id": 35, "seek": 16088, "start": 175.56, "end": 177.6, "text": " does the right thing.", "tokens": [51098, 775, 264, 558, 551, 13, 51200], "temperature": 0.0, "avg_logprob": -0.1996898651123047, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0006261769449338317}, {"id": 36, "seek": 16088, "start": 177.6, "end": 185.0, "text": " I would say that I tried some very complicated gibberish and it doesn't work there.", "tokens": [51200, 286, 576, 584, 300, 286, 3031, 512, 588, 6179, 4553, 43189, 293, 309, 1177, 380, 589, 456, 13, 51570], "temperature": 0.0, "avg_logprob": -0.1996898651123047, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0006261769449338317}, {"id": 37, "seek": 18500, "start": 185.0, "end": 194.08, "text": " So that's a good thing, I guess, because otherwise we are all out of jobs soon.", "tokens": [50364, 407, 300, 311, 257, 665, 551, 11, 286, 2041, 11, 570, 5911, 321, 366, 439, 484, 295, 4782, 2321, 13, 50818], "temperature": 0.0, "avg_logprob": -0.2624897296612079, "compression_ratio": 1.36, "no_speech_prob": 0.012229718267917633}, {"id": 38, "seek": 18500, "start": 194.08, "end": 201.6, "text": " And so to the best of my knowledge, this in-context learning phenomenon was first reported in", "tokens": [50818, 400, 370, 281, 264, 1151, 295, 452, 3601, 11, 341, 294, 12, 9000, 3828, 2539, 14029, 390, 700, 7055, 294, 51194], "temperature": 0.0, "avg_logprob": -0.2624897296612079, "compression_ratio": 1.36, "no_speech_prob": 0.012229718267917633}, {"id": 39, "seek": 18500, "start": 201.6, "end": 208.32, "text": " a seminal paper by Brown, Mann, Ryder, Soubia and collaborators.", "tokens": [51194, 257, 4361, 2071, 3035, 538, 8030, 11, 16892, 11, 13654, 1068, 11, 31458, 26975, 293, 39789, 13, 51530], "temperature": 0.0, "avg_logprob": -0.2624897296612079, "compression_ratio": 1.36, "no_speech_prob": 0.012229718267917633}, {"id": 40, "seek": 20832, "start": 208.32, "end": 220.64, "text": " And this paper was also the one that coined the phrase in-context learning, I think.", "tokens": [50364, 400, 341, 3035, 390, 611, 264, 472, 300, 45222, 264, 9535, 294, 12, 9000, 3828, 2539, 11, 286, 519, 13, 50980], "temperature": 0.0, "avg_logprob": -0.22946827113628387, "compression_ratio": 1.52, "no_speech_prob": 0.002888451563194394}, {"id": 41, "seek": 20832, "start": 220.64, "end": 225.35999999999999, "text": " I would also say that from a machine learning point of view, if you give your model a few", "tokens": [50980, 286, 576, 611, 584, 300, 490, 257, 3479, 2539, 935, 295, 1910, 11, 498, 291, 976, 428, 2316, 257, 1326, 51216], "temperature": 0.0, "avg_logprob": -0.22946827113628387, "compression_ratio": 1.52, "no_speech_prob": 0.002888451563194394}, {"id": 42, "seek": 20832, "start": 225.35999999999999, "end": 232.44, "text": " demonstrations and then it does well on those demonstrations, it's not terribly surprising.", "tokens": [51216, 34714, 293, 550, 309, 775, 731, 322, 729, 34714, 11, 309, 311, 406, 22903, 8830, 13, 51570], "temperature": 0.0, "avg_logprob": -0.22946827113628387, "compression_ratio": 1.52, "no_speech_prob": 0.002888451563194394}, {"id": 43, "seek": 23244, "start": 232.44, "end": 238.96, "text": " But the thing is here in-context learning works without any updates to the model parameters.", "tokens": [50364, 583, 264, 551, 307, 510, 294, 12, 9000, 3828, 2539, 1985, 1553, 604, 9205, 281, 264, 2316, 9834, 13, 50690], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 44, "seek": 23244, "start": 238.96, "end": 244.8, "text": " So I'm not doing any fine-tuning, I'm just using the same transformer and then it does", "tokens": [50690, 407, 286, 478, 406, 884, 604, 2489, 12, 83, 37726, 11, 286, 478, 445, 1228, 264, 912, 31782, 293, 550, 309, 775, 50982], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 45, "seek": 23244, "start": 244.8, "end": 245.8, "text": " the right thing.", "tokens": [50982, 264, 558, 551, 13, 51032], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 46, "seek": 23244, "start": 245.8, "end": 247.92, "text": " So that's, I guess, the surprising thing.", "tokens": [51032, 407, 300, 311, 11, 286, 2041, 11, 264, 8830, 551, 13, 51138], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 47, "seek": 23244, "start": 247.92, "end": 252.44, "text": " Some people even go as far as claim that it's one of the main reasons for why large language", "tokens": [51138, 2188, 561, 754, 352, 382, 1400, 382, 3932, 300, 309, 311, 472, 295, 264, 2135, 4112, 337, 983, 2416, 2856, 51364], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 48, "seek": 23244, "start": 252.44, "end": 254.56, "text": " models work so well in practice.", "tokens": [51364, 5245, 589, 370, 731, 294, 3124, 13, 51470], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 49, "seek": 23244, "start": 254.56, "end": 261.6, "text": " But regardless, understanding how large models do in-context learning is a very important", "tokens": [51470, 583, 10060, 11, 3701, 577, 2416, 5245, 360, 294, 12, 9000, 3828, 2539, 307, 257, 588, 1021, 51822], "temperature": 0.0, "avg_logprob": -0.17019360640953327, "compression_ratio": 1.7132075471698114, "no_speech_prob": 0.003170233918353915}, {"id": 50, "seek": 26160, "start": 261.6, "end": 269.28000000000003, "text": " question to us understanding large language models.", "tokens": [50364, 1168, 281, 505, 3701, 2416, 2856, 5245, 13, 50748], "temperature": 0.0, "avg_logprob": -0.31198124552881995, "compression_ratio": 1.4479638009049773, "no_speech_prob": 0.007926917634904385}, {"id": 51, "seek": 26160, "start": 269.28000000000003, "end": 277.48, "text": " So in recent years, there's a few very important papers that try to shed light on this phenomenon.", "tokens": [50748, 407, 294, 5162, 924, 11, 456, 311, 257, 1326, 588, 1021, 10577, 300, 853, 281, 14951, 1442, 322, 341, 14029, 13, 51158], "temperature": 0.0, "avg_logprob": -0.31198124552881995, "compression_ratio": 1.4479638009049773, "no_speech_prob": 0.007926917634904385}, {"id": 52, "seek": 26160, "start": 277.48, "end": 282.64000000000004, "text": " Our work is based on a few of these papers, so I'll do a quick review of the relevant", "tokens": [51158, 2621, 589, 307, 2361, 322, 257, 1326, 295, 613, 10577, 11, 370, 286, 603, 360, 257, 1702, 3131, 295, 264, 7340, 51416], "temperature": 0.0, "avg_logprob": -0.31198124552881995, "compression_ratio": 1.4479638009049773, "no_speech_prob": 0.007926917634904385}, {"id": 53, "seek": 26160, "start": 282.64000000000004, "end": 284.92, "text": " literature now.", "tokens": [51416, 10394, 586, 13, 51530], "temperature": 0.0, "avg_logprob": -0.31198124552881995, "compression_ratio": 1.4479638009049773, "no_speech_prob": 0.007926917634904385}, {"id": 54, "seek": 26160, "start": 284.92, "end": 290.36, "text": " The first such paper is the one by Garak Sipras-Leon Valiant, 2022.", "tokens": [51530, 440, 700, 1270, 3035, 307, 264, 472, 538, 7995, 514, 318, 647, 3906, 12, 11020, 266, 7188, 5798, 11, 20229, 13, 51802], "temperature": 0.0, "avg_logprob": -0.31198124552881995, "compression_ratio": 1.4479638009049773, "no_speech_prob": 0.007926917634904385}, {"id": 55, "seek": 29036, "start": 290.36, "end": 294.16, "text": " And the title is, What Can Transformers Learn In-Context, A Case Study of Simple Function", "tokens": [50364, 400, 264, 4876, 307, 11, 708, 1664, 27938, 433, 17216, 682, 12, 29821, 3828, 11, 316, 17791, 27039, 295, 21532, 11166, 882, 50554], "temperature": 0.0, "avg_logprob": -0.25365020181531106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.055690471082925797}, {"id": 56, "seek": 29036, "start": 294.16, "end": 295.64, "text": " Classes.", "tokens": [50554, 9471, 279, 13, 50628], "temperature": 0.0, "avg_logprob": -0.25365020181531106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.055690471082925797}, {"id": 57, "seek": 29036, "start": 295.64, "end": 300.52000000000004, "text": " So we call the example about fruits and colors and the hidden rule is that y is the color", "tokens": [50628, 407, 321, 818, 264, 1365, 466, 12148, 293, 4577, 293, 264, 7633, 4978, 307, 300, 288, 307, 264, 2017, 50872], "temperature": 0.0, "avg_logprob": -0.25365020181531106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.055690471082925797}, {"id": 58, "seek": 29036, "start": 300.52000000000004, "end": 303.56, "text": " of x, where x is some fruit and y is some color.", "tokens": [50872, 295, 2031, 11, 689, 2031, 307, 512, 6773, 293, 288, 307, 512, 2017, 13, 51024], "temperature": 0.0, "avg_logprob": -0.25365020181531106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.055690471082925797}, {"id": 59, "seek": 29036, "start": 303.56, "end": 310.88, "text": " But it's very hard to reason about what does it mean, what kind of function is represented", "tokens": [51024, 583, 309, 311, 588, 1152, 281, 1778, 466, 437, 775, 309, 914, 11, 437, 733, 295, 2445, 307, 10379, 51390], "temperature": 0.0, "avg_logprob": -0.25365020181531106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.055690471082925797}, {"id": 60, "seek": 29036, "start": 310.88, "end": 316.24, "text": " by the question about color in, say, the embedding space of words.", "tokens": [51390, 538, 264, 1168, 466, 2017, 294, 11, 584, 11, 264, 12240, 3584, 1901, 295, 2283, 13, 51658], "temperature": 0.0, "avg_logprob": -0.25365020181531106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.055690471082925797}, {"id": 61, "seek": 31624, "start": 316.24, "end": 323.36, "text": " So what they propose to do is consider a simplified setup where your x are Euclidean", "tokens": [50364, 407, 437, 436, 17421, 281, 360, 307, 1949, 257, 26335, 8657, 689, 428, 2031, 366, 462, 1311, 31264, 282, 50720], "temperature": 0.0, "avg_logprob": -0.22007285670230264, "compression_ratio": 1.5112107623318385, "no_speech_prob": 0.008572204038500786}, {"id": 62, "seek": 31624, "start": 323.36, "end": 330.32, "text": " vectors and the y's are linearly related to x by some unobserved data.", "tokens": [50720, 18875, 293, 264, 288, 311, 366, 43586, 4077, 281, 2031, 538, 512, 8526, 929, 6913, 1412, 13, 51068], "temperature": 0.0, "avg_logprob": -0.22007285670230264, "compression_ratio": 1.5112107623318385, "no_speech_prob": 0.008572204038500786}, {"id": 63, "seek": 31624, "start": 330.32, "end": 332.52, "text": " So it's a linear regression problem.", "tokens": [51068, 407, 309, 311, 257, 8213, 24590, 1154, 13, 51178], "temperature": 0.0, "avg_logprob": -0.22007285670230264, "compression_ratio": 1.5112107623318385, "no_speech_prob": 0.008572204038500786}, {"id": 64, "seek": 31624, "start": 332.52, "end": 339.44, "text": " Pictorially, you're given a bunch of demonstrations, the black dots, x, y pairs.", "tokens": [51178, 23899, 284, 2270, 11, 291, 434, 2212, 257, 3840, 295, 34714, 11, 264, 2211, 15026, 11, 2031, 11, 288, 15494, 13, 51524], "temperature": 0.0, "avg_logprob": -0.22007285670230264, "compression_ratio": 1.5112107623318385, "no_speech_prob": 0.008572204038500786}, {"id": 65, "seek": 31624, "start": 339.44, "end": 344.04, "text": " And then the question is in the form of the red dot, xn plus 1.", "tokens": [51524, 400, 550, 264, 1168, 307, 294, 264, 1254, 295, 264, 2182, 5893, 11, 2031, 77, 1804, 502, 13, 51754], "temperature": 0.0, "avg_logprob": -0.22007285670230264, "compression_ratio": 1.5112107623318385, "no_speech_prob": 0.008572204038500786}, {"id": 66, "seek": 34404, "start": 344.04, "end": 348.44, "text": " And you're trying to figure out what the label y is.", "tokens": [50364, 400, 291, 434, 1382, 281, 2573, 484, 437, 264, 7645, 288, 307, 13, 50584], "temperature": 0.0, "avg_logprob": -0.43299424206769027, "compression_ratio": 1.1818181818181819, "no_speech_prob": 0.0025887193623930216}, {"id": 67, "seek": 34404, "start": 348.44, "end": 350.44, "text": " The revolution is a bit low.", "tokens": [50584, 440, 8894, 307, 257, 857, 2295, 13, 50684], "temperature": 0.0, "avg_logprob": -0.43299424206769027, "compression_ratio": 1.1818181818181819, "no_speech_prob": 0.0025887193623930216}, {"id": 68, "seek": 34404, "start": 350.44, "end": 351.44, "text": " OK.", "tokens": [50684, 2264, 13, 50734], "temperature": 0.0, "avg_logprob": -0.43299424206769027, "compression_ratio": 1.1818181818181819, "no_speech_prob": 0.0025887193623930216}, {"id": 69, "seek": 34404, "start": 351.44, "end": 365.84000000000003, "text": " So a follow-up paper by Akirak, Sherman, Andreas, Ma, and Zoe in 2023.", "tokens": [50734, 407, 257, 1524, 12, 1010, 3035, 538, 9629, 347, 514, 11, 45130, 11, 38785, 11, 4042, 11, 293, 38234, 294, 44377, 13, 51454], "temperature": 0.0, "avg_logprob": -0.43299424206769027, "compression_ratio": 1.1818181818181819, "no_speech_prob": 0.0025887193623930216}, {"id": 70, "seek": 36584, "start": 365.84, "end": 374.47999999999996, "text": " They further try to characterize what kind of, or they try to characterize how transformers", "tokens": [50364, 814, 3052, 853, 281, 38463, 437, 733, 295, 11, 420, 436, 853, 281, 38463, 577, 4088, 433, 50796], "temperature": 0.0, "avg_logprob": -0.20287959302057984, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.06272321194410324}, {"id": 71, "seek": 36584, "start": 374.47999999999996, "end": 379.56, "text": " are able to learn these functions such as linear functions.", "tokens": [50796, 366, 1075, 281, 1466, 613, 6828, 1270, 382, 8213, 6828, 13, 51050], "temperature": 0.0, "avg_logprob": -0.20287959302057984, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.06272321194410324}, {"id": 72, "seek": 36584, "start": 379.56, "end": 387.59999999999997, "text": " And the main takeaway here is that transformers can learn in context because they are able", "tokens": [51050, 400, 264, 2135, 30681, 510, 307, 300, 4088, 433, 393, 1466, 294, 4319, 570, 436, 366, 1075, 51452], "temperature": 0.0, "avg_logprob": -0.20287959302057984, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.06272321194410324}, {"id": 73, "seek": 36584, "start": 387.59999999999997, "end": 390.2, "text": " to implement various learning algorithms.", "tokens": [51452, 281, 4445, 3683, 2539, 14642, 13, 51582], "temperature": 0.0, "avg_logprob": -0.20287959302057984, "compression_ratio": 1.6608187134502923, "no_speech_prob": 0.06272321194410324}, {"id": 74, "seek": 39020, "start": 390.8, "end": 396.4, "text": " For example, this plot here shows that experimentally, transformers appear to implement the ordinary", "tokens": [50394, 1171, 1365, 11, 341, 7542, 510, 3110, 300, 5120, 379, 11, 4088, 433, 4204, 281, 4445, 264, 10547, 50674], "temperature": 0.0, "avg_logprob": -0.19977221769445083, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.00034594209864735603}, {"id": 75, "seek": 39020, "start": 396.4, "end": 399.68, "text": " least squares algorithm on noiseless data.", "tokens": [50674, 1935, 19368, 9284, 322, 572, 271, 4272, 1412, 13, 50838], "temperature": 0.0, "avg_logprob": -0.19977221769445083, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.00034594209864735603}, {"id": 76, "seek": 39020, "start": 399.68, "end": 404.15999999999997, "text": " So the green line is like zero throughout.", "tokens": [50838, 407, 264, 3092, 1622, 307, 411, 4018, 3710, 13, 51062], "temperature": 0.0, "avg_logprob": -0.19977221769445083, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.00034594209864735603}, {"id": 77, "seek": 39020, "start": 404.15999999999997, "end": 411.76, "text": " And so the transform prediction has a very good agreement with ordinary least squares.", "tokens": [51062, 400, 370, 264, 4088, 17630, 575, 257, 588, 665, 8106, 365, 10547, 1935, 19368, 13, 51442], "temperature": 0.0, "avg_logprob": -0.19977221769445083, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.00034594209864735603}, {"id": 78, "seek": 39020, "start": 411.76, "end": 418.32, "text": " And the way they show that transformers are able to implement this learning algorithm", "tokens": [51442, 400, 264, 636, 436, 855, 300, 4088, 433, 366, 1075, 281, 4445, 341, 2539, 9284, 51770], "temperature": 0.0, "avg_logprob": -0.19977221769445083, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.00034594209864735603}, {"id": 79, "seek": 39020, "start": 418.32, "end": 419.88, "text": " is approved by construction.", "tokens": [51770, 307, 10826, 538, 6435, 13, 51848], "temperature": 0.0, "avg_logprob": -0.19977221769445083, "compression_ratio": 1.7399103139013452, "no_speech_prob": 0.00034594209864735603}, {"id": 80, "seek": 41988, "start": 419.88, "end": 425.12, "text": " So they have this very clever construction, where they define a few algorithmic primitives", "tokens": [50364, 407, 436, 362, 341, 588, 13494, 6435, 11, 689, 436, 6964, 257, 1326, 9284, 299, 2886, 38970, 50626], "temperature": 0.0, "avg_logprob": -0.18389782038601962, "compression_ratio": 1.7076271186440677, "no_speech_prob": 0.0001442293869331479}, {"id": 81, "seek": 41988, "start": 425.12, "end": 431.88, "text": " like multiplication, division, affine transformation, and they show that the attention unit can", "tokens": [50626, 411, 27290, 11, 10044, 11, 2096, 533, 9887, 11, 293, 436, 855, 300, 264, 3202, 4985, 393, 50964], "temperature": 0.0, "avg_logprob": -0.18389782038601962, "compression_ratio": 1.7076271186440677, "no_speech_prob": 0.0001442293869331479}, {"id": 82, "seek": 41988, "start": 431.88, "end": 433.4, "text": " implement this primitive.", "tokens": [50964, 4445, 341, 28540, 13, 51040], "temperature": 0.0, "avg_logprob": -0.18389782038601962, "compression_ratio": 1.7076271186440677, "no_speech_prob": 0.0001442293869331479}, {"id": 83, "seek": 41988, "start": 433.4, "end": 437.88, "text": " So by hooking together various attention units, you're able to implement algorithms", "tokens": [51040, 407, 538, 1106, 5953, 1214, 3683, 3202, 6815, 11, 291, 434, 1075, 281, 4445, 14642, 51264], "temperature": 0.0, "avg_logprob": -0.18389782038601962, "compression_ratio": 1.7076271186440677, "no_speech_prob": 0.0001442293869331479}, {"id": 84, "seek": 41988, "start": 437.88, "end": 439.4, "text": " such as iOS.", "tokens": [51264, 1270, 382, 17430, 13, 51340], "temperature": 0.0, "avg_logprob": -0.18389782038601962, "compression_ratio": 1.7076271186440677, "no_speech_prob": 0.0001442293869331479}, {"id": 85, "seek": 41988, "start": 439.4, "end": 443.32, "text": " And I'll mention here that further along this direction, there are also more extreme examples", "tokens": [51340, 400, 286, 603, 2152, 510, 300, 3052, 2051, 341, 3513, 11, 456, 366, 611, 544, 8084, 5110, 51536], "temperature": 0.0, "avg_logprob": -0.18389782038601962, "compression_ratio": 1.7076271186440677, "no_speech_prob": 0.0001442293869331479}, {"id": 86, "seek": 44332, "start": 443.32, "end": 450.44, "text": " where people show that the attention architecture can implement some kind of register system", "tokens": [50364, 689, 561, 855, 300, 264, 3202, 9482, 393, 4445, 512, 733, 295, 7280, 1185, 50720], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 87, "seek": 44332, "start": 450.44, "end": 451.44, "text": " or something.", "tokens": [50720, 420, 746, 13, 50770], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 88, "seek": 44332, "start": 451.44, "end": 456.92, "text": " So you can implement arbitrary algorithms and transformers can be called as programmable", "tokens": [50770, 407, 291, 393, 4445, 23211, 14642, 293, 4088, 433, 393, 312, 1219, 382, 37648, 712, 51044], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 89, "seek": 44332, "start": 456.92, "end": 459.24, "text": " computers.", "tokens": [51044, 10807, 13, 51160], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 90, "seek": 44332, "start": 459.24, "end": 463.76, "text": " The catch is that all these constructions are very clever, but the downside is that also", "tokens": [51160, 440, 3745, 307, 300, 439, 613, 7690, 626, 366, 588, 13494, 11, 457, 264, 25060, 307, 300, 611, 51386], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 91, "seek": 44332, "start": 463.76, "end": 465.76, "text": " means they are very fragile.", "tokens": [51386, 1355, 436, 366, 588, 23847, 13, 51486], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 92, "seek": 44332, "start": 465.76, "end": 470.76, "text": " And it's unclear whether these very clever constructions are actually recovered when", "tokens": [51486, 400, 309, 311, 25636, 1968, 613, 588, 13494, 7690, 626, 366, 767, 19542, 562, 51736], "temperature": 0.0, "avg_logprob": -0.1583512913097035, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.00136676081456244}, {"id": 93, "seek": 47076, "start": 470.76, "end": 475.88, "text": " you, say, train your transformers with the atom algorithm.", "tokens": [50364, 291, 11, 584, 11, 3847, 428, 4088, 433, 365, 264, 12018, 9284, 13, 50620], "temperature": 0.0, "avg_logprob": -0.5544710060984818, "compression_ratio": 1.4106280193236715, "no_speech_prob": 0.007924120873212814}, {"id": 94, "seek": 47076, "start": 475.88, "end": 478.03999999999996, "text": " So the next in line are two papers.", "tokens": [50620, 407, 264, 958, 294, 1622, 366, 732, 10577, 13, 50728], "temperature": 0.0, "avg_logprob": -0.5544710060984818, "compression_ratio": 1.4106280193236715, "no_speech_prob": 0.007924120873212814}, {"id": 95, "seek": 47076, "start": 478.03999999999996, "end": 482.96, "text": " Linear transformers are circularly fast-waist programs by Schlag, Erich, Mied, Huber in", "tokens": [50728, 14670, 289, 4088, 433, 366, 16476, 356, 2370, 12, 4151, 468, 4268, 538, 16420, 559, 11, 3300, 480, 11, 376, 1091, 11, 389, 10261, 294, 50974], "temperature": 0.0, "avg_logprob": -0.5544710060984818, "compression_ratio": 1.4106280193236715, "no_speech_prob": 0.007924120873212814}, {"id": 96, "seek": 47076, "start": 482.96, "end": 483.96, "text": " 2010.", "tokens": [50974, 9657, 13, 51024], "temperature": 0.0, "avg_logprob": -0.5544710060984818, "compression_ratio": 1.4106280193236715, "no_speech_prob": 0.007924120873212814}, {"id": 97, "seek": 47076, "start": 483.96, "end": 496.24, "text": " And a closely related paper by Oswald, Nikolson, Luan, Dazzo, Sacramento, Moff, and Blak Mirov", "tokens": [51024, 400, 257, 8185, 4077, 3035, 538, 8875, 33262, 11, 13969, 401, 3015, 11, 5047, 282, 11, 413, 921, 4765, 11, 38360, 11, 3335, 602, 11, 293, 2177, 514, 376, 5182, 85, 51638], "temperature": 0.0, "avg_logprob": -0.5544710060984818, "compression_ratio": 1.4106280193236715, "no_speech_prob": 0.007924120873212814}, {"id": 98, "seek": 47076, "start": 496.24, "end": 497.24, "text": " in 2010.", "tokens": [51638, 294, 9657, 13, 51688], "temperature": 0.0, "avg_logprob": -0.5544710060984818, "compression_ratio": 1.4106280193236715, "no_speech_prob": 0.007924120873212814}, {"id": 99, "seek": 49724, "start": 497.24, "end": 502.8, "text": " So I'll mainly focus on the second paper, Transformers, Learning Contacts by Gradient", "tokens": [50364, 407, 286, 603, 8704, 1879, 322, 264, 1150, 3035, 11, 27938, 433, 11, 15205, 4839, 15295, 538, 16710, 1196, 50642], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 100, "seek": 49724, "start": 502.8, "end": 503.8, "text": " Descent.", "tokens": [50642, 3885, 2207, 13, 50692], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 101, "seek": 49724, "start": 503.8, "end": 507.16, "text": " And so here, as well, they do approve by construction.", "tokens": [50692, 400, 370, 510, 11, 382, 731, 11, 436, 360, 18827, 538, 6435, 13, 50860], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 102, "seek": 49724, "start": 507.16, "end": 511.64, "text": " But there is a very important difference from previous papers, which is they consider the", "tokens": [50860, 583, 456, 307, 257, 588, 1021, 2649, 490, 3894, 10577, 11, 597, 307, 436, 1949, 264, 51084], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 103, "seek": 49724, "start": 511.64, "end": 518.16, "text": " linear transformers, which is, so all previous papers, they may consider a simplified setting", "tokens": [51084, 8213, 4088, 433, 11, 597, 307, 11, 370, 439, 3894, 10577, 11, 436, 815, 1949, 257, 26335, 3287, 51410], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 104, "seek": 49724, "start": 518.16, "end": 521.92, "text": " where the problem is linear regression, but the architecture was always full transformers.", "tokens": [51410, 689, 264, 1154, 307, 8213, 24590, 11, 457, 264, 9482, 390, 1009, 1577, 4088, 433, 13, 51598], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 105, "seek": 49724, "start": 521.92, "end": 525.6800000000001, "text": " But here, it's the first time people look at linear transformers, which I'll define", "tokens": [51598, 583, 510, 11, 309, 311, 264, 700, 565, 561, 574, 412, 8213, 4088, 433, 11, 597, 286, 603, 6964, 51786], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 106, "seek": 49724, "start": 525.6800000000001, "end": 526.6800000000001, "text": " a bit.", "tokens": [51786, 257, 857, 13, 51836], "temperature": 0.0, "avg_logprob": -0.21222697448730468, "compression_ratio": 1.7697594501718212, "no_speech_prob": 0.0006460622535087168}, {"id": 107, "seek": 52668, "start": 527.0799999999999, "end": 530.28, "text": " It's simpler than full transformers.", "tokens": [50384, 467, 311, 18587, 813, 1577, 4088, 433, 13, 50544], "temperature": 0.0, "avg_logprob": -0.22206135037579114, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.00023779590264894068}, {"id": 108, "seek": 52668, "start": 530.28, "end": 534.2399999999999, "text": " And because they look at linear transformers, they are able to provide a very simple construction", "tokens": [50544, 400, 570, 436, 574, 412, 8213, 4088, 433, 11, 436, 366, 1075, 281, 2893, 257, 588, 2199, 6435, 50742], "temperature": 0.0, "avg_logprob": -0.22206135037579114, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.00023779590264894068}, {"id": 109, "seek": 52668, "start": 534.2399999999999, "end": 541.76, "text": " where, under which linear transformers are able to implement gradient descent, which", "tokens": [50742, 689, 11, 833, 597, 8213, 4088, 433, 366, 1075, 281, 4445, 16235, 23475, 11, 597, 51118], "temperature": 0.0, "avg_logprob": -0.22206135037579114, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.00023779590264894068}, {"id": 110, "seek": 52668, "start": 541.76, "end": 545.4799999999999, "text": " in turn allows them to learn linear functions in context.", "tokens": [51118, 294, 1261, 4045, 552, 281, 1466, 8213, 6828, 294, 4319, 13, 51304], "temperature": 0.0, "avg_logprob": -0.22206135037579114, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.00023779590264894068}, {"id": 111, "seek": 52668, "start": 545.4799999999999, "end": 553.68, "text": " And remarkably, they have some pretty convincing experiments which agree with their construction.", "tokens": [51304, 400, 37381, 11, 436, 362, 512, 1238, 24823, 12050, 597, 3986, 365, 641, 6435, 13, 51714], "temperature": 0.0, "avg_logprob": -0.22206135037579114, "compression_ratio": 1.7688679245283019, "no_speech_prob": 0.00023779590264894068}, {"id": 112, "seek": 55368, "start": 553.68, "end": 556.8399999999999, "text": " So that's for prior work.", "tokens": [50364, 407, 300, 311, 337, 4059, 589, 13, 50522], "temperature": 0.0, "avg_logprob": -0.21701106318721064, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0001851955894380808}, {"id": 113, "seek": 55368, "start": 556.8399999999999, "end": 562.68, "text": " And now I come to our paper, where we try to answer the following question.", "tokens": [50522, 400, 586, 286, 808, 281, 527, 3035, 11, 689, 321, 853, 281, 1867, 264, 3480, 1168, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21701106318721064, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0001851955894380808}, {"id": 114, "seek": 55368, "start": 562.68, "end": 566.9599999999999, "text": " So we saw that transformers are expressive enough to implement a whole bunch of algorithms,", "tokens": [50814, 407, 321, 1866, 300, 4088, 433, 366, 40189, 1547, 281, 4445, 257, 1379, 3840, 295, 14642, 11, 51028], "temperature": 0.0, "avg_logprob": -0.21701106318721064, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0001851955894380808}, {"id": 115, "seek": 55368, "start": 566.9599999999999, "end": 571.8, "text": " but can we show that transformers actually learn to implement any of these algorithms", "tokens": [51028, 457, 393, 321, 855, 300, 4088, 433, 767, 1466, 281, 4445, 604, 295, 613, 14642, 51270], "temperature": 0.0, "avg_logprob": -0.21701106318721064, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0001851955894380808}, {"id": 116, "seek": 55368, "start": 571.8, "end": 576.16, "text": " during training?", "tokens": [51270, 1830, 3097, 30, 51488], "temperature": 0.0, "avg_logprob": -0.21701106318721064, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0001851955894380808}, {"id": 117, "seek": 55368, "start": 576.16, "end": 579.0, "text": " So let me set up the problem.", "tokens": [51488, 407, 718, 385, 992, 493, 264, 1154, 13, 51630], "temperature": 0.0, "avg_logprob": -0.21701106318721064, "compression_ratio": 1.5980392156862746, "no_speech_prob": 0.0001851955894380808}, {"id": 118, "seek": 57900, "start": 579.0, "end": 586.52, "text": " When you have a transformer, the input is of the form of a matrix, d by n, where you", "tokens": [50364, 1133, 291, 362, 257, 31782, 11, 264, 4846, 307, 295, 264, 1254, 295, 257, 8141, 11, 274, 538, 297, 11, 689, 291, 50740], "temperature": 0.0, "avg_logprob": -0.2894986046685113, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.0017811829457059503}, {"id": 119, "seek": 57900, "start": 586.52, "end": 590.6, "text": " can think of it as a horizontally stacked bunch of tokens.", "tokens": [50740, 393, 519, 295, 309, 382, 257, 33796, 28867, 3840, 295, 22667, 13, 50944], "temperature": 0.0, "avg_logprob": -0.2894986046685113, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.0017811829457059503}, {"id": 120, "seek": 57900, "start": 590.6, "end": 593.08, "text": " Each token is kind of like a word in a sentence.", "tokens": [50944, 6947, 14862, 307, 733, 295, 411, 257, 1349, 294, 257, 8174, 13, 51068], "temperature": 0.0, "avg_logprob": -0.2894986046685113, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.0017811829457059503}, {"id": 121, "seek": 57900, "start": 593.08, "end": 596.16, "text": " So your sentence will get, you know, embedded in the impedance space and turn into a bunch", "tokens": [51068, 407, 428, 8174, 486, 483, 11, 291, 458, 11, 16741, 294, 264, 36264, 1901, 293, 1261, 666, 257, 3840, 51222], "temperature": 0.0, "avg_logprob": -0.2894986046685113, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.0017811829457059503}, {"id": 122, "seek": 57900, "start": 596.16, "end": 598.6, "text": " of factors.", "tokens": [51222, 295, 6771, 13, 51344], "temperature": 0.0, "avg_logprob": -0.2894986046685113, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.0017811829457059503}, {"id": 123, "seek": 57900, "start": 598.6, "end": 602.36, "text": " So if you want to see it.", "tokens": [51344, 407, 498, 291, 528, 281, 536, 309, 13, 51532], "temperature": 0.0, "avg_logprob": -0.2894986046685113, "compression_ratio": 1.5891089108910892, "no_speech_prob": 0.0017811829457059503}, {"id": 124, "seek": 60236, "start": 602.36, "end": 609.84, "text": " The standard self-attention module is the following function.", "tokens": [50364, 440, 3832, 2698, 12, 1591, 1251, 10088, 307, 264, 3480, 2445, 13, 50738], "temperature": 0.0, "avg_logprob": -0.20582564217703683, "compression_ratio": 1.52, "no_speech_prob": 0.0003199552884325385}, {"id": 125, "seek": 60236, "start": 609.84, "end": 613.5600000000001, "text": " So you have your key value query matrix.", "tokens": [50738, 407, 291, 362, 428, 2141, 2158, 14581, 8141, 13, 50924], "temperature": 0.0, "avg_logprob": -0.20582564217703683, "compression_ratio": 1.52, "no_speech_prob": 0.0003199552884325385}, {"id": 126, "seek": 60236, "start": 613.5600000000001, "end": 624.72, "text": " You have a mask for this causality, and then you put a softmax on this thing.", "tokens": [50924, 509, 362, 257, 6094, 337, 341, 3302, 1860, 11, 293, 550, 291, 829, 257, 2787, 41167, 322, 341, 551, 13, 51482], "temperature": 0.0, "avg_logprob": -0.20582564217703683, "compression_ratio": 1.52, "no_speech_prob": 0.0003199552884325385}, {"id": 127, "seek": 60236, "start": 624.72, "end": 631.08, "text": " And linear self-attention is basically the same thing except we take out the softmax.", "tokens": [51482, 400, 8213, 2698, 12, 1591, 1251, 307, 1936, 264, 912, 551, 3993, 321, 747, 484, 264, 2787, 41167, 13, 51800], "temperature": 0.0, "avg_logprob": -0.20582564217703683, "compression_ratio": 1.52, "no_speech_prob": 0.0003199552884325385}, {"id": 128, "seek": 63108, "start": 631.08, "end": 636.5200000000001, "text": " And that's why it's called linear because we took out the non-linearity.", "tokens": [50364, 400, 300, 311, 983, 309, 311, 1219, 8213, 570, 321, 1890, 484, 264, 2107, 12, 1889, 17409, 13, 50636], "temperature": 0.0, "avg_logprob": -0.2695096033924031, "compression_ratio": 1.7370689655172413, "no_speech_prob": 0.0068955388851463795}, {"id": 129, "seek": 63108, "start": 636.5200000000001, "end": 642.32, "text": " And by the same time, I would say that the phrase linear attention is maybe a bit of", "tokens": [50636, 400, 538, 264, 912, 565, 11, 286, 576, 584, 300, 264, 9535, 8213, 3202, 307, 1310, 257, 857, 295, 50926], "temperature": 0.0, "avg_logprob": -0.2695096033924031, "compression_ratio": 1.7370689655172413, "no_speech_prob": 0.0068955388851463795}, {"id": 130, "seek": 63108, "start": 642.32, "end": 649.36, "text": " a misnomer because the linear attention module is not linear in either the parameter PQK", "tokens": [50926, 257, 3346, 77, 14301, 570, 264, 8213, 3202, 10088, 307, 406, 8213, 294, 2139, 264, 13075, 430, 48, 42, 51278], "temperature": 0.0, "avg_logprob": -0.2695096033924031, "compression_ratio": 1.7370689655172413, "no_speech_prob": 0.0068955388851463795}, {"id": 131, "seek": 63108, "start": 649.36, "end": 650.36, "text": " or in its input Z.", "tokens": [51278, 420, 294, 1080, 4846, 1176, 13, 51328], "temperature": 0.0, "avg_logprob": -0.2695096033924031, "compression_ratio": 1.7370689655172413, "no_speech_prob": 0.0068955388851463795}, {"id": 132, "seek": 63108, "start": 650.36, "end": 654.84, "text": " In fact, it's a third or the polynomial of Z.", "tokens": [51328, 682, 1186, 11, 309, 311, 257, 2636, 420, 264, 26110, 295, 1176, 13, 51552], "temperature": 0.0, "avg_logprob": -0.2695096033924031, "compression_ratio": 1.7370689655172413, "no_speech_prob": 0.0068955388851463795}, {"id": 133, "seek": 63108, "start": 654.84, "end": 660.2800000000001, "text": " Because of this, the representation power, when you stack a bunch of these linear attention", "tokens": [51552, 1436, 295, 341, 11, 264, 10290, 1347, 11, 562, 291, 8630, 257, 3840, 295, 613, 8213, 3202, 51824], "temperature": 0.0, "avg_logprob": -0.2695096033924031, "compression_ratio": 1.7370689655172413, "no_speech_prob": 0.0068955388851463795}, {"id": 134, "seek": 66028, "start": 660.28, "end": 663.72, "text": " modules on top of each other, it increases.", "tokens": [50364, 16679, 322, 1192, 295, 1184, 661, 11, 309, 8637, 13, 50536], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 135, "seek": 66028, "start": 663.72, "end": 668.8399999999999, "text": " So this is in contrast to something like a linear fully connected neural network.", "tokens": [50536, 407, 341, 307, 294, 8712, 281, 746, 411, 257, 8213, 4498, 4582, 18161, 3209, 13, 50792], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 136, "seek": 66028, "start": 668.8399999999999, "end": 673.64, "text": " So no matter how many of these you stack, you always are a linear function of an input.", "tokens": [50792, 407, 572, 1871, 577, 867, 295, 613, 291, 8630, 11, 291, 1009, 366, 257, 8213, 2445, 295, 364, 4846, 13, 51032], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 137, "seek": 66028, "start": 673.64, "end": 677.04, "text": " But you can actually represent increasingly high-degree polynomials by stacking linear", "tokens": [51032, 583, 291, 393, 767, 2906, 12980, 1090, 12, 34368, 22560, 12356, 538, 41376, 8213, 51202], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 138, "seek": 66028, "start": 677.04, "end": 679.52, "text": " attention units.", "tokens": [51202, 3202, 6815, 13, 51326], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 139, "seek": 66028, "start": 679.52, "end": 684.48, "text": " And the linear transformer, which we'll look at, is basically stacking these attention", "tokens": [51326, 400, 264, 8213, 31782, 11, 597, 321, 603, 574, 412, 11, 307, 1936, 41376, 613, 3202, 51574], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 140, "seek": 66028, "start": 684.48, "end": 689.24, "text": " units by a residual connection.", "tokens": [51574, 6815, 538, 257, 27980, 4984, 13, 51812], "temperature": 0.0, "avg_logprob": -0.1909429931640625, "compression_ratio": 1.7165354330708662, "no_speech_prob": 0.0029801425989717245}, {"id": 141, "seek": 68924, "start": 689.24, "end": 698.0, "text": " And to be precise, this is a single-headed transformer.", "tokens": [50364, 400, 281, 312, 13600, 11, 341, 307, 257, 2167, 12, 28409, 31782, 13, 50802], "temperature": 0.0, "avg_logprob": -0.16840396692723403, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.00035134918289259076}, {"id": 142, "seek": 68924, "start": 698.0, "end": 701.48, "text": " So that's defining the linear transformer architecture.", "tokens": [50802, 407, 300, 311, 17827, 264, 8213, 31782, 9482, 13, 50976], "temperature": 0.0, "avg_logprob": -0.16840396692723403, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.00035134918289259076}, {"id": 143, "seek": 68924, "start": 701.48, "end": 705.72, "text": " And now let me properly set up the learning objective.", "tokens": [50976, 400, 586, 718, 385, 6108, 992, 493, 264, 2539, 10024, 13, 51188], "temperature": 0.0, "avg_logprob": -0.16840396692723403, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.00035134918289259076}, {"id": 144, "seek": 68924, "start": 705.72, "end": 711.24, "text": " So as mentioned earlier, the input to a transformer is a sequence of tokens.", "tokens": [51188, 407, 382, 2835, 3071, 11, 264, 4846, 281, 257, 31782, 307, 257, 8310, 295, 22667, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16840396692723403, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.00035134918289259076}, {"id": 145, "seek": 68924, "start": 711.24, "end": 717.76, "text": " And in the linear regression setting, each token Z consists of an x, y pair, where x", "tokens": [51464, 400, 294, 264, 8213, 24590, 3287, 11, 1184, 14862, 1176, 14689, 295, 364, 2031, 11, 288, 6119, 11, 689, 2031, 51790], "temperature": 0.0, "avg_logprob": -0.16840396692723403, "compression_ratio": 1.6237623762376239, "no_speech_prob": 0.00035134918289259076}, {"id": 146, "seek": 71776, "start": 717.76, "end": 724.64, "text": " is a d-dimensional Euclidean vector, y is a scalar, and x, y are related by this linear", "tokens": [50364, 307, 257, 274, 12, 18759, 462, 1311, 31264, 282, 8062, 11, 288, 307, 257, 39684, 11, 293, 2031, 11, 288, 366, 4077, 538, 341, 8213, 50708], "temperature": 0.0, "avg_logprob": -0.22885521012123186, "compression_ratio": 1.6, "no_speech_prob": 0.005722499452531338}, {"id": 147, "seek": 71776, "start": 724.64, "end": 725.64, "text": " relationship.", "tokens": [50708, 2480, 13, 50758], "temperature": 0.0, "avg_logprob": -0.22885521012123186, "compression_ratio": 1.6, "no_speech_prob": 0.005722499452531338}, {"id": 148, "seek": 71776, "start": 725.64, "end": 730.12, "text": " And theta star is unobserved.", "tokens": [50758, 400, 9725, 3543, 307, 8526, 929, 6913, 13, 50982], "temperature": 0.0, "avg_logprob": -0.22885521012123186, "compression_ratio": 1.6, "no_speech_prob": 0.005722499452531338}, {"id": 149, "seek": 71776, "start": 730.12, "end": 734.28, "text": " And on top of that, each prompt has a different theta star.", "tokens": [50982, 400, 322, 1192, 295, 300, 11, 1184, 12391, 575, 257, 819, 9725, 3543, 13, 51190], "temperature": 0.0, "avg_logprob": -0.22885521012123186, "compression_ratio": 1.6, "no_speech_prob": 0.005722499452531338}, {"id": 150, "seek": 71776, "start": 734.28, "end": 741.8, "text": " The goal, you are also given a xm plus 1, but without the label ym plus 1.", "tokens": [51190, 440, 3387, 11, 291, 366, 611, 2212, 257, 2031, 76, 1804, 502, 11, 457, 1553, 264, 7645, 288, 76, 1804, 502, 13, 51566], "temperature": 0.0, "avg_logprob": -0.22885521012123186, "compression_ratio": 1.6, "no_speech_prob": 0.005722499452531338}, {"id": 151, "seek": 71776, "start": 741.8, "end": 746.08, "text": " And the goal is to train the transformer to predict the hidden label.", "tokens": [51566, 400, 264, 3387, 307, 281, 3847, 264, 31782, 281, 6069, 264, 7633, 7645, 13, 51780], "temperature": 0.0, "avg_logprob": -0.22885521012123186, "compression_ratio": 1.6, "no_speech_prob": 0.005722499452531338}, {"id": 152, "seek": 74608, "start": 746.5600000000001, "end": 751.5200000000001, "text": " Given the demonstrations, as well as xm plus 1.", "tokens": [50388, 18600, 264, 34714, 11, 382, 731, 382, 2031, 76, 1804, 502, 13, 50636], "temperature": 0.0, "avg_logprob": -0.26728369972922583, "compression_ratio": 1.6546391752577319, "no_speech_prob": 0.02440059930086136}, {"id": 153, "seek": 74608, "start": 751.5200000000001, "end": 758.72, "text": " I was stressed that this problem is much harder than simply learning a single theta", "tokens": [50636, 286, 390, 14471, 300, 341, 1154, 307, 709, 6081, 813, 2935, 2539, 257, 2167, 9725, 50996], "temperature": 0.0, "avg_logprob": -0.26728369972922583, "compression_ratio": 1.6546391752577319, "no_speech_prob": 0.02440059930086136}, {"id": 154, "seek": 74608, "start": 758.72, "end": 762.5200000000001, "text": " star, because theta star changes from prompt to prompt.", "tokens": [50996, 3543, 11, 570, 9725, 3543, 2962, 490, 12391, 281, 12391, 13, 51186], "temperature": 0.0, "avg_logprob": -0.26728369972922583, "compression_ratio": 1.6546391752577319, "no_speech_prob": 0.02440059930086136}, {"id": 155, "seek": 74608, "start": 762.5200000000001, "end": 767.36, "text": " So you need to learn an algorithm that, given a few demonstrations, infers the right theta", "tokens": [51186, 407, 291, 643, 281, 1466, 364, 9284, 300, 11, 2212, 257, 1326, 34714, 11, 1536, 433, 264, 558, 9725, 51428], "temperature": 0.0, "avg_logprob": -0.26728369972922583, "compression_ratio": 1.6546391752577319, "no_speech_prob": 0.02440059930086136}, {"id": 156, "seek": 74608, "start": 767.36, "end": 770.5200000000001, "text": " star regardless of what the theta star is.", "tokens": [51428, 3543, 10060, 295, 437, 264, 9725, 3543, 307, 13, 51586], "temperature": 0.0, "avg_logprob": -0.26728369972922583, "compression_ratio": 1.6546391752577319, "no_speech_prob": 0.02440059930086136}, {"id": 157, "seek": 77608, "start": 776.5200000000001, "end": 783.36, "text": " And at this point, I would also mention that one of the reasons for choosing to focus on", "tokens": [50386, 400, 412, 341, 935, 11, 286, 576, 611, 2152, 300, 472, 295, 264, 4112, 337, 10875, 281, 1879, 322, 50728], "temperature": 0.0, "avg_logprob": -0.19788927714029947, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0006770133040845394}, {"id": 158, "seek": 77608, "start": 783.36, "end": 788.08, "text": " linear attention as opposed to the softmax attention, besides the fact that linear attention", "tokens": [50728, 8213, 3202, 382, 8851, 281, 264, 2787, 41167, 3202, 11, 11868, 264, 1186, 300, 8213, 3202, 50964], "temperature": 0.0, "avg_logprob": -0.19788927714029947, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0006770133040845394}, {"id": 159, "seek": 77608, "start": 788.08, "end": 794.5600000000001, "text": " is simpler and easier to understand, is that for this problem of learning a linear function,", "tokens": [50964, 307, 18587, 293, 3571, 281, 1223, 11, 307, 300, 337, 341, 1154, 295, 2539, 257, 8213, 2445, 11, 51288], "temperature": 0.0, "avg_logprob": -0.19788927714029947, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0006770133040845394}, {"id": 160, "seek": 77608, "start": 794.5600000000001, "end": 802.12, "text": " linear transformers perform much better than softmax transformers.", "tokens": [51288, 8213, 4088, 433, 2042, 709, 1101, 813, 2787, 41167, 4088, 433, 13, 51666], "temperature": 0.0, "avg_logprob": -0.19788927714029947, "compression_ratio": 1.7760416666666667, "no_speech_prob": 0.0006770133040845394}, {"id": 161, "seek": 80212, "start": 802.12, "end": 806.72, "text": " And I guess we'll see concretely why that is in a bit.", "tokens": [50364, 400, 286, 2041, 321, 603, 536, 39481, 736, 983, 300, 307, 294, 257, 857, 13, 50594], "temperature": 0.0, "avg_logprob": -0.21080495350396455, "compression_ratio": 1.4152046783625731, "no_speech_prob": 0.0022861631587147713}, {"id": 162, "seek": 80212, "start": 806.72, "end": 813.36, "text": " But even now, just intuitively, if your data are linearly related, then it makes sense", "tokens": [50594, 583, 754, 586, 11, 445, 46506, 11, 498, 428, 1412, 366, 43586, 4077, 11, 550, 309, 1669, 2020, 50926], "temperature": 0.0, "avg_logprob": -0.21080495350396455, "compression_ratio": 1.4152046783625731, "no_speech_prob": 0.0022861631587147713}, {"id": 163, "seek": 80212, "start": 813.36, "end": 823.92, "text": " that softmax doesn't really help you with all that much.", "tokens": [50926, 300, 2787, 41167, 1177, 380, 534, 854, 291, 365, 439, 300, 709, 13, 51454], "temperature": 0.0, "avg_logprob": -0.21080495350396455, "compression_ratio": 1.4152046783625731, "no_speech_prob": 0.0022861631587147713}, {"id": 164, "seek": 80212, "start": 823.92, "end": 827.12, "text": " So here's the first result I'll talk about.", "tokens": [51454, 407, 510, 311, 264, 700, 1874, 286, 603, 751, 466, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21080495350396455, "compression_ratio": 1.4152046783625731, "no_speech_prob": 0.0022861631587147713}, {"id": 165, "seek": 82712, "start": 827.12, "end": 833.16, "text": " We study one layer, linear transformer, and we claim that it implements one step of gradient", "tokens": [50364, 492, 2979, 472, 4583, 11, 8213, 31782, 11, 293, 321, 3932, 300, 309, 704, 17988, 472, 1823, 295, 16235, 50666], "temperature": 0.0, "avg_logprob": -0.21456812886358465, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.01881680078804493}, {"id": 166, "seek": 82712, "start": 833.16, "end": 836.24, "text": " descent at global minimum.", "tokens": [50666, 23475, 412, 4338, 7285, 13, 50820], "temperature": 0.0, "avg_logprob": -0.21456812886358465, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.01881680078804493}, {"id": 167, "seek": 82712, "start": 836.24, "end": 839.44, "text": " So what does it mean for a transformer to implement one step of gradient descent?", "tokens": [50820, 407, 437, 775, 309, 914, 337, 257, 31782, 281, 4445, 472, 1823, 295, 16235, 23475, 30, 50980], "temperature": 0.0, "avg_logprob": -0.21456812886358465, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.01881680078804493}, {"id": 168, "seek": 82712, "start": 839.44, "end": 843.24, "text": " On the left here, in this box, I show the architecture of a one-layer linear transformer.", "tokens": [50980, 1282, 264, 1411, 510, 11, 294, 341, 2424, 11, 286, 855, 264, 9482, 295, 257, 472, 12, 8376, 260, 8213, 31782, 13, 51170], "temperature": 0.0, "avg_logprob": -0.21456812886358465, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.01881680078804493}, {"id": 169, "seek": 82712, "start": 843.24, "end": 844.24, "text": " It's very simple.", "tokens": [51170, 467, 311, 588, 2199, 13, 51220], "temperature": 0.0, "avg_logprob": -0.21456812886358465, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.01881680078804493}, {"id": 170, "seek": 82712, "start": 844.24, "end": 850.6, "text": " If you have a z, it passes through a single attention layer, and then, you know, we get", "tokens": [51220, 759, 291, 362, 257, 710, 11, 309, 11335, 807, 257, 2167, 3202, 4583, 11, 293, 550, 11, 291, 458, 11, 321, 483, 51538], "temperature": 0.0, "avg_logprob": -0.21456812886358465, "compression_ratio": 1.703862660944206, "no_speech_prob": 0.01881680078804493}, {"id": 171, "seek": 85060, "start": 850.6, "end": 859.84, "text": " some output tfz, where tf subscript lz, denotes the transformer's prediction at layer l,", "tokens": [50364, 512, 5598, 256, 69, 89, 11, 689, 256, 69, 2325, 662, 287, 89, 11, 1441, 17251, 264, 31782, 311, 17630, 412, 4583, 287, 11, 50826], "temperature": 0.0, "avg_logprob": -0.20993907778870827, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.01565876603126526}, {"id": 172, "seek": 85060, "start": 859.84, "end": 861.5600000000001, "text": " given input z, and parameter w.", "tokens": [50826, 2212, 4846, 710, 11, 293, 13075, 261, 13, 50912], "temperature": 0.0, "avg_logprob": -0.20993907778870827, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.01565876603126526}, {"id": 173, "seek": 85060, "start": 861.5600000000001, "end": 866.72, "text": " So parameter w is like the correct key value matrices.", "tokens": [50912, 407, 13075, 261, 307, 411, 264, 3006, 2141, 2158, 32284, 13, 51170], "temperature": 0.0, "avg_logprob": -0.20993907778870827, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.01565876603126526}, {"id": 174, "seek": 85060, "start": 866.72, "end": 870.72, "text": " And we try to minimize the in-contact loss, which is the expected difference between the", "tokens": [51170, 400, 321, 853, 281, 17522, 264, 294, 12, 9000, 578, 4470, 11, 597, 307, 264, 5176, 2649, 1296, 264, 51370], "temperature": 0.0, "avg_logprob": -0.20993907778870827, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.01565876603126526}, {"id": 175, "seek": 85060, "start": 870.72, "end": 872.64, "text": " prediction and the true label.", "tokens": [51370, 17630, 293, 264, 2074, 7645, 13, 51466], "temperature": 0.0, "avg_logprob": -0.20993907778870827, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.01565876603126526}, {"id": 176, "seek": 85060, "start": 872.64, "end": 878.64, "text": " And the expectation is taken over both z, which is the input, as well as theta star,", "tokens": [51466, 400, 264, 14334, 307, 2726, 670, 1293, 710, 11, 597, 307, 264, 4846, 11, 382, 731, 382, 9725, 3543, 11, 51766], "temperature": 0.0, "avg_logprob": -0.20993907778870827, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.01565876603126526}, {"id": 177, "seek": 87864, "start": 878.68, "end": 884.64, "text": " which is the unobserved linear relationship.", "tokens": [50366, 597, 307, 264, 8526, 929, 6913, 8213, 2480, 13, 50664], "temperature": 0.0, "avg_logprob": -0.23598196699812607, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0010155963245779276}, {"id": 178, "seek": 87864, "start": 884.64, "end": 889.3199999999999, "text": " And if you forget about transformers, we're a bit a very reasonable thing to try to do", "tokens": [50664, 400, 498, 291, 2870, 466, 4088, 433, 11, 321, 434, 257, 857, 257, 588, 10585, 551, 281, 853, 281, 360, 50898], "temperature": 0.0, "avg_logprob": -0.23598196699812607, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0010155963245779276}, {"id": 179, "seek": 87864, "start": 889.3199999999999, "end": 893.96, "text": " when given a bunch of demonstrations, and you need to infer the correct label, is to", "tokens": [50898, 562, 2212, 257, 3840, 295, 34714, 11, 293, 291, 643, 281, 13596, 264, 3006, 7645, 11, 307, 281, 51130], "temperature": 0.0, "avg_logprob": -0.23598196699812607, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0010155963245779276}, {"id": 180, "seek": 87864, "start": 893.96, "end": 901.0, "text": " maintain a theta and then run gradient descent on it, with respect to the empirical least", "tokens": [51130, 6909, 257, 9725, 293, 550, 1190, 16235, 23475, 322, 309, 11, 365, 3104, 281, 264, 31886, 1935, 51482], "temperature": 0.0, "avg_logprob": -0.23598196699812607, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.0010155963245779276}, {"id": 181, "seek": 90100, "start": 901.0, "end": 905.72, "text": " grass loss, which I highlight in problem.", "tokens": [50364, 8054, 4470, 11, 597, 286, 5078, 294, 1154, 13, 50600], "temperature": 0.0, "avg_logprob": -0.31624148265424984, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0025505025405436754}, {"id": 182, "seek": 90100, "start": 905.72, "end": 916.08, "text": " And so here, I just take one step, a single step, of gradient descent, and if n is sufficiently", "tokens": [50600, 400, 370, 510, 11, 286, 445, 747, 472, 1823, 11, 257, 2167, 1823, 11, 295, 16235, 23475, 11, 293, 498, 297, 307, 31868, 51118], "temperature": 0.0, "avg_logprob": -0.31624148265424984, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0025505025405436754}, {"id": 183, "seek": 90100, "start": 916.08, "end": 920.52, "text": " large, you know, you'll probably do decently.", "tokens": [51118, 2416, 11, 291, 458, 11, 291, 603, 1391, 360, 979, 2276, 13, 51340], "temperature": 0.0, "avg_logprob": -0.31624148265424984, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0025505025405436754}, {"id": 184, "seek": 90100, "start": 920.52, "end": 922.76, "text": " So theorem one of our paper states the following.", "tokens": [51340, 407, 20904, 472, 295, 527, 3035, 4368, 264, 3480, 13, 51452], "temperature": 0.0, "avg_logprob": -0.31624148265424984, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0025505025405436754}, {"id": 185, "seek": 90100, "start": 922.76, "end": 928.44, "text": " If you assume that the covariates are sampled from the standard normal distribution and theta", "tokens": [51452, 759, 291, 6552, 300, 264, 49851, 1024, 366, 3247, 15551, 490, 264, 3832, 2710, 7316, 293, 9725, 51736], "temperature": 0.0, "avg_logprob": -0.31624148265424984, "compression_ratio": 1.5352112676056338, "no_speech_prob": 0.0025505025405436754}, {"id": 186, "seek": 92844, "start": 928.48, "end": 932.5600000000001, "text": " star is also sampled from the standard normal distribution, then the linear transformer", "tokens": [50366, 3543, 307, 611, 3247, 15551, 490, 264, 3832, 2710, 7316, 11, 550, 264, 8213, 31782, 50570], "temperature": 0.0, "avg_logprob": -0.1711877187093099, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0001609181344974786}, {"id": 187, "seek": 92844, "start": 932.5600000000001, "end": 939.8000000000001, "text": " that minimizes the in-contact loss, fw, which is in red, gives the same prediction as the", "tokens": [50570, 300, 4464, 5660, 264, 294, 12, 9000, 578, 4470, 11, 283, 86, 11, 597, 307, 294, 2182, 11, 2709, 264, 912, 17630, 382, 264, 50932], "temperature": 0.0, "avg_logprob": -0.1711877187093099, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0001609181344974786}, {"id": 188, "seek": 92844, "start": 939.8000000000001, "end": 944.7600000000001, "text": " one step gradient descent on r theta, which I highlight in purple.", "tokens": [50932, 472, 1823, 16235, 23475, 322, 367, 9725, 11, 597, 286, 5078, 294, 9656, 13, 51180], "temperature": 0.0, "avg_logprob": -0.1711877187093099, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0001609181344974786}, {"id": 189, "seek": 92844, "start": 944.7600000000001, "end": 955.0400000000001, "text": " So in other words, the output, tf1 of v comma w, is the same as if you ran one step of gradient", "tokens": [51180, 407, 294, 661, 2283, 11, 264, 5598, 11, 256, 69, 16, 295, 371, 22117, 261, 11, 307, 264, 912, 382, 498, 291, 5872, 472, 1823, 295, 16235, 51694], "temperature": 0.0, "avg_logprob": -0.1711877187093099, "compression_ratio": 1.6267942583732058, "no_speech_prob": 0.0001609181344974786}, {"id": 190, "seek": 95504, "start": 955.04, "end": 965.28, "text": " descent on theta, and use that to predict the label.", "tokens": [50364, 23475, 322, 9725, 11, 293, 764, 300, 281, 6069, 264, 7645, 13, 50876], "temperature": 0.0, "avg_logprob": -0.18688652094672709, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.00042383777326904237}, {"id": 191, "seek": 95504, "start": 965.28, "end": 971.64, "text": " And in fact, you can consider a more general setting when your covariates are sampled from", "tokens": [50876, 400, 294, 1186, 11, 291, 393, 1949, 257, 544, 2674, 3287, 562, 428, 49851, 1024, 366, 3247, 15551, 490, 51194], "temperature": 0.0, "avg_logprob": -0.18688652094672709, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.00042383777326904237}, {"id": 192, "seek": 95504, "start": 971.64, "end": 976.7199999999999, "text": " some distribution with a non-identity covariate.", "tokens": [51194, 512, 7316, 365, 257, 2107, 12, 1078, 507, 49851, 473, 13, 51448], "temperature": 0.0, "avg_logprob": -0.18688652094672709, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.00042383777326904237}, {"id": 193, "seek": 95504, "start": 976.7199999999999, "end": 980.36, "text": " So when your covariance is sigma here, the linear transformer that globally minimizes", "tokens": [51448, 407, 562, 428, 49851, 719, 307, 12771, 510, 11, 264, 8213, 31782, 300, 18958, 4464, 5660, 51630], "temperature": 0.0, "avg_logprob": -0.18688652094672709, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.00042383777326904237}, {"id": 194, "seek": 98036, "start": 980.48, "end": 988.48, "text": " the loss now coincides with running one step of precondition gradient descent, where the", "tokens": [50370, 264, 4470, 586, 13001, 1875, 365, 2614, 472, 1823, 295, 4346, 684, 849, 16235, 23475, 11, 689, 264, 50770], "temperature": 0.0, "avg_logprob": -0.2454702771943191, "compression_ratio": 1.46, "no_speech_prob": 0.0015483193565160036}, {"id": 195, "seek": 98036, "start": 988.48, "end": 995.44, "text": " preconditioner a is given by following.", "tokens": [50770, 4346, 684, 849, 260, 257, 307, 2212, 538, 3480, 13, 51118], "temperature": 0.0, "avg_logprob": -0.2454702771943191, "compression_ratio": 1.46, "no_speech_prob": 0.0015483193565160036}, {"id": 196, "seek": 98036, "start": 995.44, "end": 1003.32, "text": " For when n is very large, which is when you're given a ton of demonstrations of, you know,", "tokens": [51118, 1171, 562, 297, 307, 588, 2416, 11, 597, 307, 562, 291, 434, 2212, 257, 2952, 295, 34714, 295, 11, 291, 458, 11, 51512], "temperature": 0.0, "avg_logprob": -0.2454702771943191, "compression_ratio": 1.46, "no_speech_prob": 0.0015483193565160036}, {"id": 197, "seek": 100332, "start": 1003.48, "end": 1014.0, "text": " xy pairs, a in the limit is just inverse of your covariance matrix, the covariance matrix", "tokens": [50372, 2031, 88, 15494, 11, 257, 294, 264, 4948, 307, 445, 17340, 295, 428, 49851, 719, 8141, 11, 264, 49851, 719, 8141, 50898], "temperature": 0.0, "avg_logprob": -0.2953892527399836, "compression_ratio": 1.6104651162790697, "no_speech_prob": 0.02515428327023983}, {"id": 198, "seek": 100332, "start": 1014.0, "end": 1017.5200000000001, "text": " of your covariates.", "tokens": [50898, 295, 428, 49851, 1024, 13, 51074], "temperature": 0.0, "avg_logprob": -0.2953892527399836, "compression_ratio": 1.6104651162790697, "no_speech_prob": 0.02515428327023983}, {"id": 199, "seek": 100332, "start": 1017.5200000000001, "end": 1023.24, "text": " But when n is small, there's this additional regularization.", "tokens": [51074, 583, 562, 297, 307, 1359, 11, 456, 311, 341, 4497, 3890, 2144, 13, 51360], "temperature": 0.0, "avg_logprob": -0.2953892527399836, "compression_ratio": 1.6104651162790697, "no_speech_prob": 0.02515428327023983}, {"id": 200, "seek": 100332, "start": 1023.24, "end": 1029.44, "text": " Is it obvious that the global minimum is unique, and if not, is this a statement about any", "tokens": [51360, 1119, 309, 6322, 300, 264, 4338, 7285, 307, 3845, 11, 293, 498, 406, 11, 307, 341, 257, 5629, 466, 604, 51670], "temperature": 0.0, "avg_logprob": -0.2953892527399836, "compression_ratio": 1.6104651162790697, "no_speech_prob": 0.02515428327023983}, {"id": 201, "seek": 100332, "start": 1029.44, "end": 1030.44, "text": " global minimum?", "tokens": [51670, 4338, 7285, 30, 51720], "temperature": 0.0, "avg_logprob": -0.2953892527399836, "compression_ratio": 1.6104651162790697, "no_speech_prob": 0.02515428327023983}, {"id": 202, "seek": 103044, "start": 1030.56, "end": 1033.8, "text": " Yeah, so this is a statement about any global minimum.", "tokens": [50370, 865, 11, 370, 341, 307, 257, 5629, 466, 604, 4338, 7285, 13, 50532], "temperature": 0.0, "avg_logprob": -0.2105213626400455, "compression_ratio": 1.6203703703703705, "no_speech_prob": 0.0006983952480368316}, {"id": 203, "seek": 103044, "start": 1033.8, "end": 1042.44, "text": " In fact, there is some obvious, you know, no spaces in the loss, I guess, because one", "tokens": [50532, 682, 1186, 11, 456, 307, 512, 6322, 11, 291, 458, 11, 572, 7673, 294, 264, 4470, 11, 286, 2041, 11, 570, 472, 50964], "temperature": 0.0, "avg_logprob": -0.2105213626400455, "compression_ratio": 1.6203703703703705, "no_speech_prob": 0.0006983952480368316}, {"id": 204, "seek": 103044, "start": 1042.44, "end": 1045.8400000000001, "text": " example is the query times key matrix.", "tokens": [50964, 1365, 307, 264, 14581, 1413, 2141, 8141, 13, 51134], "temperature": 0.0, "avg_logprob": -0.2105213626400455, "compression_ratio": 1.6203703703703705, "no_speech_prob": 0.0006983952480368316}, {"id": 205, "seek": 103044, "start": 1045.8400000000001, "end": 1051.3600000000001, "text": " You can scale them arbitrarily if their product is the same, then that's the same.", "tokens": [51134, 509, 393, 4373, 552, 19071, 3289, 498, 641, 1674, 307, 264, 912, 11, 550, 300, 311, 264, 912, 13, 51410], "temperature": 0.0, "avg_logprob": -0.2105213626400455, "compression_ratio": 1.6203703703703705, "no_speech_prob": 0.0006983952480368316}, {"id": 206, "seek": 103044, "start": 1051.3600000000001, "end": 1056.68, "text": " Another example is, you know, since this is a linear transformer, scaling the value key", "tokens": [51410, 3996, 1365, 307, 11, 291, 458, 11, 1670, 341, 307, 257, 8213, 31782, 11, 21589, 264, 2158, 2141, 51676], "temperature": 0.0, "avg_logprob": -0.2105213626400455, "compression_ratio": 1.6203703703703705, "no_speech_prob": 0.0006983952480368316}, {"id": 207, "seek": 105668, "start": 1056.76, "end": 1062.0, "text": " current matrices arbitrarily as long as they multiply the same thing also gives the exact", "tokens": [50368, 2190, 32284, 19071, 3289, 382, 938, 382, 436, 12972, 264, 912, 551, 611, 2709, 264, 1900, 50630], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 208, "seek": 105668, "start": 1062.0, "end": 1065.72, "text": " same predictor.", "tokens": [50630, 912, 6069, 284, 13, 50816], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 209, "seek": 105668, "start": 1065.72, "end": 1071.0800000000002, "text": " But then one might wonder, you know, ignoring these inferences, is that unique?", "tokens": [50816, 583, 550, 472, 1062, 2441, 11, 291, 458, 11, 26258, 613, 13596, 2667, 11, 307, 300, 3845, 30, 51084], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 210, "seek": 105668, "start": 1071.0800000000002, "end": 1072.0800000000002, "text": " I'm not sure.", "tokens": [51084, 286, 478, 406, 988, 13, 51134], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 211, "seek": 105668, "start": 1072.0800000000002, "end": 1073.0800000000002, "text": " I'm not sure.", "tokens": [51134, 286, 478, 406, 988, 13, 51184], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 212, "seek": 105668, "start": 1073.0800000000002, "end": 1078.16, "text": " In perfectly, in all our experiments, this is always recovered.", "tokens": [51184, 682, 6239, 11, 294, 439, 527, 12050, 11, 341, 307, 1009, 19542, 13, 51438], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 213, "seek": 105668, "start": 1078.16, "end": 1080.04, "text": " So that's a good sign.", "tokens": [51438, 407, 300, 311, 257, 665, 1465, 13, 51532], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 214, "seek": 105668, "start": 1080.04, "end": 1086.6000000000001, "text": " And also, as I'm just about to mention, there are two concurrent works, which appear surely", "tokens": [51532, 400, 611, 11, 382, 286, 478, 445, 466, 281, 2152, 11, 456, 366, 732, 37702, 1985, 11, 597, 4204, 11468, 51860], "temperature": 0.0, "avg_logprob": -0.2502352516606169, "compression_ratio": 1.5934959349593496, "no_speech_prob": 0.002114686416462064}, {"id": 215, "seek": 108660, "start": 1086.6, "end": 1089.08, "text": " after we publish the initial draft.", "tokens": [50364, 934, 321, 11374, 264, 5883, 11206, 13, 50488], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 216, "seek": 108660, "start": 1089.08, "end": 1093.6799999999998, "text": " One of them characterizes global optimality for one-layer linear transformer on the similar", "tokens": [50488, 1485, 295, 552, 2517, 5660, 4338, 5028, 1860, 337, 472, 12, 8376, 260, 8213, 31782, 322, 264, 2531, 50718], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 217, "seek": 108660, "start": 1093.6799999999998, "end": 1094.6799999999998, "text": " sign.", "tokens": [50718, 1465, 13, 50768], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 218, "seek": 108660, "start": 1094.6799999999998, "end": 1095.6799999999998, "text": " So similar results at Sowers.", "tokens": [50768, 407, 2531, 3542, 412, 318, 23054, 13, 50818], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 219, "seek": 108660, "start": 1095.6799999999998, "end": 1100.08, "text": " And the second paper by Zang Fre and Bartlett in 2023.", "tokens": [50818, 400, 264, 1150, 3035, 538, 1176, 656, 6142, 293, 22338, 32547, 294, 44377, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 220, "seek": 108660, "start": 1100.08, "end": 1103.76, "text": " On top of characterizing global optimality, they show that if you run gradient descent", "tokens": [51038, 1282, 1192, 295, 2517, 3319, 4338, 5028, 1860, 11, 436, 855, 300, 498, 291, 1190, 16235, 23475, 51222], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 221, "seek": 108660, "start": 1103.76, "end": 1109.9599999999998, "text": " on the linear transformer with some specific initialization or some specific conditions", "tokens": [51222, 322, 264, 8213, 31782, 365, 512, 2685, 5883, 2144, 420, 512, 2685, 4487, 51532], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 222, "seek": 108660, "start": 1109.9599999999998, "end": 1114.84, "text": " on initialization, you'll always converge to this.", "tokens": [51532, 322, 5883, 2144, 11, 291, 603, 1009, 41881, 281, 341, 13, 51776], "temperature": 0.0, "avg_logprob": -0.2812091791741202, "compression_ratio": 1.734375, "no_speech_prob": 0.0009687485871836543}, {"id": 223, "seek": 111484, "start": 1114.84, "end": 1122.36, "text": " So at least, you know, it's a good region of attraction based off of these results.", "tokens": [50364, 407, 412, 1935, 11, 291, 458, 11, 309, 311, 257, 665, 4458, 295, 17672, 2361, 766, 295, 613, 3542, 13, 50740], "temperature": 0.0, "avg_logprob": -0.26724057678782615, "compression_ratio": 1.8, "no_speech_prob": 0.0003100721223745495}, {"id": 224, "seek": 111484, "start": 1122.36, "end": 1126.76, "text": " But I'm not sure if it's unique.", "tokens": [50740, 583, 286, 478, 406, 988, 498, 309, 311, 3845, 13, 50960], "temperature": 0.0, "avg_logprob": -0.26724057678782615, "compression_ratio": 1.8, "no_speech_prob": 0.0003100721223745495}, {"id": 225, "seek": 111484, "start": 1126.76, "end": 1130.4399999999998, "text": " So that's for one-layer transformer implementing one-stop gradient descent.", "tokens": [50960, 407, 300, 311, 337, 472, 12, 8376, 260, 31782, 18114, 472, 12, 13559, 16235, 23475, 13, 51144], "temperature": 0.0, "avg_logprob": -0.26724057678782615, "compression_ratio": 1.8, "no_speech_prob": 0.0003100721223745495}, {"id": 226, "seek": 111484, "start": 1130.4399999999998, "end": 1135.48, "text": " In practice, you know, transformers work better when there are lots of players and gradient", "tokens": [51144, 682, 3124, 11, 291, 458, 11, 4088, 433, 589, 1101, 562, 456, 366, 3195, 295, 4150, 293, 16235, 51396], "temperature": 0.0, "avg_logprob": -0.26724057678782615, "compression_ratio": 1.8, "no_speech_prob": 0.0003100721223745495}, {"id": 227, "seek": 111484, "start": 1135.48, "end": 1137.6399999999999, "text": " descent works better when there are lots of steps.", "tokens": [51396, 23475, 1985, 1101, 562, 456, 366, 3195, 295, 4439, 13, 51504], "temperature": 0.0, "avg_logprob": -0.26724057678782615, "compression_ratio": 1.8, "no_speech_prob": 0.0003100721223745495}, {"id": 228, "seek": 111484, "start": 1137.6399999999999, "end": 1142.8799999999999, "text": " So then a natural question is, can we extend the similar results to a L-layer linear transformer", "tokens": [51504, 407, 550, 257, 3303, 1168, 307, 11, 393, 321, 10101, 264, 2531, 3542, 281, 257, 441, 12, 8376, 260, 8213, 31782, 51766], "temperature": 0.0, "avg_logprob": -0.26724057678782615, "compression_ratio": 1.8, "no_speech_prob": 0.0003100721223745495}, {"id": 229, "seek": 114288, "start": 1143.0, "end": 1145.8000000000002, "text": " for some arbitrary integer L?", "tokens": [50370, 337, 512, 23211, 24922, 441, 30, 50510], "temperature": 0.0, "avg_logprob": -0.3729219851286515, "compression_ratio": 1.5288461538461537, "no_speech_prob": 0.0034806744661182165}, {"id": 230, "seek": 114288, "start": 1145.8000000000002, "end": 1151.44, "text": " So on the left, again, I show a L-layer linear transformer, same in context learning loss,", "tokens": [50510, 407, 322, 264, 1411, 11, 797, 11, 286, 855, 257, 441, 12, 8376, 260, 8213, 31782, 11, 912, 294, 4319, 2539, 4470, 11, 50792], "temperature": 0.0, "avg_logprob": -0.3729219851286515, "compression_ratio": 1.5288461538461537, "no_speech_prob": 0.0034806744661182165}, {"id": 231, "seek": 114288, "start": 1151.44, "end": 1156.5200000000002, "text": " but this time the predictor is after L-layers.", "tokens": [50792, 457, 341, 565, 264, 6069, 284, 307, 934, 441, 12, 8376, 433, 13, 51046], "temperature": 0.0, "avg_logprob": -0.3729219851286515, "compression_ratio": 1.5288461538461537, "no_speech_prob": 0.0034806744661182165}, {"id": 232, "seek": 114288, "start": 1156.5200000000002, "end": 1162.1200000000001, "text": " And in the middle, I show L-steps of gradient descent, again, with respect to the same in", "tokens": [51046, 400, 294, 264, 2808, 11, 286, 855, 441, 12, 20413, 295, 16235, 23475, 11, 797, 11, 365, 3104, 281, 264, 912, 294, 51326], "temperature": 0.0, "avg_logprob": -0.3729219851286515, "compression_ratio": 1.5288461538461537, "no_speech_prob": 0.0034806744661182165}, {"id": 233, "seek": 114288, "start": 1162.1200000000001, "end": 1166.68, "text": " percolate scores.", "tokens": [51326, 680, 8768, 473, 13444, 13, 51554], "temperature": 0.0, "avg_logprob": -0.3729219851286515, "compression_ratio": 1.5288461538461537, "no_speech_prob": 0.0034806744661182165}, {"id": 234, "seek": 114288, "start": 1166.68, "end": 1169.68, "text": " And here, we establish a weaker guarantee.", "tokens": [51554, 400, 510, 11, 321, 8327, 257, 24286, 10815, 13, 51704], "temperature": 0.0, "avg_logprob": -0.3729219851286515, "compression_ratio": 1.5288461538461537, "no_speech_prob": 0.0034806744661182165}, {"id": 235, "seek": 116968, "start": 1169.68, "end": 1174.88, "text": " So instead of saying that gradient descent is a global optimum, we only show that there", "tokens": [50364, 407, 2602, 295, 1566, 300, 16235, 23475, 307, 257, 4338, 39326, 11, 321, 787, 855, 300, 456, 50624], "temperature": 0.0, "avg_logprob": -0.2703123758005541, "compression_ratio": 1.6807511737089202, "no_speech_prob": 0.00030056509422138333}, {"id": 236, "seek": 116968, "start": 1174.88, "end": 1183.0800000000002, "text": " exists transformers, which are stationary points of the in-contact loss, such that at", "tokens": [50624, 8198, 4088, 433, 11, 597, 366, 30452, 2793, 295, 264, 294, 12, 9000, 578, 4470, 11, 1270, 300, 412, 51034], "temperature": 0.0, "avg_logprob": -0.2703123758005541, "compression_ratio": 1.6807511737089202, "no_speech_prob": 0.00030056509422138333}, {"id": 237, "seek": 116968, "start": 1183.0800000000002, "end": 1188.88, "text": " every layer, the transformer gives the same prediction as L-steps of gradient descent", "tokens": [51034, 633, 4583, 11, 264, 31782, 2709, 264, 912, 17630, 382, 441, 12, 20413, 295, 16235, 23475, 51324], "temperature": 0.0, "avg_logprob": -0.2703123758005541, "compression_ratio": 1.6807511737089202, "no_speech_prob": 0.00030056509422138333}, {"id": 238, "seek": 116968, "start": 1188.88, "end": 1189.88, "text": " on R.", "tokens": [51324, 322, 497, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2703123758005541, "compression_ratio": 1.6807511737089202, "no_speech_prob": 0.00030056509422138333}, {"id": 239, "seek": 116968, "start": 1189.88, "end": 1196.88, "text": " So in other words, TF2 would correspond to the prediction, TF1 corresponds to the prediction", "tokens": [51374, 407, 294, 661, 2283, 11, 40964, 17, 576, 6805, 281, 264, 17630, 11, 40964, 16, 23249, 281, 264, 17630, 51724], "temperature": 0.0, "avg_logprob": -0.2703123758005541, "compression_ratio": 1.6807511737089202, "no_speech_prob": 0.00030056509422138333}, {"id": 240, "seek": 119688, "start": 1197.0800000000002, "end": 1202.0, "text": " for each L.", "tokens": [50374, 337, 1184, 441, 13, 50620], "temperature": 0.0, "avg_logprob": -0.4718484197344099, "compression_ratio": 1.48, "no_speech_prob": 0.0021799528039991856}, {"id": 241, "seek": 119688, "start": 1202.0, "end": 1209.0, "text": " And that's kind of interesting because really the only thing you're training on is TF capital", "tokens": [50620, 400, 300, 311, 733, 295, 1880, 570, 534, 264, 787, 551, 291, 434, 3097, 322, 307, 40964, 4238, 50970], "temperature": 0.0, "avg_logprob": -0.4718484197344099, "compression_ratio": 1.48, "no_speech_prob": 0.0021799528039991856}, {"id": 242, "seek": 119688, "start": 1209.48, "end": 1210.48, "text": " L.", "tokens": [50994, 441, 13, 51044], "temperature": 0.0, "avg_logprob": -0.4718484197344099, "compression_ratio": 1.48, "no_speech_prob": 0.0021799528039991856}, {"id": 243, "seek": 119688, "start": 1210.48, "end": 1217.48, "text": " And so it's interesting that all these intermediates outputs have a interpretable connection to", "tokens": [51044, 400, 370, 309, 311, 1880, 300, 439, 613, 15184, 1024, 23930, 362, 257, 7302, 712, 4984, 281, 51394], "temperature": 0.0, "avg_logprob": -0.4718484197344099, "compression_ratio": 1.48, "no_speech_prob": 0.0021799528039991856}, {"id": 244, "seek": 119688, "start": 1217.5600000000002, "end": 1220.5600000000002, "text": " gradient descent.", "tokens": [51398, 16235, 23475, 13, 51548], "temperature": 0.0, "avg_logprob": -0.4718484197344099, "compression_ratio": 1.48, "no_speech_prob": 0.0021799528039991856}, {"id": 245, "seek": 122056, "start": 1220.56, "end": 1227.56, "text": " I have a question trying to parse this.", "tokens": [50364, 286, 362, 257, 1168, 1382, 281, 48377, 341, 13, 50714], "temperature": 0.0, "avg_logprob": -0.36516693891105007, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.09787816554307938}, {"id": 246, "seek": 122056, "start": 1227.8799999999999, "end": 1234.3799999999999, "text": " There exist transformers, I'm trying to figure out the quantification.", "tokens": [50730, 821, 2514, 4088, 433, 11, 286, 478, 1382, 281, 2573, 484, 264, 4426, 3774, 13, 51055], "temperature": 0.0, "avg_logprob": -0.36516693891105007, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.09787816554307938}, {"id": 247, "seek": 122056, "start": 1234.3799999999999, "end": 1241.3799999999999, "text": " There exist transformers that for a random choice of these parameters, what's the quantification", "tokens": [51055, 821, 2514, 4088, 433, 300, 337, 257, 4974, 3922, 295, 613, 9834, 11, 437, 311, 264, 4426, 3774, 51405], "temperature": 0.0, "avg_logprob": -0.36516693891105007, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.09787816554307938}, {"id": 248, "seek": 122056, "start": 1243.08, "end": 1248.08, "text": " on the X and the theta?", "tokens": [51490, 322, 264, 1783, 293, 264, 9725, 30, 51740], "temperature": 0.0, "avg_logprob": -0.36516693891105007, "compression_ratio": 1.6267605633802817, "no_speech_prob": 0.09787816554307938}, {"id": 249, "seek": 124808, "start": 1249.08, "end": 1254.08, "text": " Are you saying at the very beginning of the theorem, very beginning of theorem 3?", "tokens": [50414, 2014, 291, 1566, 412, 264, 588, 2863, 295, 264, 20904, 11, 588, 2863, 295, 20904, 805, 30, 50664], "temperature": 0.0, "avg_logprob": -0.24845581428677427, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.0010318413842469454}, {"id": 250, "seek": 124808, "start": 1254.08, "end": 1256.8799999999999, "text": " Yes, X and theta are here, expectation.", "tokens": [50664, 1079, 11, 1783, 293, 9725, 366, 510, 11, 14334, 13, 50804], "temperature": 0.0, "avg_logprob": -0.24845581428677427, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.0010318413842469454}, {"id": 251, "seek": 124808, "start": 1256.8799999999999, "end": 1262.32, "text": " So I define a loss on transformer key value query matrices, which is only a function of", "tokens": [50804, 407, 286, 6964, 257, 4470, 322, 31782, 2141, 2158, 14581, 32284, 11, 597, 307, 787, 257, 2445, 295, 51076], "temperature": 0.0, "avg_logprob": -0.24845581428677427, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.0010318413842469454}, {"id": 252, "seek": 124808, "start": 1262.32, "end": 1269.32, "text": " W that is expectation over Z, which I guess X, Y, and theta of the prediction minus the", "tokens": [51076, 343, 300, 307, 14334, 670, 1176, 11, 597, 286, 2041, 1783, 11, 398, 11, 293, 9725, 295, 264, 17630, 3175, 264, 51426], "temperature": 0.0, "avg_logprob": -0.24845581428677427, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.0010318413842469454}, {"id": 253, "seek": 124808, "start": 1269.96, "end": 1271.4399999999998, "text": " true label.", "tokens": [51458, 2074, 7645, 13, 51532], "temperature": 0.0, "avg_logprob": -0.24845581428677427, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.0010318413842469454}, {"id": 254, "seek": 124808, "start": 1271.4399999999998, "end": 1277.8799999999999, "text": " And there are stationary points of this loss, F of W, such that the stationary point is", "tokens": [51532, 400, 456, 366, 30452, 2793, 295, 341, 4470, 11, 479, 295, 343, 11, 1270, 300, 264, 30452, 935, 307, 51854], "temperature": 0.0, "avg_logprob": -0.24845581428677427, "compression_ratio": 1.7186147186147187, "no_speech_prob": 0.0010318413842469454}, {"id": 255, "seek": 127788, "start": 1277.88, "end": 1283.2, "text": " some specific choice of key value query matrices, so if it's non-identity, but sigma.", "tokens": [50364, 512, 2685, 3922, 295, 2141, 2158, 14581, 32284, 11, 370, 498, 309, 311, 2107, 12, 1078, 507, 11, 457, 12771, 13, 50630], "temperature": 0.0, "avg_logprob": -0.32066641414866726, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.0013445653021335602}, {"id": 256, "seek": 127788, "start": 1283.2, "end": 1289.64, "text": " And here we assume theta star is from sigma inverse, and there exist stationary points,", "tokens": [50630, 400, 510, 321, 6552, 9725, 3543, 307, 490, 12771, 17340, 11, 293, 456, 2514, 30452, 2793, 11, 50952], "temperature": 0.0, "avg_logprob": -0.32066641414866726, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.0013445653021335602}, {"id": 257, "seek": 127788, "start": 1289.64, "end": 1292.64, "text": " which coincide with preconditions.", "tokens": [50952, 597, 13001, 482, 365, 4346, 684, 2451, 13, 51102], "temperature": 0.0, "avg_logprob": -0.32066641414866726, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.0013445653021335602}, {"id": 258, "seek": 127788, "start": 1292.64, "end": 1297.64, "text": " Where the preconditioner is sigma inverse.", "tokens": [51102, 2305, 264, 4346, 684, 849, 260, 307, 12771, 17340, 13, 51352], "temperature": 0.0, "avg_logprob": -0.32066641414866726, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.0013445653021335602}, {"id": 259, "seek": 127788, "start": 1297.64, "end": 1303.64, "text": " Are these local minima, can you construct one which is also a local minimum?", "tokens": [51352, 2014, 613, 2654, 4464, 64, 11, 393, 291, 7690, 472, 597, 307, 611, 257, 2654, 7285, 30, 51652], "temperature": 0.0, "avg_logprob": -0.32066641414866726, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.0013445653021335602}, {"id": 260, "seek": 130364, "start": 1303.96, "end": 1310.72, "text": " I'm not sure, but we tried, but we couldn't show it, which is why we only show stationary", "tokens": [50380, 286, 478, 406, 988, 11, 457, 321, 3031, 11, 457, 321, 2809, 380, 855, 309, 11, 597, 307, 983, 321, 787, 855, 30452, 50718], "temperature": 0.0, "avg_logprob": -0.32051660726358605, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.0008033807389438152}, {"id": 261, "seek": 130364, "start": 1310.72, "end": 1311.72, "text": " points.", "tokens": [50718, 2793, 13, 50768], "temperature": 0.0, "avg_logprob": -0.32051660726358605, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.0008033807389438152}, {"id": 262, "seek": 130364, "start": 1311.72, "end": 1317.72, "text": " Okay, let me show you one more slide, so experimentally, so we only show that there exist stationary", "tokens": [50768, 1033, 11, 718, 385, 855, 291, 472, 544, 4137, 11, 370, 5120, 379, 11, 370, 321, 787, 855, 300, 456, 2514, 30452, 51068], "temperature": 0.0, "avg_logprob": -0.32051660726358605, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.0008033807389438152}, {"id": 263, "seek": 130364, "start": 1321.44, "end": 1327.96, "text": " point, but experimentally, surprisingly, we always recover the same key value matrices.", "tokens": [51254, 935, 11, 457, 5120, 379, 11, 17600, 11, 321, 1009, 8114, 264, 912, 2141, 2158, 32284, 13, 51580], "temperature": 0.0, "avg_logprob": -0.32051660726358605, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.0008033807389438152}, {"id": 264, "seek": 130364, "start": 1327.96, "end": 1332.96, "text": " So specifically, a transformer implements precondition gradient descent by sigma inverse", "tokens": [51580, 407, 4682, 11, 257, 31782, 704, 17988, 4346, 684, 849, 16235, 23475, 538, 12771, 17340, 51830], "temperature": 0.0, "avg_logprob": -0.32051660726358605, "compression_ratio": 1.6816143497757847, "no_speech_prob": 0.0008033807389438152}, {"id": 265, "seek": 133296, "start": 1332.96, "end": 1337.08, "text": " if the product of key query matrices is sigma inverse.", "tokens": [50364, 498, 264, 1674, 295, 2141, 14581, 32284, 307, 12771, 17340, 13, 50570], "temperature": 0.0, "avg_logprob": -0.25274539688258496, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.00045101813157089055}, {"id": 266, "seek": 133296, "start": 1337.08, "end": 1342.08, "text": " And so here I train a three-layer transformer, and I display sigma half, query times key", "tokens": [50570, 400, 370, 510, 286, 3847, 257, 1045, 12, 8376, 260, 31782, 11, 293, 286, 4674, 12771, 1922, 11, 14581, 1413, 2141, 50820], "temperature": 0.0, "avg_logprob": -0.25274539688258496, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.00045101813157089055}, {"id": 267, "seek": 133296, "start": 1342.08, "end": 1348.08, "text": " is sigma half, and we see that each of these cases is speculative, pretty much.", "tokens": [50820, 307, 12771, 1922, 11, 293, 321, 536, 300, 1184, 295, 613, 3331, 307, 49415, 11, 1238, 709, 13, 51120], "temperature": 0.0, "avg_logprob": -0.25274539688258496, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.00045101813157089055}, {"id": 268, "seek": 133296, "start": 1348.08, "end": 1352.16, "text": " So in other words, it's always learning to implement precondition.", "tokens": [51120, 407, 294, 661, 2283, 11, 309, 311, 1009, 2539, 281, 4445, 4346, 684, 849, 13, 51324], "temperature": 0.0, "avg_logprob": -0.25274539688258496, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.00045101813157089055}, {"id": 269, "seek": 133296, "start": 1352.16, "end": 1357.8, "text": " So I think that we don't have a theory for it, but I think there is, you know, we conjecture", "tokens": [51324, 407, 286, 519, 300, 321, 500, 380, 362, 257, 5261, 337, 309, 11, 457, 286, 519, 456, 307, 11, 291, 458, 11, 321, 416, 1020, 540, 51606], "temperature": 0.0, "avg_logprob": -0.25274539688258496, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.00045101813157089055}, {"id": 270, "seek": 135780, "start": 1357.8799999999999, "end": 1363.8799999999999, "text": " that maybe these are, in fact, locally or even globally.", "tokens": [50368, 300, 1310, 613, 366, 11, 294, 1186, 11, 16143, 420, 754, 18958, 13, 50668], "temperature": 0.0, "avg_logprob": -0.22966131273206775, "compression_ratio": 1.5702127659574467, "no_speech_prob": 0.0006561827030964196}, {"id": 271, "seek": 135780, "start": 1363.8799999999999, "end": 1369.12, "text": " So it's something worth thinking about.", "tokens": [50668, 407, 309, 311, 746, 3163, 1953, 466, 13, 50930], "temperature": 0.0, "avg_logprob": -0.22966131273206775, "compression_ratio": 1.5702127659574467, "no_speech_prob": 0.0006561827030964196}, {"id": 272, "seek": 135780, "start": 1369.12, "end": 1375.08, "text": " Before I end, I will also mention that I skimmed a bit of detail on characterizing this theorem.", "tokens": [50930, 4546, 286, 917, 11, 286, 486, 611, 2152, 300, 286, 1110, 332, 1912, 257, 857, 295, 2607, 322, 2517, 3319, 341, 20904, 13, 51228], "temperature": 0.0, "avg_logprob": -0.22966131273206775, "compression_ratio": 1.5702127659574467, "no_speech_prob": 0.0006561827030964196}, {"id": 273, "seek": 135780, "start": 1375.08, "end": 1379.96, "text": " We actually need to assume certain sparsities, specifically the last row and column of the", "tokens": [51228, 492, 767, 643, 281, 6552, 1629, 637, 685, 1088, 11, 4682, 264, 1036, 5386, 293, 7738, 295, 264, 51472], "temperature": 0.0, "avg_logprob": -0.22966131273206775, "compression_ratio": 1.5702127659574467, "no_speech_prob": 0.0006561827030964196}, {"id": 274, "seek": 135780, "start": 1379.96, "end": 1385.44, "text": " key query matrices are at zero, and there are actually two variants of this theorem,", "tokens": [51472, 2141, 14581, 32284, 366, 412, 4018, 11, 293, 456, 366, 767, 732, 21669, 295, 341, 20904, 11, 51746], "temperature": 0.0, "avg_logprob": -0.22966131273206775, "compression_ratio": 1.5702127659574467, "no_speech_prob": 0.0006561827030964196}, {"id": 275, "seek": 138544, "start": 1385.44, "end": 1389.04, "text": " depending on what kind of constraints we impose on the value matrix.", "tokens": [50364, 5413, 322, 437, 733, 295, 18491, 321, 26952, 322, 264, 2158, 8141, 13, 50544], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 276, "seek": 138544, "start": 1389.04, "end": 1393.28, "text": " You could implement precondition gradient descent or something more clever than precondition", "tokens": [50544, 509, 727, 4445, 4346, 684, 849, 16235, 23475, 420, 746, 544, 13494, 813, 4346, 684, 849, 50756], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 277, "seek": 138544, "start": 1393.28, "end": 1398.04, "text": " gradient descent, which interleaves gradient steps with rotation of the gram matrix to", "tokens": [50756, 16235, 23475, 11, 597, 728, 306, 5423, 16235, 4439, 365, 12447, 295, 264, 21353, 8141, 281, 50994], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 278, "seek": 138544, "start": 1398.04, "end": 1399.76, "text": " make things better conditioned.", "tokens": [50994, 652, 721, 1101, 35833, 13, 51080], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 279, "seek": 138544, "start": 1399.76, "end": 1403.52, "text": " You can see the details of all this in the arm.", "tokens": [51080, 509, 393, 536, 264, 4365, 295, 439, 341, 294, 264, 3726, 13, 51268], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 280, "seek": 138544, "start": 1403.52, "end": 1408.8400000000001, "text": " So that's all for the first part of the talk, and I'm almost out of time, but maybe I'll", "tokens": [51268, 407, 300, 311, 439, 337, 264, 700, 644, 295, 264, 751, 11, 293, 286, 478, 1920, 484, 295, 565, 11, 457, 1310, 286, 603, 51534], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 281, "seek": 138544, "start": 1408.8400000000001, "end": 1414.28, "text": " quickly talk about the second part, which is how linear transformer loss lens gave first", "tokens": [51534, 2661, 751, 466, 264, 1150, 644, 11, 597, 307, 577, 8213, 31782, 4470, 6765, 2729, 700, 51806], "temperature": 0.0, "avg_logprob": -0.20987638376526913, "compression_ratio": 1.8071428571428572, "no_speech_prob": 0.0004877908213529736}, {"id": 282, "seek": 141428, "start": 1414.28, "end": 1419.76, "text": " a number of remarkable similarities to the loss landscape of full transformation.", "tokens": [50364, 257, 1230, 295, 12802, 24197, 281, 264, 4470, 9661, 295, 1577, 9887, 13, 50638], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 283, "seek": 141428, "start": 1419.76, "end": 1424.24, "text": " So again, transformers are large and complicated, and it's difficult to pinpoint why algorithm", "tokens": [50638, 407, 797, 11, 4088, 433, 366, 2416, 293, 6179, 11, 293, 309, 311, 2252, 281, 40837, 983, 9284, 50862], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 284, "seek": 141428, "start": 1424.24, "end": 1428.0, "text": " works or it doesn't work, and it's difficult to theoretically analyze the behavior of optimization", "tokens": [50862, 1985, 420, 309, 1177, 380, 589, 11, 293, 309, 311, 2252, 281, 29400, 12477, 264, 5223, 295, 19618, 51050], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 285, "seek": 141428, "start": 1428.0, "end": 1429.0, "text": " algorithms.", "tokens": [51050, 14642, 13, 51100], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 286, "seek": 141428, "start": 1429.0, "end": 1431.6, "text": " Also, it's very expensive to experiment on full transformers.", "tokens": [51100, 2743, 11, 309, 311, 588, 5124, 281, 5120, 322, 1577, 4088, 433, 13, 51230], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 287, "seek": 141428, "start": 1431.6, "end": 1435.92, "text": " On the other hand, linear transformers may be a useful model to understand transformer", "tokens": [51230, 1282, 264, 661, 1011, 11, 8213, 4088, 433, 815, 312, 257, 4420, 2316, 281, 1223, 31782, 51446], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 288, "seek": 141428, "start": 1435.92, "end": 1436.92, "text": " optimization.", "tokens": [51446, 19618, 13, 51496], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 289, "seek": 141428, "start": 1436.92, "end": 1442.3999999999999, "text": " So we surveyed a number of recent papers, which look at the transformers, the optimization", "tokens": [51496, 407, 321, 8984, 292, 257, 1230, 295, 5162, 10577, 11, 597, 574, 412, 264, 4088, 433, 11, 264, 19618, 51770], "temperature": 0.0, "avg_logprob": -0.2100819980396944, "compression_ratio": 1.8655172413793104, "no_speech_prob": 0.0016476508462801576}, {"id": 290, "seek": 144240, "start": 1442.4, "end": 1448.0800000000002, "text": " landscape of full transformers, and we identify several remarkable features, which are kind", "tokens": [50364, 9661, 295, 1577, 4088, 433, 11, 293, 321, 5876, 2940, 12802, 4122, 11, 597, 366, 733, 50648], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 291, "seek": 144240, "start": 1448.0800000000002, "end": 1452.4, "text": " of unique to transform optimization, and we observe that shallow linear transformers", "tokens": [50648, 295, 3845, 281, 4088, 19618, 11, 293, 321, 11441, 300, 20488, 8213, 4088, 433, 50864], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 292, "seek": 144240, "start": 1452.4, "end": 1457.2, "text": " on the linear regression problem has similar optimization features.", "tokens": [50864, 322, 264, 8213, 24590, 1154, 575, 2531, 19618, 4122, 13, 51104], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 293, "seek": 144240, "start": 1457.2, "end": 1462.0800000000002, "text": " So one example is that Adam is significantly faster than stochastic gradient descent for", "tokens": [51104, 407, 472, 1365, 307, 300, 7938, 307, 10591, 4663, 813, 342, 8997, 2750, 16235, 23475, 337, 51348], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 294, "seek": 144240, "start": 1462.0800000000002, "end": 1464.8400000000001, "text": " a transformer training.", "tokens": [51348, 257, 31782, 3097, 13, 51486], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 295, "seek": 144240, "start": 1464.8400000000001, "end": 1469.76, "text": " On the left, and this is a phenomenon that is kind of unique to large-language models", "tokens": [51486, 1282, 264, 1411, 11, 293, 341, 307, 257, 14029, 300, 307, 733, 295, 3845, 281, 2416, 12, 25241, 20473, 5245, 51732], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 296, "seek": 144240, "start": 1469.76, "end": 1470.76, "text": " and transformers.", "tokens": [51732, 293, 4088, 433, 13, 51782], "temperature": 0.0, "avg_logprob": -0.25070484161376955, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.0008039767271839082}, {"id": 297, "seek": 147076, "start": 1470.8799999999999, "end": 1475.32, "text": " On the left, this plot is taken from Quintetian, I think that means 23.", "tokens": [50370, 1282, 264, 1411, 11, 341, 7542, 307, 2726, 490, 2326, 686, 302, 952, 11, 286, 519, 300, 1355, 6673, 13, 50592], "temperature": 0.0, "avg_logprob": -0.4244298698488346, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0037632854655385017}, {"id": 298, "seek": 147076, "start": 1475.32, "end": 1481.6, "text": " On the left, the two plots, we show training a CNN, or MNIST, and Cpartan, so it's a image", "tokens": [50592, 1282, 264, 1411, 11, 264, 732, 28609, 11, 321, 855, 3097, 257, 24859, 11, 420, 376, 45, 19756, 11, 293, 383, 6971, 282, 11, 370, 309, 311, 257, 3256, 50906], "temperature": 0.0, "avg_logprob": -0.4244298698488346, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0037632854655385017}, {"id": 299, "seek": 147076, "start": 1481.6, "end": 1482.6, "text": " test.", "tokens": [50906, 1500, 13, 50956], "temperature": 0.0, "avg_logprob": -0.4244298698488346, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0037632854655385017}, {"id": 300, "seek": 147076, "start": 1482.6, "end": 1488.6, "text": " And there is no obvious gap between SGD and L, but on the right, they show three transformers", "tokens": [50956, 400, 456, 307, 572, 6322, 7417, 1296, 34520, 35, 293, 441, 11, 457, 322, 264, 558, 11, 436, 855, 1045, 4088, 433, 51256], "temperature": 0.0, "avg_logprob": -0.4244298698488346, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0037632854655385017}, {"id": 301, "seek": 147076, "start": 1488.6, "end": 1492.48, "text": " on different datasets, and there's a clear gap between Adam and SGD.", "tokens": [51256, 322, 819, 42856, 11, 293, 456, 311, 257, 1850, 7417, 1296, 7938, 293, 34520, 35, 13, 51450], "temperature": 0.0, "avg_logprob": -0.4244298698488346, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0037632854655385017}, {"id": 302, "seek": 147076, "start": 1492.48, "end": 1498.84, "text": " Similar observations were also made in a number of other recent papers, and we show here on", "tokens": [51450, 10905, 18163, 645, 611, 1027, 294, 257, 1230, 295, 661, 5162, 10577, 11, 293, 321, 855, 510, 322, 51768], "temperature": 0.0, "avg_logprob": -0.4244298698488346, "compression_ratio": 1.6022727272727273, "no_speech_prob": 0.0037632854655385017}, {"id": 303, "seek": 149884, "start": 1498.8799999999999, "end": 1504.04, "text": " the left, you know, the same plot features from the previous slide for the three kinds", "tokens": [50366, 264, 1411, 11, 291, 458, 11, 264, 912, 7542, 4122, 490, 264, 3894, 4137, 337, 264, 1045, 3685, 50624], "temperature": 0.0, "avg_logprob": -0.2985867295309762, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.001725979265756905}, {"id": 304, "seek": 149884, "start": 1504.04, "end": 1506.1599999999999, "text": " of language tests.", "tokens": [50624, 295, 2856, 6921, 13, 50730], "temperature": 0.0, "avg_logprob": -0.2985867295309762, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.001725979265756905}, {"id": 305, "seek": 149884, "start": 1506.1599999999999, "end": 1510.32, "text": " Here on the right, I show a three-layer linear transformer trained on linear regression,", "tokens": [50730, 1692, 322, 264, 558, 11, 286, 855, 257, 1045, 12, 8376, 260, 8213, 31782, 8895, 322, 8213, 24590, 11, 50938], "temperature": 0.0, "avg_logprob": -0.2985867295309762, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.001725979265756905}, {"id": 306, "seek": 149884, "start": 1510.32, "end": 1516.32, "text": " and we see that similarly there is a significant gap between Adam and SGD, and the three plots", "tokens": [50938, 293, 321, 536, 300, 14138, 456, 307, 257, 4776, 7417, 1296, 7938, 293, 34520, 35, 11, 293, 264, 1045, 28609, 51238], "temperature": 0.0, "avg_logprob": -0.2985867295309762, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.001725979265756905}, {"id": 307, "seek": 149884, "start": 1516.32, "end": 1520.6, "text": " coincide with slightly different settings of the kind.", "tokens": [51238, 13001, 482, 365, 4748, 819, 6257, 295, 264, 733, 13, 51452], "temperature": 0.0, "avg_logprob": -0.2985867295309762, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.001725979265756905}, {"id": 308, "seek": 149884, "start": 1520.6, "end": 1526.48, "text": " And I'm already over time, so maybe I'll skip over the rest of the features, but the long", "tokens": [51452, 400, 286, 478, 1217, 670, 565, 11, 370, 1310, 286, 603, 10023, 670, 264, 1472, 295, 264, 4122, 11, 457, 264, 938, 51746], "temperature": 0.0, "avg_logprob": -0.2985867295309762, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.001725979265756905}, {"id": 309, "seek": 152648, "start": 1526.52, "end": 1531.16, "text": " story short, there's a number of features which are kind of unique to transform optimization,", "tokens": [50366, 1657, 2099, 11, 456, 311, 257, 1230, 295, 4122, 597, 366, 733, 295, 3845, 281, 4088, 19618, 11, 50598], "temperature": 0.0, "avg_logprob": -0.23763013353534773, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.0022858206648379564}, {"id": 310, "seek": 152648, "start": 1531.16, "end": 1535.24, "text": " and people conjecture that's maybe why adaptive algorithms are so important when training large", "tokens": [50598, 293, 561, 416, 1020, 540, 300, 311, 1310, 983, 27912, 14642, 366, 370, 1021, 562, 3097, 2416, 50802], "temperature": 0.0, "avg_logprob": -0.23763013353534773, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.0022858206648379564}, {"id": 311, "seek": 152648, "start": 1535.24, "end": 1541.0, "text": " language models, and so we went through each of them and we checked if you get the same", "tokens": [50802, 2856, 5245, 11, 293, 370, 321, 1437, 807, 1184, 295, 552, 293, 321, 10033, 498, 291, 483, 264, 912, 51090], "temperature": 0.0, "avg_logprob": -0.23763013353534773, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.0022858206648379564}, {"id": 312, "seek": 152648, "start": 1541.0, "end": 1546.96, "text": " kind of plots or data that you get from training a simple linear transformer, and each of this", "tokens": [51090, 733, 295, 28609, 420, 1412, 300, 291, 483, 490, 3097, 257, 2199, 8213, 31782, 11, 293, 1184, 295, 341, 51388], "temperature": 0.0, "avg_logprob": -0.23763013353534773, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.0022858206648379564}, {"id": 313, "seek": 152648, "start": 1546.96, "end": 1551.16, "text": " case, there is a surprising agreement with what people opt for for four transformers,", "tokens": [51388, 1389, 11, 456, 307, 257, 8830, 8106, 365, 437, 561, 2427, 337, 337, 1451, 4088, 433, 11, 51598], "temperature": 0.0, "avg_logprob": -0.23763013353534773, "compression_ratio": 1.7751937984496124, "no_speech_prob": 0.0022858206648379564}, {"id": 314, "seek": 155116, "start": 1551.8400000000001, "end": 1556.8400000000001, "text": " so with that, I will end the talk.", "tokens": [50398, 370, 365, 300, 11, 286, 486, 917, 264, 751, 13, 50648], "temperature": 0.0, "avg_logprob": -0.6640848491502844, "compression_ratio": 0.9264705882352942, "no_speech_prob": 0.008958911523222923}, {"id": 315, "seek": 155116, "start": 1570.8400000000001, "end": 1576.3600000000001, "text": " Any more questions for Chim?", "tokens": [51348, 2639, 544, 1651, 337, 761, 332, 30, 51624], "temperature": 0.0, "avg_logprob": -0.6640848491502844, "compression_ratio": 0.9264705882352942, "no_speech_prob": 0.008958911523222923}, {"id": 316, "seek": 157636, "start": 1576.36, "end": 1581.1599999999999, "text": " So I've heard that actual large language model training is like unstable, and if you look", "tokens": [50364, 407, 286, 600, 2198, 300, 3539, 2416, 2856, 2316, 3097, 307, 411, 23742, 11, 293, 498, 291, 574, 50604], "temperature": 0.0, "avg_logprob": -0.2523852725361669, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.002887499053031206}, {"id": 317, "seek": 157636, "start": 1581.1599999999999, "end": 1585.0, "text": " at the training pause, they're a place where you get like these spikes.", "tokens": [50604, 412, 264, 3097, 10465, 11, 436, 434, 257, 1081, 689, 291, 483, 411, 613, 28997, 13, 50796], "temperature": 0.0, "avg_logprob": -0.2523852725361669, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.002887499053031206}, {"id": 318, "seek": 157636, "start": 1585.0, "end": 1590.0, "text": " Are those instabilities also replicated in the smaller transformers that you consider?", "tokens": [50796, 2014, 729, 1058, 6167, 611, 46365, 294, 264, 4356, 4088, 433, 300, 291, 1949, 30, 51046], "temperature": 0.0, "avg_logprob": -0.2523852725361669, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.002887499053031206}, {"id": 319, "seek": 157636, "start": 1590.0, "end": 1594.0, "text": " Yeah, they are.", "tokens": [51046, 865, 11, 436, 366, 13, 51246], "temperature": 0.0, "avg_logprob": -0.2523852725361669, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.002887499053031206}, {"id": 320, "seek": 157636, "start": 1594.0, "end": 1601.0, "text": " In fact, we have a gap for why some of the instability is happening, and it goes back", "tokens": [51246, 682, 1186, 11, 321, 362, 257, 7417, 337, 983, 512, 295, 264, 34379, 307, 2737, 11, 293, 309, 1709, 646, 51596], "temperature": 0.0, "avg_logprob": -0.2523852725361669, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.002887499053031206}, {"id": 321, "seek": 160100, "start": 1601.16, "end": 1606.16, "text": " to the fact that the transformer appears to be learning to implement this gradient descent", "tokens": [50372, 281, 264, 1186, 300, 264, 31782, 7038, 281, 312, 2539, 281, 4445, 341, 16235, 23475, 50622], "temperature": 0.0, "avg_logprob": -0.2907928276062012, "compression_ratio": 1.8, "no_speech_prob": 0.015171927399933338}, {"id": 322, "seek": 160100, "start": 1606.16, "end": 1613.16, "text": " algorithm, and the thing with gradient descent is that the closer the larger your step size", "tokens": [50622, 9284, 11, 293, 264, 551, 365, 16235, 23475, 307, 300, 264, 4966, 264, 4833, 428, 1823, 2744, 50972], "temperature": 0.0, "avg_logprob": -0.2907928276062012, "compression_ratio": 1.8, "no_speech_prob": 0.015171927399933338}, {"id": 323, "seek": 160100, "start": 1613.16, "end": 1617.6, "text": " is, the better you do until the point where you exceed the lift shift constant, then things", "tokens": [50972, 307, 11, 264, 1101, 291, 360, 1826, 264, 935, 689, 291, 14048, 264, 5533, 5513, 5754, 11, 550, 721, 51194], "temperature": 0.0, "avg_logprob": -0.2907928276062012, "compression_ratio": 1.8, "no_speech_prob": 0.015171927399933338}, {"id": 324, "seek": 160100, "start": 1617.6, "end": 1624.6, "text": " blow up very quickly, so we also observed that as your loss gets lower and your learning", "tokens": [51194, 6327, 493, 588, 2661, 11, 370, 321, 611, 13095, 300, 382, 428, 4470, 2170, 3126, 293, 428, 2539, 51544], "temperature": 0.0, "avg_logprob": -0.2907928276062012, "compression_ratio": 1.8, "no_speech_prob": 0.015171927399933338}, {"id": 325, "seek": 160100, "start": 1625.12, "end": 1630.92, "text": " rate per layer is getting closer to the boundary, it's become more unstable because if you just", "tokens": [51570, 3314, 680, 4583, 307, 1242, 4966, 281, 264, 12866, 11, 309, 311, 1813, 544, 23742, 570, 498, 291, 445, 51860], "temperature": 0.0, "avg_logprob": -0.2907928276062012, "compression_ratio": 1.8, "no_speech_prob": 0.015171927399933338}, {"id": 326, "seek": 163092, "start": 1630.92, "end": 1636.8400000000001, "text": " exceed that a little bit, your transformer, the kind of optimization algorithm that's", "tokens": [50364, 14048, 300, 257, 707, 857, 11, 428, 31782, 11, 264, 733, 295, 19618, 9284, 300, 311, 50660], "temperature": 0.0, "avg_logprob": -0.4864431922115497, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.003505157306790352}, {"id": 327, "seek": 163092, "start": 1636.8400000000001, "end": 1639.6000000000001, "text": " implemented by a transformer, like hybridism.", "tokens": [50660, 12270, 538, 257, 31782, 11, 411, 13051, 1434, 13, 50798], "temperature": 0.0, "avg_logprob": -0.4864431922115497, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.003505157306790352}, {"id": 328, "seek": 163092, "start": 1639.6000000000001, "end": 1646.6000000000001, "text": " So that's one example, but yeah, we do offer similar problems.", "tokens": [50798, 407, 300, 311, 472, 1365, 11, 457, 1338, 11, 321, 360, 2626, 2531, 2740, 13, 51148], "temperature": 0.0, "avg_logprob": -0.4864431922115497, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.003505157306790352}, {"id": 329, "seek": 163092, "start": 1653.92, "end": 1660.8400000000001, "text": " So you showed the linear transform of one layer is equivalent to gradient, empirically,", "tokens": [51514, 407, 291, 4712, 264, 8213, 4088, 295, 472, 4583, 307, 10344, 281, 16235, 11, 25790, 984, 11, 51860], "temperature": 0.0, "avg_logprob": -0.4864431922115497, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.003505157306790352}, {"id": 330, "seek": 166084, "start": 1660.84, "end": 1662.3999999999999, "text": " one is the square one.", "tokens": [50364, 472, 307, 264, 3732, 472, 13, 50442], "temperature": 0.0, "avg_logprob": -0.381628438046104, "compression_ratio": 1.5889570552147239, "no_speech_prob": 0.004114280454814434}, {"id": 331, "seek": 166084, "start": 1662.3999999999999, "end": 1664.28, "text": " Yes, one step of gradient.", "tokens": [50442, 1079, 11, 472, 1823, 295, 16235, 13, 50536], "temperature": 0.0, "avg_logprob": -0.381628438046104, "compression_ratio": 1.5889570552147239, "no_speech_prob": 0.004114280454814434}, {"id": 332, "seek": 166084, "start": 1664.28, "end": 1670.28, "text": " For all layers, they actually implement the preconditioned gradient.", "tokens": [50536, 1171, 439, 7914, 11, 436, 767, 4445, 264, 4346, 684, 849, 292, 16235, 13, 50836], "temperature": 0.0, "avg_logprob": -0.381628438046104, "compression_ratio": 1.5889570552147239, "no_speech_prob": 0.004114280454814434}, {"id": 333, "seek": 166084, "start": 1670.28, "end": 1673.28, "text": " Yeah, so for both, let me go back.", "tokens": [50836, 865, 11, 370, 337, 1293, 11, 718, 385, 352, 646, 13, 50986], "temperature": 0.0, "avg_logprob": -0.381628438046104, "compression_ratio": 1.5889570552147239, "no_speech_prob": 0.004114280454814434}, {"id": 334, "seek": 166084, "start": 1678.28, "end": 1685.28, "text": " So for one layer, we showed that if the covariance is sigma, it also implements one step of precondition.", "tokens": [51236, 407, 337, 472, 4583, 11, 321, 4712, 300, 498, 264, 49851, 719, 307, 12771, 11, 309, 611, 704, 17988, 472, 1823, 295, 4346, 684, 849, 13, 51586], "temperature": 0.0, "avg_logprob": -0.381628438046104, "compression_ratio": 1.5889570552147239, "no_speech_prob": 0.004114280454814434}, {"id": 335, "seek": 168528, "start": 1685.3999999999999, "end": 1692.3999999999999, "text": " And then for our layer, if that covariance is identity, it just does L steps of standard", "tokens": [50370, 400, 550, 337, 527, 4583, 11, 498, 300, 49851, 719, 307, 6575, 11, 309, 445, 775, 441, 4439, 295, 3832, 50720], "temperature": 0.0, "avg_logprob": -0.3489467219302529, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.0018940522568300366}, {"id": 336, "seek": 168528, "start": 1699.76, "end": 1706.76, "text": " gradient descent, but again, if the covariance is sigma, then it does L steps of preconditioned.", "tokens": [51088, 16235, 23475, 11, 457, 797, 11, 498, 264, 49851, 719, 307, 12771, 11, 550, 309, 775, 441, 4439, 295, 4346, 684, 849, 292, 13, 51438], "temperature": 0.0, "avg_logprob": -0.3489467219302529, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.0018940522568300366}, {"id": 337, "seek": 168528, "start": 1707.68, "end": 1709.6, "text": " So it's kind of like two orthogonal.", "tokens": [51484, 407, 309, 311, 733, 295, 411, 732, 41488, 13, 51580], "temperature": 0.0, "avg_logprob": -0.3489467219302529, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.0018940522568300366}, {"id": 338, "seek": 168528, "start": 1709.6, "end": 1714.04, "text": " So the linear transform actually is nonlinear in Z, right?", "tokens": [51580, 407, 264, 8213, 4088, 767, 307, 2107, 28263, 294, 1176, 11, 558, 30, 51802], "temperature": 0.0, "avg_logprob": -0.3489467219302529, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.0018940522568300366}, {"id": 339, "seek": 171404, "start": 1714.04, "end": 1721.04, "text": " So that means this nonlinear minimization actually automatically implement precondition.", "tokens": [50364, 407, 300, 1355, 341, 2107, 28263, 4464, 2144, 767, 6772, 4445, 4346, 684, 849, 13, 50714], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 340, "seek": 171404, "start": 1721.04, "end": 1722.44, "text": " Yes, yes.", "tokens": [50714, 1079, 11, 2086, 13, 50784], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 341, "seek": 171404, "start": 1722.44, "end": 1729.44, "text": " Okay, so that's a different way to think about these algorithms and then they adaptively automatically", "tokens": [50784, 1033, 11, 370, 300, 311, 257, 819, 636, 281, 519, 466, 613, 14642, 293, 550, 436, 6231, 3413, 6772, 51134], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 342, "seek": 171404, "start": 1729.68, "end": 1731.8, "text": " choose what precondition it is.", "tokens": [51146, 2826, 437, 4346, 684, 849, 309, 307, 13, 51252], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 343, "seek": 171404, "start": 1731.8, "end": 1732.8, "text": " Yes, exactly.", "tokens": [51252, 1079, 11, 2293, 13, 51302], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 344, "seek": 171404, "start": 1732.8, "end": 1733.8, "text": " That's right.", "tokens": [51302, 663, 311, 558, 13, 51352], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 345, "seek": 171404, "start": 1733.8, "end": 1734.8, "text": " Okay.", "tokens": [51352, 1033, 13, 51402], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 346, "seek": 171404, "start": 1734.8, "end": 1735.8, "text": " Interesting.", "tokens": [51402, 14711, 13, 51452], "temperature": 0.0, "avg_logprob": -0.42047902157432154, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.004768350161612034}, {"id": 347, "seek": 173580, "start": 1736.8, "end": 1741.8, "text": " Just one question.", "tokens": [50414, 1449, 472, 1168, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 348, "seek": 173580, "start": 1741.8, "end": 1747.8, "text": " You mentioned if you add softmax in this linear regression task, it's actually going to underperform", "tokens": [50664, 509, 2835, 498, 291, 909, 2787, 41167, 294, 341, 8213, 24590, 5633, 11, 309, 311, 767, 516, 281, 833, 26765, 50964], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 349, "seek": 173580, "start": 1747.8, "end": 1749.8, "text": " compared to the linear model, right?", "tokens": [50964, 5347, 281, 264, 8213, 2316, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 350, "seek": 173580, "start": 1749.8, "end": 1750.8, "text": " Yeah.", "tokens": [51064, 865, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 351, "seek": 173580, "start": 1750.8, "end": 1751.8, "text": " I didn't understand.", "tokens": [51114, 286, 994, 380, 1223, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 352, "seek": 173580, "start": 1751.8, "end": 1752.8, "text": " What was the reason?", "tokens": [51164, 708, 390, 264, 1778, 30, 51214], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 353, "seek": 173580, "start": 1752.8, "end": 1753.8, "text": " This is kind of...", "tokens": [51214, 639, 307, 733, 295, 485, 51264], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 354, "seek": 173580, "start": 1753.8, "end": 1755.8, "text": " So did you try like chatGPT2 model or...?", "tokens": [51264, 407, 630, 291, 853, 411, 5081, 38, 47, 51, 17, 2316, 420, 8964, 51364], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 355, "seek": 173580, "start": 1755.8, "end": 1760.8, "text": " No, we code up a softmax with the same number of parameters.", "tokens": [51364, 883, 11, 321, 3089, 493, 257, 2787, 41167, 365, 264, 912, 1230, 295, 9834, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2704656738595864, "compression_ratio": 1.4618834080717489, "no_speech_prob": 0.00804099254310131}, {"id": 356, "seek": 176080, "start": 1760.8, "end": 1765.8, "text": " We coded up some linear transformer and take a softmax to the place where we just pick", "tokens": [50364, 492, 34874, 493, 512, 8213, 31782, 293, 747, 257, 2787, 41167, 281, 264, 1081, 689, 321, 445, 1888, 50614], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 357, "seek": 176080, "start": 1765.8, "end": 1767.8, "text": " it to make a softmax.", "tokens": [50614, 309, 281, 652, 257, 2787, 41167, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 358, "seek": 176080, "start": 1767.8, "end": 1769.8, "text": " So it's not like a giant model?", "tokens": [50714, 407, 309, 311, 406, 411, 257, 7410, 2316, 30, 50814], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 359, "seek": 176080, "start": 1769.8, "end": 1770.8, "text": " I see.", "tokens": [50814, 286, 536, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 360, "seek": 176080, "start": 1770.8, "end": 1773.8, "text": " So without any residual connections, right?", "tokens": [50864, 407, 1553, 604, 27980, 9271, 11, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 361, "seek": 176080, "start": 1773.8, "end": 1774.8, "text": " Oh, with residuals.", "tokens": [51014, 876, 11, 365, 27980, 82, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 362, "seek": 176080, "start": 1774.8, "end": 1779.8, "text": " So basically these two are almost exactly the same except, you know, we have a softmax", "tokens": [51064, 407, 1936, 613, 732, 366, 1920, 2293, 264, 912, 3993, 11, 291, 458, 11, 321, 362, 257, 2787, 41167, 51314], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 363, "seek": 176080, "start": 1779.8, "end": 1782.8, "text": " here and we don't.", "tokens": [51314, 510, 293, 321, 500, 380, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 364, "seek": 176080, "start": 1782.8, "end": 1786.8, "text": " So both look like this.", "tokens": [51464, 407, 1293, 574, 411, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2676226485009287, "compression_ratio": 1.5787037037037037, "no_speech_prob": 0.0030220162589102983}, {"id": 365, "seek": 178680, "start": 1786.8, "end": 1791.8, "text": " Except different, slight difference in how ATTN is defined.", "tokens": [50364, 16192, 819, 11, 4036, 2649, 294, 577, 8872, 51, 45, 307, 7642, 13, 50614], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 366, "seek": 178680, "start": 1791.8, "end": 1794.8, "text": " What was the intuition that white softmax is here?", "tokens": [50614, 708, 390, 264, 24002, 300, 2418, 2787, 41167, 307, 510, 30, 50764], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 367, "seek": 178680, "start": 1794.8, "end": 1795.8, "text": " Yeah.", "tokens": [50764, 865, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 368, "seek": 178680, "start": 1795.8, "end": 1796.8, "text": " That's a very good question.", "tokens": [50814, 663, 311, 257, 588, 665, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 369, "seek": 178680, "start": 1796.8, "end": 1798.8, "text": " So here's an example, right?", "tokens": [50864, 407, 510, 311, 364, 1365, 11, 558, 30, 50964], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 370, "seek": 178680, "start": 1798.8, "end": 1805.8, "text": " You know, if I'm trying to predict y and I have some x and in my demonstrations I have", "tokens": [50964, 509, 458, 11, 498, 286, 478, 1382, 281, 6069, 288, 293, 286, 362, 512, 2031, 293, 294, 452, 34714, 286, 362, 51314], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 371, "seek": 178680, "start": 1805.8, "end": 1807.8, "text": " minus x, right?", "tokens": [51314, 3175, 2031, 11, 558, 30, 51414], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 372, "seek": 178680, "start": 1807.8, "end": 1811.8, "text": " Then that should be very informative to predicting x.", "tokens": [51414, 1396, 300, 820, 312, 588, 27759, 281, 32884, 2031, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 373, "seek": 178680, "start": 1811.8, "end": 1813.8, "text": " If you know it's linear.", "tokens": [51614, 759, 291, 458, 309, 311, 8213, 13, 51714], "temperature": 0.0, "avg_logprob": -0.21574952052189753, "compression_ratio": 1.554585152838428, "no_speech_prob": 0.0021462570875883102}, {"id": 374, "seek": 181380, "start": 1813.8, "end": 1820.8, "text": " Softmax would compute the, you know, product which is an active number and that becomes", "tokens": [50364, 16985, 41167, 576, 14722, 264, 11, 291, 458, 11, 1674, 597, 307, 364, 4967, 1230, 293, 300, 3643, 50714], "temperature": 0.0, "avg_logprob": -0.24559361001719598, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005550480913370848}, {"id": 375, "seek": 181380, "start": 1820.8, "end": 1826.8, "text": " that then you can improve our little weight on that sample and so that sample became useful", "tokens": [50714, 300, 550, 291, 393, 3470, 527, 707, 3364, 322, 300, 6889, 293, 370, 300, 6889, 3062, 4420, 51014], "temperature": 0.0, "avg_logprob": -0.24559361001719598, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005550480913370848}, {"id": 376, "seek": 181380, "start": 1826.8, "end": 1827.8, "text": " for prediction.", "tokens": [51014, 337, 17630, 13, 51064], "temperature": 0.0, "avg_logprob": -0.24559361001719598, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005550480913370848}, {"id": 377, "seek": 181380, "start": 1827.8, "end": 1828.8, "text": " And that's just one example.", "tokens": [51064, 400, 300, 311, 445, 472, 1365, 13, 51114], "temperature": 0.0, "avg_logprob": -0.24559361001719598, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005550480913370848}, {"id": 378, "seek": 181380, "start": 1828.8, "end": 1835.8, "text": " I guess overall it's just that, you know, based on the construction which I didn't show,", "tokens": [51114, 286, 2041, 4787, 309, 311, 445, 300, 11, 291, 458, 11, 2361, 322, 264, 6435, 597, 286, 994, 380, 855, 11, 51464], "temperature": 0.0, "avg_logprob": -0.24559361001719598, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005550480913370848}, {"id": 379, "seek": 181380, "start": 1835.8, "end": 1839.8, "text": " the linear transformer very easily implements a gradient descent step.", "tokens": [51464, 264, 8213, 31782, 588, 3612, 704, 17988, 257, 16235, 23475, 1823, 13, 51664], "temperature": 0.0, "avg_logprob": -0.24559361001719598, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.005550480913370848}, {"id": 380, "seek": 183980, "start": 1839.8, "end": 1842.8, "text": " The linear transformer not so much because softmax sticks out.", "tokens": [50364, 440, 8213, 31782, 406, 370, 709, 570, 2787, 41167, 12518, 484, 13, 50514], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 381, "seek": 183980, "start": 1842.8, "end": 1849.8, "text": " It does this weird reweighting of your demonstration samples which doesn't really help in the linear", "tokens": [50514, 467, 775, 341, 3657, 319, 12329, 278, 295, 428, 16520, 10938, 597, 1177, 380, 534, 854, 294, 264, 8213, 50864], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 382, "seek": 183980, "start": 1849.8, "end": 1850.8, "text": " regression setting.", "tokens": [50864, 24590, 3287, 13, 50914], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 383, "seek": 183980, "start": 1850.8, "end": 1857.8, "text": " So, but probably softmax transformer works more generally if it's not linear.", "tokens": [50914, 407, 11, 457, 1391, 2787, 41167, 31782, 1985, 544, 5101, 498, 309, 311, 406, 8213, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 384, "seek": 183980, "start": 1857.8, "end": 1860.8, "text": " But is there anything like the optimal algorithm for this problem?", "tokens": [51264, 583, 307, 456, 1340, 411, 264, 16252, 9284, 337, 341, 1154, 30, 51414], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 385, "seek": 183980, "start": 1860.8, "end": 1862.8, "text": " That's a good question.", "tokens": [51414, 663, 311, 257, 665, 1168, 13, 51514], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 386, "seek": 183980, "start": 1862.8, "end": 1864.8, "text": " I don't know.", "tokens": [51514, 286, 500, 380, 458, 13, 51614], "temperature": 0.0, "avg_logprob": -0.22779578305362316, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.03512369841337204}, {"id": 387, "seek": 186480, "start": 1864.8, "end": 1871.8, "text": " But I guess, you know, whatever algorithm that softmax is doing, it's just not very nice.", "tokens": [50364, 583, 286, 2041, 11, 291, 458, 11, 2035, 9284, 300, 2787, 41167, 307, 884, 11, 309, 311, 445, 406, 588, 1481, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2294322154561027, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0036461693234741688}, {"id": 388, "seek": 186480, "start": 1871.8, "end": 1881.8, "text": " Thank you.", "tokens": [50714, 1044, 291, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2294322154561027, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0036461693234741688}, {"id": 389, "seek": 186480, "start": 1881.8, "end": 1882.8, "text": " Thank you.", "tokens": [51214, 1044, 291, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2294322154561027, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0036461693234741688}, {"id": 390, "seek": 186480, "start": 1882.8, "end": 1883.8, "text": " I had a clarification question.", "tokens": [51264, 286, 632, 257, 34449, 1168, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2294322154561027, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0036461693234741688}, {"id": 391, "seek": 186480, "start": 1883.8, "end": 1888.8, "text": " So you mentioned that there's a different theta star for each input prompt.", "tokens": [51314, 407, 291, 2835, 300, 456, 311, 257, 819, 9725, 3543, 337, 1184, 4846, 12391, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2294322154561027, "compression_ratio": 1.4038461538461537, "no_speech_prob": 0.0036461693234741688}, {"id": 392, "seek": 188880, "start": 1888.8, "end": 1893.8, "text": " Does your results also depend on how many prompts or demonstrations are provided as", "tokens": [50364, 4402, 428, 3542, 611, 5672, 322, 577, 867, 41095, 420, 34714, 366, 5649, 382, 50614], "temperature": 0.0, "avg_logprob": -0.20255693748815737, "compression_ratio": 1.4011627906976745, "no_speech_prob": 0.007691100239753723}, {"id": 393, "seek": 188880, "start": 1893.8, "end": 1896.8, "text": " part of in-context learning?", "tokens": [50614, 644, 295, 294, 12, 9000, 3828, 2539, 30, 50764], "temperature": 0.0, "avg_logprob": -0.20255693748815737, "compression_ratio": 1.4011627906976745, "no_speech_prob": 0.007691100239753723}, {"id": 394, "seek": 188880, "start": 1896.8, "end": 1902.8, "text": " Good question.", "tokens": [50764, 2205, 1168, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20255693748815737, "compression_ratio": 1.4011627906976745, "no_speech_prob": 0.007691100239753723}, {"id": 395, "seek": 188880, "start": 1902.8, "end": 1908.8, "text": " Yes, because, so here n is the length of the prompt.", "tokens": [51064, 1079, 11, 570, 11, 370, 510, 297, 307, 264, 4641, 295, 264, 12391, 13, 51364], "temperature": 0.0, "avg_logprob": -0.20255693748815737, "compression_ratio": 1.4011627906976745, "no_speech_prob": 0.007691100239753723}, {"id": 396, "seek": 188880, "start": 1908.8, "end": 1909.8, "text": " Okay.", "tokens": [51364, 1033, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20255693748815737, "compression_ratio": 1.4011627906976745, "no_speech_prob": 0.007691100239753723}, {"id": 397, "seek": 188880, "start": 1909.8, "end": 1915.8, "text": " And how much regularization you put here depends on n.", "tokens": [51414, 400, 577, 709, 3890, 2144, 291, 829, 510, 5946, 322, 297, 13, 51714], "temperature": 0.0, "avg_logprob": -0.20255693748815737, "compression_ratio": 1.4011627906976745, "no_speech_prob": 0.007691100239753723}, {"id": 398, "seek": 191580, "start": 1915.8, "end": 1923.8, "text": " And I guess what this affects is how, I guess, what preconditioner you use exactly.", "tokens": [50364, 400, 286, 2041, 437, 341, 11807, 307, 577, 11, 286, 2041, 11, 437, 4346, 684, 849, 260, 291, 764, 2293, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16312152967540497, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.0144914910197258}, {"id": 399, "seek": 191580, "start": 1923.8, "end": 1926.8, "text": " So this is for the non-identity covariance case.", "tokens": [50764, 407, 341, 307, 337, 264, 2107, 12, 1078, 507, 49851, 719, 1389, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16312152967540497, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.0144914910197258}, {"id": 400, "seek": 191580, "start": 1926.8, "end": 1931.8, "text": " And even for the identity covariance case, the exact step size, I think, would be affected", "tokens": [50914, 400, 754, 337, 264, 6575, 49851, 719, 1389, 11, 264, 1900, 1823, 2744, 11, 286, 519, 11, 576, 312, 8028, 51164], "temperature": 0.0, "avg_logprob": -0.16312152967540497, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.0144914910197258}, {"id": 401, "seek": 191580, "start": 1931.8, "end": 1936.8, "text": " depending on, you know, this delta one, which I didn't talk about at all.", "tokens": [51164, 5413, 322, 11, 291, 458, 11, 341, 8289, 472, 11, 597, 286, 994, 380, 751, 466, 412, 439, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16312152967540497, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.0144914910197258}, {"id": 402, "seek": 191580, "start": 1936.8, "end": 1943.8, "text": " I think that's going to depend very importantly on how large n is, larger n, probably larger", "tokens": [51414, 286, 519, 300, 311, 516, 281, 5672, 588, 8906, 322, 577, 2416, 297, 307, 11, 4833, 297, 11, 1391, 4833, 51764], "temperature": 0.0, "avg_logprob": -0.16312152967540497, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.0144914910197258}, {"id": 403, "seek": 191580, "start": 1943.8, "end": 1944.8, "text": " delta.", "tokens": [51764, 8289, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16312152967540497, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.0144914910197258}, {"id": 404, "seek": 194480, "start": 1944.8, "end": 1945.8, "text": " That makes sense, right?", "tokens": [50364, 663, 1669, 2020, 11, 558, 30, 50414], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 405, "seek": 194480, "start": 1945.8, "end": 1949.8, "text": " Because if you think about it, gradient descent involves this gram matrix.", "tokens": [50414, 1436, 498, 291, 519, 466, 309, 11, 16235, 23475, 11626, 341, 21353, 8141, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 406, "seek": 194480, "start": 1949.8, "end": 1954.8, "text": " And if the gram matrix is identity, one step of gradient descent will just give you the", "tokens": [50614, 400, 498, 264, 21353, 8141, 307, 6575, 11, 472, 1823, 295, 16235, 23475, 486, 445, 976, 291, 264, 50864], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 407, "seek": 194480, "start": 1954.8, "end": 1955.8, "text": " solution.", "tokens": [50864, 3827, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 408, "seek": 194480, "start": 1955.8, "end": 1963.8, "text": " And when n is very large, the gram matrix does approach identity, whereas when it's small,", "tokens": [50914, 400, 562, 297, 307, 588, 2416, 11, 264, 21353, 8141, 775, 3109, 6575, 11, 9735, 562, 309, 311, 1359, 11, 51314], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 409, "seek": 194480, "start": 1963.8, "end": 1965.8, "text": " the gram matrix could be your condition.", "tokens": [51314, 264, 21353, 8141, 727, 312, 428, 4188, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 410, "seek": 194480, "start": 1965.8, "end": 1970.8, "text": " And how your condition, gram matrix, is related to the condition number of our theta.", "tokens": [51414, 400, 577, 428, 4188, 11, 21353, 8141, 11, 307, 4077, 281, 264, 4188, 1230, 295, 527, 9725, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1927369061638327, "compression_ratio": 1.8609865470852018, "no_speech_prob": 0.002713932190090418}, {"id": 411, "seek": 197080, "start": 1970.8, "end": 1977.8, "text": " So it makes sense that for a smaller n, you can take smaller steps of gradient descent", "tokens": [50364, 407, 309, 1669, 2020, 300, 337, 257, 4356, 297, 11, 291, 393, 747, 4356, 4439, 295, 16235, 23475, 50714], "temperature": 0.0, "avg_logprob": -0.4166624762795188, "compression_ratio": 1.2566371681415929, "no_speech_prob": 0.04919278994202614}, {"id": 412, "seek": 197080, "start": 1977.8, "end": 1980.8, "text": " and order n.", "tokens": [50714, 293, 1668, 297, 13, 50864], "temperature": 0.0, "avg_logprob": -0.4166624762795188, "compression_ratio": 1.2566371681415929, "no_speech_prob": 0.04919278994202614}, {"id": 413, "seek": 197080, "start": 1980.8, "end": 1982.8, "text": " All right.", "tokens": [50864, 1057, 558, 13, 50964], "temperature": 0.0, "avg_logprob": -0.4166624762795188, "compression_ratio": 1.2566371681415929, "no_speech_prob": 0.04919278994202614}, {"id": 414, "seek": 197080, "start": 1982.8, "end": 1989.8, "text": " So let's thank Yashiyang again.", "tokens": [50964, 407, 718, 311, 1309, 398, 1299, 4727, 656, 797, 13, 51314], "temperature": 0.0, "avg_logprob": -0.4166624762795188, "compression_ratio": 1.2566371681415929, "no_speech_prob": 0.04919278994202614}], "language": "en"}