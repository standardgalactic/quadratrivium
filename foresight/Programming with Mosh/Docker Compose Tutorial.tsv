start	end	text
0	5640	In this video, you're going to learn about Docker Compose, so by the end of this video,
5640	8160	you'll be able to use Docker commands with confidence.
8160	13240	Hi, I'm Mosh Hamidani, and I've taught millions of people how to code through this channel
13240	16000	at my online school code with Mosh.com.
16000	20560	This video is part of my ultimate Docker course, so once you finish this video, if you want
20560	23520	to learn more, you may want to look at the complete course.
23520	29960	Now let's jump in and get started.
29960	32920	Welcome back to another section of the ultimate Docker course.
32920	36640	In this section, we're going to talk about running multi-container applications.
36640	41160	So I'm going to give you a real-world application with three building blocks, a front-end built
41160	45840	with React, a back-end built with Node, and a MongoDB database.
45840	49200	Once again, you don't need to be familiar or use any of these tools.
49200	52800	Our focus here is on Docker and not on development tools.
52800	56520	I think this is the most exciting part of this course, where you can see everything coming
56520	57520	together.
57520	62080	So we're going to talk about Docker Compose for building and running multi-container applications.
62080	67400	We'll also talk about Docker networking, database migration, and running automated tests.
67400	80360	So let's jump in and get started.
80360	84040	In this section, we're going to use a tool called Docker Compose, which is built on top
84040	85480	of Docker Engine.
85480	89880	It makes it incredibly easy to start applications with multiple containers.
89880	92280	So Google Docker Compose install.
92280	97720	You will find this page, docs.docker.com, slash compose, slash install.
97720	100040	On this page, you can see the installation instructions.
100040	106240	Now at the time of recording this, Docker Compose is shipped with Docker desktop for Mac
106240	107240	and Windows.
107240	110240	So if you're on Mac or Windows, you don't have to do anything extra.
110240	112240	You already have Docker Compose.
112240	118960	To verify it, just go to the terminal window and type Docker Compose dash dash version.
118960	123360	So I'm running Docker Compose version 1.28.5.
123360	125760	Make sure your version is the same or newer.
125760	131160	If you're using an older version, again, Google upgrade Docker Compose, or you might
131160	134320	just install the latest version of Docker.
134320	136240	Now back to this page.
136240	139960	If you're using Windows Server or Linux, there are specific instructions you have to
139960	142760	follow to install Docker Compose.
142760	153280	So go ahead and install Docker Compose and I will see you in the next lesson.
153280	156320	Before we get started, I want to show you a couple of techniques for cleaning up our
156320	157680	workspace.
157680	162400	So on this machine, we have a bunch of images and some running containers.
162400	163400	They're getting in the way.
163400	165120	I want to get rid of them all.
165120	166120	How do we do this?
166120	170920	Well, you know that we can remove images using Docker image remove command.
170920	174120	And here we can type one or more image IDs.
174120	177040	Now how can we get all image IDs and pass them here?
177040	178560	Let me show you a cool trick.
178560	181680	So we can run Docker image LS.
181680	183320	We see all the images, right?
183320	188040	But if you pass dash Q at the end, we only get image IDs.
188040	191880	Now we can pass this as an argument to Docker image remove.
191880	193800	So Docker image remove.
194480	199720	Now here we add a dollar sign and in parenthesis, we type that other command.
199720	202960	So Docker image LS dash Q.
202960	206960	Now if we run this, we're going to get an error because some of these images are already
206960	210280	in running containers or stopped containers.
210280	212120	So we should always remove containers first.
212120	214800	We're going to do that using the same technique.
214800	218680	So I'm going to replace image with container.
218680	225960	So we get all container IDs and then we're going to remove them all in one go.
225960	229840	Also I would like to add dash A here as well.
229840	232960	This will bring stopped containers as well, okay?
232960	235520	We can also combine switches.
235520	236880	That's another technique.
236880	237880	Let's go ahead.
237880	242960	All right, we get an error saying you cannot remove a running container because I forgot
242960	244880	to pass the force option.
244880	247920	So let's bring this up one more time.
247920	252440	When removing, we're going to use dash F, okay?
252440	253880	Great.
253880	256520	So all these containers are removed.
256520	257680	Now let's remove the images.
257680	265320	So Docker image LS and Docker image remove.
265320	267400	Great.
267400	269160	Now take a look.
269160	274800	We don't have any images here and no containers, including stopped containers.
274800	276560	So we have a clean workspace.
276560	277560	That's one way.
277560	279640	There is a shortcut for this as well.
279640	283600	If you're on Mac, you can find the Docker icon on the top status bar.
283600	286880	If you're on Windows, you will find it in your notification tray.
286880	291080	Let's click on this and then go to preferences.
291080	294640	Now on this page, let's click on the troubleshoot icon.
294640	297200	On this page, we have a bunch of useful utilities.
297200	300080	For example, we can restart Docker desktop.
300080	302640	We can also clean and purge data.
302640	307140	This will essentially remove everything in Docker, your images, your containers, your
307140	308640	volumes and so on.
308640	314040	Now be aware that if you click on this, this is going to restart Docker engine.
314040	319280	So on the top, look, you can see this animation showing that the Docker engine is not started
319280	320280	yet.
320280	324360	So at this point, if you go to the terminal window and execute any of Docker commands,
324360	325560	you're going to get an error.
325560	329720	So you'll have to wait about half a minute for the Docker engine to start.
329720	330880	That's another way.
330880	341440	So now that we have a clean workspace, next we're going to talk about our application.
341440	344360	So in this next section, we're going to look at a real-world application with multiple
344360	348380	building blocks, a front end, a back end and a database.
348380	350960	So below this video, I've attached a Z file.
350960	352600	Go ahead and download it.
352600	355360	Inside that Z file, you're going to find this folder structure.
355360	358840	We have this backend folder, which is our node project.
358840	364120	This is a basic node project that starts a web server on port 3001.
364120	367640	Once again, you don't need to know node to go through this section.
367640	371680	Then we have the front end project, which is a React application that talks to the back
371680	372680	end.
372680	376920	Now, if you want to run this application outside of Docker, there are a number of steps
376920	377920	we have to follow.
377920	382520	Let's say we just check this out from a GitHub repository.
382520	386920	First we have to go to our back end project, install all dependencies and then start the
386920	387920	web server.
388000	393000	At the same time, we have to open up another terminal window and do the same steps with
393000	394320	our front end project.
394320	399440	So we have to go to the front end project, install all the dependencies and then start
399440	400440	the web server.
400440	405760	And of course, we need two more terminal windows for running our front end and back end tests.
405760	410560	And not to mention that, we should also download and install MongoDB on this machine.
410560	414520	So there are so many steps we have to follow the moment we check out the source code from
414520	416280	our GitHub repository.
416280	419400	Now with Docker, we don't have to do any of these things.
419400	421840	All we have to do is run a single command.
421840	422840	Let me show you.
422840	426720	So I'm going to get outside of the front end folder.
426720	428520	Now we are in the root of this project.
428520	434600	If you look, here we have a file called Docker Compose, which is used for composing a multi-container
434600	435600	application.
435600	437960	We're going to talk about that in detail soon.
437960	444800	Now, once we have this file in our project, we can simply run Docker Compose up.
444800	446560	That's all we have to do.
446560	451960	Now, Docker is automatically downloading this particular version of MongoDB, so it's downloading
451960	453520	all these layers.
453520	457320	Then at the same time, it's going to install all the dependencies for our front end and
457320	458320	back end projects.
458320	462520	It will start web servers and run automated tests all in this window.
462520	466760	Now, this is going to take a little while, so I'll be right back.
466760	474200	All right, our application is up and running, and we can access it at localhost for 3000.
474200	476120	So here's what we get.
476120	478800	We have a mini application for managing a list of movies.
478800	480880	Now, you know what's the beauty here?
480880	485680	The beauty is that our database is populated with these movies as part of bringing up our
485680	486680	application.
486680	489760	I didn't have to manually insert these movies in our database.
489760	495120	So we have a migration script for populating our database, and Docker automatically executed
495120	498680	our migration script as part of bringing up this application.
498680	500800	This is a very common real-world scenario.
501360	507400	Now, here we can add new movies, movie one, movie two, whatever, and we can also delete
507400	508400	these movies.
508400	511440	So, we brought up this application using a single command.
511440	515920	Now, I briefly mentioned this file, docker-compose.yaml.
515920	519480	Before we talk about this file, first you need to understand the YAML format.
519480	521760	This is a format that a lot of people are not familiar with.
521760	525240	So in the next lesson, we're going to talk about JSON and YAML formats.
531800	534840	Let's talk about JSON and YAML formats.
534840	538240	If you know this format as well, feel free to skip this lesson.
538240	544920	So in the root of this project, we're going to add a new file called data.json.json, as
544920	549960	you probably know is a language, it's a human-readable language for representing data.
549960	554160	So in this JSON file, we can have an object or an array, let's say we want to represent
554160	555160	a course.
555160	558600	A course can have properties like name, price, and so on.
558600	562480	So in this object, we can add one or more key value pairs.
562480	565120	Our keys should always be surrounded in double quotes.
565120	570800	So we can add a key called name, and set its value to, we can use a string, the ultimate
570800	575880	docker course, then we add a comma to define the next key value pair.
575880	580800	So we can say price, we can set this to a number.
580800	585600	Now the value can also be a boolean, so we can define another key value pair, and set
585600	588600	the value to true or false.
588600	591840	We can define another key value pair, and set the value to an array.
591840	594600	So we define an array using square brackets.
594600	597720	Now in this array, we can have any valid objects.
597720	601960	So we can have strings, numbers, booleans, or other objects.
601960	607720	So I'm going to add a couple of strings, let's say software and DevOps.
607720	612840	And one last key value pair, author, I'm going to make this an object, so once again we use
612840	615380	curly braces to define an object.
615380	623220	In this object, we add a couple of key value pairs, first name is mosh, and last name is
623220	624220	what?
624220	629620	I'm a darling, and yes, I am Iranian, I get that question all the time.
629620	634260	Alright, so here we have a JSON file, now let's see how we can convert this to YAML.
634260	639380	YAML is another language for presenting data, but it has less clutter than JSON, it's easier
639380	640460	to read.
640460	645740	So I'm going to copy all this code, here in the project, we're going to add a new file
645740	652740	called datum.yaml, the extension can be YAML or YML.
652740	658980	Now on the top, we add three hyphens to indicate the beginning of a YAML file, then we paste
658980	659980	our code.
659980	664540	Now in YAML, we don't use curly braces to indicate hierarchy.
664540	668860	This idea has come from Python, if you have programmed in Python, you know that in Python
668940	673580	we use indentation to represent hierarchy, so we don't have curly braces.
673580	679340	So let's get rid of these braces, and remove the indentation, good.
679340	683420	Now the next thing you need to know about YAML is that we don't have to use quotes.
683420	690300	So we can bring up the replace dialog, and replace all these double quotes with nothing.
690300	693180	That immediately takes a lot of clutter away.
693180	699540	Also, we're not going to use commas to separate key value pairs.
699540	704940	So on the top, we have name, price is published, and how do we represent a list or an array?
704940	706220	We use hyphens.
706220	713060	So I'm going to remove this, we press enter, add a tab on a new line, we type hyphen to
713060	718980	define the first item in the list, software, then at the same indentation, we add the next
718980	721260	item, DevOps.
721260	726700	Now author is an object, but as I told you, we don't use curly braces, we use indentation.
726700	732020	So because these two properties are indented, they belong to the author property, okay?
732020	736740	So this is our YAML file, let's compare this with JSON.
736740	740340	As you can see, YAML is easier to read and understand.
740340	742820	Now why don't we use YAML all the time?
742820	747900	Well, because parsing YAML files is a little bit slower than parsing JSON files, because
747900	752500	the parser doesn't know if this is a string or a number, so it has to read everything
752500	755380	as a string and then try to evaluate it.
755380	760660	In contrast, in JSON, strings are represented using quotes and more specifically double
760660	765980	quotes, so the parser knows that this is a string and it shouldn't evaluate it, okay?
765980	771180	So quite often we use YAML files for configuration files and JSON for exchanging data between
771180	774060	multiple computers, like a client and a server.
774060	779740	So now that you understand these formats, next we're going to talk about compose files.
779740	788300	Alright, let's see how we can create a compose file from scratch.
788300	795420	So for this lesson, I'm going to rename this file to underline docker compose.
795420	799140	We want to set it aside and create a new compose file from scratch.
799140	803700	So here we are, the new file called docker-compose.
803700	808580	All in lowercase, make sure to spell it properly, otherwise docker-compose is not going to find
808580	813460	this file, because this is the default name that docker-compose assumes, okay?
813460	815460	So YAML.
815460	819900	Now the first thing that we need to set here is the version property.
819900	821100	What version should we use?
821100	825260	Well, let's search for docker-compose file.
825260	831540	On this page, you can see various compose file formats and their compatibility with
831540	832540	docker-engine.
832540	837780	We are using the latest version of docker-engine, so I want to use the latest compose file format
837780	840300	so we have access to the latest features.
840300	843420	So we're going to set this to 3.8.
843420	848380	Now here we need to wrap this number with double quotes, otherwise it will be evaluated
848380	852740	as a number, but docker-compose expects this value to be a string.
852740	853740	Why?
853740	854740	I have no clue.
855220	856220	Here's the version.
856220	861260	Now in this file, we define various building blocks or services of our application.
861260	864020	So we have a property called services.
864020	865860	Now what services do we need here?
865860	871540	Well, our application has a front-end, a back-end, and a database.
871540	875860	Your application might have other moving parts, so you can define them here.
875860	878860	Now these names are arbitrary, so we can call them anything.
878860	886540	We can change this to db, we can change the back-end to api, and the front-end to well.
886540	891900	The idea here is that we're defining various services and telling docker how to build images
891900	894980	for each service and how to run these images.
894980	899620	So here we're going to have properties, and the value of these properties will eventually
899620	902380	be used when running our containers.
902380	907780	So in the previous section, we had to manually run our containers using docker-run, and here
907820	913260	we used parameters like dash-p for port mapping or dash-v for volume mapping.
913260	916420	We also had to specify an image like react-app.
916420	919780	All these values can be defined in our compose file.
919780	922620	So we don't have to manually start our containers.
922620	927020	Docker compose will take care of starting our containers under the hood.
927020	932140	So for each service, we need to tell docker how to build an image for that service.
932140	936860	So here we can use the build property and tell docker compose where it can find a docker
936940	938060	file.
938060	944060	So if you look at this project, you can see that in our back-end and front-end folders,
944060	946620	we have a docker file.
946620	951140	This docker file is almost identical to the one we created in the previous section.
951140	956420	So we start from a node image, we create a user, we set our working directory, copy all
956420	963420	the files and install the dependencies, then expose port 3001 and start the web server.
963420	966620	We have a similar docker file in our front-end project.
966620	968180	Let's have a quick look.
968180	974420	So that was the back-end, here's the front-end, and here we have a docker file, almost identical.
974420	978900	But the front-end application or the front-end server starts on a different port.
978900	980340	That is the only difference.
980340	984620	So each service should have its own docker file, okay?
984620	990180	Now back to our compose file, for our web or front-end, we're going to set the build
990180	995140	property to period, meaning current folder, slash front-end.
995140	997500	This is where we have a docker file.
997500	1002540	For our API, we're going to set build to back-end.
1002540	1006100	Now for our database, we're not going to build an image, we're going to pull an image from
1006100	1007500	docker hop.
1007500	1011500	So instead of the build property, we're going to use the image property.
1011500	1017180	Now for this application, I'm going to use Mongo version 4.0-Xenial.
1017180	1022340	So that is Mongo version 4 built on top of Xenial, which is Ubuntu version 16.
1022340	1027420	Now if you look at docker hop, you can see that Mongo also has images built on top of
1027420	1031700	Windows, but Windows images are very large, over two gigabytes.
1031700	1034860	So that's why I prefer to use Linux images.
1034860	1039860	So for any of these services, we can either build an image or pull it down.
1039860	1043700	Now here we also have port mappings, so we set ports to.
1043700	1048900	Now because we can have multiple port mappings, here we need to use the array or list syntax.
1048900	1052020	So we use a hyphen, and then define a port mapping.
1052020	1055620	So our frontend application starts on port 3000.
1055620	1062060	So I want to map port 3000 of the host to port 3000 of the container running this image.
1062060	1066700	That's similarly for our API, we're going to define a port mapping.
1066700	1070860	This one is going to be 3001 to 3001.
1070860	1079420	Now MongoDB by default, listens on port 27017.
1079420	1085700	So I want to map the same port, so we can access MongoDB using a MongoDB client like
1085700	1087340	MongoDB Compass.
1087340	1091980	If you don't use MongoDB, you have the same concept with other database engines.
1091980	1094860	All these database engines listen on a default port.
1094860	1099340	You want to map that port so you can connect to your database engine using your favorite
1099340	1101540	database client.
1101540	1103540	What else do we have here?
1103540	1105580	Back to this page for compose file.
1105580	1110860	If you look at version three, on the right, you can see all valid properties.
1110860	1114860	Now a lot of these are for really special cases, so you don't need to use them all the
1114860	1118860	time, but the ones that we use most of the time are build or image.
1118860	1122820	You also use ports, volumes, environment, and so on.
1122820	1128860	So our API project needs an environment variable that tells where our database is.
1128860	1135500	So here we set environment, and here we can use the list syntax because we can have multiple
1135500	1137060	environment variables.
1137060	1143540	So we set DB underline URL to, here we need to type a MongoDB connection string.
1143540	1149020	These connection strings always start with MongoDB, colon, two forward slashes.
1149020	1151020	Here we need to type the name of a host.
1151020	1155860	So as I'll show you later in this section, when we start an application with Docker compose
1155860	1158780	under the hood, a network is created.
1158780	1161700	On this network, we're going to have three hosts.
1161700	1165540	The name of these hosts are equal to the names we have defined here.
1165540	1167820	So we're going to have a host called DB.
1167820	1171580	So that is the connection string to our MongoDB server.
1171580	1174140	Now on this server, we can have multiple databases.
1174140	1179100	So we're going to specify the database name and the connection string as well.
1179100	1182700	So this is one way to set an environment variable.
1182700	1187820	But instead of using the list syntax, we can also use the object or property value syntax.
1187820	1190300	So we get rid of the hyphen.
1190300	1196020	We say DB URL is a property and this is the value of that property.
1196020	1200820	I find the syntax more readable because we get color coding and it's just cleaner.
1200820	1204300	That similarly we can add additional environment variables.
1204300	1205700	Now we're almost there.
1205700	1210860	The last thing we want to add here is a volume because we don't want MongoDB to rate data
1210860	1213900	to the temporary file system of the container.
1213900	1223100	So here we set volumes and again, we can have one or more volume mappings.
1223100	1224260	So we had a hyphen.
1224260	1228860	We're going to map a volume called Widley and of course we can call it anything.
1228860	1232580	Widley is the name of this application in case you didn't notice.
1232580	1238220	So we're going to map this volume to a directory inside the container.
1238220	1243860	Now if you look at the documentation of MongoDB on Docker Hub or just a typical MongoDB
1243860	1251900	documentation, you know that by default MongoDB stores its data in slash data slash DB.
1251900	1255180	So we want to map this volume to this directory.
1255180	1259860	So whatever that is written inside this directory is actually outside of this container.
1259860	1263500	It's somewhere else in our volume.
1263500	1267780	Now because we have used this volume here, we have to define it in our compose file.
1267780	1271020	So we press enter, remove all the indentations.
1271020	1275380	So now we are at the same level as services.
1275380	1281540	Here we're going to define another property called volumes and here we're going to add
1281540	1284540	another property called Widley with no value.
1284540	1288620	I know this looks a little bit weird, but this is the syntax we have to follow.
1288620	1292620	We just have to define the volume first before we can use it.
1292620	1294860	So this is our compose file.
1294860	1300700	Now we can make this more readable by adding line breaks in between these properties.
1300700	1303460	We can also order these services any way we want.
1303460	1306380	So currently I'm ordering them from front to back.
1306380	1308340	We can also order them from back to front.
1308340	1312460	So we will put database first, then API and then web.
1312460	1314340	So we're done with our compose file.
1314340	1323420	Next I'm going to show you how to build the images.
1323420	1327860	Earlier I told you that Docker compose is built on top of Docker engine.
1327860	1332420	So everything we have done with Docker engine like building images, listing them, starting
1332420	1337620	containers and so on, all of these operations are also available using Docker compose.
1337620	1338700	Let me show you.
1338700	1345140	So we type Docker compose, without any arguments, enter, look, we have all these subcommands
1345140	1351940	like we have RM for removing stopped containers, we have run, we have push, pull and so on.
1351940	1356580	The difference is that any of these commands will apply to our application as a whole.
1356580	1362700	So most of these commands will impact multiple services or multiple containers in our application.
1362700	1369780	So let's look at Docker compose build and also use the help option.
1369780	1371500	So we have a bunch of options here.
1371500	1375860	A couple of them I want to point out that are useful to know is no cache.
1375860	1379020	With this we can prevent caching when building the image.
1379020	1383380	Sometimes you encounter weird issues and you want to make sure that cache is not used.
1383380	1385540	In that case, you use this option.
1385540	1388220	Another useful option is dash dash pull.
1388220	1392740	With this, we can always pull a newer version of the image.
1392740	1394240	That is also good to know.
1394240	1396820	So in this lesson, I'm not going to use any of these.
1396820	1401220	We're just going to run Docker compose build.
1401220	1406860	This built our web and API services and as you noticed, our build was super fast because
1406860	1409260	pretty much everything came from the cache.
1409260	1412740	So let's run Docker images.
1412740	1415020	So I have five images on this machine.
1415020	1420300	With the front end, with the web, with the API, with the back end and Mongo.
1420300	1422380	Mongo obviously came from Docker Hub.
1422380	1427980	Now as part of this build process in this lesson, we built with the web and with the
1427980	1429260	API.
1429260	1433260	These two other images with the front end and back end were built when we started this
1433260	1434980	application earlier.
1434980	1437100	So back to our project.
1437100	1442500	In this original compose file that I included in this project, look, I call these services
1442500	1446180	front end and back end instead of web and API.
1446180	1451940	That is why we have these two images, with the front end and with the back end.
1451940	1457500	Also as you have noticed, when building images with Docker compose, our images are prefixed
1457500	1458900	with the name of our application.
1458900	1460500	Now where does this come from?
1460500	1462620	It is the name of the directory.
1462620	1467220	So currently we are inside a directory called Widley and that is why all these images are
1467220	1468860	prefixed with Widley.
1468860	1470100	I think this is a great convention.
1470100	1472260	I got a question for you.
1472260	1476740	If you look at the created column, you can see all these images were created an hour
1476740	1477740	ago.
1477740	1480420	But didn't we just build the web and API images?
1480420	1481780	Why do you think this happened?
1481780	1483020	Here's the answer.
1483020	1487140	Because I built these images front end and back end an hour ago when I was recording the
1487140	1489020	first lesson in this section.
1489020	1493900	Now when building these new images, Docker used everything in the cache because all those
1493900	1497220	files were already available, all those layers were there.
1497220	1500340	So Docker didn't have to do a full rebuild.
1500340	1504500	That is why we are still using the build from an hour ago.
1504500	1511420	Now if you want to force a full rebuild, we can say Docker compose build dash dash no
1511420	1512420	cache.
1512420	1516540	All right, this is going to take a few seconds.
1516540	1518540	So I'll be right back.
1518540	1521740	All right, our images are built.
1521740	1524460	So let's run Docker images.
1524460	1525460	There you go.
1525460	1529780	Look at the first two images, API and web were built less than a minute ago.
1529780	1541100	So that's all about building images, next we're going to talk about starting the application.
1541100	1544500	You briefly saw how we can start an application with Docker compose.
1544500	1547540	We just type Docker compose up.
1547540	1552220	Now if the images are ready, Docker compose will run them inside containers, otherwise
1552220	1554660	it's going to build the images automatically.
1554660	1559220	Now before executing this, let's look at the available options.
1559220	1564300	So here we have a ton of options, a couple of them that are useful are build.
1564300	1568180	With this we can force a rebuild every time we want to start our application.
1568180	1574380	So we don't have to explicitly run Docker compose build and then up.
1574380	1578060	We can combine the two using the build option.
1578060	1581860	The other useful option is dash D for detached mode.
1581860	1584460	So we will start these containers in the background.
1584460	1586460	So take a look.
1586460	1587460	All right.
1587460	1595900	Now if we run Docker compose PS, we can see all the containers relevant to this application.
1595900	1600820	In contrast, if you type Docker PS, we can see all the running containers across all
1600820	1602820	applications.
1602820	1609300	So here we have three containers, Vidly, API one, Vidly DB one and web one.
1609300	1610620	Now what is this one?
1610620	1614140	Well, we can start multiple containers from the same image.
1614140	1617180	And this is used for high availability and scalability.
1617180	1619220	And something we'll look at in the future.
1619220	1620780	So here you can see the container.
1620780	1623660	You can see what command started that container.
1623660	1627020	So for our API, that was npm start.
1627020	1632120	For our database, that was MongoD or MongoDemon process.
1632120	1635900	And for our web front end, that was npm start as well.
1635900	1638500	You can see all these containers are up and running.
1638500	1641540	And over here, you can see port mappings.
1641540	1645860	So now if we go to local host, port 3000, we can see our application.
1645860	1646860	Beautiful.
1647220	1648380	How do we take this down?
1648380	1652820	Let's say we're done with this application and we want to free up resources.
1652820	1657260	Back to the terminal, we type Docker compose down.
1657260	1659580	This will stop and remove these containers.
1659580	1661340	But the images are still there.
1661340	1672100	So next time we want to start the application, our application will start pretty quickly.
1672100	1673700	Let's talk about networking in Docker.
1673700	1676540	Let me run our application with Docker compose.
1676540	1681500	Docker compose will automatically create a network and add our containers on that network.
1681500	1683700	So these containers can talk to each other.
1683700	1684780	Let's see this in action.
1684780	1689300	So I'm going to bring up the application one more time in the detach mode.
1689300	1690300	Good.
1690300	1692580	Now look at the first line.
1692580	1695100	Creating network with the default.
1695100	1700220	So we can run Docker network LS.
1700220	1702460	Here we can see all the networks on this machine.
1702460	1705740	I think every Docker installation has three networks.
1705860	1707780	Bridge, host, and none.
1707780	1711900	Honestly, I'm not sure what these networks are for, but what matters here is that we
1711900	1714860	have a network called Widley default.
1714860	1719460	The driver for this network is bridge on Linux or NAT on Windows.
1719460	1727540	Now this network contains three hosts or three containers, web, API, and DB.
1727540	1731740	So these hosts or these containers can talk to each other using their name.
1731740	1733020	Let's see this in action.
1733020	1737580	So back to the terminal, let's look at the running containers.
1737580	1740620	So we have Mongo, web, and API.
1740620	1745740	Now we're going to start a shell session on the web container and ping the API container.
1745740	1746740	Take a look.
1746740	1750100	So we're going to execute in the interactive mode.
1750100	1755540	The container ID is 8c6 and we're going to run shell.
1755540	1757060	So let's ping API.
1757060	1761900	We get a permission error because we have logged in with the app user that comes from
1761900	1763780	our Docker file, remember?
1763780	1768020	So we have logged in with the app user and this user doesn't have ping permission.
1768020	1770700	So let's exit.
1770700	1772300	I'm going to bring up the last command.
1772300	1776100	Now here we have to use an extra option for setting the user.
1776100	1779460	We're going to log in as the root user.
1779460	1780460	Good.
1780460	1782100	Now look at the shell prompt.
1782100	1785580	We have a pound sign, which means we have the highest privileges.
1785580	1787220	So here we can ping API.
1787220	1793500	Now look, we're getting responses from a machine with this IP address.
1793500	1796220	Now on your machine, this IP might be different.
1796220	1799260	Now let's press Ctrl and C to get out of this.
1799260	1801740	So this is what happens under the hood.
1801740	1807420	Docker comes with an embedded DNS server that contains the name and IP of these containers.
1807420	1812060	Now inside each container, we have a component called the DNS resolver.
1812060	1817940	This DNS resolver talks to the DNS server to find the IP address of the target container.
1817940	1824140	So when we ping the API container, this DNS resolver asks the server, what is the IP address
1824140	1827220	of the API machine or API container?
1827220	1832340	The DNS server returns the IP address and then the web container can directly talk to
1832340	1835220	the API container using its IP address.
1835220	1839300	So each container has an IP address and is part of a network.
1839300	1840780	Let me show you one more thing.
1840780	1846940	So back to the terminal, here we can run ifconfig to see the IP address of this container.
1846940	1847940	Take a look.
1847940	1855380	So this container has two network adapters, one of them is Ethernet zero and over here
1855380	1858300	you can see the IP address of this container.
1858300	1864700	So 172.21.02 is the IP address of the web container.
1864700	1870100	Now back to our compose file, earlier when we defined the API service, we added an environment
1870100	1873860	variable that contains a database connection string.
1873860	1878820	In this connection string we have DB, which is the name of a host, that is the DB host
1878820	1880340	or the DB container.
1880340	1884940	You saw that our API container can talk to this container because both these containers
1884940	1889100	or all containers in this application are part of the same network.
1889100	1894540	Now one thing I want you to understand here is that this host is only available inside
1894540	1896220	the Docker environment.
1896220	1902580	So if I open up my browser and go to localhost slash DB, I'm not going to get anything.
1902580	1908020	So the API container can directly talk to the DB container, but if you want to access
1908020	1914420	this container we need port mappings and that is why we have this port mapping over here.
1914420	1919260	So this port on the host is mapped to this port on the container.
1919260	1924540	So if you open up MongoDB Compass, which is a popular MongoDB client, we can establish
1924540	1931780	a connection to localhost port 27017, because this port is mapped to our container.
1931780	1933340	Let's verify this real quick.
1933340	1935340	So connect, great.
1935340	1939660	So here we can see all our databases, here's our vitli database and in this database we
1939660	1942980	have a collection called movies with four documents.
1942980	1947260	So here are the movies that we currently have in the database.
1947260	1954060	So this is all about Docker networking, next we're going to talk about viewing logs.
1954060	1955860	Thank you so much for watching this video.
1955860	1960620	As I said, this video is part of my ultimate Docker course that teaches you everything you
1960620	1964420	need to know about Docker from the basics to more advanced concepts.
1964420	1967940	So if you want to learn more, I highly encourage you to take a full course.
1967940	1971820	It's much faster and better than jumping from one tutorial to another.
1971820	1974580	If you're interested, the link is below this video.
1974580	1975380	Thank you and have a great day.
